head	1.8;
access;
symbols
	newlib-2_2_0:1.8.0.32
	newlib-2_1_0:1.8
	binutils-2_24-branch:1.8.0.30
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	gdb_7_6_1-2013-08-30-release:1.8
	gdb_7_6-2013-04-26-release:1.8
	binutils-2_23_2:1.8
	gdb_7_6-branch:1.8.0.28
	gdb_7_6-2013-03-12-branchpoint:1.8
	newlib-2_0_0:1.8
	gdb_7_5_1-2012-11-29-release:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	gdb_7_5-2012-08-17-release:1.8
	binutils-2_23-branch:1.8.0.26
	binutils-2_23-branchpoint:1.8
	gdb_7_5-branch:1.8.0.24
	gdb_7_5-2012-07-18-branchpoint:1.8
	binutils-2_22_branch:1.8.0.22
	gdb_7_4_1-2012-04-26-release:1.8
	gdb_7_4-2012-01-24-release:1.8
	newlib-1_20_0:1.8
	gdb_7_4-branch:1.8.0.20
	gdb_7_4-2011-12-13-branchpoint:1.8
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.18
	binutils-2_22-branchpoint:1.8
	gdb_7_3_1-2011-09-04-release:1.8
	gdb_7_3-2011-07-26-release:1.8
	gdb_7_3-branch:1.8.0.16
	gdb_7_3-2011-04-01-branchpoint:1.8
	newlib-1_19_0:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.14
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.8
	gdb_7_2-2010-09-02-release:1.8
	gdb_7_2-branch:1.8.0.12
	gdb_7_2-2010-07-07-branchpoint:1.8
	gdb_7_1-2010-03-18-release:1.8
	gdb_7_1-branch:1.8.0.10
	gdb_7_1-2010-02-18-branchpoint:1.8
	gdb_7_0_1-2009-12-22-release:1.8
	newlib-1_18_0:1.8
	binutils-2_20:1.8
	gdb_7_0-2009-10-06-release:1.8
	gdb_7_0-branch:1.8.0.8
	gdb_7_0-2009-09-16-branchpoint:1.8
	arc-sim-20090309:1.7
	binutils-arc-20081103-branch:1.7.0.86
	binutils-arc-20081103-branchpoint:1.7
	newlib-1_17_0-arc:1.7.0.84
	binutils-2_20-branch:1.8.0.6
	binutils-2_20-branchpoint:1.8
	msnyder-checkpoint-072509-branch:1.8.0.4
	msnyder-checkpoint-072509-branchpoint:1.8
	dje-cgen-play1-branch:1.8.0.2
	dje-cgen-play1-branchpoint:1.8
	binutils-arc-20080908-branch:1.7.0.82
	binutils-arc-20080908-branchpoint:1.7
	arc-20081103-branch:1.7.0.80
	arc-20081103-branchpoint:1.7
	arc-insight_6_8-branch:1.7.0.78
	arc-insight_6_8-branchpoint:1.7
	insight_6_8-branch:1.7.0.76
	insight_6_8-branchpoint:1.7
	binutils-2_19_1:1.7
	reverse-20081226-branch:1.7.0.74
	reverse-20081226-branchpoint:1.7
	newlib-1_17_0:1.7
	multiprocess-20081120-branch:1.7.0.72
	multiprocess-20081120-branchpoint:1.7
	binutils-2_19:1.7
	reverse-20080930-branch:1.7.0.70
	reverse-20080930-branchpoint:1.7
	binutils-2_19-branch:1.7.0.68
	binutils-2_19-branchpoint:1.7
	reverse-20080717-branch:1.7.0.66
	reverse-20080717-branchpoint:1.7
	msnyder-reverse-20080609-branch:1.7.0.64
	msnyder-reverse-20080609-branchpoint:1.7
	drow-reverse-20070409-branch:1.7.0.62
	drow-reverse-20070409-branchpoint:1.7
	gdb_6_8-2008-03-27-release:1.7
	gdb_6_8-branch:1.7.0.60
	gdb_6_8-2008-02-26-branchpoint:1.7
	newlib-1_16_0:1.7
	gdb_6_7_1-2007-10-29-release:1.7
	gdb_6_7-2007-10-10-release:1.7
	gdb_6_7-branch:1.7.0.58
	gdb_6_7-2007-09-07-branchpoint:1.7
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.56
	binutils-2_18-branchpoint:1.7
	insight_6_6-20070208-release:1.7
	newlib-1_15_0:1.7
	newlib-csl-coldfire-4_1-32:1.7
	binutils-csl-coldfire-4_1-32:1.7
	newlib-csl-sourcerygxx-4_1-32:1.7
	binutils-csl-sourcerygxx-4_1-32:1.7
	gdb_6_6-2006-12-18-release:1.7
	newlib-csl-innovasic-fido-3_4_4-33:1.7
	binutils-csl-innovasic-fido-3_4_4-33:1.7
	binutils-csl-sourcerygxx-3_4_4-32:1.7
	newlib-csl-coldfire-4_1-30:1.7
	binutils-csl-coldfire-4_1-30:1.7
	newlib-csl-sourcerygxx-4_1-30:1.7
	binutils-csl-sourcerygxx-4_1-30:1.7
	newlib-csl-coldfire-4_1-28:1.7
	binutils-csl-coldfire-4_1-28:1.7
	binutils-csl-sourcerygxx-4_1-29:1.7
	newlib-csl-sourcerygxx-4_1-28:1.7
	binutils-csl-sourcerygxx-4_1-28:1.7
	gdb_6_6-branch:1.7.0.54
	gdb_6_6-2006-11-15-branchpoint:1.7
	newlib-csl-arm-2006q3-27:1.7
	binutils-csl-arm-2006q3-27:1.7
	newlib-csl-sourcerygxx-4_1-27:1.7
	binutils-csl-sourcerygxx-4_1-27:1.7
	newlib-csl-arm-2006q3-26:1.7
	binutils-csl-arm-2006q3-26:1.7
	newlib-csl-sourcerygxx-4_1-26:1.7
	binutils-csl-sourcerygxx-4_1-26:1.7
	binutils-csl-sourcerygxx-4_1-25:1.7
	newlib-csl-sourcerygxx-4_1-24:1.7
	binutils-csl-sourcerygxx-4_1-24:1.7
	newlib-csl-sourcerygxx-4_1-23:1.7
	binutils-csl-sourcerygxx-4_1-23:1.7
	insight_6_5-20061003-release:1.7
	gdb-csl-symbian-6_4_50_20060226-12:1.7
	newlib-csl-sourcerygxx-4_1-21:1.7
	binutils-csl-sourcerygxx-4_1-21:1.7
	newlib-csl-arm-2006q3-21:1.7
	binutils-csl-arm-2006q3-21:1.7
	binutils-csl-sourcerygxx-4_1-22:1.7
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.7
	binutils-csl-sourcerygxx-4_1-20:1.7
	newlib-csl-arm-2006q3-19:1.7
	binutils-csl-arm-2006q3-19:1.7
	newlib-csl-sourcerygxx-4_1-19:1.7
	binutils-csl-sourcerygxx-4_1-19:1.7
	newlib-csl-sourcerygxx-4_1-18:1.7
	binutils-csl-sourcerygxx-4_1-18:1.7
	binutils-csl-renesas-4_1-9:1.7
	newlib-csl-sourcerygxx-3_4_4-25:1.7
	gdb-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-sourcerygxx-3_4_4-25:1.7
	nickrob-async-20060828-mergepoint:1.7
	gdb-csl-symbian-6_4_50_20060226-11:1.7
	binutils-csl-renesas-4_1-8:1.7
	binutils-csl-renesas-4_1-7:1.7
	binutils-csl-renesas-4_1-6:1.7
	newlib-csl-sourcerygxx-4_1-17:1.7
	gdb-csl-sourcerygxx-4_1-17:1.7
	binutils-csl-sourcerygxx-4_1-17:1.7
	gdb-csl-20060226-branch-local-2:1.7
	newlib-csl-sourcerygxx-4_1-14:1.7
	gdb-csl-sourcerygxx-4_1-14:1.7
	binutils-csl-sourcerygxx-4_1-14:1.7
	binutils-csl-sourcerygxx-4_1-15:1.7
	newlib-csl-sourcerygxx-4_1-13:1.7
	gdb-csl-sourcerygxx-4_1-13:1.7
	binutils-csl-sourcerygxx-4_1-13:1.7
	binutils-2_17:1.7
	newlib-csl-sourcerygxx-4_1-12:1.7
	gdb-csl-sourcerygxx-4_1-12:1.7
	binutils-csl-sourcerygxx-4_1-12:1.7
	gdb-csl-sourcerygxx-3_4_4-21:1.7
	binutils-csl-sourcerygxx-3_4_4-21:1.7
	gdb_6_5-20060621-release:1.7
	binutils-csl-wrs-linux-3_4_4-24:1.7
	binutils-csl-wrs-linux-3_4_4-23:1.7
	newlib-csl-sourcerygxx-4_1-9:1.7
	gdb-csl-sourcerygxx-4_1-9:1.7
	binutils-csl-sourcerygxx-4_1-9:1.7
	newlib-csl-sourcerygxx-4_1-8:1.7
	gdb-csl-sourcerygxx-4_1-8:1.7
	binutils-csl-sourcerygxx-4_1-8:1.7
	newlib-csl-sourcerygxx-4_1-7:1.7
	gdb-csl-sourcerygxx-4_1-7:1.7
	binutils-csl-sourcerygxx-4_1-7:1.7
	newlib-csl-arm-2006q1-6:1.7
	gdb-csl-arm-2006q1-6:1.7
	binutils-csl-arm-2006q1-6:1.7
	newlib-csl-sourcerygxx-4_1-6:1.7
	gdb-csl-sourcerygxx-4_1-6:1.7
	binutils-csl-sourcerygxx-4_1-6:1.7
	binutils-csl-wrs-linux-3_4_4-22:1.7
	gdb-csl-symbian-6_4_50_20060226-10:1.7
	gdb-csl-symbian-6_4_50_20060226-9:1.7
	gdb-csl-symbian-6_4_50_20060226-8:1.7
	gdb-csl-coldfire-4_1-11:1.7
	binutils-csl-coldfire-4_1-11:1.7
	gdb-csl-sourcerygxx-3_4_4-19:1.7
	binutils-csl-sourcerygxx-3_4_4-19:1.7
	gdb-csl-coldfire-4_1-10:1.7
	gdb_6_5-branch:1.7.0.52
	gdb_6_5-2006-05-14-branchpoint:1.7
	binutils-csl-coldfire-4_1-10:1.7
	newlib-csl-sourcerygxx-4_1-5:1.7
	gdb-csl-sourcerygxx-4_1-5:1.7
	binutils-csl-sourcerygxx-4_1-5:1.7
	nickrob-async-20060513-branch:1.7.0.50
	nickrob-async-20060513-branchpoint:1.7
	newlib-csl-sourcerygxx-4_1-4:1.7
	gdb-csl-sourcerygxx-4_1-4:1.7
	binutils-csl-sourcerygxx-4_1-4:1.7
	msnyder-reverse-20060502-branch:1.7.0.48
	msnyder-reverse-20060502-branchpoint:1.7
	binutils-csl-wrs-linux-3_4_4-21:1.7
	gdb-csl-morpho-4_1-4:1.7
	binutils-csl-morpho-4_1-4:1.7
	gdb-csl-sourcerygxx-3_4_4-17:1.7
	binutils-csl-sourcerygxx-3_4_4-17:1.7
	binutils-csl-wrs-linux-3_4_4-20:1.7
	readline_5_1-import-branch:1.7.0.46
	readline_5_1-import-branchpoint:1.7
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.7
	binutils-2_17-branch:1.7.0.44
	binutils-2_17-branchpoint:1.7
	gdb-csl-symbian-20060226-branch:1.7.0.42
	gdb-csl-symbian-20060226-branchpoint:1.7
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.7
	msnyder-reverse-20060331-branch:1.7.0.40
	msnyder-reverse-20060331-branchpoint:1.7
	newlib-autotools-branch:1.7.0.38
	newlib-csl-20060320-branch:1.7.0.36
	newlib-csl-20060320-branchpoint:1.7
	binutils-csl-2_17-branch:1.7.0.34
	binutils-csl-2_17-branchpoint:1.7
	gdb-csl-available-20060303-branch:1.7.0.32
	gdb-csl-available-20060303-branchpoint:1.7
	gdb-csl-20060226-branch:1.7.0.30
	gdb-csl-20060226-branchpoint:1.7
	newlib-1_14_0:1.7
	gdb_6_4-20051202-release:1.7
	gdb-csl-gxxpro-6_3-branch:1.7.0.28
	gdb-csl-gxxpro-6_3-branchpoint:1.7
	gdb_6_4-branch:1.7.0.26
	gdb_6_4-2005-11-01-branchpoint:1.7
	gdb-csl-arm-20051020-branch:1.7.0.24
	gdb-csl-arm-20051020-branchpoint:1.7
	binutils-csl-gxxpro-3_4-branch:1.7.0.22
	binutils-csl-gxxpro-3_4-branchpoint:1.7
	binutils-2_16_1:1.7
	msnyder-tracepoint-checkpoint-branch:1.7.0.20
	msnyder-tracepoint-checkpoint-branchpoint:1.7
	gdb-csl-arm-20050325-2005-q1b:1.7
	binutils-csl-arm-2005q1b:1.7
	newlib-csl-arm-2005-q1b:1.7
	binutils-2_16:1.7
	gdb-csl-arm-20050325-2005-q1a:1.7
	newlib-csl-arm-2005-q1a:1.7
	binutils-csl-arm-2005q1a:1.7
	csl-arm-20050325-branch:1.7.0.18
	csl-arm-20050325-branchpoint:1.7
	binutils-csl-arm-2005q1-branch:1.7.0.16
	binutils-csl-arm-2005q1-branchpoint:1.7
	binutils-2_16-branch:1.7.0.14
	binutils-2_16-branchpoint:1.7
	newlib-1_13_0:1.7
	csl-arm-2004-q3d:1.7
	gdb_6_3-20041109-release:1.7
	gdb_6_3-branch:1.7.0.10
	gdb_6_3-20041019-branchpoint:1.7
	csl-arm-2004-q3:1.7
	drow_intercu-merge-20040921:1.7
	drow_intercu-merge-20040915:1.7
	jimb-gdb_6_2-e500-branch:1.7.0.12
	jimb-gdb_6_2-e500-branchpoint:1.7
	gdb_6_2-20040730-release:1.7
	gdb_6_2-branch:1.7.0.8
	gdb_6_2-2004-07-10-gmt-branchpoint:1.7
	gdb_6_1_1-20040616-release:1.7
	binutils-2_15:1.6.42.1
	binutils-2_15-branchpoint:1.6
	csl-arm-2004-q1a:1.7
	csl-arm-2004-q1:1.7
	gdb_6_1-2004-04-05-release:1.7
	drow_intercu-merge-20040402:1.7
	drow_intercu-merge-20040327:1.7
	ezannoni_pie-20040323-branch:1.7.0.6
	ezannoni_pie-20040323-branchpoint:1.7
	cagney_tramp-20040321-mergepoint:1.7
	cagney_tramp-20040309-branch:1.7.0.4
	cagney_tramp-20040309-branchpoint:1.7
	gdb_6_1-branch:1.7.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.7
	drow_intercu-20040221-branch:1.6.0.44
	drow_intercu-20040221-branchpoint:1.6
	binutils-2_15-branch:1.6.0.42
	cagney_bfdfile-20040213-branch:1.6.0.40
	cagney_bfdfile-20040213-branchpoint:1.6
	drow-cplus-merge-20040208:1.6
	newlib-1_12_0:1.6
	carlton_dictionary-20040126-merge:1.6
	cagney_bigcore-20040122-branch:1.6.0.38
	cagney_bigcore-20040122-branchpoint:1.6
	drow-cplus-merge-20040113:1.6
	csl-arm-2003-q4:1.6
	drow-cplus-merge-20031224:1.6
	drow-cplus-merge-20031220:1.6
	carlton_dictionary-20031215-merge:1.6
	drow-cplus-merge-20031214:1.6
	carlton-dictionary-20031111-merge:1.6
	gdb_6_0-2003-10-04-release:1.6
	kettenis_sparc-20030918-branch:1.6.0.36
	kettenis_sparc-20030918-branchpoint:1.6
	carlton_dictionary-20030917-merge:1.6
	ezannoni_pie-20030916-branchpoint:1.6
	ezannoni_pie-20030916-branch:1.6.0.34
	cagney_x86i386-20030821-branch:1.6.0.32
	cagney_x86i386-20030821-branchpoint:1.6
	carlton_dictionary-20030805-merge:1.6
	carlton_dictionary-20030627-merge:1.6
	gdb_6_0-branch:1.6.0.30
	gdb_6_0-2003-06-23-branchpoint:1.6
	jimb-ppc64-linux-20030613-branch:1.6.0.28
	jimb-ppc64-linux-20030613-branchpoint:1.6
	binutils-2_14:1.6
	cagney_convert-20030606-branch:1.6.0.26
	cagney_convert-20030606-branchpoint:1.6
	cagney_writestrings-20030508-branch:1.6.0.24
	cagney_writestrings-20030508-branchpoint:1.6
	jimb-ppc64-linux-20030528-branch:1.6.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.6
	carlton_dictionary-20030523-merge:1.6
	cagney_fileio-20030521-branch:1.6.0.20
	cagney_fileio-20030521-branchpoint:1.6
	kettenis_i386newframe-20030517-mergepoint:1.6
	jimb-ppc64-linux-20030509-branch:1.6.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.6
	kettenis_i386newframe-20030504-mergepoint:1.6
	carlton_dictionary-20030430-merge:1.6
	binutils-2_14-branch:1.6.0.16
	binutils-2_14-branchpoint:1.6
	kettenis_i386newframe-20030419-branch:1.6.0.14
	kettenis_i386newframe-20030419-branchpoint:1.6
	carlton_dictionary-20030416-merge:1.6
	cagney_frameaddr-20030409-mergepoint:1.6
	kettenis_i386newframe-20030406-branch:1.6.0.12
	kettenis_i386newframe-20030406-branchpoint:1.6
	cagney_frameaddr-20030403-branchpoint:1.6
	cagney_frameaddr-20030403-branch:1.6.0.10
	cagney_framebase-20030330-mergepoint:1.6
	cagney_framebase-20030326-branch:1.6.0.8
	cagney_framebase-20030326-branchpoint:1.6
	cagney_lazyid-20030317-branch:1.6.0.6
	cagney_lazyid-20030317-branchpoint:1.6
	kettenis-i386newframe-20030316-mergepoint:1.6
	offbyone-20030313-branch:1.6.0.4
	offbyone-20030313-branchpoint:1.6
	kettenis-i386newframe-20030308-branch:1.6.0.2
	kettenis-i386newframe-20030308-branchpoint:1.6
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	carlton_dictionary-20021223-merge:1.5
	newlib-1_11_0:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	binutils-2_13_1:1.4
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	binutils-2_13:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.10
	kseitz_interps-20020528-branch:1.4.0.8
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.6
	cagney_regbuf-20020515-branchpoint:1.4
	binutils-2_12_1:1.3
	jimb-macro-020506-branch:1.4.0.4
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	binutils-2_12:1.3
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	binutils-2_12-branch:1.3.0.10
	binutils-2_12-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	newlib-1_10_0:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	binutils-2_11_2:1.3
	binutils-2_11_1:1.3
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	insight-precleanup-2001-01-01:1.3
	newlib-1_9_0:1.3
	binutils-2_10_1:1.1
	binutils-2_10:1.1
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb_5_0-2000-05-19-release:1.1
	gdb_4_18_2-2000-05-18-release:1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1
	gdb_5_0-2000-04-10-branch:1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1
	binutils-2_10-branch:1.1.0.2
	binutils-2_10-branchpoint:1.1
	binutils_latest_snapshot:1.8
	repo-unification-2000-02-06:1.1
	binu_ss_19990721:1.1;
locks; strict;
comment	@% @;


1.8
date	2009.04.21.12.36.46;	author jsm28;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.23.19.37.48;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.06.20.50.01;	author cagney;	state Exp;
branches
	1.6.42.1
	1.6.44.1;
next	1.5;

1.5
date	2002.08.23.22.24.57;	author cagney;	state Exp;
branches
	1.5.8.1
	1.5.10.1;
next	1.4;

1.4
date	2002.02.27.02.13.36;	author cagney;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2000.07.06.05.39.36;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.31.10.18.58;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.06.12.09.59.55;	author ian;	state Exp;
branches
	1.1.4.1;
next	;

1.6.42.1
date	2004.04.09.18.28.17;	author drow;	state Exp;
branches;
next	;

1.6.44.1
date	2004.03.27.17.38.24;	author drow;	state Exp;
branches;
next	;

1.5.8.1
date	2003.04.16.19.57.09;	author carlton;	state Exp;
branches;
next	;

1.5.10.1
date	2003.12.14.20.28.56;	author drow;	state Exp;
branches;
next	;

1.4.8.1
date	2002.08.30.22.52.58;	author kseitz;	state Exp;
branches;
next	;

1.1.4.1
date	2000.05.31.08.16.48;	author cagney;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* texinfo/texinfo.tex: Update to version 2009-03-28.05.
@
text
@% texinfo.tex -- TeX macros to handle Texinfo files.
%
% Load plain if necessary, i.e., if running under initex.
\expandafter\ifx\csname fmtname\endcsname\relax\input plain\fi
%
\def\texinfoversion{2009-03-28.05}
%
% Copyright 1985, 1986, 1988, 1990, 1991, 1992, 1993, 1994, 1995,
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
% 2007, 2008, 2009 Free Software Foundation, Inc.
%
% This texinfo.tex file is free software: you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation, either version 3 of the
% License, or (at your option) any later version.
%
% This texinfo.tex file is distributed in the hope that it will be
% useful, but WITHOUT ANY WARRANTY; without even the implied warranty
% of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
%
% As a special exception, when this file is read by TeX when processing
% a Texinfo source document, you may use the result without
% restriction.  (This has been our intent since Texinfo was invented.)
%
% Please try the latest version of texinfo.tex before submitting bug
% reports; you can get the latest version from:
%   http://www.gnu.org/software/texinfo/ (the Texinfo home page), or
%   ftp://tug.org/tex/texinfo.tex
%     (and all CTAN mirrors, see http://www.ctan.org).
% The texinfo.tex in any given distribution could well be out
% of date, so if that's what you're using, please check.
%
% Send bug reports to bug-texinfo@@gnu.org.  Please include including a
% complete document in each bug report with which we can reproduce the
% problem.  Patches are, of course, greatly appreciated.
%
% To process a Texinfo manual with TeX, it's most reliable to use the
% texi2dvi shell script that comes with the distribution.  For a simple
% manual foo.texi, however, you can get away with this:
%   tex foo.texi
%   texindex foo.??
%   tex foo.texi
%   tex foo.texi
%   dvips foo.dvi -o  # or whatever; this makes foo.ps.
% The extra TeX runs get the cross-reference information correct.
% Sometimes one run after texindex suffices, and sometimes you need more
% than two; texi2dvi does it as many times as necessary.
%
% It is possible to adapt texinfo.tex for other languages, to some
% extent.  You can get the existing language-specific files from the
% full Texinfo distribution.
%
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.


\message{Loading texinfo [version \texinfoversion]:}

% If in a .fmt file, print the version number
% and turn on active characters that we couldn't do earlier because
% they might have appeared in the input file name.
\everyjob{\message{[Texinfo version \texinfoversion]}%
  \catcode`+=\active \catcode`\_=\active}


\chardef\other=12

% We never want plain's \outer definition of \+ in Texinfo.
% For @@tex, we can use \tabalign.
\let\+ = \relax

% Save some plain tex macros whose names we will redefine.
\let\ptexb=\b
\let\ptexbullet=\bullet
\let\ptexc=\c
\let\ptexcomma=\,
\let\ptexdot=\.
\let\ptexdots=\dots
\let\ptexend=\end
\let\ptexequiv=\equiv
\let\ptexexclam=\!
\let\ptexfootnote=\footnote
\let\ptexgtr=>
\let\ptexhat=^
\let\ptexi=\i
\let\ptexindent=\indent
\let\ptexinsert=\insert
\let\ptexlbrace=\{
\let\ptexless=<
\let\ptexnewwrite\newwrite
\let\ptexnoindent=\noindent
\let\ptexplus=+
\let\ptexrbrace=\}
\let\ptexslash=\/
\let\ptexstar=\*
\let\ptext=\t
\let\ptextop=\top
{\catcode`\'=\active
\global\let\ptexquoteright'}% Math-mode def from plain.tex.
\let\ptexraggedright=\raggedright

% If this character appears in an error message or help string, it
% starts a new line in the output.
\newlinechar = `^^J

% Use TeX 3.0's \inputlineno to get the line number, for better error
% messages, but if we're using an old version of TeX, don't do anything.
%
\ifx\inputlineno\thisisundefined
  \let\linenumber = \empty % Pre-3.0.
\else
  \def\linenumber{l.\the\inputlineno:\space}
\fi

% Set up fixed words for English if not already set.
\ifx\putwordAppendix\undefined  \gdef\putwordAppendix{Appendix}\fi
\ifx\putwordChapter\undefined   \gdef\putwordChapter{Chapter}\fi
\ifx\putwordfile\undefined      \gdef\putwordfile{file}\fi
\ifx\putwordin\undefined        \gdef\putwordin{in}\fi
\ifx\putwordIndexIsEmpty\undefined     \gdef\putwordIndexIsEmpty{(Index is empty)}\fi
\ifx\putwordIndexNonexistent\undefined \gdef\putwordIndexNonexistent{(Index is nonexistent)}\fi
\ifx\putwordInfo\undefined      \gdef\putwordInfo{Info}\fi
\ifx\putwordInstanceVariableof\undefined \gdef\putwordInstanceVariableof{Instance Variable of}\fi
\ifx\putwordMethodon\undefined  \gdef\putwordMethodon{Method on}\fi
\ifx\putwordNoTitle\undefined   \gdef\putwordNoTitle{No Title}\fi
\ifx\putwordof\undefined        \gdef\putwordof{of}\fi
\ifx\putwordon\undefined        \gdef\putwordon{on}\fi
\ifx\putwordpage\undefined      \gdef\putwordpage{page}\fi
\ifx\putwordsection\undefined   \gdef\putwordsection{section}\fi
\ifx\putwordSection\undefined   \gdef\putwordSection{Section}\fi
\ifx\putwordsee\undefined       \gdef\putwordsee{see}\fi
\ifx\putwordSee\undefined       \gdef\putwordSee{See}\fi
\ifx\putwordShortTOC\undefined  \gdef\putwordShortTOC{Short Contents}\fi
\ifx\putwordTOC\undefined       \gdef\putwordTOC{Table of Contents}\fi
%
\ifx\putwordMJan\undefined \gdef\putwordMJan{January}\fi
\ifx\putwordMFeb\undefined \gdef\putwordMFeb{February}\fi
\ifx\putwordMMar\undefined \gdef\putwordMMar{March}\fi
\ifx\putwordMApr\undefined \gdef\putwordMApr{April}\fi
\ifx\putwordMMay\undefined \gdef\putwordMMay{May}\fi
\ifx\putwordMJun\undefined \gdef\putwordMJun{June}\fi
\ifx\putwordMJul\undefined \gdef\putwordMJul{July}\fi
\ifx\putwordMAug\undefined \gdef\putwordMAug{August}\fi
\ifx\putwordMSep\undefined \gdef\putwordMSep{September}\fi
\ifx\putwordMOct\undefined \gdef\putwordMOct{October}\fi
\ifx\putwordMNov\undefined \gdef\putwordMNov{November}\fi
\ifx\putwordMDec\undefined \gdef\putwordMDec{December}\fi
%
\ifx\putwordDefmac\undefined    \gdef\putwordDefmac{Macro}\fi
\ifx\putwordDefspec\undefined   \gdef\putwordDefspec{Special Form}\fi
\ifx\putwordDefvar\undefined    \gdef\putwordDefvar{Variable}\fi
\ifx\putwordDefopt\undefined    \gdef\putwordDefopt{User Option}\fi
\ifx\putwordDeffunc\undefined   \gdef\putwordDeffunc{Function}\fi

% Since the category of space is not known, we have to be careful.
\chardef\spacecat = 10
\def\spaceisspace{\catcode`\ =\spacecat}

% sometimes characters are active, so we need control sequences.
\chardef\colonChar = `\:
\chardef\commaChar = `\,
\chardef\dashChar  = `\-
\chardef\dotChar   = `\.
\chardef\exclamChar= `\!
\chardef\lquoteChar= `\`
\chardef\questChar = `\?
\chardef\rquoteChar= `\'
\chardef\semiChar  = `\;
\chardef\underChar = `\_

% Ignore a token.
%
\def\gobble#1{}

% The following is used inside several \edef's.
\def\makecsname#1{\expandafter\noexpand\csname#1\endcsname}

% Hyphenation fixes.
\hyphenation{
  Flor-i-da Ghost-script Ghost-view Mac-OS Post-Script
  ap-pen-dix bit-map bit-maps
  data-base data-bases eshell fall-ing half-way long-est man-u-script
  man-u-scripts mini-buf-fer mini-buf-fers over-view par-a-digm
  par-a-digms rath-er rec-tan-gu-lar ro-bot-ics se-vere-ly set-up spa-ces
  spell-ing spell-ings
  stand-alone strong-est time-stamp time-stamps which-ever white-space
  wide-spread wrap-around
}

% Margin to add to right of even pages, to left of odd pages.
\newdimen\bindingoffset
\newdimen\normaloffset
\newdimen\pagewidth \newdimen\pageheight

% For a final copy, take out the rectangles
% that mark overfull boxes (in case you have decided
% that the text looks ok even though it passes the margin).
%
\def\finalout{\overfullrule=0pt}

% @@| inserts a changebar to the left of the current line.  It should
% surround any changed text.  This approach does *not* work if the
% change spans more than two lines of output.  To handle that, we would
% have adopt a much more difficult approach (putting marks into the main
% vertical list for the beginning and end of each change).
%
\def\|{%
  % \vadjust can only be used in horizontal mode.
  \leavevmode
  %
  % Append this vertical mode material after the current line in the output.
  \vadjust{%
    % We want to insert a rule with the height and depth of the current
    % leading; that is exactly what \strutbox is supposed to record.
    \vskip-\baselineskip
    %
    % \vadjust-items are inserted at the left edge of the type.  So
    % the \llap here moves out into the left-hand margin.
    \llap{%
      %
      % For a thicker or thinner bar, change the `1pt'.
      \vrule height\baselineskip width1pt
      %
      % This is the space between the bar and the text.
      \hskip 12pt
    }%
  }%
}

% Sometimes it is convenient to have everything in the transcript file
% and nothing on the terminal.  We don't just call \tracingall here,
% since that produces some useless output on the terminal.  We also make
% some effort to order the tracing commands to reduce output in the log
% file; cf. trace.sty in LaTeX.
%
\def\gloggingall{\begingroup \globaldefs = 1 \loggingall \endgroup}%
\def\loggingall{%
  \tracingstats2
  \tracingpages1
  \tracinglostchars2  % 2 gives us more in etex
  \tracingparagraphs1
  \tracingoutput1
  \tracingmacros2
  \tracingrestores1
  \showboxbreadth\maxdimen \showboxdepth\maxdimen
  \ifx\eTeXversion\undefined\else % etex gives us more logging
    \tracingscantokens1
    \tracingifs1
    \tracinggroups1
    \tracingnesting2
    \tracingassigns1
  \fi
  \tracingcommands3  % 3 gives us more in etex
  \errorcontextlines16
}%

% add check for \lastpenalty to plain's definitions.  If the last thing
% we did was a \nobreak, we don't want to insert more space.
%
\def\smallbreak{\ifnum\lastpenalty<10000\par\ifdim\lastskip<\smallskipamount
  \removelastskip\penalty-50\smallskip\fi\fi}
\def\medbreak{\ifnum\lastpenalty<10000\par\ifdim\lastskip<\medskipamount
  \removelastskip\penalty-100\medskip\fi\fi}
\def\bigbreak{\ifnum\lastpenalty<10000\par\ifdim\lastskip<\bigskipamount
  \removelastskip\penalty-200\bigskip\fi\fi}

% For @@cropmarks command.
% Do @@cropmarks to get crop marks.
%
\newif\ifcropmarks
\let\cropmarks = \cropmarkstrue
%
% Dimensions to add cropmarks at corners.
% Added by P. A. MacKay, 12 Nov. 1986
%
\newdimen\outerhsize \newdimen\outervsize % set by the paper size routines
\newdimen\cornerlong  \cornerlong=1pc
\newdimen\cornerthick \cornerthick=.3pt
\newdimen\topandbottommargin \topandbottommargin=.75in

% Output a mark which sets \thischapter, \thissection and \thiscolor.
% We dump everything together because we only have one kind of mark.
% This works because we only use \botmark / \topmark, not \firstmark.
%
% A mark contains a subexpression of the \ifcase ... \fi construct.
% \get*marks macros below extract the needed part using \ifcase.
%
% Another complication is to let the user choose whether \thischapter
% (\thissection) refers to the chapter (section) in effect at the top
% of a page, or that at the bottom of a page.  The solution is
% described on page 260 of The TeXbook.  It involves outputting two
% marks for the sectioning macros, one before the section break, and
% one after.  I won't pretend I can describe this better than DEK...
\def\domark{%
  \toks0=\expandafter{\lastchapterdefs}%
  \toks2=\expandafter{\lastsectiondefs}%
  \toks4=\expandafter{\prevchapterdefs}%
  \toks6=\expandafter{\prevsectiondefs}%
  \toks8=\expandafter{\lastcolordefs}%
  \mark{%
                   \the\toks0 \the\toks2
      \noexpand\or \the\toks4 \the\toks6
    \noexpand\else \the\toks8
  }%
}
% \topmark doesn't work for the very first chapter (after the title
% page or the contents), so we use \firstmark there -- this gets us
% the mark with the chapter defs, unless the user sneaks in, e.g.,
% @@setcolor (or @@url, or @@link, etc.) between @@contents and the very
% first @@chapter.
\def\gettopheadingmarks{%
  \ifcase0\topmark\fi
  \ifx\thischapter\empty \ifcase0\firstmark\fi \fi
}
\def\getbottomheadingmarks{\ifcase1\botmark\fi}
\def\getcolormarks{\ifcase2\topmark\fi}

% Avoid "undefined control sequence" errors.
\def\lastchapterdefs{}
\def\lastsectiondefs{}
\def\prevchapterdefs{}
\def\prevsectiondefs{}
\def\lastcolordefs{}

% Main output routine.
\chardef\PAGE = 255
\output = {\onepageout{\pagecontents\PAGE}}

\newbox\headlinebox
\newbox\footlinebox

% \onepageout takes a vbox as an argument.  Note that \pagecontents
% does insertions, but you have to call it yourself.
\def\onepageout#1{%
  \ifcropmarks \hoffset=0pt \else \hoffset=\normaloffset \fi
  %
  \ifodd\pageno  \advance\hoffset by \bindingoffset
  \else \advance\hoffset by -\bindingoffset\fi
  %
  % Do this outside of the \shipout so @@code etc. will be expanded in
  % the headline as they should be, not taken literally (outputting ''code).
  \ifodd\pageno \getoddheadingmarks \else \getevenheadingmarks \fi
  \setbox\headlinebox = \vbox{\let\hsize=\pagewidth \makeheadline}%
  \ifodd\pageno \getoddfootingmarks \else \getevenfootingmarks \fi
  \setbox\footlinebox = \vbox{\let\hsize=\pagewidth \makefootline}%
  %
  {%
    % Have to do this stuff outside the \shipout because we want it to
    % take effect in \write's, yet the group defined by the \vbox ends
    % before the \shipout runs.
    %
    \indexdummies         % don't expand commands in the output.
    \normalturnoffactive  % \ in index entries must not stay \, e.g., if
               % the page break happens to be in the middle of an example.
               % We don't want .vr (or whatever) entries like this:
               % \entry{{\tt \indexbackslash }acronym}{32}{\code {\acronym}}
               % "\acronym" won't work when it's read back in;
               % it needs to be
               % {\code {{\tt \backslashcurfont }acronym}
    \shipout\vbox{%
      % Do this early so pdf references go to the beginning of the page.
      \ifpdfmakepagedest \pdfdest name{\the\pageno} xyz\fi
      %
      \ifcropmarks \vbox to \outervsize\bgroup
        \hsize = \outerhsize
        \vskip-\topandbottommargin
        \vtop to0pt{%
          \line{\ewtop\hfil\ewtop}%
          \nointerlineskip
          \line{%
            \vbox{\moveleft\cornerthick\nstop}%
            \hfill
            \vbox{\moveright\cornerthick\nstop}%
          }%
          \vss}%
        \vskip\topandbottommargin
        \line\bgroup
          \hfil % center the page within the outer (page) hsize.
          \ifodd\pageno\hskip\bindingoffset\fi
          \vbox\bgroup
      \fi
      %
      \unvbox\headlinebox
      \pagebody{#1}%
      \ifdim\ht\footlinebox > 0pt
        % Only leave this space if the footline is nonempty.
        % (We lessened \vsize for it in \oddfootingyyy.)
        % The \baselineskip=24pt in plain's \makefootline has no effect.
        \vskip 24pt
        \unvbox\footlinebox
      \fi
      %
      \ifcropmarks
          \egroup % end of \vbox\bgroup
        \hfil\egroup % end of (centering) \line\bgroup
        \vskip\topandbottommargin plus1fill minus1fill
        \boxmaxdepth = \cornerthick
        \vbox to0pt{\vss
          \line{%
            \vbox{\moveleft\cornerthick\nsbot}%
            \hfill
            \vbox{\moveright\cornerthick\nsbot}%
          }%
          \nointerlineskip
          \line{\ewbot\hfil\ewbot}%
        }%
      \egroup % \vbox from first cropmarks clause
      \fi
    }% end of \shipout\vbox
  }% end of group with \indexdummies
  \advancepageno
  \ifnum\outputpenalty>-20000 \else\dosupereject\fi
}

\newinsert\margin \dimen\margin=\maxdimen

\def\pagebody#1{\vbox to\pageheight{\boxmaxdepth=\maxdepth #1}}
{\catcode`\@@ =11
\gdef\pagecontents#1{\ifvoid\topins\else\unvbox\topins\fi
% marginal hacks, juha@@viisa.uucp (Juha Takala)
\ifvoid\margin\else % marginal info is present
  \rlap{\kern\hsize\vbox to\z@@{\kern1pt\box\margin \vss}}\fi
\dimen@@=\dp#1\relax \unvbox#1\relax
\ifvoid\footins\else\vskip\skip\footins\footnoterule \unvbox\footins\fi
\ifr@@ggedbottom \kern-\dimen@@ \vfil \fi}
}

% Here are the rules for the cropmarks.  Note that they are
% offset so that the space between them is truly \outerhsize or \outervsize
% (P. A. MacKay, 12 November, 1986)
%
\def\ewtop{\vrule height\cornerthick depth0pt width\cornerlong}
\def\nstop{\vbox
  {\hrule height\cornerthick depth\cornerlong width\cornerthick}}
\def\ewbot{\vrule height0pt depth\cornerthick width\cornerlong}
\def\nsbot{\vbox
  {\hrule height\cornerlong depth\cornerthick width\cornerthick}}

% Parse an argument, then pass it to #1.  The argument is the rest of
% the input line (except we remove a trailing comment).  #1 should be a
% macro which expects an ordinary undelimited TeX argument.
%
\def\parsearg{\parseargusing{}}
\def\parseargusing#1#2{%
  \def\argtorun{#2}%
  \begingroup
    \obeylines
    \spaceisspace
    #1%
    \parseargline\empty% Insert the \empty token, see \finishparsearg below.
}

{\obeylines %
  \gdef\parseargline#1^^M{%
    \endgroup % End of the group started in \parsearg.
    \argremovecomment #1\comment\ArgTerm%
  }%
}

% First remove any @@comment, then any @@c comment.
\def\argremovecomment#1\comment#2\ArgTerm{\argremovec #1\c\ArgTerm}
\def\argremovec#1\c#2\ArgTerm{\argcheckspaces#1\^^M\ArgTerm}

% Each occurrence of `\^^M' or `<space>\^^M' is replaced by a single space.
%
% \argremovec might leave us with trailing space, e.g.,
%    @@end itemize  @@c foo
% This space token undergoes the same procedure and is eventually removed
% by \finishparsearg.
%
\def\argcheckspaces#1\^^M{\argcheckspacesX#1\^^M \^^M}
\def\argcheckspacesX#1 \^^M{\argcheckspacesY#1\^^M}
\def\argcheckspacesY#1\^^M#2\^^M#3\ArgTerm{%
  \def\temp{#3}%
  \ifx\temp\empty
    % Do not use \next, perhaps the caller of \parsearg uses it; reuse \temp:
    \let\temp\finishparsearg
  \else
    \let\temp\argcheckspaces
  \fi
  % Put the space token in:
  \temp#1 #3\ArgTerm
}

% If a _delimited_ argument is enclosed in braces, they get stripped; so
% to get _exactly_ the rest of the line, we had to prevent such situation.
% We prepended an \empty token at the very beginning and we expand it now,
% just before passing the control to \argtorun.
% (Similarly, we have to think about #3 of \argcheckspacesY above: it is
% either the null string, or it ends with \^^M---thus there is no danger
% that a pair of braces would be stripped.
%
% But first, we have to remove the trailing space token.
%
\def\finishparsearg#1 \ArgTerm{\expandafter\argtorun\expandafter{#1}}

% \parseargdef\foo{...}
%	is roughly equivalent to
% \def\foo{\parsearg\Xfoo}
% \def\Xfoo#1{...}
%
% Actually, I use \csname\string\foo\endcsname, ie. \\foo, as it is my
% favourite TeX trick.  --kasal, 16nov03

\def\parseargdef#1{%
  \expandafter \doparseargdef \csname\string#1\endcsname #1%
}
\def\doparseargdef#1#2{%
  \def#2{\parsearg#1}%
  \def#1##1%
}

% Several utility definitions with active space:
{
  \obeyspaces
  \gdef\obeyedspace{ }

  % Make each space character in the input produce a normal interword
  % space in the output.  Don't allow a line break at this space, as this
  % is used only in environments like @@example, where each line of input
  % should produce a line of output anyway.
  %
  \gdef\sepspaces{\obeyspaces\let =\tie}

  % If an index command is used in an @@example environment, any spaces
  % therein should become regular spaces in the raw index file, not the
  % expansion of \tie (\leavevmode \penalty \@@M \ ).
  \gdef\unsepspaces{\let =\space}
}


\def\flushcr{\ifx\par\lisppar \def\next##1{}\else \let\next=\relax \fi \next}

% Define the framework for environments in texinfo.tex.  It's used like this:
%
%   \envdef\foo{...}
%   \def\Efoo{...}
%
% It's the responsibility of \envdef to insert \begingroup before the
% actual body; @@end closes the group after calling \Efoo.  \envdef also
% defines \thisenv, so the current environment is known; @@end checks
% whether the environment name matches.  The \checkenv macro can also be
% used to check whether the current environment is the one expected.
%
% Non-false conditionals (@@iftex, @@ifset) don't fit into this, so they
% are not treated as environments; they don't open a group.  (The
% implementation of @@end takes care not to call \endgroup in this
% special case.)


% At run-time, environments start with this:
\def\startenvironment#1{\begingroup\def\thisenv{#1}}
% initialize
\let\thisenv\empty

% ... but they get defined via ``\envdef\foo{...}'':
\long\def\envdef#1#2{\def#1{\startenvironment#1#2}}
\def\envparseargdef#1#2{\parseargdef#1{\startenvironment#1#2}}

% Check whether we're in the right environment:
\def\checkenv#1{%
  \def\temp{#1}%
  \ifx\thisenv\temp
  \else
    \badenverr
  \fi
}

% Environment mismatch, #1 expected:
\def\badenverr{%
  \errhelp = \EMsimple
  \errmessage{This command can appear only \inenvironment\temp,
    not \inenvironment\thisenv}%
}
\def\inenvironment#1{%
  \ifx#1\empty
    out of any environment%
  \else
    in environment \expandafter\string#1%
  \fi
}

% @@end foo executes the definition of \Efoo.
% But first, it executes a specialized version of \checkenv
%
\parseargdef\end{%
  \if 1\csname iscond.#1\endcsname
  \else
    % The general wording of \badenverr may not be ideal, but... --kasal, 06nov03
    \expandafter\checkenv\csname#1\endcsname
    \csname E#1\endcsname
    \endgroup
  \fi
}

\newhelp\EMsimple{Press RETURN to continue.}


%% Simple single-character @@ commands

% @@@@ prints an @@
% Kludge this until the fonts are right (grr).
\def\@@{{\tt\char64}}

% This is turned off because it was never documented
% and you can use @@w{...} around a quote to suppress ligatures.
%% Define @@` and @@' to be the same as ` and '
%% but suppressing ligatures.
%\def\`{{`}}
%\def\'{{'}}

% Used to generate quoted braces.
\def\mylbrace {{\tt\char123}}
\def\myrbrace {{\tt\char125}}
\let\{=\mylbrace
\let\}=\myrbrace
\begingroup
  % Definitions to produce \{ and \} commands for indices,
  % and @@{ and @@} for the aux/toc files.
  \catcode`\{ = \other \catcode`\} = \other
  \catcode`\[ = 1 \catcode`\] = 2
  \catcode`\! = 0 \catcode`\\ = \other
  !gdef!lbracecmd[\{]%
  !gdef!rbracecmd[\}]%
  !gdef!lbraceatcmd[@@{]%
  !gdef!rbraceatcmd[@@}]%
!endgroup

% @@comma{} to avoid , parsing problems.
\let\comma = ,

% Accents: @@, @@dotaccent @@ringaccent @@ubaraccent @@udotaccent
% Others are defined by plain TeX: @@` @@' @@" @@^ @@~ @@= @@u @@v @@H.
\let\, = \c
\let\dotaccent = \.
\def\ringaccent#1{{\accent23 #1}}
\let\tieaccent = \t
\let\ubaraccent = \b
\let\udotaccent = \d

% Other special characters: @@questiondown @@exclamdown @@ordf @@ordm
% Plain TeX defines: @@AA @@AE @@O @@OE @@L (plus lowercase versions) @@ss.
\def\questiondown{?`}
\def\exclamdown{!`}
\def\ordf{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{a}}}
\def\ordm{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{o}}}

% Dotless i and dotless j, used for accents.
\def\imacro{i}
\def\jmacro{j}
\def\dotless#1{%
  \def\temp{#1}%
  \ifx\temp\imacro \ifmmode\imath \else\ptexi \fi
  \else\ifx\temp\jmacro \ifmmode\jmath \else\j \fi
  \else \errmessage{@@dotless can be used only with i or j}%
  \fi\fi
}

% The \TeX{} logo, as in plain, but resetting the spacing so that a
% period following counts as ending a sentence.  (Idea found in latex.)
%
\edef\TeX{\TeX \spacefactor=1000 }

% @@LaTeX{} logo.  Not quite the same results as the definition in
% latex.ltx, since we use a different font for the raised A; it's most
% convenient for us to use an explicitly smaller font, rather than using
% the \scriptstyle font (since we don't reset \scriptstyle and
% \scriptscriptstyle).
%
\def\LaTeX{%
  L\kern-.36em
  {\setbox0=\hbox{T}%
   \vbox to \ht0{\hbox{\selectfonts\lllsize A}\vss}}%
  \kern-.15em
  \TeX
}

% Be sure we're in horizontal mode when doing a tie, since we make space
% equivalent to this in @@example-like environments. Otherwise, a space
% at the beginning of a line will start with \penalty -- and
% since \penalty is valid in vertical mode, we'd end up putting the
% penalty on the vertical list instead of in the new paragraph.
{\catcode`@@ = 11
 % Avoid using \@@M directly, because that causes trouble
 % if the definition is written into an index file.
 \global\let\tiepenalty = \@@M
 \gdef\tie{\leavevmode\penalty\tiepenalty\ }
}

% @@: forces normal size whitespace following.
\def\:{\spacefactor=1000 }

% @@* forces a line break.
\def\*{\hfil\break\hbox{}\ignorespaces}

% @@/ allows a line break.
\let\/=\allowbreak

% @@. is an end-of-sentence period.
\def\.{.\spacefactor=\endofsentencespacefactor\space}

% @@! is an end-of-sentence bang.
\def\!{!\spacefactor=\endofsentencespacefactor\space}

% @@? is an end-of-sentence query.
\def\?{?\spacefactor=\endofsentencespacefactor\space}

% @@frenchspacing on|off  says whether to put extra space after punctuation.
%
\def\onword{on}
\def\offword{off}
%
\parseargdef\frenchspacing{%
  \def\temp{#1}%
  \ifx\temp\onword \plainfrenchspacing
  \else\ifx\temp\offword \plainnonfrenchspacing
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@frenchspacing option `\temp', must be on/off}%
  \fi\fi
}

% @@w prevents a word break.  Without the \leavevmode, @@w at the
% beginning of a paragraph, when TeX is still in vertical mode, would
% produce a whole line of output instead of starting the paragraph.
\def\w#1{\leavevmode\hbox{#1}}

% @@group ... @@end group forces ... to be all on one page, by enclosing
% it in a TeX vbox.  We use \vtop instead of \vbox to construct the box
% to keep its height that of a normal line.  According to the rules for
% \topskip (p.114 of the TeXbook), the glue inserted is
% max (\topskip - \ht (first item), 0).  If that height is large,
% therefore, no glue is inserted, and the space between the headline and
% the text is small, which looks bad.
%
% Another complication is that the group might be very large.  This can
% cause the glue on the previous page to be unduly stretched, because it
% does not have much material.  In this case, it's better to add an
% explicit \vfill so that the extra space is at the bottom.  The
% threshold for doing this is if the group is more than \vfilllimit
% percent of a page (\vfilllimit can be changed inside of @@tex).
%
\newbox\groupbox
\def\vfilllimit{0.7}
%
\envdef\group{%
  \ifnum\catcode`\^^M=\active \else
    \errhelp = \groupinvalidhelp
    \errmessage{@@group invalid in context where filling is enabled}%
  \fi
  \startsavinginserts
  %
  \setbox\groupbox = \vtop\bgroup
    % Do @@comment since we are called inside an environment such as
    % @@example, where each end-of-line in the input causes an
    % end-of-line in the output.  We don't want the end-of-line after
    % the `@@group' to put extra space in the output.  Since @@group
    % should appear on a line by itself (according to the Texinfo
    % manual), we don't worry about eating any user text.
    \comment
}
%
% The \vtop produces a box with normal height and large depth; thus, TeX puts
% \baselineskip glue before it, and (when the next line of text is done)
% \lineskip glue after it.  Thus, space below is not quite equal to space
% above.  But it's pretty close.
\def\Egroup{%
    % To get correct interline space between the last line of the group
    % and the first line afterwards, we have to propagate \prevdepth.
    \endgraf % Not \par, as it may have been set to \lisppar.
    \global\dimen1 = \prevdepth
  \egroup           % End the \vtop.
  % \dimen0 is the vertical size of the group's box.
  \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
  % \dimen2 is how much space is left on the page (more or less).
  \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
  % if the group doesn't fit on the current page, and it's a big big
  % group, force a page break.
  \ifdim \dimen0 > \dimen2
    \ifdim \pagetotal < \vfilllimit\pageheight
      \page
    \fi
  \fi
  \box\groupbox
  \prevdepth = \dimen1
  \checkinserts
}
%
% TeX puts in an \escapechar (i.e., `@@') at the beginning of the help
% message, so this ends up printing `@@group can only ...'.
%
\newhelp\groupinvalidhelp{%
group can only be used in environments such as @@example,^^J%
where each line of input produces a line of output.}

% @@need space-in-mils
% forces a page break if there is not space-in-mils remaining.

\newdimen\mil  \mil=0.001in

% Old definition--didn't work.
%\parseargdef\need{\par %
%% This method tries to make TeX break the page naturally
%% if the depth of the box does not fit.
%{\baselineskip=0pt%
%\vtop to #1\mil{\vfil}\kern -#1\mil\nobreak
%\prevdepth=-1000pt
%}}

\parseargdef\need{%
  % Ensure vertical mode, so we don't make a big box in the middle of a
  % paragraph.
  \par
  %
  % If the @@need value is less than one line space, it's useless.
  \dimen0 = #1\mil
  \dimen2 = \ht\strutbox
  \advance\dimen2 by \dp\strutbox
  \ifdim\dimen0 > \dimen2
    %
    % Do a \strut just to make the height of this box be normal, so the
    % normal leading is inserted relative to the preceding line.
    % And a page break here is fine.
    \vtop to #1\mil{\strut\vfil}%
    %
    % TeX does not even consider page breaks if a penalty added to the
    % main vertical list is 10000 or more.  But in order to see if the
    % empty box we just added fits on the page, we must make it consider
    % page breaks.  On the other hand, we don't want to actually break the
    % page after the empty box.  So we use a penalty of 9999.
    %
    % There is an extremely small chance that TeX will actually break the
    % page at this \penalty, if there are no other feasible breakpoints in
    % sight.  (If the user is using lots of big @@group commands, which
    % almost-but-not-quite fill up a page, TeX will have a hard time doing
    % good page breaking, for example.)  However, I could not construct an
    % example where a page broke at this \penalty; if it happens in a real
    % document, then we can reconsider our strategy.
    \penalty9999
    %
    % Back up by the size of the box, whether we did a page break or not.
    \kern -#1\mil
    %
    % Do not allow a page break right after this kern.
    \nobreak
  \fi
}

% @@br   forces paragraph break (and is undocumented).

\let\br = \par

% @@page forces the start of a new page.
%
\def\page{\par\vfill\supereject}

% @@exdent text....
% outputs text on separate line in roman font, starting at standard page margin

% This records the amount of indent in the innermost environment.
% That's how much \exdent should take out.
\newskip\exdentamount

% This defn is used inside fill environments such as @@defun.
\parseargdef\exdent{\hfil\break\hbox{\kern -\exdentamount{\rm#1}}\hfil\break}

% This defn is used inside nofill environments such as @@example.
\parseargdef\nofillexdent{{\advance \leftskip by -\exdentamount
  \leftline{\hskip\leftskip{\rm#1}}}}

% @@inmargin{WHICH}{TEXT} puts TEXT in the WHICH margin next to the current
% paragraph.  For more general purposes, use the \margin insertion
% class.  WHICH is `l' or `r'.
%
\newskip\inmarginspacing \inmarginspacing=1cm
\def\strutdepth{\dp\strutbox}
%
\def\doinmargin#1#2{\strut\vadjust{%
  \nobreak
  \kern-\strutdepth
  \vtop to \strutdepth{%
    \baselineskip=\strutdepth
    \vss
    % if you have multiple lines of stuff to put here, you'll need to
    % make the vbox yourself of the appropriate size.
    \ifx#1l%
      \llap{\ignorespaces #2\hskip\inmarginspacing}%
    \else
      \rlap{\hskip\hsize \hskip\inmarginspacing \ignorespaces #2}%
    \fi
    \null
  }%
}}
\def\inleftmargin{\doinmargin l}
\def\inrightmargin{\doinmargin r}
%
% @@inmargin{TEXT [, RIGHT-TEXT]}
% (if RIGHT-TEXT is given, use TEXT for left page, RIGHT-TEXT for right;
% else use TEXT for both).
%
\def\inmargin#1{\parseinmargin #1,,\finish}
\def\parseinmargin#1,#2,#3\finish{% not perfect, but better than nothing.
  \setbox0 = \hbox{\ignorespaces #2}%
  \ifdim\wd0 > 0pt
    \def\lefttext{#1}%  have both texts
    \def\righttext{#2}%
  \else
    \def\lefttext{#1}%  have only one text
    \def\righttext{#1}%
  \fi
  %
  \ifodd\pageno
    \def\temp{\inrightmargin\righttext}% odd page -> outside is right margin
  \else
    \def\temp{\inleftmargin\lefttext}%
  \fi
  \temp
}

% @@include FILE -- \input text of FILE.
%
\def\include{\parseargusing\filenamecatcodes\includezzz}
\def\includezzz#1{%
  \pushthisfilestack
  \def\thisfile{#1}%
  {%
    \makevalueexpandable  % we want to expand any @@value in FILE.
    \turnoffactive        % and allow special characters in the expansion
    \indexnofonts         % Allow `@@@@' and other weird things in file names.
    \edef\temp{\noexpand\input #1 }%
    %
    % This trickery is to read FILE outside of a group, in case it makes
    % definitions, etc.
    \expandafter
  }\temp
  \popthisfilestack
}
\def\filenamecatcodes{%
  \catcode`\\=\other
  \catcode`~=\other
  \catcode`^=\other
  \catcode`_=\other
  \catcode`|=\other
  \catcode`<=\other
  \catcode`>=\other
  \catcode`+=\other
  \catcode`-=\other
  \catcode`\`=\other
  \catcode`\'=\other
}

\def\pushthisfilestack{%
  \expandafter\pushthisfilestackX\popthisfilestack\StackTerm
}
\def\pushthisfilestackX{%
  \expandafter\pushthisfilestackY\thisfile\StackTerm
}
\def\pushthisfilestackY #1\StackTerm #2\StackTerm {%
  \gdef\popthisfilestack{\gdef\thisfile{#1}\gdef\popthisfilestack{#2}}%
}

\def\popthisfilestack{\errthisfilestackempty}
\def\errthisfilestackempty{\errmessage{Internal error:
  the stack of filenames is empty.}}

\def\thisfile{}

% @@center line
% outputs that line, centered.
%
\parseargdef\center{%
  \ifhmode
    \let\next\centerH
  \else
    \let\next\centerV
  \fi
  \next{\hfil \ignorespaces#1\unskip \hfil}%
}
\def\centerH#1{%
  {%
    \hfil\break
    \advance\hsize by -\leftskip
    \advance\hsize by -\rightskip
    \line{#1}%
    \break
  }%
}
\def\centerV#1{\line{\kern\leftskip #1\kern\rightskip}}

% @@sp n   outputs n lines of vertical space

\parseargdef\sp{\vskip #1\baselineskip}

% @@comment ...line which is ignored...
% @@c is the same as @@comment
% @@ignore ... @@end ignore  is another way to write a comment

\def\comment{\begingroup \catcode`\^^M=\other%
\catcode`\@@=\other \catcode`\{=\other \catcode`\}=\other%
\commentxxx}
{\catcode`\^^M=\other \gdef\commentxxx#1^^M{\endgroup}}

\let\c=\comment

% @@paragraphindent NCHARS
% We'll use ems for NCHARS, close enough.
% NCHARS can also be the word `asis' or `none'.
% We cannot feasibly implement @@paragraphindent asis, though.
%
\def\asisword{asis} % no translation, these are keywords
\def\noneword{none}
%
\parseargdef\paragraphindent{%
  \def\temp{#1}%
  \ifx\temp\asisword
  \else
    \ifx\temp\noneword
      \defaultparindent = 0pt
    \else
      \defaultparindent = #1em
    \fi
  \fi
  \parindent = \defaultparindent
}

% @@exampleindent NCHARS
% We'll use ems for NCHARS like @@paragraphindent.
% It seems @@exampleindent asis isn't necessary, but
% I preserve it to make it similar to @@paragraphindent.
\parseargdef\exampleindent{%
  \def\temp{#1}%
  \ifx\temp\asisword
  \else
    \ifx\temp\noneword
      \lispnarrowing = 0pt
    \else
      \lispnarrowing = #1em
    \fi
  \fi
}

% @@firstparagraphindent WORD
% If WORD is `none', then suppress indentation of the first paragraph
% after a section heading.  If WORD is `insert', then do indent at such
% paragraphs.
%
% The paragraph indentation is suppressed or not by calling
% \suppressfirstparagraphindent, which the sectioning commands do.
% We switch the definition of this back and forth according to WORD.
% By default, we suppress indentation.
%
\def\suppressfirstparagraphindent{\dosuppressfirstparagraphindent}
\def\insertword{insert}
%
\parseargdef\firstparagraphindent{%
  \def\temp{#1}%
  \ifx\temp\noneword
    \let\suppressfirstparagraphindent = \dosuppressfirstparagraphindent
  \else\ifx\temp\insertword
    \let\suppressfirstparagraphindent = \relax
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@firstparagraphindent option `\temp'}%
  \fi\fi
}

% Here is how we actually suppress indentation.  Redefine \everypar to
% \kern backwards by \parindent, and then reset itself to empty.
%
% We also make \indent itself not actually do anything until the next
% paragraph.
%
\gdef\dosuppressfirstparagraphindent{%
  \gdef\indent{%
    \restorefirstparagraphindent
    \indent
  }%
  \gdef\noindent{%
    \restorefirstparagraphindent
    \noindent
  }%
  \global\everypar = {%
    \kern -\parindent
    \restorefirstparagraphindent
  }%
}

\gdef\restorefirstparagraphindent{%
  \global \let \indent = \ptexindent
  \global \let \noindent = \ptexnoindent
  \global \everypar = {}%
}


% @@asis just yields its argument.  Used with @@table, for example.
%
\def\asis#1{#1}

% @@math outputs its argument in math mode.
%
% One complication: _ usually means subscripts, but it could also mean
% an actual _ character, as in @@math{@@var{some_variable} + 1}.  So make
% _ active, and distinguish by seeing if the current family is \slfam,
% which is what @@var uses.
{
  \catcode`\_ = \active
  \gdef\mathunderscore{%
    \catcode`\_=\active
    \def_{\ifnum\fam=\slfam \_\else\sb\fi}%
  }
}
% Another complication: we want \\ (and @@\) to output a \ character.
% FYI, plain.tex uses \\ as a temporary control sequence (why?), but
% this is not advertised and we don't care.  Texinfo does not
% otherwise define @@\.
%
% The \mathchar is class=0=ordinary, family=7=ttfam, position=5C=\.
\def\mathbackslash{\ifnum\fam=\ttfam \mathchar"075C \else\backslash \fi}
%
\def\math{%
  \tex
  \mathunderscore
  \let\\ = \mathbackslash
  \mathactive
  % make the texinfo accent commands work in math mode
  \let\"=\ddot
  \let\'=\acute
  \let\==\bar
  \let\^=\hat
  \let\`=\grave
  \let\u=\breve
  \let\v=\check
  \let\~=\tilde
  \let\dotaccent=\dot
  $\finishmath
}
\def\finishmath#1{#1$\endgroup}  % Close the group opened by \tex.

% Some active characters (such as <) are spaced differently in math.
% We have to reset their definitions in case the @@math was an argument
% to a command which sets the catcodes (such as @@item or @@section).
%
{
  \catcode`^ = \active
  \catcode`< = \active
  \catcode`> = \active
  \catcode`+ = \active
  \catcode`' = \active
  \gdef\mathactive{%
    \let^ = \ptexhat
    \let< = \ptexless
    \let> = \ptexgtr
    \let+ = \ptexplus
    \let' = \ptexquoteright
  }
}

% Some math mode symbols.
\def\bullet{$\ptexbullet$}
\def\geq{\ifmmode \ge\else $\ge$\fi}
\def\leq{\ifmmode \le\else $\le$\fi}
\def\minus{\ifmmode -\else $-$\fi}

% @@dots{} outputs an ellipsis using the current font.
% We do .5em per period so that it has the same spacing in the cm
% typewriter fonts as three actual period characters; on the other hand,
% in other typewriter fonts three periods are wider than 1.5em.  So do
% whichever is larger.
%
\def\dots{%
  \leavevmode
  \setbox0=\hbox{...}% get width of three periods
  \ifdim\wd0 > 1.5em
    \dimen0 = \wd0
  \else
    \dimen0 = 1.5em
  \fi
  \hbox to \dimen0{%
    \hskip 0pt plus.25fil
    .\hskip 0pt plus1fil
    .\hskip 0pt plus1fil
    .\hskip 0pt plus.5fil
  }%
}

% @@enddots{} is an end-of-sentence ellipsis.
%
\def\enddots{%
  \dots
  \spacefactor=\endofsentencespacefactor
}

% @@comma{} is so commas can be inserted into text without messing up
% Texinfo's parsing.
%
\let\comma = ,

% @@refill is a no-op.
\let\refill=\relax

% If working on a large document in chapters, it is convenient to
% be able to disable indexing, cross-referencing, and contents, for test runs.
% This is done with @@novalidate (before @@setfilename).
%
\newif\iflinks \linkstrue % by default we want the aux files.
\let\novalidate = \linksfalse

% @@setfilename is done at the beginning of every texinfo file.
% So open here the files we need to have open while reading the input.
% This makes it possible to make a .fmt file for texinfo.
\def\setfilename{%
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
   \iflinks
     \tryauxfile
     % Open the new aux file.  TeX will close it automatically at exit.
     \immediate\openout\auxfile=\jobname.aux
   \fi % \openindices needs to do some work in any case.
   \openindices
   \let\setfilename=\comment % Ignore extra @@setfilename cmds.
   %
   % If texinfo.cnf is present on the system, read it.
   % Useful for site-wide @@afourpaper, etc.
   \openin 1 texinfo.cnf
   \ifeof 1 \else \input texinfo.cnf \fi
   \closein 1
   %
   \comment % Ignore the actual filename.
}

% Called from \setfilename.
%
\def\openindices{%
  \newindex{cp}%
  \newcodeindex{fn}%
  \newcodeindex{vr}%
  \newcodeindex{tp}%
  \newcodeindex{ky}%
  \newcodeindex{pg}%
}

% @@bye.
\outer\def\bye{\pagealignmacro\tracingstats=1\ptexend}


\message{pdf,}
% adobe `portable' document format
\newcount\tempnum
\newcount\lnkcount
\newtoks\filename
\newcount\filenamelength
\newcount\pgn
\newtoks\toksA
\newtoks\toksB
\newtoks\toksC
\newtoks\toksD
\newbox\boxA
\newcount\countA
\newif\ifpdf
\newif\ifpdfmakepagedest

% when pdftex is run in dvi mode, \pdfoutput is defined (so \pdfoutput=1
% can be set).  So we test for \relax and 0 as well as \undefined,
% borrowed from ifpdf.sty.
\ifx\pdfoutput\undefined
\else
  \ifx\pdfoutput\relax
  \else
    \ifcase\pdfoutput
    \else
      \pdftrue
    \fi
  \fi
\fi

% PDF uses PostScript string constants for the names of xref targets,
% for display in the outlines, and in other places.  Thus, we have to
% double any backslashes.  Otherwise, a name like "\node" will be
% interpreted as a newline (\n), followed by o, d, e.  Not good.
% http://www.ntg.nl/pipermail/ntg-pdftex/2004-July/000654.html
% (and related messages, the final outcome is that it is up to the TeX
% user to double the backslashes and otherwise make the string valid, so
% that's what we do).

% double active backslashes.
%
{\catcode`\@@=0 \catcode`\\=\active
 @@gdef@@activebackslashdouble{%
   @@catcode`@@\=@@active
   @@let\=@@doublebackslash}
}

% To handle parens, we must adopt a different approach, since parens are
% not active characters.  hyperref.dtx (which has the same problem as
% us) handles it with this amazing macro to replace tokens, with minor
% changes for Texinfo.  It is included here under the GPL by permission
% from the author, Heiko Oberdiek.
%
% #1 is the tokens to replace.
% #2 is the replacement.
% #3 is the control sequence with the string.
%
\def\HyPsdSubst#1#2#3{%
  \def\HyPsdReplace##1#1##2\END{%
    ##1%
    \ifx\\##2\\%
    \else
      #2%
      \HyReturnAfterFi{%
        \HyPsdReplace##2\END
      }%
    \fi
  }%
  \xdef#3{\expandafter\HyPsdReplace#3#1\END}%
}
\long\def\HyReturnAfterFi#1\fi{\fi#1}

% #1 is a control sequence in which to do the replacements.
\def\backslashparens#1{%
  \xdef#1{#1}% redefine it as its expansion; the definition is simply
             % \lastnode when called from \setref -> \pdfmkdest.
  \HyPsdSubst{(}{\realbackslash(}{#1}%
  \HyPsdSubst{)}{\realbackslash)}{#1}%
}

\newhelp\nopdfimagehelp{Texinfo supports .png, .jpg, .jpeg, and .pdf images
with PDF output, and none of those formats could be found.  (.eps cannot
be supported due to the design of the PDF format; use regular TeX (DVI
output) for that.)}

\ifpdf
  %
  % Color manipulation macros based on pdfcolor.tex.
  \def\cmykDarkRed{0.28 1 1 0.35}
  \def\cmykBlack{0 0 0 1}
  %
  % k sets the color for filling (usual text, etc.);
  % K sets the color for stroking (thin rules, e.g., normal _'s).
  \def\pdfsetcolor#1{\pdfliteral{#1 k  #1 K}}
  %
  % Set color, and create a mark which defines \thiscolor accordingly,
  % so that \makeheadline knows which color to restore.
  \def\setcolor#1{%
    \xdef\lastcolordefs{\gdef\noexpand\thiscolor{#1}}%
    \domark
    \pdfsetcolor{#1}%
  }
  %
  \def\maincolor{\cmykBlack}
  \pdfsetcolor{\maincolor}
  \edef\thiscolor{\maincolor}
  \def\lastcolordefs{}
  %
  \def\makefootline{%
    \baselineskip24pt
    \line{\pdfsetcolor{\maincolor}\the\footline}%
  }
  %
  \def\makeheadline{%
    \vbox to 0pt{%
      \vskip-22.5pt
      \line{%
        \vbox to8.5pt{}%
        % Extract \thiscolor definition from the marks.
        \getcolormarks
        % Typeset the headline with \maincolor, then restore the color.
        \pdfsetcolor{\maincolor}\the\headline\pdfsetcolor{\thiscolor}%
      }%
      \vss
    }%
    \nointerlineskip
  }
  %
  %
  \pdfcatalog{/PageMode /UseOutlines}
  %
  % #1 is image name, #2 width (might be empty/whitespace), #3 height (ditto).
  \def\dopdfimage#1#2#3{%
    \def\imagewidth{#2}\setbox0 = \hbox{\ignorespaces #2}%
    \def\imageheight{#3}\setbox2 = \hbox{\ignorespaces #3}%
    %
    % pdftex (and the PDF format) support .png, .jpg, .pdf (among
    % others).  Let's try in that order.
    \let\pdfimgext=\empty
    \begingroup
      \openin 1 #1.png \ifeof 1
        \openin 1 #1.jpg \ifeof 1
          \openin 1 #1.jpeg \ifeof 1
            \openin 1 #1.JPG \ifeof 1
              \openin 1 #1.pdf \ifeof 1
                \openin 1 #1.PDF \ifeof 1
                  \errhelp = \nopdfimagehelp
                  \errmessage{Could not find image file #1 for pdf}%
                \else \gdef\pdfimgext{PDF}%
                \fi
              \else \gdef\pdfimgext{pdf}%
              \fi
            \else \gdef\pdfimgext{JPG}%
            \fi
          \else \gdef\pdfimgext{jpeg}%
          \fi
        \else \gdef\pdfimgext{jpg}%
        \fi
      \else \gdef\pdfimgext{png}%
      \fi
      \closein 1
    \endgroup
    %
    % without \immediate, ancient pdftex seg faults when the same image is
    % included twice.  (Version 3.14159-pre-1.0-unofficial-20010704.)
    \ifnum\pdftexversion < 14
      \immediate\pdfimage
    \else
      \immediate\pdfximage
    \fi
      \ifdim \wd0 >0pt width \imagewidth \fi
      \ifdim \wd2 >0pt height \imageheight \fi
      \ifnum\pdftexversion<13
         #1.\pdfimgext
       \else
         {#1.\pdfimgext}%
       \fi
    \ifnum\pdftexversion < 14 \else
      \pdfrefximage \pdflastximage
    \fi}
  %
  \def\pdfmkdest#1{{%
    % We have to set dummies so commands such as @@code, and characters
    % such as \, aren't expanded when present in a section title.
    \indexnofonts
    \turnoffactive
    \activebackslashdouble
    \makevalueexpandable
    \def\pdfdestname{#1}%
    \backslashparens\pdfdestname
    \safewhatsit{\pdfdest name{\pdfdestname} xyz}%
  }}
  %
  % used to mark target names; must be expandable.
  \def\pdfmkpgn#1{#1}
  %
  % by default, use a color that is dark enough to print on paper as
  % nearly black, but still distinguishable for online viewing.
  \def\urlcolor{\cmykDarkRed}
  \def\linkcolor{\cmykDarkRed}
  \def\endlink{\setcolor{\maincolor}\pdfendlink}
  %
  % Adding outlines to PDF; macros for calculating structure of outlines
  % come from Petr Olsak
  \def\expnumber#1{\expandafter\ifx\csname#1\endcsname\relax 0%
    \else \csname#1\endcsname \fi}
  \def\advancenumber#1{\tempnum=\expnumber{#1}\relax
    \advance\tempnum by 1
    \expandafter\xdef\csname#1\endcsname{\the\tempnum}}
  %
  % #1 is the section text, which is what will be displayed in the
  % outline by the pdf viewer.  #2 is the pdf expression for the number
  % of subentries (or empty, for subsubsections).  #3 is the node text,
  % which might be empty if this toc entry had no corresponding node.
  % #4 is the page number
  %
  \def\dopdfoutline#1#2#3#4{%
    % Generate a link to the node text if that exists; else, use the
    % page number.  We could generate a destination for the section
    % text in the case where a section has no node, but it doesn't
    % seem worth the trouble, since most documents are normally structured.
    \def\pdfoutlinedest{#3}%
    \ifx\pdfoutlinedest\empty
      \def\pdfoutlinedest{#4}%
    \else
      % Doubled backslashes in the name.
      {\activebackslashdouble \xdef\pdfoutlinedest{#3}%
       \backslashparens\pdfoutlinedest}%
    \fi
    %
    % Also double the backslashes in the display string.
    {\activebackslashdouble \xdef\pdfoutlinetext{#1}%
     \backslashparens\pdfoutlinetext}%
    %
    \pdfoutline goto name{\pdfmkpgn{\pdfoutlinedest}}#2{\pdfoutlinetext}%
  }
  %
  \def\pdfmakeoutlines{%
    \begingroup
      % Thanh's hack / proper braces in bookmarks
      \edef\mylbrace{\iftrue \string{\else}\fi}\let\{=\mylbrace
      \edef\myrbrace{\iffalse{\else\string}\fi}\let\}=\myrbrace
      %
      % Read toc silently, to get counts of subentries for \pdfoutline.
      \def\numchapentry##1##2##3##4{%
	\def\thischapnum{##2}%
	\def\thissecnum{0}%
	\def\thissubsecnum{0}%
      }%
      \def\numsecentry##1##2##3##4{%
	\advancenumber{chap\thischapnum}%
	\def\thissecnum{##2}%
	\def\thissubsecnum{0}%
      }%
      \def\numsubsecentry##1##2##3##4{%
	\advancenumber{sec\thissecnum}%
	\def\thissubsecnum{##2}%
      }%
      \def\numsubsubsecentry##1##2##3##4{%
	\advancenumber{subsec\thissubsecnum}%
      }%
      \def\thischapnum{0}%
      \def\thissecnum{0}%
      \def\thissubsecnum{0}%
      %
      % use \def rather than \let here because we redefine \chapentry et
      % al. a second time, below.
      \def\appentry{\numchapentry}%
      \def\appsecentry{\numsecentry}%
      \def\appsubsecentry{\numsubsecentry}%
      \def\appsubsubsecentry{\numsubsubsecentry}%
      \def\unnchapentry{\numchapentry}%
      \def\unnsecentry{\numsecentry}%
      \def\unnsubsecentry{\numsubsecentry}%
      \def\unnsubsubsecentry{\numsubsubsecentry}%
      \readdatafile{toc}%
      %
      % Read toc second time, this time actually producing the outlines.
      % The `-' means take the \expnumber as the absolute number of
      % subentries, which we calculated on our first read of the .toc above.
      %
      % We use the node names as the destinations.
      \def\numchapentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{chap##2}}{##3}{##4}}%
      \def\numsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{sec##2}}{##3}{##4}}%
      \def\numsubsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{subsec##2}}{##3}{##4}}%
      \def\numsubsubsecentry##1##2##3##4{% count is always zero
        \dopdfoutline{##1}{}{##3}{##4}}%
      %
      % PDF outlines are displayed using system fonts, instead of
      % document fonts.  Therefore we cannot use special characters,
      % since the encoding is unknown.  For example, the eogonek from
      % Latin 2 (0xea) gets translated to a | character.  Info from
      % Staszek Wawrykiewicz, 19 Jan 2004 04:09:24 +0100.
      %
      % xx to do this right, we have to translate 8-bit characters to
      % their "best" equivalent, based on the @@documentencoding.  Right
      % now, I guess we'll just let the pdf reader have its way.
      \indexnofonts
      \setupdatafile
      \catcode`\\=\active \otherbackslash
      \input \tocreadfilename
    \endgroup
  }
  %
  \def\skipspaces#1{\def\PP{#1}\def\D{|}%
    \ifx\PP\D\let\nextsp\relax
    \else\let\nextsp\skipspaces
      \ifx\p\space\else\addtokens{\filename}{\PP}%
        \advance\filenamelength by 1
      \fi
    \fi
    \nextsp}
  \def\getfilename#1{\filenamelength=0\expandafter\skipspaces#1|\relax}
  \ifnum\pdftexversion < 14
    \let \startlink \pdfannotlink
  \else
    \let \startlink \pdfstartlink
  \fi
  % make a live url in pdf output.
  \def\pdfurl#1{%
    \begingroup
      % it seems we really need yet another set of dummies; have not
      % tried to figure out what each command should do in the context
      % of @@url.  for now, just make @@/ a no-op, that's the only one
      % people have actually reported a problem with.
      %
      \normalturnoffactive
      \def\@@{@@}%
      \let\/=\empty
      \makevalueexpandable
      % do we want to go so far as to use \indexnofonts instead of just
      % special-casing \var here?
      \def\var##1{##1}%
      %
      \leavevmode\setcolor{\urlcolor}%
      \startlink attr{/Border [0 0 0]}%
        user{/Subtype /Link /A << /S /URI /URI (#1) >>}%
    \endgroup}
  \def\pdfgettoks#1.{\setbox\boxA=\hbox{\toksA={#1.}\toksB={}\maketoks}}
  \def\addtokens#1#2{\edef\addtoks{\noexpand#1={\the#1#2}}\addtoks}
  \def\adn#1{\addtokens{\toksC}{#1}\global\countA=1\let\next=\maketoks}
  \def\poptoks#1#2|ENDTOKS|{\let\first=#1\toksD={#1}\toksA={#2}}
  \def\maketoks{%
    \expandafter\poptoks\the\toksA|ENDTOKS|\relax
    \ifx\first0\adn0
    \else\ifx\first1\adn1 \else\ifx\first2\adn2 \else\ifx\first3\adn3
    \else\ifx\first4\adn4 \else\ifx\first5\adn5 \else\ifx\first6\adn6
    \else\ifx\first7\adn7 \else\ifx\first8\adn8 \else\ifx\first9\adn9
    \else
      \ifnum0=\countA\else\makelink\fi
      \ifx\first.\let\next=\done\else
        \let\next=\maketoks
        \addtokens{\toksB}{\the\toksD}
        \ifx\first,\addtokens{\toksB}{\space}\fi
      \fi
    \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
    \next}
  \def\makelink{\addtokens{\toksB}%
    {\noexpand\pdflink{\the\toksC}}\toksC={}\global\countA=0}
  \def\pdflink#1{%
    \startlink attr{/Border [0 0 0]} goto name{\pdfmkpgn{#1}}
    \setcolor{\linkcolor}#1\endlink}
  \def\done{\edef\st{\global\noexpand\toksA={\the\toksB}}\st}
\else
  % non-pdf mode
  \let\pdfmkdest = \gobble
  \let\pdfurl = \gobble
  \let\endlink = \relax
  \let\setcolor = \gobble
  \let\pdfsetcolor = \gobble
  \let\pdfmakeoutlines = \relax
\fi  % \ifx\pdfoutput


\message{fonts,}

% Change the current font style to #1, remembering it in \curfontstyle.
% For now, we do not accumulate font styles: @@b{@@i{foo}} prints foo in
% italics, not bold italics.
%
\def\setfontstyle#1{%
  \def\curfontstyle{#1}% not as a control sequence, because we are \edef'd.
  \csname ten#1\endcsname  % change the current font
}

% Select #1 fonts with the current style.
%
\def\selectfonts#1{\csname #1fonts\endcsname \csname\curfontstyle\endcsname}

\def\rm{\fam=0 \setfontstyle{rm}}
\def\it{\fam=\itfam \setfontstyle{it}}
\def\sl{\fam=\slfam \setfontstyle{sl}}
\def\bf{\fam=\bffam \setfontstyle{bf}}\def\bfstylename{bf}
\def\tt{\fam=\ttfam \setfontstyle{tt}}

% Unfortunately, we have to override this for titles and the like, since
% in those cases "rm" is bold.  Sigh.
\def\rmisbold{\rm\def\curfontstyle{bf}}

% Texinfo sort of supports the sans serif font style, which plain TeX does not.
% So we set up a \sf.
\newfam\sffam
\def\sf{\fam=\sffam \setfontstyle{sf}}
\let\li = \sf % Sometimes we call it \li, not \sf.

% We don't need math for this font style.
\def\ttsl{\setfontstyle{ttsl}}


% Default leading.
\newdimen\textleading  \textleading = 13.2pt

% Set the baselineskip to #1, and the lineskip and strut size
% correspondingly.  There is no deep meaning behind these magic numbers
% used as factors; they just match (closely enough) what Knuth defined.
%
\def\lineskipfactor{.08333}
\def\strutheightpercent{.70833}
\def\strutdepthpercent {.29167}
%
% can get a sort of poor man's double spacing by redefining this.
\def\baselinefactor{1}
%
\def\setleading#1{%
  \dimen0 = #1\relax
  \normalbaselineskip = \baselinefactor\dimen0
  \normallineskip = \lineskipfactor\normalbaselineskip
  \normalbaselines
  \setbox\strutbox =\hbox{%
    \vrule width0pt height\strutheightpercent\baselineskip
                    depth \strutdepthpercent \baselineskip
  }%
}

% PDF CMaps.  See also LaTeX's t1.cmap.
%
% do nothing with this by default.
\expandafter\let\csname cmapOT1\endcsname\gobble
\expandafter\let\csname cmapOT1IT\endcsname\gobble
\expandafter\let\csname cmapOT1TT\endcsname\gobble

% if we are producing pdf, and we have \pdffontattr, then define cmaps.
% (\pdffontattr was introduced many years ago, but people still run
% older pdftex's; it's easy to conditionalize, so we do.)
\ifpdf \ifx\pdffontattr\undefined \else
  \begingroup
    \catcode`\^^M=\active \def^^M{^^J}% Output line endings as the ^^J char.
    \catcode`\%=12 \immediate\pdfobj stream {%!PS-Adobe-3.0 Resource-CMap
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CMap (TeX-OT1-0)
%%Title: (TeX-OT1-0 TeX OT1 0)
%%Version: 1.000
%%EndComments
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (TeX)
/Ordering (OT1)
/Supplement 0
>> def
/CMapName /TeX-OT1-0 def
/CMapType 2 def
1 begincodespacerange
<00> <7F>
endcodespacerange
8 beginbfrange
<00> <01> <0393>
<09> <0A> <03A8>
<23> <26> <0023>
<28> <3B> <0028>
<3F> <5B> <003F>
<5D> <5E> <005D>
<61> <7A> <0061>
<7B> <7C> <2013>
endbfrange
40 beginbfchar
<02> <0398>
<03> <039B>
<04> <039E>
<05> <03A0>
<06> <03A3>
<07> <03D2>
<08> <03A6>
<0B> <00660066>
<0C> <00660069>
<0D> <0066006C>
<0E> <006600660069>
<0F> <00660066006C>
<10> <0131>
<11> <0237>
<12> <0060>
<13> <00B4>
<14> <02C7>
<15> <02D8>
<16> <00AF>
<17> <02DA>
<18> <00B8>
<19> <00DF>
<1A> <00E6>
<1B> <0153>
<1C> <00F8>
<1D> <00C6>
<1E> <0152>
<1F> <00D8>
<21> <0021>
<22> <201D>
<27> <2019>
<3C> <00A1>
<3D> <003D>
<3E> <00BF>
<5C> <201C>
<5F> <02D9>
<60> <2018>
<7D> <02DD>
<7E> <007E>
<7F> <00A8>
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end
%%EndResource
%%EOF
    }\endgroup
  \expandafter\edef\csname cmapOT1\endcsname#1{%
    \pdffontattr#1{/ToUnicode \the\pdflastobj\space 0 R}%
  }%
%
% \cmapOT1IT
  \begingroup
    \catcode`\^^M=\active \def^^M{^^J}% Output line endings as the ^^J char.
    \catcode`\%=12 \immediate\pdfobj stream {%!PS-Adobe-3.0 Resource-CMap
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CMap (TeX-OT1IT-0)
%%Title: (TeX-OT1IT-0 TeX OT1IT 0)
%%Version: 1.000
%%EndComments
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (TeX)
/Ordering (OT1IT)
/Supplement 0
>> def
/CMapName /TeX-OT1IT-0 def
/CMapType 2 def
1 begincodespacerange
<00> <7F>
endcodespacerange
8 beginbfrange
<00> <01> <0393>
<09> <0A> <03A8>
<25> <26> <0025>
<28> <3B> <0028>
<3F> <5B> <003F>
<5D> <5E> <005D>
<61> <7A> <0061>
<7B> <7C> <2013>
endbfrange
42 beginbfchar
<02> <0398>
<03> <039B>
<04> <039E>
<05> <03A0>
<06> <03A3>
<07> <03D2>
<08> <03A6>
<0B> <00660066>
<0C> <00660069>
<0D> <0066006C>
<0E> <006600660069>
<0F> <00660066006C>
<10> <0131>
<11> <0237>
<12> <0060>
<13> <00B4>
<14> <02C7>
<15> <02D8>
<16> <00AF>
<17> <02DA>
<18> <00B8>
<19> <00DF>
<1A> <00E6>
<1B> <0153>
<1C> <00F8>
<1D> <00C6>
<1E> <0152>
<1F> <00D8>
<21> <0021>
<22> <201D>
<23> <0023>
<24> <00A3>
<27> <2019>
<3C> <00A1>
<3D> <003D>
<3E> <00BF>
<5C> <201C>
<5F> <02D9>
<60> <2018>
<7D> <02DD>
<7E> <007E>
<7F> <00A8>
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end
%%EndResource
%%EOF
    }\endgroup
  \expandafter\edef\csname cmapOT1IT\endcsname#1{%
    \pdffontattr#1{/ToUnicode \the\pdflastobj\space 0 R}%
  }%
%
% \cmapOT1TT
  \begingroup
    \catcode`\^^M=\active \def^^M{^^J}% Output line endings as the ^^J char.
    \catcode`\%=12 \immediate\pdfobj stream {%!PS-Adobe-3.0 Resource-CMap
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CMap (TeX-OT1TT-0)
%%Title: (TeX-OT1TT-0 TeX OT1TT 0)
%%Version: 1.000
%%EndComments
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (TeX)
/Ordering (OT1TT)
/Supplement 0
>> def
/CMapName /TeX-OT1TT-0 def
/CMapType 2 def
1 begincodespacerange
<00> <7F>
endcodespacerange
5 beginbfrange
<00> <01> <0393>
<09> <0A> <03A8>
<21> <26> <0021>
<28> <5F> <0028>
<61> <7E> <0061>
endbfrange
32 beginbfchar
<02> <0398>
<03> <039B>
<04> <039E>
<05> <03A0>
<06> <03A3>
<07> <03D2>
<08> <03A6>
<0B> <2191>
<0C> <2193>
<0D> <0027>
<0E> <00A1>
<0F> <00BF>
<10> <0131>
<11> <0237>
<12> <0060>
<13> <00B4>
<14> <02C7>
<15> <02D8>
<16> <00AF>
<17> <02DA>
<18> <00B8>
<19> <00DF>
<1A> <00E6>
<1B> <0153>
<1C> <00F8>
<1D> <00C6>
<1E> <0152>
<1F> <00D8>
<20> <2423>
<27> <2019>
<60> <2018>
<7F> <00A8>
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end
%%EndResource
%%EOF
    }\endgroup
  \expandafter\edef\csname cmapOT1TT\endcsname#1{%
    \pdffontattr#1{/ToUnicode \the\pdflastobj\space 0 R}%
  }%
\fi\fi


% Set the font macro #1 to the font named #2, adding on the
% specified font prefix (normally `cm').
% #3 is the font's design size, #4 is a scale factor, #5 is the CMap
% encoding (currently only OT1, OT1IT and OT1TT are allowed, pass
% empty to omit).
\def\setfont#1#2#3#4#5{%
  \font#1=\fontprefix#2#3 scaled #4
  \csname cmap#5\endcsname#1%
}
% This is what gets called when #5 of \setfont is empty.
\let\cmap\gobble
% emacs-page end of cmaps

% Use cm as the default font prefix.
% To specify the font prefix, you must define \fontprefix
% before you read in texinfo.tex.
\ifx\fontprefix\undefined
\def\fontprefix{cm}
\fi
% Support font families that don't use the same naming scheme as CM.
\def\rmshape{r}
\def\rmbshape{bx}               %where the normal face is bold
\def\bfshape{b}
\def\bxshape{bx}
\def\ttshape{tt}
\def\ttbshape{tt}
\def\ttslshape{sltt}
\def\itshape{ti}
\def\itbshape{bxti}
\def\slshape{sl}
\def\slbshape{bxsl}
\def\sfshape{ss}
\def\sfbshape{ss}
\def\scshape{csc}
\def\scbshape{csc}

% Definitions for a main text size of 11pt.  This is the default in
% Texinfo.
%
\def\definetextfontsizexi{%
% Text fonts (11.2pt, magstep1).
\def\textnominalsize{11pt}
\edef\mainmagstep{\magstephalf}
\setfont\textrm\rmshape{10}{\mainmagstep}{OT1}
\setfont\texttt\ttshape{10}{\mainmagstep}{OT1TT}
\setfont\textbf\bfshape{10}{\mainmagstep}{OT1}
\setfont\textit\itshape{10}{\mainmagstep}{OT1IT}
\setfont\textsl\slshape{10}{\mainmagstep}{OT1}
\setfont\textsf\sfshape{10}{\mainmagstep}{OT1}
\setfont\textsc\scshape{10}{\mainmagstep}{OT1}
\setfont\textttsl\ttslshape{10}{\mainmagstep}{OT1TT}
\font\texti=cmmi10 scaled \mainmagstep
\font\textsy=cmsy10 scaled \mainmagstep
\def\textecsize{1095}

% A few fonts for @@defun names and args.
\setfont\defbf\bfshape{10}{\magstep1}{OT1}
\setfont\deftt\ttshape{10}{\magstep1}{OT1TT}
\setfont\defttsl\ttslshape{10}{\magstep1}{OT1TT}
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \let\tenttsl=\defttsl \bf}

% Fonts for indices, footnotes, small examples (9pt).
\def\smallnominalsize{9pt}
\setfont\smallrm\rmshape{9}{1000}{OT1}
\setfont\smalltt\ttshape{9}{1000}{OT1TT}
\setfont\smallbf\bfshape{10}{900}{OT1}
\setfont\smallit\itshape{9}{1000}{OT1IT}
\setfont\smallsl\slshape{9}{1000}{OT1}
\setfont\smallsf\sfshape{9}{1000}{OT1}
\setfont\smallsc\scshape{10}{900}{OT1}
\setfont\smallttsl\ttslshape{10}{900}{OT1TT}
\font\smalli=cmmi9
\font\smallsy=cmsy9
\def\smallecsize{0900}

% Fonts for small examples (8pt).
\def\smallernominalsize{8pt}
\setfont\smallerrm\rmshape{8}{1000}{OT1}
\setfont\smallertt\ttshape{8}{1000}{OT1TT}
\setfont\smallerbf\bfshape{10}{800}{OT1}
\setfont\smallerit\itshape{8}{1000}{OT1IT}
\setfont\smallersl\slshape{8}{1000}{OT1}
\setfont\smallersf\sfshape{8}{1000}{OT1}
\setfont\smallersc\scshape{10}{800}{OT1}
\setfont\smallerttsl\ttslshape{10}{800}{OT1TT}
\font\smalleri=cmmi8
\font\smallersy=cmsy8
\def\smallerecsize{0800}

% Fonts for title page (20.4pt):
\def\titlenominalsize{20pt}
\setfont\titlerm\rmbshape{12}{\magstep3}{OT1}
\setfont\titleit\itbshape{10}{\magstep4}{OT1IT}
\setfont\titlesl\slbshape{10}{\magstep4}{OT1}
\setfont\titlett\ttbshape{12}{\magstep3}{OT1TT}
\setfont\titlettsl\ttslshape{10}{\magstep4}{OT1TT}
\setfont\titlesf\sfbshape{17}{\magstep1}{OT1}
\let\titlebf=\titlerm
\setfont\titlesc\scbshape{10}{\magstep4}{OT1}
\font\titlei=cmmi12 scaled \magstep3
\font\titlesy=cmsy10 scaled \magstep4
\def\titleecsize{2074}

% Chapter (and unnumbered) fonts (17.28pt).
\def\chapnominalsize{17pt}
\setfont\chaprm\rmbshape{12}{\magstep2}{OT1}
\setfont\chapit\itbshape{10}{\magstep3}{OT1IT}
\setfont\chapsl\slbshape{10}{\magstep3}{OT1}
\setfont\chaptt\ttbshape{12}{\magstep2}{OT1TT}
\setfont\chapttsl\ttslshape{10}{\magstep3}{OT1TT}
\setfont\chapsf\sfbshape{17}{1000}{OT1}
\let\chapbf=\chaprm
\setfont\chapsc\scbshape{10}{\magstep3}{OT1}
\font\chapi=cmmi12 scaled \magstep2
\font\chapsy=cmsy10 scaled \magstep3
\def\chapecsize{1728}

% Section fonts (14.4pt).
\def\secnominalsize{14pt}
\setfont\secrm\rmbshape{12}{\magstep1}{OT1}
\setfont\secit\itbshape{10}{\magstep2}{OT1IT}
\setfont\secsl\slbshape{10}{\magstep2}{OT1}
\setfont\sectt\ttbshape{12}{\magstep1}{OT1TT}
\setfont\secttsl\ttslshape{10}{\magstep2}{OT1TT}
\setfont\secsf\sfbshape{12}{\magstep1}{OT1}
\let\secbf\secrm
\setfont\secsc\scbshape{10}{\magstep2}{OT1}
\font\seci=cmmi12 scaled \magstep1
\font\secsy=cmsy10 scaled \magstep2
\def\sececsize{1440}

% Subsection fonts (13.15pt).
\def\ssecnominalsize{13pt}
\setfont\ssecrm\rmbshape{12}{\magstephalf}{OT1}
\setfont\ssecit\itbshape{10}{1315}{OT1IT}
\setfont\ssecsl\slbshape{10}{1315}{OT1}
\setfont\ssectt\ttbshape{12}{\magstephalf}{OT1TT}
\setfont\ssecttsl\ttslshape{10}{1315}{OT1TT}
\setfont\ssecsf\sfbshape{12}{\magstephalf}{OT1}
\let\ssecbf\ssecrm
\setfont\ssecsc\scbshape{10}{1315}{OT1}
\font\sseci=cmmi12 scaled \magstephalf
\font\ssecsy=cmsy10 scaled 1315
\def\ssececsize{1200}

% Reduced fonts for @@acro in text (10pt).
\def\reducednominalsize{10pt}
\setfont\reducedrm\rmshape{10}{1000}{OT1}
\setfont\reducedtt\ttshape{10}{1000}{OT1TT}
\setfont\reducedbf\bfshape{10}{1000}{OT1}
\setfont\reducedit\itshape{10}{1000}{OT1IT}
\setfont\reducedsl\slshape{10}{1000}{OT1}
\setfont\reducedsf\sfshape{10}{1000}{OT1}
\setfont\reducedsc\scshape{10}{1000}{OT1}
\setfont\reducedttsl\ttslshape{10}{1000}{OT1TT}
\font\reducedi=cmmi10
\font\reducedsy=cmsy10
\def\reducedecsize{1000}

% reset the current fonts
\textfonts
\rm
} % end of 11pt text font size definitions


% Definitions to make the main text be 10pt Computer Modern, with
% section, chapter, etc., sizes following suit.  This is for the GNU
% Press printing of the Emacs 22 manual.  Maybe other manuals in the
% future.  Used with @@smallbook, which sets the leading to 12pt.
%
\def\definetextfontsizex{%
% Text fonts (10pt).
\def\textnominalsize{10pt}
\edef\mainmagstep{1000}
\setfont\textrm\rmshape{10}{\mainmagstep}{OT1}
\setfont\texttt\ttshape{10}{\mainmagstep}{OT1TT}
\setfont\textbf\bfshape{10}{\mainmagstep}{OT1}
\setfont\textit\itshape{10}{\mainmagstep}{OT1IT}
\setfont\textsl\slshape{10}{\mainmagstep}{OT1}
\setfont\textsf\sfshape{10}{\mainmagstep}{OT1}
\setfont\textsc\scshape{10}{\mainmagstep}{OT1}
\setfont\textttsl\ttslshape{10}{\mainmagstep}{OT1TT}
\font\texti=cmmi10 scaled \mainmagstep
\font\textsy=cmsy10 scaled \mainmagstep
\def\textecsize{1000}

% A few fonts for @@defun names and args.
\setfont\defbf\bfshape{10}{\magstephalf}{OT1}
\setfont\deftt\ttshape{10}{\magstephalf}{OT1TT}
\setfont\defttsl\ttslshape{10}{\magstephalf}{OT1TT}
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \let\tenttsl=\defttsl \bf}

% Fonts for indices, footnotes, small examples (9pt).
\def\smallnominalsize{9pt}
\setfont\smallrm\rmshape{9}{1000}{OT1}
\setfont\smalltt\ttshape{9}{1000}{OT1TT}
\setfont\smallbf\bfshape{10}{900}{OT1}
\setfont\smallit\itshape{9}{1000}{OT1IT}
\setfont\smallsl\slshape{9}{1000}{OT1}
\setfont\smallsf\sfshape{9}{1000}{OT1}
\setfont\smallsc\scshape{10}{900}{OT1}
\setfont\smallttsl\ttslshape{10}{900}{OT1TT}
\font\smalli=cmmi9
\font\smallsy=cmsy9
\def\smallecsize{0900}

% Fonts for small examples (8pt).
\def\smallernominalsize{8pt}
\setfont\smallerrm\rmshape{8}{1000}{OT1}
\setfont\smallertt\ttshape{8}{1000}{OT1TT}
\setfont\smallerbf\bfshape{10}{800}{OT1}
\setfont\smallerit\itshape{8}{1000}{OT1IT}
\setfont\smallersl\slshape{8}{1000}{OT1}
\setfont\smallersf\sfshape{8}{1000}{OT1}
\setfont\smallersc\scshape{10}{800}{OT1}
\setfont\smallerttsl\ttslshape{10}{800}{OT1TT}
\font\smalleri=cmmi8
\font\smallersy=cmsy8
\def\smallerecsize{0800}

% Fonts for title page (20.4pt):
\def\titlenominalsize{20pt}
\setfont\titlerm\rmbshape{12}{\magstep3}{OT1}
\setfont\titleit\itbshape{10}{\magstep4}{OT1IT}
\setfont\titlesl\slbshape{10}{\magstep4}{OT1}
\setfont\titlett\ttbshape{12}{\magstep3}{OT1TT}
\setfont\titlettsl\ttslshape{10}{\magstep4}{OT1TT}
\setfont\titlesf\sfbshape{17}{\magstep1}{OT1}
\let\titlebf=\titlerm
\setfont\titlesc\scbshape{10}{\magstep4}{OT1}
\font\titlei=cmmi12 scaled \magstep3
\font\titlesy=cmsy10 scaled \magstep4
\def\titleecsize{2074}

% Chapter fonts (14.4pt).
\def\chapnominalsize{14pt}
\setfont\chaprm\rmbshape{12}{\magstep1}{OT1}
\setfont\chapit\itbshape{10}{\magstep2}{OT1IT}
\setfont\chapsl\slbshape{10}{\magstep2}{OT1}
\setfont\chaptt\ttbshape{12}{\magstep1}{OT1TT}
\setfont\chapttsl\ttslshape{10}{\magstep2}{OT1TT}
\setfont\chapsf\sfbshape{12}{\magstep1}{OT1}
\let\chapbf\chaprm
\setfont\chapsc\scbshape{10}{\magstep2}{OT1}
\font\chapi=cmmi12 scaled \magstep1
\font\chapsy=cmsy10 scaled \magstep2
\def\chapecsize{1440}

% Section fonts (12pt).
\def\secnominalsize{12pt}
\setfont\secrm\rmbshape{12}{1000}{OT1}
\setfont\secit\itbshape{10}{\magstep1}{OT1IT}
\setfont\secsl\slbshape{10}{\magstep1}{OT1}
\setfont\sectt\ttbshape{12}{1000}{OT1TT}
\setfont\secttsl\ttslshape{10}{\magstep1}{OT1TT}
\setfont\secsf\sfbshape{12}{1000}{OT1}
\let\secbf\secrm
\setfont\secsc\scbshape{10}{\magstep1}{OT1}
\font\seci=cmmi12
\font\secsy=cmsy10 scaled \magstep1
\def\sececsize{1200}

% Subsection fonts (10pt).
\def\ssecnominalsize{10pt}
\setfont\ssecrm\rmbshape{10}{1000}{OT1}
\setfont\ssecit\itbshape{10}{1000}{OT1IT}
\setfont\ssecsl\slbshape{10}{1000}{OT1}
\setfont\ssectt\ttbshape{10}{1000}{OT1TT}
\setfont\ssecttsl\ttslshape{10}{1000}{OT1TT}
\setfont\ssecsf\sfbshape{10}{1000}{OT1}
\let\ssecbf\ssecrm
\setfont\ssecsc\scbshape{10}{1000}{OT1}
\font\sseci=cmmi10
\font\ssecsy=cmsy10
\def\ssececsize{1000}

% Reduced fonts for @@acro in text (9pt).
\def\reducednominalsize{9pt}
\setfont\reducedrm\rmshape{9}{1000}{OT1}
\setfont\reducedtt\ttshape{9}{1000}{OT1TT}
\setfont\reducedbf\bfshape{10}{900}{OT1}
\setfont\reducedit\itshape{9}{1000}{OT1IT}
\setfont\reducedsl\slshape{9}{1000}{OT1}
\setfont\reducedsf\sfshape{9}{1000}{OT1}
\setfont\reducedsc\scshape{10}{900}{OT1}
\setfont\reducedttsl\ttslshape{10}{900}{OT1TT}
\font\reducedi=cmmi9
\font\reducedsy=cmsy9
\def\reducedecsize{0900}

% reduce space between paragraphs
\divide\parskip by 2

% reset the current fonts
\textfonts
\rm
} % end of 10pt text font size definitions


% We provide the user-level command
%   @@fonttextsize 10
% (or 11) to redefine the text font size.  pt is assumed.
%
\def\xword{10}
\def\xiword{11}
%
\parseargdef\fonttextsize{%
  \def\textsizearg{#1}%
  \wlog{doing @@fonttextsize \textsizearg}%
  %
  % Set \globaldefs so that documents can use this inside @@tex, since
  % makeinfo 4.8 does not support it, but we need it nonetheless.
  %
 \begingroup \globaldefs=1
  \ifx\textsizearg\xword \definetextfontsizex
  \else \ifx\textsizearg\xiword \definetextfontsizexi
  \else
    \errhelp=\EMsimple
    \errmessage{@@fonttextsize only supports `10' or `11', not `\textsizearg'}
  \fi\fi
 \endgroup
}


% In order for the font changes to affect most math symbols and letters,
% we have to define the \textfont of the standard families.  Since
% texinfo doesn't allow for producing subscripts and superscripts except
% in the main text, we don't bother to reset \scriptfont and
% \scriptscriptfont (which would also require loading a lot more fonts).
%
\def\resetmathfonts{%
  \textfont0=\tenrm \textfont1=\teni \textfont2=\tensy
  \textfont\itfam=\tenit \textfont\slfam=\tensl \textfont\bffam=\tenbf
  \textfont\ttfam=\tentt \textfont\sffam=\tensf
}

% The font-changing commands redefine the meanings of \tenSTYLE, instead
% of just \STYLE.  We do this because \STYLE needs to also set the
% current \fam for math mode.  Our \STYLE (e.g., \rm) commands hardwire
% \tenSTYLE to set the current font.
%
% Each font-changing command also sets the names \lsize (one size lower)
% and \lllsize (three sizes lower).  These relative commands are used in
% the LaTeX logo and acronyms.
%
% This all needs generalizing, badly.
%
\def\textfonts{%
  \let\tenrm=\textrm \let\tenit=\textit \let\tensl=\textsl
  \let\tenbf=\textbf \let\tentt=\texttt \let\smallcaps=\textsc
  \let\tensf=\textsf \let\teni=\texti \let\tensy=\textsy
  \let\tenttsl=\textttsl
  \def\curfontsize{text}%
  \def\lsize{reduced}\def\lllsize{smaller}%
  \resetmathfonts \setleading{\textleading}}
\def\titlefonts{%
  \let\tenrm=\titlerm \let\tenit=\titleit \let\tensl=\titlesl
  \let\tenbf=\titlebf \let\tentt=\titlett \let\smallcaps=\titlesc
  \let\tensf=\titlesf \let\teni=\titlei \let\tensy=\titlesy
  \let\tenttsl=\titlettsl
  \def\curfontsize{title}%
  \def\lsize{chap}\def\lllsize{subsec}%
  \resetmathfonts \setleading{25pt}}
\def\titlefont#1{{\titlefonts\rmisbold #1}}
\def\chapfonts{%
  \let\tenrm=\chaprm \let\tenit=\chapit \let\tensl=\chapsl
  \let\tenbf=\chapbf \let\tentt=\chaptt \let\smallcaps=\chapsc
  \let\tensf=\chapsf \let\teni=\chapi \let\tensy=\chapsy
  \let\tenttsl=\chapttsl
  \def\curfontsize{chap}%
  \def\lsize{sec}\def\lllsize{text}%
  \resetmathfonts \setleading{19pt}}
\def\secfonts{%
  \let\tenrm=\secrm \let\tenit=\secit \let\tensl=\secsl
  \let\tenbf=\secbf \let\tentt=\sectt \let\smallcaps=\secsc
  \let\tensf=\secsf \let\teni=\seci \let\tensy=\secsy
  \let\tenttsl=\secttsl
  \def\curfontsize{sec}%
  \def\lsize{subsec}\def\lllsize{reduced}%
  \resetmathfonts \setleading{16pt}}
\def\subsecfonts{%
  \let\tenrm=\ssecrm \let\tenit=\ssecit \let\tensl=\ssecsl
  \let\tenbf=\ssecbf \let\tentt=\ssectt \let\smallcaps=\ssecsc
  \let\tensf=\ssecsf \let\teni=\sseci \let\tensy=\ssecsy
  \let\tenttsl=\ssecttsl
  \def\curfontsize{ssec}%
  \def\lsize{text}\def\lllsize{small}%
  \resetmathfonts \setleading{15pt}}
\let\subsubsecfonts = \subsecfonts
\def\reducedfonts{%
  \let\tenrm=\reducedrm \let\tenit=\reducedit \let\tensl=\reducedsl
  \let\tenbf=\reducedbf \let\tentt=\reducedtt \let\reducedcaps=\reducedsc
  \let\tensf=\reducedsf \let\teni=\reducedi \let\tensy=\reducedsy
  \let\tenttsl=\reducedttsl
  \def\curfontsize{reduced}%
  \def\lsize{small}\def\lllsize{smaller}%
  \resetmathfonts \setleading{10.5pt}}
\def\smallfonts{%
  \let\tenrm=\smallrm \let\tenit=\smallit \let\tensl=\smallsl
  \let\tenbf=\smallbf \let\tentt=\smalltt \let\smallcaps=\smallsc
  \let\tensf=\smallsf \let\teni=\smalli \let\tensy=\smallsy
  \let\tenttsl=\smallttsl
  \def\curfontsize{small}%
  \def\lsize{smaller}\def\lllsize{smaller}%
  \resetmathfonts \setleading{10.5pt}}
\def\smallerfonts{%
  \let\tenrm=\smallerrm \let\tenit=\smallerit \let\tensl=\smallersl
  \let\tenbf=\smallerbf \let\tentt=\smallertt \let\smallcaps=\smallersc
  \let\tensf=\smallersf \let\teni=\smalleri \let\tensy=\smallersy
  \let\tenttsl=\smallerttsl
  \def\curfontsize{smaller}%
  \def\lsize{smaller}\def\lllsize{smaller}%
  \resetmathfonts \setleading{9.5pt}}

% Fonts for short table of contents.
\setfont\shortcontrm\rmshape{12}{1000}{OT1}
\setfont\shortcontbf\bfshape{10}{\magstep1}{OT1}  % no cmb12
\setfont\shortcontsl\slshape{12}{1000}{OT1}
\setfont\shortconttt\ttshape{12}{1000}{OT1TT}

% Define these just so they can be easily changed for other fonts.
\def\angleleft{$\langle$}
\def\angleright{$\rangle$}

% Set the fonts to use with the @@small... environments.
\let\smallexamplefonts = \smallfonts

% About \smallexamplefonts.  If we use \smallfonts (9pt), @@smallexample
% can fit this many characters:
%   8.5x11=86   smallbook=72  a4=90  a5=69
% If we use \scriptfonts (8pt), then we can fit this many characters:
%   8.5x11=90+  smallbook=80  a4=90+  a5=77
% For me, subjectively, the few extra characters that fit aren't worth
% the additional smallness of 8pt.  So I'm making the default 9pt.
%
% By the way, for comparison, here's what fits with @@example (10pt):
%   8.5x11=71  smallbook=60  a4=75  a5=58
% --karl, 24jan03.

% Set up the default fonts, so we can use them for creating boxes.
%
\definetextfontsizexi


\message{markup,}

% Check if we are currently using a typewriter font.  Since all the
% Computer Modern typewriter fonts have zero interword stretch (and
% shrink), and it is reasonable to expect all typewriter fonts to have
% this property, we can check that font parameter.
%
\def\ifmonospace{\ifdim\fontdimen3\font=0pt }

% Markup style infrastructure.  \defmarkupstylesetup\INITMACRO will
% define and register \INITMACRO to be called on markup style changes.
% \INITMACRO can check \currentmarkupstyle for the innermost
% style and the set of \ifmarkupSTYLE switches for all styles
% currently in effect.
\newif\ifmarkupvar
\newif\ifmarkupsamp
\newif\ifmarkupkey
%\newif\ifmarkupfile % @@file == @@samp.
%\newif\ifmarkupoption % @@option == @@samp.
\newif\ifmarkupcode
\newif\ifmarkupkbd
%\newif\ifmarkupenv % @@env == @@code.
%\newif\ifmarkupcommand % @@command == @@code.
\newif\ifmarkuptex % @@tex (and part of @@math, for now).
\newif\ifmarkupexample
\newif\ifmarkupverb
\newif\ifmarkupverbatim

\let\currentmarkupstyle\empty

\def\setupmarkupstyle#1{%
  \csname markup#1true\endcsname
  \def\currentmarkupstyle{#1}%
  \markupstylesetup
}

\let\markupstylesetup\empty

\def\defmarkupstylesetup#1{%
  \expandafter\def\expandafter\markupstylesetup
    \expandafter{\markupstylesetup #1}%
  \def#1%
}

% Markup style setup for left and right quotes.
\defmarkupstylesetup\markupsetuplq{%
  \expandafter\let\expandafter \temp \csname markupsetuplq\currentmarkupstyle\endcsname
  \ifx\temp\relax \markupsetuplqdefault \else \temp \fi
}

\defmarkupstylesetup\markupsetuprq{%
  \expandafter\let\expandafter \temp \csname markupsetuprq\currentmarkupstyle\endcsname
  \ifx\temp\relax \markupsetuprqdefault \else \temp \fi
}

{
\catcode`\'=\active
\catcode`\`=\active

\gdef\markupsetuplqdefault{\let`\lq}
\gdef\markupsetuprqdefault{\let'\rq}

\gdef\markupsetcodequoteleft{\let`\codequoteleft}
\gdef\markupsetcodequoteright{\let'\codequoteright}

\gdef\markupsetnoligaturesquoteleft{\let`\noligaturesquoteleft}
}

\let\markupsetuplqcode \markupsetcodequoteleft
\let\markupsetuprqcode \markupsetcodequoteright
\let\markupsetuplqexample \markupsetcodequoteleft
\let\markupsetuprqexample \markupsetcodequoteright
\let\markupsetuplqverb \markupsetcodequoteleft
\let\markupsetuprqverb \markupsetcodequoteright
\let\markupsetuplqverbatim \markupsetcodequoteleft
\let\markupsetuprqverbatim \markupsetcodequoteright

\let\markupsetuplqsamp \markupsetnoligaturesquoteleft
\let\markupsetuplqkbd \markupsetnoligaturesquoteleft

% Allow an option to not replace quotes with a regular directed right
% quote/apostrophe (char 0x27), but instead use the undirected quote
% from cmtt (char 0x0d).  The undirected quote is ugly, so don't make it
% the default, but it works for pasting with more pdf viewers (at least
% evince), the lilypond developers report.  xpdf does work with the
% regular 0x27.
%
\def\codequoteright{%
  \expandafter\ifx\csname SETtxicodequoteundirected\endcsname\relax
    \expandafter\ifx\csname SETcodequoteundirected\endcsname\relax
      '%
    \else \char'15 \fi
  \else \char'15 \fi
}
%
% and a similar option for the left quote char vs. a grave accent.
% Modern fonts display ASCII 0x60 as a grave accent, so some people like
% the code environments to do likewise.
%
\def\codequoteleft{%
  \expandafter\ifx\csname SETtxicodequotebacktick\endcsname\relax
    \expandafter\ifx\csname SETcodequotebacktick\endcsname\relax
      % [Knuth] pp. 380,381,391
      % \relax disables Spanish ligatures ?` and !` of \tt font.
      \relax`%
    \else \char'22 \fi
  \else \char'22 \fi
}

% [Knuth] pp. 380,381,391, disable Spanish ligatures ?` and !` of \tt font.
\def\noligaturesquoteleft{\relax\lq}

% Count depth in font-changes, for error checks
\newcount\fontdepth \fontdepth=0

%% Add scribe-like font environments, plus @@l for inline lisp (usually sans
%% serif) and @@ii for TeX italic

% \smartitalic{ARG} outputs arg in italics, followed by an italic correction
% unless the following character is such as not to need one.
\def\smartitalicx{\ifx\next,\else\ifx\next-\else\ifx\next.\else
                    \ptexslash\fi\fi\fi}
\def\smartslanted#1{{\ifusingtt\ttsl\sl #1}\futurelet\next\smartitalicx}
\def\smartitalic#1{{\ifusingtt\ttsl\it #1}\futurelet\next\smartitalicx}

% like \smartslanted except unconditionally uses \ttsl.
% @@var is set to this for defun arguments.
\def\ttslanted#1{{\ttsl #1}\futurelet\next\smartitalicx}

% @@cite is like \smartslanted except unconditionally use \sl.  We never want
% ttsl for book titles, do we?
\def\cite#1{{\sl #1}\futurelet\next\smartitalicx}

\let\i=\smartitalic
\let\slanted=\smartslanted
\def\var#1{{\setupmarkupstyle{var}\smartslanted{#1}}}
\let\dfn=\smartslanted
\let\emph=\smartitalic

% Explicit font changes: @@r, @@sc, undocumented @@ii.
\def\r#1{{\rm #1}}              % roman font
\def\sc#1{{\smallcaps#1}}       % smallcaps font
\def\ii#1{{\it #1}}             % italic font

% @@b, explicit bold.  Also @@strong.
\def\b#1{{\bf #1}}
\let\strong=\b

% @@sansserif, explicit sans.
\def\sansserif#1{{\sf #1}}

% We can't just use \exhyphenpenalty, because that only has effect at
% the end of a paragraph.  Restore normal hyphenation at the end of the
% group within which \nohyphenation is presumably called.
%
\def\nohyphenation{\hyphenchar\font = -1  \aftergroup\restorehyphenation}
\def\restorehyphenation{\hyphenchar\font = `- }

% Set sfcode to normal for the chars that usually have another value.
% Can't use plain's \frenchspacing because it uses the `\x notation, and
% sometimes \x has an active definition that messes things up.
%
\catcode`@@=11
  \def\plainfrenchspacing{%
    \sfcode\dotChar  =\@@m \sfcode\questChar=\@@m \sfcode\exclamChar=\@@m
    \sfcode\colonChar=\@@m \sfcode\semiChar =\@@m \sfcode\commaChar =\@@m
    \def\endofsentencespacefactor{1000}% for @@. and friends
  }
  \def\plainnonfrenchspacing{%
    \sfcode`\.3000\sfcode`\?3000\sfcode`\!3000
    \sfcode`\:2000\sfcode`\;1500\sfcode`\,1250
    \def\endofsentencespacefactor{3000}% for @@. and friends
  }
\catcode`@@=\other
\def\endofsentencespacefactor{3000}% default

% @@t, explicit typewriter.
\def\t#1{%
  {\tt \rawbackslash \plainfrenchspacing #1}%
  \null
}

% @@samp.
\def\samp#1{{\setupmarkupstyle{samp}\lq\tclose{#1}\rq\null}}

% definition of @@key that produces a lozenge.  Doesn't adjust to text size.
%\setfont\keyrm\rmshape{8}{1000}{OT1}
%\font\keysy=cmsy9
%\def\key#1{{\keyrm\textfont2=\keysy \leavevmode\hbox{%
%  \raise0.4pt\hbox{\angleleft}\kern-.08em\vtop{%
%    \vbox{\hrule\kern-0.4pt
%     \hbox{\raise0.4pt\hbox{\vphantom{\angleleft}}#1}}%
%    \kern-0.4pt\hrule}%
%  \kern-.06em\raise0.4pt\hbox{\angleright}}}}

% definition of @@key with no lozenge.  If the current font is already
% monospace, don't change it; that way, we respect @@kbdinputstyle.  But
% if it isn't monospace, then use \tt.
%
\def\key#1{{\setupmarkupstyle{key}%
  \nohyphenation
  \ifmonospace\else\tt\fi
  #1}\null}

% ctrl is no longer a Texinfo command.
\def\ctrl #1{{\tt \rawbackslash \hat}#1}

% @@file, @@option are the same as @@samp.
\let\file=\samp
\let\option=\samp

% @@code is a modification of @@t,
% which makes spaces the same size as normal in the surrounding text.
\def\tclose#1{%
  {%
    % Change normal interword space to be same as for the current font.
    \spaceskip = \fontdimen2\font
    %
    % Switch to typewriter.
    \tt
    %
    % But `\ ' produces the large typewriter interword space.
    \def\ {{\spaceskip = 0pt{} }}%
    %
    % Turn off hyphenation.
    \nohyphenation
    %
    \rawbackslash
    \plainfrenchspacing
    #1%
  }%
  \null
}

% We *must* turn on hyphenation at `-' and `_' in @@code.
% Otherwise, it is too hard to avoid overfull hboxes
% in the Emacs manual, the Library manual, etc.

% Unfortunately, TeX uses one parameter (\hyphenchar) to control
% both hyphenation at - and hyphenation within words.
% We must therefore turn them both off (\tclose does that)
% and arrange explicitly to hyphenate at a dash.
%  -- rms.
{
  \catcode`\-=\active \catcode`\_=\active
  \catcode`\'=\active \catcode`\`=\active
  \global\let'=\rq \global\let`=\lq  % default definitions
  %
  \global\def\code{\begingroup
    \setupmarkupstyle{code}%
    % The following should really be moved into \setupmarkupstyle handlers.
    \catcode\dashChar=\active  \catcode\underChar=\active
    \ifallowcodebreaks
     \let-\codedash
     \let_\codeunder
    \else
     \let-\realdash
     \let_\realunder
    \fi
    \codex
  }
}

\def\realdash{-}
\def\codedash{-\discretionary{}{}{}}
\def\codeunder{%
  % this is all so @@math{@@code{var_name}+1} can work.  In math mode, _
  % is "active" (mathcode"8000) and \normalunderscore (or \char95, etc.)
  % will therefore expand the active definition of _, which is us
  % (inside @@code that is), therefore an endless loop.
  \ifusingtt{\ifmmode
               \mathchar"075F % class 0=ordinary, family 7=ttfam, pos 0x5F=_.
             \else\normalunderscore \fi
             \discretionary{}{}{}}%
            {\_}%
}
\def\codex #1{\tclose{#1}\endgroup}

% An additional complication: the above will allow breaks after, e.g.,
% each of the four underscores in __typeof__.  This is undesirable in
% some manuals, especially if they don't have long identifiers in
% general.  @@allowcodebreaks provides a way to control this.
%
\newif\ifallowcodebreaks  \allowcodebreakstrue

\def\keywordtrue{true}
\def\keywordfalse{false}

\parseargdef\allowcodebreaks{%
  \def\txiarg{#1}%
  \ifx\txiarg\keywordtrue
    \allowcodebreakstrue
  \else\ifx\txiarg\keywordfalse
    \allowcodebreaksfalse
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@allowcodebreaks option `\txiarg'}%
  \fi\fi
}

% @@kbd is like @@code, except that if the argument is just one @@key command,
% then @@kbd has no effect.
\def\kbd#1{{\setupmarkupstyle{kbd}\def\look{#1}\expandafter\kbdfoo\look??\par}}

% @@kbdinputstyle -- arg is `distinct' (@@kbd uses slanted tty font always),
%   `example' (@@kbd uses ttsl only inside of @@example and friends),
%   or `code' (@@kbd uses normal tty font always).
\parseargdef\kbdinputstyle{%
  \def\txiarg{#1}%
  \ifx\txiarg\worddistinct
    \gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\ttsl}%
  \else\ifx\txiarg\wordexample
    \gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\tt}%
  \else\ifx\txiarg\wordcode
    \gdef\kbdexamplefont{\tt}\gdef\kbdfont{\tt}%
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@kbdinputstyle option `\txiarg'}%
  \fi\fi\fi
}
\def\worddistinct{distinct}
\def\wordexample{example}
\def\wordcode{code}

% Default is `distinct'.
\kbdinputstyle distinct

\def\xkey{\key}
\def\kbdfoo#1#2#3\par{\def\one{#1}\def\three{#3}\def\threex{??}%
\ifx\one\xkey\ifx\threex\three \key{#2}%
\else{\tclose{\kbdfont\setupmarkupstyle{kbd}\look}}\fi
\else{\tclose{\kbdfont\setupmarkupstyle{kbd}\look}}\fi}

% For @@indicateurl, @@env, @@command quotes seem unnecessary, so use \code.
\let\indicateurl=\code
\let\env=\code
\let\command=\code

% @@clicksequence{File @@click{} Open ...}
\def\clicksequence#1{\begingroup #1\endgroup}

% @@clickstyle @@arrow   (by default)
\parseargdef\clickstyle{\def\click{#1}}
\def\click{\arrow}

% @@uref (abbreviation for `urlref') takes an optional (comma-separated)
% second argument specifying the text to display and an optional third
% arg as text to display instead of (rather than in addition to) the url
% itself.  First (mandatory) arg is the url.  Perhaps eventually put in
% a hypertex \special here.
%
\def\uref#1{\douref #1,,,\finish}
\def\douref#1,#2,#3,#4\finish{\begingroup
  \unsepspaces
  \pdfurl{#1}%
  \setbox0 = \hbox{\ignorespaces #3}%
  \ifdim\wd0 > 0pt
    \unhbox0 % third arg given, show only that
  \else
    \setbox0 = \hbox{\ignorespaces #2}%
    \ifdim\wd0 > 0pt
      \ifpdf
        \unhbox0             % PDF: 2nd arg given, show only it
      \else
        \unhbox0\ (\code{#1})% DVI: 2nd arg given, show both it and url
      \fi
    \else
      \code{#1}% only url given, so show it
    \fi
  \fi
  \endlink
\endgroup}

% @@url synonym for @@uref, since that's how everyone uses it.
%
\let\url=\uref

% rms does not like angle brackets --karl, 17may97.
% So now @@email is just like @@uref, unless we are pdf.
%
%\def\email#1{\angleleft{\tt #1}\angleright}
\ifpdf
  \def\email#1{\doemail#1,,\finish}
  \def\doemail#1,#2,#3\finish{\begingroup
    \unsepspaces
    \pdfurl{mailto:#1}%
    \setbox0 = \hbox{\ignorespaces #2}%
    \ifdim\wd0>0pt\unhbox0\else\code{#1}\fi
    \endlink
  \endgroup}
\else
  \let\email=\uref
\fi

% Typeset a dimension, e.g., `in' or `pt'.  The only reason for the
% argument is to make the input look right: @@dmn{pt} instead of @@dmn{}pt.
%
\def\dmn#1{\thinspace #1}

% @@l was never documented to mean ``switch to the Lisp font'',
% and it is not used as such in any manual I can find.  We need it for
% Polish suppressed-l.  --karl, 22sep96.
%\def\l#1{{\li #1}\null}

% @@acronym for "FBI", "NATO", and the like.
% We print this one point size smaller, since it's intended for
% all-uppercase.
%
\def\acronym#1{\doacronym #1,,\finish}
\def\doacronym#1,#2,#3\finish{%
  {\selectfonts\lsize #1}%
  \def\temp{#2}%
  \ifx\temp\empty \else
    \space ({\unsepspaces \ignorespaces \temp \unskip})%
  \fi
}

% @@abbr for "Comput. J." and the like.
% No font change, but don't do end-of-sentence spacing.
%
\def\abbr#1{\doabbr #1,,\finish}
\def\doabbr#1,#2,#3\finish{%
  {\plainfrenchspacing #1}%
  \def\temp{#2}%
  \ifx\temp\empty \else
    \space ({\unsepspaces \ignorespaces \temp \unskip})%
  \fi
}


\message{glyphs,}

% @@point{}, @@result{}, @@expansion{}, @@print{}, @@equiv{}.
%
% Since these characters are used in examples, they should be an even number of
% \tt widths. Each \tt character is 1en, so two makes it 1em.
%
\def\point{$\star$}
\def\arrow{\leavevmode\raise.05ex\hbox to 1em{\hfil$\rightarrow$\hfil}}
\def\result{\leavevmode\raise.05ex\hbox to 1em{\hfil$\Rightarrow$\hfil}}
\def\expansion{\leavevmode\hbox to 1em{\hfil$\mapsto$\hfil}}
\def\print{\leavevmode\lower.1ex\hbox to 1em{\hfil$\dashv$\hfil}}
\def\equiv{\leavevmode\hbox to 1em{\hfil$\ptexequiv$\hfil}}

% The @@error{} command.
% Adapted from the TeXbook's \boxit.
%
\newbox\errorbox
%
{\tentt \global\dimen0 = 3em}% Width of the box.
\dimen2 = .55pt % Thickness of rules
% The text. (`r' is open on the right, `e' somewhat less so on the left.)
\setbox0 = \hbox{\kern-.75pt \reducedsf error\kern-1.5pt}
%
\setbox\errorbox=\hbox to \dimen0{\hfil
   \hsize = \dimen0 \advance\hsize by -5.8pt % Space to left+right.
   \advance\hsize by -2\dimen2 % Rules.
   \vbox{%
      \hrule height\dimen2
      \hbox{\vrule width\dimen2 \kern3pt          % Space to left of text.
         \vtop{\kern2.4pt \box0 \kern2.4pt}% Space above/below.
         \kern3pt\vrule width\dimen2}% Space to right.
      \hrule height\dimen2}
    \hfil}
%
\def\error{\leavevmode\lower.7ex\copy\errorbox}

% @@pounds{} is a sterling sign, which Knuth put in the CM italic font.
%
\def\pounds{{\it\$}}

% @@euro{} comes from a separate font, depending on the current style.
% We use the free feym* fonts from the eurosym package by Henrik
% Theiling, which support regular, slanted, bold and bold slanted (and
% "outlined" (blackboard board, sort of) versions, which we don't need).
% It is available from http://www.ctan.org/tex-archive/fonts/eurosym.
%
% Although only regular is the truly official Euro symbol, we ignore
% that.  The Euro is designed to be slightly taller than the regular
% font height.
%
% feymr - regular
% feymo - slanted
% feybr - bold
% feybo - bold slanted
%
% There is no good (free) typewriter version, to my knowledge.
% A feymr10 euro is ~7.3pt wide, while a normal cmtt10 char is ~5.25pt wide.
% Hmm.
%
% Also doesn't work in math.  Do we need to do math with euro symbols?
% Hope not.
%
%
\def\euro{{\eurofont e}}
\def\eurofont{%
  % We set the font at each command, rather than predefining it in
  % \textfonts and the other font-switching commands, so that
  % installations which never need the symbol don't have to have the
  % font installed.
  %
  % There is only one designed size (nominal 10pt), so we always scale
  % that to the current nominal size.
  %
  % By the way, simply using "at 1em" works for cmr10 and the like, but
  % does not work for cmbx10 and other extended/shrunken fonts.
  %
  \def\eurosize{\csname\curfontsize nominalsize\endcsname}%
  %
  \ifx\curfontstyle\bfstylename
    % bold:
    \font\thiseurofont = \ifusingit{feybo10}{feybr10} at \eurosize
  \else
    % regular:
    \font\thiseurofont = \ifusingit{feymo10}{feymr10} at \eurosize
  \fi
  \thiseurofont
}

% Glyphs from the EC fonts.  We don't use \let for the aliases, because
% sometimes we redefine the original macro, and the alias should reflect
% the redefinition.
%
% Use LaTeX names for the Icelandic letters.
\def\DH{{\ecfont \char"D0}} % Eth
\def\dh{{\ecfont \char"F0}} % eth
\def\TH{{\ecfont \char"DE}} % Thorn
\def\th{{\ecfont \char"FE}} % thorn
%
\def\guillemetleft{{\ecfont \char"13}}
\def\guillemotleft{\guillemetleft}
\def\guillemetright{{\ecfont \char"14}}
\def\guillemotright{\guillemetright}
\def\guilsinglleft{{\ecfont \char"0E}}
\def\guilsinglright{{\ecfont \char"0F}}
\def\quotedblbase{{\ecfont \char"12}}
\def\quotesinglbase{{\ecfont \char"0D}}
%
% This positioning is not perfect (see the ogonek LaTeX package), but
% we have the precomposed glyphs for the most common cases.  We put the
% tests to use those glyphs in the single \ogonek macro so we have fewer
% dummy definitions to worry about for index entries, etc.
%
% ogonek is also used with other letters in Lithuanian (IOU), but using
% the precomposed glyphs for those is not so easy since they aren't in
% the same EC font.
\def\ogonek#1{{%
  \def\temp{#1}%
  \ifx\temp\macrocharA\Aogonek
  \else\ifx\temp\macrochara\aogonek
  \else\ifx\temp\macrocharE\Eogonek
  \else\ifx\temp\macrochare\eogonek
  \else
    \ecfont \setbox0=\hbox{#1}%
    \ifdim\ht0=1ex\accent"0C #1%
    \else\ooalign{\unhbox0\crcr\hidewidth\char"0C \hidewidth}%
    \fi
  \fi\fi\fi\fi
  }%
}
\def\Aogonek{{\ecfont \char"81}}\def\macrocharA{A}
\def\aogonek{{\ecfont \char"A1}}\def\macrochara{a}
\def\Eogonek{{\ecfont \char"86}}\def\macrocharE{E}
\def\eogonek{{\ecfont \char"A6}}\def\macrochare{e}
%
% Use the ec* fonts (cm-super in outline format) for non-CM glyphs.
\def\ecfont{%
  % We can't distinguish serif/sans and italic/slanted, but this
  % is used for crude hacks anyway (like adding French and German
  % quotes to documents typeset with CM, where we lose kerning), so
  % hopefully nobody will notice/care.
  \edef\ecsize{\csname\curfontsize ecsize\endcsname}%
  \edef\nominalsize{\csname\curfontsize nominalsize\endcsname}%
  \ifx\curfontstyle\bfstylename
    % bold:
    \font\thisecfont = ecb\ifusingit{i}{x}\ecsize \space at \nominalsize
  \else
    % regular:
    \font\thisecfont = ec\ifusingit{ti}{rm}\ecsize \space at \nominalsize
  \fi
  \thisecfont
}

% @@registeredsymbol - R in a circle.  The font for the R should really
% be smaller yet, but lllsize is the best we can do for now.
% Adapted from the plain.tex definition of \copyright.
%
\def\registeredsymbol{%
  $^{{\ooalign{\hfil\raise.07ex\hbox{\selectfonts\lllsize R}%
               \hfil\crcr\Orb}}%
    }$%
}

% @@textdegree - the normal degrees sign.
%
\def\textdegree{$^\circ$}

% Laurent Siebenmann reports \Orb undefined with:
%  Textures 1.7.7 (preloaded format=plain 93.10.14)  (68K)  16 APR 2004 02:38
% so we'll define it if necessary.
%
\ifx\Orb\undefined
\def\Orb{\mathhexbox20D}
\fi

% Quotes.
\chardef\quotedblleft="5C
\chardef\quotedblright=`\"
\chardef\quoteleft=`\`
\chardef\quoteright=`\'


\message{page headings,}

\newskip\titlepagetopglue \titlepagetopglue = 1.5in
\newskip\titlepagebottomglue \titlepagebottomglue = 2pc

% First the title page.  Must do @@settitle before @@titlepage.
\newif\ifseenauthor
\newif\iffinishedtitlepage

% Do an implicit @@contents or @@shortcontents after @@end titlepage if the
% user says @@setcontentsaftertitlepage or @@setshortcontentsaftertitlepage.
%
\newif\ifsetcontentsaftertitlepage
 \let\setcontentsaftertitlepage = \setcontentsaftertitlepagetrue
\newif\ifsetshortcontentsaftertitlepage
 \let\setshortcontentsaftertitlepage = \setshortcontentsaftertitlepagetrue

\parseargdef\shorttitlepage{\begingroup\hbox{}\vskip 1.5in \chaprm \centerline{#1}%
        \endgroup\page\hbox{}\page}

\envdef\titlepage{%
  % Open one extra group, as we want to close it in the middle of \Etitlepage.
  \begingroup
    \parindent=0pt \textfonts
    % Leave some space at the very top of the page.
    \vglue\titlepagetopglue
    % No rule at page bottom unless we print one at the top with @@title.
    \finishedtitlepagetrue
    %
    % Most title ``pages'' are actually two pages long, with space
    % at the top of the second.  We don't want the ragged left on the second.
    \let\oldpage = \page
    \def\page{%
      \iffinishedtitlepage\else
	 \finishtitlepage
      \fi
      \let\page = \oldpage
      \page
      \null
    }%
}

\def\Etitlepage{%
    \iffinishedtitlepage\else
	\finishtitlepage
    \fi
    % It is important to do the page break before ending the group,
    % because the headline and footline are only empty inside the group.
    % If we use the new definition of \page, we always get a blank page
    % after the title page, which we certainly don't want.
    \oldpage
  \endgroup
  %
  % Need this before the \...aftertitlepage checks so that if they are
  % in effect the toc pages will come out with page numbers.
  \HEADINGSon
  %
  % If they want short, they certainly want long too.
  \ifsetshortcontentsaftertitlepage
    \shortcontents
    \contents
    \global\let\shortcontents = \relax
    \global\let\contents = \relax
  \fi
  %
  \ifsetcontentsaftertitlepage
    \contents
    \global\let\contents = \relax
    \global\let\shortcontents = \relax
  \fi
}

\def\finishtitlepage{%
  \vskip4pt \hrule height 2pt width \hsize
  \vskip\titlepagebottomglue
  \finishedtitlepagetrue
}

%%% Macros to be used within @@titlepage:

\let\subtitlerm=\tenrm
\def\subtitlefont{\subtitlerm \normalbaselineskip = 13pt \normalbaselines}

\parseargdef\title{%
  \checkenv\titlepage
  \leftline{\titlefonts\rmisbold #1}
  % print a rule at the page bottom also.
  \finishedtitlepagefalse
  \vskip4pt \hrule height 4pt width \hsize \vskip4pt
}

\parseargdef\subtitle{%
  \checkenv\titlepage
  {\subtitlefont \rightline{#1}}%
}

% @@author should come last, but may come many times.
% It can also be used inside @@quotation.
%
\parseargdef\author{%
  \def\temp{\quotation}%
  \ifx\thisenv\temp
    \def\quotationauthor{#1}% printed in \Equotation.
  \else
    \checkenv\titlepage
    \ifseenauthor\else \vskip 0pt plus 1filll \seenauthortrue \fi
    {\secfonts\rmisbold \leftline{#1}}%
  \fi
}


%%% Set up page headings and footings.

\let\thispage=\folio

\newtoks\evenheadline    % headline on even pages
\newtoks\oddheadline     % headline on odd pages
\newtoks\evenfootline    % footline on even pages
\newtoks\oddfootline     % footline on odd pages

% Now make TeX use those variables
\headline={{\textfonts\rm \ifodd\pageno \the\oddheadline
                            \else \the\evenheadline \fi}}
\footline={{\textfonts\rm \ifodd\pageno \the\oddfootline
                            \else \the\evenfootline \fi}\HEADINGShook}
\let\HEADINGShook=\relax

% Commands to set those variables.
% For example, this is what  @@headings on  does
% @@evenheading @@thistitle|@@thispage|@@thischapter
% @@oddheading @@thischapter|@@thispage|@@thistitle
% @@evenfooting @@thisfile||
% @@oddfooting ||@@thisfile


\def\evenheading{\parsearg\evenheadingxxx}
\def\evenheadingxxx #1{\evenheadingyyy #1\|\|\|\|\finish}
\def\evenheadingyyy #1\|#2\|#3\|#4\finish{%
\global\evenheadline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\def\oddheading{\parsearg\oddheadingxxx}
\def\oddheadingxxx #1{\oddheadingyyy #1\|\|\|\|\finish}
\def\oddheadingyyy #1\|#2\|#3\|#4\finish{%
\global\oddheadline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\parseargdef\everyheading{\oddheadingxxx{#1}\evenheadingxxx{#1}}%

\def\evenfooting{\parsearg\evenfootingxxx}
\def\evenfootingxxx #1{\evenfootingyyy #1\|\|\|\|\finish}
\def\evenfootingyyy #1\|#2\|#3\|#4\finish{%
\global\evenfootline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\def\oddfooting{\parsearg\oddfootingxxx}
\def\oddfootingxxx #1{\oddfootingyyy #1\|\|\|\|\finish}
\def\oddfootingyyy #1\|#2\|#3\|#4\finish{%
  \global\oddfootline = {\rlap{\centerline{#2}}\line{#1\hfil#3}}%
  %
  % Leave some space for the footline.  Hopefully ok to assume
  % @@evenfooting will not be used by itself.
  \global\advance\pageheight by -12pt
  \global\advance\vsize by -12pt
}

\parseargdef\everyfooting{\oddfootingxxx{#1}\evenfootingxxx{#1}}

% @@evenheadingmarks top     \thischapter <- chapter at the top of a page
% @@evenheadingmarks bottom  \thischapter <- chapter at the bottom of a page
%
% The same set of arguments for:
%
% @@oddheadingmarks
% @@evenfootingmarks
% @@oddfootingmarks
% @@everyheadingmarks
% @@everyfootingmarks

\def\evenheadingmarks{\headingmarks{even}{heading}}
\def\oddheadingmarks{\headingmarks{odd}{heading}}
\def\evenfootingmarks{\headingmarks{even}{footing}}
\def\oddfootingmarks{\headingmarks{odd}{footing}}
\def\everyheadingmarks#1 {\headingmarks{even}{heading}{#1}
                          \headingmarks{odd}{heading}{#1} }
\def\everyfootingmarks#1 {\headingmarks{even}{footing}{#1}
                          \headingmarks{odd}{footing}{#1} }
% #1 = even/odd, #2 = heading/footing, #3 = top/bottom.
\def\headingmarks#1#2#3 {%
  \expandafter\let\expandafter\temp \csname get#3headingmarks\endcsname
  \global\expandafter\let\csname get#1#2marks\endcsname \temp
}

\everyheadingmarks bottom
\everyfootingmarks bottom

% @@headings double      turns headings on for double-sided printing.
% @@headings single      turns headings on for single-sided printing.
% @@headings off         turns them off.
% @@headings on          same as @@headings double, retained for compatibility.
% @@headings after       turns on double-sided headings after this page.
% @@headings doubleafter turns on double-sided headings after this page.
% @@headings singleafter turns on single-sided headings after this page.
% By default, they are off at the start of a document,
% and turned `on' after @@end titlepage.

\def\headings #1 {\csname HEADINGS#1\endcsname}

\def\HEADINGSoff{%
\global\evenheadline={\hfil} \global\evenfootline={\hfil}
\global\oddheadline={\hfil} \global\oddfootline={\hfil}}
\HEADINGSoff
% When we turn headings on, set the page number to 1.
% For double-sided printing, put current file name in lower left corner,
% chapter name on inside top of right hand pages, document
% title on inside top of left hand pages, and page numbers on outside top
% edge of all pages.
\def\HEADINGSdouble{%
\global\pageno=1
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\folio\hfil\thistitle}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chapoddpage
}
\let\contentsalignmacro = \chappager

% For single-sided printing, chapter title goes across top left of page,
% page number on top right.
\def\HEADINGSsingle{%
\global\pageno=1
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\thischapter\hfil\folio}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chappager
}
\def\HEADINGSon{\HEADINGSdouble}

\def\HEADINGSafter{\let\HEADINGShook=\HEADINGSdoublex}
\let\HEADINGSdoubleafter=\HEADINGSafter
\def\HEADINGSdoublex{%
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\folio\hfil\thistitle}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chapoddpage
}

\def\HEADINGSsingleafter{\let\HEADINGShook=\HEADINGSsinglex}
\def\HEADINGSsinglex{%
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\thischapter\hfil\folio}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chappager
}

% Subroutines used in generating headings
% This produces Day Month Year style of output.
% Only define if not already defined, in case a txi-??.tex file has set
% up a different format (e.g., txi-cs.tex does this).
\ifx\today\undefined
\def\today{%
  \number\day\space
  \ifcase\month
  \or\putwordMJan\or\putwordMFeb\or\putwordMMar\or\putwordMApr
  \or\putwordMMay\or\putwordMJun\or\putwordMJul\or\putwordMAug
  \or\putwordMSep\or\putwordMOct\or\putwordMNov\or\putwordMDec
  \fi
  \space\number\year}
\fi

% @@settitle line...  specifies the title of the document, for headings.
% It generates no output of its own.
\def\thistitle{\putwordNoTitle}
\def\settitle{\parsearg{\gdef\thistitle}}


\message{tables,}
% Tables -- @@table, @@ftable, @@vtable, @@item(x).

% default indentation of table text
\newdimen\tableindent \tableindent=.8in
% default indentation of @@itemize and @@enumerate text
\newdimen\itemindent  \itemindent=.3in
% margin between end of table item and start of table text.
\newdimen\itemmargin  \itemmargin=.1in

% used internally for \itemindent minus \itemmargin
\newdimen\itemmax

% Note @@table, @@ftable, and @@vtable define @@item, @@itemx, etc., with
% these defs.
% They also define \itemindex
% to index the item name in whatever manner is desired (perhaps none).

\newif\ifitemxneedsnegativevskip

\def\itemxpar{\par\ifitemxneedsnegativevskip\nobreak\vskip-\parskip\nobreak\fi}

\def\internalBitem{\smallbreak \parsearg\itemzzz}
\def\internalBitemx{\itemxpar \parsearg\itemzzz}

\def\itemzzz #1{\begingroup %
  \advance\hsize by -\rightskip
  \advance\hsize by -\tableindent
  \setbox0=\hbox{\itemindicate{#1}}%
  \itemindex{#1}%
  \nobreak % This prevents a break before @@itemx.
  %
  % If the item text does not fit in the space we have, put it on a line
  % by itself, and do not allow a page break either before or after that
  % line.  We do not start a paragraph here because then if the next
  % command is, e.g., @@kindex, the whatsit would get put into the
  % horizontal list on a line by itself, resulting in extra blank space.
  \ifdim \wd0>\itemmax
    %
    % Make this a paragraph so we get the \parskip glue and wrapping,
    % but leave it ragged-right.
    \begingroup
      \advance\leftskip by-\tableindent
      \advance\hsize by\tableindent
      \advance\rightskip by0pt plus1fil
      \leavevmode\unhbox0\par
    \endgroup
    %
    % We're going to be starting a paragraph, but we don't want the
    % \parskip glue -- logically it's part of the @@item we just started.
    \nobreak \vskip-\parskip
    %
    % Stop a page break at the \parskip glue coming up.  However, if
    % what follows is an environment such as @@example, there will be no
    % \parskip glue; then the negative vskip we just inserted would
    % cause the example and the item to crash together.  So we use this
    % bizarre value of 10001 as a signal to \aboveenvbreak to insert
    % \parskip glue after all.  Section titles are handled this way also.
    %
    \penalty 10001
    \endgroup
    \itemxneedsnegativevskipfalse
  \else
    % The item text fits into the space.  Start a paragraph, so that the
    % following text (if any) will end up on the same line.
    \noindent
    % Do this with kerns and \unhbox so that if there is a footnote in
    % the item text, it can migrate to the main vertical list and
    % eventually be printed.
    \nobreak\kern-\tableindent
    \dimen0 = \itemmax  \advance\dimen0 by \itemmargin \advance\dimen0 by -\wd0
    \unhbox0
    \nobreak\kern\dimen0
    \endgroup
    \itemxneedsnegativevskiptrue
  \fi
}

\def\item{\errmessage{@@item while not in a list environment}}
\def\itemx{\errmessage{@@itemx while not in a list environment}}

% @@table, @@ftable, @@vtable.
\envdef\table{%
  \let\itemindex\gobble
  \tablecheck{table}%
}
\envdef\ftable{%
  \def\itemindex ##1{\doind {fn}{\code{##1}}}%
  \tablecheck{ftable}%
}
\envdef\vtable{%
  \def\itemindex ##1{\doind {vr}{\code{##1}}}%
  \tablecheck{vtable}%
}
\def\tablecheck#1{%
  \ifnum \the\catcode`\^^M=\active
    \endgroup
    \errmessage{This command won't work in this context; perhaps the problem is
      that we are \inenvironment\thisenv}%
    \def\next{\doignore{#1}}%
  \else
    \let\next\tablex
  \fi
  \next
}
\def\tablex#1{%
  \def\itemindicate{#1}%
  \parsearg\tabley
}
\def\tabley#1{%
  {%
    \makevalueexpandable
    \edef\temp{\noexpand\tablez #1\space\space\space}%
    \expandafter
  }\temp \endtablez
}
\def\tablez #1 #2 #3 #4\endtablez{%
  \aboveenvbreak
  \ifnum 0#1>0 \advance \leftskip by #1\mil \fi
  \ifnum 0#2>0 \tableindent=#2\mil \fi
  \ifnum 0#3>0 \advance \rightskip by #3\mil \fi
  \itemmax=\tableindent
  \advance \itemmax by -\itemmargin
  \advance \leftskip by \tableindent
  \exdentamount=\tableindent
  \parindent = 0pt
  \parskip = \smallskipamount
  \ifdim \parskip=0pt \parskip=2pt \fi
  \let\item = \internalBitem
  \let\itemx = \internalBitemx
}
\def\Etable{\endgraf\afterenvbreak}
\let\Eftable\Etable
\let\Evtable\Etable
\let\Eitemize\Etable
\let\Eenumerate\Etable

% This is the counter used by @@enumerate, which is really @@itemize

\newcount \itemno

\envdef\itemize{\parsearg\doitemize}

\def\doitemize#1{%
  \aboveenvbreak
  \itemmax=\itemindent
  \advance\itemmax by -\itemmargin
  \advance\leftskip by \itemindent
  \exdentamount=\itemindent
  \parindent=0pt
  \parskip=\smallskipamount
  \ifdim\parskip=0pt \parskip=2pt \fi
  %
  % Try typesetting the item mark that if the document erroneously says
  % something like @@itemize @@samp (intending @@table), there's an error
  % right away at the @@itemize.  It's not the best error message in the
  % world, but it's better than leaving it to the @@item.  This means if
  % the user wants an empty mark, they have to say @@w{} not just @@w.
  \def\itemcontents{#1}%
  \setbox0 = \hbox{\itemcontents}%
  %
  % @@itemize with no arg is equivalent to @@itemize @@bullet.
  \ifx\itemcontents\empty\def\itemcontents{\bullet}\fi
  %
  \let\item=\itemizeitem
}

% Definition of @@item while inside @@itemize and @@enumerate.
%
\def\itemizeitem{%
  \advance\itemno by 1  % for enumerations
  {\let\par=\endgraf \smallbreak}% reasonable place to break
  {%
   % If the document has an @@itemize directly after a section title, a
   % \nobreak will be last on the list, and \sectionheading will have
   % done a \vskip-\parskip.  In that case, we don't want to zero
   % parskip, or the item text will crash with the heading.  On the
   % other hand, when there is normal text preceding the item (as there
   % usually is), we do want to zero parskip, or there would be too much
   % space.  In that case, we won't have a \nobreak before.  At least
   % that's the theory.
   \ifnum\lastpenalty<10000 \parskip=0in \fi
   \noindent
   \hbox to 0pt{\hss \itemcontents \kern\itemmargin}%
   %
   \vadjust{\penalty 1200}}% not good to break after first line of item.
  \flushcr
}

% \splitoff TOKENS\endmark defines \first to be the first token in
% TOKENS, and \rest to be the remainder.
%
\def\splitoff#1#2\endmark{\def\first{#1}\def\rest{#2}}%

% Allow an optional argument of an uppercase letter, lowercase letter,
% or number, to specify the first label in the enumerated list.  No
% argument is the same as `1'.
%
\envparseargdef\enumerate{\enumeratey #1  \endenumeratey}
\def\enumeratey #1 #2\endenumeratey{%
  % If we were given no argument, pretend we were given `1'.
  \def\thearg{#1}%
  \ifx\thearg\empty \def\thearg{1}\fi
  %
  % Detect if the argument is a single token.  If so, it might be a
  % letter.  Otherwise, the only valid thing it can be is a number.
  % (We will always have one token, because of the test we just made.
  % This is a good thing, since \splitoff doesn't work given nothing at
  % all -- the first parameter is undelimited.)
  \expandafter\splitoff\thearg\endmark
  \ifx\rest\empty
    % Only one token in the argument.  It could still be anything.
    % A ``lowercase letter'' is one whose \lccode is nonzero.
    % An ``uppercase letter'' is one whose \lccode is both nonzero, and
    %   not equal to itself.
    % Otherwise, we assume it's a number.
    %
    % We need the \relax at the end of the \ifnum lines to stop TeX from
    % continuing to look for a <number>.
    %
    \ifnum\lccode\expandafter`\thearg=0\relax
      \numericenumerate % a number (we hope)
    \else
      % It's a letter.
      \ifnum\lccode\expandafter`\thearg=\expandafter`\thearg\relax
        \lowercaseenumerate % lowercase letter
      \else
        \uppercaseenumerate % uppercase letter
      \fi
    \fi
  \else
    % Multiple tokens in the argument.  We hope it's a number.
    \numericenumerate
  \fi
}

% An @@enumerate whose labels are integers.  The starting integer is
% given in \thearg.
%
\def\numericenumerate{%
  \itemno = \thearg
  \startenumeration{\the\itemno}%
}

% The starting (lowercase) letter is in \thearg.
\def\lowercaseenumerate{%
  \itemno = \expandafter`\thearg
  \startenumeration{%
    % Be sure we're not beyond the end of the alphabet.
    \ifnum\itemno=0
      \errmessage{No more lowercase letters in @@enumerate; get a bigger
                  alphabet}%
    \fi
    \char\lccode\itemno
  }%
}

% The starting (uppercase) letter is in \thearg.
\def\uppercaseenumerate{%
  \itemno = \expandafter`\thearg
  \startenumeration{%
    % Be sure we're not beyond the end of the alphabet.
    \ifnum\itemno=0
      \errmessage{No more uppercase letters in @@enumerate; get a bigger
                  alphabet}
    \fi
    \char\uccode\itemno
  }%
}

% Call \doitemize, adding a period to the first argument and supplying the
% common last two arguments.  Also subtract one from the initial value in
% \itemno, since @@item increments \itemno.
%
\def\startenumeration#1{%
  \advance\itemno by -1
  \doitemize{#1.}\flushcr
}

% @@alphaenumerate and @@capsenumerate are abbreviations for giving an arg
% to @@enumerate.
%
\def\alphaenumerate{\enumerate{a}}
\def\capsenumerate{\enumerate{A}}
\def\Ealphaenumerate{\Eenumerate}
\def\Ecapsenumerate{\Eenumerate}


% @@multitable macros
% Amy Hendrickson, 8/18/94, 3/6/96
%
% @@multitable ... @@end multitable will make as many columns as desired.
% Contents of each column will wrap at width given in preamble.  Width
% can be specified either with sample text given in a template line,
% or in percent of \hsize, the current width of text on page.

% Table can continue over pages but will only break between lines.

% To make preamble:
%
% Either define widths of columns in terms of percent of \hsize:
%   @@multitable @@columnfractions .25 .3 .45
%   @@item ...
%
%   Numbers following @@columnfractions are the percent of the total
%   current hsize to be used for each column. You may use as many
%   columns as desired.


% Or use a template:
%   @@multitable {Column 1 template} {Column 2 template} {Column 3 template}
%   @@item ...
%   using the widest term desired in each column.

% Each new table line starts with @@item, each subsequent new column
% starts with @@tab. Empty columns may be produced by supplying @@tab's
% with nothing between them for as many times as empty columns are needed,
% ie, @@tab@@tab@@tab will produce two empty columns.

% @@item, @@tab do not need to be on their own lines, but it will not hurt
% if they are.

% Sample multitable:

%   @@multitable {Column 1 template} {Column 2 template} {Column 3 template}
%   @@item first col stuff @@tab second col stuff @@tab third col
%   @@item
%   first col stuff
%   @@tab
%   second col stuff
%   @@tab
%   third col
%   @@item first col stuff @@tab second col stuff
%   @@tab Many paragraphs of text may be used in any column.
%
%         They will wrap at the width determined by the template.
%   @@item@@tab@@tab This will be in third column.
%   @@end multitable

% Default dimensions may be reset by user.
% @@multitableparskip is vertical space between paragraphs in table.
% @@multitableparindent is paragraph indent in table.
% @@multitablecolmargin is horizontal space to be left between columns.
% @@multitablelinespace is space to leave between table items, baseline
%                                                            to baseline.
%   0pt means it depends on current normal line spacing.
%
\newskip\multitableparskip
\newskip\multitableparindent
\newdimen\multitablecolspace
\newskip\multitablelinespace
\multitableparskip=0pt
\multitableparindent=6pt
\multitablecolspace=12pt
\multitablelinespace=0pt

% Macros used to set up halign preamble:
%
\let\endsetuptable\relax
\def\xendsetuptable{\endsetuptable}
\let\columnfractions\relax
\def\xcolumnfractions{\columnfractions}
\newif\ifsetpercent

% #1 is the @@columnfraction, usually a decimal number like .5, but might
% be just 1.  We just use it, whatever it is.
%
\def\pickupwholefraction#1 {%
  \global\advance\colcount by 1
  \expandafter\xdef\csname col\the\colcount\endcsname{#1\hsize}%
  \setuptable
}

\newcount\colcount
\def\setuptable#1{%
  \def\firstarg{#1}%
  \ifx\firstarg\xendsetuptable
    \let\go = \relax
  \else
    \ifx\firstarg\xcolumnfractions
      \global\setpercenttrue
    \else
      \ifsetpercent
         \let\go\pickupwholefraction
      \else
         \global\advance\colcount by 1
         \setbox0=\hbox{#1\unskip\space}% Add a normal word space as a
                   % separator; typically that is always in the input, anyway.
         \expandafter\xdef\csname col\the\colcount\endcsname{\the\wd0}%
      \fi
    \fi
    \ifx\go\pickupwholefraction
      % Put the argument back for the \pickupwholefraction call, so
      % we'll always have a period there to be parsed.
      \def\go{\pickupwholefraction#1}%
    \else
      \let\go = \setuptable
    \fi%
  \fi
  \go
}

% multitable-only commands.
%
% @@headitem starts a heading row, which we typeset in bold.
% Assignments have to be global since we are inside the implicit group
% of an alignment entry.  \everycr resets \everytab so we don't have to
% undo it ourselves.
\def\headitemfont{\b}% for people to use in the template row; not changeable
\def\headitem{%
  \checkenv\multitable
  \crcr
  \global\everytab={\bf}% can't use \headitemfont since the parsing differs
  \the\everytab % for the first item
}%
%
% A \tab used to include \hskip1sp.  But then the space in a template
% line is not enough.  That is bad.  So let's go back to just `&' until
% we again encounter the problem the 1sp was intended to solve.
%					--karl, nathan@@acm.org, 20apr99.
\def\tab{\checkenv\multitable &\the\everytab}%

% @@multitable ... @@end multitable definitions:
%
\newtoks\everytab  % insert after every tab.
%
\envdef\multitable{%
  \vskip\parskip
  \startsavinginserts
  %
  % @@item within a multitable starts a normal row.
  % We use \def instead of \let so that if one of the multitable entries
  % contains an @@itemize, we don't choke on the \item (seen as \crcr aka
  % \endtemplate) expanding \doitemize.
  \def\item{\crcr}%
  %
  \tolerance=9500
  \hbadness=9500
  \setmultitablespacing
  \parskip=\multitableparskip
  \parindent=\multitableparindent
  \overfullrule=0pt
  \global\colcount=0
  %
  \everycr = {%
    \noalign{%
      \global\everytab={}%
      \global\colcount=0 % Reset the column counter.
      % Check for saved footnotes, etc.
      \checkinserts
      % Keeps underfull box messages off when table breaks over pages.
      %\filbreak
	% Maybe so, but it also creates really weird page breaks when the
	% table breaks over pages. Wouldn't \vfil be better?  Wait until the
	% problem manifests itself, so it can be fixed for real --karl.
    }%
  }%
  %
  \parsearg\domultitable
}
\def\domultitable#1{%
  % To parse everything between @@multitable and @@item:
  \setuptable#1 \endsetuptable
  %
  % This preamble sets up a generic column definition, which will
  % be used as many times as user calls for columns.
  % \vtop will set a single line and will also let text wrap and
  % continue for many paragraphs if desired.
  \halign\bgroup &%
    \global\advance\colcount by 1
    \multistrut
    \vtop{%
      % Use the current \colcount to find the correct column width:
      \hsize=\expandafter\csname col\the\colcount\endcsname
      %
      % In order to keep entries from bumping into each other
      % we will add a \leftskip of \multitablecolspace to all columns after
      % the first one.
      %
      % If a template has been used, we will add \multitablecolspace
      % to the width of each template entry.
      %
      % If the user has set preamble in terms of percent of \hsize we will
      % use that dimension as the width of the column, and the \leftskip
      % will keep entries from bumping into each other.  Table will start at
      % left margin and final column will justify at right margin.
      %
      % Make sure we don't inherit \rightskip from the outer environment.
      \rightskip=0pt
      \ifnum\colcount=1
	% The first column will be indented with the surrounding text.
	\advance\hsize by\leftskip
      \else
	\ifsetpercent \else
	  % If user has not set preamble in terms of percent of \hsize
	  % we will advance \hsize by \multitablecolspace.
	  \advance\hsize by \multitablecolspace
	\fi
       % In either case we will make \leftskip=\multitablecolspace:
      \leftskip=\multitablecolspace
      \fi
      % Ignoring space at the beginning and end avoids an occasional spurious
      % blank line, when TeX decides to break the line at the space before the
      % box from the multistrut, so the strut ends up on a line by itself.
      % For example:
      % @@multitable @@columnfractions .11 .89
      % @@item @@code{#}
      % @@tab Legal holiday which is valid in major parts of the whole country.
      % Is automatically provided with highlighting sequences respectively
      % marking characters.
      \noindent\ignorespaces##\unskip\multistrut
    }\cr
}
\def\Emultitable{%
  \crcr
  \egroup % end the \halign
  \global\setpercentfalse
}

\def\setmultitablespacing{%
  \def\multistrut{\strut}% just use the standard line spacing
  %
  % Compute \multitablelinespace (if not defined by user) for use in
  % \multitableparskip calculation.  We used define \multistrut based on
  % this, but (ironically) that caused the spacing to be off.
  % See bug-texinfo report from Werner Lemberg, 31 Oct 2004 12:52:20 +0100.
\ifdim\multitablelinespace=0pt
\setbox0=\vbox{X}\global\multitablelinespace=\the\baselineskip
\global\advance\multitablelinespace by-\ht0
\fi
%% Test to see if parskip is larger than space between lines of
%% table. If not, do nothing.
%%        If so, set to same dimension as multitablelinespace.
\ifdim\multitableparskip>\multitablelinespace
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi%
\ifdim\multitableparskip=0pt
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi}


\message{conditionals,}

% @@iftex, @@ifnotdocbook, @@ifnothtml, @@ifnotinfo, @@ifnotplaintext,
% @@ifnotxml always succeed.  They currently do nothing; we don't
% attempt to check whether the conditionals are properly nested.  But we
% have to remember that they are conditionals, so that @@end doesn't
% attempt to close an environment group.
%
\def\makecond#1{%
  \expandafter\let\csname #1\endcsname = \relax
  \expandafter\let\csname iscond.#1\endcsname = 1
}
\makecond{iftex}
\makecond{ifnotdocbook}
\makecond{ifnothtml}
\makecond{ifnotinfo}
\makecond{ifnotplaintext}
\makecond{ifnotxml}

% Ignore @@ignore, @@ifhtml, @@ifinfo, and the like.
%
\def\direntry{\doignore{direntry}}
\def\documentdescription{\doignore{documentdescription}}
\def\docbook{\doignore{docbook}}
\def\html{\doignore{html}}
\def\ifdocbook{\doignore{ifdocbook}}
\def\ifhtml{\doignore{ifhtml}}
\def\ifinfo{\doignore{ifinfo}}
\def\ifnottex{\doignore{ifnottex}}
\def\ifplaintext{\doignore{ifplaintext}}
\def\ifxml{\doignore{ifxml}}
\def\ignore{\doignore{ignore}}
\def\menu{\doignore{menu}}
\def\xml{\doignore{xml}}

% Ignore text until a line `@@end #1', keeping track of nested conditionals.
%
% A count to remember the depth of nesting.
\newcount\doignorecount

\def\doignore#1{\begingroup
  % Scan in ``verbatim'' mode:
  \obeylines
  \catcode`\@@ = \other
  \catcode`\{ = \other
  \catcode`\} = \other
  %
  % Make sure that spaces turn into tokens that match what \doignoretext wants.
  \spaceisspace
  %
  % Count number of #1's that we've seen.
  \doignorecount = 0
  %
  % Swallow text until we reach the matching `@@end #1'.
  \dodoignore{#1}%
}

{ \catcode`_=11 % We want to use \_STOP_ which cannot appear in texinfo source.
  \obeylines %
  %
  \gdef\dodoignore#1{%
    % #1 contains the command name as a string, e.g., `ifinfo'.
    %
    % Define a command to find the next `@@end #1'.
    \long\def\doignoretext##1^^M@@end #1{%
      \doignoretextyyy##1^^M@@#1\_STOP_}%
    %
    % And this command to find another #1 command, at the beginning of a
    % line.  (Otherwise, we would consider a line `@@c @@ifset', for
    % example, to count as an @@ifset for nesting.)
    \long\def\doignoretextyyy##1^^M@@#1##2\_STOP_{\doignoreyyy{##2}\_STOP_}%
    %
    % And now expand that command.
    \doignoretext ^^M%
  }%
}

\def\doignoreyyy#1{%
  \def\temp{#1}%
  \ifx\temp\empty			% Nothing found.
    \let\next\doignoretextzzz
  \else					% Found a nested condition, ...
    \advance\doignorecount by 1
    \let\next\doignoretextyyy		% ..., look for another.
    % If we're here, #1 ends with ^^M\ifinfo (for example).
  \fi
  \next #1% the token \_STOP_ is present just after this macro.
}

% We have to swallow the remaining "\_STOP_".
%
\def\doignoretextzzz#1{%
  \ifnum\doignorecount = 0	% We have just found the outermost @@end.
    \let\next\enddoignore
  \else				% Still inside a nested condition.
    \advance\doignorecount by -1
    \let\next\doignoretext      % Look for the next @@end.
  \fi
  \next
}

% Finish off ignored text.
{ \obeylines%
  % Ignore anything after the last `@@end #1'; this matters in verbatim
  % environments, where otherwise the newline after an ignored conditional
  % would result in a blank line in the output.
  \gdef\enddoignore#1^^M{\endgroup\ignorespaces}%
}


% @@set VAR sets the variable VAR to an empty value.
% @@set VAR REST-OF-LINE sets VAR to the value REST-OF-LINE.
%
% Since we want to separate VAR from REST-OF-LINE (which might be
% empty), we can't just use \parsearg; we have to insert a space of our
% own to delimit the rest of the line, and then take it out again if we
% didn't need it.
% We rely on the fact that \parsearg sets \catcode`\ =10.
%
\parseargdef\set{\setyyy#1 \endsetyyy}
\def\setyyy#1 #2\endsetyyy{%
  {%
    \makevalueexpandable
    \def\temp{#2}%
    \edef\next{\gdef\makecsname{SET#1}}%
    \ifx\temp\empty
      \next{}%
    \else
      \setzzz#2\endsetzzz
    \fi
  }%
}
% Remove the trailing space \setxxx inserted.
\def\setzzz#1 \endsetzzz{\next{#1}}

% @@clear VAR clears (i.e., unsets) the variable VAR.
%
\parseargdef\clear{%
  {%
    \makevalueexpandable
    \global\expandafter\let\csname SET#1\endcsname=\relax
  }%
}

% @@value{foo} gets the text saved in variable foo.
\def\value{\begingroup\makevalueexpandable\valuexxx}
\def\valuexxx#1{\expandablevalue{#1}\endgroup}
{
  \catcode`\- = \active \catcode`\_ = \active
  %
  \gdef\makevalueexpandable{%
    \let\value = \expandablevalue
    % We don't want these characters active, ...
    \catcode`\-=\other \catcode`\_=\other
    % ..., but we might end up with active ones in the argument if
    % we're called from @@code, as @@code{@@value{foo-bar_}}, though.
    % So \let them to their normal equivalents.
    \let-\realdash \let_\normalunderscore
  }
}

% We have this subroutine so that we can handle at least some @@value's
% properly in indexes (we call \makevalueexpandable in \indexdummies).
% The command has to be fully expandable (if the variable is set), since
% the result winds up in the index file.  This means that if the
% variable's value contains other Texinfo commands, it's almost certain
% it will fail (although perhaps we could fix that with sufficient work
% to do a one-level expansion on the result, instead of complete).
%
\def\expandablevalue#1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    {[No value for ``#1'']}%
    \message{Variable `#1', used in @@value, is not set.}%
  \else
    \csname SET#1\endcsname
  \fi
}

% @@ifset VAR ... @@end ifset reads the `...' iff VAR has been defined
% with @@set.
%
% To get special treatment of `@@end ifset,' call \makeond and the redefine.
%
\makecond{ifset}
\def\ifset{\parsearg{\doifset{\let\next=\ifsetfail}}}
\def\doifset#1#2{%
  {%
    \makevalueexpandable
    \let\next=\empty
    \expandafter\ifx\csname SET#2\endcsname\relax
      #1% If not set, redefine \next.
    \fi
    \expandafter
  }\next
}
\def\ifsetfail{\doignore{ifset}}

% @@ifclear VAR ... @@end ifclear reads the `...' iff VAR has never been
% defined with @@set, or has been undefined with @@clear.
%
% The `\else' inside the `\doifset' parameter is a trick to reuse the
% above code: if the variable is not set, do nothing, if it is set,
% then redefine \next to \ifclearfail.
%
\makecond{ifclear}
\def\ifclear{\parsearg{\doifset{\else \let\next=\ifclearfail}}}
\def\ifclearfail{\doignore{ifclear}}

% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory=\comment

% @@defininfoenclose.
\let\definfoenclose=\comment


\message{indexing,}
% Index generation facilities

% Define \newwrite to be identical to plain tex's \newwrite
% except not \outer, so it can be used within macros and \if's.
\edef\newwrite{\makecsname{ptexnewwrite}}

% \newindex {foo} defines an index named foo.
% It automatically defines \fooindex such that
% \fooindex ...rest of line... puts an entry in the index foo.
% It also defines \fooindfile to be the number of the output channel for
% the file that accumulates this index.  The file's extension is foo.
% The name of an index should be no more than 2 characters long
% for the sake of vms.
%
\def\newindex#1{%
  \iflinks
    \expandafter\newwrite \csname#1indfile\endcsname
    \openout \csname#1indfile\endcsname \jobname.#1 % Open the file
  \fi
  \expandafter\xdef\csname#1index\endcsname{%     % Define @@#1index
    \noexpand\doindex{#1}}
}

% @@defindex foo  ==  \newindex{foo}
%
\def\defindex{\parsearg\newindex}

% Define @@defcodeindex, like @@defindex except put all entries in @@code.
%
\def\defcodeindex{\parsearg\newcodeindex}
%
\def\newcodeindex#1{%
  \iflinks
    \expandafter\newwrite \csname#1indfile\endcsname
    \openout \csname#1indfile\endcsname \jobname.#1
  \fi
  \expandafter\xdef\csname#1index\endcsname{%
    \noexpand\docodeindex{#1}}%
}


% @@synindex foo bar    makes index foo feed into index bar.
% Do this instead of @@defindex foo if you don't want it as a separate index.
%
% @@syncodeindex foo bar   similar, but put all entries made for index foo
% inside @@code.
%
\def\synindex#1 #2 {\dosynindex\doindex{#1}{#2}}
\def\syncodeindex#1 #2 {\dosynindex\docodeindex{#1}{#2}}

% #1 is \doindex or \docodeindex, #2 the index getting redefined (foo),
% #3 the target index (bar).
\def\dosynindex#1#2#3{%
  % Only do \closeout if we haven't already done it, else we'll end up
  % closing the target index.
  \expandafter \ifx\csname donesynindex#2\endcsname \relax
    % The \closeout helps reduce unnecessary open files; the limit on the
    % Acorn RISC OS is a mere 16 files.
    \expandafter\closeout\csname#2indfile\endcsname
    \expandafter\let\csname donesynindex#2\endcsname = 1
  \fi
  % redefine \fooindfile:
  \expandafter\let\expandafter\temp\expandafter=\csname#3indfile\endcsname
  \expandafter\let\csname#2indfile\endcsname=\temp
  % redefine \fooindex:
  \expandafter\xdef\csname#2index\endcsname{\noexpand#1{#3}}%
}

% Define \doindex, the driver for all \fooindex macros.
% Argument #1 is generated by the calling \fooindex macro,
%  and it is "foo", the name of the index.

% \doindex just uses \parsearg; it calls \doind for the actual work.
% This is because \doind is more useful to call from other macros.

% There is also \dosubind {index}{topic}{subtopic}
% which makes an entry in a two-level index such as the operation index.

\def\doindex#1{\edef\indexname{#1}\parsearg\singleindexer}
\def\singleindexer #1{\doind{\indexname}{#1}}

% like the previous two, but they put @@code around the argument.
\def\docodeindex#1{\edef\indexname{#1}\parsearg\singlecodeindexer}
\def\singlecodeindexer #1{\doind{\indexname}{\code{#1}}}

% Take care of Texinfo commands that can appear in an index entry.
% Since there are some commands we want to expand, and others we don't,
% we have to laboriously prevent expansion for those that we don't.
%
\def\indexdummies{%
  \escapechar = `\\     % use backslash in output files.
  \def\@@{@@}% change to @@@@ when we switch to @@ as escape char in index files.
  \def\ {\realbackslash\space }%
  %
  % Need these in case \tex is in effect and \{ is a \delimiter again.
  % But can't use \lbracecmd and \rbracecmd because texindex assumes
  % braces and backslashes are used only as delimiters.
  \let\{ = \mylbrace
  \let\} = \myrbrace
  %
  % I don't entirely understand this, but when an index entry is
  % generated from a macro call, the \endinput which \scanmacro inserts
  % causes processing to be prematurely terminated.  This is,
  % apparently, because \indexsorttmp is fully expanded, and \endinput
  % is an expandable command.  The redefinition below makes \endinput
  % disappear altogether for that purpose -- although logging shows that
  % processing continues to some further point.  On the other hand, it
  % seems \endinput does not hurt in the printed index arg, since that
  % is still getting written without apparent harm.
  %
  % Sample source (mac-idx3.tex, reported by Graham Percival to
  % help-texinfo, 22may06):
  % @@macro funindex {WORD}
  % @@findex xyz
  % @@end macro
  % ...
  % @@funindex commtest
  %
  % The above is not enough to reproduce the bug, but it gives the flavor.
  %
  % Sample whatsit resulting:
  % .@@write3{\entry{xyz}{@@folio }{@@code {xyz@@endinput }}}
  %
  % So:
  \let\endinput = \empty
  %
  % Do the redefinitions.
  \commondummies
}

% For the aux and toc files, @@ is the escape character.  So we want to
% redefine everything using @@ as the escape character (instead of
% \realbackslash, still used for index files).  When everything uses @@,
% this will be simpler.
%
\def\atdummies{%
  \def\@@{@@@@}%
  \def\ {@@ }%
  \let\{ = \lbraceatcmd
  \let\} = \rbraceatcmd
  %
  % Do the redefinitions.
  \commondummies
  \otherbackslash
}

% Called from \indexdummies and \atdummies.
%
\def\commondummies{%
  %
  % \definedummyword defines \#1 as \string\#1\space, thus effectively
  % preventing its expansion.  This is used only for control% words,
  % not control letters, because the \space would be incorrect for
  % control characters, but is needed to separate the control word
  % from whatever follows.
  %
  % For control letters, we have \definedummyletter, which omits the
  % space.
  %
  % These can be used both for control words that take an argument and
  % those that do not.  If it is followed by {arg} in the input, then
  % that will dutifully get written to the index (or wherever).
  %
  \def\definedummyword  ##1{\def##1{\string##1\space}}%
  \def\definedummyletter##1{\def##1{\string##1}}%
  \let\definedummyaccent\definedummyletter
  %
  \commondummiesnofonts
  %
  \definedummyletter\_%
  %
  % Non-English letters.
  \definedummyword\AA
  \definedummyword\AE
  \definedummyword\DH
  \definedummyword\L
  \definedummyword\O
  \definedummyword\OE
  \definedummyword\TH
  \definedummyword\aa
  \definedummyword\ae
  \definedummyword\dh
  \definedummyword\exclamdown
  \definedummyword\l
  \definedummyword\o
  \definedummyword\oe
  \definedummyword\ordf
  \definedummyword\ordm
  \definedummyword\questiondown
  \definedummyword\ss
  \definedummyword\th
  %
  % Although these internal commands shouldn't show up, sometimes they do.
  \definedummyword\bf
  \definedummyword\gtr
  \definedummyword\hat
  \definedummyword\less
  \definedummyword\sf
  \definedummyword\sl
  \definedummyword\tclose
  \definedummyword\tt
  %
  \definedummyword\LaTeX
  \definedummyword\TeX
  %
  % Assorted special characters.
  \definedummyword\bullet
  \definedummyword\comma
  \definedummyword\copyright
  \definedummyword\registeredsymbol
  \definedummyword\dots
  \definedummyword\enddots
  \definedummyword\equiv
  \definedummyword\error
  \definedummyword\euro
  \definedummyword\guillemetleft
  \definedummyword\guillemetright
  \definedummyword\guilsinglleft
  \definedummyword\guilsinglright
  \definedummyword\expansion
  \definedummyword\minus
  \definedummyword\ogonek
  \definedummyword\pounds
  \definedummyword\point
  \definedummyword\print
  \definedummyword\quotedblbase
  \definedummyword\quotedblleft
  \definedummyword\quotedblright
  \definedummyword\quoteleft
  \definedummyword\quoteright
  \definedummyword\quotesinglbase
  \definedummyword\result
  \definedummyword\textdegree
  %
  % We want to disable all macros so that they are not expanded by \write.
  \macrolist
  %
  \normalturnoffactive
  %
  % Handle some cases of @@value -- where it does not contain any
  % (non-fully-expandable) commands.
  \makevalueexpandable
}

% \commondummiesnofonts: common to \commondummies and \indexnofonts.
%
\def\commondummiesnofonts{%
  % Control letters and accents.
  \definedummyletter\!%
  \definedummyaccent\"%
  \definedummyaccent\'%
  \definedummyletter\*%
  \definedummyaccent\,%
  \definedummyletter\.%
  \definedummyletter\/%
  \definedummyletter\:%
  \definedummyaccent\=%
  \definedummyletter\?%
  \definedummyaccent\^%
  \definedummyaccent\`%
  \definedummyaccent\~%
  \definedummyword\u
  \definedummyword\v
  \definedummyword\H
  \definedummyword\dotaccent
  \definedummyword\ogonek
  \definedummyword\ringaccent
  \definedummyword\tieaccent
  \definedummyword\ubaraccent
  \definedummyword\udotaccent
  \definedummyword\dotless
  %
  % Texinfo font commands.
  \definedummyword\b
  \definedummyword\i
  \definedummyword\r
  \definedummyword\sc
  \definedummyword\t
  %
  % Commands that take arguments.
  \definedummyword\acronym
  \definedummyword\cite
  \definedummyword\code
  \definedummyword\command
  \definedummyword\dfn
  \definedummyword\emph
  \definedummyword\env
  \definedummyword\file
  \definedummyword\kbd
  \definedummyword\key
  \definedummyword\math
  \definedummyword\option
  \definedummyword\pxref
  \definedummyword\ref
  \definedummyword\samp
  \definedummyword\strong
  \definedummyword\tie
  \definedummyword\uref
  \definedummyword\url
  \definedummyword\var
  \definedummyword\verb
  \definedummyword\w
  \definedummyword\xref
}

% \indexnofonts is used when outputting the strings to sort the index
% by, and when constructing control sequence names.  It eliminates all
% control sequences and just writes whatever the best ASCII sort string
% would be for a given command (usually its argument).
%
\def\indexnofonts{%
  % Accent commands should become @@asis.
  \def\definedummyaccent##1{\let##1\asis}%
  % We can just ignore other control letters.
  \def\definedummyletter##1{\let##1\empty}%
  % Hopefully, all control words can become @@asis.
  \let\definedummyword\definedummyaccent
  %
  \commondummiesnofonts
  %
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
  %
  \def\ { }%
  \def\@@{@@}%
  % how to handle braces?
  \def\_{\normalunderscore}%
  %
  % Non-English letters.
  \def\AA{AA}%
  \def\AE{AE}%
  \def\DH{DZZ}%
  \def\L{L}%
  \def\OE{OE}%
  \def\O{O}%
  \def\TH{ZZZ}%
  \def\aa{aa}%
  \def\ae{ae}%
  \def\dh{dzz}%
  \def\exclamdown{!}%
  \def\l{l}%
  \def\oe{oe}%
  \def\ordf{a}%
  \def\ordm{o}%
  \def\o{o}%
  \def\questiondown{?}%
  \def\ss{ss}%
  \def\th{zzz}%
  %
  \def\LaTeX{LaTeX}%
  \def\TeX{TeX}%
  %
  % Assorted special characters.
  % (The following {} will end up in the sort string, but that's ok.)
  \def\bullet{bullet}%
  \def\comma{,}%
  \def\copyright{copyright}%
  \def\registeredsymbol{R}%
  \def\dots{...}%
  \def\enddots{...}%
  \def\equiv{==}%
  \def\error{error}%
  \def\euro{euro}%
  \def\guillemetleft{<<}%
  \def\guillemetright{>>}%
  \def\guilsinglleft{<}%
  \def\guilsinglright{>}%
  \def\expansion{==>}%
  \def\minus{-}%
  \def\pounds{pounds}%
  \def\point{.}%
  \def\print{-|}%
  \def\quotedblbase{"}%
  \def\quotedblleft{"}%
  \def\quotedblright{"}%
  \def\quoteleft{`}%
  \def\quoteright{'}%
  \def\quotesinglbase{,}%
  \def\result{=>}%
  \def\textdegree{degrees}%
  %
  % We need to get rid of all macros, leaving only the arguments (if present).
  % Of course this is not nearly correct, but it is the best we can do for now.
  % makeinfo does not expand macros in the argument to @@deffn, which ends up
  % writing an index entry, and texindex isn't prepared for an index sort entry
  % that starts with \.
  %
  % Since macro invocations are followed by braces, we can just redefine them
  % to take a single TeX argument.  The case of a macro invocation that
  % goes to end-of-line is not handled.
  %
  \macrolist
}

\let\indexbackslash=0  %overridden during \printindex.
\let\SETmarginindex=\relax % put index entries in margin (undocumented)?

% Most index entries go through here, but \dosubind is the general case.
% #1 is the index name, #2 is the entry text.
\def\doind#1#2{\dosubind{#1}{#2}{}}

% Workhorse for all \fooindexes.
% #1 is name of index, #2 is stuff to put there, #3 is subentry --
% empty if called from \doind, as we usually are (the main exception
% is with most defuns, which call us directly).
%
\def\dosubind#1#2#3{%
  \iflinks
  {%
    % Store the main index entry text (including the third arg).
    \toks0 = {#2}%
    % If third arg is present, precede it with a space.
    \def\thirdarg{#3}%
    \ifx\thirdarg\empty \else
      \toks0 = \expandafter{\the\toks0 \space #3}%
    \fi
    %
    \edef\writeto{\csname#1indfile\endcsname}%
    %
    \safewhatsit\dosubindwrite
  }%
  \fi
}

% Write the entry in \toks0 to the index file:
%
\def\dosubindwrite{%
  % Put the index entry in the margin if desired.
  \ifx\SETmarginindex\relax\else
    \insert\margin{\hbox{\vrule height8pt depth3pt width0pt \the\toks0}}%
  \fi
  %
  % Remember, we are within a group.
  \indexdummies % Must do this here, since \bf, etc expand at this stage
  \def\backslashcurfont{\indexbackslash}% \indexbackslash isn't defined now
      % so it will be output as is; and it will print as backslash.
  %
  % Process the index entry with all font commands turned off, to
  % get the string to sort by.
  {\indexnofonts
   \edef\temp{\the\toks0}% need full expansion
   \xdef\indexsorttmp{\temp}%
  }%
  %
  % Set up the complete index entry, with both the sort key and
  % the original text, including any font commands.  We write
  % three arguments to \entry to the .?? file (four in the
  % subentry case), texindex reduces to two when writing the .??s
  % sorted result.
  \edef\temp{%
    \write\writeto{%
      \string\entry{\indexsorttmp}{\noexpand\folio}{\the\toks0}}%
  }%
  \temp
}

% Take care of unwanted page breaks/skips around a whatsit:
%
% If a skip is the last thing on the list now, preserve it
% by backing up by \lastskip, doing the \write, then inserting
% the skip again.  Otherwise, the whatsit generated by the
% \write or \pdfdest will make \lastskip zero.  The result is that
% sequences like this:
% @@end defun
% @@tindex whatever
% @@defun ...
% will have extra space inserted, because the \medbreak in the
% start of the @@defun won't see the skip inserted by the @@end of
% the previous defun.
%
% But don't do any of this if we're not in vertical mode.  We
% don't want to do a \vskip and prematurely end a paragraph.
%
% Avoid page breaks due to these extra skips, too.
%
% But wait, there is a catch there:
% We'll have to check whether \lastskip is zero skip.  \ifdim is not
% sufficient for this purpose, as it ignores stretch and shrink parts
% of the skip.  The only way seems to be to check the textual
% representation of the skip.
%
% The following is almost like \def\zeroskipmacro{0.0pt} except that
% the ``p'' and ``t'' characters have catcode \other, not 11 (letter).
%
\edef\zeroskipmacro{\expandafter\the\csname z@@skip\endcsname}
%
\newskip\whatsitskip
\newcount\whatsitpenalty
%
% ..., ready, GO:
%
\def\safewhatsit#1{%
\ifhmode
  #1%
\else
  % \lastskip and \lastpenalty cannot both be nonzero simultaneously.
  \whatsitskip = \lastskip
  \edef\lastskipmacro{\the\lastskip}%
  \whatsitpenalty = \lastpenalty
  %
  % If \lastskip is nonzero, that means the last item was a
  % skip.  And since a skip is discardable, that means this
  % -\whatsitskip glue we're inserting is preceded by a
  % non-discardable item, therefore it is not a potential
  % breakpoint, therefore no \nobreak needed.
  \ifx\lastskipmacro\zeroskipmacro
  \else
    \vskip-\whatsitskip
  \fi
  %
  #1%
  %
  \ifx\lastskipmacro\zeroskipmacro
    % If \lastskip was zero, perhaps the last item was a penalty, and
    % perhaps it was >=10000, e.g., a \nobreak.  In that case, we want
    % to re-insert the same penalty (values >10000 are used for various
    % signals); since we just inserted a non-discardable item, any
    % following glue (such as a \parskip) would be a breakpoint.  For example:
    %
    %   @@deffn deffn-whatever
    %   @@vindex index-whatever
    %   Description.
    % would allow a break between the index-whatever whatsit
    % and the "Description." paragraph.
    \ifnum\whatsitpenalty>9999 \penalty\whatsitpenalty \fi
  \else
    % On the other hand, if we had a nonzero \lastskip,
    % this make-up glue would be preceded by a non-discardable item
    % (the whatsit from the \write), so we must insert a \nobreak.
    \nobreak\vskip\whatsitskip
  \fi
\fi
}

% The index entry written in the file actually looks like
%  \entry {sortstring}{page}{topic}
% or
%  \entry {sortstring}{page}{topic}{subtopic}
% The texindex program reads in these files and writes files
% containing these kinds of lines:
%  \initial {c}
%     before the first topic whose initial is c
%  \entry {topic}{pagelist}
%     for a topic that is used without subtopics
%  \primary {topic}
%     for the beginning of a topic that is used with subtopics
%  \secondary {subtopic}{pagelist}
%     for each subtopic.

% Define the user-accessible indexing commands
% @@findex, @@vindex, @@kindex, @@cindex.

\def\findex {\fnindex}
\def\kindex {\kyindex}
\def\cindex {\cpindex}
\def\vindex {\vrindex}
\def\tindex {\tpindex}
\def\pindex {\pgindex}

\def\cindexsub {\begingroup\obeylines\cindexsub}
{\obeylines %
\gdef\cindexsub "#1" #2^^M{\endgroup %
\dosubind{cp}{#2}{#1}}}

% Define the macros used in formatting output of the sorted index material.

% @@printindex causes a particular index (the ??s file) to get printed.
% It does not print any chapter heading (usually an @@unnumbered).
%
\parseargdef\printindex{\begingroup
  \dobreak \chapheadingskip{10000}%
  %
  \smallfonts \rm
  \tolerance = 9500
  \plainfrenchspacing
  \everypar = {}% don't want the \kern\-parindent from indentation suppression.
  %
  % See if the index file exists and is nonempty.
  % Change catcode of @@ here so that if the index file contains
  % \initial {@@}
  % as its first line, TeX doesn't complain about mismatched braces
  % (because it thinks @@} is a control sequence).
  \catcode`\@@ = 11
  \openin 1 \jobname.#1s
  \ifeof 1
    % \enddoublecolumns gets confused if there is no text in the index,
    % and it loses the chapter title and the aux file entries for the
    % index.  The easiest way to prevent this problem is to make sure
    % there is some text.
    \putwordIndexNonexistent
  \else
    %
    % If the index file exists but is empty, then \openin leaves \ifeof
    % false.  We have to make TeX try to read something from the file, so
    % it can discover if there is anything in it.
    \read 1 to \temp
    \ifeof 1
      \putwordIndexIsEmpty
    \else
      % Index files are almost Texinfo source, but we use \ as the escape
      % character.  It would be better to use @@, but that's too big a change
      % to make right now.
      \def\indexbackslash{\backslashcurfont}%
      \catcode`\\ = 0
      \escapechar = `\\
      \begindoublecolumns
      \input \jobname.#1s
      \enddoublecolumns
    \fi
  \fi
  \closein 1
\endgroup}

% These macros are used by the sorted index file itself.
% Change them to control the appearance of the index.

\def\initial#1{{%
  % Some minor font changes for the special characters.
  \let\tentt=\sectt \let\tt=\sectt \let\sf=\sectt
  %
  % Remove any glue we may have, we'll be inserting our own.
  \removelastskip
  %
  % We like breaks before the index initials, so insert a bonus.
  \nobreak
  \vskip 0pt plus 3\baselineskip
  \penalty 0
  \vskip 0pt plus -3\baselineskip
  %
  % Typeset the initial.  Making this add up to a whole number of
  % baselineskips increases the chance of the dots lining up from column
  % to column.  It still won't often be perfect, because of the stretch
  % we need before each entry, but it's better.
  %
  % No shrink because it confuses \balancecolumns.
  \vskip 1.67\baselineskip plus .5\baselineskip
  \leftline{\secbf #1}%
  % Do our best not to break after the initial.
  \nobreak
  \vskip .33\baselineskip plus .1\baselineskip
}}

% \entry typesets a paragraph consisting of the text (#1), dot leaders, and
% then page number (#2) flushed to the right margin.  It is used for index
% and table of contents entries.  The paragraph is indented by \leftskip.
%
% A straightforward implementation would start like this:
%	\def\entry#1#2{...
% But this freezes the catcodes in the argument, and can cause problems to
% @@code, which sets - active.  This problem was fixed by a kludge---
% ``-'' was active throughout whole index, but this isn't really right.
%
% The right solution is to prevent \entry from swallowing the whole text.
%                                 --kasal, 21nov03
\def\entry{%
  \begingroup
    %
    % Start a new paragraph if necessary, so our assignments below can't
    % affect previous text.
    \par
    %
    % Do not fill out the last line with white space.
    \parfillskip = 0in
    %
    % No extra space above this paragraph.
    \parskip = 0in
    %
    % Do not prefer a separate line ending with a hyphen to fewer lines.
    \finalhyphendemerits = 0
    %
    % \hangindent is only relevant when the entry text and page number
    % don't both fit on one line.  In that case, bob suggests starting the
    % dots pretty far over on the line.  Unfortunately, a large
    % indentation looks wrong when the entry text itself is broken across
    % lines.  So we use a small indentation and put up with long leaders.
    %
    % \hangafter is reset to 1 (which is the value we want) at the start
    % of each paragraph, so we need not do anything with that.
    \hangindent = 2em
    %
    % When the entry text needs to be broken, just fill out the first line
    % with blank space.
    \rightskip = 0pt plus1fil
    %
    % A bit of stretch before each entry for the benefit of balancing
    % columns.
    \vskip 0pt plus1pt
    %
    % Swallow the left brace of the text (first parameter):
    \afterassignment\doentry
    \let\temp =
}
\def\doentry{%
    \bgroup % Instead of the swallowed brace.
      \noindent
      \aftergroup\finishentry
      % And now comes the text of the entry.
}
\def\finishentry#1{%
    % #1 is the page number.
    %
    % The following is kludged to not output a line of dots in the index if
    % there are no page numbers.  The next person who breaks this will be
    % cursed by a Unix daemon.
    \setbox\boxA = \hbox{#1}%
    \ifdim\wd\boxA = 0pt
      \ %
    \else
      %
      % If we must, put the page number on a line of its own, and fill out
      % this line with blank space.  (The \hfil is overwhelmed with the
      % fill leaders glue in \indexdotfill if the page number does fit.)
      \hfil\penalty50
      \null\nobreak\indexdotfill % Have leaders before the page number.
      %
      % The `\ ' here is removed by the implicit \unskip that TeX does as
      % part of (the primitive) \par.  Without it, a spurious underfull
      % \hbox ensues.
      \ifpdf
	\pdfgettoks#1.%
	\ \the\toksA
      \else
	\ #1%
      \fi
    \fi
    \par
  \endgroup
}

% Like plain.tex's \dotfill, except uses up at least 1 em.
\def\indexdotfill{\cleaders
  \hbox{$\mathsurround=0pt \mkern1.5mu.\mkern1.5mu$}\hskip 1em plus 1fill}

\def\primary #1{\line{#1\hfil}}

\newskip\secondaryindent \secondaryindent=0.5cm
\def\secondary#1#2{{%
  \parfillskip=0in
  \parskip=0in
  \hangindent=1in
  \hangafter=1
  \noindent\hskip\secondaryindent\hbox{#1}\indexdotfill
  \ifpdf
    \pdfgettoks#2.\ \the\toksA % The page number ends the paragraph.
  \else
    #2
  \fi
  \par
}}

% Define two-column mode, which we use to typeset indexes.
% Adapted from the TeXbook, page 416, which is to say,
% the manmac.tex format used to print the TeXbook itself.
\catcode`\@@=11

\newbox\partialpage
\newdimen\doublecolumnhsize

\def\begindoublecolumns{\begingroup % ended by \enddoublecolumns
  % Grab any single-column material above us.
  \output = {%
    %
    % Here is a possibility not foreseen in manmac: if we accumulate a
    % whole lot of material, we might end up calling this \output
    % routine twice in a row (see the doublecol-lose test, which is
    % essentially a couple of indexes with @@setchapternewpage off).  In
    % that case we just ship out what is in \partialpage with the normal
    % output routine.  Generally, \partialpage will be empty when this
    % runs and this will be a no-op.  See the indexspread.tex test case.
    \ifvoid\partialpage \else
      \onepageout{\pagecontents\partialpage}%
    \fi
    %
    \global\setbox\partialpage = \vbox{%
      % Unvbox the main output page.
      \unvbox\PAGE
      \kern-\topskip \kern\baselineskip
    }%
  }%
  \eject % run that output routine to set \partialpage
  %
  % Use the double-column output routine for subsequent pages.
  \output = {\doublecolumnout}%
  %
  % Change the page size parameters.  We could do this once outside this
  % routine, in each of @@smallbook, @@afourpaper, and the default 8.5x11
  % format, but then we repeat the same computation.  Repeating a couple
  % of assignments once per index is clearly meaningless for the
  % execution time, so we may as well do it in one place.
  %
  % First we halve the line length, less a little for the gutter between
  % the columns.  We compute the gutter based on the line length, so it
  % changes automatically with the paper format.  The magic constant
  % below is chosen so that the gutter has the same value (well, +-<1pt)
  % as it did when we hard-coded it.
  %
  % We put the result in a separate register, \doublecolumhsize, so we
  % can restore it in \pagesofar, after \hsize itself has (potentially)
  % been clobbered.
  %
  \doublecolumnhsize = \hsize
    \advance\doublecolumnhsize by -.04154\hsize
    \divide\doublecolumnhsize by 2
  \hsize = \doublecolumnhsize
  %
  % Double the \vsize as well.  (We don't need a separate register here,
  % since nobody clobbers \vsize.)
  \vsize = 2\vsize
}

% The double-column output routine for all double-column pages except
% the last.
%
\def\doublecolumnout{%
  \splittopskip=\topskip \splitmaxdepth=\maxdepth
  % Get the available space for the double columns -- the normal
  % (undoubled) page height minus any material left over from the
  % previous page.
  \dimen@@ = \vsize
  \divide\dimen@@ by 2
  \advance\dimen@@ by -\ht\partialpage
  %
  % box0 will be the left-hand column, box2 the right.
  \setbox0=\vsplit255 to\dimen@@ \setbox2=\vsplit255 to\dimen@@
  \onepageout\pagesofar
  \unvbox255
  \penalty\outputpenalty
}
%
% Re-output the contents of the output page -- any previous material,
% followed by the two boxes we just split, in box0 and box2.
\def\pagesofar{%
  \unvbox\partialpage
  %
  \hsize = \doublecolumnhsize
  \wd0=\hsize \wd2=\hsize
  \hbox to\pagewidth{\box0\hfil\box2}%
}
%
% All done with double columns.
\def\enddoublecolumns{%
  % The following penalty ensures that the page builder is exercised
  % _before_ we change the output routine.  This is necessary in the
  % following situation:
  %
  % The last section of the index consists only of a single entry.
  % Before this section, \pagetotal is less than \pagegoal, so no
  % break occurs before the last section starts.  However, the last
  % section, consisting of \initial and the single \entry, does not
  % fit on the page and has to be broken off.  Without the following
  % penalty the page builder will not be exercised until \eject
  % below, and by that time we'll already have changed the output
  % routine to the \balancecolumns version, so the next-to-last
  % double-column page will be processed with \balancecolumns, which
  % is wrong:  The two columns will go to the main vertical list, with
  % the broken-off section in the recent contributions.  As soon as
  % the output routine finishes, TeX starts reconsidering the page
  % break.  The two columns and the broken-off section both fit on the
  % page, because the two columns now take up only half of the page
  % goal.  When TeX sees \eject from below which follows the final
  % section, it invokes the new output routine that we've set after
  % \balancecolumns below; \onepageout will try to fit the two columns
  % and the final section into the vbox of \pageheight (see
  % \pagebody), causing an overfull box.
  %
  % Note that glue won't work here, because glue does not exercise the
  % page builder, unlike penalties (see The TeXbook, pp. 280-281).
  \penalty0
  %
  \output = {%
    % Split the last of the double-column material.  Leave it on the
    % current page, no automatic page break.
    \balancecolumns
    %
    % If we end up splitting too much material for the current page,
    % though, there will be another page break right after this \output
    % invocation ends.  Having called \balancecolumns once, we do not
    % want to call it again.  Therefore, reset \output to its normal
    % definition right away.  (We hope \balancecolumns will never be
    % called on to balance too much material, but if it is, this makes
    % the output somewhat more palatable.)
    \global\output = {\onepageout{\pagecontents\PAGE}}%
  }%
  \eject
  \endgroup % started in \begindoublecolumns
  %
  % \pagegoal was set to the doubled \vsize above, since we restarted
  % the current page.  We're now back to normal single-column
  % typesetting, so reset \pagegoal to the normal \vsize (after the
  % \endgroup where \vsize got restored).
  \pagegoal = \vsize
}
%
% Called at the end of the double column material.
\def\balancecolumns{%
  \setbox0 = \vbox{\unvbox255}% like \box255 but more efficient, see p.120.
  \dimen@@ = \ht0
  \advance\dimen@@ by \topskip
  \advance\dimen@@ by-\baselineskip
  \divide\dimen@@ by 2 % target to split to
  %debug\message{final 2-column material height=\the\ht0, target=\the\dimen@@.}%
  \splittopskip = \topskip
  % Loop until we get a decent breakpoint.
  {%
    \vbadness = 10000
    \loop
      \global\setbox3 = \copy0
      \global\setbox1 = \vsplit3 to \dimen@@
    \ifdim\ht3>\dimen@@
      \global\advance\dimen@@ by 1pt
    \repeat
  }%
  %debug\message{split to \the\dimen@@, column heights: \the\ht1, \the\ht3.}%
  \setbox0=\vbox to\dimen@@{\unvbox1}%
  \setbox2=\vbox to\dimen@@{\unvbox3}%
  %
  \pagesofar
}
\catcode`\@@ = \other


\message{sectioning,}
% Chapters, sections, etc.

% \unnumberedno is an oxymoron, of course.  But we count the unnumbered
% sections so that we can refer to them unambiguously in the pdf
% outlines by their "section number".  We avoid collisions with chapter
% numbers by starting them at 10000.  (If a document ever has 10000
% chapters, we're in trouble anyway, I'm sure.)
\newcount\unnumberedno \unnumberedno = 10000
\newcount\chapno
\newcount\secno        \secno=0
\newcount\subsecno     \subsecno=0
\newcount\subsubsecno  \subsubsecno=0

% This counter is funny since it counts through charcodes of letters A, B, ...
\newcount\appendixno  \appendixno = `\@@
%
% \def\appendixletter{\char\the\appendixno}
% We do the following ugly conditional instead of the above simple
% construct for the sake of pdftex, which needs the actual
% letter in the expansion, not just typeset.
%
\def\appendixletter{%
  \ifnum\appendixno=`A A%
  \else\ifnum\appendixno=`B B%
  \else\ifnum\appendixno=`C C%
  \else\ifnum\appendixno=`D D%
  \else\ifnum\appendixno=`E E%
  \else\ifnum\appendixno=`F F%
  \else\ifnum\appendixno=`G G%
  \else\ifnum\appendixno=`H H%
  \else\ifnum\appendixno=`I I%
  \else\ifnum\appendixno=`J J%
  \else\ifnum\appendixno=`K K%
  \else\ifnum\appendixno=`L L%
  \else\ifnum\appendixno=`M M%
  \else\ifnum\appendixno=`N N%
  \else\ifnum\appendixno=`O O%
  \else\ifnum\appendixno=`P P%
  \else\ifnum\appendixno=`Q Q%
  \else\ifnum\appendixno=`R R%
  \else\ifnum\appendixno=`S S%
  \else\ifnum\appendixno=`T T%
  \else\ifnum\appendixno=`U U%
  \else\ifnum\appendixno=`V V%
  \else\ifnum\appendixno=`W W%
  \else\ifnum\appendixno=`X X%
  \else\ifnum\appendixno=`Y Y%
  \else\ifnum\appendixno=`Z Z%
  % The \the is necessary, despite appearances, because \appendixletter is
  % expanded while writing the .toc file.  \char\appendixno is not
  % expandable, thus it is written literally, thus all appendixes come out
  % with the same letter (or @@) in the toc without it.
  \else\char\the\appendixno
  \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
  \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi}

% Each @@chapter defines these (using marks) as the number+name, number
% and name of the chapter.  Page headings and footings can use
% these.  @@section does likewise.
\def\thischapter{}
\def\thischapternum{}
\def\thischaptername{}
\def\thissection{}
\def\thissectionnum{}
\def\thissectionname{}

\newcount\absseclevel % used to calculate proper heading level
\newcount\secbase\secbase=0 % @@raisesections/@@lowersections modify this count

% @@raisesections: treat @@section as chapter, @@subsection as section, etc.
\def\raisesections{\global\advance\secbase by -1}
\let\up=\raisesections % original BFox name

% @@lowersections: treat @@chapter as section, @@section as subsection, etc.
\def\lowersections{\global\advance\secbase by 1}
\let\down=\lowersections % original BFox name

% we only have subsub.
\chardef\maxseclevel = 3
%
% A numbered section within an unnumbered changes to unnumbered too.
% To achive this, remember the "biggest" unnum. sec. we are currently in:
\chardef\unmlevel = \maxseclevel
%
% Trace whether the current chapter is an appendix or not:
% \chapheadtype is "N" or "A", unnumbered chapters are ignored.
\def\chapheadtype{N}

% Choose a heading macro
% #1 is heading type
% #2 is heading level
% #3 is text for heading
\def\genhead#1#2#3{%
  % Compute the abs. sec. level:
  \absseclevel=#2
  \advance\absseclevel by \secbase
  % Make sure \absseclevel doesn't fall outside the range:
  \ifnum \absseclevel < 0
    \absseclevel = 0
  \else
    \ifnum \absseclevel > 3
      \absseclevel = 3
    \fi
  \fi
  % The heading type:
  \def\headtype{#1}%
  \if \headtype U%
    \ifnum \absseclevel < \unmlevel
      \chardef\unmlevel = \absseclevel
    \fi
  \else
    % Check for appendix sections:
    \ifnum \absseclevel = 0
      \edef\chapheadtype{\headtype}%
    \else
      \if \headtype A\if \chapheadtype N%
	\errmessage{@@appendix... within a non-appendix chapter}%
      \fi\fi
    \fi
    % Check for numbered within unnumbered:
    \ifnum \absseclevel > \unmlevel
      \def\headtype{U}%
    \else
      \chardef\unmlevel = 3
    \fi
  \fi
  % Now print the heading:
  \if \headtype U%
    \ifcase\absseclevel
	\unnumberedzzz{#3}%
    \or \unnumberedseczzz{#3}%
    \or \unnumberedsubseczzz{#3}%
    \or \unnumberedsubsubseczzz{#3}%
    \fi
  \else
    \if \headtype A%
      \ifcase\absseclevel
	  \appendixzzz{#3}%
      \or \appendixsectionzzz{#3}%
      \or \appendixsubseczzz{#3}%
      \or \appendixsubsubseczzz{#3}%
      \fi
    \else
      \ifcase\absseclevel
	  \chapterzzz{#3}%
      \or \seczzz{#3}%
      \or \numberedsubseczzz{#3}%
      \or \numberedsubsubseczzz{#3}%
      \fi
    \fi
  \fi
  \suppressfirstparagraphindent
}

% an interface:
\def\numhead{\genhead N}
\def\apphead{\genhead A}
\def\unnmhead{\genhead U}

% @@chapter, @@appendix, @@unnumbered.  Increment top-level counter, reset
% all lower-level sectioning counters to zero.
%
% Also set \chaplevelprefix, which we prepend to @@float sequence numbers
% (e.g., figures), q.v.  By default (before any chapter), that is empty.
\let\chaplevelprefix = \empty
%
\outer\parseargdef\chapter{\numhead0{#1}} % normally numhead0 calls chapterzzz
\def\chapterzzz#1{%
  % section resetting is \global in case the chapter is in a group, such
  % as an @@include file.
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\chapno by 1
  %
  % Used for \float.
  \gdef\chaplevelprefix{\the\chapno.}%
  \resetallfloatnos
  %
  % \putwordChapter can contain complex things in translations.
  \toks0=\expandafter{\putwordChapter}%
  \message{\the\toks0 \space \the\chapno}%
  %
  % Write the actual heading.
  \chapmacro{#1}{Ynumbered}{\the\chapno}%
  %
  % So @@section and the like are numbered underneath this chapter.
  \global\let\section = \numberedsec
  \global\let\subsection = \numberedsubsec
  \global\let\subsubsection = \numberedsubsubsec
}

\outer\parseargdef\appendix{\apphead0{#1}} % normally calls appendixzzz
%
\def\appendixzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\appendixno by 1
  \gdef\chaplevelprefix{\appendixletter.}%
  \resetallfloatnos
  %
  % \putwordAppendix can contain complex things in translations.
  \toks0=\expandafter{\putwordAppendix}%
  \message{\the\toks0 \space \appendixletter}%
  %
  \chapmacro{#1}{Yappendix}{\appendixletter}%
  %
  \global\let\section = \appendixsec
  \global\let\subsection = \appendixsubsec
  \global\let\subsubsection = \appendixsubsubsec
}

\outer\parseargdef\unnumbered{\unnmhead0{#1}} % normally unnmhead0 calls unnumberedzzz
\def\unnumberedzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\unnumberedno by 1
  %
  % Since an unnumbered has no number, no prefix for figures.
  \global\let\chaplevelprefix = \empty
  \resetallfloatnos
  %
  % This used to be simply \message{#1}, but TeX fully expands the
  % argument to \message.  Therefore, if #1 contained @@-commands, TeX
  % expanded them.  For example, in `@@unnumbered The @@cite{Book}', TeX
  % expanded @@cite (which turns out to cause errors because \cite is meant
  % to be executed, not expanded).
  %
  % Anyway, we don't want the fully-expanded definition of @@cite to appear
  % as a result of the \message, we just want `@@cite' itself.  We use
  % \the<toks register> to achieve this: TeX expands \the<toks> only once,
  % simply yielding the contents of <toks register>.  (We also do this for
  % the toc entries.)
  \toks0 = {#1}%
  \message{(\the\toks0)}%
  %
  \chapmacro{#1}{Ynothing}{\the\unnumberedno}%
  %
  \global\let\section = \unnumberedsec
  \global\let\subsection = \unnumberedsubsec
  \global\let\subsubsection = \unnumberedsubsubsec
}

% @@centerchap is like @@unnumbered, but the heading is centered.
\outer\parseargdef\centerchap{%
  % Well, we could do the following in a group, but that would break
  % an assumption that \chapmacro is called at the outermost level.
  % Thus we are safer this way:		--kasal, 24feb04
  \let\centerparametersmaybe = \centerparameters
  \unnmhead0{#1}%
  \let\centerparametersmaybe = \relax
}

% @@top is like @@unnumbered.
\let\top\unnumbered

% Sections.
\outer\parseargdef\numberedsec{\numhead1{#1}} % normally calls seczzz
\def\seczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynumbered}{\the\chapno.\the\secno}%
}

\outer\parseargdef\appendixsection{\apphead1{#1}} % normally calls appendixsectionzzz
\def\appendixsectionzzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Yappendix}{\appendixletter.\the\secno}%
}
\let\appendixsec\appendixsection

\outer\parseargdef\unnumberedsec{\unnmhead1{#1}} % normally calls unnumberedseczzz
\def\unnumberedseczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynothing}{\the\unnumberedno.\the\secno}%
}

% Subsections.
\outer\parseargdef\numberedsubsec{\numhead2{#1}} % normally calls numberedsubseczzz
\def\numberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynumbered}{\the\chapno.\the\secno.\the\subsecno}%
}

\outer\parseargdef\appendixsubsec{\apphead2{#1}} % normally calls appendixsubseczzz
\def\appendixsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno}%
}

\outer\parseargdef\unnumberedsubsec{\unnmhead2{#1}} %normally calls unnumberedsubseczzz
\def\unnumberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno}%
}

% Subsubsections.
\outer\parseargdef\numberedsubsubsec{\numhead3{#1}} % normally numberedsubsubseczzz
\def\numberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynumbered}%
                 {\the\chapno.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\appendixsubsubsec{\apphead3{#1}} % normally appendixsubsubseczzz
\def\appendixsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\unnumberedsubsubsec{\unnmhead3{#1}} %normally unnumberedsubsubseczzz
\def\unnumberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno.\the\subsubsecno}%
}

% These macros control what the section commands do, according
% to what kind of chapter we are in (ordinary, appendix, or unnumbered).
% Define them by default for a numbered chapter.
\let\section = \numberedsec
\let\subsection = \numberedsubsec
\let\subsubsection = \numberedsubsubsec

% Define @@majorheading, @@heading and @@subheading

% NOTE on use of \vbox for chapter headings, section headings, and such:
%       1) We use \vbox rather than the earlier \line to permit
%          overlong headings to fold.
%       2) \hyphenpenalty is set to 10000 because hyphenation in a
%          heading is obnoxious; this forbids it.
%       3) Likewise, headings look best if no \parindent is used, and
%          if justification is not attempted.  Hence \raggedright.

\def\majorheading{%
  {\advance\chapheadingskip by 10pt \chapbreak }%
  \parsearg\chapheadingzzz
}

\def\chapheading{\chapbreak \parsearg\chapheadingzzz}
\def\chapheadingzzz#1{%
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\ptexraggedright
                    \rmisbold #1\hfill}}%
  \bigskip \par\penalty 200\relax
  \suppressfirstparagraphindent
}

% @@heading, @@subheading, @@subsubheading.
\parseargdef\heading{\sectionheading{#1}{sec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subheading{\sectionheading{#1}{subsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subsubheading{\sectionheading{#1}{subsubsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}

% These macros generate a chapter, section, etc. heading only
% (including whitespace, linebreaking, etc. around it),
% given all the information in convenient, parsed form.

%%% Args are the skip and penalty (usually negative)
\def\dobreak#1#2{\par\ifdim\lastskip<#1\removelastskip\penalty#2\vskip#1\fi}

%%% Define plain chapter starts, and page on/off switching for it
% Parameter controlling skip before chapter headings (if needed)

\newskip\chapheadingskip

\def\chapbreak{\dobreak \chapheadingskip {-4000}}
\def\chappager{\par\vfill\supereject}
% Because \domark is called before \chapoddpage, the filler page will
% get the headings for the next chapter, which is wrong.  But we don't
% care -- we just disable all headings on the filler page.
\def\chapoddpage{%
  \chappager
  \ifodd\pageno \else
    \begingroup
      \evenheadline={\hfil}\evenfootline={\hfil}%
      \oddheadline={\hfil}\oddfootline={\hfil}%
      \hbox to 0pt{}%
      \chappager
    \endgroup
  \fi
}

\def\setchapternewpage #1 {\csname CHAPPAG#1\endcsname}

\def\CHAPPAGoff{%
\global\let\contentsalignmacro = \chappager
\global\let\pchapsepmacro=\chapbreak
\global\let\pagealignmacro=\chappager}

\def\CHAPPAGon{%
\global\let\contentsalignmacro = \chappager
\global\let\pchapsepmacro=\chappager
\global\let\pagealignmacro=\chappager
\global\def\HEADINGSon{\HEADINGSsingle}}

\def\CHAPPAGodd{%
\global\let\contentsalignmacro = \chapoddpage
\global\let\pchapsepmacro=\chapoddpage
\global\let\pagealignmacro=\chapoddpage
\global\def\HEADINGSon{\HEADINGSdouble}}

\CHAPPAGon

% Chapter opening.
%
% #1 is the text, #2 is the section type (Ynumbered, Ynothing,
% Yappendix, Yomitfromtoc), #3 the chapter number.
%
% To test against our argument.
\def\Ynothingkeyword{Ynothing}
\def\Yomitfromtockeyword{Yomitfromtoc}
\def\Yappendixkeyword{Yappendix}
%
\def\chapmacro#1#2#3{%
  % Insert the first mark before the heading break (see notes for \domark).
  \let\prevchapterdefs=\lastchapterdefs
  \let\prevsectiondefs=\lastsectiondefs
  \gdef\lastsectiondefs{\gdef\thissectionname{}\gdef\thissectionnum{}%
                        \gdef\thissection{}}%
  %
  \def\temptype{#2}%
  \ifx\temptype\Ynothingkeyword
    \gdef\lastchapterdefs{\gdef\thischaptername{#1}\gdef\thischapternum{}%
                          \gdef\thischapter{\thischaptername}}%
  \else\ifx\temptype\Yomitfromtockeyword
    \gdef\lastchapterdefs{\gdef\thischaptername{#1}\gdef\thischapternum{}%
                          \gdef\thischapter{}}%
  \else\ifx\temptype\Yappendixkeyword
    \toks0={#1}%
    \xdef\lastchapterdefs{%
      \gdef\noexpand\thischaptername{\the\toks0}%
      \gdef\noexpand\thischapternum{\appendixletter}%
      % \noexpand\putwordAppendix avoids expanding indigestible
      % commands in some of the translations.
      \gdef\noexpand\thischapter{\noexpand\putwordAppendix{}
                                 \noexpand\thischapternum:
                                 \noexpand\thischaptername}%
    }%
  \else
    \toks0={#1}%
    \xdef\lastchapterdefs{%
      \gdef\noexpand\thischaptername{\the\toks0}%
      \gdef\noexpand\thischapternum{\the\chapno}%
      % \noexpand\putwordChapter avoids expanding indigestible
      % commands in some of the translations.
      \gdef\noexpand\thischapter{\noexpand\putwordChapter{}
                                 \noexpand\thischapternum:
                                 \noexpand\thischaptername}%
    }%
  \fi\fi\fi
  %
  % Output the mark.  Pass it through \safewhatsit, to take care of
  % the preceding space.
  \safewhatsit\domark
  %
  % Insert the chapter heading break.
  \pchapsepmacro
  %
  % Now the second mark, after the heading break.  No break points
  % between here and the heading.
  \let\prevchapterdefs=\lastchapterdefs
  \let\prevsectiondefs=\lastsectiondefs
  \domark
  %
  {%
    \chapfonts \rmisbold
    %
    % Have to define \lastsection before calling \donoderef, because the
    % xref code eventually uses it.  On the other hand, it has to be called
    % after \pchapsepmacro, or the headline will change too soon.
    \gdef\lastsection{#1}%
    %
    % Only insert the separating space if we have a chapter/appendix
    % number, and don't print the unnumbered ``number''.
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unnchap}%
    \else\ifx\temptype\Yomitfromtockeyword
      \setbox0 = \hbox{}% contents like unnumbered, but no toc entry
      \def\toctype{omit}%
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{\putwordAppendix{} #3\enspace}%
      \def\toctype{app}%
    \else
      \setbox0 = \hbox{#3\enspace}%
      \def\toctype{numchap}%
    \fi\fi\fi
    %
    % Write the toc entry for this chapter.  Must come before the
    % \donoderef, because we include the current node name in the toc
    % entry, and \donoderef resets it to empty.
    \writetocentry{\toctype}{#1}{#3}%
    %
    % For pdftex, we have to write out the node definition (aka, make
    % the pdfdest) after any page break, but before the actual text has
    % been typeset.  If the destination for the pdf outline is after the
    % text, then jumping from the outline may wind up with the text not
    % being visible, for instance under high magnification.
    \donoderef{#2}%
    %
    % Typeset the actual heading.
    \nobreak % Avoid page breaks at the interline glue.
    \vbox{\hyphenpenalty=10000 \tolerance=5000 \parindent=0pt \ptexraggedright
          \hangindent=\wd0 \centerparametersmaybe
          \unhbox0 #1\par}%
  }%
  \nobreak\bigskip % no page break after a chapter title
  \nobreak
}

% @@centerchap -- centered and unnumbered.
\let\centerparametersmaybe = \relax
\def\centerparameters{%
  \advance\rightskip by 3\rightskip
  \leftskip = \rightskip
  \parfillskip = 0pt
}


% I don't think this chapter style is supported any more, so I'm not
% updating it with the new noderef stuff.  We'll see.  --karl, 11aug03.
%
\def\setchapterstyle #1 {\csname CHAPF#1\endcsname}
%
\def\unnchfopen #1{%
\chapoddpage {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                       \parindent=0pt\ptexraggedright
                       \rmisbold #1\hfill}}\bigskip \par\nobreak
}
\def\chfopen #1#2{\chapoddpage {\chapfonts
\vbox to 3in{\vfil \hbox to\hsize{\hfil #2} \hbox to\hsize{\hfil #1} \vfil}}%
\par\penalty 5000 %
}
\def\centerchfopen #1{%
\chapoddpage {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                       \parindent=0pt
                       \hfill {\rmisbold #1}\hfill}}\bigskip \par\nobreak
}
\def\CHAPFopen{%
  \global\let\chapmacro=\chfopen
  \global\let\centerchapmacro=\centerchfopen}


% Section titles.  These macros combine the section number parts and
% call the generic \sectionheading to do the printing.
%
\newskip\secheadingskip
\def\secheadingbreak{\dobreak \secheadingskip{-1000}}

% Subsection titles.
\newskip\subsecheadingskip
\def\subsecheadingbreak{\dobreak \subsecheadingskip{-500}}

% Subsubsection titles.
\def\subsubsecheadingskip{\subsecheadingskip}
\def\subsubsecheadingbreak{\subsecheadingbreak}


% Print any size, any type, section title.
%
% #1 is the text, #2 is the section level (sec/subsec/subsubsec), #3 is
% the section type for xrefs (Ynumbered, Ynothing, Yappendix), #4 is the
% section number.
%
\def\seckeyword{sec}
%
\def\sectionheading#1#2#3#4{%
  {%
    % Switch to the right set of fonts.
    \csname #2fonts\endcsname \rmisbold
    %
    \def\sectionlevel{#2}%
    \def\temptype{#3}%
    %
    % Insert first mark before the heading break (see notes for \domark).
    \let\prevsectiondefs=\lastsectiondefs
    \ifx\temptype\Ynothingkeyword
      \ifx\sectionlevel\seckeyword
        \gdef\lastsectiondefs{\gdef\thissectionname{#1}\gdef\thissectionnum{}%
                              \gdef\thissection{\thissectionname}}%
      \fi
    \else\ifx\temptype\Yomitfromtockeyword
      % Don't redefine \thissection.
    \else\ifx\temptype\Yappendixkeyword
      \ifx\sectionlevel\seckeyword
        \toks0={#1}%
        \xdef\lastsectiondefs{%
          \gdef\noexpand\thissectionname{\the\toks0}%
          \gdef\noexpand\thissectionnum{#4}%
          % \noexpand\putwordSection avoids expanding indigestible
          % commands in some of the translations.
          \gdef\noexpand\thissection{\noexpand\putwordSection{}
                                     \noexpand\thissectionnum:
                                     \noexpand\thissectionname}%
        }%
      \fi
    \else
      \ifx\sectionlevel\seckeyword
        \toks0={#1}%
        \xdef\lastsectiondefs{%
          \gdef\noexpand\thissectionname{\the\toks0}%
          \gdef\noexpand\thissectionnum{#4}%
          % \noexpand\putwordSection avoids expanding indigestible
          % commands in some of the translations.
          \gdef\noexpand\thissection{\noexpand\putwordSection{}
                                     \noexpand\thissectionnum:
                                     \noexpand\thissectionname}%
        }%
      \fi
    \fi\fi\fi
    %
    % Go into vertical mode.  Usually we'll already be there, but we
    % don't want the following whatsit to end up in a preceding paragraph
    % if the document didn't happen to have a blank line.
    \par
    %
    % Output the mark.  Pass it through \safewhatsit, to take care of
    % the preceding space.
    \safewhatsit\domark
    %
    % Insert space above the heading.
    \csname #2headingbreak\endcsname
    %
    % Now the second mark, after the heading break.  No break points
    % between here and the heading.
    \let\prevsectiondefs=\lastsectiondefs
    \domark
    %
    % Only insert the space after the number if we have a section number.
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unn}%
      \gdef\lastsection{#1}%
    \else\ifx\temptype\Yomitfromtockeyword
      % for @@headings -- no section number, don't include in toc,
      % and don't redefine \lastsection.
      \setbox0 = \hbox{}%
      \def\toctype{omit}%
      \let\sectionlevel=\empty
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{app}%
      \gdef\lastsection{#1}%
    \else
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{num}%
      \gdef\lastsection{#1}%
    \fi\fi\fi
    %
    % Write the toc entry (before \donoderef).  See comments in \chapmacro.
    \writetocentry{\toctype\sectionlevel}{#1}{#4}%
    %
    % Write the node reference (= pdf destination for pdftex).
    % Again, see comments in \chapmacro.
    \donoderef{#3}%
    %
    % Interline glue will be inserted when the vbox is completed.
    % That glue will be a valid breakpoint for the page, since it'll be
    % preceded by a whatsit (usually from the \donoderef, or from the
    % \writetocentry if there was no node).  We don't want to allow that
    % break, since then the whatsits could end up on page n while the
    % section is on page n+1, thus toc/etc. are wrong.  Debian bug 276000.
    \nobreak
    %
    % Output the actual section heading.
    \vbox{\hyphenpenalty=10000 \tolerance=5000 \parindent=0pt \ptexraggedright
          \hangindent=\wd0  % zero if no section number
          \unhbox0 #1}%
  }%
  % Add extra space after the heading -- half of whatever came above it.
  % Don't allow stretch, though.
  \kern .5 \csname #2headingskip\endcsname
  %
  % Do not let the kern be a potential breakpoint, as it would be if it
  % was followed by glue.
  \nobreak
  %
  % We'll almost certainly start a paragraph next, so don't let that
  % glue accumulate.  (Not a breakpoint because it's preceded by a
  % discardable item.)
  \vskip-\parskip
  %
  % This is purely so the last item on the list is a known \penalty >
  % 10000.  This is so \startdefun can avoid allowing breakpoints after
  % section headings.  Otherwise, it would insert a valid breakpoint between:
  %
  %   @@section sec-whatever
  %   @@deffn def-whatever
  \penalty 10001
}


\message{toc,}
% Table of contents.
\newwrite\tocfile

% Write an entry to the toc file, opening it if necessary.
% Called from @@chapter, etc.
%
% Example usage: \writetocentry{sec}{Section Name}{\the\chapno.\the\secno}
% We append the current node name (if any) and page number as additional
% arguments for the \{chap,sec,...}entry macros which will eventually
% read this.  The node name is used in the pdf outlines as the
% destination to jump to.
%
% We open the .toc file for writing here instead of at @@setfilename (or
% any other fixed time) so that @@contents can be anywhere in the document.
% But if #1 is `omit', then we don't do anything.  This is used for the
% table of contents chapter openings themselves.
%
\newif\iftocfileopened
\def\omitkeyword{omit}%
%
\def\writetocentry#1#2#3{%
  \edef\writetoctype{#1}%
  \ifx\writetoctype\omitkeyword \else
    \iftocfileopened\else
      \immediate\openout\tocfile = \jobname.toc
      \global\tocfileopenedtrue
    \fi
    %
    \iflinks
      {\atdummies
       \edef\temp{%
         \write\tocfile{@@#1entry{#2}{#3}{\lastnode}{\noexpand\folio}}}%
       \temp
      }%
    \fi
  \fi
  %
  % Tell \shipout to create a pdf destination on each page, if we're
  % writing pdf.  These are used in the table of contents.  We can't
  % just write one on every page because the title pages are numbered
  % 1 and 2 (the page numbers aren't printed), and so are the first
  % two pages of the document.  Thus, we'd have two destinations named
  % `1', and two named `2'.
  \ifpdf \global\pdfmakepagedesttrue \fi
}


% These characters do not print properly in the Computer Modern roman
% fonts, so we must take special care.  This is more or less redundant
% with the Texinfo input format setup at the end of this file.
%
\def\activecatcodes{%
  \catcode`\"=\active
  \catcode`\$=\active
  \catcode`\<=\active
  \catcode`\>=\active
  \catcode`\\=\active
  \catcode`\^=\active
  \catcode`\_=\active
  \catcode`\|=\active
  \catcode`\~=\active
}


% Read the toc file, which is essentially Texinfo input.
\def\readtocfile{%
  \setupdatafile
  \activecatcodes
  \input \tocreadfilename
}

\newskip\contentsrightmargin \contentsrightmargin=1in
\newcount\savepageno
\newcount\lastnegativepageno \lastnegativepageno = -1

% Prepare to read what we've written to \tocfile.
%
\def\startcontents#1{%
  % If @@setchapternewpage on, and @@headings double, the contents should
  % start on an odd page, unlike chapters.  Thus, we maintain
  % \contentsalignmacro in parallel with \pagealignmacro.
  % From: Torbjorn Granlund <tege@@matematik.su.se>
  \contentsalignmacro
  \immediate\closeout\tocfile
  %
  % Don't need to put `Contents' or `Short Contents' in the headline.
  % It is abundantly clear what they are.
  \chapmacro{#1}{Yomitfromtoc}{}%
  %
  \savepageno = \pageno
  \begingroup                  % Set up to handle contents files properly.
    \raggedbottom              % Worry more about breakpoints than the bottom.
    \advance\hsize by -\contentsrightmargin % Don't use the full line length.
    %
    % Roman numerals for page numbers.
    \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
}

% redefined for the two-volume lispref.  We always output on
% \jobname.toc even if this is redefined.
%
\def\tocreadfilename{\jobname.toc}

% Normal (long) toc.
%
\def\contents{%
  \startcontents{\putwordTOC}%
    \openin 1 \tocreadfilename\space
    \ifeof 1 \else
      \readtocfile
    \fi
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
    \ifeof 1 \else
      \pdfmakeoutlines
    \fi
    \closein 1
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
}

% And just the chapters.
\def\summarycontents{%
  \startcontents{\putwordShortTOC}%
    %
    \let\numchapentry = \shortchapentry
    \let\appentry = \shortchapentry
    \let\unnchapentry = \shortunnchapentry
    % We want a true roman here for the page numbers.
    \secfonts
    \let\rm=\shortcontrm \let\bf=\shortcontbf
    \let\sl=\shortcontsl \let\tt=\shortconttt
    \rm
    \hyphenpenalty = 10000
    \advance\baselineskip by 1pt % Open it up a little.
    \def\numsecentry##1##2##3##4{}
    \let\appsecentry = \numsecentry
    \let\unnsecentry = \numsecentry
    \let\numsubsecentry = \numsecentry
    \let\appsubsecentry = \numsecentry
    \let\unnsubsecentry = \numsecentry
    \let\numsubsubsecentry = \numsecentry
    \let\appsubsubsecentry = \numsecentry
    \let\unnsubsubsecentry = \numsecentry
    \openin 1 \tocreadfilename\space
    \ifeof 1 \else
      \readtocfile
    \fi
    \closein 1
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
}
\let\shortcontents = \summarycontents

% Typeset the label for a chapter or appendix for the short contents.
% The arg is, e.g., `A' for an appendix, or `3' for a chapter.
%
\def\shortchaplabel#1{%
  % This space should be enough, since a single number is .5em, and the
  % widest letter (M) is 1em, at least in the Computer Modern fonts.
  % But use \hss just in case.
  % (This space doesn't include the extra space that gets added after
  % the label; that gets put in by \shortchapentry above.)
  %
  % We'd like to right-justify chapter numbers, but that looks strange
  % with appendix letters.  And right-justifying numbers and
  % left-justifying letters looks strange when there is less than 10
  % chapters.  Have to read the whole toc once to know how many chapters
  % there are before deciding ...
  \hbox to 1em{#1\hss}%
}

% These macros generate individual entries in the table of contents.
% The first argument is the chapter or section name.
% The last argument is the page number.
% The arguments in between are the chapter number, section number, ...

% Chapters, in the main contents.
\def\numchapentry#1#2#3#4{\dochapentry{#2\labelspace#1}{#4}}
%
% Chapters, in the short toc.
% See comments in \dochapentry re vbox and related settings.
\def\shortchapentry#1#2#3#4{%
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno\bgroup#4\egroup}%
}

% Appendices, in the main contents.
% Need the word Appendix, and a fixed-size box.
%
\def\appendixbox#1{%
  % We use M since it's probably the widest letter.
  \setbox0 = \hbox{\putwordAppendix{} M}%
  \hbox to \wd0{\putwordAppendix{} #1\hss}}
%
\def\appentry#1#2#3#4{\dochapentry{\appendixbox{#2}\labelspace#1}{#4}}

% Unnumbered chapters.
\def\unnchapentry#1#2#3#4{\dochapentry{#1}{#4}}
\def\shortunnchapentry#1#2#3#4{\tocentry{#1}{\doshortpageno\bgroup#4\egroup}}

% Sections.
\def\numsecentry#1#2#3#4{\dosecentry{#2\labelspace#1}{#4}}
\let\appsecentry=\numsecentry
\def\unnsecentry#1#2#3#4{\dosecentry{#1}{#4}}

% Subsections.
\def\numsubsecentry#1#2#3#4{\dosubsecentry{#2\labelspace#1}{#4}}
\let\appsubsecentry=\numsubsecentry
\def\unnsubsecentry#1#2#3#4{\dosubsecentry{#1}{#4}}

% And subsubsections.
\def\numsubsubsecentry#1#2#3#4{\dosubsubsecentry{#2\labelspace#1}{#4}}
\let\appsubsubsecentry=\numsubsubsecentry
\def\unnsubsubsecentry#1#2#3#4{\dosubsubsecentry{#1}{#4}}

% This parameter controls the indentation of the various levels.
% Same as \defaultparindent.
\newdimen\tocindent \tocindent = 15pt

% Now for the actual typesetting. In all these, #1 is the text and #2 is the
% page number.
%
% If the toc has to be broken over pages, we want it to be at chapters
% if at all possible; hence the \penalty.
\def\dochapentry#1#2{%
   \penalty-300 \vskip1\baselineskip plus.33\baselineskip minus.25\baselineskip
   \begingroup
     \chapentryfonts
     \tocentry{#1}{\dopageno\bgroup#2\egroup}%
   \endgroup
   \nobreak\vskip .25\baselineskip plus.1\baselineskip
}

\def\dosecentry#1#2{\begingroup
  \secentryfonts \leftskip=\tocindent
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
\endgroup}

\def\dosubsecentry#1#2{\begingroup
  \subsecentryfonts \leftskip=2\tocindent
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
\endgroup}

\def\dosubsubsecentry#1#2{\begingroup
  \subsubsecentryfonts \leftskip=3\tocindent
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
\endgroup}

% We use the same \entry macro as for the index entries.
\let\tocentry = \entry

% Space between chapter (or whatever) number and the title.
\def\labelspace{\hskip1em \relax}

\def\dopageno#1{{\rm #1}}
\def\doshortpageno#1{{\rm #1}}

\def\chapentryfonts{\secfonts \rm}
\def\secentryfonts{\textfonts}
\def\subsecentryfonts{\textfonts}
\def\subsubsecentryfonts{\textfonts}


\message{environments,}
% @@foo ... @@end foo.

% @@tex ... @@end tex    escapes into raw Tex temporarily.
% One exception: @@ is still an escape character, so that @@end tex works.
% But \@@ or @@@@ will get a plain tex @@ character.

\envdef\tex{%
  \setupmarkupstyle{tex}%
  \catcode `\\=0 \catcode `\{=1 \catcode `\}=2
  \catcode `\$=3 \catcode `\&=4 \catcode `\#=6
  \catcode `\^=7 \catcode `\_=8 \catcode `\~=\active \let~=\tie
  \catcode `\%=14
  \catcode `\+=\other
  \catcode `\"=\other
  \catcode `\|=\other
  \catcode `\<=\other
  \catcode `\>=\other
  \catcode`\`=\other
  \catcode`\'=\other
  \escapechar=`\\
  %
  \let\b=\ptexb
  \let\bullet=\ptexbullet
  \let\c=\ptexc
  \let\,=\ptexcomma
  \let\.=\ptexdot
  \let\dots=\ptexdots
  \let\equiv=\ptexequiv
  \let\!=\ptexexclam
  \let\i=\ptexi
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
  \let\{=\ptexlbrace
  \let\+=\tabalign
  \let\}=\ptexrbrace
  \let\/=\ptexslash
  \let\*=\ptexstar
  \let\t=\ptext
  \expandafter \let\csname top\endcsname=\ptextop  % outer
  \let\frenchspacing=\plainfrenchspacing
  %
  \def\endldots{\mathinner{\ldots\ldots\ldots\ldots}}%
  \def\enddots{\relax\ifmmode\endldots\else$\mathsurround=0pt \endldots\,$\fi}%
  \def\@@{@@}%
}
% There is no need to define \Etex.

% Define @@lisp ... @@end lisp.
% @@lisp environment forms a group so it can rebind things,
% including the definition of @@end lisp (which normally is erroneous).

% Amount to narrow the margins by for @@lisp.
\newskip\lispnarrowing \lispnarrowing=0.4in

% This is the definition that ^^M gets inside @@lisp, @@example, and other
% such environments.  \null is better than a space, since it doesn't
% have any width.
\def\lisppar{\null\endgraf}

% This space is always present above and below environments.
\newskip\envskipamount \envskipamount = 0pt

% Make spacing and below environment symmetrical.  We use \parskip here
% to help in doing that, since in @@example-like environments \parskip
% is reset to zero; thus the \afterenvbreak inserts no space -- but the
% start of the next paragraph will insert \parskip.
%
\def\aboveenvbreak{{%
  % =10000 instead of <10000 because of a special case in \itemzzz and
  % \sectionheading, q.v.
  \ifnum \lastpenalty=10000 \else
    \advance\envskipamount by \parskip
    \endgraf
    \ifdim\lastskip<\envskipamount
      \removelastskip
      % it's not a good place to break if the last penalty was \nobreak
      % or better ...
      \ifnum\lastpenalty<10000 \penalty-50 \fi
      \vskip\envskipamount
    \fi
  \fi
}}

\let\afterenvbreak = \aboveenvbreak

% \nonarrowing is a flag.  If "set", @@lisp etc don't narrow margins; it will
% also clear it, so that its embedded environments do the narrowing again.
\let\nonarrowing=\relax

% @@cartouche ... @@end cartouche: draw rectangle w/rounded corners around
% environment contents.
\font\circle=lcircle10
\newdimen\circthick
\newdimen\cartouter\newdimen\cartinner
\newskip\normbskip\newskip\normpskip\newskip\normlskip
\circthick=\fontdimen8\circle
%
\def\ctl{{\circle\char'013\hskip -6pt}}% 6pt from pl file: 1/2charwidth
\def\ctr{{\hskip 6pt\circle\char'010}}
\def\cbl{{\circle\char'012\hskip -6pt}}
\def\cbr{{\hskip 6pt\circle\char'011}}
\def\carttop{\hbox to \cartouter{\hskip\lskip
        \ctl\leaders\hrule height\circthick\hfil\ctr
        \hskip\rskip}}
\def\cartbot{\hbox to \cartouter{\hskip\lskip
        \cbl\leaders\hrule height\circthick\hfil\cbr
        \hskip\rskip}}
%
\newskip\lskip\newskip\rskip

\envdef\cartouche{%
  \ifhmode\par\fi  % can't be in the midst of a paragraph.
  \startsavinginserts
  \lskip=\leftskip \rskip=\rightskip
  \leftskip=0pt\rightskip=0pt % we want these *outside*.
  \cartinner=\hsize \advance\cartinner by-\lskip
  \advance\cartinner by-\rskip
  \cartouter=\hsize
  \advance\cartouter by 18.4pt	% allow for 3pt kerns on either
				% side, and for 6pt waste from
				% each corner char, and rule thickness
  \normbskip=\baselineskip \normpskip=\parskip \normlskip=\lineskip
  % Flag to tell @@lisp, etc., not to narrow margin.
  \let\nonarrowing = t%
  \vbox\bgroup
      \baselineskip=0pt\parskip=0pt\lineskip=0pt
      \carttop
      \hbox\bgroup
	  \hskip\lskip
	  \vrule\kern3pt
	  \vbox\bgroup
	      \kern3pt
	      \hsize=\cartinner
	      \baselineskip=\normbskip
	      \lineskip=\normlskip
	      \parskip=\normpskip
	      \vskip -\parskip
	      \comment % For explanation, see the end of \def\group.
}
\def\Ecartouche{%
              \ifhmode\par\fi
	      \kern3pt
	  \egroup
	  \kern3pt\vrule
	  \hskip\rskip
      \egroup
      \cartbot
  \egroup
  \checkinserts
}


% This macro is called at the beginning of all the @@example variants,
% inside a group.
\newdimen\nonfillparindent
\def\nonfillstart{%
  \aboveenvbreak
  \hfuzz = 12pt % Don't be fussy
  \sepspaces % Make spaces be word-separators rather than space tokens.
  \let\par = \lisppar % don't ignore blank lines
  \obeylines % each line of input is a line of output
  \parskip = 0pt
  % Turn off paragraph indentation but redefine \indent to emulate
  % the normal \indent.
  \nonfillparindent=\parindent
  \parindent = 0pt
  \let\indent\nonfillindent
  %
  \emergencystretch = 0pt % don't try to avoid overfull boxes
  \ifx\nonarrowing\relax
    \advance \leftskip by \lispnarrowing
    \exdentamount=\lispnarrowing
  \else
    \let\nonarrowing = \relax
  \fi
  \let\exdent=\nofillexdent
}

\begingroup
\obeyspaces
% We want to swallow spaces (but not other tokens) after the fake
% @@indent in our nonfill-environments, where spaces are normally
% active and set to @@tie, resulting in them not being ignored after
% @@indent.
\gdef\nonfillindent{\futurelet\temp\nonfillindentcheck}%
\gdef\nonfillindentcheck{%
\ifx\temp %
\expandafter\nonfillindentgobble%
\else%
\leavevmode\nonfillindentbox%
\fi%
}%
\endgroup
\def\nonfillindentgobble#1{\nonfillindent}
\def\nonfillindentbox{\hbox to \nonfillparindent{\hss}}

% If you want all examples etc. small: @@set dispenvsize small.
% If you want even small examples the full size: @@set dispenvsize nosmall.
% This affects the following displayed environments:
%    @@example, @@display, @@format, @@lisp
%
\def\smallword{small}
\def\nosmallword{nosmall}
\let\SETdispenvsize\relax
\def\setnormaldispenv{%
  \ifx\SETdispenvsize\smallword
    % end paragraph for sake of leading, in case document has no blank
    % line.  This is redundant with what happens in \aboveenvbreak, but
    % we need to do it before changing the fonts, and it's inconvenient
    % to change the fonts afterward.
    \ifnum \lastpenalty=10000 \else \endgraf \fi
    \smallexamplefonts \rm
  \fi
}
\def\setsmalldispenv{%
  \ifx\SETdispenvsize\nosmallword
  \else
    \ifnum \lastpenalty=10000 \else \endgraf \fi
    \smallexamplefonts \rm
  \fi
}

% We often define two environments, @@foo and @@smallfoo.
% Let's do it by one command:
\def\makedispenv #1#2{
  \expandafter\envdef\csname#1\endcsname {\setnormaldispenv #2}
  \expandafter\envdef\csname small#1\endcsname {\setsmalldispenv #2}
  \expandafter\let\csname E#1\endcsname \afterenvbreak
  \expandafter\let\csname Esmall#1\endcsname \afterenvbreak
}

% Define two synonyms:
\def\maketwodispenvs #1#2#3{
  \makedispenv{#1}{#3}
  \makedispenv{#2}{#3}
}

% @@lisp: indented, narrowed, typewriter font; @@example: same as @@lisp.
%
% @@smallexample and @@smalllisp: use smaller fonts.
% Originally contributed by Pavel@@xerox.
%
\maketwodispenvs {lisp}{example}{%
  \nonfillstart
  \tt\setupmarkupstyle{example}%
  \let\kbdfont = \kbdexamplefont % Allow @@kbd to do something special.
  \gobble       % eat return
}
% @@display/@@smalldisplay: same as @@lisp except keep current font.
%
\makedispenv {display}{%
  \nonfillstart
  \gobble
}

% @@format/@@smallformat: same as @@display except don't narrow margins.
%
\makedispenv{format}{%
  \let\nonarrowing = t%
  \nonfillstart
  \gobble
}

% @@flushleft: same as @@format, but doesn't obey \SETdispenvsize.
\envdef\flushleft{%
  \let\nonarrowing = t%
  \nonfillstart
  \gobble
}
\let\Eflushleft = \afterenvbreak

% @@flushright.
%
\envdef\flushright{%
  \let\nonarrowing = t%
  \nonfillstart
  \advance\leftskip by 0pt plus 1fill
  \gobble
}
\let\Eflushright = \afterenvbreak


% @@raggedright does more-or-less normal line breaking but no right
% justification.  From plain.tex.
\envdef\raggedright{%
  \rightskip0pt plus2em \spaceskip.3333em \xspaceskip.5em\relax
}
\let\Eraggedright\par

\envdef\raggedleft{%
  \parindent=0pt \leftskip0pt plus2em
  \spaceskip.3333em \xspaceskip.5em \parfillskip=0pt
  \hbadness=10000 % Last line will usually be underfull, so turn off
                  % badness reporting.
}
\let\Eraggedleft\par

\envdef\raggedcenter{%
  \parindent=0pt \rightskip0pt plus1em \leftskip0pt plus1em
  \spaceskip.3333em \xspaceskip.5em \parfillskip=0pt
  \hbadness=10000 % Last line will usually be underfull, so turn off
                  % badness reporting.
}
\let\Eraggedcenter\par


% @@quotation does normal linebreaking (hence we can't use \nonfillstart)
% and narrows the margins.  We keep \parskip nonzero in general, since
% we're doing normal filling.  So, when using \aboveenvbreak and
% \afterenvbreak, temporarily make \parskip 0.
%
\def\quotationstart{%
  {\parskip=0pt \aboveenvbreak}% because \aboveenvbreak inserts \parskip
  \parindent=0pt
  %
  % @@cartouche defines \nonarrowing to inhibit narrowing at next level down.
  \ifx\nonarrowing\relax
    \advance\leftskip by \lispnarrowing
    \advance\rightskip by \lispnarrowing
    \exdentamount = \lispnarrowing
  \else
    \let\nonarrowing = \relax
  \fi
  \parsearg\quotationlabel
}

\envdef\quotation{%
  \setnormaldispenv
  \quotationstart
}

\envdef\smallquotation{%
  \setsmalldispenv
  \quotationstart
}
\let\Esmallquotation = \Equotation

% We have retained a nonzero parskip for the environment, since we're
% doing normal filling.
%
\def\Equotation{%
  \par
  \ifx\quotationauthor\undefined\else
    % indent a bit.
    \leftline{\kern 2\leftskip \sl ---\quotationauthor}%
  \fi
  {\parskip=0pt \afterenvbreak}%
}

% If we're given an argument, typeset it in bold with a colon after.
\def\quotationlabel#1{%
  \def\temp{#1}%
  \ifx\temp\empty \else
    {\bf #1: }%
  \fi
}


% LaTeX-like @@verbatim...@@end verbatim and @@verb{<char>...<char>}
% If we want to allow any <char> as delimiter,
% we need the curly braces so that makeinfo sees the @@verb command, eg:
% `@@verbx...x' would look like the '@@verbx' command.  --janneke@@gnu.org
%
% [Knuth]: Donald Ervin Knuth, 1996.  The TeXbook.
%
% [Knuth] p.344; only we need to do the other characters Texinfo sets
% active too.  Otherwise, they get lost as the first character on a
% verbatim line.
\def\dospecials{%
  \do\ \do\\\do\{\do\}\do\$\do\&%
  \do\#\do\^\do\^^K\do\_\do\^^A\do\%\do\~%
  \do\<\do\>\do\|\do\@@\do+\do\"%
  % Don't do the quotes -- if we do, @@set txicodequoteundirected and
  % @@set txicodequotebacktick will not have effect on @@verb and
  % @@verbatim, and ?` and !` ligatures won't get disabled.
  %\do\`\do\'%
}
%
% [Knuth] p. 380
\def\uncatcodespecials{%
  \def\do##1{\catcode`##1=\other}\dospecials}
%
% Setup for the @@verb command.
%
% Eight spaces for a tab
\begingroup
  \catcode`\^^I=\active
  \gdef\tabeightspaces{\catcode`\^^I=\active\def^^I{\ \ \ \ \ \ \ \ }}
\endgroup
%
\def\setupverb{%
  \tt  % easiest (and conventionally used) font for verbatim
  \def\par{\leavevmode\endgraf}%
  \setupmarkupstyle{verb}%
  \tabeightspaces
  % Respect line breaks,
  % print special symbols as themselves, and
  % make each space count
  % must do in this order:
  \obeylines \uncatcodespecials \sepspaces
}

% Setup for the @@verbatim environment
%
% Real tab expansion
\newdimen\tabw \setbox0=\hbox{\tt\space} \tabw=8\wd0 % tab amount
%
\def\starttabbox{\setbox0=\hbox\bgroup}
%
\begingroup
  \catcode`\^^I=\active
  \gdef\tabexpand{%
    \catcode`\^^I=\active
    \def^^I{\leavevmode\egroup
      \dimen0=\wd0 % the width so far, or since the previous tab
      \divide\dimen0 by\tabw
      \multiply\dimen0 by\tabw % compute previous multiple of \tabw
      \advance\dimen0 by\tabw  % advance to next multiple of \tabw
      \wd0=\dimen0 \box0 \starttabbox
    }%
  }
\endgroup

% start the verbatim environment.
\def\setupverbatim{%
  \let\nonarrowing = t%
  \nonfillstart
  % Easiest (and conventionally used) font for verbatim
  \tt
  \def\par{\leavevmode\egroup\box0\endgraf}%
  \tabexpand
  \setupmarkupstyle{verbatim}%
  % Respect line breaks,
  % print special symbols as themselves, and
  % make each space count
  % must do in this order:
  \obeylines \uncatcodespecials \sepspaces
  \everypar{\starttabbox}%
}

% Do the @@verb magic: verbatim text is quoted by unique
% delimiter characters.  Before first delimiter expect a
% right brace, after last delimiter expect closing brace:
%
%    \def\doverb'{'<char>#1<char>'}'{#1}
%
% [Knuth] p. 382; only eat outer {}
\begingroup
  \catcode`[=1\catcode`]=2\catcode`\{=\other\catcode`\}=\other
  \gdef\doverb{#1[\def\next##1#1}[##1\endgroup]\next]
\endgroup
%
\def\verb{\begingroup\setupverb\doverb}
%
%
% Do the @@verbatim magic: define the macro \doverbatim so that
% the (first) argument ends when '@@end verbatim' is reached, ie:
%
%     \def\doverbatim#1@@end verbatim{#1}
%
% For Texinfo it's a lot easier than for LaTeX,
% because texinfo's \verbatim doesn't stop at '\end{verbatim}':
% we need not redefine '\', '{' and '}'.
%
% Inspired by LaTeX's verbatim command set [latex.ltx]
%
\begingroup
  \catcode`\ =\active
  \obeylines %
  % ignore everything up to the first ^^M, that's the newline at the end
  % of the @@verbatim input line itself.  Otherwise we get an extra blank
  % line in the output.
  \xdef\doverbatim#1^^M#2@@end verbatim{#2\noexpand\end\gobble verbatim}%
  % We really want {...\end verbatim} in the body of the macro, but
  % without the active space; thus we have to use \xdef and \gobble.
\endgroup
%
\envdef\verbatim{%
    \setupverbatim\doverbatim
}
\let\Everbatim = \afterenvbreak


% @@verbatiminclude FILE - insert text of file in verbatim environment.
%
\def\verbatiminclude{\parseargusing\filenamecatcodes\doverbatiminclude}
%
\def\doverbatiminclude#1{%
  {%
    \makevalueexpandable
    \setupverbatim
    \indexnofonts       % Allow `@@@@' and other weird things in file names.
    \input #1
    \afterenvbreak
  }%
}

% @@copying ... @@end copying.
% Save the text away for @@insertcopying later.
%
% We save the uninterpreted tokens, rather than creating a box.
% Saving the text in a box would be much easier, but then all the
% typesetting commands (@@smallbook, font changes, etc.) have to be done
% beforehand -- and a) we want @@copying to be done first in the source
% file; b) letting users define the frontmatter in as flexible order as
% possible is very desirable.
%
\def\copying{\checkenv{}\begingroup\scanargctxt\docopying}
\def\docopying#1@@end copying{\endgroup\def\copyingtext{#1}}
%
\def\insertcopying{%
  \begingroup
    \parindent = 0pt  % paragraph indentation looks wrong on title page
    \scanexp\copyingtext
  \endgroup
}


\message{defuns,}
% @@defun etc.

\newskip\defbodyindent \defbodyindent=.4in
\newskip\defargsindent \defargsindent=50pt
\newskip\deflastargmargin \deflastargmargin=18pt
\newcount\defunpenalty

% Start the processing of @@deffn:
\def\startdefun{%
  \ifnum\lastpenalty<10000
    \medbreak
    \defunpenalty=10003 % Will keep this @@deffn together with the
                        % following @@def command, see below.
  \else
    % If there are two @@def commands in a row, we'll have a \nobreak,
    % which is there to keep the function description together with its
    % header.  But if there's nothing but headers, we need to allow a
    % break somewhere.  Check specifically for penalty 10002, inserted
    % by \printdefunline, instead of 10000, since the sectioning
    % commands also insert a nobreak penalty, and we don't want to allow
    % a break between a section heading and a defun.
    %
    % As a minor refinement, we avoid "club" headers by signalling
    % with penalty of 10003 after the very first @@deffn in the
    % sequence (see above), and penalty of 10002 after any following
    % @@def command.
    \ifnum\lastpenalty=10002 \penalty2000 \else \defunpenalty=10002 \fi
    %
    % Similarly, after a section heading, do not allow a break.
    % But do insert the glue.
    \medskip  % preceded by discardable penalty, so not a breakpoint
  \fi
  %
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
}

\def\dodefunx#1{%
  % First, check whether we are in the right environment:
  \checkenv#1%
  %
  % As above, allow line break if we have multiple x headers in a row.
  % It's not a great place, though.
  \ifnum\lastpenalty=10002 \penalty3000 \else \defunpenalty=10002 \fi
  %
  % And now, it's time to reuse the body of the original defun:
  \expandafter\gobbledefun#1%
}
\def\gobbledefun#1\startdefun{}

% \printdefunline \deffnheader{text}
%
\def\printdefunline#1#2{%
  \begingroup
    % call \deffnheader:
    #1#2 \endheader
    % common ending:
    \interlinepenalty = 10000
    \advance\rightskip by 0pt plus 1fil
    \endgraf
    \nobreak\vskip -\parskip
    \penalty\defunpenalty  % signal to \startdefun and \dodefunx
    % Some of the @@defun-type tags do not enable magic parentheses,
    % rendering the following check redundant.  But we don't optimize.
    \checkparencounts
  \endgroup
}

\def\Edefun{\endgraf\medbreak}

% \makedefun{deffn} creates \deffn, \deffnx and \Edeffn;
% the only thing remaining is to define \deffnheader.
%
\def\makedefun#1{%
  \expandafter\let\csname E#1\endcsname = \Edefun
  \edef\temp{\noexpand\domakedefun
    \makecsname{#1}\makecsname{#1x}\makecsname{#1header}}%
  \temp
}

% \domakedefun \deffn \deffnx \deffnheader
%
% Define \deffn and \deffnx, without parameters.
% \deffnheader has to be defined explicitly.
%
\def\domakedefun#1#2#3{%
  \envdef#1{%
    \startdefun
    \parseargusing\activeparens{\printdefunline#3}%
  }%
  \def#2{\dodefunx#1}%
  \def#3%
}

%%% Untyped functions:

% @@deffn category name args
\makedefun{deffn}{\deffngeneral{}}

% @@deffn category class name args
\makedefun{defop}#1 {\defopon{#1\ \putwordon}}

% \defopon {category on}class name args
\def\defopon#1#2 {\deffngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }

% \deffngeneral {subind}category name args
%
\def\deffngeneral#1#2 #3 #4\endheader{%
  % Remember that \dosubind{fn}{foo}{} is equivalent to \doind{fn}{foo}.
  \dosubind{fn}{\code{#3}}{#1}%
  \defname{#2}{}{#3}\magicamp\defunargs{#4\unskip}%
}

%%% Typed functions:

% @@deftypefn category type name args
\makedefun{deftypefn}{\deftypefngeneral{}}

% @@deftypeop category class type name args
\makedefun{deftypeop}#1 {\deftypeopon{#1\ \putwordon}}

% \deftypeopon {category on}class type name args
\def\deftypeopon#1#2 {\deftypefngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }

% \deftypefngeneral {subind}category type name args
%
\def\deftypefngeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{fn}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
}

%%% Typed variables:

% @@deftypevr category type var args
\makedefun{deftypevr}{\deftypecvgeneral{}}

% @@deftypecv category class type var args
\makedefun{deftypecv}#1 {\deftypecvof{#1\ \putwordof}}

% \deftypecvof {category of}class type var args
\def\deftypecvof#1#2 {\deftypecvgeneral{\putwordof\ \code{#2}}{#1\ \code{#2}} }

% \deftypecvgeneral {subind}category type var args
%
\def\deftypecvgeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{vr}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
}

%%% Untyped variables:

% @@defvr category var args
\makedefun{defvr}#1 {\deftypevrheader{#1} {} }

% @@defcv category class var args
\makedefun{defcv}#1 {\defcvof{#1\ \putwordof}}

% \defcvof {category of}class var args
\def\defcvof#1#2 {\deftypecvof{#1}#2 {} }

%%% Type:
% @@deftp category name args
\makedefun{deftp}#1 #2 #3\endheader{%
  \doind{tp}{\code{#2}}%
  \defname{#1}{}{#2}\defunargs{#3\unskip}%
}

% Remaining @@defun-like shortcuts:
\makedefun{defun}{\deffnheader{\putwordDeffunc} }
\makedefun{defmac}{\deffnheader{\putwordDefmac} }
\makedefun{defspec}{\deffnheader{\putwordDefspec} }
\makedefun{deftypefun}{\deftypefnheader{\putwordDeffunc} }
\makedefun{defvar}{\defvrheader{\putwordDefvar} }
\makedefun{defopt}{\defvrheader{\putwordDefopt} }
\makedefun{deftypevar}{\deftypevrheader{\putwordDefvar} }
\makedefun{defmethod}{\defopon\putwordMethodon}
\makedefun{deftypemethod}{\deftypeopon\putwordMethodon}
\makedefun{defivar}{\defcvof\putwordInstanceVariableof}
\makedefun{deftypeivar}{\deftypecvof\putwordInstanceVariableof}

% \defname, which formats the name of the @@def (not the args).
% #1 is the category, such as "Function".
% #2 is the return type, if any.
% #3 is the function name.
%
% We are followed by (but not passed) the arguments, if any.
%
\def\defname#1#2#3{%
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \advance\leftskip by -\defbodyindent
  %
  % How we'll format the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \def\temp{#1}%
  \setbox0=\hbox{\kern\deflastargmargin \ifx\temp\empty\else [\rm\temp]\fi}
  %
  % Figure out line sizes for the paragraph shape.
  % The first line needs space for \box0; but if \rightskip is nonzero,
  % we need only space for the part of \box0 which exceeds it:
  \dimen0=\hsize  \advance\dimen0 by -\wd0  \advance\dimen0 by \rightskip
  % The continuations:
  \dimen2=\hsize  \advance\dimen2 by -\defargsindent
  % (plain.tex says that \dimen1 should be used only as global.)
  \parshape 2 0in \dimen0 \defargsindent \dimen2
  %
  % Put the type name to the right margin.
  \noindent
  \hbox to 0pt{%
    \hfil\box0 \kern-\hsize
    % \hsize has to be shortened this way:
    \kern\leftskip
    % Intentionally do not respect \rightskip, since we need the space.
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \exdentamount=\defbodyindent
  {%
    % defun fonts. We use typewriter by default (used to be bold) because:
    % . we're printing identifiers, they should be in tt in principle.
    % . in languages with many accents, such as Czech or French, it's
    %   common to leave accents off identifiers.  The result looks ok in
    %   tt, but exceedingly strange in rm.
    % . we don't want -- and --- to be treated as ligatures.
    % . this still does not fix the ?` and !` ligatures, but so far no
    %   one has made identifiers using them :).
    \df \tt
    \def\temp{#2}% return value type
    \ifx\temp\empty\else \tclose{\temp} \fi
    #3% output function name
  }%
  {\rm\enskip}% hskip 0.5 em of \tenrm
  %
  \boldbrax
  % arguments will be output next, if any.
}

% Print arguments in slanted roman (not ttsl), inconsistently with using
% tt for the name.  This is because literal text is sometimes needed in
% the argument list (groff manual), and ttsl and tt are not very
% distinguishable.  Prevent hyphenation at `-' chars.
%
\def\defunargs#1{%
  % use sl by default (not ttsl),
  % tt for the names.
  \df \sl \hyphenchar\font=0
  %
  % On the other hand, if an argument has two dashes (for instance), we
  % want a way to get ttsl.  Let's try @@var for that.
  \def\var##1{{\setupmarkupstyle{var}\ttslanted{##1}}}%
  #1%
  \sl\hyphenchar\font=45
}

% We want ()&[] to print specially on the defun line.
%
\def\activeparens{%
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\[=\active \catcode`\]=\active
  \catcode`\&=\active
}

% Make control sequences which act like normal parenthesis chars.
\let\lparen = ( \let\rparen = )

% Be sure that we always have a definition for `(', etc.  For example,
% if the fn name has parens in it, \boldbrax will not be in effect yet,
% so TeX would otherwise complain about undefined control sequence.
{
  \activeparens
  \global\let(=\lparen \global\let)=\rparen
  \global\let[=\lbrack \global\let]=\rbrack
  \global\let& = \&

  \gdef\boldbrax{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb}
  \gdef\magicamp{\let&=\amprm}
}

\newcount\parencount

% If we encounter &foo, then turn on ()-hacking afterwards
\newif\ifampseen
\def\amprm#1 {\ampseentrue{\bf\&#1 }}

\def\parenfont{%
  \ifampseen
    % At the first level, print parens in roman,
    % otherwise use the default font.
    \ifnum \parencount=1 \rm \fi
  \else
    % The \sf parens (in \boldbrax) actually are a little bolder than
    % the contained text.  This is especially needed for [ and ] .
    \sf
  \fi
}
\def\infirstlevel#1{%
  \ifampseen
    \ifnum\parencount=1
      #1%
    \fi
  \fi
}
\def\bfafterword#1 {#1 \bf}

\def\opnr{%
  \global\advance\parencount by 1
  {\parenfont(}%
  \infirstlevel \bfafterword
}
\def\clnr{%
  {\parenfont)}%
  \infirstlevel \sl
  \global\advance\parencount by -1
}

\newcount\brackcount
\def\lbrb{%
  \global\advance\brackcount by 1
  {\bf[}%
}
\def\rbrb{%
  {\bf]}%
  \global\advance\brackcount by -1
}

\def\checkparencounts{%
  \ifnum\parencount=0 \else \badparencount \fi
  \ifnum\brackcount=0 \else \badbrackcount \fi
}
% these should not use \errmessage; the glibc manual, at least, actually
% has such constructs (when documenting function pointers).
\def\badparencount{%
  \message{Warning: unbalanced parentheses in @@def...}%
  \global\parencount=0
}
\def\badbrackcount{%
  \message{Warning: unbalanced square brackets in @@def...}%
  \global\brackcount=0
}


\message{macros,}
% @@macro.

% To do this right we need a feature of e-TeX, \scantokens,
% which we arrange to emulate with a temporary file in ordinary TeX.
\ifx\eTeXversion\undefined
  \newwrite\macscribble
  \def\scantokens#1{%
    \toks0={#1}%
    \immediate\openout\macscribble=\jobname.tmp
    \immediate\write\macscribble{\the\toks0}%
    \immediate\closeout\macscribble
    \input \jobname.tmp
  }
\fi

\def\scanmacro#1{%
  \begingroup
    \newlinechar`\^^M
    \let\xeatspaces\eatspaces
    % Undo catcode changes of \startcontents and \doprintindex
    % When called from @@insertcopying or (short)caption, we need active
    % backslash to get it printed correctly.  Previously, we had
    % \catcode`\\=\other instead.  We'll see whether a problem appears
    % with macro expansion.				--kasal, 19aug04
    \catcode`\@@=0 \catcode`\\=\active \escapechar=`\@@
    % ... and \example
    \spaceisspace
    %
    % Append \endinput to make sure that TeX does not see the ending newline.
    % I've verified that it is necessary both for e-TeX and for ordinary TeX
    %							--kasal, 29nov03
    \scantokens{#1\endinput}%
  \endgroup
}

\def\scanexp#1{%
  \edef\temp{\noexpand\scanmacro{#1}}%
  \temp
}

\newcount\paramno   % Count of parameters
\newtoks\macname    % Macro name
\newif\ifrecursive  % Is it recursive?

% List of all defined macros in the form
%    \definedummyword\macro1\definedummyword\macro2...
% Currently is also contains all @@aliases; the list can be split
% if there is a need.
\def\macrolist{}

% Add the macro to \macrolist
\def\addtomacrolist#1{\expandafter \addtomacrolistxxx \csname#1\endcsname}
\def\addtomacrolistxxx#1{%
     \toks0 = \expandafter{\macrolist\definedummyword#1}%
     \xdef\macrolist{\the\toks0}%
}

% Utility routines.
% This does \let #1 = #2, with \csnames; that is,
%   \let \csname#1\endcsname = \csname#2\endcsname
% (except of course we have to play expansion games).
%
\def\cslet#1#2{%
  \expandafter\let
  \csname#1\expandafter\endcsname
  \csname#2\endcsname
}

% Trim leading and trailing spaces off a string.
% Concepts from aro-bend problem 15 (see CTAN).
{\catcode`\@@=11
\gdef\eatspaces #1{\expandafter\trim@@\expandafter{#1 }}
\gdef\trim@@ #1{\trim@@@@ @@#1 @@ #1 @@ @@@@}
\gdef\trim@@@@ #1@@ #2@@ #3@@@@{\trim@@@@@@\empty #2 @@}
\def\unbrace#1{#1}
\unbrace{\gdef\trim@@@@@@ #1 } #2@@{#1}
}

% Trim a single trailing ^^M off a string.
{\catcode`\^^M=\other \catcode`\Q=3%
\gdef\eatcr #1{\eatcra #1Q^^MQ}%
\gdef\eatcra#1^^MQ{\eatcrb#1Q}%
\gdef\eatcrb#1Q#2Q{#1}%
}

% Macro bodies are absorbed as an argument in a context where
% all characters are catcode 10, 11 or 12, except \ which is active
% (as in normal texinfo). It is necessary to change the definition of \.

% Non-ASCII encodings make 8-bit characters active, so un-activate
% them to avoid their expansion.  Must do this non-globally, to
% confine the change to the current group.

% It's necessary to have hard CRs when the macro is executed. This is
% done by  making ^^M (\endlinechar) catcode 12 when reading the macro
% body, and then making it the \newlinechar in \scanmacro.

\def\scanctxt{%
  \catcode`\"=\other
  \catcode`\+=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\@@=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\~=\other
  \ifx\declaredencoding\ascii \else \setnonasciicharscatcodenonglobal\other \fi
}

\def\scanargctxt{%
  \scanctxt
  \catcode`\\=\other
  \catcode`\^^M=\other
}

\def\macrobodyctxt{%
  \scanctxt
  \catcode`\{=\other
  \catcode`\}=\other
  \catcode`\^^M=\other
  \usembodybackslash
}

\def\macroargctxt{%
  \scanctxt
  \catcode`\\=\other
}

% \mbodybackslash is the definition of \ in @@macro bodies.
% It maps \foo\ => \csname macarg.foo\endcsname => #N
% where N is the macro parameter number.
% We define \csname macarg.\endcsname to be \realbackslash, so
% \\ in macro replacement text gets you a backslash.

{\catcode`@@=0 @@catcode`@@\=@@active
 @@gdef@@usembodybackslash{@@let\=@@mbodybackslash}
 @@gdef@@mbodybackslash#1\{@@csname macarg.#1@@endcsname}
}
\expandafter\def\csname macarg.\endcsname{\realbackslash}

\def\macro{\recursivefalse\parsearg\macroxxx}
\def\rmacro{\recursivetrue\parsearg\macroxxx}

\def\macroxxx#1{%
  \getargs{#1}%           now \macname is the macname and \argl the arglist
  \ifx\argl\empty       % no arguments
     \paramno=0%
  \else
     \expandafter\parsemargdef \argl;%
  \fi
  \if1\csname ismacro.\the\macname\endcsname
     \message{Warning: redefining \the\macname}%
  \else
     \expandafter\ifx\csname \the\macname\endcsname \relax
     \else \errmessage{Macro name \the\macname\space already defined}\fi
     \global\cslet{macsave.\the\macname}{\the\macname}%
     \global\expandafter\let\csname ismacro.\the\macname\endcsname=1%
     \addtomacrolist{\the\macname}%
  \fi
  \begingroup \macrobodyctxt
  \ifrecursive \expandafter\parsermacbody
  \else \expandafter\parsemacbody
  \fi}

\parseargdef\unmacro{%
  \if1\csname ismacro.#1\endcsname
    \global\cslet{#1}{macsave.#1}%
    \global\expandafter\let \csname ismacro.#1\endcsname=0%
    % Remove the macro name from \macrolist:
    \begingroup
      \expandafter\let\csname#1\endcsname \relax
      \let\definedummyword\unmacrodo
      \xdef\macrolist{\macrolist}%
    \endgroup
  \else
    \errmessage{Macro #1 not defined}%
  \fi
}

% Called by \do from \dounmacro on each macro.  The idea is to omit any
% macro definitions that have been changed to \relax.
%
\def\unmacrodo#1{%
  \ifx #1\relax
    % remove this
  \else
    \noexpand\definedummyword \noexpand#1%
  \fi
}

% This makes use of the obscure feature that if the last token of a
% <parameter list> is #, then the preceding argument is delimited by
% an opening brace, and that opening brace is not consumed.
\def\getargs#1{\getargsxxx#1{}}
\def\getargsxxx#1#{\getmacname #1 \relax\getmacargs}
\def\getmacname #1 #2\relax{\macname={#1}}
\def\getmacargs#1{\def\argl{#1}}

% Parse the optional {params} list.  Set up \paramno and \paramlist
% so \defmacro knows what to do.  Define \macarg.blah for each blah
% in the params list, to be ##N where N is the position in that list.
% That gets used by \mbodybackslash (above).

% We need to get `macro parameter char #' into several definitions.
% The technique used is stolen from LaTeX:  let \hash be something
% unexpandable, insert that wherever you need a #, and then redefine
% it to # just before using the token list produced.
%
% The same technique is used to protect \eatspaces till just before
% the macro is used.

\def\parsemargdef#1;{\paramno=0\def\paramlist{}%
        \let\hash\relax\let\xeatspaces\relax\parsemargdefxxx#1,;,}
\def\parsemargdefxxx#1,{%
  \if#1;\let\next=\relax
  \else \let\next=\parsemargdefxxx
    \advance\paramno by 1%
    \expandafter\edef\csname macarg.\eatspaces{#1}\endcsname
        {\xeatspaces{\hash\the\paramno}}%
    \edef\paramlist{\paramlist\hash\the\paramno,}%
  \fi\next}

% These two commands read recursive and nonrecursive macro bodies.
% (They're different since rec and nonrec macros end differently.)

\long\def\parsemacbody#1@@end macro%
{\xdef\temp{\eatcr{#1}}\endgroup\defmacro}%
\long\def\parsermacbody#1@@end rmacro%
{\xdef\temp{\eatcr{#1}}\endgroup\defmacro}%

% This defines the macro itself. There are six cases: recursive and
% nonrecursive macros of zero, one, and many arguments.
% Much magic with \expandafter here.
% \xdef is used so that macro definitions will survive the file
% they're defined in; @@include reads the file inside a group.
\def\defmacro{%
  \let\hash=##% convert placeholders to macro parameter chars
  \ifrecursive
    \ifcase\paramno
    % 0
      \expandafter\xdef\csname\the\macname\endcsname{%
        \noexpand\scanmacro{\temp}}%
    \or % 1
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \noexpand\braceorline
         \expandafter\noexpand\csname\the\macname xxx\endcsname}%
      \expandafter\xdef\csname\the\macname xxx\endcsname##1{%
         \egroup\noexpand\scanmacro{\temp}}%
    \else % many
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \noexpand\csname\the\macname xx\endcsname}%
      \expandafter\xdef\csname\the\macname xx\endcsname##1{%
          \expandafter\noexpand\csname\the\macname xxx\endcsname ##1,}%
      \expandafter\expandafter
      \expandafter\xdef
      \expandafter\expandafter
        \csname\the\macname xxx\endcsname
          \paramlist{\egroup\noexpand\scanmacro{\temp}}%
    \fi
  \else
    \ifcase\paramno
    % 0
      \expandafter\xdef\csname\the\macname\endcsname{%
        \noexpand\norecurse{\the\macname}%
        \noexpand\scanmacro{\temp}\egroup}%
    \or % 1
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \noexpand\braceorline
         \expandafter\noexpand\csname\the\macname xxx\endcsname}%
      \expandafter\xdef\csname\the\macname xxx\endcsname##1{%
        \egroup
        \noexpand\norecurse{\the\macname}%
        \noexpand\scanmacro{\temp}\egroup}%
    \else % many
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \expandafter\noexpand\csname\the\macname xx\endcsname}%
      \expandafter\xdef\csname\the\macname xx\endcsname##1{%
          \expandafter\noexpand\csname\the\macname xxx\endcsname ##1,}%
      \expandafter\expandafter
      \expandafter\xdef
      \expandafter\expandafter
      \csname\the\macname xxx\endcsname
      \paramlist{%
          \egroup
          \noexpand\norecurse{\the\macname}%
          \noexpand\scanmacro{\temp}\egroup}%
    \fi
  \fi}

\def\norecurse#1{\bgroup\cslet{#1}{macsave.#1}}

% \braceorline decides whether the next nonwhitespace character is a
% {.  If so it reads up to the closing }, if not, it reads the whole
% line.  Whatever was read is then fed to the next control sequence
% as an argument (by \parsebrace or \parsearg)
\def\braceorline#1{\let\macnamexxx=#1\futurelet\nchar\braceorlinexxx}
\def\braceorlinexxx{%
  \ifx\nchar\bgroup\else
    \expandafter\parsearg
  \fi \macnamexxx}


% @@alias.
% We need some trickery to remove the optional spaces around the equal
% sign.  Just make them active and then expand them all to nothing.
\def\alias{\parseargusing\obeyspaces\aliasxxx}
\def\aliasxxx #1{\aliasyyy#1\relax}
\def\aliasyyy #1=#2\relax{%
  {%
    \expandafter\let\obeyedspace=\empty
    \addtomacrolist{#1}%
    \xdef\next{\global\let\makecsname{#1}=\makecsname{#2}}%
  }%
  \next
}


\message{cross references,}

\newwrite\auxfile
\newif\ifhavexrefs    % True if xref values are known.
\newif\ifwarnedxrefs  % True if we warned once that they aren't known.

% @@inforef is relatively simple.
\def\inforef #1{\inforefzzz #1,,,,**}
\def\inforefzzz #1,#2,#3,#4**{\putwordSee{} \putwordInfo{} \putwordfile{} \file{\ignorespaces #3{}},
  node \samp{\ignorespaces#1{}}}

% @@node's only job in TeX is to define \lastnode, which is used in
% cross-references.  The @@node line might or might not have commas, and
% might or might not have spaces before the first comma, like:
% @@node foo , bar , ...
% We don't want such trailing spaces in the node name.
%
\parseargdef\node{\checkenv{}\donode #1 ,\finishnodeparse}
%
% also remove a trailing comma, in case of something like this:
% @@node Help-Cross,  ,  , Cross-refs
\def\donode#1 ,#2\finishnodeparse{\dodonode #1,\finishnodeparse}
\def\dodonode#1,#2\finishnodeparse{\gdef\lastnode{#1}}

\let\nwnode=\node
\let\lastnode=\empty

% Write a cross-reference definition for the current node.  #1 is the
% type (Ynumbered, Yappendix, Ynothing).
%
\def\donoderef#1{%
  \ifx\lastnode\empty\else
    \setref{\lastnode}{#1}%
    \global\let\lastnode=\empty
  \fi
}

% @@anchor{NAME} -- define xref target at arbitrary point.
%
\newcount\savesfregister
%
\def\savesf{\relax \ifhmode \savesfregister=\spacefactor \fi}
\def\restoresf{\relax \ifhmode \spacefactor=\savesfregister \fi}
\def\anchor#1{\savesf \setref{#1}{Ynothing}\restoresf \ignorespaces}

% \setref{NAME}{SNT} defines a cross-reference point NAME (a node or an
% anchor), which consists of three parts:
% 1) NAME-title - the current sectioning name taken from \lastsection,
%                 or the anchor name.
% 2) NAME-snt   - section number and type, passed as the SNT arg, or
%                 empty for anchors.
% 3) NAME-pg    - the page number.
%
% This is called from \donoderef, \anchor, and \dofloat.  In the case of
% floats, there is an additional part, which is not written here:
% 4) NAME-lof   - the text as it should appear in a @@listoffloats.
%
\def\setref#1#2{%
  \pdfmkdest{#1}%
  \iflinks
    {%
      \atdummies  % preserve commands, but don't expand them
      \edef\writexrdef##1##2{%
	\write\auxfile{@@xrdef{#1-% #1 of \setref, expanded by the \edef
	  ##1}{##2}}% these are parameters of \writexrdef
      }%
      \toks0 = \expandafter{\lastsection}%
      \immediate \writexrdef{title}{\the\toks0 }%
      \immediate \writexrdef{snt}{\csname #2\endcsname}% \Ynumbered etc.
      \safewhatsit{\writexrdef{pg}{\folio}}% will be written later, during \shipout
    }%
  \fi
}

% @@xref, @@pxref, and @@ref generate cross-references.  For \xrefX, #1 is
% the node name, #2 the name of the Info cross-reference, #3 the printed
% node name, #4 the name of the Info file, #5 the name of the printed
% manual.  All but the node name can be omitted.
%
\def\pxref#1{\putwordsee{} \xrefX[#1,,,,,,,]}
\def\xref#1{\putwordSee{} \xrefX[#1,,,,,,,]}
\def\ref#1{\xrefX[#1,,,,,,,]}
\def\xrefX[#1,#2,#3,#4,#5,#6]{\begingroup
  \unsepspaces
  \def\printedmanual{\ignorespaces #5}%
  \def\printedrefname{\ignorespaces #3}%
  \setbox1=\hbox{\printedmanual\unskip}%
  \setbox0=\hbox{\printedrefname\unskip}%
  \ifdim \wd0 = 0pt
    % No printed node name was explicitly given.
    \expandafter\ifx\csname SETxref-automatic-section-title\endcsname\relax
      % Use the node name inside the square brackets.
      \def\printedrefname{\ignorespaces #1}%
    \else
      % Use the actual chapter/section title appear inside
      % the square brackets.  Use the real section title if we have it.
      \ifdim \wd1 > 0pt
        % It is in another manual, so we don't have it.
        \def\printedrefname{\ignorespaces #1}%
      \else
        \ifhavexrefs
          % We know the real title if we have the xref values.
          \def\printedrefname{\refx{#1-title}{}}%
        \else
          % Otherwise just copy the Info node name.
          \def\printedrefname{\ignorespaces #1}%
        \fi%
      \fi
    \fi
  \fi
  %
  % Make link in pdf output.
  \ifpdf
    {\indexnofonts
     \turnoffactive
     % This expands tokens, so do it after making catcode changes, so _
     % etc. don't get their TeX definitions.
     \getfilename{#4}%
     %
     % See comments at \activebackslashdouble.
     {\activebackslashdouble \xdef\pdfxrefdest{#1}%
      \backslashparens\pdfxrefdest}%
     %
     \leavevmode
     \startlink attr{/Border [0 0 0]}%
     \ifnum\filenamelength>0
       goto file{\the\filename.pdf} name{\pdfxrefdest}%
     \else
       goto name{\pdfmkpgn{\pdfxrefdest}}%
     \fi
    }%
    \setcolor{\linkcolor}%
  \fi
  %
  % Float references are printed completely differently: "Figure 1.2"
  % instead of "[somenode], p.3".  We distinguish them by the
  % LABEL-title being set to a magic string.
  {%
    % Have to otherify everything special to allow the \csname to
    % include an _ in the xref name, etc.
    \indexnofonts
    \turnoffactive
    \expandafter\global\expandafter\let\expandafter\Xthisreftitle
      \csname XR#1-title\endcsname
  }%
  \iffloat\Xthisreftitle
    % If the user specified the print name (third arg) to the ref,
    % print it instead of our usual "Figure 1.2".
    \ifdim\wd0 = 0pt
      \refx{#1-snt}{}%
    \else
      \printedrefname
    \fi
    %
    % if the user also gave the printed manual name (fifth arg), append
    % "in MANUALNAME".
    \ifdim \wd1 > 0pt
      \space \putwordin{} \cite{\printedmanual}%
    \fi
  \else
    % node/anchor (non-float) references.
    %
    % If we use \unhbox0 and \unhbox1 to print the node names, TeX does not
    % insert empty discretionaries after hyphens, which means that it will
    % not find a line break at a hyphen in a node names.  Since some manuals
    % are best written with fairly long node names, containing hyphens, this
    % is a loss.  Therefore, we give the text of the node name again, so it
    % is as if TeX is seeing it for the first time.
    \ifdim \wd1 > 0pt
      \putwordSection{} ``\printedrefname'' \putwordin{} \cite{\printedmanual}%
    \else
      % _ (for example) has to be the character _ for the purposes of the
      % control sequence corresponding to the node, but it has to expand
      % into the usual \leavevmode...\vrule stuff for purposes of
      % printing. So we \turnoffactive for the \refx-snt, back on for the
      % printing, back off for the \refx-pg.
      {\turnoffactive
       % Only output a following space if the -snt ref is nonempty; for
       % @@unnumbered and @@anchor, it won't be.
       \setbox2 = \hbox{\ignorespaces \refx{#1-snt}{}}%
       \ifdim \wd2 > 0pt \refx{#1-snt}\space\fi
      }%
      % output the `[mynode]' via a macro so it can be overridden.
      \xrefprintnodename\printedrefname
      %
      % But we always want a comma and a space:
      ,\space
      %
      % output the `page 3'.
      \turnoffactive \putwordpage\tie\refx{#1-pg}{}%
    \fi
  \fi
  \endlink
\endgroup}

% This macro is called from \xrefX for the `[nodename]' part of xref
% output.  It's a separate macro only so it can be changed more easily,
% since square brackets don't work well in some documents.  Particularly
% one that Bob is working on :).
%
\def\xrefprintnodename#1{[#1]}

% Things referred to by \setref.
%
\def\Ynothing{}
\def\Yomitfromtoc{}
\def\Ynumbered{%
  \ifnum\secno=0
    \putwordChapter@@tie \the\chapno
  \else \ifnum\subsecno=0
    \putwordSection@@tie \the\chapno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}
\def\Yappendix{%
  \ifnum\secno=0
     \putwordAppendix@@tie @@char\the\appendixno{}%
  \else \ifnum\subsecno=0
     \putwordSection@@tie @@char\the\appendixno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie @@char\the\appendixno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie
      @@char\the\appendixno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}

% Define \refx{NAME}{SUFFIX} to reference a cross-reference string named NAME.
% If its value is nonempty, SUFFIX is output afterward.
%
\def\refx#1#2{%
  {%
    \indexnofonts
    \otherbackslash
    \expandafter\global\expandafter\let\expandafter\thisrefX
      \csname XR#1\endcsname
  }%
  \ifx\thisrefX\relax
    % If not defined, say something at least.
    \angleleft un\-de\-fined\angleright
    \iflinks
      \ifhavexrefs
        \message{\linenumber Undefined cross reference `#1'.}%
      \else
        \ifwarnedxrefs\else
          \global\warnedxrefstrue
          \message{Cross reference values unknown; you must run TeX again.}%
        \fi
      \fi
    \fi
  \else
    % It's defined, so just use it.
    \thisrefX
  \fi
  #2% Output the suffix in any case.
}

% This is the macro invoked by entries in the aux file.  Usually it's
% just a \def (we prepend XR to the control sequence name to avoid
% collisions).  But if this is a float type, we have more work to do.
%
\def\xrdef#1#2{%
  {% The node name might contain 8-bit characters, which in our current
   % implementation are changed to commands like @@'e.  Don't let these
   % mess up the control sequence name.
    \indexnofonts
    \turnoffactive
    \xdef\safexrefname{#1}%
  }%
  %
  \expandafter\gdef\csname XR\safexrefname\endcsname{#2}% remember this xref
  %
  % Was that xref control sequence that we just defined for a float?
  \expandafter\iffloat\csname XR\safexrefname\endcsname
    % it was a float, and we have the (safe) float type in \iffloattype.
    \expandafter\let\expandafter\floatlist
      \csname floatlist\iffloattype\endcsname
    %
    % Is this the first time we've seen this float type?
    \expandafter\ifx\floatlist\relax
      \toks0 = {\do}% yes, so just \do
    \else
      % had it before, so preserve previous elements in list.
      \toks0 = \expandafter{\floatlist\do}%
    \fi
    %
    % Remember this xref in the control sequence \floatlistFLOATTYPE,
    % for later use in \listoffloats.
    \expandafter\xdef\csname floatlist\iffloattype\endcsname{\the\toks0
      {\safexrefname}}%
  \fi
}

% Read the last existing aux file, if any.  No error if none exists.
%
\def\tryauxfile{%
  \openin 1 \jobname.aux
  \ifeof 1 \else
    \readdatafile{aux}%
    \global\havexrefstrue
  \fi
  \closein 1
}

\def\setupdatafile{%
  \catcode`\^^@@=\other
  \catcode`\^^A=\other
  \catcode`\^^B=\other
  \catcode`\^^C=\other
  \catcode`\^^D=\other
  \catcode`\^^E=\other
  \catcode`\^^F=\other
  \catcode`\^^G=\other
  \catcode`\^^H=\other
  \catcode`\^^K=\other
  \catcode`\^^L=\other
  \catcode`\^^N=\other
  \catcode`\^^P=\other
  \catcode`\^^Q=\other
  \catcode`\^^R=\other
  \catcode`\^^S=\other
  \catcode`\^^T=\other
  \catcode`\^^U=\other
  \catcode`\^^V=\other
  \catcode`\^^W=\other
  \catcode`\^^X=\other
  \catcode`\^^Z=\other
  \catcode`\^^[=\other
  \catcode`\^^\=\other
  \catcode`\^^]=\other
  \catcode`\^^^=\other
  \catcode`\^^_=\other
  % It was suggested to set the catcode of ^ to 7, which would allow ^^e4 etc.
  % in xref tags, i.e., node names.  But since ^^e4 notation isn't
  % supported in the main text, it doesn't seem desirable.  Furthermore,
  % that is not enough: for node names that actually contain a ^
  % character, we would end up writing a line like this: 'xrdef {'hat
  % b-title}{'hat b} and \xrdef does a \csname...\endcsname on the first
  % argument, and \hat is not an expandable control sequence.  It could
  % all be worked out, but why?  Either we support ^^ or we don't.
  %
  % The other change necessary for this was to define \auxhat:
  % \def\auxhat{\def^{'hat }}% extra space so ok if followed by letter
  % and then to call \auxhat in \setq.
  %
  \catcode`\^=\other
  %
  % Special characters.  Should be turned off anyway, but...
  \catcode`\~=\other
  \catcode`\[=\other
  \catcode`\]=\other
  \catcode`\"=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\$=\other
  \catcode`\#=\other
  \catcode`\&=\other
  \catcode`\%=\other
  \catcode`+=\other % avoid \+ for paranoia even though we've turned it off
  %
  % This is to support \ in node names and titles, since the \
  % characters end up in a \csname.  It's easier than
  % leaving it active and making its active definition an actual \
  % character.  What I don't understand is why it works in the *value*
  % of the xrdef.  Seems like it should be a catcode12 \, and that
  % should not typeset properly.  But it works, so I'm moving on for
  % now.  --karl, 15jan04.
  \catcode`\\=\other
  %
  % Make the characters 128-255 be printing characters.
  {%
    \count1=128
    \def\loop{%
      \catcode\count1=\other
      \advance\count1 by 1
      \ifnum \count1<256 \loop \fi
    }%
  }%
  %
  % @@ is our escape character in .aux files, and we need braces.
  \catcode`\{=1
  \catcode`\}=2
  \catcode`\@@=0
}

\def\readdatafile#1{%
\begingroup
  \setupdatafile
  \input\jobname.#1
\endgroup}


\message{insertions,}
% including footnotes.

\newcount \footnoteno

% The trailing space in the following definition for supereject is
% vital for proper filling; pages come out unaligned when you do a
% pagealignmacro call if that space before the closing brace is
% removed. (Generally, numeric constants should always be followed by a
% space to prevent strange expansion errors.)
\def\supereject{\par\penalty -20000\footnoteno =0 }

% @@footnotestyle is meaningful for info output only.
\let\footnotestyle=\comment

{\catcode `\@@=11
%
% Auto-number footnotes.  Otherwise like plain.
\gdef\footnote{%
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
  \global\advance\footnoteno by \@@ne
  \edef\thisfootno{$^{\the\footnoteno}$}%
  %
  % In case the footnote comes at the end of a sentence, preserve the
  % extra spacing after we do the footnote number.
  \let\@@sf\empty
  \ifhmode\edef\@@sf{\spacefactor\the\spacefactor}\ptexslash\fi
  %
  % Remove inadvertent blank space before typesetting the footnote number.
  \unskip
  \thisfootno\@@sf
  \dofootnote
}%

% Don't bother with the trickery in plain.tex to not require the
% footnote text as a parameter.  Our footnotes don't need to be so general.
%
% Oh yes, they do; otherwise, @@ifset (and anything else that uses
% \parseargline) fails inside footnotes because the tokens are fixed when
% the footnote is read.  --karl, 16nov96.
%
\gdef\dofootnote{%
  \insert\footins\bgroup
  % We want to typeset this text as a normal paragraph, even if the
  % footnote reference occurs in (for example) a display environment.
  % So reset some parameters.
  \hsize=\pagewidth
  \interlinepenalty\interfootnotelinepenalty
  \splittopskip\ht\strutbox % top baseline for broken footnotes
  \splitmaxdepth\dp\strutbox
  \floatingpenalty\@@MM
  \leftskip\z@@skip
  \rightskip\z@@skip
  \spaceskip\z@@skip
  \xspaceskip\z@@skip
  \parindent\defaultparindent
  %
  \smallfonts \rm
  %
  % Because we use hanging indentation in footnotes, a @@noindent appears
  % to exdent this text, so make it be a no-op.  makeinfo does not use
  % hanging indentation so @@noindent can still be needed within footnote
  % text after an @@example or the like (not that this is good style).
  \let\noindent = \relax
  %
  % Hang the footnote text off the number.  Use \everypar in case the
  % footnote extends for more than one paragraph.
  \everypar = {\hang}%
  \textindent{\thisfootno}%
  %
  % Don't crash into the line above the footnote text.  Since this
  % expands into a box, it must come within the paragraph, lest it
  % provide a place where TeX can split the footnote.
  \footstrut
  \futurelet\next\fo@@t
}
}%end \catcode `\@@=11

% In case a @@footnote appears in a vbox, save the footnote text and create
% the real \insert just after the vbox finished.  Otherwise, the insertion
% would be lost.
% Similarly, if a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is finished.
% And the same can be done for other insert classes.  --kasal, 16nov03.

% Replace the \insert primitive by a cheating macro.
% Deeper inside, just make sure that the saved insertions are not spilled
% out prematurely.
%
\def\startsavinginserts{%
  \ifx \insert\ptexinsert
    \let\insert\saveinsert
  \else
    \let\checkinserts\relax
  \fi
}

% This \insert replacement works for both \insert\footins{foo} and
% \insert\footins\bgroup foo\egroup, but it doesn't work for \insert27{foo}.
%
\def\saveinsert#1{%
  \edef\next{\noexpand\savetobox \makeSAVEname#1}%
  \afterassignment\next
  % swallow the left brace
  \let\temp =
}
\def\makeSAVEname#1{\makecsname{SAVE\expandafter\gobble\string#1}}
\def\savetobox#1{\global\setbox#1 = \vbox\bgroup \unvbox#1}

\def\checksaveins#1{\ifvoid#1\else \placesaveins#1\fi}

\def\placesaveins#1{%
  \ptexinsert \csname\expandafter\gobblesave\string#1\endcsname
    {\box#1}%
}

% eat @@SAVE -- beware, all of them have catcode \other:
{
  \def\dospecials{\do S\do A\do V\do E} \uncatcodespecials  %  ;-)
  \gdef\gobblesave @@SAVE{}
}

% initialization:
\def\newsaveins #1{%
  \edef\next{\noexpand\newsaveinsX \makeSAVEname#1}%
  \next
}
\def\newsaveinsX #1{%
  \csname newbox\endcsname #1%
  \expandafter\def\expandafter\checkinserts\expandafter{\checkinserts
    \checksaveins #1}%
}

% initialize:
\let\checkinserts\empty
\newsaveins\footins
\newsaveins\margin


% @@image.  We use the macros from epsf.tex to support this.
% If epsf.tex is not installed and @@image is used, we complain.
%
% Check for and read epsf.tex up front.  If we read it only at @@image
% time, we might be inside a group, and then its definitions would get
% undone and the next image would fail.
\openin 1 = epsf.tex
\ifeof 1 \else
  % Do not bother showing banner with epsf.tex v2.7k (available in
  % doc/epsf.tex and on ctan).
  \def\epsfannounce{\toks0 = }%
  \input epsf.tex
\fi
\closein 1
%
% We will only complain once about lack of epsf.tex.
\newif\ifwarnednoepsf
\newhelp\noepsfhelp{epsf.tex must be installed for images to
  work.  It is also included in the Texinfo distribution, or you can get
  it from ftp://tug.org/tex/epsf.tex.}
%
\def\image#1{%
  \ifx\epsfbox\undefined
    \ifwarnednoepsf \else
      \errhelp = \noepsfhelp
      \errmessage{epsf.tex not found, images will be ignored}%
      \global\warnednoepsftrue
    \fi
  \else
    \imagexxx #1,,,,,\finish
  \fi
}
%
% Arguments to @@image:
% #1 is (mandatory) image filename; we tack on .eps extension.
% #2 is (optional) width, #3 is (optional) height.
% #4 is (ignored optional) html alt text.
% #5 is (ignored optional) extension.
% #6 is just the usual extra ignored arg for parsing this stuff.
\newif\ifimagevmode
\def\imagexxx#1,#2,#3,#4,#5,#6\finish{\begingroup
  \catcode`\^^M = 5     % in case we're inside an example
  \normalturnoffactive  % allow _ et al. in names
  % If the image is by itself, center it.
  \ifvmode
    \imagevmodetrue
    \nobreak\medskip
    % Usually we'll have text after the image which will insert
    % \parskip glue, so insert it here too to equalize the space
    % above and below.
    \nobreak\vskip\parskip
    \nobreak
  \fi
  %
  % Leave vertical mode so that indentation from an enclosing
  % environment such as @@quotation is respected.  On the other hand, if
  % it's at the top level, we don't want the normal paragraph indentation.
  \noindent
  %
  % Output the image.
  \ifpdf
    \dopdfimage{#1}{#2}{#3}%
  \else
    % \epsfbox itself resets \epsf?size at each figure.
    \setbox0 = \hbox{\ignorespaces #2}\ifdim\wd0 > 0pt \epsfxsize=#2\relax \fi
    \setbox0 = \hbox{\ignorespaces #3}\ifdim\wd0 > 0pt \epsfysize=#3\relax \fi
    \epsfbox{#1.eps}%
  \fi
  %
  \ifimagevmode \medskip \fi  % space after the standalone image
\endgroup}


% @@float FLOATTYPE,LABEL,LOC ... @@end float for displayed figures, tables,
% etc.  We don't actually implement floating yet, we always include the
% float "here".  But it seemed the best name for the future.
%
\envparseargdef\float{\eatcommaspace\eatcommaspace\dofloat#1, , ,\finish}

% There may be a space before second and/or third parameter; delete it.
\def\eatcommaspace#1, {#1,}

% #1 is the optional FLOATTYPE, the text label for this float, typically
% "Figure", "Table", "Example", etc.  Can't contain commas.  If omitted,
% this float will not be numbered and cannot be referred to.
%
% #2 is the optional xref label.  Also must be present for the float to
% be referable.
%
% #3 is the optional positioning argument; for now, it is ignored.  It
% will somehow specify the positions allowed to float to (here, top, bottom).
%
% We keep a separate counter for each FLOATTYPE, which we reset at each
% chapter-level command.
\let\resetallfloatnos=\empty
%
\def\dofloat#1,#2,#3,#4\finish{%
  \let\thiscaption=\empty
  \let\thisshortcaption=\empty
  %
  % don't lose footnotes inside @@float.
  %
  % BEWARE: when the floats start float, we have to issue warning whenever an
  % insert appears inside a float which could possibly float. --kasal, 26may04
  %
  \startsavinginserts
  %
  % We can't be used inside a paragraph.
  \par
  %
  \vtop\bgroup
    \def\floattype{#1}%
    \def\floatlabel{#2}%
    \def\floatloc{#3}% we do nothing with this yet.
    %
    \ifx\floattype\empty
      \let\safefloattype=\empty
    \else
      {%
        % the floattype might have accents or other special characters,
        % but we need to use it in a control sequence name.
        \indexnofonts
        \turnoffactive
        \xdef\safefloattype{\floattype}%
      }%
    \fi
    %
    % If label is given but no type, we handle that as the empty type.
    \ifx\floatlabel\empty \else
      % We want each FLOATTYPE to be numbered separately (Figure 1,
      % Table 1, Figure 2, ...).  (And if no label, no number.)
      %
      \expandafter\getfloatno\csname\safefloattype floatno\endcsname
      \global\advance\floatno by 1
      %
      {%
        % This magic value for \lastsection is output by \setref as the
        % XREFLABEL-title value.  \xrefX uses it to distinguish float
        % labels (which have a completely different output format) from
        % node and anchor labels.  And \xrdef uses it to construct the
        % lists of floats.
        %
        \edef\lastsection{\floatmagic=\safefloattype}%
        \setref{\floatlabel}{Yfloat}%
      }%
    \fi
    %
    % start with \parskip glue, I guess.
    \vskip\parskip
    %
    % Don't suppress indentation if a float happens to start a section.
    \restorefirstparagraphindent
}

% we have these possibilities:
% @@float Foo,lbl & @@caption{Cap}: Foo 1.1: Cap
% @@float Foo,lbl & no caption:    Foo 1.1
% @@float Foo & @@caption{Cap}:     Foo: Cap
% @@float Foo & no caption:        Foo
% @@float ,lbl & Caption{Cap}:     1.1: Cap
% @@float ,lbl & no caption:       1.1
% @@float & @@caption{Cap}:         Cap
% @@float & no caption:
%
\def\Efloat{%
    \let\floatident = \empty
    %
    % In all cases, if we have a float type, it comes first.
    \ifx\floattype\empty \else \def\floatident{\floattype}\fi
    %
    % If we have an xref label, the number comes next.
    \ifx\floatlabel\empty \else
      \ifx\floattype\empty \else % if also had float type, need tie first.
        \appendtomacro\floatident{\tie}%
      \fi
      % the number.
      \appendtomacro\floatident{\chaplevelprefix\the\floatno}%
    \fi
    %
    % Start the printed caption with what we've constructed in
    % \floatident, but keep it separate; we need \floatident again.
    \let\captionline = \floatident
    %
    \ifx\thiscaption\empty \else
      \ifx\floatident\empty \else
	\appendtomacro\captionline{: }% had ident, so need a colon between
      \fi
      %
      % caption text.
      \appendtomacro\captionline{\scanexp\thiscaption}%
    \fi
    %
    % If we have anything to print, print it, with space before.
    % Eventually this needs to become an \insert.
    \ifx\captionline\empty \else
      \vskip.5\parskip
      \captionline
      %
      % Space below caption.
      \vskip\parskip
    \fi
    %
    % If have an xref label, write the list of floats info.  Do this
    % after the caption, to avoid chance of it being a breakpoint.
    \ifx\floatlabel\empty \else
      % Write the text that goes in the lof to the aux file as
      % \floatlabel-lof.  Besides \floatident, we include the short
      % caption if specified, else the full caption if specified, else nothing.
      {%
        \atdummies
        %
        % since we read the caption text in the macro world, where ^^M
        % is turned into a normal character, we have to scan it back, so
        % we don't write the literal three characters "^^M" into the aux file.
	\scanexp{%
	  \xdef\noexpand\gtemp{%
	    \ifx\thisshortcaption\empty
	      \thiscaption
	    \else
	      \thisshortcaption
	    \fi
	  }%
	}%
        \immediate\write\auxfile{@@xrdef{\floatlabel-lof}{\floatident
	  \ifx\gtemp\empty \else : \gtemp \fi}}%
      }%
    \fi
  \egroup  % end of \vtop
  %
  % place the captured inserts
  %
  % BEWARE: when the floats start floating, we have to issue warning
  % whenever an insert appears inside a float which could possibly
  % float. --kasal, 26may04
  %
  \checkinserts
}

% Append the tokens #2 to the definition of macro #1, not expanding either.
%
\def\appendtomacro#1#2{%
  \expandafter\def\expandafter#1\expandafter{#1#2}%
}

% @@caption, @@shortcaption
%
\def\caption{\docaption\thiscaption}
\def\shortcaption{\docaption\thisshortcaption}
\def\docaption{\checkenv\float \bgroup\scanargctxt\defcaption}
\def\defcaption#1#2{\egroup \def#1{#2}}

% The parameter is the control sequence identifying the counter we are
% going to use.  Create it if it doesn't exist and assign it to \floatno.
\def\getfloatno#1{%
  \ifx#1\relax
      % Haven't seen this figure type before.
      \csname newcount\endcsname #1%
      %
      % Remember to reset this floatno at the next chap.
      \expandafter\gdef\expandafter\resetallfloatnos
        \expandafter{\resetallfloatnos #1=0 }%
  \fi
  \let\floatno#1%
}

% \setref calls this to get the XREFLABEL-snt value.  We want an @@xref
% to the FLOATLABEL to expand to "Figure 3.1".  We call \setref when we
% first read the @@float command.
%
\def\Yfloat{\floattype@@tie \chaplevelprefix\the\floatno}%

% Magic string used for the XREFLABEL-title value, so \xrefX can
% distinguish floats from other xref types.
\def\floatmagic{!!float!!}

% #1 is the control sequence we are passed; we expand into a conditional
% which is true if #1 represents a float ref.  That is, the magic
% \lastsection value which we \setref above.
%
\def\iffloat#1{\expandafter\doiffloat#1==\finish}
%
% #1 is (maybe) the \floatmagic string.  If so, #2 will be the
% (safe) float type for this float.  We set \iffloattype to #2.
%
\def\doiffloat#1=#2=#3\finish{%
  \def\temp{#1}%
  \def\iffloattype{#2}%
  \ifx\temp\floatmagic
}

% @@listoffloats FLOATTYPE - print a list of floats like a table of contents.
%
\parseargdef\listoffloats{%
  \def\floattype{#1}% floattype
  {%
    % the floattype might have accents or other special characters,
    % but we need to use it in a control sequence name.
    \indexnofonts
    \turnoffactive
    \xdef\safefloattype{\floattype}%
  }%
  %
  % \xrdef saves the floats as a \do-list in \floatlistSAFEFLOATTYPE.
  \expandafter\ifx\csname floatlist\safefloattype\endcsname \relax
    \ifhavexrefs
      % if the user said @@listoffloats foo but never @@float foo.
      \message{\linenumber No `\safefloattype' floats to list.}%
    \fi
  \else
    \begingroup
      \leftskip=\tocindent  % indent these entries like a toc
      \let\do=\listoffloatsdo
      \csname floatlist\safefloattype\endcsname
    \endgroup
  \fi
}

% This is called on each entry in a list of floats.  We're passed the
% xref label, in the form LABEL-title, which is how we save it in the
% aux file.  We strip off the -title and look up \XRLABEL-lof, which
% has the text we're supposed to typeset here.
%
% Figures without xref labels will not be included in the list (since
% they won't appear in the aux file).
%
\def\listoffloatsdo#1{\listoffloatsdoentry#1\finish}
\def\listoffloatsdoentry#1-title\finish{{%
  % Can't fully expand XR#1-lof because it can contain anything.  Just
  % pass the control sequence.  On the other hand, XR#1-pg is just the
  % page number, and we want to fully expand that so we can get a link
  % in pdf output.
  \toksA = \expandafter{\csname XR#1-lof\endcsname}%
  %
  % use the same \entry macro we use to generate the TOC and index.
  \edef\writeentry{\noexpand\entry{\the\toksA}{\csname XR#1-pg\endcsname}}%
  \writeentry
}}


\message{localization,}

% For single-language documents, @@documentlanguage is usually given very
% early, just after @@documentencoding.  Single argument is the language
% (de) or locale (de_DE) abbreviation.
%
{
  \catcode`\_ = \active
  \globaldefs=1
\parseargdef\documentlanguage{\begingroup
  \let_=\normalunderscore  % normal _ character for filenames
  \tex % read txi-??.tex file in plain TeX.
    % Read the file by the name they passed if it exists.
    \openin 1 txi-#1.tex
    \ifeof 1
      \documentlanguagetrywithoutunderscore{#1_\finish}%
    \else
      \globaldefs = 1  % everything in the txi-LL files needs to persist
      \input txi-#1.tex
    \fi
    \closein 1
  \endgroup % end raw TeX
\endgroup}
%
% If they passed de_DE, and txi-de_DE.tex doesn't exist,
% try txi-de.tex.
%
\gdef\documentlanguagetrywithoutunderscore#1_#2\finish{%
  \openin 1 txi-#1.tex
  \ifeof 1
    \errhelp = \nolanghelp
    \errmessage{Cannot read language file txi-#1.tex}%
  \else
    \globaldefs = 1  % everything in the txi-LL files needs to persist
    \input txi-#1.tex
  \fi
  \closein 1
}
}% end of special _ catcode
%
\newhelp\nolanghelp{The given language definition file cannot be found or
is empty.  Maybe you need to install it?  Putting it in the current
directory should work if nowhere else does.}

% This macro is called from txi-??.tex files; the first argument is the
% \language name to set (without the "\lang@@" prefix), the second and
% third args are \{left,right}hyphenmin.
%
% The language names to pass are determined when the format is built.
% See the etex.log file created at that time, e.g.,
% /usr/local/texlive/2008/texmf-var/web2c/pdftex/etex.log.
%
% With TeX Live 2008, etex now includes hyphenation patterns for all
% available languages.  This means we can support hyphenation in
% Texinfo, at least to some extent.  (This still doesn't solve the
% accented characters problem.)
%
\catcode`@@=11
\def\txisetlanguage#1#2#3{%
  % do not set the language if the name is undefined in the current TeX.
  \expandafter\ifx\csname lang@@#1\endcsname \relax
    \message{no patterns for #1}%
  \else
    \global\language = \csname lang@@#1\endcsname
  \fi
  % but there is no harm in adjusting the hyphenmin values regardless.
  \global\lefthyphenmin = #2\relax
  \global\righthyphenmin = #3\relax
}

% Helpers for encodings.
% Set the catcode of characters 128 through 255 to the specified number.
%
\def\setnonasciicharscatcode#1{%
   \count255=128
   \loop\ifnum\count255<256
      \global\catcode\count255=#1\relax
      \advance\count255 by 1
   \repeat
}

\def\setnonasciicharscatcodenonglobal#1{%
   \count255=128
   \loop\ifnum\count255<256
      \catcode\count255=#1\relax
      \advance\count255 by 1
   \repeat
}

% @@documentencoding sets the definition of non-ASCII characters
% according to the specified encoding.
%
\parseargdef\documentencoding{%
  % Encoding being declared for the document.
  \def\declaredencoding{\csname #1.enc\endcsname}%
  %
  % Supported encodings: names converted to tokens in order to be able
  % to compare them with \ifx.
  \def\ascii{\csname US-ASCII.enc\endcsname}%
  \def\latnine{\csname ISO-8859-15.enc\endcsname}%
  \def\latone{\csname ISO-8859-1.enc\endcsname}%
  \def\lattwo{\csname ISO-8859-2.enc\endcsname}%
  \def\utfeight{\csname UTF-8.enc\endcsname}%
  %
  \ifx \declaredencoding \ascii
     \asciichardefs
  %
  \else \ifx \declaredencoding \lattwo
     \setnonasciicharscatcode\active
     \lattwochardefs
  %
  \else \ifx \declaredencoding \latone
     \setnonasciicharscatcode\active
     \latonechardefs
  %
  \else \ifx \declaredencoding \latnine
     \setnonasciicharscatcode\active
     \latninechardefs
  %
  \else \ifx \declaredencoding \utfeight
     \setnonasciicharscatcode\active
     \utfeightchardefs
  %
  \else
    \message{Unknown document encoding #1, ignoring.}%
  %
  \fi % utfeight
  \fi % latnine
  \fi % latone
  \fi % lattwo
  \fi % ascii
}

% A message to be logged when using a character that isn't available
% the default font encoding (OT1).
%
\def\missingcharmsg#1{\message{Character missing in OT1 encoding: #1.}}

% Take account of \c (plain) vs. \, (Texinfo) difference.
\def\cedilla#1{\ifx\c\ptexc\c{#1}\else\,{#1}\fi}

% First, make active non-ASCII characters in order for them to be
% correctly categorized when TeX reads the replacement text of
% macros containing the character definitions.
\setnonasciicharscatcode\active
%
% Latin1 (ISO-8859-1) character definitions.
\def\latonechardefs{%
  \gdef^^a0{~}
  \gdef^^a1{\exclamdown}
  \gdef^^a2{\missingcharmsg{CENT SIGN}}
  \gdef^^a3{{\pounds}}
  \gdef^^a4{\missingcharmsg{CURRENCY SIGN}}
  \gdef^^a5{\missingcharmsg{YEN SIGN}}
  \gdef^^a6{\missingcharmsg{BROKEN BAR}}
  \gdef^^a7{\S}
  \gdef^^a8{\"{}}
  \gdef^^a9{\copyright}
  \gdef^^aa{\ordf}
  \gdef^^ab{\guillemetleft}
  \gdef^^ac{$\lnot$}
  \gdef^^ad{\-}
  \gdef^^ae{\registeredsymbol}
  \gdef^^af{\={}}
  %
  \gdef^^b0{\textdegree}
  \gdef^^b1{$\pm$}
  \gdef^^b2{$^2$}
  \gdef^^b3{$^3$}
  \gdef^^b4{\'{}}
  \gdef^^b5{$\mu$}
  \gdef^^b6{\P}
  %
  \gdef^^b7{$^.$}
  \gdef^^b8{\cedilla\ }
  \gdef^^b9{$^1$}
  \gdef^^ba{\ordm}
  %
  \gdef^^bb{\guilletright}
  \gdef^^bc{$1\over4$}
  \gdef^^bd{$1\over2$}
  \gdef^^be{$3\over4$}
  \gdef^^bf{\questiondown}
  %
  \gdef^^c0{\`A}
  \gdef^^c1{\'A}
  \gdef^^c2{\^A}
  \gdef^^c3{\~A}
  \gdef^^c4{\"A}
  \gdef^^c5{\ringaccent A}
  \gdef^^c6{\AE}
  \gdef^^c7{\cedilla C}
  \gdef^^c8{\`E}
  \gdef^^c9{\'E}
  \gdef^^ca{\^E}
  \gdef^^cb{\"E}
  \gdef^^cc{\`I}
  \gdef^^cd{\'I}
  \gdef^^ce{\^I}
  \gdef^^cf{\"I}
  %
  \gdef^^d0{\DH}
  \gdef^^d1{\~N}
  \gdef^^d2{\`O}
  \gdef^^d3{\'O}
  \gdef^^d4{\^O}
  \gdef^^d5{\~O}
  \gdef^^d6{\"O}
  \gdef^^d7{$\times$}
  \gdef^^d8{\O}
  \gdef^^d9{\`U}
  \gdef^^da{\'U}
  \gdef^^db{\^U}
  \gdef^^dc{\"U}
  \gdef^^dd{\'Y}
  \gdef^^de{\TH}
  \gdef^^df{\ss}
  %
  \gdef^^e0{\`a}
  \gdef^^e1{\'a}
  \gdef^^e2{\^a}
  \gdef^^e3{\~a}
  \gdef^^e4{\"a}
  \gdef^^e5{\ringaccent a}
  \gdef^^e6{\ae}
  \gdef^^e7{\cedilla c}
  \gdef^^e8{\`e}
  \gdef^^e9{\'e}
  \gdef^^ea{\^e}
  \gdef^^eb{\"e}
  \gdef^^ec{\`{\dotless i}}
  \gdef^^ed{\'{\dotless i}}
  \gdef^^ee{\^{\dotless i}}
  \gdef^^ef{\"{\dotless i}}
  %
  \gdef^^f0{\dh}
  \gdef^^f1{\~n}
  \gdef^^f2{\`o}
  \gdef^^f3{\'o}
  \gdef^^f4{\^o}
  \gdef^^f5{\~o}
  \gdef^^f6{\"o}
  \gdef^^f7{$\div$}
  \gdef^^f8{\o}
  \gdef^^f9{\`u}
  \gdef^^fa{\'u}
  \gdef^^fb{\^u}
  \gdef^^fc{\"u}
  \gdef^^fd{\'y}
  \gdef^^fe{\th}
  \gdef^^ff{\"y}
}

% Latin9 (ISO-8859-15) encoding character definitions.
\def\latninechardefs{%
  % Encoding is almost identical to Latin1.
  \latonechardefs
  %
  \gdef^^a4{\euro}
  \gdef^^a6{\v S}
  \gdef^^a8{\v s}
  \gdef^^b4{\v Z}
  \gdef^^b8{\v z}
  \gdef^^bc{\OE}
  \gdef^^bd{\oe}
  \gdef^^be{\"Y}
}

% Latin2 (ISO-8859-2) character definitions.
\def\lattwochardefs{%
  \gdef^^a0{~}
  \gdef^^a1{\ogonek{A}}
  \gdef^^a2{\u{}}
  \gdef^^a3{\L}
  \gdef^^a4{\missingcharmsg{CURRENCY SIGN}}
  \gdef^^a5{\v L}
  \gdef^^a6{\'S}
  \gdef^^a7{\S}
  \gdef^^a8{\"{}}
  \gdef^^a9{\v S}
  \gdef^^aa{\cedilla S}
  \gdef^^ab{\v T}
  \gdef^^ac{\'Z}
  \gdef^^ad{\-}
  \gdef^^ae{\v Z}
  \gdef^^af{\dotaccent Z}
  %
  \gdef^^b0{\textdegree}
  \gdef^^b1{\ogonek{a}}
  \gdef^^b2{\ogonek{ }}
  \gdef^^b3{\l}
  \gdef^^b4{\'{}}
  \gdef^^b5{\v l}
  \gdef^^b6{\'s}
  \gdef^^b7{\v{}}
  \gdef^^b8{\cedilla\ }
  \gdef^^b9{\v s}
  \gdef^^ba{\cedilla s}
  \gdef^^bb{\v t}
  \gdef^^bc{\'z}
  \gdef^^bd{\H{}}
  \gdef^^be{\v z}
  \gdef^^bf{\dotaccent z}
  %
  \gdef^^c0{\'R}
  \gdef^^c1{\'A}
  \gdef^^c2{\^A}
  \gdef^^c3{\u A}
  \gdef^^c4{\"A}
  \gdef^^c5{\'L}
  \gdef^^c6{\'C}
  \gdef^^c7{\cedilla C}
  \gdef^^c8{\v C}
  \gdef^^c9{\'E}
  \gdef^^ca{\ogonek{E}}
  \gdef^^cb{\"E}
  \gdef^^cc{\v E}
  \gdef^^cd{\'I}
  \gdef^^ce{\^I}
  \gdef^^cf{\v D}
  %
  \gdef^^d0{\DH}
  \gdef^^d1{\'N}
  \gdef^^d2{\v N}
  \gdef^^d3{\'O}
  \gdef^^d4{\^O}
  \gdef^^d5{\H O}
  \gdef^^d6{\"O}
  \gdef^^d7{$\times$}
  \gdef^^d8{\v R}
  \gdef^^d9{\ringaccent U}
  \gdef^^da{\'U}
  \gdef^^db{\H U}
  \gdef^^dc{\"U}
  \gdef^^dd{\'Y}
  \gdef^^de{\cedilla T}
  \gdef^^df{\ss}
  %
  \gdef^^e0{\'r}
  \gdef^^e1{\'a}
  \gdef^^e2{\^a}
  \gdef^^e3{\u a}
  \gdef^^e4{\"a}
  \gdef^^e5{\'l}
  \gdef^^e6{\'c}
  \gdef^^e7{\cedilla c}
  \gdef^^e8{\v c}
  \gdef^^e9{\'e}
  \gdef^^ea{\ogonek{e}}
  \gdef^^eb{\"e}
  \gdef^^ec{\v e}
  \gdef^^ed{\'\i}
  \gdef^^ee{\^\i}
  \gdef^^ef{\v d}
  %
  \gdef^^f0{\dh}
  \gdef^^f1{\'n}
  \gdef^^f2{\v n}
  \gdef^^f3{\'o}
  \gdef^^f4{\^o}
  \gdef^^f5{\H o}
  \gdef^^f6{\"o}
  \gdef^^f7{$\div$}
  \gdef^^f8{\v r}
  \gdef^^f9{\ringaccent u}
  \gdef^^fa{\'u}
  \gdef^^fb{\H u}
  \gdef^^fc{\"u}
  \gdef^^fd{\'y}
  \gdef^^fe{\cedilla t}
  \gdef^^ff{\dotaccent{}}
}

% UTF-8 character definitions.
%
% This code to support UTF-8 is based on LaTeX's utf8.def, with some
% changes for Texinfo conventions.  It is included here under the GPL by
% permission from Frank Mittelbach and the LaTeX team.
%
\newcount\countUTFx
\newcount\countUTFy
\newcount\countUTFz

\gdef\UTFviiiTwoOctets#1#2{\expandafter
   \UTFviiiDefined\csname u8:#1\string #2\endcsname}
%
\gdef\UTFviiiThreeOctets#1#2#3{\expandafter
   \UTFviiiDefined\csname u8:#1\string #2\string #3\endcsname}
%
\gdef\UTFviiiFourOctets#1#2#3#4{\expandafter
   \UTFviiiDefined\csname u8:#1\string #2\string #3\string #4\endcsname}

\gdef\UTFviiiDefined#1{%
  \ifx #1\relax
    \message{\linenumber Unicode char \string #1 not defined for Texinfo}%
  \else
    \expandafter #1%
  \fi
}

\begingroup
  \catcode`\~13
  \catcode`\"12

  \def\UTFviiiLoop{%
    \global\catcode\countUTFx\active
    \uccode`\~\countUTFx
    \uppercase\expandafter{\UTFviiiTmp}%
    \advance\countUTFx by 1
    \ifnum\countUTFx < \countUTFy
      \expandafter\UTFviiiLoop
    \fi}

  \countUTFx = "C2
  \countUTFy = "E0
  \def\UTFviiiTmp{%
    \xdef~{\noexpand\UTFviiiTwoOctets\string~}}
  \UTFviiiLoop

  \countUTFx = "E0
  \countUTFy = "F0
  \def\UTFviiiTmp{%
    \xdef~{\noexpand\UTFviiiThreeOctets\string~}}
  \UTFviiiLoop

  \countUTFx = "F0
  \countUTFy = "F4
  \def\UTFviiiTmp{%
    \xdef~{\noexpand\UTFviiiFourOctets\string~}}
  \UTFviiiLoop
\endgroup

\begingroup
  \catcode`\"=12
  \catcode`\<=12
  \catcode`\.=12
  \catcode`\,=12
  \catcode`\;=12
  \catcode`\!=12
  \catcode`\~=13

  \gdef\DeclareUnicodeCharacter#1#2{%
    \countUTFz = "#1\relax
    \wlog{\space\space defining Unicode char U+#1 (decimal \the\countUTFz)}%
    \begingroup
      \parseXMLCharref
      \def\UTFviiiTwoOctets##1##2{%
        \csname u8:##1\string ##2\endcsname}%
      \def\UTFviiiThreeOctets##1##2##3{%
        \csname u8:##1\string ##2\string ##3\endcsname}%
      \def\UTFviiiFourOctets##1##2##3##4{%
        \csname u8:##1\string ##2\string ##3\string ##4\endcsname}%
      \expandafter\expandafter\expandafter\expandafter
       \expandafter\expandafter\expandafter
       \gdef\UTFviiiTmp{#2}%
    \endgroup}

  \gdef\parseXMLCharref{%
    \ifnum\countUTFz < "A0\relax
      \errhelp = \EMsimple
      \errmessage{Cannot define Unicode char value < 00A0}%
    \else\ifnum\countUTFz < "800\relax
      \parseUTFviiiA,%
      \parseUTFviiiB C\UTFviiiTwoOctets.,%
    \else\ifnum\countUTFz < "10000\relax
      \parseUTFviiiA;%
      \parseUTFviiiA,%
      \parseUTFviiiB E\UTFviiiThreeOctets.{,;}%
    \else
      \parseUTFviiiA;%
      \parseUTFviiiA,%
      \parseUTFviiiA!%
      \parseUTFviiiB F\UTFviiiFourOctets.{!,;}%
    \fi\fi\fi
  }

  \gdef\parseUTFviiiA#1{%
    \countUTFx = \countUTFz
    \divide\countUTFz by 64
    \countUTFy = \countUTFz
    \multiply\countUTFz by 64
    \advance\countUTFx by -\countUTFz
    \advance\countUTFx by 128
    \uccode `#1\countUTFx
    \countUTFz = \countUTFy}

  \gdef\parseUTFviiiB#1#2#3#4{%
    \advance\countUTFz by "#10\relax
    \uccode `#3\countUTFz
    \uppercase{\gdef\UTFviiiTmp{#2#3#4}}}
\endgroup

\def\utfeightchardefs{%
  \DeclareUnicodeCharacter{00A0}{\tie}
  \DeclareUnicodeCharacter{00A1}{\exclamdown}
  \DeclareUnicodeCharacter{00A3}{\pounds}
  \DeclareUnicodeCharacter{00A8}{\"{ }}
  \DeclareUnicodeCharacter{00A9}{\copyright}
  \DeclareUnicodeCharacter{00AA}{\ordf}
  \DeclareUnicodeCharacter{00AB}{\guillemetleft}
  \DeclareUnicodeCharacter{00AD}{\-}
  \DeclareUnicodeCharacter{00AE}{\registeredsymbol}
  \DeclareUnicodeCharacter{00AF}{\={ }}

  \DeclareUnicodeCharacter{00B0}{\ringaccent{ }}
  \DeclareUnicodeCharacter{00B4}{\'{ }}
  \DeclareUnicodeCharacter{00B8}{\cedilla{ }}
  \DeclareUnicodeCharacter{00BA}{\ordm}
  \DeclareUnicodeCharacter{00BB}{\guillemetright}
  \DeclareUnicodeCharacter{00BF}{\questiondown}

  \DeclareUnicodeCharacter{00C0}{\`A}
  \DeclareUnicodeCharacter{00C1}{\'A}
  \DeclareUnicodeCharacter{00C2}{\^A}
  \DeclareUnicodeCharacter{00C3}{\~A}
  \DeclareUnicodeCharacter{00C4}{\"A}
  \DeclareUnicodeCharacter{00C5}{\AA}
  \DeclareUnicodeCharacter{00C6}{\AE}
  \DeclareUnicodeCharacter{00C7}{\cedilla{C}}
  \DeclareUnicodeCharacter{00C8}{\`E}
  \DeclareUnicodeCharacter{00C9}{\'E}
  \DeclareUnicodeCharacter{00CA}{\^E}
  \DeclareUnicodeCharacter{00CB}{\"E}
  \DeclareUnicodeCharacter{00CC}{\`I}
  \DeclareUnicodeCharacter{00CD}{\'I}
  \DeclareUnicodeCharacter{00CE}{\^I}
  \DeclareUnicodeCharacter{00CF}{\"I}

  \DeclareUnicodeCharacter{00D0}{\DH}
  \DeclareUnicodeCharacter{00D1}{\~N}
  \DeclareUnicodeCharacter{00D2}{\`O}
  \DeclareUnicodeCharacter{00D3}{\'O}
  \DeclareUnicodeCharacter{00D4}{\^O}
  \DeclareUnicodeCharacter{00D5}{\~O}
  \DeclareUnicodeCharacter{00D6}{\"O}
  \DeclareUnicodeCharacter{00D8}{\O}
  \DeclareUnicodeCharacter{00D9}{\`U}
  \DeclareUnicodeCharacter{00DA}{\'U}
  \DeclareUnicodeCharacter{00DB}{\^U}
  \DeclareUnicodeCharacter{00DC}{\"U}
  \DeclareUnicodeCharacter{00DD}{\'Y}
  \DeclareUnicodeCharacter{00DE}{\TH}
  \DeclareUnicodeCharacter{00DF}{\ss}

  \DeclareUnicodeCharacter{00E0}{\`a}
  \DeclareUnicodeCharacter{00E1}{\'a}
  \DeclareUnicodeCharacter{00E2}{\^a}
  \DeclareUnicodeCharacter{00E3}{\~a}
  \DeclareUnicodeCharacter{00E4}{\"a}
  \DeclareUnicodeCharacter{00E5}{\aa}
  \DeclareUnicodeCharacter{00E6}{\ae}
  \DeclareUnicodeCharacter{00E7}{\cedilla{c}}
  \DeclareUnicodeCharacter{00E8}{\`e}
  \DeclareUnicodeCharacter{00E9}{\'e}
  \DeclareUnicodeCharacter{00EA}{\^e}
  \DeclareUnicodeCharacter{00EB}{\"e}
  \DeclareUnicodeCharacter{00EC}{\`{\dotless{i}}}
  \DeclareUnicodeCharacter{00ED}{\'{\dotless{i}}}
  \DeclareUnicodeCharacter{00EE}{\^{\dotless{i}}}
  \DeclareUnicodeCharacter{00EF}{\"{\dotless{i}}}

  \DeclareUnicodeCharacter{00F0}{\dh}
  \DeclareUnicodeCharacter{00F1}{\~n}
  \DeclareUnicodeCharacter{00F2}{\`o}
  \DeclareUnicodeCharacter{00F3}{\'o}
  \DeclareUnicodeCharacter{00F4}{\^o}
  \DeclareUnicodeCharacter{00F5}{\~o}
  \DeclareUnicodeCharacter{00F6}{\"o}
  \DeclareUnicodeCharacter{00F8}{\o}
  \DeclareUnicodeCharacter{00F9}{\`u}
  \DeclareUnicodeCharacter{00FA}{\'u}
  \DeclareUnicodeCharacter{00FB}{\^u}
  \DeclareUnicodeCharacter{00FC}{\"u}
  \DeclareUnicodeCharacter{00FD}{\'y}
  \DeclareUnicodeCharacter{00FE}{\th}
  \DeclareUnicodeCharacter{00FF}{\"y}

  \DeclareUnicodeCharacter{0100}{\=A}
  \DeclareUnicodeCharacter{0101}{\=a}
  \DeclareUnicodeCharacter{0102}{\u{A}}
  \DeclareUnicodeCharacter{0103}{\u{a}}
  \DeclareUnicodeCharacter{0104}{\ogonek{A}}
  \DeclareUnicodeCharacter{0105}{\ogonek{a}}
  \DeclareUnicodeCharacter{0106}{\'C}
  \DeclareUnicodeCharacter{0107}{\'c}
  \DeclareUnicodeCharacter{0108}{\^C}
  \DeclareUnicodeCharacter{0109}{\^c}
  \DeclareUnicodeCharacter{0118}{\ogonek{E}}
  \DeclareUnicodeCharacter{0119}{\ogonek{e}}
  \DeclareUnicodeCharacter{010A}{\dotaccent{C}}
  \DeclareUnicodeCharacter{010B}{\dotaccent{c}}
  \DeclareUnicodeCharacter{010C}{\v{C}}
  \DeclareUnicodeCharacter{010D}{\v{c}}
  \DeclareUnicodeCharacter{010E}{\v{D}}

  \DeclareUnicodeCharacter{0112}{\=E}
  \DeclareUnicodeCharacter{0113}{\=e}
  \DeclareUnicodeCharacter{0114}{\u{E}}
  \DeclareUnicodeCharacter{0115}{\u{e}}
  \DeclareUnicodeCharacter{0116}{\dotaccent{E}}
  \DeclareUnicodeCharacter{0117}{\dotaccent{e}}
  \DeclareUnicodeCharacter{011A}{\v{E}}
  \DeclareUnicodeCharacter{011B}{\v{e}}
  \DeclareUnicodeCharacter{011C}{\^G}
  \DeclareUnicodeCharacter{011D}{\^g}
  \DeclareUnicodeCharacter{011E}{\u{G}}
  \DeclareUnicodeCharacter{011F}{\u{g}}

  \DeclareUnicodeCharacter{0120}{\dotaccent{G}}
  \DeclareUnicodeCharacter{0121}{\dotaccent{g}}
  \DeclareUnicodeCharacter{0124}{\^H}
  \DeclareUnicodeCharacter{0125}{\^h}
  \DeclareUnicodeCharacter{0128}{\~I}
  \DeclareUnicodeCharacter{0129}{\~{\dotless{i}}}
  \DeclareUnicodeCharacter{012A}{\=I}
  \DeclareUnicodeCharacter{012B}{\={\dotless{i}}}
  \DeclareUnicodeCharacter{012C}{\u{I}}
  \DeclareUnicodeCharacter{012D}{\u{\dotless{i}}}

  \DeclareUnicodeCharacter{0130}{\dotaccent{I}}
  \DeclareUnicodeCharacter{0131}{\dotless{i}}
  \DeclareUnicodeCharacter{0132}{IJ}
  \DeclareUnicodeCharacter{0133}{ij}
  \DeclareUnicodeCharacter{0134}{\^J}
  \DeclareUnicodeCharacter{0135}{\^{\dotless{j}}}
  \DeclareUnicodeCharacter{0139}{\'L}
  \DeclareUnicodeCharacter{013A}{\'l}

  \DeclareUnicodeCharacter{0141}{\L}
  \DeclareUnicodeCharacter{0142}{\l}
  \DeclareUnicodeCharacter{0143}{\'N}
  \DeclareUnicodeCharacter{0144}{\'n}
  \DeclareUnicodeCharacter{0147}{\v{N}}
  \DeclareUnicodeCharacter{0148}{\v{n}}
  \DeclareUnicodeCharacter{014C}{\=O}
  \DeclareUnicodeCharacter{014D}{\=o}
  \DeclareUnicodeCharacter{014E}{\u{O}}
  \DeclareUnicodeCharacter{014F}{\u{o}}

  \DeclareUnicodeCharacter{0150}{\H{O}}
  \DeclareUnicodeCharacter{0151}{\H{o}}
  \DeclareUnicodeCharacter{0152}{\OE}
  \DeclareUnicodeCharacter{0153}{\oe}
  \DeclareUnicodeCharacter{0154}{\'R}
  \DeclareUnicodeCharacter{0155}{\'r}
  \DeclareUnicodeCharacter{0158}{\v{R}}
  \DeclareUnicodeCharacter{0159}{\v{r}}
  \DeclareUnicodeCharacter{015A}{\'S}
  \DeclareUnicodeCharacter{015B}{\'s}
  \DeclareUnicodeCharacter{015C}{\^S}
  \DeclareUnicodeCharacter{015D}{\^s}
  \DeclareUnicodeCharacter{015E}{\cedilla{S}}
  \DeclareUnicodeCharacter{015F}{\cedilla{s}}

  \DeclareUnicodeCharacter{0160}{\v{S}}
  \DeclareUnicodeCharacter{0161}{\v{s}}
  \DeclareUnicodeCharacter{0162}{\cedilla{t}}
  \DeclareUnicodeCharacter{0163}{\cedilla{T}}
  \DeclareUnicodeCharacter{0164}{\v{T}}

  \DeclareUnicodeCharacter{0168}{\~U}
  \DeclareUnicodeCharacter{0169}{\~u}
  \DeclareUnicodeCharacter{016A}{\=U}
  \DeclareUnicodeCharacter{016B}{\=u}
  \DeclareUnicodeCharacter{016C}{\u{U}}
  \DeclareUnicodeCharacter{016D}{\u{u}}
  \DeclareUnicodeCharacter{016E}{\ringaccent{U}}
  \DeclareUnicodeCharacter{016F}{\ringaccent{u}}

  \DeclareUnicodeCharacter{0170}{\H{U}}
  \DeclareUnicodeCharacter{0171}{\H{u}}
  \DeclareUnicodeCharacter{0174}{\^W}
  \DeclareUnicodeCharacter{0175}{\^w}
  \DeclareUnicodeCharacter{0176}{\^Y}
  \DeclareUnicodeCharacter{0177}{\^y}
  \DeclareUnicodeCharacter{0178}{\"Y}
  \DeclareUnicodeCharacter{0179}{\'Z}
  \DeclareUnicodeCharacter{017A}{\'z}
  \DeclareUnicodeCharacter{017B}{\dotaccent{Z}}
  \DeclareUnicodeCharacter{017C}{\dotaccent{z}}
  \DeclareUnicodeCharacter{017D}{\v{Z}}
  \DeclareUnicodeCharacter{017E}{\v{z}}

  \DeclareUnicodeCharacter{01C4}{D\v{Z}}
  \DeclareUnicodeCharacter{01C5}{D\v{z}}
  \DeclareUnicodeCharacter{01C6}{d\v{z}}
  \DeclareUnicodeCharacter{01C7}{LJ}
  \DeclareUnicodeCharacter{01C8}{Lj}
  \DeclareUnicodeCharacter{01C9}{lj}
  \DeclareUnicodeCharacter{01CA}{NJ}
  \DeclareUnicodeCharacter{01CB}{Nj}
  \DeclareUnicodeCharacter{01CC}{nj}
  \DeclareUnicodeCharacter{01CD}{\v{A}}
  \DeclareUnicodeCharacter{01CE}{\v{a}}
  \DeclareUnicodeCharacter{01CF}{\v{I}}

  \DeclareUnicodeCharacter{01D0}{\v{\dotless{i}}}
  \DeclareUnicodeCharacter{01D1}{\v{O}}
  \DeclareUnicodeCharacter{01D2}{\v{o}}
  \DeclareUnicodeCharacter{01D3}{\v{U}}
  \DeclareUnicodeCharacter{01D4}{\v{u}}

  \DeclareUnicodeCharacter{01E2}{\={\AE}}
  \DeclareUnicodeCharacter{01E3}{\={\ae}}
  \DeclareUnicodeCharacter{01E6}{\v{G}}
  \DeclareUnicodeCharacter{01E7}{\v{g}}
  \DeclareUnicodeCharacter{01E8}{\v{K}}
  \DeclareUnicodeCharacter{01E9}{\v{k}}

  \DeclareUnicodeCharacter{01F0}{\v{\dotless{j}}}
  \DeclareUnicodeCharacter{01F1}{DZ}
  \DeclareUnicodeCharacter{01F2}{Dz}
  \DeclareUnicodeCharacter{01F3}{dz}
  \DeclareUnicodeCharacter{01F4}{\'G}
  \DeclareUnicodeCharacter{01F5}{\'g}
  \DeclareUnicodeCharacter{01F8}{\`N}
  \DeclareUnicodeCharacter{01F9}{\`n}
  \DeclareUnicodeCharacter{01FC}{\'{\AE}}
  \DeclareUnicodeCharacter{01FD}{\'{\ae}}
  \DeclareUnicodeCharacter{01FE}{\'{\O}}
  \DeclareUnicodeCharacter{01FF}{\'{\o}}

  \DeclareUnicodeCharacter{021E}{\v{H}}
  \DeclareUnicodeCharacter{021F}{\v{h}}

  \DeclareUnicodeCharacter{0226}{\dotaccent{A}}
  \DeclareUnicodeCharacter{0227}{\dotaccent{a}}
  \DeclareUnicodeCharacter{0228}{\cedilla{E}}
  \DeclareUnicodeCharacter{0229}{\cedilla{e}}
  \DeclareUnicodeCharacter{022E}{\dotaccent{O}}
  \DeclareUnicodeCharacter{022F}{\dotaccent{o}}

  \DeclareUnicodeCharacter{0232}{\=Y}
  \DeclareUnicodeCharacter{0233}{\=y}
  \DeclareUnicodeCharacter{0237}{\dotless{j}}

  \DeclareUnicodeCharacter{02DB}{\ogonek{ }}

  \DeclareUnicodeCharacter{1E02}{\dotaccent{B}}
  \DeclareUnicodeCharacter{1E03}{\dotaccent{b}}
  \DeclareUnicodeCharacter{1E04}{\udotaccent{B}}
  \DeclareUnicodeCharacter{1E05}{\udotaccent{b}}
  \DeclareUnicodeCharacter{1E06}{\ubaraccent{B}}
  \DeclareUnicodeCharacter{1E07}{\ubaraccent{b}}
  \DeclareUnicodeCharacter{1E0A}{\dotaccent{D}}
  \DeclareUnicodeCharacter{1E0B}{\dotaccent{d}}
  \DeclareUnicodeCharacter{1E0C}{\udotaccent{D}}
  \DeclareUnicodeCharacter{1E0D}{\udotaccent{d}}
  \DeclareUnicodeCharacter{1E0E}{\ubaraccent{D}}
  \DeclareUnicodeCharacter{1E0F}{\ubaraccent{d}}

  \DeclareUnicodeCharacter{1E1E}{\dotaccent{F}}
  \DeclareUnicodeCharacter{1E1F}{\dotaccent{f}}

  \DeclareUnicodeCharacter{1E20}{\=G}
  \DeclareUnicodeCharacter{1E21}{\=g}
  \DeclareUnicodeCharacter{1E22}{\dotaccent{H}}
  \DeclareUnicodeCharacter{1E23}{\dotaccent{h}}
  \DeclareUnicodeCharacter{1E24}{\udotaccent{H}}
  \DeclareUnicodeCharacter{1E25}{\udotaccent{h}}
  \DeclareUnicodeCharacter{1E26}{\"H}
  \DeclareUnicodeCharacter{1E27}{\"h}

  \DeclareUnicodeCharacter{1E30}{\'K}
  \DeclareUnicodeCharacter{1E31}{\'k}
  \DeclareUnicodeCharacter{1E32}{\udotaccent{K}}
  \DeclareUnicodeCharacter{1E33}{\udotaccent{k}}
  \DeclareUnicodeCharacter{1E34}{\ubaraccent{K}}
  \DeclareUnicodeCharacter{1E35}{\ubaraccent{k}}
  \DeclareUnicodeCharacter{1E36}{\udotaccent{L}}
  \DeclareUnicodeCharacter{1E37}{\udotaccent{l}}
  \DeclareUnicodeCharacter{1E3A}{\ubaraccent{L}}
  \DeclareUnicodeCharacter{1E3B}{\ubaraccent{l}}
  \DeclareUnicodeCharacter{1E3E}{\'M}
  \DeclareUnicodeCharacter{1E3F}{\'m}

  \DeclareUnicodeCharacter{1E40}{\dotaccent{M}}
  \DeclareUnicodeCharacter{1E41}{\dotaccent{m}}
  \DeclareUnicodeCharacter{1E42}{\udotaccent{M}}
  \DeclareUnicodeCharacter{1E43}{\udotaccent{m}}
  \DeclareUnicodeCharacter{1E44}{\dotaccent{N}}
  \DeclareUnicodeCharacter{1E45}{\dotaccent{n}}
  \DeclareUnicodeCharacter{1E46}{\udotaccent{N}}
  \DeclareUnicodeCharacter{1E47}{\udotaccent{n}}
  \DeclareUnicodeCharacter{1E48}{\ubaraccent{N}}
  \DeclareUnicodeCharacter{1E49}{\ubaraccent{n}}

  \DeclareUnicodeCharacter{1E54}{\'P}
  \DeclareUnicodeCharacter{1E55}{\'p}
  \DeclareUnicodeCharacter{1E56}{\dotaccent{P}}
  \DeclareUnicodeCharacter{1E57}{\dotaccent{p}}
  \DeclareUnicodeCharacter{1E58}{\dotaccent{R}}
  \DeclareUnicodeCharacter{1E59}{\dotaccent{r}}
  \DeclareUnicodeCharacter{1E5A}{\udotaccent{R}}
  \DeclareUnicodeCharacter{1E5B}{\udotaccent{r}}
  \DeclareUnicodeCharacter{1E5E}{\ubaraccent{R}}
  \DeclareUnicodeCharacter{1E5F}{\ubaraccent{r}}

  \DeclareUnicodeCharacter{1E60}{\dotaccent{S}}
  \DeclareUnicodeCharacter{1E61}{\dotaccent{s}}
  \DeclareUnicodeCharacter{1E62}{\udotaccent{S}}
  \DeclareUnicodeCharacter{1E63}{\udotaccent{s}}
  \DeclareUnicodeCharacter{1E6A}{\dotaccent{T}}
  \DeclareUnicodeCharacter{1E6B}{\dotaccent{t}}
  \DeclareUnicodeCharacter{1E6C}{\udotaccent{T}}
  \DeclareUnicodeCharacter{1E6D}{\udotaccent{t}}
  \DeclareUnicodeCharacter{1E6E}{\ubaraccent{T}}
  \DeclareUnicodeCharacter{1E6F}{\ubaraccent{t}}

  \DeclareUnicodeCharacter{1E7C}{\~V}
  \DeclareUnicodeCharacter{1E7D}{\~v}
  \DeclareUnicodeCharacter{1E7E}{\udotaccent{V}}
  \DeclareUnicodeCharacter{1E7F}{\udotaccent{v}}

  \DeclareUnicodeCharacter{1E80}{\`W}
  \DeclareUnicodeCharacter{1E81}{\`w}
  \DeclareUnicodeCharacter{1E82}{\'W}
  \DeclareUnicodeCharacter{1E83}{\'w}
  \DeclareUnicodeCharacter{1E84}{\"W}
  \DeclareUnicodeCharacter{1E85}{\"w}
  \DeclareUnicodeCharacter{1E86}{\dotaccent{W}}
  \DeclareUnicodeCharacter{1E87}{\dotaccent{w}}
  \DeclareUnicodeCharacter{1E88}{\udotaccent{W}}
  \DeclareUnicodeCharacter{1E89}{\udotaccent{w}}
  \DeclareUnicodeCharacter{1E8A}{\dotaccent{X}}
  \DeclareUnicodeCharacter{1E8B}{\dotaccent{x}}
  \DeclareUnicodeCharacter{1E8C}{\"X}
  \DeclareUnicodeCharacter{1E8D}{\"x}
  \DeclareUnicodeCharacter{1E8E}{\dotaccent{Y}}
  \DeclareUnicodeCharacter{1E8F}{\dotaccent{y}}

  \DeclareUnicodeCharacter{1E90}{\^Z}
  \DeclareUnicodeCharacter{1E91}{\^z}
  \DeclareUnicodeCharacter{1E92}{\udotaccent{Z}}
  \DeclareUnicodeCharacter{1E93}{\udotaccent{z}}
  \DeclareUnicodeCharacter{1E94}{\ubaraccent{Z}}
  \DeclareUnicodeCharacter{1E95}{\ubaraccent{z}}
  \DeclareUnicodeCharacter{1E96}{\ubaraccent{h}}
  \DeclareUnicodeCharacter{1E97}{\"t}
  \DeclareUnicodeCharacter{1E98}{\ringaccent{w}}
  \DeclareUnicodeCharacter{1E99}{\ringaccent{y}}

  \DeclareUnicodeCharacter{1EA0}{\udotaccent{A}}
  \DeclareUnicodeCharacter{1EA1}{\udotaccent{a}}

  \DeclareUnicodeCharacter{1EB8}{\udotaccent{E}}
  \DeclareUnicodeCharacter{1EB9}{\udotaccent{e}}
  \DeclareUnicodeCharacter{1EBC}{\~E}
  \DeclareUnicodeCharacter{1EBD}{\~e}

  \DeclareUnicodeCharacter{1ECA}{\udotaccent{I}}
  \DeclareUnicodeCharacter{1ECB}{\udotaccent{i}}
  \DeclareUnicodeCharacter{1ECC}{\udotaccent{O}}
  \DeclareUnicodeCharacter{1ECD}{\udotaccent{o}}

  \DeclareUnicodeCharacter{1EE4}{\udotaccent{U}}
  \DeclareUnicodeCharacter{1EE5}{\udotaccent{u}}

  \DeclareUnicodeCharacter{1EF2}{\`Y}
  \DeclareUnicodeCharacter{1EF3}{\`y}
  \DeclareUnicodeCharacter{1EF4}{\udotaccent{Y}}

  \DeclareUnicodeCharacter{1EF8}{\~Y}
  \DeclareUnicodeCharacter{1EF9}{\~y}

  \DeclareUnicodeCharacter{2013}{--}
  \DeclareUnicodeCharacter{2014}{---}
  \DeclareUnicodeCharacter{2018}{\quoteleft}
  \DeclareUnicodeCharacter{2019}{\quoteright}
  \DeclareUnicodeCharacter{201A}{\quotesinglbase}
  \DeclareUnicodeCharacter{201C}{\quotedblleft}
  \DeclareUnicodeCharacter{201D}{\quotedblright}
  \DeclareUnicodeCharacter{201E}{\quotedblbase}
  \DeclareUnicodeCharacter{2022}{\bullet}
  \DeclareUnicodeCharacter{2026}{\dots}
  \DeclareUnicodeCharacter{2039}{\guilsinglleft}
  \DeclareUnicodeCharacter{203A}{\guilsinglright}
  \DeclareUnicodeCharacter{20AC}{\euro}

  \DeclareUnicodeCharacter{2192}{\expansion}
  \DeclareUnicodeCharacter{21D2}{\result}

  \DeclareUnicodeCharacter{2212}{\minus}
  \DeclareUnicodeCharacter{2217}{\point}
  \DeclareUnicodeCharacter{2261}{\equiv}
}% end of \utfeightchardefs


% US-ASCII character definitions.
\def\asciichardefs{% nothing need be done
   \relax
}

% Make non-ASCII characters printable again for compatibility with
% existing Texinfo documents that may use them, even without declaring a
% document encoding.
%
\setnonasciicharscatcode \other


\message{formatting,}

\newdimen\defaultparindent \defaultparindent = 15pt

\chapheadingskip = 15pt plus 4pt minus 2pt
\secheadingskip = 12pt plus 3pt minus 2pt
\subsecheadingskip = 9pt plus 2pt minus 2pt

% Prevent underfull vbox error messages.
\vbadness = 10000

% Don't be so finicky about underfull hboxes, either.
\hbadness = 2000

% Following George Bush, get rid of widows and orphans.
\widowpenalty=10000
\clubpenalty=10000

% Use TeX 3.0's \emergencystretch to help line breaking, but if we're
% using an old version of TeX, don't do anything.  We want the amount of
% stretch added to depend on the line length, hence the dependence on
% \hsize.  We call this whenever the paper size is set.
%
\def\setemergencystretch{%
  \ifx\emergencystretch\thisisundefined
    % Allow us to assign to \emergencystretch anyway.
    \def\emergencystretch{\dimen0}%
  \else
    \emergencystretch = .15\hsize
  \fi
}

% Parameters in order: 1) textheight; 2) textwidth;
% 3) voffset; 4) hoffset; 5) binding offset; 6) topskip;
% 7) physical page height; 8) physical page width.
%
% We also call \setleading{\textleading}, so the caller should define
% \textleading.  The caller should also set \parskip.
%
\def\internalpagesizes#1#2#3#4#5#6#7#8{%
  \voffset = #3\relax
  \topskip = #6\relax
  \splittopskip = \topskip
  %
  \vsize = #1\relax
  \advance\vsize by \topskip
  \outervsize = \vsize
  \advance\outervsize by 2\topandbottommargin
  \pageheight = \vsize
  %
  \hsize = #2\relax
  \outerhsize = \hsize
  \advance\outerhsize by 0.5in
  \pagewidth = \hsize
  %
  \normaloffset = #4\relax
  \bindingoffset = #5\relax
  %
  \ifpdf
    \pdfpageheight #7\relax
    \pdfpagewidth #8\relax
    % if we don't reset these, they will remain at "1 true in" of
    % whatever layout pdftex was dumped with.
    \pdfhorigin = 1 true in
    \pdfvorigin = 1 true in
  \fi
  %
  \setleading{\textleading}
  %
  \parindent = \defaultparindent
  \setemergencystretch
}

% @@letterpaper (the default).
\def\letterpaper{{\globaldefs = 1
  \parskip = 3pt plus 2pt minus 1pt
  \textleading = 13.2pt
  %
  % If page is nothing but text, make it come out even.
  \internalpagesizes{607.2pt}{6in}% that's 46 lines
                    {\voffset}{.25in}%
                    {\bindingoffset}{36pt}%
                    {11in}{8.5in}%
}}

% Use @@smallbook to reset parameters for 7x9.25 trim size.
\def\smallbook{{\globaldefs = 1
  \parskip = 2pt plus 1pt
  \textleading = 12pt
  %
  \internalpagesizes{7.5in}{5in}%
                    {-.2in}{0in}%
                    {\bindingoffset}{16pt}%
                    {9.25in}{7in}%
  %
  \lispnarrowing = 0.3in
  \tolerance = 700
  \hfuzz = 1pt
  \contentsrightmargin = 0pt
  \defbodyindent = .5cm
}}

% Use @@smallerbook to reset parameters for 6x9 trim size.
% (Just testing, parameters still in flux.)
\def\smallerbook{{\globaldefs = 1
  \parskip = 1.5pt plus 1pt
  \textleading = 12pt
  %
  \internalpagesizes{7.4in}{4.8in}%
                    {-.2in}{-.4in}%
                    {0pt}{14pt}%
                    {9in}{6in}%
  %
  \lispnarrowing = 0.25in
  \tolerance = 700
  \hfuzz = 1pt
  \contentsrightmargin = 0pt
  \defbodyindent = .4cm
}}

% Use @@afourpaper to print on European A4 paper.
\def\afourpaper{{\globaldefs = 1
  \parskip = 3pt plus 2pt minus 1pt
  \textleading = 13.2pt
  %
  % Double-side printing via postscript on Laserjet 4050
  % prints double-sided nicely when \bindingoffset=10mm and \hoffset=-6mm.
  % To change the settings for a different printer or situation, adjust
  % \normaloffset until the front-side and back-side texts align.  Then
  % do the same for \bindingoffset.  You can set these for testing in
  % your texinfo source file like this:
  % @@tex
  % \global\normaloffset = -6mm
  % \global\bindingoffset = 10mm
  % @@end tex
  \internalpagesizes{673.2pt}{160mm}% that's 51 lines
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{44pt}%
                    {297mm}{210mm}%
  %
  \tolerance = 700
  \hfuzz = 1pt
  \contentsrightmargin = 0pt
  \defbodyindent = 5mm
}}

% Use @@afivepaper to print on European A5 paper.
% From romildo@@urano.iceb.ufop.br, 2 July 2000.
% He also recommends making @@example and @@lisp be small.
\def\afivepaper{{\globaldefs = 1
  \parskip = 2pt plus 1pt minus 0.1pt
  \textleading = 12.5pt
  %
  \internalpagesizes{160mm}{120mm}%
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{8pt}%
                    {210mm}{148mm}%
  %
  \lispnarrowing = 0.2in
  \tolerance = 800
  \hfuzz = 1.2pt
  \contentsrightmargin = 0pt
  \defbodyindent = 2mm
  \tableindent = 12mm
}}

% A specific text layout, 24x15cm overall, intended for A4 paper.
\def\afourlatex{{\globaldefs = 1
  \afourpaper
  \internalpagesizes{237mm}{150mm}%
                    {\voffset}{4.6mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
  %
  % Must explicitly reset to 0 because we call \afourpaper.
  \globaldefs = 0
}}

% Use @@afourwide to print on A4 paper in landscape format.
\def\afourwide{{\globaldefs = 1
  \afourpaper
  \internalpagesizes{241mm}{165mm}%
                    {\voffset}{-2.95mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
  \globaldefs = 0
}}

% @@pagesizes TEXTHEIGHT[,TEXTWIDTH]
% Perhaps we should allow setting the margins, \topskip, \parskip,
% and/or leading, also. Or perhaps we should compute them somehow.
%
\parseargdef\pagesizes{\pagesizesyyy #1,,\finish}
\def\pagesizesyyy#1,#2,#3\finish{{%
  \setbox0 = \hbox{\ignorespaces #2}\ifdim\wd0 > 0pt \hsize=#2\relax \fi
  \globaldefs = 1
  %
  \parskip = 3pt plus 2pt minus 1pt
  \setleading{\textleading}%
  %
  \dimen0 = #1\relax
  \advance\dimen0 by \voffset
  %
  \dimen2 = \hsize
  \advance\dimen2 by \normaloffset
  %
  \internalpagesizes{#1}{\hsize}%
                    {\voffset}{\normaloffset}%
                    {\bindingoffset}{44pt}%
                    {\dimen0}{\dimen2}%
}}

% Set default to letter.
%
\letterpaper


\message{and turning on texinfo input format.}

% DEL is a comment character, in case @@c does not suffice.
\catcode`\^^? = 14

% Define macros to output various characters with catcode for normal text.
\catcode`\"=\other
\catcode`\~=\other
\catcode`\^=\other
\catcode`\_=\other
\catcode`\|=\other
\catcode`\<=\other
\catcode`\>=\other
\catcode`\+=\other
\catcode`\$=\other
\def\normaldoublequote{"}
\def\normaltilde{~}
\def\normalcaret{^}
\def\normalunderscore{_}
\def\normalverticalbar{|}
\def\normalless{<}
\def\normalgreater{>}
\def\normalplus{+}
\def\normaldollar{$}%$ font-lock fix

% This macro is used to make a character print one way in \tt
% (where it can probably be output as-is), and another way in other fonts,
% where something hairier probably needs to be done.
%
% #1 is what to print if we are indeed using \tt; #2 is what to print
% otherwise.  Since all the Computer Modern typewriter fonts have zero
% interword stretch (and shrink), and it is reasonable to expect all
% typewriter fonts to have this, we can check that font parameter.
%
\def\ifusingtt#1#2{\ifdim \fontdimen3\font=0pt #1\else #2\fi}

% Same as above, but check for italic font.  Actually this also catches
% non-italic slanted fonts since it is impossible to distinguish them from
% italic fonts.  But since this is only used by $ and it uses \sl anyway
% this is not a problem.
\def\ifusingit#1#2{\ifdim \fontdimen1\font>0pt #1\else #2\fi}

% Turn off all special characters except @@
% (and those which the user can use as if they were ordinary).
% Most of these we simply print from the \tt font, but for some, we can
% use math or other variants that look better in normal text.

\catcode`\"=\active
\def\activedoublequote{{\tt\char34}}
\let"=\activedoublequote
\catcode`\~=\active
\def~{{\tt\char126}}
\chardef\hat=`\^
\catcode`\^=\active
\def^{{\tt \hat}}

\catcode`\_=\active
\def_{\ifusingtt\normalunderscore\_}
\let\realunder=_
% Subroutine for the previous macro.
\def\_{\leavevmode \kern.07em \vbox{\hrule width.3em height.1ex}\kern .07em }

\catcode`\|=\active
\def|{{\tt\char124}}
\chardef \less=`\<
\catcode`\<=\active
\def<{{\tt \less}}
\chardef \gtr=`\>
\catcode`\>=\active
\def>{{\tt \gtr}}
\catcode`\+=\active
\def+{{\tt \char 43}}
\catcode`\$=\active
\def${\ifusingit{{\sl\$}}\normaldollar}%$ font-lock fix

% If a .fmt file is being used, characters that might appear in a file
% name cannot be active until we have parsed the command line.
% So turn them off again, and have \everyjob (or @@setfilename) turn them on.
% \otherifyactive is called near the end of this file.
\def\otherifyactive{\catcode`+=\other \catcode`\_=\other}

% Used sometimes to turn off (effectively) the active characters even after
% parsing them.
\def\turnoffactive{%
  \normalturnoffactive
  \otherbackslash
}

\catcode`\@@=0

% \backslashcurfont outputs one backslash character in current font,
% as in \char`\\.
\global\chardef\backslashcurfont=`\\
\global\let\rawbackslashxx=\backslashcurfont  % let existing .??s files work

% \realbackslash is an actual character `\' with catcode other, and
% \doublebackslash is two of them (for the pdf outlines).
{\catcode`\\=\other @@gdef@@realbackslash{\} @@gdef@@doublebackslash{\\}}

% In texinfo, backslash is an active character; it prints the backslash
% in fixed width font.
\catcode`\\=\active
@@def@@normalbackslash{{@@tt@@backslashcurfont}}
% On startup, @@fixbackslash assigns:
%  @@let \ = @@normalbackslash

% \rawbackslash defines an active \ to do \backslashcurfont.
% \otherbackslash defines an active \ to be a literal `\' character with
% catcode other.
@@gdef@@rawbackslash{@@let\=@@backslashcurfont}
@@gdef@@otherbackslash{@@let\=@@realbackslash}

% Same as @@turnoffactive except outputs \ as {\tt\char`\\} instead of
% the literal character `\'.
%
@@def@@normalturnoffactive{%
  @@let\=@@normalbackslash
  @@let"=@@normaldoublequote
  @@let~=@@normaltilde
  @@let^=@@normalcaret
  @@let_=@@normalunderscore
  @@let|=@@normalverticalbar
  @@let<=@@normalless
  @@let>=@@normalgreater
  @@let+=@@normalplus
  @@let$=@@normaldollar %$ font-lock fix
  @@markupsetuplqdefault
  @@markupsetuprqdefault
  @@unsepspaces
}

% Make _ and + \other characters, temporarily.
% This is canceled by @@fixbackslash.
@@otherifyactive

% If a .fmt file is being used, we don't want the `\input texinfo' to show up.
% That is what \eatinput is for; after that, the `\' should revert to printing
% a backslash.
%
@@gdef@@eatinput input texinfo{@@fixbackslash}
@@global@@let\ = @@eatinput

% On the other hand, perhaps the file did not have a `\input texinfo'. Then
% the first `\' in the file would cause an error. This macro tries to fix
% that, assuming it is called before the first `\' could plausibly occur.
% Also turn back on active characters that might appear in the input
% file name, in case not using a pre-dumped format.
%
@@gdef@@fixbackslash{%
  @@ifx\@@eatinput @@let\ = @@normalbackslash @@fi
  @@catcode`+=@@active
  @@catcode`@@_=@@active
}

% Say @@foo, not \foo, in error messages.
@@escapechar = `@@@@

% These look ok in all fonts, so just make them not special.
@@catcode`@@& = @@other
@@catcode`@@# = @@other
@@catcode`@@% = @@other

@@c Finally, make ` and ' active, so that txicodequoteundirected and
@@c txicodequotebacktick work right in, e.g., @@w{@@code{`foo'}}.  If we
@@c don't make ` and ' active, @@code will not get them as active chars.
@@c Do this last of all since we use ` in the previous @@catcode assignments.
@@catcode`@@'=@@active
@@catcode`@@`=@@active
@@markupsetuplqdefault
@@markupsetuprqdefault

@@c Gnulib now utterly and painfully insists on no trailing whitespace.
@@c So we have to nuke it.

@@c Local variables:
@@c eval: (add-hook 'write-file-hooks 'time-stamp)
@@c eval: (add-hook 'write-file-hooks 'nuke-trailing-whitespace)
@@c page-delimiter: "^\\\\message"
@@c time-stamp-start: "def\\\\texinfoversion{"
@@c time-stamp-format: "%:y-%02m-%02d.%02H"
@@c time-stamp-end: "}"
@@c End:

@@c vim:sw=2:

@@ignore
   arch-tag: e1b36e32-c96e-4135-a41a-0b2efa2ea115
@@end ignore
@


1.7
log
@2004-02-23  Andrew Cagney  <cagney@@redhat.com>

	* texinfo/texinfo.tex: Update from version 2003-02-03.16 to
	2004-02-19.09.
@
text
@d6 1
a6 1
\def\texinfoversion{2004-02-19.09}
d8 3
a10 3
% Copyright (C) 1985, 1986, 1988, 1990, 1991, 1992, 1993, 1994, 1995,
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
% Foundation, Inc.
d12 1
a12 1
% This texinfo.tex file is free software; you can redistribute it and/or
d14 2
a15 2
% published by the Free Software Foundation; either version 2, or (at
% your option) any later version.
d23 1
a23 3
% along with this texinfo.tex file; see the file COPYING.  If not, write
% to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
% Boston, MA 02111-1307, USA.
d28 1
a28 1
% 
d56 1
a56 1
% 
d68 1
a68 1
\message{Basics,}
a89 1
\let\ptexnoindent=\noindent
d93 2
d100 4
d158 5
a162 2
% In some macros, we cannot use the `\? notation---the left quote is
% in some cases the escape char.
d165 1
d168 1
d170 1
a173 4
\chardef\spaceChar = `\ %
\chardef\spacecat = 10
\def\spaceisspace{\catcode\spaceChar=\spacecat}

d183 2
a184 1
  Flor-i-da Ghost-script Ghost-view Mac-OS ap-pen-dix bit-map bit-maps
d187 2
a188 1
  par-a-digms rec-tan-gu-lar ro-bot-ics se-vere-ly set-up spa-ces
d284 44
d345 1
d347 1
a354 1
    \escapechar = `\\     % use backslash in output files.
d357 6
a362 1
                   % the page break happens to be in the middle of an example.
d390 1
a390 1
        % (We lessened \vsize for it in \oddfootingxxx.)
d392 1
a392 1
        \vskip 2\baselineskip
d413 1
a413 1
  }% end of group with \normalturnoffactive
d426 1
a426 1
\dimen@@=\dp#1 \unvbox#1
d448 1
a448 1
  \def\next{#2}%
d467 1
a467 1
% Each occurence of `\^^M' or `<space>\^^M' is replaced by a single space.
d479 1
a479 2
    % We cannot use \next here, as it holds the macro to run;
    % thus we reuse \temp.
d491 2
a492 2
% just before passing the control to \next.
% (Similarily, we have to think about #3 of \argcheckspacesY above: it is
d498 1
a498 1
\def\finishparsearg#1 \ArgTerm{\expandafter\next\expandafter{#1}}
d538 1
a538 1
% 
d541 1
a541 1
%   
d547 1
a547 1
% 
d549 1
a549 1
% are not treated as enviroments; they don't open a group.  (The
d554 1
a554 1
% At runtime, environments start with this:
d572 1
a572 1
% Evironment mismatch, #1 expected:
d622 1
a622 1
  % and @@{ and @@} for the aux file.
d656 2
a657 2
  \ifx\temp\imacro \ptexi
  \else\ifx\temp\jmacro \j
d664 2
a665 2
% 
\edef\TeX{\TeX \spacefactor=3000 }
d672 1
a672 1
% 
d703 1
a703 1
\def\.{.\spacefactor=3000 }
d706 1
a706 1
\def\!{!\spacefactor=3000 }
d709 16
a724 1
\def\?{?\spacefactor=3000 }
d923 1
a923 1
% @@include file    insert text of that file as input.
d930 7
a936 2
    \makevalueexpandable
    \def\temp{\input #1 }%
d951 2
d1109 1
a1109 1
  \catcode\underChar = \active
d1111 1
a1111 1
    \catcode\underChar=\active
d1128 10
d1151 1
d1157 1
d1161 1
a1161 1
% @@bullet and @@minus need the same treatment as @@math, just above.
d1163 3
a1165 1
\def\minus{$-$}
d1168 4
a1171 2
% We do .5em per period so that it has the same spacing in a typewriter
% font as three actual period characters.
d1175 11
a1185 4
  \hbox to 1.5em{%
    \hskip 0pt plus 0.25fil
    .\hfil.\hfil.%
    \hskip 0pt plus 0.5fil
d1193 1
a1193 1
  \spacefactor=3000
d1198 1
a1198 1
% 
d1264 3
a1267 6
  \pdffalse
  \let\pdfmkdest = \gobble
  \let\pdfurl = \gobble
  \let\endlink = \relax
  \let\linkcolor = \relax
  \let\pdfmakeoutlines = \relax
d1269 111
a1379 4
  \pdftrue
  \pdfoutput = 1
  \input pdfcolor
  \pdfcatalog{/PageMode /UseOutlines}%
d1381 31
a1411 3
    \def\imagewidth{#2}%
    \def\imageheight{#3}%
    % without \immediate, pdftex seg faults when the same image is
d1418 2
a1419 2
      \ifx\empty\imagewidth\else width \imagewidth \fi
      \ifx\empty\imageheight\else height \imageheight \fi
d1421 1
a1421 1
         #1.pdf%
d1423 1
a1423 1
         {#1.pdf}%
d1428 1
d1430 9
a1438 5
    % We have to set dummies so commands such as @@code in a section title
    % aren't expanded.
    \atdummies
    \normalturnoffactive
    \pdfdest name{#1} xyz%
d1440 2
d1443 7
a1449 2
  \let\linkcolor = \Blue  % was Cyan, but that seems light?
  \def\endlink{\Black\pdfendlink}
d1458 6
a1463 5
  % #1 is the section text.  #2 is the pdf expression for the number
  % of subentries (or empty, for subsubsections).  #3 is the node
  % text, which might be empty if this toc entry had no
  % corresponding node.  #4 is the page number.
  % 
d1468 1
a1468 1
    % seem worthwhile, since most documents are normally structured.
d1470 7
a1476 1
    \ifx\pdfoutlinedest\empty \def\pdfoutlinedest{#4}\fi
d1478 5
a1482 1
    \pdfoutline goto name{\pdfmkpgn{\pdfoutlinedest}}#2{#1}%
d1494 2
a1495 2
	\let\thissecnum\empty
	\let\thissubsecnum\empty
d1500 1
a1500 1
	\let\thissubsecnum\empty
d1509 3
a1511 3
      \let\thischapnum\empty
      \let\thissecnum\empty
      \let\thissubsecnum\empty
d1523 1
a1523 1
      \input \jobname.toc
d1528 1
a1528 1
      % 
d1544 1
a1544 1
      % 
d1549 3
a1551 2
      \turnoffactive
      \input \jobname.toc
a1554 30
  \def\makelinks #1,{%
    \def\params{#1}\def\E{END}%
    \ifx\params\E
      \let\nextmakelinks=\relax
    \else
      \let\nextmakelinks=\makelinks
      \ifnum\lnkcount>0,\fi
      \picknum{#1}%
      \startlink attr{/Border [0 0 0]}
        goto name{\pdfmkpgn{\the\pgn}}%
      \linkcolor #1%
      \advance\lnkcount by 1%
      \endlink
    \fi
    \nextmakelinks
  }
  \def\picknum#1{\expandafter\pn#1}
  \def\pn#1{%
    \def\p{#1}%
    \ifx\p\lbrace
      \let\nextpn=\ppn
    \else
      \let\nextpn=\ppnn
      \def\first{#1}
    \fi
    \nextpn
  }
  \def\ppn#1{\pgn=#1\gobble}
  \def\ppnn{\pgn=\first}
  \def\pdfmklnk#1{\lnkcount=0\makelinks #1,END,}
d1569 1
d1572 8
a1579 1
      \normalturnoffactive\def\@@{@@}%
d1581 5
a1585 1
      \leavevmode\Red
d1612 1
a1612 1
    \linkcolor #1\endlink}
d1614 9
a1622 1
\fi % \ifx\pdfoutput
d1630 1
a1630 1
% 
d1637 1
a1637 1
% 
d1643 1
a1643 1
\def\bf{\fam=\bffam \setfontstyle{bf}}
d1646 4
d1659 1
d1671 3
d1675 2
a1676 1
  \normalbaselineskip = #1\relax
d1685 261
d1948 10
a1957 2
% #3 is the font's design size, #4 is a scale factor
\def\setfont#1#2#3#4{\font#1=\fontprefix#2#3 scaled #4}
d1982 4
d1987 10
a1996 17
\newcount\mainmagstep
\ifx\bigger\relax
  % not really supported.
  \mainmagstep=\magstep1
  \setfont\textrm\rmshape{12}{1000}
  \setfont\texttt\ttshape{12}{1000}
\else
  \mainmagstep=\magstephalf
  \setfont\textrm\rmshape{10}{\mainmagstep}
  \setfont\texttt\ttshape{10}{\mainmagstep}
\fi
\setfont\textbf\bfshape{10}{\mainmagstep}
\setfont\textit\itshape{10}{\mainmagstep}
\setfont\textsl\slshape{10}{\mainmagstep}
\setfont\textsf\sfshape{10}{\mainmagstep}
\setfont\textsc\scshape{10}{\mainmagstep}
\setfont\textttsl\ttslshape{10}{\mainmagstep}
d1999 1
d2002 3
a2004 3
\setfont\defbf\bfshape{10}{\magstep1}
\setfont\deftt\ttshape{10}{\magstep1}
\setfont\defttsl\ttslshape{10}{\magstep1}
d2008 9
a2016 8
\setfont\smallrm\rmshape{9}{1000}
\setfont\smalltt\ttshape{9}{1000}
\setfont\smallbf\bfshape{10}{900}
\setfont\smallit\itshape{9}{1000}
\setfont\smallsl\slshape{9}{1000}
\setfont\smallsf\sfshape{9}{1000}
\setfont\smallsc\scshape{10}{900}
\setfont\smallttsl\ttslshape{10}{900}
d2019 1
d2022 9
a2030 8
\setfont\smallerrm\rmshape{8}{1000}
\setfont\smallertt\ttshape{8}{1000}
\setfont\smallerbf\bfshape{10}{800}
\setfont\smallerit\itshape{8}{1000}
\setfont\smallersl\slshape{8}{1000}
\setfont\smallersf\sfshape{8}{1000}
\setfont\smallersc\scshape{10}{800}
\setfont\smallerttsl\ttslshape{10}{800}
d2033 1
d2036 7
a2042 6
\setfont\titlerm\rmbshape{12}{\magstep3}
\setfont\titleit\itbshape{10}{\magstep4}
\setfont\titlesl\slbshape{10}{\magstep4}
\setfont\titlett\ttbshape{12}{\magstep3}
\setfont\titlettsl\ttslshape{10}{\magstep4}
\setfont\titlesf\sfbshape{17}{\magstep1}
d2044 1
a2044 1
\setfont\titlesc\scbshape{10}{\magstep4}
d2047 1
a2047 2
\def\authorrm{\secrm}
\def\authortt{\sectt}
d2050 7
a2056 6
\setfont\chaprm\rmbshape{12}{\magstep2}
\setfont\chapit\itbshape{10}{\magstep3}
\setfont\chapsl\slbshape{10}{\magstep3}
\setfont\chaptt\ttbshape{12}{\magstep2}
\setfont\chapttsl\ttslshape{10}{\magstep3}
\setfont\chapsf\sfbshape{17}{1000}
d2058 1
a2058 1
\setfont\chapsc\scbshape{10}{\magstep3}
d2061 1
d2064 7
a2070 6
\setfont\secrm\rmbshape{12}{\magstep1}
\setfont\secit\itbshape{10}{\magstep2}
\setfont\secsl\slbshape{10}{\magstep2}
\setfont\sectt\ttbshape{12}{\magstep1}
\setfont\secttsl\ttslshape{10}{\magstep2}
\setfont\secsf\sfbshape{12}{\magstep1}
d2072 1
a2072 1
\setfont\secsc\scbshape{10}{\magstep2}
d2075 1
d2078 7
a2084 6
\setfont\ssecrm\rmbshape{12}{\magstephalf}
\setfont\ssecit\itbshape{10}{1315}
\setfont\ssecsl\slbshape{10}{1315}
\setfont\ssectt\ttbshape{12}{\magstephalf}
\setfont\ssecttsl\ttslshape{10}{1315}
\setfont\ssecsf\sfbshape{12}{\magstephalf}
d2086 1
a2086 1
\setfont\ssecsc\scbshape{10}{1315}
d2089 1
d2092 9
a2100 8
\setfont\reducedrm\rmshape{10}{1000}
\setfont\reducedtt\ttshape{10}{1000}
\setfont\reducedbf\bfshape{10}{1000}
\setfont\reducedit\itshape{10}{1000}
\setfont\reducedsl\slshape{10}{1000}
\setfont\reducedsf\sfshape{10}{1000}
\setfont\reducedsc\scshape{10}{1000}
\setfont\reducedttsl\ttslshape{10}{1000}
d2103 166
d2286 1
a2286 1
% 
d2290 1
a2290 1
% 
d2292 1
a2292 1
% 
d2298 1
d2306 1
d2309 1
a2309 1
\def\titlefont#1{{\titlefonts\rm #1}}
d2313 3
a2315 1
  \let\tensf=\chapsf \let\teni=\chapi \let\tensy=\chapsy \let\tenttsl=\chapttsl
d2323 1
d2331 1
d2340 1
d2348 1
d2356 1
d2360 10
d2383 3
d2387 2
a2388 2
% I wish the USA used A4 paper.
% --karl, 24jan03.
d2390 1
d2392 4
a2395 1
% Set up the default fonts, so we can use them for creating boxes.
d2397 54
a2450 1
\textfonts \rm
d2452 49
a2500 3
% Define these so they can be easily changed for other fonts.
\def\angleleft{$\langle$}
\def\angleright{$\rangle$}
a2504 6
% Fonts for short table of contents.
\setfont\shortcontrm\rmshape{12}{1000}
\setfont\shortcontbf\bfshape{10}{\magstep1}  % no cmb12
\setfont\shortcontsl\slshape{12}{1000}
\setfont\shortconttt\ttshape{12}{1000}

d2519 1
a2519 1
% like \smartslanted except unconditionally use \sl.  We never want
d2524 2
a2525 1
\let\var=\smartslanted
d2529 6
d2538 3
d2553 1
a2553 1
  \def\frenchspacing{%
d2556 6
d2564 1
d2566 1
d2568 1
a2568 1
  {\tt \rawbackslash \frenchspacing #1}%
d2571 24
a2594 11
\def\samp#1{`\tclose{#1}'\null}
\setfont\keyrm\rmshape{8}{1000}
\font\keysy=cmsy9
\def\key#1{{\keyrm\textfont2=\keysy \leavevmode\hbox{%
  \raise0.4pt\hbox{\angleleft}\kern-.08em\vtop{%
    \vbox{\hrule\kern-0.4pt
     \hbox{\raise0.4pt\hbox{\vphantom{\angleleft}}#1}}%
    \kern-0.4pt\hrule}%
  \kern-.06em\raise0.4pt\hbox{\angleright}}}}
% The old definition, with no lozenge:
%\def\key #1{{\ttsl \nohyphenation \uppercase{#1}}\null}
d2618 1
a2618 1
    \frenchspacing
d2634 3
a2636 2
  \catcode`\-=\active
  \catcode`\_=\active
d2639 10
a2648 2
    \catcode`\-=\active \let-\codedash
    \catcode`\_=\active \let_\codeunder
d2668 22
d2692 1
d2698 2
a2699 2
  \def\arg{#1}%
  \ifx\arg\worddistinct
d2701 1
a2701 1
  \else\ifx\arg\wordexample
d2703 1
a2703 1
  \else\ifx\arg\wordcode
d2707 1
a2707 1
    \errmessage{Unknown @@kbdinputstyle option `\arg'}%
d2714 1
a2714 1
% Default is `distinct.'
d2720 2
a2721 2
\else{\tclose{\kbdfont\look}}\fi
\else{\tclose{\kbdfont\look}}\fi}
d2723 2
a2724 2
% For @@url, @@env, @@command quotes seem unnecessary, so use \code.
\let\url=\code
d2728 7
d2763 4
a2783 7
% Check if we are currently using a typewriter font.  Since all the
% Computer Modern typewriter fonts have zero interword stretch (and
% shrink), and it is reasonable to expect all typewriter fonts to have
% this property, we can check that font parameter.
%
\def\ifmonospace{\ifdim\fontdimen3\font=0pt }

a2788 2
\def\kbd#1{\def\look{#1}\expandafter\kbdfoo\look??\par}

d2794 4
a2797 5
% Explicit font changes: @@r, @@sc, undocumented @@ii.
\def\r#1{{\rm #1}}              % roman font
\def\sc#1{{\smallcaps#1}}       % smallcaps font
\def\ii#1{{\it #1}}             % italic font

d2807 52
a2858 2
% @@pounds{} is a sterling sign, which is in the CM italic font.
% 
d2861 112
d2983 18
a3084 3
\def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
		\let\tt=\authortt}

d3087 1
a3087 1
  \leftline{\titlefonts\rm #1}
d3100 1
a3100 1
% 
d3108 1
a3108 1
    {\authorfont \leftline{#1}}%
d3161 2
a3162 2
  \global\advance\pageheight by -\baselineskip
  \global\advance\vsize by -\baselineskip
d3167 27
d3330 7
a3336 11
    % Stop a page break at the \parskip glue coming up.  (Unfortunately
    % we can't prevent a possible page break at the following
    % \baselineskip glue.)  However, if what follows is an environment
    % such as @@example, there will be no \parskip glue; then
    % the negative vskip we just would cause the example and the item to
    % crash together.  So we use this bizarre value of 10001 as a signal
    % to \aboveenvbreak to insert \parskip glue after all.
    % (Possibly there are other commands that could be followed by
    % @@example which need the same treatment, but not section titles; or
    % maybe section titles are the only special case and they should be
    % penalty 10001...)
d3362 1
a3362 1
  \tablex
d3366 1
a3366 1
  \tablex
d3370 12
a3381 1
  \tablex
d3430 6
d3437 2
d3441 1
d3462 1
d3644 1
a3644 1
% 
d3684 9
a3692 2
% of an alignment entry.  Note that \everycr resets \everytab.
\def\headitem{\checkenv\multitable \crcr \global\everytab={\bf}\the\everytab}%
d3696 1
a3696 1
% we encounter the problem it was intended to solve again.
d3709 4
a3712 1
  \let\item\crcr
d3797 7
a3803 3
\def\setmultitablespacing{% test to see if user has set \multitablelinespace.
% If so, do nothing. If not, give it an appropriate dimension based on
% current baselineskip.
d3807 1
a3807 7
%% strut to put in table in case some entry doesn't have descenders,
%% to keep lines equally spaced
\let\multistrut = \strut
\else
%% FIXME: what is \box0 supposed to be?
\gdef\multistrut{\vrule height\multitablelinespace depth\dp0
width0pt\relax} \fi
d3865 1
d3877 1
a3877 1
  \dodoignore {#1}%
d3884 5
a3888 1
    % #1 contains the string `ifinfo'.
a3889 3
    % Define a command to find the next `@@end #1', which must be on a line
    % by itself.
    \long\def\doignoretext##1^^M@@end #1{\doignoretextyyy##1^^M@@#1\_STOP_}%
a3895 1
    \obeylines %
d3913 1
a3913 1
% 
d3925 6
a3930 1
\def\enddoignore{\endgroup\ignorespaces}
d4043 2
a4044 3
% except not \outer, so it can be used within \newindex.
{\catcode`\@@=11
\gdef\newwrite{\alloc@@7\write\chardef\sixt@@@@n}}
d4095 1
a4095 1
  \expandafter \ifx\csname donesynindex#2\endcsname \undefined
d4099 1
a4099 1
    \expandafter\let\csname\donesynindex#2\endcsname = 1
d4130 1
d4133 1
d4140 17
a4156 5
  % \definedummyword defines \#1 as \realbackslash #1\space, thus
  % effectively preventing its expansion.  This is used only for control
  % words, not control letters, because the \space would be incorrect
  % for control characters, but is needed to separate the control word
  % from whatever follows.
d4158 1
a4158 2
  % For control letters, we have \definedummyletter, which omits the
  % space.
d4160 2
a4161 3
  % These can be used both for control words that take an argument and
  % those that do not.  If it is followed by {arg} in the input, then
  % that will dutifully get written to the index (or wherever).
d4163 2
a4164 6
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1}%
  }%
d4170 4
a4173 3
% For the aux file, @@ is the escape character.  So we want to redefine
% everything using @@ instead of \realbackslash.  When everything uses
% @@, this will be simpler.
a4180 8
  % (See comments in \indexdummies.)
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{@@##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{@@##1}%
  }%
  %
d4183 1
d4186 1
a4186 2
% Called from \indexdummies and \atdummies.  \definedummyword and
% \definedummyletter must be defined first.
d4190 16
a4205 1
  \normalturnoffactive
d4209 1
a4209 1
  \definedummyletter{_}%
d4212 19
a4230 15
  \definedummyword{AA}%
  \definedummyword{AE}%
  \definedummyword{L}%
  \definedummyword{OE}%
  \definedummyword{O}%
  \definedummyword{aa}%
  \definedummyword{ae}%
  \definedummyword{l}%
  \definedummyword{oe}%
  \definedummyword{o}%
  \definedummyword{ss}%
  \definedummyword{exclamdown}%
  \definedummyword{questiondown}%
  \definedummyword{ordf}%
  \definedummyword{ordm}%
d4233 8
a4240 8
  \definedummyword{bf}%
  \definedummyword{gtr}%
  \definedummyword{hat}%
  \definedummyword{less}%
  \definedummyword{sf}%
  \definedummyword{sl}%
  \definedummyword{tclose}%
  \definedummyword{tt}%
d4242 2
a4243 2
  \definedummyword{LaTeX}%
  \definedummyword{TeX}%
d4246 32
a4277 13
  \definedummyword{bullet}%
  \definedummyword{copyright}%
  \definedummyword{registeredsymbol}%
  \definedummyword{dots}%
  \definedummyword{enddots}%
  \definedummyword{equiv}%
  \definedummyword{error}%
  \definedummyword{expansion}%
  \definedummyword{minus}%
  \definedummyword{pounds}%
  \definedummyword{point}%
  \definedummyword{print}%
  \definedummyword{result}%
a4281 6
  %
  % Normal spaces, not active ones.
  \unsepspaces
  %
  % No macro expansion.
  \turnoffmacros
d4286 57
a4342 57
% Better have this without active chars.
{
  \catcode`\~=\other
  \gdef\commondummiesnofonts{%
    % Control letters and accents.
    \definedummyletter{!}%
    \definedummyletter{"}%
    \definedummyletter{'}%
    \definedummyletter{*}%
    \definedummyletter{,}%
    \definedummyletter{.}%
    \definedummyletter{/}%
    \definedummyletter{:}%
    \definedummyletter{=}%
    \definedummyletter{?}%
    \definedummyletter{^}%
    \definedummyletter{`}%
    \definedummyletter{~}%
    \definedummyword{u}%
    \definedummyword{v}%
    \definedummyword{H}%
    \definedummyword{dotaccent}%
    \definedummyword{ringaccent}%
    \definedummyword{tieaccent}%
    \definedummyword{ubaraccent}%
    \definedummyword{udotaccent}%
    \definedummyword{dotless}%
    %
    % Texinfo font commands.
    \definedummyword{b}%
    \definedummyword{i}%
    \definedummyword{r}%
    \definedummyword{sc}%
    \definedummyword{t}%
    %
    % Commands that take arguments.
    \definedummyword{acronym}%
    \definedummyword{cite}%
    \definedummyword{code}%
    \definedummyword{command}%
    \definedummyword{dfn}%
    \definedummyword{emph}%
    \definedummyword{env}%
    \definedummyword{file}%
    \definedummyword{kbd}%
    \definedummyword{key}%
    \definedummyword{math}%
    \definedummyword{option}%
    \definedummyword{samp}%
    \definedummyword{strong}%
    \definedummyword{tie}%
    \definedummyword{uref}%
    \definedummyword{url}%
    \definedummyword{var}%
    \definedummyword{verb}%
    \definedummyword{w}%
  }
d4351 6
a4356 4
  \def\definedummyword##1{%
    \expandafter\let\csname ##1\endcsname\asis
  }%
  \let\definedummyletter=\definedummyword
d4373 1
d4377 1
d4380 2
d4384 2
d4387 1
d4389 1
a4389 4
  \def\exclamdown{!}%
  \def\questiondown{?}%
  \def\ordf{a}%
  \def\ordm{o}%
d4397 1
d4404 5
d4414 6
d4421 13
d4461 1
a4461 5
    \ifvmode
      \dosubindsanitize
    \else
      \dosubindwrite
    \fi
a4475 1
  \escapechar=`\\
d4498 1
a4498 1
% Take care of unwanted page breaks:
d4503 2
a4504 2
% \write will make \lastskip zero.  The result is that sequences
% like this:
d4528 3
d4533 4
a4536 1
\def\dosubindsanitize{%
d4538 1
a4538 1
  \skip0 = \lastskip
d4540 1
a4540 1
  \count255 = \lastpenalty
d4544 1
a4544 1
  % -\skip0 glue we're inserting is preceded by a
d4549 1
a4549 1
    \vskip-\skip0
d4552 1
a4552 1
  \dosubindwrite
d4555 6
a4560 5
    % if \lastskip was zero, perhaps the last item was a
    % penalty, and perhaps it was >=10000, e.g., a \nobreak.
    % In that case, we want to re-insert the penalty; since we
    % just inserted a non-discardable item, any following glue
    % (such as a \parskip) would be a breakpoint.  For example:
d4566 1
a4566 1
    \ifnum\count255>9999 \nobreak \fi
d4571 1
a4571 1
    \nobreak\vskip\skip0
d4573 1
d4616 1
d4666 4
a4669 1
  \penalty -300
a4678 2
  \vskip .33\baselineskip plus .1\baselineskip
  %
d4681 1
d4690 1
a4690 1
% But this frozes the catcodes in the argument, and can cause problems to
d4693 1
a4693 1
% 
d4746 2
a4747 5
    \def\tempa{{\rm }}%
    \def\tempb{#1}%
    \edef\tempc{\tempa}%
    \edef\tempd{\tempb}%
    \ifx\tempc\tempd
d4771 1
a4771 1
% Like \dotfill except takes at least 1 em.
d4773 1
a4773 1
  \hbox{$\mathsurround=0pt \mkern1.5mu ${\it .}$ \mkern1.5mu$}\hskip 1em plus 1fill}
d4883 28
d4984 1
a4984 1
% 
d5020 3
a5022 3
% Each @@chapter defines this as the name of the chapter.
% page headings and footings can use it.  @@section does likewise.
% However, they are not reliable, because we don't use marks.
d5024 2
d5027 2
d5041 47
a5087 12
% Choose a numbered-heading macro
% #1 is heading level if unmodified by @@raisesections or @@lowersections
% #2 is text for heading
\def\numhead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
\ifcase\absseclevel
      \chapterzzz{#2}%
  \or \seczzz{#2}%
  \or \numberedsubseczzz{#2}%
  \or \numberedsubsubseczzz{#2}%
  \else
    \ifnum \absseclevel<0 \chapterzzz{#2}%
    \else \numberedsubsubseczzz{#2}%
d5090 23
a5112 13
  \suppressfirstparagraphindent
}

% like \numhead, but chooses appendix heading levels
\def\apphead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
\ifcase\absseclevel
      \appendixzzz{#2}%
  \or \appendixsectionzzz{#2}%
  \or \appendixsubseczzz{#2}%
  \or \appendixsubsubseczzz{#2}%
  \else
    \ifnum \absseclevel<0 \appendixzzz{#2}%
    \else \appendixsubsubseczzz{#2}%
d5118 4
a5121 14
% like \numhead, but chooses numberless heading levels
\def\unnmhead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
  \ifcase\absseclevel
      \unnumberedzzz{#2}%
  \or \unnumberedseczzz{#2}%
  \or \unnumberedsubseczzz{#2}%
  \or \unnumberedsubsubseczzz{#2}%
  \else
    \ifnum \absseclevel<0 \unnumberedzzz{#2}%
    \else \unnumberedsubsubseczzz{#2}%
    \fi
  \fi
  \suppressfirstparagraphindent
}
d5125 1
a5125 1
% 
d5129 1
a5129 1
% 
d5141 3
a5143 1
  \message{\putwordChapter\space \the\chapno}%
d5154 2
a5155 1
\outer\parseargdef\appendix{\apphead0{#1}} % normally apphead0 calls appendixzzz
d5162 3
a5164 2
  \def\appendixnum{\putwordAppendix\space \appendixletter}%
  \message{\appendixnum}%
a5172 3
% @@centerchap is like @@unnumbered, but the heading is centered.
\outer\parseargdef\centerchap{{\unnumberedyyy{#1}}}

d5203 10
a5278 18
% These are variants which are not "outer", so they can appear in @@ifinfo.
% Actually, they are now be obsolete; ordinary section commands should work.
\def\infotop{\parsearg\unnumberedzzz}
\def\infounnumbered{\parsearg\unnumberedzzz}
\def\infounnumberedsec{\parsearg\unnumberedseczzz}
\def\infounnumberedsubsec{\parsearg\unnumberedsubseczzz}
\def\infounnumberedsubsubsec{\parsearg\unnumberedsubsubseczzz}

\def\infoappendix{\parsearg\appendixzzz}
\def\infoappendixsec{\parsearg\appendixseczzz}
\def\infoappendixsubsec{\parsearg\appendixsubseczzz}
\def\infoappendixsubsubsec{\parsearg\appendixsubsubseczzz}

\def\infochapter{\parsearg\chapterzzz}
\def\infosection{\parsearg\sectionzzz}
\def\infosubsection{\parsearg\subsectionzzz}
\def\infosubsubsection{\parsearg\subsubsectionzzz}

a5295 1

d5304 2
a5305 2
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}%
a5324 2
\def\setchapterstyle #1 {\csname CHAPF#1\endcsname}

d5332 14
a5345 1
\def\chapoddpage{\chappager \ifodd\pageno \else \hbox to 0pt{} \chappager\fi}
d5368 2
a5369 6
\def\CHAPFplain{%
\global\let\chapmacro=\chfplain
\global\let\centerchapmacro=\centerchfplain}

% Normal chapter opening.
% 
d5372 1
a5372 1
% 
d5378 43
a5420 1
\def\chfplain#1#2#3{%
d5422 7
d5430 1
a5430 1
    \chapfonts \rm
d5432 1
a5432 1
    % Have to define \thissection before calling \donoderef, because the
d5435 1
a5435 2
    \gdef\thissection{#1}%
    \gdef\thischaptername{#1}%
a5438 1
    \def\temptype{#2}%
a5441 1
      \def\thischapter{#1}%
a5444 1
      \xdef\thischapter{}%
a5447 6
      % We don't substitute the actual chapter name into \thischapter
      % because we don't want its macros evaluated now.  And we don't
      % use \thissection because that changes with each section.
      %
      \xdef\thischapter{\putwordAppendix{} \appendixletter:
                        \noexpand\thischaptername}%
a5450 2
      \xdef\thischapter{\putwordChapter{} \the\chapno:
                        \noexpand\thischaptername}%
d5466 2
a5467 1
    \vbox{\hyphenpenalty=10000 \tolerance=5000 \parindent=0pt \raggedright
d5477 5
a5481 8
\def\centerchfplain#1{{%
  \def\centerparametersmaybe{%
    \advance\rightskip by 3\rightskip
    \leftskip = \rightskip
    \parfillskip = 0pt
  }%
  \chfplain{#1}{Ynothing}{}%
}}
a5482 1
\CHAPFplain % The default
d5486 3
a5488 1
% 
d5491 2
a5492 2
                       \parindent=0pt\raggedright
                       \rm #1\hfill}}\bigskip \par\nobreak
a5493 1

a5497 1

d5501 1
a5501 1
                       \hfill {\rm #1}\hfill}}\bigskip \par\nobreak
a5502 1

d5504 2
a5505 2
\global\let\chapmacro=\chfopen
\global\let\centerchapmacro=\centerchfopen}
d5510 1
a5510 1
% 
d5524 1
a5524 1
% 
d5528 3
a5530 1
% 
d5534 50
a5583 1
    \csname #2fonts\endcsname \rm
d5588 5
a5593 3
    \def\sectionlevel{#2}%
    \def\temptype{#3}%
    %
d5597 1
a5597 1
      \gdef\thissection{#1}%
d5600 1
a5600 1
      % and don't redefine \thissection.
d5607 1
a5607 1
      \gdef\thissection{#1}%
d5611 1
a5611 1
      \gdef\thissection{#1}%
d5614 1
a5614 1
    % Write the toc entry (before \donoderef).  See comments in \chfplain.
d5618 1
a5618 1
    % Again, see comments in \chfplain.
d5621 8
d5630 1
a5630 1
    \vbox{\hyphenpenalty=10000 \tolerance=5000 \parindent=0pt \raggedright
d5647 4
a5650 4
  % This \nobreak is purely so the last item on the list is a \penalty
  % of 10000.  This is so other code, for instance \parsebodycommon, can
  % check for and avoid allowing breakpoints.  Otherwise, it would
  % insert a valid breakpoint between:
d5653 1
a5653 1
  \nobreak
d5662 2
a5663 2
% Called from @@chapter, etc.  
% 
d5669 1
a5669 1
% 
d5687 5
a5691 5
      \toks0 = {#2}%
      \toks2 = \expandafter{\lastnode}%
      \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}{#3}%
                               {\the\toks2}{\noexpand\folio}}}%
      \temp
d5704 25
a5744 1
  \def\thischapter{}%
d5749 1
a5749 5
    \catcode`\\=0  \catcode`\{=1  \catcode`\}=2  \catcode`\@@=11
    % We can't do this, because then an actual ^ in a section
    % title fails, e.g., @@chapter ^ -- exponentiation.  --karl, 9jul97.
    %\catcode`\^=7 % to see ^^e4 as \"a etc. juha@@piuha.ydi.vtt.fi
    \raggedbottom             % Worry more about breakpoints than the bottom.
d5756 4
d5762 1
d5765 1
a5765 1
    \openin 1 \jobname.toc
d5767 1
a5767 1
      \input \jobname.toc
d5803 1
a5803 1
    \openin 1 \jobname.toc
d5805 1
a5805 1
      \input \jobname.toc
d5825 1
a5825 1
  % 
d5850 1
a5850 1
% 
a5927 34
% @@point{}, @@result{}, @@expansion{}, @@print{}, @@equiv{}.
%
% Since these characters are used in examples, it should be an even number of
% \tt widths. Each \tt character is 1en, so two makes it 1em.
%
\def\point{$\star$}
\def\result{\leavevmode\raise.15ex\hbox to 1em{\hfil$\Rightarrow$\hfil}}
\def\expansion{\leavevmode\raise.1ex\hbox to 1em{\hfil$\mapsto$\hfil}}
\def\print{\leavevmode\lower.1ex\hbox to 1em{\hfil$\dashv$\hfil}}
\def\equiv{\leavevmode\lower.1ex\hbox to 1em{\hfil$\ptexequiv$\hfil}}

% The @@error{} command.
% Adapted from the TeXbook's \boxit.
%
\newbox\errorbox
%
{\tentt \global\dimen0 = 3em}% Width of the box.
\dimen2 = .55pt % Thickness of rules
% The text. (`r' is open on the right, `e' somewhat less so on the left.)
\setbox0 = \hbox{\kern-.75pt \tensf error\kern-1.5pt}
%
\setbox\errorbox=\hbox to \dimen0{\hfil
   \hsize = \dimen0 \advance\hsize by -5.8pt % Space to left+right.
   \advance\hsize by -2\dimen2 % Rules.
   \vbox{%
      \hrule height\dimen2
      \hbox{\vrule width\dimen2 \kern3pt          % Space to left of text.
         \vtop{\kern2.4pt \box0 \kern2.4pt}% Space above/below.
         \kern3pt\vrule width\dimen2}% Space to right.
      \hrule height\dimen2}
    \hfil}
%
\def\error{\leavevmode\lower.7ex\copy\errorbox}

d5933 1
d5943 2
d5964 2
d5994 2
a5995 1
  % =10000 instead of <10000 because of a special case in \itemzzz, q.v.
d6011 2
a6012 1
% \nonarrowing is a flag.  If "set", @@lisp etc don't narrow margins.
d6049 1
a6049 1
  \let\nonarrowing=\comment
d6080 1
d6088 3
d6092 2
a6094 2
  % @@cartouche defines \nonarrowing to inhibit narrowing
  % at next level down.
d6098 2
d6104 18
d6132 5
d6143 1
d6170 1
a6170 1
  \tt
a6173 1

d6208 24
d6237 1
a6237 1
\envdef\quotation{%
d6246 1
d6252 11
d6265 1
a6265 1
% 
d6298 4
a6307 6
% [Knuth] pp. 380,381,391
% Disable Spanish ligatures ?` and !` of \tt font
\begingroup
  \catcode`\`=\active\gdef`{\relax\lq}
\endgroup
%
d6319 1
a6319 1
  \catcode`\`=\active
d6334 1
d6348 2
d6351 1
a6352 1
  \advance\leftskip by -\defbodyindent
a6355 1
  \catcode`\`=\active
d6357 1
d6417 1
d6424 1
a6424 2
% Save the text away for @@insertcopying later.  Many commands won't be
% allowed in this context, but that's ok.
d6433 8
a6440 56
\def\copying{\begingroup
  % Define a command to swallow text until we reach `@@end copying'.
  % \ is the escape char in this texinfo.tex file, so it is the
  % delimiter for the command; @@ will be the escape char when we read
  % it, but that doesn't matter.
  \long\def\docopying##1\end copying{\gdef\copyingtext{##1}\enddocopying}%
  %
  % We must preserve ^^M's in the input file; see \insertcopying below.
  \catcode`\^^M = \active
  \docopying
}

% What we do to finish off the copying text.
%
\def\enddocopying{\endgroup\ignorespaces}

% @@insertcopying.  Here we must play games with ^^M's.  On the one hand,
% we need them to delimit commands such as `@@end quotation', so they
% must be active.  On the other hand, we certainly don't want every
% end-of-line to be a \par, as would happen with the normal active
% definition of ^^M.  On the third hand, two ^^M's in a row should still
% generate a \par.
%
% Our approach is to make ^^M insert a space and a penalty1 normally;
% then it can also check if \lastpenalty=1.  If it does, then manually
% do \par.
%
% This messes up the normal definitions of @@c[omment], so we redefine
% it.  Similarly for @@ignore.  (These commands are used in the gcc
% manual for man page generation.)
%
% Seems pretty fragile, most line-oriented commands will presumably
% fail, but for the limited use of getting the copying text (which
% should be quite simple) inserted, we can hope it's ok.
%
{\catcode`\^^M=\active %
\gdef\insertcopying{\begingroup %
  \parindent = 0pt  % looks wrong on title page
  \def^^M{%
    \ifnum \lastpenalty=1 %
      \par %
    \else %
      \space \penalty 1 %
    \fi %
  }%
  %
  % Fix @@c[omment] for catcode 13 ^^M's.
  \def\c##1^^M{\ignorespaces}%
  \let\comment = \c %
  %
  % Don't bother jumping through all the hoops that \doignore does, it
  % would be very hard since the catcodes are already set.
  \long\def\ignore##1\end ignore{\ignorespaces}%
  %
  \copyingtext %
\endgroup}%
d6443 1
d6450 1
d6456 2
d6462 10
a6471 5
    % break somewhere.  Check for penalty 10002 (inserted by
    % \defargscommonending) instead of 10000, since the sectioning
    % commands insert a \penalty10000, and we don't want to allow a break
    % between a section heading and a defun.
    \ifnum\lastpenalty=10002 \penalty2000 \fi
d6489 1
a6489 1
  \ifnum\lastpenalty=10002 \penalty3000 \fi
d6507 1
a6507 1
    \penalty 10002  % signal to \startdefun and \dodefunx
d6517 1
a6517 1
% the only thing remainnig is to define \deffnheader.
d6630 1
a6630 1
% 
d6688 1
a6688 1
% 
d6690 1
a6690 1
  % use sl by default (not ttsl), 
d6696 1
a6696 1
  \let\var=\ttslanted
d6776 2
d6779 1
a6779 1
  \errmessage{Unbalanced parentheses in @@def}%
d6783 1
a6783 1
  \errmessage{Unbalanced square braces in @@def}%
d6796 1
a6796 1
    \toks0={#1\endinput}%
d6809 5
a6813 1
    \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
a6817 1
    %
d6824 5
d6832 13
a6844 2
\def\macrolist{}    % List of all defined macros in the form
                    % \do\macro1\do\macro2...
d6847 4
a6850 1
% This does \let #1 = #2, except with \csnames.
d6852 4
a6855 5
\expandafter\expandafter
\expandafter\let
\expandafter\expandafter
\csname#1\endcsname
\csname#2\endcsname}
d6878 4
d6886 6
a6891 2
\def\macrobodyctxt{%
  \catcode`\~=\other
d6895 12
a6906 3
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
a6908 1
  \catcode`\@@=\other
d6910 2
a6911 1
  \usembodybackslash}
d6914 3
a6916 9
  \catcode`\~=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
  \catcode`\@@=\other
  \catcode`\\=\other}
d6947 1
a6947 4
     % Add the macroname to \macrolist
     \toks0 = \expandafter{\macrolist\do}%
     \xdef\macrolist{\the\toks0
       \expandafter\noexpand\csname\the\macname\endcsname}%
d6961 1
a6961 1
      \let\do\unmacrodo
d6973 1
a6973 1
  \ifx#1\relax
d6976 1
a6976 1
    \noexpand\do \noexpand #1%
d7089 1
a7089 1
\def\braceorline#1{\let\next=#1\futurelet\nchar\braceorlinexxx}
d7093 1
a7093 6
  \fi \next}

% We mant to disable all macros during \shipout so that they are not
% expanded by \write.
\def\turnoffmacros{\begingroup \def\do##1{\let\noexpand##1=\relax}%
  \edef\next{\macrolist}\expandafter\endgroup\next}
d7104 1
a7113 1

d7123 12
a7134 3
% cross-references.
\parseargdef\node{\checkenv{}\nodexxx #1,\finishnodeparse}
\def\nodexxx#1,#2\finishnodeparse{\gdef\lastnode{#1}}
d7140 1
a7140 1
% 
d7158 1
a7158 1
% 1) NAME-title - the current sectioning name taken from \thissection,
d7163 1
a7163 1
% 
d7167 1
a7167 1
% 
a7172 2
      \turnoffactive
      \otherbackslash
d7177 1
a7177 1
      \toks0 = \expandafter{\thissection}%
d7180 1
a7180 1
      \writexrdef{pg}{\folio}% will be written later, during \shipout
d7224 12
a7235 3
    \leavevmode
    \getfilename{#4}%
    {\turnoffactive \otherbackslash
d7237 1
a7237 2
       \startlink attr{/Border [0 0 0]}%
         goto file{\the\filename.pdf} name{#1}%
d7239 1
a7239 2
       \startlink attr{/Border [0 0 0]}%
         goto name{\pdfmkpgn{#1}}%
d7242 1
a7242 1
    \linkcolor
a7252 1
    \otherbackslash
d7260 1
a7260 1
      \refx{#1-snt}%
d7266 1
a7266 1
    % "in MANUALNAME". 
d7272 1
a7272 1
    % 
d7280 1
a7280 1
      \putwordsection{} ``\printedrefname'' \putwordin{} \cite{\printedmanual}%
d7287 1
a7287 1
      {\turnoffactive \otherbackslash
d7300 1
a7300 1
      \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
d7376 9
a7384 1
  \expandafter\gdef\csname XR#1\endcsname{#2}% remember this xref value.
d7387 1
a7387 1
  \expandafter\iffloat\csname XR#1\endcsname
d7391 1
a7391 1
    % 
d7402 2
a7403 1
    \expandafter\xdef\csname floatlist\iffloattype\endcsname{\the\toks0{#1}}%
d7408 1
a7408 1
% 
d7412 1
a7412 1
    \readauxfile
d7418 1
a7418 1
\def\readauxfile{\begingroup
d7487 1
a7487 1
    \count 1=128
d7489 3
a7491 3
      \catcode\count 1=\other
      \advance\count 1 by 1
      \ifnum \count 1<256 \loop \fi
d7499 6
a7504 2
  %
  \input \jobname.aux
d7590 1
a7590 1
% Similarily, if a @@footnote appears inside an alignment, save the footnote
d7694 1
a7694 1
    \nobreak\bigskip
a7699 1
    \line\bgroup\hss
d7702 5
d7717 1
a7717 1
  \ifimagevmode \hss \egroup \bigbreak \fi  % space after the image
d7721 8
a7728 5
% @@float FLOATTYPE,LOC ... @@end float for displayed figures, tables, etc.
% We don't actually implement floating yet, we just plop the float "here".
% But it seemed the best name for the future.
% 
\envparseargdef\float{\dofloat #1,,,\finish}
d7733 1
a7733 1
% 
d7736 1
a7736 1
% 
d7739 1
a7739 1
% 
d7749 4
d7755 3
d7779 1
a7779 1
      % 
d7784 1
a7784 1
        % This magic value for \thissection is output by \setref as the
d7789 2
a7790 2
        % 
        \edef\thissection{\floatmagic=\safefloattype}%
d7837 1
a7837 1
      \appendtomacro\captionline\thiscaption
d7845 3
d7857 16
a7872 9
        \atdummies \turnoffactive \otherbackslash
        \immediate\write\auxfile{@@xrdef{\floatlabel-lof}{%
          \floatident
          \ifx\thisshortcaption\empty
            \ifx\thiscaption\empty \else : \thiscaption \fi
          \else
            : \thisshortcaption
          \fi
        }}%
a7874 3
    %
    % Space below caption, if we printed anything.
    \ifx\printedsomething\empty \else \vskip\parskip \fi
d7876 7
d7887 1
a7887 3
% 
\newtoks\appendtomacroAtoks
\newtoks\appendtomacroBtoks
d7889 1
a7889 3
  \appendtomacroAtoks = \expandafter{#1}%
  \appendtomacroBtoks = {#2}%
  \edef#1{\the\appendtomacroAtoks \the\appendtomacroBtoks}%
d7892 6
a7897 4
% @@caption, @@shortcaption are easy.
% 
\long\def\caption#1{\checkenv\float \def\thiscaption{#1}}
\def\shortcaption#1{\checkenv\float \def\thisshortcaption{#1}}
d7916 1
a7916 1
% 
d7925 2
a7926 2
% \thissection value which we \setref above.
% 
d7931 1
a7931 1
% 
d7939 1
a7939 1
% 
d7969 1
a7969 1
% 
d7972 1
a7972 1
% 
d7986 1
a7987 1
% and i18n.
d7989 3
a7991 4
% @@documentlanguage is usually given very early, just after
% @@setfilename.  If done too late, it may not override everything
% properly.  Single argument is the language abbreviation.
% It would be nice if we could set up a hyphenation file here.
d7993 5
a7997 1
\parseargdef\documentlanguage{%
d7999 1
a7999 1
    % Read the file if it exists.
d8002 1
a8002 2
      \errhelp = \nolanghelp
      \errmessage{Cannot read language file txi-#1.tex}%
d8004 1
d8008 16
a8023 1
  \endgroup
d8025 2
d8028 390
a8417 2
is empty.  Maybe you need to install it?  In the current directory
should work if nowhere else does.}
d8419 24
d8444 18
a8461 3
% @@documentencoding should change something in TeX eventually, most
% likely, but for now just recognize it.
\let\documentencoding = \comment
d8463 15
d8479 404
a8882 1
% Page size parameters.
d8884 5
d8901 1
a8901 1
% Following George Bush, just get rid of widows and orphans.
d8919 3
a8921 3
% Parameters in order: 1) textheight; 2) textwidth; 3) voffset;
% 4) hoffset; 5) binding offset; 6) topskip; 7) physical page height; 8)
% physical page width.
d8948 4
d8966 1
a8966 1
  \internalpagesizes{46\baselineskip}{6in}%
d8972 1
a8972 1
% Use @@smallbook to reset parameters for 7x9.5 (or so) format.
d8978 1
a8978 1
                    {\voffset}{.25in}%
d8989 18
d9022 1
a9022 1
  \internalpagesizes{51\baselineskip}{160mm}
d9087 1
a9087 1
  \dimen0 = #1
d9106 3
d9162 1
d9185 7
d9199 11
d9213 2
a9214 4
{\catcode`\\=\active
 @@gdef@@rawbackslash{@@let\=@@backslashcurfont}
 @@gdef@@otherbackslash{@@let\=@@realbackslash}
}
d9216 5
a9220 11
% \realbackslash is an actual character `\' with catcode other.
{\catcode`\\=\other @@gdef@@realbackslash{\}}

% \normalbackslash outputs one backslash in fixed width font.
\def\normalbackslash{{\tt\backslashcurfont}}

\catcode`\\=\active

% Used sometimes to turn off (effectively) the active characters
% even after parsing them.
@@def@@turnoffactive{%
a9221 1
  @@let\=@@realbackslash
d9230 2
a9234 6
% Same as @@turnoffactive except outputs \ as {\tt\char`\\} instead of
% the literal character `\'.  (Thus, \ is not expandable when this is in
% effect.)
%
@@def@@normalturnoffactive{@@turnoffactive @@let\=@@normalbackslash}

d9247 1
a9247 1
% the first `\{ in the file would cause an error. This macro tries to fix
d9249 1
a9249 1
% Also back turn on active characters that might appear in the input
d9266 11
d9280 1
@


1.6
log
@2003-03-06  Andrew Cagney  <cagney@@redhat.com>

	* texinfo/texinfo.tex: Import version 2003-02-03.16.
@
text
@d6 1
a6 1
\def\texinfoversion{2003-02-03.16}
d9 2
a10 1
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d27 4
a30 4
% In other words, you are welcome to use, share and improve this program.
% You are forbidden to forbid anyone else to use, share and improve
% what you give them.   Help stamp out software-hoarding!
%
d33 1
a33 2
%   ftp://ftp.gnu.org/gnu/texinfo/texinfo.tex
%     (and all GNU mirrors, see http://www.gnu.org/order/ftp.html)
d35 2
a36 6
%     (and all CTAN mirrors, see http://www.ctan.org),
%   and /home/gd/gnu/doc/texinfo.tex on the GNU machines.
% 
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.
% 
% The texinfo.tex in any given Texinfo distribution could well be out
d38 1
a38 1
% 
d54 1
a54 1
% 
d58 3
d73 1
a73 1
% We never want plain's outer \+ definition in Texinfo.
d77 1
a77 1
% Save some parts of plain tex whose names we will redefine.
d87 1
d91 3
d98 1
d106 9
a152 1
\ifx\putwordDeftypevar\undefined\gdef\putwordDeftypevar{Variable}\fi
a153 1
\ifx\putwordDeftypefun\undefined\gdef\putwordDeftypefun{Function}\fi
a159 1
\chardef\equalChar = `\=
d163 2
d166 2
a167 1
\chardef\underChar = `\_
d173 2
a174 4
% True if #1 is the empty string, i.e., called like `\ifempty{}'.
%
\def\ifempty#1{\ifemptyx #1\emptymarkA\emptymarkB}%
\def\ifemptyx#1#2\emptymarkB{\ifx #1\emptymarkA}%
d177 8
a184 4
\hyphenation{ap-pen-dix}
\hyphenation{mini-buf-fer mini-buf-fers}
\hyphenation{eshell}
\hyphenation{white-space}
d191 35
d250 1
a250 1
  \errorcontextlines\maxdimen
d255 1
a255 1
% 
d308 1
a308 1
      \ifpdfmakepagedest \pdfmkdest{\the\pageno} \fi
d389 3
a391 2
\def\parsearg#1{%
  \let\next = #1%
d394 3
a396 1
    \futurelet\temp\parseargx
a398 15
% If the next token is an obeyed space (from an @@example environment or
% the like), remove it and recurse.  Otherwise, we're done.
\def\parseargx{%
  % \obeyedspace is defined far below, after the definition of \sepspaces.
  \ifx\obeyedspace\temp
    \expandafter\parseargdiscardspace
  \else
    \expandafter\parseargline
  \fi
}

% Remove a single space (as the delimiter token to the macro call).
{\obeyspaces %
 \gdef\parseargdiscardspace {\futurelet\temp\parseargx}}

d402 1
a402 8
    %
    % First remove any @@c comment, then any @@comment.
    % Result of each macro is put in \toks0.
    \argremovec #1\c\relax %
    \expandafter\argremovecomment \the\toks0 \comment\relax %
    %
    % Call the caller's macro, saved as \next in \parsearg.
    \expandafter\next\expandafter{\the\toks0}%
d406 3
a408 6
% Since all \c{,omment} does is throw away the argument, we can let TeX
% do that for us.  The \relax here is matched by the \relax in the call
% in \parseargline; it could be more or less anything, its purpose is
% just to delimit the argument to the \c.
\def\argremovec#1\c#2\relax{\toks0 = {#1}}
\def\argremovecomment#1\comment#2\relax{\toks0 = {#1}}
d410 3
a412 1
% \argremovec{,omment} might leave us with trailing spaces, though; e.g.,
d414 2
a415 11
% will have two active spaces as part of the argument with the
% `itemize'.  Here we remove all active spaces from #1, and assign the
% result to \toks0.
%
% This loses if there are any *other* active characters besides spaces
% in the argument -- _ ^ +, for example -- since they get expanded.
% Fortunately, Texinfo does not define any such commands.  (If it ever
% does, the catcode of the characters in questionwill have to be changed
% here.)  But this means we cannot call \removeactivespaces as part of
% \argremovec{,omment}, since @@c uses \parsearg, and thus the argument
% that \parsearg gets might well have any character at all in it.
d417 13
a429 6
\def\removeactivespaces#1{%
  \begingroup
    \ignoreactivespaces
    \edef\temp{#1}%
    \global\toks0 = \expandafter{\temp}%
  \endgroup
d432 7
a438 1
% Change the active space to expand to nothing.
d440 11
a450 4
\begingroup
  \obeyspaces
  \gdef\ignoreactivespaces{\obeyspaces\let =\empty}
\endgroup
d452 7
d460 4
a463 1
\def\flushcr{\ifx\par\lisppar \def\next##1{}\else \let\next=\relax \fi \next}
d465 12
a476 6
%% These are used to keep @@begin/@@end levels from running away
%% Call \inENV within environments (after a \begingroup)
\newif\ifENV \ENVfalse \def\inENV{\ifENV\relax\else\ENVtrue\fi}
\def\ENVcheck{%
\ifENV\errmessage{Still within an environment; press RETURN to continue}
\endgroup\fi} % This is not perfect, but it should reduce lossage
a477 2
% @@begin foo  is the same as @@foo, for now.
\newhelp\EMsimple{Press RETURN to continue.}
d479 1
a479 1
\outer\def\begin{\parsearg\beginxxx}
d481 25
a505 4
\def\beginxxx #1{%
\expandafter\ifx\csname #1\endcsname\relax
{\errhelp=\EMsimple \errmessage{Undefined command @@begin #1}}\else
\csname #1\endcsname\fi}
d507 4
a510 15
% @@end foo executes the definition of \Efoo.
%
\def\end{\parsearg\endxxx}
\def\endxxx #1{%
  \removeactivespaces{#1}%
  \edef\endthing{\the\toks0}%
  %
  \expandafter\ifx\csname E\endthing\endcsname\relax
    \expandafter\ifx\csname \endthing\endcsname\relax
      % There's no \foo, i.e., no ``environment'' foo.
      \errhelp = \EMsimple
      \errmessage{Undefined command `@@end \endthing'}%
    \else
      \unmatchedenderror\endthing
    \fi
d512 1
a512 2
    % Everything's ok; the right environment has been started.
    \csname E\endthing\endcsname
d516 2
a517 3
% There is an environment #1, but it hasn't been started.  Give an error.
%
\def\unmatchedenderror#1{%
d519 9
a527 1
  \errmessage{This `@@end #1' doesn't have a matching `@@#1'}%
d530 2
a531 1
% Define the control sequence \E#1 to give an unmatched @@end error.
d533 8
a540 2
\def\defineunmatchedend#1{%
  \expandafter\def\csname E#1\endcsname{\unmatchedenderror{#1}}%
d543 2
d576 3
d588 1
a588 1
% Other special characters: @@questiondown @@exclamdown
d592 2
d606 19
d643 3
d674 1
a674 1
% 
d678 2
a679 2
\def\group{\begingroup
  \ifnum\catcode13=\active \else
d683 1
a683 22
  %
  % The \vtop we start below produces a box with normal height and large
  % depth; thus, TeX puts \baselineskip glue before it, and (when the
  % next line of text is done) \lineskip glue after it.  (See p.82 of
  % the TeXbook.)  Thus, space below is not quite equal to space
  % above.  But it's pretty close.
  \def\Egroup{%
    \egroup           % End the \vtop.
    % \dimen0 is the vertical size of the group's box.
    \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
    % \dimen2 is how much space is left on the page (more or less).
    \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
    % if the group doesn't fit on the current page, and it's a big big
    % group, force a page break.
    \ifdim \dimen0 > \dimen2
      \ifdim \pagetotal < \vfilllimit\pageheight
        \page
      \fi
    \fi
    \copy\groupbox
    \endgroup         % End the \group.
  }%
a685 24
    % We have to put a strut on the last line in case the @@group is in
    % the midst of an example, rather than completely enclosing it.
    % Otherwise, the interline space between the last line of the group
    % and the first line afterwards is too small.  But we can't put the
    % strut in \Egroup, since there it would be on a line by itself.
    % Hence this just inserts a strut at the beginning of each line.
    \everypar = {\strut}%
    %
    % Since we have a strut on every line, we don't need any of TeX's
    % normal interline spacing.
    \offinterlineskip
    %
    % OK, but now we have to do something about blank
    % lines in the input in @@example-like environments, which normally
    % just turn into \lisppar, which will insert no space now that we've
    % turned off the interline space.  Simplest is to make them be an
    % empty paragraph.
    \ifx\par\lisppar
      \edef\par{\leavevmode \par}%
      %
      % Reset ^^M's definition to new definition of \par.
      \obeylines
    \fi
    %
d695 26
a732 2
\def\need{\parsearg\needx}

d734 1
a734 1
%\def\needx #1{\par %
d742 1
a742 1
\def\needx#1{%
d781 1
a781 1
% @@br   forces paragraph break
d785 1
a785 27
% @@dots{} output an ellipsis using the current font.
% We do .5em per period so that it has the same spacing in a typewriter
% font as three actual period characters.
%
\def\dots{%
  \leavevmode
  \hbox to 1.5em{%
    \hskip 0pt plus 0.25fil minus 0.25fil
    .\hss.\hss.%
    \hskip 0pt plus 0.5fil minus 0.5fil
  }%
}

% @@enddots{} is an end-of-sentence ellipsis.
%
\def\enddots{%
  \leavevmode
  \hbox to 2em{%
    \hskip 0pt plus 0.25fil minus 0.25fil
    .\hss.\hss.\hss.%
    \hskip 0pt plus 0.5fil minus 0.5fil
  }%
  \spacefactor=3000
}


% @@page    forces the start of a new page
d797 1
a797 2
\def\exdent{\parsearg\exdentyyy}
\def\exdentyyy #1{{\hfil\break\hbox{\kern -\exdentamount{\rm#1}}\hfil\break}}
d800 2
a801 3
\def\nofillexdent{\parsearg\nofillexdentyyy}
\def\nofillexdentyyy #1{{\advance \leftskip by -\exdentamount
\leftline{\hskip\leftskip{\rm#1}}}}
d832 1
a832 1
% 
d835 1
a835 1
  \setbox0 = \hbox{\ignorespaces #2}% 
d853 13
a865 2
% Allow normal characters that  we make active in the argument (a file name).
\def\include{\begingroup
d874 16
a889 8
  \parsearg\includezzz}
% Restore active chars for included file.
\def\includezzz#1{\endgroup\begingroup
  % Read the included file in a group so nested @@include's work.
  \def\thisfile{#1}%
  \let\value=\expandablevalue
  \input\thisfile
\endgroup}
d896 18
a913 8
\def\center{\parsearg\docenter}
\def\docenter#1{{%
  \ifhmode \hfil\break \fi
  \advance\hsize by -\leftskip
  \advance\hsize by -\rightskip
  \line{\hfil \ignorespaces#1\unskip \hfil}%
  \ifhmode \break \fi
}}
d917 1
a917 2
\def\sp{\parsearg\spxxx}
\def\spxxx #1{\vskip #1\baselineskip}
d932 3
a934 2
% We cannot implement @@paragraphindent asis, though.
% 
d938 1
a938 2
\def\paragraphindent{\parsearg\doparagraphindent}
\def\doparagraphindent#1{%
d955 1
a955 2
\def\exampleindent{\parsearg\doexampleindent}
\def\doexampleindent#1{%
d967 53
a1024 5
% We don't use $'s directly in the definition of \math because we need
% to set catcodes according to plain TeX first, to allow for subscripts,
% superscripts, special math chars, etc.
% 
\let\implicitmath = $%$ font-lock fix
d1028 9
a1036 9
% _ within @@math be active (mathcode "8000), and distinguish by seeing
% if the current family is \slfam, which is what @@var uses.
% 
{\catcode\underChar = \active
\gdef\mathunderscore{%
  \catcode\underChar=\active
  \def_{\ifnum\fam=\slfam \_\else\sb\fi}%
}}
%
d1041 1
a1041 1
% 
d1047 1
a1047 1
  \mathcode`\_="8000 \mathunderscore
d1050 3
a1052 2
  \implicitmath\finishmath}
\def\finishmath#1{#1\implicitmath\Etex}
d1055 3
a1057 3
% We have to reset their definitions in case the @@math was an
% argument to a command which set the catcodes (such as @@item or @@section).
% 
d1072 27
a1098 2
\def\bullet{\implicitmath\ptexbullet\implicitmath}
\def\minus{\implicitmath-\implicitmath}
d1114 1
d1116 3
a1118 1
     \readauxfile
d1121 1
a1121 2
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
   \global\let\setfilename=\comment % Ignore extra @@setfilename cmds.
a1124 1
   % Just to be on the safe side, close the input stream before the \input.
d1126 2
a1127 3
   \ifeof1 \let\temp=\relax \else \def\temp{\input texinfo.cnf }\fi
   \closein1
   \temp
d1174 1
d1195 7
a1201 1
  \def\pdfmkdest#1{{\normalturnoffactive \pdfdest name{#1} xyz}}
d1210 1
a1210 1
    \advance\tempnum by1
d1212 20
a1231 5
  \def\pdfmakeoutlines{{%
    \openin 1 \jobname.toc
    \ifeof 1\else\begingroup
      \closein 1 
      % Thanh's hack / proper braces in bookmarks  
d1235 32
a1266 9
      \def\chapentry ##1##2##3{}
      \def\secentry ##1##2##3##4{\advancenumber{chap##2}}
      \def\subsecentry ##1##2##3##4##5{\advancenumber{sec##2.##3}}
      \def\subsubsecentry ##1##2##3##4##5##6{\advancenumber{subsec##2.##3.##4}}
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
a1267 13
      \def\chapentry ##1##2##3{%
        \pdfoutline goto name{\pdfmkpgn{##3}}count-\expnumber{chap##2}{##1}}
      \def\secentry ##1##2##3##4{%
        \pdfoutline goto name{\pdfmkpgn{##4}}count-\expnumber{sec##2.##3}{##1}}
      \def\subsecentry ##1##2##3##4##5{%
        \pdfoutline goto name{\pdfmkpgn{##5}}count-\expnumber{subsec##2.##3.##4}{##1}}
      \def\subsubsecentry ##1##2##3##4##5##6{%
        \pdfoutline goto name{\pdfmkpgn{##6}}{##1}}
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
d1269 3
a1271 1
      % Make special characters normal for writing to the pdf file.
d1273 19
a1292 1
      \let\tt=\relax
d1295 3
a1297 2
    \endgroup\fi
  }}
d1306 1
a1306 1
      \startlink attr{/Border [0 0 0]} 
a1327 1
  \def\addtokens#1#2{\edef\addtoks{\noexpand#1={\the#1#2}}\addtoks}
d1345 1
a1345 1
      \let\value=\expandablevalue
a1348 1
        % #1
d1355 1
a1355 1
    \expandafter\poptoks\the\toksA|ENDTOKS|
d1359 1
a1359 1
    \else\ifx\first7\adn7 \else\ifx\first8\adn8 \else\ifx\first9\adn9 
d1379 19
a1397 1
% Font-change commands.
d1400 1
a1400 1
% So we set up a \sf analogous to plain's \rm, etc.
d1402 1
a1402 1
\def\sf{\fam=\sffam \tensf}
d1405 2
a1406 2
% We don't need math for this one.
\def\ttsl{\tenttsl}
d1457 1
a1468 4
% Instead of cmb10, you may want to use cmbx10.
% cmbx10 is a prettier font on its own, but cmb10
% looks better when embedded in a line with cmr10
% (in Bob's opinion).
d1478 2
a1479 2
% A few fonts for @@defun, etc.
\setfont\defbf\bxshape{10}{\magstep1} %was 1314
d1481 2
a1482 1
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \bf}
d1508 1
a1508 1
% Fonts for title page:
d1554 1
a1554 1
\setfont\ssecsc\scbshape{10}{\magstep1}
d1557 12
a1568 2
% The smallcaps and symbol fonts should actually be scaled \magstep1.5,
% but that is not a standard magnification.
d1583 10
a1592 5
% of just \STYLE.  We do this so that font changes will continue to work
% in math mode, where it is the current \fam that is relevant in most
% cases, not the current font.  Plain TeX does \def\bf{\fam=\bffam
% \tenbf}, for example.  By redefining \tenbf, we obviate the need to
% redefine \bf itself.
d1596 3
a1598 1
  \let\tensf=\textsf \let\teni=\texti \let\tensy=\textsy \let\tenttsl=\textttsl
d1605 1
d1612 1
d1617 3
a1619 1
  \let\tensf=\secsf \let\teni=\seci \let\tensy=\secsy \let\tenttsl=\secttsl
d1624 3
a1626 1
  \let\tensf=\ssecsf \let\teni=\sseci \let\tensy=\ssecsy \let\tenttsl=\ssecttsl
d1628 8
a1635 1
\let\subsubsecfonts = \subsecfonts % Maybe make sssec fonts scaled magstephalf?
d1641 1
d1648 1
d1657 1
a1657 1
% If we use \smallerfonts (8pt), then we can fit this many characters:
d1661 1
a1661 1
% 
d1664 2
a1665 3
% 
% I wish we used A4 paper on this side of the Atlantic.
% 
d1671 1
a1671 1
\textfonts
d1682 1
a1682 1
\setfont\shortcontbf\bxshape{12}{1000}
d1691 2
a1692 1
\def\smartitalicx{\ifx\next,\else\ifx\next-\else\ifx\next.\else\/\fi\fi\fi}
d1696 8
a1707 1
\let\cite=\smartslanted
d1722 1
a1722 1
% 
a1733 1
\let\ttfont=\t
d1774 1
a1774 1
% We *must* turn on hyphenation at `-' and `_' in \code.
a1791 4
  %
  % If we end up with any active - characters when handling the index,
  % just treat them as a normal -.
  \global\def\indexbreaks{\catcode`\-=\active \let-\realdash}
d1815 1
a1815 2
\def\kbdinputstyle{\parsearg\kbdinputstylexxx}
\def\kbdinputstylexxx#1{%
d1825 1
a1825 1
    \errmessage{Unknown @@kbdinputstyle `\arg'}%
d1876 1
a1876 1
% 
d1915 8
a1922 2
% @@acronym downcases the argument and prints in smallcaps.
\def\acronym#1{{\smallcaps \lowercase{#1}}}
d1924 2
a1925 1
% @@pounds{} is a sterling sign.
d1928 10
d1956 1
a1956 2
\def\shorttitlepage{\parsearg\shorttitlepagezzz}
\def\shorttitlepagezzz #1{\begingroup\hbox{}\vskip 1.5in \chaprm \centerline{#1}%
d1959 13
a1971 32
\def\titlepage{\begingroup \parindent=0pt \textfonts
   \let\subtitlerm=\tenrm
   \def\subtitlefont{\subtitlerm \normalbaselineskip = 13pt \normalbaselines}%
   %
   \def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
                   \let\tt=\authortt}%
   %
   % Leave some space at the very top of the page.
   \vglue\titlepagetopglue
   %
   % Now you can print the title using @@title.
   \def\title{\parsearg\titlezzz}%
   \def\titlezzz##1{\leftline{\titlefonts\rm ##1}
                    % print a rule at the page bottom also.
                    \finishedtitlepagefalse
                    \vskip4pt \hrule height 4pt width \hsize \vskip4pt}%
   % No rule at page bottom unless we print one at the top with @@title.
   \finishedtitlepagetrue
   %
   % Now you can put text using @@subtitle.
   \def\subtitle{\parsearg\subtitlezzz}%
   \def\subtitlezzz##1{{\subtitlefont \rightline{##1}}}%
   %
   % @@author should come last, but may come many times.
   \def\author{\parsearg\authorzzz}%
   \def\authorzzz##1{\ifseenauthor\else\vskip 0pt plus 1filll\seenauthortrue\fi
      {\authorfont \leftline{##1}}}%
   %
   % Most title ``pages'' are actually two pages long, with space
   % at the top of the second.  We don't want the ragged left on the second.
   \let\oldpage = \page
   \def\page{%
d1973 1
a1973 1
         \finishtitlepage
a1974 1
      \oldpage
d1976 3
a1978 2
      \hbox{}}%
%   \def\page{\oldpage \hbox{}}
d1982 27
a2008 27
   \iffinishedtitlepage\else
      \finishtitlepage
   \fi
   % It is important to do the page break before ending the group,
   % because the headline and footline are only empty inside the group.
   % If we use the new definition of \page, we always get a blank page
   % after the title page, which we certainly don't want.
   \oldpage
   \endgroup
   %
   % Need this before the \...aftertitlepage checks so that if they are
   % in effect the toc pages will come out with page numbers.
   \HEADINGSon
   %
   % If they want short, they certainly want long too.
   \ifsetshortcontentsaftertitlepage
     \shortcontents
     \contents
     \global\let\shortcontents = \relax
     \global\let\contents = \relax
   \fi
   %
   \ifsetcontentsaftertitlepage
     \contents
     \global\let\contents = \relax
     \global\let\shortcontents = \relax
   \fi
d2012 19
a2030 3
   \vskip4pt \hrule height 2pt width \hsize
   \vskip\titlepagebottomglue
   \finishedtitlepagetrue
d2033 20
d2062 1
a2062 1
% Now make Tex use those variables
d2076 1
d2078 2
a2079 11
\def\oddheading{\parsearg\oddheadingxxx}
\def\everyheading{\parsearg\everyheadingxxx}

\def\evenfooting{\parsearg\evenfootingxxx}
\def\oddfooting{\parsearg\oddfootingxxx}
\def\everyfooting{\parsearg\everyfootingxxx}

{\catcode`\@@=0 %

\gdef\evenheadingxxx #1{\evenheadingyyy #1@@|@@|@@|@@|\finish}
\gdef\evenheadingyyy #1@@|#2@@|#3@@|#4\finish{%
d2082 3
a2084 2
\gdef\oddheadingxxx #1{\oddheadingyyy #1@@|@@|@@|@@|\finish}
\gdef\oddheadingyyy #1@@|#2@@|#3@@|#4\finish{%
d2087 1
a2087 1
\gdef\everyheadingxxx#1{\oddheadingxxx{#1}\evenheadingxxx{#1}}%
d2089 3
a2091 2
\gdef\evenfootingxxx #1{\evenfootingyyy #1@@|@@|@@|@@|\finish}
\gdef\evenfootingyyy #1@@|#2@@|#3@@|#4\finish{%
d2094 3
a2096 2
\gdef\oddfootingxxx #1{\oddfootingyyy #1@@|@@|@@|@@|\finish}
\gdef\oddfootingyyy #1@@|#2@@|#3@@|#4\finish{%
d2105 2
a2106 3
\gdef\everyfootingxxx#1{\oddfootingxxx{#1}\evenfootingxxx{#1}}
%
}% unbind the catcode of @@.
d2120 1
a2120 1
\def\HEADINGSoff{
d2129 1
a2129 1
\def\HEADINGSdouble{
d2141 1
a2141 1
\def\HEADINGSsingle{
d2188 1
a2188 2
\def\settitle{\parsearg\settitlezzz}
\def\settitlezzz #1{\gdef\thistitle{#1}}
d2192 1
a2192 1
% Tables -- @@table, @@ftable, @@vtable, @@item(x), @@kitem(x), @@xitem(x).
d2204 1
a2204 1
% Note @@table, @@vtable, and @@vtable define @@item, @@itemx, etc., with
a2215 12
\def\internalBxitem "#1"{\def\xitemsubtopix{#1} \smallbreak \parsearg\xitemzzz}
\def\internalBxitemx "#1"{\def\xitemsubtopix{#1} \itemxpar \parsearg\xitemzzz}

\def\internalBkitem{\smallbreak \parsearg\kitemzzz}
\def\internalBkitemx{\itemxpar \parsearg\kitemzzz}

\def\kitemzzz #1{\dosubind {kw}{\code{#1}}{for {\bf \lastfunction}}%
                 \itemzzz {#1}}

\def\xitemzzz #1{\dosubind {kw}{\code{#1}}{for {\bf \xitemsubtopic}}%
                 \itemzzz {#1}}

d2219 1
a2219 1
  \setbox0=\hbox{\itemfont{#1}}%
d2273 2
a2274 9
\def\item{\errmessage{@@item while not in a table}}
\def\itemx{\errmessage{@@itemx while not in a table}}
\def\kitem{\errmessage{@@kitem while not in a table}}
\def\kitemx{\errmessage{@@kitemx while not in a table}}
\def\xitem{\errmessage{@@xitem while not in a table}}
\def\xitemx{\errmessage{@@xitemx while not in a table}}

% Contains a kludge to get @@end[description] to work.
\def\description{\tablez{\dontindex}{1}{}{}{}{}}
d2277 22
a2298 50
\def\table{\begingroup\inENV\obeylines\obeyspaces\tablex}
{\obeylines\obeyspaces%
\gdef\tablex #1^^M{%
\tabley\dontindex#1        \endtabley}}

\def\ftable{\begingroup\inENV\obeylines\obeyspaces\ftablex}
{\obeylines\obeyspaces%
\gdef\ftablex #1^^M{%
\tabley\fnitemindex#1        \endtabley
\def\Eftable{\endgraf\afterenvbreak\endgroup}%
\let\Etable=\relax}}

\def\vtable{\begingroup\inENV\obeylines\obeyspaces\vtablex}
{\obeylines\obeyspaces%
\gdef\vtablex #1^^M{%
\tabley\vritemindex#1        \endtabley
\def\Evtable{\endgraf\afterenvbreak\endgroup}%
\let\Etable=\relax}}

\def\dontindex #1{}
\def\fnitemindex #1{\doind {fn}{\code{#1}}}%
\def\vritemindex #1{\doind {vr}{\code{#1}}}%

{\obeyspaces %
\gdef\tabley#1#2 #3 #4 #5 #6 #7\endtabley{\endgroup%
\tablez{#1}{#2}{#3}{#4}{#5}{#6}}}

\def\tablez #1#2#3#4#5#6{%
\aboveenvbreak %
\begingroup %
\def\Edescription{\Etable}% Necessary kludge.
\let\itemindex=#1%
\ifnum 0#3>0 \advance \leftskip by #3\mil \fi %
\ifnum 0#4>0 \tableindent=#4\mil \fi %
\ifnum 0#5>0 \advance \rightskip by #5\mil \fi %
\def\itemfont{#2}%
\itemmax=\tableindent %
\advance \itemmax by -\itemmargin %
\advance \leftskip by \tableindent %
\exdentamount=\tableindent
\parindent = 0pt
\parskip = \smallskipamount
\ifdim \parskip=0pt \parskip=2pt \fi%
\def\Etable{\endgraf\afterenvbreak\endgroup}%
\let\item = \internalBitem %
\let\itemx = \internalBitemx %
\let\kitem = \internalBkitem %
\let\kitemx = \internalBkitemx %
\let\xitem = \internalBxitem %
\let\xitemx = \internalBxitemx %
d2300 20
d2325 16
a2340 1
\def\itemize{\parsearg\itemizezzz}
d2342 20
a2361 17
\def\itemizezzz #1{%
  \begingroup % ended by the @@end itemize
  \itemizey {#1}{\Eitemize}
}

\def\itemizey #1#2{%
\aboveenvbreak %
\itemmax=\itemindent %
\advance \itemmax by -\itemmargin %
\advance \leftskip by \itemindent %
\exdentamount=\itemindent
\parindent = 0pt %
\parskip = \smallskipamount %
\ifdim \parskip=0pt \parskip=2pt \fi%
\def#2{\endgraf\afterenvbreak\endgroup}%
\def\itemcontents{#1}%
\let\item=\itemizeitem}
d2372 1
a2372 2
\def\enumerate{\parsearg\enumeratezzz}
\def\enumeratezzz #1{\enumeratey #1  \endenumeratey}
a2373 2
  \begingroup % ended by the @@end enumerate
  %
d2444 1
a2444 1
% Call itemizey, adding a period to the first argument and supplying the
d2450 1
a2450 1
  \itemizey{#1.}\Eenumerate\flushcr
a2460 10
% Definition of @@item while inside @@itemize.

\def\itemizeitem{%
\advance\itemno by 1
{\let\par=\endgraf \smallbreak}%
\ifhmode \errmessage{In hmode at itemizeitem}\fi
{\parskip=0in \hskip 0pt
\hbox to 0pt{\hss \itemcontents\hskip \itemmargin}%
\vadjust{\penalty 1200}}%
\flushcr}
a2486 10
%
% For those who want to use more than one line's worth of words in
% the preamble, break the line within one argument and it
% will parse correctly, i.e.,
%
%     @@multitable {Column 1 template} {Column 2 template} {Column 3
%      template}
% Not:
%     @@multitable {Column 1 template} {Column 2 template}
%      {Column 3 template}
d2493 2
a2494 2
% @@item, @@tab, @@multitable or @@end multitable do not need to be on their
% own lines, but it will not hurt if they are.
d2538 4
a2541 5
% #1 is the part of the @@columnfraction before the decimal point, which
% is presumably either 0 or the empty string (but we don't check, we
% just throw it away).  #2 is the decimal part, which we use as the
% percent of \hsize for this column.
\def\pickupwholefraction#1.#2 {%
d2543 1
a2543 1
  \expandafter\xdef\csname col\the\colcount\endcsname{.#2\hsize}%
d2576 13
d2591 3
a2593 2
\def\multitable{\parsearg\dotable}
\def\dotable#1{\bgroup
d2595 5
a2599 7
  \let\item=\crcrwithfootnotes
  % A \tab used to include \hskip1sp.  But then the space in a template
  % line is not enough.  That is bad.  So let's go back to just & until
  % we encounter the problem it was intended to solve again.  --karl,
  % nathan@@acm.org, 20apr99.
  \let\tab=&%
  \let\startfootins=\startsavedfootnote
d2607 13
a2619 4
  \def\Emultitable{%
    \global\setpercentfalse
    \crcrwithfootnotes\crcr
    \egroup\egroup
d2622 3
a2627 12
  % \everycr will reset column counter, \colcount, at the end of
  % each line. Every column entry will cause \colcount to advance by one.
  % The table preamble
  % looks at the current \colcount to find the correct column width.
  \everycr{\noalign{%
  %
  % \filbreak%% keeps underfull box messages off when table breaks over pages.
  % Maybe so, but it also creates really weird page breaks when the table
  % breaks over pages. Wouldn't \vfil be better?  Wait until the problem
  % manifests itself, so it can be fixed for real --karl.
    \global\colcount=0\relax}}%
  %
d2632 49
a2680 39
  \halign\bgroup&\global\advance\colcount by 1\relax
    \multistrut\vtop{\hsize=\expandafter\csname col\the\colcount\endcsname
  %
  % In order to keep entries from bumping into each other
  % we will add a \leftskip of \multitablecolspace to all columns after
  % the first one.
  %
  % If a template has been used, we will add \multitablecolspace
  % to the width of each template entry.
  %
  % If the user has set preamble in terms of percent of \hsize we will
  % use that dimension as the width of the column, and the \leftskip
  % will keep entries from bumping into each other.  Table will start at
  % left margin and final column will justify at right margin.
  %
  % Make sure we don't inherit \rightskip from the outer environment.
  \rightskip=0pt
  \ifnum\colcount=1
    % The first column will be indented with the surrounding text.
    \advance\hsize by\leftskip
  \else
    \ifsetpercent \else
      % If user has not set preamble in terms of percent of \hsize
      % we will advance \hsize by \multitablecolspace.
      \advance\hsize by \multitablecolspace
    \fi
   % In either case we will make \leftskip=\multitablecolspace:
  \leftskip=\multitablecolspace
  \fi
  % Ignoring space at the beginning and end avoids an occasional spurious
  % blank line, when TeX decides to break the line at the space before the
  % box from the multistrut, so the strut ends up on a line by itself.
  % For example:
  % @@multitable @@columnfractions .11 .89
  % @@item @@code{#}
  % @@tab Legal holiday which is valid in major parts of the whole country.
  % Is automatically provided with highlighting sequences respectively marking
  % characters.
  \noindent\ignorespaces##\unskip\multistrut}\cr
a2709 19
% In case a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is
% finished.  Otherwise, the insertion is lost, it never migrates to the
% main vertical list.  --kasal, 22jan03.
%
\newbox\savedfootnotes
%
% \dotable \let's \startfootins to this, so that \dofootnote will call
% it instead of starting the insertion right away.
\def\startsavedfootnote{%
  \global\setbox\savedfootnotes = \vbox\bgroup
    \unvbox\savedfootnotes
}
\def\crcrwithfootnotes{%
  \crcr
  \ifvoid\savedfootnotes \else
    \noalign{\insert\footins{\box\savedfootnotes}}%
  \fi
}
d2712 17
a2728 129
% Prevent errors for section commands.
% Used in @@ignore and in failing conditionals.
\def\ignoresections{%
  \let\chapter=\relax
  \let\unnumbered=\relax
  \let\top=\relax
  \let\unnumberedsec=\relax
  \let\unnumberedsection=\relax
  \let\unnumberedsubsec=\relax
  \let\unnumberedsubsection=\relax
  \let\unnumberedsubsubsec=\relax
  \let\unnumberedsubsubsection=\relax
  \let\section=\relax
  \let\subsec=\relax
  \let\subsubsec=\relax
  \let\subsection=\relax
  \let\subsubsection=\relax
  \let\appendix=\relax
  \let\appendixsec=\relax
  \let\appendixsection=\relax
  \let\appendixsubsec=\relax
  \let\appendixsubsection=\relax
  \let\appendixsubsubsec=\relax
  \let\appendixsubsubsection=\relax
  \let\contents=\relax
  \let\smallbook=\relax
  \let\titlepage=\relax
}

% Used in nested conditionals, where we have to parse the Texinfo source
% and so want to turn off most commands, in case they are used
% incorrectly.
%
% We use \empty instead of \relax for the @@def... commands, so that \end
% doesn't throw an error.  For instance:
% @@ignore
% @@deffn ...
% @@end deffn
% @@end ignore
% 
% The @@end deffn is going to get expanded, because we're trying to allow
% nested conditionals.  But we don't want to expand the actual @@deffn,
% since it might be syntactically correct and intended to be ignored.
% Since \end checks for \relax, using \empty does not cause an error.
% 
\def\ignoremorecommands{%
  \let\defcodeindex = \relax
  \let\defcv = \empty
  \let\defcvx = \empty
  \let\Edefcv = \empty
  \let\deffn = \empty
  \let\deffnx = \empty
  \let\Edeffn = \empty
  \let\defindex = \relax
  \let\defivar = \empty
  \let\defivarx = \empty
  \let\Edefivar = \empty
  \let\defmac = \empty
  \let\defmacx = \empty
  \let\Edefmac = \empty
  \let\defmethod = \empty
  \let\defmethodx = \empty
  \let\Edefmethod = \empty
  \let\defop = \empty
  \let\defopx = \empty
  \let\Edefop = \empty
  \let\defopt = \empty
  \let\defoptx = \empty
  \let\Edefopt = \empty
  \let\defspec = \empty
  \let\defspecx = \empty
  \let\Edefspec = \empty
  \let\deftp = \empty
  \let\deftpx = \empty
  \let\Edeftp = \empty
  \let\deftypefn = \empty
  \let\deftypefnx = \empty
  \let\Edeftypefn = \empty
  \let\deftypefun = \empty
  \let\deftypefunx = \empty
  \let\Edeftypefun = \empty
  \let\deftypeivar = \empty
  \let\deftypeivarx = \empty
  \let\Edeftypeivar = \empty
  \let\deftypemethod = \empty
  \let\deftypemethodx = \empty
  \let\Edeftypemethod = \empty
  \let\deftypeop = \empty
  \let\deftypeopx = \empty
  \let\Edeftypeop = \empty
  \let\deftypevar = \empty
  \let\deftypevarx = \empty
  \let\Edeftypevar = \empty
  \let\deftypevr = \empty
  \let\deftypevrx = \empty
  \let\Edeftypevr = \empty
  \let\defun = \empty
  \let\defunx = \empty
  \let\Edefun = \empty
  \let\defvar = \empty
  \let\defvarx = \empty
  \let\Edefvar = \empty
  \let\defvr = \empty
  \let\defvrx = \empty
  \let\Edefvr = \empty
  \let\clear = \relax
  \let\down = \relax
  \let\evenfooting = \relax
  \let\evenheading = \relax
  \let\everyfooting = \relax
  \let\everyheading = \relax
  \let\headings = \relax
  \let\include = \relax
  \let\item = \relax
  \let\lowersections = \relax
  \let\oddfooting = \relax
  \let\oddheading = \relax
  \let\printindex = \relax
  \let\pxref = \relax
  \let\raisesections = \relax
  \let\ref = \relax
  \let\set = \relax
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\settitle = \relax
  \let\up = \relax
  \let\verbatiminclude = \relax
  \let\xref = \relax
}
a2732 1
\def\documentdescriptionword{documentdescription}
d2734 1
d2736 1
d2746 4
a2749 3
% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory = \comment
a2750 2
% Ignore text until a line `@@end #1'.
%
d2752 7
a2758 2
  % Don't complain about control sequences we have declared \outer.
  \ignoresections
d2760 2
a2761 4
  % Define a command to swallow text until we reach `@@end #1'.
  % This @@ is a catcode 12 token (that is the normal catcode of @@ in
  % this texinfo.tex file).  We change the catcode of @@ below to match.
  \long\def\doignoretext##1@@end #1{\enddoignore}%
d2763 6
a2768 2
  % Make sure that spaces turn into tokens that match what \doignoretext wants.
  \catcode\spaceChar = 10
d2770 2
a2771 101
  % Ignore braces, too, so mismatched braces don't cause trouble.
  \catcode`\{ = 9
  \catcode`\} = 9
  %
  % We must not have @@c interpreted as a control sequence.
  \catcode`\@@ = 12
  %
  \def\ignoreword{#1}%
  \ifx\ignoreword\documentdescriptionword
    % The c kludge breaks documentdescription, since
    % `documentdescription' contains a `c'.  Means not everything will
    % be ignored inside @@documentdescription, but oh well...
  \else
    % Make the letter c a comment character so that the rest of the line
    % will be ignored. This way, the document can have (for example)
    %   @@c @@end ifinfo
    % and the @@end ifinfo will be properly ignored.
    % (We've just changed @@ to catcode 12.)
    \catcode`\c = 14
  \fi
  %
  % And now expand the command defined above.
  \doignoretext
}

% What we do to finish off ignored text.
%
\def\enddoignore{\endgroup\ignorespaces}%

\newif\ifwarnedobs\warnedobsfalse
\def\obstexwarn{%
  \ifwarnedobs\relax\else
  % We need to warn folks that they may have trouble with TeX 3.0.
  % This uses \immediate\write16 rather than \message to get newlines.
    \immediate\write16{}
    \immediate\write16{WARNING: for users of Unix TeX 3.0!}
    \immediate\write16{This manual trips a bug in TeX version 3.0 (tex hangs).}
    \immediate\write16{If you are running another version of TeX, relax.}
    \immediate\write16{If you are running Unix TeX 3.0, kill this TeX process.}
    \immediate\write16{  Then upgrade your TeX installation if you can.}
    \immediate\write16{  (See ftp://ftp.gnu.org/non-gnu/TeX.README.)}
    \immediate\write16{If you are stuck with version 3.0, run the}
    \immediate\write16{  script ``tex3patch'' from the Texinfo distribution}
    \immediate\write16{  to use a workaround.}
    \immediate\write16{}
    \global\warnedobstrue
    \fi
}

% **In TeX 3.0, setting text in \nullfont hangs tex.  For a
% workaround (which requires the file ``dummy.tfm'' to be installed),
% uncomment the following line:
%%%%%\font\nullfont=dummy\let\obstexwarn=\relax

% Ignore text, except that we keep track of conditional commands for
% purposes of nesting, up to an `@@end #1' command.
%
\def\nestedignore#1{%
  \obstexwarn
  % We must actually expand the ignored text to look for the @@end
  % command, so that nested ignore constructs work.  Thus, we put the
  % text into a \vbox and then do nothing with the result.  To minimize
  % the chance of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook.
  %
  \setbox0 = \vbox\bgroup
    % Don't complain about control sequences we have declared \outer.
    \ignoresections
    %
    % Define `@@end #1' to end the box, which will in turn undefine the
    % @@end command again.
    \expandafter\def\csname E#1\endcsname{\egroup\ignorespaces}%
    %
    % We are going to be parsing Texinfo commands.  Most cause no
    % trouble when they are used incorrectly, but some commands do
    % complicated argument parsing or otherwise get confused, so we
    % undefine them.
    %
    % We can't do anything about stray @@-signs, unfortunately;
    % they'll produce `undefined control sequence' errors.
    \ignoremorecommands
    %
    % Set the current font to be \nullfont, a TeX primitive, and define
    % all the font commands to also use \nullfont.  We don't use
    % dummy.tfm, as suggested in the TeXbook, because some sites
    % might not have that installed.  Therefore, math mode will still
    % produce output, but that should be an extremely small amount of
    % stuff compared to the main input.
    %
    \nullfont
    \let\tenrm=\nullfont \let\tenit=\nullfont \let\tensl=\nullfont
    \let\tenbf=\nullfont \let\tentt=\nullfont \let\smallcaps=\nullfont
    \let\tensf=\nullfont
    % Similarly for index fonts.
    \let\smallrm=\nullfont \let\smallit=\nullfont \let\smallsl=\nullfont
    \let\smallbf=\nullfont \let\smalltt=\nullfont \let\smallsc=\nullfont
    \let\smallsf=\nullfont
    % Similarly for smallexample fonts.
    \let\smallerrm=\nullfont \let\smallerit=\nullfont \let\smallersl=\nullfont
    \let\smallerbf=\nullfont \let\smallertt=\nullfont \let\smallersc=\nullfont
    \let\smallersf=\nullfont
d2773 7
a2779 2
    % Don't complain when characters are missing from the fonts.
    \tracinglostchars = 0
d2781 28
a2808 14
    % Don't bother to do space factor calculations.
    \frenchspacing
    %
    % Don't report underfull hboxes.
    \hbadness = 10000
    %
    % Do minimal line-breaking.
    \pretolerance = 10000
    %
    % Do not execute instructions in @@tex.
    \def\tex{\doignore{tex}}%
    % Do not execute macro definitions.
    % `c' is a comment character, so the word `macro' will get cut off.
    \def\macro{\doignore{ma}}%
d2811 4
d2821 2
a2822 2
% didn't need it.  Make sure the catcode of space is correct to avoid
% losing inside @@example, for instance.
d2824 1
a2824 4
\def\set{\begingroup\catcode` =10
  \catcode`\-=12 \catcode`\_=12 % Allow - and _ in VAR.
  \parsearg\setxxx}
\def\setxxx#1{\setyyy#1 \endsetyyy}
d2826 10
a2835 5
  \def\temp{#2}%
  \ifx\temp\empty \global\expandafter\let\csname SET#1\endcsname = \empty
  \else \setzzz{#1}#2\endsetzzz % Remove the trailing space \setxxx inserted.
  \fi
  \endgroup
d2837 2
a2838 4
% Can't use \xdef to pre-expand #2 and save some time, since \temp or
% \next or other control sequences that we've defined might get us into
% an infinite loop. Consider `@@set foo @@cite{bar}'.
\def\setzzz#1#2 \endsetzzz{\expandafter\gdef\csname SET#1\endcsname{#2}}
d2842 6
a2847 2
\def\clear{\parsearg\clearxxx}
\def\clearxxx#1{\global\expandafter\let\csname SET#1\endcsname=\relax}
d2850 2
d2853 1
a2853 1
  \catcode`\_ = \active
d2855 3
a2857 4
  % We might end up with active _ or - characters in the argument if
  % we're called from @@code, as @@code{@@value{foo-bar_}}.  So \let any
  % such active characters to their normal equivalents.
  \gdef\value{\begingroup
d2859 5
a2863 2
    \indexbreaks \let_\normalunderscore
    \valuexxx}
a2864 1
\def\valuexxx#1{\expandablevalue{#1}\endgroup}
d2867 6
a2872 8
% properly in indexes (we \let\value to this in \indexdummies).  Ones
% whose names contain - or _ still won't work, but we can't do anything
% about that.  The command has to be fully expandable (if the variable
% is set), since the result winds up in the index file.  This means that
% if the variable's value contains other Texinfo commands, it's almost
% certain it will fail (although perhaps we could fix that with
% sufficient work to do a one-level expansion on the result, instead of
% complete).
d2886 13
a2898 8
\def\ifset{\parsearg\doifset}
\def\doifset#1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \let\next=\ifsetfail
  \else
    \let\next=\ifsetsucceed
  \fi
  \next
d2900 1
a2900 3
\def\ifsetsucceed{\conditionalsucceed{ifset}}
\def\ifsetfail{\nestedignore{ifset}}
\defineunmatchedend{ifset}
d2905 11
a2915 33
\def\ifclear{\parsearg\doifclear}
\def\doifclear#1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \let\next=\ifclearsucceed
  \else
    \let\next=\ifclearfail
  \fi
  \next
}
\def\ifclearsucceed{\conditionalsucceed{ifclear}}
\def\ifclearfail{\nestedignore{ifclear}}
\defineunmatchedend{ifclear}

% @@iftex, @@ifnothtml, @@ifnotinfo, @@ifnotplaintext always succeed; we
% read the text following, through the first @@end iftex (etc.).  Make
% `@@end iftex' (etc.) valid only after an @@iftex.
%
\def\iftex{\conditionalsucceed{iftex}}
\def\ifnothtml{\conditionalsucceed{ifnothtml}}
\def\ifnotinfo{\conditionalsucceed{ifnotinfo}}
\def\ifnotplaintext{\conditionalsucceed{ifnotplaintext}}
\defineunmatchedend{iftex}
\defineunmatchedend{ifnothtml}
\defineunmatchedend{ifnotinfo}
\defineunmatchedend{ifnotplaintext}

% True conditional.  Since \set globally defines its variables, we can
% just start and end a group (to keep the @@end definition undefined at
% the outer level).
%
\def\conditionalsucceed#1{\begingroup
  \expandafter\def\csname E#1\endcsname{\endgroup}%
}
d2966 1
a2966 1
% 
d2969 1
a2969 1
% 
d3011 1
a3011 1
% 
d3017 1
a3017 1
  % braces and backslashes are used only as delimiters.  
d3026 1
a3026 1
  % 
d3029 1
a3029 1
  % 
d3033 1
a3033 1
  % 
d3046 1
a3046 1
% everything using @@ instead of \realbackslash.  When everything uses 
d3048 1
a3048 1
% 
d3069 1
a3069 1
% 
d3074 2
a3075 1
  % Control letters and accents.
a3076 16
  \definedummyletter{,}%
  \definedummyletter{"}%
  \definedummyletter{`}%
  \definedummyletter{'}%
  \definedummyletter{^}%
  \definedummyletter{~}%
  \definedummyletter{=}%
  \definedummyword{u}%
  \definedummyword{v}%
  \definedummyword{H}%
  \definedummyword{dotaccent}%
  \definedummyword{ringaccent}%
  \definedummyword{tieaccent}%
  \definedummyword{ubaraccent}%
  \definedummyword{udotaccent}%
  \definedummyword{dotless}%
d3078 1
a3078 1
  % Other non-English letters.
d3090 4
d3105 1
a3105 7
  % Texinfo font commands.
  \definedummyword{b}%
  \definedummyword{i}%
  \definedummyword{r}%
  \definedummyword{sc}%
  \definedummyword{t}%
  %
a3106 19
  \definedummyword{acronym}%
  \definedummyword{cite}%
  \definedummyword{code}%
  \definedummyword{command}%
  \definedummyword{dfn}%
  \definedummyword{dots}%
  \definedummyword{emph}%
  \definedummyword{env}%
  \definedummyword{file}%
  \definedummyword{kbd}%
  \definedummyword{key}%
  \definedummyword{math}%
  \definedummyword{option}%
  \definedummyword{samp}%
  \definedummyword{strong}%
  \definedummyword{uref}%
  \definedummyword{url}%
  \definedummyword{var}%
  \definedummyword{w}%
d3111 1
d3123 1
a3123 2
  % Handle some cases of @@value -- where the variable name does not
  % contain - or _, and the value does not contain any
d3125 1
a3125 1
  \let\value = \expandablevalue
d3134 60
a3193 6
% If an index command is used in an @@example environment, any spaces
% therein should become regular spaces in the raw index file, not the
% expansion of \tie (\leavevmode \penalty \@@M \ ).
{\obeyspaces
 \gdef\unsepspaces{\obeyspaces\let =\space}}

a3199 3
\def\indexdummytex{TeX}
\def\indexdummydots{...}
%
d3201 12
d3218 1
a3218 18
  \let\,=\asis
  \let\"=\asis
  \let\`=\asis
  \let\'=\asis
  \let\^=\asis
  \let\~=\asis
  \let\==\asis
  \let\u=\asis
  \let\v=\asis
  \let\H=\asis
  \let\dotaccent=\asis
  \let\ringaccent=\asis
  \let\tieaccent=\asis
  \let\ubaraccent=\asis
  \let\udotaccent=\asis
  \let\dotless=\asis
  %
  % Other non-English letters.
d3232 2
d3235 2
a3236 4
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
d3238 15
a3252 27
  % Texinfo font commands.
  \let\b=\asis
  \let\i=\asis
  \let\r=\asis
  \let\sc=\asis
  \let\t=\asis
  %
  \let\TeX=\indexdummytex
  \let\acronym=\asis
  \let\cite=\asis
  \let\code=\asis
  \let\command=\asis
  \let\dfn=\asis
  \let\dots=\indexdummydots
  \let\emph=\asis
  \let\env=\asis
  \let\file=\asis
  \let\kbd=\asis
  \let\key=\asis
  \let\math=\asis
  \let\option=\asis
  \let\samp=\asis
  \let\strong=\asis
  \let\uref=\asis
  \let\url=\asis
  \let\var=\asis
  \let\w=\asis
a3257 3
% For \ifx comparisons.
\def\emptymacro{\empty}

d3259 2
a3260 2
%
\def\doind#1#2{\dosubind{#1}{#2}\empty}
d3264 2
a3265 2
% \empty if called from \doind, as we usually are.  The main exception
% is with defuns, which call us directly.
d3268 24
d3294 1
a3294 1
    \insert\margin{\hbox{\vrule height8pt depth3pt width0pt #2}}%
d3296 22
a3317 68
  {%
    \count255=\lastpenalty
    {%
      \indexdummies % Must do this here, since \bf, etc expand at this stage
      \escapechar=`\\
      {%
        \let\folio = 0% We will expand all macros now EXCEPT \folio.
        \def\rawbackslashxx{\indexbackslash}% \indexbackslash isn't defined now
        % so it will be output as is; and it will print as backslash.
        %
        % The main index entry text.
        \toks0 = {#2}%
        %
        % If third arg is present, precede it with space in sort key.
        \def\thirdarg{#3}%
        \ifx\thirdarg\emptymacro \else
           % If the third (subentry) arg is present, add it to the index
           % line to write.
          \toks0 = \expandafter{\the\toks0 \space #3}%
        \fi
        %
        % Process the index entry with all font commands turned off, to
        % get the string to sort by.
        {\indexnofonts
         \edef\temp{\the\toks0}% need full expansion
         \xdef\indexsorttmp{\temp}%
        }%
        %
        % Set up the complete index entry, with both the sort key and
        % the original text, including any font commands.  We write
        % three arguments to \entry to the .?? file (four in the
        % subentry case), texindex reduces to two when writing the .??s
        % sorted result.
        \edef\temp{%
          \write\csname#1indfile\endcsname{%
            \realbackslash entry{\indexsorttmp}{\folio}{\the\toks0}}%
        }%
        %
        % If a skip is the last thing on the list now, preserve it
        % by backing up by \lastskip, doing the \write, then inserting
        % the skip again.  Otherwise, the whatsit generated by the
        % \write will make \lastskip zero.  The result is that sequences
        % like this:
        % @@end defun
        % @@tindex whatever
        % @@defun ...
        % will have extra space inserted, because the \medbreak in the
        % start of the @@defun won't see the skip inserted by the @@end of
        % the previous defun.
        %
        % But don't do any of this if we're not in vertical mode.  We
        % don't want to do a \vskip and prematurely end a paragraph.
        %
        % Avoid page breaks due to these extra skips, too.
        %
        \iflinks
          \ifvmode
            \skip0 = \lastskip
            \ifdim\lastskip = 0pt \else \nobreak\vskip-\skip0 \fi
          \fi
          %
          \temp % do the write
          %
          \ifvmode \ifdim\skip0 = 0pt \else \nobreak\vskip\skip0 \fi \fi
        \fi
      }%
    }%
    \penalty\count255
d3319 71
d3427 1
a3427 2
\def\printindex{\parsearg\doprintindex}
\def\doprintindex#1{\begingroup
d3432 1
a3432 1
  \indexbreaks
d3459 1
a3459 1
      \def\indexbackslash{\rawbackslashxx}%
d3497 91
a3587 70
% This typesets a paragraph consisting of #1, dot leaders, and then #2
% flush to the right margin.  It is used for index and table of contents
% entries.  The paragraph is indented by \leftskip.
%
\def\entry#1#2{\begingroup
  %
  % Start a new paragraph if necessary, so our assignments below can't
  % affect previous text.
  \par
  %
  % Do not fill out the last line with white space.
  \parfillskip = 0in
  %
  % No extra space above this paragraph.
  \parskip = 0in
  %
  % Do not prefer a separate line ending with a hyphen to fewer lines.
  \finalhyphendemerits = 0
  %
  % \hangindent is only relevant when the entry text and page number
  % don't both fit on one line.  In that case, bob suggests starting the
  % dots pretty far over on the line.  Unfortunately, a large
  % indentation looks wrong when the entry text itself is broken across
  % lines.  So we use a small indentation and put up with long leaders.
  %
  % \hangafter is reset to 1 (which is the value we want) at the start
  % of each paragraph, so we need not do anything with that.
  \hangindent = 2em
  %
  % When the entry text needs to be broken, just fill out the first line
  % with blank space.
  \rightskip = 0pt plus1fil
  %
  % A bit of stretch before each entry for the benefit of balancing columns.
  \vskip 0pt plus1pt
  %
  % Start a ``paragraph'' for the index entry so the line breaking
  % parameters we've set above will have an effect.
  \noindent
  %
  % Insert the text of the index entry.  TeX will do line-breaking on it.
  #1%
  % The following is kludged to not output a line of dots in the index if
  % there are no page numbers.  The next person who breaks this will be
  % cursed by a Unix daemon.
  \def\tempa{{\rm }}%
  \def\tempb{#2}%
  \edef\tempc{\tempa}%
  \edef\tempd{\tempb}%
  \ifx\tempc\tempd\ \else%
    %
    % If we must, put the page number on a line of its own, and fill out
    % this line with blank space.  (The \hfil is overwhelmed with the
    % fill leaders glue in \indexdotfill if the page number does fit.)
    \hfil\penalty50
    \null\nobreak\indexdotfill % Have leaders before the page number.
    %
    % The `\ ' here is removed by the implicit \unskip that TeX does as
    % part of (the primitive) \par.  Without it, a spurious underfull
    % \hbox ensues.
    \ifpdf
      \pdfgettoks#2.\ \the\toksA % The page number ends the paragraph.
    \else
      \ #2% The page number ends the paragraph.
    \fi
  \fi%
  \par
\endgroup}

% Like \dotfill except takes at least 1 em.
d3696 1
a3696 1
% 
d3754 6
d3767 1
d3769 2
a3770 1
% We do the following for the sake of pdftex, which needs the actual
d3772 1
d3810 1
d3815 1
a3815 1
\newcount\secbase\secbase=0 % @@raise/lowersections modify this count
d3830 4
a3833 10
  \chapterzzz{#2}
\or
  \seczzz{#2}
\or
  \numberedsubseczzz{#2}
\or
  \numberedsubsubseczzz{#2}
\else
  \ifnum \absseclevel<0
    \chapterzzz{#2}
d3835 3
a3837 1
    \numberedsubsubseczzz{#2}
d3839 1
a3839 1
\fi
d3845 4
a3848 10
  \appendixzzz{#2}
\or
  \appendixsectionzzz{#2}
\or
  \appendixsubseczzz{#2}
\or
  \appendixsubsubseczzz{#2}
\else
  \ifnum \absseclevel<0
    \appendixzzz{#2}
d3850 3
a3852 1
    \appendixsubsubseczzz{#2}
d3854 1
a3854 1
\fi
d3859 5
a3863 11
\ifcase\absseclevel
  \unnumberedzzz{#2}
\or
  \unnumberedseczzz{#2}
\or
  \unnumberedsubseczzz{#2}
\or
  \unnumberedsubsubseczzz{#2}
\else
  \ifnum \absseclevel<0
    \unnumberedzzz{#2}
d3865 3
a3867 1
    \unnumberedsubsubseczzz{#2}
d3869 1
a3869 1
\fi
d3872 24
a3895 15
% @@chapter, @@appendix, @@unnumbered.
\def\thischaptername{No Chapter Title}
\outer\def\chapter{\parsearg\chapteryyy}
\def\chapteryyy #1{\numhead0{#1}} % normally numhead0 calls chapterzzz
\def\chapterzzz #1{%
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \chapno by 1 \message{\putwordChapter\space \the\chapno}%
  \chapmacro {#1}{\the\chapno}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  % We don't substitute the actual chapter name into \thischapter
  % because we don't want its macros evaluated now.
  \xdef\thischapter{\putwordChapter{} \the\chapno: \noexpand\thischaptername}%
  \writetocentry{chap}{#1}{{\the\chapno}}
  \donoderef
d3901 12
a3912 17
% we use \chapno to avoid indenting back
\def\appendixbox#1{%
  \setbox0 = \hbox{\putwordAppendix{} \the\chapno}%
  \hbox to \wd0{#1\hss}}

\outer\def\appendix{\parsearg\appendixyyy}
\def\appendixyyy #1{\apphead0{#1}} % normally apphead0 calls appendixzzz
\def\appendixzzz #1{%
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \appendixno by 1
  \message{\putwordAppendix\space \appendixletter}%
  \chapmacro {#1}{\appendixbox{\putwordAppendix{} \appendixletter}}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  \xdef\thischapter{\putwordAppendix{} \appendixletter: \noexpand\thischaptername}%
  \writetocentry{appendix}{#1}{{\appendixletter}}
  \appendixnoderef
d3919 1
a3919 2
\outer\def\centerchap{\parsearg\centerchapyyy}
\def\centerchapyyy #1{{\let\unnumbchapmacro=\centerchapmacro \unnumberedyyy{#1}}}
d3921 8
a3928 7
% @@top is like @@unnumbered.
\outer\def\top{\parsearg\unnumberedyyy}

\outer\def\unnumbered{\parsearg\unnumberedyyy}
\def\unnumberedyyy #1{\unnmhead0{#1}} % normally unnmhead0 calls unnumberedzzz
\def\unnumberedzzz #1{%
  \secno=0 \subsecno=0 \subsubsecno=0
d3941 4
a3944 1
  \toks0 = {#1}\message{(\the\toks0)}%
a3945 4
  \unnumbchapmacro {#1}%
  \gdef\thischapter{#1}\gdef\thissection{#1}%
  \writetocentry{unnumbchap}{#1}{{\the\chapno}}
  \unnumbnoderef
d3951 3
d3955 17
a3971 28
\outer\def\numberedsec{\parsearg\secyyy}
\def\secyyy #1{\numhead1{#1}} % normally calls seczzz
\def\seczzz #1{%
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\the\chapno}{\the\secno}%
  \writetocentry{sec}{#1}{{\the\chapno}{\the\secno}}
  \donoderef
  \nobreak
}

\outer\def\appendixsection{\parsearg\appendixsecyyy}
\outer\def\appendixsec{\parsearg\appendixsecyyy}
\def\appendixsecyyy #1{\apphead1{#1}} % normally calls appendixsectionzzz
\def\appendixsectionzzz #1{%
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\appendixletter}{\the\secno}%
  \writetocentry{sec}{#1}{{\appendixletter}{\the\secno}}
  \appendixnoderef
  \nobreak
}

\outer\def\unnumberedsec{\parsearg\unnumberedsecyyy}
\def\unnumberedsecyyy #1{\unnmhead1{#1}} % normally calls unnumberedseczzz
\def\unnumberedseczzz #1{%
  \plainsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsec}{#1}{{\the\chapno}{\the\secno}}
  \unnumbnoderef
  \nobreak
d3975 18
a3992 27
\outer\def\numberedsubsec{\parsearg\numberedsubsecyyy}
\def\numberedsubsecyyy #1{\numhead2{#1}} % normally calls numberedsubseczzz
\def\numberedsubseczzz #1{%
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\the\chapno}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \donoderef
  \nobreak
}

\outer\def\appendixsubsec{\parsearg\appendixsubsecyyy}
\def\appendixsubsecyyy #1{\apphead2{#1}} % normally calls appendixsubseczzz
\def\appendixsubseczzz #1{%
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\appendixletter}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}}
  \appendixnoderef
  \nobreak
}

\outer\def\unnumberedsubsec{\parsearg\unnumberedsubsecyyy}
\def\unnumberedsubsecyyy #1{\unnmhead2{#1}} %normally calls unnumberedsubseczzz
\def\unnumberedsubseczzz #1{%
  \plainsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \unnumbnoderef
  \nobreak
d3996 19
a4014 29
\outer\def\numberedsubsubsec{\parsearg\numberedsubsubsecyyy}
\def\numberedsubsubsecyyy #1{\numhead3{#1}} % normally numberedsubsubseczzz
\def\numberedsubsubseczzz #1{%
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \donoderef
  \nobreak
}

\outer\def\appendixsubsubsec{\parsearg\appendixsubsubsecyyy}
\def\appendixsubsubsecyyy #1{\apphead3{#1}} % normally appendixsubsubseczzz
\def\appendixsubsubseczzz #1{%
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \appendixnoderef
  \nobreak
}

\outer\def\unnumberedsubsubsec{\parsearg\unnumberedsubsubsecyyy}
\def\unnumberedsubsubsecyyy #1{\unnmhead3{#1}} %normally unnumberedsubsubseczzz
\def\unnumberedsubsubseczzz #1{%
  \plainsubsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \unnumbnoderef
  \nobreak
d4018 1
a4018 1
% Actually, they should now be obsolete; ordinary section commands should work.
d4038 3
a4040 3
\global\let\section = \numberedsec
\global\let\subsection = \numberedsubsec
\global\let\subsubsection = \numberedsubsubsec
d4053 1
a4053 2
\def\majorheading{\parsearg\majorheadingzzz}
\def\majorheadingzzz #1{%
d4055 2
a4056 3
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d4058 2
a4059 2
\def\chapheading{\parsearg\chapheadingzzz}
\def\chapheadingzzz #1{\chapbreak %
d4062 4
a4065 1
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d4068 6
a4073 3
\def\heading{\parsearg\plainsecheading}
\def\subheading{\parsearg\plainsubsecheading}
\def\subsubheading{\parsearg\plainsubsubsecheading}
d4106 1
a4106 1
\def\CHAPPAGodd{
d4114 1
a4114 1
\def\CHAPFplain{
a4115 1
\global\let\unnumbchapmacro=\unnchfplain
d4118 11
a4128 3
% Plain chapter opening.
% #1 is the text, #2 the chapter number or empty if unnumbered.
\def\chfplain#1#2{%
d4132 47
a4178 2
    \def\chapnum{#2}%
    \setbox0 = \hbox{#2\ifx\chapnum\empty\else\enspace\fi}%
d4180 1
a4180 1
          \hangindent = \wd0 \centerparametersmaybe
a4186 3
% Plain opening for unnumbered.
\def\unnchfplain#1{\chfplain{#1}{}}

d4195 1
a4195 1
  \chfplain{#1}{}%
d4200 3
d4220 1
a4220 1
\def\CHAPFopen{
a4221 1
\global\let\unnumbchapmacro=\unnchfopen
d4225 3
a4227 1
% Section titles.
d4229 1
a4229 3
\def\secheadingbreak{\dobreak \secheadingskip {-1000}}
\def\secheading#1#2#3{\sectionheading{sec}{#2.#3}{#1}}
\def\plainsecheading#1{\sectionheading{sec}{}{#1}}
d4232 2
a4233 4
\newskip \subsecheadingskip
\def\subsecheadingbreak{\dobreak \subsecheadingskip {-500}}
\def\subsecheading#1#2#3#4{\sectionheading{subsec}{#2.#3.#4}{#1}}
\def\plainsubsecheading#1{\sectionheading{subsec}{}{#1}}
d4236 2
a4237 4
\let\subsubsecheadingskip = \subsecheadingskip
\let\subsubsecheadingbreak = \subsecheadingbreak
\def\subsubsecheading#1#2#3#4#5{\sectionheading{subsubsec}{#2.#3.#4.#5}{#1}}
\def\plainsubsubsecheading#1{\sectionheading{subsubsec}{}{#1}}
d4240 7
a4246 9
% Print any size section title.
%
% #1 is the section type (sec/subsec/subsubsec), #2 is the section
% number (maybe empty), #3 the text.
\def\sectionheading#1#2#3{%
  {%
    \expandafter\advance\csname #1headingskip\endcsname by \parskip
    \csname #1headingbreak\endcsname
  }%
d4249 4
a4252 1
    \csname #1fonts\endcsname \rm
d4254 3
a4256 3
    % Only insert the separating space if we have a section number.
    \def\secnum{#2}%
    \setbox0 = \hbox{#2\ifx\secnum\empty\else\enspace\fi}%
d4258 28
d4287 2
a4288 2
          \hangindent = \wd0 % zero if no section number
          \unhbox0 #3}%
d4290 6
a4295 3
  % Add extra space after the heading -- either a line space or a
  % paragraph space, whichever is more.  (Some people like to set
  % \parskip to large values for some reason.)  Don't allow stretch, though.
d4297 12
a4308 5
  \ifdim\parskip>\normalbaselineskip
    \kern\parskip
  \else
    \kern\normalbaselineskip
  \fi
d4318 8
a4325 4
% Called from @@chapter, etc.  We supply {\folio} at the end of the
% argument, which will end up as the last argument to the \...entry macro.
%
% Usage: \writetocentry{chap}{The Name of The Game}{{\the\chapno}}
d4328 2
d4332 2
d4335 14
a4348 3
  \iftocfileopened\else
    \immediate\openout\tocfile = \jobname.toc
    \global\tocfileopenedtrue
d4351 7
a4357 13
  \iflinks
    \toks0 = {#2}%
    \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}#3{\folio}}}%
    \temp
  \fi
  %
  % Tell \shipout to create a page destination if we're doing pdf, which
  % will be the target of the links in the table of contents.  We can't
  % just do it on every page because the title pages are numbered 1 and
  % 2 (the page numbers aren't printed), and so are the first two pages
  % of the document.  Thus, we'd have two destinations named `1', and
  % two named `2'.
  \ifpdf \pdfmakepagedesttrue \fi
d4364 1
a4364 2
% Finish up the main text and prepare to read what we've written
% to \tocfile.
d4367 23
a4389 21
   % If @@setchapternewpage on, and @@headings double, the contents should
   % start on an odd page, unlike chapters.  Thus, we maintain
   % \contentsalignmacro in parallel with \pagealignmacro.
   % From: Torbjorn Granlund <tege@@matematik.su.se>
   \contentsalignmacro
   \immediate\closeout\tocfile
   %
   % Don't need to put `Contents' or `Short Contents' in the headline.
   % It is abundantly clear what they are.
   \unnumbchapmacro{#1}\def\thischapter{}%
   \savepageno = \pageno
   \begingroup                  % Set up to handle contents files properly.
      \catcode`\\=0  \catcode`\{=1  \catcode`\}=2  \catcode`\@@=11
      % We can't do this, because then an actual ^ in a section
      % title fails, e.g., @@chapter ^ -- exponentiation.  --karl, 9jul97.
      %\catcode`\^=7 % to see ^^e4 as \"a etc. juha@@piuha.ydi.vtt.fi
      \raggedbottom             % Worry more about breakpoints than the bottom.
      \advance\hsize by -\contentsrightmargin % Don't use the full line length.
      %
      % Roman numerals for page numbers.
      \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
d4395 14
a4408 12
   \startcontents{\putwordTOC}%
     \openin 1 \jobname.toc
     \ifeof 1 \else
       \closein 1
       \input \jobname.toc
     \fi
     \vfill \eject
     \contentsalignmacro % in case @@setchapternewpage odd is in effect
     \pdfmakeoutlines
   \endgroup
   \lastnegativepageno = \pageno
   \global\pageno = \savepageno
d4413 31
a4443 28
   \startcontents{\putwordShortTOC}%
      %
      \let\chapentry = \shortchapentry
      \let\appendixentry = \shortappendixentry
      \let\unnumbchapentry = \shortunnumberedentry
      % We want a true roman here for the page numbers.
      \secfonts
      \let\rm=\shortcontrm \let\bf=\shortcontbf
      \let\sl=\shortcontsl \let\tt=\shortconttt
      \rm
      \hyphenpenalty = 10000
      \advance\baselineskip by 1pt % Open it up a little.
      \def\secentry ##1##2##3##4{}
      \def\subsecentry ##1##2##3##4##5{}
      \def\subsubsecentry ##1##2##3##4##5##6{}
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
      \openin 1 \jobname.toc
      \ifeof 1 \else
        \closein 1
        \input \jobname.toc
      \fi
     \vfill \eject
     \contentsalignmacro % in case @@setchapternewpage odd is in effect
   \endgroup
   \lastnegativepageno = \pageno
   \global\pageno = \savepageno
d4447 17
a4463 3
\ifpdf
  \pdfcatalog{/PageMode /UseOutlines}%
\fi
d4471 1
a4471 1
\def\chapentry#1#2#3{\dochapentry{#2\labelspace#1}{#3}}
d4475 2
a4476 2
\def\shortchapentry#1#2#3{%
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno\bgroup#3\egroup}%
d4480 6
a4485 2
\def\appendixentry#1#2#3{%
  \dochapentry{\appendixbox{\putwordAppendix{} #2}\labelspace#1}{#3}}
d4487 1
a4487 20
% Appendices, in the short toc.
\let\shortappendixentry = \shortchapentry

% Typeset the label for a chapter or appendix for the short contents.
% The arg is, e.g., `Appendix A' for an appendix, or `3' for a chapter.
% We could simplify the code here by writing out an \appendixentry
% command in the toc file for appendices, instead of using \chapentry
% for both, but it doesn't seem worth it.
%
\newdimen\shortappendixwidth
%
\def\shortchaplabel#1{%
  % This space should be enough, since a single number is .5em, and the
  % widest letter (M) is 1em, at least in the Computer Modern fonts.
  % But use \hss just in case.
  % (This space doesn't include the extra space that gets added after
  % the label; that gets put in by \shortchapentry above.)
  \dimen0 = 1em
  \hbox to \dimen0{#1\hss}%
}
d4490 2
a4491 2
\def\unnumbchapentry#1#2#3{\dochapentry{#1}{#3}}
\def\shortunnumberedentry#1#2#3{\tocentry{#1}{\doshortpageno\bgroup#3\egroup}}
d4494 3
a4496 2
\def\secentry#1#2#3#4{\dosecentry{#2.#3\labelspace#1}{#4}}
\def\unnumbsecentry#1#2#3#4{\dosecentry{#1}{#4}}
d4499 3
a4501 2
\def\subsecentry#1#2#3#4#5{\dosubsecentry{#2.#3.#4\labelspace#1}{#5}}
\def\unnumbsubsecentry#1#2#3#4#5{\dosubsecentry{#1}{#5}}
d4504 3
a4506 3
\def\subsubsecentry#1#2#3#4#5#6{%
  \dosubsubsecentry{#2.#3.#4.#5\labelspace#1}{#6}}
\def\unnumbsubsubsecentry#1#2#3#4#5#6{\dosubsubsecentry{#1}{#6}}
d4509 2
a4510 1
\newdimen\tocindent \tocindent = 3pc
d4541 2
a4542 11
% Final typesetting of a toc entry; we use the same \entry macro as for
% the index entries, but we want to suppress hyphenation here.  (We
% can't do that in the \entry macro, since index entries might consist
% of hyphenated-identifiers-that-do-not-fit-on-a-line-and-nothing-else.)
\def\tocentry#1#2{\begingroup
  \vskip 0pt plus1pt % allow a little stretch for the sake of nice page breaks
  % Do not use \turnoffactive in these arguments.  Since the toc is
  % typeset in cmr, characters such as _ would come out wrong; we
  % have to do the usual translation tricks.
  \entry{#1}{#2}%
\endgroup}
d4552 2
a4553 2
\let\subsecentryfonts = \textfonts
\let\subsubsecentryfonts = \textfonts
d4560 1
a4560 1
% 
d4572 1
a4572 1
% 
d4580 1
a4580 1
\global\setbox\errorbox=\hbox to \dimen0{\hfil
d4583 1
a4583 1
   \vbox{
d4597 1
a4597 1
\def\tex{\begingroup
a4603 1
  \catcode `\==\other
d4618 2
d4623 1
d4630 2
a4631 1
\let\Etex=\endgroup}
d4634 1
a4634 1
% @@lisp does a \begingroup so it can rebind things,
a4644 13
% Make each space character in the input produce a normal interword
% space in the output.  Don't allow a line break at this space, as this
% is used only in environments like @@example, where each line of input
% should produce a line of output anyway.
%
{\obeyspaces %
\gdef\sepspaces{\obeyspaces\let =\tie}}

% Define \obeyedspace to be our active space, whatever it is.  This is
% for use in \parsearg.
{\sepspaces%
\global\let\obeyedspace= }

d4662 1
a4662 1
      \ifnum\lastpenalty>10000 \else \penalty-50 \fi
d4694 29
a4722 28
\def\cartouche{%
\par  % can't be in the midst of a paragraph.
\begingroup
        \lskip=\leftskip \rskip=\rightskip
        \leftskip=0pt\rightskip=0pt %we want these *outside*.
        \cartinner=\hsize \advance\cartinner by-\lskip
                          \advance\cartinner by-\rskip
        \cartouter=\hsize
        \advance\cartouter by 18.4pt % allow for 3pt kerns on either
%                                    side, and for 6pt waste from
%                                    each corner char, and rule thickness
        \normbskip=\baselineskip \normpskip=\parskip \normlskip=\lineskip
        % Flag to tell @@lisp, etc., not to narrow margin.
        \let\nonarrowing=\comment
        \vbox\bgroup
                \baselineskip=0pt\parskip=0pt\lineskip=0pt
                \carttop
                \hbox\bgroup
                        \hskip\lskip
                        \vrule\kern3pt
                        \vbox\bgroup
                                \hsize=\cartinner
                                \kern3pt
                                \begingroup
                                        \baselineskip=\normbskip
                                        \lineskip=\normlskip
                                        \parskip=\normpskip
                                        \vskip -\parskip
d4724 10
a4733 10
                                \endgroup
                                \kern3pt
                        \egroup
                        \kern3pt\vrule
                        \hskip\rskip
                \egroup
                \cartbot
        \egroup
\endgroup
}}
a4739 1
  \inENV % This group ends at the end of the body
a4751 2
    \let\exdent=\nofillexdent
    \let\nonarrowing=\relax
d4753 1
d4756 4
a4759 2
% Define the \E... control sequence only if we are inside the particular
% environment, so the error checking in \end will work.
d4761 14
a4774 7
% To end an @@example-like environment, we first end the paragraph (via
% \afterenvbreak's vertical glue), and then the group.  That way we keep
% the zero \parskip that the environments set -- \parskip glue will be
% inserted at the beginning of the next paragraph in the document, after
% the environment.
%
\def\nonfillfinish{\afterenvbreak\endgroup}
d4776 7
a4782 7
% @@lisp: indented, narrowed, typewriter font.
\def\lisp{\begingroup
  \nonfillstart
  \let\Elisp = \nonfillfinish
  \tt
  \let\kbdfont = \kbdexamplefont % Allow @@kbd to do something special.
  \gobble       % eat return
d4785 5
a4789 2
% @@example: Same as @@lisp.
\def\example{\begingroup \def\Eexample{\nonfillfinish\endgroup}\lisp}
d4791 2
d4795 6
a4800 5
\def\smalllisp{\begingroup
  \def\Esmalllisp{\nonfillfinish\endgroup}%
  \def\Esmallexample{\nonfillfinish\endgroup}%
  \smallexamplefonts
  \lisp
a4801 2
\let\smallexample = \smalllisp

d4803 1
a4803 1
% @@display: same as @@lisp except keep current font.
d4805 1
a4805 1
\def\display{\begingroup
a4806 1
  \let\Edisplay = \nonfillfinish
d4809 2
d4812 4
a4815 6
% @@smalldisplay: @@display plus smaller fonts.
%
\def\smalldisplay{\begingroup
  \def\Esmalldisplay{\nonfillfinish\endgroup}%
  \smallexamplefonts \rm
  \display
d4818 3
a4820 4
% @@format: same as @@display except don't narrow margins.
%
\def\format{\begingroup
  \let\nonarrowing = t
a4821 1
  \let\Eformat = \nonfillfinish
d4824 1
a4824 12
%
% @@smallformat: @@format plus smaller fonts.
%
\def\smallformat{\begingroup
  \def\Esmallformat{\nonfillfinish\endgroup}%
  \smallexamplefonts \rm
  \format
}

% @@flushleft (same as @@format).
%
\def\flushleft{\begingroup \def\Eflushleft{\nonfillfinish\endgroup}\format}
d4828 2
a4829 2
\def\flushright{\begingroup
  \let\nonarrowing = t
a4830 1
  \let\Eflushright = \nonfillfinish
d4834 1
d4838 3
a4840 1
% and narrows the margins.
d4842 1
a4842 2
\def\quotation{%
  \begingroup\inENV %This group ends at the end of the @@quotation body
a4844 3
  % We have retained a nonzero parskip for the environment, since we're
  % doing normal filling. So to avoid extra space below the environment...
  \def\Equotation{\parskip = 0pt \nonfillfinish}%
d4853 21
d4878 1
a4878 1
% If we want to allow any <char> as delimiter, 
d4895 1
a4895 1
  \def\do##1{\catcode`##1=12}\dospecials}
d4943 2
d4958 2
a4959 2
% Do the @@verb magic: verbatim text is quoted by unique 
% delimiter characters.  Before first delimiter expect a 
d4966 1
a4966 1
  \catcode`[=1\catcode`]=2\catcode`\{=12\catcode`\}=12
d4978 1
a4978 1
% For Texinfo it's a lot easier than for LaTeX, 
a4982 7
%% Include LaTeX hack for completeness -- never know
%% \begingroup
%% \catcode`|=0 \catcode`[=1
%% \catcode`]=2\catcode`\{=12\catcode`\}=12\catcode`\ =\active
%% \catcode`\\=12|gdef|doverbatim#1@@end verbatim[
%% #1|endgroup|def|Everbatim[]|end[verbatim]]
%% |endgroup
d4990 3
a4992 1
  \gdef\doverbatim#1^^M#2@@end verbatim{#2\end{verbatim}}%
d4995 2
a4996 6
\def\verbatim{%
  \def\Everbatim{\nonfillfinish\endgroup}%
  \begingroup
    \nonfillstart
    \advance\leftskip by -\defbodyindent
    \begingroup\setupverbatim\doverbatim
d4998 2
d5003 1
a5003 19
% Allow normal characters that we make active in the argument (a file name).
\def\verbatiminclude{%
  \begingroup
    \catcode`\\=\other
    \catcode`~=\other
    \catcode`^=\other
    \catcode`_=\other
    \catcode`|=\other
    \catcode`<=\other
    \catcode`>=\other
    \catcode`+=\other
    \parsearg\doverbatiminclude
}
\def\setupverbatiminclude{%
  \begingroup
    \nonfillstart
    \advance\leftskip by -\defbodyindent
    \begingroup\setupverbatim
}
d5006 6
a5011 9
     % Restore active chars for included file.
  \endgroup
  \begingroup
    \let\value=\expandablevalue
    \def\thisfile{#1}%
    \expandafter\expandafter\setupverbatiminclude\input\thisfile
  \endgroup
  \nonfillfinish
  \endgroup
d5017 1
a5017 1
% 
d5024 1
a5024 1
% 
d5047 1
a5047 1
% 
d5051 1
a5051 1
% 
d5055 1
a5055 1
% 
a5085 3
% Allow user to change definition object font (\df) internally
\def\setdeffont#1 {\csname DEF#1\endcsname}

d5090 4
a5093 69
\newcount\parencount

% We want ()&[] to print specially on the defun line.
% 
\def\activeparens{%
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\&=\active
  \catcode`\[=\active \catcode`\]=\active
}

% Make control sequences which act like normal parenthesis chars.
\let\lparen = ( \let\rparen = )

{\activeparens % Now, smart parens don't turn on until &foo (see \amprm)

% Be sure that we always have a definition for `(', etc.  For example,
% if the fn name has parens in it, \boldbrax will not be in effect yet,
% so TeX would otherwise complain about undefined control sequence.
\global\let(=\lparen \global\let)=\rparen
\global\let[=\lbrack \global\let]=\rbrack

\gdef\functionparens{\boldbrax\let&=\amprm\parencount=0 }
\gdef\boldbrax{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb}
% This is used to turn on special parens
% but make & act ordinary (given that it's active).
\gdef\boldbraxnoamp{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb\let&=\ampnr}

% Definitions of (, ) and & used in args for functions.
% This is the definition of ( outside of all parentheses.
\gdef\oprm#1 {{\rm\char`\(}#1 \bf \let(=\opnested
  \global\advance\parencount by 1
}
%
% This is the definition of ( when already inside a level of parens.
\gdef\opnested{\char`\(\global\advance\parencount by 1 }
%
\gdef\clrm{% Print a paren in roman if it is taking us back to depth of 0.
  % also in that case restore the outer-level definition of (.
  \ifnum \parencount=1 {\rm \char `\)}\sl \let(=\oprm \else \char `\) \fi
  \global\advance \parencount by -1 }
% If we encounter &foo, then turn on ()-hacking afterwards
\gdef\amprm#1 {{\rm\&#1}\let(=\oprm \let)=\clrm\ }
%
\gdef\normalparens{\boldbrax\let&=\ampnr}
} % End of definition inside \activeparens
%% These parens (in \boldbrax) actually are a little bolder than the
%% contained text.  This is especially needed for [ and ]
\def\opnr{{\sf\char`\(}\global\advance\parencount by 1 }
\def\clnr{{\sf\char`\)}\global\advance\parencount by -1 }
\let\ampnr = \&
\def\lbrb{{\bf\char`\[}}
\def\rbrb{{\bf\char`\]}}

% Active &'s sneak into the index arguments, so make sure it's defined.
{
  \catcode`& = \active
  \global\let& = \ampnr
}

% \defname, which formats the name of the @@def (not the args).
% #1 is the function name.
% #2 is the type of definition, such as "Function".
%
\def\defname#1#2{%
  % How we'll output the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \ifempty{#2}%
    \def\defnametype{}%
d5095 12
a5106 1
    \def\defnametype{[\rm #2]}%
a5108 50
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \dimen2=\leftskip
  \advance\dimen2 by -\defbodyindent
  %
  % Figure out values for the paragraph shape.
  \setbox0=\hbox{\hskip \deflastargmargin{\defnametype}}%
  \dimen0=\hsize \advance \dimen0 by -\wd0  % compute size for first line
  \dimen1=\hsize \advance \dimen1 by -\defargsindent  % size for continuations
  \parshape 2 0in \dimen0 \defargsindent \dimen1
  %
  % Output arg 2 ("Function" or some such) but stuck inside a box of
  % width 0 so it does not interfere with linebreaking.
  \noindent
  %
  {% Adjust \hsize to exclude the ambient margins,
   % so that \rightline will obey them.
   \advance \hsize by -\dimen2
   \dimen3 = 0pt  % was -1.25pc
   \rlap{\rightline{\defnametype\kern\dimen3}}%
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \advance\leftskip by -\defbodyindent
  \exdentamount=\defbodyindent
  {\df #1}\enskip        % output function name
  % \defunargs will be called next to output the arguments, if any.
}

% Common pieces to start any @@def...
% #1 is the \E... control sequence to end the definition (which we define).
% #2 is the \...x control sequence (which our caller defines).
% #3 is the control sequence to process the header, such as \defunheader.
% 
\def\parsebodycommon#1#2#3{%
  \begingroup\inENV
  % If there are two @@def commands in a row, we'll have a \nobreak,
  % which is there to keep the function description together with its
  % header.  But if there's nothing but headers, we want to allow a
  % break after all.  Check for penalty 10002 (inserted by
  % \defargscommonending) instead of 10000, since the sectioning
  % commands insert a \penalty10000, and we don't want to allow a break
  % between a section heading and a defun.
  \ifnum\lastpenalty=10002 \penalty0 \fi
  \medbreak
  %
  % Define the \E... end token that this defining construct specifies
  % so that it will exit this group.
  \def#1{\endgraf\endgroup\medbreak}%
  %
d5114 7
a5120 6
% Common part of the \...x definitions.
% 
\def\defxbodycommon{%
  % As with \parsebodycommon above, allow line break if we have multiple
  % x headers in a row.  It's not a great place, though.
  \ifnum\lastpenalty=10000 \penalty1000 \fi
d5122 2
a5123 1
  \begingroup\obeylines
d5125 1
d5127 1
a5127 1
% Process body of @@defun, @@deffn, @@defmac, etc.
d5129 14
a5142 6
\def\defparsebody#1#2#3{%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2{\defxbodycommon \activeparens \spacesplit#3}%
  \catcode\equalChar=\active
  \begingroup\obeylines\activeparens
  \spacesplit#3%
d5145 1
a5145 13
% #1, #2, #3 are the common arguments (see \parsebodycommon above).
% #4, delimited by the space, is the class name.
%
\def\defmethparsebody#1#2#3#4 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 {\defxbodycommon \activeparens \spacesplit{#3{##1}}}%
  \begingroup\obeylines\activeparens
  % The \empty here prevents misinterpretation of a construct such as
  %   @@deffn {whatever} {Enharmonic comma}
  % See comments at \deftpparsebody, although in our case we don't have
  % to remove the \empty afterwards, since it is empty.
  \spacesplit{#3{#4}}\empty
}
d5147 2
a5148 4
% Used for @@deftypemethod and @@deftypeivar.
% #1, #2, #3 are the common arguments (see \defparsebody).
% #4, delimited by a space, is the class name.
% #5 is the method's return type.
d5150 5
a5154 5
\def\deftypemethparsebody#1#2#3#4 #5 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 {\defxbodycommon \activeparens \spacesplit{#3{##1}{##2}}}%
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#4}{#5}}%
d5157 1
a5157 27
% Used for @@deftypeop.  The change from \deftypemethparsebody is an
% extra argument at the beginning which is the `category', instead of it
% being the hardwired string `Method' or `Instance Variable'.  We have
% to account for this both in the \...x definition and in parsing the
% input at hand.  Thus also need a control sequence (passed as #5) for
% the \E... definition to assign the category name to.
% 
\def\deftypeopparsebody#1#2#3#4#5 #6 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 ##3 {\def#4{##1}%
    \defxbodycommon \activeparens \spacesplit{#3{##2}{##3}}}%
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#5}{#6}}%
}

% For @@defop.
\def\defopparsebody #1#2#3#4#5 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 {\def#4{##1}%
    \defxbodycommon \activeparens \spacesplit{#3{##2}}}%
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#5}}%
}

% These parsing functions are similar to the preceding ones
% except that they do not make parens into active characters.
% These are used for "variables" since they have no arguments.
d5159 2
a5160 28
\def\defvarparsebody #1#2#3{%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2{\defxbodycommon \spacesplit#3}%
  \catcode\equalChar=\active
  \begingroup\obeylines
  \spacesplit#3%
}

% @@defopvar.
\def\defopvarparsebody #1#2#3#4#5 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 {\def#4{##1}%
    \defxbodycommon \spacesplit{#3{##2}}}%
  \begingroup\obeylines
  \spacesplit{#3{#5}}%
}

\def\defvrparsebody#1#2#3#4 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
  \begingroup\obeylines
  \spacesplit{#3{#4}}%
}

% This loses on `@@deftp {Data Type} {struct termios}' -- it thinks the
% type is just `struct', because we lose the braces in `{struct
% termios}' when \spacesplit reads its undelimited argument.  Sigh.
% \let\deftpparsebody=\defvrparsebody
d5162 7
a5168 9
% So, to get around this, we put \empty in with the type name.  That
% way, TeX won't find exactly `{...}' as an undelimited argument, and
% won't strip off the braces.
%
\def\deftpparsebody #1#2#3#4 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
  \begingroup\obeylines
  \spacesplit{\parsetpheaderline{#3{#4}}}\empty
d5171 1
a5171 4
% Fine, but then we have to eventually remove the \empty *and* the
% braces (if any).  That's what this does.
%
\def\removeemptybraces\empty#1\relax{#1}
d5173 2
a5174 7
% After \spacesplit has done its work, this is called -- #1 is the final
% thing to call, #2 the type name (which starts with \empty), and #3
% (which might be empty) the arguments.
%
\def\parsetpheaderline#1#2#3{%
  #1{\removeemptybraces#2\relax}{#3}%
}%
d5176 2
a5177 16
% Split up #2 (the rest of the input line) at the first space token.
% call #1 with two arguments:
%  the first is all of #2 before the space token,
%  the second is all of #2 after that space token.
% If #2 contains no space token, all of it is passed as the first arg
% and the second is passed as empty.
%
{\obeylines %
 \gdef\spacesplit#1#2^^M{\endgroup\spacesplitx{#1}#2 \relax\spacesplitx}%
 \long\gdef\spacesplitx#1#2 #3#4\spacesplitx{%
   \ifx\relax #3%
     #1{#2}{}%
   \else %
     #1{#2}{#3#4}%
   \fi}%
}
d5179 2
a5180 1
% Define @@defun.
d5182 1
a5182 1
% This is called to end the arguments processing for all the @@def... commands.
d5184 4
a5187 6
\def\defargscommonending{%
  \interlinepenalty = 10000
  \advance\rightskip by 0pt plus 1fil
  \endgraf
  \nobreak\vskip -\parskip
  \penalty 10002  % signal to \parsebodycommon.
d5190 1
a5190 21
% This expands the args and terminates the paragraph they comprise.
% 
\def\defunargs#1{\functionparens \sl
% Expand, preventing hyphenation at `-' chars.
% Note that groups don't affect changes in \hyphenchar.
% Set the font temporarily and use \font in case \setfont made \tensl a macro.
{\tensl\hyphenchar\font=0}%
#1%
{\tensl\hyphenchar\font=45}%
\ifnum\parencount=0 \else \errmessage{Unbalanced parentheses in @@def}\fi%
  \defargscommonending
}

\def\deftypefunargs #1{%
% Expand, preventing hyphenation at `-' chars.
% Note that groups don't affect changes in \hyphenchar.
% Use \boldbraxnoamp, not \functionparens, so that & is not special.
\boldbraxnoamp
\tclose{#1}% avoid \code because of side effects on active chars
  \defargscommonending
}
d5192 2
a5193 1
% Do complete processing of one @@defun or @@defunx line already parsed.
d5195 2
a5196 1
% @@deffn Command forward-char nchars
d5198 2
a5199 1
\def\deffn{\defmethparsebody\Edeffn\deffnx\deffnheader}
d5201 5
a5205 3
\def\deffnheader #1#2#3{\doind {fn}{\code{#2}}%
\begingroup\defname {#2}{#1}\defunargs{#3}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
d5208 1
a5208 3
% @@defun == @@deffn Function

\def\defun{\defparsebody\Edefun\defunx\defunheader}
d5210 2
a5211 5
\def\defunheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{\putwordDeffunc}%
\defunargs {#2}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
}
d5213 2
a5214 1
% @@deftypefun int foobar (int @@var{foo}, float @@var{bar})
d5216 2
a5217 1
\def\deftypefun{\defparsebody\Edeftypefun\deftypefunx\deftypefunheader}
d5219 5
a5223 8
% #1 is the data type.  #2 is the name and args.
\def\deftypefunheader #1#2{\deftypefunheaderx{#1}#2 \relax}
% #1 is the data type, #2 the name, #3 the args.
\def\deftypefunheaderx #1#2 #3\relax{%
\doind {fn}{\code{#2}}% Make entry in function index
\begingroup\defname {\defheaderxcond#1\relax$.$#2}{\putwordDeftypefun}%
\deftypefunargs {#3}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
d5226 1
a5226 3
% @@deftypefn {Library Function} int foobar (int @@var{foo}, float @@var{bar})

\def\deftypefn{\defmethparsebody\Edeftypefn\deftypefnx\deftypefnheader}
d5228 2
a5229 16
% \defheaderxcond#1\relax$.$
% puts #1 in @@code, followed by a space, but does nothing if #1 is null.
\def\defheaderxcond#1#2$.${\ifx#1\relax\else\code{#1#2} \fi}

% #1 is the classification.  #2 is the data type.  #3 is the name and args.
\def\deftypefnheader #1#2#3{\deftypefnheaderx{#1}{#2}#3 \relax}
% #1 is the classification, #2 the data type, #3 the name, #4 the args.
\def\deftypefnheaderx #1#2#3 #4\relax{%
\doind {fn}{\code{#3}}% Make entry in function index
\begingroup
\normalparens % notably, turn off `&' magic, which prevents
%               at least some C++ text from working
\defname {\defheaderxcond#2\relax$.$#3}{#1}%
\deftypefunargs {#4}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
}
d5231 2
a5232 1
% @@defmac == @@deffn Macro
d5234 2
a5235 1
\def\defmac{\defparsebody\Edefmac\defmacx\defmacheader}
d5237 5
a5241 4
\def\defmacheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{\putwordDefmac}%
\defunargs {#2}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
d5244 12
a5255 1
% @@defspec == @@deffn Special Form
d5257 6
a5262 9
\def\defspec{\defparsebody\Edefspec\defspecx\defspecheader}

\def\defspecheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{\putwordDefspec}%
\defunargs {#2}\endgroup %
\catcode\equalChar=\other % Turn off change made in \defparsebody
}

% @@defop CATEGORY CLASS OPERATION ARG...
d5264 49
a5312 9
\def\defop #1 {\def\defoptype{#1}%
\defopparsebody\Edefop\defopx\defopheader\defoptype}
%
\def\defopheader#1#2#3{%
  \dosubind{fn}{\code{#2}}{\putwordon\ \code{#1}}% function index entry
  \begingroup
    \defname{#2}{\defoptype\ \putwordon\ #1}%
    \defunargs{#3}%
  \endgroup
d5315 15
a5329 14
% @@deftypeop CATEGORY CLASS TYPE OPERATION ARG...
%
\def\deftypeop #1 {\def\deftypeopcategory{#1}%
  \deftypeopparsebody\Edeftypeop\deftypeopx\deftypeopheader
                       \deftypeopcategory}
%
% #1 is the class name, #2 the data type, #3 the operation name, #4 the args.
\def\deftypeopheader#1#2#3#4{%
  \dosubind{fn}{\code{#3}}{\putwordon\ \code{#1}}% entry in function index
  \begingroup
    \defname{\defheaderxcond#2\relax$.$#3}
            {\deftypeopcategory\ \putwordon\ \code{#1}}%
    \deftypefunargs{#4}%
  \endgroup
d5332 1
a5332 1
% @@deftypemethod CLASS TYPE METHOD ARG...
d5334 4
a5337 87
\def\deftypemethod{%
  \deftypemethparsebody\Edeftypemethod\deftypemethodx\deftypemethodheader}
%
% #1 is the class name, #2 the data type, #3 the method name, #4 the args.
\def\deftypemethodheader#1#2#3#4{%
  \dosubind{fn}{\code{#3}}{\putwordon\ \code{#1}}% entry in function index
  \begingroup
    \defname{\defheaderxcond#2\relax$.$#3}{\putwordMethodon\ \code{#1}}%
    \deftypefunargs{#4}%
  \endgroup
}

% @@deftypeivar CLASS TYPE VARNAME
%
\def\deftypeivar{%
  \deftypemethparsebody\Edeftypeivar\deftypeivarx\deftypeivarheader}
%
% #1 is the class name, #2 the data type, #3 the variable name.
\def\deftypeivarheader#1#2#3{%
  \dosubind{vr}{\code{#3}}{\putwordof\ \code{#1}}% entry in variable index
  \begingroup
    \defname{\defheaderxcond#2\relax$.$#3}
            {\putwordInstanceVariableof\ \code{#1}}%
    \defvarargs{#3}%
  \endgroup
}

% @@defmethod == @@defop Method
%
\def\defmethod{\defmethparsebody\Edefmethod\defmethodx\defmethodheader}
%
% #1 is the class name, #2 the method name, #3 the args.
\def\defmethodheader#1#2#3{%
  \dosubind{fn}{\code{#2}}{\putwordon\ \code{#1}}% entry in function index
  \begingroup
    \defname{#2}{\putwordMethodon\ \code{#1}}%
    \defunargs{#3}%
  \endgroup
}

% @@defcv {Class Option} foo-class foo-flag

\def\defcv #1 {\def\defcvtype{#1}%
\defopvarparsebody\Edefcv\defcvx\defcvarheader\defcvtype}

\def\defcvarheader #1#2#3{%
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% variable index entry
  \begingroup
    \defname{#2}{\defcvtype\ \putwordof\ #1}%
    \defvarargs{#3}%
  \endgroup
}

% @@defivar CLASS VARNAME == @@defcv {Instance Variable} CLASS VARNAME
%
\def\defivar{\defvrparsebody\Edefivar\defivarx\defivarheader}
%
\def\defivarheader#1#2#3{%
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% entry in var index
  \begingroup
    \defname{#2}{\putwordInstanceVariableof\ #1}%
    \defvarargs{#3}%
  \endgroup
}

% @@defvar
% First, define the processing that is wanted for arguments of @@defvar.
% This is actually simple: just print them in roman.
% This must expand the args and terminate the paragraph they make up
\def\defvarargs #1{\normalparens #1%
  \defargscommonending
}

% @@defvr Counter foo-count

\def\defvr{\defvrparsebody\Edefvr\defvrx\defvrheader}

\def\defvrheader #1#2#3{\doind {vr}{\code{#2}}%
\begingroup\defname {#2}{#1}\defvarargs{#3}\endgroup}

% @@defvar == @@defvr Variable

\def\defvar{\defvarparsebody\Edefvar\defvarx\defvarheader}

\def\defvarheader #1#2{\doind {vr}{\code{#1}}% Make entry in var index
\begingroup\defname {#1}{\putwordDefvar}%
\defvarargs {#2}\endgroup %
d5340 2
a5341 1
% @@defopt == @@defvr {User Option}
d5343 8
a5350 1
\def\defopt{\defvarparsebody\Edefopt\defoptx\defoptheader}
d5352 2
a5353 3
\def\defoptheader #1#2{\doind {vr}{\code{#1}}% Make entry in var index
\begingroup\defname {#1}{\putwordDefopt}%
\defvarargs {#2}\endgroup %
d5356 1
a5356 1
% @@deftypevar int foobar
d5358 3
a5360 1
\def\deftypevar{\defvarparsebody\Edeftypevar\deftypevarx\deftypevarheader}
d5362 19
a5380 8
% #1 is the data type.  #2 is the name, perhaps followed by text that
% is actually part of the data type, which should not be put into the index.
\def\deftypevarheader #1#2{%
\dovarind#2 \relax% Make entry in variables index
\begingroup\defname {\defheaderxcond#1\relax$.$#2}{\putwordDeftypevar}%
  \defargscommonending
\endgroup}
\def\dovarind#1 #2\relax{\doind{vr}{\code{#1}}}
d5382 10
a5391 1
% @@deftypevr {Global Flag} int enable
d5393 9
a5401 1
\def\deftypevr{\defvrparsebody\Edeftypevr\deftypevrx\deftypevrheader}
d5403 12
a5414 39
\def\deftypevrheader #1#2#3{\dovarind#3 \relax%
\begingroup\defname {\defheaderxcond#2\relax$.$#3}{#1}
  \defargscommonending
\endgroup}

% Now define @@deftp
% Args are printed in bold, a slight difference from @@defvar.

\def\deftpargs #1{\bf \defvarargs{#1}}

% @@deftp Class window height width ...

\def\deftp{\deftpparsebody\Edeftp\deftpx\deftpheader}

\def\deftpheader #1#2#3{\doind {tp}{\code{#2}}%
\begingroup\defname {#2}{#1}\deftpargs{#3}\endgroup}

% These definitions are used if you use @@defunx (etc.)
% anywhere other than immediately after a @@defun or @@defunx.
% 
\def\defcvx#1 {\errmessage{@@defcvx in invalid context}}
\def\deffnx#1 {\errmessage{@@deffnx in invalid context}}
\def\defivarx#1 {\errmessage{@@defivarx in invalid context}}
\def\defmacx#1 {\errmessage{@@defmacx in invalid context}}
\def\defmethodx#1 {\errmessage{@@defmethodx in invalid context}}
\def\defoptx #1 {\errmessage{@@defoptx in invalid context}}
\def\defopx#1 {\errmessage{@@defopx in invalid context}}
\def\defspecx#1 {\errmessage{@@defspecx in invalid context}}
\def\deftpx#1 {\errmessage{@@deftpx in invalid context}}
\def\deftypefnx#1 {\errmessage{@@deftypefnx in invalid context}}
\def\deftypefunx#1 {\errmessage{@@deftypefunx in invalid context}}
\def\deftypeivarx#1 {\errmessage{@@deftypeivarx in invalid context}}
\def\deftypemethodx#1 {\errmessage{@@deftypemethodx in invalid context}}
\def\deftypeopx#1 {\errmessage{@@deftypeopx in invalid context}}
\def\deftypevarx#1 {\errmessage{@@deftypevarx in invalid context}}
\def\deftypevrx#1 {\errmessage{@@deftypevrx in invalid context}}
\def\defunx#1 {\errmessage{@@defunx in invalid context}}
\def\defvarx#1 {\errmessage{@@defvarx in invalid context}}
\def\defvrx#1 {\errmessage{@@defvrx in invalid context}}
d5423 25
a5447 13
 \newwrite\macscribble
 \def\scanmacro#1{%
   \begingroup \newlinechar`\^^M
   % Undo catcode changes of \startcontents and \doprintindex
   \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
   % Append \endinput to make sure that TeX does not see the ending newline.
   \toks0={#1\endinput}%
   \immediate\openout\macscribble=\jobname.tmp
   \immediate\write\macscribble{\the\toks0}%
   \immediate\closeout\macscribble
   \let\xeatspaces\eatspaces
   \input \jobname.tmp
   \endgroup
a5448 7
\else
\def\scanmacro#1{%
\begingroup \newlinechar`\^^M
% Undo catcode changes of \startcontents and \doprintindex
\catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
\let\xeatspaces\eatspaces\scantokens{#1\endinput}\endgroup}
\fi
d5457 1
a5457 1
% Thisdoes \let #1 = #2, except with \csnames.
d5554 1
a5554 2
\def\unmacro{\parsearg\dounmacro}
\def\dounmacro#1{%
d5571 1
a5571 1
% 
d5704 1
a5704 1
\def\alias{\begingroup\obeyspaces\parsearg\aliasxxx}
d5706 7
a5712 4
\def\aliasyyy #1=#2\relax{\ignoreactivespaces
\edef\next{\global\let\expandafter\noexpand\csname#1\endcsname=%
           \expandafter\noexpand\csname#2\endcsname}%
\expandafter\endgroup\next}
a5715 1
% @@xref etc.
d5727 4
a5730 4
% @@node's job is to define \lastnode.
\def\node{\ENVcheck\parsearg\nodezzz}
\def\nodezzz#1{\nodexxx [#1,]}
\def\nodexxx[#1,#2]{\gdef\lastnode{#1}}
d5732 1
a5732 1
\let\lastnode=\relax
d5734 7
a5740 19
% The sectioning commands (@@chapter, etc.) call these.
\def\donoderef{%
  \ifx\lastnode\relax\else
    \expandafter\expandafter\expandafter\setref{\lastnode}%
      {Ysectionnumberandtype}%
    \global\let\lastnode=\relax
  \fi
}
\def\unnumbnoderef{%
  \ifx\lastnode\relax\else
    \expandafter\expandafter\expandafter\setref{\lastnode}{Ynothing}%
    \global\let\lastnode=\relax
  \fi
}
\def\appendixnoderef{%
  \ifx\lastnode\relax\else
    \expandafter\expandafter\expandafter\setref{\lastnode}%
      {Yappendixletterandtype}%
    \global\let\lastnode=\relax
a5743 1

d5747 4
a5750 3
\gdef\savesf{\relax \ifhmode \savesfregister=\spacefactor \fi}
\gdef\restoresf{\relax \ifhmode \spacefactor=\savesfregister \fi}
\gdef\anchor#1{\savesf \setref{#1}{Ynothing}\restoresf \ignorespaces}
d5753 10
a5762 10
% anchor), namely NAME-title (the corresponding @@chapter/etc. name),
% NAME-pg (the page number), and NAME-snt (section number and type).
% Called from \foonoderef.
% 
% We have to set \indexdummies so commands such as @@code in a section
% title aren't expanded.  It would be nicer not to expand the titles in
% the first place, but there's so many layers that that is hard to do.
%
% Likewise, use \turnoffactive so that punctuation chars such as underscore
% and backslash work in node names.
d5764 1
a5764 2
\def\setref#1#2{{%
  \atdummies
d5766 16
a5781 6
  %
  \turnoffactive
  \dosetq{#1-title}{Ytitle}%
  \dosetq{#1-pg}{Ypagenumber}%
  \dosetq{#1-snt}{#2}%
}}
d5794 3
a5796 3
  \def\printednodename{\ignorespaces #3}%
  \setbox1=\hbox{\printedmanual}%
  \setbox0=\hbox{\printednodename}%
d5801 1
a5801 1
      \def\printednodename{\ignorespaces #1}%
d5807 1
a5807 1
        \def\printednodename{\ignorespaces #1}%
d5811 1
a5811 1
          \def\printednodename{\refx{#1-title}{}}%
d5814 1
a5814 1
          \def\printednodename{\ignorespaces #1}%
d5820 1
a5820 6
  % If we use \unhbox0 and \unhbox1 to print the node names, TeX does not
  % insert empty discretionaries after hyphens, which means that it will
  % not find a line break at a hyphen in a node names.  Since some manuals
  % are best written with fairly long node names, containing hyphens, this
  % is a loss.  Therefore, we give the text of the node name again, so it
  % is as if TeX is seeing it for the first time.
d5830 1
a5830 1
         goto name{#1}%
d5836 26
a5861 2
  \ifdim \wd1 > 0pt
    \putwordsection{} ``\printednodename'' \putwordin{} \cite{\printedmanual}%
d5863 31
a5893 15
    % _ (for example) has to be the character _ for the purposes of the
    % control sequence corresponding to the node, but it has to expand
    % into the usual \leavevmode...\vrule stuff for purposes of
    % printing. So we \turnoffactive for the \refx-snt, back on for the
    % printing, back off for the \refx-pg.
    {\turnoffactive \otherbackslash
     % Only output a following space if the -snt ref is nonempty; for
     % @@unnumbered and @@anchor, it won't be.
     \setbox2 = \hbox{\ignorespaces \refx{#1-snt}{}}%
     \ifdim \wd2 > 0pt \refx{#1-snt}\space\fi
    }%
    % [mynode],
    [\printednodename],\space
    % page 3
    \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
d5898 4
a5901 1
% \dosetq is called from \setref to do the actual \write (\iflinks).
d5903 1
a5903 6
\def\dosetq#1#2{%
  {\let\folio=0%
   \edef\next{\write\auxfile{\internalsetq{#1}{#2}}}%
   \iflinks \next \fi
  }%
}
d5905 2
a5906 8
% \internalsetq{foo}{page} expands into
%   CHARACTERS @@xrdef{foo}{...expansion of \page...}
\def\internalsetq#1#2{@@xrdef{#1}{\csname #2\endcsname}}

% Things to be expanded by \internalsetq.
% 
\def\Ypagenumber{\folio}
\def\Ytitle{\thissection}
d5908 2
a5909 1
\def\Ysectionnumberandtype{%
d5920 1
a5920 2

\def\Yappendixletterandtype{%
a5932 9
% Use TeX 3.0's \inputlineno to get the line number, for better error
% messages, but if we're using an old version of TeX, don't do anything.
%
\ifx\inputlineno\thisisundefined
  \let\linenumber = \empty % Pre-3.0.
\else
  \def\linenumber{\the\inputlineno:\space}
\fi

d5941 1
a5941 1
      \csname X#1\endcsname
d5963 26
a5988 3
% This is the macro invoked by entries in the aux file.
%
\def\xrdef#1{\expandafter\gdef\csname X#1\endcsname}
d5991 10
d6059 10
a6068 1
  % Make the characters 128-255 be printing characters
d6078 1
a6078 8
  % Turn off \ as an escape so we do not lose on
  % entries which were dumped with control sequences in their names.
  % For example, @@xrdef{$\leq $-fun}{page ...} made by @@defun ^^
  % Reference to such entries still does not work the way one would wish,
  % but at least they do not bomb out when the aux file is read in.
  \catcode`\\=\other
  %
  % @@ is our escape character in .aux files.
d6083 1
a6083 9
  \openin 1 \jobname.aux
  \ifeof 1 \else
    \closein 1
    \input \jobname.aux
    \global\havexrefstrue
    \global\warnedobstrue
  \fi
  % Open the new aux file.  TeX will close it automatically at exit.
  \openout\auxfile=\jobname.aux
d6087 2
a6088 1
% Footnotes.
a6101 2
\let\ptexfootnote=\footnote

d6106 2
d6114 1
a6114 1
  \ifhmode\edef\@@sf{\spacefactor\the\spacefactor}\/\fi
d6125 2
a6126 2
% Oh yes, they do; otherwise, @@ifset and anything else that uses
% \parseargline fail inside footnotes because the tokens are fixed when
a6128 5
% The start of the footnote looks usually like this:
\gdef\startfootins{\insert\footins\bgroup}
%
% ... but this macro is redefined inside @@multitable.
%
d6130 1
a6130 1
  \startfootins
d6166 21
a6186 5
% @@| inserts a changebar to the left of the current line.  It should
% surround any changed text.  This approach does *not* work if the
% change spans more than two lines of output.  To handle that, we would
% have adopt a much more difficult approach (putting marks into the main
% vertical list for the beginning and end of each change).
d6188 31
a6218 21
\def\|{%
  % \vadjust can only be used in horizontal mode.
  \leavevmode
  %
  % Append this vertical mode material after the current line in the output.
  \vadjust{%
    % We want to insert a rule with the height and depth of the current
    % leading; that is exactly what \strutbox is supposed to record.
    \vskip-\baselineskip
    %
    % \vadjust-items are inserted at the left edge of the type.  So
    % the \llap here moves out into the left-hand margin.
    \llap{%
      %
      % For a thicker or thinner bar, change the `1pt'.
      \vrule height\baselineskip width1pt
      %
      % This is the space between the bar and the text.
      \hskip 12pt
    }%
  }%
d6221 5
a6225 5
% For a final copy, take out the rectangles
% that mark overfull boxes (in case you have decided
% that the text looks ok even though it passes the margin).
%
\def\finalout{\overfullrule=0pt}
a6234 1
  \closein 1
d6240 1
d6276 1
a6276 1
    % above and below. 
d6296 243
d6547 1
a6547 2
\def\documentlanguage{\parsearg\dodocumentlanguage}
\def\dodocumentlanguage#1{%
d6549 9
a6557 10
  % Read the file if it exists.
  \openin 1 txi-#1.tex
  \ifeof1
    \errhelp = \nolanghelp
    \errmessage{Cannot read language file txi-#1.tex}%
    \let\temp = \relax
  \else
    \def\temp{\input txi-#1.tex }%
  \fi
  \temp
d6605 1
a6605 1
% 
d6673 1
a6673 1
  % Double-side printing via postscript on Laserjet 4050 
d6714 1
a6714 1
% A specific text layout, 24x15cm overall, intended for A4 paper.  
d6740 1
a6740 2
\def\pagesizes{\parsearg\pagesizesxxx}
\def\pagesizesxxx#1{\pagesizesyyy #1,,\finish}
d6787 2
a6788 2
% This macro is used to make a character print one way in ttfont
% where it can probably just be output, and another way in other fonts,
a6835 7
% Set up an active definition for =, but don't enable it most of the time.
{\catcode`\==\active
\global\def={{\tt \char 61}}}

\catcode`+=\active
\catcode`\_=\active

d6844 1
a6844 1
% \rawbackslashxx outputs one backslash character in current font,
d6846 2
a6847 1
\global\chardef\rawbackslashxx=`\\
d6849 1
a6849 1
% \rawbackslash defines an active \ to do \rawbackslashxx.
d6853 1
a6853 1
 @@gdef@@rawbackslash{@@let\=@@rawbackslashxx}
d6861 1
a6861 1
\def\normalbackslash{{\tt\rawbackslashxx}}
d6878 1
d6884 1
a6884 1
% 
d6913 1
a6913 1
% These look ok in all fonts, so just make them not special.  
a6917 4
@@c Set initial fonts.
@@textfonts
@@rm

d6926 6
@


1.6.42.1
log
@Merge to 2.15 branch.
@
text
@d6 1
a6 1
\def\texinfoversion{2004-02-19.09}
d9 1
a9 2
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
% Foundation, Inc.
d26 4
a29 4
% As a special exception, when this file is read by TeX when processing
% a Texinfo source document, you may use the result without
% restriction.  (This has been our intent since Texinfo was invented.)
% 
d32 2
a33 1
%   http://www.gnu.org/software/texinfo/ (the Texinfo home page), or
d35 6
a40 2
%     (and all CTAN mirrors, see http://www.ctan.org).
% The texinfo.tex in any given distribution could well be out
d42 1
a42 1
%
d58 1
a58 1
%
a61 3
% 
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.

d74 1
a74 1
% We never want plain's \outer definition of \+ in Texinfo.
d78 1
a78 1
% Save some plain tex macros whose names we will redefine.
a87 1
\let\ptexfootnote=\footnote
a90 3
\let\ptexindent=\indent
\let\ptexnoindent=\noindent
\let\ptexinsert=\insert
a94 1
\let\ptexslash=\/
a101 9
% Use TeX 3.0's \inputlineno to get the line number, for better error
% messages, but if we're using an old version of TeX, don't do anything.
%
\ifx\inputlineno\thisisundefined
  \let\linenumber = \empty % Pre-3.0.
\else
  \def\linenumber{l.\the\inputlineno:\space}
\fi

d140 1
d142 1
d149 1
d153 1
a155 4
\chardef\spaceChar = `\ %
\chardef\spacecat = 10
\def\spaceisspace{\catcode\spaceChar=\spacecat}

d160 4
a163 2
% The following is used inside several \edef's.
\def\makecsname#1{\expandafter\noexpand\csname#1\endcsname}
d166 4
a169 8
\hyphenation{
  Flor-i-da Ghost-script Ghost-view Mac-OS ap-pen-dix bit-map bit-maps
  data-base data-bases eshell fall-ing half-way long-est man-u-script
  man-u-scripts mini-buf-fer mini-buf-fers over-view par-a-digm
  par-a-digms rec-tan-gu-lar ro-bot-ics se-vere-ly set-up spa-ces
  stand-alone strong-est time-stamp time-stamps which-ever white-space
  wide-spread wrap-around
}
a175 35
% For a final copy, take out the rectangles
% that mark overfull boxes (in case you have decided
% that the text looks ok even though it passes the margin).
%
\def\finalout{\overfullrule=0pt}

% @@| inserts a changebar to the left of the current line.  It should
% surround any changed text.  This approach does *not* work if the
% change spans more than two lines of output.  To handle that, we would
% have adopt a much more difficult approach (putting marks into the main
% vertical list for the beginning and end of each change).
%
\def\|{%
  % \vadjust can only be used in horizontal mode.
  \leavevmode
  %
  % Append this vertical mode material after the current line in the output.
  \vadjust{%
    % We want to insert a rule with the height and depth of the current
    % leading; that is exactly what \strutbox is supposed to record.
    \vskip-\baselineskip
    %
    % \vadjust-items are inserted at the left edge of the type.  So
    % the \llap here moves out into the left-hand margin.
    \llap{%
      %
      % For a thicker or thinner bar, change the `1pt'.
      \vrule height\baselineskip width1pt
      %
      % This is the space between the bar and the text.
      \hskip 12pt
    }%
  }%
}

d200 1
a200 1
  \errorcontextlines16
d205 1
a205 1
%
d258 1
a258 1
      \ifpdfmakepagedest \pdfdest name{\the\pageno} xyz\fi
d339 2
a340 3
\def\parsearg{\parseargusing{}}
\def\parseargusing#1#2{%
  \def\next{#2}%
d343 12
a354 3
    \spaceisspace
    #1%
    \parseargline\empty% Insert the \empty token, see \finishparsearg below.
d357 4
d364 8
a371 1
    \argremovecomment #1\comment\ArgTerm%
d375 6
a380 3
% First remove any @@comment, then any @@c comment.
\def\argremovecomment#1\comment#2\ArgTerm{\argremovec #1\c\ArgTerm}
\def\argremovec#1\c#2\ArgTerm{\argcheckspaces#1\^^M\ArgTerm}
d382 1
a382 3
% Each occurence of `\^^M' or `<space>\^^M' is replaced by a single space.
%
% \argremovec might leave us with trailing space, e.g.,
d384 11
a394 2
% This space token undergoes the same procedure and is eventually removed
% by \finishparsearg.
d396 6
a401 13
\def\argcheckspaces#1\^^M{\argcheckspacesX#1\^^M \^^M}
\def\argcheckspacesX#1 \^^M{\argcheckspacesY#1\^^M}
\def\argcheckspacesY#1\^^M#2\^^M#3\ArgTerm{%
  \def\temp{#3}%
  \ifx\temp\empty
    % We cannot use \next here, as it holds the macro to run;
    % thus we reuse \temp.
    \let\temp\finishparsearg
  \else
    \let\temp\argcheckspaces
  \fi
  % Put the space token in:
  \temp#1 #3\ArgTerm
d404 1
a404 7
% If a _delimited_ argument is enclosed in braces, they get stripped; so
% to get _exactly_ the rest of the line, we had to prevent such situation.
% We prepended an \empty token at the very beginning and we expand it now,
% just before passing the control to \next.
% (Similarily, we have to think about #3 of \argcheckspacesY above: it is
% either the null string, or it ends with \^^M---thus there is no danger
% that a pair of braces would be stripped.
d406 4
a409 3
% But first, we have to remove the trailing space token.
%
\def\finishparsearg#1 \ArgTerm{\expandafter\next\expandafter{#1}}
a410 7
% \parseargdef\foo{...}
%	is roughly equivalent to
% \def\foo{\parsearg\Xfoo}
% \def\Xfoo#1{...}
%
% Actually, I use \csname\string\foo\endcsname, ie. \\foo, as it is my
% favourite TeX trick.  --kasal, 16nov03
d412 1
a412 7
\def\parseargdef#1{%
  \expandafter \doparseargdef \csname\string#1\endcsname #1%
}
\def\doparseargdef#1#2{%
  \def#2{\parsearg#1}%
  \def#1##1%
}
d414 6
a419 4
% Several utility definitions with active space:
{
  \obeyspaces
  \gdef\obeyedspace{ }
d421 2
a422 12
  % Make each space character in the input produce a normal interword
  % space in the output.  Don't allow a line break at this space, as this
  % is used only in environments like @@example, where each line of input
  % should produce a line of output anyway.
  %
  \gdef\sepspaces{\obeyspaces\let =\tie}

  % If an index command is used in an @@example environment, any spaces
  % therein should become regular spaces in the raw index file, not the
  % expansion of \tie (\leavevmode \penalty \@@M \ ).
  \gdef\unsepspaces{\let =\space}
}
d424 1
d426 4
a429 1
\def\flushcr{\ifx\par\lisppar \def\next##1{}\else \let\next=\relax \fi \next}
d431 15
a445 30
% Define the framework for environments in texinfo.tex.  It's used like this:
% 
%   \envdef\foo{...}
%   \def\Efoo{...}
%   
% It's the responsibility of \envdef to insert \begingroup before the
% actual body; @@end closes the group after calling \Efoo.  \envdef also
% defines \thisenv, so the current environment is known; @@end checks
% whether the environment name matches.  The \checkenv macro can also be
% used to check whether the current environment is the one expected.
% 
% Non-false conditionals (@@iftex, @@ifset) don't fit into this, so they
% are not treated as enviroments; they don't open a group.  (The
% implementation of @@end takes care not to call \endgroup in this
% special case.)


% At runtime, environments start with this:
\def\startenvironment#1{\begingroup\def\thisenv{#1}}
% initialize
\let\thisenv\empty

% ... but they get defined via ``\envdef\foo{...}'':
\long\def\envdef#1#2{\def#1{\startenvironment#1#2}}
\def\envparseargdef#1#2{\parseargdef#1{\startenvironment#1#2}}

% Check whether we're in the right environment:
\def\checkenv#1{%
  \def\temp{#1}%
  \ifx\thisenv\temp
d447 2
a448 1
    \badenverr
d452 3
a454 2
% Evironment mismatch, #1 expected:
\def\badenverr{%
d456 1
a456 9
  \errmessage{This command can appear only \inenvironment\temp,
    not \inenvironment\thisenv}%
}
\def\inenvironment#1{%
  \ifx#1\empty
    out of any environment%
  \else
    in environment \expandafter\string#1%
  \fi
d459 1
a459 2
% @@end foo executes the definition of \Efoo.
% But first, it executes a specialized version of \checkenv
d461 2
a462 8
\parseargdef\end{%
  \if 1\csname iscond.#1\endcsname
  \else
    % The general wording of \badenverr may not be ideal, but... --kasal, 06nov03
    \expandafter\checkenv\csname#1\endcsname
    \csname E#1\endcsname
    \endgroup
  \fi
a464 2
\newhelp\EMsimple{Press RETURN to continue.}

a495 3
% @@comma{} to avoid , parsing problems.
\let\comma = ,

d505 1
a505 1
% Other special characters: @@questiondown @@exclamdown @@ordf @@ordm
a508 2
\def\ordf{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{a}}}
\def\ordm{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{o}}}
a520 19
% The \TeX{} logo, as in plain, but resetting the spacing so that a
% period following counts as ending a sentence.  (Idea found in latex.)
% 
\edef\TeX{\TeX \spacefactor=3000 }

% @@LaTeX{} logo.  Not quite the same results as the definition in
% latex.ltx, since we use a different font for the raised A; it's most
% convenient for us to use an explicitly smaller font, rather than using
% the \scriptstyle font (since we don't reset \scriptstyle and
% \scriptscriptstyle).
% 
\def\LaTeX{%
  L\kern-.36em
  {\setbox0=\hbox{T}%
   \vbox to \ht0{\hbox{\selectfonts\lllsize A}\vss}}%
  \kern-.15em
  \TeX
}

a538 3
% @@/ allows a line break.
\let\/=\allowbreak

d567 1
a567 1
%
d571 2
a572 2
\envdef\group{%
  \ifnum\catcode`\^^M=\active \else
d576 22
a597 1
  \startsavinginserts
d600 24
a632 26
% The \vtop produces a box with normal height and large depth; thus, TeX puts
% \baselineskip glue before it, and (when the next line of text is done)
% \lineskip glue after it.  Thus, space below is not quite equal to space
% above.  But it's pretty close.
\def\Egroup{%
    % To get correct interline space between the last line of the group
    % and the first line afterwards, we have to propagate \prevdepth.
    \endgraf % Not \par, as it may have been set to \lisppar.
    \global\dimen1 = \prevdepth
  \egroup           % End the \vtop.
  % \dimen0 is the vertical size of the group's box.
  \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
  % \dimen2 is how much space is left on the page (more or less).
  \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
  % if the group doesn't fit on the current page, and it's a big big
  % group, force a page break.
  \ifdim \dimen0 > \dimen2
    \ifdim \pagetotal < \vfilllimit\pageheight
      \page
    \fi
  \fi
  \box\groupbox
  \prevdepth = \dimen1
  \checkinserts
}
%
d645 2
d648 1
a648 1
%\parseargdef\need{\par %
d656 1
a656 1
\parseargdef\need{%
d695 1
a695 1
% @@br   forces paragraph break (and is undocumented).
d699 27
a725 1
% @@page forces the start of a new page.
d737 2
a738 1
\parseargdef\exdent{\hfil\break\hbox{\kern -\exdentamount{\rm#1}}\hfil\break}
d741 3
a743 2
\parseargdef\nofillexdent{{\advance \leftskip by -\exdentamount
  \leftline{\hskip\leftskip{\rm#1}}}}
d774 1
a774 1
%
d777 1
a777 1
  \setbox0 = \hbox{\ignorespaces #2}%
d795 2
a796 13
%
\def\include{\parseargusing\filenamecatcodes\includezzz}
\def\includezzz#1{%
  \pushthisfilestack
  \def\thisfile{#1}%
  {%
    \makevalueexpandable
    \def\temp{\input #1 }%
    \expandafter
  }\temp
  \popthisfilestack
}
\def\filenamecatcodes{%
d805 8
a812 16
  \catcode`-=\other
}

\def\pushthisfilestack{%
  \expandafter\pushthisfilestackX\popthisfilestack\StackTerm
}
\def\pushthisfilestackX{%
  \expandafter\pushthisfilestackY\thisfile\StackTerm
}
\def\pushthisfilestackY #1\StackTerm #2\StackTerm {%
  \gdef\popthisfilestack{\gdef\thisfile{#1}\gdef\popthisfilestack{#2}}%
}

\def\popthisfilestack{\errthisfilestackempty}
\def\errthisfilestackempty{\errmessage{Internal error:
  the stack of filenames is empty.}}
d819 8
a826 18
\parseargdef\center{%
  \ifhmode
    \let\next\centerH
  \else
    \let\next\centerV
  \fi
  \next{\hfil \ignorespaces#1\unskip \hfil}%
}
\def\centerH#1{%
  {%
    \hfil\break
    \advance\hsize by -\leftskip
    \advance\hsize by -\rightskip
    \line{#1}%
    \break
  }%
}
\def\centerV#1{\line{\kern\leftskip #1\kern\rightskip}}
d830 2
a831 1
\parseargdef\sp{\vskip #1\baselineskip}
d846 2
a847 3
% NCHARS can also be the word `asis' or `none'.
% We cannot feasibly implement @@paragraphindent asis, though.
%
d851 2
a852 1
\parseargdef\paragraphindent{%
d869 2
a870 1
\parseargdef\exampleindent{%
a881 53
% @@firstparagraphindent WORD
% If WORD is `none', then suppress indentation of the first paragraph
% after a section heading.  If WORD is `insert', then do indent at such
% paragraphs.
%
% The paragraph indentation is suppressed or not by calling
% \suppressfirstparagraphindent, which the sectioning commands do.
% We switch the definition of this back and forth according to WORD.
% By default, we suppress indentation.
%
\def\suppressfirstparagraphindent{\dosuppressfirstparagraphindent}
\def\insertword{insert}
%
\parseargdef\firstparagraphindent{%
  \def\temp{#1}%
  \ifx\temp\noneword
    \let\suppressfirstparagraphindent = \dosuppressfirstparagraphindent
  \else\ifx\temp\insertword
    \let\suppressfirstparagraphindent = \relax
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@firstparagraphindent option `\temp'}%
  \fi\fi
}

% Here is how we actually suppress indentation.  Redefine \everypar to
% \kern backwards by \parindent, and then reset itself to empty.
%
% We also make \indent itself not actually do anything until the next
% paragraph.
%
\gdef\dosuppressfirstparagraphindent{%
  \gdef\indent{%
    \restorefirstparagraphindent
    \indent
  }%
  \gdef\noindent{%
    \restorefirstparagraphindent
    \noindent
  }%
  \global\everypar = {%
    \kern -\parindent
    \restorefirstparagraphindent
  }%
}

\gdef\restorefirstparagraphindent{%
  \global \let \indent = \ptexindent
  \global \let \noindent = \ptexnoindent
  \global \everypar = {}%
}


d887 5
d895 9
a903 9
% _ active, and distinguish by seeing if the current family is \slfam,
% which is what @@var uses.
{
  \catcode\underChar = \active
  \gdef\mathunderscore{%
    \catcode\underChar=\active
    \def_{\ifnum\fam=\slfam \_\else\sb\fi}%
  }
}
d908 1
a908 1
%
d914 1
a914 1
  \mathunderscore
d917 2
a918 3
  $\finishmath
}
\def\finishmath#1{#1$\endgroup}  % Close the group opened by \tex.
d921 3
a923 3
% We have to reset their definitions in case the @@math was an argument
% to a command which sets the catcodes (such as @@item or @@section).
%
d938 2
a939 27
\def\bullet{$\ptexbullet$}
\def\minus{$-$}

% @@dots{} outputs an ellipsis using the current font.
% We do .5em per period so that it has the same spacing in a typewriter
% font as three actual period characters.
%
\def\dots{%
  \leavevmode
  \hbox to 1.5em{%
    \hskip 0pt plus 0.25fil
    .\hfil.\hfil.%
    \hskip 0pt plus 0.5fil
  }%
}

% @@enddots{} is an end-of-sentence ellipsis.
%
\def\enddots{%
  \dots
  \spacefactor=3000
}

% @@comma{} is so commas can be inserted into text without messing up
% Texinfo's parsing.
% 
\let\comma = ,
a954 1
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
d956 1
a956 3
     \tryauxfile
     % Open the new aux file.  TeX will close it automatically at exit.
     \immediate\openout\auxfile=\jobname.aux
d959 2
a960 1
   \let\setfilename=\comment % Ignore extra @@setfilename cmds.
d964 1
d966 3
a968 2
   \ifeof 1 \else \input texinfo.cnf \fi
   \closein 1
a1014 1
  \pdfcatalog{/PageMode /UseOutlines}%
d1035 1
a1035 7
  \def\pdfmkdest#1{{%
    % We have to set dummies so commands such as @@code in a section title
    % aren't expanded.
    \atdummies
    \normalturnoffactive
    \pdfdest name{#1} xyz%
  }}
d1044 1
a1044 1
    \advance\tempnum by 1
d1046 5
a1050 20
  %
  % #1 is the section text.  #2 is the pdf expression for the number
  % of subentries (or empty, for subsubsections).  #3 is the node
  % text, which might be empty if this toc entry had no
  % corresponding node.  #4 is the page number.
  % 
  \def\dopdfoutline#1#2#3#4{%
    % Generate a link to the node text if that exists; else, use the
    % page number.  We could generate a destination for the section
    % text in the case where a section has no node, but it doesn't
    % seem worthwhile, since most documents are normally structured.
    \def\pdfoutlinedest{#3}%
    \ifx\pdfoutlinedest\empty \def\pdfoutlinedest{#4}\fi
    %
    \pdfoutline goto name{\pdfmkpgn{\pdfoutlinedest}}#2{#1}%
  }
  %
  \def\pdfmakeoutlines{%
    \begingroup
      % Thanh's hack / proper braces in bookmarks
d1054 9
a1062 32
      % Read toc silently, to get counts of subentries for \pdfoutline.
      \def\numchapentry##1##2##3##4{%
	\def\thischapnum{##2}%
	\let\thissecnum\empty
	\let\thissubsecnum\empty
      }%
      \def\numsecentry##1##2##3##4{%
	\advancenumber{chap\thischapnum}%
	\def\thissecnum{##2}%
	\let\thissubsecnum\empty
      }%
      \def\numsubsecentry##1##2##3##4{%
	\advancenumber{sec\thissecnum}%
	\def\thissubsecnum{##2}%
      }%
      \def\numsubsubsecentry##1##2##3##4{%
	\advancenumber{subsec\thissubsecnum}%
      }%
      \let\thischapnum\empty
      \let\thissecnum\empty
      \let\thissubsecnum\empty
      %
      % use \def rather than \let here because we redefine \chapentry et
      % al. a second time, below.
      \def\appentry{\numchapentry}%
      \def\appsecentry{\numsecentry}%
      \def\appsubsecentry{\numsubsecentry}%
      \def\appsubsubsecentry{\numsubsubsecentry}%
      \def\unnchapentry{\numchapentry}%
      \def\unnsecentry{\numsecentry}%
      \def\unnsubsecentry{\numsubsecentry}%
      \def\unnsubsubsecentry{\numsubsubsecentry}%
d1064 13
d1078 1
a1078 3
      % Read toc second time, this time actually producing the outlines.
      % The `-' means take the \expnumber as the absolute number of
      % subentries, which we calculated on our first read of the .toc above.
a1079 19
      % We use the node names as the destinations.
      \def\numchapentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{chap##2}}{##3}{##4}}%
      \def\numsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{sec##2}}{##3}{##4}}%
      \def\numsubsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{subsec##2}}{##3}{##4}}%
      \def\numsubsubsecentry##1##2##3##4{% count is always zero
        \dopdfoutline{##1}{}{##3}{##4}}%
      %
      % PDF outlines are displayed using system fonts, instead of
      % document fonts.  Therefore we cannot use special characters,
      % since the encoding is unknown.  For example, the eogonek from
      % Latin 2 (0xea) gets translated to a | character.  Info from
      % Staszek Wawrykiewicz, 19 Jan 2004 04:09:24 +0100.
      % 
      % xx to do this right, we have to translate 8-bit characters to
      % their "best" equivalent, based on the @@documentencoding.  Right
      % now, I guess we'll just let the pdf reader have its way.
d1081 1
d1084 2
a1085 3
    \endgroup
  }
  %
d1094 1
a1094 1
      \startlink attr{/Border [0 0 0]}
d1116 1
d1134 1
a1134 1
      \makevalueexpandable
d1138 1
d1145 1
a1145 1
    \expandafter\poptoks\the\toksA|ENDTOKS|\relax
d1149 1
a1149 1
    \else\ifx\first7\adn7 \else\ifx\first8\adn8 \else\ifx\first9\adn9
d1169 1
a1169 19

% Change the current font style to #1, remembering it in \curfontstyle.
% For now, we do not accumulate font styles: @@b{@@i{foo}} prints foo in
% italics, not bold italics.
% 
\def\setfontstyle#1{%
  \def\curfontstyle{#1}% not as a control sequence, because we are \edef'd.
  \csname ten#1\endcsname  % change the current font
}

% Select #1 fonts with the current style.
% 
\def\selectfonts#1{\csname #1fonts\endcsname \csname\curfontstyle\endcsname}

\def\rm{\fam=0 \setfontstyle{rm}}
\def\it{\fam=\itfam \setfontstyle{it}}
\def\sl{\fam=\slfam \setfontstyle{sl}}
\def\bf{\fam=\bffam \setfontstyle{bf}}
\def\tt{\fam=\ttfam \setfontstyle{tt}}
d1172 1
a1172 1
% So we set up a \sf.
d1174 1
a1174 1
\def\sf{\fam=\sffam \setfontstyle{sf}}
d1177 2
a1178 2
% We don't need math for this font style.
\def\ttsl{\setfontstyle{ttsl}}
a1228 1
% Text fonts (11.2pt, magstep1).
d1240 4
d1253 2
a1254 2
% A few fonts for @@defun names and args.
\setfont\defbf\bfshape{10}{\magstep1}
d1256 1
a1256 2
\setfont\defttsl\ttslshape{10}{\magstep1}
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \let\tenttsl=\defttsl \bf}
d1282 1
a1282 1
% Fonts for title page (20.4pt):
d1328 1
a1328 1
\setfont\ssecsc\scbshape{10}{1315}
d1331 2
a1332 12

% Reduced fonts for @@acro in text (10pt).
\setfont\reducedrm\rmshape{10}{1000}
\setfont\reducedtt\ttshape{10}{1000}
\setfont\reducedbf\bfshape{10}{1000}
\setfont\reducedit\itshape{10}{1000}
\setfont\reducedsl\slshape{10}{1000}
\setfont\reducedsf\sfshape{10}{1000}
\setfont\reducedsc\scshape{10}{1000}
\setfont\reducedttsl\ttslshape{10}{1000}
\font\reducedi=cmmi10
\font\reducedsy=cmsy10
d1347 5
a1351 10
% of just \STYLE.  We do this because \STYLE needs to also set the
% current \fam for math mode.  Our \STYLE (e.g., \rm) commands hardwire
% \tenSTYLE to set the current font.
% 
% Each font-changing command also sets the names \lsize (one size lower)
% and \lllsize (three sizes lower).  These relative commands are used in
% the LaTeX logo and acronyms.
% 
% This all needs generalizing, badly.
% 
d1355 1
a1355 3
  \let\tensf=\textsf \let\teni=\texti \let\tensy=\textsy
  \let\tenttsl=\textttsl
  \def\lsize{reduced}\def\lllsize{smaller}%
a1361 1
  \def\lsize{chap}\def\lllsize{subsec}%
a1367 1
  \def\lsize{sec}\def\lllsize{text}%
d1372 1
a1372 3
  \let\tensf=\secsf \let\teni=\seci \let\tensy=\secsy
  \let\tenttsl=\secttsl
  \def\lsize{subsec}\def\lllsize{reduced}%
d1377 1
a1377 3
  \let\tensf=\ssecsf \let\teni=\sseci \let\tensy=\ssecsy
  \let\tenttsl=\ssecttsl
  \def\lsize{text}\def\lllsize{small}%
d1379 1
a1379 8
\let\subsubsecfonts = \subsecfonts
\def\reducedfonts{%
  \let\tenrm=\reducedrm \let\tenit=\reducedit \let\tensl=\reducedsl
  \let\tenbf=\reducedbf \let\tentt=\reducedtt \let\reducedcaps=\reducedsc
  \let\tensf=\reducedsf \let\teni=\reducedi \let\tensy=\reducedsy
  \let\tenttsl=\reducedttsl
  \def\lsize{small}\def\lllsize{smaller}%
  \resetmathfonts \setleading{10.5pt}}
a1384 1
  \def\lsize{smaller}\def\lllsize{smaller}%
a1390 1
  \def\lsize{smaller}\def\lllsize{smaller}%
d1399 1
a1399 1
% If we use \scriptfonts (8pt), then we can fit this many characters:
d1403 1
a1403 1
%
d1406 3
a1408 2
%
% I wish the USA used A4 paper.
d1414 1
a1414 1
\textfonts \rm
d1425 1
a1425 1
\setfont\shortcontbf\bfshape{10}{\magstep1}  % no cmb12
d1434 1
a1434 2
\def\smartitalicx{\ifx\next,\else\ifx\next-\else\ifx\next.\else
                    \ptexslash\fi\fi\fi}
a1437 8
% like \smartslanted except unconditionally uses \ttsl.
% @@var is set to this for defun arguments.
\def\ttslanted#1{{\ttsl #1}\futurelet\next\smartitalicx}

% like \smartslanted except unconditionally use \sl.  We never want
% ttsl for book titles, do we?
\def\cite#1{{\sl #1}\futurelet\next\smartitalicx}

d1442 1
d1457 1
a1457 1
%
d1469 1
d1510 1
a1510 1
% We *must* turn on hyphenation at `-' and `_' in @@code.
d1528 4
d1555 2
a1556 1
\parseargdef\kbdinputstyle{%
d1566 1
a1566 1
    \errmessage{Unknown @@kbdinputstyle option `\arg'}%
d1617 1
a1617 1
%
d1656 2
a1657 8
\def\acronym#1{\doacronym #1,,\finish}
\def\doacronym#1,#2,#3\finish{%
  {\selectfonts\lsize #1}%
  \def\temp{#2}%
  \ifx\temp\empty \else
    \space ({\unsepspaces \ignorespaces \temp \unskip})%
  \fi
}
d1659 1
a1659 2
% @@pounds{} is a sterling sign, which is in the CM italic font.
% 
a1661 10
% @@registeredsymbol - R in a circle.  The font for the R should really
% be smaller yet, but lllsize is the best we can do for now.
% Adapted from the plain.tex definition of \copyright.
%
\def\registeredsymbol{%
  $^{{\ooalign{\hfil\raise.07ex\hbox{\selectfonts\lllsize R}%
               \hfil\crcr\Orb}}%
    }$%
}

d1680 2
a1681 1
\parseargdef\shorttitlepage{\begingroup\hbox{}\vskip 1.5in \chaprm \centerline{#1}%
d1684 32
a1715 13
\envdef\titlepage{%
  % Open one extra group, as we want to close it in the middle of \Etitlepage.
  \begingroup
    \parindent=0pt \textfonts
    % Leave some space at the very top of the page.
    \vglue\titlepagetopglue
    % No rule at page bottom unless we print one at the top with @@title.
    \finishedtitlepagetrue
    %
    % Most title ``pages'' are actually two pages long, with space
    % at the top of the second.  We don't want the ragged left on the second.
    \let\oldpage = \page
    \def\page{%
d1717 1
a1717 1
	 \finishtitlepage
d1719 1
d1721 2
a1722 3
      \page
      \null
    }%
d1726 27
a1752 27
    \iffinishedtitlepage\else
	\finishtitlepage
    \fi
    % It is important to do the page break before ending the group,
    % because the headline and footline are only empty inside the group.
    % If we use the new definition of \page, we always get a blank page
    % after the title page, which we certainly don't want.
    \oldpage
  \endgroup
  %
  % Need this before the \...aftertitlepage checks so that if they are
  % in effect the toc pages will come out with page numbers.
  \HEADINGSon
  %
  % If they want short, they certainly want long too.
  \ifsetshortcontentsaftertitlepage
    \shortcontents
    \contents
    \global\let\shortcontents = \relax
    \global\let\contents = \relax
  \fi
  %
  \ifsetcontentsaftertitlepage
    \contents
    \global\let\contents = \relax
    \global\let\shortcontents = \relax
  \fi
d1756 3
a1758 19
  \vskip4pt \hrule height 2pt width \hsize
  \vskip\titlepagebottomglue
  \finishedtitlepagetrue
}

%%% Macros to be used within @@titlepage:

\let\subtitlerm=\tenrm
\def\subtitlefont{\subtitlerm \normalbaselineskip = 13pt \normalbaselines}

\def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
		\let\tt=\authortt}

\parseargdef\title{%
  \checkenv\titlepage
  \leftline{\titlefonts\rm #1}
  % print a rule at the page bottom also.
  \finishedtitlepagefalse
  \vskip4pt \hrule height 4pt width \hsize \vskip4pt
a1760 20
\parseargdef\subtitle{%
  \checkenv\titlepage
  {\subtitlefont \rightline{#1}}%
}

% @@author should come last, but may come many times.
% It can also be used inside @@quotation.
% 
\parseargdef\author{%
  \def\temp{\quotation}%
  \ifx\thisenv\temp
    \def\quotationauthor{#1}% printed in \Equotation.
  \else
    \checkenv\titlepage
    \ifseenauthor\else \vskip 0pt plus 1filll \seenauthortrue \fi
    {\authorfont \leftline{#1}}%
  \fi
}


d1770 1
a1770 1
% Now make TeX use those variables
d1784 9
d1794 2
a1795 3
\def\evenheading{\parsearg\evenheadingxxx}
\def\evenheadingxxx #1{\evenheadingyyy #1\|\|\|\|\finish}
\def\evenheadingyyy #1\|#2\|#3\|#4\finish{%
d1798 2
a1799 3
\def\oddheading{\parsearg\oddheadingxxx}
\def\oddheadingxxx #1{\oddheadingyyy #1\|\|\|\|\finish}
\def\oddheadingyyy #1\|#2\|#3\|#4\finish{%
d1802 1
a1802 1
\parseargdef\everyheading{\oddheadingxxx{#1}\evenheadingxxx{#1}}%
d1804 2
a1805 3
\def\evenfooting{\parsearg\evenfootingxxx}
\def\evenfootingxxx #1{\evenfootingyyy #1\|\|\|\|\finish}
\def\evenfootingyyy #1\|#2\|#3\|#4\finish{%
d1808 2
a1809 3
\def\oddfooting{\parsearg\oddfootingxxx}
\def\oddfootingxxx #1{\oddfootingyyy #1\|\|\|\|\finish}
\def\oddfootingyyy #1\|#2\|#3\|#4\finish{%
d1818 3
a1820 2
\parseargdef\everyfooting{\oddfootingxxx{#1}\evenfootingxxx{#1}}

d1834 1
a1834 1
\def\HEADINGSoff{%
d1843 1
a1843 1
\def\HEADINGSdouble{%
d1855 1
a1855 1
\def\HEADINGSsingle{%
d1902 2
a1903 1
\def\settitle{\parsearg{\gdef\thistitle}}
d1907 1
a1907 1
% Tables -- @@table, @@ftable, @@vtable, @@item(x).
d1919 1
a1919 1
% Note @@table, @@ftable, and @@vtable define @@item, @@itemx, etc., with
d1931 12
d1946 1
a1946 1
  \setbox0=\hbox{\itemindicate{#1}}%
d2000 9
a2008 2
\def\item{\errmessage{@@item while not in a list environment}}
\def\itemx{\errmessage{@@itemx while not in a list environment}}
d2011 50
a2060 22
\envdef\table{%
  \let\itemindex\gobble
  \tablex
}
\envdef\ftable{%
  \def\itemindex ##1{\doind {fn}{\code{##1}}}%
  \tablex
}
\envdef\vtable{%
  \def\itemindex ##1{\doind {vr}{\code{##1}}}%
  \tablex
}
\def\tablex#1{%
  \def\itemindicate{#1}%
  \parsearg\tabley
}
\def\tabley#1{%
  {%
    \makevalueexpandable
    \edef\temp{\noexpand\tablez #1\space\space\space}%
    \expandafter
  }\temp \endtablez
a2061 20
\def\tablez #1 #2 #3 #4\endtablez{%
  \aboveenvbreak
  \ifnum 0#1>0 \advance \leftskip by #1\mil \fi
  \ifnum 0#2>0 \tableindent=#2\mil \fi
  \ifnum 0#3>0 \advance \rightskip by #3\mil \fi
  \itemmax=\tableindent
  \advance \itemmax by -\itemmargin
  \advance \leftskip by \tableindent
  \exdentamount=\tableindent
  \parindent = 0pt
  \parskip = \smallskipamount
  \ifdim \parskip=0pt \parskip=2pt \fi
  \let\item = \internalBitem
  \let\itemx = \internalBitemx
}
\def\Etable{\endgraf\afterenvbreak}
\let\Eftable\Etable
\let\Evtable\Etable
\let\Eitemize\Etable
\let\Eenumerate\Etable
d2067 1
a2067 16
\envdef\itemize{\parsearg\doitemize}

\def\doitemize#1{%
  \aboveenvbreak
  \itemmax=\itemindent
  \advance\itemmax by -\itemmargin
  \advance\leftskip by \itemindent
  \exdentamount=\itemindent
  \parindent=0pt
  \parskip=\smallskipamount
  \ifdim\parskip=0pt \parskip=2pt \fi
  \def\itemcontents{#1}%
  % @@itemize with no arg is equivalent to @@itemize @@bullet.
  \ifx\itemcontents\empty\def\itemcontents{\bullet}\fi
  \let\item=\itemizeitem
}
d2069 17
a2085 20
% Definition of @@item while inside @@itemize and @@enumerate.
%
\def\itemizeitem{%
  \advance\itemno by 1  % for enumerations
  {\let\par=\endgraf \smallbreak}% reasonable place to break
  {%
   % If the document has an @@itemize directly after a section title, a
   % \nobreak will be last on the list, and \sectionheading will have
   % done a \vskip-\parskip.  In that case, we don't want to zero
   % parskip, or the item text will crash with the heading.  On the
   % other hand, when there is normal text preceding the item (as there
   % usually is), we do want to zero parskip, or there would be too much
   % space.  In that case, we won't have a \nobreak before.  At least
   % that's the theory.
   \ifnum\lastpenalty<10000 \parskip=0in \fi
   \noindent
   \hbox to 0pt{\hss \itemcontents \kern\itemmargin}%
   \vadjust{\penalty 1200}}% not good to break after first line of item.
  \flushcr
}
d2096 2
a2097 1
\envparseargdef\enumerate{\enumeratey #1  \endenumeratey}
d2099 2
d2171 1
a2171 1
% Call \doitemize, adding a period to the first argument and supplying the
d2177 1
a2177 1
  \doitemize{#1.}\flushcr
d2188 10
d2224 10
d2240 2
a2241 2
% @@item, @@tab do not need to be on their own lines, but it will not hurt
% if they are.
d2285 5
a2289 4
% #1 is the @@columnfraction, usually a decimal number like .5, but might
% be just 1.  We just use it, whatever it is.
% 
\def\pickupwholefraction#1 {%
d2291 1
a2291 1
  \expandafter\xdef\csname col\the\colcount\endcsname{#1\hsize}%
a2323 13
% multitable-only commands.
%
% @@headitem starts a heading row, which we typeset in bold.
% Assignments have to be global since we are inside the implicit group
% of an alignment entry.  Note that \everycr resets \everytab.
\def\headitem{\checkenv\multitable \crcr \global\everytab={\bf}\the\everytab}%
%
% A \tab used to include \hskip1sp.  But then the space in a template
% line is not enough.  That is bad.  So let's go back to just `&' until
% we encounter the problem it was intended to solve again.
%					--karl, nathan@@acm.org, 20apr99.
\def\tab{\checkenv\multitable &\the\everytab}%

d2326 2
a2327 3
\newtoks\everytab  % insert after every tab.
%
\envdef\multitable{%
d2329 7
a2335 5
  \startsavinginserts
  %
  % @@item within a multitable starts a normal row.
  \let\item\crcr
  %
d2343 4
a2346 13
  %
  \everycr = {%
    \noalign{%
      \global\everytab={}%
      \global\colcount=0 % Reset the column counter.
      % Check for saved footnotes, etc.
      \checkinserts
      % Keeps underfull box messages off when table breaks over pages.
      %\filbreak
	% Maybe so, but it also creates really weird page breaks when the
	% table breaks over pages. Wouldn't \vfil be better?  Wait until the
	% problem manifests itself, so it can be fixed for real --karl.
    }%
a2348 3
  \parsearg\domultitable
}
\def\domultitable#1{%
d2352 12
d2368 39
a2406 49
  \halign\bgroup &%
    \global\advance\colcount by 1
    \multistrut
    \vtop{%
      % Use the current \colcount to find the correct column width:
      \hsize=\expandafter\csname col\the\colcount\endcsname
      %
      % In order to keep entries from bumping into each other
      % we will add a \leftskip of \multitablecolspace to all columns after
      % the first one.
      %
      % If a template has been used, we will add \multitablecolspace
      % to the width of each template entry.
      %
      % If the user has set preamble in terms of percent of \hsize we will
      % use that dimension as the width of the column, and the \leftskip
      % will keep entries from bumping into each other.  Table will start at
      % left margin and final column will justify at right margin.
      %
      % Make sure we don't inherit \rightskip from the outer environment.
      \rightskip=0pt
      \ifnum\colcount=1
	% The first column will be indented with the surrounding text.
	\advance\hsize by\leftskip
      \else
	\ifsetpercent \else
	  % If user has not set preamble in terms of percent of \hsize
	  % we will advance \hsize by \multitablecolspace.
	  \advance\hsize by \multitablecolspace
	\fi
       % In either case we will make \leftskip=\multitablecolspace:
      \leftskip=\multitablecolspace
      \fi
      % Ignoring space at the beginning and end avoids an occasional spurious
      % blank line, when TeX decides to break the line at the space before the
      % box from the multistrut, so the strut ends up on a line by itself.
      % For example:
      % @@multitable @@columnfractions .11 .89
      % @@item @@code{#}
      % @@tab Legal holiday which is valid in major parts of the whole country.
      % Is automatically provided with highlighting sequences respectively
      % marking characters.
      \noindent\ignorespaces##\unskip\multistrut
    }\cr
}
\def\Emultitable{%
  \crcr
  \egroup % end the \halign
  \global\setpercentfalse
d2436 19
d2457 129
a2585 17

% @@iftex, @@ifnotdocbook, @@ifnothtml, @@ifnotinfo, @@ifnotplaintext,
% @@ifnotxml always succeed.  They currently do nothing; we don't
% attempt to check whether the conditionals are properly nested.  But we
% have to remember that they are conditionals, so that @@end doesn't
% attempt to close an environment group.
%
\def\makecond#1{%
  \expandafter\let\csname #1\endcsname = \relax
  \expandafter\let\csname iscond.#1\endcsname = 1
}
\makecond{iftex}
\makecond{ifnotdocbook}
\makecond{ifnothtml}
\makecond{ifnotinfo}
\makecond{ifnotplaintext}
\makecond{ifnotxml}
d2590 1
a2591 1
\def\docbook{\doignore{docbook}}
a2592 1
\def\ifdocbook{\doignore{ifdocbook}}
d2602 5
a2606 1
% Ignore text until a line `@@end #1', keeping track of nested conditionals.
a2607 3
% A count to remember the depth of nesting.
\newcount\doignorecount

d2609 7
a2615 4
  % Scan in ``verbatim'' mode:
  \catcode`\@@ = \other
  \catcode`\{ = \other
  \catcode`\} = \other
d2618 1
a2618 1
  \spaceisspace
d2620 110
a2729 12
  % Count number of #1's that we've seen.
  \doignorecount = 0
  %
  % Swallow text until we reach the matching `@@end #1'.
  \dodoignore {#1}%
}

{ \catcode`_=11 % We want to use \_STOP_ which cannot appear in texinfo source.
  \obeylines %
  %
  \gdef\dodoignore#1{%
    % #1 contains the string `ifinfo'.
d2731 2
a2732 7
    % Define a command to find the next `@@end #1', which must be on a line
    % by itself.
    \long\def\doignoretext##1^^M@@end #1{\doignoretextyyy##1^^M@@#1\_STOP_}%
    % And this command to find another #1 command, at the beginning of a
    % line.  (Otherwise, we would consider a line `@@c @@ifset', for
    % example, to count as an @@ifset for nesting.)
    \long\def\doignoretextyyy##1^^M@@#1##2\_STOP_{\doignoreyyy{##2}\_STOP_}%
d2734 5
a2738 28
    % And now expand that command.
    \obeylines %
    \doignoretext ^^M%
  }%
}

\def\doignoreyyy#1{%
  \def\temp{#1}%
  \ifx\temp\empty			% Nothing found.
    \let\next\doignoretextzzz
  \else					% Found a nested condition, ...
    \advance\doignorecount by 1
    \let\next\doignoretextyyy		% ..., look for another.
    % If we're here, #1 ends with ^^M\ifinfo (for example).
  \fi
  \next #1% the token \_STOP_ is present just after this macro.
}

% We have to swallow the remaining "\_STOP_".
% 
\def\doignoretextzzz#1{%
  \ifnum\doignorecount = 0	% We have just found the outermost @@end.
    \let\next\enddoignore
  \else				% Still inside a nested condition.
    \advance\doignorecount by -1
    \let\next\doignoretext      % Look for the next @@end.
  \fi
  \next
a2740 4
% Finish off ignored text.
\def\enddoignore{\endgroup\ignorespaces}


d2747 2
a2748 2
% didn't need it.
% We rely on the fact that \parsearg sets \catcode`\ =10.
d2750 4
a2753 1
\parseargdef\set{\setyyy#1 \endsetyyy}
d2755 5
a2759 10
  {%
    \makevalueexpandable
    \def\temp{#2}%
    \edef\next{\gdef\makecsname{SET#1}}%
    \ifx\temp\empty
      \next{}%
    \else
      \setzzz#2\endsetzzz
    \fi
  }%
d2761 4
a2764 2
% Remove the trailing space \setxxx inserted.
\def\setzzz#1 \endsetzzz{\next{#1}}
d2768 2
a2769 6
\parseargdef\clear{%
  {%
    \makevalueexpandable
    \global\expandafter\let\csname SET#1\endcsname=\relax
  }%
}
a2771 2
\def\value{\begingroup\makevalueexpandable\valuexxx}
\def\valuexxx#1{\expandablevalue{#1}\endgroup}
d2773 1
a2773 1
  \catcode`\- = \active \catcode`\_ = \active
d2775 4
a2778 3
  \gdef\makevalueexpandable{%
    \let\value = \expandablevalue
    % We don't want these characters active, ...
d2780 2
a2781 5
    % ..., but we might end up with active ones in the argument if
    % we're called from @@code, as @@code{@@value{foo-bar_}}, though.
    % So \let them to their normal equivalents.
    \let-\realdash \let_\normalunderscore
  }
d2783 1
d2786 8
a2793 6
% properly in indexes (we call \makevalueexpandable in \indexdummies).
% The command has to be fully expandable (if the variable is set), since
% the result winds up in the index file.  This means that if the
% variable's value contains other Texinfo commands, it's almost certain
% it will fail (although perhaps we could fix that with sufficient work
% to do a one-level expansion on the result, instead of complete).
d2807 8
a2814 13
% To get special treatment of `@@end ifset,' call \makeond and the redefine.
%
\makecond{ifset}
\def\ifset{\parsearg{\doifset{\let\next=\ifsetfail}}}
\def\doifset#1#2{%
  {%
    \makevalueexpandable
    \let\next=\empty
    \expandafter\ifx\csname SET#2\endcsname\relax
      #1% If not set, redefine \next.
    \fi
    \expandafter
  }\next
d2816 3
a2818 1
\def\ifsetfail{\doignore{ifset}}
d2823 33
a2855 11
% The `\else' inside the `\doifset' parameter is a trick to reuse the
% above code: if the variable is not set, do nothing, if it is set,
% then redefine \next to \ifclearfail.
%
\makecond{ifclear}
\def\ifclear{\parsearg{\doifset{\else \let\next=\ifclearfail}}}
\def\ifclearfail{\doignore{ifclear}}

% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory=\comment
d2906 1
a2906 1
%
d2909 1
a2909 1
%
d2951 1
a2951 1
%
d2957 1
a2957 1
  % braces and backslashes are used only as delimiters.
d2966 1
a2966 1
  %
d2969 1
a2969 1
  %
d2973 1
a2973 1
  %
d2986 1
a2986 1
% everything using @@ instead of \realbackslash.  When everything uses
d2988 1
a2988 1
%
d3009 1
a3009 1
%
d3014 1
a3014 2
  \commondummiesnofonts
  %
d3016 16
d3033 1
a3033 1
  % Non-English letters.
a3044 4
  \definedummyword{exclamdown}%
  \definedummyword{questiondown}%
  \definedummyword{ordf}%
  \definedummyword{ordm}%
d3056 7
a3062 1
  \definedummyword{LaTeX}%
d3064 19
a3086 1
  \definedummyword{registeredsymbol}%
d3098 2
a3099 1
  % Handle some cases of @@value -- where it does not contain any
d3101 1
a3101 1
  \makevalueexpandable
d3110 6
a3115 60
% \commondummiesnofonts: common to \commondummies and \indexnofonts.
%
% Better have this without active chars.
{
  \catcode`\~=\other
  \gdef\commondummiesnofonts{%
    % Control letters and accents.
    \definedummyletter{!}%
    \definedummyletter{"}%
    \definedummyletter{'}%
    \definedummyletter{*}%
    \definedummyletter{,}%
    \definedummyletter{.}%
    \definedummyletter{/}%
    \definedummyletter{:}%
    \definedummyletter{=}%
    \definedummyletter{?}%
    \definedummyletter{^}%
    \definedummyletter{`}%
    \definedummyletter{~}%
    \definedummyword{u}%
    \definedummyword{v}%
    \definedummyword{H}%
    \definedummyword{dotaccent}%
    \definedummyword{ringaccent}%
    \definedummyword{tieaccent}%
    \definedummyword{ubaraccent}%
    \definedummyword{udotaccent}%
    \definedummyword{dotless}%
    %
    % Texinfo font commands.
    \definedummyword{b}%
    \definedummyword{i}%
    \definedummyword{r}%
    \definedummyword{sc}%
    \definedummyword{t}%
    %
    % Commands that take arguments.
    \definedummyword{acronym}%
    \definedummyword{cite}%
    \definedummyword{code}%
    \definedummyword{command}%
    \definedummyword{dfn}%
    \definedummyword{emph}%
    \definedummyword{env}%
    \definedummyword{file}%
    \definedummyword{kbd}%
    \definedummyword{key}%
    \definedummyword{math}%
    \definedummyword{option}%
    \definedummyword{samp}%
    \definedummyword{strong}%
    \definedummyword{tie}%
    \definedummyword{uref}%
    \definedummyword{url}%
    \definedummyword{var}%
    \definedummyword{verb}%
    \definedummyword{w}%
  }
}
d3122 3
a3125 12
  \def\definedummyword##1{%
    \expandafter\let\csname ##1\endcsname\asis
  }%
  \let\definedummyletter=\definedummyword
  %
  \commondummiesnofonts
  %
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
  %
d3131 18
a3148 1
  % Non-English letters.
a3161 2
  \def\ordf{a}%
  \def\ordm{o}%
d3163 4
a3166 2
  \def\LaTeX{LaTeX}%
  \def\TeX{TeX}%
d3168 27
a3194 15
  % Assorted special characters.
  % (The following {} will end up in the sort string, but that's ok.)
  \def\bullet{bullet}%
  \def\copyright{copyright}%
  \def\registeredsymbol{R}%
  \def\dots{...}%
  \def\enddots{...}%
  \def\equiv{==}%
  \def\error{error}%
  \def\expansion{==>}%
  \def\minus{-}%
  \def\pounds{pounds}%
  \def\point{.}%
  \def\print{-|}%
  \def\result{=>}%
d3200 3
d3204 2
a3205 2
% #1 is the index name, #2 is the entry text.
\def\doind#1#2{\dosubind{#1}{#2}{}}
d3209 2
a3210 2
% empty if called from \doind, as we usually are (the main exception
% is with most defuns, which call us directly).
a3212 24
  \iflinks
  {%
    % Store the main index entry text (including the third arg).
    \toks0 = {#2}%
    % If third arg is present, precede it with a space.
    \def\thirdarg{#3}%
    \ifx\thirdarg\empty \else
      \toks0 = \expandafter{\the\toks0 \space #3}%
    \fi
    %
    \edef\writeto{\csname#1indfile\endcsname}%
    %
    \ifvmode
      \dosubindsanitize
    \else
      \dosubindwrite
    \fi
  }%
  \fi
}

% Write the entry in \toks0 to the index file:
%
\def\dosubindwrite{%
d3215 1
a3215 1
    \insert\margin{\hbox{\vrule height8pt depth3pt width0pt \the\toks0}}%
d3217 68
a3284 22
  %
  % Remember, we are within a group.
  \indexdummies % Must do this here, since \bf, etc expand at this stage
  \escapechar=`\\
  \def\backslashcurfont{\indexbackslash}% \indexbackslash isn't defined now
      % so it will be output as is; and it will print as backslash.
  %
  % Process the index entry with all font commands turned off, to
  % get the string to sort by.
  {\indexnofonts
   \edef\temp{\the\toks0}% need full expansion
   \xdef\indexsorttmp{\temp}%
  }%
  %
  % Set up the complete index entry, with both the sort key and
  % the original text, including any font commands.  We write
  % three arguments to \entry to the .?? file (four in the
  % subentry case), texindex reduces to two when writing the .??s
  % sorted result.
  \edef\temp{%
    \write\writeto{%
      \string\entry{\indexsorttmp}{\noexpand\folio}{\the\toks0}}%
a3285 71
  \temp
}

% Take care of unwanted page breaks:
%
% If a skip is the last thing on the list now, preserve it
% by backing up by \lastskip, doing the \write, then inserting
% the skip again.  Otherwise, the whatsit generated by the
% \write will make \lastskip zero.  The result is that sequences
% like this:
% @@end defun
% @@tindex whatever
% @@defun ...
% will have extra space inserted, because the \medbreak in the
% start of the @@defun won't see the skip inserted by the @@end of
% the previous defun.
%
% But don't do any of this if we're not in vertical mode.  We
% don't want to do a \vskip and prematurely end a paragraph.
%
% Avoid page breaks due to these extra skips, too.
%
% But wait, there is a catch there:
% We'll have to check whether \lastskip is zero skip.  \ifdim is not
% sufficient for this purpose, as it ignores stretch and shrink parts
% of the skip.  The only way seems to be to check the textual
% representation of the skip.
%
% The following is almost like \def\zeroskipmacro{0.0pt} except that
% the ``p'' and ``t'' characters have catcode \other, not 11 (letter).
%
\edef\zeroskipmacro{\expandafter\the\csname z@@skip\endcsname}
%
% ..., ready, GO:
%
\def\dosubindsanitize{%
  % \lastskip and \lastpenalty cannot both be nonzero simultaneously.
  \skip0 = \lastskip
  \edef\lastskipmacro{\the\lastskip}%
  \count255 = \lastpenalty
  %
  % If \lastskip is nonzero, that means the last item was a
  % skip.  And since a skip is discardable, that means this
  % -\skip0 glue we're inserting is preceded by a
  % non-discardable item, therefore it is not a potential
  % breakpoint, therefore no \nobreak needed.
  \ifx\lastskipmacro\zeroskipmacro
  \else
    \vskip-\skip0
  \fi
  %
  \dosubindwrite
  %
  \ifx\lastskipmacro\zeroskipmacro
    % if \lastskip was zero, perhaps the last item was a
    % penalty, and perhaps it was >=10000, e.g., a \nobreak.
    % In that case, we want to re-insert the penalty; since we
    % just inserted a non-discardable item, any following glue
    % (such as a \parskip) would be a breakpoint.  For example:
    %   @@deffn deffn-whatever
    %   @@vindex index-whatever
    %   Description.
    % would allow a break between the index-whatever whatsit
    % and the "Description." paragraph.
    \ifnum\count255>9999 \nobreak \fi
  \else
    % On the other hand, if we had a nonzero \lastskip,
    % this make-up glue would be preceded by a non-discardable item
    % (the whatsit from the \write), so we must insert a \nobreak.
    \nobreak\vskip\skip0
  \fi
d3323 2
a3324 1
\parseargdef\printindex{\begingroup
d3329 1
a3329 1
  \everypar = {}% don't want the \kern\-parindent from indentation suppression.
d3356 1
a3356 1
      \def\indexbackslash{\backslashcurfont}%
d3394 75
a3468 96
% \entry typesets a paragraph consisting of the text (#1), dot leaders, and
% then page number (#2) flushed to the right margin.  It is used for index
% and table of contents entries.  The paragraph is indented by \leftskip.
%
% A straightforward implementation would start like this:
%	\def\entry#1#2{...
% But this frozes the catcodes in the argument, and can cause problems to
% @@code, which sets - active.  This problem was fixed by a kludge---
% ``-'' was active throughout whole index, but this isn't really right.
% 
% The right solution is to prevent \entry from swallowing the whole text.
%                                 --kasal, 21nov03
\def\entry{%
  \begingroup
    %
    % Start a new paragraph if necessary, so our assignments below can't
    % affect previous text.
    \par
    %
    % Do not fill out the last line with white space.
    \parfillskip = 0in
    %
    % No extra space above this paragraph.
    \parskip = 0in
    %
    % Do not prefer a separate line ending with a hyphen to fewer lines.
    \finalhyphendemerits = 0
    %
    % \hangindent is only relevant when the entry text and page number
    % don't both fit on one line.  In that case, bob suggests starting the
    % dots pretty far over on the line.  Unfortunately, a large
    % indentation looks wrong when the entry text itself is broken across
    % lines.  So we use a small indentation and put up with long leaders.
    %
    % \hangafter is reset to 1 (which is the value we want) at the start
    % of each paragraph, so we need not do anything with that.
    \hangindent = 2em
    %
    % When the entry text needs to be broken, just fill out the first line
    % with blank space.
    \rightskip = 0pt plus1fil
    %
    % A bit of stretch before each entry for the benefit of balancing
    % columns.
    \vskip 0pt plus1pt
    %
    % Swallow the left brace of the text (first parameter):
    \afterassignment\doentry
    \let\temp =
}
\def\doentry{%
    \bgroup % Instead of the swallowed brace.
      \noindent
      \aftergroup\finishentry
      % And now comes the text of the entry.
}
\def\finishentry#1{%
    % #1 is the page number.
    %
    % The following is kludged to not output a line of dots in the index if
    % there are no page numbers.  The next person who breaks this will be
    % cursed by a Unix daemon.
    \def\tempa{{\rm }}%
    \def\tempb{#1}%
    \edef\tempc{\tempa}%
    \edef\tempd{\tempb}%
    \ifx\tempc\tempd
      \ %
    \else
      %
      % If we must, put the page number on a line of its own, and fill out
      % this line with blank space.  (The \hfil is overwhelmed with the
      % fill leaders glue in \indexdotfill if the page number does fit.)
      \hfil\penalty50
      \null\nobreak\indexdotfill % Have leaders before the page number.
      %
      % The `\ ' here is removed by the implicit \unskip that TeX does as
      % part of (the primitive) \par.  Without it, a spurious underfull
      % \hbox ensues.
      \ifpdf
	\pdfgettoks#1.%
	\ \the\toksA
      \else
	\ #1%
      \fi
    \fi
    \par
  \endgroup
}

% Like \dotfill except takes at least 1 em.
\def\indexdotfill{\cleaders
  \hbox{$\mathsurround=0pt \mkern1.5mu ${\it .}$ \mkern1.5mu$}\hskip 1em plus 1fill}

\def\primary #1{\line{#1\hfil}}

d3572 1
a3572 1
%
a3629 6
% \unnumberedno is an oxymoron, of course.  But we count the unnumbered
% sections so that we can refer to them unambiguously in the pdf
% outlines by their "section number".  We avoid collisions with chapter
% numbers by starting them at 10000.  (If a document ever has 10000
% chapters, we're in trouble anyway, I'm sure.)
\newcount\unnumberedno \unnumberedno = 10000
a3636 1
%
d3638 1
a3638 2
% We do the following ugly conditional instead of the above simple
% construct for the sake of pdftex, which needs the actual
a3639 1
% 
a3676 1
% However, they are not reliable, because we don't use marks.
d3681 1
a3681 1
\newcount\secbase\secbase=0 % @@raisesections/@@lowersections modify this count
d3696 10
a3705 4
      \chapterzzz{#2}%
  \or \seczzz{#2}%
  \or \numberedsubseczzz{#2}%
  \or \numberedsubsubseczzz{#2}%
d3707 1
a3707 3
    \ifnum \absseclevel<0 \chapterzzz{#2}%
    \else \numberedsubsubseczzz{#2}%
    \fi
d3709 1
a3709 1
  \suppressfirstparagraphindent
d3715 10
a3724 4
      \appendixzzz{#2}%
  \or \appendixsectionzzz{#2}%
  \or \appendixsubseczzz{#2}%
  \or \appendixsubsubseczzz{#2}%
d3726 1
a3726 3
    \ifnum \absseclevel<0 \appendixzzz{#2}%
    \else \appendixsubsubseczzz{#2}%
    \fi
d3728 1
a3728 1
  \suppressfirstparagraphindent
d3733 11
a3743 5
  \ifcase\absseclevel
      \unnumberedzzz{#2}%
  \or \unnumberedseczzz{#2}%
  \or \unnumberedsubseczzz{#2}%
  \or \unnumberedsubsubseczzz{#2}%
d3745 1
a3745 3
    \ifnum \absseclevel<0 \unnumberedzzz{#2}%
    \else \unnumberedsubsubseczzz{#2}%
    \fi
d3747 1
a3747 1
  \suppressfirstparagraphindent
d3750 15
a3764 24
% @@chapter, @@appendix, @@unnumbered.  Increment top-level counter, reset
% all lower-level sectioning counters to zero.
% 
% Also set \chaplevelprefix, which we prepend to @@float sequence numbers
% (e.g., figures), q.v.  By default (before any chapter), that is empty.
\let\chaplevelprefix = \empty
% 
\outer\parseargdef\chapter{\numhead0{#1}} % normally numhead0 calls chapterzzz
\def\chapterzzz#1{%
  % section resetting is \global in case the chapter is in a group, such
  % as an @@include file.
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\chapno by 1
  %
  % Used for \float.
  \gdef\chaplevelprefix{\the\chapno.}%
  \resetallfloatnos
  %
  \message{\putwordChapter\space \the\chapno}%
  %
  % Write the actual heading.
  \chapmacro{#1}{Ynumbered}{\the\chapno}%
  %
  % So @@section and the like are numbered underneath this chapter.
d3770 17
a3786 12
\outer\parseargdef\appendix{\apphead0{#1}} % normally apphead0 calls appendixzzz
\def\appendixzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\appendixno by 1
  \gdef\chaplevelprefix{\appendixletter.}%
  \resetallfloatnos
  %
  \def\appendixnum{\putwordAppendix\space \appendixletter}%
  \message{\appendixnum}%
  %
  \chapmacro{#1}{Yappendix}{\appendixletter}%
  %
d3793 5
a3797 1
\outer\parseargdef\centerchap{{\unnumberedyyy{#1}}}
d3799 4
a3802 8
\outer\parseargdef\unnumbered{\unnmhead0{#1}} % normally unnmhead0 calls unnumberedzzz
\def\unnumberedzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\unnumberedno by 1
  %
  % Since an unnumbered has no number, no prefix for figures.
  \global\let\chaplevelprefix = \empty
  \resetallfloatnos
d3815 1
a3815 4
  \toks0 = {#1}%
  \message{(\the\toks0)}%
  %
  \chapmacro{#1}{Ynothing}{\the\unnumberedno}%
d3817 4
d3826 21
a3846 2
% @@top is like @@unnumbered.
\let\top\unnumbered
d3848 7
a3854 18
% Sections.
\outer\parseargdef\numberedsec{\numhead1{#1}} % normally calls seczzz
\def\seczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynumbered}{\the\chapno.\the\secno}%
}

\outer\parseargdef\appendixsection{\apphead1{#1}} % normally calls appendixsectionzzz
\def\appendixsectionzzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Yappendix}{\appendixletter.\the\secno}%
}
\let\appendixsec\appendixsection

\outer\parseargdef\unnumberedsec{\unnmhead1{#1}} % normally calls unnumberedseczzz
\def\unnumberedseczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynothing}{\the\unnumberedno.\the\secno}%
d3858 27
a3884 18
\outer\parseargdef\numberedsubsec{\numhead2{#1}} % normally calls numberedsubseczzz
\def\numberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynumbered}{\the\chapno.\the\secno.\the\subsecno}%
}

\outer\parseargdef\appendixsubsec{\apphead2{#1}} % normally calls appendixsubseczzz
\def\appendixsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno}%
}

\outer\parseargdef\unnumberedsubsec{\unnmhead2{#1}} %normally calls unnumberedsubseczzz
\def\unnumberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno}%
d3888 29
a3916 19
\outer\parseargdef\numberedsubsubsec{\numhead3{#1}} % normally numberedsubsubseczzz
\def\numberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynumbered}%
                 {\the\chapno.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\appendixsubsubsec{\apphead3{#1}} % normally appendixsubsubseczzz
\def\appendixsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\unnumberedsubsubsec{\unnmhead3{#1}} %normally unnumberedsubsubseczzz
\def\unnumberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno.\the\subsubsecno}%
d3920 1
a3920 1
% Actually, they are now be obsolete; ordinary section commands should work.
d3940 3
a3942 3
\let\section = \numberedsec
\let\subsection = \numberedsubsec
\let\subsubsection = \numberedsubsubsec
d3955 2
a3956 1
\def\majorheading{%
d3958 3
a3960 2
  \parsearg\chapheadingzzz
}
d3962 2
a3963 2
\def\chapheading{\chapbreak \parsearg\chapheadingzzz}
\def\chapheadingzzz#1{%
d3966 1
a3966 4
                    \rm #1\hfill}}%
  \bigskip \par\penalty 200\relax
  \suppressfirstparagraphindent
}
d3969 3
a3971 6
\parseargdef\heading{\sectionheading{#1}{sec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subheading{\sectionheading{#1}{subsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subsubheading{\sectionheading{#1}{subsubsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
d4004 1
a4004 1
\def\CHAPPAGodd{%
d4012 1
a4012 1
\def\CHAPFplain{%
d4014 1
d4017 3
a4019 11
% Normal chapter opening.
% 
% #1 is the text, #2 is the section type (Ynumbered, Ynothing,
% Yappendix, Yomitfromtoc), #3 the chapter number.
% 
% To test against our argument.
\def\Ynothingkeyword{Ynothing}
\def\Yomitfromtockeyword{Yomitfromtoc}
\def\Yappendixkeyword{Yappendix}
%
\def\chfplain#1#2#3{%
d4023 2
a4024 47
    %
    % Have to define \thissection before calling \donoderef, because the
    % xref code eventually uses it.  On the other hand, it has to be called
    % after \pchapsepmacro, or the headline will change too soon.
    \gdef\thissection{#1}%
    \gdef\thischaptername{#1}%
    %
    % Only insert the separating space if we have a chapter/appendix
    % number, and don't print the unnumbered ``number''.
    \def\temptype{#2}%
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unnchap}%
      \def\thischapter{#1}%
    \else\ifx\temptype\Yomitfromtockeyword
      \setbox0 = \hbox{}% contents like unnumbered, but no toc entry
      \def\toctype{omit}%
      \xdef\thischapter{}%
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{\putwordAppendix{} #3\enspace}%
      \def\toctype{app}%
      % We don't substitute the actual chapter name into \thischapter
      % because we don't want its macros evaluated now.  And we don't
      % use \thissection because that changes with each section.
      %
      \xdef\thischapter{\putwordAppendix{} \appendixletter:
                        \noexpand\thischaptername}%
    \else
      \setbox0 = \hbox{#3\enspace}%
      \def\toctype{numchap}%
      \xdef\thischapter{\putwordChapter{} \the\chapno:
                        \noexpand\thischaptername}%
    \fi\fi\fi
    %
    % Write the toc entry for this chapter.  Must come before the
    % \donoderef, because we include the current node name in the toc
    % entry, and \donoderef resets it to empty.
    \writetocentry{\toctype}{#1}{#3}%
    %
    % For pdftex, we have to write out the node definition (aka, make
    % the pdfdest) after any page break, but before the actual text has
    % been typeset.  If the destination for the pdf outline is after the
    % text, then jumping from the outline may wind up with the text not
    % being visible, for instance under high magnification.
    \donoderef{#2}%
    %
    % Typeset the actual heading.
d4026 1
a4026 1
          \hangindent=\wd0 \centerparametersmaybe
d4033 3
d4044 1
a4044 1
  \chfplain{#1}{Ynothing}{}%
a4048 3
% I don't think this chapter style is supported any more, so I'm not
% updating it with the new noderef stuff.  We'll see.  --karl, 11aug03.
% 
d4066 1
a4066 1
\def\CHAPFopen{%
d4068 1
d4072 1
a4072 3
% Section titles.  These macros combine the section number parts and
% call the generic \sectionheading to do the printing.
% 
d4074 3
a4076 1
\def\secheadingbreak{\dobreak \secheadingskip{-1000}}
d4079 4
a4082 2
\newskip\subsecheadingskip
\def\subsecheadingbreak{\dobreak \subsecheadingskip{-500}}
d4085 4
a4088 2
\def\subsubsecheadingskip{\subsecheadingskip}
\def\subsubsecheadingbreak{\subsecheadingbreak}
d4091 9
a4099 7
% Print any size, any type, section title.
% 
% #1 is the text, #2 is the section level (sec/subsec/subsubsec), #3 is
% the section type for xrefs (Ynumbered, Ynothing, Yappendix), #4 is the
% section number.
% 
\def\sectionheading#1#2#3#4{%
d4102 1
a4102 1
    \csname #2fonts\endcsname \rm
d4104 3
a4106 2
    % Insert space above the heading.
    \csname #2headingbreak\endcsname
a4107 32
    % Only insert the space after the number if we have a section number.
    \def\sectionlevel{#2}%
    \def\temptype{#3}%
    %
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unn}%
      \gdef\thissection{#1}%
    \else\ifx\temptype\Yomitfromtockeyword
      % for @@headings -- no section number, don't include in toc,
      % and don't redefine \thissection.
      \setbox0 = \hbox{}%
      \def\toctype{omit}%
      \let\sectionlevel=\empty
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{app}%
      \gdef\thissection{#1}%
    \else
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{num}%
      \gdef\thissection{#1}%
    \fi\fi\fi
    %
    % Write the toc entry (before \donoderef).  See comments in \chfplain.
    \writetocentry{\toctype\sectionlevel}{#1}{#4}%
    %
    % Write the node reference (= pdf destination for pdftex).
    % Again, see comments in \chfplain.
    \donoderef{#3}%
    %
    % Output the actual section heading.
d4109 2
a4110 2
          \hangindent=\wd0  % zero if no section number
          \unhbox0 #1}%
d4112 3
a4114 6
  % Add extra space after the heading -- half of whatever came above it.
  % Don't allow stretch, though.
  \kern .5 \csname #2headingskip\endcsname
  %
  % Do not let the kern be a potential breakpoint, as it would be if it
  % was followed by glue.
d4116 5
a4120 12
  %
  % We'll almost certainly start a paragraph next, so don't let that
  % glue accumulate.  (Not a breakpoint because it's preceded by a
  % discardable item.)
  \vskip-\parskip
  %
  % This \nobreak is purely so the last item on the list is a \penalty
  % of 10000.  This is so other code, for instance \parsebodycommon, can
  % check for and avoid allowing breakpoints.  Otherwise, it would
  % insert a valid breakpoint between:
  %   @@section sec-whatever
  %   @@deffn def-whatever
d4130 4
a4133 8
% Called from @@chapter, etc.  
% 
% Example usage: \writetocentry{sec}{Section Name}{\the\chapno.\the\secno}
% We append the current node name (if any) and page number as additional
% arguments for the \{chap,sec,...}entry macros which will eventually
% read this.  The node name is used in the pdf outlines as the
% destination to jump to.
% 
a4135 2
% But if #1 is `omit', then we don't do anything.  This is used for the
% table of contents chapter openings themselves.
a4137 2
\def\omitkeyword{omit}%
%
d4139 9
a4147 14
  \edef\writetoctype{#1}%
  \ifx\writetoctype\omitkeyword \else
    \iftocfileopened\else
      \immediate\openout\tocfile = \jobname.toc
      \global\tocfileopenedtrue
    \fi
    %
    \iflinks
      \toks0 = {#2}%
      \toks2 = \expandafter{\lastnode}%
      \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}{#3}%
                               {\the\toks2}{\noexpand\folio}}}%
      \temp
    \fi
d4150 7
a4156 7
  % Tell \shipout to create a pdf destination on each page, if we're
  % writing pdf.  These are used in the table of contents.  We can't
  % just write one on every page because the title pages are numbered
  % 1 and 2 (the page numbers aren't printed), and so are the first
  % two pages of the document.  Thus, we'd have two destinations named
  % `1', and two named `2'.
  \ifpdf \global\pdfmakepagedesttrue \fi
d4163 2
a4164 1
% Prepare to read what we've written to \tocfile.
d4167 21
a4187 23
  % If @@setchapternewpage on, and @@headings double, the contents should
  % start on an odd page, unlike chapters.  Thus, we maintain
  % \contentsalignmacro in parallel with \pagealignmacro.
  % From: Torbjorn Granlund <tege@@matematik.su.se>
  \contentsalignmacro
  \immediate\closeout\tocfile
  %
  % Don't need to put `Contents' or `Short Contents' in the headline.
  % It is abundantly clear what they are.
  \def\thischapter{}%
  \chapmacro{#1}{Yomitfromtoc}{}%
  %
  \savepageno = \pageno
  \begingroup                  % Set up to handle contents files properly.
    \catcode`\\=0  \catcode`\{=1  \catcode`\}=2  \catcode`\@@=11
    % We can't do this, because then an actual ^ in a section
    % title fails, e.g., @@chapter ^ -- exponentiation.  --karl, 9jul97.
    %\catcode`\^=7 % to see ^^e4 as \"a etc. juha@@piuha.ydi.vtt.fi
    \raggedbottom             % Worry more about breakpoints than the bottom.
    \advance\hsize by -\contentsrightmargin % Don't use the full line length.
    %
    % Roman numerals for page numbers.
    \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
d4193 12
a4204 14
  \startcontents{\putwordTOC}%
    \openin 1 \jobname.toc
    \ifeof 1 \else
      \input \jobname.toc
    \fi
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
    \ifeof 1 \else
      \pdfmakeoutlines
    \fi
    \closein 1
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
d4209 28
a4236 31
  \startcontents{\putwordShortTOC}%
    %
    \let\numchapentry = \shortchapentry
    \let\appentry = \shortchapentry
    \let\unnchapentry = \shortunnchapentry
    % We want a true roman here for the page numbers.
    \secfonts
    \let\rm=\shortcontrm \let\bf=\shortcontbf
    \let\sl=\shortcontsl \let\tt=\shortconttt
    \rm
    \hyphenpenalty = 10000
    \advance\baselineskip by 1pt % Open it up a little.
    \def\numsecentry##1##2##3##4{}
    \let\appsecentry = \numsecentry
    \let\unnsecentry = \numsecentry
    \let\numsubsecentry = \numsecentry
    \let\appsubsecentry = \numsecentry
    \let\unnsubsecentry = \numsecentry
    \let\numsubsubsecentry = \numsecentry
    \let\appsubsubsecentry = \numsecentry
    \let\unnsubsubsecentry = \numsecentry
    \openin 1 \jobname.toc
    \ifeof 1 \else
      \input \jobname.toc
    \fi
    \closein 1
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
d4240 3
a4242 17
% Typeset the label for a chapter or appendix for the short contents.
% The arg is, e.g., `A' for an appendix, or `3' for a chapter.
%
\def\shortchaplabel#1{%
  % This space should be enough, since a single number is .5em, and the
  % widest letter (M) is 1em, at least in the Computer Modern fonts.
  % But use \hss just in case.
  % (This space doesn't include the extra space that gets added after
  % the label; that gets put in by \shortchapentry above.)
  % 
  % We'd like to right-justify chapter numbers, but that looks strange
  % with appendix letters.  And right-justifying numbers and
  % left-justifying letters looks strange when there is less than 10
  % chapters.  Have to read the whole toc once to know how many chapters
  % there are before deciding ...
  \hbox to 1em{#1\hss}%
}
d4250 1
a4250 1
\def\numchapentry#1#2#3#4{\dochapentry{#2\labelspace#1}{#4}}
d4254 2
a4255 2
\def\shortchapentry#1#2#3#4{%
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno\bgroup#4\egroup}%
d4259 2
a4260 6
% Need the word Appendix, and a fixed-size box.
% 
\def\appendixbox#1{%
  % We use M since it's probably the widest letter.
  \setbox0 = \hbox{\putwordAppendix{} M}%
  \hbox to \wd0{\putwordAppendix{} #1\hss}}
d4262 20
a4281 1
\def\appentry#1#2#3#4{\dochapentry{\appendixbox{#2}\labelspace#1}{#4}}
d4284 2
a4285 2
\def\unnchapentry#1#2#3#4{\dochapentry{#1}{#4}}
\def\shortunnchapentry#1#2#3#4{\tocentry{#1}{\doshortpageno\bgroup#4\egroup}}
d4288 2
a4289 3
\def\numsecentry#1#2#3#4{\dosecentry{#2\labelspace#1}{#4}}
\let\appsecentry=\numsecentry
\def\unnsecentry#1#2#3#4{\dosecentry{#1}{#4}}
d4292 2
a4293 3
\def\numsubsecentry#1#2#3#4{\dosubsecentry{#2\labelspace#1}{#4}}
\let\appsubsecentry=\numsubsecentry
\def\unnsubsecentry#1#2#3#4{\dosubsecentry{#1}{#4}}
d4296 3
a4298 3
\def\numsubsubsecentry#1#2#3#4{\dosubsubsecentry{#2\labelspace#1}{#4}}
\let\appsubsubsecentry=\numsubsubsecentry
\def\unnsubsubsecentry#1#2#3#4{\dosubsubsecentry{#1}{#4}}
d4301 1
a4301 2
% Same as \defaultparindent.
\newdimen\tocindent \tocindent = 15pt
d4332 11
a4342 2
% We use the same \entry macro as for the index entries.
\let\tocentry = \entry
d4352 2
a4353 2
\def\subsecentryfonts{\textfonts}
\def\subsubsecentryfonts{\textfonts}
d4360 1
a4360 1
%
d4372 1
a4372 1
%
d4380 1
a4380 1
\setbox\errorbox=\hbox to \dimen0{\hfil
d4383 1
a4383 1
   \vbox{%
d4397 1
a4397 1
\envdef\tex{%
d4404 1
a4418 2
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
a4421 1
  \let\/=\ptexslash
d4428 1
a4428 2
}
% There is no need to define \Etex.
d4431 1
a4431 1
% @@lisp environment forms a group so it can rebind things,
d4442 13
d4472 1
a4472 1
      \ifnum\lastpenalty<10000 \penalty-50 \fi
d4504 28
a4531 29
\envdef\cartouche{%
  \ifhmode\par\fi  % can't be in the midst of a paragraph.
  \startsavinginserts
  \lskip=\leftskip \rskip=\rightskip
  \leftskip=0pt\rightskip=0pt % we want these *outside*.
  \cartinner=\hsize \advance\cartinner by-\lskip
  \advance\cartinner by-\rskip
  \cartouter=\hsize
  \advance\cartouter by 18.4pt	% allow for 3pt kerns on either
				% side, and for 6pt waste from
				% each corner char, and rule thickness
  \normbskip=\baselineskip \normpskip=\parskip \normlskip=\lineskip
  % Flag to tell @@lisp, etc., not to narrow margin.
  \let\nonarrowing=\comment
  \vbox\bgroup
      \baselineskip=0pt\parskip=0pt\lineskip=0pt
      \carttop
      \hbox\bgroup
	  \hskip\lskip
	  \vrule\kern3pt
	  \vbox\bgroup
	      \kern3pt
	      \hsize=\cartinner
	      \baselineskip=\normbskip
	      \lineskip=\normlskip
	      \parskip=\normpskip
	      \vskip -\parskip
	      \comment % For explanation, see the end of \def\group.
}
d4533 10
a4542 10
              \ifhmode\par\fi
	      \kern3pt
	  \egroup
	  \kern3pt\vrule
	  \hskip\rskip
      \egroup
      \cartbot
  \egroup
  \checkinserts
}
d4549 1
d4562 2
a4564 1
  \let\exdent=\nofillexdent
d4567 8
a4574 4
% If you want all examples etc. small: @@set dispenvsize small.
% If you want even small examples the full size: @@set dispenvsize nosmall.
% This affects the following displayed environments:
%    @@example, @@display, @@format, @@lisp
d4576 1
a4576 14
\def\smallword{small}
\def\nosmallword{nosmall}
\let\SETdispenvsize\relax
\def\setnormaldispenv{%
  \ifx\SETdispenvsize\smallword
    \smallexamplefonts \rm
  \fi
}
\def\setsmalldispenv{%
  \ifx\SETdispenvsize\nosmallword
  \else
    \smallexamplefonts \rm
  \fi
}
d4578 7
a4584 7
% We often define two environments, @@foo and @@smallfoo.
% Let's do it by one command:
\def\makedispenv #1#2{
  \expandafter\envdef\csname#1\endcsname {\setnormaldispenv #2}
  \expandafter\envdef\csname small#1\endcsname {\setsmalldispenv #2}
  \expandafter\let\csname E#1\endcsname \afterenvbreak
  \expandafter\let\csname Esmall#1\endcsname \afterenvbreak
d4587 2
a4588 5
% Define two synonyms:
\def\maketwodispenvs #1#2#3{
  \makedispenv{#1}{#3}
  \makedispenv{#2}{#3}
}
a4589 2
% @@lisp: indented, narrowed, typewriter font; @@example: same as @@lisp.
%
d4592 5
a4596 6
%
\maketwodispenvs {lisp}{example}{%
  \nonfillstart
  \tt
  \let\kbdfont = \kbdexamplefont % Allow @@kbd to do something special.
  \gobble       % eat return
d4598 1
d4600 2
a4601 1
% @@display/@@smalldisplay: same as @@lisp except keep current font.
d4603 1
a4603 1
\makedispenv {display}{%
d4605 1
d4608 8
d4617 1
a4617 1
% @@format/@@smallformat: same as @@display except don't narrow margins.
d4619 2
a4620 2
\makedispenv{format}{%
  \let\nonarrowing = t%
d4622 1
d4625 8
d4634 3
a4636 7
% @@flushleft: same as @@format, but doesn't obey \SETdispenvsize.
\envdef\flushleft{%
  \let\nonarrowing = t%
  \nonfillstart
  \gobble
}
\let\Eflushleft = \afterenvbreak
d4640 2
a4641 2
\envdef\flushright{%
  \let\nonarrowing = t%
d4643 1
a4646 1
\let\Eflushright = \afterenvbreak
d4650 1
a4650 3
% and narrows the margins.  We keep \parskip nonzero in general, since
% we're doing normal filling.  So, when using \aboveenvbreak and
% \afterenvbreak, temporarily make \parskip 0.
d4652 2
a4653 1
\envdef\quotation{%
d4656 3
a4666 21
  \parsearg\quotationlabel
}

% We have retained a nonzero parskip for the environment, since we're
% doing normal filling.
% 
\def\Equotation{%
  \par
  \ifx\quotationauthor\undefined\else
    % indent a bit.
    \leftline{\kern 2\leftskip \sl ---\quotationauthor}%
  \fi
  {\parskip=0pt \afterenvbreak}%
}

% If we're given an argument, typeset it in bold with a colon after.
\def\quotationlabel#1{%
  \def\temp{#1}%
  \ifx\temp\empty \else
    {\bf #1: }%
  \fi
d4671 1
a4671 1
% If we want to allow any <char> as delimiter,
d4688 1
a4688 1
  \def\do##1{\catcode`##1=\other}\dospecials}
a4735 2
  \nonfillstart
  \advance\leftskip by -\defbodyindent
d4749 2
a4750 2
% Do the @@verb magic: verbatim text is quoted by unique
% delimiter characters.  Before first delimiter expect a
d4757 1
a4757 1
  \catcode`[=1\catcode`]=2\catcode`\{=\other\catcode`\}=\other
d4769 1
a4769 1
% For Texinfo it's a lot easier than for LaTeX,
d4774 7
d4788 1
a4788 3
  \xdef\doverbatim#1^^M#2@@end verbatim{#2\noexpand\end\gobble verbatim}%
  % We really want {...\end verbatim} in the body of the macro, but
  % without the active space; thus we have to use \xdef and \gobble.
d4791 6
a4796 2
\envdef\verbatim{%
    \setupverbatim\doverbatim
a4797 2
\let\Everbatim = \afterenvbreak

d4801 19
a4819 1
\def\verbatiminclude{\parseargusing\filenamecatcodes\doverbatiminclude}
d4822 9
a4830 6
  {%
    \makevalueexpandable
    \setupverbatim
    \input #1
    \afterenvbreak
  }%
d4836 1
a4836 1
%
d4843 1
a4843 1
%
d4866 1
a4866 1
%
d4870 1
a4870 1
%
d4874 1
a4874 1
%
d4905 3
d4912 69
a4980 4
% Start the processing of @@deffn:
\def\startdefun{%
  \ifnum\lastpenalty<10000
    \medbreak
d4982 1
a4982 12
    % If there are two @@def commands in a row, we'll have a \nobreak,
    % which is there to keep the function description together with its
    % header.  But if there's nothing but headers, we need to allow a
    % break somewhere.  Check for penalty 10002 (inserted by
    % \defargscommonending) instead of 10000, since the sectioning
    % commands insert a \penalty10000, and we don't want to allow a break
    % between a section heading and a defun.
    \ifnum\lastpenalty=10002 \penalty2000 \fi
    %
    % Similarly, after a section heading, do not allow a break.
    % But do insert the glue.
    \medskip  % preceded by discardable penalty, so not a breakpoint
d4985 50
d5040 6
a5045 3
\def\dodefunx#1{%
  % First, check whether we are in the right environment:
  \checkenv#1%
d5047 25
a5071 6
  % As above, allow line break if we have multiple x headers in a row.
  % It's not a great place, though.
  \ifnum\lastpenalty=10002 \penalty3000 \fi
  %
  % And now, it's time to reuse the body of the original defun:
  \expandafter\gobbledefun#1%
a5072 1
\def\gobbledefun#1\startdefun{}
d5074 4
a5077 1
% \printdefunline \deffnheader{text}
d5079 20
a5098 14
\def\printdefunline#1#2{%
  \begingroup
    % call \deffnheader:
    #1#2 \endheader
    % common ending:
    \interlinepenalty = 10000
    \advance\rightskip by 0pt plus 1fil
    \endgraf
    \nobreak\vskip -\parskip
    \penalty 10002  % signal to \startdefun and \dodefunx
    % Some of the @@defun-type tags do not enable magic parentheses,
    % rendering the following check redundant.  But we don't optimize.
    \checkparencounts
  \endgroup
d5101 8
a5108 1
\def\Edefun{\endgraf\medbreak}
d5110 3
a5112 2
% \makedefun{deffn} creates \deffn, \deffnx and \Edeffn;
% the only thing remainnig is to define \deffnheader.
d5114 22
a5135 5
\def\makedefun#1{%
  \expandafter\let\csname E#1\endcsname = \Edefun
  \edef\temp{\noexpand\domakedefun
    \makecsname{#1}\makecsname{#1x}\makecsname{#1header}}%
  \temp
d5138 4
a5141 1
% \domakedefun \deffn \deffnx \deffnheader
d5143 3
a5145 2
% Define \deffn and \deffnx, without parameters.
% \deffnheader has to be defined explicitly.
d5147 5
a5151 7
\def\domakedefun#1#2#3{%
  \envdef#1{%
    \startdefun
    \parseargusing\activeparens{\printdefunline#3}%
  }%
  \def#2{\dodefunx#1}%
  \def#3%
d5154 4
a5157 1
%%% Untyped functions:
d5159 7
a5165 2
% @@deffn category name args
\makedefun{deffn}{\deffngeneral{}}
d5167 16
a5182 2
% @@deffn category class name args
\makedefun{defop}#1 {\defopon{#1\ \putwordon}}
d5184 1
a5184 2
% \defopon {category on}class name args
\def\defopon#1#2 {\deffngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }
d5186 1
a5186 1
% \deffngeneral {subind}category name args
d5188 39
a5226 4
\def\deffngeneral#1#2 #3 #4\endheader{%
  % Remember that \dosubind{fn}{foo}{} is equivalent to \doind{fn}{foo}.
  \dosubind{fn}{\code{#3}}{#1}%
  \defname{#2}{}{#3}\magicamp\defunargs{#4\unskip}%
d5229 3
a5231 1
%%% Typed functions:
d5233 5
a5237 2
% @@deftypefn category type name args
\makedefun{deftypefn}{\deftypefngeneral{}}
d5239 1
a5239 2
% @@deftypeop category class type name args
\makedefun{deftypeop}#1 {\deftypeopon{#1\ \putwordon}}
d5241 1
a5241 2
% \deftypeopon {category on}class type name args
\def\deftypeopon#1#2 {\deftypefngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }
d5243 8
a5250 5
% \deftypefngeneral {subind}category type name args
%
\def\deftypefngeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{fn}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
d5253 1
a5253 1
%%% Typed variables:
d5255 1
a5255 2
% @@deftypevr category type var args
\makedefun{deftypevr}{\deftypecvgeneral{}}
d5257 16
a5272 2
% @@deftypecv category class type var args
\makedefun{deftypecv}#1 {\deftypecvof{#1\ \putwordof}}
d5274 1
a5274 2
% \deftypecvof {category of}class type var args
\def\deftypecvof#1#2 {\deftypecvgeneral{\putwordof\ \code{#2}}{#1\ \code{#2}} }
d5276 6
a5281 5
% \deftypecvgeneral {subind}category type var args
%
\def\deftypecvgeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{vr}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
d5284 1
a5284 1
%%% Untyped variables:
d5286 1
a5286 2
% @@defvr category var args
\makedefun{defvr}#1 {\deftypevrheader{#1} {} }
d5288 5
a5292 2
% @@defcv category class var args
\makedefun{defcv}#1 {\defcvof{#1\ \putwordof}}
d5294 28
a5321 2
% \defcvof {category of}class var args
\def\defcvof#1#2 {\deftypecvof{#1}#2 {} }
d5323 12
a5334 5
%%% Type:
% @@deftp category name args
\makedefun{deftp}#1 #2 #3\endheader{%
  \doind{tp}{\code{#2}}%
  \defname{#1}{}{#2}\defunargs{#3\unskip}%
d5337 14
a5350 12
% Remaining @@defun-like shortcuts:
\makedefun{defun}{\deffnheader{\putwordDeffunc} }
\makedefun{defmac}{\deffnheader{\putwordDefmac} }
\makedefun{defspec}{\deffnheader{\putwordDefspec} }
\makedefun{deftypefun}{\deftypefnheader{\putwordDeffunc} }
\makedefun{defvar}{\defvrheader{\putwordDefvar} }
\makedefun{defopt}{\defvrheader{\putwordDefopt} }
\makedefun{deftypevar}{\deftypevrheader{\putwordDefvar} }
\makedefun{defmethod}{\defopon\putwordMethodon}
\makedefun{deftypemethod}{\deftypeopon\putwordMethodon}
\makedefun{defivar}{\defcvof\putwordInstanceVariableof}
\makedefun{deftypeivar}{\deftypecvof\putwordInstanceVariableof}
d5352 3
a5354 6
% \defname, which formats the name of the @@def (not the args).
% #1 is the category, such as "Function".
% #2 is the return type, if any.
% #3 is the function name.
% 
% We are followed by (but not passed) the arguments, if any.
d5356 7
a5362 49
\def\defname#1#2#3{%
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \advance\leftskip by -\defbodyindent
  %
  % How we'll format the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \def\temp{#1}%
  \setbox0=\hbox{\kern\deflastargmargin \ifx\temp\empty\else [\rm\temp]\fi}
  %
  % Figure out line sizes for the paragraph shape.
  % The first line needs space for \box0; but if \rightskip is nonzero,
  % we need only space for the part of \box0 which exceeds it:
  \dimen0=\hsize  \advance\dimen0 by -\wd0  \advance\dimen0 by \rightskip
  % The continuations:
  \dimen2=\hsize  \advance\dimen2 by -\defargsindent
  % (plain.tex says that \dimen1 should be used only as global.)
  \parshape 2 0in \dimen0 \defargsindent \dimen2
  %
  % Put the type name to the right margin.
  \noindent
  \hbox to 0pt{%
    \hfil\box0 \kern-\hsize
    % \hsize has to be shortened this way:
    \kern\leftskip
    % Intentionally do not respect \rightskip, since we need the space.
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \exdentamount=\defbodyindent
  {%
    % defun fonts. We use typewriter by default (used to be bold) because:
    % . we're printing identifiers, they should be in tt in principle.
    % . in languages with many accents, such as Czech or French, it's
    %   common to leave accents off identifiers.  The result looks ok in
    %   tt, but exceedingly strange in rm.
    % . we don't want -- and --- to be treated as ligatures.
    % . this still does not fix the ?` and !` ligatures, but so far no
    %   one has made identifiers using them :).
    \df \tt
    \def\temp{#2}% return value type
    \ifx\temp\empty\else \tclose{\temp} \fi
    #3% output function name
  }%
  {\rm\enskip}% hskip 0.5 em of \tenrm
  %
  \boldbrax
  % arguments will be output next, if any.
d5365 11
a5375 15
% Print arguments in slanted roman (not ttsl), inconsistently with using
% tt for the name.  This is because literal text is sometimes needed in
% the argument list (groff manual), and ttsl and tt are not very
% distinguishable.  Prevent hyphenation at `-' chars.
% 
\def\defunargs#1{%
  % use sl by default (not ttsl), 
  % tt for the names.
  \df \sl \hyphenchar\font=0
  %
  % On the other hand, if an argument has two dashes (for instance), we
  % want a way to get ttsl.  Let's try @@var for that.
  \let\var=\ttslanted
  #1%
  \sl\hyphenchar\font=45
d5378 3
a5380 1
% We want ()&[] to print specially on the defun line.
d5382 30
a5411 4
\def\activeparens{%
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\[=\active \catcode`\]=\active
  \catcode`\&=\active
d5414 1
a5414 2
% Make control sequences which act like normal parenthesis chars.
\let\lparen = ( \let\rparen = )
d5416 1
a5416 8
% Be sure that we always have a definition for `(', etc.  For example,
% if the fn name has parens in it, \boldbrax will not be in effect yet,
% so TeX would otherwise complain about undefined control sequence.
{
  \activeparens
  \global\let(=\lparen \global\let)=\rparen
  \global\let[=\lbrack \global\let]=\rbrack
  \global\let& = \&
d5418 3
a5420 2
  \gdef\boldbrax{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb}
  \gdef\magicamp{\let&=\amprm}
d5423 21
a5443 1
\newcount\parencount
d5445 2
a5446 3
% If we encounter &foo, then turn on ()-hacking afterwards
\newif\ifampseen
\def\amprm#1 {\ampseentrue{\bf\&#1 }}
d5448 1
a5448 19
\def\parenfont{%
  \ifampseen
    % At the first level, print parens in roman,
    % otherwise use the default font.
    \ifnum \parencount=1 \rm \fi
  \else
    % The \sf parens (in \boldbrax) actually are a little bolder than
    % the contained text.  This is especially needed for [ and ] .
    \sf
  \fi
}
\def\infirstlevel#1{%
  \ifampseen
    \ifnum\parencount=1
      #1%
    \fi
  \fi
}
\def\bfafterword#1 {#1 \bf}
d5450 1
a5450 10
\def\opnr{%
  \global\advance\parencount by 1
  {\parenfont(}%
  \infirstlevel \bfafterword
}
\def\clnr{%
  {\parenfont)}%
  \infirstlevel \sl
  \global\advance\parencount by -1
}
d5452 1
a5452 9
\newcount\brackcount
\def\lbrb{%
  \global\advance\brackcount by 1
  {\bf[}%
}
\def\rbrb{%
  {\bf]}%
  \global\advance\brackcount by -1
}
d5454 25
a5478 12
\def\checkparencounts{%
  \ifnum\parencount=0 \else \badparencount \fi
  \ifnum\brackcount=0 \else \badbrackcount \fi
}
\def\badparencount{%
  \errmessage{Unbalanced parentheses in @@def}%
  \global\parencount=0
}
\def\badbrackcount{%
  \errmessage{Unbalanced square braces in @@def}%
  \global\brackcount=0
}
d5487 20
a5506 8
  \newwrite\macscribble
  \def\scantokens#1{%
    \toks0={#1\endinput}%
    \immediate\openout\macscribble=\jobname.tmp
    \immediate\write\macscribble{\the\toks0}%
    \immediate\closeout\macscribble
    \input \jobname.tmp
  }
a5508 17
\def\scanmacro#1{%
  \begingroup
    \newlinechar`\^^M
    \let\xeatspaces\eatspaces
    % Undo catcode changes of \startcontents and \doprintindex
    \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
    % ... and \example
    \spaceisspace
    %
    % Append \endinput to make sure that TeX does not see the ending newline.
    %
    % I've verified that it is necessary both for e-TeX and for ordinary TeX
    %							--kasal, 29nov03
    \scantokens{#1\endinput}%
  \endgroup
}

d5516 1
a5516 1
% This does \let #1 = #2, except with \csnames.
d5613 2
a5614 1
\parseargdef\unmacro{%
d5631 1
a5631 1
%
d5764 1
a5764 1
\def\alias{\parseargusing\obeyspaces\aliasxxx}
d5766 4
a5769 7
\def\aliasyyy #1=#2\relax{%
  {%
    \expandafter\let\obeyedspace=\empty
    \xdef\next{\global\let\makecsname{#1}=\makecsname{#2}}%
  }%
  \next
}
d5773 1
d5785 4
a5788 4
% @@node's only job in TeX is to define \lastnode, which is used in
% cross-references.
\parseargdef\node{\checkenv{}\nodexxx #1,\finishnodeparse}
\def\nodexxx#1,#2\finishnodeparse{\gdef\lastnode{#1}}
d5790 1
a5790 1
\let\lastnode=\empty
d5792 19
a5810 7
% Write a cross-reference definition for the current node.  #1 is the
% type (Ynumbered, Yappendix, Ynothing).
% 
\def\donoderef#1{%
  \ifx\lastnode\empty\else
    \setref{\lastnode}{#1}%
    \global\let\lastnode=\empty
d5814 1
d5818 3
a5820 4
%
\def\savesf{\relax \ifhmode \savesfregister=\spacefactor \fi}
\def\restoresf{\relax \ifhmode \spacefactor=\savesfregister \fi}
\def\anchor#1{\savesf \setref{#1}{Ynothing}\restoresf \ignorespaces}
d5823 10
a5832 10
% anchor), which consists of three parts:
% 1) NAME-title - the current sectioning name taken from \thissection,
%                 or the anchor name.
% 2) NAME-snt   - section number and type, passed as the SNT arg, or
%                 empty for anchors.
% 3) NAME-pg    - the page number.
% 
% This is called from \donoderef, \anchor, and \dofloat.  In the case of
% floats, there is an additional part, which is not written here:
% 4) NAME-lof   - the text as it should appear in a @@listoffloats.
d5834 2
a5835 1
\def\setref#1#2{%
d5837 6
a5842 16
  \iflinks
    {%
      \atdummies  % preserve commands, but don't expand them
      \turnoffactive
      \otherbackslash
      \edef\writexrdef##1##2{%
	\write\auxfile{@@xrdef{#1-% #1 of \setref, expanded by the \edef
	  ##1}{##2}}% these are parameters of \writexrdef
      }%
      \toks0 = \expandafter{\thissection}%
      \immediate \writexrdef{title}{\the\toks0 }%
      \immediate \writexrdef{snt}{\csname #2\endcsname}% \Ynumbered etc.
      \writexrdef{pg}{\folio}% will be written later, during \shipout
    }%
  \fi
}
d5855 3
a5857 3
  \def\printedrefname{\ignorespaces #3}%
  \setbox1=\hbox{\printedmanual\unskip}%
  \setbox0=\hbox{\printedrefname\unskip}%
d5862 1
a5862 1
      \def\printedrefname{\ignorespaces #1}%
d5868 1
a5868 1
        \def\printedrefname{\ignorespaces #1}%
d5872 1
a5872 1
          \def\printedrefname{\refx{#1-title}{}}%
d5875 1
a5875 1
          \def\printedrefname{\ignorespaces #1}%
d5881 6
a5886 1
  % Make link in pdf output.
d5896 1
a5896 1
         goto name{\pdfmkpgn{#1}}%
d5902 2
a5903 26
  % Float references are printed completely differently: "Figure 1.2"
  % instead of "[somenode], p.3".  We distinguish them by the
  % LABEL-title being set to a magic string.
  {%
    % Have to otherify everything special to allow the \csname to
    % include an _ in the xref name, etc.
    \indexnofonts
    \turnoffactive
    \otherbackslash
    \expandafter\global\expandafter\let\expandafter\Xthisreftitle
      \csname XR#1-title\endcsname
  }%
  \iffloat\Xthisreftitle
    % If the user specified the print name (third arg) to the ref,
    % print it instead of our usual "Figure 1.2".
    \ifdim\wd0 = 0pt
      \refx{#1-snt}%
    \else
      \printedrefname
    \fi
    %
    % if the user also gave the printed manual name (fifth arg), append
    % "in MANUALNAME". 
    \ifdim \wd1 > 0pt
      \space \putwordin{} \cite{\printedmanual}%
    \fi
d5905 15
a5919 31
    % node/anchor (non-float) references.
    % 
    % If we use \unhbox0 and \unhbox1 to print the node names, TeX does not
    % insert empty discretionaries after hyphens, which means that it will
    % not find a line break at a hyphen in a node names.  Since some manuals
    % are best written with fairly long node names, containing hyphens, this
    % is a loss.  Therefore, we give the text of the node name again, so it
    % is as if TeX is seeing it for the first time.
    \ifdim \wd1 > 0pt
      \putwordsection{} ``\printedrefname'' \putwordin{} \cite{\printedmanual}%
    \else
      % _ (for example) has to be the character _ for the purposes of the
      % control sequence corresponding to the node, but it has to expand
      % into the usual \leavevmode...\vrule stuff for purposes of
      % printing. So we \turnoffactive for the \refx-snt, back on for the
      % printing, back off for the \refx-pg.
      {\turnoffactive \otherbackslash
       % Only output a following space if the -snt ref is nonempty; for
       % @@unnumbered and @@anchor, it won't be.
       \setbox2 = \hbox{\ignorespaces \refx{#1-snt}{}}%
       \ifdim \wd2 > 0pt \refx{#1-snt}\space\fi
      }%
      % output the `[mynode]' via a macro so it can be overridden.
      \xrefprintnodename\printedrefname
      %
      % But we always want a comma and a space:
      ,\space
      %
      % output the `page 3'.
      \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
    \fi
d5924 1
a5924 4
% This macro is called from \xrefX for the `[nodename]' part of xref
% output.  It's a separate macro only so it can be changed more easily,
% since square brackets don't work well in some documents.  Particularly
% one that Bob is working on :).
d5926 10
a5935 1
\def\xrefprintnodename#1{[#1]}
d5937 4
a5940 2
% Things referred to by \setref.
%
d5942 1
a5942 2
\def\Yomitfromtoc{}
\def\Ynumbered{%
d5953 2
a5954 1
\def\Yappendix{%
d5967 9
d5984 1
a5984 1
      \csname XR#1\endcsname
d6006 3
a6008 26
% This is the macro invoked by entries in the aux file.  Usually it's
% just a \def (we prepend XR to the control sequence name to avoid
% collisions).  But if this is a float type, we have more work to do.
%
\def\xrdef#1#2{%
  \expandafter\gdef\csname XR#1\endcsname{#2}% remember this xref value.
  %
  % Was that xref control sequence that we just defined for a float?
  \expandafter\iffloat\csname XR#1\endcsname
    % it was a float, and we have the (safe) float type in \iffloattype.
    \expandafter\let\expandafter\floatlist
      \csname floatlist\iffloattype\endcsname
    % 
    % Is this the first time we've seen this float type?
    \expandafter\ifx\floatlist\relax
      \toks0 = {\do}% yes, so just \do
    \else
      % had it before, so preserve previous elements in list.
      \toks0 = \expandafter{\floatlist\do}%
    \fi
    %
    % Remember this xref in the control sequence \floatlistFLOATTYPE,
    % for later use in \listoffloats.
    \expandafter\xdef\csname floatlist\iffloattype\endcsname{\the\toks0{#1}}%
  \fi
}
a6010 10
% 
\def\tryauxfile{%
  \openin 1 \jobname.aux
  \ifeof 1 \else
    \readauxfile
    \global\havexrefstrue
  \fi
  \closein 1
}

d6069 1
a6069 10
  % This is to support \ in node names and titles, since the \
  % characters end up in a \csname.  It's easier than
  % leaving it active and making its active definition an actual \
  % character.  What I don't understand is why it works in the *value*
  % of the xrdef.  Seems like it should be a catcode12 \, and that
  % should not typeset properly.  But it works, so I'm moving on for
  % now.  --karl, 15jan04.
  \catcode`\\=\other
  %
  % Make the characters 128-255 be printing characters.
d6079 8
a6086 1
  % @@ is our escape character in .aux files, and we need braces.
d6091 9
a6099 1
  \input \jobname.aux
d6103 1
a6103 2
\message{insertions,}
% including footnotes.
d6117 2
a6122 2
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
d6129 1
a6129 1
  \ifhmode\edef\@@sf{\spacefactor\the\spacefactor}\ptexslash\fi
d6140 2
a6141 2
% Oh yes, they do; otherwise, @@ifset (and anything else that uses
% \parseargline) fails inside footnotes because the tokens are fixed when
d6144 5
d6150 1
a6150 1
  \insert\footins\bgroup
d6186 27
a6212 17
% In case a @@footnote appears in a vbox, save the footnote text and create
% the real \insert just after the vbox finished.  Otherwise, the insertion
% would be lost.
% Similarily, if a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is finished.
% And the same can be done for other insert classes.  --kasal, 16nov03.

% Replace the \insert primitive by a cheating macro.
% Deeper inside, just make sure that the saved insertions are not spilled
% out prematurely.
%
\def\startsavinginserts{%
  \ifx \insert\ptexinsert
    \let\insert\saveinsert
  \else
    \let\checkinserts\relax
  \fi
d6215 3
a6217 2
% This \insert replacement works for both \insert\footins{foo} and
% \insert\footins\bgroup foo\egroup, but it doesn't work for \insert27{foo}.
d6219 1
a6219 38
\def\saveinsert#1{%
  \edef\next{\noexpand\savetobox \makeSAVEname#1}%
  \afterassignment\next
  % swallow the left brace
  \let\temp =
}
\def\makeSAVEname#1{\makecsname{SAVE\expandafter\gobble\string#1}}
\def\savetobox#1{\global\setbox#1 = \vbox\bgroup \unvbox#1}

\def\checksaveins#1{\ifvoid#1\else \placesaveins#1\fi}

\def\placesaveins#1{%
  \ptexinsert \csname\expandafter\gobblesave\string#1\endcsname
    {\box#1}%
}

% eat @@SAVE -- beware, all of them have catcode \other:
{
  \def\dospecials{\do S\do A\do V\do E} \uncatcodespecials  %  ;-)
  \gdef\gobblesave @@SAVE{}
}

% initialization:
\def\newsaveins #1{%
  \edef\next{\noexpand\newsaveinsX \makeSAVEname#1}%
  \next
}
\def\newsaveinsX #1{%
  \csname newbox\endcsname #1%
  \expandafter\def\expandafter\checkinserts\expandafter{\checkinserts
    \checksaveins #1}%
}

% initialize:
\let\checkinserts\empty
\newsaveins\footins
\newsaveins\margin

d6229 1
a6234 1
\closein 1
d6270 1
a6270 1
    % above and below.
a6289 243
% @@float FLOATTYPE,LOC ... @@end float for displayed figures, tables, etc.
% We don't actually implement floating yet, we just plop the float "here".
% But it seemed the best name for the future.
% 
\envparseargdef\float{\dofloat #1,,,\finish}

% #1 is the optional FLOATTYPE, the text label for this float, typically
% "Figure", "Table", "Example", etc.  Can't contain commas.  If omitted,
% this float will not be numbered and cannot be referred to.
% 
% #2 is the optional xref label.  Also must be present for the float to
% be referable.
% 
% #3 is the optional positioning argument; for now, it is ignored.  It
% will somehow specify the positions allowed to float to (here, top, bottom).
% 
% We keep a separate counter for each FLOATTYPE, which we reset at each
% chapter-level command.
\let\resetallfloatnos=\empty
%
\def\dofloat#1,#2,#3,#4\finish{%
  \let\thiscaption=\empty
  \let\thisshortcaption=\empty
  %
  % don't lose footnotes inside @@float.
  \startsavinginserts
  %
  \vtop\bgroup
    \def\floattype{#1}%
    \def\floatlabel{#2}%
    \def\floatloc{#3}% we do nothing with this yet.
    %
    \ifx\floattype\empty
      \let\safefloattype=\empty
    \else
      {%
        % the floattype might have accents or other special characters,
        % but we need to use it in a control sequence name.
        \indexnofonts
        \turnoffactive
        \xdef\safefloattype{\floattype}%
      }%
    \fi
    %
    % If label is given but no type, we handle that as the empty type.
    \ifx\floatlabel\empty \else
      % We want each FLOATTYPE to be numbered separately (Figure 1,
      % Table 1, Figure 2, ...).  (And if no label, no number.)
      % 
      \expandafter\getfloatno\csname\safefloattype floatno\endcsname
      \global\advance\floatno by 1
      %
      {%
        % This magic value for \thissection is output by \setref as the
        % XREFLABEL-title value.  \xrefX uses it to distinguish float
        % labels (which have a completely different output format) from
        % node and anchor labels.  And \xrdef uses it to construct the
        % lists of floats.
        % 
        \edef\thissection{\floatmagic=\safefloattype}%
        \setref{\floatlabel}{Yfloat}%
      }%
    \fi
    %
    % start with \parskip glue, I guess.
    \vskip\parskip
    %
    % Don't suppress indentation if a float happens to start a section.
    \restorefirstparagraphindent
}

% we have these possibilities:
% @@float Foo,lbl & @@caption{Cap}: Foo 1.1: Cap
% @@float Foo,lbl & no caption:    Foo 1.1
% @@float Foo & @@caption{Cap}:     Foo: Cap
% @@float Foo & no caption:        Foo
% @@float ,lbl & Caption{Cap}:     1.1: Cap
% @@float ,lbl & no caption:       1.1
% @@float & @@caption{Cap}:         Cap
% @@float & no caption:
%
\def\Efloat{%
    \let\floatident = \empty
    %
    % In all cases, if we have a float type, it comes first.
    \ifx\floattype\empty \else \def\floatident{\floattype}\fi
    %
    % If we have an xref label, the number comes next.
    \ifx\floatlabel\empty \else
      \ifx\floattype\empty \else % if also had float type, need tie first.
        \appendtomacro\floatident{\tie}%
      \fi
      % the number.
      \appendtomacro\floatident{\chaplevelprefix\the\floatno}%
    \fi
    %
    % Start the printed caption with what we've constructed in
    % \floatident, but keep it separate; we need \floatident again.
    \let\captionline = \floatident
    %
    \ifx\thiscaption\empty \else
      \ifx\floatident\empty \else
	\appendtomacro\captionline{: }% had ident, so need a colon between
      \fi
      %
      % caption text.
      \appendtomacro\captionline\thiscaption
    \fi
    %
    % If we have anything to print, print it, with space before.
    % Eventually this needs to become an \insert.
    \ifx\captionline\empty \else
      \vskip.5\parskip
      \captionline
    \fi
    %
    % If have an xref label, write the list of floats info.  Do this
    % after the caption, to avoid chance of it being a breakpoint.
    \ifx\floatlabel\empty \else
      % Write the text that goes in the lof to the aux file as
      % \floatlabel-lof.  Besides \floatident, we include the short
      % caption if specified, else the full caption if specified, else nothing.
      {%
        \atdummies \turnoffactive \otherbackslash
        \immediate\write\auxfile{@@xrdef{\floatlabel-lof}{%
          \floatident
          \ifx\thisshortcaption\empty
            \ifx\thiscaption\empty \else : \thiscaption \fi
          \else
            : \thisshortcaption
          \fi
        }}%
      }%
    \fi
    %
    % Space below caption, if we printed anything.
    \ifx\printedsomething\empty \else \vskip\parskip \fi
  \egroup  % end of \vtop
  \checkinserts
}

% Append the tokens #2 to the definition of macro #1, not expanding either.
% 
\newtoks\appendtomacroAtoks
\newtoks\appendtomacroBtoks
\def\appendtomacro#1#2{%
  \appendtomacroAtoks = \expandafter{#1}%
  \appendtomacroBtoks = {#2}%
  \edef#1{\the\appendtomacroAtoks \the\appendtomacroBtoks}%
}

% @@caption, @@shortcaption are easy.
% 
\long\def\caption#1{\checkenv\float \def\thiscaption{#1}}
\def\shortcaption#1{\checkenv\float \def\thisshortcaption{#1}}

% The parameter is the control sequence identifying the counter we are
% going to use.  Create it if it doesn't exist and assign it to \floatno.
\def\getfloatno#1{%
  \ifx#1\relax
      % Haven't seen this figure type before.
      \csname newcount\endcsname #1%
      %
      % Remember to reset this floatno at the next chap.
      \expandafter\gdef\expandafter\resetallfloatnos
        \expandafter{\resetallfloatnos #1=0 }%
  \fi
  \let\floatno#1%
}

% \setref calls this to get the XREFLABEL-snt value.  We want an @@xref
% to the FLOATLABEL to expand to "Figure 3.1".  We call \setref when we
% first read the @@float command.
% 
\def\Yfloat{\floattype@@tie \chaplevelprefix\the\floatno}%

% Magic string used for the XREFLABEL-title value, so \xrefX can
% distinguish floats from other xref types.
\def\floatmagic{!!float!!}

% #1 is the control sequence we are passed; we expand into a conditional
% which is true if #1 represents a float ref.  That is, the magic
% \thissection value which we \setref above.
% 
\def\iffloat#1{\expandafter\doiffloat#1==\finish}
%
% #1 is (maybe) the \floatmagic string.  If so, #2 will be the
% (safe) float type for this float.  We set \iffloattype to #2.
% 
\def\doiffloat#1=#2=#3\finish{%
  \def\temp{#1}%
  \def\iffloattype{#2}%
  \ifx\temp\floatmagic
}

% @@listoffloats FLOATTYPE - print a list of floats like a table of contents.
% 
\parseargdef\listoffloats{%
  \def\floattype{#1}% floattype
  {%
    % the floattype might have accents or other special characters,
    % but we need to use it in a control sequence name.
    \indexnofonts
    \turnoffactive
    \xdef\safefloattype{\floattype}%
  }%
  %
  % \xrdef saves the floats as a \do-list in \floatlistSAFEFLOATTYPE.
  \expandafter\ifx\csname floatlist\safefloattype\endcsname \relax
    \ifhavexrefs
      % if the user said @@listoffloats foo but never @@float foo.
      \message{\linenumber No `\safefloattype' floats to list.}%
    \fi
  \else
    \begingroup
      \leftskip=\tocindent  % indent these entries like a toc
      \let\do=\listoffloatsdo
      \csname floatlist\safefloattype\endcsname
    \endgroup
  \fi
}

% This is called on each entry in a list of floats.  We're passed the
% xref label, in the form LABEL-title, which is how we save it in the
% aux file.  We strip off the -title and look up \XRLABEL-lof, which
% has the text we're supposed to typeset here.
% 
% Figures without xref labels will not be included in the list (since
% they won't appear in the aux file).
% 
\def\listoffloatsdo#1{\listoffloatsdoentry#1\finish}
\def\listoffloatsdoentry#1-title\finish{{%
  % Can't fully expand XR#1-lof because it can contain anything.  Just
  % pass the control sequence.  On the other hand, XR#1-pg is just the
  % page number, and we want to fully expand that so we can get a link
  % in pdf output.
  \toksA = \expandafter{\csname XR#1-lof\endcsname}%
  %
  % use the same \entry macro we use to generate the TOC and index.
  \edef\writeentry{\noexpand\entry{\the\toksA}{\csname XR#1-pg\endcsname}}%
  \writeentry
}}

d6298 2
a6299 1
\parseargdef\documentlanguage{%
d6301 10
a6310 9
    % Read the file if it exists.
    \openin 1 txi-#1.tex
    \ifeof 1
      \errhelp = \nolanghelp
      \errmessage{Cannot read language file txi-#1.tex}%
    \else
      \input txi-#1.tex
    \fi
    \closein 1
d6358 1
a6358 1
%
d6426 1
a6426 1
  % Double-side printing via postscript on Laserjet 4050
d6467 1
a6467 1
% A specific text layout, 24x15cm overall, intended for A4 paper.
d6493 2
a6494 1
\parseargdef\pagesizes{\pagesizesyyy #1,,\finish}
d6541 2
a6542 2
% This macro is used to make a character print one way in \tt
% (where it can probably be output as-is), and another way in other fonts,
d6590 7
d6605 1
a6605 1
% \backslashcurfont outputs one backslash character in current font,
d6607 1
a6607 2
\global\chardef\backslashcurfont=`\\
\global\let\rawbackslashxx=\backslashcurfont  % let existing .??s files work
d6609 1
a6609 1
% \rawbackslash defines an active \ to do \backslashcurfont.
d6613 1
a6613 1
 @@gdef@@rawbackslash{@@let\=@@backslashcurfont}
d6621 1
a6621 1
\def\normalbackslash{{\tt\backslashcurfont}}
a6637 1
  @@unsepspaces
d6643 1
a6643 1
%
d6672 1
a6672 1
% These look ok in all fonts, so just make them not special.
d6677 4
a6688 6

@@c vim:sw=2:

@@ignore
   arch-tag: e1b36e32-c96e-4135-a41a-0b2efa2ea115
@@end ignore
@


1.6.44.1
log
@Merge mainline to intercu branch.
@
text
@d6 1
a6 1
\def\texinfoversion{2004-02-19.09}
d9 1
a9 2
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
% Foundation, Inc.
d26 4
a29 4
% As a special exception, when this file is read by TeX when processing
% a Texinfo source document, you may use the result without
% restriction.  (This has been our intent since Texinfo was invented.)
% 
d32 2
a33 1
%   http://www.gnu.org/software/texinfo/ (the Texinfo home page), or
d35 6
a40 2
%     (and all CTAN mirrors, see http://www.ctan.org).
% The texinfo.tex in any given distribution could well be out
d42 1
a42 1
%
d58 1
a58 1
%
a61 3
% 
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.

d74 1
a74 1
% We never want plain's \outer definition of \+ in Texinfo.
d78 1
a78 1
% Save some plain tex macros whose names we will redefine.
a87 1
\let\ptexfootnote=\footnote
a90 3
\let\ptexindent=\indent
\let\ptexnoindent=\noindent
\let\ptexinsert=\insert
a94 1
\let\ptexslash=\/
a101 9
% Use TeX 3.0's \inputlineno to get the line number, for better error
% messages, but if we're using an old version of TeX, don't do anything.
%
\ifx\inputlineno\thisisundefined
  \let\linenumber = \empty % Pre-3.0.
\else
  \def\linenumber{l.\the\inputlineno:\space}
\fi

d140 1
d142 1
d149 1
d153 1
a155 4
\chardef\spaceChar = `\ %
\chardef\spacecat = 10
\def\spaceisspace{\catcode\spaceChar=\spacecat}

d160 4
a163 2
% The following is used inside several \edef's.
\def\makecsname#1{\expandafter\noexpand\csname#1\endcsname}
d166 4
a169 8
\hyphenation{
  Flor-i-da Ghost-script Ghost-view Mac-OS ap-pen-dix bit-map bit-maps
  data-base data-bases eshell fall-ing half-way long-est man-u-script
  man-u-scripts mini-buf-fer mini-buf-fers over-view par-a-digm
  par-a-digms rec-tan-gu-lar ro-bot-ics se-vere-ly set-up spa-ces
  stand-alone strong-est time-stamp time-stamps which-ever white-space
  wide-spread wrap-around
}
a175 35
% For a final copy, take out the rectangles
% that mark overfull boxes (in case you have decided
% that the text looks ok even though it passes the margin).
%
\def\finalout{\overfullrule=0pt}

% @@| inserts a changebar to the left of the current line.  It should
% surround any changed text.  This approach does *not* work if the
% change spans more than two lines of output.  To handle that, we would
% have adopt a much more difficult approach (putting marks into the main
% vertical list for the beginning and end of each change).
%
\def\|{%
  % \vadjust can only be used in horizontal mode.
  \leavevmode
  %
  % Append this vertical mode material after the current line in the output.
  \vadjust{%
    % We want to insert a rule with the height and depth of the current
    % leading; that is exactly what \strutbox is supposed to record.
    \vskip-\baselineskip
    %
    % \vadjust-items are inserted at the left edge of the type.  So
    % the \llap here moves out into the left-hand margin.
    \llap{%
      %
      % For a thicker or thinner bar, change the `1pt'.
      \vrule height\baselineskip width1pt
      %
      % This is the space between the bar and the text.
      \hskip 12pt
    }%
  }%
}

d200 1
a200 1
  \errorcontextlines16
d205 1
a205 1
%
d258 1
a258 1
      \ifpdfmakepagedest \pdfdest name{\the\pageno} xyz\fi
d339 2
a340 3
\def\parsearg{\parseargusing{}}
\def\parseargusing#1#2{%
  \def\next{#2}%
d343 12
a354 3
    \spaceisspace
    #1%
    \parseargline\empty% Insert the \empty token, see \finishparsearg below.
d357 4
d364 8
a371 1
    \argremovecomment #1\comment\ArgTerm%
d375 6
a380 3
% First remove any @@comment, then any @@c comment.
\def\argremovecomment#1\comment#2\ArgTerm{\argremovec #1\c\ArgTerm}
\def\argremovec#1\c#2\ArgTerm{\argcheckspaces#1\^^M\ArgTerm}
d382 1
a382 3
% Each occurence of `\^^M' or `<space>\^^M' is replaced by a single space.
%
% \argremovec might leave us with trailing space, e.g.,
d384 11
a394 2
% This space token undergoes the same procedure and is eventually removed
% by \finishparsearg.
d396 6
a401 13
\def\argcheckspaces#1\^^M{\argcheckspacesX#1\^^M \^^M}
\def\argcheckspacesX#1 \^^M{\argcheckspacesY#1\^^M}
\def\argcheckspacesY#1\^^M#2\^^M#3\ArgTerm{%
  \def\temp{#3}%
  \ifx\temp\empty
    % We cannot use \next here, as it holds the macro to run;
    % thus we reuse \temp.
    \let\temp\finishparsearg
  \else
    \let\temp\argcheckspaces
  \fi
  % Put the space token in:
  \temp#1 #3\ArgTerm
d404 1
a404 7
% If a _delimited_ argument is enclosed in braces, they get stripped; so
% to get _exactly_ the rest of the line, we had to prevent such situation.
% We prepended an \empty token at the very beginning and we expand it now,
% just before passing the control to \next.
% (Similarily, we have to think about #3 of \argcheckspacesY above: it is
% either the null string, or it ends with \^^M---thus there is no danger
% that a pair of braces would be stripped.
d406 4
a409 3
% But first, we have to remove the trailing space token.
%
\def\finishparsearg#1 \ArgTerm{\expandafter\next\expandafter{#1}}
a410 7
% \parseargdef\foo{...}
%	is roughly equivalent to
% \def\foo{\parsearg\Xfoo}
% \def\Xfoo#1{...}
%
% Actually, I use \csname\string\foo\endcsname, ie. \\foo, as it is my
% favourite TeX trick.  --kasal, 16nov03
d412 1
a412 7
\def\parseargdef#1{%
  \expandafter \doparseargdef \csname\string#1\endcsname #1%
}
\def\doparseargdef#1#2{%
  \def#2{\parsearg#1}%
  \def#1##1%
}
d414 6
a419 4
% Several utility definitions with active space:
{
  \obeyspaces
  \gdef\obeyedspace{ }
d421 2
a422 12
  % Make each space character in the input produce a normal interword
  % space in the output.  Don't allow a line break at this space, as this
  % is used only in environments like @@example, where each line of input
  % should produce a line of output anyway.
  %
  \gdef\sepspaces{\obeyspaces\let =\tie}

  % If an index command is used in an @@example environment, any spaces
  % therein should become regular spaces in the raw index file, not the
  % expansion of \tie (\leavevmode \penalty \@@M \ ).
  \gdef\unsepspaces{\let =\space}
}
d424 1
d426 4
a429 1
\def\flushcr{\ifx\par\lisppar \def\next##1{}\else \let\next=\relax \fi \next}
d431 15
a445 30
% Define the framework for environments in texinfo.tex.  It's used like this:
% 
%   \envdef\foo{...}
%   \def\Efoo{...}
%   
% It's the responsibility of \envdef to insert \begingroup before the
% actual body; @@end closes the group after calling \Efoo.  \envdef also
% defines \thisenv, so the current environment is known; @@end checks
% whether the environment name matches.  The \checkenv macro can also be
% used to check whether the current environment is the one expected.
% 
% Non-false conditionals (@@iftex, @@ifset) don't fit into this, so they
% are not treated as enviroments; they don't open a group.  (The
% implementation of @@end takes care not to call \endgroup in this
% special case.)


% At runtime, environments start with this:
\def\startenvironment#1{\begingroup\def\thisenv{#1}}
% initialize
\let\thisenv\empty

% ... but they get defined via ``\envdef\foo{...}'':
\long\def\envdef#1#2{\def#1{\startenvironment#1#2}}
\def\envparseargdef#1#2{\parseargdef#1{\startenvironment#1#2}}

% Check whether we're in the right environment:
\def\checkenv#1{%
  \def\temp{#1}%
  \ifx\thisenv\temp
d447 2
a448 1
    \badenverr
d452 3
a454 2
% Evironment mismatch, #1 expected:
\def\badenverr{%
d456 1
a456 9
  \errmessage{This command can appear only \inenvironment\temp,
    not \inenvironment\thisenv}%
}
\def\inenvironment#1{%
  \ifx#1\empty
    out of any environment%
  \else
    in environment \expandafter\string#1%
  \fi
d459 1
a459 2
% @@end foo executes the definition of \Efoo.
% But first, it executes a specialized version of \checkenv
d461 2
a462 8
\parseargdef\end{%
  \if 1\csname iscond.#1\endcsname
  \else
    % The general wording of \badenverr may not be ideal, but... --kasal, 06nov03
    \expandafter\checkenv\csname#1\endcsname
    \csname E#1\endcsname
    \endgroup
  \fi
a464 2
\newhelp\EMsimple{Press RETURN to continue.}

a495 3
% @@comma{} to avoid , parsing problems.
\let\comma = ,

d505 1
a505 1
% Other special characters: @@questiondown @@exclamdown @@ordf @@ordm
a508 2
\def\ordf{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{a}}}
\def\ordm{\leavevmode\raise1ex\hbox{\selectfonts\lllsize \underbar{o}}}
a520 19
% The \TeX{} logo, as in plain, but resetting the spacing so that a
% period following counts as ending a sentence.  (Idea found in latex.)
% 
\edef\TeX{\TeX \spacefactor=3000 }

% @@LaTeX{} logo.  Not quite the same results as the definition in
% latex.ltx, since we use a different font for the raised A; it's most
% convenient for us to use an explicitly smaller font, rather than using
% the \scriptstyle font (since we don't reset \scriptstyle and
% \scriptscriptstyle).
% 
\def\LaTeX{%
  L\kern-.36em
  {\setbox0=\hbox{T}%
   \vbox to \ht0{\hbox{\selectfonts\lllsize A}\vss}}%
  \kern-.15em
  \TeX
}

a538 3
% @@/ allows a line break.
\let\/=\allowbreak

d567 1
a567 1
%
d571 2
a572 2
\envdef\group{%
  \ifnum\catcode`\^^M=\active \else
d576 22
a597 1
  \startsavinginserts
d600 24
a632 26
% The \vtop produces a box with normal height and large depth; thus, TeX puts
% \baselineskip glue before it, and (when the next line of text is done)
% \lineskip glue after it.  Thus, space below is not quite equal to space
% above.  But it's pretty close.
\def\Egroup{%
    % To get correct interline space between the last line of the group
    % and the first line afterwards, we have to propagate \prevdepth.
    \endgraf % Not \par, as it may have been set to \lisppar.
    \global\dimen1 = \prevdepth
  \egroup           % End the \vtop.
  % \dimen0 is the vertical size of the group's box.
  \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
  % \dimen2 is how much space is left on the page (more or less).
  \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
  % if the group doesn't fit on the current page, and it's a big big
  % group, force a page break.
  \ifdim \dimen0 > \dimen2
    \ifdim \pagetotal < \vfilllimit\pageheight
      \page
    \fi
  \fi
  \box\groupbox
  \prevdepth = \dimen1
  \checkinserts
}
%
d645 2
d648 1
a648 1
%\parseargdef\need{\par %
d656 1
a656 1
\parseargdef\need{%
d695 1
a695 1
% @@br   forces paragraph break (and is undocumented).
d699 27
a725 1
% @@page forces the start of a new page.
d737 2
a738 1
\parseargdef\exdent{\hfil\break\hbox{\kern -\exdentamount{\rm#1}}\hfil\break}
d741 3
a743 2
\parseargdef\nofillexdent{{\advance \leftskip by -\exdentamount
  \leftline{\hskip\leftskip{\rm#1}}}}
d774 1
a774 1
%
d777 1
a777 1
  \setbox0 = \hbox{\ignorespaces #2}%
d795 2
a796 13
%
\def\include{\parseargusing\filenamecatcodes\includezzz}
\def\includezzz#1{%
  \pushthisfilestack
  \def\thisfile{#1}%
  {%
    \makevalueexpandable
    \def\temp{\input #1 }%
    \expandafter
  }\temp
  \popthisfilestack
}
\def\filenamecatcodes{%
d805 8
a812 16
  \catcode`-=\other
}

\def\pushthisfilestack{%
  \expandafter\pushthisfilestackX\popthisfilestack\StackTerm
}
\def\pushthisfilestackX{%
  \expandafter\pushthisfilestackY\thisfile\StackTerm
}
\def\pushthisfilestackY #1\StackTerm #2\StackTerm {%
  \gdef\popthisfilestack{\gdef\thisfile{#1}\gdef\popthisfilestack{#2}}%
}

\def\popthisfilestack{\errthisfilestackempty}
\def\errthisfilestackempty{\errmessage{Internal error:
  the stack of filenames is empty.}}
d819 8
a826 18
\parseargdef\center{%
  \ifhmode
    \let\next\centerH
  \else
    \let\next\centerV
  \fi
  \next{\hfil \ignorespaces#1\unskip \hfil}%
}
\def\centerH#1{%
  {%
    \hfil\break
    \advance\hsize by -\leftskip
    \advance\hsize by -\rightskip
    \line{#1}%
    \break
  }%
}
\def\centerV#1{\line{\kern\leftskip #1\kern\rightskip}}
d830 2
a831 1
\parseargdef\sp{\vskip #1\baselineskip}
d846 2
a847 3
% NCHARS can also be the word `asis' or `none'.
% We cannot feasibly implement @@paragraphindent asis, though.
%
d851 2
a852 1
\parseargdef\paragraphindent{%
d869 2
a870 1
\parseargdef\exampleindent{%
a881 53
% @@firstparagraphindent WORD
% If WORD is `none', then suppress indentation of the first paragraph
% after a section heading.  If WORD is `insert', then do indent at such
% paragraphs.
%
% The paragraph indentation is suppressed or not by calling
% \suppressfirstparagraphindent, which the sectioning commands do.
% We switch the definition of this back and forth according to WORD.
% By default, we suppress indentation.
%
\def\suppressfirstparagraphindent{\dosuppressfirstparagraphindent}
\def\insertword{insert}
%
\parseargdef\firstparagraphindent{%
  \def\temp{#1}%
  \ifx\temp\noneword
    \let\suppressfirstparagraphindent = \dosuppressfirstparagraphindent
  \else\ifx\temp\insertword
    \let\suppressfirstparagraphindent = \relax
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@firstparagraphindent option `\temp'}%
  \fi\fi
}

% Here is how we actually suppress indentation.  Redefine \everypar to
% \kern backwards by \parindent, and then reset itself to empty.
%
% We also make \indent itself not actually do anything until the next
% paragraph.
%
\gdef\dosuppressfirstparagraphindent{%
  \gdef\indent{%
    \restorefirstparagraphindent
    \indent
  }%
  \gdef\noindent{%
    \restorefirstparagraphindent
    \noindent
  }%
  \global\everypar = {%
    \kern -\parindent
    \restorefirstparagraphindent
  }%
}

\gdef\restorefirstparagraphindent{%
  \global \let \indent = \ptexindent
  \global \let \noindent = \ptexnoindent
  \global \everypar = {}%
}


d887 5
d895 9
a903 9
% _ active, and distinguish by seeing if the current family is \slfam,
% which is what @@var uses.
{
  \catcode\underChar = \active
  \gdef\mathunderscore{%
    \catcode\underChar=\active
    \def_{\ifnum\fam=\slfam \_\else\sb\fi}%
  }
}
d908 1
a908 1
%
d914 1
a914 1
  \mathunderscore
d917 2
a918 3
  $\finishmath
}
\def\finishmath#1{#1$\endgroup}  % Close the group opened by \tex.
d921 3
a923 3
% We have to reset their definitions in case the @@math was an argument
% to a command which sets the catcodes (such as @@item or @@section).
%
d938 2
a939 27
\def\bullet{$\ptexbullet$}
\def\minus{$-$}

% @@dots{} outputs an ellipsis using the current font.
% We do .5em per period so that it has the same spacing in a typewriter
% font as three actual period characters.
%
\def\dots{%
  \leavevmode
  \hbox to 1.5em{%
    \hskip 0pt plus 0.25fil
    .\hfil.\hfil.%
    \hskip 0pt plus 0.5fil
  }%
}

% @@enddots{} is an end-of-sentence ellipsis.
%
\def\enddots{%
  \dots
  \spacefactor=3000
}

% @@comma{} is so commas can be inserted into text without messing up
% Texinfo's parsing.
% 
\let\comma = ,
a954 1
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
d956 1
a956 3
     \tryauxfile
     % Open the new aux file.  TeX will close it automatically at exit.
     \immediate\openout\auxfile=\jobname.aux
d959 2
a960 1
   \let\setfilename=\comment % Ignore extra @@setfilename cmds.
d964 1
d966 3
a968 2
   \ifeof 1 \else \input texinfo.cnf \fi
   \closein 1
a1014 1
  \pdfcatalog{/PageMode /UseOutlines}%
d1035 1
a1035 7
  \def\pdfmkdest#1{{%
    % We have to set dummies so commands such as @@code in a section title
    % aren't expanded.
    \atdummies
    \normalturnoffactive
    \pdfdest name{#1} xyz%
  }}
d1044 1
a1044 1
    \advance\tempnum by 1
d1046 5
a1050 20
  %
  % #1 is the section text.  #2 is the pdf expression for the number
  % of subentries (or empty, for subsubsections).  #3 is the node
  % text, which might be empty if this toc entry had no
  % corresponding node.  #4 is the page number.
  % 
  \def\dopdfoutline#1#2#3#4{%
    % Generate a link to the node text if that exists; else, use the
    % page number.  We could generate a destination for the section
    % text in the case where a section has no node, but it doesn't
    % seem worthwhile, since most documents are normally structured.
    \def\pdfoutlinedest{#3}%
    \ifx\pdfoutlinedest\empty \def\pdfoutlinedest{#4}\fi
    %
    \pdfoutline goto name{\pdfmkpgn{\pdfoutlinedest}}#2{#1}%
  }
  %
  \def\pdfmakeoutlines{%
    \begingroup
      % Thanh's hack / proper braces in bookmarks
d1054 9
a1062 32
      % Read toc silently, to get counts of subentries for \pdfoutline.
      \def\numchapentry##1##2##3##4{%
	\def\thischapnum{##2}%
	\let\thissecnum\empty
	\let\thissubsecnum\empty
      }%
      \def\numsecentry##1##2##3##4{%
	\advancenumber{chap\thischapnum}%
	\def\thissecnum{##2}%
	\let\thissubsecnum\empty
      }%
      \def\numsubsecentry##1##2##3##4{%
	\advancenumber{sec\thissecnum}%
	\def\thissubsecnum{##2}%
      }%
      \def\numsubsubsecentry##1##2##3##4{%
	\advancenumber{subsec\thissubsecnum}%
      }%
      \let\thischapnum\empty
      \let\thissecnum\empty
      \let\thissubsecnum\empty
      %
      % use \def rather than \let here because we redefine \chapentry et
      % al. a second time, below.
      \def\appentry{\numchapentry}%
      \def\appsecentry{\numsecentry}%
      \def\appsubsecentry{\numsubsecentry}%
      \def\appsubsubsecentry{\numsubsubsecentry}%
      \def\unnchapentry{\numchapentry}%
      \def\unnsecentry{\numsecentry}%
      \def\unnsubsecentry{\numsubsecentry}%
      \def\unnsubsubsecentry{\numsubsubsecentry}%
d1064 13
d1078 1
a1078 3
      % Read toc second time, this time actually producing the outlines.
      % The `-' means take the \expnumber as the absolute number of
      % subentries, which we calculated on our first read of the .toc above.
a1079 19
      % We use the node names as the destinations.
      \def\numchapentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{chap##2}}{##3}{##4}}%
      \def\numsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{sec##2}}{##3}{##4}}%
      \def\numsubsecentry##1##2##3##4{%
        \dopdfoutline{##1}{count-\expnumber{subsec##2}}{##3}{##4}}%
      \def\numsubsubsecentry##1##2##3##4{% count is always zero
        \dopdfoutline{##1}{}{##3}{##4}}%
      %
      % PDF outlines are displayed using system fonts, instead of
      % document fonts.  Therefore we cannot use special characters,
      % since the encoding is unknown.  For example, the eogonek from
      % Latin 2 (0xea) gets translated to a | character.  Info from
      % Staszek Wawrykiewicz, 19 Jan 2004 04:09:24 +0100.
      % 
      % xx to do this right, we have to translate 8-bit characters to
      % their "best" equivalent, based on the @@documentencoding.  Right
      % now, I guess we'll just let the pdf reader have its way.
d1081 1
d1084 2
a1085 3
    \endgroup
  }
  %
d1094 1
a1094 1
      \startlink attr{/Border [0 0 0]}
d1116 1
d1134 1
a1134 1
      \makevalueexpandable
d1138 1
d1145 1
a1145 1
    \expandafter\poptoks\the\toksA|ENDTOKS|\relax
d1149 1
a1149 1
    \else\ifx\first7\adn7 \else\ifx\first8\adn8 \else\ifx\first9\adn9
d1169 1
a1169 19

% Change the current font style to #1, remembering it in \curfontstyle.
% For now, we do not accumulate font styles: @@b{@@i{foo}} prints foo in
% italics, not bold italics.
% 
\def\setfontstyle#1{%
  \def\curfontstyle{#1}% not as a control sequence, because we are \edef'd.
  \csname ten#1\endcsname  % change the current font
}

% Select #1 fonts with the current style.
% 
\def\selectfonts#1{\csname #1fonts\endcsname \csname\curfontstyle\endcsname}

\def\rm{\fam=0 \setfontstyle{rm}}
\def\it{\fam=\itfam \setfontstyle{it}}
\def\sl{\fam=\slfam \setfontstyle{sl}}
\def\bf{\fam=\bffam \setfontstyle{bf}}
\def\tt{\fam=\ttfam \setfontstyle{tt}}
d1172 1
a1172 1
% So we set up a \sf.
d1174 1
a1174 1
\def\sf{\fam=\sffam \setfontstyle{sf}}
d1177 2
a1178 2
% We don't need math for this font style.
\def\ttsl{\setfontstyle{ttsl}}
a1228 1
% Text fonts (11.2pt, magstep1).
d1240 4
d1253 2
a1254 2
% A few fonts for @@defun names and args.
\setfont\defbf\bfshape{10}{\magstep1}
d1256 1
a1256 2
\setfont\defttsl\ttslshape{10}{\magstep1}
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \let\tenttsl=\defttsl \bf}
d1282 1
a1282 1
% Fonts for title page (20.4pt):
d1328 1
a1328 1
\setfont\ssecsc\scbshape{10}{1315}
d1331 2
a1332 12

% Reduced fonts for @@acro in text (10pt).
\setfont\reducedrm\rmshape{10}{1000}
\setfont\reducedtt\ttshape{10}{1000}
\setfont\reducedbf\bfshape{10}{1000}
\setfont\reducedit\itshape{10}{1000}
\setfont\reducedsl\slshape{10}{1000}
\setfont\reducedsf\sfshape{10}{1000}
\setfont\reducedsc\scshape{10}{1000}
\setfont\reducedttsl\ttslshape{10}{1000}
\font\reducedi=cmmi10
\font\reducedsy=cmsy10
d1347 5
a1351 10
% of just \STYLE.  We do this because \STYLE needs to also set the
% current \fam for math mode.  Our \STYLE (e.g., \rm) commands hardwire
% \tenSTYLE to set the current font.
% 
% Each font-changing command also sets the names \lsize (one size lower)
% and \lllsize (three sizes lower).  These relative commands are used in
% the LaTeX logo and acronyms.
% 
% This all needs generalizing, badly.
% 
d1355 1
a1355 3
  \let\tensf=\textsf \let\teni=\texti \let\tensy=\textsy
  \let\tenttsl=\textttsl
  \def\lsize{reduced}\def\lllsize{smaller}%
a1361 1
  \def\lsize{chap}\def\lllsize{subsec}%
a1367 1
  \def\lsize{sec}\def\lllsize{text}%
d1372 1
a1372 3
  \let\tensf=\secsf \let\teni=\seci \let\tensy=\secsy
  \let\tenttsl=\secttsl
  \def\lsize{subsec}\def\lllsize{reduced}%
d1377 1
a1377 3
  \let\tensf=\ssecsf \let\teni=\sseci \let\tensy=\ssecsy
  \let\tenttsl=\ssecttsl
  \def\lsize{text}\def\lllsize{small}%
d1379 1
a1379 8
\let\subsubsecfonts = \subsecfonts
\def\reducedfonts{%
  \let\tenrm=\reducedrm \let\tenit=\reducedit \let\tensl=\reducedsl
  \let\tenbf=\reducedbf \let\tentt=\reducedtt \let\reducedcaps=\reducedsc
  \let\tensf=\reducedsf \let\teni=\reducedi \let\tensy=\reducedsy
  \let\tenttsl=\reducedttsl
  \def\lsize{small}\def\lllsize{smaller}%
  \resetmathfonts \setleading{10.5pt}}
a1384 1
  \def\lsize{smaller}\def\lllsize{smaller}%
a1390 1
  \def\lsize{smaller}\def\lllsize{smaller}%
d1399 1
a1399 1
% If we use \scriptfonts (8pt), then we can fit this many characters:
d1403 1
a1403 1
%
d1406 3
a1408 2
%
% I wish the USA used A4 paper.
d1414 1
a1414 1
\textfonts \rm
d1425 1
a1425 1
\setfont\shortcontbf\bfshape{10}{\magstep1}  % no cmb12
d1434 1
a1434 2
\def\smartitalicx{\ifx\next,\else\ifx\next-\else\ifx\next.\else
                    \ptexslash\fi\fi\fi}
a1437 8
% like \smartslanted except unconditionally uses \ttsl.
% @@var is set to this for defun arguments.
\def\ttslanted#1{{\ttsl #1}\futurelet\next\smartitalicx}

% like \smartslanted except unconditionally use \sl.  We never want
% ttsl for book titles, do we?
\def\cite#1{{\sl #1}\futurelet\next\smartitalicx}

d1442 1
d1457 1
a1457 1
%
d1469 1
d1510 1
a1510 1
% We *must* turn on hyphenation at `-' and `_' in @@code.
d1528 4
d1555 2
a1556 1
\parseargdef\kbdinputstyle{%
d1566 1
a1566 1
    \errmessage{Unknown @@kbdinputstyle option `\arg'}%
d1617 1
a1617 1
%
d1656 2
a1657 8
\def\acronym#1{\doacronym #1,,\finish}
\def\doacronym#1,#2,#3\finish{%
  {\selectfonts\lsize #1}%
  \def\temp{#2}%
  \ifx\temp\empty \else
    \space ({\unsepspaces \ignorespaces \temp \unskip})%
  \fi
}
d1659 1
a1659 2
% @@pounds{} is a sterling sign, which is in the CM italic font.
% 
a1661 10
% @@registeredsymbol - R in a circle.  The font for the R should really
% be smaller yet, but lllsize is the best we can do for now.
% Adapted from the plain.tex definition of \copyright.
%
\def\registeredsymbol{%
  $^{{\ooalign{\hfil\raise.07ex\hbox{\selectfonts\lllsize R}%
               \hfil\crcr\Orb}}%
    }$%
}

d1680 2
a1681 1
\parseargdef\shorttitlepage{\begingroup\hbox{}\vskip 1.5in \chaprm \centerline{#1}%
d1684 32
a1715 13
\envdef\titlepage{%
  % Open one extra group, as we want to close it in the middle of \Etitlepage.
  \begingroup
    \parindent=0pt \textfonts
    % Leave some space at the very top of the page.
    \vglue\titlepagetopglue
    % No rule at page bottom unless we print one at the top with @@title.
    \finishedtitlepagetrue
    %
    % Most title ``pages'' are actually two pages long, with space
    % at the top of the second.  We don't want the ragged left on the second.
    \let\oldpage = \page
    \def\page{%
d1717 1
a1717 1
	 \finishtitlepage
d1719 1
d1721 2
a1722 3
      \page
      \null
    }%
d1726 27
a1752 27
    \iffinishedtitlepage\else
	\finishtitlepage
    \fi
    % It is important to do the page break before ending the group,
    % because the headline and footline are only empty inside the group.
    % If we use the new definition of \page, we always get a blank page
    % after the title page, which we certainly don't want.
    \oldpage
  \endgroup
  %
  % Need this before the \...aftertitlepage checks so that if they are
  % in effect the toc pages will come out with page numbers.
  \HEADINGSon
  %
  % If they want short, they certainly want long too.
  \ifsetshortcontentsaftertitlepage
    \shortcontents
    \contents
    \global\let\shortcontents = \relax
    \global\let\contents = \relax
  \fi
  %
  \ifsetcontentsaftertitlepage
    \contents
    \global\let\contents = \relax
    \global\let\shortcontents = \relax
  \fi
d1756 3
a1758 19
  \vskip4pt \hrule height 2pt width \hsize
  \vskip\titlepagebottomglue
  \finishedtitlepagetrue
}

%%% Macros to be used within @@titlepage:

\let\subtitlerm=\tenrm
\def\subtitlefont{\subtitlerm \normalbaselineskip = 13pt \normalbaselines}

\def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
		\let\tt=\authortt}

\parseargdef\title{%
  \checkenv\titlepage
  \leftline{\titlefonts\rm #1}
  % print a rule at the page bottom also.
  \finishedtitlepagefalse
  \vskip4pt \hrule height 4pt width \hsize \vskip4pt
a1760 20
\parseargdef\subtitle{%
  \checkenv\titlepage
  {\subtitlefont \rightline{#1}}%
}

% @@author should come last, but may come many times.
% It can also be used inside @@quotation.
% 
\parseargdef\author{%
  \def\temp{\quotation}%
  \ifx\thisenv\temp
    \def\quotationauthor{#1}% printed in \Equotation.
  \else
    \checkenv\titlepage
    \ifseenauthor\else \vskip 0pt plus 1filll \seenauthortrue \fi
    {\authorfont \leftline{#1}}%
  \fi
}


d1770 1
a1770 1
% Now make TeX use those variables
d1784 9
d1794 2
a1795 3
\def\evenheading{\parsearg\evenheadingxxx}
\def\evenheadingxxx #1{\evenheadingyyy #1\|\|\|\|\finish}
\def\evenheadingyyy #1\|#2\|#3\|#4\finish{%
d1798 2
a1799 3
\def\oddheading{\parsearg\oddheadingxxx}
\def\oddheadingxxx #1{\oddheadingyyy #1\|\|\|\|\finish}
\def\oddheadingyyy #1\|#2\|#3\|#4\finish{%
d1802 1
a1802 1
\parseargdef\everyheading{\oddheadingxxx{#1}\evenheadingxxx{#1}}%
d1804 2
a1805 3
\def\evenfooting{\parsearg\evenfootingxxx}
\def\evenfootingxxx #1{\evenfootingyyy #1\|\|\|\|\finish}
\def\evenfootingyyy #1\|#2\|#3\|#4\finish{%
d1808 2
a1809 3
\def\oddfooting{\parsearg\oddfootingxxx}
\def\oddfootingxxx #1{\oddfootingyyy #1\|\|\|\|\finish}
\def\oddfootingyyy #1\|#2\|#3\|#4\finish{%
d1818 3
a1820 2
\parseargdef\everyfooting{\oddfootingxxx{#1}\evenfootingxxx{#1}}

d1834 1
a1834 1
\def\HEADINGSoff{%
d1843 1
a1843 1
\def\HEADINGSdouble{%
d1855 1
a1855 1
\def\HEADINGSsingle{%
d1902 2
a1903 1
\def\settitle{\parsearg{\gdef\thistitle}}
d1907 1
a1907 1
% Tables -- @@table, @@ftable, @@vtable, @@item(x).
d1919 1
a1919 1
% Note @@table, @@ftable, and @@vtable define @@item, @@itemx, etc., with
d1931 12
d1946 1
a1946 1
  \setbox0=\hbox{\itemindicate{#1}}%
d2000 9
a2008 2
\def\item{\errmessage{@@item while not in a list environment}}
\def\itemx{\errmessage{@@itemx while not in a list environment}}
d2011 50
a2060 22
\envdef\table{%
  \let\itemindex\gobble
  \tablex
}
\envdef\ftable{%
  \def\itemindex ##1{\doind {fn}{\code{##1}}}%
  \tablex
}
\envdef\vtable{%
  \def\itemindex ##1{\doind {vr}{\code{##1}}}%
  \tablex
}
\def\tablex#1{%
  \def\itemindicate{#1}%
  \parsearg\tabley
}
\def\tabley#1{%
  {%
    \makevalueexpandable
    \edef\temp{\noexpand\tablez #1\space\space\space}%
    \expandafter
  }\temp \endtablez
a2061 20
\def\tablez #1 #2 #3 #4\endtablez{%
  \aboveenvbreak
  \ifnum 0#1>0 \advance \leftskip by #1\mil \fi
  \ifnum 0#2>0 \tableindent=#2\mil \fi
  \ifnum 0#3>0 \advance \rightskip by #3\mil \fi
  \itemmax=\tableindent
  \advance \itemmax by -\itemmargin
  \advance \leftskip by \tableindent
  \exdentamount=\tableindent
  \parindent = 0pt
  \parskip = \smallskipamount
  \ifdim \parskip=0pt \parskip=2pt \fi
  \let\item = \internalBitem
  \let\itemx = \internalBitemx
}
\def\Etable{\endgraf\afterenvbreak}
\let\Eftable\Etable
\let\Evtable\Etable
\let\Eitemize\Etable
\let\Eenumerate\Etable
d2067 1
a2067 16
\envdef\itemize{\parsearg\doitemize}

\def\doitemize#1{%
  \aboveenvbreak
  \itemmax=\itemindent
  \advance\itemmax by -\itemmargin
  \advance\leftskip by \itemindent
  \exdentamount=\itemindent
  \parindent=0pt
  \parskip=\smallskipamount
  \ifdim\parskip=0pt \parskip=2pt \fi
  \def\itemcontents{#1}%
  % @@itemize with no arg is equivalent to @@itemize @@bullet.
  \ifx\itemcontents\empty\def\itemcontents{\bullet}\fi
  \let\item=\itemizeitem
}
d2069 17
a2085 20
% Definition of @@item while inside @@itemize and @@enumerate.
%
\def\itemizeitem{%
  \advance\itemno by 1  % for enumerations
  {\let\par=\endgraf \smallbreak}% reasonable place to break
  {%
   % If the document has an @@itemize directly after a section title, a
   % \nobreak will be last on the list, and \sectionheading will have
   % done a \vskip-\parskip.  In that case, we don't want to zero
   % parskip, or the item text will crash with the heading.  On the
   % other hand, when there is normal text preceding the item (as there
   % usually is), we do want to zero parskip, or there would be too much
   % space.  In that case, we won't have a \nobreak before.  At least
   % that's the theory.
   \ifnum\lastpenalty<10000 \parskip=0in \fi
   \noindent
   \hbox to 0pt{\hss \itemcontents \kern\itemmargin}%
   \vadjust{\penalty 1200}}% not good to break after first line of item.
  \flushcr
}
d2096 2
a2097 1
\envparseargdef\enumerate{\enumeratey #1  \endenumeratey}
d2099 2
d2171 1
a2171 1
% Call \doitemize, adding a period to the first argument and supplying the
d2177 1
a2177 1
  \doitemize{#1.}\flushcr
d2188 10
d2224 10
d2240 2
a2241 2
% @@item, @@tab do not need to be on their own lines, but it will not hurt
% if they are.
d2285 5
a2289 4
% #1 is the @@columnfraction, usually a decimal number like .5, but might
% be just 1.  We just use it, whatever it is.
% 
\def\pickupwholefraction#1 {%
d2291 1
a2291 1
  \expandafter\xdef\csname col\the\colcount\endcsname{#1\hsize}%
a2323 13
% multitable-only commands.
%
% @@headitem starts a heading row, which we typeset in bold.
% Assignments have to be global since we are inside the implicit group
% of an alignment entry.  Note that \everycr resets \everytab.
\def\headitem{\checkenv\multitable \crcr \global\everytab={\bf}\the\everytab}%
%
% A \tab used to include \hskip1sp.  But then the space in a template
% line is not enough.  That is bad.  So let's go back to just `&' until
% we encounter the problem it was intended to solve again.
%					--karl, nathan@@acm.org, 20apr99.
\def\tab{\checkenv\multitable &\the\everytab}%

d2326 2
a2327 3
\newtoks\everytab  % insert after every tab.
%
\envdef\multitable{%
d2329 7
a2335 5
  \startsavinginserts
  %
  % @@item within a multitable starts a normal row.
  \let\item\crcr
  %
d2343 4
a2346 13
  %
  \everycr = {%
    \noalign{%
      \global\everytab={}%
      \global\colcount=0 % Reset the column counter.
      % Check for saved footnotes, etc.
      \checkinserts
      % Keeps underfull box messages off when table breaks over pages.
      %\filbreak
	% Maybe so, but it also creates really weird page breaks when the
	% table breaks over pages. Wouldn't \vfil be better?  Wait until the
	% problem manifests itself, so it can be fixed for real --karl.
    }%
a2348 3
  \parsearg\domultitable
}
\def\domultitable#1{%
d2352 12
d2368 39
a2406 49
  \halign\bgroup &%
    \global\advance\colcount by 1
    \multistrut
    \vtop{%
      % Use the current \colcount to find the correct column width:
      \hsize=\expandafter\csname col\the\colcount\endcsname
      %
      % In order to keep entries from bumping into each other
      % we will add a \leftskip of \multitablecolspace to all columns after
      % the first one.
      %
      % If a template has been used, we will add \multitablecolspace
      % to the width of each template entry.
      %
      % If the user has set preamble in terms of percent of \hsize we will
      % use that dimension as the width of the column, and the \leftskip
      % will keep entries from bumping into each other.  Table will start at
      % left margin and final column will justify at right margin.
      %
      % Make sure we don't inherit \rightskip from the outer environment.
      \rightskip=0pt
      \ifnum\colcount=1
	% The first column will be indented with the surrounding text.
	\advance\hsize by\leftskip
      \else
	\ifsetpercent \else
	  % If user has not set preamble in terms of percent of \hsize
	  % we will advance \hsize by \multitablecolspace.
	  \advance\hsize by \multitablecolspace
	\fi
       % In either case we will make \leftskip=\multitablecolspace:
      \leftskip=\multitablecolspace
      \fi
      % Ignoring space at the beginning and end avoids an occasional spurious
      % blank line, when TeX decides to break the line at the space before the
      % box from the multistrut, so the strut ends up on a line by itself.
      % For example:
      % @@multitable @@columnfractions .11 .89
      % @@item @@code{#}
      % @@tab Legal holiday which is valid in major parts of the whole country.
      % Is automatically provided with highlighting sequences respectively
      % marking characters.
      \noindent\ignorespaces##\unskip\multistrut
    }\cr
}
\def\Emultitable{%
  \crcr
  \egroup % end the \halign
  \global\setpercentfalse
d2436 19
d2457 129
a2585 17

% @@iftex, @@ifnotdocbook, @@ifnothtml, @@ifnotinfo, @@ifnotplaintext,
% @@ifnotxml always succeed.  They currently do nothing; we don't
% attempt to check whether the conditionals are properly nested.  But we
% have to remember that they are conditionals, so that @@end doesn't
% attempt to close an environment group.
%
\def\makecond#1{%
  \expandafter\let\csname #1\endcsname = \relax
  \expandafter\let\csname iscond.#1\endcsname = 1
}
\makecond{iftex}
\makecond{ifnotdocbook}
\makecond{ifnothtml}
\makecond{ifnotinfo}
\makecond{ifnotplaintext}
\makecond{ifnotxml}
d2590 1
a2591 1
\def\docbook{\doignore{docbook}}
a2592 1
\def\ifdocbook{\doignore{ifdocbook}}
d2602 5
a2606 1
% Ignore text until a line `@@end #1', keeping track of nested conditionals.
a2607 3
% A count to remember the depth of nesting.
\newcount\doignorecount

d2609 7
a2615 4
  % Scan in ``verbatim'' mode:
  \catcode`\@@ = \other
  \catcode`\{ = \other
  \catcode`\} = \other
d2618 1
a2618 1
  \spaceisspace
d2620 110
a2729 12
  % Count number of #1's that we've seen.
  \doignorecount = 0
  %
  % Swallow text until we reach the matching `@@end #1'.
  \dodoignore {#1}%
}

{ \catcode`_=11 % We want to use \_STOP_ which cannot appear in texinfo source.
  \obeylines %
  %
  \gdef\dodoignore#1{%
    % #1 contains the string `ifinfo'.
d2731 2
a2732 7
    % Define a command to find the next `@@end #1', which must be on a line
    % by itself.
    \long\def\doignoretext##1^^M@@end #1{\doignoretextyyy##1^^M@@#1\_STOP_}%
    % And this command to find another #1 command, at the beginning of a
    % line.  (Otherwise, we would consider a line `@@c @@ifset', for
    % example, to count as an @@ifset for nesting.)
    \long\def\doignoretextyyy##1^^M@@#1##2\_STOP_{\doignoreyyy{##2}\_STOP_}%
d2734 5
a2738 28
    % And now expand that command.
    \obeylines %
    \doignoretext ^^M%
  }%
}

\def\doignoreyyy#1{%
  \def\temp{#1}%
  \ifx\temp\empty			% Nothing found.
    \let\next\doignoretextzzz
  \else					% Found a nested condition, ...
    \advance\doignorecount by 1
    \let\next\doignoretextyyy		% ..., look for another.
    % If we're here, #1 ends with ^^M\ifinfo (for example).
  \fi
  \next #1% the token \_STOP_ is present just after this macro.
}

% We have to swallow the remaining "\_STOP_".
% 
\def\doignoretextzzz#1{%
  \ifnum\doignorecount = 0	% We have just found the outermost @@end.
    \let\next\enddoignore
  \else				% Still inside a nested condition.
    \advance\doignorecount by -1
    \let\next\doignoretext      % Look for the next @@end.
  \fi
  \next
a2740 4
% Finish off ignored text.
\def\enddoignore{\endgroup\ignorespaces}


d2747 2
a2748 2
% didn't need it.
% We rely on the fact that \parsearg sets \catcode`\ =10.
d2750 4
a2753 1
\parseargdef\set{\setyyy#1 \endsetyyy}
d2755 5
a2759 10
  {%
    \makevalueexpandable
    \def\temp{#2}%
    \edef\next{\gdef\makecsname{SET#1}}%
    \ifx\temp\empty
      \next{}%
    \else
      \setzzz#2\endsetzzz
    \fi
  }%
d2761 4
a2764 2
% Remove the trailing space \setxxx inserted.
\def\setzzz#1 \endsetzzz{\next{#1}}
d2768 2
a2769 6
\parseargdef\clear{%
  {%
    \makevalueexpandable
    \global\expandafter\let\csname SET#1\endcsname=\relax
  }%
}
a2771 2
\def\value{\begingroup\makevalueexpandable\valuexxx}
\def\valuexxx#1{\expandablevalue{#1}\endgroup}
d2773 1
a2773 1
  \catcode`\- = \active \catcode`\_ = \active
d2775 4
a2778 3
  \gdef\makevalueexpandable{%
    \let\value = \expandablevalue
    % We don't want these characters active, ...
d2780 2
a2781 5
    % ..., but we might end up with active ones in the argument if
    % we're called from @@code, as @@code{@@value{foo-bar_}}, though.
    % So \let them to their normal equivalents.
    \let-\realdash \let_\normalunderscore
  }
d2783 1
d2786 8
a2793 6
% properly in indexes (we call \makevalueexpandable in \indexdummies).
% The command has to be fully expandable (if the variable is set), since
% the result winds up in the index file.  This means that if the
% variable's value contains other Texinfo commands, it's almost certain
% it will fail (although perhaps we could fix that with sufficient work
% to do a one-level expansion on the result, instead of complete).
d2807 8
a2814 13
% To get special treatment of `@@end ifset,' call \makeond and the redefine.
%
\makecond{ifset}
\def\ifset{\parsearg{\doifset{\let\next=\ifsetfail}}}
\def\doifset#1#2{%
  {%
    \makevalueexpandable
    \let\next=\empty
    \expandafter\ifx\csname SET#2\endcsname\relax
      #1% If not set, redefine \next.
    \fi
    \expandafter
  }\next
d2816 3
a2818 1
\def\ifsetfail{\doignore{ifset}}
d2823 33
a2855 11
% The `\else' inside the `\doifset' parameter is a trick to reuse the
% above code: if the variable is not set, do nothing, if it is set,
% then redefine \next to \ifclearfail.
%
\makecond{ifclear}
\def\ifclear{\parsearg{\doifset{\else \let\next=\ifclearfail}}}
\def\ifclearfail{\doignore{ifclear}}

% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory=\comment
d2906 1
a2906 1
%
d2909 1
a2909 1
%
d2951 1
a2951 1
%
d2957 1
a2957 1
  % braces and backslashes are used only as delimiters.
d2966 1
a2966 1
  %
d2969 1
a2969 1
  %
d2973 1
a2973 1
  %
d2986 1
a2986 1
% everything using @@ instead of \realbackslash.  When everything uses
d2988 1
a2988 1
%
d3009 1
a3009 1
%
d3014 1
a3014 2
  \commondummiesnofonts
  %
d3016 16
d3033 1
a3033 1
  % Non-English letters.
a3044 4
  \definedummyword{exclamdown}%
  \definedummyword{questiondown}%
  \definedummyword{ordf}%
  \definedummyword{ordm}%
d3056 7
a3062 1
  \definedummyword{LaTeX}%
d3064 19
a3086 1
  \definedummyword{registeredsymbol}%
d3098 2
a3099 1
  % Handle some cases of @@value -- where it does not contain any
d3101 1
a3101 1
  \makevalueexpandable
d3110 6
a3115 60
% \commondummiesnofonts: common to \commondummies and \indexnofonts.
%
% Better have this without active chars.
{
  \catcode`\~=\other
  \gdef\commondummiesnofonts{%
    % Control letters and accents.
    \definedummyletter{!}%
    \definedummyletter{"}%
    \definedummyletter{'}%
    \definedummyletter{*}%
    \definedummyletter{,}%
    \definedummyletter{.}%
    \definedummyletter{/}%
    \definedummyletter{:}%
    \definedummyletter{=}%
    \definedummyletter{?}%
    \definedummyletter{^}%
    \definedummyletter{`}%
    \definedummyletter{~}%
    \definedummyword{u}%
    \definedummyword{v}%
    \definedummyword{H}%
    \definedummyword{dotaccent}%
    \definedummyword{ringaccent}%
    \definedummyword{tieaccent}%
    \definedummyword{ubaraccent}%
    \definedummyword{udotaccent}%
    \definedummyword{dotless}%
    %
    % Texinfo font commands.
    \definedummyword{b}%
    \definedummyword{i}%
    \definedummyword{r}%
    \definedummyword{sc}%
    \definedummyword{t}%
    %
    % Commands that take arguments.
    \definedummyword{acronym}%
    \definedummyword{cite}%
    \definedummyword{code}%
    \definedummyword{command}%
    \definedummyword{dfn}%
    \definedummyword{emph}%
    \definedummyword{env}%
    \definedummyword{file}%
    \definedummyword{kbd}%
    \definedummyword{key}%
    \definedummyword{math}%
    \definedummyword{option}%
    \definedummyword{samp}%
    \definedummyword{strong}%
    \definedummyword{tie}%
    \definedummyword{uref}%
    \definedummyword{url}%
    \definedummyword{var}%
    \definedummyword{verb}%
    \definedummyword{w}%
  }
}
d3122 3
a3125 12
  \def\definedummyword##1{%
    \expandafter\let\csname ##1\endcsname\asis
  }%
  \let\definedummyletter=\definedummyword
  %
  \commondummiesnofonts
  %
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
  %
d3131 18
a3148 1
  % Non-English letters.
a3161 2
  \def\ordf{a}%
  \def\ordm{o}%
d3163 4
a3166 2
  \def\LaTeX{LaTeX}%
  \def\TeX{TeX}%
d3168 27
a3194 15
  % Assorted special characters.
  % (The following {} will end up in the sort string, but that's ok.)
  \def\bullet{bullet}%
  \def\copyright{copyright}%
  \def\registeredsymbol{R}%
  \def\dots{...}%
  \def\enddots{...}%
  \def\equiv{==}%
  \def\error{error}%
  \def\expansion{==>}%
  \def\minus{-}%
  \def\pounds{pounds}%
  \def\point{.}%
  \def\print{-|}%
  \def\result{=>}%
d3200 3
d3204 2
a3205 2
% #1 is the index name, #2 is the entry text.
\def\doind#1#2{\dosubind{#1}{#2}{}}
d3209 2
a3210 2
% empty if called from \doind, as we usually are (the main exception
% is with most defuns, which call us directly).
a3212 24
  \iflinks
  {%
    % Store the main index entry text (including the third arg).
    \toks0 = {#2}%
    % If third arg is present, precede it with a space.
    \def\thirdarg{#3}%
    \ifx\thirdarg\empty \else
      \toks0 = \expandafter{\the\toks0 \space #3}%
    \fi
    %
    \edef\writeto{\csname#1indfile\endcsname}%
    %
    \ifvmode
      \dosubindsanitize
    \else
      \dosubindwrite
    \fi
  }%
  \fi
}

% Write the entry in \toks0 to the index file:
%
\def\dosubindwrite{%
d3215 1
a3215 1
    \insert\margin{\hbox{\vrule height8pt depth3pt width0pt \the\toks0}}%
d3217 68
a3284 22
  %
  % Remember, we are within a group.
  \indexdummies % Must do this here, since \bf, etc expand at this stage
  \escapechar=`\\
  \def\backslashcurfont{\indexbackslash}% \indexbackslash isn't defined now
      % so it will be output as is; and it will print as backslash.
  %
  % Process the index entry with all font commands turned off, to
  % get the string to sort by.
  {\indexnofonts
   \edef\temp{\the\toks0}% need full expansion
   \xdef\indexsorttmp{\temp}%
  }%
  %
  % Set up the complete index entry, with both the sort key and
  % the original text, including any font commands.  We write
  % three arguments to \entry to the .?? file (four in the
  % subentry case), texindex reduces to two when writing the .??s
  % sorted result.
  \edef\temp{%
    \write\writeto{%
      \string\entry{\indexsorttmp}{\noexpand\folio}{\the\toks0}}%
a3285 71
  \temp
}

% Take care of unwanted page breaks:
%
% If a skip is the last thing on the list now, preserve it
% by backing up by \lastskip, doing the \write, then inserting
% the skip again.  Otherwise, the whatsit generated by the
% \write will make \lastskip zero.  The result is that sequences
% like this:
% @@end defun
% @@tindex whatever
% @@defun ...
% will have extra space inserted, because the \medbreak in the
% start of the @@defun won't see the skip inserted by the @@end of
% the previous defun.
%
% But don't do any of this if we're not in vertical mode.  We
% don't want to do a \vskip and prematurely end a paragraph.
%
% Avoid page breaks due to these extra skips, too.
%
% But wait, there is a catch there:
% We'll have to check whether \lastskip is zero skip.  \ifdim is not
% sufficient for this purpose, as it ignores stretch and shrink parts
% of the skip.  The only way seems to be to check the textual
% representation of the skip.
%
% The following is almost like \def\zeroskipmacro{0.0pt} except that
% the ``p'' and ``t'' characters have catcode \other, not 11 (letter).
%
\edef\zeroskipmacro{\expandafter\the\csname z@@skip\endcsname}
%
% ..., ready, GO:
%
\def\dosubindsanitize{%
  % \lastskip and \lastpenalty cannot both be nonzero simultaneously.
  \skip0 = \lastskip
  \edef\lastskipmacro{\the\lastskip}%
  \count255 = \lastpenalty
  %
  % If \lastskip is nonzero, that means the last item was a
  % skip.  And since a skip is discardable, that means this
  % -\skip0 glue we're inserting is preceded by a
  % non-discardable item, therefore it is not a potential
  % breakpoint, therefore no \nobreak needed.
  \ifx\lastskipmacro\zeroskipmacro
  \else
    \vskip-\skip0
  \fi
  %
  \dosubindwrite
  %
  \ifx\lastskipmacro\zeroskipmacro
    % if \lastskip was zero, perhaps the last item was a
    % penalty, and perhaps it was >=10000, e.g., a \nobreak.
    % In that case, we want to re-insert the penalty; since we
    % just inserted a non-discardable item, any following glue
    % (such as a \parskip) would be a breakpoint.  For example:
    %   @@deffn deffn-whatever
    %   @@vindex index-whatever
    %   Description.
    % would allow a break between the index-whatever whatsit
    % and the "Description." paragraph.
    \ifnum\count255>9999 \nobreak \fi
  \else
    % On the other hand, if we had a nonzero \lastskip,
    % this make-up glue would be preceded by a non-discardable item
    % (the whatsit from the \write), so we must insert a \nobreak.
    \nobreak\vskip\skip0
  \fi
d3323 2
a3324 1
\parseargdef\printindex{\begingroup
d3329 1
a3329 1
  \everypar = {}% don't want the \kern\-parindent from indentation suppression.
d3356 1
a3356 1
      \def\indexbackslash{\backslashcurfont}%
d3394 75
a3468 96
% \entry typesets a paragraph consisting of the text (#1), dot leaders, and
% then page number (#2) flushed to the right margin.  It is used for index
% and table of contents entries.  The paragraph is indented by \leftskip.
%
% A straightforward implementation would start like this:
%	\def\entry#1#2{...
% But this frozes the catcodes in the argument, and can cause problems to
% @@code, which sets - active.  This problem was fixed by a kludge---
% ``-'' was active throughout whole index, but this isn't really right.
% 
% The right solution is to prevent \entry from swallowing the whole text.
%                                 --kasal, 21nov03
\def\entry{%
  \begingroup
    %
    % Start a new paragraph if necessary, so our assignments below can't
    % affect previous text.
    \par
    %
    % Do not fill out the last line with white space.
    \parfillskip = 0in
    %
    % No extra space above this paragraph.
    \parskip = 0in
    %
    % Do not prefer a separate line ending with a hyphen to fewer lines.
    \finalhyphendemerits = 0
    %
    % \hangindent is only relevant when the entry text and page number
    % don't both fit on one line.  In that case, bob suggests starting the
    % dots pretty far over on the line.  Unfortunately, a large
    % indentation looks wrong when the entry text itself is broken across
    % lines.  So we use a small indentation and put up with long leaders.
    %
    % \hangafter is reset to 1 (which is the value we want) at the start
    % of each paragraph, so we need not do anything with that.
    \hangindent = 2em
    %
    % When the entry text needs to be broken, just fill out the first line
    % with blank space.
    \rightskip = 0pt plus1fil
    %
    % A bit of stretch before each entry for the benefit of balancing
    % columns.
    \vskip 0pt plus1pt
    %
    % Swallow the left brace of the text (first parameter):
    \afterassignment\doentry
    \let\temp =
}
\def\doentry{%
    \bgroup % Instead of the swallowed brace.
      \noindent
      \aftergroup\finishentry
      % And now comes the text of the entry.
}
\def\finishentry#1{%
    % #1 is the page number.
    %
    % The following is kludged to not output a line of dots in the index if
    % there are no page numbers.  The next person who breaks this will be
    % cursed by a Unix daemon.
    \def\tempa{{\rm }}%
    \def\tempb{#1}%
    \edef\tempc{\tempa}%
    \edef\tempd{\tempb}%
    \ifx\tempc\tempd
      \ %
    \else
      %
      % If we must, put the page number on a line of its own, and fill out
      % this line with blank space.  (The \hfil is overwhelmed with the
      % fill leaders glue in \indexdotfill if the page number does fit.)
      \hfil\penalty50
      \null\nobreak\indexdotfill % Have leaders before the page number.
      %
      % The `\ ' here is removed by the implicit \unskip that TeX does as
      % part of (the primitive) \par.  Without it, a spurious underfull
      % \hbox ensues.
      \ifpdf
	\pdfgettoks#1.%
	\ \the\toksA
      \else
	\ #1%
      \fi
    \fi
    \par
  \endgroup
}

% Like \dotfill except takes at least 1 em.
\def\indexdotfill{\cleaders
  \hbox{$\mathsurround=0pt \mkern1.5mu ${\it .}$ \mkern1.5mu$}\hskip 1em plus 1fill}

\def\primary #1{\line{#1\hfil}}

d3572 1
a3572 1
%
a3629 6
% \unnumberedno is an oxymoron, of course.  But we count the unnumbered
% sections so that we can refer to them unambiguously in the pdf
% outlines by their "section number".  We avoid collisions with chapter
% numbers by starting them at 10000.  (If a document ever has 10000
% chapters, we're in trouble anyway, I'm sure.)
\newcount\unnumberedno \unnumberedno = 10000
a3636 1
%
d3638 1
a3638 2
% We do the following ugly conditional instead of the above simple
% construct for the sake of pdftex, which needs the actual
a3639 1
% 
a3676 1
% However, they are not reliable, because we don't use marks.
d3681 1
a3681 1
\newcount\secbase\secbase=0 % @@raisesections/@@lowersections modify this count
d3696 10
a3705 4
      \chapterzzz{#2}%
  \or \seczzz{#2}%
  \or \numberedsubseczzz{#2}%
  \or \numberedsubsubseczzz{#2}%
d3707 1
a3707 3
    \ifnum \absseclevel<0 \chapterzzz{#2}%
    \else \numberedsubsubseczzz{#2}%
    \fi
d3709 1
a3709 1
  \suppressfirstparagraphindent
d3715 10
a3724 4
      \appendixzzz{#2}%
  \or \appendixsectionzzz{#2}%
  \or \appendixsubseczzz{#2}%
  \or \appendixsubsubseczzz{#2}%
d3726 1
a3726 3
    \ifnum \absseclevel<0 \appendixzzz{#2}%
    \else \appendixsubsubseczzz{#2}%
    \fi
d3728 1
a3728 1
  \suppressfirstparagraphindent
d3733 11
a3743 5
  \ifcase\absseclevel
      \unnumberedzzz{#2}%
  \or \unnumberedseczzz{#2}%
  \or \unnumberedsubseczzz{#2}%
  \or \unnumberedsubsubseczzz{#2}%
d3745 1
a3745 3
    \ifnum \absseclevel<0 \unnumberedzzz{#2}%
    \else \unnumberedsubsubseczzz{#2}%
    \fi
d3747 1
a3747 1
  \suppressfirstparagraphindent
d3750 15
a3764 24
% @@chapter, @@appendix, @@unnumbered.  Increment top-level counter, reset
% all lower-level sectioning counters to zero.
% 
% Also set \chaplevelprefix, which we prepend to @@float sequence numbers
% (e.g., figures), q.v.  By default (before any chapter), that is empty.
\let\chaplevelprefix = \empty
% 
\outer\parseargdef\chapter{\numhead0{#1}} % normally numhead0 calls chapterzzz
\def\chapterzzz#1{%
  % section resetting is \global in case the chapter is in a group, such
  % as an @@include file.
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\chapno by 1
  %
  % Used for \float.
  \gdef\chaplevelprefix{\the\chapno.}%
  \resetallfloatnos
  %
  \message{\putwordChapter\space \the\chapno}%
  %
  % Write the actual heading.
  \chapmacro{#1}{Ynumbered}{\the\chapno}%
  %
  % So @@section and the like are numbered underneath this chapter.
d3770 17
a3786 12
\outer\parseargdef\appendix{\apphead0{#1}} % normally apphead0 calls appendixzzz
\def\appendixzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\appendixno by 1
  \gdef\chaplevelprefix{\appendixletter.}%
  \resetallfloatnos
  %
  \def\appendixnum{\putwordAppendix\space \appendixletter}%
  \message{\appendixnum}%
  %
  \chapmacro{#1}{Yappendix}{\appendixletter}%
  %
d3793 5
a3797 1
\outer\parseargdef\centerchap{{\unnumberedyyy{#1}}}
d3799 4
a3802 8
\outer\parseargdef\unnumbered{\unnmhead0{#1}} % normally unnmhead0 calls unnumberedzzz
\def\unnumberedzzz#1{%
  \global\secno=0 \global\subsecno=0 \global\subsubsecno=0
    \global\advance\unnumberedno by 1
  %
  % Since an unnumbered has no number, no prefix for figures.
  \global\let\chaplevelprefix = \empty
  \resetallfloatnos
d3815 1
a3815 4
  \toks0 = {#1}%
  \message{(\the\toks0)}%
  %
  \chapmacro{#1}{Ynothing}{\the\unnumberedno}%
d3817 4
d3826 21
a3846 2
% @@top is like @@unnumbered.
\let\top\unnumbered
d3848 7
a3854 18
% Sections.
\outer\parseargdef\numberedsec{\numhead1{#1}} % normally calls seczzz
\def\seczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynumbered}{\the\chapno.\the\secno}%
}

\outer\parseargdef\appendixsection{\apphead1{#1}} % normally calls appendixsectionzzz
\def\appendixsectionzzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Yappendix}{\appendixletter.\the\secno}%
}
\let\appendixsec\appendixsection

\outer\parseargdef\unnumberedsec{\unnmhead1{#1}} % normally calls unnumberedseczzz
\def\unnumberedseczzz#1{%
  \global\subsecno=0 \global\subsubsecno=0  \global\advance\secno by 1
  \sectionheading{#1}{sec}{Ynothing}{\the\unnumberedno.\the\secno}%
d3858 27
a3884 18
\outer\parseargdef\numberedsubsec{\numhead2{#1}} % normally calls numberedsubseczzz
\def\numberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynumbered}{\the\chapno.\the\secno.\the\subsecno}%
}

\outer\parseargdef\appendixsubsec{\apphead2{#1}} % normally calls appendixsubseczzz
\def\appendixsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno}%
}

\outer\parseargdef\unnumberedsubsec{\unnmhead2{#1}} %normally calls unnumberedsubseczzz
\def\unnumberedsubseczzz#1{%
  \global\subsubsecno=0  \global\advance\subsecno by 1
  \sectionheading{#1}{subsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno}%
d3888 29
a3916 19
\outer\parseargdef\numberedsubsubsec{\numhead3{#1}} % normally numberedsubsubseczzz
\def\numberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynumbered}%
                 {\the\chapno.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\appendixsubsubsec{\apphead3{#1}} % normally appendixsubsubseczzz
\def\appendixsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Yappendix}%
                 {\appendixletter.\the\secno.\the\subsecno.\the\subsubsecno}%
}

\outer\parseargdef\unnumberedsubsubsec{\unnmhead3{#1}} %normally unnumberedsubsubseczzz
\def\unnumberedsubsubseczzz#1{%
  \global\advance\subsubsecno by 1
  \sectionheading{#1}{subsubsec}{Ynothing}%
                 {\the\unnumberedno.\the\secno.\the\subsecno.\the\subsubsecno}%
d3920 1
a3920 1
% Actually, they are now be obsolete; ordinary section commands should work.
d3940 3
a3942 3
\let\section = \numberedsec
\let\subsection = \numberedsubsec
\let\subsubsection = \numberedsubsubsec
d3955 2
a3956 1
\def\majorheading{%
d3958 3
a3960 2
  \parsearg\chapheadingzzz
}
d3962 2
a3963 2
\def\chapheading{\chapbreak \parsearg\chapheadingzzz}
\def\chapheadingzzz#1{%
d3966 1
a3966 4
                    \rm #1\hfill}}%
  \bigskip \par\penalty 200\relax
  \suppressfirstparagraphindent
}
d3969 3
a3971 6
\parseargdef\heading{\sectionheading{#1}{sec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subheading{\sectionheading{#1}{subsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
\parseargdef\subsubheading{\sectionheading{#1}{subsubsec}{Yomitfromtoc}{}
  \suppressfirstparagraphindent}
d4004 1
a4004 1
\def\CHAPPAGodd{%
d4012 1
a4012 1
\def\CHAPFplain{%
d4014 1
d4017 3
a4019 11
% Normal chapter opening.
% 
% #1 is the text, #2 is the section type (Ynumbered, Ynothing,
% Yappendix, Yomitfromtoc), #3 the chapter number.
% 
% To test against our argument.
\def\Ynothingkeyword{Ynothing}
\def\Yomitfromtockeyword{Yomitfromtoc}
\def\Yappendixkeyword{Yappendix}
%
\def\chfplain#1#2#3{%
d4023 2
a4024 47
    %
    % Have to define \thissection before calling \donoderef, because the
    % xref code eventually uses it.  On the other hand, it has to be called
    % after \pchapsepmacro, or the headline will change too soon.
    \gdef\thissection{#1}%
    \gdef\thischaptername{#1}%
    %
    % Only insert the separating space if we have a chapter/appendix
    % number, and don't print the unnumbered ``number''.
    \def\temptype{#2}%
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unnchap}%
      \def\thischapter{#1}%
    \else\ifx\temptype\Yomitfromtockeyword
      \setbox0 = \hbox{}% contents like unnumbered, but no toc entry
      \def\toctype{omit}%
      \xdef\thischapter{}%
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{\putwordAppendix{} #3\enspace}%
      \def\toctype{app}%
      % We don't substitute the actual chapter name into \thischapter
      % because we don't want its macros evaluated now.  And we don't
      % use \thissection because that changes with each section.
      %
      \xdef\thischapter{\putwordAppendix{} \appendixletter:
                        \noexpand\thischaptername}%
    \else
      \setbox0 = \hbox{#3\enspace}%
      \def\toctype{numchap}%
      \xdef\thischapter{\putwordChapter{} \the\chapno:
                        \noexpand\thischaptername}%
    \fi\fi\fi
    %
    % Write the toc entry for this chapter.  Must come before the
    % \donoderef, because we include the current node name in the toc
    % entry, and \donoderef resets it to empty.
    \writetocentry{\toctype}{#1}{#3}%
    %
    % For pdftex, we have to write out the node definition (aka, make
    % the pdfdest) after any page break, but before the actual text has
    % been typeset.  If the destination for the pdf outline is after the
    % text, then jumping from the outline may wind up with the text not
    % being visible, for instance under high magnification.
    \donoderef{#2}%
    %
    % Typeset the actual heading.
d4026 1
a4026 1
          \hangindent=\wd0 \centerparametersmaybe
d4033 3
d4044 1
a4044 1
  \chfplain{#1}{Ynothing}{}%
a4048 3
% I don't think this chapter style is supported any more, so I'm not
% updating it with the new noderef stuff.  We'll see.  --karl, 11aug03.
% 
d4066 1
a4066 1
\def\CHAPFopen{%
d4068 1
d4072 1
a4072 3
% Section titles.  These macros combine the section number parts and
% call the generic \sectionheading to do the printing.
% 
d4074 3
a4076 1
\def\secheadingbreak{\dobreak \secheadingskip{-1000}}
d4079 4
a4082 2
\newskip\subsecheadingskip
\def\subsecheadingbreak{\dobreak \subsecheadingskip{-500}}
d4085 4
a4088 2
\def\subsubsecheadingskip{\subsecheadingskip}
\def\subsubsecheadingbreak{\subsecheadingbreak}
d4091 9
a4099 7
% Print any size, any type, section title.
% 
% #1 is the text, #2 is the section level (sec/subsec/subsubsec), #3 is
% the section type for xrefs (Ynumbered, Ynothing, Yappendix), #4 is the
% section number.
% 
\def\sectionheading#1#2#3#4{%
d4102 1
a4102 1
    \csname #2fonts\endcsname \rm
d4104 3
a4106 2
    % Insert space above the heading.
    \csname #2headingbreak\endcsname
a4107 32
    % Only insert the space after the number if we have a section number.
    \def\sectionlevel{#2}%
    \def\temptype{#3}%
    %
    \ifx\temptype\Ynothingkeyword
      \setbox0 = \hbox{}%
      \def\toctype{unn}%
      \gdef\thissection{#1}%
    \else\ifx\temptype\Yomitfromtockeyword
      % for @@headings -- no section number, don't include in toc,
      % and don't redefine \thissection.
      \setbox0 = \hbox{}%
      \def\toctype{omit}%
      \let\sectionlevel=\empty
    \else\ifx\temptype\Yappendixkeyword
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{app}%
      \gdef\thissection{#1}%
    \else
      \setbox0 = \hbox{#4\enspace}%
      \def\toctype{num}%
      \gdef\thissection{#1}%
    \fi\fi\fi
    %
    % Write the toc entry (before \donoderef).  See comments in \chfplain.
    \writetocentry{\toctype\sectionlevel}{#1}{#4}%
    %
    % Write the node reference (= pdf destination for pdftex).
    % Again, see comments in \chfplain.
    \donoderef{#3}%
    %
    % Output the actual section heading.
d4109 2
a4110 2
          \hangindent=\wd0  % zero if no section number
          \unhbox0 #1}%
d4112 3
a4114 6
  % Add extra space after the heading -- half of whatever came above it.
  % Don't allow stretch, though.
  \kern .5 \csname #2headingskip\endcsname
  %
  % Do not let the kern be a potential breakpoint, as it would be if it
  % was followed by glue.
d4116 5
a4120 12
  %
  % We'll almost certainly start a paragraph next, so don't let that
  % glue accumulate.  (Not a breakpoint because it's preceded by a
  % discardable item.)
  \vskip-\parskip
  %
  % This \nobreak is purely so the last item on the list is a \penalty
  % of 10000.  This is so other code, for instance \parsebodycommon, can
  % check for and avoid allowing breakpoints.  Otherwise, it would
  % insert a valid breakpoint between:
  %   @@section sec-whatever
  %   @@deffn def-whatever
d4130 4
a4133 8
% Called from @@chapter, etc.  
% 
% Example usage: \writetocentry{sec}{Section Name}{\the\chapno.\the\secno}
% We append the current node name (if any) and page number as additional
% arguments for the \{chap,sec,...}entry macros which will eventually
% read this.  The node name is used in the pdf outlines as the
% destination to jump to.
% 
a4135 2
% But if #1 is `omit', then we don't do anything.  This is used for the
% table of contents chapter openings themselves.
a4137 2
\def\omitkeyword{omit}%
%
d4139 9
a4147 14
  \edef\writetoctype{#1}%
  \ifx\writetoctype\omitkeyword \else
    \iftocfileopened\else
      \immediate\openout\tocfile = \jobname.toc
      \global\tocfileopenedtrue
    \fi
    %
    \iflinks
      \toks0 = {#2}%
      \toks2 = \expandafter{\lastnode}%
      \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}{#3}%
                               {\the\toks2}{\noexpand\folio}}}%
      \temp
    \fi
d4150 7
a4156 7
  % Tell \shipout to create a pdf destination on each page, if we're
  % writing pdf.  These are used in the table of contents.  We can't
  % just write one on every page because the title pages are numbered
  % 1 and 2 (the page numbers aren't printed), and so are the first
  % two pages of the document.  Thus, we'd have two destinations named
  % `1', and two named `2'.
  \ifpdf \global\pdfmakepagedesttrue \fi
d4163 2
a4164 1
% Prepare to read what we've written to \tocfile.
d4167 21
a4187 23
  % If @@setchapternewpage on, and @@headings double, the contents should
  % start on an odd page, unlike chapters.  Thus, we maintain
  % \contentsalignmacro in parallel with \pagealignmacro.
  % From: Torbjorn Granlund <tege@@matematik.su.se>
  \contentsalignmacro
  \immediate\closeout\tocfile
  %
  % Don't need to put `Contents' or `Short Contents' in the headline.
  % It is abundantly clear what they are.
  \def\thischapter{}%
  \chapmacro{#1}{Yomitfromtoc}{}%
  %
  \savepageno = \pageno
  \begingroup                  % Set up to handle contents files properly.
    \catcode`\\=0  \catcode`\{=1  \catcode`\}=2  \catcode`\@@=11
    % We can't do this, because then an actual ^ in a section
    % title fails, e.g., @@chapter ^ -- exponentiation.  --karl, 9jul97.
    %\catcode`\^=7 % to see ^^e4 as \"a etc. juha@@piuha.ydi.vtt.fi
    \raggedbottom             % Worry more about breakpoints than the bottom.
    \advance\hsize by -\contentsrightmargin % Don't use the full line length.
    %
    % Roman numerals for page numbers.
    \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
d4193 12
a4204 14
  \startcontents{\putwordTOC}%
    \openin 1 \jobname.toc
    \ifeof 1 \else
      \input \jobname.toc
    \fi
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
    \ifeof 1 \else
      \pdfmakeoutlines
    \fi
    \closein 1
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
d4209 28
a4236 31
  \startcontents{\putwordShortTOC}%
    %
    \let\numchapentry = \shortchapentry
    \let\appentry = \shortchapentry
    \let\unnchapentry = \shortunnchapentry
    % We want a true roman here for the page numbers.
    \secfonts
    \let\rm=\shortcontrm \let\bf=\shortcontbf
    \let\sl=\shortcontsl \let\tt=\shortconttt
    \rm
    \hyphenpenalty = 10000
    \advance\baselineskip by 1pt % Open it up a little.
    \def\numsecentry##1##2##3##4{}
    \let\appsecentry = \numsecentry
    \let\unnsecentry = \numsecentry
    \let\numsubsecentry = \numsecentry
    \let\appsubsecentry = \numsecentry
    \let\unnsubsecentry = \numsecentry
    \let\numsubsubsecentry = \numsecentry
    \let\appsubsubsecentry = \numsecentry
    \let\unnsubsubsecentry = \numsecentry
    \openin 1 \jobname.toc
    \ifeof 1 \else
      \input \jobname.toc
    \fi
    \closein 1
    \vfill \eject
    \contentsalignmacro % in case @@setchapternewpage odd is in effect
  \endgroup
  \lastnegativepageno = \pageno
  \global\pageno = \savepageno
d4240 3
a4242 17
% Typeset the label for a chapter or appendix for the short contents.
% The arg is, e.g., `A' for an appendix, or `3' for a chapter.
%
\def\shortchaplabel#1{%
  % This space should be enough, since a single number is .5em, and the
  % widest letter (M) is 1em, at least in the Computer Modern fonts.
  % But use \hss just in case.
  % (This space doesn't include the extra space that gets added after
  % the label; that gets put in by \shortchapentry above.)
  % 
  % We'd like to right-justify chapter numbers, but that looks strange
  % with appendix letters.  And right-justifying numbers and
  % left-justifying letters looks strange when there is less than 10
  % chapters.  Have to read the whole toc once to know how many chapters
  % there are before deciding ...
  \hbox to 1em{#1\hss}%
}
d4250 1
a4250 1
\def\numchapentry#1#2#3#4{\dochapentry{#2\labelspace#1}{#4}}
d4254 2
a4255 2
\def\shortchapentry#1#2#3#4{%
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno\bgroup#4\egroup}%
d4259 2
a4260 6
% Need the word Appendix, and a fixed-size box.
% 
\def\appendixbox#1{%
  % We use M since it's probably the widest letter.
  \setbox0 = \hbox{\putwordAppendix{} M}%
  \hbox to \wd0{\putwordAppendix{} #1\hss}}
d4262 20
a4281 1
\def\appentry#1#2#3#4{\dochapentry{\appendixbox{#2}\labelspace#1}{#4}}
d4284 2
a4285 2
\def\unnchapentry#1#2#3#4{\dochapentry{#1}{#4}}
\def\shortunnchapentry#1#2#3#4{\tocentry{#1}{\doshortpageno\bgroup#4\egroup}}
d4288 2
a4289 3
\def\numsecentry#1#2#3#4{\dosecentry{#2\labelspace#1}{#4}}
\let\appsecentry=\numsecentry
\def\unnsecentry#1#2#3#4{\dosecentry{#1}{#4}}
d4292 2
a4293 3
\def\numsubsecentry#1#2#3#4{\dosubsecentry{#2\labelspace#1}{#4}}
\let\appsubsecentry=\numsubsecentry
\def\unnsubsecentry#1#2#3#4{\dosubsecentry{#1}{#4}}
d4296 3
a4298 3
\def\numsubsubsecentry#1#2#3#4{\dosubsubsecentry{#2\labelspace#1}{#4}}
\let\appsubsubsecentry=\numsubsubsecentry
\def\unnsubsubsecentry#1#2#3#4{\dosubsubsecentry{#1}{#4}}
d4301 1
a4301 2
% Same as \defaultparindent.
\newdimen\tocindent \tocindent = 15pt
d4332 11
a4342 2
% We use the same \entry macro as for the index entries.
\let\tocentry = \entry
d4352 2
a4353 2
\def\subsecentryfonts{\textfonts}
\def\subsubsecentryfonts{\textfonts}
d4360 1
a4360 1
%
d4372 1
a4372 1
%
d4380 1
a4380 1
\setbox\errorbox=\hbox to \dimen0{\hfil
d4383 1
a4383 1
   \vbox{%
d4397 1
a4397 1
\envdef\tex{%
d4404 1
a4418 2
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
a4421 1
  \let\/=\ptexslash
d4428 1
a4428 2
}
% There is no need to define \Etex.
d4431 1
a4431 1
% @@lisp environment forms a group so it can rebind things,
d4442 13
d4472 1
a4472 1
      \ifnum\lastpenalty<10000 \penalty-50 \fi
d4504 28
a4531 29
\envdef\cartouche{%
  \ifhmode\par\fi  % can't be in the midst of a paragraph.
  \startsavinginserts
  \lskip=\leftskip \rskip=\rightskip
  \leftskip=0pt\rightskip=0pt % we want these *outside*.
  \cartinner=\hsize \advance\cartinner by-\lskip
  \advance\cartinner by-\rskip
  \cartouter=\hsize
  \advance\cartouter by 18.4pt	% allow for 3pt kerns on either
				% side, and for 6pt waste from
				% each corner char, and rule thickness
  \normbskip=\baselineskip \normpskip=\parskip \normlskip=\lineskip
  % Flag to tell @@lisp, etc., not to narrow margin.
  \let\nonarrowing=\comment
  \vbox\bgroup
      \baselineskip=0pt\parskip=0pt\lineskip=0pt
      \carttop
      \hbox\bgroup
	  \hskip\lskip
	  \vrule\kern3pt
	  \vbox\bgroup
	      \kern3pt
	      \hsize=\cartinner
	      \baselineskip=\normbskip
	      \lineskip=\normlskip
	      \parskip=\normpskip
	      \vskip -\parskip
	      \comment % For explanation, see the end of \def\group.
}
d4533 10
a4542 10
              \ifhmode\par\fi
	      \kern3pt
	  \egroup
	  \kern3pt\vrule
	  \hskip\rskip
      \egroup
      \cartbot
  \egroup
  \checkinserts
}
d4549 1
d4562 2
a4564 1
  \let\exdent=\nofillexdent
d4567 8
a4574 4
% If you want all examples etc. small: @@set dispenvsize small.
% If you want even small examples the full size: @@set dispenvsize nosmall.
% This affects the following displayed environments:
%    @@example, @@display, @@format, @@lisp
d4576 1
a4576 14
\def\smallword{small}
\def\nosmallword{nosmall}
\let\SETdispenvsize\relax
\def\setnormaldispenv{%
  \ifx\SETdispenvsize\smallword
    \smallexamplefonts \rm
  \fi
}
\def\setsmalldispenv{%
  \ifx\SETdispenvsize\nosmallword
  \else
    \smallexamplefonts \rm
  \fi
}
d4578 7
a4584 7
% We often define two environments, @@foo and @@smallfoo.
% Let's do it by one command:
\def\makedispenv #1#2{
  \expandafter\envdef\csname#1\endcsname {\setnormaldispenv #2}
  \expandafter\envdef\csname small#1\endcsname {\setsmalldispenv #2}
  \expandafter\let\csname E#1\endcsname \afterenvbreak
  \expandafter\let\csname Esmall#1\endcsname \afterenvbreak
d4587 2
a4588 5
% Define two synonyms:
\def\maketwodispenvs #1#2#3{
  \makedispenv{#1}{#3}
  \makedispenv{#2}{#3}
}
a4589 2
% @@lisp: indented, narrowed, typewriter font; @@example: same as @@lisp.
%
d4592 5
a4596 6
%
\maketwodispenvs {lisp}{example}{%
  \nonfillstart
  \tt
  \let\kbdfont = \kbdexamplefont % Allow @@kbd to do something special.
  \gobble       % eat return
d4598 1
d4600 2
a4601 1
% @@display/@@smalldisplay: same as @@lisp except keep current font.
d4603 1
a4603 1
\makedispenv {display}{%
d4605 1
d4608 8
d4617 1
a4617 1
% @@format/@@smallformat: same as @@display except don't narrow margins.
d4619 2
a4620 2
\makedispenv{format}{%
  \let\nonarrowing = t%
d4622 1
d4625 8
d4634 3
a4636 7
% @@flushleft: same as @@format, but doesn't obey \SETdispenvsize.
\envdef\flushleft{%
  \let\nonarrowing = t%
  \nonfillstart
  \gobble
}
\let\Eflushleft = \afterenvbreak
d4640 2
a4641 2
\envdef\flushright{%
  \let\nonarrowing = t%
d4643 1
a4646 1
\let\Eflushright = \afterenvbreak
d4650 1
a4650 3
% and narrows the margins.  We keep \parskip nonzero in general, since
% we're doing normal filling.  So, when using \aboveenvbreak and
% \afterenvbreak, temporarily make \parskip 0.
d4652 2
a4653 1
\envdef\quotation{%
d4656 3
a4666 21
  \parsearg\quotationlabel
}

% We have retained a nonzero parskip for the environment, since we're
% doing normal filling.
% 
\def\Equotation{%
  \par
  \ifx\quotationauthor\undefined\else
    % indent a bit.
    \leftline{\kern 2\leftskip \sl ---\quotationauthor}%
  \fi
  {\parskip=0pt \afterenvbreak}%
}

% If we're given an argument, typeset it in bold with a colon after.
\def\quotationlabel#1{%
  \def\temp{#1}%
  \ifx\temp\empty \else
    {\bf #1: }%
  \fi
d4671 1
a4671 1
% If we want to allow any <char> as delimiter,
d4688 1
a4688 1
  \def\do##1{\catcode`##1=\other}\dospecials}
a4735 2
  \nonfillstart
  \advance\leftskip by -\defbodyindent
d4749 2
a4750 2
% Do the @@verb magic: verbatim text is quoted by unique
% delimiter characters.  Before first delimiter expect a
d4757 1
a4757 1
  \catcode`[=1\catcode`]=2\catcode`\{=\other\catcode`\}=\other
d4769 1
a4769 1
% For Texinfo it's a lot easier than for LaTeX,
d4774 7
d4788 1
a4788 3
  \xdef\doverbatim#1^^M#2@@end verbatim{#2\noexpand\end\gobble verbatim}%
  % We really want {...\end verbatim} in the body of the macro, but
  % without the active space; thus we have to use \xdef and \gobble.
d4791 6
a4796 2
\envdef\verbatim{%
    \setupverbatim\doverbatim
a4797 2
\let\Everbatim = \afterenvbreak

d4801 19
a4819 1
\def\verbatiminclude{\parseargusing\filenamecatcodes\doverbatiminclude}
d4822 9
a4830 6
  {%
    \makevalueexpandable
    \setupverbatim
    \input #1
    \afterenvbreak
  }%
d4836 1
a4836 1
%
d4843 1
a4843 1
%
d4866 1
a4866 1
%
d4870 1
a4870 1
%
d4874 1
a4874 1
%
d4905 3
d4912 69
a4980 4
% Start the processing of @@deffn:
\def\startdefun{%
  \ifnum\lastpenalty<10000
    \medbreak
d4982 1
a4982 12
    % If there are two @@def commands in a row, we'll have a \nobreak,
    % which is there to keep the function description together with its
    % header.  But if there's nothing but headers, we need to allow a
    % break somewhere.  Check for penalty 10002 (inserted by
    % \defargscommonending) instead of 10000, since the sectioning
    % commands insert a \penalty10000, and we don't want to allow a break
    % between a section heading and a defun.
    \ifnum\lastpenalty=10002 \penalty2000 \fi
    %
    % Similarly, after a section heading, do not allow a break.
    % But do insert the glue.
    \medskip  % preceded by discardable penalty, so not a breakpoint
d4985 50
d5040 6
a5045 3
\def\dodefunx#1{%
  % First, check whether we are in the right environment:
  \checkenv#1%
d5047 25
a5071 6
  % As above, allow line break if we have multiple x headers in a row.
  % It's not a great place, though.
  \ifnum\lastpenalty=10002 \penalty3000 \fi
  %
  % And now, it's time to reuse the body of the original defun:
  \expandafter\gobbledefun#1%
a5072 1
\def\gobbledefun#1\startdefun{}
d5074 4
a5077 1
% \printdefunline \deffnheader{text}
d5079 20
a5098 14
\def\printdefunline#1#2{%
  \begingroup
    % call \deffnheader:
    #1#2 \endheader
    % common ending:
    \interlinepenalty = 10000
    \advance\rightskip by 0pt plus 1fil
    \endgraf
    \nobreak\vskip -\parskip
    \penalty 10002  % signal to \startdefun and \dodefunx
    % Some of the @@defun-type tags do not enable magic parentheses,
    % rendering the following check redundant.  But we don't optimize.
    \checkparencounts
  \endgroup
d5101 8
a5108 1
\def\Edefun{\endgraf\medbreak}
d5110 3
a5112 2
% \makedefun{deffn} creates \deffn, \deffnx and \Edeffn;
% the only thing remainnig is to define \deffnheader.
d5114 22
a5135 5
\def\makedefun#1{%
  \expandafter\let\csname E#1\endcsname = \Edefun
  \edef\temp{\noexpand\domakedefun
    \makecsname{#1}\makecsname{#1x}\makecsname{#1header}}%
  \temp
d5138 4
a5141 1
% \domakedefun \deffn \deffnx \deffnheader
d5143 3
a5145 2
% Define \deffn and \deffnx, without parameters.
% \deffnheader has to be defined explicitly.
d5147 5
a5151 7
\def\domakedefun#1#2#3{%
  \envdef#1{%
    \startdefun
    \parseargusing\activeparens{\printdefunline#3}%
  }%
  \def#2{\dodefunx#1}%
  \def#3%
d5154 4
a5157 1
%%% Untyped functions:
d5159 7
a5165 2
% @@deffn category name args
\makedefun{deffn}{\deffngeneral{}}
d5167 16
a5182 2
% @@deffn category class name args
\makedefun{defop}#1 {\defopon{#1\ \putwordon}}
d5184 1
a5184 2
% \defopon {category on}class name args
\def\defopon#1#2 {\deffngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }
d5186 1
a5186 1
% \deffngeneral {subind}category name args
d5188 39
a5226 4
\def\deffngeneral#1#2 #3 #4\endheader{%
  % Remember that \dosubind{fn}{foo}{} is equivalent to \doind{fn}{foo}.
  \dosubind{fn}{\code{#3}}{#1}%
  \defname{#2}{}{#3}\magicamp\defunargs{#4\unskip}%
d5229 3
a5231 1
%%% Typed functions:
d5233 5
a5237 2
% @@deftypefn category type name args
\makedefun{deftypefn}{\deftypefngeneral{}}
d5239 1
a5239 2
% @@deftypeop category class type name args
\makedefun{deftypeop}#1 {\deftypeopon{#1\ \putwordon}}
d5241 1
a5241 2
% \deftypeopon {category on}class type name args
\def\deftypeopon#1#2 {\deftypefngeneral{\putwordon\ \code{#2}}{#1\ \code{#2}} }
d5243 8
a5250 5
% \deftypefngeneral {subind}category type name args
%
\def\deftypefngeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{fn}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
d5253 1
a5253 1
%%% Typed variables:
d5255 1
a5255 2
% @@deftypevr category type var args
\makedefun{deftypevr}{\deftypecvgeneral{}}
d5257 16
a5272 2
% @@deftypecv category class type var args
\makedefun{deftypecv}#1 {\deftypecvof{#1\ \putwordof}}
d5274 1
a5274 2
% \deftypecvof {category of}class type var args
\def\deftypecvof#1#2 {\deftypecvgeneral{\putwordof\ \code{#2}}{#1\ \code{#2}} }
d5276 6
a5281 5
% \deftypecvgeneral {subind}category type var args
%
\def\deftypecvgeneral#1#2 #3 #4 #5\endheader{%
  \dosubind{vr}{\code{#4}}{#1}%
  \defname{#2}{#3}{#4}\defunargs{#5\unskip}%
d5284 1
a5284 1
%%% Untyped variables:
d5286 1
a5286 2
% @@defvr category var args
\makedefun{defvr}#1 {\deftypevrheader{#1} {} }
d5288 5
a5292 2
% @@defcv category class var args
\makedefun{defcv}#1 {\defcvof{#1\ \putwordof}}
d5294 28
a5321 2
% \defcvof {category of}class var args
\def\defcvof#1#2 {\deftypecvof{#1}#2 {} }
d5323 12
a5334 5
%%% Type:
% @@deftp category name args
\makedefun{deftp}#1 #2 #3\endheader{%
  \doind{tp}{\code{#2}}%
  \defname{#1}{}{#2}\defunargs{#3\unskip}%
d5337 14
a5350 12
% Remaining @@defun-like shortcuts:
\makedefun{defun}{\deffnheader{\putwordDeffunc} }
\makedefun{defmac}{\deffnheader{\putwordDefmac} }
\makedefun{defspec}{\deffnheader{\putwordDefspec} }
\makedefun{deftypefun}{\deftypefnheader{\putwordDeffunc} }
\makedefun{defvar}{\defvrheader{\putwordDefvar} }
\makedefun{defopt}{\defvrheader{\putwordDefopt} }
\makedefun{deftypevar}{\deftypevrheader{\putwordDefvar} }
\makedefun{defmethod}{\defopon\putwordMethodon}
\makedefun{deftypemethod}{\deftypeopon\putwordMethodon}
\makedefun{defivar}{\defcvof\putwordInstanceVariableof}
\makedefun{deftypeivar}{\deftypecvof\putwordInstanceVariableof}
d5352 3
a5354 6
% \defname, which formats the name of the @@def (not the args).
% #1 is the category, such as "Function".
% #2 is the return type, if any.
% #3 is the function name.
% 
% We are followed by (but not passed) the arguments, if any.
d5356 7
a5362 49
\def\defname#1#2#3{%
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \advance\leftskip by -\defbodyindent
  %
  % How we'll format the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \def\temp{#1}%
  \setbox0=\hbox{\kern\deflastargmargin \ifx\temp\empty\else [\rm\temp]\fi}
  %
  % Figure out line sizes for the paragraph shape.
  % The first line needs space for \box0; but if \rightskip is nonzero,
  % we need only space for the part of \box0 which exceeds it:
  \dimen0=\hsize  \advance\dimen0 by -\wd0  \advance\dimen0 by \rightskip
  % The continuations:
  \dimen2=\hsize  \advance\dimen2 by -\defargsindent
  % (plain.tex says that \dimen1 should be used only as global.)
  \parshape 2 0in \dimen0 \defargsindent \dimen2
  %
  % Put the type name to the right margin.
  \noindent
  \hbox to 0pt{%
    \hfil\box0 \kern-\hsize
    % \hsize has to be shortened this way:
    \kern\leftskip
    % Intentionally do not respect \rightskip, since we need the space.
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \exdentamount=\defbodyindent
  {%
    % defun fonts. We use typewriter by default (used to be bold) because:
    % . we're printing identifiers, they should be in tt in principle.
    % . in languages with many accents, such as Czech or French, it's
    %   common to leave accents off identifiers.  The result looks ok in
    %   tt, but exceedingly strange in rm.
    % . we don't want -- and --- to be treated as ligatures.
    % . this still does not fix the ?` and !` ligatures, but so far no
    %   one has made identifiers using them :).
    \df \tt
    \def\temp{#2}% return value type
    \ifx\temp\empty\else \tclose{\temp} \fi
    #3% output function name
  }%
  {\rm\enskip}% hskip 0.5 em of \tenrm
  %
  \boldbrax
  % arguments will be output next, if any.
d5365 11
a5375 15
% Print arguments in slanted roman (not ttsl), inconsistently with using
% tt for the name.  This is because literal text is sometimes needed in
% the argument list (groff manual), and ttsl and tt are not very
% distinguishable.  Prevent hyphenation at `-' chars.
% 
\def\defunargs#1{%
  % use sl by default (not ttsl), 
  % tt for the names.
  \df \sl \hyphenchar\font=0
  %
  % On the other hand, if an argument has two dashes (for instance), we
  % want a way to get ttsl.  Let's try @@var for that.
  \let\var=\ttslanted
  #1%
  \sl\hyphenchar\font=45
d5378 3
a5380 1
% We want ()&[] to print specially on the defun line.
d5382 30
a5411 4
\def\activeparens{%
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\[=\active \catcode`\]=\active
  \catcode`\&=\active
d5414 1
a5414 2
% Make control sequences which act like normal parenthesis chars.
\let\lparen = ( \let\rparen = )
d5416 1
a5416 8
% Be sure that we always have a definition for `(', etc.  For example,
% if the fn name has parens in it, \boldbrax will not be in effect yet,
% so TeX would otherwise complain about undefined control sequence.
{
  \activeparens
  \global\let(=\lparen \global\let)=\rparen
  \global\let[=\lbrack \global\let]=\rbrack
  \global\let& = \&
d5418 3
a5420 2
  \gdef\boldbrax{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb}
  \gdef\magicamp{\let&=\amprm}
d5423 21
a5443 1
\newcount\parencount
d5445 2
a5446 3
% If we encounter &foo, then turn on ()-hacking afterwards
\newif\ifampseen
\def\amprm#1 {\ampseentrue{\bf\&#1 }}
d5448 1
a5448 19
\def\parenfont{%
  \ifampseen
    % At the first level, print parens in roman,
    % otherwise use the default font.
    \ifnum \parencount=1 \rm \fi
  \else
    % The \sf parens (in \boldbrax) actually are a little bolder than
    % the contained text.  This is especially needed for [ and ] .
    \sf
  \fi
}
\def\infirstlevel#1{%
  \ifampseen
    \ifnum\parencount=1
      #1%
    \fi
  \fi
}
\def\bfafterword#1 {#1 \bf}
d5450 1
a5450 10
\def\opnr{%
  \global\advance\parencount by 1
  {\parenfont(}%
  \infirstlevel \bfafterword
}
\def\clnr{%
  {\parenfont)}%
  \infirstlevel \sl
  \global\advance\parencount by -1
}
d5452 1
a5452 9
\newcount\brackcount
\def\lbrb{%
  \global\advance\brackcount by 1
  {\bf[}%
}
\def\rbrb{%
  {\bf]}%
  \global\advance\brackcount by -1
}
d5454 25
a5478 12
\def\checkparencounts{%
  \ifnum\parencount=0 \else \badparencount \fi
  \ifnum\brackcount=0 \else \badbrackcount \fi
}
\def\badparencount{%
  \errmessage{Unbalanced parentheses in @@def}%
  \global\parencount=0
}
\def\badbrackcount{%
  \errmessage{Unbalanced square braces in @@def}%
  \global\brackcount=0
}
d5487 20
a5506 8
  \newwrite\macscribble
  \def\scantokens#1{%
    \toks0={#1\endinput}%
    \immediate\openout\macscribble=\jobname.tmp
    \immediate\write\macscribble{\the\toks0}%
    \immediate\closeout\macscribble
    \input \jobname.tmp
  }
a5508 17
\def\scanmacro#1{%
  \begingroup
    \newlinechar`\^^M
    \let\xeatspaces\eatspaces
    % Undo catcode changes of \startcontents and \doprintindex
    \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
    % ... and \example
    \spaceisspace
    %
    % Append \endinput to make sure that TeX does not see the ending newline.
    %
    % I've verified that it is necessary both for e-TeX and for ordinary TeX
    %							--kasal, 29nov03
    \scantokens{#1\endinput}%
  \endgroup
}

d5516 1
a5516 1
% This does \let #1 = #2, except with \csnames.
d5613 2
a5614 1
\parseargdef\unmacro{%
d5631 1
a5631 1
%
d5764 1
a5764 1
\def\alias{\parseargusing\obeyspaces\aliasxxx}
d5766 4
a5769 7
\def\aliasyyy #1=#2\relax{%
  {%
    \expandafter\let\obeyedspace=\empty
    \xdef\next{\global\let\makecsname{#1}=\makecsname{#2}}%
  }%
  \next
}
d5773 1
d5785 4
a5788 4
% @@node's only job in TeX is to define \lastnode, which is used in
% cross-references.
\parseargdef\node{\checkenv{}\nodexxx #1,\finishnodeparse}
\def\nodexxx#1,#2\finishnodeparse{\gdef\lastnode{#1}}
d5790 1
a5790 1
\let\lastnode=\empty
d5792 19
a5810 7
% Write a cross-reference definition for the current node.  #1 is the
% type (Ynumbered, Yappendix, Ynothing).
% 
\def\donoderef#1{%
  \ifx\lastnode\empty\else
    \setref{\lastnode}{#1}%
    \global\let\lastnode=\empty
d5814 1
d5818 3
a5820 4
%
\def\savesf{\relax \ifhmode \savesfregister=\spacefactor \fi}
\def\restoresf{\relax \ifhmode \spacefactor=\savesfregister \fi}
\def\anchor#1{\savesf \setref{#1}{Ynothing}\restoresf \ignorespaces}
d5823 10
a5832 10
% anchor), which consists of three parts:
% 1) NAME-title - the current sectioning name taken from \thissection,
%                 or the anchor name.
% 2) NAME-snt   - section number and type, passed as the SNT arg, or
%                 empty for anchors.
% 3) NAME-pg    - the page number.
% 
% This is called from \donoderef, \anchor, and \dofloat.  In the case of
% floats, there is an additional part, which is not written here:
% 4) NAME-lof   - the text as it should appear in a @@listoffloats.
d5834 2
a5835 1
\def\setref#1#2{%
d5837 6
a5842 16
  \iflinks
    {%
      \atdummies  % preserve commands, but don't expand them
      \turnoffactive
      \otherbackslash
      \edef\writexrdef##1##2{%
	\write\auxfile{@@xrdef{#1-% #1 of \setref, expanded by the \edef
	  ##1}{##2}}% these are parameters of \writexrdef
      }%
      \toks0 = \expandafter{\thissection}%
      \immediate \writexrdef{title}{\the\toks0 }%
      \immediate \writexrdef{snt}{\csname #2\endcsname}% \Ynumbered etc.
      \writexrdef{pg}{\folio}% will be written later, during \shipout
    }%
  \fi
}
d5855 3
a5857 3
  \def\printedrefname{\ignorespaces #3}%
  \setbox1=\hbox{\printedmanual\unskip}%
  \setbox0=\hbox{\printedrefname\unskip}%
d5862 1
a5862 1
      \def\printedrefname{\ignorespaces #1}%
d5868 1
a5868 1
        \def\printedrefname{\ignorespaces #1}%
d5872 1
a5872 1
          \def\printedrefname{\refx{#1-title}{}}%
d5875 1
a5875 1
          \def\printedrefname{\ignorespaces #1}%
d5881 6
a5886 1
  % Make link in pdf output.
d5896 1
a5896 1
         goto name{\pdfmkpgn{#1}}%
d5902 2
a5903 26
  % Float references are printed completely differently: "Figure 1.2"
  % instead of "[somenode], p.3".  We distinguish them by the
  % LABEL-title being set to a magic string.
  {%
    % Have to otherify everything special to allow the \csname to
    % include an _ in the xref name, etc.
    \indexnofonts
    \turnoffactive
    \otherbackslash
    \expandafter\global\expandafter\let\expandafter\Xthisreftitle
      \csname XR#1-title\endcsname
  }%
  \iffloat\Xthisreftitle
    % If the user specified the print name (third arg) to the ref,
    % print it instead of our usual "Figure 1.2".
    \ifdim\wd0 = 0pt
      \refx{#1-snt}%
    \else
      \printedrefname
    \fi
    %
    % if the user also gave the printed manual name (fifth arg), append
    % "in MANUALNAME". 
    \ifdim \wd1 > 0pt
      \space \putwordin{} \cite{\printedmanual}%
    \fi
d5905 15
a5919 31
    % node/anchor (non-float) references.
    % 
    % If we use \unhbox0 and \unhbox1 to print the node names, TeX does not
    % insert empty discretionaries after hyphens, which means that it will
    % not find a line break at a hyphen in a node names.  Since some manuals
    % are best written with fairly long node names, containing hyphens, this
    % is a loss.  Therefore, we give the text of the node name again, so it
    % is as if TeX is seeing it for the first time.
    \ifdim \wd1 > 0pt
      \putwordsection{} ``\printedrefname'' \putwordin{} \cite{\printedmanual}%
    \else
      % _ (for example) has to be the character _ for the purposes of the
      % control sequence corresponding to the node, but it has to expand
      % into the usual \leavevmode...\vrule stuff for purposes of
      % printing. So we \turnoffactive for the \refx-snt, back on for the
      % printing, back off for the \refx-pg.
      {\turnoffactive \otherbackslash
       % Only output a following space if the -snt ref is nonempty; for
       % @@unnumbered and @@anchor, it won't be.
       \setbox2 = \hbox{\ignorespaces \refx{#1-snt}{}}%
       \ifdim \wd2 > 0pt \refx{#1-snt}\space\fi
      }%
      % output the `[mynode]' via a macro so it can be overridden.
      \xrefprintnodename\printedrefname
      %
      % But we always want a comma and a space:
      ,\space
      %
      % output the `page 3'.
      \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
    \fi
d5924 1
a5924 4
% This macro is called from \xrefX for the `[nodename]' part of xref
% output.  It's a separate macro only so it can be changed more easily,
% since square brackets don't work well in some documents.  Particularly
% one that Bob is working on :).
d5926 10
a5935 1
\def\xrefprintnodename#1{[#1]}
d5937 4
a5940 2
% Things referred to by \setref.
%
d5942 1
a5942 2
\def\Yomitfromtoc{}
\def\Ynumbered{%
d5953 2
a5954 1
\def\Yappendix{%
d5967 9
d5984 1
a5984 1
      \csname XR#1\endcsname
d6006 3
a6008 26
% This is the macro invoked by entries in the aux file.  Usually it's
% just a \def (we prepend XR to the control sequence name to avoid
% collisions).  But if this is a float type, we have more work to do.
%
\def\xrdef#1#2{%
  \expandafter\gdef\csname XR#1\endcsname{#2}% remember this xref value.
  %
  % Was that xref control sequence that we just defined for a float?
  \expandafter\iffloat\csname XR#1\endcsname
    % it was a float, and we have the (safe) float type in \iffloattype.
    \expandafter\let\expandafter\floatlist
      \csname floatlist\iffloattype\endcsname
    % 
    % Is this the first time we've seen this float type?
    \expandafter\ifx\floatlist\relax
      \toks0 = {\do}% yes, so just \do
    \else
      % had it before, so preserve previous elements in list.
      \toks0 = \expandafter{\floatlist\do}%
    \fi
    %
    % Remember this xref in the control sequence \floatlistFLOATTYPE,
    % for later use in \listoffloats.
    \expandafter\xdef\csname floatlist\iffloattype\endcsname{\the\toks0{#1}}%
  \fi
}
a6010 10
% 
\def\tryauxfile{%
  \openin 1 \jobname.aux
  \ifeof 1 \else
    \readauxfile
    \global\havexrefstrue
  \fi
  \closein 1
}

d6069 1
a6069 10
  % This is to support \ in node names and titles, since the \
  % characters end up in a \csname.  It's easier than
  % leaving it active and making its active definition an actual \
  % character.  What I don't understand is why it works in the *value*
  % of the xrdef.  Seems like it should be a catcode12 \, and that
  % should not typeset properly.  But it works, so I'm moving on for
  % now.  --karl, 15jan04.
  \catcode`\\=\other
  %
  % Make the characters 128-255 be printing characters.
d6079 8
a6086 1
  % @@ is our escape character in .aux files, and we need braces.
d6091 9
a6099 1
  \input \jobname.aux
d6103 1
a6103 2
\message{insertions,}
% including footnotes.
d6117 2
a6122 2
  \let\indent=\ptexindent
  \let\noindent=\ptexnoindent
d6129 1
a6129 1
  \ifhmode\edef\@@sf{\spacefactor\the\spacefactor}\ptexslash\fi
d6140 2
a6141 2
% Oh yes, they do; otherwise, @@ifset (and anything else that uses
% \parseargline) fails inside footnotes because the tokens are fixed when
d6144 5
d6150 1
a6150 1
  \insert\footins\bgroup
d6186 27
a6212 17
% In case a @@footnote appears in a vbox, save the footnote text and create
% the real \insert just after the vbox finished.  Otherwise, the insertion
% would be lost.
% Similarily, if a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is finished.
% And the same can be done for other insert classes.  --kasal, 16nov03.

% Replace the \insert primitive by a cheating macro.
% Deeper inside, just make sure that the saved insertions are not spilled
% out prematurely.
%
\def\startsavinginserts{%
  \ifx \insert\ptexinsert
    \let\insert\saveinsert
  \else
    \let\checkinserts\relax
  \fi
d6215 3
a6217 2
% This \insert replacement works for both \insert\footins{foo} and
% \insert\footins\bgroup foo\egroup, but it doesn't work for \insert27{foo}.
d6219 1
a6219 38
\def\saveinsert#1{%
  \edef\next{\noexpand\savetobox \makeSAVEname#1}%
  \afterassignment\next
  % swallow the left brace
  \let\temp =
}
\def\makeSAVEname#1{\makecsname{SAVE\expandafter\gobble\string#1}}
\def\savetobox#1{\global\setbox#1 = \vbox\bgroup \unvbox#1}

\def\checksaveins#1{\ifvoid#1\else \placesaveins#1\fi}

\def\placesaveins#1{%
  \ptexinsert \csname\expandafter\gobblesave\string#1\endcsname
    {\box#1}%
}

% eat @@SAVE -- beware, all of them have catcode \other:
{
  \def\dospecials{\do S\do A\do V\do E} \uncatcodespecials  %  ;-)
  \gdef\gobblesave @@SAVE{}
}

% initialization:
\def\newsaveins #1{%
  \edef\next{\noexpand\newsaveinsX \makeSAVEname#1}%
  \next
}
\def\newsaveinsX #1{%
  \csname newbox\endcsname #1%
  \expandafter\def\expandafter\checkinserts\expandafter{\checkinserts
    \checksaveins #1}%
}

% initialize:
\let\checkinserts\empty
\newsaveins\footins
\newsaveins\margin

d6229 1
a6234 1
\closein 1
d6270 1
a6270 1
    % above and below.
a6289 243
% @@float FLOATTYPE,LOC ... @@end float for displayed figures, tables, etc.
% We don't actually implement floating yet, we just plop the float "here".
% But it seemed the best name for the future.
% 
\envparseargdef\float{\dofloat #1,,,\finish}

% #1 is the optional FLOATTYPE, the text label for this float, typically
% "Figure", "Table", "Example", etc.  Can't contain commas.  If omitted,
% this float will not be numbered and cannot be referred to.
% 
% #2 is the optional xref label.  Also must be present for the float to
% be referable.
% 
% #3 is the optional positioning argument; for now, it is ignored.  It
% will somehow specify the positions allowed to float to (here, top, bottom).
% 
% We keep a separate counter for each FLOATTYPE, which we reset at each
% chapter-level command.
\let\resetallfloatnos=\empty
%
\def\dofloat#1,#2,#3,#4\finish{%
  \let\thiscaption=\empty
  \let\thisshortcaption=\empty
  %
  % don't lose footnotes inside @@float.
  \startsavinginserts
  %
  \vtop\bgroup
    \def\floattype{#1}%
    \def\floatlabel{#2}%
    \def\floatloc{#3}% we do nothing with this yet.
    %
    \ifx\floattype\empty
      \let\safefloattype=\empty
    \else
      {%
        % the floattype might have accents or other special characters,
        % but we need to use it in a control sequence name.
        \indexnofonts
        \turnoffactive
        \xdef\safefloattype{\floattype}%
      }%
    \fi
    %
    % If label is given but no type, we handle that as the empty type.
    \ifx\floatlabel\empty \else
      % We want each FLOATTYPE to be numbered separately (Figure 1,
      % Table 1, Figure 2, ...).  (And if no label, no number.)
      % 
      \expandafter\getfloatno\csname\safefloattype floatno\endcsname
      \global\advance\floatno by 1
      %
      {%
        % This magic value for \thissection is output by \setref as the
        % XREFLABEL-title value.  \xrefX uses it to distinguish float
        % labels (which have a completely different output format) from
        % node and anchor labels.  And \xrdef uses it to construct the
        % lists of floats.
        % 
        \edef\thissection{\floatmagic=\safefloattype}%
        \setref{\floatlabel}{Yfloat}%
      }%
    \fi
    %
    % start with \parskip glue, I guess.
    \vskip\parskip
    %
    % Don't suppress indentation if a float happens to start a section.
    \restorefirstparagraphindent
}

% we have these possibilities:
% @@float Foo,lbl & @@caption{Cap}: Foo 1.1: Cap
% @@float Foo,lbl & no caption:    Foo 1.1
% @@float Foo & @@caption{Cap}:     Foo: Cap
% @@float Foo & no caption:        Foo
% @@float ,lbl & Caption{Cap}:     1.1: Cap
% @@float ,lbl & no caption:       1.1
% @@float & @@caption{Cap}:         Cap
% @@float & no caption:
%
\def\Efloat{%
    \let\floatident = \empty
    %
    % In all cases, if we have a float type, it comes first.
    \ifx\floattype\empty \else \def\floatident{\floattype}\fi
    %
    % If we have an xref label, the number comes next.
    \ifx\floatlabel\empty \else
      \ifx\floattype\empty \else % if also had float type, need tie first.
        \appendtomacro\floatident{\tie}%
      \fi
      % the number.
      \appendtomacro\floatident{\chaplevelprefix\the\floatno}%
    \fi
    %
    % Start the printed caption with what we've constructed in
    % \floatident, but keep it separate; we need \floatident again.
    \let\captionline = \floatident
    %
    \ifx\thiscaption\empty \else
      \ifx\floatident\empty \else
	\appendtomacro\captionline{: }% had ident, so need a colon between
      \fi
      %
      % caption text.
      \appendtomacro\captionline\thiscaption
    \fi
    %
    % If we have anything to print, print it, with space before.
    % Eventually this needs to become an \insert.
    \ifx\captionline\empty \else
      \vskip.5\parskip
      \captionline
    \fi
    %
    % If have an xref label, write the list of floats info.  Do this
    % after the caption, to avoid chance of it being a breakpoint.
    \ifx\floatlabel\empty \else
      % Write the text that goes in the lof to the aux file as
      % \floatlabel-lof.  Besides \floatident, we include the short
      % caption if specified, else the full caption if specified, else nothing.
      {%
        \atdummies \turnoffactive \otherbackslash
        \immediate\write\auxfile{@@xrdef{\floatlabel-lof}{%
          \floatident
          \ifx\thisshortcaption\empty
            \ifx\thiscaption\empty \else : \thiscaption \fi
          \else
            : \thisshortcaption
          \fi
        }}%
      }%
    \fi
    %
    % Space below caption, if we printed anything.
    \ifx\printedsomething\empty \else \vskip\parskip \fi
  \egroup  % end of \vtop
  \checkinserts
}

% Append the tokens #2 to the definition of macro #1, not expanding either.
% 
\newtoks\appendtomacroAtoks
\newtoks\appendtomacroBtoks
\def\appendtomacro#1#2{%
  \appendtomacroAtoks = \expandafter{#1}%
  \appendtomacroBtoks = {#2}%
  \edef#1{\the\appendtomacroAtoks \the\appendtomacroBtoks}%
}

% @@caption, @@shortcaption are easy.
% 
\long\def\caption#1{\checkenv\float \def\thiscaption{#1}}
\def\shortcaption#1{\checkenv\float \def\thisshortcaption{#1}}

% The parameter is the control sequence identifying the counter we are
% going to use.  Create it if it doesn't exist and assign it to \floatno.
\def\getfloatno#1{%
  \ifx#1\relax
      % Haven't seen this figure type before.
      \csname newcount\endcsname #1%
      %
      % Remember to reset this floatno at the next chap.
      \expandafter\gdef\expandafter\resetallfloatnos
        \expandafter{\resetallfloatnos #1=0 }%
  \fi
  \let\floatno#1%
}

% \setref calls this to get the XREFLABEL-snt value.  We want an @@xref
% to the FLOATLABEL to expand to "Figure 3.1".  We call \setref when we
% first read the @@float command.
% 
\def\Yfloat{\floattype@@tie \chaplevelprefix\the\floatno}%

% Magic string used for the XREFLABEL-title value, so \xrefX can
% distinguish floats from other xref types.
\def\floatmagic{!!float!!}

% #1 is the control sequence we are passed; we expand into a conditional
% which is true if #1 represents a float ref.  That is, the magic
% \thissection value which we \setref above.
% 
\def\iffloat#1{\expandafter\doiffloat#1==\finish}
%
% #1 is (maybe) the \floatmagic string.  If so, #2 will be the
% (safe) float type for this float.  We set \iffloattype to #2.
% 
\def\doiffloat#1=#2=#3\finish{%
  \def\temp{#1}%
  \def\iffloattype{#2}%
  \ifx\temp\floatmagic
}

% @@listoffloats FLOATTYPE - print a list of floats like a table of contents.
% 
\parseargdef\listoffloats{%
  \def\floattype{#1}% floattype
  {%
    % the floattype might have accents or other special characters,
    % but we need to use it in a control sequence name.
    \indexnofonts
    \turnoffactive
    \xdef\safefloattype{\floattype}%
  }%
  %
  % \xrdef saves the floats as a \do-list in \floatlistSAFEFLOATTYPE.
  \expandafter\ifx\csname floatlist\safefloattype\endcsname \relax
    \ifhavexrefs
      % if the user said @@listoffloats foo but never @@float foo.
      \message{\linenumber No `\safefloattype' floats to list.}%
    \fi
  \else
    \begingroup
      \leftskip=\tocindent  % indent these entries like a toc
      \let\do=\listoffloatsdo
      \csname floatlist\safefloattype\endcsname
    \endgroup
  \fi
}

% This is called on each entry in a list of floats.  We're passed the
% xref label, in the form LABEL-title, which is how we save it in the
% aux file.  We strip off the -title and look up \XRLABEL-lof, which
% has the text we're supposed to typeset here.
% 
% Figures without xref labels will not be included in the list (since
% they won't appear in the aux file).
% 
\def\listoffloatsdo#1{\listoffloatsdoentry#1\finish}
\def\listoffloatsdoentry#1-title\finish{{%
  % Can't fully expand XR#1-lof because it can contain anything.  Just
  % pass the control sequence.  On the other hand, XR#1-pg is just the
  % page number, and we want to fully expand that so we can get a link
  % in pdf output.
  \toksA = \expandafter{\csname XR#1-lof\endcsname}%
  %
  % use the same \entry macro we use to generate the TOC and index.
  \edef\writeentry{\noexpand\entry{\the\toksA}{\csname XR#1-pg\endcsname}}%
  \writeentry
}}

d6298 2
a6299 1
\parseargdef\documentlanguage{%
d6301 10
a6310 9
    % Read the file if it exists.
    \openin 1 txi-#1.tex
    \ifeof 1
      \errhelp = \nolanghelp
      \errmessage{Cannot read language file txi-#1.tex}%
    \else
      \input txi-#1.tex
    \fi
    \closein 1
d6358 1
a6358 1
%
d6426 1
a6426 1
  % Double-side printing via postscript on Laserjet 4050
d6467 1
a6467 1
% A specific text layout, 24x15cm overall, intended for A4 paper.
d6493 2
a6494 1
\parseargdef\pagesizes{\pagesizesyyy #1,,\finish}
d6541 2
a6542 2
% This macro is used to make a character print one way in \tt
% (where it can probably be output as-is), and another way in other fonts,
d6590 7
d6605 1
a6605 1
% \backslashcurfont outputs one backslash character in current font,
d6607 1
a6607 2
\global\chardef\backslashcurfont=`\\
\global\let\rawbackslashxx=\backslashcurfont  % let existing .??s files work
d6609 1
a6609 1
% \rawbackslash defines an active \ to do \backslashcurfont.
d6613 1
a6613 1
 @@gdef@@rawbackslash{@@let\=@@backslashcurfont}
d6621 1
a6621 1
\def\normalbackslash{{\tt\backslashcurfont}}
a6637 1
  @@unsepspaces
d6643 1
a6643 1
%
d6672 1
a6672 1
% These look ok in all fonts, so just make them not special.
d6677 4
a6688 6

@@c vim:sw=2:

@@ignore
   arch-tag: e1b36e32-c96e-4135-a41a-0b2efa2ea115
@@end ignore
@


1.5
log
@2002-08-23  Andrew Cagney  <ac131313@@redhat.com>

	* texinfo/texinfo.tex: Import version 2002-06-04.06.
@
text
@d6 1
a6 1
\def\texinfoversion{2002-06-04.06}
d8 2
a9 2
% Copyright (C) 1985, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
%               2000, 01, 02 Free Software Foundation, Inc.
d32 1
a32 1
%   ftp://ftp.gnu.org/gnu/texinfo.tex
a33 1
%   ftp://texinfo.org/texinfo/texinfo.tex
d38 2
a42 3
% Texinfo has a small home page at http://texinfo.org/ and also
% http://www.gnu.org/software/texinfo.
%
d58 4
a61 3
%
% It is possible to adapt texinfo.tex for other languages.  You can get
% the existing language-specific files from the full Texinfo distribution.
d71 7
d88 2
d92 2
a97 7
% We never want plain's outer \+ definition in Texinfo.
% For @@tex, we can use \tabalign.
\let\+ = \relax

\message{Basics,}
\chardef\other=12

d144 12
d160 6
d172 2
a173 2
\newdimen \bindingoffset
\newdimen \normaloffset
d178 3
a180 1
% since that produces some useless output on the terminal.
d183 18
a200 13
\ifx\eTeXversion\undefined
\def\loggingall{\tracingcommands2 \tracingstats2
   \tracingpages1 \tracingoutput1 \tracinglostchars1
   \tracingmacros2 \tracingparagraphs1 \tracingrestores1
   \showboxbreadth\maxdimen\showboxdepth\maxdimen
}%
\else
\def\loggingall{\tracingcommands3 \tracingstats2
   \tracingpages1 \tracingoutput1 \tracinglostchars1
   \tracingmacros2 \tracingparagraphs1 \tracingrestores1
   \tracingscantokens1 \tracingassigns1 \tracingifs1
   \tracinggroups1 \tracingnesting2
   \showboxbreadth\maxdimen\showboxdepth\maxdimen
a201 1
\fi
d306 1
a306 1
  }% end of group with \turnoffactive
a465 11
% Single-spacing is done by various environments (specifically, in
% \nonfillstart and \quotations).
\newskip\singlespaceskip \singlespaceskip = 12.5pt
\def\singlespace{%
  % Why was this kern here?  It messes up equalizing space above and below
  % environments.  --karl, 6may93
  %{\advance \baselineskip by -\singlespaceskip
  %\kern \baselineskip}%
  \setleading\singlespaceskip
}

d485 3
a487 2
  % Definitions to produce actual \{ & \} command in an index.
  \catcode`\{ = 12 \catcode`\} = 12
d489 6
a494 4
  \catcode`\@@ = 0 \catcode`\\ = 12
  @@gdef@@lbracecmd[\{]%
  @@gdef@@rbracecmd[\}]%
@@endgroup
d497 1
a497 1
% Others are defined by plain TeX: @@` @@' @@" @@^ @@~ @@= @@v @@H.
d506 1
a506 1
% Plain TeX defines: @@AA @@AE @@O @@OE @@L (and lowercase versions) @@ss.
d561 10
d584 12
d599 1
a599 1
  \vtop\bgroup
d797 8
a804 8
  \catcode`\\=12
  \catcode`~=12
  \catcode`^=12
  \catcode`_=12
  \catcode`|=12
  \catcode`<=12
  \catcode`>=12
  \catcode`+=12
d810 1
d816 11
a826 6
% @@center line   outputs that line, centered

\def\center{\parsearg\centerzzz}
\def\centerzzz #1{{\advance\hsize by -\leftskip
\advance\hsize by -\rightskip
\centerline{#1}}}
a890 5
% @@math does not do math typesetting in section titles, index
% entries, and other such contexts where the catcodes are set before
% @@math gets a chance to work.  This could perhaps be fixed, but for now
% at least we can have real math in the main text, where it's needed most.
%
d898 1
a898 1
{\catcode95 = \active  % 95 = _
d900 1
a900 1
  \catcode95=\active
d916 1
d920 17
d1028 1
a1028 1
	 #1.pdf%
a1049 3
      \indexnofonts
      \def\tt{}
      \let\_ = \normalunderscore
a1054 2
      \let\appendixentry = \chapentry
      \def\unnumbchapentry ##1##2{}
a1055 1
      \def\unnumbsecentry ##1##2##3{\advancenumber{chap##2}}
a1056 1
      \def\unnumbsubsecentry ##1##2##3##4{\advancenumber{sec##2.##3}}
d1058 5
a1062 1
      \def\unnumbsubsubsecentry ##1##2##3##4##5{\advancenumber{subsec##2.##3.##4}}
a1065 3
      \let\appendixentry = \chapentry
      \def\unnumbchapentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
a1067 2
      \def\unnumbsecentry ##1##2##3{%
        \pdfoutline goto name{\pdfmkpgn{##3}}{##1}}
a1069 2
      \def\unnumbsubsecentry ##1##2##3##4{%
        \pdfoutline goto name{\pdfmkpgn{##4}}{##1}}
d1072 11
a1082 2
      \def\unnumbsubsubsecentry ##1##2##3##4##5{%
        \pdfoutline goto name{\pdfmkpgn{##5}}{##1}}
d1232 1
a1232 1
  \let\mainmagstep=\magstep1
d1240 1
a1240 1
% Instead of cmb10, you many want to use cmbx10.
d1242 2
a1243 1
% looks better when embedded in a line with cmr10.
d1294 1
d1392 19
a1410 1
\let\smallexamplefonts = \smallerfonts
d1427 1
d1435 2
a1436 2
\def\smartslanted#1{{\sl #1}\futurelet\next\smartitalicx}
\def\smartitalic#1{{\it #1}\futurelet\next\smartitalicx}
d1454 11
d1564 3
d1573 2
a1574 3
% Default is kbdinputdistinct.  (Too much of a hassle to call the macro,
% the catcodes are wrong for parsearg to work.)
\gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\ttsl}
d1688 2
a1689 1
   \def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines}%
d1970 1
a1970 1
    % Stop a page break at the \parskip glue coming up.  Unfortunately
d1972 10
a1981 2
    % \baselineskip glue.
    \nobreak
a2086 5
% Set sfcode to normal for the chars that usually have another value.
% These are `.?!:;,'
\def\frenchspacing{\sfcode46=1000 \sfcode63=1000 \sfcode33=1000
  \sfcode58=1000 \sfcode59=1000 \sfcode44=1000 }

d2308 2
a2309 2
         \setbox0=\hbox{#1\unskip }% Add a normal word space as a separator;
                            % typically that is always in the input, anyway.
a2323 6
% This used to have \hskip1sp.  But then the space in a template line is
% not enough.  That is bad.  So let's go back to just & until we
% encounter the problem it was intended to solve again.
% --karl, nathan@@acm.org, 20apr99.
\def\tab{&}

d2329 7
a2335 1
  \let\item\crcr
d2343 5
a2347 1
  \def\Emultitable{\global\setpercentfalse\cr\egroup\egroup}%
d2436 19
d2490 12
d2504 6
a2509 3
  \let\defcv = \relax
  \let\deffn = \relax
  \let\deffnx = \relax
d2511 54
a2564 24
  \let\defivar = \relax
  \let\defmac = \relax
  \let\defmethod = \relax
  \let\defop = \relax
  \let\defopt = \relax
  \let\defspec = \relax
  \let\deftp = \relax
  \let\deftypefn = \relax
  \let\deftypefun = \relax
  \let\deftypeivar = \relax
  \let\deftypeop = \relax
  \let\deftypevar = \relax
  \let\deftypevr = \relax
  \let\defun = \relax
  \let\defvar = \relax
  \let\defvr = \relax
  \let\ref = \relax
  \let\xref = \relax
  \let\printindex = \relax
  \let\pxref = \relax
  \let\settitle = \relax
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\everyheading = \relax
a2565 1
  \let\oddheading = \relax
d2567 1
a2567 2
  \let\evenfooting = \relax
  \let\oddfooting = \relax
d2570 1
d2572 4
a2575 1
  \let\down = \relax
d2577 5
d2583 2
a2584 3
  \let\set = \relax
  \let\clear = \relax
  \let\item = \relax
d2587 1
a2587 2
% Ignore @@ignore, @@ifhtml, @@ifinfo, @@ifplaintext, @@ifnottex, @@html, @@menu,
% @@direntry, and @@documentdescription.
d2589 4
a2592 1
\def\ignore{\doignore{ignore}}
d2595 1
d2597 2
a2598 2
\def\ifnottex{\doignore{ifnottex}}
\def\html{\doignore{html}}
d2600 1
a2600 3
\def\direntry{\doignore{direntry}}
\def\documentdescription{\doignore{documentdescription}}
\def\documentdescriptionword{documentdescription}
d2618 1
a2618 1
  \catcode32 = 10
d2660 1
a2660 1
    \immediate\write16{  (See ftp://ftp.gnu.org/pub/gnu/TeX.README.)}
d2682 2
a2683 2
  % the change of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook: make the current font be a dummy font.
d2704 2
a2705 2
    % dummy.tfm, as suggested in the TeXbook, because not all sites
    % might have that installed.  Therefore, math mode will still
d2734 1
a2734 1
    % Do not execute instructions in @@tex
d2779 1
a2779 1
    \catcode`\-=12 \catcode`\_=12
d2788 6
a2793 5
% about that.  The command has to be fully expandable, since the result
% winds up in the index file.  This means that if the variable's value
% contains other Texinfo commands, it's almost certain it will fail
% (although perhaps we could fix that with sufficient work to do a
% one-level expansion on the result, instead of complete).
d2798 1
d2807 2
a2808 2
\def\ifset{\parsearg\ifsetxxx}
\def\ifsetxxx #1{%
d2810 1
a2810 1
    \expandafter\ifsetfail
d2812 1
a2812 1
    \expandafter\ifsetsucceed
d2814 1
d2823 2
a2824 2
\def\ifclear{\parsearg\ifclearxxx}
\def\ifclearxxx #1{%
d2826 1
a2826 1
    \expandafter\ifclearsucceed
d2828 1
a2828 1
    \expandafter\ifclearfail
d2830 1
d2849 6
a2854 16
% We can't just want to start a group at @@iftex (etc.) and end it at
% @@end iftex, since then @@set commands inside the conditional have no
% effect (they'd get reverted at the end of the group).  So we must
% define \Eiftex to redefine itself to be its previous value.  (We can't
% just define it to fail again with an ``unmatched end'' error, since
% the @@ifset might be nested.)
%
\def\conditionalsucceed#1{%
  \edef\temp{%
    % Remember the current value of \E#1.
    \let\nece{prevE#1} = \nece{E#1}%
    %
    % At the `@@end #1', redefine \E#1 to be its previous value.
    \def\nece{E#1}{\let\nece{E#1} = \nece{prevE#1}}%
  }%
  \temp
a2856 5
% We need to expand lots of \csname's, but we don't want to expand the
% control sequences after we've constructed them.
%
\def\nece#1{\expandafter\noexpand\csname#1\endcsname}

d2948 3
a2950 3
% Take care of texinfo commands likely to appear in an index entry.
% (Must be a way to avoid doing expansion at all, and thus not have to
% laboriously list every single command here.)
d2953 155
a3107 93
\def\ { }%
\def\@@{@@}% change to @@@@ when we switch to @@ as escape char in aux files.
% Need these in case \tex is in effect and \{ is a \delimiter again.
% But can't use \lbracecmd and \rbracecmd because texindex assumes
% braces and backslashes are used only as delimiters.  
\let\{ = \mylbrace
\let\} = \myrbrace
\def\_{{\realbackslash _}}%
\normalturnoffactive
%
% Take care of the plain tex accent commands.
\def\,##1{\realbackslash ,{##1}}%
\def\"{\realbackslash "}%
\def\`{\realbackslash `}%
\def\'{\realbackslash '}%
\def\^{\realbackslash ^}%
\def\~{\realbackslash ~}%
\def\={\realbackslash =}%
\def\b{\realbackslash b}%
\def\c{\realbackslash c}%
\def\d{\realbackslash d}%
\def\u{\realbackslash u}%
\def\v{\realbackslash v}%
\def\H{\realbackslash H}%
\def\dotless##1{\realbackslash dotless {##1}}%
% Take care of the plain tex special European modified letters.
\def\AA{\realbackslash AA}%
\def\AE{\realbackslash AE}%
\def\L{\realbackslash L}%
\def\OE{\realbackslash OE}%
\def\O{\realbackslash O}%
\def\aa{\realbackslash aa}%
\def\ae{\realbackslash ae}%
\def\l{\realbackslash l}%
\def\oe{\realbackslash oe}%
\def\o{\realbackslash o}%
\def\ss{\realbackslash ss}%
%
% Although these internals commands shouldn't show up, sometimes they do.
\def\bf{\realbackslash bf }%
\def\gtr{\realbackslash gtr}%
\def\hat{\realbackslash hat}%
\def\less{\realbackslash less}%
%\def\rm{\realbackslash rm }%
\def\sf{\realbackslash sf}%
\def\sl{\realbackslash sl }%
\def\tclose##1{\realbackslash tclose {##1}}%
\def\tt{\realbackslash tt}%
%
\def\b##1{\realbackslash b {##1}}%
\def\i##1{\realbackslash i {##1}}%
\def\sc##1{\realbackslash sc {##1}}%
\def\t##1{\realbackslash t {##1}}%
\def\r##1{\realbackslash r {##1}}%
%
\def\TeX{\realbackslash TeX}%
\def\acronym##1{\realbackslash acronym {##1}}%
\def\cite##1{\realbackslash cite {##1}}%
\def\code##1{\realbackslash code {##1}}%
\def\command##1{\realbackslash command {##1}}%
\def\dfn##1{\realbackslash dfn {##1}}%
\def\dots{\realbackslash dots }%
\def\emph##1{\realbackslash emph {##1}}%
\def\env##1{\realbackslash env {##1}}%
\def\file##1{\realbackslash file {##1}}%
\def\kbd##1{\realbackslash kbd {##1}}%
\def\key##1{\realbackslash key {##1}}%
\def\math##1{\realbackslash math {##1}}%
\def\option##1{\realbackslash option {##1}}%
\def\samp##1{\realbackslash samp {##1}}%
\def\strong##1{\realbackslash strong {##1}}%
\def\uref##1{\realbackslash uref {##1}}%
\def\url##1{\realbackslash url {##1}}%
\def\var##1{\realbackslash var {##1}}%
\def\w{\realbackslash w }%
%
% These math commands don't seem likely to be used in index entries.
\def\copyright{\realbackslash copyright}%
\def\equiv{\realbackslash equiv}%
\def\error{\realbackslash error}%
\def\expansion{\realbackslash expansion}%
\def\point{\realbackslash point}%
\def\print{\realbackslash print}%
\def\result{\realbackslash result}%
%
% Handle some cases of @@value -- where the variable name does not
% contain - or _, and the value does not contain any
% (non-fully-expandable) commands.
\let\value = \expandablevalue
%
\unsepspaces
% Turn off macro expansion
\turnoffmacros
d3116 6
a3121 3
% \indexnofonts no-ops all font-change commands.
% This is used when outputting the strings to sort the index by.
\def\indexdummyfont#1{#1}
d3124 1
a3124 1

d3126 70
a3195 70
\def\@@{@@}%
% how to handle braces?
\def\_{\normalunderscore}%
%
\let\,=\indexdummyfont
\let\"=\indexdummyfont
\let\`=\indexdummyfont
\let\'=\indexdummyfont
\let\^=\indexdummyfont
\let\~=\indexdummyfont
\let\==\indexdummyfont
\let\b=\indexdummyfont
\let\c=\indexdummyfont
\let\d=\indexdummyfont
\let\u=\indexdummyfont
\let\v=\indexdummyfont
\let\H=\indexdummyfont
\let\dotless=\indexdummyfont
% Take care of the plain tex special European modified letters.
\def\AA{AA}%
\def\AE{AE}%
\def\L{L}%
\def\OE{OE}%
\def\O{O}%
\def\aa{aa}%
\def\ae{ae}%
\def\l{l}%
\def\oe{oe}%
\def\o{o}%
\def\ss{ss}%
%
% Don't no-op \tt, since it isn't a user-level command
% and is used in the definitions of the active chars like <, >, |, etc.
% Likewise with the other plain tex font commands.
%\let\tt=\indexdummyfont
%
\let\b=\indexdummyfont
\let\i=\indexdummyfont
\let\r=\indexdummyfont
\let\sc=\indexdummyfont
\let\t=\indexdummyfont
%
\let\TeX=\indexdummytex
\let\acronym=\indexdummyfont
\let\cite=\indexdummyfont
\let\code=\indexdummyfont
\let\command=\indexdummyfont
\let\dfn=\indexdummyfont
\let\dots=\indexdummydots
\let\emph=\indexdummyfont
\let\env=\indexdummyfont
\let\file=\indexdummyfont
\let\kbd=\indexdummyfont
\let\key=\indexdummyfont
\let\math=\indexdummyfont
\let\option=\indexdummyfont
\let\samp=\indexdummyfont
\let\strong=\indexdummyfont
\let\uref=\indexdummyfont
\let\url=\indexdummyfont
\let\var=\indexdummyfont
\let\w=\indexdummyfont
}

% To define \realbackslash, we must make \ not be an escape.
% We must first make another character (@@) an escape
% so we do not become unable to do a definition.

{\catcode`\@@=0 \catcode`\\=\other
 @@gdef@@realbackslash{\}}
d3227 2
a3228 1
        \def\thirdarg{#3}%
d3231 5
a3235 4
        \ifx\thirdarg\emptymacro
          \let\subentry = \empty
        \else
          \def\subentry{ #3}%
d3238 6
a3243 12
        % First process the index entry with all font commands turned
        % off to get the string to sort by.
        {\indexnofonts \xdef\indexsorttmp{#2\subentry}}%
        %
        % Now the real index entry with the fonts.
        \toks0 = {#2}%
        %
        % If the third (subentry) arg is present, add it to the index
        % line to write.
        \ifx\thirdarg\emptymacro \else
          \toks0 = \expandafter{\the\toks0{#3}}%
        \fi
d3275 1
a3275 1
            \ifdim\lastskip = 0pt \else \nobreak\vskip-\lastskip \fi
a3279 1
          %
d3755 19
a3773 17
\secno=0 \subsecno=0 \subsubsecno=0
\global\advance \chapno by 1 \message{\putwordChapter\space \the\chapno}%
\chapmacro {#1}{\the\chapno}%
\gdef\thissection{#1}%
\gdef\thischaptername{#1}%
% We don't substitute the actual chapter name into \thischapter
% because we don't want its macros evaluated now.
\xdef\thischapter{\putwordChapter{} \the\chapno: \noexpand\thischaptername}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash chapentry{\the\toks0}%
                                  {\the\chapno}}}%
\temp
\donoderef
\global\let\section = \numberedsec
\global\let\subsection = \numberedsubsec
\global\let\subsubsection = \numberedsubsubsec
}
d3778 12
a3789 15
\secno=0 \subsecno=0 \subsubsecno=0
\global\advance \appendixno by 1
\message{\putwordAppendix\space \appendixletter}%
\chapmacro {#1}{\putwordAppendix{} \appendixletter}%
\gdef\thissection{#1}%
\gdef\thischaptername{#1}%
\xdef\thischapter{\putwordAppendix{} \appendixletter: \noexpand\thischaptername}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash appendixentry{\the\toks0}%
                       {\appendixletter}}}%
\temp
\appendixnoderef
\global\let\section = \appendixsec
\global\let\subsection = \appendixsubsec
\global\let\subsubsection = \appendixsubsubsec
d3802 22
a3823 24
\secno=0 \subsecno=0 \subsubsecno=0
%
% This used to be simply \message{#1}, but TeX fully expands the
% argument to \message.  Therefore, if #1 contained @@-commands, TeX
% expanded them.  For example, in `@@unnumbered The @@cite{Book}', TeX
% expanded @@cite (which turns out to cause errors because \cite is meant
% to be executed, not expanded).
%
% Anyway, we don't want the fully-expanded definition of @@cite to appear
% as a result of the \message, we just want `@@cite' itself.  We use
% \the<toks register> to achieve this: TeX expands \the<toks> only once,
% simply yielding the contents of <toks register>.  (We also do this for
% the toc entries.)
\toks0 = {#1}\message{(\the\toks0)}%
%
\unnumbchapmacro {#1}%
\gdef\thischapter{#1}\gdef\thissection{#1}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbchapentry{\the\toks0}}}%
\temp
\unnumbnoderef
\global\let\section = \unnumberedsec
\global\let\subsection = \unnumberedsubsec
\global\let\subsubsection = \unnumberedsubsubsec
d3830 5
a3834 8
\subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
\gdef\thissection{#1}\secheading {#1}{\the\chapno}{\the\secno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash secentry{\the\toks0}%
                                  {\the\chapno}{\the\secno}}}%
\temp
\donoderef
\nobreak
d3841 5
a3845 8
\subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
\gdef\thissection{#1}\secheading {#1}{\appendixletter}{\the\secno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash secentry{\the\toks0}%
                                  {\appendixletter}{\the\secno}}}%
\temp
\appendixnoderef
\nobreak
d3851 4
a3854 7
\plainsecheading {#1}\gdef\thissection{#1}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbsecentry%
  {\the\toks0}{\the\chapno}}}%
\temp
\unnumbnoderef
\nobreak
d3861 5
a3865 8
\gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
\subsecheading {#1}{\the\chapno}{\the\secno}{\the\subsecno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash subsecentry{\the\toks0}%
                                    {\the\chapno}{\the\secno}{\the\subsecno}}}%
\temp
\donoderef
\nobreak
d3871 5
a3875 8
\gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
\subsecheading {#1}{\appendixletter}{\the\secno}{\the\subsecno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash subsecentry{\the\toks0}%
                                {\appendixletter}{\the\secno}{\the\subsecno}}}%
\temp
\appendixnoderef
\nobreak
d3881 4
a3884 7
\plainsubsecheading {#1}\gdef\thissection{#1}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbsubsecentry%
  {\the\toks0}{\the\chapno}{\the\secno}}}%
\temp
\unnumbnoderef
\nobreak
d3891 6
a3896 9
\gdef\thissection{#1}\global\advance \subsubsecno by 1 %
\subsubsecheading {#1}
  {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash subsubsecentry{\the\toks0}%
  {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}}%
\temp
\donoderef
\nobreak
d3902 6
a3907 9
\gdef\thissection{#1}\global\advance \subsubsecno by 1 %
\subsubsecheading {#1}
  {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash subsubsecentry{\the\toks0}%
  {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}}}%
\temp
\appendixnoderef
\nobreak
d3913 4
a3916 7
\plainsubsubsecheading {#1}\gdef\thissection{#1}%
\toks0 = {#1}%
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbsubsubsecentry%
  {\the\toks0}{\the\chapno}{\the\secno}{\the\subsecno}}}%
\temp
\unnumbnoderef
\nobreak
d3957 4
a3960 4
{\advance\chapheadingskip by 10pt \chapbreak }%
{\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                  \parindent=0pt\raggedright
                  \rm #1\hfill}}\bigskip \par\penalty 200}
d3964 3
a3966 3
{\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                  \parindent=0pt\raggedright
                  \rm #1\hfill}}\bigskip \par\penalty 200}
d4112 10
a4121 1
  \ifdim\parskip<10pt \nobreak\kern10pt\nobreak\kern-\parskip\fi \nobreak
d4133 3
a4135 2
% We open the .toc file here instead of at @@setfilename or any other
% fixed time so that @@contents can be put in the document anywhere.
d4138 1
a4138 1
\def\writetocentry#1{%
d4143 6
a4148 1
  \iflinks \write\tocfile{#1{\folio}}\fi
d4187 1
a4187 1
      \ifnum \pageno>0 \pageno = \lastnegativepageno \fi
d4204 1
a4204 1
   \pageno = \savepageno
d4216 2
a4217 1
      \let\rm=\shortcontrm \let\bf=\shortcontbf \let\sl=\shortcontsl
a4221 1
      \def\unnumbsecentry ##1##2##3{}
a4222 1
      \def\unnumbsubsecentry ##1##2##3##4{}
d4224 3
a4226 1
      \def\unnumbsubsubsecentry ##1##2##3##4##5{}
d4236 1
a4236 1
   \pageno = \savepageno
d4259 2
a4260 1
\def\appendixentry#1#2#3{\dochapentry{\putwordAppendix{} #2\labelspace#1}{#3}}
d4284 2
a4285 2
\def\unnumbchapentry#1#2{\dochapentry{#1}{#2}}
\def\shortunnumberedentry#1#2{\tocentry{#1}{\doshortpageno\bgroup#2\egroup}}
d4289 1
a4289 1
\def\unnumbsecentry#1#2#3{\dosecentry{#1}{#3}}
d4293 1
a4293 1
\def\unnumbsubsecentry#1#2#3#4{\dosubsecentry{#1}{#4}}
d4298 1
a4298 1
\def\unnumbsubsubsecentry#1#2#3#4#5{\dosubsubsecentry{#1}{#5}}
d4400 1
a4400 1
  \catcode `\^=7 \catcode `\_=8 \catcode `\~=13 \let~=\tie
d4402 6
a4407 6
  \catcode 43=12 % plus
  \catcode`\"=12
  \catcode`\==12
  \catcode`\|=12
  \catcode`\<=12
  \catcode`\>=12
d4461 1
a4461 1
% start of the next paragraph will insert \parskip
d4464 2
a4465 1
  \ifnum\lastpenalty < 10000
d4470 3
a4472 1
      \penalty-50
d4504 2
a4505 1
\long\def\cartouche{%
a4551 1
  \singlespace
d4590 1
a4590 14
% @@small... is usually equivalent to the non-small (@@smallbook
% redefines).  We must call \example (or whatever) last in the
% definition, since it reads the return following the @@example (or
% whatever) command.
%
% This actually allows (for example) @@end display inside an
% @@smalldisplay.  Too bad, but makeinfo will catch the error anyway.
%
\def\smalldisplay{\begingroup\def\Esmalldisplay{\nonfillfinish\endgroup}\display}
\def\smallexample{\begingroup\def\Esmallexample{\nonfillfinish\endgroup}\lisp}
\def\smallformat{\begingroup\def\Esmallformat{\nonfillfinish\endgroup}\format}
\def\smalllisp{\begingroup\def\Esmalllisp{\nonfillfinish\endgroup}\lisp}

% Real @@smallexample and @@smalllisp (when @@smallbook): use smaller fonts.
d4592 1
a4592 1
\def\smalllispx{\begingroup
d4598 2
d4609 1
a4609 1
% @@smalldisplay (when @@smallbook): @@display plus smaller fonts.
d4611 1
a4611 1
\def\smalldisplayx{\begingroup
d4626 1
a4626 1
% @@smallformat (when @@smallbook): @@format plus smaller fonts.
d4628 1
a4628 1
\def\smallformatx{\begingroup
a4654 1
  \singlespace
d4677 3
a4679 1
% [Knuth] p. 344; only we need to do '@@' too
d4681 4
a4684 2
  \do\ \do\\\do\@@\do\{\do\}\do\$\do\&%
  \do\#\do\^\do\^^K\do\_\do\^^A\do\%\do\~}
d4771 1
a4771 1
% we need not redefine '\', '{' and '}'
d4781 1
d4784 5
a4788 1
  \gdef\doverbatim#1@@end verbatim{#1\end{verbatim}}
d4804 8
a4811 8
    \catcode`\\=12
    \catcode`~=12
    \catcode`^=12
    \catcode`_=12
    \catcode`|=12
    \catcode`<=12
    \catcode`>=12
    \catcode`+=12
d4825 6
a4830 3
  \def\thisfile{#1}%
  \expandafter\expandafter\setupverbatiminclude\input\thisfile
  \endgroup\nonfillfinish\endgroup
d4834 2
a4835 1
% Save the text away for @@insertcopying later.
d4837 41
a4877 1
\newbox\copyingbox
d4879 2
a4880 1
\def\copying{\begingroup
d4882 18
a4899 2
  \def\Ecopying{\egroup\endgroup}%
  \global\setbox\copyingbox = \vbox\bgroup
a4901 5
% @@insertcopying.
% 
\def\insertcopying{\unvcopy\copyingbox}


d4906 1
a4906 1
\def\setdeffont #1 {\csname DEF#1\endcsname}
a4909 1
\newskip\deftypemargin \deftypemargin=12pt
d4913 3
a4915 2
% define \functionparens, which makes ( and ) and & do special things.
% \functionparens affects the group it is contained in.
d4917 4
a4920 2
\catcode`\(=\active \catcode`\)=\active \catcode`\&=\active
\catcode`\[=\active \catcode`\]=\active}
d4967 1
a4967 1
  \catcode`& = 13
d4971 41
a5011 26
% First, defname, which formats the header line itself.
% #1 should be the function name.
% #2 should be the type of definition, such as "Function".

\def\defname #1#2{%
% Get the values of \leftskip and \rightskip as they were
% outside the @@def...
\dimen2=\leftskip
\advance\dimen2 by -\defbodyindent
\noindent
\setbox0=\hbox{\hskip \deflastargmargin{\rm #2}\hskip \deftypemargin}%
\dimen0=\hsize \advance \dimen0 by -\wd0 % compute size for first line
\dimen1=\hsize \advance \dimen1 by -\defargsindent %size for continuations
\parshape 2 0in \dimen0 \defargsindent \dimen1
% Now output arg 2 ("Function" or some such)
% ending at \deftypemargin from the right margin,
% but stuck inside a box of width 0 so it does not interfere with linebreaking
{% Adjust \hsize to exclude the ambient margins,
% so that \rightline will obey them.
\advance \hsize by -\dimen2
\rlap{\rightline{{\rm #2}\hskip -1.25pc }}}%
% Make all lines underfull and no complaints:
\tolerance=10000 \hbadness=10000
\advance\leftskip by -\defbodyindent
\exdentamount=\defbodyindent
{\df #1}\enskip        % Generate function name
d5024 5
a5028 2
  % break after all.
  \ifnum\lastpenalty = 10000 \penalty0 \fi
d5040 10
d5054 2
a5055 2
  \def#2{\begingroup\obeylines\activeparens\spacesplit#3}%
  \catcode61=\active % 61 is `='
d5060 1
a5060 1
% #1, #2, #3 are the common arguments (see \defparsebody).
d5065 1
a5065 1
  \def#2##1 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}}}%
d5067 5
a5071 1
  \spacesplit{#3{#4}}%
d5081 1
a5081 1
  \def#2##1 ##2 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}{##2}}}%
d5095 2
a5096 3
  \def#2##1 ##2 ##3 {%
    \def#4{##1}%
    \begingroup\obeylines\activeparens\spacesplit{#3{##2}{##3}}}%
d5105 1
a5105 1
    \begingroup\obeylines\activeparens\spacesplit{#3{##2}}}%
d5116 2
a5117 2
  \def#2{\begingroup\obeylines\spacesplit#3}%
  \catcode61=\active %
d5126 1
a5126 1
    \begingroup\obeylines\spacesplit{#3{##2}}}%
d5133 1
a5133 1
  \def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
d5149 1
a5149 1
  \def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
d5167 1
a5167 1
% Split up #2 at the first space token.
d5174 9
a5182 5
{\obeylines
\gdef\spacesplit#1#2^^M{\endgroup\spacesplitfoo{#1}#2 \relax\spacesplitfoo}%
\long\gdef\spacesplitfoo#1#2 #3#4\spacesplitfoo{%
\ifx\relax #3%
#1{#2}{}\else #1{#2}{#3#4}\fi}}
d5186 9
a5194 2
% First, define the processing that is wanted for arguments of \defun
% Use this to expand the args and terminate the paragraph they make up
d5196 2
d5206 1
a5206 3
\interlinepenalty=10000
\advance\rightskip by 0pt plus 1fil
\endgraf\nobreak\vskip -\parskip\nobreak
d5215 1
a5215 3
\interlinepenalty=10000
\advance\rightskip by 0pt plus 1fil
\endgraf\nobreak\vskip -\parskip\nobreak
d5226 1
a5226 1
\catcode 61=\other % Turn off change made in \defparsebody
d5236 1
a5236 1
\catcode 61=\other % Turn off change made in \defparsebody
d5250 1
a5250 1
\catcode 61=\other % Turn off change made in \defparsebody
d5271 1
a5271 1
\catcode 61=\other % Turn off change made in \defparsebody
d5281 1
a5281 1
\catcode 61=\other % Turn off change made in \defparsebody
d5291 1
a5291 1
\catcode 61=\other % Turn off change made in \defparsebody
d5300 5
a5304 3
\dosubind {fn}{\code{#2}}{\putwordon\ #1}% Make entry in function index
\begingroup\defname {#2}{\defoptype\ \putwordon\ #1}%
\defunargs {#3}\endgroup %
d5371 5
a5375 3
\dosubind {vr}{\code{#2}}{\putwordof\ #1}% Make entry in var index
\begingroup\defname {#2}{\defcvtype\ \putwordof\ #1}%
\defvarargs {#3}\endgroup %
d5383 1
a5383 1
  \dosubind {vr}{\code{#2}}{\putwordof\ #1}% entry in var index
d5395 2
a5396 2
\interlinepenalty=10000
\endgraf\nobreak\vskip -\parskip\nobreak}
d5432 1
a5432 2
\interlinepenalty=10000
\endgraf\nobreak\vskip -\parskip\nobreak
d5442 1
a5442 2
\interlinepenalty=10000
\endgraf\nobreak\vskip -\parskip\nobreak
d5491 1
a5491 1
   \catcode`\@@=0 \catcode`\\=12 \escapechar=`\@@
d5505 1
a5505 1
\catcode`\@@=0 \catcode`\\=12 \escapechar=`\@@
d5535 1
a5535 1
{\catcode`\^^M=12\catcode`\Q=3%
d5550 11
a5560 11
  \catcode`\~=12
  \catcode`\^=12
  \catcode`\_=12
  \catcode`\|=12
  \catcode`\<=12
  \catcode`\>=12
  \catcode`\+=12
  \catcode`\{=12
  \catcode`\}=12
  \catcode`\@@=12
  \catcode`\^^M=12
d5564 9
a5572 9
  \catcode`\~=12
  \catcode`\^=12
  \catcode`\_=12
  \catcode`\|=12
  \catcode`\<=12
  \catcode`\>=12
  \catcode`\+=12
  \catcode`\@@=12
  \catcode`\\=12}
d5613 2
a5614 2
\def\unmacro{\parsearg\unmacroxxx}
\def\unmacroxxx#1{%
d5618 1
a5618 1
    % Remove the macro name from \macrolist
d5620 3
a5622 13
      \edef\tempa{\expandafter\noexpand\csname#1\endcsname}%
      \def\do##1{%
        \def\tempb{##1}%
        \ifx\tempa\tempb
          % remove this
        \else
          \toks0 = \expandafter{\newmacrolist\do}%
          \edef\newmacrolist{\the\toks0\expandafter\noexpand\tempa}%
        \fi}%
      \def\newmacrolist{}%
      % Execute macro list to define \newmacrolist
      \macrolist
      \global\let\macrolist\newmacrolist
d5629 11
d5822 8
a5829 5
% \setref{NAME}{SNT} defines a cross-reference point NAME, namely
% NAME-title, NAME-pg, and NAME-SNT.  Called from \foonoderef.  We have
% to set \indexdummies so commands such as @@code in a section title
% aren't expanded.  It would be nicer not to expand the titles in the
% first place, but there's so many layers that that is hard to do.
d5831 3
d5835 1
a5835 1
  \indexdummies
d5837 2
d5890 1
a5890 1
    {\normalturnoffactive
d5910 1
a5910 1
    {\normalturnoffactive
d5919 1
a5919 1
    \turnoffactive \putwordpage\tie\refx{#1-pg}{}%
d5924 2
a5925 4
% \dosetq is the interface for calls from other macros

% Use \normalturnoffactive so that punctuation chars such as underscore
% and backslash work in node names.  (\turnoffactive doesn't do \.)
a5927 1
   \normalturnoffactive
d5929 1
a5929 3
   \iflinks
     \next
   \fi
d5933 3
a5935 7
% \internalsetq {foo}{page} expands into
% CHARACTERS 'xrdef {foo}{...expansion of \Ypage...}
% When the aux file is read, ' is the escape character

\def\internalsetq #1#2{'xrdef {#1}{\csname #2\endcsname}}

% Things to be expanded by \internalsetq
d5937 2
a5939 1

a5940 1

a5941 1

d5943 10
a5952 7
\ifnum\secno=0 \putwordChapter\xreftie\the\chapno %
\else \ifnum \subsecno=0 \putwordSection\xreftie\the\chapno.\the\secno %
\else \ifnum \subsubsecno=0 %
\putwordSection\xreftie\the\chapno.\the\secno.\the\subsecno %
\else %
\putwordSection\xreftie\the\chapno.\the\secno.\the\subsecno.\the\subsubsecno %
\fi \fi \fi }
d5955 11
a5965 9
\ifnum\secno=0 \putwordAppendix\xreftie'char\the\appendixno{}%
\else \ifnum \subsecno=0 \putwordSection\xreftie'char\the\appendixno.\the\secno %
\else \ifnum \subsubsecno=0 %
\putwordSection\xreftie'char\the\appendixno.\the\secno.\the\subsecno %
\else %
\putwordSection\xreftie'char\the\appendixno.\the\secno.\the\subsecno.\the\subsubsecno %
\fi \fi \fi }

\gdef\xreftie{'tie}
d5971 1
a5971 1
  \let\linenumber = \empty % Non-3.0.
d5978 1
a5978 1

d5980 7
a5986 1
  \expandafter\ifx\csname X#1\endcsname\relax
d6001 1
a6001 1
    \csname X#1\endcsname
d6008 1
a6008 6
\def\xrdef#1{\begingroup
  % Reenable \ as an escape while reading the second argument.
  \catcode`\\ = 0
  \afterassignment\endgroup
  \expandafter\gdef\csname X#1\endcsname
}
d6039 1
a6039 3
  \catcode`\@@=\other
  \catcode`\^=\other
  % It was suggested to define this as 7, which would allow ^^e4 etc.
d6052 3
d6066 1
d6068 1
d6078 1
a6078 1
  % The aux file uses ' as the escape (for now).
d6081 1
a6081 1
  % For example, 'xrdef {$\leq $-fun}{page ...} made by @@defun ^^
d6084 3
d6089 1
a6089 3
  \catcode`\%=\other
  \catcode`\'=0
  \catcode`\\=\other
d6134 1
a6134 1
  \footnotezzz
d6144 7
a6150 1
\long\gdef\footnotezzz{\insert\footins\bgroup
d6154 1
a6183 6
\def\fo@@t{\ifcat\bgroup\noexpand\next \let\next\f@@@@t
  \else\let\next\f@@t\fi \next}
\def\f@@@@t{\bgroup\aftergroup\@@foot\let\next}
\def\f@@t#1{#1\@@foot}
\def\@@foot{\strut\par\egroup}

d6230 2
a6231 2
  % Do not bother showing banner with post-v2.7 epsf.tex (available in
  % doc/epsf.tex until it shows up on ctan).
d6356 5
a6360 3
% 4) hoffset; 5) binding offset; 6) topskip.  We also call
% \setleading{\textleading}, so the caller should define \textleading.
% The caller should also set \parskip.
d6362 1
a6362 1
\def\internalpagesizes#1#2#3#4#5#6{%
d6381 5
a6391 9
% Use `small' versions.
% 
\def\smallenvironments{%
  \let\smalldisplay = \smalldisplayx
  \let\smallexample = \smalllispx
  \let\smallformat = \smallformatx
  \let\smalllisp = \smalllispx
}

d6398 4
a6401 1
  \internalpagesizes{46\baselineskip}{6in}{\voffset}{.25in}{\bindingoffset}{36pt}%
d6409 4
a6412 1
  \internalpagesizes{7.5in}{5.in}{\voffset}{.25in}{\bindingoffset}{16pt}%
a6417 1
  \deftypemargin = 0pt
a6418 1
  \smallenvironments
d6424 1
a6424 1
  \textleading = 12pt
d6426 14
a6439 1
  \internalpagesizes{53\baselineskip}{160mm}{\voffset}{4mm}{\bindingoffset}{44pt}%
d6443 2
d6454 4
a6457 1
  \internalpagesizes{166mm}{120mm}{\voffset}{-8mm}{\bindingoffset}{8pt}%
d6462 1
a6462 2
  \contentsrightmargin = 0mm
  \deftypemargin = 0pt
a6464 2
  %
  \smallenvironments
d6467 1
a6467 2
% A specific text layout, 24x15cm overall, intended for A4 paper.  Top margin
% 29mm, hence bottom margin 28mm, nominal side margin 3cm.
a6468 2
  \textleading = 13.6pt
  %
d6470 4
a6473 1
  \internalpagesizes{237mm}{150mm}{3.6mm}{3.6mm}{3mm}{7mm}%
d6475 1
a6475 2
  % Must explicitly reset to 0 because we call \afourpaper, apparently,
  % although this does not entirely make sense.
d6479 2
a6480 2
% Use @@afourwide to print on European A4 paper in wide format.
\def\afourwide{%
d6482 6
a6487 2
  \internalpagesizes{6.5in}{9.5in}{\hoffset}{\normaloffset}{\bindingoffset}{7mm}%
}
d6502 10
a6511 1
  \internalpagesizes{#1}{\hsize}{\voffset}{\normaloffset}{\bindingoffset}{44pt}%
d6575 1
a6575 1
\def\_{\leavevmode \kern.06em \vbox{\hrule width.3em height.1ex}}
a6588 2
%\catcode 27=\active
%\def^^[{$\diamondsuit$}
d6605 2
a6606 1
% \rawbackslashxx output one backslash character in current font
a6607 2
%{\catcode`\\=\other
%@@gdef@@rawbackslashxx{\}}
d6609 3
a6611 1
% \rawbackslash redefines \ as input to do \rawbackslashxx.
d6613 6
a6618 1
@@gdef@@rawbackslash{@@let\=@@rawbackslashxx }}
a6622 1
% \catcode 17=0   % Define control-q
d6627 18
a6644 21
@@def@@turnoffactive{@@let"=@@normaldoublequote
@@let\=@@realbackslash
@@let~=@@normaltilde
@@let^=@@normalcaret
@@let_=@@normalunderscore
@@let|=@@normalverticalbar
@@let<=@@normalless
@@let>=@@normalgreater
@@let+=@@normalplus
@@let$=@@normaldollar}%$ font-lock fix

@@def@@normalturnoffactive{@@let"=@@normaldoublequote
@@let\=@@normalbackslash
@@let~=@@normaltilde
@@let^=@@normalcaret
@@let_=@@normalunderscore
@@let|=@@normalverticalbar
@@let<=@@normalless
@@let>=@@normalgreater
@@let+=@@normalplus
@@let$=@@normaldollar}%$ font-lock fix
@


1.5.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d6 1
a6 1
\def\texinfoversion{2003-02-03.16}
d8 2
a9 2
% Copyright (C) 1985, 1986, 1988, 1990, 1991, 1992, 1993, 1994, 1995,
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d32 1
a32 1
%   ftp://ftp.gnu.org/gnu/texinfo/texinfo.tex
d34 1
a38 2
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.
% 
d42 3
d60 3
a62 4
% 
% It is possible to adapt texinfo.tex for other languages, to some
% extent.  You can get the existing language-specific files from the
% full Texinfo distribution.
a71 7
\message{Basics,}
\chardef\other=12

% We never want plain's outer \+ definition in Texinfo.
% For @@tex, we can use \tabalign.
\let\+ = \relax

a81 2
\let\ptexgtr=>
\let\ptexhat=^
a83 2
\let\ptexless=<
\let\ptexplus=+
d88 7
a140 12
% In some macros, we cannot use the `\? notation---the left quote is
% in some cases the escape char.
\chardef\colonChar = `\:
\chardef\commaChar = `\,
\chardef\dotChar   = `\.
\chardef\equalChar = `\=
\chardef\exclamChar= `\!
\chardef\questChar = `\?
\chardef\semiChar  = `\;
\chardef\spaceChar = `\ %
\chardef\underChar = `\_

a144 6
% True if #1 is the empty string, i.e., called like `\ifempty{}'.
%
\def\ifempty#1{\ifemptyx #1\emptymarkA\emptymarkB}%
\def\ifemptyx#1#2\emptymarkB{\ifx #1\emptymarkA}%

% Hyphenation fixes.
d151 2
a152 2
\newdimen\bindingoffset
\newdimen\normaloffset
d157 1
a157 3
% since that produces some useless output on the terminal.  We also make
% some effort to order the tracing commands to reduce output in the log
% file; cf. trace.sty in LaTeX.
d160 13
a172 18
\def\loggingall{%
  \tracingstats2
  \tracingpages1
  \tracinglostchars2  % 2 gives us more in etex
  \tracingparagraphs1
  \tracingoutput1
  \tracingmacros2
  \tracingrestores1
  \showboxbreadth\maxdimen \showboxdepth\maxdimen
  \ifx\eTeXversion\undefined\else % etex gives us more logging
    \tracingscantokens1
    \tracingifs1
    \tracinggroups1
    \tracingnesting2
    \tracingassigns1
  \fi
  \tracingcommands3  % 3 gives us more in etex
  \errorcontextlines\maxdimen
d174 1
d279 1
a279 1
  }% end of group with \normalturnoffactive
d439 11
d469 2
a470 3
  % Definitions to produce \{ and \} commands for indices,
  % and @@{ and @@} for the aux file.
  \catcode`\{ = \other \catcode`\} = \other
d472 4
a475 6
  \catcode`\! = 0 \catcode`\\ = \other
  !gdef!lbracecmd[\{]%
  !gdef!rbracecmd[\}]%
  !gdef!lbraceatcmd[@@{]%
  !gdef!rbraceatcmd[@@}]%
!endgroup
d478 1
a478 1
% Others are defined by plain TeX: @@` @@' @@" @@^ @@~ @@= @@u @@v @@H.
d487 1
a487 1
% Plain TeX defines: @@AA @@AE @@O @@OE @@L (plus lowercase versions) @@ss.
a541 10
% Another complication is that the group might be very large.  This can
% cause the glue on the previous page to be unduly stretched, because it
% does not have much material.  In this case, it's better to add an
% explicit \vfill so that the extra space is at the bottom.  The
% threshold for doing this is if the group is more than \vfilllimit
% percent of a page (\vfilllimit can be changed inside of @@tex).
% 
\newbox\groupbox
\def\vfilllimit{0.7}
%
a554 12
    % \dimen0 is the vertical size of the group's box.
    \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
    % \dimen2 is how much space is left on the page (more or less).
    \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
    % if the group doesn't fit on the current page, and it's a big big
    % group, force a page break.
    \ifdim \dimen0 > \dimen2
      \ifdim \pagetotal < \vfilllimit\pageheight
        \page
      \fi
    \fi
    \copy\groupbox
d558 1
a558 1
  \setbox\groupbox = \vtop\bgroup
d756 8
a763 8
  \catcode`\\=\other
  \catcode`~=\other
  \catcode`^=\other
  \catcode`_=\other
  \catcode`|=\other
  \catcode`<=\other
  \catcode`>=\other
  \catcode`+=\other
a768 1
  \let\value=\expandablevalue
d774 6
a779 11
% @@center line
% outputs that line, centered.
%
\def\center{\parsearg\docenter}
\def\docenter#1{{%
  \ifhmode \hfil\break \fi
  \advance\hsize by -\leftskip
  \advance\hsize by -\rightskip
  \line{\hfil \ignorespaces#1\unskip \hfil}%
  \ifhmode \break \fi
}}
d844 5
d856 1
a856 1
{\catcode\underChar = \active
d858 1
a858 1
  \catcode\underChar=\active
a873 1
  \mathactive
a876 17
% Some active characters (such as <) are spaced differently in math.
% We have to reset their definitions in case the @@math was an
% argument to a command which set the catcodes (such as @@item or @@section).
% 
{
  \catcode`^ = \active
  \catcode`< = \active
  \catcode`> = \active
  \catcode`+ = \active
  \gdef\mathactive{%
    \let^ = \ptexhat
    \let< = \ptexless
    \let> = \ptexgtr
    \let+ = \ptexplus
  }
}

d968 1
a968 1
         #1.pdf%
d990 3
d998 2
d1001 1
d1003 1
d1005 1
a1005 5
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
d1009 3
d1014 2
d1018 2
d1022 2
a1023 11
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
      %
      % Make special characters normal for writing to the pdf file.
      % 
      \indexnofonts
      \let\tt=\relax
      \turnoffactive
d1173 1
a1173 1
  \mainmagstep=\magstep1
d1181 1
a1181 1
% Instead of cmb10, you may want to use cmbx10.
d1183 1
a1183 2
% looks better when embedded in a line with cmr10
% (in Bob's opinion).
a1233 1
\def\authortt{\sectt}
d1331 1
a1331 19

% Set the fonts to use with the @@small... environments.
\let\smallexamplefonts = \smallfonts

% About \smallexamplefonts.  If we use \smallfonts (9pt), @@smallexample
% can fit this many characters:
%   8.5x11=86   smallbook=72  a4=90  a5=69
% If we use \smallerfonts (8pt), then we can fit this many characters:
%   8.5x11=90+  smallbook=80  a4=90+  a5=77
% For me, subjectively, the few extra characters that fit aren't worth
% the additional smallness of 8pt.  So I'm making the default 9pt.
% 
% By the way, for comparison, here's what fits with @@example (10pt):
%   8.5x11=71  smallbook=60  a4=75  a5=58
% 
% I wish we used A4 paper on this side of the Atlantic.
% 
% --karl, 24jan03.

a1347 1
\setfont\shortconttt\ttshape{12}{1000}
d1355 2
a1356 2
\def\smartslanted#1{{\ifusingtt\ttsl\sl #1}\futurelet\next\smartitalicx}
\def\smartitalic#1{{\ifusingtt\ttsl\it #1}\futurelet\next\smartitalicx}
a1373 11
% Set sfcode to normal for the chars that usually have another value.
% Can't use plain's \frenchspacing because it uses the `\x notation, and
% sometimes \x has an active definition that messes things up.
% 
\catcode`@@=11
  \def\frenchspacing{%
    \sfcode\dotChar  =\@@m \sfcode\questChar=\@@m \sfcode\exclamChar=\@@m
    \sfcode\colonChar=\@@m \sfcode\semiChar =\@@m \sfcode\commaChar =\@@m
  }
\catcode`@@=\other

a1472 3
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@kbdinputstyle `\arg'}%
d1479 3
a1481 2
% Default is `distinct.'
\kbdinputstyle distinct
d1595 1
a1595 2
   \def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
                   \let\tt=\authortt}%
d1876 1
a1876 1
    % Stop a page break at the \parskip glue coming up.  (Unfortunately
d1878 2
a1879 10
    % \baselineskip glue.)  However, if what follows is an environment
    % such as @@example, there will be no \parskip glue; then
    % the negative vskip we just would cause the example and the item to
    % crash together.  So we use this bizarre value of 10001 as a signal
    % to \aboveenvbreak to insert \parskip glue after all.
    % (Possibly there are other commands that could be followed by
    % @@example which need the same treatment, but not section titles; or
    % maybe section titles are the only special case and they should be
    % penalty 10001...)
    \penalty 10001
d1985 5
d2211 2
a2212 2
         \setbox0=\hbox{#1\unskip\space}% Add a normal word space as a
                   % separator; typically that is always in the input, anyway.
d2227 6
d2238 1
a2238 7
  \let\item=\crcrwithfootnotes
  % A \tab used to include \hskip1sp.  But then the space in a template
  % line is not enough.  That is bad.  So let's go back to just & until
  % we encounter the problem it was intended to solve again.  --karl,
  % nathan@@acm.org, 20apr99.
  \let\tab=&%
  \let\startfootins=\startsavedfootnote
d2246 1
a2246 5
  \def\Emultitable{%
    \global\setpercentfalse
    \crcrwithfootnotes\crcr
    \egroup\egroup
  }%
a2334 19
% In case a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is
% finished.  Otherwise, the insertion is lost, it never migrates to the
% main vertical list.  --kasal, 22jan03.
%
\newbox\savedfootnotes
%
% \dotable \let's \startfootins to this, so that \dofootnote will call
% it instead of starting the insertion right away.
\def\startsavedfootnote{%
  \global\setbox\savedfootnotes = \vbox\bgroup
    \unvbox\savedfootnotes
}
\def\crcrwithfootnotes{%
  \crcr
  \ifvoid\savedfootnotes \else
    \noalign{\insert\footins{\box\savedfootnotes}}%
  \fi
}
a2369 12
% We use \empty instead of \relax for the @@def... commands, so that \end
% doesn't throw an error.  For instance:
% @@ignore
% @@deffn ...
% @@end deffn
% @@end ignore
% 
% The @@end deffn is going to get expanded, because we're trying to allow
% nested conditionals.  But we don't want to expand the actual @@deffn,
% since it might be syntactically correct and intended to be ignored.
% Since \end checks for \relax, using \empty does not cause an error.
% 
d2372 3
a2374 6
  \let\defcv = \empty
  \let\defcvx = \empty
  \let\Edefcv = \empty
  \let\deffn = \empty
  \let\deffnx = \empty
  \let\Edeffn = \empty
d2376 24
a2399 54
  \let\defivar = \empty
  \let\defivarx = \empty
  \let\Edefivar = \empty
  \let\defmac = \empty
  \let\defmacx = \empty
  \let\Edefmac = \empty
  \let\defmethod = \empty
  \let\defmethodx = \empty
  \let\Edefmethod = \empty
  \let\defop = \empty
  \let\defopx = \empty
  \let\Edefop = \empty
  \let\defopt = \empty
  \let\defoptx = \empty
  \let\Edefopt = \empty
  \let\defspec = \empty
  \let\defspecx = \empty
  \let\Edefspec = \empty
  \let\deftp = \empty
  \let\deftpx = \empty
  \let\Edeftp = \empty
  \let\deftypefn = \empty
  \let\deftypefnx = \empty
  \let\Edeftypefn = \empty
  \let\deftypefun = \empty
  \let\deftypefunx = \empty
  \let\Edeftypefun = \empty
  \let\deftypeivar = \empty
  \let\deftypeivarx = \empty
  \let\Edeftypeivar = \empty
  \let\deftypemethod = \empty
  \let\deftypemethodx = \empty
  \let\Edeftypemethod = \empty
  \let\deftypeop = \empty
  \let\deftypeopx = \empty
  \let\Edeftypeop = \empty
  \let\deftypevar = \empty
  \let\deftypevarx = \empty
  \let\Edeftypevar = \empty
  \let\deftypevr = \empty
  \let\deftypevrx = \empty
  \let\Edeftypevr = \empty
  \let\defun = \empty
  \let\defunx = \empty
  \let\Edefun = \empty
  \let\defvar = \empty
  \let\defvarx = \empty
  \let\Edefvar = \empty
  \let\defvr = \empty
  \let\defvrx = \empty
  \let\Edefvr = \empty
  \let\clear = \relax
  \let\down = \relax
  \let\evenfooting = \relax
d2401 1
d2403 2
a2404 1
  \let\everyheading = \relax
a2406 1
  \let\item = \relax
d2408 1
a2408 4
  \let\oddfooting = \relax
  \let\oddheading = \relax
  \let\printindex = \relax
  \let\pxref = \relax
d2410 1
a2410 1
  \let\ref = \relax
d2412 2
a2413 6
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\settitle = \relax
  \let\up = \relax
  \let\verbatiminclude = \relax
  \let\xref = \relax
d2416 2
a2417 1
% Ignore @@ignore, @@ifhtml, @@ifinfo, and the like.
d2419 1
a2419 4
\def\direntry{\doignore{direntry}}
\def\documentdescriptionword{documentdescription}
\def\documentdescription{\doignore{documentdescription}}
\def\html{\doignore{html}}
d2422 1
d2424 1
a2424 3
\def\ifplaintext{\doignore{ifplaintext}}
\def\ifxml{\doignore{ifxml}}
\def\ignore{\doignore{ignore}}
d2426 3
a2428 1
\def\xml{\doignore{xml}}
d2446 1
a2446 1
  \catcode\spaceChar = 10
d2488 1
a2488 1
    \immediate\write16{  (See ftp://ftp.gnu.org/non-gnu/TeX.README.)}
d2510 2
a2511 2
  % the chance of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook.
d2532 2
a2533 2
    % dummy.tfm, as suggested in the TeXbook, because some sites
    % might not have that installed.  Therefore, math mode will still
d2562 1
a2562 1
    % Do not execute instructions in @@tex.
d2607 1
a2607 1
    \catcode`\-=\other \catcode`\_=\other
d2616 5
a2620 6
% about that.  The command has to be fully expandable (if the variable
% is set), since the result winds up in the index file.  This means that
% if the variable's value contains other Texinfo commands, it's almost
% certain it will fail (although perhaps we could fix that with
% sufficient work to do a one-level expansion on the result, instead of
% complete).
a2624 1
    \message{Variable `#1', used in @@value, is not set.}%
d2633 2
a2634 2
\def\ifset{\parsearg\doifset}
\def\doifset#1{%
d2636 1
a2636 1
    \let\next=\ifsetfail
d2638 1
a2638 1
    \let\next=\ifsetsucceed
a2639 1
  \next
d2648 2
a2649 2
\def\ifclear{\parsearg\doifclear}
\def\doifclear#1{%
d2651 1
a2651 1
    \let\next=\ifclearsucceed
d2653 1
a2653 1
    \let\next=\ifclearfail
a2654 1
  \next
d2673 20
a2692 3
% True conditional.  Since \set globally defines its variables, we can
% just start and end a group (to keep the @@end definition undefined at
% the outer level).
d2694 1
a2694 3
\def\conditionalsucceed#1{\begingroup
  \expandafter\def\csname E#1\endcsname{\endgroup}%
}
d2787 3
a2789 3
% Take care of Texinfo commands that can appear in an index entry.
% Since there are some commands we want to expand, and others we don't,
% we have to laboriously prevent expansion for those that we don't.
d2792 93
a2884 155
  \def\@@{@@}% change to @@@@ when we switch to @@ as escape char in index files.
  \def\ {\realbackslash\space }%
  % Need these in case \tex is in effect and \{ is a \delimiter again.
  % But can't use \lbracecmd and \rbracecmd because texindex assumes
  % braces and backslashes are used only as delimiters.  
  \let\{ = \mylbrace
  \let\} = \myrbrace
  %
  % \definedummyword defines \#1 as \realbackslash #1\space, thus
  % effectively preventing its expansion.  This is used only for control
  % words, not control letters, because the \space would be incorrect
  % for control characters, but is needed to separate the control word
  % from whatever follows.
  % 
  % For control letters, we have \definedummyletter, which omits the
  % space.
  % 
  % These can be used both for control words that take an argument and
  % those that do not.  If it is followed by {arg} in the input, then
  % that will dutifully get written to the index (or wherever).
  % 
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1}%
  }%
  %
  % Do the redefinitions.
  \commondummies
}

% For the aux file, @@ is the escape character.  So we want to redefine
% everything using @@ instead of \realbackslash.  When everything uses 
% @@, this will be simpler.
% 
\def\atdummies{%
  \def\@@{@@@@}%
  \def\ {@@ }%
  \let\{ = \lbraceatcmd
  \let\} = \rbraceatcmd
  %
  % (See comments in \indexdummies.)
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{@@##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{@@##1}%
  }%
  %
  % Do the redefinitions.
  \commondummies
}

% Called from \indexdummies and \atdummies.  \definedummyword and
% \definedummyletter must be defined first.
% 
\def\commondummies{%
  %
  \normalturnoffactive
  %
  % Control letters and accents.
  \definedummyletter{_}%
  \definedummyletter{,}%
  \definedummyletter{"}%
  \definedummyletter{`}%
  \definedummyletter{'}%
  \definedummyletter{^}%
  \definedummyletter{~}%
  \definedummyletter{=}%
  \definedummyword{u}%
  \definedummyword{v}%
  \definedummyword{H}%
  \definedummyword{dotaccent}%
  \definedummyword{ringaccent}%
  \definedummyword{tieaccent}%
  \definedummyword{ubaraccent}%
  \definedummyword{udotaccent}%
  \definedummyword{dotless}%
  %
  % Other non-English letters.
  \definedummyword{AA}%
  \definedummyword{AE}%
  \definedummyword{L}%
  \definedummyword{OE}%
  \definedummyword{O}%
  \definedummyword{aa}%
  \definedummyword{ae}%
  \definedummyword{l}%
  \definedummyword{oe}%
  \definedummyword{o}%
  \definedummyword{ss}%
  %
  % Although these internal commands shouldn't show up, sometimes they do.
  \definedummyword{bf}%
  \definedummyword{gtr}%
  \definedummyword{hat}%
  \definedummyword{less}%
  \definedummyword{sf}%
  \definedummyword{sl}%
  \definedummyword{tclose}%
  \definedummyword{tt}%
  %
  % Texinfo font commands.
  \definedummyword{b}%
  \definedummyword{i}%
  \definedummyword{r}%
  \definedummyword{sc}%
  \definedummyword{t}%
  %
  \definedummyword{TeX}%
  \definedummyword{acronym}%
  \definedummyword{cite}%
  \definedummyword{code}%
  \definedummyword{command}%
  \definedummyword{dfn}%
  \definedummyword{dots}%
  \definedummyword{emph}%
  \definedummyword{env}%
  \definedummyword{file}%
  \definedummyword{kbd}%
  \definedummyword{key}%
  \definedummyword{math}%
  \definedummyword{option}%
  \definedummyword{samp}%
  \definedummyword{strong}%
  \definedummyword{uref}%
  \definedummyword{url}%
  \definedummyword{var}%
  \definedummyword{w}%
  %
  % Assorted special characters.
  \definedummyword{bullet}%
  \definedummyword{copyright}%
  \definedummyword{dots}%
  \definedummyword{enddots}%
  \definedummyword{equiv}%
  \definedummyword{error}%
  \definedummyword{expansion}%
  \definedummyword{minus}%
  \definedummyword{pounds}%
  \definedummyword{point}%
  \definedummyword{print}%
  \definedummyword{result}%
  %
  % Handle some cases of @@value -- where the variable name does not
  % contain - or _, and the value does not contain any
  % (non-fully-expandable) commands.
  \let\value = \expandablevalue
  %
  % Normal spaces, not active ones.
  \unsepspaces
  %
  % No macro expansion.
  \turnoffmacros
d2893 3
a2895 6

% \indexnofonts is used when outputting the strings to sort the index
% by, and when constructing control sequence names.  It eliminates all
% control sequences and just writes whatever the best ASCII sort string
% would be for a given command (usually its argument).
%
d2898 1
a2898 1
%
d2900 70
a2969 70
  \def\ { }%
  \def\@@{@@}%
  % how to handle braces?
  \def\_{\normalunderscore}%
  %
  \let\,=\asis
  \let\"=\asis
  \let\`=\asis
  \let\'=\asis
  \let\^=\asis
  \let\~=\asis
  \let\==\asis
  \let\u=\asis
  \let\v=\asis
  \let\H=\asis
  \let\dotaccent=\asis
  \let\ringaccent=\asis
  \let\tieaccent=\asis
  \let\ubaraccent=\asis
  \let\udotaccent=\asis
  \let\dotless=\asis
  %
  % Other non-English letters.
  \def\AA{AA}%
  \def\AE{AE}%
  \def\L{L}%
  \def\OE{OE}%
  \def\O{O}%
  \def\aa{aa}%
  \def\ae{ae}%
  \def\l{l}%
  \def\oe{oe}%
  \def\o{o}%
  \def\ss{ss}%
  \def\exclamdown{!}%
  \def\questiondown{?}%
  %
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
  %
  % Texinfo font commands.
  \let\b=\asis
  \let\i=\asis
  \let\r=\asis
  \let\sc=\asis
  \let\t=\asis
  %
  \let\TeX=\indexdummytex
  \let\acronym=\asis
  \let\cite=\asis
  \let\code=\asis
  \let\command=\asis
  \let\dfn=\asis
  \let\dots=\indexdummydots
  \let\emph=\asis
  \let\env=\asis
  \let\file=\asis
  \let\kbd=\asis
  \let\key=\asis
  \let\math=\asis
  \let\option=\asis
  \let\samp=\asis
  \let\strong=\asis
  \let\uref=\asis
  \let\url=\asis
  \let\var=\asis
  \let\w=\asis
}
d3001 14
a3014 1
        % The main index entry text.
d3017 2
a3018 2
        % If third arg is present, precede it with space in sort key.
        \def\thirdarg{#3}%
d3020 1
a3020 3
           % If the third (subentry) arg is present, add it to the index
           % line to write.
          \toks0 = \expandafter{\the\toks0 \space #3}%
a3022 7
        % Process the index entry with all font commands turned off, to
        % get the string to sort by.
        {\indexnofonts
         \edef\temp{\the\toks0}% need full expansion
         \xdef\indexsorttmp{\temp}%
        }%
        %
d3053 1
a3053 1
            \ifdim\lastskip = 0pt \else \nobreak\vskip-\skip0 \fi
d3058 1
d3534 17
a3550 19
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \chapno by 1 \message{\putwordChapter\space \the\chapno}%
  \chapmacro {#1}{\the\chapno}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  % We don't substitute the actual chapter name into \thischapter
  % because we don't want its macros evaluated now.
  \xdef\thischapter{\putwordChapter{} \the\chapno: \noexpand\thischaptername}%
  \writetocentry{chap}{#1}{{\the\chapno}}
  \donoderef
  \global\let\section = \numberedsec
  \global\let\subsection = \numberedsubsec
  \global\let\subsubsection = \numberedsubsubsec
}

% we use \chapno to avoid indenting back
\def\appendixbox#1{%
  \setbox0 = \hbox{\putwordAppendix{} \the\chapno}%
  \hbox to \wd0{#1\hss}}
d3555 15
a3569 12
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \appendixno by 1
  \message{\putwordAppendix\space \appendixletter}%
  \chapmacro {#1}{\appendixbox{\putwordAppendix{} \appendixletter}}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  \xdef\thischapter{\putwordAppendix{} \appendixletter: \noexpand\thischaptername}%
  \writetocentry{appendix}{#1}{{\appendixletter}}
  \appendixnoderef
  \global\let\section = \appendixsec
  \global\let\subsection = \appendixsubsec
  \global\let\subsubsection = \appendixsubsubsec
d3582 24
a3605 22
  \secno=0 \subsecno=0 \subsubsecno=0
  %
  % This used to be simply \message{#1}, but TeX fully expands the
  % argument to \message.  Therefore, if #1 contained @@-commands, TeX
  % expanded them.  For example, in `@@unnumbered The @@cite{Book}', TeX
  % expanded @@cite (which turns out to cause errors because \cite is meant
  % to be executed, not expanded).
  %
  % Anyway, we don't want the fully-expanded definition of @@cite to appear
  % as a result of the \message, we just want `@@cite' itself.  We use
  % \the<toks register> to achieve this: TeX expands \the<toks> only once,
  % simply yielding the contents of <toks register>.  (We also do this for
  % the toc entries.)
  \toks0 = {#1}\message{(\the\toks0)}%
  %
  \unnumbchapmacro {#1}%
  \gdef\thischapter{#1}\gdef\thissection{#1}%
  \writetocentry{unnumbchap}{#1}{{\the\chapno}}
  \unnumbnoderef
  \global\let\section = \unnumberedsec
  \global\let\subsection = \unnumberedsubsec
  \global\let\subsubsection = \unnumberedsubsubsec
d3612 8
a3619 5
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\the\chapno}{\the\secno}%
  \writetocentry{sec}{#1}{{\the\chapno}{\the\secno}}
  \donoderef
  \nobreak
d3626 8
a3633 5
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\appendixletter}{\the\secno}%
  \writetocentry{sec}{#1}{{\appendixletter}{\the\secno}}
  \appendixnoderef
  \nobreak
d3639 7
a3645 4
  \plainsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsec}{#1}{{\the\chapno}{\the\secno}}
  \unnumbnoderef
  \nobreak
d3652 8
a3659 5
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\the\chapno}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \donoderef
  \nobreak
d3665 8
a3672 5
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\appendixletter}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}}
  \appendixnoderef
  \nobreak
d3678 7
a3684 4
  \plainsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \unnumbnoderef
  \nobreak
d3691 9
a3699 6
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \donoderef
  \nobreak
d3705 9
a3713 6
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \appendixnoderef
  \nobreak
d3719 7
a3725 4
  \plainsubsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \unnumbnoderef
  \nobreak
d3766 4
a3769 4
  {\advance\chapheadingskip by 10pt \chapbreak }%
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d3773 3
a3775 3
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d3921 1
a3921 10
  % Add extra space after the heading -- either a line space or a
  % paragraph space, whichever is more.  (Some people like to set
  % \parskip to large values for some reason.)  Don't allow stretch, though.
  \nobreak
  \ifdim\parskip>\normalbaselineskip
    \kern\parskip
  \else
    \kern\normalbaselineskip
  \fi
  \nobreak
d3933 2
a3934 3
% Usage: \writetocentry{chap}{The Name of The Game}{{\the\chapno}}
% We open the .toc file for writing here instead of at @@setfilename (or
% any other fixed time) so that @@contents can be anywhere in the document.
d3937 1
a3937 1
\def\writetocentry#1#2#3{%
d3942 1
a3942 6
  %
  \iflinks
    \toks0 = {#2}%
    \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}#3{\folio}}}%
    \temp
  \fi
d3981 1
a3981 1
      \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
d3998 1
a3998 1
   \global\pageno = \savepageno
d4010 1
a4010 2
      \let\rm=\shortcontrm \let\bf=\shortcontbf
      \let\sl=\shortcontsl \let\tt=\shortconttt
d4015 1
d4017 1
d4019 1
a4019 3
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
d4029 1
a4029 1
   \global\pageno = \savepageno
d4052 1
a4052 2
\def\appendixentry#1#2#3{%
  \dochapentry{\appendixbox{\putwordAppendix{} #2}\labelspace#1}{#3}}
d4076 2
a4077 2
\def\unnumbchapentry#1#2#3{\dochapentry{#1}{#3}}
\def\shortunnumberedentry#1#2#3{\tocentry{#1}{\doshortpageno\bgroup#3\egroup}}
d4081 1
a4081 1
\def\unnumbsecentry#1#2#3#4{\dosecentry{#1}{#4}}
d4085 1
a4085 1
\def\unnumbsubsecentry#1#2#3#4#5{\dosubsecentry{#1}{#5}}
d4090 1
a4090 1
\def\unnumbsubsubsecentry#1#2#3#4#5#6{\dosubsubsecentry{#1}{#6}}
d4192 1
a4192 1
  \catcode `\^=7 \catcode `\_=8 \catcode `\~=\active \let~=\tie
d4194 6
a4199 6
  \catcode `\+=\other
  \catcode `\"=\other
  \catcode `\==\other
  \catcode `\|=\other
  \catcode `\<=\other
  \catcode `\>=\other
d4253 1
a4253 1
% start of the next paragraph will insert \parskip.
d4256 1
a4256 2
  % =10000 instead of <10000 because of a special case in \itemzzz, q.v.
  \ifnum \lastpenalty=10000 \else
d4261 1
a4261 3
      % it's not a good place to break if the last penalty was \nobreak
      % or better ...
      \ifnum\lastpenalty>10000 \else \penalty-50 \fi
d4293 1
a4293 2
\def\cartouche{%
\par  % can't be in the midst of a paragraph.
d4340 1
d4379 14
a4392 1
% @@smallexample and @@smalllisp: use smaller fonts.
d4394 1
a4394 1
\def\smalllisp{\begingroup
a4399 2
\let\smallexample = \smalllisp

d4409 1
a4409 1
% @@smalldisplay: @@display plus smaller fonts.
d4411 1
a4411 1
\def\smalldisplay{\begingroup
d4426 1
a4426 1
% @@smallformat: @@format plus smaller fonts.
d4428 1
a4428 1
\def\smallformat{\begingroup
d4455 1
d4478 1
a4478 3
% [Knuth] p.344; only we need to do the other characters Texinfo sets
% active too.  Otherwise, they get lost as the first character on a
% verbatim line.
d4480 2
a4481 4
  \do\ \do\\\do\{\do\}\do\$\do\&%
  \do\#\do\^\do\^^K\do\_\do\^^A\do\%\do\~%
  \do\<\do\>\do\|\do\@@\do+\do\"%
}
d4568 1
a4568 1
% we need not redefine '\', '{' and '}'.
a4577 1
%
d4580 1
a4580 5
  \obeylines %
  % ignore everything up to the first ^^M, that's the newline at the end
  % of the @@verbatim input line itself.  Otherwise we get an extra blank
  % line in the output.
  \gdef\doverbatim#1^^M#2@@end verbatim{#2\end{verbatim}}%
d4596 8
a4603 8
    \catcode`\\=\other
    \catcode`~=\other
    \catcode`^=\other
    \catcode`_=\other
    \catcode`|=\other
    \catcode`<=\other
    \catcode`>=\other
    \catcode`+=\other
d4617 3
a4619 6
    \let\value=\expandablevalue
    \def\thisfile{#1}%
    \expandafter\expandafter\setupverbatiminclude\input\thisfile
  \endgroup
  \nonfillfinish
  \endgroup
d4623 1
a4623 9
% Save the text away for @@insertcopying later.  Many commands won't be
% allowed in this context, but that's ok.
% 
% We save the uninterpreted tokens, rather than creating a box.
% Saving the text in a box would be much easier, but then all the
% typesetting commands (@@smallbook, font changes, etc.) have to be done
% beforehand -- and a) we want @@copying to be done first in the source
% file; b) letting users define the frontmatter in as flexible order as
% possible is very desirable.
d4625 2
a4627 36
  % Define a command to swallow text until we reach `@@end copying'.
  % \ is the escape char in this texinfo.tex file, so it is the
  % delimiter for the command; @@ will be the escape char when we read
  % it, but that doesn't matter.
  \long\def\docopying##1\end copying{\gdef\copyingtext{##1}\enddocopying}%
  %
  % We must preserve ^^M's in the input file; see \insertcopying below.
  \catcode`\^^M = \active
  \docopying
}

% What we do to finish off the copying text.
%
\def\enddocopying{\endgroup\ignorespaces}

% @@insertcopying.  Here we must play games with ^^M's.  On the one hand,
% we need them to delimit commands such as `@@end quotation', so they
% must be active.  On the other hand, we certainly don't want every
% end-of-line to be a \par, as would happen with the normal active
% definition of ^^M.  On the third hand, two ^^M's in a row should still
% generate a \par.
% 
% Our approach is to make ^^M insert a space and a penalty1 normally;
% then it can also check if \lastpenalty=1.  If it does, then manually
% do \par.
% 
% This messes up the normal definitions of @@c[omment], so we redefine
% it.  Similarly for @@ignore.  (These commands are used in the gcc
% manual for man page generation.)
% 
% Seems pretty fragile, most line-oriented commands will presumably
% fail, but for the limited use of getting the copying text (which
% should be quite simple) inserted, we can hope it's ok.
%
{\catcode`\^^M=\active %
\gdef\insertcopying{\begingroup %
d4629 2
a4630 18
  \def^^M{%
    \ifnum \lastpenalty=1 %
      \par %
    \else %
      \space \penalty 1 %
    \fi %
  }%
  %
  % Fix @@c[omment] for catcode 13 ^^M's.
  \def\c##1^^M{\ignorespaces}%
  \let\comment = \c %
  %
  % Don't bother jumping through all the hoops that \doignore does, it
  % would be very hard since the catcodes are already set.
  \long\def\ignore##1\end ignore{\ignorespaces}%
  %
  \copyingtext %
\endgroup}%
d4633 5
d4642 1
a4642 1
\def\setdeffont#1 {\csname DEF#1\endcsname}
d4646 1
d4650 2
a4651 3

% We want ()&[] to print specially on the defun line.
% 
d4653 2
a4654 4
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\&=\active
  \catcode`\[=\active \catcode`\]=\active
}
d4701 1
a4701 1
  \catcode`& = \active
d4705 26
a4730 41
% \defname, which formats the name of the @@def (not the args).
% #1 is the function name.
% #2 is the type of definition, such as "Function".
%
\def\defname#1#2{%
  % How we'll output the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \ifempty{#2}%
    \def\defnametype{}%
  \else
    \def\defnametype{[\rm #2]}%
  \fi
  %
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \dimen2=\leftskip
  \advance\dimen2 by -\defbodyindent
  %
  % Figure out values for the paragraph shape.
  \setbox0=\hbox{\hskip \deflastargmargin{\defnametype}}%
  \dimen0=\hsize \advance \dimen0 by -\wd0  % compute size for first line
  \dimen1=\hsize \advance \dimen1 by -\defargsindent  % size for continuations
  \parshape 2 0in \dimen0 \defargsindent \dimen1
  %
  % Output arg 2 ("Function" or some such) but stuck inside a box of
  % width 0 so it does not interfere with linebreaking.
  \noindent
  %
  {% Adjust \hsize to exclude the ambient margins,
   % so that \rightline will obey them.
   \advance \hsize by -\dimen2
   \dimen3 = 0pt  % was -1.25pc
   \rlap{\rightline{\defnametype\kern\dimen3}}%
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \advance\leftskip by -\defbodyindent
  \exdentamount=\defbodyindent
  {\df #1}\enskip        % output function name
  % \defunargs will be called next to output the arguments, if any.
d4743 2
a4744 5
  % break after all.  Check for penalty 10002 (inserted by
  % \defargscommonending) instead of 10000, since the sectioning
  % commands insert a \penalty10000, and we don't want to allow a break
  % between a section heading and a defun.
  \ifnum\lastpenalty=10002 \penalty0 \fi
a4755 10
% Common part of the \...x definitions.
% 
\def\defxbodycommon{%
  % As with \parsebodycommon above, allow line break if we have multiple
  % x headers in a row.  It's not a great place, though.
  \ifnum\lastpenalty=10000 \penalty1000 \fi
  %
  \begingroup\obeylines
}

d4760 2
a4761 2
  \def#2{\defxbodycommon \activeparens \spacesplit#3}%
  \catcode\equalChar=\active
d4766 1
a4766 1
% #1, #2, #3 are the common arguments (see \parsebodycommon above).
d4771 1
a4771 1
  \def#2##1 {\defxbodycommon \activeparens \spacesplit{#3{##1}}}%
d4773 1
a4773 5
  % The \empty here prevents misinterpretation of a construct such as
  %   @@deffn {whatever} {Enharmonic comma}
  % See comments at \deftpparsebody, although in our case we don't have
  % to remove the \empty afterwards, since it is empty.
  \spacesplit{#3{#4}}\empty
d4783 1
a4783 1
  \def#2##1 ##2 {\defxbodycommon \activeparens \spacesplit{#3{##1}{##2}}}%
d4797 3
a4799 2
  \def#2##1 ##2 ##3 {\def#4{##1}%
    \defxbodycommon \activeparens \spacesplit{#3{##2}{##3}}}%
d4808 1
a4808 1
    \defxbodycommon \activeparens \spacesplit{#3{##2}}}%
d4819 2
a4820 2
  \def#2{\defxbodycommon \spacesplit#3}%
  \catcode\equalChar=\active
d4829 1
a4829 1
    \defxbodycommon \spacesplit{#3{##2}}}%
d4836 1
a4836 1
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
d4852 1
a4852 1
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
d4870 1
a4870 1
% Split up #2 (the rest of the input line) at the first space token.
d4877 5
a4881 9
{\obeylines %
 \gdef\spacesplit#1#2^^M{\endgroup\spacesplitx{#1}#2 \relax\spacesplitx}%
 \long\gdef\spacesplitx#1#2 #3#4\spacesplitx{%
   \ifx\relax #3%
     #1{#2}{}%
   \else %
     #1{#2}{#3#4}%
   \fi}%
}
d4885 2
a4886 9
% This is called to end the arguments processing for all the @@def... commands.
%
\def\defargscommonending{%
  \interlinepenalty = 10000
  \advance\rightskip by 0pt plus 1fil
  \endgraf
  \nobreak\vskip -\parskip
  \penalty 10002  % signal to \parsebodycommon.
}
a4887 2
% This expands the args and terminates the paragraph they comprise.
% 
d4896 3
a4898 1
  \defargscommonending
d4907 3
a4909 1
  \defargscommonending
d4920 1
a4920 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4930 1
a4930 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4944 1
a4944 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4965 1
a4965 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4975 1
a4975 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4985 1
a4985 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4994 3
a4996 5
  \dosubind{fn}{\code{#2}}{\putwordon\ \code{#1}}% function index entry
  \begingroup
    \defname{#2}{\defoptype\ \putwordon\ #1}%
    \defunargs{#3}%
  \endgroup
d5063 3
a5065 5
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% variable index entry
  \begingroup
    \defname{#2}{\defcvtype\ \putwordof\ #1}%
    \defvarargs{#3}%
  \endgroup
d5073 1
a5073 1
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% entry in var index
d5085 2
a5086 2
  \defargscommonending
}
d5122 2
a5123 1
  \defargscommonending
d5133 2
a5134 1
  \defargscommonending
d5183 1
a5183 1
   \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
d5197 1
a5197 1
\catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
d5227 1
a5227 1
{\catcode`\^^M=\other \catcode`\Q=3%
d5242 11
a5252 11
  \catcode`\~=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
  \catcode`\{=\other
  \catcode`\}=\other
  \catcode`\@@=\other
  \catcode`\^^M=\other
d5256 9
a5264 9
  \catcode`\~=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
  \catcode`\@@=\other
  \catcode`\\=\other}
d5305 2
a5306 2
\def\unmacro{\parsearg\dounmacro}
\def\dounmacro#1{%
d5310 1
a5310 1
    % Remove the macro name from \macrolist:
d5312 13
a5324 3
      \expandafter\let\csname#1\endcsname \relax
      \let\do\unmacrodo
      \xdef\macrolist{\macrolist}%
a5330 11
% Called by \do from \dounmacro on each macro.  The idea is to omit any
% macro definitions that have been changed to \relax.
% 
\def\unmacrodo#1{%
  \ifx#1\relax
    % remove this
  \else
    \noexpand\do \noexpand #1%
  \fi
}

d5513 5
a5517 8
% \setref{NAME}{SNT} defines a cross-reference point NAME (a node or an
% anchor), namely NAME-title (the corresponding @@chapter/etc. name),
% NAME-pg (the page number), and NAME-snt (section number and type).
% Called from \foonoderef.
% 
% We have to set \indexdummies so commands such as @@code in a section
% title aren't expanded.  It would be nicer not to expand the titles in
% the first place, but there's so many layers that that is hard to do.
a5518 3
% Likewise, use \turnoffactive so that punctuation chars such as underscore
% and backslash work in node names.
% 
d5520 1
a5520 1
  \atdummies
a5521 2
  %
  \turnoffactive
d5573 1
a5573 1
    {\turnoffactive \otherbackslash
d5593 1
a5593 1
    {\turnoffactive \otherbackslash
d5602 1
a5602 1
    \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
d5607 4
a5610 2
% \dosetq is called from \setref to do the actual \write (\iflinks).
%
d5613 1
d5615 3
a5617 1
   \iflinks \next \fi
d5621 7
a5627 3
% \internalsetq{foo}{page} expands into
%   CHARACTERS @@xrdef{foo}{...expansion of \page...}
\def\internalsetq#1#2{@@xrdef{#1}{\csname #2\endcsname}}
a5628 2
% Things to be expanded by \internalsetq.
% 
d5630 1
d5632 1
d5634 1
d5636 7
a5642 10
  \ifnum\secno=0
    \putwordChapter@@tie \the\chapno
  \else \ifnum\subsecno=0
    \putwordSection@@tie \the\chapno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}
d5645 9
a5653 11
  \ifnum\secno=0
     \putwordAppendix@@tie @@char\the\appendixno{}%
  \else \ifnum\subsecno=0
     \putwordSection@@tie @@char\the\appendixno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie @@char\the\appendixno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie
      @@char\the\appendixno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}
d5659 1
a5659 1
  \let\linenumber = \empty % Pre-3.0.
d5666 1
a5666 1
%
d5668 1
a5668 7
  {%
    \indexnofonts
    \otherbackslash
    \expandafter\global\expandafter\let\expandafter\thisrefX
      \csname X#1\endcsname
  }%
  \ifx\thisrefX\relax
d5683 1
a5683 1
    \thisrefX
d5690 6
a5695 1
\def\xrdef#1{\expandafter\gdef\csname X#1\endcsname}
d5726 3
a5728 1
  % It was suggested to set the catcode of ^ to 7, which would allow ^^e4 etc.
a5740 3
  \catcode`\^=\other
  %
  % Special characters.  Should be turned off anyway, but...
a5751 1
  \catcode`\%=\other
a5752 1
  %
d5762 1
a5762 1
  %
d5765 1
a5765 1
  % For example, @@xrdef{$\leq $-fun}{page ...} made by @@defun ^^
a5767 3
  \catcode`\\=\other
  %
  % @@ is our escape character in .aux files.
d5770 3
a5772 1
  \catcode`\@@=0
d5817 1
a5817 1
  \dofootnote
d5827 1
a5827 7
% The start of the footnote looks usually like this:
\gdef\startfootins{\insert\footins\bgroup}
%
% ... but this macro is redefined inside @@multitable.
%
\gdef\dofootnote{%
  \startfootins
a5830 1
  \hsize=\pagewidth
d5860 6
d5912 2
a5913 2
  % Do not bother showing banner with epsf.tex v2.7k (available in
  % doc/epsf.tex and on ctan).
d6038 3
a6040 5
% 4) hoffset; 5) binding offset; 6) topskip; 7) physical page height; 8)
% physical page width.
% 
% We also call \setleading{\textleading}, so the caller should define
% \textleading.  The caller should also set \parskip.
d6042 1
a6042 1
\def\internalpagesizes#1#2#3#4#5#6#7#8{%
a6060 5
  \ifpdf
    \pdfpageheight #7\relax
    \pdfpagewidth #8\relax
  \fi
  %
d6067 9
d6082 1
a6082 4
  \internalpagesizes{46\baselineskip}{6in}%
                    {\voffset}{.25in}%
                    {\bindingoffset}{36pt}%
                    {11in}{8.5in}%
d6090 1
a6090 4
  \internalpagesizes{7.5in}{5in}%
                    {\voffset}{.25in}%
                    {\bindingoffset}{16pt}%
                    {9.25in}{7in}%
d6096 1
d6098 1
d6104 1
a6104 1
  \textleading = 13.2pt
d6106 1
a6106 14
  % Double-side printing via postscript on Laserjet 4050 
  % prints double-sided nicely when \bindingoffset=10mm and \hoffset=-6mm.
  % To change the settings for a different printer or situation, adjust
  % \normaloffset until the front-side and back-side texts align.  Then
  % do the same for \bindingoffset.  You can set these for testing in
  % your texinfo source file like this:
  % @@tex
  % \global\normaloffset = -6mm
  % \global\bindingoffset = 10mm
  % @@end tex
  \internalpagesizes{51\baselineskip}{160mm}
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{44pt}%
                    {297mm}{210mm}%
a6109 2
  \contentsrightmargin = 0pt
  \defbodyindent = 5mm
d6119 1
a6119 4
  \internalpagesizes{160mm}{120mm}%
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{8pt}%
                    {210mm}{148mm}%
d6124 2
a6125 1
  \contentsrightmargin = 0pt
d6128 2
d6132 2
a6133 1
% A specific text layout, 24x15cm overall, intended for A4 paper.  
d6135 2
d6138 1
a6138 4
  \internalpagesizes{237mm}{150mm}%
                    {\voffset}{4.6mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
d6140 2
a6141 1
  % Must explicitly reset to 0 because we call \afourpaper.
d6145 2
a6146 2
% Use @@afourwide to print on A4 paper in landscape format.
\def\afourwide{{\globaldefs = 1
d6148 2
a6149 6
  \internalpagesizes{241mm}{165mm}%
                    {\voffset}{-2.95mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
  \globaldefs = 0
}}
d6164 1
a6164 10
  \dimen0 = #1
  \advance\dimen0 by \voffset
  %
  \dimen2 = \hsize
  \advance\dimen2 by \normaloffset
  %
  \internalpagesizes{#1}{\hsize}%
                    {\voffset}{\normaloffset}%
                    {\bindingoffset}{44pt}%
                    {\dimen0}{\dimen2}%
d6228 1
a6228 1
\def\_{\leavevmode \kern.07em \vbox{\hrule width.3em height.1ex}\kern .07em }
d6242 2
d6260 1
a6260 2
% \rawbackslashxx outputs one backslash character in current font,
% as in \char`\\.
d6262 2
d6265 1
a6265 3
% \rawbackslash defines an active \ to do \rawbackslashxx.
% \otherbackslash defines an active \ to be a literal `\' character with
% catcode other.
d6267 1
a6267 6
 @@gdef@@rawbackslash{@@let\=@@rawbackslashxx}
 @@gdef@@otherbackslash{@@let\=@@realbackslash}
}

% \realbackslash is an actual character `\' with catcode other.
{\catcode`\\=\other @@gdef@@realbackslash{\}}
d6272 1
d6277 21
a6297 18
@@def@@turnoffactive{%
  @@let"=@@normaldoublequote
  @@let\=@@realbackslash
  @@let~=@@normaltilde
  @@let^=@@normalcaret
  @@let_=@@normalunderscore
  @@let|=@@normalverticalbar
  @@let<=@@normalless
  @@let>=@@normalgreater
  @@let+=@@normalplus
  @@let$=@@normaldollar %$ font-lock fix
}

% Same as @@turnoffactive except outputs \ as {\tt\char`\\} instead of
% the literal character `\'.  (Thus, \ is not expandable when this is in
% effect.)
% 
@@def@@normalturnoffactive{@@turnoffactive @@let\=@@normalbackslash}
@


1.5.8.1
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d6 1
a6 1
\def\texinfoversion{2003-02-03.16}
d8 2
a9 2
% Copyright (C) 1985, 1986, 1988, 1990, 1991, 1992, 1993, 1994, 1995,
% 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d32 1
a32 1
%   ftp://ftp.gnu.org/gnu/texinfo/texinfo.tex
d34 1
a38 2
% The GNU Texinfo home page is http://www.gnu.org/software/texinfo.
% 
d42 3
d60 3
a62 4
% 
% It is possible to adapt texinfo.tex for other languages, to some
% extent.  You can get the existing language-specific files from the
% full Texinfo distribution.
a71 7
\message{Basics,}
\chardef\other=12

% We never want plain's outer \+ definition in Texinfo.
% For @@tex, we can use \tabalign.
\let\+ = \relax

a81 2
\let\ptexgtr=>
\let\ptexhat=^
a83 2
\let\ptexless=<
\let\ptexplus=+
d88 7
a140 12
% In some macros, we cannot use the `\? notation---the left quote is
% in some cases the escape char.
\chardef\colonChar = `\:
\chardef\commaChar = `\,
\chardef\dotChar   = `\.
\chardef\equalChar = `\=
\chardef\exclamChar= `\!
\chardef\questChar = `\?
\chardef\semiChar  = `\;
\chardef\spaceChar = `\ %
\chardef\underChar = `\_

a144 6
% True if #1 is the empty string, i.e., called like `\ifempty{}'.
%
\def\ifempty#1{\ifemptyx #1\emptymarkA\emptymarkB}%
\def\ifemptyx#1#2\emptymarkB{\ifx #1\emptymarkA}%

% Hyphenation fixes.
d151 2
a152 2
\newdimen\bindingoffset
\newdimen\normaloffset
d157 1
a157 3
% since that produces some useless output on the terminal.  We also make
% some effort to order the tracing commands to reduce output in the log
% file; cf. trace.sty in LaTeX.
d160 13
a172 18
\def\loggingall{%
  \tracingstats2
  \tracingpages1
  \tracinglostchars2  % 2 gives us more in etex
  \tracingparagraphs1
  \tracingoutput1
  \tracingmacros2
  \tracingrestores1
  \showboxbreadth\maxdimen \showboxdepth\maxdimen
  \ifx\eTeXversion\undefined\else % etex gives us more logging
    \tracingscantokens1
    \tracingifs1
    \tracinggroups1
    \tracingnesting2
    \tracingassigns1
  \fi
  \tracingcommands3  % 3 gives us more in etex
  \errorcontextlines\maxdimen
d174 1
d279 1
a279 1
  }% end of group with \normalturnoffactive
d439 11
d469 2
a470 3
  % Definitions to produce \{ and \} commands for indices,
  % and @@{ and @@} for the aux file.
  \catcode`\{ = \other \catcode`\} = \other
d472 4
a475 6
  \catcode`\! = 0 \catcode`\\ = \other
  !gdef!lbracecmd[\{]%
  !gdef!rbracecmd[\}]%
  !gdef!lbraceatcmd[@@{]%
  !gdef!rbraceatcmd[@@}]%
!endgroup
d478 1
a478 1
% Others are defined by plain TeX: @@` @@' @@" @@^ @@~ @@= @@u @@v @@H.
d487 1
a487 1
% Plain TeX defines: @@AA @@AE @@O @@OE @@L (plus lowercase versions) @@ss.
a541 10
% Another complication is that the group might be very large.  This can
% cause the glue on the previous page to be unduly stretched, because it
% does not have much material.  In this case, it's better to add an
% explicit \vfill so that the extra space is at the bottom.  The
% threshold for doing this is if the group is more than \vfilllimit
% percent of a page (\vfilllimit can be changed inside of @@tex).
% 
\newbox\groupbox
\def\vfilllimit{0.7}
%
a554 12
    % \dimen0 is the vertical size of the group's box.
    \dimen0 = \ht\groupbox  \advance\dimen0 by \dp\groupbox
    % \dimen2 is how much space is left on the page (more or less).
    \dimen2 = \pageheight   \advance\dimen2 by -\pagetotal
    % if the group doesn't fit on the current page, and it's a big big
    % group, force a page break.
    \ifdim \dimen0 > \dimen2
      \ifdim \pagetotal < \vfilllimit\pageheight
        \page
      \fi
    \fi
    \copy\groupbox
d558 1
a558 1
  \setbox\groupbox = \vtop\bgroup
d756 8
a763 8
  \catcode`\\=\other
  \catcode`~=\other
  \catcode`^=\other
  \catcode`_=\other
  \catcode`|=\other
  \catcode`<=\other
  \catcode`>=\other
  \catcode`+=\other
a768 1
  \let\value=\expandablevalue
d774 6
a779 11
% @@center line
% outputs that line, centered.
%
\def\center{\parsearg\docenter}
\def\docenter#1{{%
  \ifhmode \hfil\break \fi
  \advance\hsize by -\leftskip
  \advance\hsize by -\rightskip
  \line{\hfil \ignorespaces#1\unskip \hfil}%
  \ifhmode \break \fi
}}
d844 5
d856 1
a856 1
{\catcode\underChar = \active
d858 1
a858 1
  \catcode\underChar=\active
a873 1
  \mathactive
a876 17
% Some active characters (such as <) are spaced differently in math.
% We have to reset their definitions in case the @@math was an
% argument to a command which set the catcodes (such as @@item or @@section).
% 
{
  \catcode`^ = \active
  \catcode`< = \active
  \catcode`> = \active
  \catcode`+ = \active
  \gdef\mathactive{%
    \let^ = \ptexhat
    \let< = \ptexless
    \let> = \ptexgtr
    \let+ = \ptexplus
  }
}

d968 1
a968 1
         #1.pdf%
d990 3
d998 2
d1001 1
d1003 1
d1005 1
a1005 5
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
d1009 3
d1014 2
d1018 2
d1022 2
a1023 11
      \let\appendixentry = \chapentry
      \let\unnumbchapentry = \chapentry
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
      %
      % Make special characters normal for writing to the pdf file.
      % 
      \indexnofonts
      \let\tt=\relax
      \turnoffactive
d1173 1
a1173 1
  \mainmagstep=\magstep1
d1181 1
a1181 1
% Instead of cmb10, you may want to use cmbx10.
d1183 1
a1183 2
% looks better when embedded in a line with cmr10
% (in Bob's opinion).
a1233 1
\def\authortt{\sectt}
d1331 1
a1331 19

% Set the fonts to use with the @@small... environments.
\let\smallexamplefonts = \smallfonts

% About \smallexamplefonts.  If we use \smallfonts (9pt), @@smallexample
% can fit this many characters:
%   8.5x11=86   smallbook=72  a4=90  a5=69
% If we use \smallerfonts (8pt), then we can fit this many characters:
%   8.5x11=90+  smallbook=80  a4=90+  a5=77
% For me, subjectively, the few extra characters that fit aren't worth
% the additional smallness of 8pt.  So I'm making the default 9pt.
% 
% By the way, for comparison, here's what fits with @@example (10pt):
%   8.5x11=71  smallbook=60  a4=75  a5=58
% 
% I wish we used A4 paper on this side of the Atlantic.
% 
% --karl, 24jan03.

a1347 1
\setfont\shortconttt\ttshape{12}{1000}
d1355 2
a1356 2
\def\smartslanted#1{{\ifusingtt\ttsl\sl #1}\futurelet\next\smartitalicx}
\def\smartitalic#1{{\ifusingtt\ttsl\it #1}\futurelet\next\smartitalicx}
a1373 11
% Set sfcode to normal for the chars that usually have another value.
% Can't use plain's \frenchspacing because it uses the `\x notation, and
% sometimes \x has an active definition that messes things up.
% 
\catcode`@@=11
  \def\frenchspacing{%
    \sfcode\dotChar  =\@@m \sfcode\questChar=\@@m \sfcode\exclamChar=\@@m
    \sfcode\colonChar=\@@m \sfcode\semiChar =\@@m \sfcode\commaChar =\@@m
  }
\catcode`@@=\other

a1472 3
  \else
    \errhelp = \EMsimple
    \errmessage{Unknown @@kbdinputstyle `\arg'}%
d1479 3
a1481 2
% Default is `distinct.'
\kbdinputstyle distinct
d1595 1
a1595 2
   \def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines
                   \let\tt=\authortt}%
d1876 1
a1876 1
    % Stop a page break at the \parskip glue coming up.  (Unfortunately
d1878 2
a1879 10
    % \baselineskip glue.)  However, if what follows is an environment
    % such as @@example, there will be no \parskip glue; then
    % the negative vskip we just would cause the example and the item to
    % crash together.  So we use this bizarre value of 10001 as a signal
    % to \aboveenvbreak to insert \parskip glue after all.
    % (Possibly there are other commands that could be followed by
    % @@example which need the same treatment, but not section titles; or
    % maybe section titles are the only special case and they should be
    % penalty 10001...)
    \penalty 10001
d1985 5
d2211 2
a2212 2
         \setbox0=\hbox{#1\unskip\space}% Add a normal word space as a
                   % separator; typically that is always in the input, anyway.
d2227 6
d2238 1
a2238 7
  \let\item=\crcrwithfootnotes
  % A \tab used to include \hskip1sp.  But then the space in a template
  % line is not enough.  That is bad.  So let's go back to just & until
  % we encounter the problem it was intended to solve again.  --karl,
  % nathan@@acm.org, 20apr99.
  \let\tab=&%
  \let\startfootins=\startsavedfootnote
d2246 1
a2246 5
  \def\Emultitable{%
    \global\setpercentfalse
    \crcrwithfootnotes\crcr
    \egroup\egroup
  }%
a2334 19
% In case a @@footnote appears inside an alignment, save the footnote
% text to a box and make the \insert when a row of the table is
% finished.  Otherwise, the insertion is lost, it never migrates to the
% main vertical list.  --kasal, 22jan03.
%
\newbox\savedfootnotes
%
% \dotable \let's \startfootins to this, so that \dofootnote will call
% it instead of starting the insertion right away.
\def\startsavedfootnote{%
  \global\setbox\savedfootnotes = \vbox\bgroup
    \unvbox\savedfootnotes
}
\def\crcrwithfootnotes{%
  \crcr
  \ifvoid\savedfootnotes \else
    \noalign{\insert\footins{\box\savedfootnotes}}%
  \fi
}
a2369 12
% We use \empty instead of \relax for the @@def... commands, so that \end
% doesn't throw an error.  For instance:
% @@ignore
% @@deffn ...
% @@end deffn
% @@end ignore
% 
% The @@end deffn is going to get expanded, because we're trying to allow
% nested conditionals.  But we don't want to expand the actual @@deffn,
% since it might be syntactically correct and intended to be ignored.
% Since \end checks for \relax, using \empty does not cause an error.
% 
d2372 3
a2374 6
  \let\defcv = \empty
  \let\defcvx = \empty
  \let\Edefcv = \empty
  \let\deffn = \empty
  \let\deffnx = \empty
  \let\Edeffn = \empty
d2376 24
a2399 54
  \let\defivar = \empty
  \let\defivarx = \empty
  \let\Edefivar = \empty
  \let\defmac = \empty
  \let\defmacx = \empty
  \let\Edefmac = \empty
  \let\defmethod = \empty
  \let\defmethodx = \empty
  \let\Edefmethod = \empty
  \let\defop = \empty
  \let\defopx = \empty
  \let\Edefop = \empty
  \let\defopt = \empty
  \let\defoptx = \empty
  \let\Edefopt = \empty
  \let\defspec = \empty
  \let\defspecx = \empty
  \let\Edefspec = \empty
  \let\deftp = \empty
  \let\deftpx = \empty
  \let\Edeftp = \empty
  \let\deftypefn = \empty
  \let\deftypefnx = \empty
  \let\Edeftypefn = \empty
  \let\deftypefun = \empty
  \let\deftypefunx = \empty
  \let\Edeftypefun = \empty
  \let\deftypeivar = \empty
  \let\deftypeivarx = \empty
  \let\Edeftypeivar = \empty
  \let\deftypemethod = \empty
  \let\deftypemethodx = \empty
  \let\Edeftypemethod = \empty
  \let\deftypeop = \empty
  \let\deftypeopx = \empty
  \let\Edeftypeop = \empty
  \let\deftypevar = \empty
  \let\deftypevarx = \empty
  \let\Edeftypevar = \empty
  \let\deftypevr = \empty
  \let\deftypevrx = \empty
  \let\Edeftypevr = \empty
  \let\defun = \empty
  \let\defunx = \empty
  \let\Edefun = \empty
  \let\defvar = \empty
  \let\defvarx = \empty
  \let\Edefvar = \empty
  \let\defvr = \empty
  \let\defvrx = \empty
  \let\Edefvr = \empty
  \let\clear = \relax
  \let\down = \relax
  \let\evenfooting = \relax
d2401 1
d2403 2
a2404 1
  \let\everyheading = \relax
a2406 1
  \let\item = \relax
d2408 1
a2408 4
  \let\oddfooting = \relax
  \let\oddheading = \relax
  \let\printindex = \relax
  \let\pxref = \relax
d2410 1
a2410 1
  \let\ref = \relax
d2412 2
a2413 6
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\settitle = \relax
  \let\up = \relax
  \let\verbatiminclude = \relax
  \let\xref = \relax
d2416 2
a2417 1
% Ignore @@ignore, @@ifhtml, @@ifinfo, and the like.
d2419 1
a2419 4
\def\direntry{\doignore{direntry}}
\def\documentdescriptionword{documentdescription}
\def\documentdescription{\doignore{documentdescription}}
\def\html{\doignore{html}}
d2422 1
d2424 1
a2424 3
\def\ifplaintext{\doignore{ifplaintext}}
\def\ifxml{\doignore{ifxml}}
\def\ignore{\doignore{ignore}}
d2426 3
a2428 1
\def\xml{\doignore{xml}}
d2446 1
a2446 1
  \catcode\spaceChar = 10
d2488 1
a2488 1
    \immediate\write16{  (See ftp://ftp.gnu.org/non-gnu/TeX.README.)}
d2510 2
a2511 2
  % the chance of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook.
d2532 2
a2533 2
    % dummy.tfm, as suggested in the TeXbook, because some sites
    % might not have that installed.  Therefore, math mode will still
d2562 1
a2562 1
    % Do not execute instructions in @@tex.
d2607 1
a2607 1
    \catcode`\-=\other \catcode`\_=\other
d2616 5
a2620 6
% about that.  The command has to be fully expandable (if the variable
% is set), since the result winds up in the index file.  This means that
% if the variable's value contains other Texinfo commands, it's almost
% certain it will fail (although perhaps we could fix that with
% sufficient work to do a one-level expansion on the result, instead of
% complete).
a2624 1
    \message{Variable `#1', used in @@value, is not set.}%
d2633 2
a2634 2
\def\ifset{\parsearg\doifset}
\def\doifset#1{%
d2636 1
a2636 1
    \let\next=\ifsetfail
d2638 1
a2638 1
    \let\next=\ifsetsucceed
a2639 1
  \next
d2648 2
a2649 2
\def\ifclear{\parsearg\doifclear}
\def\doifclear#1{%
d2651 1
a2651 1
    \let\next=\ifclearsucceed
d2653 1
a2653 1
    \let\next=\ifclearfail
a2654 1
  \next
d2673 20
a2692 3
% True conditional.  Since \set globally defines its variables, we can
% just start and end a group (to keep the @@end definition undefined at
% the outer level).
d2694 1
a2694 3
\def\conditionalsucceed#1{\begingroup
  \expandafter\def\csname E#1\endcsname{\endgroup}%
}
d2787 3
a2789 3
% Take care of Texinfo commands that can appear in an index entry.
% Since there are some commands we want to expand, and others we don't,
% we have to laboriously prevent expansion for those that we don't.
d2792 93
a2884 155
  \def\@@{@@}% change to @@@@ when we switch to @@ as escape char in index files.
  \def\ {\realbackslash\space }%
  % Need these in case \tex is in effect and \{ is a \delimiter again.
  % But can't use \lbracecmd and \rbracecmd because texindex assumes
  % braces and backslashes are used only as delimiters.  
  \let\{ = \mylbrace
  \let\} = \myrbrace
  %
  % \definedummyword defines \#1 as \realbackslash #1\space, thus
  % effectively preventing its expansion.  This is used only for control
  % words, not control letters, because the \space would be incorrect
  % for control characters, but is needed to separate the control word
  % from whatever follows.
  % 
  % For control letters, we have \definedummyletter, which omits the
  % space.
  % 
  % These can be used both for control words that take an argument and
  % those that do not.  If it is followed by {arg} in the input, then
  % that will dutifully get written to the index (or wherever).
  % 
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{\realbackslash ##1}%
  }%
  %
  % Do the redefinitions.
  \commondummies
}

% For the aux file, @@ is the escape character.  So we want to redefine
% everything using @@ instead of \realbackslash.  When everything uses 
% @@, this will be simpler.
% 
\def\atdummies{%
  \def\@@{@@@@}%
  \def\ {@@ }%
  \let\{ = \lbraceatcmd
  \let\} = \rbraceatcmd
  %
  % (See comments in \indexdummies.)
  \def\definedummyword##1{%
    \expandafter\def\csname ##1\endcsname{@@##1\space}%
  }%
  \def\definedummyletter##1{%
    \expandafter\def\csname ##1\endcsname{@@##1}%
  }%
  %
  % Do the redefinitions.
  \commondummies
}

% Called from \indexdummies and \atdummies.  \definedummyword and
% \definedummyletter must be defined first.
% 
\def\commondummies{%
  %
  \normalturnoffactive
  %
  % Control letters and accents.
  \definedummyletter{_}%
  \definedummyletter{,}%
  \definedummyletter{"}%
  \definedummyletter{`}%
  \definedummyletter{'}%
  \definedummyletter{^}%
  \definedummyletter{~}%
  \definedummyletter{=}%
  \definedummyword{u}%
  \definedummyword{v}%
  \definedummyword{H}%
  \definedummyword{dotaccent}%
  \definedummyword{ringaccent}%
  \definedummyword{tieaccent}%
  \definedummyword{ubaraccent}%
  \definedummyword{udotaccent}%
  \definedummyword{dotless}%
  %
  % Other non-English letters.
  \definedummyword{AA}%
  \definedummyword{AE}%
  \definedummyword{L}%
  \definedummyword{OE}%
  \definedummyword{O}%
  \definedummyword{aa}%
  \definedummyword{ae}%
  \definedummyword{l}%
  \definedummyword{oe}%
  \definedummyword{o}%
  \definedummyword{ss}%
  %
  % Although these internal commands shouldn't show up, sometimes they do.
  \definedummyword{bf}%
  \definedummyword{gtr}%
  \definedummyword{hat}%
  \definedummyword{less}%
  \definedummyword{sf}%
  \definedummyword{sl}%
  \definedummyword{tclose}%
  \definedummyword{tt}%
  %
  % Texinfo font commands.
  \definedummyword{b}%
  \definedummyword{i}%
  \definedummyword{r}%
  \definedummyword{sc}%
  \definedummyword{t}%
  %
  \definedummyword{TeX}%
  \definedummyword{acronym}%
  \definedummyword{cite}%
  \definedummyword{code}%
  \definedummyword{command}%
  \definedummyword{dfn}%
  \definedummyword{dots}%
  \definedummyword{emph}%
  \definedummyword{env}%
  \definedummyword{file}%
  \definedummyword{kbd}%
  \definedummyword{key}%
  \definedummyword{math}%
  \definedummyword{option}%
  \definedummyword{samp}%
  \definedummyword{strong}%
  \definedummyword{uref}%
  \definedummyword{url}%
  \definedummyword{var}%
  \definedummyword{w}%
  %
  % Assorted special characters.
  \definedummyword{bullet}%
  \definedummyword{copyright}%
  \definedummyword{dots}%
  \definedummyword{enddots}%
  \definedummyword{equiv}%
  \definedummyword{error}%
  \definedummyword{expansion}%
  \definedummyword{minus}%
  \definedummyword{pounds}%
  \definedummyword{point}%
  \definedummyword{print}%
  \definedummyword{result}%
  %
  % Handle some cases of @@value -- where the variable name does not
  % contain - or _, and the value does not contain any
  % (non-fully-expandable) commands.
  \let\value = \expandablevalue
  %
  % Normal spaces, not active ones.
  \unsepspaces
  %
  % No macro expansion.
  \turnoffmacros
d2893 3
a2895 6

% \indexnofonts is used when outputting the strings to sort the index
% by, and when constructing control sequence names.  It eliminates all
% control sequences and just writes whatever the best ASCII sort string
% would be for a given command (usually its argument).
%
d2898 1
a2898 1
%
d2900 70
a2969 70
  \def\ { }%
  \def\@@{@@}%
  % how to handle braces?
  \def\_{\normalunderscore}%
  %
  \let\,=\asis
  \let\"=\asis
  \let\`=\asis
  \let\'=\asis
  \let\^=\asis
  \let\~=\asis
  \let\==\asis
  \let\u=\asis
  \let\v=\asis
  \let\H=\asis
  \let\dotaccent=\asis
  \let\ringaccent=\asis
  \let\tieaccent=\asis
  \let\ubaraccent=\asis
  \let\udotaccent=\asis
  \let\dotless=\asis
  %
  % Other non-English letters.
  \def\AA{AA}%
  \def\AE{AE}%
  \def\L{L}%
  \def\OE{OE}%
  \def\O{O}%
  \def\aa{aa}%
  \def\ae{ae}%
  \def\l{l}%
  \def\oe{oe}%
  \def\o{o}%
  \def\ss{ss}%
  \def\exclamdown{!}%
  \def\questiondown{?}%
  %
  % Don't no-op \tt, since it isn't a user-level command
  % and is used in the definitions of the active chars like <, >, |, etc.
  % Likewise with the other plain tex font commands.
  %\let\tt=\asis
  %
  % Texinfo font commands.
  \let\b=\asis
  \let\i=\asis
  \let\r=\asis
  \let\sc=\asis
  \let\t=\asis
  %
  \let\TeX=\indexdummytex
  \let\acronym=\asis
  \let\cite=\asis
  \let\code=\asis
  \let\command=\asis
  \let\dfn=\asis
  \let\dots=\indexdummydots
  \let\emph=\asis
  \let\env=\asis
  \let\file=\asis
  \let\kbd=\asis
  \let\key=\asis
  \let\math=\asis
  \let\option=\asis
  \let\samp=\asis
  \let\strong=\asis
  \let\uref=\asis
  \let\url=\asis
  \let\var=\asis
  \let\w=\asis
}
d3001 14
a3014 1
        % The main index entry text.
d3017 2
a3018 2
        % If third arg is present, precede it with space in sort key.
        \def\thirdarg{#3}%
d3020 1
a3020 3
           % If the third (subentry) arg is present, add it to the index
           % line to write.
          \toks0 = \expandafter{\the\toks0 \space #3}%
a3022 7
        % Process the index entry with all font commands turned off, to
        % get the string to sort by.
        {\indexnofonts
         \edef\temp{\the\toks0}% need full expansion
         \xdef\indexsorttmp{\temp}%
        }%
        %
d3053 1
a3053 1
            \ifdim\lastskip = 0pt \else \nobreak\vskip-\skip0 \fi
d3058 1
d3534 17
a3550 19
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \chapno by 1 \message{\putwordChapter\space \the\chapno}%
  \chapmacro {#1}{\the\chapno}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  % We don't substitute the actual chapter name into \thischapter
  % because we don't want its macros evaluated now.
  \xdef\thischapter{\putwordChapter{} \the\chapno: \noexpand\thischaptername}%
  \writetocentry{chap}{#1}{{\the\chapno}}
  \donoderef
  \global\let\section = \numberedsec
  \global\let\subsection = \numberedsubsec
  \global\let\subsubsection = \numberedsubsubsec
}

% we use \chapno to avoid indenting back
\def\appendixbox#1{%
  \setbox0 = \hbox{\putwordAppendix{} \the\chapno}%
  \hbox to \wd0{#1\hss}}
d3555 15
a3569 12
  \secno=0 \subsecno=0 \subsubsecno=0
  \global\advance \appendixno by 1
  \message{\putwordAppendix\space \appendixletter}%
  \chapmacro {#1}{\appendixbox{\putwordAppendix{} \appendixletter}}%
  \gdef\thissection{#1}%
  \gdef\thischaptername{#1}%
  \xdef\thischapter{\putwordAppendix{} \appendixletter: \noexpand\thischaptername}%
  \writetocentry{appendix}{#1}{{\appendixletter}}
  \appendixnoderef
  \global\let\section = \appendixsec
  \global\let\subsection = \appendixsubsec
  \global\let\subsubsection = \appendixsubsubsec
d3582 24
a3605 22
  \secno=0 \subsecno=0 \subsubsecno=0
  %
  % This used to be simply \message{#1}, but TeX fully expands the
  % argument to \message.  Therefore, if #1 contained @@-commands, TeX
  % expanded them.  For example, in `@@unnumbered The @@cite{Book}', TeX
  % expanded @@cite (which turns out to cause errors because \cite is meant
  % to be executed, not expanded).
  %
  % Anyway, we don't want the fully-expanded definition of @@cite to appear
  % as a result of the \message, we just want `@@cite' itself.  We use
  % \the<toks register> to achieve this: TeX expands \the<toks> only once,
  % simply yielding the contents of <toks register>.  (We also do this for
  % the toc entries.)
  \toks0 = {#1}\message{(\the\toks0)}%
  %
  \unnumbchapmacro {#1}%
  \gdef\thischapter{#1}\gdef\thissection{#1}%
  \writetocentry{unnumbchap}{#1}{{\the\chapno}}
  \unnumbnoderef
  \global\let\section = \unnumberedsec
  \global\let\subsection = \unnumberedsubsec
  \global\let\subsubsection = \unnumberedsubsubsec
d3612 8
a3619 5
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\the\chapno}{\the\secno}%
  \writetocentry{sec}{#1}{{\the\chapno}{\the\secno}}
  \donoderef
  \nobreak
d3626 8
a3633 5
  \subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
  \gdef\thissection{#1}\secheading {#1}{\appendixletter}{\the\secno}%
  \writetocentry{sec}{#1}{{\appendixletter}{\the\secno}}
  \appendixnoderef
  \nobreak
d3639 7
a3645 4
  \plainsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsec}{#1}{{\the\chapno}{\the\secno}}
  \unnumbnoderef
  \nobreak
d3652 8
a3659 5
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\the\chapno}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \donoderef
  \nobreak
d3665 8
a3672 5
  \gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
  \subsecheading {#1}{\appendixletter}{\the\secno}{\the\subsecno}%
  \writetocentry{subsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}}
  \appendixnoderef
  \nobreak
d3678 7
a3684 4
  \plainsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}}
  \unnumbnoderef
  \nobreak
d3691 9
a3699 6
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \donoderef
  \nobreak
d3705 9
a3713 6
  \gdef\thissection{#1}\global\advance \subsubsecno by 1 %
  \subsubsecheading {#1}
    {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
  \writetocentry{subsubsec}{#1}{{\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \appendixnoderef
  \nobreak
d3719 7
a3725 4
  \plainsubsubsecheading {#1}\gdef\thissection{#1}%
  \writetocentry{unnumbsubsubsec}{#1}{{\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}}
  \unnumbnoderef
  \nobreak
d3766 4
a3769 4
  {\advance\chapheadingskip by 10pt \chapbreak }%
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d3773 3
a3775 3
  {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
                    \parindent=0pt\raggedright
                    \rm #1\hfill}}\bigskip \par\penalty 200}
d3921 1
a3921 10
  % Add extra space after the heading -- either a line space or a
  % paragraph space, whichever is more.  (Some people like to set
  % \parskip to large values for some reason.)  Don't allow stretch, though.
  \nobreak
  \ifdim\parskip>\normalbaselineskip
    \kern\parskip
  \else
    \kern\normalbaselineskip
  \fi
  \nobreak
d3933 2
a3934 3
% Usage: \writetocentry{chap}{The Name of The Game}{{\the\chapno}}
% We open the .toc file for writing here instead of at @@setfilename (or
% any other fixed time) so that @@contents can be anywhere in the document.
d3937 1
a3937 1
\def\writetocentry#1#2#3{%
d3942 1
a3942 6
  %
  \iflinks
    \toks0 = {#2}%
    \edef\temp{\write\tocfile{\realbackslash #1entry{\the\toks0}#3{\folio}}}%
    \temp
  \fi
d3981 1
a3981 1
      \ifnum \pageno>0 \global\pageno = \lastnegativepageno \fi
d3998 1
a3998 1
   \global\pageno = \savepageno
d4010 1
a4010 2
      \let\rm=\shortcontrm \let\bf=\shortcontbf
      \let\sl=\shortcontsl \let\tt=\shortconttt
d4015 1
d4017 1
d4019 1
a4019 3
      \let\unnumbsecentry = \secentry
      \let\unnumbsubsecentry = \subsecentry
      \let\unnumbsubsubsecentry = \subsubsecentry
d4029 1
a4029 1
   \global\pageno = \savepageno
d4052 1
a4052 2
\def\appendixentry#1#2#3{%
  \dochapentry{\appendixbox{\putwordAppendix{} #2}\labelspace#1}{#3}}
d4076 2
a4077 2
\def\unnumbchapentry#1#2#3{\dochapentry{#1}{#3}}
\def\shortunnumberedentry#1#2#3{\tocentry{#1}{\doshortpageno\bgroup#3\egroup}}
d4081 1
a4081 1
\def\unnumbsecentry#1#2#3#4{\dosecentry{#1}{#4}}
d4085 1
a4085 1
\def\unnumbsubsecentry#1#2#3#4#5{\dosubsecentry{#1}{#5}}
d4090 1
a4090 1
\def\unnumbsubsubsecentry#1#2#3#4#5#6{\dosubsubsecentry{#1}{#6}}
d4192 1
a4192 1
  \catcode `\^=7 \catcode `\_=8 \catcode `\~=\active \let~=\tie
d4194 6
a4199 6
  \catcode `\+=\other
  \catcode `\"=\other
  \catcode `\==\other
  \catcode `\|=\other
  \catcode `\<=\other
  \catcode `\>=\other
d4253 1
a4253 1
% start of the next paragraph will insert \parskip.
d4256 1
a4256 2
  % =10000 instead of <10000 because of a special case in \itemzzz, q.v.
  \ifnum \lastpenalty=10000 \else
d4261 1
a4261 3
      % it's not a good place to break if the last penalty was \nobreak
      % or better ...
      \ifnum\lastpenalty>10000 \else \penalty-50 \fi
d4293 1
a4293 2
\def\cartouche{%
\par  % can't be in the midst of a paragraph.
d4340 1
d4379 14
a4392 1
% @@smallexample and @@smalllisp: use smaller fonts.
d4394 1
a4394 1
\def\smalllisp{\begingroup
a4399 2
\let\smallexample = \smalllisp

d4409 1
a4409 1
% @@smalldisplay: @@display plus smaller fonts.
d4411 1
a4411 1
\def\smalldisplay{\begingroup
d4426 1
a4426 1
% @@smallformat: @@format plus smaller fonts.
d4428 1
a4428 1
\def\smallformat{\begingroup
d4455 1
d4478 1
a4478 3
% [Knuth] p.344; only we need to do the other characters Texinfo sets
% active too.  Otherwise, they get lost as the first character on a
% verbatim line.
d4480 2
a4481 4
  \do\ \do\\\do\{\do\}\do\$\do\&%
  \do\#\do\^\do\^^K\do\_\do\^^A\do\%\do\~%
  \do\<\do\>\do\|\do\@@\do+\do\"%
}
d4568 1
a4568 1
% we need not redefine '\', '{' and '}'.
a4577 1
%
d4580 1
a4580 5
  \obeylines %
  % ignore everything up to the first ^^M, that's the newline at the end
  % of the @@verbatim input line itself.  Otherwise we get an extra blank
  % line in the output.
  \gdef\doverbatim#1^^M#2@@end verbatim{#2\end{verbatim}}%
d4596 8
a4603 8
    \catcode`\\=\other
    \catcode`~=\other
    \catcode`^=\other
    \catcode`_=\other
    \catcode`|=\other
    \catcode`<=\other
    \catcode`>=\other
    \catcode`+=\other
d4617 3
a4619 6
    \let\value=\expandablevalue
    \def\thisfile{#1}%
    \expandafter\expandafter\setupverbatiminclude\input\thisfile
  \endgroup
  \nonfillfinish
  \endgroup
d4623 1
a4623 9
% Save the text away for @@insertcopying later.  Many commands won't be
% allowed in this context, but that's ok.
% 
% We save the uninterpreted tokens, rather than creating a box.
% Saving the text in a box would be much easier, but then all the
% typesetting commands (@@smallbook, font changes, etc.) have to be done
% beforehand -- and a) we want @@copying to be done first in the source
% file; b) letting users define the frontmatter in as flexible order as
% possible is very desirable.
d4625 2
a4627 36
  % Define a command to swallow text until we reach `@@end copying'.
  % \ is the escape char in this texinfo.tex file, so it is the
  % delimiter for the command; @@ will be the escape char when we read
  % it, but that doesn't matter.
  \long\def\docopying##1\end copying{\gdef\copyingtext{##1}\enddocopying}%
  %
  % We must preserve ^^M's in the input file; see \insertcopying below.
  \catcode`\^^M = \active
  \docopying
}

% What we do to finish off the copying text.
%
\def\enddocopying{\endgroup\ignorespaces}

% @@insertcopying.  Here we must play games with ^^M's.  On the one hand,
% we need them to delimit commands such as `@@end quotation', so they
% must be active.  On the other hand, we certainly don't want every
% end-of-line to be a \par, as would happen with the normal active
% definition of ^^M.  On the third hand, two ^^M's in a row should still
% generate a \par.
% 
% Our approach is to make ^^M insert a space and a penalty1 normally;
% then it can also check if \lastpenalty=1.  If it does, then manually
% do \par.
% 
% This messes up the normal definitions of @@c[omment], so we redefine
% it.  Similarly for @@ignore.  (These commands are used in the gcc
% manual for man page generation.)
% 
% Seems pretty fragile, most line-oriented commands will presumably
% fail, but for the limited use of getting the copying text (which
% should be quite simple) inserted, we can hope it's ok.
%
{\catcode`\^^M=\active %
\gdef\insertcopying{\begingroup %
d4629 2
a4630 18
  \def^^M{%
    \ifnum \lastpenalty=1 %
      \par %
    \else %
      \space \penalty 1 %
    \fi %
  }%
  %
  % Fix @@c[omment] for catcode 13 ^^M's.
  \def\c##1^^M{\ignorespaces}%
  \let\comment = \c %
  %
  % Don't bother jumping through all the hoops that \doignore does, it
  % would be very hard since the catcodes are already set.
  \long\def\ignore##1\end ignore{\ignorespaces}%
  %
  \copyingtext %
\endgroup}%
d4633 5
d4642 1
a4642 1
\def\setdeffont#1 {\csname DEF#1\endcsname}
d4646 1
d4650 2
a4651 3

% We want ()&[] to print specially on the defun line.
% 
d4653 2
a4654 4
  \catcode`\(=\active \catcode`\)=\active
  \catcode`\&=\active
  \catcode`\[=\active \catcode`\]=\active
}
d4701 1
a4701 1
  \catcode`& = \active
d4705 26
a4730 41
% \defname, which formats the name of the @@def (not the args).
% #1 is the function name.
% #2 is the type of definition, such as "Function".
%
\def\defname#1#2{%
  % How we'll output the type name.  Putting it in brackets helps
  % distinguish it from the body text that may end up on the next line
  % just below it.
  \ifempty{#2}%
    \def\defnametype{}%
  \else
    \def\defnametype{[\rm #2]}%
  \fi
  %
  % Get the values of \leftskip and \rightskip as they were outside the @@def...
  \dimen2=\leftskip
  \advance\dimen2 by -\defbodyindent
  %
  % Figure out values for the paragraph shape.
  \setbox0=\hbox{\hskip \deflastargmargin{\defnametype}}%
  \dimen0=\hsize \advance \dimen0 by -\wd0  % compute size for first line
  \dimen1=\hsize \advance \dimen1 by -\defargsindent  % size for continuations
  \parshape 2 0in \dimen0 \defargsindent \dimen1
  %
  % Output arg 2 ("Function" or some such) but stuck inside a box of
  % width 0 so it does not interfere with linebreaking.
  \noindent
  %
  {% Adjust \hsize to exclude the ambient margins,
   % so that \rightline will obey them.
   \advance \hsize by -\dimen2
   \dimen3 = 0pt  % was -1.25pc
   \rlap{\rightline{\defnametype\kern\dimen3}}%
  }%
  %
  % Allow all lines to be underfull without complaint:
  \tolerance=10000 \hbadness=10000
  \advance\leftskip by -\defbodyindent
  \exdentamount=\defbodyindent
  {\df #1}\enskip        % output function name
  % \defunargs will be called next to output the arguments, if any.
d4743 2
a4744 5
  % break after all.  Check for penalty 10002 (inserted by
  % \defargscommonending) instead of 10000, since the sectioning
  % commands insert a \penalty10000, and we don't want to allow a break
  % between a section heading and a defun.
  \ifnum\lastpenalty=10002 \penalty0 \fi
a4755 10
% Common part of the \...x definitions.
% 
\def\defxbodycommon{%
  % As with \parsebodycommon above, allow line break if we have multiple
  % x headers in a row.  It's not a great place, though.
  \ifnum\lastpenalty=10000 \penalty1000 \fi
  %
  \begingroup\obeylines
}

d4760 2
a4761 2
  \def#2{\defxbodycommon \activeparens \spacesplit#3}%
  \catcode\equalChar=\active
d4766 1
a4766 1
% #1, #2, #3 are the common arguments (see \parsebodycommon above).
d4771 1
a4771 1
  \def#2##1 {\defxbodycommon \activeparens \spacesplit{#3{##1}}}%
d4773 1
a4773 5
  % The \empty here prevents misinterpretation of a construct such as
  %   @@deffn {whatever} {Enharmonic comma}
  % See comments at \deftpparsebody, although in our case we don't have
  % to remove the \empty afterwards, since it is empty.
  \spacesplit{#3{#4}}\empty
d4783 1
a4783 1
  \def#2##1 ##2 {\defxbodycommon \activeparens \spacesplit{#3{##1}{##2}}}%
d4797 3
a4799 2
  \def#2##1 ##2 ##3 {\def#4{##1}%
    \defxbodycommon \activeparens \spacesplit{#3{##2}{##3}}}%
d4808 1
a4808 1
    \defxbodycommon \activeparens \spacesplit{#3{##2}}}%
d4819 2
a4820 2
  \def#2{\defxbodycommon \spacesplit#3}%
  \catcode\equalChar=\active
d4829 1
a4829 1
    \defxbodycommon \spacesplit{#3{##2}}}%
d4836 1
a4836 1
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
d4852 1
a4852 1
  \def#2##1 {\defxbodycommon \spacesplit{#3{##1}}}%
d4870 1
a4870 1
% Split up #2 (the rest of the input line) at the first space token.
d4877 5
a4881 9
{\obeylines %
 \gdef\spacesplit#1#2^^M{\endgroup\spacesplitx{#1}#2 \relax\spacesplitx}%
 \long\gdef\spacesplitx#1#2 #3#4\spacesplitx{%
   \ifx\relax #3%
     #1{#2}{}%
   \else %
     #1{#2}{#3#4}%
   \fi}%
}
d4885 2
a4886 9
% This is called to end the arguments processing for all the @@def... commands.
%
\def\defargscommonending{%
  \interlinepenalty = 10000
  \advance\rightskip by 0pt plus 1fil
  \endgraf
  \nobreak\vskip -\parskip
  \penalty 10002  % signal to \parsebodycommon.
}
a4887 2
% This expands the args and terminates the paragraph they comprise.
% 
d4896 3
a4898 1
  \defargscommonending
d4907 3
a4909 1
  \defargscommonending
d4920 1
a4920 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4930 1
a4930 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4944 1
a4944 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4965 1
a4965 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4975 1
a4975 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4985 1
a4985 1
\catcode\equalChar=\other % Turn off change made in \defparsebody
d4994 3
a4996 5
  \dosubind{fn}{\code{#2}}{\putwordon\ \code{#1}}% function index entry
  \begingroup
    \defname{#2}{\defoptype\ \putwordon\ #1}%
    \defunargs{#3}%
  \endgroup
d5063 3
a5065 5
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% variable index entry
  \begingroup
    \defname{#2}{\defcvtype\ \putwordof\ #1}%
    \defvarargs{#3}%
  \endgroup
d5073 1
a5073 1
  \dosubind{vr}{\code{#2}}{\putwordof\ \code{#1}}% entry in var index
d5085 2
a5086 2
  \defargscommonending
}
d5122 2
a5123 1
  \defargscommonending
d5133 2
a5134 1
  \defargscommonending
d5183 1
a5183 1
   \catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
d5197 1
a5197 1
\catcode`\@@=0 \catcode`\\=\other \escapechar=`\@@
d5227 1
a5227 1
{\catcode`\^^M=\other \catcode`\Q=3%
d5242 11
a5252 11
  \catcode`\~=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
  \catcode`\{=\other
  \catcode`\}=\other
  \catcode`\@@=\other
  \catcode`\^^M=\other
d5256 9
a5264 9
  \catcode`\~=\other
  \catcode`\^=\other
  \catcode`\_=\other
  \catcode`\|=\other
  \catcode`\<=\other
  \catcode`\>=\other
  \catcode`\+=\other
  \catcode`\@@=\other
  \catcode`\\=\other}
d5305 2
a5306 2
\def\unmacro{\parsearg\dounmacro}
\def\dounmacro#1{%
d5310 1
a5310 1
    % Remove the macro name from \macrolist:
d5312 13
a5324 3
      \expandafter\let\csname#1\endcsname \relax
      \let\do\unmacrodo
      \xdef\macrolist{\macrolist}%
a5330 11
% Called by \do from \dounmacro on each macro.  The idea is to omit any
% macro definitions that have been changed to \relax.
% 
\def\unmacrodo#1{%
  \ifx#1\relax
    % remove this
  \else
    \noexpand\do \noexpand #1%
  \fi
}

d5513 5
a5517 8
% \setref{NAME}{SNT} defines a cross-reference point NAME (a node or an
% anchor), namely NAME-title (the corresponding @@chapter/etc. name),
% NAME-pg (the page number), and NAME-snt (section number and type).
% Called from \foonoderef.
% 
% We have to set \indexdummies so commands such as @@code in a section
% title aren't expanded.  It would be nicer not to expand the titles in
% the first place, but there's so many layers that that is hard to do.
a5518 3
% Likewise, use \turnoffactive so that punctuation chars such as underscore
% and backslash work in node names.
% 
d5520 1
a5520 1
  \atdummies
a5521 2
  %
  \turnoffactive
d5573 1
a5573 1
    {\turnoffactive \otherbackslash
d5593 1
a5593 1
    {\turnoffactive \otherbackslash
d5602 1
a5602 1
    \turnoffactive \otherbackslash \putwordpage\tie\refx{#1-pg}{}%
d5607 4
a5610 2
% \dosetq is called from \setref to do the actual \write (\iflinks).
%
d5613 1
d5615 3
a5617 1
   \iflinks \next \fi
d5621 7
a5627 3
% \internalsetq{foo}{page} expands into
%   CHARACTERS @@xrdef{foo}{...expansion of \page...}
\def\internalsetq#1#2{@@xrdef{#1}{\csname #2\endcsname}}
a5628 2
% Things to be expanded by \internalsetq.
% 
d5630 1
d5632 1
d5634 1
d5636 7
a5642 10
  \ifnum\secno=0
    \putwordChapter@@tie \the\chapno
  \else \ifnum\subsecno=0
    \putwordSection@@tie \the\chapno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie \the\chapno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}
d5645 9
a5653 11
  \ifnum\secno=0
     \putwordAppendix@@tie @@char\the\appendixno{}%
  \else \ifnum\subsecno=0
     \putwordSection@@tie @@char\the\appendixno.\the\secno
  \else \ifnum\subsubsecno=0
    \putwordSection@@tie @@char\the\appendixno.\the\secno.\the\subsecno
  \else
    \putwordSection@@tie
      @@char\the\appendixno.\the\secno.\the\subsecno.\the\subsubsecno
  \fi\fi\fi
}
d5659 1
a5659 1
  \let\linenumber = \empty % Pre-3.0.
d5666 1
a5666 1
%
d5668 1
a5668 7
  {%
    \indexnofonts
    \otherbackslash
    \expandafter\global\expandafter\let\expandafter\thisrefX
      \csname X#1\endcsname
  }%
  \ifx\thisrefX\relax
d5683 1
a5683 1
    \thisrefX
d5690 6
a5695 1
\def\xrdef#1{\expandafter\gdef\csname X#1\endcsname}
d5726 3
a5728 1
  % It was suggested to set the catcode of ^ to 7, which would allow ^^e4 etc.
a5740 3
  \catcode`\^=\other
  %
  % Special characters.  Should be turned off anyway, but...
a5751 1
  \catcode`\%=\other
a5752 1
  %
d5762 1
a5762 1
  %
d5765 1
a5765 1
  % For example, @@xrdef{$\leq $-fun}{page ...} made by @@defun ^^
a5767 3
  \catcode`\\=\other
  %
  % @@ is our escape character in .aux files.
d5770 3
a5772 1
  \catcode`\@@=0
d5817 1
a5817 1
  \dofootnote
d5827 1
a5827 7
% The start of the footnote looks usually like this:
\gdef\startfootins{\insert\footins\bgroup}
%
% ... but this macro is redefined inside @@multitable.
%
\gdef\dofootnote{%
  \startfootins
a5830 1
  \hsize=\pagewidth
d5860 6
d5912 2
a5913 2
  % Do not bother showing banner with epsf.tex v2.7k (available in
  % doc/epsf.tex and on ctan).
d6038 3
a6040 5
% 4) hoffset; 5) binding offset; 6) topskip; 7) physical page height; 8)
% physical page width.
% 
% We also call \setleading{\textleading}, so the caller should define
% \textleading.  The caller should also set \parskip.
d6042 1
a6042 1
\def\internalpagesizes#1#2#3#4#5#6#7#8{%
a6060 5
  \ifpdf
    \pdfpageheight #7\relax
    \pdfpagewidth #8\relax
  \fi
  %
d6067 9
d6082 1
a6082 4
  \internalpagesizes{46\baselineskip}{6in}%
                    {\voffset}{.25in}%
                    {\bindingoffset}{36pt}%
                    {11in}{8.5in}%
d6090 1
a6090 4
  \internalpagesizes{7.5in}{5in}%
                    {\voffset}{.25in}%
                    {\bindingoffset}{16pt}%
                    {9.25in}{7in}%
d6096 1
d6098 1
d6104 1
a6104 1
  \textleading = 13.2pt
d6106 1
a6106 14
  % Double-side printing via postscript on Laserjet 4050 
  % prints double-sided nicely when \bindingoffset=10mm and \hoffset=-6mm.
  % To change the settings for a different printer or situation, adjust
  % \normaloffset until the front-side and back-side texts align.  Then
  % do the same for \bindingoffset.  You can set these for testing in
  % your texinfo source file like this:
  % @@tex
  % \global\normaloffset = -6mm
  % \global\bindingoffset = 10mm
  % @@end tex
  \internalpagesizes{51\baselineskip}{160mm}
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{44pt}%
                    {297mm}{210mm}%
a6109 2
  \contentsrightmargin = 0pt
  \defbodyindent = 5mm
d6119 1
a6119 4
  \internalpagesizes{160mm}{120mm}%
                    {\voffset}{\hoffset}%
                    {\bindingoffset}{8pt}%
                    {210mm}{148mm}%
d6124 2
a6125 1
  \contentsrightmargin = 0pt
d6128 2
d6132 2
a6133 1
% A specific text layout, 24x15cm overall, intended for A4 paper.  
d6135 2
d6138 1
a6138 4
  \internalpagesizes{237mm}{150mm}%
                    {\voffset}{4.6mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
d6140 2
a6141 1
  % Must explicitly reset to 0 because we call \afourpaper.
d6145 2
a6146 2
% Use @@afourwide to print on A4 paper in landscape format.
\def\afourwide{{\globaldefs = 1
d6148 2
a6149 6
  \internalpagesizes{241mm}{165mm}%
                    {\voffset}{-2.95mm}%
                    {\bindingoffset}{7mm}%
                    {297mm}{210mm}%
  \globaldefs = 0
}}
d6164 1
a6164 10
  \dimen0 = #1
  \advance\dimen0 by \voffset
  %
  \dimen2 = \hsize
  \advance\dimen2 by \normaloffset
  %
  \internalpagesizes{#1}{\hsize}%
                    {\voffset}{\normaloffset}%
                    {\bindingoffset}{44pt}%
                    {\dimen0}{\dimen2}%
d6228 1
a6228 1
\def\_{\leavevmode \kern.07em \vbox{\hrule width.3em height.1ex}\kern .07em }
d6242 2
d6260 1
a6260 2
% \rawbackslashxx outputs one backslash character in current font,
% as in \char`\\.
d6262 2
d6265 1
a6265 3
% \rawbackslash defines an active \ to do \rawbackslashxx.
% \otherbackslash defines an active \ to be a literal `\' character with
% catcode other.
d6267 1
a6267 6
 @@gdef@@rawbackslash{@@let\=@@rawbackslashxx}
 @@gdef@@otherbackslash{@@let\=@@realbackslash}
}

% \realbackslash is an actual character `\' with catcode other.
{\catcode`\\=\other @@gdef@@realbackslash{\}}
d6272 1
d6277 21
a6297 18
@@def@@turnoffactive{%
  @@let"=@@normaldoublequote
  @@let\=@@realbackslash
  @@let~=@@normaltilde
  @@let^=@@normalcaret
  @@let_=@@normalunderscore
  @@let|=@@normalverticalbar
  @@let<=@@normalless
  @@let>=@@normalgreater
  @@let+=@@normalplus
  @@let$=@@normaldollar %$ font-lock fix
}

% Same as @@turnoffactive except outputs \ as {\tt\char`\\} instead of
% the literal character `\'.  (Thus, \ is not expandable when this is in
% effect.)
% 
@@def@@normalturnoffactive{@@turnoffactive @@let\=@@normalbackslash}
@


1.4
log
@* standards.texi: Import February 14, 2002 version.
* make-stds.texi: Import 2001 version.
* Makefile.in (install): Depend on install-info.
@
text
@d6 1
a6 1
\def\texinfoversion{2002-02-14.08}
d56 1
a56 1
%   dvips foo.dvi -o # or whatever, to process the dvi file; this makes foo.ps.
d849 1
a849 2
% 
\let\implicitmath = $
d859 1
a859 1
  \def_{\ifnum\fam=\slfam\_\else\sb\fi}%
d862 13
a874 1
\def\math{\tex\mathcode`\_="8000\mathunderscore \implicitmath\finishmath}
d1001 1
a1001 1
      \def\unnumbsecentry ##1##2{}
d1003 1
a1003 1
      \def\unnumbsubsecentry ##1##2{}
d1005 1
a1005 1
      \def\unnumbsubsubsecentry ##1##2{}
d1014 2
a1015 2
      \def\unnumbsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
d1018 2
a1019 2
      \def\unnumbsubsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
d1022 2
a1023 2
      \def\unnumbsubsubsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
d1445 11
a1455 1
\def\codeunder{\ifusingtt{\normalunderscore\discretionary{}{}{}}{\_}}
a1457 2
%\let\exp=\tclose  %Was temporary

a1658 2
   %
   \ifpdf \pdfmakepagedesttrue \fi
d2416 2
a2417 1
% Ignore @@ignore ... @@end ignore.
d2420 1
a2420 4

% Also ignore @@ifinfo, @@ifhtml, @@ifnottex, @@html, @@menu,
% @@documentdescription, and @@direntry text.
%
d2422 1
a2422 1
\def\ifhtml{\doignore{ifhtml}}
d2426 1
d2428 1
a2428 1
\def\direntry{\doignore{direntry}}
d2455 13
a2467 6
  % Make the letter c a comment character so that the rest of the line
  % will be ignored. This way, the document can have (for example)
  %   @@c @@end ifinfo
  % and the @@end ifinfo will be properly ignored.
  % (We've just changed @@ to catcode 12.)
  \catcode`\c = 14
d2469 1
a2469 1
  % And now expand that command.
d2660 3
a2662 3
% @@iftex, @@ifnothtml, @@ifnotinfo always succeed; we read the text
% following, through the first @@end iftex (etc.).  Make `@@end iftex'
% (etc.) valid only after an @@iftex.
d2667 1
d2671 1
d2673 2
a2674 2
% We can't just want to start a group at @@iftex (for example) and end it
% at @@end iftex, since then @@set commands inside the conditional have no
d2889 1
a2889 1
% expansion of \tie (\\leavevmode \penalty \@@M \ ).
d3641 2
a3642 1
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbsecentry{\the\toks0}}}%
d3681 1
a3681 1
                                    {\the\toks0}}}%
d3722 1
a3722 1
                                    {\the\toks0}}}%
d3934 1
a3934 1
% given time so that @@contents can be put in the document anywhere.
d3943 8
d4015 1
a4015 1
      \def\unnumbsecentry ##1##2{}
d4017 1
a4017 1
      \def\unnumbsubsecentry ##1##2{}
d4019 1
a4019 1
      \def\unnumbsubsubsecentry ##1##2{}
d4081 1
a4081 1
\def\unnumbsecentry#1#2{\dosecentry{#1}{#2}}
d4085 1
a4085 1
\def\unnumbsubsecentry#1#2{\dosubsecentry{#1}{#2}}
d4090 1
a4090 1
\def\unnumbsubsubsecentry#1#2{\dosubsubsecentry{#1}{#2}}
d4151 2
d4155 1
a4155 16
% Furthermore, these definitions must come after we define our fonts.
\newbox\dblarrowbox    \newbox\longdblarrowbox
\newbox\pushcharbox    \newbox\bullbox
\newbox\equivbox       \newbox\errorbox

%{\tentt
%\global\setbox\dblarrowbox = \hbox to 1em{\hfil$\Rightarrow$\hfil}
%\global\setbox\longdblarrowbox = \hbox to 1em{\hfil$\mapsto$\hfil}
%\global\setbox\pushcharbox = \hbox to 1em{\hfil$\dashv$\hfil}
%\global\setbox\equivbox = \hbox to 1em{\hfil$\ptexequiv$\hfil}
% Adapted from the manmac format (p.420 of TeXbook)
%\global\setbox\bullbox = \hbox to 1em{\kern.15em\vrule height .75ex width .85ex
%                                      depth .1ex\hfil}
%}

% @@point{}, @@result{}, @@expansion{}, @@print{}, @@equiv{}.
d4162 1
d4164 3
d4171 1
a4171 1

d4182 1
a4182 2

% The @@error{} command.
d4222 1
a4222 1
% Define @@lisp ... @@endlisp.
d4224 1
a4224 1
% including the definition of @@endlisp (which normally is erroneous).
d4622 15
d4733 32
a4764 18
% Actually process the body of a definition
% #1 should be the terminating control sequence, such as \Edefun.
% #2 should be the "another name" control sequence, such as \defunx.
% #3 should be the control sequence that actually processes the header,
%    such as \defunheader.

\def\defparsebody #1#2#3{\begingroup\inENV% Environment for definitionbody
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2{\begingroup\obeylines\activeparens\spacesplit#3}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup %
\catcode 61=\active % 61 is `='
\obeylines\activeparens\spacesplit#3}
d4766 1
a4766 3
% #1 is the \E... control sequence to end the definition (which we define).
% #2 is the \...x control sequence for consecutive fns (which we define).
% #3 is the control sequence to call to resume processing.
d4769 6
a4774 10
\def\defmethparsebody#1#2#3#4 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}}}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\activeparens\spacesplit{#3{#4}}}
d4777 1
a4777 3
% #1 is the \E... control sequence to end the definition (which we define).
% #2 is the \...x control sequence for consecutive fns (which we define).
% #3 is the control sequence to call to resume processing.
d4781 2
a4782 3
\def\deftypemethparsebody#1#2#3#4 #5 {\begingroup\inENV
  \medbreak
  \def#1{\endgraf\endgroup\medbreak}%
d4784 3
a4786 4
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
  \begingroup\obeylines\activeparens\spacesplit{#3{#4}{#5}}}
d4795 2
a4796 3
\def\deftypeopparsebody#1#2#3#4#5 #6 {\begingroup\inENV
  \medbreak
  \def#1{\endgraf\endgroup\medbreak}%
d4800 3
a4802 4
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
  \begingroup\obeylines\activeparens\spacesplit{#3{#5}{#6}}}
d4804 8
a4811 11
\def\defopparsebody #1#2#3#4#5 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 ##2 {\def#4{##1}%
\begingroup\obeylines\activeparens\spacesplit{#3{##2}}}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\activeparens\spacesplit{#3{#5}}}
d4816 8
d4825 5
a4829 26
\def\defvarparsebody #1#2#3{\begingroup\inENV% Environment for definitionbody
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2{\begingroup\obeylines\spacesplit#3}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup %
\catcode 61=\active %
\obeylines\spacesplit#3}

% This is used for \def{tp,vr}parsebody.  It could probably be used for
% some of the others, too, with some judicious conditionals.
%
\def\parsebodycommon#1#2#3{%
  \begingroup\inENV %
  \medbreak %
  % Define the end token that this defining construct specifies
  % so that it will exit this group.
  \def#1{\endgraf\endgroup\medbreak}%
  \def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
d4831 1
d4836 2
d4852 2
a4869 12
\def\defopvarparsebody #1#2#3#4#5 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 ##2 {\def#4{##1}%
\begingroup\obeylines\spacesplit{#3{##2}}}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\spacesplit{#3{#5}}}

d4876 1
a4876 1

a4882 2
% So much for the things common to all kinds of definitions.

d5292 1
a5292 1
     \else \errmessage{The name \the\macname\space is reserved}\fi
d6192 1
a6192 1
\def\normaldollar{$}
d6241 1
a6241 1
\def${\ifusingit{{\sl\$}}\normaldollar}
d6286 1
a6286 1
@@let$=@@normaldollar}
d6297 1
a6297 1
@@let$=@@normaldollar}
@


1.4.8.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d6 1
a6 1
\def\texinfoversion{2002-06-04.06}
d56 1
a56 1
%   dvips foo.dvi -o  # or whatever; this makes foo.ps.
d849 2
a850 1
\let\implicitmath = $%$ font-lock fix
d860 1
a860 1
  \def_{\ifnum\fam=\slfam \_\else\sb\fi}%
d863 1
a863 13
% Another complication: we want \\ (and @@\) to output a \ character.
% FYI, plain.tex uses \\ as a temporary control sequence (why?), but
% this is not advertised and we don't care.  Texinfo does not
% otherwise define @@\.
% 
% The \mathchar is class=0=ordinary, family=7=ttfam, position=5C=\.
\def\mathbackslash{\ifnum\fam=\ttfam \mathchar"075C \else\backslash \fi}
%
\def\math{%
  \tex
  \mathcode`\_="8000 \mathunderscore
  \let\\ = \mathbackslash
  \implicitmath\finishmath}
d990 1
a990 1
      \def\unnumbsecentry ##1##2##3{\advancenumber{chap##2}}
d992 1
a992 1
      \def\unnumbsubsecentry ##1##2##3##4{\advancenumber{sec##2.##3}}
d994 1
a994 1
      \def\unnumbsubsubsecentry ##1##2##3##4##5{\advancenumber{subsec##2.##3.##4}}
d1003 2
a1004 2
      \def\unnumbsecentry ##1##2##3{%
        \pdfoutline goto name{\pdfmkpgn{##3}}{##1}}
d1007 2
a1008 2
      \def\unnumbsubsecentry ##1##2##3##4{%
        \pdfoutline goto name{\pdfmkpgn{##4}}{##1}}
d1011 2
a1012 2
      \def\unnumbsubsubsecentry ##1##2##3##4##5{%
        \pdfoutline goto name{\pdfmkpgn{##5}}{##1}}
d1434 1
a1434 11
\def\codeunder{%
  % this is all so @@math{@@code{var_name}+1} can work.  In math mode, _
  % is "active" (mathcode"8000) and \normalunderscore (or \char95, etc.)
  % will therefore expand the active definition of _, which is us
  % (inside @@code that is), therefore an endless loop.
  \ifusingtt{\ifmmode
               \mathchar"075F % class 0=ordinary, family 7=ttfam, pos 0x5F=_.
             \else\normalunderscore \fi
             \discretionary{}{}{}}%
            {\_}%
}
d1437 2
d1640 2
d2399 1
a2399 2
% Ignore @@ignore, @@ifhtml, @@ifinfo, @@ifplaintext, @@ifnottex, @@html, @@menu,
% @@direntry, and @@documentdescription.
d2402 5
a2407 2
\def\ifinfo{\doignore{ifinfo}}
\def\ifplaintext{\doignore{ifplaintext}}
d2411 1
a2412 2
\def\documentdescription{\doignore{documentdescription}}
\def\documentdescriptionword{documentdescription}
d2439 6
a2444 13
  \def\ignoreword{#1}%
  \ifx\ignoreword\documentdescriptionword
    % The c kludge breaks documentdescription, since
    % `documentdescription' contains a `c'.  Means not everything will
    % be ignored inside @@documentdescription, but oh well...
  \else
    % Make the letter c a comment character so that the rest of the line
    % will be ignored. This way, the document can have (for example)
    %   @@c @@end ifinfo
    % and the @@end ifinfo will be properly ignored.
    % (We've just changed @@ to catcode 12.)
    \catcode`\c = 14
  \fi
d2446 1
a2446 1
  % And now expand the command defined above.
d2637 3
a2639 3
% @@iftex, @@ifnothtml, @@ifnotinfo, @@ifnotplaintext always succeed; we
% read the text following, through the first @@end iftex (etc.).  Make
% `@@end iftex' (etc.) valid only after an @@iftex.
a2643 1
\def\ifnotplaintext{\conditionalsucceed{ifnotplaintext}}
a2646 1
\defineunmatchedend{ifnotplaintext}
d2648 2
a2649 2
% We can't just want to start a group at @@iftex (etc.) and end it at
% @@end iftex, since then @@set commands inside the conditional have no
d2864 1
a2864 1
% expansion of \tie (\leavevmode \penalty \@@M \ ).
d3616 1
a3616 2
\edef\temp{\noexpand\writetocentry{\realbackslash unnumbsecentry%
  {\the\toks0}{\the\chapno}}}%
d3655 1
a3655 1
  {\the\toks0}{\the\chapno}{\the\secno}}}%
d3696 1
a3696 1
  {\the\toks0}{\the\chapno}{\the\secno}{\the\subsecno}}}%
d3908 1
a3908 1
% fixed time so that @@contents can be put in the document anywhere.
a3916 8
  %
  % Tell \shipout to create a page destination if we're doing pdf, which
  % will be the target of the links in the table of contents.  We can't
  % just do it on every page because the title pages are numbered 1 and
  % 2 (the page numbers aren't printed), and so are the first two pages
  % of the document.  Thus, we'd have two destinations named `1', and
  % two named `2'.
  \ifpdf \pdfmakepagedesttrue \fi
d3981 1
a3981 1
      \def\unnumbsecentry ##1##2##3{}
d3983 1
a3983 1
      \def\unnumbsubsecentry ##1##2##3##4{}
d3985 1
a3985 1
      \def\unnumbsubsubsecentry ##1##2##3##4##5{}
d4047 1
a4047 1
\def\unnumbsecentry#1#2#3{\dosecentry{#1}{#3}}
d4051 1
a4051 1
\def\unnumbsubsecentry#1#2#3#4{\dosubsecentry{#1}{#4}}
d4056 1
a4056 1
\def\unnumbsubsubsecentry#1#2#3#4#5{\dosubsubsecentry{#1}{#5}}
a4116 2
% @@point{}, @@result{}, @@expansion{}, @@print{}, @@equiv{}.
% 
d4119 16
a4134 1
%
a4140 1
% The @@error{} command.
a4141 3
% 
\newbox\errorbox
%
d4146 1
a4146 1
%
d4157 2
a4158 1
%
d4198 1
a4198 1
% Define @@lisp ... @@end lisp.
d4200 1
a4200 1
% including the definition of @@end lisp (which normally is erroneous).
a4597 15
% @@copying ... @@end copying.
% Save the text away for @@insertcopying later.
% 
\newbox\copyingbox
%
\def\copying{\begingroup
  \parindent = 0pt  % looks wrong on title page
  \def\Ecopying{\egroup\endgroup}%
  \global\setbox\copyingbox = \vbox\bgroup
}

% @@insertcopying.
% 
\def\insertcopying{\unvcopy\copyingbox}

d4694 19
a4712 1
% Common pieces to start any @@def...
d4714 2
a4715 32
% #2 is the \...x control sequence (which our caller defines).
% #3 is the control sequence to process the header, such as \defunheader.
% 
\def\parsebodycommon#1#2#3{%
  \begingroup\inENV
  % If there are two @@def commands in a row, we'll have a \nobreak,
  % which is there to keep the function description together with its
  % header.  But if there's nothing but headers, we want to allow a
  % break after all.
  \ifnum\lastpenalty = 10000 \penalty0 \fi
  \medbreak
  %
  % Define the \E... end token that this defining construct specifies
  % so that it will exit this group.
  \def#1{\endgraf\endgroup\medbreak}%
  %
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
}

% Process body of @@defun, @@deffn, @@defmac, etc.
%
\def\defparsebody#1#2#3{%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2{\begingroup\obeylines\activeparens\spacesplit#3}%
  \catcode61=\active % 61 is `='
  \begingroup\obeylines\activeparens
  \spacesplit#3%
}

% #1, #2, #3 are the common arguments (see \defparsebody).
d4718 10
a4727 6
\def\defmethparsebody#1#2#3#4 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}}}%
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#4}}%
}
d4730 3
a4732 1
% #1, #2, #3 are the common arguments (see \defparsebody).
d4736 3
a4738 2
\def\deftypemethparsebody#1#2#3#4 #5 {%
  \parsebodycommon{#1}{#2}{#3}%
d4740 4
a4743 3
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#4}{#5}}%
}
d4752 3
a4754 2
\def\deftypeopparsebody#1#2#3#4#5 #6 {%
  \parsebodycommon{#1}{#2}{#3}%
d4758 4
a4761 3
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#5}{#6}}%
}
d4763 11
a4773 8
% For @@defop.
\def\defopparsebody #1#2#3#4#5 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 {\def#4{##1}%
    \begingroup\obeylines\activeparens\spacesplit{#3{##2}}}%
  \begingroup\obeylines\activeparens
  \spacesplit{#3{#5}}%
}
d4778 16
d4795 10
a4804 4
\def\defvarparsebody #1#2#3{%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2{\begingroup\obeylines\spacesplit#3}%
  \catcode61=\active %
a4805 10
  \spacesplit#3%
}

% @@defopvar.
\def\defopvarparsebody #1#2#3#4#5 {%
  \parsebodycommon{#1}{#2}{#3}%
  \def#2##1 ##2 {\def#4{##1}%
    \begingroup\obeylines\spacesplit{#3{##2}}}%
  \begingroup\obeylines
  \spacesplit{#3{#5}}%
a4809 2
  \def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
  \begingroup\obeylines
a4823 2
  \def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
  \begingroup\obeylines
d4840 12
d4858 1
a4858 1
%
d4865 2
d5276 1
a5276 1
     \else \errmessage{Macro name \the\macname\space already defined}\fi
d6176 1
a6176 1
\def\normaldollar{$}%$ font-lock fix
d6225 1
a6225 1
\def${\ifusingit{{\sl\$}}\normaldollar}%$ font-lock fix
d6270 1
a6270 1
@@let$=@@normaldollar}%$ font-lock fix
d6281 1
a6281 1
@@let$=@@normaldollar}%$ font-lock fix
@


1.3
log
@Update texinfo.tex to version 2000-05-28.15.
@
text
@d6 1
a6 1
\def\texinfoversion{2000-05-28.15}
d8 2
a9 2
% Copyright (C) 1985, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
% Free Software Foundation, Inc.
d33 6
a38 5
%   (and all GNU mirrors, see http://www.gnu.org/order/ftp.html)
%   ftp://texinfo.org/tex/texinfo.tex
%   ftp://us.ctan.org/macros/texinfo/texinfo.tex
%   (and all CTAN mirrors, finger ctan@@us.ctan.org for a list).
%   /home/gd/gnu/doc/texinfo.tex on the GNU machines.
d41 3
a43 1
% Texinfo has a small home page at http://texinfo.org/.
d57 1
a57 1
% The extra runs of TeX get the cross-reference information correct.
d62 1
a62 1
% the existing language-specific files from ftp://ftp.gnu.org/gnu/texinfo/.
d176 10
d447 1
a447 1
  \setleading \singlespaceskip
d704 4
a707 6
% @@inmargin{TEXT} puts TEXT in the margin next to the current paragraph.

\def\inmargin#1{%
\strut\vadjust{\nobreak\kern-\strutdepth
  \vtop to \strutdepth{\baselineskip\strutdepth\vss
  \llap{\rightskip=\inmarginspacing \vbox{\noindent #1}}\null}}}
d710 42
a751 2

%\hbox{{\rm#1}}\hfil\break}}
d839 9
a847 6
% @@math means output in math mode.
% We don't use $'s directly in the definition of \math because control
% sequences like \math are expanded when the toc file is written.  Then,
% we read the toc file back, the $'s will be normal characters (as they
% should be, according to the definition of Texinfo).  So we must use a
% control sequence to switch into and out of math mode.
d849 2
a850 2
% This isn't quite enough for @@math to work properly in indices, but it
% seems unlikely it will ever be needed there.
d852 13
a864 2
\let\implicitmath = $
\def\math#1{\implicitmath #1\implicitmath}
d947 2
d950 1
a950 1
      \pdfimage
d952 1
a952 1
      \pdfximage
d956 5
a960 1
      {#1.pdf}%
d964 2
a965 2
  \def\pdfmkdest#1{\pdfdest name{#1@@} xyz}
  \def\pdfmkpgn#1{#1@@}
d977 1
a977 1
    \ifeof 1\else\bgroup
d987 1
d998 1
d1014 1
a1014 1
    \egroup\fi
d1064 1
d1092 1
a1092 1
    \startlink attr{/Border [0 0 0]} goto name{\mkpgn{#1}}
a1093 1
  \def\mkpgn#1{#1@@} 
d1110 20
a1129 3
% Use Computer Modern fonts at \magstephalf (11pt).
\newcount\mainmagstep
\mainmagstep=\magstephalf
d1159 1
d1161 4
a1164 3
\let\mainmagstep=\magstep1
\setfont\textrm\rmshape{12}{1000}
\setfont\texttt\ttshape{12}{1000}
d1166 3
a1168 2
\setfont\textrm\rmshape{10}{\mainmagstep}
\setfont\texttt\ttshape{10}{\mainmagstep}
d1199 12
a1247 14
% \setfont\ssecrm\bxshape{10}{\magstep1}    % This size an font looked bad.
% \setfont\ssecit\itshape{10}{\magstep1}    % The letters were too crowded.
% \setfont\ssecsl\slshape{10}{\magstep1}
% \setfont\ssectt\ttshape{10}{\magstep1}
% \setfont\ssecsf\sfshape{10}{\magstep1}

%\setfont\ssecrm\bfshape{10}{1315}      % Note the use of cmb rather than cmbx.
%\setfont\ssecit\itshape{10}{1315}      % Also, the size is a little larger than
%\setfont\ssecsl\slshape{10}{1315}      % being scaled magstep1.
%\setfont\ssectt\ttshape{10}{1315}
%\setfont\ssecsf\sfshape{10}{1315}

%\let\ssecbf=\ssecrm

d1264 3
a1266 3
% texinfo doesn't allow for producing subscripts and superscripts, we
% don't bother to reset \scriptfont and \scriptscriptfont (which would
% also require loading a lot more fonts).
d1269 3
a1271 3
  \textfont0 = \tenrm \textfont1 = \teni \textfont2 = \tensy
  \textfont\itfam = \tenit \textfont\slfam = \tensl \textfont\bffam = \tenbf
  \textfont\ttfam = \tentt \textfont\sffam = \tensf
a1273 1

d1284 1
a1284 1
  \resetmathfonts}
d1313 8
a1320 1
  \resetmathfonts \setleading{11pt}}
d1623 4
a1641 2
   %
   \HEADINGSon
d2403 2
a2404 1
% Ignore @@ifinfo, @@ifhtml, @@ifnottex, @@html, @@menu, and @@direntry text.
d2411 1
d2518 1
a2518 1
    % Similarly for index fonts (mostly for their use in smallexample).
d2522 4
d2701 1
a2701 1

d2705 3
a2707 1

d2714 1
a2714 1
    \noexpand\docodeindex{#1}}
a2716 1
\def\defcodeindex{\parsearg\newcodeindex}
d2720 1
a2720 10
% The \closeout helps reduce unnecessary open files; the limit on the
% Acorn RISC OS is a mere 16 files.
\def\synindex#1 #2 {%
  \expandafter\let\expandafter\synindexfoo\expandafter=\csname#2indfile\endcsname
  \expandafter\closeout\csname#1indfile\endcsname
  \expandafter\let\csname#1indfile\endcsname=\synindexfoo
  \expandafter\xdef\csname#1index\endcsname{% define \xxxindex
    \noexpand\doindex{#2}}%
}

d2723 20
a2742 6
\def\syncodeindex#1 #2 {%
  \expandafter\let\expandafter\synindexfoo\expandafter=\csname#2indfile\endcsname
  \expandafter\closeout\csname#1indfile\endcsname
  \expandafter\let\csname#1indfile\endcsname=\synindexfoo
  \expandafter\xdef\csname#1index\endcsname{% define \xxxindex
    \noexpand\docodeindex{#2}}%
d2762 4
d2768 9
d2778 1
d2791 1
d2793 3
a2795 3
\def\oe{\realbackslash oe}%
\def\ae{\realbackslash ae}%
\def\aa{\realbackslash aa}%
a2796 3
\def\AE{\realbackslash AE}%
\def\AA{\realbackslash AA}%
\def\o{\realbackslash o}%
d2798 2
d2801 2
a2802 1
\def\L{\realbackslash L}%
d2804 2
a2805 11
% Take care of texinfo commands likely to appear in an index entry.
% (Must be a way to avoid doing expansion at all, and thus not have to
% laboriously list every single command here.)
\def\@@{@@}% will be @@@@ when we switch to @@ as escape char.
% Need these in case \tex is in effect and \{ is a \delimiter again.
% But can't use \lbracecmd and \rbracecmd because texindex assumes
% braces and backslashes are used only as delimiters.  
\let\{ = \mylbrace
\let\} = \myrbrace
\def\_{{\realbackslash _}}%
\def\w{\realbackslash w }%
d2807 3
d2811 1
d2813 1
a2813 1
\def\sf{\realbackslash sf}%
d2815 7
a2821 3
\def\gtr{\realbackslash gtr}%
\def\less{\realbackslash less}%
\def\hat{\realbackslash hat}%
d2823 5
d2829 1
a2829 11
\def\result{\realbackslash result}%
\def\equiv{\realbackslash equiv}%
\def\expansion{\realbackslash expansion}%
\def\print{\realbackslash print}%
\def\error{\realbackslash error}%
\def\point{\realbackslash point}%
\def\copyright{\realbackslash copyright}%
\def\tclose##1{\realbackslash tclose {##1}}%
\def\code##1{\realbackslash code {##1}}%
\def\uref##1{\realbackslash uref {##1}}%
\def\url##1{\realbackslash url {##1}}%
d2831 4
a2834 1
\def\command##1{\realbackslash command {##1}}%
a2835 1
\def\dotless##1{\realbackslash dotless {##1}}%
d2837 3
a2839 9
\def\,##1{\realbackslash ,{##1}}%
\def\t##1{\realbackslash t {##1}}%
\def\r##1{\realbackslash r {##1}}%
\def\i##1{\realbackslash i {##1}}%
\def\b##1{\realbackslash b {##1}}%
\def\sc##1{\realbackslash sc {##1}}%
\def\cite##1{\realbackslash cite {##1}}%
\def\key##1{\realbackslash key {##1}}%
\def\file##1{\realbackslash file {##1}}%
d2841 10
a2850 4
\def\kbd##1{\realbackslash kbd {##1}}%
\def\dfn##1{\realbackslash dfn {##1}}%
\def\emph##1{\realbackslash emph {##1}}%
\def\acronym##1{\realbackslash acronym {##1}}%
d2875 4
a2878 1
% Just ignore accents.
d2894 3
a2896 3
\def\oe{oe}%
\def\ae{ae}%
\def\aa{aa}%
a2897 3
\def\AE{AE}%
\def\AA{AA}%
\def\o{o}%
d2899 2
d2902 2
a2903 1
\def\L{L}%
d2905 10
a2914 1
\let\w=\indexdummyfont
d2916 3
a2918 5
\let\r=\indexdummyfont
\let\i=\indexdummyfont
\let\b=\indexdummyfont
\let\emph=\indexdummyfont
\let\strong=\indexdummyfont
a2919 5
\let\sc=\indexdummyfont
%Don't no-op \tt, since it isn't a user-level command
% and is used in the definitions of the active chars like <, >, |...
%\let\tt=\indexdummyfont
\let\tclose=\indexdummyfont
d2921 4
a2924 2
\let\url=\indexdummyfont
\let\uref=\indexdummyfont
a2925 3
\let\acronym=\indexdummyfont
\let\command=\indexdummyfont
\let\option=\indexdummyfont
a2926 1
\let\samp=\indexdummyfont
d2929 6
d2936 1
a2936 3
\let\TeX=\indexdummytex
\let\dots=\indexdummydots
\def\@@{@@}%
d2992 2
a2993 2
        % If third (subentry) arg is present, add it to the index
        % string.  And include a space.
d2995 1
a2995 1
          \toks0 = \expandafter{\the\toks0 \space #3}%
d2998 5
a3002 4
        % Set up the complete index entry, with both the sort key
        % and the original text, including any font commands.  We write
        % three arguments to \entry to the .?? file, texindex reduces to
        % two when writing the .??s sorted result.
d3224 12
a3235 5

\def\secondary #1#2{
{\parfillskip=0in \parskip=0in
\hangindent =1in \hangafter=1
\noindent\hskip\secondaryindent\hbox{#1}\indexdotfill #2\par
a3294 1
  \advance\vsize by -\ht\partialpage
d3308 1
d3316 3
a3319 2
  % Re-output the contents of the output page -- any previous material,
  % followed by the two boxes we just split, in box0 and box2.
d3326 2
d3352 2
a3354 1
  % Called at the end of the double column material.
d3538 2
a3539 2
\edef\temp{\noexpand\writetocentry{\realbackslash chapentry{\the\toks0}%
                       {\putwordAppendix{} \appendixletter}}}%
d3972 1
d4008 1
a4008 1
% Chapter-level things, for both the long and short contents.
d4010 3
a4012 2

% See comments in \dochapentry re vbox and related settings
d4017 6
d4024 1
a4024 1
% The arg is, e.g. `Appendix A' for an appendix, or `3' for a chapter.
d4032 1
a4032 10
  % Compute width of word "Appendix", may change with language.
  \setbox0 = \hbox{\shortcontrm \putwordAppendix}%
  \shortappendixwidth = \wd0
  %
  % We typeset #1 in a box of constant width, regardless of the text of
  % #1, so the chapter titles will come out aligned.
  \setbox0 = \hbox{#1}%
  \dimen0 = \ifdim\wd0 > \shortappendixwidth \shortappendixwidth \else 0pt \fi
  %
  % This space should be plenty, since a single number is .5em, and the
d4034 1
d4037 2
a4038 2
  \advance\dimen0 by 1.1em
  \hbox to \dimen0{#1\hfil}%
d4041 1
d4097 1
a4097 1
  % typeset in cmr, so characters such as _ would come out wrong; we
d4231 11
a4241 3
\def\aboveenvbreak{{\advance\envskipamount by \parskip
\endgraf \ifdim\lastskip<\envskipamount
\removelastskip \penalty-50 \vskip\envskipamount \fi}}
d4373 1
a4373 1
  \smallfonts
d4384 1
a4384 1

d4389 1
a4389 1
  \smallfonts \rm
d4401 1
a4401 1

d4406 1
a4406 1
  \smallfonts \rm
d4424 1
d4447 152
d4926 1
a4926 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{\putwordDeftypefun}%
d4935 1
a4935 1
% \defheaderxcond#1\relax$$$
d4937 1
a4937 1
\def\defheaderxcond#1#2$$${\ifx#1\relax\else\code{#1#2} \fi}
d4947 1
a4947 1
\defname {\defheaderxcond#2\relax$$$#3}{#1}%
d4993 1
a4993 1
    \defname{\defheaderxcond#2\relax$$$#3}
d5008 1
a5008 1
    \defname{\defheaderxcond#2\relax$$$#3}{\putwordMethodon\ \code{#1}}%
d5022 1
a5022 1
    \defname{\defheaderxcond#2\relax$$$#3}
d5105 1
a5105 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{\putwordDeftypevar}%
d5116 1
a5116 1
\begingroup\defname {\defheaderxcond#2\relax$$$#3}{#1}
d5557 9
a5565 7
    \ifnum\filenamelength>0
      \startlink attr{/Border [0 0 0]}%
        goto file{\the\filename.pdf} name{#1@@}%
    \else
      \startlink attr{/Border [0 0 0]}%
        goto name{#1@@}%
    \fi
d5827 9
a5835 2
  % Hang the footnote text off the number.
  \hang
a5851 18
% Set the baselineskip to #1, and the lineskip and strut size
% correspondingly.  There is no deep meaning behind these magic numbers
% used as factors; they just match (closely enough) what Knuth defined.
%
\def\lineskipfactor{.08333}
\def\strutheightpercent{.70833}
\def\strutdepthpercent {.29167}
%
\def\setleading#1{%
  \normalbaselineskip = #1\relax
  \normallineskip = \lineskipfactor\normalbaselineskip
  \normalbaselines
  \setbox\strutbox =\hbox{%
    \vrule width0pt height\strutheightpercent\baselineskip
                    depth \strutdepthpercent \baselineskip
  }%
}

d5916 1
a5916 1
    \imagexxx #1,,,\finish
d5923 20
a5942 2
% #4 is just the usual extra ignored arg for parsing this stuff.
\def\imagexxx#1,#2,#3,#4\finish{%
d5944 1
a5944 1
    \centerline{\dopdfimage{#1}{#2}{#3}}%
d5949 1
a5949 17
    \begingroup
      \catcode`\^^M = 5 % in case we're inside an example
      % If the image is by itself, center it.
      \ifvmode
        \nobreak\bigskip
        % Usually we'll have text after the image which will insert
        % \parskip glue, so insert it here too to equalize the space
        % above and below. 
        \nobreak\vskip\parskip
        \nobreak
        \centerline{\epsfbox{#1.eps}}%
        \bigbreak
      \else
        % In the middle of a paragraph, no extra space.
        \epsfbox{#1.eps}%
      \fi
    \endgroup
d5951 3
a5953 1
}
d6022 3
a6024 2
% 4) hoffset; 5) binding offset; 6) topskip.  Then whoever calls us can
% set \parskip and call \setleading for \baselineskip.
d6045 2
d6051 9
d6063 1
a6063 1
  \setleading{13.2pt}%
d6072 1
a6072 1
  \setleading{12pt}%
d6082 1
a6082 5
  %
  \let\smalldisplay = \smalldisplayx
  \let\smallexample = \smalllispx
  \let\smallformat = \smallformatx
  \let\smalllisp = \smalllispx
a6086 1
  \setleading{12pt}%
d6088 1
d6096 20
d6119 1
a6119 1
  \setleading{13.6pt}%
d6124 2
a6132 2
  %
  \globaldefs = 0
d6146 1
a6146 1
  \setleading{13.2pt}%
@


1.2
log
@Import texinfo.tex from texinfo-4.0.
Add support for ``make pdf'' to the gdb/doc directory using pdftex.
@
text
@d6 1
a6 1
\def\texinfoversion{1999-09-25.10}
d217 3
a248 2
      \ifpdfmakepagedest \pdfmkdest{\the\pageno} \fi
      %
d895 1
a895 1
  \let\linkcolor = \Cyan
d910 2
a911 1
      % thanh's hack / proper braces in bookmarks  
d1675 4
a1678 1
% Produces Day Month Year style of output.
d1687 1
d4719 2
a4720 1
    \defname{#3}{\putwordInstanceVariableof\ \code{#1}}%
d5804 1
a5804 1
  \internalpagesizes{9.5in}{6.5in}{\hoffset}{\normaloffset}{\bindingoffset}{7mm}%
@


1.1
log
@add texinfo.tex
@
text
@a1 1
% $Id: texinfo.tex,v 2.257 1998/08/28 14:29:37 karl Exp $
d3 6
a8 1
% Copyright (C) 1985, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98
d32 5
a36 1
%   ftp://ftp.gnu.org/pub/gnu/texinfo.tex
d38 1
a38 5
%   (and all GNU mirrors, see http://www.gnu.org/order/ftp.html)
%   ftp://tug.org/tex/texinfo.tex
%   ftp://ctan.org/macros/texinfo/texinfo.tex
%   (and all CTAN mirrors, finger ctan@@ctan.org for a list).
% The texinfo.tex in the texinfo distribution itself could well be out
d40 6
a45 5
% 
% Send bug reports to bug-texinfo@@gnu.org.
% Please include a precise test case in each bug report,
% including a complete document with which we can reproduce the problem.
% 
d47 2
a48 2
% texi2dvi shell script that comes with the distribution.  For simple
% manuals, however, you can get away with:
d53 1
a53 1
%   dvips foo.dvi -o # or whatever, to process the dvi file.
d57 3
d61 1
a61 10

% Make it possible to create a .fmt file just by loading this file:
% if the underlying format is not loaded, start by loading it now.
% Added by gildea November 1993.
\expandafter\ifx\csname fmtname\endcsname\relax\input plain\fi

% This automatically updates the version number based on RCS.
\def\deftexinfoversion$#1: #2 ${\def\texinfoversion{#2}}
\deftexinfoversion$Revision: 2.257 $
\message{Loading texinfo package [Version \texinfoversion]:}
d66 1
a66 1
\everyjob{\message{[Texinfo version \texinfoversion]}\message{}
a69 1

a88 1

d97 40
a136 13
\ifx\putwordAppendix\undefined \gdef\putwordAppendix{Appendix}\fi
\ifx\putwordChapter\undefined  \gdef\putwordChapter{Chapter}\fi
\ifx\putwordfile\undefined     \gdef\putwordfile{file}\fi
\ifx\putwordInfo\undefined     \gdef\putwordInfo{Info}\fi
\ifx\putwordMethodon\undefined \gdef\putwordMethodon{Method on}\fi
\ifx\putwordon\undefined       \gdef\putwordon{on}\fi
\ifx\putwordpage\undefined     \gdef\putwordpage{page}\fi
\ifx\putwordsection\undefined  \gdef\putwordsection{section}\fi
\ifx\putwordSection\undefined  \gdef\putwordSection{Section}\fi
\ifx\putwordsee\undefined      \gdef\putwordsee{see}\fi
\ifx\putwordSee\undefined      \gdef\putwordSee{See}\fi
\ifx\putwordShortContents\undefined  \gdef\putwordShortContents{Short Contents}\fi
\ifx\putwordTableofContents\undefined\gdef\putwordTableofContents{Table of Contents}\fi
d175 1
a175 1
% 
d219 10
a228 7
        \line{\ewtop\hfil\ewtop}%
        \nointerlineskip
        \line{%
          \vbox{\moveleft\cornerthick\nstop}%
          \hfill
          \vbox{\moveright\cornerthick\nstop}%
        }%
d246 2
d253 8
a260 4
        \line{%
          \vbox{\moveleft\cornerthick\nsbot}%
          \hfill
          \vbox{\moveright\cornerthick\nsbot}%
a261 2
        \nointerlineskip
        \line{\ewbot\hfil\ewbot}%
d602 1
a602 1
  % Go into vertical mode, so we don't make a big box in the middle of a
d606 32
a637 26
  % Don't add any leading before our big empty box, but allow a page
  % break, since the best break might be right here.
  \allowbreak
  \nointerlineskip
  \vtop to #1\mil{\vfil}%
  %
  % TeX does not even consider page breaks if a penalty added to the
  % main vertical list is 10000 or more.  But in order to see if the
  % empty box we just added fits on the page, we must make it consider
  % page breaks.  On the other hand, we don't want to actually break the
  % page after the empty box.  So we use a penalty of 9999.
  %
  % There is an extremely small chance that TeX will actually break the
  % page at this \penalty, if there are no other feasible breakpoints in
  % sight.  (If the user is using lots of big @@group commands, which
  % almost-but-not-quite fill up a page, TeX will have a hard time doing
  % good page breaking, for example.)  However, I could not construct an
  % example where a page broke at this \penalty; if it happens in a real
  % document, then we can reconsider our strategy.
  \penalty9999
  %
  % Back up by the size of the box, whether we did a page break or not.
  \kern -#1\mil
  %
  % Do not allow a page break right after this kern.
  \nobreak
d658 1
a658 1
% 
d745 20
a764 2
% @@paragraphindent  is defined for the Info formatting commands only.
\let\paragraphindent=\comment
d766 15
a780 27
% Prevent errors for section commands.
% Used in @@ignore and in failing conditionals.
\def\ignoresections{%
\let\chapter=\relax
\let\unnumbered=\relax
\let\top=\relax
\let\unnumberedsec=\relax
\let\unnumberedsection=\relax
\let\unnumberedsubsec=\relax
\let\unnumberedsubsection=\relax
\let\unnumberedsubsubsec=\relax
\let\unnumberedsubsubsection=\relax
\let\section=\relax
\let\subsec=\relax
\let\subsubsec=\relax
\let\subsection=\relax
\let\subsubsection=\relax
\let\appendix=\relax
\let\appendixsec=\relax
\let\appendixsection=\relax
\let\appendixsubsec=\relax
\let\appendixsubsection=\relax
\let\appendixsubsubsec=\relax
\let\appendixsubsubsection=\relax
\let\contents=\relax
\let\smallbook=\relax
\let\titlepage=\relax
d783 1
a783 3
% Used in nested conditionals, where we have to parse the Texinfo source
% and so want to turn off most commands, in case they are used
% incorrectly.
d785 1
a785 43
\def\ignoremorecommands{%
  \let\defcodeindex = \relax
  \let\defcv = \relax
  \let\deffn = \relax
  \let\deffnx = \relax
  \let\defindex = \relax
  \let\defivar = \relax
  \let\defmac = \relax
  \let\defmethod = \relax
  \let\defop = \relax
  \let\defopt = \relax
  \let\defspec = \relax
  \let\deftp = \relax
  \let\deftypefn = \relax
  \let\deftypefun = \relax
  \let\deftypevar = \relax
  \let\deftypevr = \relax
  \let\defun = \relax
  \let\defvar = \relax
  \let\defvr = \relax
  \let\ref = \relax
  \let\xref = \relax
  \let\printindex = \relax
  \let\pxref = \relax
  \let\settitle = \relax
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\everyheading = \relax
  \let\evenheading = \relax
  \let\oddheading = \relax
  \let\everyfooting = \relax
  \let\evenfooting = \relax
  \let\oddfooting = \relax
  \let\headings = \relax
  \let\include = \relax
  \let\lowersections = \relax
  \let\down = \relax
  \let\raisesections = \relax
  \let\up = \relax
  \let\set = \relax
  \let\clear = \relax
  \let\item = \relax
}
d787 9
a795 1
% Ignore @@ignore ... @@end ignore.
d797 9
a805 1
\def\ignore{\doignore{ignore}}
d807 3
a809 1
% Ignore @@ifinfo, @@ifhtml, @@ifnottex, @@html, @@menu, and @@direntry text.
d811 2
a812 6
\def\ifinfo{\doignore{ifinfo}}
\def\ifhtml{\doignore{ifhtml}}
\def\ifnottex{\doignore{ifnottex}}
\def\html{\doignore{html}}
\def\menu{\doignore{menu}}
\def\direntry{\doignore{direntry}}
d814 21
a834 3
% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory = \comment
d836 1
a836 1
% Ignore text until a line `@@end #1'.
d838 7
a844 28
\def\doignore#1{\begingroup
  % Don't complain about control sequences we have declared \outer.
  \ignoresections
  %
  % Define a command to swallow text until we reach `@@end #1'.
  % This @@ is a catcode 12 token (that is the normal catcode of @@ in
  % this texinfo.tex file).  We change the catcode of @@ below to match.
  \long\def\doignoretext##1@@end #1{\enddoignore}%
  %
  % Make sure that spaces turn into tokens that match what \doignoretext wants.
  \catcode32 = 10
  %
  % Ignore braces, too, so mismatched braces don't cause trouble.
  \catcode`\{ = 9
  \catcode`\} = 9
  %
  % We must not have @@c interpreted as a control sequence.
  \catcode`\@@ = 12
  %
  % Make the letter c a comment character so that the rest of the line
  % will be ignored. This way, the document can have (for example)
  %   @@c @@end ifinfo
  % and the @@end ifinfo will be properly ignored.
  % (We've just changed @@ to catcode 12.)
  \catcode`\c = 14
  %
  % And now expand that command.
  \doignoretext
d847 3
a849 3
% What we do to finish off ignored text.
%
\def\enddoignore{\endgroup\ignorespaces}%
d851 127
a977 17
\newif\ifwarnedobs\warnedobsfalse
\def\obstexwarn{%
  \ifwarnedobs\relax\else
  % We need to warn folks that they may have trouble with TeX 3.0.
  % This uses \immediate\write16 rather than \message to get newlines.
    \immediate\write16{}
    \immediate\write16{***WARNING*** for users of Unix TeX 3.0!}
    \immediate\write16{This manual trips a bug in TeX version 3.0 (tex hangs).}
    \immediate\write16{If you are running another version of TeX, relax.}
    \immediate\write16{If you are running Unix TeX 3.0, kill this TeX process.}
    \immediate\write16{  Then upgrade your TeX installation if you can.}
    \immediate\write16{  (See ftp://ftp.gnu.ai.mit.edu/pub/gnu/TeX.README.)}
    \immediate\write16{If you are stuck with version 3.0, run the}
    \immediate\write16{  script ``tex3patch'' from the Texinfo distribution}
    \immediate\write16{  to use a workaround.}
    \immediate\write16{}
    \global\warnedobstrue
d979 59
a1037 1
}
d1039 4
a1042 4
% **In TeX 3.0, setting text in \nullfont hangs tex.  For a
% workaround (which requires the file ``dummy.tfm'' to be installed),
% uncomment the following line:
%%%%%\font\nullfont=dummy\let\obstexwarn=\relax
d1044 130
a1173 2
% Ignore text, except that we keep track of conditional commands for
% purposes of nesting, up to an `@@end #1' command.
d1175 4
a1178 59
\def\nestedignore#1{%
  \obstexwarn
  % We must actually expand the ignored text to look for the @@end
  % command, so that nested ignore constructs work.  Thus, we put the
  % text into a \vbox and then do nothing with the result.  To minimize
  % the change of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook: make the current font be a dummy font.
  %
  \setbox0 = \vbox\bgroup
    % Don't complain about control sequences we have declared \outer.
    \ignoresections
    %
    % Define `@@end #1' to end the box, which will in turn undefine the
    % @@end command again.
    \expandafter\def\csname E#1\endcsname{\egroup\ignorespaces}%
    %
    % We are going to be parsing Texinfo commands.  Most cause no
    % trouble when they are used incorrectly, but some commands do
    % complicated argument parsing or otherwise get confused, so we
    % undefine them.
    %
    % We can't do anything about stray @@-signs, unfortunately;
    % they'll produce `undefined control sequence' errors.
    \ignoremorecommands
    %
    % Set the current font to be \nullfont, a TeX primitive, and define
    % all the font commands to also use \nullfont.  We don't use
    % dummy.tfm, as suggested in the TeXbook, because not all sites
    % might have that installed.  Therefore, math mode will still
    % produce output, but that should be an extremely small amount of
    % stuff compared to the main input.
    %
    \nullfont
    \let\tenrm = \nullfont  \let\tenit = \nullfont  \let\tensl = \nullfont
    \let\tenbf = \nullfont  \let\tentt = \nullfont  \let\smallcaps = \nullfont
    \let\tensf = \nullfont
    % Similarly for index fonts (mostly for their use in
    % smallexample)
    \let\indrm = \nullfont  \let\indit = \nullfont  \let\indsl = \nullfont
    \let\indbf = \nullfont  \let\indtt = \nullfont  \let\indsc = \nullfont
    \let\indsf = \nullfont
    %
    % Don't complain when characters are missing from the fonts.
    \tracinglostchars = 0
    %
    % Don't bother to do space factor calculations.
    \frenchspacing
    %
    % Don't report underfull hboxes.
    \hbadness = 10000
    %
    % Do minimal line-breaking.
    \pretolerance = 10000
    %
    % Do not execute instructions in @@tex
    \def\tex{\doignore{tex}}%
    % Do not execute macro definitions.
    % `c' is a comment character, so the word `macro' will get cut off.
    \def\macro{\doignore{ma}}%
d1181 43
a1223 2
% @@set VAR sets the variable VAR to an empty value.
% @@set VAR REST-OF-LINE sets VAR to the value REST-OF-LINE.
d1225 16
a1240 21
% Since we want to separate VAR from REST-OF-LINE (which might be
% empty), we can't just use \parsearg; we have to insert a space of our
% own to delimit the rest of the line, and then take it out again if we
% didn't need it.  Make sure the catcode of space is correct to avoid
% losing inside @@example, for instance.
%
\def\set{\begingroup\catcode` =10
  \catcode`\-=12 \catcode`\_=12 % Allow - and _ in VAR.
  \parsearg\setxxx}
\def\setxxx#1{\setyyy#1 \endsetyyy}
\def\setyyy#1 #2\endsetyyy{%
  \def\temp{#2}%
  \ifx\temp\empty \global\expandafter\let\csname SET#1\endcsname = \empty
  \else \setzzz{#1}#2\endsetzzz % Remove the trailing space \setxxx inserted.
  \fi
  \endgroup
}
% Can't use \xdef to pre-expand #2 and save some time, since \temp or
% \next or other control sequences that we've defined might get us into
% an infinite loop. Consider `@@set foo @@cite{bar}'.
\def\setzzz#1#2 \endsetzzz{\expandafter\gdef\csname SET#1\endcsname{#2}}
d1242 5
a1246 4
% @@clear VAR clears (i.e., unsets) the variable VAR.
%
\def\clear{\parsearg\clearxxx}
\def\clearxxx#1{\global\expandafter\let\csname SET#1\endcsname=\relax}
d1248 5
a1252 14
% @@value{foo} gets the text saved in variable foo.
%
{
  \catcode`\_ = \active
  %
  % We might end up with active _ or - characters in the argument if
  % we're called from @@code, as @@code{@@value{foo-bar_}}.  So \let any
  % such active characters to their normal equivalents.
  \gdef\value{\begingroup
    \catcode`\-=12 \catcode`\_=12
    \indexbreaks \let_\normalunderscore
    \valuexxx}
}
\def\valuexxx#1{\expandablevalue{#1}\endgroup}
d1254 2
a1255 16
% We have this subroutine so that we can handle at least some @@value's
% properly in indexes (we \let\value to this in \indexdummies).  Ones
% whose names contain - or _ still won't work, but we can't do anything
% about that.  The command has to be fully expandable, since the result
% winds up in the index file.  This means that if the variable's value
% contains other Texinfo commands, it's almost certain it will fail
% (although perhaps we could fix that with sufficient work to do a
% one-level expansion on the result, instead of complete).
% 
\def\expandablevalue#1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    {[No value for ``#1'']v}%
  \else
    \csname SET#1\endcsname
  \fi
}
d1257 3
a1259 2
% @@ifset VAR ... @@end ifset reads the `...' iff VAR has been defined
% with @@set.
d1261 2
a1262 11
\def\ifset{\parsearg\ifsetxxx}
\def\ifsetxxx #1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \expandafter\ifsetfail
  \else
    \expandafter\ifsetsucceed
  \fi
}
\def\ifsetsucceed{\conditionalsucceed{ifset}}
\def\ifsetfail{\nestedignore{ifset}}
\defineunmatchedend{ifset}
d1264 3
a1266 10
% @@ifclear VAR ... @@end ifclear reads the `...' iff VAR has never been
% defined with @@set, or has been undefined with @@clear.
%
\def\ifclear{\parsearg\ifclearxxx}
\def\ifclearxxx #1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \expandafter\ifclearsucceed
  \else
    \expandafter\ifclearfail
  \fi
d1268 13
a1280 3
\def\ifclearsucceed{\conditionalsucceed{ifclear}}
\def\ifclearfail{\nestedignore{ifclear}}
\defineunmatchedend{ifclear}
d1282 3
a1284 10
% @@iftex, @@ifnothtml, @@ifnotinfo always succeed; we read the text
% following, through the first @@end iftex (etc.).  Make `@@end iftex'
% (etc.) valid only after an @@iftex.
%
\def\iftex{\conditionalsucceed{iftex}}
\def\ifnothtml{\conditionalsucceed{ifnothtml}}
\def\ifnotinfo{\conditionalsucceed{ifnotinfo}}
\defineunmatchedend{iftex}
\defineunmatchedend{ifnothtml}
\defineunmatchedend{ifnotinfo}
d1286 15
a1300 11
% We can't just want to start a group at @@iftex (for example) and end it
% at @@end iftex, since then @@set commands inside the conditional have no
% effect (they'd get reverted at the end of the group).  So we must
% define \Eiftex to redefine itself to be its previous value.  (We can't
% just define it to fail again with an ``unmatched end'' error, since
% the @@ifset might be nested.)
%
\def\conditionalsucceed#1{%
  \edef\temp{%
    % Remember the current value of \E#1.
    \let\nece{prevE#1} = \nece{E#1}%
d1302 3
a1304 2
    % At the `@@end #1', redefine \E#1 to be its previous value.
    \def\nece{E#1}{\let\nece{E#1} = \nece{prevE#1}}%
d1306 1
a1306 1
  \temp
d1309 3
a1311 4
% We need to expand lots of \csname's, but we don't want to expand the
% control sequences after we've constructed them.
%
\def\nece#1{\expandafter\noexpand\csname#1\endcsname}
d1313 19
a1331 3
% @@asis just yields its argument.  Used with @@table, for example.
%
\def\asis#1{#1}
d1333 4
a1336 12
% @@math means output in math mode.
% We don't use $'s directly in the definition of \math because control
% sequences like \math are expanded when the toc file is written.  Then,
% we read the toc file back, the $'s will be normal characters (as they
% should be, according to the definition of Texinfo).  So we must use a
% control sequence to switch into and out of math mode.
%
% This isn't quite enough for @@math to work properly in indices, but it
% seems unlikely it will ever be needed there.
%
\let\implicitmath = $
\def\math#1{\implicitmath #1\implicitmath}
d1338 1
a1338 3
% @@bullet and @@minus need the same treatment as @@math, just above.
\def\bullet{\implicitmath\ptexbullet\implicitmath}
\def\minus{\implicitmath-\implicitmath}
d1340 2
a1341 2
% @@refill is a no-op.
\let\refill=\relax
d1343 17
a1359 6
% If working on a large document in chapters, it is convenient to
% be able to disable indexing, cross-referencing, and contents, for test runs.
% This is done with @@novalidate (before @@setfilename).
%
\newif\iflinks \linkstrue % by default we want the aux files.
\let\novalidate = \linksfalse
d1361 3
a1363 21
% @@setfilename is done at the beginning of every texinfo file.
% So open here the files we need to have open while reading the input.
% This makes it possible to make a .fmt file for texinfo.
\def\setfilename{%
   \iflinks 
     \readauxfile
   \fi % \openindices needs to do some work in any case.
   \openindices
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
   \global\let\setfilename=\comment % Ignore extra @@setfilename cmds.
   %
   % If texinfo.cnf is present on the system, read it.
   % Useful for site-wide @@afourpaper, etc.
   % Just to be on the safe side, close the input stream before the \input.
   \openin 1 texinfo.cnf
   \ifeof1 \let\temp=\relax \else \def\temp{\input texinfo.cnf }\fi
   \closein1
   \temp
   %
   \comment % Ignore the actual filename.
}
d1365 5
a1369 10
% Called from \setfilename.
% 
\def\openindices{%
  \newindex{cp}%
  \newcodeindex{fn}%
  \newcodeindex{vr}%
  \newcodeindex{tp}%
  \newcodeindex{ky}%
  \newcodeindex{pg}%
}
d1371 4
a1374 2
% @@bye.
\outer\def\bye{\pagealignmacro\tracingstats=1\ptexend}
d1376 27
d1404 16
a1419 2
\message{fonts,}
% Font-change commands.
d1421 6
a1426 5
% Texinfo sort of supports the sans serif font style, which plain TeX does not.
% So we set up a \sf analogous to plain's \rm, etc.
\newfam\sffam
\def\sf{\fam=\sffam \tensf}
\let\li = \sf % Sometimes we call it \li, not \sf.
d1428 4
a1431 2
% We don't need math for this one.
\def\ttsl{\tenttsl}
d1433 1
a1433 3
% Use Computer Modern fonts at \magstephalf (11pt).
\newcount\mainmagstep
\mainmagstep=\magstephalf
d1435 4
a1438 4
% Set the font macro #1 to the font named #2, adding on the
% specified font prefix (normally `cm').
% #3 is the font's design size, #4 is a scale factor
\def\setfont#1#2#3#4{\font#1=\fontprefix#2#3 scaled #4}
d1440 4
a1443 22
% Use cm as the default font prefix.
% To specify the font prefix, you must define \fontprefix
% before you read in texinfo.tex.
\ifx\fontprefix\undefined
\def\fontprefix{cm}
\fi
% Support font families that don't use the same naming scheme as CM.
\def\rmshape{r}
\def\rmbshape{bx}               %where the normal face is bold
\def\bfshape{b}
\def\bxshape{bx}
\def\ttshape{tt}
\def\ttbshape{tt}
\def\ttslshape{sltt}
\def\itshape{ti}
\def\itbshape{bxti}
\def\slshape{sl}
\def\slbshape{bxsl}
\def\sfshape{ss}
\def\sfbshape{ss}
\def\scshape{csc}
\def\scbshape{csc}
d1445 2
a1446 19
\ifx\bigger\relax
\let\mainmagstep=\magstep1
\setfont\textrm\rmshape{12}{1000}
\setfont\texttt\ttshape{12}{1000}
\else
\setfont\textrm\rmshape{10}{\mainmagstep}
\setfont\texttt\ttshape{10}{\mainmagstep}
\fi
% Instead of cmb10, you many want to use cmbx10.
% cmbx10 is a prettier font on its own, but cmb10
% looks better when embedded in a line with cmr10.
\setfont\textbf\bfshape{10}{\mainmagstep}
\setfont\textit\itshape{10}{\mainmagstep}
\setfont\textsl\slshape{10}{\mainmagstep}
\setfont\textsf\sfshape{10}{\mainmagstep}
\setfont\textsc\scshape{10}{\mainmagstep}
\setfont\textttsl\ttslshape{10}{\mainmagstep}
\font\texti=cmmi10 scaled \mainmagstep
\font\textsy=cmsy10 scaled \mainmagstep
d1448 2
a1449 4
% A few fonts for @@defun, etc.
\setfont\defbf\bxshape{10}{\magstep1} %was 1314
\setfont\deftt\ttshape{10}{\magstep1}
\def\df{\let\tentt=\deftt \let\tenbf = \defbf \bf}
a1450 17
% Fonts for indices and small examples (9pt).
% We actually use the slanted font rather than the italic,
% because texinfo normally uses the slanted fonts for that.
% Do not make many font distinctions in general in the index, since they
% aren't very useful.
\setfont\ninett\ttshape{9}{1000}
\setfont\ninettsl\ttslshape{10}{900}
\setfont\indrm\rmshape{9}{1000}
\setfont\indit\itshape{9}{1000}
\setfont\indsl\slshape{9}{1000}
\let\indtt=\ninett
\let\indttsl=\ninettsl
\let\indsf=\indrm
\let\indbf=\indrm
\setfont\indsc\scshape{10}{900}
\font\indi=cmmi9
\font\indsy=cmsy9
d1452 1
a1452 12
% Fonts for title page:
\setfont\titlerm\rmbshape{12}{\magstep3}
\setfont\titleit\itbshape{10}{\magstep4}
\setfont\titlesl\slbshape{10}{\magstep4}
\setfont\titlett\ttbshape{12}{\magstep3}
\setfont\titlettsl\ttslshape{10}{\magstep4}
\setfont\titlesf\sfbshape{17}{\magstep1}
\let\titlebf=\titlerm
\setfont\titlesc\scbshape{10}{\magstep4}
\font\titlei=cmmi12 scaled \magstep3
\font\titlesy=cmsy10 scaled \magstep4
\def\authorrm{\secrm}
d1454 2
a1455 11
% Chapter (and unnumbered) fonts (17.28pt).
\setfont\chaprm\rmbshape{12}{\magstep2}
\setfont\chapit\itbshape{10}{\magstep3}
\setfont\chapsl\slbshape{10}{\magstep3}
\setfont\chaptt\ttbshape{12}{\magstep2}
\setfont\chapttsl\ttslshape{10}{\magstep3}
\setfont\chapsf\sfbshape{17}{1000}
\let\chapbf=\chaprm
\setfont\chapsc\scbshape{10}{\magstep3}
\font\chapi=cmmi12 scaled \magstep2
\font\chapsy=cmsy10 scaled \magstep3
d1457 3
a1459 11
% Section fonts (14.4pt).
\setfont\secrm\rmbshape{12}{\magstep1}
\setfont\secit\itbshape{10}{\magstep2}
\setfont\secsl\slbshape{10}{\magstep2}
\setfont\sectt\ttbshape{12}{\magstep1}
\setfont\secttsl\ttslshape{10}{\magstep2}
\setfont\secsf\sfbshape{12}{\magstep1}
\let\secbf\secrm
\setfont\secsc\scbshape{10}{\magstep2}
\font\seci=cmmi12 scaled \magstep1
\font\secsy=cmsy10 scaled \magstep2
d1461 7
a1467 5
% \setfont\ssecrm\bxshape{10}{\magstep1}    % This size an font looked bad.
% \setfont\ssecit\itshape{10}{\magstep1}    % The letters were too crowded.
% \setfont\ssecsl\slshape{10}{\magstep1}
% \setfont\ssectt\ttshape{10}{\magstep1}
% \setfont\ssecsf\sfshape{10}{\magstep1}
d1469 3
a1471 5
%\setfont\ssecrm\bfshape{10}{1315}      % Note the use of cmb rather than cmbx.
%\setfont\ssecit\itshape{10}{1315}      % Also, the size is a little larger than
%\setfont\ssecsl\slshape{10}{1315}      % being scaled magstep1.
%\setfont\ssectt\ttshape{10}{1315}
%\setfont\ssecsf\sfshape{10}{1315}
d1473 39
a1511 1
%\let\ssecbf=\ssecrm
d1513 29
a1541 13
% Subsection fonts (13.15pt).
\setfont\ssecrm\rmbshape{12}{\magstephalf}
\setfont\ssecit\itbshape{10}{1315}
\setfont\ssecsl\slbshape{10}{1315}
\setfont\ssectt\ttbshape{12}{\magstephalf}
\setfont\ssecttsl\ttslshape{10}{1315}
\setfont\ssecsf\sfbshape{12}{\magstephalf}
\let\ssecbf\ssecrm
\setfont\ssecsc\scbshape{10}{\magstep1}
\font\sseci=cmmi12 scaled \magstephalf
\font\ssecsy=cmsy10 scaled 1315
% The smallcaps and symbol fonts should actually be scaled \magstep1.5,
% but that is not a standard magnification.
d1543 4
a1546 10
% In order for the font changes to affect most math symbols and letters,
% we have to define the \textfont of the standard families.  Since
% texinfo doesn't allow for producing subscripts and superscripts, we
% don't bother to reset \scriptfont and \scriptscriptfont (which would
% also require loading a lot more fonts).
%
\def\resetmathfonts{%
  \textfont0 = \tenrm \textfont1 = \teni \textfont2 = \tensy
  \textfont\itfam = \tenit \textfont\slfam = \tensl \textfont\bffam = \tenbf
  \textfont\ttfam = \tentt \textfont\sffam = \tensf
d1549 15
d1565 6
a1570 39
% The font-changing commands redefine the meanings of \tenSTYLE, instead
% of just \STYLE.  We do this so that font changes will continue to work
% in math mode, where it is the current \fam that is relevant in most
% cases, not the current font.  Plain TeX does \def\bf{\fam=\bffam
% \tenbf}, for example.  By redefining \tenbf, we obviate the need to
% redefine \bf itself.
\def\textfonts{%
  \let\tenrm=\textrm \let\tenit=\textit \let\tensl=\textsl
  \let\tenbf=\textbf \let\tentt=\texttt \let\smallcaps=\textsc
  \let\tensf=\textsf \let\teni=\texti \let\tensy=\textsy \let\tenttsl=\textttsl
  \resetmathfonts}
\def\titlefonts{%
  \let\tenrm=\titlerm \let\tenit=\titleit \let\tensl=\titlesl
  \let\tenbf=\titlebf \let\tentt=\titlett \let\smallcaps=\titlesc
  \let\tensf=\titlesf \let\teni=\titlei \let\tensy=\titlesy
  \let\tenttsl=\titlettsl
  \resetmathfonts \setleading{25pt}}
\def\titlefont#1{{\titlefonts\rm #1}}
\def\chapfonts{%
  \let\tenrm=\chaprm \let\tenit=\chapit \let\tensl=\chapsl
  \let\tenbf=\chapbf \let\tentt=\chaptt \let\smallcaps=\chapsc
  \let\tensf=\chapsf \let\teni=\chapi \let\tensy=\chapsy \let\tenttsl=\chapttsl
  \resetmathfonts \setleading{19pt}}
\def\secfonts{%
  \let\tenrm=\secrm \let\tenit=\secit \let\tensl=\secsl
  \let\tenbf=\secbf \let\tentt=\sectt \let\smallcaps=\secsc
  \let\tensf=\secsf \let\teni=\seci \let\tensy=\secsy \let\tenttsl=\secttsl
  \resetmathfonts \setleading{16pt}}
\def\subsecfonts{%
  \let\tenrm=\ssecrm \let\tenit=\ssecit \let\tensl=\ssecsl
  \let\tenbf=\ssecbf \let\tentt=\ssectt \let\smallcaps=\ssecsc
  \let\tensf=\ssecsf \let\teni=\sseci \let\tensy=\ssecsy \let\tenttsl=\ssecttsl
  \resetmathfonts \setleading{15pt}}
\let\subsubsecfonts = \subsecfonts % Maybe make sssec fonts scaled magstephalf?
\def\indexfonts{%
  \let\tenrm=\indrm \let\tenit=\indit \let\tensl=\indsl
  \let\tenbf=\indbf \let\tentt=\indtt \let\smallcaps=\indsc
  \let\tensf=\indsf \let\teni=\indi \let\tensy=\indsy \let\tenttsl=\indttsl
  \resetmathfonts \setleading{12pt}}
d1572 3
a1574 3
% Set up the default fonts, so we can use them for creating boxes.
%
\textfonts
d1576 3
a1578 3
% Define these so they can be easily changed for other fonts.
\def\angleleft{$\langle$}
\def\angleright{$\rangle$}
d1580 1
a1580 2
% Count depth in font-changes, for error checks
\newcount\fontdepth \fontdepth=0
d1582 3
a1584 4
% Fonts for short table of contents.
\setfont\shortcontrm\rmshape{12}{1000}
\setfont\shortcontbf\bxshape{12}{1000}
\setfont\shortcontsl\slshape{12}{1000}
d1586 3
a1588 2
%% Add scribe-like font environments, plus @@l for inline lisp (usually sans
%% serif) and @@ii for TeX italic
d1590 1
a1590 5
% \smartitalic{ARG} outputs arg in italics, followed by an italic correction
% unless the following character is such as not to need one.
\def\smartitalicx{\ifx\next,\else\ifx\next-\else\ifx\next.\else\/\fi\fi\fi}
\def\smartslanted#1{{\sl #1}\futurelet\next\smartitalicx}
\def\smartitalic#1{{\it #1}\futurelet\next\smartitalicx}
d1592 3
a1594 5
\let\i=\smartitalic
\let\var=\smartslanted
\let\dfn=\smartslanted
\let\emph=\smartitalic
\let\cite=\smartslanted
d1596 9
a1604 2
\def\b#1{{\bf #1}}
\let\strong=\b
d1606 1
a1606 3
% We can't just use \exhyphenpenalty, because that only has effect at
% the end of a paragraph.  Restore normal hyphenation at the end of the
% group within which \nohyphenation is presumably called.
d1608 1
a1608 2
\def\nohyphenation{\hyphenchar\font = -1  \aftergroup\restorehyphenation}
\def\restorehyphenation{\hyphenchar\font = `- }
d1610 9
a1618 17
\def\t#1{%
  {\tt \rawbackslash \frenchspacing #1}%
  \null
}
\let\ttfont=\t
\def\samp#1{`\tclose{#1}'\null}
\setfont\smallrm\rmshape{8}{1000}
\font\smallsy=cmsy9
\def\key#1{{\smallrm\textfont2=\smallsy \leavevmode\hbox{%
  \raise0.4pt\hbox{\angleleft}\kern-.08em\vtop{%
    \vbox{\hrule\kern-0.4pt
     \hbox{\raise0.4pt\hbox{\vphantom{\angleleft}}#1}}%
    \kern-0.4pt\hrule}%
  \kern-.06em\raise0.4pt\hbox{\angleright}}}}
% The old definition, with no lozenge:
%\def\key #1{{\ttsl \nohyphenation \uppercase{#1}}\null}
\def\ctrl #1{{\tt \rawbackslash \hat}#1}
d1620 1
a1620 3
% @@file, @@option are the same as @@samp.
\let\file=\samp
\let\option=\samp
d1622 16
a1637 21
% @@code is a modification of @@t,
% which makes spaces the same size as normal in the surrounding text.
\def\tclose#1{%
  {%
    % Change normal interword space to be same as for the current font.
    \spaceskip = \fontdimen2\font
    %
    % Switch to typewriter.
    \tt
    %
    % But `\ ' produces the large typewriter interword space.
    \def\ {{\spaceskip = 0pt{} }}%
    %
    % Turn off hyphenation.
    \nohyphenation
    %
    \rawbackslash
    \frenchspacing
    #1%
  }%
  \null
d1639 1
d1641 11
a1651 3
% We *must* turn on hyphenation at `-' and `_' in \code.
% Otherwise, it is too hard to avoid overfull hboxes
% in the Emacs manual, the Library manual, etc.
d1653 8
a1660 18
% Unfortunately, TeX uses one parameter (\hyphenchar) to control
% both hyphenation at - and hyphenation within words.
% We must therefore turn them both off (\tclose does that)
% and arrange explicitly to hyphenate at a dash.
%  -- rms.
{
  \catcode`\-=\active
  \catcode`\_=\active
  %
  \global\def\code{\begingroup
    \catcode`\-=\active \let-\codedash
    \catcode`\_=\active \let_\codeunder
    \codex
  }
  %
  % If we end up with any active - characters when handling the index,
  % just treat them as a normal -.
  \global\def\indexbreaks{\catcode`\-=\active \let-\realdash}
d1663 8
a1670 4
\def\realdash{-}
\def\codedash{-\discretionary{}{}{}}
\def\codeunder{\ifusingtt{\normalunderscore\discretionary{}{}{}}{\_}}
\def\codex #1{\tclose{#1}\endgroup}
d1672 10
a1681 1
%\let\exp=\tclose  %Was temporary
d1683 5
a1687 20
% @@kbd is like @@code, except that if the argument is just one @@key command,
% then @@kbd has no effect.

% @@kbdinputstyle -- arg is `distinct' (@@kbd uses slanted tty font always),
%   `example' (@@kbd uses ttsl only inside of @@example and friends),
%   or `code' (@@kbd uses normal tty font always).
\def\kbdinputstyle{\parsearg\kbdinputstylexxx}
\def\kbdinputstylexxx#1{%
  \def\arg{#1}%
  \ifx\arg\worddistinct
    \gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\ttsl}%
  \else\ifx\arg\wordexample
    \gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\tt}%
  \else\ifx\arg\wordcode
    \gdef\kbdexamplefont{\tt}\gdef\kbdfont{\tt}%
  \fi\fi\fi
}
\def\worddistinct{distinct}
\def\wordexample{example}
\def\wordcode{code}
a1688 3
% Default is kbdinputdistinct.  (Too much of a hassle to call the macro,
% the catcodes are wrong for parsearg to work.)
\gdef\kbdexamplefont{\ttsl}\gdef\kbdfont{\ttsl}
d1690 2
a1691 5
\def\xkey{\key}
\def\kbdfoo#1#2#3\par{\def\one{#1}\def\three{#3}\def\threex{??}%
\ifx\one\xkey\ifx\threex\three \key{#2}%
\else{\tclose{\kbdfont\look}}\fi
\else{\tclose{\kbdfont\look}}\fi}
d1693 6
a1698 4
% For @@url, @@env, @@command quotes seem unnecessary, so use \code.
\let\url=\code
\let\env=\code
\let\command=\code
d1700 2
a1701 13
% @@uref (abbreviation for `urlref') takes an optional second argument
% specifying the text to display.  First (mandatory) arg is the url.
% Perhaps eventually put in a hypertex \special here.
% 
\def\uref#1{\urefxxx #1,,\finish}
\def\urefxxx#1,#2,#3\finish{%
  \setbox0 = \hbox{\ignorespaces #2}%
  \ifdim\wd0 > 0pt
    \unhbox0\ (\code{#1})%
  \else
    \code{#1}%
  \fi
}
d1703 4
a1706 4
% rms does not like the angle brackets --karl, 17may97.
% So now @@email is just like @@uref.
%\def\email#1{\angleleft{\tt #1}\angleright}
\let\email=\uref
d1708 1
a1708 6
% Check if we are currently using a typewriter font.  Since all the
% Computer Modern typewriter fonts have zero interword stretch (and
% shrink), and it is reasonable to expect all typewriter fonts to have
% this property, we can check that font parameter.
%
\def\ifmonospace{\ifdim\fontdimen3\font=0pt }
d1710 1
a1710 4
% Typeset a dimension, e.g., `in' or `pt'.  The only reason for the
% argument is to make the input look right: @@dmn{pt} instead of @@dmn{}pt.
%
\def\dmn#1{\thinspace #1}
d1712 2
a1713 1
\def\kbd#1{\def\look{#1}\expandafter\kbdfoo\look??\par}
d1715 2
a1716 4
% @@l was never documented to mean ``switch to the Lisp font'',
% and it is not used as such in any manual I can find.  We need it for
% Polish suppressed-l.  --karl, 22sep96.
%\def\l#1{{\li #1}\null}
d1718 2
a1719 4
% Explicit font changes: @@r, @@sc, undocumented @@ii.
\def\r#1{{\rm #1}}              % roman font
\def\sc#1{{\smallcaps#1}}       % smallcaps font
\def\ii#1{{\it #1}}             % italic font
d1721 2
a1722 2
% @@acronym downcases the argument and prints in smallcaps.
\def\acronym#1{{\smallcaps \lowercase{#1}}}
d1724 2
a1725 2
% @@pounds{} is a sterling sign.
\def\pounds{{\it\$}}
d1727 48
d1776 6
a1781 1
\message{page headings,}
d1783 2
a1784 2
\newskip\titlepagetopglue \titlepagetopglue = 1.5in
\newskip\titlepagebottomglue \titlepagebottomglue = 2pc
d1786 5
a1790 3
% First the title page.  Must do @@settitle before @@titlepage.
\newif\ifseenauthor
\newif\iffinishedtitlepage
d1792 6
a1797 7
% Do an implicit @@contents or @@shortcontents after @@end titlepage if the
% user says @@contentsaftertitlepage or @@shortcontentsaftertitlepage.
% 
\newif\ifsetcontentsaftertitlepage
 \let\setcontentsaftertitlepage = \setcontentsaftertitlepagetrue
\newif\ifsetshortcontentsaftertitlepage
 \let\setshortcontentsaftertitlepage = \setshortcontentsaftertitlepagetrue
d1799 6
a1804 3
\def\shorttitlepage{\parsearg\shorttitlepagezzz}
\def\shorttitlepagezzz #1{\begingroup\hbox{}\vskip 1.5in \chaprm \centerline{#1}%
        \endgroup\page\hbox{}\page}
d1806 3
a1808 39
\def\titlepage{\begingroup \parindent=0pt \textfonts
   \let\subtitlerm=\tenrm
   \def\subtitlefont{\subtitlerm \normalbaselineskip = 13pt \normalbaselines}%
   %
   \def\authorfont{\authorrm \normalbaselineskip = 16pt \normalbaselines}%
   %
   % Leave some space at the very top of the page.
   \vglue\titlepagetopglue
   %
   % Now you can print the title using @@title.
   \def\title{\parsearg\titlezzz}%
   \def\titlezzz##1{\leftline{\titlefonts\rm ##1}
                    % print a rule at the page bottom also.
                    \finishedtitlepagefalse
                    \vskip4pt \hrule height 4pt width \hsize \vskip4pt}%
   % No rule at page bottom unless we print one at the top with @@title.
   \finishedtitlepagetrue
   %
   % Now you can put text using @@subtitle.
   \def\subtitle{\parsearg\subtitlezzz}%
   \def\subtitlezzz##1{{\subtitlefont \rightline{##1}}}%
   %
   % @@author should come last, but may come many times.
   \def\author{\parsearg\authorzzz}%
   \def\authorzzz##1{\ifseenauthor\else\vskip 0pt plus 1filll\seenauthortrue\fi
      {\authorfont \leftline{##1}}}%
   %
   % Most title ``pages'' are actually two pages long, with space
   % at the top of the second.  We don't want the ragged left on the second.
   \let\oldpage = \page
   \def\page{%
      \iffinishedtitlepage\else
         \finishtitlepage
      \fi
      \oldpage
      \let\page = \oldpage
      \hbox{}}%
%   \def\page{\oldpage \hbox{}}
}
d1810 3
a1812 27
\def\Etitlepage{%
   \iffinishedtitlepage\else
      \finishtitlepage
   \fi
   % It is important to do the page break before ending the group,
   % because the headline and footline are only empty inside the group.
   % If we use the new definition of \page, we always get a blank page
   % after the title page, which we certainly don't want.
   \oldpage
   \endgroup
   %
   % If they want short, they certainly want long too.
   \ifsetshortcontentsaftertitlepage
     \shortcontents
     \contents
     \global\let\shortcontents = \relax
     \global\let\contents = \relax
   \fi
   %
   \ifsetcontentsaftertitlepage
     \contents
     \global\let\contents = \relax
     \global\let\shortcontents = \relax
   \fi
   %
   \HEADINGSon
}
d1814 23
a1836 4
\def\finishtitlepage{%
   \vskip4pt \hrule height 2pt width \hsize
   \vskip\titlepagebottomglue
   \finishedtitlepagetrue
d1839 1
a1839 1
%%% Set up page headings and footings.
d1841 1
a1841 1
\let\thispage=\folio
d1843 1
a1843 4
\newtoks\evenheadline    % headline on even pages
\newtoks\oddheadline     % headline on odd pages
\newtoks\evenfootline    % footline on even pages
\newtoks\oddfootline     % footline on odd pages
d1845 4
a1848 6
% Now make Tex use those variables
\headline={{\textfonts\rm \ifodd\pageno \the\oddheadline
                            \else \the\evenheadline \fi}}
\footline={{\textfonts\rm \ifodd\pageno \the\oddfootline
                            \else \the\evenfootline \fi}\HEADINGShook}
\let\HEADINGShook=\relax
d1850 12
a1861 6
% Commands to set those variables.
% For example, this is what  @@headings on  does
% @@evenheading @@thistitle|@@thispage|@@thischapter
% @@oddheading @@thischapter|@@thispage|@@thistitle
% @@evenfooting @@thisfile||
% @@oddfooting ||@@thisfile
d1863 4
a1866 3
\def\evenheading{\parsearg\evenheadingxxx}
\def\oddheading{\parsearg\oddheadingxxx}
\def\everyheading{\parsearg\everyheadingxxx}
d1868 4
a1871 3
\def\evenfooting{\parsearg\evenfootingxxx}
\def\oddfooting{\parsearg\oddfootingxxx}
\def\everyfooting{\parsearg\everyfootingxxx}
d1873 12
a1884 19
{\catcode`\@@=0 %

\gdef\evenheadingxxx #1{\evenheadingyyy #1@@|@@|@@|@@|\finish}
\gdef\evenheadingyyy #1@@|#2@@|#3@@|#4\finish{%
\global\evenheadline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\gdef\oddheadingxxx #1{\oddheadingyyy #1@@|@@|@@|@@|\finish}
\gdef\oddheadingyyy #1@@|#2@@|#3@@|#4\finish{%
\global\oddheadline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\gdef\everyheadingxxx#1{\oddheadingxxx{#1}\evenheadingxxx{#1}}%

\gdef\evenfootingxxx #1{\evenfootingyyy #1@@|@@|@@|@@|\finish}
\gdef\evenfootingyyy #1@@|#2@@|#3@@|#4\finish{%
\global\evenfootline={\rlap{\centerline{#2}}\line{#1\hfil#3}}}

\gdef\oddfootingxxx #1{\oddfootingyyy #1@@|@@|@@|@@|\finish}
\gdef\oddfootingyyy #1@@|#2@@|#3@@|#4\finish{%
  \global\oddfootline = {\rlap{\centerline{#2}}\line{#1\hfil#3}}%
d1886 30
a1915 4
  % Leave some space for the footline.  Hopefully ok to assume
  % @@evenfooting will not be used by itself.
  \global\advance\pageheight by -\baselineskip
  \global\advance\vsize by -\baselineskip
d1918 2
a1919 1
\gdef\everyfootingxxx#1{\oddfootingxxx{#1}\evenfootingxxx{#1}}
d1921 3
a1923 30
}% unbind the catcode of @@.

% @@headings double      turns headings on for double-sided printing.
% @@headings single      turns headings on for single-sided printing.
% @@headings off         turns them off.
% @@headings on          same as @@headings double, retained for compatibility.
% @@headings after       turns on double-sided headings after this page.
% @@headings doubleafter turns on double-sided headings after this page.
% @@headings singleafter turns on single-sided headings after this page.
% By default, they are off at the start of a document,
% and turned `on' after @@end titlepage.

\def\headings #1 {\csname HEADINGS#1\endcsname}

\def\HEADINGSoff{
\global\evenheadline={\hfil} \global\evenfootline={\hfil}
\global\oddheadline={\hfil} \global\oddfootline={\hfil}}
\HEADINGSoff
% When we turn headings on, set the page number to 1.
% For double-sided printing, put current file name in lower left corner,
% chapter name on inside top of right hand pages, document
% title on inside top of left hand pages, and page numbers on outside top
% edge of all pages.
\def\HEADINGSdouble{
\global\pageno=1
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\folio\hfil\thistitle}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chapoddpage
a1924 1
\let\contentsalignmacro = \chappager
d1926 11
a1936 9
% For single-sided printing, chapter title goes across top left of page,
% page number on top right.
\def\HEADINGSsingle{
\global\pageno=1
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\thischapter\hfil\folio}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chappager
a1937 1
\def\HEADINGSon{\HEADINGSdouble}
d1939 11
a1949 8
\def\HEADINGSafter{\let\HEADINGShook=\HEADINGSdoublex}
\let\HEADINGSdoubleafter=\HEADINGSafter
\def\HEADINGSdoublex{%
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\folio\hfil\thistitle}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chapoddpage
d1952 7
a1958 7
\def\HEADINGSsingleafter{\let\HEADINGShook=\HEADINGSsinglex}
\def\HEADINGSsinglex{%
\global\evenfootline={\hfil}
\global\oddfootline={\hfil}
\global\evenheadline={\line{\thischapter\hfil\folio}}
\global\oddheadline={\line{\thischapter\hfil\folio}}
\global\let\contentsalignmacro = \chappager
d1961 7
a1967 13
% Subroutines used in generating headings
% Produces Day Month Year style of output.
\def\today{\number\day\space
\ifcase\month\or
January\or February\or March\or April\or May\or June\or
July\or August\or September\or October\or November\or December\fi
\space\number\year}

% Use this if you want the Month Day, Year style of output.
%\def\today{\ifcase\month\or
%January\or February\or March\or April\or May\or June\or
%July\or August\or September\or October\or November\or December\fi
%\space\number\day, \number\year}
d1969 1
a1969 2
% @@settitle line...  specifies the title of the document, for headings
% It generates no output of its own
d1971 8
a1978 3
\def\thistitle{No Title}
\def\settitle{\parsearg\settitlezzz}
\def\settitlezzz #1{\gdef\thistitle{#1}}
d1980 7
d1988 1
a1988 2
\message{tables,}
% Tables -- @@table, @@ftable, @@vtable, @@item(x), @@kitem(x), @@xitem(x).
d1990 9
a1998 6
% default indentation of table text
\newdimen\tableindent \tableindent=.8in
% default indentation of @@itemize and @@enumerate text
\newdimen\itemindent  \itemindent=.3in
% margin between end of table item and start of table text.
\newdimen\itemmargin  \itemmargin=.1in
a1999 2
% used internally for \itemindent minus \itemmargin
\newdimen\itemmax
d2001 14
a2014 4
% Note @@table, @@vtable, and @@vtable define @@item, @@itemx, etc., with
% these defs.
% They also define \itemindex
% to index the item name in whatever manner is desired (perhaps none).
d2016 4
a2019 1
\newif\ifitemxneedsnegativevskip
d2021 2
a2022 1
\def\itemxpar{\par\ifitemxneedsnegativevskip\nobreak\vskip-\parskip\nobreak\fi}
d2024 1
a2024 2
\def\internalBitem{\smallbreak \parsearg\itemzzz}
\def\internalBitemx{\itemxpar \parsearg\itemzzz}
d2026 14
a2039 2
\def\internalBxitem "#1"{\def\xitemsubtopix{#1} \smallbreak \parsearg\xitemzzz}
\def\internalBxitemx "#1"{\def\xitemsubtopix{#1} \itemxpar \parsearg\xitemzzz}
d2041 16
a2056 2
\def\internalBkitem{\smallbreak \parsearg\kitemzzz}
\def\internalBkitemx{\itemxpar \parsearg\kitemzzz}
d2058 7
a2064 2
\def\kitemzzz #1{\dosubind {kw}{\code{#1}}{for {\bf \lastfunction}}%
                 \itemzzz {#1}}
d2066 9
a2074 2
\def\xitemzzz #1{\dosubind {kw}{\code{#1}}{for {\bf \xitemsubtopic}}%
                 \itemzzz {#1}}
d2076 5
a2080 33
\def\itemzzz #1{\begingroup %
  \advance\hsize by -\rightskip
  \advance\hsize by -\tableindent
  \setbox0=\hbox{\itemfont{#1}}%
  \itemindex{#1}%
  \nobreak % This prevents a break before @@itemx.
  %
  % If the item text does not fit in the space we have, put it on a line
  % by itself, and do not allow a page break either before or after that
  % line.  We do not start a paragraph here because then if the next
  % command is, e.g., @@kindex, the whatsit would get put into the
  % horizontal list on a line by itself, resulting in extra blank space.
  \ifdim \wd0>\itemmax
    %
    % Make this a paragraph so we get the \parskip glue and wrapping,
    % but leave it ragged-right.
    \begingroup
      \advance\leftskip by-\tableindent
      \advance\hsize by\tableindent
      \advance\rightskip by0pt plus1fil
      \leavevmode\unhbox0\par
    \endgroup
    %
    % We're going to be starting a paragraph, but we don't want the
    % \parskip glue -- logically it's part of the @@item we just started.
    \nobreak \vskip-\parskip
    %
    % Stop a page break at the \parskip glue coming up.  Unfortunately
    % we can't prevent a possible page break at the following
    % \baselineskip glue.
    \nobreak
    \endgroup
    \itemxneedsnegativevskipfalse
d2082 19
a2100 12
    % The item text fits into the space.  Start a paragraph, so that the
    % following text (if any) will end up on the same line.  
    \noindent
    % Do this with kerns and \unhbox so that if there is a footnote in
    % the item text, it can migrate to the main vertical list and
    % eventually be printed.
    \nobreak\kern-\tableindent
    \dimen0 = \itemmax  \advance\dimen0 by \itemmargin \advance\dimen0 by -\wd0
    \unhbox0
    \nobreak\kern\dimen0
    \endgroup
    \itemxneedsnegativevskiptrue
d2102 1
d2105 5
a2109 9
\def\item{\errmessage{@@item while not in a table}}
\def\itemx{\errmessage{@@itemx while not in a table}}
\def\kitem{\errmessage{@@kitem while not in a table}}
\def\kitemx{\errmessage{@@kitemx while not in a table}}
\def\xitem{\errmessage{@@xitem while not in a table}}
\def\xitemx{\errmessage{@@xitemx while not in a table}}

% Contains a kludge to get @@end[description] to work.
\def\description{\tablez{\dontindex}{1}{}{}{}{}}
d2111 73
a2183 51
% @@table, @@ftable, @@vtable.
\def\table{\begingroup\inENV\obeylines\obeyspaces\tablex}
{\obeylines\obeyspaces%
\gdef\tablex #1^^M{%
\tabley\dontindex#1        \endtabley}}

\def\ftable{\begingroup\inENV\obeylines\obeyspaces\ftablex}
{\obeylines\obeyspaces%
\gdef\ftablex #1^^M{%
\tabley\fnitemindex#1        \endtabley
\def\Eftable{\endgraf\afterenvbreak\endgroup}%
\let\Etable=\relax}}

\def\vtable{\begingroup\inENV\obeylines\obeyspaces\vtablex}
{\obeylines\obeyspaces%
\gdef\vtablex #1^^M{%
\tabley\vritemindex#1        \endtabley
\def\Evtable{\endgraf\afterenvbreak\endgroup}%
\let\Etable=\relax}}

\def\dontindex #1{}
\def\fnitemindex #1{\doind {fn}{\code{#1}}}%
\def\vritemindex #1{\doind {vr}{\code{#1}}}%

{\obeyspaces %
\gdef\tabley#1#2 #3 #4 #5 #6 #7\endtabley{\endgroup%
\tablez{#1}{#2}{#3}{#4}{#5}{#6}}}

\def\tablez #1#2#3#4#5#6{%
\aboveenvbreak %
\begingroup %
\def\Edescription{\Etable}% Necessary kludge.
\let\itemindex=#1%
\ifnum 0#3>0 \advance \leftskip by #3\mil \fi %
\ifnum 0#4>0 \tableindent=#4\mil \fi %
\ifnum 0#5>0 \advance \rightskip by #5\mil \fi %
\def\itemfont{#2}%
\itemmax=\tableindent %
\advance \itemmax by -\itemmargin %
\advance \leftskip by \tableindent %
\exdentamount=\tableindent
\parindent = 0pt
\parskip = \smallskipamount
\ifdim \parskip=0pt \parskip=2pt \fi%
\def\Etable{\endgraf\afterenvbreak\endgroup}%
\let\item = \internalBitem %
\let\itemx = \internalBitemx %
\let\kitem = \internalBkitem %
\let\kitemx = \internalBkitemx %
\let\xitem = \internalBxitem %
\let\xitemx = \internalBxitemx %
d2186 26
a2211 1
% This is the counter used by @@enumerate, which is really @@itemize
a2212 1
\newcount \itemno
d2214 29
a2242 1
\def\itemize{\parsearg\itemizezzz}
d2244 48
a2291 3
\def\itemizezzz #1{%
  \begingroup % ended by the @@end itemize
  \itemizey {#1}{\Eitemize}
d2294 3
a2296 12
\def\itemizey #1#2{%
\aboveenvbreak %
\itemmax=\itemindent %
\advance \itemmax by -\itemmargin %
\advance \leftskip by \itemindent %
\exdentamount=\itemindent
\parindent = 0pt %
\parskip = \smallskipamount %
\ifdim \parskip=0pt \parskip=2pt \fi%
\def#2{\endgraf\afterenvbreak\endgroup}%
\def\itemcontents{#1}%
\let\item=\itemizeitem}
d2298 8
a2305 4
% Set sfcode to normal for the chars that usually have another value.
% These are `.?!:;,'
\def\frenchspacing{\sfcode46=1000 \sfcode63=1000 \sfcode33=1000
  \sfcode58=1000 \sfcode59=1000 \sfcode44=1000 }
d2307 3
a2309 4
% \splitoff TOKENS\endmark defines \first to be the first token in
% TOKENS, and \rest to be the remainder.
%
\def\splitoff#1#2\endmark{\def\first{#1}\def\rest{#2}}%
d2311 1
a2311 3
% Allow an optional argument of an uppercase letter, lowercase letter,
% or number, to specify the first label in the enumerated list.  No
% argument is the same as `1'.
d2313 18
a2330 4
\def\enumerate{\parsearg\enumeratezzz}
\def\enumeratezzz #1{\enumeratey #1  \endenumeratey}
\def\enumeratey #1 #2\endenumeratey{%
  \begingroup % ended by the @@end enumerate
d2332 6
a2337 3
  % If we were given no argument, pretend we were given `1'.
  \def\thearg{#1}%
  \ifx\thearg\empty \def\thearg{1}\fi
d2339 2
a2340 30
  % Detect if the argument is a single token.  If so, it might be a
  % letter.  Otherwise, the only valid thing it can be is a number.
  % (We will always have one token, because of the test we just made.
  % This is a good thing, since \splitoff doesn't work given nothing at
  % all -- the first parameter is undelimited.)
  \expandafter\splitoff\thearg\endmark
  \ifx\rest\empty
    % Only one token in the argument.  It could still be anything.
    % A ``lowercase letter'' is one whose \lccode is nonzero.
    % An ``uppercase letter'' is one whose \lccode is both nonzero, and
    %   not equal to itself.
    % Otherwise, we assume it's a number.
    %
    % We need the \relax at the end of the \ifnum lines to stop TeX from
    % continuing to look for a <number>.
    %
    \ifnum\lccode\expandafter`\thearg=0\relax
      \numericenumerate % a number (we hope)
    \else
      % It's a letter.
      \ifnum\lccode\expandafter`\thearg=\expandafter`\thearg\relax
        \lowercaseenumerate % lowercase letter
      \else
        \uppercaseenumerate % uppercase letter
      \fi
    \fi
  \else
    % Multiple tokens in the argument.  We hope it's a number.
    \numericenumerate
  \fi
d2343 1
a2343 2
% An @@enumerate whose labels are integers.  The starting integer is
% given in \thearg.
d2345 1
a2345 4
\def\numericenumerate{%
  \itemno = \thearg
  \startenumeration{\the\itemno}%
}
d2347 17
a2363 8
% The starting (lowercase) letter is in \thearg.
\def\lowercaseenumerate{%
  \itemno = \expandafter`\thearg
  \startenumeration{%
    % Be sure we're not beyond the end of the alphabet.
    \ifnum\itemno=0
      \errmessage{No more lowercase letters in @@enumerate; get a bigger
                  alphabet}%
a2364 2
    \char\lccode\itemno
  }%
d2367 4
a2370 40
% The starting (uppercase) letter is in \thearg.
\def\uppercaseenumerate{%
  \itemno = \expandafter`\thearg
  \startenumeration{%
    % Be sure we're not beyond the end of the alphabet.
    \ifnum\itemno=0
      \errmessage{No more uppercase letters in @@enumerate; get a bigger
                  alphabet}
    \fi
    \char\uccode\itemno
  }%
}

% Call itemizey, adding a period to the first argument and supplying the
% common last two arguments.  Also subtract one from the initial value in
% \itemno, since @@item increments \itemno.
%
\def\startenumeration#1{%
  \advance\itemno by -1
  \itemizey{#1.}\Eenumerate\flushcr
}

% @@alphaenumerate and @@capsenumerate are abbreviations for giving an arg
% to @@enumerate.
%
\def\alphaenumerate{\enumerate{a}}
\def\capsenumerate{\enumerate{A}}
\def\Ealphaenumerate{\Eenumerate}
\def\Ecapsenumerate{\Eenumerate}

% Definition of @@item while inside @@itemize.

\def\itemizeitem{%
\advance\itemno by 1
{\let\par=\endgraf \smallbreak}%
\ifhmode \errmessage{In hmode at itemizeitem}\fi
{\parskip=0in \hskip 0pt
\hbox to 0pt{\hss \itemcontents\hskip \itemmargin}%
\vadjust{\penalty 1200}}%
\flushcr}
d2372 2
a2373 2
% @@multitable macros
% Amy Hendrickson, 8/18/94, 3/6/96
d2375 59
a2433 4
% @@multitable ... @@end multitable will make as many columns as desired.
% Contents of each column will wrap at width given in preamble.  Width
% can be specified either with sample text given in a template line,
% or in percent of \hsize, the current width of text on page.
d2435 2
a2436 3
% Table can continue over pages but will only break between lines.

% To make preamble:
d2438 5
a2442 3
% Either define widths of columns in terms of percent of \hsize:
%   @@multitable @@columnfractions .25 .3 .45
%   @@item ...
d2444 15
a2458 3
%   Numbers following @@columnfractions are the percent of the total
%   current hsize to be used for each column. You may use as many
%   columns as desired.
d2460 1
a2460 5

% Or use a template:
%   @@multitable {Column 1 template} {Column 2 template} {Column 3 template}
%   @@item ...
%   using the widest term desired in each column.
d2462 2
a2463 9
% For those who want to use more than one line's worth of words in
% the preamble, break the line within one argument and it
% will parse correctly, i.e.,
%
%     @@multitable {Column 1 template} {Column 2 template} {Column 3
%      template}
% Not:
%     @@multitable {Column 1 template} {Column 2 template}
%      {Column 3 template}
d2465 13
a2477 4
% Each new table line starts with @@item, each subsequent new column
% starts with @@tab. Empty columns may be produced by supplying @@tab's
% with nothing between them for as many times as empty columns are needed,
% ie, @@tab@@tab@@tab will produce two empty columns.
d2479 8
a2486 15
% @@item, @@tab, @@multitable or @@end multitable do not need to be on their
% own lines, but it will not hurt if they are.

% Sample multitable:

%   @@multitable {Column 1 template} {Column 2 template} {Column 3 template}
%   @@item first col stuff @@tab second col stuff @@tab third col
%   @@item
%   first col stuff
%   @@tab
%   second col stuff
%   @@tab
%   third col
%   @@item first col stuff @@tab second col stuff
%   @@tab Many paragraphs of text may be used in any column.
d2488 7
a2494 3
%         They will wrap at the width determined by the template.
%   @@item@@tab@@tab This will be in third column.
%   @@end multitable
d2496 2
a2497 7
% Default dimensions may be reset by user.
% @@multitableparskip is vertical space between paragraphs in table.
% @@multitableparindent is paragraph indent in table.
% @@multitablecolmargin is horizontal space to be left between columns.
% @@multitablelinespace is space to leave between table items, baseline
%                                                            to baseline.
%   0pt means it depends on current normal line spacing.
d2499 4
a2502 27
\newskip\multitableparskip
\newskip\multitableparindent
\newdimen\multitablecolspace
\newskip\multitablelinespace
\multitableparskip=0pt
\multitableparindent=6pt
\multitablecolspace=12pt
\multitablelinespace=0pt

% Macros used to set up halign preamble:
% 
\let\endsetuptable\relax
\def\xendsetuptable{\endsetuptable}
\let\columnfractions\relax
\def\xcolumnfractions{\columnfractions}
\newif\ifsetpercent

% 2/1/96, to allow fractions to be given with more than one digit.
\def\pickupwholefraction#1 {\global\advance\colcount by1 %
\expandafter\xdef\csname col\the\colcount\endcsname{.#1\hsize}%
\setuptable}

\newcount\colcount
\def\setuptable#1{\def\firstarg{#1}%
\ifx\firstarg\xendsetuptable\let\go\relax%
\else
  \ifx\firstarg\xcolumnfractions\global\setpercenttrue%
d2504 6
a2509 14
    \ifsetpercent
       \let\go\pickupwholefraction   % In this case arg of setuptable
                                     % is the decimal point before the
                                     % number given in percent of hsize.
                                     % We don't need this so we don't use it.
    \else
       \global\advance\colcount by1
       \setbox0=\hbox{#1 }% Add a normal word space as a separator;
                          % typically that is always in the input, anyway.
       \expandafter\xdef\csname col\the\colcount\endcsname{\the\wd0}%
    \fi%
  \fi%
\ifx\go\pickupwholefraction\else\let\go\setuptable\fi%
\fi\go}
d2511 7
a2517 59
% multitable syntax
\def\tab{&\hskip1sp\relax} % 2/2/96
                           % tiny skip here makes sure this column space is
                           % maintained, even if it is never used.

% @@multitable ... @@end multitable definitions:

\def\multitable{\parsearg\dotable}
\def\dotable#1{\bgroup
  \vskip\parskip
  \let\item\crcr
  \tolerance=9500
  \hbadness=9500
  \setmultitablespacing
  \parskip=\multitableparskip
  \parindent=\multitableparindent
  \overfullrule=0pt
  \global\colcount=0
  \def\Emultitable{\global\setpercentfalse\cr\egroup\egroup}%
  %
  % To parse everything between @@multitable and @@item:
  \setuptable#1 \endsetuptable
  %
  % \everycr will reset column counter, \colcount, at the end of
  % each line. Every column entry will cause \colcount to advance by one.
  % The table preamble
  % looks at the current \colcount to find the correct column width.
  \everycr{\noalign{%
  %
  % \filbreak%% keeps underfull box messages off when table breaks over pages.
  % Maybe so, but it also creates really weird page breaks when the table
  % breaks over pages. Wouldn't \vfil be better?  Wait until the problem
  % manifests itself, so it can be fixed for real --karl.
    \global\colcount=0\relax}}%
  %
  % This preamble sets up a generic column definition, which will
  % be used as many times as user calls for columns.
  % \vtop will set a single line and will also let text wrap and
  % continue for many paragraphs if desired.
  \halign\bgroup&\global\advance\colcount by 1\relax
    \multistrut\vtop{\hsize=\expandafter\csname col\the\colcount\endcsname
  %
  % In order to keep entries from bumping into each other
  % we will add a \leftskip of \multitablecolspace to all columns after
  % the first one.
  % 
  % If a template has been used, we will add \multitablecolspace
  % to the width of each template entry.
  % 
  % If the user has set preamble in terms of percent of \hsize we will
  % use that dimension as the width of the column, and the \leftskip
  % will keep entries from bumping into each other.  Table will start at
  % left margin and final column will justify at right margin.
  % 
  % Make sure we don't inherit \rightskip from the outer environment.
  \rightskip=0pt
  \ifnum\colcount=1
    % The first column will be indented with the surrounding text.
    \advance\hsize by\leftskip
d2519 1
a2519 7
    \ifsetpercent \else
      % If user has not set preamble in terms of percent of \hsize
      % we will advance \hsize by \multitablecolspace.
      \advance\hsize by \multitablecolspace
    \fi
   % In either case we will make \leftskip=\multitablecolspace:
  \leftskip=\multitablecolspace
d2521 32
a2552 10
  % Ignoring space at the beginning and end avoids an occasional spurious
  % blank line, when TeX decides to break the line at the space before the
  % box from the multistrut, so the strut ends up on a line by itself.
  % For example:
  % @@multitable @@columnfractions .11 .89
  % @@item @@code{#}
  % @@tab Legal holiday which is valid in major parts of the whole country.
  % Is automatically provided with highlighting sequences respectively marking
  % characters.
  \noindent\ignorespaces##\unskip\multistrut}\cr
d2555 7
a2561 23
\def\setmultitablespacing{% test to see if user has set \multitablelinespace.
% If so, do nothing. If not, give it an appropriate dimension based on
% current baselineskip.
\ifdim\multitablelinespace=0pt
%% strut to put in table in case some entry doesn't have descenders,
%% to keep lines equally spaced
\let\multistrut = \strut
%% Test to see if parskip is larger than space between lines of
%% table. If not, do nothing.
%%        If so, set to same dimension as multitablelinespace.
\else
\gdef\multistrut{\vrule height\multitablelinespace depth\dp0
width0pt\relax} \fi
\ifdim\multitableparskip>\multitablelinespace
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi%
\ifdim\multitableparskip=0pt
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi}
d2676 5
a2680 2
%\let\{ = \lbracecmd
%\let\} = \rbracecmd
d2702 5
d2722 1
d2730 2
d2788 6
d2818 1
a2818 1
% 
d2825 1
a2825 1
% 
d2850 2
a2851 2
        % First process the index-string with all font commands turned off
        % to get the string to sort by.
d2854 1
a2854 2
        % Now produce the complete index entry, with both the sort key and the
        % original text, including any font commands.
d2856 11
a2871 6
        % If third (subentry) arg is present, add it to the index string.
        \ifx\thirdarg\emptymacro \else
          \toks0 = {#3}%
          \edef\temp{\temp{\the\toks0}}%
        \fi
        %
d2883 1
a2883 1
        % 
d2886 1
a2886 1
        % 
d2888 1
a2888 1
        % 
d2897 1
a2897 1
          % 
d2945 1
a2945 1
  \indexfonts \rm
d2961 1
a2961 1
    (Index is nonexistent)
d2969 1
a2969 1
      (Index is empty)
d2994 1
a2994 1
  % 
d3002 1
a3002 1
  % 
d3072 5
a3076 1
    \ #2% The page number ends the paragraph.
d3105 2
a3106 2
  \output = {\global\setbox\partialpage = \vbox{%
    % 
d3111 6
a3116 6
    % that case, we must prevent the second \partialpage from
    % simply overwriting the first, causing us to lose the page.
    % This will preserve it until a real output routine can ship it
    % out.  Generally, \partialpage will be empty when this runs and
    % this will be a no-op.
    \unvbox\partialpage
d3118 7
a3124 5
    % Unvbox the main output page.
    \unvbox255
    \kern-\topskip \kern\baselineskip
  }}%
  \eject
d3158 1
a3158 1
% 
a3175 1
  \advance\vsize by \ht\partialpage
d3184 1
a3184 1
    % Split the last of the double-column material.  Leave on the
a3195 5
    %
    % \pagegoal was set to the doubled \vsize above, since we restarted
    % the current page.  We're now back to normal single-column
    % typesetting, so reset \pagegoal to the normal \vsize.
    \pagegoal = \vsize
d3199 6
d3235 1
a3235 1
% Define chapters, sections, etc.
d3244 37
a3280 1
\def\appendixletter{\char\the\appendixno}
d3753 1
d3759 1
a3759 1
% 
d3762 1
a3762 1
% 
d3778 1
a3778 1
% 
d3806 1
a3806 1
   \startcontents{\putwordTableofContents}%
d3813 2
d3822 1
a3822 1
   \startcontents{\putwordShortContents}%
d3844 1
d3851 4
d3865 1
a3865 1
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno{#3}}%
d3873 3
a3875 3
\setbox0 = \hbox{\shortcontrm \putwordAppendix }
\newdimen\shortappendixwidth \shortappendixwidth = \wd0

d3877 4
d3895 1
a3895 1
\def\shortunnumberedentry#1#2{\tocentry{#1}{\doshortpageno{#2}}}
d3922 1
a3922 1
     \tocentry{#1}{\dopageno{#2}}%
d3929 1
a3929 1
  \tocentry{#1}{\dopageno{#2}}%
d3934 1
a3934 1
  \tocentry{#1}{\dopageno{#2}}%
d3939 1
a3939 1
  \tocentry{#1}{\dopageno{#2}}%
d3967 1
d4178 1
a4178 1
% 
d4203 1
a4203 1
% 
d4217 1
a4217 1
  \indexfonts
d4233 1
a4233 1
  \indexfonts \rm
d4250 1
a4250 1
  \indexfonts \rm
d4259 1
a4259 1
% 
d4291 3
a4293 2
% Define formatter for defuns
% First, allow user to change definition object font (\df) internally
d4347 1
a4347 1
\def\ampnr{\&}
d4351 6
d4408 1
a4408 1
% 
d4420 1
a4420 1
% @@deftypemethod has an extra argument that nothing else does.  Sigh.
d4424 1
a4424 1
% #4, delimited by the space, is the class name.
d4426 16
d4443 10
a4452 10
\def\deftypemethparsebody#1#2#3#4 #5 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 ##2 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}{##2}}}%
\parindent=0in
\advance\leftskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\activeparens\spacesplit{#3{#4}{#5}}}
d4563 1
a4563 1
\def\defunargs #1{\functionparens \sl
d4566 2
a4567 1
\hyphenchar\tensl=0
d4569 1
a4569 1
\hyphenchar\tensl=45
d4603 1
a4603 1
\begingroup\defname {#1}{Function}%
d4617 1
a4617 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{Function}%
d4648 1
a4648 1
\begingroup\defname {#1}{Macro}%
d4658 1
a4658 1
\begingroup\defname {#1}{Special Form}%
a4662 13
% This definition is run if you use @@defunx
% anywhere other than immediately after a @@defun or @@defunx.

\def\deffnx #1 {\errmessage{@@deffnx in invalid context}}
\def\defunx #1 {\errmessage{@@defunx in invalid context}}
\def\defmacx #1 {\errmessage{@@defmacx in invalid context}}
\def\defspecx #1 {\errmessage{@@defspecx in invalid context}}
\def\deftypefnx #1 {\errmessage{@@deftypefnx in invalid context}}
\def\deftypemethodx #1 {\errmessage{@@deftypemethodx in invalid context}}
\def\deftypefunx #1 {\errmessage{@@deftypefunx in invalid context}}

% @@defmethod, and so on

d4664 1
a4664 1

d4667 2
a4668 2

\def\defopheader #1#2#3{%
d4670 1
a4670 1
\begingroup\defname {#2}{\defoptype{} on #1}%
d4674 17
a4690 1
% @@deftypemethod CLASS RETURN-TYPE METHOD ARG...
d4704 14
d4737 2
a4738 2
\dosubind {vr}{\code{#2}}{of #1}% Make entry in var index
\begingroup\defname {#2}{\defcvtype{} of #1}%
d4742 2
a4743 2
% @@defivar == @@defcv {Instance Variable}

d4745 7
a4751 5

\def\defivarheader #1#2#3{%
\dosubind {vr}{\code{#2}}{of #1}% Make entry in var index
\begingroup\defname {#2}{Instance Variable of #1}%
\defvarargs {#3}\endgroup %
d4754 1
a4754 10
% These definitions are run if you use @@defmethodx, etc.,
% anywhere other than immediately after a @@defmethod, etc.

\def\defopx #1 {\errmessage{@@defopx in invalid context}}
\def\defmethodx #1 {\errmessage{@@defmethodx in invalid context}}
\def\defcvx #1 {\errmessage{@@defcvx in invalid context}}
\def\defivarx #1 {\errmessage{@@defivarx in invalid context}}

% Now @@defvar

d4774 1
a4774 1
\begingroup\defname {#1}{Variable}%
d4783 1
a4783 1
\begingroup\defname {#1}{User Option}%
d4795 1
a4795 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{Variable}%
a4810 9
% This definition is run if you use @@defvarx
% anywhere other than immediately after a @@defvar or @@defvarx.

\def\defvrx #1 {\errmessage{@@defvrx in invalid context}}
\def\defvarx #1 {\errmessage{@@defvarx in invalid context}}
\def\defoptx #1 {\errmessage{@@defoptx in invalid context}}
\def\deftypevarx #1 {\errmessage{@@deftypevarx in invalid context}}
\def\deftypevrx #1 {\errmessage{@@deftypevrx in invalid context}}

d4823 22
a4844 4
% This definition is run if you use @@deftpx, etc
% anywhere other than immediately after a @@deftp, etc.

\def\deftpx #1 {\errmessage{@@deftpx in invalid context}}
d4850 1
a4850 1
% To do this right we need a feature of e-TeX, \scantokens, 
d4856 4
d4861 1
a4861 1
   \immediate\write\macscribble{#1}%
d4870 3
a4872 1
\let\xeatspaces\eatspaces\scantokens{#1}\endgroup}
d4878 2
d4911 2
a4912 2
% It's necessary to have hard CRs when the macro is executed. This is 
% done by  making ^^M (\endlinechar) catcode 12 when reading the macro 
d4929 11
d4941 1
a4941 1
% It maps \foo\ => \csname macarg.foo\endcsname => #N 
d4960 1
a4960 1
     \expandafter\parsemargdef \argl;% 
d4962 2
a4963 2
  \expandafter\ifx \csname macsave.\the\macname\endcsname \relax
     \cslet{macsave.\the\macname}{\the\macname}%
d4965 8
a4972 1
     \message{Warning: redefining \the\macname}%
d4976 1
a4976 1
  \else \expandafter\parsemacbody 
d4981 19
a4999 2
  \expandafter\ifx \csname macsave.\the\macname\endcsname \relax
    \errmessage{Macro \the\macname\ not defined.}%
d5001 1
a5001 2
    \cslet{#1}{macsave.#1}%
    \expandafter\let \csname macsave.\the\macname\endcsname \undefined
d5059 3
a5061 1
         \noexpand\braceorline\csname\the\macname xxx\endcsname}%
d5063 1
a5063 1
         \noexpand\scanmacro{\temp}}%
d5065 5
a5069 2
      \expandafter\xdef\csname\the\macname\endcsname##1{%
          \csname\the\macname xxx\endcsname ##1,}%
d5073 2
a5074 2
        \csname\the\macname xxx\endcsname 
          \paramlist{\noexpand\scanmacro{\temp}}%
d5084 3
a5086 1
         \noexpand\braceorline\csname\the\macname xxx\endcsname}%
d5088 1
d5092 5
a5096 2
      \expandafter\xdef\csname\the\macname\endcsname##1{%
          \csname\the\macname xxx\endcsname ##1,}%
d5102 1
d5117 1
a5117 1
    \expandafter\parsearg 
d5120 16
d5138 2
d5181 5
a5185 3
% 
\def\anchor#1{\setref{#1}{Ynothing}}

d5192 1
a5192 1
% 
d5195 1
d5198 1
a5198 1
  \dosetq{#1-snt}{#2}
d5210 1
d5244 13
d5258 1
a5258 1
    \putwordsection{} ``\printednodename'' in \cite{\printedmanual}%
d5271 1
a5271 1
    % [mynode], 
d5276 1
d5284 1
a5284 1
  {\let\folio=0
d5361 1
a5361 1
% 
d5513 2
d5529 1
a5529 1
\def\@@foot{\strut\egroup}
d5588 1
a5588 1
% 
d5601 1
d5605 1
a5605 1
  it from ftp://ftp.tug.org/tex/epsf.tex.}
a5606 1
% Only complain once about lack of epsf.tex.
d5624 44
a5667 9
  % \epsfbox itself resets \epsf?size at each figure.
  \setbox0 = \hbox{\ignorespaces #2}\ifdim\wd0 > 0pt \epsfxsize=#2\relax \fi
  \setbox0 = \hbox{\ignorespaces #3}\ifdim\wd0 > 0pt \epsfysize=#3\relax \fi
  % If the image is by itself, center it.
  \ifvmode
    \nobreak\medskip
    \nobreak
    \centerline{\epsfbox{#1.eps}}%
    \bigbreak
d5669 1
a5669 1
    \epsfbox{#1.eps}%
d5671 2
d5674 3
d5679 3
a5681 2
\message{paper sizes,}
% And other related parameters.
d5683 3
d5705 1
a5705 2
% \hsize.  This makes it come to about 9pt for the 8.5x11 format.  We
% call this whenever the paper size is set.
d5712 1
a5712 2
    \emergencystretch = \hsize
    \divide\emergencystretch by 45
d5728 1
a5728 1
  \advance\outervsize by 0.6in
d5805 1
a5805 1
% 
d5819 1
a5819 1
% 
d5822 1
d5834 1
d5843 1
d5854 7
a5860 1
\def\ifusingtt#1#2{\ifdim \fontdimen3\the\font=0pt #1\else #2\fi}
d5891 2
a5922 3
% Say @@foo, not \foo, in error messages.
\escapechar=`\@@

d5936 2
a5937 1
@@let+=@@normalplus}
d5947 2
a5948 1
@@let+=@@normalplus}
d5967 8
a5974 2
@@gdef@@fixbackslash{@@ifx\@@eatinput @@let\ = @@normalbackslash @@fi
  @@catcode`+=@@active @@catcode`@@_=@@active}
d5976 4
a5979 3
% These look ok in all fonts, so just make them not special.  The @@rm below
% makes sure that the current font starts out as the newly loaded cmr10
@@catcode`@@$=@@other @@catcode`@@%=@@other @@catcode`@@&=@@other @@catcode`@@#=@@other
d5981 1
d5985 1
d5987 1
d5989 3
@


1.1.4.1
log
@Upgrade texinfo.tex to the file distributed with texinfo-4.0. Add
support for the target ``pdf'' to the gdb/doc directory.
@
text
@d2 1
d4 1
a4 6
% Load plain if necessary, i.e., if running under initex.
\expandafter\ifx\csname fmtname\endcsname\relax\input plain\fi
%
\def\texinfoversion{1999-09-25.10}
%
% Copyright (C) 1985, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
d28 2
a29 1
%   ftp://ftp.gnu.org/gnu/texinfo.tex
d31 4
a34 5
%   ftp://texinfo.org/tex/texinfo.tex
%   ftp://us.ctan.org/macros/texinfo/texinfo.tex
%   (and all CTAN mirrors, finger ctan@@us.ctan.org for a list).
%   /home/gd/gnu/doc/texinfo.tex on the GNU machines.
% The texinfo.tex in any given Texinfo distribution could well be out
d36 5
a40 6
% Texinfo has a small home page at http://texinfo.org/.
%
% Send bug reports to bug-texinfo@@gnu.org.  Please include including a
% complete document in each bug report with which we can reproduce the
% problem.  Patches are, of course, greatly appreciated.
%
d42 2
a43 2
% texi2dvi shell script that comes with the distribution.  For a simple
% manual foo.texi, however, you can get away with this:
d48 1
a48 1
%   dvips foo.dvi -o # or whatever, to process the dvi file; this makes foo.ps.
a51 3
%
% It is possible to adapt texinfo.tex for other languages.  You can get
% the existing language-specific files from ftp://ftp.gnu.org/gnu/texinfo/.
d53 10
a62 1
\message{Loading texinfo [version \texinfoversion]:}
d67 1
a67 1
\everyjob{\message{[Texinfo version \texinfoversion]}%
d71 1
d91 1
d100 13
a112 40
\ifx\putwordAppendix\undefined  \gdef\putwordAppendix{Appendix}\fi
\ifx\putwordChapter\undefined   \gdef\putwordChapter{Chapter}\fi
\ifx\putwordfile\undefined      \gdef\putwordfile{file}\fi
\ifx\putwordin\undefined        \gdef\putwordin{in}\fi
\ifx\putwordIndexIsEmpty\undefined     \gdef\putwordIndexIsEmpty{(Index is empty)}\fi
\ifx\putwordIndexNonexistent\undefined \gdef\putwordIndexNonexistent{(Index is nonexistent)}\fi
\ifx\putwordInfo\undefined      \gdef\putwordInfo{Info}\fi
\ifx\putwordInstanceVariableof\undefined \gdef\putwordInstanceVariableof{Instance Variable of}\fi
\ifx\putwordMethodon\undefined  \gdef\putwordMethodon{Method on}\fi
\ifx\putwordNoTitle\undefined   \gdef\putwordNoTitle{No Title}\fi
\ifx\putwordof\undefined        \gdef\putwordof{of}\fi
\ifx\putwordon\undefined        \gdef\putwordon{on}\fi
\ifx\putwordpage\undefined      \gdef\putwordpage{page}\fi
\ifx\putwordsection\undefined   \gdef\putwordsection{section}\fi
\ifx\putwordSection\undefined   \gdef\putwordSection{Section}\fi
\ifx\putwordsee\undefined       \gdef\putwordsee{see}\fi
\ifx\putwordSee\undefined       \gdef\putwordSee{See}\fi
\ifx\putwordShortTOC\undefined  \gdef\putwordShortTOC{Short Contents}\fi
\ifx\putwordTOC\undefined       \gdef\putwordTOC{Table of Contents}\fi
%
\ifx\putwordMJan\undefined \gdef\putwordMJan{January}\fi
\ifx\putwordMFeb\undefined \gdef\putwordMFeb{February}\fi
\ifx\putwordMMar\undefined \gdef\putwordMMar{March}\fi
\ifx\putwordMApr\undefined \gdef\putwordMApr{April}\fi
\ifx\putwordMMay\undefined \gdef\putwordMMay{May}\fi
\ifx\putwordMJun\undefined \gdef\putwordMJun{June}\fi
\ifx\putwordMJul\undefined \gdef\putwordMJul{July}\fi
\ifx\putwordMAug\undefined \gdef\putwordMAug{August}\fi
\ifx\putwordMSep\undefined \gdef\putwordMSep{September}\fi
\ifx\putwordMOct\undefined \gdef\putwordMOct{October}\fi
\ifx\putwordMNov\undefined \gdef\putwordMNov{November}\fi
\ifx\putwordMDec\undefined \gdef\putwordMDec{December}\fi
%
\ifx\putwordDefmac\undefined    \gdef\putwordDefmac{Macro}\fi
\ifx\putwordDefspec\undefined   \gdef\putwordDefspec{Special Form}\fi
\ifx\putwordDefvar\undefined    \gdef\putwordDefvar{Variable}\fi
\ifx\putwordDefopt\undefined    \gdef\putwordDefopt{User Option}\fi
\ifx\putwordDeftypevar\undefined\gdef\putwordDeftypevar{Variable}\fi
\ifx\putwordDeffunc\undefined   \gdef\putwordDeffunc{Function}\fi
\ifx\putwordDeftypefun\undefined\gdef\putwordDeftypefun{Function}\fi
d151 1
a151 1
%
d195 7
a201 10
        \vskip-\topandbottommargin
        \vtop to0pt{%
          \line{\ewtop\hfil\ewtop}%
          \nointerlineskip
          \line{%
            \vbox{\moveleft\cornerthick\nstop}%
            \hfill
            \vbox{\moveright\cornerthick\nstop}%
          }%
          \vss}%
a218 2
      \ifpdfmakepagedest \pdfmkdest{\the\pageno} \fi
      %
d224 4
a227 8
        \vbox to0pt{\vss
          \line{%
            \vbox{\moveleft\cornerthick\nsbot}%
            \hfill
            \vbox{\moveright\cornerthick\nsbot}%
          }%
          \nointerlineskip
          \line{\ewbot\hfil\ewbot}%
d229 2
d571 1
a571 1
  % Ensure vertical mode, so we don't make a big box in the middle of a
d575 26
a600 32
  % If the @@need value is less than one line space, it's useless.
  \dimen0 = #1\mil
  \dimen2 = \ht\strutbox
  \advance\dimen2 by \dp\strutbox
  \ifdim\dimen0 > \dimen2
    %
    % Do a \strut just to make the height of this box be normal, so the
    % normal leading is inserted relative to the preceding line.
    % And a page break here is fine.
    \vtop to #1\mil{\strut\vfil}%
    %
    % TeX does not even consider page breaks if a penalty added to the
    % main vertical list is 10000 or more.  But in order to see if the
    % empty box we just added fits on the page, we must make it consider
    % page breaks.  On the other hand, we don't want to actually break the
    % page after the empty box.  So we use a penalty of 9999.
    %
    % There is an extremely small chance that TeX will actually break the
    % page at this \penalty, if there are no other feasible breakpoints in
    % sight.  (If the user is using lots of big @@group commands, which
    % almost-but-not-quite fill up a page, TeX will have a hard time doing
    % good page breaking, for example.)  However, I could not construct an
    % example where a page broke at this \penalty; if it happens in a real
    % document, then we can reconsider our strategy.
    \penalty9999
    %
    % Back up by the size of the box, whether we did a page break or not.
    \kern -#1\mil
    %
    % Do not allow a page break right after this kern.
    \nobreak
  \fi
d621 1
a621 1
%
d708 30
a737 19
% @@paragraphindent NCHARS
% We'll use ems for NCHARS, close enough.
% We cannot implement @@paragraphindent asis, though.
% 
\def\asisword{asis} % no translation, these are keywords
\def\noneword{none}
%
\def\paragraphindent{\parsearg\doparagraphindent}
\def\doparagraphindent#1{%
  \def\temp{#1}%
  \ifx\temp\asisword
  \else
    \ifx\temp\noneword
      \defaultparindent = 0pt
    \else
      \defaultparindent = #1em
    \fi
  \fi
  \parindent = \defaultparindent
d740 46
a785 15
% @@exampleindent NCHARS
% We'll use ems for NCHARS like @@paragraphindent.
% It seems @@exampleindent asis isn't necessary, but
% I preserve it to make it similar to @@paragraphindent.
\def\exampleindent{\parsearg\doexampleindent}
\def\doexampleindent#1{%
  \def\temp{#1}%
  \ifx\temp\asisword
  \else
    \ifx\temp\noneword
      \lispnarrowing = 0pt
    \else
      \lispnarrowing = #1em
    \fi
  \fi
d788 1
a788 1
% @@asis just yields its argument.  Used with @@table, for example.
d790 1
a790 1
\def\asis#1{#1}
d792 1
a792 6
% @@math means output in math mode.
% We don't use $'s directly in the definition of \math because control
% sequences like \math are expanded when the toc file is written.  Then,
% we read the toc file back, the $'s will be normal characters (as they
% should be, according to the definition of Texinfo).  So we must use a
% control sequence to switch into and out of math mode.
d794 6
a799 5
% This isn't quite enough for @@math to work properly in indices, but it
% seems unlikely it will ever be needed there.
%
\let\implicitmath = $
\def\math#1{\implicitmath #1\implicitmath}
d801 3
a803 3
% @@bullet and @@minus need the same treatment as @@math, just above.
\def\bullet{\implicitmath\ptexbullet\implicitmath}
\def\minus{\implicitmath-\implicitmath}
d805 1
a805 6
% @@refill is a no-op.
\let\refill=\relax

% If working on a large document in chapters, it is convenient to
% be able to disable indexing, cross-referencing, and contents, for test runs.
% This is done with @@novalidate (before @@setfilename).
d807 28
a834 23
\newif\iflinks \linkstrue % by default we want the aux files.
\let\novalidate = \linksfalse

% @@setfilename is done at the beginning of every texinfo file.
% So open here the files we need to have open while reading the input.
% This makes it possible to make a .fmt file for texinfo.
\def\setfilename{%
   \iflinks
     \readauxfile
   \fi % \openindices needs to do some work in any case.
   \openindices
   \fixbackslash  % Turn off hack to swallow `\input texinfo'.
   \global\let\setfilename=\comment % Ignore extra @@setfilename cmds.
   %
   % If texinfo.cnf is present on the system, read it.
   % Useful for site-wide @@afourpaper, etc.
   % Just to be on the safe side, close the input stream before the \input.
   \openin 1 texinfo.cnf
   \ifeof1 \let\temp=\relax \else \def\temp{\input texinfo.cnf }\fi
   \closein1
   \temp
   %
   \comment % Ignore the actual filename.
d837 1
a837 1
% Called from \setfilename.
d839 1
a839 8
\def\openindices{%
  \newindex{cp}%
  \newcodeindex{fn}%
  \newcodeindex{vr}%
  \newcodeindex{tp}%
  \newcodeindex{ky}%
  \newcodeindex{pg}%
}
d841 17
a857 38
% @@bye.
\outer\def\bye{\pagealignmacro\tracingstats=1\ptexend}


\message{pdf,}
% adobe `portable' document format
\newcount\tempnum
\newcount\lnkcount
\newtoks\filename
\newcount\filenamelength
\newcount\pgn
\newtoks\toksA
\newtoks\toksB
\newtoks\toksC
\newtoks\toksD
\newbox\boxA
\newcount\countA
\newif\ifpdf
\newif\ifpdfmakepagedest

\ifx\pdfoutput\undefined
  \pdffalse
  \let\pdfmkdest = \gobble
  \let\pdfurl = \gobble
  \let\endlink = \relax
  \let\linkcolor = \relax
  \let\pdfmakeoutlines = \relax
\else
  \pdftrue
  \pdfoutput = 1
  \input pdfcolor
  \def\dopdfimage#1#2#3{%
    \def\imagewidth{#2}%
    \def\imageheight{#3}%
    \ifnum\pdftexversion < 14
      \pdfimage
    \else
      \pdfximage
d859 263
a1121 135
      \ifx\empty\imagewidth\else width \imagewidth \fi
      \ifx\empty\imageheight\else height \imageheight \fi
      {#1.pdf}%
    \ifnum\pdftexversion < 14 \else
      \pdfrefximage \pdflastximage
    \fi}
  \def\pdfmkdest#1{\pdfdest name{#1@@} xyz}
  \def\pdfmkpgn#1{#1@@}
  \let\linkcolor = \Cyan
  \def\endlink{\Black\pdfendlink}
  % Adding outlines to PDF; macros for calculating structure of outlines
  % come from Petr Olsak
  \def\expnumber#1{\expandafter\ifx\csname#1\endcsname\relax 0%
    \else \csname#1\endcsname \fi}
  \def\advancenumber#1{\tempnum=\expnumber{#1}\relax
    \advance\tempnum by1
    \expandafter\xdef\csname#1\endcsname{\the\tempnum}}
  \def\pdfmakeoutlines{{%
    \openin 1 \jobname.toc
    \ifeof 1\else\bgroup
      \closein 1 
      \indexnofonts
      \def\tt{}
      % thanh's hack / proper braces in bookmarks  
      \edef\mylbrace{\iftrue \string{\else}\fi}\let\{=\mylbrace
      \edef\myrbrace{\iffalse{\else\string}\fi}\let\}=\myrbrace
      %
      \def\chapentry ##1##2##3{}
      \def\unnumbchapentry ##1##2{}
      \def\secentry ##1##2##3##4{\advancenumber{chap##2}}
      \def\unnumbsecentry ##1##2{}
      \def\subsecentry ##1##2##3##4##5{\advancenumber{sec##2.##3}}
      \def\unnumbsubsecentry ##1##2{}
      \def\subsubsecentry ##1##2##3##4##5##6{\advancenumber{subsec##2.##3.##4}}
      \def\unnumbsubsubsecentry ##1##2{}
      \input \jobname.toc
      \def\chapentry ##1##2##3{%
        \pdfoutline goto name{\pdfmkpgn{##3}}count-\expnumber{chap##2}{##1}}
      \def\unnumbchapentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
      \def\secentry ##1##2##3##4{%
        \pdfoutline goto name{\pdfmkpgn{##4}}count-\expnumber{sec##2.##3}{##1}}
      \def\unnumbsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
      \def\subsecentry ##1##2##3##4##5{%
        \pdfoutline goto name{\pdfmkpgn{##5}}count-\expnumber{subsec##2.##3.##4}{##1}}
      \def\unnumbsubsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
      \def\subsubsecentry ##1##2##3##4##5##6{%
        \pdfoutline goto name{\pdfmkpgn{##6}}{##1}}
      \def\unnumbsubsubsecentry ##1##2{%
        \pdfoutline goto name{\pdfmkpgn{##2}}{##1}}
      \input \jobname.toc
    \egroup\fi
  }}
  \def\makelinks #1,{%
    \def\params{#1}\def\E{END}%
    \ifx\params\E
      \let\nextmakelinks=\relax
    \else
      \let\nextmakelinks=\makelinks
      \ifnum\lnkcount>0,\fi
      \picknum{#1}%
      \startlink attr{/Border [0 0 0]} 
        goto name{\pdfmkpgn{\the\pgn}}%
      \linkcolor #1%
      \advance\lnkcount by 1%
      \endlink
    \fi
    \nextmakelinks
  }
  \def\picknum#1{\expandafter\pn#1}
  \def\pn#1{%
    \def\p{#1}%
    \ifx\p\lbrace
      \let\nextpn=\ppn
    \else
      \let\nextpn=\ppnn
      \def\first{#1}
    \fi
    \nextpn
  }
  \def\ppn#1{\pgn=#1\gobble}
  \def\ppnn{\pgn=\first}
  \def\pdfmklnk#1{\lnkcount=0\makelinks #1,END,}
  \def\addtokens#1#2{\edef\addtoks{\noexpand#1={\the#1#2}}\addtoks}
  \def\skipspaces#1{\def\PP{#1}\def\D{|}%
    \ifx\PP\D\let\nextsp\relax
    \else\let\nextsp\skipspaces
      \ifx\p\space\else\addtokens{\filename}{\PP}%
        \advance\filenamelength by 1
      \fi
    \fi
    \nextsp}
  \def\getfilename#1{\filenamelength=0\expandafter\skipspaces#1|\relax}
  \ifnum\pdftexversion < 14
    \let \startlink \pdfannotlink
  \else
    \let \startlink \pdfstartlink
  \fi
  \def\pdfurl#1{%
    \begingroup
      \normalturnoffactive\def\@@{@@}%
      \leavevmode\Red
      \startlink attr{/Border [0 0 0]}%
        user{/Subtype /Link /A << /S /URI /URI (#1) >>}%
        % #1
    \endgroup}
  \def\pdfgettoks#1.{\setbox\boxA=\hbox{\toksA={#1.}\toksB={}\maketoks}}
  \def\addtokens#1#2{\edef\addtoks{\noexpand#1={\the#1#2}}\addtoks}
  \def\adn#1{\addtokens{\toksC}{#1}\global\countA=1\let\next=\maketoks}
  \def\poptoks#1#2|ENDTOKS|{\let\first=#1\toksD={#1}\toksA={#2}}
  \def\maketoks{%
    \expandafter\poptoks\the\toksA|ENDTOKS|
    \ifx\first0\adn0
    \else\ifx\first1\adn1 \else\ifx\first2\adn2 \else\ifx\first3\adn3
    \else\ifx\first4\adn4 \else\ifx\first5\adn5 \else\ifx\first6\adn6
    \else\ifx\first7\adn7 \else\ifx\first8\adn8 \else\ifx\first9\adn9 
    \else
      \ifnum0=\countA\else\makelink\fi
      \ifx\first.\let\next=\done\else
        \let\next=\maketoks
        \addtokens{\toksB}{\the\toksD}
        \ifx\first,\addtokens{\toksB}{\space}\fi
      \fi
    \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
    \next}
  \def\makelink{\addtokens{\toksB}%
    {\noexpand\pdflink{\the\toksC}}\toksC={}\global\countA=0}
  \def\pdflink#1{%
    \startlink attr{/Border [0 0 0]} goto name{\mkpgn{#1}}
    \linkcolor #1\endlink}
  \def\mkpgn#1{#1@@} 
  \def\done{\edef\st{\global\noexpand\toksA={\the\toksB}}\st}
\fi % \ifx\pdfoutput
d1193 17
a1209 11
% Fonts for indices, footnotes, small examples (9pt).
\setfont\smallrm\rmshape{9}{1000}
\setfont\smalltt\ttshape{9}{1000}
\setfont\smallbf\bfshape{10}{900}
\setfont\smallit\itshape{9}{1000}
\setfont\smallsl\slshape{9}{1000}
\setfont\smallsf\sfshape{9}{1000}
\setfont\smallsc\scshape{10}{900}
\setfont\smallttsl\ttslshape{10}{900}
\font\smalli=cmmi9
\font\smallsy=cmsy9
d1323 5
a1327 6
\def\smallfonts{%
  \let\tenrm=\smallrm \let\tenit=\smallit \let\tensl=\smallsl
  \let\tenbf=\smallbf \let\tentt=\smalltt \let\smallcaps=\smallsc
  \let\tensf=\smallsf \let\teni=\smalli \let\tensy=\smallsy
  \let\tenttsl=\smallttsl
  \resetmathfonts \setleading{11pt}}
d1376 3
a1378 3
\setfont\keyrm\rmshape{8}{1000}
\font\keysy=cmsy9
\def\key#1{{\keyrm\textfont2=\keysy \leavevmode\hbox{%
d1482 7
a1488 11
% @@uref (abbreviation for `urlref') takes an optional (comma-separated)
% second argument specifying the text to display and an optional third
% arg as text to display instead of (rather than in addition to) the url
% itself.  First (mandatory) arg is the url.  Perhaps eventually put in
% a hypertex \special here.
%
\def\uref#1{\douref #1,,,\finish}
\def\douref#1,#2,#3,#4\finish{\begingroup
  \unsepspaces
  \pdfurl{#1}%
  \setbox0 = \hbox{\ignorespaces #3}%
d1490 1
a1490 1
    \unhbox0 % third arg given, show only that
d1492 1
a1492 10
    \setbox0 = \hbox{\ignorespaces #2}%
    \ifdim\wd0 > 0pt
      \ifpdf
        \unhbox0             % PDF: 2nd arg given, show only it
      \else
        \unhbox0\ (\code{#1})% DVI: 2nd arg given, show both it and url
      \fi
    \else
      \code{#1}% only url given, so show it
    \fi
d1494 1
a1494 2
  \endlink
\endgroup}
d1496 2
a1497 3
% rms does not like angle brackets --karl, 17may97.
% So now @@email is just like @@uref, unless we are pdf.
% 
d1499 1
a1499 12
\ifpdf
  \def\email#1{\doemail#1,,\finish}
  \def\doemail#1,#2,#3\finish{\begingroup
    \unsepspaces
    \pdfurl{mailto:#1}%
    \setbox0 = \hbox{\ignorespaces #2}%
    \ifdim\wd0>0pt\unhbox0\else\code{#1}\fi
    \endlink
  \endgroup}
\else
  \let\email=\uref
\fi
d1542 2
a1543 2
% user says @@setcontentsaftertitlepage or @@setshortcontentsaftertitlepage.
%
a1617 2
   \ifpdf \pdfmakepagedesttrue \fi
   %
d1752 14
a1765 8
\def\today{%
  \number\day\space
  \ifcase\month
  \or\putwordMJan\or\putwordMFeb\or\putwordMMar\or\putwordMApr
  \or\putwordMMay\or\putwordMJun\or\putwordMJul\or\putwordMAug
  \or\putwordMSep\or\putwordMOct\or\putwordMNov\or\putwordMDec
  \fi
  \space\number\year}
d1767 1
a1767 3
% @@settitle line...  specifies the title of the document, for headings.
% It generates no output of its own.
\def\thistitle{\putwordNoTitle}
d1844 1
a1844 1
    % following text (if any) will end up on the same line.
d2141 1
a2141 1
%
d2148 4
a2151 9
% #1 is the part of the @@columnfraction before the decimal point, which
% is presumably either 0 or the empty string (but we don't check, we
% just throw it away).  #2 is the decimal part, which we use as the
% percent of \hsize for this column.
\def\pickupwholefraction#1.#2 {%
  \global\advance\colcount by 1
  \expandafter\xdef\csname col\the\colcount\endcsname{.#2\hsize}%
  \setuptable
}
d2154 4
a2157 4
\def\setuptable#1{%
  \def\firstarg{#1}%
  \ifx\firstarg\xendsetuptable
    \let\go = \relax
d2159 5
a2163 16
    \ifx\firstarg\xcolumnfractions
      \global\setpercenttrue
    \else
      \ifsetpercent
         \let\go\pickupwholefraction
      \else
         \global\advance\colcount by 1
         \setbox0=\hbox{#1\unskip }% Add a normal word space as a separator;
                            % typically that is always in the input, anyway.
         \expandafter\xdef\csname col\the\colcount\endcsname{\the\wd0}%
      \fi
    \fi
    \ifx\go\pickupwholefraction
      % Put the argument back for the \pickupwholefraction call, so
      % we'll always have a period there to be parsed.
      \def\go{\pickupwholefraction#1}%
d2165 4
a2168 1
      \let\go = \setuptable
d2170 3
a2172 3
  \fi
  \go
}
d2174 4
a2177 5
% This used to have \hskip1sp.  But then the space in a template line is
% not enough.  That is bad.  So let's go back to just & until we
% encounter the problem it was intended to solve again.
% --karl, nathan@@acm.org, 20apr99.
\def\tab{&}
d2180 1
a2180 1
%
d2219 1
a2219 1
  %
d2222 1
a2222 1
  %
d2227 1
a2227 1
  %
d2234 7
a2240 354
    \ifsetpercent \else
      % If user has not set preamble in terms of percent of \hsize
      % we will advance \hsize by \multitablecolspace.
      \advance\hsize by \multitablecolspace
    \fi
   % In either case we will make \leftskip=\multitablecolspace:
  \leftskip=\multitablecolspace
  \fi
  % Ignoring space at the beginning and end avoids an occasional spurious
  % blank line, when TeX decides to break the line at the space before the
  % box from the multistrut, so the strut ends up on a line by itself.
  % For example:
  % @@multitable @@columnfractions .11 .89
  % @@item @@code{#}
  % @@tab Legal holiday which is valid in major parts of the whole country.
  % Is automatically provided with highlighting sequences respectively marking
  % characters.
  \noindent\ignorespaces##\unskip\multistrut}\cr
}

\def\setmultitablespacing{% test to see if user has set \multitablelinespace.
% If so, do nothing. If not, give it an appropriate dimension based on
% current baselineskip.
\ifdim\multitablelinespace=0pt
\setbox0=\vbox{X}\global\multitablelinespace=\the\baselineskip
\global\advance\multitablelinespace by-\ht0
%% strut to put in table in case some entry doesn't have descenders,
%% to keep lines equally spaced
\let\multistrut = \strut
\else
%% FIXME: what is \box0 supposed to be?
\gdef\multistrut{\vrule height\multitablelinespace depth\dp0
width0pt\relax} \fi
%% Test to see if parskip is larger than space between lines of
%% table. If not, do nothing.
%%        If so, set to same dimension as multitablelinespace.
\ifdim\multitableparskip>\multitablelinespace
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi%
\ifdim\multitableparskip=0pt
\global\multitableparskip=\multitablelinespace
\global\advance\multitableparskip-7pt %% to keep parskip somewhat smaller
                                      %% than skip between lines in the table.
\fi}


\message{conditionals,}
% Prevent errors for section commands.
% Used in @@ignore and in failing conditionals.
\def\ignoresections{%
  \let\chapter=\relax
  \let\unnumbered=\relax
  \let\top=\relax
  \let\unnumberedsec=\relax
  \let\unnumberedsection=\relax
  \let\unnumberedsubsec=\relax
  \let\unnumberedsubsection=\relax
  \let\unnumberedsubsubsec=\relax
  \let\unnumberedsubsubsection=\relax
  \let\section=\relax
  \let\subsec=\relax
  \let\subsubsec=\relax
  \let\subsection=\relax
  \let\subsubsection=\relax
  \let\appendix=\relax
  \let\appendixsec=\relax
  \let\appendixsection=\relax
  \let\appendixsubsec=\relax
  \let\appendixsubsection=\relax
  \let\appendixsubsubsec=\relax
  \let\appendixsubsubsection=\relax
  \let\contents=\relax
  \let\smallbook=\relax
  \let\titlepage=\relax
}

% Used in nested conditionals, where we have to parse the Texinfo source
% and so want to turn off most commands, in case they are used
% incorrectly.
%
\def\ignoremorecommands{%
  \let\defcodeindex = \relax
  \let\defcv = \relax
  \let\deffn = \relax
  \let\deffnx = \relax
  \let\defindex = \relax
  \let\defivar = \relax
  \let\defmac = \relax
  \let\defmethod = \relax
  \let\defop = \relax
  \let\defopt = \relax
  \let\defspec = \relax
  \let\deftp = \relax
  \let\deftypefn = \relax
  \let\deftypefun = \relax
  \let\deftypeivar = \relax
  \let\deftypeop = \relax
  \let\deftypevar = \relax
  \let\deftypevr = \relax
  \let\defun = \relax
  \let\defvar = \relax
  \let\defvr = \relax
  \let\ref = \relax
  \let\xref = \relax
  \let\printindex = \relax
  \let\pxref = \relax
  \let\settitle = \relax
  \let\setchapternewpage = \relax
  \let\setchapterstyle = \relax
  \let\everyheading = \relax
  \let\evenheading = \relax
  \let\oddheading = \relax
  \let\everyfooting = \relax
  \let\evenfooting = \relax
  \let\oddfooting = \relax
  \let\headings = \relax
  \let\include = \relax
  \let\lowersections = \relax
  \let\down = \relax
  \let\raisesections = \relax
  \let\up = \relax
  \let\set = \relax
  \let\clear = \relax
  \let\item = \relax
}

% Ignore @@ignore ... @@end ignore.
%
\def\ignore{\doignore{ignore}}

% Ignore @@ifinfo, @@ifhtml, @@ifnottex, @@html, @@menu, and @@direntry text.
%
\def\ifinfo{\doignore{ifinfo}}
\def\ifhtml{\doignore{ifhtml}}
\def\ifnottex{\doignore{ifnottex}}
\def\html{\doignore{html}}
\def\menu{\doignore{menu}}
\def\direntry{\doignore{direntry}}

% @@dircategory CATEGORY  -- specify a category of the dir file
% which this file should belong to.  Ignore this in TeX.
\let\dircategory = \comment

% Ignore text until a line `@@end #1'.
%
\def\doignore#1{\begingroup
  % Don't complain about control sequences we have declared \outer.
  \ignoresections
  %
  % Define a command to swallow text until we reach `@@end #1'.
  % This @@ is a catcode 12 token (that is the normal catcode of @@ in
  % this texinfo.tex file).  We change the catcode of @@ below to match.
  \long\def\doignoretext##1@@end #1{\enddoignore}%
  %
  % Make sure that spaces turn into tokens that match what \doignoretext wants.
  \catcode32 = 10
  %
  % Ignore braces, too, so mismatched braces don't cause trouble.
  \catcode`\{ = 9
  \catcode`\} = 9
  %
  % We must not have @@c interpreted as a control sequence.
  \catcode`\@@ = 12
  %
  % Make the letter c a comment character so that the rest of the line
  % will be ignored. This way, the document can have (for example)
  %   @@c @@end ifinfo
  % and the @@end ifinfo will be properly ignored.
  % (We've just changed @@ to catcode 12.)
  \catcode`\c = 14
  %
  % And now expand that command.
  \doignoretext
}

% What we do to finish off ignored text.
%
\def\enddoignore{\endgroup\ignorespaces}%

\newif\ifwarnedobs\warnedobsfalse
\def\obstexwarn{%
  \ifwarnedobs\relax\else
  % We need to warn folks that they may have trouble with TeX 3.0.
  % This uses \immediate\write16 rather than \message to get newlines.
    \immediate\write16{}
    \immediate\write16{WARNING: for users of Unix TeX 3.0!}
    \immediate\write16{This manual trips a bug in TeX version 3.0 (tex hangs).}
    \immediate\write16{If you are running another version of TeX, relax.}
    \immediate\write16{If you are running Unix TeX 3.0, kill this TeX process.}
    \immediate\write16{  Then upgrade your TeX installation if you can.}
    \immediate\write16{  (See ftp://ftp.gnu.org/pub/gnu/TeX.README.)}
    \immediate\write16{If you are stuck with version 3.0, run the}
    \immediate\write16{  script ``tex3patch'' from the Texinfo distribution}
    \immediate\write16{  to use a workaround.}
    \immediate\write16{}
    \global\warnedobstrue
    \fi
}

% **In TeX 3.0, setting text in \nullfont hangs tex.  For a
% workaround (which requires the file ``dummy.tfm'' to be installed),
% uncomment the following line:
%%%%%\font\nullfont=dummy\let\obstexwarn=\relax

% Ignore text, except that we keep track of conditional commands for
% purposes of nesting, up to an `@@end #1' command.
%
\def\nestedignore#1{%
  \obstexwarn
  % We must actually expand the ignored text to look for the @@end
  % command, so that nested ignore constructs work.  Thus, we put the
  % text into a \vbox and then do nothing with the result.  To minimize
  % the change of memory overflow, we follow the approach outlined on
  % page 401 of the TeXbook: make the current font be a dummy font.
  %
  \setbox0 = \vbox\bgroup
    % Don't complain about control sequences we have declared \outer.
    \ignoresections
    %
    % Define `@@end #1' to end the box, which will in turn undefine the
    % @@end command again.
    \expandafter\def\csname E#1\endcsname{\egroup\ignorespaces}%
    %
    % We are going to be parsing Texinfo commands.  Most cause no
    % trouble when they are used incorrectly, but some commands do
    % complicated argument parsing or otherwise get confused, so we
    % undefine them.
    %
    % We can't do anything about stray @@-signs, unfortunately;
    % they'll produce `undefined control sequence' errors.
    \ignoremorecommands
    %
    % Set the current font to be \nullfont, a TeX primitive, and define
    % all the font commands to also use \nullfont.  We don't use
    % dummy.tfm, as suggested in the TeXbook, because not all sites
    % might have that installed.  Therefore, math mode will still
    % produce output, but that should be an extremely small amount of
    % stuff compared to the main input.
    %
    \nullfont
    \let\tenrm=\nullfont \let\tenit=\nullfont \let\tensl=\nullfont
    \let\tenbf=\nullfont \let\tentt=\nullfont \let\smallcaps=\nullfont
    \let\tensf=\nullfont
    % Similarly for index fonts (mostly for their use in smallexample).
    \let\smallrm=\nullfont \let\smallit=\nullfont \let\smallsl=\nullfont
    \let\smallbf=\nullfont \let\smalltt=\nullfont \let\smallsc=\nullfont
    \let\smallsf=\nullfont
    %
    % Don't complain when characters are missing from the fonts.
    \tracinglostchars = 0
    %
    % Don't bother to do space factor calculations.
    \frenchspacing
    %
    % Don't report underfull hboxes.
    \hbadness = 10000
    %
    % Do minimal line-breaking.
    \pretolerance = 10000
    %
    % Do not execute instructions in @@tex
    \def\tex{\doignore{tex}}%
    % Do not execute macro definitions.
    % `c' is a comment character, so the word `macro' will get cut off.
    \def\macro{\doignore{ma}}%
}

% @@set VAR sets the variable VAR to an empty value.
% @@set VAR REST-OF-LINE sets VAR to the value REST-OF-LINE.
%
% Since we want to separate VAR from REST-OF-LINE (which might be
% empty), we can't just use \parsearg; we have to insert a space of our
% own to delimit the rest of the line, and then take it out again if we
% didn't need it.  Make sure the catcode of space is correct to avoid
% losing inside @@example, for instance.
%
\def\set{\begingroup\catcode` =10
  \catcode`\-=12 \catcode`\_=12 % Allow - and _ in VAR.
  \parsearg\setxxx}
\def\setxxx#1{\setyyy#1 \endsetyyy}
\def\setyyy#1 #2\endsetyyy{%
  \def\temp{#2}%
  \ifx\temp\empty \global\expandafter\let\csname SET#1\endcsname = \empty
  \else \setzzz{#1}#2\endsetzzz % Remove the trailing space \setxxx inserted.
  \fi
  \endgroup
}
% Can't use \xdef to pre-expand #2 and save some time, since \temp or
% \next or other control sequences that we've defined might get us into
% an infinite loop. Consider `@@set foo @@cite{bar}'.
\def\setzzz#1#2 \endsetzzz{\expandafter\gdef\csname SET#1\endcsname{#2}}

% @@clear VAR clears (i.e., unsets) the variable VAR.
%
\def\clear{\parsearg\clearxxx}
\def\clearxxx#1{\global\expandafter\let\csname SET#1\endcsname=\relax}

% @@value{foo} gets the text saved in variable foo.
{
  \catcode`\_ = \active
  %
  % We might end up with active _ or - characters in the argument if
  % we're called from @@code, as @@code{@@value{foo-bar_}}.  So \let any
  % such active characters to their normal equivalents.
  \gdef\value{\begingroup
    \catcode`\-=12 \catcode`\_=12
    \indexbreaks \let_\normalunderscore
    \valuexxx}
}
\def\valuexxx#1{\expandablevalue{#1}\endgroup}

% We have this subroutine so that we can handle at least some @@value's
% properly in indexes (we \let\value to this in \indexdummies).  Ones
% whose names contain - or _ still won't work, but we can't do anything
% about that.  The command has to be fully expandable, since the result
% winds up in the index file.  This means that if the variable's value
% contains other Texinfo commands, it's almost certain it will fail
% (although perhaps we could fix that with sufficient work to do a
% one-level expansion on the result, instead of complete).
%
\def\expandablevalue#1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    {[No value for ``#1'']}%
  \else
    \csname SET#1\endcsname
  \fi
}

% @@ifset VAR ... @@end ifset reads the `...' iff VAR has been defined
% with @@set.
%
\def\ifset{\parsearg\ifsetxxx}
\def\ifsetxxx #1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \expandafter\ifsetfail
  \else
    \expandafter\ifsetsucceed
  \fi
}
\def\ifsetsucceed{\conditionalsucceed{ifset}}
\def\ifsetfail{\nestedignore{ifset}}
\defineunmatchedend{ifset}

% @@ifclear VAR ... @@end ifclear reads the `...' iff VAR has never been
% defined with @@set, or has been undefined with @@clear.
%
\def\ifclear{\parsearg\ifclearxxx}
\def\ifclearxxx #1{%
  \expandafter\ifx\csname SET#1\endcsname\relax
    \expandafter\ifclearsucceed
  \else
    \expandafter\ifclearfail
d2242 10
a2252 3
\def\ifclearsucceed{\conditionalsucceed{ifclear}}
\def\ifclearfail{\nestedignore{ifclear}}
\defineunmatchedend{ifclear}
d2254 23
a2276 36
% @@iftex, @@ifnothtml, @@ifnotinfo always succeed; we read the text
% following, through the first @@end iftex (etc.).  Make `@@end iftex'
% (etc.) valid only after an @@iftex.
%
\def\iftex{\conditionalsucceed{iftex}}
\def\ifnothtml{\conditionalsucceed{ifnothtml}}
\def\ifnotinfo{\conditionalsucceed{ifnotinfo}}
\defineunmatchedend{iftex}
\defineunmatchedend{ifnothtml}
\defineunmatchedend{ifnotinfo}

% We can't just want to start a group at @@iftex (for example) and end it
% at @@end iftex, since then @@set commands inside the conditional have no
% effect (they'd get reverted at the end of the group).  So we must
% define \Eiftex to redefine itself to be its previous value.  (We can't
% just define it to fail again with an ``unmatched end'' error, since
% the @@ifset might be nested.)
%
\def\conditionalsucceed#1{%
  \edef\temp{%
    % Remember the current value of \E#1.
    \let\nece{prevE#1} = \nece{E#1}%
    %
    % At the `@@end #1', redefine \E#1 to be its previous value.
    \def\nece{E#1}{\let\nece{E#1} = \nece{prevE#1}}%
  }%
  \temp
}

% We need to expand lots of \csname's, but we don't want to expand the
% control sequences after we've constructed them.
%
\def\nece#1{\expandafter\noexpand\csname#1\endcsname}

% @@defininfoenclose.
\let\definfoenclose=\comment
d2391 2
a2392 5
% Need these in case \tex is in effect and \{ is a \delimiter again.
% But can't use \lbracecmd and \rbracecmd because texindex assumes
% braces and backslashes are used only as delimiters.  
\let\{ = \mylbrace
\let\} = \myrbrace
a2413 5
\def\uref##1{\realbackslash uref {##1}}%
\def\url##1{\realbackslash url {##1}}%
\def\env##1{\realbackslash env {##1}}%
\def\command##1{\realbackslash command {##1}}%
\def\option##1{\realbackslash option {##1}}%
a2428 1
\def\acronym##1{\realbackslash acronym {##1}}%
a2435 2
% Turn off macro expansion
\turnoffmacros
a2491 6
\let\url=\indexdummyfont
\let\uref=\indexdummyfont
\let\env=\indexdummyfont
\let\acronym=\indexdummyfont
\let\command=\indexdummyfont
\let\option=\indexdummyfont
d2516 1
a2516 1
%
d2523 1
a2523 1
%
d2548 2
a2549 2
        % First process the index entry with all font commands turned
        % off to get the string to sort by.
d2552 2
a2553 1
        % Now the real index entry with the fonts.
a2554 11
        %
        % If third (subentry) arg is present, add it to the index
        % string.  And include a space.
        \ifx\thirdarg\emptymacro \else
          \toks0 = \expandafter{\the\toks0 \space #3}%
        \fi
        %
        % Set up the complete index entry, with both the sort key
        % and the original text, including any font commands.  We write
        % three arguments to \entry to the .?? file, texindex reduces to
        % two when writing the .??s sorted result.
d2560 6
d2577 1
a2577 1
        %
d2580 1
a2580 1
        %
d2582 1
a2582 1
        %
d2591 1
a2591 1
          %
d2639 1
a2639 1
  \smallfonts \rm
d2655 1
a2655 1
    \putwordIndexNonexistent
d2663 1
a2663 1
      \putwordIndexIsEmpty
d2688 1
a2688 1
  %
d2696 1
a2696 1
  %
d2766 1
a2766 5
    \ifpdf
      \pdfgettoks#2.\ \the\toksA % The page number ends the paragraph.
    \else
      \ #2% The page number ends the paragraph.
    \fi
d2795 2
a2796 2
  \output = {%
    %
d2801 6
a2806 6
    % that case we just ship out what is in \partialpage with the normal
    % output routine.  Generally, \partialpage will be empty when this
    % runs and this will be a no-op.  See the indexspread.tex test case.
    \ifvoid\partialpage \else
      \onepageout{\pagecontents\partialpage}%
    \fi
d2808 5
a2812 7
    \global\setbox\partialpage = \vbox{%
      % Unvbox the main output page.
      \unvbox\PAGE
      \kern-\topskip \kern\baselineskip
    }%
  }%
  \eject % run that output routine to set \partialpage
d2846 1
a2846 1
%
d2864 1
d2873 1
a2873 1
    % Split the last of the double-column material.  Leave it on the
d2885 5
a2892 6
  %
  % \pagegoal was set to the doubled \vsize above, since we restarted
  % the current page.  We're now back to normal single-column
  % typesetting, so reset \pagegoal to the normal \vsize (after the
  % \endgroup where \vsize got restored).
  \pagegoal = \vsize
d2923 1
a2923 1
% Chapters, sections, etc.
d2932 1
a2932 37
% \def\appendixletter{\char\the\appendixno}
% We do the following for the sake of pdftex, which needs the actual
% letter in the expansion, not just typeset.
\def\appendixletter{%
  \ifnum\appendixno=`A A%
  \else\ifnum\appendixno=`B B%
  \else\ifnum\appendixno=`C C%
  \else\ifnum\appendixno=`D D%
  \else\ifnum\appendixno=`E E%
  \else\ifnum\appendixno=`F F%
  \else\ifnum\appendixno=`G G%
  \else\ifnum\appendixno=`H H%
  \else\ifnum\appendixno=`I I%
  \else\ifnum\appendixno=`J J%
  \else\ifnum\appendixno=`K K%
  \else\ifnum\appendixno=`L L%
  \else\ifnum\appendixno=`M M%
  \else\ifnum\appendixno=`N N%
  \else\ifnum\appendixno=`O O%
  \else\ifnum\appendixno=`P P%
  \else\ifnum\appendixno=`Q Q%
  \else\ifnum\appendixno=`R R%
  \else\ifnum\appendixno=`S S%
  \else\ifnum\appendixno=`T T%
  \else\ifnum\appendixno=`U U%
  \else\ifnum\appendixno=`V V%
  \else\ifnum\appendixno=`W W%
  \else\ifnum\appendixno=`X X%
  \else\ifnum\appendixno=`Y Y%
  \else\ifnum\appendixno=`Z Z%
  % The \the is necessary, despite appearances, because \appendixletter is
  % expanded while writing the .toc file.  \char\appendixno is not
  % expandable, thus it is written literally, thus all appendixes come out
  % with the same letter (or @@) in the toc without it.
  \else\char\the\appendixno
  \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
  \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi}
a3404 1
% Table of contents.
d3410 1
a3410 1
%
d3413 1
a3413 1
%
d3429 1
a3429 1
%
d3457 1
a3457 1
   \startcontents{\putwordTOC}%
a3463 2
     \contentsalignmacro % in case @@setchapternewpage odd is in effect
     \pdfmakeoutlines
d3471 1
a3471 1
   \startcontents{\putwordShortTOC}%
a3492 1
     \contentsalignmacro % in case @@setchapternewpage odd is in effect
a3498 4
\ifpdf
  \pdfcatalog{/PageMode /UseOutlines}%
\fi

d3509 1
a3509 1
  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno\bgroup#3\egroup}%
d3517 3
a3519 3
%
\newdimen\shortappendixwidth
%
a3520 4
  % Compute width of word "Appendix", may change with language.
  \setbox0 = \hbox{\shortcontrm \putwordAppendix}%
  \shortappendixwidth = \wd0
  %
d3535 1
a3535 1
\def\shortunnumberedentry#1#2{\tocentry{#1}{\doshortpageno\bgroup#2\egroup}}
d3562 1
a3562 1
     \tocentry{#1}{\dopageno\bgroup#2\egroup}%
d3569 1
a3569 1
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
d3574 1
a3574 1
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
d3579 1
a3579 1
  \tocentry{#1}{\dopageno\bgroup#2\egroup}%
a3606 1
% @@foo ... @@end foo.
d3817 1
a3817 1
%
d3842 1
a3842 1
%
d3856 1
a3856 1
  \smallfonts
d3872 1
a3872 1
  \smallfonts \rm
d3889 1
a3889 1
  \smallfonts \rm
d3898 1
a3898 1
%
d3930 2
a3931 3
% @@defun etc.

% Allow user to change definition object font (\df) internally
d3985 1
a3985 1
\let\ampnr = \&
a3988 6
% Active &'s sneak into the index arguments, so make sure it's defined.
{
  \catcode`& = 13
  \global\let& = \ampnr
}

d4040 1
a4040 1
%
d4052 1
a4052 1
% Used for @@deftypemethod and @@deftypeivar.
d4056 1
a4056 1
% #4, delimited by a space, is the class name.
a4057 16
%
\def\deftypemethparsebody#1#2#3#4 #5 {\begingroup\inENV
  \medbreak
  \def#1{\endgraf\endgroup\medbreak}%
  \def#2##1 ##2 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}{##2}}}%
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
  \begingroup\obeylines\activeparens\spacesplit{#3{#4}{#5}}}

% Used for @@deftypeop.  The change from \deftypemethparsebody is an
% extra argument at the beginning which is the `category', instead of it
% being the hardwired string `Method' or `Instance Variable'.  We have
% to account for this both in the \...x definition and in parsing the
% input at hand.  Thus also need a control sequence (passed as #5) for
% the \E... definition to assign the category name to.
d4059 10
a4068 10
\def\deftypeopparsebody#1#2#3#4#5 #6 {\begingroup\inENV
  \medbreak
  \def#1{\endgraf\endgroup\medbreak}%
  \def#2##1 ##2 ##3 {%
    \def#4{##1}%
    \begingroup\obeylines\activeparens\spacesplit{#3{##2}{##3}}}%
  \parindent=0in
  \advance\leftskip by \defbodyindent
  \exdentamount=\defbodyindent
  \begingroup\obeylines\activeparens\spacesplit{#3{#5}{#6}}}
d4179 1
a4179 1
\def\defunargs#1{\functionparens \sl
d4182 1
a4182 2
% Set the font temporarily and use \font in case \setfont made \tensl a macro.
{\tensl\hyphenchar\font=0}%
d4184 1
a4184 1
{\tensl\hyphenchar\font=45}%
d4218 1
a4218 1
\begingroup\defname {#1}{\putwordDeffunc}%
d4232 1
a4232 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{\putwordDeftypefun}%
d4263 1
a4263 1
\begingroup\defname {#1}{\putwordDefmac}%
d4273 1
a4273 1
\begingroup\defname {#1}{\putwordDefspec}%
d4278 13
d4292 1
a4292 1
%
d4295 2
a4296 2
%
\def\defopheader#1#2#3{%
d4298 1
a4298 1
\begingroup\defname {#2}{\defoptype\ \putwordon\ #1}%
d4302 1
a4302 17
% @@deftypeop CATEGORY CLASS TYPE OPERATION ARG...
%
\def\deftypeop #1 {\def\deftypeopcategory{#1}%
  \deftypeopparsebody\Edeftypeop\deftypeopx\deftypeopheader
                       \deftypeopcategory}
%
% #1 is the class name, #2 the data type, #3 the operation name, #4 the args.
\def\deftypeopheader#1#2#3#4{%
  \dosubind{fn}{\code{#3}}{\putwordon\ \code{#1}}% entry in function index
  \begingroup
    \defname{\defheaderxcond#2\relax$$$#3}
            {\deftypeopcategory\ \putwordon\ \code{#1}}%
    \deftypefunargs{#4}%
  \endgroup
}

% @@deftypemethod CLASS TYPE METHOD ARG...
a4315 14
% @@deftypeivar CLASS TYPE VARNAME
%
\def\deftypeivar{%
  \deftypemethparsebody\Edeftypeivar\deftypeivarx\deftypeivarheader}
%
% #1 is the class name, #2 the data type, #3 the variable name.
\def\deftypeivarheader#1#2#3{%
  \dosubind{vr}{\code{#3}}{\putwordof\ \code{#1}}% entry in variable index
  \begingroup
    \defname{#3}{\putwordInstanceVariableof\ \code{#1}}%
    \defvarargs{#3}%
  \endgroup
}

d4335 2
a4336 2
\dosubind {vr}{\code{#2}}{\putwordof\ #1}% Make entry in var index
\begingroup\defname {#2}{\defcvtype\ \putwordof\ #1}%
d4340 2
a4341 2
% @@defivar CLASS VARNAME == @@defcv {Instance Variable} CLASS VARNAME
%
d4343 5
a4347 7
%
\def\defivarheader#1#2#3{%
  \dosubind {vr}{\code{#2}}{\putwordof\ #1}% entry in var index
  \begingroup
    \defname{#2}{\putwordInstanceVariableof\ #1}%
    \defvarargs{#3}%
  \endgroup
d4350 10
a4359 1
% @@defvar
d4379 1
a4379 1
\begingroup\defname {#1}{\putwordDefvar}%
d4388 1
a4388 1
\begingroup\defname {#1}{\putwordDefopt}%
d4400 1
a4400 1
\begingroup\defname {\defheaderxcond#1\relax$$$#2}{\putwordDeftypevar}%
d4416 9
d4437 4
a4440 22
% These definitions are used if you use @@defunx (etc.)
% anywhere other than immediately after a @@defun or @@defunx.
% 
\def\defcvx#1 {\errmessage{@@defcvx in invalid context}}
\def\deffnx#1 {\errmessage{@@deffnx in invalid context}}
\def\defivarx#1 {\errmessage{@@defivarx in invalid context}}
\def\defmacx#1 {\errmessage{@@defmacx in invalid context}}
\def\defmethodx#1 {\errmessage{@@defmethodx in invalid context}}
\def\defoptx #1 {\errmessage{@@defoptx in invalid context}}
\def\defopx#1 {\errmessage{@@defopx in invalid context}}
\def\defspecx#1 {\errmessage{@@defspecx in invalid context}}
\def\deftpx#1 {\errmessage{@@deftpx in invalid context}}
\def\deftypefnx#1 {\errmessage{@@deftypefnx in invalid context}}
\def\deftypefunx#1 {\errmessage{@@deftypefunx in invalid context}}
\def\deftypeivarx#1 {\errmessage{@@deftypeivarx in invalid context}}
\def\deftypemethodx#1 {\errmessage{@@deftypemethodx in invalid context}}
\def\deftypeopx#1 {\errmessage{@@deftypeopx in invalid context}}
\def\deftypevarx#1 {\errmessage{@@deftypevarx in invalid context}}
\def\deftypevrx#1 {\errmessage{@@deftypevrx in invalid context}}
\def\defunx#1 {\errmessage{@@defunx in invalid context}}
\def\defvarx#1 {\errmessage{@@defvarx in invalid context}}
\def\defvrx#1 {\errmessage{@@defvrx in invalid context}}
d4446 1
a4446 1
% To do this right we need a feature of e-TeX, \scantokens,
a4451 4
   % Undo catcode changes of \startcontents and \doprintindex
   \catcode`\@@=0 \catcode`\\=12 \escapechar=`\@@
   % Append \endinput to make sure that TeX does not see the ending newline.
   \toks0={#1\endinput}%
d4453 1
a4453 1
   \immediate\write\macscribble{\the\toks0}%
d4462 1
a4462 3
% Undo catcode changes of \startcontents and \doprintindex
\catcode`\@@=0 \catcode`\\=12 \escapechar=`\@@
\let\xeatspaces\eatspaces\scantokens{#1\endinput}\endgroup}
a4467 2
\def\macrolist{}    % List of all defined macros in the form
                    % \do\macro1\do\macro2...
d4499 2
a4500 2
% It's necessary to have hard CRs when the macro is executed. This is
% done by  making ^^M (\endlinechar) catcode 12 when reading the macro
a4516 11
\def\macroargctxt{%
  \catcode`\~=12
  \catcode`\^=12
  \catcode`\_=12
  \catcode`\|=12
  \catcode`\<=12
  \catcode`\>=12
  \catcode`\+=12
  \catcode`\@@=12
  \catcode`\\=12}

d4518 1
a4518 1
% It maps \foo\ => \csname macarg.foo\endcsname => #N
d4537 1
a4537 1
     \expandafter\parsemargdef \argl;%
d4539 3
a4541 1
  \if1\csname ismacro.\the\macname\endcsname
a4542 9
  \else
     \expandafter\ifx\csname \the\macname\endcsname \relax
     \else \errmessage{The name \the\macname\space is reserved}\fi
     \global\cslet{macsave.\the\macname}{\the\macname}%
     \global\expandafter\let\csname ismacro.\the\macname\endcsname=1%
     % Add the macroname to \macrolist
     \toks0 = \expandafter{\macrolist\do}%
     \xdef\macrolist{\the\toks0
       \expandafter\noexpand\csname\the\macname\endcsname}%
d4546 1
a4546 1
  \else \expandafter\parsemacbody
d4551 2
a4552 19
  \if1\csname ismacro.#1\endcsname
    \global\cslet{#1}{macsave.#1}%
    \global\expandafter\let \csname ismacro.#1\endcsname=0%
    % Remove the macro name from \macrolist
    \begingroup
      \edef\tempa{\expandafter\noexpand\csname#1\endcsname}%
      \def\do##1{%
        \def\tempb{##1}%
        \ifx\tempa\tempb
          % remove this
        \else
          \toks0 = \expandafter{\newmacrolist\do}%
          \edef\newmacrolist{\the\toks0\expandafter\noexpand\tempa}%
        \fi}%
      \def\newmacrolist{}%
      % Execute macro list to define \newmacrolist
      \macrolist
      \global\let\macrolist\newmacrolist
    \endgroup
d4554 2
a4555 1
    \errmessage{Macro #1 not defined}%
d4613 1
a4613 3
         \bgroup\noexpand\macroargctxt
         \noexpand\braceorline
         \expandafter\noexpand\csname\the\macname xxx\endcsname}%
d4615 1
a4615 1
         \egroup\noexpand\scanmacro{\temp}}%
d4617 2
a4618 5
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \noexpand\csname\the\macname xx\endcsname}%
      \expandafter\xdef\csname\the\macname xx\endcsname##1{%
          \expandafter\noexpand\csname\the\macname xxx\endcsname ##1,}%
d4622 2
a4623 2
        \csname\the\macname xxx\endcsname
          \paramlist{\egroup\noexpand\scanmacro{\temp}}%
d4633 1
a4633 3
         \bgroup\noexpand\macroargctxt
         \noexpand\braceorline
         \expandafter\noexpand\csname\the\macname xxx\endcsname}%
a4634 1
        \egroup
d4638 2
a4639 5
      \expandafter\xdef\csname\the\macname\endcsname{%
         \bgroup\noexpand\macroargctxt
         \expandafter\noexpand\csname\the\macname xx\endcsname}%
      \expandafter\xdef\csname\the\macname xx\endcsname##1{%
          \expandafter\noexpand\csname\the\macname xxx\endcsname ##1,}%
a4644 1
          \egroup
d4659 1
a4659 1
    \expandafter\parsearg
a4661 16
% We mant to disable all macros during \shipout so that they are not
% expanded by \write.
\def\turnoffmacros{\begingroup \def\do##1{\let\noexpand##1=\relax}%
  \edef\next{\macrolist}\expandafter\endgroup\next}


% @@alias.
% We need some trickery to remove the optional spaces around the equal
% sign.  Just make them active and then expand them all to nothing.
\def\alias{\begingroup\obeyspaces\parsearg\aliasxxx}
\def\aliasxxx #1{\aliasyyy#1\relax}
\def\aliasyyy #1=#2\relax{\ignoreactivespaces
\edef\next{\global\let\expandafter\noexpand\csname#1\endcsname=%
           \expandafter\noexpand\csname#2\endcsname}%
\expandafter\endgroup\next}

a4663 2
% @@xref etc.

d4705 3
a4707 5
%
\newcount\savesfregister
\gdef\savesf{\relax \ifhmode \savesfregister=\spacefactor \fi}
\gdef\restoresf{\relax \ifhmode \spacefactor=\savesfregister \fi}
\gdef\anchor#1{\savesf \setref{#1}{Ynothing}\restoresf \ignorespaces}
d4714 1
a4714 1
%
a4716 1
  \pdfmkdest{#1}%
d4719 1
a4719 1
  \dosetq{#1-snt}{#2}%
a4730 1
  \unsepspaces
a4763 13
  \ifpdf
    \leavevmode
    \getfilename{#4}%
    \ifnum\filenamelength>0
      \startlink attr{/Border [0 0 0]}%
        goto file{\the\filename.pdf} name{#1@@}%
    \else
      \startlink attr{/Border [0 0 0]}%
        goto name{#1@@}%
    \fi
    \linkcolor
  \fi
  %
d4765 1
a4765 1
    \putwordsection{} ``\printednodename'' \putwordin{} \cite{\printedmanual}%
d4778 1
a4778 1
    % [mynode],
a4782 1
  \endlink
d4790 1
a4790 1
  {\let\folio=0%
d4867 1
a4867 1
%
a5018 2
  \smallfonts \rm
  %
d5033 1
a5033 1
\def\@@foot{\strut\par\egroup}
d5092 1
a5092 1
%
a5104 1
% We will only complain once about lack of epsf.tex.
d5108 1
a5108 1
  it from ftp://tug.org/tex/epsf.tex.}
d5110 1
d5128 9
a5136 44
  \ifpdf
    \centerline{\dopdfimage{#1}{#2}{#3}}%
  \else
    % \epsfbox itself resets \epsf?size at each figure.
    \setbox0 = \hbox{\ignorespaces #2}\ifdim\wd0 > 0pt \epsfxsize=#2\relax \fi
    \setbox0 = \hbox{\ignorespaces #3}\ifdim\wd0 > 0pt \epsfysize=#3\relax \fi
    \begingroup
      \catcode`\^^M = 5 % in case we're inside an example
      % If the image is by itself, center it.
      \ifvmode
        \nobreak\bigskip
        % Usually we'll have text after the image which will insert
        % \parskip glue, so insert it here too to equalize the space
        % above and below. 
        \nobreak\vskip\parskip
        \nobreak
        \centerline{\epsfbox{#1.eps}}%
        \bigbreak
      \else
        % In the middle of a paragraph, no extra space.
        \epsfbox{#1.eps}%
      \fi
    \endgroup
  \fi
}


\message{localization,}
% and i18n.

% @@documentlanguage is usually given very early, just after
% @@setfilename.  If done too late, it may not override everything
% properly.  Single argument is the language abbreviation.
% It would be nice if we could set up a hyphenation file here.
%
\def\documentlanguage{\parsearg\dodocumentlanguage}
\def\dodocumentlanguage#1{%
  \tex % read txi-??.tex file in plain TeX.
  % Read the file if it exists.
  \openin 1 txi-#1.tex
  \ifeof1
    \errhelp = \nolanghelp
    \errmessage{Cannot read language file txi-#1.tex}%
    \let\temp = \relax
d5138 1
a5138 1
    \def\temp{\input txi-#1.tex }%
a5139 2
  \temp
  \endgroup
a5140 3
\newhelp\nolanghelp{The given language definition file cannot be found or
is empty.  Maybe you need to install it?  In the current directory
should work if nowhere else does.}
d5143 2
a5144 3
% @@documentencoding should change something in TeX eventually, most
% likely, but for now just recognize it.
\let\documentencoding = \comment
a5145 3

% Page size parameters.
%
d5165 2
a5166 1
% \hsize.  We call this whenever the paper size is set.
d5173 2
a5174 1
    \emergencystretch = .15\hsize
d5190 1
a5190 1
  \advance\outervsize by 2\topandbottommargin
d5267 1
a5267 1
%
d5281 1
a5281 1
%
a5283 1

a5294 1
\catcode`\$=\other
a5302 1
\def\normaldollar{$}
d5313 1
a5313 7
\def\ifusingtt#1#2{\ifdim \fontdimen3\font=0pt #1\else #2\fi}

% Same as above, but check for italic font.  Actually this also catches
% non-italic slanted fonts since it is impossible to distinguish them from
% italic fonts.  But since this is only used by $ and it uses \sl anyway
% this is not a problem.
\def\ifusingit#1#2{\ifdim \fontdimen1\font>0pt #1\else #2\fi}
a5343 2
\catcode`\$=\active
\def${\ifusingit{{\sl\$}}\normaldollar}
d5374 3
d5390 1
a5390 2
@@let+=@@normalplus
@@let$=@@normaldollar}
d5400 1
a5400 2
@@let+=@@normalplus
@@let$=@@normaldollar}
d5419 2
a5420 8
@@gdef@@fixbackslash{%
  @@ifx\@@eatinput @@let\ = @@normalbackslash @@fi
  @@catcode`+=@@active
  @@catcode`@@_=@@active
}

% Say @@foo, not \foo, in error messages.
@@escapechar = `@@@@
d5422 3
a5424 4
% These look ok in all fonts, so just make them not special.  
@@catcode`@@& = @@other
@@catcode`@@# = @@other
@@catcode`@@% = @@other
a5425 1
@@c Set initial fonts.
a5428 1

a5429 1
@@c eval: (add-hook 'write-file-hooks 'time-stamp)
a5430 3
@@c time-stamp-start: "def\\\\texinfoversion{"
@@c time-stamp-format: "%:y-%02m-%02d.%02H"
@@c time-stamp-end: "}"
@


