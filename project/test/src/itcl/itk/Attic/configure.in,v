head	1.6;
access;
symbols
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.3
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.1.1.1
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.2
	gdb_5_3-branch:1.1.1.1.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	ITCL_TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.51;	author kseitz;	state dead;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.26;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.29;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.34;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.22.42.43;	author kseitz;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.07.22.20.41.50;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#--------------------------------------------------------------------
# Sample configure.in for Tcl Extensions.  The only places you should
# need to modify this file are marked by the string __CHANGE__
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# __CHANGE__
# This very first macro is used to verify that the configure script can 
# find the sources.  The argument to AC_INIT should be a unique filename
# for this package, and can be a relative path, such as:
#
# AC_INIT(../generic/tcl.h)
#--------------------------------------------------------------------

AC_INIT(generic/itk.h)
# CYGNUS LOCAL
AC_CONFIG_AUX_DIR(../..)
# END CYGNUS LOCAL

#--------------------------------------------------------------------
# __CHANGE__
# Set your package name and version numbers here.  The NODOT_VERSION is
# required for constructing the library name on systems that don't like
# dots in library names (Windows).  The VERSION variable is used on the
# other systems.
#--------------------------------------------------------------------

PACKAGE=itk

MAJOR_VERSION=3
MINOR_VERSION=2
PATCHLEVEL=.1

VERSION=${MAJOR_VERSION}.${MINOR_VERSION}
NODOT_VERSION=${MAJOR_VERSION}${MINOR_VERSION}


AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

#--------------------------------------------------------------------
# We put this here so that you can compile with -DVERSION="1.2" to
# encode the package version directly into the source files.
#--------------------------------------------------------------------

eval AC_DEFINE_UNQUOTED(VERSION, "${VERSION}")

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

#--------------------------------------------------------------------
# Check whether --enable-gcc or --disable-gcc was given.  Do this 
# before AC_CYGWIN is called so the compiler can 
# be fully tested by built-in autoconf tools.
# This macro also calls AC_PROG_CC to set the compiler if --enable-gcc
# was not used.
#--------------------------------------------------------------------

# CYGNUS LOCAL
dnl SC_ENABLE_GCC
AC_PROG_CC
# END CYGNUS LOCAL
AC_PROG_INSTALL

#--------------------------------------------------------------------
# Checks to see if the make program sets the $MAKE variable.
#--------------------------------------------------------------------

AC_PROG_MAKE_SET

#--------------------------------------------------------------------
# Find ranlib
#--------------------------------------------------------------------

AC_PROG_RANLIB

#--------------------------------------------------------------------
# This macro performs additional compiler tests.
#--------------------------------------------------------------------

AC_CYGWIN

#--------------------------------------------------------------------
# Determines the correct binary file extension (.o, .obj, .exe etc.)
#--------------------------------------------------------------------

AC_OBJEXT
AC_EXEEXT

#--------------------------------------------------------------------
# "cygpath" is used on windows to generate native path names for include
# files.
# These variables should only be used with the compiler and linker since
# they generate native path names.
#
# Unix tclConfig.sh points SRC_DIR at the top-level directory of
# the Tcl sources, while the Windows tclConfig.sh points SRC_DIR at
# the win subdirectory.  Hence the different usages of SRC_DIR below.
#
# This must be done before calling SC_PUBLIC_TCL_HEADERS
#--------------------------------------------------------------------

case "${host}" in
    *mingw32* | *windows32*)
	AC_CHECK_PROG(CYGPATH, cygpath, cygpath -w, echo)
	RELPATH=".. .. bin"
    ;;
    *)
	CYGPATH=echo
	RELPATH=..
    ;;
esac

AC_SUBST(CYGPATH)
AC_SUBST(RELPATH)

#--------------------------------------------------------------------
# Includes for this package
#--------------------------------------------------------------------

# CYGNUS LOCAL
srcdir=`cd ${srcdir} ; pwd`
ITK_SRC_DIR_NATIVE=`${CYGPATH} ${srcdir}`
# END CYGNUS LOCAL
ITK_GENERIC_DIR_NATIVE=`${CYGPATH} ${srcdir}/generic`
ITK_WIN_DIR_NATIVE=`${CYGPATH} ${srcdir}/win`
ITK_UNIX_DIR_NATIVE=`${CYGPATH} ${srcdir}/unix`

case "${host}" in
    *cygwin* | *mingw32* | *windows32*)
	ITK_PLATFORM_DIR_NATIVE=${ITK_WIN_DIR_NATIVE}
    ;;
    *)
	ITK_PLATFORM_DIR_NATIVE=${ITK_UNIX_DIR_NATIVE}
    ;;
esac

ITK_INCLUDES="-I\"${ITK_GENERIC_DIR_NATIVE}\" -I\"${ITK_PLATFORM_DIR_NATIVE}\""

AC_SUBST(ITK_GENERIC_DIR_NATIVE)
AC_SUBST(ITK_WIN_DIR_NATIVE)
AC_SUBST(ITK_UNIX_DIR_NATIVE)
AC_SUBST(ITK_INCLUDES)

#--------------------------------------------------------------------
# Load the tclConfig.sh file
#--------------------------------------------------------------------

SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG

#--------------------------------------------------------------------
# Load the tkConfig.sh file
#--------------------------------------------------------------------

SC_PATH_TKCONFIG
SC_LOAD_TKCONFIG

AC_ARG_WITH(itcl, [  --with-itclinclude=DIR          use Itcl headers from DIR],
        ITCL_LIB_DIR=$withval, ITCL_LIB_DIR=`cd ${srcdir}/../itcl; pwd`)

if test ! -r "${ITCL_LIB_DIR}/generic/itclInt.h" ; then
    AC_MSG_ERROR(Can't find Itcl private header files.  Use --with-itclinclude to specify the directory containing the Itcl private headers on your system.)
fi

ITCL_INCLUDES=-I\"`${CYGPATH} ${ITCL_LIB_DIR}/generic`\"
AC_SUBST(ITCL_INCLUDES)

# CYGNUS LOCAL
CYG_AC_PATH_ITCLCONFIG
CYG_AC_LOAD_ITCLCONFIG

itclstub_LIB_FILE=${ITCL_STUB_LIB_FILE}
AC_SUBST(itclstub_LIB_FILE)

tkstub_LIB_SPEC=${TK_STUB_LIB_SPEC}
AC_SUBST(tkstub_LIB_SPEC)
# END CYGNUS LOCAL

#--------------------------------------------------------------------
# __CHANGE__
# Choose which headers you need.  Extension authors should try very
# hard to only rely on the Tcl public header files.  Internal headers
# contain private data structures and are subject to change without
# notice.
# This must be done AFTER calling SC_PATH_TCLCONFIG/SC_LOAD_TCLCONFIG
# so that we can extract TCL_SRC_DIR from the config file (in the case
# of private headers
#--------------------------------------------------------------------

#SC_PUBLIC_TCL_HEADERS
SC_PRIVATE_TCL_HEADERS

#SC_PUBLIC_TK_HEADERS
SC_PRIVATE_TK_HEADERS

#--------------------------------------------------------------------
# __CHANGE__
# A few miscellaneous platform-specific items:
#
# Define a special symbol for Windows (BUILD_itk in this case) so
# that we create the export library with the dll.  See sha1.h on how
# to use this.
#
# Windows creates a few extra files that need to be cleaned up.
# You can add more files to clean if your extension creates any extra
# files.
#
# Define any extra compiler flags in the PACKAGE_CFLAGS variable.
# These will be appended to the current set of compiler flags for
# your system.
#--------------------------------------------------------------------

case "${host}" in
    *cygwin* | *mingw32* | *windows32*)
	AC_DEFINE_UNQUOTED(BUILD_${PACKAGE})
	CLEANFILES="*.lib *.dll *.exp *.ilk *.pdb vc50.pch"
	PLATFORM_SOURCES='$(WIN_SOURCES)'
	PLATFORM_OBJECTS='$(WIN_OBJECTS)'
	PLATFORM_DIR='$(WIN_DIR)'
    ;;
    *)
	CLEANFILES=
	PLATFORM_SOURCES='$(UNIX_SOURCES)'
	PLATFORM_OBJECTS='$(UNIX_OBJECTS)'
	PLATFORM_DIR='$(UNIX_DIR)'
    ;;
esac

AC_SUBST(CLEANFILES)
AC_SUBST(PLATFORM_SOURCES)
AC_SUBST(PLATFORM_OBJECTS)
AC_SUBST(PLATFORM_DIR)

#--------------------------------------------------------------------
# Check whether --enable-threads or --disable-threads was given.
# So far only Tcl responds to this one.
#--------------------------------------------------------------------

SC_ENABLE_THREADS

#--------------------------------------------------------------------
# The statement below defines a collection of symbols related to
# building as a shared library instead of a static library.
#--------------------------------------------------------------------

SC_ENABLE_SHARED

#--------------------------------------------------------------------
# This macro figures out what flags to use with the compiler/linker
# when building shared/static debug/optimized objects.  This information
# is all taken from the tclConfig.sh file.
#--------------------------------------------------------------------

CFLAGS_DEBUG=${TCL_CFLAGS_DEBUG}
CFLAGS_OPTIMIZE=${TCL_CFLAGS_OPTIMIZE}
LDFLAGS_DEBUG=${TCL_LDFLAGS_DEBUG}
LDFLAGS_OPTIMIZE=${TCL_LDFLAGS_OPTIMIZE}
SHLIB_LD=${TCL_SHLIB_LD}
STLIB_LD=${TCL_STLIB_LD}
SHLIB_CFLAGS=${TCL_SHLIB_CFLAGS}

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(STLIB_LD)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LDFLAGS)

#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols 
# option.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

if test "${SHARED_BUILD}" = "1" ; then
    CFLAGS='${CFLAGS_DEFAULT} ${CFLAGS_WARNING} ${SHLIB_CFLAGS}'
else
    CFLAGS='${CFLAGS_DEFAULT} ${CFLAGS_WARNING}'
fi

#--------------------------------------------------------------------
# Everyone should be linking against the Tcl stub library.  If you
# can't for some reason, remove this definition.  If you aren't using
# stubs, you also need to modify the SHLIB_LD_LIBS setting below to
# link against the non-stubbed Tcl library.
#--------------------------------------------------------------------

if test "${SHARED_BUILD}" = "1" ; then
    AC_DEFINE(USE_TCL_STUBS)
    AC_DEFINE(USE_TK_STUBS)
    AC_DEFINE(USE_ITCL_STUBS)
fi

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the SC_ENABLE_SHARED, SC_ENABLE_SYMBOLS,
# and SC_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

SC_MAKE_LIB

#--------------------------------------------------------------------
# eval these two values to dereference the ${DBGX} variable.
#--------------------------------------------------------------------

eval "SHARED_LIB_SUFFIX=${TCL_SHARED_LIB_SUFFIX}"
eval "UNSHARED_LIB_SUFFIX=${TCL_UNSHARED_LIB_SUFFIX}"

#--------------------------------------------------------------------
# Shared libraries and static libraries have different names.
#--------------------------------------------------------------------

# CYGNUS LOCAL

if test "${SHARED_BUILD}" = "1" ; then
  # FIXME: Need to devise a TCL_TOOL macro to deal with this!
  case "${host}" in
    *mingw32* | *windows32*)
        SHLIB_LD_LIBS="${TCL_BUILD_STUB_LIB_SPEC} ${TCL_SHLIB_LD_LIBS} \
            ${ITCL_BUILD_STUB_LIB_SPEC} ${TK_BUILD_STUB_LIB_SPEC}"
        # Need to link to the .a or .lib not the .dll!
        TCL_TOOL_SHARED_LIB_LONGNAME(ITK_SHLIB_FILE, ${PACKAGE}, ${SHARED_LIB_SUFFIX})
        TCL_TOOL_STATIC_LIB_LONGNAME(ITK_LIB_FILE, ${PACKAGE}, ${UNSHARED_LIB_SUFFIX})
        ITK_TARGET_FILE=${ITK_SHLIB_FILE}
     ;;
    *)
        SHLIB_LD_LIBS="${TK_BUILD_STUB_LIB_SPEC} ${TCL_BUILD_STUB_LIB_SPEC} \
            ${ITCL_BUILD_STUB_LIB_SPEC}"
        TCL_TOOL_SHARED_LIB_LONGNAME(ITK_LIB_FILE, ${PACKAGE}, ${SHARED_LIB_SUFFIX})
        ITK_TARGET_FILE=${ITK_LIB_FILE}
     ;;
  esac
else
  TCL_TOOL_STATIC_LIB_LONGNAME(ITK_LIB_FILE, ${PACKAGE}, ${UNSHARED_LIB_SUFFIX})
  ITK_TARGET_FILE=${ITK_LIB_FILE}
fi

TCL_TOOL_STATIC_LIB_LONGNAME(ITK_STUB_LIB_FILE, ${PACKAGE}stub, ${UNSHARED_LIB_SUFFIX})

AC_SUBST(ITK_LIB_FILE)
AC_SUBST(ITK_STUB_LIB_FILE)

TCL_TOOL_LIB_SHORTNAME(ITK_LIB_FLAG, ${PACKAGE}, ${VERSION})
TCL_TOOL_LIB_SHORTNAME(ITK_STUB_LIB_FLAG, ${PACKAGE}stub, ${VERSION})

TCL_TOOL_LIB_SPEC(ITK_BUILD_LIB_SPEC, `pwd`, ${ITK_LIB_FLAG})
TCL_TOOL_LIB_SPEC(ITK_BUILD_STUB_LIB_SPEC, `pwd`, ${ITK_STUB_LIB_FLAG})
AC_SUBST(ITK_BUILD_LIB_SPEC)
AC_SUBST(ITK_BUILD_STUB_LIB_SPEC)

TCL_TOOL_LIB_SPEC(ITK_LIB_SPEC, ${exec_prefix}/lib, ${ITK_LIB_FLAG})
TCL_TOOL_LIB_SPEC(ITK_STUB_LIB_SPEC, ${exec_prefix}/lib, ${ITK_STUB_LIB_FLAG})
AC_SUBST(ITK_LIB_SPEC)
AC_SUBST(ITK_STUB_LIB_SPEC)

TCL_TOOL_LIB_PATH(ITK_LIB_FULL_PATH, `pwd`, ${ITK_LIB_FILE})
TCL_TOOL_LIB_PATH(ITK_STUB_LIB_FULL_PATH, `pwd`, ${ITK_STUB_LIB_FILE})
AC_SUBST(ITK_LIB_FULL_PATH)
AC_SUBST(ITK_STUB_LIB_FULL_PATH)

itkstub_LIB_FILE=${ITK_STUB_LIB_FILE}
itk_LIB_FILE=${ITK_TARGET_FILE}

# END CYGNUS LOCAL

#--------------------------------------------------------------------
# __CHANGE__
# Change the name from exampeA_LIB_FILE to match your package name.
# Use the stub_LIB_FILE substitution if your package creates a stub
# library.
#--------------------------------------------------------------------

AC_SUBST(itkstub_LIB_FILE)
AC_SUBST(itk_LIB_FILE)
AC_SUBST(SHLIB_LD_LIBS)

#--------------------------------------------------------------------
# Find tclsh so that we can run pkg_mkIndex to generate the pkgIndex.tcl
# file during the install process.  Don't run the TCLSH_PROG through
# ${CYGPATH} because it's being used directly by make.
# Require that we use a tclsh shell version 8.2 or later since earlier
# versions have bugs in the pkg_mkIndex routine.
#--------------------------------------------------------------------

# CYGNUS LOCAL
# A Tcl shell is not available when bootstrapping!
dnl SC_PROG_TCLSH
# END CYGNUS LOCAL

#--------------------------------------------------------------------
# A wish shell is needed to run the test suite.
#--------------------------------------------------------------------

# CYGNUS LOCAL
# A Wish shell is not available when bootstrapping!
dnl SC_PROG_WISH
# END CYGNUS LOCAL

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
#--------------------------------------------------------------------

# CYGNUS LOCAL

# Note: The itkConfig.sh file below is not included in the net release.
# We subst these variables to retain compatibility with the previous
# version of itkConfig.sh.

ITCL_VERSION=${VERSION}
AC_SUBST(ITCL_VERSION)

ITCL_MAJOR_VERSION=${MAJOR_VERSION}
AC_SUBST(ITCL_MAJOR_VERSION)

ITCL_MINOR_VERSION=${MINOR_VERSION}
AC_SUBST(ITCL_MINOR_VERSION)

ITCL_RELEASE_LEVEL=${PATCHLEVEL}
AC_SUBST(ITCL_RELEASE_LEVEL)

ITK_SRC_DIR=${ITK_SRC_DIR_NATIVE}
AC_SUBST(ITK_SRC_DIR)

AC_OUTPUT([Makefile \
	itkConfig.sh \
	pkgIndex.tcl])

# END CYGNUS LOCAL
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d32 1
a32 1
PATCHLEVEL=.0
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@@


1.1.1.2
log
@import itcl 3.2.1
@
text
@d16 3
a18 1
AC_CONFIG_AUX_DIR(../config)
d32 1
a32 1
PATCHLEVEL=.1
d67 4
a70 1
SC_ENABLE_GCC
d111 2
a112 3
case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
	CYGPATH="cygpath -w"
d129 4
d137 2
a138 2
case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
d177 3
a179 5
#--------------------------------------------------------------------
# The value for this should have been cached during the Itcl configuration.
# Make sure the cache-ID that appears here is the same as the one that
# appears in the Itcl configure script.
#--------------------------------------------------------------------
d181 1
a181 8
AC_MSG_CHECKING(for name if Itcl stub library)
AC_CACHE_VAL(ac_cv_itclstub_LIB_FILE, ac_cv_itclstub_LIB_FILE="NONE")
if test x"${ac_cv_itclstub_LIB_FILE}" = x"NONE" ; then
    AC_MSG_ERROR(Can't find name of Itcl stub library.  How did this happen?)
else
    AC_MSG_RESULT(${ac_cv_itclstub_LIB_FILE})
fi
itclstub_LIB_FILE=${ac_cv_itclstub_LIB_FILE}
d184 1
a184 1
SC_LIB_SPEC(tkstub, ${TK_BIN_DIR})
d186 1
a186 2

SC_LIB_SPEC(itclstub, ../itcl)
d222 2
a223 2
case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
d323 13
a335 11
case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
	if test "${SHARED_BUILD}" = "1" ; then
	    SHLIB_LD_LIBS="\"`cygpath -w ${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}`\" ${TCL_SHLIB_LD_LIBS} \"`${CYGPATH} ../itcl/${itclstub_LIB_FILE}`\" ${tkstub_LIB_SPEC} "
	    eval "${PACKAGE}_LIB_FILE=${PACKAGE}${SHARED_LIB_SUFFIX}"
	    RANLIB=:
	else
	    eval "${PACKAGE}_LIB_FILE=${PACKAGE}${UNSHARED_LIB_SUFFIX}"
	fi
	eval "${PACKAGE}stub_LIB_FILE=${PACKAGE}stub${UNSHARED_LIB_SUFFIX}"
	;;
d337 38
a374 10
	if test "${SHARED_BUILD}" = "1" ; then
	    SHLIB_LD_LIBS="${tkstub_LIB_SPEC} ${TCL_BUILD_STUB_LIB_SPEC} ../itcl/${itclstub_LIB_FILE}"
	    eval "${PACKAGE}_LIB_FILE=lib${PACKAGE}${SHARED_LIB_SUFFIX}"
	    RANLIB=:
	else
	    eval "${PACKAGE}_LIB_FILE=lib${PACKAGE}${UNSHARED_LIB_SUFFIX}"
	fi
	eval "${PACKAGE}stub_LIB_FILE=lib${PACKAGE}stub${UNSHARED_LIB_SUFFIX}"
	;;
esac
d395 4
a398 1
SC_PROG_TCLSH
d404 4
a407 1
SC_PROG_WISH
d413 21
d435 4
a438 1
	pkgIndex.tcl itkConfig.sh])
@


1.1.1.3
log
@imported Itcl 3.3
@
text
@a0 1
#!/bin/bash -norc
d6 8
a13 5
#-----------------------------------------------------------------------
# This initializes the environment with PACKAGE_NAME and PACKAGE_VERSION
# set as provided.  These will also be added as -D defs in your Makefile
# so you can encode the package version directly into the source files.
#-----------------------------------------------------------------------
d15 2
a16 1
AC_INIT([itk], [3.3])
d19 5
a23 3
# Call TEA_INIT as the first TEA_ macro to set up initial vars.
# This will define a ${TEA_PLATFORM} variable == "unix" or "windows"
# as well as PKG_LIB_FILE and PKG_STUB_LIB_FILE.
d26 8
a33 1
TEA_INIT([3.2])
a34 9
AC_PROG_LN_S
CONFIG_CLEAN_FILES=
if test ! -d $srcdir/tclconfig ; then
    if test -d $srcdir/../tclconfig ; then
        $LN_S $srcdir/../tclconfig tclconfig
	CONFIG_CLEAN_FILES=tclconfig
    fi
fi
AC_SUBST(CONFIG_CLEAN_FILES)
d36 2
a37 1
AC_CONFIG_AUX_DIR(tclconfig)
d40 2
a41 1
# Load the tclConfig.sh file
d44 12
a55 2
TEA_PATH_TCLCONFIG
TEA_LOAD_TCLCONFIG
d58 5
a62 1
# Load the tkConfig.sh file
d65 2
a66 2
TEA_PATH_TKCONFIG
TEA_LOAD_TKCONFIG
d68 3
a70 2
TEA_PATH_CONFIG(itcl)
TEA_LOAD_CONFIG(itcl)
d72 1
a72 1
ITCL_INCLUDES="-I\"`${CYGPATH} ${itcl_SRC_DIR}/generic`\""
d75 1
a75 2
# Handle the --prefix=... option by defaulting to what Tcl gave.
# Must be called after TEA_LOAD_TCLCONFIG and before $prefix is used.
d78 1
a78 1
TEA_PREFIX
d80 5
a84 6
#------------------------------------------------------------------------
# Standard compiler checks.
# This sets up CC by using the CC env var, or looks for gcc otherwise.
# This also calls AC_PROG_CC, AC_PROG_INSTALL and a few others to create
# the basic setup necessary to compile executables.
#------------------------------------------------------------------------
d86 3
a88 1
TEA_SETUP_COMPILER
d90 2
a91 25
#-----------------------------------------------------------------------
# __CHANGE__
# Specify the C source files to compile in TEA_ADD_SOURCES,
# public headers that need to be installed in TEA_ADD_HEADERS,
# stub library C source files to compile in TEA_ADD_STUB_SOURCES,
# and runtime Tcl library files in TEA_ADD_TCL_SOURCES.
# This defines PKG(_STUB)_SOURCES, PKG(_STUB)_OBJECTS, PKG_HEADERS
# and PKG_TCL_SOURCES.
#-----------------------------------------------------------------------

TEA_ADD_SOURCES([itk_cmds.c
		itk_option.c
		itk_archetype.c
		itk_util.c
		itkStubInit.c])
TEA_ADD_HEADERS([generic/itk.h generic/itkDecls.h])
TEA_ADD_INCLUDES([${ITCL_INCLUDES} -I\"`${CYGPATH} ${srcdir}/generic`\"])
TEA_ADD_LIBS([])
TEA_ADD_CFLAGS([])
#TEA_ADD_STUB_SOURCES([itkStubLib.c])
TEA_ADD_TCL_SOURCES([library/Archetype.itk
		library/Toplevel.itk
		library/Widget.itk
		library/itk.tcl
		library/tclIndex])
d94 4
a97 2
# __CHANGE__
# A few miscellaneous platform-specific items:
d99 3
a101 3
# Define a special symbol for Windows (BUILD_itk in this case) so
# that we create the export library with the dll.  See sha1.h on how
# to use this.
d103 70
a172 7
# Windows creates a few extra files that need to be cleaned up.
# You can add more files to clean if your extension creates any extra
# files.
#
# Define any extra compiler flags in the PACKAGE_CFLAGS variable.
# These will be appended to the current set of compiler flags for
# your system.
d175 4
a178 4
if test "${TEA_PLATFORM}" = "windows" ; then
    AC_DEFINE(BUILD_itk)
    CLEANFILES="*.lib *.dll *.exp *.ilk *.pdb vc*.pch"
    TEA_ADD_SOURCES([dllEntryPoint.c])
d180 1
a180 1
    CLEANFILES=
d182 5
d188 1
a188 1
AC_SUBST(CLEANFILES)
d196 1
a196 1
# This must be done AFTER calling TEA_PATH_TCLCONFIG/TEA_LOAD_TCLCONFIG
d201 2
a202 2
#TEA_PUBLIC_TCL_HEADERS
TEA_PRIVATE_TCL_HEADERS
d204 2
a205 2
#TEA_PUBLIC_TK_HEADERS
TEA_PRIVATE_TK_HEADERS
d208 14
a221 1
# For Unix/Tk builds, make sure that the X libraries/headers are found.
d224 15
a238 1
TEA_PATH_X
d240 4
a243 6
#--------------------------------------------------------------------
# We need to enable the threading macros found in tcl.h and tclInt.h.
# The use of the threading features is determined by the core the
# extension is loaded into, but we need to compile with these macros
# turned on.
#--------------------------------------------------------------------
a244 1
AC_DEFINE(TCL_THREADS)
d247 1
a247 1
# This auto-enables if Tcl was compiled threaded.
d250 1
a250 1
#TEA_ENABLE_THREADS
d257 1
a257 1
TEA_ENABLE_SHARED
d265 14
a278 1
TEA_CONFIG_CFLAGS
d285 7
a291 1
TEA_ENABLE_SYMBOLS
d308 2
a309 2
# depends on values set by the TEA_ENABLE_SHARED, TEA_ENABLE_SYMBOLS,
# and TEA_LOAD_TCLCONFIG macros above.
d312 1
a312 1
TEA_MAKE_LIB
d315 8
a322 2
# __CHANGE__
# Add platform libs to LIBS or SHLIB_LD_LIBS as necessary.
d325 22
a346 5
if test "${TEA_PLATFORM}" = "windows" -a "$GCC" != "yes" ; then
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \"`${CYGPATH} ${itcl_STUB_LIB_PATH}`\""
else
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} ${itcl_STUB_LIB_SPEC}"
fi
d357 1
d367 7
a373 2
TEA_PROG_TCLSH
TEA_PROG_WISH
d379 2
a380 1
AC_OUTPUT([Makefile pkgIndex.tcl itkConfig.sh])
@


