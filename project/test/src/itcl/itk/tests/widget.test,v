head	1.7;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.7
	gdb_7_6-branch:1.7.0.12
	gdb_7_5-branch:1.7.0.10
	gdb_7_4-branch:1.7.0.8
	gdb_7_3-branch:1.7.0.6
	gdb_7_1-branch:1.7.0.4
	gdb_7_0-branch:1.7.0.2
	arc-sim-20090309:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.5.0.12
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2008.07.23.22.44.52;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.22.20.32.46;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.21.21.04.27;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.20.40.30;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.35.35;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.22.02.15.49;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.06;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.46;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.42.01;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.7
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#
# Tests for [incr Tk] widgets based on itk::Widget
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: widget.test,v 1.6 2004/09/22 09:37:09 davygrvy Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

package require tcltest
namespace import -force ::tcltest::*

::tcltest::loadTestedCommands


# ----------------------------------------------------------------------
#  Simple mega-widget
# ----------------------------------------------------------------------
test widget-1.1 {define a simple mega-widget class} {
    option add *TestWidget.background linen
    option add *TestWidget.borderWidth 2
    option add *TestWidget.command ""
    option add *TestWidget.cursor ""
    option add *TestWidget.foreground navy
    option add *TestWidget.highlight white
    option add *TestWidget.normal ivory
    option add *TestWidget.text ""

    itcl::class TestWidget {
        inherit itk::Widget
        constructor {args} {
            itk_component add test1 {
                label $itk_interior.t1
            } {
                keep -background -foreground -cursor
                keep -text
            }
            pack $itk_component(test1) -side left -padx 2

            itk_component add test2 {
                button $itk_interior.t2 -text "Push Me"
            } {
                keep -foreground -cursor -borderwidth -command
                rename -background -normal normal Background
                rename -activebackground -highlight highlight Foreground
            }
            pack $itk_component(test2) -side right -fill x -pady 2

            eval itk_initialize $args
        }
        private variable status ""
        public method action {info} {
            lappend status $info
        }

        public method do {cmd} {
            eval $cmd
        }

        itk_option define -status status Status {} {
            lappend status $itk_option(-status)
        }
    }
    TestWidget .#auto
} {.testWidget0}

pack .testWidget0

test widget-1.2 {check the list of configuration options} {
    .testWidget0 configure
} {{-background background Background linen linen} {-borderwidth borderWidth BorderWidth 2 2} {-clientdata clientData ClientData {} {}} {-command command Command {} {}} {-cursor cursor Cursor {} {}} {-foreground foreground Foreground navy navy} {-highlight highlight Foreground white white} {-normal normal Background ivory ivory} {-status status Status {} {}} {-text text Text {} {}}}

set unique 0
foreach test {
    {-background  {-background background Background linen linen}}
    {-borderwidth {-borderwidth borderWidth BorderWidth 2 2}}
    {-clientdata  {-clientdata clientData ClientData {} {}}}
    {-command     {-command command Command {} {}}}
    {-cursor      {-cursor cursor Cursor {} {}}}
    {-foreground  {-foreground foreground Foreground navy navy}}
    {-highlight   {-highlight highlight Foreground white white}}
    {-normal      {-normal normal Background ivory ivory}}
    {-status      {-status status Status {} {}}}
    {-text        {-text text Text {} {}}}
} {
    set opt [lindex $test 0]
    set result [lindex $test 1]

    test widget-1.3.[incr unique] {check individual configuration options} {
        .testWidget0 configure $opt
    } $result
}

set unique 0
foreach test {
    {-background  red}
    {-borderwidth 1}
    {-clientdata  "foo bar"}
    {-command     {puts "hello!"}}
    {-cursor      trek}
    {-foreground  IndianRed}
    {-highlight   MistyRose}
    {-normal      MistyRose2}
    {-status      "test message"}
    {-text        "Label:"}
} {
    set opt [lindex $test 0]
    set value [lindex $test 1]

    test widget-1.4.[incr unique] {set individual configuration options} {
        list [.testWidget0 configure $opt $value] \
             [.testWidget0 cget $opt] \
             [.testWidget0 do "set itk_option($opt)"]
    } [list "" $value $value]
}

test widget-1.5 {check the list components} {
    lsort [.testWidget0 component]
} {hull test1 test2}

set unique 0
foreach test {
    {hull  .testWidget0}
    {test1 .testWidget0.t1}
    {test2 .testWidget0.t2}
} {
    set name [lindex $test 0]
    set win  [lindex $test 1]

    test widget-1.6 {check the window for each component} {
        list [.testWidget0 component $name] \
             [.testWidget0 do "set itk_component($name)"]
    } [list $win $win]
}

test widget-1.7 {check the propagation of configuration options} {
    list [.testWidget0 component hull cget -cursor] \
         [.testWidget0 component test1 cget -cursor] \
         [.testWidget0 component test2 cget -cursor]
} {trek trek trek}

test widget-1.8 {check the propagation of configuration options} {
    list [.testWidget0 component hull cget -background] \
         [.testWidget0 component test1 cget -background] \
         [.testWidget0 component test2 cget -background]
} {red red MistyRose2}

test widget-1.9 {check the propagation of configuration options} {
    list [.testWidget0 component test1 cget -text] \
         [.testWidget0 component test2 cget -text]
} {Label: {Push Me}}

test widget-1.10 {check the invocation of "config" code} {
    .testWidget0 do {set status}
} {{} {test message}}

test widget-1.11a {configure using the "code" command} {
    .testWidget0 do {configure -command [itcl::code $this action "button press"]}
    .testWidget0 cget -command
} {namespace inscope ::TestWidget {::.testWidget0 action {button press}}}

test widget-1.11b {execute some code created by "code" command} {
    .testWidget0 do {set status ""}
    .testWidget0 component test2 invoke
    .testWidget0 configure -status "in between"
    .testWidget0 component test2 invoke
    .testWidget0 do {set status}
} {{button press} {in between} {button press}}

test widget-1.12a {components can be added on the fly} {
    .testWidget0 do {
        itk_component add test3 {
            label $itk_interior.t3 -text "Temporary"
        } {
            keep -background -foreground -cursor
        }
    }
} {test3}

test widget-1.12b {components can be added on the fly} {
    .testWidget0 do {
        pack $itk_component(test3) -fill x
    }
} {}

test widget-1.13 {new components show up on the component list} {
    lsort [.testWidget0 component]
} {hull test1 test2 test3}

test widget-1.14 {new components are initialized properly} {
    list [.testWidget0 component test3 cget -background] \
         [.testWidget0 component test3 cget -foreground] \
         [.testWidget0 component test3 cget -cursor]
} {red IndianRed trek}

test widget-1.15 {components can be deleted like ordinary widgets} {
    destroy [.testWidget0 component test3]
} {}

test widget-1.16 {dead components are removed from the component list} {
    lsort [.testWidget0 component]
} {hull test1 test2}

test widget-1.17 {use "configbody" command to change "config" code} {
    itcl::configbody TestWidget::status {lappend status "new"}
} {}

test widget-1.18 {"config" code can really change} {
    .testWidget0 do {set status ""}
    .testWidget0 configure -status "test message"
    .testWidget0 configure -status "another"
    .testWidget0 do {set status}
} {new new}

test widget-1.19 {"config" code can change back} {
    itcl::configbody TestWidget::status {lappend status $itk_option(-status)}
} {}

test widget-1.20 {mega-widgets show up on the object list} {
    itcl::find objects .testWidget*
} {.testWidget0}

test widget-1.21 {when a mega-widget is destroyed, its object is deleted} {
    destroy .testWidget0
    itcl::find objects .testWidget*
} {}

test widget-1.22 {recreate a test widget} {
    TestWidget .testWidget0
    itcl::find objects .testWidget*
} {.testWidget0}

test widget-1.23 {when an object is deleted the widget is destroyed} {
    itcl::delete object .testWidget0
    winfo exists .testWidget0
} {0}

test widget-1.24 {recreate another test widget} {
    TestWidget .testWidget
} {.testWidget}

test widget-1.25 {when an internal component is destroyed, it is removed from the list of components, and any dead options disappear} {
    list [lsort [.testWidget component]] \
         [.testWidget configure] \
      [catch {destroy [.testWidget component test1]}] \
         [.testWidget component] \
         [.testWidget do {return [lsort [array names itk_component]]}] \
         [.testWidget configure]
} {{hull test1 test2} {{-background background Background linen linen} {-borderwidth borderWidth BorderWidth 2 2} {-clientdata clientData ClientData {} {}} {-command command Command {} {}} {-cursor cursor Cursor {} {}} {-foreground foreground Foreground navy navy} {-highlight highlight Foreground white white} {-normal normal Background ivory ivory} {-status status Status {} {}} {-text text Text {} {}}} 0 {hull test2} {hull test2} {{-background background Background linen linen} {-borderwidth borderWidth BorderWidth 2 2} {-clientdata clientData ClientData {} {}} {-command command Command {} {}} {-cursor cursor Cursor {} {}} {-foreground foreground Foreground navy navy} {-highlight highlight Foreground white white} {-normal normal Background ivory ivory} {-status status Status {} {}}}}

test widget-1.26 {when an internal component is deleted (but not destroyed) it is disconnected from the option list and its binding tags are updated} {
    set comp [.testWidget component test2]
    list [bindtags $comp] \
         [bind itk-destroy-$comp <Destroy>] \
      [catch {.testWidget do {itk_component delete test2}}] \
         [bindtags $comp] \
         [bind itk-destroy-$comp <Destroy>] \
         [.testWidget configure]
} {{itk-destroy-.testWidget.t2 .testWidget.t2 Button . all} {namespace inscope ::itk::Archetype {::.testWidget itk_component delete test2}} 0 {.testWidget.t2 Button . all} {} {{-background background Background linen linen} {-clientdata clientData ClientData {} {}} {-cursor cursor Cursor {} {}} {-status status Status {} {}}}}

test widget-1.27 {when a mega-widget object is deleted, its window and any
        components are destroyed (even if in another window) } {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            itk_component add button {
                button $itk_option(-container).b -text Button
            } {}
            pack $itk_component(button)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw

    set button [.t1.bw component button]
    itcl::delete object .t1.bw
    set result [list $button [winfo exists $button]]
    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {.t1.f.b 0}

test widget-1.28 {when a window that contains a megawidget component
        is destroyed, the component is removed from the megawidget} {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            itk_component add button {
                button $itk_option(-container).b -text Button
            } {}
            pack $itk_component(button)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw
    set result [list [.t1.bw component]]
    destroy .t1.f
    lappend result [list [.t1.bw component]]

    itcl::delete object .t1.bw
    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {{button hull} hull}

test widget-1.29 {when destroying a component that is inside another
        window protect against that case where one component destroy
        actually destroys other contained components} {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            # Note, the component names matter here since
            # [.t2 component] returns names in hash order.
            # We need to delete cframe first since it
            # is the parent of cbutton.

            itk_component add cframe {
                button $itk_option(-container).cframe
            } {}
            pack $itk_component(cframe)

            itk_component add cbutton {
                button $itk_component(cframe).b -text Button
            } {}
            pack $itk_component(cbutton)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw
    set result [list [.t1.bw component]]
    # destructor should destroy cframe but not cbutton
    itcl::delete object .t1.bw
    lappend result [winfo exists .t1.f.cframe]

    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {{hull cframe cbutton} 0}


# ----------------------------------------------------------------------
#  Clean up
# ----------------------------------------------------------------------
itcl::delete class TestWidget

::tcltest::cleanupTests
exit
@


1.6
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.4 2000/07/06 06:43:33 mmc Exp $
d19 1
a19 1
if {[string compare test [info procs test]] == 1} then {source defs}
a20 1
package require Itk
d267 122
@


1.5
log
@Updated to itcl 3.2.1.
@
text
@@


1.4
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.2.172.1 2001/05/18 02:21:46 mdejong Exp $
a266 36

test widget-1.27 {when a mega-widget object is deleted, its window and any
        components are destroyed (even if in another window) } {
    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

           itk_component add button {
                button $itk_option(-container).b -text Button
           } {}
            pack $itk_component(button)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw

    set button [.t1.bw component button]

    itcl::delete object .t1.bw

    set result [list $button [winfo exists $button]]

    itcl::delete class ButtonWidget

    set result
} {.t1.f.b 0}

@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@Checked in for Mo DeJong:

        * itk/library/Toplevel.itk (destructor):
        * itk/library/Widget.itk (destructor): Remove the
        hull component after destroying the hull.
        Destroy any component that still exists after
        destroying the hull since it must have been
        created outside the hull.
        * itk/tests/toplevel.test:
        * itk/tests/widget.test: Test that a component
        outside the hull is destroyed when the mega-widget
        is destroyed.
@
text
@@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.2 1999/01/27 18:56:17 jingham Exp $
d16 3
d21 2
d165 1
a165 1
    .testWidget0 do {configure -command [code $this action "button press"]}
d212 1
a212 1
    configbody TestWidget::status {lappend status "new"}
d223 1
a223 1
    configbody TestWidget::status {lappend status $itk_option(-status)}
d245 59
d308 3
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.2.172.1 2001/05/18 02:21:46 mdejong Exp $
a15 3
package require tcltest
namespace import -force ::tcltest::*

a17 2
package require Itk

d160 1
a160 1
    .testWidget0 do {configure -command [itcl::code $this action "button press"]}
d207 1
a207 1
    itcl::configbody TestWidget::status {lappend status "new"}
d218 1
a218 1
    itcl::configbody TestWidget::status {lappend status $itk_option(-status)}
a239 23
test widget-1.24 {recreate another test widget} {
    TestWidget .testWidget
} {.testWidget}

test widget-1.25 {when an internal component is destroyed, it is removed from the list of components, and any dead options disappear} {
    list [lsort [.testWidget component]] \
         [.testWidget configure] \
      [catch {destroy [.testWidget component test1]}] \
         [.testWidget component] \
         [.testWidget do {return [lsort [array names itk_component]]}] \
         [.testWidget configure]
} {{hull test1 test2} {{-background background Background linen linen} {-borderwidth borderWidth BorderWidth 2 2} {-clientdata clientData ClientData {} {}} {-command command Command {} {}} {-cursor cursor Cursor {} {}} {-foreground foreground Foreground navy navy} {-highlight highlight Foreground white white} {-normal normal Background ivory ivory} {-status status Status {} {}} {-text text Text {} {}}} 0 {hull test2} {hull test2} {{-background background Background linen linen} {-borderwidth borderWidth BorderWidth 2 2} {-clientdata clientData ClientData {} {}} {-command command Command {} {}} {-cursor cursor Cursor {} {}} {-foreground foreground Foreground navy navy} {-highlight highlight Foreground white white} {-normal normal Background ivory ivory} {-status status Status {} {}}}}

test widget-1.26 {when an internal component is deleted (but not destroyed) it is disconnected from the option list and its binding tags are updated} {
    set comp [.testWidget component test2]
    list [bindtags $comp] \
         [bind itk-destroy-$comp <Destroy>] \
      [catch {.testWidget do {itk_component delete test2}}] \
         [bindtags $comp] \
         [bind itk-destroy-$comp <Destroy>] \
         [.testWidget configure]
} {{itk-destroy-.testWidget.t2 .testWidget.t2 Button . all} {namespace inscope ::itk::Archetype {::.testWidget itk_component delete test2}} 0 {.testWidget.t2 Button . all} {} {{-background background Background linen linen} {-clientdata clientData ClientData {} {}} {-cursor cursor Cursor {} {}} {-status status Status {} {}}}}

a243 3

::tcltest::cleanupTests
exit
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.4 2000/07/06 06:43:33 mmc Exp $
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d9 1
a9 1
#      RCS:  $Id: widget.test,v 1.6 2004/09/22 09:37:09 davygrvy Exp $
d19 1
a19 1
::tcltest::loadTestedCommands
d21 1
a267 122
test widget-1.27 {when a mega-widget object is deleted, its window and any
        components are destroyed (even if in another window) } {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            itk_component add button {
                button $itk_option(-container).b -text Button
            } {}
            pack $itk_component(button)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw

    set button [.t1.bw component button]
    itcl::delete object .t1.bw
    set result [list $button [winfo exists $button]]
    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {.t1.f.b 0}

test widget-1.28 {when a window that contains a megawidget component
        is destroyed, the component is removed from the megawidget} {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            itk_component add button {
                button $itk_option(-container).b -text Button
            } {}
            pack $itk_component(button)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw
    set result [list [.t1.bw component]]
    destroy .t1.f
    lappend result [list [.t1.bw component]]

    itcl::delete object .t1.bw
    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {{button hull} hull}

test widget-1.29 {when destroying a component that is inside another
        window protect against that case where one component destroy
        actually destroys other contained components} {
    catch {destroy .t1}
    catch {rename .t1.bw {}}
    catch {itcl::delete class ButtonWidget}

    itcl::class ButtonWidget {
        inherit itk::Widget

        constructor {args} {
            eval itk_initialize $args

            # Note, the component names matter here since
            # [.t2 component] returns names in hash order.
            # We need to delete cframe first since it
            # is the parent of cbutton.

            itk_component add cframe {
                button $itk_option(-container).cframe
            } {}
            pack $itk_component(cframe)

            itk_component add cbutton {
                button $itk_component(cframe).b -text Button
            } {}
            pack $itk_component(cbutton)
        }

        itk_option define -container container Container {}
    }

    toplevel .t1
    frame .t1.f
    ButtonWidget .t1.bw -container .t1.f

    pack .t1.f
    pack .t1.bw
    set result [list [.t1.bw component]]
    # destructor should destroy cframe but not cbutton
    itcl::delete object .t1.bw
    lappend result [winfo exists .t1.f.cframe]

    destroy .t1
    itcl::delete class ButtonWidget
    set result
} {{hull cframe cbutton} 0}


@


