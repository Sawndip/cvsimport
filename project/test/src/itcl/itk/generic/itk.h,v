head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2008.07.23.22.44.51;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.46;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.27;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.30;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.35;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.44;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.42.09;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@/*
 * ------------------------------------------------------------------------
 *      PACKAGE:  [incr Tk]
 *  DESCRIPTION:  Building mega-widgets with [incr Tcl]
 *
 *  [incr Tk] provides a framework for building composite "mega-widgets"
 *  using [incr Tcl] classes.  It defines a set of base classes that are
 *  specialized to create all other widgets.
 *
 *  ADDING [incr Tk] TO A Tcl-BASED APPLICATION:
 *
 *    To add [incr Tk] facilities to a Tcl application, modify the
 *    Tcl_AppInit() routine as follows:
 *
 *    1) Include the header files for [incr Tcl] and [incr Tk] near
 *       the top of the file containing Tcl_AppInit():
 *
 *         #include "itcl.h"
 *         #include "itk.h"
 *
 *    2) Within the body of Tcl_AppInit(), add the following lines:
 *
 *         if (Itcl_Init(interp) == TCL_ERROR) {
 *             return TCL_ERROR;
 *         }
 *         if (Itk_Init(interp) == TCL_ERROR) {
 *             return TCL_ERROR;
 *         }
 *
 *    3) Link your application with libitcl.a and libitk.a
 *
 *    NOTE:  An example file "tkAppInit.c" containing the changes shown
 *           above is included in this distribution.
 *
 * ========================================================================
 *  AUTHOR:  Michael J. McLennan
 *           Bell Labs Innovations for Lucent Technologies
 *           mmclennan@@lucent.com
 *           http://www.tcltk.com/itcl
 *
 *     RCS:  $Id: itk.h,v 1.16 2004/08/10 20:58:44 hobbs Exp $
 * ========================================================================
 *           Copyright (c) 1993-1998  Lucent Technologies, Inc.
 * ------------------------------------------------------------------------
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */
#ifndef ITK_H
#define ITK_H

#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_FINAL_RELEASE
#define ITK_RELEASE_SERIAL	0

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3.0"


/*
 * A special definition used to allow this header file to be included
 * in resource files so that they can get obtain version information from
 * this file.  Resource compilers don't like all the C stuff, like typedefs
 * and procedure declarations, that occur below.
 */

#ifndef RC_INVOKED

#include "tk.h"
#include "itclInt.h"

#undef TCL_STORAGE_CLASS
#ifdef BUILD_itk
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
#endif

/*
 *  List of options in alphabetical order:
 */
typedef struct ItkOptList {
    Tcl_HashTable *options;     /* list containing the real options */
    Tcl_HashEntry **list;       /* gives ordering of options */
    int len;                    /* number of entries in order list */
    int max;                    /* maximum size of order list */
} ItkOptList;

/*
 *  List of options created in the class definition:
 */
typedef struct ItkClassOptTable {
    Tcl_HashTable options;        /* option storage with fast lookup */
    ItkOptList order;             /* gives ordering of options */
} ItkClassOptTable;

/*
 *  Each option created in the class definition:
 */
typedef struct ItkClassOption {
    ItclMember *member;           /* info about this option */
    char *resName;                /* resource name in X11 database */
    char *resClass;               /* resource class name in X11 database */
    char *init;                   /* initial value for option */
} ItkClassOption;

#include "itkDecls.h"

/*
 *  This function is contained in the itkstub static library
 */

#ifdef USE_ITK_STUBS
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
#endif

/*
 * Public functions that are not accessible via the stubs table.
 */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* RC_INVOKED */
#endif /* ITK_H */
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.9 2001/05/25 00:15:04 davygrvy Exp $
d51 20
d80 1
a81 1
#include "tk.h"
d83 1
a83 1
# undef TCL_STORAGE_CLASS
d85 1
a85 1
# define TCL_STORAGE_CLASS DLLEXPORT
d87 5
a91 1
# define TCL_STORAGE_CLASS
d129 6
a134 3

CONST char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    char *version, int exact));
d141 2
a142 2
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLIMPORT
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.2.172.1 2001/05/18 02:21:45 mdejong Exp $
d58 1
a58 1
#ifndef RESOURCE_INCLUDED
d63 1
a64 1
# undef TCL_STORAGE_CLASS
d66 2
d106 1
a106 1
char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
d117 1
a117 1
#endif /* RESOURCE INCLUDED */
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.2 1999/01/27 18:56:14 jingham Exp $
d96 1
d99 1
a99 1
 *  Exported functions:
a100 2
EXTERN int Itk_Init _ANSI_ARGS_((Tcl_Interp *interp));
EXTERN int Itk_SafeInit _ANSI_ARGS_((Tcl_Interp *interp));
d102 1
a102 7
/*
 *  Functions used internally by this package:
 */
EXTERN int Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
EXTERN int Itk_UsualCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
d104 3
a106 29
/*
 *  Functions for managing options included in class definitions:
 */
EXTERN int Itk_ClassOptionDefineCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
EXTERN int Itk_ClassOptionIllegalCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));

EXTERN int Itk_ConfigClassOption _ANSI_ARGS_((Tcl_Interp *interp,
    ItclObject *contextObj, ClientData cdata, char* newVal));

EXTERN ItkClassOptTable* Itk_CreateClassOptTable _ANSI_ARGS_((
    Tcl_Interp *interp, ItclClass *cdefn));
EXTERN ItkClassOptTable* Itk_FindClassOptTable _ANSI_ARGS_((
    ItclClass *cdefn));
EXTERN void Itk_DeleteClassOptTable _ANSI_ARGS_((Tcl_Interp *interp,
    ItclClass *cdefn));

EXTERN int Itk_CreateClassOption _ANSI_ARGS_((Tcl_Interp *interp,
    ItclClass *cdefn, char *switchName, char *resName, char *resClass,
    char *defVal, char *config, ItkClassOption **optPtr));
EXTERN ItkClassOption* Itk_FindClassOption _ANSI_ARGS_((
    ItclClass *cdefn, char *switchName));
EXTERN void Itk_DelClassOption _ANSI_ARGS_((ItkClassOption *opt));

/*
 *  Functions needed for the Archetype base class:
 */
EXTERN int Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
d109 1
a109 1
 *  Functions for maintaining the ordered option list:
a110 8
EXTERN void Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashTable *options));
EXTERN void Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));

EXTERN void Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashEntry *entry));
EXTERN void Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashEntry *entry));
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.2.172.1 2001/05/18 02:21:45 mdejong Exp $
a95 1
#include "itkDecls.h"
d98 1
a98 1
 *  This function is contained in the itkstub static library
d100 2
d103 18
a120 1
#ifdef USE_ITK_STUBS
d122 18
a139 3
char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    char *version, int exact));
#endif
d142 1
a142 1
 * Public functions that are not accessible via the stubs table.
d144 8
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.9 2001/05/25 00:15:04 davygrvy Exp $
d58 1
a58 1
#ifndef RC_INVOKED
d104 1
a104 1
CONST char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
d115 1
a115 1
#endif /* RC_INVOKED */
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.16 2004/08/10 20:58:44 hobbs Exp $
a50 20
#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_FINAL_RELEASE
#define ITK_RELEASE_SERIAL	0

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3.0"


d60 1
a61 1
#include "itclInt.h"
a62 1
#undef TCL_STORAGE_CLASS
d64 2
a65 7
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
d103 3
a105 6
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
d112 2
a113 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
@


