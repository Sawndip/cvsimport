head	1.8;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.8
	gdb_7_6-branch:1.8.0.12
	gdb_7_5-branch:1.8.0.10
	gdb_7_4-branch:1.8.0.8
	gdb_7_3-branch:1.8.0.6
	gdb_7_1-branch:1.8.0.4
	gdb_7_0-branch:1.8.0.2
	arc-sim-20090309:1.5
	arc-insight_6_8-branch:1.5.0.12
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.10
	insight_6_8-branchpoint:1.5
	ITCL_3_3:1.1.1.3
	gdb_6_8-branch:1.5.0.8
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.6
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.4
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.2
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.1.1.1.4.1
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	ITCL_3_2_1:1.1.1.2
	gdb_5_3-branch:1.1.1.1.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	ITCL_TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2009.03.02.21.50.42;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.23.22.44.51;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.01.05.32.09;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.20.40.29;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.35.34;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.05.20.22.59;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.22.42.44;	author kseitz;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.07.22.20.41.59;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2002.09.25.02.36.29;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* itcl/Makefile.in (ITCL_CFLAGS): Renamed from CFLAGS.
	(COMPILE): Use ITCL_CFLAGS in addition to CFLAGS.
	* itk/Makefile.in (ITK_CFLAGS): Renamed from CFLAGS.
	(COMPILE): Use ITK_CFLAGS in addition to CFLAGS.
@
text
@# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@@foo@@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 2002-2004 ActiveState Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: Makefile.in,v 1.29 2005/03/25 22:58:48 dgp Exp $

#========================================================================
# The names of the source files is defined in the configure script.
# The object files are used for linking into the final library.
# This will be used when a dist target is added to the Makefile.
# It is not important to specify the directory, as long as it is the
# $(srcdir) or in the generic, win or unix subdirectory.
#========================================================================

PKG_SOURCES	= @@PKG_SOURCES@@
PKG_OBJECTS	= @@PKG_OBJECTS@@

PKG_STUB_SOURCES = @@PKG_STUB_SOURCES@@
PKG_STUB_OBJECTS = @@PKG_STUB_OBJECTS@@

#========================================================================
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

PKG_TCL_SOURCES = @@PKG_TCL_SOURCES@@

#========================================================================
# This is a list of header files to be installed
# itk.h includes itclInt.h, which needs itclIntDecls.h,
# so we must install them.
#========================================================================

PKG_HEADERS	= @@PKG_HEADERS@@

#========================================================================
# Nothing of the variables below this line should need to be changed.
# Please check the TARGETS section below to make sure the make targets
# are correct.
#========================================================================

itk_LIB_FILE	= @@itk_LIB_FILE@@
itkstub_LIB_FILE = @@itkstub_LIB_FILE@@
itclstub_LIB_FILE = @@itclstub_LIB_FILE@@

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

ITK_GENERIC_DIR_NATIVE	= @@ITK_GENERIC_DIR_NATIVE@@
ITK_UNIX_DIR_NATIVE	= @@ITK_UNIX_DIR_NATIVE@@
ITK_WIN_DIR_NATIVE	= @@ITK_WIN_DIR_NATIVE@@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

#========================================================================
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================

PKG_LIB_FILE	= @@PKG_LIB_FILE@@
PKG_STUB_LIB_FILE = @@PKG_STUB_LIB_FILE@@

lib_BINARIES	= $(PKG_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= @@SHELL@@

srcdir		= @@srcdir@@
prefix		= @@prefix@@
exec_prefix	= @@exec_prefix@@

bindir		= @@bindir@@
libdir		= @@libdir@@
datadir		= @@datadir@@
mandir		= @@mandir@@
includedir	= @@includedir@@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= @@INSTALL@@
INSTALL_PROGRAM	= @@INSTALL_PROGRAM@@
INSTALL_DATA	= @@INSTALL_DATA@@
INSTALL_SCRIPT	= @@INSTALL_SCRIPT@@

PACKAGE_NAME	= @@PACKAGE_NAME@@
PACKAGE_VERSION	= @@PACKAGE_VERSION@@
CC		= @@CC@@
CFLAGS_DEFAULT	= @@CFLAGS_DEFAULT@@
CFLAGS_WARNING	= @@CFLAGS_WARNING@@
CLEANFILES	= @@CLEANFILES@@
EXEEXT		= @@EXEEXT@@
LDFLAGS_DEFAULT	= @@LDFLAGS_DEFAULT@@
MAKE_LIB	= @@MAKE_LIB@@
MAKE_SHARED_LIB	= @@MAKE_SHARED_LIB@@
MAKE_STATIC_LIB	= @@MAKE_STATIC_LIB@@
MAKE_STUB_LIB	= @@MAKE_STUB_LIB@@
OBJEXT		= @@OBJEXT@@
RANLIB_LIB	= @@RANLIB@@
RANLIB_STUB	= @@RANLIB_STUB@@
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LD_FLAGS	= @@SHLIB_LD_FLAGS@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@
STLIB_LD	= @@STLIB_LD@@
TCL_DEFS	= @@TCL_DEFS@@
TCL_BIN_DIR	= @@TCL_BIN_DIR@@
TCL_SRC_DIR	= @@TCL_SRC_DIR@@
TK_SRC_DIR	= @@TK_SRC_DIR@@
TK_BIN_DIR	= @@TK_BIN_DIR@@
# This is necessary for packages that use private headers
TCL_TOP_DIR_NATIVE = @@TCL_TOP_DIR_NATIVE@@
TK_TOP_DIR_NATIVE = @@TK_TOP_DIR_NATIVE@@

# Not used, but retained for reference of what libs Tcl required
TCL_LIBS	= @@TCL_LIBS@@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY=`@@CYGPATH@@ $(TCL_SRC_DIR)/library` \
		  TK_LIBRARY=`@@CYGPATH@@ $(TK_SRC_DIR)/library` \
		  ITCL_LIBRARY=`@@CYGPATH@@ @@itcl_SRC_DIR@@/library` \
		  ITK_LIBRARY=`@@CYGPATH@@ $(srcdir)/library` \
		  @@LD_LIBRARY_PATH_VAR@@="$(EXTRA_PATH):$(@@LD_LIBRARY_PATH_VAR@@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir) @@itcl_BIN_DIR@@"
TCLSH_PROG	= @@TCLSH_PROG@@
WISH_PROG	= @@WISH_PROG@@
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)
WISH		= $(TCLSH_ENV) $(WISH_PROG)

INCLUDES	= @@PKG_INCLUDES@@ @@TCL_INCLUDES@@ @@TK_INCLUDES@@ @@TK_XINCLUDES@@

PKG_CFLAGS	= @@PKG_CFLAGS@@

DEFS		= @@DEFS@@ $(PKG_CFLAGS) \
		  -DITK_LIBRARY=\"$(pkglibdir)\" -DUSE_NON_CONST

CONFIG_CLEAN_FILES = @@CONFIG_CLEAN_FILES@@ Makefile itkConfig.sh pkgIndex.tcl

CPPFLAGS	= @@CPPFLAGS@@
LIBS		= @@PKG_LIBS@@ @@LIBS@@
AR		= @@AR@@
ITK_CFLAGS	= @@CFLAGS@@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) $(ITK_CFLAGS)

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	@@mkdir -p $(DESTDIR)$(includedir)
	@@echo "Installing header files in $(DESTDIR)$(includedir)"
	@@list='$(PKG_HEADERS)'; for i in $$list; do \
	    echo "Installing $(srcdir)/$$i" ; \
	    $(INSTALL_DATA) $(srcdir)/$$i $(DESTDIR)$(includedir) ; \
	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	@@mkdir -p $(DESTDIR)$(mandir)/mann
	@@echo "Installing man pages in $(DESTDIR)$(mandir)"
	@@cd $(srcdir)/doc; for i in *.n; do \
	    echo "Installing $$i"; \
	    rm -f $(DESTDIR)$(mandir)/mann/`basename $$i`; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		$$i > $(DESTDIR)$(mandir)/mann/$$i; \
	    chmod 444 $(DESTDIR)$(mandir)/mann/$$i; \
	done

test: binaries libraries
	$(WISH) `@@CYGPATH@@ $(srcdir)/tests/all.tcl` -load "package require Itk" $(TESTFLAGS) | cat

shell: binaries libraries
	@@$(WISH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(WISH_PROG) $(SCRIPT)

depend:

#========================================================================
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

$(PKG_LIB_FILE): $(PKG_OBJECTS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB_LIB) $(PKG_LIB_FILE)

$(PKG_STUB_LIB_FILE): $(PKG_STUB_OBJECTS)
	-rm -f $(PKG_STUB_LIB_FILE)
	${MAKE_STUB_LIB}
	$(RANLIB_STUB) $(PKG_STUB_LIB_FILE)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# exampleA.$(OBJEXT): $(srcdir)/src/win/exampleA.c
# 	$(COMPILE) -c `@@CYGPATH@@ $(srcdir)/src/win/exampleA.c` -o $@@
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add $(srcdir):$(srcdir)/compat:....
#========================================================================

VPATH = $(srcdir)/unix:$(srcdir)/generic:$(srcdir)/win

.c.$(OBJEXT):
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@

#========================================================================
# Distribution creation
# You may need to tweak this target to make it work correctly.
#========================================================================

#COMPRESS       = tar cvf $(PKG_DIR).tar $(PKG_DIR); compress $(PKG_DIR).tar
COMPRESS        = gtar zcvf $(PKG_DIR).tar.gz $(PKG_DIR)
DIST_ROOT       = /tmp/dist
DIST_DIR        = $(DIST_ROOT)/$(PKG_DIR)

dist-clean:
	rm -rf $(DIST_DIR) $(DIST_ROOT)/$(PKG_DIR).tar.*

dist: dist-clean doc
	mkdir -p $(DIST_DIR)
	cp -p $(srcdir)/license* $(srcdir)/aclocal.m4 $(srcdir)/configure \
		$(srcdir)/*.in  $(DIST_DIR)/
	chmod 664 $(DIST_DIR)/Makefile.in $(DIST_DIR)/aclocal.m4
	chmod 775 $(DIST_DIR)/configure $(DIST_DIR)/configure.in

	mkdir $(DIST_DIR)/tclconfig
	cp $(srcdir)/tclconfig/install-sh $(srcdir)/tclconfig/tcl.m4 \
		$(DIST_DIR)/tclconfig/
	chmod 664 $(DIST_DIR)/tclconfig/tcl.m4
	chmod +x $(DIST_DIR)/tclconfig/install-sh

	list='demos doc examples generic library tests win win/rc'; \
	for p in $$list; do \
	    if test -d $(srcdir)/$$p ; then \
		mkdir $(DIST_DIR)/$$p; \
		for q in $(srcdir)/$$p/*; do \
		    if test -f $$q ; then \
			cp -p $$q $(DIST_DIR)/$$p/; \
		    fi; \
		done; \
	    fi; \
	done

	list='CHANGES ChangeLog INCOMPATIBLE README TODO'; \
	for p in $$list; do \
	    if test -f $(srcdir)/../$$p ; then \
		cp -p $(srcdir)/../$$p $(DIST_DIR)/; \
	    fi; \
	done

	(cd $(DIST_ROOT); $(COMPRESS);)

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries:
	@@mkdir -p $(DESTDIR)$(pkglibdir)
	@@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    stub=`echo $$p|sed -e "s/.*\(stub\).*/\1/"`; \
	    if test "x$$stub" = "xstub"; then \
		echo " $(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p; \
	    else \
		echo " $(RANLIB_LIB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB_LIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    fi; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	@@list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done
	$(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir)
	: $(INSTALL_DATA) itkConfig.sh $(DESTDIR)$(libdir)

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries:
	@@mkdir -p $(DESTDIR)$(bindir)
	@@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  fi; \
	done

.SUFFIXES: .c .$(OBJEXT)

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  p=`basename $$p`; \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
	done

.PHONY: all binaries clean depend distclean doc install libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
@


1.7
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@d173 2
a174 2
CFLAGS		= @@CFLAGS@@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
@


1.6
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d10 1
d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.2.4.4 2001/07/13 00:57:11 mdejong Exp $
d18 5
a22 1
# Edit the following few lines when writing a new extension
d25 6
d32 2
a33 3
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
d36 1
a36 2
lib_BINARIES=$(itk_LIB_FILE) $(itkstub_LIB_FILE)
BINARIES=$(lib_BINARIES)
d39 3
a41 2
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
d44 2
a45 24
WIN_DIR=$(srcdir)/win
UNIX_DIR=$(srcdir)/unix
GENERIC_DIR=$(srcdir)/generic
PLATFORM_DIR=@@PLATFORM_DIR@@

WIN_SOURCES=$(PLATFORM_DIR)/tclAppInit.c \
	$(PLATFORM_DIR)/dllEntryPoint.c
UNIX_SOURCES=$(PLATFORM_DIR)/tclAppInit.c
GENERIC_SOURCES = $(GENERIC_DIR)/itk_cmds.c \
	$(GENERIC_DIR)/itk_option.c \
	$(GENERIC_DIR)/itk_archetype.c \
	$(GENERIC_DIR)/itk_util.c \
	$(GENERIC_DIR)/itkStubInit.c \
	$(GENERIC_DIR)/itkStubLib.c 
PLATFORM_SOURCES = @@PLATFORM_SOURCES@@
itk_SOURCES = $(PLATFORM_SOURCES) $(GENERIC_SOURCES)
SOURCES = $(itk_SOURCES)

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
d47 3
a49 20

WIN_OBJECTS = dllEntryPoint.$(OBJEXT)
UNIX_OBJECTS =
GENERIC_OBJECTS = itk_cmds.$(OBJEXT) \
	itk_option.$(OBJEXT) \
	itk_archetype.$(OBJEXT) \
	itk_util.$(OBJEXT) \
	itkStubInit.$(OBJEXT) \
	itkStubLib.$(OBJEXT) 
PLATFORM_OBJECTS = @@PLATFORM_OBJECTS@@
itk_OBJECTS = $(PLATFORM_OBJECTS) $(GENERIC_OBJECTS)
itkstub_OBJECTS = itkStubLib.$(OBJEXT)
OBJECTS = $(itk_OBJECTS) $(itkstub_OBJECTS)

#========================================================================
# The substitution of "exampleA_LIB_FILE" into the variable name below
# let's us refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
d52 1
a52 3
itk_LIB_FILE = @@itk_LIB_FILE@@
$(itk_LIB_FILE)_OBJECTS = $(itk_OBJECTS)

a53 2
$(itkstub_LIB_FILE)_OBJECTS = $(itkstub_OBJECTS)

a55 10
tkstub_LIB_SPEC = @@tkstub_LIB_SPEC@@

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS= \
	$(srcdir)/generic/itk.h \
	$(srcdir)/generic/itkDecls.h

d61 3
a63 9
SAMPLE_NEW_VAR=@@SAMPLE_NEW_VAR@@

# CYGNUS LOCAL
ITK_LIBRARY = @@datadir@@/itk$(VERSION)
# END CYGNUS LOCAL

ITK_GENERIC_DIR_NATIVE = @@ITK_GENERIC_DIR_NATIVE@@
ITK_UNIX_DIR_NATIVE = @@ITK_UNIX_DIR_NATIVE@@
ITK_WIN_DIR_NATIVE = @@ITK_WIN_DIR_NATIVE@@
d71 8
a78 1
SHELL = @@SHELL@@
d80 55
a134 74
srcdir = @@srcdir@@
top_srcdir = @@top_srcdir@@
prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

bindir = @@bindir@@
sbindir = @@sbindir@@
libexecdir = @@libexecdir@@
datadir = @@datadir@@
sysconfdir = @@sysconfdir@@
sharedstatedir = @@sharedstatedir@@
localstatedir = @@localstatedir@@
libdir = @@libdir@@
infodir = @@infodir@@
mandir = @@mandir@@
includedir = @@includedir@@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@@PACKAGE@@@@VERSION@@
pkglibdir = $(libdir)/@@PACKAGE@@@@VERSION@@
pkgincludedir = $(includedir)/@@PACKAGE@@@@VERSION@@

top_builddir = .

# CYGNUS LOCAL
INSTALL = @@INSTALL@@
# END CYGNUS LOCAL
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@
INSTALL_SCRIPT = @@INSTALL_SCRIPT@@
INSTALL_STRIP_FLAG =
transform = @@program_transform_name@@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

PACKAGE = @@PACKAGE@@
VERSION = @@VERSION@@
CC = @@CC@@
CFLAGS_DEBUG = @@CFLAGS_DEBUG@@
CFLAGS_DEFAULT = @@CFLAGS_DEFAULT@@
CFLAGS_OPTIMIZE = @@CFLAGS_OPTIMIZE@@
CLEANFILES = @@CLEANFILES@@
EXEEXT = @@EXEEXT@@
LDFLAGS_DEBUG = @@LDFLAGS_DEBUG@@
LDFLAGS_DEFAULT = @@LDFLAGS_DEFAULT@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
MAKE_LIB = @@MAKE_LIB@@
MAKE_SHARED_LIB = @@MAKE_SHARED_LIB@@
MAKE_STATIC_LIB = @@MAKE_STATIC_LIB@@
OBJEXT = @@OBJEXT@@
RANLIB = @@RANLIB@@
SHLIB_CFLAGS = @@SHLIB_CFLAGS@@
SHLIB_LD = @@SHLIB_LD@@
SHLIB_LDFLAGS = @@SHLIB_LDFLAGS@@
SHLIB_LD_LIBS = @@SHLIB_LD_LIBS@@
STLIB_LD = @@STLIB_LD@@
TCL_BIN_DIR = @@TCL_BIN_DIR@@
TCL_DEFS = @@TCL_DEFS@@
TCL_EXTRA_CFLAGS = @@TCL_EXTRA_CFLAGS@@
TCL_LD_FLAGS = @@TCL_LD_FLAGS@@
TCL_LIBS = @@TCL_LIBS@@
TCL_SHLIB_LD_LIBS = @@TCL_SHLIB_LD_LIBS@@
TCL_SRC_DIR = @@TCL_SRC_DIR@@
TCL_DBGX = @@TCL_DBGX@@
TCL_STUB_LIB_FILE = @@TCL_STUB_LIB_FILE@@
TCL_STUB_LIB_SPEC = @@TCL_STUB_LIB_SPEC@@
TCL_TOOL_DIR_NATIVE = @@TCL_TOOL_DIR_NATIVE@@
d136 39
a174 36
TCL_UNIX_DIR_NATIVE = @@TCL_UNIX_DIR_NATIVE@@
TCL_WIN_DIR_NATIVE = @@TCL_WIN_DIR_NATIVE@@
INCLUDE_DIR_NATIVE = @@INCLUDE_DIR_NATIVE@@
TCL_BMAP_DIR_NATIVE = @@TCL_BMAP_DIR_NATIVE@@
TCL_PLATFORM_DIR_NATIVE = @@TCL_PLATFORM_DIR_NATIVE@@
TCL_GENERIC_DIR_NATIVE = @@TCL_GENERIC_DIR_NATIVE@@
TK_TOP_DIR_NATIVE = $(TK_SRC_DIR)
TK_SRC_DIR = @@TK_SRC_DIR@@
TCLSH_PROG = @@TCLSH_PROG@@
WISH_PROG = @@WISH_PROG@@
TK_XINCLUDES = @@TK_XINCLUDES@@
TCL_INCLUDES = @@TCL_INCLUDES@@
TK_INCLUDES = @@TK_INCLUDES@@
ITCL_INCLUDES = @@ITCL_INCLUDES@@
ITK_INCLUDES = @@ITCL_INCLUDES@@ @@ITK_INCLUDES@@ @@TK_XINCLUDES@@

AUTOCONF = autoconf

LDFLAGS = $(LDFLAGS_DEFAULT)

INCLUDES = @@TCL_INCLUDES@@ @@TK_INCLUDES@@ $(ITK_INCLUDES)

EXTRA_CFLAGS = $(AC_FLAGS) $(PROTO_FLAGS) $(MEM_DEBUG_FLAGS) $(NO_DEPRECATED_FLAGS) $(TCL_EXTRA_CFLAGS)

DEFS = @@DEFS@@ $(EXTRA_CFLAGS) -DITK_LIBRARY=\"$(ITK_LIBRARY)\"

ACLOCAL_M4 = $(srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/../config/mkinstalldirs

CPPFLAGS = @@CPPFLAGS@@
LIBS = @@LIBS@@
AR = ar
CFLAGS = @@CFLAGS@@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@@
d212 5
a216 10
	$(mkinstalldirs) $(includedir)
	@@echo "Installing header files in $(includedir)"
	@@for i in $(GENERIC_HDRS) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(includedir) ; \
	done;
	@@echo "Installing library files in $(ITK_LIBRARY)"
	@@for i in $(srcdir)/library/*.* $(srcdir)/library/tclIndex ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(ITK_LIBRARY) ; \
d225 5
a229 5
	$(mkinstalldirs) $(mandir)/mann
	@@echo "Installing man pages in $(mandir)"
	@@cd $(srcdir)/doc; for i in *.n; \
	    do \
	    echo "Installing $$i info $(mandir)/mann"; \
d231 12
a242 7
		$$i > $(mandir)/mann/$$i; \
	    chmod 444 $(mandir)/mann/$$i; \
	    done

test: $(TCLSH_PROG)
	$(TCLSH_PROG) `@@CYGPATH@@ $(srcdir)/tests/all.tcl` \
		-exedir `@@CYGPATH@@ $(bindir)` $(TESTFLAGS)
d247 3
a249 4
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
d251 3
a253 6
# $(exampleA_LIB_FILE) should be listed as part of the BINARIES variable
# at the top of the Makefile.  That will ensure that this target is built
# when you run "make binaries".
#
# You shouldn't need to modify this target, except to change the package
# name from "exampleA" to your package's name.
d256 9
a264 9
$(itk_LIB_FILE): $(itk_OBJECTS)
	-rm -f $(itk_LIB_FILE)
	@@MAKE_LIB@@
	@@POST_MAKE_LIB@@

$(itkstub_LIB_FILE): $(itkstub_OBJECTS)
	-rm -f $(itkstub_LIB_FILE)
	@@MAKE_STATIC_LIB@@
	@@POST_MAKE_STATIC_LIB@@
a267 3
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
d275 48
a322 1
#========================================================================
d324 6
a329 23
dllEntryPoint.$(OBJEXT): $(WIN_DIR)/dllEntryPoint.c
	$(COMPILE) -c `@@CYGPATH@@ $(WIN_DIR)/dllEntryPoint.c` -o $@@

tclAppInit.$(OBJEXT): $(PLATFORM_DIR)/tclAppInit.c
	$(COMPILE) -c `@@CYGPATH@@ $(PLATFORM_DIR)/tclAppInit.c` -o $@@

itkStubInit.$(OBJEXT): $(GENERIC_DIR)/itkStubInit.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itkStubInit.c` -o $@@

itkStubLib.$(OBJEXT): $(GENERIC_DIR)/itkStubLib.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itkStubLib.c` -o $@@

itk_cmds.$(OBJEXT): $(GENERIC_DIR)/itk_cmds.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itk_cmds.c` -o $@@

itk_option.$(OBJEXT): $(GENERIC_DIR)/itk_option.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itk_option.c` -o $@@

itk_archetype.$(OBJEXT): $(GENERIC_DIR)/itk_archetype.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itk_archetype.c` -o $@@

itk_util.$(OBJEXT): $(GENERIC_DIR)/itk_util.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itk_util.c` -o $@@
d331 1
d350 2
a351 3
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status itkConfig.sh pkgIndex.tcl
d365 2
a366 1
install-lib-binaries: installdirs
d369 10
a380 2
	        echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
d383 2
a384 2
		    echo " $(INSTALL_PROGRAM) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_PROGRAM) $$lib $(DESTDIR)$(libdir)/$$lib; \
a385 3
	    else \
		echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_PROGRAM) $$p $(DESTDIR)$(libdir)/$$p; \
d387 1
a387 1
	  else :; fi; \
d389 6
a394 5
	@@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
d396 2
a397 1
	$(INSTALL_DATA) pkgIndex.tcl $(pkglibdir)
d405 2
a406 1
install-bin-binaries: installdirs
d409 3
a411 3
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
d414 1
a414 1
.SUFFIXES: .c .o .obj
a419 6
#config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
#	$(SHELL) ./config.status --recheck
#$(srcdir)/configure: $(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
#	cd $(srcdir) && $(AUTOCONF)


d421 9
a429 3
	@@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
d432 1
a432 8
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(bindir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)
	$(mkinstalldirs)  $(ITK_LIBRARY)

.PHONY: all binaries clean depend distclean doc install installdirs \
libraries test
@


1.5
log
@        From Jay St. Pierre <Jay.St.Pierre@@colorado.edu>:
        * itcl/Makefile.in (install-doc): Install man.macros properly into
        man pages when installing.
        * itk/Makefile.in (install-doc): Likewise.
@
text
@@


1.4
log
@touched all sources to ease next import
@
text
@d290 1
a290 1
	@@for i in $(srcdir)/doc/*.n; \
d293 3
a295 1
	    $(INSTALL_DATA) $$i $(mandir)/mann ; \
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@        * itk/Makefile.in (distclean): Remove pkgIndex.tcl and
        itkConfig.sh
        * itcl/Makefile.in (distclean): Remove pkgIndex.tcl and
        itclConfig.sh
        * iwidgets3.0.0/Makefile.in (distclean): Remove pkgIndex.tcl and
        iwidgets.tcl.
        * configure.in (subdirs): New variable. Don't put AC_CONFIG_SUBDIRS
        macro into configure.in twice: it confuses autoconf. Instead use
        the variable to hold the subdirs to be configured.
        * configure: Regenerated.
@
text
@@


1.1
log
@Initial revision
@
text
@d384 1
a384 1
	-rm -f config.status
@


1.1.1.1
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@@


1.1.1.1.4.1
log
@        * itk/Makefile.in (distclean): Remove pkgIndex.tcl and
        itkConfig.sh
        * itcl/Makefile.in (distclean): Remove pkgIndex.tcl and
        itclConfig.sh
        * iwidgets3.0.0/Makefile.in (distclean): Remove pkgIndex.tcl and
        iwidgets.tcl.
        * configure.in (subdirs): New variable. Don't put AC_CONFIG_SUBDIRS
        macro into configure.in twice: it confuses autoconf. Instead use
        the variable to hold the subdirs to be configured.
        * configure: Regenerated.
@
text
@d384 1
a384 1
	-rm -f config.status itkConfig.sh pkgIndex.tcl
@


1.1.1.2
log
@import itcl 3.2.1
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: Makefile.in,v 1.17 2001/05/29 15:51:16 andreas_kupries Exp $
d106 3
a108 1
ITK_LIBRARY = $(prefix)/lib/itk$(VERSION)
d148 3
a150 2
#INSTALL = $(top_srcdir)/../config/install-sh -c
INSTALL = $(TCLSH_PROG) `@@CYGPATH@@ $(top_srcdir)/../config/installFile.tcl` -c
a292 1
	    rm -f $(mandir)/mann/`basename $$i`; \
d319 1
a319 1
	$(RANLIB) $(itk_LIB_FILE)
d324 1
a324 1
	$(RANLIB) $(itkstub_LIB_FILE)
@


1.1.1.3
log
@imported Itcl 3.3
@
text
@a9 1
# Copyright (c) 2002-2004 ActiveState Corporation.
d14 1
a14 1
# RCS: @@(#) $Id: Makefile.in,v 1.29 2005/03/25 22:58:48 dgp Exp $
d17 1
a17 5
# The names of the source files is defined in the configure script.
# The object files are used for linking into the final library.
# This will be used when a dist target is added to the Makefile.
# It is not important to specify the directory, as long as it is the
# $(srcdir) or in the generic, win or unix subdirectory.
d20 5
a24 2
PKG_SOURCES	= @@PKG_SOURCES@@
PKG_OBJECTS	= @@PKG_OBJECTS@@
d26 2
a27 2
PKG_STUB_SOURCES = @@PKG_STUB_SOURCES@@
PKG_STUB_OBJECTS = @@PKG_STUB_OBJECTS@@
d30 2
a31 2
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
d34 25
a58 1
PKG_TCL_SOURCES = @@PKG_TCL_SOURCES@@
d60 19
a78 4
#========================================================================
# This is a list of header files to be installed
# itk.h includes itclInt.h, which needs itclIntDecls.h,
# so we must install them.
d81 9
a89 1
PKG_HEADERS	= @@PKG_HEADERS@@
d92 1
a92 3
# Nothing of the variables below this line should need to be changed.
# Please check the TARGETS section below to make sure the make targets
# are correct.
d95 3
a97 3
itk_LIB_FILE	= @@itk_LIB_FILE@@
itkstub_LIB_FILE = @@itkstub_LIB_FILE@@
itclstub_LIB_FILE = @@itclstub_LIB_FILE@@
d104 7
a110 3
ITK_GENERIC_DIR_NATIVE	= @@ITK_GENERIC_DIR_NATIVE@@
ITK_UNIX_DIR_NATIVE	= @@ITK_UNIX_DIR_NATIVE@@
ITK_WIN_DIR_NATIVE	= @@ITK_WIN_DIR_NATIVE@@
d118 1
a118 5
#========================================================================
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================
d120 73
a192 58
PKG_LIB_FILE	= @@PKG_LIB_FILE@@
PKG_STUB_LIB_FILE = @@PKG_STUB_LIB_FILE@@

lib_BINARIES	= $(PKG_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= @@SHELL@@

srcdir		= @@srcdir@@
prefix		= @@prefix@@
exec_prefix	= @@exec_prefix@@

bindir		= @@bindir@@
libdir		= @@libdir@@
datadir		= @@datadir@@
mandir		= @@mandir@@
includedir	= @@includedir@@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= @@INSTALL@@
INSTALL_PROGRAM	= @@INSTALL_PROGRAM@@
INSTALL_DATA	= @@INSTALL_DATA@@
INSTALL_SCRIPT	= @@INSTALL_SCRIPT@@

PACKAGE_NAME	= @@PACKAGE_NAME@@
PACKAGE_VERSION	= @@PACKAGE_VERSION@@
CC		= @@CC@@
CFLAGS_DEFAULT	= @@CFLAGS_DEFAULT@@
CFLAGS_WARNING	= @@CFLAGS_WARNING@@
CLEANFILES	= @@CLEANFILES@@
EXEEXT		= @@EXEEXT@@
LDFLAGS_DEFAULT	= @@LDFLAGS_DEFAULT@@
MAKE_LIB	= @@MAKE_LIB@@
MAKE_SHARED_LIB	= @@MAKE_SHARED_LIB@@
MAKE_STATIC_LIB	= @@MAKE_STATIC_LIB@@
MAKE_STUB_LIB	= @@MAKE_STUB_LIB@@
OBJEXT		= @@OBJEXT@@
RANLIB		= @@RANLIB@@
RANLIB_STUB	= @@RANLIB_STUB@@
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LD_FLAGS	= @@SHLIB_LD_FLAGS@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@
STLIB_LD	= @@STLIB_LD@@
TCL_DEFS	= @@TCL_DEFS@@
TCL_BIN_DIR	= @@TCL_BIN_DIR@@
TCL_SRC_DIR	= @@TCL_SRC_DIR@@
TK_SRC_DIR	= @@TK_SRC_DIR@@
TK_BIN_DIR	= @@TK_BIN_DIR@@
# This is necessary for packages that use private headers
d194 36
a229 39
TK_TOP_DIR_NATIVE = @@TK_TOP_DIR_NATIVE@@

# Not used, but retained for reference of what libs Tcl required
TCL_LIBS	= @@TCL_LIBS@@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY=`@@CYGPATH@@ $(TCL_SRC_DIR)/library` \
		  TK_LIBRARY=`@@CYGPATH@@ $(TK_SRC_DIR)/library` \
		  ITCL_LIBRARY=`@@CYGPATH@@ @@itcl_SRC_DIR@@/library` \
		  ITK_LIBRARY=`@@CYGPATH@@ $(srcdir)/library` \
		  @@LD_LIBRARY_PATH_VAR@@="$(EXTRA_PATH):$(@@LD_LIBRARY_PATH_VAR@@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir) @@itcl_BIN_DIR@@"
TCLSH_PROG	= @@TCLSH_PROG@@
WISH_PROG	= @@WISH_PROG@@
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)
WISH		= $(TCLSH_ENV) $(WISH_PROG)

INCLUDES	= @@PKG_INCLUDES@@ @@TCL_INCLUDES@@ @@TK_INCLUDES@@ @@TK_XINCLUDES@@

PKG_CFLAGS	= @@PKG_CFLAGS@@

DEFS		= @@DEFS@@ $(PKG_CFLAGS) \
		  -DITK_LIBRARY=\"$(pkglibdir)\" -DUSE_NON_CONST

CONFIG_CLEAN_FILES = @@CONFIG_CLEAN_FILES@@ Makefile itkConfig.sh pkgIndex.tcl

CPPFLAGS	= @@CPPFLAGS@@
LIBS		= @@PKG_LIBS@@ @@LIBS@@
AR		= @@AR@@
CFLAGS		= @@CFLAGS@@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
d267 10
a276 5
	@@mkdir -p $(DESTDIR)$(includedir)
	@@echo "Installing header files in $(DESTDIR)$(includedir)"
	@@list='$(PKG_HEADERS)'; for i in $$list; do \
	    echo "Installing $(srcdir)/$$i" ; \
	    $(INSTALL_DATA) $(srcdir)/$$i $(DESTDIR)$(includedir) ; \
d285 12
a296 18
	@@mkdir -p $(DESTDIR)$(mandir)/mann
	@@echo "Installing man pages in $(DESTDIR)$(mandir)"
	@@cd $(srcdir)/doc; for i in *.n; do \
	    echo "Installing $$i"; \
	    rm -f $(DESTDIR)$(mandir)/mann/`basename $$i`; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		$$i > $(DESTDIR)$(mandir)/mann/$$i; \
	    chmod 444 $(DESTDIR)$(mandir)/mann/$$i; \
	done

test: binaries libraries
	$(WISH) `@@CYGPATH@@ $(srcdir)/tests/all.tcl` -load "package require Itk" $(TESTFLAGS) | cat

shell: binaries libraries
	@@$(WISH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(WISH_PROG) $(SCRIPT)
d301 8
a308 3
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
d310 2
a311 3
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
d314 9
a322 9
$(PKG_LIB_FILE): $(PKG_OBJECTS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(PKG_LIB_FILE)

$(PKG_STUB_LIB_FILE): $(PKG_STUB_OBJECTS)
	-rm -f $(PKG_STUB_LIB_FILE)
	${MAKE_STUB_LIB}
	$(RANLIB_STUB) $(PKG_STUB_LIB_FILE)
d326 3
d336 22
a357 48
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add $(srcdir):$(srcdir)/compat:....
#========================================================================

VPATH = $(srcdir)/unix:$(srcdir)/generic:$(srcdir)/win

.c.$(OBJEXT):
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@

#========================================================================
# Distribution creation
# You may need to tweak this target to make it work correctly.
#========================================================================

#COMPRESS       = tar cvf $(PKG_DIR).tar $(PKG_DIR); compress $(PKG_DIR).tar
COMPRESS        = gtar zcvf $(PKG_DIR).tar.gz $(PKG_DIR)
DIST_ROOT       = /tmp/dist
DIST_DIR        = $(DIST_ROOT)/$(PKG_DIR)

dist-clean:
	rm -rf $(DIST_DIR) $(DIST_ROOT)/$(PKG_DIR).tar.*

dist: dist-clean doc
	mkdir -p $(DIST_DIR)
	cp -p $(srcdir)/license* $(srcdir)/aclocal.m4 $(srcdir)/configure \
		$(srcdir)/*.in  $(DIST_DIR)/
	chmod 664 $(DIST_DIR)/Makefile.in $(DIST_DIR)/aclocal.m4
	chmod 775 $(DIST_DIR)/configure $(DIST_DIR)/configure.in

	mkdir $(DIST_DIR)/tclconfig
	cp $(srcdir)/tclconfig/install-sh $(srcdir)/tclconfig/tcl.m4 \
		$(DIST_DIR)/tclconfig/
	chmod 664 $(DIST_DIR)/tclconfig/tcl.m4
	chmod +x $(DIST_DIR)/tclconfig/install-sh

	list='demos doc examples generic library tests win win/rc'; \
	for p in $$list; do \
	    if test -d $(srcdir)/$$p ; then \
		mkdir $(DIST_DIR)/$$p; \
		for q in $(srcdir)/$$p/*; do \
		    if test -f $$q ; then \
			cp -p $$q $(DIST_DIR)/$$p/; \
		    fi; \
		done; \
	    fi; \
	done
d359 2
a360 6
	list='CHANGES ChangeLog INCOMPATIBLE README TODO'; \
	for p in $$list; do \
	    if test -f $(srcdir)/../$$p ; then \
		cp -p $(srcdir)/../$$p $(DIST_DIR)/; \
	    fi; \
	done
a361 1
	(cd $(DIST_ROOT); $(COMPRESS);)
d380 3
a382 2
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status
d396 1
a396 2
install-lib-binaries:
	@@mkdir -p $(DESTDIR)$(pkglibdir)
a398 10
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    stub=`echo $$p|sed -e "s/.*\(stub\).*/\1/"`; \
	    if test "x$$stub" = "xstub"; then \
		echo " $(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p; \
	    else \
		echo " $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    fi; \
d401 2
d405 2
a406 2
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
d408 3
d412 1
a412 1
	  fi; \
d414 5
a418 6
	@@list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
d420 1
a420 2
	$(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir)
	: $(INSTALL_DATA) itkConfig.sh $(DESTDIR)$(libdir)
d428 1
a428 2
install-bin-binaries:
	@@mkdir -p $(DESTDIR)$(bindir)
d431 3
a433 3
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  fi; \
d436 1
a436 1
.SUFFIXES: .c .$(OBJEXT)
d442 6
d449 3
a451 9
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  p=`basename $$p`; \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
d454 8
a461 1
.PHONY: all binaries clean depend distclean doc install libraries test
@


