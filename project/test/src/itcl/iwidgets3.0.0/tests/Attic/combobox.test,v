head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.01.21.21.19.52;	author hunt;	state dead;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.35;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.40;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.09;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.25.02.47.49;	author kseitz;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete directory
@
text
@# This file is a Tcl script to test out [incr Widgets] Combobox class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 John S. Sigler
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

package require tcltest
namespace import -force ::tcltest::*

package require Iwidgets 3.0

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Combobox-1.$c {Combobox construction} {
    iwidgets::Combobox .cb
    pack .cb -padx 10 -pady 10 -fill x -expand yes
    image create bitmap flagup -file $tk_library/demos/images/flagup.bmp
    update 
} {}

incr c

#
# Option tests which are successful.
#
test Combobox-2.$o {configuration option} {
    llength [.cb configure]
} {51}

incr o

foreach test {
    {-listheight 150 150}
    {-width 20 20}
    {-textvariable option option}
    {-labeltext Combobox: Combobox:} 
    {-labelpos nw nw}
    {-labelpos n n}
    {-labelpos ne ne}
    {-labelpos w w}
    {-labelimage flagup flagup}
    {-labelpos nw nw}
    {-labelpos n n}
    {-labelpos ne ne}
    {-labelpos w w}
    {-labelimage {} {}} 
    {-borderwidth 10 10}
    {-borderwidth 2 2}
    {-background steelblue steelblue}
    {-foreground white white}
    {-background grey85 grey85}
    {-foreground Black Black}
    {-textvariable {} {}}
    {-state disabled disabled}
    {-state normal normal}
    {-textvariable option option}
    {-arrowrelief groove groove}
    {-arrowrelief flat flat}
    {-arrowrelief raised raised}
    {-selectioncommand {doit} {@@scope :: doit}}
    {-selectioncommand {} {}}
    {-cursor {} {}}
	{-grab global global}
	{-grab local local}
    {-textvariable {} {} }
    {-dropdown false false}
    {-dropdown true true}
    {-textvariable option option}
    {-editable true true}
    {-editable false false}
    {-relief raised raised}
    {-relief groove groove}
    {-relief flat flat}
    {-relief sunken sunken}
    {-exportselection 1 1}
    {-exportselection 0 0}
    {-invalid {catch {blt_bell}} {catch {blt_bell}} }
    {-labelmargin 2 2}
    {-labelfont -Adobe-Helvetica-Bold-R-Normal--*-120-*  \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*}
    {-margin 5 5}
    {-popupcursor hand1 hand1}
    {-popupcursor hand2 hand2}
    {-selectbackground \#b2dfee \#b2dfee}
    {-selectbackground steelblue steelblue}
    {-selectborderwidth 1 1}
    {-selectforeground Black Black}
    {-textbackground white white}
    {-textfont 10x20 10x20}
    {-textfont -Adobe-Helvetica-Medium-R-Normal--*-120-* \
	-Adobe-Helvetica-Medium-R-Normal--*-120-*} 
    {-textvariable {} {} }
    {-unique true true}
    {-validate alpha alpha}
    {-validate {} {}}
    {-dropdown false false}
    {-hscrollmode dynamic static}
    {-hscrollmode dynamic dynamic}
    {-vscrollmode dynamic static}
	{-grab global global}
    {-vscrollmode dynamic dynamic}
    {-dropdown true true}} {
	set option [lindex $test 0]
	test Combobox-2.$o "configuration options, $option" {
	    .cb configure $option [lindex $test 2]
	    lindex [.cb configure $option] 4
	} [lindex $test 2]
	update 
	incr o
    }

#
# Option tests which fail and produce errors.
#
foreach test {
    {-borderwidth bogus {bad screen distance "bogus"}}
	{-completion bogus {bad completion option "bogus": should be boolean}}
    {-cursor bogus {bad cursor spec "bogus"}}
    {-dropdown bogus {bad dropdown option "bogus": should be boolean}}
	{-editable bogus {bad editable option "bogus": should be boolean}}
    {-exportselection bogus {expected boolean value but got "bogus"}}
    {-grab bogus {bad grab value "bogus": must be global or local}}
    {-listheight bogus {bad screen distance "bogus"}}
    {-hscrollmode bogus {bad hscrollmode option "bogus": should be static, dynamic, or none}}
    {-margin bogus {bad screen distance "bogus"}}
    {-popupcursor bogus {bad cursor spec "bogus"}}
    {-selectborderwidth bogus {bad screen distance "bogus"}}
    {-state bogus {bad state "bogus": must be disabled or normal}}
    {-unique bogus {bad unique value "bogus": should be boolean}}
    {-vscrollmode bogus {bad vscrollmode option "bogus": should be static, dynamic, or none}}
    {-width bogus {expected integer but got "bogus"}} } {
	set option [lindex $test 0]
        test Combobox-2.$o "configuration options, $option" {
	    list [catch {.cb configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}
#
# Method tests which are successful.
#
foreach test {
    {{.cb configure -editable 1} {}}
    {{.cb clear all} {}}
    {{.cb insert list 0 Test1 Test2 Test3 Test4} {}}
    {{.cb insert list end {More Test}} {}}
    {{.cb size} {5}}
    {{.cb delete list 1} {}}
    {{.cb delete list 0 2} {}}
    {{.cb size} {1}}
    {{.cb get 0} {More Test}}
    {{.cb selection set end end} {}}
    {{.cb getcurselection} {More Test}}
    {{.cb get} {More Test}}
    {{.cb clear entry} {}}
    {{.cb get} {}}
    {{.cb insert entry end "this is a test"} {} }
    {{.cb get} {this is a test}}
    {{.cb curselection} {}}
    {{.cb clear} {}}
    {{.cb size} {0}}
    {{.cb getcurselection} {}}
    {{.cb insert list end {Test1} {Test2} {Really Long String Test}} {}}
    {{.cb size} {3}}
    {{.cb get 0} {Test1}}
	{{.cb insert entry end R} {}}
	{{.cb getcurselection} {Really Long String Test}}
	{{.cb get} {Really Long String Test}}
	{{.cb config -completion off} {}}
	{{.cb selection clear 0 end} {}}
	{{.cb insert entry end R} {}}
	{{.cb get} {R}}
	{{.cb getcurselection} {}}
	{{.cb config -completion on} {}}
    {{.cb get [expr [.cb size]-1]} {Really Long String Test}}
    {{.cb insert list 0 {Test3} {Test4} {Really Long String Test}} {}}
    {{.cb size} {6}}
    {{.cb insert list 1 {Test5} {Test6} {Really Long String Test}} {}}
    {{.cb size} {9}}
    {{.cb insert list 5 {Test7} {Test8} {Really Long String Test}} {}}
    {{.cb size} {12}}
	{{.cb config -state disabled} {}}
	{{.cb insert list end {not gonna make it in}} {}}
	{{.cb size} {12}}
	{{.cb insert entry end {eally!}} {}}
	{{.cb get} {R}}
	{{.cb config -state normal} {}}
	{{.cb config -dropdown 0} {}}
	{{.cb size} {12}}
	{{.cb config -dropdown 1} {}}
	{{.cb size} {12}}
    {{.cb see 0} {}}
    {{.cb see 11} {}}
    {{.cb get end} {Really Long String Test}}
    {{.cb selection clear 0 end} {}}
    {{.cb selection set 5 5} {}}
    {{.cb curselection} {5}}
    {{.cb justify left} {}}
    {{.cb justify right} {}}
    {{.cb justify top} {}}
    {{.cb justify bottom} {}}
    {{.cb sort ascending} {}}
    {{.cb sort descending} {}}
    {{.cb sort increasing} {}}
    {{.cb sort decreasing} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Combobox-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

#
# Method tests which fail and produce errors
#
foreach test {
    {{.cb clear bogus} {bad Combobox component "bogus": must be entry, list, or all.}}
    {{.cb delete} {wrong # args: should be ".cb delete component first ?last?"}}
    {{.cb delete bogus 0} {bad Combobox component "bogus": must be entry or list.}}
    {{.cb delete list} {wrong # args: should be ".cb delete component first ?last?"}}
    {{.cb delete entry} {wrong # args: should be ".cb delete component first ?last?"}}
    {{.cb get bogus1 bogus2} {wrong # args: should be ".cb get ?index?"}}
    {{.cb insert} {wrong # args: should be ".cb insert component index ?arg arg ...?"}}
    {{.cb insert bogus 0 bogus0} {bad Combobox component "bogus": must be entry or list.}}
    {{.cb insert list} {wrong # args: should be ".cb insert component index ?arg arg ...?"}}
    {{.cb insert list 1} {no value given for parameter "string" in function "Combobox::insert"}}
    {{.cb insert entry a b c} {called function "Combobox::insert entry" with too many arguments}}
    {{.cb selection} {wrong # args: should be ".cb selection option first ?last?"}}
    {{.cb selection bogus1 bogus2 bogus3 bogus4} {wrong # args: should be ".cb selection option first ?last?"}}
    {{.cb selection bogus bogus} {bad Scrolledlistbox index "bogus": must be active, anchor, end, @@x,y, number, or a pattern}}
    {{.cb sort bogus} {bad sort argument "bogus": should be ascending, descending, increasing, or decreasing}}} {
    set method [lindex [lindex $test 0] 1]
    test Combobox-3.$m "object methods, $method" {
	list [catch {eval [lindex $test 0]} msg] $msg
    } [list 1 [lindex $test 1]]
    incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Combobox-4.1 {Combobox destruction} {
    destroy .cb
    update 
} {}

incr c

test Combobox-4.2 {Combobox construction} {
    iwidgets::Combobox .cb3 -selectioncommand {puts "choice: [.cb get]" } \
	-dropdown false -listheight 50 \
	-labeltext "Numeric Simple:" -labelpos w \
	-validate numeric -unique false
	.cb3 insert list end 123 456 789 101112
    pack .cb3 -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

test Combobox-4.3 {Combobox destruction} {
    destroy .cb3
    update 
} {}

test Combobox-4.4 {Combobox construction} {
    iwidgets::Combobox .cb4 -arrowrelief flat -selectioncommand {puts "choice: [.cb get]" } \
	-editable false \
	-listheight 200 -labeltext "DropDown:" -labelpos w \
	-popupcursor hand1 -unique true
	.cb4 insert list end Hello {Out There} World
    pack .cb4 -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

test Combobox-4.5 {Combobox destruction} {
    destroy .cb4
    update 
} {}

::tcltest::cleanupTests
exit
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d14 3
d47 1
a47 1
} {50}
d147 1
a147 1
    {-state bogus {bad state value "bogus": must be normal or disabled}}
d301 3
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@a13 3
package require tcltest
namespace import -force ::tcltest::*

d44 1
a44 1
} {51}
d144 1
a144 1
    {-state bogus {bad state "bogus": must be disabled or normal}}
a297 3

::tcltest::cleanupTests
exit
@


1.1.1.3
log
@Remove local modifications and files no longer in itcl 3.2.1
@
text
@@


