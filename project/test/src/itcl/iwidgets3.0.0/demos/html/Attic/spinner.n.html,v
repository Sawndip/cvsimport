head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.01.21.21.19.47;	author hunt;	state dead;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.32;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.38;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.07;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.25.02.47.46;	author kseitz;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete directory
@
text
@<TITLE>spinner - Create and manipulate a spinner widget</TITLE>
<H1>spinner - Create and manipulate a spinner widget</H1>

</pre><H2>SYNOPSIS</H2>
<B>spinner<I> <I>pathName </I>?<I>options</I>?
</pre><H2>INHERITANCE</H2>
itk::Widget &lt;- Labeledwidget &lt;- Spinner
</pre><H2>STANDARD OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>background</B><br>
<B>foreground</B><br>
<B>insertBorderWidth</B><br>
<B>justify</B><br>
<B>selectForeground</B><br>
</td>
<td valign=top>
<B>borderWidth</B><br>
<B>highlightColor</B><br>
<B>insertOffTime</B><br>
<B>relief</B><br>
<B>textVariable</B><br>
</td>
<td valign=top>
<B>cursor</B><br>
<B>highlightThickness</B><br>
<B>insertOnTime</B><br>
<B>selectBackground</B><br>
</td>
<td valign=top>
<B>exportSelection</B><br>
<B>insertBackground</B><br>
<B>insertWidth</B><br>
<B>selectBorderWidth</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/options.n.html"> "options" </A> manual entry for details on the standard options.
</pre><H2>ASSOCIATED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>show</B><br>
</td>
<td valign=top>
<B>state</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the associated options.
</pre><H2>INHERITED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childSitePos</B><br>
<B>invalid</B><br>
<B>width</B><br>
</td>
<td valign=top>
<B>command</B><br>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>fixed</B><br>
<B>textFont</B><br>
</td>
<td valign=top>
<B>focusCommand</B><br>
<B>validate</B><br>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> widget manual entry for details on the above
inherited options.
<P>
<table cellpadding=5>
<td valign=top>
<B>disabledForeground</B><br>
<B>labelMargin</B><br>
<B>state</B><br>
</td>
<td valign=top>
<B>labelBitmap</B><br>
<B>labelPos</B><br>
</td>
<td valign=top>
<B>labelFont</B><br>
<B>labelText</B><br>
</td>
<td valign=top>
<B>labelImage</B><br>
<B>labelVariable</B><br>
</td>
</table>
<P>
See the <A HREF="labeledwidget.n.html"> "labeledwidget" </A> widget manual entry for details on the above
inherited options.
</pre><H2>WIDGET-SPECIFIC OPTIONS</H2>
<P>
<pre>
Name:                   <B>arrowOrient</B>
Class:                  <B>Orient</B>
Command-Line Switch:	<B>-arroworient</B>
</pre>
<UL>
Specifies placement of arrow buttons: <B>horizontal</B> or <B>vertical</B>.
The default is vertical.
</UL>
<P>
<pre>
Name:                   <B>decrement</B>
Class:                  <B>Command</B>
Command-Line Switch:	<B>-decrement</B>
</pre>
<UL>
Tcl command to be executed when down arrow is pressed.
</UL>
<P>
<pre>
Name:                   <B>increment</B>
Class:                  <B>Command</B>
Command-Line Switch:	<B>-increment</B>
</pre>
<UL>
Tcl command to be executed when up arrow is pressed.
</UL>
<P>
<pre>
Name:                   <B>repeatDelay</B>
Class:                  <B>RepeatDelay</B>
Command-Line Switch:	<B>-repeatdelay</B>
</pre>
<UL>
Specifies the initial delay in milliseconds before the spinner repeat action 
on the arrow buttons engages.  The default is 300 milliseconds.
</UL>
<P>
<pre>
Name:                   <B>repeatInterval</B>
Class:                  <B>RepeatInterval</B>
Command-Line Switch:	<B>-repeatinterval</B>
</pre>
<UL>
Specifies the repeat delay in milliseconds between selections of the arrow 
buttons.  A repeatinterval of 0 disables button repeat.  The default is 
100 milliseconds.
</UL>
<P>
</pre><HR>

</pre><H2>DESCRIPTION</H2>
<P>
The <B>spinner</B> command creates a spinner widget.  The spinner is 
comprised of an entryfield plus up and down arrow buttons. 
Arrows may be drawn horizontally or vertically.
</pre>

</pre><H2>METHODS</H2>
<P>
The <B>spinner</B> command creates a new Tcl command whose
name is <I>pathName</I>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
<pre>
<I>pathName option </I>?<I>arg arg ...</I>?
</pre>
<I>Option</I> and the <I>arg</I>s
determine the exact behavior of the command.  The following
commands are possible for spinner widgets:
</pre><H2>ASSOCIATED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>delete</B><br>
<B>insert</B><br>
</td>
<td valign=top>
<B>get</B><br>
<B>scan</B><br>
</td>
<td valign=top>
<B>icursor</B><br>
<B>selection</B><br>
</td>
<td valign=top>
<B>index</B><br>
<B>xview</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the associated methods.
</pre><H2>INHERITED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childsite</B><br>
</td>
<td valign=top>
<B>clear</B><br>
</td>
<td valign=top>
<B>peek</B><br>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> manual entry for details on the associated methods.
</pre><H2>WIDGET-SPECIFIC METHODS</H2>
<DL>
<DT> <I>pathName <B>cget</B> <I>option</I>
</I></B>
<DD> Returns the current value of the configuration option given
by <I>option</I>.
<I>Option</I> may have any of the values accepted by the <B>spinner</B>
command.
</DL>
<DL>
<DT> <I>pathName</I> <B>configure</B> ?<I>option</I>? ?<I>value option value ...</I>?
</I></B>
<DD> Query or modify the configuration options of the widget.
If no <I>option</I> is specified, returns a list describing all of
the available options for <I>pathName</I> (see <B>Tk_ConfigureInfo</B> for
information on the format of this list).  If <I>option</I> is specified
with no <I>value</I>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <I>option</I> is specified).  If
one or more <I>option-value</I> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<I>Option</I> may have any of the values accepted by the <B>spinner</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>down</B>
</I></B>
<DD> Derived classes may overload this method to specialize functionality.
</DL>
<DL>
<DT> <I>pathName <B>up</B>
</I></B>
<DD> Derived classes may overload this method to specialize functionality.

</DL>
</pre><H2>COMPONENTS</H2>
<P>
<pre>
Name:                   <B>downarrow</B>
Class:                  <B>Canvas</B>
</pre>
<UL>
The downarrow component is the downward pointing button of the spinner.  See
the "canvas" widget manual entry for details on the downarrow component item.
</UL>
<P>
<pre>
Name:                   <B>uparrow</B>
Class:                  <B>Canvas</B>
</pre>
<UL>
The uparrow component is the upward pointing button of the spinner.  See
the "canvas" widget manual entry for details on the uparrow component item.
</UL>
</table>

</pre><H2>EXAMPLE</H2>
<pre>
 set months {January February March April May June July \\
                 August September October November December}

 proc blockInput {char} {
     return 0
 }

 proc spinMonth {step} {
     global months

     set index [expr [lsearch $months [.sm get]] + $step]

     if {$index &lt; 0} {set index 11}
     if {$index &gt; 11} {set index 0}

     .sm delete 0 end
     .sm insert 0 [lindex $months $index]
 }

 spinner .sm -labeltext "Month : " -width 10 -fixed 10 -validate blockInput \\
             -decrement {spinMonth -1} -increment {spinMonth 1}
 .sm insert 0 January

 pack .sm -padx 10 -pady 10
</pre>
</pre><H2>ACKNOWLEDGEMENTS:</H2>
<P>
Ken Copeland &lt;ken@@hilco.com&gt;
<UL>
10/18/95 - Added auto-repeat action to spinner arrow buttons.
</UL>
<P>
</pre><H2>AUTHOR</H2>
<A HREF="mailto:syockey@@spd.dsccc.com">Sue Yockey</A>
</pre><H2>KEYWORDS</H2>
spinner, widget
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d1 2
a2 8
<HTML>
<HEAD>
<TITLE>iwidgets2.2.0 User Commands - spinner</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1>iwidgets2.2.0 User Commands - spinner</H1>
<HR>
<PRE>
d4 305
a308 249
</PRE>
<H2><HR ALIGN=LEFT WIDTH=70% SIZE=3></H2><PRE>


</PRE>
<H2>NAME</H2><PRE>
     spinner - Create and manipulate a spinner widget


</PRE>
<H2>SYNOPSIS</H2><PRE>
     <STRONG>spinner</STRONG> <EM>pathName</EM> ?<EM>options</EM>?


</PRE>
<H2>INHERITANCE</H2><PRE>
     itk::Widget &lt;- Labeledwidget &lt;- Spinner


</PRE>
<H2>STANDARD OPTIONS</H2><PRE>
     <STRONG>background</STRONG>      <STRONG>borderWidth</STRONG>    <STRONG>cursor</STRONG>          <STRONG>exportSelection</STRONG>
     <STRONG>foreground</STRONG>      <STRONG>highlightColor</STRONG> <STRONG>highlightThicknessinsertBackground</STRONG>
     <STRONG>insertBorderWidth</STRONG>              <STRONG>insertOffTime</STRONG>   <STRONG>insertOnTimeinsertWidth</STRONG>
     <STRONG>justify</STRONG>         <STRONG>relief</STRONG>         <STRONG>selectBackgroundselectBorderWidth</STRONG>
     <STRONG>selectForeground</STRONG>               <STRONG>textVariable</STRONG>

     See the "options" manual entry for details on  the  standard
     options.


</PRE>
<H2>ASSOCIATED OPTIONS</H2><PRE>
     <STRONG>show</STRONG>            <STRONG>state</STRONG>

     See the "entry" manual entry for details on  the  associated
     options.


</PRE>
<H2>INHERITED OPTIONS</H2><PRE>
     <STRONG>childSitePos</STRONG>    <STRONG>command</STRONG>        <STRONG>fixed</STRONG>           <STRONG>focusCommand</STRONG>
     <STRONG>invalid</STRONG>         <STRONG>textBackground</STRONG> <STRONG>textFont</STRONG>        <STRONG>validate</STRONG>
     <STRONG>width</STRONG>

     See the "entryfield" widget manual entry for details on  the
     above inherited options.

     <STRONG>labelBitmap</STRONG>     <STRONG>labelFont</STRONG>      <STRONG>labelImage</STRONG>      <STRONG>labelMargin</STRONG>
     <STRONG>labelPos</STRONG>        <STRONG>labelText</STRONG>      <STRONG>labelVariable</STRONG>

     See the "labeledwidget" widget manual entry for  details  on
     the above inherited options.


</PRE>
<H2>WIDGET-SPECIFIC OPTIONS</H2><PRE>
     Name:           <STRONG>arrowOrient</STRONG>
     Class:          <STRONG>Orient</STRONG>
     Command-Line Switch:           <STRONG>-arroworient</STRONG>

          Specifies placement of  arrow  buttons:  <STRONG>horizontal</STRONG>  or
          <STRONG>vertical</STRONG>.  The default is vertical.

     Name:           <STRONG>decrement</STRONG>
     Class:          <STRONG>Command</STRONG>
     Command-Line Switch:           <STRONG>-decrement</STRONG>
          Tcl command to be executed when down arrow is pressed.

     Name:           <STRONG>increment</STRONG>
     Class:          <STRONG>Command</STRONG>
     Command-Line Switch:           <STRONG>-increment</STRONG>

          Tcl command to be executed when up arrow is pressed.

     Name:           <STRONG>repeatDelay</STRONG>
     Class:          <STRONG>RepeatDelay</STRONG>
     Command-Line Switch:           <STRONG>-repeatdelay</STRONG>

          Specifies the initial delay in milliseconds before  the
          spinner  repeat  action  on  the arrow buttons engages.
          The default is 300 milliseconds.

     Name:           <STRONG>repeatInterval</STRONG>
     Class:          <STRONG>RepeatInterval</STRONG>
     Command-Line Switch:           <STRONG>-repeatinterval</STRONG>

          Specifies the  repeat  delay  in  milliseconds  between
          selections of the arrow buttons.  A repeatinterval of 0
          disables  button  repeat.   The  default  is  100  mil-
          liseconds.


</PRE>
<H2><HR ALIGN=LEFT WIDTH=70% SIZE=3></H2><PRE>



</PRE>
<H2>DESCRIPTION</H2><PRE>
     The <STRONG>spinner</STRONG> command creates a spinner widget.   The  spinner
     is  comprised  of  an entryfield plus up and down arrow but-
     tons. Arrows may be drawn horizontally or vertically.




</PRE>
<H2>METHODS</H2><PRE>
     The <STRONG>spinner</STRONG> command creates a new Tcl command whose name  is
     <EM>pathName</EM>.  This command may be used to invoke various opera-
     tions on the widget.  It has the following general form:

          <EM>pathName</EM> <EM>option</EM> ?<EM>arg</EM> <EM>arg</EM> ...?

     <EM>Option</EM> and the <EM>arg</EM>s determine the exact behavior of the com-
     mand.  The following commands are possible for spinner widg-
     ets:


</PRE>
<H2>ASSOCIATED METHODS</H2><PRE>
     <STRONG>delete</STRONG>          <STRONG>get</STRONG>            <STRONG>icursor</STRONG>         <STRONG>index</STRONG>
     <STRONG>insert</STRONG>          <STRONG>scan</STRONG>           <STRONG>selection</STRONG>       <STRONG>xview</STRONG>

     See the "entry" manual entry for details on  the  associated
     methods.


</PRE>
<H2>INHERITED METHODS</H2><PRE>
     <STRONG>childsite</STRONG>       <STRONG>clear</STRONG>          <STRONG>peek</STRONG>

     See the "entryfield" manual entry for details on the associ-
     ated methods.


</PRE>
<H2>WIDGET-SPECIFIC METHODS</H2><PRE>
     <EM>pathName</EM> <STRONG>cget</STRONG> <EM>option</EM>
          Returns the current value of the  configuration  option
          given  by  <EM>option</EM>.   <EM>Option</EM>  may have any of the values
          accepted by the <STRONG>spinner</STRONG> command.

     <EM>pathName</EM> <STRONG>configure</STRONG> ?<EM>option</EM>? ?<EM>value</EM> <EM>option</EM> <EM>value</EM> ...?
          Query  or  modify  the  configuration  options  of  the
          widget.   If  no  <EM>option</EM>  is  specified, returns a list
          describing all of the available  options  for  <EM>pathName</EM>
          (see  <STRONG>Tk_ConfigureInfo</STRONG> for information on the format of
          this list).  If <EM>option</EM> is specified with no <EM>value</EM>, then
          the  command  returns  a  list describing the one named
          option (this list will be identical to the  correspond-
          ing  sublist  of  the  value  returned  if no <EM>option</EM> is
          specified).  If one or more  <EM>option</EM> - <EM>value</EM>  pairs  are
          specified,  then  the command modifies the given widget
          option(s) to have the given value(s);  in this case the
          command  returns  an empty string.  <EM>Option</EM> may have any
          of the values accepted by the <STRONG>spinner</STRONG> command.

     <EM>pathName</EM> <STRONG>down</STRONG>
          Derived classes may overload this method to  specialize
          functionality.

     <EM>pathName</EM> <STRONG>up</STRONG>
          Derived classes may overload this method to  specialize
          functionality.



</PRE>
<H2>COMPONENTS</H2><PRE>
     Name:           <STRONG>downarrow</STRONG>
     Class:          <STRONG>Canvas</STRONG>

          The downarrow component is the downward pointing button
          of  the  spinner.  See the "canvas" widget manual entry
          for details on the downarrow component item.

     Name:           <STRONG>uparrow</STRONG>
     Class:          <STRONG>Canvas</STRONG>

          The uparrow component is the upward pointing button  of
          the  spinner.  See the "canvas" widget manual entry for
          details on the uparrow component item.



</PRE>
<H2>EXAMPLE</H2><PRE>
           option add *textBackground GhostWhite

           set months {January February March April May June July \
                           August September October November December}

           proc blockInput {char} {
               return 0
           }

           proc spinMonth {step} {
               global months

               set index [expr [lsearch $months [.sm get]] + $step]

               if {$index &lt; 0} {set index 11}
               if {$index &gt; 11} {set index 0}

               .sm delete 0 end
               .sm insert 0 [lindex $months $index]
           }

           spinner .sm -labeltext "Month : " -width 10 -fixed 10 -validate blockInput \
                       -decrement {spinMonth -1} -increment {spinMonth 1}
           .sm insert 0 January

           pack .sm -padx 10 -pady 10



</PRE>
<H2>ACKNOWLEDGEMENTS:</H2><PRE>
     Ken Copeland &lt;ken@@hilco.com&gt;

          10/18/95 - Added auto-repeat action  to  spinner  arrow
          buttons.


</PRE>
<H2>AUTHOR</H2><PRE>
     Sue Yockey


</PRE>
<H2>KEYWORDS</H2><PRE>
     spinner, widget












</PRE>
</BODY>
</HTML>
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d1 8
a8 2
<TITLE>spinner - Create and manipulate a spinner widget</TITLE>
<H1>spinner - Create and manipulate a spinner widget</H1>
d10 249
a258 305
</pre><H2>SYNOPSIS</H2>
<B>spinner<I> <I>pathName </I>?<I>options</I>?
</pre><H2>INHERITANCE</H2>
itk::Widget &lt;- Labeledwidget &lt;- Spinner
</pre><H2>STANDARD OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>background</B><br>
<B>foreground</B><br>
<B>insertBorderWidth</B><br>
<B>justify</B><br>
<B>selectForeground</B><br>
</td>
<td valign=top>
<B>borderWidth</B><br>
<B>highlightColor</B><br>
<B>insertOffTime</B><br>
<B>relief</B><br>
<B>textVariable</B><br>
</td>
<td valign=top>
<B>cursor</B><br>
<B>highlightThickness</B><br>
<B>insertOnTime</B><br>
<B>selectBackground</B><br>
</td>
<td valign=top>
<B>exportSelection</B><br>
<B>insertBackground</B><br>
<B>insertWidth</B><br>
<B>selectBorderWidth</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/options.n.html"> "options" </A> manual entry for details on the standard options.
</pre><H2>ASSOCIATED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>show</B><br>
</td>
<td valign=top>
<B>state</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the associated options.
</pre><H2>INHERITED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childSitePos</B><br>
<B>invalid</B><br>
<B>width</B><br>
</td>
<td valign=top>
<B>command</B><br>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>fixed</B><br>
<B>textFont</B><br>
</td>
<td valign=top>
<B>focusCommand</B><br>
<B>validate</B><br>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> widget manual entry for details on the above
inherited options.
<P>
<table cellpadding=5>
<td valign=top>
<B>disabledForeground</B><br>
<B>labelMargin</B><br>
<B>state</B><br>
</td>
<td valign=top>
<B>labelBitmap</B><br>
<B>labelPos</B><br>
</td>
<td valign=top>
<B>labelFont</B><br>
<B>labelText</B><br>
</td>
<td valign=top>
<B>labelImage</B><br>
<B>labelVariable</B><br>
</td>
</table>
<P>
See the <A HREF="labeledwidget.n.html"> "labeledwidget" </A> widget manual entry for details on the above
inherited options.
</pre><H2>WIDGET-SPECIFIC OPTIONS</H2>
<P>
<pre>
Name:                   <B>arrowOrient</B>
Class:                  <B>Orient</B>
Command-Line Switch:	<B>-arroworient</B>
</pre>
<UL>
Specifies placement of arrow buttons: <B>horizontal</B> or <B>vertical</B>.
The default is vertical.
</UL>
<P>
<pre>
Name:                   <B>decrement</B>
Class:                  <B>Command</B>
Command-Line Switch:	<B>-decrement</B>
</pre>
<UL>
Tcl command to be executed when down arrow is pressed.
</UL>
<P>
<pre>
Name:                   <B>increment</B>
Class:                  <B>Command</B>
Command-Line Switch:	<B>-increment</B>
</pre>
<UL>
Tcl command to be executed when up arrow is pressed.
</UL>
<P>
<pre>
Name:                   <B>repeatDelay</B>
Class:                  <B>RepeatDelay</B>
Command-Line Switch:	<B>-repeatdelay</B>
</pre>
<UL>
Specifies the initial delay in milliseconds before the spinner repeat action 
on the arrow buttons engages.  The default is 300 milliseconds.
</UL>
<P>
<pre>
Name:                   <B>repeatInterval</B>
Class:                  <B>RepeatInterval</B>
Command-Line Switch:	<B>-repeatinterval</B>
</pre>
<UL>
Specifies the repeat delay in milliseconds between selections of the arrow 
buttons.  A repeatinterval of 0 disables button repeat.  The default is 
100 milliseconds.
</UL>
<P>
</pre><HR>

</pre><H2>DESCRIPTION</H2>
<P>
The <B>spinner</B> command creates a spinner widget.  The spinner is 
comprised of an entryfield plus up and down arrow buttons. 
Arrows may be drawn horizontally or vertically.
</pre>

</pre><H2>METHODS</H2>
<P>
The <B>spinner</B> command creates a new Tcl command whose
name is <I>pathName</I>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
<pre>
<I>pathName option </I>?<I>arg arg ...</I>?
</pre>
<I>Option</I> and the <I>arg</I>s
determine the exact behavior of the command.  The following
commands are possible for spinner widgets:
</pre><H2>ASSOCIATED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>delete</B><br>
<B>insert</B><br>
</td>
<td valign=top>
<B>get</B><br>
<B>scan</B><br>
</td>
<td valign=top>
<B>icursor</B><br>
<B>selection</B><br>
</td>
<td valign=top>
<B>index</B><br>
<B>xview</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the associated methods.
</pre><H2>INHERITED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childsite</B><br>
</td>
<td valign=top>
<B>clear</B><br>
</td>
<td valign=top>
<B>peek</B><br>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> manual entry for details on the associated methods.
</pre><H2>WIDGET-SPECIFIC METHODS</H2>
<DL>
<DT> <I>pathName <B>cget</B> <I>option</I>
</I></B>
<DD> Returns the current value of the configuration option given
by <I>option</I>.
<I>Option</I> may have any of the values accepted by the <B>spinner</B>
command.
</DL>
<DL>
<DT> <I>pathName</I> <B>configure</B> ?<I>option</I>? ?<I>value option value ...</I>?
</I></B>
<DD> Query or modify the configuration options of the widget.
If no <I>option</I> is specified, returns a list describing all of
the available options for <I>pathName</I> (see <B>Tk_ConfigureInfo</B> for
information on the format of this list).  If <I>option</I> is specified
with no <I>value</I>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <I>option</I> is specified).  If
one or more <I>option-value</I> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<I>Option</I> may have any of the values accepted by the <B>spinner</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>down</B>
</I></B>
<DD> Derived classes may overload this method to specialize functionality.
</DL>
<DL>
<DT> <I>pathName <B>up</B>
</I></B>
<DD> Derived classes may overload this method to specialize functionality.

</DL>
</pre><H2>COMPONENTS</H2>
<P>
<pre>
Name:                   <B>downarrow</B>
Class:                  <B>Canvas</B>
</pre>
<UL>
The downarrow component is the downward pointing button of the spinner.  See
the "canvas" widget manual entry for details on the downarrow component item.
</UL>
<P>
<pre>
Name:                   <B>uparrow</B>
Class:                  <B>Canvas</B>
</pre>
<UL>
The uparrow component is the upward pointing button of the spinner.  See
the "canvas" widget manual entry for details on the uparrow component item.
</UL>
</table>

</pre><H2>EXAMPLE</H2>
<pre>
 set months {January February March April May June July \\
                 August September October November December}

 proc blockInput {char} {
     return 0
 }

 proc spinMonth {step} {
     global months

     set index [expr [lsearch $months [.sm get]] + $step]

     if {$index &lt; 0} {set index 11}
     if {$index &gt; 11} {set index 0}

     .sm delete 0 end
     .sm insert 0 [lindex $months $index]
 }

 spinner .sm -labeltext "Month : " -width 10 -fixed 10 -validate blockInput \\
             -decrement {spinMonth -1} -increment {spinMonth 1}
 .sm insert 0 January

 pack .sm -padx 10 -pady 10
</pre>
</pre><H2>ACKNOWLEDGEMENTS:</H2>
<P>
Ken Copeland &lt;ken@@hilco.com&gt;
<UL>
10/18/95 - Added auto-repeat action to spinner arrow buttons.
</UL>
<P>
</pre><H2>AUTHOR</H2>
<A HREF="mailto:syockey@@spd.dsccc.com">Sue Yockey</A>
</pre><H2>KEYWORDS</H2>
spinner, widget
@


1.1.1.3
log
@Remove local modifications and files no longer in itcl 3.2.1
@
text
@@


