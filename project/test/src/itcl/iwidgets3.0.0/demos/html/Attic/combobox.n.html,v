head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.01.21.21.19.46;	author hunt;	state dead;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.32;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.38;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.07;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.25.02.47.46;	author kseitz;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete directory
@
text
@<TITLE>combobox - Create and manipulate combination box widgets</TITLE>
<H1>combobox - Create and manipulate combination box widgets</H1>

</pre><H2>SYNOPSIS</H2>
<B>combobox<I> <I>pathName </I>?<I>options</I>?
</pre><H2>INHERITANCE</H2>
itk::Widget &lt;- LabeledWidget &lt;- Entryfield &lt;- Combobox
</pre><H2>STANDARD OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B></B><br>
cursor<br>
highlightColor<br>
insertWidth<br>
insertWidth<br>
selectBorderWidth<br>
</td>
<td valign=top>
<B><br>
justify<br>
highlightThickness<br>
insertBackground<br>
insertBorderWidth<br>
textVariable<br>
</td>
<td valign=top>
background<br>
exportSelection<br>
relief<br>
insertOffTime<br>
selectForeground<br>
</B></I><br>
</td>
<td valign=top>
borderWidth<br>
foreground<br>
width<br>
insertOnTime<br>
selectBackground<br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/options.n.html"> "options" </A> manual entry for details on the standard options.
</pre><H2>ASSOCIATED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>hscrollmode</B><br>
</td>
<td valign=top>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>textFont</B><br>
</td>
<td valign=top>
<B>vscrollmode</B><br>
</td>
</table>
<P>
See the <A HREF="scrolledlistbox.n.html"> "scrolledlistbox" </A> manual entry for details on the above inherited 
options.
<P>
<table cellpadding=5>
<td valign=top>
<B>show</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the above inherited option.
</pre><H2>INHERITED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childSitePos</B><br>
<B>invalid</B><br>
</td>
<td valign=top>
<B>command</B><br>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>fixed</B><br>
<B>textFont</B><br>
</td>
<td valign=top>
<B>focusCommand</B><br>
<B>validate</B><br>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> class manual entry for details on the inherited options.
<P>
<table cellpadding=5>
<td valign=top>
<B>labelBitmap</B><br>
<B>labelPos</B><br>
</td>
<td valign=top>
<B>labelFont</B><br>
<B>labelText</B><br>
</td>
<td valign=top>
<B>labelImage</B><br>
<B>labelVariable</B><br>
</td>
<td valign=top>
<B>labelMargin</B><br>
</td>
</table>
<P>
See the <A HREF="labeledwidget.n.html"> "labeledwidget" </A> class manual entry for details on the 
inherited options.
</pre><H2>WIDGET-SPECIFIC OPTIONS</H2>
<P>
<pre>
Name:                   <B>arrowRelief</B>
Class:                  <B>Relief</B>
Command-Line Switch:	<B>-arrowrelief</B>
</pre>
<UL>
Specifies the relief style to use for a dropdown Combobox's arrow
button in a normal (not depressed) state. Acceptable values 
are <B>raised</B>, <B>sunken</B>, <B>flat</B>, <B>ridge</B>, and <B>groove</B>.  
Sunken is discouraged as this is the relief used to indicate a depressed 
state. This option has no effect on simple Comboboxes. The default is raised.
</UL>
<P>
<pre>
Name:                   <B>completion</B>
Class:                  <B>Completion</B>
Command-Line Switch:	<B>-completion</B>
</pre>
<UL>
Boolean given in any of the forms acceptable to <B>Tcl_GetBoolean</B> which
determines whether insertions into the entry field, whether from the
keyboard or programmatically via the <B>insert</B> method, are
automatically completed with the first matching item from the listbox.  The
default is true.
</UL>
<P>
<pre>
Name:                   <B>dropdown</B>
Class:                  <B>Dropdown</B>
Command-Line Switch:	<B>-dropdown</B>
</pre>
<UL>
Boolean describing the Combobox layout style given in any of the forms
acceptable to <B>Tcl_GetBoolean</B>. If true, the Combobox 
will be a dropdown style
widget which displays an entry field and an arrow button which when activated
will pop up a scrollable list of items. If false, a simple Combobox style 
will be used which has an entry field and a scrollable list beneath it 
which is always visible. Both styles allow an optional label for the entry
field area. The default is true. 
</UL>
<P>
<pre>
Name:                   <B>editable</B>
Class:                  <B>Editable</B>
Command-Line Switch:	<B>-editable</B>
</pre>
<UL>
Boolean describing whether or not the text entry area is editable
by the user. If true the user can add items to the combobox by entering text
into the entry area and then pressing Return. If false, the list of items is
non-editable and can only be changed by calling the insert or delete
methods. (The value in the entry field can still be modified by selecting
from the list.)  Given in any of the forms acceptable to <B>Tcl_GetBoolean</B>. 
The default is true.
</UL>
<P>
<pre>
Name:                   <B>grab</B>
Class:                  <B>Grab</B>
Command-Line Switch:	<B>-grab</B>
</pre>
<UL>
This option sets the grab scope for the appearance of the listbox in
drop-down comboboxes.  It can be either global or local.  The default is
local.
</UL>
<P>
<pre>
Name:                   <B>listHeight</B>
Class:                  <B>Height</B>
Command-Line Switch:	<B>-listheight</B>
</pre>
<UL>
Height of the listbox specified in any of the forms acceptable to 
<B>Tk_GetPixels</B>.  The default is 150 pixels.
</UL>
<P>
<pre>
Name:                   <B>margin</B>
Class:                  <B>Margin</B>
Command-Line Switch:	<B>-margin</B>
</pre>
<UL>
Specifies the width in pixels between the entry component and the arrow button
for a dropdown Combobox given in any of the forms acceptable to 
<B>Tk_GetPixels</B>. This option has no effect on a simple Combobox. The
default is 1.
</UL>
<P>
<pre>
Name:                   <B>popupCursor</B>
Class:                  <B>Cursor</B>
Command-Line Switch:	<B>-popupcursor</B>
</pre>
<UL>
Specifies the cursor to be used for dropdown style listboxes. The value
may have any of the forms acceptable to <B>Tk_GetCursor</B>. The default is
arrow. 
</UL>
<P>
<pre>
Name:                   <B>selectionCommand</B>
Class:                  <B>SelectionCommand</B>
Command-Line Switch:	<B>-selectioncommand</B>
</pre>
<UL>
Specifies a Tcl command procedure which is called when an item in the
listbox area is selected. The item will be selected in the list, the listbox 
will be removed if it is a dropdown Combobox, and the selected item's 
text will be inserted into the entry field before the -selectioncommand proc is
called. The default is {}.
</UL>
<P>
<pre>
Name:                   <B>state</B>
Class:                  <B>State</B>
Command-Line Switch:	<B>-state</B>
</pre>
<UL>
Specifies the overall state of the Combobox megawidget.  Can be either
normal or disabled.  If the Combobox is disabled, no text can be entered
into the entry field, no selection can be made in the listbox, and the
arrowBtn component is disabled.  The default is normal.
</UL>
<P>
<pre>
Name:                   <B>unique</B>
Class:                  <B>Unique</B>
Command-Line Switch:	<B>-unique</B>
</pre>
<UL>
Boolean describing whether or not duplicate items are allowed in the combobox
list. If true, then duplicates are not allowed to be inserted. If false, a
duplicate entry causes selection of the item. Given in any of the forms
acceptable to <B>Tcl_GetBoolean</B>. The default is true. 
</UL>
</pre><HR>

</pre><H2>DESCRIPTION</H2>
<P>
The <B>combobox</B> command creates an enhanced entry field widget with an
optional associated label and a scrollable list. When an item is selected in
the list area of a Combobox, its value is then displayed in the entry field
text area. Functionally similar to an Optionmenu, the Combobox adds (optional)
list scrolling and (optional) item editing and inserting capabilities. 
<P>
There are two basic styles of Comboboxes (determined by the -dropdown option):
dropdown and simple. The dropdown style adds an arrow button to the right of
the entry field which when activated will pop up (and down) the scrolled
listbox beneath the entry field. The simple (non-dropdown) Combobox 
permanently displays the listbox beneath the entry field and has no 
arrow button. Either style allows an optional entry field label.
</pre><H2>METHODS</H2>
<P>
The <B>combobox</B> command creates a new Tcl command whose
name is <I>pathName</I>. This
command may be used to invoke various
operations on the widget. It has the following general form:
<pre>
<I>pathName option </I>?<I>arg arg ...</I>?
</pre>
<I>Option</I> and the <I>arg</I>s
determine the exact behavior of the command. The following
commands are possible for Combobox widgets:
</pre><H2>ASSOCIATED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>icursor</B><br>
</td>
<td valign=top>
<B>scan</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entries for details on the above associated methods.
<P>
<table cellpadding=5>
<td valign=top>
<B>curselection</B><br>
<B>xview</B><br>
</td>
<td valign=top>
<B>index</B><br>
<B>yview</B><br>
</td>
<td valign=top>
<B>see</B><br>
</td>
<td valign=top>
<B>size</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/listbox.n.html"> "listbox" </A> manual entries for details on the above associated methods.
<P>
<table cellpadding=5>
<td valign=top>
<B>getcurselection</B><br>
</td>
<td valign=top>
<B>justify</B><br>
</td>
<td valign=top>
<B>sort</B><br>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="scrolledlistbox.n.html"> "scrolledlistbox" </A> manual entries for details on the above associated 
methods.
<P>
</pre><H2>WIDGET-SPECIFIC METHODS</H2>
<DL>
<DT> <I>pathName <B>cget</B> <I>option</I>
</I></B>
<DD> Returns the current value of the configuration option given
by <I>option</I>.
<I>Option</I> may have any of the values accepted by the <B>combobox</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>clear</B> ?<B>component</B>?
</I></B>
<DD> Clears the contents from one or both components. Valid component values
are <B>list</B>, or <B>entry</B>.  With no component specified, both are cleared.
</DL>
<DL>
<DT> <I>pathName</I> <B>configure</B> ?<I>option</I>? ?<I>value option value ...</I>?
</I></B>
<DD> Query or modify the configuration options of the widget.
If no <I>option</I> is specified, returns a list describing all of
the available options for <I>pathName</I> (see <B>Tk_ConfigureInfo</B> for
information on the format of this list).  If <I>option</I> is specified
with no <I>value</I>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <I>option</I> is specified).  If
one or more <I>option-value</I> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<I>Option</I> may have any of the values accepted by the <B>combobox</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>delete <I>component</I> <I>first</I> ?<I>last</I>?
</I></B>
<DD> Delete one or more elements from a given component, <B>list</B> or <B>entry</B>.
If a list item to be removed is currently selected (displayed in the entry 
field area), the entry field will be cleared.
</DL>
<DL>
<DT> <I>pathName <B>get ?<I>index</I>? </B></I>
</I></B>
<DD> With no arguments, returns the contents currently in the entry 
field area. With a single argument, returns the contents of the 
listbox item at the indicated index.
</DL>
<DL>
<DT> <I>pathName <B>insert</B> <I>component</I> <I>index</I> <I>element</I> ?<I>element element ...</I>?
</I></B>
<DD> Insert one or more new elements into the given component, <B>list</B> or
<B>entry</B>, just before the element given by <I>index</I>.
</DL>
<DL>
<DT> <I>pathName <B>selection</B> <I>option</I> <I>first</I> ?<I>last</I>?
</I></B>
<DD> Adjust the selection within the listbox component and updates the contents
of the entry field component to the value of the selected item. See the
"listbox" manual entry for more details on parameter options.
</DL>
</pre><H2>COMPONENTS</H2>
<P>
<pre>
Name:                   <B>entry</B>
Class:                  <B>Entry</B>
</pre>
<UL>
Text entry area where the current selection is displayed. If the 
Combobox is editable and its state is normal, the user can edit the 
contents of this item.
</UL>
<P>
<pre>
Name:                   <B>list</B>
Class:                  <B>Scrolledlistbox</B>
</pre>
<UL>
Scrollable list which stores all the items which the user can select
from. For dropdown Comboboxes, this component is hidden until the user pops it
up by pressing on the arrow button to the right of the entry component. For
simple Comboboxes this component is always visible just beneath the entry
component.
</UL>
</pre><H2>DEFAULT BINDINGS</H2>
<P>
The Combobox generally has the same bindings as its primary component items -
the Scrolledlistbox and Entryfield. However it also adds these:
<P>
[1] Button-1 mouse press on the arrow key of a dropdown Combobox causes the
list to be popped up. If the combobox is non-editable, a Button-1 press on the
entry field area will also pop up the list.
<P>
[2] Button-1 mouse press anywhere on the display removes a dropdown listbox
which has been popped up, unless the keypress is upon one of the Combobox
scrollbars which scrolls the list. If it is pressed upon an item in the list
area, that item will be selected before the list is removed.
<P>
[3] Button-3 mouse press on the arrow key of a dropdown Combobox causes the
next item to be selected. Shift-Button-3 causes the previous item to be
selected. 
<P>
[4] Escape keypress removes a dropdown list which has been popped up. 
<P>
[5] The &lt;space&gt; and &lt;Return&gt; keystrokes select the current item. They also
remove the popped up list for dropdown comboboxes.
<P>
[6] Up and Down arrow keypresses from the entry field and arrow button
component cause the previous and next items in the listbox to be selected 
respectively. Ctl-P and Ctl-N are similarly mapped for emacs emulation.
<P>
[7] Entry field and arrow button component Shift-Up and Shift-Down arrow keys
pop up and down the listbox of a dropdown Combobox. The arrow button component
also maps &lt;Return&gt; and &lt;space&gt; similarly.

</pre><H2>EXAMPLE</H2>
<pre>
 proc selectCmd {} {
    puts stdout "[.cb2 getcurselection]"
 }

 #
 # Non-editable Dropdown Combobox
 #
 combobox .cb1 -labeltext Month: \\
     -selectioncommand {puts "selected: [.cb1 getcurselection]"} \\
     -editable false -listheight 185 -popupcursor hand1 
 .cb1 insert list end Jan Feb Mar Apr May June Jul Aug Sept Oct Nov Dec
	
 #
 # Editable Dropdown Combobox
 #
 combobox .cb2 -labeltext "Operating System:" -selectioncommand selectCmd
 .cb2 insert list end Linux HP-UX SunOS Solaris Irix
 .cb2 insert entry end L

 pack .cb1 -padx 10 -pady 10 -fill x 
 pack .cb2 -padx 10 -pady 10 -fill x

</pre>
</pre><H2>ORIGINAL AUTHOR</H2>
<A HREF="mailto:jsigler@@spd.dsccc.com">John S. Sigler</A>
</pre><H2>CURRENT MAINTAINER</H2>
Mitch Gorman (logain@@erols.com)
</pre><H2>KEYWORDS</H2>
combobox, entryfield, scrolledlistbox, itk::Widget, entry, listbox, widget,
iwidgets
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d1 2
a2 8
<HTML>
<HEAD>
<TITLE>iwidgets2.2.0 User Commands - combobox</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1>iwidgets2.2.0 User Commands - combobox</H1>
<HR>
<PRE>
d4 481
a484 402
</PRE>
<H2><HR ALIGN=LEFT WIDTH=70% SIZE=3></H2><PRE>


</PRE>
<H2>NAME</H2><PRE>
     combobox - Create and manipulate combination box widgets


</PRE>
<H2>SYNOPSIS</H2><PRE>
     <STRONG>combobox</STRONG> <EM>pathName</EM> ?<EM>options</EM>?


</PRE>
<H2>INHERITANCE</H2><PRE>
     itk::Widget &lt;- LabeledWidget &lt;- Entryfield &lt;- Combobox


</PRE>
<H2>STANDARD OPTIONS</H2><PRE>
     <STRONG>background</STRONG>      <STRONG>borderWidth</STRONG>    <STRONG>cursor</STRONG>          <STRONG>exportSelection</STRONG>
     <STRONG>foreground</STRONG>      <STRONG>highlightColor</STRONG> <STRONG>highlightThicknessinsertBackground</STRONG>
     <STRONG>insertBorderWidth</STRONG>              <STRONG>insertOffTime</STRONG>   <STRONG>insertOnTimeinsertWidth</STRONG>
     <STRONG>justify</STRONG>         <STRONG>relief</STRONG>         <STRONG>selectBackgroundselectBorderWidth</STRONG>
     <STRONG>selectForeground</STRONG>               <STRONG>textVariable</STRONG>    <STRONG>width</STRONG>

     See the "options" manual entry for details on  the  standard
     options.


</PRE>
<H2>ASSOCIATED OPTIONS</H2><PRE>
     <STRONG>hscrollmode</STRONG>     <STRONG>items</STRONG>          <STRONG>textBackground</STRONG>  <STRONG>textFont</STRONG>
     <STRONG>vscrollmode</STRONG>

     See the "scrolledlistbox" manual entry for  details  on  the
     above inherited options.

     <STRONG>show</STRONG>            <STRONG>state</STRONG>

     See the "entry" manual entry for details on the above inher-
     ited options.


</PRE>
<H2>INHERITED OPTIONS</H2><PRE>
     <STRONG>childSitePos</STRONG>    <STRONG>command</STRONG>        <STRONG>fixed</STRONG>           <STRONG>focusCommand</STRONG>
     <STRONG>invalid</STRONG>         <STRONG>textBackground</STRONG> <STRONG>textFont</STRONG>        <STRONG>validate</STRONG>

     See the "entryfield" class manual entry for details  on  the
     inherited options.

     <STRONG>labelBitmap</STRONG>     <STRONG>labelFont</STRONG>      <STRONG>labelImage</STRONG>      <STRONG>labelMargin</STRONG>
     <STRONG>labelPos</STRONG>        <STRONG>labelText</STRONG>      <STRONG>labelVariable</STRONG>

     See the "labeledwidget" class manual entry  for  details  on
     the inherited options.


</PRE>
<H2>WIDGET-SPECIFIC OPTIONS</H2><PRE>
     Name:           <STRONG>autoClear</STRONG>
     Class:          <STRONG>AutoClear</STRONG>
     Command-Line Switch:           <STRONG>-autoclear</STRONG>

          Boolean value that specifies wheather or not  to  clear
          the entry field as items are added to the list given in
          any of the forms  acceptable  to  <STRONG>Tcl_GetBoolean</STRONG>.   The
          default is true.

     Name:           <STRONG>arrowRelief</STRONG>
     Class:          <STRONG>Relief</STRONG>
     Command-Line Switch:           <STRONG>-arrowrelief</STRONG>

          Specifies the  relief  style  to  use  for  a  dropdown
          Combobox's  arrow  button  in  a normal (not depressed)
          state. Acceptable  values  are  <STRONG>raised</STRONG>,  <STRONG>sunken</STRONG>,  <STRONG>flat</STRONG>,
          <STRONG>ridge</STRONG>, and <STRONG>groove</STRONG>. Sunken is discouraged as this is the
          relief used to indicate a depressed state. This  option
          has  no  effect  on  simple  Comboboxes. The default is
          raised.

     Name:           <STRONG>dropdown</STRONG>
     Class:          <STRONG>Dropdown</STRONG>
     Command-Line Switch:           <STRONG>-dropdown</STRONG>

          Boolean describing the Combobox layout style  given  in
          any of the forms acceptable to <STRONG>Tcl_GetBoolean</STRONG>. If true,
          the Combobox will be  a  dropdown  style  widget  which
          displays  an entry field and an arrow button which when
          activated will pop up a scrollable list  of  items.  If
          false,  a  simple Combobox style will be used which has
          an entry field and a scrollable list beneath  it  which
          is  always visible. Both styles allow an optional label
          for the entry field area. The default is true.

     Name:           <STRONG>editable</STRONG>
     Class:          <STRONG>Editable</STRONG>
     Command-Line Switch:           <STRONG>-editable</STRONG>

          Boolean describing whether or not the text  entry  area
          is editable by the user. If true the user can add items
          to the combobox by entering text into  the  entry  area
          and  then  pressing Return. If false, the list of items
          is non-editable and can only be changed by calling  the
          insert  or  delete  methods.  Given in any of the forms
          acceptable to <STRONG>Tcl_GetBoolean</STRONG>. The default is true.

     Name:           <STRONG>flipArrow</STRONG>
     Class:          <STRONG>FlipArrow</STRONG>
     Command-Line Switch:           <STRONG>-fliparrow</STRONG>

          Boolean describing whether or not the arrow  button  of
          dropdowns  should  be reversed (point up) when the list
          is popped up. Given in any of the forms  acceptable  to
          <STRONG>Tcl_GetBoolean</STRONG>. The default is false.


     Name:           <STRONG>listHeight</STRONG>
     Class:          <STRONG>Height</STRONG>
     Command-Line Switch:           <STRONG>-listheight</STRONG>

          Height of the listbox specified in  any  of  the  forms
          acceptable to <STRONG>Tk_GetPixels</STRONG>.  The default is 100 pixels.

     Name:           <STRONG>margin</STRONG>
     Class:          <STRONG>Margin</STRONG>
     Command-Line Switch:           <STRONG>-margin</STRONG>

          Specifies the width in pixels between  the  entry  com-
          ponent  and  the  arrow  button for a dropdown Combobox
          given in any of the forms acceptable  to  <STRONG>Tk_GetPixels</STRONG>.
          This  option  has  no  effect on a simple Combobox. The
          default is 0.

     Name:           <STRONG>popupCursor</STRONG>
     Class:          <STRONG>Cursor</STRONG>
     Command-Line Switch:           <STRONG>-popupcursor</STRONG>

          Specifies the cursor to  be  used  for  dropdown  style
          listboxes.  The value may have any of the forms accept-
          able to <STRONG>Tk_GetCursor</STRONG>. The default is arrow.

     Name:           <STRONG>selectionCommand</STRONG>
     Class:          <STRONG>SelectionCommand</STRONG>
     Command-Line Switch:           <STRONG>-selectioncommand</STRONG>

          Specifies a Tcl command procedure which is called  when
          an  item in the listbox area is selected. The item will
          be selected in the list, the listbox will be removed if
          it is a dropdown Combobox, and the selected item's text
          will be  inserted  into  the  entry  field  before  the
          -selectioncommand proc is called. The default is {}.

     Name:           <STRONG>unique</STRONG>
     Class:          <STRONG>Unique</STRONG>
     Command-Line Switch:           <STRONG>-unique</STRONG>

          Boolean describing whether or not duplicate  items  are
          allowed  in the combobox list. If true, then duplicates
          are not allowed to be inserted. If false,  a  duplicate
          entry causes selection of the item. Given in any of the
          forms acceptable  to  <STRONG>Tcl_GetBoolean</STRONG>.  The  default  is
          true.

</PRE>
<H2><HR ALIGN=LEFT WIDTH=70% SIZE=3></H2><PRE>



</PRE>
<H2>DESCRIPTION</H2><PRE>
     The <STRONG>combobox</STRONG> command creates an enhanced entry field  widget
     with  an  optional  associated  label and a scrollable list.
     When an item is selected in the list area of a Combobox it's
     value  is then displayed in the entry field text area. Func-
     tionally  similar  to  an  Optionmenu,  the  Combobox   adds
     (optional)  list  scrolling  and (optional) item editing and
     inserting capabilities.

     There are two basic styles of Comboboxes (determined by  the
     -dropdown  option):  dropdown and simple. The dropdown style
     adds an arrow button to the right of the entry  field  which
     when  activated  will pop up (and down) the scrolled listbox
     beneath the entry field. The simple (non-dropdown)  Combobox
     permanently displays the listbox beneath the entry field and
     has no arrow button. Either style allows an  optional  entry
     field label.


</PRE>
<H2>METHODS</H2><PRE>
     The <STRONG>combobox</STRONG> command creates a new Tcl command whose name is
     <EM>pathName</EM>.  This command may be used to invoke various opera-
     tions on the widget. It has the following general form:

          <EM>pathName</EM> <EM>option</EM> ?<EM>arg</EM> <EM>arg</EM> ...?

     <EM>Option</EM> and the <EM>arg</EM>s determine the exact behavior of the com-
     mand. The following commands are possible for Combobox widg-
     ets:


</PRE>
<H2>ASSOCIATED METHODS</H2><PRE>
     <STRONG>icursor</STRONG>         <STRONG>scan</STRONG>

     See the "entry" manual entries  for  details  on  the  above
     associated methods.

     <STRONG>curselection</STRONG>    <STRONG>index</STRONG>          <STRONG>see</STRONG>             <STRONG>size</STRONG>
     <STRONG>xview</STRONG>           <STRONG>yview</STRONG>

     See the "listbox" manual entries for details  on  the  above
     associated methods.

     <STRONG>getcurselection</STRONG> <STRONG>justify</STRONG>        <STRONG>sort</STRONG>

     See the "scrolledlistbox" manual entries for details on  the
     above associated methods.


</PRE>
<H2>WIDGET-SPECIFIC METHODS</H2><PRE>
     <EM>pathName</EM> <STRONG>cget</STRONG> <EM>option</EM>
          Returns the current value of the  configuration  option
          given  by  <EM>option</EM>.   <EM>Option</EM>  may have any of the values
          accepted by the <STRONG>combobox</STRONG> command.

     <EM>pathName</EM> <STRONG>clear</STRONG> ?<STRONG>component</STRONG>?
          Clears the contents from one or both components.  Valid
          component values are <STRONG>list</STRONG>, or <STRONG>entry</STRONG>.  With no component
          specified, both are cleared.

     <EM>pathName</EM> <STRONG>configure</STRONG> ?<EM>option</EM>? ?<EM>value</EM> <EM>option</EM> <EM>value</EM> ...?
          Query  or  modify  the  configuration  options  of  the
          widget.   If  no  <EM>option</EM>  is  specified, returns a list
          describing all of the available  options  for  <EM>pathName</EM>
          (see  <STRONG>Tk_ConfigureInfo</STRONG> for information on the format of
          this list).  If <EM>option</EM> is specified with no <EM>value</EM>, then
          the  command  returns  a  list describing the one named
          option (this list will be identical to the  correspond-
          ing  sublist  of  the  value  returned  if no <EM>option</EM> is
          specified).  If one or more  <EM>option</EM> - <EM>value</EM>  pairs  are
          specified,  then  the command modifies the given widget
          option(s) to have the given value(s);  in this case the
          command  returns  an empty string.  <EM>Option</EM> may have any
          of the values accepted by the <STRONG>combobox</STRONG> command.

     <EM>pathName</EM> <STRONG>delete</STRONG> <EM>component</EM> <EM>first</EM> ?<EM>last</EM>?
          Delete one or more elements  from  a  given  component,
          <STRONG>list</STRONG>  or  <STRONG>entry</STRONG>.   If  a  list  item  to  be removed is
          currently selected (displayed in the entry field area),
          the entry field will be cleared.

     <EM>pathName</EM> <STRONG>get</STRONG> <STRONG>?</STRONG><EM>index</EM>?
          With no arguments, returns the  contents  currently  in
          the  entry  field area. With a single argument, returns
          the contents of  the  listbox  item  at  the  indicated
          index.

     <EM>pathName</EM> <STRONG>insert</STRONG> <EM>component</EM> <EM>index</EM> <EM>element</EM> ?<EM>element</EM> <EM>element</EM> ...?
          Insert  one  or  more  new elements into the given com-
          ponent, <STRONG>list</STRONG> or <STRONG>entry</STRONG>, just before the element given by
          <EM>index</EM>.

     <EM>pathName</EM> <STRONG>selection</STRONG> <EM>option</EM> <EM>first</EM> ?<EM>last</EM>?
          Adjust the selection within the listbox  component  and
          updates  the  contents  of the entry field component to
          the value of  the  selected  item.  See  the  "listbox"
          manual entry for more details on parameter options.


</PRE>
<H2>COMPONENTS</H2><PRE>
     Name:           <STRONG>entry</STRONG>
     Class:          <STRONG>Entryfield</STRONG>

          Text  entry  area  where  the  current   selection   is
          displayed.  If  the  Combobox is editable, the user can
          edit the contents of this item.

     Name:           <STRONG>list</STRONG>
     Class:          <STRONG>Scrolledlistbox</STRONG>

          Scrollable list which stores all the  items  which  the
          user  can  select  from.  For dropdown Comboboxes, this
          component is hidden until the user pops it up by press-
          ing  on the arrow button to the right of the entry com-
          ponent. For simple Comboboxes this component is  always
          visible just beneath the entry component.


</PRE>
<H2>DEFAULT BINDINGS</H2><PRE>
     The Combobox generally has the same bindings as it's primary
     component  items  - the Scrolledlistbox and Entryfield. How-
     ever it also adds these:

     [1] Button-1 mouse press on the arrow key of a dropdown Com-
     bobox  causes  the  list to be popped up. If the combobox is
     non-editable, a Button-1 press on the entry field area  will
     also pop up the list.

     [2] Button-1 mouse press anywhere on the display  removes  a
     dropdown  listbox  which  has  been  popped  up,  unless the
     keypress is  upon  one  of  the  Combobox  scrollbars  which
     scrolls  the list. If it is pressed upon an item in the list
     area, that item will be selected before the list is removed.

     [3] Button-3 mouse press on the arrow key of a dropdown Com-
     bobox  causes  the  next item to be selected. Shift-Button-3
     causes the previous item to be selected.

     [4] Escape keypress removes a dropdown list which  has  been
     popped up.

     [5] The &lt;space&gt; and &lt;Return&gt; keystrokes select  the  current
     item.  They also remove the popped up list for dropdown com-
     boboxes.

     [6] Up and Down arrow keypresses from the  entry  field  and
     arrow  button component cause the previous and next items in
     the listbox to be selected respectively. Ctl-P and Ctl-N are
     similarly mapped for emacs emulation.

     [7] Entry field and  arrow  button  component  Shift-Up  and
     Shift-Down arrow keys pop up and down the listbox of a drop-
     down Combobox. The arrow button component also maps &lt;Return&gt;
     and &lt;space&gt; similarly.



</PRE>
<H2>EXAMPLE</H2><PRE>
           proc selectCmd {} {
              puts stdout "[.cb2 getcurselection]"
           }

           #
           # Non-editable Dropdown Combobox
           #
           combobox .cb1 -labeltext Month: \
               -selectioncommand {puts "selected: [.cb1 getcurselection]"} \
               -editable false -listheight 185 -popupcursor hand1 \
               -items {Jan Feb Mar Apr May June Jul Aug Sept Oct Nov Dec}

           #
           # Editable Dropdown Combobox
           #
           combobox .cb2 -labeltext "Operating System:" \
              -items {Linux HP-UX SunOS Solaris Irix} -selectioncommand selectCmd

           #
           # Simple Combobox
           #
           combobox .cb3 -labeltext Fonts: -labelpos nw \
             -dropdown false -listheight 220 -items [exec xlsfonts]

           pack .cb1 -padx 10 -pady 10 -fill x
           pack .cb2 -padx 10 -pady 10 -fill x
           pack .cb3 -padx 10 -pady 10 -fill x




</PRE>
<H2>AUTHOR</H2><PRE>
     John S. Sigler


</PRE>
<H2>KEYWORDS</H2><PRE>
     combobox, entryfield, scrolledlistbox,  itk::Widget,  entry,
     listbox, widget, iwidgets























</PRE>
</BODY>
</HTML>
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d1 8
a8 2
<TITLE>combobox - Create and manipulate combination box widgets</TITLE>
<H1>combobox - Create and manipulate combination box widgets</H1>
d10 402
a411 481
</pre><H2>SYNOPSIS</H2>
<B>combobox<I> <I>pathName </I>?<I>options</I>?
</pre><H2>INHERITANCE</H2>
itk::Widget &lt;- LabeledWidget &lt;- Entryfield &lt;- Combobox
</pre><H2>STANDARD OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B></B><br>
cursor<br>
highlightColor<br>
insertWidth<br>
insertWidth<br>
selectBorderWidth<br>
</td>
<td valign=top>
<B><br>
justify<br>
highlightThickness<br>
insertBackground<br>
insertBorderWidth<br>
textVariable<br>
</td>
<td valign=top>
background<br>
exportSelection<br>
relief<br>
insertOffTime<br>
selectForeground<br>
</B></I><br>
</td>
<td valign=top>
borderWidth<br>
foreground<br>
width<br>
insertOnTime<br>
selectBackground<br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/options.n.html"> "options" </A> manual entry for details on the standard options.
</pre><H2>ASSOCIATED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>hscrollmode</B><br>
</td>
<td valign=top>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>textFont</B><br>
</td>
<td valign=top>
<B>vscrollmode</B><br>
</td>
</table>
<P>
See the <A HREF="scrolledlistbox.n.html"> "scrolledlistbox" </A> manual entry for details on the above inherited 
options.
<P>
<table cellpadding=5>
<td valign=top>
<B>show</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entry for details on the above inherited option.
</pre><H2>INHERITED OPTIONS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>childSitePos</B><br>
<B>invalid</B><br>
</td>
<td valign=top>
<B>command</B><br>
<B>textBackground</B><br>
</td>
<td valign=top>
<B>fixed</B><br>
<B>textFont</B><br>
</td>
<td valign=top>
<B>focusCommand</B><br>
<B>validate</B><br>
</td>
</table>
<P>
See the <A HREF="entryfield.n.html"> "entryfield" </A> class manual entry for details on the inherited options.
<P>
<table cellpadding=5>
<td valign=top>
<B>labelBitmap</B><br>
<B>labelPos</B><br>
</td>
<td valign=top>
<B>labelFont</B><br>
<B>labelText</B><br>
</td>
<td valign=top>
<B>labelImage</B><br>
<B>labelVariable</B><br>
</td>
<td valign=top>
<B>labelMargin</B><br>
</td>
</table>
<P>
See the <A HREF="labeledwidget.n.html"> "labeledwidget" </A> class manual entry for details on the 
inherited options.
</pre><H2>WIDGET-SPECIFIC OPTIONS</H2>
<P>
<pre>
Name:                   <B>arrowRelief</B>
Class:                  <B>Relief</B>
Command-Line Switch:	<B>-arrowrelief</B>
</pre>
<UL>
Specifies the relief style to use for a dropdown Combobox's arrow
button in a normal (not depressed) state. Acceptable values 
are <B>raised</B>, <B>sunken</B>, <B>flat</B>, <B>ridge</B>, and <B>groove</B>.  
Sunken is discouraged as this is the relief used to indicate a depressed 
state. This option has no effect on simple Comboboxes. The default is raised.
</UL>
<P>
<pre>
Name:                   <B>completion</B>
Class:                  <B>Completion</B>
Command-Line Switch:	<B>-completion</B>
</pre>
<UL>
Boolean given in any of the forms acceptable to <B>Tcl_GetBoolean</B> which
determines whether insertions into the entry field, whether from the
keyboard or programmatically via the <B>insert</B> method, are
automatically completed with the first matching item from the listbox.  The
default is true.
</UL>
<P>
<pre>
Name:                   <B>dropdown</B>
Class:                  <B>Dropdown</B>
Command-Line Switch:	<B>-dropdown</B>
</pre>
<UL>
Boolean describing the Combobox layout style given in any of the forms
acceptable to <B>Tcl_GetBoolean</B>. If true, the Combobox 
will be a dropdown style
widget which displays an entry field and an arrow button which when activated
will pop up a scrollable list of items. If false, a simple Combobox style 
will be used which has an entry field and a scrollable list beneath it 
which is always visible. Both styles allow an optional label for the entry
field area. The default is true. 
</UL>
<P>
<pre>
Name:                   <B>editable</B>
Class:                  <B>Editable</B>
Command-Line Switch:	<B>-editable</B>
</pre>
<UL>
Boolean describing whether or not the text entry area is editable
by the user. If true the user can add items to the combobox by entering text
into the entry area and then pressing Return. If false, the list of items is
non-editable and can only be changed by calling the insert or delete
methods. (The value in the entry field can still be modified by selecting
from the list.)  Given in any of the forms acceptable to <B>Tcl_GetBoolean</B>. 
The default is true.
</UL>
<P>
<pre>
Name:                   <B>grab</B>
Class:                  <B>Grab</B>
Command-Line Switch:	<B>-grab</B>
</pre>
<UL>
This option sets the grab scope for the appearance of the listbox in
drop-down comboboxes.  It can be either global or local.  The default is
local.
</UL>
<P>
<pre>
Name:                   <B>listHeight</B>
Class:                  <B>Height</B>
Command-Line Switch:	<B>-listheight</B>
</pre>
<UL>
Height of the listbox specified in any of the forms acceptable to 
<B>Tk_GetPixels</B>.  The default is 150 pixels.
</UL>
<P>
<pre>
Name:                   <B>margin</B>
Class:                  <B>Margin</B>
Command-Line Switch:	<B>-margin</B>
</pre>
<UL>
Specifies the width in pixels between the entry component and the arrow button
for a dropdown Combobox given in any of the forms acceptable to 
<B>Tk_GetPixels</B>. This option has no effect on a simple Combobox. The
default is 1.
</UL>
<P>
<pre>
Name:                   <B>popupCursor</B>
Class:                  <B>Cursor</B>
Command-Line Switch:	<B>-popupcursor</B>
</pre>
<UL>
Specifies the cursor to be used for dropdown style listboxes. The value
may have any of the forms acceptable to <B>Tk_GetCursor</B>. The default is
arrow. 
</UL>
<P>
<pre>
Name:                   <B>selectionCommand</B>
Class:                  <B>SelectionCommand</B>
Command-Line Switch:	<B>-selectioncommand</B>
</pre>
<UL>
Specifies a Tcl command procedure which is called when an item in the
listbox area is selected. The item will be selected in the list, the listbox 
will be removed if it is a dropdown Combobox, and the selected item's 
text will be inserted into the entry field before the -selectioncommand proc is
called. The default is {}.
</UL>
<P>
<pre>
Name:                   <B>state</B>
Class:                  <B>State</B>
Command-Line Switch:	<B>-state</B>
</pre>
<UL>
Specifies the overall state of the Combobox megawidget.  Can be either
normal or disabled.  If the Combobox is disabled, no text can be entered
into the entry field, no selection can be made in the listbox, and the
arrowBtn component is disabled.  The default is normal.
</UL>
<P>
<pre>
Name:                   <B>unique</B>
Class:                  <B>Unique</B>
Command-Line Switch:	<B>-unique</B>
</pre>
<UL>
Boolean describing whether or not duplicate items are allowed in the combobox
list. If true, then duplicates are not allowed to be inserted. If false, a
duplicate entry causes selection of the item. Given in any of the forms
acceptable to <B>Tcl_GetBoolean</B>. The default is true. 
</UL>
</pre><HR>

</pre><H2>DESCRIPTION</H2>
<P>
The <B>combobox</B> command creates an enhanced entry field widget with an
optional associated label and a scrollable list. When an item is selected in
the list area of a Combobox, its value is then displayed in the entry field
text area. Functionally similar to an Optionmenu, the Combobox adds (optional)
list scrolling and (optional) item editing and inserting capabilities. 
<P>
There are two basic styles of Comboboxes (determined by the -dropdown option):
dropdown and simple. The dropdown style adds an arrow button to the right of
the entry field which when activated will pop up (and down) the scrolled
listbox beneath the entry field. The simple (non-dropdown) Combobox 
permanently displays the listbox beneath the entry field and has no 
arrow button. Either style allows an optional entry field label.
</pre><H2>METHODS</H2>
<P>
The <B>combobox</B> command creates a new Tcl command whose
name is <I>pathName</I>. This
command may be used to invoke various
operations on the widget. It has the following general form:
<pre>
<I>pathName option </I>?<I>arg arg ...</I>?
</pre>
<I>Option</I> and the <I>arg</I>s
determine the exact behavior of the command. The following
commands are possible for Combobox widgets:
</pre><H2>ASSOCIATED METHODS</H2>
<P>
<table cellpadding=5>
<td valign=top>
<B>icursor</B><br>
</td>
<td valign=top>
<B>scan</B><br>
</td>
<td valign=top>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/entry.n.html"> "entry" </A> manual entries for details on the above associated methods.
<P>
<table cellpadding=5>
<td valign=top>
<B>curselection</B><br>
<B>xview</B><br>
</td>
<td valign=top>
<B>index</B><br>
<B>yview</B><br>
</td>
<td valign=top>
<B>see</B><br>
</td>
<td valign=top>
<B>size</B><br>
</td>
</table>
<P>
See the <A HREF="http://www.sco.com/Technology/tcl/man/tk_man/listbox.n.html"> "listbox" </A> manual entries for details on the above associated methods.
<P>
<table cellpadding=5>
<td valign=top>
<B>getcurselection</B><br>
</td>
<td valign=top>
<B>justify</B><br>
</td>
<td valign=top>
<B>sort</B><br>
</td>
<td valign=top>
</td>
</table>
<P>
See the <A HREF="scrolledlistbox.n.html"> "scrolledlistbox" </A> manual entries for details on the above associated 
methods.
<P>
</pre><H2>WIDGET-SPECIFIC METHODS</H2>
<DL>
<DT> <I>pathName <B>cget</B> <I>option</I>
</I></B>
<DD> Returns the current value of the configuration option given
by <I>option</I>.
<I>Option</I> may have any of the values accepted by the <B>combobox</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>clear</B> ?<B>component</B>?
</I></B>
<DD> Clears the contents from one or both components. Valid component values
are <B>list</B>, or <B>entry</B>.  With no component specified, both are cleared.
</DL>
<DL>
<DT> <I>pathName</I> <B>configure</B> ?<I>option</I>? ?<I>value option value ...</I>?
</I></B>
<DD> Query or modify the configuration options of the widget.
If no <I>option</I> is specified, returns a list describing all of
the available options for <I>pathName</I> (see <B>Tk_ConfigureInfo</B> for
information on the format of this list).  If <I>option</I> is specified
with no <I>value</I>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <I>option</I> is specified).  If
one or more <I>option-value</I> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<I>Option</I> may have any of the values accepted by the <B>combobox</B>
command.
</DL>
<DL>
<DT> <I>pathName <B>delete <I>component</I> <I>first</I> ?<I>last</I>?
</I></B>
<DD> Delete one or more elements from a given component, <B>list</B> or <B>entry</B>.
If a list item to be removed is currently selected (displayed in the entry 
field area), the entry field will be cleared.
</DL>
<DL>
<DT> <I>pathName <B>get ?<I>index</I>? </B></I>
</I></B>
<DD> With no arguments, returns the contents currently in the entry 
field area. With a single argument, returns the contents of the 
listbox item at the indicated index.
</DL>
<DL>
<DT> <I>pathName <B>insert</B> <I>component</I> <I>index</I> <I>element</I> ?<I>element element ...</I>?
</I></B>
<DD> Insert one or more new elements into the given component, <B>list</B> or
<B>entry</B>, just before the element given by <I>index</I>.
</DL>
<DL>
<DT> <I>pathName <B>selection</B> <I>option</I> <I>first</I> ?<I>last</I>?
</I></B>
<DD> Adjust the selection within the listbox component and updates the contents
of the entry field component to the value of the selected item. See the
"listbox" manual entry for more details on parameter options.
</DL>
</pre><H2>COMPONENTS</H2>
<P>
<pre>
Name:                   <B>entry</B>
Class:                  <B>Entry</B>
</pre>
<UL>
Text entry area where the current selection is displayed. If the 
Combobox is editable and its state is normal, the user can edit the 
contents of this item.
</UL>
<P>
<pre>
Name:                   <B>list</B>
Class:                  <B>Scrolledlistbox</B>
</pre>
<UL>
Scrollable list which stores all the items which the user can select
from. For dropdown Comboboxes, this component is hidden until the user pops it
up by pressing on the arrow button to the right of the entry component. For
simple Comboboxes this component is always visible just beneath the entry
component.
</UL>
</pre><H2>DEFAULT BINDINGS</H2>
<P>
The Combobox generally has the same bindings as its primary component items -
the Scrolledlistbox and Entryfield. However it also adds these:
<P>
[1] Button-1 mouse press on the arrow key of a dropdown Combobox causes the
list to be popped up. If the combobox is non-editable, a Button-1 press on the
entry field area will also pop up the list.
<P>
[2] Button-1 mouse press anywhere on the display removes a dropdown listbox
which has been popped up, unless the keypress is upon one of the Combobox
scrollbars which scrolls the list. If it is pressed upon an item in the list
area, that item will be selected before the list is removed.
<P>
[3] Button-3 mouse press on the arrow key of a dropdown Combobox causes the
next item to be selected. Shift-Button-3 causes the previous item to be
selected. 
<P>
[4] Escape keypress removes a dropdown list which has been popped up. 
<P>
[5] The &lt;space&gt; and &lt;Return&gt; keystrokes select the current item. They also
remove the popped up list for dropdown comboboxes.
<P>
[6] Up and Down arrow keypresses from the entry field and arrow button
component cause the previous and next items in the listbox to be selected 
respectively. Ctl-P and Ctl-N are similarly mapped for emacs emulation.
<P>
[7] Entry field and arrow button component Shift-Up and Shift-Down arrow keys
pop up and down the listbox of a dropdown Combobox. The arrow button component
also maps &lt;Return&gt; and &lt;space&gt; similarly.

</pre><H2>EXAMPLE</H2>
<pre>
 proc selectCmd {} {
    puts stdout "[.cb2 getcurselection]"
 }

 #
 # Non-editable Dropdown Combobox
 #
 combobox .cb1 -labeltext Month: \\
     -selectioncommand {puts "selected: [.cb1 getcurselection]"} \\
     -editable false -listheight 185 -popupcursor hand1 
 .cb1 insert list end Jan Feb Mar Apr May June Jul Aug Sept Oct Nov Dec
	
 #
 # Editable Dropdown Combobox
 #
 combobox .cb2 -labeltext "Operating System:" -selectioncommand selectCmd
 .cb2 insert list end Linux HP-UX SunOS Solaris Irix
 .cb2 insert entry end L

 pack .cb1 -padx 10 -pady 10 -fill x 
 pack .cb2 -padx 10 -pady 10 -fill x

</pre>
</pre><H2>ORIGINAL AUTHOR</H2>
<A HREF="mailto:jsigler@@spd.dsccc.com">John S. Sigler</A>
</pre><H2>CURRENT MAINTAINER</H2>
Mitch Gorman (logain@@erols.com)
</pre><H2>KEYWORDS</H2>
combobox, entryfield, scrolledlistbox, itk::Widget, entry, listbox, widget,
iwidgets
@


1.1.1.3
log
@Remove local modifications and files no longer in itcl 3.2.1
@
text
@@


