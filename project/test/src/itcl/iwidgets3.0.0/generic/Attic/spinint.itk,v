head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.01.21.21.19.51;	author hunt;	state dead;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.34;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.39;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.09;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.25.02.47.48;	author kseitz;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete directory
@
text
@# Spinint 
# ----------------------------------------------------------------------
# Implements an integer spinner widget.  It inherits basic spinner
# functionality from Spinner and adds specific features to create 
# an integer-only spinner. 
# Arrows may be placed horizontally or vertically.
# User may specify an integer range and step value.
# Spinner may be configured to wrap when min or max value is reached.
#
# NOTE:
# Spinint integer values should not exceed the size of a long integer.
# For a 32 bit long the integer range is -2147483648 to 2147483647.
#
# ----------------------------------------------------------------------
#   AUTHOR:  Sue Yockey               Phone: (214) 519-2517
#                                     E-mail: syockey@@spd.dsccc.com
#                                             yockey@@acm.org
#
#   @@(#) $Id: spinint.itk,v 1.2.172.1 2001/05/18 02:21:49 mdejong Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1995 DSC Technologies Corporation
# ======================================================================
# Permission to use, copy, modify, distribute and license this software 
# and its documentation for any purpose, and without fee or written 
# agreement with DSC, is hereby granted, provided that the above copyright 
# notice appears in all copies and that both the copyright notice and 
# warranty disclaimer below appear in supporting documentation, and that 
# the names of DSC Technologies Corporation or DSC Communications 
# Corporation not be used in advertising or publicity pertaining to the 
# software without specific, written prior permission.
# 
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND NON-
# INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, 
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL 
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR 
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
# SOFTWARE.
# ======================================================================

#
# Usual options.
#
itk::usual Spinint {
    keep -background -borderwidth -cursor -foreground -highlightcolor \
	 -highlightthickness -insertbackground  -insertborderwidth \
	 -insertofftime -insertontime -insertwidth -labelfont \
	 -selectbackground -selectborderwidth -selectforeground \
	 -textbackground -textfont
}

# ------------------------------------------------------------------
#                            SPININT
# ------------------------------------------------------------------
class iwidgets::Spinint {
    inherit iwidgets::Spinner 

    constructor {args} {
	Spinner::constructor -validate numeric 
    } {}

    itk_option define -range range Range "" 
    itk_option define -step step Step 1 
    itk_option define -wrap wrap Wrap true 

    public method up {}
    public method down {}
}

#
# Provide a lowercased access method for the Spinint class.
# 
proc ::iwidgets::spinint {pathName args} {
    uplevel ::iwidgets::Spinint $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
body iwidgets::Spinint::constructor {args} {
    eval itk_initialize $args
    
    $itk_component(entry) delete 0 end
    
    if {[lindex $itk_option(-range) 0] == ""} {
	$itk_component(entry) insert 0 "0"
    } else { 
	$itk_component(entry) insert 0 [lindex $itk_option(-range) 0] 
    }
}

# ------------------------------------------------------------------
#                             OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION: -range
#
# Set min and max values for spinner.
# ------------------------------------------------------------------
configbody iwidgets::Spinint::range {
    if {$itk_option(-range) != ""} {
	if {[llength $itk_option(-range)] != 2} {
	    error "wrong # args: should be\
		    \"$itk_component(hull) configure -range {begin end}\""
    	}

    	set min [lindex $itk_option(-range) 0]
    	set max [lindex $itk_option(-range) 1]

    	if {![regexp {^-?[0-9]+$} $min]} {
    	    error "bad range option \"$min\": begin value must be\
		    an integer"
    	}
    	if {![regexp {^-?[0-9]+$} $max]} {
    	    error "bad range option \"$max\": end value must be\
		    an integer"
    	}
    	if {$min > $max} {
    	    error "bad option starting range \"$min\": must be less\
		    than ending: \"$max\""
    	}
    } 
}

# ------------------------------------------------------------------
# OPTION: -step
#
# Increment spinner by step value.
# ------------------------------------------------------------------
configbody iwidgets::Spinint::step {
}

# ------------------------------------------------------------------
# OPTION: -wrap
#
# Specify whether spinner should wrap value if at min or max.
# ------------------------------------------------------------------
configbody iwidgets::Spinint::wrap {
}

# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# METHOD: up
#
# Up arrow button press event.  Increment value in entry.
# ------------------------------------------------------------------
body iwidgets::Spinint::up {} {
    set min_range [lindex $itk_option(-range) 0]
    set max_range [lindex $itk_option(-range) 1]
    
    set val [$itk_component(entry) get]
    if {[lindex $itk_option(-range) 0] != ""} {
	
	#
	# Check boundaries.
	#
	if {$val >= $min_range && $val < $max_range} {
	    incr val $itk_option(-step)
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
	} else {
	    if {$itk_option(-wrap)} {
		if {$val >= $max_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $min_range 
		} elseif {$val < $min_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $min_range 
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    } else {
		uplevel #0 $itk_option(-invalid)
	    }
	}
    } else {
	
	#
	# No boundaries.
	#
	incr val $itk_option(-step)
	$itk_component(entry) delete 0 end
	$itk_component(entry) insert 0 $val
    }
}

# ------------------------------------------------------------------
# METHOD: down 
#
# Down arrow button press event.  Decrement value in entry.
# ------------------------------------------------------------------
body iwidgets::Spinint::down {} {
    set min_range [lindex $itk_option(-range) 0]
    set max_range [lindex $itk_option(-range) 1]
    
    set val [$itk_component(entry) get]
    if {[lindex $itk_option(-range) 0] != ""} {
	
	#
	# Check boundaries.
	#
	if {$val > $min_range && $val <= $max_range} {
	    incr val -$itk_option(-step)
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
	} else {
	    if {$itk_option(-wrap)} {
		if {$val <= $min_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $max_range
		} elseif {$val > $max_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $max_range
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    } else {
		uplevel #0 $itk_option(-invalid)
	    }
	}
    } else {
	
	#
	# No boundaries.
	#
	incr val -$itk_option(-step)
	$itk_component(entry) delete 0 end
	$itk_component(entry) insert 0 $val
    }
}
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
#   @@(#) $Id: spinint.itk,v 1.2 1999/01/27 18:56:36 jingham Exp $
d166 2
a167 24
	    
	    #
	    # Re-check boundaries.
	    #
	    if {$val >= $min_range && $val <= $max_range} {
		$itk_component(entry) delete 0 end
		$itk_component(entry) insert 0 $val
	    } else {
		
		#
		# This is wrap when -step > 1.
		#
		if {$itk_option(-wrap)} {
		    if {$val > $max_range} {
			$itk_component(entry) delete 0 end
			$itk_component(entry) insert 0 $min_range
		    } else {
			uplevel #0 $itk_option(-invalid)
		    }
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    }
	    
d170 4
a173 1
		if {$val == $max_range} {
d211 2
a212 24
	    
	    #
	    # Re-check boundaries.
	    #
	    if {$val >= $min_range && $val <= $max_range} {
		$itk_component(entry) delete 0 end
		$itk_component(entry) insert 0 $val
	    } else {
		
		#
		# This is wrap when -step > 1.
		#
		if {$itk_option(-wrap)} {
		    if {$val < $min_range} {
			$itk_component(entry) delete 0 end
			$itk_component(entry) insert 0 $max_range
		    } else {
			uplevel #0 $itk_option(-invalid)
		    }
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    }
	    
d215 4
a218 1
		if {$val == $min_range} {
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d19 1
a19 1
#   @@(#) $Id: spinint.itk,v 1.2.172.1 2001/05/18 02:21:49 mdejong Exp $
d166 24
a189 2
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
d192 1
a192 4
		if {$val >= $max_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $min_range 
		} elseif {$val < $min_range} {
d230 24
a253 2
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
d256 1
a256 4
		if {$val <= $min_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $max_range
		} elseif {$val > $max_range} {
@


1.1.1.3
log
@Remove local modifications and files no longer in itcl 3.2.1
@
text
@@


