head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.12
	gdb_7_5-branch:1.2.0.10
	gdb_7_4-branch:1.2.0.8
	gdb_7_3-branch:1.2.0.6
	gdb_7_1-branch:1.2.0.4
	gdb_7_0-branch:1.2.0.2
	arc-sim-20090309:1.1.1.1
	arc-insight_6_8-branch:1.1.1.1.0.16
	arc-insight_6_8-branchpoint:1.1.1.1
	insight_6_8-branch:1.1.1.1.0.14
	insight_6_8-branchpoint:1.1.1.1
	ITCL_3_3:1.1.1.1
	gdb_6_8-branch:1.1.1.1.0.12
	insight_6_6-20070208-release:1.1.1.1
	gdb_6_6-branch:1.1.1.1.0.10
	gdb_6_6-2006-11-15-branchpoint:1.1.1.1
	insight_6_5-20061003-release:1.1.1.1
	gdb_6_5-branch:1.1.1.1.0.8
	gdb_6_5-2006-05-14-branchpoint:1.1.1.1
	gdb_6_4-branch:1.1.1.1.0.6
	gdb_6_4-2005-11-01-branchpoint:1.1.1.1
	gdb_6_1-2004-04-05-release:1.1.1.1
	gdb_6_1-branch:1.1.1.1.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.1
	gdb_6_0-2003-10-04-release:1.1.1.1
	gdb_6_0-branch:1.1.1.1.0.2
	gdb_6_0-2003-06-23-branchpoint:1.1.1.1
	ITCL3_2_1:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2008.07.22.20.32.47;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.20.43.00;	author hunt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.21.20.43.00;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@#
# Scopedobject
# -----------------------------------------------------------------------------
# Implements a base class for defining Itcl classes which posses
# scoped behavior like Tcl variables.  The objects are only accessible
# within the procedure in which they are instantiated and are deleted
# when the procedure returns.
#
# Option(s):
#
#   -enterscopecommand: Tcl command to invoke when a object enters scope
#                       (i.e. when it is created ...).
#
#   -exitscopecommand: Tcl command to invoke when a object exits scope
#                       (i.e. when it is deleted ...).
#
# Note(s):
#
# Although a Scopedobject instance will automatically destroy itself
# when it goes out of scope, one may explicity delete an instance
# before it destroys itself.
#
# Example(s):
#
#  Creating an instance at local scope in a procedure provides
#  an opportunity for tracing the entry and exiting of that
#  procedure.  Users can register their proc/method tracing handlers
#  with the Scopedobject class via either of the following two ways:
#
#  1.) configure the "-exitscopecommand" on a Scopedobject instance;
#      e.g.
#      #!/usr/local/bin/wish
#
#      proc tracedProc {} {
#        scopedobject #auto \
#            -exitscopecommand {puts "enter tracedProc"} \
#            -exitscopecommand {puts "exit tracedProc"}
#      }
#
#  2.) deriving from the Scopedobject and implementing the exit handling
#      in their derived classes destructor.
#      e.g.
#
#      #!/usr/local/bin/wish
#
#      class Proctrace {
#        inherit Scopedobject
#
#        proc procname {} {
#          return [info level -1]
#        }
#
#        constructor {args} {
#          puts "enter [procname]"
#          eval configure $args
#        }
#
#        destructor {
#          puts "exit [procname]"
#        }
#      }
#
#      proc tracedProc {} {
#        Proctrace #auto
#      }
#
# -----------------------------------------------------------------------------
#   AUTHOR:  John Tucker
#            DSC Communications Corp  
# -----------------------------------------------------------------------------

itcl::class iwidgets::Scopedobject {

  #
  # OPTIONS:
  #
  public {
    variable enterscopecommand {}
    variable exitscopecommand {}
  }

  #
  # PUBLIC:
  #
  constructor {args} {}
  destructor {}

  #
  # PRIVATE:
  #
  private {

    # Implements the Tcl trace command callback which is responsible
    # for destroying a Scopedobject instance when its corresponding
    # Tcl variable goes out of scope.
    #
    method _traceCommand {varName varValue op}

    # Stores the stack level of the invoking procedure in which
    # a Scopedobject instance in created.
    #
    variable _level 0
  }
}

#
# Provide a lowercased access method for the Scopedobject class.
# 
proc ::iwidgets::scopedobject {pathName args} {
    uplevel ::iwidgets::Scopedobject $pathName $args
}

#--------------------------------------------------------------------------------
# CONSTRUCTOR
#--------------------------------------------------------------------------------
itcl::body iwidgets::Scopedobject::constructor {args} {

  # Create a local variable in the procedure which this instance was created,
  # and then register out instance deletion command (i.e. _traceCommand)
  # to be called whenever the local variable is unset.
  #
  # If this is a derived class, then we will need to perform the variable creation
  # and tracing N levels up the stack frame, where:
  #   N = depth of inheritance hierarchy.
  #
  set depth [llength [$this info heritage]]
  set _level "#[uplevel $depth info level]"
  uplevel $_level set _localVar($this) $this
  uplevel $_level trace variable _localVar($this) u \"[itcl::code $this _traceCommand]\"

  eval configure $args

  if {$enterscopecommand != {}} {
    eval $enterscopecommand
  }
}

#--------------------------------------------------------------------------------
# DESTRUCTOR
#--------------------------------------------------------------------------------
itcl::body iwidgets::Scopedobject::destructor {} {

  uplevel $_level trace vdelete _localVar($this) u \"[itcl::code $this _traceCommand]\"

  if {$exitscopecommand != {}} {
    eval $exitscopecommand
  }
}

#--------------------------------------------------------------------------------#
#
# METHOD: _traceCommand
#
# PURPOSE: 
# Callback used to destroy instances when their locally created variable
# goes out of scope.
#
itcl::body iwidgets::Scopedobject::_traceCommand {varName varValue op} {
  delete object $this
}

#------------------------------------------------------------------------------
#
# OPTION: -enterscopecommand
#
# PURPOSE:
# Specifies a Tcl command to invoke when a object enters scope.
#
itcl::configbody iwidgets::Scopedobject::enterscopecommand {
}

#------------------------------------------------------------------------------
#
# OPTION: -exitscopecommand
#
# PURPOSE:
# Specifies a Tcl command to invoke when an object exits scope.
#
itcl::configbody iwidgets::Scopedobject::exitscopecommand {
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@imported itcl 3.2.1
@
text
@@
