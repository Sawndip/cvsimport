head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.51;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.25;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.29;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.34;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.43;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.39.57;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#------------------------------------------------------------------------------
# Visual C++ 5.0+ makefile for [Incr Tcl]
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.32 2004/09/24 22:45:02 davygrvy Exp $
#------------------------------------------------------------------------------
#  Do not modify this file!
#------------------------------------------------------------------------------

!if !exist("makefile.vc")
MSG = ^
You must run this makefile only from the directory it is in.^
Please `cd` to its location first.
!error $(MSG) 
!endif

PROJECT	= itcl
!include "..\..\rules.vc"

!if $(TCLINSTALL)
!message *** Warning: [Incr Tcl] requires the source distribution of Tcl to build from,
!message ***    at this time, sorry.  Please set the TCLDIR macro to point to the
!message ***    sources.
!endif

!if [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 33
ITCL_DOTVERSION	= 3.3
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 34
ITCL_DOTVERSION	= 3.4
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 35
ITCL_DOTVERSION	= 3.5
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 0
MSG =^
Can't get version string from ..\generic\itcl.h
!error $(MSG)
!endif
ITCL_VERSION	= $(ITCL_DOTVERSION:.=)


BINROOT		= .
ROOT		= ..
STUBPREFIX	= $(PROJECT)stub

PKGINDEX	= "$(TMP_DIR)\pkgIndex.tcl"

!if $(TCL_DOES_STUBS)
ITCLLIBNAME	= $(PROJECT)$(ITCL_VERSION)$(SUFX).$(EXT)
!else
ITCLLIBNAME	= $(PROJECT)$(ITCL_VERSION)80$(SUFX).$(EXT)
!endif

ITCLLIB		= "$(OUT_DIR)\$(ITCLLIBNAME)"
ITCLIMPLIB	= "$(OUT_DIR)\$(PROJECT)$(ITCL_VERSION)$(SUFX).lib"

!if $(TCL_DOES_STUBS)
ITCLSTUBLIBNAME	= $(STUBPREFIX)$(ITCL_VERSION).lib
ITCLSTUBLIB	= "$(OUT_DIR)\$(ITCLSTUBLIBNAME)"
!else
ITCLSTUBLIBNAME	=
ITCLSTUBLIB	= 
TCLSTUBLIB	= $(TCLIMPLIB)
!endif

BIN_INSTALL_DIR		= $(_INSTALLDIR)\bin
DOC_INSTALL_DIR		= $(_INSTALLDIR)\doc
LIB_INSTALL_DIR		= $(_INSTALLDIR)\lib
SCRIPT_INSTALL_DIR	= $(_INSTALLDIR)\lib\itcl$(ITCL_DOTVERSION)
INCLUDE_INSTALL_DIR	= $(_INSTALLDIR)\include

ITCLOBJS = \
	$(TMP_DIR)\itcl_bicmds.obj \
	$(TMP_DIR)\itcl_class.obj \
	$(TMP_DIR)\itcl_cmds.obj \
	$(TMP_DIR)\itcl_ensemble.obj \
	$(TMP_DIR)\itcl_linkage.obj \
	$(TMP_DIR)\itcl_migrate.obj \
	$(TMP_DIR)\itcl_methods.obj \
	$(TMP_DIR)\itcl_objects.obj \
	$(TMP_DIR)\itcl_parse.obj \
	$(TMP_DIR)\itcl_util.obj \
!if $(TCL_DOES_STUBS)
	$(TMP_DIR)\itclStubInit.obj \
!endif
!if !$(STATIC_BUILD)
	$(TMP_DIR)\dllEntryPoint.obj \
	$(TMP_DIR)\itcl.res
!endif

ITCLSTUBOBJS = \
!if $(TCL_DOES_STUBS)
	$(TMP_DIR)\itclStubLib.obj
!endif

GENERICDIR	= $(ROOT)\generic
DOCDIR		= $(ROOT)\doc
RCDIR		= $(ROOT)\win\rc
WINDIR		= $(ROOT)\win
TOOLSDIR	= ..\..\tools

#---------------------------------------------------------------------
# Link flags
#---------------------------------------------------------------------

!if $(DEBUG)
ldebug	= -debug:full -debugtype:cv
!else
ldebug	= -release -opt:ref -opt:icf,3
!endif

# declarations common to all linker options
lflags	= -nologo -machine:$(MACHINE) $(ldebug)

!if $(PROFILE)
lflags	= $(lflags) -profile
!endif

!if $(ALIGN98_HACK) && !$(STATIC_BUILD)
# align sections for PE size savings.
lflags	= $(lflags) -opt:nowin98
!else if !$(ALIGN98_HACK) && $(STATIC_BUILD)
# align sections for speed in loading by choosing the virtual page size.
lflags	= $(lflags) -align:4096
!endif

!if $(LOIMPACT)
lflags	= $(lflags) -ws:aggressive
!endif

ITCL_LFLAGS = $(lflags) -subsystem:windows -dll

!if exist("$(TCLDIR)\win\coffbase.txt")
ITCL_DLLBASE	= -base:@@$(TCLDIR)\win\coffbase.txt,itcl
!else
ITCL_DLLBASE	=
!endif

#---------------------------------------------------------------------
# Compile flags
#---------------------------------------------------------------------

!if $(DEBUG)
!if "$(MACHINE)" == "IA64"
cdebug = -Od -Zi
!else
cdebug = -Z7 -Od -WX
!endif
!else
# This cranks the optimization level up to max.
cdebug = -O2
!endif

# declarations common to all compiler options
cflags = -nologo -c -W3 -YX -Fp$(TMP_DIR)^\

!if $(PENT_0F_ERRATA)
cflags = $(cflags) -QI0f
!endif

!if $(ITAN_B_ERRATA)
cflags = $(cflags) -QIA64_Bx
!endif

!if $(MSVCRT)
crt = -MD$(DBGX)
!else
crt = -MT$(DBGX)
!endif

!if $(TCLINSTALL)
TCL_INCLUDES	= -I"$(TCLDIR)\include"
!else
TCL_INCLUDES	= -I"$(TCLDIR)\generic" -I"$(TCLDIR)\win"
!endif

ITCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR)
ITCL_DEFINES	= -DBUILD_itcl -DTCL_THREADS=1
ITCL_EXE_CFLAGS	= $(cdebug) $(cflags) $(crt) $(ITCL_INCLUDES) $(ITCL_DEFINES) $(TCL_INCLUDES)

### By convention, static builds do not use Stubs.  This is just a practice,
### not a technical limitation.
!if $(STATIC_BUILD)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DSTATIC_BUILD
!elseif $(TCL_DOES_STUBS)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS
!else
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS)
!endif

#---------------------------------------------------------------------
# TclTest flags
#---------------------------------------------------------------------

!if "$(TESTPAT)" != ""
TESTFLAGS = -file $(TESTPAT)
!endif

#---------------------------------------------------------------------
# Project specific targets
#---------------------------------------------------------------------

all :     setup $(ITCLLIB) $(ITCLSTUBLIB)
release : setup $(ITCLLIB) $(ITCLSTUBLIB)
install : install-binaries install-docs

setup :
	@@if not exist $(TMP_DIR)\nul mkdir $(TMP_DIR)
	@@if not exist $(OUT_DIR)\nul mkdir $(OUT_DIR)

$(ITCLLIB): $(ITCLOBJS)
!if $(STATIC_BUILD)
	$(lib32) -nologo -machine:$(MACHINE) -out:$@@ @@<<
$(ITCLOBJS)
<<
!else
	$(link32) $(ITCL_LFLAGS) $(ITCL_DLLBASE) -out:$@@ $(TCLSTUBLIB) @@<<
$(ITCLOBJS)
<<
	-@@del $*.exp
!endif

!if $(TCL_DOES_STUBS)
$(ITCLSTUBLIB) : $(ITCLSTUBOBJS)
	$(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)
!endif

install-binaries :
	if not exist "$(_INSTALLDIR)" mkdir "$(_INSTALLDIR)"
	if not exist "$(BIN_INSTALL_DIR)" mkdir "$(BIN_INSTALL_DIR)"
	if not exist "$(LIB_INSTALL_DIR)" mkdir "$(LIB_INSTALL_DIR)"
	if not exist "$(SCRIPT_INSTALL_DIR)" mkdir "$(SCRIPT_INSTALL_DIR)"
	if not exist "$(INCLUDE_INSTALL_DIR)" mkdir "$(INCLUDE_INSTALL_DIR)"
	copy $(ITCLLIB) "$(SCRIPT_INSTALL_DIR)"
!if ""$(ITCLSTUBLIB)"" != """"
	copy $(ITCLSTUBLIB) "$(LIB_INSTALL_DIR)"
!endif
	copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\generic\itclDecls.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
	echo if {[package vsatisfies 8.0 [package provide Tcl]]} {\
		> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ set add 80>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo } else {>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ set add {}>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo }>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo if {[info exists ::tcl_platform(debug)] ^&^&\
		$$::tcl_platform(debug)	^&^& \>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ ^ ^ ^ ^ [file exists [file join $$dir\
		$(PROJECT)$(ITCL_VERSION)$${add}g.dll]]}\
		{>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ package ifneeded Itcl $(ITCL_DOTVERSION) [list load\
		[file join $$dir $(PROJECT)$(ITCL_VERSION)$${add}g.dll]\
		Itcl]>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo } else {>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ package ifneeded Itcl $(ITCL_DOTVERSION) [list load\
		[file join $$dir $(PROJECT)$(ITCL_VERSION)$${add}.dll]\
		Itcl]>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo }>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo unset add>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"

!if $(STATIC_BUILD)
test :
	@@echo test target not supported for a static library.
!else
test : setup $(ITCLLIB) $(ITCLSTUBLIB)
	$(TCLSH) ..\tests\all.tcl $(TESTFLAGS) -loadfile <<
	set env(ITCL_LIBRARY) [file normalize [file join $(MAKEDIR:\=/) .. library]]
	load [file normalize [file join $(MAKEDIR:\=/) $(ITCLLIB:\=/)]]
<<
!endif

#---------------------------------------------------------------------
# Regenerate the stubs files.
#---------------------------------------------------------------------

genstubs:
!if $(TCLINSTALL)
	@@echo Need the source distribution to regenerate the Stubs table.
!else
	$(TCLSH) $(TOOLSDIR)\genStubs.tcl $(GENERICDIR) \
        	$(GENERICDIR)\$(PROJECT).decls $(GENERICDIR)\$(PROJECT)Int.decls
!endif

#---------------------------------------------------------------------
# Special case object file targets
#---------------------------------------------------------------------

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

$(TMP_DIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
	$(cc32) -DSTATIC_BUILD $(ITCL_EXE_CFLAGS) -Zl -Fo$@@ $?

#---------------------------------------------------------------------
# Inference rules.  Use batch-mode when supported.
#---------------------------------------------------------------------

{$(WINDIR)}.c{$(TMP_DIR)}.obj ::
	$(cc32) $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(GENERICDIR)}.c{$(TMP_DIR)}.obj ::
	$(cc32) $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(RCDIR)}.rc{$(TMP_DIR)}.res :
	$(rc32) -fo $@@ -d DEBUG=$(DEBUG) -d UNCHECKED=$(UNCHECKED) \
		$(ITCL_INCLUDES) $(TCL_INCLUDES) $(ITCL_DEFINES) $<

#---------------------------------------------------------------------
# Generate the windows help files.
#---------------------------------------------------------------------

HLPBASE		= $(PROJECT)$(ITCL_VERSION)
HELPFILE	= $(OUT_DIR)\$(HLPBASE).hlp
HELPCNT		= $(OUT_DIR)\$(HLPBASE).cnt
DOCTMP_DIR	= $(OUT_DIR)\$(PROJECT)_docs
HELPRTF		= $(DOCTMP_DIR)\$(PROJECT).rtf
MAN2HELP	= $(DOCTMP_DIR)\man2help.tcl
MAN2HELP2	= $(DOCTMP_DIR)\man2help2.tcl
INDEX		= $(DOCTMP_DIR)\index.tcl
BMP		= $(DOCTMP_DIR)\toaster.bmp
BMP_NOPATH	= toaster.bmp
MAN2TCL		= $(DOCTMP_DIR)\man2tcl.exe

winhelp: docsetup $(HELPFILE)

docsetup:
	@@if not exist $(DOCTMP_DIR)\nul mkdir $(DOCTMP_DIR)

$(MAN2HELP) $(MAN2HELP2) $(INDEX): $(TCLTOOLSDIR)\$$(@@F)
	copy $(TCLTOOLSDIR)\$(@@F) $(@@D)

$(BMP):
	copy $(WINDIR)\$(@@F) $(@@D)

$(HELPFILE): $(HELPRTF) $(BMP)
	cd $(DOCTMP_DIR)
	start /wait hcrtf.exe -x <<$(PROJECT).hpj
[OPTIONS]
COMPRESS=12 Hall Zeck
LCID=0x409 0x0 0x0 ; English (United States)
TITLE=[Incr Tcl] Reference Manual
BMROOT=.
CNT=$(@@B).cnt
HLP=$(@@B).hlp

[FILES]
$(PROJECT).rtf

[WINDOWS]
main="[Incr Tcl] Reference Manual",,27648,(r15263976),(r65280)

[CONFIG]
BrowseButtons()
CreateButton(1, "Web", ExecFile("http://www.tcl.tk"))
CreateButton(2, "SF", ExecFile("http://sf.net/projects/incrtcl"))
CreateButton(3, "Wiki", ExecFile("http://wiki.tcl.tk"))
CreateButton(4, "FAQ", ExecFile("http://www.purl.org/NET/Tcl-FAQ/"))
<<
	cd $(MAKEDIR)
	copy "$(DOCTMP_DIR)\$(@@B).hlp" "$(OUT_DIR)"
	copy "$(DOCTMP_DIR)\$(@@B).cnt" "$(OUT_DIR)"

$(MAN2TCL): $(TCLTOOLSDIR)\$$(@@B).c
	$(cc32) -nologo -G4 -ML -O2 -Fo$(@@D)\ $(TCLTOOLSDIR)\$(@@B).c -link -out:$@@

$(HELPRTF): $(MAN2TCL) $(MAN2HELP) $(MAN2HELP2) $(INDEX)
	$(TCLSH) $(MAN2HELP) -bitmap $(BMP_NOPATH) $(PROJECT) $(ITCL_VERSION) $(DOCDIR:\=/)

install-docs:
!if exist($(HELPFILE))
	@@xcopy /i /y "$(HELPFILE)" "$(DOC_INSTALL_DIR)\"
	@@xcopy /i /y "$(HELPCNT)" "$(DOC_INSTALL_DIR)\"
	$(TCLSH) <<
puts "Installing $(PROJECT)'s helpfile contents into Tcl's ..."
set f [open {$(DOC_INSTALL_DIR:\=/)/tcl$(TCL_VERSION).cnt} r]
while {![eof $$f]} {
    if {[regexp {:Include $(PROJECT)([0-9]{2}).cnt} [gets $$f] dummy ver]} {
	if {$$ver == $(ITCL_VERSION)} {
	    puts "Already installed."
	    exit
	} else {
	    # do something here logical to remove (or replace) it.
	    puts "$$ver != $(ITCL_VERSION), unfinished code path, die, die!"
	    exit 1
	}
    }
}
close $$f
set f [open {$(DOC_INSTALL_DIR:\=/)/tcl$(TCL_VERSION).cnt} a]
puts $$f {:Include $(HLPBASE).cnt}
close $$f
<<
	start /wait winhlp32 -g $(DOC_INSTALL_DIR)\tcl$(TCL_VERSION).hlp
!endif


#---------------------------------------------------------------------
# Clean up
#---------------------------------------------------------------------

tidy :
	-del $(TMP_DIR)\*.pch
	-del $(TMP_DIR)\*.obj
	-del $(TMP_DIR)\*.res

clean : tidy
	-del $(OUT_DIR)\*.exp
	-del $(OUT_DIR)\*.lib
	-del $(OUT_DIR)\*.dll

hose : clean
	-rmdir $(OUT_DIR)
	-rmdir $(TMP_DIR)
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d1 419
a419 297
######################################################################
# Visual C++ 5.0+ makefile for [Incr Tcl]
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.13 2001/05/23 00:37:47 davygrvy Exp $
######################################################################
# All needed information is derived from running vcvars32.bat
#
# NOTE: Be sure to modify the "config.vc" file in the toplevel directory
#   before running this makefile.
######################################################################
#  Do not modify this file!  modify config.vc to effect the build.
######################################################################

!include "..\..\rules.vc"
!include "..\..\config.vc"
!include "..\..\pkg.vc"

BINROOT		= .
ROOT		= ..
NAMEPREFIX	= itcl
STUBPREFIX	= $(NAMEPREFIX)stub

!if $(DEBUG)
TMPNAME		= Debug
DBGX		= d
!else
TMPNAME		= Release
DBGX		=
!endif

TMP_DIR		= $(BINROOT)\$(TMPNAME)

!ifndef OUT_DIR
OUT_DIR		= $(TMP_DIR)
!endif

PKGINDEX	= "$(TMP_DIR)\pkgIndex.tcl"

!if $(STATIC_BUILD)
ITCLOUTNAME	= $(NAMEPREFIX)$(ITCL_VERSION)s$(DBGX)
ITCLTARGET	= "$(OUT_DIR)\$(ITCLOUTNAME).lib"
!else
ITCLOUTNAME	= $(NAMEPREFIX)$(ITCL_VERSION)$(DBGX)
ITCLIMPLIB	= "$(OUT_DIR)\$(ITCLOUTNAME).lib"
ITCLTARGET	= "$(OUT_DIR)\$(ITCLOUTNAME).dll"
!endif

!if $(ISTCLINSTALL)
TCLSTUBLIB	= "$(TCLROOT)\lib\tclstub$(TCL_VERSION).lib"
TCLIMPLIB	= "$(TCLROOT)\lib\tcl$(TCL_VERSION)$(DBGX).lib"
TCLSH		= "$(TCLROOT)\bin\tclsh$(TCL_VERSION)$(DBGX).exe"
!else
TCLSTUBLIB	= "$(TCLROOT)\win\Release\tclstub$(TCL_VERSION).lib"
TCLIMPLIB	= "$(TCLROOT)\win\$(OUT_DIR)\tcl$(TCL_VERSION)$(DBGX).lib"
TCLSH		= "$(TCLROOT)\win\$(OUT_DIR)\tclsh$(TCL_VERSION)$(DBGX).exe"
!endif

ITCLSTUBLIBNAME	= $(STUBPREFIX)$(ITCL_VERSION)$(DBGX).lib
ITCLSTUBLIB	= "$(OUT_DIR)\$(ITCLSTUBLIBNAME)"

LIB_INSTALL_DIR		= $(INSTALLDIR)\lib
BIN_INSTALL_DIR		= $(INSTALLDIR)\bin
SCRIPT_INSTALL_DIR	= $(INSTALLDIR)\lib\itcl$(ITCL_DOTVERSION)
INCLUDE_INSTALL_DIR	= $(INSTALLDIR)\include

ITCLSHOBJS = \
	$(TMP_DIR)\tclAppInit.obj

ITCLOBJS = \
	$(TMP_DIR)\itcl_bicmds.obj \
	$(TMP_DIR)\itcl_class.obj \
	$(TMP_DIR)\itcl_cmds.obj \
	$(TMP_DIR)\itcl_ensemble.obj \
	$(TMP_DIR)\itcl_linkage.obj \
	$(TMP_DIR)\itcl_migrate.obj \
	$(TMP_DIR)\itcl_methods.obj \
	$(TMP_DIR)\itcl_objects.obj \
	$(TMP_DIR)\itcl_obsolete.obj \
	$(TMP_DIR)\itcl_parse.obj \
	$(TMP_DIR)\itcl_util.obj \
!if $(STATIC_BUILD) == 0
	$(TMP_DIR)\dllEntryPoint.obj \
	$(TMP_DIR)\dllResource.obj \
!endif
	$(TMP_DIR)\itclStubInit.obj

ITCLSTUBOBJS = \
	$(TMP_DIR)\itclStubLib.obj

WINDIR		= $(ROOT)\win
GENERICDIR	= $(ROOT)\generic
RCDIR		= $(ROOT)\win\rc

######################################################################
# Link flags
######################################################################

!if $(DEBUG)
ldebug = -debug:full -debugtype:cv -pdb:none
!else
ldebug = -release -opt:ref
!endif

# declarations common to all linker options
lcommon = -nologo -link50compat -machine:$(MACHINE)

ITCL_LFLAGS = $(lcommon) -subsystem:windows -dll

!if $(USE_TCL_STUBS) == 0
ITCL_LLIBS	= $(TCLIMPLIB)
!else
ITCL_LLIBS	= $(TCLSTUBLIB)
!endif

######################################################################
# Compile flags
######################################################################

!IF $(DEBUG) == 0
!IF "$(MACHINE)" == "ALPHA"
# MSVC on Alpha doesn't understand -Ot
cdebug = -O2i
!ELSE
cdebug = -Ox
!ENDIF
!ELSE
!if $(MSDEV_VER) < 6
cdebug = -Zi -Od -WX
!else
cdebug = -ZI -Od -WX
!endif
!ENDIF

!if $(STATIC_BUILD)
cdll	=
!else
cdll	= -GD
!endif

# declarations common to all compiler options
ccommon = -nologo -c -W3 -YX -Fp$(TMP_DIR)\ 

!if $(STATIC_BUILD) && $(NOMSVCRT)
crt	= -MT$(DBGX)
!else
crt	= -MD$(DBGX)
!endif

!if $(ISTCLINSTALL)
TCL_INCLUDES	= -I"$(TCLROOT)\include"
!else
TCL_INCLUDES	= -I"$(TCLROOT)\generic"
!endif

ITCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR)
ITCL_DEFINES	= -DBUILD_itcl -DTCL_THREADS=1
ITCL_EXE_CFLAGS	= $(ccommon) $(cdebug) $(crt) $(cdll) $(ITCL_INCLUDES) \
		$(ITCL_DEFINES) $(TCL_INCLUDES)

!if $(USE_TCL_STUBS)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS
!else
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS)
!endif

######################################################################
# Project specific targets
######################################################################

all :     setup $(ITCLTARGET) $(ITCLSTUBLIB)
release : setup $(ITCLTARGET) $(ITCLSTUBLIB)

!if $(STATIC_BUILD)
test :
	@@echo test target not supported for a static library.
!else
#test :    setup $(ITCLTARGET) $(ITCLSTUBLIB) $(PKGINDEX)
#	-@@copy $(TCLDLL) $(TMP_DIR)
#	$(TCLSH) <<
#cd ../tests
#lappend auto_path ../win/$(TMP_DIR)
#set env(ITCL_LIBRARY) ../library
#source all
#<<
!endif

$(PKGINDEX) :
	-@@copy pkgIndex.tcl $@@

setup :
	@@$(vcvars) > nul
	@@if not exist $(TMP_DIR)\nul mkdir $(TMP_DIR) &\
		echo Created directory '$(TMP_DIR)'
	@@if not exist $(OUT_DIR)\nul mkdir $(OUT_DIR) &\
		echo Created directory '$(OUT_DIR)'

$(ITCLTARGET): $(ITCLOBJS)
!if $(STATIC_BUILD)
	$(lib32) -nologo -machine:$(MACHINE) -out:$@@ @@<<
!else
	$(link32) $(ITCL_LFLAGS) -out:$@@ $(ITCL_LLIBS) @@<<
!endif
		$(ITCLOBJS)
<<

!if $(DEBUG) == 0
$(ITCLSTUBLIB) : $(ITCLSTUBOBJS)
	$(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)
!else
$(ITCLSTUBLIB) :
!endif

install : all
	if not exist "$(INSTALLDIR)" mkdir "$(INSTALLDIR)"
	if not exist "$(BIN_INSTALL_DIR)" mkdir "$(BIN_INSTALL_DIR)"
	if not exist "$(LIB_INSTALL_DIR)" mkdir "$(LIB_INSTALL_DIR)"
	if not exist "$(SCRIPT_INSTALL_DIR)" mkdir "$(SCRIPT_INSTALL_DIR)"
	if not exist "$(INCLUDE_INSTALL_DIR)" mkdir "$(INCLUDE_INSTALL_DIR)"
	copy $(ITCLTARGET) "$(SCRIPT_INSTALL_DIR)"
	-copy $(ITCLSTUBLIB) "$(LIB_INSTALL_DIR)"
	copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\generic\itclDecls.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
	echo package ifneeded Itcl $(ITCL_DOTVERSION) [list load [file join $$dir $(ITCLOUTNAME).dll] Itcl] > \
		"$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"

######################################################################
# Regenerate the stubs files.
######################################################################

!if $(ISTCLINSTALL) == 0
# Only from the sources of Tcl does genStubs.tcl exist.
genstubs:
	$(TCLSH) $(TCLROOT)\tools\genStubs.tcl $(GENERICDIR) \
        	$(GENERICDIR)\itcl.decls $(GENERICDIR)\itclInt.decls
!endif

######################################################################
# Special case object file targets
######################################################################

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

$(TMP_DIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
	$(cc32) -DSTATIC_BUILD $(ITCL_EXE_CFLAGS) -Zl -Fo$@@ $?

$(TMP_DIR)\dllResource.obj : $(TMP_DIR)\itcl.res
	$(cvtres32) -nologo -machine:$(MACHINE) -out:$@@ $?

######################################################################
# Inference rules.  Use batch-mode when supported.
######################################################################

!if $(_NMAKE_VER) < 162
{$(WINDIR)}.c{$(TMP_DIR)}.obj :
!else
{$(WINDIR)}.c{$(TMP_DIR)}.obj ::
!endif
	$(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

!if $(_NMAKE_VER) < 162
{$(GENERICDIR)}.c{$(TMP_DIR)}.obj :
!else
{$(GENERICDIR)}.c{$(TMP_DIR)}.obj ::
!endif
	$(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(RCDIR)}.rc{$(TMP_DIR)}.res :
	$(rc32) -fo $@@ -DDEBUG=$(DEBUG) $(ITCL_INCLUDES) $(TCL_INCLUDES) $(ITCL_DEFINES) $<

######################################################################
# Clean up
######################################################################

tidy :
	-del $(TMP_DIR)\*.pch
	-del $(TMP_DIR)\*.obj
	-del $(TMP_DIR)\*.res

clean : tidy
	-del $(OUT_DIR)\*.exp
	-del $(OUT_DIR)\*.lib
	-del $(OUT_DIR)\*.dll

hose : clean
	-rmdir $(OUT_DIR)
	-rmdir $(TMP_DIR)

@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d1 297
a297 301
# Visual C++ 2.x and 4.0 makefile
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $

# Does not depend on the presence of any environment variables in
# order to compile itcl; all needed information is derived from 
# location of the compiler directories.
#
# NOTE: Be sure to modify the "makefile.vc" file in the toplevel directory
#   for the itcl distribution.  Include the location of your VC++ development
#   tools and the installation directory.

!include "..\..\makefile.vc"


# ROOT    = top of source tree
# TMPDIR  = location where .obj files should be stored during build

ROOT        = ..

######################################################################
# Do not modify below this line
######################################################################

NAMEPREFIX = itcl
DOTVERSION = 3.1
VERSION = 31
STUBPREFIX = $(NAMEPREFIX)stub

BINROOT        = .
!IF "$(NODEBUG)" == "1"
TMPNAME       = Release
DBGX        =
!ELSE
TMPNAME       = Debug
DBGX        = d
!ENDIF
TMPDIR        = $(BINROOT)\$(TMPNAME)
OUTDIR        = $(TMPDIR)

PKGINDEX       = $(TMPDIR)\pkgIndex.tcl

ITCLLIB        = $(OUTDIR)\$(NAMEPREFIX)$(VERSION)$(DBGX).lib
ITCLDLLNAME    = $(NAMEPREFIX)$(VERSION)$(DBGX).dll
ITCLDLL        = $(OUTDIR)\$(ITCLDLLNAME)
ITCLSH        = $(OUTDIR)\$(NAMEPREFIX)sh$(VERSION)$(DBGX).exe
DUMPEXTS     = $(TMPDIR)\dumpexts.exe

TCLLIB        = $(TCLDIR)\win\$(OUTDIR)\tcl81$(DBGX).lib
TCLSTUBLIB    = $(TCLDIR)\win\$(OUTDIR)\tclstub81$(DBGX).lib
TCLDLL        = $(TCLDIR)\win\$(OUTDIR)\tcl81$(DBGX).dll

ITCLSTUBLIBNAME = $(STUBPREFIX)$(VERSION)$(DBGX).lib
ITCLSTUBLIB     = $(OUTDIR)\$(ITCLSTUBLIBNAME)

LIB_INSTALL_DIR    = $(INSTALLDIR)\lib
BIN_INSTALL_DIR    = $(INSTALLDIR)\bin
SCRIPT_INSTALL_DIR    = $(INSTALLDIR)\lib\itcl$(DOTVERSION)
INCLUDE_INSTALL_DIR    = $(INSTALLDIR)\include

ITCLSHOBJS = \
    $(TMPDIR)\tclAppInit.obj

ITCLOBJS = \
    $(TMPDIR)\itclStubInit.obj \
    $(TMPDIR)\itcl_bicmds.obj \
    $(TMPDIR)\itcl_class.obj \
    $(TMPDIR)\itcl_cmds.obj \
    $(TMPDIR)\itcl_ensemble.obj \
    $(TMPDIR)\itcl_linkage.obj \
    $(TMPDIR)\itcl_migrate.obj \
    $(TMPDIR)\itcl_methods.obj \
    $(TMPDIR)\itcl_objects.obj \
    $(TMPDIR)\itcl_obsolete.obj \
    $(TMPDIR)\itcl_parse.obj \
    $(TMPDIR)\itcl_util.obj \
    $(TMPDIR)\dllEntryPoint.obj

ITCLSTUBOBJS = \
    $(TMPDIR)\itclStubLib.obj

cc32        = $(TOOLS32)\bin\cl.exe
link32      = $(TOOLS32)\bin\link.exe
rc32        = $(TOOLS32_rc)\bin\rc.exe
include32   = -I$(TOOLS32)\include
lib32       = "$(TOOLS32)\bin\lib.exe"

WINDIR          = $(ROOT)\win
GENERICDIR    = $(ROOT)\generic

ITCL_INCLUDES    = -I$(WINDIR) -I$(GENERICDIR) -I$(TCLDIR)\generic
ITCL_DEFINES    = -D__WIN32__ -DBUILD_itcl $(DEBUGDEFINES)

ITCL_EXE_CFLAGS    = $(cdebug) $(cflags) $(cvarsdll) $(include32) \
            $(ITCL_INCLUDES) $(ITCL_DEFINES)

ITCL_CFLAGS    = $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS

######################################################################
# Link flags
######################################################################

!IF "$(NODEBUG)" == "1"
ldebug = /RELEASE
!ELSE
ldebug = -debug:full -debugtype:cv
!ENDIF

# declarations common to all linker options
lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
DLLENTRY = @@12
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ELSE
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ENDIF

conlflags = $(lflags) -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll

!IF "$(MACHINE)" == "PPC"
libc = libc.lib
libcdll = crtdll.lib
!ELSE
libc = libc.lib oldnames.lib
libcdll = msvcrt.lib oldnames.lib
!ENDIF

baselibs   = kernel32.lib $(optlibs) advapi32.lib user32.lib
winlibs    = $(baselibs) gdi32.lib comdlg32.lib winspool.lib

guilibs       = $(libc) $(winlibs)
conlibs       = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

######################################################################
# Compile flags
######################################################################

!IF "$(NODEBUG)" == "1"
!IF "$(MACHINE)" == "ALPHA"
# MSVC on Alpha doesn't understand -Ot
cdebug = -O2i -Gs -GD
!ELSE
cdebug = -Oti -Gs -GD
!ENDIF
!ELSE
cdebug = -Z7 -Od -WX
!ENDIF

# declarations common to all compiler options
ccommon = -c -W3 -nologo -YX -Fp$(TMPDIR)\ -Dtry=__try -Dexcept=__except

!IF "$(MACHINE)" == "IX86"
cflags = $(ccommon) -D_X86_=1
!ELSE
!IF "$(MACHINE)" == "MIPS"
cflags = $(ccommon) -D_MIPS_=1
!ELSE
!IF "$(MACHINE)" == "PPC"
cflags = $(ccommon) -D_PPC_=1
!ELSE
!IF "$(MACHINE)" == "ALPHA"
cflags = $(ccommon) -D_ALPHA_=1
!ENDIF
!ENDIF
!ENDIF
!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL

!IF "$(NODEBUG)" == "1"
cvarsdll   = $(cvars) -MD
!ELSE
cvarsdll   = $(cvars) -MDd
!ENDIF

CON_CFLAGS    = $(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE

######################################################################
# Project specific targets
######################################################################

release:    setup $(ITCLDLL) $(ITCLSTUBLIB) $(ITCLSH)
all:        setup $(ITCLDLL) $(ITCLSTUBLIB) $(ITCLSH)
test:        setup $(ITCLDLL) $(ITCLSTUBLIB) $(PKGINDEX)
    -@@copy $(TCLDLL) $(TMPDIR)
    $(TCLSH) <<
        cd ../tests
	lappend auto_path ../win/$(TMPNAME)
	set env(ITCL_LIBRARY) ../library
        source all
<<

$(PKGINDEX):
    -@@copy pkgIndex.tcl $@@

setup:
    if not exist $(TMPDIR) mkdir $(TMPDIR)
    if not exist $(OUTDIR) mkdir $(OUTDIR)

$(ITCLLIB): $(ITCLDLL)

$(ITCLDLL): $(ITCLOBJS) $(TMPDIR)\itclvc.def $(TMPDIR)\itcl.res
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(dlllflags) -def:$(TMPDIR)\itclvc.def \
        -out:$@@ $(TMPDIR)\itcl.res $(guilibsdll) $(TCLSTUBLIB) @@<<
		$(ITCLOBJS)
<<

$(ITCLSTUBLIB): $(ITCLSTUBOBJS)
    $(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)

$(ITCLSH): $(ITCLSHOBJS) $(ITCLSTUBLIB) $(TCLSTUBLIB) $(TMPDIR)\itclsh.res
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(conlflags) $(TMPDIR)\itclsh.res -stack:2300000 \
        -out:$@@ $(conlibsdll) $(ITCLLIB) $(TCLLIB) $(ITCLSHOBJS)

$(TMPDIR)\itclvc.def: $(DUMPEXTS) $(ITCLOBJS)
    $(DUMPEXTS) -o $@@ $(ITCLDLLNAME) @@<<
$(ITCLOBJS)
<<

$(DUMPEXTS): $(TCLDIR)\win\winDumpExts.c
    $(cc32) $(CON_CFLAGS) -Fo$(TMPDIR)\ $?
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(conlflags) $(guilibs) -out:$@@ \
        $(TMPDIR)\winDumpExts.obj 

install: all
    if not exist $(INSTALLDIR) mkdir $(INSTALLDIR)
    if not exist $(BIN_INSTALL_DIR) mkdir $(BIN_INSTALL_DIR)
    if not exist $(LIB_INSTALL_DIR) mkdir $(LIB_INSTALL_DIR)
    if not exist $(SCRIPT_INSTALL_DIR) mkdir $(SCRIPT_INSTALL_DIR)
    if not exist $(INCLUDE_INSTALL_DIR) mkdir $(INCLUDE_INSTALL_DIR)
    copy $(ITCLSH) "$(BIN_INSTALL_DIR)"
    copy $(ITCLDLL) "$(BIN_INSTALL_DIR)"
    copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
    copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
    copy $(ROOT)\win\*.tcl "$(SCRIPT_INSTALL_DIR)"

#
# Regenerate the stubs files.
#
genstubs:
    $(TCLSH) $(TCLDIR)\tools\genStubs.tcl $(GENERICDIR) \
        $(GENERICDIR)\itcl.decls $(GENERICDIR)\itclInt.decls

#
# Special case object file targets
#

$(TMPDIR)\tclAppInit.obj : $(WINDIR)\tclAppInit.c
    $(cc32) $(ITCL_EXE_CFLAGS) -Fo$@@ $?

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

$(TMPDIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
    $(cc32) -DSTATIC_BUILD $(ITCL_CFLAGS) -Fo$@@ $?

#
# Implicit rules
#

{$(WINDIR)}.c{$(TMPDIR)}.obj:
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<

{$(GENERICDIR)}.c{$(TMPDIR)}.obj:
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<

{$(ROOT)\compat}.c{$(TMPDIR)}.obj:
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<

{$(WINDIR)}.rc{$(TMPDIR)}.res:
    $(rc32) -fo $@@ -r -i $(GENERICDIR) -i $(WINDIR) -i $(TCLDIR)\generic -D__WIN32__ \
        $(ITCL_DEFINES) $<

clean:
    -@@del $(OUTDIR)\*.exp
    -@@del $(OUTDIR)\*.lib
    -@@del $(OUTDIR)\*.dll
    -@@del $(OUTDIR)\*.exe
    -@@del $(OUTDIR)\*.pdb
    -@@del $(TMPDIR)\*.pch
    -@@del $(TMPDIR)\*.obj
    -@@del $(TMPDIR)\*.res
    -@@del $(TMPDIR)\*.def
    -@@del $(TMPDIR)\*.exe
    -@@rmdir $(OUTDIR)
    -@@rmdir $(TMPDIR)
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
# Visual C++ 4.0 makefile
#
# Copyright (c) 1993-1996 Lucent Technologies
d5 14
a19 3
#
# Project directories
#
a20 1
#
a21 1
#
d23 1
a23 1
!include "..\..\Makefile.vc"
d25 39
a63 4
ROOT		= ..
TMPDIR		= .
TARGET_LIB_ITCL = $(TARGET_LIB)\Itcl2.2
TARGET_DOC_ITCL	= $(TARGET_DOC)\Itcl
d65 2
a66 2
# Comment the following line to compile with symbols
NODEBUG=1
d68 136
a203 2
# uncomment the following two lines to compile with TCL_MEM_DEBUG
#DEBUGDEFINES	= -DTCL_MEM_DEBUG
d205 2
a206 2
WINDIR         	= $(ROOT)\win
GENERICDIR	= $(ROOT)\generic
d208 12
a219 1
TCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR) -I$(TCLDIR)\generic
d221 2
a222 2
TCL_DEFINES	= -D__WIN32__ -DUSE_TCLALLOC=0 $(DEBUGDEFINES) -Dtry=__try \
	-Dexcept=__except
d224 4
a227 2
ITCLSHOBJS = \
	$(TMPDIR)\tclAppInit.obj
d229 3
a231 36
ITCLOBJS = \
	$(TMPDIR)\itcl_bicmds.obj \
	$(TMPDIR)\itcl_class.obj \
	$(TMPDIR)\itcl_cmds.obj \
	$(TMPDIR)\itcl_linkage.obj \
	$(TMPDIR)\itcl_methods.obj \
	$(TMPDIR)\itcl_objects.obj \
	$(TMPDIR)\itcl_obsolete.obj \
	$(TMPDIR)\itcl_parse.obj \
	$(TMPDIR)\itcl_util.obj \
	$(TMPDIR)\dllEntryPoint.obj

DUMPEXTS = $(TCLLIBDIR)\dumpexts.exe
ITCLSH = itclsh.exe
ITCLTEST = itcltest.exe

CPU		   = i386
INCLUDE		= $(TOOLS32)\include
!include <ntwin32.mak>

TCL_CFLAGS		= $(cdebug) $(cflags) $(cvarsdll) $(include32) $(TCL_INCLUDES) $(TCL_DEFINES)
CON_CFLAGS		= $(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE
DOS_CFLAGS		= $(cdebug) $(cflags) $(include16) -AL
DLL16_CFLAGS	= $(cdebug) $(cflags) $(include16) -ALw

#
# Targets
#

release:  $(ITCLDLL) $(ITCLSH)
all:	    $(ITCLDLL) $(ITCLSH)
test:	    $(ITCLSH)
	$(CP) $(TCLLIBDIR)\*.dll
	$(ITCLSH) <<
		cd ../tests
		source all
d234 6
d241 17
a257 32
	$(MKDIR) "$(TARGET_ROOT)"
	$(MKDIR) "$(TARGET_BIN)"
	$(MKDIR) "$(TARGET_LIB_ROOT)"
	$(MKDIR) "$(TARGET_LIB)"
	$(MKDIR) "$(TARGET_LIB_ITCL)"
	$(MKDIR) "$(TARGET_INCLUDE_ROOT)"
	$(MKDIR) "$(TARGET_INCLUDE)"
	$(MKDIR) "$(TARGET_DOC)"
	$(MKDIR) "$(TARGET_DOC_ITCL)"
	$(CP) $(TMPDIR)\$(ITCLSH) "$(TARGET_BIN)"
	$(CP) $(TMPDIR)\$(ITCLDLL) "$(TARGET_BIN)"
	$(CP) $(ROOT)\generic\itcl.h "$(TARGET_INCLUDE)"
	$(CP) $(ROOT)\library\*.* "$(TARGET_LIB_ITCL)"
	$(CP) $(ROOT)\win\*.tcl "$(TARGET_LIB_ITCL)"
	$(CP) $(ROOT)\..\html\Itcl\*.* "$(TARGET_DOC_ITCL)"

$(ITCLDLL): $(ITCLOBJS) $(TCLLIBDIR)\$(TCLLIB) $(TMPDIR)\itclvc.def $(TMPDIR)\itcl.res
	set LIB=$(TOOLS32)\lib
	$(link32) $(linkdebug) $(dlllflags) -def:$(TMPDIR)\itclvc.def \
		-out:$@@ $(TMPDIR)\itcl.res $(guilibsdll) @@<<
$(ITCLOBJS) $(TCLLIBDIR)\$(TCLLIB)
<<

$(ITCLSH): $(ITCLSHOBJS) $(ITCLLIB) $(TCLLIBDIR)\$(TCLLIB) $(TMPDIR)\itclsh.res
	set LIB=$(TOOLS32)\lib
	$(link32) $(linkdebug) $(conlflags) $(TMPDIR)\itclsh.res \
		-out:$@@ $(conlibsdll) $(ITCLLIB) $(TCLLIBDIR)\$(TCLLIB) $(ITCLSHOBJS)

$(ITCLTEST): $(ITCLTESTOBJS) $(ITCLLIB) $(TCLLIBDIR)\$(TCLLIB) $(TMPDIR)\itclsh.res
	set LIB=$(TOOLS32)\lib
	$(link32) $(linkdebug) $(conlflags) $(TMPDIR)\itclsh.res \
		 -out:$@@ $(conlibsdll) $(ITCLLIB) $(TCLLIBDIR)\$(TCLLIB) $(ITCLTESTOBJS)
d263 5
a267 4
$(TMPDIR)\itclvc.def: $(DUMPEXTS) $(ITCLOBJS)
	$(DUMPEXTS) -o $@@ $(ITCLDLL) @@<<
$(ITCLOBJS)
<<
d269 2
a270 2
$(TMPDIR)\testMain.obj: $(WINDIR)\tclAppInit.c
	$(cc32) $(TCL_CFLAGS) -DTCL_TEST -Fo$(TMPDIR)\testMain.obj $?
d277 1
a277 1
    $(cc32) $(TCL_CFLAGS) -Fo$(TMPDIR)\ $<
d280 1
a280 1
    $(cc32) $(TCL_CFLAGS) -Fo$(TMPDIR)\ $<
d283 1
a283 1
    $(cc32) $(TCL_CFLAGS) -Fo$(TMPDIR)\ $<
d286 2
a287 1
	$(rc32) -fo $@@ -r -i $(GENERICDIR) -i $(WINDIR) -i $(TCLDIR)\generic $(TCL_DEFINES) $<
d290 12
a301 7
	-@@$(RM) *.exe
	-@@$(RM) *.lib
	-@@$(RM) *.dll
	-@@$(RM) *.res
	-@@$(RM) itclvc.def
	-@@$(RM) $(TMPDIR)\*.obj
	-@@$(RM) *.exp
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d1 3
a3 1
# Visual C++ 2.x and 4.0 makefile
a6 14
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $

# Does not depend on the presence of any environment variables in
# order to compile itcl; all needed information is derived from 
# location of the compiler directories.
#
# NOTE: Be sure to modify the "makefile.vc" file in the toplevel directory
#   for the itcl distribution.  Include the location of your VC++ development
#   tools and the installation directory.

!include "..\..\makefile.vc"

d8 3
d12 1
d14 1
d16 1
a16 1
ROOT        = ..
d18 4
a21 39
######################################################################
# Do not modify below this line
######################################################################

NAMEPREFIX = itcl
DOTVERSION = 3.1
VERSION = 31
STUBPREFIX = $(NAMEPREFIX)stub

BINROOT        = .
!IF "$(NODEBUG)" == "1"
TMPNAME       = Release
DBGX        =
!ELSE
TMPNAME       = Debug
DBGX        = d
!ENDIF
TMPDIR        = $(BINROOT)\$(TMPNAME)
OUTDIR        = $(TMPDIR)

PKGINDEX       = $(TMPDIR)\pkgIndex.tcl

ITCLLIB        = $(OUTDIR)\$(NAMEPREFIX)$(VERSION)$(DBGX).lib
ITCLDLLNAME    = $(NAMEPREFIX)$(VERSION)$(DBGX).dll
ITCLDLL        = $(OUTDIR)\$(ITCLDLLNAME)
ITCLSH        = $(OUTDIR)\$(NAMEPREFIX)sh$(VERSION)$(DBGX).exe
DUMPEXTS     = $(TMPDIR)\dumpexts.exe

TCLLIB        = $(TCLDIR)\win\$(OUTDIR)\tcl81$(DBGX).lib
TCLSTUBLIB    = $(TCLDIR)\win\$(OUTDIR)\tclstub81$(DBGX).lib
TCLDLL        = $(TCLDIR)\win\$(OUTDIR)\tcl81$(DBGX).dll

ITCLSTUBLIBNAME = $(STUBPREFIX)$(VERSION)$(DBGX).lib
ITCLSTUBLIB     = $(OUTDIR)\$(ITCLSTUBLIBNAME)

LIB_INSTALL_DIR    = $(INSTALLDIR)\lib
BIN_INSTALL_DIR    = $(INSTALLDIR)\bin
SCRIPT_INSTALL_DIR    = $(INSTALLDIR)\lib\itcl$(DOTVERSION)
INCLUDE_INSTALL_DIR    = $(INSTALLDIR)\include
d23 2
a24 2
ITCLSHOBJS = \
    $(TMPDIR)\tclAppInit.obj
d26 2
a27 136
ITCLOBJS = \
    $(TMPDIR)\itclStubInit.obj \
    $(TMPDIR)\itcl_bicmds.obj \
    $(TMPDIR)\itcl_class.obj \
    $(TMPDIR)\itcl_cmds.obj \
    $(TMPDIR)\itcl_ensemble.obj \
    $(TMPDIR)\itcl_linkage.obj \
    $(TMPDIR)\itcl_migrate.obj \
    $(TMPDIR)\itcl_methods.obj \
    $(TMPDIR)\itcl_objects.obj \
    $(TMPDIR)\itcl_obsolete.obj \
    $(TMPDIR)\itcl_parse.obj \
    $(TMPDIR)\itcl_util.obj \
    $(TMPDIR)\dllEntryPoint.obj

ITCLSTUBOBJS = \
    $(TMPDIR)\itclStubLib.obj

cc32        = $(TOOLS32)\bin\cl.exe
link32      = $(TOOLS32)\bin\link.exe
rc32        = $(TOOLS32_rc)\bin\rc.exe
include32   = -I$(TOOLS32)\include
lib32       = "$(TOOLS32)\bin\lib.exe"

WINDIR          = $(ROOT)\win
GENERICDIR    = $(ROOT)\generic

ITCL_INCLUDES    = -I$(WINDIR) -I$(GENERICDIR) -I$(TCLDIR)\generic
ITCL_DEFINES    = -D__WIN32__ -DBUILD_itcl $(DEBUGDEFINES)

ITCL_EXE_CFLAGS    = $(cdebug) $(cflags) $(cvarsdll) $(include32) \
            $(ITCL_INCLUDES) $(ITCL_DEFINES)

ITCL_CFLAGS    = $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS

######################################################################
# Link flags
######################################################################

!IF "$(NODEBUG)" == "1"
ldebug = /RELEASE
!ELSE
ldebug = -debug:full -debugtype:cv
!ENDIF

# declarations common to all linker options
lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
DLLENTRY = @@12
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ELSE
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ENDIF

conlflags = $(lflags) -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll

!IF "$(MACHINE)" == "PPC"
libc = libc.lib
libcdll = crtdll.lib
!ELSE
libc = libc.lib oldnames.lib
libcdll = msvcrt.lib oldnames.lib
!ENDIF

baselibs   = kernel32.lib $(optlibs) advapi32.lib user32.lib
winlibs    = $(baselibs) gdi32.lib comdlg32.lib winspool.lib

guilibs       = $(libc) $(winlibs)
conlibs       = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

######################################################################
# Compile flags
######################################################################

!IF "$(NODEBUG)" == "1"
!IF "$(MACHINE)" == "ALPHA"
# MSVC on Alpha doesn't understand -Ot
cdebug = -O2i -Gs -GD
!ELSE
cdebug = -Oti -Gs -GD
!ENDIF
!ELSE
cdebug = -Z7 -Od -WX
!ENDIF

# declarations common to all compiler options
ccommon = -c -W3 -nologo -YX -Fp$(TMPDIR)\ -Dtry=__try -Dexcept=__except

!IF "$(MACHINE)" == "IX86"
cflags = $(ccommon) -D_X86_=1
!ELSE
!IF "$(MACHINE)" == "MIPS"
cflags = $(ccommon) -D_MIPS_=1
!ELSE
!IF "$(MACHINE)" == "PPC"
cflags = $(ccommon) -D_PPC_=1
!ELSE
!IF "$(MACHINE)" == "ALPHA"
cflags = $(ccommon) -D_ALPHA_=1
!ENDIF
!ENDIF
!ENDIF
!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL

!IF "$(NODEBUG)" == "1"
cvarsdll   = $(cvars) -MD
!ELSE
cvarsdll   = $(cvars) -MDd
!ENDIF

CON_CFLAGS    = $(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE

######################################################################
# Project specific targets
######################################################################

release:    setup $(ITCLDLL) $(ITCLSTUBLIB) $(ITCLSH)
all:        setup $(ITCLDLL) $(ITCLSTUBLIB) $(ITCLSH)
test:        setup $(ITCLDLL) $(ITCLSTUBLIB) $(PKGINDEX)
    -@@copy $(TCLDLL) $(TMPDIR)
    $(TCLSH) <<
        cd ../tests
	lappend auto_path ../win/$(TMPNAME)
	set env(ITCL_LIBRARY) ../library
        source all
<<
d29 2
a30 2
$(PKGINDEX):
    -@@copy pkgIndex.tcl $@@
d32 1
a32 12
setup:
    if not exist $(TMPDIR) mkdir $(TMPDIR)
    if not exist $(OUTDIR) mkdir $(OUTDIR)

$(ITCLLIB): $(ITCLDLL)

$(ITCLDLL): $(ITCLOBJS) $(TMPDIR)\itclvc.def $(TMPDIR)\itcl.res
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(dlllflags) -def:$(TMPDIR)\itclvc.def \
        -out:$@@ $(TMPDIR)\itcl.res $(guilibsdll) $(TCLSTUBLIB) @@<<
		$(ITCLOBJS)
<<
d34 2
a35 2
$(ITCLSTUBLIB): $(ITCLSTUBOBJS)
    $(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)
d37 2
a38 4
$(ITCLSH): $(ITCLSHOBJS) $(ITCLSTUBLIB) $(TCLSTUBLIB) $(TMPDIR)\itclsh.res
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(conlflags) $(TMPDIR)\itclsh.res -stack:2300000 \
        -out:$@@ $(conlibsdll) $(ITCLLIB) $(TCLLIB) $(ITCLSHOBJS)
d40 36
a75 3
$(TMPDIR)\itclvc.def: $(DUMPEXTS) $(ITCLOBJS)
    $(DUMPEXTS) -o $@@ $(ITCLDLLNAME) @@<<
$(ITCLOBJS)
d78 23
a100 5
$(DUMPEXTS): $(TCLDIR)\win\winDumpExts.c
    $(cc32) $(CON_CFLAGS) -Fo$(TMPDIR)\ $?
    set LIB=$(TOOLS32)\lib
    $(link32) $(ldebug) $(conlflags) $(guilibs) -out:$@@ \
        $(TMPDIR)\winDumpExts.obj 
d102 9
a110 18
install: all
    if not exist $(INSTALLDIR) mkdir $(INSTALLDIR)
    if not exist $(BIN_INSTALL_DIR) mkdir $(BIN_INSTALL_DIR)
    if not exist $(LIB_INSTALL_DIR) mkdir $(LIB_INSTALL_DIR)
    if not exist $(SCRIPT_INSTALL_DIR) mkdir $(SCRIPT_INSTALL_DIR)
    if not exist $(INCLUDE_INSTALL_DIR) mkdir $(INCLUDE_INSTALL_DIR)
    copy $(ITCLSH) "$(BIN_INSTALL_DIR)"
    copy $(ITCLDLL) "$(BIN_INSTALL_DIR)"
    copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
    copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
    copy $(ROOT)\win\*.tcl "$(SCRIPT_INSTALL_DIR)"

#
# Regenerate the stubs files.
#
genstubs:
    $(TCLSH) $(TCLDIR)\tools\genStubs.tcl $(GENERICDIR) \
        $(GENERICDIR)\itcl.decls $(GENERICDIR)\itclInt.decls
d116 4
a119 5
$(TMPDIR)\tclAppInit.obj : $(WINDIR)\tclAppInit.c
    $(cc32) $(ITCL_EXE_CFLAGS) -Fo$@@ $?

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported
d121 2
a122 2
$(TMPDIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
    $(cc32) -DSTATIC_BUILD $(ITCL_CFLAGS) -Fo$@@ $?
d129 1
a129 1
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<
d132 1
a132 1
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<
d135 1
a135 1
    $(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMPDIR)\ $<
d138 1
a138 2
    $(rc32) -fo $@@ -r -i $(GENERICDIR) -i $(WINDIR) -i $(TCLDIR)\generic -D__WIN32__ \
        $(ITCL_DEFINES) $<
d141 7
a147 12
    -@@del $(OUTDIR)\*.exp
    -@@del $(OUTDIR)\*.lib
    -@@del $(OUTDIR)\*.dll
    -@@del $(OUTDIR)\*.exe
    -@@del $(OUTDIR)\*.pdb
    -@@del $(TMPDIR)\*.pch
    -@@del $(TMPDIR)\*.obj
    -@@del $(TMPDIR)\*.res
    -@@del $(TMPDIR)\*.def
    -@@del $(TMPDIR)\*.exe
    -@@rmdir $(OUTDIR)
    -@@rmdir $(TMPDIR)
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d1 301
a301 297
######################################################################
# Visual C++ 5.0+ makefile for [Incr Tcl]
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.13 2001/05/23 00:37:47 davygrvy Exp $
######################################################################
# All needed information is derived from running vcvars32.bat
#
# NOTE: Be sure to modify the "config.vc" file in the toplevel directory
#   before running this makefile.
######################################################################
#  Do not modify this file!  modify config.vc to effect the build.
######################################################################

!include "..\..\rules.vc"
!include "..\..\config.vc"
!include "..\..\pkg.vc"

BINROOT		= .
ROOT		= ..
NAMEPREFIX	= itcl
STUBPREFIX	= $(NAMEPREFIX)stub

!if $(DEBUG)
TMPNAME		= Debug
DBGX		= d
!else
TMPNAME		= Release
DBGX		=
!endif

TMP_DIR		= $(BINROOT)\$(TMPNAME)

!ifndef OUT_DIR
OUT_DIR		= $(TMP_DIR)
!endif

PKGINDEX	= "$(TMP_DIR)\pkgIndex.tcl"

!if $(STATIC_BUILD)
ITCLOUTNAME	= $(NAMEPREFIX)$(ITCL_VERSION)s$(DBGX)
ITCLTARGET	= "$(OUT_DIR)\$(ITCLOUTNAME).lib"
!else
ITCLOUTNAME	= $(NAMEPREFIX)$(ITCL_VERSION)$(DBGX)
ITCLIMPLIB	= "$(OUT_DIR)\$(ITCLOUTNAME).lib"
ITCLTARGET	= "$(OUT_DIR)\$(ITCLOUTNAME).dll"
!endif

!if $(ISTCLINSTALL)
TCLSTUBLIB	= "$(TCLROOT)\lib\tclstub$(TCL_VERSION).lib"
TCLIMPLIB	= "$(TCLROOT)\lib\tcl$(TCL_VERSION)$(DBGX).lib"
TCLSH		= "$(TCLROOT)\bin\tclsh$(TCL_VERSION)$(DBGX).exe"
!else
TCLSTUBLIB	= "$(TCLROOT)\win\Release\tclstub$(TCL_VERSION).lib"
TCLIMPLIB	= "$(TCLROOT)\win\$(OUT_DIR)\tcl$(TCL_VERSION)$(DBGX).lib"
TCLSH		= "$(TCLROOT)\win\$(OUT_DIR)\tclsh$(TCL_VERSION)$(DBGX).exe"
!endif

ITCLSTUBLIBNAME	= $(STUBPREFIX)$(ITCL_VERSION)$(DBGX).lib
ITCLSTUBLIB	= "$(OUT_DIR)\$(ITCLSTUBLIBNAME)"

LIB_INSTALL_DIR		= $(INSTALLDIR)\lib
BIN_INSTALL_DIR		= $(INSTALLDIR)\bin
SCRIPT_INSTALL_DIR	= $(INSTALLDIR)\lib\itcl$(ITCL_DOTVERSION)
INCLUDE_INSTALL_DIR	= $(INSTALLDIR)\include

ITCLSHOBJS = \
	$(TMP_DIR)\tclAppInit.obj

ITCLOBJS = \
	$(TMP_DIR)\itcl_bicmds.obj \
	$(TMP_DIR)\itcl_class.obj \
	$(TMP_DIR)\itcl_cmds.obj \
	$(TMP_DIR)\itcl_ensemble.obj \
	$(TMP_DIR)\itcl_linkage.obj \
	$(TMP_DIR)\itcl_migrate.obj \
	$(TMP_DIR)\itcl_methods.obj \
	$(TMP_DIR)\itcl_objects.obj \
	$(TMP_DIR)\itcl_obsolete.obj \
	$(TMP_DIR)\itcl_parse.obj \
	$(TMP_DIR)\itcl_util.obj \
!if $(STATIC_BUILD) == 0
	$(TMP_DIR)\dllEntryPoint.obj \
	$(TMP_DIR)\dllResource.obj \
!endif
	$(TMP_DIR)\itclStubInit.obj

ITCLSTUBOBJS = \
	$(TMP_DIR)\itclStubLib.obj

WINDIR		= $(ROOT)\win
GENERICDIR	= $(ROOT)\generic
RCDIR		= $(ROOT)\win\rc

######################################################################
# Link flags
######################################################################

!if $(DEBUG)
ldebug = -debug:full -debugtype:cv -pdb:none
!else
ldebug = -release -opt:ref
!endif

# declarations common to all linker options
lcommon = -nologo -link50compat -machine:$(MACHINE)

ITCL_LFLAGS = $(lcommon) -subsystem:windows -dll

!if $(USE_TCL_STUBS) == 0
ITCL_LLIBS	= $(TCLIMPLIB)
!else
ITCL_LLIBS	= $(TCLSTUBLIB)
!endif

######################################################################
# Compile flags
######################################################################

!IF $(DEBUG) == 0
!IF "$(MACHINE)" == "ALPHA"
# MSVC on Alpha doesn't understand -Ot
cdebug = -O2i
!ELSE
cdebug = -Ox
!ENDIF
!ELSE
!if $(MSDEV_VER) < 6
cdebug = -Zi -Od -WX
!else
cdebug = -ZI -Od -WX
!endif
!ENDIF

!if $(STATIC_BUILD)
cdll	=
!else
cdll	= -GD
!endif

# declarations common to all compiler options
ccommon = -nologo -c -W3 -YX -Fp$(TMP_DIR)\ 

!if $(STATIC_BUILD) && $(NOMSVCRT)
crt	= -MT$(DBGX)
!else
crt	= -MD$(DBGX)
!endif

!if $(ISTCLINSTALL)
TCL_INCLUDES	= -I"$(TCLROOT)\include"
!else
TCL_INCLUDES	= -I"$(TCLROOT)\generic"
!endif

ITCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR)
ITCL_DEFINES	= -DBUILD_itcl -DTCL_THREADS=1
ITCL_EXE_CFLAGS	= $(ccommon) $(cdebug) $(crt) $(cdll) $(ITCL_INCLUDES) \
		$(ITCL_DEFINES) $(TCL_INCLUDES)

!if $(USE_TCL_STUBS)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS
!else
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS)
!endif

######################################################################
# Project specific targets
######################################################################

all :     setup $(ITCLTARGET) $(ITCLSTUBLIB)
release : setup $(ITCLTARGET) $(ITCLSTUBLIB)

!if $(STATIC_BUILD)
test :
	@@echo test target not supported for a static library.
!else
#test :    setup $(ITCLTARGET) $(ITCLSTUBLIB) $(PKGINDEX)
#	-@@copy $(TCLDLL) $(TMP_DIR)
#	$(TCLSH) <<
#cd ../tests
#lappend auto_path ../win/$(TMP_DIR)
#set env(ITCL_LIBRARY) ../library
#source all
#<<
!endif

$(PKGINDEX) :
	-@@copy pkgIndex.tcl $@@

setup :
	@@$(vcvars) > nul
	@@if not exist $(TMP_DIR)\nul mkdir $(TMP_DIR) &\
		echo Created directory '$(TMP_DIR)'
	@@if not exist $(OUT_DIR)\nul mkdir $(OUT_DIR) &\
		echo Created directory '$(OUT_DIR)'

$(ITCLTARGET): $(ITCLOBJS)
!if $(STATIC_BUILD)
	$(lib32) -nologo -machine:$(MACHINE) -out:$@@ @@<<
!else
	$(link32) $(ITCL_LFLAGS) -out:$@@ $(ITCL_LLIBS) @@<<
!endif
		$(ITCLOBJS)
<<

!if $(DEBUG) == 0
$(ITCLSTUBLIB) : $(ITCLSTUBOBJS)
	$(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)
!else
$(ITCLSTUBLIB) :
!endif

install : all
	if not exist "$(INSTALLDIR)" mkdir "$(INSTALLDIR)"
	if not exist "$(BIN_INSTALL_DIR)" mkdir "$(BIN_INSTALL_DIR)"
	if not exist "$(LIB_INSTALL_DIR)" mkdir "$(LIB_INSTALL_DIR)"
	if not exist "$(SCRIPT_INSTALL_DIR)" mkdir "$(SCRIPT_INSTALL_DIR)"
	if not exist "$(INCLUDE_INSTALL_DIR)" mkdir "$(INCLUDE_INSTALL_DIR)"
	copy $(ITCLTARGET) "$(SCRIPT_INSTALL_DIR)"
	-copy $(ITCLSTUBLIB) "$(LIB_INSTALL_DIR)"
	copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\generic\itclDecls.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
	echo package ifneeded Itcl $(ITCL_DOTVERSION) [list load [file join $$dir $(ITCLOUTNAME).dll] Itcl] > \
		"$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"

######################################################################
# Regenerate the stubs files.
######################################################################

!if $(ISTCLINSTALL) == 0
# Only from the sources of Tcl does genStubs.tcl exist.
genstubs:
	$(TCLSH) $(TCLROOT)\tools\genStubs.tcl $(GENERICDIR) \
        	$(GENERICDIR)\itcl.decls $(GENERICDIR)\itclInt.decls
!endif

######################################################################
# Special case object file targets
######################################################################

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

$(TMP_DIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
	$(cc32) -DSTATIC_BUILD $(ITCL_EXE_CFLAGS) -Zl -Fo$@@ $?

$(TMP_DIR)\dllResource.obj : $(TMP_DIR)\itcl.res
	$(cvtres32) -nologo -machine:$(MACHINE) -out:$@@ $?

######################################################################
# Inference rules.  Use batch-mode when supported.
######################################################################

!if $(_NMAKE_VER) < 162
{$(WINDIR)}.c{$(TMP_DIR)}.obj :
!else
{$(WINDIR)}.c{$(TMP_DIR)}.obj ::
!endif
	$(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

!if $(_NMAKE_VER) < 162
{$(GENERICDIR)}.c{$(TMP_DIR)}.obj :
!else
{$(GENERICDIR)}.c{$(TMP_DIR)}.obj ::
!endif
	$(cc32) -DDLL_BUILD $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(RCDIR)}.rc{$(TMP_DIR)}.res :
	$(rc32) -fo $@@ -DDEBUG=$(DEBUG) $(ITCL_INCLUDES) $(TCL_INCLUDES) $(ITCL_DEFINES) $<

######################################################################
# Clean up
######################################################################

tidy :
	-del $(TMP_DIR)\*.pch
	-del $(TMP_DIR)\*.obj
	-del $(TMP_DIR)\*.res

clean : tidy
	-del $(OUT_DIR)\*.exp
	-del $(OUT_DIR)\*.lib
	-del $(OUT_DIR)\*.dll

hose : clean
	-rmdir $(OUT_DIR)
	-rmdir $(TMP_DIR)

@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d1 297
a297 419
#------------------------------------------------------------------------------
# Visual C++ 5.0+ makefile for [Incr Tcl]
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1993-1998 Lucent Technologies, Inc.
# RCS: $Id: makefile.vc,v 1.32 2004/09/24 22:45:02 davygrvy Exp $
#------------------------------------------------------------------------------
#  Do not modify this file!
#------------------------------------------------------------------------------

!if !exist("makefile.vc")
MSG = ^
You must run this makefile only from the directory it is in.^
Please `cd` to its location first.
!error $(MSG) 
!endif

PROJECT	= itcl
!include "..\..\rules.vc"

!if $(TCLINSTALL)
!message *** Warning: [Incr Tcl] requires the source distribution of Tcl to build from,
!message ***    at this time, sorry.  Please set the TCLDIR macro to point to the
!message ***    sources.
!endif

!if [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 33
ITCL_DOTVERSION	= 3.3
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 34
ITCL_DOTVERSION	= 3.4
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 35
ITCL_DOTVERSION	= 3.5
!elseif [nmakehlp -g ..\generic\itcl.h ITCL_VERSION] == 0
MSG =^
Can't get version string from ..\generic\itcl.h
!error $(MSG)
!endif
ITCL_VERSION	= $(ITCL_DOTVERSION:.=)


BINROOT		= .
ROOT		= ..
STUBPREFIX	= $(PROJECT)stub

PKGINDEX	= "$(TMP_DIR)\pkgIndex.tcl"

!if $(TCL_DOES_STUBS)
ITCLLIBNAME	= $(PROJECT)$(ITCL_VERSION)$(SUFX).$(EXT)
!else
ITCLLIBNAME	= $(PROJECT)$(ITCL_VERSION)80$(SUFX).$(EXT)
!endif

ITCLLIB		= "$(OUT_DIR)\$(ITCLLIBNAME)"
ITCLIMPLIB	= "$(OUT_DIR)\$(PROJECT)$(ITCL_VERSION)$(SUFX).lib"

!if $(TCL_DOES_STUBS)
ITCLSTUBLIBNAME	= $(STUBPREFIX)$(ITCL_VERSION).lib
ITCLSTUBLIB	= "$(OUT_DIR)\$(ITCLSTUBLIBNAME)"
!else
ITCLSTUBLIBNAME	=
ITCLSTUBLIB	= 
TCLSTUBLIB	= $(TCLIMPLIB)
!endif

BIN_INSTALL_DIR		= $(_INSTALLDIR)\bin
DOC_INSTALL_DIR		= $(_INSTALLDIR)\doc
LIB_INSTALL_DIR		= $(_INSTALLDIR)\lib
SCRIPT_INSTALL_DIR	= $(_INSTALLDIR)\lib\itcl$(ITCL_DOTVERSION)
INCLUDE_INSTALL_DIR	= $(_INSTALLDIR)\include

ITCLOBJS = \
	$(TMP_DIR)\itcl_bicmds.obj \
	$(TMP_DIR)\itcl_class.obj \
	$(TMP_DIR)\itcl_cmds.obj \
	$(TMP_DIR)\itcl_ensemble.obj \
	$(TMP_DIR)\itcl_linkage.obj \
	$(TMP_DIR)\itcl_migrate.obj \
	$(TMP_DIR)\itcl_methods.obj \
	$(TMP_DIR)\itcl_objects.obj \
	$(TMP_DIR)\itcl_parse.obj \
	$(TMP_DIR)\itcl_util.obj \
!if $(TCL_DOES_STUBS)
	$(TMP_DIR)\itclStubInit.obj \
!endif
!if !$(STATIC_BUILD)
	$(TMP_DIR)\dllEntryPoint.obj \
	$(TMP_DIR)\itcl.res
!endif

ITCLSTUBOBJS = \
!if $(TCL_DOES_STUBS)
	$(TMP_DIR)\itclStubLib.obj
!endif

GENERICDIR	= $(ROOT)\generic
DOCDIR		= $(ROOT)\doc
RCDIR		= $(ROOT)\win\rc
WINDIR		= $(ROOT)\win
TOOLSDIR	= ..\..\tools

#---------------------------------------------------------------------
# Link flags
#---------------------------------------------------------------------

!if $(DEBUG)
ldebug	= -debug:full -debugtype:cv
!else
ldebug	= -release -opt:ref -opt:icf,3
!endif

# declarations common to all linker options
lflags	= -nologo -machine:$(MACHINE) $(ldebug)

!if $(PROFILE)
lflags	= $(lflags) -profile
!endif

!if $(ALIGN98_HACK) && !$(STATIC_BUILD)
# align sections for PE size savings.
lflags	= $(lflags) -opt:nowin98
!else if !$(ALIGN98_HACK) && $(STATIC_BUILD)
# align sections for speed in loading by choosing the virtual page size.
lflags	= $(lflags) -align:4096
!endif

!if $(LOIMPACT)
lflags	= $(lflags) -ws:aggressive
!endif

ITCL_LFLAGS = $(lflags) -subsystem:windows -dll

!if exist("$(TCLDIR)\win\coffbase.txt")
ITCL_DLLBASE	= -base:@@$(TCLDIR)\win\coffbase.txt,itcl
!else
ITCL_DLLBASE	=
!endif

#---------------------------------------------------------------------
# Compile flags
#---------------------------------------------------------------------

!if $(DEBUG)
!if "$(MACHINE)" == "IA64"
cdebug = -Od -Zi
!else
cdebug = -Z7 -Od -WX
!endif
!else
# This cranks the optimization level up to max.
cdebug = -O2
!endif

# declarations common to all compiler options
cflags = -nologo -c -W3 -YX -Fp$(TMP_DIR)^\

!if $(PENT_0F_ERRATA)
cflags = $(cflags) -QI0f
!endif

!if $(ITAN_B_ERRATA)
cflags = $(cflags) -QIA64_Bx
!endif

!if $(MSVCRT)
crt = -MD$(DBGX)
!else
crt = -MT$(DBGX)
!endif

!if $(TCLINSTALL)
TCL_INCLUDES	= -I"$(TCLDIR)\include"
!else
TCL_INCLUDES	= -I"$(TCLDIR)\generic" -I"$(TCLDIR)\win"
!endif

ITCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR)
ITCL_DEFINES	= -DBUILD_itcl -DTCL_THREADS=1
ITCL_EXE_CFLAGS	= $(cdebug) $(cflags) $(crt) $(ITCL_INCLUDES) $(ITCL_DEFINES) $(TCL_INCLUDES)

### By convention, static builds do not use Stubs.  This is just a practice,
### not a technical limitation.
!if $(STATIC_BUILD)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DSTATIC_BUILD
!elseif $(TCL_DOES_STUBS)
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS) -DUSE_TCL_STUBS
!else
ITCL_CFLAGS	= $(ITCL_EXE_CFLAGS)
!endif

#---------------------------------------------------------------------
# TclTest flags
#---------------------------------------------------------------------

!if "$(TESTPAT)" != ""
TESTFLAGS = -file $(TESTPAT)
!endif

#---------------------------------------------------------------------
# Project specific targets
#---------------------------------------------------------------------

all :     setup $(ITCLLIB) $(ITCLSTUBLIB)
release : setup $(ITCLLIB) $(ITCLSTUBLIB)
install : install-binaries install-docs

setup :
	@@if not exist $(TMP_DIR)\nul mkdir $(TMP_DIR)
	@@if not exist $(OUT_DIR)\nul mkdir $(OUT_DIR)

$(ITCLLIB): $(ITCLOBJS)
!if $(STATIC_BUILD)
	$(lib32) -nologo -machine:$(MACHINE) -out:$@@ @@<<
$(ITCLOBJS)
<<
!else
	$(link32) $(ITCL_LFLAGS) $(ITCL_DLLBASE) -out:$@@ $(TCLSTUBLIB) @@<<
$(ITCLOBJS)
<<
	-@@del $*.exp
!endif

!if $(TCL_DOES_STUBS)
$(ITCLSTUBLIB) : $(ITCLSTUBOBJS)
	$(lib32) -nologo -out:$@@ $(ITCLSTUBOBJS)
!endif

install-binaries :
	if not exist "$(_INSTALLDIR)" mkdir "$(_INSTALLDIR)"
	if not exist "$(BIN_INSTALL_DIR)" mkdir "$(BIN_INSTALL_DIR)"
	if not exist "$(LIB_INSTALL_DIR)" mkdir "$(LIB_INSTALL_DIR)"
	if not exist "$(SCRIPT_INSTALL_DIR)" mkdir "$(SCRIPT_INSTALL_DIR)"
	if not exist "$(INCLUDE_INSTALL_DIR)" mkdir "$(INCLUDE_INSTALL_DIR)"
	copy $(ITCLLIB) "$(SCRIPT_INSTALL_DIR)"
!if ""$(ITCLSTUBLIB)"" != """"
	copy $(ITCLSTUBLIB) "$(LIB_INSTALL_DIR)"
!endif
	copy $(ROOT)\generic\itcl.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\generic\itclDecls.h "$(INCLUDE_INSTALL_DIR)"
	copy $(ROOT)\library\*.* "$(SCRIPT_INSTALL_DIR)"
	echo if {[package vsatisfies 8.0 [package provide Tcl]]} {\
		> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ set add 80>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo } else {>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ set add {}>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo }>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo if {[info exists ::tcl_platform(debug)] ^&^&\
		$$::tcl_platform(debug)	^&^& \>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ ^ ^ ^ ^ [file exists [file join $$dir\
		$(PROJECT)$(ITCL_VERSION)$${add}g.dll]]}\
		{>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ package ifneeded Itcl $(ITCL_DOTVERSION) [list load\
		[file join $$dir $(PROJECT)$(ITCL_VERSION)$${add}g.dll]\
		Itcl]>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo } else {>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo ^ ^ ^ ^ package ifneeded Itcl $(ITCL_DOTVERSION) [list load\
		[file join $$dir $(PROJECT)$(ITCL_VERSION)$${add}.dll]\
		Itcl]>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo }>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"
	echo unset add>> "$(SCRIPT_INSTALL_DIR)\pkgIndex.tcl"

!if $(STATIC_BUILD)
test :
	@@echo test target not supported for a static library.
!else
test : setup $(ITCLLIB) $(ITCLSTUBLIB)
	$(TCLSH) ..\tests\all.tcl $(TESTFLAGS) -loadfile <<
	set env(ITCL_LIBRARY) [file normalize [file join $(MAKEDIR:\=/) .. library]]
	load [file normalize [file join $(MAKEDIR:\=/) $(ITCLLIB:\=/)]]
<<
!endif

#---------------------------------------------------------------------
# Regenerate the stubs files.
#---------------------------------------------------------------------

genstubs:
!if $(TCLINSTALL)
	@@echo Need the source distribution to regenerate the Stubs table.
!else
	$(TCLSH) $(TOOLSDIR)\genStubs.tcl $(GENERICDIR) \
        	$(GENERICDIR)\$(PROJECT).decls $(GENERICDIR)\$(PROJECT)Int.decls
!endif

#---------------------------------------------------------------------
# Special case object file targets
#---------------------------------------------------------------------

# The following object is part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

$(TMP_DIR)\itclStubLib.obj : $(GENERICDIR)\itclStubLib.c
	$(cc32) -DSTATIC_BUILD $(ITCL_EXE_CFLAGS) -Zl -Fo$@@ $?

#---------------------------------------------------------------------
# Inference rules.  Use batch-mode when supported.
#---------------------------------------------------------------------

{$(WINDIR)}.c{$(TMP_DIR)}.obj ::
	$(cc32) $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(GENERICDIR)}.c{$(TMP_DIR)}.obj ::
	$(cc32) $(ITCL_CFLAGS) -Fo$(TMP_DIR)\ @@<<
$<
<<

{$(RCDIR)}.rc{$(TMP_DIR)}.res :
	$(rc32) -fo $@@ -d DEBUG=$(DEBUG) -d UNCHECKED=$(UNCHECKED) \
		$(ITCL_INCLUDES) $(TCL_INCLUDES) $(ITCL_DEFINES) $<

#---------------------------------------------------------------------
# Generate the windows help files.
#---------------------------------------------------------------------

HLPBASE		= $(PROJECT)$(ITCL_VERSION)
HELPFILE	= $(OUT_DIR)\$(HLPBASE).hlp
HELPCNT		= $(OUT_DIR)\$(HLPBASE).cnt
DOCTMP_DIR	= $(OUT_DIR)\$(PROJECT)_docs
HELPRTF		= $(DOCTMP_DIR)\$(PROJECT).rtf
MAN2HELP	= $(DOCTMP_DIR)\man2help.tcl
MAN2HELP2	= $(DOCTMP_DIR)\man2help2.tcl
INDEX		= $(DOCTMP_DIR)\index.tcl
BMP		= $(DOCTMP_DIR)\toaster.bmp
BMP_NOPATH	= toaster.bmp
MAN2TCL		= $(DOCTMP_DIR)\man2tcl.exe

winhelp: docsetup $(HELPFILE)

docsetup:
	@@if not exist $(DOCTMP_DIR)\nul mkdir $(DOCTMP_DIR)

$(MAN2HELP) $(MAN2HELP2) $(INDEX): $(TCLTOOLSDIR)\$$(@@F)
	copy $(TCLTOOLSDIR)\$(@@F) $(@@D)

$(BMP):
	copy $(WINDIR)\$(@@F) $(@@D)

$(HELPFILE): $(HELPRTF) $(BMP)
	cd $(DOCTMP_DIR)
	start /wait hcrtf.exe -x <<$(PROJECT).hpj
[OPTIONS]
COMPRESS=12 Hall Zeck
LCID=0x409 0x0 0x0 ; English (United States)
TITLE=[Incr Tcl] Reference Manual
BMROOT=.
CNT=$(@@B).cnt
HLP=$(@@B).hlp

[FILES]
$(PROJECT).rtf

[WINDOWS]
main="[Incr Tcl] Reference Manual",,27648,(r15263976),(r65280)

[CONFIG]
BrowseButtons()
CreateButton(1, "Web", ExecFile("http://www.tcl.tk"))
CreateButton(2, "SF", ExecFile("http://sf.net/projects/incrtcl"))
CreateButton(3, "Wiki", ExecFile("http://wiki.tcl.tk"))
CreateButton(4, "FAQ", ExecFile("http://www.purl.org/NET/Tcl-FAQ/"))
<<
	cd $(MAKEDIR)
	copy "$(DOCTMP_DIR)\$(@@B).hlp" "$(OUT_DIR)"
	copy "$(DOCTMP_DIR)\$(@@B).cnt" "$(OUT_DIR)"

$(MAN2TCL): $(TCLTOOLSDIR)\$$(@@B).c
	$(cc32) -nologo -G4 -ML -O2 -Fo$(@@D)\ $(TCLTOOLSDIR)\$(@@B).c -link -out:$@@

$(HELPRTF): $(MAN2TCL) $(MAN2HELP) $(MAN2HELP2) $(INDEX)
	$(TCLSH) $(MAN2HELP) -bitmap $(BMP_NOPATH) $(PROJECT) $(ITCL_VERSION) $(DOCDIR:\=/)

install-docs:
!if exist($(HELPFILE))
	@@xcopy /i /y "$(HELPFILE)" "$(DOC_INSTALL_DIR)\"
	@@xcopy /i /y "$(HELPCNT)" "$(DOC_INSTALL_DIR)\"
	$(TCLSH) <<
puts "Installing $(PROJECT)'s helpfile contents into Tcl's ..."
set f [open {$(DOC_INSTALL_DIR:\=/)/tcl$(TCL_VERSION).cnt} r]
while {![eof $$f]} {
    if {[regexp {:Include $(PROJECT)([0-9]{2}).cnt} [gets $$f] dummy ver]} {
	if {$$ver == $(ITCL_VERSION)} {
	    puts "Already installed."
	    exit
	} else {
	    # do something here logical to remove (or replace) it.
	    puts "$$ver != $(ITCL_VERSION), unfinished code path, die, die!"
	    exit 1
	}
    }
}
close $$f
set f [open {$(DOC_INSTALL_DIR:\=/)/tcl$(TCL_VERSION).cnt} a]
puts $$f {:Include $(HLPBASE).cnt}
close $$f
<<
	start /wait winhlp32 -g $(DOC_INSTALL_DIR)\tcl$(TCL_VERSION).hlp
!endif


#---------------------------------------------------------------------
# Clean up
#---------------------------------------------------------------------

tidy :
	-del $(TMP_DIR)\*.pch
	-del $(TMP_DIR)\*.obj
	-del $(TMP_DIR)\*.res

clean : tidy
	-del $(OUT_DIR)\*.exp
	-del $(OUT_DIR)\*.lib
	-del $(OUT_DIR)\*.dll

hose : clean
	-rmdir $(OUT_DIR)
	-rmdir $(TMP_DIR)
@


