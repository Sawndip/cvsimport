head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.44;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.23;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.26;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.32;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.39;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.40.20;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@'\"
'\" Copyright (c) 1993-1998  Lucent Technologies, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\"
'\" RCS: $Id: configbody.n,v 1.4 2004/09/25 22:50:43 davygrvy Exp $
'\"
.so man.macros
.TH configbody n 3.0 itcl "[incr\ Tcl]"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
configbody \- change the "config" code for a public variable
.SH SYNOPSIS
\fBitcl::configbody \fIclassName\fB::\fIvarName body\fR
.BE

.SH DESCRIPTION
.PP
The \fBconfigbody\fR command is used outside of an \fB[incr\ Tcl]\fR
class definition to define or redefine the configuration code
associated with a public variable.  Public variables act like
configuration options for an object.  They can be modified
outside the class scope using the built-in \fBconfigure\fR method.
Each variable can have a bit of "config" code associate with it
that is automatically executed when the variable is configured.
The \fBconfigbody\fR command can be used to define or redefine
this body of code.
.PP
Like the \fBbody\fR command, this facility allows a class definition
to have separate "interface" and "implementation" parts.
The "interface" part is a \fBclass\fR command with declarations
for methods, procs, instance variables and common variables.
The "implementation" part is a series of \fBbody\fR and
\fBconfigbody\fR commands.  If the "implementation" part
is kept in a separate file, it can be sourced again and
again as bugs are fixed, to support interactive development.
When using the "tcl" mode in the \fBemacs\fR editor, the
"interface" and "implementation" parts can be kept in the
same file; as bugs are fixed, individual bodies can be
highlighted and sent to the test application.
.PP
The name "\fIclassName\fB::\fIvarName\fR"
identifies the public variable being updated.
If the \fIbody\fR string starts with "\fB@@\fR", it is treated
as the symbolic name for a C procedure.  Otherwise, it is
treated as a Tcl command script.
.PP
Symbolic names for C procedures are established by registering
procedures via \fBItcl_RegisterC()\fR.  This is usually done
in the \fBTcl_AppInit()\fR procedure, which is automatically called
when the interpreter starts up.  In the following example,
the procedure \fCMy_FooCmd()\fR is registered with the
symbolic name "foo".  This procedure can be referenced in
the \fBconfigbody\fR command as "\fC@@foo\fR".
.CS
int
Tcl_AppInit(interp)
    Tcl_Interp *interp;     /* Interpreter for application. */
{
    if (Itcl_Init(interp) == TCL_ERROR) {
        return TCL_ERROR;
    }

    if (Itcl_RegisterC(interp, "foo", My_FooCmd) != TCL_OK) {
        return TCL_ERROR;
    }
}
.CE

.SH EXAMPLE
In the following example, a "File" class is defined to represent
open files.  Whenever the "-name" option is configured, the
existing file is closed, and a new file is opened.  Note that
the "config" code for a public variable is optional.  The "-access"
option, for example, does not have it.
.CS
itcl::class File {
    private variable fid ""

    public variable name ""
    public variable access "r"

    constructor {args} {
        eval configure $args
    }
    destructor {
        if {$fid != ""} {
            close $fid
        }
    }

    method get {}
    method put {line}
    method eof {}
}

itcl::body File::get {} {
    return [gets $fid]
}
itcl::body File::put {line} {
    puts $fid $line
}
itcl::body File::eof {} {
    return [::eof $fid]
}

itcl::configbody File::name {
    if {$fid != ""} {
        close $fid
    }
    set fid [open $name $access]
}

#
# See the File class in action:
#
File x

x configure -name /etc/passwd
while {![x eof]} {
    puts "=> [x get]"
}
itcl::delete object x
.CE

.SH KEYWORDS
class, object, variable, configure
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.1 1998/07/27 18:41:59 stanton Exp $
d16 1
a16 1
\fBconfigbody \fIclassName\fB::\fIvarName body\fR
d79 1
a79 1
class File {
d99 1
a99 1
body File::get {} {
d102 1
a102 1
body File::put {line} {
d105 1
a105 1
body File::eof {} {
d109 1
a109 1
configbody File::name {
d125 1
a125 1
delete object x
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.2.172.1 2001/05/18 02:21:42 mdejong Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.2 1999/01/27 18:56:04 jingham Exp $
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.2.172.1 2001/05/18 02:21:42 mdejong Exp $
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.1 1998/07/27 18:41:59 stanton Exp $
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d7 1
a7 1
'\" RCS: $Id: configbody.n,v 1.4 2004/09/25 22:50:43 davygrvy Exp $
d16 1
a16 1
\fBitcl::configbody \fIclassName\fB::\fIvarName body\fR
d79 1
a79 1
itcl::class File {
d99 1
a99 1
itcl::body File::get {} {
d102 1
a102 1
itcl::body File::put {line} {
d105 1
a105 1
itcl::body File::eof {} {
d109 1
a109 1
itcl::configbody File::name {
d125 1
a125 1
itcl::delete object x
@


