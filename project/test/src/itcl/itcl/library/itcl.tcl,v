head	1.7;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.7
	gdb_7_6-branch:1.7.0.12
	gdb_7_5-branch:1.7.0.10
	gdb_7_4-branch:1.7.0.8
	gdb_7_3-branch:1.7.0.6
	gdb_7_1-branch:1.7.0.4
	gdb_7_0-branch:1.7.0.2
	arc-sim-20090309:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.5.0.12
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.21.21.04.24;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.20.40.27;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.35.32;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.15.21.03.52;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.42;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.39.58;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.7
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#
# itcl.tcl
# ----------------------------------------------------------------------
# Invoked automatically upon startup to customize the interpreter
# for [incr Tcl].
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: itcl.tcl,v 1.5 2002/09/29 19:30:27 davygrvy Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

proc ::itcl::delete_helper { name args } {
    ::itcl::delete object $name
}

# ----------------------------------------------------------------------
#  USAGE:  local <className> <objName> ?<arg> <arg>...?
#
#  Creates a new object called <objName> in class <className>, passing
#  the remaining <arg>'s to the constructor.  Unlike the usual
#  [incr Tcl] objects, however, an object created by this procedure
#  will be automatically deleted when the local call frame is destroyed.
#  This command is useful for creating objects that should only remain
#  alive until a procedure exits.
# ----------------------------------------------------------------------
proc ::itcl::local {class name args} {
    set ptr [uplevel [list $class $name] $args]
    uplevel [list set itcl-local-$ptr $ptr]
    set cmd [uplevel namespace which -command $ptr]
    uplevel [list trace variable itcl-local-$ptr u \
        "::itcl::delete_helper $cmd"]
    return $ptr
}

# ----------------------------------------------------------------------
# auto_mkindex
# ----------------------------------------------------------------------
# Define Itcl commands that will be recognized by the auto_mkindex
# parser in Tcl...
#

#
# USAGE:  itcl::class name body
# Adds an entry for the given class declaration.
#
auto_mkindex_parser::command itcl::class {name body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"

    variable parser
    variable contextStack
    set contextStack [linsert $contextStack 0 $name]
    $parser eval $body
    set contextStack [lrange $contextStack 1 end]
}

#
# USAGE:  itcl::body name arglist body
# Adds an entry for the given method/proc body.
#
auto_mkindex_parser::command itcl::body {name arglist body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
}

#
# USAGE:  itcl::configbody name arglist body
# Adds an entry for the given method/proc body.
#
auto_mkindex_parser::command itcl::configbody {name body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
}

#
# USAGE:  ensemble name ?body?
# Adds an entry to the auto index list for the given ensemble name.
#
auto_mkindex_parser::command itcl::ensemble {name {body ""}} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
}

#
# USAGE:  public arg ?arg arg...?
#         protected arg ?arg arg...?
#         private arg ?arg arg...?
#
# Evaluates the arguments as commands, so we can recognize proc
# declarations within classes.
#
foreach cmd {public protected private} {
    auto_mkindex_parser::command $cmd {args} {
        variable parser
        $parser eval $args
    }
}

# ----------------------------------------------------------------------
# auto_import
# ----------------------------------------------------------------------
# This procedure overrides the usual "auto_import" function in the
# Tcl library.  It is invoked during "namespace import" to make see
# if the imported commands reside in an autoloaded library.  If so,
# stubs are created to represent the commands.  Executing a stub
# later on causes the real implementation to be autoloaded.
#
# Arguments -
# pattern	The pattern of commands being imported (like "foo::*")
#               a canonical namespace as returned by [namespace current]

proc auto_import {pattern} {
    global auto_index

    set ns [uplevel namespace current]
    set patternList [auto_qualify $pattern $ns]

    auto_load_index

    foreach pattern $patternList {
        foreach name [array names auto_index $pattern] {
            if {"" == [info commands $name]} {
                ::itcl::import::stub create $name
            }
        }
    }
}
@


1.6
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.4 2001/04/14 21:35:54 davygrvy Exp $
d53 5
a57 6
foreach cmd {itcl::class itcl_class} {
    auto_mkindex_parser::command $cmd {name body} {
        variable index
        variable scriptFile
        append index "set [list auto_index([fullname $name])]"
        append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
d59 5
a63 6
        variable parser
        variable contextStack
        set contextStack [linsert $contextStack 0 $name]
        $parser eval $body
        set contextStack [lrange $contextStack 1 end]
    }
@


1.5
log
@Updated to itcl 3.2.1.
@
text
@@


1.4
log
@touched all sources to ease next import
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.2.172.1 2001/05/18 02:21:43 mdejong Exp $
d19 4
d38 1
a38 1
        "itcl::delete object $cmd; list"]
a48 1
# RED HAT LOCAL: don't require namespace qualifier
d53 1
a53 1
foreach cmd {itcl::class itcl_class class} {
a67 1
# RED HAT LOCAL: don't require namespace qualifier
d72 5
a76 7
foreach cmd {itcl::body body} {
    auto_mkindex_parser::command $cmd {name arglist body} {
        variable index
        variable scriptFile
        append index "set [list auto_index([fullname $name])]"
        append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
    }
a78 1
# RED HAT LOCAL: don't require namespace qualifier
d83 5
a87 7
foreach cmd {itcl::configbody configbody} {
    auto_mkindex_parser::command $cmd {name body} {
        variable index
        variable scriptFile
        append index "set [list auto_index([fullname $name])]"
        append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
    }
a89 1
# RED HAT LOCAL: don't require namespace qualifier
d94 5
a98 7
foreach cmd {itcl::ensemble ensemble} {
    auto_mkindex_parser::command $cmd {name {body ""}} {
        variable index
        variable scriptFile
        append index "set [list auto_index([fullname $name])]"
        append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
    }
a100 2
# RED HAT LOCAL: treat public differently, since we do care about
#                public procs
d109 1
a109 1
foreach cmd {protected private} {
a115 23
# RED HAT LOCAL: When the user has used "public {...}" (llength $args == 1),
#                we must eval $args again into its component statements so
#                that we look at every line in the "body". Otherwise,
#                we'll be looking for the contents of the "{...}" as a
#                command, which is funny business.
auto_mkindex_parser::command public {args} {
    variable parser
    if {[llength $args] == 1} {
        eval $parser eval $args
    } else {
        $parser eval $args
    }
}

# RED HAT LOCAL
# This version of auto_import does not work, because it relies
# WHOLLY on the tclIndex files, but the tclIndex files have no
# notion of what the export list for a namespace is.  So at the 
# time you do "namespace import" the export list is empty, and
# so nothing is imported.
# Until that is fixed, it is best just to go back to the original
# Tcl version of auto_import...

d129 2
a130 2
#proc auto_import {pattern} {
#    global auto_index
d132 2
a133 2
#     set ns [uplevel namespace current]
#     set patternList [auto_qualify $pattern $ns]
d135 1
a135 1
#     auto_load_index
d137 8
a144 8
#     foreach pattern $patternList {
#         foreach name [array names auto_index $pattern] {
#             if {"" == [info commands $name]} {
#                 ::itcl::import::stub create $name
#             }
#         }
#     }
# }
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@        * itcl/library/itcl.tcl: Add recognition for "class", "body",
        "ensemble", and "configbody" without the "itcl::" namespace
        qualifier.
        (auto_mkindex_parser::command public): If given an argument
        list of just one item, re-eval it again so that the whole
        thing is not interpreted as one humongous command.
@
text
@@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.2 1999/01/27 18:56:08 jingham Exp $
d30 1
a30 1
    set ptr [uplevel eval [list $class $name] $args]
d45 1
d50 1
a50 1
foreach cmd {itcl::class itcl_class} {
d65 1
d70 7
a76 5
auto_mkindex_parser::command itcl::body {name arglist body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
d79 1
d84 7
a90 5
auto_mkindex_parser::command itcl::configbody {name body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
d93 1
d98 7
a104 5
auto_mkindex_parser::command itcl::ensemble {name {body ""}} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
d107 2
d117 1
a117 1
foreach cmd {public protected private} {
d124 15
a138 1
# CYGNUS LOCAL
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.2.172.1 2001/05/18 02:21:43 mdejong Exp $
d30 1
a30 1
    set ptr [uplevel [list $class $name] $args]
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.4 2001/04/14 21:35:54 davygrvy Exp $
a18 4
proc ::itcl::delete_helper { name args } {
    ::itcl::delete object $name
}

d34 1
a34 1
        "::itcl::delete_helper $cmd"]
d112 9
d134 2
a135 2
proc auto_import {pattern} {
    global auto_index
d137 2
a138 2
    set ns [uplevel namespace current]
    set patternList [auto_qualify $pattern $ns]
d140 1
a140 1
    auto_load_index
d142 8
a149 8
    foreach pattern $patternList {
        foreach name [array names auto_index $pattern] {
            if {"" == [info commands $name]} {
                ::itcl::import::stub create $name
            }
        }
    }
}
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d12 1
a12 1
#      RCS:  $Id: itcl.tcl,v 1.5 2002/09/29 19:30:27 davygrvy Exp $
d53 6
a58 5
auto_mkindex_parser::command itcl::class {name body} {
    variable index
    variable scriptFile
    append index "set [list auto_index([fullname $name])]"
    append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
d60 6
a65 5
    variable parser
    variable contextStack
    set contextStack [linsert $contextStack 0 $name]
    $parser eval $body
    set contextStack [lrange $contextStack 1 end]
@


