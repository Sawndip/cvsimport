head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.24;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.27;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.33;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.42;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.39.59;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#
# Tests for "body" and "configbody" commands
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: body.test,v 1.4 2004/02/12 18:09:50 davygrvy Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.1
    namespace import -force ::tcltest::test
}

::tcltest::loadTestedCommands

# ----------------------------------------------------------------------
#  Test "body" command
# ----------------------------------------------------------------------
test body-1.1 {define a class with missing bodies and arg lists} {
    itcl::class test_body {
        constructor {args} {}
        destructor {}

        method any
        method zero {}
        method one {x}
        method two {x y}
        method defvals {x {y 0} {z 1}}
        method varargs {x args}

        method override {mesg} {
            return "override: $mesg"
        }
    }
} ""

test body-1.2 {cannot use methods without a body} {
    test_body #auto
    list [catch "test_body0 any" msg] $msg
} {1 {member function "::test_body::any" is not defined and cannot be autoloaded}}

test body-1.3 {check syntax of "body" command} {
    list [catch "itcl::body test_body::any" msg] $msg
} {1 {wrong # args: should be "itcl::body class::func arglist body"}}

test body-1.4 {make sure members are found correctly} {
    list [catch "itcl::body test_body::xyzzyxyzzyxyzzy {} {}" msg] $msg
} {1 {function "xyzzyxyzzyxyzzy" is not defined in class "::test_body"}}

test body-1.5a {members without an argument list can have any args} {
    itcl::body test_body::any {} {return "any"}
    list [catch "test_body0 any" msg] $msg
} {0 any}

test body-1.5b {members without an argument list can have any args} {
    itcl::body test_body::any {x} {return "any: $x"}
    list [catch "test_body0 any 1" msg] $msg
} {0 {any: 1}}

test body-1.5c {members without an argument list can have any args} {
    itcl::body test_body::any {x {y 2}} {return "any: $x $y"}
    list [catch "test_body0 any 1" msg] $msg
} {0 {any: 1 2}}

test body-1.6a {an empty argument list must stay empty} {
    list [catch {itcl::body test_body::zero {x y} {return "zero: $x $y"}} msg] $msg
} {1 {argument list changed for function "::test_body::zero": should be ""}}

test body-1.6b {an empty argument list must stay empty} {
    list [catch {itcl::body test_body::zero {} {return "zero"}} msg] $msg
} {0 {}}

test body-1.7a {preserve argument list:  fixed arguments} {
    list [catch {itcl::body test_body::one {x y} {return "one: $x $y"}} msg] $msg
} {1 {argument list changed for function "::test_body::one": should be "x"}}

test body-1.7b {preserve argument list:  fixed arguments} {
    list [catch {itcl::body test_body::one {a} {return "one: $a"}} msg] $msg
} {0 {}}

test body-1.7c {preserve argument list:  fixed arguments} {
    list [catch "test_body0 one 1.0" msg] $msg
} {0 {one: 1.0}}

test body-1.8a {preserve argument list:  fixed arguments} {
    list [catch {itcl::body test_body::two {x} {return "two: $x"}} msg] $msg
} {1 {argument list changed for function "::test_body::two": should be "x y"}}

test body-1.8b {preserve argument list:  fixed arguments} {
    list [catch {itcl::body test_body::two {a b} {return "two: $a $b"}} msg] $msg
} {0 {}}

test body-1.8c {preserve argument list:  fixed arguments} {
    list [catch "test_body0 two 2.0 3.0" msg] $msg
} {0 {two: 2.0 3.0}}

test body-1.9a {preserve argument list:  default arguments} {
    list [catch {itcl::body test_body::defvals {x} {}} msg] $msg
} {1 {argument list changed for function "::test_body::defvals": should be "x {y 0} {z 1}"}}

test body-1.9b {preserve argument list:  default arguments} {
    list [catch {itcl::body test_body::defvals {a {b 0} {c 2}} {}} msg] $msg
} {1 {argument list changed for function "::test_body::defvals": should be "x {y 0} {z 1}"}}

test body-1.9c {preserve argument list:  default arguments} {
    list [catch {itcl::body test_body::defvals {a {b 0} {c 1}} {}} msg] $msg
} {0 {}}

test body-1.10a {preserve argument list:  variable arguments} {
    list [catch {itcl::body test_body::varargs {} {}} msg] $msg
} {1 {argument list changed for function "::test_body::varargs": should be "x args"}}

test body-1.10b {preserve argument list:  variable arguments} {
    list [catch {itcl::body test_body::varargs {a} {}} msg] $msg
} {0 {}}

test body-1.10c {preserve argument list:  variable arguments} {
    list [catch {itcl::body test_body::varargs {a b c} {}} msg] $msg
} {0 {}}

test body-1.11 {redefined body really does change} {
    list [test_body0 override "test #1"] \
         [itcl::body test_body::override {text} {return "new: $text"}] \
         [test_body0 override "test #2"]
} {{override: test #1} {} {new: test #2}}

# ----------------------------------------------------------------------
#  Test "body" command with inheritance
# ----------------------------------------------------------------------
test body-2.1 {inherit from a class with missing bodies} {
    itcl::class test_ibody {
        inherit test_body
        method zero {}
    }
    test_ibody #auto
} {test_ibody0}

test body-2.2 {redefine a method in a derived class} {
    itcl::body test_ibody::zero {} {return "ibody zero"}
    list [test_ibody0 info function zero] \
         [test_ibody0 info function test_body::zero]
} {{public method ::test_ibody::zero {} {return "ibody zero"}} {public method ::test_body::zero {} {return "zero"}}}

test body-2.3 {try to redefine a method that was not declared} {
    list [catch {itcl::body test_ibody::one {x} {return "new"}} msg] $msg
} {1 {function "one" is not defined in class "::test_ibody"}}

# ----------------------------------------------------------------------
#  Test "configbody" command
# ----------------------------------------------------------------------
test body-3.1 {define a class with public variables} {
    itcl::class test_cbody {
        private variable priv
        protected variable prot

        public variable option {} {
            lappend messages "option: $option"
        }
        public variable nocode {}
        public common messages
    }
} ""

test body-3.2 {check syntax of "configbody" command} {
    list [catch "itcl::configbody test_cbody::option" msg] $msg
} {1 {wrong # args: should be "itcl::configbody class::option body"}}

test body-3.3 {make sure that members are found correctly} {
    list [catch "itcl::configbody test_cbody::xyzzy {}" msg] $msg
} {1 {option "xyzzy" is not defined in class "::test_cbody"}}

test body-3.4 {private variables have no config code} {
    list [catch "itcl::configbody test_cbody::priv {bogus}" msg] $msg
} {1 {option "::test_cbody::priv" is not a public configuration option}}

test body-3.5 {protected variables have no config code} {
    list [catch "itcl::configbody test_cbody::prot {bogus}" msg] $msg
} {1 {option "::test_cbody::prot" is not a public configuration option}}

test body-3.6 {can use public variables without a body} {
    test_cbody #auto
    list [catch "test_cbody0 configure -nocode 1" msg] $msg
} {0 {}}

test body-3.7 {redefined body really does change} {
    list [test_cbody0 configure -option "hello"] \
         [itcl::configbody test_cbody::option {lappend messages "new: $option"}] \
         [test_cbody0 configure -option "goodbye"] \
         [set test_cbody::messages] \
} {{} {} {} {{option: hello} {new: goodbye}}}

# ----------------------------------------------------------------------
#  Test "configbody" command with inheritance
# ----------------------------------------------------------------------
test body-4.1 {inherit from a class with missing config bodies} {
    itcl::class test_icbody {
        inherit test_cbody
        public variable option "icbody"
    }
    test_icbody #auto
} {test_icbody0}

test body-4.2 {redefine a body in a derived class} {
    itcl::configbody test_icbody::option {lappend messages "test_icbody: $option"}
    list [test_icbody0 info variable option] \
         [test_icbody0 info variable test_cbody::option]
} {{public variable ::test_icbody::option icbody {lappend messages "test_icbody: $option"} icbody} {public variable ::test_cbody::option {} {lappend messages "new: $option"} {}}}

test body-4.3 {try to redefine a body for a variable that was not declared} {
    list [catch {itcl::configbody test_icbody::nocode {return "new"}} msg] $msg
} {1 {option "nocode" is not defined in class "::test_icbody"}}

# ----------------------------------------------------------------------
#  Clean up
# ----------------------------------------------------------------------
itcl::delete class test_body test_cbody

::tcltest::cleanupTests
return
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.3 2000/06/01 20:34:34 wart Exp $
d16 4
a19 2
package require tcltest
namespace import -force ::tcltest::*
d21 1
a21 3
if {[string compare test [info procs test]] == 1} then {source defs}

package require Itcl
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.2 1999/01/27 18:56:08 jingham Exp $
d16 3
d21 2
d27 1
a27 1
    class test_body {
d50 2
a51 2
    list [catch "body test_body::any" msg] $msg
} {1 {wrong # args: should be "body class::func arglist body"}}
d54 1
a54 1
    list [catch "body test_body::xyzzyxyzzyxyzzy {} {}" msg] $msg
d58 1
a58 1
    body test_body::any {} {return "any"}
d63 1
a63 1
    body test_body::any {x} {return "any: $x"}
d68 1
a68 1
    body test_body::any {x {y 2}} {return "any: $x $y"}
d73 1
a73 1
    list [catch {body test_body::zero {x y} {return "zero: $x $y"}} msg] $msg
d77 1
a77 1
    list [catch {body test_body::zero {} {return "zero"}} msg] $msg
d81 1
a81 1
    list [catch {body test_body::one {x y} {return "one: $x $y"}} msg] $msg
d85 1
a85 1
    list [catch {body test_body::one {a} {return "one: $a"}} msg] $msg
d93 1
a93 1
    list [catch {body test_body::two {x} {return "two: $x"}} msg] $msg
d97 1
a97 1
    list [catch {body test_body::two {a b} {return "two: $a $b"}} msg] $msg
d105 1
a105 1
    list [catch {body test_body::defvals {x} {}} msg] $msg
d109 1
a109 1
    list [catch {body test_body::defvals {a {b 0} {c 2}} {}} msg] $msg
d113 1
a113 1
    list [catch {body test_body::defvals {a {b 0} {c 1}} {}} msg] $msg
d117 1
a117 1
    list [catch {body test_body::varargs {} {}} msg] $msg
d121 1
a121 1
    list [catch {body test_body::varargs {a} {}} msg] $msg
d125 1
a125 1
    list [catch {body test_body::varargs {a b c} {}} msg] $msg
d130 1
a130 1
         [body test_body::override {text} {return "new: $text"}] \
d138 1
a138 1
    class test_ibody {
d146 1
a146 1
    body test_ibody::zero {} {return "ibody zero"}
d152 1
a152 1
    list [catch {body test_ibody::one {x} {return "new"}} msg] $msg
d159 1
a159 1
    class test_cbody {
d172 2
a173 2
    list [catch "configbody test_cbody::option" msg] $msg
} {1 {wrong # args: should be "configbody class::option body"}}
d176 1
a176 1
    list [catch "configbody test_cbody::xyzzy {}" msg] $msg
d180 1
a180 1
    list [catch "configbody test_cbody::priv {bogus}" msg] $msg
d184 1
a184 1
    list [catch "configbody test_cbody::prot {bogus}" msg] $msg
d194 1
a194 1
         [configbody test_cbody::option {lappend messages "new: $option"}] \
d203 1
a203 1
    class test_icbody {
d211 1
a211 1
    configbody test_icbody::option {lappend messages "test_icbody: $option"}
d217 1
a217 1
    list [catch {configbody test_icbody::nocode {return "new"}} msg] $msg
d223 4
a226 1
delete class test_body test_cbody
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
a15 3
package require tcltest
namespace import -force ::tcltest::*

a17 2
package require Itcl

d22 1
a22 1
    itcl::class test_body {
d45 2
a46 2
    list [catch "itcl::body test_body::any" msg] $msg
} {1 {wrong # args: should be "itcl::body class::func arglist body"}}
d49 1
a49 1
    list [catch "itcl::body test_body::xyzzyxyzzyxyzzy {} {}" msg] $msg
d53 1
a53 1
    itcl::body test_body::any {} {return "any"}
d58 1
a58 1
    itcl::body test_body::any {x} {return "any: $x"}
d63 1
a63 1
    itcl::body test_body::any {x {y 2}} {return "any: $x $y"}
d68 1
a68 1
    list [catch {itcl::body test_body::zero {x y} {return "zero: $x $y"}} msg] $msg
d72 1
a72 1
    list [catch {itcl::body test_body::zero {} {return "zero"}} msg] $msg
d76 1
a76 1
    list [catch {itcl::body test_body::one {x y} {return "one: $x $y"}} msg] $msg
d80 1
a80 1
    list [catch {itcl::body test_body::one {a} {return "one: $a"}} msg] $msg
d88 1
a88 1
    list [catch {itcl::body test_body::two {x} {return "two: $x"}} msg] $msg
d92 1
a92 1
    list [catch {itcl::body test_body::two {a b} {return "two: $a $b"}} msg] $msg
d100 1
a100 1
    list [catch {itcl::body test_body::defvals {x} {}} msg] $msg
d104 1
a104 1
    list [catch {itcl::body test_body::defvals {a {b 0} {c 2}} {}} msg] $msg
d108 1
a108 1
    list [catch {itcl::body test_body::defvals {a {b 0} {c 1}} {}} msg] $msg
d112 1
a112 1
    list [catch {itcl::body test_body::varargs {} {}} msg] $msg
d116 1
a116 1
    list [catch {itcl::body test_body::varargs {a} {}} msg] $msg
d120 1
a120 1
    list [catch {itcl::body test_body::varargs {a b c} {}} msg] $msg
d125 1
a125 1
         [itcl::body test_body::override {text} {return "new: $text"}] \
d133 1
a133 1
    itcl::class test_ibody {
d141 1
a141 1
    itcl::body test_ibody::zero {} {return "ibody zero"}
d147 1
a147 1
    list [catch {itcl::body test_ibody::one {x} {return "new"}} msg] $msg
d154 1
a154 1
    itcl::class test_cbody {
d167 2
a168 2
    list [catch "itcl::configbody test_cbody::option" msg] $msg
} {1 {wrong # args: should be "itcl::configbody class::option body"}}
d171 1
a171 1
    list [catch "itcl::configbody test_cbody::xyzzy {}" msg] $msg
d175 1
a175 1
    list [catch "itcl::configbody test_cbody::priv {bogus}" msg] $msg
d179 1
a179 1
    list [catch "itcl::configbody test_cbody::prot {bogus}" msg] $msg
d189 1
a189 1
         [itcl::configbody test_cbody::option {lappend messages "new: $option"}] \
d198 1
a198 1
    itcl::class test_icbody {
d206 1
a206 1
    itcl::configbody test_icbody::option {lappend messages "test_icbody: $option"}
d212 1
a212 1
    list [catch {itcl::configbody test_icbody::nocode {return "new"}} msg] $msg
d218 1
a218 4
itcl::delete class test_body test_cbody

::tcltest::cleanupTests
return
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.3 2000/06/01 20:34:34 wart Exp $
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d9 1
a9 1
#      RCS:  $Id: body.test,v 1.4 2004/02/12 18:09:50 davygrvy Exp $
d16 2
a17 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.1
    namespace import -force ::tcltest::test
}
d19 3
a21 1
::tcltest::loadTestedCommands
@


