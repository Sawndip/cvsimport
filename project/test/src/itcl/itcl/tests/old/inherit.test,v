head	1.5;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.12
	gdb_7_5-branch:1.5.0.10
	gdb_7_4-branch:1.5.0.8
	gdb_7_3-branch:1.5.0.6
	gdb_7_1-branch:1.5.0.4
	gdb_7_0-branch:1.5.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.3
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.24;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.28;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.33;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.43;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@#
# Tests for inheritance and scope handling
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: inherit.test,v 1.1 1998/07/27 18:41:25 stanton Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

# ----------------------------------------------------------------------
#  MULTIPLE BASE-CLASS ERROR DETECTION
# ----------------------------------------------------------------------
test {Cannot inherit from the same base class more than once} {
	catch "VirtualErr" errmsg
	set errmsg
} {
	[string match {*class "::VirtualErr" inherits base class "::Foo" more than once:
  VirtualErr->Mongrel->FooBar->Foo
  VirtualErr->Foo
  VirtualErr->BarFoo->Foo} $result]
}

# ----------------------------------------------------------------------
#  CONSTRUCTION
# ----------------------------------------------------------------------
test {Constructors should be invoked implicitly} {
	set WATCH ""
	concat [Mongrel m] / $WATCH
} {
	$result == "m / ::Geek ::Bar ::Foo ::FooBar ::Mongrel"
}

test {Initialization of shadowed variables works properly} {
	concat [m info public blit -value] / [m info public Foo::blit -value]
} {
	$result == "nonnull / <undefined>"
}

# ----------------------------------------------------------------------
#  PUBLIC VARIABLES
# ----------------------------------------------------------------------
test {Inherited "config" method works on derived classes} {
	m config -blit xyz -Foo::blit pdq
} {
	$result == "Mongrel::blit Foo::blit"
}

test {Inherited "config" method works on derived classes} {
	m config -blit xyz -Foo::blit pdq
	concat [m info public blit -value] / [m info public Foo::blit -value]
} {
	$result == "xyz / pdq"
}

test {Inherited "config" method works on derived classes} {
	m config -tag #0000
} {
	$result == "Mongrel::tag"
}

# ----------------------------------------------------------------------
#  INHERITANCE INFO
# ----------------------------------------------------------------------
test {Info: class} {
	m info class
} {
	$result == "::Mongrel"
}

test {Info: inherit} {
	m info inherit
} {
	$result == "::FooBar ::Geek"
}

test {Info: heritage} {
	m info heritage
} {
	$result == "::Mongrel ::FooBar ::Foo ::Bar ::Geek"
}

test {Built-in "isa" method} {
	set status 1
	foreach c [m info heritage] {
		set status [expr {$status && [m isa $c]}]
	}
	set status
} {
	$result == 1
}

test {Built-in "isa" method} {
    itcl_class Watermelon {}
	m isa Watermelon
} {
	$result == 0
}

# ----------------------------------------------------------------------
#  SCOPE MANIPULATION
# ----------------------------------------------------------------------
test {commands normally execute in the scope of their class} {
	m Foo::do {namespace current}
} {
	$result == "Foo says '::Foo'"
}

test {"virtual" command moves scope to most specific class} {
	m Foo::do {virtual namespace current}
} {
	$result == "Foo says '::Mongrel'"
}

test {"previous" command moves scope upward in hierarchy} {
	m do {virtual previous namespace current}
} {
	$result == "Foo says '::FooBar'"
}

test {"previous" command can be chained} {
	m do {virtual previous previous namespace current}
} {
	$result == "Foo says '::Foo'"
}

# ----------------------------------------------------------------------
#  METHOD INVOCATION
# ----------------------------------------------------------------------
test {Simple method names are assigned based on heritage} {
	m do {concat "$this ([virtual info class]) at scope [namespace current]"}
} {
	$result == "Foo says '::m (Mongrel) at scope ::Foo'"
}

test {Explicit scoping can be used to reach shadowed members} {
	m Geek::do {concat "$this ([virtual info class]) at scope [namespace current]"}
} {
	$result == "Geek says '::m (Mongrel) at scope ::Geek'"
}

test {Methods execute in local scope of class, e.g., Foo::do} {
	m config -blit abc -Foo::blit def
	m Foo::do {set blit xyz}
	concat [m info public blit -value] / [m info public Foo::blit -value]
} {
	$result == "abc / xyz"
}

# ----------------------------------------------------------------------
#  DESTRUCTION
# ----------------------------------------------------------------------
test {Destructors should be invoked implicitly} {
	set WATCH ""
	concat [m delete] / $WATCH
} {
	$result == "/ ::Mongrel ::FooBar ::Foo ::Bar ::Geek"
}

# ----------------------------------------------------------------------
#  OBJECT INFO
# ----------------------------------------------------------------------
foreach obj [itcl_info objects] {
	$obj delete
}
Mongrel m
FooBar fb
Foo f
Geek g

test {Object queries can be restricted by object name} {
	itcl_info objects f*
} {
	[test_cmp_lists $result {f fb}]
}

test {Object queries can be restricted to specific classes} {
	itcl_info objects -class Foo
} {
	$result == "f"
}

test {Object queries can be restricted by object heritage} {
	itcl_info objects -isa Foo
} {
	[test_cmp_lists $result {m f fb}]
}

test {Object queries can be restricted by object name / specific classes} {
	itcl_info objects f* -class Foo
} {
	$result == "f"
}

test {Object queries can be restricted by object name / object heritage} {
	itcl_info objects f* -isa Foo
} {
	[test_cmp_lists $result {f fb}]
}

# ----------------------------------------------------------------------
#  ERROR HANDLING ACROSS CLASS BOUNDARIES
# ----------------------------------------------------------------------
Mongrel m1
FooBar fb2

test {Errors and detected and reported across class boundaries} {
	set status [catch {m1 do {fb2 do {error "test"}}} mesg]
	format "$mesg $status"
} {
	$result == "test 1"
}

test {Stack trace unwinds properly across class boundaries} {
	catch {m1 do {fb2 do {error "test"}}} mesg
	format "$errorInfo"
} {
	$result == {test
    while executing
"error "test""
    ("eval" body line 1)
    invoked from within
"eval $cmds"
    invoked from within
"return "Foo says '[eval $cmds]..."
    (object "::fb2" method "::Foo::do" body line 2)
    invoked from within
"fb2 do {error "test"}"
    ("eval" body line 1)
    invoked from within
"eval $cmds"
    invoked from within
"return "Foo says '[eval $cmds]..."
    (object "::m1" method "::Foo::do" body line 2)
    invoked from within
"m1 do {fb2 do {error "test"}}"}
}

test {Stack trace unwinds properly across class boundaries} {
	catch {m1 do {fb2 do {error "test" "some error"}}} mesg
	format "$errorInfo"
} {
	$result == {some error
    ("eval" body line 1)
    invoked from within
"eval $cmds"
    invoked from within
"return "Foo says '[eval $cmds]..."
    (object "::fb2" method "::Foo::do" body line 2)
    invoked from within
"fb2 do {error "test" "some error"}"
    ("eval" body line 1)
    invoked from within
"eval $cmds"
    invoked from within
"return "Foo says '[eval $cmds]..."
    (object "::m1" method "::Foo::do" body line 2)
    invoked from within
"m1 do {fb2 do {error "test" "some error"}}"}
}

test {Error codes are preserved across class boundaries} {
	catch {m1 do {fb2 do {error "test" "some error" CODE-BLUE}}} mesg
	format "$errorCode"
} {
	$result == "CODE-BLUE"
}
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
#      RCS:  $Id: inherit.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#      RCS:  $Id: inherit.test,v 1.2 1999/01/27 18:56:10 jingham Exp $
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: inherit.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d9 1
a9 1
#      RCS:  $Id: inherit.test,v 1.1 1998/07/27 18:41:25 stanton Exp $
@


