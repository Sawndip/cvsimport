head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.45;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.24;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.28;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.33;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.05;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.43;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.39.59;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@#
# Tests for code/scope commands
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: scope.test,v 1.4 2004/02/12 18:09:50 davygrvy Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.1
    namespace import -force ::tcltest::test
}

::tcltest::loadTestedCommands

# ----------------------------------------------------------------------
#  Syntax of the "scope" command
# ----------------------------------------------------------------------
test scope-1.1 {scope command takes one argument} {
    list [catch {itcl::scope} msg] $msg [catch {itcl::scope x y} msg] $msg
} {1 {wrong # args: should be "itcl::scope varname"} 1 {wrong # args: should be "itcl::scope varname"}}

test scope-1.2 {argument to scope command must be a variable} {
    variable test_scope_var 0
    list [catch {itcl::scope xyzzy} msg] $msg \
         [catch {itcl::scope test_scope_var} msg] $msg
} {1 {variable "xyzzy" not found in namespace "::"} 0 ::test_scope_var}

test scope-1.3 {if variable is already fully qualified, scope does nothing} {
    list [itcl::scope ::xyzzy] [itcl::scope ::test_scope_var]
} {::xyzzy ::test_scope_var}

test scope-1.4 {scope command returns fully qualified name} {
    namespace eval test_scope_ns {
        namespace eval child {
            variable v1 0
            itcl::scope v1
        }
    }
} {::test_scope_ns::child::v1}

namespace delete test_scope_ns
unset test_scope_var

# ----------------------------------------------------------------------
#  Syntax of the "code" command
# ----------------------------------------------------------------------
test scope-2.1 {code command takes at least one argument} {
    list [catch {itcl::code} msg] $msg
} {1 {wrong # args: should be "itcl::code ?-namespace name? command ?arg arg...?"}}

test scope-2.2 {code command with one argument} {
    itcl::code arg1
} {namespace inscope :: arg1}

test scope-2.3 {code command with many arguments} {
    list [itcl::code arg1 arg2] [itcl::code arg1 arg2 arg3 arg4]
} {{namespace inscope :: {arg1 arg2}} {namespace inscope :: {arg1 arg2 arg3 arg4}}}

test scope-2.4 {code command appends arguments as list elements} {
    list [itcl::code "foo bar"] \
         [itcl::code "foo bar" "hello, world!" "one, two, three"]
} {{namespace inscope :: {foo bar}} {namespace inscope :: {{foo bar} {hello, world!} {one, two, three}}}}

test scope-2.5 {code command inside code command} {
    itcl::code [itcl::code arg1 arg2] arg3
} {namespace inscope :: {{namespace inscope :: {arg1 arg2}} arg3}}

test scope-2.6 {code command returns fully qualified names} {
    namespace eval test_scope_ns {
        namespace eval child {
            itcl::code foo bar baz
        }
    }
} {namespace inscope ::test_scope_ns::child {foo bar baz}}

test scope-2.7 {code command lets you specify a namespace} {
    list [catch {itcl::code -namespace xyzzy arg1 arg2} msg] $msg \
         [catch {itcl::code -namespace test_scope_ns::child arg1 arg2} msg] $msg
} {1 {unknown namespace "xyzzy"} 0 {namespace inscope ::test_scope_ns::child {arg1 arg2}}}

test scope-2.8 {last namespace wins} {
    itcl::code -namespace test_scope_ns::child -namespace test_scope_ns arg1
} {namespace inscope ::test_scope_ns arg1}

test scope-2.9 {"--" terminates switches} {
    list [catch {itcl::code -namespace test_scope_ns -foo -bar} msg] $msg \
         [catch {itcl::code -namespace test_scope_ns -- -foo -bar} msg] $msg
    
} {1 {bad option "-foo": should be -namespace or --} 0 {namespace inscope ::test_scope_ns {-foo -bar}}}

namespace delete test_scope_ns

# ----------------------------------------------------------------------
#  Test code/scope commands in a class
# ----------------------------------------------------------------------
test scope-3.1 {define simple classes with things to export} {
    itcl::class test_scope {
        private variable priv "private-value"
        protected variable prov "protected-value"
        public variable pubv "public-value"

        private common pric "private-common-value"
        protected common proc "protected-common-value"
        public common pubc "public-common-value"

        variable varray
        common carray

        method mcontext {args} {
            return [eval $args]
        }
        proc pcontext {args} {
            return [eval $args]
        }

        private method prim {args} {
            return "prim: $args"
        }
        protected method prom {args} {
            return "prom: $args"
        }
        public method pubm {args} {
            return "pubm: $args"
        }
    }
    test_scope #auto
} {test_scope0}

test scope-3.2 {code command captures only class context} {
    list [test_scope0 mcontext itcl::code arg1 arg2] \
         [test_scope::pcontext itcl::code arg1 arg2]
} {{namespace inscope ::test_scope {arg1 arg2}} {namespace inscope ::test_scope {arg1 arg2}}}

test scope-3.3 {scope command captures class and object context} {
    list [test_scope0 mcontext itcl::scope priv] \
         [test_scope::pcontext itcl::scope pric]
} {{@@itcl ::test_scope0 ::test_scope::priv} ::test_scope::pric}

test scope-3.4 {scope command must recognize variable} {
    list [catch {test_scope0 mcontext itcl::scope xyzzy} msg] $msg
} {1 {variable "xyzzy" not found in class "::test_scope"}}

test scope-3.5 {scope command provides access to instance variables} {
    set result ""
    foreach vname {priv prov pubv} {
        lappend result [test_scope0 info variable $vname]
        set var [test_scope0 mcontext itcl::scope $vname]
        set $var "$vname-new"
        lappend result [test_scope0 info variable $vname]
    }
    set result
} {{private variable ::test_scope::priv private-value private-value} {private variable ::test_scope::priv private-value priv-new} {protected variable ::test_scope::prov protected-value protected-value} {protected variable ::test_scope::prov protected-value prov-new} {public variable ::test_scope::pubv public-value {} public-value} {public variable ::test_scope::pubv public-value {} pubv-new}}

test scope-3.6 {scope command provides access to common variables} {
    set result ""
    foreach vname {pric proc pubc} {
        lappend result [test_scope0 info variable $vname]
        set var [test_scope0 mcontext itcl::scope $vname]
        set $var "$vname-new"
        lappend result [test_scope0 info variable $vname]
    }
    set result
} {{private common ::test_scope::pric private-common-value private-common-value} {private common ::test_scope::pric private-common-value pric-new} {protected common ::test_scope::proc protected-common-value protected-common-value} {protected common ::test_scope::proc protected-common-value proc-new} {public common ::test_scope::pubc public-common-value public-common-value} {public common ::test_scope::pubc public-common-value pubc-new}}

test scope-3.7 {code command provides access to methods} {
    set result ""
    foreach mname {prim prom pubm} {
        set cmd [test_scope0 mcontext eval itcl::code \$this $mname]
        lappend result $cmd [$cmd 1 2 3]
    }
    set result
} {{namespace inscope ::test_scope {::test_scope0 prim}} {prim: 1 2 3} {namespace inscope ::test_scope {::test_scope0 prom}} {prom: 1 2 3} {namespace inscope ::test_scope {::test_scope0 pubm}} {pubm: 1 2 3}}

test scope-3.8 {scope command allows access to slots in an array} {
    test_scope0 mcontext set varray(0) "defined"
    test_scope::pcontext set carray(0) "defined"
    list [catch {test_scope0 mcontext itcl::scope varray(0)} msg] $msg \
         [catch {test_scope0 mcontext itcl::scope varray(1)} msg] $msg \
         [catch {test_scope::pcontext itcl::scope carray(0)} msg] $msg \
         [catch {test_scope::pcontext itcl::scope carray(1)} msg] $msg
} {0 {@@itcl ::test_scope0 ::test_scope::varray(0)} 0 {@@itcl ::test_scope0 ::test_scope::varray(1)} 0 ::test_scope::carray(0) 0 ::test_scope::carray(1)}

itcl::delete class test_scope

# ----------------------------------------------------------------------
#  Test code/scope commands in a namespace
# ----------------------------------------------------------------------
test scope-4.1 {define simple namespace with things to export} {
    namespace eval test_scope_ns {
        variable array
        proc pcontext {args} {
            return [eval $args]
        }
    }
    namespace children :: ::test_scope_ns
} {::test_scope_ns}

test scope-4.2 {scope command allows access to slots in an array} {
    test_scope_ns::pcontext set array(0) "defined"
    list [catch {test_scope_ns::pcontext itcl::scope array(0)} msg] $msg \
         [catch {test_scope_ns::pcontext itcl::scope array(1)} msg] $msg
} {0 ::test_scope_ns::array(0) 0 ::test_scope_ns::array(1)}

namespace delete test_scope_ns

::tcltest::cleanupTests
return
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.3 2000/06/01 20:34:36 wart Exp $
d16 4
a19 2
package require tcltest
namespace import -force ::tcltest::*
d21 1
a21 3
if {[string compare test [info procs test]] == 1} then {source defs}

package require Itcl
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.2 1999/01/27 18:56:09 jingham Exp $
d16 3
d21 2
d185 4
a188 4
    list [catch {test_scope0 mcontext scope varray(0)} msg] $msg \
         [catch {test_scope0 mcontext scope varray(1)} msg] $msg \
         [catch {test_scope::pcontext scope carray(0)} msg] $msg \
         [catch {test_scope::pcontext scope carray(1)} msg] $msg
d208 2
a209 2
    list [catch {test_scope_ns::pcontext scope array(0)} msg] $msg \
         [catch {test_scope_ns::pcontext scope array(1)} msg] $msg
d213 3
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.2.172.1 2001/05/18 02:21:44 mdejong Exp $
a15 3
package require tcltest
namespace import -force ::tcltest::*

a17 2
package require Itcl

d180 4
a183 4
    list [catch {test_scope0 mcontext itcl::scope varray(0)} msg] $msg \
         [catch {test_scope0 mcontext itcl::scope varray(1)} msg] $msg \
         [catch {test_scope::pcontext itcl::scope carray(0)} msg] $msg \
         [catch {test_scope::pcontext itcl::scope carray(1)} msg] $msg
d203 2
a204 2
    list [catch {test_scope_ns::pcontext itcl::scope array(0)} msg] $msg \
         [catch {test_scope_ns::pcontext itcl::scope array(1)} msg] $msg
a207 3

::tcltest::cleanupTests
return
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.3 2000/06/01 20:34:36 wart Exp $
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d9 1
a9 1
#      RCS:  $Id: scope.test,v 1.4 2004/02/12 18:09:50 davygrvy Exp $
d16 2
a17 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.1
    namespace import -force ::tcltest::test
}
d19 3
a21 1
::tcltest::loadTestedCommands
@


