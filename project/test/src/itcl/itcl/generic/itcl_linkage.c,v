head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.4
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.2
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.3
	gdb_5_3-branch:1.1.1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	ITCL_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.44;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.24;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.27;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.32;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.46;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.22.42.41;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.07.22.20.40.05;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@/*
 * ------------------------------------------------------------------------
 *      PACKAGE:  [incr Tcl]
 *  DESCRIPTION:  Object-Oriented Extensions to Tcl
 *
 *  [incr Tcl] provides object-oriented extensions to Tcl, much as
 *  C++ provides object-oriented extensions to C.  It provides a means
 *  of encapsulating related procedures together with their shared data
 *  in a local namespace that is hidden from the outside world.  It
 *  promotes code re-use through inheritance.  More than anything else,
 *  it encourages better organization of Tcl applications through the
 *  object-oriented paradigm, leading to code that is easier to
 *  understand and maintain.
 *
 *  This part adds a mechanism for integrating C procedures into
 *  [incr Tcl] classes as methods and procs.  Each C procedure must
 *  either be declared via Itcl_RegisterC() or dynamically loaded.
 *
 * ========================================================================
 *  AUTHOR:  Michael J. McLennan
 *           Bell Labs Innovations for Lucent Technologies
 *           mmclennan@@lucent.com
 *           http://www.tcltk.com/itcl
 *
 *     RCS:  $Id: itcl_linkage.c,v 1.2 2003/12/17 02:25:37 davygrvy Exp $
 * ========================================================================
 *           Copyright (c) 1993-1998  Lucent Technologies, Inc.
 * ------------------------------------------------------------------------
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */
#include "itclInt.h"

/*
 *  These records store the pointers for all "RegisterC" functions.
 */
typedef struct ItclCfunc {
    Tcl_CmdProc *argCmdProc;        /* old-style (argc,argv) command handler */
    Tcl_ObjCmdProc *objCmdProc;     /* new (objc,objv) command handler */
    ClientData clientData;          /* client data passed into this function */
    Tcl_CmdDeleteProc *deleteProc;  /* proc called to free clientData */
} ItclCfunc;

static Tcl_HashTable* ItclGetRegisteredProcs _ANSI_ARGS_((Tcl_Interp *interp));
static void ItclFreeC _ANSI_ARGS_((ClientData clientData, Tcl_Interp *interp));


/*
 * ------------------------------------------------------------------------
 *  Itcl_RegisterC()
 *
 *  Used to associate a symbolic name with an (argc,argv) C procedure
 *  that handles a Tcl command.  Procedures that are registered in this
 *  manner can be referenced in the body of an [incr Tcl] class
 *  definition to specify C procedures to acting as methods/procs.
 *  Usually invoked in an initialization routine for an extension,
 *  called out in Tcl_AppInit() at the start of an application.
 *
 *  Each symbolic procedure can have an arbitrary client data value
 *  associated with it.  This value is passed into the command
 *  handler whenever it is invoked.
 *
 *  A symbolic procedure name can be used only once for a given style
 *  (arg/obj) handler.  If the name is defined with an arg-style
 *  handler, it can be redefined with an obj-style handler; or if
 *  the name is defined with an obj-style handler, it can be redefined
 *  with an arg-style handler.  In either case, any previous client
 *  data is discarded and the new client data is remembered.  However,
 *  if a name is redefined to a different handler of the same style,
 *  this procedure returns an error.
 *
 *  Returns TCL_OK on success, or TCL_ERROR (along with an error message
 *  in interp->result) if anything goes wrong.
 * ------------------------------------------------------------------------
 */
int
Itcl_RegisterC(interp, name, proc, clientData, deleteProc)
    Tcl_Interp *interp;             /* interpreter handling this registration */
    CONST char *name;               /* symbolic name for procedure */
    Tcl_CmdProc *proc;              /* procedure handling Tcl command */
    ClientData clientData;          /* client data associated with proc */
    Tcl_CmdDeleteProc *deleteProc;  /* proc called to free up client data */
{
    int newEntry;
    Tcl_HashEntry *entry;
    Tcl_HashTable *procTable;
    ItclCfunc *cfunc;

    /*
     *  Make sure that a proc was specified.
     */
    if (!proc) {
        Tcl_AppendResult(interp, "initialization error: null pointer for ",
            "C procedure \"", name, "\"",
            (char*)NULL);
        return TCL_ERROR;
    }

    /*
     *  Add a new entry for the given procedure.  If an entry with
     *  this name already exists, then make sure that it was defined
     *  with the same proc.
     */
    procTable = ItclGetRegisteredProcs(interp);
    entry = Tcl_CreateHashEntry(procTable, name, &newEntry);
    if (!newEntry) {
        cfunc = (ItclCfunc*)Tcl_GetHashValue(entry);
        if (cfunc->argCmdProc != NULL && cfunc->argCmdProc != proc) {
            Tcl_AppendResult(interp, "initialization error: C procedure ",
                "with name \"", name, "\" already defined",
                (char*)NULL);
            return TCL_ERROR;
        }

        if (cfunc->deleteProc != NULL) {
            (*cfunc->deleteProc)(cfunc->clientData);
        }
    }
    else {
        cfunc = (ItclCfunc*)ckalloc(sizeof(ItclCfunc));
        cfunc->objCmdProc = NULL;
    }

    cfunc->argCmdProc = proc;
    cfunc->clientData = clientData;
    cfunc->deleteProc = deleteProc;

    Tcl_SetHashValue(entry, (ClientData)cfunc);
    return TCL_OK;
}


/*
 * ------------------------------------------------------------------------
 *  Itcl_RegisterObjC()
 *
 *  Used to associate a symbolic name with an (objc,objv) C procedure
 *  that handles a Tcl command.  Procedures that are registered in this
 *  manner can be referenced in the body of an [incr Tcl] class
 *  definition to specify C procedures to acting as methods/procs.
 *  Usually invoked in an initialization routine for an extension,
 *  called out in Tcl_AppInit() at the start of an application.
 *
 *  Each symbolic procedure can have an arbitrary client data value
 *  associated with it.  This value is passed into the command
 *  handler whenever it is invoked.
 *
 *  A symbolic procedure name can be used only once for a given style
 *  (arg/obj) handler.  If the name is defined with an arg-style
 *  handler, it can be redefined with an obj-style handler; or if
 *  the name is defined with an obj-style handler, it can be redefined
 *  with an arg-style handler.  In either case, any previous client
 *  data is discarded and the new client data is remembered.  However,
 *  if a name is redefined to a different handler of the same style,
 *  this procedure returns an error.
 *
 *  Returns TCL_OK on success, or TCL_ERROR (along with an error message
 *  in interp->result) if anything goes wrong.
 * ------------------------------------------------------------------------
 */
int
Itcl_RegisterObjC(interp, name, proc, clientData, deleteProc)
    Tcl_Interp *interp;     /* interpreter handling this registration */
    CONST char *name;       /* symbolic name for procedure */
    Tcl_ObjCmdProc *proc;   /* procedure handling Tcl command */
    ClientData clientData;          /* client data associated with proc */
    Tcl_CmdDeleteProc *deleteProc;  /* proc called to free up client data */
{
    int newEntry;
    Tcl_HashEntry *entry;
    Tcl_HashTable *procTable;
    ItclCfunc *cfunc;

    /*
     *  Make sure that a proc was specified.
     */
    if (!proc) {
        Tcl_AppendResult(interp, "initialization error: null pointer for ",
            "C procedure \"", name, "\"",
            (char*)NULL);
        return TCL_ERROR;
    }

    /*
     *  Add a new entry for the given procedure.  If an entry with
     *  this name already exists, then make sure that it was defined
     *  with the same proc.
     */
    procTable = ItclGetRegisteredProcs(interp);
    entry = Tcl_CreateHashEntry(procTable, name, &newEntry);
    if (!newEntry) {
        cfunc = (ItclCfunc*)Tcl_GetHashValue(entry);
        if (cfunc->objCmdProc != NULL && cfunc->objCmdProc != proc) {
            Tcl_AppendResult(interp, "initialization error: C procedure ",
                "with name \"", name, "\" already defined",
                (char*)NULL);
            return TCL_ERROR;
        }

        if (cfunc->deleteProc != NULL) {
            (*cfunc->deleteProc)(cfunc->clientData);
        }
    }
    else {
        cfunc = (ItclCfunc*)ckalloc(sizeof(ItclCfunc));
        cfunc->argCmdProc = NULL;
    }

    cfunc->objCmdProc = proc;
    cfunc->clientData = clientData;
    cfunc->deleteProc = deleteProc;

    Tcl_SetHashValue(entry, (ClientData)cfunc);
    return TCL_OK;
}


/*
 * ------------------------------------------------------------------------
 *  Itcl_FindC()
 *
 *  Used to query a C procedure via its symbolic name.  Looks at the
 *  list of procedures registered previously by either Itcl_RegisterC
 *  or Itcl_RegisterObjC and returns pointers to the appropriate
 *  (argc,argv) or (objc,objv) handlers.  Returns non-zero if the
 *  name is recognized and pointers are returned; returns zero
 *  otherwise.
 * ------------------------------------------------------------------------
 */
int
Itcl_FindC(interp, name, argProcPtr, objProcPtr, cDataPtr)
    Tcl_Interp *interp;           /* interpreter handling this registration */
    CONST char *name;             /* symbolic name for procedure */
    Tcl_CmdProc **argProcPtr;     /* returns (argc,argv) command handler */
    Tcl_ObjCmdProc **objProcPtr;  /* returns (objc,objv) command handler */
    ClientData *cDataPtr;         /* returns client data */
{
    Tcl_HashEntry *entry;
    Tcl_HashTable *procTable;
    ItclCfunc *cfunc;

    *argProcPtr = NULL;  /* assume info won't be found */
    *objProcPtr = NULL;
    *cDataPtr   = NULL;

    if (interp) {
        procTable = (Tcl_HashTable*)Tcl_GetAssocData(interp,
            "itcl_RegC", (Tcl_InterpDeleteProc**)NULL);

        if (procTable) {
            entry = Tcl_FindHashEntry(procTable, name);
            if (entry) {
                cfunc = (ItclCfunc*)Tcl_GetHashValue(entry);
                *argProcPtr = cfunc->argCmdProc;
                *objProcPtr = cfunc->objCmdProc;
                *cDataPtr   = cfunc->clientData;
            }
        }
    }
    return (*argProcPtr != NULL || *objProcPtr != NULL);
}


/*
 * ------------------------------------------------------------------------
 *  ItclGetRegisteredProcs()
 *
 *  Returns a pointer to a hash table containing the list of registered
 *  procs in the specified interpreter.  If the hash table does not
 *  already exist, it is created.
 * ------------------------------------------------------------------------
 */
static Tcl_HashTable*
ItclGetRegisteredProcs(interp)
    Tcl_Interp *interp;  /* interpreter handling this registration */
{
    Tcl_HashTable* procTable;

    /*
     *  If the registration table does not yet exist, then create it.
     */
    procTable = (Tcl_HashTable*)Tcl_GetAssocData(interp, "itcl_RegC",
        (Tcl_InterpDeleteProc**)NULL);

    if (!procTable) {
        procTable = (Tcl_HashTable*)ckalloc(sizeof(Tcl_HashTable));
        Tcl_InitHashTable(procTable, TCL_STRING_KEYS);
        Tcl_SetAssocData(interp, "itcl_RegC", ItclFreeC,
            (ClientData)procTable);
    }
    return procTable;
}


/*
 * ------------------------------------------------------------------------
 *  ItclFreeC()
 *
 *  When an interpreter is deleted, this procedure is called to
 *  free up the associated data created by Itcl_RegisterC and
 *  Itcl_RegisterObjC.
 * ------------------------------------------------------------------------
 */
static void
ItclFreeC(clientData, interp)
    ClientData clientData;       /* associated data */
    Tcl_Interp *interp;          /* intepreter being deleted */
{
    Tcl_HashTable *tablePtr = (Tcl_HashTable*)clientData;
    Tcl_HashSearch place;
    Tcl_HashEntry *entry;
    ItclCfunc *cfunc;

    entry = Tcl_FirstHashEntry(tablePtr, &place);
    while (entry) {
        cfunc = (ItclCfunc*)Tcl_GetHashValue(entry);

        if (cfunc->deleteProc != NULL) {
            (*cfunc->deleteProc)(cfunc->clientData);
        }
        ckfree ( (char*)cfunc );
        entry = Tcl_NextHashEntry(&place);
    }

    Tcl_DeleteHashTable(tablePtr);
    ckfree((char*)tablePtr);
}
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.1 1998/07/27 18:41:46 stanton Exp $
d79 1
a79 1
    char *name;                     /* symbolic name for procedure */
d164 1
a164 1
    char *name;             /* symbolic name for procedure */
d233 1
a233 1
    char *name;                   /* symbolic name for procedure */
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.2.172.1 2001/05/18 02:21:43 mdejong Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.2 1999/01/27 18:56:05 jingham Exp $
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.2.172.1 2001/05/18 02:21:43 mdejong Exp $
@


1.1.1.3
log
@import itcl 3.2.1
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.1 1998/07/27 18:41:46 stanton Exp $
@


1.1.1.4
log
@imported Itcl 3.3
@
text
@d25 1
a25 1
 *     RCS:  $Id: itcl_linkage.c,v 1.2 2003/12/17 02:25:37 davygrvy Exp $
d79 1
a79 1
    CONST char *name;               /* symbolic name for procedure */
d164 1
a164 1
    CONST char *name;       /* symbolic name for procedure */
d233 1
a233 1
    CONST char *name;             /* symbolic name for procedure */
@


