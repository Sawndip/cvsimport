head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.12
	gdb_7_5-branch:1.6.0.10
	gdb_7_4-branch:1.6.0.8
	gdb_7_3-branch:1.6.0.6
	gdb_7_1-branch:1.6.0.4
	gdb_7_0-branch:1.6.0.2
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.16
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.14
	insight_6_8-branchpoint:1.4
	ITCL_3_3:1.1.1.3
	gdb_6_8-branch:1.4.0.12
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.10
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.8
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.6
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	ITCL3_2_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.1.1.1
	tcltk840-20020924-branch:1.2.0.2
	tcltk840-20020924-branchpoint:1.2
	ITCL_3_2_1:1.1.1.2
	gdb_5_3-branch:1.1.1.1.0.4
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	ITCL_TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2008.07.23.22.44.50;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.22.20.32.44;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.21.04.23;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.21.20.40.26;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.24.18.35.32;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.09.19.49.04;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.22.42.39;	author kseitz;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.07.22.20.40.05;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        Import of Itcl 3.3.
        * itcl/configure.in, itk/configure.in, iwidgets/configure.in:
        Replace with configure.ac.
        * itcl/configure, itk/configure, iwidgets/configure: Regenerate.
        * configure.ac, Makefile.am, Makefile.in: New files.
        * README: "New" file.
        * aclocal.m4: Regenerate.
        * itcl/Makefile.in (RANLIB): Replace with RANLIB_LIB so
        that the toplevel build does not override this variable.
        * itk/Makefile.in (RANLIB): Likewise.
        * itcl/tclconfig/tcl.m4 (TEA_PATH_TCLCONFIG): Look for itclConfig.sh
        in the platform-specific location (unix or win).
        (TEA_PATH_TKCONFIG): Likewise.
        (TEA_MAKE_LIB): Even on windows, GCC libraries must start with "lib".
        * itk/tclconfig.m4: Copy of itcl/tcl.m4.
        * iwidgets/tcl.m4: Remove.
        * iwidgets/tclconfig: New directory.
        * iwidgets/tclconfig/tcl.m4, iwidgets/tclconfig/install-sh: Copies
        of itcl/tclconfig files.
        * iwidgets/Makefile.in (MKINSTALLDIRS): Use mkdir -p.
        * iwidgets/configure.ac (PACKAGE): Rename to PACKAGE_NAME.
        Call TEA_INIT, add AC_CONFIG_AUX_DIR and AC_PROG_INSTALL.
        Use TEA_* instead of SC_* macros.
        Search a few more directories for the itcl and itk libraries.
@
text
@# itclInt.decls --
#
#	This file contains the declarations for all unsupported
#	functions that are exported by the Itcl library.
#
#	By "unsupported", it should be noted that due to Tcl's hiding
#	of the data types used, we inherit this hidden-ness ourselves,
#	too, unfortunately.
#
# Copyright (c) 1998-1999 by Scriptics Corporation.
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: @@(#) $Id: itclInt.decls,v 1.8 2003/12/17 02:54:39 davygrvy Exp $

library itcl

# Define the unsupported generic interfaces.

interface itclInt


#
# Functions used within the package, but not considered "public"
#

declare 0 generic {
    int Itcl_IsClassNamespace(Tcl_Namespace *namesp)
}
declare 1 generic {
    int Itcl_IsClass (Tcl_Command cmd)
}
declare 2 generic {
    ItclClass* Itcl_FindClass (Tcl_Interp* interp, CONST char* path, int autoload)
}
declare 3 generic {
    int Itcl_FindObject (Tcl_Interp *interp, CONST char *name, ItclObject **roPtr)
}
declare 4 generic {   
    int Itcl_IsObject (Tcl_Command cmd)
}
declare 5 generic {
    int Itcl_ObjectIsa (ItclObject *contextObj, ItclClass *cdefn)
}
declare 6 generic {
    int Itcl_Protection (Tcl_Interp *interp, int newLevel)
}
declare 7 generic {
    char* Itcl_ProtectionStr (int pLevel)
}
declare 8 generic {
    int Itcl_CanAccess (ItclMember* memberPtr, Tcl_Namespace* fromNsPtr)
}
declare 9 generic {
    int Itcl_CanAccessFunc (ItclMemberFunc* mfunc, Tcl_Namespace* fromNsPtr)
}
declare 10 generic {
    Tcl_Namespace* Itcl_GetTrueNamespace (Tcl_Interp *interp, \
        ItclObjectInfo *info)
}
declare 11 generic {
    void Itcl_ParseNamespPath (CONST char *name, Tcl_DString *buffer, \
        char **head, char **tail)
}
declare 12 generic {
    int Itcl_DecodeScopedCommand (Tcl_Interp *interp, CONST char *name, \
        Tcl_Namespace **rNsPtr, char **rCmdPtr)
}
declare 13 generic {
    int Itcl_EvalArgs (Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
}
declare 14 generic {
    Tcl_Obj* Itcl_CreateArgs (Tcl_Interp *interp, CONST char *string, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 15 generic {
    int Itcl_PushContext (Tcl_Interp *interp, ItclMember *member, \
        ItclClass *contextClass, ItclObject *contextObj, \
        ItclContext *contextPtr)
}
declare 16 generic {
    void Itcl_PopContext (Tcl_Interp *interp, ItclContext *contextPtr)
}
declare 17 generic {
    int Itcl_GetContext (Tcl_Interp *interp, ItclClass **cdefnPtr, \
        ItclObject **odefnPtr)
}
declare 18 generic {
    void Itcl_InitHierIter (ItclHierIter *iter, ItclClass *cdefn)
}
declare 19 generic {
    void Itcl_DeleteHierIter (ItclHierIter *iter)
}
declare 20 generic {
    ItclClass* Itcl_AdvanceHierIter (ItclHierIter *iter)
}
declare 21 generic {
    int Itcl_FindClassesCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 22 generic {
    int Itcl_FindObjectsCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 23 generic {
    int Itcl_ProtectionCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 24 generic {
    int Itcl_DelClassCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 25 generic {
    int Itcl_DelObjectCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 26 generic {
    int Itcl_ScopeCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 27 generic {
    int Itcl_CodeCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 28 generic {	
    int Itcl_StubCreateCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 29 generic {
    int Itcl_StubExistsCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 30 generic {
    int Itcl_IsStub (Tcl_Command cmd)
}


#
#  Functions for manipulating classes
#

declare 31 generic {
    int Itcl_CreateClass (Tcl_Interp* interp, CONST char* path, \
        ItclObjectInfo *info, ItclClass **rPtr)
}
declare 32 generic {
    int Itcl_DeleteClass (Tcl_Interp *interp, ItclClass *cdefnPtr)
}
declare 33 generic {
    Tcl_Namespace* Itcl_FindClassNamespace (Tcl_Interp* interp, CONST char* path)
}
declare 34 generic {
    int Itcl_HandleClass (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 35 generic {
    int Itcl_ClassCmdResolver (Tcl_Interp *interp, CONST char* name, \
        Tcl_Namespace *context, int flags, Tcl_Command *rPtr)
}
declare 36 generic {
    int Itcl_ClassVarResolver (Tcl_Interp *interp, CONST char* name, \
        Tcl_Namespace *context, int flags, Tcl_Var *rPtr)
}
declare 37 generic {
    int Itcl_ClassCompiledVarResolver (Tcl_Interp *interp, CONST char* name, \
        int length, Tcl_Namespace *context, Tcl_ResolvedVarInfo **rPtr)
}
declare 38 generic {
    void Itcl_BuildVirtualTables (ItclClass* cdefnPtr)
}
declare 39 generic {
    int Itcl_CreateVarDefn (Tcl_Interp *interp, ItclClass* cdefn, \
        char* name, char* init, char* config, ItclVarDefn** vdefnPtr)
}
declare 40 generic {
    void Itcl_DeleteVarDefn (ItclVarDefn *vdefn)
}
declare 41 generic {
    CONST char* Itcl_GetCommonVar (Tcl_Interp *interp, CONST char *name, \
        ItclClass *contextClass)
}
declare 42 generic {
    ItclMember* Itcl_CreateMember (Tcl_Interp* interp, ItclClass *cdefn, \
        CONST char* name)
}
declare 43 generic {
    void Itcl_DeleteMember (ItclMember *memPtr)
}


#
#  Functions for manipulating objects
#

declare 44 generic {
    int Itcl_CreateObject (Tcl_Interp *interp, CONST char* name, ItclClass *cdefn, \
        int objc, Tcl_Obj *CONST objv[], ItclObject **roPtr)
}
declare 45 generic {
    int Itcl_DeleteObject (Tcl_Interp *interp, ItclObject *contextObj)
}
declare 46 generic {
    int Itcl_DestructObject (Tcl_Interp *interp, ItclObject *contextObj, \
        int flags)
}
declare 47 generic {
    int Itcl_HandleInstance (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 48 generic {
    CONST char* Itcl_GetInstanceVar (Tcl_Interp *interp, CONST char *name, \
        ItclObject *contextObj, ItclClass *contextClass)
}
declare 49 generic {
    int Itcl_ScopedVarResolver (Tcl_Interp *interp, CONST char *name, \
        Tcl_Namespace *contextNs, int flags, Tcl_Var *rPtr)
}


#
#  Functions for manipulating methods and procs
#

declare 50 generic {
    int Itcl_BodyCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 51 generic {
    int Itcl_ConfigBodyCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 52 generic {
    int Itcl_CreateMethod (Tcl_Interp* interp, ItclClass *cdefn,
	CONST char* name, CONST char* arglist, CONST char* body)
}
declare 53 generic {
    int Itcl_CreateProc (Tcl_Interp* interp, ItclClass *cdefn,
	CONST char* name, CONST char* arglist, CONST char* body)
}
declare 54 generic {
    int Itcl_CreateMemberFunc (Tcl_Interp* interp, ItclClass *cdefn, \
        CONST char* name, CONST char* arglist, CONST char* body, \
	ItclMemberFunc** mfuncPtr)
}
declare 55 generic {
    int Itcl_ChangeMemberFunc (Tcl_Interp* interp, ItclMemberFunc* mfunc, \
        CONST char* arglist, CONST char* body)
}
declare 56 generic {
    void Itcl_DeleteMemberFunc (CONST char* cdata)
}
declare 57 generic {
    int Itcl_CreateMemberCode (Tcl_Interp* interp, ItclClass *cdefn, \
        CONST char* arglist, CONST char* body, ItclMemberCode** mcodePtr)
}
declare 58 generic {
    void Itcl_DeleteMemberCode (CONST char* cdata)
}
declare 59 generic {
    int Itcl_GetMemberCode (Tcl_Interp* interp, ItclMember* member)
}
#declare 60 generic {
#    int Itcl_CompileMemberCodeBody (Tcl_Interp *interp, ItclMember *member, \
#        char *desc, Tcl_Obj *bodyPtr)
#}
declare 61 generic {
    int Itcl_EvalMemberCode (Tcl_Interp *interp, ItclMemberFunc *mfunc, \
        ItclMember *member, ItclObject *contextObj, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 62 generic {
    int Itcl_CreateArgList (Tcl_Interp* interp, CONST char* decl, int* argcPtr, \
        CompiledLocal** argPtr)
}
declare 63 generic {
    CompiledLocal* Itcl_CreateArg (CONST char* name, CONST char* init)
}
declare 64 generic {
    void Itcl_DeleteArgList (CompiledLocal *arglist)
}
declare 65 generic {
    Tcl_Obj* Itcl_ArgList (int argc, CompiledLocal* arglist)
}
declare 66 generic {
    int Itcl_EquivArgLists (CompiledLocal* arg1, int arg1c, \
        CompiledLocal* arg2, int arg2c)
}
declare 67 generic {
    void Itcl_GetMemberFuncUsage (ItclMemberFunc *mfunc, \
        ItclObject *contextObj, Tcl_Obj *objPtr)
}
declare 68 generic {
    int Itcl_ExecMethod (ClientData clientData, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 69 generic {
    int Itcl_ExecProc (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 70 generic {
    int Itcl_AssignArgs (Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], \
        ItclMemberFunc *mfunc)
}
declare 71 generic {
    int Itcl_ConstructBase (Tcl_Interp *interp, ItclObject *contextObj, \
        ItclClass *contextClass)
}
declare 72 generic {
    int Itcl_InvokeMethodIfExists (Tcl_Interp *interp, CONST char *name, \
        ItclClass *contextClass, ItclObject *contextObj, int objc, \
        Tcl_Obj *CONST objv[])
}
#declare 73 generic {
#    int Itcl_EvalBody (Tcl_Interp *interp, Tcl_Obj *bodyPtr)
#}
declare 74 generic {
    int Itcl_ReportFuncErrors (Tcl_Interp* interp, ItclMemberFunc *mfunc, \
        ItclObject *contextObj, int result)
}


#
#  Commands for parsing class definitions
#

declare 75 generic {
    int Itcl_ParseInit (Tcl_Interp *interp, ItclObjectInfo *info)
}
declare 76 generic {
    int Itcl_ClassCmd (ClientData clientData, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 77 generic {
    int Itcl_ClassInheritCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 78 generic {
    int Itcl_ClassProtectionCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 79 generic {
    int Itcl_ClassConstructorCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 80 generic {
    int Itcl_ClassDestructorCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 81 generic {
    int Itcl_ClassMethodCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 82 generic {
    int Itcl_ClassProcCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 83 generic {
    int Itcl_ClassVariableCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 84 generic {
    int Itcl_ClassCommonCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 85 generic {
    int Itcl_ParseVarResolver (Tcl_Interp *interp, CONST char* name, \
        Tcl_Namespace *contextNs, int flags, Tcl_Var* rPtr)
}


#
#  Commands in the "builtin" namespace
#

declare 86 generic {
    int Itcl_BiInit (Tcl_Interp *interp)
}
declare 87 generic {
    int Itcl_InstallBiMethods (Tcl_Interp *interp, ItclClass *cdefn)
}
declare 88 generic {
    int Itcl_BiIsaCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 89 generic {
    int Itcl_BiConfigureCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 90 generic {
    int Itcl_BiCgetCmd (ClientData clientData, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 91 generic {
    int Itcl_BiChainCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 92 generic {
    int Itcl_BiInfoClassCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 93 generic {
    int Itcl_BiInfoInheritCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 94 generic {
    int Itcl_BiInfoHeritageCmd (ClientData dummy, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 95 generic {
    int Itcl_BiInfoFunctionCmd (ClientData dummy, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 96 generic {
    int Itcl_BiInfoVariableCmd (ClientData dummy, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 97 generic {
    int Itcl_BiInfoBodyCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 98 generic {
    int Itcl_BiInfoArgsCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 99 generic {
    int Itcl_DefaultInfoCmd (ClientData dummy, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}


#
#  Ensembles
#

declare 100 generic {
    int Itcl_EnsembleInit (Tcl_Interp *interp)
}
declare 101 generic {
    int Itcl_CreateEnsemble (Tcl_Interp *interp, CONST char* ensName)
}
declare 102 generic {
    int Itcl_AddEnsemblePart (Tcl_Interp *interp, CONST char* ensName, \
        CONST char* partName, CONST char* usageInfo, Tcl_ObjCmdProc *objProc, \
        ClientData clientData, Tcl_CmdDeleteProc *deleteProc)
}
declare 103 generic {
    int Itcl_GetEnsemblePart (Tcl_Interp *interp, CONST char *ensName, \
        CONST char *partName, Tcl_CmdInfo *infoPtr)
}
declare 104 generic {
    int Itcl_IsEnsemble (Tcl_CmdInfo* infoPtr)
}
declare 105 generic {
    int Itcl_GetEnsembleUsage (Tcl_Interp *interp, CONST char *ensName, \
        Tcl_Obj *objPtr)
}
declare 106 generic {
    int Itcl_GetEnsembleUsageForObj (Tcl_Interp *interp, Tcl_Obj *ensObjPtr, \
        Tcl_Obj *objPtr)
}
declare 107 generic {
    int Itcl_EnsembleCmd (ClientData clientData, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 108 generic {
    int Itcl_EnsPartCmd (ClientData clientData, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}
declare 109 generic {
    int Itcl_EnsembleErrorCmd (ClientData clientData, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}


#
#  Commands provided for backward compatibility
#

# not used anymore (3.3)
#declare 110 generic {
#    int Itcl_OldInit (Tcl_Interp* interp, ItclObjectInfo* info)
#}
#declare 111 generic {
#    int Itcl_InstallOldBiMethods (Tcl_Interp *interp, ItclClass *cdefn)
#}


#
#  Things that should be in the Tcl core.
#

declare 112 generic {
    Tcl_CallFrame* _Tcl_GetCallFrame (Tcl_Interp *interp, int level)
}
declare 113 generic {
    Tcl_CallFrame* _Tcl_ActivateCallFrame (Tcl_Interp *interp, \
        Tcl_CallFrame *framePtr)
}
declare 114 generic {
    Var* _TclNewVar (void)
}
declare 115 generic {
    void Itcl_Assert (CONST char *testExpr, CONST char *fileName, int lineNum)
}

declare 116 generic {
    int Itcl_IsObjectCmd (ClientData clientData, Tcl_Interp *interp, \
    int objc, Tcl_Obj *CONST objv[])
}
declare 117 generic {
    int Itcl_IsClassCmd (ClientData clientData, Tcl_Interp *interp, \
    int objc, Tcl_Obj *CONST objv[])
}
@


1.5
log
@touch all sources for Itcl 3.3/Iwidgets 4.0.1 upgrade
@
text
@d4 5
a8 3
#	functions that are exported by the Tcl library.  This file
#	is used to generate the itclIntDecls.h and itclIntStub.c
#	files
d14 1
a14 1
# RCS: @@(#) $Id: itclInt.decls,v 1.2 2001/05/22 01:35:38 davygrvy Exp $
d34 1
a34 1
    ItclClass* Itcl_FindClass (Tcl_Interp* interp, char* path, int autoload)
d37 1
a37 1
    int Itcl_FindObject (Tcl_Interp *interp, char *name, ItclObject **roPtr)
d62 1
a62 1
    void Itcl_ParseNamespPath (char *name, Tcl_DString *buffer, \
d66 1
a66 1
    int Itcl_DecodeScopedCommand (Tcl_Interp *interp, char *name, \
d73 1
a73 1
    Tcl_Obj* Itcl_CreateArgs (Tcl_Interp *interp, char *string, \
d143 1
a143 1
    int Itcl_CreateClass (Tcl_Interp* interp, char* path, \
d150 1
a150 1
    Tcl_Namespace* Itcl_FindClassNamespace (Tcl_Interp* interp, char* path)
d161 1
a161 1
    int Itcl_ClassVarResolver (Tcl_Interp *interp, char* name, \
d165 1
a165 1
    int Itcl_ClassCompiledVarResolver (Tcl_Interp *interp, char* name, \
d179 1
a179 1
    char* Itcl_GetCommonVar (Tcl_Interp *interp, char *name, \
d184 1
a184 1
        char* name)
d196 1
a196 1
    int Itcl_CreateObject (Tcl_Interp *interp, char* name, ItclClass *cdefn, \
d211 1
a211 1
    char* Itcl_GetInstanceVar (Tcl_Interp *interp, char *name, \
d215 1
a215 1
    int Itcl_ScopedVarResolver (Tcl_Interp *interp, char *name, \
d233 2
a234 2
    int Itcl_CreateMethod (Tcl_Interp* interp, ItclClass *cdefn, char* name, \
        char* arglist, char* body)
d237 2
a238 2
    int Itcl_CreateProc (Tcl_Interp* interp, ItclClass *cdefn, char* name, \
        char* arglist, char* body)
d242 2
a243 1
        char* name, char* arglist, char* body, ItclMemberFunc** mfuncPtr)
d247 1
a247 1
        char* arglist, char* body)
d250 1
a250 1
    void Itcl_DeleteMemberFunc (char* cdata)
d254 1
a254 1
        char* arglist, char* body, ItclMemberCode** mcodePtr)
d257 1
a257 1
    void Itcl_DeleteMemberCode (char* cdata)
d272 1
a272 1
    int Itcl_CreateArgList (Tcl_Interp* interp, char* decl, int* argcPtr, \
d276 1
a276 1
    CompiledLocal* Itcl_CreateArg (char* name, char* init)
d309 1
a309 1
    int Itcl_InvokeMethodIfExists (Tcl_Interp *interp, char *name, \
d366 1
a366 1
    int Itcl_ParseVarResolver (Tcl_Interp *interp, char* name, \
d439 1
a439 1
    int Itcl_CreateEnsemble (Tcl_Interp *interp, char* ensName)
d442 2
a443 2
    int Itcl_AddEnsemblePart (Tcl_Interp *interp, char* ensName, \
        char* partName, char* usageInfo, Tcl_ObjCmdProc *objProc, \
d447 2
a448 2
    int Itcl_GetEnsemblePart (Tcl_Interp *interp, char *ensName, \
        char *partName, Tcl_CmdInfo *infoPtr)
d454 1
a454 1
    int Itcl_GetEnsembleUsage (Tcl_Interp *interp, char *ensName, \
d479 7
a485 6
declare 110 generic {
    int Itcl_OldInit (Tcl_Interp* interp, ItclObjectInfo* info)
}
declare 111 generic {
    int Itcl_InstallOldBiMethods (Tcl_Interp *interp, ItclClass *cdefn)
}
d503 10
a512 1
    void Itcl_Assert (char *testExpr, char *fileName, int lineNum)
@


1.4
log
@Updated to itcl 3.2.1.
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@d12 1
a12 1
# RCS: @@(#) $Id: itclInt.decls,v 1.2.4.1 2001/05/18 02:21:42 mdejong Exp $
d155 1
a155 1
    int Itcl_ClassCmdResolver (Tcl_Interp *interp, char* name, \
@


1.2
log
@touched all sources to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Itcl import for Tcl/Tk8.3 upgrade
@
text
@@


1.1.1.2
log
@import itcl 3.2.1
@
text
@d12 1
a12 1
# RCS: @@(#) $Id: itclInt.decls,v 1.2 2001/05/22 01:35:38 davygrvy Exp $
d155 1
a155 1
    int Itcl_ClassCmdResolver (Tcl_Interp *interp, CONST char* name, \
@


1.1.1.3
log
@imported Itcl 3.3
@
text
@d4 3
a6 5
#	functions that are exported by the Itcl library.
#
#	By "unsupported", it should be noted that due to Tcl's hiding
#	of the data types used, we inherit this hidden-ness ourselves,
#	too, unfortunately.
d12 1
a12 1
# RCS: @@(#) $Id: itclInt.decls,v 1.8 2003/12/17 02:54:39 davygrvy Exp $
d32 1
a32 1
    ItclClass* Itcl_FindClass (Tcl_Interp* interp, CONST char* path, int autoload)
d35 1
a35 1
    int Itcl_FindObject (Tcl_Interp *interp, CONST char *name, ItclObject **roPtr)
d60 1
a60 1
    void Itcl_ParseNamespPath (CONST char *name, Tcl_DString *buffer, \
d64 1
a64 1
    int Itcl_DecodeScopedCommand (Tcl_Interp *interp, CONST char *name, \
d71 1
a71 1
    Tcl_Obj* Itcl_CreateArgs (Tcl_Interp *interp, CONST char *string, \
d141 1
a141 1
    int Itcl_CreateClass (Tcl_Interp* interp, CONST char* path, \
d148 1
a148 1
    Tcl_Namespace* Itcl_FindClassNamespace (Tcl_Interp* interp, CONST char* path)
d159 1
a159 1
    int Itcl_ClassVarResolver (Tcl_Interp *interp, CONST char* name, \
d163 1
a163 1
    int Itcl_ClassCompiledVarResolver (Tcl_Interp *interp, CONST char* name, \
d177 1
a177 1
    CONST char* Itcl_GetCommonVar (Tcl_Interp *interp, CONST char *name, \
d182 1
a182 1
        CONST char* name)
d194 1
a194 1
    int Itcl_CreateObject (Tcl_Interp *interp, CONST char* name, ItclClass *cdefn, \
d209 1
a209 1
    CONST char* Itcl_GetInstanceVar (Tcl_Interp *interp, CONST char *name, \
d213 1
a213 1
    int Itcl_ScopedVarResolver (Tcl_Interp *interp, CONST char *name, \
d231 2
a232 2
    int Itcl_CreateMethod (Tcl_Interp* interp, ItclClass *cdefn,
	CONST char* name, CONST char* arglist, CONST char* body)
d235 2
a236 2
    int Itcl_CreateProc (Tcl_Interp* interp, ItclClass *cdefn,
	CONST char* name, CONST char* arglist, CONST char* body)
d240 1
a240 2
        CONST char* name, CONST char* arglist, CONST char* body, \
	ItclMemberFunc** mfuncPtr)
d244 1
a244 1
        CONST char* arglist, CONST char* body)
d247 1
a247 1
    void Itcl_DeleteMemberFunc (CONST char* cdata)
d251 1
a251 1
        CONST char* arglist, CONST char* body, ItclMemberCode** mcodePtr)
d254 1
a254 1
    void Itcl_DeleteMemberCode (CONST char* cdata)
d269 1
a269 1
    int Itcl_CreateArgList (Tcl_Interp* interp, CONST char* decl, int* argcPtr, \
d273 1
a273 1
    CompiledLocal* Itcl_CreateArg (CONST char* name, CONST char* init)
d306 1
a306 1
    int Itcl_InvokeMethodIfExists (Tcl_Interp *interp, CONST char *name, \
d363 1
a363 1
    int Itcl_ParseVarResolver (Tcl_Interp *interp, CONST char* name, \
d436 1
a436 1
    int Itcl_CreateEnsemble (Tcl_Interp *interp, CONST char* ensName)
d439 2
a440 2
    int Itcl_AddEnsemblePart (Tcl_Interp *interp, CONST char* ensName, \
        CONST char* partName, CONST char* usageInfo, Tcl_ObjCmdProc *objProc, \
d444 2
a445 2
    int Itcl_GetEnsemblePart (Tcl_Interp *interp, CONST char *ensName, \
        CONST char *partName, Tcl_CmdInfo *infoPtr)
d451 1
a451 1
    int Itcl_GetEnsembleUsage (Tcl_Interp *interp, CONST char *ensName, \
d476 6
a481 7
# not used anymore (3.3)
#declare 110 generic {
#    int Itcl_OldInit (Tcl_Interp* interp, ItclObjectInfo* info)
#}
#declare 111 generic {
#    int Itcl_InstallOldBiMethods (Tcl_Interp *interp, ItclClass *cdefn)
#}
d499 1
a499 10
    void Itcl_Assert (CONST char *testExpr, CONST char *fileName, int lineNum)
}

declare 116 generic {
    int Itcl_IsObjectCmd (ClientData clientData, Tcl_Interp *interp, \
    int objc, Tcl_Obj *CONST objv[])
}
declare 117 generic {
    int Itcl_IsClassCmd (ClientData clientData, Tcl_Interp *interp, \
    int objc, Tcl_Obj *CONST objv[])
@


