head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.4
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.5
	binutils-2_23_2:1.6
	binutils-2_23_1:1.6
	binutils-2_23:1.6
	binutils-2_23-branch:1.6.0.2
	binutils-2_23-branchpoint:1.6
	binutils-2_22_branch:1.5.0.6
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.4
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.2
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.4.0.10
	binutils-arc-20081103-branchpoint:1.4
	binutils-2_20-branch:1.4.0.8
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.4.0.6
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.4.0.4
	arc-20081103-branchpoint:1.4
	binutils-2_19_1:1.4
	binutils-2_19:1.4
	binutils-2_19-branch:1.4.0.2
	binutils-2_19-branchpoint:1.4
	binutils_latest_snapshot:1.6
	added-to-binutils:1.4;
locks; strict;
comment	@ * @;


1.6
date	2012.05.11.11.10.19;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.04.09.53.38;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.09.19.40.24;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.04.22.24.47;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.22.05.50.40;	author iant;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Handle R_X86_64_64 properly for x32

elfcpp/

	PR gold/14091
	* x86_64.h (R_X86_64_RELATIVE64): New.

gold/

	PR gold/14091
	* x86_64.cc (Target_x86_64::Scan::local): For x32, generate
	R_X86_64_RELATIVE64 instead of R_X86_64_RELATIVE in case of
	R_X86_64_64.
@
text
@// x86-64.h -- ELF definitions specific to EM_X86_64  -*- C++ -*-

// Copyright 2006, 2007, 2010 Free Software Foundation, Inc.
// Written by Andrew Chatham.

// This file is part of elfcpp.
   
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// In addition to the permissions in the GNU Library General Public
// License, the Free Software Foundation gives you unlimited
// permission to link the compiled version of this file into
// combinations with other programs, and to distribute those
// combinations without any restriction coming from the use of this
// file.  (The Library Public License restrictions do apply in other
// respects; for example, they cover modification of the file, and
/// distribution when not linked into a combined executable.)

// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
// 02110-1301, USA.

#ifndef ELFCPP_X86_64_H
#define ELFCPP_X86_64_H

namespace elfcpp
{

// Documentation is taken from
//   http://www.x86-64.org/documentation/abi-0.98.pdf
//   elf.h
// Documentation for the TLS relocs is taken from
//   http://people.redhat.com/drepper/tls.pdf
//   http://www.lsd.ic.unicamp.br/~oliva/writeups/TLS/RFC-TLSDESC-x86.txt

enum
{
  R_X86_64_NONE = 0,       // No reloc
  R_X86_64_64 = 1,         // Direct 64 bit
  R_X86_64_PC32 = 2,       // PC relative 32 bit signed
  R_X86_64_GOT32 = 3,      // 32 bit GOT entry
  R_X86_64_PLT32 = 4,      // 32 bit PLT address
  R_X86_64_COPY = 5,       // Copy symbol at runtime
  R_X86_64_GLOB_DAT = 6,   // Create GOT entry
  R_X86_64_JUMP_SLOT = 7,  // Create PLT entry
  R_X86_64_RELATIVE = 8,   // Adjust by program base
  R_X86_64_GOTPCREL = 9,   // 32 bit signed PC relative offset to GOT
  R_X86_64_32 = 10,        // Direct 32 bit zero extended
  R_X86_64_32S = 11,       // Direct 32 bit sign extended
  R_X86_64_16 = 12,        // Direct 16 bit zero extended
  R_X86_64_PC16 = 13,      // 16 bit sign extended pc relative
  R_X86_64_8 = 14,         // Direct 8 bit sign extended
  R_X86_64_PC8 = 15,       // 8 bit sign extended pc relative

  // TLS relocations
  R_X86_64_DTPMOD64 = 16,  // ID of module containing symbol
  R_X86_64_DTPOFF64 = 17,  // Offset in module's TLS block
  R_X86_64_TPOFF64 = 18,   // Offset in initial TLS block
  R_X86_64_TLSGD = 19,     // 32 bit signed PC relative offset to two
                           // GOT entries for GD symbol
  R_X86_64_TLSLD = 20,     // 32 bit signed PC relative offset to two
                           // GOT entries for LD symbol
  R_X86_64_DTPOFF32 = 21,  // Offset in TLS block
  R_X86_64_GOTTPOFF = 22,  // 32 bit signed PC relative offset to GOT
                           // entry for IE symbol
  R_X86_64_TPOFF32 = 23,   // Offset in initial TLS block

  R_X86_64_PC64 = 24,      // 64-bit PC relative
  R_X86_64_GOTOFF64 = 25,  // 64-bit GOT offset
  R_X86_64_GOTPC32 = 26,   // 32-bit PC relative offset to GOT

  R_X86_64_GOT64 = 27,     // 64-bit GOT entry offset
  R_X86_64_GOTPCREL64 = 28, // 64-bit PC relative offset to GOT entry
  R_X86_64_GOTPC64 = 29,   // 64-bit PC relative offset to GOT
  R_X86_64_GOTPLT64 = 30,  // Like GOT64, indicates that PLT entry needed
  R_X86_64_PLTOFF64 = 31,  // 64-bit GOT relative offset to PLT entry

  R_X86_64_SIZE32 = 32,
  R_X86_64_SIZE64 = 33,

  R_X86_64_GOTPC32_TLSDESC = 34, // 32-bit PC relative to TLS descriptor in GOT
  R_X86_64_TLSDESC_CALL = 35,    // Relaxable call through TLS descriptor
  R_X86_64_TLSDESC = 36,         // 2 by 64-bit TLS descriptor
  R_X86_64_IRELATIVE = 37,          // Adjust indirectly by program base
  R_X86_64_RELATIVE64 = 38,      // 64-bit adjust by program base
  // GNU vtable garbage collection extensions.
  R_X86_64_GNU_VTINHERIT = 250,
  R_X86_64_GNU_VTENTRY = 251
};

} // End namespace elfcpp.

#endif // !defined(ELFCPP_X86_64_H)
@


1.5
log
@elfcpp:/
	* i386.h (R_386_IRELATIVE): Define.
	* powerpc.h (R_POWERPC_IRELATIVE): Define.
	(R_PPC_RELAX32, R_PPC_RELAX32PC): Don't define.
	(R_PPC_RELAX32_PLT, R_PPC_RELAX32PC_PLT): Don't define.
	* sparc.h (R_SPARC_IRELATIVE): Define.
	* x86_64.h (R_X86_64_IRELATIVE): Define.
	(R_X86_64_GNU_VTINHERIT): Rename from R_386_GNU_VTINHERIT.
	(R_X86_64_GNU_VTENTRY): Rename from R_386_GNU_VTENTRY.
gold:/
	* x86_64.cc (Target_x86_64::Scan::local): Use
	R_X86_64_GNU_VTINHERIT instead of R_386_GNU_VTINHERIT and
	R_X86_64_GNU_VTENTRY instead of R_386_GNU_VTENTRY.
	(Target_x86_64::Scan::global): Likewise.
	(Target_x86_64::Relocate::relocate): Likewise.
	(Target_x86_64::Relocatable_size_for_reloc::get_size_for_reloc):
	Likewise.
@
text
@d94 1
@


1.4
log
@Remove Andrew's e-mail address.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, Free Software Foundation, Inc.
d93 1
d95 2
a96 2
  R_386_GNU_VTINHERIT = 250,
  R_386_GNU_VTENTRY = 251
@


1.3
log
@From Craig Silverstein: update comments.
@
text
@d4 1
a4 1
// Written by Andrew Chatham <chatham@@google.com>.
@


1.2
log
@Add licensing text to every source file.
@
text
@d38 7
a44 1
// Taken from http://www.x86-64.org/documentation/abi-0.98.pdf and elf.h
@


1.1
log
@From Andrew Chatham: List x86_64 ELF relocs.
@
text
@d3 29
@

