head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.20
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.18
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.8.0.16
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.14
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.12
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.8
	binutils-2_20:1.8
	binutils-arc-20081103-branch:1.8.0.10
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.8.0.8
	binutils-2_20-branchpoint:1.8
	dje-cgen-play1-branch:1.8.0.6
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.8.0.4
	arc-20081103-branchpoint:1.8
	binutils-2_19_1:1.8
	binutils-2_19:1.8
	binutils-2_19-branch:1.8.0.2
	binutils-2_19-branchpoint:1.8
	binutils_latest_snapshot:1.8
	added-to-binutils:1.8;
locks; strict;
comment	@ * @;


1.8
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.22.20.56.19;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.14.19.21.05;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.06.22.45.08;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.20.20.40.49;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.29.19.58.16;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.25.21.29.06;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.04.23.10.59;	author iant;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Add licensing text to every source file.
@
text
@// elfcpp_internal.h -- internals for elfcpp   -*- C++ -*-

// Copyright 2006, 2007, Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of elfcpp.
   
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// In addition to the permissions in the GNU Library General Public
// License, the Free Software Foundation gives you unlimited
// permission to link the compiled version of this file into
// combinations with other programs, and to distribute those
// combinations without any restriction coming from the use of this
// file.  (The Library Public License restrictions do apply in other
// respects; for example, they cover modification of the file, and
/// distribution when not linked into a combined executable.)

// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
// 02110-1301, USA.

// This is included by elfcpp.h, the external interface, but holds
// information which we want to keep private.

#ifndef ELFCPP_INTERNAL_H
#define ELFCPP_INTERNAL_H

namespace elfcpp
{

namespace internal
{

// The ELF file header.

template<int size>
struct Ehdr_data
{
  unsigned char e_ident[EI_NIDENT];
  Elf_Half e_type;
  Elf_Half e_machine;
  Elf_Word e_version;
  typename Elf_types<size>::Elf_Addr e_entry;
  typename Elf_types<size>::Elf_Off e_phoff;
  typename Elf_types<size>::Elf_Off e_shoff;
  Elf_Word e_flags;
  Elf_Half e_ehsize;
  Elf_Half e_phentsize;
  Elf_Half e_phnum;
  Elf_Half e_shentsize;
  Elf_Half e_shnum;
  Elf_Half e_shstrndx;
};

// An ELF section header.

template<int size>
struct Shdr_data
{
  Elf_Word sh_name;
  Elf_Word sh_type;
  typename Elf_types<size>::Elf_WXword sh_flags;
  typename Elf_types<size>::Elf_Addr sh_addr;
  typename Elf_types<size>::Elf_Off sh_offset;
  typename Elf_types<size>::Elf_WXword sh_size;
  Elf_Word sh_link;
  Elf_Word sh_info;
  typename Elf_types<size>::Elf_WXword sh_addralign;
  typename Elf_types<size>::Elf_WXword sh_entsize;
};

// An ELF segment header.  We use template specialization for the
// 32-bit and 64-bit versions because the fields are in a different
// order.

template<int size>
struct Phdr_data;

template<>
struct Phdr_data<32>
{
  Elf_Word p_type;
  Elf_types<32>::Elf_Off p_offset;
  Elf_types<32>::Elf_Addr p_vaddr;
  Elf_types<32>::Elf_Addr p_paddr;
  Elf_Word p_filesz;
  Elf_Word p_memsz;
  Elf_Word p_flags;
  Elf_Word p_align;
};

template<>
struct Phdr_data<64>
{
  Elf_Word p_type;
  Elf_Word p_flags;
  Elf_types<64>::Elf_Off p_offset;
  Elf_types<64>::Elf_Addr p_vaddr;
  Elf_types<64>::Elf_Addr p_paddr;
  Elf_Xword p_filesz;
  Elf_Xword p_memsz;
  Elf_Xword p_align;
};

// An ELF symbol table entry.  We use template specialization for the
// 32-bit and 64-bit versions because the fields are in a different
// order.

template<int size>
struct Sym_data;

template<>
struct Sym_data<32>
{
  Elf_Word st_name;
  Elf_types<32>::Elf_Addr st_value;
  Elf_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf_Half st_shndx;
};

template<>
struct Sym_data<64>
{
  Elf_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf_Half st_shndx;
  Elf_types<64>::Elf_Addr st_value;
  Elf_Xword st_size;
};

// ELF relocation table entries.

template<int size>
struct Rel_data
{
  typename Elf_types<size>::Elf_Addr r_offset;
  typename Elf_types<size>::Elf_WXword r_info;
};

template<int size>
struct Rela_data
{
  typename Elf_types<size>::Elf_Addr r_offset;
  typename Elf_types<size>::Elf_WXword r_info;
  typename Elf_types<size>::Elf_Swxword r_addend;
};

// An entry in the ELF SHT_DYNAMIC section aka PT_DYNAMIC segment.

template<int size>
struct Dyn_data
{
  typename Elf_types<size>::Elf_Swxword d_tag;
  typename Elf_types<size>::Elf_WXword d_val;
};

// An entry in a SHT_GNU_verdef section.  This structure is the same
// in 32-bit and 64-bit ELF files.

struct Verdef_data
{
  // Version number of structure (VER_DEF_*).
  Elf_Half vd_version;
  // Bit flags (VER_FLG_*).
  Elf_Half vd_flags;
  // Version index.
  Elf_Half vd_ndx;
  // Number of auxiliary Verdaux entries.
  Elf_Half vd_cnt;
  // Hash of name.
  Elf_Word vd_hash;
  // Byte offset to first Verdaux entry.
  Elf_Word vd_aux;
  // Byte offset to next Verdef entry.
  Elf_Word vd_next;
};

// An auxiliary entry in a SHT_GNU_verdef section.  This structure is
// the same in 32-bit and 64-bit ELF files.

struct Verdaux_data
{
  // Offset in string table of version name.
  Elf_Word vda_name;
  // Byte offset to next Verdaux entry.
  Elf_Word vda_next;
};

// An entry in a SHT_GNU_verneed section.  This structure is the same
// in 32-bit and 64-bit ELF files.

struct Verneed_data
{
  // Version number of structure (VER_NEED_*).
  Elf_Half vn_version;
  // Number of auxiliary Vernaux entries.
  Elf_Half vn_cnt;
  // Offset in string table of library name.
  Elf_Word vn_file;
  // Byte offset to first Vernaux entry.
  Elf_Word vn_aux;
  // Byt eoffset to next Verneed entry.
  Elf_Word vn_next;
};

// An auxiliary entry in a SHT_GNU_verneed section.  This structure is
// the same in 32-bit and 64-bit ELF files.

struct Vernaux_data
{
  // Hash of dependency name.
  Elf_Word vna_hash;
  // Bit flags (VER_FLG_*).
  Elf_Half vna_flags;
  // Version index used in SHT_GNU_versym entries.
  Elf_Half vna_other;
  // Offset in string table of version name.
  Elf_Word vna_name;
  // Byte offset to next Vernaux entry.
  Elf_Word vna_next;
};

} // End namespace internal.

} // End namespace elfcpp.

#endif // !defined(ELFCPP_INTERNAL_H)
@


1.7
log
@Remove unnecessary elfcpp_config.h file.
@
text
@d3 29
@


1.6
log
@More dynamic object support, initial scripting support.
@
text
@a5 2
#include "elfcpp_config.h"

@


1.5
log
@Rework swapping code.
@
text
@d38 1
a38 1
// An Elf section header.
d117 1
a117 1
// Elf relocation table entries.
d132 75
@


1.4
log
@Framework for relocation scanning.  Implement simple static TLS
relocations.
@
text
@a7 2
#include <byteswap.h>

a15 157

#ifdef WORDS_BIGENDIAN
const bool host_big_endian = true;
#else
const bool host_big_endian = false;
#endif

// Conversion routines between target and host.

// Convert Elf_Half.

template<bool same_endian>
Elf_Half
convert_half_host(Elf_Half v);

template<>
inline Elf_Half
convert_half_host<true>(Elf_Half v)
{
  return v;
}

template<>
inline Elf_Half
convert_half_host<false>(Elf_Half v)
{
  return bswap_16(v);
}

template<bool big_endian>
inline Elf_Half
convert_half(Elf_Half v)
{
  return convert_half_host<big_endian == host_big_endian>(v);
}

// Convert Elf_Word.

template<bool same_endian>
Elf_Word
convert_word_host(Elf_Word v);

template<>
inline Elf_Word
convert_word_host<true>(Elf_Word v)
{
  return v;
}

template<>
inline Elf_Word
convert_word_host<false>(Elf_Word v)
{
  return bswap_32(v);
}

template<bool big_endian>
inline Elf_Word
convert_word(Elf_Word v)
{
  return convert_word_host<big_endian == host_big_endian>(v);
}

// Convert Elf_Xword.

template<bool same_endian>
Elf_Xword
convert_xword_host(Elf_Xword v);

template<>
inline Elf_Xword
convert_xword_host<true>(Elf_Xword v)
{
  return v;
}

template<>
inline Elf_Xword
convert_xword_host<false>(Elf_Xword v)
{
  return bswap_64(v);
}

template<bool big_endian>
inline Elf_Xword
convert_xword(Elf_Xword v)
{
  return convert_xword_host<big_endian == host_big_endian>(v);
}

// Convert Elf_addr.

template<int size, bool same_endian>
typename Elf_types<size>::Elf_Addr
convert_addr_size(typename Elf_types<size>::Elf_Addr);

template<>
inline Elf_types<32>::Elf_Addr
convert_addr_size<32, true>(Elf_types<32>::Elf_Addr v)
{
  return v;
}

template<>
inline Elf_types<64>::Elf_Addr
convert_addr_size<64, true>(Elf_types<64>::Elf_Addr v)
{
  return v;
}

template<>
inline Elf_types<32>::Elf_Addr
convert_addr_size<32, false>(Elf_types<32>::Elf_Addr v)
{
  return bswap_32(v);
}

template<>
inline Elf_types<64>::Elf_Addr
convert_addr_size<64, false>(Elf_types<64>::Elf_Addr v)
{
  return bswap_64(v);
}

template<int size, bool big_endian>
inline typename Elf_types<size>::Elf_Addr
convert_addr(typename Elf_types<size>::Elf_Addr v)
{
  return convert_addr_size<size, big_endian == host_big_endian>(v);
}

// Convert Elf_Off.

template<int size, bool big_endian>
inline typename Elf_types<size>::Elf_Off
convert_off(typename Elf_types<size>::Elf_Off v)
{
  return convert_addr_size<size, big_endian == host_big_endian>(v);
}

// Convert Elf_WXword.

template<int size, bool big_endian>
inline typename Elf_types<size>::Elf_WXword
convert_wxword(typename Elf_types<size>::Elf_WXword v)
{
  return convert_addr_size<size, big_endian == host_big_endian>(v);
}

// Convert ELF_Swxword.

template<int size, bool big_endian>
inline typename Elf_types<size>::Elf_Swxword
convert_swxword(typename Elf_types<size>::Elf_Swxword v)
{
  return convert_addr_size<size, big_endian == host_big_endian>(v);
}
@


1.3
log
@Snapshot.  Now able to produce a minimal executable which actually
runs.
@
text
@d19 1
a19 1
#ifdef WORDS_BIG_ENDIAN
@


1.2
log
@Add program segments.
@
text
@d161 11
a171 2
inline typename Elf_types<size>::Elf_Off
convert_wxword(typename Elf_types<size>::Elf_Off v)
d274 17
@


1.1
log
@Initial CVS checkin of gold
@
text
@d205 33
@

