head	1.9;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.7
	gdb_7_6-2013-04-26-release:1.7
	gdb_7_6-branch:1.7.0.2
	gdb_7_6-2013-03-12-branchpoint:1.7
	gdb_7_5_1-2012-11-29-release:1.6
	gdb_7_5-2012-08-17-release:1.6
	gdb_7_5-branch:1.6.0.14
	gdb_7_5-2012-07-18-branchpoint:1.6
	gdb_7_4_1-2012-04-26-release:1.6
	gdb_7_4-2012-01-24-release:1.6
	gdb_7_4-branch:1.6.0.12
	gdb_7_4-2011-12-13-branchpoint:1.6
	gdb_7_3_1-2011-09-04-release:1.6
	gdb_7_3-2011-07-26-release:1.6
	gdb_7_3-branch:1.6.0.10
	gdb_7_3-2011-04-01-branchpoint:1.6
	gdb_7_2-2010-09-02-release:1.6
	gdb_7_2-branch:1.6.0.8
	gdb_7_2-2010-07-07-branchpoint:1.6
	gdb_7_1-2010-03-18-release:1.6
	gdb_7_1-branch:1.6.0.6
	gdb_7_1-2010-02-18-branchpoint:1.6
	gdb_7_0_1-2009-12-22-release:1.6
	gdb_7_0-2009-10-06-release:1.6
	gdb_7_0-branch:1.6.0.4
	gdb_7_0-2009-09-16-branchpoint:1.6
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.6.0.2
	msnyder-checkpoint-072509-branchpoint:1.6
	arc-insight_6_8-branch:1.1.0.12
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.10
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.2.0.4
	reverse-20081226-branchpoint:1.2
	multiprocess-20081120-branch:1.2.0.2
	multiprocess-20081120-branchpoint:1.2
	reverse-20080930-branch:1.1.0.8
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.6
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.4
	msnyder-reverse-20080609-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.2
	gdb_6_8-2008-02-26-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.01.14.22.03.10;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.06.16.20.18;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2013.02.07.04.43.35;	author dj;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.13.19.42.50;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.30.03.01.34;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.30.00.01.24;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.29.02.15.35;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.27.18.25.21;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.11.18.15.02;	author drow;	state Exp;
branches;
next	;


desc
@@


1.9
log
@merge from gcc
@
text
@/* decQuad module header for the decNumber C Library.
   Copyright (C) 2007-2015 Free Software Foundation, Inc.
   Contributed by IBM Corporation.  Author Mike Cowlishaw.

   This file is part of GCC.

   GCC is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 3, or (at your option) any later
   version.

   GCC is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/* ------------------------------------------------------------------ */
/* decQuad.h -- Decimal 128-bit format module header		      */
/* ------------------------------------------------------------------ */
/* This include file is always included by decSingle and decDouble,   */
/* and therefore also holds useful constants used by all three.       */

#if !defined(DECQUAD)
  #define DECQUAD

  #define DECQUADNAME	      "decimalQuad"	      /* Short name   */
  #define DECQUADTITLE	      "Decimal 128-bit datum" /* Verbose name */
  #define DECQUADAUTHOR       "Mike Cowlishaw"	      /* Who to blame */

  /* parameters for decQuads */
  #define DECQUAD_Bytes    16	   /* length			      */
  #define DECQUAD_Pmax	   34	   /* maximum precision (digits)      */
  #define DECQUAD_Emin	-6143	   /* minimum adjusted exponent       */
  #define DECQUAD_Emax	 6144	   /* maximum adjusted exponent       */
  #define DECQUAD_EmaxD     4	   /* maximum exponent digits	      */
  #define DECQUAD_Bias	 6176	   /* bias for the exponent	      */
  #define DECQUAD_String   43	   /* maximum string length, +1       */
  #define DECQUAD_EconL    12	   /* exponent continuation length    */
  #define DECQUAD_Declets  11	   /* count of declets		      */
  /* highest biased exponent (Elimit-1) */
  #define DECQUAD_Ehigh (DECQUAD_Emax + DECQUAD_Bias - (DECQUAD_Pmax-1))

  /* Required include						      */
  #include "decContext.h"

  /* The decQuad decimal 128-bit type, accessible by all sizes */
  typedef union {
    uint8_t   bytes[DECQUAD_Bytes];	/* fields: 1, 5, 12, 110 bits */
    uint16_t shorts[DECQUAD_Bytes/2];
    uint32_t  words[DECQUAD_Bytes/4];
    #if DECUSE64
    uint64_t  longs[DECQUAD_Bytes/8];
    #endif
    } decQuad;

  /* ---------------------------------------------------------------- */
  /* Shared constants						      */
  /* ---------------------------------------------------------------- */

  /* sign and special values [top 32-bits; last two bits are don't-care
     for Infinity on input, last bit don't-care for NaNs] */
  #define DECFLOAT_Sign  0x80000000	/* 1 00000 00 Sign */
  #define DECFLOAT_NaN	 0x7c000000	/* 0 11111 00 NaN generic */
  #define DECFLOAT_qNaN  0x7c000000	/* 0 11111 00 qNaN */
  #define DECFLOAT_sNaN  0x7e000000	/* 0 11111 10 sNaN */
  #define DECFLOAT_Inf	 0x78000000	/* 0 11110 00 Infinity */
  #define DECFLOAT_MinSp 0x78000000	/* minimum special value */
					/* [specials are all >=MinSp] */
  /* Sign nibble constants					      */
  #if !defined(DECPPLUSALT)
    #define DECPPLUSALT  0x0A /* alternate plus  nibble 	      */
    #define DECPMINUSALT 0x0B /* alternate minus nibble 	      */
    #define DECPPLUS	 0x0C /* preferred plus  nibble 	      */
    #define DECPMINUS	 0x0D /* preferred minus nibble 	      */
    #define DECPPLUSALT2 0x0E /* alternate plus  nibble 	      */
    #define DECPUNSIGNED 0x0F /* alternate plus  nibble (unsigned)    */
  #endif

  /* ---------------------------------------------------------------- */
  /* Routines -- implemented as decFloat routines in common files     */
  /* ---------------------------------------------------------------- */

  #include "decQuadSymbols.h"

  /* Utilities and conversions, extractors, etc.) */
  extern decQuad * decQuadFromBCD(decQuad *, int32_t, const uint8_t *, int32_t);
  extern decQuad * decQuadFromInt32(decQuad *, int32_t);
  extern decQuad * decQuadFromPacked(decQuad *, int32_t, const uint8_t *);
  extern decQuad * decQuadFromPackedChecked(decQuad *, int32_t, const uint8_t *);
  extern decQuad * decQuadFromString(decQuad *, const char *, decContext *);
  extern decQuad * decQuadFromUInt32(decQuad *, uint32_t);
  extern int32_t   decQuadGetCoefficient(const decQuad *, uint8_t *);
  extern int32_t   decQuadGetExponent(const decQuad *);
  extern decQuad * decQuadSetCoefficient(decQuad *, const uint8_t *, int32_t);
  extern decQuad * decQuadSetExponent(decQuad *, decContext *, int32_t);
  extern void	   decQuadShow(const decQuad *, const char *);
  extern int32_t   decQuadToBCD(const decQuad *, int32_t *, uint8_t *);
  extern char	 * decQuadToEngString(const decQuad *, char *);
  extern int32_t   decQuadToInt32(const decQuad *, decContext *, enum rounding);
  extern int32_t   decQuadToInt32Exact(const decQuad *, decContext *, enum rounding);
  extern int32_t   decQuadToPacked(const decQuad *, int32_t *, uint8_t *);
  extern char	 * decQuadToString(const decQuad *, char *);
  extern uint32_t  decQuadToUInt32(const decQuad *, decContext *, enum rounding);
  extern uint32_t  decQuadToUInt32Exact(const decQuad *, decContext *, enum rounding);
  extern decQuad * decQuadZero(decQuad *);

  /* Computational (result is a decQuad) */
  extern decQuad * decQuadAbs(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadAdd(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadAnd(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadDivide(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadDivideInteger(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadFMA(decQuad *, const decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadInvert(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadLogB(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMax(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMaxMag(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMin(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMinMag(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMinus(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadMultiply(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadNextMinus(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadNextPlus(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadNextToward(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadOr(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadPlus(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadQuantize(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadReduce(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadRemainder(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadRemainderNear(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadRotate(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadScaleB(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadShift(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadSubtract(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadToIntegralValue(decQuad *, const decQuad *, decContext *, enum rounding);
  extern decQuad * decQuadToIntegralExact(decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadXor(decQuad *, const decQuad *, const decQuad *, decContext *);

  /* Comparisons */
  extern decQuad * decQuadCompare(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadCompareSignal(decQuad *, const decQuad *, const decQuad *, decContext *);
  extern decQuad * decQuadCompareTotal(decQuad *, const decQuad *, const decQuad *);
  extern decQuad * decQuadCompareTotalMag(decQuad *, const decQuad *, const decQuad *);

  /* Copies */
  extern decQuad * decQuadCanonical(decQuad *, const decQuad *);
  extern decQuad * decQuadCopy(decQuad *, const decQuad *);
  extern decQuad * decQuadCopyAbs(decQuad *, const decQuad *);
  extern decQuad * decQuadCopyNegate(decQuad *, const decQuad *);
  extern decQuad * decQuadCopySign(decQuad *, const decQuad *, const decQuad *);

  /* Non-computational */
  extern enum decClass decQuadClass(const decQuad *);
  extern const char *  decQuadClassString(const decQuad *);
  extern uint32_t      decQuadDigits(const decQuad *);
  extern uint32_t      decQuadIsCanonical(const decQuad *);
  extern uint32_t      decQuadIsFinite(const decQuad *);
  extern uint32_t      decQuadIsInteger(const decQuad *);
  extern uint32_t      decQuadIsInfinite(const decQuad *);
  extern uint32_t      decQuadIsNaN(const decQuad *);
  extern uint32_t      decQuadIsNormal(const decQuad *);
  extern uint32_t      decQuadIsSignaling(const decQuad *);
  extern uint32_t      decQuadIsSignalling(const decQuad *);
  extern uint32_t      decQuadIsSigned(const decQuad *);
  extern uint32_t      decQuadIsSubnormal(const decQuad *);
  extern uint32_t      decQuadIsZero(const decQuad *);
  extern uint32_t      decQuadRadix(const decQuad *);
  extern uint32_t      decQuadSameQuantum(const decQuad *, const decQuad *);
  extern const char *  decQuadVersion(void);

  /* decNumber conversions; these are implemented as macros so as not  */
  /* to force a dependency on decimal128 and decNumber in decQuad.     */
  /* decQuadFromNumber returns a decimal128 * to avoid warnings.       */
  #define decQuadToNumber(dq, dn) decimal128ToNumber((decimal128 *)(dq), dn)
  #define decQuadFromNumber(dq, dn, set) decimal128FromNumber((decimal128 *)(dq), dn, set)

#endif
@


1.8
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 2007-2014 Free Software Foundation, Inc.
@


1.7
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 2007-2013 Free Software Foundation, Inc.
@


1.6
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 2007, 2009 Free Software Foundation, Inc.
@


1.5
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 2007 Free Software Foundation, Inc.
d9 1
a9 1
   Software Foundation; either version 2, or (at your option) any later
a11 9
   In addition to the permissions in the GNU General Public License,
   the Free Software Foundation gives you unlimited permission to link
   the compiled version of this file into combinations with other
   programs, and to distribute those combinations without any
   restriction coming from the use of this file.  (The General Public
   License restrictions do apply in other respects; for example, they
   cover modification of the file, and distribution when not linked
   into a combine executable.)

d17 8
a24 4
   You should have received a copy of the GNU General Public License
   along with GCC; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA
   02110-1301, USA.  */
@


1.4
log
@merge from gcc
@
text
@a33 2
/* Please see decFloats.h for an overview and documentation details.  */
/* ------------------------------------------------------------------ */
d35 1
a35 1
/* and therefore also holds useful constants used by all three.	      */
d42 1
a42 1
  #define DECQUADAUTHOR	      "Mike Cowlishaw"	      /* Who to blame */
d45 1
a45 1
  #define DECQUAD_Bytes	   16	   /* length			      */
d47 3
a49 3
  #define DECQUAD_Emin	-6143	   /* minimum adjusted exponent	      */
  #define DECQUAD_Emax	 6144	   /* maximum adjusted exponent	      */
  #define DECQUAD_EmaxD	    4	   /* maximum exponent digits	      */
d51 2
a52 2
  #define DECQUAD_String   43	   /* maximum string length, +1	      */
  #define DECQUAD_EconL	   12	   /* exponent continuation length    */
d60 1
a60 1
  /* The decQuad decimal 128-bit type, accessible by various types */
d62 1
a62 1
    uint8_t bytes[DECQUAD_Bytes];  /* fields: 1, 5, 12, 110 bits */
d64 4
a67 1
    uint32_t words[DECQUAD_Bytes/4];
d76 1
a76 1
  #define DECFLOAT_Sign	 0x80000000	/* 1 00000 00 Sign */
d78 2
a79 2
  #define DECFLOAT_qNaN	 0x7c000000	/* 0 11111 00 qNaN */
  #define DECFLOAT_sNaN	 0x7e000000	/* 0 11111 10 sNaN */
d85 6
a90 6
    #define DECPPLUSALT	 0x0A /* alternate plus	 nibble		      */
    #define DECPMINUSALT 0x0B /* alternate minus nibble		      */
    #define DECPPLUS	 0x0C /* preferred plus	 nibble		      */
    #define DECPMINUS	 0x0D /* preferred minus nibble		      */
    #define DECPPLUSALT2 0x0E /* alternate plus	 nibble		      */
    #define DECPUNSIGNED 0x0F /* alternate plus	 nibble (unsigned)    */
d103 1
d187 1
d189 1
a189 1
  #define decQuadFromNumber(dq, dn, set) (decQuad *)decimal128FromNumber((decimal128 *)(dq), dn, set)
@


1.3
log
@merge from gcc
@
text
@d34 2
d37 1
a37 1
/* and therefore also holds useful constants used by all three.       */
d44 1
a44 1
  #define DECQUADAUTHOR       "Mike Cowlishaw"	      /* Who to blame */
d47 1
a47 1
  #define DECQUAD_Bytes    16	   /* length			      */
d49 3
a51 3
  #define DECQUAD_Emin	-6143	   /* minimum adjusted exponent       */
  #define DECQUAD_Emax	 6144	   /* maximum adjusted exponent       */
  #define DECQUAD_EmaxD     4	   /* maximum exponent digits	      */
d53 2
a54 2
  #define DECQUAD_String   43	   /* maximum string length, +1       */
  #define DECQUAD_EconL    12	   /* exponent continuation length    */
d62 1
a62 1
  /* The decQuad decimal 128-bit type, accessible by all sizes */
d64 1
a64 1
    uint8_t   bytes[DECQUAD_Bytes];	/* fields: 1, 5, 12, 110 bits */
d66 1
a66 4
    uint32_t  words[DECQUAD_Bytes/4];
    #if DECUSE64
    uint64_t  longs[DECQUAD_Bytes/8];
    #endif
d75 1
a75 1
  #define DECFLOAT_Sign  0x80000000	/* 1 00000 00 Sign */
d77 2
a78 2
  #define DECFLOAT_qNaN  0x7c000000	/* 0 11111 00 qNaN */
  #define DECFLOAT_sNaN  0x7e000000	/* 0 11111 10 sNaN */
d84 6
a89 6
    #define DECPPLUSALT  0x0A /* alternate plus  nibble 	      */
    #define DECPMINUSALT 0x0B /* alternate minus nibble 	      */
    #define DECPPLUS	 0x0C /* preferred plus  nibble 	      */
    #define DECPMINUS	 0x0D /* preferred minus nibble 	      */
    #define DECPPLUSALT2 0x0E /* alternate plus  nibble 	      */
    #define DECPUNSIGNED 0x0F /* alternate plus  nibble (unsigned)    */
a101 1
  extern decQuad * decQuadFromPackedChecked(decQuad *, int32_t, const uint8_t *);
a184 1
  /* decQuadFromNumber returns a decimal128 * to avoid warnings.       */
d186 1
a186 1
  #define decQuadFromNumber(dq, dn, set) decimal128FromNumber((decimal128 *)(dq), dn, set)
@


1.2
log
@merge from gcc
@
text
@a33 2
/* Please see decFloats.h for an overview and documentation details.  */
/* ------------------------------------------------------------------ */
d35 1
a35 1
/* and therefore also holds useful constants used by all three.	      */
d42 1
a42 1
  #define DECQUADAUTHOR	      "Mike Cowlishaw"	      /* Who to blame */
d45 1
a45 1
  #define DECQUAD_Bytes	   16	   /* length			      */
d47 3
a49 3
  #define DECQUAD_Emin	-6143	   /* minimum adjusted exponent	      */
  #define DECQUAD_Emax	 6144	   /* maximum adjusted exponent	      */
  #define DECQUAD_EmaxD	    4	   /* maximum exponent digits	      */
d51 2
a52 2
  #define DECQUAD_String   43	   /* maximum string length, +1	      */
  #define DECQUAD_EconL	   12	   /* exponent continuation length    */
d60 1
a60 1
  /* The decQuad decimal 128-bit type, accessible by various types */
d62 1
a62 1
    uint8_t bytes[DECQUAD_Bytes];  /* fields: 1, 5, 12, 110 bits */
d64 4
a67 1
    uint32_t words[DECQUAD_Bytes/4];
d76 1
a76 1
  #define DECFLOAT_Sign	 0x80000000	/* 1 00000 00 Sign */
d78 2
a79 2
  #define DECFLOAT_qNaN	 0x7c000000	/* 0 11111 00 qNaN */
  #define DECFLOAT_sNaN	 0x7e000000	/* 0 11111 10 sNaN */
d85 6
a90 6
    #define DECPPLUSALT	 0x0A /* alternate plus	 nibble		      */
    #define DECPMINUSALT 0x0B /* alternate minus nibble		      */
    #define DECPPLUS	 0x0C /* preferred plus	 nibble		      */
    #define DECPMINUS	 0x0D /* preferred minus nibble		      */
    #define DECPPLUSALT2 0x0E /* alternate plus	 nibble		      */
    #define DECPUNSIGNED 0x0F /* alternate plus	 nibble (unsigned)    */
d103 1
d187 1
d189 1
a189 1
  #define decQuadFromNumber(dq, dn, set) (decQuad *)decimal128FromNumber((decimal128 *)(dq), dn, set)
@


1.1
log
@	* src-release (GDB_SUPPORT_DIRS): Add libdecnumber.
	* libdecnumber: New directory, imported from GCC.
@
text
@d62 2
a63 2
  /* The decQuad decimal 128-bit type, accessible by bytes */
  typedef struct {
d65 2
@

