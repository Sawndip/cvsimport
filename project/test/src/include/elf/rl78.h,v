head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	cygwin-1_7_35-release:1.3
	sid-snapshot-20150301:1.3
	cygwin-1_7_34-release:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	cygwin-1_7_33-release:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	cygwin-1_7_32-release:1.3
	sid-snapshot-20140801:1.3
	cygwin-1_7_31-release:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	cygwin-1_7_30-release:1.3
	sid-snapshot-20140501:1.3
	cygwin-1_7_29-release:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	cygwin-1_7_28-release:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	binutils-2_24-branch:1.3.0.2
	binutils-2_24-branchpoint:1.3
	sid-snapshot-20130901:1.3
	cygwin-1_7_25-release:1.3
	gdb_7_6_1-2013-08-30-release:1.2
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.2
	sid-snapshot-20130801:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	sid-snapshot-20130701:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	gdb_7_6-2013-04-26-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.10
	cygwin-64bit-premerge:1.2
	sid-snapshot-20130401:1.2
	binutils-2_23_2:1.2
	gdb_7_6-branch:1.2.0.8
	gdb_7_6-2013-03-12-branchpoint:1.2
	cygwin-1_7_18-release:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	gdb_7_5_1-2012-11-29-release:1.2
	binutils-2_23_1:1.2
	sid-snapshot-20121101:1.2
	binutils-2_23:1.2
	cygwin-1_7_17-release:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	gdb_7_5-2012-08-17-release:1.2
	cygwin-64bit-branch:1.2.0.6
	sid-snapshot-20120801:1.2
	binutils-2_23-branch:1.2.0.4
	binutils-2_23-branchpoint:1.2
	cygwin-1_7_16-release:1.2
	gdb_7_5-branch:1.2.0.2
	gdb_7_5-2012-07-18-branchpoint:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	cygwin-1_7_15-release:1.2
	sid-snapshot-20120501:1.2
	gdb_7_4_1-2012-04-26-release:1.1
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	sid-snapshot-20120201:1.2
	gdb_7_4-2012-01-24-release:1.1
	sid-snapshot-20120101:1.2
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1
	sid-snapshot-20111201:1.1
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@ * @;


1.3
date	2013.08.09.10.40.04;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.23.01.49.37;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.02.03.09.06;	author dj;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* elf32-rl78.c (rl78_elf_merge_private_bfd_data): Complain if G10
	flag bits do not match.
	(rl78_elf_print_private_bfd_data): Describe G10 flag.

	* readelf.c (get_machine_flags): Handle RL78 G10 flag.

	* config/tc-rl78.c (elf_flags): New variable.
	(enum options): Add OPTION_G10.
	(md_longopts): Add mg10.
	(md_parse_option): Parse -mg10.
	(rl78_elf_final_processing): New function.
	* config/tc-rl78.c (tc_final_processing): Define.
	* doc/c-rl78.texi: Document -mg10 option.

	* rl78.c (E_FLAG_RL78_G10): Define.

	* lib/ld-lib.exp (check_shared_lib_support): Note that the RL78
	does not support shared library generation.
@
text
@/* RL78 ELF support for BFD.
   Copyright (C) 2008-2013 Free Software Foundation, Inc.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */

#ifndef _ELF_RL78_H
#define _ELF_RL78_H

#include "elf/reloc-macros.h"

/* Note that there are a few internal relocation types used by the
   linker to do link-time relaxation.  If you update this file, please
   check elf32-rl78.c to see if any of the internal relocations need to
   be, er, relocated.  */

/* Preliminary relocations.  */
START_RELOC_NUMBERS (elf_rl78_reloc_type)

  RELOC_NUMBER (R_RL78_NONE,         0x00)
  /* These are for data, and are bi-endian.  */
  RELOC_NUMBER (R_RL78_DIR32,        0x01) /* Was: R_RL78_32.  */
  RELOC_NUMBER (R_RL78_DIR24S,       0x02) /* Was: R_RL78_24.  */
  RELOC_NUMBER (R_RL78_DIR16,        0x03)
  RELOC_NUMBER (R_RL78_DIR16U,       0x04) /* Was: R_RL78_16_UNS.  */
  RELOC_NUMBER (R_RL78_DIR16S,       0x05) /* Was: R_RL78_16.  */
  RELOC_NUMBER (R_RL78_DIR8,         0x06)
  RELOC_NUMBER (R_RL78_DIR8U,        0x07) /* Was: R_RL78_8_UNS.  */
  RELOC_NUMBER (R_RL78_DIR8S,        0x08) /* Was: R_RL78_8.  */

  /* Signed pc-relative values.  */
  RELOC_NUMBER (R_RL78_DIR24S_PCREL, 0x09) /* Was: R_RL78_24_PCREL.  */
  RELOC_NUMBER (R_RL78_DIR16S_PCREL, 0x0a) /* Was: R_RL78_16_PCREL.  */
  RELOC_NUMBER (R_RL78_DIR8S_PCREL,  0x0b) /* Was: R_RL78_8_PCREL.  */

  /* These are for fields in the instructions.  */
  RELOC_NUMBER (R_RL78_DIR16UL,      0x0c)
  RELOC_NUMBER (R_RL78_DIR16UW,      0x0d)
  RELOC_NUMBER (R_RL78_DIR8UL,       0x0e)
  RELOC_NUMBER (R_RL78_DIR8UW,       0x0f)
  RELOC_NUMBER (R_RL78_DIR32_REV,    0x10)
  RELOC_NUMBER (R_RL78_DIR16_REV,    0x11)
  RELOC_NUMBER (R_RL78_DIR3U_PCREL,  0x12)

  /* These are extensions added by Red Hat.  */
  RELOC_NUMBER (R_RL78_RH_RELAX,     0x2d) /* Marks opcodes suitable for linker relaxation.  */
  RELOC_NUMBER (R_RL78_RH_SFR,       0x2e) /* SFR addresses - internal use only.  */
  RELOC_NUMBER (R_RL78_RH_SADDR,     0x2f) /* SADDR addresses - internal use only..  */

  /* These are for complex relocs.  */
  RELOC_NUMBER (R_RL78_ABS32,        0x41)
  RELOC_NUMBER (R_RL78_ABS24S,       0x42)
  RELOC_NUMBER (R_RL78_ABS16,        0x43)
  RELOC_NUMBER (R_RL78_ABS16U,       0x44)
  RELOC_NUMBER (R_RL78_ABS16S,       0x45)
  RELOC_NUMBER (R_RL78_ABS8,         0x46)
  RELOC_NUMBER (R_RL78_ABS8U,        0x47)
  RELOC_NUMBER (R_RL78_ABS8S,        0x48)
  RELOC_NUMBER (R_RL78_ABS24S_PCREL, 0x49)
  RELOC_NUMBER (R_RL78_ABS16S_PCREL, 0x4a)
  RELOC_NUMBER (R_RL78_ABS8S_PCREL,  0x4b)
  RELOC_NUMBER (R_RL78_ABS16UL,      0x4c)
  RELOC_NUMBER (R_RL78_ABS16UW,      0x4d)
  RELOC_NUMBER (R_RL78_ABS8UL,       0x4e)
  RELOC_NUMBER (R_RL78_ABS8UW,       0x4f)
  RELOC_NUMBER (R_RL78_ABS32_REV,    0x50)
  RELOC_NUMBER (R_RL78_ABS16_REV,    0x51)

  RELOC_NUMBER (R_RL78_SYM,          0x80)
  RELOC_NUMBER (R_RL78_OPneg,        0x81)
  RELOC_NUMBER (R_RL78_OPadd,        0x82)
  RELOC_NUMBER (R_RL78_OPsub,        0x83)
  RELOC_NUMBER (R_RL78_OPmul,        0x84)
  RELOC_NUMBER (R_RL78_OPdiv,        0x85)
  RELOC_NUMBER (R_RL78_OPshla,       0x86)
  RELOC_NUMBER (R_RL78_OPshra,       0x87)
  RELOC_NUMBER (R_RL78_OPsctsize,    0x88)
  RELOC_NUMBER (R_RL78_OPscttop,     0x8d)
  RELOC_NUMBER (R_RL78_OPand,        0x90)
  RELOC_NUMBER (R_RL78_OPor,         0x91)
  RELOC_NUMBER (R_RL78_OPxor,        0x92)
  RELOC_NUMBER (R_RL78_OPnot,        0x93)
  RELOC_NUMBER (R_RL78_OPmod,        0x94)
  RELOC_NUMBER (R_RL78_OPromtop,     0x95)
  RELOC_NUMBER (R_RL78_OPramtop,     0x96)

END_RELOC_NUMBERS (R_RL78_max)

#define EF_RL78_CPU_RL78	0x00000079      /* FIXME: correct value?  */
#define EF_RL78_CPU_MASK	0x0000007F	/* specific cpu bits.  */
#define EF_RL78_ALL_FLAGS	(EF_RL78_CPU_MASK)

/* Values for the e_flags field in the ELF header.  */
#define E_FLAG_RL78_64BIT_DOUBLES	(1 << 0)
#define E_FLAG_RL78_DSP			(1 << 1) /* Defined in the RL78 CPU Object file specification, but not explained.  */
#define E_FLAG_RL78_G10			(1 << 2) /* CPU is missing register banks 1-3, so uses different ABI.  */

/* These define the addend field of R_RL78_RH_RELAX relocations.  */
#define	RL78_RELAXA_BRA		0x00000010	/* Any type of branch (must be decoded).  */
#define	RL78_RELAXA_ADDR16	0x00000020	/* addr16->sfr/saddr opportunity  */
#define RL78_RELAXA_RNUM	0x0000000f	/* Number of associated relocations.  */
/* These mark the place where alignment is requested, and the place where the filler bytes end.  */
#define	RL78_RELAXA_ALIGN	0x10000000	/* Start alignment; the remaining bits are the alignment value.  */
#define	RL78_RELAXA_ELIGN	0x20000000	/* End alignment; the remaining bits are the alignment value.  */
#define	RL78_RELAXA_ANUM	0x00ffffff	/* Alignment amount, in bytes (i.e. .balign).  */

#endif /* _ELF_RL78_H */
@


1.2
log
@[bfd]
	* elf32-rl78.c (rl78_elf_howto_table): Add R_RL78_RH_RELAX.
	(rl78_reloc_map): Add BFD_RELOC_RL78_RELAX.
	(rl78_elf_relocate_section): Add R_RL78_RH_RELAX, R_RL78_RH_SFR,
	and R_RL78_RH_SADDR.
	(rl78_elf_finish_dynamic_sections): Only validate PLT section if
	we didn't relax anything, as relaxing might remove a PLT reference
	after we've set up the table.
	(elf32_rl78_relax_delete_bytes): New.
	(reloc_bubblesort): New.
	(rl78_offset_for_reloc): New.
	(relax_addr16): New.
	(rl78_elf_relax_section): Add support for relaxing long
	instructions into short ones.

[gas]
	* config/rl78-defs.h (rl78_linkrelax_addr16): Add.
	(rl78_linkrelax_dsp, rl78_linkrelax_imm): Remove.
	* config/rl78-parse.y: Tag all addr16 and branch patterns with
	relaxation markers.
	* config/tc-rl78.c (rl78_linkrelax_addr16): New.
	(rl78_linkrelax_branch): New.
	(OPTION_RELAX): New.
	(md_longopts): Add relax option.
	(md_parse_option): Add OPTION_RELAX.
	(rl78_frag_init): Support relaxation.
	(rl78_handle_align): New.
	(md_assemble): Support relaxation.
	(md_apply_fix): Likewise.
	(md_convert_frag): Likewise.
	* config/tc-rl78.h (MAX_MEM_FOR_RS_ALIGN_CODE): New.
	(HANDLE_ALIGN): New.
	(rl78_handle_align): Declare.

	* config/rl78-parse.y (rl78_bit_insn): New.  Set it for all bit
	insn patterns.
	(find_bit_index): New.  Strip .BIT suffix off relevent
	expressions for bit insns.
	(rl78_lex): Exclude bit suffixes from expression parsing.

[include/elf]
	* rl78.h (R_RL78_RH_RELAX, R_RL78_RH_SFR, R_RL78_RH_SADDR): New.
	(RL78_RELAXA_BRA, RL78_RELAXA_ADDR16: New.
@
text
@d2 1
a2 1
   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.
d107 1
a107 1
#define E_FLAG_RL78_64BIT_DOUBLES		(1 << 0)
d109 1
@


1.1
log
@[.]
	* configure.ac (rl78-*-*) New case.
	* configure: Regenerate.

[bfd]
	* Makefile.am (ALL_MACHINES): Add cpu-rl78.lo.
	(ALL_MACHINES_CFILES): Add cpu-rl78.c.
	(BFD32_BACKENDS): Add elf32-rl78.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-rl78.c.
	(Makefile.in): Regenerate.
	* archures.c (bfd_architecture): Define bfd_arch_rl78.
	(bfd_archures_list): Add bfd_rl78_arch.
	* config.bfd: Add rl78-*-elf.
	* configure.in: Add bfd_elf32_rl78_vec.
	* reloc.c (bfd_reloc_code_type): Add BFD_RELOC_RL78_* relocations.
	* targets.c (bfd_target_vector): Add bfd_elf32_rl78_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* cpu-rl78.c: New file.
	* elf32-rl78.c: New file.

[binutils]
	* readelf.c: Include elf/rl78.h
	(guess_is_rela): Handle EM_RL78.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(is_32bit_abs_reloc): Likewise.
	* NEWS: Mention addition of RL78 support.
	* MAINTAINERS: Add myself as RL78 port maintainer.

[gas]
	* Makefile.am (TARGET_CPU_CFILES): Add tc-rl78.c.
	(TARGET_CPU_HFILES): Add rc-rl78.h.
	(EXTRA_DIST): Add rl78-parse.c and rl78-parse.y.
	(rl78-parse.c, rl78-parse.h, rl78-parse.o, rl78-defs.h): New rules.
	* Makefile.in: Regenerate.
	* configure.in: Add rl78 case.
	* configure: Regenerate.
	* configure.tgt: Add rl78 case.
	* config/rl78-defs.h: New file.
	* config/rl78-parse.y: New file.
	* config/tc-rl78.c: New file.
	* config/tc-rl78.h: New file.
	* NEWS: Add Renesas RL78.

	* doc/Makefile.am (c-rl78.texi): New.
	* doc/Makefile.in: Likewise.
	* doc/all.texi: Enable it.
	* doc/as.texi: Add it.

[include]
	* dis-asm.h (print_insn_rl78): Declare.

[include/elf]
	* common.h (EM_RL78, EM_78K0R): New.
	* rl78.h: New.

[include/opcode]
	* rl78.h: New file.

[ld]
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32rl78.c.
	(+eelf32rl78.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add rl78-*-* case.
	* emulparams/elf32rl78.sh: New file.
	* NEWS: Mention addition of Renesas RL78 support.

[opcodes]
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add rl78-decode.c and
	rl78-dis.c.
	(MAINTAINERCLEANFILES): Add rl78-decode.c.
	(rl78-decode.c): New rule, built from rl78-decode.opc and opc2c.
	* Makefile.in: Regenerate.
	* configure.in: Add bfd_rl78_arch case.
	* configure: Regenerate.
	* disassemble.c: Define ARCH_rl78.
	(disassembler): Add ARCH_rl78 case.
	* rl78-decode.c: New file.
	* rl78-decode.opc: New file.
	* rl78-dis.c: New file.
@
text
@d58 5
d111 2
a112 6
#define	RL78_RELAXA_IMM6	0x00000010	/* Imm8/16/24/32 at bit offset 6.  */
#define	RL78_RELAXA_IMM12	0x00000020	/* Imm8/16/24/32 at bit offset 12.  */
#define	RL78_RELAXA_DSP4	0x00000040	/* Dsp0/8/16 at bit offset 4.  */
#define	RL78_RELAXA_DSP6	0x00000080	/* Dsp0/8/16 at bit offset 6.  */
#define	RL78_RELAXA_DSP14	0x00000100	/* Dsp0/8/16 at bit offset 14.  */
#define	RL78_RELAXA_BRA	0x00000200	/* Any type of branch (must be decoded).  */
@

