head	1.47;
access;
symbols
	sid-snapshot-20180601:1.47
	sid-snapshot-20180501:1.47
	sid-snapshot-20180401:1.47
	sid-snapshot-20180301:1.47
	sid-snapshot-20180201:1.47
	sid-snapshot-20180101:1.47
	sid-snapshot-20171201:1.47
	sid-snapshot-20171101:1.47
	sid-snapshot-20171001:1.47
	sid-snapshot-20170901:1.47
	sid-snapshot-20170801:1.47
	sid-snapshot-20170701:1.47
	sid-snapshot-20170601:1.47
	sid-snapshot-20170501:1.47
	sid-snapshot-20170401:1.47
	sid-snapshot-20170301:1.47
	sid-snapshot-20170201:1.47
	sid-snapshot-20170101:1.47
	sid-snapshot-20161201:1.47
	sid-snapshot-20161101:1.47
	sid-snapshot-20160901:1.47
	sid-snapshot-20160801:1.47
	sid-snapshot-20160701:1.47
	sid-snapshot-20160601:1.47
	sid-snapshot-20160501:1.47
	sid-snapshot-20160401:1.47
	sid-snapshot-20160301:1.47
	sid-snapshot-20160201:1.47
	sid-snapshot-20160101:1.47
	sid-snapshot-20151201:1.47
	sid-snapshot-20151101:1.47
	sid-snapshot-20151001:1.47
	sid-snapshot-20150901:1.47
	sid-snapshot-20150801:1.47
	sid-snapshot-20150701:1.47
	sid-snapshot-20150601:1.47
	sid-snapshot-20150501:1.47
	sid-snapshot-20150401:1.47
	cygwin-1_7_35-release:1.47
	sid-snapshot-20150301:1.47
	cygwin-1_7_34-release:1.47
	sid-snapshot-20150201:1.47
	sid-snapshot-20150101:1.47
	sid-snapshot-20141201:1.47
	cygwin-1_7_33-release:1.47
	sid-snapshot-20141101:1.47
	sid-snapshot-20141001:1.47
	sid-snapshot-20140901:1.46
	cygwin-1_7_32-release:1.46
	sid-snapshot-20140801:1.46
	cygwin-1_7_31-release:1.46
	sid-snapshot-20140701:1.46
	sid-snapshot-20140601:1.46
	cygwin-1_7_30-release:1.46
	sid-snapshot-20140501:1.46
	cygwin-1_7_29-release:1.46
	sid-snapshot-20140401:1.46
	sid-snapshot-20140301:1.46
	cygwin-1_7_28-release:1.46
	sid-snapshot-20140201:1.46
	sid-snapshot-20140101:1.46
	sid-snapshot-20131201:1.45
	cygwin-1_7_27-release:1.45
	cygwin-1_7_26-release:1.45
	sid-snapshot-20131101:1.45
	sid-snapshot-20131001:1.45
	binutils-2_24-branch:1.45.0.4
	binutils-2_24-branchpoint:1.45
	binutils-2_21_1:1.37
	sid-snapshot-20130901:1.45
	cygwin-1_7_25-release:1.45
	gdb_7_6_1-2013-08-30-release:1.44
	cygwin-1_7_24-release:1.45
	cygwin-1_7_23-release:1.45
	sid-snapshot-20130801:1.45
	cygwin-1_7_22-release:1.45
	cygwin-1_7_21-release:1.45
	sid-snapshot-20130701:1.45
	cygwin-1_7_20-release:1.45
	cygwin-1_7_19-release:1.45
	sid-snapshot-20130601:1.45
	sid-snapshot-20130501:1.45
	gdb_7_6-2013-04-26-release:1.44
	cygwin-64bit-postmerge:1.45
	cygwin-64bit-premerge-branch:1.45.0.2
	cygwin-64bit-premerge:1.45
	sid-snapshot-20130401:1.44
	binutils-2_23_2:1.42
	gdb_7_6-branch:1.44.0.2
	gdb_7_6-2013-03-12-branchpoint:1.44
	cygwin-1_7_18-release:1.45
	sid-snapshot-20130301:1.44
	sid-snapshot-20130201:1.44
	sid-snapshot-20130101:1.44
	sid-snapshot-20121201:1.44
	gdb_7_5_1-2012-11-29-release:1.42
	binutils-2_23_1:1.42
	sid-snapshot-20121101:1.43
	binutils-2_23:1.42
	cygwin-1_7_17-release:1.43
	sid-snapshot-20121001:1.42
	sid-snapshot-20120901:1.42
	gdb_7_5-2012-08-17-release:1.42
	cygwin-64bit-branch:1.42.0.6
	sid-snapshot-20120801:1.42
	binutils-2_23-branch:1.42.0.4
	binutils-2_23-branchpoint:1.42
	cygwin-1_7_16-release:1.42
	gdb_7_5-branch:1.42.0.2
	gdb_7_5-2012-07-18-branchpoint:1.42
	sid-snapshot-20120701:1.42
	sid-snapshot-20120601:1.42
	cygwin-1_7_15-release:1.42
	sid-snapshot-20120501:1.42
	binutils-2_22_branch:1.39.0.4
	gdb_7_4_1-2012-04-26-release:1.41
	cygwin-1_7_14_2-release:1.42
	cygwin-1_7_14-release:1.42
	cygwin-1_7_12-release:1.42
	sid-snapshot-20120401:1.42
	sid-snapshot-20120301:1.42
	cygwin-1_7_11-release:1.42
	cygwin-1_7_10-release:1.42
	sid-snapshot-20120201:1.42
	gdb_7_4-2012-01-24-release:1.41
	sid-snapshot-20120101:1.41
	gdb_7_4-branch:1.41.0.2
	gdb_7_4-2011-12-13-branchpoint:1.41
	sid-snapshot-20111201:1.41
	binutils-2_22:1.39
	sid-snapshot-20111101:1.40
	sid-snapshot-20111001:1.40
	binutils-2_22-branch:1.39.0.2
	binutils-2_22-branchpoint:1.39
	gdb_7_3_1-2011-09-04-release:1.38.2.1
	sid-snapshot-20110901:1.39
	sid-snapshot-20110801:1.39
	gdb_7_3-2011-07-26-release:1.38.2.1
	sid-snapshot-20110701:1.39
	sid-snapshot-20110601:1.38
	sid-snapshot-20110501:1.38
	gdb_7_3-branch:1.38.0.2
	gdb_7_3-2011-04-01-branchpoint:1.38
	sid-snapshot-20110401:1.38
	cygwin-1_7_9-release:1.38
	sid-snapshot-20110301:1.38
	cygwin-1_7_8-release:1.38
	sid-snapshot-20110201:1.38
	sid-snapshot-20110101:1.37
	binutils-2_21:1.37
	sid-snapshot-20101201:1.37
	binutils-2_21-branch:1.37.0.6
	binutils-2_21-branchpoint:1.37
	sid-snapshot-20101101:1.37
	sid-snapshot-20101001:1.37
	binutils-2_20_1:1.34
	gdb_7_2-2010-09-02-release:1.37
	sid-snapshot-20100901:1.37
	cygwin-1_7_7-release:1.37
	sid-snapshot-20100801:1.37
	gdb_7_2-branch:1.37.0.4
	gdb_7_2-2010-07-07-branchpoint:1.37
	sid-snapshot-20100701:1.37
	sid-snapshot-20100601:1.37
	sid-snapshot-20100501:1.37
	cygwin-1_7_5-release:1.37
	cygwin-1_7_4-release:1.37
	sid-snapshot-20100401:1.37
	cygwin-1_7_3-release:1.37
	cygwin-1_7_2-release:1.37
	gdb_7_1-2010-03-18-release:1.37
	sid-snapshot-20100301:1.37
	gdb_7_1-branch:1.37.0.2
	gdb_7_1-2010-02-18-branchpoint:1.37
	sid-snapshot-20100201:1.36
	sid-snapshot-20100101:1.35
	gdb_7_0_1-2009-12-22-release:1.34
	cygwin-1_7_1-release:1.35
	sid-snapshot-20091201:1.35
	sid-snapshot-20091101:1.35
	binutils-2_20:1.34
	gdb_7_0-2009-10-06-release:1.34
	sid-snapshot-20091001:1.34
	gdb_7_0-branch:1.34.0.4
	gdb_7_0-2009-09-16-branchpoint:1.34
	arc-sim-20090309:1.26
	binutils-arc-20081103-branch:1.28.0.6
	binutils-arc-20081103-branchpoint:1.28
	binutils-2_20-branch:1.34.0.2
	binutils-2_20-branchpoint:1.34
	sid-snapshot-20090901:1.31
	sid-snapshot-20090801:1.31
	msnyder-checkpoint-072509-branch:1.31.0.2
	msnyder-checkpoint-072509-branchpoint:1.31
	sid-snapshot-20090701:1.30
	dje-cgen-play1-branch:1.30.0.2
	dje-cgen-play1-branchpoint:1.30
	sid-snapshot-20090601:1.30
	sid-snapshot-20090501:1.30
	sid-snapshot-20090401:1.30
	arc-20081103-branch:1.28.0.4
	arc-20081103-branchpoint:1.28
	arc-insight_6_8-branch:1.26.0.12
	arc-insight_6_8-branchpoint:1.26
	insight_6_8-branch:1.26.0.10
	insight_6_8-branchpoint:1.26
	sid-snapshot-20090301:1.29
	binutils-2_19_1:1.26
	sid-snapshot-20090201:1.29
	sid-snapshot-20090101:1.29
	reverse-20081226-branch:1.29.0.2
	reverse-20081226-branchpoint:1.29
	sid-snapshot-20081201:1.28
	multiprocess-20081120-branch:1.28.0.2
	multiprocess-20081120-branchpoint:1.28
	sid-snapshot-20081101:1.28
	binutils-2_19:1.26
	sid-snapshot-20081001:1.27
	reverse-20080930-branch:1.27.0.2
	reverse-20080930-branchpoint:1.27
	binutils-2_19-branch:1.26.0.8
	binutils-2_19-branchpoint:1.26
	sid-snapshot-20080901:1.26
	sid-snapshot-20080801:1.26
	reverse-20080717-branch:1.26.0.6
	reverse-20080717-branchpoint:1.26
	sid-snapshot-20080701:1.26
	msnyder-reverse-20080609-branch:1.26.0.4
	msnyder-reverse-20080609-branchpoint:1.26
	drow-reverse-20070409-branch:1.23.0.2
	drow-reverse-20070409-branchpoint:1.23
	sid-snapshot-20080601:1.26
	sid-snapshot-20080501:1.26
	sid-snapshot-20080403:1.26
	sid-snapshot-20080401:1.26
	gdb_6_8-2008-03-27-release:1.26
	sid-snapshot-20080301:1.26
	gdb_6_8-branch:1.26.0.2
	gdb_6_8-2008-02-26-branchpoint:1.26
	sid-snapshot-20080201:1.26
	sid-snapshot-20080101:1.25
	sid-snapshot-20071201:1.25
	sid-snapshot-20071101:1.25
	gdb_6_7_1-2007-10-29-release:1.25
	gdb_6_7-2007-10-10-release:1.25
	sid-snapshot-20071001:1.25
	gdb_6_7-branch:1.25.0.2
	gdb_6_7-2007-09-07-branchpoint:1.25
	binutils-2_18:1.24
	binutils-2_18-branch:1.24.0.2
	binutils-2_18-branchpoint:1.24
	insight_6_6-20070208-release:1.22
	binutils-csl-coldfire-4_1-32:1.22
	binutils-csl-sourcerygxx-4_1-32:1.22
	gdb_6_6-2006-12-18-release:1.22
	binutils-csl-innovasic-fido-3_4_4-33:1.22
	binutils-csl-sourcerygxx-3_4_4-32:1.18
	binutils-csl-coldfire-4_1-30:1.22
	binutils-csl-sourcerygxx-4_1-30:1.22
	binutils-csl-coldfire-4_1-28:1.22
	binutils-csl-sourcerygxx-4_1-29:1.22
	binutils-csl-sourcerygxx-4_1-28:1.22
	gdb_6_6-branch:1.22.0.24
	gdb_6_6-2006-11-15-branchpoint:1.22
	binutils-csl-arm-2006q3-27:1.22
	binutils-csl-sourcerygxx-4_1-27:1.22
	binutils-csl-arm-2006q3-26:1.22
	binutils-csl-sourcerygxx-4_1-26:1.22
	binutils-csl-sourcerygxx-4_1-25:1.22
	binutils-csl-sourcerygxx-4_1-24:1.22
	binutils-csl-sourcerygxx-4_1-23:1.22
	insight_6_5-20061003-release:1.22
	gdb-csl-symbian-6_4_50_20060226-12:1.22
	binutils-csl-sourcerygxx-4_1-21:1.22
	binutils-csl-arm-2006q3-21:1.22
	binutils-csl-sourcerygxx-4_1-22:1.22
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.22
	binutils-csl-sourcerygxx-4_1-20:1.22
	binutils-csl-arm-2006q3-19:1.22
	binutils-csl-sourcerygxx-4_1-19:1.22
	binutils-csl-sourcerygxx-4_1-18:1.22
	binutils-csl-renesas-4_1-9:1.22
	gdb-csl-sourcerygxx-3_4_4-25:1.21
	binutils-csl-sourcerygxx-3_4_4-25:1.18
	nickrob-async-20060828-mergepoint:1.22
	gdb-csl-symbian-6_4_50_20060226-11:1.22
	binutils-csl-renesas-4_1-8:1.22
	binutils-csl-renesas-4_1-7:1.22
	binutils-csl-renesas-4_1-6:1.22
	gdb-csl-sourcerygxx-4_1-17:1.22
	binutils-csl-sourcerygxx-4_1-17:1.22
	gdb-csl-20060226-branch-local-2:1.22
	cr-0x5f1:1.22.0.22
	gdb-csl-sourcerygxx-4_1-14:1.22
	binutils-csl-sourcerygxx-4_1-14:1.22
	binutils-csl-sourcerygxx-4_1-15:1.22
	gdb-csl-sourcerygxx-4_1-13:1.22
	binutils-csl-sourcerygxx-4_1-13:1.22
	binutils-2_17:1.22
	gdb-csl-sourcerygxx-4_1-12:1.22
	binutils-csl-sourcerygxx-4_1-12:1.22
	gdb-csl-sourcerygxx-3_4_4-21:1.22
	binutils-csl-sourcerygxx-3_4_4-21:1.22
	gdb_6_5-20060621-release:1.22
	binutils-csl-wrs-linux-3_4_4-24:1.18
	binutils-csl-wrs-linux-3_4_4-23:1.18
	gdb-csl-sourcerygxx-4_1-9:1.22
	binutils-csl-sourcerygxx-4_1-9:1.22
	gdb-csl-sourcerygxx-4_1-8:1.22
	binutils-csl-sourcerygxx-4_1-8:1.22
	gdb-csl-sourcerygxx-4_1-7:1.22
	binutils-csl-sourcerygxx-4_1-7:1.22
	gdb-csl-arm-2006q1-6:1.22
	binutils-csl-arm-2006q1-6:1.22
	gdb-csl-sourcerygxx-4_1-6:1.22
	binutils-csl-sourcerygxx-4_1-6:1.22
	binutils-csl-wrs-linux-3_4_4-22:1.18
	gdb-csl-symbian-6_4_50_20060226-10:1.22
	gdb-csl-symbian-6_4_50_20060226-9:1.22
	gdb-csl-symbian-6_4_50_20060226-8:1.22
	gdb-csl-coldfire-4_1-11:1.22
	binutils-csl-coldfire-4_1-11:1.22
	gdb-csl-sourcerygxx-3_4_4-19:1.22
	binutils-csl-sourcerygxx-3_4_4-19:1.22
	gdb-csl-coldfire-4_1-10:1.22
	gdb_6_5-branch:1.22.0.20
	gdb_6_5-2006-05-14-branchpoint:1.22
	binutils-csl-coldfire-4_1-10:1.22
	gdb-csl-sourcerygxx-4_1-5:1.22
	binutils-csl-sourcerygxx-4_1-5:1.22
	nickrob-async-20060513-branch:1.22.0.18
	nickrob-async-20060513-branchpoint:1.22
	gdb-csl-sourcerygxx-4_1-4:1.22
	binutils-csl-sourcerygxx-4_1-4:1.22
	msnyder-reverse-20060502-branch:1.22.0.16
	msnyder-reverse-20060502-branchpoint:1.22
	binutils-csl-wrs-linux-3_4_4-21:1.18
	gdb-csl-morpho-4_1-4:1.22
	binutils-csl-morpho-4_1-4:1.22
	gdb-csl-sourcerygxx-3_4_4-17:1.22
	binutils-csl-sourcerygxx-3_4_4-17:1.22
	binutils-csl-wrs-linux-3_4_4-20:1.18
	readline_5_1-import-branch:1.22.0.14
	readline_5_1-import-branchpoint:1.22
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.22
	binutils-2_17-branch:1.22.0.12
	binutils-2_17-branchpoint:1.22
	gdb-csl-symbian-20060226-branch:1.22.0.10
	gdb-csl-symbian-20060226-branchpoint:1.22
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.22
	msnyder-reverse-20060331-branch:1.22.0.8
	msnyder-reverse-20060331-branchpoint:1.22
	binutils-csl-2_17-branch:1.22.0.6
	binutils-csl-2_17-branchpoint:1.22
	gdb-csl-available-20060303-branch:1.22.0.4
	gdb-csl-available-20060303-branchpoint:1.22
	gdb-csl-20060226-branch:1.22.0.2
	gdb-csl-20060226-branchpoint:1.22
	gdb_6_4-20051202-release:1.21
	msnyder-fork-checkpoint-branch:1.21.0.10
	msnyder-fork-checkpoint-branchpoint:1.21
	gdb-csl-gxxpro-6_3-branch:1.21.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.21
	gdb_6_4-branch:1.21.0.6
	gdb_6_4-2005-11-01-branchpoint:1.21
	gdb-csl-arm-20051020-branch:1.21.0.4
	gdb-csl-arm-20051020-branchpoint:1.21
	binutils-csl-gxxpro-3_4-branch:1.18.0.14
	binutils-csl-gxxpro-3_4-branchpoint:1.18
	binutils-2_16_1:1.18
	msnyder-tracepoint-checkpoint-branch:1.21.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.21
	gdb-csl-arm-20050325-2005-q1b:1.18
	binutils-csl-arm-2005q1b:1.18
	binutils-2_16:1.18
	gdb-csl-arm-20050325-2005-q1a:1.18
	binutils-csl-arm-2005q1a:1.18
	csl-arm-20050325-branch:1.18.0.12
	csl-arm-20050325-branchpoint:1.18
	binutils-csl-arm-2005q1-branch:1.18.0.10
	binutils-csl-arm-2005q1-branchpoint:1.18
	binutils-2_16-branch:1.18.0.8
	binutils-2_16-branchpoint:1.18
	csl-arm-2004-q3d:1.18
	gdb_6_3-20041109-release:1.18
	gdb_6_3-branch:1.18.0.4
	gdb_6_3-20041019-branchpoint:1.18
	csl-arm-2004-q3:1.18
	drow_intercu-merge-20040921:1.18
	drow_intercu-merge-20040915:1.18
	jimb-gdb_6_2-e500-branch:1.18.0.6
	jimb-gdb_6_2-e500-branchpoint:1.18
	gdb_6_2-20040730-release:1.18
	gdb_6_2-branch:1.18.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.18
	gdb_6_1_1-20040616-release:1.17
	binutils-2_15:1.17
	binutils-2_15-branchpoint:1.17
	csl-arm-2004-q1a:1.17
	csl-arm-2004-q1:1.17
	gdb_6_1-2004-04-05-release:1.17
	drow_intercu-merge-20040402:1.17
	drow_intercu-merge-20040327:1.17
	ezannoni_pie-20040323-branch:1.17.0.14
	ezannoni_pie-20040323-branchpoint:1.17
	cagney_tramp-20040321-mergepoint:1.17
	cagney_tramp-20040309-branch:1.17.0.12
	cagney_tramp-20040309-branchpoint:1.17
	gdb_6_1-branch:1.17.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.17
	drow_intercu-20040221-branch:1.17.0.8
	drow_intercu-20040221-branchpoint:1.17
	binutils-2_15-branch:1.17.0.6
	cagney_bfdfile-20040213-branch:1.17.0.4
	cagney_bfdfile-20040213-branchpoint:1.17
	drow-cplus-merge-20040208:1.17
	carlton_dictionary-20040126-merge:1.17
	cagney_bigcore-20040122-branch:1.17.0.2
	cagney_bigcore-20040122-branchpoint:1.17
	drow-cplus-merge-20040113:1.15
	csl-arm-2003-q4:1.14
	drow-cplus-merge-20031224:1.14
	drow-cplus-merge-20031220:1.14
	carlton_dictionary-20031215-merge:1.14
	drow-cplus-merge-20031214:1.14
	carlton-dictionary-20031111-merge:1.14
	gdb_6_0-2003-10-04-release:1.13
	kettenis_sparc-20030918-branch:1.14.0.6
	kettenis_sparc-20030918-branchpoint:1.14
	carlton_dictionary-20030917-merge:1.14
	ezannoni_pie-20030916-branchpoint:1.14
	ezannoni_pie-20030916-branch:1.14.0.4
	cagney_x86i386-20030821-branch:1.14.0.2
	cagney_x86i386-20030821-branchpoint:1.14
	carlton_dictionary-20030805-merge:1.14
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.50
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.13.0.48
	jimb-ppc64-linux-20030613-branchpoint:1.13
	binutils-2_14:1.13
	cagney_convert-20030606-branch:1.13.0.46
	cagney_convert-20030606-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.13.0.44
	cagney_writestrings-20030508-branchpoint:1.13
	jimb-ppc64-linux-20030528-branch:1.13.0.42
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.40
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.13.0.38
	jimb-ppc64-linux-20030509-branchpoint:1.13
	kettenis_i386newframe-20030504-mergepoint:1.13
	carlton_dictionary-20030430-merge:1.13
	binutils-2_14-branch:1.13.0.36
	binutils-2_14-branchpoint:1.13
	kettenis_i386newframe-20030419-branch:1.13.0.34
	kettenis_i386newframe-20030419-branchpoint:1.13
	carlton_dictionary-20030416-merge:1.13
	cagney_frameaddr-20030409-mergepoint:1.13
	kettenis_i386newframe-20030406-branch:1.13.0.32
	kettenis_i386newframe-20030406-branchpoint:1.13
	cagney_frameaddr-20030403-branchpoint:1.13
	cagney_frameaddr-20030403-branch:1.13.0.30
	cagney_framebase-20030330-mergepoint:1.13
	cagney_framebase-20030326-branch:1.13.0.28
	cagney_framebase-20030326-branchpoint:1.13
	cagney_lazyid-20030317-branch:1.13.0.26
	cagney_lazyid-20030317-branchpoint:1.13
	kettenis-i386newframe-20030316-mergepoint:1.13
	offbyone-20030313-branch:1.13.0.24
	offbyone-20030313-branchpoint:1.13
	kettenis-i386newframe-20030308-branch:1.13.0.22
	kettenis-i386newframe-20030308-branchpoint:1.13
	carlton_dictionary-20030305-merge:1.13
	cagney_offbyone-20030303-branch:1.13.0.20
	cagney_offbyone-20030303-branchpoint:1.13
	w32api-2_2:1.13
	mingw-runtime-2_4:1.13
	carlton_dictionary-20030207-merge:1.13
	interps-20030202-branch:1.13.0.18
	interps-20030202-branchpoint:1.13
	cagney-unwind-20030108-branch:1.13.0.16
	cagney-unwind-20030108-branchpoint:1.13
	binutils-2_13_2_1:1.13
	binutils-2_13_2:1.13
	carlton_dictionary-20021223-merge:1.13
	gdb_5_3-2002-12-12-release:1.13
	carlton_dictionary-20021115-merge:1.13
	binutils-2_13_1:1.13
	kseitz_interps-20021105-merge:1.13
	kseitz_interps-20021103-merge:1.13
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.13
	carlton_dictionary-20021025-merge:1.13
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.14
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.13
	carlton_dictionary-20020927-merge:1.13
	carlton_dictionary-branch:1.13.0.12
	carlton_dictionary-20020920-branchpoint:1.13
	sid-20020905-branchpoint:1.13
	sid-20020905-branch:1.13.0.10
	gdb_5_3-branch:1.13.0.8
	gdb_5_3-2002-09-04-branchpoint:1.13
	kseitz_interps-20020829-merge:1.13
	cagney_sysregs-20020825-branch:1.13.0.6
	cagney_sysregs-20020825-branchpoint:1.13
	readline_4_3-import-branch:1.13.0.4
	readline_4_3-import-branchpoint:1.13
	binutils-2_13:1.13
	gdb_5_2_1-2002-07-23-release:1.12
	binutils-2_13-branchpoint:1.13
	binutils-2_13-branch:1.13.0.2
	kseitz_interps-20020528-branch:1.12.0.10
	kseitz_interps-20020528-branchpoint:1.12
	cagney_regbuf-20020515-branch:1.12.0.8
	cagney_regbuf-20020515-branchpoint:1.12
	binutils-2_12_1:1.12
	jimb-macro-020506-branch:1.12.0.6
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.12
	binutils-2_12:1.12
	gdb_5_2-branch:1.12.0.4
	gdb_5_2-2002-03-03-branchpoint:1.12
	binutils-2_12-branch:1.12.0.2
	binutils-2_12-branchpoint:1.12
	gdb_5_1_1-2002-01-24-release:1.8
	gdb_5_1_0_1-2002-01-03-release:1.8
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.4
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.2
	gdb_5_1-2001-07-29-branchpoint:1.8
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.5
	binutils-2_11-branch:1.4.0.2
	insight-precleanup-2001-01-01:1.4
	binutils-2_10_1:1.1.1.1.2.1
	binutils-2_10:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	egcs_20000222:1.1.1.1
	binutils_latest_snapshot:1.46
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.47
date	2014.09.28.17.46.07;	author dj;	state Exp;
branches;
next	1.46;

1.46
date	2013.12.23.18.30.21;	author dj;	state Exp;
branches;
next	1.45;

1.45
date	2013.04.03.18.21.40;	author dj;	state Exp;
branches;
next	1.44;

1.44
date	2012.11.11.22.37.19;	author dj;	state Exp;
branches;
next	1.43;

1.43
date	2012.10.10.03.11.22;	author dj;	state Exp;
branches;
next	1.42;

1.42
date	2012.01.07.02.53.16;	author jason;	state Exp;
branches;
next	1.41;

1.41
date	2011.11.08.16.01.51;	author dj;	state Exp;
branches;
next	1.40;

1.40
date	2011.09.23.22.21.28;	author dj;	state Exp;
branches;
next	1.39;

1.39
date	2011.06.13.23.01.42;	author dj;	state Exp;
branches;
next	1.38;

1.38
date	2011.01.03.21.05.50;	author dj;	state Exp;
branches
	1.38.2.1;
next	1.37;

1.37
date	2010.02.03.23.27.54;	author dj;	state Exp;
branches;
next	1.36;

1.36
date	2010.01.11.19.12.42;	author dj;	state Exp;
branches;
next	1.35;

1.35
date	2009.10.02.18.22.51;	author dj;	state Exp;
branches;
next	1.34;

1.34
date	2009.09.03.02.02.48;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2009.09.02.16.08.35;	author dj;	state Exp;
branches;
next	1.32;

1.32
date	2009.09.02.07.21.39;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2009.07.17.20.20.39;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.18.00.07.38;	author dj;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.10.23.28.15;	author dj;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.07.01.27.53;	author dj;	state Exp;
branches;
next	1.27;

1.27
date	2008.09.09.18.21.42;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2008.01.27.06.25.45;	author daney;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.31.20.20.44;	author dj;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.26.03.13.46;	author dj;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.30.23.16.53;	author dj;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.11.02.16.04;	author dj;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.25.23.32.35;	author rth;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.10.10.21.08;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.27.05.28.29;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.04.20.06.15;	author dj;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.13.03.07.16;	author ian;	state Exp;
branches
	1.17.8.1;
next	1.16;

1.16
date	2004.01.13.01.51.08;	author ian;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.12.21.24.18;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.06.21.44.55;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.25.01.03.52;	author dj;	state Exp;
branches
	1.13.12.1
	1.13.14.1;
next	1.12;

1.12
date	2002.02.05.17.53.03;	author dj;	state Exp;
branches
	1.12.10.1;
next	1.11;

1.11
date	2002.02.03.13.12.31;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.06.21.57.28;	author rth;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.07.17.23.43;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.08.14.34.36;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.20.18.22.38;	author jimb;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.14.02.27.43;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.02.18.58.10;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.05.16.49.47;	author dj;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.11.15.11.47.51;	author hp;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.15.20.47.02;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.01;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.38.2.1
date	2011.07.02.19.45.27;	author jkratoch;	state Exp;
branches;
next	;

1.17.8.1
date	2004.09.16.17.01.49;	author drow;	state Exp;
branches;
next	;

1.13.12.1
date	2003.08.05.17.13.26;	author carlton;	state Exp;
branches;
next	1.13.12.2;

1.13.12.2
date	2004.01.26.19.11.45;	author carlton;	state Exp;
branches;
next	;

1.13.14.1
date	2003.12.14.20.27.59;	author drow;	state Exp;
branches;
next	1.13.14.2;

1.13.14.2
date	2004.01.13.16.12.15;	author drow;	state Exp;
branches;
next	1.13.14.3;

1.13.14.3
date	2004.02.09.19.43.58;	author drow;	state Exp;
branches;
next	;

1.12.10.1
date	2002.07.22.21.47.13;	author kseitz;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.07.03.21.38;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.01;	author rth;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	2000.10.23.09.43.13;	author pb;	state Exp;
branches;
next	;


desc
@@


1.47
log
@merge from gcc
@
text
@/* Defs for interface to demanglers.
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002,
   2003, 2004, 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
   
   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License
   as published by the Free Software Foundation; either version 2, or
   (at your option) any later version.

   In addition to the permissions in the GNU Library General Public
   License, the Free Software Foundation gives you unlimited
   permission to link the compiled version of this file into
   combinations with other programs, and to distribute those
   combinations without any restriction coming from the use of this
   file.  (The Library Public License restrictions do apply in other
   respects; for example, they cover modification of the file, and
   distribution when not linked into a combined executable.)

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */


#if !defined (DEMANGLE_H)
#define DEMANGLE_H

#include "libiberty.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* Options passed to cplus_demangle (in 2nd parameter). */

#define DMGL_NO_OPTS	 0		/* For readability... */
#define DMGL_PARAMS	 (1 << 0)	/* Include function args */
#define DMGL_ANSI	 (1 << 1)	/* Include const, volatile, etc */
#define DMGL_JAVA	 (1 << 2)	/* Demangle as Java rather than C++. */
#define DMGL_VERBOSE	 (1 << 3)	/* Include implementation details.  */
#define DMGL_TYPES	 (1 << 4)	/* Also try to demangle type encodings.  */
#define DMGL_RET_POSTFIX (1 << 5)       /* Print function return types (when
					   present) after function signature.
					   It applies only to the toplevel
					   function type.  */
#define DMGL_RET_DROP	 (1 << 6)       /* Suppress printing function return
					   types, even if present.  It applies
					   only to the toplevel function type.
					   */

#define DMGL_AUTO	 (1 << 8)
#define DMGL_GNU	 (1 << 9)
#define DMGL_LUCID	 (1 << 10)
#define DMGL_ARM	 (1 << 11)
#define DMGL_HP 	 (1 << 12)       /* For the HP aCC compiler;
                                            same as ARM except for
                                            template arguments, etc. */
#define DMGL_EDG	 (1 << 13)
#define DMGL_GNU_V3	 (1 << 14)
#define DMGL_GNAT	 (1 << 15)
#define DMGL_DLANG	 (1 << 16)

/* If none of these are set, use 'current_demangling_style' as the default. */
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG|DMGL_GNU_V3|DMGL_JAVA|DMGL_GNAT|DMGL_DLANG)

/* Enumeration of possible demangling styles.

   Lucid and ARM styles are still kept logically distinct, even though
   they now both behave identically.  The resulting style is actual the
   union of both.  I.E. either style recognizes both "__pt__" and "__rf__"
   for operator "->", even though the first is lucid style and the second
   is ARM style. (FIXME?) */

extern enum demangling_styles
{
  no_demangling = -1,
  unknown_demangling = 0,
  auto_demangling = DMGL_AUTO,
  gnu_demangling = DMGL_GNU,
  lucid_demangling = DMGL_LUCID,
  arm_demangling = DMGL_ARM,
  hp_demangling = DMGL_HP,
  edg_demangling = DMGL_EDG,
  gnu_v3_demangling = DMGL_GNU_V3,
  java_demangling = DMGL_JAVA,
  gnat_demangling = DMGL_GNAT,
  dlang_demangling = DMGL_DLANG
} current_demangling_style;

/* Define string names for the various demangling styles. */

#define NO_DEMANGLING_STYLE_STRING            "none"
#define AUTO_DEMANGLING_STYLE_STRING	      "auto"
#define GNU_DEMANGLING_STYLE_STRING    	      "gnu"
#define LUCID_DEMANGLING_STYLE_STRING	      "lucid"
#define ARM_DEMANGLING_STYLE_STRING	      "arm"
#define HP_DEMANGLING_STYLE_STRING	      "hp"
#define EDG_DEMANGLING_STYLE_STRING	      "edg"
#define GNU_V3_DEMANGLING_STYLE_STRING        "gnu-v3"
#define JAVA_DEMANGLING_STYLE_STRING          "java"
#define GNAT_DEMANGLING_STYLE_STRING          "gnat"
#define DLANG_DEMANGLING_STYLE_STRING         "dlang"

/* Some macros to test what demangling style is active. */

#define CURRENT_DEMANGLING_STYLE current_demangling_style
#define AUTO_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_AUTO)
#define GNU_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_GNU)
#define LUCID_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_LUCID)
#define ARM_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_ARM)
#define HP_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_HP)
#define EDG_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_EDG)
#define GNU_V3_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_GNU_V3)
#define JAVA_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_JAVA)
#define GNAT_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_GNAT)
#define DLANG_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_DLANG)

/* Provide information about the available demangle styles. This code is
   pulled from gdb into libiberty because it is useful to binutils also.  */

extern const struct demangler_engine
{
  const char *const demangling_style_name;
  const enum demangling_styles demangling_style;
  const char *const demangling_style_doc;
} libiberty_demanglers[];

extern char *
cplus_demangle (const char *mangled, int options);

extern int
cplus_demangle_opname (const char *opname, char *result, int options);

extern const char *
cplus_mangle_opname (const char *opname, int options);

/* Note: This sets global state.  FIXME if you care about multi-threading. */

extern void
set_cplus_marker_for_demangling (int ch);

extern enum demangling_styles 
cplus_demangle_set_style (enum demangling_styles style);

extern enum demangling_styles 
cplus_demangle_name_to_style (const char *name);

/* Callback typedef for allocation-less demangler interfaces. */
typedef void (*demangle_callbackref) (const char *, size_t, void *);

/* V3 ABI demangling entry points, defined in cp-demangle.c.  Callback
   variants return non-zero on success, zero on error.  char* variants
   return a string allocated by malloc on success, NULL on error.  */
extern int
cplus_demangle_v3_callback (const char *mangled, int options,
                            demangle_callbackref callback, void *opaque);

extern char*
cplus_demangle_v3 (const char *mangled, int options);

extern int
java_demangle_v3_callback (const char *mangled,
                           demangle_callbackref callback, void *opaque);

extern char*
java_demangle_v3 (const char *mangled);

char *
ada_demangle (const char *mangled, int options);

extern char *
dlang_demangle (const char *mangled, int options);

enum gnu_v3_ctor_kinds {
  gnu_v3_complete_object_ctor = 1,
  gnu_v3_base_object_ctor,
  gnu_v3_complete_object_allocating_ctor,
  /* These are not part of the V3 ABI.  Unified constructors are generated
     as a speed-for-space optimization when the -fdeclone-ctor-dtor option
     is used, and are always internal symbols.  */
  gnu_v3_unified_ctor,
  gnu_v3_object_ctor_group
};

/* Return non-zero iff NAME is the mangled form of a constructor name
   in the G++ V3 ABI demangling style.  Specifically, return an `enum
   gnu_v3_ctor_kinds' value indicating what kind of constructor
   it is.  */
extern enum gnu_v3_ctor_kinds
	is_gnu_v3_mangled_ctor (const char *name);


enum gnu_v3_dtor_kinds {
  gnu_v3_deleting_dtor = 1,
  gnu_v3_complete_object_dtor,
  gnu_v3_base_object_dtor,
  /* These are not part of the V3 ABI.  Unified destructors are generated
     as a speed-for-space optimization when the -fdeclone-ctor-dtor option
     is used, and are always internal symbols.  */
  gnu_v3_unified_dtor,
  gnu_v3_object_dtor_group
};

/* Return non-zero iff NAME is the mangled form of a destructor name
   in the G++ V3 ABI demangling style.  Specifically, return an `enum
   gnu_v3_dtor_kinds' value, indicating what kind of destructor
   it is.  */
extern enum gnu_v3_dtor_kinds
	is_gnu_v3_mangled_dtor (const char *name);

/* The V3 demangler works in two passes.  The first pass builds a tree
   representation of the mangled name, and the second pass turns the
   tree representation into a demangled string.  Here we define an
   interface to permit a caller to build their own tree
   representation, which they can pass to the demangler to get a
   demangled string.  This can be used to canonicalize user input into
   something which the demangler might output.  It could also be used
   by other demanglers in the future.  */

/* These are the component types which may be found in the tree.  Many
   component types have one or two subtrees, referred to as left and
   right (a component type with only one subtree puts it in the left
   subtree).  */

enum demangle_component_type
{
  /* A name, with a length and a pointer to a string.  */
  DEMANGLE_COMPONENT_NAME,
  /* A qualified name.  The left subtree is a class or namespace or
     some such thing, and the right subtree is a name qualified by
     that class.  */
  DEMANGLE_COMPONENT_QUAL_NAME,
  /* A local name.  The left subtree describes a function, and the
     right subtree is a name which is local to that function.  */
  DEMANGLE_COMPONENT_LOCAL_NAME,
  /* A typed name.  The left subtree is a name, and the right subtree
     describes that name as a function.  */
  DEMANGLE_COMPONENT_TYPED_NAME,
  /* A template.  The left subtree is a template name, and the right
     subtree is a template argument list.  */
  DEMANGLE_COMPONENT_TEMPLATE,
  /* A template parameter.  This holds a number, which is the template
     parameter index.  */
  DEMANGLE_COMPONENT_TEMPLATE_PARAM,
  /* A function parameter.  This holds a number, which is the index.  */
  DEMANGLE_COMPONENT_FUNCTION_PARAM,
  /* A constructor.  This holds a name and the kind of
     constructor.  */
  DEMANGLE_COMPONENT_CTOR,
  /* A destructor.  This holds a name and the kind of destructor.  */
  DEMANGLE_COMPONENT_DTOR,
  /* A vtable.  This has one subtree, the type for which this is a
     vtable.  */
  DEMANGLE_COMPONENT_VTABLE,
  /* A VTT structure.  This has one subtree, the type for which this
     is a VTT.  */
  DEMANGLE_COMPONENT_VTT,
  /* A construction vtable.  The left subtree is the type for which
     this is a vtable, and the right subtree is the derived type for
     which this vtable is built.  */
  DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE,
  /* A typeinfo structure.  This has one subtree, the type for which
     this is the tpeinfo structure.  */
  DEMANGLE_COMPONENT_TYPEINFO,
  /* A typeinfo name.  This has one subtree, the type for which this
     is the typeinfo name.  */
  DEMANGLE_COMPONENT_TYPEINFO_NAME,
  /* A typeinfo function.  This has one subtree, the type for which
     this is the tpyeinfo function.  */
  DEMANGLE_COMPONENT_TYPEINFO_FN,
  /* A thunk.  This has one subtree, the name for which this is a
     thunk.  */
  DEMANGLE_COMPONENT_THUNK,
  /* A virtual thunk.  This has one subtree, the name for which this
     is a virtual thunk.  */
  DEMANGLE_COMPONENT_VIRTUAL_THUNK,
  /* A covariant thunk.  This has one subtree, the name for which this
     is a covariant thunk.  */
  DEMANGLE_COMPONENT_COVARIANT_THUNK,
  /* A Java class.  This has one subtree, the type.  */
  DEMANGLE_COMPONENT_JAVA_CLASS,
  /* A guard variable.  This has one subtree, the name for which this
     is a guard variable.  */
  DEMANGLE_COMPONENT_GUARD,
  /* The init and wrapper functions for C++11 thread_local variables.  */
  DEMANGLE_COMPONENT_TLS_INIT,
  DEMANGLE_COMPONENT_TLS_WRAPPER,
  /* A reference temporary.  This has one subtree, the name for which
     this is a temporary.  */
  DEMANGLE_COMPONENT_REFTEMP,
  /* A hidden alias.  This has one subtree, the encoding for which it
     is providing alternative linkage.  */
  DEMANGLE_COMPONENT_HIDDEN_ALIAS,
  /* A standard substitution.  This holds the name of the
     substitution.  */
  DEMANGLE_COMPONENT_SUB_STD,
  /* The restrict qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT,
  /* The volatile qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE,
  /* The const qualifier.  The one subtree is the type which is being
     qualified.  */
  DEMANGLE_COMPONENT_CONST,
  /* The restrict qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT_THIS,
  /* The volatile qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE_THIS,
  /* The const qualifier modifying a member function.  The one subtree
     is the type which is being qualified.  */
  DEMANGLE_COMPONENT_CONST_THIS,
  /* C++11 A reference modifying a member function.  The one subtree is the
     type which is being referenced.  */
  DEMANGLE_COMPONENT_REFERENCE_THIS,
  /* C++11: An rvalue reference modifying a member function.  The one
     subtree is the type which is being referenced.  */
  DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS,
  /* A vendor qualifier.  The left subtree is the type which is being
     qualified, and the right subtree is the name of the
     qualifier.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,
  /* A pointer.  The one subtree is the type which is being pointed
     to.  */
  DEMANGLE_COMPONENT_POINTER,
  /* A reference.  The one subtree is the type which is being
     referenced.  */
  DEMANGLE_COMPONENT_REFERENCE,
  /* C++0x: An rvalue reference.  The one subtree is the type which is
     being referenced.  */
  DEMANGLE_COMPONENT_RVALUE_REFERENCE,
  /* A complex type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_COMPLEX,
  /* An imaginary type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_IMAGINARY,
  /* A builtin type.  This holds the builtin type information.  */
  DEMANGLE_COMPONENT_BUILTIN_TYPE,
  /* A vendor's builtin type.  This holds the name of the type.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE,
  /* A function type.  The left subtree is the return type.  The right
     subtree is a list of ARGLIST nodes.  Either or both may be
     NULL.  */
  DEMANGLE_COMPONENT_FUNCTION_TYPE,
  /* An array type.  The left subtree is the dimension, which may be
     NULL, or a string (represented as DEMANGLE_COMPONENT_NAME), or an
     expression.  The right subtree is the element type.  */
  DEMANGLE_COMPONENT_ARRAY_TYPE,
  /* A pointer to member type.  The left subtree is the class type,
     and the right subtree is the member type.  CV-qualifiers appear
     on the latter.  */
  DEMANGLE_COMPONENT_PTRMEM_TYPE,
  /* A fixed-point type.  */
  DEMANGLE_COMPONENT_FIXED_TYPE,
  /* A vector type.  The left subtree is the number of elements,
     the right subtree is the element type.  */
  DEMANGLE_COMPONENT_VECTOR_TYPE,
  /* An argument list.  The left subtree is the current argument, and
     the right subtree is either NULL or another ARGLIST node.  */
  DEMANGLE_COMPONENT_ARGLIST,
  /* A template argument list.  The left subtree is the current
     template argument, and the right subtree is either NULL or
     another TEMPLATE_ARGLIST node.  */
  DEMANGLE_COMPONENT_TEMPLATE_ARGLIST,
  /* An initializer list.  The left subtree is either an explicit type or
     NULL, and the right subtree is a DEMANGLE_COMPONENT_ARGLIST.  */
  DEMANGLE_COMPONENT_INITIALIZER_LIST,
  /* An operator.  This holds information about a standard
     operator.  */
  DEMANGLE_COMPONENT_OPERATOR,
  /* An extended operator.  This holds the number of arguments, and
     the name of the extended operator.  */
  DEMANGLE_COMPONENT_EXTENDED_OPERATOR,
  /* A typecast, represented as a unary operator.  The one subtree is
     the type to which the argument should be cast.  */
  DEMANGLE_COMPONENT_CAST,
  /* A nullary expression.  The left subtree is the operator.  */
  DEMANGLE_COMPONENT_NULLARY,
  /* A unary expression.  The left subtree is the operator, and the
     right subtree is the single argument.  */
  DEMANGLE_COMPONENT_UNARY,
  /* A binary expression.  The left subtree is the operator, and the
     right subtree is a BINARY_ARGS.  */
  DEMANGLE_COMPONENT_BINARY,
  /* Arguments to a binary expression.  The left subtree is the first
     argument, and the right subtree is the second argument.  */
  DEMANGLE_COMPONENT_BINARY_ARGS,
  /* A trinary expression.  The left subtree is the operator, and the
     right subtree is a TRINARY_ARG1.  */
  DEMANGLE_COMPONENT_TRINARY,
  /* Arguments to a trinary expression.  The left subtree is the first
     argument, and the right subtree is a TRINARY_ARG2.  */
  DEMANGLE_COMPONENT_TRINARY_ARG1,
  /* More arguments to a trinary expression.  The left subtree is the
     second argument, and the right subtree is the third argument.  */
  DEMANGLE_COMPONENT_TRINARY_ARG2,
  /* A literal.  The left subtree is the type, and the right subtree
     is the value, represented as a DEMANGLE_COMPONENT_NAME.  */
  DEMANGLE_COMPONENT_LITERAL,
  /* A negative literal.  Like LITERAL, but the value is negated.
     This is a minor hack: the NAME used for LITERAL points directly
     to the mangled string, but since negative numbers are mangled
     using 'n' instead of '-', we want a way to indicate a negative
     number which involves neither modifying the mangled string nor
     allocating a new copy of the literal in memory.  */
  DEMANGLE_COMPONENT_LITERAL_NEG,
  /* A libgcj compiled resource.  The left subtree is the name of the
     resource.  */
  DEMANGLE_COMPONENT_JAVA_RESOURCE,
  /* A name formed by the concatenation of two parts.  The left
     subtree is the first part and the right subtree the second.  */
  DEMANGLE_COMPONENT_COMPOUND_NAME,
  /* A name formed by a single character.  */
  DEMANGLE_COMPONENT_CHARACTER,
  /* A number.  */
  DEMANGLE_COMPONENT_NUMBER,
  /* A decltype type.  */
  DEMANGLE_COMPONENT_DECLTYPE,
  /* Global constructors keyed to name.  */
  DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS,
  /* Global destructors keyed to name.  */
  DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS,
  /* A lambda closure type.  */
  DEMANGLE_COMPONENT_LAMBDA,
  /* A default argument scope.  */
  DEMANGLE_COMPONENT_DEFAULT_ARG,
  /* An unnamed type.  */
  DEMANGLE_COMPONENT_UNNAMED_TYPE,
  /* A transactional clone.  This has one subtree, the encoding for
     which it is providing alternative linkage.  */
  DEMANGLE_COMPONENT_TRANSACTION_CLONE,
  /* A non-transactional clone entry point.  In the i386/x86_64 abi,
     the unmangled symbol of a tm_callable becomes a thunk and the
     non-transactional function version is mangled thus.  */
  DEMANGLE_COMPONENT_NONTRANSACTION_CLONE,
  /* A pack expansion.  */
  DEMANGLE_COMPONENT_PACK_EXPANSION,
  /* A name with an ABI tag.  */
  DEMANGLE_COMPONENT_TAGGED_NAME,
  /* A cloned function.  */
  DEMANGLE_COMPONENT_CLONE
};

/* Types which are only used internally.  */

struct demangle_operator_info;
struct demangle_builtin_type_info;

/* A node in the tree representation is an instance of a struct
   demangle_component.  Note that the field names of the struct are
   not well protected against macros defined by the file including
   this one.  We can fix this if it ever becomes a problem.  */

struct demangle_component
{
  /* The type of this component.  */
  enum demangle_component_type type;

  union
  {
    /* For DEMANGLE_COMPONENT_NAME.  */
    struct
    {
      /* A pointer to the name (which need not NULL terminated) and
	 its length.  */
      const char *s;
      int len;
    } s_name;

    /* For DEMANGLE_COMPONENT_OPERATOR.  */
    struct
    {
      /* Operator.  */
      const struct demangle_operator_info *op;
    } s_operator;

    /* For DEMANGLE_COMPONENT_EXTENDED_OPERATOR.  */
    struct
    {
      /* Number of arguments.  */
      int args;
      /* Name.  */
      struct demangle_component *name;
    } s_extended_operator;

    /* For DEMANGLE_COMPONENT_FIXED_TYPE.  */
    struct
    {
      /* The length, indicated by a C integer type name.  */
      struct demangle_component *length;
      /* _Accum or _Fract?  */
      short accum;
      /* Saturating or not?  */
      short sat;
    } s_fixed;

    /* For DEMANGLE_COMPONENT_CTOR.  */
    struct
    {
      /* Kind of constructor.  */
      enum gnu_v3_ctor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_ctor;

    /* For DEMANGLE_COMPONENT_DTOR.  */
    struct
    {
      /* Kind of destructor.  */
      enum gnu_v3_dtor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_dtor;

    /* For DEMANGLE_COMPONENT_BUILTIN_TYPE.  */
    struct
    {
      /* Builtin type.  */
      const struct demangle_builtin_type_info *type;
    } s_builtin;

    /* For DEMANGLE_COMPONENT_SUB_STD.  */
    struct
    {
      /* Standard substitution string.  */
      const char* string;
      /* Length of string.  */
      int len;
    } s_string;

    /* For DEMANGLE_COMPONENT_*_PARAM.  */
    struct
    {
      /* Parameter index.  */
      long number;
    } s_number;

    /* For DEMANGLE_COMPONENT_CHARACTER.  */
    struct
    {
      int character;
    } s_character;

    /* For other types.  */
    struct
    {
      /* Left (or only) subtree.  */
      struct demangle_component *left;
      /* Right subtree.  */
      struct demangle_component *right;
    } s_binary;

    struct
    {
      /* subtree, same place as d_left.  */
      struct demangle_component *sub;
      /* integer.  */
      int num;
    } s_unary_num;

  } u;
};

/* People building mangled trees are expected to allocate instances of
   struct demangle_component themselves.  They can then call one of
   the following functions to fill them in.  */

/* Fill in most component types with a left subtree and a right
   subtree.  Returns non-zero on success, zero on failure, such as an
   unrecognized or inappropriate component type.  */

extern int
cplus_demangle_fill_component (struct demangle_component *fill,
                               enum demangle_component_type,
                               struct demangle_component *left,
                               struct demangle_component *right);

/* Fill in a DEMANGLE_COMPONENT_NAME.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_name (struct demangle_component *fill,
                          const char *, int);

/* Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE, using the name of the
   builtin type (e.g., "int", etc.).  Returns non-zero on success,
   zero if the type is not recognized.  */

extern int
cplus_demangle_fill_builtin_type (struct demangle_component *fill,
                                  const char *type_name);

/* Fill in a DEMANGLE_COMPONENT_OPERATOR, using the name of the
   operator and the number of arguments which it takes (the latter is
   used to disambiguate operators which can be both binary and unary,
   such as '-').  Returns non-zero on success, zero if the operator is
   not recognized.  */

extern int
cplus_demangle_fill_operator (struct demangle_component *fill,
                              const char *opname, int args);

/* Fill in a DEMANGLE_COMPONENT_EXTENDED_OPERATOR, providing the
   number of arguments and the name.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_extended_operator (struct demangle_component *fill,
                                       int numargs,
                                       struct demangle_component *nm);

/* Fill in a DEMANGLE_COMPONENT_CTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_ctor (struct demangle_component *fill,
                          enum gnu_v3_ctor_kinds kind,
                          struct demangle_component *name);

/* Fill in a DEMANGLE_COMPONENT_DTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_dtor (struct demangle_component *fill,
                          enum gnu_v3_dtor_kinds kind,
                          struct demangle_component *name);

/* This function translates a mangled name into a struct
   demangle_component tree.  The first argument is the mangled name.
   The second argument is DMGL_* options.  This returns a pointer to a
   tree on success, or NULL on failure.  On success, the third
   argument is set to a block of memory allocated by malloc.  This
   block should be passed to free when the tree is no longer
   needed.  */

extern struct demangle_component *
cplus_demangle_v3_components (const char *mangled, int options, void **mem);

/* This function takes a struct demangle_component tree and returns
   the corresponding demangled string.  The first argument is DMGL_*
   options.  The second is the tree to demangle.  The third is a guess
   at the length of the demangled string, used to initially allocate
   the return buffer.  The fourth is a pointer to a size_t.  On
   success, this function returns a buffer allocated by malloc(), and
   sets the size_t pointed to by the fourth argument to the size of
   the allocated buffer (not the length of the returned string).  On
   failure, this function returns NULL, and sets the size_t pointed to
   by the fourth argument to 0 for an invalid tree, or to 1 for a
   memory allocation error.  */

extern char *
cplus_demangle_print (int options,
                      const struct demangle_component *tree,
                      int estimated_length,
                      size_t *p_allocated_size);

/* This function takes a struct demangle_component tree and passes back
   a demangled string in one or more calls to a callback function.
   The first argument is DMGL_* options.  The second is the tree to
   demangle.  The third is a pointer to a callback function; on each call
   this receives an element of the demangled string, its length, and an
   opaque value.  The fourth is the opaque value passed to the callback.
   The callback is called once or more to return the full demangled
   string.  The demangled element string is always nul-terminated, though
   its length is also provided for convenience.  In contrast to
   cplus_demangle_print(), this function does not allocate heap memory
   to grow output strings (except perhaps where alloca() is implemented
   by malloc()), and so is normally safe for use where the heap has been
   corrupted.  On success, this function returns 1; on failure, 0.  */

extern int
cplus_demangle_print_callback (int options,
                               const struct demangle_component *tree,
                               demangle_callbackref callback, void *opaque);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif	/* DEMANGLE_H */
@


1.46
log
@merge from gcc
@
text
@d66 1
d69 1
a69 1
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG|DMGL_GNU_V3|DMGL_JAVA|DMGL_GNAT)
d91 2
a92 1
  gnat_demangling = DMGL_GNAT
d107 1
d121 1
d176 3
@


1.45
log
@merge from gcc
@
text
@d176 4
d195 4
@


1.44
log
@merge from gcc
@
text
@d305 6
@


1.43
log
@merge from gcc
@
text
@d423 2
@


1.42
log
@merge from gcc
@
text
@d275 3
@


1.41
log
@merge from gcc
@
text
@d347 3
d359 2
@


1.40
log
@merge from gcc
@
text
@d175 2
a176 1
  gnu_v3_complete_object_allocating_ctor
d190 2
a191 1
  gnu_v3_base_object_dtor
d406 7
@


1.39
log
@merge from gcc
@
text
@d405 3
a407 1
  DEMANGLE_COMPONENT_PACK_EXPANSION
@


1.38
log
@merge from gcc
@
text
@d48 7
a54 1
                                           present) after function signature */
@


1.38.2.1
log
@commit d5b397191d6242fa1b0941cdb328c421bf2b09a0
Author: DJ Delorie <dj@@delorie.com>
Date:   Mon Jun 13 23:01:42 2011 +0000

    merge from gcc

include/
	* demangle.h (DMGL_RET_POSTFIX): Extend the comment.
	(DMGL_RET_DROP): New.

libiberty/
	* cp-demangle.c (d_print_comp) <DEMANGLE_COMPONENT_FUNCTION_TYPE>:
	Suppress d_print_mod for DMGL_RET_POSTFIX.
	* testsuite/demangle-expected: New testcases for --ret-postfix.

	* cp-demangle.c (d_print_comp) <DEMANGLE_COMPONENT_FUNCTION_TYPE>: Do
	not pass DMGL_RET_POSTFIX or DMGL_RET_DROP.  Support DMGL_RET_DROP.
	* testsuite/demangle-expected: New testcases for --ret-drop.
	* testsuite/test-demangle.c: Document --ret-drop in a comment.
	(main): New variable ret_drop, fill it, call cplus_demangle with it.

	* cp-demangle.c (struct d_print_info): Remove field options.
	(d_print_init): Remove parameter options.
	(cplus_demangle_print_callback): Update all the callers.
	(d_print_comp, d_print_mod_list, d_print_mod, d_print_function_type)
	(d_print_array_type, d_print_expr_op, d_print_cast, d_print_subexpr):
	Add parameter options, update all the callers.
@
text
@d48 1
a48 7
					   present) after function signature.
					   It applies only to the toplevel
					   function type.  */
#define DMGL_RET_DROP	 (1 << 6)       /* Suppress printing function return
					   types, even if present.  It applies
					   only to the toplevel function type.
					   */
@


1.37
log
@merge from gcc
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.36
log
@merge from gcc
@
text
@d329 3
d384 2
@


1.35
log
@merge from gcc
@
text
@d163 3
@


1.34
log
@update copyright dates
@
text
@d384 6
d503 8
@


1.33
log
@merge from gcc
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007 Free Software Foundation, Inc.
@


1.32
log
@update copyright dates
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.31
log
@merge from gcc
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007 Free Software Foundation, Inc.
@


1.30
log
@merge from gcc
@
text
@d380 4
@


1.29
log
@merge from gcc
@
text
@d224 2
d471 1
a471 1
    /* For DEMANGLE_COMPONENT_TEMPLATE_PARAM.  */
d474 1
a474 1
      /* Template parameter index.  */
@


1.28
log
@merge from gcc
@
text
@d322 2
d424 11
@


1.27
log
@merge from gcc
@
text
@d375 3
a377 1
  DEMANGLE_COMPONENT_DECLTYPE
@


1.26
log
@include/
2008-01-26  David Daney  <ddaney@@avtrex.com>

	* demangle.h (demangle_component_type):  Add
	DEMANGLE_COMPONENT_JAVA_RESOURCE,
	DEMANGLE_COMPONENT_COMPOUND_NAME, and
	DEMANGLE_COMPONENT_CHARACTER as new enum values.
	(demangle_component): Add struct s_character to union u.

libiberty/
2008-01-26  David Daney  <ddaney@@avtrex.com>

	* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,
	DEMANGLE_COMPONENT_COMPOUND_NAME, and
	DEMANGLE_COMPONENT_CHARACTER cases.
	(d_make_comp): Handle DEMANGLE_COMPONENT_COMPOUND_NAME and
	DEMANGLE_COMPONENT_JAVA_RESOURCE cases.
	(d_make_character): New function.
	(d_java_resource): Same.
	(d_special_name): Handle "Gr" case.
	(d_print_comp): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,
	DEMANGLE_COMPONENT_COMPOUND_NAME, and
	DEMANGLE_COMPONENT_CHARACTER cases.
	* testsuite/demangle-expected: Add test for java resource name
	mangling.
@
text
@d373 3
a375 1
  DEMANGLE_COMPONENT_CHARACTER
@


1.25
log
@merge from gcc
@
text
@d365 9
a373 1
  DEMANGLE_COMPONENT_LITERAL_NEG
d459 6
@


1.24
log
@merge from gcc
@
text
@d299 3
@


1.23
log
@merge from gcc
@
text
@d5 23
a27 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.22
log
@merge from gcc
@
text
@d3 1
a3 1
   2003, 2004 Free Software Foundation, Inc.
d134 10
a143 1
/* V3 ABI demangling entry points, defined in cp-demangle.c.  */
d145 5
a149 1
cplus_demangle_v3 (const char* mangled, int options);
d152 1
a152 2
java_demangle_v3 (const char* mangled);

d544 19
@


1.21
log
@include/
	* demangle.h (DEMANGLE_COMPONENT_HIDDEN_ALIAS): New.
libiberty/
	* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_HIDDEN_ALIAS.
	(d_make_comp, d_print_comp): Likewise.
	(d_special_name): Generate one.
	* testsuite/demangle-expected: Add a hidden alias test.
@
text
@d38 2
@


1.20
log
@Update the address and phone number of the FSF organization
@
text
@d242 3
@


1.19
log
@merge from gcc
@
text
@d17 2
a18 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.18
log
@merge from gcc
@
text
@d113 1
a113 1
cplus_demangle PARAMS ((const char *mangled, int options));
d116 1
a116 1
cplus_demangle_opname PARAMS ((const char *opname, char *result, int options));
d119 1
a119 1
cplus_mangle_opname PARAMS ((const char *opname, int options));
d124 1
a124 1
set_cplus_marker_for_demangling PARAMS ((int ch));
d127 1
a127 1
cplus_demangle_set_style PARAMS ((enum demangling_styles style));
d130 1
a130 1
cplus_demangle_name_to_style PARAMS ((const char *name));
d134 1
a134 1
cplus_demangle_v3 PARAMS ((const char* mangled, int options));
d137 1
a137 1
java_demangle_v3 PARAMS ((const char* mangled));
d151 1
a151 1
	is_gnu_v3_mangled_ctor PARAMS ((const char *name));
d165 1
a165 1
	is_gnu_v3_mangled_dtor PARAMS ((const char *name));
d443 4
a446 4
cplus_demangle_fill_component PARAMS ((struct demangle_component *fill,
				       enum demangle_component_type,
				       struct demangle_component *left,
				       struct demangle_component *right));
d452 2
a453 2
cplus_demangle_fill_name PARAMS ((struct demangle_component *fill,
				  const char *, int));
d460 2
a461 2
cplus_demangle_fill_builtin_type PARAMS ((struct demangle_component *fill,
					  const char *type_name));
d470 2
a471 2
cplus_demangle_fill_operator PARAMS ((struct demangle_component *fill,
				      const char *opname, int args));
d478 3
a480 3
cplus_demangle_fill_extended_operator PARAMS ((struct demangle_component *fill,
					       int numargs,
					       struct demangle_component *nm));
d486 3
a488 3
cplus_demangle_fill_ctor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_ctor_kinds kind,
				  struct demangle_component *name));
d494 3
a496 3
cplus_demangle_fill_dtor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_dtor_kinds kind,
				  struct demangle_component *name));
d507 1
a507 3
cplus_demangle_v3_components PARAMS ((const char *mangled,
				      int options,
				      void **mem));
d522 4
a525 4
cplus_demangle_print PARAMS ((int options,
			      const struct demangle_component *tree,
			      int estimated_length,
			      size_t *p_allocated_size));
@


1.17
log
@	* demangle.h: Instead of checking ANSI_PROTOTYPES, just include
	"libiberty.h".
@
text
@d461 1
a461 1
					  const char *typename));
@


1.17.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d461 1
a461 1
					  const char *type_name));
@


1.16
log
@Merge from gcc.
@
text
@d24 1
a24 6
#include "ansidecl.h"

#ifdef ANSI_PROTOTYPES
/* Get a definition for size_t.  */
#include <stddef.h>
#endif
@


1.15
log
@merge from gcc
@
text
@d26 5
@


1.14
log
@2003-07-06  H.J. Lu <hongjiu.lu@@intel.com>

	* demangle.h: Support C++.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002
   Free Software Foundation, Inc.
d166 362
@


1.13
log
@merge from gcc
@
text
@d26 4
d166 4
@


1.13.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a25 4
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

a161 4

#ifdef __cplusplus
}
#endif /* __cplusplus */
@


1.13.14.2
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
a165 362

/* The V3 demangler works in two passes.  The first pass builds a tree
   representation of the mangled name, and the second pass turns the
   tree representation into a demangled string.  Here we define an
   interface to permit a caller to build their own tree
   representation, which they can pass to the demangler to get a
   demangled string.  This can be used to canonicalize user input into
   something which the demangler might output.  It could also be used
   by other demanglers in the future.  */

/* These are the component types which may be found in the tree.  Many
   component types have one or two subtrees, referred to as left and
   right (a component type with only one subtree puts it in the left
   subtree).  */

enum demangle_component_type
{
  /* A name, with a length and a pointer to a string.  */
  DEMANGLE_COMPONENT_NAME,
  /* A qualified name.  The left subtree is a class or namespace or
     some such thing, and the right subtree is a name qualified by
     that class.  */
  DEMANGLE_COMPONENT_QUAL_NAME,
  /* A local name.  The left subtree describes a function, and the
     right subtree is a name which is local to that function.  */
  DEMANGLE_COMPONENT_LOCAL_NAME,
  /* A typed name.  The left subtree is a name, and the right subtree
     describes that name as a function.  */
  DEMANGLE_COMPONENT_TYPED_NAME,
  /* A template.  The left subtree is a template name, and the right
     subtree is a template argument list.  */
  DEMANGLE_COMPONENT_TEMPLATE,
  /* A template parameter.  This holds a number, which is the template
     parameter index.  */
  DEMANGLE_COMPONENT_TEMPLATE_PARAM,
  /* A constructor.  This holds a name and the kind of
     constructor.  */
  DEMANGLE_COMPONENT_CTOR,
  /* A destructor.  This holds a name and the kind of destructor.  */
  DEMANGLE_COMPONENT_DTOR,
  /* A vtable.  This has one subtree, the type for which this is a
     vtable.  */
  DEMANGLE_COMPONENT_VTABLE,
  /* A VTT structure.  This has one subtree, the type for which this
     is a VTT.  */
  DEMANGLE_COMPONENT_VTT,
  /* A construction vtable.  The left subtree is the type for which
     this is a vtable, and the right subtree is the derived type for
     which this vtable is built.  */
  DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE,
  /* A typeinfo structure.  This has one subtree, the type for which
     this is the tpeinfo structure.  */
  DEMANGLE_COMPONENT_TYPEINFO,
  /* A typeinfo name.  This has one subtree, the type for which this
     is the typeinfo name.  */
  DEMANGLE_COMPONENT_TYPEINFO_NAME,
  /* A typeinfo function.  This has one subtree, the type for which
     this is the tpyeinfo function.  */
  DEMANGLE_COMPONENT_TYPEINFO_FN,
  /* A thunk.  This has one subtree, the name for which this is a
     thunk.  */
  DEMANGLE_COMPONENT_THUNK,
  /* A virtual thunk.  This has one subtree, the name for which this
     is a virtual thunk.  */
  DEMANGLE_COMPONENT_VIRTUAL_THUNK,
  /* A covariant thunk.  This has one subtree, the name for which this
     is a covariant thunk.  */
  DEMANGLE_COMPONENT_COVARIANT_THUNK,
  /* A Java class.  This has one subtree, the type.  */
  DEMANGLE_COMPONENT_JAVA_CLASS,
  /* A guard variable.  This has one subtree, the name for which this
     is a guard variable.  */
  DEMANGLE_COMPONENT_GUARD,
  /* A reference temporary.  This has one subtree, the name for which
     this is a temporary.  */
  DEMANGLE_COMPONENT_REFTEMP,
  /* A standard substitution.  This holds the name of the
     substitution.  */
  DEMANGLE_COMPONENT_SUB_STD,
  /* The restrict qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT,
  /* The volatile qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE,
  /* The const qualifier.  The one subtree is the type which is being
     qualified.  */
  DEMANGLE_COMPONENT_CONST,
  /* The restrict qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT_THIS,
  /* The volatile qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE_THIS,
  /* The const qualifier modifying a member function.  The one subtree
     is the type which is being qualified.  */
  DEMANGLE_COMPONENT_CONST_THIS,
  /* A vendor qualifier.  The left subtree is the type which is being
     qualified, and the right subtree is the name of the
     qualifier.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,
  /* A pointer.  The one subtree is the type which is being pointed
     to.  */
  DEMANGLE_COMPONENT_POINTER,
  /* A reference.  The one subtree is the type which is being
     referenced.  */
  DEMANGLE_COMPONENT_REFERENCE,
  /* A complex type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_COMPLEX,
  /* An imaginary type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_IMAGINARY,
  /* A builtin type.  This holds the builtin type information.  */
  DEMANGLE_COMPONENT_BUILTIN_TYPE,
  /* A vendor's builtin type.  This holds the name of the type.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE,
  /* A function type.  The left subtree is the return type.  The right
     subtree is a list of ARGLIST nodes.  Either or both may be
     NULL.  */
  DEMANGLE_COMPONENT_FUNCTION_TYPE,
  /* An array type.  The left subtree is the dimension, which may be
     NULL, or a string (represented as DEMANGLE_COMPONENT_NAME), or an
     expression.  The right subtree is the element type.  */
  DEMANGLE_COMPONENT_ARRAY_TYPE,
  /* A pointer to member type.  The left subtree is the class type,
     and the right subtree is the member type.  CV-qualifiers appear
     on the latter.  */
  DEMANGLE_COMPONENT_PTRMEM_TYPE,
  /* An argument list.  The left subtree is the current argument, and
     the right subtree is either NULL or another ARGLIST node.  */
  DEMANGLE_COMPONENT_ARGLIST,
  /* A template argument list.  The left subtree is the current
     template argument, and the right subtree is either NULL or
     another TEMPLATE_ARGLIST node.  */
  DEMANGLE_COMPONENT_TEMPLATE_ARGLIST,
  /* An operator.  This holds information about a standard
     operator.  */
  DEMANGLE_COMPONENT_OPERATOR,
  /* An extended operator.  This holds the number of arguments, and
     the name of the extended operator.  */
  DEMANGLE_COMPONENT_EXTENDED_OPERATOR,
  /* A typecast, represented as a unary operator.  The one subtree is
     the type to which the argument should be cast.  */
  DEMANGLE_COMPONENT_CAST,
  /* A unary expression.  The left subtree is the operator, and the
     right subtree is the single argument.  */
  DEMANGLE_COMPONENT_UNARY,
  /* A binary expression.  The left subtree is the operator, and the
     right subtree is a BINARY_ARGS.  */
  DEMANGLE_COMPONENT_BINARY,
  /* Arguments to a binary expression.  The left subtree is the first
     argument, and the right subtree is the second argument.  */
  DEMANGLE_COMPONENT_BINARY_ARGS,
  /* A trinary expression.  The left subtree is the operator, and the
     right subtree is a TRINARY_ARG1.  */
  DEMANGLE_COMPONENT_TRINARY,
  /* Arguments to a trinary expression.  The left subtree is the first
     argument, and the right subtree is a TRINARY_ARG2.  */
  DEMANGLE_COMPONENT_TRINARY_ARG1,
  /* More arguments to a trinary expression.  The left subtree is the
     second argument, and the right subtree is the third argument.  */
  DEMANGLE_COMPONENT_TRINARY_ARG2,
  /* A literal.  The left subtree is the type, and the right subtree
     is the value, represented as a DEMANGLE_COMPONENT_NAME.  */
  DEMANGLE_COMPONENT_LITERAL,
  /* A negative literal.  Like LITERAL, but the value is negated.
     This is a minor hack: the NAME used for LITERAL points directly
     to the mangled string, but since negative numbers are mangled
     using 'n' instead of '-', we want a way to indicate a negative
     number which involves neither modifying the mangled string nor
     allocating a new copy of the literal in memory.  */
  DEMANGLE_COMPONENT_LITERAL_NEG
};

/* Types which are only used internally.  */

struct demangle_operator_info;
struct demangle_builtin_type_info;

/* A node in the tree representation is an instance of a struct
   demangle_component.  Note that the field names of the struct are
   not well protected against macros defined by the file including
   this one.  We can fix this if it ever becomes a problem.  */

struct demangle_component
{
  /* The type of this component.  */
  enum demangle_component_type type;

  union
  {
    /* For DEMANGLE_COMPONENT_NAME.  */
    struct
    {
      /* A pointer to the name (which need not NULL terminated) and
	 its length.  */
      const char *s;
      int len;
    } s_name;

    /* For DEMANGLE_COMPONENT_OPERATOR.  */
    struct
    {
      /* Operator.  */
      const struct demangle_operator_info *op;
    } s_operator;

    /* For DEMANGLE_COMPONENT_EXTENDED_OPERATOR.  */
    struct
    {
      /* Number of arguments.  */
      int args;
      /* Name.  */
      struct demangle_component *name;
    } s_extended_operator;

    /* For DEMANGLE_COMPONENT_CTOR.  */
    struct
    {
      /* Kind of constructor.  */
      enum gnu_v3_ctor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_ctor;

    /* For DEMANGLE_COMPONENT_DTOR.  */
    struct
    {
      /* Kind of destructor.  */
      enum gnu_v3_dtor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_dtor;

    /* For DEMANGLE_COMPONENT_BUILTIN_TYPE.  */
    struct
    {
      /* Builtin type.  */
      const struct demangle_builtin_type_info *type;
    } s_builtin;

    /* For DEMANGLE_COMPONENT_SUB_STD.  */
    struct
    {
      /* Standard substitution string.  */
      const char* string;
      /* Length of string.  */
      int len;
    } s_string;

    /* For DEMANGLE_COMPONENT_TEMPLATE_PARAM.  */
    struct
    {
      /* Template parameter index.  */
      long number;
    } s_number;

    /* For other types.  */
    struct
    {
      /* Left (or only) subtree.  */
      struct demangle_component *left;
      /* Right subtree.  */
      struct demangle_component *right;
    } s_binary;

  } u;
};

/* People building mangled trees are expected to allocate instances of
   struct demangle_component themselves.  They can then call one of
   the following functions to fill them in.  */

/* Fill in most component types with a left subtree and a right
   subtree.  Returns non-zero on success, zero on failure, such as an
   unrecognized or inappropriate component type.  */

extern int
cplus_demangle_fill_component PARAMS ((struct demangle_component *fill,
				       enum demangle_component_type,
				       struct demangle_component *left,
				       struct demangle_component *right));

/* Fill in a DEMANGLE_COMPONENT_NAME.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_name PARAMS ((struct demangle_component *fill,
				  const char *, int));

/* Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE, using the name of the
   builtin type (e.g., "int", etc.).  Returns non-zero on success,
   zero if the type is not recognized.  */

extern int
cplus_demangle_fill_builtin_type PARAMS ((struct demangle_component *fill,
					  const char *typename));

/* Fill in a DEMANGLE_COMPONENT_OPERATOR, using the name of the
   operator and the number of arguments which it takes (the latter is
   used to disambiguate operators which can be both binary and unary,
   such as '-').  Returns non-zero on success, zero if the operator is
   not recognized.  */

extern int
cplus_demangle_fill_operator PARAMS ((struct demangle_component *fill,
				      const char *opname, int args));

/* Fill in a DEMANGLE_COMPONENT_EXTENDED_OPERATOR, providing the
   number of arguments and the name.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_extended_operator PARAMS ((struct demangle_component *fill,
					       int numargs,
					       struct demangle_component *nm));

/* Fill in a DEMANGLE_COMPONENT_CTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_ctor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_ctor_kinds kind,
				  struct demangle_component *name));

/* Fill in a DEMANGLE_COMPONENT_DTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_dtor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_dtor_kinds kind,
				  struct demangle_component *name));

/* This function translates a mangled name into a struct
   demangle_component tree.  The first argument is the mangled name.
   The second argument is DMGL_* options.  This returns a pointer to a
   tree on success, or NULL on failure.  On success, the third
   argument is set to a block of memory allocated by malloc.  This
   block should be passed to free when the tree is no longer
   needed.  */

extern struct demangle_component *
cplus_demangle_v3_components PARAMS ((const char *mangled,
				      int options,
				      void **mem));

/* This function takes a struct demangle_component tree and returns
   the corresponding demangled string.  The first argument is DMGL_*
   options.  The second is the tree to demangle.  The third is a guess
   at the length of the demangled string, used to initially allocate
   the return buffer.  The fourth is a pointer to a size_t.  On
   success, this function returns a buffer allocated by malloc(), and
   sets the size_t pointed to by the fourth argument to the size of
   the allocated buffer (not the length of the returned string).  On
   failure, this function returns NULL, and sets the size_t pointed to
   by the fourth argument to 0 for an invalid tree, or to 1 for a
   memory allocation error.  */

extern char *
cplus_demangle_print PARAMS ((int options,
			      const struct demangle_component *tree,
			      int estimated_length,
			      size_t *p_allocated_size));
@


1.13.14.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d24 1
a24 1
#include "libiberty.h"
@


1.13.12.1
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a25 4
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

a161 4

#ifdef __cplusplus
}
#endif /* __cplusplus */
@


1.13.12.2
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
d24 1
a24 1
#include "libiberty.h"
a165 362

/* The V3 demangler works in two passes.  The first pass builds a tree
   representation of the mangled name, and the second pass turns the
   tree representation into a demangled string.  Here we define an
   interface to permit a caller to build their own tree
   representation, which they can pass to the demangler to get a
   demangled string.  This can be used to canonicalize user input into
   something which the demangler might output.  It could also be used
   by other demanglers in the future.  */

/* These are the component types which may be found in the tree.  Many
   component types have one or two subtrees, referred to as left and
   right (a component type with only one subtree puts it in the left
   subtree).  */

enum demangle_component_type
{
  /* A name, with a length and a pointer to a string.  */
  DEMANGLE_COMPONENT_NAME,
  /* A qualified name.  The left subtree is a class or namespace or
     some such thing, and the right subtree is a name qualified by
     that class.  */
  DEMANGLE_COMPONENT_QUAL_NAME,
  /* A local name.  The left subtree describes a function, and the
     right subtree is a name which is local to that function.  */
  DEMANGLE_COMPONENT_LOCAL_NAME,
  /* A typed name.  The left subtree is a name, and the right subtree
     describes that name as a function.  */
  DEMANGLE_COMPONENT_TYPED_NAME,
  /* A template.  The left subtree is a template name, and the right
     subtree is a template argument list.  */
  DEMANGLE_COMPONENT_TEMPLATE,
  /* A template parameter.  This holds a number, which is the template
     parameter index.  */
  DEMANGLE_COMPONENT_TEMPLATE_PARAM,
  /* A constructor.  This holds a name and the kind of
     constructor.  */
  DEMANGLE_COMPONENT_CTOR,
  /* A destructor.  This holds a name and the kind of destructor.  */
  DEMANGLE_COMPONENT_DTOR,
  /* A vtable.  This has one subtree, the type for which this is a
     vtable.  */
  DEMANGLE_COMPONENT_VTABLE,
  /* A VTT structure.  This has one subtree, the type for which this
     is a VTT.  */
  DEMANGLE_COMPONENT_VTT,
  /* A construction vtable.  The left subtree is the type for which
     this is a vtable, and the right subtree is the derived type for
     which this vtable is built.  */
  DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE,
  /* A typeinfo structure.  This has one subtree, the type for which
     this is the tpeinfo structure.  */
  DEMANGLE_COMPONENT_TYPEINFO,
  /* A typeinfo name.  This has one subtree, the type for which this
     is the typeinfo name.  */
  DEMANGLE_COMPONENT_TYPEINFO_NAME,
  /* A typeinfo function.  This has one subtree, the type for which
     this is the tpyeinfo function.  */
  DEMANGLE_COMPONENT_TYPEINFO_FN,
  /* A thunk.  This has one subtree, the name for which this is a
     thunk.  */
  DEMANGLE_COMPONENT_THUNK,
  /* A virtual thunk.  This has one subtree, the name for which this
     is a virtual thunk.  */
  DEMANGLE_COMPONENT_VIRTUAL_THUNK,
  /* A covariant thunk.  This has one subtree, the name for which this
     is a covariant thunk.  */
  DEMANGLE_COMPONENT_COVARIANT_THUNK,
  /* A Java class.  This has one subtree, the type.  */
  DEMANGLE_COMPONENT_JAVA_CLASS,
  /* A guard variable.  This has one subtree, the name for which this
     is a guard variable.  */
  DEMANGLE_COMPONENT_GUARD,
  /* A reference temporary.  This has one subtree, the name for which
     this is a temporary.  */
  DEMANGLE_COMPONENT_REFTEMP,
  /* A standard substitution.  This holds the name of the
     substitution.  */
  DEMANGLE_COMPONENT_SUB_STD,
  /* The restrict qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT,
  /* The volatile qualifier.  The one subtree is the type which is
     being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE,
  /* The const qualifier.  The one subtree is the type which is being
     qualified.  */
  DEMANGLE_COMPONENT_CONST,
  /* The restrict qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_RESTRICT_THIS,
  /* The volatile qualifier modifying a member function.  The one
     subtree is the type which is being qualified.  */
  DEMANGLE_COMPONENT_VOLATILE_THIS,
  /* The const qualifier modifying a member function.  The one subtree
     is the type which is being qualified.  */
  DEMANGLE_COMPONENT_CONST_THIS,
  /* A vendor qualifier.  The left subtree is the type which is being
     qualified, and the right subtree is the name of the
     qualifier.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,
  /* A pointer.  The one subtree is the type which is being pointed
     to.  */
  DEMANGLE_COMPONENT_POINTER,
  /* A reference.  The one subtree is the type which is being
     referenced.  */
  DEMANGLE_COMPONENT_REFERENCE,
  /* A complex type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_COMPLEX,
  /* An imaginary type.  The one subtree is the base type.  */
  DEMANGLE_COMPONENT_IMAGINARY,
  /* A builtin type.  This holds the builtin type information.  */
  DEMANGLE_COMPONENT_BUILTIN_TYPE,
  /* A vendor's builtin type.  This holds the name of the type.  */
  DEMANGLE_COMPONENT_VENDOR_TYPE,
  /* A function type.  The left subtree is the return type.  The right
     subtree is a list of ARGLIST nodes.  Either or both may be
     NULL.  */
  DEMANGLE_COMPONENT_FUNCTION_TYPE,
  /* An array type.  The left subtree is the dimension, which may be
     NULL, or a string (represented as DEMANGLE_COMPONENT_NAME), or an
     expression.  The right subtree is the element type.  */
  DEMANGLE_COMPONENT_ARRAY_TYPE,
  /* A pointer to member type.  The left subtree is the class type,
     and the right subtree is the member type.  CV-qualifiers appear
     on the latter.  */
  DEMANGLE_COMPONENT_PTRMEM_TYPE,
  /* An argument list.  The left subtree is the current argument, and
     the right subtree is either NULL or another ARGLIST node.  */
  DEMANGLE_COMPONENT_ARGLIST,
  /* A template argument list.  The left subtree is the current
     template argument, and the right subtree is either NULL or
     another TEMPLATE_ARGLIST node.  */
  DEMANGLE_COMPONENT_TEMPLATE_ARGLIST,
  /* An operator.  This holds information about a standard
     operator.  */
  DEMANGLE_COMPONENT_OPERATOR,
  /* An extended operator.  This holds the number of arguments, and
     the name of the extended operator.  */
  DEMANGLE_COMPONENT_EXTENDED_OPERATOR,
  /* A typecast, represented as a unary operator.  The one subtree is
     the type to which the argument should be cast.  */
  DEMANGLE_COMPONENT_CAST,
  /* A unary expression.  The left subtree is the operator, and the
     right subtree is the single argument.  */
  DEMANGLE_COMPONENT_UNARY,
  /* A binary expression.  The left subtree is the operator, and the
     right subtree is a BINARY_ARGS.  */
  DEMANGLE_COMPONENT_BINARY,
  /* Arguments to a binary expression.  The left subtree is the first
     argument, and the right subtree is the second argument.  */
  DEMANGLE_COMPONENT_BINARY_ARGS,
  /* A trinary expression.  The left subtree is the operator, and the
     right subtree is a TRINARY_ARG1.  */
  DEMANGLE_COMPONENT_TRINARY,
  /* Arguments to a trinary expression.  The left subtree is the first
     argument, and the right subtree is a TRINARY_ARG2.  */
  DEMANGLE_COMPONENT_TRINARY_ARG1,
  /* More arguments to a trinary expression.  The left subtree is the
     second argument, and the right subtree is the third argument.  */
  DEMANGLE_COMPONENT_TRINARY_ARG2,
  /* A literal.  The left subtree is the type, and the right subtree
     is the value, represented as a DEMANGLE_COMPONENT_NAME.  */
  DEMANGLE_COMPONENT_LITERAL,
  /* A negative literal.  Like LITERAL, but the value is negated.
     This is a minor hack: the NAME used for LITERAL points directly
     to the mangled string, but since negative numbers are mangled
     using 'n' instead of '-', we want a way to indicate a negative
     number which involves neither modifying the mangled string nor
     allocating a new copy of the literal in memory.  */
  DEMANGLE_COMPONENT_LITERAL_NEG
};

/* Types which are only used internally.  */

struct demangle_operator_info;
struct demangle_builtin_type_info;

/* A node in the tree representation is an instance of a struct
   demangle_component.  Note that the field names of the struct are
   not well protected against macros defined by the file including
   this one.  We can fix this if it ever becomes a problem.  */

struct demangle_component
{
  /* The type of this component.  */
  enum demangle_component_type type;

  union
  {
    /* For DEMANGLE_COMPONENT_NAME.  */
    struct
    {
      /* A pointer to the name (which need not NULL terminated) and
	 its length.  */
      const char *s;
      int len;
    } s_name;

    /* For DEMANGLE_COMPONENT_OPERATOR.  */
    struct
    {
      /* Operator.  */
      const struct demangle_operator_info *op;
    } s_operator;

    /* For DEMANGLE_COMPONENT_EXTENDED_OPERATOR.  */
    struct
    {
      /* Number of arguments.  */
      int args;
      /* Name.  */
      struct demangle_component *name;
    } s_extended_operator;

    /* For DEMANGLE_COMPONENT_CTOR.  */
    struct
    {
      /* Kind of constructor.  */
      enum gnu_v3_ctor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_ctor;

    /* For DEMANGLE_COMPONENT_DTOR.  */
    struct
    {
      /* Kind of destructor.  */
      enum gnu_v3_dtor_kinds kind;
      /* Name.  */
      struct demangle_component *name;
    } s_dtor;

    /* For DEMANGLE_COMPONENT_BUILTIN_TYPE.  */
    struct
    {
      /* Builtin type.  */
      const struct demangle_builtin_type_info *type;
    } s_builtin;

    /* For DEMANGLE_COMPONENT_SUB_STD.  */
    struct
    {
      /* Standard substitution string.  */
      const char* string;
      /* Length of string.  */
      int len;
    } s_string;

    /* For DEMANGLE_COMPONENT_TEMPLATE_PARAM.  */
    struct
    {
      /* Template parameter index.  */
      long number;
    } s_number;

    /* For other types.  */
    struct
    {
      /* Left (or only) subtree.  */
      struct demangle_component *left;
      /* Right subtree.  */
      struct demangle_component *right;
    } s_binary;

  } u;
};

/* People building mangled trees are expected to allocate instances of
   struct demangle_component themselves.  They can then call one of
   the following functions to fill them in.  */

/* Fill in most component types with a left subtree and a right
   subtree.  Returns non-zero on success, zero on failure, such as an
   unrecognized or inappropriate component type.  */

extern int
cplus_demangle_fill_component PARAMS ((struct demangle_component *fill,
				       enum demangle_component_type,
				       struct demangle_component *left,
				       struct demangle_component *right));

/* Fill in a DEMANGLE_COMPONENT_NAME.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_name PARAMS ((struct demangle_component *fill,
				  const char *, int));

/* Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE, using the name of the
   builtin type (e.g., "int", etc.).  Returns non-zero on success,
   zero if the type is not recognized.  */

extern int
cplus_demangle_fill_builtin_type PARAMS ((struct demangle_component *fill,
					  const char *typename));

/* Fill in a DEMANGLE_COMPONENT_OPERATOR, using the name of the
   operator and the number of arguments which it takes (the latter is
   used to disambiguate operators which can be both binary and unary,
   such as '-').  Returns non-zero on success, zero if the operator is
   not recognized.  */

extern int
cplus_demangle_fill_operator PARAMS ((struct demangle_component *fill,
				      const char *opname, int args));

/* Fill in a DEMANGLE_COMPONENT_EXTENDED_OPERATOR, providing the
   number of arguments and the name.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_extended_operator PARAMS ((struct demangle_component *fill,
					       int numargs,
					       struct demangle_component *nm));

/* Fill in a DEMANGLE_COMPONENT_CTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_ctor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_ctor_kinds kind,
				  struct demangle_component *name));

/* Fill in a DEMANGLE_COMPONENT_DTOR.  Returns non-zero on success,
   zero for bad arguments.  */

extern int
cplus_demangle_fill_dtor PARAMS ((struct demangle_component *fill,
				  enum gnu_v3_dtor_kinds kind,
				  struct demangle_component *name));

/* This function translates a mangled name into a struct
   demangle_component tree.  The first argument is the mangled name.
   The second argument is DMGL_* options.  This returns a pointer to a
   tree on success, or NULL on failure.  On success, the third
   argument is set to a block of memory allocated by malloc.  This
   block should be passed to free when the tree is no longer
   needed.  */

extern struct demangle_component *
cplus_demangle_v3_components PARAMS ((const char *mangled,
				      int options,
				      void **mem));

/* This function takes a struct demangle_component tree and returns
   the corresponding demangled string.  The first argument is DMGL_*
   options.  The second is the tree to demangle.  The third is a guess
   at the length of the demangled string, used to initially allocate
   the return buffer.  The fourth is a pointer to a size_t.  On
   success, this function returns a buffer allocated by malloc(), and
   sets the size_t pointed to by the fourth argument to the size of
   the allocated buffer (not the length of the returned string).  On
   failure, this function returns NULL, and sets the size_t pointed to
   by the fourth argument to 0 for an invalid tree, or to 1 for a
   memory allocation error.  */

extern char *
cplus_demangle_print PARAMS ((int options,
			      const struct demangle_component *tree,
			      int estimated_length,
			      size_t *p_allocated_size));
@


1.12
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001
d24 1
a24 1
#include <ansidecl.h>
@


1.12.10.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002
d24 1
a24 1
#include "ansidecl.h"
@


1.11
log
@merge from gcc
@
text
@d32 2
d130 1
a130 6
cplus_demangle_v3 PARAMS ((const char* mangled));

/* V3 ABI demangling entry points, defined in cp-demangle.c. Also
   demagle types. */
extern char*
cplus_demangle_v3_type PARAMS ((const char* mangled));
@


1.10
log
@        * demangle.h (no_demangling): New.
        (NO_DEMANGLING_STYLE_STRING): New.

        * cplus-dem.c (libiberty_demanglers): Add no_demangling case.
        (cplus_demangle): Support no_demangling.
@
text
@d130 5
@


1.9
log
@merge from gcc
@
text
@d57 1
d72 1
@


1.8
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d97 1
a97 1
extern struct demangler_engine
d99 3
a101 3
  const char *demangling_style_name;
  enum demangling_styles demangling_style;
  const char *demangling_style_doc;
@


1.7
log
@* libiberty/cp-demangle.c (struct demangling_def): New fields:
is_constructor and is_destructor.
(demangling_new): Initialize them.
(demangle_ctor_dtor_name): Set them, if we detect a constructor
or destructor.
(demangle_v3_with_details, is_gnu_v3_mangled_ctor,
is_gnu_v3_mangled_dtor): New functions.

* include/demangle.h (enum gnu_v3_constructor_kinds,
is_gnu_v3_mangled_ctor, enum gnu_v3_destructor_kinds,
is_gnu_v3_mangled_dtor): New declarations.
@
text
@d142 2
a143 1
extern enum gnu_v3_ctor_kinds is_gnu_v3_mangled_ctor (const char *name);
d156 2
a157 1
extern enum gnu_v3_dtor_kinds is_gnu_v3_mangled_dtor (const char *name);
@


1.6
log
@Fix typos in ChangeLogs; add coff/external.h; fix copyright dates
@
text
@d131 26
@


1.5
log
@merge from gcc
@
text
@d2 2
a3 1
   Copyright 1992, 1995, 1996 Free Software Foundation, Inc.
@


1.4
log
@* demangle.h: Change "new_abi" to "v3" everywhere.
@
text
@d123 1
a123 1
/* V3 ABI demangling entry point, defined in cp-demangle.c.  */
d126 3
@


1.4.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
   Free Software Foundation, Inc.
@


1.3
log
@	* demangle.h: Add gnat and java demangle styles.
@
text
@d40 1
a40 1
#define DMGL_GNU_NEW_ABI (1 << 14)
d44 1
a44 1
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG|DMGL_GNU_NEW_ABI|DMGL_JAVA|DMGL_GNAT)
d63 1
a63 1
  gnu_new_abi_demangling = DMGL_GNU_NEW_ABI,
d76 1
a76 1
#define GNU_NEW_ABI_DEMANGLING_STYLE_STRING   "gnu-new-abi"
d89 1
a89 1
#define GNU_NEW_ABI_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_GNU_NEW_ABI)
d123 1
a123 1
/* New-ABI demangling entry point, defined in cp-demangle.c.  */
d125 1
a125 1
cplus_demangle_new_abi PARAMS ((const char* mangled));
@


1.2
log
@2000-06-15  H.J. Lu  <hjl@@gnu.org>

	* sort.h: New file. Impored from gcc.

	* hashtab.h: Updated from from gcc.

2000-06-07  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* demangle.h (demangling_styles): Remove trailing comma in enum.

	* dyn-string.h (dyn_string_append_char): Change parameter from
	char to int.

2000-06-04  Alex Samuel  <samuel@@codesourcery.com>

	* dyn-string.h: Move here from gcc/dyn-string.h.  Add new functions.

	* demangle.h (DMGL_GNU_NEW_ABI): New macro.
	(DMGL_STYLE_MASK): Or in DMGL_GNU_NEW_ABI.
	(current_demangling_style): Add gnu_new_abi_demangling.
	(GNU_NEW_ABI_DEMANGLING_STYLE_STRING): New macro.
	(GNU_NEW_ABI_DEMANGLING): Likewise.
	(cplus_demangle_new_abi): New declaration.
@
text
@d41 1
d44 1
a44 1
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG|DMGL_GNU_NEW_ABI)
d63 3
a65 1
  gnu_new_abi_demangling = DMGL_GNU_NEW_ABI
d77 2
d90 2
@


1.1
log
@Initial revision
@
text
@d27 14
a40 12
#define DMGL_NO_OPTS	0		/* For readability... */
#define DMGL_PARAMS	(1 << 0)	/* Include function args */
#define DMGL_ANSI	(1 << 1)	/* Include const, volatile, etc */
#define DMGL_JAVA	(1 << 2)	/* Demangle as Java rather than C++. */

#define DMGL_AUTO	(1 << 8)
#define DMGL_GNU	(1 << 9)
#define DMGL_LUCID	(1 << 10)
#define DMGL_ARM	(1 << 11)
#define DMGL_HP 	(1 << 12)       /* For the HP aCC compiler; same as ARM
                                           except for template arguments, etc. */
#define DMGL_EDG	(1 << 13)
d43 1
a43 1
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG)
d61 2
a62 1
  edg_demangling = DMGL_EDG
d67 7
a73 6
#define AUTO_DEMANGLING_STYLE_STRING	"auto"
#define GNU_DEMANGLING_STYLE_STRING	"gnu"
#define LUCID_DEMANGLING_STYLE_STRING	"lucid"
#define ARM_DEMANGLING_STYLE_STRING	"arm"
#define HP_DEMANGLING_STYLE_STRING	"hp"
#define EDG_DEMANGLING_STYLE_STRING	"edg"
d84 11
d109 10
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.1.2.1
log
@Merge from mainline.
@
text
@d27 12
a38 14
#define DMGL_NO_OPTS	 0		/* For readability... */
#define DMGL_PARAMS	 (1 << 0)	/* Include function args */
#define DMGL_ANSI	 (1 << 1)	/* Include const, volatile, etc */
#define DMGL_JAVA	 (1 << 2)	/* Demangle as Java rather than C++. */

#define DMGL_AUTO	 (1 << 8)
#define DMGL_GNU	 (1 << 9)
#define DMGL_LUCID	 (1 << 10)
#define DMGL_ARM	 (1 << 11)
#define DMGL_HP 	 (1 << 12)       /* For the HP aCC compiler;
                                            same as ARM except for
                                            template arguments, etc. */
#define DMGL_EDG	 (1 << 13)
#define DMGL_GNU_NEW_ABI (1 << 14)
d41 1
a41 1
#define DMGL_STYLE_MASK (DMGL_AUTO|DMGL_GNU|DMGL_LUCID|DMGL_ARM|DMGL_HP|DMGL_EDG|DMGL_GNU_NEW_ABI)
d59 1
a59 2
  edg_demangling = DMGL_EDG,
  gnu_new_abi_demangling = DMGL_GNU_NEW_ABI
d64 6
a69 7
#define AUTO_DEMANGLING_STYLE_STRING	      "auto"
#define GNU_DEMANGLING_STYLE_STRING    	      "gnu"
#define LUCID_DEMANGLING_STYLE_STRING	      "lucid"
#define ARM_DEMANGLING_STYLE_STRING	      "arm"
#define HP_DEMANGLING_STYLE_STRING	      "hp"
#define EDG_DEMANGLING_STYLE_STRING	      "edg"
#define GNU_NEW_ABI_DEMANGLING_STYLE_STRING   "gnu-new-abi"
a79 11
#define GNU_NEW_ABI_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_GNU_NEW_ABI)

/* Provide information about the available demangle styles. This code is
   pulled from gdb into libiberty because it is useful to binutils also.  */

extern struct demangler_engine
{
  const char *demangling_style_name;
  enum demangling_styles demangling_style;
  const char *demangling_style_doc;
} libiberty_demanglers[];
a93 10

extern enum demangling_styles 
cplus_demangle_set_style PARAMS ((enum demangling_styles style));

extern enum demangling_styles 
cplus_demangle_name_to_style PARAMS ((const char *name));

/* New-ABI demangling entry point, defined in cp-demangle.c.  */
extern char*
cplus_demangle_new_abi PARAMS ((const char* mangled));
@


