head	1.75;
access;
symbols
	sid-snapshot-20180601:1.75
	sid-snapshot-20180501:1.75
	sid-snapshot-20180401:1.75
	sid-snapshot-20180301:1.75
	sid-snapshot-20180201:1.75
	sid-snapshot-20180101:1.75
	sid-snapshot-20171201:1.75
	sid-snapshot-20171101:1.75
	sid-snapshot-20171001:1.75
	sid-snapshot-20170901:1.75
	sid-snapshot-20170801:1.75
	sid-snapshot-20170701:1.75
	sid-snapshot-20170601:1.75
	sid-snapshot-20170501:1.75
	sid-snapshot-20170401:1.75
	sid-snapshot-20170301:1.75
	sid-snapshot-20170201:1.75
	sid-snapshot-20170101:1.75
	sid-snapshot-20161201:1.75
	sid-snapshot-20161101:1.75
	sid-snapshot-20160901:1.75
	sid-snapshot-20160801:1.75
	sid-snapshot-20160701:1.75
	sid-snapshot-20160601:1.75
	sid-snapshot-20160501:1.75
	sid-snapshot-20160401:1.75
	sid-snapshot-20160301:1.75
	sid-snapshot-20160201:1.75
	sid-snapshot-20160101:1.75
	sid-snapshot-20151201:1.75
	sid-snapshot-20151101:1.75
	sid-snapshot-20151001:1.75
	sid-snapshot-20150901:1.75
	sid-snapshot-20150801:1.75
	sid-snapshot-20150701:1.75
	sid-snapshot-20150601:1.74
	sid-snapshot-20150501:1.74
	sid-snapshot-20150401:1.74
	cygwin-1_7_35-release:1.74
	sid-snapshot-20150301:1.74
	cygwin-1_7_34-release:1.74
	sid-snapshot-20150201:1.74
	sid-snapshot-20150101:1.73
	sid-snapshot-20141201:1.72
	cygwin-1_7_33-release:1.72
	sid-snapshot-20141101:1.72
	sid-snapshot-20141001:1.70
	sid-snapshot-20140901:1.69
	cygwin-1_7_32-release:1.69
	sid-snapshot-20140801:1.69
	cygwin-1_7_31-release:1.69
	sid-snapshot-20140701:1.69
	sid-snapshot-20140601:1.68
	cygwin-1_7_30-release:1.67
	sid-snapshot-20140501:1.67
	cygwin-1_7_29-release:1.67
	sid-snapshot-20140401:1.67
	sid-snapshot-20140301:1.67
	cygwin-1_7_28-release:1.67
	sid-snapshot-20140201:1.67
	sid-snapshot-20140101:1.66
	sid-snapshot-20131201:1.66
	cygwin-1_7_27-release:1.66
	cygwin-1_7_26-release:1.66
	sid-snapshot-20131101:1.66
	sid-snapshot-20131001:1.65
	binutils-2_24-branch:1.65.0.14
	binutils-2_24-branchpoint:1.65
	binutils-2_21_1:1.62
	sid-snapshot-20130901:1.65
	cygwin-1_7_25-release:1.65
	gdb_7_6_1-2013-08-30-release:1.65
	cygwin-1_7_24-release:1.65
	cygwin-1_7_23-release:1.65
	sid-snapshot-20130801:1.65
	cygwin-1_7_22-release:1.65
	cygwin-1_7_21-release:1.65
	sid-snapshot-20130701:1.65
	cygwin-1_7_20-release:1.65
	cygwin-1_7_19-release:1.65
	sid-snapshot-20130601:1.65
	sid-snapshot-20130501:1.65
	gdb_7_6-2013-04-26-release:1.65
	cygwin-64bit-postmerge:1.65
	cygwin-64bit-premerge-branch:1.65.0.12
	cygwin-64bit-premerge:1.65
	sid-snapshot-20130401:1.65
	binutils-2_23_2:1.65
	gdb_7_6-branch:1.65.0.10
	gdb_7_6-2013-03-12-branchpoint:1.65
	cygwin-1_7_18-release:1.65
	sid-snapshot-20130301:1.65
	sid-snapshot-20130201:1.65
	sid-snapshot-20130101:1.65
	sid-snapshot-20121201:1.65
	gdb_7_5_1-2012-11-29-release:1.65
	binutils-2_23_1:1.65
	sid-snapshot-20121101:1.65
	binutils-2_23:1.65
	cygwin-1_7_17-release:1.65
	sid-snapshot-20121001:1.65
	sid-snapshot-20120901:1.65
	gdb_7_5-2012-08-17-release:1.65
	cygwin-64bit-branch:1.65.0.8
	sid-snapshot-20120801:1.65
	binutils-2_23-branch:1.65.0.6
	binutils-2_23-branchpoint:1.65
	cygwin-1_7_16-release:1.65
	gdb_7_5-branch:1.65.0.4
	gdb_7_5-2012-07-18-branchpoint:1.65
	sid-snapshot-20120701:1.65
	sid-snapshot-20120601:1.65
	cygwin-1_7_15-release:1.65
	sid-snapshot-20120501:1.65
	binutils-2_22_branch:1.64.0.4
	gdb_7_4_1-2012-04-26-release:1.65
	cygwin-1_7_14_2-release:1.65
	cygwin-1_7_14-release:1.65
	cygwin-1_7_12-release:1.65
	sid-snapshot-20120401:1.65
	sid-snapshot-20120301:1.65
	cygwin-1_7_11-release:1.65
	cygwin-1_7_10-release:1.65
	sid-snapshot-20120201:1.65
	gdb_7_4-2012-01-24-release:1.65
	sid-snapshot-20120101:1.65
	gdb_7_4-branch:1.65.0.2
	gdb_7_4-2011-12-13-branchpoint:1.65
	sid-snapshot-20111201:1.65
	binutils-2_22:1.64
	sid-snapshot-20111101:1.65
	sid-snapshot-20111001:1.65
	binutils-2_22-branch:1.64.0.2
	binutils-2_22-branchpoint:1.64
	gdb_7_3_1-2011-09-04-release:1.63
	sid-snapshot-20110901:1.64
	sid-snapshot-20110801:1.64
	gdb_7_3-2011-07-26-release:1.63
	sid-snapshot-20110701:1.63
	sid-snapshot-20110601:1.63
	sid-snapshot-20110501:1.63
	gdb_7_3-branch:1.63.0.2
	gdb_7_3-2011-04-01-branchpoint:1.63
	sid-snapshot-20110401:1.63
	cygwin-1_7_9-release:1.63
	sid-snapshot-20110301:1.63
	cygwin-1_7_8-release:1.63
	sid-snapshot-20110201:1.63
	sid-snapshot-20110101:1.62
	binutils-2_21:1.62
	sid-snapshot-20101201:1.62
	binutils-2_21-branch:1.62.0.2
	binutils-2_21-branchpoint:1.62
	sid-snapshot-20101101:1.62
	sid-snapshot-20101001:1.61
	binutils-2_20_1:1.60
	gdb_7_2-2010-09-02-release:1.61
	sid-snapshot-20100901:1.61
	cygwin-1_7_7-release:1.61
	sid-snapshot-20100801:1.61
	gdb_7_2-branch:1.61.0.2
	gdb_7_2-2010-07-07-branchpoint:1.61
	sid-snapshot-20100701:1.61
	sid-snapshot-20100601:1.61
	sid-snapshot-20100501:1.61
	cygwin-1_7_5-release:1.60
	cygwin-1_7_4-release:1.60
	sid-snapshot-20100401:1.60
	cygwin-1_7_3-release:1.60
	cygwin-1_7_2-release:1.60
	gdb_7_1-2010-03-18-release:1.60
	sid-snapshot-20100301:1.60
	gdb_7_1-branch:1.60.0.8
	gdb_7_1-2010-02-18-branchpoint:1.60
	sid-snapshot-20100201:1.60
	sid-snapshot-20100101:1.60
	gdb_7_0_1-2009-12-22-release:1.60
	cygwin-1_7_1-release:1.60
	sid-snapshot-20091201:1.60
	sid-snapshot-20091101:1.60
	binutils-2_20:1.60
	gdb_7_0-2009-10-06-release:1.60
	sid-snapshot-20091001:1.60
	gdb_7_0-branch:1.60.0.6
	gdb_7_0-2009-09-16-branchpoint:1.60
	arc-sim-20090309:1.57
	binutils-arc-20081103-branch:1.58.0.16
	binutils-arc-20081103-branchpoint:1.58
	binutils-2_20-branch:1.60.0.4
	binutils-2_20-branchpoint:1.60
	sid-snapshot-20090901:1.60
	sid-snapshot-20090801:1.60
	msnyder-checkpoint-072509-branch:1.60.0.2
	msnyder-checkpoint-072509-branchpoint:1.60
	sid-snapshot-20090701:1.58
	dje-cgen-play1-branch:1.58.0.14
	dje-cgen-play1-branchpoint:1.58
	sid-snapshot-20090601:1.58
	sid-snapshot-20090501:1.58
	sid-snapshot-20090401:1.58
	arc-20081103-branch:1.58.0.12
	arc-20081103-branchpoint:1.58
	arc-insight_6_8-branch:1.57.0.10
	arc-insight_6_8-branchpoint:1.57
	insight_6_8-branch:1.57.0.8
	insight_6_8-branchpoint:1.57
	sid-snapshot-20090301:1.58
	binutils-2_19_1:1.58
	sid-snapshot-20090201:1.58
	sid-snapshot-20090101:1.58
	reverse-20081226-branch:1.58.0.10
	reverse-20081226-branchpoint:1.58
	sid-snapshot-20081201:1.58
	multiprocess-20081120-branch:1.58.0.8
	multiprocess-20081120-branchpoint:1.58
	sid-snapshot-20081101:1.58
	binutils-2_19:1.58
	sid-snapshot-20081001:1.58
	reverse-20080930-branch:1.58.0.6
	reverse-20080930-branchpoint:1.58
	binutils-2_19-branch:1.58.0.4
	binutils-2_19-branchpoint:1.58
	sid-snapshot-20080901:1.58
	sid-snapshot-20080801:1.58
	reverse-20080717-branch:1.58.0.2
	reverse-20080717-branchpoint:1.58
	sid-snapshot-20080701:1.58
	msnyder-reverse-20080609-branch:1.57.0.6
	msnyder-reverse-20080609-branchpoint:1.57
	drow-reverse-20070409-branch:1.55.0.2
	drow-reverse-20070409-branchpoint:1.55
	sid-snapshot-20080601:1.57
	sid-snapshot-20080501:1.57
	sid-snapshot-20080403:1.57
	sid-snapshot-20080401:1.57
	gdb_6_8-2008-03-27-release:1.57
	sid-snapshot-20080301:1.57
	gdb_6_8-branch:1.57.0.4
	gdb_6_8-2008-02-26-branchpoint:1.57
	sid-snapshot-20080201:1.57
	sid-snapshot-20080101:1.57
	sid-snapshot-20071201:1.57
	sid-snapshot-20071101:1.57
	gdb_6_7_1-2007-10-29-release:1.57
	gdb_6_7-2007-10-10-release:1.57
	sid-snapshot-20071001:1.57
	gdb_6_7-branch:1.57.0.2
	gdb_6_7-2007-09-07-branchpoint:1.57
	binutils-2_18:1.56
	binutils-2_18-branch:1.56.0.2
	binutils-2_18-branchpoint:1.56
	insight_6_6-20070208-release:1.52
	binutils-csl-coldfire-4_1-32:1.50.14.3
	binutils-csl-sourcerygxx-4_1-32:1.50.14.3
	gdb_6_6-2006-12-18-release:1.52
	binutils-csl-innovasic-fido-3_4_4-33:1.50.14.3
	binutils-csl-sourcerygxx-3_4_4-32:1.30.6.1
	binutils-csl-coldfire-4_1-30:1.50.14.3
	binutils-csl-sourcerygxx-4_1-30:1.50.14.3
	binutils-csl-coldfire-4_1-28:1.50.14.3
	binutils-csl-sourcerygxx-4_1-29:1.50.14.3
	binutils-csl-sourcerygxx-4_1-28:1.50.14.3
	gdb_6_6-branch:1.52.0.4
	gdb_6_6-2006-11-15-branchpoint:1.52
	binutils-csl-arm-2006q3-27:1.50.14.3
	binutils-csl-sourcerygxx-4_1-27:1.50.14.3
	binutils-csl-arm-2006q3-26:1.50.14.3
	binutils-csl-sourcerygxx-4_1-26:1.50.14.3
	binutils-csl-sourcerygxx-4_1-25:1.50.14.3
	binutils-csl-sourcerygxx-4_1-24:1.50.14.3
	binutils-csl-sourcerygxx-4_1-23:1.50.14.3
	insight_6_5-20061003-release:1.51
	gdb-csl-symbian-6_4_50_20060226-12:1.50.10.1
	binutils-csl-sourcerygxx-4_1-21:1.50.14.3
	binutils-csl-arm-2006q3-21:1.50.14.3
	binutils-csl-sourcerygxx-4_1-22:1.50.14.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.50.14.3
	binutils-csl-sourcerygxx-4_1-20:1.50.14.2
	binutils-csl-arm-2006q3-19:1.50.14.2
	binutils-csl-sourcerygxx-4_1-19:1.50.14.2
	binutils-csl-sourcerygxx-4_1-18:1.50.14.2
	binutils-csl-renesas-4_1-9:1.50.14.2
	gdb-csl-sourcerygxx-3_4_4-25:1.50
	binutils-csl-sourcerygxx-3_4_4-25:1.30.6.1
	nickrob-async-20060828-mergepoint:1.52
	gdb-csl-symbian-6_4_50_20060226-11:1.50.10.1
	binutils-csl-renesas-4_1-8:1.50.14.1
	binutils-csl-renesas-4_1-7:1.50.14.1
	binutils-csl-renesas-4_1-6:1.50.14.1
	gdb-csl-sourcerygxx-4_1-17:1.50.10.1
	binutils-csl-sourcerygxx-4_1-17:1.50.14.1
	gdb-csl-20060226-branch-local-2:1.50.10.1
	cr-0x5f1:1.52.0.2
	gdb-csl-sourcerygxx-4_1-14:1.50.10.1
	binutils-csl-sourcerygxx-4_1-14:1.50.14.1
	binutils-csl-sourcerygxx-4_1-15:1.50.14.1
	gdb-csl-sourcerygxx-4_1-13:1.50.10.1
	binutils-csl-sourcerygxx-4_1-13:1.50.14.1
	binutils-2_17:1.51
	gdb-csl-sourcerygxx-4_1-12:1.50.10.1
	binutils-csl-sourcerygxx-4_1-12:1.50.14.1
	gdb-csl-sourcerygxx-3_4_4-21:1.50.10.1
	binutils-csl-sourcerygxx-3_4_4-21:1.50.14.1
	gdb_6_5-20060621-release:1.51
	binutils-csl-wrs-linux-3_4_4-24:1.30.4.1
	binutils-csl-wrs-linux-3_4_4-23:1.30.4.1
	gdb-csl-sourcerygxx-4_1-9:1.50.10.1
	binutils-csl-sourcerygxx-4_1-9:1.50.14.1
	gdb-csl-sourcerygxx-4_1-8:1.50.10.1
	binutils-csl-sourcerygxx-4_1-8:1.50.14.1
	gdb-csl-sourcerygxx-4_1-7:1.50.10.1
	binutils-csl-sourcerygxx-4_1-7:1.50.14.1
	gdb-csl-arm-2006q1-6:1.50.10.1
	binutils-csl-arm-2006q1-6:1.50.14.1
	gdb-csl-sourcerygxx-4_1-6:1.50.10.1
	binutils-csl-sourcerygxx-4_1-6:1.50.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.30.4.1
	gdb-csl-symbian-6_4_50_20060226-10:1.50.10.1
	gdb-csl-symbian-6_4_50_20060226-9:1.50.10.1
	gdb-csl-symbian-6_4_50_20060226-8:1.50.10.1
	gdb-csl-coldfire-4_1-11:1.50.10.1
	binutils-csl-coldfire-4_1-11:1.50.14.1
	gdb-csl-sourcerygxx-3_4_4-19:1.50.10.1
	binutils-csl-sourcerygxx-3_4_4-19:1.50.14.1
	gdb-csl-coldfire-4_1-10:1.50.10.1
	gdb_6_5-branch:1.51.0.10
	gdb_6_5-2006-05-14-branchpoint:1.51
	binutils-csl-coldfire-4_1-10:1.50.14.1
	gdb-csl-sourcerygxx-4_1-5:1.50.10.1
	binutils-csl-sourcerygxx-4_1-5:1.50.14.1
	nickrob-async-20060513-branch:1.51.0.8
	nickrob-async-20060513-branchpoint:1.51
	gdb-csl-sourcerygxx-4_1-4:1.50.10.1
	binutils-csl-sourcerygxx-4_1-4:1.50.14.1
	msnyder-reverse-20060502-branch:1.51.0.6
	msnyder-reverse-20060502-branchpoint:1.51
	binutils-csl-wrs-linux-3_4_4-21:1.30.4.1
	gdb-csl-morpho-4_1-4:1.50.10.1
	binutils-csl-morpho-4_1-4:1.50.14.1
	gdb-csl-sourcerygxx-3_4_4-17:1.50.10.1
	binutils-csl-sourcerygxx-3_4_4-17:1.50.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.30.4.1
	readline_5_1-import-branch:1.51.0.4
	readline_5_1-import-branchpoint:1.51
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.50.10.1
	binutils-2_17-branch:1.51.0.2
	binutils-2_17-branchpoint:1.51
	gdb-csl-symbian-20060226-branch:1.50.10.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.50.10.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.50.10.1
	msnyder-reverse-20060331-branch:1.50.0.16
	msnyder-reverse-20060331-branchpoint:1.50
	binutils-csl-2_17-branch:1.50.0.14
	binutils-csl-2_17-branchpoint:1.50
	gdb-csl-available-20060303-branch:1.50.0.12
	gdb-csl-available-20060303-branchpoint:1.50
	gdb-csl-20060226-branch:1.50.0.10
	gdb-csl-20060226-branchpoint:1.50
	gdb_6_4-20051202-release:1.50
	msnyder-fork-checkpoint-branch:1.50.0.8
	msnyder-fork-checkpoint-branchpoint:1.50
	gdb-csl-gxxpro-6_3-branch:1.50.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.50
	gdb_6_4-branch:1.50.0.4
	gdb_6_4-2005-11-01-branchpoint:1.50
	gdb-csl-arm-20051020-branch:1.50.0.2
	gdb-csl-arm-20051020-branchpoint:1.50
	binutils-csl-gxxpro-3_4-branch:1.30.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.30
	binutils-2_16_1:1.30
	msnyder-tracepoint-checkpoint-branch:1.46.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.46
	gdb-csl-arm-20050325-2005-q1b:1.33.2.1
	binutils-csl-arm-2005q1b:1.30.4.1
	binutils-2_16:1.30
	gdb-csl-arm-20050325-2005-q1a:1.33.2.1
	binutils-csl-arm-2005q1a:1.30.4.1
	csl-arm-20050325-branch:1.33.0.2
	csl-arm-20050325-branchpoint:1.33
	binutils-csl-arm-2005q1-branch:1.30.0.4
	binutils-csl-arm-2005q1-branchpoint:1.30
	binutils-2_16-branch:1.30.0.2
	binutils-2_16-branchpoint:1.30
	csl-arm-2004-q3d:1.29
	gdb_6_3-20041109-release:1.29
	gdb_6_3-branch:1.29.0.2
	gdb_6_3-20041019-branchpoint:1.29
	csl-arm-2004-q3:1.29
	drow_intercu-merge-20040921:1.29
	drow_intercu-merge-20040915:1.29
	jimb-gdb_6_2-e500-branch:1.24.0.36
	jimb-gdb_6_2-e500-branchpoint:1.24
	gdb_6_2-20040730-release:1.24
	gdb_6_2-branch:1.24.0.32
	gdb_6_2-2004-07-10-gmt-branchpoint:1.24
	gdb_6_1_1-20040616-release:1.24
	binutils-2_15:1.24
	binutils-2_15-branchpoint:1.24
	csl-arm-2004-q1a:1.24
	csl-arm-2004-q1:1.24
	gdb_6_1-2004-04-05-release:1.24
	drow_intercu-merge-20040402:1.24
	drow_intercu-merge-20040327:1.24
	ezannoni_pie-20040323-branch:1.24.0.30
	ezannoni_pie-20040323-branchpoint:1.24
	cagney_tramp-20040321-mergepoint:1.24
	cagney_tramp-20040309-branch:1.24.0.28
	cagney_tramp-20040309-branchpoint:1.24
	gdb_6_1-branch:1.24.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.24
	drow_intercu-20040221-branch:1.24.0.24
	drow_intercu-20040221-branchpoint:1.24
	binutils-2_15-branch:1.24.0.22
	cagney_bfdfile-20040213-branch:1.24.0.20
	cagney_bfdfile-20040213-branchpoint:1.24
	drow-cplus-merge-20040208:1.24
	carlton_dictionary-20040126-merge:1.24
	cagney_bigcore-20040122-branch:1.24.0.18
	cagney_bigcore-20040122-branchpoint:1.24
	drow-cplus-merge-20040113:1.24
	csl-arm-2003-q4:1.24
	drow-cplus-merge-20031224:1.24
	drow-cplus-merge-20031220:1.24
	carlton_dictionary-20031215-merge:1.24
	drow-cplus-merge-20031214:1.24
	carlton-dictionary-20031111-merge:1.24
	gdb_6_0-2003-10-04-release:1.24
	kettenis_sparc-20030918-branch:1.24.0.16
	kettenis_sparc-20030918-branchpoint:1.24
	carlton_dictionary-20030917-merge:1.24
	ezannoni_pie-20030916-branchpoint:1.24
	ezannoni_pie-20030916-branch:1.24.0.14
	cagney_x86i386-20030821-branch:1.24.0.12
	cagney_x86i386-20030821-branchpoint:1.24
	carlton_dictionary-20030805-merge:1.24
	carlton_dictionary-20030627-merge:1.24
	gdb_6_0-branch:1.24.0.10
	gdb_6_0-2003-06-23-branchpoint:1.24
	jimb-ppc64-linux-20030613-branch:1.24.0.8
	jimb-ppc64-linux-20030613-branchpoint:1.24
	binutils-2_14:1.23
	cagney_convert-20030606-branch:1.24.0.6
	cagney_convert-20030606-branchpoint:1.24
	cagney_writestrings-20030508-branch:1.23.0.22
	cagney_writestrings-20030508-branchpoint:1.23
	jimb-ppc64-linux-20030528-branch:1.24.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.24
	carlton_dictionary-20030523-merge:1.24
	cagney_fileio-20030521-branch:1.24.0.2
	cagney_fileio-20030521-branchpoint:1.24
	kettenis_i386newframe-20030517-mergepoint:1.24
	jimb-ppc64-linux-20030509-branch:1.23.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.23
	kettenis_i386newframe-20030504-mergepoint:1.23
	carlton_dictionary-20030430-merge:1.23
	binutils-2_14-branch:1.23.0.18
	binutils-2_14-branchpoint:1.23
	kettenis_i386newframe-20030419-branch:1.23.0.16
	kettenis_i386newframe-20030419-branchpoint:1.23
	carlton_dictionary-20030416-merge:1.23
	cagney_frameaddr-20030409-mergepoint:1.23
	kettenis_i386newframe-20030406-branch:1.23.0.14
	kettenis_i386newframe-20030406-branchpoint:1.23
	cagney_frameaddr-20030403-branchpoint:1.23
	cagney_frameaddr-20030403-branch:1.23.0.12
	cagney_framebase-20030330-mergepoint:1.23
	cagney_framebase-20030326-branch:1.23.0.10
	cagney_framebase-20030326-branchpoint:1.23
	cagney_lazyid-20030317-branch:1.23.0.8
	cagney_lazyid-20030317-branchpoint:1.23
	kettenis-i386newframe-20030316-mergepoint:1.23
	offbyone-20030313-branch:1.23.0.6
	offbyone-20030313-branchpoint:1.23
	kettenis-i386newframe-20030308-branch:1.23.0.4
	kettenis-i386newframe-20030308-branchpoint:1.23
	carlton_dictionary-20030305-merge:1.23
	cagney_offbyone-20030303-branch:1.23.0.2
	cagney_offbyone-20030303-branchpoint:1.23
	w32api-2_2:1.20
	mingw-runtime-2_4:1.20
	carlton_dictionary-20030207-merge:1.20
	interps-20030202-branch:1.20.0.4
	interps-20030202-branchpoint:1.20
	cagney-unwind-20030108-branch:1.20.0.2
	cagney-unwind-20030108-branchpoint:1.20
	binutils-2_13_2_1:1.17
	binutils-2_13_2:1.17
	carlton_dictionary-20021223-merge:1.20
	gdb_5_3-2002-12-12-release:1.17
	carlton_dictionary-20021115-merge:1.18
	binutils-2_13_1:1.17
	kseitz_interps-20021105-merge:1.18
	kseitz_interps-20021103-merge:1.18
	drow-cplus-merge-20021020:1.18
	drow-cplus-merge-20021025:1.18
	carlton_dictionary-20021025-merge:1.18
	carlton_dictionary-20021011-merge:1.18
	drow-cplus-branch:1.18.0.4
	drow-cplus-branchpoint:1.18
	kseitz_interps-20020930-merge:1.18
	carlton_dictionary-20020927-merge:1.18
	carlton_dictionary-branch:1.18.0.2
	carlton_dictionary-20020920-branchpoint:1.18
	sid-20020905-branchpoint:1.17
	sid-20020905-branch:1.17.0.10
	gdb_5_3-branch:1.17.0.8
	gdb_5_3-2002-09-04-branchpoint:1.17
	kseitz_interps-20020829-merge:1.17
	cagney_sysregs-20020825-branch:1.17.0.6
	cagney_sysregs-20020825-branchpoint:1.17
	readline_4_3-import-branch:1.17.0.4
	readline_4_3-import-branchpoint:1.17
	binutils-2_13:1.17
	gdb_5_2_1-2002-07-23-release:1.16
	binutils-2_13-branchpoint:1.17
	binutils-2_13-branch:1.17.0.2
	kseitz_interps-20020528-branch:1.16.0.10
	kseitz_interps-20020528-branchpoint:1.16
	cagney_regbuf-20020515-branch:1.16.0.8
	cagney_regbuf-20020515-branchpoint:1.16
	binutils-2_12_1:1.16
	jimb-macro-020506-branch:1.16.0.6
	jimb-macro-020506-branchpoint:1.16
	gdb_5_2-2002-04-29-release:1.16
	binutils-2_12:1.16
	gdb_5_2-branch:1.16.0.4
	gdb_5_2-2002-03-03-branchpoint:1.16
	binutils-2_12-branch:1.16.0.2
	binutils-2_12-branchpoint:1.16
	gdb_5_1_1-2002-01-24-release:1.9
	gdb_5_1_0_1-2002-01-03-release:1.9
	cygnus_cvs_20020108_pre:1.15
	gdb_5_1_0_1-2002-01-03-branch:1.9.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.9
	gdb_5_1-2001-11-21-release:1.9
	gdb_s390-2001-09-26-branch:1.9.0.4
	gdb_s390-2001-09-26-branchpoint:1.9
	gdb_5_1-2001-07-29-branch:1.9.0.2
	gdb_5_1-2001-07-29-branchpoint:1.9
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	insight-precleanup-2001-01-01:1.4
	binutils-2_10_1:1.1.1.2
	binutils-2_10:1.1.1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.2.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	binutils-2_10-branch:1.1.1.2.0.2
	binutils-2_10-branchpoint:1.1.1.2
	egcs_20000222:1.1.1.2
	binutils_latest_snapshot:1.69
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.75
date	2015.06.02.03.05.33;	author dj;	state Exp;
branches;
next	1.74;

1.74
date	2015.01.14.22.03.05;	author dj;	state Exp;
branches;
next	1.73;

1.73
date	2014.12.15.06.56.39;	author dj;	state Exp;
branches;
next	1.72;

1.72
date	2014.10.28.23.25.21;	author dj;	state Exp;
branches;
next	1.71;

1.71
date	2014.10.15.21.12.58;	author dj;	state Exp;
branches;
next	1.70;

1.70
date	2014.09.28.17.46.07;	author dj;	state Exp;
branches;
next	1.69;

1.69
date	2014.06.11.17.56.17;	author dj;	state Exp;
branches;
next	1.68;

1.68
date	2014.05.22.15.01.34;	author dj;	state Exp;
branches;
next	1.67;

1.67
date	2014.01.21.16.09.25;	author dj;	state Exp;
branches;
next	1.66;

1.66
date	2013.10.29.15.14.27;	author dj;	state Exp;
branches;
next	1.65;

1.65
date	2011.09.28.20.01.37;	author dj;	state Exp;
branches;
next	1.64;

1.64
date	2011.07.22.14.37.51;	author dj;	state Exp;
branches;
next	1.63;

1.63
date	2011.01.03.21.05.50;	author dj;	state Exp;
branches;
next	1.62;

1.62
date	2010.10.06.23.01.23;	author dj;	state Exp;
branches;
next	1.61;

1.61
date	2010.04.24.01.03.15;	author dj;	state Exp;
branches;
next	1.60;

1.60
date	2009.07.25.11.28.15;	author dj;	state Exp;
branches;
next	1.59;

1.59
date	2009.07.25.00.01.48;	author dj;	state Exp;
branches;
next	1.58;

1.58
date	2008.06.24.03.01.29;	author dj;	state Exp;
branches;
next	1.57;

1.57
date	2007.09.06.17.22.36;	author dj;	state Exp;
branches;
next	1.56;

1.56
date	2007.05.08.01.29.28;	author dj;	state Exp;
branches;
next	1.55;

1.55
date	2007.02.09.17.21.45;	author dj;	state Exp;
branches;
next	1.54;

1.54
date	2007.01.31.18.49.40;	author vprus;	state Exp;
branches;
next	1.53;

1.53
date	2006.11.30.17.36.10;	author amylaar;	state Exp;
branches;
next	1.52;

1.52
date	2006.06.01.14.57.47;	author dj;	state Exp;
branches;
next	1.51;

1.51
date	2006.04.12.18.41.45;	author dj;	state Exp;
branches;
next	1.50;

1.50
date	2005.09.26.21.02.57;	author mmitchel;	state Exp;
branches
	1.50.10.1
	1.50.14.1;
next	1.49;

1.49
date	2005.06.21.00.28.25;	author geoffk;	state Exp;
branches;
next	1.48;

1.48
date	2005.06.06.22.13.35;	author dj;	state Exp;
branches;
next	1.47;

1.47
date	2005.06.02.03.05.03;	author dj;	state Exp;
branches;
next	1.46;

1.46
date	2005.05.28.19.49.21;	author dj;	state Exp;
branches;
next	1.45;

1.45
date	2005.05.24.21.00.54;	author dj;	state Exp;
branches;
next	1.44;

1.44
date	2005.05.12.20.00.35;	author dj;	state Exp;
branches;
next	1.43;

1.43
date	2005.05.10.10.21.08;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2005.04.26.01.01.49;	author dj;	state Exp;
branches;
next	1.41;

1.41
date	2005.04.19.19.09.30;	author dj;	state Exp;
branches;
next	1.40;

1.40
date	2005.04.16.21.49.07;	author dj;	state Exp;
branches;
next	1.39;

1.39
date	2005.04.14.02.22.07;	author dj;	state Exp;
branches;
next	1.38;

1.38
date	2005.04.11.19.31.50;	author dj;	state Exp;
branches;
next	1.37;

1.37
date	2005.03.29.19.32.15;	author dj;	state Exp;
branches;
next	1.36;

1.36
date	2005.03.29.02.15.24;	author ian;	state Exp;
branches;
next	1.35;

1.35
date	2005.03.29.01.12.11;	author mmitchel;	state Exp;
branches;
next	1.34;

1.34
date	2005.03.27.05.28.29;	author dj;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.25.04.57.00;	author dj;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2005.03.23.00.01.17;	author dj;	state Exp;
branches;
next	1.31;

1.31
date	2005.03.10.01.05.51;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2005.03.01.14.32.34;	author dj;	state Exp;
branches
	1.30.4.1
	1.30.6.1;
next	1.29;

1.29
date	2004.09.14.01.16.22;	author dj;	state Exp;
branches;
next	1.28;

1.28
date	2004.09.05.06.04.05;	author dj;	state Exp;
branches;
next	1.27;

1.27
date	2004.08.06.15.38.11;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2004.07.24.18.04.39;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2004.07.13.21.10.23;	author dj;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.15.19.08.25;	author jimb;	state Exp;
branches
	1.24.24.1;
next	1.23;

1.23
date	2003.02.27.21.01.01;	author dj;	state Exp;
branches
	1.23.16.1;
next	1.22;

1.22
date	2003.02.21.01.35.25;	author dj;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.20.22.13.09;	author drow;	state Exp;
branches;
next	1.20;

1.20
date	2002.11.24.06.58.20;	author thorpej;	state Exp;
branches;
next	1.19;

1.19
date	2002.11.22.21.02.07;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2002.09.20.00.21.58;	author aoliva;	state Exp;
branches
	1.18.2.1
	1.18.4.1;
next	1.17;

1.17
date	2002.06.24.17.39.28;	author dj;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.28.22.03.14;	author dj;	state Exp;
branches
	1.16.10.1;
next	1.15;

1.15
date	2001.10.23.15.31.55;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.07.17.23.43;	author dj;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.24.23.37.30;	author dj;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.18.21.02.02;	author dj;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.17.23.10.37;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.10.23.46.15;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.31.19.05.20;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.14.19.45.29;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.14.02.27.43;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.10.22.23.16;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.06.18.26.32;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.29.20.14.48;	author dj;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.09.03.17.35.07;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.17.23.08.19;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.02;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.50.10.1
date	2006.03.17.20.36.14;	author jimb;	state Exp;
branches;
next	;

1.50.14.1
date	2006.03.31.01.17.05;	author mmitchel;	state Exp;
branches;
next	1.50.14.2;

1.50.14.2
date	2006.08.22.15.08.39;	author jsm28;	state Exp;
branches;
next	1.50.14.3;

1.50.14.3
date	2006.09.28.20.41.08;	author shinwell;	state Exp;
branches;
next	;

1.33.2.1
date	2005.03.28.20.06.59;	author mmitchel;	state Exp;
branches;
next	;

1.30.4.1
date	2005.03.28.20.26.13;	author mmitchel;	state Exp;
branches;
next	;

1.30.6.1
date	2005.08.30.19.57.33;	author mmitchel;	state Exp;
branches;
next	;

1.24.24.1
date	2004.09.16.17.01.49;	author drow;	state Exp;
branches;
next	;

1.23.16.1
date	2003.05.18.09.44.36;	author kettenis;	state Exp;
branches;
next	;

1.18.2.1
date	2002.12.23.19.39.22;	author carlton;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2003.03.06.00.56.37;	author carlton;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2003.05.23.18.40.53;	author carlton;	state Exp;
branches;
next	;

1.18.4.1
date	2003.12.14.20.27.59;	author drow;	state Exp;
branches;
next	;

1.16.10.1
date	2002.07.22.21.47.13;	author kseitz;	state Exp;
branches;
next	1.16.10.2;

1.16.10.2
date	2002.10.01.00.46.36;	author kseitz;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.07.03.21.38;	author amodra;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.07.20.02.22.17;	author obrien;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.02;	author rth;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.02.22.16.18.13;	author ian;	state Exp;
branches;
next	;


desc
@@


1.75
log
@merge from gcc
@
text
@/* Function declarations for libiberty.

   Copyright (C) 1997-2015 Free Software Foundation, Inc.
   
   Note - certain prototypes declared in this header file are for
   functions whoes implementation copyright does not belong to the
   FSF.  Those prototypes are present in this file for reference
   purposes only and their presence in this file should not construed
   as an indication of ownership by the FSF of the implementation of
   those functions in any way or form whatsoever.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.
   
   Written by Cygnus Support, 1994.

   The libiberty library provides a number of functions which are
   missing on some operating systems.  We do not declare those here,
   to avoid conflicts with the system header files on operating
   systems that do support those functions.  In this file we only
   declare those functions which are specific to libiberty.  */

#ifndef LIBIBERTY_H
#define LIBIBERTY_H

#ifdef __cplusplus
extern "C" {
#endif

#include "ansidecl.h"

/* Get a definition for size_t.  */
#include <stddef.h>
/* Get a definition for va_list.  */
#include <stdarg.h>

#include <stdio.h>

/* If the OS supports it, ensure that the supplied stream is setup to
   avoid any multi-threaded locking.  Otherwise leave the FILE pointer
   unchanged.  If the stream is NULL do nothing.  */

extern void unlock_stream (FILE *);

/* If the OS supports it, ensure that the standard I/O streams, stdin,
   stdout and stderr are setup to avoid any multi-threaded locking.
   Otherwise do nothing.  */

extern void unlock_std_streams (void);

/* Open and return a FILE pointer.  If the OS supports it, ensure that
   the stream is setup to avoid any multi-threaded locking.  Otherwise
   return the FILE pointer unchanged.  */

extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);

/* Build an argument vector from a string.  Allocates memory using
   malloc.  Use freeargv to free the vector.  */

extern char **buildargv (const char *) ATTRIBUTE_MALLOC;

/* Free a vector returned by buildargv.  */

extern void freeargv (char **);

/* Duplicate an argument vector. Allocates memory using malloc.  Use
   freeargv to free the vector.  */

extern char **dupargv (char **) ATTRIBUTE_MALLOC;

/* Expand "@@file" arguments in argv.  */

extern void expandargv (int *, char ***);

/* Write argv to an @@-file, inserting necessary quoting.  */

extern int writeargv (char **, FILE *);

/* Return the number of elements in argv.  */

extern int countargv (char**);

/* Return the last component of a path name.  Note that we can't use a
   prototype here because the parameter is declared inconsistently
   across different systems, sometimes as "char *" and sometimes as
   "const char *" */

/* HAVE_DECL_* is a three-state macro: undefined, 0 or 1.  If it is
   undefined, we haven't run the autoconf check so provide the
   declaration without arguments.  If it is 0, we checked and failed
   to find the declaration so provide a fully prototyped one.  If it
   is 1, we found it so don't provide any declaration at all.  */
#if !HAVE_DECL_BASENAME
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) \
 || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__NetBSD__) \
 || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) \
 || defined (__DragonFly__) || defined (HAVE_DECL_BASENAME) 
extern char *basename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);
#else
/* Do not allow basename to be used if there is no prototype seen.  We
   either need to use the above prototype or have one from
   autoconf which would result in HAVE_DECL_BASENAME being set.  */
#define basename basename_cannot_be_used_without_a_prototype
#endif
#endif

/* A well-defined basename () that is always compiled in.  */

extern const char *lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);

/* Same, but assumes DOS semantics (drive name, backslash is also a
   dir separator) regardless of host.  */

extern const char *dos_lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);

/* Same, but assumes Unix semantics (absolute paths always start with
   a slash, only forward slash is accepted as dir separator)
   regardless of host.  */

extern const char *unix_lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);

/* A well-defined realpath () that is always compiled in.  */

extern char *lrealpath (const char *);

/* Concatenate an arbitrary number of strings.  You must pass NULL as
   the last argument of this function, to terminate the list of
   strings.  Allocates memory using xmalloc.  */

extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;

/* Concatenate an arbitrary number of strings.  You must pass NULL as
   the last argument of this function, to terminate the list of
   strings.  Allocates memory using xmalloc.  The first argument is
   not one of the strings to be concatenated, but if not NULL is a
   pointer to be freed after the new string is created, similar to the
   way xrealloc works.  */

extern char *reconcat (char *, const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;

/* Determine the length of concatenating an arbitrary number of
   strings.  You must pass NULL as the last argument of this function,
   to terminate the list of strings.  */

extern unsigned long concat_length (const char *, ...) ATTRIBUTE_SENTINEL;

/* Concatenate an arbitrary number of strings into a SUPPLIED area of
   memory.  You must pass NULL as the last argument of this function,
   to terminate the list of strings.  The supplied memory is assumed
   to be large enough.  */

extern char *concat_copy (char *, const char *, ...) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1) ATTRIBUTE_SENTINEL;

/* Concatenate an arbitrary number of strings into a GLOBAL area of
   memory.  You must pass NULL as the last argument of this function,
   to terminate the list of strings.  The supplied memory is assumed
   to be large enough.  */

extern char *concat_copy2 (const char *, ...) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;

/* This is the global area used by concat_copy2.  */

extern char *libiberty_concat_ptr;

/* Concatenate an arbitrary number of strings.  You must pass NULL as
   the last argument of this function, to terminate the list of
   strings.  Allocates memory using alloca.  The arguments are
   evaluated twice!  */
#define ACONCAT(ACONCAT_PARAMS) \
  (libiberty_concat_ptr = (char *) alloca (concat_length ACONCAT_PARAMS + 1), \
   concat_copy2 ACONCAT_PARAMS)

/* Check whether two file descriptors refer to the same file.  */

extern int fdmatch (int fd1, int fd2);

/* Return the position of the first bit set in the argument.  */
/* Prototypes vary from system to system, so we only provide a
   prototype on systems where we know that we need it.  */
#if defined (HAVE_DECL_FFS) && !HAVE_DECL_FFS
extern int ffs(int);
#endif

/* Get the working directory.  The result is cached, so don't call
   chdir() between calls to getpwd().  */

extern char * getpwd (void);

/* Get the current time.  */
/* Prototypes vary from system to system, so we only provide a
   prototype on systems where we know that we need it.  */
#ifdef __MINGW32__
/* Forward declaration to avoid #include <sys/time.h>.   */
struct timeval;
extern int gettimeofday (struct timeval *, void *); 
#endif

/* Get the amount of time the process has run, in microseconds.  */

extern long get_run_time (void);

/* Generate a relocated path to some installation directory.  Allocates
   return value using malloc.  */

extern char *make_relative_prefix (const char *, const char *,
                                   const char *) ATTRIBUTE_MALLOC;

/* Generate a relocated path to some installation directory without
   attempting to follow any soft links.  Allocates
   return value using malloc.  */

extern char *make_relative_prefix_ignore_links (const char *, const char *,
						const char *) ATTRIBUTE_MALLOC;

/* Returns a pointer to a directory path suitable for creating temporary
   files in.  */

extern const char *choose_tmpdir (void) ATTRIBUTE_RETURNS_NONNULL;

/* Choose a temporary directory to use for scratch files.  */

extern char *choose_temp_base (void) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Return a temporary file name or NULL if unable to create one.  */

extern char *make_temp_file (const char *) ATTRIBUTE_MALLOC;

/* Remove a link to a file unless it is special. */

extern int unlink_if_ordinary (const char *);

/* Allocate memory filled with spaces.  Allocates using malloc.  */

extern const char *spaces (int count);

/* Return the maximum error number for which strerror will return a
   string.  */

extern int errno_max (void);

/* Return the name of an errno value (e.g., strerrno (EINVAL) returns
   "EINVAL").  */

extern const char *strerrno (int);

/* Given the name of an errno value, return the value.  */

extern int strtoerrno (const char *);

/* ANSI's strerror(), but more robust.  */

extern char *xstrerror (int) ATTRIBUTE_RETURNS_NONNULL;

/* Return the maximum signal number for which strsignal will return a
   string.  */

extern int signo_max (void);

/* Return a signal message string for a signal number
   (e.g., strsignal (SIGHUP) returns something like "Hangup").  */
/* This is commented out as it can conflict with one in system headers.
   We still document its existence though.  */

/*extern const char *strsignal (int);*/

/* Return the name of a signal number (e.g., strsigno (SIGHUP) returns
   "SIGHUP").  */

extern const char *strsigno (int);

/* Given the name of a signal, return its number.  */

extern int strtosigno (const char *);

/* Register a function to be run by xexit.  Returns 0 on success.  */

extern int xatexit (void (*fn) (void));

/* Exit, calling all the functions registered with xatexit.  */

extern void xexit (int status) ATTRIBUTE_NORETURN;

/* Set the program name used by xmalloc.  */

extern void xmalloc_set_program_name (const char *);

/* Report an allocation failure.  */
extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;

/* Allocate memory without fail.  If malloc fails, this will print a
   message to stderr (using the name set by xmalloc_set_program_name,
   if any) and then call xexit.  */

extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Reallocate memory without fail.  This works like xmalloc.  Note,
   realloc type functions are not suitable for attribute malloc since
   they may return the same address across multiple calls. */

extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL;

/* Allocate memory without fail and set it to zero.  This works like
   xmalloc.  */

extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Copy a string into a memory buffer without fail.  */

extern char *xstrdup (const char *) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Copy at most N characters from string into a buffer without fail.  */

extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Copy an existing memory buffer to a new memory buffer without fail.  */

extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;

/* Physical memory routines.  Return values are in BYTES.  */
extern double physmem_total (void);
extern double physmem_available (void);

/* Compute the 32-bit CRC of a block of memory.  */
extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);

/* These macros provide a K&R/C89/C++-friendly way of allocating structures
   with nice encapsulation.  The XDELETE*() macros are technically
   superfluous, but provided here for symmetry.  Using them consistently
   makes it easier to update client code to use different allocators such
   as new/delete and new[]/delete[].  */

/* Scalar allocators.  */

#define XALLOCA(T)		((T *) alloca (sizeof (T)))
#define XNEW(T)			((T *) xmalloc (sizeof (T)))
#define XCNEW(T)		((T *) xcalloc (1, sizeof (T)))
#define XDUP(T, P)		((T *) xmemdup ((P), sizeof (T), sizeof (T)))
#define XDELETE(P)		free ((void*) (P))

/* Array allocators.  */

#define XALLOCAVEC(T, N)	((T *) alloca (sizeof (T) * (N)))
#define XNEWVEC(T, N)		((T *) xmalloc (sizeof (T) * (N)))
#define XCNEWVEC(T, N)		((T *) xcalloc ((N), sizeof (T)))
#define XDUPVEC(T, P, N)	((T *) xmemdup ((P), sizeof (T) * (N), sizeof (T) * (N)))
#define XRESIZEVEC(T, P, N)	((T *) xrealloc ((void *) (P), sizeof (T) * (N)))
#define XDELETEVEC(P)		free ((void*) (P))

/* Allocators for variable-sized structures and raw buffers.  */

#define XALLOCAVAR(T, S)	((T *) alloca ((S)))
#define XNEWVAR(T, S)		((T *) xmalloc ((S)))
#define XCNEWVAR(T, S)		((T *) xcalloc (1, (S)))
#define XDUPVAR(T, P, S1, S2)	((T *) xmemdup ((P), (S1), (S2)))
#define XRESIZEVAR(T, P, S)	((T *) xrealloc ((P), (S)))

/* Type-safe obstack allocator.  */

#define XOBNEW(O, T)		((T *) obstack_alloc ((O), sizeof (T)))
#define XOBNEWVEC(O, T, N)	((T *) obstack_alloc ((O), sizeof (T) * (N)))
#define XOBNEWVAR(O, T, S)	((T *) obstack_alloc ((O), (S)))
#define XOBFINISH(O, T)         ((T) obstack_finish ((O)))

/* hex character manipulation routines */

#define _hex_array_size 256
#define _hex_bad	99
extern const unsigned char _hex_value[_hex_array_size];
extern void hex_init (void);
#define hex_p(c)	(hex_value (c) != _hex_bad)
/* If you change this, note well: Some code relies on side effects in
   the argument being performed exactly once.  */
#define hex_value(c)	((unsigned int) _hex_value[(unsigned char) (c)])

/* Flags for pex_init.  These are bits to be or'ed together.  */

/* Record subprocess times, if possible.  */
#define PEX_RECORD_TIMES	0x1

/* Use pipes for communication between processes, if possible.  */
#define PEX_USE_PIPES		0x2

/* Save files used for communication between processes.  */
#define PEX_SAVE_TEMPS		0x4

/* Prepare to execute one or more programs, with standard output of
   each program fed to standard input of the next.
   FLAGS	As above.
   PNAME	The name of the program to report in error messages.
   TEMPBASE	A base name to use for temporary files; may be NULL to
   		use a random name.
   Returns NULL on error.  */

extern struct pex_obj *pex_init (int flags, const char *pname,
				 const char *tempbase) ATTRIBUTE_RETURNS_NONNULL;

/* Flags for pex_run.  These are bits to be or'ed together.  */

/* Last program in pipeline.  Standard output of program goes to
   OUTNAME, or, if OUTNAME is NULL, to standard output of caller.  Do
   not set this if you want to call pex_read_output.  After this is
   set, pex_run may no longer be called with the same struct
   pex_obj.  */
#define PEX_LAST		0x1

/* Search for program in executable search path.  */
#define PEX_SEARCH		0x2

/* OUTNAME is a suffix.  */
#define PEX_SUFFIX		0x4

/* Send program's standard error to standard output.  */
#define PEX_STDERR_TO_STDOUT	0x8

/* Input file should be opened in binary mode.  This flag is ignored
   on Unix.  */
#define PEX_BINARY_INPUT	0x10

/* Output file should be opened in binary mode.  This flag is ignored
   on Unix.  For proper behaviour PEX_BINARY_INPUT and
   PEX_BINARY_OUTPUT have to match appropriately--i.e., a call using
   PEX_BINARY_OUTPUT should be followed by a call using
   PEX_BINARY_INPUT.  */
#define PEX_BINARY_OUTPUT	0x20

/* Capture stderr to a pipe.  The output can be read by
   calling pex_read_err and reading from the returned
   FILE object.  This flag may be specified only for
   the last program in a pipeline.  

   This flag is supported only on Unix and Windows.  */
#define PEX_STDERR_TO_PIPE	0x40

/* Capture stderr in binary mode.  This flag is ignored
   on Unix.  */
#define PEX_BINARY_ERROR	0x80

/* Append stdout to existing file instead of truncating it.  */
#define PEX_STDOUT_APPEND	0x100

/* Thes same as PEX_STDOUT_APPEND, but for STDERR.  */
#define PEX_STDERR_APPEND	0x200

/* Execute one program.  Returns NULL on success.  On error returns an
   error string (typically just the name of a system call); the error
   string is statically allocated.

   OBJ		Returned by pex_init.

   FLAGS	As above.

   EXECUTABLE	The program to execute.

   ARGV		NULL terminated array of arguments to pass to the program.

   OUTNAME	Sets the output file name as follows:

		PEX_SUFFIX set (OUTNAME may not be NULL):
		  TEMPBASE parameter to pex_init not NULL:
		    Output file name is the concatenation of TEMPBASE
		    and OUTNAME.
		  TEMPBASE is NULL:
		    Output file name is a random file name ending in
		    OUTNAME.
		PEX_SUFFIX not set:
		  OUTNAME not NULL:
		    Output file name is OUTNAME.
		  OUTNAME NULL, TEMPBASE not NULL:
		    Output file name is randomly chosen using
		    TEMPBASE.
		  OUTNAME NULL, TEMPBASE NULL:
		    Output file name is randomly chosen.

		If PEX_LAST is not set, the output file name is the
   		name to use for a temporary file holding stdout, if
   		any (there will not be a file if PEX_USE_PIPES is set
   		and the system supports pipes).  If a file is used, it
   		will be removed when no longer needed unless
   		PEX_SAVE_TEMPS is set.

		If PEX_LAST is set, and OUTNAME is not NULL, standard
   		output is written to the output file name.  The file
   		will not be removed.  If PEX_LAST and PEX_SUFFIX are
   		both set, TEMPBASE may not be NULL.

   ERRNAME	If not NULL, this is the name of a file to which
		standard error is written.  If NULL, standard error of
		the program is standard error of the caller.

   ERR		On an error return, *ERR is set to an errno value, or
   		to 0 if there is no relevant errno.
*/

extern const char *pex_run (struct pex_obj *obj, int flags,
			    const char *executable, char * const *argv,
			    const char *outname, const char *errname,
			    int *err);

/* As for pex_run (), but takes an extra parameter to enable the
   environment for the child process to be specified.

   ENV		The environment for the child process, specified as
		an array of character pointers.  Each element of the
		array should point to a string of the form VAR=VALUE,
                with the exception of the last element which must be
                a null pointer.
*/

extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
			                   const char *executable,
                                           char * const *argv,
                                           char * const *env,
              	          		   const char *outname,
					   const char *errname, int *err);

/* Return a stream for a temporary file to pass to the first program
   in the pipeline as input.  The file name is chosen as for pex_run.
   pex_run closes the file automatically; don't close it yourself.  */

extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);

/* Return a stream for a pipe connected to the standard input of the
   first program in the pipeline.  You must have passed
   `PEX_USE_PIPES' to `pex_init'.  Close the returned stream
   yourself.  */

extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);

/* Read the standard output of the last program to be executed.
   pex_run can not be called after this.  BINARY should be non-zero if
   the file should be opened in binary mode; this is ignored on Unix.
   Returns NULL on error.  Don't call fclose on the returned FILE; it
   will be closed by pex_free.  */

extern FILE *pex_read_output (struct pex_obj *, int binary);

/* Read the standard error of the last program to be executed.
   pex_run can not be called after this.  BINARY should be non-zero if
   the file should be opened in binary mode; this is ignored on Unix.
   Returns NULL on error.  Don't call fclose on the returned FILE; it
   will be closed by pex_free.  */

extern FILE *pex_read_err (struct pex_obj *, int binary);

/* Return exit status of all programs in VECTOR.  COUNT indicates the
   size of VECTOR.  The status codes in the vector are in the order of
   the calls to pex_run.  Returns 0 on error, 1 on success.  */

extern int pex_get_status (struct pex_obj *, int count, int *vector);

/* Return times of all programs in VECTOR.  COUNT indicates the size
   of VECTOR.  struct pex_time is really just struct timeval, but that
   is not portable to all systems.  Returns 0 on error, 1 on
   success.  */

struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
			  struct pex_time *vector);

/* Clean up a pex_obj.  If you have not called pex_get_times or
   pex_get_status, this will try to kill the subprocesses.  */

extern void pex_free (struct pex_obj *);

/* Just execute one program.  Return value is as for pex_run.
   FLAGS	Combination of PEX_SEARCH and PEX_STDERR_TO_STDOUT.
   EXECUTABLE	As for pex_run.
   ARGV		As for pex_run.
   PNAME	As for pex_init.
   OUTNAME	As for pex_run when PEX_LAST is set.
   ERRNAME	As for pex_run.
   STATUS	Set to exit status on success.
   ERR		As for pex_run.
*/

extern const char *pex_one (int flags, const char *executable,
			    char * const *argv, const char *pname,
			    const char *outname, const char *errname,
			    int *status, int *err);

/* pexecute and pwait are the old pexecute interface, still here for
   backward compatibility.  Don't use these for new code.  Instead,
   use pex_init/pex_run/pex_get_status/pex_free, or pex_one.  */

/* Definitions used by the pexecute routine.  */

#define PEXECUTE_FIRST   1
#define PEXECUTE_LAST    2
#define PEXECUTE_ONE     (PEXECUTE_FIRST + PEXECUTE_LAST)
#define PEXECUTE_SEARCH  4
#define PEXECUTE_VERBOSE 8

/* Execute a program.  */

extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);

/* Wait for pexecute to finish.  */

extern int pwait (int, int *, int);

#if defined(HAVE_DECL_ASPRINTF) && !HAVE_DECL_ASPRINTF
/* Like sprintf but provides a pointer to malloc'd storage, which must
   be freed by the caller.  */

extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;
#endif

/* Like asprintf but allocates memory without fail. This works like
   xmalloc.  */

extern char *xasprintf (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_PRINTF_1;

#if !HAVE_DECL_VASPRINTF
/* Like vsprintf but provides a pointer to malloc'd storage, which
   must be freed by the caller.  */

extern int vasprintf (char **, const char *, va_list) ATTRIBUTE_PRINTF(2,0);
#endif

/* Like vasprintf but allocates memory without fail. This works like
   xmalloc.  */

extern char *xvasprintf (const char *, va_list) ATTRIBUTE_MALLOC ATTRIBUTE_PRINTF(1,0);

#if defined(HAVE_DECL_SNPRINTF) && !HAVE_DECL_SNPRINTF
/* Like sprintf but prints at most N characters.  */
extern int snprintf (char *, size_t, const char *, ...) ATTRIBUTE_PRINTF_3;
#endif

#if defined(HAVE_DECL_VSNPRINTF) && !HAVE_DECL_VSNPRINTF
/* Like vsprintf but prints at most N characters.  */
extern int vsnprintf (char *, size_t, const char *, va_list) ATTRIBUTE_PRINTF(3,0);
#endif

#if defined (HAVE_DECL_STRNLEN) && !HAVE_DECL_STRNLEN
extern size_t strnlen (const char *, size_t);
#endif

#if defined(HAVE_DECL_STRVERSCMP) && !HAVE_DECL_STRVERSCMP
/* Compare version strings.  */
extern int strverscmp (const char *, const char *);
#endif

#if defined(HAVE_DECL_STRTOL) && !HAVE_DECL_STRTOL
extern long int strtol (const char *nptr,
                        char **endptr, int base);
#endif

#if defined(HAVE_DECL_STRTOUL) && !HAVE_DECL_STRTOUL
extern unsigned long int strtoul (const char *nptr,
                                  char **endptr, int base);
#endif

#if defined(HAVE_LONG_LONG) && defined(HAVE_DECL_STRTOLL) && !HAVE_DECL_STRTOLL
__extension__
extern long long int strtoll (const char *nptr,
                              char **endptr, int base);
#endif

#if defined(HAVE_LONG_LONG) && defined(HAVE_DECL_STRTOULL) && !HAVE_DECL_STRTOULL
__extension__
extern unsigned long long int strtoull (const char *nptr,
                                        char **endptr, int base);
#endif

#if defined(HAVE_DECL_STRVERSCMP) && !HAVE_DECL_STRVERSCMP
/* Compare version strings.  */
extern int strverscmp (const char *, const char *);
#endif

/* Set the title of a process */
extern void setproctitle (const char *name, ...);

/* Increase stack limit if possible.  */
extern void stack_limit_increase (unsigned long);

#define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))

/* Drastically simplified alloca configurator.  If we're using GCC,
   we use __builtin_alloca; otherwise we use the C alloca.  The C
   alloca is always available.  You can override GCC by defining
   USE_C_ALLOCA yourself.  The canonical autoconf macro C_ALLOCA is
   also set/unset as it is often used to indicate whether code needs
   to call alloca(0).  */
extern void *C_alloca (size_t) ATTRIBUTE_MALLOC;
#undef alloca
#if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA
# define alloca(x) __builtin_alloca(x)
# undef C_ALLOCA
# define ASTRDUP(X) \
  (__extension__ ({ const char *const libiberty_optr = (X); \
   const unsigned long libiberty_len = strlen (libiberty_optr) + 1; \
   char *const libiberty_nptr = (char *const) alloca (libiberty_len); \
   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }))
#else
# define alloca(x) C_alloca(x)
# undef USE_C_ALLOCA
# define USE_C_ALLOCA 1
# undef C_ALLOCA
# define C_ALLOCA 1
extern const char *libiberty_optr;
extern char *libiberty_nptr;
extern unsigned long libiberty_len;
# define ASTRDUP(X) \
  (libiberty_optr = (X), \
   libiberty_len = strlen (libiberty_optr) + 1, \
   libiberty_nptr = (char *) alloca (libiberty_len), \
   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len))
#endif

#ifdef __cplusplus
}
#endif


#endif /* ! defined (LIBIBERTY_H) */
@


1.74
log
@merge from gcc
@
text
@d624 1
a624 1
#if !HAVE_DECL_ASPRINTF
@


1.73
log
@merge from gcc
@
text
@d3 1
a3 2
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2009, 2010, 2011, 2013 Free Software Foundation, Inc.
d631 5
@


1.72
log
@merge from gcc
@
text
@d639 5
@


1.71
log
@merge from gcc
@
text
@d658 27
@


1.70
log
@merge from gcc
@
text
@d230 5
@


1.69
log
@merge from gcc
@
text
@d448 5
@


1.68
log
@merge from gcc
@
text
@d639 4
@


1.67
log
@merge from gcc
@
text
@d109 4
a112 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)
@


1.66
log
@merge from gcc
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d88 1
a88 1
extern void expandargv PARAMS ((int *, char ***));
d92 1
a92 1
extern int writeargv PARAMS ((char **, FILE *));
@


1.65
log
@merge from gcc
@
text
@d110 1
a110 1
extern char *basename (const char *);
d121 1
a121 1
extern const char *lbasename (const char *);
d126 1
a126 1
extern const char *dos_lbasename (const char *);
d132 1
a132 1
extern const char *unix_lbasename (const char *);
d142 1
a142 1
extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d151 1
a151 1
extern char *reconcat (char *, const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d164 1
a164 1
extern char *concat_copy (char *, const char *, ...) ATTRIBUTE_SENTINEL;
d171 1
a171 1
extern char *concat_copy2 (const char *, ...) ATTRIBUTE_SENTINEL;
d229 1
a229 1
extern char *choose_temp_base (void) ATTRIBUTE_MALLOC;
d259 1
a259 1
extern char *xstrerror (int);
d301 1
a301 1
extern void *xmalloc (size_t) ATTRIBUTE_MALLOC;
d307 1
a307 1
extern void *xrealloc (void *, size_t);
d312 1
a312 1
extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;
d316 1
a316 1
extern char *xstrdup (const char *) ATTRIBUTE_MALLOC;
d320 1
a320 1
extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC;
d324 1
a324 1
extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC;
d402 1
a402 1
				 const char *tempbase);
@


1.64
log
@merge from gcc
@
text
@d94 4
@


1.63
log
@merge from gcc
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d640 3
@


1.62
log
@merge from gcc
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.61
log
@merge from gcc
@
text
@d637 3
@


1.60
log
@merge from gcc
@
text
@d119 11
@


1.59
log
@merge from gcc
@
text
@d316 1
a316 1
extern unsigned int crc32 (const unsigned char *, int, unsigned int);
@


1.58
log
@merge from gcc
@
text
@d3 2
a4 1
   Copyright 2001, 2002, 2005, 2007 Free Software Foundation, Inc.
d315 2
@


1.57
log
@merge from gcc
@
text
@d323 1
d326 1
d331 1
d334 1
d340 1
d343 1
d349 2
@


1.56
log
@merge from gcc
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2005 Free Software Foundation, Inc.
d544 2
a545 1
/* Clean up a pex_obj.  */
@


1.55
log
@merge from gcc
@
text
@d89 4
@


1.54
log
@        include/
        * libiberty.h (PEX_STDERR_TO_PIPE): New define.
        (PEX_BINARY_ERROR): New define.
        (pex_read_err): New function.

        libiberty/
        * pex-common.h (struct pex_obj): New fields
        stderr_pipe and read_err.
        * pex-common.c (pex_init_common): Initialize
        stderr_pipe.
        (pex_run_in_environment): Add error checking
        for PEX_STDERR_TO_PIPE.  Create a pipe
        for stderr if necessary.
        (pex_read_err): New.
        (pex_free): Close read_err.
        * pexecute.txh: Document changes.
        * functions.texi: Regenerated.
@
text
@a487 27
/* Return a `FILE' pointer FP for the standard input of the first
   program in the pipeline; FP is opened for writing.  You must have
   passed `PEX_USE_PIPES' to the `pex_init' call that returned OBJ.
   You must close FP yourself with `fclose' to indicate that the
   pipeline's input is complete.

   The file descriptor underlying FP is marked not to be inherited by
   child processes.

   This call is not supported on systems which do not support pipes;
   it returns with an error.  (We could implement it by writing a
   temporary file, but then you would need to write all your data and
   close FP before your first call to `pex_run' -- and that wouldn't
   work on systems that do support pipes: the pipe would fill up, and
   you would block.  So there isn't any easy way to conceal the
   differences between the two types of systems.)

   If you call both `pex_write_input' and `pex_read_output', be
   careful to avoid deadlock.  If the output pipe fills up, so that
   each program in the pipeline is waiting for the next to read more
   data, and you fill the input pipe by writing more data to FP, then
   there is no way to make progress: the only process that could read
   data from the output pipe is you, but you are blocked on the input
   pipe.  */

extern FILE *pex_write_input (struct pex_obj *obj, int binary);

@


1.53
log
@include:
2006-05-03  Andrew Stubbs  <andrew.stubbs@@st.com>
            J"orn Rennecke <joern.rennecke@@st.com>

	PR driver/29931
	* libiberty.h (make_relative_prefix_ignore_links): Declare.

libiberty:
2006-05-03  Andrew Stubbs  <andrew.stubbs@@st.com>
            J"orn Rennecke <joern.rennecke@@st.com>

	PR driver/29931
	* make-relative-prefix.c (make_relative_prefix_1): New function,
	broken out of make_relative_prefix.  Make link resolution dependent
	on new parameter.
	(make_relative_prefix): Use make_relative_prefix_1.
	(make_relative_prefix_ignore_links): New function.
@
text
@d403 13
d537 8
@


1.52
log
@merge from gcc
@
text
@d200 7
@


1.51
log
@merge from gcc
@
text
@d451 17
@


1.50
log
@	* libiberty.h (expandargv): New function.

	* argv.c (safe-ctype.h): Include it.
	(ISBLANK): Remove.
	(stdio.h): Include.
	(buildargv): Use ISSPACE instead of ISBLANK.
	(expandargv): New function.
	* Makefile.in: Regenerated.
@
text
@d451 41
@


1.50.14.1
log
@	* libiberty/configure.ac: Add cygpath for mingw hosts.
	* libiberty.configure: Rebuilt.
	* libiberty/Makefile.in: Add cygpath.
	* libiberty/cygpath.c: New.

	* include/libiberty.h (pex_write_input): New declaration.

	* libiberty/pex-common.c (pex_write_input): New function.
	* libiberty/pexecute.txh (pex_write_input): Document it.
	* libiberty/pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* libiberty/pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-djgpp.c (funcs): Leave fdopenw null.
	* libiberty/pex-msdos (funcs): Same.
	* libiberty/functions.texi: Regenerated.

	* libiberty/pex-common.h (struct pex_obj): Doc fixes.

	* libiberty/functions.texi: Regenerate.
@
text
@a450 27
/* Return a `FILE' pointer FP for the standard input of the first
   program in the pipeline; FP is opened for writing.  You must have
   passed `PEX_USE_PIPES' to the `pex_init' call that returned OBJ.
   You must close FP yourself with `fclose' to indicate that the
   pipeline's input is complete.

   The file descriptor underlying FP is marked not to be inherited by
   child processes.

   This call is not supported on systems which do not support pipes;
   it returns with an error.  (We could implement it by writing a
   temporary file, but then you would need to write all your data and
   close FP before your first call to `pex_run' -- and that wouldn't
   work on systems that do support pipes: the pipe would fill up, and
   you would block.  So there isn't any easy way to conceal the
   differences between the two types of systems.)

   If you call both `pex_write_input' and `pex_read_output', be
   careful to avoid deadlock.  If the output pipe fills up, so that
   each program in the pipeline is waiting for the next to read more
   data, and you fill the input pipe by writing more data to FP, then
   there is no way to make progress: the only process that could read
   data from the output pipe is you, but you are blocked on the input
   pipe.  */

extern FILE *pex_write_input (struct pex_obj *obj, int binary);

@


1.50.14.2
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@a477 14
/* Return a stream for a temporary file to pass to the first program
   in the pipeline as input.  The file name is chosen as for pex_run.
   pex_run closes the file automatically; don't close it yourself.  */

extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);

/* Return a stream for a pipe connected to the standard input of the
   first program in the pipeline.  You must have passed
   `PEX_USE_PIPES' to `pex_init'.  Close the returned stream
   yourself.  */

extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);

@


1.50.14.3
log
@	include/
	* libiberty.h: Declare pex_run_in_environment.

	libiberty/
	* pex-common.c: New function pex_run_in_environment.
	* pex-common.h: Add environment parameter to exec_child.
	* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.
	* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.
	(pex_djgpp_exec_child): Pass environment to child process.
	* pex-unix.c: Add environment parameter to pex_unix_exec_child.
	(pex_unix_exec_child): Pass environment to child process.
	* pex-win32.c: Add environment parameter to pex_win32_exec_child.
	New function env_compare for comparing VAR=VALUE pairs.
	(win32_spawn): Assemble environment block and pass to CreateProcess.
	(spawn_script): Pass environment through to win32_spawn.
	(pex_win32_exec_child): Pass environment through to spawn_script and
	win32_spawn.
	* functions.texi: Regenerate.
	* pexecute.txh: Document pex_run_in_environment.
@
text
@a450 17
/* As for pex_run (), but takes an extra parameter to enable the
   environment for the child process to be specified.

   ENV		The environment for the child process, specified as
		an array of character pointers.  Each element of the
		array should point to a string of the form VAR=VALUE,
                with the exception of the last element which must be
                a null pointer.
*/

extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
			                   const char *executable,
                                           char * const *argv,
                                           char * const *env,
              	          		   const char *outname,
					   const char *errname, int *err);

@


1.50.10.1
log
@gdb/ChangeLog:
2006-03-17  Jim Blandy  <jimb@@codesourcery.com>

	Add support for 'target remote |' on MinGW.
	* ser-mingw.c (struct pipe_state): New structure.
	(make_pipe_state, free_pipe_state, cleanup_pipe_state)
	(pipe_windows_open, pipe_windows_close, pipe_windows_read)
	(pipe_windows_write, pipe_wait_handle): New functions.
	(_initialize_ser_windows): Register a "pipe" interface based on
	them.

include/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* libiberty.h (pex_write_input): New declaration.

libiberty/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* pex-common.c (pex_write_input): New function.
	* pexecute.txh (pex_write_input): Document it.
	* pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-djgpp.c (funcs): Leave fdopenw null.
	* pex-msdos (funcs): Same.
	* functions.texi: Regenerated.

2006-03-12  Jim Blandy  <jimb@@red-bean.com>

	* pex-common.h (struct pex_obj): Doc fixes.

2006-03-11  Jim Blandy  <jimb@@red-bean.com>

	* functions.texi: Regenerate.
@
text
@a450 27
/* Return a `FILE' pointer FP for the standard input of the first
   program in the pipeline; FP is opened for writing.  You must have
   passed `PEX_USE_PIPES' to the `pex_init' call that returned OBJ.
   You must close FP yourself with `fclose' to indicate that the
   pipeline's input is complete.

   The file descriptor underlying FP is marked not to be inherited by
   child processes.

   This call is not supported on systems which do not support pipes;
   it returns with an error.  (We could implement it by writing a
   temporary file, but then you would need to write all your data and
   close FP before your first call to `pex_run' -- and that wouldn't
   work on systems that do support pipes: the pipe would fill up, and
   you would block.  So there isn't any easy way to conceal the
   differences between the two types of systems.)

   If you call both `pex_write_input' and `pex_read_output', be
   careful to avoid deadlock.  If the output pipe fills up, so that
   each program in the pipeline is waiting for the next to read more
   data, and you fill the input pipe by writing more data to FP, then
   there is no way to make progress: the only process that could read
   data from the output pipe is you, but you are blocked on the input
   pipe.  */

extern FILE *pex_write_input (struct pex_obj *obj, int binary);

@


1.49
log
@Index: include/ChangeLog
2005-06-20  Geoffrey Keating  <geoffk@@apple.com>

	* libiberty.h (strverscmp): Prototype.

Index: libiberty/ChangeLog
2005-06-20  Geoffrey Keating  <geoffk@@apple.com>

	* strverscmp.c: New.
	* Makefile.in (CFILES): Add strverscmp.c.
	(CONFIGURED_OFILES): Add strverscmp.o.
	(strverscmp.o): New rule.
	(stamp-functions): Add $(srcdir) to files in source directory.
	* configure.ac (funcs): Add strverscmp.
	(AC_CHECK_FUNCS): Add strverscmp.
	* configure: Regenerate.
	* functions.texi: Regenerate.
@
text
@d85 3
@


1.48
log
@merge from gcc
@
text
@d543 5
@


1.47
log
@merge from gcc
@
text
@d329 1
a329 1

@


1.46
log
@merge from gcc
@
text
@d530 1
a530 2
extern int vasprintf (char **, const char *, va_list)
  ATTRIBUTE_PRINTF(2,0);
d540 1
a540 1
extern int vsnprintf (char *, size_t, const char *, va_list);
@


1.45
log
@merge from gcc
@
text
@d534 10
@


1.44
log
@merge from gcc
@
text
@d159 1
a159 1
  (libiberty_concat_ptr = alloca (concat_length ACONCAT_PARAMS + 1), \
@


1.43
log
@Update the address and phone number of the FSF organization
@
text
@d100 4
a103 1
extern char *basename ();
@


1.42
log
@merge from gcc
@
text
@d24 2
a25 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
@


1.41
log
@merge from gcc
@
text
@d57 6
@


1.40
log
@merge from gcc
@
text
@d262 1
a262 1
extern PTR xmalloc (size_t) ATTRIBUTE_MALLOC;
d268 1
a268 1
extern PTR xrealloc (PTR, size_t);
d273 1
a273 1
extern PTR xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;
d285 1
a285 1
extern PTR xmemdup (const PTR, size_t, size_t) ATTRIBUTE_MALLOC;
d533 1
a533 1
extern PTR C_alloca (size_t) ATTRIBUTE_MALLOC;
@


1.39
log
@merge from gcc
@
text
@d51 6
@


1.38
log
@merge from gcc
@
text
@d55 3
a57 3
extern FILE *fopen_unlocked (const char *path, const char *mode);
extern FILE *fdopen_unlocked (int fildes, const char *mode);
extern FILE *freopen_unlocked (const char *path, const char *mode, FILE *stream);
@


1.37
log
@merge from gcc
@
text
@d51 8
@


1.36
log
@libiberty:
	* pex-common.c: New file.
	* pex-one.c: New file.
	* pexecute.c: New file.
	* pex-common.h: Include <stdio.h>.
	(struct pex_obj): Define.
	(struct pex_funcs): Define.
	(pex_init_common): Declare.
	* pex-unix.c: Rewrite.
	* pex-win32.c: Rewrite.
	* pex-djgpp.c: Rewrite.
	* pex-msdos.c: Rewrite.
	* testsuite/text-pexecute.c: New file.
	* pexecute.txh: Rewrite.
	* configure.ac: Check for wait3 and wait4.  Set CHECK to
	really-check rather than check-cplus-dem.
	* functions.texi: Rebuild.
	* Makefile.in: Rebuild dependencies.
	(CFILES): Add pexecute.c, pex-common.c, pex-one.c.
	(REQUIRED_OFILES): Add pexecute.o, pex-common.o, pex-one.o.
	* testsuite/Makefile.in (really-check): New target.
	(check-pexecute, test-pexecute): New targets.
	* configure: Rebuild.
include:
	* libiberty.h: Include <stdio.h>.
	(PEX_RECORD_TIMES, PEX_USE_PIPES, PEX_SAVE_TEMPS): Define.
	(PEX_LAST, PEX_SEARCH, PEX_SUFFIX, PEX_STDERR_TO_STDOUT): Define.
	(PEX_BINARY_INPUT, PEX_BINARY_OUTPUT): Define.
	(pex_init, pex_run, pex_read_output): Declare.
	(pex_get_status, pex_get_times, pex_free, pex_one): Declare.
	(struct pex_time): Define.
@
text
@d457 1
a457 1
  extern void pex_free (struct pex_obj *);
@


1.35
log
@	* libiberty.h (ffs): Declare, if necessary.
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
d49 2
d319 160
@


1.34
log
@merge from gcc
@
text
@d141 7
@


1.33
log
@merge from gcc
@
text
@a43 1
#ifdef ANSI_PROTOTYPES
a47 1
#endif
d52 1
a52 1
extern char **buildargv PARAMS ((const char *)) ATTRIBUTE_MALLOC;
d56 1
a56 1
extern void freeargv PARAMS ((char **));
d61 1
a61 1
extern char **dupargv PARAMS ((char **)) ATTRIBUTE_MALLOC;
d76 1
a76 1
extern char *basename PARAMS ((const char *));
d84 1
a84 1
extern const char *lbasename PARAMS ((const char *));
d88 1
a88 1
extern char *lrealpath PARAMS ((const char *));
d94 1
a94 1
extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d103 1
a103 1
extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d109 1
a109 1
extern unsigned long concat_length PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;
d116 1
a116 1
extern char *concat_copy PARAMS ((char *, const char *, ...)) ATTRIBUTE_SENTINEL;
d123 1
a123 1
extern char *concat_copy2 PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;
d139 1
a139 1
extern int fdmatch PARAMS ((int fd1, int fd2));
d144 1
a144 1
extern char * getpwd PARAMS ((void));
d152 1
a152 1
extern int gettimeofday PARAMS ((struct timeval *, void *)); 
d157 1
a157 1
extern long get_run_time PARAMS ((void));
d162 2
a163 2
extern char *make_relative_prefix PARAMS ((const char *, const char *,
					   const char *)) ATTRIBUTE_MALLOC;
d167 1
a167 1
extern char *choose_temp_base PARAMS ((void)) ATTRIBUTE_MALLOC;
d171 1
a171 1
extern char *make_temp_file PARAMS ((const char *)) ATTRIBUTE_MALLOC;
d175 1
a175 1
extern int unlink_if_ordinary PARAMS((const char *));
d179 1
a179 1
extern const char *spaces PARAMS ((int count));
d184 1
a184 1
extern int errno_max PARAMS ((void));
d189 1
a189 1
extern const char *strerrno PARAMS ((int));
d193 1
a193 1
extern int strtoerrno PARAMS ((const char *));
d197 1
a197 1
extern char *xstrerror PARAMS ((int));
d202 1
a202 1
extern int signo_max PARAMS ((void));
d209 1
a209 1
/*extern const char *strsignal PARAMS ((int));*/
d214 1
a214 1
extern const char *strsigno PARAMS ((int));
d218 1
a218 1
extern int strtosigno PARAMS ((const char *));
d222 1
a222 1
extern int xatexit PARAMS ((void (*fn) (void)));
d226 1
a226 1
extern void xexit PARAMS ((int status)) ATTRIBUTE_NORETURN;
d230 1
a230 1
extern void xmalloc_set_program_name PARAMS ((const char *));
d233 1
a233 1
extern void xmalloc_failed PARAMS ((size_t)) ATTRIBUTE_NORETURN;
d239 1
a239 1
extern PTR xmalloc PARAMS ((size_t)) ATTRIBUTE_MALLOC;
d245 1
a245 1
extern PTR xrealloc PARAMS ((PTR, size_t));
d250 1
a250 1
extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;
d254 1
a254 1
extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;
d258 1
a258 1
extern char *xstrndup PARAMS ((const char *, size_t)) ATTRIBUTE_MALLOC;
d262 1
a262 1
extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;
d265 2
a266 2
extern double physmem_total PARAMS ((void));
extern double physmem_available PARAMS ((void));
d304 1
a304 1
extern void hex_init PARAMS ((void));
d320 2
a321 2
extern int pexecute PARAMS ((const char *, char * const *, const char *,
			    const char *, char **, char **, int));
d325 1
a325 1
extern int pwait PARAMS ((int, int *, int));
d331 1
a331 1
extern int asprintf PARAMS ((char **, const char *, ...)) ATTRIBUTE_PRINTF_2;
d338 1
a338 1
extern int vasprintf PARAMS ((char **, const char *, va_list))
d350 1
a350 1
extern PTR C_alloca PARAMS ((size_t)) ATTRIBUTE_MALLOC;
@


1.33.2.1
log
@	* include/libiberty.h (ffs): Declare.
@
text
@a142 7
/* Return the position of the first bit set in the argument.  */
/* Prototypes vary from system to system, so we only provide a
   prototype on systems where we know that we need it.  */
#ifdef __MINGW32__
extern int ffs(int);
#endif

@


1.32
log
@merge from gcc
@
text
@d258 4
@


1.31
log
@merge from gcc
@
text
@d165 1
a165 1
					   const char *));
@


1.30
log
@merge from gcc
@
text
@d148 9
@


1.30.6.1
log
@	* ld/ldmain.c (main): Use expandargv.
	* binutils/addr2line.c (main): Likewise.
	* binutils/ar.c (main): Likewise.
	* binutils/coffdump.c (main): Likewise.
	* binutils/cxxfilt.c (main): Likewise.
	* binutils/dlltool.c (main): Likewise.
	* binutils/dllwrap.c (main): Likewise.
	* binutils/nlmconv.c (main): Likewise.
	* binutils/nm.c (main): Likewise.
	* binutils/objcopy.c (main): Likewise.
	* binutils/objdump.c (main): Likewise.
	* binutils/readelf.c (main): Likewise.
	* binutils/size.c (main): Likeiwse.
	* binutils/srcconv.c (main): Likewise.
	* binutils/strings.c (main): Likewise.
	* binutils/sysdump.c (main): Likewise.
	* binutils/sysinfo.c (main): Likewise.
	* binutils/windres.c (main): Likewise.

	* include/libiberty.h (expandargv): New function.
	* libiberty/argv.c (safe-ctype.h): Include it.
	(ISBLANK): Remove.
	(stdio.h): Include.
	(expandargv): New function.
	* libiberty/Makefile.in: Regenerated.
@
text
@a64 3
/* Expand "@@file" arguments in argv.  */

extern void expandargv PARAMS ((int *, char ***));
@


1.30.4.1
log
@	* include/libiberty.h (ffs): Declare.
@
text
@a142 7
/* Return the position of the first bit set in the argument.  */
/* Prototypes vary from system to system, so we only provide a
   prototype on systems where we know that we need it.  */
#ifdef __MINGW32__
extern int ffs(int);
#endif

@


1.29
log
@merge from gcc
@
text
@d166 4
@


1.28
log
@merge from gcc
@
text
@d77 1
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (HAVE_DECL_BASENAME)
@


1.27
log
@merge from gcc
@
text
@d96 1
a96 1
extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;
d105 1
a105 1
extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC;
d111 1
a111 1
extern unsigned long concat_length PARAMS ((const char *, ...));
d118 1
a118 1
extern char *concat_copy PARAMS ((char *, const char *, ...));
d125 1
a125 1
extern char *concat_copy2 PARAMS ((const char *, ...));
@


1.26
log
@merge from gcc
@
text
@d264 1
a264 1
#define XDELETE(P)		free ((P))
d270 2
a271 2
#define XRESIZEVEC(T, P, N)	((T *) xrealloc ((P), sizeof (T) * (N)))
#define XDELETEVEC(P)		free ((P))
@


1.25
log
@merge from gcc
@
text
@d253 31
@


1.24
log
@libiberty/ChangeLog:
2003-05-14  Jim Blandy  <jimb@@redhat.com>

	* hex.c (_hex_value): Make this unsigned.
	(hex_value): Update documentation for new return type.  hex_value
	now expands to an unsigned int expression, to avoid unexpected
	sign extension when we store it in a bfd_vma, which is larger than
	int on some platforms.
	* functions.texi: Regenerated.

include/ChangeLog:
2003-05-14  Jim Blandy  <jimb@@redhat.com>

	* libiberty.h (hex_value): Make the value an unsigned int, to
	avoid unexpected sign-extension when cast to unsigned types larger
	than int --- like bfd_vma, on some platforms.
	(_hex_value): Update declaration.
@
text
@d312 1
a312 1
   char *const libiberty_nptr = alloca (libiberty_len); \
d326 1
a326 1
   libiberty_nptr = alloca (libiberty_len), \
@


1.24.24.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d77 1
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)
d96 1
a96 1
extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d105 1
a105 1
extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;
d111 1
a111 1
extern unsigned long concat_length PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;
d118 1
a118 1
extern char *concat_copy PARAMS ((char *, const char *, ...)) ATTRIBUTE_SENTINEL;
d125 1
a125 1
extern char *concat_copy2 PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;
a252 31

/* These macros provide a K&R/C89/C++-friendly way of allocating structures
   with nice encapsulation.  The XDELETE*() macros are technically
   superfluous, but provided here for symmetry.  Using them consistently
   makes it easier to update client code to use different allocators such
   as new/delete and new[]/delete[].  */

/* Scalar allocators.  */

#define XNEW(T)			((T *) xmalloc (sizeof (T)))
#define XCNEW(T)		((T *) xcalloc (1, sizeof (T)))
#define XDELETE(P)		free ((void*) (P))

/* Array allocators.  */

#define XNEWVEC(T, N)		((T *) xmalloc (sizeof (T) * (N)))
#define XCNEWVEC(T, N)		((T *) xcalloc ((N), sizeof (T)))
#define XRESIZEVEC(T, P, N)	((T *) xrealloc ((void *) (P), sizeof (T) * (N)))
#define XDELETEVEC(P)		free ((void*) (P))

/* Allocators for variable-sized structures and raw buffers.  */

#define XNEWVAR(T, S)		((T *) xmalloc ((S)))
#define XCNEWVAR(T, S)		((T *) xcalloc (1, (S)))
#define XRESIZEVAR(T, P, S)	((T *) xrealloc ((P), (S)))

/* Type-safe obstack allocator.  */

#define XOBNEW(O, T)		((T *) obstack_alloc ((O), sizeof (T)))


d312 1
a312 1
   char *const libiberty_nptr = (char *const) alloca (libiberty_len); \
d326 1
a326 1
   libiberty_nptr = (char *) alloca (libiberty_len), \
@


1.23
log
@merge from gcc
@
text
@d257 1
a257 1
extern const char _hex_value[_hex_array_size];
d262 1
a262 1
#define hex_value(c)	(_hex_value[(unsigned char) (c)])
@


1.23.16.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d257 1
a257 1
extern const unsigned char _hex_value[_hex_array_size];
d262 1
a262 1
#define hex_value(c)	((unsigned int) _hex_value[(unsigned char) (c)])
@


1.22
log
@merge from gcc
@
text
@d249 1
a249 1
/* Physical memory routines.  */
@


1.21
log
@	* libiberty.h (lrealpath): Add declaration.
@
text
@d249 4
@


1.20
log
@* libiberty.h (basename): Add NetBSD to the list.
@
text
@d88 4
@


1.19
log
@merge from gcc
@
text
@d77 1
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (HAVE_DECL_BASENAME)
@


1.18
log
@* libiberty.h (asprintf, vasprintf): Don't declare them if the
corresponding HAVE_DECL_ macro is 1.
@
text
@d148 6
@


1.18.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d77 1
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (HAVE_DECL_BASENAME)
a87 4
/* A well-defined realpath () that is always compiled in.  */

extern char *lrealpath PARAMS ((const char *));

a147 6
/* Generate a relocated path to some installation directory.  Allocates
   return value using malloc.  */

extern char *make_relative_prefix PARAMS ((const char *, const char *,
					   const char *));

a238 4
/* Physical memory routines.  Return values are in BYTES.  */
extern double physmem_total PARAMS ((void));
extern double physmem_available PARAMS ((void));

d243 1
a243 1
extern const unsigned char _hex_value[_hex_array_size];
d248 1
a248 1
#define hex_value(c)	((unsigned int) _hex_value[(unsigned char) (c)])
@


1.18.2.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d77 1
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (HAVE_DECL_BASENAME)
a146 6

/* Generate a relocated path to some installation directory.  Allocates
   return value using malloc.  */

extern char *make_relative_prefix PARAMS ((const char *, const char *,
					   const char *));
@


1.18.2.2
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@a87 4
/* A well-defined realpath () that is always compiled in.  */

extern char *lrealpath PARAMS ((const char *));

a243 4

/* Physical memory routines.  Return values are in BYTES.  */
extern double physmem_total PARAMS ((void));
extern double physmem_available PARAMS ((void));
@


1.18.2.3
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d257 1
a257 1
extern const unsigned char _hex_value[_hex_array_size];
d262 1
a262 1
#define hex_value(c)	((unsigned int) _hex_value[(unsigned char) (c)])
@


1.17
log
@merge from gcc
@
text
@d267 1
d272 1
d274 1
d280 1
@


1.16
log
@merge from gcc
@
text
@d76 2
a77 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || (defined (HAVE_DECL_BASENAME) && !HAVE_DECL_BASENAME)
a79 1
# if !defined (HAVE_DECL_BASENAME)
d81 1
a81 1
# endif
@


1.16.10.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d76 1
a76 2
#if !HAVE_DECL_BASENAME
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (HAVE_DECL_BASENAME)
d79 1
d81 1
a81 1
#endif
@


1.16.10.2
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a266 1
#if !HAVE_DECL_ASPRINTF
a270 1
#endif
a271 1
#if !HAVE_DECL_VASPRINTF
a276 1
#endif
@


1.15
log
@merge from gcc
@
text
@d3 1
a3 1
   Copyright 2001 Free Software Foundation, Inc.
d286 1
a286 1
extern PTR C_alloca PARAMS((size_t));
@


1.14
log
@merge from gcc
@
text
@d243 1
a243 1
extern char _hex_value[_hex_array_size];
@


1.13
log
@merge from gcc
@
text
@d54 1
a54 1
extern char **buildargv PARAMS ((char *)) ATTRIBUTE_MALLOC;
@


1.12
log
@merge from gcc
@
text
@d94 9
@


1.11
log
@merge from gcc
@
text
@d88 3
a90 2
/* Concatenate an arbitrary number of strings, up to (char *) NULL.
   Allocates memory using xmalloc.  */
d95 2
a96 1
   strings, up to (char *) NULL.  */
d101 3
a103 2
   memory, up to (char *) NULL.  The supplied memory is assumed to be
   large enough.  */
d108 3
a110 2
   memory, up to (char *) NULL.  The supplied memory is assumed to be
   large enough.  */
d118 4
a121 2
/* Concatenate an arbitrary number of strings, up to (char *) NULL.
   Allocates memory using alloca.  Arguments are evaluated twice!.  */
@


1.10
log
@(lbasename): Change function declaration to return a const char pointer.
@
text
@d93 27
d276 5
d287 8
@


1.9
log
@merge from gcc
@
text
@d86 1
a86 1
extern char *lbasename PARAMS ((const char *));
@


1.8
log
@Synchronise with copyright dates on FSF GCC versions of these files
@
text
@d241 3
a243 1
   USE_C_ALLOCA yourself.  */
d248 1
d253 2
@


1.7
log
@Fix typos in ChangeLogs; add coff/external.h; fix copyright dates
@
text
@d5 7
@


1.6
log
@merge from gcc
@
text
@d2 18
@


1.5
log
@merge from gcc
@
text
@d59 4
@


1.4
log
@* libiberty.h: Move #includes to top.  Prototype xmalloc_failed.
@
text
@d209 14
@


1.4.2.1
log
@Update copyright notices.
@
text
@a1 25

   Copyright 2001 Free Software Foundation, Inc.
   
   Note - certain prototypes declared in this header file are for
   functions whoes implementation copyright does not belong to the
   FSF.  Those prototypes are present in this file for reference
   purposes only and their presence in this file should not construed
   as an indication of ownership by the FSF of the implementation of
   those functions in any way or form whatsoever.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
@


1.4.2.2
log
@2001-07-19  David O'Brien  <obrien@@FreeBSD.org>
	* lbasename.c: New file.
	* libiberty.h: Add lbasename.

Approved by:  Philip Blundell <philb@@gnu.org>
              <E15K1Xn-00032C-00@@kings-cross.london.uk.eu.org>


	* emultempl/elf32.em: Do not assuming that contents of the buffer
	returned from basename function will remain unchanged accross other
	function calls.

Approved by:  Philip Blundell <philb@@gnu.org>
              <E15MO4s-00017V-00@@kings-cross.london.uk.eu.org>
@
text
@a83 4
/* A well-defined basename () that is always compiled in.  */

extern char *lbasename PARAMS ((const char *));

@


1.3
log
@Add ARRAY_SIZE macro from egcs version
@
text
@d19 7
d140 3
a146 6
#ifdef ANSI_PROTOTYPES
/* Get a definition for size_t.  */
#include <stddef.h>
/* Get a definition for va_list.  */
#include <stdarg.h>
#endif
@


1.2
log
@2000-06-17  H.J. Lu  <hjl@@gnu.org>

	* getopt.h: Updated from gcc.
	* libiberty.h: Likewise.
	* symcat.h: Likewise.
@
text
@d203 2
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
extern char **buildargv PARAMS ((char *));
d31 1
a31 1
extern char **dupargv PARAMS ((char **));
d39 6
a44 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__)
d47 1
d49 1
d55 1
a55 1
extern char *concat PARAMS ((const char *, ...));
d61 5
d72 5
a76 1
extern char *choose_temp_base PARAMS ((void));
d127 1
a127 5
#ifndef __GNUC__
extern void xexit PARAMS ((int status));
#else
void xexit PARAMS ((int status)) __attribute__ ((noreturn));
#endif
d140 2
d143 1
a143 3
extern PTR xmalloc PARAMS ((size_t));

/* Reallocate memory without fail.  This works like xmalloc.
d145 3
a147 2
   FIXME: We do not declare the parameter types for the same reason as
   xmalloc.  */
d154 1
a154 1
extern PTR xcalloc PARAMS ((size_t, size_t));
d158 5
a162 1
extern char *xstrdup PARAMS ((const char *));
d191 11
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.2
log
@import libiberty from egcs
@
text
@d22 1
a22 1
extern char **buildargv PARAMS ((char *)) ATTRIBUTE_MALLOC;
d31 1
a31 1
extern char **dupargv PARAMS ((char **)) ATTRIBUTE_MALLOC;
d39 1
a39 1
#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__)
d48 1
a48 1
extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;
a53 5
/* Get the working directory.  The result is cached, so don't call
   chdir() between calls to getpwd().  */

extern char * getpwd PARAMS ((void));

d60 1
a60 5
extern char *choose_temp_base PARAMS ((void)) ATTRIBUTE_MALLOC;

/* Return a temporary file name or NULL if unable to create one.  */

extern char *make_temp_file PARAMS ((const char *)) ATTRIBUTE_MALLOC;
d111 5
a115 1
extern void xexit PARAMS ((int status)) ATTRIBUTE_NORETURN;
a127 2
/* Get a definition for va_list.  */
#include <stdarg.h>
d129 3
a131 1
extern PTR xmalloc PARAMS ((size_t)) ATTRIBUTE_MALLOC;
d133 2
a134 3
/* Reallocate memory without fail.  This works like xmalloc.  Note,
   realloc type functions are not suitable for attribute malloc since
   they may return the same address across multiple calls. */
d141 1
a141 1
extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;
d145 1
a145 5
extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;

/* Copy an existing memory buffer to a new memory buffer without fail.  */

extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;
a173 11

/* Like sprintf but provides a pointer to malloc'd storage, which must
   be freed by the caller.  */

extern int asprintf PARAMS ((char **, const char *, ...)) ATTRIBUTE_PRINTF_2;

/* Like vsprintf but provides a pointer to malloc'd storage, which
   must be freed by the caller.  */

extern int vasprintf PARAMS ((char **, const char *, va_list))
  ATTRIBUTE_PRINTF(2,0);
@


