head	1.70;
access;
symbols
	sid-snapshot-20180601:1.70
	sid-snapshot-20180501:1.70
	sid-snapshot-20180401:1.70
	sid-snapshot-20180301:1.70
	sid-snapshot-20180201:1.70
	sid-snapshot-20180101:1.70
	sid-snapshot-20171201:1.70
	sid-snapshot-20171101:1.70
	sid-snapshot-20171001:1.70
	sid-snapshot-20170901:1.70
	sid-snapshot-20170801:1.70
	sid-snapshot-20170701:1.70
	sid-snapshot-20170601:1.70
	sid-snapshot-20170501:1.70
	sid-snapshot-20170401:1.70
	sid-snapshot-20170301:1.70
	sid-snapshot-20170201:1.70
	sid-snapshot-20170101:1.70
	sid-snapshot-20161201:1.70
	sid-snapshot-20161101:1.70
	sid-snapshot-20160901:1.70
	sid-snapshot-20160801:1.70
	sid-snapshot-20160701:1.70
	sid-snapshot-20160601:1.70
	sid-snapshot-20160501:1.70
	sid-snapshot-20160401:1.70
	sid-snapshot-20160301:1.70
	sid-snapshot-20160201:1.70
	sid-snapshot-20160101:1.70
	sid-snapshot-20151201:1.70
	sid-snapshot-20151101:1.70
	sid-snapshot-20151001:1.70
	sid-snapshot-20150901:1.70
	sid-snapshot-20150801:1.70
	sid-snapshot-20150701:1.70
	sid-snapshot-20150601:1.70
	sid-snapshot-20150501:1.70
	sid-snapshot-20150401:1.70
	cygwin-1_7_35-release:1.70
	sid-snapshot-20150301:1.70
	cygwin-1_7_34-release:1.70
	sid-snapshot-20150201:1.70
	sid-snapshot-20150101:1.70
	sid-snapshot-20141201:1.70
	cygwin-1_7_33-release:1.70
	sid-snapshot-20141101:1.70
	sid-snapshot-20141001:1.70
	sid-snapshot-20140901:1.70
	cygwin-1_7_32-release:1.70
	sid-snapshot-20140801:1.70
	cygwin-1_7_31-release:1.70
	sid-snapshot-20140701:1.70
	sid-snapshot-20140601:1.70
	cygwin-1_7_30-release:1.70
	sid-snapshot-20140501:1.70
	cygwin-1_7_29-release:1.70
	sid-snapshot-20140401:1.70
	sid-snapshot-20140301:1.70
	cygwin-1_7_28-release:1.70
	sid-snapshot-20140201:1.70
	sid-snapshot-20140101:1.70
	sid-snapshot-20131201:1.70
	cygwin-1_7_27-release:1.70
	cygwin-1_7_26-release:1.70
	sid-snapshot-20131101:1.70
	sid-snapshot-20131001:1.70
	binutils-2_24-branch:1.70.0.6
	binutils-2_24-branchpoint:1.70
	binutils-2_21_1:1.67.4.1
	sid-snapshot-20130901:1.70
	cygwin-1_7_25-release:1.70
	gdb_7_6_1-2013-08-30-release:1.70
	cygwin-1_7_24-release:1.70
	cygwin-1_7_23-release:1.70
	sid-snapshot-20130801:1.70
	cygwin-1_7_22-release:1.70
	cygwin-1_7_21-release:1.70
	sid-snapshot-20130701:1.70
	cygwin-1_7_20-release:1.70
	cygwin-1_7_19-release:1.70
	sid-snapshot-20130601:1.70
	sid-snapshot-20130501:1.70
	gdb_7_6-2013-04-26-release:1.70
	cygwin-64bit-postmerge:1.70
	cygwin-64bit-premerge-branch:1.70.0.4
	cygwin-64bit-premerge:1.70
	sid-snapshot-20130401:1.70
	binutils-2_23_2:1.69
	gdb_7_6-branch:1.70.0.2
	gdb_7_6-2013-03-12-branchpoint:1.70
	cygwin-1_7_18-release:1.70
	sid-snapshot-20130301:1.70
	sid-snapshot-20130201:1.70
	sid-snapshot-20130101:1.70
	sid-snapshot-20121201:1.70
	gdb_7_5_1-2012-11-29-release:1.69
	binutils-2_23_1:1.69
	sid-snapshot-20121101:1.70
	binutils-2_23:1.69
	cygwin-1_7_17-release:1.70
	sid-snapshot-20121001:1.69
	sid-snapshot-20120901:1.69
	gdb_7_5-2012-08-17-release:1.69
	cygwin-64bit-branch:1.69.0.14
	sid-snapshot-20120801:1.69
	binutils-2_23-branch:1.69.0.12
	binutils-2_23-branchpoint:1.69
	cygwin-1_7_16-release:1.69
	gdb_7_5-branch:1.69.0.10
	gdb_7_5-2012-07-18-branchpoint:1.69
	sid-snapshot-20120701:1.69
	sid-snapshot-20120601:1.69
	cygwin-1_7_15-release:1.69
	sid-snapshot-20120501:1.69
	binutils-2_22_branch:1.69.0.8
	gdb_7_4_1-2012-04-26-release:1.69
	cygwin-1_7_14_2-release:1.69
	cygwin-1_7_14-release:1.69
	cygwin-1_7_12-release:1.69
	sid-snapshot-20120401:1.69
	sid-snapshot-20120301:1.69
	cygwin-1_7_11-release:1.69
	cygwin-1_7_10-release:1.69
	sid-snapshot-20120201:1.69
	gdb_7_4-2012-01-24-release:1.69
	sid-snapshot-20120101:1.69
	gdb_7_4-branch:1.69.0.6
	gdb_7_4-2011-12-13-branchpoint:1.69
	sid-snapshot-20111201:1.69
	binutils-2_22:1.69
	sid-snapshot-20111101:1.69
	sid-snapshot-20111001:1.69
	binutils-2_22-branch:1.69.0.4
	binutils-2_22-branchpoint:1.69
	gdb_7_3_1-2011-09-04-release:1.69
	sid-snapshot-20110901:1.69
	sid-snapshot-20110801:1.69
	gdb_7_3-2011-07-26-release:1.69
	sid-snapshot-20110701:1.69
	sid-snapshot-20110601:1.69
	sid-snapshot-20110501:1.69
	gdb_7_3-branch:1.69.0.2
	gdb_7_3-2011-04-01-branchpoint:1.69
	sid-snapshot-20110401:1.69
	cygwin-1_7_9-release:1.69
	sid-snapshot-20110301:1.69
	cygwin-1_7_8-release:1.69
	sid-snapshot-20110201:1.69
	sid-snapshot-20110101:1.69
	binutils-2_21:1.67
	sid-snapshot-20101201:1.67
	binutils-2_21-branch:1.67.0.4
	binutils-2_21-branchpoint:1.67
	sid-snapshot-20101101:1.67
	sid-snapshot-20101001:1.67
	binutils-2_20_1:1.66
	gdb_7_2-2010-09-02-release:1.67
	sid-snapshot-20100901:1.67
	cygwin-1_7_7-release:1.67
	sid-snapshot-20100801:1.67
	gdb_7_2-branch:1.67.0.2
	gdb_7_2-2010-07-07-branchpoint:1.67
	sid-snapshot-20100701:1.67
	sid-snapshot-20100601:1.67
	sid-snapshot-20100501:1.67
	cygwin-1_7_5-release:1.66
	cygwin-1_7_4-release:1.66
	sid-snapshot-20100401:1.66
	cygwin-1_7_3-release:1.66
	cygwin-1_7_2-release:1.66
	gdb_7_1-2010-03-18-release:1.66
	sid-snapshot-20100301:1.66
	gdb_7_1-branch:1.66.0.6
	gdb_7_1-2010-02-18-branchpoint:1.66
	sid-snapshot-20100201:1.66
	sid-snapshot-20100101:1.66
	gdb_7_0_1-2009-12-22-release:1.66
	cygwin-1_7_1-release:1.66
	sid-snapshot-20091201:1.66
	sid-snapshot-20091101:1.66
	binutils-2_20:1.66
	gdb_7_0-2009-10-06-release:1.66
	sid-snapshot-20091001:1.66
	gdb_7_0-branch:1.66.0.4
	gdb_7_0-2009-09-16-branchpoint:1.66
	arc-sim-20090309:1.64
	binutils-arc-20081103-branch:1.64.0.50
	binutils-arc-20081103-branchpoint:1.64
	binutils-2_20-branch:1.66.0.2
	binutils-2_20-branchpoint:1.66
	sid-snapshot-20090901:1.65
	sid-snapshot-20090801:1.64
	msnyder-checkpoint-072509-branch:1.64.0.48
	msnyder-checkpoint-072509-branchpoint:1.64
	sid-snapshot-20090701:1.64
	dje-cgen-play1-branch:1.64.0.46
	dje-cgen-play1-branchpoint:1.64
	sid-snapshot-20090601:1.64
	sid-snapshot-20090501:1.64
	sid-snapshot-20090401:1.64
	arc-20081103-branch:1.64.0.44
	arc-20081103-branchpoint:1.64
	arc-insight_6_8-branch:1.64.0.42
	arc-insight_6_8-branchpoint:1.64
	insight_6_8-branch:1.64.0.40
	insight_6_8-branchpoint:1.64
	sid-snapshot-20090301:1.64
	binutils-2_19_1:1.64
	sid-snapshot-20090201:1.64
	sid-snapshot-20090101:1.64
	reverse-20081226-branch:1.64.0.38
	reverse-20081226-branchpoint:1.64
	sid-snapshot-20081201:1.64
	multiprocess-20081120-branch:1.64.0.36
	multiprocess-20081120-branchpoint:1.64
	sid-snapshot-20081101:1.64
	binutils-2_19:1.64
	sid-snapshot-20081001:1.64
	reverse-20080930-branch:1.64.0.34
	reverse-20080930-branchpoint:1.64
	binutils-2_19-branch:1.64.0.32
	binutils-2_19-branchpoint:1.64
	sid-snapshot-20080901:1.64
	sid-snapshot-20080801:1.64
	reverse-20080717-branch:1.64.0.30
	reverse-20080717-branchpoint:1.64
	sid-snapshot-20080701:1.64
	msnyder-reverse-20080609-branch:1.64.0.28
	msnyder-reverse-20080609-branchpoint:1.64
	drow-reverse-20070409-branch:1.64.0.26
	drow-reverse-20070409-branchpoint:1.64
	sid-snapshot-20080601:1.64
	sid-snapshot-20080501:1.64
	sid-snapshot-20080403:1.64
	sid-snapshot-20080401:1.64
	gdb_6_8-2008-03-27-release:1.64
	sid-snapshot-20080301:1.64
	gdb_6_8-branch:1.64.0.24
	gdb_6_8-2008-02-26-branchpoint:1.64
	sid-snapshot-20080201:1.64
	sid-snapshot-20080101:1.64
	sid-snapshot-20071201:1.64
	sid-snapshot-20071101:1.64
	gdb_6_7_1-2007-10-29-release:1.64
	gdb_6_7-2007-10-10-release:1.64
	sid-snapshot-20071001:1.64
	gdb_6_7-branch:1.64.0.22
	gdb_6_7-2007-09-07-branchpoint:1.64
	binutils-2_18:1.64
	binutils-2_18-branch:1.64.0.20
	binutils-2_18-branchpoint:1.64
	insight_6_6-20070208-release:1.64
	binutils-csl-coldfire-4_1-32:1.64
	binutils-csl-sourcerygxx-4_1-32:1.64
	gdb_6_6-2006-12-18-release:1.64
	binutils-csl-innovasic-fido-3_4_4-33:1.64
	binutils-csl-sourcerygxx-3_4_4-32:1.51
	binutils-csl-coldfire-4_1-30:1.64
	binutils-csl-sourcerygxx-4_1-30:1.64
	binutils-csl-coldfire-4_1-28:1.64
	binutils-csl-sourcerygxx-4_1-29:1.64
	binutils-csl-sourcerygxx-4_1-28:1.64
	gdb_6_6-branch:1.64.0.18
	gdb_6_6-2006-11-15-branchpoint:1.64
	binutils-csl-arm-2006q3-27:1.64
	binutils-csl-sourcerygxx-4_1-27:1.64
	binutils-csl-arm-2006q3-26:1.64
	binutils-csl-sourcerygxx-4_1-26:1.64
	binutils-csl-sourcerygxx-4_1-25:1.64
	binutils-csl-sourcerygxx-4_1-24:1.64
	binutils-csl-sourcerygxx-4_1-23:1.64
	insight_6_5-20061003-release:1.64
	gdb-csl-symbian-6_4_50_20060226-12:1.63
	binutils-csl-sourcerygxx-4_1-21:1.64
	binutils-csl-arm-2006q3-21:1.64
	binutils-csl-sourcerygxx-4_1-22:1.64
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.64
	binutils-csl-sourcerygxx-4_1-20:1.64
	binutils-csl-arm-2006q3-19:1.64
	binutils-csl-sourcerygxx-4_1-19:1.64
	binutils-csl-sourcerygxx-4_1-18:1.64
	binutils-csl-renesas-4_1-9:1.64
	gdb-csl-sourcerygxx-3_4_4-25:1.63
	binutils-csl-sourcerygxx-3_4_4-25:1.51
	nickrob-async-20060828-mergepoint:1.64
	gdb-csl-symbian-6_4_50_20060226-11:1.63
	binutils-csl-renesas-4_1-8:1.64
	binutils-csl-renesas-4_1-7:1.64
	binutils-csl-renesas-4_1-6:1.64
	gdb-csl-sourcerygxx-4_1-17:1.63
	binutils-csl-sourcerygxx-4_1-17:1.64
	gdb-csl-20060226-branch-local-2:1.63
	cr-0x5f1:1.64.0.16
	gdb-csl-sourcerygxx-4_1-14:1.63
	binutils-csl-sourcerygxx-4_1-14:1.64
	binutils-csl-sourcerygxx-4_1-15:1.64
	gdb-csl-sourcerygxx-4_1-13:1.63
	binutils-csl-sourcerygxx-4_1-13:1.64
	binutils-2_17:1.64
	gdb-csl-sourcerygxx-4_1-12:1.63
	binutils-csl-sourcerygxx-4_1-12:1.64
	gdb-csl-sourcerygxx-3_4_4-21:1.63
	binutils-csl-sourcerygxx-3_4_4-21:1.64
	gdb_6_5-20060621-release:1.64
	binutils-csl-wrs-linux-3_4_4-24:1.51
	binutils-csl-wrs-linux-3_4_4-23:1.51
	gdb-csl-sourcerygxx-4_1-9:1.63
	binutils-csl-sourcerygxx-4_1-9:1.64
	gdb-csl-sourcerygxx-4_1-8:1.63
	binutils-csl-sourcerygxx-4_1-8:1.64
	gdb-csl-sourcerygxx-4_1-7:1.63
	binutils-csl-sourcerygxx-4_1-7:1.64
	gdb-csl-arm-2006q1-6:1.63
	binutils-csl-arm-2006q1-6:1.64
	gdb-csl-sourcerygxx-4_1-6:1.63
	binutils-csl-sourcerygxx-4_1-6:1.64
	binutils-csl-wrs-linux-3_4_4-22:1.51
	gdb-csl-symbian-6_4_50_20060226-10:1.63
	gdb-csl-symbian-6_4_50_20060226-9:1.63
	gdb-csl-symbian-6_4_50_20060226-8:1.63
	gdb-csl-coldfire-4_1-11:1.63
	binutils-csl-coldfire-4_1-11:1.64
	gdb-csl-sourcerygxx-3_4_4-19:1.63
	binutils-csl-sourcerygxx-3_4_4-19:1.64
	gdb-csl-coldfire-4_1-10:1.63
	gdb_6_5-branch:1.64.0.14
	gdb_6_5-2006-05-14-branchpoint:1.64
	binutils-csl-coldfire-4_1-10:1.64
	gdb-csl-sourcerygxx-4_1-5:1.63
	binutils-csl-sourcerygxx-4_1-5:1.64
	nickrob-async-20060513-branch:1.64.0.12
	nickrob-async-20060513-branchpoint:1.64
	gdb-csl-sourcerygxx-4_1-4:1.63
	binutils-csl-sourcerygxx-4_1-4:1.64
	msnyder-reverse-20060502-branch:1.64.0.10
	msnyder-reverse-20060502-branchpoint:1.64
	binutils-csl-wrs-linux-3_4_4-21:1.51
	gdb-csl-morpho-4_1-4:1.63
	binutils-csl-morpho-4_1-4:1.64
	gdb-csl-sourcerygxx-3_4_4-17:1.63
	binutils-csl-sourcerygxx-3_4_4-17:1.64
	binutils-csl-wrs-linux-3_4_4-20:1.51
	readline_5_1-import-branch:1.64.0.8
	readline_5_1-import-branchpoint:1.64
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.63
	binutils-2_17-branch:1.64.0.6
	binutils-2_17-branchpoint:1.64
	gdb-csl-symbian-20060226-branch:1.63.0.14
	gdb-csl-symbian-20060226-branchpoint:1.63
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.63
	msnyder-reverse-20060331-branch:1.64.0.4
	msnyder-reverse-20060331-branchpoint:1.64
	binutils-csl-2_17-branch:1.64.0.2
	binutils-csl-2_17-branchpoint:1.64
	gdb-csl-available-20060303-branch:1.63.0.12
	gdb-csl-available-20060303-branchpoint:1.63
	gdb-csl-20060226-branch:1.63.0.10
	gdb-csl-20060226-branchpoint:1.63
	gdb_6_4-20051202-release:1.63
	msnyder-fork-checkpoint-branch:1.63.0.8
	msnyder-fork-checkpoint-branchpoint:1.63
	gdb-csl-gxxpro-6_3-branch:1.63.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.63
	gdb_6_4-branch:1.63.0.4
	gdb_6_4-2005-11-01-branchpoint:1.63
	gdb-csl-arm-20051020-branch:1.63.0.2
	gdb-csl-arm-20051020-branchpoint:1.63
	binutils-csl-gxxpro-3_4-branch:1.51.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.51
	binutils-2_16_1:1.51
	msnyder-tracepoint-checkpoint-branch:1.53.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.53
	gdb-csl-arm-20050325-2005-q1b:1.51
	binutils-csl-arm-2005q1b:1.51
	binutils-2_16:1.51
	gdb-csl-arm-20050325-2005-q1a:1.51
	binutils-csl-arm-2005q1a:1.51
	csl-arm-20050325-branch:1.51.0.6
	csl-arm-20050325-branchpoint:1.51
	binutils-csl-arm-2005q1-branch:1.51.0.4
	binutils-csl-arm-2005q1-branchpoint:1.51
	binutils-2_16-branch:1.51.0.2
	binutils-2_16-branchpoint:1.51
	csl-arm-2004-q3d:1.50
	gdb_6_3-20041109-release:1.50
	gdb_6_3-branch:1.50.0.58
	gdb_6_3-20041019-branchpoint:1.50
	csl-arm-2004-q3:1.50
	drow_intercu-merge-20040921:1.50
	drow_intercu-merge-20040915:1.50
	jimb-gdb_6_2-e500-branch:1.50.0.60
	jimb-gdb_6_2-e500-branchpoint:1.50
	gdb_6_2-20040730-release:1.50
	gdb_6_2-branch:1.50.0.56
	gdb_6_2-2004-07-10-gmt-branchpoint:1.50
	gdb_6_1_1-20040616-release:1.50
	binutils-2_15:1.50
	binutils-2_15-branchpoint:1.50
	csl-arm-2004-q1a:1.50
	csl-arm-2004-q1:1.50
	gdb_6_1-2004-04-05-release:1.50
	drow_intercu-merge-20040402:1.50
	drow_intercu-merge-20040327:1.50
	ezannoni_pie-20040323-branch:1.50.0.54
	ezannoni_pie-20040323-branchpoint:1.50
	cagney_tramp-20040321-mergepoint:1.50
	cagney_tramp-20040309-branch:1.50.0.52
	cagney_tramp-20040309-branchpoint:1.50
	gdb_6_1-branch:1.50.0.50
	gdb_6_1-2004-03-01-gmt-branchpoint:1.50
	drow_intercu-20040221-branch:1.50.0.48
	drow_intercu-20040221-branchpoint:1.50
	binutils-2_15-branch:1.50.0.46
	cagney_bfdfile-20040213-branch:1.50.0.44
	cagney_bfdfile-20040213-branchpoint:1.50
	drow-cplus-merge-20040208:1.50
	carlton_dictionary-20040126-merge:1.50
	cagney_bigcore-20040122-branch:1.50.0.42
	cagney_bigcore-20040122-branchpoint:1.50
	drow-cplus-merge-20040113:1.50
	csl-arm-2003-q4:1.50
	drow-cplus-merge-20031224:1.50
	drow-cplus-merge-20031220:1.50
	carlton_dictionary-20031215-merge:1.50
	drow-cplus-merge-20031214:1.50
	carlton-dictionary-20031111-merge:1.50
	gdb_6_0-2003-10-04-release:1.50
	kettenis_sparc-20030918-branch:1.50.0.40
	kettenis_sparc-20030918-branchpoint:1.50
	carlton_dictionary-20030917-merge:1.50
	ezannoni_pie-20030916-branchpoint:1.50
	ezannoni_pie-20030916-branch:1.50.0.38
	cagney_x86i386-20030821-branch:1.50.0.36
	cagney_x86i386-20030821-branchpoint:1.50
	carlton_dictionary-20030805-merge:1.50
	carlton_dictionary-20030627-merge:1.50
	gdb_6_0-branch:1.50.0.34
	gdb_6_0-2003-06-23-branchpoint:1.50
	jimb-ppc64-linux-20030613-branch:1.50.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.50
	binutils-2_14:1.50
	cagney_convert-20030606-branch:1.50.0.30
	cagney_convert-20030606-branchpoint:1.50
	cagney_writestrings-20030508-branch:1.50.0.28
	cagney_writestrings-20030508-branchpoint:1.50
	jimb-ppc64-linux-20030528-branch:1.50.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.50
	carlton_dictionary-20030523-merge:1.50
	cagney_fileio-20030521-branch:1.50.0.24
	cagney_fileio-20030521-branchpoint:1.50
	kettenis_i386newframe-20030517-mergepoint:1.50
	jimb-ppc64-linux-20030509-branch:1.50.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.50
	kettenis_i386newframe-20030504-mergepoint:1.50
	carlton_dictionary-20030430-merge:1.50
	binutils-2_14-branch:1.50.0.20
	binutils-2_14-branchpoint:1.50
	kettenis_i386newframe-20030419-branch:1.50.0.18
	kettenis_i386newframe-20030419-branchpoint:1.50
	carlton_dictionary-20030416-merge:1.50
	cagney_frameaddr-20030409-mergepoint:1.50
	kettenis_i386newframe-20030406-branch:1.50.0.16
	kettenis_i386newframe-20030406-branchpoint:1.50
	cagney_frameaddr-20030403-branchpoint:1.50
	cagney_frameaddr-20030403-branch:1.50.0.14
	cagney_framebase-20030330-mergepoint:1.50
	cagney_framebase-20030326-branch:1.50.0.12
	cagney_framebase-20030326-branchpoint:1.50
	cagney_lazyid-20030317-branch:1.50.0.10
	cagney_lazyid-20030317-branchpoint:1.50
	kettenis-i386newframe-20030316-mergepoint:1.50
	offbyone-20030313-branch:1.50.0.8
	offbyone-20030313-branchpoint:1.50
	kettenis-i386newframe-20030308-branch:1.50.0.6
	kettenis-i386newframe-20030308-branchpoint:1.50
	carlton_dictionary-20030305-merge:1.50
	cagney_offbyone-20030303-branch:1.50.0.4
	cagney_offbyone-20030303-branchpoint:1.50
	w32api-2_2:1.50
	mingw-runtime-2_4:1.50
	carlton_dictionary-20030207-merge:1.50
	interps-20030202-branch:1.50.0.2
	interps-20030202-branchpoint:1.50
	cagney-unwind-20030108-branch:1.49.0.2
	cagney-unwind-20030108-branchpoint:1.49
	binutils-2_13_2_1:1.48
	binutils-2_13_2:1.48
	carlton_dictionary-20021223-merge:1.49
	gdb_5_3-2002-12-12-release:1.48
	carlton_dictionary-20021115-merge:1.48
	binutils-2_13_1:1.48
	kseitz_interps-20021105-merge:1.48
	kseitz_interps-20021103-merge:1.48
	drow-cplus-merge-20021020:1.48
	drow-cplus-merge-20021025:1.48
	carlton_dictionary-20021025-merge:1.48
	carlton_dictionary-20021011-merge:1.48
	drow-cplus-branch:1.48.0.24
	drow-cplus-branchpoint:1.48
	kseitz_interps-20020930-merge:1.48
	carlton_dictionary-20020927-merge:1.48
	carlton_dictionary-branch:1.48.0.22
	carlton_dictionary-20020920-branchpoint:1.48
	sid-20020905-branchpoint:1.48
	sid-20020905-branch:1.48.0.20
	gdb_5_3-branch:1.48.0.18
	gdb_5_3-2002-09-04-branchpoint:1.48
	kseitz_interps-20020829-merge:1.48
	cagney_sysregs-20020825-branch:1.48.0.16
	cagney_sysregs-20020825-branchpoint:1.48
	readline_4_3-import-branch:1.48.0.14
	readline_4_3-import-branchpoint:1.48
	binutils-2_13:1.48
	gdb_5_2_1-2002-07-23-release:1.48
	binutils-2_13-branchpoint:1.48
	binutils-2_13-branch:1.48.0.12
	kseitz_interps-20020528-branch:1.48.0.10
	kseitz_interps-20020528-branchpoint:1.48
	cagney_regbuf-20020515-branch:1.48.0.8
	cagney_regbuf-20020515-branchpoint:1.48
	binutils-2_12_1:1.48
	jimb-macro-020506-branch:1.48.0.6
	jimb-macro-020506-branchpoint:1.48
	gdb_5_2-2002-04-29-release:1.48
	binutils-2_12:1.48
	gdb_5_2-branch:1.48.0.4
	gdb_5_2-2002-03-03-branchpoint:1.48
	binutils-2_12-branch:1.48.0.2
	binutils-2_12-branchpoint:1.48
	gdb_5_1_1-2002-01-24-release:1.47
	gdb_5_1_0_1-2002-01-03-release:1.47
	cygnus_cvs_20020108_pre:1.48
	gdb_5_1_0_1-2002-01-03-branch:1.47.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.47
	gdb_5_1-2001-11-21-release:1.47
	gdb_s390-2001-09-26-branch:1.47.0.4
	gdb_s390-2001-09-26-branchpoint:1.47
	gdb_5_1-2001-07-29-branch:1.47.0.2
	gdb_5_1-2001-07-29-branchpoint:1.47
	binutils-2_11_2:1.46.2.1
	binutils-2_11_1:1.46.2.1
	binutils-2_11:1.46
	x86_64versiong3:1.46
	binutils-2_11-branch:1.46.0.2
	insight-precleanup-2001-01-01:1.45
	binutils-2_10_1:1.43
	binutils-2_10:1.43
	gdb-premipsmulti-2000-06-06-branch:1.44.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.44
	gdb_5_0-2000-05-19-release:1.43
	gdb_4_18_2-2000-05-18-release:1.43
	gdb_4_95_1-2000-05-11-snapshot:1.43
	gdb_4_95_0-2000-04-27-snapshot:1.43
	gdb_5_0-2000-04-10-branch:1.43.0.4
	gdb_5_0-2000-04-10-branchpoint:1.43
	binutils-2_10-branch:1.43.0.2
	binutils-2_10-branchpoint:1.43
	binutils_latest_snapshot:1.70
	repo-unification-2000-02-06:1.43
	binu_ss_19990721:1.7
	binu_ss_19990602:1.4
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.70
date	2012.10.15.00.22.35;	author danglin;	state Exp;
branches;
next	1.69;

1.69
date	2010.12.31.16.43.45;	author danglin;	state Exp;
branches;
next	1.68;

1.68
date	2010.12.27.02.05.14;	author danglin;	state Exp;
branches;
next	1.67;

1.67
date	2010.04.15.10.26.09;	author nickc;	state Exp;
branches
	1.67.4.1;
next	1.66;

1.66
date	2009.09.02.07.21.40;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2009.08.20.20.31.27;	author skrll;	state Exp;
branches;
next	1.64;

1.64
date	2006.03.04.22.11.48;	author danglin;	state Exp;
branches;
next	1.63;

1.63
date	2005.10.16.20.42.14;	author danglin;	state Exp;
branches;
next	1.62;

1.62
date	2005.10.13.02.26.34;	author danglin;	state Exp;
branches;
next	1.61;

1.61
date	2005.10.08.19.01.29;	author danglin;	state Exp;
branches;
next	1.60;

1.60
date	2005.09.25.02.33.54;	author danglin;	state Exp;
branches;
next	1.59;

1.59
date	2005.08.03.15.08.52;	author danglin;	state Exp;
branches;
next	1.58;

1.58
date	2005.07.28.20.32.21;	author danglin;	state Exp;
branches;
next	1.57;

1.57
date	2005.07.19.03.09.33;	author danglin;	state Exp;
branches;
next	1.56;

1.56
date	2005.07.19.00.11.48;	author danglin;	state Exp;
branches;
next	1.55;

1.55
date	2005.07.11.02.31.34;	author danglin;	state Exp;
branches;
next	1.54;

1.54
date	2005.06.11.15.33.52;	author danglin;	state Exp;
branches;
next	1.53;

1.53
date	2005.05.23.16.26.43;	author danglin;	state Exp;
branches;
next	1.52;

1.52
date	2005.05.10.10.21.12;	author nickc;	state Exp;
branches;
next	1.51;

1.51
date	2005.03.03.11.58.10;	author amodra;	state Exp;
branches;
next	1.50;

1.50
date	2003.01.31.21.24.32;	author danglin;	state Exp;
branches;
next	1.49;

1.49
date	2002.12.16.09.57.03;	author amodra;	state Exp;
branches;
next	1.48;

1.48
date	2001.12.31.23.43.03;	author law;	state Exp;
branches
	1.48.22.1
	1.48.24.1;
next	1.47;

1.47
date	2001.03.14.02.27.44;	author nickc;	state Exp;
branches;
next	1.46;

1.46
date	2001.01.14.05.14.45;	author amodra;	state Exp;
branches
	1.46.2.1;
next	1.45;

1.45
date	2000.09.05.05.22.24;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2000.04.21.21.04.04;	author law;	state Exp;
branches;
next	1.43;

1.43
date	99.11.25.03.28.22;	author law;	state Exp;
branches;
next	1.42;

1.42
date	99.10.10.07.55.25;	author law;	state Exp;
branches;
next	1.41;

1.41
date	99.09.23.15.46.33;	author law;	state Exp;
branches;
next	1.40;

1.40
date	99.09.23.14.29.10;	author law;	state Exp;
branches;
next	1.39;

1.39
date	99.09.23.13.14.33;	author law;	state Exp;
branches;
next	1.38;

1.38
date	99.09.23.13.10.07;	author law;	state Exp;
branches;
next	1.37;

1.37
date	99.09.20.09.57.19;	author law;	state Exp;
branches;
next	1.36;

1.36
date	99.09.19.20.05.00;	author law;	state Exp;
branches;
next	1.35;

1.35
date	99.09.19.19.43.06;	author law;	state Exp;
branches;
next	1.34;

1.34
date	99.09.19.19.19.50;	author law;	state Exp;
branches;
next	1.33;

1.33
date	99.09.19.18.54.23;	author law;	state Exp;
branches;
next	1.32;

1.32
date	99.09.19.18.44.13;	author law;	state Exp;
branches;
next	1.31;

1.31
date	99.09.19.18.10.28;	author law;	state Exp;
branches;
next	1.30;

1.30
date	99.09.19.17.39.17;	author law;	state Exp;
branches;
next	1.29;

1.29
date	99.09.19.17.16.08;	author law;	state Exp;
branches;
next	1.28;

1.28
date	99.09.19.17.12.55;	author law;	state Exp;
branches;
next	1.27;

1.27
date	99.09.19.16.55.09;	author law;	state Exp;
branches;
next	1.26;

1.26
date	99.09.19.16.41.51;	author law;	state Exp;
branches;
next	1.25;

1.25
date	99.09.18.18.08.34;	author law;	state Exp;
branches;
next	1.24;

1.24
date	99.09.18.17.49.43;	author law;	state Exp;
branches;
next	1.23;

1.23
date	99.09.18.17.43.47;	author law;	state Exp;
branches;
next	1.22;

1.22
date	99.09.07.19.46.47;	author law;	state Exp;
branches;
next	1.21;

1.21
date	99.09.06.10.42.11;	author law;	state Exp;
branches;
next	1.20;

1.20
date	99.08.29.07.51.43;	author law;	state Exp;
branches;
next	1.19;

1.19
date	99.08.28.10.58.26;	author law;	state Exp;
branches;
next	1.18;

1.18
date	99.08.28.10.16.15;	author law;	state Exp;
branches;
next	1.17;

1.17
date	99.08.28.09.28.31;	author law;	state Exp;
branches;
next	1.16;

1.16
date	99.08.28.08.46.57;	author law;	state Exp;
branches;
next	1.15;

1.15
date	99.08.28.08.16.55;	author law;	state Exp;
branches;
next	1.14;

1.14
date	99.08.28.06.41.11;	author law;	state Exp;
branches;
next	1.13;

1.13
date	99.08.28.06.27.12;	author law;	state Exp;
branches;
next	1.12;

1.12
date	99.08.06.16.03.53;	author law;	state Exp;
branches;
next	1.11;

1.11
date	99.08.06.15.49.29;	author law;	state Exp;
branches;
next	1.10;

1.10
date	99.08.05.22.58.08;	author law;	state Exp;
branches;
next	1.9;

1.9
date	99.07.28.10.31.15;	author law;	state Exp;
branches;
next	1.8;

1.8
date	99.07.28.08.06.30;	author law;	state Exp;
branches;
next	1.7;

1.7
date	99.06.30.23.20.56;	author law;	state Exp;
branches;
next	1.6;

1.6
date	99.06.25.03.29.45;	author law;	state Exp;
branches;
next	1.5;

1.5
date	99.06.25.03.23.12;	author law;	state Exp;
branches;
next	1.4;

1.4
date	99.05.28.14.26.52;	author law;	state Exp;
branches;
next	1.3;

1.3
date	99.05.27.03.19.32;	author law;	state Exp;
branches;
next	1.2;

1.2
date	99.05.26.16.04.11;	author law;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.04;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.67.4.1
date	2011.03.14.16.31.56;	author danglin;	state Exp;
branches;
next	;

1.48.22.1
date	2002.12.23.19.39.25;	author carlton;	state Exp;
branches;
next	1.48.22.2;

1.48.22.2
date	2003.02.07.19.18.01;	author carlton;	state Exp;
branches;
next	;

1.48.24.1
date	2003.12.14.20.28.01;	author drow;	state Exp;
branches;
next	;

1.46.2.1
date	2001.06.07.03.21.40;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.04;	author rth;	state Exp;
branches;
next	;


desc
@@


1.70
log
@	* hppa.h (pa_opcodes): Use "cX" completer instead of "cx" in fstqx
	opcodes.  Likewise, use "cM" instead of "cm" in fstqs opcodes.
@
text
@/* Table of opcodes for the PA-RISC.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,
   2001, 2002, 2003, 2004, 2005, 2006, 2009, 2010
   Free Software Foundation, Inc.

   Contributed by the Center for Software Science at the
   University of Utah (pa-gdb-bugs@@cs.utah.edu).

   This file is part of GAS, the GNU Assembler, and GDB, the GNU disassembler.

   GAS/GDB is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS/GDB is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS or GDB; see the file COPYING3.  If not, write to
   the Free Software Foundation, 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#if !defined(__STDC__) && !defined(const)
#define const
#endif

/*
 * Structure of an opcode table entry.
 */

/* There are two kinds of delay slot nullification: normal which is
 * controled by the nullification bit, and conditional, which depends
 * on the direction of the branch and its success or failure.
 *
 * NONE is unfortunately #defined in the hiux system include files.  
 * #undef it away.
 */
#undef NONE
struct pa_opcode
{
    const char *name;
    unsigned long int match;	/* Bits that must be set...  */
    unsigned long int mask;	/* ... in these bits. */
    char *args;
    enum pa_arch arch;
    char flags;
};

/* Enables strict matching.  Opcodes with match errors are skipped
   when this bit is set.  */
#define FLAG_STRICT 0x1

/*
   All hppa opcodes are 32 bits.

   The match component is a mask saying which bits must match a
   particular opcode in order for an instruction to be an instance
   of that opcode.

   The args component is a string containing one character for each operand of
   the instruction.  Characters used as a prefix allow any second character to
   be used without conflicting with the main operand characters.

   Bit positions in this description follow HP usage of lsb = 31,
   "at" is lsb of field.

   In the args field, the following characters must match exactly:

	'+,() '

   In the args field, the following characters are unused:

	'  "         -  /   34 6789:;    '
	'@@  C         M             [\]  '
	'`    e g                     }  '

   Here are all the characters:

	' !"#$%&'()*+-,./0123456789:;<=>?'
	'@@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'
	'`abcdefghijklmnopqrstuvwxyz{|}~ '

Kinds of operands:
   x    integer register field at 15.
   b    integer register field at 10.
   t    integer register field at 31.
   a	integer register field at 10 and 15 (for PERMH)
   5    5 bit immediate at 15.
   s    2 bit space specifier at 17.
   S    3 bit space specifier at 18.
   V    5 bit immediate value at 31
   i    11 bit immediate value at 31
   j    14 bit immediate value at 31
   k    21 bit immediate value at 31
   l    16 bit immediate value at 31 (wide mode only, unusual encoding).
   n	nullification for branch instructions
   N	nullification for spop and copr instructions
   w    12 bit branch displacement
   W    17 bit branch displacement (PC relative)
   X    22 bit branch displacement (PC relative)
   z    17 bit branch displacement (just a number, not an address)

Also these:

   .    2 bit shift amount at 25
   *    4 bit shift amount at 25
   p    5 bit shift count at 26 (to support the SHD instruction) encoded as
        31-p
   ~    6 bit shift count at 20,22:26 encoded as 63-~.
   P    5 bit bit position at 26
   q    6 bit bit position at 20,22:26
   T    5 bit field length at 31 (encoded as 32-T)
   %	6 bit field length at 23,27:31 (variable extract/deposit)
   |	6 bit field length at 19,27:31 (fixed extract/deposit)
   A    13 bit immediate at 18 (to support the BREAK instruction)
   ^	like b, but describes a control register
   !    sar (cr11) register
   D    26 bit immediate at 31 (to support the DIAG instruction)
   $    9 bit immediate at 28 (to support POPBTS)

   v    3 bit Special Function Unit identifier at 25
   O    20 bit Special Function Unit operation split between 15 bits at 20
        and 5 bits at 31
   o    15 bit Special Function Unit operation at 20
   2    22 bit Special Function Unit operation split between 17 bits at 20
        and 5 bits at 31
   1    15 bit Special Function Unit operation split between 10 bits at 20
        and 5 bits at 31
   0    10 bit Special Function Unit operation split between 5 bits at 20
        and 5 bits at 31
   u    3 bit coprocessor unit identifier at 25
   F    Source Floating Point Operand Format Completer encoded 2 bits at 20
   I    Source Floating Point Operand Format Completer encoded 1 bits at 20
	(for 0xe format FP instructions)
   G    Destination Floating Point Operand Format Completer encoded 2 bits at 18
   H    Floating Point Operand Format at 26 for 'fmpyadd' and 'fmpysub'
        (very similar to 'F')

   r	5 bit immediate value at 31 (for the break instruction)
	(very similar to V above, except the value is unsigned instead of
	low_sign_ext)
   R	5 bit immediate value at 15 (for the ssm, rsm, probei instructions)
	(same as r above, except the value is in a different location)
   U	10 bit immediate value at 15 (for SSM, RSM on pa2.0)
   Q	5 bit immediate value at 10 (a bit position specified in
	the bb instruction. It's the same as r above, except the
        value is in a different location)
   B	5 bit immediate value at 10 (a bit position specified in
	the bb instruction. Similar to Q, but 64 bit handling is
	different.
   Z    %r1 -- implicit target of addil instruction.
   L    ,%r2 completer for new syntax branch
   {    Source format completer for fcnv
   _    Destination format completer for fcnv
   h    cbit for fcmp
   =    gfx tests for ftest
   d    14 bit offset for single precision FP long load/store.
   #    14 bit offset for double precision FP load long/store.
   J    Yet another 14 bit offset for load/store with ma,mb completers.
   K    Yet another 14 bit offset for load/store with ma,mb completers.
   y    16 bit offset for word aligned load/store (PA2.0 wide).
   &    16 bit offset for dword aligned load/store (PA2.0 wide).
   <    16 bit offset for load/store with ma,mb completers (PA2.0 wide).
   >    16 bit offset for load/store with ma,mb completers (PA2.0 wide).
   Y    %sr0,%r31 -- implicit target of be,l instruction.
   @@	implicit immediate value of 0

Completer operands all have 'c' as the prefix:

   cx   indexed load and store completer.
   cX   indexed load and store completer.  Like cx, but emits a space
	after in disassembler.
   cm   short load and store completer.
   cM   short load and store completer.  Like cm, but emits a space
        after in disassembler.
   cq   long load and store completer (like cm, but inserted into a
	different location in the target instruction).
   cs   store bytes short completer.
   cA   store bytes short completer.  Like cs, but emits a space
        after in disassembler.
   ce   long load/store completer for LDW/STW with a different encoding
	than the others
   cc   load cache control hint
   cd   load and clear cache control hint
   cC   store cache control hint
   co	ordered access

   cp	branch link and push completer
   cP	branch pop completer
   cl	branch link completer
   cg	branch gate completer

   cw	read/write completer for PROBE
   cW	wide completer for MFCTL
   cL	local processor completer for cache control
   cZ   System Control Completer (to support LPA, LHA, etc.)

   ci	correction completer for DCOR
   ca	add completer
   cy	32 bit add carry completer
   cY	64 bit add carry completer
   cv	signed overflow trap completer
   ct	trap on condition completer for ADDI, SUB
   cT	trap on condition completer for UADDCM
   cb	32 bit borrow completer for SUB
   cB	64 bit borrow completer for SUB

   ch	left/right half completer
   cH	signed/unsigned saturation completer
   cS	signed/unsigned completer at 21
   cz	zero/sign extension completer.
   c*	permutation completer

Condition operands all have '?' as the prefix:

   ?f   Floating point compare conditions (encoded as 5 bits at 31)

   ?a	add conditions
   ?A	64 bit add conditions
   ?@@   add branch conditions followed by nullify
   ?d	non-negated add branch conditions
   ?D	negated add branch conditions
   ?w	wide mode non-negated add branch conditions
   ?W	wide mode negated add branch conditions

   ?s   compare/subtract conditions
   ?S	64 bit compare/subtract conditions
   ?t   non-negated compare and branch conditions
   ?n   32 bit compare and branch conditions followed by nullify
   ?N   64 bit compare and branch conditions followed by nullify
   ?Q	64 bit compare and branch conditions for CMPIB instruction

   ?l   logical conditions
   ?L	64 bit logical conditions

   ?b   branch on bit conditions
   ?B	64 bit branch on bit conditions

   ?x   shift/extract/deposit conditions
   ?X	64 bit shift/extract/deposit conditions
   ?y   shift/extract/deposit conditions followed by nullify for conditional
        branches

   ?u   unit conditions
   ?U   64 bit unit conditions

Floating point registers all have 'f' as a prefix:

   ft	target register at 31
   fT	target register with L/R halves at 31
   fa	operand 1 register at 10
   fA   operand 1 register with L/R halves at 10
   fX   Same as fA, except prints a space before register during disasm
   fb	operand 2 register at 15
   fB   operand 2 register with L/R halves at 15
   fC   operand 3 register with L/R halves at 16:18,21:23
   fe   Like fT, but encoding is different.
   fE   Same as fe, except prints a space before register during disasm.
   fx	target register at 15 (only for PA 2.0 long format FLDD/FSTD). 

Float registers for fmpyadd and fmpysub:

   fi	mult operand 1 register at 10
   fj	mult operand 2 register at 15
   fk	mult target register at 20
   fl	add/sub operand register at 25
   fm	add/sub target register at 31

*/


#if 0
/* List of characters not to put a space after.  Note that
   "," is included, as the "spopN" operations use literal
   commas in their completer sections.  */
static const char *const completer_chars = ",CcY<>?!@@+&U~FfGHINnOoZMadu|/=0123%e$m}";
#endif

/* The order of the opcodes in this table is significant:

   * The assembler requires that all instances of the same mnemonic be
     consecutive.  If they aren't, the assembler will bomb at runtime.

   * Immediate fields use pa_get_absolute_expression to parse the
     string.  It will generate a "bad expression" error if passed
     a register name.  Thus, register index variants of an opcode
     need to precede immediate variants.

   * The disassembler does not care about the order of the opcodes
     except in cases where implicit addressing is used.

   Here are the rules for ordering the opcodes of a mnemonic:

   1) Opcodes with FLAG_STRICT should precede opcodes without
      FLAG_STRICT.

   2) Opcodes with FLAG_STRICT should be ordered as follows:
      register index opcodes, short immediate opcodes, and finally
      long immediate opcodes.  When both pa10 and pa11 variants
      of the same opcode are available, the pa10 opcode should
      come first for correct architectural promotion.

   3) When implicit addressing is available for an opcode, the
      implicit opcode should precede the explicit opcode.

   4) Opcodes without FLAG_STRICT should be ordered as follows:
      register index opcodes, long immediate opcodes, and finally
      short immediate opcodes.  */
	
static const struct pa_opcode pa_opcodes[] =
{

/* Pseudo-instructions.  */

{ "ldi",	0x34000000, 0xffe00000, "l,x", pa20w, 0},/* ldo val(r0),r */
{ "ldi",	0x34000000, 0xffe0c000, "j,x", pa10, 0},/* ldo val(r0),r */

{ "cmpib",	0xec000000, 0xfc000000, "?Qn5,b,w", pa20, FLAG_STRICT},
{ "cmpib", 	0x84000000, 0xf4000000, "?nn5,b,w", pa10, FLAG_STRICT},
{ "comib", 	0x84000000, 0xfc000000, "?nn5,b,w", pa10, 0}, /* comib{tf}*/
/* This entry is for the disassembler only.  It will never be used by
   assembler.  */
{ "comib", 	0x8c000000, 0xfc000000, "?nn5,b,w", pa10, 0}, /* comib{tf}*/
{ "cmpb",	0x9c000000, 0xdc000000, "?Nnx,b,w", pa20, FLAG_STRICT},
{ "cmpb",	0x80000000, 0xf4000000, "?nnx,b,w", pa10, FLAG_STRICT},
{ "comb",	0x80000000, 0xfc000000, "?nnx,b,w", pa10, 0}, /* comb{tf} */
/* This entry is for the disassembler only.  It will never be used by
   assembler.  */
{ "comb",	0x88000000, 0xfc000000, "?nnx,b,w", pa10, 0}, /* comb{tf} */
{ "addb",	0xa0000000, 0xf4000000, "?Wnx,b,w", pa20w, FLAG_STRICT},
{ "addb",	0xa0000000, 0xfc000000, "?@@nx,b,w", pa10, 0}, /* addb{tf} */
/* This entry is for the disassembler only.  It will never be used by
   assembler.  */
{ "addb",	0xa8000000, 0xfc000000, "?@@nx,b,w", pa10, 0},
{ "addib",	0xa4000000, 0xf4000000, "?Wn5,b,w", pa20w, FLAG_STRICT},
{ "addib",	0xa4000000, 0xfc000000, "?@@n5,b,w", pa10, 0}, /* addib{tf}*/
/* This entry is for the disassembler only.  It will never be used by
   assembler.  */
{ "addib",	0xac000000, 0xfc000000, "?@@n5,b,w", pa10, 0}, /* addib{tf}*/
{ "nop",	0x08000240, 0xffffffff, "", pa10, 0},      /* or 0,0,0 */
{ "copy",	0x08000240, 0xffe0ffe0, "x,t", pa10, 0},   /* or r,0,t */
{ "mtsar",	0x01601840, 0xffe0ffff, "x", pa10, 0}, /* mtctl r,cr11 */

/* Loads and Stores for integer registers.  */

{ "ldd",	0x0c0000c0, 0xfc00d3c0, "cxccx(b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0000c0, 0xfc0013c0, "cxccx(s,b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010e0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010e0, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010c0, 0xfc00d3c0, "cmcc5(b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010c0, 0xfc0013c0, "cmcc5(s,b),t", pa20, FLAG_STRICT},
{ "ldd",	0x50000000, 0xfc000002, "cq&(b),x", pa20w, FLAG_STRICT},
{ "ldd",	0x50000000, 0xfc00c002, "cq#(b),x", pa20, FLAG_STRICT},
{ "ldd",	0x50000000, 0xfc000002, "cq#(s,b),x", pa20, FLAG_STRICT},
{ "ldw",	0x0c000080, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c000080, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldw",	0x0c000080, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldw",	0x0c0010a0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldw",	0x0c0010a0, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldw",	0x4c000000, 0xfc000000, "ce<(b),x", pa20w, FLAG_STRICT},
{ "ldw",	0x5c000004, 0xfc000006, "ce>(b),x", pa20w, FLAG_STRICT},
{ "ldw",	0x48000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldw",	0x5c000004, 0xfc00c006, "ceK(b),x", pa20, FLAG_STRICT},
{ "ldw",	0x5c000004, 0xfc000006, "ceK(s,b),x", pa20, FLAG_STRICT},
{ "ldw",	0x4c000000, 0xfc00c000, "ceJ(b),x", pa10, FLAG_STRICT},
{ "ldw",	0x4c000000, 0xfc000000, "ceJ(s,b),x", pa10, FLAG_STRICT},
{ "ldw",	0x48000000, 0xfc00c000, "j(b),x", pa10, 0},
{ "ldw",	0x48000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldh",	0x0c000040, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c000040, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldh",	0x0c000040, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldh",	0x0c001060, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldh",	0x0c001060, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldh",	0x44000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldh",	0x44000000, 0xfc00c000, "j(b),x", pa10, 0},
{ "ldh",	0x44000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldb",	0x0c000000, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c000000, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldb",	0x0c000000, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldb",	0x0c001020, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldb",	0x0c001020, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldb",	0x40000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldb",	0x40000000, 0xfc00c000, "j(b),x", pa10, 0},
{ "ldb",	0x40000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "std",	0x0c0012e0, 0xfc00f3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "std",	0x0c0012e0, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "std",	0x0c0012c0, 0xfc00d3c0, "cmcCx,V(b)", pa20, FLAG_STRICT},
{ "std",	0x0c0012c0, 0xfc0013c0, "cmcCx,V(s,b)", pa20, FLAG_STRICT},
{ "std",	0x70000000, 0xfc000002, "cqx,&(b)", pa20w, FLAG_STRICT},
{ "std",	0x70000000, 0xfc00c002, "cqx,#(b)", pa20, FLAG_STRICT},
{ "std",	0x70000000, 0xfc000002, "cqx,#(s,b)", pa20, FLAG_STRICT},
{ "stw",	0x0c0012a0, 0xfc00f3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "stw",	0x0c0012a0, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "stw",	0x6c000000, 0xfc000000, "cex,<(b)", pa20w, FLAG_STRICT},
{ "stw",	0x7c000004, 0xfc000006, "cex,>(b)", pa20w, FLAG_STRICT},
{ "stw",	0x68000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "stw",	0x7c000004, 0xfc00c006, "cex,K(b)", pa20, FLAG_STRICT},
{ "stw",	0x7c000004, 0xfc000006, "cex,K(s,b)", pa20, FLAG_STRICT},
{ "stw",	0x6c000000, 0xfc00c000, "cex,J(b)", pa10, FLAG_STRICT},
{ "stw",	0x6c000000, 0xfc000000, "cex,J(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x68000000, 0xfc00c000, "x,j(b)", pa10, 0},
{ "stw",	0x68000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "sth",	0x0c001260, 0xfc00f3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "sth",	0x0c001260, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "sth",	0x64000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "sth",	0x64000000, 0xfc00c000, "x,j(b)", pa10, 0},
{ "sth",	0x64000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "stb",	0x0c001220, 0xfc00f3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "stb",	0x0c001220, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "stb",	0x60000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "stb",	0x60000000, 0xfc00c000, "x,j(b)", pa10, 0},
{ "stb",	0x60000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "ldwm",	0x4c000000, 0xfc00c000, "j(b),x", pa10, 0},
{ "ldwm",	0x4c000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "stwm",	0x6c000000, 0xfc00c000, "x,j(b)", pa10, 0},
{ "stwm",	0x6c000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "ldwx",	0x0c000080, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldwx",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldwx",	0x0c000080, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldwx",	0x0c000080, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldwx",	0x0c000080, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldwx",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldhx",	0x0c000040, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldhx",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldhx",	0x0c000040, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldhx",	0x0c000040, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldhx",	0x0c000040, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldhx",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldbx",	0x0c000000, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldbx",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldbx",	0x0c000000, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldbx",	0x0c000000, 0xfc0013c0, "cxccx(s,b),t", pa11, FLAG_STRICT},
{ "ldbx",	0x0c000000, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldbx",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldwa",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldwa",	0x0c000180, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldwa",	0x0c0011a0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldwa",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldwa",	0x0c001180, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldcw",	0x0c0001c0, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0001c0, 0xfc00d3c0, "cxcdx(b),t", pa11, FLAG_STRICT},
{ "ldcw",	0x0c0001c0, 0xfc0013c0, "cxcdx(s,b),t", pa11, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc00d3c0, "cmcd5(b),t", pa11, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc0013c0, "cmcd5(s,b),t", pa11, FLAG_STRICT},
{ "stwa",	0x0c0013a0, 0xfc00d3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "stwa",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stwa",	0x0c001380, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc00dfc0, "cAx,V(b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc00d3c0, "cscCx,V(b)", pa11, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc0013c0, "cscCx,V(s,b)", pa11, FLAG_STRICT},
{ "ldda",	0x0c000100, 0xfc00d3c0, "cxccx(b),t", pa20, FLAG_STRICT},
{ "ldda",	0x0c001120, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldda",	0x0c001100, 0xfc00d3c0, "cmcc5(b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c000140, 0xfc00d3c0, "cxcdx(b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c000140, 0xfc0013c0, "cxcdx(s,b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c001140, 0xfc00d3c0, "cmcd5(b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c001140, 0xfc0013c0, "cmcd5(s,b),t", pa20, FLAG_STRICT},
{ "stda",	0x0c0013e0, 0xfc00f3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "stda",	0x0c0013c0, 0xfc00d3c0, "cmcCx,V(b)", pa20, FLAG_STRICT},
{ "ldwax",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldwax",	0x0c000180, 0xfc00d3c0, "cxccx(b),t", pa11, FLAG_STRICT},
{ "ldwax",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldcwx",	0x0c0001c0, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
{ "ldcwx",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldcwx",	0x0c0001c0, 0xfc00d3c0, "cxcdx(b),t", pa11, FLAG_STRICT},
{ "ldcwx",	0x0c0001c0, 0xfc0013c0, "cxcdx(s,b),t", pa11, FLAG_STRICT},
{ "ldcwx",	0x0c0001c0, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldcwx",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldws",	0x0c001080, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldws",	0x0c001080, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldws",	0x0c001080, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldhs",	0x0c001040, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldhs",	0x0c001040, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldhs",	0x0c001040, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldbs",	0x0c001000, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldbs",	0x0c001000, 0xfc0013c0, "cmcc5(s,b),t", pa11, FLAG_STRICT},
{ "ldbs",	0x0c001000, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldwas",	0x0c001180, 0xfc00d3c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldcws",	0x0c0011c0, 0xfc00d3c0, "cmcd5(b),t", pa11, FLAG_STRICT},
{ "ldcws",	0x0c0011c0, 0xfc0013c0, "cmcd5(s,b),t", pa11, FLAG_STRICT},
{ "ldcws",	0x0c0011c0, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "stws",	0x0c001280, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stws",	0x0c001280, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stws",	0x0c001280, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "stws",	0x0c001280, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "sths",	0x0c001240, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "sths",	0x0c001240, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "sths",	0x0c001240, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stbs",	0x0c001200, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stbs",	0x0c001200, 0xfc0013c0, "cmcCx,V(s,b)", pa11, FLAG_STRICT},
{ "stbs",	0x0c001200, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "stwas",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
{ "stwas",	0x0c001380, 0xfc00d3c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stwas",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "stdby",	0x0c001340, 0xfc00d3c0, "cscCx,V(b)", pa20, FLAG_STRICT},
{ "stdby",	0x0c001340, 0xfc0013c0, "cscCx,V(s,b)", pa20, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc00dfc0, "cAx,V(b)", pa10, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc00d3c0, "cscCx,V(b)", pa11, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc0013c0, "cscCx,V(s,b)", pa11, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc00dfc0, "cAx,V(b)", pa10, 0},
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, 0},

/* Immediate instructions.  */
{ "ldo",	0x34000000, 0xfc000000, "l(b),x", pa20w, 0},
{ "ldo",	0x34000000, 0xfc00c000, "j(b),x", pa10, 0},
{ "ldil",	0x20000000, 0xfc000000, "k,b", pa10, 0},
{ "addil",	0x28000000, 0xfc000000, "k,b,Z", pa10, 0},
{ "addil",	0x28000000, 0xfc000000, "k,b", pa10, 0},

/* Branching instructions.  */
{ "b",		0xe8008000, 0xfc00e000, "cpnXL", pa20, FLAG_STRICT},
{ "b",		0xe800a000, 0xfc00e000, "clnXL", pa20, FLAG_STRICT},
{ "b",		0xe8000000, 0xfc00e000, "clnW,b", pa10, FLAG_STRICT},
{ "b",		0xe8002000, 0xfc00e000, "cgnW,b", pa10, FLAG_STRICT},
{ "b",		0xe8000000, 0xffe0e000, "nW", pa10, 0},  /* b,l foo,r0 */
{ "bl",		0xe8000000, 0xfc00e000, "nW,b", pa10, 0},
{ "gate",	0xe8002000, 0xfc00e000, "nW,b", pa10, 0},
{ "blr",	0xe8004000, 0xfc00e001, "nx,b", pa10, 0},
{ "bv",		0xe800c000, 0xfc00fffd, "nx(b)", pa10, 0},
{ "bv",		0xe800c000, 0xfc00fffd, "n(b)", pa10, 0},
{ "bve",	0xe800f001, 0xfc1ffffd, "cpn(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800f000, 0xfc1ffffd, "cln(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800d001, 0xfc1ffffd, "cPn(b)", pa20, FLAG_STRICT},
{ "bve",	0xe800d000, 0xfc1ffffd, "n(b)", pa20, FLAG_STRICT},
{ "be",		0xe4000000, 0xfc000000, "clnz(S,b),Y", pa10, FLAG_STRICT},
{ "be",		0xe4000000, 0xfc000000, "clnz(b),Y", pa10, FLAG_STRICT},
{ "be",		0xe0000000, 0xfc000000, "nz(S,b)", pa10, 0},
{ "be",		0xe0000000, 0xfc000000, "nz(b)", pa10, 0},
{ "ble",	0xe4000000, 0xfc000000, "nz(S,b)", pa10, 0},
{ "movb",	0xc8000000, 0xfc000000, "?ynx,b,w", pa10, 0},
{ "movib",	0xcc000000, 0xfc000000, "?yn5,b,w", pa10, 0},
{ "combt",	0x80000000, 0xfc000000, "?tnx,b,w", pa10, 0},
{ "combf",	0x88000000, 0xfc000000, "?tnx,b,w", pa10, 0},
{ "comibt",	0x84000000, 0xfc000000, "?tn5,b,w", pa10, 0},
{ "comibf",	0x8c000000, 0xfc000000, "?tn5,b,w", pa10, 0},
{ "addbt",	0xa0000000, 0xfc000000, "?dnx,b,w", pa10, 0},
{ "addbf",	0xa8000000, 0xfc000000, "?dnx,b,w", pa10, 0},
{ "addibt",	0xa4000000, 0xfc000000, "?dn5,b,w", pa10, 0},
{ "addibf",	0xac000000, 0xfc000000, "?dn5,b,w", pa10, 0},
{ "bb",		0xc0006000, 0xffe06000, "?Bnx,!,w", pa20, FLAG_STRICT}, 
{ "bb",		0xc0004000, 0xffe06000, "?bnx,!,w", pa10, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc004000, "?Bnx,B,w", pa20, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc006000, "?bnx,Q,w", pa10, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc006000, "?bnx,Q,w", pa10, 0}, 
{ "bvb",	0xc0004000, 0xffe04000, "?bnx,w", pa10, 0},
{ "clrbts",	0xe8004005, 0xffffffff, "", pa20, FLAG_STRICT},
{ "popbts",	0xe8004005, 0xfffff007, "$", pa20, FLAG_STRICT},
{ "pushnom",	0xe8004001, 0xffffffff, "", pa20, FLAG_STRICT},
{ "pushbts",	0xe8004001, 0xffe0ffff, "x", pa20, FLAG_STRICT},

/* Computation Instructions.  */

{ "cmpclr",	0x080008a0, 0xfc000fe0, "?Sx,b,t", pa20, FLAG_STRICT},
{ "cmpclr",	0x08000880, 0xfc000fe0, "?sx,b,t", pa10, FLAG_STRICT},
{ "comclr",	0x08000880, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "or",		0x08000260, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "or",		0x08000240, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "xor",	0x080002a0, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "xor",	0x08000280, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "and",	0x08000220, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "and",	0x08000200, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "andcm",	0x08000020, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "andcm",	0x08000000, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "uxor",	0x080003a0, 0xfc000fe0, "?Ux,b,t", pa20, FLAG_STRICT},
{ "uxor",	0x08000380, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "uaddcm",	0x080009a0, 0xfc000fa0, "cT?Ux,b,t", pa20, FLAG_STRICT},
{ "uaddcm",	0x08000980, 0xfc000fa0, "cT?ux,b,t", pa10, FLAG_STRICT},
{ "uaddcm",	0x08000980, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "uaddcmt",	0x080009c0, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "dcor",	0x08000ba0, 0xfc1f0fa0, "ci?Ub,t", pa20, FLAG_STRICT},
{ "dcor",	0x08000b80, 0xfc1f0fa0, "ci?ub,t", pa10, FLAG_STRICT},
{ "dcor",	0x08000b80, 0xfc1f0fe0, "?ub,t",   pa10, 0},
{ "idcor",	0x08000bc0, 0xfc1f0fe0, "?ub,t",   pa10, 0},
{ "addi",	0xb0000000, 0xfc000000, "ct?ai,b,x", pa10, FLAG_STRICT},
{ "addi",	0xb4000000, 0xfc000000, "cv?ai,b,x", pa10, FLAG_STRICT},
{ "addi",	0xb4000000, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addio",	0xb4000800, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addit",	0xb0000000, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addito",	0xb0000800, 0xfc000800, "?ai,b,x", pa10, 0},
{ "add",	0x08000720, 0xfc0007e0, "cY?Ax,b,t", pa20, FLAG_STRICT},
{ "add",	0x08000700, 0xfc0007e0, "cy?ax,b,t", pa10, FLAG_STRICT},
{ "add",	0x08000220, 0xfc0003e0, "ca?Ax,b,t", pa20, FLAG_STRICT},
{ "add",	0x08000200, 0xfc0003e0, "ca?ax,b,t", pa10, FLAG_STRICT},
{ "add",	0x08000600, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addl",	0x08000a00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addo",	0x08000e00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addc",	0x08000700, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addco",	0x08000f00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sub",	0x080004e0, 0xfc0007e0, "ct?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",	0x080004c0, 0xfc0007e0, "ct?sx,b,t", pa10, FLAG_STRICT},
{ "sub",	0x08000520, 0xfc0007e0, "cB?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",	0x08000500, 0xfc0007e0, "cb?sx,b,t", pa10, FLAG_STRICT},
{ "sub",	0x08000420, 0xfc0007e0, "cv?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",	0x08000400, 0xfc0007e0, "cv?sx,b,t", pa10, FLAG_STRICT},
{ "sub",	0x08000400, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subo",	0x08000c00, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subb",	0x08000500, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subbo",	0x08000d00, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subt",	0x080004c0, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subto",	0x08000cc0, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "ds",		0x08000440, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subi",	0x94000000, 0xfc000000, "cv?si,b,x", pa10, FLAG_STRICT},
{ "subi",	0x94000000, 0xfc000800, "?si,b,x", pa10, 0},
{ "subio",	0x94000800, 0xfc000800, "?si,b,x", pa10, 0},
{ "cmpiclr",	0x90000800, 0xfc000800, "?Si,b,x", pa20, FLAG_STRICT},
{ "cmpiclr",	0x90000000, 0xfc000800, "?si,b,x", pa10, FLAG_STRICT},
{ "comiclr",	0x90000000, 0xfc000800, "?si,b,x", pa10, 0},
{ "shladd",	0x08000220, 0xfc000320, "ca?Ax,.,b,t", pa20, FLAG_STRICT},
{ "shladd",	0x08000200, 0xfc000320, "ca?ax,.,b,t", pa10, FLAG_STRICT},
{ "sh1add",	0x08000640, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh1addl",	0x08000a40, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh1addo",	0x08000e40, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2add",	0x08000680, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2addl",	0x08000a80, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2addo",	0x08000e80, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3add",	0x080006c0, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3addl",	0x08000ac0, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3addo",	0x08000ec0, 0xfc000fe0, "?ax,b,t", pa10, 0},

/* Subword Operation Instructions.  */

{ "hadd",	0x08000300, 0xfc00ff20, "cHx,b,t", pa20, FLAG_STRICT},
{ "havg",	0x080002c0, 0xfc00ffe0, "x,b,t", pa20, FLAG_STRICT},
{ "hshl",	0xf8008800, 0xffe0fc20, "x,*,t", pa20, FLAG_STRICT},
{ "hshladd",	0x08000700, 0xfc00ff20, "x,.,b,t", pa20, FLAG_STRICT},
{ "hshr",	0xf800c800, 0xfc1ff820, "cSb,*,t", pa20, FLAG_STRICT},
{ "hshradd",	0x08000500, 0xfc00ff20, "x,.,b,t", pa20, FLAG_STRICT},
{ "hsub",	0x08000100, 0xfc00ff20, "cHx,b,t", pa20, FLAG_STRICT},
{ "mixh",	0xf8008400, 0xfc009fe0, "chx,b,t", pa20, FLAG_STRICT},
{ "mixw",	0xf8008000, 0xfc009fe0, "chx,b,t", pa20, FLAG_STRICT},
{ "permh",	0xf8000000, 0xfc009020, "c*a,t", pa20, FLAG_STRICT},


/* Extract and Deposit Instructions.  */

{ "shrpd",	0xd0000200, 0xfc001fe0, "?Xx,b,!,t", pa20, FLAG_STRICT},
{ "shrpd",	0xd0000400, 0xfc001400, "?Xx,b,~,t", pa20, FLAG_STRICT},
{ "shrpw",	0xd0000000, 0xfc001fe0, "?xx,b,!,t", pa10, FLAG_STRICT},
{ "shrpw",	0xd0000800, 0xfc001c00, "?xx,b,p,t", pa10, FLAG_STRICT},
{ "vshd",	0xd0000000, 0xfc001fe0, "?xx,b,t", pa10, 0},
{ "shd",	0xd0000800, 0xfc001c00, "?xx,b,p,t", pa10, 0},
{ "extrd",	0xd0001200, 0xfc001ae0, "cS?Xb,!,%,x", pa20, FLAG_STRICT},
{ "extrd",	0xd8000000, 0xfc000000, "cS?Xb,q,|,x", pa20, FLAG_STRICT},
{ "extrw",	0xd0001000, 0xfc001be0, "cS?xb,!,T,x", pa10, FLAG_STRICT},
{ "extrw",	0xd0001800, 0xfc001800, "cS?xb,P,T,x", pa10, FLAG_STRICT},
{ "vextru",	0xd0001000, 0xfc001fe0, "?xb,T,x", pa10, 0},
{ "vextrs",	0xd0001400, 0xfc001fe0, "?xb,T,x", pa10, 0},
{ "extru",	0xd0001800, 0xfc001c00, "?xb,P,T,x", pa10, 0},
{ "extrs",	0xd0001c00, 0xfc001c00, "?xb,P,T,x", pa10, 0},
{ "depd",	0xd4000200, 0xfc001ae0, "cz?Xx,!,%,b", pa20, FLAG_STRICT},
{ "depd",	0xf0000000, 0xfc000000, "cz?Xx,~,|,b", pa20, FLAG_STRICT},
{ "depdi",	0xd4001200, 0xfc001ae0, "cz?X5,!,%,b", pa20, FLAG_STRICT},
{ "depdi",	0xf4000000, 0xfc000000, "cz?X5,~,|,b", pa20, FLAG_STRICT},
{ "depw",	0xd4000000, 0xfc001be0, "cz?xx,!,T,b", pa10, FLAG_STRICT},
{ "depw",	0xd4000800, 0xfc001800, "cz?xx,p,T,b", pa10, FLAG_STRICT},
{ "depwi",	0xd4001000, 0xfc001be0, "cz?x5,!,T,b", pa10, FLAG_STRICT},
{ "depwi",	0xd4001800, 0xfc001800, "cz?x5,p,T,b", pa10, FLAG_STRICT},
{ "zvdep",	0xd4000000, 0xfc001fe0, "?xx,T,b", pa10, 0},
{ "vdep",	0xd4000400, 0xfc001fe0, "?xx,T,b", pa10, 0},
{ "zdep",	0xd4000800, 0xfc001c00, "?xx,p,T,b", pa10, 0},
{ "dep",	0xd4000c00, 0xfc001c00, "?xx,p,T,b", pa10, 0},
{ "zvdepi",	0xd4001000, 0xfc001fe0, "?x5,T,b", pa10, 0},
{ "vdepi",	0xd4001400, 0xfc001fe0, "?x5,T,b", pa10, 0},
{ "zdepi",	0xd4001800, 0xfc001c00, "?x5,p,T,b", pa10, 0},
{ "depi",	0xd4001c00, 0xfc001c00, "?x5,p,T,b", pa10, 0},

/* System Control Instructions.  */

{ "break",	0x00000000, 0xfc001fe0, "r,A", pa10, 0},
{ "rfi",	0x00000c00, 0xffffff1f, "cr", pa10, FLAG_STRICT},
{ "rfi",	0x00000c00, 0xffffffff, "", pa10, 0},
{ "rfir",	0x00000ca0, 0xffffffff, "", pa11, 0},
{ "ssm",	0x00000d60, 0xfc00ffe0, "U,t", pa20, FLAG_STRICT},
{ "ssm",	0x00000d60, 0xffe0ffe0, "R,t", pa10, 0},
{ "rsm",	0x00000e60, 0xfc00ffe0, "U,t", pa20, FLAG_STRICT},
{ "rsm",	0x00000e60, 0xffe0ffe0, "R,t", pa10, 0},
{ "mtsm",	0x00001860, 0xffe0ffff, "x", pa10, 0},
{ "ldsid",	0x000010a0, 0xfc1fffe0, "(b),t", pa10, 0},
{ "ldsid",	0x000010a0, 0xfc1f3fe0, "(s,b),t", pa10, 0},
{ "mtsp",	0x00001820, 0xffe01fff, "x,S", pa10, 0},
{ "mtctl",	0x00001840, 0xfc00ffff, "x,^", pa10, 0},
{ "mtsarcm",	0x016018C0, 0xffe0ffff, "x", pa20, FLAG_STRICT},
{ "mfia",	0x000014A0, 0xffffffe0, "t", pa20, FLAG_STRICT},
{ "mfsp",	0x000004a0, 0xffff1fe0, "S,t", pa10, 0},
{ "mfctl",	0x016048a0, 0xffffffe0, "cW!,t", pa20, FLAG_STRICT},
{ "mfctl",	0x000008a0, 0xfc1fffe0, "^,t", pa10, 0},
{ "sync",	0x00000400, 0xffffffff, "", pa10, 0},
{ "syncdma",	0x00100400, 0xffffffff, "", pa10, 0},
{ "probe",	0x04001180, 0xfc00ffa0, "cw(b),x,t", pa10, FLAG_STRICT},
{ "probe",	0x04001180, 0xfc003fa0, "cw(s,b),x,t", pa10, FLAG_STRICT},
{ "probei",	0x04003180, 0xfc00ffa0, "cw(b),R,t", pa10, FLAG_STRICT},
{ "probei",	0x04003180, 0xfc003fa0, "cw(s,b),R,t", pa10, FLAG_STRICT},
{ "prober",	0x04001180, 0xfc00ffe0, "(b),x,t", pa10, 0},
{ "prober",	0x04001180, 0xfc003fe0, "(s,b),x,t", pa10, 0},
{ "proberi",	0x04003180, 0xfc00ffe0, "(b),R,t", pa10, 0},
{ "proberi",	0x04003180, 0xfc003fe0, "(s,b),R,t", pa10, 0},
{ "probew",	0x040011c0, 0xfc00ffe0, "(b),x,t", pa10, 0},
{ "probew",	0x040011c0, 0xfc003fe0, "(s,b),x,t", pa10, 0},
{ "probewi",	0x040031c0, 0xfc00ffe0, "(b),R,t", pa10, 0},
{ "probewi",	0x040031c0, 0xfc003fe0, "(s,b),R,t", pa10, 0},
{ "lpa",	0x04001340, 0xfc00ffc0, "cZx(b),t", pa10, 0},
{ "lpa",	0x04001340, 0xfc003fc0, "cZx(s,b),t", pa10, 0},
{ "lci",	0x04001300, 0xfc00ffe0, "x(b),t", pa11, 0},
{ "lci",	0x04001300, 0xfc003fe0, "x(s,b),t", pa11, 0},
{ "pdtlb",	0x04001600, 0xfc00ffdf, "cLcZx(b)", pa20, FLAG_STRICT},
{ "pdtlb",	0x04001600, 0xfc003fdf, "cLcZx(s,b)", pa20, FLAG_STRICT},
{ "pdtlb",	0x04001600, 0xfc1fffdf, "cLcZ@@(b)", pa20, FLAG_STRICT},
{ "pdtlb",	0x04001600, 0xfc1f3fdf, "cLcZ@@(s,b)", pa20, FLAG_STRICT},
{ "pdtlb",	0x04001200, 0xfc00ffdf, "cZx(b)", pa10, 0},
{ "pdtlb",	0x04001200, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "pitlb",	0x04000600, 0xfc001fdf, "cLcZx(S,b)", pa20, FLAG_STRICT},
{ "pitlb",	0x04000600, 0xfc1f1fdf, "cLcZ@@(S,b)", pa20, FLAG_STRICT},
{ "pitlb",	0x04000200, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "pdtlbe",	0x04001240, 0xfc00ffdf, "cZx(b)", pa10, 0},
{ "pdtlbe",	0x04001240, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "pitlbe",	0x04000240, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "idtlba",	0x04001040, 0xfc00ffff, "x,(b)", pa10, 0},
{ "idtlba",	0x04001040, 0xfc003fff, "x,(s,b)", pa10, 0},
{ "iitlba",	0x04000040, 0xfc001fff, "x,(S,b)", pa10, 0},
{ "idtlbp",	0x04001000, 0xfc00ffff, "x,(b)", pa10, 0},
{ "idtlbp",	0x04001000, 0xfc003fff, "x,(s,b)", pa10, 0},
{ "iitlbp",	0x04000000, 0xfc001fff, "x,(S,b)", pa10, 0},
{ "pdc",	0x04001380, 0xfc00ffdf, "cZx(b)", pa10, 0},
{ "pdc",	0x04001380, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "fdc",	0x04001280, 0xfc00ffdf, "cZx(b)", pa10, FLAG_STRICT},
{ "fdc",	0x04001280, 0xfc003fdf, "cZx(s,b)", pa10, FLAG_STRICT},
{ "fdc",	0x04003280, 0xfc00ffff, "5(b)", pa20, FLAG_STRICT},
{ "fdc",	0x04003280, 0xfc003fff, "5(s,b)", pa20, FLAG_STRICT},
{ "fdc",	0x04001280, 0xfc00ffdf, "cZx(b)", pa10, 0},
{ "fdc",	0x04001280, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "fic",	0x040013c0, 0xfc00dfdf, "cZx(b)", pa20, FLAG_STRICT},
{ "fic",	0x04000280, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "fdce",	0x040012c0, 0xfc00ffdf, "cZx(b)", pa10, 0},
{ "fdce",	0x040012c0, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "fice",	0x040002c0, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "diag",	0x14000000, 0xfc000000, "D", pa10, 0},
{ "idtlbt",	0x04001800, 0xfc00ffff, "x,b", pa20, FLAG_STRICT},
{ "iitlbt",	0x04000800, 0xfc00ffff, "x,b", pa20, FLAG_STRICT},

/* These may be specific to certain versions of the PA.  Joel claimed
   they were 72000 (7200?) specific.  However, I'm almost certain the
   mtcpu/mfcpu were undocumented, but available in the older 700 machines.  */
{ "mtcpu",	0x14001600, 0xfc00ffff, "x,^", pa10, 0},
{ "mfcpu",	0x14001A00, 0xfc00ffff, "^,x", pa10, 0},
{ "tocen",	0x14403600, 0xffffffff, "", pa10, 0},
{ "tocdis",	0x14401620, 0xffffffff, "", pa10, 0},
{ "shdwgr",	0x14402600, 0xffffffff, "", pa10, 0},
{ "grshdw",	0x14400620, 0xffffffff, "", pa10, 0},

/* gfw and gfr are not in the HP PA 1.1 manual, but they are in either
   the Timex FPU or the Mustang ERS (not sure which) manual.  */
{ "gfw",	0x04001680, 0xfc00ffdf, "cZx(b)", pa11, 0},
{ "gfw",	0x04001680, 0xfc003fdf, "cZx(s,b)", pa11, 0},
{ "gfr",	0x04001a80, 0xfc00ffdf, "cZx(b)", pa11, 0},
{ "gfr",	0x04001a80, 0xfc003fdf, "cZx(s,b)", pa11, 0},

/* Floating Point Coprocessor Instructions.  */
 
{ "fldw",	0x24000000, 0xfc00df80, "cXx(b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24000000, 0xfc00d380, "cxccx(b),fT", pa11, FLAG_STRICT},
{ "fldw",	0x24000000, 0xfc001380, "cxccx(s,b),fT", pa11, FLAG_STRICT},
{ "fldw",	0x24001020, 0xfc1ff3a0, "cocc@@(b),fT", pa20, FLAG_STRICT},
{ "fldw",	0x24001020, 0xfc1f33a0, "cocc@@(s,b),fT", pa20, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc00df80, "cM5(b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc001f80, "cM5(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc00d380, "cmcc5(b),fT", pa11, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc001380, "cmcc5(s,b),fT", pa11, FLAG_STRICT},
{ "fldw",	0x5c000000, 0xfc000004, "y(b),fe", pa20w, FLAG_STRICT},
{ "fldw",	0x58000000, 0xfc000000, "cJy(b),fe", pa20w, FLAG_STRICT},
{ "fldw",	0x5c000000, 0xfc00c004, "d(b),fe", pa20, FLAG_STRICT},
{ "fldw",	0x5c000000, 0xfc000004, "d(s,b),fe", pa20, FLAG_STRICT},
{ "fldw",	0x58000000, 0xfc00c000, "cJd(b),fe", pa20, FLAG_STRICT},
{ "fldw",	0x58000000, 0xfc000000, "cJd(s,b),fe", pa20, FLAG_STRICT},
{ "fldd",	0x2c000000, 0xfc00dfc0, "cXx(b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c000000, 0xfc00d3c0, "cxccx(b),ft", pa11, FLAG_STRICT},
{ "fldd",	0x2c000000, 0xfc0013c0, "cxccx(s,b),ft", pa11, FLAG_STRICT},
{ "fldd",	0x2c001020, 0xfc1ff3e0, "cocc@@(b),ft", pa20, FLAG_STRICT},
{ "fldd",	0x2c001020, 0xfc1f33e0, "cocc@@(s,b),ft", pa20, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc00dfc0, "cM5(b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc001fc0, "cM5(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc00d3c0, "cmcc5(b),ft", pa11, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc0013c0, "cmcc5(s,b),ft", pa11, FLAG_STRICT},
{ "fldd",	0x50000002, 0xfc000002, "cq&(b),fx", pa20w, FLAG_STRICT},
{ "fldd",	0x50000002, 0xfc00c002, "cq#(b),fx", pa20, FLAG_STRICT},
{ "fldd",	0x50000002, 0xfc000002, "cq#(s,b),fx", pa20, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc00df80, "cXfT,x(b)", pa10, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc001f80, "cXfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc00d380, "cxcCfT,x(b)", pa11, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc001380, "cxcCfT,x(s,b)", pa11, FLAG_STRICT},
{ "fstw",	0x24001220, 0xfc1ff3a0, "cocCfT,@@(b)", pa20, FLAG_STRICT},
{ "fstw",	0x24001220, 0xfc1f33a0, "cocCfT,@@(s,b)", pa20, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc00df80, "cMfT,5(b)", pa10, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc001f80, "cMfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc00df80, "cMfT,5(b)", pa10, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc001f80, "cMfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x7c000000, 0xfc000004, "fE,y(b)", pa20w, FLAG_STRICT},
{ "fstw",	0x78000000, 0xfc000000, "cJfE,y(b)", pa20w, FLAG_STRICT},
{ "fstw",	0x7c000000, 0xfc00c004, "fE,d(b)", pa20, FLAG_STRICT},
{ "fstw",	0x7c000000, 0xfc000004, "fE,d(s,b)", pa20, FLAG_STRICT},
{ "fstw",	0x78000000, 0xfc00c000, "cJfE,d(b)", pa20, FLAG_STRICT},
{ "fstw",	0x78000000, 0xfc000000, "cJfE,d(s,b)", pa20, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc00dfc0, "cXft,x(b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc001fc0, "cXft,x(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc00d3c0, "cxcCft,x(b)", pa11, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc0013c0, "cxcCft,x(s,b)", pa11, FLAG_STRICT},
{ "fstd",	0x2c001220, 0xfc1ff3e0, "cocCft,@@(b)", pa20, FLAG_STRICT},
{ "fstd",	0x2c001220, 0xfc1f33e0, "cocCft,@@(s,b)", pa20, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc00dfc0, "cMft,5(b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc001fc0, "cMft,5(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc00d3c0, "cmcCft,5(b)", pa11, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc0013c0, "cmcCft,5(s,b)", pa11, FLAG_STRICT},
{ "fstd",	0x70000002, 0xfc000002, "cqfx,&(b)", pa20w, FLAG_STRICT},
{ "fstd",	0x70000002, 0xfc00c002, "cqfx,#(b)", pa20, FLAG_STRICT},
{ "fstd",	0x70000002, 0xfc000002, "cqfx,#(s,b)", pa20, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc00df80, "cXx(b),fT", pa10, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc00d380, "cxccx(b),fT", pa11, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc001380, "cxccx(s,b),fT", pa11, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc00df80, "cXx(b),fT", pa10, 0},
{ "fldwx",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, 0},
{ "flddx",	0x2c000000, 0xfc00dfc0, "cXx(b),ft", pa10, FLAG_STRICT},
{ "flddx",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, FLAG_STRICT},
{ "flddx",	0x2c000000, 0xfc00d3c0, "cxccx(b),ft", pa11, FLAG_STRICT},
{ "flddx",	0x2c000000, 0xfc0013c0, "cxccx(s,b),ft", pa11, FLAG_STRICT},
{ "flddx",	0x2c000000, 0xfc00dfc0, "cXx(b),ft", pa10, 0},
{ "flddx",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, 0},
{ "fstwx",	0x24000200, 0xfc00df80, "cxfT,x(b)", pa10, FLAG_STRICT},
{ "fstwx",	0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstwx",	0x24000200, 0xfc00d380, "cxcCfT,x(b)", pa11, FLAG_STRICT},
{ "fstwx",	0x24000200, 0xfc001380, "cxcCfT,x(s,b)", pa11, FLAG_STRICT},
{ "fstwx",	0x24000200, 0xfc00df80, "cxfT,x(b)", pa10, 0},
{ "fstwx",	0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, 0},
{ "fstdx",	0x2c000200, 0xfc00dfc0, "cxft,x(b)", pa10, FLAG_STRICT},
{ "fstdx",	0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, FLAG_STRICT},
{ "fstdx",	0x2c000200, 0xfc00d3c0, "cxcCft,x(b)", pa11, FLAG_STRICT},
{ "fstdx",	0x2c000200, 0xfc0013c0, "cxcCft,x(s,b)", pa11, FLAG_STRICT},
{ "fstdx",	0x2c000200, 0xfc00dfc0, "cxft,x(b)", pa10, 0},
{ "fstdx",	0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, 0},
{ "fstqx",	0x3c000200, 0xfc00dfc0, "cXft,x(b)", pa10, 0},
{ "fstqx",	0x3c000200, 0xfc001fc0, "cXft,x(s,b)", pa10, 0},
{ "fldws",	0x24001000, 0xfc00df80, "cm5(b),fT", pa10, FLAG_STRICT},
{ "fldws",	0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, FLAG_STRICT},
{ "fldws",	0x24001000, 0xfc00d380, "cmcc5(b),fT", pa11, FLAG_STRICT},
{ "fldws",	0x24001000, 0xfc001380, "cmcc5(s,b),fT", pa11, FLAG_STRICT},
{ "fldws",	0x24001000, 0xfc00df80, "cm5(b),fT", pa10, 0},
{ "fldws",	0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, 0},
{ "fldds",	0x2c001000, 0xfc00dfc0, "cm5(b),ft", pa10, FLAG_STRICT},
{ "fldds",	0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, FLAG_STRICT},
{ "fldds",	0x2c001000, 0xfc00d3c0, "cmcc5(b),ft", pa11, FLAG_STRICT},
{ "fldds",	0x2c001000, 0xfc0013c0, "cmcc5(s,b),ft", pa11, FLAG_STRICT},
{ "fldds",	0x2c001000, 0xfc00dfc0, "cm5(b),ft", pa10, 0},
{ "fldds",	0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, 0},
{ "fstws",	0x24001200, 0xfc00df80, "cmfT,5(b)", pa10, FLAG_STRICT},
{ "fstws",	0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstws",	0x24001200, 0xfc00d380, "cmcCfT,5(b)", pa11, FLAG_STRICT},
{ "fstws",	0x24001200, 0xfc001380, "cmcCfT,5(s,b)", pa11, FLAG_STRICT},
{ "fstws",	0x24001200, 0xfc00df80, "cmfT,5(b)", pa10, 0},
{ "fstws",	0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, 0},
{ "fstds",	0x2c001200, 0xfc00dfc0, "cmft,5(b)", pa10, FLAG_STRICT},
{ "fstds",	0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, FLAG_STRICT},
{ "fstds",	0x2c001200, 0xfc00d3c0, "cmcCft,5(b)", pa11, FLAG_STRICT},
{ "fstds",	0x2c001200, 0xfc0013c0, "cmcCft,5(s,b)", pa11, FLAG_STRICT},
{ "fstds",	0x2c001200, 0xfc00dfc0, "cmft,5(b)", pa10, 0},
{ "fstds",	0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, 0},
{ "fstqs",	0x3c001200, 0xfc00dfc0, "cMft,5(b)", pa10, 0},
{ "fstqs",	0x3c001200, 0xfc001fc0, "cMft,5(s,b)", pa10, 0},
{ "fadd",	0x30000600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fadd",	0x38000600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fsub",	0x30002600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fsub",	0x38002600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fmpy",	0x30004600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fmpy",	0x38004600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fdiv",	0x30006600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fdiv",	0x38006600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fsqrt",	0x30008000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fsqrt",	0x38008000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fabs",	0x30006000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fabs",	0x38006000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "frem",	0x30008600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "frem",	0x38008600, 0xfc00e720, "FfA,fB,fT", pa10, 0},
{ "frnd",	0x3000a000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "frnd",	0x3800a000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fcpy",	0x30004000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fcpy",	0x38004000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fcnvff",	0x30000200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvff",	0x38000200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvxf",	0x30008200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvxf",	0x38008200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvfx",	0x30010200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvfx",	0x38010200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvfxt",	0x30018200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvfxt",	0x38018200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fmpyfadd",	0xb8000000, 0xfc000020, "IfA,fB,fC,fT", pa20, FLAG_STRICT},
{ "fmpynfadd",	0xb8000020, 0xfc000020, "IfA,fB,fC,fT", pa20, FLAG_STRICT},
{ "fneg",	0x3000c000, 0xfc1fe7e0, "Ffa,fT", pa20, FLAG_STRICT},
{ "fneg",	0x3800c000, 0xfc1fe720, "IfA,fT", pa20, FLAG_STRICT},
{ "fnegabs",	0x3000e000, 0xfc1fe7e0, "Ffa,fT", pa20, FLAG_STRICT},
{ "fnegabs",	0x3800e000, 0xfc1fe720, "IfA,fT", pa20, FLAG_STRICT},
{ "fcnv",	0x30000200, 0xfc1c0720, "{_fa,fT", pa20, FLAG_STRICT},
{ "fcnv",	0x38000200, 0xfc1c0720, "FGfA,fT", pa20, FLAG_STRICT},
{ "fcmp",	0x30000400, 0xfc00e7e0, "F?ffa,fb", pa10, FLAG_STRICT},
{ "fcmp",	0x38000400, 0xfc00e720, "I?ffA,fB", pa10, FLAG_STRICT},
{ "fcmp",	0x30000400, 0xfc0007e0, "F?ffa,fb,h", pa20, FLAG_STRICT},
{ "fcmp",	0x38000400, 0xfc000720, "I?ffA,fB,h", pa20, FLAG_STRICT},
{ "fcmp",	0x30000400, 0xfc00e7e0, "F?ffa,fb", pa10, 0},
{ "fcmp",	0x38000400, 0xfc00e720, "I?ffA,fB", pa10, 0},
{ "xmpyu",	0x38004700, 0xfc00e720, "fX,fB,fT", pa11, 0},
{ "fmpyadd",	0x18000000, 0xfc000000, "Hfi,fj,fk,fl,fm", pa11, 0},
{ "fmpysub",	0x98000000, 0xfc000000, "Hfi,fj,fk,fl,fm", pa11, 0},
{ "ftest",	0x30002420, 0xffffffff, "", pa10, FLAG_STRICT},
{ "ftest",	0x30002420, 0xffffffe0, ",=", pa20, FLAG_STRICT},
{ "ftest",	0x30000420, 0xffff1fff, "m", pa20, FLAG_STRICT},
{ "fid",	0x30000000, 0xffffffff, "", pa11, 0},

/* Performance Monitor Instructions.  */

{ "pmdis",	0x30000280, 0xffffffdf, "N", pa20, FLAG_STRICT},
{ "pmenb",	0x30000680, 0xffffffff, "", pa20, FLAG_STRICT},

/* Assist Instructions.  */

{ "spop0",	0x10000000, 0xfc000600, "v,ON", pa10, 0},
{ "spop1",	0x10000200, 0xfc000600, "v,oNt", pa10, 0},
{ "spop2",	0x10000400, 0xfc000600, "v,1Nb", pa10, 0},
{ "spop3",	0x10000600, 0xfc000600, "v,0Nx,b", pa10, 0},
{ "copr",	0x30000000, 0xfc000000, "u,2N", pa10, 0},
{ "cldw",	0x24000000, 0xfc00de00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24000000, 0xfc00d200, "ucxccx(b),t", pa11, FLAG_STRICT},
{ "cldw",	0x24000000, 0xfc001200, "ucxccx(s,b),t", pa11, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc00d200, "ucocc@@(b),t", pa20, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001200, "ucocc@@(s,b),t", pa20, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc00de00, "ucM5(b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc00d200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001200, "ucmcc5(s,b),t", pa11, FLAG_STRICT},
{ "cldd",	0x2c000000, 0xfc00de00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c000000, 0xfc00d200, "ucxccx(b),t", pa11, FLAG_STRICT},
{ "cldd",	0x2c000000, 0xfc001200, "ucxccx(s,b),t", pa11, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc00d200, "ucocc@@(b),t", pa20, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001200, "ucocc@@(s,b),t", pa20, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc00de00, "ucM5(b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc00d200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001200, "ucmcc5(s,b),t", pa11, FLAG_STRICT},
{ "cstw",	0x24000200, 0xfc00de00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstw",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstw",	0x24000200, 0xfc00d200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
{ "cstw",	0x24000200, 0xfc001200, "ucxcCt,x(s,b)", pa11, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc00d200, "ucocCt,@@(b)", pa20, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001200, "ucocCt,@@(s,b)", pa20, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc00de00, "ucMt,5(b)", pa10, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc00d200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001200, "ucmcCt,5(s,b)", pa11, FLAG_STRICT},
{ "cstd",	0x2c000200, 0xfc00de00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c000200, 0xfc00d200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
{ "cstd",	0x2c000200, 0xfc001200, "ucxcCt,x(s,b)", pa11, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc00d200, "ucocCt,@@(b)", pa20, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001200, "ucocCt,@@(s,b)", pa20, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc00de00, "ucMt,5(b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc00d200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001200, "ucmcCt,5(s,b)", pa11, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc00de00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc00d200, "ucxccx(b),t", pa11, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc001200, "ucxccx(s,b),t", pa11, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc00de00, "ucXx(b),t", pa10, 0},
{ "cldwx",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
{ "clddx",	0x2c000000, 0xfc00de00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "clddx",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "clddx",	0x2c000000, 0xfc00d200, "ucxccx(b),t", pa11, FLAG_STRICT},
{ "clddx",	0x2c000000, 0xfc001200, "ucxccx(s,b),t", pa11, FLAG_STRICT},
{ "clddx",	0x2c000000, 0xfc00de00, "ucXx(b),t", pa10, 0},
{ "clddx",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
{ "cstwx",	0x24000200, 0xfc00de00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstwx",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstwx",	0x24000200, 0xfc00d200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
{ "cstwx",	0x24000200, 0xfc001200, "ucxcCt,x(s,b)", pa11, FLAG_STRICT},
{ "cstwx",	0x24000200, 0xfc00de00, "ucXt,x(b)", pa10, 0},
{ "cstwx",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
{ "cstdx",	0x2c000200, 0xfc00de00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstdx",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstdx",	0x2c000200, 0xfc00d200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
{ "cstdx",	0x2c000200, 0xfc001200, "ucxcCt,x(s,b)", pa11, FLAG_STRICT},
{ "cstdx",	0x2c000200, 0xfc00de00, "ucXt,x(b)", pa10, 0},
{ "cstdx",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
{ "cldws",	0x24001000, 0xfc00de00, "ucM5(b),t", pa10, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc00d200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc001200, "ucmcc5(s,b),t", pa11, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc00de00, "ucM5(b),t", pa10, 0},
{ "cldws",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cldds",	0x2c001000, 0xfc00de00, "ucM5(b),t", pa10, FLAG_STRICT},
{ "cldds",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldds",	0x2c001000, 0xfc00d200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldds",	0x2c001000, 0xfc001200, "ucmcc5(s,b),t", pa11, FLAG_STRICT},
{ "cldds",	0x2c001000, 0xfc00de00, "ucM5(b),t", pa10, 0},
{ "cldds",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cstws",	0x24001200, 0xfc00de00, "ucMt,5(b)", pa10, FLAG_STRICT},
{ "cstws",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstws",	0x24001200, 0xfc00d200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstws",	0x24001200, 0xfc001200, "ucmcCt,5(s,b)", pa11, FLAG_STRICT},
{ "cstws",	0x24001200, 0xfc00de00, "ucMt,5(b)", pa10, 0},
{ "cstws",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},
{ "cstds",	0x2c001200, 0xfc00de00, "ucMt,5(b)", pa10, FLAG_STRICT},
{ "cstds",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstds",	0x2c001200, 0xfc00d200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstds",	0x2c001200, 0xfc001200, "ucmcCt,5(s,b)", pa11, FLAG_STRICT},
{ "cstds",	0x2c001200, 0xfc00de00, "ucMt,5(b)", pa10, 0},
{ "cstds",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},

/* More pseudo instructions which must follow the main table.  */
{ "call",	0xe800f000, 0xfc1ffffd, "n(b)", pa20, FLAG_STRICT},
{ "call",	0xe800a000, 0xffe0e000, "nW", pa10, FLAG_STRICT},
{ "ret",	0xe840d000, 0xfffffffd, "n", pa20, FLAG_STRICT},

};

#define NUMOPCODES ((sizeof pa_opcodes)/(sizeof pa_opcodes[0]))

/* SKV 12/18/92. Added some denotations for various operands.  */

#define PA_IMM11_AT_31 'i'
#define PA_IMM14_AT_31 'j'
#define PA_IMM21_AT_31 'k'
#define PA_DISP12 'w'
#define PA_DISP17 'W'

#define N_HPPA_OPERAND_FORMATS 5
@


1.69
log
@	PR gas/11395
	* config/tc-hppa.c (pa_ip): Revert last change.  Add variable need_cond
	to determine whether a 64-bit condition is needed for 'A' and 'S'
	conditions.  Default to 32-bit never condition for logical and unit
	instructions.  Add error message for missing branch on bit condition.

	* hppa.h (pa_opcodes): Revert last change.  Exchange 32 and 64-bit
	"bb" entries.

	* hppa-dis.c (compare_cond_64_names): Change never condition to ",*".
	(add_cond_64_names): Likewise.
	(logical_cond_64_names): Likewise.
	(unit_cond_64_names): Likewise.
@
text
@d898 2
a899 2
{ "fstqx",	0x3c000200, 0xfc00dfc0, "cxft,x(b)", pa10, 0},
{ "fstqx",	0x3c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, 0},
d924 2
a925 2
{ "fstqs",	0x3c001200, 0xfc00dfc0, "cmft,5(b)", pa10, 0},
{ "fstqs",	0x3c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, 0},
@


1.68
log
@	PR gas/11395
	* config/tc-hppa.c (pa_ip): Set doubleword carry/borrow bit when a
	doubleword completer or doubleword condition is found in an add/sub
	instruction.  Reject match for 'A'/'S' only if there is no condition
	and d bit is not set.

	* gas/hppa/basic/add2.s: Add test for a simple doubleword carry
	instruction.
	* gas/hppa/basic/sub2.s: Add tests for simple word and doubleword
	borrow instructions.
	* gas/hppa/basic/basic.exp: Update regexps for above.

	* opcode/hppa.h: Clear "d" bit in "add" and "sub" patterns.
@
text
@d597 1
d599 1
a599 1
{ "bb",		0xc0006000, 0xffe06000, "?Bnx,!,w", pa20, FLAG_STRICT}, 
a600 1
{ "bb",		0xc4004000, 0xfc004000, "?Bnx,B,w", pa20, FLAG_STRICT}, 
d637 1
a637 1
{ "add",	0x08000700, 0xfc0007e0, "cY?Ax,b,t", pa20, FLAG_STRICT},
d639 1
a639 1
{ "add",	0x08000200, 0xfc0003e0, "ca?Ax,b,t", pa20, FLAG_STRICT},
d646 1
a646 1
{ "sub",	0x080004c0, 0xfc0007e0, "ct?Sx,b,t", pa20, FLAG_STRICT},
d648 1
a648 1
{ "sub",	0x08000500, 0xfc0007e0, "cB?Sx,b,t", pa20, FLAG_STRICT},
d650 1
a650 1
{ "sub",	0x08000400, 0xfc0007e0, "cv?Sx,b,t", pa20, FLAG_STRICT},
@


1.67
log
@Upgrade header files to use GPLv3
@
text
@d637 1
a637 1
{ "add",	0x08000720, 0xfc0007e0, "cY?Ax,b,t", pa20, FLAG_STRICT},
d639 1
a639 1
{ "add",	0x08000220, 0xfc0003e0, "ca?Ax,b,t", pa20, FLAG_STRICT},
d646 1
a646 1
{ "sub",	0x080004e0, 0xfc0007e0, "ct?Sx,b,t", pa20, FLAG_STRICT},
d648 1
a648 1
{ "sub",	0x08000520, 0xfc0007e0, "cB?Sx,b,t", pa20, FLAG_STRICT},
d650 1
a650 1
{ "sub",	0x08000420, 0xfc0007e0, "cv?Sx,b,t", pa20, FLAG_STRICT},
@


1.67.4.1
log
@	Backport from mainline:
	2010-12-31  John David Anglin  <dave.anglin@@nrc-cnrc.gc.ca>

	PR gas/11395
	* hppa.h (pa_opcodes): Exchange 32 and 64-bit "bb" entries.
@
text
@d597 1
d599 1
a599 1
{ "bb",		0xc0004000, 0xffe06000, "?bnx,!,w", pa10, FLAG_STRICT}, 
a600 1
{ "bb",		0xc4004000, 0xfc006000, "?bnx,Q,w", pa10, FLAG_STRICT}, 
@


1.66
log
@update copyright dates
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2009
d9 1
a9 1
This file is part of GAS, the GNU Assembler, and GDB, the GNU disassembler.
d11 14
a24 13
GAS/GDB is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

GAS/GDB is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GAS or GDB; see the file COPYING.  If not, write to
the Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.65
log
@hppa.h (pa_opcodes): Add a pa10 bb without FLAG_STRICT.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005
@


1.64
log
@	* hppa.h (pa_opcodes): Reorder bb opcodes so that pa10 opcodes come
	first.  Correct mask of bb "B" opcode.
@
text
@d600 1
@


1.63
log
@	* hppa.h (pa_opcodes): Add two fcmp opcodes.  Reorder ftest opcodes.
	Add FLAG_STRICT to pa10 ftest opcode.
@
text
@d596 1
d598 1
a599 2
{ "bb",		0xc0004000, 0xffe06000, "?bnx,!,w", pa10, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc004000, "?bnx,Q,w", pa10, 0}, 
@


1.62
log
@	* gas/hppa/basic/basic.exp (do_system): Adjust for removal of lha
	instructions from system.s.
	* gas/hppa/basic/system.s (lha): Remove.

	* hppa.h (pa_opcodes): Remove lha entries.
@
text
@d958 2
d967 1
a969 1
{ "ftest",	0x30002420, 0xffffffff, "", pa10, 0},
@


1.61
log
@	* config/tc-hppa.c (strict): Don't initialize.  Update comment.
	(pa_ip): Promote from PA 1.0 to 1.1 immediately when 1.1 match is
	found.  Simplify handling of "ma" and "mb" completers.

	* hppa.h (FLAG_STRICT): Revise comment.
	(pa_opcode): Revise ordering rules.  Add/move strict pa10 variants
	before corresponding pa11 opcodes.  Add strict pa10 register-immediate
	entries for "fdc".
@
text
@d758 2
a759 4
{ "lha",	0x04001300, 0xfc00ffc0, "cZx(b),t", pa10, 0},
{ "lha",	0x04001300, 0xfc003fc0, "cZx(s,b),t", pa10, 0},
{ "lci",	0x04001300, 0xfc00ffe0, "x(b),t", pa10, 0},
{ "lci",	0x04001300, 0xfc003fe0, "x(s,b),t", pa10, 0},
@


1.60
log
@	* hppa.h (pa_opcodes): Add new "fdc" and "fic" opcode entries.
@
text
@d51 2
a52 6
/* Enable/disable strict syntax checking.  When strict syntax checking
   is not used, out-of-range immediate fields can result in an error,
   depending on the specific immediate range being matched.  An immediate
   value of zero is also accepted as equivalent to index register 0.
   As a result, non-strict opcode entries must be ordered from largest
   to smallest immediate range.  */
d172 3
a174 3
   cx   indexed load completer.
   cX   indexed load completer.  Like cx, but emits a space after
        in disassembler.
d286 5
a293 3
   Strict syntax (FLAG_STRICT) should be used for pa11 opcodes
   and later.

d296 2
a297 1
   1) Opcodes with FLAG_STRICT precede opcodes without FLAG_STRICT,
d301 10
a310 10
      long immediate opcodes.  Where there are opcodes for more
      than one architecture in any of these groups, the opcodes
      for the higher architecture should come first,

   3) Where implicit addressing is available for an opcode, the
      implicit opcode should precede the explicit opcode, and

   4) Opcodes without FLAG_STRICT should be ordered as follows: long
      immediate opcodes, short immediate opcodes and finally register
      index opcodes.  */
d357 2
d363 2
d372 2
a373 2
{ "ldw",	0x4c000000, 0xfc00c000, "ceJ(b),x", pa10, 0},
{ "ldw",	0x4c000000, 0xfc000000, "ceJ(s,b),x", pa10, 0},
d376 2
a377 4
{ "ldw",	0x0c001080, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldw",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldw",	0x0c000080, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldw",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
d382 2
d389 2
a390 4
{ "ldh",	0x0c001040, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldh",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldh",	0x0c000040, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldh",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
d395 2
a401 4
{ "ldb",	0x0c001000, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldb",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldb",	0x0c000000, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldb",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
d411 2
d420 2
a421 2
{ "stw",	0x6c000000, 0xfc00c000, "cex,J(b)", pa10, 0},
{ "stw",	0x6c000000, 0xfc000000, "cex,J(s,b)", pa10, 0},
a423 2
{ "stw",	0x0c001280, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "stw",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
d426 2
a432 2
{ "sth",	0x0c001240, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "sth",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
d435 2
a441 2
{ "stb",	0x0c001200, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
{ "stb",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
d446 2
d452 2
d458 2
d464 1
d467 1
d469 2
a470 2
{ "ldwa",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldwa",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, 0},
d473 2
a476 4
{ "ldcw",	0x0c0011c0, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldcw",	0x0c0001c0, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldcw",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
d478 1
d480 2
a481 1
{ "stwa",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
a483 2
{ "stby",	0x0c001300, 0xfc00dfc0, "cAx,V(b)", pa10, 0},
{ "stby",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, 0},
d493 1
d496 2
d502 2
d508 2
d514 2
d520 1
d523 2
d529 2
d535 2
d541 2
d547 1
d552 2
d782 2
d816 2
d822 2
d832 2
a833 4
{ "fldw",	0x24001000, 0xfc00df80, "cM5(b),fT", pa10, 0},
{ "fldw",	0x24001000, 0xfc001f80, "cM5(s,b),fT", pa10, 0},
{ "fldw",	0x24000000, 0xfc00df80, "cXx(b),fT", pa10, 0},
{ "fldw",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, 0},
d838 2
d845 2
a846 4
{ "fldd",	0x2c001000, 0xfc00dfc0, "cM5(b),ft", pa10, 0},
{ "fldd",	0x2c001000, 0xfc001fc0, "cM5(s,b),ft", pa10, 0},
{ "fldd",	0x2c000000, 0xfc00dfc0, "cXx(b),ft", pa10, 0},
{ "fldd",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, 0},
d853 2
d861 2
a862 4
{ "fstw",	0x24001200, 0xfc00df80, "cMfT,5(b)", pa10, 0},
{ "fstw",	0x24001200, 0xfc001f80, "cMfT,5(s,b)", pa10, 0},
{ "fstw",	0x24000200, 0xfc00df80, "cXfT,x(b)", pa10, 0},
{ "fstw",	0x24000200, 0xfc001f80, "cXfT,x(s,b)", pa10, 0},
d867 2
d874 2
a875 4
{ "fstd",	0x2c001200, 0xfc00dfc0, "cMft,5(b)", pa10, 0},
{ "fstd",	0x2c001200, 0xfc001fc0, "cMft,5(s,b)", pa10, 0},
{ "fstd",	0x2c000200, 0xfc00dfc0, "cXft,x(b)", pa10, 0},
{ "fstd",	0x2c000200, 0xfc001fc0, "cXft,x(s,b)", pa10, 0},
d880 2
d886 2
d892 2
d900 2
d906 2
d912 2
d918 2
d984 2
d990 2
d994 2
a995 4
{ "cldw",	0x24001000, 0xfc00de00, "ucM5(b),t", pa10, 0},
{ "cldw",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cldw",	0x24000000, 0xfc00de00, "ucXx(b),t", pa10, 0},
{ "cldw",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
d1000 2
d1004 2
a1005 4
{ "cldd",	0x2c001000, 0xfc00de00, "ucM5(b),t", pa10, 0},
{ "cldd",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cldd",	0x2c000000, 0xfc00de00, "ucXx(b),t", pa10, 0},
{ "cldd",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
d1010 2
d1014 2
a1015 4
{ "cstw",	0x24001200, 0xfc00de00, "ucMt,5(b)", pa10, 0},
{ "cstw",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},
{ "cstw",	0x24000200, 0xfc00de00, "ucXt,x(b)", pa10, 0},
{ "cstw",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
d1020 2
d1024 2
a1025 4
{ "cstd",	0x2c001200, 0xfc00de00, "ucMt,5(b)", pa10, 0},
{ "cstd",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},
{ "cstd",	0x2c000200, 0xfc00de00, "ucXt,x(b)", pa10, 0},
{ "cstd",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
d1030 2
d1036 2
d1042 2
d1048 2
d1054 2
d1060 2
d1066 2
@


1.59
log
@	* hppa.h: Update copyright dates.
@
text
@d309 1
a309 1
   4) Opcodes without FLAG_STRICT should be order as follows: long
d756 2
d760 1
@


1.58
log
@	PR gas/336
 	* hppa.h (pa_opcodes): Allow 0 immediates in PA 2.0 variants of pdtlb
	and pitlb.
@
text
@d3 1
a3 1
   2001, 2002, 2003
@


1.57
log
@	* hppa.h: Fix punctuation in comment.
@
text
@d738 2
d743 1
@


1.56
log
@	* hppa.h (pa_opcode):  Add rules for opcode ordering.  Check first for
	implicit space-register addressing.  Set space-register bits on opcodes
	using implicit space-register addressing.  Add various missing pa20
	long-immediate opcodes.  Remove various opcodes using implicit 3-bit
	space-register addressing.  Use "fE" instead of "fe" in various
	fstw opcodes.
@
text
@d304 1
a304 1
      for the higher architecture should come first.
d307 1
a307 1
      implicit opcode should precede the explicit opcode.
@


1.55
log
@	* hppa.h (pa_opcode): Don't set FLAG_STRICT in pa10 loads and stores.
@
text
@d52 1
a52 1
   isn't used, out-of-range immediate fields can result in an error,
d287 2
a288 2
   * The assembler requires that all instances of the same mnemonic must be
   consecutive.  If they aren't, the assembler will bomb at runtime.
d290 2
a291 1
   * The disassembler should not care about the order of the opcodes.  */
d293 20
d349 3
d353 1
a353 3
{ "ldd",	0x0c0010e0, 0xfc1f33e0, "cocc@@(b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0000c0, 0xfc0013c0, "cxccx(s,b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0000c0, 0xfc0013c0, "cxccx(b),t", pa20, FLAG_STRICT},
a354 1
{ "ldd",	0x0c0010c0, 0xfc0013c0, "cmcc5(b),t", pa20, FLAG_STRICT},
d356 3
a358 1
{ "ldd",	0x50000000, 0xfc000002, "cq#(b),x", pa20, FLAG_STRICT},
d360 3
a362 1
{ "ldw",	0x0c000080, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
a363 3
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldw",	0x0c0010a0, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldw",	0x0c0010a0, 0xfc1f33e0, "cocc@@(b),t", pa20, FLAG_STRICT},
d366 2
d369 1
a369 2
{ "ldw",	0x5c000004, 0xfc000006, "ceK(b),x", pa20, FLAG_STRICT},
{ "ldw",	0x48000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
d371 1
a371 1
{ "ldw",	0x4c000000, 0xfc000000, "ceJ(b),x", pa10, 0},
d373 1
a373 1
{ "ldw",	0x48000000, 0xfc000000, "j(b),x", pa10, 0},
d375 1
a375 1
{ "ldw",	0x0c001080, 0xfc001fc0, "cM5(b),t", pa10, 0},
d377 1
a377 1
{ "ldw",	0x0c000080, 0xfc001fc0, "cXx(b),t", pa10, 0},
d379 3
a381 1
{ "ldh",	0x0c000040, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
a382 3
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldh",	0x0c001060, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldh",	0x0c001060, 0xfc1f33e0, "cocc@@(b),t", pa20, FLAG_STRICT},
d384 1
d386 1
a386 1
{ "ldh",	0x44000000, 0xfc000000, "j(b),x", pa10, 0},
d388 1
a388 1
{ "ldh",	0x0c001040, 0xfc001fc0, "cM5(b),t", pa10, 0},
d390 1
a390 1
{ "ldh",	0x0c000040, 0xfc001fc0, "cXx(b),t", pa10, 0},
d392 3
a394 1
{ "ldb",	0x0c000000, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
a395 3
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
{ "ldb",	0x0c001020, 0xfc1f33e0, "cocc@@(s,b),t", pa20, FLAG_STRICT},
{ "ldb",	0x0c001020, 0xfc1f33e0, "cocc@@(b),t", pa20, FLAG_STRICT},
d397 1
d399 1
a399 1
{ "ldb",	0x40000000, 0xfc000000, "j(b),x", pa10, 0},
d401 1
a401 1
{ "ldb",	0x0c001000, 0xfc001fc0, "cM5(b),t", pa10, 0},
d403 1
a403 1
{ "ldb",	0x0c000000, 0xfc001fc0, "cXx(b),t", pa10, 0},
d405 1
a405 1
{ "std",	0x0c0012e0, 0xfc0033ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
a406 1
{ "std",	0x0c0012c0, 0xfc0013c0, "cmcCx,V(b)", pa20, FLAG_STRICT},
d408 5
a412 1
{ "std",	0x70000000, 0xfc000002, "cqx,#(b)", pa20, FLAG_STRICT},
a413 3
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stw",	0x0c0012a0, 0xfc0013ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "stw",	0x0c0012a0, 0xfc0013ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
d416 2
d419 1
a419 2
{ "stw",	0x7c000004, 0xfc000006, "cex,K(b)", pa20, FLAG_STRICT},
{ "stw",	0x68000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
d421 1
a421 1
{ "stw",	0x6c000000, 0xfc000000, "cex,J(b)", pa10, 0},
d423 1
a423 1
{ "stw",	0x68000000, 0xfc000000, "x,j(b)", pa10, 0},
d425 3
a427 1
{ "stw",	0x0c001280, 0xfc001fc0, "cMx,V(b)", pa10, 0},
a428 3
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "sth",	0x0c001260, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "sth",	0x0c001260, 0xfc0033ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
d430 1
d432 1
a432 1
{ "sth",	0x64000000, 0xfc000000, "x,j(b)", pa10, 0},
d434 3
a436 1
{ "sth",	0x0c001240, 0xfc001fc0, "cMx,V(b)", pa10, 0},
a437 3
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
{ "stb",	0x0c001220, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "stb",	0x0c001220, 0xfc0033ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
d439 1
d441 1
a441 1
{ "stb",	0x60000000, 0xfc000000, "x,j(b)", pa10, 0},
d443 1
a443 1
{ "stb",	0x0c001200, 0xfc001fc0, "cMx,V(b)", pa10, 0},
d445 1
a445 1
{ "ldwm",	0x4c000000, 0xfc000000, "j(b),x", pa10, 0},
d447 1
a447 1
{ "stwm",	0x6c000000, 0xfc000000, "x,j(b)", pa10, 0},
d449 1
a449 1
{ "ldwx",	0x0c000080, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
d451 1
a451 1
{ "ldwx",	0x0c000080, 0xfc001fc0, "cXx(b),t", pa10, 0},
d453 1
a453 1
{ "ldhx",	0x0c000040, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
d455 1
a455 1
{ "ldhx",	0x0c000040, 0xfc001fc0, "cXx(b),t", pa10, 0},
d457 1
a457 1
{ "ldbx",	0x0c000000, 0xfc0013c0, "cxccx(b),t", pa11, FLAG_STRICT},
a458 1
{ "ldbx",	0x0c000000, 0xfc001fc0, "cXx(b),t", pa10, 0},
d460 1
a461 1
{ "ldwa",	0x0c0011a0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
d464 1
d466 1
a466 1
{ "ldcw",	0x0c0001c0, 0xfc0013c0, "cxcdx(b),t", pa11, FLAG_STRICT},
d468 1
a468 1
{ "ldcw",	0x0c0011c0, 0xfc0013c0, "cmcd5(b),t", pa11, FLAG_STRICT},
d470 1
a470 1
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cM5(b),t", pa10, 0},
d472 1
a472 1
{ "ldcw",	0x0c0001c0, 0xfc001fc0, "cXx(b),t", pa10, 0},
a473 1
{ "stwa",	0x0c0013a0, 0xfc00d3ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
d475 1
d477 1
a477 1
{ "stby",	0x0c001300, 0xfc0013c0, "cscCx,V(b)", pa11, FLAG_STRICT},
a478 1
{ "stby",	0x0c001300, 0xfc001fc0, "cAx,V(b)", pa10, 0},
d480 1
d482 1
a482 1
{ "ldda",	0x0c001120, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
d484 1
a484 1
{ "ldcd",	0x0c000140, 0xfc0013c0, "cxcdx(b),t", pa20, FLAG_STRICT},
d486 2
a487 5
{ "ldcd",	0x0c001140, 0xfc0013c0, "cmcd5(b),t", pa20, FLAG_STRICT},
{ "stda",	0x0c0013e0, 0xfc0033ff, "cocCx,@@(s,b)", pa20, FLAG_STRICT},
{ "stda",	0x0c0013e0, 0xfc0033ff, "cocCx,@@(b)", pa20, FLAG_STRICT},
{ "stda",	0x0c0013c0, 0xfc0013c0, "cmcCx,V(s,b)", pa20, FLAG_STRICT},
{ "stda",	0x0c0013c0, 0xfc0013c0, "cmcCx,V(b)", pa20, FLAG_STRICT},
d490 1
d492 1
a492 1
{ "ldcwx",	0x0c0001c0, 0xfc0013c0, "cxcdx(b),t", pa11, FLAG_STRICT},
d494 1
a494 1
{ "ldcwx",	0x0c0001c0, 0xfc001fc0, "cXx(b),t", pa10, 0},
d496 1
a496 1
{ "ldws",	0x0c001080, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
d498 1
a498 1
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(b),t", pa10, 0},
d500 1
a500 1
{ "ldhs",	0x0c001040, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
d502 1
a502 1
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(b),t", pa10, 0},
d504 1
a504 1
{ "ldbs",	0x0c001000, 0xfc0013c0, "cmcc5(b),t", pa11, FLAG_STRICT},
a505 1
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(b),t", pa10, 0},
d508 1
d510 1
a510 1
{ "ldcws",	0x0c0011c0, 0xfc0013c0, "cmcd5(b),t", pa11, FLAG_STRICT},
d512 1
a512 1
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(b),t", pa10, 0},
d514 1
a514 1
{ "stws",	0x0c001280, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
d516 1
a516 1
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(b)", pa10, 0},
d518 1
a518 1
{ "sths",	0x0c001240, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
d520 1
a520 1
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(b)", pa10, 0},
d522 1
a522 1
{ "stbs",	0x0c001200, 0xfc0013c0, "cmcCx,V(b)", pa11, FLAG_STRICT},
a523 1
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(b)", pa10, 0},
d526 1
d528 1
a528 1
{ "stdby",	0x0c001340, 0xfc0013c0, "cscCx,V(b)", pa20, FLAG_STRICT},
d530 1
a530 1
{ "stbys",	0x0c001300, 0xfc0013c0, "cscCx,V(b)", pa11, FLAG_STRICT},
a531 1
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(b)", pa10, 0},
d570 2
a573 2
{ "bb",		0xc0006000, 0xffe06000, "?Bnx,!,w", pa20, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc004000, "?Bnx,B,w", pa20, FLAG_STRICT}, 
d707 1
a708 1
{ "ldsid",	0x000010a0, 0xfc1f3fe0, "(b),t", pa10, 0},
d718 1
d720 1
a720 1
{ "probe",	0x04001180, 0xfc003fa0, "cw(b),x,t", pa10, FLAG_STRICT},
d722 1
a722 1
{ "probei",	0x04003180, 0xfc003fa0, "cw(b),R,t", pa10, FLAG_STRICT},
d724 1
a724 1
{ "prober",	0x04001180, 0xfc003fe0, "(b),x,t", pa10, 0},
d726 1
a726 1
{ "proberi",	0x04003180, 0xfc003fe0, "(b),R,t", pa10, 0},
d728 1
a728 1
{ "probew",	0x040011c0, 0xfc003fe0, "(b),x,t", pa10, 0},
d730 1
a730 1
{ "probewi",	0x040031c0, 0xfc003fe0, "(b),R,t", pa10, 0},
d732 1
a732 1
{ "lpa",	0x04001340, 0xfc003fc0, "cZx(b),t", pa10, 0},
d734 1
a734 1
{ "lha",	0x04001300, 0xfc003fc0, "cZx(b),t", pa10, 0},
d736 1
a736 1
{ "lci",	0x04001300, 0xfc003fe0, "x(b),t", pa10, 0},
d738 1
a738 1
{ "pdtlb",	0x04001600, 0xfc003fdf, "cLcZx(b)", pa20, FLAG_STRICT},
a739 1
{ "pdtlb",	0x04001200, 0xfc003fdf, "cZx(b)", pa10, 0},
a740 1
{ "pitlb",	0x04000600, 0xfc001fdf, "cLcZx(b)", pa20, FLAG_STRICT},
d742 1
a742 1
{ "pitlb",	0x04000200, 0xfc001fdf, "cZx(b)", pa10, 0},
a743 1
{ "pdtlbe",	0x04001240, 0xfc003fdf, "cZx(b)", pa10, 0},
d745 1
a745 1
{ "pitlbe",	0x04000240, 0xfc001fdf, "cZx(b)", pa10, 0},
a746 1
{ "idtlba",	0x04001040, 0xfc003fff, "x,(b)", pa10, 0},
d748 1
a748 1
{ "iitlba",	0x04000040, 0xfc001fff, "x,(b)", pa10, 0},
a749 1
{ "idtlbp",	0x04001000, 0xfc003fff, "x,(b)", pa10, 0},
d751 1
a751 1
{ "iitlbp",	0x04000000, 0xfc001fff, "x,(b)", pa10, 0},
d753 1
a753 1
{ "pdc",	0x04001380, 0xfc003fdf, "cZx(b)", pa10, 0},
a754 1
{ "fdc",	0x04001280, 0xfc003fdf, "cZx(b)", pa10, 0},
d756 1
a756 1
{ "fic",	0x04000280, 0xfc001fdf, "cZx(b)", pa10, 0},
a757 1
{ "fdce",	0x040012c0, 0xfc003fdf, "cZx(b)", pa10, 0},
a758 1
{ "fice",	0x040002c0, 0xfc001fdf, "cZx(b)", pa10, 0},
d775 1
d777 1
a777 1
{ "gfw",	0x04001680, 0xfc003fdf, "cZx(b)", pa11, 0},
a778 1
{ "gfr",	0x04001a80, 0xfc003fdf, "cZx(b)", pa11, 0},
d782 1
d784 3
a786 1
{ "fldw",	0x24000000, 0xfc001380, "cxccx(b),fT", pa11, FLAG_STRICT},
a787 3
{ "fldw",	0x24001000, 0xfc001380, "cmcc5(b),fT", pa11, FLAG_STRICT},
{ "fldw",	0x24001020, 0xfc1f33a0, "cocc@@(s,b),fT", pa20, FLAG_STRICT},
{ "fldw",	0x24001020, 0xfc1f33a0, "cocc@@(b),fT", pa20, FLAG_STRICT},
d790 5
a794 2
{ "fldw",	0x5c000000, 0xfc000004, "d(b),fe", pa20, FLAG_STRICT},
{ "fldw",	0x58000000, 0xfc000000, "cJd(b),fe", pa20, FLAG_STRICT},
d796 1
a796 1
{ "fldw",	0x24001000, 0xfc001f80, "cM5(b),fT", pa10, 0},
d798 1
a798 1
{ "fldw",	0x24000000, 0xfc001f80, "cXx(b),fT", pa10, 0},
d800 3
a802 1
{ "fldd",	0x2c000000, 0xfc0013c0, "cxccx(b),ft", pa11, FLAG_STRICT},
a803 3
{ "fldd",	0x2c001000, 0xfc0013c0, "cmcc5(b),ft", pa11, FLAG_STRICT},
{ "fldd",	0x2c001020, 0xfc1f33e0, "cocc@@(s,b),ft", pa20, FLAG_STRICT},
{ "fldd",	0x2c001020, 0xfc1f33e0, "cocc@@(b),ft", pa20, FLAG_STRICT},
d805 3
a807 1
{ "fldd",	0x50000002, 0xfc000002, "cq#(b),fx", pa20, FLAG_STRICT},
d809 1
a809 1
{ "fldd",	0x2c001000, 0xfc001fc0, "cM5(b),ft", pa10, 0},
d811 1
a811 1
{ "fldd",	0x2c000000, 0xfc001fc0, "cXx(b),ft", pa10, 0},
d813 3
a815 1
{ "fstw",	0x24000200, 0xfc001380, "cxcCfT,x(b)", pa11, FLAG_STRICT},
a816 3
{ "fstw",	0x24001200, 0xfc001f80, "cMfT,5(b)", pa10, FLAG_STRICT},
{ "fstw",	0x24001220, 0xfc1f33a0, "cocCfT,@@(s,b)", pa20, FLAG_STRICT},
{ "fstw",	0x24001220, 0xfc1f33a0, "cocCfT,@@(b)", pa20, FLAG_STRICT},
d818 6
a823 3
{ "fstw",	0x78000000, 0xfc000000, "cJfe,y(b)", pa20w, FLAG_STRICT},
{ "fstw",	0x7c000000, 0xfc000004, "fe,d(b)", pa20, FLAG_STRICT},
{ "fstw",	0x78000000, 0xfc000000, "cJfe,d(b)", pa20, FLAG_STRICT},
d825 1
a825 1
{ "fstw",	0x24001200, 0xfc001f80, "cMfT,5(b)", pa10, 0},
d827 1
a827 1
{ "fstw",	0x24000200, 0xfc001f80, "cXfT,x(b)", pa10, 0},
d829 3
a831 1
{ "fstd",	0x2c000200, 0xfc0013c0, "cxcCft,x(b)", pa11, FLAG_STRICT},
a832 3
{ "fstd",	0x2c001200, 0xfc0013c0, "cmcCft,5(b)", pa11, FLAG_STRICT},
{ "fstd",	0x2c001220, 0xfc1f33e0, "cocCft,@@(s,b)", pa20, FLAG_STRICT},
{ "fstd",	0x2c001220, 0xfc1f33e0, "cocCft,@@(b)", pa20, FLAG_STRICT},
d834 3
a836 1
{ "fstd",	0x70000002, 0xfc000002, "cqfx,#(b)", pa20, FLAG_STRICT},
d838 1
a838 1
{ "fstd",	0x2c001200, 0xfc001fc0, "cMft,5(b)", pa10, 0},
d840 1
a840 1
{ "fstd",	0x2c000200, 0xfc001fc0, "cXft,x(b)", pa10, 0},
d842 1
a842 1
{ "fldwx",	0x24000000, 0xfc001380, "cxccx(b),fT", pa11, FLAG_STRICT},
d844 1
a844 1
{ "fldwx",	0x24000000, 0xfc001f80, "cXx(b),fT", pa10, 0},
d846 1
a846 1
{ "flddx",	0x2c000000, 0xfc0013c0, "cxccx(b),ft", pa11, FLAG_STRICT},
d848 1
a848 1
{ "flddx",	0x2c000000, 0xfc001fc0, "cXx(b),ft", pa10, 0},
d850 1
a850 1
{ "fstwx",	0x24000200, 0xfc001380, "cxcCfT,x(b)", pa11, FLAG_STRICT},
d852 1
a852 1
{ "fstwx",	0x24000200, 0xfc001f80, "cxfT,x(b)", pa10, 0},
d854 1
a854 1
{ "fstdx",	0x2c000200, 0xfc0013c0, "cxcCft,x(b)", pa11, FLAG_STRICT},
d856 1
a856 1
{ "fstdx",	0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10, 0},
d858 1
a858 1
{ "fstqx",	0x3c000200, 0xfc001fc0, "cxft,x(b)", pa10, 0},
d860 1
a860 1
{ "fldws",	0x24001000, 0xfc001380, "cmcc5(b),fT", pa11, FLAG_STRICT},
d862 1
a862 1
{ "fldws",	0x24001000, 0xfc001f80, "cm5(b),fT", pa10, 0},
d864 1
a864 1
{ "fldds",	0x2c001000, 0xfc0013c0, "cmcc5(b),ft", pa11, FLAG_STRICT},
d866 1
a866 1
{ "fldds",	0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10, 0},
d868 1
a868 1
{ "fstws",	0x24001200, 0xfc001380, "cmcCfT,5(b)", pa11, FLAG_STRICT},
d870 1
a870 1
{ "fstws",	0x24001200, 0xfc001f80, "cmfT,5(b)", pa10, 0},
d872 1
a872 1
{ "fstds",	0x2c001200, 0xfc0013c0, "cmcCft,5(b)", pa11, FLAG_STRICT},
d874 1
a874 1
{ "fstds",	0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10, 0},
a875 1
{ "fstqs",	0x3c001200, 0xfc001fc0, "cmft,5(b)", pa10, 0},
d934 1
d936 3
a938 1
{ "cldw",	0x24000000, 0xfc001200, "ucxccx(b),t", pa11, FLAG_STRICT},
d940 1
a940 3
{ "cldw",	0x24001000, 0xfc001200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001200, "ucocc@@(s,b),t", pa20, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001200, "ucocc@@(b),t", pa20, FLAG_STRICT},
d942 1
a942 1
{ "cldw",	0x24001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
d944 1
a944 1
{ "cldw",	0x24000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
d946 3
a948 1
{ "cldd",	0x2c000000, 0xfc001200, "ucxccx(b),t", pa11, FLAG_STRICT},
d950 1
a950 3
{ "cldd",	0x2c001000, 0xfc001200, "ucmcc5(b),t", pa11, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001200, "ucocc@@(s,b),t", pa20, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001200, "ucocc@@(b),t", pa20, FLAG_STRICT},
d952 1
a952 1
{ "cldd",	0x2c001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
d954 1
a954 1
{ "cldd",	0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
d956 3
a958 1
{ "cstw",	0x24000200, 0xfc001200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
d960 1
a960 3
{ "cstw",	0x24001200, 0xfc001200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001200, "ucocCt,@@(s,b)", pa20, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001200, "ucocCt,@@(b)", pa20, FLAG_STRICT},
d962 1
a962 1
{ "cstw",	0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
d964 1
a964 1
{ "cstw",	0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
d966 3
a968 1
{ "cstd",	0x2c000200, 0xfc001200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
d970 1
a970 3
{ "cstd",	0x2c001200, 0xfc001200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001200, "ucocCt,@@(s,b)", pa20, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001200, "ucocCt,@@(b)", pa20, FLAG_STRICT},
d972 1
a972 1
{ "cstd",	0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
d974 1
a974 1
{ "cstd",	0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
d976 1
a976 1
{ "cldwx",	0x24000000, 0xfc001200, "ucxccx(b),t", pa11, FLAG_STRICT},
d978 1
a978 1
{ "cldwx",	0x24000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
d980 1
a980 1
{ "clddx",	0x2c000000, 0xfc001200, "ucxccx(b),t", pa11, FLAG_STRICT},
d982 1
a982 1
{ "clddx",	0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
d984 1
a984 1
{ "cstwx",	0x24000200, 0xfc001200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
d986 1
a986 1
{ "cstwx",	0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
d988 1
a988 1
{ "cstdx",	0x2c000200, 0xfc001200, "ucxcCt,x(b)", pa11, FLAG_STRICT},
d990 1
a990 1
{ "cstdx",	0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
d992 1
a992 1
{ "cldws",	0x24001000, 0xfc001200, "ucmcc5(b),t", pa11, FLAG_STRICT},
d994 1
a994 1
{ "cldws",	0x24001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
d996 1
a996 1
{ "cldds",	0x2c001000, 0xfc001200, "ucmcc5(b),t", pa11, FLAG_STRICT},
d998 1
a998 1
{ "cldds",	0x2c001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
d1000 1
a1000 1
{ "cstws",	0x24001200, 0xfc001200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
d1002 1
a1002 1
{ "cstws",	0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
d1004 1
a1004 1
{ "cstds",	0x2c001200, 0xfc001200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
a1005 1
{ "cstds",	0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
@


1.54
log
@	* hppa.h (pa_opcodes): Use cM and cX instead of cm and cx,
	respectively, in various floating-point load and store patterns.
@
text
@d51 6
a56 1
/* Enable/disable strict syntax checking.  */
a335 2
{ "ldw",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c000080, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
a337 2
{ "ldw",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
a342 2
{ "ldw",	0x4c000000, 0xfc000000, "ceJ(s,b),x", pa10, FLAG_STRICT},
{ "ldw",	0x4c000000, 0xfc000000, "ceJ(b),x", pa10, FLAG_STRICT},
d347 2
d351 4
a354 2
{ "ldh",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c000040, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
a356 2
{ "ldh",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d364 4
a367 2
{ "ldb",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c000000, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
a369 2
{ "ldb",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d377 4
a386 2
{ "stw",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
a391 2
{ "stw",	0x6c000000, 0xfc000000, "cex,J(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x6c000000, 0xfc000000, "cex,J(b)", pa10, FLAG_STRICT},
d396 2
d400 2
a401 2
{ "sth",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
d409 2
a410 2
{ "stb",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
d418 2
a423 2
{ "ldwx",	0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldwx",	0x0c000080, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
d426 2
a427 2
{ "ldhx",	0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldhx",	0x0c000040, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
d430 2
a431 2
{ "ldbx",	0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldbx",	0x0c000000, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
d434 2
a435 1
{ "ldwa",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
a436 1
{ "ldwa",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
d439 2
a440 2
{ "ldcw",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0001c0, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
a442 2
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d445 4
a448 1
{ "stwa",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
d451 1
a451 2
{ "stby",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc001fc0, "cAx,V(b)", pa10, FLAG_STRICT},
d454 2
a466 1
{ "ldwax",	0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, FLAG_STRICT},
d468 1
a468 2
{ "ldcwx",	0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, FLAG_STRICT},
{ "ldcwx",	0x0c0001c0, 0xfc001fc0, "cXx(b),t", pa10, FLAG_STRICT},
d471 2
a472 2
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d475 2
a476 2
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d479 2
a480 2
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d483 2
a484 1
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, FLAG_STRICT},
d486 1
a486 2
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, FLAG_STRICT},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(b),t", pa10, FLAG_STRICT},
d489 2
a490 2
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
d493 2
a494 2
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
d497 2
a498 2
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, FLAG_STRICT},
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(b)", pa10, FLAG_STRICT},
d501 2
a502 1
{ "stwas",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, FLAG_STRICT},
d504 1
a506 2
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, FLAG_STRICT},
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(b)", pa10, FLAG_STRICT},
d509 2
a767 2
{ "fldw",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24000000, 0xfc001f80, "cXx(b),fT", pa10, FLAG_STRICT},
a769 2
{ "fldw",	0x24001000, 0xfc001f80, "cM5(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc001f80, "cM5(b),fT", pa10, FLAG_STRICT},
d778 4
a781 2
{ "fldd",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c000000, 0xfc001fc0, "cXx(b),ft", pa10, FLAG_STRICT},
a783 2
{ "fldd",	0x2c001000, 0xfc001fc0, "cM5(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc001fc0, "cM5(b),ft", pa10, FLAG_STRICT},
d790 4
a793 2
{ "fstw",	0x24000200, 0xfc001f80, "cXfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc001f80, "cXfT,x(b)", pa10, FLAG_STRICT},
a797 2
{ "fstw",	0x24001200, 0xfc001380, "cmcCfT,5(s,b)", pa11, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc001380, "cmcCfT,5(b)", pa11, FLAG_STRICT},
d804 4
a807 2
{ "fstd",	0x2c000200, 0xfc001fc0, "cXft,x(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc001fc0, "cXft,x(b)", pa10, FLAG_STRICT},
a809 2
{ "fstd",	0x2c001200, 0xfc001fc0, "cMft,5(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc001fc0, "cMft,5(b)", pa10, FLAG_STRICT},
d816 4
a819 2
{ "fldwx",	0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, FLAG_STRICT},
{ "fldwx",	0x24000000, 0xfc001f80, "cXx(b),fT", pa10, FLAG_STRICT},
d822 2
a823 2
{ "flddx",	0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, FLAG_STRICT},
{ "flddx",	0x2c000000, 0xfc001fc0, "cXx(b),ft", pa10, FLAG_STRICT},
d826 2
a827 2
{ "fstwx",	0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstwx",	0x24000200, 0xfc001f80, "cxfT,x(b)", pa10, FLAG_STRICT},
d830 2
a831 2
{ "fstdx",	0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, FLAG_STRICT},
{ "fstdx",	0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10, FLAG_STRICT},
d834 2
a837 2
{ "fldws",	0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, FLAG_STRICT},
{ "fldws",	0x24001000, 0xfc001f80, "cm5(b),fT", pa10, FLAG_STRICT},
d840 2
a841 2
{ "fldds",	0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, FLAG_STRICT},
{ "fldds",	0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10, FLAG_STRICT},
d844 2
a845 2
{ "fstws",	0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstws",	0x24001200, 0xfc001f80, "cmfT,5(b)", pa10, FLAG_STRICT},
d848 2
a849 2
{ "fstds",	0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, FLAG_STRICT},
{ "fstds",	0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10, FLAG_STRICT},
d852 2
a913 2
{ "cldw",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
a915 2
{ "cldw",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldw",	0x24001000, 0xfc001e00, "ucM5(b),t", pa10, FLAG_STRICT},
d920 4
a923 2
{ "cldd",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
a925 2
{ "cldd",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldd",	0x2c001000, 0xfc001e00, "ucM5(b),t", pa10, FLAG_STRICT},
d930 4
a933 2
{ "cstw",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstw",	0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
a935 2
{ "cstw",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstw",	0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
d940 4
a943 2
{ "cstd",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
a945 2
{ "cstd",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstd",	0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
d950 4
a953 2
{ "cldwx",	0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldwx",	0x24000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
d956 2
a957 2
{ "clddx",	0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "clddx",	0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
d960 2
a961 2
{ "cstwx",	0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstwx",	0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
d964 6
a969 6
{ "cstdx",	0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstdx",	0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstdx",	0x2c001200, 0xfc001200, "ucmcCt,5(s,b)", pa11, FLAG_STRICT},
{ "cstdx",	0x2c001200, 0xfc001200, "ucmcCt,5(b)", pa11, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldws",	0x24001000, 0xfc001e00, "ucM5(b),t", pa10, FLAG_STRICT},
d972 2
a973 2
{ "cldds",	0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldds",	0x2c001000, 0xfc001e00, "ucM5(b),t", pa10, FLAG_STRICT},
d976 2
a977 2
{ "cstws",	0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstws",	0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
d980 2
a981 2
{ "cstds",	0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstds",	0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
d984 2
@


1.53
log
@	* hppa.h (FLAG_STRICT): Correct comment.
	(pa_opcodes): Update load and store entries to allow both PA 1.X and
	PA 2.0 mneumonics when equivalent.  Entries with cache control
	completers now require PA 1.1.  Adjust whitespace.
@
text
@d767 2
a768 2
{ "fldw",	0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",	0x24001000, 0xfc001f80, "cm5(b),fT", pa10, FLAG_STRICT},
d781 2
a782 2
{ "fldd",	0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",	0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10, FLAG_STRICT},
d789 2
a790 2
{ "fstw",	0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x24000200, 0xfc001f80, "cxfT,x(b)", pa10, FLAG_STRICT},
d793 2
a794 2
{ "fstw",	0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstw",	0x24001200, 0xfc001f80, "cmfT,5(b)", pa10, FLAG_STRICT},
d803 2
a804 2
{ "fstd",	0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10, FLAG_STRICT},
d807 2
a808 2
{ "fstd",	0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, FLAG_STRICT},
{ "fstd",	0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10, FLAG_STRICT},
@


1.52
log
@Update the address and phone number of the FSF organization
@
text
@d51 1
a51 2
/* Enable/disable strict syntax checking.  Not currently used, but will
   be necessary for PA2.0 support in the future.  */
d182 2
a183 2
   ce   long load/store completer for LDW/STW with a different encoding than the
	others
d295 1
a295 1
{ "cmpib", 	0xec000000, 0xfc000000, "?Qn5,b,w", pa20, FLAG_STRICT},
d317 3
a319 3
{ "nop",        0x08000240, 0xffffffff, "", pa10, 0},      /* or 0,0,0 */
{ "copy",       0x08000240, 0xffe0ffe0, "x,t", pa10, 0},   /* or r,0,t */
{ "mtsar",      0x01601840, 0xffe0ffff, "x", pa10, 0}, /* mtctl r,cr11 */
d325 2
a326 2
{ "ldd",        0x0c0000c0, 0xfc0013c0, "cxccx(s,b),t", pa20, FLAG_STRICT},
{ "ldd",        0x0c0000c0, 0xfc0013c0, "cxccx(b),t", pa20, FLAG_STRICT},
d329 10
a338 6
{ "ldd",        0x50000000, 0xfc000002, "cq&(b),x", pa20w, FLAG_STRICT},
{ "ldd",        0x50000000, 0xfc000002, "cq#(b),x", pa20, FLAG_STRICT},
{ "ldw",        0x0c000080, 0xfc0013c0, "cxccx(s,b),t", pa10, FLAG_STRICT},
{ "ldw",        0x0c000080, 0xfc0013c0, "cxccx(b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d341 17
a357 13
{ "ldw",        0x4c000000, 0xfc000000, "ce<(b),x", pa20w, FLAG_STRICT},
{ "ldw",        0x4c000000, 0xfc000000, "ceJ(s,b),x", pa10, FLAG_STRICT},
{ "ldw",        0x4c000000, 0xfc000000, "ceJ(b),x", pa10, FLAG_STRICT},
{ "ldw",        0x5c000004, 0xfc000006, "ce>(b),x", pa20w, FLAG_STRICT},
{ "ldw",        0x5c000004, 0xfc000006, "ceK(s,b),x", pa20, FLAG_STRICT},
{ "ldw",        0x5c000004, 0xfc000006, "ceK(b),x", pa20, FLAG_STRICT},
{ "ldw",        0x48000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldw",        0x48000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldw",        0x48000000, 0xfc000000, "j(b),x", pa10, 0},
{ "ldh",        0x0c000040, 0xfc0013c0, "cxccx(s,b),t", pa10, FLAG_STRICT},
{ "ldh",        0x0c000040, 0xfc0013c0, "cxccx(b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d360 11
a370 7
{ "ldh",        0x44000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldh",        0x44000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldh",        0x44000000, 0xfc000000, "j(b),x", pa10, 0},
{ "ldb",        0x0c000000, 0xfc0013c0, "cxccx(s,b),t", pa10, FLAG_STRICT},
{ "ldb",        0x0c000000, 0xfc0013c0, "cxccx(b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d373 3
a375 3
{ "ldb",        0x40000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
{ "ldb",        0x40000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldb",        0x40000000, 0xfc000000, "j(b),x", pa10, 0},
d380 6
a385 4
{ "std",        0x70000000, 0xfc000002, "cqx,&(b)", pa20w, FLAG_STRICT},
{ "std",        0x70000000, 0xfc000002, "cqx,#(b)", pa20, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d388 13
a400 11
{ "stw",        0x6c000000, 0xfc000000, "cex,<(b)", pa20w, FLAG_STRICT},
{ "stw",        0x6c000000, 0xfc000000, "cex,J(s,b)", pa10, FLAG_STRICT},
{ "stw",        0x6c000000, 0xfc000000, "cex,J(b)", pa10, FLAG_STRICT},
{ "stw",        0x7c000004, 0xfc000006, "cex,>(b)", pa20w, FLAG_STRICT},
{ "stw",        0x7c000004, 0xfc000006, "cex,K(s,b)", pa20, FLAG_STRICT},
{ "stw",        0x7c000004, 0xfc000006, "cex,K(b)", pa20, FLAG_STRICT},
{ "stw",        0x68000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "stw",        0x68000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "stw",        0x68000000, 0xfc000000, "x,j(b)", pa10, 0},
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d403 7
a409 5
{ "sth",        0x64000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "sth",        0x64000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "sth",        0x64000000, 0xfc000000, "x,j(b)", pa10, 0},
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d412 23
a434 15
{ "stb",        0x60000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
{ "stb",        0x60000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "stb",        0x60000000, 0xfc000000, "x,j(b)", pa10, 0},
{ "ldwm",       0x4c000000, 0xfc000000, "j(s,b),x", pa10, 0},
{ "ldwm",       0x4c000000, 0xfc000000, "j(b),x", pa10, 0},
{ "stwm",       0x6c000000, 0xfc000000, "x,j(s,b)", pa10, 0},
{ "stwm",       0x6c000000, 0xfc000000, "x,j(b)", pa10, 0},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cXx(b),t", pa10, 0},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cXx(b),t", pa10, 0},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cXx(b),t", pa10, 0},
{ "ldwa",       0x0c000180, 0xfc00d3c0, "cxccx(b),t", pa10, FLAG_STRICT},
{ "ldwa",	0x0c001180, 0xfc00d3c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d436 10
a445 5
{ "ldcw",       0x0c0001c0, 0xfc0013c0, "cxcdx(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",       0x0c0001c0, 0xfc0013c0, "cxcdx(b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc0013c0, "cmcd5(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc0013c0, "cmcd5(b),t", pa10, FLAG_STRICT},
{ "stwa",	0x0c001380, 0xfc00d3c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d447 5
a451 3
{ "stby",	0x0c001300, 0xfc0013c0, "cscCx,V(s,b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc0013c0, "cscCx,V(b)", pa10, FLAG_STRICT},
{ "ldda",       0x0c000100, 0xfc00d3c0, "cxccx(b),t", pa20, FLAG_STRICT},
d454 2
a455 2
{ "ldcd",       0x0c000140, 0xfc0013c0, "cxcdx(s,b),t", pa20, FLAG_STRICT},
{ "ldcd",       0x0c000140, 0xfc0013c0, "cxcdx(b),t", pa20, FLAG_STRICT},
d462 38
a499 19
{ "ldwax",      0x0c000180, 0xfc00dfc0, "cXx(b),t", pa10, 0},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cXx(s,b),t", pa10, 0},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cXx(b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc001fc0, "cM5(b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cM5(b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cM5(b),t", pa10, 0},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cM5(b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(s,b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cM5(b),t", pa10, 0},
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "stws",	0x0c001280, 0xfc001fc0, "cMx,V(b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc001fc0, "cMx,V(b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(s,b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc001fc0, "cMx,V(b)", pa10, 0},
{ "stwas",	0x0c001380, 0xfc00dfc0, "cMx,V(b)", pa10, 0},
d502 4
a505 2
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(s,b)", pa10, 0},
{ "stbys",	0x0c001300, 0xfc001fc0, "cAx,V(b)", pa10, 0},
d556 66
a621 66
{ "cmpclr",     0x080008a0, 0xfc000fe0, "?Sx,b,t", pa20, FLAG_STRICT},
{ "cmpclr",     0x08000880, 0xfc000fe0, "?sx,b,t", pa10, FLAG_STRICT},
{ "comclr",     0x08000880, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "or",         0x08000260, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "or",         0x08000240, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "xor",        0x080002a0, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "xor",        0x08000280, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "and",        0x08000220, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "and",        0x08000200, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "andcm",      0x08000020, 0xfc000fe0, "?Lx,b,t", pa20, FLAG_STRICT},
{ "andcm",      0x08000000, 0xfc000fe0, "?lx,b,t", pa10, 0},
{ "uxor",       0x080003a0, 0xfc000fe0, "?Ux,b,t", pa20, FLAG_STRICT},
{ "uxor",       0x08000380, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "uaddcm",     0x080009a0, 0xfc000fa0, "cT?Ux,b,t", pa20, FLAG_STRICT},
{ "uaddcm",     0x08000980, 0xfc000fa0, "cT?ux,b,t", pa10, FLAG_STRICT},
{ "uaddcm",     0x08000980, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "uaddcmt",    0x080009c0, 0xfc000fe0, "?ux,b,t", pa10, 0},
{ "dcor",       0x08000ba0, 0xfc1f0fa0, "ci?Ub,t", pa20, FLAG_STRICT},
{ "dcor",       0x08000b80, 0xfc1f0fa0, "ci?ub,t", pa10, FLAG_STRICT},
{ "dcor",       0x08000b80, 0xfc1f0fe0, "?ub,t",   pa10, 0},
{ "idcor",      0x08000bc0, 0xfc1f0fe0, "?ub,t",   pa10, 0},
{ "addi",       0xb0000000, 0xfc000000, "ct?ai,b,x", pa10, FLAG_STRICT},
{ "addi",       0xb4000000, 0xfc000000, "cv?ai,b,x", pa10, FLAG_STRICT},
{ "addi",       0xb4000000, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addio",      0xb4000800, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addit",      0xb0000000, 0xfc000800, "?ai,b,x", pa10, 0},
{ "addito",     0xb0000800, 0xfc000800, "?ai,b,x", pa10, 0},
{ "add",        0x08000720, 0xfc0007e0, "cY?Ax,b,t", pa20, FLAG_STRICT},
{ "add",        0x08000700, 0xfc0007e0, "cy?ax,b,t", pa10, FLAG_STRICT},
{ "add",        0x08000220, 0xfc0003e0, "ca?Ax,b,t", pa20, FLAG_STRICT},
{ "add",        0x08000200, 0xfc0003e0, "ca?ax,b,t", pa10, FLAG_STRICT},
{ "add",        0x08000600, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addl",       0x08000a00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addo",       0x08000e00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addc",       0x08000700, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "addco",      0x08000f00, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sub",        0x080004e0, 0xfc0007e0, "ct?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",        0x080004c0, 0xfc0007e0, "ct?sx,b,t", pa10, FLAG_STRICT},
{ "sub",        0x08000520, 0xfc0007e0, "cB?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",        0x08000500, 0xfc0007e0, "cb?sx,b,t", pa10, FLAG_STRICT},
{ "sub",        0x08000420, 0xfc0007e0, "cv?Sx,b,t", pa20, FLAG_STRICT},
{ "sub",        0x08000400, 0xfc0007e0, "cv?sx,b,t", pa10, FLAG_STRICT},
{ "sub",        0x08000400, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subo",       0x08000c00, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subb",       0x08000500, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subbo",      0x08000d00, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subt",       0x080004c0, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subto",      0x08000cc0, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "ds",         0x08000440, 0xfc000fe0, "?sx,b,t", pa10, 0},
{ "subi",       0x94000000, 0xfc000000, "cv?si,b,x", pa10, FLAG_STRICT},
{ "subi",       0x94000000, 0xfc000800, "?si,b,x", pa10, 0},
{ "subio",      0x94000800, 0xfc000800, "?si,b,x", pa10, 0},
{ "cmpiclr",    0x90000800, 0xfc000800, "?Si,b,x", pa20, FLAG_STRICT},
{ "cmpiclr",    0x90000000, 0xfc000800, "?si,b,x", pa10, FLAG_STRICT},
{ "comiclr",    0x90000000, 0xfc000800, "?si,b,x", pa10, 0},
{ "shladd",     0x08000220, 0xfc000320, "ca?Ax,.,b,t", pa20, FLAG_STRICT},
{ "shladd",     0x08000200, 0xfc000320, "ca?ax,.,b,t", pa10, FLAG_STRICT},
{ "sh1add",     0x08000640, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh1addl",    0x08000a40, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh1addo",    0x08000e40, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2add",     0x08000680, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2addl",    0x08000a80, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh2addo",    0x08000e80, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3add",     0x080006c0, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3addl",    0x08000ac0, 0xfc000fe0, "?ax,b,t", pa10, 0},
{ "sh3addo",    0x08000ec0, 0xfc000fe0, "?ax,b,t", pa10, 0},
d625 10
a634 10
{ "hadd",       0x08000300, 0xfc00ff20, "cHx,b,t", pa20, FLAG_STRICT},
{ "havg",       0x080002c0, 0xfc00ffe0, "x,b,t", pa20, FLAG_STRICT},
{ "hshl",       0xf8008800, 0xffe0fc20, "x,*,t", pa20, FLAG_STRICT},
{ "hshladd",    0x08000700, 0xfc00ff20, "x,.,b,t", pa20, FLAG_STRICT},
{ "hshr",       0xf800c800, 0xfc1ff820, "cSb,*,t", pa20, FLAG_STRICT},
{ "hshradd",    0x08000500, 0xfc00ff20, "x,.,b,t", pa20, FLAG_STRICT},
{ "hsub",       0x08000100, 0xfc00ff20, "cHx,b,t", pa20, FLAG_STRICT},
{ "mixh",       0xf8008400, 0xfc009fe0, "chx,b,t", pa20, FLAG_STRICT},
{ "mixw",       0xf8008000, 0xfc009fe0, "chx,b,t", pa20, FLAG_STRICT},
{ "permh",      0xf8000000, 0xfc009020, "c*a,t", pa20, FLAG_STRICT},
d639 30
a668 30
{ "shrpd",      0xd0000200, 0xfc001fe0, "?Xx,b,!,t", pa20, FLAG_STRICT},
{ "shrpd",      0xd0000400, 0xfc001400, "?Xx,b,~,t", pa20, FLAG_STRICT},
{ "shrpw",      0xd0000000, 0xfc001fe0, "?xx,b,!,t", pa10, FLAG_STRICT},
{ "shrpw",      0xd0000800, 0xfc001c00, "?xx,b,p,t", pa10, FLAG_STRICT},
{ "vshd",       0xd0000000, 0xfc001fe0, "?xx,b,t", pa10, 0},
{ "shd",        0xd0000800, 0xfc001c00, "?xx,b,p,t", pa10, 0},
{ "extrd",      0xd0001200, 0xfc001ae0, "cS?Xb,!,%,x", pa20, FLAG_STRICT},
{ "extrd",      0xd8000000, 0xfc000000, "cS?Xb,q,|,x", pa20, FLAG_STRICT},
{ "extrw",      0xd0001000, 0xfc001be0, "cS?xb,!,T,x", pa10, FLAG_STRICT},
{ "extrw",      0xd0001800, 0xfc001800, "cS?xb,P,T,x", pa10, FLAG_STRICT},
{ "vextru",     0xd0001000, 0xfc001fe0, "?xb,T,x", pa10, 0},
{ "vextrs",     0xd0001400, 0xfc001fe0, "?xb,T,x", pa10, 0},
{ "extru",      0xd0001800, 0xfc001c00, "?xb,P,T,x", pa10, 0},
{ "extrs",      0xd0001c00, 0xfc001c00, "?xb,P,T,x", pa10, 0},
{ "depd",       0xd4000200, 0xfc001ae0, "cz?Xx,!,%,b", pa20, FLAG_STRICT},
{ "depd",       0xf0000000, 0xfc000000, "cz?Xx,~,|,b", pa20, FLAG_STRICT},
{ "depdi",      0xd4001200, 0xfc001ae0, "cz?X5,!,%,b", pa20, FLAG_STRICT},
{ "depdi",      0xf4000000, 0xfc000000, "cz?X5,~,|,b", pa20, FLAG_STRICT},
{ "depw",       0xd4000000, 0xfc001be0, "cz?xx,!,T,b", pa10, FLAG_STRICT},
{ "depw",       0xd4000800, 0xfc001800, "cz?xx,p,T,b", pa10, FLAG_STRICT},
{ "depwi",      0xd4001000, 0xfc001be0, "cz?x5,!,T,b", pa10, FLAG_STRICT},
{ "depwi",      0xd4001800, 0xfc001800, "cz?x5,p,T,b", pa10, FLAG_STRICT},
{ "zvdep",      0xd4000000, 0xfc001fe0, "?xx,T,b", pa10, 0},
{ "vdep",       0xd4000400, 0xfc001fe0, "?xx,T,b", pa10, 0},
{ "zdep",       0xd4000800, 0xfc001c00, "?xx,p,T,b", pa10, 0},
{ "dep",        0xd4000c00, 0xfc001c00, "?xx,p,T,b", pa10, 0},
{ "zvdepi",     0xd4001000, 0xfc001fe0, "?x5,T,b", pa10, 0},
{ "vdepi",      0xd4001400, 0xfc001fe0, "?x5,T,b", pa10, 0},
{ "zdepi",      0xd4001800, 0xfc001c00, "?x5,p,T,b", pa10, 0},
{ "depi",       0xd4001c00, 0xfc001c00, "?x5,p,T,b", pa10, 0},
d672 71
a742 71
{ "break",      0x00000000, 0xfc001fe0, "r,A", pa10, 0},
{ "rfi",        0x00000c00, 0xffffff1f, "cr", pa10, FLAG_STRICT},
{ "rfi",        0x00000c00, 0xffffffff, "", pa10, 0},
{ "rfir",       0x00000ca0, 0xffffffff, "", pa11, 0},
{ "ssm",        0x00000d60, 0xfc00ffe0, "U,t", pa20, FLAG_STRICT},
{ "ssm",        0x00000d60, 0xffe0ffe0, "R,t", pa10, 0},
{ "rsm",        0x00000e60, 0xfc00ffe0, "U,t", pa20, FLAG_STRICT},
{ "rsm",        0x00000e60, 0xffe0ffe0, "R,t", pa10, 0},
{ "mtsm",       0x00001860, 0xffe0ffff, "x", pa10, 0},
{ "ldsid",      0x000010a0, 0xfc1f3fe0, "(s,b),t", pa10, 0},
{ "ldsid",      0x000010a0, 0xfc1f3fe0, "(b),t", pa10, 0},
{ "mtsp",       0x00001820, 0xffe01fff, "x,S", pa10, 0},
{ "mtctl",      0x00001840, 0xfc00ffff, "x,^", pa10, 0},
{ "mtsarcm",    0x016018C0, 0xffe0ffff, "x", pa20, FLAG_STRICT},
{ "mfia",       0x000014A0, 0xffffffe0, "t", pa20, FLAG_STRICT},
{ "mfsp",       0x000004a0, 0xffff1fe0, "S,t", pa10, 0},
{ "mfctl",      0x016048a0, 0xffffffe0, "cW!,t", pa20, FLAG_STRICT},
{ "mfctl",      0x000008a0, 0xfc1fffe0, "^,t", pa10, 0},
{ "sync",       0x00000400, 0xffffffff, "", pa10, 0},
{ "syncdma",    0x00100400, 0xffffffff, "", pa10, 0},
{ "probe",      0x04001180, 0xfc003fa0, "cw(s,b),x,t", pa10, FLAG_STRICT},
{ "probe",      0x04001180, 0xfc003fa0, "cw(b),x,t", pa10, FLAG_STRICT},
{ "probei",     0x04003180, 0xfc003fa0, "cw(s,b),R,t", pa10, FLAG_STRICT},
{ "probei",     0x04003180, 0xfc003fa0, "cw(b),R,t", pa10, FLAG_STRICT},
{ "prober",     0x04001180, 0xfc003fe0, "(s,b),x,t", pa10, 0},
{ "prober",     0x04001180, 0xfc003fe0, "(b),x,t", pa10, 0},
{ "proberi",    0x04003180, 0xfc003fe0, "(s,b),R,t", pa10, 0},
{ "proberi",    0x04003180, 0xfc003fe0, "(b),R,t", pa10, 0},
{ "probew",     0x040011c0, 0xfc003fe0, "(s,b),x,t", pa10, 0},
{ "probew",     0x040011c0, 0xfc003fe0, "(b),x,t", pa10, 0},
{ "probewi",    0x040031c0, 0xfc003fe0, "(s,b),R,t", pa10, 0},
{ "probewi",    0x040031c0, 0xfc003fe0, "(b),R,t", pa10, 0},
{ "lpa",        0x04001340, 0xfc003fc0, "cZx(s,b),t", pa10, 0},
{ "lpa",        0x04001340, 0xfc003fc0, "cZx(b),t", pa10, 0},
{ "lha",        0x04001300, 0xfc003fc0, "cZx(s,b),t", pa10, 0},
{ "lha",        0x04001300, 0xfc003fc0, "cZx(b),t", pa10, 0},
{ "lci",        0x04001300, 0xfc003fe0, "x(s,b),t", pa10, 0},
{ "lci",        0x04001300, 0xfc003fe0, "x(b),t", pa10, 0},
{ "pdtlb",      0x04001600, 0xfc003fdf, "cLcZx(s,b)", pa20, FLAG_STRICT},
{ "pdtlb",      0x04001600, 0xfc003fdf, "cLcZx(b)", pa20, FLAG_STRICT},
{ "pdtlb",      0x04001200, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "pdtlb",      0x04001200, 0xfc003fdf, "cZx(b)", pa10, 0},
{ "pitlb",      0x04000600, 0xfc001fdf, "cLcZx(S,b)", pa20, FLAG_STRICT},
{ "pitlb",      0x04000600, 0xfc001fdf, "cLcZx(b)", pa20, FLAG_STRICT},
{ "pitlb",      0x04000200, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "pitlb",      0x04000200, 0xfc001fdf, "cZx(b)", pa10, 0},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "cZx(b)", pa10, 0},
{ "pitlbe",     0x04000240, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "pitlbe",     0x04000240, 0xfc001fdf, "cZx(b)", pa10, 0},
{ "idtlba",     0x04001040, 0xfc003fff, "x,(s,b)", pa10, 0},
{ "idtlba",     0x04001040, 0xfc003fff, "x,(b)", pa10, 0},
{ "iitlba",     0x04000040, 0xfc001fff, "x,(S,b)", pa10, 0},
{ "iitlba",     0x04000040, 0xfc001fff, "x,(b)", pa10, 0},
{ "idtlbp",     0x04001000, 0xfc003fff, "x,(s,b)", pa10, 0},
{ "idtlbp",     0x04001000, 0xfc003fff, "x,(b)", pa10, 0},
{ "iitlbp",     0x04000000, 0xfc001fff, "x,(S,b)", pa10, 0},
{ "iitlbp",     0x04000000, 0xfc001fff, "x,(b)", pa10, 0},
{ "pdc",        0x04001380, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "pdc",        0x04001380, 0xfc003fdf, "cZx(b)", pa10, 0},
{ "fdc",        0x04001280, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "fdc",        0x04001280, 0xfc003fdf, "cZx(b)", pa10, 0},
{ "fic",        0x04000280, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "fic",        0x04000280, 0xfc001fdf, "cZx(b)", pa10, 0},
{ "fdce",       0x040012c0, 0xfc003fdf, "cZx(s,b)", pa10, 0},
{ "fdce",       0x040012c0, 0xfc003fdf, "cZx(b)", pa10, 0},
{ "fice",       0x040002c0, 0xfc001fdf, "cZx(S,b)", pa10, 0},
{ "fice",       0x040002c0, 0xfc001fdf, "cZx(b)", pa10, 0},
{ "diag",       0x14000000, 0xfc000000, "D", pa10, 0},
{ "idtlbt",     0x04001800, 0xfc00ffff, "x,b", pa20, FLAG_STRICT},
{ "iitlbt",     0x04000800, 0xfc00ffff, "x,b", pa20, FLAG_STRICT},
d747 6
a752 6
{ "mtcpu",      0x14001600, 0xfc00ffff, "x,^", pa10, 0},
{ "mfcpu",      0x14001A00, 0xfc00ffff, "^,x", pa10, 0},
{ "tocen",      0x14403600, 0xffffffff, "", pa10, 0},
{ "tocdis",     0x14401620, 0xffffffff, "", pa10, 0},
{ "shdwgr",     0x14402600, 0xffffffff, "", pa10, 0},
{ "grshdw",     0x14400620, 0xffffffff, "", pa10, 0},
d763 126
a888 94
{ "fldw",       0x24000000, 0xfc001380, "cxccx(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24000000, 0xfc001380, "cxccx(b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24001000, 0xfc001380, "cmcc5(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24001000, 0xfc001380, "cmcc5(b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24001020, 0xfc1f33a0, "cocc@@(s,b),fT", pa20, FLAG_STRICT},
{ "fldw",       0x24001020, 0xfc1f33a0, "cocc@@(b),fT", pa20, FLAG_STRICT},
{ "fldw",       0x5c000000, 0xfc000004, "y(b),fe", pa20w, FLAG_STRICT},
{ "fldw",       0x58000000, 0xfc000000, "cJy(b),fe", pa20w, FLAG_STRICT},
{ "fldw",       0x5c000000, 0xfc000004, "d(b),fe", pa20, FLAG_STRICT},
{ "fldw",       0x58000000, 0xfc000000, "cJd(b),fe", pa20, FLAG_STRICT},
{ "fldd",       0x2c000000, 0xfc0013c0, "cxccx(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c000000, 0xfc0013c0, "cxccx(b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c001000, 0xfc0013c0, "cmcc5(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c001000, 0xfc0013c0, "cmcc5(b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c001020, 0xfc1f33e0, "cocc@@(s,b),ft", pa20, FLAG_STRICT},
{ "fldd",       0x2c001020, 0xfc1f33e0, "cocc@@(b),ft", pa20, FLAG_STRICT},
{ "fldd",       0x50000002, 0xfc000002, "cq&(b),fx", pa20w, FLAG_STRICT},
{ "fldd",       0x50000002, 0xfc000002, "cq#(b),fx", pa20, FLAG_STRICT},
{ "fstw",       0x24000200, 0xfc001380, "cxcCfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24000200, 0xfc001380, "cxcCfT,x(b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001200, 0xfc001380, "cmcCfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001200, 0xfc001380, "cmcCfT,5(b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001220, 0xfc1f33a0, "cocCfT,@@(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001220, 0xfc1f33a0, "cocCfT,@@(b)", pa10, FLAG_STRICT},
{ "fstw",       0x7c000000, 0xfc000004, "fE,y(b)", pa20w, FLAG_STRICT},
{ "fstw",       0x78000000, 0xfc000000, "cJfe,y(b)", pa20w, FLAG_STRICT},
{ "fstw",       0x7c000000, 0xfc000004, "fe,d(b)", pa20, FLAG_STRICT},
{ "fstw",       0x78000000, 0xfc000000, "cJfe,d(b)", pa20, FLAG_STRICT},
{ "fstd",       0x2c000200, 0xfc0013c0, "cxcCft,x(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c000200, 0xfc0013c0, "cxcCft,x(b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001200, 0xfc0013c0, "cmcCft,5(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001200, 0xfc0013c0, "cmcCft,5(b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001220, 0xfc1f33e0, "cocCft,@@(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001220, 0xfc1f33e0, "cocCft,@@(b)", pa10, FLAG_STRICT},
{ "fstd",       0x70000002, 0xfc000002, "cqfx,&(b)", pa20w, FLAG_STRICT},
{ "fstd",       0x70000002, 0xfc000002, "cqfx,#(b)", pa20, FLAG_STRICT},
{ "fldwx",      0x24000000, 0xfc001f80, "cXx(s,b),fT", pa10, 0},
{ "fldwx",      0x24000000, 0xfc001f80, "cXx(b),fT", pa10, 0},
{ "flddx",      0x2c000000, 0xfc001fc0, "cXx(s,b),ft", pa10, 0},
{ "flddx",      0x2c000000, 0xfc001fc0, "cXx(b),ft", pa10, 0},
{ "fstwx",      0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, 0},
{ "fstwx",      0x24000200, 0xfc001f80, "cxfT,x(b)", pa10, 0},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, 0},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10, 0},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, 0},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxft,x(b)", pa10, 0},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, 0},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(b),fT", pa10, 0},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, 0},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10, 0},
{ "fstws",      0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, 0},
{ "fstws",      0x24001200, 0xfc001f80, "cmfT,5(b)", pa10, 0},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, 0},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10, 0},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, 0},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmft,5(b)", pa10, 0},
{ "fadd",       0x30000600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fadd",       0x38000600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fsub",       0x30002600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fsub",       0x38002600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fmpy",       0x30004600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fmpy",       0x38004600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fdiv",       0x30006600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "fdiv",       0x38006600, 0xfc00e720, "IfA,fB,fT", pa10, 0},
{ "fsqrt",      0x30008000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fsqrt",      0x38008000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fabs",       0x30006000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fabs",       0x38006000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "frem",       0x30008600, 0xfc00e7e0, "Ffa,fb,fT", pa10, 0},
{ "frem",       0x38008600, 0xfc00e720, "FfA,fB,fT", pa10, 0},
{ "frnd",       0x3000a000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "frnd",       0x3800a000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fcpy",       0x30004000, 0xfc1fe7e0, "Ffa,fT", pa10, 0},
{ "fcpy",       0x38004000, 0xfc1fe720, "FfA,fT", pa10, 0},
{ "fcnvff",     0x30000200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvff",     0x38000200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvxf",     0x30008200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvxf",     0x38008200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvfx",     0x30010200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvfx",     0x38010200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fcnvfxt",    0x30018200, 0xfc1f87e0, "FGfa,fT", pa10, 0},
{ "fcnvfxt",    0x38018200, 0xfc1f8720, "FGfA,fT", pa10, 0},
{ "fmpyfadd",   0xb8000000, 0xfc000020, "IfA,fB,fC,fT", pa20, FLAG_STRICT},
{ "fmpynfadd",  0xb8000020, 0xfc000020, "IfA,fB,fC,fT", pa20, FLAG_STRICT},
{ "fneg",       0x3000c000, 0xfc1fe7e0, "Ffa,fT", pa20, FLAG_STRICT},
{ "fneg",       0x3800c000, 0xfc1fe720, "IfA,fT", pa20, FLAG_STRICT},
{ "fnegabs",    0x3000e000, 0xfc1fe7e0, "Ffa,fT", pa20, FLAG_STRICT},
{ "fnegabs",    0x3800e000, 0xfc1fe720, "IfA,fT", pa20, FLAG_STRICT},
{ "fcnv",       0x30000200, 0xfc1c0720, "{_fa,fT", pa20, FLAG_STRICT},
{ "fcnv",       0x38000200, 0xfc1c0720, "FGfA,fT", pa20, FLAG_STRICT},
{ "fcmp",       0x30000400, 0xfc0007e0, "F?ffa,fb,h", pa20, FLAG_STRICT},
{ "fcmp",       0x38000400, 0xfc000720, "I?ffA,fB,h", pa20, FLAG_STRICT},
{ "fcmp",       0x30000400, 0xfc00e7e0, "F?ffa,fb", pa10, 0},
{ "fcmp",       0x38000400, 0xfc00e720, "I?ffA,fB", pa10, 0},
d892 4
a895 4
{ "ftest",      0x30002420, 0xffffffe0, ",=", pa20, FLAG_STRICT},
{ "ftest",      0x30000420, 0xffff1fff, "m", pa20, FLAG_STRICT},
{ "ftest",      0x30002420, 0xffffffff, "", pa10, 0},
{ "fid",        0x30000000, 0xffffffff, "", pa11, 0},
d904 77
a980 37
{ "spop0",      0x10000000, 0xfc000600, "v,ON", pa10, 0},
{ "spop1",      0x10000200, 0xfc000600, "v,oNt", pa10, 0},
{ "spop2",      0x10000400, 0xfc000600, "v,1Nb", pa10, 0},
{ "spop3",      0x10000600, 0xfc000600, "v,0Nx,b", pa10, 0},
{ "copr",       0x30000000, 0xfc000000, "u,2N", pa10, 0},
{ "cldwx",      0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
{ "cldwx",      0x24000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
{ "clddx",      0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, 0},
{ "clddx",      0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, 0},
{ "cstwx",      0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
{ "cstwx",      0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, 0},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, 0},
{ "cldws",      0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cldws",      0x24001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
{ "cldds",      0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, 0},
{ "cldds",      0x2c001000, 0xfc001e00, "ucM5(b),t", pa10, 0},
{ "cstws",      0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},
{ "cstws",      0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
{ "cstds",      0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, 0},
{ "cstds",      0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, 0},
{ "cldw",       0x24000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24001000, 0xfc001e00, "ucM5(b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c000000, 0xfc001e00, "ucXx(s,b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c000000, 0xfc001e00, "ucXx(b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c001000, 0xfc001e00, "ucM5(s,b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c001000, 0xfc001e00, "ucM5(b),t", pa20, FLAG_STRICT},
{ "cstw",       0x24000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstw",       0x24000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstw",       0x24001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstw",       0x24001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c000200, 0xfc001e00, "ucXt,x(s,b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c000200, 0xfc001e00, "ucXt,x(b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c001200, 0xfc001e00, "ucMt,5(s,b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c001200, 0xfc001e00, "ucMt,5(b)", pa10, FLAG_STRICT},
@


1.51
log
@update copyright dates
@
text
@d23 1
a23 1
the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.50
log
@        * hppa.h (ldwa, ldda): Add ordered opcodes.
@
text
@d3 1
a3 1
   2001, 2002
@


1.49
log
@	* hppa.h (completer_chars): #if 0 out.
@
text
@d410 1
d421 1
@


1.48
log
@        * hppa.h (call, ret): Move to end of table.
        (addb, addib): PA2.0 variants should have been PA2.0W.
        (ldw, ldh, ldb, stw, sth, stb, stwa): Reorder to keep disassembler
        happy.
        (fldw, fldd, fstw, fstd, bb): Likewise.
        (short loads/stores): Tweak format specifier slightly to keep
        disassembler happy.
        (indexed loads/stores): Likewise.
        (absolute loads/stores): Likewise.
@
text
@d3 1
a3 1
   2001
d274 1
d279 1
@


1.48.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   2001, 2002
a273 1
#if 0
a277 1
#endif
a407 1
{ "ldwa",	0x0c0011a0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
a417 1
{ "ldda",	0x0c001120, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
@


1.48.22.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d3 1
a3 1
   2001, 2002
a273 1
#if 0
a277 1
#endif
@


1.48.22.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a409 1
{ "ldwa",	0x0c0011a0, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
a419 1
{ "ldda",	0x0c001120, 0xfc1ff3e0, "cocc@@(b),t", pa20, FLAG_STRICT},
@


1.47
log
@Fix typos in ChangeLogs; add coff/external.h; fix copyright dates
@
text
@d173 2
d176 2
d181 2
a293 4
{ "call",	0xe800f000, 0xfc1ffffd, "n(b)", pa20, FLAG_STRICT},
{ "call",	0xe800a000, 0xffe0e000, "nW", pa10, FLAG_STRICT},
{ "ret",	0xe840d000, 0xfffffffd, "n", pa20, FLAG_STRICT},

d306 1
a306 1
{ "addb",	0xa0000000, 0xf4000000, "?Wnx,b,w", pa20, FLAG_STRICT},
d311 1
a311 1
{ "addib",	0xa4000000, 0xf4000000, "?Wn5,b,w", pa20, FLAG_STRICT},
d332 2
a335 2
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d347 2
a350 2
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d356 2
a359 2
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc0013c0, "cmcc5(b),t", pa10, FLAG_STRICT},
d369 2
a372 2
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d382 2
a385 2
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d389 2
a392 2
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(s,b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc0013c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d400 6
a405 6
{ "ldwx",       0x0c000080, 0xfc001fc0, "cxx(s,b),t", pa10, 0},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cxx(b),t", pa10, 0},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cxx(s,b),t", pa10, 0},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cxx(b),t", pa10, 0},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cxx(s,b),t", pa10, 0},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cxx(b),t", pa10, 0},
d412 1
a413 1
{ "stwa",	0x0c001380, 0xfc00d3c0, "cmcCx,V(b)", pa10, FLAG_STRICT},
d426 19
a444 19
{ "ldwax",      0x0c000180, 0xfc00dfc0, "cxx(b),t", pa10, 0},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cxx(s,b),t", pa10, 0},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cxx(b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc001fc0, "cm5(s,b),t", pa10, 0},
{ "ldws",	0x0c001080, 0xfc001fc0, "cm5(b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cm5(s,b),t", pa10, 0},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cm5(b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cm5(s,b),t", pa10, 0},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cm5(b),t", pa10, 0},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cm5(b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cm5(s,b),t", pa10, 0},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cm5(b),t", pa10, 0},
{ "stws",	0x0c001280, 0xfc001fc0, "cmx,V(s,b)", pa10, 0},
{ "stws",	0x0c001280, 0xfc001fc0, "cmx,V(b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc001fc0, "cmx,V(s,b)", pa10, 0},
{ "sths",	0x0c001240, 0xfc001fc0, "cmx,V(b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc001fc0, "cmx,V(s,b)", pa10, 0},
{ "stbs",	0x0c001200, 0xfc001fc0, "cmx,V(b)", pa10, 0},
{ "stwas",	0x0c001380, 0xfc00dfc0, "cmx,V(b)", pa10, 0},
d447 2
a448 2
{ "stbys",	0x0c001300, 0xfc001fc0, "csx,V(s,b)", pa10, 0},
{ "stbys",	0x0c001300, 0xfc001fc0, "csx,V(b)", pa10, 0},
d487 2
a490 2
{ "bb",		0xc0004000, 0xffe06000, "?bnx,!,w", pa10, FLAG_STRICT}, 
{ "bb",		0xc4004000, 0xfc004000, "?bnx,Q,w", pa10, 0}, 
a705 2
{ "fldw",       0x24001020, 0xfc1f33a0, "cocc@@(s,b),fT", pa20, FLAG_STRICT},
{ "fldw",       0x24001020, 0xfc1f33a0, "cocc@@(b),fT", pa20, FLAG_STRICT},
d710 2
a715 2
{ "fldd",       0x2c001020, 0xfc1f33e0, "cocc@@(s,b),ft", pa20, FLAG_STRICT},
{ "fldd",       0x2c001020, 0xfc1f33e0, "cocc@@(b),ft", pa20, FLAG_STRICT},
d720 2
a723 2
{ "fstw",       0x24001220, 0xfc1f33a0, "cocCfT,@@(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001220, 0xfc1f33a0, "cocCfT,@@(b)", pa10, FLAG_STRICT},
d728 2
a733 2
{ "fstd",       0x2c001220, 0xfc1f33e0, "cocCft,@@(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001220, 0xfc1f33e0, "cocCft,@@(b)", pa10, FLAG_STRICT},
d738 2
d742 4
a745 4
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(s,b),fT", pa10, 0},
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(b),fT", pa10, 0},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(s,b),ft", pa10, 0},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(b),ft", pa10, 0},
d820 38
a857 32
{ "cldwx",      0x24000000, 0xfc001e00, "ucxx(s,b),t", pa10, 0},
{ "cldwx",      0x24000000, 0xfc001e00, "ucxx(b),t", pa10, 0},
{ "clddx",      0x2c000000, 0xfc001e00, "ucxx(s,b),t", pa10, 0},
{ "clddx",      0x2c000000, 0xfc001e00, "ucxx(b),t", pa10, 0},
{ "cstwx",      0x24000200, 0xfc001e00, "ucxt,x(s,b)", pa10, 0},
{ "cstwx",      0x24000200, 0xfc001e00, "ucxt,x(b)", pa10, 0},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucxt,x(s,b)", pa10, 0},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucxt,x(b)", pa10, 0},
{ "cldws",      0x24001000, 0xfc001e00, "ucm5(s,b),t", pa10, 0},
{ "cldws",      0x24001000, 0xfc001e00, "ucm5(b),t", pa10, 0},
{ "cldds",      0x2c001000, 0xfc001e00, "ucm5(s,b),t", pa10, 0},
{ "cldds",      0x2c001000, 0xfc001e00, "ucm5(b),t", pa10, 0},
{ "cstws",      0x24001200, 0xfc001e00, "ucmt,5(s,b)", pa10, 0},
{ "cstws",      0x24001200, 0xfc001e00, "ucmt,5(b)", pa10, 0},
{ "cstds",      0x2c001200, 0xfc001e00, "ucmt,5(s,b)", pa10, 0},
{ "cstds",      0x2c001200, 0xfc001e00, "ucmt,5(b)", pa10, 0},
{ "cldw",       0x24000000, 0xfc001e00, "ucxx(s,b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24000000, 0xfc001e00, "ucxx(b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24001000, 0xfc001e00, "ucm5(s,b),t", pa10, FLAG_STRICT},
{ "cldw",       0x24001000, 0xfc001e00, "ucm5(b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c000000, 0xfc001e00, "ucxx(s,b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c000000, 0xfc001e00, "ucxx(b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c001000, 0xfc001e00, "ucm5(s,b),t", pa10, FLAG_STRICT},
{ "cldd",       0x2c001000, 0xfc001e00, "ucm5(b),t", pa20, FLAG_STRICT},
{ "cstw",       0x24000200, 0xfc001e00, "ucxt,x(s,b)", pa10, FLAG_STRICT},
{ "cstw",       0x24000200, 0xfc001e00, "ucxt,x(b)", pa10, FLAG_STRICT},
{ "cstw",       0x24001200, 0xfc001e00, "ucmt,5(s,b)", pa10, FLAG_STRICT},
{ "cstw",       0x24001200, 0xfc001e00, "ucmt,5(b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c000200, 0xfc001e00, "ucxt,x(s,b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c000200, 0xfc001e00, "ucxt,x(b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c001200, 0xfc001e00, "ucmt,5(s,b)", pa10, FLAG_STRICT},
{ "cstd",       0x2c001200, 0xfc001e00, "ucmt,5(b)", pa10, FLAG_STRICT},
@


1.46
log
@Adds assembly and dis-assembly support for the HPPA wide
mode, 16 bit forms of ldi, ldo, ldw and stw instructions.
@
text
@d2 2
a3 1
   Copyright (C) 1990, 1991, 1993, 1995, 1999, 2000, 2001
@


1.46.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,
   2001
@


1.45
log
@doco addition.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 1991, 1993, 1995, 1999, 2000
d74 3
a76 3
	'  "         -  /   34 6789:;< > @@'
	'  C         M             [\]  '
	'    e g                     } '
d80 3
a82 3
	' !"#$%&'()*+-,./0123456789:;<=>?@@'
	'ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'
	'abcdefghijklmnopqrstuvwxyz{|}~'
d150 1
a150 1
	the bb instruction. Similar to Q, but 64bit handling is
d158 8
a165 6
   d    14bit offset for single precision FP long load/store.
   #    14bit offset for double precision FP load long/store.
   J    Yet another 14bit offset with an unusual encoding.
   K    Yet another 14bit offset with an unusual encoding.
   y    16bit offset for single precision FP long load/store (PA2.0 wide).
   &    16bit offset for double precision FP long load/store (PA2.0 wide).
d284 1
a326 1
{ "ldw",        0x48000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
d333 1
d336 1
d339 1
a339 1
{ "ldw",        0x48000000, 0xfc000000, "j(s,b),x", pa10, 0},
a341 1
{ "ldh",        0x44000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
d348 1
a350 1
{ "ldb",        0x40000000, 0xfc000000, "l(b),x", pa20w, FLAG_STRICT},
d357 1
a365 1
{ "stw",        0x68000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
d370 1
d373 1
d376 1
a378 1
{ "sth",        0x64000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
d383 1
a385 1
{ "stb",        0x60000000, 0xfc000000, "x,l(b)", pa20w, FLAG_STRICT},
d390 1
d448 1
@


1.44
log
@        * hppa.h (pa_opcodes): New opcodes for PA2.0 wide mode
        forms of ld/st{b,h,w,d} and fld/fst{w,d} (16-bit displacements).
        New operand types l,y,&,fe,fE,fx added to support above forms.
        (pa_opcodes): Replaced usage of 'x' as source/target for
        floating point double-word loads/stores with 'fx'.

Fr
@
text
@d2 2
a3 1
   Copyright (C) 1990, 1991, 1993, 1995, 1999 Free Software Foundation, Inc.
d204 1
@


1.43
log
@        * hppa.h (pa_opcodes): Correctly handle immediate for PA2.0 "bb"
        instruction.
@
text
@d73 1
a73 1
	'  "   &     -  /   34 6789:;< > @@'
d75 1
a75 1
	'    e g    l            y   } '
d95 1
d161 2
d249 2
d265 1
a265 1
   commas in their completer sections. */
d278 1
a278 1
/* pseudo-instructions */
d320 1
a320 1
{ "ldd",        0x50000000, 0xfc000002, "cq#(s,b),x", pa20, FLAG_STRICT},
d322 1
d336 1
d345 1
d358 1
a358 1
{ "std",        0x70000000, 0xfc000002, "cqx,#(s,b)", pa20, FLAG_STRICT},
d360 1
d371 1
d378 1
d445 1
a445 1
/* Branching instructions. */
d485 1
a485 1
/* Computation Instructions */
d554 1
a554 1
/* Subword Operation Instructions */
d568 1
a568 1
/* Extract and Deposit Instructions */
d601 1
a601 1
/* System Control Instructions */
d692 1
a692 1
/* Floating Point Coprocessor Instructions */
d700 2
a701 1
{ "fldw",       0x5c000000, 0xfc000004, "d(s,b),fe", pa20, FLAG_STRICT},
d703 1
a703 2
{ "fldw",       0x58000000, 0xfc000004, "cJd(s,b),fe", pa20, FLAG_STRICT},
{ "fldw",       0x58000000, 0xfc000004, "cJd(b),fe", pa20, FLAG_STRICT},
d710 2
a711 2
{ "fldd",       0x50000002, 0xfc000002, "cq#(s,b),x", pa20, FLAG_STRICT},
{ "fldd",       0x50000002, 0xfc000002, "cq#(b),x", pa20, FLAG_STRICT},
d718 2
a719 1
{ "fstw",       0x7c000000, 0xfc000004, "fe,d(s,b)", pa20, FLAG_STRICT},
d721 1
a721 2
{ "fstw",       0x78000000, 0xfc000004, "cJfe,d(s,b)", pa20, FLAG_STRICT},
{ "fstw",       0x78000000, 0xfc000004, "cJfe,d(b)", pa20, FLAG_STRICT},
d728 2
a729 2
{ "fstd",       0x70000002, 0xfc000002, "cqx,#(s,b)", pa20, FLAG_STRICT},
{ "fstd",       0x70000002, 0xfc000002, "cqx,#(b)", pa20, FLAG_STRICT},
d796 1
a796 1
/* Performance Monitor Instructions */
d801 1
a801 1
/* Assist Instructions */
d844 1
a844 1
/* SKV 12/18/92. Added some denotations for various operands. */
@


1.42
log
@        * hppa.h (pa_opcodes):  Add load and store cache control to
        instructions.  Add ordered access load and store.

        * hppa.h (pa_opcode): Add new entries for addb and addib.

        * hppa.h (pa_opcodes): Fix cmpb and cmpib entries.

        * hppa.h (pa_opcodes):  Add entries for cmpb and cmpib.
@
text
@d74 1
a74 1
	' BC         M             [\]  '
d147 3
d465 1
a465 1
{ "bb",		0xc4006000, 0xfc006000, "?Bnx,Q,w", pa20, FLAG_STRICT}, 
@


1.41
log
@Add missing initializer lost in last change.
@
text
@d158 1
d164 1
a164 1
   cq   short load and store completer (like cm, but inserted into a
d167 1
a167 1
   cc   Another load/store completer with a different encoding than the
d169 4
d213 4
a216 6
   ?t   non-negated compare conditions
   ?T	negated compare conditions
   ?r	64 bit non-negated compare conditions
   ?R	64 bit negated compare conditions
   ?Q	64 bit compare conditions for CMPIB instruction
   ?n   compare conditions followed by nullify
d278 2
d284 2
d290 1
d295 1
d305 7
a311 4
{ "ldd",        0x0c0000c0, 0xfc001fc0, "cxx(s,b),t", pa20, FLAG_STRICT},
{ "ldd",        0x0c0000c0, 0xfc001fc0, "cxx(b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010c0, 0xfc001fc0, "cm5(s,b),t", pa20, FLAG_STRICT},
{ "ldd",	0x0c0010c0, 0xfc001fc0, "cm5(b),t", pa20, FLAG_STRICT},
d314 10
a323 8
{ "ldw",        0x0c000080, 0xfc001fc0, "cxx(s,b),t", pa10, FLAG_STRICT},
{ "ldw",        0x0c000080, 0xfc001fc0, "cxx(b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc001fc0, "cm5(s,b),t", pa10, FLAG_STRICT},
{ "ldw",	0x0c001080, 0xfc001fc0, "cm5(b),t", pa10, FLAG_STRICT},
{ "ldw",        0x4c000000, 0xfc000000, "ccJ(s,b),x", pa10, FLAG_STRICT},
{ "ldw",        0x4c000000, 0xfc000000, "ccJ(b),x", pa10, FLAG_STRICT},
{ "ldw",        0x5c000004, 0xfc000006, "ccK(s,b),x", pa20, FLAG_STRICT},
{ "ldw",        0x5c000004, 0xfc000006, "ccK(b),x", pa20, FLAG_STRICT},
d327 6
a332 4
{ "ldh",        0x0c000040, 0xfc001fc0, "cxx(s,b),t", pa10, FLAG_STRICT},
{ "ldh",        0x0c000040, 0xfc001fc0, "cxx(b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc001fc0, "cm5(s,b),t", pa10, FLAG_STRICT},
{ "ldh",	0x0c001040, 0xfc001fc0, "cm5(b),t", pa10, FLAG_STRICT},
d335 6
a340 4
{ "ldb",        0x0c000000, 0xfc001fc0, "cxx(s,b),t", pa10, FLAG_STRICT},
{ "ldb",        0x0c000000, 0xfc001fc0, "cxx(b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc001fc0, "cm5(s,b),t", pa10, FLAG_STRICT},
{ "ldb",	0x0c001000, 0xfc001fc0, "cm5(b),t", pa10, FLAG_STRICT},
d343 4
a346 2
{ "std",	0x0c0012c0, 0xfc001fc0, "cmx,V(s,b)", pa20, FLAG_STRICT},
{ "std",	0x0c0012c0, 0xfc001fc0, "cmx,V(b)", pa20, FLAG_STRICT},
d349 8
a356 6
{ "stw",	0x0c001280, 0xfc001fc0, "cmx,V(s,b)", pa10, FLAG_STRICT},
{ "stw",	0x0c001280, 0xfc001fc0, "cmx,V(b)", pa10, FLAG_STRICT},
{ "stw",        0x6c000000, 0xfc000000, "ccx,J(s,b)", pa10, FLAG_STRICT},
{ "stw",        0x6c000000, 0xfc000000, "ccx,J(b)", pa10, FLAG_STRICT},
{ "stw",        0x7c000004, 0xfc000006, "ccx,K(s,b)", pa20, FLAG_STRICT},
{ "stw",        0x7c000004, 0xfc000006, "ccx,K(b)", pa20, FLAG_STRICT},
d359 4
a362 2
{ "sth",	0x0c001240, 0xfc001fc0, "cmx,V(s,b)", pa10, FLAG_STRICT},
{ "sth",	0x0c001240, 0xfc001fc0, "cmx,V(b)", pa10, FLAG_STRICT},
d365 4
a368 2
{ "stb",	0x0c001200, 0xfc001fc0, "cmx,V(s,b)", pa10, FLAG_STRICT},
{ "stb",	0x0c001200, 0xfc001fc0, "cmx,V(b)", pa10, FLAG_STRICT},
d381 20
a400 17
{ "ldwa",       0x0c000180, 0xfc00dfc0, "cxx(b),t", pa10, FLAG_STRICT},
{ "ldwa",	0x0c001180, 0xfc00dfc0, "cm5(b),t", pa10, FLAG_STRICT},
{ "ldcw",       0x0c0001c0, 0xfc001fc0, "cxx(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",       0x0c0001c0, 0xfc001fc0, "cxx(b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cm5(s,b),t", pa10, FLAG_STRICT},
{ "ldcw",	0x0c0011c0, 0xfc001fc0, "cm5(b),t", pa10, FLAG_STRICT},
{ "stwa",	0x0c001380, 0xfc00dfc0, "cmx,V(b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc001fc0, "csx,V(s,b)", pa10, FLAG_STRICT},
{ "stby",	0x0c001300, 0xfc001fc0, "csx,V(b)", pa10, FLAG_STRICT},
{ "ldda",       0x0c000100, 0xfc00dfc0, "cxx(b),t", pa20, FLAG_STRICT},
{ "ldda",	0x0c001100, 0xfc00dfc0, "cm5(b),t", pa20, FLAG_STRICT},
{ "ldcd",       0x0c000140, 0xfc001fc0, "cxx(s,b),t", pa20, FLAG_STRICT},
{ "ldcd",       0x0c000140, 0xfc001fc0, "cxx(b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c001140, 0xfc001fc0, "cm5(s,b),t", pa20, FLAG_STRICT},
{ "ldcd",	0x0c001140, 0xfc001fc0, "cm5(b),t", pa20, FLAG_STRICT},
{ "stda",	0x0c0013c0, 0xfc001fc0, "cmx,V(s,b)", pa20, FLAG_STRICT},
{ "stda",	0x0c0013c0, 0xfc001fc0, "cmx,V(b)", pa20, FLAG_STRICT},
d420 2
a421 2
{ "stdby",	0x0c001340, 0xfc001fc0, "csx,V(s,b)", pa20, FLAG_STRICT},
{ "stdby",	0x0c001340, 0xfc001fc0, "csx,V(b)", pa20, FLAG_STRICT},
d680 6
a685 4
{ "fldw",       0x24000000, 0xfc001f80, "cxx(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24000000, 0xfc001f80, "cxx(b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10, FLAG_STRICT},
{ "fldw",       0x24001000, 0xfc001f80, "cm5(b),fT", pa10, FLAG_STRICT},
d690 6
a695 4
{ "fldd",       0x2c000000, 0xfc001fc0, "cxx(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c000000, 0xfc001fc0, "cxx(b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10, FLAG_STRICT},
{ "fldd",       0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10, FLAG_STRICT},
d698 6
a703 4
{ "fstw",       0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24000200, 0xfc001f80, "cxfT,x(b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10, FLAG_STRICT},
{ "fstw",       0x24001200, 0xfc001f80, "cmfT,5(b)", pa10, FLAG_STRICT},
d708 6
a713 4
{ "fstd",       0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10, FLAG_STRICT},
{ "fstd",       0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10, FLAG_STRICT},
@


1.40
log
@        * hppa.h (pa_opcodes): Add "call" and "ret".  Clean up "b", "bve"
        and "be" using completer prefixes.
@
text
@d407 1
a407 1
{ "b",		0xe8000000, 0xffe0e000, "nW", pa10},  /* b,l foo,r0 */
@


1.39
log
@        * hppa.h (pa_opcodes): Add initializers to silence compiler.
@
text
@d74 2
a75 2
	'  C                     Y [\]  '
	'    e                   y   } '
a147 3
   g    ,gate completer for new syntax branch
   l	,l completer for new syntax branch
   M    ,push completer for new syntax branch
a148 1
   B    ,pop completer for new syntax branch
d157 1
d169 5
d267 1
a268 5
{ "b",		0xe8002000, 0xfc00e000, "gnW,b", pa10, FLAG_STRICT},
{ "b",		0xe8008000, 0xfc00e000, "lMnXL", pa20, FLAG_STRICT},
{ "b",		0xe800a000, 0xfc00e000, "lnXL", pa20, FLAG_STRICT},
{ "b",		0xe8000000, 0xfc00e000, "lnW,b", pa10, FLAG_STRICT},
{ "b",		0xe8000000, 0xffe0e000, "nW", pa10, 0}, /* bl foo,r0 */
d270 5
d403 5
d413 6
a418 6
{ "bve",	0xe800f001, 0xfc00ffff, "lMn(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800f000, 0xfc00ffff, "ln(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800d001, 0xfc00ffff, "Bn(b)", pa20, FLAG_STRICT},
{ "bve",	0xe800d000, 0xfc00ffff, "n(b)", pa20, FLAG_STRICT},
{ "be",		0xe4000000, 0xfc000000, "lnz(S,b)", pa10, FLAG_STRICT},
{ "be",		0xe0000000, 0xfc000000, "nz(S,b)", pa10, FLAG_STRICT},
d420 1
@


1.38
log
@        * hppa.h: Update comments about character usage.
@
text
@d270 3
a272 3
{ "b",		0xe8000000, 0xffe0e000, "nW", pa10}, /* bl foo,r0 */
{ "ldi",	0x34000000, 0xffe0c000, "j,x", pa10},	/* ldo val(r0),r */
{ "comib", 	0x84000000, 0xfc000000, "?nn5,b,w", pa10}, /* comib{tf}*/
d275 2
a276 2
{ "comib", 	0x8c000000, 0xfc000000, "?nn5,b,w", pa10}, /* comib{tf}*/
{ "comb",	0x80000000, 0xfc000000, "?nnx,b,w", pa10}, /* comb{tf} */
d279 2
a280 2
{ "comb",	0x88000000, 0xfc000000, "?nnx,b,w", pa10}, /* comb{tf} */
{ "addb",	0xa0000000, 0xfc000000, "?@@nx,b,w", pa10}, /* addb{tf} */
d283 2
a284 2
{ "addb",	0xa8000000, 0xfc000000, "?@@nx,b,w", pa10},
{ "addib",	0xa4000000, 0xfc000000, "?@@n5,b,w", pa10}, /* addib{tf}*/
d287 4
a290 4
{ "addib",	0xac000000, 0xfc000000, "?@@n5,b,w", pa10}, /* addib{tf}*/
{ "nop",        0x08000240, 0xffffffff, "", pa10},      /* or 0,0,0 */
{ "copy",       0x08000240, 0xffe0ffe0, "x,t", pa10},   /* or r,0,t */
{ "mtsar",      0x01601840, 0xffe0ffff, "x", pa10}, /* mtctl r,cr11 */
d307 3
a309 3
{ "ldw",        0x48000000, 0xfc000000, "j(s,b),x", pa10},
{ "ldw",        0x48000000, 0xfc000000, "j(s,b),x", pa10},
{ "ldw",        0x48000000, 0xfc000000, "j(b),x", pa10},
d314 2
a315 2
{ "ldh",        0x44000000, 0xfc000000, "j(s,b),x", pa10},
{ "ldh",        0x44000000, 0xfc000000, "j(b),x", pa10},
d320 2
a321 2
{ "ldb",        0x40000000, 0xfc000000, "j(s,b),x", pa10},
{ "ldb",        0x40000000, 0xfc000000, "j(b),x", pa10},
d332 2
a333 2
{ "stw",        0x68000000, 0xfc000000, "x,j(s,b)", pa10},
{ "stw",        0x68000000, 0xfc000000, "x,j(b)", pa10},
d336 2
a337 2
{ "sth",        0x64000000, 0xfc000000, "x,j(s,b)", pa10},
{ "sth",        0x64000000, 0xfc000000, "x,j(b)", pa10},
d340 12
a351 12
{ "stb",        0x60000000, 0xfc000000, "x,j(s,b)", pa10},
{ "stb",        0x60000000, 0xfc000000, "x,j(b)", pa10},
{ "ldwm",       0x4c000000, 0xfc000000, "j(s,b),x", pa10},
{ "ldwm",       0x4c000000, 0xfc000000, "j(b),x", pa10},
{ "stwm",       0x6c000000, 0xfc000000, "x,j(s,b)", pa10},
{ "stwm",       0x6c000000, 0xfc000000, "x,j(b)", pa10},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cxx(s,b),t", pa10},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cxx(b),t", pa10},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cxx(s,b),t", pa10},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cxx(b),t", pa10},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cxx(s,b),t", pa10},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cxx(b),t", pa10},
d369 19
a387 19
{ "ldwax",      0x0c000180, 0xfc00dfc0, "cxx(b),t", pa10},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cxx(s,b),t", pa10},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cxx(b),t", pa10},
{ "ldws",	0x0c001080, 0xfc001fc0, "cm5(s,b),t", pa10},
{ "ldws",	0x0c001080, 0xfc001fc0, "cm5(b),t", pa10},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cm5(s,b),t", pa10},
{ "ldhs",	0x0c001040, 0xfc001fc0, "cm5(b),t", pa10},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cm5(s,b),t", pa10},
{ "ldbs",	0x0c001000, 0xfc001fc0, "cm5(b),t", pa10},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "cm5(b),t", pa10},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cm5(s,b),t", pa10},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "cm5(b),t", pa10},
{ "stws",	0x0c001280, 0xfc001fc0, "cmx,V(s,b)", pa10},
{ "stws",	0x0c001280, 0xfc001fc0, "cmx,V(b)", pa10},
{ "sths",	0x0c001240, 0xfc001fc0, "cmx,V(s,b)", pa10},
{ "sths",	0x0c001240, 0xfc001fc0, "cmx,V(b)", pa10},
{ "stbs",	0x0c001200, 0xfc001fc0, "cmx,V(s,b)", pa10},
{ "stbs",	0x0c001200, 0xfc001fc0, "cmx,V(b)", pa10},
{ "stwas",	0x0c001380, 0xfc00dfc0, "cmx,V(b)", pa10},
d390 2
a391 2
{ "stbys",	0x0c001300, 0xfc001fc0, "csx,V(s,b)", pa10},
{ "stbys",	0x0c001300, 0xfc001fc0, "csx,V(b)", pa10},
d394 4
a397 4
{ "ldo",	0x34000000, 0xfc00c000, "j(b),x", pa10},
{ "ldil",	0x20000000, 0xfc000000, "k,b", pa10},
{ "addil",	0x28000000, 0xfc000000, "k,b,Z", pa10},
{ "addil",	0x28000000, 0xfc000000, "k,b", pa10},
d400 5
a404 5
{ "bl",		0xe8000000, 0xfc00e000, "nW,b", pa10},
{ "gate",	0xe8002000, 0xfc00e000, "nW,b", pa10},
{ "blr",	0xe8004000, 0xfc00e001, "nx,b", pa10},
{ "bv",		0xe800c000, 0xfc00fffd, "nx(b)", pa10},
{ "bv",		0xe800c000, 0xfc00fffd, "n(b)", pa10},
d411 12
a422 12
{ "be",		0xe0000000, 0xfc000000, "nz(S,b)", pa10},
{ "ble",	0xe4000000, 0xfc000000, "nz(S,b)", pa10},
{ "movb",	0xc8000000, 0xfc000000, "?ynx,b,w", pa10},
{ "movib",	0xcc000000, 0xfc000000, "?yn5,b,w", pa10},
{ "combt",	0x80000000, 0xfc000000, "?tnx,b,w", pa10},
{ "combf",	0x88000000, 0xfc000000, "?tnx,b,w", pa10},
{ "comibt",	0x84000000, 0xfc000000, "?tn5,b,w", pa10},
{ "comibf",	0x8c000000, 0xfc000000, "?tn5,b,w", pa10},
{ "addbt",	0xa0000000, 0xfc000000, "?dnx,b,w", pa10},
{ "addbf",	0xa8000000, 0xfc000000, "?dnx,b,w", pa10},
{ "addibt",	0xa4000000, 0xfc000000, "?dn5,b,w", pa10},
{ "addibf",	0xac000000, 0xfc000000, "?dn5,b,w", pa10},
d426 2
a427 2
{ "bb",		0xc4004000, 0xfc004000, "?bnx,Q,w", pa10}, 
{ "bvb",	0xc0004000, 0xffe04000, "?bnx,w", pa10},
d437 1
a437 1
{ "comclr",     0x08000880, 0xfc000fe0, "?sx,b,t", pa10},
d439 1
a439 1
{ "or",         0x08000240, 0xfc000fe0, "?lx,b,t", pa10},
d441 1
a441 1
{ "xor",        0x08000280, 0xfc000fe0, "?lx,b,t", pa10},
d443 1
a443 1
{ "and",        0x08000200, 0xfc000fe0, "?lx,b,t", pa10},
d445 1
a445 1
{ "andcm",      0x08000000, 0xfc000fe0, "?lx,b,t", pa10},
d447 1
a447 1
{ "uxor",       0x08000380, 0xfc000fe0, "?ux,b,t", pa10},
d450 2
a451 2
{ "uaddcm",     0x08000980, 0xfc000fe0, "?ux,b,t", pa10},
{ "uaddcmt",    0x080009c0, 0xfc000fe0, "?ux,b,t", pa10},
d454 2
a455 2
{ "dcor",       0x08000b80, 0xfc1f0fe0, "?ub,t",   pa10},
{ "idcor",      0x08000bc0, 0xfc1f0fe0, "?ub,t",   pa10},
d458 4
a461 4
{ "addi",       0xb4000000, 0xfc000800, "?ai,b,x", pa10},
{ "addio",      0xb4000800, 0xfc000800, "?ai,b,x", pa10},
{ "addit",      0xb0000000, 0xfc000800, "?ai,b,x", pa10},
{ "addito",     0xb0000800, 0xfc000800, "?ai,b,x", pa10},
d466 5
a470 5
{ "add",        0x08000600, 0xfc000fe0, "?ax,b,t", pa10},
{ "addl",       0x08000a00, 0xfc000fe0, "?ax,b,t", pa10},
{ "addo",       0x08000e00, 0xfc000fe0, "?ax,b,t", pa10},
{ "addc",       0x08000700, 0xfc000fe0, "?ax,b,t", pa10},
{ "addco",      0x08000f00, 0xfc000fe0, "?ax,b,t", pa10},
d477 7
a483 7
{ "sub",        0x08000400, 0xfc000fe0, "?sx,b,t", pa10},
{ "subo",       0x08000c00, 0xfc000fe0, "?sx,b,t", pa10},
{ "subb",       0x08000500, 0xfc000fe0, "?sx,b,t", pa10},
{ "subbo",      0x08000d00, 0xfc000fe0, "?sx,b,t", pa10},
{ "subt",       0x080004c0, 0xfc000fe0, "?sx,b,t", pa10},
{ "subto",      0x08000cc0, 0xfc000fe0, "?sx,b,t", pa10},
{ "ds",         0x08000440, 0xfc000fe0, "?sx,b,t", pa10},
d485 2
a486 2
{ "subi",       0x94000000, 0xfc000800, "?si,b,x", pa10},
{ "subio",      0x94000800, 0xfc000800, "?si,b,x", pa10},
d489 1
a489 1
{ "comiclr",    0x90000000, 0xfc000800, "?si,b,x", pa10},
d492 9
a500 9
{ "sh1add",     0x08000640, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh1addl",    0x08000a40, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh1addo",    0x08000e40, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh2add",     0x08000680, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh2addl",    0x08000a80, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh2addo",    0x08000e80, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh3add",     0x080006c0, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh3addl",    0x08000ac0, 0xfc000fe0, "?ax,b,t", pa10},
{ "sh3addo",    0x08000ec0, 0xfc000fe0, "?ax,b,t", pa10},
d522 2
a523 2
{ "vshd",       0xd0000000, 0xfc001fe0, "?xx,b,t", pa10},
{ "shd",        0xd0000800, 0xfc001c00, "?xx,b,p,t", pa10},
d528 4
a531 4
{ "vextru",     0xd0001000, 0xfc001fe0, "?xb,T,x", pa10},
{ "vextrs",     0xd0001400, 0xfc001fe0, "?xb,T,x", pa10},
{ "extru",      0xd0001800, 0xfc001c00, "?xb,P,T,x", pa10},
{ "extrs",      0xd0001c00, 0xfc001c00, "?xb,P,T,x", pa10},
d540 8
a547 8
{ "zvdep",      0xd4000000, 0xfc001fe0, "?xx,T,b", pa10},
{ "vdep",       0xd4000400, 0xfc001fe0, "?xx,T,b", pa10},
{ "zdep",       0xd4000800, 0xfc001c00, "?xx,p,T,b", pa10},
{ "dep",        0xd4000c00, 0xfc001c00, "?xx,p,T,b", pa10},
{ "zvdepi",     0xd4001000, 0xfc001fe0, "?x5,T,b", pa10},
{ "vdepi",      0xd4001400, 0xfc001fe0, "?x5,T,b", pa10},
{ "zdepi",      0xd4001800, 0xfc001c00, "?x5,p,T,b", pa10},
{ "depi",       0xd4001c00, 0xfc001c00, "?x5,p,T,b", pa10},
d551 1
a551 1
{ "break",      0x00000000, 0xfc001fe0, "r,A", pa10},
d553 2
a554 2
{ "rfi",        0x00000c00, 0xffffffff, "", pa10},
{ "rfir",       0x00000ca0, 0xffffffff, "", pa11},
d556 1
a556 1
{ "ssm",        0x00000d60, 0xffe0ffe0, "R,t", pa10},
d558 6
a563 6
{ "rsm",        0x00000e60, 0xffe0ffe0, "R,t", pa10},
{ "mtsm",       0x00001860, 0xffe0ffff, "x", pa10},
{ "ldsid",      0x000010a0, 0xfc1f3fe0, "(s,b),t", pa10},
{ "ldsid",      0x000010a0, 0xfc1f3fe0, "(b),t", pa10},
{ "mtsp",       0x00001820, 0xffe01fff, "x,S", pa10},
{ "mtctl",      0x00001840, 0xfc00ffff, "x,^", pa10},
d566 1
a566 1
{ "mfsp",       0x000004a0, 0xffff1fe0, "S,t", pa10},
d568 3
a570 3
{ "mfctl",      0x000008a0, 0xfc1fffe0, "^,t", pa10},
{ "sync",       0x00000400, 0xffffffff, "", pa10},
{ "syncdma",    0x00100400, 0xffffffff, "", pa10},
d575 14
a588 14
{ "prober",     0x04001180, 0xfc003fe0, "(s,b),x,t", pa10},
{ "prober",     0x04001180, 0xfc003fe0, "(b),x,t", pa10},
{ "proberi",    0x04003180, 0xfc003fe0, "(s,b),R,t", pa10},
{ "proberi",    0x04003180, 0xfc003fe0, "(b),R,t", pa10},
{ "probew",     0x040011c0, 0xfc003fe0, "(s,b),x,t", pa10},
{ "probew",     0x040011c0, 0xfc003fe0, "(b),x,t", pa10},
{ "probewi",    0x040031c0, 0xfc003fe0, "(s,b),R,t", pa10},
{ "probewi",    0x040031c0, 0xfc003fe0, "(b),R,t", pa10},
{ "lpa",        0x04001340, 0xfc003fc0, "cZx(s,b),t", pa10},
{ "lpa",        0x04001340, 0xfc003fc0, "cZx(b),t", pa10},
{ "lha",        0x04001300, 0xfc003fc0, "cZx(s,b),t", pa10},
{ "lha",        0x04001300, 0xfc003fc0, "cZx(b),t", pa10},
{ "lci",        0x04001300, 0xfc003fe0, "x(s,b),t", pa10},
{ "lci",        0x04001300, 0xfc003fe0, "x(b),t", pa10},
d591 2
a592 2
{ "pdtlb",      0x04001200, 0xfc003fdf, "cZx(s,b)", pa10},
{ "pdtlb",      0x04001200, 0xfc003fdf, "cZx(b)", pa10},
d595 25
a619 25
{ "pitlb",      0x04000200, 0xfc001fdf, "cZx(S,b)", pa10},
{ "pitlb",      0x04000200, 0xfc001fdf, "cZx(b)", pa10},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "cZx(s,b)", pa10},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "cZx(b)", pa10},
{ "pitlbe",     0x04000240, 0xfc001fdf, "cZx(S,b)", pa10},
{ "pitlbe",     0x04000240, 0xfc001fdf, "cZx(b)", pa10},
{ "idtlba",     0x04001040, 0xfc003fff, "x,(s,b)", pa10},
{ "idtlba",     0x04001040, 0xfc003fff, "x,(b)", pa10},
{ "iitlba",     0x04000040, 0xfc001fff, "x,(S,b)", pa10},
{ "iitlba",     0x04000040, 0xfc001fff, "x,(b)", pa10},
{ "idtlbp",     0x04001000, 0xfc003fff, "x,(s,b)", pa10},
{ "idtlbp",     0x04001000, 0xfc003fff, "x,(b)", pa10},
{ "iitlbp",     0x04000000, 0xfc001fff, "x,(S,b)", pa10},
{ "iitlbp",     0x04000000, 0xfc001fff, "x,(b)", pa10},
{ "pdc",        0x04001380, 0xfc003fdf, "cZx(s,b)", pa10},
{ "pdc",        0x04001380, 0xfc003fdf, "cZx(b)", pa10},
{ "fdc",        0x04001280, 0xfc003fdf, "cZx(s,b)", pa10},
{ "fdc",        0x04001280, 0xfc003fdf, "cZx(b)", pa10},
{ "fic",        0x04000280, 0xfc001fdf, "cZx(S,b)", pa10},
{ "fic",        0x04000280, 0xfc001fdf, "cZx(b)", pa10},
{ "fdce",       0x040012c0, 0xfc003fdf, "cZx(s,b)", pa10},
{ "fdce",       0x040012c0, 0xfc003fdf, "cZx(b)", pa10},
{ "fice",       0x040002c0, 0xfc001fdf, "cZx(S,b)", pa10},
{ "fice",       0x040002c0, 0xfc001fdf, "cZx(b)", pa10},
{ "diag",       0x14000000, 0xfc000000, "D", pa10},
d626 6
a631 6
{ "mtcpu",      0x14001600, 0xfc00ffff, "x,^"},
{ "mfcpu",      0x14001A00, 0xfc00ffff, "^,x"},
{ "tocen",      0x14403600, 0xffffffff, ""},
{ "tocdis",     0x14401620, 0xffffffff, ""},
{ "shdwgr",     0x14402600, 0xffffffff, ""},
{ "grshdw",     0x14400620, 0xffffffff, ""},
d635 4
a638 4
{ "gfw",	0x04001680, 0xfc003fdf, "cZx(s,b)", pa11},
{ "gfw",	0x04001680, 0xfc003fdf, "cZx(b)", pa11},
{ "gfr",	0x04001a80, 0xfc003fdf, "cZx(s,b)", pa11},
{ "gfr",	0x04001a80, 0xfc003fdf, "cZx(b)", pa11},
d670 46
a715 46
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(s,b),fT", pa10},
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(b),fT", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(s,b),ft", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(b),ft", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cxfT,x(s,b)", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cxfT,x(b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxft,x(s,b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxft,x(b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxft,x(s,b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxft,x(b)", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(s,b),fT", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(b),fT", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(s,b),ft", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(b),ft", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "cmfT,5(s,b)", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "cmfT,5(b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmft,5(s,b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmft,5(b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmft,5(s,b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmft,5(b)", pa10},
{ "fadd",       0x30000600, 0xfc00e7e0, "Ffa,fb,fT", pa10},
{ "fadd",       0x38000600, 0xfc00e720, "IfA,fB,fT", pa10},
{ "fsub",       0x30002600, 0xfc00e7e0, "Ffa,fb,fT", pa10},
{ "fsub",       0x38002600, 0xfc00e720, "IfA,fB,fT", pa10},
{ "fmpy",       0x30004600, 0xfc00e7e0, "Ffa,fb,fT", pa10},
{ "fmpy",       0x38004600, 0xfc00e720, "IfA,fB,fT", pa10},
{ "fdiv",       0x30006600, 0xfc00e7e0, "Ffa,fb,fT", pa10},
{ "fdiv",       0x38006600, 0xfc00e720, "IfA,fB,fT", pa10},
{ "fsqrt",      0x30008000, 0xfc1fe7e0, "Ffa,fT", pa10},
{ "fsqrt",      0x38008000, 0xfc1fe720, "FfA,fT", pa10},
{ "fabs",       0x30006000, 0xfc1fe7e0, "Ffa,fT", pa10},
{ "fabs",       0x38006000, 0xfc1fe720, "FfA,fT", pa10},
{ "frem",       0x30008600, 0xfc00e7e0, "Ffa,fb,fT", pa10},
{ "frem",       0x38008600, 0xfc00e720, "FfA,fB,fT", pa10},
{ "frnd",       0x3000a000, 0xfc1fe7e0, "Ffa,fT", pa10},
{ "frnd",       0x3800a000, 0xfc1fe720, "FfA,fT", pa10},
{ "fcpy",       0x30004000, 0xfc1fe7e0, "Ffa,fT", pa10},
{ "fcpy",       0x38004000, 0xfc1fe720, "FfA,fT", pa10},
{ "fcnvff",     0x30000200, 0xfc1f87e0, "FGfa,fT", pa10},
{ "fcnvff",     0x38000200, 0xfc1f8720, "FGfA,fT", pa10},
{ "fcnvxf",     0x30008200, 0xfc1f87e0, "FGfa,fT", pa10},
{ "fcnvxf",     0x38008200, 0xfc1f8720, "FGfA,fT", pa10},
{ "fcnvfx",     0x30010200, 0xfc1f87e0, "FGfa,fT", pa10},
{ "fcnvfx",     0x38010200, 0xfc1f8720, "FGfA,fT", pa10},
{ "fcnvfxt",    0x30018200, 0xfc1f87e0, "FGfa,fT", pa10},
{ "fcnvfxt",    0x38018200, 0xfc1f8720, "FGfA,fT", pa10},
d726 5
a730 5
{ "fcmp",       0x30000400, 0xfc00e7e0, "F?ffa,fb", pa10},
{ "fcmp",       0x38000400, 0xfc00e720, "I?ffA,fB", pa10},
{ "xmpyu",	0x38004700, 0xfc00e720, "fX,fB,fT", pa11},
{ "fmpyadd",	0x18000000, 0xfc000000, "Hfi,fj,fk,fl,fm", pa11},
{ "fmpysub",	0x98000000, 0xfc000000, "Hfi,fj,fk,fl,fm", pa11},
d733 2
a734 2
{ "ftest",      0x30002420, 0xffffffff, "", pa10},
{ "fid",        0x30000000, 0xffffffff, "", pa11},
d743 21
a763 21
{ "spop0",      0x10000000, 0xfc000600, "v,ON", pa10},
{ "spop1",      0x10000200, 0xfc000600, "v,oNt", pa10},
{ "spop2",      0x10000400, 0xfc000600, "v,1Nb", pa10},
{ "spop3",      0x10000600, 0xfc000600, "v,0Nx,b", pa10},
{ "copr",       0x30000000, 0xfc000000, "u,2N", pa10},
{ "cldwx",      0x24000000, 0xfc001e00, "ucxx(s,b),t", pa10},
{ "cldwx",      0x24000000, 0xfc001e00, "ucxx(b),t", pa10},
{ "clddx",      0x2c000000, 0xfc001e00, "ucxx(s,b),t", pa10},
{ "clddx",      0x2c000000, 0xfc001e00, "ucxx(b),t", pa10},
{ "cstwx",      0x24000200, 0xfc001e00, "ucxt,x(s,b)", pa10},
{ "cstwx",      0x24000200, 0xfc001e00, "ucxt,x(b)", pa10},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucxt,x(s,b)", pa10},
{ "cstdx",      0x2c000200, 0xfc001e00, "ucxt,x(b)", pa10},
{ "cldws",      0x24001000, 0xfc001e00, "ucm5(s,b),t", pa10},
{ "cldws",      0x24001000, 0xfc001e00, "ucm5(b),t", pa10},
{ "cldds",      0x2c001000, 0xfc001e00, "ucm5(s,b),t", pa10},
{ "cldds",      0x2c001000, 0xfc001e00, "ucm5(b),t", pa10},
{ "cstws",      0x24001200, 0xfc001e00, "ucmt,5(s,b)", pa10},
{ "cstws",      0x24001200, 0xfc001e00, "ucmt,5(b)", pa10},
{ "cstds",      0x2c001200, 0xfc001e00, "ucmt,5(s,b)", pa10},
{ "cstds",      0x2c001200, 0xfc001e00, "ucmt,5(b)", pa10},
@


1.37
log
@
        * hppa.h (pa_opcodes): Fix minor thinkos introduced while cleaning
        up the new fstw & bve instructions.
@
text
@d110 1
d112 2
d228 1
a228 1
  
@


1.36
log
@        * hppa.h (pa_opcodes): Add remaining PA2.0 integer load/store
        instructions.
@
text
@d402 4
a405 4
{ "bve",	0xe800f000, 0xfc00fffe, "ln(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800f001, 0xfc00fffe, "lMn(b)L", pa20, FLAG_STRICT},
{ "bve",	0xe800f001, 0xfc00fffe, "Bn(b)", pa20, FLAG_STRICT},
{ "bve",	0xe800d000, 0xfc00fffe, "n(b)", pa20, FLAG_STRICT},
d657 4
a660 4
{ "fstw",       0x78000000, 0xfc000004, "fe,d(s,b)", pa20, FLAG_STRICT},
{ "fstw",       0x78000000, 0xfc000004, "fe,d(b)", pa20, FLAG_STRICT},
{ "fstw",       0x7c000000, 0xfc000004, "cJfe,d(s,b)", pa20, FLAG_STRICT},
{ "fstw",       0x7c000000, 0xfc000004, "cJfe,d(b)", pa20, FLAG_STRICT},
@


1.35
log
@        * hppa.h (pa_opcodes): Add remaining PA2.0 FP load/store instructions.
@
text
@d74 1
a74 1
	'  C      JK             Y [\]  '
d156 2
d166 2
d300 5
d325 4
@


1.34
log
@        * hppa.h (pa_opcodes): Add long offset double word load/store
        instructions.
@
text
@d230 1
d630 4
d644 4
@


1.33
log
@        * hppa.h (pa_opcodes): Add FLAG_STRICT variants of FP loads and
        stores.
@
text
@d73 3
a75 3
	'  "#  &     -  /   34 6789:;< > @@'
	'  C      JK            XY [\]  '
	'   de                   y   } '
d154 2
d161 2
d289 2
d311 2
d633 2
d643 2
@


1.32
log
@        * hppa.h (pa_opcodes): Handle PA2.0 fcnv, fcmp and ftest insns.
@
text
@d616 17
a632 1
  
@


1.31
log
@        * hppa.h (pa_opcodes): Finish support for PA2.0 "b" instructions.
@
text
@d75 1
a75 1
	'   de  h    m           y { } '
d150 4
d669 4
d678 2
@


1.30
log
@        * hppa.h (pa_opcodes): Handle PA2.0 "bve" instructions.
@
text
@d99 1
d251 2
@


1.29
log
@        * hppa.h (pa_opcodes): Add new syntax "be" instructions.
@
text
@d74 1
a74 1
	' BC      JK            XY [\]  '
d148 1
d373 4
@


1.28
log
@        * hppa.h (pa_opcodes): Note use of 'M' and 'L'.
@
text
@d372 2
@


1.27
log
@        * hppa.h (pa_opcodes): Add support for "b,l".
@
text
@d74 1
a74 1
	' BC      JKLM          XY [\]  '
d146 2
@


1.26
log
@
        * hppa.h (pa_opcodes): Add support for "b,gate".
@
text
@d75 1
a75 1
	'   de  h   lm           y { } '
d145 1
d247 1
@


1.25
log
@        * hppa.h (pa_opcodes): Use 'fX' for first register operand
        in xmpyu.
@
text
@d75 1
a75 1
	'   de gh   lm           y { } '
d144 1
d245 1
a245 2
/* pseudo-instructions */

@


1.24
log
@        * hppa.h (pa_opcodes): Fix mask for probe and probei.
@
text
@d212 1
d653 1
a653 1
{ "xmpyu",	0x38004700, 0xfc00e720, "fA,fB,fT", pa11},
@


1.23
log
@
        * hppa.h (pa_opcodes): Fix mask for depwi.
@
text
@d527 4
a530 4
{ "probe",      0x04001180, 0xfc003fe0, "cw(s,b),x,t", pa10, FLAG_STRICT},
{ "probe",      0x04001180, 0xfc003fe0, "cw(b),x,t", pa10, FLAG_STRICT},
{ "probei",     0x04003180, 0xfc003fe0, "cw(s,b),R,t", pa10, FLAG_STRICT},
{ "probei",     0x04003180, 0xfc003fe0, "cw(b),R,t", pa10, FLAG_STRICT},
@


1.22
log
@
        * hppa.h (pa_opcodes): Add "addil" variant which has the %r1 as
        an explicit output argument.
@
text
@d495 1
a495 1
{ "depwi",      0xd4001800, 0xfc001be0, "cz?x5,p,T,b", pa10, FLAG_STRICT},
@


1.21
log
@
        * hppa.h: Add strict variants of PA1.0/PA1.1 loads and stores.
        Add a few PA2.0 loads and store variants.
@
text
@d74 1
a74 1
	' BC      JKLM          XYZ[\]  '
d143 1
d358 1
@


1.20
log
@        * hppa.h (pa_opcodes): Replace 'f' by 'v'.  Prefix float register args
        by 'f'.
@
text
@d267 8
d277 4
d283 4
d289 4
d295 2
d299 2
d313 17
d349 2
d574 2
d684 16
@


1.19
log
@        * hppa.h (pa_opcodes): Add extrd, extrw, depd, depdi, depw, depwi.
        Add supporting args.
@
text
@d73 3
a75 3
	'  "#  &     -  /          :;< > @@'
	' BC        LM       U   YZ[\]  '
	'   de gh   lm             { } '
a87 1
   y    floating point register field at 31
d101 43
d205 17
a221 33
Also these:

   .    2 bit shift amount at 25
   *    4 bit shift amount at 25
   p    5 bit shift count at 26 (to support the SHD instruction) encoded as
        31-p
   ~    6 bit shift count at 20,22:26 encoded as 63-~.
   P    5 bit bit position at 26
   q    6 bit bit position at 20,22:26
   T    5 bit field length at 31 (encoded as 32-T)
   %	6 bit field length at 23,27:31 (variable extract/deposit)
   |	6 bit field length at 19,27:31 (fixed extract/deposit)
   A    13 bit immediate at 18 (to support the BREAK instruction)
   ^	like b, but describes a control register
   !    sar (cr11) register
   D    26 bit immediate at 31 (to support the DIAG instruction)
   $    9 bit immediate at 28 (to support POPBTS)

   f    3 bit Special Function Unit identifier at 25
   O    20 bit Special Function Unit operation split between 15 bits at 20
        and 5 bits at 31
   o    15 bit Special Function Unit operation at 20
   2    22 bit Special Function Unit operation split between 17 bits at 20
        and 5 bits at 31
   1    15 bit Special Function Unit operation split between 10 bits at 20
        and 5 bits at 31
   0    10 bit Special Function Unit operation split between 5 bits at 20
        and 5 bits at 31
   u    3 bit coprocessor unit identifier at 25
   F    Source Floating Point Operand Format Completer encoded 2 bits at 20
   I    Source Floating Point Operand Format Completer encoded 1 bits at 20
	(for 0xe format FP instructions)
   G    Destination Floating Point Operand Format Completer encoded 2 bits at 18
a222 24
   r	5 bit immediate value at 31 (for the break instruction)
	(very similar to V above, except the value is unsigned instead of
	low_sign_ext)
   R	5 bit immediate value at 15 (for the ssm, rsm, probei instructions)
	(same as r above, except the value is in a different location)
   U	10 bit immediate value at 15 (for SSM, RSM on pa2.0)
   Q	5 bit immediate value at 10 (a bit position specified in
	the bb instruction. It's the same as r above, except the
        value is in a different location)

And these (PJH) for PA-89 F.P. registers and instructions:

   v    a 't' operand type extended to handle L/R register halves.
   E    a 'b' operand type extended to handle L/R register halves.
   X    an 'x' operand type extended to handle L/R register halves.
   J    a 'b' operand type further extended to handle extra 1.1 registers
   K    a 'x' operand type further extended to handle extra 1.1 registers
   4    a variation of the 'b' operand type for 'fmpyadd' and 'fmpysub'
   6    a variation of the 'x' operand type for 'fmpyadd' and 'fmpysub'
   7    a variation of the 't' operand type for 'fmpyadd' and 'fmpysub'
   8    5 bit register field at 20 (used in 'fmpyadd' and 'fmpysub')
   9    5 bit register field at 25 (used in 'fmpyadd' and 'fmpysub')
   H    Floating Point Operand Format at 26 for 'fmpyadd' and 'fmpysub'
        (very similar to 'F')
d551 57
a607 57
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(s,b),v", pa10},
{ "fldwx",      0x24000000, 0xfc001f80, "cxx(b),v", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(s,b),y", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cxx(b),y", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cxv,x(s,b)", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cxv,x(b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxy,x(s,b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cxy,x(b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxy,x(s,b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cxy,x(b)", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(s,b),v", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "cm5(b),v", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(s,b),y", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "cm5(b),y", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "cmv,5(s,b)", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "cmv,5(b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmy,5(s,b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "cmy,5(b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmy,5(s,b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "cmy,5(b)", pa10},
{ "fadd",       0x30000600, 0xfc00e7e0, "FE,X,v", pa10},
{ "fadd",       0x38000600, 0xfc00e720, "IJ,K,v", pa10},
{ "fsub",       0x30002600, 0xfc00e7e0, "FE,X,v", pa10},
{ "fsub",       0x38002600, 0xfc00e720, "IJ,K,v", pa10},
{ "fmpy",       0x30004600, 0xfc00e7e0, "FE,X,v", pa10},
{ "fmpy",       0x38004600, 0xfc00e720, "IJ,K,v", pa10},
{ "fdiv",       0x30006600, 0xfc00e7e0, "FE,X,v", pa10},
{ "fdiv",       0x38006600, 0xfc00e720, "IJ,K,v", pa10},
{ "fsqrt",      0x30008000, 0xfc1fe7e0, "FE,v", pa10},
{ "fsqrt",      0x38008000, 0xfc1fe720, "FJ,v", pa10},
{ "fabs",       0x30006000, 0xfc1fe7e0, "FE,v", pa10},
{ "fabs",       0x38006000, 0xfc1fe720, "FJ,v", pa10},
{ "frem",       0x30008600, 0xfc00e7e0, "FE,X,v", pa10},
{ "frem",       0x38008600, 0xfc00e720, "FJ,K,v", pa10},
{ "frnd",       0x3000a000, 0xfc1fe7e0, "FE,v", pa10},
{ "frnd",       0x3800a000, 0xfc1fe720, "FJ,v", pa10},
{ "fcpy",       0x30004000, 0xfc1fe7e0, "FE,v", pa10},
{ "fcpy",       0x38004000, 0xfc1fe720, "FJ,v", pa10},
{ "fcnvff",     0x30000200, 0xfc1f87e0, "FGE,v", pa10},
{ "fcnvff",     0x38000200, 0xfc1f8720, "FGJ,v", pa10},
{ "fcnvxf",     0x30008200, 0xfc1f87e0, "FGE,v", pa10},
{ "fcnvxf",     0x38008200, 0xfc1f8720, "FGJ,v", pa10},
{ "fcnvfx",     0x30010200, 0xfc1f87e0, "FGE,v", pa10},
{ "fcnvfx",     0x38010200, 0xfc1f8720, "FGJ,v", pa10},
{ "fcnvfxt",    0x30018200, 0xfc1f87e0, "FGE,v", pa10},
{ "fcnvfxt",    0x38018200, 0xfc1f8720, "FGJ,v", pa10},
{ "fmpyfadd",   0xb8000000, 0xfc000020, "IJ,K,3,v", pa20, FLAG_STRICT},
{ "fmpynfadd",  0xb8000020, 0xfc000020, "IJ,K,3,v", pa20, FLAG_STRICT},
{ "fneg",       0x3000c000, 0xfc1fe7e0, "FE,v", pa20, FLAG_STRICT},
{ "fneg",       0x3800c000, 0xfc1fe720, "IJ,v", pa20, FLAG_STRICT},
{ "fnegabs",    0x3000e000, 0xfc1fe7e0, "FE,v", pa20, FLAG_STRICT},
{ "fnegabs",    0x3800e000, 0xfc1fe720, "IJ,v", pa20, FLAG_STRICT},
{ "fcmp",       0x30000400, 0xfc00e7e0, "F?fE,X", pa10},
{ "fcmp",       0x38000400, 0xfc00e720, "I?fJ,K", pa10},
{ "xmpyu",	0x38004700, 0xfc00e720, "J,K,v", pa11},
{ "fmpyadd",	0x18000000, 0xfc000000, "H4,6,7,9,8", pa11},
{ "fmpysub",	0x98000000, 0xfc000000, "H4,6,7,9,8", pa11},
d618 4
a621 4
{ "spop0",      0x10000000, 0xfc000600, "f,ON", pa10},
{ "spop1",      0x10000200, 0xfc000600, "f,oNt", pa10},
{ "spop2",      0x10000400, 0xfc000600, "f,1Nb", pa10},
{ "spop3",      0x10000600, 0xfc000600, "f,0Nx,b", pa10},
@


1.18
log
@        * hppa.h:  Document new completers and args.
        * hppa.h (pa_opcodes):  Add 64 bit patterns and pa2.0 syntax for uxor,
        uaddcm, dcor, addi, add, sub, subi, shladd, rfi, and probe.  Add pa2.0
        extensions for ssm, rsm, pdtlb, pitlb.  Add performance instructions
        pmenb and pmdis.
@
text
@d73 1
a73 1
	'  "# %&    +-  /          :;< > @@'
d75 1
a75 1
	'   de gh   lm   q         {|} '
d171 1
d173 2
d433 4
d441 8
@


1.17
log
@Fix minor bug in last change.
@
text
@d74 2
a75 2
	'  C        LM       U   YZ[\]  '
	'   d       l              {|} '
d107 4
d112 11
d199 1
d354 2
a355 1
{ "uaddcm",     0x08000920, 0xfc000f20, "*?ux,b,t",pa20, FLAG_STRICT},
d358 2
a359 1
{ "dcor",       0x08000ba0, 0xfc1f0fa0, "%?ub,t",  pa20, FLAG_STRICT},
d362 2
d368 4
d377 6
d390 1
d396 2
d446 1
d449 1
d451 1
d461 1
d465 4
d483 2
d487 2
d594 4
@


1.16
log
@        * hppa.h (pa_opcodes):  Add pa2.0 instructions hadd, hshl,
        hshr, hsub, mixh, mixw, permh.
@
text
@d381 1
a381 1
{ "hshr",       0xf800c800, 0xfc10f820, "cSb,*,t", pa20, FLAG_STRICT},
@


1.15
log
@        * hppa.h (pa_opcodes): Change completers in instructions to
        use 'c' prefix.
@
text
@d73 1
a73 1
	'  "# %&   *+-  /          :;< > @@'
d75 1
a75 1
	'a  d       l              {|} '
d87 1
d108 4
d151 1
d314 1
a315 1
{ "bb",		0xc4006000, 0xfc006000, "?Bnx,Q,w", pa20, FLAG_STRICT}, 
d377 1
d379 1
d381 1
d383 4
@


1.14
log
@        * hppa.h (pa_opcodes):  Add popbts, new forms of bb, havg,
        hshladd, hshradd, shrpd, and shrpw instructions.  Update arg comments.
@
text
@d101 7
d256 27
a282 27
{ "ldwx",       0x0c000080, 0xfc001fc0, "cx(s,b),t", pa10},
{ "ldwx",       0x0c000080, 0xfc001fc0, "cx(b),t", pa10},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cx(s,b),t", pa10},
{ "ldhx",       0x0c000040, 0xfc001fc0, "cx(b),t", pa10},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cx(s,b),t", pa10},
{ "ldbx",       0x0c000000, 0xfc001fc0, "cx(b),t", pa10},
{ "ldwax",      0x0c000180, 0xfc00dfc0, "cx(b),t", pa10},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cx(s,b),t", pa10},
{ "ldcwx",      0x0c0001c0, 0xfc001fc0, "cx(b),t", pa10},
{ "ldws",	0x0c001080, 0xfc001fc0, "C5(s,b),t", pa10},
{ "ldws",	0x0c001080, 0xfc001fc0, "C5(b),t", pa10},
{ "ldhs",	0x0c001040, 0xfc001fc0, "C5(s,b),t", pa10},
{ "ldhs",	0x0c001040, 0xfc001fc0, "C5(b),t", pa10},
{ "ldbs",	0x0c001000, 0xfc001fc0, "C5(s,b),t", pa10},
{ "ldbs",	0x0c001000, 0xfc001fc0, "C5(b),t", pa10},
{ "ldwas",	0x0c001180, 0xfc00dfc0, "C5(b),t", pa10},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "C5(s,b),t", pa10},
{ "ldcws",	0x0c0011c0, 0xfc001fc0, "C5(b),t", pa10},
{ "stws",	0x0c001280, 0xfc001fc0, "Cx,V(s,b)", pa10},
{ "stws",	0x0c001280, 0xfc001fc0, "Cx,V(b)", pa10},
{ "sths",	0x0c001240, 0xfc001fc0, "Cx,V(s,b)", pa10},
{ "sths",	0x0c001240, 0xfc001fc0, "Cx,V(b)", pa10},
{ "stbs",	0x0c001200, 0xfc001fc0, "Cx,V(s,b)", pa10},
{ "stbs",	0x0c001200, 0xfc001fc0, "Cx,V(b)", pa10},
{ "stwas",	0x0c001380, 0xfc00dfc0, "Cx,V(b)", pa10},
{ "stbys",	0x0c001300, 0xfc001fc0, "Yx,V(s,b)", pa10},
{ "stbys",	0x0c001300, 0xfc001fc0, "Yx,V(b)", pa10},
d423 4
a426 4
{ "lpa",        0x04001340, 0xfc003fc0, "Zx(s,b),t", pa10},
{ "lpa",        0x04001340, 0xfc003fc0, "Zx(b),t", pa10},
{ "lha",        0x04001300, 0xfc003fc0, "Zx(s,b),t", pa10},
{ "lha",        0x04001300, 0xfc003fc0, "Zx(b),t", pa10},
d429 8
a436 8
{ "pdtlb",      0x04001200, 0xfc003fdf, "Zx(s,b)", pa10},
{ "pdtlb",      0x04001200, 0xfc003fdf, "Zx(b)", pa10},
{ "pitlb",      0x04000200, 0xfc001fdf, "Zx(S,b)", pa10},
{ "pitlb",      0x04000200, 0xfc001fdf, "Zx(b)", pa10},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "Zx(s,b)", pa10},
{ "pdtlbe",     0x04001240, 0xfc003fdf, "Zx(b)", pa10},
{ "pitlbe",     0x04000240, 0xfc001fdf, "Zx(S,b)", pa10},
{ "pitlbe",     0x04000240, 0xfc001fdf, "Zx(b)", pa10},
d445 10
a454 10
{ "pdc",        0x04001380, 0xfc003fdf, "Zx(s,b)", pa10},
{ "pdc",        0x04001380, 0xfc003fdf, "Zx(b)", pa10},
{ "fdc",        0x04001280, 0xfc003fdf, "Zx(s,b)", pa10},
{ "fdc",        0x04001280, 0xfc003fdf, "Zx(b)", pa10},
{ "fic",        0x04000280, 0xfc001fdf, "Zx(S,b)", pa10},
{ "fic",        0x04000280, 0xfc001fdf, "Zx(b)", pa10},
{ "fdce",       0x040012c0, 0xfc003fdf, "Zx(s,b)", pa10},
{ "fdce",       0x040012c0, 0xfc003fdf, "Zx(b)", pa10},
{ "fice",       0x040002c0, 0xfc001fdf, "Zx(S,b)", pa10},
{ "fice",       0x040002c0, 0xfc001fdf, "Zx(b)", pa10},
d469 4
a472 4
{ "gfw",	0x04001680, 0xfc003fdf, "Zx(s,b)", pa11},
{ "gfw",	0x04001680, 0xfc003fdf, "Zx(b)", pa11},
{ "gfr",	0x04001a80, 0xfc003fdf, "Zx(s,b)", pa11},
{ "gfr",	0x04001a80, 0xfc003fdf, "Zx(b)", pa11},
d476 20
a495 20
{ "fldwx",      0x24000000, 0xfc001f80, "cx(s,b),v", pa10},
{ "fldwx",      0x24000000, 0xfc001f80, "cx(b),v", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cx(s,b),y", pa10},
{ "flddx",      0x2c000000, 0xfc001fc0, "cx(b),y", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cv,x(s,b)", pa10},
{ "fstwx",      0x24000200, 0xfc001f80, "cv,x(b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cy,x(s,b)", pa10},
{ "fstdx",      0x2c000200, 0xfc001fc0, "cy,x(b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cy,x(s,b)", pa10},
{ "fstqx",      0x3c000200, 0xfc001fc0, "cy,x(b)", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "C5(s,b),v", pa10},
{ "fldws",      0x24001000, 0xfc001f80, "C5(b),v", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "C5(s,b),y", pa10},
{ "fldds",      0x2c001000, 0xfc001fc0, "C5(b),y", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "Cv,5(s,b)", pa10},
{ "fstws",      0x24001200, 0xfc001f80, "Cv,5(b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "Cy,5(s,b)", pa10},
{ "fstds",      0x2c001200, 0xfc001fc0, "Cy,5(b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "Cy,5(s,b)", pa10},
{ "fstqs",      0x3c001200, 0xfc001fc0, "Cy,5(b)", pa10},
d544 16
a559 16
{ "cldwx",      0x24000000, 0xfc001e00, "ucx(s,b),t", pa10},
{ "cldwx",      0x24000000, 0xfc001e00, "ucx(b),t", pa10},
{ "clddx",      0x2c000000, 0xfc001e00, "ucx(s,b),t", pa10},
{ "clddx",      0x2c000000, 0xfc001e00, "ucx(b),t", pa10},
{ "cstwx",      0x24000200, 0xfc001e00, "uct,x(s,b)", pa10},
{ "cstwx",      0x24000200, 0xfc001e00, "uct,x(b)", pa10},
{ "cstdx",      0x2c000200, 0xfc001e00, "uct,x(s,b)", pa10},
{ "cstdx",      0x2c000200, 0xfc001e00, "uct,x(b)", pa10},
{ "cldws",      0x24001000, 0xfc001e00, "uC5(s,b),t", pa10},
{ "cldws",      0x24001000, 0xfc001e00, "uC5(b),t", pa10},
{ "cldds",      0x2c001000, 0xfc001e00, "uC5(s,b),t", pa10},
{ "cldds",      0x2c001000, 0xfc001e00, "uC5(b),t", pa10},
{ "cstws",      0x24001200, 0xfc001e00, "uCt,5(s,b)", pa10},
{ "cstws",      0x24001200, 0xfc001e00, "uCt,5(b)", pa10},
{ "cstds",      0x2c001200, 0xfc001e00, "uCt,5(s,b)", pa10},
{ "cstds",      0x2c001200, 0xfc001e00, "uCt,5(b)", pa10},
@


1.13
log
@        * hppa.h (pa_opcodes):  Change fmpyfadd, fmpynfadd, fneg,
        fnegabs to use 'I' instead of 'F'.
@
text
@d73 3
a75 3
	' !"#$%&   *+- ./          :;< > @@'
	'            M       U     [\]  '
	'a  d                      {|}~'
a90 3
   c    indexed load completer.
   C    short load and store completer.
   Y	Store Bytes Short completer
d138 1
d141 1
d146 1
a146 1
   Z    System Control Completer (to support LPA, LHA, etc.)
d148 1
a165 2
   s    2 bit space specifier at 17.
   b    register field at 10.
d300 3
d306 1
d362 7
d371 4
@


1.12
log
@        * hppa.h (pa_opcodes): Add 64 bit versions of or, xor, and,
        and andcm.  Add 32 and 64 bit version of cmpclr, cmpiclr.
@
text
@d321 1
d323 1
d326 1
d502 2
a503 2
{ "fmpyfadd",   0xb8000000, 0xfc000020, "FJ,K,3,v", pa20, FLAG_STRICT},
{ "fmpynfadd",  0xb8000020, 0xfc000020, "FJ,K,3,v", pa20, FLAG_STRICT},
d505 1
a505 1
{ "fneg",       0x3800c000, 0xfc1fe720, "FJ,v", pa20, FLAG_STRICT},
d507 1
a507 1
{ "fnegabs",    0x3800e000, 0xfc1fe720, "FJ,v", pa20, FLAG_STRICT},
@


1.11
log
@
        * hppa.h:  Document 64 bit condition completers.
@
text
@d310 2
d313 1
d315 1
d317 1
d319 1
d344 2
@


1.10
log
@
        * hppa.h (pa_opcodes): Change condition args to use '?' prefix.
@
text
@d109 2
d112 3
a114 1
   ?@@   add branch conditions followed by nullify
d117 1
d119 4
d126 2
d129 1
d132 1
d137 1
d190 2
a191 1
        (very similar to 'F') */
@


1.9
log
@        * hppa.h (pa_opcodes): Add "pushnom" and "pushbts".

        * hppa.h (pa_opcodes): Mark all PA2.0 opcodes with FLAG_STRICT.
@
text
@d60 3
a62 2
   The args component is a string containing one character
   for each operand of the instruction.
d73 3
a75 3
	'  "#$%    *+- ./          :;    '
	'                          [\]  '
	'                          { } '
a93 7
   <    non-negated compare/subtract conditions.
   a	compare/subtract conditions
   d    non-negated add conditions
   &    logical instruction conditions
   U    unit instruction conditions
   >    shift/extract/deposit conditions.
   ~    bvb,bb conditions
d104 21
a150 4
   M    Floating-Point Compare Conditions (encoded as 5 bits at 31)
   ?    non-negated/negated compare/subtract conditions.
   @@    non-negated/negated add conditions.
   !    non-negated add conditions.
a161 1
   |	shift/extract/deposit conditions when used in a conditional branch
d176 1
a176 2
        (very similar to 'F')
*/
d199 1
a199 1
{ "comib", 	0x84000000, 0xfc000000, "?n5,b,w", pa10}, /* comib{tf}*/
d202 2
a203 2
{ "comib", 	0x8c000000, 0xfc000000, "?n5,b,w", pa10}, /* comib{tf}*/
{ "comb",	0x80000000, 0xfc000000, "?nx,b,w", pa10}, /* comb{tf} */
d206 2
a207 2
{ "comb",	0x88000000, 0xfc000000, "?nx,b,w", pa10}, /* comb{tf} */
{ "addb",	0xa0000000, 0xfc000000, "@@nx,b,w", pa10}, /* addb{tf} */
d210 2
a211 2
{ "addb",	0xa8000000, 0xfc000000, "@@nx,b,w", pa10},
{ "addib",	0xa4000000, 0xfc000000, "@@n5,b,w", pa10}, /* addib{tf}*/
d214 1
a214 1
{ "addib",	0xac000000, 0xfc000000, "@@n5,b,w", pa10}, /* addib{tf}*/
d277 12
a288 12
{ "movb",	0xc8000000, 0xfc000000, "|nx,b,w", pa10},
{ "movib",	0xcc000000, 0xfc000000, "|n5,b,w", pa10},
{ "combt",	0x80000000, 0xfc000000, "<nx,b,w", pa10},
{ "combf",	0x88000000, 0xfc000000, "<nx,b,w", pa10},
{ "comibt",	0x84000000, 0xfc000000, "<n5,b,w", pa10},
{ "comibf",	0x8c000000, 0xfc000000, "<n5,b,w", pa10},
{ "addbt",	0xa0000000, 0xfc000000, "!nx,b,w", pa10},
{ "addbf",	0xa8000000, 0xfc000000, "!nx,b,w", pa10},
{ "addibt",	0xa4000000, 0xfc000000, "!n5,b,w", pa10},
{ "addibf",	0xac000000, 0xfc000000, "!n5,b,w", pa10},
{ "bb",		0xc4004000, 0xfc004000, "~nx,Q,w", pa10}, 
{ "bvb",	0xc0004000, 0xffe04000, "~nx,w", pa10},
d295 38
a332 38
{ "comclr",     0x08000880, 0xfc000fe0, "ax,b,t", pa10},
{ "or",         0x08000240, 0xfc000fe0, "&x,b,t", pa10},
{ "xor",        0x08000280, 0xfc000fe0, "&x,b,t", pa10},
{ "and",        0x08000200, 0xfc000fe0, "&x,b,t", pa10},
{ "andcm",      0x08000000, 0xfc000fe0, "&x,b,t", pa10},
{ "uxor",       0x08000380, 0xfc000fe0, "Ux,b,t", pa10},
{ "uaddcm",     0x08000980, 0xfc000fe0, "Ux,b,t", pa10},
{ "uaddcmt",    0x080009c0, 0xfc000fe0, "Ux,b,t", pa10},
{ "dcor",       0x08000b80, 0xfc1f0fe0, "Ub,t",   pa10},
{ "idcor",      0x08000bc0, 0xfc1f0fe0, "Ub,t",   pa10},
{ "addi",       0xb4000000, 0xfc000800, "di,b,x", pa10},
{ "addio",      0xb4000800, 0xfc000800, "di,b,x", pa10},
{ "addit",      0xb0000000, 0xfc000800, "di,b,x", pa10},
{ "addito",     0xb0000800, 0xfc000800, "di,b,x", pa10},
{ "add",        0x08000600, 0xfc000fe0, "dx,b,t", pa10},
{ "addl",       0x08000a00, 0xfc000fe0, "dx,b,t", pa10},
{ "addo",       0x08000e00, 0xfc000fe0, "dx,b,t", pa10},
{ "addc",       0x08000700, 0xfc000fe0, "dx,b,t", pa10},
{ "addco",      0x08000f00, 0xfc000fe0, "dx,b,t", pa10},
{ "sub",        0x08000400, 0xfc000fe0, "ax,b,t", pa10},
{ "subo",       0x08000c00, 0xfc000fe0, "ax,b,t", pa10},
{ "subb",       0x08000500, 0xfc000fe0, "ax,b,t", pa10},
{ "subbo",      0x08000d00, 0xfc000fe0, "ax,b,t", pa10},
{ "subt",       0x080004c0, 0xfc000fe0, "ax,b,t", pa10},
{ "subto",      0x08000cc0, 0xfc000fe0, "ax,b,t", pa10},
{ "ds",         0x08000440, 0xfc000fe0, "ax,b,t", pa10},
{ "subi",       0x94000000, 0xfc000800, "ai,b,x", pa10},
{ "subio",      0x94000800, 0xfc000800, "ai,b,x", pa10},
{ "comiclr",    0x90000000, 0xfc000800, "ai,b,x", pa10},
{ "sh1add",     0x08000640, 0xfc000fe0, "dx,b,t", pa10},
{ "sh1addl",    0x08000a40, 0xfc000fe0, "dx,b,t", pa10},
{ "sh1addo",    0x08000e40, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2add",     0x08000680, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2addl",    0x08000a80, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2addo",    0x08000e80, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3add",     0x080006c0, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3addl",    0x08000ac0, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3addo",    0x08000ec0, 0xfc000fe0, "dx,b,t", pa10},
d336 14
a349 14
{ "vshd",       0xd0000000, 0xfc001fe0, ">x,b,t", pa10},
{ "shd",        0xd0000800, 0xfc001c00, ">x,b,p,t", pa10},
{ "vextru",     0xd0001000, 0xfc001fe0, ">b,T,x", pa10},
{ "vextrs",     0xd0001400, 0xfc001fe0, ">b,T,x", pa10},
{ "extru",      0xd0001800, 0xfc001c00, ">b,P,T,x", pa10},
{ "extrs",      0xd0001c00, 0xfc001c00, ">b,P,T,x", pa10},
{ "zvdep",      0xd4000000, 0xfc001fe0, ">x,T,b", pa10},
{ "vdep",       0xd4000400, 0xfc001fe0, ">x,T,b", pa10},
{ "zdep",       0xd4000800, 0xfc001c00, ">x,p,T,b", pa10},
{ "dep",        0xd4000c00, 0xfc001c00, ">x,p,T,b", pa10},
{ "zvdepi",     0xd4001000, 0xfc001fe0, ">5,T,b", pa10},
{ "vdepi",      0xd4001400, 0xfc001fe0, ">5,T,b", pa10},
{ "zdepi",      0xd4001800, 0xfc001c00, ">5,p,T,b", pa10},
{ "depi",       0xd4001c00, 0xfc001c00, ">5,p,T,b", pa10},
d482 2
a483 2
{ "fcmp",       0x30000400, 0xfc00e7e0, "FME,X", pa10},
{ "fcmp",       0x38000400, 0xfc00e720, "IMJ,K", pa10},
@


1.8
log
@
        * hppa.h (pa_opcodes):  Change xmpyu, fmpyfadd,
        and fmpynfadd to use 'J' and 'K' instead of 'E' and 'X'.
@
text
@d280 3
a282 1
{ "clrbts",	0xe8004005, 0xffffffff, "", pa20},
d354 2
a355 2
{ "mtsarcm",    0x016018C0, 0xffe0ffff, "x", pa20},
{ "mfia",       0x000014A0, 0xffffffe0, "t", pa20},
d467 6
a472 6
{ "fmpyfadd",   0xb8000000, 0xfc000020, "FJ,K,3,v", pa20},
{ "fmpynfadd",  0xb8000020, 0xfc000020, "FJ,K,3,v", pa20},
{ "fneg",       0x3000c000, 0xfc1fe7e0, "FE,v", pa20},
{ "fneg",       0x3800c000, 0xfc1fe720, "FJ,v", pa20},
{ "fnegabs",    0x3000e000, 0xfc1fe7e0, "FE,v", pa20},
{ "fnegabs",    0x3800e000, 0xfc1fe720, "FJ,v", pa20},
@


1.7
log
@        * hppa.h (struct pa_opcode): Add new field "flags".
        (FLAGS_STRICT): Define.
@
text
@d465 2
a466 2
{ "fmpyfadd",   0xb8000000, 0xfc000020, "FE,X,3,v", pa20},
{ "fmpynfadd",  0xb8000020, 0xfc000020, "FE,X,3,v", pa20},
d473 1
a473 1
{ "xmpyu",	0x38004700, 0xfc00e720, "E,X,v", pa11},
@


1.6
log
@        * hppa.h (pa_opcodes): Add pa2.0 clrbts instruction.
@
text
@d46 1
d49 3
@


1.5
log
@        * hppa.h (pa_opcodes):  Add entries for mfia and mtsarcm instructions.
@
text
@d276 1
@


1.4
log
@        * hppa.h (pa_opcodes): Move integer arithmetic instructions after
        integer logical instructions.
@
text
@d347 2
@


1.3
log
@        * hppa.h (pa_opcodes): Add several processor specific system
        instructions.
@
text
@a278 21
{ "add",        0x08000600, 0xfc000fe0, "dx,b,t", pa10},
{ "addl",       0x08000a00, 0xfc000fe0, "dx,b,t", pa10},
{ "addo",       0x08000e00, 0xfc000fe0, "dx,b,t", pa10},
{ "addc",       0x08000700, 0xfc000fe0, "dx,b,t", pa10},
{ "addco",      0x08000f00, 0xfc000fe0, "dx,b,t", pa10},
{ "sh1add",     0x08000640, 0xfc000fe0, "dx,b,t", pa10},
{ "sh1addl",    0x08000a40, 0xfc000fe0, "dx,b,t", pa10},
{ "sh1addo",    0x08000e40, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2add",     0x08000680, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2addl",    0x08000a80, 0xfc000fe0, "dx,b,t", pa10},
{ "sh2addo",    0x08000e80, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3add",     0x080006c0, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3addl",    0x08000ac0, 0xfc000fe0, "dx,b,t", pa10},
{ "sh3addo",    0x08000ec0, 0xfc000fe0, "dx,b,t", pa10},
{ "sub",        0x08000400, 0xfc000fe0, "ax,b,t", pa10},
{ "subo",       0x08000c00, 0xfc000fe0, "ax,b,t", pa10},
{ "subb",       0x08000500, 0xfc000fe0, "ax,b,t", pa10},
{ "subbo",      0x08000d00, 0xfc000fe0, "ax,b,t", pa10},
{ "subt",       0x080004c0, 0xfc000fe0, "ax,b,t", pa10},
{ "subto",      0x08000cc0, 0xfc000fe0, "ax,b,t", pa10},
{ "ds",         0x08000440, 0xfc000fe0, "ax,b,t", pa10},
d293 12
d308 9
@


1.2
log
@        * hppa.h (pa_opcodes): Add second entry for "comb", "comib",
        "addb", and "addib" to be used by the disassembler.
@
text
@d393 10
@


1.1
log
@Initial revision
@
text
@d187 3
d191 3
d195 3
d199 3
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

