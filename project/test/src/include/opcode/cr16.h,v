head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	cygwin-1_7_35-release:1.5
	sid-snapshot-20150301:1.5
	cygwin-1_7_34-release:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	cygwin-1_7_33-release:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	cygwin-1_7_32-release:1.5
	sid-snapshot-20140801:1.5
	cygwin-1_7_31-release:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	cygwin-1_7_30-release:1.5
	sid-snapshot-20140501:1.5
	cygwin-1_7_29-release:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	cygwin-1_7_28-release:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	binutils-2_24-branch:1.5.0.6
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.3
	sid-snapshot-20130901:1.5
	cygwin-1_7_25-release:1.5
	gdb_7_6_1-2013-08-30-release:1.5
	cygwin-1_7_24-release:1.5
	cygwin-1_7_23-release:1.5
	sid-snapshot-20130801:1.5
	cygwin-1_7_22-release:1.5
	cygwin-1_7_21-release:1.5
	sid-snapshot-20130701:1.5
	cygwin-1_7_20-release:1.5
	cygwin-1_7_19-release:1.5
	sid-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	gdb_7_6-2013-04-26-release:1.5
	cygwin-64bit-postmerge:1.5
	cygwin-64bit-premerge-branch:1.5.0.4
	cygwin-64bit-premerge:1.5
	sid-snapshot-20130401:1.5
	binutils-2_23_2:1.3
	gdb_7_6-branch:1.5.0.2
	gdb_7_6-2013-03-12-branchpoint:1.5
	cygwin-1_7_18-release:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	gdb_7_5_1-2012-11-29-release:1.3
	binutils-2_23_1:1.3
	sid-snapshot-20121101:1.3
	binutils-2_23:1.3
	cygwin-1_7_17-release:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	gdb_7_5-2012-08-17-release:1.3
	cygwin-64bit-branch:1.3.0.18
	sid-snapshot-20120801:1.3
	binutils-2_23-branch:1.3.0.16
	binutils-2_23-branchpoint:1.3
	cygwin-1_7_16-release:1.3
	gdb_7_5-branch:1.3.0.14
	gdb_7_5-2012-07-18-branchpoint:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	cygwin-1_7_15-release:1.3
	sid-snapshot-20120501:1.3
	binutils-2_22_branch:1.3.0.12
	gdb_7_4_1-2012-04-26-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	sid-snapshot-20120201:1.3
	gdb_7_4-2012-01-24-release:1.3
	sid-snapshot-20120101:1.3
	gdb_7_4-branch:1.3.0.10
	gdb_7_4-2011-12-13-branchpoint:1.3
	sid-snapshot-20111201:1.3
	binutils-2_22:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	binutils-2_22-branch:1.3.0.8
	binutils-2_22-branchpoint:1.3
	gdb_7_3_1-2011-09-04-release:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	gdb_7_3-2011-07-26-release:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	gdb_7_3-branch:1.3.0.6
	gdb_7_3-2011-04-01-branchpoint:1.3
	sid-snapshot-20110401:1.3
	cygwin-1_7_9-release:1.3
	sid-snapshot-20110301:1.3
	cygwin-1_7_8-release:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	binutils-2_21:1.3
	sid-snapshot-20101201:1.3
	binutils-2_21-branch:1.3.0.4
	binutils-2_21-branchpoint:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	binutils-2_20_1:1.2
	gdb_7_2-2010-09-02-release:1.3
	sid-snapshot-20100901:1.3
	cygwin-1_7_7-release:1.3
	sid-snapshot-20100801:1.3
	gdb_7_2-branch:1.3.0.2
	gdb_7_2-2010-07-07-branchpoint:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	sid-snapshot-20100401:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	gdb_7_1-2010-03-18-release:1.2
	sid-snapshot-20100301:1.2
	gdb_7_1-branch:1.2.0.32
	gdb_7_1-2010-02-18-branchpoint:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	gdb_7_0_1-2009-12-22-release:1.2
	cygwin-1_7_1-release:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	binutils-2_20:1.2
	gdb_7_0-2009-10-06-release:1.2
	sid-snapshot-20091001:1.2
	gdb_7_0-branch:1.2.0.30
	gdb_7_0-2009-09-16-branchpoint:1.2
	arc-sim-20090309:1.2
	binutils-arc-20081103-branch:1.2.0.28
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.26
	binutils-2_20-branchpoint:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	msnyder-checkpoint-072509-branch:1.2.0.24
	msnyder-checkpoint-072509-branchpoint:1.2
	sid-snapshot-20090701:1.2
	dje-cgen-play1-branch:1.2.0.22
	dje-cgen-play1-branchpoint:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	arc-20081103-branch:1.2.0.20
	arc-20081103-branchpoint:1.2
	arc-insight_6_8-branch:1.2.0.18
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.16
	insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	binutils-2_19_1:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	reverse-20081226-branch:1.2.0.14
	reverse-20081226-branchpoint:1.2
	sid-snapshot-20081201:1.2
	multiprocess-20081120-branch:1.2.0.12
	multiprocess-20081120-branchpoint:1.2
	sid-snapshot-20081101:1.2
	binutils-2_19:1.2
	sid-snapshot-20081001:1.2
	reverse-20080930-branch:1.2.0.10
	reverse-20080930-branchpoint:1.2
	binutils-2_19-branch:1.2.0.8
	binutils-2_19-branchpoint:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	reverse-20080717-branch:1.2.0.6
	reverse-20080717-branchpoint:1.2
	sid-snapshot-20080701:1.2
	msnyder-reverse-20080609-branch:1.2.0.4
	msnyder-reverse-20080609-branchpoint:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	gdb_6_8-2008-03-27-release:1.2
	sid-snapshot-20080301:1.2
	gdb_6_8-branch:1.2.0.2
	gdb_6_8-2008-02-26-branchpoint:1.2
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	sid-snapshot-20071001:1.1
	gdb_6_7-branch:1.1.0.4
	gdb_6_7-2007-09-07-branchpoint:1.1
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.2
	binutils-2_18-branchpoint:1.1
	binutils_latest_snapshot:1.5;
locks; strict;
comment	@ * @;


1.5
date	2013.01.07.15.09.07;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.02.13.13.36;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.15.10.26.09;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.18.13.46.45;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.29.14.09.34;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	(make_instruction): Rename to cr16_make_instruction.
	(match_opcode): Rename to cr16_match_opcode.
@
text
@/* cr16.h -- Header file for CR16 opcode and register tables.
   Copyright 2007, 2008, 2010, 2013 Free Software Foundation, Inc.
   Contributed by M R Swami Reddy

   This file is part of GAS, GDB and the GNU binutils.

   GAS, GDB, and GNU binutils is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   GAS, GDB, and GNU binutils are distributed in the hope that they will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */

#ifndef _CR16_H_
#define _CR16_H_

/* CR16 core Registers :
   The enums are used as indices to CR16 registers table (cr16_regtab).
   Therefore, order MUST be preserved.  */

typedef enum
{
  /* 16-bit general purpose registers.  */
  r0, r1, r2, r3, 
  r4, r5, r6, r7, 
  r8, r9, r10, r11, 
  r12_L = 12, r13_L = 13, ra = 14, sp_L = 15,

  /* 32-bit general purpose registers.  */
  r12 = 12, r13 = 13, r14 = 14, r15 = 15, 
  era = 14, sp = 15, RA,

  /* Not a register.  */
  nullregister,
  MAX_REG
}
reg;

/* CR16 processor registers and special registers :
   The enums are used as indices to CR16 processor registers table
   (cr16_pregtab). Therefore, order MUST be preserved.  */

typedef enum
{
  /* processor registers.  */
  dbs = MAX_REG, 
  dsr, dcrl, dcrh, 
  car0l, car0h, car1l, car1h, 
  cfg, psr, intbasel, intbaseh, 
  ispl, isph, uspl, usph,
  dcr =  dcrl, 
  car0 = car0l, 
  car1 = car1l, 
  intbase = intbasel, 
  isp =  ispl, 
  usp =  uspl,
  /* Not a processor register.  */
  nullpregister = usph + 1,
  MAX_PREG
}
preg;

/* CR16 Register types. */

typedef enum
{
  CR16_R_REGTYPE,    /* r<N>      */
  CR16_RP_REGTYPE,   /* reg pair  */
  CR16_P_REGTYPE     /* Processor register  */
}
reg_type;

/* CR16 argument types :
   The argument types correspond to instructions operands

   Argument types :
   r - register
   rp - register pair
   c - constant
   i - immediate
   idxr - index with register
   idxrp - index with register pair
   rbase - register base
   rpbase - register pair base
   pr - processor register.  */

typedef enum
{
  arg_r,
  arg_c,
  arg_cr,
  arg_crp,
  arg_ic,
  arg_icr,
  arg_idxr,
  arg_idxrp,
  arg_rbase,
  arg_rpbase,
  arg_rp,
  arg_pr,
  arg_prp,
  arg_cc,
  arg_ra,
  /* Not an argument.  */
  nullargs
}
argtype;

/* CR16 operand types:The operand types correspond to instructions operands.  */

typedef enum
{
  dummy,
  /* N-bit signed immediate.  */
  imm3, imm4, imm5, imm6, imm16, imm20, imm32,
  /* N-bit unsigned immediate.  */
  uimm3, uimm3_1, uimm4, uimm4_1, uimm5, uimm16, uimm20, uimm32,
  /* N-bit signed displacement.  */
  disps5, disps17, disps25,
  /* N-bit unsigned displacement.  */
  dispe9,
  /* N-bit absolute address.  */
  abs20, abs24,
  /* Register relative.  */
  rra, rbase, rbase_disps20, rbase_dispe20,
  /* Register pair relative.  */
  rpbase_disps0, rpbase_dispe4, rpbase_disps4, rpbase_disps16,
  rpbase_disps20, rpbase_dispe20,
  /* Register index.  */
  rindex7_abs20, rindex8_abs20,
  /* Register pair index.  */
  rpindex_disps0, rpindex_disps14, rpindex_disps20,
  /* register.  */
  regr, 
  /* register pair.  */
  regp, 
  /* processor register.  */
  pregr, 
  /* processor register 32 bit.  */
  pregrp, 
  /* condition code - 4 bit.  */
  cc, 
  /* Not an operand.  */
  nulloperand,
  /* Maximum supported operand.  */
  MAX_OPRD
}
operand_type;

/* CR16 instruction types.  */

#define NO_TYPE_INS       0
#define ARITH_INS         1
#define LD_STOR_INS       2
#define BRANCH_INS        3
#define ARITH_BYTE_INS    4
#define SHIFT_INS         5
#define BRANCH_NEQ_INS    6
#define LD_STOR_INS_INC   7
#define STOR_IMM_INS      8
#define CSTBIT_INS        9

/* Maximum value supported for instruction types.  */
#define CR16_INS_MAX        (1 << 4)
/* Mask to record an instruction type.  */
#define CR16_INS_MASK       (CR16_INS_MAX - 1)
/* Return instruction type, given instruction's attributes.  */
#define CR16_INS_TYPE(attr) ((attr) & CR16_INS_MASK)

/* Indicates whether this instruction has a register list as parameter.  */
#define REG_LIST        CR16_INS_MAX

/* The operands in binary and assembly are placed in reverse order.
   load - (REVERSE_MATCH)/store - (! REVERSE_MATCH).  */
#define REVERSE_MATCH  (1 << 5)

/* Printing formats, where the instruction prefix isn't consecutive.  */
#define FMT_1          (1 << 9)    /* 0xF0F00000 */
#define FMT_2          (1 << 10)   /* 0xFFF0FF00 */
#define FMT_3          (1 << 11)   /* 0xFFF00F00 */
#define FMT_4          (1 << 12)   /* 0xFFF0F000 */
#define FMT_5          (1 << 13)   /* 0xFFF0FFF0 */
#define FMT_CR16       (FMT_1 | FMT_2 | FMT_3 | FMT_4 | FMT_5)

/* Indicates whether this instruction can be relaxed.  */
#define RELAXABLE      (1 << 14)

/* Indicates that instruction uses user registers (and not 
   general-purpose registers) as operands.  */
#define USER_REG       (1 << 15)


/* Instruction shouldn't allow 'sp' usage.  */
#define NO_SP          (1 << 17)

/* Instruction shouldn't allow to push a register which is used as a rptr.  */
#define NO_RPTR        (1 << 18)

/* Maximum operands per instruction.  */
#define MAX_OPERANDS     5
/* Maximum register name length. */
#define MAX_REGNAME_LEN  10
/* Maximum instruction length. */
#define MAX_INST_LEN     256


/* Values defined for the flags field of a struct operand_entry.  */

/* Operand must be an unsigned number.  */
#define OP_UNSIGNED   (1 << 0)
/* Operand must be a signed number.  */
#define OP_SIGNED     (1 << 1)
/* Operand must be a negative number.  */
#define OP_NEG        (1 << 2)
/* A special load/stor 4-bit unsigned displacement operand.  */
#define OP_DEC        (1 << 3)
/* Operand must be an even number.  */
#define OP_EVEN       (1 << 4)
/* Operand is shifted right.  */
#define OP_SHIFT      (1 << 5)
/* Operand is shifted right and decremented.  */
#define OP_SHIFT_DEC  (1 << 6)
/* Operand has reserved escape sequences.  */
#define OP_ESC        (1 << 7)
/* Operand must be a ABS20 number.  */
#define OP_ABS20      (1 << 8)
/* Operand must be a ABS24 number.  */
#define OP_ABS24      (1 << 9)
/* Operand has reserved escape sequences type 1.  */
#define OP_ESC1       (1 << 10)

/* Single operand description.  */

typedef struct
{
  /* Operand type.  */
  operand_type op_type;
  /* Operand location within the opcode.  */
  unsigned int shift;
}
operand_desc;

/* Instruction data structure used in instruction table.  */

typedef struct
{
  /* Name.  */
  const char *mnemonic;
  /* Size (in words).  */
  unsigned int size;
  /* Constant prefix (matched by the disassembler).  */
  unsigned long match;  /* ie opcode */
  /* Match size (in bits).  */
  /* MASK: if( (i & match_bits) == match ) then match */
  int match_bits;
  /* Attributes.  */
  unsigned int flags;
  /* Operands (always last, so unreferenced operands are initialized).  */
  operand_desc operands[MAX_OPERANDS];
}
inst;

/* Data structure for a single instruction's arguments (Operands).  */

typedef struct
{
  /* Register or base register.  */
  reg r;
  /* Register pair register.  */
  reg rp;
  /* Index register.  */
  reg i_r;
  /* Processor register.  */
  preg pr;
  /* Processor register. 32 bit  */
  preg prp;
  /* Constant/immediate/absolute value.  */
  long constant;
  /* CC code.  */
  unsigned int cc;
  /* Scaled index mode.  */
  unsigned int scale;
  /* Argument type.  */
  argtype type;
  /* Size of the argument (in bits) required to represent.  */
  int size;
  /* The type of the expression.  */
  unsigned char X_op;
}
argument;

/* Internal structure to hold the various entities
   corresponding to the current assembling instruction.  */

typedef struct
{
  /* Number of arguments.  */
  int nargs;
  /* The argument data structure for storing args (operands).  */
  argument arg[MAX_OPERANDS];
/* The following fields are required only by CR16-assembler.  */
#ifdef TC_CR16
  /* Expression used for setting the fixups (if any).  */
  expressionS exp;
  bfd_reloc_code_real_type rtype;
#endif /* TC_CR16 */
  /* Instruction size (in bytes).  */
  int size;
}
ins;

/* Structure to hold information about predefined operands.  */

typedef struct
{
  /* Size (in bits).  */
  unsigned int bit_size;
  /* Argument type.  */
  argtype arg_type;
  /* One bit syntax flags.  */
  int flags;
}
operand_entry;

/* Structure to hold trap handler information.  */

typedef struct
{
  /* Trap name.  */
  char *name;
  /* Index in dispatch table.  */
  unsigned int entry;
}
trap_entry;

/* Structure to hold information about predefined registers.  */

typedef struct
{
  /* Name (string representation).  */
  char *name;
  /* Value (enum representation).  */
  union
  {
    /* Register.  */
    reg reg_val;
    /* processor register.  */
    preg preg_val;
  } value;
  /* Register image.  */
  int image;
  /* Register type.  */
  reg_type type;
}
reg_entry;

/* CR16 opcode table.  */
extern const inst cr16_instruction[];
extern const unsigned int cr16_num_opcodes;
#define NUMOPCODES cr16_num_opcodes

/* CR16 operands table.  */
extern const operand_entry cr16_optab[];
extern const unsigned int cr16_num_optab;

/* CR16 registers table.  */
extern const reg_entry cr16_regtab[];
extern const unsigned int cr16_num_regs;
#define NUMREGS cr16_num_regs

/* CR16 register pair table.  */
extern const reg_entry cr16_regptab[];
extern const unsigned int cr16_num_regps;
#define NUMREGPS cr16_num_regps

/* CR16 processor registers table.  */
extern const reg_entry cr16_pregtab[];
extern const unsigned int cr16_num_pregs;
#define NUMPREGS cr16_num_pregs

/* CR16 processor registers - 32 bit table.  */
extern const reg_entry cr16_pregptab[];
extern const unsigned int cr16_num_pregps;
#define NUMPREGPS cr16_num_pregps

/* CR16 trap/interrupt table.  */
extern const trap_entry cr16_traps[];
extern const unsigned int cr16_num_traps;
#define NUMTRAPS cr16_num_traps

/* CR16 CC - codes bit table.  */
extern const char * cr16_b_cond_tab[];
extern const unsigned int cr16_num_cc;
#define NUMCC cr16_num_cc;


/* Table of instructions with no operands.  */
extern const char * cr16_no_op_insn[];

/* Current instruction we're assembling.  */
extern const inst *instruction;

/* A macro for representing the instruction "constant" opcode, that is,
   the FIXED part of the instruction. The "constant" opcode is represented
   as a 32-bit unsigned long, where OPC is expanded (by a left SHIFT)
   over that range.  */
#define BIN(OPC,SHIFT)        (OPC << SHIFT)

/* Is the current instruction type is TYPE ?  */
#define IS_INSN_TYPE(TYPE)              \
  (CR16_INS_TYPE (instruction->flags) == TYPE)

/* Is the current instruction mnemonic is MNEMONIC ?  */
#define IS_INSN_MNEMONIC(MNEMONIC)    \
  (strcmp (instruction->mnemonic, MNEMONIC) == 0)

/* Does the current instruction has register list ?  */
#define INST_HAS_REG_LIST              \
  (instruction->flags & REG_LIST)


/* Utility macros for string comparison.  */
#define streq(a, b)           (strcmp (a, b) == 0)
#define strneq(a, b, c)       (strncmp (a, b, c) == 0)

/* Long long type handling.  */
/* Replace all appearances of 'long long int' with LONGLONG.  */
typedef long long int LONGLONG;
typedef unsigned long long ULONGLONG;

/* Data types for opcode handling.  */
typedef unsigned long dwordU;
typedef unsigned short wordU;

/* Globals to store opcode data and build the instruction.  */
extern wordU cr16_words[3];
extern ULONGLONG cr16_allWords;
extern ins cr16_currInsn;

/* Prototypes for function in cr16-dis.c.  */
extern void cr16_make_instruction (void);
extern int  cr16_match_opcode (void);

#endif /* _CR16_H_ */
@


1.4
log
@opcodes/ChangeLog
	* cr16-dis.c (match_opcode,make_instruction: Remove static declaration.
	(dwordU,wordU): Moved typedefs to opcode/cr16.h
	(cr16_words,cr16_allWords,cr16_currInsn): Added prefix 'cr16_'

bfd/Changelog
	* config.bfd (cr16*-*-uclinux*): New target support.

include/opcode/ChangeLog
	* cr16.h (dwordU,wordU): Moved typedefs from cr16-dis.c
	(make_instruction,match_opcode): Added function prototypes.
	(cr16_words,cr16_allWords,cr16_currInsn): Declare as extern.
@
text
@d448 2
a449 2
extern void make_instruction (void);
extern int  match_opcode (void);
@


1.3
log
@Upgrade header files to use GPLv3
@
text
@d2 1
a2 1
   Copyright 2007, 2008, 2010 Free Software Foundation, Inc.
d29 15
a43 15
  {
    /* 16-bit general purpose registers.  */
    r0, r1, r2, r3, 
    r4, r5, r6, r7, 
    r8, r9, r10, r11, 
    r12_L = 12, r13_L = 13, ra = 14, sp_L = 15,

    /* 32-bit general purpose registers.  */
    r12 = 12, r13 = 13, r14 = 14, r15 = 15, 
    era = 14, sp = 15, RA,

    /* Not a register.  */
    nullregister,
    MAX_REG
  }
d51 17
a67 17
  {
    /* processor registers.  */
    dbs = MAX_REG, 
    dsr, dcrl, dcrh, 
    car0l, car0h, car1l, car1h, 
    cfg, psr, intbasel, intbaseh, 
    ispl, isph, uspl, usph,
    dcr =  dcrl, 
    car0 = car0l, 
    car1 = car1l, 
    intbase = intbasel, 
    isp =  ispl, 
    usp =  uspl,
    /* Not a processor register.  */
    nullpregister = usph + 1,
    MAX_PREG
  }
d73 5
a77 5
  {
    CR16_R_REGTYPE,    /* r<N>      */
    CR16_RP_REGTYPE,   /* reg pair  */
    CR16_P_REGTYPE     /* Processor register  */
  }
d92 1
a92 1
   pr - processor register */
d95 19
a113 19
  {
    arg_r,
    arg_c,
    arg_cr,
    arg_crp,
    arg_ic,
    arg_icr,
    arg_idxr,
    arg_idxrp,
    arg_rbase,
    arg_rpbase,
    arg_rp,
    arg_pr,
    arg_prp,
    arg_cc,
    arg_ra,
    /* Not an argument.  */
    nullargs
  }
d116 1
a116 1
/* CR16 operand types:The operand types correspond to instructions operands.*/
d119 36
a154 36
  {
    dummy,
    /* N-bit signed immediate.  */
    imm3, imm4, imm5, imm6, imm16, imm20, imm32,
    /* N-bit unsigned immediate.  */
    uimm3, uimm3_1, uimm4, uimm4_1, uimm5, uimm16, uimm20, uimm32,
    /* N-bit signed displacement.  */
    disps5, disps17, disps25,
    /* N-bit unsigned displacement.  */
    dispe9,
    /* N-bit absolute address.  */
    abs20, abs24,
    /* Register relative.  */
    rra, rbase, rbase_disps20, rbase_dispe20,
    /* Register pair relative.  */
    rpbase_disps0, rpbase_dispe4, rpbase_disps4, rpbase_disps16,
    rpbase_disps20, rpbase_dispe20,
    /* Register index.  */
    rindex7_abs20, rindex8_abs20,
    /* Register pair index.  */
    rpindex_disps0, rpindex_disps14, rpindex_disps20,
    /* register.  */
    regr, 
    /* register pair.  */
    regp, 
    /* processor register.  */
    pregr, 
    /* processor register 32 bit.  */
    pregrp, 
    /* condition code - 4 bit.  */
    cc, 
    /* Not an operand.  */
    nulloperand,
    /* Maximum supported operand.  */
    MAX_OPRD
  }
d242 6
a247 6
  {
    /* Operand type.  */
    operand_type op_type;
    /* Operand location within the opcode.  */
    unsigned int shift;
  }
d253 15
a267 15
  {
    /* Name.  */
    const char *mnemonic;
    /* Size (in words).  */
    unsigned int size;
    /* Constant prefix (matched by the disassembler).  */
    unsigned long match;  /* ie opcode */
    /* Match size (in bits).  */
    /* MASK: if( (i & match_bits) == match ) then match */
    int match_bits;
    /* Attributes.  */
    unsigned int flags;
    /* Operands (always last, so unreferenced operands are initialized).  */
    operand_desc operands[MAX_OPERANDS];
  }
d273 21
a293 21
  {
    /* Register or base register.  */
    reg r;
    /* Register pair register.  */
    reg rp;
    /* Index register.  */
    reg i_r;
    /* Processor register.  */
    preg pr;
    /* Processor register. 32 bit  */
    preg prp;
    /* Constant/immediate/absolute value.  */
    long constant;
    /* CC code.  */
    unsigned int cc;
    /* Scaled index mode.  */
    unsigned int scale;
    /* Argument type.  */
    argtype type;
    /* Size of the argument (in bits) required to represent.  */
    int size;
d295 2
a296 2
    unsigned char X_op;
  }
d303 5
a307 5
  {
    /* Number of arguments.  */
    int nargs;
    /* The argument data structure for storing args (operands).  */
    argument arg[MAX_OPERANDS];
d310 3
a312 3
    /* Expression used for setting the fixups (if any).  */
    expressionS exp;
    bfd_reloc_code_real_type rtype;
d314 3
a316 3
    /* Instruction size (in bytes).  */
    int size;
  }
d322 8
a329 8
  {
    /* Size (in bits).  */
    unsigned int bit_size;
    /* Argument type.  */
    argtype arg_type;
    /* One bit syntax flags.  */
    int flags;
  }
d335 6
a340 6
  {
    /* Trap name.  */
    char *name;
    /* Index in dispatch table.  */
    unsigned int entry;
  }
d346 5
d352 10
a361 15
    /* Name (string representation).  */
    char *name;
    /* Value (enum representation).  */
    union
    {
      /* Register.  */
      reg reg_val;
      /* processor register.  */
      preg preg_val;
    } value;
    /* Register image.  */
    int image;
    /* Register type.  */
    reg_type type;
  }
d438 13
@


1.2
log
@        * cr16.h (cr16_num_optab): Declared.
        * cr16-opc.c  (cr16_num_optab): Defined
@
text
@d2 1
a2 1
   Copyright 2007, 2008 Free Software Foundation, Inc.
d9 1
a9 1
   published by the Free Software Foundation; either version 2, or (at your
@


1.1
log
@New port: National Semiconductor's CR16
@
text
@d2 1
a2 1
   Copyright 2007 Free Software Foundation, Inc.
d371 1
@

