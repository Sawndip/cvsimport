head	1.46;
access;
symbols
	sid-snapshot-20180601:1.46
	sid-snapshot-20180501:1.46
	sid-snapshot-20180401:1.46
	sid-snapshot-20180301:1.46
	sid-snapshot-20180201:1.46
	sid-snapshot-20180101:1.46
	sid-snapshot-20171201:1.46
	sid-snapshot-20171101:1.46
	sid-snapshot-20171001:1.46
	sid-snapshot-20170901:1.46
	sid-snapshot-20170801:1.46
	sid-snapshot-20170701:1.46
	sid-snapshot-20170601:1.46
	sid-snapshot-20170501:1.46
	sid-snapshot-20170401:1.46
	sid-snapshot-20170301:1.46
	sid-snapshot-20170201:1.46
	sid-snapshot-20170101:1.46
	sid-snapshot-20161201:1.46
	sid-snapshot-20161101:1.46
	sid-snapshot-20160901:1.46
	sid-snapshot-20160801:1.46
	sid-snapshot-20160701:1.46
	sid-snapshot-20160601:1.46
	sid-snapshot-20160501:1.46
	sid-snapshot-20160401:1.46
	sid-snapshot-20160301:1.46
	sid-snapshot-20160201:1.46
	sid-snapshot-20160101:1.46
	sid-snapshot-20151201:1.46
	sid-snapshot-20151101:1.46
	sid-snapshot-20151001:1.46
	sid-snapshot-20150901:1.46
	sid-snapshot-20150801:1.46
	sid-snapshot-20150701:1.46
	sid-snapshot-20150601:1.46
	sid-snapshot-20150501:1.46
	sid-snapshot-20150401:1.46
	cygwin-1_7_35-release:1.46
	sid-snapshot-20150301:1.46
	cygwin-1_7_34-release:1.46
	sid-snapshot-20150201:1.46
	sid-snapshot-20150101:1.46
	sid-snapshot-20141201:1.46
	cygwin-1_7_33-release:1.46
	sid-snapshot-20141101:1.46
	sid-snapshot-20141001:1.46
	sid-snapshot-20140901:1.46
	cygwin-1_7_32-release:1.46
	sid-snapshot-20140801:1.46
	cygwin-1_7_31-release:1.46
	sid-snapshot-20140701:1.46
	sid-snapshot-20140601:1.46
	cygwin-1_7_30-release:1.46
	sid-snapshot-20140501:1.46
	cygwin-1_7_29-release:1.46
	sid-snapshot-20140401:1.46
	sid-snapshot-20140301:1.46
	cygwin-1_7_28-release:1.46
	sid-snapshot-20140201:1.46
	sid-snapshot-20140101:1.46
	sid-snapshot-20131201:1.46
	cygwin-1_7_27-release:1.46
	cygwin-1_7_26-release:1.46
	sid-snapshot-20131101:1.46
	sid-snapshot-20131001:1.46
	binutils-2_24-branch:1.46.0.6
	binutils-2_24-branchpoint:1.46
	binutils-2_21_1:1.42
	sid-snapshot-20130901:1.46
	cygwin-1_7_25-release:1.46
	gdb_7_6_1-2013-08-30-release:1.46
	cygwin-1_7_24-release:1.46
	cygwin-1_7_23-release:1.46
	sid-snapshot-20130801:1.46
	cygwin-1_7_22-release:1.46
	cygwin-1_7_21-release:1.46
	sid-snapshot-20130701:1.46
	cygwin-1_7_20-release:1.46
	cygwin-1_7_19-release:1.46
	sid-snapshot-20130601:1.46
	sid-snapshot-20130501:1.46
	gdb_7_6-2013-04-26-release:1.46
	cygwin-64bit-postmerge:1.46
	cygwin-64bit-premerge-branch:1.46.0.4
	cygwin-64bit-premerge:1.46
	sid-snapshot-20130401:1.46
	binutils-2_23_2:1.44.4.1
	gdb_7_6-branch:1.46.0.2
	gdb_7_6-2013-03-12-branchpoint:1.46
	cygwin-1_7_18-release:1.46
	sid-snapshot-20130301:1.46
	sid-snapshot-20130201:1.46
	sid-snapshot-20130101:1.45
	sid-snapshot-20121201:1.45
	gdb_7_5_1-2012-11-29-release:1.44
	binutils-2_23_1:1.44
	sid-snapshot-20121101:1.44
	binutils-2_23:1.44
	cygwin-1_7_17-release:1.44
	sid-snapshot-20121001:1.44
	sid-snapshot-20120901:1.44
	gdb_7_5-2012-08-17-release:1.44
	cygwin-64bit-branch:1.44.0.6
	sid-snapshot-20120801:1.44
	binutils-2_23-branch:1.44.0.4
	binutils-2_23-branchpoint:1.44
	cygwin-1_7_16-release:1.44
	gdb_7_5-branch:1.44.0.2
	gdb_7_5-2012-07-18-branchpoint:1.44
	sid-snapshot-20120701:1.44
	sid-snapshot-20120601:1.44
	cygwin-1_7_15-release:1.43
	sid-snapshot-20120501:1.43
	binutils-2_22_branch:1.42.0.12
	gdb_7_4_1-2012-04-26-release:1.42
	cygwin-1_7_14_2-release:1.43
	cygwin-1_7_14-release:1.43
	cygwin-1_7_12-release:1.43
	sid-snapshot-20120401:1.43
	sid-snapshot-20120301:1.42
	cygwin-1_7_11-release:1.42
	cygwin-1_7_10-release:1.42
	sid-snapshot-20120201:1.42
	gdb_7_4-2012-01-24-release:1.42
	sid-snapshot-20120101:1.42
	gdb_7_4-branch:1.42.0.10
	gdb_7_4-2011-12-13-branchpoint:1.42
	sid-snapshot-20111201:1.42
	binutils-2_22:1.42
	sid-snapshot-20111101:1.42
	sid-snapshot-20111001:1.42
	binutils-2_22-branch:1.42.0.8
	binutils-2_22-branchpoint:1.42
	gdb_7_3_1-2011-09-04-release:1.42
	sid-snapshot-20110901:1.42
	sid-snapshot-20110801:1.42
	gdb_7_3-2011-07-26-release:1.42
	sid-snapshot-20110701:1.42
	sid-snapshot-20110601:1.42
	sid-snapshot-20110501:1.42
	gdb_7_3-branch:1.42.0.6
	gdb_7_3-2011-04-01-branchpoint:1.42
	sid-snapshot-20110401:1.42
	cygwin-1_7_9-release:1.42
	sid-snapshot-20110301:1.42
	cygwin-1_7_8-release:1.42
	sid-snapshot-20110201:1.42
	sid-snapshot-20110101:1.42
	binutils-2_21:1.42
	sid-snapshot-20101201:1.42
	binutils-2_21-branch:1.42.0.4
	binutils-2_21-branchpoint:1.42
	sid-snapshot-20101101:1.42
	sid-snapshot-20101001:1.42
	binutils-2_20_1:1.33.6.4
	gdb_7_2-2010-09-02-release:1.42
	sid-snapshot-20100901:1.42
	cygwin-1_7_7-release:1.42
	sid-snapshot-20100801:1.42
	gdb_7_2-branch:1.42.0.2
	gdb_7_2-2010-07-07-branchpoint:1.42
	sid-snapshot-20100701:1.40
	sid-snapshot-20100601:1.39
	sid-snapshot-20100501:1.39
	cygwin-1_7_5-release:1.38
	cygwin-1_7_4-release:1.38
	sid-snapshot-20100401:1.38
	cygwin-1_7_3-release:1.38
	cygwin-1_7_2-release:1.38
	gdb_7_1-2010-03-18-release:1.38
	sid-snapshot-20100301:1.38
	gdb_7_1-branch:1.38.0.2
	gdb_7_1-2010-02-18-branchpoint:1.38
	sid-snapshot-20100201:1.37
	sid-snapshot-20100101:1.37
	gdb_7_0_1-2009-12-22-release:1.33
	cygwin-1_7_1-release:1.37
	sid-snapshot-20091201:1.37
	sid-snapshot-20091101:1.37
	binutils-2_20:1.33.6.4
	gdb_7_0-2009-10-06-release:1.33
	sid-snapshot-20091001:1.35
	gdb_7_0-branch:1.33.0.8
	gdb_7_0-2009-09-16-branchpoint:1.33
	arc-sim-20090309:1.26
	binutils-arc-20081103-branch:1.30.0.12
	binutils-arc-20081103-branchpoint:1.30
	binutils-2_20-branch:1.33.0.6
	binutils-2_20-branchpoint:1.33
	sid-snapshot-20090901:1.33
	sid-snapshot-20090801:1.33
	msnyder-checkpoint-072509-branch:1.33.0.4
	msnyder-checkpoint-072509-branchpoint:1.33
	sid-snapshot-20090701:1.33
	dje-cgen-play1-branch:1.33.0.2
	dje-cgen-play1-branchpoint:1.33
	sid-snapshot-20090601:1.33
	sid-snapshot-20090501:1.33
	sid-snapshot-20090401:1.33
	arc-20081103-branch:1.30.0.10
	arc-20081103-branchpoint:1.30
	arc-insight_6_8-branch:1.26.0.8
	arc-insight_6_8-branchpoint:1.26
	insight_6_8-branch:1.26.0.6
	insight_6_8-branchpoint:1.26
	sid-snapshot-20090301:1.32
	binutils-2_19_1:1.30
	sid-snapshot-20090201:1.31
	sid-snapshot-20090101:1.30
	reverse-20081226-branch:1.30.0.8
	reverse-20081226-branchpoint:1.30
	sid-snapshot-20081201:1.30
	multiprocess-20081120-branch:1.30.0.6
	multiprocess-20081120-branchpoint:1.30
	sid-snapshot-20081101:1.30
	binutils-2_19:1.30
	sid-snapshot-20081001:1.30
	reverse-20080930-branch:1.30.0.4
	reverse-20080930-branchpoint:1.30
	binutils-2_19-branch:1.30.0.2
	binutils-2_19-branchpoint:1.30
	sid-snapshot-20080901:1.30
	sid-snapshot-20080801:1.29
	reverse-20080717-branch:1.28.0.2
	reverse-20080717-branchpoint:1.28
	sid-snapshot-20080701:1.28
	msnyder-reverse-20080609-branch:1.27.0.2
	msnyder-reverse-20080609-branchpoint:1.27
	drow-reverse-20070409-branch:1.23.0.4
	drow-reverse-20070409-branchpoint:1.23
	sid-snapshot-20080601:1.27
	sid-snapshot-20080501:1.27
	sid-snapshot-20080403:1.26
	sid-snapshot-20080401:1.26
	gdb_6_8-2008-03-27-release:1.26
	sid-snapshot-20080301:1.26
	gdb_6_8-branch:1.26.0.4
	gdb_6_8-2008-02-26-branchpoint:1.26
	sid-snapshot-20080201:1.26
	sid-snapshot-20080101:1.26
	sid-snapshot-20071201:1.26
	sid-snapshot-20071101:1.26
	gdb_6_7_1-2007-10-29-release:1.26
	gdb_6_7-2007-10-10-release:1.26
	sid-snapshot-20071001:1.26
	gdb_6_7-branch:1.26.0.2
	gdb_6_7-2007-09-07-branchpoint:1.26
	binutils-2_18:1.25
	binutils-2_18-branch:1.25.0.2
	binutils-2_18-branchpoint:1.25
	insight_6_6-20070208-release:1.23
	binutils-csl-coldfire-4_1-32:1.21
	binutils-csl-sourcerygxx-4_1-32:1.21
	gdb_6_6-2006-12-18-release:1.23
	binutils-csl-innovasic-fido-3_4_4-33:1.21
	binutils-csl-sourcerygxx-3_4_4-32:1.18
	binutils-csl-coldfire-4_1-30:1.21
	binutils-csl-sourcerygxx-4_1-30:1.21
	binutils-csl-coldfire-4_1-28:1.21
	binutils-csl-sourcerygxx-4_1-29:1.21
	binutils-csl-sourcerygxx-4_1-28:1.21
	gdb_6_6-branch:1.23.0.2
	gdb_6_6-2006-11-15-branchpoint:1.23
	binutils-csl-arm-2006q3-27:1.21
	binutils-csl-sourcerygxx-4_1-27:1.21
	binutils-csl-arm-2006q3-26:1.21
	binutils-csl-sourcerygxx-4_1-26:1.21
	binutils-csl-sourcerygxx-4_1-25:1.21
	binutils-csl-sourcerygxx-4_1-24:1.21
	binutils-csl-sourcerygxx-4_1-23:1.21
	insight_6_5-20061003-release:1.21
	gdb-csl-symbian-6_4_50_20060226-12:1.21
	binutils-csl-sourcerygxx-4_1-21:1.21
	binutils-csl-arm-2006q3-21:1.21
	binutils-csl-sourcerygxx-4_1-22:1.21
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.21
	binutils-csl-sourcerygxx-4_1-20:1.21
	binutils-csl-arm-2006q3-19:1.21
	binutils-csl-sourcerygxx-4_1-19:1.21
	binutils-csl-sourcerygxx-4_1-18:1.21
	binutils-csl-renesas-4_1-9:1.21
	gdb-csl-sourcerygxx-3_4_4-25:1.21
	binutils-csl-sourcerygxx-3_4_4-25:1.18
	nickrob-async-20060828-mergepoint:1.22
	gdb-csl-symbian-6_4_50_20060226-11:1.21
	binutils-csl-renesas-4_1-8:1.21
	binutils-csl-renesas-4_1-7:1.21
	binutils-csl-renesas-4_1-6:1.21
	gdb-csl-sourcerygxx-4_1-17:1.21
	binutils-csl-sourcerygxx-4_1-17:1.21
	gdb-csl-20060226-branch-local-2:1.21
	cr-0x5f1:1.22.0.2
	gdb-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-15:1.21
	gdb-csl-sourcerygxx-4_1-13:1.21
	binutils-csl-sourcerygxx-4_1-13:1.21
	binutils-2_17:1.21
	gdb-csl-sourcerygxx-4_1-12:1.21
	binutils-csl-sourcerygxx-4_1-12:1.21
	gdb-csl-sourcerygxx-3_4_4-21:1.21
	binutils-csl-sourcerygxx-3_4_4-21:1.21
	gdb_6_5-20060621-release:1.21
	binutils-csl-wrs-linux-3_4_4-24:1.18
	binutils-csl-wrs-linux-3_4_4-23:1.18
	gdb-csl-sourcerygxx-4_1-9:1.21
	binutils-csl-sourcerygxx-4_1-9:1.21
	gdb-csl-sourcerygxx-4_1-8:1.21
	binutils-csl-sourcerygxx-4_1-8:1.21
	gdb-csl-sourcerygxx-4_1-7:1.21
	binutils-csl-sourcerygxx-4_1-7:1.21
	gdb-csl-arm-2006q1-6:1.21
	binutils-csl-arm-2006q1-6:1.21
	gdb-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-wrs-linux-3_4_4-22:1.18
	gdb-csl-symbian-6_4_50_20060226-10:1.21
	gdb-csl-symbian-6_4_50_20060226-9:1.21
	gdb-csl-symbian-6_4_50_20060226-8:1.21
	gdb-csl-coldfire-4_1-11:1.21
	binutils-csl-coldfire-4_1-11:1.21
	gdb-csl-sourcerygxx-3_4_4-19:1.21
	binutils-csl-sourcerygxx-3_4_4-19:1.21
	gdb-csl-coldfire-4_1-10:1.21
	gdb_6_5-branch:1.21.0.28
	gdb_6_5-2006-05-14-branchpoint:1.21
	binutils-csl-coldfire-4_1-10:1.21
	gdb-csl-sourcerygxx-4_1-5:1.21
	binutils-csl-sourcerygxx-4_1-5:1.21
	nickrob-async-20060513-branch:1.21.0.26
	nickrob-async-20060513-branchpoint:1.21
	gdb-csl-sourcerygxx-4_1-4:1.21
	binutils-csl-sourcerygxx-4_1-4:1.21
	msnyder-reverse-20060502-branch:1.21.0.24
	msnyder-reverse-20060502-branchpoint:1.21
	binutils-csl-wrs-linux-3_4_4-21:1.18
	gdb-csl-morpho-4_1-4:1.21
	binutils-csl-morpho-4_1-4:1.21
	gdb-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-wrs-linux-3_4_4-20:1.18
	readline_5_1-import-branch:1.21.0.22
	readline_5_1-import-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.21
	binutils-2_17-branch:1.21.0.20
	binutils-2_17-branchpoint:1.21
	gdb-csl-symbian-20060226-branch:1.21.0.18
	gdb-csl-symbian-20060226-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.21
	msnyder-reverse-20060331-branch:1.21.0.16
	msnyder-reverse-20060331-branchpoint:1.21
	binutils-csl-2_17-branch:1.21.0.14
	binutils-csl-2_17-branchpoint:1.21
	gdb-csl-available-20060303-branch:1.21.0.12
	gdb-csl-available-20060303-branchpoint:1.21
	gdb-csl-20060226-branch:1.21.0.10
	gdb-csl-20060226-branchpoint:1.21
	gdb_6_4-20051202-release:1.21
	msnyder-fork-checkpoint-branch:1.21.0.8
	msnyder-fork-checkpoint-branchpoint:1.21
	gdb-csl-gxxpro-6_3-branch:1.21.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.21
	gdb_6_4-branch:1.21.0.4
	gdb_6_4-2005-11-01-branchpoint:1.21
	gdb-csl-arm-20051020-branch:1.21.0.2
	gdb-csl-arm-20051020-branchpoint:1.21
	binutils-csl-gxxpro-3_4-branch:1.18.0.10
	binutils-csl-gxxpro-3_4-branchpoint:1.18
	binutils-2_16_1:1.18
	msnyder-tracepoint-checkpoint-branch:1.20.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.20
	gdb-csl-arm-20050325-2005-q1b:1.18
	binutils-csl-arm-2005q1b:1.18
	binutils-2_16:1.18
	gdb-csl-arm-20050325-2005-q1a:1.18
	binutils-csl-arm-2005q1a:1.18
	csl-arm-20050325-branch:1.18.0.8
	csl-arm-20050325-branchpoint:1.18
	binutils-csl-arm-2005q1-branch:1.18.0.6
	binutils-csl-arm-2005q1-branchpoint:1.18
	binutils-2_16-branch:1.18.0.4
	binutils-2_16-branchpoint:1.18
	csl-arm-2004-q3d:1.18
	gdb_6_3-20041109-release:1.18
	gdb_6_3-branch:1.18.0.2
	gdb_6_3-20041019-branchpoint:1.18
	csl-arm-2004-q3:1.18
	drow_intercu-merge-20040921:1.18
	drow_intercu-merge-20040915:1.18
	jimb-gdb_6_2-e500-branch:1.17.0.8
	jimb-gdb_6_2-e500-branchpoint:1.17
	gdb_6_2-20040730-release:1.17
	gdb_6_2-branch:1.17.0.4
	gdb_6_2-2004-07-10-gmt-branchpoint:1.17
	gdb_6_1_1-20040616-release:1.16
	binutils-2_15:1.16.12.1
	binutils-2_15-branchpoint:1.16
	csl-arm-2004-q1a:1.17
	csl-arm-2004-q1:1.17
	gdb_6_1-2004-04-05-release:1.16
	drow_intercu-merge-20040402:1.17
	drow_intercu-merge-20040327:1.17
	ezannoni_pie-20040323-branch:1.17.0.2
	ezannoni_pie-20040323-branchpoint:1.17
	cagney_tramp-20040321-mergepoint:1.17
	cagney_tramp-20040309-branch:1.16.0.18
	cagney_tramp-20040309-branchpoint:1.16
	gdb_6_1-branch:1.16.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.16
	drow_intercu-20040221-branch:1.16.0.14
	drow_intercu-20040221-branchpoint:1.16
	binutils-2_15-branch:1.16.0.12
	cagney_bfdfile-20040213-branch:1.16.0.10
	cagney_bfdfile-20040213-branchpoint:1.16
	drow-cplus-merge-20040208:1.16
	carlton_dictionary-20040126-merge:1.16
	cagney_bigcore-20040122-branch:1.16.0.8
	cagney_bigcore-20040122-branchpoint:1.16
	drow-cplus-merge-20040113:1.16
	csl-arm-2003-q4:1.16
	drow-cplus-merge-20031224:1.16
	drow-cplus-merge-20031220:1.16
	carlton_dictionary-20031215-merge:1.16
	drow-cplus-merge-20031214:1.16
	carlton-dictionary-20031111-merge:1.16
	gdb_6_0-2003-10-04-release:1.14
	kettenis_sparc-20030918-branch:1.16.0.6
	kettenis_sparc-20030918-branchpoint:1.16
	carlton_dictionary-20030917-merge:1.16
	ezannoni_pie-20030916-branchpoint:1.16
	ezannoni_pie-20030916-branch:1.16.0.4
	cagney_x86i386-20030821-branch:1.16.0.2
	cagney_x86i386-20030821-branchpoint:1.16
	carlton_dictionary-20030805-merge:1.14
	carlton_dictionary-20030627-merge:1.14
	gdb_6_0-branch:1.14.0.4
	gdb_6_0-2003-06-23-branchpoint:1.14
	jimb-ppc64-linux-20030613-branch:1.14.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.14
	binutils-2_14:1.13
	cagney_convert-20030606-branch:1.13.0.44
	cagney_convert-20030606-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.13.0.42
	cagney_writestrings-20030508-branchpoint:1.13
	jimb-ppc64-linux-20030528-branch:1.13.0.40
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.38
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.13.0.36
	jimb-ppc64-linux-20030509-branchpoint:1.13
	kettenis_i386newframe-20030504-mergepoint:1.13
	carlton_dictionary-20030430-merge:1.13
	binutils-2_14-branch:1.13.0.34
	binutils-2_14-branchpoint:1.13
	kettenis_i386newframe-20030419-branch:1.13.0.32
	kettenis_i386newframe-20030419-branchpoint:1.13
	carlton_dictionary-20030416-merge:1.13
	cagney_frameaddr-20030409-mergepoint:1.13
	kettenis_i386newframe-20030406-branch:1.13.0.30
	kettenis_i386newframe-20030406-branchpoint:1.13
	cagney_frameaddr-20030403-branchpoint:1.13
	cagney_frameaddr-20030403-branch:1.13.0.28
	cagney_framebase-20030330-mergepoint:1.13
	cagney_framebase-20030326-branch:1.13.0.26
	cagney_framebase-20030326-branchpoint:1.13
	cagney_lazyid-20030317-branch:1.13.0.24
	cagney_lazyid-20030317-branchpoint:1.13
	kettenis-i386newframe-20030316-mergepoint:1.13
	offbyone-20030313-branch:1.13.0.22
	offbyone-20030313-branchpoint:1.13
	kettenis-i386newframe-20030308-branch:1.13.0.20
	kettenis-i386newframe-20030308-branchpoint:1.13
	carlton_dictionary-20030305-merge:1.13
	cagney_offbyone-20030303-branch:1.13.0.18
	cagney_offbyone-20030303-branchpoint:1.13
	w32api-2_2:1.13
	mingw-runtime-2_4:1.13
	carlton_dictionary-20030207-merge:1.13
	interps-20030202-branch:1.13.0.16
	interps-20030202-branchpoint:1.13
	cagney-unwind-20030108-branch:1.13.0.14
	cagney-unwind-20030108-branchpoint:1.13
	binutils-2_13_2_1:1.12
	binutils-2_13_2:1.12
	carlton_dictionary-20021223-merge:1.13
	gdb_5_3-2002-12-12-release:1.13
	carlton_dictionary-20021115-merge:1.13
	binutils-2_13_1:1.12
	kseitz_interps-20021105-merge:1.13
	kseitz_interps-20021103-merge:1.13
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.13
	carlton_dictionary-20021025-merge:1.13
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.12
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.13
	carlton_dictionary-20020927-merge:1.13
	carlton_dictionary-branch:1.13.0.10
	carlton_dictionary-20020920-branchpoint:1.13
	sid-20020905-branchpoint:1.13
	sid-20020905-branch:1.13.0.8
	gdb_5_3-branch:1.13.0.6
	gdb_5_3-2002-09-04-branchpoint:1.13
	kseitz_interps-20020829-merge:1.13
	cagney_sysregs-20020825-branch:1.13.0.4
	cagney_sysregs-20020825-branchpoint:1.13
	readline_4_3-import-branch:1.13.0.2
	readline_4_3-import-branchpoint:1.13
	binutils-2_13:1.12
	gdb_5_2_1-2002-07-23-release:1.12
	binutils-2_13-branchpoint:1.12
	binutils-2_13-branch:1.12.0.10
	kseitz_interps-20020528-branch:1.12.0.8
	kseitz_interps-20020528-branchpoint:1.12
	cagney_regbuf-20020515-branch:1.12.0.6
	cagney_regbuf-20020515-branchpoint:1.12
	binutils-2_12_1:1.11.2.1
	jimb-macro-020506-branch:1.12.0.4
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.12
	binutils-2_12:1.11.2.1
	gdb_5_2-branch:1.12.0.2
	gdb_5_2-2002-03-03-branchpoint:1.12
	binutils-2_12-branch:1.11.0.2
	binutils-2_12-branchpoint:1.11
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.11
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.4
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.2
	gdb_5_1-2001-07-29-branchpoint:1.4
	binutils-2_11_2:1.3.4.1
	binutils-2_11_1:1.3.4.1
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.4
	insight-precleanup-2001-01-01:1.3
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.4
	gdb_5_0-2000-04-10-branchpoint:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.46
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.2
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.46
date	2013.01.11.02.25.35;	author bergner;	state Exp;
branches;
next	1.45;

1.45
date	2012.11.23.03.28.09;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2012.05.14.19.45.27;	author jwlemke;	state Exp;
branches
	1.44.4.1;
next	1.43;

1.43
date	2012.03.09.23.39.02;	author amodra;	state Exp;
branches;
next	1.42;

1.42
date	2010.07.03.06.51.53;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.03.03.32.50;	author amodra;	state Exp;
branches;
next	1.40;

1.40
date	2010.06.14.14.48.04;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.15.10.26.09;	author nickc;	state Exp;
branches;
next	1.38;

1.38
date	2010.02.08.01.59.33;	author amodra;	state Exp;
branches;
next	1.37;

1.37
date	2009.10.02.14.42.42;	author bergner;	state Exp;
branches;
next	1.36;

1.36
date	2009.10.01.19.24.48;	author bergner;	state Exp;
branches;
next	1.35;

1.35
date	2009.09.22.02.36.26;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2009.09.21.10.29.07;	author bje;	state Exp;
branches;
next	1.33;

1.33
date	2009.03.10.06.53.45;	author amodra;	state Exp;
branches
	1.33.6.1;
next	1.32;

1.32
date	2009.02.26.22.07.33;	author bergner;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.09.18.50.57;	author bergner;	state Exp;
branches;
next	1.30;

1.30
date	2008.08.02.04.38.51;	author bergner;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2008.07.30.06.29.21;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2008.06.13.20.16.00;	author bergner;	state Exp;
branches;
next	1.27;

1.27
date	2008.04.14.11.01.38;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2007.08.24.00.56.30;	author bje;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.02.11.24.17;	author amodra;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.20.12.25.12;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.24.01.27.28;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.07.05.23.59;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2005.08.15.15.37.15;	author drow;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.19.06.59.36;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.10.10.21.13;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.09.12.42.37;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.16.00.58.42;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.19.07.08.20;	author amodra;	state Exp;
branches
	1.16.12.1
	1.16.14.1
	1.16.18.1;
next	1.15;

1.15
date	2003.08.07.02.25.50;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.10.07.44.11;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.19.20.55.48;	author ezannoni;	state Exp;
branches
	1.13.10.1
	1.13.12.1;
next	1.12;

1.12
date	2002.02.25.03.42.59;	author amodra;	state Exp;
branches
	1.12.8.1;
next	1.11;

1.11
date	2002.01.03.02.07.19;	author mrg;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.11.15.01.08.52;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.17.13.13.15;	author mrg;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.13.01.59.09;	author mrg;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.27.10.26.57;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.10.01.34.47;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.08.13.19.36;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.02.27.44;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.03.22.19.45;	author jtc;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.05.08.23.28.34;	author rth;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.05;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.44.4.1
date	2013.01.21.13.48.46;	author amodra;	state Exp;
branches;
next	;

1.33.6.1
date	2009.09.21.10.29.09;	author bje;	state Exp;
branches;
next	1.33.6.2;

1.33.6.2
date	2009.09.22.02.36.55;	author amodra;	state Exp;
branches;
next	1.33.6.3;

1.33.6.3
date	2009.10.01.19.49.38;	author bergner;	state Exp;
branches;
next	1.33.6.4;

1.33.6.4
date	2009.10.02.14.51.22;	author bergner;	state Exp;
branches;
next	;

1.30.2.1
date	2009.03.02.13.47.14;	author amodra;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2009.03.02.13.59.36;	author amodra;	state Exp;
branches;
next	;

1.16.12.1
date	2004.03.16.00.59.35;	author amodra;	state Exp;
branches;
next	;

1.16.14.1
date	2004.03.27.17.38.08;	author drow;	state Exp;
branches;
next	1.16.14.2;

1.16.14.2
date	2004.09.16.17.01.53;	author drow;	state Exp;
branches;
next	;

1.16.18.1
date	2004.03.21.23.57.42;	author cagney;	state Exp;
branches;
next	;

1.13.10.1
date	2003.06.27.21.50.22;	author carlton;	state Exp;
branches;
next	1.13.10.2;

1.13.10.2
date	2003.09.17.21.28.55;	author carlton;	state Exp;
branches;
next	;

1.13.12.1
date	2003.12.14.20.28.01;	author drow;	state Exp;
branches;
next	;

1.12.8.1
date	2002.08.30.22.52.53;	author kseitz;	state Exp;
branches;
next	;

1.11.2.1
date	2002.02.25.05.03.12;	author amodra;	state Exp;
branches;
next	;

1.3.4.1
date	2001.06.07.03.21.41;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.05;	author rth;	state Exp;
branches;
next	;


desc
@@


1.46
log
@include/opcode/
	* ppc.h (PPC_OPCODE_POWER8): New define.
	(PPC_OPCODE_HTM): Likewise.

opcodes/
	* ppc-dis.c (ppc_opts): Add "power8", "pwr8" and "htm" entries.
	* ppc-opc.c (HTM_R, HTM_SI, XRTRB_MASK, XRTRARB_MASK, XRTLRARB_MASK,
	XRTARARB_MASK, XRTBFRARB_MASK, XRCL, POWER8, PPCHTM): New defines.
	(SH6): Update.
	<"tabort.", "tabortdc.", "tabortdci.", "tabortwc.",
	"tabortwci.", "tbegin.", "tcheck", "tend.", "trechkpt.",
	"treclaim.", "tsr.">: Add POWER8 HTM opcodes.
	<"tendall.", "tresume.", "tsuspend.">: Add POWER8 HTM extended opcodes.

gas/
	* doc/as.texinfo (Target PowerPC): Document -mpower8 and -mhtm.
	* doc/c-ppc.texi (PowerPC-Opts):  Likewise.
	* config/tc-ppc.c (md_show_usage): Likewise.
	(ppc_handle_align): Handle power8's group ending nop.

gas/testsuite/
	* gas/ppc/htm.d: New test.
	* gas/ppc/htm.s: Likewise.
	* gas/ppc/power8.d: Likewise.
	* gas/ppc/power8.s: Likewise.
	* gas/ppc/ppc.exp: Run them.
@
text
@/* ppc.h -- Header file for PowerPC opcode table
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2012 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support

   This file is part of GDB, GAS, and the GNU binutils.

   GDB, GAS, and the GNU binutils are free software; you can redistribute
   them and/or modify them under the terms of the GNU General Public
   License as published by the Free Software Foundation; either version 3,
   or (at your option) any later version.

   GDB, GAS, and the GNU binutils are distributed in the hope that they
   will be useful, but WITHOUT ANY WARRANTY; without even the implied
   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
   the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this file; see the file COPYING3.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef PPC_H
#define PPC_H

#include "bfd_stdint.h"

typedef uint64_t ppc_cpu_t;

/* The opcode table is an array of struct powerpc_opcode.  */

struct powerpc_opcode
{
  /* The opcode name.  */
  const char *name;

  /* The opcode itself.  Those bits which will be filled in with
     operands are zeroes.  */
  unsigned long opcode;

  /* The opcode mask.  This is used by the disassembler.  This is a
     mask containing ones indicating those bits which must match the
     opcode field, and zeroes indicating those bits which need not
     match (and are presumably filled in by operands).  */
  unsigned long mask;

  /* One bit flags for the opcode.  These are used to indicate which
     specific processors support the instructions.  The defined values
     are listed below.  */
  ppc_cpu_t flags;

  /* One bit flags for the opcode.  These are used to indicate which
     specific processors no longer support the instructions.  The defined
     values are listed below.  */
  ppc_cpu_t deprecated;

  /* An array of operand codes.  Each code is an index into the
     operand table.  They appear in the order which the operands must
     appear in assembly code, and are terminated by a zero.  */
  unsigned char operands[8];
};

/* The table itself is sorted by major opcode number, and is otherwise
   in the order in which the disassembler should consider
   instructions.  */
extern const struct powerpc_opcode powerpc_opcodes[];
extern const int powerpc_num_opcodes;
extern const struct powerpc_opcode vle_opcodes[];
extern const int vle_num_opcodes;

/* Values defined for the flags field of a struct powerpc_opcode.  */

/* Opcode is defined for the PowerPC architecture.  */
#define PPC_OPCODE_PPC			 1

/* Opcode is defined for the POWER (RS/6000) architecture.  */
#define PPC_OPCODE_POWER		 2

/* Opcode is defined for the POWER2 (Rios 2) architecture.  */
#define PPC_OPCODE_POWER2		 4

/* Opcode is supported by the Motorola PowerPC 601 processor.  The 601
   is assumed to support all PowerPC (PPC_OPCODE_PPC) instructions,
   but it also supports many additional POWER instructions.  */
#define PPC_OPCODE_601			 8

/* Opcode is supported in both the Power and PowerPC architectures
   (ie, compiler's -mcpu=common or assembler's -mcom).  More than just
   the intersection of PPC_OPCODE_PPC with the union of PPC_OPCODE_POWER
   and PPC_OPCODE_POWER2 because many instructions changed mnemonics
   between POWER and POWERPC.  */
#define PPC_OPCODE_COMMON	      0x10

/* Opcode is supported for any Power or PowerPC platform (this is
   for the assembler's -many option, and it eliminates duplicates).  */
#define PPC_OPCODE_ANY		      0x20

/* Opcode is only defined on 64 bit architectures.  */
#define PPC_OPCODE_64		      0x40

/* Opcode is supported as part of the 64-bit bridge.  */
#define PPC_OPCODE_64_BRIDGE	      0x80

/* Opcode is supported by Altivec Vector Unit */
#define PPC_OPCODE_ALTIVEC	     0x100

/* Opcode is supported by PowerPC 403 processor.  */
#define PPC_OPCODE_403		     0x200

/* Opcode is supported by PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE	     0x400

/* Opcode is supported by PowerPC 440 processor.  */
#define PPC_OPCODE_440		     0x800

/* Opcode is only supported by Power4 architecture.  */
#define PPC_OPCODE_POWER4	    0x1000

/* Opcode is only supported by Power7 architecture.  */
#define PPC_OPCODE_POWER7	    0x2000

/* Opcode is only supported by e500x2 Core.  */
#define PPC_OPCODE_SPE		    0x4000

/* Opcode is supported by e500x2 Integer select APU.  */
#define PPC_OPCODE_ISEL		    0x8000

/* Opcode is an e500 SPE floating point instruction.  */
#define PPC_OPCODE_EFS		   0x10000

/* Opcode is supported by branch locking APU.  */
#define PPC_OPCODE_BRLOCK	   0x20000

/* Opcode is supported by performance monitor APU.  */
#define PPC_OPCODE_PMR		   0x40000

/* Opcode is supported by cache locking APU.  */
#define PPC_OPCODE_CACHELCK	   0x80000

/* Opcode is supported by machine check APU.  */
#define PPC_OPCODE_RFMCI	  0x100000

/* Opcode is only supported by Power5 architecture.  */
#define PPC_OPCODE_POWER5	  0x200000

/* Opcode is supported by PowerPC e300 family.  */
#define PPC_OPCODE_E300           0x400000

/* Opcode is only supported by Power6 architecture.  */
#define PPC_OPCODE_POWER6	  0x800000

/* Opcode is only supported by PowerPC Cell family.  */
#define PPC_OPCODE_CELL		 0x1000000

/* Opcode is supported by CPUs with paired singles support.  */
#define PPC_OPCODE_PPCPS	 0x2000000

/* Opcode is supported by Power E500MC */
#define PPC_OPCODE_E500MC        0x4000000

/* Opcode is supported by PowerPC 405 processor.  */
#define PPC_OPCODE_405		 0x8000000

/* Opcode is supported by Vector-Scalar (VSX) Unit */
#define PPC_OPCODE_VSX		0x10000000

/* Opcode is supported by A2.  */
#define PPC_OPCODE_A2	 	0x20000000

/* Opcode is supported by PowerPC 476 processor.  */
#define PPC_OPCODE_476		0x40000000

/* Opcode is supported by AppliedMicro Titan core */
#define PPC_OPCODE_TITAN        0x80000000

/* Opcode which is supported by the e500 family */
#define PPC_OPCODE_E500	       0x100000000ull

/* Opcode is supported by Extended Altivec Vector Unit */
#define PPC_OPCODE_ALTIVEC2    0x200000000ull

/* Opcode is supported by Power E6500 */
#define PPC_OPCODE_E6500       0x400000000ull

/* Opcode is supported by Thread management APU */
#define PPC_OPCODE_TMR         0x800000000ull

/* Opcode which is supported by the VLE extension.  */
#define PPC_OPCODE_VLE	      0x1000000000ull

/* Opcode is only supported by Power8 architecture.  */
#define PPC_OPCODE_POWER8     0x2000000000ull

/* Opcode which is supported by the Hardware Transactional Memory extension.  */
/* Currently, this is the same as the POWER8 mask.  If another cpu comes out
   that isn't a superset of POWER8, we can define this to its own mask.  */
#define PPC_OPCODE_HTM        PPC_OPCODE_POWER8

/* A macro to extract the major opcode from an instruction.  */
#define PPC_OP(i) (((i) >> 26) & 0x3f)

/* A macro to determine if the instruction is a 2-byte VLE insn.  */
#define PPC_OP_SE_VLE(m) ((m) <= 0xffff)

/* A macro to extract the major opcode from a VLE instruction.  */
#define VLE_OP(i,m) (((i) >> ((m) <= 0xffff ? 10 : 26)) & 0x3f)

/* A macro to convert a VLE opcode to a VLE opcode segment.  */
#define VLE_OP_TO_SEG(i) ((i) >> 1)

/* The operands table is an array of struct powerpc_operand.  */

struct powerpc_operand
{
  /* A bitmask of bits in the operand.  */
  unsigned int bitm;

  /* The shift operation to be applied to the operand.  No shift
     is made if this is zero.  For positive values, the operand
     is shifted left by SHIFT.  For negative values, the operand
     is shifted right by -SHIFT.  Use PPC_OPSHIFT_INV to indicate
     that BITM and SHIFT cannot be used to determine where the
     operand goes in the insn.  */
  int shift;

  /* Insertion function.  This is used by the assembler.  To insert an
     operand value into an instruction, check this field.

     If it is NULL, execute
	 if (o->shift >= 0)
	   i |= (op & o->bitm) << o->shift;
	 else
	   i |= (op & o->bitm) >> -o->shift;
     (i is the instruction which we are filling in, o is a pointer to
     this structure, and op is the operand value).

     If this field is not NULL, then simply call it with the
     instruction and the operand value.  It will return the new value
     of the instruction.  If the ERRMSG argument is not NULL, then if
     the operand value is illegal, *ERRMSG will be set to a warning
     string (the operand will be inserted in any case).  If the
     operand value is legal, *ERRMSG will be unchanged (most operands
     can accept any value).  */
  unsigned long (*insert)
    (unsigned long instruction, long op, ppc_cpu_t dialect, const char **errmsg);

  /* Extraction function.  This is used by the disassembler.  To
     extract this operand type from an instruction, check this field.

     If it is NULL, compute
	 if (o->shift >= 0)
	   op = (i >> o->shift) & o->bitm;
	 else
	   op = (i << -o->shift) & o->bitm;
	 if ((o->flags & PPC_OPERAND_SIGNED) != 0)
	   sign_extend (op);
     (i is the instruction, o is a pointer to this structure, and op
     is the result).

     If this field is not NULL, then simply call it with the
     instruction value.  It will return the value of the operand.  If
     the INVALID argument is not NULL, *INVALID will be set to
     non-zero if this operand type can not actually be extracted from
     this operand (i.e., the instruction does not match).  If the
     operand is valid, *INVALID will not be changed.  */
  long (*extract) (unsigned long instruction, ppc_cpu_t dialect, int *invalid);

  /* One bit syntax flags.  */
  unsigned long flags;
};

/* Elements in the table are retrieved by indexing with values from
   the operands field of the powerpc_opcodes table.  */

extern const struct powerpc_operand powerpc_operands[];
extern const unsigned int num_powerpc_operands;

/* Use with the shift field of a struct powerpc_operand to indicate
     that BITM and SHIFT cannot be used to determine where the operand
     goes in the insn.  */
#define PPC_OPSHIFT_INV (-1 << 31)

/* Values defined for the flags field of a struct powerpc_operand.  */

/* This operand takes signed values.  */
#define PPC_OPERAND_SIGNED (0x1)

/* This operand takes signed values, but also accepts a full positive
   range of values when running in 32 bit mode.  That is, if bits is
   16, it takes any value from -0x8000 to 0xffff.  In 64 bit mode,
   this flag is ignored.  */
#define PPC_OPERAND_SIGNOPT (0x2)

/* This operand does not actually exist in the assembler input.  This
   is used to support extended mnemonics such as mr, for which two
   operands fields are identical.  The assembler should call the
   insert function with any op value.  The disassembler should call
   the extract function, ignore the return value, and check the value
   placed in the valid argument.  */
#define PPC_OPERAND_FAKE (0x4)

/* The next operand should be wrapped in parentheses rather than
   separated from this one by a comma.  This is used for the load and
   store instructions which want their operands to look like
       reg,displacement(reg)
   */
#define PPC_OPERAND_PARENS (0x8)

/* This operand may use the symbolic names for the CR fields, which
   are
       lt  0	gt  1	eq  2	so  3	un  3
       cr0 0	cr1 1	cr2 2	cr3 3
       cr4 4	cr5 5	cr6 6	cr7 7
   These may be combined arithmetically, as in cr2*4+gt.  These are
   only supported on the PowerPC, not the POWER.  */
#define PPC_OPERAND_CR_BIT (0x10)

/* This operand names a register.  The disassembler uses this to print
   register names with a leading 'r'.  */
#define PPC_OPERAND_GPR (0x20)

/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0x40)

/* This operand names a floating point register.  The disassembler
   prints these with a leading 'f'.  */
#define PPC_OPERAND_FPR (0x80)

/* This operand is a relative branch displacement.  The disassembler
   prints these symbolically if possible.  */
#define PPC_OPERAND_RELATIVE (0x100)

/* This operand is an absolute branch address.  The disassembler
   prints these symbolically if possible.  */
#define PPC_OPERAND_ABSOLUTE (0x200)

/* This operand is optional, and is zero if omitted.  This is used for
   example, in the optional BF field in the comparison instructions.  The
   assembler must count the number of operands remaining on the line,
   and the number of operands remaining for the opcode, and decide
   whether this operand is present or not.  The disassembler should
   print this operand out only if it is not zero.  */
#define PPC_OPERAND_OPTIONAL (0x400)

/* This flag is only used with PPC_OPERAND_OPTIONAL.  If this operand
   is omitted, then for the next operand use this operand value plus
   1, ignoring the next operand field for the opcode.  This wretched
   hack is needed because the Power rotate instructions can take
   either 4 or 5 operands.  The disassembler should print this operand
   out regardless of the PPC_OPERAND_OPTIONAL field.  */
#define PPC_OPERAND_NEXT (0x800)

/* This operand should be regarded as a negative number for the
   purposes of overflow checking (i.e., the normal most negative
   number is disallowed and one more than the normal most positive
   number is allowed).  This flag will only be set for a signed
   operand.  */
#define PPC_OPERAND_NEGATIVE (0x1000)

/* This operand names a vector unit register.  The disassembler
   prints these with a leading 'v'.  */
#define PPC_OPERAND_VR (0x2000)

/* This operand is for the DS field in a DS form instruction.  */
#define PPC_OPERAND_DS (0x4000)

/* This operand is for the DQ field in a DQ form instruction.  */
#define PPC_OPERAND_DQ (0x8000)

/* Valid range of operand is 0..n rather than 0..n-1.  */
#define PPC_OPERAND_PLUS1 (0x10000)

/* Xilinx APU and FSL related operands */
#define PPC_OPERAND_FSL (0x20000)
#define PPC_OPERAND_FCR (0x40000)
#define PPC_OPERAND_UDI (0x80000)

/* This operand names a vector-scalar unit register.  The disassembler
   prints these with a leading 'vs'.  */
#define PPC_OPERAND_VSR (0x100000)

/* This is a CR FIELD that does not use symbolic names.  */
#define PPC_OPERAND_CR_REG (0x200000)

/* The POWER and PowerPC assemblers use a few macros.  We keep them
   with the operands table for simplicity.  The macro table is an
   array of struct powerpc_macro.  */

struct powerpc_macro
{
  /* The macro name.  */
  const char *name;

  /* The number of operands the macro takes.  */
  unsigned int operands;

  /* One bit flags for the opcode.  These are used to indicate which
     specific processors support the instructions.  The values are the
     same as those for the struct powerpc_opcode flags field.  */
  ppc_cpu_t flags;

  /* A format string to turn the macro into a normal instruction.
     Each %N in the string is replaced with operand number N (zero
     based).  */
  const char *format;
};

extern const struct powerpc_macro powerpc_macros[];
extern const int powerpc_num_macros;

extern ppc_cpu_t ppc_parse_cpu (ppc_cpu_t, ppc_cpu_t *, const char *);

#endif /* PPC_H */
@


1.45
log
@include/opcode/
	* ppc.h (ppc_parse_cpu): Update prototype.
opcodes/
	* ppc-dis.c (ppc_parse_cpu): Add "sticky" param.  Track bits
	set from ppc_opts.sticky in it.  Delete "retain_mask".
	(powerpc_init_dialect): Choose default dialect from info->mach
	before parsing -M options.  Handle more bfd_mach_ppc variants.
	Update common default to power7.
gas/
	* config/tc-ppc.c (sticky): New var.
	(md_parse_option, ppc_machine): Update ppc_parse_cpu calls.
gas/testsuite/
	* gas/ppc/astest2.d: Pass -Mppc to objdump.
ld/testsuite/
	* ld-powerpc/plt1.d: Update for default "at" branch hints.
	* ld-powerpc/tlsexe.d: Likewise.
	* ld-powerpc/tlsexetoc.d: Likewise.
	* ld-powerpc/tlsopt1.d: Likewise.
	* ld-powerpc/tlsopt1_32.d: Likewise.
	* ld-powerpc/tlsopt2.d: Likewise.
	* ld-powerpc/tlsopt2_32.d: Likewise.
	* ld-powerpc/tlsopt4.d: Likewise.
	* ld-powerpc/tlsopt4_32.d: Likewise.
	* ld-powerpc/tlsso.d: Likewise.
	* ld-powerpc/tlstocso.d: Likewise.
@
text
@d191 8
@


1.44
log
@
Add support for PowerPC VLE.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	* NEWS:  Mention PowerPC VLE port.

2012-05-14  James Lemke <jwlemke@@codesourcery.com>
	    Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* bfd.c (bfd_lookup_section_flags): Add section parm.
	* ecoff.c (bfd_debug_section): Remove flag_info initializer.
	* elf-bfd.h (bfd_elf_section_data): Move in section_flag_info.
	(bfd_elf_lookup_section_flags): Add section parm.
	* elf32-ppc.c (is_ppc_vle): New function.
	(ppc_elf_modify_segment_map): New function.
	(elf_backend_modify_segment_map): Define.
	(has_vle_insns): New define.
	* elf32-ppc.h (ppc_elf_modify_segment_map): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): Add return value & parm.
	Move in logic to omit / include a section.
	* libbfd-in.h (bfd_link_info): Add section parm.
	(bfd_generic_lookup_section_flags): Likewise.
	* reloc.c (bfd_generic_lookup_section_flags): Likewise.
	* section.c (bfd_section): Move out section_flag_info.
	(BFD_FAKE_SECTION): Remove flag_info initializer.
	* targets.c (_bfd_lookup_section_flags): Add section parm.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* archures.c (bfd_mach_ppc_vle): New.
	* bfd-in2.h: Regenerated.
	* cpu-powerpc.c (bfd_powerpc_archs): New entry for vle.
	* elf32-ppc.c (split16_format_type): New enumeration.
	(ppc_elf_vle_split16): New function.
	(HOWTO): Add entries for R_PPC_VLE relocations.
	(ppc_elf_reloc_type_lookup): Handle PPC_VLE relocations.
	(ppc_elf_section_flags): New function.
	(ppc_elf_lookup_section_flags): New function.
	(ppc_elf_section_processing): New function.
	(ppc_elf_check_relocs): Handle PPC_VLE relocations.
	(ppc_elf_relocation_section): Likewise.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_section_flags): Define.
	(elf_backend_section_processing): Define.
	* elf32-ppc.h (ppc_elf_section_processing): Declare.
	* libbfd.h: Regenerated.
	* reloc.c (BFD_RELOC_PPC_VLE_REL8, BFD_RELOC_PPC_VLE_REL15,
	BFD_RELOC_PPC_VLE_REL24, BFD_RELOC_PPC_VLE_LO16A,
	BFD_RELOC_PPC_VLE_LO16D, BFD_RELOC_PPC_VLE_HI16A,
	BFD_RELOC_PPC_VLE_HI16D, BFD_RELOC_PPC_VLE_HA16A,
	BFD_RELOC_PPC_VLE_HA16D, BFD_RELOC_PPC_VLE_SDA21,
	BFD_RELOC_PPC_VLE_SDA21_LO, BFD_RELOC_PPC_VLE_SDAREL_LO16A,
	BFD_RELOC_PPC_VLE_SDAREL_LO16D, BFD_RELOC_PPC_VLE_SDAREL_HI16A,
	BFD_RELOC_PPC_VLE_SDAREL_HI16D, BFD_RELOC_PPC_VLE_SDAREL_HA16A,
	BFD_RELOC_PPC_VLE_SDAREL_HA16D): New bfd relocations.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (insn_validate): New func of existing code to call..
	(ppc_setup_opcodes): ..from 2 places here.
	Revise for second (VLE) opcode table.
	Add #ifdef'd code to print opcode tables.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (ppc_setup_opcodes): Allow out-of-order
	for the VLE conditional branches.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/
	* config/tc-ppc.c (PPC_VLE_SPLIT16A): New macro.
	(PPC_VLE_SPLIT16D): New macro.
	(PPC_VLE_LO16A): New macro.
	(PPC_VLE_LO16D): New macro.
	(PPC_VLE_HI16A): New macro.
	(PPC_VLE_HI16D): New macro.
	(PPC_VLE_HA16A): New macro.
	(PPC_VLE_HA16D): New macro.
	(PPC_APUINFO_VLE): New definition.
	(md_chars_to_number): New function.
	(md_parse_option): Check for combinations of little
	endian and -mvle.
	(md_show_usage): Document -mvle.
	(ppc_arch): Recognize VLE.
	(ppc_mach): Recognize bfd_mach_ppc_vle.
	(ppc_setup_opcodes): Print the opcode table if
	* config/tc-ppc.h (ppc_frag_check): Declare.
	* doc/c-ppc.texi: Document -mvle.
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	gas/
	* config/tc-ppc.h (ppc_dw2_line_min_insn_length): Declare.
	(DWARF2_LINE_MIN_INSN_LENGTH): Redefine.
	* config/tc-ppc.c (ppc_dw2_line_min_insn_length): New.
	* dwarf2dbg.c (scale_addr_delta): Handle values of 1
	for DWARF2_LINE_MIN_INSN_LENGTH.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/testsuite/
	* gas/ppc/ppc.exp: Run new tests.
	* gas/ppc/vle-reloc.d: New test.
	* gas/ppc/vle-reloc.s: New test.
	* gas/ppc/vle-simple-1.d: New test.
	* gas/ppc/vle-simple-1.s: New test.
	* gas/ppc/vle-simple-2.d: New test.
	* gas/ppc/vle-simple-2.s: New test.
	* gas/ppc/vle-simple-3.d: New test.
	* gas/ppc/vle-simple-3.s: New test.
	* gas/ppc/vle-simple-4.d: New test.
	* gas/ppc/vle-simple-4.s: New test.
	* gas/ppc/vle-simple-5.d: New test.
	* gas/ppc/vle-simple-5.s: New test.
	* gas/ppc/vle-simple-6.d: New test.
	* gas/ppc/vle-simple-6.s: New test.
	* gas/ppc/vle.d: New test.
	* gas/ppc/vle.s: New test.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>
	include/elf/
	* ppc.h (SEC_PPC_VLE): Remove.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
	    James Lemke  <jwlemke@@codesourcery.com>

	include/elf/
	* ppc.h (R_PPC_VLE_REL8): New reloction.
	(R_PPC_VLE_REL15): Likewise.
	(R_PPC_VLE_REL24): Likewise.
	(R_PPC_VLE_LO16A): Likewise.
	(R_PPC_VLE_LO16D): Likewise.
	(R_PPC_VLE_HI16A): Likewise.
	(R_PPC_VLE_HI16D): Likewise.
	(R_PPC_VLE_HA16A): Likewise.
	(R_PPC_VLE_HA16D): Likewise.
	(R_PPC_VLE_SDA21): Likewise.
	(R_PPC_VLE_SDA21_LO): Likewise.
	(R_PPC_VLE_SDAREL_LO16A): Likewise.
	(R_PPC_VLE_SDAREL_LO16D): Likewise.
	(R_PPC_VLE_SDAREL_HI16A): Likewise.
	(R_PPC_VLE_SDAREL_HI16D): Likewise.
	(R_PPC_VLE_SDAREL_HA16A): Likewise.
	(R_PPC_VLE_SDAREL_HA16D): Likewise.
	(SEC_PPC_VLE): Remove.
	(PF_PPC_VLE): New program header flag.
	(SHF_PPC_VLE): New section header flag.
	(vle_opcodes, vle_num_opcodes): New.
	(VLE_OP): New macro.
	(VLE_OP_TO_SEG): New macro.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	include/opcode/
	* ppc.h (PPC_OPCODE_VLE): New definition.
	(PPC_OP_SA): New macro.
	(PPC_OP_SE_VLE): New macro.
	(PPC_OP): Use a variable shift amount.
	(powerpc_operand): Update comments.
	(PPC_OPSHIFT_INV): New macro.
	(PPC_OPERAND_CR): Replace with...
	(PPC_OPERAND_CR_BIT): ...this and
	(PPC_OPERAND_CR_REG): ...this.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/
	* ldlang.c (walk_wild_consider_section): Don't copy section_flag_list.
	Pass it to callback.
	(walk_wild_section_general): Pass section_flag_list to callback.
	(lang_add_section): Add sflag_list parm.
	Move out logic to keep / omit a section & call bfd_lookup_section_flags.
	(output_section_callback_fast): Add sflag_list parm.
	Add new parm to lang_add_section calls.
	(output_section_callback): Likewise.
	(check_section_callback): Add sflag_list parm.
	(lang_place_orphans): Add new parm to lang_add_section calls.
	(gc_section_callback): Add sflag_list parm.
	(find_relro_section_callback): Likewise.
	* ldlang.h (callback_t): Add flag_info parm.
	(lang_add_section): Add sflag_list parm.
	* emultempl/armelf.em (elf32_arm_add_stub_section):
	Add lang_add_section parm.
	* emultempl/beos.em (gld*_place_orphan): Likewise.
	* emultempl/elf32.em (gld*_place_orphan): Likewise.
	* emultempl/hppaelf.em (hppaelf_add_stub_section): Likewise.
	* emultempl/m68hc1xelf.em (m68hc11elf_add_stub_section): Likewise.
	* emultempl/mipself.em (mips_add_stub_section): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld_*_place_orphan): Likewise.
	* emultempl/pep.em (gld_*_place_orphan): Likewise.
	* emultempl/ppc64elf.em (ppc_add_stub_section): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/vms.em (vms_place_orphan): Likewise.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/powerpc.exp: Create ppceabitests.
	* ld-powerpc/vle-multiseg.s: New.
	* ld-powerpc/vle-multiseg-1.d: New.
	* ld-powerpc/vle-multiseg-1.ld: New.
	* ld-powerpc/vle-multiseg-2.d: New.
	* ld-powerpc/vle-multiseg-2.ld: New.
	* ld-powerpc/vle-multiseg-3.d: New.
	* ld-powerpc/vle-multiseg-3.ld: New.
	* ld-powerpc/vle-multiseg-4.d: New.
	* ld-powerpc/vle-multiseg-4.ld: New.
	* ld-powerpc/vle-multiseg-5.d: New.
	* ld-powerpc/vle-multiseg-5.ld: New.
	* ld-powerpc/vle-multiseg-6.d: New.
	* ld-powerpc/vle-multiseg-6.ld: New.
	* ld-powerpc/vle-multiseg-6a.s: New.
	* ld-powerpc/vle-multiseg-6b.s: New.
	* ld-powerpc/vle-multiseg-6c.s: New.
	* ld-powerpc/vle-multiseg-6d.s: New.
	* ld-powerpc/powerpc.exp: Run new tests.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/apuinfo.rd: Update for VLE.
	* ld-powerpc/vle-reloc-1.d: New.
	* ld-powerpc/vle-reloc-1.s: New.
	* ld-powerpc/vle-reloc-2.d: New.
	* ld-powerpc/vle-reloc-2.s: New.
	* ld-powerpc/vle-reloc-3.d: New.
	* ld-powerpc/vle-reloc-3.s: New.
	* ld-powerpc/vle-reloc-def-1.s: New.
	* ld-powerpc/vle-reloc-def-2.s: New.
	* ld-powerpc/vle-reloc-def-3.s: New.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	opcodes/
	* ppc-dis.c (get_powerpc_dialect): Use is_ppc_vle.
	(PPC_OPCD_SEGS, VLE_OPCD_SEGS): New defines.
	(vle_opcd_indices): New array.
	(lookup_vle): New function.
	(disassemble_init_powerpc): Revise for second (VLE) opcode table.
	(print_insn_powerpc): Likewise.
	* ppc-opc.c: Likewise.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>
	    Nathan Froyd <froydnj@@codesourcery.com>

	opcodes/
	* ppc-opc.c (insert_arx, extract_arx): New functions.
	(insert_ary, extract_ary): New functions.
	(insert_li20, extract_li20): New functions.
	(insert_rx, extract_rx): New functions.
	(insert_ry, extract_ry): New functions.
	(insert_sci8, extract_sci8): New functions.
	(insert_sci8n, extract_sci8n): New functions.
	(insert_sd4h, extract_sd4h): New functions.
	(insert_sd4w, extract_sd4w): New functions.
	(insert_vlesi, extract_vlesi): New functions.
	(insert_vlensi, extract_vlensi): New functions.
	(insert_vleui, extract_vleui): New functions.
	(insert_vleil, extract_vleil): New functions.
 	(BI_MASK, BB_MASK, BT): Use PPC_OPERAND_CR_BIT.
 	(BI16, BI32, BO32, B8): New.
	(B15, B24, CRD32, CRS): New.
 	(CRD, OBF, BFA, CR, CRFS): Use PPC_OPERAND_CR_REG.
	(DB, IMM20, RD, Rx, ARX, RY, RZ): New.
	(ARY, SCLSCI8, SCLSCI8N, SE_SD, SE_SDH): New.
	(SH6_MASK): Use PPC_OPSHIFT_INV.
	(SI8, UI5, OIMM5, UI7, BO16): New.
	(VLESIMM, VLENSIMM, VLEUIMM, VLEUIMML): New.
	(XT6, XA6, XB6, XB6S, XC6): Use PPC_OPSHIFT_INV.
	(ALLOW8_SPRG): New.
	(insert_sprg, extract_sprg): Check ALLOW8_SPRG.
	(OPVUP, OPVUP_MASK OPVUP): New
	(BD8, BD8_MASK, BD8IO, BD8IO_MASK): New.
	(EBD8IO, EBD8IO1_MASK, EBD8IO2_MASK, EBD8IO3_MASK): New.
	(BD15, BD15_MASK, EBD15, EBD15_MASK, EBD15BI, EBD15BI_MASK): New.
	(BD24,BD24_MASK, C_LK, C_LK_MASK, C, C_MASK): New.
 	(IA16, IA16_MASK, I16A, I16A_MASK, I16L, I16L_MASK): New.
	(IM7, IM7_MASK, LI20, LI20_MASK, SCI8, SCI8_MASK): New.
	(SCI8BF, SCI8BF_MASK, SD4, SD4_MASK): New.
	(SE_IM5, SE_IM5_MASK): New.
	(SE_R, SE_R_MASK, SE_RR, SE_RR_MASK): New.
	(EX, EX_MASK, BO16F, BO16T, BO32F, BO32T): New.
	(BO32DNZ, BO32DZ): New.
	(NO371, PPCSPE, PPCISEL, PPCEFS, MULHW): Include PPC_OPCODE_VLE.
	(PPCVLE): New.
	(powerpc_opcodes): Add new VLE instructions.  Update existing
	instruction to include PPCVLE if supported.
	* ppc-dis.c (ppc_opts): Add vle entry.
	(get_powerpc_dialect): New function.
	(powerpc_init_dialect): VLE support.
	(print_insn_big_powerpc): Call get_powerpc_dialect.
	(print_insn_little_powerpc): Likewise.
	(operand_value_powerpc): Handle negative shift counts.
	(print_insn_powerpc): Handle 2-byte instruction lengths.
@
text
@d403 1
a403 1
extern ppc_cpu_t ppc_parse_cpu (ppc_cpu_t, const char *);
@


1.44.4.1
log
@	PR 12549
	PR 14493
	PR 14567
	PR 14662
	PR 14758
	PR 14813
	PR 14904
	PR 14915
	PR 14926
	PR 14950
	PR 14962
	Apply mainline patches
@
text
@d403 1
a403 1
extern ppc_cpu_t ppc_parse_cpu (ppc_cpu_t, ppc_cpu_t *, const char *);
@


1.43
log
@include/opcode/
	* ppc.h: Add PPC_OPCODE_ALTIVEC2, PPC_OPCODE_E6500, PPC_OPCODE_TMR.
opcodes/
	* ppc-dis.c (ppc_opts): Add entries for "e5500" and "e6500".
	* ppc-opc.c (insert_ls, TMR, ESYNC, XSYNCLE_MASK): New.
	(PPCVEC2, PPCTMR, E6500): New short names.
	(powerpc_opcodes): Add vabsdub, vabsduh, vabsduw, dni, mvidsplt,
	mviwsplt, icblq., mftmr, mttmr, dcblq., miso, lvexbx, lvexhx,
	lvexwx, stvexbx, stvexhx, stvexwx, lvepx, lvepxl, stvepx, stvepxl,
	lvtrx, lvtrxl, lvtlx, lvtlxl, stvfrx, stvfrxl, stvflx, stvflxl,
	lvswx, lvswxl, stvswx, stvswxl, lvsm mnemonics. Accept LS, ESYNC
	optional operands on sync instruction for E6500 target.
bfd/
	* archures.c: Add bfd_mach_ppc_e5500 and bfd_mach_ppc_e6500.
	* bfd-in2.h: Regenerate.
	* cpu-powerpc.c (bfd_powerpc_archs): Add entryies for
	bfd_mach_ppc_e5500 and bfd_mach_ppc_e6500.
gas/
	* config/tc-ppc.c (md_show_usage): Document -me5500 and -me6500.
	(ppc_handle_align): Add termination nop opcode for e500mc family.
	* doc/as.texinfo: Document options -me5500 and -me6500.
	* doc/c-ppc.texi: Likewise.
gas/testsuite/
	* gas/ppc/e500mc64_nop.s: New test case for e500mc family
	termination nops.
	* gas/ppc/e500mc64_nop.d: Likewise.
	* gas/ppc/e5500_nop.s: Likewise.
	* gas/ppc/e5500_nop.d: Likewise.
	* gas/ppc/e6500_nop.s: Likewise.
	* gas/ppc/e6500_nop.d: Likewise.
	* gas/ppc/e6500.s: New.
	* gas/ppc/e6500.d: Likewise.
	* gas/ppc/ppc.exp: Run e6500, e500mc64_nop, e5500_nop, and e6500_nop.
@
text
@d68 2
d188 3
d193 9
d210 6
a215 3
  /* How far the operand is left shifted in the instruction.
     -1 to indicate that BITM and SHIFT cannot be used to determine
     where the operand goes in the insn.  */
d222 4
a225 1
	 i |= (op & o->bitm) << o->shift;
d243 4
a246 1
	 op = (i >> o->shift) & o->bitm;
d270 5
d308 1
a308 1
#define PPC_OPERAND_CR (0x10)
d373 3
@


1.42
log
@include/opcode/
	* ppc.h (PPC_OPCODE_32, PPC_OPCODE_BOOKE64, PPC_OPCODE_CLASSIC): Delete.
	Renumber other PPC_OPCODE defines.
gas/
	* config/tc-ppc.c (ppc_set_cpu): Remove old opcode flags.
	(ppc_setup_opcodes): Likewise.  Simplify opcode selection.
opcodes/
	* ppc-dis.c (ppc_opts, powerpc_init_dialect): Remove old opcode flags.
	* ppc-opc.c (PPC32, POWER32, COM32, CLASSIC): Delete.
	(PPC64, MFDEC2): Update.
	(NON32, NO371): Define.
	(powerpc_opcode): Update to not use old opcode flags, and avoid
	-m601 duplicates.
@
text
@d3 1
a3 1
   2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d177 9
@


1.41
log
@	* ppc.h (PPC_OPCODE_COMMON): Expand comment.
@
text
@a79 6
/* Opcode is only defined on 32 bit architectures.  */
#define PPC_OPCODE_32			 8

/* Opcode is only defined on 64 bit architectures.  */
#define PPC_OPCODE_64		      0x10

d83 1
a83 1
#define PPC_OPCODE_601		      0x20
d90 1
a90 1
#define PPC_OPCODE_COMMON	      0x40
d94 4
a97 1
#define PPC_OPCODE_ANY		      0x80
d100 1
a100 1
#define PPC_OPCODE_64_BRIDGE	     0x100
d103 1
a103 1
#define PPC_OPCODE_ALTIVEC	     0x200
d106 1
a106 1
#define PPC_OPCODE_403		     0x400
d109 1
a109 4
#define PPC_OPCODE_BOOKE	     0x800

/* Opcode is only supported by 64-bit PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE64	    0x1000
d112 1
a112 1
#define PPC_OPCODE_440		    0x2000
d115 1
a115 1
#define PPC_OPCODE_POWER4	    0x4000
d118 1
a118 4
#define PPC_OPCODE_POWER7	    0x8000

/* Opcode is only supported by POWERPC Classic architecture.  */
#define PPC_OPCODE_CLASSIC	   0x10000
d121 1
a121 1
#define PPC_OPCODE_SPE		   0x20000
d124 1
a124 1
#define PPC_OPCODE_ISEL		   0x40000
d127 1
a127 1
#define PPC_OPCODE_EFS		   0x80000
d130 1
a130 1
#define PPC_OPCODE_BRLOCK	  0x100000
d133 1
a133 1
#define PPC_OPCODE_PMR		  0x200000
d136 1
a136 1
#define PPC_OPCODE_CACHELCK	  0x400000
d139 1
a139 1
#define PPC_OPCODE_RFMCI	  0x800000
d142 1
a142 1
#define PPC_OPCODE_POWER5	 0x1000000
d145 1
a145 1
#define PPC_OPCODE_E300          0x2000000
d148 1
a148 1
#define PPC_OPCODE_POWER6	 0x4000000
d151 1
a151 1
#define PPC_OPCODE_CELL		 0x8000000
d154 1
a154 1
#define PPC_OPCODE_PPCPS	 0x10000000
d157 1
a157 1
#define PPC_OPCODE_E500MC        0x20000000
d160 1
a160 1
#define PPC_OPCODE_405		 0x40000000
d163 1
a163 1
#define PPC_OPCODE_VSX		 0x80000000
d166 1
a166 1
#define PPC_OPCODE_A2	 	 0x100000000ULL
d169 1
a169 1
#define PPC_OPCODE_476		 0x200000000ULL
d172 1
a172 1
#define PPC_OPCODE_TITAN         0x400000000ULL
d175 1
a175 1
#define PPC_OPCODE_E500		0x800000000ULL
@


1.40
log
@gas/
	* config/tc-ppc.c (md_assemble): Emit APUinfo section for
	PPC_OPCODE_E500.
gas/testsuite/
	* gas/ppc/e500.s: Add eieio, mbar and lwsync
	* gas/ppc/e500.d: Likewise.
include/opcode/
	* ppc.h (PPC_OPCODE_E500): Define.
opcodes/
	* ppc-dis.c (ppc_opts):  Remove PPC_OPCODE_E500MC from e500 and
	e500x2. Add PPC_OPCODE_E500 to e500 and e500x2
	* ppc-opc.c (powerpc_opcodes): Deprecate all opcodes on EFS which
	touch floating point regs and are enabled by COM, PPC or PPCCOM.
	Treat sync as msync on e500.  Treat eieio as mbar 1 on e500.
	Treat lwsync as msync on e500.
@
text
@d92 4
a95 1
   (ie, compiler's -mcpu=common or assembler's -mcom).  */
@


1.39
log
@Upgrade header files to use GPLv3
@
text
@d180 3
@


1.38
log
@include/
	* opcode/ppc.h (PPC_OPCODE_TITAN): Define.
bfd/
	* archures.c (bfd_mach_ppc_titan): Define.
	* bfd-in2.h: Regenerate.
	* cpu-powerpc.c (bfd_powerpc_archs): Add titan entry.
opcodes/
	* ppc-dis.c (ppc_opts): Add titan entry.
	* ppc-opc.c (TITAN, MULHW): Define.
	(powerpc_opcodes): Support AppliedMicro Titan core (APM83xxx).
gas/
	* config/tc-ppc.c (md_show_usage): Mention -mtitan.  Don't use tabs.
	(ppc_mach): Handle titan.
	* doc/c-ppc.texi: Mention -mtitan.
gas/testsuite/
	* gas/ppc/titan.d, * gas/ppc/titan.s: New test.
	* gas/ppc/ppc.exp: Run it.
@
text
@d6 1
a6 1
This file is part of GDB, GAS, and the GNU binutils.
d8 14
a21 13
GDB, GAS, and the GNU binutils are free software; you can redistribute
them and/or modify them under the terms of the GNU General Public
License as published by the Free Software Foundation; either version
1, or (at your option) any later version.

GDB, GAS, and the GNU binutils are distributed in the hope that they
will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this file; see the file COPYING.  If not, write to the Free
Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.37
log
@gas/
	* config/tc-ppc.c (md_show_usage): Document -m476.
	* doc/c-ppc.texi (PowerPC-Opts): Document -m476.

gas/testsuite/
	* gas/ppc/476.s: New test.
	* gas/ppc/476.d: Likewise.
	* gas/ppc/ppc.exp: Run the 476 test.

include/opcode/
	* ppc.h (PPC_OPCODE_476): Define.

opcodes/
	* ppc-dis.c (ppc_opts): Add "476" entry.
	* ppc-opc.c (PPC476): Define.
	(powerpc_opcodes): Update mnemonics where required for 476.
@
text
@d3 1
a3 1
   2007, 2008, 2009 Free Software Foundation, Inc.
d171 1
a171 1
#define PPC_OPCODE_A2	 	0x100000000ULL
d176 3
@


1.36
log
@gas/
	* config/tc-ppc.c (md_show_usage): Rename "ppca2" to "a2".
	* doc/c-ppc.texi (PowerPC-Opts): Likewise.

gas/testsuite/
	* gas/ppc/a2.d: Rename "ppca2" to "a2".

include/opcode/
	* ppc.h (PPC_OPCODE_A2): Rename from PPC_OPCODE_PPCA2.

opcodes/
	* ppc-opc.c (PPCA2): Use renamed mask PPC_OPCODE_A2.
	* ppc-dis.c (ppc_opts): Likewise.
	Rename "ppca2" to "a2".
@
text
@d173 3
@


1.35
log
@o	* ppc.h (ppc_cpu_t): Typedef to uint64_t.
@
text
@d171 1
a171 1
#define PPC_OPCODE_PPCA2	 0x100000000ULL
@


1.34
log
@gas/
	* config/tc-ppc.c (md_show_usage): Document -mpcca2.
	* doc/c-ppc.texi (PowerPC-Opts): Document -mppca2.

gas/testsuite/
	* gas/ppc/a2.s: New.
	* gas/ppc/a2.d: Likewise.
	* gas/ppc/ppc.exp: Run the a2 dump test.

include/opcode/
	* ppc.h (PPC_OPCODE_PPCA2): New.

opcodes/
	* ppc-dis.c (ppc_opts): Add "ppca2" entry.
	* ppc-opc.c (powerpc_opcodes): Add eratilx, eratsx, eratsx.,
	eratre, wchkall, eratwe, ldawx., mdfcrx., mfdcr. mtdcrx., icswx,
	icswx., mtdcr., dci, wclrone, wclrall, wclr, erativax, tlbsrx.,
	ici mnemonics.
	(ERAT_T): New operand.
	(XWC_MASK): New mask.
	(XOPL2): New macro.
	(PPCA2): Define.
@
text
@d25 3
a27 1
typedef unsigned long ppc_cpu_t;
@


1.33
log
@include/opcode/
	* ppc.h (ppc_parse_cpu): Declare.
opcodes/
	* ppc-dis.c: Include "opintl.h".
	(struct ppc_mopt, ppc_opts): New.
	(ppc_parse_cpu): New function.
	(powerpc_init_dialect): Use it.
	(print_ppc_disassembler_options): Dump options from ppc_opts.
	Internationalize message.
gas/
	* config/tc-ppc.c (parse_cpu): Delete.
	(md_parse_option, ppc_machine): Use ppc_parse_cpu.
gas/testsuite/
	* gas/ppc/altivec_and_spe.d (objdump): Add -Maltivec.
	* gas/ppc/common.d: Adjust for -Mcom not including -Mppc.
@
text
@d168 3
@


1.33.6.1
log
@gas/
	* config/tc-ppc.c (md_show_usage): Document -mpcca2.
	* doc/c-ppc.texi (PowerPC-Opts): Document -mppca2.

gas/testsuite/
	* gas/ppc/a2.s: New.
	* gas/ppc/a2.d: Likewise.
	* gas/ppc/ppc.exp: Run the a2 dump test.

include/opcode/
	* ppc.h (PPC_OPCODE_PPCA2): New.

opcodes/
	* ppc-dis.c (ppc_opts): Add "ppca2" entry.
	* ppc-opc.c (powerpc_opcodes): Add eratilx, eratsx, eratsx.,
	eratre, wchkall, eratwe, ldawx., mdfcrx., mfdcr. mtdcrx., icswx,
	icswx., mtdcr., dci, wclrone, wclrall, wclr, erativax, tlbsrx.,
	ici mnemonics.
	(ERAT_T): New operand.
	(XWC_MASK): New mask.
	(XOPL2): New macro.
	(PPCA2): Define.
@
text
@a167 3
/* Opcode is supported by A2.  */
#define PPC_OPCODE_PPCA2	 0x100000000ULL

@


1.33.6.2
log
@	* ppc.h (ppc_cpu_t): Typedef to uint64_t.
@
text
@d25 1
a25 3
#include "bfd_stdint.h"

typedef uint64_t ppc_cpu_t;
@


1.33.6.3
log
@gas/
	* config/tc-ppc.c (md_show_usage): Rename "ppca2" to "a2".
	* doc/c-ppc.texi (PowerPC-Opts): Likewise.

gas/testsuite/
	* gas/ppc/a2.d: Rename "ppca2" to "a2".

include/opcode/
	* ppc.h (PPC_OPCODE_A2): Rename from PPC_OPCODE_PPCA2.

opcodes/
	* ppc-opc.c (PPCA2): Use renamed mask PPC_OPCODE_A2.
	* ppc-dis.c (ppc_opts): Likewise.
	Rename "ppca2" to "a2".
@
text
@d171 1
a171 1
#define PPC_OPCODE_A2	 	0x100000000ULL
@


1.33.6.4
log
@gas/
	* config/tc-ppc.c (md_show_usage): Document -m476.
	* doc/c-ppc.texi (PowerPC-Opts): Document -m476.

gas/testsuite/
	* gas/ppc/476.s: New test.
	* gas/ppc/476.d: Likewise.
	* gas/ppc/ppc.exp: Run the 476 test.

include/opcode/
	* ppc.h (PPC_OPCODE_476): Define.

opcodes/
	* ppc-dis.c (ppc_opts): Add "476" entry.
	* ppc-opc.c (PPC476): Define.
	(powerpc_opcodes): Update mnemonics where required for 476.
@
text
@d171 1
a171 4
#define PPC_OPCODE_A2	 	 0x100000000ULL

/* Opcode is supported by PowerPC 476 processor.  */
#define PPC_OPCODE_476		 0x200000000ULL
@


1.32
log
@gas/
	* config/tc-ppc.c (pre_defined_registers): Add "f32" to "f63",
	"f.32" to "f.63", "vs0" to "vs63" and "vs.0" to "vs.63".
	(parse_cpu): Extend -mpower7 to accept power7 and isel instructions.

gas/testsuite/
	* gas/ppc/e500mc.d ("wait", "waitsrv", "waitimpl"): Add tests.
	* gas/ppc/e500mc.s: Likewise.
	* gas/ppc/power6.d ("cdtbcd", "cbcdtd", "addg6s"): Add tests.
	* gas/ppc/power6.s: Likewise.
	* gas/ppc/power7.d ("lfdpx", "mffgpr", "mftgpr"): Remove invalid tests.
	("wait", "waitsrv", "waitimpl", "divwe", "divwe.", "divweo", "divweo.",
	"divweu", "divweu.", "divweuo", "divweuo.", "bpermd", "popcntw",
	"popcntd", "ldbrx", "stdbrx", "lfiwzx", "lfiwzx", "fcfids", "fcfids.",
	"fcfidus", "fcfidus.", "fctiwu", "fctiwu.", "fctiwuz", "fctiwuz.",
	"fctidu", "fctidu.", "fctiduz", "fctiduz.", "fcfidu", "fcfidu.",
	"ftdiv", "ftdiv", "ftsqrt", "ftsqrt", "dcbtt", "dcbtstt", "dcffix",
	"dcffix.", "lbarx", "lbarx", "lbarx", "lharx", "lharx", "lharx",
	"stbcx.", "sthcx.", "fre", "fre.", "fres", "fres.", "frsqrte",
	"frsqrte.", "frsqrtes", "frsqrtes.", "isel"): Add tests.
	* gas/ppc/power7.s: Likewise.
	* gas/ppc/vsx.d: New test.
	* gas/ppc/vsx.s: Likewise.
	* gas/ppc/ppc.exp: Run it.

include/opcode/
	* ppc.h (PPC_OPCODE_POWER7): New.

opcodes/
	* ppc-dis.c (powerpc_init_dialect): Extend -Mpower7 to disassemble
	the power7 and the isel instructions.
	* ppc-opc.c (insert_xc6, extract_xc6): New static functions.
	(insert_dm, extract_dm): Likewise.
	(XB6): Update comment to include XX2 form.
	(WC, XC6, SHW, DMEX, UIM, XX2, XX3RC, XX4, XX2_MASK, XX2UIM_MASK,
	XX2BF_MASK, XX3BF_MASK, XX3SHW_MASK, XX4_MASK, XWC_MASK, POWER7): New.
	(RemoveXX3DM): Delete.
	(powerpc_opcodes): <"lfdp", "lfdpx", "mcrxr", "mftb", "mffgpr",
	"mftgpr">: Deprecate for POWER7.
	<"fres", "fres.", "frsqrtes", "frsqrtes.", "fre", "fre.", "frsqrte",
	"frsqrte.">: Deprecate the three operand form and enable the two
	operand form for POWER7 and later.
	<"wait">: Extend to accept optional parameter.  Enable for POWER7.
	<"waitsrv", "waitimpl">: Add extended opcodes.
	<"ldbrx", "stdbrx">: Enable for POWER7.
	<"cdtbcd", "cbcdtd", "addg6s">: Add POWER6 opcodes.
	<"bpermd", "dcbtstt", "dcbtt", "dcffix.", "dcffix", "divde.", "divde",
	"divdeo.", "divdeo", "divdeu.", "divdeu", "divdeuo.", "divdeuo",
	"divwe.", "divwe", "divweo.", "divweo", "divweu.", "divweu", "divweuo.",
	"divweuo", "fcfids.", "fcfids", "fcfidu.", "fcfidu", "fcfidus.",
	"fcfidus", "fctidu.", "fctidu", "fctiduz.", "fctiduz", "fctiwu.",
	"fctiwu", "fctiwuz.", "fctiwuz", "ftdiv", "ftsqrt", "lbarx", "lfiwzx",
	"lharx", "popcntd", "popcntw", "stbcx.", "sthcx.">: Add POWER7 opcodes.
	<"lxsdux", "lxsdx", "lxvdsx", "lxvw4ux", "lxvw4x", "stxsdux", "stxsdx",
	"stxvw4ux", "stxvw4x", "xsabsdp", "xsadddp", "xscmpodp", "xscmpudp",
	"xscpsgndp", "xscvdpsp", "xscvdpsxds", "xscvdpsxws", "xscvdpuxds",
	"xscvdpuxws", "xscvspdp", "xscvsxddp", "xscvuxddp", "xsdivdp",
	"xsmaddadp", "xsmaddmdp", "xsmaxdp", "xsmindp", "xsmsubadp",
	"xsmsubmdp", "xsmuldp", "xsnabsdp", "xsnegdp", "xsnmaddadp",
	"xsnmaddmdp", "xsnmsubadp", "xsnmsubmdp", "xsrdpi", "xsrdpic",
	"xsrdpim", "xsrdpip", "xsrdpiz", "xsredp", "xsrsqrtedp", "xssqrtdp",
	"xssubdp", "xstdivdp", "xstsqrtdp", "xvabsdp", "xvabssp", "xvadddp",
	"xvaddsp", "xvcmpeqdp.", "xvcmpeqdp", "xvcmpeqsp.", "xvcmpeqsp",
	"xvcmpgedp.", "xvcmpgedp", "xvcmpgesp.", "xvcmpgesp", "xvcmpgtdp.",
	"xvcmpgtdp", "xvcmpgtsp.", "xvcmpgtsp", "xvcpsgnsp", "xvcvdpsp",
	"xvcvdpsxds", "xvcvdpsxws", "xvcvdpuxds", "xvcvdpuxws", "xvcvspdp",
	"xvcvspsxds", "xvcvspsxws", "xvcvspuxds", "xvcvspuxws", "xvcvsxddp",
	"xvcvsxdsp", "xvcvsxwdp", "xvcvsxwsp", "xvcvuxddp", "xvcvuxdsp",
	"xvcvuxwdp", "xvcvuxwsp", "xvdivdp", "xvdivsp", "xvmaddadp",
	"xvmaddasp", "xvmaddmdp", "xvmaddmsp", "xvmaxdp", "xvmaxsp",
	"xvmindp", "xvminsp", "xvmovsp", "xvmsubadp", "xvmsubasp", "xvmsubmdp",
	"xvmsubmsp", "xvmuldp", "xvmulsp", "xvnabsdp", "xvnabssp", "xvnegdp",
	"xvnegsp", "xvnmaddadp", "xvnmaddasp", "xvnmaddmdp", "xvnmaddmsp",
	"xvnmsubadp", "xvnmsubasp", "xvnmsubmdp", "xvnmsubmsp", "xvrdpi",
	"xvrdpic", "xvrdpim", "xvrdpip", "xvrdpiz", "xvredp", "xvresp",
	"xvrspi", "xvrspic", "xvrspim", "xvrspip", "xvrspiz", "xvrsqrtedp",
	"xvrsqrtesp", "xvsqrtdp", "xvsqrtsp", "xvsubdp", "xvsubsp", "xvtdivdp",
	"xvtdivsp", "xvtsqrtdp", "xvtsqrtsp", "xxland", "xxlandc", "xxlnor",
	"xxlor", "xxlxor", "xxmrghw", "xxmrglw", "xxsel", "xxsldwi", "xxspltd",
	"xxspltw", "xxswapd">: Add VSX opcodes.
@
text
@d3 1
a3 1
   2007 Free Software Foundation, Inc.
d354 2
@


1.31
log
@gas/
	* config/tc-ppc.c (ppc_setup_opcodes): Remove PPC_OPCODE_NOPOWER4 test.
	Test the new "deprecated" opcode field.

include/opcode/
	* ppc.h (struct powerpc_opcode): New field "deprecated".
	(PPC_OPCODE_NOPOWER4): Delete.

opcodes/
	* ppc-opc.c (PPCNONE): Define.
	(NOPOWER4): Delete.
	(powerpc_opcodes): Initialize the new "deprecated" field.
@
text
@d117 3
@


1.30
log
@gas/
	* config/tc-ppc.c (parse_cpu): Rename altivec_or_spe to retain_flags.
	Handle -mvsx and -mpower7.
	(md_show_usage): Document -mpower7 and -mvsx.
	* doc/as.texinfo (Target PowerPC): Document -mvsx.
	* doc/c-ppc.texi (PowerPC-Opts): Document -mvsx and -mpower7.

gas/testsuite/
	* gas/ppc/power7.d: New.
	* gas/ppc/power7.s: Likewise.
	* gas/ppc/ppc.exp: Run power7 test.

include/opcode/
	* ppc.h (PPC_OPCODE_VSX, PPC_OPERAND_VSR): New.

opcodes/
	* ppc-dis.c (powerpc_init_dialect): Handle power7 and vsx options.
	(print_insn_powerpc): Prepend 'vs' when printing VSX registers.
	(print_ppc_disassembler_options): Document -Mpower7 and -Mvsx.
	* ppc-opc.c (insert_xt6): New static function.
	(extract_xt6): Likewise.
	(insert_xa6): Likewise.
	(extract_xa6: Likewise.
	(insert_xb6): Likewise.
	(extract_xb6): Likewise.
	(insert_xb6s): Likewise.
	(extract_xb6s): Likewise.
	(XS6, XT6, XA6, XB6, XB6S, DM, XX3, XX3DM, XX1_MASK, XX3_MASK,
	XX3DM_MASK, PPCVSX): New.
	(powerpc_opcodes): Add opcodes "lxvd2x", "lxvd2ux", "stxvd2x",
	"stxvd2ux", "xxmrghd", "xxmrgld", "xxpermdi", "xvmovdp", "xvcpsgndp".
@
text
@d49 5
a116 3
/* Opcode isn't supported by Power4 architecture.  */
#define PPC_OPCODE_NOPOWER4	    0x8000

@


1.30.2.1
log
@backport 2009-01-09  Peter Bergner  <bergner@@vnet.ibm.com>
@
text
@a48 5
  /* One bit flags for the opcode.  These are used to indicate which
     specific processors no longer support the instructions.  The defined
     values are listed below.  */
  ppc_cpu_t deprecated;

d112 3
@


1.30.2.2
log
@backport 2009-02-26  Peter Bergner  <bergner@@vnet.ibm.com>
@
text
@a116 3
/* Opcode is only supported by Power7 architecture.  */
#define PPC_OPCODE_POWER7	    0x8000

@


1.29
log
@include/opcode/
	* ppc.h (PPC_OPCODE_405): Define.
	(PPC_OPERAND_FSL, PPC_OPERAND_FCR, PPC_OPERAND_UDI): Define.
gas/
	* config/tc-ppc.c (parse_cpu): Separate handling of -m403/405.
	(md_show_usage): Likewise.
opcodes/
	* ppc-dis.c (print_insn_powerpc): Disassemble FSL/FCR/UDI fields.
	* ppc-opc.c (powerpc_operands): Add Xilinx APU related operands.
	(insert_sprg, PPC405): Use PPC_OPCODE_405.
	(powerpc_opcodes): Add Xilinx APU related opcodes.
@
text
@d160 3
d318 4
@


1.28
log
@include/opcode/
	* ppc.h (ppc_cpu_t): New typedef.
	(struct powerpc_opcode <flags>): Use it.
	(struct powerpc_operand <insert, extract>): Likewise.
	(struct powerpc_macro <flags>): Likewise.

gas/
	* config/tc-ppc.c (ppc_cpu): Use ppc_cpu_t typedef.
	(ppc_insert_operand): Likewise.
	(ppc_machine): Likewise.
	* config/tc-ppc.h: #include "opcode/ppc.h"
	(struct _ppc_fix_extra <ppc_cpu>): Use ppc_cpu_t typedef.
	(ppc_cpu): Update extern decl.

opcodes/
	* ppc-dis.c (print_insn_powerpc): Update prototye to use new
	ppc_cpu_t typedef.
	(struct dis_private): New.
	(POWERPC_DIALECT): New define.
	(powerpc_dialect): Renamed to...
	(powerpc_init_dialect): This.  Update to use ppc_cpu_t and
	struct dis_private.
	(print_insn_big_powerpc): Update for using structure in
	info->private_data.
	(print_insn_little_powerpc): Likewise.
	(operand_value_powerpc): Change type of dialect param to ppc_cpu_t.
	(skip_optional_operands): Likewise.
	(print_insn_powerpc): Likewise.  Remove initialization of dialect.
	* ppc-opc.c (extract_bat, extract_bba, extract_bdm, extract_bdp,
	extract_bo, extract_boe, extract_fxm, extract_mb6, extract_mbe,
	extract_nb, extract_nsi, extract_rbs, extract_sh6, extract_spr,
	extract_sprg, extract_tbr insert_bat, insert_bba, insert_bdm,
	insert_bdp, insert_bo, insert_boe, insert_fxm, insert_mb6, insert_mbe,
	insert_nsi, insert_ral, insert_ram, insert_raq, insert_ras, insert_rbs,
	insert_sh6, insert_spr, insert_sprg, insert_tbr): Change the dialect
	param to be of type ppc_cpu_t.  Update prototype.
@
text
@d157 3
d310 5
@


1.27
log
@ppc e500mc support
@
text
@d25 2
d47 1
a47 1
  unsigned long flags;
d188 1
a188 1
    (unsigned long instruction, long op, int dialect, const char **errmsg);
d206 1
a206 1
  long (*extract) (unsigned long instruction, int dialect, int *invalid);
d323 1
a323 1
  unsigned long flags;
@


1.26
log
@binutils/
	* doc/binutils.texi (objdump): Document -Mppcps.

gas/
	* config/tc-ppc.c (parse_cpu): Handle "750cl".
	(pre_defined_registers): Add "gqr0" to "gqr7", "gqr.0" to "gqr.7".
	(md_show_usage): Document -m750cl.
	(md_assemble): Handle two delimiters in succession (eg. `),').
	* doc/c-ppc.texi (PowerPC-Opts): Document -m750cl.
	* testsuite/gas/ppc/ppc.exp: Run ppc70ps dump tests.
	* testsuite/gas/ppc/ppc750ps.s: New file.
	* testsuite/gas/ppc/ppc750ps.d: Likewise.

include/opcode/
	* ppc.h (PPC_OPCODE_PPCPS): New.

opcodes/
	* ppc-opc.c (PSW, PSWM, PSQ, PSQM, PSD, MTMSRD_L): New.
	(XOPS, XOPS_MASK, XW, XW_MASK): Likewise.
	(PPCPS): Likewise.
	(powerpc_opcodes): Add all pair singles instructions.
	* ppc-dis.c (powerpc_dialect): Handle "ppcps".
	(print_ppc_disassembler_options): Document -Mppcps.
@
text
@d152 3
@


1.25
log
@gas/
	PR 4448
	* config/tc-ppc.c (ppc_insert_operand): Don't increase min for
	PPC_OPERAND_PLUS1.
include/opcode/
	* ppc.h (PPC_OPERAND_PLUS1): Update comment.
@
text
@d149 3
@


1.24
log
@include/opcode/
	* ppc.h (struct powerpc_operand): Replace "bits" with "bitm".
	(num_powerpc_operands): Declare.
	(PPC_OPERAND_SIGNED et al): Redefine as hex.
	(PPC_OPERAND_PLUS1): Define.
opcodes/
	* ppc-dis.c (print_insn_powerpc): Adjust for struct powerpc_operand
	change.
	* ppc-opc.c (powerpc_operands): Replace bit count with bit mask
	in all entries.  Add PPC_OPERAND_SIGNED to DE entry.  Remove
	references to following deleted functions.
	(insert_bd, extract_bd, insert_dq, extract_dq): Delete.
	(insert_ds, extract_ds, insert_de, extract_de): Delete.
	(insert_des, extract_des, insert_li, extract_li): Delete.
	(insert_nb, insert_rsq, insert_rtq, insert_ev2, extract_ev2): Delete.
	(insert_ev4, extract_ev4, insert_ev8, extract_ev8): Delete.
	(num_powerpc_operands): New constant.
	(XSPRG_MASK): Remove entire SPRG field.
	(powerpc_opcodes <bcctre, bcctrel>): Use XLBB_MASK not XLYBB_MASK.
gas/
	* messages.c (as_internal_value_out_of_range): Extend to report
	errors for values with invalid low bits set.
	* config/tc-ppc.c (ppc_setup_opcodes): Check powerpc_operands bitm
	fields.  Check that operands and opcode fields are disjoint.
	(ppc_insert_operand): Check operands using mask rather than bit
	count.   Check low bits too.  Handle PPC_OPERAND_PLUS1.  Adjust
	insertion code.
	(md_apply_fix): Adjust for struct powerpc_operand change.
@
text
@d297 1
a297 1
/* Valid range of operand is 1..n rather than 0..n-1.  */
@


1.23
log
@Add powerpc cell support.
@
text
@d2 2
a3 2
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
d156 2
a157 2
  /* The number of bits in the operand.  */
  int bits;
d159 3
a161 1
  /* How far the operand is left shifted in the instruction.  */
d168 1
a168 1
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
d170 1
a170 2
     this structure, and op is the opcode value; this assumes twos
     complement arithmetic).
d186 3
a188 4
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
	 if ((o->flags & PPC_OPERAND_SIGNED) != 0
	     && (op & (1 << (o->bits - 1))) != 0)
	   op -= 1 << o->bits;
d190 1
a190 1
     is the result; this assumes twos complement arithmetic).
d208 1
d213 1
a213 1
#define PPC_OPERAND_SIGNED (01)
d219 1
a219 1
#define PPC_OPERAND_SIGNOPT (02)
d227 1
a227 1
#define PPC_OPERAND_FAKE (04)
d234 1
a234 1
#define PPC_OPERAND_PARENS (010)
d243 1
a243 1
#define PPC_OPERAND_CR (020)
d247 1
a247 1
#define PPC_OPERAND_GPR (040)
d250 1
a250 1
#define PPC_OPERAND_GPR_0 (0100)
d254 1
a254 1
#define PPC_OPERAND_FPR (0200)
d258 1
a258 1
#define PPC_OPERAND_RELATIVE (0400)
d262 1
a262 1
#define PPC_OPERAND_ABSOLUTE (01000)
d270 1
a270 1
#define PPC_OPERAND_OPTIONAL (02000)
d278 1
a278 1
#define PPC_OPERAND_NEXT (04000)
d285 1
a285 1
#define PPC_OPERAND_NEGATIVE (010000)
d289 1
a289 1
#define PPC_OPERAND_VR (020000)
d292 1
a292 1
#define PPC_OPERAND_DS (040000)
d295 4
a298 1
#define PPC_OPERAND_DQ (0100000)
@


1.22
log
@include/opcode/
	* ppc.h (PPC_OPCODE_POWER6): Define.
	Adjust whitespace.
gas/
	* config/tc-ppc.c (parse_cpu): Handle "-mpower6".
	(md_show_usage): Document it.
	(ppc_setup_opcodes): Test power6 opcode flag bits.
	* doc/c-ppc.texi (PowerPC-Opts): Document "-mpower6".
opcodes/
	* ppc-dis.c (powerpc_dialect): Handle power6 option.
	(print_ppc_disassembler_options): Mention power6.
@
text
@d146 2
@


1.21
log
@gas/
	* config/tc-ppc.c (parse_cpu): Add -me300 support.
	(md_show_usage): Likewise.
	* doc/c-ppc.texi (PowerPC-Opts): Document it.
include/opcode/
	* ppc.h (PPC_OPCODE_E300): Define.
opcodes/
	* ppc-dis.c (powerpc_dialect): Handle e300.
	(print_ppc_disassembler_options): Likewise.
	* ppc-opc.c (PPCE300): Define.
	(powerpc_opcodes): Mark icbt as available for the e300.
binutils/
	* doc/binutils.texi (objdump): Document -M e300.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004, 2005
d138 1
a138 1
#define PPC_OPCODE_POWER5	    0x1000000
d141 5
a145 1
#define PPC_OPCODE_E300           0x2000000
@


1.20
log
@	* ppc.h (PPC_OPCODE_POWER5): Define.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
d140 3
@


1.19
log
@Update the address and phone number of the FSF organization
@
text
@d137 3
@


1.18
log
@opcodes/
	* ppc-opc.c (L): Make this field not optional.
include/opcode/
	* ppc.h (PPC_OPERAND_OPTIONAL): Fix comment.
@
text
@d20 1
a20 1
Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.17
log
@opcodes/
	* ppc-dis.c (print_insn_powerpc): Don't print tabs.  Handle
	PPC_OPERANDS_GPR_0.
	* ppc-opc.c (RA0): Define.
	(RAQ, RAL, RAM, RAS, RSQ, RTQ, RSO): Use PPC_OPERAND_GPR_0.
	(RAOPT): Rename from RAO.  Update all uses.
	(powerpc_opcodes): Use RA0 as appropriate.  Add "lsdx", "lsdi",
	"stsdx", "stsdi", "lmd" and "stmd" insns.

include/opcode/
	* ppc.h (PPC_OPERAND_GPR_0): Define.  Bump other operand defines.

gas/testsuite/
	Update gas/ppc/.

ld/testsuite/
	Update ld-powerpc/.
@
text
@d252 1
a252 1
   the optional BF and L fields in the comparison instructions.  The
@


1.16
log
@	* ppc.h (PPC_OPCODE_440): Define.  Formatting.  Use hex for other
	PPC_OPCODE_* defines.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003
d154 1
a154 1
         i |= (op & ((1 << o->bits) - 1)) << o->shift;
d173 1
a173 1
         op = ((i) >> o->shift) & ((1 << o->bits) - 1);
d236 3
d241 1
a241 1
#define PPC_OPERAND_FPR (0100)
d245 1
a245 1
#define PPC_OPERAND_RELATIVE (0200)
d249 1
a249 1
#define PPC_OPERAND_ABSOLUTE (0400)
d257 1
a257 1
#define PPC_OPERAND_OPTIONAL (01000)
d265 1
a265 1
#define PPC_OPERAND_NEXT (02000)
d272 1
a272 1
#define PPC_OPERAND_NEGATIVE (04000)
d276 1
a276 1
#define PPC_OPERAND_VR (010000)
d279 1
a279 1
#define PPC_OPERAND_DS (020000)
d282 1
a282 1
#define PPC_OPERAND_DQ (040000)
@


1.16.14.1
log
@Merge mainline to intercu branch.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
d154 1
a154 1
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
d173 1
a173 1
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
a235 3
/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0100)

d238 1
a238 1
#define PPC_OPERAND_FPR (0200)
d242 1
a242 1
#define PPC_OPERAND_RELATIVE (0400)
d246 1
a246 1
#define PPC_OPERAND_ABSOLUTE (01000)
d254 1
a254 1
#define PPC_OPERAND_OPTIONAL (02000)
d262 1
a262 1
#define PPC_OPERAND_NEXT (04000)
d269 1
a269 1
#define PPC_OPERAND_NEGATIVE (010000)
d273 1
a273 1
#define PPC_OPERAND_VR (020000)
d276 1
a276 1
#define PPC_OPERAND_DS (040000)
d279 1
a279 1
#define PPC_OPERAND_DQ (0100000)
@


1.16.14.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d252 1
a252 1
   example, in the optional BF field in the comparison instructions.  The
@


1.16.18.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
d154 1
a154 1
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
d173 1
a173 1
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
a235 3
/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0100)

d238 1
a238 1
#define PPC_OPERAND_FPR (0200)
d242 1
a242 1
#define PPC_OPERAND_RELATIVE (0400)
d246 1
a246 1
#define PPC_OPERAND_ABSOLUTE (01000)
d254 1
a254 1
#define PPC_OPERAND_OPTIONAL (02000)
d262 1
a262 1
#define PPC_OPERAND_NEXT (04000)
d269 1
a269 1
#define PPC_OPERAND_NEGATIVE (010000)
d273 1
a273 1
#define PPC_OPERAND_VR (020000)
d276 1
a276 1
#define PPC_OPERAND_DS (040000)
d279 1
a279 1
#define PPC_OPERAND_DQ (0100000)
@


1.16.12.1
log
@opcodes/
	* ppc-dis.c (print_insn_powerpc): Don't print tabs.  Handle
	PPC_OPERANDS_GPR_0.
	* ppc-opc.c (RA0): Define.
	(RAQ, RAL, RAM, RAS, RSQ, RTQ, RSO): Use PPC_OPERAND_GPR_0.
	(RAOPT): Rename from RAO.  Update all uses.
	(powerpc_opcodes): Use RA0 as appropriate.  Add "lsdx", "lsdi",
	"stsdx", "stsdi", "lmd" and "stmd" insns.

include/opcode/
	* ppc.h (PPC_OPERAND_GPR_0): Define.  Bump other operand defines.

gas/testsuite/
	Update gas/ppc/.

ld/testsuite/
	Update ld-powerpc/.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
d154 1
a154 1
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
d173 1
a173 1
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
a235 3
/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0100)

d238 1
a238 1
#define PPC_OPERAND_FPR (0200)
d242 1
a242 1
#define PPC_OPERAND_RELATIVE (0400)
d246 1
a246 1
#define PPC_OPERAND_ABSOLUTE (01000)
d254 1
a254 1
#define PPC_OPERAND_OPTIONAL (02000)
d262 1
a262 1
#define PPC_OPERAND_NEXT (04000)
d269 1
a269 1
#define PPC_OPERAND_NEGATIVE (010000)
d273 1
a273 1
#define PPC_OPERAND_VR (020000)
d276 1
a276 1
#define PPC_OPERAND_DS (040000)
d279 1
a279 1
#define PPC_OPERAND_DQ (0100000)
@


1.15
log
@Convert to C90.
@
text
@d62 1
a62 1
#define PPC_OPCODE_PPC (01)
d65 1
a65 1
#define PPC_OPCODE_POWER (02)
d68 1
a68 1
#define PPC_OPCODE_POWER2 (04)
d71 1
a71 1
#define PPC_OPCODE_32 (010)
d74 1
a74 1
#define PPC_OPCODE_64 (020)
d79 1
a79 1
#define PPC_OPCODE_601 (040)
d83 1
a83 1
#define PPC_OPCODE_COMMON (0100)
d87 1
a87 1
#define PPC_OPCODE_ANY (0200)
d90 1
a90 1
#define PPC_OPCODE_64_BRIDGE (0400)
d93 1
a93 1
#define PPC_OPCODE_ALTIVEC (01000)
d96 1
a96 1
#define PPC_OPCODE_403 (02000)
d99 1
a99 1
#define PPC_OPCODE_BOOKE (04000)
d102 4
a105 1
#define PPC_OPCODE_BOOKE64 (010000)
d108 1
a108 1
#define PPC_OPCODE_POWER4 (020000)
d111 1
a111 1
#define PPC_OPCODE_NOPOWER4 (040000)
d114 1
a114 1
#define PPC_OPCODE_CLASSIC (0100000)
d117 1
a117 1
#define PPC_OPCODE_SPE     (0200000)
d120 1
a120 1
#define PPC_OPCODE_ISEL     (0400000)
d123 1
a123 1
#define PPC_OPCODE_EFS      (01000000)
d126 1
a126 1
#define PPC_OPCODE_BRLOCK   (02000000)
d129 1
a129 1
#define PPC_OPCODE_PMR      (04000000)
d132 1
a132 1
#define PPC_OPCODE_CACHELCK (010000000)
d135 1
a135 1
#define PPC_OPCODE_RFMCI    (020000000)
@


1.14
log
@Add "attn", "lq" and "stq" power4 insns.
@
text
@d163 2
a164 3
  unsigned long (*insert) PARAMS ((unsigned long instruction, long op,
				   int dialect,
				   const char **errmsg));
d183 1
a183 2
  long (*extract) PARAMS ((unsigned long instruction, int dialect,
			   int *invalid));
@


1.13
log
@2002-08-19  Elena Zannoni <ezannoni@@redhat.com>

        From matthew green  <mrg@@redhat.com>

        * ppc.h (PPC_OPCODE_SPE): New opcode flag for Powerpc e500
        instructions.
        (PPC_OPCODE_ISEL, PPC_OPCODE_BRLOCK, PPC_OPCODE_PMR,
        PPC_OPCODE_CACHELCK, PPC_OPCODE_RFMCI): New opcode flags for the
        e500x2 Integer select, branch locking, performance monitor,
        cache locking and machine check APUs, respectively.
        (PPC_OPCODE_EFS): New opcode type for efs* instructions.
        (PPC_OPCODE_CLASSIC): New opcode type for Classic PowerPC instructions.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002
d276 3
@


1.13.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003
d62 1
a62 1
#define PPC_OPCODE_PPC			 1
d65 1
a65 1
#define PPC_OPCODE_POWER		 2
d68 1
a68 1
#define PPC_OPCODE_POWER2		 4
d71 1
a71 1
#define PPC_OPCODE_32			 8
d74 1
a74 1
#define PPC_OPCODE_64		      0x10
d79 1
a79 1
#define PPC_OPCODE_601		      0x20
d83 1
a83 1
#define PPC_OPCODE_COMMON	      0x40
d87 1
a87 1
#define PPC_OPCODE_ANY		      0x80
d90 1
a90 1
#define PPC_OPCODE_64_BRIDGE	     0x100
d93 1
a93 1
#define PPC_OPCODE_ALTIVEC	     0x200
d96 1
a96 1
#define PPC_OPCODE_403		     0x400
d99 1
a99 1
#define PPC_OPCODE_BOOKE	     0x800
d102 1
a102 4
#define PPC_OPCODE_BOOKE64	    0x1000

/* Opcode is supported by PowerPC 440 processor.  */
#define PPC_OPCODE_440		    0x2000
d105 1
a105 1
#define PPC_OPCODE_POWER4	    0x4000
d108 1
a108 1
#define PPC_OPCODE_NOPOWER4	    0x8000
d111 1
a111 1
#define PPC_OPCODE_CLASSIC	   0x10000
d114 1
a114 1
#define PPC_OPCODE_SPE		   0x20000
d117 1
a117 1
#define PPC_OPCODE_ISEL		   0x40000
d120 1
a120 1
#define PPC_OPCODE_EFS		   0x80000
d123 1
a123 1
#define PPC_OPCODE_BRLOCK	  0x100000
d126 1
a126 1
#define PPC_OPCODE_PMR		  0x200000
d129 1
a129 1
#define PPC_OPCODE_CACHELCK	  0x400000
d132 1
a132 1
#define PPC_OPCODE_RFMCI	  0x800000
d163 3
a165 2
  unsigned long (*insert)
    (unsigned long instruction, long op, int dialect, const char **errmsg);
d184 2
a185 1
  long (*extract) (unsigned long instruction, int dialect, int *invalid);
a275 3

/* This operand is for the DQ field in a DQ form instruction.  */
#define PPC_OPERAND_DQ (040000)
@


1.13.10.1
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003
a275 3

/* This operand is for the DQ field in a DQ form instruction.  */
#define PPC_OPERAND_DQ (040000)
@


1.13.10.2
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d62 1
a62 1
#define PPC_OPCODE_PPC			 1
d65 1
a65 1
#define PPC_OPCODE_POWER		 2
d68 1
a68 1
#define PPC_OPCODE_POWER2		 4
d71 1
a71 1
#define PPC_OPCODE_32			 8
d74 1
a74 1
#define PPC_OPCODE_64		      0x10
d79 1
a79 1
#define PPC_OPCODE_601		      0x20
d83 1
a83 1
#define PPC_OPCODE_COMMON	      0x40
d87 1
a87 1
#define PPC_OPCODE_ANY		      0x80
d90 1
a90 1
#define PPC_OPCODE_64_BRIDGE	     0x100
d93 1
a93 1
#define PPC_OPCODE_ALTIVEC	     0x200
d96 1
a96 1
#define PPC_OPCODE_403		     0x400
d99 1
a99 1
#define PPC_OPCODE_BOOKE	     0x800
d102 1
a102 4
#define PPC_OPCODE_BOOKE64	    0x1000

/* Opcode is supported by PowerPC 440 processor.  */
#define PPC_OPCODE_440		    0x2000
d105 1
a105 1
#define PPC_OPCODE_POWER4	    0x4000
d108 1
a108 1
#define PPC_OPCODE_NOPOWER4	    0x8000
d111 1
a111 1
#define PPC_OPCODE_CLASSIC	   0x10000
d114 1
a114 1
#define PPC_OPCODE_SPE		   0x20000
d117 1
a117 1
#define PPC_OPCODE_ISEL		   0x40000
d120 1
a120 1
#define PPC_OPCODE_EFS		   0x80000
d123 1
a123 1
#define PPC_OPCODE_BRLOCK	  0x100000
d126 1
a126 1
#define PPC_OPCODE_PMR		  0x200000
d129 1
a129 1
#define PPC_OPCODE_CACHELCK	  0x400000
d132 1
a132 1
#define PPC_OPCODE_RFMCI	  0x800000
d163 3
a165 2
  unsigned long (*insert)
    (unsigned long instruction, long op, int dialect, const char **errmsg);
d184 2
a185 1
  long (*extract) (unsigned long instruction, int dialect, int *invalid);
@


1.12
log
@	* ppc.h (PPC_OPCODE_POWER4, PPC_OPCODE_NOPOWER4): Define.
@
text
@d110 24
@


1.12.8.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@a109 24
/* Opcode is only supported by POWERPC Classic architecture.  */
#define PPC_OPCODE_CLASSIC (0100000)

/* Opcode is only supported by e500x2 Core.  */
#define PPC_OPCODE_SPE     (0200000)

/* Opcode is supported by e500x2 Integer select APU.  */
#define PPC_OPCODE_ISEL     (0400000)

/* Opcode is an e500 SPE floating point instruction.  */
#define PPC_OPCODE_EFS      (01000000)

/* Opcode is supported by branch locking APU.  */
#define PPC_OPCODE_BRLOCK   (02000000)

/* Opcode is supported by performance monitor APU.  */
#define PPC_OPCODE_PMR      (04000000)

/* Opcode is supported by cache locking APU.  */
#define PPC_OPCODE_CACHELCK (010000000)

/* Opcode is supported by machine check APU.  */
#define PPC_OPCODE_RFMCI    (020000000)

@


1.11
log
@[gas/ChangeLog]
* config/tc-ppc.c (md_parse_option): BookE is not Motorola specific.

[include/opcode/ChangeLog]
* ppc.h (PPC_OPCODE_BOOKE): BookE is not Motorola specific.
(PPC_OPCODE_BOOKE64): Likewise.
@
text
@d2 2
a3 1
   Copyright 1994, 1995, 1999, 2000, 2001 Free Software Foundation, Inc.
d103 6
@


1.11.2.1
log
@	* ppc.h (PPC_OPCODE_POWER4, PPC_OPCODE_NOPOWER4): Define.
@
text
@d2 1
a2 2
   Copyright 1994, 1995, 1999, 2000, 2001, 2002
   Free Software Foundation, Inc.
a101 6

/* Opcode is only supported by Power4 architecture.  */
#define PPC_OPCODE_POWER4 (020000)

/* Opcode isn't supported by Power4 architecture.  */
#define PPC_OPCODE_NOPOWER4 (040000)
@


1.10
log
@binutils/ChangeLog
	* doc/binutils.texi (objdump): Document ppc -M options.
gas/ChangeLog
	* config/tc-ppc.c (ppc_insert_operand): Pass (ppc_cpu | ppc_size)
	to operand->insert.
	(md_assemble): Likewise.
gas/testsuite/ChangeLog
	* gas/ppc/booke.d: Modify reloc and target matches for powerpc64.
include/opcode/ChangeLog
	* ppc.h (struct powerpc_operand <insert, extract>): Add dialect param.
opcodes/ChangeLog
	* ppc-opc.c (PPC64): Revert 2001-10-12. Do include PPC_OPCODE_PPC.
	(insert_bat, extract_bat, insert_bba, extract_bba,
	insert_bd, extract_bd, insert_bdm, extract_bdm,
	insert_bdp, extract_bdp, valid_bo,
	insert_bo, extract_bo, insert_boe, extract_boe,
	insert_ds, extract_ds, insert_de, extract_de,
	insert_des, extract_des, insert_li, extract_li,
	insert_mbe, extract_mbe, insert_mb6, extract_mb6,
	insert_nb, extract_nb, insert_nsi, extract_nsi,
	insert_ral, insert_ram, insert_ras,
	insert_rbs, extract_rbs, insert_sh6, extract_sh6,
	insert_spr, extract_spr, insert_tbr, extract_tbr): Add dialect param.
	(extract_bd, extract_bdm, extract_bdp,
	extract_ds, extract_des,
	extract_li, extract_nsi): Implement sign extension without conditional.
	(insert_bdm, extract_bdm,
	insert_bdp, extract_bdp, valid_bo): Handle 64 bit branch hints.
	(extract_bdm, extract_bdp): Correct 32 bit validation.
	(AT1_MASK, AT2_MASK): Define.
	(BBOAT_MASK): Define.
	(BBOATCB_MASK, BBOAT2CB_MASK, BBOATBI_MASK): Define.
	(BOFM64, BOFP64, BOTM64, BOTP64): Define.
	(BODNZM64, BODNZP64, BODZM64, BODZP64): Define.
	(PPCCOM32, PPCCOM64): Define.
	(powerpc_opcodes): Modify existing 32 bit insns with branch hints
	and add new patterns to implement 64 bit branches with hints.  Move
	booke instructions so they match before ppc64.
	* ppc-dis.c (powerpc_dialect): Set PPC_OPCODE_64 in dialect for
	64 bit default targets, and parse "32" and "64" in options.
	Formatting fixes.
	(print_insn_powerpc): Pass dialect to operand->extract.
@
text
@d97 1
a97 1
/* Opcode is supported by Motorola BookE processor.  */
d100 1
a100 1
/* Opcode is only supported by 64-bit Motorola BookE processor.  */
@


1.9
log
@[gas/ChangeLog]
	* config/tc-ppc.c (md_show_usage): Add missing -maltivec, -m7400,
	-m7410, -m7450 and -m7455 options.

[gas/testsuite/ChangeLog]
	* gas/ppc/altivec.s: New test for AltiVec.
	* gas/ppc/altivec.d: New file.
	* gas/ppc/ppc.exp: Test altivec.s

[include/opcode/ChangeLog]
	* ppc.h (PPC_OPCODE_BOOKE64): Fix typo.

[opcodes/ChangeLog]
	* ppc-opc.c (STRM): New AltiVec operand.
	(XDSS): New AltiVec instruction form.
	(mtvscr): Correct operand list.
	(dst, dstt, dstst, dststt, dss, dssall): AltiVec instructions.
@
text
@d133 1
d153 2
a154 1
  long (*extract) PARAMS ((unsigned long instruction, int *invalid));
@


1.8
log
@[gas/ChangeLog]
	* config/tc-ppc.c (md_parse_option): New -m7410, -m7450 and -m7455
	flags, equivalent to -m7400.  New -maltivec to enable AltiVec
	instructions.  New -mbook64 and -mbooke/-mbooke32 flags to enable
	64-bit and 32-bit BookE support, respectively.  Change -m403 and
	-m405 to set PPC403 option.
	(md_show_usage): Adjust for new options.
	* doc/all.texi: Set PPC.
	* doc/as.texinfo: Add PPC support and pull in c-ppc.texi.
	* doc/c-ppc.texi: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-ppc.texi.
	* doc/Makefile.in: Regenerate.

[gas/testsuite/ChangeLog]
	* gas/ppc/booke.s: New test for Motorola BookE.
	* gas/ppc/booke.d: New file.
	* gas/ppc/ppc.exp: Test booke.s.

[include/opcode/ChangeLog]
	* ppc.h (PPC_OPCODE_BOOKE, PPC_OPCODE_403): New opcode flags for
	BookE and PowerPC403 instructions.

[opcodes/ChangeLog]
	* ppc-opc.c (insert_de, extract_de, insert_des, extract_des): New
	instruction field instruction/extraction functions for new BookE
	DE form instructions.
	(CT): New macro for CT field in an X form instruction.
	(DE, DES, DEO, DE_MASK): New macros for DE/DES fields in DE form
	instructions.
	(PPC64): Don't include PPC_OPCODE_PPC.
	(403): New opcode macro for PPC403 processors.
	(BOOKE): New opcode macro for BookE processors.
	(bce, bcel, bcea, bcela, bclre, bclrel: New BookE instructions.
	(bcctre, bcctrel, be, bel, bea, bela, icbt, icbte, lwzxe): Likewise.
	(dcbste, lwzuxe, luxe, dcbfe, lbzxe, lwarxe, lbzuxe): Likewise.
	(stwcxe, stwxe, stxe, stwuxe, stuxe, stbxe, dcbtste, stbuxe): Likewise.
	(mfapidi, dcbte, lhzxe, lhzuxe, lhaxe, lhauxe, subfe64): Likewise.
	(subfeo64, adde64, addeo64, sthxe, sthuxe, subfze64): Likewise.
	(subfzeo64, addze64, addzeo64, dcbie, subfme64, subfmeo64): Likewise.
	(addme64, addmeo64, stdcxe., mcrxr64, lwbrxe, lfsxe, lfsuxe): Likewise.
	(lfdxe, lfduxe, stwbrxe, stfsxe, stfsuxe, stfdxe, dcbae): Likewise.
	(stfduxe, tlbivax, tlbivaxe, lhbrxe, ldxe, lduxe, tlbsx): Likewise.
	(tlbsxe, sthbrxe, stdxe, stduxe, icbie, stfiwxe, dcbze, lbze): Likewise.
	(lbzue, ldue, lhze, lhzue, lhae, lhaue, lwze, lwzue): Likewise.
	(stbe, stbue, sthe, sthue, stwe, stwue, lfse, lfsue, lfde): Likewise.
	(lfdue, stde, stdue, stfse, stfsue, stfde, stfdue): Likewise.

	* ppc-dis.c (print_insn_big_powerpc, print_insn_little_powerpc): Look
	for a disassembler option of `booke', `booke32' or `booke64' to enable
	BookE support in the disassembler.
@
text
@d101 1
a101 1
#define PPC_OPCODE_BOOKE64 (001000)
@


1.7
log
@	* ppc.h (PPC_OPERAND_DS): Define.
@
text
@d92 10
a101 1
#define PPC_OPCODE_ALTIVEC   (01000)
@


1.6
log
@Revert 2001-08-08 changes.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000 Free Software Foundation, Inc.
d232 2
@


1.5
log
@	* ppc.h (struct powerpc_operand): New field `reloc'.
	* ppc-opc.c: Include "bfd.h".
	(powerpc_operands): Add new field for reloc type.
@
text
@a146 1
  int reloc;
@


1.4
log
@Fix typos in ChangeLogs; add coff/external.h; fix copyright dates
@
text
@d147 1
@


1.3
log
@* ppc.h (PPC_OPCODE_ALTIVEC): New opcode flag for vector unit.
(PPC_OPERAND_VR): New operand flag for vector registers.
@
text
@d2 1
a2 1
   Copyright 1994, 1995 Free Software Foundation, Inc.
@


1.3.4.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000 Free Software Foundation, Inc.
@


1.2
log
@* ppc.h (PPC_OPCODE_64_BRIDGE): New.
@
text
@d91 3
d227 5
@


1.1
log
@Initial revision
@
text
@d88 3
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

