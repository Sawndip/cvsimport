head	1.34;
access;
symbols
	sid-snapshot-20180601:1.34
	sid-snapshot-20180501:1.34
	sid-snapshot-20180401:1.34
	sid-snapshot-20180301:1.34
	sid-snapshot-20180201:1.34
	sid-snapshot-20180101:1.34
	sid-snapshot-20171201:1.34
	sid-snapshot-20171101:1.34
	sid-snapshot-20171001:1.34
	sid-snapshot-20170901:1.34
	sid-snapshot-20170801:1.34
	sid-snapshot-20170701:1.34
	sid-snapshot-20170601:1.34
	sid-snapshot-20170501:1.34
	sid-snapshot-20170401:1.34
	sid-snapshot-20170301:1.34
	sid-snapshot-20170201:1.34
	sid-snapshot-20170101:1.34
	sid-snapshot-20161201:1.34
	sid-snapshot-20161101:1.34
	sid-snapshot-20160901:1.34
	sid-snapshot-20160801:1.34
	sid-snapshot-20160701:1.34
	sid-snapshot-20160601:1.34
	sid-snapshot-20160501:1.34
	sid-snapshot-20160401:1.34
	sid-snapshot-20160301:1.34
	sid-snapshot-20160201:1.34
	sid-snapshot-20160101:1.34
	sid-snapshot-20151201:1.34
	sid-snapshot-20151101:1.34
	sid-snapshot-20151001:1.34
	sid-snapshot-20150901:1.34
	sid-snapshot-20150801:1.34
	sid-snapshot-20150701:1.34
	sid-snapshot-20150601:1.34
	sid-snapshot-20150501:1.34
	sid-snapshot-20150401:1.34
	cygwin-1_7_35-release:1.33
	sid-snapshot-20150301:1.33
	cygwin-1_7_34-release:1.33
	sid-snapshot-20150201:1.33
	sid-snapshot-20150101:1.33
	sid-snapshot-20141201:1.33
	cygwin-1_7_33-release:1.33
	sid-snapshot-20141101:1.33
	sid-snapshot-20141001:1.33
	sid-snapshot-20140901:1.33
	cygwin-1_7_32-release:1.33
	sid-snapshot-20140801:1.33
	cygwin-1_7_31-release:1.33
	sid-snapshot-20140701:1.33
	sid-snapshot-20140601:1.33
	cygwin-1_7_30-release:1.33
	sid-snapshot-20140501:1.33
	cygwin-1_7_29-release:1.33
	sid-snapshot-20140401:1.33
	sid-snapshot-20140301:1.33
	cygwin-1_7_28-release:1.33
	sid-snapshot-20140201:1.33
	sid-snapshot-20140101:1.32
	sid-snapshot-20131201:1.32
	cygwin-1_7_27-release:1.32
	cygwin-1_7_26-release:1.32
	sid-snapshot-20131101:1.32
	sid-snapshot-20131001:1.31
	binutils-2_24-branch:1.31.0.6
	binutils-2_24-branchpoint:1.31
	binutils-2_21_1:1.28.6.1
	sid-snapshot-20130901:1.31
	cygwin-1_7_25-release:1.31
	gdb_7_6_1-2013-08-30-release:1.31
	cygwin-1_7_24-release:1.31
	cygwin-1_7_23-release:1.31
	sid-snapshot-20130801:1.31
	cygwin-1_7_22-release:1.31
	cygwin-1_7_21-release:1.31
	sid-snapshot-20130701:1.31
	cygwin-1_7_20-release:1.31
	cygwin-1_7_19-release:1.31
	sid-snapshot-20130601:1.31
	sid-snapshot-20130501:1.31
	gdb_7_6-2013-04-26-release:1.31
	cygwin-64bit-postmerge:1.31
	cygwin-64bit-premerge-branch:1.31.0.4
	cygwin-64bit-premerge:1.31
	sid-snapshot-20130401:1.31
	binutils-2_23_2:1.30
	gdb_7_6-branch:1.31.0.2
	gdb_7_6-2013-03-12-branchpoint:1.31
	cygwin-1_7_18-release:1.31
	sid-snapshot-20130301:1.31
	sid-snapshot-20130201:1.31
	sid-snapshot-20130101:1.31
	sid-snapshot-20121201:1.30
	gdb_7_5_1-2012-11-29-release:1.30
	binutils-2_23_1:1.30
	sid-snapshot-20121101:1.30
	binutils-2_23:1.30
	cygwin-1_7_17-release:1.30
	sid-snapshot-20121001:1.30
	sid-snapshot-20120901:1.30
	gdb_7_5-2012-08-17-release:1.30
	cygwin-64bit-branch:1.30.0.8
	sid-snapshot-20120801:1.30
	binutils-2_23-branch:1.30.0.6
	binutils-2_23-branchpoint:1.30
	cygwin-1_7_16-release:1.30
	gdb_7_5-branch:1.30.0.4
	gdb_7_5-2012-07-18-branchpoint:1.30
	sid-snapshot-20120701:1.30
	sid-snapshot-20120601:1.30
	cygwin-1_7_15-release:1.30
	sid-snapshot-20120501:1.30
	binutils-2_22_branch:1.29.0.4
	gdb_7_4_1-2012-04-26-release:1.30
	cygwin-1_7_14_2-release:1.30
	cygwin-1_7_14-release:1.30
	cygwin-1_7_12-release:1.30
	sid-snapshot-20120401:1.30
	sid-snapshot-20120301:1.30
	cygwin-1_7_11-release:1.30
	cygwin-1_7_10-release:1.30
	sid-snapshot-20120201:1.30
	gdb_7_4-2012-01-24-release:1.30
	sid-snapshot-20120101:1.30
	gdb_7_4-branch:1.30.0.2
	gdb_7_4-2011-12-13-branchpoint:1.30
	sid-snapshot-20111201:1.30
	binutils-2_22:1.29
	sid-snapshot-20111101:1.30
	sid-snapshot-20111001:1.29
	binutils-2_22-branch:1.29.0.2
	binutils-2_22-branchpoint:1.29
	gdb_7_3_1-2011-09-04-release:1.28
	sid-snapshot-20110901:1.29
	sid-snapshot-20110801:1.29
	gdb_7_3-2011-07-26-release:1.28
	sid-snapshot-20110701:1.29
	sid-snapshot-20110601:1.29
	sid-snapshot-20110501:1.29
	gdb_7_3-branch:1.28.0.8
	gdb_7_3-2011-04-01-branchpoint:1.28
	sid-snapshot-20110401:1.28
	cygwin-1_7_9-release:1.28
	sid-snapshot-20110301:1.28
	cygwin-1_7_8-release:1.28
	sid-snapshot-20110201:1.28
	sid-snapshot-20110101:1.28
	binutils-2_21:1.28
	sid-snapshot-20101201:1.28
	binutils-2_21-branch:1.28.0.6
	binutils-2_21-branchpoint:1.28
	sid-snapshot-20101101:1.28
	sid-snapshot-20101001:1.28
	binutils-2_20_1:1.27
	gdb_7_2-2010-09-02-release:1.28
	sid-snapshot-20100901:1.28
	cygwin-1_7_7-release:1.28
	sid-snapshot-20100801:1.28
	gdb_7_2-branch:1.28.0.4
	gdb_7_2-2010-07-07-branchpoint:1.28
	sid-snapshot-20100701:1.28
	sid-snapshot-20100601:1.28
	sid-snapshot-20100501:1.28
	cygwin-1_7_5-release:1.28
	cygwin-1_7_4-release:1.28
	sid-snapshot-20100401:1.28
	cygwin-1_7_3-release:1.28
	cygwin-1_7_2-release:1.28
	gdb_7_1-2010-03-18-release:1.28
	sid-snapshot-20100301:1.28
	gdb_7_1-branch:1.28.0.2
	gdb_7_1-2010-02-18-branchpoint:1.28
	sid-snapshot-20100201:1.28
	sid-snapshot-20100101:1.27
	gdb_7_0_1-2009-12-22-release:1.27
	cygwin-1_7_1-release:1.27
	sid-snapshot-20091201:1.27
	sid-snapshot-20091101:1.27
	binutils-2_20:1.27
	gdb_7_0-2009-10-06-release:1.27
	sid-snapshot-20091001:1.27
	gdb_7_0-branch:1.27.0.8
	gdb_7_0-2009-09-16-branchpoint:1.27
	arc-sim-20090309:1.24
	binutils-arc-20081103-branch:1.24.0.28
	binutils-arc-20081103-branchpoint:1.24
	binutils-2_20-branch:1.27.0.6
	binutils-2_20-branchpoint:1.27
	sid-snapshot-20090901:1.27
	sid-snapshot-20090801:1.27
	msnyder-checkpoint-072509-branch:1.27.0.4
	msnyder-checkpoint-072509-branchpoint:1.27
	sid-snapshot-20090701:1.27
	dje-cgen-play1-branch:1.27.0.2
	dje-cgen-play1-branchpoint:1.27
	sid-snapshot-20090601:1.24
	sid-snapshot-20090501:1.24
	sid-snapshot-20090401:1.24
	arc-20081103-branch:1.24.0.26
	arc-20081103-branchpoint:1.24
	arc-insight_6_8-branch:1.24.0.24
	arc-insight_6_8-branchpoint:1.24
	insight_6_8-branch:1.24.0.22
	insight_6_8-branchpoint:1.24
	sid-snapshot-20090301:1.24
	binutils-2_19_1:1.24
	sid-snapshot-20090201:1.24
	sid-snapshot-20090101:1.24
	reverse-20081226-branch:1.24.0.20
	reverse-20081226-branchpoint:1.24
	sid-snapshot-20081201:1.24
	multiprocess-20081120-branch:1.24.0.18
	multiprocess-20081120-branchpoint:1.24
	sid-snapshot-20081101:1.24
	binutils-2_19:1.24
	sid-snapshot-20081001:1.24
	reverse-20080930-branch:1.24.0.16
	reverse-20080930-branchpoint:1.24
	binutils-2_19-branch:1.24.0.14
	binutils-2_19-branchpoint:1.24
	sid-snapshot-20080901:1.24
	sid-snapshot-20080801:1.24
	reverse-20080717-branch:1.24.0.12
	reverse-20080717-branchpoint:1.24
	sid-snapshot-20080701:1.24
	msnyder-reverse-20080609-branch:1.24.0.10
	msnyder-reverse-20080609-branchpoint:1.24
	drow-reverse-20070409-branch:1.24.0.8
	drow-reverse-20070409-branchpoint:1.24
	sid-snapshot-20080601:1.24
	sid-snapshot-20080501:1.24
	sid-snapshot-20080403:1.24
	sid-snapshot-20080401:1.24
	gdb_6_8-2008-03-27-release:1.24
	sid-snapshot-20080301:1.24
	gdb_6_8-branch:1.24.0.6
	gdb_6_8-2008-02-26-branchpoint:1.24
	sid-snapshot-20080201:1.24
	sid-snapshot-20080101:1.24
	sid-snapshot-20071201:1.24
	sid-snapshot-20071101:1.24
	gdb_6_7_1-2007-10-29-release:1.24
	gdb_6_7-2007-10-10-release:1.24
	sid-snapshot-20071001:1.24
	gdb_6_7-branch:1.24.0.4
	gdb_6_7-2007-09-07-branchpoint:1.24
	binutils-2_18:1.24
	binutils-2_18-branch:1.24.0.2
	binutils-2_18-branchpoint:1.24
	insight_6_6-20070208-release:1.21
	binutils-csl-coldfire-4_1-32:1.21
	binutils-csl-sourcerygxx-4_1-32:1.21
	gdb_6_6-2006-12-18-release:1.21
	binutils-csl-innovasic-fido-3_4_4-33:1.21
	binutils-csl-sourcerygxx-3_4_4-32:1.17
	binutils-csl-coldfire-4_1-30:1.21
	binutils-csl-sourcerygxx-4_1-30:1.21
	binutils-csl-coldfire-4_1-28:1.21
	binutils-csl-sourcerygxx-4_1-29:1.21
	binutils-csl-sourcerygxx-4_1-28:1.21
	gdb_6_6-branch:1.21.0.32
	gdb_6_6-2006-11-15-branchpoint:1.21
	binutils-csl-arm-2006q3-27:1.21
	binutils-csl-sourcerygxx-4_1-27:1.21
	binutils-csl-arm-2006q3-26:1.21
	binutils-csl-sourcerygxx-4_1-26:1.21
	binutils-csl-sourcerygxx-4_1-25:1.21
	binutils-csl-sourcerygxx-4_1-24:1.21
	binutils-csl-sourcerygxx-4_1-23:1.21
	insight_6_5-20061003-release:1.21
	gdb-csl-symbian-6_4_50_20060226-12:1.21
	binutils-csl-sourcerygxx-4_1-21:1.21
	binutils-csl-arm-2006q3-21:1.21
	binutils-csl-sourcerygxx-4_1-22:1.21
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.21
	binutils-csl-sourcerygxx-4_1-20:1.21
	binutils-csl-arm-2006q3-19:1.21
	binutils-csl-sourcerygxx-4_1-19:1.21
	binutils-csl-sourcerygxx-4_1-18:1.21
	binutils-csl-renesas-4_1-9:1.21
	gdb-csl-sourcerygxx-3_4_4-25:1.21
	binutils-csl-sourcerygxx-3_4_4-25:1.17
	nickrob-async-20060828-mergepoint:1.21
	gdb-csl-symbian-6_4_50_20060226-11:1.21
	binutils-csl-renesas-4_1-8:1.21
	binutils-csl-renesas-4_1-7:1.21
	binutils-csl-renesas-4_1-6:1.21
	gdb-csl-sourcerygxx-4_1-17:1.21
	binutils-csl-sourcerygxx-4_1-17:1.21
	gdb-csl-20060226-branch-local-2:1.21
	cr-0x5f1:1.21.0.30
	gdb-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-15:1.21
	gdb-csl-sourcerygxx-4_1-13:1.21
	binutils-csl-sourcerygxx-4_1-13:1.21
	binutils-2_17:1.21
	gdb-csl-sourcerygxx-4_1-12:1.21
	binutils-csl-sourcerygxx-4_1-12:1.21
	gdb-csl-sourcerygxx-3_4_4-21:1.21
	binutils-csl-sourcerygxx-3_4_4-21:1.21
	gdb_6_5-20060621-release:1.21
	binutils-csl-wrs-linux-3_4_4-24:1.17
	binutils-csl-wrs-linux-3_4_4-23:1.17
	gdb-csl-sourcerygxx-4_1-9:1.21
	binutils-csl-sourcerygxx-4_1-9:1.21
	gdb-csl-sourcerygxx-4_1-8:1.21
	binutils-csl-sourcerygxx-4_1-8:1.21
	gdb-csl-sourcerygxx-4_1-7:1.21
	binutils-csl-sourcerygxx-4_1-7:1.21
	gdb-csl-arm-2006q1-6:1.21
	binutils-csl-arm-2006q1-6:1.21
	gdb-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-wrs-linux-3_4_4-22:1.17
	gdb-csl-symbian-6_4_50_20060226-10:1.21
	gdb-csl-symbian-6_4_50_20060226-9:1.21
	gdb-csl-symbian-6_4_50_20060226-8:1.21
	gdb-csl-coldfire-4_1-11:1.21
	binutils-csl-coldfire-4_1-11:1.21
	gdb-csl-sourcerygxx-3_4_4-19:1.21
	binutils-csl-sourcerygxx-3_4_4-19:1.21
	gdb-csl-coldfire-4_1-10:1.21
	gdb_6_5-branch:1.21.0.28
	gdb_6_5-2006-05-14-branchpoint:1.21
	binutils-csl-coldfire-4_1-10:1.21
	gdb-csl-sourcerygxx-4_1-5:1.21
	binutils-csl-sourcerygxx-4_1-5:1.21
	nickrob-async-20060513-branch:1.21.0.26
	nickrob-async-20060513-branchpoint:1.21
	gdb-csl-sourcerygxx-4_1-4:1.21
	binutils-csl-sourcerygxx-4_1-4:1.21
	msnyder-reverse-20060502-branch:1.21.0.24
	msnyder-reverse-20060502-branchpoint:1.21
	binutils-csl-wrs-linux-3_4_4-21:1.17
	gdb-csl-morpho-4_1-4:1.21
	binutils-csl-morpho-4_1-4:1.21
	gdb-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-wrs-linux-3_4_4-20:1.17
	readline_5_1-import-branch:1.21.0.22
	readline_5_1-import-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.21
	binutils-2_17-branch:1.21.0.20
	binutils-2_17-branchpoint:1.21
	gdb-csl-symbian-20060226-branch:1.21.0.18
	gdb-csl-symbian-20060226-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.21
	msnyder-reverse-20060331-branch:1.21.0.16
	msnyder-reverse-20060331-branchpoint:1.21
	binutils-csl-2_17-branch:1.21.0.14
	binutils-csl-2_17-branchpoint:1.21
	gdb-csl-available-20060303-branch:1.21.0.12
	gdb-csl-available-20060303-branchpoint:1.21
	gdb-csl-20060226-branch:1.21.0.10
	gdb-csl-20060226-branchpoint:1.21
	gdb_6_4-20051202-release:1.21
	msnyder-fork-checkpoint-branch:1.21.0.8
	msnyder-fork-checkpoint-branchpoint:1.21
	gdb-csl-gxxpro-6_3-branch:1.21.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.21
	gdb_6_4-branch:1.21.0.4
	gdb_6_4-2005-11-01-branchpoint:1.21
	gdb-csl-arm-20051020-branch:1.21.0.2
	gdb-csl-arm-20051020-branchpoint:1.21
	binutils-csl-gxxpro-3_4-branch:1.17.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.17
	binutils-2_16_1:1.17
	msnyder-tracepoint-checkpoint-branch:1.20.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.20
	gdb-csl-arm-20050325-2005-q1b:1.17
	binutils-csl-arm-2005q1b:1.17
	binutils-2_16:1.17
	gdb-csl-arm-20050325-2005-q1a:1.17
	binutils-csl-arm-2005q1a:1.17
	csl-arm-20050325-branch:1.17.0.6
	csl-arm-20050325-branchpoint:1.17
	binutils-csl-arm-2005q1-branch:1.17.0.4
	binutils-csl-arm-2005q1-branchpoint:1.17
	binutils-2_16-branch:1.17.0.2
	binutils-2_16-branchpoint:1.17
	csl-arm-2004-q3d:1.16
	gdb_6_3-20041109-release:1.16
	gdb_6_3-branch:1.16.0.2
	gdb_6_3-20041019-branchpoint:1.16
	csl-arm-2004-q3:1.16
	drow_intercu-merge-20040921:1.16
	drow_intercu-merge-20040915:1.16
	jimb-gdb_6_2-e500-branch:1.13.0.28
	jimb-gdb_6_2-e500-branchpoint:1.13
	gdb_6_2-20040730-release:1.13
	gdb_6_2-branch:1.13.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.13
	gdb_6_1_1-20040616-release:1.13
	binutils-2_15:1.13
	binutils-2_15-branchpoint:1.13
	csl-arm-2004-q1a:1.13
	csl-arm-2004-q1:1.13
	gdb_6_1-2004-04-05-release:1.13
	drow_intercu-merge-20040402:1.13
	drow_intercu-merge-20040327:1.13
	ezannoni_pie-20040323-branch:1.13.0.22
	ezannoni_pie-20040323-branchpoint:1.13
	cagney_tramp-20040321-mergepoint:1.13
	cagney_tramp-20040309-branch:1.13.0.20
	cagney_tramp-20040309-branchpoint:1.13
	gdb_6_1-branch:1.13.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.13
	drow_intercu-20040221-branch:1.13.0.16
	drow_intercu-20040221-branchpoint:1.13
	binutils-2_15-branch:1.13.0.14
	cagney_bfdfile-20040213-branch:1.13.0.12
	cagney_bfdfile-20040213-branchpoint:1.13
	drow-cplus-merge-20040208:1.13
	carlton_dictionary-20040126-merge:1.13
	cagney_bigcore-20040122-branch:1.13.0.10
	cagney_bigcore-20040122-branchpoint:1.13
	drow-cplus-merge-20040113:1.13
	csl-arm-2003-q4:1.13
	drow-cplus-merge-20031224:1.13
	drow-cplus-merge-20031220:1.13
	carlton_dictionary-20031215-merge:1.13
	drow-cplus-merge-20031214:1.13
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.13
	kettenis_sparc-20030918-branch:1.13.0.8
	kettenis_sparc-20030918-branchpoint:1.13
	carlton_dictionary-20030917-merge:1.13
	ezannoni_pie-20030916-branchpoint:1.13
	ezannoni_pie-20030916-branch:1.13.0.6
	cagney_x86i386-20030821-branch:1.13.0.4
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.2
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.12.0.22
	jimb-ppc64-linux-20030613-branchpoint:1.12
	binutils-2_14:1.12
	cagney_convert-20030606-branch:1.12.0.20
	cagney_convert-20030606-branchpoint:1.12
	cagney_writestrings-20030508-branch:1.12.0.18
	cagney_writestrings-20030508-branchpoint:1.12
	jimb-ppc64-linux-20030528-branch:1.12.0.16
	jimb-ppc64-linux-20030528-branchpoint:1.12
	carlton_dictionary-20030523-merge:1.12
	cagney_fileio-20030521-branch:1.12.0.14
	cagney_fileio-20030521-branchpoint:1.12
	kettenis_i386newframe-20030517-mergepoint:1.12
	jimb-ppc64-linux-20030509-branch:1.12.0.12
	jimb-ppc64-linux-20030509-branchpoint:1.12
	kettenis_i386newframe-20030504-mergepoint:1.12
	carlton_dictionary-20030430-merge:1.12
	binutils-2_14-branch:1.12.0.10
	binutils-2_14-branchpoint:1.12
	kettenis_i386newframe-20030419-branch:1.12.0.8
	kettenis_i386newframe-20030419-branchpoint:1.12
	carlton_dictionary-20030416-merge:1.12
	cagney_frameaddr-20030409-mergepoint:1.12
	kettenis_i386newframe-20030406-branch:1.12.0.6
	kettenis_i386newframe-20030406-branchpoint:1.12
	cagney_frameaddr-20030403-branchpoint:1.12
	cagney_frameaddr-20030403-branch:1.12.0.4
	cagney_framebase-20030330-mergepoint:1.12
	cagney_framebase-20030326-branch:1.12.0.2
	cagney_framebase-20030326-branchpoint:1.12
	cagney_lazyid-20030317-branch:1.11.0.12
	cagney_lazyid-20030317-branchpoint:1.11
	kettenis-i386newframe-20030316-mergepoint:1.11
	offbyone-20030313-branch:1.11.0.10
	offbyone-20030313-branchpoint:1.11
	kettenis-i386newframe-20030308-branch:1.11.0.8
	kettenis-i386newframe-20030308-branchpoint:1.11
	carlton_dictionary-20030305-merge:1.11
	cagney_offbyone-20030303-branch:1.11.0.6
	cagney_offbyone-20030303-branchpoint:1.11
	w32api-2_2:1.11
	mingw-runtime-2_4:1.11
	carlton_dictionary-20030207-merge:1.11
	interps-20030202-branch:1.11.0.4
	interps-20030202-branchpoint:1.11
	cagney-unwind-20030108-branch:1.11.0.2
	cagney-unwind-20030108-branchpoint:1.11
	binutils-2_13_2_1:1.10.12.1
	binutils-2_13_2:1.10.12.1
	carlton_dictionary-20021223-merge:1.11
	gdb_5_3-2002-12-12-release:1.10
	carlton_dictionary-20021115-merge:1.11
	binutils-2_13_1:1.10.12.1
	kseitz_interps-20021105-merge:1.11
	kseitz_interps-20021103-merge:1.11
	drow-cplus-merge-20021020:1.10
	drow-cplus-merge-20021025:1.10
	carlton_dictionary-20021025-merge:1.11
	carlton_dictionary-20021011-merge:1.10
	drow-cplus-branch:1.10.0.24
	drow-cplus-branchpoint:1.10
	kseitz_interps-20020930-merge:1.10
	carlton_dictionary-20020927-merge:1.10
	carlton_dictionary-branch:1.10.0.22
	carlton_dictionary-20020920-branchpoint:1.10
	sid-20020905-branchpoint:1.10
	sid-20020905-branch:1.10.0.20
	gdb_5_3-branch:1.10.0.18
	gdb_5_3-2002-09-04-branchpoint:1.10
	kseitz_interps-20020829-merge:1.10
	cagney_sysregs-20020825-branch:1.10.0.16
	cagney_sysregs-20020825-branchpoint:1.10
	readline_4_3-import-branch:1.10.0.14
	readline_4_3-import-branchpoint:1.10
	binutils-2_13:1.10
	gdb_5_2_1-2002-07-23-release:1.10
	binutils-2_13-branchpoint:1.10
	binutils-2_13-branch:1.10.0.12
	kseitz_interps-20020528-branch:1.10.0.10
	kseitz_interps-20020528-branchpoint:1.10
	cagney_regbuf-20020515-branch:1.10.0.8
	cagney_regbuf-20020515-branchpoint:1.10
	binutils-2_12_1:1.10
	jimb-macro-020506-branch:1.10.0.6
	jimb-macro-020506-branchpoint:1.10
	gdb_5_2-2002-04-29-release:1.10
	binutils-2_12:1.10
	gdb_5_2-branch:1.10.0.4
	gdb_5_2-2002-03-03-branchpoint:1.10
	binutils-2_12-branch:1.10.0.2
	binutils-2_12-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.7
	gdb_5_1_0_1-2002-01-03-release:1.7
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.4
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.2
	gdb_5_1-2001-07-29-branchpoint:1.7
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	insight-precleanup-2001-01-01:1.4
	binutils-2_10_1:1.3
	binutils-2_10:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.4
	gdb_5_0-2000-04-10-branchpoint:1.3
	binutils-2_10-branch:1.3.0.2
	binutils-2_10-branchpoint:1.3
	egcs_20000222:1.1.1.2
	binutils_latest_snapshot:1.33
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2015.03.04.18.00.59;	author dj;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.21.16.09.24;	author dj;	state Exp;
branches;
next	1.32;

1.32
date	2013.10.29.15.14.27;	author dj;	state Exp;
branches;
next	1.31;

1.31
date	2012.12.18.17.41.27;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2011.10.22.01.35.29;	author dj;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.25.18.28.52;	author jkratoch;	state Exp;
branches;
next	1.28;

1.28
date	2010.01.05.21.10.23;	author dj;	state Exp;
branches
	1.28.6.1;
next	1.27;

1.27
date	2009.06.16.13.21.26;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2009.06.03.21.02.16;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.01.19.40.32;	author dj;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.06.19.00.57;	author dj;	state Exp;
branches;
next	1.23;

1.23
date	2006.12.06.19.28.41;	author dj;	state Exp;
branches;
next	1.22;

1.22
date	2006.12.06.14.36.41;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2005.07.03.19.16.16;	author dj;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.30.01.12.16;	author dj;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.24.21.00.54;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.10.10.21.08;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2005.02.14.12.10.25;	author dj;	state Exp;
branches;
next	1.16;

1.16
date	2004.09.05.06.04.05;	author dj;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.24.18.04.39;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.21.17.27.07;	author dj;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.17.16.31.07;	author dj;	state Exp;
branches
	1.13.16.1;
next	1.12;

1.12
date	2003.03.17.23.09.54;	author dj;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.25.00.01.55;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.29.20.03.08;	author dj;	state Exp;
branches
	1.10.10.1
	1.10.12.1
	1.10.22.1
	1.10.24.1;
next	1.9;

1.9
date	2001.08.27.20.04.44;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.18.23.47.14;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.11.20.22.28;	author dj;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.04.01.15.59;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.14.02.27.43;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.17.15.51.55;	author hjl;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.02.22.16.40.36;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	99.07.11.19.15.01;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.01;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.28.6.1
date	2011.05.29.04.51.43;	author amodra;	state Exp;
branches;
next	;

1.13.16.1
date	2004.09.16.17.01.49;	author drow;	state Exp;
branches;
next	;

1.10.10.1
date	2002.11.03.21.52.23;	author ezannoni;	state Exp;
branches;
next	;

1.10.12.1
date	2002.10.28.18.45.51;	author drow;	state Exp;
branches;
next	;

1.10.22.1
date	2002.10.25.23.49.59;	author carlton;	state Exp;
branches;
next	1.10.22.2;

1.10.22.2
date	2003.04.16.19.57.03;	author carlton;	state Exp;
branches;
next	1.10.22.3;

1.10.22.3
date	2003.06.27.21.50.21;	author carlton;	state Exp;
branches;
next	;

1.10.24.1
date	2003.12.14.20.27.59;	author drow;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.07.03.21.38;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.01;	author rth;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.02.22.16.18.13;	author ian;	state Exp;
branches;
next	;


desc
@@


1.34
log
@merge from gcc
@
text
@/* ANSI and traditional C compatability macros
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2013
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */

/* ANSI and traditional C compatibility macros

   ANSI C is assumed if __STDC__ is #defined.

   Macro		ANSI C definition	Traditional C definition
   -----		---- - ----------	----------- - ----------
   PTR			`void *'		`char *'
   const		not defined		`'
   volatile		not defined		`'
   signed		not defined		`'

   For ease of writing code which uses GCC extensions but needs to be
   portable to other compilers, we provide the GCC_VERSION macro that
   simplifies testing __GNUC__ and __GNUC_MINOR__ together, and various
   wrappers around __attribute__.  Also, __extension__ will be #defined
   to nothing if it doesn't work.  See below.  */

#ifndef	_ANSIDECL_H
#define _ANSIDECL_H	1

#ifdef __cplusplus
extern "C" {
#endif

/* Every source file includes this file,
   so they will all get the switch for lint.  */
/* LINTLIBRARY */

/* Using MACRO(x,y) in cpp #if conditionals does not work with some
   older preprocessors.  Thus we can't define something like this:

#define HAVE_GCC_VERSION(MAJOR, MINOR) \
  (__GNUC__ > (MAJOR) || (__GNUC__ == (MAJOR) && __GNUC_MINOR__ >= (MINOR)))

and then test "#if HAVE_GCC_VERSION(2,7)".

So instead we use the macro below and test it against specific values.  */

/* This macro simplifies testing whether we are using gcc, and if it
   is of a particular minimum version. (Both major & minor numbers are
   significant.)  This macro will evaluate to 0 if we are not using
   gcc at all.  */
#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)
#endif /* GCC_VERSION */

#if defined (__STDC__) || defined(__cplusplus) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32)
/* All known AIX compilers implement these things (but don't always
   define __STDC__).  The RISC/OS MIPS compiler defines these things
   in SVR4 mode, but does not define __STDC__.  */
/* eraxxon@@alumni.rice.edu: The Compaq C++ compiler, unlike many other
   C++ compilers, does not define __STDC__, though it acts as if this
   was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */

#define PTR		void *

#undef const
#undef volatile
#undef signed

/* inline requires special treatment; it's in C99, and GCC >=2.7 supports
   it too, but it's not in C89.  */
#undef inline
#if __STDC_VERSION__ >= 199901L || defined(__cplusplus) || (defined(__SUNPRO_C) && defined(__C99FEATURES__))
/* it's a keyword */
#else
# if GCC_VERSION >= 2007
#  define inline __inline__   /* __inline__ prevents -pedantic warnings */
# else
#  define inline  /* nothing */
# endif
#endif

#else	/* Not ANSI C.  */

#define PTR		char *

/* some systems define these in header files for non-ansi mode */
#undef const
#undef volatile
#undef signed
#undef inline
#define const
#define volatile
#define signed
#define inline

#endif	/* ANSI C.  */

/* Define macros for some gcc attributes.  This permits us to use the
   macros freely, and know that they will come into play for the
   version of gcc in which they are supported.  */

#if (GCC_VERSION < 2007)
# define __attribute__(x)
#endif

/* Attribute __malloc__ on functions was valid as of gcc 2.96. */
#ifndef ATTRIBUTE_MALLOC
# if (GCC_VERSION >= 2096)
#  define ATTRIBUTE_MALLOC __attribute__ ((__malloc__))
# else
#  define ATTRIBUTE_MALLOC
# endif /* GNUC >= 2.96 */
#endif /* ATTRIBUTE_MALLOC */

/* Attributes on labels were valid as of gcc 2.93 and g++ 4.5.  For
   g++ an attribute on a label must be followed by a semicolon.  */
#ifndef ATTRIBUTE_UNUSED_LABEL
# ifndef __cplusplus
#  if GCC_VERSION >= 2093
#   define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED
#  else
#   define ATTRIBUTE_UNUSED_LABEL
#  endif
# else
#  if GCC_VERSION >= 4005
#   define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED ;
#  else
#   define ATTRIBUTE_UNUSED_LABEL
#  endif
# endif
#endif

/* Similarly to ARG_UNUSED below.  Prior to GCC 3.4, the C++ frontend
   couldn't parse attributes placed after the identifier name, and now
   the entire compiler is built with C++.  */
#ifndef ATTRIBUTE_UNUSED
#if GCC_VERSION >= 3004
#  define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
#else
#define ATTRIBUTE_UNUSED
#endif
#endif /* ATTRIBUTE_UNUSED */

/* Before GCC 3.4, the C++ frontend couldn't parse attributes placed after the
   identifier name.  */
#if ! defined(__cplusplus) || (GCC_VERSION >= 3004)
# define ARG_UNUSED(NAME) NAME ATTRIBUTE_UNUSED
#else /* !__cplusplus || GNUC >= 3.4 */
# define ARG_UNUSED(NAME) NAME
#endif /* !__cplusplus || GNUC >= 3.4 */

#ifndef ATTRIBUTE_NORETURN
#define ATTRIBUTE_NORETURN __attribute__ ((__noreturn__))
#endif /* ATTRIBUTE_NORETURN */

/* Attribute `nonnull' was valid as of gcc 3.3.  */
#ifndef ATTRIBUTE_NONNULL
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NONNULL(m) __attribute__ ((__nonnull__ (m)))
# else
#  define ATTRIBUTE_NONNULL(m)
# endif /* GNUC >= 3.3 */
#endif /* ATTRIBUTE_NONNULL */

/* Attribute `returns_nonnull' was valid as of gcc 4.9.  */
#ifndef ATTRIBUTE_RETURNS_NONNULL
# if (GCC_VERSION >= 4009)
#  define ATTRIBUTE_RETURNS_NONNULL __attribute__ ((__returns_nonnull__))
# else
#  define ATTRIBUTE_RETURNS_NONNULL
# endif /* GNUC >= 4.9 */
#endif /* ATTRIBUTE_RETURNS_NONNULL */

/* Attribute `pure' was valid as of gcc 3.0.  */
#ifndef ATTRIBUTE_PURE
# if (GCC_VERSION >= 3000)
#  define ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define ATTRIBUTE_PURE
# endif /* GNUC >= 3.0 */
#endif /* ATTRIBUTE_PURE */

/* Use ATTRIBUTE_PRINTF when the format specifier must not be NULL.
   This was the case for the `printf' format attribute by itself
   before GCC 3.3, but as of 3.3 we need to add the `nonnull'
   attribute to retain this behavior.  */
#ifndef ATTRIBUTE_PRINTF
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n))) ATTRIBUTE_NONNULL(m)
#define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
#define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
#define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
#define ATTRIBUTE_PRINTF_4 ATTRIBUTE_PRINTF(4, 5)
#define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)
#endif /* ATTRIBUTE_PRINTF */

/* Use ATTRIBUTE_FPTR_PRINTF when the format attribute is to be set on
   a function pointer.  Format attributes were allowed on function
   pointers as of gcc 3.1.  */
#ifndef ATTRIBUTE_FPTR_PRINTF
# if (GCC_VERSION >= 3001)
#  define ATTRIBUTE_FPTR_PRINTF(m, n) ATTRIBUTE_PRINTF(m, n)
# else
#  define ATTRIBUTE_FPTR_PRINTF(m, n)
# endif /* GNUC >= 3.1 */
# define ATTRIBUTE_FPTR_PRINTF_1 ATTRIBUTE_FPTR_PRINTF(1, 2)
# define ATTRIBUTE_FPTR_PRINTF_2 ATTRIBUTE_FPTR_PRINTF(2, 3)
# define ATTRIBUTE_FPTR_PRINTF_3 ATTRIBUTE_FPTR_PRINTF(3, 4)
# define ATTRIBUTE_FPTR_PRINTF_4 ATTRIBUTE_FPTR_PRINTF(4, 5)
# define ATTRIBUTE_FPTR_PRINTF_5 ATTRIBUTE_FPTR_PRINTF(5, 6)
#endif /* ATTRIBUTE_FPTR_PRINTF */

/* Use ATTRIBUTE_NULL_PRINTF when the format specifier may be NULL.  A
   NULL format specifier was allowed as of gcc 3.3.  */
#ifndef ATTRIBUTE_NULL_PRINTF
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
# else
#  define ATTRIBUTE_NULL_PRINTF(m, n)
# endif /* GNUC >= 3.3 */
# define ATTRIBUTE_NULL_PRINTF_1 ATTRIBUTE_NULL_PRINTF(1, 2)
# define ATTRIBUTE_NULL_PRINTF_2 ATTRIBUTE_NULL_PRINTF(2, 3)
# define ATTRIBUTE_NULL_PRINTF_3 ATTRIBUTE_NULL_PRINTF(3, 4)
# define ATTRIBUTE_NULL_PRINTF_4 ATTRIBUTE_NULL_PRINTF(4, 5)
# define ATTRIBUTE_NULL_PRINTF_5 ATTRIBUTE_NULL_PRINTF(5, 6)
#endif /* ATTRIBUTE_NULL_PRINTF */

/* Attribute `sentinel' was valid as of gcc 3.5.  */
#ifndef ATTRIBUTE_SENTINEL
# if (GCC_VERSION >= 3005)
#  define ATTRIBUTE_SENTINEL __attribute__ ((__sentinel__))
# else
#  define ATTRIBUTE_SENTINEL
# endif /* GNUC >= 3.5 */
#endif /* ATTRIBUTE_SENTINEL */


#ifndef ATTRIBUTE_ALIGNED_ALIGNOF
# if (GCC_VERSION >= 3000)
#  define ATTRIBUTE_ALIGNED_ALIGNOF(m) __attribute__ ((__aligned__ (__alignof__ (m))))
# else
#  define ATTRIBUTE_ALIGNED_ALIGNOF(m)
# endif /* GNUC >= 3.0 */
#endif /* ATTRIBUTE_ALIGNED_ALIGNOF */

/* Useful for structures whose layout must much some binary specification
   regardless of the alignment and padding qualities of the compiler.  */
#ifndef ATTRIBUTE_PACKED
# define ATTRIBUTE_PACKED __attribute__ ((packed))
#endif

/* Attribute `hot' and `cold' was valid as of gcc 4.3.  */
#ifndef ATTRIBUTE_COLD
# if (GCC_VERSION >= 4003)
#  define ATTRIBUTE_COLD __attribute__ ((__cold__))
# else
#  define ATTRIBUTE_COLD
# endif /* GNUC >= 4.3 */
#endif /* ATTRIBUTE_COLD */
#ifndef ATTRIBUTE_HOT
# if (GCC_VERSION >= 4003)
#  define ATTRIBUTE_HOT __attribute__ ((__hot__))
# else
#  define ATTRIBUTE_HOT
# endif /* GNUC >= 4.3 */
#endif /* ATTRIBUTE_HOT */

/* Attribute 'no_sanitize_undefined' was valid as of gcc 4.9.  */
#ifndef ATTRIBUTE_NO_SANITIZE_UNDEFINED
# if (GCC_VERSION >= 4009)
#  define ATTRIBUTE_NO_SANITIZE_UNDEFINED __attribute__ ((no_sanitize_undefined))
# else
#  define ATTRIBUTE_NO_SANITIZE_UNDEFINED
# endif /* GNUC >= 4.9 */
#endif /* ATTRIBUTE_NO_SANITIZE_UNDEFINED */

/* We use __extension__ in some places to suppress -pedantic warnings
   about GCC extensions.  This feature didn't work properly before
   gcc 2.8.  */
#if GCC_VERSION < 2008
#define __extension__
#endif

/* This is used to declare a const variable which should be visible
   outside of the current compilation unit.  Use it as
     EXPORTED_CONST int i = 1;
   This is because the semantics of const are different in C and C++.
   "extern const" is permitted in C but it looks strange, and gcc
   warns about it when -Wc++-compat is not used.  */
#ifdef __cplusplus
#define EXPORTED_CONST extern const
#else
#define EXPORTED_CONST const
#endif

/* Be conservative and only use enum bitfields with C++ or GCC.
   FIXME: provide a complete autoconf test for buggy enum bitfields.  */

#ifdef __cplusplus
#define ENUM_BITFIELD(TYPE) enum TYPE
#elif (GCC_VERSION > 2000)
#define ENUM_BITFIELD(TYPE) __extension__ enum TYPE
#else
#define ENUM_BITFIELD(TYPE) unsigned int
#endif

#ifdef __cplusplus
}
#endif

#endif	/* ansidecl.h	*/
@


1.33
log
@merge from gcc
@
text
@d279 9
@


1.32
log
@merge from gcc
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010
a26 1
   ANSI_PROTOTYPES	1			not defined
a27 2
   PTRCONST		`void *const'		`char *'
   LONG_DOUBLE		`long double'		`double'
a30 70
   VA_START(ap, var)	va_start(ap, var)	va_start(ap)

   Note that it is safe to write "void foo();" indicating a function
   with no return value, in all K+R compilers we have been able to test.

   For declaring functions with prototypes, we also provide these:

   PARAMS ((prototype))
   -- for functions which take a fixed number of arguments.  Use this
   when declaring the function.  When defining the function, write a
   K+R style argument list.  For example:

	char *strcpy PARAMS ((char *dest, char *source));
	...
	char *
	strcpy (dest, source)
	     char *dest;
	     char *source;
	{ ... }


   VPARAMS ((prototype, ...))
   -- for functions which take a variable number of arguments.  Use
   PARAMS to declare the function, VPARAMS to define it.  For example:

	int printf PARAMS ((const char *format, ...));
	...
	int
	printf VPARAMS ((const char *format, ...))
	{
	   ...
	}

   For writing functions which take variable numbers of arguments, we
   also provide the VA_OPEN, VA_CLOSE, and VA_FIXEDARG macros.  These
   hide the differences between K+R <varargs.h> and C89 <stdarg.h> more
   thoroughly than the simple VA_START() macro mentioned above.

   VA_OPEN and VA_CLOSE are used *instead of* va_start and va_end.
   Immediately after VA_OPEN, put a sequence of VA_FIXEDARG calls
   corresponding to the list of fixed arguments.  Then use va_arg
   normally to get the variable arguments, or pass your va_list object
   around.  You do not declare the va_list yourself; VA_OPEN does it
   for you.

   Here is a complete example:

	int
	printf VPARAMS ((const char *format, ...))
	{
	   int result;

	   VA_OPEN (ap, format);
	   VA_FIXEDARG (ap, const char *, format);

	   result = vfprintf (stdout, format, ap);
	   VA_CLOSE (ap);

	   return result;
	}


   You can declare variables either before or after the VA_OPEN,
   VA_FIXEDARG sequence.  Also, VA_OPEN and VA_CLOSE are the beginning
   and end of a block.  They must appear at the same nesting level,
   and any variables declared after VA_OPEN go out of scope at
   VA_CLOSE.  Unfortunately, with a K+R compiler, that includes the
   argument list.  You can have multiple instances of VA_OPEN/VA_CLOSE
   pairs in a single function in case you need to traverse the
   argument list more than once.
d36 1
a36 5
   to nothing if it doesn't work.  See below.

   This header also defines a lot of obsolete macros:
   CONST, VOLATILE, SIGNED, PROTO, EXFUN, DEFUN, DEFUN_VOID,
   AND, DOTS, NOARGS.  Don't use them.  */
a74 1
#define ANSI_PROTOTYPES	1
a75 11
#define PTRCONST	void *const
#define LONG_DOUBLE	long double

/* PARAMS is often defined elsewhere (e.g. by libintl.h), so wrap it in
   a #ifndef.  */
#ifndef PARAMS
#define PARAMS(ARGS)		ARGS
#endif

#define VPARAMS(ARGS)		ARGS
#define VA_START(VA_LIST, VAR)	va_start(VA_LIST, VAR)
a76 8
/* variadic function helper macros */
/* "struct Qdmy" swallows the semicolon after VA_OPEN/VA_FIXEDARG's
   use without inhibiting further decls and without declaring an
   actual variable.  */
#define VA_OPEN(AP, VAR)	{ va_list AP; va_start(AP, VAR); { struct Qdmy
#define VA_CLOSE(AP)		} va_end(AP); }
#define VA_FIXEDARG(AP, T, N)	struct Qdmy
 
a93 15
/* These are obsolete.  Do not use.  */
#ifndef IN_GCC
#define CONST		const
#define VOLATILE	volatile
#define SIGNED		signed

#define PROTO(type, name, arglist)	type name arglist
#define EXFUN(name, proto)		name proto
#define DEFUN(name, arglist, args)	name(args)
#define DEFUN_VOID(name)		name(void)
#define AND		,
#define DOTS		, ...
#define NOARGS		void
#endif /* ! IN_GCC */

a95 1
#undef  ANSI_PROTOTYPES
a96 10
#define PTRCONST	PTR
#define LONG_DOUBLE	double

#define PARAMS(args)		()
#define VPARAMS(args)		(va_alist) va_dcl
#define VA_START(va_list, var)	va_start(va_list)

#define VA_OPEN(AP, VAR)		{ va_list AP; va_start(AP); { struct Qdmy
#define VA_CLOSE(AP)			} va_end(AP); }
#define VA_FIXEDARG(AP, TYPE, NAME)	TYPE NAME = va_arg(AP, TYPE)
a107 14
#ifndef IN_GCC
#define CONST
#define VOLATILE
#define SIGNED

#define PROTO(type, name, arglist)	type name ()
#define EXFUN(name, proto)		name()
#define DEFUN(name, arglist, args)	name arglist args;
#define DEFUN_VOID(name)		name()
#define AND		;
#define DOTS
#define NOARGS
#endif /* ! IN_GCC */

@


1.31
log
@merge from gcc
@
text
@d314 9
@


1.30
log
@* obstack.h [!GNUC] (obstack_free): Avoid cast to int.
* ansidecl.h (ENUM_BITFIELD): Always use enum in C++
@
text
@d282 3
d286 5
a290 1
#define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
@


1.29
log
@gdb/
	* defs.h (ENUM_BITFIELD): Remove.

include/
	* bfdlink.h (ENUM_BITFIELD): Remove.

merge from gcc:
include/
	* ansidecl.h (ENUM_BITFIELD): New, from gcc/system.h.
@
text
@d419 1
a419 1
/* Be conservative and only use enum bitfields with GCC.
d422 3
a424 1
#if (GCC_VERSION > 2000)
@


1.28
log
@merge from gcc
@
text
@d419 9
@


1.28.6.1
log
@	PR 12365
	PR 12613
	PR 12632
	PR 12739
	PR 12753
	PR 12760
	PR 12763
Apply fix from mainline along with assorted other small fixes.
@
text
@a418 9
/* Be conservative and only use enum bitfields with GCC.
   FIXME: provide a complete autoconf test for buggy enum bitfields.  */

#if (GCC_VERSION > 2000)
#define ENUM_BITFIELD(TYPE) __extension__ enum TYPE
#else
#define ENUM_BITFIELD(TYPE) unsigned int
#endif

@


1.27
log
@merge from gcc
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006, 2007, 2009
d181 1
a181 1
#if __STDC_VERSION__ > 199901L || defined(__cplusplus)
@


1.26
log
@merge from gcc
@
text
@d264 2
a265 1
/* Attributes on labels were valid as of gcc 2.93. */
d267 14
a280 6
# if (!defined (__cplusplus) && GCC_VERSION >= 2093)
#  define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED
# else
#  define ATTRIBUTE_UNUSED_LABEL
# endif /* !__cplusplus && GNUC >= 2.93 */
#endif /* ATTRIBUTE_UNUSED_LABEL */
@


1.25
log
@merge from gcc
@
text
@d398 12
@


1.24
log
@merge from gcc
@
text
@d2 2
a3 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001
d118 4
d144 1
a144 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
d181 1
a181 1
#if __STDC_VERSION__ > 199901L
d398 4
@


1.23
log
@merge from gcc
@
text
@d370 16
@


1.22
log
@Define ATTRIBUTE_PACKED and use as necessary.
@
text
@d364 1
a364 1
/* Useful for structures whoes layout must much some binary specification
@


1.21
log
@merge from gcc
@
text
@d364 6
@


1.20
log
@merge from gcc
@
text
@d355 9
@


1.19
log
@merge from gcc
@
text
@d315 16
@


1.18
log
@Update the address and phone number of the FSF organization
@
text
@d261 1
a261 1
# if (GCC_VERSION >= 2093)
d265 1
a265 1
# endif /* GNUC >= 2.93 */
@


1.17
log
@merge from gcc
@
text
@d18 1
a18 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.16
log
@merge from gcc
@
text
@d152 3
d156 2
@


1.15
log
@merge from gcc
@
text
@d325 9
@


1.14
log
@merge from gcc
@
text
@d267 8
@


1.13
log
@merge from gcc
@
text
@d280 9
@


1.13.16.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a266 8
/* Before GCC 3.4, the C++ frontend couldn't parse attributes placed after the
   identifier name.  */
#if ! defined(__cplusplus) || (GCC_VERSION >= 3004)
# define ARG_UNUSED(NAME) NAME ATTRIBUTE_UNUSED
#else /* !__cplusplus || GNUC >= 3.4 */
# define ARG_UNUSED(NAME) NAME
#endif /* !__cplusplus || GNUC >= 3.4 */

a279 9
/* Attribute `pure' was valid as of gcc 3.0.  */
#ifndef ATTRIBUTE_PURE
# if (GCC_VERSION >= 3000)
#  define ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define ATTRIBUTE_PURE
# endif /* GNUC >= 3.0 */
#endif /* ATTRIBUTE_PURE */

a307 9
/* Attribute `sentinel' was valid as of gcc 3.5.  */
#ifndef ATTRIBUTE_SENTINEL
# if (GCC_VERSION >= 3005)
#  define ATTRIBUTE_SENTINEL __attribute__ ((__sentinel__))
# else
#  define ATTRIBUTE_SENTINEL
# endif /* GNUC >= 3.5 */
#endif /* ATTRIBUTE_SENTINEL */

@


1.12
log
@merge from gcc
@
text
@a314 11
/* Bootstrap support:  Adjust certain macros defined by Autoconf,
   which are only valid for the stage1 compiler.  If we detect
   a modern version of GCC, we are probably in stage2 or beyond,
   so unconditionally reset the values.  Note that const, inline,
   etc. have been dealt with above.  */
#if (GCC_VERSION >= 2007)
# ifndef HAVE_LONG_DOUBLE
#  define HAVE_LONG_DOUBLE 1
# endif
#endif /* GCC >= 2.7 */

@


1.11
log
@merge from gcc
@
text
@d271 13
d285 1
a285 1
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
d292 15
@


1.10
log
@merge from gcc
@
text
@d139 1
a139 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32)
d143 3
@


1.10.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d139 1
a139 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
a142 3
/* eraxxon@@alumni.rice.edu: The Compaq C++ compiler, unlike many other
   C++ compilers, does not define __STDC__, though it acts as if this
   was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */
a267 13
/* Attribute `nonnull' was valid as of gcc 3.3.  */
#ifndef ATTRIBUTE_NONNULL
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NONNULL(m) __attribute__ ((__nonnull__ (m)))
# else
#  define ATTRIBUTE_NONNULL(m)
# endif /* GNUC >= 3.3 */
#endif /* ATTRIBUTE_NONNULL */

/* Use ATTRIBUTE_PRINTF when the format specifier must not be NULL.
   This was the case for the `printf' format attribute by itself
   before GCC 3.3, but as of 3.3 we need to add the `nonnull'
   attribute to retain this behavior.  */
d269 1
a269 1
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n))) ATTRIBUTE_NONNULL(m)
a276 15
/* Use ATTRIBUTE_NULL_PRINTF when the format specifier may be NULL.  A
   NULL format specifier was allowed as of gcc 3.3.  */
#ifndef ATTRIBUTE_NULL_PRINTF
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
# else
#  define ATTRIBUTE_NULL_PRINTF(m, n)
# endif /* GNUC >= 3.3 */
# define ATTRIBUTE_NULL_PRINTF_1 ATTRIBUTE_NULL_PRINTF(1, 2)
# define ATTRIBUTE_NULL_PRINTF_2 ATTRIBUTE_NULL_PRINTF(2, 3)
# define ATTRIBUTE_NULL_PRINTF_3 ATTRIBUTE_NULL_PRINTF(3, 4)
# define ATTRIBUTE_NULL_PRINTF_4 ATTRIBUTE_NULL_PRINTF(4, 5)
# define ATTRIBUTE_NULL_PRINTF_5 ATTRIBUTE_NULL_PRINTF(5, 6)
#endif /* ATTRIBUTE_NULL_PRINTF */

d283 11
@


1.10.10.1
log
@merge from mainline
@
text
@d139 1
a139 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
a142 3
/* eraxxon@@alumni.rice.edu: The Compaq C++ compiler, unlike many other
   C++ compilers, does not define __STDC__, though it acts as if this
   was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */
@


1.10.12.1
log
@Merge from mainline.
@
text
@d139 1
a139 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
a142 3
/* eraxxon@@alumni.rice.edu: The Compaq C++ compiler, unlike many other
   C++ compilers, does not define __STDC__, though it acts as if this
   was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */
@


1.10.22.1
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d139 1
a139 1
#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
a142 3
/* eraxxon@@alumni.rice.edu: The Compaq C++ compiler, unlike many other
   C++ compilers, does not define __STDC__, though it acts as if this
   was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */
@


1.10.22.2
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a270 13
/* Attribute `nonnull' was valid as of gcc 3.3.  */
#ifndef ATTRIBUTE_NONNULL
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NONNULL(m) __attribute__ ((__nonnull__ (m)))
# else
#  define ATTRIBUTE_NONNULL(m)
# endif /* GNUC >= 3.3 */
#endif /* ATTRIBUTE_NONNULL */

/* Use ATTRIBUTE_PRINTF when the format specifier must not be NULL.
   This was the case for the `printf' format attribute by itself
   before GCC 3.3, but as of 3.3 we need to add the `nonnull'
   attribute to retain this behavior.  */
d272 1
a272 1
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n))) ATTRIBUTE_NONNULL(m)
a278 15

/* Use ATTRIBUTE_NULL_PRINTF when the format specifier may be NULL.  A
   NULL format specifier was allowed as of gcc 3.3.  */
#ifndef ATTRIBUTE_NULL_PRINTF
# if (GCC_VERSION >= 3003)
#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
# else
#  define ATTRIBUTE_NULL_PRINTF(m, n)
# endif /* GNUC >= 3.3 */
# define ATTRIBUTE_NULL_PRINTF_1 ATTRIBUTE_NULL_PRINTF(1, 2)
# define ATTRIBUTE_NULL_PRINTF_2 ATTRIBUTE_NULL_PRINTF(2, 3)
# define ATTRIBUTE_NULL_PRINTF_3 ATTRIBUTE_NULL_PRINTF(3, 4)
# define ATTRIBUTE_NULL_PRINTF_4 ATTRIBUTE_NULL_PRINTF(4, 5)
# define ATTRIBUTE_NULL_PRINTF_5 ATTRIBUTE_NULL_PRINTF(5, 6)
#endif /* ATTRIBUTE_NULL_PRINTF */
@


1.10.22.3
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d315 11
@


1.9
log
@merge from gcc
@
text
@d96 7
a102 5
   VA_FIXEDARG sequence.  You can _not_ put statements before VA_OPEN.
   Also, VA_OPEN and VA_CLOSE are the beginning and end of a block.
   They must appear at the same nesting level, and any variables
   declared after VA_OPEN go out of scope at VA_CLOSE.  Unfortunately,
   with a K+R compiler, that includes the argument list.
@


1.8
log
@merge from gcc
@
text
@d155 2
a156 2
#define VA_OPEN(AP, VAR)	va_list AP; va_start(AP, VAR); { struct Qdmy
#define VA_CLOSE(AP)		} va_end(AP)
d202 2
a203 2
#define VA_OPEN(AP, VAR)		va_list AP; va_start(AP); { struct Qdmy
#define VA_CLOSE(AP)			} va_end(AP)
@


1.7
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000
d24 87
a110 8
   Macro	ANSI C definition	Traditional C definition
   -----	---- - ----------	----------- - ----------
   PTR		`void *'		`char *'
   LONG_DOUBLE	`long double'		`double'
   VOLATILE	`volatile'		`'
   SIGNED	`signed'		`'
   PTRCONST	`void *const'		`char *'
   ANSI_PROTOTYPES  1			not defined
d112 2
a113 1
   CONST is also defined, but is obsolete.  Just use const.
d115 3
a117 1
   obsolete --     DEFUN (name, arglist, args)
d119 2
a120 1
	Defines function NAME.
d122 2
a123 2
	ARGLIST lists the arguments, separated by commas and enclosed in
	parentheses.  ARGLIST becomes the argument list in traditional C.
d125 1
a125 4
	ARGS list the arguments with their types.  It becomes a prototype in
	ANSI C, and the type declarations in traditional C.  Arguments should
	be separated with `AND'.  For functions with a variable number of
	arguments, the last thing listed should be `DOTS'.
d127 1
a127 49
   obsolete --     DEFUN_VOID (name)

	Defines a function NAME, which takes no arguments.

   obsolete --     EXFUN (name, (prototype))	-- obsolete.

	Replaced by PARAMS.  Do not use; will disappear someday soon.
	Was used in external function declarations.
	In ANSI C it is `NAME PROTOTYPE' (so PROTOTYPE should be enclosed in
	parentheses).  In traditional C it is `NAME()'.
	For a function that takes no arguments, PROTOTYPE should be `(void)'.

   obsolete --     PROTO (type, name, (prototype)    -- obsolete.

	This one has also been replaced by PARAMS.  Do not use.

   PARAMS ((args))

	We could use the EXFUN macro to handle prototype declarations, but
	the name is misleading and the result is ugly.  So we just define a
	simple macro to handle the parameter lists, as in:

	      static int foo PARAMS ((int, char));

	This produces:  `static int foo();' or `static int foo (int, char);'

	EXFUN would have done it like this:

	      static int EXFUN (foo, (int, char));

	but the function is not external...and it's hard to visually parse
	the function name out of the mess.   EXFUN should be considered
	obsolete; new code should be written to use PARAMS.

   DOTS is also obsolete.

   Examples:

	extern int printf PARAMS ((const char *format, ...));
*/

#ifndef	_ANSIDECL_H

#define	_ANSIDECL_H	1


/* Every source file includes this file,
   so they will all get the switch for lint.  */
/* LINTLIBRARY */
d129 7
d142 33
a174 3
#define	PTR		void *
#define	PTRCONST	void *CONST
#define	LONG_DOUBLE	long double
d176 1
d178 3
a180 5
#define	AND		,
#define	NOARGS		void
#define	VOLATILE	volatile
#define	SIGNED		signed
#endif /* ! IN_GCC */
a181 10
#define PARAMS(paramlist)		paramlist
#define ANSI_PROTOTYPES			1

#define VPARAMS(ARGS)			ARGS
#define VA_START(va_list,var)		va_start(va_list,var)

/* These are obsolete.  Do not use.  */
#ifndef IN_GCC
#define CONST				const
#define DOTS				, ...
d186 3
d193 22
a214 3
#define	PTR		char *
#define	PTRCONST	PTR
#define	LONG_DOUBLE	double
d217 3
a219 5
#define	AND		;
#define	NOARGS
#define	VOLATILE
#define	SIGNED
#endif /* !IN_GCC */
a220 13
#ifndef const /* some systems define it in header files for non-ansi mode */
#define	const
#endif

#define PARAMS(paramlist)		()

#define VPARAMS(ARGS)			(va_alist) va_dcl
#define VA_START(va_list,var)		va_start(va_list)

/* These are obsolete.  Do not use.  */
#ifndef IN_GCC
#define CONST
#define DOTS
d225 3
a231 18
/* Using MACRO(x,y) in cpp #if conditionals does not work with some
   older preprocessors.  Thus we can't define something like this:

#define HAVE_GCC_VERSION(MAJOR, MINOR) \
  (__GNUC__ > (MAJOR) || (__GNUC__ == (MAJOR) && __GNUC_MINOR__ >= (MINOR)))

and then test "#if HAVE_GCC_VERSION(2,7)".

So instead we use the macro below and test it against specific values.  */

/* This macro simplifies testing whether we are using gcc, and if it
   is of a particular minimum version. (Both major & minor numbers are
   significant.)  This macro will evaluate to 0 if we are not using
   gcc at all.  */
#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)
#endif /* GCC_VERSION */

d282 5
a286 8
/* Bootstrap support: Autoconf will possibly define the `inline' or
   `const' keywords as macros, however this is only valid for the
   stage1 compiler.  If we detect a modern version of gcc,
   unconditionally reset the values.  This makes sure the right thing
   happens in stage2 and later.  We need to do this very early;
   i.e. before any header files that might use these keywords.
   Otherwise conflicts might occur.  */

a287 5
# ifdef __STDC__
#  undef const
# endif
# undef inline
# define inline __inline__  /* __inline__ prevents -pedantic warnings */
@


1.6
log
@merge from gcc
@
text
@a163 10
/* This is for GCC, which has historically used typed null pointer
   constants.  It needs to be here so it is seen by headers included
   by gcc's config.h.

   FIXME: GCC probably doesn't need to use typed nulls anymore.
   Clean it up, then remove this.  Ware variable-argument functions.  */
#ifdef IN_GCC
# define NULL_PTR ((PTR) 0)
#endif

@


1.5
log
@Fix typos in ChangeLogs; add coff/external.h; fix copyright dates
@
text
@d164 9
d241 19
@


1.4
log
@2000-05-06  Zack Weinberg  <zack@@wolery.cumb.org>

 	* ansidecl.h: #define __extension__ to nothing if
 	GCC_VERSION < 2008.
@
text
@d2 2
a3 1
   Copyright 1991, 1992, 1996, 1999 Free Software Foundation, Inc.
@


1.4.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000
   Free Software Foundation, Inc.
@


1.3
log
@merge with include from egcs 2000-02-22
@
text
@d163 1
d224 7
@


1.2
log
@	* ansidecl.h: Copy attribute support macros from egcs.
@
text
@d163 18
d185 1
a185 1
#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)
d189 10
d200 3
a202 1
# if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 93)
d204 1
a204 3
# else
#  define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED
# endif /* GNUC < 2.93 */
d216 1
a216 1
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((format (__printf__, m, n)))
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1996 Free Software Foundation, Inc.
d162 33
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.2
log
@import libiberty from egcs
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1996, 1999 Free Software Foundation, Inc.
a161 62


/* Using MACRO(x,y) in cpp #if conditionals does not work with some
   older preprocessors.  Thus we can't define something like this:

#define HAVE_GCC_VERSION(MAJOR, MINOR) \
  (__GNUC__ > (MAJOR) || (__GNUC__ == (MAJOR) && __GNUC_MINOR__ >= (MINOR)))

and then test "#if HAVE_GCC_VERSION(2,7)".

So instead we use the macro below and test it against specific values.  */

/* This macro simplifies testing whether we are using gcc, and if it
   is of a particular minimum version. (Both major & minor numbers are
   significant.)  This macro will evaluate to 0 if we are not using
   gcc at all.  */
#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)
#endif /* GCC_VERSION */

/* Define macros for some gcc attributes.  This permits us to use the
   macros freely, and know that they will come into play for the
   version of gcc in which they are supported.  */

#if (GCC_VERSION < 2007)
# define __attribute__(x)
#endif

/* Attribute __malloc__ on functions was valid as of gcc 2.96. */
#ifndef ATTRIBUTE_MALLOC
# if (GCC_VERSION >= 2096)
#  define ATTRIBUTE_MALLOC __attribute__ ((__malloc__))
# else
#  define ATTRIBUTE_MALLOC
# endif /* GNUC >= 2.96 */
#endif /* ATTRIBUTE_MALLOC */

/* Attributes on labels were valid as of gcc 2.93. */
#ifndef ATTRIBUTE_UNUSED_LABEL
# if (GCC_VERSION >= 2093)
#  define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED
# else
#  define ATTRIBUTE_UNUSED_LABEL
# endif /* GNUC >= 2.93 */
#endif /* ATTRIBUTE_UNUSED_LABEL */

#ifndef ATTRIBUTE_UNUSED
#define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
#endif /* ATTRIBUTE_UNUSED */

#ifndef ATTRIBUTE_NORETURN
#define ATTRIBUTE_NORETURN __attribute__ ((__noreturn__))
#endif /* ATTRIBUTE_NORETURN */

#ifndef ATTRIBUTE_PRINTF
#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
#define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
#define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
#define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
#define ATTRIBUTE_PRINTF_4 ATTRIBUTE_PRINTF(4, 5)
#define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)
#endif /* ATTRIBUTE_PRINTF */
@


