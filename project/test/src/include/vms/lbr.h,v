head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	cygwin-1_7_35-release:1.5
	sid-snapshot-20150301:1.5
	cygwin-1_7_34-release:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	cygwin-1_7_33-release:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	cygwin-1_7_32-release:1.5
	sid-snapshot-20140801:1.5
	cygwin-1_7_31-release:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	cygwin-1_7_30-release:1.5
	sid-snapshot-20140501:1.5
	cygwin-1_7_29-release:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	cygwin-1_7_28-release:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	binutils-2_24-branch:1.5.0.12
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.4
	sid-snapshot-20130901:1.5
	cygwin-1_7_25-release:1.5
	gdb_7_6_1-2013-08-30-release:1.5
	cygwin-1_7_24-release:1.5
	cygwin-1_7_23-release:1.5
	sid-snapshot-20130801:1.5
	cygwin-1_7_22-release:1.5
	cygwin-1_7_21-release:1.5
	sid-snapshot-20130701:1.5
	cygwin-1_7_20-release:1.5
	cygwin-1_7_19-release:1.5
	sid-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	gdb_7_6-2013-04-26-release:1.5
	cygwin-64bit-postmerge:1.5
	cygwin-64bit-premerge-branch:1.5.0.10
	cygwin-64bit-premerge:1.5
	sid-snapshot-20130401:1.5
	binutils-2_23_2:1.5
	gdb_7_6-branch:1.5.0.8
	gdb_7_6-2013-03-12-branchpoint:1.5
	cygwin-1_7_18-release:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	gdb_7_5_1-2012-11-29-release:1.5
	binutils-2_23_1:1.5
	sid-snapshot-20121101:1.5
	binutils-2_23:1.5
	cygwin-1_7_17-release:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-2012-08-17-release:1.5
	cygwin-64bit-branch:1.5.0.6
	sid-snapshot-20120801:1.5
	binutils-2_23-branch:1.5.0.4
	binutils-2_23-branchpoint:1.5
	cygwin-1_7_16-release:1.5
	gdb_7_5-branch:1.5.0.2
	gdb_7_5-2012-07-18-branchpoint:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	cygwin-1_7_15-release:1.5
	sid-snapshot-20120501:1.5
	binutils-2_22_branch:1.4.0.12
	gdb_7_4_1-2012-04-26-release:1.4
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	sid-snapshot-20120401:1.5
	sid-snapshot-20120301:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	sid-snapshot-20120201:1.4
	gdb_7_4-2012-01-24-release:1.4
	sid-snapshot-20120101:1.4
	gdb_7_4-branch:1.4.0.10
	gdb_7_4-2011-12-13-branchpoint:1.4
	sid-snapshot-20111201:1.4
	binutils-2_22:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	binutils-2_22-branch:1.4.0.8
	binutils-2_22-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	gdb_7_3-2011-07-26-release:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	gdb_7_3-branch:1.4.0.6
	gdb_7_3-2011-04-01-branchpoint:1.4
	sid-snapshot-20110401:1.4
	cygwin-1_7_9-release:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	binutils-2_21:1.4
	sid-snapshot-20101201:1.4
	binutils-2_21-branch:1.4.0.4
	binutils-2_21-branchpoint:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	gdb_7_2-2010-09-02-release:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	gdb_7_2-branch:1.4.0.2
	gdb_7_2-2010-07-07-branchpoint:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.3
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	sid-snapshot-20100401:1.1
	binutils_latest_snapshot:1.5;
locks; strict;
comment	@ * @;


1.5
date	2012.03.08.14.14.52;	author gingold;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.27.10.37.23;	author gingold;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.30.12.44.51;	author gingold;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.30.09.40.42;	author gingold;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.31.07.35.54;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.5
log
@2012-03-08  Tristan Gingold  <gingold@@adacore.com>

	* lbr.h (struct vms_lhd): Add comments.
@
text
@/* Alpha VMS external format of Libraries.

   Copyright 2010 Free Software Foundation, Inc.
   Written by Tristan Gingold <gingold@@adacore.com>, AdaCore.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef _VMS_LBR_H
#define _VMS_LBR_H

/* Libray HeaDer.  */

/* Magic numbers.  Should match the major version.  */

#define LHD_SANEID_DCX 319232342
#define LHD_SANEID3 233579905
#define LHD_SANEID6 233579911

/* Library type.  */
#define LBR__C_TYP_UNK    0	/* Unknown / unspecified.  */
#define LBR__C_TYP_OBJ    1	/* Vax object.  */
#define LBR__C_TYP_MLB    2	/* Macro.  */
#define LBR__C_TYP_HLP    3	/* Help.  */
#define LBR__C_TYP_TXT    4	/* Text.  */
#define LBR__C_TYP_SHSTB  5	/* Vax shareable image.  */
#define LBR__C_TYP_NCS    6	/* NCS.  */
#define LBR__C_TYP_EOBJ   7	/* Alpha object.  */
#define LBR__C_TYP_ESHSTB 8	/* Alpha shareable image.  */
#define LBR__C_TYP_IOBJ   9	/* IA-64 object.  */
#define LBR__C_TYP_ISHSTB 10	/* IA-64 shareable image.  */

struct vms_lhd
{
  /* Type of the library.  See above.  */
  unsigned char type;

  /* Number of indexes.  Generally 1, 2 for object libraries.  */
  unsigned char nindex;

  unsigned char fill_1[2];

  /* Sanity Id.  */
  unsigned char sanity[4];

  /* Version.  */
  unsigned char majorid[2];
  unsigned char minorid[2];

  /* Tool name.  */
  unsigned char lbrver[32];

  /* Create time.  */
  unsigned char credat[8];

  /* Update time.  */
  unsigned char updtim[8];

  /* Size of the MHD.  */
  unsigned char mhdusz;

  unsigned char idxblkf[2];	/* Unused.  */
  unsigned char fill_2;
  unsigned char closerror[2];

  unsigned char spareword[2];

  /* First free block, and number of free blocks.  */
  unsigned char freevbn[4];
  unsigned char freeblk[4];

  unsigned char nextrfa[6];
  unsigned char nextvbn[4];

  /* Free pre-allocated index block.  */
  /* Number of free blocks.  */
  unsigned char freidxblk[4];
  /* VBN of a simply linked list of free blocks.  The list is terminated by a
     nul VBN.  */
  unsigned char freeidx[4];

  /* Highest pre-allocated index block and in use.  */
  unsigned char hipreal[4];
  unsigned char hiprusd[4];

  /* Number of index blocks in use.  */
  unsigned char idxblks[4];

  /* Number of index entries.  */
  unsigned char idxcnt[4];

  /* Number of modules entries.  */
  unsigned char modcnt[4];

  unsigned char fill_3[2];

  /* Number of module headers.  */
  unsigned char modhdrs[4];

  /* Overhead index pointers.  */
  unsigned char idxovh[4];

  /* Update history records.  */
  unsigned char maxluhrec[2];
  unsigned char numluhrec[2];
  unsigned char begluhrfa[6];
  unsigned char endluhrfa[6];

  /* DCX map.  */
  unsigned char dcxmapvbn[4];

  unsigned char fill_4[4 * 13];
};

/* Known major ids.  */
#define LBR_MAJORID 3		/* Alpha libraries.  */
#define LBR_ELFMAJORID 6	/* Elf libraries (new index, new data).  */

/* Offset of the first IDD.  */
#define LHD_IDXDESC 196

/* InDex Description.  */
struct vms_idd
{
  unsigned char flags[2];

  /* Max length of the key.  */
  unsigned char keylen[2];

  /* First index block.  */
  unsigned char vbn[4];
};

/* IDD flags.  */
#define IDD__FLAGS_ASCII 1
#define IDD__FLAGS_LOCKED 2
#define IDD__FLAGS_VARLENIDX 4
#define IDD__FLAGS_NOCASECMP 8
#define IDD__FLAGS_NOCASENTR 16
#define IDD__FLAGS_UPCASNTRY 32

#define IDD_LENGTH 8

/* Index block.  */
#define INDEXDEF__LENGTH 512
#define INDEXDEF__BLKSIZ 500

struct vms_indexdef
{
  /* Number of bytes used.  */
  unsigned char used[2];

  /* VBN of the parent.  */
  unsigned char parent[4];

  unsigned char fill_1[6];

  /* The key field contains vms_idx/vms_elfidx structures, which are
     simply a key (= a string) and a rfa.  */
  unsigned char keys[INDEXDEF__BLKSIZ];
};

/* An offset in a file.  */

struct vms_rfa
{
  /* Logical block number, 1 based.
     0 means that the field is absent.  Block size is 512.  */
  unsigned char vbn[4];

  /* Offset within the block.  */
  unsigned char offset[2];
};

/* Index keys.  For version 3.  */

struct vms_idx
{
  /* Offset from the start of the vbn, so minimum should be
     DATA__DATA (ie 6).  */
  struct vms_rfa rfa;

  unsigned char keylen;
  /* The length of this field is in fact keylen.  */
  unsigned char keyname[256];
};

/* Index keys, for version 4 and later.  */

struct vms_elfidx
{
  struct vms_rfa rfa;

  unsigned char keylen[2];
  unsigned char flags;
  unsigned char keyname[256];
};

/* Flags of elfidx.  */

#define ELFIDX__WEAK 0x01	/* Weak symbol.  */
#define ELFIDX__GROUP 0x02	/* Group symbol.  */
#define ELFIDX__LISTRFA 0x04	/* RFA field points to an LHS.  */
#define ELFIDX__SYMESC 0x08	/* Long symbol.  */

#define RFADEF__C_INDEX 0xffff

/* List head structure.  That's what is pointed by rfa when LISTRFA flag
   is set in elfidx.  */

struct vms_lhs
{
  struct vms_rfa ng_g_rfa;	/* Non-group global.  */
  struct vms_rfa ng_wk_rfa;	/* Non-group weak.  */
  struct vms_rfa g_g_rfa;	/* Group global.  */
  struct vms_rfa g_wk_rfa;	/* Group weak.  */
  unsigned char flags;
};

/* List node structure.  Fields of LHS point to this structure.  */

struct vms_lns
{
  /* Next node in the list.  */
  struct vms_rfa nxtrfa;

  /* Module associated with the key.  */
  struct vms_rfa modrfa;
};

struct vms_datadef
{
  /* Number of records in this block.  */
  unsigned char recs;
  unsigned char fill_1;

  /* Next vbn.  */
  unsigned char link[4];

  /* Data.  The first word is the record length, followed by record
     data and a possible pad byte so that record length is always aligned.  */
  unsigned char data[506];
};
#define DATA__LENGTH 512
#define DATA__DATA 6

/* Key name block.  This is used for keys longer than 128 bytes.  */

struct vms_kbn
{
  /* Length of the key chunk.  */
  unsigned char keylen[2];

  /* RFA of the next chunk.  */
  struct vms_rfa rfa;

  /* Followed by the key chunk.  */
};

/* Module header.  */
struct vms_mhd
{
  /* Fixed part.  */
  unsigned char lbrflag;
  unsigned char id;
  unsigned char fill_1[2];
  unsigned char refcnt[4];
  unsigned char datim[8];

  unsigned char objstat;
  /* Ident or GSMATCH.  */
  unsigned char objidlng;
  unsigned char objid[31];

  unsigned char pad1[3];
  unsigned char otherefcnt[4];
  unsigned char modsize[4];
  unsigned char pad2[4];
};

#define MHD__C_MHDID 0xad	/* Value for id.  */
#define MHD__C_MHDLEN 16	/* Fixed part length.  */
#define MHD__C_USRDAT 16

/* Flags for objstat.  */
#define MHD__M_SELSRC 0x1	/* Selective search.  */
#define MHD__M_OBJTIR 0x2
#define MHD__M_WKSYM  0x4

struct vms_luh
{
  unsigned char nxtluhblk[4];
  unsigned char spare[2];
  unsigned char data[506];
};

struct vms_luhdef
{
  unsigned char rechdr[2];
  unsigned char reclen[2];
};
#define LUH__RECHDRLEN 4
#define LUH__RECHDRMRK 0xabba
#define LUH__DATAFLDLEN 506

/* Entry in the history.  */

struct vms_leh
{
  unsigned char date[8];
  unsigned char nbr_units[2];
  unsigned char action[2]; /* 1: delete, 2: insert, 3: replaced.  */
  unsigned char idlen;
  /* username
     modules... */
};

#endif /* _VMS_LBR_H */
@


1.4
log
@2010-05-27  Tristan Gingold  <gingold@@adacore.com>

	* lbr.h: Improve comments.
@
text
@d90 1
d92 2
@


1.3
log
@bfd/
2010-04-30  Tristan Gingold  <gingold@@adacore.com>

	* vms-lib.c (vms_read_block): New function.
	(vms_traverse_index): Use vms_read_block.  Handle long key names.

include/vms/
2010-04-30  Tristan Gingold  <gingold@@adacore.com>

	* lbr.h (struct vms_kbn): New structure.
@
text
@d169 1
a169 1
  /* The key field contains vms_idxdef/vms_idxdef2 structures, which are
d295 3
a297 1
#define MHD__M_SELSRC 0x1
@


1.2
log
@bfd/
2010-04-30  Tristan Gingold  <gingold@@adacore.com>

	* vms-lib.c (struct lib_tdata): Field artdata added, fields nbr_syms
	and syms removed.
	(struct carsym_mem): New structure.
	(vms_add_index): New function.
	(vms_add_indexes_from_list): New function.
	(vms_traverse_index): Parameter carsym changed to carsym_mem.
	Code adjusted to handle elfidx.
	(vms_lib_read_index): Adjusted for vms_traverse_index changes.
	Parameter NBREL is now a pointer.
	(_bfd_vms_lib_archive_p): Adjust for above change.  Handle ia64
	archives.
	(_bfd_vms_lib_mkarchive): Adjusted for changes in struct lib_tdata.
	(_bfd_vms_lib_find_symbol): Ditto.
	(vms_lib_bopen): Fix two typos: return FALSE in case of error,
	check MHD id.
	* vms-alpha.c (alpha_vms_link_add_archive_symbols): Adjust for
	changes of _bfd_vms_lib_find_symbol.

include/vms
2010-04-30  Tristan Gingold  <gingold@@adacore.com>

	* lbr.h (LBR__C_TYP_ISHSTB): Added.
	(LHD_SANEID4): Renamed to ...
	(LHD_SANEID6): ...  this.
	(LBR_MAJORID, LBR_ELFMAJORID): New macros.
	(struct vms_rfa): New structure.
	(struct vms_idxdef): Renamed to ...
	(struct vms_idx): ... this.
	(struct vms_idxdef2): Renamed to ...
	(struct vms_elfidx): ... this.
	(ELFIDX__WEAK, ELFIDX__GROUP, ELFIDX__LISTRFA, ELFIDX__SYMESC): New
	macros.
	(struct vms_lhs, struct vms_lns): New structures.
	(struct vms_mhd): Add missing fields.
	(MHD__C_MHDLEN): New macro.
@
text
@d258 13
@


1.1
log
@2010-03-31  Tristan Gingold  <gingold@@adacore.com>

	* dcx.h: New file.
	* dsc.h: New file.
	* esdfm.h: New file.
	* esdfv.h: New file.
	* internal.h: New file.
	* lbr.h: New file.
	* prt.h: New file.
	* shl.h (struct vms_shl): Add comments.
	* esrf.h (ESRF__B_NAMLNG): New macro.
	* esdf.h (ESDF__B_NAMLNG): New macro.
	* emh.h: Add macros for fields maximum value.
	* eisd.h (EISD__M_PROTECT): Fix typo in comment.
	Add macros for offsets, version, section type and match control.
	Merge vms_eisd_ext into vms_eisd.
	* eihvn.h (EIHVN__MULTI_PROCESSING_BIT, EIHVN__GALAXY_BIT): Added.
	* eihs.h: Remove blank line.
	* eihd.h (struct vms_eihd): Add comments, add image subtype names.
	* eiha.h (struct vms_eiha): Add inishr and inishr_h fields.
	* eiaf.h (struct vms_eiaf): Fix base_va size.
	* egsy.h: Add comments.
	* egsd.h: Remove blank line.
	* egps.h: Add flag names.
	* eeom.h (EEOM__M_WKTFR): Added.
	* dst.h (DST__K_CXX): Added, and reident languages.
	(DST__K_SRC_INCRLNUM_B): Added.
	Indent and order pcline commands.
	Add record begin/end, enumerations, type specification, value
	specification, label, discontinue range definitions.
@
text
@d28 2
d32 1
a32 1
#define LHD_SANEID4 233579911
d45 1
d126 4
d168 3
d174 3
a176 2
/* Index keys.  */
struct vms_idxdef
d178 2
d181 2
d184 9
d195 1
d199 3
a201 1
struct vms_idxdef2
d203 1
a203 5
  unsigned char vbn[4];

  /* Offset from the start of the vbn, so minimum should be
     DATA__DATA (ie 6).  */
  unsigned char offset[2];
d206 1
a206 1
  unsigned char fill_1;
d210 7
d219 23
d272 5
d280 1
@

