head	1.1;
access;
symbols
	gdb-csl-symbian-6_4_50_20060226-12:1.1.4.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1.4.1
	gdb-csl-sourcerygxx-4_1-17:1.1.4.1
	gdb-csl-20060226-branch-local-2:1.1.4.1
	gdb-csl-sourcerygxx-4_1-14:1.1.4.1
	gdb-csl-sourcerygxx-4_1-13:1.1.4.1
	gdb-csl-sourcerygxx-4_1-12:1.1.4.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1.4.1
	gdb-csl-sourcerygxx-4_1-9:1.1.4.1
	gdb-csl-sourcerygxx-4_1-8:1.1.4.1
	gdb-csl-sourcerygxx-4_1-7:1.1.4.1
	gdb-csl-arm-2006q1-6:1.1.4.1
	gdb-csl-sourcerygxx-4_1-6:1.1.4.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1.4.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1.4.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1.4.1
	gdb-csl-coldfire-4_1-11:1.1.4.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1.4.1
	gdb-csl-coldfire-4_1-10:1.1.4.1
	gdb-csl-sourcerygxx-4_1-5:1.1.4.1
	gdb-csl-sourcerygxx-4_1-4:1.1.4.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1.4.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1.4.1
	gdb-csl-symbian-20060226-branch:1.1.4.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.1.4.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1.4.1
	gdb-csl-20060226-branch:1.1.0.4
	gdb-csl-available-20060303-branch:1.1.0.2;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2006.03.03.20.17.12;	author drow;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2006.03.03.20.17.12;	author drow;	state Exp;
branches;
next	;

1.1.4.1
date	2006.04.03.00.47.36;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file unixfilemap.c was initially added on branch gdb-csl-available-20060303-branch.
@
text
@@


1.1.4.1
log
@Merge XML and VFP support to this branch.
@
text
@a0 58
/* Copyright (c) 1998, 1999 Thai Open Source Software Center Ltd
   See the file COPYING for copying permission.
*/

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>

#ifndef MAP_FILE
#define MAP_FILE 0
#endif

#include "filemap.h"

int
filemap(const char *name,
        void (*processor)(const void *, size_t, const char *, void *arg),
        void *arg)
{
  int fd;
  size_t nbytes;
  struct stat sb;
  void *p;

  fd = open(name, O_RDONLY);
  if (fd < 0) {
    perror(name);
    return 0;
  }
  if (fstat(fd, &sb) < 0) {
    perror(name);
    close(fd);
    return 0;
  }
  if (!S_ISREG(sb.st_mode)) {
    close(fd);
    fprintf(stderr, "%s: not a regular file\n", name);
    return 0;
  }

  nbytes = sb.st_size;
  p = (void *)mmap((caddr_t)0, (size_t)nbytes, PROT_READ,
                   MAP_FILE|MAP_PRIVATE, fd, (off_t)0);
  if (p == (void *)-1) {
    perror(name);
    close(fd);
    return 0;
  }
  processor(p, nbytes, name, arg);
  munmap((caddr_t)p, nbytes);
  close(fd);
  return 1;
}
@


1.1.2.1
log
@Import unmodified expat 2.0.0.
@
text
@a0 58
/* Copyright (c) 1998, 1999 Thai Open Source Software Center Ltd
   See the file COPYING for copying permission.
*/

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>

#ifndef MAP_FILE
#define MAP_FILE 0
#endif

#include "filemap.h"

int
filemap(const char *name,
        void (*processor)(const void *, size_t, const char *, void *arg),
        void *arg)
{
  int fd;
  size_t nbytes;
  struct stat sb;
  void *p;

  fd = open(name, O_RDONLY);
  if (fd < 0) {
    perror(name);
    return 0;
  }
  if (fstat(fd, &sb) < 0) {
    perror(name);
    close(fd);
    return 0;
  }
  if (!S_ISREG(sb.st_mode)) {
    close(fd);
    fprintf(stderr, "%s: not a regular file\n", name);
    return 0;
  }

  nbytes = sb.st_size;
  p = (void *)mmap((caddr_t)0, (size_t)nbytes, PROT_READ,
                   MAP_FILE|MAP_PRIVATE, fd, (off_t)0);
  if (p == (void *)-1) {
    perror(name);
    close(fd);
    return 0;
  }
  processor(p, nbytes, name, arg);
  munmap((caddr_t)p, nbytes);
  close(fd);
  return 1;
}
@

