head	1.8;
access;
symbols
	cygwin-1_7_35-release:1.8
	cygwin-1_7_34-release:1.8
	newlib-2_2_0:1.8.0.6
	cygwin-1_7_33-release:1.8
	cygwin-1_7_32-release:1.8
	cygwin-1_7_31-release:1.8
	cygwin-1_7_30-release:1.8
	cygwin-1_7_29-release:1.8
	cygwin-1_7_28-release:1.8
	newlib-2_1_0:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.4
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	newlib-1_20_0:1.8
	cygwin-1_7_9-release:1.8
	cygwin-1_7_8-release:1.8
	newlib-1_19_0:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.7
	cygwin-1_7_1-release:1.7
	newlib-1_17_0-arc:1.4.0.10
	binutils-arc-20080908-branch:1.4.0.8
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4
	newlib-csl-sourcerygxx-4_1-32:1.4
	newlib-csl-innovasic-fido-3_4_4-33:1.4
	newlib-csl-coldfire-4_1-30:1.4
	newlib-csl-sourcerygxx-4_1-30:1.4
	newlib-csl-coldfire-4_1-28:1.4
	newlib-csl-sourcerygxx-4_1-28:1.4
	newlib-csl-arm-2006q3-27:1.4
	newlib-csl-sourcerygxx-4_1-27:1.4
	newlib-csl-arm-2006q3-26:1.4
	newlib-csl-sourcerygxx-4_1-26:1.4
	newlib-csl-sourcerygxx-4_1-24:1.4
	newlib-csl-sourcerygxx-4_1-23:1.4
	newlib-csl-sourcerygxx-4_1-21:1.4
	newlib-csl-arm-2006q3-21:1.4
	newlib-csl-arm-2006q3-19:1.4
	newlib-csl-sourcerygxx-4_1-19:1.4
	newlib-csl-sourcerygxx-4_1-18:1.4
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.8
date	2010.02.18.20.37.19;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.14.20.16.21;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.24.10.13.27;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.03.09.28.45;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.28.21.33.22;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.23.21.44.21;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.22.24.20;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.20.20.13.10;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* libc/ctype/iswalpha.c (iswalpha): Update to Unicode 5.2.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunct): Drop standalone implementation.
	Define in terms of other wctype functions instead.
	* libc/ctype/towlower.c (towlower): Update to Unicode 5.2.  Add comment
	to explain how to fetch the data from the Unicode database.
	* libc/ctype/towupper.c (towupper): Ditto.
	* libc/ctype/utf8alpha.h: Ditto.
	* libc/ctype/utf8print.h: Ditto.
	* libc/ctype/utf8punct.h: Remove.
	* libc/ctype/iswcntrl.c (iswcntrl): Add comment to explain how to
	fetch the data from the Unicode database.
@
text
@/* Copyright (c) 2002 Red Hat Incorporated.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

     Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

     Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

     The name of Red Hat Incorporated may not be used to endorse
     or promote products derived from this software without specific
     prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED.  IN NO EVENT SHALL RED HAT INCORPORATED BE LIABLE FOR ANY
   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
FUNCTION
	<<iswcntrl>>---control wide character test

INDEX
	iswcntrl

ANSI_SYNOPSIS
	#include <wctype.h>
	int iswcntrl(wint_t <[c]>);

TRAD_SYNOPSIS
	#include <wctype.h>
	int iswcntrl(<[c]>)
	wint_t <[c]>;

DESCRIPTION
<<iswcntrl>> is a function which classifies wide-character values that
are categorized as control characters.

RETURNS
<<iswcntrl>> returns non-zero if <[c]> is a control wide character.

PORTABILITY
<<iswcntrl>> is C99.

No supporting OS subroutines are required.
*/
#include <_ansi.h>
#include <newlib.h>
#include <wctype.h>
#include <ctype.h>
#include <string.h>
#include "local.h"

int
_DEFUN(iswcntrl,(c), wint_t c)
{
#ifdef _MB_CAPABLE
  c = _jp2uc (c);

  /* Based on Unicode 5.2.  All characters from general category "Cc", "Zl",
     and "Zp".  */
  return ((c >= 0x0000 && c <= 0x001f) || 
	  (c >= 0x007f && c <= 0x009f) ||
	  c == 0x2028 || c == 0x2029);
#else
  return (c < 0x100 ? iscntrl (c) : 0);
#endif /* _MB_CAPABLE */
}

@


1.7
log
@	* libc/ctype/local.h (JP_JIS, JP_SJIS, JP_EUCJP): Move definition
	to jp2uc.c.
	(__jp2uc): Remove declaration.
	(_jp2uc): Declare.
	* libc/ctype/jp2uc.c (JP_JIS, JP_SJIS, JP_EUCJP): Define.
	(__jp2uc): Remove Cygwin special case.
	(_jp2uc): New function.  On Cygwin, just return c.
	* libc/ctype/iswalpha.c (iswalpha): Just call _jp2uc.
	* libc/ctype/iswblank.c (iswblank): Ditto.
	* libc/ctype/iswcntrl.c (iswcntrl): Ditto.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunt): Ditto.
	* libc/ctype/iswspace.c (iswspace): Ditto.
	* libc/ctype/towlower.c (towlower): Ditto.
	* libc/ctype/towupper.c (towupper): Ditto.
@
text
@d70 3
@


1.6
log
@	* libc/ctype/iswalpha.c: Handle all wchar_t as unicode on
	_MB_CAPABLE systems.
	* libc/ctype/iswblank.c: Ditto.
	* libc/ctype/iswcntrl.c: Ditto.
	* libc/ctype/iswprint.c: Ditto.
	* libc/ctype/iswpunct.c: Ditto.
	* libc/ctype/iswspace.c: Ditto.
	* libc/ctype/jp2uc.c (__jp2uc): On Cygwin, just return c.
	Explain why.
	* libc/ctype/towlower.c: Ditto.
	* libc/ctype/towupper.c: Ditto.
	* libc/include/sys/config.h: Define _MB_EXTENDED_CHARSETS_ISO
	and _MB_EXTENDED_CHARSETS_WINDOWS if _MB_EXTENDED_CHARSETS_ALL is
	defined.  Define _MB_EXTENDED_CHARSETS_ALL on Cygwin only for now.
	* libc/include/sys/reent.h (struct _reent): Mark _current_category
	and _current_locale as unused.
	* libc/locale/locale.c: Add new charset support to documentation.
	Include ../stdio/local.h from here.
	(lc_ctype_charset): Set to "ASCII" by default.
	(lc_message_charset): Ditto.
	(_setlocale_r): Don't set _current_category and _current_locale.
	(loadlocale): Add Cygwin codepage support.  On _MB_CAPABLE
	systems, set __mbtowc and __wctomb function pointers to function
	corresponding with current charset.  Don't allow non-existant
	ISO-8859-12 charset.  Add support for Windows singlebyte codepages.
	On Cygwin, add support for GBK, CP949, and BIG5.  On Cygwin,
	call __set_ctype() in case the catorgy is LC_CTYPE.  Don't set
	_current_category and _current_locale.
	* libc/stdlib/Makefile.am (GENERAL_SOURCES): Add sb_charsets.c.
	* libc/stdlib/Makefile.in: Regenerate.
	* libc/stdlib/local.h: Add prototype for __locale_charset.
	Add prototypes for __mbtowc and __wctomb pointers.
	Add prototypes for charset-specific _wctomb_r and _mbtowc_r
	functions.
	Declare tables and functions from sb_charsets.c.
	* libc/stdlib/mbtowc_r.c (__mbtowc): Define.  Set to __ascii_mbtowc
	by default.
	(_mbtowc_r): Just call __mbtowc from here.
	(__ascii_mbtowc): New function.
	(__iso_mbtowc): New function.
	(__cp_mbtowc): New function.
	(__utf8_mbtowc): New function.
	(__sjis_mbtowc): New function.  Disable on Cygwin.
	(__eucjp_mbtowc): New function.  Disable on Cygwin.
	(__jis_mbtowc): New function.  Disable on Cygwin.
	* libc/stdlib/sb_charsets.c: New file, adding singlebyte to UTF
	conversion tables for all ISO and CP charsets.
	(__iso_8859_index): New function.
	(__cp_index): New function.
	* libc/stdlib/wctomb_r.c (__wctomb): Define.  Set to __ascii_wctomb
	by default.
	(_wctomb_r): Just call __wctomb from here.
	(__ascii_wctomb): New function.
	(__utf8_wctomb): New function.
	(__sjis_wctomb): New function.  Disable on Cygwin.
	(__eucjp_wctomb): New function.  Disable on Cygwin.
	(__jis_wctomb): New function.  Disable on Cygwin.
	(__iso_wctomb): New function.
	(__cp_wctomb): New function.
@
text
@d69 1
a69 6
  if (!strcmp (__locale_charset (), "JIS"))
    c = __jp2uc (c, JP_JIS);
  else if (!strcmp (__locale_charset (), "SJIS"))
    c = __jp2uc (c, JP_SJIS);
  else if (!strcmp (__locale_charset (), "EUCJP"))
    c = __jp2uc (c, JP_EUCJP);
@


1.5
log
@	* libc/locale/locale.c (_setlocale_r): New implementation based on
	FreeBSD's setlocale.
	(currentlocale): New helper function.
	(loadlocale): Ditto.
	(__locale_charset): New function.
	(__locale_msgcharset): Rename from __locale_charset.
	* libc/ctype/local.h (__lc_ctype): Remove declaration.
	(__locale_charset): Declare.
	* libc/ctype/iswalpha.c (iswalpha): Call __locale_charset instead of
	using __lc_ctype directly.  Only compare against the charset alone.
	* libc/ctype/iswblank.c (iswblank): Ditto.
	* libc/ctype/iswcntrl.c (iswcntrl): Ditto.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunct): Ditto.
	* libc/ctype/iswspace.c (iswspace): Ditto.
	* libc/ctype/towlower.c (towlower): Ditto.
	* libc/ctype/towupper.c (towupper): Ditto.
	* libc/stdlib/mbtowc_r.c (_mbtowc_r): Ditto.
	* libc/stdlib/wctomb_r.c (_wctomb_r): Ditto.
	* libc/sys/linux/intl/loadmsgcat.c (_nl_init_domain_conv): Call
	__locale_msgcharset instead of __locale_charset.
@
text
@a68 2
  int unicode = 0;

d70 1
a70 4
    {
      c = __jp2uc (c, JP_JIS);
      unicode = 1;
    }
d72 1
a72 4
    {
      c = __jp2uc (c, JP_SJIS);
      unicode = 1;
    }
d74 6
a79 15
    {
      c = __jp2uc (c, JP_EUCJP);
      unicode = 1;
    }
  else if (!strcmp (__locale_charset (), "UTF-8"))
    {
      unicode = 1;
    }

  if (unicode)
    {
      return ((c >= 0x0000 && c <= 0x001f) || 
              (c >= 0x007f && c <= 0x009f) ||
              c == 0x2028 || c == 0x2029);
    }
a80 2

  return (c < 0x100 ? iscntrl (c) : 0);
@


1.4
log
@
2005-10-28  Bob Wilson  <bob.wilson@@acm.org>

        * libc/ctype/ctype.tex: Use hyphens as appropriate, but not  otherwise.
        * libc/ctype/islower.c: Likewise.
        * libc/ctype/isupper.c: Likewise.
        * libc/ctype/iswalnum.c: Likewise.
        * libc/ctype/iswalpha.c: Likewise.
        * libc/ctype/iswblank.c: Likewise.
        * libc/ctype/iswcntrl.c: Likewise.
        * libc/ctype/iswdigit.c: Likewise.
        * libc/ctype/iswgraph.c: Likewise.
        * libc/ctype/iswlower.c: Likewise.
        * libc/ctype/iswprint.c: Likewise.
        * libc/ctype/iswpunct.c: Likewise.
        * libc/ctype/iswspace.c: Likewise.
        * libc/ctype/iswupper.c: Likewise.
        * libc/ctype/iswxdigit.c: Likewise.
        * libc/ctype/tolower.c: Likewise.
        * libc/ctype/toupper.c: Likewise.
        * libc/ctype/towctrans.c: Likewise.
        * libc/ctype/towlower.c: Likewise.
        * libc/ctype/towupper.c: Likewise.
        * libc/string/strcasecmp.c: Likewise.
        * libc/string/strcoll.c: Likewise.
        * libc/string/strings.tex: Likewise.
        * libc/string/strlwr.c: Likewise.
        * libc/string/strncasecmp.c: Likewise.
        * libc/string/strupr.c: Likewise.
        * libc/string/wcscoll.c: Likewise.
        * libc/string/wcslcat.c: Likewise.
        * libc/string/wcslcpy.c: Likewise.
        * libc/string/wcsnlen.c: Likewise.
        * libc/string/wcsstr.c: Likewise.
        * libc/string/wcstrings.tex: Likewise.
        * libc/string/wmemchr.c: Likewise.
        * libc/string/wmemcmp.c: Likewise.
        * libc/string/wmemcpy.c: Likewise.
        * libc/string/wmemmove.c: Likewise.
        * libc/string/wmemset.c: Likewise.
@
text
@d68 1
d70 2
a71 7
  if (__lc_ctype[0] == 'C' && __lc_ctype[1] == '\0')
    {
      unicode = 0;
      /* fall-through */ 
    }
#ifdef _MB_CAPABLE
  else if (!strcmp (__lc_ctype, "C-JIS"))
d76 1
a76 1
  else if (!strcmp (__lc_ctype, "C-SJIS"))
d81 1
a81 1
  else if (!strcmp (__lc_ctype, "C-EUCJP"))
d86 1
a86 1
  else if (!strcmp (__lc_ctype, "C-UTF-8"))
@


1.3
log
@
2004-04-23  Artem B. Bityuckiy  <abitytsky@@softminecorp.com>

        * configure.in: Define _MB_CAPABLE if mb supported.
        * configure: Regenerated.
        * configure.host: Remove manual setting of MB_CAPABLE compiler
        flag.
        * newlib.hin: Add _MB_CAPABLE flag.
        * libc/ctype/iswalpha.c, libc/ctype/iswblank.c: Include <newlib.h>
        and check for _MB_CAPABLE flag instead of MB_CAPABLE.
        * libc/ctype/iswcntrl.c, libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c, libc/ctype/iswspace.c: Ditto.
        * libc/ctype/jp2uc.c: Ditto.
        * libc/ctype/towlower.c, libc/ctype/towupper.c: Ditto.
        * libc/locale/locale.c: Ditto
        * libc/machine/powerpc/vfscanf.c: Ditto
        * libc/stdio/vfprintf.c, libc/stdio/vfscanf.c: Ditto
        * libc/stdlib/mblen.c: Ditto
        * libc/stdlib/mblen_r.c, libc/stdlib/mbrlen.c: Ditto
        * libc/stdlib/mbrtowc.c, libc/stdlib/mbsrtowcs.c: Ditto
        * libc/stdlib/mbstowcs.c, libc/stdlib/mbtowc.c: Ditto
        * libc/stdlib/mbtowc_r.c, libc/stdlib/wcrtomb.c: Ditto
        * libc/stdlib/wcsrtombs.c, libc/stdlib/wcstombs.c: Ditto
        * libc/stdlib/wctomb.c, libc/sys/linux/intl/dcigettext.c: Ditto
        * libc/sys/linux/intl/explodename.c: Ditto
        * libc/sys/linux/intl/finddomain.c: Ditto
        * libc/sys/linux/intl/l10nflist.c: Ditto
        * libc/sys/linux/intl/loadmsgcat.c: Ditto
        * libc/sys/linux/intl/localealias.c: Ditto
@
text
@d32 1
a32 1
	<<iswcntrl>>---wide-character cntrl test
d48 1
a48 1
are categorized as a control character.
d51 1
a51 1
<<iswcntrl>> returns non-zero if <[c]> is a control wide-character.
@


1.2
log
@
2003-07-31  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/iswalpha.c: Fix calls to __jp2uc to pass the
        correct type of conversion when dealing with EUCJP or SJIS.
        * libc/ctype/iswblank.c: Ditto.
        * libc/ctype/iswcntrl.c: Ditto.
        * libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c: Ditto.
        * libc/ctype/iswspace.c: Ditto.
        * libc/ctype/towlower.c: Ditto.
        * libc/ctype/towupper.c: Ditto.
@
text
@d59 1
d74 1
a74 1
#ifdef MB_CAPABLE
d101 1
a101 1
#endif /* MB_CAPABLE */
@


1.1
log
@
2002-09-20  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/Makefile.am: Add new files.
        * libc/ctype/Makefile.in: Regenerated.
        * libc/ctype/ctype.tex: Add new iswxxxx, towxxxx, wctype,
        and wctrans functions to documentation index.
        * libc/ctype/iswalnum.c: New file.
        * libc/ctype/iswalpha.c: Ditto.
        * libc/ctype/iswblank.c: Ditto.
        * libc/ctype/iswcntrl.c: Ditto.
        * libc/ctype/iswctype.c: Ditto.
        * libc/ctype/iswdigit.c: Ditto.
        * libc/ctype/iswgraph.c: Ditto.
        * libc/ctype/iswlower.c: Ditto.
        * libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c: Ditto.
        * libc/ctype/iswspace.c: Ditto.
        * libc/ctype/iswupper.c: Ditto.
        * libc/ctype/iswxdigit.c: Ditto.
        * libc/ctype/jp2uc.c: Ditto.
        * libc/ctype/jp2uc.h: Ditto.
        * libc/ctype/local.h: Ditto.
        * libc/ctype/towctrans.c: Ditto.
        * libc/ctype/towlower.c: Ditto.
        * libc/ctype/towupper.c: Ditto.
        * libc/ctype/utf8alpha.h: Ditto.
        * libc/ctype/utf8print.h: Ditto.
        * libc/ctype/utf8punct.h: Ditto.
        * libc/ctype/wctrans.c: Ditto.
        * libc/ctype/wctype.c: Ditto.
        * libc/locale/locale.c (__lc_ctype): New external array to
        replace static lc_ctype array.
        * libc/stdlib/mbtowc_r.c: Use __lc_ctype to check current lc_ctype
        rather than reentrancy structure's _current_locale field.
        * libc/stdlib/wctomb_r.c: Ditto.
@
text
@d81 1
a81 1
      c = __jp2uc (c, JP_JIS);
d86 1
a86 1
      c = __jp2uc (c, JP_JIS);
@

