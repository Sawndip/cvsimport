head	1.13;
access;
symbols
	cygwin-1_7_35-release:1.13
	cygwin-1_7_34-release:1.13
	newlib-2_2_0:1.13.0.2
	cygwin-1_7_33-release:1.13
	cygwin-1_7_32-release:1.13
	cygwin-1_7_31-release:1.13
	cygwin-1_7_30-release:1.13
	cygwin-1_7_29-release:1.13
	cygwin-1_7_28-release:1.13
	newlib-2_1_0:1.13
	cygwin-1_7_27-release:1.13
	cygwin-1_7_26-release:1.13
	cygwin-1_7_25-release:1.13
	cygwin-1_7_24-release:1.13
	cygwin-1_7_23-release:1.13
	cygwin-1_7_22-release:1.13
	cygwin-1_7_21-release:1.13
	cygwin-1_7_20-release:1.13
	cygwin-1_7_19-release:1.13
	cygwin-64bit-postmerge:1.13
	cygwin-64bit-premerge-branch:1.12.0.4
	cygwin-64bit-premerge:1.12
	cygwin-1_7_18-release:1.12
	newlib-2_0_0:1.12
	cygwin-1_7_17-release:1.12
	cygwin-64bit-branch:1.12.0.2
	cygwin-1_7_16-release:1.12
	cygwin-1_7_15-release:1.12
	cygwin-1_7_14_2-release:1.12
	cygwin-1_7_14-release:1.12
	cygwin-1_7_12-release:1.12
	cygwin-1_7_11-release:1.12
	cygwin-1_7_10-release:1.12
	newlib-1_20_0:1.12
	cygwin-1_7_9-release:1.12
	cygwin-1_7_8-release:1.12
	newlib-1_19_0:1.12
	cygwin-1_7_7-release:1.12
	cygwin-1_7_5-release:1.11
	cygwin-1_7_4-release:1.11
	cygwin-1_7_3-release:1.11
	cygwin-1_7_2-release:1.11
	newlib-1_18_0:1.11
	cygwin-1_7_1-release:1.11
	newlib-1_17_0-arc:1.5.0.4
	binutils-arc-20080908-branch:1.5.0.2
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4
	newlib-csl-sourcerygxx-4_1-32:1.4
	newlib-csl-innovasic-fido-3_4_4-33:1.4
	newlib-csl-coldfire-4_1-30:1.4
	newlib-csl-sourcerygxx-4_1-30:1.4
	newlib-csl-coldfire-4_1-28:1.4
	newlib-csl-sourcerygxx-4_1-28:1.4
	newlib-csl-arm-2006q3-27:1.4
	newlib-csl-sourcerygxx-4_1-27:1.4
	newlib-csl-arm-2006q3-26:1.4
	newlib-csl-sourcerygxx-4_1-26:1.4
	newlib-csl-sourcerygxx-4_1-24:1.4
	newlib-csl-sourcerygxx-4_1-23:1.4
	newlib-csl-sourcerygxx-4_1-21:1.4
	newlib-csl-arm-2006q3-21:1.4
	newlib-csl-arm-2006q3-19:1.4
	newlib-csl-sourcerygxx-4_1-19:1.4
	newlib-csl-sourcerygxx-4_1-18:1.4
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2013.04.23.09.42.25;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.01.08.45.52;	author corinna;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2009.04.21.20.09.01;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.17.16.18.17;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.09.10.37.57;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.02.07.53.12;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.31.09.31.38;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.26.09.45.11;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.21.21.28.34;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.17.20.11.22;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.13.09.46.47;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.11.19.25.59;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.12.2.1
date	2013.01.29.14.16.29;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	Port newlib to x86_64-pc-cygwin.
	* libc/include/sys/features.h: Redefine compilation environment
	definitions for Cygwin to cover 64 bit Cygwin.
	* libc/ctype/ctype_.c (_ctype_): Fix definition for 64 bit Cygwin.
	* libc/include/machine/setjmp.h: Change definition of _JBLEN to allow
	different values for 32 bit and 64 bit Cygwin.
	* libc/include/reent.h (stat64): Define as stat under Cygwin, instead
	of as __stat64.  Undef stat64 if not building Newlib.
	* libc/include/sys/stat.h (stat64): Define as stat under Cygwin.
@
text
@/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)ctype_.c	5.6 (Berkeley) 6/1/90";
#endif /* LIBC_SCCS and not lint */

#include <ctype.h>

#define _CTYPE_DATA_0_127 \
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C, \
	_C,	_C|_S, _C|_S, _C|_S,	_C|_S,	_C|_S,	_C,	_C, \
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C, \
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C, \
	_S|_B,	_P,	_P,	_P,	_P,	_P,	_P,	_P, \
	_P,	_P,	_P,	_P,	_P,	_P,	_P,	_P, \
	_N,	_N,	_N,	_N,	_N,	_N,	_N,	_N, \
	_N,	_N,	_P,	_P,	_P,	_P,	_P,	_P, \
	_P,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U, \
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U, \
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U, \
	_U,	_U,	_U,	_P,	_P,	_P,	_P,	_P, \
	_P,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L, \
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L, \
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L, \
	_L,	_L,	_L,	_P,	_P,	_P,	_P,	_C

#define _CTYPE_DATA_128_255 \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0, \
	0,	0,	0,	0,	0,	0,	0,	0

#if (defined(__GNUC__) && !defined(__CHAR_UNSIGNED__) && !defined(COMPACT_CTYPE)) || defined (__CYGWIN__)
#define ALLOW_NEGATIVE_CTYPE_INDEX
#endif

#if defined(_MB_CAPABLE)
#if defined(_MB_EXTENDED_CHARSETS_ISO)
#include "ctype_iso.h"
#endif
#if defined(_MB_EXTENDED_CHARSETS_WINDOWS)
#include "ctype_cp.h"
#endif
#endif

#if defined(ALLOW_NEGATIVE_CTYPE_INDEX)
/* No static const on Cygwin since it's referenced and potentially overwritten
   for compatibility with older applications. */
#ifndef __CYGWIN__
static _CONST
#endif
char _ctype_b[128 + 256] = {
	_CTYPE_DATA_128_255,
	_CTYPE_DATA_0_127,
	_CTYPE_DATA_128_255
};

#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
#ifndef _MB_CAPABLE
_CONST
#endif
char __EXPORT *__ctype_ptr = (char *) _ctype_b + 128;
#endif

#ifndef _MB_CAPABLE
_CONST
#endif
char __EXPORT *__ctype_ptr__ = (char *) _ctype_b + 127;

#  ifdef __CYGWIN__
#    ifdef __x86_64__
__asm__ ("					\n\
        .data					\n\
	.globl  _ctype_				\n\
	.set    _ctype_,_ctype_b+127		\n\
	.text                                   \n\
");
#    else
__asm__ ("					\n\
        .data					\n\
	.globl  __ctype_			\n\
	.set    __ctype_,__ctype_b+127		\n\
	.text                                   \n\
");
#    endif
#  else /* !__CYGWIN__ */

_CONST char _ctype_[1 + 256] = {
	0,
	_CTYPE_DATA_0_127,
	_CTYPE_DATA_128_255
};
#  endif /* !__CYGWIN__ */

#else	/* !defined(ALLOW_NEGATIVE_CTYPE_INDEX) */

_CONST char _ctype_[1 + 256] = {
	0,
	_CTYPE_DATA_0_127,
	_CTYPE_DATA_128_255
};

#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
#ifndef _MB_CAPABLE
_CONST
#endif
char *__ctype_ptr = (char *) _ctype_ + 1;
#endif

#ifndef _MB_CAPABLE
_CONST
#endif
char *__ctype_ptr__ = (char *) _ctype_;

#endif

#if defined(_MB_CAPABLE)
/* Cygwin has its own implementation which additionally maintains backward
   compatibility with applications built under older Cygwin releases. */
#ifndef __CYGWIN__
void
__set_ctype (const char *charset)
{
#if defined(_MB_EXTENDED_CHARSETS_ISO) || defined(_MB_EXTENDED_CHARSETS_WINDOWS)
  int idx;
#endif

  switch (*charset)
    {
#if defined(_MB_EXTENDED_CHARSETS_ISO)
    case 'I':
      idx = __iso_8859_index (charset + 9);
      /* The ctype table has a leading ISO-8859-1 element so we have to add
	 1 to the index returned by __iso_8859_index.  If __iso_8859_index
	 returns < 0, it's ISO-8859-1. */
      if (idx < 0)
        idx = 0;
      else
        ++idx;
#  if defined(ALLOW_NEGATIVE_CTYPE_INDEX)
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
      __ctype_ptr = (char *) (__ctype_iso[idx] + 128);
#endif
      __ctype_ptr__ = (char *) (__ctype_iso[idx] + 127);
#  else
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
      __ctype_ptr = (char *) __ctype_iso[idx] + 1;
#endif
      __ctype_ptr__ = (char *) __ctype_iso[idx];
#  endif
      return;
#endif
#if defined(_MB_EXTENDED_CHARSETS_WINDOWS)
    case 'C':
      idx = __cp_index (charset + 2);
      if (idx < 0)
        break;
#  if defined(ALLOW_NEGATIVE_CTYPE_INDEX)
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
      __ctype_ptr = (char *) (__ctype_cp[idx] + 128);
#endif
      __ctype_ptr__ = (char *) (__ctype_cp[idx] + 127);
#  else
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
      __ctype_ptr = (char *) __ctype_cp[idx] + 1;
#endif
      __ctype_ptr__ = (char *) __ctype_cp[idx];
#  endif
      return;
#endif
    default:
      break;
    }
#  if defined(ALLOW_NEGATIVE_CTYPE_INDEX)
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
  __ctype_ptr = (char *) _ctype_b + 128;
#endif
  __ctype_ptr__ = (char *) _ctype_b + 127;
#  else
#ifdef _NEED_OLD_CTYPE_PTR_DEFINITION
  __ctype_ptr = (char *) _ctype_ + 1;
#endif
  __ctype_ptr__ = (char *) _ctype_;
#  endif
}
#endif /* !__CYGWIN__ */
#endif /* _MB_CAPABLE */
@


1.12
log
@2010-06-29  Antony King  <antony.king@@sr.com>

	* libc/ctype/ctype_.c (__ctype_ptr): Reinstate definition (guarded by
	_NEED_OLD_CTYPE_PTR_DEFINITION) for backwards compatibility with newlib
	1.16.0 and earlier.

2010-06-28  Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>

	* libc/include/sys/stat.h: Add ACCESSPERMS, ALLPERMS, and DEFFILEMODE.
@
text
@d114 8
a121 1

d128 1
a128 1

@


1.12.2.1
log
@	* libc/ctype/ctype_.c (_ctype_): Fix definition for 64 bit Cygwin.
@
text
@d114 1
a114 8
#    ifdef __x86_64__
__asm__ ("					\n\
        .data					\n\
	.globl  _ctype_				\n\
	.set    _ctype_,_ctype_b+127		\n\
	.text                                   \n\
");
#    else
d121 1
a121 1
#    endif
@


1.11
log
@	* libc/ctype/ctype_.c (_CTYPE_DATA_128_255): Rename from
	_CTYPE_DATA_128_256.
	* libc/ctype/ctype_cp.h: Split off all character class values for
	character 255 from the rest of the definitions.
	(__ctype_cp): Use the new definitions.  Make sure that the table
	always contains 0 for EOF (-1).
	* libc/ctype/ctype_iso.h: Ditto.
@
text
@d101 7
d139 7
d177 3
d182 3
d195 3
d200 3
d211 3
d216 3
@


1.10
log
@
2009-04-17  Jeff johnston  <jjohnstn@@redhat.com>

        * configure.in: Remove _HAVE_ARRAY_ALIASING check.
        * configure: Regenerated.
        * newlib.hin: Remove _HAVE_ARRAY_ALIASING flag.
        * libc/ctype/ctype_.c: Do not check for _HAVE_ARRAY_ALIASING.
        * libm/configure.in: Change AC_TRY_COMPILE to AC_TRY_COMMAND to
        avoid executable test.
        * libm/configure: Regenerated.
@
text
@d58 1
a58 1
#define _CTYPE_DATA_128_256 \
d96 1
a96 1
	_CTYPE_DATA_128_256,
d98 1
a98 1
	_CTYPE_DATA_128_256
d120 1
a120 1
	_CTYPE_DATA_128_256
d129 1
a129 1
	_CTYPE_DATA_128_256
@


1.9
log
@	* libc/ctype/ctype_.c (_CTYPE_DATA_0_127): Remove _B flag from TAB.
	* libc/ctype/ctype_cp.h: Mark non-cased letters in tables for codepages
	720, 862, 874, 1255, and 1256 to _U|_L.  Fix a couple of incorrect
	class mappings.
	* libc/ctype/ctype_iso.h: Mark non-cased letters in ISO-8859 tables
	6, 8, and 11 to _U|_L.  Fix a couple of incorrect class mappings.
	* libc/ctype/isblank.c (isblank): Special case TAB.
	* libc/ctype/islower.c (islower): Check explicitely for _L flag only
	in (_U|_L).
	* libc/ctype/isupper.c (isupper): Ditto, but check for _U flag.
	* libc/include/ctype.h (islower): Same in macro.
	(isupper): Ditto.
	(isblank): Special case TAB.  Redefine macro for GCC only.
@
text
@d115 1
a115 5
#  elif defined(_HAVE_ARRAY_ALIASING)

extern _CONST char _ctype_[1 + 256] __attribute__ ((alias ("_ctype_b+127")));

#  else /* !_HAVE_ARRAY_ALIASING */
d122 1
a122 1
#  endif /* !_HAVE_ARRAY_ALIASING */
@


1.8
log
@	* libc/ctype/ctype_c.c: Move inclusion of ctype_iso.h and
	ctype_cp.h out of ALLOW_NEGATIVE_CTYPE_INDEX case.
	(__ctype_ptr__): Constify in !_MB_CAPABLE case.  Otherwise,
	de-constify in !ALLOW_NEGATIVE_CTYPE_INDEX case, too.  Add comment.
	(__set_ctype): Set __ctype_ptr__ pointer according to definition
	of ALLOW_NEGATIVE_CTYPE_INDEX.
	* libc/include/ctype.h (__ctype_ptr__): Constify in !_MB_CAPABLE case.
@
text
@d42 1
a42 1
	_C,	_B|_C|_S, _C|_S, _C|_S,	_C|_S,	_C|_S,	_C,	_C, \
@


1.7
log
@	* libc/ctype/Makefile.am: Remove _tolower.c and _toupper.c
	source files.  Add a dependency rule for ctype_o to note
	changes in ctype_iso.h and ctype_cp.h.
	* libc/ctype/Makefile.in: Regenerate.
	* libc/ctype/_tolower.c: Remove file.
	* libc/ctype/_toupper.c: Remove file.
	* libc/ctype/ctype_.c: Make sure ALLOW_NEGATIVE_CTYPE_INDEX
	is always defined on Cygwin.
	(_ctype_b): Don't make `static const' on Cygwin.
	(ctype_iso.h): Include if _MB_EXTENDED_CHARSETS_ISO is set.
	(ctype_cp.h): Include if _MB_EXTENDED_CHARSETS_WINDOWS is set.
	(__ctype_ptr): Drop definition.
	(__ctype_ptr__): De-constify.  Mark as __EXPORT symbol.
	(_ctype_): Add Cygwin-specifc asm define.
	(__set_ctype): New function to set __ctype_ptr__ according to
	current charset.
	* libc/ctype/ctype_cp.h: New file containing Windows codepage
	specific character class tables.
	* libc/ctype/ctype_iso.h: New file containing ISO-8859-x
	specific character class tables.
	* libc/ctype/tolower.c (tolower): Reimplement to support any singlebyte
	charset if one of the extended charsets is enabled.
	* libc/ctype/toupper.c (toupper): Ditto.
	* libc/include/ctype.h (_tolower): Define as macro per POSIX.
	(_toupper): Ditto.
	(__ctype_ptr__): De-constify.
	(toupper): Disable macro on systems supporting extended charsets.
	(tolower): Ditto.
	* libc/include/sys/config.h (__EXPORT): Define empty if not defined.
	* libc/locale/locale.c (__mb_cur_max): Mark as __EXPORT symbol.
	(__set_ctype): Declare unconditionally.
	(loadlocale): Remove __CYGWIN__ guard around __set_ctype call.
@
text
@d80 9
d101 2
a102 6
#if defined(_MB_CAPABLE)
#if defined(_MB_EXTENDED_CHARSETS_ISO)
#include "ctype_iso.h"
#endif
#if defined(_MB_EXTENDED_CHARSETS_WINDOWS)
#include "ctype_cp.h"
d104 1
a104 3
#endif

char __EXPORT *__ctype_ptr__ = _ctype_b + 127;
d126 1
a126 1
#    endif /* !_HAVE_ARRAY_ALIASING */
d136 5
a140 1
_CONST char *__ctype_ptr__ = _ctype_;
d150 1
d152 1
d166 1
d168 3
d178 1
d180 3
d188 1
d190 3
@


1.6
log
@	* libc/ctype/ctype_.c (_CTYPE_DATA_0_127): Mark TAB as blank character.
	* libc/ctype/isblank.c: Replace hardcoded test with test for having _B
	marker in ctype array.
	* libc/include/ctype.h (isblank): Add macro.
@
text
@d76 1
a76 1
#if defined(__GNUC__) && !defined(__CHAR_UNSIGNED__) && !defined(COMPACT_CTYPE)
d81 6
a86 1
static _CONST char _ctype_b[128 + 256] = {
d92 22
a113 13
#  if defined(__CYGWIN__)
_CONST char __declspec(dllexport) *__ctype_ptr = _ctype_b + 128;
_CONST char __declspec(dllexport) *__ctype_ptr__ = _ctype_b + 127;
#  else
_CONST char *__ctype_ptr = _ctype_b + 128;
_CONST char *__ctype_ptr__ = _ctype_b + 127;
#  endif

#  if defined(_HAVE_ARRAY_ALIASING)

#    if defined(__CYGWIN__)
extern _CONST char __declspec(dllexport) _ctype_[1 + 256] __attribute__ ((alias ("_ctype_b+127")));
#    else
a114 1
#    endif
a117 3
#    if defined(__CYGWIN__)
_CONST char __declspec(dllexport) _ctype_[1 + 256] = {
#    else
a118 1
#    endif
d123 1
a123 1
#  endif /* !_HAVE_ARRAY_ALIASING */
a126 3
# if defined(__CYGWIN__)
_CONST char __declspec(dllexport) _ctype_[1 + 256] = {
# else
a127 1
# endif
a132 1
_CONST char *__ctype_ptr = _ctype_ + 1;
d135 40
@


1.5
log
@
2008-07-21  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/ctype_.c: Add new pointer __ctype_ptr__ which is one
        less than the old __ctype_ptr.
        * libc/ctype/isalnum.c: Use __ctype_ptr__.
        * libc/ctype/isalpha.c: Ditto.
        * libc/ctype/iscntrl.c: Ditto.
        * libc/ctype/isdigit.c: Ditto.
        * libc/ctype/islower.c: Ditto.
        * libc/ctype/isprint.c: Ditto.
        * libc/ctype/ispunct.c: Ditto.
        * libc/ctype/isspace.c: Ditto.
        * libc/ctype/isupper.c: Ditto.
        * libc/ctype/isxdigit.c: Ditto.
        * libc/include/ctype.h: Change ctype macros to use new __ctype_ptr__
        and add declaration of __ctype_ptr__.  Remove older ctype table pointers
        from here even though they can still work.
@
text
@d42 1
a42 1
	_C,	_C|_S,	_C|_S,	_C|_S,	_C|_S,	_C|_S,	_C,	_C, \
@


1.4
log
@
2005-03-17  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.in: Add new check to see if compiler supports
        aliasing of arrays and define _HAVE_ARRAY_ALIASING if true.
        * configure: Regenerated.
        * Makefile.in: Ditto.
        * newlib.hin: Add _HAVE_ARRAY_ALIASING.
        * libc/ctype/ctype_.c: Check for _HAVE_ARRAY_ALIASING before
        aliasing the _ctype_ array to _ctype_b.
        * libc/include/ctype.h: Change macros to use __ctype_ptr.  Mark
        _ctype_ as deprecated.
@
text
@d89 1
d92 1
d129 1
@


1.3
log
@	* libc/ctype/ctype_.c: Remove checks for deprecated __CYGWIN32__.
	* libc/include/stdio.h: Ditto.
	* libc/include/sys/config.h: Ditto.
	* libc/stdio/mktemp.c: Ditto.
@
text
@d87 9
a95 1
#if defined(__CYGWIN__)
d97 1
a97 2
_CONST char __declspec(dllexport) *__ctype_ptr = _ctype_b + 128;
#else
d99 14
a112 2
_CONST char *__ctype_ptr = _ctype_b + 128;
#endif
d116 1
a116 1
#if defined(__CYGWIN__)
d118 1
a118 1
#else
d120 1
a120 1
#endif
@


1.2
log
@
2001-06-11  Egor Duda  <deo@@logos-m.ru>

        * libc/ctype/ctype_.c: When compiled with gcc on platforms
        with signed char, make _ctype_[-128] ... _ctype[-1] refer to
        initialized memory region. Platform can define COMPACT_CTYPE
        to avoid allocation of the additional 128 bytes of data.
        Add pointer to _ctype_ array. Always initialize all _ctype_
        array elements.
@
text
@d87 1
a87 1
#if defined(__CYGWIN__) || defined(__CYGWIN32__)
d97 1
a97 1
#if defined(__CYGWIN__) || defined(__CYGWIN32__)
@


1.1
log
@Initial revision
@
text
@d40 57
d103 2
a104 16
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_C,	_C|_S,	_C|_S,	_C|_S,	_C|_S,	_C|_S,	_C,	_C,
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_S|_B,	_P,	_P,	_P,	_P,	_P,	_P,	_P,
	_P,	_P,	_P,	_P,	_P,	_P,	_P,	_P,
	_N,	_N,	_N,	_N,	_N,	_N,	_N,	_N,
	_N,	_N,	_P,	_P,	_P,	_P,	_P,	_P,
	_P,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U,
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U,
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U,
	_U,	_U,	_U,	_P,	_P,	_P,	_P,	_P,
	_P,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L,
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L,
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L,
	_L,	_L,	_L,	_P,	_P,	_P,	_P,	_C
d106 3
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
