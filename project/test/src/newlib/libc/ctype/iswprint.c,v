head	1.8;
access;
symbols
	cygwin-1_7_35-release:1.8
	cygwin-1_7_34-release:1.8
	newlib-2_2_0:1.8.0.6
	cygwin-1_7_33-release:1.8
	cygwin-1_7_32-release:1.8
	cygwin-1_7_31-release:1.8
	cygwin-1_7_30-release:1.8
	cygwin-1_7_29-release:1.8
	cygwin-1_7_28-release:1.8
	newlib-2_1_0:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.4
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	newlib-1_20_0:1.8
	cygwin-1_7_9-release:1.8
	cygwin-1_7_8-release:1.8
	newlib-1_19_0:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.7
	cygwin-1_7_1-release:1.7
	newlib-1_17_0-arc:1.4.0.10
	binutils-arc-20080908-branch:1.4.0.8
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4
	newlib-csl-sourcerygxx-4_1-32:1.4
	newlib-csl-innovasic-fido-3_4_4-33:1.4
	newlib-csl-coldfire-4_1-30:1.4
	newlib-csl-sourcerygxx-4_1-30:1.4
	newlib-csl-coldfire-4_1-28:1.4
	newlib-csl-sourcerygxx-4_1-28:1.4
	newlib-csl-arm-2006q3-27:1.4
	newlib-csl-sourcerygxx-4_1-27:1.4
	newlib-csl-arm-2006q3-26:1.4
	newlib-csl-sourcerygxx-4_1-26:1.4
	newlib-csl-sourcerygxx-4_1-24:1.4
	newlib-csl-sourcerygxx-4_1-23:1.4
	newlib-csl-sourcerygxx-4_1-21:1.4
	newlib-csl-arm-2006q3-21:1.4
	newlib-csl-arm-2006q3-19:1.4
	newlib-csl-sourcerygxx-4_1-19:1.4
	newlib-csl-sourcerygxx-4_1-18:1.4
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.8
date	2010.02.18.20.37.19;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.14.20.16.21;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.24.10.13.27;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.03.09.28.45;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.28.21.33.22;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.23.21.44.21;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.22.24.20;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.20.20.13.10;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* libc/ctype/iswalpha.c (iswalpha): Update to Unicode 5.2.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunct): Drop standalone implementation.
	Define in terms of other wctype functions instead.
	* libc/ctype/towlower.c (towlower): Update to Unicode 5.2.  Add comment
	to explain how to fetch the data from the Unicode database.
	* libc/ctype/towupper.c (towupper): Ditto.
	* libc/ctype/utf8alpha.h: Ditto.
	* libc/ctype/utf8print.h: Ditto.
	* libc/ctype/utf8punct.h: Remove.
	* libc/ctype/iswcntrl.c (iswcntrl): Add comment to explain how to
	fetch the data from the Unicode database.
@
text
@/* Copyright (c) 2002 Red Hat Incorporated.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

     Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

     Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

     The name of Red Hat Incorporated may not be used to endorse
     or promote products derived from this software without specific
     prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED.  IN NO EVENT SHALL RED HAT INCORPORATED BE LIABLE FOR ANY
   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
FUNCTION
	<<iswprint>>---printable wide character test

INDEX
	iswprint

ANSI_SYNOPSIS
	#include <wctype.h>
	int iswprint(wint_t <[c]>);

TRAD_SYNOPSIS
	#include <wctype.h>
	int iswprint(<[c]>)
	wint_t <[c]>;

DESCRIPTION
<<iswprint>> is a function which classifies wide-character values that
are printable.

RETURNS
<<iswprint>> returns non-zero if <[c]> is a printable wide character.

PORTABILITY
<<iswprint>> is C99.

No supporting OS subroutines are required.
*/
#include <_ansi.h>
#include <newlib.h>
#include <wctype.h>
#include <string.h>
#include <ctype.h>
#include "local.h"

#ifdef _MB_CAPABLE
#include "utf8print.h"
#endif /* _MB_CAPABLE */

int
_DEFUN(iswprint,(c), wint_t c)
{
#ifdef _MB_CAPABLE
  unsigned const char *table;
  unsigned char *ptr;
  unsigned char ctmp;
  int size;
  wint_t x;
  
  c = _jp2uc (c);

  /* Based on and tested against Unicode 5.2
     See utf8print.h for a description how to fetch the data. */
  x = (c >> 8);
  /* for some large sections, all characters are printuation so handle them here */
  if ((x >= 0x33 && x <= 0x4c) ||
      (x >= 0x4e && x <= 0x9e) ||
      (x >= 0xa0 && x <= 0xa3) ||
      (x >= 0xac && x <= 0xd6) ||
      (x >= 0xe0 && x <= 0xf9) ||
      (x >= 0x120 && x <= 0x122) ||
      (x >= 0x130 && x <= 0x133) ||
      (x >= 0x200 && x <= 0x2a5) ||
      (x >= 0x2a7 && x <= 0x2b6) ||
      (x >= 0xf00 && x <= 0xffe) ||
      (x >= 0x1000 && x <= 0x10fe))
    return 1;
  
  switch (x)
    {
    case 0x01:
    case 0x02:
    case 0x04:
    case 0x11:
    case 0x14:
    case 0x15:
    case 0x1e:
    case 0x22:
    case 0x25:
    case 0x28:
    case 0x29:
    case 0x2a:
    case 0xa5:
    case 0xfc:
    case 0x2f8:
    case 0x2f9:
      return 1;
    case 0x00:
      table = u0;
      size = sizeof(u0);
      break;
    case 0x03:
      table = u3;
      size = sizeof(u3);
      break;
    case 0x05:
      table = u5;
      size = sizeof(u5);
      break;
    case 0x06:
      table = u6;
      size = sizeof(u6);
      break;
    case 0x07:
      table = u7;
      size = sizeof(u7);
      break;
    case 0x08:
      table = u8;
      size = sizeof(u8);
      break;
    case 0x09:
      table = u9;
      size = sizeof(u9);
      break;
    case 0x0a:
      table = ua;
      size = sizeof(ua);
      break;
    case 0x0b:
      table = ub;
      size = sizeof(ub);
      break;
    case 0x0c:
      table = uc;
      size = sizeof(uc);
      break;
    case 0x0d:
      table = ud;
      size = sizeof(ud);
      break;
    case 0x0e:
      table = ue;
      size = sizeof(ue);
      break;
    case 0x0f:
      table = uf;
      size = sizeof(uf);
      break;
    case 0x10:
      table = u10;
      size = sizeof(u10);
      break;
    case 0x12:
      table = u12;
      size = sizeof(u12);
      break;
    case 0x13:
      table = u13;
      size = sizeof(u13);
      break;
    case 0x16:
      table = u16;
      size = sizeof(u16);
      break;
    case 0x17:
      table = u17;
      size = sizeof(u17);
      break;
    case 0x18:
      table = u18;
      size = sizeof(u18);
      break;
    case 0x19:
      table = u19;
      size = sizeof(u19);
      break;
    case 0x1a:
      table = u1a;
      size = sizeof(u1a);
      break;
    case 0x1b:
      table = u1b;
      size = sizeof(u1b);
      break;
    case 0x1c:
      table = u1c;
      size = sizeof(u1c);
      break;
    case 0x1d:
      table = u1d;
      size = sizeof(u1d);
      break;
    case 0x1f:
      table = u1f;
      size = sizeof(u1f);
      break;
    case 0x20:
      table = u20;
      size = sizeof(u20);
      break;
    case 0x21:
      table = u21;
      size = sizeof(u21);
      break;
    case 0x23:
      table = u23;
      size = sizeof(u23);
      break;
    case 0x24:
      table = u24;
      size = sizeof(u24);
      break;
    case 0x26:
      table = u26;
      size = sizeof(u26);
      break;
    case 0x27:
      table = u27;
      size = sizeof(u27);
      break;
    case 0x2b:
      table = u2b;
      size = sizeof(u2b);
      break;
    case 0x2c:
      table = u2c;
      size = sizeof(u2c);
      break;
    case 0x2d:
      table = u2d;
      size = sizeof(u2d);
      break;
    case 0x2e:
      table = u2e;
      size = sizeof(u2e);
      break;
    case 0x2f:
      table = u2f;
      size = sizeof(u2f);
      break;
    case 0x30:
      table = u30;
      size = sizeof(u30);
      break;
    case 0x31:
      table = u31;
      size = sizeof(u31);
      break;
    case 0x32:
      table = u32;
      size = sizeof(u32);
      break;
    case 0x4d:
      table = u4d;
      size = sizeof(u4d);
      break;
    case 0x9f:
      table = u9f;
      size = sizeof(u9f);
      break;
    case 0xa4:
      table = ua4;
      size = sizeof(ua4);
      break;
    case 0xa6:
      table = ua6;
      size = sizeof(ua6);
      break;
    case 0xa7:
      table = ua7;
      size = sizeof(ua7);
      break;
    case 0xa8:
      table = ua8;
      size = sizeof(ua8);
      break;
    case 0xa9:
      table = ua9;
      size = sizeof(ua9);
      break;
    case 0xaa:
      table = uaa;
      size = sizeof(uaa);
      break;
    case 0xab:
      table = uab;
      size = sizeof(uab);
      break;
    case 0xd7:
      table = ud7;
      size = sizeof(ud7);
      break;
    case 0xfa:
      table = ufa;
      size = sizeof(ufa);
      break;
    case 0xfb:
      table = ufb;
      size = sizeof(ufb);
      break;
    case 0xfd:
      table = ufd;
      size = sizeof(ufd);
      break;
    case 0xfe:
      table = ufe;
      size = sizeof(ufe);
      break;
    case 0xff:
      table = uff;
      size = sizeof(uff);
      break;
    case 0x100:
      table = u100;
      size = sizeof(u100);
      break;
    case 0x101:
      table = u101;
      size = sizeof(u101);
      break;
    case 0x102:
      table = u102;
      size = sizeof(u102);
      break;
    case 0x103:
      table = u103;
      size = sizeof(u103);
      break;
    case 0x104:
      table = u104;
      size = sizeof(u104);
      break;
    case 0x108:
      table = u108;
      size = sizeof(u108);
      break;
    case 0x109:
      table = u109;
      size = sizeof(u109);
      break;
    case 0x10a:
      table = u10a;
      size = sizeof(u10a);
      break;
    case 0x10b:
      table = u10b;
      size = sizeof(u10b);
      break;
    case 0x10c:
      table = u10c;
      size = sizeof(u10c);
      break;
    case 0x10e:
      table = u10e;
      size = sizeof(u10e);
      break;
    case 0x110:
      table = u110;
      size = sizeof(u110);
      break;
    case 0x123:
      table = u123;
      size = sizeof(u123);
      break;
    case 0x124:
      table = u124;
      size = sizeof(u124);
      break;
    case 0x134:
      table = u134;
      size = sizeof(u134);
      break;
    case 0x1d0:
      table = u1d0;
      size = sizeof(u1d0);
      break;
    case 0x1d1:
      table = u1d1;
      size = sizeof(u1d1);
      break;
    case 0x1d2:
      table = u1d2;
      size = sizeof(u1d2);
      break;
    case 0x1d3:
      table = u1d3;
      size = sizeof(u1d3);
      break;
    case 0x1d4:
      table = u1d4;
      size = sizeof(u1d4);
      break;
    case 0x1d5:
      table = u1d5;
      size = sizeof(u1d5);
      break;
    case 0x1d6:
      table = u1d6;
      size = sizeof(u1d6);
      break;
    case 0x1d7:
      table = u1d7;
      size = sizeof(u1d7);
      break;
    case 0x1f0:
      table = u1f0;
      size = sizeof(u1f0);
      break;
    case 0x1f1:
      table = u1f1;
      size = sizeof(u1f1);
      break;
    case 0x1f2:
      table = u1f2;
      size = sizeof(u1f2);
      break;
    case 0x2a6:
      table = u2a6;
      size = sizeof(u2a6);
      break;
    case 0x2b7:
      table = u2b7;
      size = sizeof(u2b7);
      break;
    case 0x2fa:
      table = u2fa;
      size = sizeof(u2fa);
      break;
    case 0xe00:
      table = ue00;
      size = sizeof(ue00);
      break;
    case 0xe01:
      table = ue01;
      size = sizeof(ue01);
      break;
    case 0xfff:
      table = ufff;
      size = sizeof(ufff);
      break;
    case 0x10ff:
      table = u10ff;
      size = sizeof(u10ff);
      break;
    default:
      return 0;
    }
  /* we have narrowed down to a section of 256 characters to check */
  /* now check if c matches the printuation wide-chars within that section */
  ptr = (unsigned char *)table;
  ctmp = (unsigned char)c;
  while (ptr < table + size)
    {
      if (ctmp == *ptr)
	return 1;
      if (ctmp < *ptr)
	return 0;
      /* otherwise c > *ptr */
      /* look for 0x0 as next element which indicates a range */
      ++ptr;
      if (*ptr == 0x0)
	{
	  /* we have a range..see if c falls within range */
	  ++ptr;
	  if (ctmp <= *ptr)
	    return 1;
	  ++ptr;
	}
    }
  /* not in table */
  return 0;
#else
  return (c < (wint_t)0x100 ? isprint (c) : 0);
#endif /* _MB_CAPABLE */
}

@


1.7
log
@	* libc/ctype/local.h (JP_JIS, JP_SJIS, JP_EUCJP): Move definition
	to jp2uc.c.
	(__jp2uc): Remove declaration.
	(_jp2uc): Declare.
	* libc/ctype/jp2uc.c (JP_JIS, JP_SJIS, JP_EUCJP): Define.
	(__jp2uc): Remove Cygwin special case.
	(_jp2uc): New function.  On Cygwin, just return c.
	* libc/ctype/iswalpha.c (iswalpha): Just call _jp2uc.
	* libc/ctype/iswblank.c (iswblank): Ditto.
	* libc/ctype/iswcntrl.c (iswcntrl): Ditto.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunt): Ditto.
	* libc/ctype/iswspace.c (iswspace): Ditto.
	* libc/ctype/towlower.c (towlower): Ditto.
	* libc/ctype/towupper.c (towupper): Ditto.
@
text
@d81 2
d85 1
a85 1
  if ((x >= 0x34 && x <= 0x4c) ||
d87 1
d90 2
d93 1
d101 4
d106 1
d112 1
a112 4
    case 0xa0:
    case 0xa1:
    case 0xa2:
    case 0xa3:
a120 4
    case 0x02:
      table = u2;
      size = sizeof(u2);
      break;
a124 4
    case 0x04:
      table = u4;
      size = sizeof(u4);
      break;
d137 4
a172 4
    case 0x11:
      table = u11;
      size = sizeof(u11);
      break;
a180 4
    case 0x14:
      table = u14;
      size = sizeof(u14);
      break;
d193 19
a211 3
    case 0x1e:
      table = u1e;
      size = sizeof(u1e);
d241 12
a272 4
    case 0x33:
      table = u33;
      size = sizeof(u33);
      break;
d285 24
d333 12
d353 40
d401 8
d425 12
d441 4
d453 4
@


1.6
log
@	* libc/ctype/iswalpha.c: Handle all wchar_t as unicode on
	_MB_CAPABLE systems.
	* libc/ctype/iswblank.c: Ditto.
	* libc/ctype/iswcntrl.c: Ditto.
	* libc/ctype/iswprint.c: Ditto.
	* libc/ctype/iswpunct.c: Ditto.
	* libc/ctype/iswspace.c: Ditto.
	* libc/ctype/jp2uc.c (__jp2uc): On Cygwin, just return c.
	Explain why.
	* libc/ctype/towlower.c: Ditto.
	* libc/ctype/towupper.c: Ditto.
	* libc/include/sys/config.h: Define _MB_EXTENDED_CHARSETS_ISO
	and _MB_EXTENDED_CHARSETS_WINDOWS if _MB_EXTENDED_CHARSETS_ALL is
	defined.  Define _MB_EXTENDED_CHARSETS_ALL on Cygwin only for now.
	* libc/include/sys/reent.h (struct _reent): Mark _current_category
	and _current_locale as unused.
	* libc/locale/locale.c: Add new charset support to documentation.
	Include ../stdio/local.h from here.
	(lc_ctype_charset): Set to "ASCII" by default.
	(lc_message_charset): Ditto.
	(_setlocale_r): Don't set _current_category and _current_locale.
	(loadlocale): Add Cygwin codepage support.  On _MB_CAPABLE
	systems, set __mbtowc and __wctomb function pointers to function
	corresponding with current charset.  Don't allow non-existant
	ISO-8859-12 charset.  Add support for Windows singlebyte codepages.
	On Cygwin, add support for GBK, CP949, and BIG5.  On Cygwin,
	call __set_ctype() in case the catorgy is LC_CTYPE.  Don't set
	_current_category and _current_locale.
	* libc/stdlib/Makefile.am (GENERAL_SOURCES): Add sb_charsets.c.
	* libc/stdlib/Makefile.in: Regenerate.
	* libc/stdlib/local.h: Add prototype for __locale_charset.
	Add prototypes for __mbtowc and __wctomb pointers.
	Add prototypes for charset-specific _wctomb_r and _mbtowc_r
	functions.
	Declare tables and functions from sb_charsets.c.
	* libc/stdlib/mbtowc_r.c (__mbtowc): Define.  Set to __ascii_mbtowc
	by default.
	(_mbtowc_r): Just call __mbtowc from here.
	(__ascii_mbtowc): New function.
	(__iso_mbtowc): New function.
	(__cp_mbtowc): New function.
	(__utf8_mbtowc): New function.
	(__sjis_mbtowc): New function.  Disable on Cygwin.
	(__eucjp_mbtowc): New function.  Disable on Cygwin.
	(__jis_mbtowc): New function.  Disable on Cygwin.
	* libc/stdlib/sb_charsets.c: New file, adding singlebyte to UTF
	conversion tables for all ISO and CP charsets.
	(__iso_8859_index): New function.
	(__cp_index): New function.
	* libc/stdlib/wctomb_r.c (__wctomb): Define.  Set to __ascii_wctomb
	by default.
	(_wctomb_r): Just call __wctomb from here.
	(__ascii_wctomb): New function.
	(__utf8_wctomb): New function.
	(__sjis_wctomb): New function.  Disable on Cygwin.
	(__eucjp_wctomb): New function.  Disable on Cygwin.
	(__jis_wctomb): New function.  Disable on Cygwin.
	(__iso_wctomb): New function.
	(__cp_wctomb): New function.
@
text
@d79 1
a79 6
  if (!strcmp (__locale_charset (), "JIS"))
    c = __jp2uc (c, JP_JIS);
  else if (!strcmp (__locale_charset (), "SJIS"))
    c = __jp2uc (c, JP_SJIS);
  else if (!strcmp (__locale_charset (), "EUCJP"))
    c = __jp2uc (c, JP_EUCJP);
@


1.5
log
@	* libc/locale/locale.c (_setlocale_r): New implementation based on
	FreeBSD's setlocale.
	(currentlocale): New helper function.
	(loadlocale): Ditto.
	(__locale_charset): New function.
	(__locale_msgcharset): Rename from __locale_charset.
	* libc/ctype/local.h (__lc_ctype): Remove declaration.
	(__locale_charset): Declare.
	* libc/ctype/iswalpha.c (iswalpha): Call __locale_charset instead of
	using __lc_ctype directly.  Only compare against the charset alone.
	* libc/ctype/iswblank.c (iswblank): Ditto.
	* libc/ctype/iswcntrl.c (iswcntrl): Ditto.
	* libc/ctype/iswprint.c (iswprint): Ditto.
	* libc/ctype/iswpunct.c (iswpunct): Ditto.
	* libc/ctype/iswspace.c (iswspace): Ditto.
	* libc/ctype/towlower.c (towlower): Ditto.
	* libc/ctype/towupper.c (towupper): Ditto.
	* libc/stdlib/mbtowc_r.c (_mbtowc_r): Ditto.
	* libc/stdlib/wctomb_r.c (_wctomb_r): Ditto.
	* libc/sys/linux/intl/loadmsgcat.c (_nl_init_domain_conv): Call
	__locale_msgcharset instead of __locale_charset.
@
text
@d73 6
a78 2
  int unicode = 0;

d80 1
a80 4
    {
      c = __jp2uc (c, JP_JIS);
      unicode = 1;
    }
d82 1
a82 4
    {
      c = __jp2uc (c, JP_SJIS);
      unicode = 1;
    }
d84 14
d99 249
a347 2
      c = __jp2uc (c, JP_EUCJP);
      unicode = 1;
d349 5
a353 1
  else if (!strcmp (__locale_charset (), "UTF-8"))
d355 1
a355 19
      unicode = 1;
    }

  if (unicode)
    {
      unsigned const char *table;
      unsigned char *ptr;
      unsigned char ctmp;
      int size;
      wint_t x = (c >> 8);
      
      /* for some large sections, all characters are printuation so handle them here */
      if ((x >= 0x34 && x <= 0x4c) ||
	  (x >= 0x4e && x <= 0x9e) ||
	  (x >= 0xac && x <= 0xd6) ||
	  (x >= 0xe0 && x <= 0xf9) ||
	  (x >= 0x200 && x <= 0x2a5) ||
	  (x >= 0xf00 && x <= 0xffe) ||
	  (x >= 0x1000 && x <= 0x10fe))
d357 6
a362 2
      
      switch (x)
d364 3
a366 257
	case 0x01:
	case 0x15:
	case 0x22:
	case 0x25:
	case 0x28:
	case 0x29:
	case 0x2a:
	case 0xa0:
	case 0xa1:
	case 0xa2:
	case 0xa3:
	case 0xfc:
	case 0x2f8:
	case 0x2f9:
	  return 1;
	case 0x00:
	  table = u0;
	  size = sizeof(u0);
	  break;
	case 0x02:
	  table = u2;
	  size = sizeof(u2);
	  break;
	case 0x03:
	  table = u3;
	  size = sizeof(u3);
	  break;
	case 0x04:
	  table = u4;
	  size = sizeof(u4);
	  break;
	case 0x05:
	  table = u5;
	  size = sizeof(u5);
	  break;
	case 0x06:
	  table = u6;
	  size = sizeof(u6);
	  break;
	case 0x07:
	  table = u7;
	  size = sizeof(u7);
	  break;
	case 0x09:
	  table = u9;
	  size = sizeof(u9);
	  break;
	case 0x0a:
	  table = ua;
	  size = sizeof(ua);
	  break;
	case 0x0b:
	  table = ub;
	  size = sizeof(ub);
	  break;
	case 0x0c:
	  table = uc;
	  size = sizeof(uc);
	  break;
	case 0x0d:
	  table = ud;
	  size = sizeof(ud);
	  break;
	case 0x0e:
	  table = ue;
	  size = sizeof(ue);
	  break;
	case 0x0f:
	  table = uf;
	  size = sizeof(uf);
	  break;
	case 0x10:
	  table = u10;
	  size = sizeof(u10);
	  break;
	case 0x11:
	  table = u11;
	  size = sizeof(u11);
	  break;
	case 0x12:
	  table = u12;
	  size = sizeof(u12);
	  break;
	case 0x13:
	  table = u13;
	  size = sizeof(u13);
	  break;
	case 0x14:
	  table = u14;
	  size = sizeof(u14);
	  break;
	case 0x16:
	  table = u16;
	  size = sizeof(u16);
	  break;
	case 0x17:
	  table = u17;
	  size = sizeof(u17);
	  break;
	case 0x18:
	  table = u18;
	  size = sizeof(u18);
	  break;
	case 0x1e:
	  table = u1e;
	  size = sizeof(u1e);
	  break;
	case 0x1f:
	  table = u1f;
	  size = sizeof(u1f);
	  break;
	case 0x20:
	  table = u20;
	  size = sizeof(u20);
	  break;
	case 0x21:
	  table = u21;
	  size = sizeof(u21);
	  break;
	case 0x23:
	  table = u23;
	  size = sizeof(u23);
	  break;
	case 0x24:
	  table = u24;
	  size = sizeof(u24);
	  break;
	case 0x26:
	  table = u26;
	  size = sizeof(u26);
	  break;
	case 0x27:
	  table = u27;
	  size = sizeof(u27);
	  break;
	case 0x2e:
	  table = u2e;
	  size = sizeof(u2e);
	  break;
	case 0x2f:
	  table = u2f;
	  size = sizeof(u2f);
	  break;
	case 0x30:
	  table = u30;
	  size = sizeof(u30);
	  break;
	case 0x31:
	  table = u31;
	  size = sizeof(u31);
	  break;
	case 0x32:
	  table = u32;
	  size = sizeof(u32);
	  break;
	case 0x33:
	  table = u33;
	  size = sizeof(u33);
	  break;
	case 0x4d:
	  table = u4d;
	  size = sizeof(u4d);
	  break;
	case 0x9f:
	  table = u9f;
	  size = sizeof(u9f);
	  break;
	case 0xa4:
	  table = ua4;
	  size = sizeof(ua4);
	  break;
	case 0xd7:
	  table = ud7;
	  size = sizeof(ud7);
	  break;
	case 0xfa:
	  table = ufa;
	  size = sizeof(ufa);
	  break;
	case 0xfb:
	  table = ufb;
	  size = sizeof(ufb);
	  break;
	case 0xfd:
	  table = ufd;
	  size = sizeof(ufd);
	  break;
	case 0xfe:
	  table = ufe;
	  size = sizeof(ufe);
	  break;
	case 0xff:
	  table = uff;
	  size = sizeof(uff);
	  break;
	case 0x103:
	  table = u103;
	  size = sizeof(u103);
	  break;
	case 0x104:
	  table = u104;
	  size = sizeof(u104);
	  break;
	case 0x1d0:
	  table = u1d0;
	  size = sizeof(u1d0);
	  break;
	case 0x1d1:
	  table = u1d1;
	  size = sizeof(u1d1);
	  break;
	case 0x1d4:
	  table = u1d4;
	  size = sizeof(u1d4);
	  break;
	case 0x1d5:
	  table = u1d5;
	  size = sizeof(u1d5);
	  break;
	case 0x1d6:
	  table = u1d6;
	  size = sizeof(u1d6);
	  break;
	case 0x1d7:
	  table = u1d7;
	  size = sizeof(u1d7);
	  break;
	case 0x2a6:
	  table = u2a6;
	  size = sizeof(u2a6);
	  break;
	case 0x2fa:
	  table = u2fa;
	  size = sizeof(u2fa);
	  break;
	case 0xe00:
	  table = ue00;
	  size = sizeof(ue00);
	  break;
	case 0xfff:
	  table = ufff;
	  size = sizeof(ufff);
	  break;
	case 0x10ff:
	  table = u10ff;
	  size = sizeof(u10ff);
	  break;
	default:
	  return 0;
	}
      /* we have narrowed down to a section of 256 characters to check */
      /* now check if c matches the printuation wide-chars within that section */
      ptr = (unsigned char *)table;
      ctmp = (unsigned char)c;
      while (ptr < table + size)
	{
	  if (ctmp == *ptr)
a367 4
	  if (ctmp < *ptr)
	    return 0;
	  /* otherwise c > *ptr */
	  /* look for 0x0 as next element which indicates a range */
a368 8
	  if (*ptr == 0x0)
	    {
	      /* we have a range..see if c falls within range */
	      ++ptr;
	      if (ctmp <= *ptr)
		return 1;
	      ++ptr;
	    }
a369 2
      /* not in table */
      return 0;
d371 4
a375 2

  return (c < (wint_t)0x100 ? isprint (c) : 0);
@


1.4
log
@
2005-10-28  Bob Wilson  <bob.wilson@@acm.org>

        * libc/ctype/ctype.tex: Use hyphens as appropriate, but not  otherwise.
        * libc/ctype/islower.c: Likewise.
        * libc/ctype/isupper.c: Likewise.
        * libc/ctype/iswalnum.c: Likewise.
        * libc/ctype/iswalpha.c: Likewise.
        * libc/ctype/iswblank.c: Likewise.
        * libc/ctype/iswcntrl.c: Likewise.
        * libc/ctype/iswdigit.c: Likewise.
        * libc/ctype/iswgraph.c: Likewise.
        * libc/ctype/iswlower.c: Likewise.
        * libc/ctype/iswprint.c: Likewise.
        * libc/ctype/iswpunct.c: Likewise.
        * libc/ctype/iswspace.c: Likewise.
        * libc/ctype/iswupper.c: Likewise.
        * libc/ctype/iswxdigit.c: Likewise.
        * libc/ctype/tolower.c: Likewise.
        * libc/ctype/toupper.c: Likewise.
        * libc/ctype/towctrans.c: Likewise.
        * libc/ctype/towlower.c: Likewise.
        * libc/ctype/towupper.c: Likewise.
        * libc/string/strcasecmp.c: Likewise.
        * libc/string/strcoll.c: Likewise.
        * libc/string/strings.tex: Likewise.
        * libc/string/strlwr.c: Likewise.
        * libc/string/strncasecmp.c: Likewise.
        * libc/string/strupr.c: Likewise.
        * libc/string/wcscoll.c: Likewise.
        * libc/string/wcslcat.c: Likewise.
        * libc/string/wcslcpy.c: Likewise.
        * libc/string/wcsnlen.c: Likewise.
        * libc/string/wcsstr.c: Likewise.
        * libc/string/wcstrings.tex: Likewise.
        * libc/string/wmemchr.c: Likewise.
        * libc/string/wmemcmp.c: Likewise.
        * libc/string/wmemcpy.c: Likewise.
        * libc/string/wmemmove.c: Likewise.
        * libc/string/wmemset.c: Likewise.
@
text
@d72 1
d74 2
a75 7
  if (__lc_ctype[0] == 'C' && __lc_ctype[1] == '\0')
    {
      unicode = 0;
      /* fall-through */ 
    }
#ifdef _MB_CAPABLE
  else if (!strcmp (__lc_ctype, "C-JIS"))
d80 1
a80 1
  else if (!strcmp (__lc_ctype, "C-SJIS"))
d85 1
a85 1
  else if (!strcmp (__lc_ctype, "C-EUCJP"))
d90 1
a90 1
  else if (!strcmp (__lc_ctype, "C-UTF-8"))
@


1.3
log
@
2004-04-23  Artem B. Bityuckiy  <abitytsky@@softminecorp.com>

        * configure.in: Define _MB_CAPABLE if mb supported.
        * configure: Regenerated.
        * configure.host: Remove manual setting of MB_CAPABLE compiler
        flag.
        * newlib.hin: Add _MB_CAPABLE flag.
        * libc/ctype/iswalpha.c, libc/ctype/iswblank.c: Include <newlib.h>
        and check for _MB_CAPABLE flag instead of MB_CAPABLE.
        * libc/ctype/iswcntrl.c, libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c, libc/ctype/iswspace.c: Ditto.
        * libc/ctype/jp2uc.c: Ditto.
        * libc/ctype/towlower.c, libc/ctype/towupper.c: Ditto.
        * libc/locale/locale.c: Ditto
        * libc/machine/powerpc/vfscanf.c: Ditto
        * libc/stdio/vfprintf.c, libc/stdio/vfscanf.c: Ditto
        * libc/stdlib/mblen.c: Ditto
        * libc/stdlib/mblen_r.c, libc/stdlib/mbrlen.c: Ditto
        * libc/stdlib/mbrtowc.c, libc/stdlib/mbsrtowcs.c: Ditto
        * libc/stdlib/mbstowcs.c, libc/stdlib/mbtowc.c: Ditto
        * libc/stdlib/mbtowc_r.c, libc/stdlib/wcrtomb.c: Ditto
        * libc/stdlib/wcsrtombs.c, libc/stdlib/wcstombs.c: Ditto
        * libc/stdlib/wctomb.c, libc/sys/linux/intl/dcigettext.c: Ditto
        * libc/sys/linux/intl/explodename.c: Ditto
        * libc/sys/linux/intl/finddomain.c: Ditto
        * libc/sys/linux/intl/l10nflist.c: Ditto
        * libc/sys/linux/intl/loadmsgcat.c: Ditto
        * libc/sys/linux/intl/localealias.c: Ditto
@
text
@d32 1
a32 1
	<<iswprint>>---printable wide-character test
d51 1
a51 1
<<iswprint>> returns non-zero if <[c]> is a printable wide-character.
@


1.2
log
@
2003-07-31  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/iswalpha.c: Fix calls to __jp2uc to pass the
        correct type of conversion when dealing with EUCJP or SJIS.
        * libc/ctype/iswblank.c: Ditto.
        * libc/ctype/iswcntrl.c: Ditto.
        * libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c: Ditto.
        * libc/ctype/iswspace.c: Ditto.
        * libc/ctype/towlower.c: Ditto.
        * libc/ctype/towupper.c: Ditto.
@
text
@d59 1
d65 1
a65 1
#ifdef MB_CAPABLE
d67 1
a67 1
#endif /* MB_CAPABLE */
d78 1
a78 1
#ifdef MB_CAPABLE
d394 1
a394 1
#endif /* MB_CAPABLE */
@


1.1
log
@
2002-09-20  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/Makefile.am: Add new files.
        * libc/ctype/Makefile.in: Regenerated.
        * libc/ctype/ctype.tex: Add new iswxxxx, towxxxx, wctype,
        and wctrans functions to documentation index.
        * libc/ctype/iswalnum.c: New file.
        * libc/ctype/iswalpha.c: Ditto.
        * libc/ctype/iswblank.c: Ditto.
        * libc/ctype/iswcntrl.c: Ditto.
        * libc/ctype/iswctype.c: Ditto.
        * libc/ctype/iswdigit.c: Ditto.
        * libc/ctype/iswgraph.c: Ditto.
        * libc/ctype/iswlower.c: Ditto.
        * libc/ctype/iswprint.c: Ditto.
        * libc/ctype/iswpunct.c: Ditto.
        * libc/ctype/iswspace.c: Ditto.
        * libc/ctype/iswupper.c: Ditto.
        * libc/ctype/iswxdigit.c: Ditto.
        * libc/ctype/jp2uc.c: Ditto.
        * libc/ctype/jp2uc.h: Ditto.
        * libc/ctype/local.h: Ditto.
        * libc/ctype/towctrans.c: Ditto.
        * libc/ctype/towlower.c: Ditto.
        * libc/ctype/towupper.c: Ditto.
        * libc/ctype/utf8alpha.h: Ditto.
        * libc/ctype/utf8print.h: Ditto.
        * libc/ctype/utf8punct.h: Ditto.
        * libc/ctype/wctrans.c: Ditto.
        * libc/ctype/wctype.c: Ditto.
        * libc/locale/locale.c (__lc_ctype): New external array to
        replace static lc_ctype array.
        * libc/stdlib/mbtowc_r.c: Use __lc_ctype to check current lc_ctype
        rather than reentrancy structure's _current_locale field.
        * libc/stdlib/wctomb_r.c: Ditto.
@
text
@d85 1
a85 1
      c = __jp2uc (c, JP_JIS);
d90 1
a90 1
      c = __jp2uc (c, JP_JIS);
@

