head	1.10;
access;
symbols
	cygwin-1_7_35-release:1.10
	cygwin-1_7_34-release:1.10
	newlib-2_2_0:1.10.0.2
	cygwin-1_7_33-release:1.10
	cygwin-1_7_32-release:1.9
	cygwin-1_7_31-release:1.9
	cygwin-1_7_30-release:1.9
	cygwin-1_7_29-release:1.9
	cygwin-1_7_28-release:1.9
	newlib-2_1_0:1.9
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.8
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.6
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	newlib-1_20_0:1.8
	cygwin-1_7_9-release:1.8
	cygwin-1_7_8-release:1.8
	newlib-1_19_0:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.8
	cygwin-1_7_1-release:1.8
	newlib-1_17_0-arc:1.8.0.4
	binutils-arc-20080908-branch:1.8.0.2
	binutils-arc-20080908-branchpoint:1.8
	newlib-1_17_0:1.8
	newlib-1_16_0:1.6
	newlib-1_15_0:1.6
	newlib-csl-coldfire-4_1-32:1.6
	newlib-csl-sourcerygxx-4_1-32:1.6
	newlib-csl-innovasic-fido-3_4_4-33:1.6
	newlib-csl-coldfire-4_1-30:1.6
	newlib-csl-sourcerygxx-4_1-30:1.6
	newlib-csl-coldfire-4_1-28:1.6
	newlib-csl-sourcerygxx-4_1-28:1.6
	newlib-csl-arm-2006q3-27:1.6
	newlib-csl-sourcerygxx-4_1-27:1.6
	newlib-csl-arm-2006q3-26:1.6
	newlib-csl-sourcerygxx-4_1-26:1.6
	newlib-csl-sourcerygxx-4_1-24:1.6
	newlib-csl-sourcerygxx-4_1-23:1.6
	newlib-csl-sourcerygxx-4_1-21:1.6
	newlib-csl-arm-2006q3-21:1.6
	newlib-csl-arm-2006q3-19:1.6
	newlib-csl-sourcerygxx-4_1-19:1.6
	newlib-csl-sourcerygxx-4_1-18:1.6
	newlib-csl-sourcerygxx-3_4_4-25:1.6
	newlib-csl-sourcerygxx-4_1-17:1.6
	cr-0x5f1:1.6.0.6
	newlib-csl-sourcerygxx-4_1-14:1.6
	newlib-csl-sourcerygxx-4_1-13:1.6
	newlib-csl-sourcerygxx-4_1-12:1.6
	newlib-csl-sourcerygxx-4_1-9:1.6
	newlib-csl-sourcerygxx-4_1-8:1.6
	newlib-csl-sourcerygxx-4_1-7:1.6
	newlib-csl-arm-2006q1-6:1.6
	newlib-csl-sourcerygxx-4_1-6:1.6
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.6
	newlib-csl-arm-2005-q1a:1.6
	newlib-1_13_0:1.6
	csl-arm-2004-q3:1.6
	csl-arm-2004-q1a:1.6
	csl-arm-2004-q1:1.6
	newlib-1_12_0:1.6
	csl-arm-2003-q4:1.6
	w32api-2_2:1.6
	mingw-runtime-2_4:1.6
	newlib-1_11_0:1.6
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.2
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2014.10.09.12.24.56;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2013.12.10.18.57.30;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.27.18.44.40;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.26.23.23.15;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.27.18.10.16;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.26.18.11.51;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.25.21.11.58;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.25.20.56.17;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.24.16.25.36;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.48;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.48;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* libc/string/memccpy.c (memccpy): Fix warning about signed-unsigned
	comparison
	* libc/string/memchr.c (memchr): Ditto.
	* libc/string/memrchr.c (memrchr): Ditto.
	* libc/string/memset.c: (memset): Ditto.
	* libc/string/rawmemchr.c (rawmemchr): Ditto.
	* libc/string/local.h (__locale_cjk_lang): Fix "function declaration
	isn't a prototype" warning.
	* libc/string/strcasestr.c (strcasestr): Ditto.
	* libc/string/u_strerr.c (_user_strerror): Fix "unused parameter"
	warnings.
	* libc/string/rawmemchr.c (rawmemchr): Fix comment type
	"// ..." -> "/* ... */".
@
text
@/*
FUNCTION
	<<memset>>---set an area of memory

INDEX
	memset

ANSI_SYNOPSIS
	#include <string.h>
	void *memset(void *<[dst]>, int <[c]>, size_t <[length]>);

TRAD_SYNOPSIS
	#include <string.h>
	void *memset(<[dst]>, <[c]>, <[length]>)
	void *<[dst]>;
	int <[c]>;
	size_t <[length]>;

DESCRIPTION
	This function converts the argument <[c]> into an unsigned
	char and fills the first <[length]> characters of the array
	pointed to by <[dst]> to the value.

RETURNS
	<<memset>> returns the value of <[dst]>.

PORTABILITY
<<memset>> is ANSI C.

    <<memset>> requires no supporting OS subroutines.

QUICKREF
	memset ansi pure
*/

#include <string.h>
#include "local.h"

#define LBLOCKSIZE (sizeof(long))
#define UNALIGNED(X)   ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN) ((LEN) < LBLOCKSIZE)

_PTR
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
  char *s = (char *) m;

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
    {
      if (n--)
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
        {
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
    *s++ = (char) c;

  return m;
}
@


1.9
log
@
2013-12-10  Jeff Johnston  <jjohnstn@@redhat.com>

        * acconfig.h: Add _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL.
        * newlib.hin: Ditto.
        * configure: Regenerate.
        * configure.in: Add setting of _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL.
        * libc/string/local.h: Add check for _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL
        and set __inhibit_loop_to_libcall macro appropriately.
        * libc/string/memmove.c: Use __inhibit_loop_to_libcall macro in
        function declaration.
        * libc/string/memset.c: Ditto.
@
text
@d53 1
a53 1
  int i;
@


1.8
log
@
2008-05-27  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/string/memset.c: Fix documented prototype to remove
        erroneous const attribute on first parameter.
@
text
@d37 1
d44 1
@


1.7
log
@
2008-05-26  Eric Blake  <ebb9@@byu.net>

        Optimize the generic and x86 memset.
        * libc/string/memset.c (memset) [!__OPTIMIZE_SIZE__]:
        Pre-align pointer so unaligned stores aren't penalized.
        * libc/machine/i386/memset.S (memset): [!__OPTIMIZE_SIZE__]:
        Pre-align pointer so unaligned stores aren't penalized.  Prefer
        8-byte over 4-byte alignment.  Reduce register pressure.
@
text
@d10 1
a10 1
	void *memset(const void *<[dst]>, int <[c]>, size_t <[length]>);
@


1.6
log
@* libc/string/memset.c (memset): Fix comment.
@
text
@d25 1
a25 1
	<<memset>> returns the value of <[m]>.
d42 1
a42 1
_PTR 
a47 1
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
d50 1
a50 8
  while (n-- != 0)
    {
      *s++ = (char) c;
    }

  return m;
#else
  char *s = (char *) m;
d57 1
a57 1
  if (!TOO_SMALL (n) && !UNALIGNED (m))
d59 10
a68 2
      /* If we get this far, we know that n is large and m is word-aligned. */
      aligned_addr = (unsigned long*)m;
d72 4
a75 11
      if (LBLOCKSIZE == 4)
        {
          buffer = (d << 8) | d;
          buffer |= (buffer << 16);
        }
      else
        {
          buffer = 0;
          for (i = 0; i < LBLOCKSIZE; i++)
	    buffer = (buffer << 8) | d;
        }
d77 1
d96 2
d99 1
a99 3
    {
      *s++ = (char)d;
    }
a101 1
#endif /* not PREFER_SIZE_OVER_SPEED */
@


1.5
log
@* libc/string/memset.c (memset): Move initialization of 'd' earlier in
function.
@
text
@d62 2
a63 1
  unsigned int d = c & 0xff;
a67 3

      /* To avoid sign extention, copy C to an unsigned variable.  */

@


1.4
log
@* libc/string/memset.c (memset): Minor optimization: Use new 'd' variable,
introduced below, everywhere.
@
text
@d62 1
a68 1
      unsigned int d = c & 0xff;
@


1.3
log
@	* libc/string/memset.c (memset): Make it safe even if
	sizeof (int) = 2.
@
text
@d106 1
a106 1
      *s++ = (char)c;
@


1.2
log
@
2000-08-23  Werner Almesberger  <Werner.Almesberger@@epfl.ch>

        * libc/stdio/stdio.c (__swrite): declare "oldmode" only if it's
        used later (ifdef __SCLE)
        * libc/stdio/vfscanf.c (__svfscanf): declare "state" only if it's
        used later (ifdef MB_CAPABLE)
        * libc/string/memset.c (memset): removed unused variables "count"
        and "unaligned_addr"
        * libc/locale/locale.c (_setlocale_r): declare "lc_ctype" and
        "last_lc_ctype" only of they're used later (ifdef MB_CAPABLE)
        * libc/unix/getpwent.c (getpwnam): removed unused variables "uid"
        and "gid"
@
text
@d67 3
d72 1
a72 1
      /* Store C into each char sized location in BUFFER so that
a73 1
      c &= 0xff;
d76 1
a76 1
          buffer = (c << 8) | c;
d83 1
a83 1
	    buffer = (buffer << 8) | c;
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
  int count, i;
a61 1
  unsigned char *unaligned_addr;
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
