head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	newlib-2_2_0:1.4.0.6
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_28-release:1.4
	newlib-2_1_0:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.4
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.2
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	newlib-1_18_0:1.2
	cygwin-1_7_1-release:1.2
	newlib-1_17_0-arc:1.2.0.10
	binutils-arc-20080908-branch:1.2.0.8
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	cr-0x5f1:1.2.0.6
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.05.25.18.41.10;	author ericb;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.10.16.48.18;	author ericb;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.28.21.21.07;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.24.23.44.37;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@strerror: allow user hook to comply with POSIX rules

* libc/string/strerror.c (strerror): Split body into...
(_strerror_r): ...new reentrant function.
* libc/string/u_strerr.c (_user_strerror): Update signature.
* libc/include/stdio.h (_strerror_r): New prototype.
* libc/posix/collate.c (__collate_err): Adjust callers.
* libc/stdio/perror.c (_perror_r): Likewise.
* libc/string/strerror_r.c (strerror_r): Likewise.
* libc/string/xpg_strerror_r.c (__xpg_strerror_r): Likewise.
@
text
@/* GNU variant of strerror_r. */
/*
FUNCTION
	<<strerror_r>>---convert error number to string and copy to buffer

INDEX
	strerror_r

ANSI_SYNOPSIS
	#include <string.h>
	#ifdef _GNU_SOURCE
	char *strerror_r(int <[errnum]>, char *<[buffer]>, size_t <[n]>);
	#else
	int strerror_r(int <[errnum]>, char *<[buffer]>, size_t <[n]>);
	#endif

TRAD_SYNOPSIS
	#include <string.h>
	char *strerror_r(<[errnum]>, <[buffer]>, <[n]>)
	int <[errnum]>;
	char *<[buffer]>;
	size_t <[n]>;

DESCRIPTION
<<strerror_r>> converts the error number <[errnum]> into a
string and copies the result into the supplied <[buffer]> for
a length up to <[n]>, including the NUL terminator. The value of
<[errnum]> is usually a copy of <<errno>>.  If <<errnum>> is not a known
error number, the result is the empty string.

See <<strerror>> for how strings are mapped to <<errnum>>.

RETURNS
There are two variants: the GNU version always returns a NUL-terminated
string, which is <[buffer]> if all went well, but which is another
pointer if <[n]> was too small (leaving <[buffer]> untouched).  If the
return is not <[buffer]>, your application must not modify that string.
The POSIX version returns 0 on success, <[EINVAL]> if <<errnum>> was not
recognized, and <[ERANGE]> if <[n]> was too small.  The variant chosen
depends on macros that you define before inclusion of <<string.h>>.

PORTABILITY
<<strerror_r>> with a <[char *]> result is a GNU extension.
<<strerror_r>> with an <[int]> result is required by POSIX 2001.
This function is compliant only if <<_user_strerror>> is not provided,
or if it is thread-safe and uses separate storage according to whether
the second argument of that function is non-zero.  For more details
on <<_user_strerror>>, see the <<strerror>> documentation.

POSIX states that the contents of <[buf]> are unspecified on error,
although this implementation guarantees a NUL-terminated string for
all except <[n]> of 0.

POSIX recommends that unknown <[errnum]> result in a message including
that value, however it is not a requirement and this implementation
provides only an empty string (unless you provide <<_user_strerror>>).
POSIX also recommends that unknown <[errnum]> fail with EINVAL even
when providing such a message, however it is not a requirement and
this implementation will return success if <<_user_strerror>> provided
a non-empty alternate string without assigning into its third argument.

<<strerror_r>> requires no supporting OS subroutines.

*/

#undef __STRICT_ANSI__
#define _GNU_SOURCE
#include <errno.h>
#include <string.h>
#undef strerror_r

/* For backwards-compatible linking, this must be the GNU signature;
   see xpg_strerror_r.c for the POSIX version.  */
char *
_DEFUN (strerror_r, (errnum, buffer, n),
	int errnum _AND
	char *buffer _AND
	size_t n)
{
  char *error = _strerror_r (_REENT, errnum, 1, NULL);

  if (strlen (error) >= n)
    return error;
  return strcpy (buffer, error);
}
@


1.3
log
@strerror_r: provide POSIX implementation

* libc/include/string.h (strerror_r): Update declaration.
* libc/string/strerror.c (strerror): Update documentation.
* libc/string/strerror_r.c (strerror_r): Always return
NUL-terminated string; don't overwrite too-short buf.
* libc/string/xpg_strerror_r.c (__xpg_strerror_r): Implement POSIX
variant.
* libc/string/Makefile.am (GENERAL_SOURCES): Build new file.
* libc/string/Makefile.in: Regenerate.
@
text
@d46 3
a48 1
or if it is thread-safe and does not modify <<errno>>.
d60 1
a60 1
a non-empty alternate string.
d80 1
a80 1
  char *error = strerror (errnum);
@


1.2
log
@
2005-10-28  Bob Wilson  <bob.wilson@@acm.org>

        * libc/misc/unctrl.c: Replace FUNCTION description.
        * libc/signal/signal.c: Remove documentation for raise and  _raise_r.
        * libc/stdio/getdelim.c: Fix spelling errors.
        * libc/stdio/getw.c: Put RETURNS on a separate line.  Fix  punctuation.
        * libc/stdio/putw.c: Likewise.
        * libc/stdlib/a64l.c: Fix formatting, spelling and  punctuation in
        documentation.
        * libc/stdlib/assert.c: Do not capitalize FUNCTION description.
        * libc/stdlib/efgcvt.c: Add spaces to FUNCTION description.
        * libc/stdlib/envlock.c: Use em-dash in FUNCTION description.
        * libc/stdlib/mlock.c: Likewise.
        * libc/stdlib/mstats.c: Likewise.
        * libc/time/tzlock.c: Likewise.
        * libc/stdlib/rand.c: Use "multi-threaded" and "thread-safe"  in NOTES.
        * libc/stdlib/rand48.c: Remove extra space in FUNCTION  description
        and hyphenate "pseudo-random".
        * libc/string/bcmp.c: Remove extra blank lines in  documentation.
        * libc/string/strncat.c: Likewise.
        * libc/string/memchr.c: Remove extra ">" character in  documentation.
        * libc/string/strcspn.c: Use "characters" instead of "chars".
        * libc/string/strpbrk.c: Likewise.
        * libc/string/strerror_r.c: Capitalize "GNU".
        * libc/string/strnlen.c: Likewise.
        * libc/string/strtok.c: Fix formatting, spelling and  punctuation in
        documentation.  Use "multi-threaded" and "thread-safe" in  NOTES.
        * libc/string/wcscat.c: Split PORTABILITY into two paragraphs.
        * libc/string/wcschr.c: Likewise.
        * libc/string/wcscmp.c: Likewise.
        * libc/string/wcscpy.c: Likewise.
        * libc/string/wcscspn.c: Likewise.
        * libc/string/wcslen.c: Likewise.
        * libc/string/wcsncat.c: Likewise.
        * libc/string/wcsncmp.c: Likewise.
        * libc/string/wcsncpy.c: Likewise.
        * libc/string/wcsnlen.c: Likewise.
        * libc/string/wcspbrk.c: Likewise.
        * libc/string/wcsrchr.c: Likewise.
        * libc/string/wcsspn.c: Likewise.
        * libc/string/wmemchr.c: Likewise.
        * libc/string/wmemcmp.c: Likewise.
        * libc/string/wmemcpy.c: Likewise.
        * libc/string/wmemset.c: Likewise.
        * libc/string/wmemmove.c: Likewise.  Also fix FUNCTION  description.
        * libc/string/wcswidth.c: Formatting and punctuation in  documentation.
        * libc/string/wcwidth.c: Likewise.
        * libm/common/s_modf.c: Remove extra period from documentation.
        * libm/math/s_isnan.c: Fix formatting, grammar and  punctuation in
        documentation.
        * libm/mathfp/s_isnan.c: Likewise.
        * libm/math/s_ldexp.c: Fix punctuation.
        * libm/mathfp/s_ldexp.c: Likewise.
        * libm/math/w_log.c: Likewise.
        * libm/mathfp/s_logarithm.c: Likewise.
        * libm/math/w_j0.c: Add spaces to FUNCTION description.
        * libm/mathfp/w_jn.c: Likewise.
@
text
@d1 1
d11 1
d13 3
d27 2
a28 2
a length up to <[n]>, including the NUL terminator. The value of 
<[errnum]> is usually a copy of <<errno>>.  If <<errnum>> is not a known 
d34 7
a40 2
This function returns a pointer to a string.  Your application must
not modify that string.
d43 16
a58 1
<<strerror_r>> is a GNU extension.
d65 1
d68 1
d70 2
d78 1
a78 2
  char *error;
  error = strerror (errnum);
d80 3
a82 1
  return strncpy (buffer, (const char *)error, n);
@


1.1
log
@
2002-05-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h: Add strnlen and strerror_r prototypes.
        * libc/string/Makefile.am: Add strnlen.c and strerror_r.c support.
        * libc/string/Makefile.in: Regenerated.
        * libc/string/strerror_r.c: New file.
        * libc/string/strnlen.c: New file.
        * libc/sys/linux/Makefile.am: Add rename.c.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/rename.c: New file to override default rename.
@
text
@d33 1
a33 1
<<strerror_r>> is a gnu extension.
@

