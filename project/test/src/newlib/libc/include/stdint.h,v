head	1.19;
access;
symbols
	cygwin-1_7_35-release:1.19
	cygwin-1_7_34-release:1.19
	newlib-2_2_0:1.19.0.2
	cygwin-1_7_33-release:1.19
	cygwin-1_7_32-release:1.18
	cygwin-1_7_31-release:1.18
	cygwin-1_7_30-release:1.17
	cygwin-1_7_29-release:1.17
	cygwin-1_7_28-release:1.17
	newlib-2_1_0:1.17
	cygwin-1_7_27-release:1.16
	cygwin-1_7_26-release:1.16
	cygwin-1_7_25-release:1.16
	cygwin-1_7_24-release:1.16
	cygwin-1_7_23-release:1.16
	cygwin-1_7_22-release:1.16
	cygwin-1_7_21-release:1.16
	cygwin-1_7_20-release:1.16
	cygwin-1_7_19-release:1.16
	cygwin-64bit-postmerge:1.16
	cygwin-64bit-premerge-branch:1.16.0.2
	cygwin-64bit-premerge:1.16
	cygwin-1_7_18-release:1.16
	newlib-2_0_0:1.16
	cygwin-1_7_17-release:1.16
	cygwin-64bit-branch:1.15.0.2
	cygwin-1_7_16-release:1.15
	cygwin-1_7_15-release:1.15
	cygwin-1_7_14_2-release:1.15
	cygwin-1_7_14-release:1.15
	cygwin-1_7_12-release:1.15
	cygwin-1_7_11-release:1.15
	cygwin-1_7_10-release:1.15
	newlib-1_20_0:1.15
	cygwin-1_7_9-release:1.15
	cygwin-1_7_8-release:1.15
	newlib-1_19_0:1.15
	cygwin-1_7_7-release:1.15
	cygwin-1_7_5-release:1.15
	cygwin-1_7_4-release:1.15
	cygwin-1_7_3-release:1.15
	cygwin-1_7_2-release:1.15
	newlib-1_18_0:1.15
	cygwin-1_7_1-release:1.15
	newlib-1_17_0-arc:1.12.0.2
	binutils-arc-20080908-branch:1.11.0.2
	binutils-arc-20080908-branchpoint:1.11
	newlib-1_17_0:1.12
	newlib-1_16_0:1.10
	newlib-1_15_0:1.10
	newlib-csl-coldfire-4_1-32:1.9
	newlib-csl-sourcerygxx-4_1-32:1.9
	newlib-csl-innovasic-fido-3_4_4-33:1.9
	newlib-csl-coldfire-4_1-30:1.9
	newlib-csl-sourcerygxx-4_1-30:1.9
	newlib-csl-coldfire-4_1-28:1.9
	newlib-csl-sourcerygxx-4_1-28:1.9
	newlib-csl-arm-2006q3-27:1.9
	newlib-csl-sourcerygxx-4_1-27:1.9
	newlib-csl-arm-2006q3-26:1.9
	newlib-csl-sourcerygxx-4_1-26:1.9
	newlib-csl-sourcerygxx-4_1-24:1.9
	newlib-csl-sourcerygxx-4_1-23:1.9
	newlib-csl-sourcerygxx-4_1-21:1.9
	newlib-csl-arm-2006q3-21:1.9
	newlib-csl-arm-2006q3-19:1.9
	newlib-csl-sourcerygxx-4_1-19:1.9
	newlib-csl-sourcerygxx-4_1-18:1.9
	newlib-csl-sourcerygxx-3_4_4-25:1.10
	newlib-csl-sourcerygxx-4_1-17:1.9
	cr-0x5f1:1.9.0.6
	newlib-csl-sourcerygxx-4_1-14:1.9
	newlib-csl-sourcerygxx-4_1-13:1.9
	newlib-csl-sourcerygxx-4_1-12:1.9
	newlib-csl-sourcerygxx-4_1-9:1.9
	newlib-csl-sourcerygxx-4_1-8:1.9
	newlib-csl-sourcerygxx-4_1-7:1.9
	newlib-csl-arm-2006q1-6:1.9
	newlib-csl-sourcerygxx-4_1-6:1.9
	newlib-csl-sourcerygxx-4_1-5:1.9
	newlib-csl-sourcerygxx-4_1-4:1.9
	newlib-autotools-branch:1.9.0.4
	newlib-csl-20060320-branch:1.9.0.2
	newlib-csl-20060320-branchpoint:1.9
	newlib-1_14_0:1.9;
locks; strict;
comment	@ * @;


1.19
date	2014.10.09.15.57.50;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.12.17.02.11;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2013.12.03.16.04.41;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.16.18.45.23;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.24.21.55.07;	author jjohnstn;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2009.04.16.18.29.51;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.19.22.02.06;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.10.21.27.58;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.02.14.52.55;	author mmitchel;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.16.21.39.43;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.16.19.03.12;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.01.22.26.21;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.06.19.46.21;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.04.21.02.59;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.03.17.02.48;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.27.20.49.53;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.20.21.21.51;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.20.19.33.58;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.19.22.02.23;	author jjohnstn;	state Exp;
branches;
next	;

1.15.2.1
date	2012.10.26.09.27.35;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.19
log
@
2014-10-09  Sebastian Huber  <sebastian.huber@@embedded-brains.de>

        * libc/include/stdint.h: Include <sys/_intsup.h>.
        (__STDINT_EXP): Delete.
        (__have_long32): Likewise.
        (__have_long64): Likewise.
        (__have_longlong64): Likewise.
        * libc/include/sys/_intsup.h: New file.
        (__STDINT_EXP): Move from libc/include/stdint.h.
        (__have_long32): Likewise.
        (__have_long64): Likewise.
        (__have_longlong64): Likewise.
        * libc/include/inttypes.h: Include <sys/_intsup.h>.
        (__INTTYPES_EXP): Delete and use __STDINT_EXP() instead.
@
text
@/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

#ifndef _STDINT_H
#define _STDINT_H

#include <machine/_default_types.h>
#include <sys/_intsup.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef ___int8_t_defined
typedef __int8_t int8_t ;
typedef __uint8_t uint8_t ;
#define __int8_t_defined 1
#endif

#ifdef ___int_least8_t_defined
typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1
#endif

#ifdef ___int16_t_defined
typedef __int16_t int16_t ;
typedef __uint16_t uint16_t ;
#define __int16_t_defined 1
#endif

#ifdef ___int_least16_t_defined
typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1
#endif

#ifdef ___int32_t_defined
typedef __int32_t int32_t ;
typedef __uint32_t uint32_t ;
#define __int32_t_defined 1
#endif

#ifdef ___int_least32_t_defined
typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1
#endif

#ifdef ___int64_t_defined
typedef __int64_t int64_t ;
typedef __uint64_t uint64_t ;
#define __int64_t_defined 1
#endif

#ifdef ___int_least64_t_defined
typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
#endif

/*
 * Fastest minimum-width integer types
 *
 * Assume int to be the fastest type for all types with a width 
 * less than __INT_MAX__ rsp. INT_MAX
 */
#ifdef __INT_FAST8_TYPE__
  typedef __INT_FAST8_TYPE__ int_fast8_t;
  typedef __UINT_FAST8_TYPE__ uint_fast8_t;
#define __int_fast8_t_defined 1
#elif __STDINT_EXP(INT_MAX) >= 0x7f
  typedef signed int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1
#endif

#ifdef __INT_FAST16_TYPE__
  typedef __INT_FAST16_TYPE__ int_fast16_t;
  typedef __UINT_FAST16_TYPE__ uint_fast16_t;
#define __int_fast16_t_defined 1
#elif __STDINT_EXP(INT_MAX) >= 0x7fff
  typedef signed int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1
#endif

#ifdef __INT_FAST32_TYPE__
  typedef __INT_FAST32_TYPE__ int_fast32_t;
  typedef __UINT_FAST32_TYPE__ uint_fast32_t;
#define __int_fast32_t_defined 1
#elif __STDINT_EXP(INT_MAX) >= 0x7fffffff
  typedef signed int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1
#endif

#ifdef __INT_FAST64_TYPE__
  typedef __INT_FAST64_TYPE__ int_fast64_t;
  typedef __UINT_FAST64_TYPE__ uint_fast64_t;
#define __int_fast64_t_defined 1
#elif __STDINT_EXP(INT_MAX) > 0x7fffffff
  typedef signed int int_fast64_t;
  typedef unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
#endif

/*
 * Fall back to [u]int_least<N>_t for [u]int_fast<N>_t types
 * not having been defined, yet.
 * Leave undefined, if [u]int_least<N>_t should not be available.
 */
#if !__int_fast8_t_defined
#if __int_least8_t_defined
  typedef int_least8_t int_fast8_t;
  typedef uint_least8_t uint_fast8_t;
#define __int_fast8_t_defined 1
#endif
#endif

#if !__int_fast16_t_defined
#if __int_least16_t_defined
  typedef int_least16_t int_fast16_t;
  typedef uint_least16_t uint_fast16_t;
#define __int_fast16_t_defined 1
#endif
#endif

#if !__int_fast32_t_defined
#if __int_least32_t_defined
  typedef int_least32_t int_fast32_t;
  typedef uint_least32_t uint_fast32_t;
#define __int_fast32_t_defined 1
#endif
#endif

#if !__int_fast64_t_defined
#if __int_least64_t_defined
  typedef int_least64_t int_fast64_t;
  typedef uint_least64_t uint_fast64_t;
#define __int_fast64_t_defined 1
#endif
#endif

/* Greatest-width integer types */
/* Modern GCCs provide __INTMAX_TYPE__ */
#if defined(__INTMAX_TYPE__)
  typedef __INTMAX_TYPE__ intmax_t;
#elif __have_longlong64
  typedef signed long long intmax_t;
#else
  typedef signed long intmax_t;
#endif

/* Modern GCCs provide __UINTMAX_TYPE__ */
#if defined(__UINTMAX_TYPE__)
  typedef __UINTMAX_TYPE__ uintmax_t;
#elif __have_longlong64
  typedef unsigned long long uintmax_t;
#else
  typedef unsigned long uintmax_t;
#endif

typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;

#ifdef __INTPTR_TYPE__
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX __INTPTR_MAX__
#define UINTPTR_MAX __UINTPTR_MAX__
#elif defined(__PTRDIFF_TYPE__)
#define INTPTR_MAX PTRDIFF_MAX
#define INTPTR_MIN PTRDIFF_MIN
#ifdef __UINTPTR_MAX__
#define UINTPTR_MAX __UINTPTR_MAX__
#else
#define UINTPTR_MAX (2UL * PTRDIFF_MAX + 1)
#endif
#else
/*
 * Fallback to hardcoded values, 
 * should be valid on cpu's with 32bit int/32bit void*
 */
#define INTPTR_MAX __STDINT_EXP(LONG_MAX)
#define INTPTR_MIN (-__STDINT_EXP(LONG_MAX) - 1)
#define UINTPTR_MAX (__STDINT_EXP(LONG_MAX) * 2UL + 1)
#endif

/* Limits of Specified-Width Integer Types */

#ifdef __INT8_MAX__
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX __INT8_MAX__
#define UINT8_MAX __UINT8_MAX__
#elif defined(__int8_t_defined)
#define INT8_MIN 	-128
#define INT8_MAX 	 127
#define UINT8_MAX 	 255
#endif

#ifdef __INT_LEAST8_MAX__
#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
#elif defined(__int_least8_t_defined)
#define INT_LEAST8_MIN 	-128
#define INT_LEAST8_MAX 	 127
#define UINT_LEAST8_MAX	 255
#else
#error required type int_least8_t missing
#endif

#ifdef __INT16_MAX__
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX __INT16_MAX__
#define UINT16_MAX __UINT16_MAX__
#elif defined(__int16_t_defined)
#define INT16_MIN 	-32768
#define INT16_MAX 	 32767
#define UINT16_MAX 	 65535
#endif

#ifdef __INT_LEAST16_MAX__
#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
#elif defined(__int_least16_t_defined)
#define INT_LEAST16_MIN	-32768
#define INT_LEAST16_MAX	 32767
#define UINT_LEAST16_MAX 65535
#else
#error required type int_least16_t missing
#endif

#ifdef __INT32_MAX__
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX __INT32_MAX__
#define UINT32_MAX __UINT32_MAX__
#elif defined(__int32_t_defined)
#if __have_long32
#define INT32_MIN 	 (-2147483647L-1)
#define INT32_MAX 	 2147483647L
#define UINT32_MAX       4294967295UL
#else
#define INT32_MIN 	 (-2147483647-1)
#define INT32_MAX 	 2147483647
#define UINT32_MAX       4294967295U
#endif
#endif

#ifdef __INT_LEAST32_MAX__
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
#elif defined(__int_least32_t_defined)
#if __have_long32
#define INT_LEAST32_MIN  (-2147483647L-1)
#define INT_LEAST32_MAX  2147483647L
#define UINT_LEAST32_MAX 4294967295UL
#else
#define INT_LEAST32_MIN  (-2147483647-1)
#define INT_LEAST32_MAX  2147483647
#define UINT_LEAST32_MAX 4294967295U
#endif
#else
#error required type int_least32_t missing
#endif

#ifdef __INT64_MAX__
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX __INT64_MAX__
#define UINT64_MAX __UINT64_MAX__
#elif defined(__int64_t_defined)
#if __have_long64
#define INT64_MIN 	(-9223372036854775807L-1L)
#define INT64_MAX 	 9223372036854775807L
#define UINT64_MAX 	18446744073709551615U
#elif __have_longlong64
#define INT64_MIN 	(-9223372036854775807LL-1LL)
#define INT64_MAX 	 9223372036854775807LL
#define UINT64_MAX 	18446744073709551615ULL
#endif
#endif

#ifdef __INT_LEAST64_MAX__
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__
#elif defined(__int_least64_t_defined)
#if __have_long64
#define INT_LEAST64_MIN  (-9223372036854775807L-1L)
#define INT_LEAST64_MAX  9223372036854775807L
#define UINT_LEAST64_MAX 18446744073709551615U
#elif __have_longlong64
#define INT_LEAST64_MIN  (-9223372036854775807LL-1LL)
#define INT_LEAST64_MAX  9223372036854775807LL
#define UINT_LEAST64_MAX 18446744073709551615ULL
#endif
#endif

#ifdef __INT_FAST8_MAX__
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX __INT_FAST8_MAX__
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
#elif defined(__int_fast8_t_defined)
#if __STDINT_EXP(INT_MAX) >= 0x7f
#define INT_FAST8_MIN	(-__STDINT_EXP(INT_MAX)-1)
#define INT_FAST8_MAX	__STDINT_EXP(INT_MAX)
#define UINT_FAST8_MAX	(__STDINT_EXP(INT_MAX)*2U+1U)
#else
#define INT_FAST8_MIN	INT_LEAST8_MIN
#define INT_FAST8_MAX	INT_LEAST8_MAX
#define UINT_FAST8_MAX	UINT_LEAST8_MAX
#endif
#endif

#ifdef __INT_FAST16_MAX__
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX __INT_FAST16_MAX__
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
#elif defined(__int_fast16_t_defined)
#if __STDINT_EXP(INT_MAX) >= 0x7fff
#define INT_FAST16_MIN	(-__STDINT_EXP(INT_MAX)-1)
#define INT_FAST16_MAX	__STDINT_EXP(INT_MAX)
#define UINT_FAST16_MAX	(__STDINT_EXP(INT_MAX)*2U+1U)
#else
#define INT_FAST16_MIN	INT_LEAST16_MIN
#define INT_FAST16_MAX	INT_LEAST16_MAX
#define UINT_FAST16_MAX	UINT_LEAST16_MAX
#endif
#endif

#ifdef __INT_FAST32_MAX__
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX __INT_FAST32_MAX__
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
#elif defined(__int_fast32_t_defined)
#if __STDINT_EXP(INT_MAX) >= 0x7fffffff
#define INT_FAST32_MIN	(-__STDINT_EXP(INT_MAX)-1)
#define INT_FAST32_MAX	__STDINT_EXP(INT_MAX)
#define UINT_FAST32_MAX	(__STDINT_EXP(INT_MAX)*2U+1U)
#else
#define INT_FAST32_MIN	INT_LEAST32_MIN
#define INT_FAST32_MAX	INT_LEAST32_MAX
#define UINT_FAST32_MAX	UINT_LEAST32_MAX
#endif
#endif

#ifdef __INT_FAST64_MAX__
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX __INT_FAST64_MAX__
#define UINT_FAST64_MAX __UINT_FAST64_MAX__
#elif defined(__int_fast64_t_defined)
#if __STDINT_EXP(INT_MAX) > 0x7fffffff
#define INT_FAST64_MIN	(-__STDINT_EXP(INT_MAX)-1)
#define INT_FAST64_MAX	__STDINT_EXP(INT_MAX)
#define UINT_FAST64_MAX	(__STDINT_EXP(INT_MAX)*2U+1U)
#else
#define INT_FAST64_MIN	INT_LEAST64_MIN
#define INT_FAST64_MAX	INT_LEAST64_MAX
#define UINT_FAST64_MAX	UINT_LEAST64_MAX
#endif
#endif

#ifdef __INTMAX_MAX__
#define INTMAX_MAX __INTMAX_MAX__
#define INTMAX_MIN (-INTMAX_MAX - 1)
#elif defined(__INTMAX_TYPE__)
/* All relevant GCC versions prefer long to long long for intmax_t.  */
#define INTMAX_MAX INT64_MAX
#define INTMAX_MIN INT64_MIN
#endif

#ifdef __UINTMAX_MAX__
#define UINTMAX_MAX __UINTMAX_MAX__
#elif defined(__UINTMAX_TYPE__)
/* All relevant GCC versions prefer long to long long for intmax_t.  */
#define UINTMAX_MAX UINT64_MAX
#endif

/* This must match size_t in stddef.h, currently long unsigned int */
#ifdef __SIZE_MAX__
#define SIZE_MAX __SIZE_MAX__
#else
#define SIZE_MAX (__STDINT_EXP(LONG_MAX) * 2UL + 1)
#endif

/* This must match sig_atomic_t in <signal.h> (currently int) */
#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)

/* This must match ptrdiff_t  in <stddef.h> (currently long int) */
#ifdef __PTRDIFF_MAX__
#define PTRDIFF_MAX __PTRDIFF_MAX__
#else
#define PTRDIFF_MAX __STDINT_EXP(LONG_MAX)
#endif
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)

/* This must match definition in <wchar.h> */
#ifndef WCHAR_MIN
#ifdef __WCHAR_MIN__
#define WCHAR_MIN __WCHAR_MIN__
#elif defined(__WCHAR_UNSIGNED__) || (L'\0' - 1 > 0)
#define WCHAR_MIN (0 + L'\0')
#else
#define WCHAR_MIN (-0x7fffffff - 1 + L'\0')
#endif
#endif

/* This must match definition in <wchar.h> */
#ifndef WCHAR_MAX
#ifdef __WCHAR_MAX__
#define WCHAR_MAX __WCHAR_MAX__
#elif defined(__WCHAR_UNSIGNED__) || (L'\0' - 1 > 0)
#define WCHAR_MAX (0xffffffffu + L'\0')
#else
#define WCHAR_MAX (0x7fffffff + L'\0')
#endif
#endif

/* wint_t is unsigned int on almost all GCC targets.  */
#ifdef __WINT_MAX__
#define WINT_MAX __WINT_MAX__
#else
#define WINT_MAX (__STDINT_EXP(INT_MAX) * 2U + 1U)
#endif
#ifdef __WINT_MIN__
#define WINT_MIN __WINT_MIN__
#else
#define WINT_MIN 0U
#endif

/** Macros for minimum-width integer constant expressions */
#ifdef __INT8_C
#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
#else
#define INT8_C(x)	x
#if __STDINT_EXP(INT_MAX) > 0x7f
#define UINT8_C(x)	x
#else
#define UINT8_C(x)	x##U
#endif
#endif

#ifdef __INT16_C
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
#else
#define INT16_C(x)	x
#if __STDINT_EXP(INT_MAX) > 0x7fff
#define UINT16_C(x)	x
#else
#define UINT16_C(x)	x##U
#endif
#endif

#ifdef __INT32_C
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
#else
#if __have_long32
#define INT32_C(x)	x##L
#define UINT32_C(x)	x##UL
#else
#define INT32_C(x)	x
#define UINT32_C(x)	x##U
#endif
#endif

#ifdef __INT64_C
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
#else
#if __int64_t_defined
#if __have_long64
#define INT64_C(x)	x##L
#define UINT64_C(x)	x##UL
#else
#define INT64_C(x)	x##LL
#define UINT64_C(x)	x##ULL
#endif
#endif
#endif

/** Macros for greatest-width integer constant expression */
#ifdef __INTMAX_C
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
#else
#if __have_long64
#define INTMAX_C(x)	x##L
#define UINTMAX_C(x)	x##UL
#else
#define INTMAX_C(x)	x##LL
#define UINTMAX_C(x)	x##ULL
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif /* _STDINT_H */
@


1.18
log
@	* libc/include/stdint.h (WCHAR_MIN): Copy definition from wchar.h.
	(WCHAR_MAX): Ditto.
	* libc/include/wchar.h (WCHAR_MIN): Add comment.
	(WCHAR_MAX): Ditto.
@
text
@d13 1
a18 22
#if __GNUC_PREREQ (3, 2)
/* gcc > 3.2 implicitly defines the values we are interested */
#define __STDINT_EXP(x) __##x##__
#else
#define __STDINT_EXP(x) x
#include <limits.h>
#endif

/* Check if "long long" is 64bit wide */
/* Modern GCCs provide __LONG_LONG_MAX__, SUSv3 wants LLONG_MAX */
#if ( defined(__LONG_LONG_MAX__) && (__LONG_LONG_MAX__ > 0x7fffffff) ) \
  || ( defined(LLONG_MAX) && (LLONG_MAX > 0x7fffffff) )
#define __have_longlong64 1
#endif

/* Check if "long" is 64bit or 32bit wide */
#if __STDINT_EXP(LONG_MAX) > 0x7fffffff
#define __have_long64 1
#elif __STDINT_EXP(LONG_MAX) == 0x7fffffff && !defined(__SPU__)
#define __have_long32 1
#endif

@


1.17
log
@	* libc/include/machine/_default_types.h: Move extern "C" after
	header includes.  Include <sys/features.h> for
	__GNUC_PREREQ__().
	(__u?int.*_t): Define via GCC provided __U?INT.*_TYPE__ if
	available.
	(__intptr_t): Define.
	(__uintptr_t): Likewise.
	* libc/include/stdint.h: Include <machine/_default_types.h>
	instead of <_ansi.h>.
	(u?int.*_t): Define via __u?int.*_t provided by
	<machine/_default_types.h>.
	(u?int_fast.*_t): Define via GCC provided
	__U?INT_FAST.*_TYPE__ if available.
	(U?INT.*(MIN|MAX)): Define via GCC provided __U?INT.*(MIN|MAX)__
	if available.
	(U?INT.*_C): Define via GCC provided __U?INT.*_C if available.
	* libc/include/sys/cdefs.h: Use <machine/_default_types.h>
	instead of <stdint.h>.
	* libc/sys/rtems/sys/cpuset.h: Likewise.
	* libc/sys/rtems/machine/_types.h: Include <stdint.h> for
	FreeBSD compatibility.
@
text
@d426 13
d441 4
a445 2
#ifdef __WCHAR_MIN__
#define WCHAR_MIN __WCHAR_MIN__
@


1.16
log
@	* libc/include/sys/features.h (__GNUC_PREREQ): Define.  Use
	throughout in place of explicit GNUC version checks.
	* libc/include/_ansi.h (_NOINLINE): Define.
	(_NOINLINE_STATIC): Define.
	* libc/stdio/vfprintf.c (__sbprintf): Define _NOINLINE_STATIC.
@
text
@d12 1
a12 1
#include <_ansi.h>
d40 3
a42 3
#if __STDINT_EXP(SCHAR_MAX) == 0x7f
typedef signed char int8_t ;
typedef unsigned char uint8_t ;
d46 3
a48 3
#if __int8_t_defined
typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
d52 3
a54 11
#if __STDINT_EXP(SHRT_MAX) == 0x7fff
typedef signed short int16_t;
typedef unsigned short uint16_t;
#define __int16_t_defined 1
#elif __STDINT_EXP(INT_MAX) == 0x7fff
typedef signed int int16_t;
typedef unsigned int uint16_t;
#define __int16_t_defined 1
#elif __STDINT_EXP(SCHAR_MAX) == 0x7fff
typedef signed char int16_t;
typedef unsigned char uint16_t;
d58 3
a60 3
#if __int16_t_defined
typedef int16_t   	int_least16_t;
typedef uint16_t 	uint_least16_t;
a61 6

#if !__int_least8_t_defined
typedef int16_t	   	int_least8_t;
typedef uint16_t  	uint_least8_t;
#define __int_least8_t_defined 1
#endif
d64 3
a66 15
#if __have_long32
typedef signed long int32_t;
typedef unsigned long uint32_t;
#define __int32_t_defined 1
#elif __STDINT_EXP(INT_MAX) == 0x7fffffffL
typedef signed int int32_t;
typedef unsigned int uint32_t;
#define __int32_t_defined 1
#elif __STDINT_EXP(SHRT_MAX) == 0x7fffffffL
typedef signed short int32_t;
typedef unsigned short uint32_t;
#define __int32_t_defined 1
#elif __STDINT_EXP(SCHAR_MAX) == 0x7fffffffL
typedef signed char int32_t;
typedef unsigned char uint32_t;
d70 3
a72 3
#if __int32_t_defined
typedef int32_t   	int_least32_t;
typedef uint32_t 	uint_least32_t;
a73 12

#if !__int_least8_t_defined
typedef int32_t	   	int_least8_t;
typedef uint32_t  	uint_least8_t;
#define __int_least8_t_defined 1
#endif

#if !__int_least16_t_defined
typedef int32_t	   	int_least16_t;
typedef uint32_t  	uint_least16_t;
#define __int_least16_t_defined 1
#endif
d76 3
a78 11
#if __have_long64
typedef signed long int64_t;
typedef unsigned long uint64_t;
#define __int64_t_defined 1
#elif __have_longlong64
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#define __int64_t_defined 1
#elif  __STDINT_EXP(INT_MAX) > 0x7fffffff
typedef signed int int64_t;
typedef unsigned int uint64_t;
d82 3
a84 3
#if __int64_t_defined
typedef int64_t   	int_least64_t;
typedef uint64_t 	uint_least64_t;
a85 18

#if !__int_least8_t_defined
typedef int64_t	   	int_least8_t;
typedef uint64_t  	uint_least8_t;
#define __int_least8_t_defined 1
#endif

#if !__int_least16_t_defined
typedef int64_t	   	int_least16_t;
typedef uint64_t  	uint_least16_t;
#define __int_least16_t_defined 1
#endif

#if !__int_least32_t_defined
typedef int64_t	   	int_least32_t;
typedef uint64_t  	uint_least32_t;
#define __int_least32_t_defined 1
#endif
d94 5
a98 1
#if __STDINT_EXP(INT_MAX) >= 0x7f
d104 5
a108 1
#if __STDINT_EXP(INT_MAX) >= 0x7fff
d114 5
a118 1
#if __STDINT_EXP(INT_MAX) >= 0x7fffffff
d124 5
a128 1
#if __STDINT_EXP(INT_MAX) > 0x7fffffff
d190 8
a197 7
/*
 * GCC doesn't provide an appropriate macro for [u]intptr_t
 * For now, use __PTRDIFF_TYPE__
 */
#if defined(__PTRDIFF_TYPE__)
typedef signed __PTRDIFF_TYPE__ intptr_t;
typedef unsigned __PTRDIFF_TYPE__ uintptr_t;
a209 2
typedef signed long intptr_t;
typedef unsigned long uintptr_t;
d217 5
a221 1
#if __int8_t_defined
d227 5
a231 1
#if __int_least8_t_defined
d239 5
a243 1
#if __int16_t_defined
d249 5
a253 1
#if __int_least16_t_defined
d261 5
a265 1
#if __int32_t_defined
d277 5
a281 1
#if __int_least32_t_defined
d295 5
a299 1
#if __int64_t_defined
d311 5
a315 1
#if __int_least64_t_defined
d327 5
a331 1
#if __int_fast8_t_defined
d343 5
a347 1
#if __int_fast16_t_defined
d359 5
a363 1
#if __int_fast32_t_defined
d375 5
a379 1
#if __int_fast64_t_defined
d446 4
d456 1
d458 4
d468 1
d470 4
d481 1
d483 4
d496 1
d499 4
d510 1
@


1.15
log
@
2009-04-24  Joseph Myers  <joseph@@codesourcery.com>

	* libc/include/stdint.h (UINTPTR_MAX): Define to __UINTPTR_MAX__
	if __UINTPTR_MAX__ defined.
@
text
@d12 2
d18 1
a18 3
#if defined(__GNUC__) && \
  ( (__GNUC__ >= 4) || \
    ( (__GNUC__ >= 3) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ > 2) ) )
@


1.15.2.1
log
@Pull in changes from HEAD
@
text
@a11 2
#include <_ansi.h>

d16 3
a18 1
#if __GNUC_PREREQ (3, 2)
@


1.14
log
@
2009-04-16  Hans-Peter Nilsson  <hp@@axis.com>

        * libc/include/stdint.h (INTPTR_MIN, INTPTR_MAX, UINTPTR_MAX): Define.
@
text
@d247 3
d251 1
@


1.13
log
@
2009-01-19  Neal H. Walfield  <neal@@gnu.org>

        * libc/include/stdint.h (INT64_C, UINT64_C, INTMAX_C, UINTMAX_C)
        [__have_long64 && __have_longlong64]: Use L and UL, not LL and ULL.
        * libc/include/inttypes.h (__PRI64, __SCN64, __PRIMAX, __SCNMAX,
        __PRIPTR, __SCNPTR) [__have_long64 && __have_longlong64]: Use l,
        not ll.
@
text
@d245 3
d255 3
@


1.12
log
@
2008-12-10  Joseph Myers  <joseph@@codesourcery.com>

        * libc/include/stdint.h (INT32_MIN, INT32_MAX, UINT32_MAX,
        INT_LEAST32_MIN, INT_LEAST32_MAX, UINT_LEAST32_MAX): Define to
        constants with "long" types where appropriate.
        (INT_FAST8_MIN, INT_FAST8_MAX, UINT_FAST8_MAX, INT_FAST16_MIN,
        INT_FAST16_MAX, UINT_FAST16_MAX, INT_FAST32_MIN, INT_FAST32_MAX,
        UINT_FAST32_MAX, INT_FAST64_MIN, INT_FAST64_MAX, UINT_FAST64_MAX):
        Correct to match logic for defining corresponding types.
        (INTMAX_MAX, INTMAX_MIN, UINTMAX_MAX): Define.
        (SIZE_MAX): Define using __SIZE_MAX__ if available.
        (PTRDIFF_MAX): Define using __PTRDIFF_MAX__ if available.
        (PTRDIFF_MIN): Define in terms of PTRDIFF_MAX.
        (WCHAR_MAX, WCHAR_MIN, WINT_MAX, WINT_MIN): Define.
        (UINT8_C, UINT16_C): Define to give signed values if corresponding
        types would promote to int.
@
text
@d460 4
a463 1
#if __have_longlong64
a465 3
#else
#define INT64_C(x)	x##L
#define UINT64_C(x)	x##UL
d470 4
a473 1
#if __have_longlong64
a475 3
#else
#define INTMAX_C(x)	x##L
#define UINTMAX_C(x)	x##UL
@


1.11
log
@	* libc/include/stdint.h (SIZE_MIN): Remove.
	(SIZE_MAX): Define.
	* testsuite/newlib.stdlib/stdlib.exp: New.
	* testsuite/newlib.stdlib/size_max.c: Likewise.
@
text
@a8 4
/*
 * @@todo - Add support for wint_t types.
 */

d285 5
d294 1
d297 5
d305 1
d335 9
a343 3
#define INT_FAST8_MIN	INT8_MIN
#define INT_FAST8_MAX	INT8_MAX
#define UINT_FAST8_MAX	UINT8_MAX
d347 9
a355 3
#define INT_FAST16_MIN	INT16_MIN
#define INT_FAST16_MAX	INT16_MAX
#define UINT_FAST16_MAX	UINT16_MAX
d359 9
a367 3
#define INT_FAST32_MIN	INT32_MIN
#define INT_FAST32_MAX	INT32_MAX
#define UINT_FAST32_MAX	UINT32_MAX
d371 25
a395 3
#define INT_FAST64_MIN	INT64_MIN
#define INT_FAST64_MAX	INT64_MAX
#define UINT_FAST64_MAX	UINT64_MAX
d399 3
d403 1
d410 3
a412 1
#define PTRDIFF_MIN (-__STDINT_EXP(LONG_MAX) - 1L)
d414 21
d438 3
d442 1
d445 3
d449 1
@


1.10
log
@
2006-08-16  Joel Schopp  <jschopp@@austin.ibm.com>

        * configure.host: Add spu support.
        * libc/include/stdint.h: Ditto.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/include/sys/config.h: Ditto.
        * libc/include/sys/types.h: Ditto.
        * libc/machine/spu/Makefile.am: New file.
        * libc/machine/spu/Makefile.in: Ditto.
        * libc/machine/spu/aclocal.m4: Ditto.
        * libc/machine/spu/configure: Ditto.
        * libc/machine/spu/configure.in: Ditto.
        * libc/machine/spu/memcpy.c: Ditto.
        * libc/machine/spu/setjmp.S: Ditto.
@
text
@d351 1
a351 2
#define SIZE_MIN (-__STDINT_EXP(LONG_MAX) - 1L)
#define SIZE_MAX __STDINT_EXP(LONG_MAX)
@


1.9
log
@
2005-12-16  Ralf Corsepius <ralf.corsepius@@rtems.org>

	* libc/include/stdint.h: Prefer long over int for int32_t.
	Use __have_long32 to set up int32_t.
	* libc/include/inttypes.h: Use "#if xxx" instead of "#ifdef xxx"
	(Sync with stdint.h).
@
text
@d40 1
a40 1
#elif __STDINT_EXP(LONG_MAX) == 0x7fffffff
@


1.8
log
@
2005-11-01  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/stdint.h: Cleanup #if vs. #ifdef.
@
text
@d82 5
a86 1
#if __STDINT_EXP(INT_MAX) == 0x7fffffffL
a89 4
#elif __STDINT_EXP(LONG_MAX) == 0x7fffffffL
typedef signed long int32_t;
typedef unsigned long uint32_t;
#define __int32_t_defined 1
@


1.7
log
@
2005-10-06  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/stdint.h: Add [u]int_fast<N>_t types.
@
text
@a9 1
 * @@todo - Add fast<N>_t types.
d75 1
a75 1
#ifndef __int_least8_t_defined
d105 1
a105 1
#ifndef __int_least8_t_defined
d111 1
a111 1
#ifndef __int_least16_t_defined
d137 1
a137 1
#ifndef __int_least8_t_defined
d143 1
a143 1
#ifndef __int_least16_t_defined
d149 1
a149 1
#ifndef __int_least32_t_defined
d303 1
a303 1
#ifdef __have_long64
d315 1
a315 1
#ifdef __have_long64
@


1.6
log
@
2005-10-04  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/stdint.h: Move magic to set __have_long* to the
        beginning.  Use #if __have* instead of #if defined(__have*).
        Minor typo fixes.
@
text
@d157 67
d327 24
@


1.5
log
@
2005-10-03  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/stdint.h:
        Use __INTMAX_TYPE__ to derive intmax_t.
        Use __UINTMAX_TYPE__ to derive uintmax_t.
        Fix minor typo.
@
text
@d31 14
a90 1
#define __have_long32 1
d119 1
a119 1
#if __STDINT_EXP(LONG_MAX) > 0x7fffffff
d123 1
a123 7
#define __have_long64 1
#elif  defined(__LONG_LONG_MAX__) && (__LONG_LONG_MAX__ > 0x7fffffff)
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#define __int64_t_defined 1
#define __have_longlong64 1
#elif  defined(LLONG_MAX) && (LLONG_MAX > 0x7fffffff)
a126 1
#define __have_longlong64 1
d172 1
a172 1
 #else
d174 1
a174 1
 #endif
d241 1
a241 1
#elif defined(__have_longlong64)
d253 1
a253 1
#elif defined(__have_longlong64)
@


1.4
log
@
2005-09-27  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/stdint.h: Correct __STDINT_EXP macro incorrectly
        handling GCC >= 4.
@
text
@d151 18
a168 7
#if __have_longlong64
typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
#else
typedef signed long intmax_t;
typedef unsigned long uintmax_t;
#endif
d171 1
a171 1
 * GCC doesn't provide an propriate macro for [u]intptr_t
@


1.3
log
@
2005-09-20  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/stdint.h (__EXP): Rename to __STDINT_EXP
        and do not #undef the macro after it is used.  Fix typos.
        Also change 64-bit constants to use the __have_long64 and
        __have_longlong64 flags to determine if long or long long
        constants should be used.
        * libc/include/inttypes.h: Include stddef.h to get wchar_t
        type defined.
@
text
@d21 4
a24 2
#if defined(__GNUC__) && (__GNUC__ >= 3 ) \
  && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ > 2 ) 
@


1.2
log
@
2005-09-20  Shaun Jackman  <sjackman@@gmail.com>

        * libc/include/stdint.h: Fix typo in names of
        LEAST macros.
@
text
@d23 1
a23 1
#define __EXP(x) __##x##__
d25 1
a25 1
#define __EXP(x) x
d29 1
a29 1
#if __EXP(SCHAR_MAX) == 0x7f
d41 1
a41 1
#if __EXP(SHRT_MAX) == 0x7fff
d45 1
a45 1
#elif __EXP(INT_MAX) == 0x7fff
d49 1
a49 1
#elif __EXP(SCHAR_MAX) == 0x7fff
d67 1
a67 1
#if __EXP(INT_MAX) == 0x7fffffffL
d71 1
a71 1
#elif __EXP(LONG_MAX) == 0x7fffffffL
d76 1
a76 1
#elif __EXP(SHRT_MAX) == 0x7fffffffL
d80 1
a80 1
#elif __EXP(SCHAR_MAX) == 0x7fffffffL
d104 1
a104 1
#if __EXP(LONG_MAX) > 0x7fffffff
d119 1
a119 1
#elif  __EXP(INT_MAX) > 0x7fffffff
d204 1
a204 1
#define INT32_MIN 	-2147483648
d206 1
a206 1
#define UINT32_MAX       4294967295
d210 1
a210 1
#define INT_LEAST32_MIN -2147483648
d212 1
a212 1
#define UINT_LEAST32_MAX 4294967295
d218 9
a226 3
#define INT64_MIN 	-9223372036854775808
#define INT64_MAX 	 9223372036854775807
#define UINT64_MAX 	18446744073709551615
d230 9
a238 3
#define INT_LEAST64_MIN -9223372036854775808
#define INT_LEAST64_MAX  9223372036854775807
#define UINT_LEAST64_MAX 18446744073709551615
d242 2
a243 2
#define SIZE_MIN (-__EXP(LONG_MAX) - 1L)
#define SIZE_MAX __EXP(LONG_MAX)
d246 2
a247 2
#define SIG_ATOMIC_MIN (-__EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX __EXP(INT_MAX)
d250 2
a251 4
#define PTRDIFF_MIN (-__EXP(LONG_MAX) - 1L)
#define PTHDIFF_MAX __EXT(LONG_MAX)

#undef __EXP
@


1.1
log
@
2005-09-19  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/rtems/include/stdint.h: Moved to...
        * libc/include/stdint.h: ...here.
@
text
@d182 3
a184 3
#define INTLEAST8_MIN 	-128
#define INTLEAST8_MAX 	 127
#define UINTLEAST8_MAX 	 255
d196 3
a198 3
#define INTLEAST16_MIN 	-32768
#define INTLEAST16_MAX 	 32767
#define UINTLEAST16_MAX  65535
d210 3
a212 3
#define INTLEAST32_MIN 	-2147483648
#define INTLEAST32_MAX 	 2147483647
#define UINTLEAST32_MAX  4294967295
d224 3
a226 3
#define INTLEAST64_MIN 	-9223372036854775808
#define INTLEAST64_MAX 	 9223372036854775807
#define UINTLEAST64_MAX 18446744073709551615
@

