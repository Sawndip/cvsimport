head	1.59;
access;
symbols
	cygwin-1_7_35-release:1.59
	cygwin-1_7_34-release:1.59
	newlib-2_2_0:1.58.0.2
	cygwin-1_7_33-release:1.58
	cygwin-1_7_32-release:1.58
	cygwin-1_7_31-release:1.58
	cygwin-1_7_30-release:1.56
	cygwin-1_7_29-release:1.56
	cygwin-1_7_28-release:1.56
	newlib-2_1_0:1.56
	cygwin-1_7_27-release:1.56
	cygwin-1_7_26-release:1.56
	cygwin-1_7_25-release:1.56
	cygwin-1_7_24-release:1.56
	cygwin-1_7_23-release:1.56
	cygwin-1_7_22-release:1.56
	cygwin-1_7_21-release:1.54
	cygwin-1_7_20-release:1.54
	cygwin-1_7_19-release:1.54
	cygwin-64bit-postmerge:1.52
	cygwin-64bit-premerge-branch:1.52.0.2
	cygwin-64bit-premerge:1.52
	cygwin-1_7_18-release:1.52
	newlib-2_0_0:1.52
	cygwin-1_7_17-release:1.52
	cygwin-64bit-branch:1.50.0.2
	cygwin-1_7_16-release:1.50
	cygwin-1_7_15-release:1.50
	cygwin-1_7_14_2-release:1.50
	cygwin-1_7_14-release:1.50
	cygwin-1_7_12-release:1.50
	cygwin-1_7_11-release:1.50
	cygwin-1_7_10-release:1.49
	newlib-1_20_0:1.49
	cygwin-1_7_9-release:1.48
	cygwin-1_7_8-release:1.48
	newlib-1_19_0:1.48
	cygwin-1_7_7-release:1.46
	cygwin-1_7_5-release:1.45
	cygwin-1_7_4-release:1.45
	cygwin-1_7_3-release:1.45
	cygwin-1_7_2-release:1.45
	newlib-1_18_0:1.44
	cygwin-1_7_1-release:1.42
	newlib-1_17_0-arc:1.35.0.2
	binutils-arc-20080908-branch:1.34.0.2
	binutils-arc-20080908-branchpoint:1.34
	newlib-1_17_0:1.35
	newlib-1_16_0:1.33
	newlib-1_15_0:1.30
	newlib-csl-coldfire-4_1-32:1.28
	newlib-csl-sourcerygxx-4_1-32:1.28
	newlib-csl-innovasic-fido-3_4_4-33:1.28
	newlib-csl-coldfire-4_1-30:1.28
	newlib-csl-sourcerygxx-4_1-30:1.28
	newlib-csl-coldfire-4_1-28:1.28
	newlib-csl-sourcerygxx-4_1-28:1.28
	newlib-csl-arm-2006q3-27:1.28
	newlib-csl-sourcerygxx-4_1-27:1.28
	newlib-csl-arm-2006q3-26:1.28
	newlib-csl-sourcerygxx-4_1-26:1.28
	newlib-csl-sourcerygxx-4_1-24:1.28
	newlib-csl-sourcerygxx-4_1-23:1.28
	newlib-csl-sourcerygxx-4_1-21:1.28
	newlib-csl-arm-2006q3-21:1.28
	newlib-csl-arm-2006q3-19:1.28
	newlib-csl-sourcerygxx-4_1-19:1.28
	newlib-csl-sourcerygxx-4_1-18:1.28
	newlib-csl-sourcerygxx-3_4_4-25:1.29
	newlib-csl-sourcerygxx-4_1-17:1.28
	cr-0x5f1:1.28.0.6
	newlib-csl-sourcerygxx-4_1-14:1.28
	newlib-csl-sourcerygxx-4_1-13:1.28
	newlib-csl-sourcerygxx-4_1-12:1.28
	newlib-csl-sourcerygxx-4_1-9:1.28
	newlib-csl-sourcerygxx-4_1-8:1.28
	newlib-csl-sourcerygxx-4_1-7:1.28
	newlib-csl-arm-2006q1-6:1.28
	newlib-csl-sourcerygxx-4_1-6:1.28
	newlib-csl-sourcerygxx-4_1-5:1.28
	newlib-csl-sourcerygxx-4_1-4:1.28
	newlib-autotools-branch:1.28.0.4
	newlib-csl-20060320-branch:1.28.0.2
	newlib-csl-20060320-branchpoint:1.28
	newlib-1_14_0:1.28
	newlib-csl-arm-2005-q1b:1.25
	newlib-csl-arm-2005-q1a:1.25
	newlib-1_13_0:1.24
	csl-arm-2004-q3:1.23
	csl-arm-2004-q1a:1.21
	csl-arm-2004-q1:1.21
	newlib-1_12_0:1.19
	csl-arm-2003-q4:1.18
	w32api-2_2:1.16
	mingw-runtime-2_4:1.16
	newlib-1_11_0:1.14
	cygnus_cvs_20020108_pre:1.9
	newlib-1_10_0:1.7
	newlib-1_9_0:1.4
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.59
date	2015.01.21.18.27.45;	author ebotcazou;	state Exp;
branches;
next	1.58;

1.58
date	2014.07.17.18.43.04;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2014.05.14.11.33.24;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2013.07.16.07.48.53;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2013.07.09.19.06.47;	author jjohnstn;	state Exp;
branches;
next	1.54;

1.54
date	2013.05.13.21.39.51;	author dj;	state Exp;
branches;
next	1.53;

1.53
date	2013.05.06.18.23.08;	author jjohnstn;	state Exp;
branches;
next	1.52;

1.52
date	2012.09.26.20.06.47;	author jjohnstn;	state Exp;
branches;
next	1.51;

1.51
date	2012.09.13.23.57.33;	author green;	state Exp;
branches;
next	1.50;

1.50
date	2012.02.21.22.34.30;	author jjohnstn;	state Exp;
branches
	1.50.2.1;
next	1.49;

1.49
date	2011.11.29.06.33.48;	author dj;	state Exp;
branches;
next	1.48;

1.48
date	2010.12.02.19.30.46;	author jjohnstn;	state Exp;
branches;
next	1.47;

1.47
date	2010.10.09.02.33.29;	author jjohnstn;	state Exp;
branches;
next	1.46;

1.46
date	2010.06.18.16.26.25;	author jjohnstn;	state Exp;
branches;
next	1.45;

1.45
date	2010.02.11.21.03.51;	author jjohnstn;	state Exp;
branches;
next	1.44;

1.44
date	2009.12.17.19.26.38;	author jjohnstn;	state Exp;
branches;
next	1.43;

1.43
date	2009.12.10.17.12.11;	author jjohnstn;	state Exp;
branches;
next	1.42;

1.42
date	2009.10.26.10.05.22;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2009.09.28.16.42.20;	author jjohnstn;	state Exp;
branches;
next	1.40;

1.40
date	2009.07.09.17.04.56;	author jjohnstn;	state Exp;
branches;
next	1.39;

1.39
date	2009.04.22.19.52.49;	author jjohnstn;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.17.22.15.43;	author jjohnstn;	state Exp;
branches;
next	1.37;

1.37
date	2009.04.17.20.54.19;	author jjohnstn;	state Exp;
branches;
next	1.36;

1.36
date	2009.04.16.18.24.34;	author jjohnstn;	state Exp;
branches;
next	1.35;

1.35
date	2008.12.11.20.05.38;	author jjohnstn;	state Exp;
branches
	1.35.2.1;
next	1.34;

1.34
date	2008.04.24.11.26.41;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2007.11.07.21.42.24;	author brolley;	state Exp;
branches;
next	1.32;

1.32
date	2007.08.28.21.56.49;	author jjohnstn;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.26.19.23.37;	author jjohnstn;	state Exp;
branches;
next	1.30;

1.30
date	2006.11.08.19.26.43;	author jjohnstn;	state Exp;
branches;
next	1.29;

1.29
date	2006.08.16.21.39.43;	author jjohnstn;	state Exp;
branches;
next	1.28;

1.28
date	2005.12.13.22.57.31;	author jjohnstn;	state Exp;
branches;
next	1.27;

1.27
date	2005.08.10.20.35.13;	author jjohnstn;	state Exp;
branches;
next	1.26;

1.26
date	2005.07.06.13.14.10;	author aldyh;	state Exp;
branches;
next	1.25;

1.25
date	2005.01.27.23.54.42;	author jjohnstn;	state Exp;
branches;
next	1.24;

1.24
date	2004.10.05.19.44.24;	author jjohnstn;	state Exp;
branches;
next	1.23;

1.23
date	2004.07.30.09.03.39;	author aoliva;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.22.21.54.51;	author aoliva;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.05.20.21.03;	author jjohnstn;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.05.20.08.52;	author jjohnstn;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.02.16.59.52;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.10.15.32.27;	author green;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.20.19.14.12;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.24.15.46.04;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.18.08.55.07;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.24.15.44.23;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.19.20.36.05;	author fitzsim;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.15.21.35.43;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.18.21.20.21;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.30.18.23.37;	author fitzsim;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.07.19.33.22;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.22.22.47.57;	author geoffk;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.12.21.04.39;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.28.10.40.09;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.04.13.30.58;	author rsandifo;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.04.18.22.10;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.27.19.51.33;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.11.02.28.06;	author wilson;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.50.2.1
date	2012.10.16.15.58.09;	author corinna;	state Exp;
branches;
next	;

1.35.2.1
date	2009.09.10.01.29.06;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.59
log
@	* COPYING.LIBGLOSS: Add Controls and Data Services copyright.
	* COPYING.NEWLIB: Likewise.
libgloss/
	* configure.in: Add Visium support.
	* configure: Regenerate.
	* visium/: New directory.
newlib/
	* configure.host: Add Visium support.
	* libc/machine/configure.in: Likewise.
	* libc/machine/configure: Regenerate.
	* libc/machine/visium/: New directory.
	* libc/include/machine/setjmp.h (_JBLEN): Define for Visium.
	* libc/include/machine/ieeefp.h (__IEEE_BIG_ENDIAN): Likewise.
	* libc/include/machine/time.h (_CLOCKS_PER_SEC_): Likewise.
@
text
@#ifndef __IEEE_BIG_ENDIAN
#ifndef __IEEE_LITTLE_ENDIAN

/* This file can define macros to choose variations of the IEEE float
   format:

   _FLT_LARGEST_EXPONENT_IS_NORMAL

	Defined if the float format uses the largest exponent for finite
	numbers rather than NaN and infinity representations.  Such a
	format cannot represent NaNs or infinities at all, but it's FLT_MAX
	is twice the IEEE value.

   _FLT_NO_DENORMALS

	Defined if the float format does not support IEEE denormals.  Every
	float with a zero exponent is taken to be a zero representation.
 
   ??? At the moment, there are no equivalent macros above for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.

   __IEEE_BIG_ENDIAN

        Defined if the float format is big endian.  This is mutually exclusive
        with __IEEE_LITTLE_ENDIAN.

   __IEEE_LITTLE_ENDIAN
 
        Defined if the float format is little endian.  This is mutually exclusive
        with __IEEE_BIG_ENDIAN.

   Note that one of __IEEE_BIG_ENDIAN or __IEEE_LITTLE_ENDIAN must be specified for a
   platform or error will occur.

   __IEEE_BYTES_LITTLE_ENDIAN

        This flag is used in conjunction with __IEEE_BIG_ENDIAN to describe a situation 
	whereby multiple words of an IEEE floating point are in big endian order, but the
	words themselves are little endian with respect to the bytes.

   _DOUBLE_IS_32BITS 

        This is used on platforms that support double by using the 32-bit IEEE
        float type.

   _FLOAT_ARG

        This represents what type a float arg is passed as.  It is used when the type is
        not promoted to double.
	
*/

#if (defined(__arm__) || defined(__thumb__)) && !defined(__MAVERICK__)
/* ARM traditionally used big-endian words; and within those words the
   byte ordering was big or little endian depending upon the target.
   Modern floating-point formats are naturally ordered; in this case
   __VFP_FP__ will be defined, even if soft-float.  */
#ifdef __VFP_FP__
# ifdef __ARMEL__
#  define __IEEE_LITTLE_ENDIAN
# else
#  define __IEEE_BIG_ENDIAN
# endif
#else
# define __IEEE_BIG_ENDIAN
# ifdef __ARMEL__
#  define __IEEE_BYTES_LITTLE_ENDIAN
# endif
#endif
#endif

#if defined (__aarch64__)
#if defined (__AARCH64EL__)
#define __IEEE_LITTLE_ENDIAN
#else
#define __IEEE_BIG_ENDIAN
#endif
#endif

#ifdef __epiphany__
#define __IEEE_LITTLE_ENDIAN
#define Sudden_Underflow 1
#endif

#ifdef __hppa__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __nds32__
#ifdef __big_endian__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __SPU__
#define __IEEE_BIG_ENDIAN

#define isfinite(__y) \
	(__extension__ ({int __cy; \
		(sizeof (__y) == sizeof (float))  ? (1) : \
		(__cy = fpclassify(__y)) != FP_INFINITE && __cy != FP_NAN;}))

#define isinf(__x) ((sizeof (__x) == sizeof (float))  ?  (0) : __isinfd(__x))
#define isnan(__x) ((sizeof (__x) == sizeof (float))  ?  (0) : __isnand(__x))

/*
 * Macros for use in ieeefp.h. We can't just define the real ones here
 * (like those above) as we have name space issues when this is *not*
 * included via generic the ieeefp.h.
 */
#define __ieeefp_isnanf(x)	0
#define __ieeefp_isinff(x)	0
#define __ieeefp_finitef(x)	1
#endif

#ifdef __sparc__
#ifdef __LITTLE_ENDIAN_DATA__
#define __IEEE_LITTLE_ENDIAN
#else
#define __IEEE_BIG_ENDIAN
#endif
#endif

#if defined(__m68k__) || defined(__mc68000__)
#define __IEEE_BIG_ENDIAN
#endif

#if defined(__mc68hc11__) || defined(__mc68hc12__) || defined(__mc68hc1x__)
#define __IEEE_BIG_ENDIAN
#ifdef __HAVE_SHORT_DOUBLE__
# define _DOUBLE_IS_32BITS
#endif
#endif

#if defined (__H8300__) || defined (__H8300H__) || defined (__H8300S__) || defined (__H8500__) || defined (__H8300SX__)
#define __IEEE_BIG_ENDIAN
#define _FLOAT_ARG float
#define _DOUBLE_IS_32BITS
#endif

#if defined (__xc16x__) || defined (__xc16xL__) || defined (__xc16xS__)
#define __IEEE_LITTLE_ENDIAN
#define _FLOAT_ARG float
#define _DOUBLE_IS_32BITS
#endif


#ifdef __sh__
#ifdef __LITTLE_ENDIAN__
#define __IEEE_LITTLE_ENDIAN
#else
#define __IEEE_BIG_ENDIAN
#endif
#if defined(__SH2E__) || defined(__SH3E__) || defined(__SH4_SINGLE_ONLY__) || defined(__SH2A_SINGLE_ONLY__)
#define _DOUBLE_IS_32BITS
#endif
#endif

#ifdef _AM29K
#define __IEEE_BIG_ENDIAN
#endif

#ifdef _WIN32
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __i386__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __i960__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __lm32__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __M32R__
#define __IEEE_BIG_ENDIAN
#endif

#if defined(_C4x) || defined(_C3x)
#define __IEEE_BIG_ENDIAN
#define _DOUBLE_IS_32BITS
#endif

#ifdef __TMS320C6X__
#ifdef _BIG_ENDIAN
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __TIC80__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __MIPSEL__
#define __IEEE_LITTLE_ENDIAN
#endif
#ifdef __MIPSEB__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __MMIX__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __D30V__
#define __IEEE_BIG_ENDIAN
#endif

/* necv70 was __IEEE_LITTLE_ENDIAN. */

#ifdef __W65__
#define __IEEE_LITTLE_ENDIAN
#define _DOUBLE_IS_32BITS
#endif

#if defined(__Z8001__) || defined(__Z8002__)
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __m88k__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __mn10300__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __mn10200__
#define __IEEE_LITTLE_ENDIAN
#define _DOUBLE_IS_32BITS
#endif

#ifdef __v800
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __v850
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __D10V__
#define __IEEE_BIG_ENDIAN
#if __DOUBLE__ == 32
#define _DOUBLE_IS_32BITS
#endif
#endif

#ifdef __PPC__
#if (defined(_BIG_ENDIAN) && _BIG_ENDIAN) || (defined(_AIX) && _AIX)
#define __IEEE_BIG_ENDIAN
#else
#if (defined(_LITTLE_ENDIAN) && _LITTLE_ENDIAN) || (defined(__sun__) && __sun__) || (defined(_WIN32) && _WIN32)
#define __IEEE_LITTLE_ENDIAN
#endif
#endif
#endif

#ifdef __xstormy16__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __arc__
#ifdef __big_endian__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __CRX__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __fr30__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __mcore__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __mt__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __frv__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __moxie__
#ifdef __MOXIE_BIG_ENDIAN__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __ia64__
#ifdef __BIG_ENDIAN__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __AVR__
#define __IEEE_LITTLE_ENDIAN
#define _DOUBLE_IS_32BITS
#endif

#if defined(__or1k__) || defined(__OR1K__) || defined(__OR1KND__)
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __IP2K__
#define __IEEE_BIG_ENDIAN
#define __SMALL_BITFIELDS
#define _DOUBLE_IS_32BITS
#endif

#ifdef __iq2000__
#define __IEEE_BIG_ENDIAN
#endif

#ifdef __MAVERICK__
#ifdef __ARMEL__
#  define __IEEE_LITTLE_ENDIAN
#else  /* must be __ARMEB__ */
#  define __IEEE_BIG_ENDIAN
#endif /* __ARMEL__ */
#endif /* __MAVERICK__ */

#ifdef __m32c__
#define __IEEE_LITTLE_ENDIAN
#define __SMALL_BITFIELDS
#endif

#ifdef __CRIS__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __BFIN__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __x86_64__
#define __IEEE_LITTLE_ENDIAN
#endif

#ifdef __mep__
#ifdef __LITTLE_ENDIAN__
#define __IEEE_LITTLE_ENDIAN
#else
#define __IEEE_BIG_ENDIAN
#endif
#endif

#ifdef __MICROBLAZE__
#ifndef __MICROBLAZEEL__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif
#endif

#ifdef __MSP430__
#define __IEEE_LITTLE_ENDIAN
#define __SMALL_BITFIELDS	/* 16 Bit INT */
#endif

#ifdef __RL78__
#define __IEEE_LITTLE_ENDIAN
#define __SMALL_BITFIELDS	/* 16 Bit INT */
#ifndef __RL78_64BIT_DOUBLES__
#define _DOUBLE_IS_32BITS
#endif
#endif

#ifdef __RX__

#ifdef __RX_BIG_ENDIAN__
#define __IEEE_BIG_ENDIAN
#else
#define __IEEE_LITTLE_ENDIAN
#endif

#ifndef __RX_64BIT_DOUBLES__
#define _DOUBLE_IS_32BITS
#endif

#ifdef __RX_16BIT_INTS__
#define __SMALL_BITFIELDS
#endif

#endif

#if (defined(__CR16__) || defined(__CR16C__) ||defined(__CR16CP__))
#define __IEEE_LITTLE_ENDIAN
#define __SMALL_BITFIELDS	/* 16 Bit INT */
#endif

#ifdef __NIOS2__
# ifdef __nios2_big_endian__
#  define __IEEE_BIG_ENDIAN
# else
#  define __IEEE_LITTLE_ENDIAN
# endif
#endif

#ifdef __VISIUM__
#define __IEEE_BIG_ENDIAN
#endif

#ifndef __IEEE_BIG_ENDIAN
#ifndef __IEEE_LITTLE_ENDIAN
#error Endianess not declared!!
#endif /* not __IEEE_LITTLE_ENDIAN */
#endif /* not __IEEE_BIG_ENDIAN */

#endif /* not __IEEE_LITTLE_ENDIAN */
#endif /* not __IEEE_BIG_ENDIAN */

@


1.58
log
@	* configure.host: Remove or16 and or32 targets and add or1k.
	* libc/include/machine/ieeefp.h: Replace or32 with or1k.
	* libc/machine/configure.in: Add or1k subdirectory.
	* libc/machine/or1k/configure.in: New file.
	* libc/machine/or1k/Makefile.am: New file.
	* libc/machine/or1k/setjmp.S: New file.
@
text
@d418 4
@


1.57
log
@	* libc/include/machine/ieeefp.h: Define _DOUBLE_IS_32BITS when double
	options is not __RL78_64BIT_DOUBLES__.
@
text
@d319 1
a319 1
#if defined(__or32__) || defined(__or1k__) || defined(__or16__)
@


1.56
log
@	* configure.host: Change to microblaze*.
	* libc/include/machine/ieeefp.h: Add __MICROBLAZEEL__.
	* libc/machine/microblaze/mb_endian.h: New file.
	* newlib/libc/machine/microblaze/strcmp.c: Add little endian support.
	* newlib/libc/machine/microblaze/strcpy.c: Likewise.
	* newlib/libc/machine/microblaze/strlen.c: Likewise.

	* configure.in: Change to microblaze*.
	* configure: Regenerate.
	* microblaze/xilinx.ld: Remove OUTPUT_FORMAT.
@
text
@d382 1
d385 1
@


1.55
log
@
2013-07-09  Sabrina Ni  <sabrina@@andestech.com>

        * configure.host (machine_dir, syscall_dir, newlib_cflags):
        Add settings for nds32*.
        * libc/include/machine/ieeefp.h (IEEE_BIG_ENDIAN, IEEE_LITTLE_ENDIAN):
        Ditto.
        * libc/include/machine/setjmp.h (JBLEN): Ditto.
        * libc/machine/configure.in: Add nds32 subdir.
        * libc/machine/configure: Regenerated.
        * libc/machine/nds32/Makefile.am: New.
        * libc/machine/nds32/Makefile.in: New (autogenerated).
        * libc/machine/nds32/aclocal.m4: New (autogenerated).
        * libc/machine/nds32/configure.in: New.
        * libc/machine/nds32/configure: New (autogenerated).
        * libc/machine/nds32/setjmp.S: New.
@
text
@d367 1
d369 3
@


1.54
log
@[newlib]
* configure.host (msp430): Add.
* libc/include/machine/ieeefp.h: Add MSP430 support.
* libc/include/machine/setjmp.h: Likewise.
* libc/include/sys/config.h: Likewise.
* libc/machine/configure.in (msp430): Add.
* libc/machine/configure: Regenerate.
* libc/machine/msp430: New directory.

[libgloss]
* configure.in (msp430*-*-elf): Add.
* configure: Regenerate.
* msp430: New directory.
@
text
@d89 8
@


1.53
log
@
2013-05-06  Sandra Loosemore  <sandra@@codesourcery.com>

        * configure.host (machine_dir, sys_dir, syscall_dir, newlib_cflags):
        Add settings for nios2*.
        * libc/include/machine/ieeefp.h (IEEE_BIG_ENDIAN, IEEE_LITTLE_ENDIAN):
        Likewise.
        * libc/include/machine/setjmp.h (JBLEN, JBTYPE): Likewise.
        * libc/machine/configure.in: Add nios2 subdir.
        * libc/machine/configure: Regenerated.
        * libc/machine/nios2/Makefile.am: New.
        * libc/machine/nios2/Makefile.in: New (autogenerated).
        * libc/machine/nios2/aclocal.m4: New (copied from mips version).
        * libc/machine/nios2/configure.in: New.
        * libc/machine/nios2/configure: New (autogenerated).
        * libc/machine/nios2/setjmp.s: New.
@
text
@d362 5
@


1.52
log
@
2012-09-26  Ian Bolton  <ian.bolton@@arm.com>
        Jim MacArthur  <jim.macarthur@@arm.com>
        Marcus Shawcroft  <marcus.shawcroft@@arm.com>
        Nigel Stephens  <nigel.stephens@@arm.com>
        Ramana Radhakrishnan  <ramana.radhakrishnan@@arm.com>
        Richard Earnshaw  <rearnsha@@arm.com>
        Sofiane Naci  <sofiane.naci@@arm.com>
        Tejas Belagod  <tejas.belagod@@arm.com>
        Yufeng Zhang  <yufeng.zhang@@arm.com>

        * configure.host: Add AArch64.
        * libc/include/machine/ieeefp.h: Add AArch64.
        * libc/include/machine/setjmp.h: Add AArch64.
        * libc/include/machine/time.h: Add AArch64.
        * libc/include/sys/config.h: Add AArch64.
        * libc/machine/aarch64/Makefile.am: New file.
        * libc/machine/aarch64/Makefile.in: Generated.
        * libc/machine/aarch64/aclocal.m4: Generated.
        * libc/machine/aarch64/configure: Generated.
        * libc/machine/aarch64/configure.in: New file.
        * libc/machine/aarch64/setjmp.S: New file.
        * libc/machine/configure.in: Add AArch64.
        * libc/machine/configure: Re-generated.
        * libm/machine/aarch64/Makefile.am: New file.
        * libm/machine/aarch64/Makefile.in: Generated.
        * libm/machine/aarch64/aclocal.m4: Generated.
        * libm/machine/aarch64/configure: Generated.
        * libm/machine/aarch64/configure.in: New file.
        * libm/machine/aarch64/s_ceil.c: New file.
        * libm/machine/aarch64/s_floor.c: New file.
        * libm/machine/aarch64/s_fma.c: New file.
        * libm/machine/aarch64/s_fmax.c: New file.
        * libm/machine/aarch64/s_fmin.c: New file.
        * libm/machine/aarch64/s_llrint.c: New file.
        * libm/machine/aarch64/s_llround.c: New file.
        * libm/machine/aarch64/s_lrint.c: New file.
        * libm/machine/aarch64/s_lround.c: New file.
        * libm/machine/aarch64/s_nearbyint.c: New file.
        * libm/machine/aarch64/s_rint.c: New file.
        * libm/machine/aarch64/s_round.c: New file.
        * libm/machine/aarch64/s_trunc.c: New file.
        * libm/machine/aarch64/sf_ceil.c: New file.
        * libm/machine/aarch64/sf_floor.c: New file.
        * libm/machine/aarch64/sf_fma.c: New file.
        * libm/machine/aarch64/sf_fmax.c: New file.
        * libm/machine/aarch64/sf_fmin.c: New file.
        * libm/machine/aarch64/sf_llrint.c: New file.
        * libm/machine/aarch64/sf_llround.c: New file.
        * libm/machine/aarch64/sf_lrint.c: New file.
        * libm/machine/aarch64/sf_lround.c: New file.
        * libm/machine/aarch64/sf_nearbyint.c: New file.
        * libm/machine/aarch64/sf_rint.c: New file.
        * libm/machine/aarch64/sf_round.c: New file.
        * libm/machine/aarch64/sf_trunc.c: New file.
        * libm/machine/configure.in: Add AArch64.
        * libm/machine/configure: Re-generated.
@
text
@d391 8
@


1.51
log
@bi-endian support for moxie.
@
text
@d72 8
@


1.50
log
@
2012-02-21  Jeremy Bennett  <jeremy.bennett@@embecosm.com>
            Alan Lehotsky  <apl@@alum.mit.edu>
            Joern Rennecke  <joern.rennecke@@embecosm.com>

        * configure.host: Add Epiphany support.
        * libc/include/machine/ieeefp.h: Likewise.
        * libc/include/machine/setjmp.h: Likewise.
        * libc/machine/configure.in, libc/sys/configure.in: Likewise.
        * libc/machine/configure, libc/sys/configure: Regenerate.
        * libc/machine/epiphany, libc/sys/epiphany: New directories.
        * NEWS: Mention addition of Epiphany.
@
text
@d283 1
d285 3
@


1.50.2.1
log
@	Pull in changes from HEAD
	Align ChangeLog with head
	New file ChangeLog.64bit
@
text
@a71 8
#if defined (__aarch64__)
#if defined (__AARCH64EL__)
#define __IEEE_LITTLE_ENDIAN
#else
#define __IEEE_BIG_ENDIAN
#endif
#endif

a282 1
#ifdef __MOXIE_BIG_ENDIAN__
a283 3
#else
#define __IEEE_LITTLE_ENDIAN
#endif
@


1.49
log
@[libgloss]
* configure.in: Add rl78.
* configure: Regenerate.
* rl78: New directory

[newlib]
* configure.host: Add rl78.
* libc/include/machine/ieeefp.h: Add rl78 support.
* libc/include/machine/setjmp.h: Add rl78 support.
* libc/machine/configure.in: Add rl78.
* libc/machine/rl78: New directory.
@
text
@d72 5
@


1.48
log
@
2010-12-02  Jayant Sonar  jayant.sonar@@kpitcummins.com
            Kaushik Phatak  kaushik.phatak@@kpitcummins.com

        * configure.host: Add CR16 support.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/include/sys/config.h: Ditto.
        * libc/machine/configure.in: Ditto
        * libc/machine/configure: Regenerated
        * libc/machine/cr16/aclocal.m4: New.
        * libc/machine/cr16/configure.in: New
        * libc/machine/cr16/configure: New
        * libc/machine/cr16/getenv.c: New
        * libc/machine/cr16/Makefile.am: New
        * libc/machine/cr16/Makefile.in: New
        * libc/machine/cr16/setjmp.S: New
        * libc/machine/cr16/sys/asm.h: New
        * libc/machine/cr16/sys/libh.h: New
        * libc/machine/cr16/sys/syscall.h: New
@
text
@d345 6
@


1.47
log
@
2010-10-08  Bernd Schmidt  <bernds@@codesourcery.com>
        Joseph Myers  <joseph@@codesourcery.com>

        * configure.host: Handle tic6x targets.
        * libc/include/machine/ieeefp.h: Define endianness for C6X.
        * libc/include/machine/setjmp.h: Add __TMS320C6X__ case.
        * libc/machine/configure.in: Handle tic6x targets.
        * libc/machine/configure: Regenerate.
        * libc/machine/tic6x/Makefile.am, libc/machine/tic6x/configure.in,
        libc/machine/tic6x/setjmp.S: New.
        * libc/machine/tic6x/Makefile.in, libc/machine/tic6x/aclocal.m4,
        libc/machine/tic6x/configure: New (generated).
@
text
@d363 5
@


1.46
log
@
2010-06-18  Pavel Pisa <ppisa4lists@@pikron.com>

        * libc/include/machine/ieeefp.h[__arm__][!__VFP_FP__]: Set to
        __IEEE_BIG_ENDIAN and set __IEEE_BYTES_LITTLE_ENDIAN appropriately
        based on __ARMEL flag.
        * libc/include/machine/endian.h: To set byte order to LITTLE_ENDIAN,
        check for __IEEE_LITTLE_ENDIAN or __IEEE_BYTES_LITTLE_ENDIAN.
@
text
@d169 8
@


1.45
log
@
2010-02-11  Craig Howland <howland@@LGSInnovations.com>

        * libc/include/machine/ieeefp.h:  isfinite macro modified to run faster
        by only calling fpclassify once instead of possibly twice.
@
text
@d65 1
a66 5
#  define __IEEE_LITTLE_ENDIAN
# else
#  define __IEEE_BIG_ENDIAN
# endif
# ifdef __ARMWEL__
@


1.44
log
@
2009-12-17  Ralf CorsÃ©pius <ralf.corsepius@@rtems.org>

        * libc/include/machine/ieeefp.h: Rework __IEEE_*_ENDIAN handling.
        * libc/machine/arm/machine/endian.h: Remove (Conflicts with
        libc/include/machine/endian.h)
@
text
@d83 5
a87 4
#define isfinite(y) \
          (__extension__ ({__typeof__(y) __y = (y); \
                           (sizeof (__y) == sizeof (float))  ? (1) : \
                           fpclassify(__y) != FP_INFINITE && fpclassify(__y) != FP_NAN;}))
@


1.43
log
@
2009-12-10  Conny Marco Menebrocker  <c-m-m@@gmx.de>

        * configure.host: Add xc16x support.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/sys/config.h: Ditto.
        * libc/machine/configure.in: Ditto.
        * libc/machine/Makefile.in: Regenerated.
        * libc/machine/aclocal.m4: Ditto.
        * libc/machine/configure: Ditto.
        * libc/machine/xc16x/Makefile.am: New file.
        * libc/machine/xc16x/Makefile.in: Ditto.
        * libc/machine/xc16x/aclocal.m4: Ditto.
        * libc/machine/xc16x/configure: Ditto.
        * libc/machine/xc16x/configure.in: Ditto.
        * libc/machine/xc16x/putchar.c: Ditto.
        * libc/machine/xc16x/puts.c: Ditto.
        * libc/machine/xc16x/setjmp.S: Ditto.
@
text
@a64 1
# define __IEEE_BIG_ENDIAN
d66 5
@


1.42
log
@newlib:
        * configure.host: Add support for RX architecture.
        * libc/include/machine/ieeefp.h: Likewise.
        * libc/include/machine/setjmp.h: Likewise.
        * libc/include/machine/configure.in: Likewise.
        * libc/include/machine/configure: Regenerate.
        * libc/machine/rx: New directory.
        * libc/machine/rx/*: New files to support RX architecture.

libgloss:
        * configure.in: Add support for RX sub-directory.
        * configure: Regenerate.
        * rx: New directory.
        * rx/*: New files to support RX architecture.
@
text
@d121 7
@


1.41
log
@
2009-09-28  Michael Eager <eager@@eagercon.com>

        * configure.host: Add microblaze.
        * libc/include/machine/ieeefp.h [MICROBLAZE]: Define __IEEE_BIG_ENDIAN.
        * libc/include/machine/setjmp.h [MICROBLAZE]: Define _JBLEN, _JBTYPE.
        * libc/include/sys/config.h [MICROBLAZE]: Define _REENT_SMALL,
        _UNIX98_THREAD_MUTEX_ATTRIBUTES.
        * libc/include/sys/types.h: Treat XMK like rtems, define
        PTHREAD_MUTEX_NORMAL, PTHREAD_MUTEX_ERRORCHECK, PTHREAD_MUTEX_RECURSIVE,
        PTHREAD_MUTEX_DEFAULT, PTHREAD_STACK_MIN, define stuct pthread_attr_s.
        * libc/machine/configure.in: Add microblaze.
        * libc/machine/configure: Add microblaze (not regenerated).
        * libc/machine/microblaze/configure.in: NEW.
        * libc/machine/microblaze/configure: Generate.
        * libc/machine/microblaze/Makefile.am: NEW.
        * libc/machine/microblaze/Makefile.in: Generate.
        * libc/machine/microblaze/{abort.c, strcmp.c, strcpy.c, strlen.c,
        mallocr.c, longjmp.S, setjmp.S}: NEW.
        * libc/stdlib/mallocr.c [MICROBLAZE]: Don't declare sbrk prototype,
        mALLOc(): return malloc value.
@
text
@d329 18
@


1.40
log
@
2009-07-09  Craig Howland <howland@@LGSInnovations.com>

        * libm/math/ef_scalb.c:  Replace isnanf() (pre-C99 function call) with
        isnan() (C99 macro).
        * libm/math/wf_log.c:  Ditto.
        * libm/math/wf_j0.c:  Ditto.
        * libm/math/wf_sqrt.c:  Ditto.
        * libm/math/wf_pow.c:  Ditto.
        * libm/math/wf_fmod.c:  Ditto.
        * libm/math/wf_remainder.c:  Ditto.
        * libm/math/wf_scalb.c:  Ditto.
        * libm/math/wf_atanh.c:  Ditto.
        * libm/math/wf_cosh.c:  Ditto.
        * libm/math/wf_acos.c:  Ditto.
        * libm/math/wf_acosh.c:  Ditto.
        * libm/math/wf_jn.c:  Ditto.
        * libm/math/wf_log10.c:  Ditto.
        * libm/math/wf_asin.c:  Ditto.
        * libm/math/wf_j1.c:  Ditto.
        * libm/common/sf_isnan.c:  Add #include <ieeefp.h>, fix comment.
        * libm/common/sf_isinf.c:  Add #include <ieeefp.h>, adjust comment to
        match that from s_isinf.c.
        * libc/include/machine/ieeefp.h:  Simplify isinf and isnan macros to
        remove un-necessary extension use (in a similar manner to as was
        recently done in math.h).
        * libc/include/math.h:  Remove isnanf and isinff prototypes (are in
        ieeefp.h).
        * libm/machine/spu/sf_isinf.c:  Fix comment (remove <math.h>).
@
text
@d325 4
@


1.39
log
@
2009-04-22 Anthony Green <green@@moxielogic.com>

        * configure.host: Add moxie support.
        * libc/machine/configure.in: Add moxie support.
        * libc/machine/configure: Rebuilt.
        * libc/machine/moxie/aclocal.m4: New file.
        * libc/machine/moxie/configure: New file.
        * libc/machine/moxie/configure.in: New file.
        * libc/machine/moxie/Makefile.am: New file.
        * libc/machine/moxie/Makefile.in: New file.
        * libc/machine/moxie/setjmp.S: New file.
        * libc/include/machine/setjmp.h (_JBLEN): Define for moxie.
        * libc/include/machine/ieeefp.h: Add moxie support.
@
text
@d83 2
a84 6
#define isinf(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof (__x) == sizeof (float))  ? (0) : __isinfd(__x);}))
#define isnan(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof (__x) == sizeof (float))  ? (0) : __isnand(__x);}))
@


1.38
log
@
2009-04-17  Jeff johnston  <jjohnstn@@redhat.com>

        * libc/include/machine/ieeefp.h (_LDBL_EQ_DBL): Remove.
        * libc/stdlib/local.h (_LDBL_EQ_DBL): Add.
        * libc/stdlib/strtold.c: Include local.h.
        * libc/stdlib/wcstold.c: Likewise.
        * libm/common/atanl.c: Likewise.
        * libm/common/cosl.c: Likewise.
        * libm/common/sinl.c: Likewise.
        * libm/common/modfl.c: Likewise.
        * libm/common/frexpl.c: Likewise.
        * libm/common/tanhl.c: Likewise.
        * libm/common/tanl.c: Likewise.
        * libm/common/expm1l.c: Likewise.
        * libm/common/log1pl.c: Likewise.
        * libm/common/ceill.c: Likewise.
        * libm/common/fabsl.c: Likewise.
        * libm/common/floorl.c: Likewise.
        * libm/common/acosl.c: Likewise.
        * libm/common/asinl.c: Likewise.
        * libm/common/atan2l.c: Likewise.
        * libm/common/coshl.c: Likewise.
        * libm/common/expl.c: Likewise.
        * libm/common/fmodl.c: Likewise.
        * libm/common/hypotl.c: Likewise.
        * libm/common/ldexpl.c: Likewise.
        * libm/common/log10l.c: Likewise.
        * libm/common/logl.c: Likewise.
        * libm/common/powl.c: Likewise.
        * libm/common/sqrtl.c: Likewise.
        * libm/common/copysignl.c: Likewise.
        * libm/common/ilogbl.c: Likewise.
        * libm/common/nanl.c: Likewise.
        * libm/common/cbrtl.c: Likewise.
        * libm/common/asinhl.c: Likewise.
        * libm/common/nextafterl.c: Likewise.
        * libm/common/rintl.c: Likewise.
        * libm/common/scalbnl.c: Likewise.
        * libm/common/exp2l.c: Likewise.
        * libm/common/fdiml.c: Likewise.
        * libm/common/fmal.c: Likewise.
        * libm/common/fmaxl.c: Likewise.
        * libm/common/fminl.c: Likewise.
        * libm/common/lrintl.c: Likewise.
        * libm/common/lroundl.c: Likewise.
        * libm/common/nearbyintl.c: Likewise.
        * libm/common/remquol.c: Likewise.
        * libm/common/roundl.c: Likewise.
        * libm/common/scalblnl.c: Likewise.
        * libm/common/truncl.c: Likewise.
        * libm/common/acoshl.c: Likewise.
        * libm/common/atanhl.c: Likewise.
        * libm/common/erfcl.c: Likewise.
        * libm/common/erfl.c: Likewise.
        * libm/common/lgammal.c: Likewise.
        * libm/common/remainderl.c: Likewise.
        * libm/common/tgammal.c: Likewise.
        * libm/common/sinhl.c: Likewise.
        * libm/common/llroundl.c: Likewise.
        * libm/common/llrintl.c: Likewise.
        * libm/common/local.h: New file with _LDBL_EQ_DBL macro.
@
text
@d265 4
@


1.37
log
@
2009-04-17  Ken Werner  <ken.werner@@de.ibm.com>

        * libc/include/machine/ieeefp.h: _LDBL_EQ_DBL check fixed.
        * libc/include/math.h (llrintl): Declare.
        * libm/common/llrintl.c: New File.
        * libm/common/Makefile.am: New File added.
        * libm/common/Makefile.in: Regenerate.
@
text
@a333 7
/* Check if long double is as wide as double. */
#if (!defined(__STRICT_ANSI__) || __STDC_VERSION__ > 199901L || \
  defined(__cplusplus)) && defined(__LDBL_MANT_DIG__) && \
    (__DBL_MANT_DIG__ == __LDBL_MANT_DIG__ && __LDBL_MIN_EXP__ == __DBL_MIN_EXP__ && \
    __LDBL_MAX_EXP__ == __DBL_MAX_EXP__)
 #define _LDBL_EQ_DBL
#endif
@


1.36
log
@
2009-04-16  Ken Werner  <ken.werner@@de.ibm.com>

        * libm/libm.texinfo: Add long double function support chapter.
        * libc/include/machine/ieeefp.h: Add _LDBL_EQ_DBL define.
        * libc/include/stdlib.h: Include <machine/ieeefp.h>.
        (strtold, wcstold): Declare.
        * libc/stdlib/strtold.c: New File.
        * libc/stdlib/wcstold.c: Likewise.
        * libc/configure.in: Add long double check.
        * libc/configure: Regenerate.
        * libc/stdlib/Makefile.am: Add strtold.c and wcstold.c.
        * libc/stdlib/Makefile.in: Regenerate.
        * libc/include/math.h (atanl, cosl, sinl, tanl, tanhl): Declare.
        (frexpl, modfl, ceill, fabsl, floorl, log1pl, expm1l, acosl): Ditto.
        (asinl, atan2l, coshl, sinhl, expl, ldexpl, logl, log10l, powl): Ditto.
        (sqrtl, fmodl, hypotl, copysignl, nanl, ilogbl, asinhl, cbrt): Ditto.
        (nextafterl, rintl, scalbnl, exp2l, scalblnl, tgammal): Ditto.
        (nearbyintl, lrintl, llrintl, roundl, lroundl, llround): Ditto.
        (llroundl, truncl, remquol, fdiml, fmaxl, fminl, fmal, acoshl): Ditto.
        (atanhl, remainderl, lgammal, erfl, erfcl): Ditto.
        * libm/common/atanl.c: New File.
        * libm/common/cosl.c: Likewise.
        * libm/common/sinl.c: Likewise.
        * libm/common/modfl.c: Likewise.
        * libm/common/frexpl.c: Likewise.
        * libm/common/tanhl.c: Likewise.
        * libm/common/tanl.c: Likewise.
        * libm/common/expm1l.c: Likewise.
        * libm/common/log1pl.c: Likewise.
        * libm/common/ceill.c: Likewise.
        * libm/common/fabsl.c: Likewise.
        * libm/common/floorl.c: Likewise.
        * libm/common/acosl.c: Likewise.
        * libm/common/asinl.c: Likewise.
        * libm/common/atan2l.c: Likewise.
        * libm/common/coshl.c: Likewise.
        * libm/common/expl.c: Likewise.
        * libm/common/fmodl.c: Likewise.
        * libm/common/hypotl.c: Likewise.
        * libm/common/ldexpl.c: Likewise.
        * libm/common/log10l.c: Likewise.
        * libm/common/logl.c: Likewise.
        * libm/common/powl.c: Likewise.
        * libm/common/sqrtl.c: Likewise.
        * libm/common/copysignl.c: Likewise.
        * libm/common/ilogbl.c: Likewise.
        * libm/common/nanl.c: Likewise.
        * libm/common/cbrtl.c: Likewise.
        * libm/common/asinhl.c: Likewise.
        * libm/common/nextafterl.c: Likewise.
        * libm/common/rintl.c: Likewise.
        * libm/common/scalbnl.c: Likewise.
        * libm/common/exp2l.c: Likewise.
        * libm/common/fdiml.c: Likewise.
        * libm/common/fmal.c: Likewise.
        * libm/common/fmaxl.c: Likewise.
        * libm/common/fminl.c: Likewise.
        * libm/common/lrintl.c: Likewise.
        * libm/common/lroundl.c: Likewise.
        * libm/common/nearbyintl.c: Likewise.
        * libm/common/remquol.c: Likewise.
        * libm/common/roundl.c: Likewise.
        * libm/common/scalblnl.c: Likewise.
        * libm/common/truncl.c: Likewise.
        * libm/common/acoshl.c: Likewise.
        * libm/common/atanhl.c: Likewise.
        * libm/common/erfcl.c: Likewise.
        * libm/common/erfl.c: Likewise.
        * libm/common/lgammal.c: Likewise.
        * libm/common/remainderl.c: Likewise.
        * libm/common/tgammal.c: Likewise.
        * libm/common/sinhl.c: Likewise.
        * libm/common/llroundl.c: Likewise.
        * libm/configure.in: Add long double check.
        * libm/configure: Regenerate.
        * libm/common/Makefile.am: Add new files.
        * libm/common/Makefile.in: Regenerate.
@
text
@d336 3
a338 3
  defined(__cplusplus)) && defined(LDBL_MANT_DIG) && \
    (DBL_MANT_DIG == LDBL_MANT_DIG && LDBL_MIN_EXP == DBL_MIN_EXP && \
    LDBL_MAX_EXP == DBL_MAX_EXP)
@


1.35
log
@
2008-12-11 Jukka Pietarinen <jukka.pietarinen@@mrf.fi>

        * configure.host: Add lm32
        * libc/include/machine/ieeefp.h: Add __lm32__
        * libc/include/machine/setjmp.h: Add __lm32__
        * libc/machine/configure.in: Add lm32
        * libc/machine/configure: Regenerated.
        * libc/machine/lm32/aclocal.m4: New file.
        * libc/machine/lm32/configure.in: Ditto.
        * libc/machine/lm32/configure: Ditto.
        * libc/machine/lm32/Makefile.am: Ditto.
        * libc/machine/lm32/Makefile.in: Ditto.
        * libc/machine/lm32/setjmp.s: Ditto.
@
text
@d334 7
@


1.35.2.1
log
@Support for ARCompact architecture.
@
text
@a243 3
#ifdef __mxp__
#define  __IEEE_LITTLE_ENDIAN
#endif
@


1.34
log
@* libc/include/machine/ieeefp.h: Fix typo: _DOUBLE_IS_32_BITS
  should be _DOUBLE_IS_32BITS.
@
text
@d152 4
@


1.33
log
@2007-11-07  Dave Brolley  <brolley@@redhat.com>

        * libc/machine/configure: Regenerated to pick up mep-elf changes.

        * Contribute mep-elf from Red Hat
        2006-10-27  DJ Delorie  <dj@@redhat.com>

        * libc/include/machine/setjmp.h: Add MeP support.

        2003-04-17  DJ Delorie  <dj@@redhat.com>

        * configure.host (mep-*-*): Support "long long" type.

        2001-06-06  DJ Delorie  <dj@@redhat.com>

        * libc/include/machine/ieeefp.h (mep): Support little endian too.

        2001-05-14  DJ Delorie  <dj@@redhat.com>

        * configure.host: Add mep's machine_dir.
        * libc/include/setjmp.h: Add mep support.
        * libc/machine/mep: New.
        * libc/machine/mep/setjmp.S: New, support mep's setjmp/longjmp.

        2001-05-04  DJ Delorie  <dj@@redhat.com>

        * configure.host: Add mep.
        * libc/include/machine/ieeefp.h: Ditto.
@
text
@d41 1
a41 1
   _DOUBLE_IS_32_BITS 
@


1.32
log
@
2007-08-28  Hans Kester  <hans.kester@@ellips.nl>

        * configure.host: Added support for x86_64.
        * libc/include/machine/ieeefp.h: Define __IEEE_LITTLE_ENDIAN for x86_64.
        * libc/include/machine/setjmp.h: Define _JBTYPE and _JBLEN for x86_64.
        * libc/machine/x86_64/aclocal.m4: Generated.
        * libc/machine/x86_64/configure.in: New.
        * libc/machine/x86_64/configure: Generated.
        * libc/machine/x86_64/Makefile.am: New.
        * libc/machine/x86_64/Makefile.in: Generated.
        * libc/machine/x86_64/setjmp.S: New.
        * libc/machine/x86_64/memcpy.S: New.
        * libc/machine/x86_64/memset.S: New.
        * libc/machine/configure.in: Added support for x86_64.
        * libc/machine/configure: Regenerated.
@
text
@d313 8
@


1.31
log
@
2007-04-26  Patrick Mansfield <patmans@@us.ibm.com>

        * libc/include/ieeefp.h: use prefixed __ieeefp_ macros that can be
        overridden via machine/ieeefp.h.
        * libc/include/machine/ieeefp.h: Add SPU specific C99 and ieeefp
        macros for isnan and related macros.
        * libc/include/math.h: Allow C99 isfinite, isinf, and isnan to be
        overridden via machine/ieeefp.h.
        * libm/machine/spu/Makefile.am: Add new files.
        * libm/machine/spu/Makefile.in: Autogenerate with new files.
        * libm/machine/spu/sf_fpclassify.c: Add SPU specific __fpclassifyf.
        * libm/machine/spu/sf_finite.c: Add SPU specific finitef.
        * libm/machine/spu/sf_isinf.c: Add SPU specific isinff.
        * libm/machine/spu/sf_isinff.c: Add SPU specific __isinff.
        * libm/machine/spu/sf_isnan.c: Add SPU specific isnanf.
        * libm/machine/spu/sf_isnanf.c: Add SPU specific __isnanf.
        * libm/machine/spu/sf_nan.c: Add SPU specific nanf.
@
text
@d309 4
@


1.30
log
@
2006-11-08  Jie Zhang  <jzhang918@@gmail.com>

        * configure.host: Add support for bfin.
        * libc/include/machine/ieeefp.h: Define __IEEE_LITTLE_ENDIAN for bfin.
        * libc/include/machine/setjmp.h: Define _JBLEN for bfin.
        * libc/machine/bfin/aclocal.m4: Generate.
        * libc/machine/bfin/configure.in: New.
        * libc/machine/bfin/configure: Generate.
        * libc/machine/bfin/Makefile.am: New.
        * libc/machine/bfin/Makefile.in: Generate.
        * libc/machine/bfin/setjmp.S: New.
        * libc/machine/bfin/longjmp.S: New.
        * libc/machine/configure.in: Add bfin support.
        * libc/machine/configure: Generate.
@
text
@d78 20
a99 1

@


1.29
log
@
2006-08-16  Joel Schopp  <jschopp@@austin.ibm.com>

        * configure.host: Add spu support.
        * libc/include/stdint.h: Ditto.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/include/sys/config.h: Ditto.
        * libc/include/sys/types.h: Ditto.
        * libc/machine/spu/Makefile.am: New file.
        * libc/machine/spu/Makefile.in: Ditto.
        * libc/machine/spu/aclocal.m4: Ditto.
        * libc/machine/spu/configure: Ditto.
        * libc/machine/spu/configure.in: Ditto.
        * libc/machine/spu/memcpy.c: Ditto.
        * libc/machine/spu/setjmp.S: Ditto.
@
text
@d286 4
@


1.28
log
@
2005-12-13  Nathan Sidwell  <nathan@@codesourcery.com>

        * libc/include/machine/ieeefp.h (__mt__): Renamed from __ms1__.
        * libc/include/machine/setjmp.h (__mt__): Likewise.
        * libc/machine/mt/setjmp.S: Rename ms1 reference to mt.
        * libc/machine/configure.in: Ditto.
@
text
@d76 5
@


1.27
log
@
2005-08-10  DJ Delorie  <dj@@redhat.com>

        * configure.host: Add m32c support.
        * libc/include/machine/ieeefp.h: Likewise.
        * libc/include/machine/setjmp.h: Likewise.
        * libc/include/sys/config.h: Likewise.
        * libc/machine/m32c: New directory, Renesas R8C/M16C/M32C support.
        * libc/machine/m32c/aclocal.m4: New file.
        * libc/machine/m32c/configure: Ditto.
        * libc/machine/m32c/configure.in: Ditto.
        * libc/machine/m32c/Makefile.am: Ditto.
        * libc/machine/m32c/Makefile.in: Ditto.
        * libc/machine/m32c/setjmp.S: Ditto.
@
text
@d229 1
a229 1
#ifdef __ms1__
@


1.26
log
@        * configure.host: Added entry for ms1*.
        * libc/include/machine/ieeefp.h: Handle ms1.
        * libc/include/machine/setjmp.h (_JBLEN): Define for ms1.
        * libc/machine/ms1/aclocal.m4: New.
        * libc/machine/ms1/configure: New.
        * libc/machine/ms1/configure.in: New.
        * libc/machine/ms1/Makefile.am: New.
        * libc/machine/ms1/Makefile.in: New.
        * libc/machine/ms1/setjmp.S: New.
@
text
@d272 5
@


1.25
log
@
2005-01-27  Hans-Peter Nilsson  <hp@@axis.com>

        * configure.host: Add support for cris-*-* and crisv32-*-*.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/machine/cris/configure.in, libc/machine/cris/Makefile.am,
        libc/machine/cris/libcdtor.c, libc/machine/cris/setjmp.c,
        libc/machine/cris/memmove.c, libc/machine/cris/memcpy.c,
        libc/machine/cris/memset.c, libc/machine/cris/include/pthread.h,
        libc/machine/cris/sys/signal.h, libc/machine/cris/sys/fcntl.h,
        libc/machine/cris/sys/errno.h, libc/machine/cris/aclocal.m4,
        libc/machine/cris/configure, libc/machine/cris/Makefile.in: New
        files.
@
text
@d229 4
@


1.24
log
@
2004-10-05  Tomer Levi  <Tomer.Levi@@nsc.com>

        * configure.host: Add support for crx.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/machine/crx/Makefile.am: New file.
        * libc/machine/crx/configure.in: Ditto.
        * libc/machine/crx/setjmp.S: Ditto.
        * libc/machine/crx/getenv.c: Ditto.
        * libc/machine/crx/aclocal.m4: Generate.
        * libc/machine/crx/configure: Ditto.
        * libc/machine/crx/Makefile.in: Ditto.
        * libc/machine/crx/sys/asm.h: New file.
        * libc/machine/crx/sys/libh.h: Ditto.
        * libc/machine/crx/sys/syscall.h: Ditto.
@
text
@d268 4
@


1.23
log
@Introduce SH2a support.
2004-03-16  Corinna Vinschen  <vinschen@@redhat.com>
* libc/include/machine/ieeefp.h: Define _DOUBLE_IS_32BITS for
__SH2A_SINGLE_ONLY__, too.
* libc/machine/sh/asm.h: Define DELAYED_BRANCHES for __SH2A__, too.
2004-02-24  Corinna Vinschen  <vinschen@@redhat.com>
* libc/sys/sh/crt0.S (start_l): Support sh2a-nofpu.  Fix comments.
2004-02-10  DJ Delorie  <dj@@redhat.com>
* libc/sys/sh/crt0.S (start_l): Support sh2a.
@
text
@d217 4
@


1.22
log
@2003-07-02  Richard Sandiford  <rsandifo@@redhat.com>
* libc/machine/h8300/Makefile.am (lib_a_SOURCES): Add h8sx_strcpy.S.
* libc/machine/h8300/defines.h (LEN): New macro.
* libc/machine/h8300/memcpy.S: Add h8sx version.
* libc/machine/h8300/memset.S: Likewise.
* libc/machine/h8300/strcmp.S: Likewise.
* libc/machine/h8300/setjmp.S: Use h8sx move instructions.
* libc/machine/h8300/h8sx_strcpy.S: New file.
2003-06-30  Richard Sandiford  <rsandifo@@redhat.com>
* libc/include/machine/ieeefp.h: Extend __H8300S__ handling to
__H8300SX__.
* libc/include/machine/setjmp.h: Likewise.
* libc/include/sys/config.h: Likewise.
* libc/machine/h8300/defines.h: Likewise.
* libc/machine/h8300/setjmp.S: Likewise.
* libc/machine/h8300/strcmp.S: Likewise.
* libc/sys/h8300hms/close.S: Likewise.
* libc/sys/h8300hms/fstat.S: Likewise.
* libc/sys/h8300hms/lseek.S: Likewise.
* libc/sys/h8300hms/read.S: Likewise.
* libc/sys/h8300hms/write.S: Likewise.
* libc/sys/h8300hms/crt0.S: Likewise.
* libc/machine/h8300/setarch.h: Use .h8300sx or .h8300sxn if
__H8300SX__ is defined.
* libc/sys/h8300hms/setarch.h: Likewise.
@
text
@d107 1
a107 1
#if defined(__SH2E__) || defined(__SH3E__) || defined(__SH4_SINGLE_ONLY__)
@


1.21
log
@
Remove fixme comment for __arm__ added with last patch.
@
text
@d95 1
a95 1
#if defined (__H8300__) || defined (__H8300H__) || defined (__H8300S__) || defined (__H8500__)
@


1.20
log
@
2004-02-05  Paul Brook  <paul@@codesourcery.com>

        * libc/include/machine/ieeefp.h[__arm__][__VFP_FP__]: Set
        IEEE_{BIG,LITTLE} based on __ARMEL__ flag.
@
text
@d57 1
a57 5
   __VFP_FP__ will be defined, even if soft-float.  
 
   FIXME: long double support is broken for the ARM when __ARMEL__
          is specified.  New long double formats need to be added
          to the long double conversion routines.  */
@


1.19
log
@
2004-02-02  Joel Sherrill  <joel@@oarcorp.com>

        * configure.host: Add support for tic4x.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/machine/tic4x/Makefile.am: New file.
        * libc/machine/tic4x/configure.in: Ditto.
        * libc/machine/tic4x/setjmp.S: Ditto.
        * libc/machine/tic4x/aclocal.m4: Generated.
        * libc/machine/tic4x/configure: Ditto.
        * libc/machine/tic4x/Makefile.in: Ditto.
@
text
@d54 19
a72 5
/* ARM always has big-endian words.  Within those words the byte ordering
   will be big or little endian depending upon the target.  */
#define __IEEE_BIG_ENDIAN
#ifdef __ARMEL__
#define __IEEE_BYTES_LITTLE_ENDIAN
@


1.18
log
@Commit iq2000 port
@
text
@d122 5
@


1.17
log
@Add support for Cirrus Maverick ARM co-processor
@
text
@d237 4
@


1.16
log
@Add sh2e support
@
text
@d53 1
a53 1
#if (defined(__arm__) || defined(__thumb__))
d236 8
@


1.15
log
@Define __IEEE_BIG_ENDIAN, __SMALL_BITFIELDS and _DOUBLE_IS_32BITS for IP2K.
@
text
@d97 1
a97 1
#if defined(__SH3E__) || defined(__SH4_SINGLE_ONLY__)
@


1.14
log
@
2002-07-24  Stephane Carrez  <stcarrez@@nerim.fr>

        * configure.host: Recognize m6811-elf and m6812-elf targets.
        * libc/include/machine/setjmp.h (_JBLEN): Define for 68hc11/68hc12.
        * libc/include/machine/ieeefp.h (__IEEE_BIG_ENDIAN): Define for 68HC11.
        (_DOUBLE_IS_32BITS): Define when compiling with -fshort-double.
        * libc/include/sys/config.h (INT_MAX, UINT_MAX): Define
        according to __INT_MAX__.
        (_POINTER_INT): Define to short.
        * libc/machine/m68hc11/Makefile.am: New file.
        * libc/machine/m68hc11/Makefile.in: New file.
        * libc/machine/m68hc11/configure.in: New file.
        * libc/machine/m68hc11/configure: New file.
        * libc/machine/m68hc11/aclocal.m4: New file.
        * libc/machine/m68hc11/setjmp.S: New file.
@
text
@d231 6
@


1.13
log
@	* libc/argz/argz_replace.c: Include buf_findstr.h.
	* libc/argz/buf_findstr.c: Likewise.
	* libc/argz/envz_entry.c: Include buf_findstr.h.  Cast return
	value to (char *).
	* libc/argz/envz_get.c: Likewise.
	* libc/include/sys/unistd.h: Add getopt and getsubopt declarations.
	* libc/stdlib/Makefile.am (LIB_SOURCES): Add getsubopt.c.
	* libc/stdlib/getsubopt.3: New file.
	* libc/stdlib/getsubopt.c: New file.
	* libc/sys/linux/machine/i386/socketcall.h (__sockcall_base):
	Change esp to ebp.
@
text
@d78 7
@


1.12
log
@
2002-07-15  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/machine/ieeefp.h: Change to only define
        floating point defines (e.g one of __IEEE_BIG_ENDIAN or
        __IEEE_LITTLE_ENDIAN must be defined for each platform).
        * libc/include/sys/config.h: Include <machine/ieeefp.h> and
        remove redundant floating point definitions.
@
text
@d53 1
a53 1
#if defined(__arm__) || defined(__thumb__)
@


1.11
log
@2002-06-18  Dave Brolley  <brolley@@redhat.com>

	From Catherine Moore, Michael Meissner, Richard Sandiford:
	* libc/include/machine/setjmp.h (_JBLEN): Define for __frv__.
	(_JBTYPE): Ditto.
	* libc/include/sys/config.h (__IEEE_BIG_ENDIAN): Ditto.
	(__ATTRIBUTE_IMPURE_PTR__): Ditto.
	* libc/include/machine/ieeefp.h (__IEEE_BIG_ENDIAN): Ditto.
	* configure.host: Support frv-*-*.
	* libc/machine/frv/Makefile.am: New file.
	* libc/machine/frv/configure.in: New file.
	* libc/machine/frv/setjmp.S: New file.
@
text
@d18 3
d22 30
a51 2
   ??? At the moment, there are no equivalent macros for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.  */
d78 1
a78 7
#if defined (__H8300__) || defined (__H8300H__) || defined (__H8300S__)
#define __IEEE_BIG_ENDIAN
#define __SMALL_BITFIELDS
#define _DOUBLE_IS_32BITS
#endif

#ifdef __H8500__
d80 1
a80 1
#define __SMALL_BITFIELDS
d130 4
a137 1
#define __SMALL_BITFIELDS
a154 1
#define __SMALL_BITFIELDS
a170 1
#define __SMALL_BITFIELDS
d183 4
a216 1
#define __SMALL_BITFIELDS
a221 5
#endif

#ifdef __xstormy16__
#define __IEEE_LITTLE_ENDIAN
#define __SMALL_BITFIELDS
@


1.10
log
@	* Various formatting and whitespace changes.
@
text
@d173 4
@


1.9
log
@
2002-01-07 Alan Matsuoka <alanm@@redhat.com>

        * libc/include/machine/ieeefp.h: Configure d10v doubles to
        be 32 bits if __DOUBLE__ == 32  otherwise doubles are 64 bits.
        libc/include/sys/config.h: Ditto.
@
text
@a195 1

@


1.8
log
@In newlib/:
2001-12-22  Geoffrey Keating  <geoffk@@redhat.com>
	    Catherine Moore  <clm@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>
	    Corinna Vinschen  <vinschen@@redhat.com>

	* configure.host: Add support for xstormy16.
	* libc/include/machine/ieeefp.h: Add support for xstormy16.
	* libc/include/machine/setjmp.h: Add support for xstormy16.
	* libc/include/sys/config.h: Add support for xstormy16.
	* libc/machine/xstormy16/Makefile.am: New file.
	* libc/machine/xstormy16/Makefile.in: New file.
	* libc/machine/xstormy16/aclocal.m4: New file.
	* libc/machine/xstormy16/configure: New file.
	* libc/machine/xstormy16/configure.in: New file.
	* libc/machine/xstormy16/setjmp.S: New file.

In libgloss/:
2001-12-22  Geoffrey Keating  <geoffk@@redhat.com>
	    Mark Salter  <msalter@@redhat.com>
	    Catherine Moore  <clm@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* configure.in: Add xstormy16.
	* libnosys/configure.in: Add xstormy16.
	* configure: Regenerated.
	* libnosys/configure: Regenerated.
	* xstormy16/Makefile.in: New file.
	* xstormy16/close.c: New file.
	* xstormy16/configure: New file.
	* xstormy16/configure.in: New file.
	* xstormy16/crt0.s: New file.
	* xstormy16/crt0_stub.s: New file.
	* xstormy16/crti.s: New file.
	* xstormy16/crtn.s: New file.
	* xstormy16/eva_app.c: New file.
	* xstormy16/eva_app.ld: New file.
	* xstormy16/eva_stub.ld: New file.
	* xstormy16/fstat.c: New file.
	* xstormy16/getpid.c: New file.
	* xstormy16/kill.c: New file.
	* xstormy16/lseek.c: New file.
	* xstormy16/open.c: New file.
	* xstormy16/sbrk.c: New file.
	* xstormy16/sim_high.ld: New file.
	* xstormy16/stat.c: New file.
	* xstormy16/syscalls.S: New file.
	* xstormy16/syscalls.m4: New file.
	* xstormy16/unlink.c: New file.
	* xstormy16/xstormy16_stub.c: New file.
@
text
@d141 1
d143 1
@


1.7
log
@
2001-11-12  Hans-Peter Nilsson  <hp@@bitrange.com>

        * libc/include/machine/ieeefp.h: Add support for mmix target.
        * libc/include/machine/setjmp.h: Ditto.
        * configure.host: Ditto.
        * libc/sys/mmixware/Makefile.am, libc/sys/mmixware/_exit.c,
        libc/sys/mmixware/access.c, libc/sys/mmixware/aclocal.m4,
        libc/sys/mmixware/chmod.c, libc/sys/mmixware/chown.c,
        libc/sys/mmixware/close.c, libc/sys/mmixware/configure.in,
        libc/sys/mmixware/creat.c, libc/sys/mmixware/crt0.c,
        libc/sys/mmixware/execv.c, libc/sys/mmixware/execve.c,
        libc/sys/mmixware/fork.c, libc/sys/mmixware/fstat.c,
        libc/sys/mmixware/getpid.c, libc/sys/mmixware/gettime.c,
        libc/sys/mmixware/isatty.c, libc/sys/mmixware/kill.c,
        libc/sys/mmixware/lseek.c, libc/sys/mmixware/open.c,
        libc/sys/mmixware/pipe.c, libc/sys/mmixware/read.c,
        libc/sys/mmixware/sbrk.c, libc/sys/mmixware/setjmp.S,
        libc/sys/mmixware/stat.c, libc/sys/mmixware/sys/syscall.h,
        libc/sys/mmixware/time.c, libc/sys/mmixware/times.c,
        libc/sys/mmixware/unlink.c, libc/sys/mmixware/utime.c,
        libc/sys/mmixware/wait.c, libc/sys/mmixware/write.c: New files.
        * libc/sys/mmixware/configure, libc/sys/mmixware/Makefile.in,
        libc/sys/mmixware/aclocal.m4: Generate.
@
text
@d189 5
@


1.6
log
@Handle ARMs with big endian IEEE words but little endian IEEE bytes
@
text
@d101 4
@


1.5
log
@	* libc/include/machine/ieeefp.h: Comment about new configuration
	macros _FLT_LARGEST_EXPONENT_IS_NORMAL and _FLT_NO_DENORMALS.
	* libm/common/fdlib.h: Define new macros for testing floats.
	* libm/common/sf_*: Use them.
	* libm/math/ef_*: Likewise.
	* libm/math/sf_*: Likewise.
@
text
@d24 1
a24 2
   appears to be big or little endian.  Newlib doesn't seem to care about
   the byte ordering within words.  */
d26 3
@


1.4
log
@
2000-12-04  Joel Sherrill <joel@@OARcorp.com>

        * libc/include/ieeefp.h: Added entries for OpenCores CPUs.
@
text
@d4 18
@


1.3
log
@
Tue Jun 27 15:49:00 2000  Marek Michalkiewicz  <marekm@@linux.org.pl>

        * configure.host: Add support for AVR target.
        * libc/include/machine/ieeefp.h: Likewise.
        * libc/include/sys/config.h: Likewise.
@
text
@d161 5
@


1.2
log
@Add minimal ia64 support.
	* libc/include/machine/ieeefp.h: Add ia64 support.
	* configure.host: Likewise.
@
text
@d155 6
@


1.1
log
@Initial revision
@
text
@d147 7
a153 1

@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
