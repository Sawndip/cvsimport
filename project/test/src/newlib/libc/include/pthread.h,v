head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	newlib-2_2_0:1.12.0.2
	cygwin-1_7_33-release:1.12
	cygwin-1_7_32-release:1.12
	cygwin-1_7_31-release:1.12
	cygwin-1_7_30-release:1.12
	cygwin-1_7_29-release:1.12
	cygwin-1_7_28-release:1.12
	newlib-2_1_0:1.12
	cygwin-1_7_27-release:1.12
	cygwin-1_7_26-release:1.10
	cygwin-1_7_25-release:1.10
	cygwin-1_7_24-release:1.10
	cygwin-1_7_23-release:1.10
	cygwin-1_7_22-release:1.10
	cygwin-1_7_21-release:1.10
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.10.0.2
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	newlib-2_0_0:1.9
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.2
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	newlib-1_20_0:1.9
	cygwin-1_7_9-release:1.9
	cygwin-1_7_8-release:1.9
	newlib-1_19_0:1.9
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.8
	cygwin-1_7_1-release:1.7
	newlib-1_17_0-arc:1.6.0.2
	binutils-arc-20080908-branch:1.4.0.2
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.6
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	cr-0x5f1:1.3.0.6
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	newlib-1_11_0:1.3
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.11.29.23.35.34;	author joel;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.29.23.14.56;	author joel;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.22.21.20.08;	author joel;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.08.14.44.06;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.17.19.22.23;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.17.16.47.02;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.19.17.02.34;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.26.16.15.50;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.13.22.09.27;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.08.13.03.07;	author joel;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.20.19.51.19;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.12.01.24.08;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@2013-11-29  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/include/pthread.h (pthread_cleanup_push): Delete prototype
	and add macro of the same name.
	(pthread_cleanup_pop): Likewise.
	(_pthread_cleanup_context): Define.
	(_pthread_cleanup_push): Likewise.
	(_pthread_cleanup_pop): Likewise.
	(pthread_cleanup_push_defer_np): Define if _GNU_SOURCE is defined.
	(pthread_cleanup_pop_restore_np): Likewise.
	(_pthread_cleanup_push_defer): Likewise.
	(_pthread_cleanup_pop_restore): Likewise.
@
text
@/*  pthread.h
 *
 *  Written by Joel Sherrill <joel@@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2013.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: pthread.h,v 1.11 2013/11/29 23:14:56 joel Exp $
 */

#ifndef __PTHREAD_h
#define __PTHREAD_h

#ifdef __cplusplus
extern "C" {
#endif

#include <unistd.h>

#if defined(_POSIX_THREADS)

#include <sys/types.h>
#include <time.h>
#include <sys/sched.h>
#include <sys/cdefs.h>

struct _pthread_cleanup_context {
  void (*_routine)(void *);
  void *_arg;
  int _canceltype;
  struct _pthread_cleanup_context *_previous;
};

/* Register Fork Handlers */
int	_EXFUN(pthread_atfork,(void (*prepare)(void), void (*parent)(void),
                   void (*child)(void)));
          
/* Mutex Initialization Attributes, P1003.1c/Draft 10, p. 81 */

int	_EXFUN(pthread_mutexattr_init, (pthread_mutexattr_t *__attr));
int	_EXFUN(pthread_mutexattr_destroy, (pthread_mutexattr_t *__attr));
int	_EXFUN(pthread_mutexattr_getpshared,
		(_CONST pthread_mutexattr_t *__attr, int  *__pshared));
int	_EXFUN(pthread_mutexattr_setpshared,
		(pthread_mutexattr_t *__attr, int __pshared));

#if defined(_UNIX98_THREAD_MUTEX_ATTRIBUTES)

/* Single UNIX Specification 2 Mutex Attributes types */

int _EXFUN(pthread_mutexattr_gettype,
		(_CONST pthread_mutexattr_t *__attr, int *__kind));
int _EXFUN(pthread_mutexattr_settype,
		(pthread_mutexattr_t *__attr, int __kind));

#endif

/* Initializing and Destroying a Mutex, P1003.1c/Draft 10, p. 87 */

int	_EXFUN(pthread_mutex_init,
	(pthread_mutex_t *__mutex, _CONST pthread_mutexattr_t *__attr));
int	_EXFUN(pthread_mutex_destroy, (pthread_mutex_t *__mutex));

/* This is used to statically initialize a pthread_mutex_t. Example:
  
    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
 */

#define PTHREAD_MUTEX_INITIALIZER  ((pthread_mutex_t) 0xFFFFFFFF)

/*  Locking and Unlocking a Mutex, P1003.1c/Draft 10, p. 93
    NOTE: P1003.4b/D8 adds pthread_mutex_timedlock(), p. 29 */

int	_EXFUN(pthread_mutex_lock, (pthread_mutex_t *__mutex));
int	_EXFUN(pthread_mutex_trylock, (pthread_mutex_t *__mutex));
int	_EXFUN(pthread_mutex_unlock, (pthread_mutex_t *__mutex));

#if defined(_POSIX_TIMEOUTS)

int	_EXFUN(pthread_mutex_timedlock,
	(pthread_mutex_t *__mutex, _CONST struct timespec *__timeout));

#endif /* _POSIX_TIMEOUTS */

/* Condition Variable Initialization Attributes, P1003.1c/Draft 10, p. 96 */
 
int	_EXFUN(pthread_condattr_init, (pthread_condattr_t *__attr));
int	_EXFUN(pthread_condattr_destroy, (pthread_condattr_t *__attr));
int	_EXFUN(pthread_condattr_getpshared,
		(_CONST pthread_condattr_t *__attr, int *__pshared));
int	_EXFUN(pthread_condattr_setpshared,
		(pthread_condattr_t *__attr, int __pshared));
 
/* Initializing and Destroying a Condition Variable, P1003.1c/Draft 10, p. 87 */
 
int	_EXFUN(pthread_cond_init,
	(pthread_cond_t *__cond, _CONST pthread_condattr_t *__attr));
int	_EXFUN(pthread_cond_destroy, (pthread_cond_t *__mutex));
 
/* This is used to statically initialize a pthread_cond_t. Example:
  
    pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
 */
 
#define PTHREAD_COND_INITIALIZER  ((pthread_cond_t) 0xFFFFFFFF)
 
/* Broadcasting and Signaling a Condition, P1003.1c/Draft 10, p. 101 */
 
int	_EXFUN(pthread_cond_signal, (pthread_cond_t *__cond));
int	_EXFUN(pthread_cond_broadcast, (pthread_cond_t *__cond));
 
/* Waiting on a Condition, P1003.1c/Draft 10, p. 105 */
 
int	_EXFUN(pthread_cond_wait,
	(pthread_cond_t *__cond, pthread_mutex_t *__mutex));
 
int	_EXFUN(pthread_cond_timedwait,
		(pthread_cond_t *__cond, pthread_mutex_t *__mutex,
		_CONST struct timespec *__abstime));
 
#if defined(_POSIX_THREAD_PRIORITY_SCHEDULING)

/* Thread Creation Scheduling Attributes, P1003.1c/Draft 10, p. 120 */

int	_EXFUN(pthread_attr_setscope,
		(pthread_attr_t *__attr, int __contentionscope));
int	_EXFUN(pthread_attr_getscope,
	(_CONST pthread_attr_t *__attr, int *__contentionscope));
int	_EXFUN(pthread_attr_setinheritsched,
	(pthread_attr_t *__attr, int __inheritsched));
int	_EXFUN(pthread_attr_getinheritsched,
	(_CONST pthread_attr_t *__attr, int *__inheritsched));
int	_EXFUN(pthread_attr_setschedpolicy,
	(pthread_attr_t *__attr, int __policy));
int	_EXFUN(pthread_attr_getschedpolicy,
	(_CONST pthread_attr_t *__attr, int *__policy));

#endif /* defined(_POSIX_THREAD_PRIORITY_SCHEDULING) */

int	_EXFUN(pthread_attr_setschedparam,
	(pthread_attr_t *__attr, _CONST struct sched_param *__param));
int	_EXFUN(pthread_attr_getschedparam,
	(_CONST pthread_attr_t *__attr, struct sched_param *__param));

#if defined(_POSIX_THREAD_PRIORITY_SCHEDULING)

/* Dynamic Thread Scheduling Parameters Access, P1003.1c/Draft 10, p. 124 */

int	_EXFUN(pthread_getschedparam,
	(pthread_t __pthread, int *__policy, struct sched_param *__param));
int	_EXFUN(pthread_setschedparam,
	(pthread_t __pthread, int __policy, struct sched_param *__param));

#endif /* defined(_POSIX_THREAD_PRIORITY_SCHEDULING) */

#if defined(_POSIX_THREAD_PRIO_INHERIT) || defined(_POSIX_THREAD_PRIO_PROTECT)

/* Mutex Initialization Scheduling Attributes, P1003.1c/Draft 10, p. 128 */
 
int	_EXFUN(pthread_mutexattr_setprotocol,
	(pthread_mutexattr_t *__attr, int __protocol));
int	_EXFUN(pthread_mutexattr_getprotocol,
	(_CONST pthread_mutexattr_t *__attr, int *__protocol));
int	_EXFUN(pthread_mutexattr_setprioceiling,
	(pthread_mutexattr_t *__attr, int __prioceiling));
int	_EXFUN(pthread_mutexattr_getprioceiling,
	(_CONST pthread_mutexattr_t *__attr, int *__prioceiling));

#endif /* _POSIX_THREAD_PRIO_INHERIT || _POSIX_THREAD_PRIO_PROTECT */

#if defined(_POSIX_THREAD_PRIO_PROTECT)

/* Change the Priority Ceiling of a Mutex, P1003.1c/Draft 10, p. 131 */

int	_EXFUN(pthread_mutex_setprioceiling,
	(pthread_mutex_t *__mutex, int __prioceiling, int *__old_ceiling));
int	_EXFUN(pthread_mutex_getprioceiling,
	(pthread_mutex_t *__mutex, int *__prioceiling));

#endif /* _POSIX_THREAD_PRIO_PROTECT */

/* Thread Creation Attributes, P1003.1c/Draft 10, p, 140 */

int	_EXFUN(pthread_attr_init, (pthread_attr_t *__attr));
int	_EXFUN(pthread_attr_destroy, (pthread_attr_t *__attr));
int	_EXFUN(pthread_attr_setstack, (pthread_attr_t *attr,
	void *__stackaddr, size_t __stacksize));
int	_EXFUN(pthread_attr_getstack, (_CONST pthread_attr_t *attr,
	void **__stackaddr, size_t *__stacksize));
int	_EXFUN(pthread_attr_getstacksize,
	(_CONST pthread_attr_t *__attr, size_t *__stacksize));
int	_EXFUN(pthread_attr_setstacksize,
	(pthread_attr_t *__attr, size_t __stacksize));
int	_EXFUN(pthread_attr_getstackaddr,
	(_CONST pthread_attr_t *__attr, void **__stackaddr));
int	_EXFUN(pthread_attr_setstackaddr,
	(pthread_attr_t  *__attr, void *__stackaddr));
int	_EXFUN(pthread_attr_getdetachstate,
	(_CONST pthread_attr_t *__attr, int *__detachstate));
int	_EXFUN(pthread_attr_setdetachstate,
	(pthread_attr_t *__attr, int __detachstate));
int	_EXFUN(pthread_attr_getguardsize,
	(_CONST pthread_attr_t *__attr, size_t *__guardsize));
int	_EXFUN(pthread_attr_setguardsize,
	(pthread_attr_t *__attr, size_t __guardsize));

/* POSIX thread APIs beyond the POSIX standard but provided 
 * in GNU/Linux. They may be provided by other OSes for
 * compatibility.
 */
#if defined(__GNU_VISIBLE)
#if defined(__rtems__) 
int	_EXFUN(pthread_attr_setaffinity_np,
	(pthread_attr_t *__attr, size_t __cpusetsize, 
	const cpu_set_t *__cpuset));
int 	_EXFUN(pthread_attr_getaffinity_np,
	(const pthread_attr_t *__attr, size_t __cpusetsize,
	cpu_set_t *__cpuset));

int	_EXFUN(pthread_setaffinity_np,
	(pthread_t __id, size_t __cpusetsize, const cpu_set_t *__cpuset));
int	_EXFUN(pthread_getaffinity_np,
	(const pthread_t __id, size_t __cpusetsize, cpu_set_t *__cpuset));

int	_EXFUN(pthread_getattr_np,
	(pthread_t __id, pthread_attr_t *__attr));
#endif /* defined(__rtems__) */
#endif /* defined(__GNU_VISIBLE) */

/* Thread Creation, P1003.1c/Draft 10, p. 144 */

int	_EXFUN(pthread_create,
	(pthread_t *__pthread, _CONST pthread_attr_t  *__attr,
	void *(*__start_routine)( void * ), void *__arg));

/* Wait for Thread Termination, P1003.1c/Draft 10, p. 147 */

int	_EXFUN(pthread_join, (pthread_t __pthread, void **__value_ptr));

/* Detaching a Thread, P1003.1c/Draft 10, p. 149 */

int	_EXFUN(pthread_detach, (pthread_t __pthread));

/* Thread Termination, p1003.1c/Draft 10, p. 150 */

void	_EXFUN(pthread_exit, (void *__value_ptr));

/* Get Calling Thread's ID, p1003.1c/Draft 10, p. XXX */

pthread_t	_EXFUN(pthread_self, (void));

/* Compare Thread IDs, p1003.1c/Draft 10, p. 153 */

int	_EXFUN(pthread_equal, (pthread_t __t1, pthread_t __t2));

/* Dynamic Package Initialization */

/* This is used to statically initialize a pthread_once_t. Example:
  
    pthread_once_t once = PTHREAD_ONCE_INIT;
  
    NOTE:  This is named inconsistently -- it should be INITIALIZER.  */
 
#define PTHREAD_ONCE_INIT  { 1, 0 }  /* is initialized and not run */
 
int	_EXFUN(pthread_once,
	(pthread_once_t *__once_control, void (*__init_routine)(void)));

/* Thread-Specific Data Key Create, P1003.1c/Draft 10, p. 163 */

int	_EXFUN(pthread_key_create,
	(pthread_key_t *__key, void (*__destructor)( void * )));

/* Thread-Specific Data Management, P1003.1c/Draft 10, p. 165 */

int	_EXFUN(pthread_setspecific,
	(pthread_key_t __key, _CONST void *__value));
void *	_EXFUN(pthread_getspecific, (pthread_key_t __key));

/* Thread-Specific Data Key Deletion, P1003.1c/Draft 10, p. 167 */

int	_EXFUN(pthread_key_delete, (pthread_key_t __key));

/* Execution of a Thread, P1003.1c/Draft 10, p. 181 */

#define PTHREAD_CANCEL_ENABLE  0
#define PTHREAD_CANCEL_DISABLE 1

#define PTHREAD_CANCEL_DEFERRED 0
#define PTHREAD_CANCEL_ASYNCHRONOUS 1

#define PTHREAD_CANCELED ((void *) -1)

int	_EXFUN(pthread_cancel, (pthread_t __pthread));

/* Setting Cancelability State, P1003.1c/Draft 10, p. 183 */

int	_EXFUN(pthread_setcancelstate, (int __state, int *__oldstate));
int	_EXFUN(pthread_setcanceltype, (int __type, int *__oldtype));
void 	_EXFUN(pthread_testcancel, (void));

/* Establishing Cancellation Handlers, P1003.1c/Draft 10, p. 184 */

void	_EXFUN(_pthread_cleanup_push,
	(struct _pthread_cleanup_context *_context,
	void (*_routine)(void *), void *_arg));

void	_EXFUN(_pthread_cleanup_pop,
	(struct _pthread_cleanup_context *_context,
	int _execute));

/* It is intentional to open and close the scope in two different macros */
#define pthread_cleanup_push(_routine, _arg) \
  do { \
    struct _pthread_cleanup_context _pthread_clup_ctx; \
    _pthread_cleanup_push(&_pthread_clup_ctx, (_routine), (_arg))

#define pthread_cleanup_pop(_execute) \
    _pthread_cleanup_pop(&_pthread_clup_ctx, (_execute)); \
  } while (0)

#if defined(_GNU_SOURCE)
void	_EXFUN(_pthread_cleanup_push_defer,
	(struct _pthread_cleanup_context *_context,
	void (*_routine)(void *), void *_arg));

void	_EXFUN(_pthread_cleanup_pop_restore,
	(struct _pthread_cleanup_context *_context,
	int _execute));

/* It is intentional to open and close the scope in two different macros */
#define pthread_cleanup_push_defer_np(_routine, _arg) \
  do { \
    struct _pthread_cleanup_context _pthread_clup_ctx; \
    _pthread_cleanup_push_defer(&_pthread_clup_ctx, (_routine), (_arg))

#define pthread_cleanup_pop_restore_np(_execute) \
    _pthread_cleanup_pop_restore(&_pthread_clup_ctx, (_execute)); \
  } while (0)
#endif /* defined(_GNU_SOURCE) */

#if defined(_POSIX_THREAD_CPUTIME)
 
/* Accessing a Thread CPU-time Clock, P1003.4b/D8, p. 58 */
 
int	_EXFUN(pthread_getcpuclockid,
	(pthread_t __pthread_id, clockid_t *__clock_id));
 
#endif /* defined(_POSIX_THREAD_CPUTIME) */


#endif /* defined(_POSIX_THREADS) */

#if defined(_POSIX_BARRIERS)

int	_EXFUN(pthread_barrierattr_init, (pthread_barrierattr_t *__attr));
int	_EXFUN(pthread_barrierattr_destroy, (pthread_barrierattr_t *__attr));
int	_EXFUN(pthread_barrierattr_getpshared,
	(_CONST pthread_barrierattr_t *__attr, int *__pshared));
int	_EXFUN(pthread_barrierattr_setpshared,
	(pthread_barrierattr_t *__attr, int __pshared));

#define PTHREAD_BARRIER_SERIAL_THREAD -1

int	_EXFUN(pthread_barrier_init,
	(pthread_barrier_t *__barrier,
	_CONST pthread_barrierattr_t *__attr, unsigned __count));
int	_EXFUN(pthread_barrier_destroy, (pthread_barrier_t *__barrier));
int	_EXFUN(pthread_barrier_wait,(pthread_barrier_t *__barrier));

#endif /* defined(_POSIX_BARRIERS) */

#if defined(_POSIX_SPIN_LOCKS)

int	_EXFUN(pthread_spin_init,
	(pthread_spinlock_t *__spinlock, int __pshared));
int	_EXFUN(pthread_spin_destroy, (pthread_spinlock_t *__spinlock));
int	_EXFUN(pthread_spin_lock, (pthread_spinlock_t *__spinlock));
int	_EXFUN(pthread_spin_trylock, (pthread_spinlock_t *__spinlock));
int	_EXFUN(pthread_spin_unlock, (pthread_spinlock_t *__spinlock));

#endif /* defined(_POSIX_SPIN_LOCKS) */

#if defined(_POSIX_READER_WRITER_LOCKS)

/* This is used to statically initialize a pthread_rwlock_t. Example:
  
    pthread_mutex_t mutex = PTHREAD_RWLOCK_INITIALIZER;
 */

#define PTHREAD_RWLOCK_INITIALIZER  ((pthread_rwlock_t) 0xFFFFFFFF)

int	_EXFUN(pthread_rwlockattr_init, (pthread_rwlockattr_t *__attr));
int	_EXFUN(pthread_rwlockattr_destroy, (pthread_rwlockattr_t *__attr));
int	_EXFUN(pthread_rwlockattr_getpshared,
	(_CONST pthread_rwlockattr_t *__attr, int *__pshared));
int	_EXFUN(pthread_rwlockattr_setpshared,
	(pthread_rwlockattr_t *__attr, int __pshared));

int	_EXFUN(pthread_rwlock_init,
	(pthread_rwlock_t *__rwlock, _CONST pthread_rwlockattr_t *__attr));
int	_EXFUN(pthread_rwlock_destroy, (pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_rdlock,(pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_tryrdlock,(pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_timedrdlock,
        (pthread_rwlock_t *__rwlock, _CONST struct timespec *__abstime));
int	_EXFUN(pthread_rwlock_unlock,(pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_wrlock,(pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_trywrlock,(pthread_rwlock_t *__rwlock));
int	_EXFUN(pthread_rwlock_timedwrlock,
        (pthread_rwlock_t *__rwlock, _CONST struct timespec *__abstime));

#endif /* defined(_POSIX_READER_WRITER_LOCKS) */


#ifdef __cplusplus
}
#endif

#endif
/* end of include file */
@


1.11
log
@2013-11-29  Jennifer Averett <jennifer.averett@@oarcorp.com>

	* libc/include/pthread.h (pthread_attr_setaffinity_np):
	Add pthread SMP affinity attributes to methods to RTEMS for
	compatibility with GNU/Linux.
	(pthread_attr_getaffinity_np): Likewise.
	(pthread_setaffinity_np): Likewise.
	(pthread_getaffinity_np): Likewise.
	(pthread_getattr_np): Add for GNU/Linux compatibility.
	* libc/include/sys/types.h: Add cpuset to pthread_attr_t for RTEMS.
	* libc/include/sys/cdefs.h (_GNU_SOURCE): Defining _GNU_SOURCE
	turns on all _XXX_VISBLE feature flags.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.10 2013/01/22 21:20:08 joel Exp $
d37 7
d314 37
a350 3
void 	_EXFUN(pthread_cleanup_push,
	(void (*__routine)( void * ), void *__arg));
void 	_EXFUN(pthread_cleanup_pop, (int __execute));
@


1.10
log
@2013-01-22  Joel Sherrill <joel.sherrill@@oarcorp.com>

	* libc/include/pthread.h: Add PTHREAD_RWLOCK_INITIALIZER.
	Fix typo on PTHREAD_COJND_INITIALIZER.
@
text
@d5 1
a5 1
 *  COPYRIGHT (c) 1989-2010.
d18 1
a18 1
 *  $Id: pthread.h,v 1.9 2010/12/08 14:44:06 corinna Exp $
d35 1
d210 23
@


1.9
log
@	* include/sys/types.h: Add #if defined(__rtems__) around
	pthread_attr_t.guardsize.

	* include/pthread.h: Add pthread_attr_setstack, pthread_attr_getstack,
	pthread_attr_getguardsize, pthread_attr_setguardsize.
	* include/sys/types.h (pthread_attr_t): Add guardsize.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.8 2009/12/17 19:22:23 jjohnstn Exp $
d107 1
a107 1
#define PTHREAD_COND_INITIALIZER  ((pthread_mutex_t) 0xFFFFFFFF)
d331 7
@


1.8
log
@
2009-12-17  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/include/pthread.h: Add pthread_atfork, pthread_rwlock_unlock
        * libc/include/sys/stat.h: Use struct timespec st_*tim,
        blksize_t st_blksize, blkcnt_t st_blocks.
        Add st_*time compatibility macros.
@
text
@d5 1
a5 1
 *  COPYRIGHT (c) 1989-2000.
d18 1
a18 1
 *  $Id: pthread.h,v 1.7 2009/06/17 16:47:02 jjohnstn Exp $
d188 4
d195 1
a195 1
	(pthread_attr_t *__attr, size_t stacksize));
d204 4
@


1.7
log
@
2009-06-17  Michael Eager <eager@@eagercon.com>

        * libc/include/pthread.h: Support XMK (Xilinx) BSP, add RTEMS to
        PTHREAD_MUTEX_NORMAL.
        * libc/include/sys/features.h: Same.
        * libc/include/sys/types.h: Same.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.6 2008/11/19 17:02:34 jjohnstn Exp $
d36 4
a39 15
/* Register Fork Handlers, P1003.1c/Draft 10, P1003.1c/Draft 10, p. 27
  
    If an OS does not support processes, then it falls under this provision
    and may not provide pthread_atfork():
  
    "Either the implementation shall support the pthread_atfork() function
     as described above or the pthread_atfork() funciton shall not be 
     provided."
  
    NOTE: RTEMS does not provide pthread_atfork().  */

#if !defined(__rtems__) && !defined(__XMK__)
#warning "Add pthread_atfork() prototype"
#endif

d337 1
@


1.6
log
@
2008-11-19  Ralf Corsepius  <ralf.corsepius@@rtems.org>

        * libc/include/pthread.h: Remove prototypes for
        pthread_attr_getcputime and pthread_attr_setcputime which
        were proposed but never approved by the POSIX standard.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.5 2008/09/26 16:15:50 jjohnstn Exp $
d47 1
a47 1
#if !defined(__rtems__)
@


1.5
log
@
2008-09-25  Raphael Derossa Pereira  <raphaelpereira@@gmail.com>

        * libc/include/pthread.h[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add
        new pthread_mutexattr_gettype and pthread_mutexattr_settype
        prototypes.
        * libc/include/sys/types.h[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add
        new mutex type values.
        (pthread_mutexattr_t)[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add type
        field.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.4 2006/09/13 22:09:27 jjohnstn Exp $
a296 8
/* CPU-time Clock Thread Creation Attribute, P1003.4b/D8, p. 59 */

int	_EXFUN(pthread_attr_setcputime,
	(pthread_attr_t *__attr, int __clock_allowed));

int	_EXFUN(pthread_attr_getcputime,
	(pthread_attr_t *__attr, int *__clock_allowed));

@


1.4
log
@
2006-09-13  Joel Sherrill <joel@@oarcorp.com>

        * libc/include/pthread.h: Add pthread barriers,
        rwlocks, and spinlocks.  Change const to
        _CONST and prefix parameter names with
        an underscore.
        * libc/include/sys/types.h: Add id and attribute
        types for barriers, wrlocks, and spinlocks.
        * libc/include/sys/features.h: Enable barriers,
        wrlocks, and spinlocks for RTEMS.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.3 2002/10/08 13:03:07 joel Exp $
d60 11
@


1.3
log
@2002-10-07	Joel Sherrill <joel@@OARcorp.com>

	* libc/include/pthread.h: Define PTHREAD_CANCELED.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.2 2002/06/20 19:51:19 fitzsim Exp $
d53 2
a54 2
int	_EXFUN(pthread_mutexattr_init, (pthread_mutexattr_t *attr));
int	_EXFUN(pthread_mutexattr_destroy, (pthread_mutexattr_t *attr));
d56 1
a56 1
		(const pthread_mutexattr_t *attr, int  *pshared));
d58 1
a58 1
		(pthread_mutexattr_t *attr, int pshared));
d63 2
a64 2
	(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr));
int	_EXFUN(pthread_mutex_destroy, (pthread_mutex_t *mutex));
d76 3
a78 3
int	_EXFUN(pthread_mutex_lock, (pthread_mutex_t *mutex));
int	_EXFUN(pthread_mutex_trylock, (pthread_mutex_t *mutex));
int	_EXFUN(pthread_mutex_unlock, (pthread_mutex_t *mutex));
d83 1
a83 1
	(pthread_mutex_t *mutex, const struct timespec *timeout));
d89 2
a90 2
int	_EXFUN(pthread_condattr_init, (pthread_condattr_t *attr));
int	_EXFUN(pthread_condattr_destroy, (pthread_condattr_t *attr));
d92 1
a92 1
		(const pthread_condattr_t *attr, int *pshared));
d94 1
a94 1
		(pthread_condattr_t *attr, int pshared));
d99 2
a100 2
	(pthread_cond_t *cond, const pthread_condattr_t *attr));
int	_EXFUN(pthread_cond_destroy, (pthread_cond_t *mutex));
d111 2
a112 2
int	_EXFUN(pthread_cond_signal, (pthread_cond_t *cond));
int	_EXFUN(pthread_cond_broadcast, (pthread_cond_t *cond));
d117 1
a117 1
	(pthread_cond_t *cond, pthread_mutex_t *mutex));
d120 2
a121 2
		(pthread_cond_t *cond, pthread_mutex_t *mutex,
		const struct timespec *abstime));
d128 1
a128 1
		(pthread_attr_t *attr, int contentionscope));
d130 1
a130 1
	(const pthread_attr_t *attr, int *contentionscope));
d132 1
a132 1
		(pthread_attr_t *attr, int inheritsched));
d134 3
a136 2
		(const pthread_attr_t *attr, int *inheritsched));
int	_EXFUN(pthread_attr_setschedpolicy, (pthread_attr_t *attr, int policy));
d138 1
a138 1
	(const pthread_attr_t *attr, int *policy));
d143 1
a143 1
	(pthread_attr_t *attr, const struct sched_param *param));
d145 1
a145 1
	(const pthread_attr_t *attr, struct sched_param *param));
d152 1
a152 1
	(pthread_t thread, int *policy, struct sched_param *param));
d154 1
a154 1
	(pthread_t thread, int policy, struct sched_param *param));
d163 1
a163 1
	(pthread_mutexattr_t *attr, int protocol));
d165 1
a165 1
		(const pthread_mutexattr_t *attr, int *protocol));
d167 1
a167 1
	(pthread_mutexattr_t *attr, int prioceiling));
d169 1
a169 1
	(const pthread_mutexattr_t *attr, int *prioceiling));
d178 1
a178 1
	(pthread_mutex_t *mutex, int prioceiling, int *old_ceiling));
d180 1
a180 1
	(pthread_mutex_t *mutex, int *prioceiling));
d186 2
a187 2
int	_EXFUN(pthread_attr_init, (pthread_attr_t *attr));
int	_EXFUN(pthread_attr_destroy, (pthread_attr_t *attr));
d189 1
a189 1
	(const pthread_attr_t *attr, size_t *stacksize));
d191 1
a191 1
	(pthread_attr_t *attr, size_t stacksize));
d193 1
a193 1
	(const pthread_attr_t *attr, void **stackaddr));
d195 1
a195 1
	(pthread_attr_t  *attr, void *stackaddr));
d197 1
a197 1
	(const pthread_attr_t *attr, int *detachstate));
d199 1
a199 1
	(pthread_attr_t *attr, int detachstate));
d204 2
a205 2
	(pthread_t *thread, const pthread_attr_t  *attr,
	void *(*start_routine)( void * ), void *arg));
d209 1
a209 1
int	_EXFUN(pthread_join, (pthread_t thread, void **value_ptr));
d213 1
a213 1
int	_EXFUN(pthread_detach, (pthread_t thread));
d217 1
a217 1
void	_EXFUN(pthread_exit, (void *value_ptr));
d225 1
a225 1
int	_EXFUN(pthread_equal, (pthread_t t1, pthread_t t2));
d238 1
a238 1
	(pthread_once_t *once_control, void (*init_routine)(void)));
d243 1
a243 1
	(pthread_key_t *key, void (*destructor)( void * )));
d247 3
a249 2
int	_EXFUN(pthread_setspecific, (pthread_key_t key, const void *value));
void *	_EXFUN(pthread_getspecific, (pthread_key_t key));
d253 1
a253 1
int	_EXFUN(pthread_key_delete, (pthread_key_t key));
d265 1
a265 1
int	_EXFUN(pthread_cancel, (pthread_t thread));
d269 2
a270 2
int	_EXFUN(pthread_setcancelstate, (int state, int *oldstate));
int	_EXFUN(pthread_setcanceltype, (int type, int *oldtype));
d275 3
a277 2
void 	_EXFUN(pthread_cleanup_push, (void (*routine)( void * ), void *arg));
void 	_EXFUN(pthread_cleanup_pop, (int execute));
d284 1
a284 1
	(pthread_t thread_id, clockid_t *clock_id));
d289 1
a289 1
	(pthread_attr_t *attr, int clock_allowed));
d292 1
a292 1
	(pthread_attr_t *attr, int *clock_allowed));
d296 1
d299 54
@


1.2
log
@	* Makefile.am (LIB_OBJECTLISTS): Add
	libc/search/objectlist.awk.in.
	* libc/Makefile.am (SUBDIRS): Add search.
	(SUBLIBS): Add search/libsearch.la.
	* libc/configure.in (AC_OUTPUT): Add search/Makefile.
	* libc/search: New directory.
	* libc/search/Makefile.am: New file.
	* libc/search/extern.h: New file.
	* libc/search/hash.c: New file.
	* libc/search/hash.h: New file.
	* libc/search/hash_bigkey.c: New file.
	* libc/search/hash_buf.c: New file.
	* libc/search/hash_func.c: New file.
	* libc/search/hash_log2.c: New file.
	* libc/search/hash_page.c: New file.
	* libc/search/hcreate.3: New file.
	* libc/search/hcreate.c: New file.
	* libc/search/hcreate.c~: New file.
	* libc/search/hcreate_r.c: New file.
	* libc/search/ndbm.c: New file.
	* libc/search/page.h: New file.
	* libc/search/tdelete.c: New file.
	* libc/search/tdestroy.c: New file.
	* libc/search/tfind.c: New file.
	* libc/search/tsearch.3: New file.
	* libc/search/tsearch.c: New file.
	* libc/search/twalk.c: New file.
	* libc/include/db.h: New file.
	* libc/include/ndbm.h: New file.
	* libc/include/search.h: New file.
	* libc/include/sys/queue.h: New file.
	* libc/include/sys/cdefs.h: New file.
	* libc/include/sys/param.h
	[__IEEE_LITTLE_ENDIAN,__IEEE_BIG_ENDIAN]: Set BYTE_ORDER to
	LITTLE_ENDIAN or BIG_ENDIAN.
	* libc/include/sys/errno.h (EFTYPE): New macro.
	* libc/search/bsearch.c: Move from libc/stdlib.
	* libc/search/qsort.c: Likewise.
	* libc/stdlib/Makefile.am (LIB_SOURCES): Remove bsearch.c and
	qsort.c.
	(CHEWOUT_FILES): Remove bsearch.def and qsort.def.
	* libc/stdlib/stdlib.tex: Remove references to bsearch and qsort.
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.1 2000/12/12 01:34:17 jjohnstn Exp $
d260 2
@


1.1
log
@
2000-12-11  Joel Sherrill <joel@@OARcorp.com>

        * Merge RTEMS specific .h files into main libc/include.
        * libc/sys/rtems/include/signal.h: Removed.
        * libc/sys/rtems/include/time.h: Removed.
        * libc/sys/rtems/sys/features.h: Removed.
        * libc/sys/rtems/sys/sched.h: Removed.
        * libc/sys/rtems/sys/siginfo.h: Removed.
        * libc/sys/rtems/sys/signal.h: Removed.
        * libc/sys/rtems/sys/time.h: Removed.
        * libc/sys/rtems/sys/times.h: Removed.
        definitions for time_t and clock_t since these are
        no longer in time.h.
        * libc/include/pthread.h: New file.
        * libc/include/sys/sched.h: New file.
        * libc/include/sys/features.h: New file.
        * libc/include/time.h: Removed duplicate definition of clock_t
        and time_t, get them from <sys/types.h> instead.  Add prototypes        for POSIX clock and timer functionality.
        * libc/sys/linux/sys/types.h: Changed to include
        * libc/include/machine/types.h: Add _CLOCKID_T_ and _TIMER_T_.
        * libc/include/sys/signal.h: Add more complete set of POSIX
        signal functionality including real-time and threaded signals.
        * libc/include/sys/types.h: Add clock_t, time_t, struct
        timespec, and struct itimerspec.  Centralizing these makes
        things cleaner.  RTEMS uses 64-bit dev_t.
        Added numerous primitive definitions
        for pthreads including macros, pthread_attr_t,
        pthread_mutexattr_t, pthread_condattr_t, pthread_key_t,
        pthread_once_t, and pthread_t.
        * libc/include/sys/unistd.h: Added getlogin_r() prototype.
        If RTEMS follow POSIX on read(), write() and sbrk() prototype.
        Feature flags removed and moved to new file <sys/features.h>.
        Full set of POSIX sysconf() constants
@
text
@d18 1
a18 1
 *  $Id: pthread.h,v 1.7 1999/04/26 18:22:08 joel Exp $
@

