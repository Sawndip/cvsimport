head	1.22;
access;
symbols
	cygwin-1_7_35-release:1.22
	cygwin-1_7_34-release:1.22
	newlib-2_2_0:1.22.0.6
	cygwin-1_7_33-release:1.22
	cygwin-1_7_32-release:1.22
	cygwin-1_7_31-release:1.22
	cygwin-1_7_30-release:1.22
	cygwin-1_7_29-release:1.22
	cygwin-1_7_28-release:1.22
	newlib-2_1_0:1.22
	cygwin-1_7_27-release:1.22
	cygwin-1_7_26-release:1.22
	cygwin-1_7_25-release:1.22
	cygwin-1_7_24-release:1.22
	cygwin-1_7_23-release:1.22
	cygwin-1_7_22-release:1.22
	cygwin-1_7_21-release:1.22
	cygwin-1_7_20-release:1.22
	cygwin-1_7_19-release:1.22
	cygwin-64bit-postmerge:1.22
	cygwin-64bit-premerge-branch:1.22.0.4
	cygwin-64bit-premerge:1.22
	cygwin-1_7_18-release:1.22
	newlib-2_0_0:1.22
	cygwin-1_7_17-release:1.22
	cygwin-64bit-branch:1.22.0.2
	cygwin-1_7_16-release:1.22
	cygwin-1_7_15-release:1.22
	cygwin-1_7_14_2-release:1.22
	cygwin-1_7_14-release:1.22
	cygwin-1_7_12-release:1.22
	cygwin-1_7_11-release:1.22
	cygwin-1_7_10-release:1.22
	newlib-1_20_0:1.22
	cygwin-1_7_9-release:1.22
	cygwin-1_7_8-release:1.22
	newlib-1_19_0:1.22
	cygwin-1_7_7-release:1.22
	cygwin-1_7_5-release:1.22
	cygwin-1_7_4-release:1.22
	cygwin-1_7_3-release:1.22
	cygwin-1_7_2-release:1.22
	newlib-1_18_0:1.22
	cygwin-1_7_1-release:1.22
	newlib-1_17_0-arc:1.13.0.2
	binutils-arc-20080908-branch:1.11.0.2
	binutils-arc-20080908-branchpoint:1.11
	newlib-1_17_0:1.13
	newlib-1_16_0:1.9
	newlib-1_15_0:1.9
	newlib-csl-coldfire-4_1-32:1.9
	newlib-csl-sourcerygxx-4_1-32:1.9
	newlib-csl-innovasic-fido-3_4_4-33:1.9
	newlib-csl-coldfire-4_1-30:1.9
	newlib-csl-sourcerygxx-4_1-30:1.9
	newlib-csl-coldfire-4_1-28:1.9
	newlib-csl-sourcerygxx-4_1-28:1.9
	newlib-csl-arm-2006q3-27:1.9
	newlib-csl-sourcerygxx-4_1-27:1.9
	newlib-csl-arm-2006q3-26:1.9
	newlib-csl-sourcerygxx-4_1-26:1.9
	newlib-csl-sourcerygxx-4_1-24:1.9
	newlib-csl-sourcerygxx-4_1-23:1.9
	newlib-csl-sourcerygxx-4_1-21:1.9
	newlib-csl-arm-2006q3-21:1.9
	newlib-csl-arm-2006q3-19:1.9
	newlib-csl-sourcerygxx-4_1-19:1.9
	newlib-csl-sourcerygxx-4_1-18:1.9
	newlib-csl-sourcerygxx-3_4_4-25:1.9
	newlib-csl-sourcerygxx-4_1-17:1.9
	cr-0x5f1:1.9.0.6
	newlib-csl-sourcerygxx-4_1-14:1.9
	newlib-csl-sourcerygxx-4_1-13:1.9
	newlib-csl-sourcerygxx-4_1-12:1.9
	newlib-csl-sourcerygxx-4_1-9:1.9
	newlib-csl-sourcerygxx-4_1-8:1.9
	newlib-csl-sourcerygxx-4_1-7:1.9
	newlib-csl-arm-2006q1-6:1.9
	newlib-csl-sourcerygxx-4_1-6:1.9
	newlib-csl-sourcerygxx-4_1-5:1.9
	newlib-csl-sourcerygxx-4_1-4:1.9
	newlib-autotools-branch:1.9.0.4
	newlib-csl-20060320-branch:1.9.0.2
	newlib-csl-20060320-branchpoint:1.9
	newlib-1_14_0:1.9
	newlib-csl-arm-2005-q1b:1.9
	newlib-csl-arm-2005-q1a:1.9
	newlib-1_13_0:1.7
	csl-arm-2004-q3:1.7
	csl-arm-2004-q1a:1.7
	csl-arm-2004-q1:1.7
	newlib-1_12_0:1.7
	csl-arm-2003-q4:1.7
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	newlib-1_11_0:1.7
	cygnus_cvs_20020108_pre:1.5
	newlib-1_10_0:1.5
	newlib-1_9_0:1.4
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.22
date	2009.11.06.03.27.19;	author ericb;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.24.13.24.29;	author ericb;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.30.22.53.00;	author ericb;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.24.12.27.36;	author ericb;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.24.12.20.07;	author ericb;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.09.10.37.58;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.02.07.53.12;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.31.09.31.38;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.26.09.45.11;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.15.20.49.56;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.15.20.36.26;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.24.17.55.26;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.21.21.28.34;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.18.17.18.59;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.17.20.11.23;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.27.23.58.38;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.18.18.49.14;	author fitzsim;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.11.21.51.41;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.01.20.51.51;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.30.17.18.05;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.15.23.00.24;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.22
log
@* libc/include/ctype.h (__ctype_lookup): Fix precedence.
@
text
@#ifndef _CTYPE_H_
#define _CTYPE_H_

#include "_ansi.h"

_BEGIN_STD_C

int _EXFUN(isalnum, (int __c));
int _EXFUN(isalpha, (int __c));
int _EXFUN(iscntrl, (int __c));
int _EXFUN(isdigit, (int __c));
int _EXFUN(isgraph, (int __c));
int _EXFUN(islower, (int __c));
int _EXFUN(isprint, (int __c));
int _EXFUN(ispunct, (int __c));
int _EXFUN(isspace, (int __c));
int _EXFUN(isupper, (int __c));
int _EXFUN(isxdigit,(int __c));
int _EXFUN(tolower, (int __c));
int _EXFUN(toupper, (int __c));

#if !defined(__STRICT_ANSI__) || defined(__cplusplus) || __STDC_VERSION__ >= 199901L
int _EXFUN(isblank, (int __c));
#endif

#ifndef __STRICT_ANSI__
int _EXFUN(isascii, (int __c));
int _EXFUN(toascii, (int __c));
#define _tolower(__c) ((unsigned char)(__c) - 'A' + 'a')
#define _toupper(__c) ((unsigned char)(__c) - 'a' + 'A')
#endif

#define	_U	01
#define	_L	02
#define	_N	04
#define	_S	010
#define _P	020
#define _C	040
#define _X	0100
#define	_B	0200

#ifndef _MB_CAPABLE
_CONST
#endif
extern	__IMPORT char	*__ctype_ptr__;

#ifndef __cplusplus
/* These macros are intentionally written in a manner that will trigger
   a gcc -Wall warning if the user mistakenly passes a 'char' instead
   of an int containing an 'unsigned char'.  Note that the sizeof will
   always be 1, which is what we want for mapping EOF to __ctype_ptr__[0];
   the use of a raw index inside the sizeof triggers the gcc warning if
   __c was of type char, and sizeof masks side effects of the extra __c.
   Meanwhile, the real index to __ctype_ptr__+1 must be cast to int,
   since isalpha(0x100000001LL) must equal isalpha(1), rather than being
   an out-of-bounds reference on a 64-bit machine.  */
#define __ctype_lookup(__c) ((__ctype_ptr__+sizeof(""[__c]))[(int)(__c)])

#define	isalpha(__c)	(__ctype_lookup(__c)&(_U|_L))
#define	isupper(__c)	((__ctype_lookup(__c)&(_U|_L))==_U)
#define	islower(__c)	((__ctype_lookup(__c)&(_U|_L))==_L)
#define	isdigit(__c)	(__ctype_lookup(__c)&_N)
#define	isxdigit(__c)	(__ctype_lookup(__c)&(_X|_N))
#define	isspace(__c)	(__ctype_lookup(__c)&_S)
#define ispunct(__c)	(__ctype_lookup(__c)&_P)
#define isalnum(__c)	(__ctype_lookup(__c)&(_U|_L|_N))
#define isprint(__c)	(__ctype_lookup(__c)&(_P|_U|_L|_N|_B))
#define	isgraph(__c)	(__ctype_lookup(__c)&(_P|_U|_L|_N))
#define iscntrl(__c)	(__ctype_lookup(__c)&_C)

#if defined(__GNUC__) && \
    (!defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901L)
#define isblank(__c) \
  __extension__ ({ __typeof__ (__c) __x = (__c);		\
        (__ctype_lookup(__x)&_B) || (int) (__x) == '\t';})
#endif


/* Non-gcc versions will get the library versions, and will be
   slightly slower.  These macros are not NLS-aware so they are
   disabled if the system supports the extended character sets. */
# if defined(__GNUC__)
#  if !defined (_MB_EXTENDED_CHARSETS_ISO) && !defined (_MB_EXTENDED_CHARSETS_WINDOWS)
#   define toupper(__c) \
  __extension__ ({ __typeof__ (__c) __x = (__c);	\
      islower (__x) ? (int) __x - 'a' + 'A' : (int) __x;})
#   define tolower(__c) \
  __extension__ ({ __typeof__ (__c) __x = (__c);	\
      isupper (__x) ? (int) __x - 'A' + 'a' : (int) __x;})
#  else /* _MB_EXTENDED_CHARSETS* */
/* Allow a gcc warning if the user passed 'char', but defer to the
   function.  */
#   define toupper(__c) \
  __extension__ ({ __typeof__ (__c) __x = (__c);	\
      (void) __ctype_ptr__[__x]; (toupper) (__x);})
#   define tolower(__c) \
  __extension__ ({ __typeof__ (__c) __x = (__c);	\
      (void) __ctype_ptr__[__x]; (tolower) (__x);})
#  endif /* _MB_EXTENDED_CHARSETS* */
# endif /* __GNUC__ */
#endif /* !__cplusplus */

#ifndef __STRICT_ANSI__
#define isascii(__c)	((unsigned)(__c)<=0177)
#define toascii(__c)	((__c)&0177)
#endif

/* For C++ backward-compatibility only.  */
extern	__IMPORT _CONST char	_ctype_[];

_END_STD_C

#endif /* _CTYPE_H_ */
@


1.21
log
@Fix isalpha(0x100000001LL) and friends on 64-bit machines.

* libc/include/ctype.h (__ctype_lookup): New macro.
(isalpha, isupper, islower, isdigit, isxdigit, isspace, ispunct)
(isalnum, isprint, isgraph, iscntrl, isblank): Use it to fix bug
on 64-bit machines.
@
text
@d57 1
a57 1
#define __ctype_lookup(__c) ((__ctype_ptr__+sizeof(""[__c]))[(int)__c])
@


1.20
log
@Allow gcc warning for toupper even with extended charsets.

* libc/include/ctype.h (toupper, tolower)
[_MB_EXTENDED_CHARSETS_ISO]: Allow gcc warning when called with
'char' even when we must call the function for correct behavior.
[!_MB_EXTENDED_CHARSETS_ISO]: Fix regression in result type.
@
text
@d50 20
a69 12
   of an int containing an 'unsigned char'.  */
#define	isalpha(__c)	((__ctype_ptr__+1)[__c]&(_U|_L))
#define	isupper(__c)	(((__ctype_ptr__+1)[__c]&(_U|_L))==_U)
#define	islower(__c)	(((__ctype_ptr__+1)[__c]&(_U|_L))==_L)
#define	isdigit(__c)	((__ctype_ptr__+1)[__c]&_N)
#define	isxdigit(__c)	((__ctype_ptr__+1)[__c]&(_X|_N))
#define	isspace(__c)	((__ctype_ptr__+1)[__c]&_S)
#define ispunct(__c)	((__ctype_ptr__+1)[__c]&_P)
#define isalnum(__c)	((__ctype_ptr__+1)[__c]&(_U|_L|_N))
#define isprint(__c)	((__ctype_ptr__+1)[__c]&(_P|_U|_L|_N|_B))
#define	isgraph(__c)	((__ctype_ptr__+1)[__c]&(_P|_U|_L|_N))
#define iscntrl(__c)	((__ctype_ptr__+1)[__c]&_C)
d75 1
a75 1
      ((__ctype_ptr__+1)[__x]&_B) || (__x) == '\t';})
@


1.19
log
@Be namespace clean in ctype.h.

* libc/include/ctype.h (_tolower, _toupper, isalpha, isupper)
(islower, isdigit, isxdigit, isspace, ispunct, isalnum)
(isprint, isgraph, iscntrl, isblank, toupper, tolower)
(isascii, toascii): Don't use 'c' as macro parameter name.
@
text
@d74 3
a76 2
# if defined(__GNUC__) && !defined (_MB_EXTENDED_CHARSETS_ISO) && !defined (_MB_EXTENDED_CHARSETS_WINDOWS)
# define toupper(__c) \
d78 2
a79 2
      islower(__x) ? (__x - 'a' + 'A') : __x;})
# define tolower(__c) \
d81 12
a92 2
      isupper(__x) ? (__x - 'A' + 'a') : __x;})
#endif
@


1.18
log
@Trigger gcc warning if isFoo macros are called with plain char.

* libc/include/ctype.h (isalpha, isupper, islower, isdigit)
(isxdigit, isspace, ispunct, isalnum, isprint, isgraph)
(iscntrl, isblank, toupper, tolower): Rewrite to let 'gcc -Wall'
warn when user calls macro with a char argument.
@
text
@d29 2
a30 2
#define _tolower(c) ((unsigned char)(c) - 'A' + 'a')
#define _toupper(c) ((unsigned char)(c) - 'a' + 'A')
d51 11
a61 11
#define	isalpha(c)	((__ctype_ptr__+1)[c]&(_U|_L))
#define	isupper(c)	(((__ctype_ptr__+1)[c]&(_U|_L))==_U)
#define	islower(c)	(((__ctype_ptr__+1)[c]&(_U|_L))==_L)
#define	isdigit(c)	((__ctype_ptr__+1)[c]&_N)
#define	isxdigit(c)	((__ctype_ptr__+1)[c]&(_X|_N))
#define	isspace(c)	((__ctype_ptr__+1)[c]&_S)
#define ispunct(c)	((__ctype_ptr__+1)[c]&_P)
#define isalnum(c)	((__ctype_ptr__+1)[c]&(_U|_L|_N))
#define isprint(c)	((__ctype_ptr__+1)[c]&(_P|_U|_L|_N|_B))
#define	isgraph(c)	((__ctype_ptr__+1)[c]&(_P|_U|_L|_N))
#define iscntrl(c)	((__ctype_ptr__+1)[c]&_C)
d65 3
a67 3
#define isblank(c) \
  __extension__ ({ __typeof__ (c) __c = (c);		\
      ((__ctype_ptr__+1)[__c]&_B) || (__c) == '\t';})
d75 2
a76 2
# define toupper(c) \
  __extension__ ({ __typeof__ (c) __x = (c);	\
d78 2
a79 2
# define tolower(c) \
  __extension__ ({ __typeof__ (c) __x = (c);	\
d85 2
a86 2
#define isascii(c)	((unsigned)(c)<=0177)
#define toascii(c)	((c)&0177)
@


1.17
log
@	* libc/ctype/ctype_.c (_CTYPE_DATA_0_127): Remove _B flag from TAB.
	* libc/ctype/ctype_cp.h: Mark non-cased letters in tables for codepages
	720, 862, 874, 1255, and 1256 to _U|_L.  Fix a couple of incorrect
	class mappings.
	* libc/ctype/ctype_iso.h: Mark non-cased letters in ISO-8859 tables
	6, 8, and 11 to _U|_L.  Fix a couple of incorrect class mappings.
	* libc/ctype/isblank.c (isblank): Special case TAB.
	* libc/ctype/islower.c (islower): Check explicitely for _L flag only
	in (_U|_L).
	* libc/ctype/isupper.c (isupper): Ditto, but check for _U flag.
	* libc/include/ctype.h (islower): Same in macro.
	(isupper): Ditto.
	(isblank): Special case TAB.  Redefine macro for GCC only.
@
text
@d48 14
a61 11
#define	isalpha(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&(_U|_L))
#define	isupper(c)	(((__ctype_ptr__)[(unsigned)((c)+1)]&(_U|_L))==_U)
#define	islower(c)	(((__ctype_ptr__)[(unsigned)((c)+1)]&(_U|_L))==_L)
#define	isdigit(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_N)
#define	isxdigit(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&(_X|_N))
#define	isspace(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_S)
#define ispunct(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_P)
#define isalnum(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&(_U|_L|_N))
#define isprint(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&(_P|_U|_L|_N|_B))
#define	isgraph(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&(_P|_U|_L|_N))
#define iscntrl(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_C)
d66 2
a67 1
	__extension__ ({ int __c = (c); ((__ctype_ptr__)[(unsigned)((__c)+1)]&_B) || (__c) == '\t';})
d76 2
a77 1
	__extension__ ({ int __x = (c); islower(__x) ? (__x - 'a' + 'A') : __x;})
d79 2
a80 1
	__extension__ ({ int __x = (c); isupper(__x) ? (__x - 'A' + 'a') : __x;})
@


1.16
log
@	* libc/ctype/ctype_c.c: Move inclusion of ctype_iso.h and
	ctype_cp.h out of ALLOW_NEGATIVE_CTYPE_INDEX case.
	(__ctype_ptr__): Constify in !_MB_CAPABLE case.  Otherwise,
	de-constify in !ALLOW_NEGATIVE_CTYPE_INDEX case, too.  Add comment.
	(__set_ctype): Set __ctype_ptr__ pointer according to definition
	of ALLOW_NEGATIVE_CTYPE_INDEX.
	* libc/include/ctype.h (__ctype_ptr__): Constify in !_MB_CAPABLE case.
@
text
@d49 2
a50 2
#define	isupper(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_U)
#define	islower(c)	((__ctype_ptr__)[(unsigned)((c)+1)]&_L)
d60 4
a63 2
#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ >= 199901L
#define isblank(c)      ((__ctype_ptr__)[(unsigned)((c)+1)]&_B)
@


1.15
log
@	* libc/ctype/Makefile.am: Remove _tolower.c and _toupper.c
	source files.  Add a dependency rule for ctype_o to note
	changes in ctype_iso.h and ctype_cp.h.
	* libc/ctype/Makefile.in: Regenerate.
	* libc/ctype/_tolower.c: Remove file.
	* libc/ctype/_toupper.c: Remove file.
	* libc/ctype/ctype_.c: Make sure ALLOW_NEGATIVE_CTYPE_INDEX
	is always defined on Cygwin.
	(_ctype_b): Don't make `static const' on Cygwin.
	(ctype_iso.h): Include if _MB_EXTENDED_CHARSETS_ISO is set.
	(ctype_cp.h): Include if _MB_EXTENDED_CHARSETS_WINDOWS is set.
	(__ctype_ptr): Drop definition.
	(__ctype_ptr__): De-constify.  Mark as __EXPORT symbol.
	(_ctype_): Add Cygwin-specifc asm define.
	(__set_ctype): New function to set __ctype_ptr__ according to
	current charset.
	* libc/ctype/ctype_cp.h: New file containing Windows codepage
	specific character class tables.
	* libc/ctype/ctype_iso.h: New file containing ISO-8859-x
	specific character class tables.
	* libc/ctype/tolower.c (tolower): Reimplement to support any singlebyte
	charset if one of the extended charsets is enabled.
	* libc/ctype/toupper.c (toupper): Ditto.
	* libc/include/ctype.h (_tolower): Define as macro per POSIX.
	(_toupper): Ditto.
	(__ctype_ptr__): De-constify.
	(toupper): Disable macro on systems supporting extended charsets.
	(tolower): Ditto.
	* libc/include/sys/config.h (__EXPORT): Define empty if not defined.
	* libc/locale/locale.c (__mb_cur_max): Mark as __EXPORT symbol.
	(__set_ctype): Declare unconditionally.
	(loadlocale): Remove __CYGWIN__ guard around __set_ctype call.
@
text
@d42 3
@


1.14
log
@	* libc/ctype/ctype_.c (_CTYPE_DATA_0_127): Mark TAB as blank character.
	* libc/ctype/isblank.c: Replace hardcoded test with test for having _B
	marker in ctype array.
	* libc/include/ctype.h (isblank): Add macro.
@
text
@d29 2
a30 2
int _EXFUN(_tolower, (int __c));
int _EXFUN(_toupper, (int __c));
d42 1
a42 1
extern	__IMPORT _CONST char	*__ctype_ptr__;
d63 3
a65 2
   slightly slower */
#ifdef __GNUC__
@


1.13
log
@Fix typo and make C99 check the same as is used in math.h
@
text
@d57 4
@


1.12
log
@2008-10-15  Craig Howland  <howland@@LGSInnovations.com>

	* libc/include/ctype.h (isblank):  isblank is C99.
	* libc/ctype/isblank.c (isblank comments):  ditto.  isblank does not
	have a macro version (as was claimed in the description).
@
text
@d22 1
a22 2
#if !defined(__STRICT_ANSI__) || \
  (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 1999901L)
@


1.11
log
@
2008-07-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/ctype.h (_ctype_): Restore for C++ backward
        compatability only.
@
text
@d22 5
a27 1
int _EXFUN(isblank, (int __c));
@


1.10
log
@
2008-07-21  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/ctype/ctype_.c: Add new pointer __ctype_ptr__ which is one
        less than the old __ctype_ptr.
        * libc/ctype/isalnum.c: Use __ctype_ptr__.
        * libc/ctype/isalpha.c: Ditto.
        * libc/ctype/iscntrl.c: Ditto.
        * libc/ctype/isdigit.c: Ditto.
        * libc/ctype/islower.c: Ditto.
        * libc/ctype/isprint.c: Ditto.
        * libc/ctype/ispunct.c: Ditto.
        * libc/ctype/isspace.c: Ditto.
        * libc/ctype/isupper.c: Ditto.
        * libc/ctype/isxdigit.c: Ditto.
        * libc/include/ctype.h: Change ctype macros to use new __ctype_ptr__
        and add declaration of __ctype_ptr__.  Remove older ctype table pointers
        from here even though they can still work.
@
text
@d70 3
@


1.9
log
@
2005-03-18  Hans-Peter Nilsson  <hp@@axis.com>
            Corinna Vinschen  <corinna@@vinschen.de>

        * libc/include/ctype.h: Remove invalid +1 offset from
        ctype macro references to __ctype_ptr.
        (_ctype_): Move declaration outside #ifndef __cplusplus.
@
text
@d39 1
a39 2
extern	__IMPORT _CONST char	*__ctype_ptr;
extern	__IMPORT _CONST char	_ctype_[];  /* For backward compatibility.  */
d42 11
a52 11
#define	isalpha(c)	((__ctype_ptr)[(unsigned)(c)]&(_U|_L))
#define	isupper(c)	((__ctype_ptr)[(unsigned)(c)]&_U)
#define	islower(c)	((__ctype_ptr)[(unsigned)(c)]&_L)
#define	isdigit(c)	((__ctype_ptr)[(unsigned)(c)]&_N)
#define	isxdigit(c)	((__ctype_ptr)[(unsigned)(c)]&(_X|_N))
#define	isspace(c)	((__ctype_ptr)[(unsigned)(c)]&_S)
#define ispunct(c)	((__ctype_ptr)[(unsigned)(c)]&_P)
#define isalnum(c)	((__ctype_ptr)[(unsigned)(c)]&(_U|_L|_N))
#define isprint(c)	((__ctype_ptr)[(unsigned)(c)]&(_P|_U|_L|_N|_B))
#define	isgraph(c)	((__ctype_ptr)[(unsigned)(c)]&(_P|_U|_L|_N))
#define iscntrl(c)	((__ctype_ptr)[(unsigned)(c)]&_C)
@


1.8
log
@
2005-03-17  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.in: Add new check to see if compiler supports
        aliasing of arrays and define _HAVE_ARRAY_ALIASING if true.
        * configure: Regenerated.
        * Makefile.in: Ditto.
        * newlib.hin: Add _HAVE_ARRAY_ALIASING.
        * libc/ctype/ctype_.c: Check for _HAVE_ARRAY_ALIASING before
        aliasing the _ctype_ array to _ctype_b.
        * libc/include/ctype.h: Change macros to use __ctype_ptr.  Mark
        _ctype_ as deprecated.
@
text
@d40 1
d43 11
a53 11
#define	isalpha(c)	((__ctype_ptr+1)[(unsigned)(c)]&(_U|_L))
#define	isupper(c)	((__ctype_ptr+1)[(unsigned)(c)]&_U)
#define	islower(c)	((__ctype_ptr+1)[(unsigned)(c)]&_L)
#define	isdigit(c)	((__ctype_ptr+1)[(unsigned)(c)]&_N)
#define	isxdigit(c)	((__ctype_ptr+1)[(unsigned)(c)]&(_X|_N))
#define	isspace(c)	((__ctype_ptr+1)[(unsigned)(c)]&_S)
#define ispunct(c)	((__ctype_ptr+1)[(unsigned)(c)]&_P)
#define isalnum(c)	((__ctype_ptr+1)[(unsigned)(c)]&(_U|_L|_N))
#define isprint(c)	((__ctype_ptr+1)[(unsigned)(c)]&(_P|_U|_L|_N|_B))
#define	isgraph(c)	((__ctype_ptr+1)[(unsigned)(c)]&(_P|_U|_L|_N))
#define iscntrl(c)	((__ctype_ptr+1)[(unsigned)(c)]&_C)
a54 1
extern	__IMPORT _CONST char	_ctype_[];  /* Deprecated.  */
@


1.7
log
@
2002-06-27  Benjamin Kosnik  <bkoz@@redhat.com>

        * libc/include/stdio.h: Untangle, add _BEGIN_STD_C and _END_STD_C.
        * libc/include/time.h: Same.
        * libc/include/string.h: Same.
        * libc/include/stdlib.h: Same.
        * libc/include/signal.h: Same.
        * libc/include/setjmp.h: Same.
        * libc/include/math.h: Same.
        * libc/include/locale.h: Same.
        * libc/include/ctype.h: Same.
        * libc/include/machine/setjmp.h: Same.
        * libc/include/_ansi.h (_BEGIN_STD_C): Add.
        (_END_STD_C): Add.
@
text
@d39 1
a39 1
extern	__IMPORT _CONST char	_ctype_[];
d42 14
a55 11
#define	isalpha(c)	((_ctype_+1)[(unsigned)(c)]&(_U|_L))
#define	isupper(c)	((_ctype_+1)[(unsigned)(c)]&_U)
#define	islower(c)	((_ctype_+1)[(unsigned)(c)]&_L)
#define	isdigit(c)	((_ctype_+1)[(unsigned)(c)]&_N)
#define	isxdigit(c)	((_ctype_+1)[(unsigned)(c)]&(_X|_N))
#define	isspace(c)	((_ctype_+1)[(unsigned)(c)]&_S)
#define ispunct(c)	((_ctype_+1)[(unsigned)(c)]&_P)
#define isalnum(c)	((_ctype_+1)[(unsigned)(c)]&(_U|_L|_N))
#define isprint(c)	((_ctype_+1)[(unsigned)(c)]&(_P|_U|_L|_N|_B))
#define	isgraph(c)	((_ctype_+1)[(unsigned)(c)]&(_P|_U|_L|_N))
#define iscntrl(c)	((_ctype_+1)[(unsigned)(c)]&_C)
@


1.6
log
@	* libc/include/ctype.h: Remove isblank macro.

	* libc/ctype/Makefile.am (LIB_SOURCES): Add isblank.c.
	* libc/ctype/isblank.c: New file.
	* libc/include/ctype.h [!__STRICT_ANSI__]: Add isblank
	declaration.  Add isblank macro.
@
text
@a1 3
#ifdef __cplusplus
extern "C" {
#endif
d6 2
d68 2
a69 3
#ifdef __cplusplus
}
#endif
@


1.5
log
@
2001-06-11  Danny Smith  <dannysmith@@users.sourceforge.net>

        * /libc/include/ctype.h (is* and to* macros): Do not define if C++.
@
text
@d24 1
@


1.4
log
@* libc/include/sys/config.h: define __IMPORT appropriately
* libc/include/ctype.h (_ctype_): use __IMPORT
* libc/include/math.h (__infinity, signam, _LIB_VERSION): ditto
* libc/include/math.h (__mb_cur_max): ditto
* libc/include/time.h (_timezone, _daylight, _tzname): ditto
* libc/include/unctrl.h (__unctrl, __unctrllen): ditto
* libc/include/errno.h (_sys_errlist, _sys_nerr): ditto
* libc/include/unistd.h (environ): ditto
@
text
@d41 1
d61 1
@


1.3
log
@* libc/include/ctype.h: __CYGWIN32__ -> __CYGWIN__
* libc/include/malloc.h: Ditto.
* libc/include/process.h: Ditto.
* libc/include/stdio.h: Ditto.
* libc/include/stdlib.h: Ditto.
* libc/include/time.h: Ditto.
* libc/include/machine/setjmp.h: Ditto.
* libc/include/sys/errno.h: Ditto.
* libc/include/sys/signal.h: Ditto.
* libc/include/sys/stat.h: Ditto.
* libc/include/sys/time.h: Ditto.
* libc/include/sys/unistd.h: Ditto.
* libc/include/string.h: Ditto.  strsignal should return a const char *.
@
text
@d39 1
a39 5
#if !defined(__CYGWIN__) || defined(__INSIDE_CYGWIN__) || defined(_COMPILING_NEWLIB)
extern	_CONST char	_ctype_[];
#else
extern	_CONST char	_ctype_[] __declspec(dllimport);
#endif
@


1.2
log
@
Mon May 15 18:54:00 2000  Jeff Johnston  <jjohnstn@@cygnus.com>

        * libc/include/ctype.h: Changed tolower and toupper macros
        to use __extension__ to prevent pedantic warnings.
@
text
@d39 1
a39 1
#if !defined(__CYGWIN32__) || defined(__INSIDE_CYGWIN__) || defined(_COMPILING_NEWLIB)
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
	({ int __x = (c); islower(__x) ? (__x - 'a' + 'A') : __x;})
d62 1
a62 1
	({ int __x = (c); isupper(__x) ? (__x - 'A' + 'a') : __x;})
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
