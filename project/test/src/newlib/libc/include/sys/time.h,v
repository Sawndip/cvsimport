head	1.20;
access;
symbols
	cygwin-1_7_35-release:1.20
	cygwin-1_7_34-release:1.20
	newlib-2_2_0:1.19.0.2
	cygwin-1_7_33-release:1.19
	cygwin-1_7_32-release:1.19
	cygwin-1_7_31-release:1.18
	cygwin-1_7_30-release:1.18
	cygwin-1_7_29-release:1.18
	cygwin-1_7_28-release:1.18
	newlib-2_1_0:1.18
	cygwin-1_7_27-release:1.18
	cygwin-1_7_26-release:1.18
	cygwin-1_7_25-release:1.17
	cygwin-1_7_24-release:1.17
	cygwin-1_7_23-release:1.17
	cygwin-1_7_22-release:1.17
	cygwin-1_7_21-release:1.17
	cygwin-1_7_20-release:1.17
	cygwin-1_7_19-release:1.17
	cygwin-64bit-postmerge:1.17
	cygwin-64bit-premerge-branch:1.17.0.2
	cygwin-64bit-premerge:1.17
	cygwin-1_7_18-release:1.17
	newlib-2_0_0:1.17
	cygwin-1_7_17-release:1.16
	cygwin-64bit-branch:1.16.0.2
	cygwin-1_7_16-release:1.15
	cygwin-1_7_15-release:1.14
	cygwin-1_7_14_2-release:1.14
	cygwin-1_7_14-release:1.14
	cygwin-1_7_12-release:1.14
	cygwin-1_7_11-release:1.14
	cygwin-1_7_10-release:1.14
	newlib-1_20_0:1.14
	cygwin-1_7_9-release:1.14
	cygwin-1_7_8-release:1.14
	newlib-1_19_0:1.14
	cygwin-1_7_7-release:1.14
	cygwin-1_7_5-release:1.14
	cygwin-1_7_4-release:1.14
	cygwin-1_7_3-release:1.14
	cygwin-1_7_2-release:1.14
	newlib-1_18_0:1.14
	cygwin-1_7_1-release:1.14
	newlib-1_17_0-arc:1.13.0.2
	binutils-arc-20080908-branch:1.11.0.2
	binutils-arc-20080908-branchpoint:1.11
	newlib-1_17_0:1.13
	newlib-1_16_0:1.11
	newlib-1_15_0:1.10
	newlib-csl-coldfire-4_1-32:1.10
	newlib-csl-sourcerygxx-4_1-32:1.10
	newlib-csl-innovasic-fido-3_4_4-33:1.10
	newlib-csl-coldfire-4_1-30:1.10
	newlib-csl-sourcerygxx-4_1-30:1.10
	newlib-csl-coldfire-4_1-28:1.10
	newlib-csl-sourcerygxx-4_1-28:1.10
	newlib-csl-arm-2006q3-27:1.10
	newlib-csl-sourcerygxx-4_1-27:1.10
	newlib-csl-arm-2006q3-26:1.10
	newlib-csl-sourcerygxx-4_1-26:1.10
	newlib-csl-sourcerygxx-4_1-24:1.10
	newlib-csl-sourcerygxx-4_1-23:1.10
	newlib-csl-sourcerygxx-4_1-21:1.10
	newlib-csl-arm-2006q3-21:1.10
	newlib-csl-arm-2006q3-19:1.10
	newlib-csl-sourcerygxx-4_1-19:1.10
	newlib-csl-sourcerygxx-4_1-18:1.10
	newlib-csl-sourcerygxx-3_4_4-25:1.10
	newlib-csl-sourcerygxx-4_1-17:1.10
	cr-0x5f1:1.10.0.6
	newlib-csl-sourcerygxx-4_1-14:1.10
	newlib-csl-sourcerygxx-4_1-13:1.10
	newlib-csl-sourcerygxx-4_1-12:1.10
	newlib-csl-sourcerygxx-4_1-9:1.10
	newlib-csl-sourcerygxx-4_1-8:1.10
	newlib-csl-sourcerygxx-4_1-7:1.10
	newlib-csl-arm-2006q1-6:1.10
	newlib-csl-sourcerygxx-4_1-6:1.10
	newlib-csl-sourcerygxx-4_1-5:1.10
	newlib-csl-sourcerygxx-4_1-4:1.10
	newlib-autotools-branch:1.10.0.4
	newlib-csl-20060320-branch:1.10.0.2
	newlib-csl-20060320-branchpoint:1.10
	newlib-1_14_0:1.9
	newlib-csl-arm-2005-q1b:1.5
	newlib-csl-arm-2005-q1a:1.5
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4
	cygnus_cvs_20020108_pre:1.4
	newlib-1_10_0:1.4
	newlib-1_9_0:1.3
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.20
date	2015.01.28.21.03.41;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2014.07.22.19.30.00;	author joel;	state Exp;
branches;
next	1.18;

1.18
date	2013.11.23.01.25.47;	author joel;	state Exp;
branches;
next	1.17;

1.17
date	2012.11.12.15.57.35;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2012.08.08.11.04.16;	author corinna;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2012.07.06.10.41.21;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.09.18.43.12;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.11.22.48.38;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.11.17.27.55;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.06.16.56.30;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.15.10.26.30;	author corinna;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	2005.11.18.16.08.10;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.18.15.45.54;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.11.16.23.36;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.20.14.38.57;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.08.20.55.18;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.21.03.22.47;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.04.18.40.53;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.30.17.18.05;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.16.2.1
date	2012.11.29.17.05.43;	author corinna;	state Exp;
branches;
next	;

1.10.6.1
date	2007.11.12.15.25.48;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.20
log
@	* libc/include/sys/time.h: #include <sys/cdefs.h> for __BSD_VISIBLE.
@
text
@/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@@cygnus.com>
   Public domain; no rights reserved. */

#ifndef _SYS_TIME_H_
#define _SYS_TIME_H_

#include <_ansi.h>
#include <sys/cdefs.h>
#include <sys/types.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _TIMEVAL_DEFINED
#define _TIMEVAL_DEFINED
struct timeval {
  time_t      tv_sec;
  suseconds_t tv_usec;
};

/* BSD time macros used by RTEMS code */
#if defined (__rtems__) || defined (__CYGWIN__)

/* Convenience macros for operations on timevals.
   NOTE: `timercmp' does not work for >= or <=.  */
#define	timerisset(tvp)		((tvp)->tv_sec || (tvp)->tv_usec)
#define	timerclear(tvp)		((tvp)->tv_sec = (tvp)->tv_usec = 0)
#define	timercmp(a, b, CMP) 						      \
  (((a)->tv_sec == (b)->tv_sec) ? 					      \
   ((a)->tv_usec CMP (b)->tv_usec) : 					      \
   ((a)->tv_sec CMP (b)->tv_sec))
#define	timeradd(a, b, result)						      \
  do {									      \
    (result)->tv_sec = (a)->tv_sec + (b)->tv_sec;			      \
    (result)->tv_usec = (a)->tv_usec + (b)->tv_usec;			      \
    if ((result)->tv_usec >= 1000000)					      \
      {									      \
	++(result)->tv_sec;						      \
	(result)->tv_usec -= 1000000;					      \
      }									      \
  } while (0)
#define	timersub(a, b, result)						      \
  do {									      \
    (result)->tv_sec = (a)->tv_sec - (b)->tv_sec;			      \
    (result)->tv_usec = (a)->tv_usec - (b)->tv_usec;			      \
    if ((result)->tv_usec < 0) {					      \
      --(result)->tv_sec;						      \
      (result)->tv_usec += 1000000;					      \
    }									      \
  } while (0)
#endif /* defined (__rtems__) || defined (__CYGWIN__) */
#endif /* !_TIMEVAL_DEFINED */

struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

#ifdef __CYGWIN__
#include <cygwin/sys_time.h>
#endif /* __CYGWIN__ */

#define ITIMER_REAL     0
#define ITIMER_VIRTUAL  1
#define ITIMER_PROF     2

struct  itimerval {
  struct  timeval it_interval;
  struct  timeval it_value;
};

#ifdef _COMPILING_NEWLIB
int _EXFUN(_gettimeofday, (struct timeval *__p, void *__tz));
#endif

int _EXFUN(gettimeofday, (struct timeval *__restrict __p,
			  void *__restrict __tz));
#if __BSD_VISIBLE
int _EXFUN(settimeofday, (const struct timeval *, const struct timezone *));
int _EXFUN(adjtime, (const struct timeval *, struct timeval *));
#endif
int _EXFUN(utimes, (const char *__path, const struct timeval *__tvp));
int _EXFUN(getitimer, (int __which, struct itimerval *__value));
int _EXFUN(setitimer, (int __which, const struct itimerval *__restrict __value,
					struct itimerval *__restrict __ovalue));

#ifdef __cplusplus
}
#endif
#endif /* _SYS_TIME_H_ */
@


1.19
log
@2014-07-22  Joel Sherrill <joel.sherrill@@oarcorp.com>

	* libc/include/sys/time.h: Add prototype for adjtime() and
	wrap it and settimeofday() prototype with __BSD_VISIBLE.
@
text
@d9 1
@


1.18
log
@2013-11-22  Bryan Dunsmore <dunsmoreb@@gmail.com>

	* libc/include/sys/time.h (gettimeofday): Add restrict keyword.
	(setitimer): Likewise.
	* libc/sys/rdos/gettod.c (gettimeofday): Likewise.
	* libc/sys/rtems/crt0.c (gettimeofday): Likewise.
@
text
@d79 1
d81 2
@


1.17
log
@* libc/include/sys/time.h: Avoid guarding other than timeval declaration with
_TIMEVAL_DEFINED.  Move timeval related macros under _TIMEVAL_DEFINED control.
@
text
@d77 2
a78 1
int _EXFUN(gettimeofday, (struct timeval *__p, void *__tz));
d82 2
a83 2
int _EXFUN(setitimer, (int __which, const struct itimerval *__value,
					struct itimerval *__ovalue));
@


1.16
log
@	Throughout, run newlib with -Wall -Werror option and fix bugs and
	compiler warnings found this way.

	* libc/stdio/freopen.c (_freopen_r): Fix bug setting _flags.

	* libc/include/stdio.h (_rename): Define when building newlib.
	* libc/include/sys/signal.h (_kill): Ditto.
	* libc/include/sys/stat.h (_mkdir): Ditto.
	* libc/include/sys/time.h (_gettimeofday): Ditto.
	* libc/include/sys/times.h (_times): Ditto.
	* libc/include/sys/wait.h (_wait): Ditto.
	* libc/locale/lmessages.c (empty): Don't define for Cygwin.
	* libc/locale/lmonetary.c (cnv): Ditto.
	* libc/locale/nl_langinfo.c (nl_langinfo): Ditto for variable s.
	* libc/posix/collate.c: Throughout cast to avoid compiler warning.
	* libc/posix/engine.c (matcher): Initialize dp to avoid compiler
	warning.
	* libc/posix/glob.c: Disable on Cygwin.  Explain why.
	* libc/posix/regcomp.c: Fix "uninitialized" compiler warnings.
	(dissect): Deliberately silence gcc compiler warning.  Add comment to
	explain why.
	* libc/posix/wordexp.c (wordexp): Remove num_bytes variable since result
	is never used.
	* libc/posix/popen.c (popen): Ditto for variable last.
	* libc/reent/mkdirr.c: Include sys/stat.h.
	* libc/reent/renamer.c: Include stdio.h.
	* libc/search/hash.c:  Throughout use underscored variants of the stat
	function family.
	(init_hash): Add missing definition for the __USE_INTERNAL_STAT64 case.
	* libc/search/hash_bigkey.c (__big_insert): Add parenthesis to avoid
	compiler warning.
	* libc/search/hash_page.c (overflow_page): Initalize freep to NULL to
	avoid compiler warning.
	* libc/stdio/asiprintf.c (_asiprintf_r): Cast unsigned char * to char *
	to avoid compiler warning.
	(asiprintf): Ditto.
	* libc/stdio/asprintf.c (_asprintf_r): Ditto.
	(asprintf): Ditto.
	* libc/stdio/vasiprintf.c (_vasiprintf_r): Ditto.
	* libc/stdio/vasprintf.c (_vasprintf_r): Ditto.
	* libc/stdio/mktemp.c (_gettemp): Cast to unsigned char in call to
	isdigit to avoid compiler warning.
	* libc/stdio/vfprintf.c (_VFPRINTF_R): Initialize variables used for
	grouping to avoid compiler warning.  Only define and set nseps and
	nrepeats if they are really used.
	* libc/stdio/vfwprintf.c (_VFWPRINTF_R): Ditto.  Only define state if
	it is really used.
	* libc/stdio/vfscanf.c (u_char): Revert to be defined as unsigned char.
	(__SVFSCANF_R): Cast fmt in call to __mbtowc.
	* libc/stdlib/mbtowc_r.c (JIS_state_table): Disable when building
	Cygwin.
	(JIS_action_table): Ditto.
	* libc/stdlib/wctomb_r.c (__utf8_wctomb): Add parenthesis to avoid
	compiler warning.
	* libc/string/strcasestr.c: Deliberately silence gcc compiler warning.
	Add comment to explain why.
	* libc/time/strptime.c (strptime): Cast to unsigned char in calls to
	isspace to avoid compiler warning.
	* libm/math/e_atan2.c (__ieee754_atan2): Add parenthesis to avoid
	compiler warning.
	* libm/math/e_exp.c (__ieee754_exp): Initialize k to 0 to avoid
	compiler warning.  Drop setting it to 0 later.
	* libm/math/ef_exp.c (__ieee754_expf): Ditto.
	* libm/math/e_pow.c (__ieee754_pow): Add braces to avoid compiler
	warning.
	* libm/math/ef_pow.c (__ieee754_powf): Ditto.
	* libm/math/er_lgamma.c (__ieee754_lgamma_r): Initialize nadj to 0 to
	avoid compiler warning.
	* libm/math/erf_lgamma.c (__ieee754_lgammaf_r): Ditto.
	* libm/math/e_rem_pio2.c (__ieee754_rem_pio2): Ditto for variable z.
	* libm/common/sf_round.c (roundf): Remove signbit variable since result
	is never used.
@
text
@a21 20
struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

#ifdef __CYGWIN__
#include <cygwin/sys_time.h>
#endif /* __CYGWIN__ */

#endif /* !_TIMEVAL_DEFINED */

#define ITIMER_REAL     0
#define ITIMER_VIRTUAL  1
#define ITIMER_PROF     2

struct  itimerval {
  struct  timeval it_interval;
  struct  timeval it_value;
};

d53 19
@


1.16.2.1
log
@Pull in changes from HEAD
@
text
@d22 20
a72 19
#endif /* !_TIMEVAL_DEFINED */

struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

#ifdef __CYGWIN__
#include <cygwin/sys_time.h>
#endif /* __CYGWIN__ */

#define ITIMER_REAL     0
#define ITIMER_VIRTUAL  1
#define ITIMER_PROF     2

struct  itimerval {
  struct  timeval it_interval;
  struct  timeval it_value;
};
@


1.15
log
@	Allow building of Cygwin using Mingw64 SDK headers:
	* libc/include/sys/time.h: Drop _WINSOCK_H guard.  Just use
	_TIMEVAL_DEFINED instead.
	* libc/include/sys/types.h: Check for _WINSOCKAPI_ along with
	_WINSOCK_H.
	* libc/include/sys/unistd.h: Ditto.
@
text
@d74 4
@


1.14
log
@
2009-10-09  Dave Korn  <dave.korn@@artimi.com>

        * libc/include/sys/time.h (_TIMEVAL_DEFINED): Define when
        defining struct timeval.
@
text
@d15 1
a15 1
#ifndef _WINSOCK_H
d31 1
a31 1
#endif /* _WINSOCK_H */
@


1.13
log
@
2008-12-11 Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/time.h(gettimeofday): Change prototype so
        2nd parameter is void *, matching SUSV2.
        * libc/syscalls/sysgettod.c(gettimeofday): Ditto.
@
text
@d16 1
@


1.12
log
@
2008-12-11  Craig Howland  <howland@@LGSInnovations.com>

        * libc/include/sys/lock.h:  Add void cast to avoid "statement has no
        effect" warnings from gcc.
        * libc/include/sys/stdio.h:  Ditto.
        * libc/include/sys/time.h:  Correct gettimeofday() prototype.
        * libc/stdlib/__exp10.c:  Add #include "std.h" for function prototype.
        * libc/stdlib/__ten_mu.c:  Ditto.
        * libc/stdlib/std.h:  Correct __exp10's ANSI prototype.
        * libc/stdlib/ldtoa.c:  Change eiisinf definition to ANSI form.  (Are
        already others in file without _ansi method, so did not bother.)
        * libc/stdlib/system.c:  Use _ansi forms for function prototypes and
        definitions.
        * libc/time/mktime.c:  Ditto.
        * libc/misc/__dprintf.c:  Ditto.
        * libc/include/stdio.h:  Add function prototypes for _fgetc_r,
        _fgetpos_r, _fsetpos_r, _freopen_r, _rewind_r, freopen64, _freopen64_r,
        _funopen_r, and _fopencookie_r.
        * libc/include/reent.h:  Add function prototype for _stat64_r, align
        _execve_r prototype with POSIX definition for execve.
        * libc/reent/execr.c:  Align function prototype with POSIX definition.
        * libc/stdio/asniprintf.c:  Add #include "local.h".
        * libc/stdio/vasniprintf.c:  Ditto.
        * libc/stdio/fread.c:  Remove unused variable newcount.
        * libc/stdio/local.h:  Add function prototype for __sccl.
        * libc/stdio/open_memstream.c:  Remove unused variable flags.
        * libc/stdio/vfscanf.c:  Proper prototyping for ccfn, remove prototype
        for __sccl since now in local.h.
        * libc/string/memcpy.c:  Add #include <string.h> (for real and for
        traditional synopsis), remove extraneous stddef.h and limits.h.
        * libc/syscalls/sysclose.c:  Add #include <unistd.h>.
        * libc/syscalls/sysfork.c:  Ditto.
        * libc/syscalls/sysgetpid.c:  Ditto.
        * libc/syscalls/sysexecve.c:  Add #include <unistd.h>, align function
        prototype with POSIX definition.
        * libc/syscalls/sysfstat.c:  Add #include <sys/stat.h>.
        * libc/syscalls/sysgettod.c:  Correct sys/times.h to sys/time.h.
        * libc/syscalls/syskill.c:  Add #include <signal.h>.
        * libc/syscalls/syslink.c:  Add #include <unistd.h>, fix prototype.
        * libc/syscalls/sysunlink.c:  Ditto.
        * libc/syscalls/sysstat.c:  Add #include <sys/stat.h>, fix prototype.
        * libc/syscalls/syswait.c:  Add #include <sys/wait.h>, fix prototype.
@
text
@d73 1
a73 1
int _EXFUN(gettimeofday, (struct timeval *__p, struct timezone *__tz));
@


1.11
log
@
2007-07-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/time.h (gettimeofday): Change to proper
        prototype where second parameter is void *.
        * libc/reent/gettimeofdayr.c (_gettimeofday_r): Change prototype
        accordingly.
        * libc/include/reent.h: Fix prototype for _gettimeofday_r.
        * libc/sys/arm/syscalls.c: Fix gettimeofday function signature.
        * libc/sys/rdos/gettod.c: Ditto.
        * libc/sys/sh/syscalls.c: Ditto.
        * libc/time/time.c (time): Change call to _gettimeofday_r
        to pass NULL as 2nd argument.
@
text
@d73 1
a73 1
int _EXFUN(gettimeofday, (struct timeval *__p, void *__tz));
@


1.10
log
@	* libc/include/sys/time.h (struct timeval): Change member types
	according to SUSv3.
	* libc/include/sys/types.h (useconds_t): Change to unsigned
	according to SUSv3.
	(suseconds_t): Define type.
@
text
@d73 1
a73 1
int _EXFUN(gettimeofday, (struct timeval *__p, struct timezone *__z));
@


1.10.6.1
log
@2007-07-06  Jeff Johnston  <jjohnstn@@redhat.com>

       * libc/include/sys/time.h (gettimeofday): Change to proper
       prototype where second parameter is void *.
       * libc/include/reent.h: Fix prototype for _gettimeofday_r.
       * libc/time/timer.c (_gettimeofday_r): Change prototype accordingly.

2007-06-13  Patrick Mansfield  <patmans@@us.ibm.com>

       * libc/include/sys/unistd.h: Change usleep prototype to Posix.

2007-01-05  Brian Ford  <Brian.Ford@@FlightSafety.com>

       * configure.host (*-*-cygwin*): Define HAVE_BLKSIZE.
@
text
@d73 1
a73 1
int _EXFUN(gettimeofday, (struct timeval *__p, void *__z));
@


1.9
log
@* include/sys/time.h: Move more cygwin stuff to cygwin-specific header.
@
text
@d17 2
a18 2
  long tv_sec;
  long tv_usec;
@


1.8
log
@* include/time.h: Move cygwin declarations to cygwin-specific header.
* include/sys/time.h: Rename cygwin include to "sys_time.h".
@
text
@a75 4
#ifdef __CYGWIN__
int _EXFUN(futimes, (int __fd, const struct timeval *__tvp));
int _EXFUN(lutimes, (const char *__path, const struct timeval *__tvp));
#endif
@


1.7
log
@* libc/include/sys/time.h: For cygwin, use general header rather than specific
"sys/select.h".
@
text
@d27 1
a27 1
#include <cygwin/time.h>
@


1.6
log
@	* libc/include/sys/time.h: Declare futimes and lutimes for Cygwin.
@
text
@d27 1
a27 1
#include <sys/select.h>
@


1.5
log
@	* libc/include/pwd.h (struct passwd): Change pw_uid and pw_gid
	members to uid_t and gid_t according to SUSv3.
	* libc/include/sys/time.h (utimes):  Change second parameter
	to const according to SUSv3.
@
text
@d76 4
@


1.4
log
@* libc/include/sys/time.h: Define timercmp and other macros for __CYGWIN__,
too.
@
text
@d75 1
a75 1
int _EXFUN(utimes, (const char *__path, struct timeval *__tvp));
@


1.3
log
@
2000-12-04  Joel Sherrill <joel@@OARcorp.com>

        * libc/include/sys/time.h: Added BSD timer manipulation macros
        used by RTEMS code.
@
text
@d42 1
a42 1
#if defined(__rtems__)
d71 1
a71 1
#endif
@


1.2
log
@* libc/include/ctype.h: __CYGWIN32__ -> __CYGWIN__
* libc/include/malloc.h: Ditto.
* libc/include/process.h: Ditto.
* libc/include/stdio.h: Ditto.
* libc/include/stdlib.h: Ditto.
* libc/include/time.h: Ditto.
* libc/include/machine/setjmp.h: Ditto.
* libc/include/sys/errno.h: Ditto.
* libc/include/sys/signal.h: Ditto.
* libc/include/sys/stat.h: Ditto.
* libc/include/sys/time.h: Ditto.
* libc/include/sys/unistd.h: Ditto.
* libc/include/string.h: Ditto.  strsignal should return a const char *.
@
text
@d41 32
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
#ifdef __CYGWIN32__
d28 1
a28 1
#endif /* __CYGWIN32__ */
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
