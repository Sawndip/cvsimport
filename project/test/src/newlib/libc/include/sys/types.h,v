head	1.41;
access;
symbols
	cygwin-1_7_35-release:1.41
	cygwin-1_7_34-release:1.41
	newlib-2_2_0:1.41.0.2
	cygwin-1_7_33-release:1.41
	cygwin-1_7_32-release:1.41
	cygwin-1_7_31-release:1.41
	cygwin-1_7_30-release:1.41
	cygwin-1_7_29-release:1.41
	cygwin-1_7_28-release:1.41
	newlib-2_1_0:1.41
	cygwin-1_7_27-release:1.41
	cygwin-1_7_26-release:1.40
	cygwin-1_7_25-release:1.40
	cygwin-1_7_24-release:1.40
	cygwin-1_7_23-release:1.40
	cygwin-1_7_22-release:1.40
	cygwin-1_7_21-release:1.40
	cygwin-1_7_20-release:1.39
	cygwin-1_7_19-release:1.39
	cygwin-64bit-postmerge:1.39
	cygwin-64bit-premerge-branch:1.39.0.4
	cygwin-64bit-premerge:1.39
	cygwin-1_7_18-release:1.39
	newlib-2_0_0:1.39
	cygwin-1_7_17-release:1.39
	cygwin-64bit-branch:1.39.0.2
	cygwin-1_7_16-release:1.39
	cygwin-1_7_15-release:1.37
	cygwin-1_7_14_2-release:1.37
	cygwin-1_7_14-release:1.37
	cygwin-1_7_12-release:1.37
	cygwin-1_7_11-release:1.37
	cygwin-1_7_10-release:1.37
	newlib-1_20_0:1.37
	cygwin-1_7_9-release:1.35
	cygwin-1_7_8-release:1.35
	newlib-1_19_0:1.34
	cygwin-1_7_7-release:1.32
	cygwin-1_7_5-release:1.32
	cygwin-1_7_4-release:1.32
	cygwin-1_7_3-release:1.32
	cygwin-1_7_2-release:1.32
	newlib-1_18_0:1.31
	cygwin-1_7_1-release:1.31
	newlib-1_17_0-arc:1.29.0.2
	binutils-arc-20080908-branch:1.28.0.2
	binutils-arc-20080908-branchpoint:1.28
	newlib-1_17_0:1.29
	newlib-1_16_0:1.28
	newlib-1_15_0:1.26
	newlib-csl-coldfire-4_1-32:1.23
	newlib-csl-sourcerygxx-4_1-32:1.23
	newlib-csl-innovasic-fido-3_4_4-33:1.23
	newlib-csl-coldfire-4_1-30:1.23
	newlib-csl-sourcerygxx-4_1-30:1.23
	newlib-csl-coldfire-4_1-28:1.23
	newlib-csl-sourcerygxx-4_1-28:1.23
	newlib-csl-arm-2006q3-27:1.23
	newlib-csl-sourcerygxx-4_1-27:1.23
	newlib-csl-arm-2006q3-26:1.23
	newlib-csl-sourcerygxx-4_1-26:1.23
	newlib-csl-sourcerygxx-4_1-24:1.23
	newlib-csl-sourcerygxx-4_1-23:1.23
	newlib-csl-sourcerygxx-4_1-21:1.23
	newlib-csl-arm-2006q3-21:1.23
	newlib-csl-arm-2006q3-19:1.23
	newlib-csl-sourcerygxx-4_1-19:1.23
	newlib-csl-sourcerygxx-4_1-18:1.23
	newlib-csl-sourcerygxx-3_4_4-25:1.25
	newlib-csl-sourcerygxx-4_1-17:1.23
	cr-0x5f1:1.23.0.6
	newlib-csl-sourcerygxx-4_1-14:1.23
	newlib-csl-sourcerygxx-4_1-13:1.23
	newlib-csl-sourcerygxx-4_1-12:1.23
	newlib-csl-sourcerygxx-4_1-9:1.23
	newlib-csl-sourcerygxx-4_1-8:1.23
	newlib-csl-sourcerygxx-4_1-7:1.23
	newlib-csl-arm-2006q1-6:1.23
	newlib-csl-sourcerygxx-4_1-6:1.23
	newlib-csl-sourcerygxx-4_1-5:1.23
	newlib-csl-sourcerygxx-4_1-4:1.23
	newlib-autotools-branch:1.23.0.4
	newlib-csl-20060320-branch:1.23.0.2
	newlib-csl-20060320-branchpoint:1.23
	newlib-1_14_0:1.22
	newlib-csl-arm-2005-q1b:1.21
	newlib-csl-arm-2005-q1a:1.21
	newlib-1_13_0:1.19
	csl-arm-2004-q3:1.19
	csl-arm-2004-q1a:1.19
	csl-arm-2004-q1:1.19
	newlib-1_12_0:1.19
	csl-arm-2003-q4:1.19
	w32api-2_2:1.16
	mingw-runtime-2_4:1.16
	newlib-1_11_0:1.16
	cygnus_cvs_20020108_pre:1.9
	newlib-1_10_0:1.9
	newlib-1_9_0:1.5
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.41
date	2013.11.29.23.14.57;	author joel;	state Exp;
branches;
next	1.40;

1.40
date	2013.07.05.21.46.10;	author yselkowitz;	state Exp;
branches;
next	1.39;

1.39
date	2012.07.06.10.41.21;	author corinna;	state Exp;
branches;
next	1.38;

1.38
date	2012.06.26.16.03.12;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2011.08.01.17.22.18;	author joel;	state Exp;
branches;
next	1.36;

1.36
date	2011.05.02.16.05.06;	author yselkowitz;	state Exp;
branches;
next	1.35;

1.35
date	2011.01.15.09.26.16;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2010.12.08.14.44.06;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2010.11.16.17.29.39;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.23.23.13.20;	author jjohnstn;	state Exp;
branches;
next	1.31;

1.31
date	2009.09.28.16.42.21;	author jjohnstn;	state Exp;
branches;
next	1.30;

1.30
date	2009.06.17.16.47.02;	author jjohnstn;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.26.16.15.50;	author jjohnstn;	state Exp;
branches
	1.29.2.1;
next	1.28;

1.28
date	2007.09.18.20.05.17;	author jjohnstn;	state Exp;
branches;
next	1.27;

1.27
date	2007.02.07.17.19.35;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2006.09.13.22.09.27;	author jjohnstn;	state Exp;
branches;
next	1.25;

1.25
date	2006.08.19.16.13.23;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.16.21.39.43;	author jjohnstn;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.15.10.26.30;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.08.19.45.43;	author jjohnstn;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.06.20.32.16;	author jjohnstn;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.24.18.29.31;	author jjohnstn;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.02.20.32.07;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.11.12.51.52;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.10.22.13.35;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2002.08.20.01.40.38;	author jjohnstn;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.27.22.48.01;	author jjohnstn;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.21.18.15.53;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.03.17.48.06;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.22.12.34.12;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.22.11.39.07;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.09.20.40.37;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.19.03.03.29;	author fitzsim;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.28.00.16.58;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.12.00.05.57;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.20.19.27.56;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.12.01.24.08;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.25.10.25.51;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.06.11.59.53;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.06.20.55.46;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.29.2.1
date	2009.09.10.01.29.07;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.41
log
@2013-11-29  Jennifer Averett <jennifer.averett@@oarcorp.com>

	* libc/include/pthread.h (pthread_attr_setaffinity_np):
	Add pthread SMP affinity attributes to methods to RTEMS for
	compatibility with GNU/Linux.
	(pthread_attr_getaffinity_np): Likewise.
	(pthread_setaffinity_np): Likewise.
	(pthread_getaffinity_np): Likewise.
	(pthread_getattr_np): Add for GNU/Linux compatibility.
	* libc/include/sys/types.h: Add cpuset to pthread_attr_t for RTEMS.
	* libc/include/sys/cdefs.h (_GNU_SOURCE): Defining _GNU_SOURCE
	turns on all _XXX_VISBLE feature flags.
@
text
@/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */

#ifndef _SYS_TYPES_H

#include <_ansi.h>

#ifndef __INTTYPES_DEFINED__
#define __INTTYPES_DEFINED__

#include <machine/_types.h>

#if defined(__rtems__) || defined(__XMK__)
/*
 *  The following section is RTEMS specific and is needed to more
 *  closely match the types defined in the BSD sys/types.h.
 *  This is needed to let the RTEMS/BSD TCP/IP stack compile.
 */

/* deprecated */
#if ___int8_t_defined
typedef __uint8_t	u_int8_t;
#endif
#if ___int16_t_defined
typedef __uint16_t	u_int16_t;
#endif 
#if ___int32_t_defined
typedef __uint32_t	u_int32_t;
#endif

#if ___int64_t_defined
typedef __uint64_t	u_int64_t;

/* deprecated */
typedef	__uint64_t	u_quad_t;
typedef	__int64_t	quad_t;
typedef	quad_t *	qaddr_t;
#endif

#endif

#endif /* ! __INTTYPES_DEFINED */

#ifndef __need_inttypes

#define _SYS_TYPES_H
#include <sys/_types.h>

#ifdef __i386__
#if defined (GO32) || defined (__MSDOS__)
#define __MS_types__
#endif
#endif

# include <stddef.h>
# include <machine/types.h>

/* To ensure the stat struct's layout doesn't change when sizeof(int), etc.
   changes, we assume sizeof short and long never change and have all types
   used to define struct stat use them and not int where possible.
   Where not possible, _ST_INTxx are used.  It would be preferable to not have
   such assumptions, but until the extra fluff is necessary, it's avoided.
   No 64 bit targets use stat yet.  What to do about them is postponed
   until necessary.  */
#ifdef __GNUC__
#define _ST_INT32 __attribute__ ((__mode__ (__SI__)))
#else
#define _ST_INT32
#endif

# ifndef	_POSIX_SOURCE

#  define	physadr		physadr_t
#  define	quad		quad_t

#ifndef _BSDTYPES_DEFINED
/* also defined in mingw/gmon.h and in w32api/winsock[2].h */
#ifndef __u_char_defined
typedef	unsigned char	u_char;
#define __u_char_defined
#endif
#ifndef __u_short_defined
typedef	unsigned short	u_short;
#define __u_short_defined
#endif
#ifndef __u_int_defined
typedef	unsigned int	u_int;
#define __u_int_defined
#endif
#ifndef __u_long_defined
typedef	unsigned long	u_long;
#define __u_long_defined
#endif
#define _BSDTYPES_DEFINED
#endif

typedef	unsigned short	ushort;		/* System V compatibility */
typedef	unsigned int	uint;		/* System V compatibility */
typedef	unsigned long	ulong;		/* System V compatibility */
# endif	/*!_POSIX_SOURCE */

#ifndef __clock_t_defined
typedef _CLOCK_T_ clock_t;
#define __clock_t_defined
#endif

#ifndef __time_t_defined
typedef _TIME_T_ time_t;
#define __time_t_defined
#endif

#ifndef __timespec_defined
#define __timespec_defined
/* Time Value Specification Structures, P1003.1b-1993, p. 261 */

struct timespec {
  time_t  tv_sec;   /* Seconds */
  long    tv_nsec;  /* Nanoseconds */
};
#endif

struct itimerspec {
  struct timespec  it_interval;  /* Timer period */
  struct timespec  it_value;     /* Timer expiration */
};

#ifndef __daddr_t_defined
typedef	long	daddr_t;
#define __daddr_t_defined
#endif
#ifndef __caddr_t_defined
typedef	char *	caddr_t;
#define __caddr_t_defined
#endif

#ifndef __CYGWIN__
#if defined(__MS_types__) || defined(__rtems__) || \
    defined(__sparc__) || defined(__SPU__)
typedef	unsigned long	ino_t;
#else
typedef	unsigned short	ino_t;
#endif
#endif /*__CYGWIN__*/

#ifdef __MS_types__
typedef unsigned long vm_offset_t;
typedef unsigned long vm_size_t;

#define __BIT_TYPES_DEFINED__

typedef signed char int8_t;
typedef unsigned char u_int8_t;
typedef short int16_t;
typedef unsigned short u_int16_t;
typedef int int32_t;
typedef unsigned int u_int32_t;
typedef long long int64_t;
typedef unsigned long long u_int64_t;
typedef int32_t register_t;
#endif /* __MS_types__ */

/*
 * All these should be machine specific - right now they are all broken.
 * However, for all of Cygnus' embedded targets, we want them to all be
 * the same.  Otherwise things like sizeof (struct stat) might depend on
 * how the file was compiled (e.g. -mint16 vs -mint32, etc.).
 */

#ifndef __CYGWIN__	/* which defines these types in it's own types.h. */
typedef _off_t	off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;
#endif

#if defined(__XMK__)
typedef signed char pid_t;
#else
typedef int pid_t;
#endif

#if defined(__rtems__)
typedef _mode_t mode_t;
#endif

#ifndef __CYGWIN__
typedef	long key_t;
#endif
typedef _ssize_t ssize_t;

#if !defined(__CYGWIN__) && !defined(__rtems__)
#ifdef __MS_types__
typedef	char *	addr_t;
typedef int mode_t;
#else
#if defined (__sparc__) && !defined (__sparc_v9__)
#ifdef __svr4__
typedef unsigned long mode_t;
#else
typedef unsigned short mode_t;
#endif
#else
typedef unsigned int mode_t _ST_INT32;
#endif
#endif /* ! __MS_types__ */
#endif /*__CYGWIN__*/

typedef unsigned short nlink_t;

/* We don't define fd_set and friends if we are compiling POSIX
   source, or if we have included (or may include as indicated
   by __USE_W32_SOCKETS) the W32api winsock[2].h header which
   defines Windows versions of them.   Note that a program which
   includes the W32api winsock[2].h header must know what it is doing;
   it must not call the cygwin32 select function.
*/
# if !(defined (_POSIX_SOURCE) || defined (_WINSOCK_H) || defined (_WINSOCKAPI_) || defined (__USE_W32_SOCKETS)) 
#  define _SYS_TYPES_FD_SET
#  define	NBBY	8		/* number of bits in a byte */
/*
 * Select uses bit masks of file descriptors in longs.
 * These macros manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here
 * should be >= NOFILE (param.h).
 */
#  ifndef	FD_SETSIZE
#	define	FD_SETSIZE	64
#  endif

typedef	long	fd_mask;
#  define	NFDBITS	(sizeof (fd_mask) * NBBY)	/* bits per mask */
#  ifndef	howmany
#	define	howmany(x,y)	(((x)+((y)-1))/(y))
#  endif

/* We use a macro for fd_set so that including Sockets.h afterwards
   can work.  */
typedef	struct _types_fd_set {
	fd_mask	fds_bits[howmany(FD_SETSIZE, NFDBITS)];
} _types_fd_set;

#define fd_set _types_fd_set

#  define	FD_SET(n, p)	((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
#  define	FD_CLR(n, p)	((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
#  define	FD_ISSET(n, p)	((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
#  define	FD_ZERO(p)	(__extension__ (void)({ \
     size_t __i; \
     char *__tmp = (char *)p; \
     for (__i = 0; __i < sizeof (*(p)); ++__i) \
       *__tmp++ = 0; \
}))

# endif	/* !(defined (_POSIX_SOURCE) || defined (_WINSOCK_H) || defined (_WINSOCKAPI_) || defined (__USE_W32_SOCKETS)) */

#undef __MS_types__
#undef _ST_INT32


#ifndef __clockid_t_defined
typedef _CLOCKID_T_ clockid_t;
#define __clockid_t_defined
#endif

#ifndef __timer_t_defined
typedef _TIMER_T_ timer_t;
#define __timer_t_defined
#endif

typedef unsigned long useconds_t;
typedef long suseconds_t;

#include <sys/features.h>


/* Cygwin will probably never have full posix compliance due to little things
 * like an inability to set the stackaddress. Cygwin is also using void *  
 * pointers rather than structs to ensure maximum binary compatability with
 * previous releases.
 * This means that we don't use the types defined here, but rather in
 * <cygwin/types.h>
 */
#if defined(_POSIX_THREADS) && !defined(__CYGWIN__)

#include <sys/sched.h>

/*
 *  2.5 Primitive System Data Types,  P1003.1c/D10, p. 19.
 */

#if defined(__XMK__)
typedef unsigned int pthread_t;          /* identify a thread */
#else
typedef __uint32_t pthread_t;            /* identify a thread */
#endif

/* P1003.1c/D10, p. 118-119 */
#define PTHREAD_SCOPE_PROCESS 0
#define PTHREAD_SCOPE_SYSTEM  1

/* P1003.1c/D10, p. 111 */
#define PTHREAD_INHERIT_SCHED  1      /* scheduling policy and associated */
                                      /*   attributes are inherited from */
                                      /*   the calling thread. */
#define PTHREAD_EXPLICIT_SCHED 2      /* set from provided attribute object */

/* P1003.1c/D10, p. 141 */
#define PTHREAD_CREATE_DETACHED 0
#define PTHREAD_CREATE_JOINABLE  1

#if defined(__rtems__)
  #include <sys/cpuset.h>
#endif

#if defined(__XMK__)
typedef struct pthread_attr_s {
  int contentionscope;
  struct sched_param schedparam;
  int  detachstate;
  void *stackaddr;
  size_t stacksize;
} pthread_attr_t;

#define PTHREAD_STACK_MIN       200

#else /* !defined(__XMK__) */
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;
#if defined(__rtems__)
  size_t guardsize;
#endif

  /* P1003.4b/D8, p. 54 adds cputime_clock_allowed attribute.  */
#if defined(_POSIX_THREAD_CPUTIME)
  int  cputime_clock_allowed;  /* see time.h */
#endif
  int  detachstate;
#if defined(__rtems__)
  size_t affinitysetsize;
  cpu_set_t *affinityset;
  cpu_set_t affinitysetpreallocated;
#endif
} pthread_attr_t;

#endif /* !defined(__XMK__) */

#if defined(_POSIX_THREAD_PROCESS_SHARED)
/* NOTE: P1003.1c/D10, p. 81 defines following values for process_shared.  */

#define PTHREAD_PROCESS_PRIVATE 0 /* visible within only the creating process */
#define PTHREAD_PROCESS_SHARED  1 /* visible too all processes with access to */
                                  /*   the memory where the resource is */
                                  /*   located */
#endif

#if defined(_POSIX_THREAD_PRIO_PROTECT)
/* Mutexes */

/* Values for blocking protocol. */

#define PTHREAD_PRIO_NONE    0
#define PTHREAD_PRIO_INHERIT 1
#define PTHREAD_PRIO_PROTECT 2
#endif

#if defined(_UNIX98_THREAD_MUTEX_ATTRIBUTES)

/* Values for mutex type */

/* The following defines are part of the X/Open System Interface (XSI). */

/*
 * This type of mutex does not detect deadlock. A thread attempting to
 * relock this mutex without first unlocking it shall deadlock. Attempting
 * to unlock a mutex locked by a different thread results in undefined
 * behavior.  Attempting to unlock an unlocked mutex results in undefined
 * behavior.
 */
#define PTHREAD_MUTEX_NORMAL     0

/*
 * A thread attempting to relock this mutex without first unlocking
 * it shall succeed in locking the mutex.  The relocking deadlock which
 * can occur with mutexes of type PTHREAD_MUTEX_NORMAL cannot occur with
 * this type of mutex.  Multiple locks of this mutex shall require the
 * same number of unlocks to release the mutex before another thread can
 * acquire the mutex. A thread attempting to unlock a mutex which another
 * thread has locked shall return with an error.  A thread attempting to
 * unlock an unlocked mutex shall return with an error.
 */
#define PTHREAD_MUTEX_RECURSIVE  1

/* 
 * This type of mutex provides error checking. A thread attempting
 * to relock this mutex without first unlocking it shall return with an
 * error. A thread attempting to unlock a mutex which another thread has
 * locked shall return with an error. A thread attempting to unlock an
 * unlocked mutex shall return with an error.
 */
#define PTHREAD_MUTEX_ERRORCHECK 2

/*
 * Attempting to recursively lock a mutex of this type results
 * in undefined behavior. Attempting to unlock a mutex of this type
 * which was not locked by the calling thread results in undefined
 * behavior. Attempting to unlock a mutex of this type which is not locked
 * results in undefined behavior. An implementation may map this mutex to
 * one of the other mutex types.
 */
#define PTHREAD_MUTEX_DEFAULT    3

#endif /* !defined(_UNIX98_THREAD_MUTEX_ATTRIBUTES) */

#if defined(__XMK__)
typedef unsigned int pthread_mutex_t;    /* identify a mutex */

typedef struct {
  int type;
} pthread_mutexattr_t;

#else /* !defined(__XMK__) */
typedef __uint32_t pthread_mutex_t;      /* identify a mutex */

typedef struct {
  int   is_initialized;
#if defined(_POSIX_THREAD_PROCESS_SHARED)
  int   process_shared;  /* allow mutex to be shared amongst processes */
#endif
#if defined(_POSIX_THREAD_PRIO_PROTECT)
  int   prio_ceiling;
  int   protocol;
#endif
#if defined(_UNIX98_THREAD_MUTEX_ATTRIBUTES)
  int type;
#endif
  int   recursive;
} pthread_mutexattr_t;
#endif /* !defined(__XMK__) */

/* Condition Variables */

typedef __uint32_t pthread_cond_t;       /* identify a condition variable */

typedef struct {
  int   is_initialized;
#if defined(_POSIX_THREAD_PROCESS_SHARED)
  int   process_shared;       /* allow this to be shared amongst processes */
#endif
} pthread_condattr_t;         /* a condition attribute object */

/* Keys */

typedef __uint32_t pthread_key_t;        /* thread-specific data keys */

typedef struct {
  int   is_initialized;  /* is this structure initialized? */
  int   init_executed;   /* has the initialization routine been run? */
} pthread_once_t;       /* dynamic package initialization */
#else
#if defined (__CYGWIN__)
#include <cygwin/types.h>
#endif
#endif /* defined(_POSIX_THREADS) */

/* POSIX Barrier Types */

#if defined(_POSIX_BARRIERS)
typedef __uint32_t pthread_barrier_t;        /* POSIX Barrier Object */
typedef struct {
  int   is_initialized;  /* is this structure initialized? */
#if defined(_POSIX_THREAD_PROCESS_SHARED)
  int   process_shared;       /* allow this to be shared amongst processes */
#endif
} pthread_barrierattr_t;
#endif /* defined(_POSIX_BARRIERS) */

/* POSIX Spin Lock Types */

#if !defined (__CYGWIN__)
#if defined(_POSIX_SPIN_LOCKS)
typedef __uint32_t pthread_spinlock_t;        /* POSIX Spin Lock Object */
#endif /* defined(_POSIX_SPIN_LOCKS) */

/* POSIX Reader/Writer Lock Types */

#if defined(_POSIX_READER_WRITER_LOCKS)
typedef __uint32_t pthread_rwlock_t;         /* POSIX RWLock Object */
typedef struct {
  int   is_initialized;       /* is this structure initialized? */
#if defined(_POSIX_THREAD_PROCESS_SHARED)
  int   process_shared;       /* allow this to be shared amongst processes */
#endif
} pthread_rwlockattr_t;
#endif /* defined(_POSIX_READER_WRITER_LOCKS) */
#endif /* __CYGWIN__ */

#endif  /* !__need_inttypes */

#undef __need_inttypes

#endif	/* _SYS_TYPES_H */
@


1.40
log
@* libc/include/sys/types.h (u_char): Add redefinition guard.
(u_short, u_int, u_long, caddr_t, daddr_t): Ditto.
@
text
@d325 4
d358 5
a362 1

@


1.39
log
@	Allow building of Cygwin using Mingw64 SDK headers:
	* libc/include/sys/time.h: Drop _WINSOCK_H guard.  Just use
	_TIMEVAL_DEFINED instead.
	* libc/include/sys/types.h: Check for _WINSOCKAPI_ along with
	_WINSOCK_H.
	* libc/include/sys/unistd.h: Ditto.
@
text
@d92 1
d94 3
d98 3
d102 3
d106 2
d141 1
d143 3
d147 2
@


1.38
log
@* libc/include/sys/types.h: Don't use the same preprocessor guard for time_t,
timespec, and itimerspec.  Add a separate guard specifically for timespec and
always unconditionally define itimerspec.
@
text
@d213 1
a213 1
# if !(defined (_POSIX_SOURCE) || defined (_WINSOCK_H) || defined (__USE_W32_SOCKETS)) 
d250 1
a250 1
# endif	/* !(defined (_POSIX_SOURCE) || defined (_WINSOCK_H) || defined (__USE_W32_SOCKETS)) */
@


1.37
log
@2011-08-01  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/include/sys/types.h: XML and RTEMS define
	_UNIX98_THREAD_MUTEX_ATTRIBUTES and can use the standard
	definitions. This avoids redefinition warnings.
@
text
@d112 1
d114 2
d122 1
a127 1
#endif
@


1.36
log
@* libc/include/sys/features.h [__CYGWIN__] (_POSIX_SPIN_LOCKS): Define.
* libc/include/sys/types.h: Cygwin provides its own pthread_spinlock_t
typedef.
@
text
@a303 33
#if defined(__XMK__) || defined(__rtems__)
/* The following defines are part of the X/Open System Interface (XSI). */

/* This type of mutex does not detect deadlock. A thread attempting to relock this mutex without first unlocking 
 * it shall deadlock. Attempting to unlock a mutex locked by a different thread results in undefined behavior. 
 * Attempting to unlock an unlocked mutex results in undefined behavior. 
 */
#define PTHREAD_MUTEX_NORMAL  1

/* 
 * This type of mutex provides error checking. A thread attempting to relock this mutex without first unlocking 
 * it shall return with an error. A thread attempting to unlock a mutex which another thread has locked shall return 
 * with an error. A thread attempting to unlock an unlocked mutex shall return with an error. 
 */
#define PTHREAD_MUTEX_ERRORCHECK  2 

/* A thread attempting to relock this mutex without first unlocking it shall succeed in locking the mutex. 
 * The relocking deadlock which can occur with mutexes of type PTHREAD_MUTEX_NORMAL cannot occur with this type of mutex. 
 * Multiple locks of this mutex shall require the same number of unlocks to release the mutex before another thread can 
 * acquire the mutex. A thread attempting to unlock a mutex which another thread has locked shall return with an error. 
 * A thread attempting to unlock an unlocked mutex shall return with an error. 
 */
#define PTHREAD_MUTEX_RECURSIVE  3

/* Attempting to recursively lock a mutex of this type results in undefined behavior. Attempting to unlock a 
 * mutex of this type which was not locked by the calling thread results in undefined behavior. Attempting to 
 * unlock a mutex of this type which is not locked results in undefined behavior. An implementation may map this 
 * mutex to one of the other mutex types.
 */
#define PTHREAD_MUTEX_DEFAULT  4 

#endif /* defined(__XMK__) || defined(__rtems__) */

d361 9
d371 11
d383 8
d392 9
d403 1
a403 1
#endif
@


1.35
log
@	* libc/include/sys/types.h (ulong): Add typedef.
@
text
@d466 1
a472 1
#if !defined (__CYGWIN__)
@


1.34
log
@	* include/sys/types.h: Add #if defined(__rtems__) around
	pthread_attr_t.guardsize.

	* include/pthread.h: Add pthread_attr_setstack, pthread_attr_getstack,
	pthread_attr_getguardsize, pthread_attr_setguardsize.
	* include/sys/types.h (pthread_attr_t): Add guardsize.
@
text
@d101 1
@


1.33
log
@	* libc/include/sys/types.h: Add _mode_t for __rtems__.
	* libc/sys/rtems/machine/_types.h: Provide _mode_t, _fpos_t, _off_t.
	Add _ssize_t for 64bit sparc.
	Let arm, i386, m68k, mips, PPC, sparc use 64bit _off_t, _fpos_t.
@
text
@d356 3
@


1.32
log
@
2010-02-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/types.h: Fix __XMK__ sectioning and remove
        redundant code section for __XMK__.
@
text
@d174 4
d183 1
a183 1
#ifndef __CYGWIN__
@


1.31
log
@
2009-09-28  Michael Eager <eager@@eagercon.com>

        * configure.host: Add microblaze.
        * libc/include/machine/ieeefp.h [MICROBLAZE]: Define __IEEE_BIG_ENDIAN.
        * libc/include/machine/setjmp.h [MICROBLAZE]: Define _JBLEN, _JBTYPE.
        * libc/include/sys/config.h [MICROBLAZE]: Define _REENT_SMALL,
        _UNIX98_THREAD_MUTEX_ATTRIBUTES.
        * libc/include/sys/types.h: Treat XMK like rtems, define
        PTHREAD_MUTEX_NORMAL, PTHREAD_MUTEX_ERRORCHECK, PTHREAD_MUTEX_RECURSIVE,
        PTHREAD_MUTEX_DEFAULT, PTHREAD_STACK_MIN, define stuct pthread_attr_s.
        * libc/machine/configure.in: Add microblaze.
        * libc/machine/configure: Add microblaze (not regenerated).
        * libc/machine/microblaze/configure.in: NEW.
        * libc/machine/microblaze/configure: Generate.
        * libc/machine/microblaze/Makefile.am: NEW.
        * libc/machine/microblaze/Makefile.in: Generate.
        * libc/machine/microblaze/{abort.c, strcmp.c, strcpy.c, strlen.c,
        mallocr.c, longjmp.S, setjmp.S}: NEW.
        * libc/stdlib/mallocr.c [MICROBLAZE]: Don't declare sbrk prototype,
        mALLOc(): return malloc value.
@
text
@a351 1
#endif /* !defined(__XMK__) */
d361 2
a399 56

#if defined(__XMK__)
/* The following defines are part of the X/Open System Interface (XSI). */

/* This type of mutex does not detect deadlock. A thread attempting to 
 * relock this mutex without first unlocking it shall deadlock. Attempting 
 * to unlock a mutex locked by a different thread results in undefined 
 * behavior.  Attempting to unlock an unlocked mutex results in undefined 
 * behavior. 
 */
#define PTHREAD_MUTEX_NORMAL  1

/* 
 * This type of mutex provides error checking. A thread attempting to 
 * relock this mutex without first unlocking it shall return with an error. 
 * A thread attempting to unlock a mutex which another thread has locked 
 * shall return with an error. A thread attempting to unlock an unlocked 
 * mutex shall return with an error. 
 */
#define PTHREAD_MUTEX_ERRORCHECK  2 

/* A thread attempting to relock this mutex without first unlocking it 
 * shall succeed in locking the mutex.  The relocking deadlock which can 
 * occur with mutexes of type PTHREAD_MUTEX_NORMAL cannot occur with this 
 * type of mutex.  Multiple locks of this mutex shall require the same 
 * number of unlocks to release the mutex before another thread can 
 * acquire the mutex. A thread attempting to unlock a mutex which another 
 * thread has locked shall return with an error.  A thread attempting to 
 * unlock an unlocked mutex shall return with an error. 
 */
#define PTHREAD_MUTEX_RECURSIVE  3

/* Attempting to recursively lock a mutex of this type results in 
 * undefined behavior. Attempting to unlock a mutex of this type which was 
 * not locked by the calling thread results in undefined behavior. 
 * Attempting to unlock a mutex of this type which is not locked results 
 * in undefined behavior. An implementation may map this mutex to one of 
 * the other mutex types.
 */
#define PTHREAD_MUTEX_DEFAULT  4 

typedef struct pthread_attr_s {
  int contentionscope;
  struct sched_param schedparam;
  int  detachstate;
  void *stackaddr;
  size_t stacksize;
} pthread_attr_t;

#define PTHREAD_STACK_MIN       200

#endif /* defined(__XMK__) */

typedef struct {
    int type;
} pthread_mutexattr_t;
@


1.30
log
@
2009-06-17  Michael Eager <eager@@eagercon.com>

        * libc/include/pthread.h: Support XMK (Xilinx) BSP, add RTEMS to
        PTHREAD_MUTEX_NORMAL.
        * libc/include/sys/features.h: Same.
        * libc/include/sys/types.h: Same.
@
text
@d27 1
a27 1
#if defined(__rtems__)
d396 57
@


1.29
log
@
2008-09-25  Raphael Derossa Pereira  <raphaelpereira@@gmail.com>

        * libc/include/pthread.h[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add
        new pthread_mutexattr_gettype and pthread_mutexattr_settype
        prototypes.
        * libc/include/sys/types.h[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add
        new mutex type values.
        (pthread_mutexattr_t)[_UNIX98_THREAD_MUTEX_ATTRIBUTES]: Add type
        field.
@
text
@d168 3
d172 2
d279 3
d283 1
d299 45
d352 1
d392 7
d415 1
@


1.29.2.1
log
@Support for ARCompact architecture.
@
text
@d130 1
a130 1
    defined(__sparc__) || defined(__SPU__) || defined(__arc__)
a184 2
#elif defined (__arc__)
typedef unsigned short mode_t;
@


1.28
log
@
2007-09-18 Patrick Mansfield <patmans@@us.ibm.com>

        * libc/include/sys/types.h: Use __dev_t, __uid_t, and __gid_t to
        typedef dev_t, gid_t, and uid_t.
        * libc/include/sys/_types.h: Move previous dev_t, uid_t and gid_t
        types.h code to here, but typedef __dev_t, __uid_t, and __gid_t instead.
        Change to lower case for all __foo_t_defined names.
        * libc/machine/spu/machine/_types.h: Add SPU specific __dev_t,
        __uid_t, and __gid_t making them all four bytes. Change to lower case
        for all __foo_t_defined names.
@
text
@d326 11
d348 3
@


1.27
log
@	* libc/include/sys/features.h: Add definition of all supported
	_POSIX_xxx values for Cygwin.
	* libc/include/sys/types.h (pthread_rwlock_t): Omit definition
	on Cygwin.
	(pthread_rwlockattr_t): Ditto.
	* libc/include/sys/unistd.h: Define all _SC_xxx values as
	required by SUSv3.  Unify formatting.
@
text
@a160 9
#if defined(__rtems__)
/* device numbers are 32-bit major and and 32-bit minor */
typedef unsigned long long dev_t;
#else
#ifndef __CYGWIN__
typedef	short	dev_t;
#endif
#endif

d162 4
a165 4
typedef long		off_t;

typedef	unsigned short	uid_t;
typedef	unsigned short	gid_t;
@


1.26
log
@
2006-09-13  Joel Sherrill <joel@@oarcorp.com>

        * libc/include/pthread.h: Add pthread barriers,
        rwlocks, and spinlocks.  Change const to
        _CONST and prefix parameter names with
        an underscore.
        * libc/include/sys/types.h: Add id and attribute
        types for barriers, wrlocks, and spinlocks.
        * libc/include/sys/features.h: Enable barriers,
        wrlocks, and spinlocks for RTEMS.
@
text
@d394 1
d404 1
@


1.25
log
@* sys/types.h: Correct syntax error caused by missing '\' on #ifdef line.
@
text
@d374 30
@


1.24
log
@
2006-08-16  Joel Schopp  <jschopp@@austin.ibm.com>

        * configure.host: Add spu support.
        * libc/include/stdint.h: Ditto.
        * libc/include/machine/ieeefp.h: Ditto.
        * libc/include/machine/setjmp.h: Ditto.
        * libc/include/sys/config.h: Ditto.
        * libc/include/sys/types.h: Ditto.
        * libc/machine/spu/Makefile.am: New file.
        * libc/machine/spu/Makefile.in: Ditto.
        * libc/machine/spu/aclocal.m4: Ditto.
        * libc/machine/spu/configure: Ditto.
        * libc/machine/spu/configure.in: Ditto.
        * libc/machine/spu/memcpy.c: Ditto.
        * libc/machine/spu/setjmp.S: Ditto.
@
text
@d129 1
a129 1
#if defined(__MS_types__) || defined(__rtems__) ||
@


1.23
log
@	* libc/include/sys/time.h (struct timeval): Change member types
	according to SUSv3.
	* libc/include/sys/types.h (useconds_t): Change to unsigned
	according to SUSv3.
	(suseconds_t): Define type.
@
text
@d129 2
a130 4
#if defined(__MS_types__) || defined(__rtems__)
typedef	unsigned long	ino_t;
#else
#ifdef __sparc__
a134 1
#endif
@


1.22
log
@
2005-12-08  Shaun Jackman  <sjackman@@gmail.com>

	* libc/include/sys/types.h: Remove the ifdef armour around
	standard POSIX types.
@
text
@d265 2
a266 1
typedef long useconds_t;
@


1.21
log
@
2005-03-06  Ralf Corsepious  <ralf.corsepius@@rtems.org>

        * libc/include/machine/_types.h: New file.
        * libc/include/sys/types.h: Do not check for __rtems__
        when including <machine/_types.h>.  Remove some redundant
        declarations now that <machine/_types.h> is included.
        * libc/sys/rtems/machine/_types.h: Removed.  Replaced with
        shared header file.
@
text
@a253 5
/* The following are actually standard POSIX 1003.1b-1993 threads, mutexes,
   condition variables, and keys.  But since RTEMS is currently the only
   newlib user of these, the ifdef is just on RTEMS. */

#if defined(__rtems__) || defined(__CYGWIN__)
a264 1
#if defined(__CYGWIN__) || defined(__rtems__)
a265 1
#endif
a375 2
#endif  /* defined(__rtems__) */

@


1.20
log
@
2005-02-24  Ralf Corsepious  <ralf.corsepius@@rtems.org>

        * libc/include/sys/types.h [__rtems__]: Include new
        header file machine/_types.h.
        * libc/include/machine/types.h: Ditto.
        * libc/sys/rtems/machine/_types.h: New file.
@
text
@d25 1
a25 20
#if !defined (__rtems__)
typedef short int __int16_t;
typedef unsigned short int __uint16_t;

#if __INT_MAX__ == 32767
typedef long int __int32_t;
typedef unsigned long int __uint32_t;
#else
typedef int __int32_t;
typedef unsigned int __uint32_t;
#endif

#if __LONG_MAX__ > 2147483647 || !defined(__GNUC__)
typedef long int __int64_t;
typedef unsigned long int __uint64_t;
#else
__extension__ typedef long long __int64_t;
__extension__ typedef unsigned long long __uint64_t;
#endif
#else /* __rtems__ */
d27 1
a33 2
#include <machine/_types.h>

@


1.19
log
@
2003-07-02  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/types.h (int8_t): Make signed.
@
text
@d24 2
d44 32
@


1.18
log
@	* libc/include/sys/types.h: Don't define key_t for Cygwin.
@
text
@d132 1
a132 1
typedef char int8_t;
@


1.17
log
@* libc/include/sys/types.h: Don't define __MS_types__ for Cygwin.  Don't define
some types under cygwin.
@
text
@d167 1
d169 1
@


1.16
log
@
2002-08-19  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/types.h: Support __need_inttypes macro
        that only sets the __intxx and __uintxx types.
        * libc/machine/powerpc/Makefile.am: Add stdlib to include directories
        to get mprec.h.
        * libc/machine/powerpc/Makefile.in: Regenerated.
        * libc/machine/powerpc/vfprintf.c: Fix state variable type.
        * libc/machine/powerpc/vfscanf.c: Fix state variable type.  Remove
        redundant fixed-point conversion prototypes.
        * libc/machine/powerpc/machine/stdlib.h[__SPE__]: Include <sys/types.h>
        after setting __need_inttypes.
@
text
@a48 4
#if defined (_WIN32) || defined (__CYGWIN__)
#define __MS_types__
#endif

d114 1
d124 1
a124 1

d170 1
d185 1
@


1.15
log
@
2002-06-27  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/_types.h: Define _ssize_t as int if int is
        32-bits, otherwise define it as long.
        * libc/include/sys/types.h: Include <_ansi.h> and <sys/_types.h>
        and define ssize_t as _ssize_t.
        * libc/reent/readr.c: Change return type to _ssize_t.
        * libc/reent/writer.c: Ditto.
        * libc/sys/linux/Makefile.am: Add aio.c.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/aio.c: New file.
        * libc/sys/linux/sys/cdefs.h: Add __restrict_arr definition.
        * libm/common/fdlibm.h: Undef __P before defining it.
@
text
@a18 1
#define _SYS_TYPES_H
d21 26
a127 18
typedef short int __int16_t;
typedef unsigned short int __uint16_t;

#if __INT_MAX__ == 32767
typedef long int __int32_t;
typedef unsigned long int __uint32_t;
#else
typedef int __int32_t;
typedef unsigned int __uint32_t;
#endif

#if __LONG_MAX__ > 2147483647 || !defined(__GNUC__)
typedef long int __int64_t;
typedef unsigned long int __uint64_t;
#else
__extension__ typedef long long __int64_t;
__extension__ typedef unsigned long long __uint64_t;
#endif
d369 4
@


1.14
log
@
2002-06-21  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Add <sys/types.h> to get _uint32_t definition.
        * libc/include/machine/types.h: Skip __off_t, __pid_t, and
        __loff_t definitions if special _HAVE_SYSTYPES macro defined.
        * libc/include/sys/config.h: Removed _uint*, _int* definitions.
        * libc/include/sys/param.h: Remove i386 case which is handled
        by default case.
        (BIG_ENDIAN, LITTLE_ENDIAN): Protect
        definitions in case they are already defined.
        (BYTE_ORDER): Add default case using _IEEE_BIG_ENDIAN and
        _IEEE_LITTLE_ENDIAN flags.
        * libc/include/sys/reent.h: Change __uint32_t references to
        use _ULong instead.
        (_REENT_GETDATE_REENT_P): New macro.
        * libc/include/sys/types.h (__int16_t, __uint16_t): Added.
        (__int32_t, __uint32_t, __int64_t, __uint64_t): Ditto.
        * libc/search/hash.h: Add default setting of BYTE_ORDER,
        LITTLE_ENDIAN, and BIG_ENDIAN, if not already defined.
        * libc/sys/linux/sys/types.h: Include <sys/_types.h>.  Define
        ssize_t based on _ssize_t.  Remove __socklen_t, __uintptr_t,
        pid_t, off_t, loff_t, caddr_t, and daddr_t type
        definitions which are done by subsequent glibc headers.
        Add macro definitions to prevent subsequent header files from
        defining pid_t, off_t, ssize_t, and key_t.  Move uintptr_t and
        intptr_t to after glibc definitions of types they are based on.
@
text
@d21 3
d164 1
a164 1
typedef long ssize_t;
@


1.13
log
@	* libc/include/sys/types.h: Don't define dev_t when compiling for
	Cygwin.
@
text
@d100 19
@


1.12
log
@	* libc/include/sys/types.h: Revert previous patch.
@
text
@d128 1
d130 1
@


1.11
log
@	* libc/include/sys/types.h: Include cygwin/types.h always under
	Cygwin, not only if _POSIX_THREADS is defined.
@
text
@a331 2
#endif /* defined(_POSIX_THREADS) */

d335 1
@


1.10
log
@	* libc/include/grp.h: Include Cygwin specific header.
	* libc/include/sys/stat.h: Ditto.  Don't define `struct stat'
	when compiling for Cygwin.
	* libc/include/sys/types.h: Don't define off_t, uid_t
	and gid_t when compiling for Cygwin.
@
text
@d332 2
a336 1
#endif /* defined(_POSIX_THREADS) */
@


1.9
log
@2001-12-18  Thomas Fitzsimmons  <fitzsim@@redhat.com>

	* libc/machine/i386/f_*: Move to libm/machine/i386.

2001-12-18      Joel Sherrill <joel@@OARcorp.com>

	* libm/machine/Makefile.am: Add dummy doc stub so
	"make info" works.

2001-12-17	Joel Sherrill <joel@@OARcorp.com>

	* libc/include/sys/types.h (ino_t): RTEMS uses long also.
@
text
@d131 2
a132 1
typedef	long	off_t;
d136 2
@


1.8
log
@* libc/include/sys/types.h: Define useconds_t.
* libc/include/sys/ulimit.h: Declare ualarm.
@
text
@d90 1
a90 1
#ifdef __MS_types__
d221 1
a221 1
#ifdef __CYGWIN__
@


1.7
log
@* libc/include/sys/features.h: Add appropriate defines for Cygwin pthread
support.
* libc/include/sys/signal.h: Remove unneeded __CYGWIN__ protection.
* libc/include/sys/types.h: Protect __CYGWIN__ from the rtems pthreads types.
Include <cygwin/types.h> for the cygwin specific typedefs.
@
text
@d221 4
@


1.6
log
@* libc/include/sys/types.h (BSD int typedefs): Guard with _BSDTYPES_DEFINED
rather than _WINSOCK_H.
(fd_set): Add !defined __USE_W32_SOCKETS to guard; define _SYS_TYPES_FD_SET.
* libc/include/sys/unistd.h (gethostname): Don't declare if defined
(_WINSOCK_H) || defined (__USE_W32_SOCKETS).
@
text
@d209 1
a209 1
#if defined(__rtems__)
d223 9
a231 1
#if defined(_POSIX_THREADS)
d324 4
a327 1

@


1.5
log
@
2000-12-11  Joel Sherrill <joel@@OARcorp.com>

        * Merge RTEMS specific .h files into main libc/include.
        * libc/sys/rtems/include/signal.h: Removed.
        * libc/sys/rtems/include/time.h: Removed.
        * libc/sys/rtems/sys/features.h: Removed.
        * libc/sys/rtems/sys/sched.h: Removed.
        * libc/sys/rtems/sys/siginfo.h: Removed.
        * libc/sys/rtems/sys/signal.h: Removed.
        * libc/sys/rtems/sys/time.h: Removed.
        * libc/sys/rtems/sys/times.h: Removed.
        definitions for time_t and clock_t since these are
        no longer in time.h.
        * libc/include/pthread.h: New file.
        * libc/include/sys/sched.h: New file.
        * libc/include/sys/features.h: New file.
        * libc/include/time.h: Removed duplicate definition of clock_t
        and time_t, get them from <sys/types.h> instead.  Add prototypes        for POSIX clock and timer functionality.
        * libc/sys/linux/sys/types.h: Changed to include
        * libc/include/machine/types.h: Add _CLOCKID_T_ and _TIMER_T_.
        * libc/include/sys/signal.h: Add more complete set of POSIX
        signal functionality including real-time and threaded signals.
        * libc/include/sys/types.h: Add clock_t, time_t, struct
        timespec, and struct itimerspec.  Centralizing these makes
        things cleaner.  RTEMS uses 64-bit dev_t.
        Added numerous primitive definitions
        for pthreads including macros, pthread_attr_t,
        pthread_mutexattr_t, pthread_condattr_t, pthread_key_t,
        pthread_once_t, and pthread_t.
        * libc/include/sys/unistd.h: Added getlogin_r() prototype.
        If RTEMS follow POSIX on read(), write() and sbrk() prototype.
        Feature flags removed and moved to new file <sys/features.h>.
        Full set of POSIX sysconf() constants
@
text
@d52 2
a53 1
#ifndef _WINSOCK_H
d58 1
d157 8
a164 6
   source, or if we have included the Windows Sockets.h header (which
   defines Windows versions of them).  Note that a program which
   includes the Windows sockets.h header must know what it is doing;
   it must not call the cygwin32 select function.  */
# if ! defined (_POSIX_SOURCE) && ! defined (_WINSOCK_H)

d200 1
a200 1
# endif	/* ! defined (_POSIX_SOURCE) && ! defined (_WINSOCK_H) */
@


1.4
log
@        * libc/include/sys/types.h: Change i to `__i' in FD_ZERO macro to
	avoid compiler warnings.
@
text
@d63 5
d71 12
d122 4
d127 1
d200 116
@


1.3
log
@        * libc/include/sys/types.h: Change type of i to `size_t' in
        FD_ZERO macro to avoid compiler warnings.
@
text
@d168 1
a168 1
     size_t i; \
d170 1
a170 1
     for (i = 0; i < sizeof (*(p)); ++i) \
@


1.2
log
@
2000-09-06  Jeff Johnston <jjohnstn@@redhat.com>

        * libc/include/sys/types.h (FD_ZERO): Remove call to bzero and
        inline code to prevent having to include another header file.
@
text
@d168 1
a168 1
     int i; \
@


1.1
log
@Initial revision
@
text
@d167 6
a172 1
#  define	FD_ZERO(p)	bzero((caddr_t)(p), sizeof (*(p)))
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
