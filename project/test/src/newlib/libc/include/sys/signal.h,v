head	1.25;
access;
symbols
	cygwin-1_7_35-release:1.25
	cygwin-1_7_34-release:1.25
	newlib-2_2_0:1.25.0.2
	cygwin-1_7_33-release:1.24
	cygwin-1_7_32-release:1.22
	cygwin-1_7_31-release:1.22
	cygwin-1_7_30-release:1.22
	cygwin-1_7_29-release:1.22
	cygwin-1_7_28-release:1.22
	newlib-2_1_0:1.22
	cygwin-1_7_27-release:1.22
	cygwin-1_7_26-release:1.22
	cygwin-1_7_25-release:1.22
	cygwin-1_7_24-release:1.22
	cygwin-1_7_23-release:1.22
	cygwin-1_7_22-release:1.22
	cygwin-1_7_21-release:1.22
	cygwin-1_7_20-release:1.22
	cygwin-1_7_19-release:1.22
	cygwin-64bit-postmerge:1.22
	cygwin-64bit-premerge-branch:1.22.0.2
	cygwin-64bit-premerge:1.22
	cygwin-1_7_18-release:1.22
	newlib-2_0_0:1.22
	cygwin-1_7_17-release:1.21
	cygwin-64bit-branch:1.21.0.2
	cygwin-1_7_16-release:1.20
	cygwin-1_7_15-release:1.20
	cygwin-1_7_14_2-release:1.20
	cygwin-1_7_14-release:1.20
	cygwin-1_7_12-release:1.20
	cygwin-1_7_11-release:1.20
	cygwin-1_7_10-release:1.20
	newlib-1_20_0:1.20
	cygwin-1_7_9-release:1.19
	cygwin-1_7_8-release:1.19
	newlib-1_19_0:1.19
	cygwin-1_7_7-release:1.19
	cygwin-1_7_5-release:1.19
	cygwin-1_7_4-release:1.19
	cygwin-1_7_3-release:1.19
	cygwin-1_7_2-release:1.19
	newlib-1_18_0:1.19
	cygwin-1_7_1-release:1.19
	newlib-1_17_0-arc:1.18.0.6
	binutils-arc-20080908-branch:1.18.0.4
	binutils-arc-20080908-branchpoint:1.18
	newlib-1_17_0:1.18
	newlib-1_16_0:1.18
	newlib-1_15_0:1.18
	newlib-csl-coldfire-4_1-32:1.17
	newlib-csl-sourcerygxx-4_1-32:1.17
	newlib-csl-innovasic-fido-3_4_4-33:1.17
	newlib-csl-coldfire-4_1-30:1.17
	newlib-csl-sourcerygxx-4_1-30:1.17
	newlib-csl-coldfire-4_1-28:1.17
	newlib-csl-sourcerygxx-4_1-28:1.17
	newlib-csl-arm-2006q3-27:1.17
	newlib-csl-sourcerygxx-4_1-27:1.17
	newlib-csl-arm-2006q3-26:1.17
	newlib-csl-sourcerygxx-4_1-26:1.17
	newlib-csl-sourcerygxx-4_1-24:1.17
	newlib-csl-sourcerygxx-4_1-23:1.17
	newlib-csl-sourcerygxx-4_1-21:1.17
	newlib-csl-arm-2006q3-21:1.17
	newlib-csl-arm-2006q3-19:1.17
	newlib-csl-sourcerygxx-4_1-19:1.17
	newlib-csl-sourcerygxx-4_1-18:1.17
	newlib-csl-sourcerygxx-3_4_4-25:1.18
	newlib-csl-sourcerygxx-4_1-17:1.17
	cr-0x5f1:1.18.0.2
	newlib-csl-sourcerygxx-4_1-14:1.17
	newlib-csl-sourcerygxx-4_1-13:1.17
	newlib-csl-sourcerygxx-4_1-12:1.17
	newlib-csl-sourcerygxx-4_1-9:1.17
	newlib-csl-sourcerygxx-4_1-8:1.17
	newlib-csl-sourcerygxx-4_1-7:1.17
	newlib-csl-arm-2006q1-6:1.17
	newlib-csl-sourcerygxx-4_1-6:1.17
	newlib-csl-sourcerygxx-4_1-5:1.17
	newlib-csl-sourcerygxx-4_1-4:1.17
	newlib-autotools-branch:1.17.0.4
	newlib-csl-20060320-branch:1.17.0.2
	newlib-csl-20060320-branchpoint:1.17
	newlib-1_14_0:1.17
	newlib-csl-arm-2005-q1b:1.17
	newlib-csl-arm-2005-q1a:1.17
	newlib-1_13_0:1.17
	csl-arm-2004-q3:1.15
	csl-arm-2004-q1a:1.15
	csl-arm-2004-q1:1.15
	newlib-1_12_0:1.15
	csl-arm-2003-q4:1.14
	w32api-2_2:1.13
	mingw-runtime-2_4:1.13
	newlib-1_11_0:1.13
	cygnus_cvs_20020108_pre:1.9
	newlib-1_10_0:1.12
	newlib-1_9_0:1.4
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.25
date	2014.12.04.09.15.50;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2014.08.18.18.18.10;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2014.08.18.14.03.35;	author joel;	state Exp;
branches;
next	1.22;

1.22
date	2012.10.26.09.23.46;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2012.08.08.11.04.16;	author corinna;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2011.04.19.08.02.59;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.13.17.31.49;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.18.20.06.09;	author jjohnstn;	state Exp;
branches;
next	1.17;

1.17
date	2004.10.28.15.06.47;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.08.17.40.57;	author jjohnstn;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.08.19.25.21;	author jjohnstn;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.28.21.05.51;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.24.18.18.07;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.28.18.03.54;	author fitzsim;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.25.00.47.44;	author fitzsim;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.24.00.52.27;	author fitzsim;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.22.16.40.26;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.12.00.05.57;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.15.06.42.35;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.09.00.13.54;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.12.05.36.12;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.12.01.24.08;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.05.22.11.37;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.30.17.18.05;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.21.2.1
date	2012.10.26.09.27.36;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.25
log
@	* libc/include/sys/signal.h [__SPU__] (kill): Declare.
@
text
@/* sys/signal.h */

#ifndef _SYS_SIGNAL_H
#define _SYS_SIGNAL_H
#ifdef __cplusplus
extern "C" {
#endif

#include "_ansi.h"
#include <sys/features.h>
#include <sys/types.h>

/* #ifndef __STRICT_ANSI__*/

/* Cygwin defines it's own sigset_t in include/cygwin/signal.h */
#ifndef __CYGWIN__
typedef unsigned long sigset_t;
#endif

#if defined(__rtems__)

#if defined(_POSIX_REALTIME_SIGNALS)

/* sigev_notify values
   NOTE: P1003.1c/D10, p. 34 adds SIGEV_THREAD.  */

#define SIGEV_NONE   1  /* No asynchronous notification shall be delivered */
                        /*   when the event of interest occurs. */
#define SIGEV_SIGNAL 2  /* A queued signal, with an application defined */
                        /*  value, shall be delivered when the event of */
                        /*  interest occurs. */
#define SIGEV_THREAD 3  /* A notification function shall be called to */
                        /*   perform notification. */

/*  Signal Generation and Delivery, P1003.1b-1993, p. 63
    NOTE: P1003.1c/D10, p. 34 adds sigev_notify_function and
          sigev_notify_attributes to the sigevent structure.  */

union sigval {
  int    sival_int;    /* Integer signal value */
  void  *sival_ptr;    /* Pointer signal value */
};

struct sigevent {
  int              sigev_notify;               /* Notification type */
  int              sigev_signo;                /* Signal number */
  union sigval     sigev_value;                /* Signal value */

#if defined(_POSIX_THREADS)
  void           (*sigev_notify_function)( union sigval );
                                               /* Notification function */
  pthread_attr_t  *sigev_notify_attributes;    /* Notification Attributes */
#endif
};

/* Signal Actions, P1003.1b-1993, p. 64 */
/* si_code values, p. 66 */

#define SI_USER    1    /* Sent by a user. kill(), abort(), etc */
#define SI_QUEUE   2    /* Sent by sigqueue() */
#define SI_TIMER   3    /* Sent by expiration of a timer_settime() timer */
#define SI_ASYNCIO 4    /* Indicates completion of asycnhronous IO */
#define SI_MESGQ   5    /* Indicates arrival of a message at an empty queue */

typedef struct {
  int          si_signo;    /* Signal number */
  int          si_code;     /* Cause of the signal */
  union sigval si_value;    /* Signal value */
} siginfo_t;
#endif

/*  3.3.8 Synchronously Accept a Signal, P1003.1b-1993, p. 76 */

#define SA_NOCLDSTOP 0x1   /* Do not generate SIGCHLD when children stop */
#define SA_SIGINFO   0x2   /* Invoke the signal catching function with */
                           /*   three arguments instead of one. */
#if __BSD_VISIBLE || __XSI_VISIBLE || __POSIX_VISIBLE >= 200112
#define SA_ONSTACK   0x4   /* Signal delivery will be on a separate stack. */
#endif

/* struct sigaction notes from POSIX:
 *
 *  (1) Routines stored in sa_handler should take a single int as
 *      their argument although the POSIX standard does not require this.
 *      This is not longer true since at least POSIX.1-2008
 *  (2) The fields sa_handler and sa_sigaction may overlap, and a conforming
 *      application should not use both simultaneously.
 */

typedef void (*_sig_func_ptr)(int);

struct sigaction {
  int         sa_flags;       /* Special flags to affect behavior of signal */
  sigset_t    sa_mask;        /* Additional set of signals to be blocked */
                              /*   during execution of signal-catching */
                              /*   function. */
  union {
    _sig_func_ptr _handler;  /* SIG_DFL, SIG_IGN, or pointer to a function */
#if defined(_POSIX_REALTIME_SIGNALS)
    void      (*_sigaction)( int, siginfo_t *, void * );
#endif
  } _signal_handlers;
};

#define sa_handler    _signal_handlers._handler
#if defined(_POSIX_REALTIME_SIGNALS)
#define sa_sigaction  _signal_handlers._sigaction
#endif

#if __BSD_VISIBLE || __XSI_VISIBLE || __POSIX_VISIBLE >= 200112
/*
 * Minimum and default signal stack constants. Allow for target overrides
 * from <sys/features.h>.
 */
#ifndef	MINSIGSTKSZ
#define	MINSIGSTKSZ	2048
#endif
#ifndef	SIGSTKSZ
#define	SIGSTKSZ	8192
#endif

/*
 * Possible values for ss_flags in stack_t below.
 */
#define	SS_ONSTACK	0x1
#define	SS_DISABLE	0x2

/*
 * Structure used in sigaltstack call.
 */
typedef struct sigaltstack {
  void     *ss_sp;    /* Stack base or pointer.  */
  int       ss_flags; /* Flags.  */
  size_t    ss_size;  /* Stack size.  */
} stack_t;
#endif

#elif defined(__CYGWIN__)
#include <cygwin/signal.h>
#else
#define SA_NOCLDSTOP 1  /* only value supported now for sa_flags */

typedef void (*_sig_func_ptr)(int);

struct sigaction 
{
	_sig_func_ptr sa_handler;
	sigset_t sa_mask;
	int sa_flags;
};
#endif /* defined(__rtems__) */

#define SIG_SETMASK 0	/* set mask with sigprocmask() */
#define SIG_BLOCK 1	/* set of signals to block */
#define SIG_UNBLOCK 2	/* set of signals to, well, unblock */

/* These depend upon the type of sigset_t, which right now 
   is always a long.. They're in the POSIX namespace, but
   are not ANSI. */
#define sigaddset(what,sig) (*(what) |= (1<<(sig)), 0)
#define sigdelset(what,sig) (*(what) &= ~(1<<(sig)), 0)
#define sigemptyset(what)   (*(what) = 0, 0)
#define sigfillset(what)    (*(what) = ~(0), 0)
#define sigismember(what,sig) (((*(what)) & (1<<(sig))) != 0)

int _EXFUN(sigprocmask, (int how, const sigset_t *set, sigset_t *oset));

#if defined(_POSIX_THREADS)
int _EXFUN(pthread_sigmask, (int how, const sigset_t *set, sigset_t *oset));
#endif

#if defined(__CYGWIN__) || defined(__rtems__)
#undef sigaddset
#undef sigdelset
#undef sigemptyset
#undef sigfillset
#undef sigismember

#ifdef _COMPILING_NEWLIB
int _EXFUN(_kill, (pid_t, int));
#endif /* _COMPILING_NEWLIB */
#endif /* __CYGWIN__ || __rtems__ */
#if defined(__CYGWIN__) || defined(__rtems__) || defined(__SPU__)
int _EXFUN(kill, (pid_t, int));
#endif /* __CYGWIN__ || __rtems__ || __SPU__ */
#if defined(__CYGWIN__) || defined(__rtems__)
int _EXFUN(killpg, (pid_t, int));
int _EXFUN(sigaction, (int, const struct sigaction *, struct sigaction *));
int _EXFUN(sigaddset, (sigset_t *, const int));
int _EXFUN(sigdelset, (sigset_t *, const int));
int _EXFUN(sigismember, (const sigset_t *, int));
int _EXFUN(sigfillset, (sigset_t *));
int _EXFUN(sigemptyset, (sigset_t *));
int _EXFUN(sigpending, (sigset_t *));
int _EXFUN(sigsuspend, (const sigset_t *));
int _EXFUN(sigpause, (int));

#ifdef __rtems__
#if __BSD_VISIBLE || __XSI_VISIBLE || __POSIX_VISIBLE >= 200112
int _EXFUN(sigaltstack, (const stack_t *__restrict, stack_t *__restrict));
#endif
#endif

#if defined(_POSIX_THREADS)
#ifdef __CYGWIN__
#  ifndef _CYGWIN_TYPES_H
#    error You need the winsup sources or a cygwin installation to compile the cygwin version of newlib.
#  endif
#endif
int _EXFUN(pthread_kill, (pthread_t thread, int sig));
#endif

#if defined(_POSIX_REALTIME_SIGNALS)

/*  3.3.8 Synchronously Accept a Signal, P1003.1b-1993, p. 76
    NOTE: P1003.1c/D10, p. 39 adds sigwait().  */

int _EXFUN(sigwaitinfo, (const sigset_t *set, siginfo_t *info));
int _EXFUN(sigtimedwait,
  (const sigset_t *set, siginfo_t *info, const struct timespec  *timeout)
);
int _EXFUN(sigwait, (const sigset_t *set, int *sig));

/*  3.3.9 Queue a Signal to a Process, P1003.1b-1993, p. 78 */
int _EXFUN(sigqueue, (pid_t pid, int signo, const union sigval value));

#endif /* defined(_POSIX_REALTIME_SIGNALS) */

#endif /* defined(__CYGWIN__) || defined(__rtems__) */

/* #endif __STRICT_ANSI__ */

#if defined(___AM29K__)
/* These all need to be defined for ANSI C, but I don't think they are
   meaningful.  */
#define SIGABRT 1
#define SIGFPE 1
#define SIGILL 1
#define SIGINT 1
#define SIGSEGV 1
#define SIGTERM 1
/* These need to be defined for POSIX, and some others do too.  */
#define SIGHUP 1
#define SIGQUIT 1
#define NSIG 2
#elif defined(__GO32__)
#define SIGINT  1
#define SIGKILL 2
#define SIGPIPE 3
#define SIGFPE  4
#define SIGHUP  5
#define SIGTERM 6
#define SIGSEGV 7
#define SIGTSTP 8
#define SIGQUIT 9
#define SIGTRAP 10
#define SIGILL  11
#define SIGEMT  12
#define SIGALRM 13
#define SIGBUS  14
#define SIGLOST 15
#define SIGSTOP 16
#define SIGABRT 17
#define SIGUSR1	18
#define SIGUSR2	19
#define NSIG    20
#elif !defined(SIGTRAP)
#define	SIGHUP	1	/* hangup */
#define	SIGINT	2	/* interrupt */
#define	SIGQUIT	3	/* quit */
#define	SIGILL	4	/* illegal instruction (not reset when caught) */
#define	SIGTRAP	5	/* trace trap (not reset when caught) */
#define	SIGIOT	6	/* IOT instruction */
#define	SIGABRT 6	/* used by abort, replace SIGIOT in the future */
#define	SIGEMT	7	/* EMT instruction */
#define	SIGFPE	8	/* floating point exception */
#define	SIGKILL	9	/* kill (cannot be caught or ignored) */
#define	SIGBUS	10	/* bus error */
#define	SIGSEGV	11	/* segmentation violation */
#define	SIGSYS	12	/* bad argument to system call */
#define	SIGPIPE	13	/* write on a pipe with no one to read it */
#define	SIGALRM	14	/* alarm clock */
#define	SIGTERM	15	/* software termination signal from kill */

#if defined(__rtems__)
#define	SIGURG	16	/* urgent condition on IO channel */
#define	SIGSTOP	17	/* sendable stop signal not from tty */
#define	SIGTSTP	18	/* stop signal from tty */
#define	SIGCONT	19	/* continue a stopped process */
#define	SIGCHLD	20	/* to parent on child stop or exit */
#define	SIGCLD	20	/* System V name for SIGCHLD */
#define	SIGTTIN	21	/* to readers pgrp upon background tty read */
#define	SIGTTOU	22	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#define	SIGIO	23	/* input/output possible signal */
#define	SIGPOLL	SIGIO	/* System V name for SIGIO */
#define	SIGWINCH 24	/* window changed */
#define	SIGUSR1 25	/* user defined signal 1 */
#define	SIGUSR2 26	/* user defined signal 2 */

/* Real-Time Signals Range, P1003.1b-1993, p. 61
   NOTE: By P1003.1b-1993, this should be at least RTSIG_MAX
         (which is a minimum of 8) signals.
 */
#define SIGRTMIN 27
#define SIGRTMAX 31
#define __SIGFIRSTNOTRT SIGHUP
#define __SIGLASTNOTRT  SIGUSR2

#define NSIG	32      /* signal 0 implied */

#elif defined(__svr4__)
/* svr4 specifics. different signals above 15, and sigaction. */
#define	SIGUSR1	16
#define SIGUSR2	17
#define SIGCLD	18
#define	SIGPWR	19
#define SIGWINCH 20
#define	SIGPOLL	22	/* 20 for x.out binaries!!!! */
#define	SIGSTOP	23	/* sendable stop signal not from tty */
#define	SIGTSTP	24	/* stop signal from tty */
#define	SIGCONT	25	/* continue a stopped process */
#define	SIGTTIN	26	/* to readers pgrp upon background tty read */
#define	SIGTTOU	27	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#define NSIG	28	
#else
#define	SIGURG	16	/* urgent condition on IO channel */
#define	SIGSTOP	17	/* sendable stop signal not from tty */
#define	SIGTSTP	18	/* stop signal from tty */
#define	SIGCONT	19	/* continue a stopped process */
#define	SIGCHLD	20	/* to parent on child stop or exit */
#define	SIGCLD	20	/* System V name for SIGCHLD */
#define	SIGTTIN	21	/* to readers pgrp upon background tty read */
#define	SIGTTOU	22	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#define	SIGIO	23	/* input/output possible signal */
#define	SIGPOLL	SIGIO	/* System V name for SIGIO */
#define	SIGXCPU	24	/* exceeded CPU time limit */
#define	SIGXFSZ	25	/* exceeded file size limit */
#define	SIGVTALRM 26	/* virtual time alarm */
#define	SIGPROF	27	/* profiling time alarm */
#define	SIGWINCH 28	/* window changed */
#define	SIGLOST 29	/* resource lost (eg, record-lock lost) */
#define	SIGUSR1 30	/* user defined signal 1 */
#define	SIGUSR2 31	/* user defined signal 2 */
#define NSIG	32      /* signal 0 implied */
#endif
#endif

#ifdef __cplusplus
}
#endif

#ifndef _SIGNAL_H_
/* Some applications take advantage of the fact that <sys/signal.h>
 * and <signal.h> are equivalent in glibc.  Allow for that here.  */
#include <signal.h>
#endif
#endif /* _SYS_SIGNAL_H */
@


1.24
log
@	* libc/include/sys/signal.h: Declare sigaltstack for RTEMS only.
@
text
@a171 1
/* protos for functions found in winsup sources for CYGWIN */
d181 3
a183 1
#endif
d185 2
@


1.23
log
@2014-08-18 Joel Sherrill <joel.sherrill@@oarcorp.com>

    * libc/include/sys/signal.h: Add sigaltstack() support.
@
text
@d195 1
a195 1

d199 1
@


1.22
log
@	* libc/include/sys/signal.h (sigset_t): Don't define when building
	for Cygwin.
@
text
@d74 6
a79 3
#define SA_NOCLDSTOP 1   /* Do not generate SIGCHLD when children stop */
#define SA_SIGINFO   2   /* Invoke the signal catching function with */
                         /*   three arguments instead of one. */
d110 28
d195 5
@


1.21
log
@	Throughout, run newlib with -Wall -Werror option and fix bugs and
	compiler warnings found this way.

	* libc/stdio/freopen.c (_freopen_r): Fix bug setting _flags.

	* libc/include/stdio.h (_rename): Define when building newlib.
	* libc/include/sys/signal.h (_kill): Ditto.
	* libc/include/sys/stat.h (_mkdir): Ditto.
	* libc/include/sys/time.h (_gettimeofday): Ditto.
	* libc/include/sys/times.h (_times): Ditto.
	* libc/include/sys/wait.h (_wait): Ditto.
	* libc/locale/lmessages.c (empty): Don't define for Cygwin.
	* libc/locale/lmonetary.c (cnv): Ditto.
	* libc/locale/nl_langinfo.c (nl_langinfo): Ditto for variable s.
	* libc/posix/collate.c: Throughout cast to avoid compiler warning.
	* libc/posix/engine.c (matcher): Initialize dp to avoid compiler
	warning.
	* libc/posix/glob.c: Disable on Cygwin.  Explain why.
	* libc/posix/regcomp.c: Fix "uninitialized" compiler warnings.
	(dissect): Deliberately silence gcc compiler warning.  Add comment to
	explain why.
	* libc/posix/wordexp.c (wordexp): Remove num_bytes variable since result
	is never used.
	* libc/posix/popen.c (popen): Ditto for variable last.
	* libc/reent/mkdirr.c: Include sys/stat.h.
	* libc/reent/renamer.c: Include stdio.h.
	* libc/search/hash.c:  Throughout use underscored variants of the stat
	function family.
	(init_hash): Add missing definition for the __USE_INTERNAL_STAT64 case.
	* libc/search/hash_bigkey.c (__big_insert): Add parenthesis to avoid
	compiler warning.
	* libc/search/hash_page.c (overflow_page): Initalize freep to NULL to
	avoid compiler warning.
	* libc/stdio/asiprintf.c (_asiprintf_r): Cast unsigned char * to char *
	to avoid compiler warning.
	(asiprintf): Ditto.
	* libc/stdio/asprintf.c (_asprintf_r): Ditto.
	(asprintf): Ditto.
	* libc/stdio/vasiprintf.c (_vasiprintf_r): Ditto.
	* libc/stdio/vasprintf.c (_vasprintf_r): Ditto.
	* libc/stdio/mktemp.c (_gettemp): Cast to unsigned char in call to
	isdigit to avoid compiler warning.
	* libc/stdio/vfprintf.c (_VFPRINTF_R): Initialize variables used for
	grouping to avoid compiler warning.  Only define and set nseps and
	nrepeats if they are really used.
	* libc/stdio/vfwprintf.c (_VFWPRINTF_R): Ditto.  Only define state if
	it is really used.
	* libc/stdio/vfscanf.c (u_char): Revert to be defined as unsigned char.
	(__SVFSCANF_R): Cast fmt in call to __mbtowc.
	* libc/stdlib/mbtowc_r.c (JIS_state_table): Disable when building
	Cygwin.
	(JIS_action_table): Ditto.
	* libc/stdlib/wctomb_r.c (__utf8_wctomb): Add parenthesis to avoid
	compiler warning.
	* libc/string/strcasestr.c: Deliberately silence gcc compiler warning.
	Add comment to explain why.
	* libc/time/strptime.c (strptime): Cast to unsigned char in calls to
	isspace to avoid compiler warning.
	* libm/math/e_atan2.c (__ieee754_atan2): Add parenthesis to avoid
	compiler warning.
	* libm/math/e_exp.c (__ieee754_exp): Initialize k to 0 to avoid
	compiler warning.  Drop setting it to 0 later.
	* libm/math/ef_exp.c (__ieee754_expf): Ditto.
	* libm/math/e_pow.c (__ieee754_pow): Add braces to avoid compiler
	warning.
	* libm/math/ef_pow.c (__ieee754_powf): Ditto.
	* libm/math/er_lgamma.c (__ieee754_lgamma_r): Initialize nadj to 0 to
	avoid compiler warning.
	* libm/math/erf_lgamma.c (__ieee754_lgammaf_r): Ditto.
	* libm/math/e_rem_pio2.c (__ieee754_rem_pio2): Ditto for variable z.
	* libm/common/sf_round.c (roundf): Remove signbit variable since result
	is never used.
@
text
@d15 2
d18 1
@


1.21.2.1
log
@Pull in changes from HEAD
@
text
@a14 2
/* Cygwin defines it's own sigset_t in include/cygwin/signal.h */
#ifndef __CYGWIN__
a15 1
#endif
@


1.20
log
@	* libc/include/sys/signal.h (_sig_func_ptr): Define with int parameter
	per POSIX.  Explain in comment.
@
text
@d146 3
@


1.19
log
@
2009-10-13  Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>

        * libc/include/sys/signal.h: Include <sys/types.h> always.
        [__CYGWIN__, __rtems__]: Define kill first argument as pid_t per
        standards.
@
text
@d79 1
d84 1
a84 1
typedef void (*_sig_func_ptr)();
@


1.18
log
@
2006-04-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/signal.h (sigdelset, sigfillset, sigismember): New macros.
        (sigaddset, sigemptyset): Add return code.
@
text
@d11 1
a14 4
#if defined(_POSIX_THREADS)
#include <sys/types.h>   /* for pthread data types */
#endif

d144 2
a145 5
/* The first argument to kill should be pid_t.  Right now
   <sys/types.h> always defines pid_t to be int.  If that ever
   changes, then we will need to do something else, perhaps along the
   lines of <machine/types.h>.  */
int _EXFUN(kill, (int, int));
@


1.17
log
@* libc/include/sys/signal.h: Move <signal.h> include to bottom of file so that
all relevant definitions have been handled for use in the include.
@
text
@d128 5
a132 2
#define sigaddset(what,sig) (*(what) |= (1<<(sig)))
#define sigemptyset(what)   (*(what) = 0)
d143 1
d145 2
@


1.16
log
@
2004-10-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/sys/signal.h: If <signal.h> didn't include
        this header file, include <signal.h> to account for
        applications that take advantage that the two header
        files are the same in glibc.
@
text
@a4 7

#ifndef _SIGNAL_H_
/* Some applications take advantage of the fact that <sys/signal.h>
 * and <signal.h> are equivalent in glibc.  Allow for that here.  */
#include <signal.h>
#endif

d304 6
@


1.15
log
@
2004-01-08  Joel Sherrill  <joel@@oarcorp.com>

        * libc/sys/rtems/sys/queue.h: New file.
        * libc/include/sys/signal.h: Reflect renumbering of signals to
        fit into 32-bit mask.
        * libc/include/sys/unistd.h: Add fdatasync() prototype.
        * libc/sys/rtems/crt0.c: Add more symbols which may be implicitly
        required.  In particular, add the reentrant variants of libc calls.
        * libc/sys/rtems/sys/dirent.h: Add scandir() prototype.
@
text
@d6 6
@


1.14
log
@* libc/include/sys/signal.h: Use system specific signal file when building on
cygwin.
@
text
@d240 13
a252 11
#define SIGUSR1 16  /* reserved as application defined signal 1 */
#define SIGUSR2 17  /* reserved as application defined signal 2 */

#define __SIGFIRSTNOTRT SIGHUP
#define __SIGLASTNOTRT  SIGUSR2

/* RTEMS does not support job control, hence no Job Control Signals are
   defined per P1003.1b-1993, p. 60-61.

   RTEMS does not support memory protection, hence no Memory Protection
   Signals are defined per P1003.1b-1993, p. 60-61. */
d258 4
d263 1
a263 2
#define SIGRTMIN 18
#define SIGRTMAX 32
@


1.13
log
@
2002-07-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/signal.h (SIG_IGN, SIG_DFL, SIG_ERR): Change
        to use _sig_func_ptr type casted constants.
        (_sig_func_ptr): Typedef moved to sys/signal.h.
        * libc/include/sys/signal.h (_sig_func_ptr): Typedef added.
        For __rtems, use POSIX definition, otherwise default to ANSI.
        * libc/sys/linux/sys/signal.h (_sig_func_ptr): Typedef added.
@
text
@d82 1
a82 1
 *      there argument although the POSIX standard does not require this.
d107 2
d110 1
a119 10

#define SA_NOCLDSTOP 1  /* only value supported now for sa_flags */

#ifdef __CYGWIN__
# define SA_RESTART   0x10000000 /* Restart syscall on signal return.  */
# define SA_NODEFER   0x40000000 /* Don't automatically block the signal when
                                    its handler is being executed.  */
# define SA_RESETHAND 0x80000000 /* Reset to SIG_DFL on entry to handler.  */
#endif

d221 1
a221 36
#elif defined(__CYGWIN__)	/* BSD signals semantics */
#define	SIGHUP	1	/* hangup */
#define	SIGINT	2	/* interrupt */
#define	SIGQUIT	3	/* quit */
#define	SIGILL	4	/* illegal instruction (not reset when caught) */
#define	SIGTRAP	5	/* trace trap (not reset when caught) */
#define	SIGABRT 6	/* used by abort */
#define	SIGEMT	7	/* EMT instruction */
#define	SIGFPE	8	/* floating point exception */
#define	SIGKILL	9	/* kill (cannot be caught or ignored) */
#define	SIGBUS	10	/* bus error */
#define	SIGSEGV	11	/* segmentation violation */
#define	SIGSYS	12	/* bad argument to system call */
#define	SIGPIPE	13	/* write on a pipe with no one to read it */
#define	SIGALRM	14	/* alarm clock */
#define	SIGTERM	15	/* software termination signal from kill */
#define	SIGURG	16	/* urgent condition on IO channel */
#define	SIGSTOP	17	/* sendable stop signal not from tty */
#define	SIGTSTP	18	/* stop signal from tty */
#define	SIGCONT	19	/* continue a stopped process */
#define	SIGCHLD	20	/* to parent on child stop or exit */
#define	SIGCLD	20	/* System V name for SIGCHLD */
#define	SIGTTIN	21	/* to readers pgrp upon background tty read */
#define	SIGTTOU	22	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#define	SIGIO	23	/* input/output possible signal */
#define	SIGPOLL	SIGIO	/* System V name for SIGIO */
#define	SIGXCPU	24	/* exceeded CPU time limit */
#define	SIGXFSZ	25	/* exceeded file size limit */
#define	SIGVTALRM 26	/* virtual time alarm */
#define	SIGPROF	27	/* profiling time alarm */
#define	SIGWINCH 28	/* window changed */
#define	SIGLOST 29	/* resource lost (eg, record-lock lost) */
#define	SIGUSR1 30	/* user defined signal 1 */
#define	SIGUSR2 31	/* user defined signal 2 */
#define NSIG	32      /* signal 0 implied */
#else
@


1.12
log
@	* libc/include/sys/signal.h [__CYGWIN__]: Issue error message
	when _CYGWIN_TYPES_H is not defined.
@
text
@d87 2
d95 1
a95 1
    void      (*_handler)();  /* SIG_DFL, SIG_IGN, or pointer to a function */
d109 2
d113 1
a113 1
	void (*sa_handler)(int);
@


1.11
log
@	* libc/include/sys/signal.h: Revert 2002-01-23 change.
@
text
@d162 5
@


1.10
log
@	* libc/include/sys/signal.h: Remove pthread_kill declaration
	when __CYGWIN__ is defined.
@
text
@d161 1
a161 1
#if defined(_POSIX_THREADS) && !defined(__CYGWIN__)
@


1.9
log
@* libc/posix/execvp.c: Remove obsolete CYGWIN32 considerations throughout.
* signal.h: Change comment to reflect __CYGWIN__ rather than __CYGWIN32__.
* popen.c (popen): Use __CYGWIN_ rather than __CYGWIN32__.
* system.c (_system_r): Ditto.
@
text
@d161 1
a161 1
#if defined(_POSIX_THREADS)
@


1.8
log
@* libc/include/sys/features.h: Add appropriate defines for Cygwin pthread
support.
* libc/include/sys/signal.h: Remove unneeded __CYGWIN__ protection.
* libc/include/sys/types.h: Protect __CYGWIN__ from the rtems pthreads types.
Include <cygwin/types.h> for the cygwin specific typedefs.
@
text
@d181 1
a181 1
#endif /* defined(__CYGWIN32__) || defined(__rtems__) */
@


1.7
log
@* libc/include/sys/signal.h: Always include sys/types.h under Cygwin.
@
text
@d15 1
a15 1
#if defined(_POSIX_THREADS) || defined(__CYGWIN__)
@


1.6
log
@
2001-02-08  Edward M. Lee  <tailbert@@yahoo.com>

        * libc/include/grp.h: add prototype for initgroups.
        * libc/include/stdio.h: fix prototype for putw.
        * libc/include/sys/signal.h: add prototype for killpg.
        * libc/include/sys/stat.h: enable mknod/lstat for CYGWIN.
        * libc/include/sys/unistd.h: add prototypes for getpgid, setpgrp,
        vhangup and remove duplicate sysconf prototype.
@
text
@d15 1
a15 1
#if defined(_POSIX_THREADS)
@


1.5
log
@* libc/include/sys/signal.h: Add some SA_* defines for Cygwin.
@
text
@d150 1
@


1.4
log
@
2000-12-11  Joel Sherrill <joel@@OARcorp.com>

        * Merge RTEMS specific .h files into main libc/include.
        * libc/sys/rtems/include/signal.h: Removed.
        * libc/sys/rtems/include/time.h: Removed.
        * libc/sys/rtems/sys/features.h: Removed.
        * libc/sys/rtems/sys/sched.h: Removed.
        * libc/sys/rtems/sys/siginfo.h: Removed.
        * libc/sys/rtems/sys/signal.h: Removed.
        * libc/sys/rtems/sys/time.h: Removed.
        * libc/sys/rtems/sys/times.h: Removed.
        definitions for time_t and clock_t since these are
        no longer in time.h.
        * libc/include/pthread.h: New file.
        * libc/include/sys/sched.h: New file.
        * libc/include/sys/features.h: New file.
        * libc/include/time.h: Removed duplicate definition of clock_t
        and time_t, get them from <sys/types.h> instead.  Add prototypes        for POSIX clock and timer functionality.
        * libc/sys/linux/sys/types.h: Changed to include
        * libc/include/machine/types.h: Add _CLOCKID_T_ and _TIMER_T_.
        * libc/include/sys/signal.h: Add more complete set of POSIX
        signal functionality including real-time and threaded signals.
        * libc/include/sys/types.h: Add clock_t, time_t, struct
        timespec, and struct itimerspec.  Centralizing these makes
        things cleaner.  RTEMS uses 64-bit dev_t.
        Added numerous primitive definitions
        for pthreads including macros, pthread_attr_t,
        pthread_mutexattr_t, pthread_condattr_t, pthread_key_t,
        pthread_once_t, and pthread_t.
        * libc/include/sys/unistd.h: Added getlogin_r() prototype.
        If RTEMS follow POSIX on read(), write() and sbrk() prototype.
        Feature flags removed and moved to new file <sys/features.h>.
        Full set of POSIX sysconf() constants
@
text
@d116 7
@


1.3
log
@Fix spelling error.
@
text
@d11 7
a18 1
#ifndef __STRICT_ANSI__
d20 87
d113 5
a117 1
#define SA_NOCLDSTOP 1	/* only value supported now for sa_flags */
d128 5
a132 1
int sigprocmask (int __how, const sigset_t *__a, sigset_t *__b);
d134 2
a135 2
/* protos for functions found in winsup sources */
#if defined(__CYGWIN__)
d152 3
d157 19
a175 1
#endif /* __STRICT_ANSI__ */
d264 22
a285 1
#if defined(__svr4__)
@


1.2
log
@* libc/include/ctype.h: __CYGWIN32__ -> __CYGWIN__
* libc/include/malloc.h: Ditto.
* libc/include/process.h: Ditto.
* libc/include/stdio.h: Ditto.
* libc/include/stdlib.h: Ditto.
* libc/include/time.h: Ditto.
* libc/include/machine/setjmp.h: Ditto.
* libc/include/sys/errno.h: Ditto.
* libc/include/sys/signal.h: Ditto.
* libc/include/sys/stat.h: Ditto.
* libc/include/sys/time.h: Ditto.
* libc/include/sys/unistd.h: Ditto.
* libc/include/string.h: Ditto.  strsignal should return a const char *.
@
text
@d89 1
a89 1
#elif defined(__CYGWIN__)	/* BSD signals symantics */
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
#if defined(__CYGWIN32__)
d89 1
a89 1
#elif defined(__CYGWIN32__)	/* BSD signals symantics */
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
