head	1.25;
access;
symbols
	cygwin-1_7_35-release:1.25
	cygwin-1_7_34-release:1.25
	newlib-2_2_0:1.25.0.2
	cygwin-1_7_33-release:1.25
	cygwin-1_7_32-release:1.25
	cygwin-1_7_31-release:1.25
	cygwin-1_7_30-release:1.25
	cygwin-1_7_29-release:1.25
	cygwin-1_7_28-release:1.23
	newlib-2_1_0:1.23
	cygwin-1_7_27-release:1.23
	cygwin-1_7_26-release:1.23
	cygwin-1_7_25-release:1.22
	cygwin-1_7_24-release:1.22
	cygwin-1_7_23-release:1.22
	cygwin-1_7_22-release:1.22
	cygwin-1_7_21-release:1.22
	cygwin-1_7_20-release:1.22
	cygwin-1_7_19-release:1.22
	cygwin-64bit-postmerge:1.22
	cygwin-64bit-premerge-branch:1.22.0.2
	cygwin-64bit-premerge:1.22
	cygwin-1_7_18-release:1.22
	newlib-2_0_0:1.22
	cygwin-1_7_17-release:1.21
	cygwin-64bit-branch:1.21.0.2
	cygwin-1_7_16-release:1.21
	cygwin-1_7_15-release:1.21
	cygwin-1_7_14_2-release:1.21
	cygwin-1_7_14-release:1.21
	cygwin-1_7_12-release:1.21
	cygwin-1_7_11-release:1.21
	cygwin-1_7_10-release:1.21
	newlib-1_20_0:1.21
	cygwin-1_7_9-release:1.19
	cygwin-1_7_8-release:1.19
	newlib-1_19_0:1.19
	cygwin-1_7_7-release:1.19
	cygwin-1_7_5-release:1.19
	cygwin-1_7_4-release:1.19
	cygwin-1_7_3-release:1.19
	cygwin-1_7_2-release:1.19
	newlib-1_18_0:1.19
	cygwin-1_7_1-release:1.19
	newlib-1_17_0-arc:1.19.0.2
	binutils-arc-20080908-branch:1.18.0.8
	binutils-arc-20080908-branchpoint:1.18
	newlib-1_17_0:1.19
	newlib-1_16_0:1.18
	newlib-1_15_0:1.18
	newlib-csl-coldfire-4_1-32:1.18
	newlib-csl-sourcerygxx-4_1-32:1.18
	newlib-csl-innovasic-fido-3_4_4-33:1.18
	newlib-csl-coldfire-4_1-30:1.18
	newlib-csl-sourcerygxx-4_1-30:1.18
	newlib-csl-coldfire-4_1-28:1.18
	newlib-csl-sourcerygxx-4_1-28:1.18
	newlib-csl-arm-2006q3-27:1.18
	newlib-csl-sourcerygxx-4_1-27:1.18
	newlib-csl-arm-2006q3-26:1.18
	newlib-csl-sourcerygxx-4_1-26:1.18
	newlib-csl-sourcerygxx-4_1-24:1.18
	newlib-csl-sourcerygxx-4_1-23:1.18
	newlib-csl-sourcerygxx-4_1-21:1.18
	newlib-csl-arm-2006q3-21:1.18
	newlib-csl-arm-2006q3-19:1.18
	newlib-csl-sourcerygxx-4_1-19:1.18
	newlib-csl-sourcerygxx-4_1-18:1.18
	newlib-csl-sourcerygxx-3_4_4-25:1.18
	newlib-csl-sourcerygxx-4_1-17:1.18
	cr-0x5f1:1.18.0.6
	newlib-csl-sourcerygxx-4_1-14:1.18
	newlib-csl-sourcerygxx-4_1-13:1.18
	newlib-csl-sourcerygxx-4_1-12:1.18
	newlib-csl-sourcerygxx-4_1-9:1.18
	newlib-csl-sourcerygxx-4_1-8:1.18
	newlib-csl-sourcerygxx-4_1-7:1.18
	newlib-csl-arm-2006q1-6:1.18
	newlib-csl-sourcerygxx-4_1-6:1.18
	newlib-csl-sourcerygxx-4_1-5:1.18
	newlib-csl-sourcerygxx-4_1-4:1.18
	newlib-autotools-branch:1.18.0.4
	newlib-csl-20060320-branch:1.18.0.2
	newlib-csl-20060320-branchpoint:1.18
	newlib-1_14_0:1.18
	newlib-csl-arm-2005-q1b:1.16
	newlib-csl-arm-2005-q1a:1.16
	newlib-1_13_0:1.13
	csl-arm-2004-q3:1.13
	csl-arm-2004-q1a:1.13
	csl-arm-2004-q1:1.13
	newlib-1_12_0:1.12
	csl-arm-2003-q4:1.12
	w32api-2_2:1.12
	mingw-runtime-2_4:1.12
	newlib-1_11_0:1.11
	cygnus_cvs_20020108_pre:1.5
	newlib-1_10_0:1.5
	newlib-1_9_0:1.4
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.25
date	2014.03.05.12.49.40;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2014.03.05.12.43.12;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2013.11.25.13.46.22;	author joel;	state Exp;
branches;
next	1.22;

1.22
date	2012.11.01.11.51.11;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2011.07.20.19.41.15;	author yselkowitz;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2011.05.16.22.35.10;	author yselkowitz;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.16.21.53.58;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.18.15.57.24;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.18.15.45.54;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.25.22.31.20;	author jjohnstn;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.23.22.20.55;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.23.19.08.57;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.09.22.56.46;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.29.23.29.30;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.26.19.05.48;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.27.23.58.38;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.21.18.29.17;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.17.21.23.29;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.09.20.55.55;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.18.16.25.50;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.19.15.54.47;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.12.01.24.08;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.01.20.51.51;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.30.17.18.05;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.21.2.1
date	2012.11.01.11.56.26;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.25
log
@	* libc/include/time.h (__TM_GMTOFF): Remove Cygwin-specific definition.
	(__TM_ZONE): Ditto.
@
text
@/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */

#ifndef _TIME_H_
#define _TIME_H_

#include "_ansi.h"
#include <sys/reent.h>

#define __need_size_t
#define __need_NULL
#include <stddef.h>

/* Get _CLOCKS_PER_SEC_ */
#include <machine/time.h>

#ifndef _CLOCKS_PER_SEC_
#define _CLOCKS_PER_SEC_ 1000
#endif

#define CLOCKS_PER_SEC _CLOCKS_PER_SEC_
#define CLK_TCK CLOCKS_PER_SEC

#include <sys/types.h>

_BEGIN_STD_C

struct tm
{
  int	tm_sec;
  int	tm_min;
  int	tm_hour;
  int	tm_mday;
  int	tm_mon;
  int	tm_year;
  int	tm_wday;
  int	tm_yday;
  int	tm_isdst;
#ifdef __TM_GMTOFF
  long	__TM_GMTOFF;
#endif
#ifdef __TM_ZONE
  const char *__TM_ZONE;
#endif
};

clock_t	   _EXFUN(clock,    (void));
double	   _EXFUN(difftime, (time_t _time2, time_t _time1));
time_t	   _EXFUN(mktime,   (struct tm *_timeptr));
time_t	   _EXFUN(time,     (time_t *_timer));
#ifndef _REENT_ONLY
char	  *_EXFUN(asctime,  (const struct tm *_tblock));
char	  *_EXFUN(ctime,    (const time_t *_time));
struct tm *_EXFUN(gmtime,   (const time_t *_timer));
struct tm *_EXFUN(localtime,(const time_t *_timer));
#endif
size_t	   _EXFUN(strftime, (char *__restrict _s,
			     size_t _maxsize, const char *__restrict _fmt,
			     const struct tm *__restrict _t));

char	  *_EXFUN(asctime_r,	(const struct tm *__restrict,
				 char *__restrict));
char	  *_EXFUN(ctime_r,	(const time_t *, char *));
struct tm *_EXFUN(gmtime_r,	(const time_t *__restrict,
				 struct tm *__restrict));
struct tm *_EXFUN(localtime_r,	(const time_t *__restrict,
				 struct tm *__restrict));

_END_STD_C

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __STRICT_ANSI__
char      *_EXFUN(strptime,     (const char *__restrict,
				 const char *__restrict,
				 struct tm *__restrict));
_VOID      _EXFUN(tzset,	(_VOID));
_VOID      _EXFUN(_tzset_r,	(struct _reent *));

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset; /* Match type of _timezone. */
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *_EXFUN (__gettzinfo, (_VOID));

/* getdate functions */

#ifdef HAVE_GETDATE
#ifndef _REENT_ONLY
#define getdate_err (*__getdate_err())
int *_EXFUN(__getdate_err,(_VOID));

struct tm *	_EXFUN(getdate, (const char *));
/* getdate_err is set to one of the following values to indicate the error.
     1  the DATEMSK environment variable is null or undefined,
     2  the template file cannot be opened for reading,
     3  failed to get file status information,
     4  the template file is not a regular file,
     5  an error is encountered while reading the template file,
     6  memory allication failed (not enough memory available),
     7  there is no line in the template that matches the input,
     8  invalid input specification  */
#endif /* !_REENT_ONLY */

/* getdate_r returns the error code as above */
int		_EXFUN(getdate_r, (const char *, struct tm *));
#endif /* HAVE_GETDATE */

/* defines for the opengroup specifications Derived from Issue 1 of the SVID.  */
extern __IMPORT long _timezone;
extern __IMPORT int _daylight;
extern __IMPORT char *_tzname[2];

/* POSIX defines the external tzname being defined in time.h */
#ifndef tzname
#define tzname _tzname
#endif
#endif /* !__STRICT_ANSI__ */

#ifdef __cplusplus
}
#endif

#include <sys/features.h>

#ifdef __CYGWIN__
#include <cygwin/time.h>
#endif /*__CYGWIN__*/

#if defined(_POSIX_TIMERS)

#include <signal.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Clocks, P1003.1b-1993, p. 263 */

int _EXFUN(clock_settime, (clockid_t clock_id, const struct timespec *tp));
int _EXFUN(clock_gettime, (clockid_t clock_id, struct timespec *tp));
int _EXFUN(clock_getres,  (clockid_t clock_id, struct timespec *res));

/* Create a Per-Process Timer, P1003.1b-1993, p. 264 */

int _EXFUN(timer_create,
  	(clockid_t clock_id,
 	struct sigevent *__restrict evp,
	timer_t *__restrict timerid));

/* Delete a Per_process Timer, P1003.1b-1993, p. 266 */

int _EXFUN(timer_delete, (timer_t timerid));

/* Per-Process Timers, P1003.1b-1993, p. 267 */

int _EXFUN(timer_settime,
	(timer_t timerid, int flags,
	const struct itimerspec *__restrict value,
	struct itimerspec *__restrict ovalue));
int _EXFUN(timer_gettime, (timer_t timerid, struct itimerspec *value));
int _EXFUN(timer_getoverrun, (timer_t timerid));

/* High Resolution Sleep, P1003.1b-1993, p. 269 */

int _EXFUN(nanosleep, (const struct timespec  *rqtp, struct timespec *rmtp));

#ifdef __cplusplus
}
#endif
#endif /* _POSIX_TIMERS */

#if defined(_POSIX_CLOCK_SELECTION)

#ifdef __cplusplus
extern "C" {
#endif

int _EXFUN(clock_nanosleep,
  (clockid_t clock_id, int flags, const struct timespec *rqtp,
   struct timespec *rmtp));

#ifdef __cplusplus
}
#endif

#endif /* _POSIX_CLOCK_SELECTION */

#ifdef __cplusplus
extern "C" {
#endif

/* CPU-time Clock Attributes, P1003.4b/D8, p. 54 */

/* values for the clock enable attribute */

#define CLOCK_ENABLED  1  /* clock is enabled, i.e. counting execution time */
#define CLOCK_DISABLED 0  /* clock is disabled */

/* values for the pthread cputime_clock_allowed attribute */

#define CLOCK_ALLOWED    1 /* If a thread is created with this value a */
                           /*   CPU-time clock attached to that thread */
                           /*   shall be accessible. */
#define CLOCK_DISALLOWED 0 /* If a thread is created with this value, the */
                           /*   thread shall not have a CPU-time clock */
                           /*   accessible. */

/* Manifest Constants, P1003.1b-1993, p. 262 */

#define CLOCK_REALTIME (clockid_t)1

/* Flag indicating time is "absolute" with respect to the clock
   associated with a time.  */

#define TIMER_ABSTIME	4

/* Manifest Constants, P1003.4b/D8, p. 55 */

#if defined(_POSIX_CPUTIME)

/* When used in a clock or timer function call, this is interpreted as
   the identifier of the CPU_time clock associated with the PROCESS
   making the function call.  */

#define CLOCK_PROCESS_CPUTIME_ID (clockid_t)2

#endif

#if defined(_POSIX_THREAD_CPUTIME)

/*  When used in a clock or timer function call, this is interpreted as
    the identifier of the CPU_time clock associated with the THREAD
    making the function call.  */

#define CLOCK_THREAD_CPUTIME_ID (clockid_t)3

#endif

#if defined(_POSIX_MONOTONIC_CLOCK)

/*  The identifier for the system-wide monotonic clock, which is defined
 *      as a clock whose value cannot be set via clock_settime() and which 
 *          cannot have backward clock jumps. */

#define CLOCK_MONOTONIC (clockid_t)4

#endif

#if defined(_POSIX_CPUTIME)

/* Accessing a Process CPU-time CLock, P1003.4b/D8, p. 55 */

int _EXFUN(clock_getcpuclockid, (pid_t pid, clockid_t *clock_id));

#endif /* _POSIX_CPUTIME */

#if defined(_POSIX_CPUTIME) || defined(_POSIX_THREAD_CPUTIME)

/* CPU-time Clock Attribute Access, P1003.4b/D8, p. 56 */

int _EXFUN(clock_setenable_attr, (clockid_t clock_id, int attr));
int _EXFUN(clock_getenable_attr, (clockid_t clock_id, int *attr));

#endif /* _POSIX_CPUTIME or _POSIX_THREAD_CPUTIME */

#ifdef __cplusplus
}
#endif

#endif /* _TIME_H_ */

@


1.24
log
@	* libc/include/time.h (__TM_GMTOFF): Define on Cygwin.
	(__TM_ZONE): Ditto.
	(struct tm): Add __TM_GMTOFF and __TM_ZONE members if they are defined.
@
text
@a30 10
#ifdef __CYGWIN__
# ifdef __BSD_VISIBLE
#  define __TM_GMTOFF tm_gmtoff
#  define __TM_ZONE   tm_zone
# else
#  define __TM_GMTOFF __tm_gmtoff
#  define __TM_ZONE   __tm_zone
# endif
#endif

@


1.23
log
@2013-11-25  Sahil Patnayakuni <sahil.patnayakuni@@gmail.com>

	* libc/include/time.h (time): Add restrict keyword.
	* libc/include/wchar.h (wcsftime): Add restrict keyword.
	* libc/time/asctime_r.c (asctime_r): Same.
	* libc/time/gmtime_r.c (gmtime_r): Same.
	* libc/time/lcltime_r.c (lcltime_r): Same.
	* libc/time/strftime.c (strftime): Same.
	* libc/time/strptime.c (strptime): Same.
	* libc/sys/linux/linuxthreads/timer_create.c (timer_create): Same.
	* libc/sys/linux/linuxthreads/timer_settime.c (timer_settime): Same.
@
text
@d31 10
d52 6
@


1.22
log
@	* libc/include/locale.h (NULL): Fetch definition via stddef.h.
	* libc/include/stdio.h (NULL): Ditto.
	* libc/include/stdlib.h (NULL): Ditto.
	* libc/include/string.h (NULL): Ditto.
	* libc/include/wchar.h (NULL): Ditto.
	* libc/include/rpc/types.h (NULL): Ditto.
	* libc/include/time.h (NULL): Ditto.  Include stddef.h earlier.
@
text
@d54 3
a56 1
size_t	   _EXFUN(strftime, (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t));
d58 2
a59 1
char	  *_EXFUN(asctime_r,	(const struct tm *, char *));
d61 4
a64 2
struct tm *_EXFUN(gmtime_r,	(const time_t *, struct tm *));
struct tm *_EXFUN(localtime_r,	(const time_t *, struct tm *));
d73 3
a75 1
char      *_EXFUN(strptime,     (const char *, const char *, struct tm *));
d160 3
a162 1
  (clockid_t clock_id, struct sigevent *evp, timer_t *timerid));
d171 3
a173 2
  (timer_t timerid, int flags, const struct itimerspec *value,
   struct itimerspec *ovalue));
@


1.21
log
@* libc/include/time.h [_POSIX_CLOCK_SELECTION] (clock_nanosleep):
Declare.
* libc/include/sys/features.h [__CYGWIN__] (_POSIX_CLOCK_SELECTION):
Define.
@
text
@d13 3
a15 3
#ifndef NULL
#define	NULL	0
#endif
a25 2
#define __need_size_t
#include <stddef.h>
@


1.21.2.1
log
@Pull in chages from HEAD
@
text
@d13 3
a15 3
#define __need_size_t
#define __need_NULL
#include <stddef.h>
d26 2
@


1.20
log
@* libc/include/time.h (CLOCK_PROCESS_CPUTIME_ID): Rename from
CLOCK_PROCESS_CPUTIME.
(CLOCK_THREAD_CPUTIME_ID): Rename from CLOCK_THREAD_CPUTIME.
* libc/include/sys/features.h [__CYGWIN__] (_POSIX_CPUTIME): Define.
(_POSIX_THREAD_CPUTIME): Define.
@
text
@d178 16
@


1.19
log
@2008-10-16  Joel Sherrill <joel.sherrill@@oarcorp.com>

   * libc/include/time.h: Add CLOCK_MONOTONIC.
   * libc/include/sys/features.h: Define
   _POSIX_MONOTONIC_CLOCK for RTEMS.
@
text
@d215 1
a215 1
#define CLOCK_PROCESS_CPUTIME (clockid_t)2
d225 1
a225 1
#define CLOCK_THREAD_CPUTIME (clockid_t)3
@


1.18
log
@* include/time.h: Remove more cygwin-specific stuff.
@
text
@d229 10
@


1.17
log
@* include/time.h: Move cygwin declarations to cygwin-specific header.
* include/sys/time.h: Rename cygwin include to "sys_time.h".
@
text
@a125 14

/* CYGWIN also exposes daylight and timezone in the name space */
#ifdef __CYGWIN__
#ifndef daylight
#define daylight _daylight
#endif
#ifdef timezonevar
#ifndef timezone
#define timezone _timezone
#endif
#else
char *_EXFUN(timezone, (void));
#endif
#endif /* __CYGWIN__ */
a205 4
#ifdef __CYGWIN__
# define TIMER_RELTIME	0	/* For compatibility with HP/UX, Solaris,
				   others? */
#endif
@


1.16
log
@
2005-02-25  Eric Blake  <ebb9@@byu.net>

        * libc/include/time.h (__tzrule_struct): Make offset long, since
        a 16-bit int overflows on a 12-hour offset.
        * libc/sys/linux/include/time.h: Ditto.
        * libc/time/mktime.c (mktime): Use new type of __tzrule.offset.
        * libc/time/mktm_r.c: Ditto.
        * libc/time/gettzinfo.c: Ditto.
        * libc/time/strftime.c (strftime): Fix '%x' to deal with negative
        years.  Fix '%z' to use long, not int.
@
text
@d148 4
a189 10
#else
#ifdef __CYGWIN__
#ifdef __cplusplus
extern "C" {
#endif
int _EXFUN(nanosleep, (const struct timespec  *rqtp, struct timespec *rmtp));
#ifdef __cplusplus
}
#endif
#endif /* __CYGWIN__ */
@


1.15
log
@	* libc/include/time.h (_timezone): Change to long also for Cygwin.
	(timezone): Drop cast from definition.
@
text
@d82 1
a82 1
  int offset;
@


1.14
log
@
2005-02-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/time.h [!CYGWIN](_timezone): Change to long.
        (__tzrule_type, __tzinfo_type): New types.
        (__gettzinfo): New function.
        * libc/sys/linux/include/time.h: Ditto.
        * libc/time/Makefile.am: Add gettzinfo.c.
        * libc/time/Makefile.in: Regenerated.
        * libc/time/local.h: Moved __tzrule_type to time.h.
        * libc/time/mktime.c: Call __gettzinfo to reference
        __tznorth, __tzyear, and __tzrule array.
        * libc/time/mktm_r.c: Ditto.
        * libc/time/strftime.c: Ditto.
        * libc/time/tzset_r.c: Ditto.  Also remove definition
        of __tzrule which is now in gettzinfo.c.  Change _timezone
        references to not cast to time_t.
        * libc/time/gettzinfo.c: New file.
@
text
@a117 3
#ifdef __CYGWIN__
extern __IMPORT time_t _timezone;
#else
a118 1
#endif
d134 1
a134 1
#define timezone ((long int) _timezone)
@


1.13
log
@* libc/include/time.h (TIMER_RELTIME): New define.
@
text
@d74 20
d118 1
d120 3
@


1.12
log
@
2003-01-29  Jason Tishler  <jason@@tishler.net>

	* libc/include/time.h: Declare nanosleep() under Cygwin.
@
text
@d205 5
a209 1
#define TIMER_ABSTIME  4
@


1.11
log
@
2002-08-26  Wu Yongwei <adah@@netstd.com>

        * time.h (timezonevar): Change "#if" to "#ifdef".
@
text
@d166 10
@


1.10
log
@
2002-06-27  Benjamin Kosnik  <bkoz@@redhat.com>

        * libc/include/stdio.h: Untangle, add _BEGIN_STD_C and _END_STD_C.
        * libc/include/time.h: Same.
        * libc/include/string.h: Same.
        * libc/include/stdlib.h: Same.
        * libc/include/signal.h: Same.
        * libc/include/setjmp.h: Same.
        * libc/include/math.h: Same.
        * libc/include/locale.h: Same.
        * libc/include/ctype.h: Same.
        * libc/include/machine/setjmp.h: Same.
        * libc/include/_ansi.h (_BEGIN_STD_C): Add.
        (_END_STD_C): Add.
@
text
@d112 1
a112 1
#if timezonevar
@


1.9
log
@
2002-06-21  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/stdio.h (__getline, __getdelim): New prototypes.
        * libc/include/time.h [HAVE_GETDATE](getdate, getdate_r): Ditto.
        [HAVE_GETDATE](getdate_err): New error code.
        * libc/stdio/Makefile.am: Add support for getline.c and getdelim.c.
        * libc/stdio/Makefile.in: Regenerated.
        * libc/stdio/getdelim.c: New file.
        * libc/stdio/getline.c: Ditto.
        * libc/sys/linux/Makefile.am: Add support for getdate.c, getdate_err.c
        and ntp_gettime.c.  Also add AM_CFLAGS to point to libc/stdio.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/getdate.c: New file.
        * libc/sys/linux/getdate_err.c: Ditto.
        * libc/sys/linux/ntp_gettime.c: Ditto.
        * libc/sys/linux/time.c (adjtimex, ntp_adjtime): New functions.
        * libc/sys/linux/sys/stdio.h (getline, getdelim): New macros.
@
text
@a12 4
#ifdef __cplusplus
extern "C" {
#endif

d31 2
d63 6
d122 4
d132 4
d163 3
d168 4
d239 1
@


1.8
log
@
2002-04-17  Jeff Johnston  <jjohnstn@@redhat.com>

        *  libc/include/time.h (tzset, _tzset_r): Added prototypes.
        (strptime): Moved prototype to be within !__STRICT_ANSI__.
        (_tzname, _daylight, _timezone): No long __CYGWIN__ only.
        (tzname): Defined for all platforms.
        (daylight, timezone): Defined only for CYGWIN.
        *  libc/sys/linux/machine/i386/crt0.c: Add call to tzset() after
        environment set up.
        * libc/stdlib/setenv_r.c (_setenv_r): Call tzset() if the TZ
        environment variable is set.
        *  libc/time/Makefile.am: Add support for tzset.c, tzlock.c, and
        tzset_r.c.
        *  libc/time/Makefile.in: Regenerated.
        *  libc/time/gmtime.c (gmtime): Changed to call gmtime_r.
        *  libc/time/gmtime_r.c (gmtime_r): Changed to call _mktm_r.
        *  libc/time/lcltime_r.c (lcltime_r): Ditto.
        *  libc/time/local.h: New local header file.
        *  libc/time/mktime.c (mktime): Add timezone support.
        *  libc/time/mktm_r.c: New file which is the common engine
        for gmtime_r and lcltime_r.  This code has timezone support.
        *  libc/time/strftime.c (strftime): Add %Z timezone support.
        *  libc/time/tzlock.c: New file containing timezone lock stubs.
        *  libc/time/tzset.c: New file containing tzset() routine.
        *  libc/time/tzset_r.c: New file containing _tzset_r and
        internal routine for calculating timezone changes for specified year.
@
text
@d70 23
@


1.7
log
@
2002-04-09  Mark Bradshaw  <bradshaw@@staff.crosswalk.com>

        * libc/include/time.h: Fix strptime declaration.
        * libc/time/Makefile.am: Add strptime.c.
        * libc/time/Makefile.in: Regenerated.
        * libc/time/strptime.c: New file.
@
text
@d11 1
a58 1
char      *_EXFUN(strptime,     (const char *, const char *, struct tm *));
a64 1
#ifdef __CYGWIN__
d66 5
d74 2
a75 1
/* defines for the opengroup specifications Derived from Issue 1 of the SVID.  */
d79 3
a91 2
void _EXFUN(tzset, (void));
#endif
d93 1
a95 1

@


1.6
log
@* libc/include/time.h: Add prototype for strptime for Cygwin.
@
text
@d58 1
a65 1
char      *_EXFUN(strptime,     (const char *, const char *, struct tm *));
@


1.5
log
@
2001-04-19  Robert Collins  <rbtcollins@@hotmail.com>

        * include/time.h[__CYGWIN__]:  Define tzname to _tzname if not defined.
        Define daylight to _daylight if it is not defined
        Prepare a variable export of timezone based on timezonevariable.
        (Cannot be used with the timezone() function.)
@
text
@d65 1
@


1.4
log
@
2000-12-11  Joel Sherrill <joel@@OARcorp.com>

        * Merge RTEMS specific .h files into main libc/include.
        * libc/sys/rtems/include/signal.h: Removed.
        * libc/sys/rtems/include/time.h: Removed.
        * libc/sys/rtems/sys/features.h: Removed.
        * libc/sys/rtems/sys/sched.h: Removed.
        * libc/sys/rtems/sys/siginfo.h: Removed.
        * libc/sys/rtems/sys/signal.h: Removed.
        * libc/sys/rtems/sys/time.h: Removed.
        * libc/sys/rtems/sys/times.h: Removed.
        definitions for time_t and clock_t since these are
        no longer in time.h.
        * libc/include/pthread.h: New file.
        * libc/include/sys/sched.h: New file.
        * libc/include/sys/features.h: New file.
        * libc/include/time.h: Removed duplicate definition of clock_t
        and time_t, get them from <sys/types.h> instead.  Add prototypes        for POSIX clock and timer functionality.
        * libc/sys/linux/sys/types.h: Changed to include
        * libc/include/machine/types.h: Add _CLOCKID_T_ and _TIMER_T_.
        * libc/include/sys/signal.h: Add more complete set of POSIX
        signal functionality including real-time and threaded signals.
        * libc/include/sys/types.h: Add clock_t, time_t, struct
        timespec, and struct itimerspec.  Centralizing these makes
        things cleaner.  RTEMS uses 64-bit dev_t.
        Added numerous primitive definitions
        for pthreads including macros, pthread_attr_t,
        pthread_mutexattr_t, pthread_condattr_t, pthread_key_t,
        pthread_once_t, and pthread_t.
        * libc/include/sys/unistd.h: Added getlogin_r() prototype.
        If RTEMS follow POSIX on read(), write() and sbrk() prototype.
        Feature flags removed and moved to new file <sys/features.h>.
        Full set of POSIX sysconf() constants
@
text
@d69 12
a80 1

d82 1
@


1.3
log
@* libc/include/sys/config.h: define __IMPORT appropriately
* libc/include/ctype.h (_ctype_): use __IMPORT
* libc/include/math.h (__infinity, signam, _LIB_VERSION): ditto
* libc/include/math.h (__mb_cur_max): ditto
* libc/include/time.h (_timezone, _daylight, _tzname): ditto
* libc/include/unctrl.h (__unctrl, __unctrllen): ditto
* libc/include/errno.h (_sys_errlist, _sys_nerr): ditto
* libc/include/unistd.h (environ): ditto
@
text
@d32 1
a32 12
/* Get _CLOCK_T_ and _TIME_T_.  */
#include <machine/types.h>

#ifndef __clock_t_defined
typedef _CLOCK_T_ clock_t;
#define __clock_t_defined
#endif

#ifndef __time_t_defined
typedef _TIME_T_ time_t;
#define __time_t_defined
#endif
d74 100
@


1.2
log
@* libc/include/ctype.h: __CYGWIN32__ -> __CYGWIN__
* libc/include/malloc.h: Ditto.
* libc/include/process.h: Ditto.
* libc/include/stdio.h: Ditto.
* libc/include/stdlib.h: Ditto.
* libc/include/time.h: Ditto.
* libc/include/machine/setjmp.h: Ditto.
* libc/include/sys/errno.h: Ditto.
* libc/include/sys/signal.h: Ditto.
* libc/include/sys/stat.h: Ditto.
* libc/include/sys/time.h: Ditto.
* libc/include/sys/unistd.h: Ditto.
* libc/include/string.h: Ditto.  strsignal should return a const char *.
@
text
@d77 3
a79 3
extern time_t _timezone __declspec(dllimport);
extern int _daylight __declspec(dllimport);
extern char *_tzname[2] __declspec(dllimport);
@


1.1
log
@Initial revision
@
text
@d75 1
a75 1
#ifdef __CYGWIN32__
d84 1
a84 1
#endif /* __CYGWIN32__ */
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
