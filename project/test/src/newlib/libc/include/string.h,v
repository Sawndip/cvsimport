head	1.40;
access;
symbols
	cygwin-1_7_35-release:1.40
	cygwin-1_7_34-release:1.39
	newlib-2_2_0:1.39.0.2
	cygwin-1_7_33-release:1.39
	cygwin-1_7_32-release:1.35
	cygwin-1_7_31-release:1.35
	cygwin-1_7_30-release:1.35
	cygwin-1_7_29-release:1.35
	cygwin-1_7_28-release:1.35
	newlib-2_1_0:1.35
	cygwin-1_7_27-release:1.35
	cygwin-1_7_26-release:1.35
	cygwin-1_7_25-release:1.35
	cygwin-1_7_24-release:1.35
	cygwin-1_7_23-release:1.35
	cygwin-1_7_22-release:1.34
	cygwin-1_7_21-release:1.34
	cygwin-1_7_20-release:1.33
	cygwin-1_7_19-release:1.33
	cygwin-64bit-postmerge:1.33
	cygwin-64bit-premerge-branch:1.33.0.2
	cygwin-64bit-premerge:1.33
	cygwin-1_7_18-release:1.33
	newlib-2_0_0:1.32
	cygwin-1_7_17-release:1.30
	cygwin-64bit-branch:1.30.0.2
	cygwin-1_7_16-release:1.30
	cygwin-1_7_15-release:1.29
	cygwin-1_7_14_2-release:1.29
	cygwin-1_7_14-release:1.29
	cygwin-1_7_12-release:1.29
	cygwin-1_7_11-release:1.29
	cygwin-1_7_10-release:1.29
	newlib-1_20_0:1.29
	cygwin-1_7_9-release:1.27
	cygwin-1_7_8-release:1.24
	newlib-1_19_0:1.22
	cygwin-1_7_7-release:1.22
	cygwin-1_7_5-release:1.22
	cygwin-1_7_4-release:1.22
	cygwin-1_7_3-release:1.22
	cygwin-1_7_2-release:1.22
	newlib-1_18_0:1.22
	cygwin-1_7_1-release:1.22
	newlib-1_17_0-arc:1.22.0.4
	binutils-arc-20080908-branch:1.22.0.2
	binutils-arc-20080908-branchpoint:1.22
	newlib-1_17_0:1.22
	newlib-1_16_0:1.20
	newlib-1_15_0:1.18
	newlib-csl-coldfire-4_1-32:1.18
	newlib-csl-sourcerygxx-4_1-32:1.18
	newlib-csl-innovasic-fido-3_4_4-33:1.18
	newlib-csl-coldfire-4_1-30:1.18
	newlib-csl-sourcerygxx-4_1-30:1.18
	newlib-csl-coldfire-4_1-28:1.18
	newlib-csl-sourcerygxx-4_1-28:1.18
	newlib-csl-arm-2006q3-27:1.18
	newlib-csl-sourcerygxx-4_1-27:1.18
	newlib-csl-arm-2006q3-26:1.18
	newlib-csl-sourcerygxx-4_1-26:1.18
	newlib-csl-sourcerygxx-4_1-24:1.18
	newlib-csl-sourcerygxx-4_1-23:1.18
	newlib-csl-sourcerygxx-4_1-21:1.18
	newlib-csl-arm-2006q3-21:1.18
	newlib-csl-arm-2006q3-19:1.18
	newlib-csl-sourcerygxx-4_1-19:1.18
	newlib-csl-sourcerygxx-4_1-18:1.18
	newlib-csl-sourcerygxx-3_4_4-25:1.18
	newlib-csl-sourcerygxx-4_1-17:1.18
	cr-0x5f1:1.18.0.6
	newlib-csl-sourcerygxx-4_1-14:1.18
	newlib-csl-sourcerygxx-4_1-13:1.18
	newlib-csl-sourcerygxx-4_1-12:1.18
	newlib-csl-sourcerygxx-4_1-9:1.18
	newlib-csl-sourcerygxx-4_1-8:1.18
	newlib-csl-sourcerygxx-4_1-7:1.18
	newlib-csl-arm-2006q1-6:1.18
	newlib-csl-sourcerygxx-4_1-6:1.18
	newlib-csl-sourcerygxx-4_1-5:1.18
	newlib-csl-sourcerygxx-4_1-4:1.18
	newlib-autotools-branch:1.18.0.4
	newlib-csl-20060320-branch:1.18.0.2
	newlib-csl-20060320-branchpoint:1.18
	newlib-1_14_0:1.18
	newlib-csl-arm-2005-q1b:1.15
	newlib-csl-arm-2005-q1a:1.15
	newlib-1_13_0:1.14
	csl-arm-2004-q3:1.14
	csl-arm-2004-q1a:1.14
	csl-arm-2004-q1:1.14
	newlib-1_12_0:1.14
	csl-arm-2003-q4:1.14
	w32api-2_2:1.14
	mingw-runtime-2_4:1.14
	newlib-1_11_0:1.14
	cygnus_cvs_20020108_pre:1.8
	newlib-1_10_0:1.8
	newlib-1_9_0:1.8
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.40
date	2015.02.06.16.14.02;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2014.10.30.11.25.17;	author jturney;	state Exp;
branches;
next	1.38;

1.38
date	2014.10.08.21.04.59;	author corinna;	state Exp;
branches;
next	1.37;

1.37
date	2014.09.16.19.59.01;	author jjohnstn;	state Exp;
branches;
next	1.36;

1.36
date	2014.08.18.14.18.10;	author joel;	state Exp;
branches;
next	1.35;

1.35
date	2013.07.23.07.05.30;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2013.06.24.15.11.24;	author yselkowitz;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.12.10.55.09;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2012.11.01.11.51.11;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2012.10.22.15.16.48;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2012.05.10.08.34.08;	author corinna;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2011.06.10.18.30.38;	author jjohnstn;	state Exp;
branches;
next	1.28;

1.28
date	2011.05.25.18.41.10;	author ericb;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.28.14.51.28;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2011.03.03.11.11.41;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.03.10.37.09;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2011.02.10.16.48.18;	author ericb;	state Exp;
branches;
next	1.23;

1.23
date	2011.01.10.10.59.42;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.18.15.27.27;	author ericb;	state Exp;
branches;
next	1.21;

1.21
date	2008.01.12.04.25.55;	author ericb;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.28.17.07.23;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.08.18.38.51;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.08.22.10.33;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.26.04.33.02;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.25.23.02.24;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.24.18.46.08;	author jjohnstn;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.23.21.38.00;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.27.23.58.38;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.05.20.58.54;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.24.23.44.36;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.23.18.46.03;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.13.19.33.00;	author fitzsim;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.30.18.30.15;	author geoffk;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.03.03.03.03;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.30.17.18.05;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.10.21.13.28;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.09.22.25.01;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.08.22.16.06;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.08.03.46.01;	author aoliva;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.30.2.1
date	2012.10.26.09.27.35;	author corinna;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2012.11.01.11.56.25;	author corinna;	state Exp;
branches;
next	1.30.2.3;

1.30.2.3
date	2013.04.17.08.32.20;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.40
log
@	* libc/include/complex.h (cabsl): Add prototype.
	(cimagl): Add prototype.
	(creall): Add prototype.
	* libc/include/ieeefp.h: Include float.h.
	(EXT_EXPBITS, EXT_FRACHBITS, EXT_FRACLBITS)
	(EXT_EXP_INFNAN. EXT_EXP_BIAS, EXT_FRACBITS): Define.
	(struct ieee_ext, union ieee_ext_u): New types for long double
	support.
	* libc/include/math.h (finitel): Add prototype.
	(hypotl): Add prototype.
	(sqrtl): Add prototype.
	* libm/common/Makefile.am (lsrc): Add sl_finite.c.
	* libm/common/Makefile.in: Regenerate.
	* libm/common/fdlibm.h (__ieee754_hypotl): Add prototype.
	* libm/common/hypotl.c (hypotl): Add implementation for when long
	double is larger than double.
	* libm/common/sqrtl.c (sqrtl): Likewise.
	* libm/common/sl_finite.c: New file.  Adds implementation of the
	finitel function.
	* libm/complex/Makefile.am (lsrc): Define.
	(libcomplex_la_SOURCES): Add lsrc.
	(lib_a_SOURCES): Add lsrc.
	* libm/complex/Makefile.in: Regenerate.
	* libm/complex/cabs.c: Add documentation of cabsl function.
	* libm/complex/cimag.c: Add documentation of cimagl function.
	* libm/complex/creall.c: Add documentation of creall function.
	* libm/complex/cabsl.c: New file.  Adds implementation of the
	cabsl function.
	* libm/complex/cimagl.c: New file.  Adds implementation of the
	cimagl function.
	* libm/complex/creall.c: New file.  Adds implementation of the
	creall function.
	* libm/math/Makefile.am (lsrc): Define.
	(libmath_la_SOURCES): Add lsrc.
	(lib_a_SOURCES): Add lsrc.
	* libm/math/Makefile.in: Regenerate.
	* libm/math/el_hypot.c: New file.  Adds implementation of the
	__ieee754_hypotl function.
@
text
@/*
 * string.h
 *
 * Definitions for memory and string functions.
 */

#ifndef _STRING_H_
#define	_STRING_H_

#include "_ansi.h"
#include <sys/reent.h>
#include <sys/cdefs.h>
#include <sys/features.h>

#define __need_size_t
#define __need_NULL
#include <stddef.h>

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
_PTR 	 _EXFUN(memcpy,(_PTR __restrict, const _PTR __restrict, size_t));
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
char 	*_EXFUN(strcat,(char *__restrict, const char *__restrict));
char 	*_EXFUN(strchr,(const char *, int));
int	 _EXFUN(strcmp,(const char *, const char *));
int	 _EXFUN(strcoll,(const char *, const char *));
char 	*_EXFUN(strcpy,(char *__restrict, const char *__restrict));
size_t	 _EXFUN(strcspn,(const char *, const char *));
char 	*_EXFUN(strerror,(int));
size_t	 _EXFUN(strlen,(const char *));
char 	*_EXFUN(strncat,(char *__restrict, const char *__restrict, size_t));
int	 _EXFUN(strncmp,(const char *, const char *, size_t));
char 	*_EXFUN(strncpy,(char *__restrict, const char *__restrict, size_t));
char 	*_EXFUN(strpbrk,(const char *, const char *));
char 	*_EXFUN(strrchr,(const char *, int));
size_t	 _EXFUN(strspn,(const char *, const char *));
char 	*_EXFUN(strstr,(const char *, const char *));
#ifndef _REENT_ONLY
char 	*_EXFUN(strtok,(char *__restrict, const char *__restrict));
#endif
size_t	 _EXFUN(strxfrm,(char *__restrict, const char *__restrict, size_t));

#if __POSIX_VISIBLE
char 	*_EXFUN(strtok_r,(char *__restrict, const char *__restrict, char **__restrict));
#endif
#if __BSD_VISIBLE
int	 _EXFUN(bcmp,(const void *, const void *, size_t));
void	 _EXFUN(bcopy,(const void *, void *, size_t));
void	 _EXFUN(bzero,(void *, size_t));
int	 _EXFUN(ffs,(int));
char 	*_EXFUN(index,(const char *, int));
#endif
#if __BSD_VISIBLE || __XSI_VISIBLE
_PTR	 _EXFUN(memccpy,(_PTR __restrict, const _PTR __restrict, int, size_t));
#endif
#if __GNU_VISIBLE
_PTR	 _EXFUN(mempcpy,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memmem, (const _PTR, size_t, const _PTR, size_t));
#endif
_PTR 	 _EXFUN(memrchr,(const _PTR, int, size_t));
#if __GNU_VISIBLE
_PTR 	 _EXFUN(rawmemchr,(const _PTR, int));
#endif
#if __BSD_VISIBLE
char 	*_EXFUN(rindex,(const char *, int));
#endif
char 	*_EXFUN(stpcpy,(char *__restrict, const char *__restrict));
char 	*_EXFUN(stpncpy,(char *__restrict, const char *__restrict, size_t));
#if __BSD_VISIBLE || __POSIX_VISIBLE
int	 _EXFUN(strcasecmp,(const char *, const char *));
#endif
#if __GNU_VISIBLE
char	*_EXFUN(strcasestr,(const char *, const char *));
char 	*_EXFUN(strchrnul,(const char *, int));
#endif
#if __XSI_VISIBLE >= 500
char 	*_EXFUN(strdup,(const char *));
#endif
#ifndef __STRICT_ANSI__
char 	*_EXFUN(_strdup_r,(struct _reent *, const char *));
#endif
#if __XSI_VISIBLE >= 700
char 	*_EXFUN(strndup,(const char *, size_t));
#endif

#ifndef __STRICT_ANSI__
char 	*_EXFUN(_strndup_r,(struct _reent *, const char *, size_t));
#endif

#if __GNU_VISIBLE
int	 _EXFUN(ffsl,(long));
int	 _EXFUN(ffsll, (long long));
#endif

/* There are two common strerror_r variants.  If you request
   _GNU_SOURCE, you get the GNU version; otherwise you get the POSIX
   version.  POSIX requires that #undef strerror_r will still let you
   invoke the underlying function, but that requires gcc support.  */
#if __GNU_VISIBLE
char	*_EXFUN(strerror_r,(int, char *, size_t));
#else
# ifdef __GNUC__
int	_EXFUN(strerror_r,(int, char *, size_t))
#ifdef __ASMNAME
             __asm__ (__ASMNAME ("__xpg_strerror_r"))
#endif
  ;
# else
int	_EXFUN(__xpg_strerror_r,(int, char *, size_t));
#  define strerror_r __xpg_strerror_r
# endif
#endif

/* Reentrant version of strerror.  */
char *	_EXFUN(_strerror_r, (struct _reent *, int, int, int *));

#if __BSD_VISIBLE
size_t	_EXFUN(strlcat,(char *, const char *, size_t));
size_t	_EXFUN(strlcpy,(char *, const char *, size_t));
#endif
#if __BSD_VISIBLE || __POSIX_VISIBLE
int	_EXFUN(strncasecmp,(const char *, const char *, size_t));
#endif
#if !defined(__STRICT_ANSI__) || __POSIX_VISIBLE >= 200809 || \
    __XSI_VISIBLE >= 700
size_t	 _EXFUN(strnlen,(const char *, size_t));
#endif
#if __BSD_VISIBLE
char 	*_EXFUN(strsep,(char **, const char *));
#endif

/*
 * The origin of these is unknown to me so I am conditionalizing them
 * on __STRICT_ANSI__. Finetuning this is definitely needed. --joel
 */
#if !defined(__STRICT_ANSI__)
char	*_EXFUN(strlwr,(char *));
char	*_EXFUN(strupr,(char *));
#endif

#ifndef DEFS_H	/* Kludge to work around problem compiling in gdb */
char	*_EXFUN(strsignal, (int __signo));
#endif

#ifdef __CYGWIN__
int	_EXFUN(strtosigno, (const char *__name));
#endif

#if defined _GNU_SOURCE && defined __GNUC__
#define strdupa(__s) \
	(__extension__ ({const char *__in = (__s); \
			 size_t __len = strlen (__in) + 1; \
			 char * __out = (char *) __builtin_alloca (__len); \
			 (char *) memcpy (__out, __in, __len);}))
#define strndupa(__s, __n) \
	(__extension__ ({const char *__in = (__s); \
			 size_t __len = strnlen (__in, (__n)) + 1; \
			 char *__out = (char *) __builtin_alloca (__len); \
			 __out[__len-1] = '\0'; \
			 (char *) memcpy (__out, __in, __len-1);}))
#endif /* _GNU_SOURCE && __GNUC__ */

#include <sys/string.h>

_END_STD_C

#endif /* _STRING_H_ */
@


1.39
log
@2014-10-29  Jon Turney  <jon.turney@@dronecode.org.uk>

        * libc/include/string.h: Correct guard for strcasecmp().
@
text
@d107 4
a110 1
             __asm__ (__ASMNAME ("__xpg_strerror_r"));
@


1.38
log
@	* libc/include/string.h (ffsl): Declare as GNU function.
	(ffsll): Ditto.
@
text
@d72 1
a72 1
#if __BSD_VISIBLE
@


1.37
log
@
2014-09-17  Joel Sherrill <joel.sherrill@@oarcorp.com>
            Thomas Uhle <thomas.uhle@@eas.iis.fraunhofer.de>

        * libc/include/string.h: Correct guard for strnlen().
@
text
@d93 5
@


1.36
log
@2014-08-18 Joel Sherrill <joel.sherrill@@oarcorp.com>

	* libc/include/string.h: Improve language and OS standard guards.
@
text
@d119 2
a120 1
#if !defined(__STRICT_ANSI__) || __XSI_VISIBLE >= 500
@


1.35
log
@	* libc/sys/linux/include/netdb.h, libc/sys/linux/net/getaddrinfo.c,
	libc/sys/linux/net/getnameinfo.c: Add restrict keyword to getnameinfo()
	and getaddrinfo() to increase standards compliance and match glibc.

	* libc/include/string.h, libc/string/memccpy.c, libc/string/memcpy.c,
	libc/string/stpcpy.c, libc/string/stpncpy.c, libc/string/strcat.c,
	libc/string/strncat.c, libc/string/strncpy.c, libc/string/strtok.c,
	libc/string/strtok_r.c, libc/string/strxfrm.c
	libc/machine/microblaze/strcpy.c, libc/machine/xscale/memcpy.c,
	libc/machine/cris/memcpy.c: Add __restrict to prototype to
	increase standards compliance.
@
text
@a40 1

a43 1

d46 1
a46 1
#ifndef __STRICT_ANSI__
d48 2
a49 1

d55 2
d58 2
d62 1
d64 1
d66 2
d69 1
d72 1
d74 2
d79 1
a79 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE - 0) >= 500
d85 1
a85 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE - 0) >= 700
d88 1
d91 2
d97 2
a98 2
#ifdef _GNU_SOURCE
char    *_EXFUN(strerror_r,(int, char *, size_t));
d101 2
a102 1
int      _EXFUN(strerror_r,(int, char *, size_t)) __asm__ (__ASMNAME ("__xpg_strerror_r"));
d104 1
a104 1
int      _EXFUN(__xpg_strerror_r,(int, char *, size_t));
d108 12
a119 3
size_t	 _EXFUN(strlcat,(char *, const char *, size_t));
size_t	 _EXFUN(strlcpy,(char *, const char *, size_t));
int	 _EXFUN(strncasecmp,(const char *, const char *, size_t));
d121 2
d124 7
d133 2
d136 1
a136 1
char  *_EXFUN(strsignal, (int __signo));
d138 1
d140 1
a140 1
int     _EXFUN(strtosigno, (const char *__name));
a142 3
/* Recursive version of strerror.  */
char *	_EXFUN(_strerror_r, (struct _reent *, int, int, int *));

a156 16
/* These function names are used on Windows and perhaps other systems.  */
#ifndef strcmpi
#define strcmpi strcasecmp
#endif
#ifndef stricmp
#define stricmp strcasecmp
#endif
#ifndef strncmpi
#define strncmpi strncasecmp
#endif
#ifndef strnicmp
#define strnicmp strncasecmp
#endif

#endif /* ! __STRICT_ANSI__ */

@


1.34
log
@* libc/include/string.h (rawmemchr): Declare.
* libc/string/Makefile.am (ELIX_4_SOURCES): Add rawmemchr.c.
(CHEWOUT_FILES): Add rawmemchr.def.
* libc/string/Makefile.in: Regenerate.
* libc/string/rawmemchr.c: New file.
@
text
@d23 1
a23 1
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
d26 1
a26 1
char 	*_EXFUN(strcat,(char *, const char *));
d30 1
a30 1
char 	*_EXFUN(strcpy,(char *, const char *));
d34 1
a34 1
char 	*_EXFUN(strncat,(char *, const char *, size_t));
d36 1
a36 1
char 	*_EXFUN(strncpy,(char *, const char *, size_t));
d43 1
a43 1
char 	*_EXFUN(strtok,(char *, const char *));
d46 1
a46 1
size_t	 _EXFUN(strxfrm,(char *, const char *, size_t));
d49 1
a49 1
char 	*_EXFUN(strtok_r,(char *, const char *, char **));
d56 1
a56 1
_PTR	 _EXFUN(memccpy,(_PTR, const _PTR, int, size_t));
d62 2
a63 2
char 	*_EXFUN(stpcpy,(char *, const char *));
char 	*_EXFUN(stpncpy,(char *, const char *, size_t));
@


1.33
log
@	* libc/include/string.h: Fix preprocessor expressions using
	_XOPEN_SOURCE.
@
text
@d60 1
@


1.32
log
@	* libc/include/locale.h (NULL): Fetch definition via stddef.h.
	* libc/include/stdio.h (NULL): Ditto.
	* libc/include/stdlib.h (NULL): Ditto.
	* libc/include/string.h (NULL): Ditto.
	* libc/include/wchar.h (NULL): Ditto.
	* libc/include/rpc/types.h (NULL): Ditto.
	* libc/include/time.h (NULL): Ditto.  Include stddef.h earlier.
@
text
@d67 1
a67 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE >= 500)
d73 1
a73 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE >= 700)
@


1.31
log
@	* libc/include/string.h (strdup, strndup): Declare if not
	__STRICT_ANSI__ or _XOPEN_SOURCE is defined appropriately.
@
text
@d16 1
a18 4
#ifndef NULL
#define NULL 0
#endif

@


1.30
log
@	* libc/include/string.h (memrchr): Declare.
	* libc/string/Makefile.am (ELIX_4_SOURCES): Add memrchr.c.
	(CHEWOUT_FILES): Add memrchr.def.
	* libc/string/Makefile.in: Regenerate.
	* libc/string/memrchr.c: New file.
@
text
@d13 1
d69 2
d72 2
d75 2
d78 2
@


1.30.2.1
log
@Pull in changes from HEAD
@
text
@a12 1
#include <sys/features.h>
a67 2
#endif
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE >= 500)
a68 2
#endif
#ifndef __STRICT_ANSI__
a69 2
#endif
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE >= 700)
a70 2
#endif
#ifndef __STRICT_ANSI__
@


1.30.2.2
log
@Pull in chages from HEAD
@
text
@a15 1
#define __need_NULL
d18 4
@


1.30.2.3
log
@Pull in change from January to fix build failures.
@
text
@d67 1
a67 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE - 0) >= 500
d73 1
a73 1
#if !defined(__STRICT_ANSI__) || (_XOPEN_SOURCE - 0) >= 700
@


1.29
log
@
2011-06-09  Yaakov Selkowitz  <yselkowitz@@...>

        * libc/include/string.h (strdupa): New macro function.
        (strndupa): New macro function.
@
text
@d61 1
@


1.28
log
@strerror: allow user hook to comply with POSIX rules

* libc/string/strerror.c (strerror): Split body into...
(_strerror_r): ...new reentrant function.
* libc/string/u_strerr.c (_user_strerror): Update signature.
* libc/include/stdio.h (_strerror_r): New prototype.
* libc/posix/collate.c (__collate_err): Adjust callers.
* libc/stdio/perror.c (_perror_r): Likewise.
* libc/string/strerror_r.c (strerror_r): Likewise.
* libc/string/xpg_strerror_r.c (__xpg_strerror_r): Likewise.
@
text
@d102 14
@


1.27
log
@	* libc/include/string.h (strchrnul): Declare.
	* libc/string/strchrnul.c: New file.
	* libc/string/Makefile.am (ELIX_2_SOURCES): Add strchrnul.c.
	* libc/string/Makefile.in: Regenerate.
@
text
@d99 3
@


1.26
log
@	* libc/include/string.h: Include sys/cdefs.h.
@
text
@d66 1
@


1.25
log
@	* libc/include/sys/cdefs.h (__CONCAT1): Define.
	(__CONCAT): Define.
	(__STRING): Define.
	(__XSTRING): Define.
	(__ASMNAME): Define.
	* libc/include/string.h (strerror_r): Use __ASMNAME to take target
	specific label prefixes into account.
@
text
@d12 1
@


1.24
log
@strerror_r: provide POSIX implementation

* libc/include/string.h (strerror_r): Update declaration.
* libc/string/strerror.c (strerror): Update documentation.
* libc/string/strerror_r.c (strerror_r): Always return
NUL-terminated string; don't overwrite too-short buf.
* libc/string/xpg_strerror_r.c (__xpg_strerror_r): Implement POSIX
variant.
* libc/string/Makefile.am (GENERAL_SOURCES): Build new file.
* libc/string/Makefile.in: Regenerate.
@
text
@d77 1
a77 1
int      _EXFUN(strerror_r,(int, char *, size_t)) __asm__ ("__xpg_strerror_r");
@


1.23
log
@	* libc/include/string.h: Make strsignal() available unconditionally.
@
text
@d69 14
a82 1
char 	*_EXFUN(strerror_r,(int, char *, size_t));
@


1.22
log
@Per Posix, strsignal returns non-const char*.

* libc/include/string.h (strsignal): Fix return type.
@
text
@a76 1
#ifdef __CYGWIN__
d80 1
@


1.21
log
@Make strstr and strcasestr O(n), not O(n^2); add memmem.
* libc/string/str-two-way.h: New file.
* libc/string/memmem.c (memmem): New file.
* libc/include/string.h (memmem): Declare for all platforms.
* libc/string/strstr.c (strstr): Provide O(n) implementation when
not optimizing for space.
* libc/string/strcasestr.c (strcasestr): Likewise.
* libc/string/Makefile.am (ELIX_SOURCES): Rename to...
(ELIX_2_SOURCES): ...this.
(ELIX_4_SOURCES): New category, for memmem.
(lib_a_SOURCES, libstring_la_SOURCES): Build new file.
(CHEWOUT_FILES): Build documentation for memmem.
* libc/string/strings.tex: Include new docs.
@
text
@d79 1
a79 1
const char  *_EXFUN(strsignal, (int __signo));
@


1.20
log
@	* libc/include/string.h: Add prototypes for stpcpy and stpncpy.
	* libc/string/Makefile.am (ELIX_SOURCES): Add stpcpy.c and
	stpncpy.c.
	(CHEWOUT_FILES): Add stpcpy.def and stpncpy.def.
	* libc/string/Makefile.in: Regenerate.
	* libc/string/stpcpy.c: New file.
	* libc/string/stpncpy.c: New file.
	* libc/string/strings.tex: Add stpcpy and stpncpy.
@
text
@d59 1
a59 3
#ifdef __CYGWIN__
extern void *memmem (__const void *, size_t,  __const void *, size_t);
#endif
@


1.19
log
@
2007-06-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/string/strcasestr.c: New file.
        * libc/include/string.h: Add strcasestr.
        * libc/string/strings.tex: Add strcasestr.
        * libc/string/Makefile.am: Ditto.
        * libc/string/Makefile.in: Regenerated.
@
text
@d63 2
@


1.18
log
@* libc/include/string.h: Add cygwin-specific function declaration.
@
text
@d64 1
@


1.17
log
@* libc/include/string.h: Revert previous change.
@
text
@d59 3
@


1.16
log
@* libc/include/string.h: For Cygwin, Define strerror_r as per ISO C.
@
text
@a64 3
#ifdef __CYGWIN__
int	_EXFUN(strerror_r,(int, char *, size_t));
#else
a65 1
#endif
@


1.15
log
@
2005-01-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h: Remove Linux-specific declaration of
        strsignal and add #include <sys/string.h>.
        * libc/include/sys/string.h: New file.
        * libc/include/sys/linux/sys/string.h: New file with strsignal
        declaration deleted above.
@
text
@d65 3
d69 1
@


1.14
log
@
2002-07-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h: Add mempcpy, strndup, and _strndup_r
        prototypes.
        * libc/stdlib/Makefile.am: Remove strdup.c and strdup_r.c.
        * libc/stdlib/Makefile.in: Regenerated.
        * libc/stdlib/strdup.c: Removed.
        * libc/stdlib/strdup_r.c: Removed.
        * libc/string/Makefile.am: Add strdup.c, strdup_r.c, memccpy.c,
        mempcpy.c, strndup.c, and strndup_r.c.
        * libc/string/Makefile.in: Regenerated.
        * libc/string/memccpy.c: New file.
        * libc/string/mempcpy.c: Ditto.
        * libc/string/strndup.c: Ditto.
        * libc/string/strndup_r.c: Ditto.
        * libc/string/strdup.c: New file moved from stdlib.
        * libc/string/strdup_r.c: Ditto.
        * libc/string/strings.tex: Add memccpy and mempcpy documentation.
@
text
@a77 2
#elif defined(__linux__)
char	*_EXFUN(strsignal, (int __signo));
d96 2
@


1.13
log
@
2002-06-27  Benjamin Kosnik  <bkoz@@redhat.com>

        * libc/include/stdio.h: Untangle, add _BEGIN_STD_C and _END_STD_C.
        * libc/include/time.h: Same.
        * libc/include/string.h: Same.
        * libc/include/stdlib.h: Same.
        * libc/include/signal.h: Same.
        * libc/include/setjmp.h: Same.
        * libc/include/math.h: Same.
        * libc/include/locale.h: Same.
        * libc/include/ctype.h: Same.
        * libc/include/machine/setjmp.h: Same.
        * libc/include/_ansi.h (_BEGIN_STD_C): Add.
        (_END_STD_C): Add.
@
text
@d58 1
d63 2
@


1.12
log
@
2002-06-05  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h[__linux__]: Add strsignal prototype.
        * libc/include/sys/lock.h: New file with default locking support.
        * libc/include/sys/reent.h: Add signal buffer support for strsignal
        and psignal.
        * libc/posix/Makefile.am: Add support for readdir_r.c.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/closedir.c: Add locking support and hash table cleanup.
        * libc/posix/opendir.c: Add lock support.
        * libc/posix/readdir.c: Ditto.
        * libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c: Ditto.
        * libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c: Ditto plus add _cleanupdir routine to
        clean up leftover hash table entries.
        * libc/posix/readdir_r.c: New file.
        * libc/sys/linux/Makefile.am: Add psignal.c and strsignal.c support.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/sys/dirent.h: Add dd_lock to DIR structure.
        * libc/sys/linux/sys/signal.h: Add psignal prototype.
        * libc/sys/linux/psignal.c: New file.
        * libc/sys/linux/strsignal.c: Ditto.
@
text
@a9 4
#ifdef __cplusplus
extern "C" {
#endif

d20 2
d95 2
a96 3
#ifdef __cplusplus
}
#endif
@


1.11
log
@
2002-05-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h: Add strnlen and strerror_r prototypes.
        * libc/string/Makefile.am: Add strnlen.c and strerror_r.c support.
        * libc/string/Makefile.in: Regenerated.
        * libc/string/strerror_r.c: New file.
        * libc/string/strnlen.c: New file.
        * libc/sys/linux/Makefile.am: Add rename.c.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/rename.c: New file to override default rename.
@
text
@d77 2
@


1.10
log
@
2002-05-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h (bcmp, bcopy, bzero): Change prototypes
        to use void * pointers and comply with Single Unix spec.
        * libc/string/bcmp.c: Change to use void * instead of char *.
        * libc/string/bcopy.c: Ditto.
        * libc/string/bzero.c: Ditto.
@
text
@d64 1
d68 1
@


1.9
log
@2002-05-10  Mark Bradshaw  <bradshaw@@staff.crosswalk.com>

	* libc/include/string.h (!__STRICT_ANSI__): Add strlcat and strlcpy.
	* libc/string/Makefile.am: Add strlcat.c and strlcpy.c.
	* libc/string/strlcat.c: New file.
	* libc/string/strlcpy.c: New file.
@
text
@d54 3
a56 3
int	 _EXFUN(bcmp,(const char *, const char *, size_t));
void	 _EXFUN(bcopy,(const char *, char *, size_t));
void	 _EXFUN(bzero,(char *, size_t));
@


1.8
log
@	* libc/string/swab.c: Specify that it's defined in <unistd.h>.
	* libc/include/string.h: Don't include <sys/types.h>,
	as it causes really bad namespace pollution.  Don't declare
	swab(), it is properly declared in unistd.h.
@
text
@d64 2
@


1.7
log
@* libc/include/string.h: Work around problem with strsignal and gdb.
@
text
@a15 1
#include <sys/types.h>
a73 1
void	 _EXFUN(swab,(const void *, void *, ssize_t));
@


1.6
log
@* libc/include/ctype.h: __CYGWIN32__ -> __CYGWIN__
* libc/include/malloc.h: Ditto.
* libc/include/process.h: Ditto.
* libc/include/stdio.h: Ditto.
* libc/include/stdlib.h: Ditto.
* libc/include/time.h: Ditto.
* libc/include/machine/setjmp.h: Ditto.
* libc/include/sys/errno.h: Ditto.
* libc/include/sys/signal.h: Ditto.
* libc/include/sys/stat.h: Ditto.
* libc/include/sys/time.h: Ditto.
* libc/include/sys/unistd.h: Ditto.
* libc/include/string.h: Ditto.  strsignal should return a const char *.
@
text
@d70 1
d72 1
@


1.5
log
@
Fri Mar 10 16:09:20 2000  Jeff Johnston <jjohnstn@@cygnus.com>

        * libc/include/string.h: Include <sys/types.h>.
@
text
@d69 2
a70 2
#ifdef __CYGWIN32__
char    *_EXFUN(strsignal, (int __signo));
@


1.4
log
@
Thu Mar  9 17:20:41 2000  Jeff Johnston <jjohnstn@@cygnus.com>

        * libc/include/string.h: Changed last argument back to ssize_t
        to make it compatible with XPG4 definition which is
        defined in <unistd.h>.  There is a conflict in the SVID 3
        and XPG4 definitions and newlib will settle with XPG4.
        * libc/string/swab.c: Ditto.
@
text
@d16 1
@


1.3
log
@
Wed Mar  8 17:11:41 2000  Jeff Johnston <jjohnstn@@cygnus.com>

        * libc/include/string.h: Changed last argument to size_t.
        * libc/string/swab.c: Changed last argument to size_t.
@
text
@d72 1
a72 1
void	 _EXFUN(swab,(const void *, void *, size_t));
@


1.2
log
@* libc/string/Makefile.am (lib_a_SOURCES): Added swab.c.
(CHEWOUT_FILES): Added swab.def.
* libc/string/Makefile.in: Rebuilt.
* libc/string/string.tex: Include swab.def.
* libc/include/string.h (swab): Declare.
* libc/string/swab.c: New file.
@
text
@d72 1
a72 1
void	 _EXFUN(swab,(const void *, void *, ssize_t));
@


1.1
log
@Initial revision
@
text
@d72 1
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
