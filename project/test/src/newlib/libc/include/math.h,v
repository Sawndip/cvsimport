head	1.55;
access;
symbols
	cygwin-1_7_35-release:1.55
	cygwin-1_7_34-release:1.54
	newlib-2_2_0:1.54.0.2
	cygwin-1_7_33-release:1.53
	cygwin-1_7_32-release:1.51
	cygwin-1_7_31-release:1.50
	cygwin-1_7_30-release:1.50
	cygwin-1_7_29-release:1.50
	cygwin-1_7_28-release:1.50
	newlib-2_1_0:1.50
	cygwin-1_7_27-release:1.50
	cygwin-1_7_26-release:1.50
	cygwin-1_7_25-release:1.50
	cygwin-1_7_24-release:1.50
	cygwin-1_7_23-release:1.50
	cygwin-1_7_22-release:1.50
	cygwin-1_7_21-release:1.50
	cygwin-1_7_20-release:1.50
	cygwin-1_7_19-release:1.50
	cygwin-64bit-postmerge:1.50
	cygwin-64bit-premerge-branch:1.50.0.2
	cygwin-64bit-premerge:1.50
	cygwin-1_7_18-release:1.50
	newlib-2_0_0:1.50
	cygwin-1_7_17-release:1.48
	cygwin-64bit-branch:1.47.0.2
	cygwin-1_7_16-release:1.47
	cygwin-1_7_15-release:1.47
	cygwin-1_7_14_2-release:1.47
	cygwin-1_7_14-release:1.47
	cygwin-1_7_12-release:1.47
	cygwin-1_7_11-release:1.47
	cygwin-1_7_10-release:1.47
	newlib-1_20_0:1.47
	cygwin-1_7_9-release:1.47
	cygwin-1_7_8-release:1.47
	newlib-1_19_0:1.47
	cygwin-1_7_7-release:1.45
	cygwin-1_7_5-release:1.45
	cygwin-1_7_4-release:1.45
	cygwin-1_7_3-release:1.45
	cygwin-1_7_2-release:1.45
	newlib-1_18_0:1.44
	cygwin-1_7_1-release:1.44
	newlib-1_17_0-arc:1.33.0.4
	binutils-arc-20080908-branch:1.33.0.2
	binutils-arc-20080908-branchpoint:1.33
	newlib-1_17_0:1.33
	newlib-1_16_0:1.32
	newlib-1_15_0:1.24
	newlib-csl-coldfire-4_1-32:1.21.2.1
	newlib-csl-sourcerygxx-4_1-32:1.21.2.1
	newlib-csl-innovasic-fido-3_4_4-33:1.21.2.1
	newlib-csl-coldfire-4_1-30:1.21.2.1
	newlib-csl-sourcerygxx-4_1-30:1.21.2.1
	newlib-csl-coldfire-4_1-28:1.21.2.1
	newlib-csl-sourcerygxx-4_1-28:1.21.2.1
	newlib-csl-arm-2006q3-27:1.21.2.1
	newlib-csl-sourcerygxx-4_1-27:1.21.2.1
	newlib-csl-arm-2006q3-26:1.21.2.1
	newlib-csl-sourcerygxx-4_1-26:1.21.2.1
	newlib-csl-sourcerygxx-4_1-24:1.21
	newlib-csl-sourcerygxx-4_1-23:1.21
	newlib-csl-sourcerygxx-4_1-21:1.21
	newlib-csl-arm-2006q3-21:1.21
	newlib-csl-arm-2006q3-19:1.21
	newlib-csl-sourcerygxx-4_1-19:1.21
	newlib-csl-sourcerygxx-4_1-18:1.21
	newlib-csl-sourcerygxx-3_4_4-25:1.21
	newlib-csl-sourcerygxx-4_1-17:1.21
	cr-0x5f1:1.21.0.6
	newlib-csl-sourcerygxx-4_1-14:1.21
	newlib-csl-sourcerygxx-4_1-13:1.21
	newlib-csl-sourcerygxx-4_1-12:1.21
	newlib-csl-sourcerygxx-4_1-9:1.21
	newlib-csl-sourcerygxx-4_1-8:1.21
	newlib-csl-sourcerygxx-4_1-7:1.21
	newlib-csl-arm-2006q1-6:1.21
	newlib-csl-sourcerygxx-4_1-6:1.21
	newlib-csl-sourcerygxx-4_1-5:1.21
	newlib-csl-sourcerygxx-4_1-4:1.21
	newlib-autotools-branch:1.21.0.4
	newlib-csl-20060320-branch:1.21.0.2
	newlib-csl-20060320-branchpoint:1.21
	newlib-1_14_0:1.20
	newlib-csl-arm-2005-q1b:1.18
	newlib-csl-arm-2005-q1a:1.18
	newlib-1_13_0:1.17
	csl-arm-2004-q3:1.17
	csl-arm-2004-q1a:1.17
	csl-arm-2004-q1:1.17
	newlib-1_12_0:1.17
	csl-arm-2003-q4:1.17
	w32api-2_2:1.15
	mingw-runtime-2_4:1.15
	newlib-1_11_0:1.15
	cygnus_cvs_20020108_pre:1.8
	newlib-1_10_0:1.8
	newlib-1_9_0:1.4
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.55
date	2015.02.06.16.14.02;	author nickc;	state Exp;
branches;
next	1.54;

1.54
date	2014.12.15.20.50.22;	author jjohnstn;	state Exp;
branches;
next	1.53;

1.53
date	2014.10.10.14.43.19;	author corinna;	state Exp;
branches;
next	1.52;

1.52
date	2014.08.27.19.27.03;	author dj;	state Exp;
branches;
next	1.51;

1.51
date	2014.08.04.21.32.37;	author jturney;	state Exp;
branches;
next	1.50;

1.50
date	2012.12.18.22.41.53;	author jjohnstn;	state Exp;
branches;
next	1.49;

1.49
date	2012.12.18.21.20.51;	author jjohnstn;	state Exp;
branches;
next	1.48;

1.48
date	2012.10.16.18.45.23;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2010.12.03.16.08.48;	author corinna;	state Exp;
branches
	1.47.2.1;
next	1.46;

1.46
date	2010.10.14.20.14.33;	author jjohnstn;	state Exp;
branches;
next	1.45;

1.45
date	2010.01.11.22.55.47;	author jjohnstn;	state Exp;
branches;
next	1.44;

1.44
date	2009.11.17.22.35.46;	author jjohnstn;	state Exp;
branches;
next	1.43;

1.43
date	2009.07.09.17.04.56;	author jjohnstn;	state Exp;
branches;
next	1.42;

1.42
date	2009.06.16.15.55.06;	author jjohnstn;	state Exp;
branches;
next	1.41;

1.41
date	2009.05.15.16.15.57;	author jjohnstn;	state Exp;
branches;
next	1.40;

1.40
date	2009.04.24.22.49.55;	author jjohnstn;	state Exp;
branches;
next	1.39;

1.39
date	2009.04.20.18.06.14;	author jjohnstn;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.17.20.54.19;	author jjohnstn;	state Exp;
branches;
next	1.37;

1.37
date	2009.04.16.18.24.34;	author jjohnstn;	state Exp;
branches;
next	1.36;

1.36
date	2009.04.03.17.42.27;	author jjohnstn;	state Exp;
branches;
next	1.35;

1.35
date	2009.03.25.19.13.24;	author jjohnstn;	state Exp;
branches;
next	1.34;

1.34
date	2009.03.18.18.11.18;	author jjohnstn;	state Exp;
branches;
next	1.33;

1.33
date	2008.04.23.23.10.54;	author jjohnstn;	state Exp;
branches;
next	1.32;

1.32
date	2007.12.19.22.20.25;	author jjohnstn;	state Exp;
branches;
next	1.31;

1.31
date	2007.09.07.15.30.59;	author jjohnstn;	state Exp;
branches;
next	1.30;

1.30
date	2007.09.06.19.55.34;	author jjohnstn;	state Exp;
branches;
next	1.29;

1.29
date	2007.09.06.19.51.46;	author jjohnstn;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.11.18.09.08;	author jjohnstn;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.17.18.50.56;	author jjohnstn;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.16.19.59.39;	author ericb;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.26.19.23.37;	author jjohnstn;	state Exp;
branches;
next	1.24;

1.24
date	2006.11.30.23.40.12;	author jjohnstn;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.25.18.46.40;	author jjohnstn;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.13.22.06.43;	author jjohnstn;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.27.23.51.28;	author jjohnstn;	state Exp;
branches
	1.21.2.1
	1.21.6.1;
next	1.20;

1.20
date	2005.10.20.21.42.33;	author jjohnstn;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.14.21.11.39;	author jjohnstn;	state Exp;
branches;
next	1.18;

1.18
date	2005.02.07.21.04.22;	author jjohnstn;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.13.17.36.10;	author jjohnstn;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.09.17.52.31;	author aoliva;	state Exp;
branches;
next	1.15;

1.15
date	2002.08.16.21.29.43;	author fitzsim;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.08.18.05.58;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.27.23.58.38;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.24.20.03.35;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.21.18.15.43;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.07.21.59.36;	author fitzsim;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.03.09.24.06;	author mrg;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.23.17.43.16;	author geoffk;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.29.22.40.50;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.24.00.12.44;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.23.19.56.14;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.01.20.51.51;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.28.16.27.54;	author meissner;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.27.14.49.09;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.47.2.1
date	2012.10.26.09.27.35;	author corinna;	state Exp;
branches;
next	;

1.21.2.1
date	2006.10.26.15.43.24;	author vprus;	state Exp;
branches;
next	;

1.21.6.1
date	2006.10.19.08.39.45;	author corinna;	state Exp;
branches;
next	1.21.6.2;

1.21.6.2
date	2006.12.01.09.16.41;	author corinna;	state Exp;
branches;
next	1.21.6.3;

1.21.6.3
date	2007.11.14.15.57.44;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.39.46;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.55
log
@	* libc/include/complex.h (cabsl): Add prototype.
	(cimagl): Add prototype.
	(creall): Add prototype.
	* libc/include/ieeefp.h: Include float.h.
	(EXT_EXPBITS, EXT_FRACHBITS, EXT_FRACLBITS)
	(EXT_EXP_INFNAN. EXT_EXP_BIAS, EXT_FRACBITS): Define.
	(struct ieee_ext, union ieee_ext_u): New types for long double
	support.
	* libc/include/math.h (finitel): Add prototype.
	(hypotl): Add prototype.
	(sqrtl): Add prototype.
	* libm/common/Makefile.am (lsrc): Add sl_finite.c.
	* libm/common/Makefile.in: Regenerate.
	* libm/common/fdlibm.h (__ieee754_hypotl): Add prototype.
	* libm/common/hypotl.c (hypotl): Add implementation for when long
	double is larger than double.
	* libm/common/sqrtl.c (sqrtl): Likewise.
	* libm/common/sl_finite.c: New file.  Adds implementation of the
	finitel function.
	* libm/complex/Makefile.am (lsrc): Define.
	(libcomplex_la_SOURCES): Add lsrc.
	(lib_a_SOURCES): Add lsrc.
	* libm/complex/Makefile.in: Regenerate.
	* libm/complex/cabs.c: Add documentation of cabsl function.
	* libm/complex/cimag.c: Add documentation of cimagl function.
	* libm/complex/creall.c: Add documentation of creall function.
	* libm/complex/cabsl.c: New file.  Adds implementation of the
	cabsl function.
	* libm/complex/cimagl.c: New file.  Adds implementation of the
	cimagl function.
	* libm/complex/creall.c: New file.  Adds implementation of the
	creall function.
	* libm/math/Makefile.am (lsrc): Define.
	(libmath_la_SOURCES): Add lsrc.
	(lib_a_SOURCES): Add lsrc.
	* libm/math/Makefile.in: Regenerate.
	* libm/math/el_hypot.c: New file.  Adds implementation of the
	__ieee754_hypotl function.
@
text
@#ifndef  _MATH_H_

#define  _MATH_H_

#include <sys/reent.h>
#include <machine/ieeefp.h>
#include "_ansi.h"

_BEGIN_STD_C

/* __dmath, __fmath, and __ldmath are only here for backwards compatibility
 * in case any code used them.  They are no longer used by Newlib, itself,
 * other than legacy.  */
union __dmath
{
  double d;
  __ULong i[2];
};

union __fmath
{
  float f;
  __ULong i[1];
};

#if defined(_HAVE_LONG_DOUBLE)
union __ldmath
{
  long double ld;
  __ULong i[4];
};
#endif

/* Natural log of 2 */
#define _M_LN2        0.693147180559945309417

#if __GNUC_PREREQ (3, 3)
 /* gcc >= 3.3 implicitly defines builtins for HUGE_VALx values.  */

# ifndef HUGE_VAL
#  define HUGE_VAL (__builtin_huge_val())
# endif

# ifndef HUGE_VALF
#  define HUGE_VALF (__builtin_huge_valf())
# endif

# ifndef HUGE_VALL
#  define HUGE_VALL (__builtin_huge_vall())
# endif

# ifndef INFINITY
#  define INFINITY (__builtin_inff())
# endif

# ifndef NAN
#  define NAN (__builtin_nanf(""))
# endif

#else /* !gcc >= 3.3  */

 /*      No builtins.  Use fixed defines instead.  (All 3 HUGE plus the INFINITY
  * and NAN macros are required to be constant expressions.  Using a variable--
  * even a static const--does not meet this requirement, as it cannot be
  * evaluated at translation time.)
  *      The infinities are done using numbers that are far in excess of
  * something that would be expected to be encountered in a floating-point
  * implementation.  (A more certain way uses values from float.h, but that is
  * avoided because system includes are not supposed to include each other.)
  *      This method might produce warnings from some compilers.  (It does in
  * newer GCCs, but not for ones that would hit this #else.)  If this happens,
  * please report details to the Newlib mailing list.  */

 #ifndef HUGE_VAL
  #define HUGE_VAL (1.0e999999999)
 #endif

 #ifndef HUGE_VALF
  #define HUGE_VALF (1.0e999999999F)
 #endif

 #if !defined(HUGE_VALL)  &&  defined(_HAVE_LONG_DOUBLE)
  #define HUGE_VALL (1.0e999999999L)
 #endif

 #if !defined(INFINITY)
  #define INFINITY (HUGE_VALF)
 #endif

 #if !defined(NAN)
  #if defined(__GNUC__)  &&  defined(__cplusplus)
    /* Exception:  older g++ versions warn about the divide by 0 used in the
     * normal case (even though older gccs do not).  This trick suppresses the
     * warning, but causes errors for plain gcc, so is only used in the one
     * special case.  */
    static const union { __ULong __i[1]; float __d; } __Nanf = {0x7FC00000};
    #define NAN (__Nanf.__d)
  #else
    #define NAN (0.0F/0.0F)
  #endif
 #endif

#endif /* !gcc >= 3.3  */

/* Reentrant ANSI C functions.  */

#ifndef __math_68881
extern double atan _PARAMS((double));
extern double cos _PARAMS((double));
extern double sin _PARAMS((double));
extern double tan _PARAMS((double));
extern double tanh _PARAMS((double));
extern double frexp _PARAMS((double, int *));
extern double modf _PARAMS((double, double *));
extern double ceil _PARAMS((double));
extern double fabs _PARAMS((double));
extern double floor _PARAMS((double));
#endif /* ! defined (__math_68881) */

/* Non reentrant ANSI C functions.  */

#ifndef _REENT_ONLY
#ifndef __math_68881
extern double acos _PARAMS((double));
extern double asin _PARAMS((double));
extern double atan2 _PARAMS((double, double));
extern double cosh _PARAMS((double));
extern double sinh _PARAMS((double));
extern double exp _PARAMS((double));
extern double ldexp _PARAMS((double, int));
extern double log _PARAMS((double));
extern double log10 _PARAMS((double));
extern double pow _PARAMS((double, double));
extern double sqrt _PARAMS((double));
extern double fmod _PARAMS((double, double));
#endif /* ! defined (__math_68881) */
#endif /* ! defined (_REENT_ONLY) */

#if !defined(__STRICT_ANSI__) || defined(__cplusplus) || \
  (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)

/* ISO C99 types and macros. */

/* FIXME:  FLT_EVAL_METHOD should somehow be gotten from float.h (which is hard,
 * considering that the standard says the includes it defines should not
 * include other includes that it defines) and that value used.  (This can be
 * solved, but autoconf has a bug which makes the solution more difficult, so
 * it has been skipped for now.)  */
#if !defined(FLT_EVAL_METHOD) && defined(__FLT_EVAL_METHOD__)
  #define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
  #define __TMP_FLT_EVAL_METHOD
#endif /* FLT_EVAL_METHOD */
#if defined FLT_EVAL_METHOD
  #if FLT_EVAL_METHOD == 0
    typedef float  float_t;
    typedef double double_t;
   #elif FLT_EVAL_METHOD == 1
    typedef double float_t;
    typedef double double_t;
   #elif FLT_EVAL_METHOD == 2
    typedef long double float_t;
    typedef long double double_t;
   #else
    /* Implementation-defined.  Assume float_t and double_t have been
     * defined previously for this configuration (e.g. config.h). */
  #endif
#else
    /* Assume basic definitions.  */
    typedef float  float_t;
    typedef double double_t;
#endif
#if defined(__TMP_FLT_EVAL_METHOD)
  #undef FLT_EVAL_METHOD
#endif

#define FP_NAN         0
#define FP_INFINITE    1
#define FP_ZERO        2
#define FP_SUBNORMAL   3
#define FP_NORMAL      4

#ifndef FP_ILOGB0
# define FP_ILOGB0 (-INT_MAX)
#endif
#ifndef FP_ILOGBNAN
# define FP_ILOGBNAN INT_MAX
#endif

#ifndef MATH_ERRNO
# define MATH_ERRNO 1
#endif
#ifndef MATH_ERREXCEPT
# define MATH_ERREXCEPT 2
#endif
#ifndef math_errhandling
# define math_errhandling MATH_ERRNO
#endif

extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);

#define fpclassify(__x) \
	((sizeof(__x) == sizeof(float))  ? __fpclassifyf(__x) : \
	__fpclassifyd(__x))

#ifndef isfinite
  #define isfinite(__y) \
          (__extension__ ({int __cy = fpclassify(__y); \
                           __cy != FP_INFINITE && __cy != FP_NAN;}))
#endif

/* Note: isinf and isnan were once functions in newlib that took double
 *       arguments.  C99 specifies that these names are reserved for macros
 *       supporting multiple floating point types.  Thus, they are
 *       now defined as macros.  Implementations of the old functions
 *       taking double arguments still exist for compatibility purposes
 *       (prototypes for them are in <ieeefp.h>).  */
#ifndef isinf
  #define isinf(y) (fpclassify(y) == FP_INFINITE)
#endif

#ifndef isnan
  #define isnan(y) (fpclassify(y) == FP_NAN)
#endif

#define isnormal(y) (fpclassify(y) == FP_NORMAL)
#define signbit(__x) \
	((sizeof(__x) == sizeof(float))  ?  __signbitf(__x) : \
		__signbitd(__x))

#define isgreater(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           !isunordered(__x,__y) && (__x > __y);}))
#define isgreaterequal(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           !isunordered(__x,__y) && (__x >= __y);}))
#define isless(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           !isunordered(__x,__y) && (__x < __y);}))
#define islessequal(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           !isunordered(__x,__y) && (__x <= __y);}))
#define islessgreater(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           !isunordered(__x,__y) && (__x < __y || __x > __y);}))

#define isunordered(a,b) \
          (__extension__ ({__typeof__(a) __a = (a); __typeof__(b) __b = (b); \
                           fpclassify(__a) == FP_NAN || fpclassify(__b) == FP_NAN;}))

/* Non ANSI long double precision functions.  */

extern int finitel _PARAMS((long double));

/* Non ANSI double precision functions.  */

extern double infinity _PARAMS((void));
extern double nan _PARAMS((const char *));
extern int finite _PARAMS((double));
extern double copysign _PARAMS((double, double));
extern double logb _PARAMS((double));
extern int ilogb _PARAMS((double));

extern double asinh _PARAMS((double));
extern double cbrt _PARAMS((double));
extern double nextafter _PARAMS((double, double));
extern double rint _PARAMS((double));
extern double scalbn _PARAMS((double, int));

extern double exp2 _PARAMS((double));
extern double scalbln _PARAMS((double, long int));
extern double tgamma _PARAMS((double));
extern double nearbyint _PARAMS((double));
extern long int lrint _PARAMS((double));
extern long long int llrint _PARAMS((double));
extern double round _PARAMS((double));
extern long int lround _PARAMS((double));
extern long long int llround _PARAMS((double));
extern double trunc _PARAMS((double));
extern double remquo _PARAMS((double, double, int *));
extern double fdim _PARAMS((double, double));
extern double fmax _PARAMS((double, double));
extern double fmin _PARAMS((double, double));
extern double fma _PARAMS((double, double, double));

#ifndef __math_68881
extern double log1p _PARAMS((double));
extern double expm1 _PARAMS((double));
#endif /* ! defined (__math_68881) */

#ifndef _REENT_ONLY
extern double acosh _PARAMS((double));
extern double atanh _PARAMS((double));
extern double remainder _PARAMS((double, double));
extern double gamma _PARAMS((double));
extern double lgamma _PARAMS((double));
extern double erf _PARAMS((double));
extern double erfc _PARAMS((double));
extern double log2 _PARAMS((double));
#if !defined(__cplusplus)
#define log2(x) (log (x) / _M_LN2)
#endif

#ifndef __math_68881
extern double hypot _PARAMS((double, double));
#endif

#endif /* ! defined (_REENT_ONLY) */

/* Single precision versions of ANSI functions.  */

extern float atanf _PARAMS((float));
extern float cosf _PARAMS((float));
extern float sinf _PARAMS((float));
extern float tanf _PARAMS((float));
extern float tanhf _PARAMS((float));
extern float frexpf _PARAMS((float, int *));
extern float modff _PARAMS((float, float *));
extern float ceilf _PARAMS((float));
extern float fabsf _PARAMS((float));
extern float floorf _PARAMS((float));

#ifndef _REENT_ONLY
extern float acosf _PARAMS((float));
extern float asinf _PARAMS((float));
extern float atan2f _PARAMS((float, float));
extern float coshf _PARAMS((float));
extern float sinhf _PARAMS((float));
extern float expf _PARAMS((float));
extern float ldexpf _PARAMS((float, int));
extern float logf _PARAMS((float));
extern float log10f _PARAMS((float));
extern float powf _PARAMS((float, float));
extern float sqrtf _PARAMS((float));
extern float fmodf _PARAMS((float, float));
#endif /* ! defined (_REENT_ONLY) */

/* Other single precision functions.  */

extern float exp2f _PARAMS((float));
extern float scalblnf _PARAMS((float, long int));
extern float tgammaf _PARAMS((float));
extern float nearbyintf _PARAMS((float));
extern long int lrintf _PARAMS((float));
extern long long int llrintf _PARAMS((float));
extern float roundf _PARAMS((float));
extern long int lroundf _PARAMS((float));
extern long long int llroundf _PARAMS((float));
extern float truncf _PARAMS((float));
extern float remquof _PARAMS((float, float, int *));
extern float fdimf _PARAMS((float, float));
extern float fmaxf _PARAMS((float, float));
extern float fminf _PARAMS((float, float));
extern float fmaf _PARAMS((float, float, float));

extern float infinityf _PARAMS((void));
extern float nanf _PARAMS((const char *));
extern int finitef _PARAMS((float));
extern float copysignf _PARAMS((float, float));
extern float logbf _PARAMS((float));
extern int ilogbf _PARAMS((float));

extern float asinhf _PARAMS((float));
extern float cbrtf _PARAMS((float));
extern float nextafterf _PARAMS((float, float));
extern float rintf _PARAMS((float));
extern float scalbnf _PARAMS((float, int));
extern float log1pf _PARAMS((float));
extern float expm1f _PARAMS((float));

#ifndef _REENT_ONLY
extern float acoshf _PARAMS((float));
extern float atanhf _PARAMS((float));
extern float remainderf _PARAMS((float, float));
extern float gammaf _PARAMS((float));
extern float lgammaf _PARAMS((float));
extern float erff _PARAMS((float));
extern float erfcf _PARAMS((float));
extern float log2f _PARAMS((float));
extern float hypotf _PARAMS((float, float));
#endif /* ! defined (_REENT_ONLY) */

/* On platforms where long double equals double.  */
#ifdef _LDBL_EQ_DBL
/* Reentrant ANSI C functions.  */
#ifndef __math_68881
extern long double atanl _PARAMS((long double));
extern long double cosl _PARAMS((long double));
extern long double sinl _PARAMS((long double));
extern long double tanl _PARAMS((long double));
extern long double tanhl _PARAMS((long double));
extern long double frexpl _PARAMS((long double, int *));
extern long double modfl _PARAMS((long double, long double *));
extern long double ceill _PARAMS((long double));
extern long double fabsl _PARAMS((long double));
extern long double floorl _PARAMS((long double));
extern long double log1pl _PARAMS((long double));
extern long double expm1l _PARAMS((long double));
#endif /* ! defined (__math_68881) */
/* Non reentrant ANSI C functions.  */
#ifndef _REENT_ONLY
#ifndef __math_68881
extern long double acosl _PARAMS((long double));
extern long double asinl _PARAMS((long double));
extern long double atan2l _PARAMS((long double, long double));
extern long double coshl _PARAMS((long double));
extern long double sinhl _PARAMS((long double));
extern long double expl _PARAMS((long double));
extern long double ldexpl _PARAMS((long double, int));
extern long double logl _PARAMS((long double));
extern long double log10l _PARAMS((long double));
extern long double powl _PARAMS((long double, long double));
extern long double sqrtl _PARAMS((long double));
extern long double fmodl _PARAMS((long double, long double));
extern long double hypotl _PARAMS((long double, long double));
#endif /* ! defined (__math_68881) */
#endif /* ! defined (_REENT_ONLY) */
extern long double copysignl _PARAMS((long double, long double));
extern long double nanl _PARAMS((const char *));
extern int ilogbl _PARAMS((long double));
extern long double asinhl _PARAMS((long double));
extern long double cbrtl _PARAMS((long double));
extern long double nextafterl _PARAMS((long double, long double));
extern float nexttowardf _PARAMS((float, long double));
extern double nexttoward _PARAMS((double, long double));
extern long double nexttowardl _PARAMS((long double, long double));
extern long double logbl _PARAMS((long double));
extern long double log2l _PARAMS((long double));
extern long double rintl _PARAMS((long double));
extern long double scalbnl _PARAMS((long double, int));
extern long double exp2l _PARAMS((long double));
extern long double scalblnl _PARAMS((long double, long));
extern long double tgammal _PARAMS((long double));
extern long double nearbyintl _PARAMS((long double));
extern long int lrintl _PARAMS((long double));
extern long long int llrintl _PARAMS((long double));
extern long double roundl _PARAMS((long double));
extern long lroundl _PARAMS((long double));
extern long long int llroundl _PARAMS((long double));
extern long double truncl _PARAMS((long double));
extern long double remquol _PARAMS((long double, long double, int *));
extern long double fdiml _PARAMS((long double, long double));
extern long double fmaxl _PARAMS((long double, long double));
extern long double fminl _PARAMS((long double, long double));
extern long double fmal _PARAMS((long double, long double, long double));
#ifndef _REENT_ONLY
extern long double acoshl _PARAMS((long double));
extern long double atanhl _PARAMS((long double));
extern long double remainderl _PARAMS((long double, long double));
extern long double lgammal _PARAMS((long double));
extern long double erfl _PARAMS((long double));
extern long double erfcl _PARAMS((long double));
#endif /* ! defined (_REENT_ONLY) */
#else /* !_LDBL_EQ_DBL */
extern long double hypotl _PARAMS((long double, long double));
extern long double sqrtl _PARAMS((long double));
#ifdef __i386__
/* Other long double precision functions.  */
extern _LONG_DOUBLE rintl _PARAMS((_LONG_DOUBLE));
extern long int lrintl _PARAMS((_LONG_DOUBLE));
extern long long int llrintl _PARAMS((_LONG_DOUBLE));
#endif /* __i386__ */
#endif /* !_LDBL_EQ_DBL */

#endif /* !defined (__STRICT_ANSI__) || defined(__cplusplus) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) */

#if !defined (__STRICT_ANSI__) || defined(__cplusplus)

extern double drem _PARAMS((double, double));
extern void sincos _PARAMS((double, double *, double *));
extern double gamma_r _PARAMS((double, int *));
extern double lgamma_r _PARAMS((double, int *));

extern double y0 _PARAMS((double));
extern double y1 _PARAMS((double));
extern double yn _PARAMS((int, double));
extern double j0 _PARAMS((double));
extern double j1 _PARAMS((double));
extern double jn _PARAMS((int, double));

extern float dremf _PARAMS((float, float));
extern void sincosf _PARAMS((float, float *, float *));
extern float gammaf_r _PARAMS((float, int *));
extern float lgammaf_r _PARAMS((float, int *));

extern float y0f _PARAMS((float));
extern float y1f _PARAMS((float));
extern float ynf _PARAMS((int, float));
extern float j0f _PARAMS((float));
extern float j1f _PARAMS((float));
extern float jnf _PARAMS((int, float));

/* GNU extensions */
# ifndef exp10
extern double exp10 _PARAMS((double));
# endif
# ifndef pow10
extern double pow10 _PARAMS((double));
# endif
# ifndef exp10f
extern float exp10f _PARAMS((float));
# endif
# ifndef pow10f
extern float pow10f _PARAMS((float));
# endif

#endif /* !defined (__STRICT_ANSI__) || defined(__cplusplus) */

#ifndef __STRICT_ANSI__

/* The gamma functions use a global variable, signgam.  */
#ifndef _REENT_ONLY
#define signgam (*__signgam())
extern int *__signgam _PARAMS((void));
#endif /* ! defined (_REENT_ONLY) */

#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)

/* The exception structure passed to the matherr routine.  */
/* We have a problem when using C++ since `exception' is a reserved
   name in C++.  */
#ifdef __cplusplus
struct __exception
#else
struct exception
#endif
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};

#ifdef __cplusplus
extern int matherr _PARAMS((struct __exception *e));
#else
extern int matherr _PARAMS((struct exception *e));
#endif

/* Values for the type field of struct exception.  */

#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6

#endif /* ! defined (__STRICT_ANSI__) */

/* Useful constants.  */

#if !defined(__STRICT_ANSI__) || ((_XOPEN_SOURCE - 0) >= 500)

#define MAXFLOAT	3.40282347e+38F

#define M_E		2.7182818284590452354
#define M_LOG2E		1.4426950408889634074
#define M_LOG10E	0.43429448190325182765
#define M_LN2		_M_LN2
#define M_LN10		2.30258509299404568402
#define M_PI		3.14159265358979323846
#define M_PI_2		1.57079632679489661923
#define M_PI_4		0.78539816339744830962
#define M_1_PI		0.31830988618379067154
#define M_2_PI		0.63661977236758134308
#define M_2_SQRTPI	1.12837916709551257390
#define M_SQRT2		1.41421356237309504880
#define M_SQRT1_2	0.70710678118654752440

#endif

#ifndef __STRICT_ANSI__

#define M_TWOPI         (M_PI * 2.0)
#define M_3PI_4		2.3561944901923448370E0
#define M_SQRTPI        1.77245385090551602792981
#define M_LN2LO         1.9082149292705877000E-10
#define M_LN2HI         6.9314718036912381649E-1
#define M_SQRT3	1.73205080756887719000
#define M_IVLN10        0.43429448190325182765 /* 1 / log(10) */
#define M_LOG2_E        _M_LN2
#define M_INVLN2        1.4426950408889633870E0  /* 1 / log(2) */

/* Global control over fdlibm error handling.  */

enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};

#define _LIB_VERSION_TYPE enum __fdlibm_version
#define _LIB_VERSION __fdlib_version

extern __IMPORT _LIB_VERSION_TYPE _LIB_VERSION;

#define _IEEE_  __fdlibm_ieee
#define _SVID_  __fdlibm_svid
#define _XOPEN_ __fdlibm_xopen
#define _POSIX_ __fdlibm_posix

#endif /* ! defined (__STRICT_ANSI__) */

_END_STD_C

#ifdef __FAST_MATH__
#include <machine/fastmath.h>
#endif

#endif /* _MATH_H_ */
@


1.54
log
@
2014-12-15  Jonathan Roelofs  <jonathan@@codesourcery.com>

        * libc/include/math.h: Add log2l,logbl,nexttowardf,
        * nexttoward,nexttowardl
        * libm/common/Makefile.am: Reference new files
        * libm/common/Makefile.in: Reference new files
        * libm/common/log2l.c: New File
        * libm/common/logbl.c: Likewise
        * libm/common/nexttowardf.c: Likewise
        * libm/common/nexttoward.c: Likewise
        * libm/common/nexttowardl.c: Likewise
@
text
@d257 4
d461 2
@


1.53
log
@	* libc/include/_ansi.h: _LONG_LONG_TYPE definition removed.
	* libc/include/math.h: _LONG_LONG_TYPE replaced by "long long".
	Guards for C99 and C++11 functions fixed.
	* libc/include/stdlib.h: Guards for C99 and C++11 functions fixed.
@
text
@d426 5
@


1.52
log
@* libc/include/math.h (frexpl): Remove parameter name.
@
text
@d139 2
a140 1
#if !defined(__STRICT_ANSI__) || defined(__cplusplus) || __STDC_VERSION__ >= 199901L
d277 1
a277 1
extern _LONG_LONG_TYPE int llrint _PARAMS((double));
d347 1
a347 1
extern _LONG_LONG_TYPE llrintf _PARAMS((float));
d436 1
a436 1
extern _LONG_LONG_TYPE int llroundl _PARAMS((long double));
d456 1
a456 1
extern _LONG_LONG_TYPE llrintl _PARAMS((_LONG_DOUBLE));
d460 1
a460 1
#endif /* !defined (__STRICT_ANSI__) || defined(__cplusplus) || __STDC_VERSION__ >= 199901L */
@


1.51
log
@	* libc/include/math.h: Also define M_PI etc. if _XOPEN_SOURCE is
	defined appropriately.
@
text
@d393 1
a393 1
extern long double frexpl _PARAMS((long double value, int *));
@


1.50
log
@
2012-12-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Remove the log2f macro.
@
text
@d545 2
d549 2
a558 1
#define M_TWOPI         (M_PI * 2.0)
a560 2
#define M_3PI_4		2.3561944901923448370E0
#define M_SQRTPI        1.77245385090551602792981
d566 8
@


1.49
log
@
2012-12-18  Craig Howland  <howland@@LGSInnovations.com>

        * libc/include/math.h: Add recognition of values 1 and 2 for
        FLT_EVAL_METHOD.
@
text
@a380 3
#if !defined(__cplusplus)
#define log2f(x) (logf (x) / (float_t) _M_LN2)
#endif
@


1.48
log
@	* libc/include/sys/features.h (__GNUC_PREREQ): Define.  Use
	throughout in place of explicit GNUC version checks.
	* libc/include/_ansi.h (_NOINLINE): Define.
	(_NOINLINE_STATIC): Define.
	* libc/stdio/vfprintf.c (__sbprintf): Define _NOINLINE_STATIC.
@
text
@d143 8
a150 4
#ifndef FLT_EVAL_METHOD
#define FLT_EVAL_METHOD 0
typedef float float_t;
typedef double double_t;
d152 22
@


1.47
log
@	* libc/include/math.h: Missing from previous checkin.
@
text
@d37 1
a37 4
#if defined(__GNUC__) && \
  ( (__GNUC__ >= 4) || \
    ( (__GNUC__ >= 3) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 3) ) )

@


1.47.2.1
log
@Pull in changes from HEAD
@
text
@d37 4
a40 1
#if __GNUC_PREREQ (3, 3)
@


1.46
log
@
2010-10-14  Craig Howland <howland@@LGSInnovations.com>

        * libc/include/math.h:  Delete cabs() and cabs() prototypes
        (c.f. 2010-10-08 change by Corinna).
@
text
@d35 1
a35 1
#define _M_LOG2_E        0.693147180559945309417
d279 1
a279 1
#define log2(x) (log (x) / _M_LOG2_E)
d359 1
a359 1
#define log2f(x) (logf (x) / (float) _M_LOG2_E)
d532 1
a532 1
#define M_LN2		0.69314718055994530942
d549 1
a549 1
#define M_LOG2_E        _M_LOG2_E
@


1.45
log
@
2010-01-11  Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>

        * libc/include/math.h (log2, log2f): Disable macro versions for C++,
        as they are incompatible with OpenMP/C++ headers.

2
@
text
@a442 1
extern double cabs();
a454 1
extern float cabsf();
@


1.44
log
@
2009-11-17  Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>

        * libm/common/fdlibm.h (logb, logbf): Move decls from here...
        * libc/include/math.h (logb, logbf): ...to here.
@
text
@d278 1
d280 1
d358 1
d360 1
@


1.43
log
@
2009-07-09  Craig Howland <howland@@LGSInnovations.com>

        * libm/math/ef_scalb.c:  Replace isnanf() (pre-C99 function call) with
        isnan() (C99 macro).
        * libm/math/wf_log.c:  Ditto.
        * libm/math/wf_j0.c:  Ditto.
        * libm/math/wf_sqrt.c:  Ditto.
        * libm/math/wf_pow.c:  Ditto.
        * libm/math/wf_fmod.c:  Ditto.
        * libm/math/wf_remainder.c:  Ditto.
        * libm/math/wf_scalb.c:  Ditto.
        * libm/math/wf_atanh.c:  Ditto.
        * libm/math/wf_cosh.c:  Ditto.
        * libm/math/wf_acos.c:  Ditto.
        * libm/math/wf_acosh.c:  Ditto.
        * libm/math/wf_jn.c:  Ditto.
        * libm/math/wf_log10.c:  Ditto.
        * libm/math/wf_asin.c:  Ditto.
        * libm/math/wf_j1.c:  Ditto.
        * libm/common/sf_isnan.c:  Add #include <ieeefp.h>, fix comment.
        * libm/common/sf_isinf.c:  Add #include <ieeefp.h>, adjust comment to
        match that from s_isinf.c.
        * libc/include/machine/ieeefp.h:  Simplify isinf and isnan macros to
        remove un-necessary extension use (in a similar manner to as was
        recently done in math.h).
        * libc/include/math.h:  Remove isnanf and isinff prototypes (are in
        ieeefp.h).
        * libm/machine/spu/sf_isinf.c:  Fix comment (remove <math.h>).
@
text
@d239 1
d336 1
@


1.42
log
@
2009-06-16  Craig Howland <howland@@LGSInnovations.com>

        * libc/include/math.h:  Simplify fpclassify, isinf, isnan, and signbit
        macros to remove un-necessary extension use.  isinf and isnan also
        changed to use fpclassify.  isfinite macro modified to run faster by
        only calling fpclassify once instead of possibly twice.
@
text
@d198 2
a199 1
 *       taking double arguments still exist for compatibility purposes.  */
a332 2
extern int isnanf _PARAMS((float));
extern int isinff _PARAMS((float));
@


1.41
log
@
2009-05-15  Craig Howland <howland@@LGSInnovations.com>

        * configure.in:  Add configuration test for long double type existing
        and set flag _HAVE_LONG_DOUBLE if true.  Fix INIT_ARRAY (.init_array)
        and _LDBL_EQ_DBL tests to not link so that will work with
        cross-compilers.
        * configure: Regenerated.
        * Makefile.in: Ditto.
        * newlib.hin: Add _HAVE_LONG_DOUBLE flag.
        * libc/include/math.h:  Change non-builtin defines for HUGE_VAL,
        HUGE_VALF, and HUGE_VALL to be constant expressions.  Add definitions
        for the non-builtin case for INFINITY and NAN.  Gate HUGE_VALL and
        union __ldmath definitions with (new) _HAVE_LONG_DOUBLE.
        *libm/common/s_infconst.c:  Change definitions to use values from
        float.h instead of non-so-portable integer forms.  Mark as being
        deprecated (because now removed from math.h, are not used anywhere
        in Newlib, itself).
@
text
@d184 3
a186 3
#define fpclassify(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof (__x) == sizeof (float))  ? __fpclassifyf(__x) : __fpclassifyd(__x);}))
d189 3
a191 3
#define isfinite(y) \
          (__extension__ ({__typeof__(y) __y = (y); \
                           fpclassify(__y) != FP_INFINITE && fpclassify(__y) != FP_NAN;}))
d200 1
a200 3
#define isinf(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof (__x) == sizeof (float))  ? __isinff(__x) : __isinfd(__x);}))
d204 1
a204 3
#define isnan(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof (__x) == sizeof (float))  ? __isnanf(__x) : __isnand(__x);}))
d208 3
a210 3
#define signbit(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           (sizeof(__x) == sizeof(float)) ? __signbitf(__x) : __signbitd(__x);}))
@


1.40
log
@
2009-04-24  Jeff johnston  <jjohnstn@@redhat.com>

        * configure.in: Add configuration test for long double equals dbl
        and set flag _LDBL_EQ_DBL if true.
        * configure: Regenerated.
        * newlib.hin: Add _LDBL_EQ_DBL flag.
        * libc/include/math.h: Use _LDBL_EQ_DBL flag instead of
        _HAVE_LDBL_MATH.
        * libc/include/stdlib.h: Use _LDBL_EQ_DBL flag instead of
        _HAVE_LDBL_STDLIB.
        * libc/common/local.h: Remove _LDBL_EQ_DBL flag setting.
        * libc/stdlib/local.h: Ditto.
@
text
@d11 3
d16 1
a17 1
  double d;
d22 1
a23 1
  float f;
d26 1
d29 1
a30 1
  _LONG_DOUBLE ld;
d32 1
d65 11
a75 4
 /* No builtins.  Use floating-point unions instead.  Declare as an array
    without bounds so no matter what small data support a port and/or
    library has, the reference will be via the general method for accessing
    globals. */
d78 1
a78 2
  extern __IMPORT const union __dmath __infinity[];
  #define HUGE_VAL (__infinity[0].d)
d82 9
a90 2
  extern __IMPORT const union __fmath __infinityf[];
  #define HUGE_VALF (__infinityf[0].f)
d93 11
a103 3
 #ifndef HUGE_VALL
  extern __IMPORT const union __ldmath __infinityld[];
  #define HUGE_VALL (__infinityld[0].ld)
@


1.39
log
@
2009-04-20  Jeff johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Change _LDBL_EQ_DBL flag usage to
        be _HAVE_LDBL_MATH.
        * libc/include/stdlib.h: Change _LDBL_EQ_DBL flag usage to
        be _HAVE_LDBL_STDLIB.
@
text
@d337 2
a338 2
/* On platforms where long double math functions are supported.  */
#ifdef _HAVE_LDBL_MATH
d403 1
a403 1
#else /* !_HAVE_LDBL_MATH */
d410 1
a410 1
#endif /* !_HAVE_LDBL_MATH */
@


1.38
log
@
2009-04-17  Ken Werner  <ken.werner@@de.ibm.com>

        * libc/include/machine/ieeefp.h: _LDBL_EQ_DBL check fixed.
        * libc/include/math.h (llrintl): Declare.
        * libm/common/llrintl.c: New File.
        * libm/common/Makefile.am: New File added.
        * libm/common/Makefile.in: Regenerate.
@
text
@d337 2
a338 2
/* On platforms where long double is as wide as double.  */
#ifdef _LDBL_EQ_DBL
d403 1
a403 1
#else /* !_LDBL_EQ_DBL */
d410 1
a410 1
#endif /* !_LDBL_EQ_DBL */
@


1.37
log
@
2009-04-16  Ken Werner  <ken.werner@@de.ibm.com>

        * libm/libm.texinfo: Add long double function support chapter.
        * libc/include/machine/ieeefp.h: Add _LDBL_EQ_DBL define.
        * libc/include/stdlib.h: Include <machine/ieeefp.h>.
        (strtold, wcstold): Declare.
        * libc/stdlib/strtold.c: New File.
        * libc/stdlib/wcstold.c: Likewise.
        * libc/configure.in: Add long double check.
        * libc/configure: Regenerate.
        * libc/stdlib/Makefile.am: Add strtold.c and wcstold.c.
        * libc/stdlib/Makefile.in: Regenerate.
        * libc/include/math.h (atanl, cosl, sinl, tanl, tanhl): Declare.
        (frexpl, modfl, ceill, fabsl, floorl, log1pl, expm1l, acosl): Ditto.
        (asinl, atan2l, coshl, sinhl, expl, ldexpl, logl, log10l, powl): Ditto.
        (sqrtl, fmodl, hypotl, copysignl, nanl, ilogbl, asinhl, cbrt): Ditto.
        (nextafterl, rintl, scalbnl, exp2l, scalblnl, tgammal): Ditto.
        (nearbyintl, lrintl, llrintl, roundl, lroundl, llround): Ditto.
        (llroundl, truncl, remquol, fdiml, fmaxl, fminl, fmal, acoshl): Ditto.
        (atanhl, remainderl, lgammal, erfl, erfcl): Ditto.
        * libm/common/atanl.c: New File.
        * libm/common/cosl.c: Likewise.
        * libm/common/sinl.c: Likewise.
        * libm/common/modfl.c: Likewise.
        * libm/common/frexpl.c: Likewise.
        * libm/common/tanhl.c: Likewise.
        * libm/common/tanl.c: Likewise.
        * libm/common/expm1l.c: Likewise.
        * libm/common/log1pl.c: Likewise.
        * libm/common/ceill.c: Likewise.
        * libm/common/fabsl.c: Likewise.
        * libm/common/floorl.c: Likewise.
        * libm/common/acosl.c: Likewise.
        * libm/common/asinl.c: Likewise.
        * libm/common/atan2l.c: Likewise.
        * libm/common/coshl.c: Likewise.
        * libm/common/expl.c: Likewise.
        * libm/common/fmodl.c: Likewise.
        * libm/common/hypotl.c: Likewise.
        * libm/common/ldexpl.c: Likewise.
        * libm/common/log10l.c: Likewise.
        * libm/common/logl.c: Likewise.
        * libm/common/powl.c: Likewise.
        * libm/common/sqrtl.c: Likewise.
        * libm/common/copysignl.c: Likewise.
        * libm/common/ilogbl.c: Likewise.
        * libm/common/nanl.c: Likewise.
        * libm/common/cbrtl.c: Likewise.
        * libm/common/asinhl.c: Likewise.
        * libm/common/nextafterl.c: Likewise.
        * libm/common/rintl.c: Likewise.
        * libm/common/scalbnl.c: Likewise.
        * libm/common/exp2l.c: Likewise.
        * libm/common/fdiml.c: Likewise.
        * libm/common/fmal.c: Likewise.
        * libm/common/fmaxl.c: Likewise.
        * libm/common/fminl.c: Likewise.
        * libm/common/lrintl.c: Likewise.
        * libm/common/lroundl.c: Likewise.
        * libm/common/nearbyintl.c: Likewise.
        * libm/common/remquol.c: Likewise.
        * libm/common/roundl.c: Likewise.
        * libm/common/scalblnl.c: Likewise.
        * libm/common/truncl.c: Likewise.
        * libm/common/acoshl.c: Likewise.
        * libm/common/atanhl.c: Likewise.
        * libm/common/erfcl.c: Likewise.
        * libm/common/erfl.c: Likewise.
        * libm/common/lgammal.c: Likewise.
        * libm/common/remainderl.c: Likewise.
        * libm/common/tgammal.c: Likewise.
        * libm/common/sinhl.c: Likewise.
        * libm/common/llroundl.c: Likewise.
        * libm/configure.in: Add long double check.
        * libm/configure: Regenerate.
        * libm/common/Makefile.am: Add new files.
        * libm/common/Makefile.in: Regenerate.
@
text
@d385 1
@


1.36
log
@
2009-04-03  Ken Werner  <ken.werner@@de.ibm.com>

        * libc/include/math.h: Remove duplicate copysign prototype.
        Fix __math_68881 define typo.  Guard functions of the rint family.
@
text
@d337 67
a404 1
#ifdef __i386__
d409 1
@


1.35
log
@
2009-03-25  Craig Howland <howland@@LGSInnovations.com>

	* libc/include/math.h:  (llround, llroundf): Declare.
	* libm/common/s_llround.c: New file, implementing llround().
	* libm/common/sf_llround.c: New file, implementing llroundf().
	* libm/common/sf_lround.c: Remove spurious cast in _DOUBLE_IS_32BITS
	version of function.
	* libm/common/sf_lrint.c: Ditto.
	* libm/common/sf_logb.c:  Corrected return for subnormal argument
	by replacing existing function with a version created from sf_ilogb.c.
	* libm/common/s_logb.c: Ditto, except starting point s_ilogb.c.  Also
	added documentation for logb() and logbf().
	* libm/common/s_signbit.c:  Add signbit() documentation.
	* libm/common/s_log2.c: Update return values to match what w_log2.c has,
	since log2 uses log(); add note about being derived instead of direct.
	* libm/common/sf_fma.c: Add casts to attempt to get correct results,
	as well as comments pointing out problems with the implementation.
	* libm/common/s_fma.c: Add fma() and fmaf() documentation.
	* libm/common/sf_remquo.c: Incorrect quotient returns for large values
	corrected by discarding existing function and replacing with Sun
	verion, with some enhancements.
	* libm/common/s_remquo.c: Ditto.  Add remquo() and remquof()
	documentation.
	* libm/common/s_fmax.c: Add fmax() and fmaxf() documentation.
	* libm/common/s_fmin.c: Add fmin() and fminf() documentation.
	* libm/common/s_fdim.c: Return NAN for NAN arg, add fdim() and fdimf()
	documentation.
	* libm/common/sf_fdim.c: Return NAN for NAN arg, HUGE_VALF for inf arg.
	* libm/common/s_trunc.c: Add trunc() and truncf() documentation.
	* libm/common/s_rint.c: Add rint() and rintf() documentation.
	* libm/common/s_round.c: Add round() and roundf() documentation.
	* libm/common/s_scalbn.c: Add scalbln() and scalblnf() documentation.
	* libm/common/s_infinity.c: Add infinity() and infinityf()
	documentation.
	* libm/common/s_lround.c: Add lround(), lroundf(), llround(), and
	llroundf() documentation.
	* libm/common/s_lrint.c: Add lrint(), lrintf(), llrint(), and llrintf()
	documentation.
	* libm/common/isgreater.c: New file for documenting math.h function-like
	macros isgreater(), isgreaterequal(), isless(), islessequal(),
	islessgreater(), and isunordered().
	* libm/common/s_isnan.c: Add documentation for function-like macros
	fpclassify(), isfinite(), isinf(), isnan(), and isnormal().
	* libm/common/s_nearbyint.c: Add nearbyint() and nearbyintf()
	documentation.
	* libm/common/Makefile.am: Add s_llround.c (src); sf_llround.c (fsrc);
	s_fdim.def, s_fma.def, s_fmax.def, s_fmin.def,
	s_logb.def, s_lrint.def, s_lround.def, s_nearbyint.def, s_remquo.def,
        s_rint.def, s_round.def, s_signbit.def, s_trunc.def, and
        isgreater.def (chobj);
	re-name all existing chew files (chobj) to match source file base
	names (put in underscores), delete all special targets for chew files
	(leaving all to be generated by rule).
	* libm/common/Makefile.in: regenerate.
	* libm/math/w_exp2.c: Add "base 2" to documentation description (and
	delete TRAD_SYNOPSIS).
	* libm/math/w_gamma.c: Add tgamma() and tgammaf() documentation, along
	with some history behind the function names.
	* libm/math/math.tex: Add includes for newly-added documentation (see
	.def additions to common/Makefile.am and math/Makefile.am in this
	ChangeLog list), adjusted existing .def file names to match source file
	base names (added underscores); add mention of HUGE_VALF; rename
	"Version of library" section to "Error Handling" and add some text
	about floating-point exception; added section "Standards Compliance And
	Portability".
	* libm/math/Makefile.am: Add w_exp2.def (chobj);
	re-name all existing chew files (chobj) to match source file base
	names, delete all special targets for chew files (leaving all to be
	generated by rule).
	* libm/math/Makefile.in: regenerated
	* doc/makedoc.c: Change silent ignoring of commands < 5 characters
	to a failure when reading macro file for commands < 4 characters;
	add -v (verbose) option for printing some debugging information;
	get rid of spurious translation of "@@*" to "*" (no source files used @@*,
	so no existing doc pages were affected); clean up some compiler
	warnings.
	* doc/doc.str: add BUGS and SEEALSO sections (to match texi2pod.pl
	which has them); Remove ITEM command (redundant with makedoc built-in
	"o", not used in any present source file so nothing is lost, anyway).
	* HOWTO: New file to hold information for maintainers regarding how
	to do things.  Initial sections on documentation and ELIX levels.
@
text
@d100 1
a100 1
#ifndef __math_6881
a234 1
extern double copysign _PARAMS((double, double));
a302 1
extern float copysignf _PARAMS((float, float));
d338 1
d342 1
@


1.34
log
@
2009-03-18  Yaakov Selkowitz <yselkowitz@@users.sourceforge.net>

        * libm/common/s_log2.c: New file.
        * libm/common/sf_log2.c: Ditto.
        * libm/common/Makefile.am: Add s_log2.c and sf_log2.c.
        * libm/common/Makefile.in: Regenerated.
        * libc/include/math.h: Add log2 and log2f function prototypes.
@
text
@d232 1
d301 1
@


1.33
log
@
2008-04-23  Ken Werner  <ken.werner@@de.ibm.com>

        * libc/include/_ansi.h: _LONG_LONG renamed to _LONG_LONG_TYPE.
        * libc/include/math.h: Likewise.
@
text
@d253 1
d332 1
@


1.32
log
@
2007-12-19  Dave Korn  <dave.korn@@artimi.com>
            Jeff Johnston  <jjohnstn@@redhhat.com>

        * libc/include/_ansi.h: Add _LONG_LONG definition.
        * libc/include/math.h (llrint, llrintf, rintl, lrintl, llrintl): Add
        prototypes.
        * libc/machine/i386/machine/fastmath.h: Add support for new i386
        fast math versions of rint, lrint, and llrint family functions.
        * libm/machine/i386/Makefile.am: Add new files.
        * libm/machine/i386/Makefile.in: Regenerated.
        * libm/machine/i386/f_llrint.c, libm/machine/i386/f_lrint.c,
        libm/machine/i386/f_rint.c, libm/machine/i386/f_llrintf.c,
        libm/machine/i386/f_lrintf.c, libm/machine/i386/f_rintf.c,
        libm/machine/i386/f_llrintl.c, libm/machine/i386/f_lrintl.c,
        libm/machine/i386/f_rintl.c:  New files with fast math implementations.
@
text
@d229 1
a229 1
extern _LONG_LONG int llrint _PARAMS((double));
d296 1
a296 1
extern _LONG_LONG llrintf _PARAMS((float));
d338 1
a338 1
extern _LONG_LONG llrintl _PARAMS((_LONG_DOUBLE));
@


1.31
log
@
2007-09-07  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (_M_LOG2E): Replace with..
        (_M_LOG2_E): New macro.
        (log2, log2f, M_LOG2_E): Use _M_LOG2_E.
@
text
@d229 1
d296 1
d335 5
@


1.30
log
@
Fix typo in ChangeLog and math.h.
@
text
@d29 2
a30 3
/* Log2 of e */
#define _M_LOG2E		1.4426950408889634074

d252 1
a252 1
#define log2(x) (log (x) / _M_LOG2E)
d329 1
a329 1
#define log2f(x) (logf (x) / (float) _M_LOG2E)
d426 1
a426 1
#define M_LOG2E		_M_LOG2E
d445 1
a445 1
#define M_LOG2_E        0.693147180559945309417
@


1.29
log
@
2007-09-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (_M_LOG2E): New log2 of e macro.
        (log2): Use _M_LOG2E instead of M_LOG2E.
        (log2f): Ditto.
        (M_LOG2E): Define to be _M_LOG2E.
@
text
@d253 1
a253 1
#define log2(x) (log (x) / _M_LOG2_E)
d330 1
a330 1
#define log2f(x) (logf (x) / (float) _M_LOG2_E)
@


1.28
log
@
2007-07-11  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Fix so C99 functions/macros are accessible
        when -std=c99 is used when compiling and not when using C89.
@
text
@d29 4
d253 1
a253 1
#define log2(x) (log (x) / M_LOG2_E)
d330 1
a330 1
#define log2f(x) (logf (x) / (float) M_LOG2_E)
d427 1
a427 1
#define M_LOG2E		1.4426950408889634074
@


1.27
log
@
2007-05-17  Yaakov Selkowitz  <yselkowitz <at> users.sourceforge.net>

        * libm/common/Makefile.am: Add support for exp10, exp10f,
        pow10, and pow10f functions.
        * libm/common/Makefile.in: Regenerated.
        * libm/common/s_pow10.c: New file.
        * libm/common/sf_pow10.c: Ditto.
        * libm/common/s_exp10.c: Ditto.
        * libm/common/sf_exp10.c: Ditto.
        * libc/include/math.h [!pow10]: New pow10 prototype.
        [!pow10f]: New pow10f prototype.
        [!exp10]: New exp10 prototype.
        [!exp10f]: New exp10f prototype.
@
text
@d2 1
d113 1
a113 1
#if !defined(__STRICT_ANSI__) || defined(__cplusplus)
a234 9
extern void sincos _PARAMS((double, double *, double *));

/* GNU extensions */
# ifndef exp10
extern double exp10 _PARAMS((double));
# endif
# ifndef pow10
extern double pow10 _PARAMS((double));
# endif
a245 1
extern double gamma_r _PARAMS((double, int *));
a246 1
extern double lgamma_r _PARAMS((double, int *));
a248 6
extern double y0 _PARAMS((double));
extern double y1 _PARAMS((double));
extern double yn _PARAMS((int, double));
extern double j0 _PARAMS((double));
extern double j1 _PARAMS((double));
extern double jn _PARAMS((int, double));
a254 3
extern double cabs();
extern double drem _PARAMS((double, double));

a256 4
#endif /* !defined (__STRICT_ANSI__) || defined(__cplusplus)  */

#if !defined(__STRICT_ANSI__) || defined(__cplusplus)

a284 4
#endif /* !defined(__STRICT_ANSI__) || defined(__cplusplus) */

#ifndef __STRICT_ANSI__

a316 9
extern void sincosf _PARAMS((float, float *, float *));

/* GNU extensions */
# ifndef exp10f
extern float exp10f _PARAMS((float));
# endif
# ifndef pow10f
extern float pow10f _PARAMS((float));
# endif
a322 1
extern float gammaf_r _PARAMS((float, int *));
a323 1
extern float lgammaf_r _PARAMS((float, int *));
d326 27
a358 2
#define log2f(x) (logf (x) / (float) M_LOG2_E)
extern float hypotf _PARAMS((float, float));
d360 15
a374 2
extern float cabsf();
extern float dremf _PARAMS((float, float));
d376 1
a376 1
#endif /* ! defined (_REENT_ONLY) */
@


1.26
log
@	* libc/include/math.h (INFINITY, NAN, FP_ILOGB0, FP_ILOGBNAN)
	(MATH_ERRNO, MATH_ERREXCEPT, math_errhandling): Add macros
	required by POSIX.
	* libc/stdlib/ldtoa.c (USE_INFINITY): Rename from INFINITY, to
	avoid clash with <math.h>.
@
text
@d236 8
d346 8
@


1.25
log
@
2007-04-26  Patrick Mansfield <patmans@@us.ibm.com>

        * libc/include/ieeefp.h: use prefixed __ieeefp_ macros that can be
        overridden via machine/ieeefp.h.
        * libc/include/machine/ieeefp.h: Add SPU specific C99 and ieeefp
        macros for isnan and related macros.
        * libc/include/math.h: Allow C99 isfinite, isinf, and isnan to be
        overridden via machine/ieeefp.h.
        * libm/machine/spu/Makefile.am: Add new files.
        * libm/machine/spu/Makefile.in: Autogenerate with new files.
        * libm/machine/spu/sf_fpclassify.c: Add SPU specific __fpclassifyf.
        * libm/machine/spu/sf_finite.c: Add SPU specific finitef.
        * libm/machine/spu/sf_isinf.c: Add SPU specific isinff.
        * libm/machine/spu/sf_isinff.c: Add SPU specific __isinff.
        * libm/machine/spu/sf_isnan.c: Add SPU specific isnanf.
        * libm/machine/spu/sf_isnanf.c: Add SPU specific __isnanf.
        * libm/machine/spu/sf_nan.c: Add SPU specific nanf.
@
text
@a0 1

d15 1
a15 1
 
d21 1
a21 1
 
d34 19
a52 11
 #ifndef HUGE_VAL
  #define HUGE_VAL (__builtin_huge_val())
 #endif

 #ifndef HUGE_VALF
  #define HUGE_VALF (__builtin_huge_valf())
 #endif

 #ifndef HUGE_VALL
  #define HUGE_VALL (__builtin_huge_vall())
 #endif
d56 3
a58 3
 /* No builtins.  Use floating-point unions instead.  Declare as an array 
    without bounds so no matter what small data support a port and/or 
    library has, the reference will be via the general method for accessing 
d128 17
d374 1
a374 1
struct __exception 
d376 1
a376 1
struct exception 
d424 1
a424 1
#define M_SQRT3   	1.73205080756887719000
@


1.24
log
@
2006-11-30  Lev Bishop  <lev.bishop@@gmail.com>

        * libc/include/math.h: Allow C99 functions/macros to be
        defined for C++ even when __STRICT_ANSI__.
@
text
@d134 1
d138 1
d145 1
d149 3
d155 2
@


1.23
log
@
2006-10-25  Vladimir Prus  <vladimir@@codesourcery.com>

        * libc/include/math.h: (exception): Add a comment
        telling fixincludes that we handle C vs. C++ issue.
@
text
@d105 1
a105 1
#ifndef __STRICT_ANSI__
d236 1
a236 1
#endif /* ! defined (__STRICT_ANSI__) */
@


1.22
log
@
2006-09-13  Patrick Mansfield <patmans@@us.ibm.com>

        * libc/include/math.h: Remove _CONST from _LIB_VERSION, as it is
        supposed to be writable.
        * libm/common/s_lib_ver.c: Ditto.
@
text
@d339 2
a340 1

@


1.21
log
@
2006-02-27  Jeff Johnston  <jjohnstn@@redhat.com>

        * Makefile.am (MATHOBJS_IN_LIBC): Add s_isinfd, sf_isinff,
        s_isnand, and sf_isnanf object files.
        * Makefile.in: Regenerated.
        * libc/include/ieeefp.h: Undef isnan and isinf to avoid
        conflict if <math.h> has previously been included.
        * libc/include/math.h
        * libm/common/Makefile.am: Add new s_isinfd, s_isnand, sf_isinff,
        and sf_isnanf files.  Also support s_isnan, sf_isnan, s_isinf, and
        sf_isinf files which have been moved from math/mathfp directories.
        * libm/common/Makefile.in: Regenerated.
        * libm/common/s_isinfd.c: New file.
        * libm/common/s_isnand.c: Ditto.
        * libm/common/sf_isinff.c: Ditto.
        * libm/common/sf_isnanf.c: Ditto.
        * libm/common/s_isinf.c: Moved from libm/math directory.
        * libm/common/s_isnan.c: Ditto.
        * libm/common/sf_isinf.c: Ditto.
        * libm/common/sf_isnan.c: Ditto.
        * libm/math/Makefile.am: Remove isinf and isnan family functions
        which have been moved into common directory.
        * libm/mathfp/Makefile.am: Ditto.
        * libm/math/Makefile.in: Regenerated.
        * libm/mathfp/Makefile.in: Ditto.
        * libm/math/s_isinf.c: Removed.
        * libm/math/s_isnan.c: Ditto.
        * libm/math/sf_isinf.c: Ditto.
        * libm/math/sf_isnan.c: Ditto.
        * libm/mathfp/s_isinf.c: Ditto.
        * libm/mathfp/s_isnan.c: Ditto.
        * libm/mathfp/sf_isinf.c: Ditto.
        * libm/mathfp/sf_isnan.c: Ditto.
@
text
@d409 1
a409 1
extern __IMPORT _CONST _LIB_VERSION_TYPE _LIB_VERSION;
@


1.21.2.1
log
@       Merge from HEAD:
       newlib/
       * libc/include/math.h: (exception): Add a comment
       telling fixincludes that we handle C vs. C++ issue.
@
text
@d339 1
a339 2
/* We have a problem when using C++ since `exception' is a reserved
   name in C++.  */
@


1.21.6.1
log
@Apply the following mainline patches to cr-0x5f1 branch:

2006-10-11  Yang Tse  <yangsita@@gmail.com>

	* libc/include/machine/setjmp.h: Use __extension__ keyword for gcc's
	braced-groups.

2006-10-11  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/reent/reeent.c (_reclaim_reent): Free _REENT_MP_RESULT.

2006-09-13  Patrick Mansfield <patmans@@us.ibm.com>

	* libc/include/math.h: Remove _CONST from _LIB_VERSION, as it is
	supposed to be writable.
	* libm/common/s_lib_ver.c: Ditto.

2006-09-06  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_vfprintf_r, get_arg): Add 'hh', 'j',
	't', and 'z' modifiers.

2006-08-22  Eric Blake  <ebb9@@byu.net>

	* libc/posix/popen.c (popen): Don't close output end of pipe in
	child if stdout was closed on entry.
	[HAVE_FCNTL]: In parent, mark file as close-on-exec, per POSIX.

2006-08-17  Brian Ford  <Brian.Ford@@FlightSafety.com>

	* libc/time/gmtime.c: Correct man page; clock is not a
	local time and no conversion occurs.
@
text
@d409 1
a409 1
extern __IMPORT _LIB_VERSION_TYPE _LIB_VERSION;
@


1.21.6.2
log
@	* libc/include/math.h: Allow C99 functions/macros to be
	defined for C++ even when __STRICT_ANSI__.
@
text
@d105 1
a105 1
#if !defined(__STRICT_ANSI__) || defined(__cplusplus)
d236 1
a236 1
#endif /* !defined (__STRICT_ANSI__) || defined(__cplusplus)  */
d339 1
a339 2
/* We have a problem when using C++ since `exception' is a reserved
   name in C++.  */
@


1.21.6.3
log
@2007-10-23  Jeff Johnston  <jjohnstn@@redhat.com>

	* libc/stdlib/wcstombs_r.c: Add SUSV2 support for calculating
	size if output buffer is NULL.

2007-10-13  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_R) [__OPTIMIZE_SIZE__]:
	Correctly nest else within conditionals.
	Reported by Artur Lipowski.

2007-09-17  Eric Blake  <ebb9@@byu.net>

	Obey POSIX on printf("%.s", (char*)NULL).
	* libc/stdio/vfprintf.c (_VFPRINTF_R): Take precision into account
	for %s on NULL.  Skip NULL check when optimizing for size.

2007-07-31  Eric Blake  <ebb9@@byu.net>

	More POSIX stream corner cases.
	* libc/stdio/findfp.c (__sinit): Open stderr read/write.
	* libc/stdio/fdopen.c (_fdopen_r): Set O_APPEND on fd when
	requested.
	* libc/stdio64/fdopen64.c (_fdopen64_r): Likewise.

2007-07-13  Eric Blake  <ebb9@@byu.net>

	Fix fflush issues.
	* libc/stdio/fflush.c (_fflush_r): New function.
	(fflush): Fix reentrancy and large offset behavior.
	* libc/include/stdio.h (_fflush_r): Add prototype.
	* libc/stdio/fclose.c (_fclose_r): All fflush callers changed.
	* libc/stdio/freopen.c (_freopen_r): Likewise.
	* libc/stdio/fseek.c (_fseek_r): Likewise.
	* libc/stdio/ftell.c (_ftell_r): Likewise.
	* libc/stdio/fvwrite.c (__sfvwrite_r): Likewise.
	* libc/stdio/refill.c (__srefill_r): Likewise.
	* libc/stdio/setvbuf.c (setvbuf): Likewise.
	* libc/stdio/ungetc.c (_ungetc_r): Likewise.
	* libc/stdio/vfprintf.c (__sbprintf): Likewise.
	* libc/stdio/wbuf.c (__swbuf_r): Likewise.
	* libc/stdio64/freopen64.c (_freopen64_r): Likewise.
	* libc/stdio64/fseeko64.c (_fseeko64_r): Likewise.  Defer to
	32-bit version if not large file.
	* libc/stdio64/ftello64.c (_ftello64_r): Likewise.
	* libc/stdio64/tmpfile64.c (_tmpfile64_r): Avoid compile warning.

2007-06-04  Eric Blake  <ebb9@@byu.net>

	* libc/include/sys/reent.h (struct __sFILE, struct __sFILE64):
	Switch to reentrant callbacks.
	* libc/stdio/local.h (__sread, __swrite, __sseek, __sclose)
	(__sseek64, __swrite64): Fix prototypes.
	[__SCLE]: Pull in setmode declaration.
	* libc/stdio/stdio.c (__sread, __swrite, __sseek, __sclose): Fix
	reentrancy.
	* libc/stdio64/stdio64.c (__sseek64_r, __swrite64_r): Delete.
	(__sseek64, __swrite64): Fix reentrancy.
	* libc/stdio/fseek.c (_fseek_r): Account for overflow, and fix
	reentrancy.
	* libc/stdio/ftell.c (_ftell_r): Likewise.
	* libc/stdio/flags.c (__sflags): Don't lose __SAPP on "a+".
	* libc/stdio/fclose.c (_fclose_r): Fix reentrancy.
	* libc/stdio/freopen.c (_freopen_r): Likewise.
	* libc/stdio/fvwrite.c (__sfvwrite_r): Likewise.
	* libc/stdio/refill.c (__srefill_r): Likewise.
	* libc/stdio/siscanf.c (eofread): Likewise.
	* libc/stdio/sscanf.c (eofread): Likewise.
	* libc/stdio/vsiscanf.c (eofread1): Likewise.
	* libc/stdio/vsscanf.c (eofread1): Likewise.
	* libc/stdio64/freopen64.c (_freopen64_r): Likewise.
	* libc/stdio64/fseeko64.c (_fseeko64_r): Likewise.
	* libc/stdio64/ftello64.c (_ftello64_r): Likewise.
	* libc/stdio/fflush.c (fflush): Improve reentrancy, although more
	could be fixed.

2007-05-29  Eric Blake  <ebb9@@byu.net>

	Avoid more compiler warnings.
	* libc/stdlib/btowc.c: Add missing header.
	* libc/stdlib/getopt.c (getopt_internal): Initialize variable.
	* libc/stdlib/system.c (do_system) [__CYGWIN__]: Add declaration.
	* libc/stdlib/wctob.c: Add missing header.
	* libc/string/strcpy.c (strcpy): Avoid warnings.
	* libc/string/strrchr.c (strrchr): Likewise.

2007-05-29  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/argz/argz_add_sep.c (argz_add_sep): Handle empty string
	argument.
	* libc/argz/argz_append.c (argz_append): Handle empty buf argument.
	* libc/argz/argz_create_sep.c (argz_create_sep): Return (NULL, 0)
	on empty input strings.
	* libc/argz/argz_extract.c (argz_extract): Check argz_len before
	looping through argz.
	* libc/argz/argz_stringify.c (argz_stringify): Ditto.

2007-05-27  Brian Dessent  <brian@@dessent.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_R): Populate 'ox' when
	handling %p.

2007-05-25  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/rewind.c (rewind): Fix regression of 2003-08-22.

2007-05-23  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_R): Don't truncate %p when
	sizeof(void*) is 8 but sizeof(long) is 4.
	* libc/stdio/vfscanf.c (__SVFSCANF_R): Likewise.  Fix %i scanning
	of "-0x".  Support "-nan" and "inf" for %e.  Audit usage of ungetc
	to fix reentrancy and bug on encoding error in multibyte locales.
	Always return EOF on read error.

2007-05-23  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfscanf.c (__SVFSCANF_R): Support scanf(%1$s).
	Avoid warning when !FLOATING_POINT.
	* libc/stdio/vfprintf.c (_VFPRINTF_R): Simplify _NO_POS_ARGS
	slightly.

2007-05-23  Corinna Vinschen  <vinschen@@redhat.com>

	* libc/argz/argz_create_sep.c (argz_create_sep): Initialize *argz_len
	to zero.
	* libc/include/argz.h: Guard against multiple inclusion.  Guard for
	use with C++.

2007-05-17  Charles Wilson  <cygwin@@...>

	* stdio/tmpfile.c: Include <sys/stat.h>.
	* stdio64/tmpfile64.c: Ditto.

2007-05-16  Eric Blake  <ebb9@@byu.net>

	Close security hole in tmpfile.
	* libc/stdio/tmpfile.c (_tmpfile_r): Avoid window between filename
	generation and opening the fd.
	* libc/stdio64/tmpfile64.c (_tmpfile64_r): Likewise.

	* libc/include/math.h (INFINITY, NAN, FP_ILOGB0, FP_ILOGBNAN)
	(MATH_ERRNO, MATH_ERREXCEPT, math_errhandling): Add macros
	required by POSIX.
	* libc/stdlib/ldtoa.c (USE_INFINITY): Rename from INFINITY, to
	avoid clash with <math.h>.

	* libc/stdlib/wctomb_r.c (_wctomb_r): Avoid gcc warnings on cygwin.
	* libc/search/hash.c (__hash_open): Likewise.

2007-05-10  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_R): Fix use of decimal point
	in %f and %e.  Avoid malloc when possible for %S.
	(BUF): Improve stack locality by using smaller size.
	(MAXEXP): Define.
	(exponent): Use for smaller stack size.

2007-05-01  Eric Blake  <ebb9@@byu.net>

	* libc/stdio64/local64.h: Delete, move contents to...
	* libc/stdio/local.h: ...here.
	* libc/stdio64/fdopen64.c: Update includes.
	* libc/stdio64/fopen64.c: Likewise.
	* libc/stdio64/freopen64.c: Likewise.
	* libc/stdio64/fseeko64.c: Likewise.
	* libc/stdio64/ftello64.c: Likewise.
	* libc/stdio/findfp.c (std) [__LARGE64_FILES]: Open stdin, stdout,
	and stderr with 64-bit offset.
	* libc/stdio/fseek.c (_fseek_r): Avoid compile warning.
	* libc/stdio/makebuf.c (__smakebuf_r): Likewise.
	* libc/stdio/mktemp.c (_gettemp): Likewise.

2007-04-25  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (get_arg): Support %1$lc.  Simplify types
	that promote to int.

2007-04-24  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_R): Don't zero pad on infinity
	or NaN with %05f.

	* libc/stdio/vfprintf.c (_VFPRINTF_R): Avoid multibyte when not
	_MB_CAPABLE.

	* libc/include/limits.h (NL_ARGMAX): Define a default value.
	* libc/stdio/vfprintf.c (MAX_POS_ARGS): Define in terms of
	NL_ARGMAX, if present.

2007-04-23  Brian Dessent  <brian@@dessent.net>

	* libc/stdio/vfprintf.c (_vfprintf_r): When the alternate-form flag
	has been specified with types 'f', 'F', 'g', or 'G', ensure the
	trailing decimal is printed.

2007-04-17  Brian Dessent  <brian@@dessent.net>

	* libc/stdio/sscanf.c: Update documentation comments.
	* libc/stdio/vfscanf.c (__SVFSCANF_R): Handle j, t, and z modifiers.

2007-04-12  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/vfprintf.c (_VFPRINTF_F, cvt): Don't confuse %F with %e.
	(chclass): Recognize 'F', 'X', 'n', and not 'W'.
	(get_arg): Handle %1$F, %1$n.

2007-04-10  Eric Blake  <ebb9@@byu.net>

	* libc/include/stdio.h (_ELIDABLE_INLINE): Work even when using
	CFLAGS=-O0.

2007-04-09  Eric Blake  <ebb9@@byu.net>

	* libc/include/stdio.h: Add gcc format attributes to printf and
	scanf families.

2007-04-04  Jeff Johnston  <jjohnstn@@redhat.com>

	* libc/argz/argz_insert.c: Add stddef.h to get ptrdiff_t type.

2007-04-04  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/asiprintf.c (_asiprintf_r): Fix reentrancy.
	(asiprintf): Avoid overhead.
	* libc/stdio/asprintf.c (_asprintf_r): Fix reentrancy.
	(asprintf): Avoid overhead.
	* libc/stdio/diprintf.c (_diprintf_r, diprintf): New file.
	* libc/stdio/dprintf.c (_dprintf_r, dprintf): Use _DEFUN.
	* libc/stdio/fiprintf.c (_fiprintf_r): Add reentrant version.
	(fiprintf): Avoid overhead.
	* libc/stdio/fprintf.c (_fprintf_r): Add reentrant version.
	(fprintf): Avoid overhead.
	* libc/stdio/iprintf.c (_iprintf_r): Use _DEFUN.
	(iprintf): Avoid overhead.
	* libc/stdio/printf.c (_printf_r): Use _DEFUN.
	(printf): Avoid overhead.
	* libc/stdio/vasiprintf.c (vasiprintf): Reduce binary size.
	* libc/stdio/vasprintf.c (vasprintf): Reduce binary size.
	* libc/stdio/vdiprintf.c (_vdiprintf_r, vdiprintf): New file.
	* libc/stdio/vdprintf.c (vdprintf): Avoid overhead.
	* libc/stdio/vsiprintf.c (vsiprintf): Reduce binary size.
	* libc/stdio/vsniprintf.c (vsniprintf): Reduce binary size.
	* libc/stdio/vsnprintf.c (vsnprintf): Reduce binary size.
	* libc/stdio/vsprintf.c (vsprintf): Reduce binary size.
	* libc/stdio/Makefile.am (GENERAL_SOURCES): Add diprintf.c,
	vdiprintf.c.
	* libc/include/stdio.h (diprintf, _diprintf_r, vdiprintf)
	(_vdiprintf_r, _fiprintf_r, _vfiprintf_r): Add prototypes.

2007-03-30  Dave Korn  <dave.korn@@artimi.com>

	* libc/include/stdio.h (_ELIDABLE_INLINE):  New macro to conceal
	conflicting inline semantics between C99 and GNU89.
	(__sgetc_r):  Replace static inline with _ELIDABLE_INLINE to be
	compatible with -fkeep-inline-functions usage.
	(__sputc_r):  Likewise for consistency even though disabled.

2007-03-16  Charles Wilson  <cygwin@@...>

	* libc/argz/argz_insert.c: "before" pointer is
	invalid after *argz realloc.  Compute offset
	between "before" and *argz, and use it after
	reallocation instead.

2007-03-16  Eric Blake  <ebb9@@byu.net>

	* libc/stdio64/fseek064.c (_fseeko64_r): Fix reentrancy.
	* libc/stdio64/freopen64.c (_freopen64_r): Ditto.

2007-03-15  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/local.h (cantwrite, FREEUB, FREELB): Make reentrant.
	(__smakebuf): Rename...
	(__smakebuf_r): to this.
	* libc/stdio/fvwrite.h (__swsetup_r): Rename, from __swsetup.
	* libc/stdio/makebuf.c (__smakebuf): Detect failed asprint
	allocation, then rename...
	(__smakebuf_r): ...to this and fix reentrancy.
	* libc/stdio/wsetup.c (__swsetup): Detect failed asprintf
	allocation, then rename...
	(__swsetup_r): ...to this and fix reentrancy.
	* libc/stdio/fseek.c (_fseek_r): Fix reentrancy.
	* libc/stdio/refill.c (__srefill_r): Likewise.
	* libc/stdio/fclose.c (_fclose_r): Likewise.
	* libc/stdio/fread.c (_fread_r): Likewise.
	* libc/stdio/freopen.c (_freopen_r): Likewise.
	* libc/stdio/wbuf.c (__swbuf_r): Likewise.
	* libc/stdio64/fseeko64.c (_fseeko64_r): Likewise.
	* libc/stdio/fvwrite.c (__sfvwrite_r): Set errno properly on
	failed asprintf allocation, and fix reentrancy.
	* libc/stdio/snprintf.c (snprintf, _snprintf_r): Report overflow,
	as required by POSIX.
	* libc/stdio/sniprintf.c (sniprintf, _sniprintf_r): Likewise.
	* libc/stdio/vsnprintf.c (vsnprintf, _vsnprintf_r): Likewise.
	* libc/stdio/vsniprintf.c (vsniprintf, _vsniprintf_r): Likewise.

2007-03-12  Eric Blake  <ebb9@@byu.net>

	* libc/stdio/fvwrite.c (__sfvwrite_r): Fix reentrancy.
	* libc/stdio/vasprintf.c (vasprintf, _vasprintf_r): Pass failed
	allocation to caller.
	* libc/stdio/asprintf.c (_asprintf_r, asprintf): Likewise.
	* libc/stdio/asiprintf.c (_asiprintf_r, asiprintf): Likewise.
	* libc/stdio/vasiprintf.c (vasiprintf, _vasiprintf_r): Likewise.

2007-02-20  Kazunori Asayama <asayama@@sm.sony.co.jp>

	* libc/include/stdio.h: Add declaration for vsiprintf.
@
text
@d1 1
d16 1
a16 1

d22 1
a22 1

d35 11
a45 19
# ifndef HUGE_VAL
#  define HUGE_VAL (__builtin_huge_val())
# endif

# ifndef HUGE_VALF
#  define HUGE_VALF (__builtin_huge_valf())
# endif

# ifndef HUGE_VALL
#  define HUGE_VALL (__builtin_huge_vall())
# endif

# ifndef INFINITY
#  define INFINITY (__builtin_inff())
# endif

# ifndef NAN
#  define NAN (__builtin_nanf(""))
# endif
d49 3
a51 3
 /* No builtins.  Use floating-point unions instead.  Declare as an array
    without bounds so no matter what small data support a port and/or
    library has, the reference will be via the general method for accessing
a120 17
#ifndef FP_ILOGB0
# define FP_ILOGB0 (-INT_MAX)
#endif
#ifndef FP_ILOGBNAN
# define FP_ILOGBNAN INT_MAX
#endif

#ifndef MATH_ERRNO
# define MATH_ERRNO 1
#endif
#ifndef MATH_ERREXCEPT
# define MATH_ERREXCEPT 2
#endif
#ifndef math_errhandling
# define math_errhandling MATH_ERRNO
#endif

d342 1
a342 1
struct __exception
d344 1
a344 1
struct exception
d392 1
a392 1
#define M_SQRT3	1.73205080756887719000
@


1.20
log
@
2005-10-20  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (HUGE_VAL, HUGE_VALF, HUGE_VALL): When
        gcc is 3.3 or greater, use special gcc builtins.
@
text
@a0 1
/* math.h -- Definitions for the math floating point package.  */
d121 4
d137 13
a149 3
#define isnormal(z) \
          (__extension__ ({__typeof__(z) __z = (z); \
                           fpclassify(__z) == FP_NORMAL;}))
a177 2
extern int isnan _PARAMS((double));
extern int isinf _PARAMS((double));
@


1.19
log
@
2005-10-14  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (HUGE_VALF, HUGE_VALL): New.
        * libm/common/Makefile.am: Add s_infconst.c support.
        * libm/common/Makefile.in: Regenerated.
        * libm/common/s_infconst.c: New file with float and
        long double infinity support added.
        * libm/math/Makefile.am: Remove s_infconst.c support.
        * libm/math/Makefile.in: Regenerated.
        * libm/math/s_infconst.c: Moved to common directory.
        * libm/mathfp/Makefile.am: Remove s_infconst.c support.
        * libm/mathfp/Makefile.in: Regenerated.
        * libm/mathfp/s_infconst.c: Moved to common directory.
@
text
@d12 6
a17 5
#ifndef HUGE_VAL

/* Define HUGE_VAL as infinity, unless HUGE_VAL is already defined
   (which might have been done by something like math-68881.h).  */

d23 1
a23 7

union __dmath
{
  __ULong i[2];
  double d;
};

d30 39
a68 10
/* Declare this as an array without bounds so that no matter what small data
   support a port and/or library has, this reference will be via the general
   method for accessing globals. */
extern __IMPORT const union __dmath __infinity[];
extern __IMPORT const union __fmath __infinityf[];
extern __IMPORT const union __ldmath __infinityld[];

#define HUGE_VAL (__infinity[0].d)
#define HUGE_VALF (__infinityf[0].f)
#define HUGE_VALL (__infinityld[0].ld)
d70 1
a70 1
#endif /* ! defined (HUGE_VAL) */
@


1.18
log
@
2005-02-07  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (isfinite, isnormal, isunordered): Change
        input variable names to avoid mixups with nesting macros.
@
text
@d17 6
d29 6
d39 2
d43 2
@


1.17
log
@
2003-08-13  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Add prototypes for __signbitf and
        __signbitd.
@
text
@d91 6
a96 6
#define isfinite(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           fpclassify(__x) != FP_INFINITE && fpclassify(__x) != FP_NAN;}))
#define isnormal(x) \
          (__extension__ ({__typeof__(x) __x = (x); \
                           fpclassify(__x) == FP_NORMAL;}))
d117 3
a119 3
#define isunordered(x,y) \
          (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); \
                           fpclassify(__x) == FP_NAN || fpclassify(__y) == FP_NAN;}))
@


1.16
log
@* libc/include/math.h (nan, nanf): Update prototype to C99.
* libm/common/s_nan.c (nan): Likewise.
* libm/common/s_nanf.c (nanf, nan): Likewise.
* libc/sys/linux/cmath/math_private.h (nan, nanf): Likewise.
@
text
@d84 2
@


1.15
log
@	* libc/sys/linux/cmath: New directory.
	* libc/sys/linux/include/cmathcalls.h: New file.
	* libc/sys/linux/include/complex.h: New file.
	* libc/sys/linux/machine/i386/huge_val.h: New file
	* libm/math/w_sincos.c: New file
	* libm/math/wf_sincos.c: New file
	* libm/mathfp/s_sincos.c: New file
	* libm/mathfp/sf_sincos.c: New file
	* Makefile.am (LIBC_OBJECTLISTS): Add cmath/objectlist.awk.in.
	* libc/include/math.h: Add sincos and sincosf declarations.
	* libc/sys/linux/Makefile.am (SUBDIRS): Add cmath.
	(SUBLIBS): Likewise.
	* libc/sys/linux/configure.in (AC_OUTPUT): Add cmath.
	* libm/math/Makefile.am (src): Add w_sincos.c.
	(fsrc): Add wf_sincos.c.
	* libm/mathfp/Makefile.am (src): Add s_sincos.c
	(fsrc): Add sf_sincos.c.
@
text
@d122 1
a122 1
extern double nan _PARAMS((void));
d237 1
a237 1
extern float nanf _PARAMS((void));
@


1.14
log
@
2002-07-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (MAXFLOAT): Added.
@
text
@d149 1
d251 1
@


1.13
log
@
2002-06-27  Benjamin Kosnik  <bkoz@@redhat.com>

        * libc/include/stdio.h: Untangle, add _BEGIN_STD_C and _END_STD_C.
        * libc/include/time.h: Same.
        * libc/include/string.h: Same.
        * libc/include/stdlib.h: Same.
        * libc/include/signal.h: Same.
        * libc/include/setjmp.h: Same.
        * libc/include/math.h: Same.
        * libc/include/locale.h: Same.
        * libc/include/ctype.h: Same.
        * libc/include/machine/setjmp.h: Same.
        * libc/include/_ansi.h (_BEGIN_STD_C): Add.
        (_END_STD_C): Add.
@
text
@d316 2
@


1.12
log
@
2002-06-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Remove <sys/types.h>.
        (__dmath): Use __ULong instead of _uint32_t.
        * libc/include/sys/reent.h: If long or int is not 32-bits,
        include <sys/types.h> to get definitions for _int32_t and _uint32_t.
        * libc/stdlib/mprec.h: Include <sys/types.h> to get integer defs.
        * libm/common/fdlibm.h: Ditto.
@
text
@a3 3
#ifdef __cplusplus
extern "C" {
#endif
d10 2
d361 2
a366 3
#ifdef __cplusplus
}
#endif
@


1.11
log
@
2002-06-21  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h: Add <sys/types.h> to get _uint32_t definition.
        * libc/include/machine/types.h: Skip __off_t, __pid_t, and
        __loff_t definitions if special _HAVE_SYSTYPES macro defined.
        * libc/include/sys/config.h: Removed _uint*, _int* definitions.
        * libc/include/sys/param.h: Remove i386 case which is handled
        by default case.
        (BIG_ENDIAN, LITTLE_ENDIAN): Protect
        definitions in case they are already defined.
        (BYTE_ORDER): Add default case using _IEEE_BIG_ENDIAN and
        _IEEE_LITTLE_ENDIAN flags.
        * libc/include/sys/reent.h: Change __uint32_t references to
        use _ULong instead.
        (_REENT_GETDATE_REENT_P): New macro.
        * libc/include/sys/types.h (__int16_t, __uint16_t): Added.
        (__int32_t, __uint32_t, __int64_t, __uint64_t): Ditto.
        * libc/search/hash.h: Add default setting of BYTE_ORDER,
        LITTLE_ENDIAN, and BIG_ENDIAN, if not already defined.
        * libc/sys/linux/sys/types.h: Include <sys/_types.h>.  Define
        ssize_t based on _ssize_t.  Remove __socklen_t, __uintptr_t,
        pid_t, off_t, loff_t, caddr_t, and daddr_t type
        definitions which are done by subsequent glibc headers.
        Add macro definitions to prevent subsequent header files from
        defining pid_t, off_t, ssize_t, and key_t.  Move uintptr_t and
        intptr_t to after glibc definitions of types they are based on.
@
text
@a9 1
#include <sys/types.h>
d20 1
a20 1
  __uint32_t i[2];
@


1.10
log
@	* libm/common/s_fdim.c: New file.
	* libm/common/s_fma.c: Likewise.
	* libm/common/s_fmax.c: Likewise.
	* libm/common/s_fmin.c: Likewise.
	* libm/common/s_fpclassify.c: Likewise.
	* libm/common/s_lrint.c: Likewise.
	* libm/common/s_lround.c: Likewise.
	* libm/common/s_nearbyint.c: Likewise.
	* libm/common/s_remquo.c: Likewise.
	* libm/common/s_round.c: Likewise.
	* libm/common/s_scalbln.c: Likewise.
	* libm/common/s_signbit.c: Likewise.
	* libm/common/s_trunc.c: Likewise.
	* libm/common/sf_fdim.c: Likewise.
	* libm/common/sf_fma.c: Likewise.
	* libm/common/sf_fmax.c: Likewise.
	* libm/common/sf_fmin.c: Likewise.
	* libm/common/sf_lrint.c: Likewise.
	* libm/common/sf_lround.c: Likewise.
	* libm/common/sf_nearbyint.c: Likewise.
	* libm/common/sf_remquo.c: Likewise.
	* libm/common/sf_round.c: Likewise.
	* libm/common/sf_scalbln.c: Likewise.
	* libm/common/sf_trunc.c: Likewise.
	* libm/math/w_exp2.c: Likewise.
	* libm/math/w_tgamma.c: Likewise.
	* libm/math/wf_exp2.c: Likewise.
	* libm/math/wf_tgamma.c: Likewise.
	* libm/mathfp/s_exp2.c: Likewise.
	* libm/mathfp/s_tgamma.c: Likewise.
	* libm/mathfp/sf_exp2.c: Likewise.
	* libm/mathfp/sf_tgamma.c: Likewise.
	* libm/math/er_gamma.c: Fix return value.
	* libm/math/erf_gamma.c: Likewise.
	* libm/mathfp/er_gamma.c: Likewise.
	* libm/mathfp/erf_gamma.c: Likewise.
	* libc/include/math.h (!__STRICT_ANSI__): Include ISOC99-specific
	declarations and macros.
	Regenerated all Makefile.in, aclocal.m4 and configure files to
	use new libtool macros in top-level libtool.m4
@
text
@d10 1
@


1.9
log
@* implement a new `struct _reent' that is significantly smaller.  use this
if _REENT_SMALL is defined in config.h.  define this for xstormy16.
@
text
@d69 51
d136 15
d220 15
@


1.8
log
@	* libc/include/math.h: The C++ standard adds the single-precision
	versions of the elementary functions.
@
text
@d201 1
a201 1
#define __signgam_r(ptr) ((ptr)->_new._reent._gamma_signgam)
@


1.7
log
@
2001-01-29  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (signgam): Change to errno-like solution
        using a function to return the address of the real signgam.
        * libc/reent/signgam.c: New file containing __signgam().
        * libc/reent/Makefile.am: Added signgam.c to list of files.
        * libc/reent/Makefile.in: Regenerated.
@
text
@d117 4
d148 4
@


1.6
log
@
2001-01-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (signgam): Regress previous fix as
        it does not handle programs with extern int signgam in them.
@
text
@d188 4
d193 1
a193 1
extern __IMPORT int signgam;
@


1.5
log
@
2001-01-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (signgam): Changed to a macro refering to
        its location in the reentrant structure.
@
text
@d189 1
a189 1
#define signgam (_impure_ptr->_new._reent._gamma_signgam)
@


1.4
log
@* libc/include/sys/config.h: define __IMPORT appropriately
* libc/include/ctype.h (_ctype_): use __IMPORT
* libc/include/math.h (__infinity, signam, _LIB_VERSION): ditto
* libc/include/math.h (__mb_cur_max): ditto
* libc/include/time.h (_timezone, _daylight, _tzname): ditto
* libc/include/unctrl.h (__unctrl, __unctrllen): ditto
* libc/include/errno.h (_sys_errlist, _sys_nerr): ditto
* libc/include/unistd.h (environ): ditto
@
text
@d189 1
a189 1
extern __IMPORT int signgam;
@


1.3
log
@Declare __infinity as an array to work around problems with small data support
@
text
@d26 2
a27 13
   method for accessing globals.

   Also under Cygwin, the library exports a pointer to the real value, so we
   need to properly dereference it.  */
#ifndef __INFINITY_DECL__
#if !defined(__CYGWIN__) || defined(__INSIDE_CYGWIN__) || defined(_COMPILING_NEWLIB)
#define __INFINITY_DECL__
#else
#define __INFINITY_DECL__ __declspec(dllimport)
#endif
#endif

extern __INFINITY_DECL__ const union __dmath __infinity[];
d189 1
a189 1
extern int signgam;
d260 1
a260 1
extern _CONST _LIB_VERSION_TYPE _LIB_VERSION;
@


1.2
log
@* libc/include/math.h: Use appropriate dll import linkage for Cygwin.
@
text
@d24 7
d32 1
a32 1
extern const union __dmath __infinity;
d34 2
a35 1
extern __declspec(dllimport) const union __dmath __infinity;
d38 3
a40 1
#define HUGE_VAL (__infinity.d)
@


1.1
log
@Initial revision
@
text
@d24 1
d26 3
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
