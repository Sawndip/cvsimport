head	1.5;
access;
symbols
	cygwin-1_7_35-release:1.5
	cygwin-1_7_34-release:1.5
	newlib-2_2_0:1.5.0.2
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.1
	cygwin-1_7_21-release:1.1
	cygwin-1_7_20-release:1.1
	cygwin-1_7_19-release:1.1
	cygwin-64bit-postmerge:1.1
	cygwin-64bit-premerge-branch:1.1.0.4
	cygwin-64bit-premerge:1.1
	cygwin-1_7_18-release:1.1
	newlib-2_0_0:1.1
	cygwin-1_7_17-release:1.1
	cygwin-64bit-branch:1.1.0.2
	cygwin-1_7_16-release:1.1
	cygwin-1_7_15-release:1.1
	cygwin-1_7_14_2-release:1.1
	cygwin-1_7_14-release:1.1
	cygwin-1_7_12-release:1.1
	cygwin-1_7_11-release:1.1
	cygwin-1_7_10-release:1.1
	newlib-1_20_0:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.12.15.18.22.56;	author yselkowitz;	state Exp;
branches;
next	1.4;

1.4
date	2014.12.11.16.53.32;	author yselkowitz;	state Exp;
branches;
next	1.3;

1.3
date	2014.12.10.09.39.06;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2013.08.02.07.52.09;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.19.07.21.42;	author yselkowitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* libc/include/stdio.h (__SNLK): Define.
* libc/include/stdio_ext.h (FSETLOCKING_QUERY, FSETLOCKING_INTERNAL,
FSETLOCKING_BYCALLER): Define.
(__fsetlocking): Declare.
* libc/stdio/Makefile.am: Build fsetlocking.c.
* libc/stdio/Makefile.in: Regenerate.
* libc/stdio/fsetlocking.c: New file.
* libc/stdio/local.h (_newlib_flockfile_start): Make _flockfile
call dependent on __SNLK flag.
(_newlib_flockfile_exit, _newlib_flockfile_end): Ditto for
_funlockfile calls.
Define all locking macros as empty if __SINGLE_THREAD__.
* libc/stdio/stdio.tex: Include fsetlocking.def.
@
text
@/*
 * stdio_ext.h
 *
 * Definitions for I/O internal operations, originally from Solaris.
 */

#ifndef _STDIO_EXT_H_
#define _STDIO_EXT_H_

#ifdef __rtems__
#error "<stdio_ext.h> not supported"
#endif

#include <stdio.h>

#define	FSETLOCKING_QUERY	0
#define	FSETLOCKING_INTERNAL	1
#define	FSETLOCKING_BYCALLER	2

_BEGIN_STD_C

void	 _EXFUN(__fpurge,(FILE *));
int	 _EXFUN(__fsetlocking,(FILE *, int));

/* TODO:

   void _flushlbf (void);
*/

#ifdef  __GNUC__

_ELIDABLE_INLINE size_t
__fbufsize (FILE *__fp) { return (size_t) __fp->_bf._size; }

_ELIDABLE_INLINE int
__freading (FILE *__fp) { return (__fp->_flags & __SRD) != 0; }

_ELIDABLE_INLINE int
__fwriting (FILE *__fp) { return (__fp->_flags & __SWR) != 0; }

_ELIDABLE_INLINE int
__freadable (FILE *__fp) { return (__fp->_flags & (__SRD | __SRW)) != 0; }

_ELIDABLE_INLINE int
__fwritable (FILE *__fp) { return (__fp->_flags & (__SWR | __SRW)) != 0; }

_ELIDABLE_INLINE int
__flbf (FILE *__fp) { return (__fp->_flags & __SLBF) != 0; }

_ELIDABLE_INLINE size_t
__fpending (FILE *__fp) { return __fp->_p - __fp->_bf._base; }

#else

size_t	 _EXFUN(__fbufsize,(FILE *));
int	 _EXFUN(__freading,(FILE *));
int	 _EXFUN(__fwriting,(FILE *));
int	 _EXFUN(__freadable,(FILE *));
int	 _EXFUN(__fwritable,(FILE *));
int	 _EXFUN(__flbf,(FILE *));
size_t	 _EXFUN(__fpending,(FILE *));

#ifndef __cplusplus

#define __fbufsize(__fp) ((size_t) (__fp)->_bf._size)
#define __freading(__fp) (((__fp)->_flags & __SRD) != 0)
#define __fwriting(__fp) (((__fp)->_flags & __SWR) != 0)
#define __freadable(__fp) (((__fp)->_flags & (__SRD | __SRW)) != 0)
#define __fwritable(__fp) (((__fp)->_flags & (__SWR | __SRW)) != 0)
#define __flbf(__fp) (((__fp)->_flags & __SLBF) != 0)
#define __fpending(__fp) ((size_t) ((__fp)->_p - (__fp)->_bf._base))

#endif /* __cplusplus */

#endif /* __GNUC__ */

_END_STD_C

#endif /* _STDIO_EXT_H_ */
@


1.4
log
@* libc/include/stdio_ext.h: Rename __fwriteable to __fwritable.
[!__GNUC__]: Declare real functions for the macros, and make
the macros conditional on !__cplusplus.
* libc/stdio/Makefile.am (ELIX_4_SOURCES): Add stdio_ext.c.
(CHEWOUT_FILES): Add stdio_ext.def.
* libc/stdio/Makefile.in: Regenerate.
* libc/stdio/stdio.tex: Include stdio_ext.def.
* libc/stdio/stdio_ext.c: New file.
@
text
@d16 4
d23 1
a27 1
   int __fsetlocking (FILE *__fp, int __type);
@


1.3
log
@	* libc/include/stdio_ext.h: Remove excess "inline".
@
text
@d41 1
a41 1
__fwriteable (FILE *__fp) { return (__fp->_flags & (__SWR | __SRW)) != 0; }
d51 10
d65 1
a65 1
#define __fwriteable(__fp) (((__fp)->_flags & (__SWR | __SRW)) != 0)
d69 2
@


1.2
log
@	* libc/include/stdio_ext.h (__fbufsize): Define as inline function for
	gcc, as macro otherwise.
	(__freading): Ditto.
	(__fwriting): Ditto.
	(__freadable): Ditto.
	(__fwriteable): Ditto.
	(__flbf): Ditto.
	(__fpending): Ditto.
@
text
@d28 1
a28 1
_ELIDABLE_INLINE inline size_t
d31 1
a31 1
_ELIDABLE_INLINE inline int
d34 1
a34 1
_ELIDABLE_INLINE inline int
d37 1
a37 1
_ELIDABLE_INLINE inline int
d40 1
a40 1
_ELIDABLE_INLINE inline int
d43 1
a43 1
_ELIDABLE_INLINE inline int
d46 1
a46 1
_ELIDABLE_INLINE inline size_t
@


1.1
log
@* libc/include/stdio_ext.h: New header.
* libc/stdio/fpurge.c [!__rtems__] (__fpurge): New function.
@
text
@d20 41
@

