head	1.6;
access;
symbols
	cygwin-1_7_35-release:1.6
	cygwin-1_7_34-release:1.6
	newlib-2_2_0:1.6.0.2
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.5
	cygwin-1_7_31-release:1.5
	cygwin-1_7_30-release:1.5
	cygwin-1_7_29-release:1.5
	cygwin-1_7_28-release:1.5
	newlib-2_1_0:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.6
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.4
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	newlib-1_19_0:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.2
	binutils-arc-20080908-branch:1.3.0.8
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.4
	newlib-1_16_0:1.3
	newlib-1_15_0:1.3
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	cr-0x5f1:1.3.0.6
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.2
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2014.10.16.15.00.59;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.18.08.30.29;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.18.21.47.44;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.03.20.47.50;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.24.22.32.38;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.51;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.51;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* libc/unix/getcwd.c (getcwd): Close directory also in case of an error.
@
text
@#ifndef _NO_GETCWD
/*
 * Copyright (c) 1989, 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)getcwd.c	5.11 (Berkeley) 2/24/91";
#endif /* LIBC_SCCS and not lint */

#include <sys/param.h>
#include <sys/stat.h>
#include <errno.h>
#include <dirent.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <reent.h>
#include <_syslist.h>

#define bcopy(a,b,c)	memmove (b,a,c)

#define	ISDOT(dp) \
	(dp->d_name[0] == '.' && (dp->d_name[1] == '\0' || \
           (dp->d_name[1] == '.' && dp->d_name[2] == '\0')))

#ifndef _REENT_ONLY

char *
getcwd (pt, size)
     char *pt;
     size_t size;
{
  register struct dirent *dp;
  register DIR *dir = NULL;
  register dev_t dev;
  register ino_t ino;
  register int first;
  register char *bpt, *bup;
  struct stat s;
  dev_t root_dev;
  ino_t root_ino;
  size_t ptsize, upsize;
  int save_errno;
  char *ept, *eup, *up;

  /*
   * If no buffer specified by the user, allocate one as necessary.
   * If a buffer is specified, the size has to be non-zero.  The path
   * is built from the end of the buffer backwards.
   */

  if (pt)
    {
      ptsize = 0;
      if (!size)
	{
	  errno = EINVAL;
	  return (char *) NULL;
	}
      ept = pt + size;
    }
  else
    {
      if (!(pt = (char *) malloc (ptsize = 1024 - 4)))
	{
	  return (char *) NULL;
	}
      ept = pt + ptsize;
    }
  bpt = ept - 1;
  *bpt = '\0';

  /*
   * Allocate bytes (1024 - malloc space) for the string of "../"'s.
   * Should always be enough (it's 340 levels).  If it's not, allocate
   * as necessary.  Special * case the first stat, it's ".", not "..".
   */

  if (!(up = (char *) malloc (upsize = 1024 - 4)))
    {
      goto err;
    }
  eup = up + MAXPATHLEN;
  bup = up;
  up[0] = '.';
  up[1] = '\0';

  /* Save root values, so know when to stop. */
  if (stat ("/", &s))
    goto err;
  root_dev = s.st_dev;
  root_ino = s.st_ino;

  errno = 0;			/* XXX readdir has no error return. */

  for (first = 1;; first = 0)
    {
      /* Stat the current level. */
      if (stat (up, &s))
	goto err;

      /* Save current node values. */
      ino = s.st_ino;
      dev = s.st_dev;

      /* Check for reaching root. */
      if (root_dev == dev && root_ino == ino)
	{
	  *--bpt = '/';
	  /*
	   * It's unclear that it's a requirement to copy the
	   * path to the beginning of the buffer, but it's always
	   * been that way and stuff would probably break.
	   */
	  (void) bcopy (bpt, pt, ept - bpt);
	  free (up);
	  return pt;
	}

      /*
       * Build pointer to the parent directory, allocating memory
       * as necessary.  Max length is 3 for "../", the largest
       * possible component name, plus a trailing NULL.
       */

      if (bup + 3 + MAXNAMLEN + 1 >= eup)
	{
	  if (!(up = (char *) realloc (up, upsize *= 2)))
	    {
	      goto err;
	    }
	  bup = up;
	  eup = up + upsize;
	}
      *bup++ = '.';
      *bup++ = '.';
      *bup = '\0';

      /* Open and stat parent directory. */
      if (!(dir = opendir (up)) || fstat (__dirfd (dir), &s))
	goto err;

      /* Add trailing slash for next directory. */
      *bup++ = '/';

      /*
       * If it's a mount point, have to stat each element because
       * the inode number in the directory is for the entry in the
       * parent directory, not the inode number of the mounted file.
       */

      save_errno = 0;
      if (s.st_dev == dev)
	{
	  for (;;)
	    {
	      if (!(dp = readdir (dir)))
		goto notfound;
	      if (dp->d_ino == ino)
		break;
	    }
	}
      else
	for (;;)
	  {
	    if (!(dp = readdir (dir)))
	      goto notfound;
	    if (ISDOT (dp))
	      continue;
	    bcopy (dp->d_name, bup, strlen (dp->d_name) + 1);

	    /* Save the first error for later. */
	    if (stat (up, &s))
	      {
		if (!save_errno)
		  save_errno = errno;
		errno = 0;
		continue;
	      }
	    if (s.st_dev == dev && s.st_ino == ino)
	      break;
	  }

      /*
       * Check for length of the current name, preceding slash,
       * leading slash.
       */

      if (bpt - pt <= strlen (dp->d_name) + (first ? 1 : 2))
	{
	  size_t len, off;

	  if (!ptsize)
	    {
	      errno = ERANGE;
	      goto err;
	    }
	  off = bpt - pt;
	  len = ept - bpt;
	  if (!(pt = (char *) realloc (pt, ptsize *= 2)))
	    {
	      goto err;
	    }
	  bpt = pt + off;
	  ept = pt + ptsize;
	  (void) bcopy (bpt, ept - len, len);
	  bpt = ept - len;
	}
      if (!first)
	*--bpt = '/';
      bpt -= strlen (dp->d_name);
      bcopy (dp->d_name, bpt, strlen (dp->d_name));
      (void) closedir (dir);
      dir = NULL;

      /* Truncate any file name. */
      *bup = '\0';
    }

notfound:
  /*
   * If readdir set errno, use it, not any saved error; otherwise,
   * didn't find the current directory in its parent directory, set
   * errno to ENOENT.
   */

  if (!errno)
    errno = save_errno ? save_errno : ENOENT;
  /* FALLTHROUGH */

err:
  if (ptsize)
    free (pt);
  if (dir)
    (void) closedir (dir);
  free (up);
  return (char *) NULL;
}

#endif /* _REENT_ONLY */
#endif /* !_NO_GETCWD  */
@


1.5
log
@	* libc/include/sys/unistd.h (MAXPATHLEN): Delete.
	* libc/include/sys/param.h (MAXPATHLEN): Define.
	* libc/sys/rtems/sys/param.h (MAXPATHLEN): Likewise.
	* libc/unix/getcwd.c: Include <sys/param.h> for MAXPATHLEN.
@
text
@d60 1
a60 1
  register DIR *dir;
d240 1
d260 2
@


1.4
log
@
2008-11-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/unix/basename.c: Add !_NO_BASENAME flag check so code can be
        ignored if desired by a platform.
        * libc/unix/dirname.c: Ditto except replace BASENAME with file name.
        * libc/unix/getcwd.c: Ditto.
        * libc/unix/getlogin.c: Ditto.
        * libc/unix/getpass.c: Ditto.
        * libc/unix/getpwent.c: Ditto.
        * libc/unix/getut.c: Ditto.
        * libc/unix/pread.c: Ditto.
        * libc/unix/pwrite.c: Ditto.
        * libc/unix/sigset.c: Ditto.
@
text
@d35 1
@


1.3
log
@
2005-11-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/unix/getcwd.c: Don't use non-reentrant syscall names.
        * libc/unix/getlogin.c: Ditto.
        * libc/unix/getpass.c: Ditto.
        * libc/unix/getut.c: Ditto.
        * libc/unix/ttyname.c: Ditto.
@
text
@d1 1
a13 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d263 1
@


1.2
log
@
2000-08-23  Werner Almesberger  <Werner.Almesberger@@epfl.ch>

        * libc/stdlib/mprec.c (ulp, b2d, d2b): changed a few expressions
        like  x << y-z  to the equivalent  x << (y-z).
        (d2b): changed if statements with assignment to perform the
        assignment prior to the if check.
        * libc/reent/reent.c: included stdlib.h for "_free_r" prototype.
        * libc/unix/getpass.c (getpass): moved "echo" assignment out of if.
        * libc/unix/ttyname.c: included string.h for "strcpy" prototype.
        * libc/unix/getcwd.c (ISDOT): added parentheses to clarify && and ||
        precedence.
        * libc/include/sys/unistd.h: added "vfork" prototype (for popen.c).
        Added "_execve" prototype (for execl.c, execle.c, execv.c, and
        execve.c).
        * libc/posix/popen.c (popen): added parentheses to clarify && and ||
        precedence.
        * libm/math/e_cosh.c (__ieee754_cosh): changed parentheses to
        clarify && and || precendence (and to remove pascalism).
        * libm/math/e_sinh.c (__ieee754_sinh): Ditto.
        * libm/math/s_infconst.c: added another pair of braces to all
        initializers for __infinity (need three: for __infinity[1] array,
        for union __dmath, and for i[2]).
@
text
@d127 1
a127 1
      if (_stat (up, &s))
d168 1
a168 1
      if (!(dir = _opendir (up)) || _fstat (__dirfd (dir), &s))
d185 1
a185 1
	      if (!(dp = _readdir (dir)))
d194 1
a194 1
	    if (!(dp = _readdir (dir)))
d241 1
a241 1
      (void) _closedir (dir);
@


1.1
log
@Initial revision
@
text
@d52 1
a52 1
	    dp->d_name[1] == '.' && dp->d_name[2] == '\0'))
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
