head	1.2;
access;
symbols
	cygnus_cvs_20020108_pre:1.1.1.1
	newlib-1_10_0:1.1.1.1
	cygwin-1-3-6-4:1.1.1.1.0.2
	newlib-1_9_0:1.1.1.1
	cygwin-1_1_1:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2002.12.20.02.29.00;	author jjohnstn;	state dead;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.49;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.49;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2002-12-19  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.host: Remove references to go32.
        * libc/sys/go32/*: Removed.
@
text
@/*
  (c) Copyright 1992 Eric Backus

  This software may be used freely so long as this copyright notice is
  left intact.  There is no warrantee on this software.
*/

#include <time.h>
#include <sys/time.h>
#include "dos.h"

static int daylight, gmtoffset;

int
gettimeofday (struct timeval *tp, struct timezone *tzp)
{

  if (tp)
  {
    struct time t;
    struct date d;
    struct tm tmrec;

    gettime (&t);
    getdate (&d);
    tmrec.tm_year = d.da_year - 1900;
    tmrec.tm_mon = d.da_mon - 1;
    tmrec.tm_mday = d.da_day;
    tmrec.tm_hour = t.ti_hour;
    tmrec.tm_min = t.ti_min;
    tmrec.tm_sec = t.ti_sec;
/*    tmrec.tm_gmtoff = gmtoffset;*/
    tmrec.tm_isdst = daylight;
    tp->tv_sec = mktime (&tmrec);
    tp->tv_usec = t.ti_hund * (1000000 / 100);
  }
  if (tzp)
  {
    tzp->tz_minuteswest = gmtoffset;
    tzp->tz_dsttime = daylight;
  }

  return 0;
}

void
__gettimeofday_init ()
{
  time_t ltm, gtm;
  struct tm *lstm;

  daylight = 0;
  gmtoffset = 0;
  ltm = gtm = time (NULL);
  ltm = mktime (lstm = localtime (&ltm));
  gtm = mktime (gmtime (&gtm));
  daylight = lstm->tm_isdst;
  gmtoffset = (int)(gtm - ltm) / 60;

}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
