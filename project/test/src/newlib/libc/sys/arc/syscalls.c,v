head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.16
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.14
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	newlib-2_0_0:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.12
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	newlib-1_20_0:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	newlib-1_18_0:1.2
	cygwin-1_7_1-release:1.2
	newlib-1_17_0-arc:1.2.0.10
	binutils-arc-20080908-branch:1.2.0.8
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	cr-0x5f1:1.2.0.6
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2005.03.22.23.45.43;	author jjohnstn;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	2001.01.19.01.25.13;	author jjohnstn;	state Exp;
branches;
next	;

1.2.10.1
date	2009.09.10.01.29.09;	author amylaar;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2005-03-22  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.host: For arc, set -DREENTRANT_SYSCALLS_PROVIDED flag on.
        * libc/sys/arc/syscalls.c: Change functions to use __errno_r rather
        than errno.
@
text
@#include <sys/types.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <_ansi.h>
#include <errno.h>
#include <fcntl.h>
#include <stdarg.h>
#include <reent.h>

_ssize_t
_read_r (struct _reent *r, int fd, void *buf, size_t nbytes)
{
  int err;
  _ssize_t rc;

  SYSCALL (SYS_read, rc, err, fd, buf, nbytes);
  if (err)
    __errno_r (r) = err;
  return rc;
}

_ssize_t
_write_r (struct _reent *r, int fd, const void *buf, size_t nbytes)
{
  int err;
  _ssize_t rc;

  SYSCALL (SYS_write, rc, err, fd, buf, nbytes);
  if (err)
    __errno_r (r) = err;
  return rc;
}

/* FIXME: The prototype in <fcntl.h> for open() uses ...,
   but reent.h uses int.  */

int
_open_r (struct _reent *r, const char *buf, int flags, int mode)
{
  int rc,err;
#if 0
  int mode;
  va_list ap;

  va_start (ap, flags);
  mode = va_arg (ap, int);
  va_end (ap);
#endif

  SYSCALL (SYS_open, rc, err, buf, flags, mode);
  if (err)
    __errno_r (r) = err;
  return rc;
}

int
_close_r (struct _reent *r, int fd)
{
  int rc,err;

  SYSCALL (SYS_close, rc, err, fd, 0, 0);
  if (err)
    __errno_r (r) = err;
  return rc;
}

off_t
_lseek_r (struct _reent *r, int fd,  off_t offset, int whence)
{
  int err;
  off_t rc;

  SYSCALL (SYS_lseek, rc, err, fd, offset, whence);
  if (err)
    __errno_r (r) = err;
  return rc;
}

int
_fstat_r (struct _reent *r, int fd, struct stat *buf)
{
  int rc,err;

  SYSCALL (SYS_fstat, rc, err, fd, buf, 0);
  if (err)
    __errno_r (r) = err;
  return rc;
}

/* FIXME: Shouldn't this be _exit_r?  */

void
_exit (int ret)
{
  int rc,err;

  SYSCALL (SYS_exit, rc, err, ret, 0, 0);

  /* If that failed, use an infinite loop.  */
  while (1)
    continue;
}

time_t
_time (time_t *timer)
{
  return 0;
}

int
_creat_r (struct _reent *r, const char *path, int mode)
{
  return _open_r (r, path, O_CREAT | O_TRUNC, mode);
}

int
_getpid_r (struct _reent *r)
{
  return 42;
}

int
_kill_r (struct _reent *r, int pid, int sig)
{
  int rc,err;

  SYSCALL (SYS_kill, rc, err, pid, sig, 0);
  if (err)
    __errno_r (r) = err;
  return rc;
}
@


1.2.10.1
log
@Support for ARCompact architecture.
@
text
@d10 11
a20 1
_syscall3 (_ssize_t,read, int,fd, void *,buf, size_t,nbytes)
d22 11
a32 1
_syscall3 (_ssize_t,write, int,fd, const void *,buf, size_t,nbytes)
d37 4
a40 1
_syscall3 (int,open, const char *,buf, int,flags, int,mode)
a41 1
  /* Could put this into a variant of _syscall3:  */
d50 16
a65 1
_syscall1 (int,close, int,fd)
d67 5
a71 1
_syscall3 (off_t,lseek, int,fd, off_t,offset, int,whence)
d73 5
a77 1
_syscall2 (int,fstat, int,file, struct stat *,st)
d79 10
a88 1
_syscall2 (int,gettimeofday, struct timeval *,tv, void *,tz)
d90 13
a102 1
_syscall1 (void,exit, int,ret)
d125 6
a130 1
  _exit_r (r, 0xdead00 | (sig & 0xff));
@


1.1
log
@
2001-01-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/arc/Makefile.am: New file.
        * libc/sys/arc/Makefile.in: Ditto.
        * libc/sys/arc/aclocal.m4: Ditto.
        * libc/sys/arc/configure: Ditto.
        * libc/sys/arc/configure.in: Ditto.
        * libc/sys/arc/crt0.S: Ditto.
        * libc/sys/arc/isatty.c: Ditto.
        * libc/sys/arc/mem-layout.c: Ditto.
        * libc/sys/arc/sbrk.c: Ditto.
        * libc/sys/arc/syscalls.c: Ditto.
        * libc/sys/arc/sys/syscall.h: Ditto.
@
text
@d18 1
a18 1
    errno = err;
d30 1
a30 1
    errno = err;
d51 2
a52 1
  errno = err;
d63 1
a63 1
    errno = err;
d75 1
a75 1
    errno = err;
d86 1
a86 1
    errno = err;
d129 1
a129 1
    errno = err;
@

