head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	newlib-2_2_0:1.12.0.2
	cygwin-1_7_33-release:1.12
	cygwin-1_7_32-release:1.12
	cygwin-1_7_31-release:1.12
	cygwin-1_7_30-release:1.12
	cygwin-1_7_29-release:1.12
	cygwin-1_7_28-release:1.12
	newlib-2_1_0:1.12
	cygwin-1_7_27-release:1.11
	cygwin-1_7_26-release:1.11
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.4
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.5
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	cygwin-1_7_11-release:1.5
	cygwin-1_7_10-release:1.5
	newlib-1_20_0:1.5
	cygwin-1_7_9-release:1.5
	cygwin-1_7_8-release:1.5
	newlib-1_19_0:1.5
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	newlib-1_18_0:1.3;
locks; strict;
comment	@ * @;


1.12
date	2013.12.03.16.04.41;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.15.17.39.19;	author joel;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.15.17.37.37;	author joel;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.15.17.36.16;	author joel;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.18.15.22.45;	author corsepiu;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.13.09.21.45;	author corsepiu;	state Exp;
branches;
next	1.6;

1.6
date	2012.05.10.06.59.58;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.16.17.29.39;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.30.07.40.26;	author green;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.17.16.10.41;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.32.16;	author jjohnstn;	state dead;
branches;
next	1.1;

1.1
date	2005.02.24.18.29.31;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* libc/include/machine/_default_types.h: Move extern "C" after
	header includes.  Include <sys/features.h> for
	__GNUC_PREREQ__().
	(__u?int.*_t): Define via GCC provided __U?INT.*_TYPE__ if
	available.
	(__intptr_t): Define.
	(__uintptr_t): Likewise.
	* libc/include/stdint.h: Include <machine/_default_types.h>
	instead of <_ansi.h>.
	(u?int.*_t): Define via __u?int.*_t provided by
	<machine/_default_types.h>.
	(u?int_fast.*_t): Define via GCC provided
	__U?INT_FAST.*_TYPE__ if available.
	(U?INT.*(MIN|MAX)): Define via GCC provided __U?INT.*(MIN|MAX)__
	if available.
	(U?INT.*_C): Define via GCC provided __U?INT.*_C if available.
	* libc/include/sys/cdefs.h: Use <machine/_default_types.h>
	instead of <stdint.h>.
	* libc/sys/rtems/sys/cpuset.h: Likewise.
	* libc/sys/rtems/machine/_types.h: Include <stdint.h> for
	FreeBSD compatibility.
@
text
@/*
 *  $Id: _types.h,v 1.11 2013/10/15 17:39:19 joel Exp $
 */

#ifndef _MACHINE__TYPES_H
#define _MACHINE__TYPES_H

/* This disables some conflicting type definitions in <machine/types.h> */
#define _HAVE_SYSTYPES

#include <machine/_default_types.h>
#include <stdint.h> /* For FreeBSD compatibility */

typedef __int32_t blksize_t;
typedef __int32_t blkcnt_t;

typedef __uint64_t __dev_t;
#define __dev_t_defined 1

#if defined(__arm__) || defined(__i386__) || defined(__m68k__) || defined(__mips__) || defined(__PPC__) || defined(__sparc__)
/* Use 64bit types */
typedef __int64_t _off_t;
#define __off_t_defined 1

typedef __int64_t _fpos_t;
#define __fpos_t_defined 1
#else
/* Use 32bit types */
typedef __int32_t _off_t;
#define __off_t_defined 1

typedef __int32_t _fpos_t;
#define __fpos_t_defined 1
#endif

typedef __uint32_t _mode_t;
#define __mode_t_defined 1

#endif
@


1.11
log
@2013-10-10  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/sys/rtems/machine/_types.h (_HAVE_SYSTYPES): Define.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.10 2013/10/15 17:37:37 joel Exp $
d12 1
@


1.10
log
@2013-10-10  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/sys/rtems/machine/_types.h (__dev_t): Define.
	(__dev_t_defined) Likewise.
	* libc/include/sys/_types.h (__dev_t): Delete RTEMS specific
	definition.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.9 2013/10/15 17:36:16 joel Exp $
d8 3
@


1.9
log
@2013-10-10  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/sys/rtems/machine/_types.h (_ssize_t): Delete.
	(__ssize_t_defined) Likewise.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.8 2012/07/18 15:22:45 corsepiu Exp $
d13 3
@


1.8
log
@2012-07-18  Ralf Corsépius  <ralf.corsepius@@rtems.org>

	* libc/sys/rtems/machine/_types.h (_ssize_t): Use signed int for
	__v850__, __851__.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.7 2012/07/13 09:21:45 corsepiu Exp $
a7 26
/*
 * GCC wants type symmetry between size_t and ssize_t.
 * It supplies __SIZE_TYPE__, doesn't supply a corresponding __SSIZE_TYPE__,
 * so we have to guess on which type GCC wants ssize_t to be.
 * FIXME: GCC > 4.3.x supplies internal defines __SIZEOF_SIZE_T__ etc. which
 * could be applied here.
 */

#if defined(__i386__) || defined(__m32r__) || defined(__h8300__) || (defined(__arm__) && !defined(__ARM_EABI__)) || defined(__bfin__) || defined(__m68k__) || defined(__MICROBLAZE__)
#if defined(__H8300__)
typedef signed int _ssize_t;
#else
typedef long signed int _ssize_t;
#endif
#define __ssize_t_defined 1
#elif defined(__sparc__) && defined(__LP64__)
typedef long signed int _ssize_t;
#define __ssize_t_defined 1
#elif defined(__AVR__) || defined(__lm32__) || defined(__m32c__) || defined(__mips__) || defined(__moxie__) || defined(__PPC__) || defined(__sparc__) || defined(__sh__) || defined(__ARM_EABI__) \
  || defined(__v850__) || defined(__v851__)
typedef signed int _ssize_t;
#define __ssize_t_defined 1
#else
# error unsupported target
#endif

@


1.7
log
@2012-07-13  Ralf Corsépius  <ralf.corsepius@@rtems.org>

	* libc/sys/rtems/machine/_types.h (_ssize_t): Add __ARM_EABI__,
	__v850__, __851__.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.6 2012/05/10 06:59:58 corinna Exp $
d16 1
a16 2
#if defined(__i386__) || defined(__m32r__) || defined(__h8300__) || (defined(__arm__) && !defined(__ARM_EABI__)) || defined(__bfin__) || defined(__m68k__) || defined(__MICROBLAZE__) \
  || defined(__v850__) || defined(__v851__)
d26 2
a27 1
#elif defined(__AVR__) || defined(__lm32__) || defined(__m32c__) || defined(__mips__) || defined(__moxie__) || defined(__PPC__) || defined(__sparc__) || defined(__sh__) || defined(__ARM_EABI__)
@


1.6
log
@	* libc/sys/rtems/machine/_types.h: Add Microblaze.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.5 2010/11/16 17:29:39 corinna Exp $
d16 2
a17 1
#if defined(__i386__) || defined(__m32r__) || defined(__h8300__) || defined(__arm__) || defined(__bfin__) || defined(__m68k__) || defined(__MICROBLAZE__)
d27 1
a27 1
#elif defined(__AVR__) || defined(__lm32__) || defined(__m32c__) || defined(__mips__) || defined(__moxie__) || defined(__PPC__) || defined(__sparc__) || defined(__sh__)
@


1.5
log
@	* libc/include/sys/types.h: Add _mode_t for __rtems__.
	* libc/sys/rtems/machine/_types.h: Provide _mode_t, _fpos_t, _off_t.
	Add _ssize_t for 64bit sparc.
	Let arm, i386, m68k, mips, PPC, sparc use 64bit _off_t, _fpos_t.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.4 2010/07/30 07:40:26 green Exp $
d16 1
a16 1
#if defined(__i386__) || defined(__m32r__) || defined(__h8300__) || defined(__arm__) || defined(__bfin__) || defined(__m68k__)
@


1.4
log
@Add moxie-rtems support.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.3 2009/12/17 16:10:41 jjohnstn Exp $
d23 3
d37 20
@


1.3
log
@
2009-12-16  Ralf CorsÃ©pius <ralf.corsepius@@rtems.org>

        * libc/sys/rtems/machine/_types.h: New (Derived from
        machine/_default_types.h).
        * libc/sys/rtems/crt0.c: Rework. Introduce macro RTEMS_STUB.
        * libc/sys/rtems/sys/param.h:
        Update copyright notice from FreeBSD.
        Remove HZ.
        Add #include <sys/priority.h>
        Remove priority handling (moved to sys/priority.h).
        Remove CLBYTES (Unused, abandoned in BSD).
        * libc/sys/rtems/sys/queue.h: Update copyright (from FreeBSD).
        Remove CIRCLEQ_*.

2
@
text
@d2 1
a2 1
 *  $Id:$
d23 1
a23 1
#elif defined(__AVR__) || defined(__lm32__) || defined(__m32c__) || defined(__mips__) || defined(__PPC__) || defined(__sparc__) || defined(__sh__)
@


1.2
log
@
2005-03-06  Ralf Corsepious  <ralf.corsepius@@rtems.org>

        * libc/include/machine/_types.h: New file.
        * libc/include/sys/types.h: Do not check for __rtems__
        when including <machine/_types.h>.  Remove some redundant
        declarations now that <machine/_types.h> is included.
        * libc/sys/rtems/machine/_types.h: Removed.  Replaced with
        shared header file.
@
text
@d2 1
a2 1
 *  $Id: _types.h,v 1.1 2005/02/24 18:29:31 jjohnstn Exp $
a7 4
#ifdef __cplusplus
extern "C" {
#endif

d9 5
a13 1
 * Guess on types by examining *_MIN/*_MAX defines.
d15 4
a18 4
#if defined(__GNUC__) && (__GNUC__ >= 3 ) \
  && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ > 2 ) 
/* GCC >= 3.3.0 has __<val>__ implicitly defined. */
#define __EXP(x) __##x##__
d20 1
a20 69
/* Fall back to POSIX versions from <limits.h> */
#define __EXP(x) x
#include <limits.h>
#endif

#if __EXP(SCHAR_MAX) == 0x7f
typedef signed char __int8_t ;
typedef unsigned char __uint8_t ;
#define ___int8_t_defined 1
#endif

#if __EXP(INT_MAX) == 0x7fff
typedef signed int __int16_t;
typedef unsigned int __uint16_t;
#define ___int16_t_defined 1
#elif __EXP(SHRT_MAX) == 0x7fff
typedef signed short __int16_t;
typedef unsigned short __uint16_t;
#define ___int16_t_defined 1
#elif __EXP(SCHAR_MAX) == 0x7fff
typedef signed char __int16_t;
typedef unsigned char __uint16_t;
#define ___int16_t_defined 1
#endif

#if ___int16_t_defined
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
#define ___int_least16_t_defined 1

#if !___int8_t_defined
typedef __int16_t __int_least8_t;
typedef __uint16_t __uint_least8_t;
#define ___int_least8_t_defined 1
#endif
#endif

#if __EXP(INT_MAX) == 0x7fffffffL
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
#define ___int32_t_defined 1
#elif __EXP(LONG_MAX) == 0x7fffffffL
typedef signed long __int32_t;
typedef unsigned long __uint32_t;
#define ___int32_t_defined 1
#elif __EXP(SHRT_MAX) == 0x7fffffffL
typedef signed short __int32_t;
typedef unsigned short __uint32_t;
#define ___int32_t_defined 1
#elif __EXP(SCHAR_MAX) == 0x7fffffffL
typedef signed char __int32_t;
typedef unsigned char __uint32_t;
#define ___int32_t_defined 1
#endif

#if ___int32_t_defined
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
#define ___int_least32_t_defined 1

#if !___int8_t_defined
typedef __int32_t __int_least8_t;
typedef __uint32_t __uint_least8_t;
#define ___int_least8_t_defined 1
#endif
#if !___int16_t_defined
typedef __int32_t __int_least16_t;
typedef __uint32_t __uint_least16_t;
#define ___int_least16_t_defined 1
d22 6
d30 1
a30 4
#if __EXP(LONG_MAX) > 0x7fffffff
typedef signed long __int64_t;
typedef unsigned long __uint64_t;
#define ___int64_t_defined 1
d32 2
a33 22
/* GCC has __LONG_LONG_MAX__ */
#elif  defined(__LONG_LONG_MAX__) && (__LONG_LONG_MAX__ > 0x7fffffff)
typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;
#define ___int64_t_defined 1

/* POSIX mandates LLONG_MAX in <limits.h> */
#elif  defined(LLONG_MAX) && (LLONG_MAX > 0x7fffffff)
typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;
#define ___int64_t_defined 1

#elif  __EXP(INT_MAX) > 0x7fffffff
typedef signed int __int64_t;
typedef unsigned int __uint64_t;
#define ___int64_t_defined 1
#endif

#undef __EXP

#ifdef __cplusplus
}
a34 2

#endif /* _MACHINE__TYPES_H */
@


1.1
log
@
2005-02-24  Ralf Corsepious  <ralf.corsepius@@rtems.org>

        * libc/include/sys/types.h [__rtems__]: Include new
        header file machine/_types.h.
        * libc/include/machine/types.h: Ditto.
        * libc/sys/rtems/machine/_types.h: New file.
@
text
@d2 1
a2 1
 *  $Id$
@

