head	1.1;
access;
symbols
	cygwin-1_7_35-release:1.1
	cygwin-1_7_34-release:1.1
	newlib-2_2_0:1.1.0.16
	cygwin-1_7_33-release:1.1
	cygwin-1_7_32-release:1.1
	cygwin-1_7_31-release:1.1
	cygwin-1_7_30-release:1.1
	cygwin-1_7_29-release:1.1
	cygwin-1_7_28-release:1.1
	newlib-2_1_0:1.1
	cygwin-1_7_27-release:1.1
	cygwin-1_7_26-release:1.1
	cygwin-1_7_25-release:1.1
	cygwin-1_7_24-release:1.1
	cygwin-1_7_23-release:1.1
	cygwin-1_7_22-release:1.1
	cygwin-1_7_21-release:1.1
	cygwin-1_7_20-release:1.1
	cygwin-1_7_19-release:1.1
	cygwin-64bit-postmerge:1.1
	cygwin-64bit-premerge-branch:1.1.0.14
	cygwin-64bit-premerge:1.1
	cygwin-1_7_18-release:1.1
	newlib-2_0_0:1.1
	cygwin-1_7_17-release:1.1
	cygwin-64bit-branch:1.1.0.12
	cygwin-1_7_16-release:1.1
	cygwin-1_7_15-release:1.1
	cygwin-1_7_14_2-release:1.1
	cygwin-1_7_14-release:1.1
	cygwin-1_7_12-release:1.1
	cygwin-1_7_11-release:1.1
	cygwin-1_7_10-release:1.1
	newlib-1_20_0:1.1
	cygwin-1_7_9-release:1.1
	cygwin-1_7_8-release:1.1
	newlib-1_19_0:1.1
	cygwin-1_7_7-release:1.1
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	newlib-1_18_0:1.1
	cygwin-1_7_1-release:1.1
	newlib-1_17_0-arc:1.1.0.10
	binutils-arc-20080908-branch:1.1.0.8
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	cr-0x5f1:1.1.0.6
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.05.30.20.50.59;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2002-05-30  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/linux/Makefile.am: Add support for new files.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/ids.c: Add __getuid weak alias for getuid.
        * libc/sys/linux/signal.c: Change to use real-time syscalls for
        sigsuspend, sigprocmask, and sigpending.  Also remove sigaction as
        it is in a separate file now.
        * libc/sys/linux/machine/i386/Makefile.am
        * libc/sys/linux/machine/i386/Makefile.in
        * libc/sys/linux/sys/signal.h: Add include of <bits/signum.h>.
        * libc/sys/linux/sigaction.c: New file.
        * libc/sys/linux/sigqueue.c: Ditto.
        * libc/sys/linux/sigwait.c: Ditto.
        * libc/sys/linux/machine/i386/sigaction.c: Ditto.
        * libc/sys/linux/kernel_sigaction.h: Ditto.
@
text
@/* Implementation of sigwait function from POSIX.1c.
   Copyright (C) 1996, 1997, 1999, 2000 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   Contributed by Ulrich Drepper <drepper@@cygnus.com>, 1996.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#include <errno.h>
#include <signal.h>
#include <stddef.h>		/* For NULL.  */

#include <machine/weakalias.h>

/* This is our dummy signal handler we use here.  */
static void ignore_signal (int sig);

/* Place where to remember which signal we got.  Please note that this
   implementation cannot be used for the threaded libc.  The
   libpthread must provide an own version.  */
static int was_sig;


int
__sigwait (const sigset_t *set, int *sig)
{
  sigset_t tmp_mask;
  struct sigaction saved[NSIG];
  struct sigaction action;
  int save_errno;
  int this;

  /* Prepare set.  */
  sigfillset (&tmp_mask);

  /* Unblock all signals in the SET and register our nice handler.  */
  action.sa_handler = ignore_signal;
  action.sa_flags = 0;
  sigfillset (&action.sa_mask);	/* Block all signals for handler.  */

  /* Make sure we recognize error conditions by setting WAS_SIG to a
     value which does not describe a legal signal number.  */
  was_sig = -1;

  for (this = 1; this < NSIG; ++this)
    if (sigismember (set, this))
      {
	/* Unblock this signal.  */
	sigdelset (&tmp_mask, this);

	/* Register temporary action handler.  */
	if (__sigaction (this, &action, &saved[this]) != 0)
	  goto restore_handler;
      }

  /* Now we can wait for signals.  */
  __sigsuspend (&tmp_mask);

 restore_handler:
  save_errno = errno;

  while (--this >= 1)
    if (sigismember (set, this))
      /* We ignore errors here since we must restore all handlers.  */
      __sigaction (this, &saved[this], NULL);

  errno = (save_errno);

  /* Store the result and return.  */
  *sig = was_sig;
  return was_sig == -1 ? -1 : 0;
}
weak_alias (__sigwait, sigwait)


static void
ignore_signal (int sig)
{
  /* Remember the signal.  */
  was_sig = sig;
}
@
