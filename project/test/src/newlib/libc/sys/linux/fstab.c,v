head	1.1;
access;
symbols
	cygwin-1_7_35-release:1.1
	cygwin-1_7_34-release:1.1
	newlib-2_2_0:1.1.0.16
	cygwin-1_7_33-release:1.1
	cygwin-1_7_32-release:1.1
	cygwin-1_7_31-release:1.1
	cygwin-1_7_30-release:1.1
	cygwin-1_7_29-release:1.1
	cygwin-1_7_28-release:1.1
	newlib-2_1_0:1.1
	cygwin-1_7_27-release:1.1
	cygwin-1_7_26-release:1.1
	cygwin-1_7_25-release:1.1
	cygwin-1_7_24-release:1.1
	cygwin-1_7_23-release:1.1
	cygwin-1_7_22-release:1.1
	cygwin-1_7_21-release:1.1
	cygwin-1_7_20-release:1.1
	cygwin-1_7_19-release:1.1
	cygwin-64bit-postmerge:1.1
	cygwin-64bit-premerge-branch:1.1.0.14
	cygwin-64bit-premerge:1.1
	cygwin-1_7_18-release:1.1
	newlib-2_0_0:1.1
	cygwin-1_7_17-release:1.1
	cygwin-64bit-branch:1.1.0.12
	cygwin-1_7_16-release:1.1
	cygwin-1_7_15-release:1.1
	cygwin-1_7_14_2-release:1.1
	cygwin-1_7_14-release:1.1
	cygwin-1_7_12-release:1.1
	cygwin-1_7_11-release:1.1
	cygwin-1_7_10-release:1.1
	newlib-1_20_0:1.1
	cygwin-1_7_9-release:1.1
	cygwin-1_7_8-release:1.1
	newlib-1_19_0:1.1
	cygwin-1_7_7-release:1.1
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	newlib-1_18_0:1.1
	cygwin-1_7_1-release:1.1
	newlib-1_17_0-arc:1.1.0.10
	binutils-arc-20080908-branch:1.1.0.8
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	cr-0x5f1:1.1.0.6
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.07.24.20.38.32;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2002-07-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/linux/Makefile.am: Add new files.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/fstab.c: New file.
        * libc/sys/linux/fstatvfs.c: Ditto.
        * libc/sys/linux/fstatvfs64.c: Ditto.
        * libc/sys/linux/internal_statvfs.c: Ditto.
        * libc/sys/linux/mntent.c: Ditto.
        * libc/sys/linux/mntent_r.c: Ditto.
        * libc/sys/linux/statvfs.c: Ditto.
        * libc/sys/linux/statvfs64.c: Ditto.
        * libc/sys/linux/include/paths.h: Ditto.
        * libc/sys/linux/inode.c (statfs, fstatfs): New syscalls
        with double-underscore weak-aliases.
        * libc/sys/linux/sys/stat.h: Add *stat64 prototypes.
@
text
@/* Copyright (C) 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#include <fstab.h>
#include <mntent.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <bits/libc-lock.h>
#include <libc-symbols.h>

#define BUFFER_SIZE 0x1fc0

struct fstab_state
{
  FILE *fs_fp;
  char *fs_buffer;
  struct mntent fs_mntres;
  struct fstab fs_ret;
};

static struct fstab_state *fstab_init (int opt_rewind);
static struct mntent *fstab_fetch (struct fstab_state *state);
static struct fstab *fstab_convert (struct fstab_state *state);

static struct fstab_state fstab_state;


int
setfsent (void)
{
  return fstab_init (1) != NULL;
}


struct fstab *
getfsent (void)
{
  struct fstab_state *state;

  state = fstab_init (0);
  if (state == NULL)
    return NULL;
  if (fstab_fetch (state) == NULL)
    return NULL;
  return fstab_convert (state);
}


struct fstab *
getfsspec (name)
     const char *name;
{
  struct fstab_state *state;
  struct mntent *m;

  state = fstab_init (1);
  if (state == NULL)
    return NULL;
  while ((m = fstab_fetch (state)) != NULL)
    if (strcmp (m->mnt_fsname, name) == 0)
      return fstab_convert (state);
  return NULL;
}


struct fstab *
getfsfile (name)
     const char *name;
{
  struct fstab_state *state;
  struct mntent *m;

  state = fstab_init (1);
  if (state == NULL)
    return NULL;
  while ((m = fstab_fetch (state)) != NULL)
    if (strcmp (m->mnt_dir, name) == 0)
      return fstab_convert (state);
  return NULL;
}


void
endfsent ()
{
  struct fstab_state *state;

  state = &fstab_state;
  if (state->fs_fp != NULL)
    {
      (void) __endmntent (state->fs_fp);
      state->fs_fp = NULL;
    }
}


static struct fstab_state *
fstab_init (int opt_rewind)
{
  struct fstab_state *state;
  char *buffer;
  FILE *fp;

  state = &fstab_state;

  buffer = state->fs_buffer;
  if (buffer == NULL)
    {
      buffer = (char *) malloc (BUFFER_SIZE);
      if (buffer == NULL)
	return NULL;
      state->fs_buffer = buffer;
    }

  fp = state->fs_fp;
  if (fp != NULL)
    {
      if (opt_rewind)
	rewind (fp);
    }
  else
    {
      fp = __setmntent (_PATH_FSTAB, "r");
      if (fp == NULL)
	return NULL;
      state->fs_fp = fp;
    }

  return state;
}


static struct mntent *
fstab_fetch (struct fstab_state *state)
{
  return __getmntent_r (state->fs_fp, &state->fs_mntres,
			state->fs_buffer, BUFFER_SIZE);
}


static struct fstab *
fstab_convert (struct fstab_state *state)
{
  struct mntent *m;
  struct fstab *f;

  m = &state->fs_mntres;
  f = &state->fs_ret;

  f->fs_spec = m->mnt_fsname;
  f->fs_file = m->mnt_dir;
  f->fs_vfstype = m->mnt_type;
  f->fs_mntops = m->mnt_opts;
  f->fs_type = (__hasmntopt (m, FSTAB_RW) ? FSTAB_RW :
		__hasmntopt (m, FSTAB_RQ) ? FSTAB_RQ :
		__hasmntopt (m, FSTAB_RO) ? FSTAB_RO :
		__hasmntopt (m, FSTAB_SW) ? FSTAB_SW :
		__hasmntopt (m, FSTAB_XX) ? FSTAB_XX :
		"??");
  f->fs_freq = m->mnt_freq;
  f->fs_passno = m->mnt_passno;
  return f;
}


/* Make sure the memory is freed if the programs ends while in
   memory-debugging mode and something actually was allocated.  */
static void
__attribute__ ((unused))
fstab_free (void)
{
  char *buffer;

  buffer = fstab_state.fs_buffer;
  if (buffer != NULL)
    free ((void *) buffer);
}

text_set_element (__libc_subfreeres, fstab_free);
@
