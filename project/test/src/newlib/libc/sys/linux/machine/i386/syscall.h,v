head	1.6;
access;
symbols
	cygwin-1_7_35-release:1.6
	cygwin-1_7_34-release:1.6
	newlib-2_2_0:1.6.0.16
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.6
	cygwin-1_7_31-release:1.6
	cygwin-1_7_30-release:1.6
	cygwin-1_7_29-release:1.6
	cygwin-1_7_28-release:1.6
	newlib-2_1_0:1.6
	cygwin-1_7_27-release:1.6
	cygwin-1_7_26-release:1.6
	cygwin-1_7_25-release:1.6
	cygwin-1_7_24-release:1.6
	cygwin-1_7_23-release:1.6
	cygwin-1_7_22-release:1.6
	cygwin-1_7_21-release:1.6
	cygwin-1_7_20-release:1.6
	cygwin-1_7_19-release:1.6
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.6.0.14
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	newlib-2_0_0:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.12
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	newlib-1_20_0:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	newlib-1_19_0:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	newlib-1_18_0:1.6
	cygwin-1_7_1-release:1.6
	newlib-1_17_0-arc:1.6.0.10
	binutils-arc-20080908-branch:1.6.0.8
	binutils-arc-20080908-branchpoint:1.6
	newlib-1_17_0:1.6
	newlib-1_16_0:1.6
	newlib-1_15_0:1.6
	newlib-csl-coldfire-4_1-32:1.6
	newlib-csl-sourcerygxx-4_1-32:1.6
	newlib-csl-innovasic-fido-3_4_4-33:1.6
	newlib-csl-coldfire-4_1-30:1.6
	newlib-csl-sourcerygxx-4_1-30:1.6
	newlib-csl-coldfire-4_1-28:1.6
	newlib-csl-sourcerygxx-4_1-28:1.6
	newlib-csl-arm-2006q3-27:1.6
	newlib-csl-sourcerygxx-4_1-27:1.6
	newlib-csl-arm-2006q3-26:1.6
	newlib-csl-sourcerygxx-4_1-26:1.6
	newlib-csl-sourcerygxx-4_1-24:1.6
	newlib-csl-sourcerygxx-4_1-23:1.6
	newlib-csl-sourcerygxx-4_1-21:1.6
	newlib-csl-arm-2006q3-21:1.6
	newlib-csl-arm-2006q3-19:1.6
	newlib-csl-sourcerygxx-4_1-19:1.6
	newlib-csl-sourcerygxx-4_1-18:1.6
	newlib-csl-sourcerygxx-3_4_4-25:1.6
	newlib-csl-sourcerygxx-4_1-17:1.6
	cr-0x5f1:1.6.0.6
	newlib-csl-sourcerygxx-4_1-14:1.6
	newlib-csl-sourcerygxx-4_1-13:1.6
	newlib-csl-sourcerygxx-4_1-12:1.6
	newlib-csl-sourcerygxx-4_1-9:1.6
	newlib-csl-sourcerygxx-4_1-8:1.6
	newlib-csl-sourcerygxx-4_1-7:1.6
	newlib-csl-arm-2006q1-6:1.6
	newlib-csl-sourcerygxx-4_1-6:1.6
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.6
	newlib-csl-arm-2005-q1a:1.6
	newlib-1_13_0:1.6
	csl-arm-2004-q3:1.6
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4;
locks; strict;
comment	@ * @;


1.6
date	2004.06.14.20.57.07;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.09.20.43.43;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.26.18.56.08;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.17.23.39.38;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.23.21.33.41;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.03.22.46.19;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
2004-06-14  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/linux/machine/i386/syscall.h: For now, set up
        __syscall_return macro for systems with vsyscall.
@
text
@/* libc/sys/linux/machine/i386/syscall.h - x86 linux system calls */

/* Written 2000 by Werner Almesberger */


#ifndef SYSCALL_H

#include <machine/weakalias.h>
#include <sys/errno.h>
#include <asm/unistd.h>
#include <unistd.h>


/*
 * Note: several system calls are for SysV or BSD compatibility, or are
 * specific Linuxisms. Most of those system calls are not implemented in
 * this library.
 */


#if defined(__PIC__) && defined(__i386__)

/*
 * PIC uses %ebx, so we need to save it during system calls
 */

#ifndef __syscall_return

/* FIXME: remove this and switch over to use vsyscall.  */

#define __syscall_return(type, res) \
do { \
  if ((unsigned long)(res) >= (unsigned long)(-125)) { \
    errno = -(res); \
    res = -1; \
  } \
  return (type) (res); \
} while (0)

#endif                                                                                
#undef __inline_syscall0
#define __inline_syscall0(name,ret) \
__asm__ volatile ("int $0x80" \
	: "=a" (ret) \
	: "0" (__NR_##name));

#undef __inline_syscall1
#define __inline_syscall1(name,ret,arg1) \
__asm__ volatile ("push %%ebx; movl %2,%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name),"r" ((long)(arg1)));

#undef __inline_syscall2
#define __inline_syscall2(name,ret,arg1,arg2) \
__asm__ volatile ("push %%ebx; movl %2,%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name),"r" ((long)(arg1)),"c" ((long)(arg2)));

#undef __inline_syscall3
#define __inline_syscall3(name,ret,arg1,arg2,arg3) \
__asm__ volatile ("push %%ebx; movl %2,%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name),"r" ((long)(arg1)),"c" ((long)(arg2)), \
		"d" ((long)(arg3)));

#undef __inline_syscall4
#define __inline_syscall4(name,ret,arg1,arg2,arg3,arg4) \
__asm__ volatile ("push %%ebx; movl %2,%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name),"r" ((long)(arg1)),"c" ((long)(arg2)), \
	  "d" ((long)(arg3)),"S" ((long)(arg4)));

#undef __inline_syscall5
#define __inline_syscall5(name,ret,arg1,arg2,arg3,arg4,arg5) \
__asm__ volatile ("push %%ebx; movl %2,%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name),"m" ((long)(arg1)),"c" ((long)(arg2)), \
	  "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5)));

#undef __inline_syscall6
#define __inline_syscall6(name,ret,arg1,arg2,arg3,arg4,arg5,arg6) \
__asm__ volatile ("push %%ebx; lea 8(%%ebp),%%ebx; int $0x80; pop %%ebx" \
	: "=a" (ret) \
	: "0" (__NR_##name));

#undef _syscall0_base
#define _syscall0_base(type,name) \
type __libc_##name (void) \
{ \
long __res; \
__inline_syscall0(name,__res) \
__syscall_return(type,__res); \
}

#undef _syscall1_base
#define _syscall1_base(type,name,type1,arg1) \
type __libc_##name (type1 arg1) \
{ \
long __res; \
__inline_syscall1(name,__res,arg1) \
__syscall_return(type,__res); \
}

#undef _syscall2_base
#define _syscall2_base(type,name,type1,arg1,type2,arg2) \
type __libc_##name (type1 arg1,type2 arg2) \
{ \
long __res; \
__inline_syscall2(name,__res,arg1,arg2) \
__syscall_return(type,__res); \
}

#undef _syscall3_base
#define _syscall3_base(type,name,type1,arg1,type2,arg2,type3,arg3) \
type __libc_##name (type1 arg1,type2 arg2,type3 arg3) \
{ \
long __res; \
__inline_syscall3(name,__res,arg1,arg2,arg3) \
__syscall_return(type,__res); \
}

#undef _syscall4_base
#define _syscall4_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
type __libc_##name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
{ \
long __res; \
__inline_syscall4(name,__res,arg1,arg2,arg3,arg4) \
__syscall_return(type,__res); \
}

#undef _syscall5_base
#define _syscall5_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5) \
type __libc_##name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
{ \
long __res; \
__inline_syscall5(name,__res,arg1,arg2,arg3,arg4,arg5) \
__syscall_return(type,__res); \
} \

#undef _syscall6_base
#define _syscall6_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5,type6,arg6) \
type __libc_##name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
{ \
long __res; \
__inline_syscall6(name,__res,arg1,arg2,arg3,arg4,arg5,arg6) \
__syscall_return(type,__res); \
}

#undef _syscall0
#define _syscall0(type,name) \
_syscall0_base(type,name) \
weak_alias(__libc_##name,name);

#undef _syscall1
#define _syscall1(type,name,type1,arg1) \
_syscall1_base(type,name,type1,arg1) \
weak_alias(__libc_##name,name);

#undef _syscall2
#define _syscall2(type,name,type1,arg1,type2,arg2) \
_syscall2_base(type,name,type1,arg1,type2,arg2) \
weak_alias(__libc_##name,name);

#undef _syscall3
#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
_syscall3_base(type,name,type1,arg1,type2,arg2,type3,arg3) \
weak_alias(__libc_##name,name);

#undef _syscall4
#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
_syscall4_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
weak_alias(__libc_##name,name);

#undef _syscall5
#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5) \
_syscall5_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5) \
weak_alias(__libc_##name,name);

#undef _syscall6
#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5,type6,arg6) \
_syscall6_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5,type6,arg6) \
weak_alias(__libc_##name,name);

#endif /* __PIC__ && __i386__ */

#endif /* SYSCALL_H */
@


1.5
log
@
2004-06-09  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/sys/linux/Makefile.am: Change siglist.inc to be generated
        from /usr/include/asm/signal.h instead of kernel sources.  Also
        default max to 32 if not found in header file.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/machine/i386/socketcall.h: Fix for Fedora Core 2
        systems where __syscall_return is not defined.
        * libc/sys/linux/machine/i386/syscall.h: Change for Fedora Core 2
        systems to use syscall() function instead of assembler interrupt.
@
text
@d27 1
a27 1
#ifdef __syscall_return
d29 12
a150 53
#else /* !__syscall_return */

#undef _syscall0_base
#define _syscall0_base(type,name) \
type __libc_##name (void) \
{ \
  return (type)syscall (__NR_##name); \
}

#undef _syscall1_base
#define _syscall1_base(type,name,type1,arg1) \
type __libc_##name (type1 arg1) \
{ \
  return (type)syscall (__NR_##name, arg1); \
}

#undef _syscall2_base
#define _syscall2_base(type,name,type1,arg1,type2,arg2) \
type __libc_##name (type1 arg1, type2 arg2) \
{ \
  return (type)syscall (__NR_##name, arg1, arg2); \
}

#undef _syscall3_base
#define _syscall3_base(type,name,type1,arg1,type2,arg2,type3,arg3) \
type __libc_##name (type1 arg1, type2 arg2, type3 arg3) \
{ \
  return (type)syscall (__NR_##name, arg1, arg2, arg3); \
}

#undef _syscall4_base
#define _syscall4_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
type __libc_##name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
{ \
  return (type)syscall (__NR_##name, arg1, arg2, arg3, arg4); \
}

#undef _syscall5_base
#define _syscall5_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5) \
type __libc_##name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
{ \
  return (type)syscall (__NR_##name, arg1, arg2, arg3, arg4, arg5); \
}

#undef _syscall6_base
#define _syscall6_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5,type6,arg6) \
type __libc_##name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
{ \
  return (type)syscall (__NR_##name, arg1, arg2, arg3, arg4, arg5, arg6); \
}

#endif /* !__syscall_return */

@


1.4
log
@
2002-08-26  Jeff Johnston  <jjohnstn@@redhat.com>

        * Makefile.am(LIBC_OBJECTLISTS): Add STDIO64_OBJECTLIST.
        * Makefile.in: Regenerated.
        * acinclude.m4: Add support for --enable-newlib-elix-level option.
        * aclocal.m4: Regenerated.
        * configure: Ditto.
        * configure.host: Add code to define _ELIX_LEVEL if
        --enable-newlib-elix-level option is used.
        * configure.in:
        * libc/aclocal.m4: Regenerated.
        * libc/configure: Ditto.
        * libc/argz/Makefile.am: Add EL/IX level checking.
        * libc/argz/Makefile.in: Regenerated.
        * libc/argz/dummy.c: New file.
        * libc/ctype/Makefile.am: Add EL/IX level checking.
        * libc/ctype/Makefile.in: Regenerated.
        * libc/locale/Makefile.am: Add EL/IX level checking.
        * libc/locale/Makefile.in: Regenerated.
        * libc/posix/Makefile.am: Add EL/IX level checking.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/telldir.c: Add EL/IX level checking.
        * libc/reent/Makefile.am: Ditto.
        * libc/reent/fstat64r.c: Ditto.
        * libc/reent/lseek64r.c: Ditto.
        * libc/reent/open64r.c: Ditto.
        * libc/reent/Makefile.in: Regenerated.
        * libc/search/Makefile.am: Add EL/IX level checking.
        * libc/search/Makefile.in: Regenerated.
        * libc/stdio/Makefile.am: Add EL/IX level checking.
        * libc/stdio/Makefile.in: Regenerated.
        * libc/stdio64/Makefile.am: Add EL/IX level checking.
        * libc/stdio64/Makefile.in: Regenerated.
        * libc/stdio64/dummy.c: New file.
        * libc/stdio64/fgetpos64.c: Fix so _LARGEFILE_64 macro is checked
        after first include.
        * libc/stdio64/fopen64.c: Ditto.
        * libc/stdio64/freopen64.c: Ditto.
        * libc/stdio64/fseeko64.c: Ditto.
        * libc/stdio64/fsetpos64.c: Ditto.
        * libc/stdio64/ftello64.c: Ditto.
        * libc/stdio64/tmpfile64.c: Ditto.
        * libc/stdlib/Makefile.am: Add EL/IX level checking.
        * libc/stdlib/Makefile.in: Regenerated.
        * libc/stdlib/mstats.c: Add EL/IX level checking.
        * libc/string/Makefile.am: Ditto.
        * libc/string/Makefile.in: Regenerated.
        * libc/sys/linux/Makefile.am: Add EL/IX level checking.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/aclocal.m4: Ditto.
        * libc/sys/linux/configure: Ditto.
        * libc/sys/linux/aio.c: Add EL/IX level checking.
        * libc/sys/linux/ftok.c: Ditto.
        * libc/sys/linux/getdate.c: Ditto.
        * libc/sys/linux/ids.c: Ditto.
        * libc/sys/linux/inode.c: Ditto.
        * libc/sys/linux/io.c: Ditto.
        * libc/sys/linux/process.c: Ditto.
        * libc/sys/linux/resource.c: Ditto.
        * libc/sys/linux/sched.c: Ditto.
        * libc/sys/linux/sig.c: Ditto.
        * libc/sys/linux/termios.c: Ditto.
        * libc/sys/linux/wait.c: Ditto plus add __waitpid and
        __libc___waitpid weak aliases.
        * libc/sys/linux/machine/i386/syscall.h: Add new _base macros
        that generate the code for a syscall, but do not create a
        weak alias.
        * libc/syscalls/Makefile.am: Add EL/IX level checking.
        * libc/syscalls/Makefile.in: Regenerated.
        * libc/time/tzset_r.c: Change to replace strdup with equivalent
        functionality.
        * libc/unix/Makefile.am: Add EL/IX level checking.
        * libc/unix/Makefile.in: Regenerated.
@
text
@d11 1
d27 2
a82 5
#undef _syscall0
#define _syscall0(type,name) \
_syscall0_base(type,name) \
weak_alias(__libc_##name,name);

a91 5
#undef _syscall1
#define _syscall1(type,name,type1,arg1) \
_syscall1_base(type,name,type1,arg1) \
weak_alias(__libc_##name,name);

a100 5
#undef _syscall2
#define _syscall2(type,name,type1,arg1,type2,arg2) \
_syscall2_base(type,name,type1,arg1,type2,arg2) \
weak_alias(__libc_##name,name);

a109 5
#undef _syscall3
#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
_syscall3_base(type,name,type1,arg1,type2,arg2,type3,arg3) \
weak_alias(__libc_##name,name);

a118 5
#undef _syscall4
#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
_syscall4_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
weak_alias(__libc_##name,name);

a128 6
#undef _syscall5
#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5) \
_syscall5_base(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5) \
weak_alias(__libc_##name,name);

d139 84
@


1.3
log
@
2002-05-17  Jeff Johnston  <jjohnstn@@redhat.com>

	* Makefile.am: Copy and install headers from sys/machine/include
	directory.  Also pass $toollibdir to lower-level directories.
	* Makefile.in: Regenerated.
	* libc/include/stdio.h[!_REENT_ONLY]: Change stdin, stdout, and
	stderr to use _REENT macro instead of _impure_ptr directly.
	* libc/include/sys/config.h[__i386__][__linux__]: Define
	__DYNAMIC_REENT__.
	* libc/include/sys/reent.h[!_REENT_ONLY]: Change _REENT macro to be
	call to __getreent() function if !__SINGLE_THREAD__ and
	__DYNAMIC_REENT__ is set.
	* libc/reent/Makefile.am: Add support for getreent.c.
	* libc/reent/Makefile.in: Regenerated.
	* libc/string/strerror.c: Add check if EOPNOTSUPP and ENOTSUP are same.
	* libc/sys/linux/Makefile.am: Add support for new files.
	* libc/sys/linux/configure.in: Add $EXTRA_DIRS variable.
	* libc/sys/linux/Makefile.in: Regenerated.
	* libc/sys/linux/configure: Ditto.
	* libc/sys/linux/io.c: Add poll syscall.  Also weak-alias
	__close, __read, __write, __poll, __open, __lseek, __fcntl from
	their __libc_ counterparts.
	* libc/sys/linux/io64.c: Add __libc_ prefix to lseek64 and open64
	and weak-alias to regular names.
	* libc/sys/linux/pread64.c: Rename to __libc_pread64 and weak-alias
	to pread64 and __pread64.
	* libc/sys/linux/process.c: Weak_alias __libc_getpid to __getpid.
	* libc/sys/linux/pwrite64.c: Rename to __libc_pwrite64 and
	weak-alias to pwrite64.
	* libc/sys/linux/sched.c: Weak-alias __libc_sched_getparam,
	__libc_sched_getscheduler, __libc_sched_get_priority_max,
	__libc_sched_get_priority_min, and __libc_sched_setschedule to
	name with __ instead of __libc_.
	* libc/sys/linux/siglongjmp.c: Include <machine/weakalias.h>.
	Rename siglongjmp to __libc_siglongjmp and weak-alias to siglongjmp.
	Call __libc_longjmp instead of longjmp, from __libc_siglongjmp.
	* libc/sys/linux/signal.c: Rename raise to __libc_raise and weak-alias
	to raise.
	* libc/sys/linux/socket.c: Weak-alias __libc_connect to __connect and
	__libc_send to __send.
	* libc/sys/linux/time.c: Weak-alias __libc_gettimeofday to
	__gettimeofday.
	* libc/sys/linux/wait.c: Rename wait to __libc_wait and weak-alias
	it to wait.  Rename wait3 to __libc_wait3 and weak-alias it to wait3.
	* libc/sys/linux/include/setjmp.h: Use __jmp_buf in sigjmp_buf
	type and typedef __jmp_buf to jmp_buf.
	* libc/sys/linux/machine/i386/Makefile.am: Add syscalls.c and
	setjmp.S.
	* libc/sys/linux/machine/i386/Makefile.in: Regenerated.
	* libc/sys/linux/machine/i386/crt0.c: Add support to clear .bss
	section.
	* libc/sys/linux/machine/i386/socketcall.h: Change to use __libc_
	prefix for function macros and then use weak_alias() to regular names.
	* libc/sys/linux/machine/i386/syscall.h: Ditto.
	* libc/sys/linux/sys/errno.h: Define EOPNOTSUP to be ENOTSUP.
	* libc/sys/linux/sys/stdio.h: Define _flockfile and _funlockfile
	to be flockfile() and funlockfile() respectively.
	* libc/sys/linux/sys/types.h
	* libc/reent/getreent.c: New file.
	* libc/sys/linux/flockfile.c: Ditto.
	* libc/sys/linux/funlockfile.c: Ditto.
	* libc/sys/linux/getreent.c: Ditto.
	* libc/sys/linux/pread.c: Ditto.
	* libc/sys/linux/pwrite.c: Ditto.
	* libc/sys/linux/raise.c: Ditto.
	* libc/sys/linux/system.c: Ditto.
	* libc/sys/linux/tcdrain.c: Ditto.
	* libc/sys/linux/machine/i386/i386mach.h: Ditto.
	* libc/sys/linux/machine/i386/setjmp.S: Ditto.
	* libc/sys/linux/machine/i386/syscalls.c: Ditto.
	* libc/sys/linux/machine/i386/weakalias.h: Ditto.
	* libc/sys/linux/machine/i386/include/setjmp.h: Ditto.
@
text
@d71 2
a72 2
#undef _syscall0
#define _syscall0(type,name) \
d78 5
a82 1
} \
d85 2
a86 2
#undef _syscall1
#define _syscall1(type,name,type1,arg1) \
d92 5
a96 1
} \
d99 2
a100 2
#undef _syscall2
#define _syscall2(type,name,type1,arg1,type2,arg2) \
d106 5
a110 1
} \
d113 2
a114 2
#undef _syscall3
#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
d120 5
a124 1
} \
d127 2
a128 2
#undef _syscall4
#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
d134 5
a138 1
} \
d141 2
a142 2
#undef _syscall5
#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
d150 5
d157 2
a158 2
#undef _syscall6
#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
d165 6
a170 1
} \
@


1.2
log
@
2002-04-23  Jeff Johnston  <jjohnstn@@redhat.com>

        *  libc/include/machine/types.h (__pid_t, __off_t, __loff_t): Added.
        *  libc/sys/linux/Makefile.am: Add support for mmap.c.
        *  libc/sys/linux/Makefile.in: Regenerated.
        *  libc/sys/linux/mmap.c: New file.
        *  libc/sys/linux/machine/i386/syscall.h: Add _syscall6 macro.
        *  libc/sys/linux/sys/types.h (pid_t, off_t, loff_t): Added.
@
text
@d8 1
d26 6
d71 10
d83 1
a83 1
type name(type1 arg1) \
d88 2
a89 1
}
d93 1
a93 1
type name(type1 arg1,type2 arg2) \
d98 2
a99 1
}
d103 1
a103 1
type name(type1 arg1,type2 arg2,type3 arg3) \
d108 2
a109 1
}
d113 1
a113 1
type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
d118 2
a119 1
}
d124 1
a124 1
type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
d129 2
a130 1
}
d135 1
a135 1
type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
d140 2
a141 1
}
@


1.1
log
@
2002-04-03  Jeff Johnston  <jjohnstn@@redhat.com>

	* configure.host: Add support for machine subdirectory of
	sys subdirectory.
	* configure.in: Add check for sys machine subdirectory.
	* Makefile.am: Ditto.
	* configure: Regenerated.
	* Makefile.in: Ditto.
	* libc/sys/linux/crt0.c: Moved to machine/i386 directory.
	* libc/sys/linux/sys/syscall.h: Ditto.
	* libc/sys/linux/sleep.c: New file.
	* libc/sys/linux/socket.c: Ditto.
	* libc/sys/linux/sockops.h: Ditto.
	* libc/sys/linux/stack.c: Ditto.
	* libc/sys/linux/usleep.c: Ditto.
	* libc/sys/linux/machine/Makefile.am: Ditto.
	* libc/sys/linux/machine/Makefile.in: Ditto.
	* libc/sys/linux/machine/aclocal.m4: Ditto.
	* libc/sys/linux/machine/configure: Ditto.
	* libc/sys/linux/machine/configure.in: Ditto.
	* libc/sys/linux/machine/i386/Makefile.am: Ditto.
	* libc/sys/linux/machine/i386/Makefile.in: Ditto.
	* libc/sys/linux/machine/i386/aclocal.m4: Ditto.
	* libc/sys/linux/machine/i386/configure: Ditto.
	* libc/sys/linux/machine/i386/configure.in: Ditto.
	* libc/sys/linux/machine/i386/crt0.c: Ditto.
	* libc/sys/linux/machine/i386/sigset.c: Ditto.
	* libc/sys/linux/machine/i386/sigstack.h: Ditto.
	* libc/sys/linux/machine/i386/socketcall.h: Ditto.
	* libc/sys/linux/machine/i386/syscall.h: Ditto.
	* libc/sys/linux/sys/select.h: Ditto.
	* libc/sys/linux/configure.in: Add support for machine directory.
	* libc/sys/linux/Makefile.am: Ditto plus add new files above.
	* libc/sys/linux/Makefile.in: Regenerated.
	* libc/sys/linux/configure: Ditto.
	* libc/sys/linux/brk.c: Use machine/syscall.h instead of sys/syscall.h.
	* libc/sys/linux/inode.c: Ditto.
	* libc/sys/linux/linux.c: Ditto.
	* libc/sys/linux/process.c: Ditto.
	* libc/sys/linux/systat.c: Ditto.
	* libc/sys/linux/time.c: Ditto.
	* libc/sys/linux/wait.c: Ditto.
	* libc/sys/linux/ids.c: Change header plus add setfsgid/setfsuid.
	* libc/sys/linux/io.c: Change header plus add readv/writev.
	* libc/sys/linux/signal.c: Change header plus change sigsuspend to
	use __sigsuspend syscall.
	* libc/sys/linux/select.c: Change header plus change select to
	use _newselect syscall.
	* libc/sys/linux/sys/cdefs.h: Add a number of standard definitions
	used by glibc header files.
	* libc/sys/linux/sys/types.h: Add __socklen_t and __useconds_t
	types.
@
text
@d58 6
d111 8
@

