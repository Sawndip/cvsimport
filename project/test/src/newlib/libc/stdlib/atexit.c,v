head	1.8;
access;
symbols
	cygwin-1_7_35-release:1.8
	cygwin-1_7_34-release:1.8
	newlib-2_2_0:1.8.0.6
	cygwin-1_7_33-release:1.8
	cygwin-1_7_32-release:1.8
	cygwin-1_7_31-release:1.8
	cygwin-1_7_30-release:1.8
	cygwin-1_7_29-release:1.8
	cygwin-1_7_28-release:1.8
	newlib-2_1_0:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.4
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	newlib-1_20_0:1.8
	cygwin-1_7_9-release:1.8
	cygwin-1_7_8-release:1.8
	newlib-1_19_0:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.8
	cygwin-1_7_1-release:1.7
	newlib-1_17_0-arc:1.7.0.10
	binutils-arc-20080908-branch:1.7.0.8
	binutils-arc-20080908-branchpoint:1.7
	newlib-1_17_0:1.7
	newlib-1_16_0:1.7
	newlib-1_15_0:1.7
	newlib-csl-coldfire-4_1-32:1.7
	newlib-csl-sourcerygxx-4_1-32:1.7
	newlib-csl-innovasic-fido-3_4_4-33:1.7
	newlib-csl-coldfire-4_1-30:1.7
	newlib-csl-sourcerygxx-4_1-30:1.7
	newlib-csl-coldfire-4_1-28:1.7
	newlib-csl-sourcerygxx-4_1-28:1.7
	newlib-csl-arm-2006q3-27:1.7
	newlib-csl-sourcerygxx-4_1-27:1.7
	newlib-csl-arm-2006q3-26:1.7
	newlib-csl-sourcerygxx-4_1-26:1.7
	newlib-csl-sourcerygxx-4_1-24:1.7
	newlib-csl-sourcerygxx-4_1-23:1.7
	newlib-csl-sourcerygxx-4_1-21:1.7
	newlib-csl-arm-2006q3-21:1.7
	newlib-csl-arm-2006q3-19:1.7
	newlib-csl-sourcerygxx-4_1-19:1.7
	newlib-csl-sourcerygxx-4_1-18:1.7
	newlib-csl-sourcerygxx-3_4_4-25:1.7
	newlib-csl-sourcerygxx-4_1-17:1.7
	cr-0x5f1:1.7.0.6
	newlib-csl-sourcerygxx-4_1-14:1.7
	newlib-csl-sourcerygxx-4_1-13:1.7
	newlib-csl-sourcerygxx-4_1-12:1.7
	newlib-csl-sourcerygxx-4_1-9:1.7
	newlib-csl-sourcerygxx-4_1-8:1.7
	newlib-csl-sourcerygxx-4_1-7:1.7
	newlib-csl-arm-2006q1-6:1.7
	newlib-csl-sourcerygxx-4_1-6:1.7
	newlib-csl-sourcerygxx-4_1-5:1.7
	newlib-csl-sourcerygxx-4_1-4:1.7
	newlib-autotools-branch:1.7.0.4
	newlib-csl-20060320-branch:1.7.0.2
	newlib-csl-20060320-branchpoint:1.7
	newlib-1_14_0:1.7
	newlib-csl-arm-2005-q1b:1.7
	newlib-csl-arm-2005-q1a:1.7
	newlib-1_13_0:1.7
	csl-arm-2004-q3:1.7
	csl-arm-2004-q1a:1.6
	csl-arm-2004-q1:1.6
	newlib-1_12_0:1.6
	csl-arm-2003-q4:1.5
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	newlib-1_11_0:1.3
	cygnus_cvs_20020108_pre:1.1.1.1
	newlib-1_10_0:1.1.1.1
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.8
date	2009.12.17.19.43.43;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.09.19.46.54;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.28.01.00.37;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.02.22.42.05;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.06.15.36.31;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.22.58.10;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.03.09.24.14;	author mrg;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
2009-12-17  Jerker Back  <jerker.back@@gmail.com>

        * libc/include/_ansi.h: Add new _EXFNPTR macro for using with
        function pointer arguments.
        * libc/iconv/lib/conv.h: Use _EXFNPTR rather than _EXPARM macro.
        * libc/iconv/lib/ucsconv.h: Ditto.
        * libc/include/stdlib.h: Use new _EXFNPTR macro for function pointers.
        * libc/include/sys/reent.h: Ditto.
        * libc/include/sys/unistd.h: Ditto.
        * libc/search/bsearch.c: Ditto.
        * libc/stdio/fseek.c: Ditto.
        * libc/stdio64/fseeko64.c: Ditto.
        * libc/stdlib/atexit.c: Ditto.
        * libc/stdlib/on_exit.c: Ditto.
@
text
@/*
 * Copyright (c) 1990 Regents of the University of California.
 * All rights reserved.
 *
 * %sccs.include.redist.c%
 */

/*
FUNCTION
<<atexit>>---request execution of functions at program exit

INDEX
	atexit

ANSI_SYNOPSIS
	#include <stdlib.h>
	int atexit (void (*<[function]>)(void));

TRAD_SYNOPSIS
	#include <stdlib.h>
	int atexit ((<[function]>)
	  void (*<[function]>)();

DESCRIPTION
You can use <<atexit>> to enroll functions in a list of functions that
will be called when your program terminates normally.  The argument is
a pointer to a user-defined function (which must not require arguments and
must not return a result).

The functions are kept in a LIFO stack; that is, the last function
enrolled by <<atexit>> will be the first to execute when your program
exits.

There is no built-in limit to the number of functions you can enroll
in this list; however, after every group of 32 functions is enrolled,
<<atexit>> will call <<malloc>> to get space for the next part of the
list.   The initial list of 32 functions is statically allocated, so
you can always count on at least that many slots available.

RETURNS
<<atexit>> returns <<0>> if it succeeds in enrolling your function,
<<-1>> if it fails (possible only if no space was available for
<<malloc>> to extend the list of functions).

PORTABILITY
<<atexit>> is required by the ANSI standard, which also specifies that
implementations must support enrolling at least 32 functions.

Supporting OS subroutines required: <<close>>, <<fstat>>, <<isatty>>,
<<lseek>>, <<read>>, <<sbrk>>, <<write>>.
*/

#include <stdlib.h>
#include "atexit.h"

/*
 * Register a function to be performed at exit.
 */

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
}
@


1.7
log
@
2004-09-09  Paul Brook  <paul@@codesourcery.com>

        * libc/include/sys/reent.h (struct _on_exit_args): Add _dso_handle
        and _is_cxa.
        (struct _atexit): Add _next when _REENT_SMALL.
        (struct _reent): Add _atexit0 when _REENT_SMALL.
        (_REENT_INIT_PTR): Adjust.
        * libc/stdlib/Makefile.am (GENERAL_SOURCES): Add __atexit.c and
        __call_exit.c.
        (EXTENDED_SOURCES): Add cxa_atexit.c and cxa_finalize.c.
        * libc/stdlib/Makefile.in: Regenerate.
        * libc/stdlib/__atexit.c: New file.
        * libc/stdlib/__call_atexit.c: New file.
        * libc/stdlib/atexit.h: Remove old definitions.  Add new.
        * libc/stdlib/atexit.c (atexit): Use __register_exitproc.
        * libc/stdlib/cxa_atexit.c: New file.
        * libc/stdlib/cxa_finalize.c: New file.
        * libc/stdlib/exit.c (exit): Use __call_exitprocs.
        * libc/stdlib/on_exit.c (on_exit): Use __register_exitproc.
        2004-09-09  Jeff Johnston  <jjohnstn@@redhat.com>
        * libc/reent/reent.c [_REENT_SMALL]: Fix reference to
        _on_exit_args_ptr.
@
text
@d63 1
a63 1
	_VOID _EXFUN ((*fn), (_VOID)))
@


1.6
log
@
2004-01-27  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdlib/atexit.c: Protect global atexit list with a
        lock when newlib is multithreaded.
@
text
@a52 1
#include <stddef.h>
d54 1
a54 2
#include <reent.h>
#include <sys/lock.h>
d65 1
a65 41
  register struct _atexit *p;

#ifndef __SINGLE_THREAD__
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif
      
  /* _REENT_SMALL atexit() doesn't allow more than the required 32 entries.  */
#ifndef _REENT_SMALL
  if ((p = _GLOBAL_REENT->_atexit) == NULL)
    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
  if (p->_ind >= _ATEXIT_SIZE)
    {
      if ((p = (struct _atexit *) malloc (sizeof *p)) == NULL)
        {
#ifndef __SINGLE_THREAD__
          __lock_release(lock);
#endif
          return -1;
        }
      p->_ind = 0;
      p->_on_exit_args._fntypes = 0;
      p->_next = _GLOBAL_REENT->_atexit;
      _GLOBAL_REENT->_atexit = p;
    }
#else
  p = &_GLOBAL_REENT->_atexit;
  if (p->_ind >= _ATEXIT_SIZE)
    {
#ifndef __SINGLE_THREAD__
      __lock_release(lock);
#endif
      return -1;
    }
#endif
  p->_fns[p->_ind++] = fn;
#ifndef __SINGLE_THREAD__
  __lock_release(lock);
#endif
  return 0;
@


1.5
log
@
2003-09-02  Thomas Pfaff  <tpfaff@@gmx.net>

        * libc/stdlib/atexit.c: Rename _REENT to _GLOBAL_REENT throughout.
        * libc/stdlib/exit.c : Ditto.
        * libc/stdlib/on_exit.c: Ditto.
@
text
@d56 1
d69 6
d82 6
a87 1
        return -1;
d96 6
a101 1
    return -1;
d104 3
@


1.4
log
@New structure containing fields used by the on_exit() function.
(struct _atexit): Include struct _on_exit_args.  For _REENT_SMALL do his via a
pointer that is initialised when needed.
@
text
@d70 2
a71 2
  if ((p = _REENT->_atexit) == NULL)
    _REENT->_atexit = p = &_REENT->_atexit0;
d78 2
a79 2
      p->_next = _REENT->_atexit;
      _REENT->_atexit = p;
d82 1
a82 1
  p = &_REENT->_atexit;
@


1.3
log
@
2002-05-15  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/stdlib.h: Add on_exit prototype.
        * libc/include/sys/reent.h (struct _atexit): Add argument array
        and bits to track type of exit routine to support both on_exit
        and atexit.
        (_REENT_INIT_PTR): Add missing fields that won't be zeroed out
        by default and change the setting of the atexit structure.
        (_REENT_INIT)[!_REENT_SMALL]: Remove extraneous end brace.
        * libc/stdlib/on_exit.c: New file.
        * libc/stdlib/Makefile.am: Add support for on_exit.
        * libc/stdlib/Makefile.in: Regenerated.
        * libc/stdlib/atexit.c: Change to initialize types field.
        * libc/stdlib/exit.c: Change to look at types field for each
        exit routine and either call an atexit-style or an on_exit-style
        routine accordingly.
@
text
@d68 1
a68 1
/* _REENT_SMALL atexit() doesn't allow more than the required 32 entries.  */
d75 1
a75 1
	return -1;
d77 1
a77 1
      p->_fntypes = 0;
@


1.2
log
@* implement a new `struct _reent' that is significantly smaller.  use this
if _REENT_SMALL is defined in config.h.  define this for xstormy16.
@
text
@d77 1
@


1.1
log
@Initial revision
@
text
@d68 2
d80 5
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
