head	1.9;
access;
symbols
	cygwin-1_7_35-release:1.9
	cygwin-1_7_34-release:1.9
	newlib-2_2_0:1.9.0.6
	cygwin-1_7_33-release:1.9
	cygwin-1_7_32-release:1.9
	cygwin-1_7_31-release:1.9
	cygwin-1_7_30-release:1.9
	cygwin-1_7_29-release:1.9
	cygwin-1_7_28-release:1.9
	newlib-2_1_0:1.9
	cygwin-1_7_27-release:1.9
	cygwin-1_7_26-release:1.9
	cygwin-1_7_25-release:1.9
	cygwin-1_7_24-release:1.9
	cygwin-1_7_23-release:1.9
	cygwin-1_7_22-release:1.9
	cygwin-1_7_21-release:1.9
	cygwin-1_7_20-release:1.9
	cygwin-1_7_19-release:1.9
	cygwin-64bit-postmerge:1.9
	cygwin-64bit-premerge-branch:1.9.0.4
	cygwin-64bit-premerge:1.9
	cygwin-1_7_18-release:1.9
	newlib-2_0_0:1.9
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.2
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	newlib-1_20_0:1.9
	cygwin-1_7_9-release:1.8
	cygwin-1_7_8-release:1.8
	newlib-1_19_0:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	newlib-1_18_0:1.8
	cygwin-1_7_1-release:1.8
	newlib-1_17_0-arc:1.8.0.2
	binutils-arc-20080908-branch:1.6.0.8
	binutils-arc-20080908-branchpoint:1.6
	newlib-1_17_0:1.8
	newlib-1_16_0:1.6
	newlib-1_15_0:1.6
	newlib-csl-coldfire-4_1-32:1.6
	newlib-csl-sourcerygxx-4_1-32:1.6
	newlib-csl-innovasic-fido-3_4_4-33:1.6
	newlib-csl-coldfire-4_1-30:1.6
	newlib-csl-sourcerygxx-4_1-30:1.6
	newlib-csl-coldfire-4_1-28:1.6
	newlib-csl-sourcerygxx-4_1-28:1.6
	newlib-csl-arm-2006q3-27:1.6
	newlib-csl-sourcerygxx-4_1-27:1.6
	newlib-csl-arm-2006q3-26:1.6
	newlib-csl-sourcerygxx-4_1-26:1.6
	newlib-csl-sourcerygxx-4_1-24:1.6
	newlib-csl-sourcerygxx-4_1-23:1.6
	newlib-csl-sourcerygxx-4_1-21:1.6
	newlib-csl-arm-2006q3-21:1.6
	newlib-csl-arm-2006q3-19:1.6
	newlib-csl-sourcerygxx-4_1-19:1.6
	newlib-csl-sourcerygxx-4_1-18:1.6
	newlib-csl-sourcerygxx-3_4_4-25:1.6
	newlib-csl-sourcerygxx-4_1-17:1.6
	cr-0x5f1:1.6.0.6
	newlib-csl-sourcerygxx-4_1-14:1.6
	newlib-csl-sourcerygxx-4_1-13:1.6
	newlib-csl-sourcerygxx-4_1-12:1.6
	newlib-csl-sourcerygxx-4_1-9:1.6
	newlib-csl-sourcerygxx-4_1-8:1.6
	newlib-csl-sourcerygxx-4_1-7:1.6
	newlib-csl-arm-2006q1-6:1.6
	newlib-csl-sourcerygxx-4_1-6:1.6
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.6
	newlib-csl-arm-2005-q1a:1.6
	newlib-1_13_0:1.5
	csl-arm-2004-q3:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	newlib-1_12_0:1.5
	csl-arm-2003-q4:1.5
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	newlib-1_11_0:1.5
	cygnus_cvs_20020108_pre:1.4
	newlib-1_10_0:1.4
	newlib-1_9_0:1.3
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.9
date	2011.08.23.12.03.55;	author corsepiu;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.25.03.00.04;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.25.01.23.08;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.20.17.31.04;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.17.21.23.30;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.22.22.12.40;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.18.26.10;	author meissner;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.17.17.10.17;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.48;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.48;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.9
log
@2011-08-23  Ralf Cors√©pius  <ralf.corsepius@@rtems.org>

	* libc/stdlib/putenv_r.c: Use "strchr" instead of obsolete "index".
	* libc/stdlib/setenv_r.c: Use "memcpy" instead of obsolete "bcopy".
@
text
@/* This file may have been modified by DJ Delorie (Jan 1991).  If so,
** these modifications are Copyright (C) 1991 DJ Delorie.
*/

/*
 * Copyright (c) 1987 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that: (1) source distributions retain this entire copyright
 * notice and comment, and (2) distributions including binaries display
 * the following acknowledgement:  ``This product includes software
 * developed by the University of California, Berkeley and its contributors''
 * in the documentation or other materials provided with the distribution
 * and in all advertising materials mentioning features or use of this
 * software. Neither the name of the University nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include <reent.h>

#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <errno.h>
#include "envlock.h"

extern char **environ;

/* Only deal with a pointer to environ, to work around subtle bugs with shared
   libraries and/or small data systems where the user declares his own
   'environ'.  */
static char ***p_environ = &environ;

/* _findenv_r is defined in getenv_r.c.  */
extern char *_findenv_r _PARAMS ((struct _reent *, const char *, int *));

/*
 * _setenv_r --
 *	Set the value of the environmental variable "name" to be
 *	"value".  If rewrite is set, replace any current value.
 *	If "name" contains equal sign, -1 is returned, and errno is
 *	set to EINVAL;
 */

int
_DEFUN (_setenv_r, (reent_ptr, name, value, rewrite),
        struct _reent *reent_ptr _AND
	_CONST char *name _AND
	_CONST char *value _AND
	int rewrite)
{
  static int alloced;		/* if allocated space before */
  register char *C;
  int l_value, offset;

  if (strchr(name, '='))
    {
      errno = EINVAL;
      return -1;
    }

  ENV_LOCK;

  l_value = strlen (value);
  if ((C = _findenv_r (reent_ptr, name, &offset)))
    {				/* find if already exists */
      if (!rewrite)
        {
          ENV_UNLOCK;
	  return 0;
        }
      if (strlen (C) >= l_value)
	{			/* old larger; copy over */
	  while ((*C++ = *value++) != 0);
          ENV_UNLOCK;
	  /* if we are changing the TZ environment variable, update timezone info */
	  if (strcmp (name, "TZ") == 0)
	    tzset ();
	  return 0;
	}
    }
  else
    {				/* create new slot */
      register int cnt;
      register char **P;

      for (P = *p_environ, cnt = 0; *P; ++P, ++cnt);
      if (alloced)
	{			/* just increase size */
	  *p_environ = (char **) _realloc_r (reent_ptr, (char *) environ,
					     (size_t) (sizeof (char *) * (cnt + 2)));
	  if (!*p_environ)
            {
              ENV_UNLOCK;
	      return -1;
            }
	}
      else
	{			/* get new space */
	  alloced = 1;		/* copy old entries into it */
	  P = (char **) _malloc_r (reent_ptr, (size_t) (sizeof (char *) * (cnt + 2)));
	  if (!P)
            {
              ENV_UNLOCK;
	      return (-1);
            }
	  memcpy((char *) P,(char *) *p_environ, cnt * sizeof (char *));
	  *p_environ = P;
	}
      (*p_environ)[cnt + 1] = NULL;
      offset = cnt;
    }
  for (C = (char *) name; *C && *C != '='; ++C);	/* no `=' in name */
  if (!((*p_environ)[offset] =	/* name + `=' + value */
	_malloc_r (reent_ptr, (size_t) ((int) (C - name) + l_value + 2))))
    {
      ENV_UNLOCK;
      return -1;
    }
  for (C = (*p_environ)[offset]; (*C = *name++) && *C != '='; ++C);
  for (*C++ = '='; (*C++ = *value++) != 0;);

  ENV_UNLOCK;

  /* if we are setting the TZ environment variable, update timezone info */
  if (strncmp ((*p_environ)[offset], "TZ=", 3) == 0)
    tzset ();

  return 0;
}

/*
 * _unsetenv_r(name) --
 *	Delete environmental variable "name".
 */
int
_DEFUN (_unsetenv_r, (reent_ptr, name),
        struct _reent *reent_ptr _AND
        _CONST char *name)
{
  register char **P;
  int offset;
 
  /* Name cannot be NULL, empty, or contain an equal sign.  */ 
  if (name == NULL || name[0] == '\0' || strchr(name, '='))
    {
      errno = EINVAL;
      return -1;
    }

  ENV_LOCK;

  while (_findenv_r (reent_ptr, name, &offset))	/* if set multiple times */
    { 
      for (P = &(*p_environ)[offset];; ++P)
        if (!(*P = *(P + 1)))
	  break;
    }

  ENV_UNLOCK;
  return 0;
}
@


1.8
log
@
2008-09-24  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdlib/setenv_r.c (_unsetenv_r): Modify to return -1 only if
        name is NULL, empty, or contains equal sign.
@
text
@d113 1
a113 1
	  bcopy ((char *) *p_environ, (char *) P, cnt * sizeof (char *));
@


1.7
log
@
2008-09-24  Pawel Veselov  <pawel.veselov@@gmail.com>

        Fix setenv/getenv/unsetenv to be OpenGroup compliant:
        * libc/include/stdlib.h (unsetenv, _unsetenv_r): Redefine with integer
        return types.
        * libc/stdlib/getenv_r.c (_findenv_r): Do no special processing with
        names that contain equal chars.
        * libc/stdlib/setenv.c: Redefine _unsetenv_r as returning int.
        * libc/stdlib/setenv_r.c (_setenv_r): Return -1 and set errno to
        EINVAL if name contains an equal sign.  Do not remove any equal signs
        from the value.
        (_unsetenv_r): Modified to return int.  Return -1 and set EINVAL
        if name contains equal sign.  Return -1 if no variable(s) were found
        and return 0 otherwise.
@
text
@d149 3
a151 3
  int rc;
  
  if (strchr(name, '='))
a158 2
  rc = -1;

a160 1
      rc = 0;
d167 1
a167 1
  return (rc);
@


1.6
log
@
2005-01-19  Shaun Jackman  <sjackman@@gmail.com>

        * libc/stdlib/setenv_r.c (_setenv_r): Call tzset() if the TZ
        environment variable is set.
@
text
@d30 1
d47 2
d62 6
a69 2
  if (*value == '=')		/* no `=' in value */
    ++value;
d142 1
a142 1
void
d149 7
d159 2
d162 6
a167 3
    for (P = &(*p_environ)[offset];; ++P)
      if (!(*P = *(P + 1)))
	break;
d170 1
@


1.5
log
@
2002-04-17  Jeff Johnston  <jjohnstn@@redhat.com>

        *  libc/include/time.h (tzset, _tzset_r): Added prototypes.
        (strptime): Moved prototype to be within !__STRICT_ANSI__.
        (_tzname, _daylight, _timezone): No long __CYGWIN__ only.
        (tzname): Defined for all platforms.
        (daylight, timezone): Defined only for CYGWIN.
        *  libc/sys/linux/machine/i386/crt0.c: Add call to tzset() after
        environment set up.
        * libc/stdlib/setenv_r.c (_setenv_r): Call tzset() if the TZ
        environment variable is set.
        *  libc/time/Makefile.am: Add support for tzset.c, tzlock.c, and
        tzset_r.c.
        *  libc/time/Makefile.in: Regenerated.
        *  libc/time/gmtime.c (gmtime): Changed to call gmtime_r.
        *  libc/time/gmtime_r.c (gmtime_r): Changed to call _mktm_r.
        *  libc/time/lcltime_r.c (lcltime_r): Ditto.
        *  libc/time/local.h: New local header file.
        *  libc/time/mktime.c (mktime): Add timezone support.
        *  libc/time/mktm_r.c: New file which is the common engine
        for gmtime_r and lcltime_r.  This code has timezone support.
        *  libc/time/strftime.c (strftime): Add %Z timezone support.
        *  libc/time/tzlock.c: New file containing timezone lock stubs.
        *  libc/time/tzset.c: New file containing tzset() routine.
        *  libc/time/tzset_r.c: New file containing _tzset_r and
        internal routine for calculating timezone changes for specified year.
@
text
@d125 1
a125 1
  if (strcmp (name, "TZ") == 0)
@


1.4
log
@
2001-02-22  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/machine/setjmp-dj.h: With DJ Delorie's permission,
        changed the copyright information to allow free modification of the
        file with no reference to "copying.dj".
        * libc/include/sys/stat-dj.h: Ditto.
        * libc/machine/i386/setjmp.S: Ditto.
        * libc/sys/h8300hms/sys/file.h: Ditto.
        * libc/sys/sysmec/access.c: Ditto.
        * libc/sys/sysnecv850/access.c: Ditto.
        * libc/stdio/mktemp.c: Fixed typo for the word copyright.
        * libc/stdlib/getenv_r.c: Ditto.
        * libc/stdlib/putenv_r.c: Ditto.
        * libc/stdlib/setenv_r.c: Ditto.
        * libc/stdlib/getenv.c: Removed DJ reference since any possible
        modifications will now be in the _r version of this file.
        * libc/stdlib/putenv.c: Ditto.
        * libc/stdlib/setenv.c: Ditto.
        * libc/sys/go32/copying.dj: Removed DJ's address which is no longer
        valid.  Added a reference to DJ's web page that contains his address.
        * libc/sys/go32/*.s: Removed references to DJ's old address.
        * libc/sys/go32/*.c: Ditto.
        * libc/sys/go32/*.h: Ditto.
        * libc/sys/go32/*.S: Ditto.
        * libc/sys/go32/sys/*.h: Ditto.
@
text
@d2 1
a2 1
** these modifications are Copyright (C) 1991 DJ Delorie
d29 1
d73 1
a73 1
         while ((*C++ = *value++) != 0);
d75 3
d123 4
@


1.3
log
@Only reference environ indirectly through a pointer
@
text
@d2 1
a2 2
** these modifications are Coyright (C) 1991 DJ Delorie, 24 Kirsten Ave,
** Rochester NH, 03867-2954, USA.
@


1.2
log
@
Mon Apr 17 12:46:00 2000  Marek Michalkiewicz <marekm@@linux.org.pl>

        * libc/signal/signal.c (_signal_r) : Removed unused local variable temp.        * libc/stdio/findfp.c (std): Added declaration of flags and file.
        * libc/stdio/mktemp.c (_gettemp, _mkstemp_r, mkstemp): Added int
        return type.
        * libc/stdio/putchar.c (putchar): Added return statement.
        * libc/stdio/refill.c (lflush): Added correct parentheses.
        * libc/stdio/vfprintf.c (_VFPRINTF_R): Ditto.
        * libc/stdio/vfscanf.c (__svfscanf): Changed sprintf call which
        prints long value to use l qualifier.
        * libc/stdlib/dtoa.c (_dtoa_r): Added parentheses to remove warning
        messages and initialized local values: ilim, ilim1, and spec_case.
        * libc/stdlib/ecvtbuf.c (print_e): Removed unused variable dp.
        * libc/stdlib/mbctype.h (_issjis1, _issjis2): Added parentheses.
        * libc/stdlib/mprec.c: Ditto.
        * libc/stdlib/setenv_r.c: Ditto.
        * libc/stdlib/strtod.c: Ditto.
        * libc/stdlib/strtol.c: Ditto.
        * libc/stdlib/strtoul.c: Ditto.
        * libm/common/sf_expm1.c: Added curly braces to if else clauses.
        * libm/common/sf_log1p.c: Ditto.
        * libm/common/sf_scalbn.c: Ditto.
        * libm/math/ef_log.c: Ditto.
@
text
@d32 7
a54 1
  extern char **environ;
d83 1
a83 1
      for (P = environ, cnt = 0; *P; ++P, ++cnt);
d86 3
a88 3
	  environ = (char **) _realloc_r (reent_ptr, (char *) environ,
				       (size_t) (sizeof (char *) * (cnt + 2)));
	  if (!environ)
d103 2
a104 2
	  bcopy ((char *) environ, (char *) P, cnt * sizeof (char *));
	  environ = P;
d106 1
a106 1
      environ[cnt + 1] = NULL;
d110 1
a110 1
  if (!(environ[offset] =	/* name + `=' + value */
d116 1
a116 1
  for (C = environ[offset]; (*C = *name++) && *C != '='; ++C);
a132 1
  extern char **environ;
d139 1
a139 1
    for (P = &environ[offset];; ++P)
@


1.1
log
@Initial revision
@
text
@d67 1
a67 1
	  while (*C++ = *value++);
d111 1
a111 1
  for (*C++ = '='; *C++ = *value++;);
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
