head	1.13;
access;
symbols
	cygwin-1_7_35-release:1.13
	cygwin-1_7_34-release:1.13
	newlib-2_2_0:1.13.0.2
	cygwin-1_7_33-release:1.13
	cygwin-1_7_32-release:1.13
	cygwin-1_7_31-release:1.13
	cygwin-1_7_30-release:1.13
	cygwin-1_7_29-release:1.13
	cygwin-1_7_28-release:1.13
	newlib-2_1_0:1.13
	cygwin-1_7_27-release:1.13
	cygwin-1_7_26-release:1.13
	cygwin-1_7_25-release:1.13
	cygwin-1_7_24-release:1.12
	cygwin-1_7_23-release:1.12
	cygwin-1_7_22-release:1.12
	cygwin-1_7_21-release:1.12
	cygwin-1_7_20-release:1.11
	cygwin-1_7_19-release:1.11
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.4
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.8
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	newlib-1_20_0:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.7
	newlib-1_19_0:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	newlib-1_18_0:1.5
	cygwin-1_7_1-release:1.5
	newlib-1_17_0-arc:1.4.0.10
	binutils-arc-20080908-branch:1.4.0.8
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4.2.1
	newlib-csl-sourcerygxx-4_1-32:1.4.2.1
	newlib-csl-innovasic-fido-3_4_4-33:1.4.2.1
	newlib-csl-coldfire-4_1-30:1.4.2.1
	newlib-csl-sourcerygxx-4_1-30:1.4.2.1
	newlib-csl-coldfire-4_1-28:1.4.2.1
	newlib-csl-sourcerygxx-4_1-28:1.4.2.1
	newlib-csl-arm-2006q3-27:1.4.2.1
	newlib-csl-sourcerygxx-4_1-27:1.4.2.1
	newlib-csl-arm-2006q3-26:1.4.2.1
	newlib-csl-sourcerygxx-4_1-26:1.4.2.1
	newlib-csl-sourcerygxx-4_1-24:1.4.2.1
	newlib-csl-sourcerygxx-4_1-23:1.4.2.1
	newlib-csl-sourcerygxx-4_1-21:1.4.2.1
	newlib-csl-arm-2006q3-21:1.4.2.1
	newlib-csl-arm-2006q3-19:1.4.2.1
	newlib-csl-sourcerygxx-4_1-19:1.4.2.1
	newlib-csl-sourcerygxx-4_1-18:1.4.2.1
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3;
locks; strict;
comment	@ * @;


1.13
date	2013.08.19.09.03.42;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2013.07.02.21.30.57;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2013.05.08.23.13.51;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2013.05.07.21.40.10;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.07.18.24.14;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.03.19.13.57;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.06.20.20.36;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.04.17.57.30;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.23.17.54.22;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.21.00.57.34;	author mmitchel;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2004.09.15.20.50.07;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.14.18.12.52;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.09.19.46.54;	author jjohnstn;	state Exp;
branches;
next	;

1.4.2.1
date	2006.08.29.21.53.31;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* libc/stdlib/__atexit.c (__register_exitproc): NULL-ify
	_on_exit_args_ptr when creating a new _atexit structure while
	_REENT_SMALL is defined.
@
text
@/*
 *  Common routine to implement atexit-like functionality.
 *
 *  This is also the key function to be configured as lite exit, a size-reduced
 *  implementation of exit that doesn't invoke clean-up functions such as _fini
 *  or global destructors.
 *
 *  Default (without lite exit) call graph is like:
 *  _start -> atexit -> __register_exitproc
 *  _start -> __libc_init_array -> __cxa_atexit -> __register_exitproc
 *  on_exit -> __register_exitproc
 *  _start -> exit -> __call_exitprocs
 *
 *  Here an -> means arrow tail invokes arrow head. All invocations here
 *  are non-weak reference in current newlib/libgloss.
 *
 *  Lite exit makes some of above calls as weak reference, so that size expansive
 *  functions __register_exitproc and __call_exitprocs may not be linked. These
 *  calls are:
 *    _start w-> atexit
 *    __cxa_atexit w-> __register_exitproc
 *    exit w-> __call_exitprocs
 *
 *  Lite exit also makes sure that __call_exitprocs will be referenced as non-weak
 *  whenever __register_exitproc is referenced as non-weak.
 *
 *  Thus with lite exit libs, a program not explicitly calling atexit or on_exit
 *  will escape from the burden of cleaning up code. A program with atexit or on_exit
 *  will work consistently to normal libs.
 *
 *  Lite exit is enabled with --enable-lite-exit, and is controlled with macro
 *  _LITE_EXIT.
 */

#include <stddef.h>
#include <stdlib.h>
#include <reent.h>
#include <sys/lock.h>
#include "atexit.h"

/* Make this a weak reference to avoid pulling in malloc.  */
void * malloc(size_t) _ATTRIBUTE((__weak__));

#ifdef _LITE_EXIT
/* As __call_exitprocs is weak reference in lite exit, make a
   non-weak reference to it here.  */
const void * __atexit_dummy = &__call_exitprocs;
#endif

#ifndef __SINGLE_THREAD__
extern _LOCK_RECURSIVE_T __atexit_lock;
#endif

#ifdef _REENT_GLOBAL_ATEXIT
static struct _atexit _global_atexit0 = _ATEXIT_INIT;
# define _GLOBAL_ATEXIT0 (&_global_atexit0)
#else
# define _GLOBAL_ATEXIT0 (&_GLOBAL_REENT->_atexit0)
#endif

/*
 * Register a function to be performed at exit or on shared library unload.
 */

int
_DEFUN (__register_exitproc,
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
  struct _on_exit_args * args;
  register struct _atexit *p;

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
  if (p == NULL)
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  if (p->_ind >= _ATEXIT_SIZE)
    {
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
	return -1;

      p = (struct _atexit *) malloc (sizeof *p);
      if (p == NULL)
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
	}
      p->_ind = 0;
      p->_next = _GLOBAL_ATEXIT;
      _GLOBAL_ATEXIT = p;
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
      p->_on_exit_args._is_cxa = 0;
#else
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
      if (args == NULL)
	{
	  if (malloc)
	    args = malloc (sizeof * p->_on_exit_args_ptr);

	  if (args == NULL)
	    {
#ifndef __SINGLE_THREAD__
	      __lock_release(__atexit_lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
}
@


1.12
log
@
2013-07-02  Joey Ye  <joey.ye@@arm.com>

        Lite exit support.
        * README: Add information about lite-exit.
        * acconfig.h (_LITE_EXIT): New macro.
        * configure.in (enable-lite-exit): New option.
        (_LITE_EXIT): Define new macro.
        * configure: Regenerated.
        * newlib.hin (_LITE_EXIT): New macro.
        * libc/stdlib/__atexit.c [_LITE_EXIT]: Add dummy explicit
        reference to __call_exitprocs.
        * libc/stdlib/cxa_atexit.c [_LITE_EXIT]: Make __register_exitproc a
        weak reference.
        * libc/stdlib/exit.c (exit)[_LITE_EXIT]: Remove TWS and weakly reference
        __call_exitprocs.
@
text
@d107 2
@


1.11
log
@
2013-05-07  Sebastian Huber <sebastian.huber@@embedded-brains.de>

        * libc/include/sys/config.h (_REENT_GLOBAL_ATEXIT): Define for
        RTEMS.
        * libc/include/sys/reent.h (_reent): Use _REENT_GLOBAL_ATEXIT.
        (_global_atexit): Declare if _REENT_GLOBAL_ATEXIT is defined.
        * libc/reent/reent.c (_reclaim_reent): Remove atexit cleanup if
        _REENT_GLOBAL_ATEXIT is defined.
        (_wrapup_reent): Remove atexit handling if _REENT_GLOBAL_ATEXIT
        is defined.
        * libc/stdlib/__atexit.c (_global_atexit0): Define if
        _REENT_GLOBAL_ATEXIT is defined.
        * libc/stdlib/__call_atexit.c (_global_atexit): Define if
        _REENT_GLOBAL_ATEXIT is defined.
@
text
@d3 30
d44 6
@


1.10
log
@
2013-05-07  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	* libc/include/sys/reent.h (_ATEXIT_INIT): Define.
	(_ATEXIT_INIT_PTR): Likewise.
	(_REENT_INIT_ATEXIT): Likewise.
	(_REENT_INIT_ATEXIT_PTR): Likewise.
	(_GLOBAL_ATEXIT): Likewise.
	* libc/stdlib/__atexit.c (_GLOBAL_ATEXIT0): Define.
	(__register_exitproc): Use _GLOBAL_ATEXIT and _GLOBAL_ATEXIT0.
	* libc/stdlib/__call_atexit.c (__call_exitprocs): Likewise.
-
@
text
@d18 6
a23 1
#define _GLOBAL_ATEXIT0 (&_GLOBAL_REENT->_atexit0)
@


1.9
log
@
2013-05-07  Sebastian Huber <sebastian.huber@@embedded-brains.de>

        * libc/stdlib/__atexit.c (__atexit_lock): Declare.
        * libc/stdlib/__call_atexit.c (__atexit_lock): Define.
@
text
@d18 2
d39 1
a39 1
  p = _GLOBAL_REENT->_atexit;
d41 1
a41 1
    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
d61 2
a62 2
      p->_next = _GLOBAL_REENT->_atexit;
      _GLOBAL_REENT->_atexit = p;
@


1.8
log
@
2012-01-03  Viachaslau Kulakouski  <Viachaslau.Kulakouski@@oracle.com>

        * libc/stdlib/__atexit.c: Refer to __atexit_lock instead of lock.
@
text
@d13 4
a16 1
__LOCK_INIT_RECURSIVE(, __atexit_lock);
@


1.7
log
@
2010-04-06  Dave Korn  <dave.korn.cygwin@@googlemail.com>

        * libc/stdlib/__atexit.c (__atexit_lock): Initialise as recursive
        rather than non-recursive lock type.
        (__register_exitproc): Use recursive locking APIs on it.
        * libc/stdlib/__call_atexit.c (__call_exitprocs): Likewise.
@
text
@d77 1
a77 1
	      __lock_release(lock);
@


1.6
log
@* libc/stdlib/__atexit.c (__atexit_lock): Define a global lock for atexit
functions.
(__register_exitproc): Use __atexit_lock rather than a local static lock.
* libc/stdlib/__call_atexit.c: Ditto.
@
text
@d13 1
a13 1
__LOCK_INIT(, __atexit_lock);
d31 1
a31 1
  __lock_acquire(__atexit_lock);
d51 1
a51 1
	  __lock_release(__atexit_lock);
d96 1
a96 1
  __lock_release(__atexit_lock);
@


1.5
log
@
2009-04-23  Paul Brook  <paul@@codesourcery.com>
            Kazu Hirata  <kazu@@codesourcery.com>

        * libc/stdlib/__atexit.c (__register_exitproc): Use weak reference
        to malloc.  Allocate dynamically only if it is present.
        * libc/stdlib/__call_atexit.c (__call_exitprocs): Use weak
        reference to free.  Call free only if it is present.
@
text
@d13 1
d31 1
a31 3
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
d51 1
a51 1
	  __lock_release(lock);
d96 1
a96 1
  __lock_release(lock);
@


1.4
log
@	* acconfig.h (_ATEXIT_DYNAMIC_ALLOC): Undef.
	* configure.in (--disable-newlib-atexit-dynamic-alloc): New
	option.
	* configure: Regenerated.
	* newlib.hin: Regenerated.
	* libc/stdlib/__atexit.c (__register_exitproc): Don't call malloc
	if _ATEXIT_DYNAMIC_ALLOC is undefined.
	* libc/stdlib/__call_atexit.c (__call_exitprocs): Don't call free
	if _ATEXIT_DYNAMIC_ALLOC is undefined.
@
text
@d11 2
d43 5
d72 3
a74 1
	  args = malloc (sizeof * p->_on_exit_args_ptr);
@


1.4.2.1
log
@2006-08-29  Paul Brook  <paul@@codesourcery.com>

	newlib/
	* acconfig.h (_ATEXIT_DYNAMIC_ALLOC): Remove.
	* configure.in: Remove --disable-newlib-atexit-dynamic-alloc.
	* libc/stdlib/__atexit.c (__register_exitproc): Use weak reference to
	malloc.  Only allocate dynamically if it is present.
	* libc/stdlib/__call_atexit.c (__call_exitprocs): Use weak reference
	to free.
	* configure: Regenerate.
	* newlib.hin: Regenerate.
@
text
@a10 2
/* Make this a weak reference to avoid pulling in malloc.  */
void * malloc(size_t) __attribute__((weak));
d38 3
a40 2
      if (!malloc)
	return -1;
d56 1
@


1.3
log
@
2004-09-15  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.host: Reverting 2004-09-14 change as fix has occurred on
        Cygwin side.
        * configure.in: Ditto.
        * libc/configure.in: Ditto.
        * libc/sys/configure.in: Ditto.
        * configure: Ditto.
        * libc/configure: Ditto.
        * libc/sys/configure: Ditto.
        * libc/include/sys/reent.h: Ditto.
        * libc/stdlib/__atexit.c: Ditto.
        * libc/stdlib/__call_atexit.c: Ditto.
        * libc/stdlib/cxa_atexit.c: Ditto.
        * libc/stdlib/cxa_finalize.c: Ditto.
        * libc/sys/cygwin/Makefile.am: Removed again.
        * libc/sys/cygwin/Makefile.in: Ditto.
        * libc/sys/cygwin/aclocal.m4: Ditto.
        * libc/sys/cygwin/configure: Ditto.
        * libc/sys/cygwin/configure.in: Ditto.
        * libc/sys/cygwin/dummy.c: Ditto.
        * libc/sys/cygwin/sys/reent.h: Ditto.
@
text
@d38 3
d56 1
@


1.2
log
@
2004-09-14  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.host: Add Cygwin sys directory.
        * configure.in: Do not set CRT0 for cygwin.
        * libc/configure.in: Ditto.
        * libc/sys/configure.in: Ditto.
        * configure: Regenerated.
        * libc/configure: Ditto.
        * libc/sys/configure: Ditto.
        * libc/include/sys/reent.h: Add __REENT_HAS_CXA_SUPPORT flag.
        * libc/stdlib/__atexit.c: Keep cxa support protected by new
        __REENT_HAS_CXA_SUPPORT flag.
        * libc/stdlib/__call_atexit.c: Ditto.
        * libc/stdlib/cxa_atexit.c: Ditto.
        * libc/stdlib/cxa_finalize.c: Ditto.
        * libc/sys/cygwin/Makefile.am: New file.
        * libc/sys/cygwin/Makefile.in: Ditto.
        * libc/sys/cygwin/aclocal.m4: Ditto.
        * libc/sys/cygwin/configure: Ditto.
        * libc/sys/cygwin/configure.in: Ditto.
        * libc/sys/cygwin/dummy.c: Ditto.
        * libc/sys/cygwin/sys/reent.h: Ditto.  This file is stabilized
        version of reent.h.
@
text
@a50 1
#ifdef __REENT_HAS_CXA_SUPPORT
a52 1
#endif
a70 1
#ifdef __REENT_HAS_CXA_SUPPORT
a71 1
#endif
a77 1
#ifdef __REENT_HAS_CXA_SUPPORT
a80 1
#endif
@


1.1
log
@
2004-09-09  Paul Brook  <paul@@codesourcery.com>

        * libc/include/sys/reent.h (struct _on_exit_args): Add _dso_handle
        and _is_cxa.
        (struct _atexit): Add _next when _REENT_SMALL.
        (struct _reent): Add _atexit0 when _REENT_SMALL.
        (_REENT_INIT_PTR): Adjust.
        * libc/stdlib/Makefile.am (GENERAL_SOURCES): Add __atexit.c and
        __call_exit.c.
        (EXTENDED_SOURCES): Add cxa_atexit.c and cxa_finalize.c.
        * libc/stdlib/Makefile.in: Regenerate.
        * libc/stdlib/__atexit.c: New file.
        * libc/stdlib/__call_atexit.c: New file.
        * libc/stdlib/atexit.h: Remove old definitions.  Add new.
        * libc/stdlib/atexit.c (atexit): Use __register_exitproc.
        * libc/stdlib/cxa_atexit.c: New file.
        * libc/stdlib/cxa_finalize.c: New file.
        * libc/stdlib/exit.c (exit): Use __call_exitprocs.
        * libc/stdlib/on_exit.c (on_exit): Use __register_exitproc.
        2004-09-09  Jeff Johnston  <jjohnstn@@redhat.com>
        * libc/reent/reent.c [_REENT_SMALL]: Fix reference to
        _on_exit_args_ptr.
@
text
@d11 1
d51 1
d54 1
d73 1
d75 1
d81 2
a83 1
      args->_fntypes |= (1 << p->_ind);
d86 1
@

