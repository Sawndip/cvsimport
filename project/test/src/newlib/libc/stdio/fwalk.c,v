head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	newlib-2_2_0:1.12.0.2
	cygwin-1_7_33-release:1.12
	cygwin-1_7_32-release:1.11
	cygwin-1_7_31-release:1.11
	cygwin-1_7_30-release:1.11
	cygwin-1_7_29-release:1.11
	cygwin-1_7_28-release:1.11
	newlib-2_1_0:1.11
	cygwin-1_7_27-release:1.11
	cygwin-1_7_26-release:1.11
	cygwin-1_7_25-release:1.11
	cygwin-1_7_24-release:1.11
	cygwin-1_7_23-release:1.11
	cygwin-1_7_22-release:1.11
	cygwin-1_7_21-release:1.11
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.10.0.4
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	newlib-2_0_0:1.10
	cygwin-1_7_17-release:1.10
	cygwin-64bit-branch:1.10.0.2
	cygwin-1_7_16-release:1.10
	cygwin-1_7_15-release:1.10
	cygwin-1_7_14_2-release:1.10
	cygwin-1_7_14-release:1.10
	cygwin-1_7_12-release:1.10
	cygwin-1_7_11-release:1.10
	cygwin-1_7_10-release:1.10
	newlib-1_20_0:1.10
	cygwin-1_7_9-release:1.10
	cygwin-1_7_8-release:1.10
	newlib-1_19_0:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.9
	cygwin-1_7_4-release:1.9
	cygwin-1_7_3-release:1.9
	cygwin-1_7_2-release:1.9
	newlib-1_18_0:1.9
	cygwin-1_7_1-release:1.9
	newlib-1_17_0-arc:1.8.0.10
	binutils-arc-20080908-branch:1.8.0.8
	binutils-arc-20080908-branchpoint:1.8
	newlib-1_17_0:1.8
	newlib-1_16_0:1.8
	newlib-1_15_0:1.8
	newlib-csl-coldfire-4_1-32:1.8
	newlib-csl-sourcerygxx-4_1-32:1.8
	newlib-csl-innovasic-fido-3_4_4-33:1.8
	newlib-csl-coldfire-4_1-30:1.8
	newlib-csl-sourcerygxx-4_1-30:1.8
	newlib-csl-coldfire-4_1-28:1.8
	newlib-csl-sourcerygxx-4_1-28:1.8
	newlib-csl-arm-2006q3-27:1.8
	newlib-csl-sourcerygxx-4_1-27:1.8
	newlib-csl-arm-2006q3-26:1.8
	newlib-csl-sourcerygxx-4_1-26:1.8
	newlib-csl-sourcerygxx-4_1-24:1.8
	newlib-csl-sourcerygxx-4_1-23:1.8
	newlib-csl-sourcerygxx-4_1-21:1.8
	newlib-csl-arm-2006q3-21:1.8
	newlib-csl-arm-2006q3-19:1.8
	newlib-csl-sourcerygxx-4_1-19:1.8
	newlib-csl-sourcerygxx-4_1-18:1.8
	newlib-csl-sourcerygxx-3_4_4-25:1.8
	newlib-csl-sourcerygxx-4_1-17:1.8
	cr-0x5f1:1.8.0.6
	newlib-csl-sourcerygxx-4_1-14:1.8
	newlib-csl-sourcerygxx-4_1-13:1.8
	newlib-csl-sourcerygxx-4_1-12:1.8
	newlib-csl-sourcerygxx-4_1-9:1.8
	newlib-csl-sourcerygxx-4_1-8:1.8
	newlib-csl-sourcerygxx-4_1-7:1.8
	newlib-csl-arm-2006q1-6:1.8
	newlib-csl-sourcerygxx-4_1-6:1.8
	newlib-csl-sourcerygxx-4_1-5:1.8
	newlib-csl-sourcerygxx-4_1-4:1.8
	newlib-autotools-branch:1.8.0.4
	newlib-csl-20060320-branch:1.8.0.2
	newlib-csl-20060320-branchpoint:1.8
	newlib-1_14_0:1.8
	newlib-csl-arm-2005-q1b:1.8
	newlib-csl-arm-2005-q1a:1.8
	newlib-1_13_0:1.8
	csl-arm-2004-q3:1.8
	csl-arm-2004-q1a:1.7
	csl-arm-2004-q1:1.5
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.1.1.1
	w32api-2_2:1.1.1.1
	mingw-runtime-2_4:1.1.1.1
	newlib-1_11_0:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	newlib-1_10_0:1.1.1.1
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.12
date	2014.09.05.09.31.32;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.09.13.07.16;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.28.10.49.11;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.12.22.19.11;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.16.21.26.51;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.28.18.02.38;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.23.20.01.55;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.08.22.26.50;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.25.22.29.17;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.31.00.39.07;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.20.32.04;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* libc/stdio/fwalk.c (_fwalk_reent): Remove redundant test.
@
text
@/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
/* No user fns here.  Pesch 15apr92. */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "%W% (Berkeley) %G%";
#endif /* LIBC_SCCS and not lint */

#include <_ansi.h>
#include <reent.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include "local.h"

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
  register FILE *fp;
  register int n, ret = 0;
  register struct _glue *g;

  /*
   * It should be safe to walk the list without locking it;
   * new nodes are only added to the end and none are ever
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
}

/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
  register FILE *fp;
  register int n, ret = 0;
  register struct _glue *g;

  /*
   * It should be safe to walk the list without locking it;
   * new nodes are only added to the end and none are ever
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
}
@


1.11
log
@	* libc/stdio/fwalk.c (_fwalk): Remove redundant test.
@
text
@d76 2
a77 5
      if (fp->_flags != 0)
        {
          if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
            ret |= (*reent_function) (ptr, fp);
        }
@


1.10
log
@	* libc/stdio/fclose.c: Only use sfp lock to guard non-atomic
	changes of flags and fp lock.
	* libc/stdio/freopen.c: Ditto.
	* libc/stdio/freopen64.c: Ditto.
	* libc/stdio/fgetc.c: Revert change from 2009-04-24, remove sfp locks
	which guard entire function to avoid potential deadlocks when using
	stdio functions in multiple thraeds.
	* libc/stdio/fgets.c: Ditto.
	* libc/stdio/fgetwc.c: Ditto.
	* libc/stdio/fgetws.c: Ditto.
	* libc/stdio/fread.c: Ditto.
	* libc/stdio/fseek.c: Ditto.
	* libc/stdio/getc.c: Ditto.
	* libc/stdio/getdelim.c: Ditto.
	* libc/stdio/gets.c: Ditto.
	* libc/stdio/vfscanf.c: Ditto.
	* libc/stdio/vfwscanf.c: Ditto.

	* libc/stdio/fflush.c (_fflush_r): Split out core functionality into
	new function __sflush_r.  Just lock file and call __sflush_r from here.
	* libc/stdio/fwalk.c (_fwalk): Remove static helper function and move
	functionality back into main function. Don't walk a file with flags
	value of 1.  Add comment.
	(_fwalk_reent): Ditto.
	* libc/stdio/local.h (__sflush_r): Declare.
	* libc/stdio/refill.c (__srefill): Before calling fwalk, set flags
	value to 1 so this file pointer isn't walked.  Revert flags afterwards
	and call __sflush_r for this fp if necessary.  Add comments.
@
text
@d49 2
a50 5
      if (fp->_flags != 0)
        {
          if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
            ret |= (*function) (fp);
        }
@


1.9
log
@
2009-01-12  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdio/fwalk.c (__fwalk, __fwalk_reent): Remove locking of
        each fp.  Let the function being called lock the fp, if necessary.
@
text
@d30 2
a31 2
static int
_DEFUN(__fwalk, (ptr, function),
d39 8
d51 1
a51 1
          if (fp->_flags != 0 && fp->_file != -1)
d60 2
a61 2
static int
_DEFUN(__fwalk_reent, (ptr, reent_function),
d69 8
d81 1
a81 1
          if (fp->_flags != 0 && fp->_file != -1)
a86 38

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function)(FILE *))
{
  register int ret = 0;

  __sfp_lock_acquire ();

  /* Must traverse given list for streams.  Note that _GLOBAL_REENT
     only walked once in exit().  */
  ret |= __fwalk (ptr, function);

  __sfp_lock_release ();

  return ret;
}

/* Special version of _fwalk which handles a function pointer to a
   reentrant I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
  register int ret = 0;

  __sfp_lock_acquire ();

  /* Must traverse given list for streams.  Note that _GLOBAL_REENT
     only walked once in exit().  */
  ret |= __fwalk_reent (ptr, reent_function);

  __sfp_lock_release ();

  return ret;
}
@


1.8
log
@
2004-09-16  Antony King  <antony.king@@st.com>

        * libc/stdio/fwalk.c (_fwalk): Remove check for _GLOBAL_REENT
        and only walk the reentrancy parameter.
        (_fwalk_reent): Ditto.
        * libc/stdlib/exit.c: Remove out of date _REENT_ONLY check.
@
text
@a42 1
          _flockfile (fp);
a44 1
          _funlockfile (fp);
a64 1
          _flockfile (fp);
a66 1
          _funlockfile (fp);
@


1.7
log
@
2004-04-28  Artem B. Bityuckiy  <abitytsky@@softminecorp.com>

        * libc/stdio/local.h (_fwalk_reent): Specify prototype of
        function pointer argument.
        * libc/stdio/fwalk.c (_fwalk, _fwalk_reent): Change prototypes
        to specify function pointer arguments.
        (__fwalk, __fwalk_reent): Ditto.
@
text
@d85 3
a87 6
  /* Must traverse given list for std streams.  */
  if (ptr != _GLOBAL_REENT)
    ret |= __fwalk (ptr, function);

  /* Must traverse global list for all other streams.  */
  ret |= __fwalk (_GLOBAL_REENT, function);
d105 3
a107 6
  /* Must traverse given list for std streams.  */
  if (ptr != _GLOBAL_REENT)
    ret |= __fwalk_reent (ptr, reent_function);

  /* Must traverse global list for all other streams.  */
  ret |= __fwalk_reent (_GLOBAL_REENT, reent_function);
@


1.6
log
@
2004-04-23  Artem B. Bityuckiy  <abitytsky@@softminecorp.com>

        * libc/stdio/asprintf.c libc/stdio/clearerr.c,
        libc/stdio/fclose.c libc/stdio/fcloseall.c libc/stdio/fdopen.c,
        libc/stdio/feof.c libc/stdio/ferror.c libc/stdio/fflush.c,
        libc/stdio/fgetc.c libc/stdio/fgetpos.c libc/stdio/fgets.c,
        libc/stdio/fileno.c libc/stdio/findfp.c libc/stdio/fiprintf.c,
        libc/stdio/flags.c libc/stdio/fopen.c libc/stdio/fprintf.c,
        libc/stdio/fputc.c libc/stdio/fputs.c libc/stdio/fread.c,
        libc/stdio/freopen.c libc/stdio/fscanf.c libc/stdio/fseek.c,
        libc/stdio/fseeko.c libc/stdio/fsetpos.c libc/stdio/ftell.c,
        libc/stdio/ftello.c libc/stdio/fvwrite.c libc/stdio/fwalk.c,
        libc/stdio/fwrite.c libc/stdio/getc.c libc/stdio/getc_u.c,
        libc/stdio/getchar.c libc/stdio/getchar_u.c,
        libc/stdio/getdelim.c libc/stdio/getline.c libc/stdio/gets.c,
        libc/stdio/getw.c libc/stdio/iprintf.c libc/stdio/local.h,
        libc/stdio/makebuf.c libc/stdio/mktemp.c libc/stdio/perror.c,
        libc/stdio/printf.c libc/stdio/putc.c libc/stdio/putc_u.c,
        libc/stdio/putchar.c libc/stdio/putchar_u.c libc/stdio/puts.c,
        libc/stdio/putw.c libc/stdio/refill.c libc/stdio/remove.c,
        libc/stdio/rename.c libc/stdio/rewind.c libc/stdio/rget.c,
        libc/stdio/scanf.c libc/stdio/setbuf.c libc/stdio/setbuffer.c,
        libc/stdio/setlinebuf.c libc/stdio/setvbuf.c,
        libc/stdio/siprintf.c libc/stdio/snprintf.c,
        libc/stdio/sprintf.c libc/stdio/sscanf.c libc/stdio/stdio.c,
        libc/stdio/tmpfile.c libc/stdio/tmpnam.c libc/stdio/ungetc.c,
        libc/stdio/vasprintf.c libc/stdio/vfieeefp.h,
        libc/stdio/vfprintf.c libc/stdio/vfscanf.c,
        libc/stdio/vprintf.c libc/stdio/vscanf.c,
        libc/stdio/vsnprintf.c libc/stdio/vsprintf.c,
        libc/stdio/vsscanf.c libc/stdio/wbuf.c,
        libc/stdio/wsetup.c: Perform minor formatting changes.  Move
        copyright notices to top of file, ensure that <_ansi.h> is
        included, be consistent with open parentheses, use _DEFUN macro,
        include "local.h" where needed, and remove various compiler
        warnings.
@
text
@d33 1
a33 1
       register int (*function) ())
d57 1
a57 1
       register int (*reent_function) ())
d79 1
a79 1
       register int (*function)())
d102 1
a102 1
       register int (*reent_function) ())
@


1.5
log
@
2004-04-08  Artem B. Bityuckiy  <abitytsky@@softminecorp.com>

        * libc/stdio/fclose.c (_fclose_r): New function.
        * libc/stdio/freopen.c (_freopen_r): Call _fclose_r.
        * libc/stdio/fcloseall.c (_fcloseall_r): Call _fwalk_reent.
        * libc/stdio64/freopen64.c (_freopen64_r): Use _fclose_r.
        * libc/include/stdio.h (_fclose_r): New prototype.
        * libc/stdio/fopen.c: Fix typo in comment.

2004-04-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdio/fwalk.c (_fwalk_reent): New version of _fwalk
        to handle _r reentrant functions.
@
text
@a0 2
/* No user fns here.  Pesch 15apr92. */

d17 1
d23 2
d31 3
a33 3
__fwalk (ptr, function)
     struct _reent *ptr;
     register int (*function) ();
d55 3
a57 3
__fwalk_reent (ptr, reent_function)
     struct _reent *ptr;
     register int (*reent_function) ();
d77 3
a79 3
_fwalk (ptr, function)
     struct _reent *ptr;
     register int (*function) ();
d100 3
a102 3
_fwalk_reent (ptr, reent_function)
     struct _reent *ptr;
     register int (*reent_function) ();
@


1.4
log
@
2004-03-25  Thomas Pfaff  <tpfaff@@gmx.net>

        * libc/stdio/fclose.c (fclose): Protect file pointer list when
        releasing a file.
         * libc/stdio/fcloseall.c (_fcloseall_r): Close all files via
        fwalk.
        * libc/stdio/fdopen.c (_fdopen_r): Add calls to
        _flockfile/_funlockfile.
        * libc/stdio/findfp.c: Move __sfp_lock. Change __sfp_lock type
        to recursive.
        Change __lock_acquire/__lock_release calls for __sfp_lock to
        __sfp_lock_acquire/__sfp_lock_release throughout.
        (std): Make sure that file lock is only initialized once.
        (__sfp): Move _file initialization. Initialize file lock.
        (__sfp_lock_acquire): New function.
        (__sfp_lock_release): Ditto.
        (__fp_lock_all): Remove __sfp_lock_acquire call.
        (__fp_unlock_all): Remove __sfp_lock_release call.
        * libc/stdio/fopen.c (_fopen_r): Protect file pointer list.
        Add calls to _flockfile/_funlockfile. Remove
        __lock_init_recursive call.
        * libc/stdio/freopen.c (_freopen_r): Protect file pointer list.
        * libc/stdio/fwalk.c (__fwalk): New static function.
        (_fwalk): Protect file pointer list. Use __fwalk to walk through
        file pointers.
        * libc/stdio/local.h: Add defines for
        __sfp_lock_acquire/__sfp_lock_release when
        single threaded. Add function prototypes otherwise.
        * libc/stdio64/fdopen64.c (_fdopen64_r): Add calls to
        _flockfile/_funlockfile.
        * libc/stdio/fopen64.c (_fopen64_r): Protect file pointer list.
        Add calls to _flockfile/_funlockfile. Remove
         __lock_init_recursive call.
        * libc/stdio/freopen64.c (_freopen64_r): Protect file pointer
        list.
@
text
@d51 24
d90 23
@


1.3
log
@
2004-01-30  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdio/fwalk.c (_fwalk.c): Don't traverse the
        file chain on the passed in reentrancy struct if it
        is _GLOBAL_REENT.
@
text
@d29 2
a30 2
int
_fwalk (ptr, function)
d38 22
d62 1
a62 6
    {
      for (g = &ptr->__sglue; g != NULL; g = g->_next)
        for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
          if (fp->_flags != 0)
	    ret |= (*function) (fp);
    }
d65 3
a67 4
  for (g = &_GLOBAL_REENT->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0)
	ret |= (*function) (fp);
@


1.2
log
@
2004-01-30  Thomas Pfaff  <tpfaff@@gmx.net>
            Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/stdio/fwalk.c (_fwalk): Traverse the given reentrancy
        struct for std streams and traverse the global reeentrancy
        struct for all other streams.
@
text
@d39 7
a45 4
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0)
	ret |= (*function) (fp);
@


1.1
log
@Initial revision
@
text
@d38 1
d43 7
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
