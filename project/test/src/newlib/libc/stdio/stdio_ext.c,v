head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.2;
locks; strict;
comment	@ * @;


1.2
date	2014.12.18.10.08.09;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2014.12.11.16.53.32;	author yselkowitz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* stdio.tex: Add menu entries for __fsetlocking and stdio_ext.
	* stdio_ext.c: Add "stdio_ext" to synopsis.
@
text
@/*
FUNCTION
<<stdio_ext>>,<<__fbufsize>>,<<__fpending>>,<<__flbf>>,<<__freadable>>,<<__fwritable>>,<<__freading>>,<<__fwriting>>---access internals of FILE structure

INDEX
	__fbufsize
INDEX
	__fpending
INDEX
	__flbf
INDEX
	__freadable
INDEX
	__fwritable
INDEX
	__freading
INDEX
	__fwriting

ANSI_SYNOPSIS
	#include <stdio.h>
	#include <stdio_ext.h>
	size_t __fbufsize(FILE *<[fp]>);
	size_t __fpending(FILE *<[fp]>);
	int __flbf(FILE *<[fp]>);
	int __freadable(FILE *<[fp]>);
	int __fwritable(FILE *<[fp]>);
	int __freading(FILE *<[fp]>);
	int __fwriting(FILE *<[fp]>);

DESCRIPTION
These functions provides access to the internals of the FILE structure <[fp]>.

RETURNS
<<__fbufsize>> returns the number of bytes in the buffer of stream <[fp]>.

<<__fpending>> returns the number of bytes in the output buffer of stream <[fp]>.

<<__flbf>> returns nonzero if stream <[fp]> is line-buffered, and <<0>> if not.

<<__freadable>> returns nonzero if stream <[fp]> may be read, and <<0>> if not.

<<__fwritable>> returns nonzero if stream <[fp]> may be written, and <<0>> if not.

<<__freading>> returns nonzero if stream <[fp]> if the last operation on
it was a read, or if it read-only, and <<0>> if not.

<<__fwriting>> returns nonzero if stream <[fp]> if the last operation on
it was a write, or if it write-only, and <<0>> if not.

PORTABILITY
These functions originate from Solaris and are also provided by GNU libc.

No supporting OS subroutines are required.
*/

#ifndef __rtems__

#include <_ansi.h>
#include <stdio.h>

/* Subroutine versions of the inline or macro functions. */

size_t
_DEFUN(__fbufsize, (fp),
       FILE * fp)
{
  return (size_t) fp->_bf._size;
}

size_t
_DEFUN(__fpending, (fp),
       FILE * fp)
{
  return fp->_p - fp->_bf._base;
}

int
_DEFUN(__flbf, (fp),
       FILE * fp)
{
  return (fp->_flags & __SLBF) != 0;
}

int
_DEFUN(__freadable, (fp),
       FILE * fp)
{
  return (fp->_flags & (__SRD | __SRW)) != 0;
}

int
_DEFUN(__fwritable, (fp),
       FILE * fp)
{
  return (fp->_flags & (__SWR | __SRW)) != 0;
}

int
_DEFUN(__freading, (fp),
       FILE * fp)
{
  return (fp->_flags & __SRD) != 0;
}

int
_DEFUN(__fwriting, (fp),
       FILE * fp)
{
  return (fp->_flags & __SWR) != 0;
}

#endif /* __rtems__ */
@


1.1
log
@* libc/include/stdio_ext.h: Rename __fwriteable to __fwritable.
[!__GNUC__]: Declare real functions for the macros, and make
the macros conditional on !__cplusplus.
* libc/stdio/Makefile.am (ELIX_4_SOURCES): Add stdio_ext.c.
(CHEWOUT_FILES): Add stdio_ext.def.
* libc/stdio/Makefile.in: Regenerate.
* libc/stdio/stdio.tex: Include stdio_ext.def.
* libc/stdio/stdio_ext.c: New file.
@
text
@d3 1
a3 1
<<__fbufsize>>, <<__fpending>>, <<__flbf>>, <<__freadable>>, <<__fwritable>> <<__freading>>, <<__fwriting>>,---access internals of FILE structure
@

