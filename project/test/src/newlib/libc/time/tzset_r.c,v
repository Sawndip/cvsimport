head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	newlib-2_2_0:1.12.0.6
	cygwin-1_7_33-release:1.12
	cygwin-1_7_32-release:1.12
	cygwin-1_7_31-release:1.12
	cygwin-1_7_30-release:1.12
	cygwin-1_7_29-release:1.12
	cygwin-1_7_28-release:1.12
	newlib-2_1_0:1.12
	cygwin-1_7_27-release:1.12
	cygwin-1_7_26-release:1.12
	cygwin-1_7_25-release:1.12
	cygwin-1_7_24-release:1.12
	cygwin-1_7_23-release:1.12
	cygwin-1_7_22-release:1.12
	cygwin-1_7_21-release:1.12
	cygwin-1_7_20-release:1.12
	cygwin-1_7_19-release:1.12
	cygwin-64bit-postmerge:1.12
	cygwin-64bit-premerge-branch:1.12.0.4
	cygwin-64bit-premerge:1.12
	cygwin-1_7_18-release:1.12
	newlib-2_0_0:1.12
	cygwin-1_7_17-release:1.12
	cygwin-64bit-branch:1.12.0.2
	cygwin-1_7_16-release:1.12
	cygwin-1_7_15-release:1.12
	cygwin-1_7_14_2-release:1.12
	cygwin-1_7_14-release:1.12
	cygwin-1_7_12-release:1.12
	cygwin-1_7_11-release:1.12
	cygwin-1_7_10-release:1.12
	newlib-1_20_0:1.12
	cygwin-1_7_9-release:1.10
	cygwin-1_7_8-release:1.10
	newlib-1_19_0:1.10
	cygwin-1_7_7-release:1.10
	cygwin-1_7_5-release:1.10
	cygwin-1_7_4-release:1.10
	cygwin-1_7_3-release:1.10
	cygwin-1_7_2-release:1.10
	newlib-1_18_0:1.10
	cygwin-1_7_1-release:1.10
	newlib-1_17_0-arc:1.10.0.2
	binutils-arc-20080908-branch:1.9.0.2
	binutils-arc-20080908-branchpoint:1.9
	newlib-1_17_0:1.10
	newlib-1_16_0:1.9
	newlib-1_15_0:1.9
	newlib-csl-coldfire-4_1-32:1.8
	newlib-csl-sourcerygxx-4_1-32:1.8
	newlib-csl-innovasic-fido-3_4_4-33:1.8
	newlib-csl-coldfire-4_1-30:1.8
	newlib-csl-sourcerygxx-4_1-30:1.8
	newlib-csl-coldfire-4_1-28:1.8
	newlib-csl-sourcerygxx-4_1-28:1.8
	newlib-csl-arm-2006q3-27:1.8
	newlib-csl-sourcerygxx-4_1-27:1.8
	newlib-csl-arm-2006q3-26:1.8
	newlib-csl-sourcerygxx-4_1-26:1.8
	newlib-csl-sourcerygxx-4_1-24:1.8
	newlib-csl-sourcerygxx-4_1-23:1.8
	newlib-csl-sourcerygxx-4_1-21:1.8
	newlib-csl-arm-2006q3-21:1.8
	newlib-csl-arm-2006q3-19:1.8
	newlib-csl-sourcerygxx-4_1-19:1.8
	newlib-csl-sourcerygxx-4_1-18:1.8
	newlib-csl-sourcerygxx-3_4_4-25:1.8
	newlib-csl-sourcerygxx-4_1-17:1.8
	cr-0x5f1:1.8.0.6
	newlib-csl-sourcerygxx-4_1-14:1.8
	newlib-csl-sourcerygxx-4_1-13:1.8
	newlib-csl-sourcerygxx-4_1-12:1.8
	newlib-csl-sourcerygxx-4_1-9:1.8
	newlib-csl-sourcerygxx-4_1-8:1.8
	newlib-csl-sourcerygxx-4_1-7:1.8
	newlib-csl-arm-2006q1-6:1.8
	newlib-csl-sourcerygxx-4_1-6:1.8
	newlib-csl-sourcerygxx-4_1-5:1.8
	newlib-csl-sourcerygxx-4_1-4:1.8
	newlib-autotools-branch:1.8.0.4
	newlib-csl-20060320-branch:1.8.0.2
	newlib-csl-20060320-branchpoint:1.8
	newlib-1_14_0:1.8
	newlib-csl-arm-2005-q1b:1.7
	newlib-csl-arm-2005-q1a:1.7
	newlib-1_13_0:1.5
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	newlib-1_11_0:1.2;
locks; strict;
comment	@ * @;


1.12
date	2011.06.14.14.31.59;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2011.06.14.07.50.40;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.06.19.21.29;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.15.20.10.25;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.08.22.44.16;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.23.19.08.58;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.19.16.44.42;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.09.21.36.48;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.08.18.12.28;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.03.18.42.09;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.26.18.56.09;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.17.21.23.31;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* libc/time/asctime_r.c (asctime_r): Replace call to sprintf with call
	to siprintf.
	* libc/time/strftime.c: Define snprintf to sniprintf in multibyte case.
	* libc/time/tzset_r.c: Define sscanf to siscanf.
@
text
@#include <_ansi.h>
#include <reent.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include "local.h"

#define sscanf siscanf	/* avoid to pull in FP functions. */

static char __tzname_std[11];
static char __tzname_dst[11];
static char *prev_tzenv = NULL;

_VOID
_DEFUN (_tzset_r, (reent_ptr),
        struct _reent *reent_ptr)
{
  char *tzenv;
  unsigned short hh, mm, ss, m, w, d;
  int sign, n;
  int i, ch;
  __tzinfo_type *tz = __gettzinfo ();

  if ((tzenv = _getenv_r (reent_ptr, "TZ")) == NULL)
      {
	TZ_LOCK;
	_timezone = 0;
	_daylight = 0;
	_tzname[0] = "GMT";
	_tzname[1] = "GMT";
	free(prev_tzenv);
	prev_tzenv = NULL;
	TZ_UNLOCK;
	return;
      }

  TZ_LOCK;

  if (prev_tzenv != NULL && strcmp(tzenv, prev_tzenv) == 0)
    {
      TZ_UNLOCK;
      return;
    }

  free(prev_tzenv);
  prev_tzenv = _malloc_r (reent_ptr, strlen(tzenv) + 1);
  if (prev_tzenv != NULL)
    strcpy (prev_tzenv, tzenv);

  /* ignore implementation-specific format specifier */
  if (*tzenv == ':')
    ++tzenv;  

  if (sscanf (tzenv, "%10[^0-9,+-]%n", __tzname_std, &n) <= 0)
    {
      TZ_UNLOCK;
      return;
    }
 
  tzenv += n;

  sign = 1;
  if (*tzenv == '-')
    {
      sign = -1;
      ++tzenv;
    }
  else if (*tzenv == '+')
    ++tzenv;

  mm = 0;
  ss = 0;
 
  if (sscanf (tzenv, "%hu%n:%hu%n:%hu%n", &hh, &n, &mm, &n, &ss, &n) < 1)
    {
      TZ_UNLOCK;
      return;
    }
  
  tz->__tzrule[0].offset = sign * (ss + SECSPERMIN * mm + SECSPERHOUR * hh);
  _tzname[0] = __tzname_std;
  tzenv += n;
  
  if (sscanf (tzenv, "%10[^0-9,+-]%n", __tzname_dst, &n) <= 0)
    { /* No dst */
      _tzname[1] = _tzname[0];
      _timezone = tz->__tzrule[0].offset;
      _daylight = 0;
      TZ_UNLOCK;
      return;
    }
  else
    _tzname[1] = __tzname_dst;

  tzenv += n;

  /* otherwise we have a dst name, look for the offset */
  sign = 1;
  if (*tzenv == '-')
    {
      sign = -1;
      ++tzenv;
    }
  else if (*tzenv == '+')
    ++tzenv;

  hh = 0;  
  mm = 0;
  ss = 0;
  
  n  = 0;
  if (sscanf (tzenv, "%hu%n:%hu%n:%hu%n", &hh, &n, &mm, &n, &ss, &n) <= 0)
    tz->__tzrule[1].offset = tz->__tzrule[0].offset - 3600;
  else
    tz->__tzrule[1].offset = sign * (ss + SECSPERMIN * mm + SECSPERHOUR * hh);

  tzenv += n;

  for (i = 0; i < 2; ++i)
    {
      if (*tzenv == ',')
        ++tzenv;

      if (*tzenv == 'M')
	{
	  if (sscanf (tzenv, "M%hu%n.%hu%n.%hu%n", &m, &n, &w, &n, &d, &n) != 3 ||
	      m < 1 || m > 12 || w < 1 || w > 5 || d > 6)
	    {
	      TZ_UNLOCK;
	      return;
	    }
	  
	  tz->__tzrule[i].ch = 'M';
	  tz->__tzrule[i].m = m;
	  tz->__tzrule[i].n = w;
	  tz->__tzrule[i].d = d;
	  
	  tzenv += n;
	}
      else 
	{
	  char *end;
	  if (*tzenv == 'J')
	    {
	      ch = 'J';
	      ++tzenv;
	    }
	  else
	    ch = 'D';
	  
	  d = strtoul (tzenv, &end, 10);
	  
	  /* if unspecified, default to US settings */
	  /* From 1987-2006, US was M4.1.0,M10.5.0, but starting in 2007 is
	   * M3.2.0,M11.1.0 (2nd Sunday March through 1st Sunday November)  */
	  if (end == tzenv)
	    {
	      if (i == 0)
		{
		  tz->__tzrule[0].ch = 'M';
		  tz->__tzrule[0].m = 3;
		  tz->__tzrule[0].n = 2;
		  tz->__tzrule[0].d = 0;
		}
	      else
		{
		  tz->__tzrule[1].ch = 'M';
		  tz->__tzrule[1].m = 11;
		  tz->__tzrule[1].n = 1;
		  tz->__tzrule[1].d = 0;
		}
	    }
	  else
	    {
	      tz->__tzrule[i].ch = ch;
	      tz->__tzrule[i].d = d;
	    }
	  
	  tzenv = end;
	}
      
      /* default time is 02:00:00 am */
      hh = 2;
      mm = 0;
      ss = 0;
      n = 0;
      
      if (*tzenv == '/')
	sscanf (tzenv, "/%hu%n:%hu%n:%hu%n", &hh, &n, &mm, &n, &ss, &n);

      tz->__tzrule[i].s = ss + SECSPERMIN * mm + SECSPERHOUR  * hh;
      
      tzenv += n;
    }

  __tzcalc_limits (tz->__tzyear);
  _timezone = tz->__tzrule[0].offset;  
  _daylight = tz->__tzrule[0].offset != tz->__tzrule[1].offset;

  TZ_UNLOCK;
}
@


1.11
log
@	* libc/time/tzset_r.c (tzset_r):  Correct behavior for changing from
	non-GMT to GMT, when un-setting TZ.  Set _timezone and _daylight even
	if no DST is given in TZ.
@
text
@d10 2
@


1.10
log
@2008-10-06  Craig Howland  <howland@@LGSInnovations.com>

	* libc/time/tzset_r.c (_tzset_r):  Change US default start/end dates to
	2007 law revision of start in 2nd Sunday in March, end 1st Sun in Nov.
@
text
@d31 2
d85 1
a85 1
    {
d87 2
@


1.9
log
@
2006-11-15  Till Straumann  <strauman@@slac.stanford.edu>

        * libc/time/tzset_r.c (_tzset_r): Initialize local variable.
@
text
@d150 2
d157 2
a158 2
		  tz->__tzrule[0].m = 4;
		  tz->__tzrule[0].n = 1;
d164 2
a165 2
		  tz->__tzrule[1].m = 10;
		  tz->__tzrule[1].n = 5;
a197 5





@


1.8
log
@
2005-11-08  Tom Walsh  <tom@@openhardware.net>

        * libc/time/tzvars.c: New file.
        * libc/time/tzset_r.c: Moved globals into tzvars.c
        so other time functions needn't link in __tzset_r and its
        dependencies.
        * libc/time/Makefile.am: Add the new file.
        * libc/time/Makefile.in: Regenerated.
@
text
@d107 1
@


1.7
log
@
2005-02-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/time.h [!CYGWIN](_timezone): Change to long.
        (__tzrule_type, __tzinfo_type): New types.
        (__gettzinfo): New function.
        * libc/sys/linux/include/time.h: Ditto.
        * libc/time/Makefile.am: Add gettzinfo.c.
        * libc/time/Makefile.in: Regenerated.
        * libc/time/local.h: Moved __tzrule_type to time.h.
        * libc/time/mktime.c: Call __gettzinfo to reference
        __tznorth, __tzyear, and __tzrule array.
        * libc/time/mktm_r.c: Ditto.
        * libc/time/strftime.c: Ditto.
        * libc/time/tzset_r.c: Ditto.  Also remove definition
        of __tzrule which is now in gettzinfo.c.  Change _timezone
        references to not cast to time_t.
        * libc/time/gettzinfo.c: New file.
@
text
@a13 5
/* default to GMT */
char *_tzname[2] = {"GMT", "GMT"};
int _daylight = 0;
long _timezone = 0;

@


1.6
log
@
2005-01-19  Shaun Jackman  <sjackman@@gmail.com>

        * tzset_r.c (_tzname): Add a comma.
@
text
@d17 1
a17 8
time_t _timezone = (time_t)0;

int __tzyear = 0;

int __tznorth = 1;

__tzrule_type __tzrule[2] = { {'J', 0, 0, 0, 0, (time_t)0, 0 }, 
			      {'J', 0, 0, 0, 0, (time_t)0, 0 } };
d27 1
d32 1
a32 1
	_timezone = (time_t)0;
d83 1
a83 1
  __tzrule[0].offset = sign * (ss + SECSPERMIN * mm + SECSPERHOUR * hh);
d113 1
a113 1
    __tzrule[1].offset = __tzrule[0].offset - 3600;
d115 1
a115 1
    __tzrule[1].offset = sign * (ss + SECSPERMIN * mm + SECSPERHOUR * hh);
d133 4
a136 4
	  __tzrule[i].ch = 'M';
	  __tzrule[i].m = m;
	  __tzrule[i].n = w;
	  __tzrule[i].d = d;
d158 4
a161 4
		  __tzrule[0].ch = 'M';
		  __tzrule[0].m = 4;
		  __tzrule[0].n = 1;
		  __tzrule[0].d = 0;
d165 4
a168 4
		  __tzrule[1].ch = 'M';
		  __tzrule[1].m = 10;
		  __tzrule[1].n = 5;
		  __tzrule[1].d = 0;
d173 2
a174 2
	      __tzrule[i].ch = ch;
	      __tzrule[i].d = d;
d189 1
a189 1
      __tzrule[i].s = ss + SECSPERMIN * mm + SECSPERHOUR  * hh;
d194 3
a196 3
  __tzcalc_limits (__tzyear);
  _timezone = (time_t)(__tzrule[0].offset);  
  _daylight = __tzrule[0].offset != __tzrule[1].offset;
@


1.5
log
@
2004-12-09  Alex Mogilnikov  <alx@@intellectronika.ru>

        * libc/time/tzset_r (_tzset_r): Properly skip over
        '/' when it is detected.
@
text
@d15 1
a15 1
char *_tzname[2] = {"GMT" "GMT"};
@


1.4
log
@
2004-12-08  Alex Mogilnikov  <alx@@intellectronika.ru>

        * libc/time/tzset_r (_tzset_r): Fix loop.
@
text
@d193 1
a193 1
	sscanf (tzenv, "%hu%n:%hu%n:%hu%n", &hh, &n, &mm, &n, &ss, &n);
@


1.3
log
@
2003-06-03  Till Straumann  <strauman@@SLAC.Stanford.EDU>

        * libc/time/tzset_r.c: Change local variables that are
        set via sscanf using the %h format specifier to be unsigned short
        instead of int.
@
text
@a124 3
  if (*tzenv == ',')
    ++tzenv;

d127 3
d190 1
d196 2
@


1.2
log
@
2002-08-26  Jeff Johnston  <jjohnstn@@redhat.com>

        * Makefile.am(LIBC_OBJECTLISTS): Add STDIO64_OBJECTLIST.
        * Makefile.in: Regenerated.
        * acinclude.m4: Add support for --enable-newlib-elix-level option.
        * aclocal.m4: Regenerated.
        * configure: Ditto.
        * configure.host: Add code to define _ELIX_LEVEL if
        --enable-newlib-elix-level option is used.
        * configure.in:
        * libc/aclocal.m4: Regenerated.
        * libc/configure: Ditto.
        * libc/argz/Makefile.am: Add EL/IX level checking.
        * libc/argz/Makefile.in: Regenerated.
        * libc/argz/dummy.c: New file.
        * libc/ctype/Makefile.am: Add EL/IX level checking.
        * libc/ctype/Makefile.in: Regenerated.
        * libc/locale/Makefile.am: Add EL/IX level checking.
        * libc/locale/Makefile.in: Regenerated.
        * libc/posix/Makefile.am: Add EL/IX level checking.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/telldir.c: Add EL/IX level checking.
        * libc/reent/Makefile.am: Ditto.
        * libc/reent/fstat64r.c: Ditto.
        * libc/reent/lseek64r.c: Ditto.
        * libc/reent/open64r.c: Ditto.
        * libc/reent/Makefile.in: Regenerated.
        * libc/search/Makefile.am: Add EL/IX level checking.
        * libc/search/Makefile.in: Regenerated.
        * libc/stdio/Makefile.am: Add EL/IX level checking.
        * libc/stdio/Makefile.in: Regenerated.
        * libc/stdio64/Makefile.am: Add EL/IX level checking.
        * libc/stdio64/Makefile.in: Regenerated.
        * libc/stdio64/dummy.c: New file.
        * libc/stdio64/fgetpos64.c: Fix so _LARGEFILE_64 macro is checked
        after first include.
        * libc/stdio64/fopen64.c: Ditto.
        * libc/stdio64/freopen64.c: Ditto.
        * libc/stdio64/fseeko64.c: Ditto.
        * libc/stdio64/fsetpos64.c: Ditto.
        * libc/stdio64/ftello64.c: Ditto.
        * libc/stdio64/tmpfile64.c: Ditto.
        * libc/stdlib/Makefile.am: Add EL/IX level checking.
        * libc/stdlib/Makefile.in: Regenerated.
        * libc/stdlib/mstats.c: Add EL/IX level checking.
        * libc/string/Makefile.am: Ditto.
        * libc/string/Makefile.in: Regenerated.
        * libc/sys/linux/Makefile.am: Add EL/IX level checking.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/aclocal.m4: Ditto.
        * libc/sys/linux/configure: Ditto.
        * libc/sys/linux/aio.c: Add EL/IX level checking.
        * libc/sys/linux/ftok.c: Ditto.
        * libc/sys/linux/getdate.c: Ditto.
        * libc/sys/linux/ids.c: Ditto.
        * libc/sys/linux/inode.c: Ditto.
        * libc/sys/linux/io.c: Ditto.
        * libc/sys/linux/process.c: Ditto.
        * libc/sys/linux/resource.c: Ditto.
        * libc/sys/linux/sched.c: Ditto.
        * libc/sys/linux/sig.c: Ditto.
        * libc/sys/linux/termios.c: Ditto.
        * libc/sys/linux/wait.c: Ditto plus add __waitpid and
        __libc___waitpid weak aliases.
        * libc/sys/linux/machine/i386/syscall.h: Add new _base macros
        that generate the code for a syscall, but do not create a
        weak alias.
        * libc/syscalls/Makefile.am: Add EL/IX level checking.
        * libc/syscalls/Makefile.in: Regenerated.
        * libc/time/tzset_r.c: Change to replace strdup with equivalent
        functionality.
        * libc/unix/Makefile.am: Add EL/IX level checking.
        * libc/unix/Makefile.in: Regenerated.
@
text
@d31 2
a32 1
  int hh, mm, ss, sign, m, w, d, n;
@


1.1
log
@
2002-04-17  Jeff Johnston  <jjohnstn@@redhat.com>

        *  libc/include/time.h (tzset, _tzset_r): Added prototypes.
        (strptime): Moved prototype to be within !__STRICT_ANSI__.
        (_tzname, _daylight, _timezone): No long __CYGWIN__ only.
        (tzname): Defined for all platforms.
        (daylight, timezone): Defined only for CYGWIN.
        *  libc/sys/linux/machine/i386/crt0.c: Add call to tzset() after
        environment set up.
        * libc/stdlib/setenv_r.c (_setenv_r): Call tzset() if the TZ
        environment variable is set.
        *  libc/time/Makefile.am: Add support for tzset.c, tzlock.c, and
        tzset_r.c.
        *  libc/time/Makefile.in: Regenerated.
        *  libc/time/gmtime.c (gmtime): Changed to call gmtime_r.
        *  libc/time/gmtime_r.c (gmtime_r): Changed to call _mktm_r.
        *  libc/time/lcltime_r.c (lcltime_r): Ditto.
        *  libc/time/local.h: New local header file.
        *  libc/time/mktime.c (mktime): Add timezone support.
        *  libc/time/mktm_r.c: New file which is the common engine
        for gmtime_r and lcltime_r.  This code has timezone support.
        *  libc/time/strftime.c (strftime): Add %Z timezone support.
        *  libc/time/tzlock.c: New file containing timezone lock stubs.
        *  libc/time/tzset.c: New file containing tzset() routine.
        *  libc/time/tzset_r.c: New file containing _tzset_r and
        internal routine for calculating timezone changes for specified year.
@
text
@d54 3
a56 1
  prev_tzenv = _strdup_r (reent_ptr, tzenv);
@

