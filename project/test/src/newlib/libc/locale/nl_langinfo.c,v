head	1.14;
access;
symbols
	cygwin-1_7_35-release:1.14
	cygwin-1_7_34-release:1.14
	newlib-2_2_0:1.14.0.6
	cygwin-1_7_33-release:1.14
	cygwin-1_7_32-release:1.14
	cygwin-1_7_31-release:1.14
	cygwin-1_7_30-release:1.14
	cygwin-1_7_29-release:1.14
	cygwin-1_7_28-release:1.14
	newlib-2_1_0:1.14
	cygwin-1_7_27-release:1.14
	cygwin-1_7_26-release:1.14
	cygwin-1_7_25-release:1.14
	cygwin-1_7_24-release:1.14
	cygwin-1_7_23-release:1.14
	cygwin-1_7_22-release:1.14
	cygwin-1_7_21-release:1.14
	cygwin-1_7_20-release:1.14
	cygwin-1_7_19-release:1.14
	cygwin-64bit-postmerge:1.14
	cygwin-64bit-premerge-branch:1.14.0.4
	cygwin-64bit-premerge:1.14
	cygwin-1_7_18-release:1.14
	newlib-2_0_0:1.14
	cygwin-1_7_17-release:1.14
	cygwin-64bit-branch:1.14.0.2
	cygwin-1_7_16-release:1.13
	cygwin-1_7_15-release:1.13
	cygwin-1_7_14_2-release:1.13
	cygwin-1_7_14-release:1.13
	cygwin-1_7_12-release:1.13
	cygwin-1_7_11-release:1.13
	cygwin-1_7_10-release:1.13
	newlib-1_20_0:1.13
	cygwin-1_7_9-release:1.13
	cygwin-1_7_8-release:1.13
	newlib-1_19_0:1.13
	cygwin-1_7_7-release:1.13
	cygwin-1_7_5-release:1.11
	cygwin-1_7_4-release:1.11
	cygwin-1_7_3-release:1.11
	cygwin-1_7_2-release:1.10
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.2.0.10
	binutils-arc-20080908-branch:1.2.0.8
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	cr-0x5f1:1.2.0.6
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.14
date	2012.08.08.11.04.16;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.03.09.25.32;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.28.09.59.37;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.27.21.04.49;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.22.10.53.04;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.18.17.35.15;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.06.18.28.33;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.24.12.18.20;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.22.13.03.42;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.20.13.18.24;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.15.08.08.50;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.07.16.45.23;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.06.19.57.51;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.01.56.03;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	Throughout, run newlib with -Wall -Werror option and fix bugs and
	compiler warnings found this way.

	* libc/stdio/freopen.c (_freopen_r): Fix bug setting _flags.

	* libc/include/stdio.h (_rename): Define when building newlib.
	* libc/include/sys/signal.h (_kill): Ditto.
	* libc/include/sys/stat.h (_mkdir): Ditto.
	* libc/include/sys/time.h (_gettimeofday): Ditto.
	* libc/include/sys/times.h (_times): Ditto.
	* libc/include/sys/wait.h (_wait): Ditto.
	* libc/locale/lmessages.c (empty): Don't define for Cygwin.
	* libc/locale/lmonetary.c (cnv): Ditto.
	* libc/locale/nl_langinfo.c (nl_langinfo): Ditto for variable s.
	* libc/posix/collate.c: Throughout cast to avoid compiler warning.
	* libc/posix/engine.c (matcher): Initialize dp to avoid compiler
	warning.
	* libc/posix/glob.c: Disable on Cygwin.  Explain why.
	* libc/posix/regcomp.c: Fix "uninitialized" compiler warnings.
	(dissect): Deliberately silence gcc compiler warning.  Add comment to
	explain why.
	* libc/posix/wordexp.c (wordexp): Remove num_bytes variable since result
	is never used.
	* libc/posix/popen.c (popen): Ditto for variable last.
	* libc/reent/mkdirr.c: Include sys/stat.h.
	* libc/reent/renamer.c: Include stdio.h.
	* libc/search/hash.c:  Throughout use underscored variants of the stat
	function family.
	(init_hash): Add missing definition for the __USE_INTERNAL_STAT64 case.
	* libc/search/hash_bigkey.c (__big_insert): Add parenthesis to avoid
	compiler warning.
	* libc/search/hash_page.c (overflow_page): Initalize freep to NULL to
	avoid compiler warning.
	* libc/stdio/asiprintf.c (_asiprintf_r): Cast unsigned char * to char *
	to avoid compiler warning.
	(asiprintf): Ditto.
	* libc/stdio/asprintf.c (_asprintf_r): Ditto.
	(asprintf): Ditto.
	* libc/stdio/vasiprintf.c (_vasiprintf_r): Ditto.
	* libc/stdio/vasprintf.c (_vasprintf_r): Ditto.
	* libc/stdio/mktemp.c (_gettemp): Cast to unsigned char in call to
	isdigit to avoid compiler warning.
	* libc/stdio/vfprintf.c (_VFPRINTF_R): Initialize variables used for
	grouping to avoid compiler warning.  Only define and set nseps and
	nrepeats if they are really used.
	* libc/stdio/vfwprintf.c (_VFWPRINTF_R): Ditto.  Only define state if
	it is really used.
	* libc/stdio/vfscanf.c (u_char): Revert to be defined as unsigned char.
	(__SVFSCANF_R): Cast fmt in call to __mbtowc.
	* libc/stdlib/mbtowc_r.c (JIS_state_table): Disable when building
	Cygwin.
	(JIS_action_table): Ditto.
	* libc/stdlib/wctomb_r.c (__utf8_wctomb): Add parenthesis to avoid
	compiler warning.
	* libc/string/strcasestr.c: Deliberately silence gcc compiler warning.
	Add comment to explain why.
	* libc/time/strptime.c (strptime): Cast to unsigned char in calls to
	isspace to avoid compiler warning.
	* libm/math/e_atan2.c (__ieee754_atan2): Add parenthesis to avoid
	compiler warning.
	* libm/math/e_exp.c (__ieee754_exp): Initialize k to 0 to avoid
	compiler warning.  Drop setting it to 0 later.
	* libm/math/ef_exp.c (__ieee754_expf): Ditto.
	* libm/math/e_pow.c (__ieee754_pow): Add braces to avoid compiler
	warning.
	* libm/math/ef_pow.c (__ieee754_powf): Ditto.
	* libm/math/er_lgamma.c (__ieee754_lgamma_r): Initialize nadj to 0 to
	avoid compiler warning.
	* libm/math/erf_lgamma.c (__ieee754_lgammaf_r): Ditto.
	* libm/math/e_rem_pio2.c (__ieee754_rem_pio2): Ditto for variable z.
	* libm/common/sf_round.c (roundf): Remove signbit variable since result
	is never used.
@
text
@/*-
 * Copyright (c) 2001 Alexey Zelkin <phantom@@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/cdefs.h>

#include <locale.h>
#include <langinfo.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>

#include "lctype.h"
#include "timelocal.h"
#include "lnumeric.h"
#include "lmonetary.h"
#include "lmessages.h"

#ifndef __CYGWIN__
#define TRANSITION_PERIOD_HACK
#endif

#undef offsetoff
#define _O(TYPE, MEMBER)  __builtin_offsetof (TYPE, MEMBER)

#define _NLITEM(cat,memb) { { cat:__get_current_##cat##_locale }, \
			      _O (struct lc_##cat##_T, memb) }

#ifdef __HAVE_LOCALE_INFO_EXTENDED__
static struct _nl_item_t
{
  union {
    struct lc_ctype_T *    (*ctype)(void);
    struct lc_time_T *     (*time)(void);
    struct lc_numeric_T *  (*numeric)(void);
    struct lc_monetary_T * (*monetary)(void);
    struct lc_messages_T * (*messages)(void);
    void *		   (*base)(void);
  };
  _off_t offset;
} nl_ext[] =
{
  /* First element has an nl_item value of _NL_LOCALE_EXTENDED_FIRST_ENTRY */
  _NLITEM (ctype, outdigits[0]),
  _NLITEM (ctype, outdigits[1]),
  _NLITEM (ctype, outdigits[2]),
  _NLITEM (ctype, outdigits[3]),
  _NLITEM (ctype, outdigits[4]),
  _NLITEM (ctype, outdigits[5]),
  _NLITEM (ctype, outdigits[6]),
  _NLITEM (ctype, outdigits[7]),
  _NLITEM (ctype, outdigits[8]),
  _NLITEM (ctype, outdigits[9]),
  _NLITEM (ctype, woutdigits[0]),
  _NLITEM (ctype, woutdigits[1]),
  _NLITEM (ctype, woutdigits[2]),
  _NLITEM (ctype, woutdigits[3]),
  _NLITEM (ctype, woutdigits[4]),
  _NLITEM (ctype, woutdigits[5]),
  _NLITEM (ctype, woutdigits[6]),
  _NLITEM (ctype, woutdigits[7]),
  _NLITEM (ctype, woutdigits[8]),
  _NLITEM (ctype, woutdigits[9]),
  _NLITEM (time, codeset),
  _NLITEM (time, wmon[1]),
  _NLITEM (time, wmon[2]),
  _NLITEM (time, wmon[3]),
  _NLITEM (time, wmon[4]),
  _NLITEM (time, wmon[5]),
  _NLITEM (time, wmon[6]),
  _NLITEM (time, wmon[7]),
  _NLITEM (time, wmon[8]),
  _NLITEM (time, wmon[9]),
  _NLITEM (time, wmon[10]),
  _NLITEM (time, wmon[11]),
  _NLITEM (time, wmon[12]),
  _NLITEM (time, wmonth[1]),
  _NLITEM (time, wmonth[2]),
  _NLITEM (time, wmonth[3]),
  _NLITEM (time, wmonth[4]),
  _NLITEM (time, wmonth[5]),
  _NLITEM (time, wmonth[6]),
  _NLITEM (time, wmonth[7]),
  _NLITEM (time, wmonth[8]),
  _NLITEM (time, wmonth[9]),
  _NLITEM (time, wmonth[10]),
  _NLITEM (time, wmonth[11]),
  _NLITEM (time, wmonth[12]),
  _NLITEM (time, wwday[1]),
  _NLITEM (time, wwday[2]),
  _NLITEM (time, wwday[3]),
  _NLITEM (time, wwday[4]),
  _NLITEM (time, wwday[5]),
  _NLITEM (time, wwday[6]),
  _NLITEM (time, wwday[7]),
  _NLITEM (time, wweekday[1]),
  _NLITEM (time, wweekday[2]),
  _NLITEM (time, wweekday[3]),
  _NLITEM (time, wweekday[4]),
  _NLITEM (time, wweekday[5]),
  _NLITEM (time, wweekday[6]),
  _NLITEM (time, wweekday[7]),
  _NLITEM (time, wX_fmt),
  _NLITEM (time, wx_fmt),
  _NLITEM (time, wc_fmt),
  _NLITEM (time, wam_pm[0]),
  _NLITEM (time, wam_pm[1]),
  _NLITEM (time, wdate_fmt),
  _NLITEM (time, wampm_fmt),
  _NLITEM (time, wera),
  _NLITEM (time, wera_d_fmt),
  _NLITEM (time, wera_d_t_fmt),
  _NLITEM (time, wera_t_fmt),
  _NLITEM (time, walt_digits),
  _NLITEM (numeric, codeset),
  _NLITEM (numeric, grouping),
  _NLITEM (numeric, wdecimal_point),
  _NLITEM (numeric, wthousands_sep),
  _NLITEM (monetary, int_curr_symbol),
  _NLITEM (monetary, currency_symbol),
  _NLITEM (monetary, mon_decimal_point),
  _NLITEM (monetary, mon_thousands_sep),
  _NLITEM (monetary, mon_grouping),
  _NLITEM (monetary, positive_sign),
  _NLITEM (monetary, negative_sign),
  _NLITEM (monetary, int_frac_digits),
  _NLITEM (monetary, frac_digits),
  _NLITEM (monetary, p_cs_precedes),
  _NLITEM (monetary, p_sep_by_space),
  _NLITEM (monetary, n_cs_precedes),
  _NLITEM (monetary, n_sep_by_space),
  _NLITEM (monetary, p_sign_posn),
  _NLITEM (monetary, n_sign_posn),
  _NLITEM (monetary, int_p_cs_precedes),
  _NLITEM (monetary, int_p_sep_by_space),
  _NLITEM (monetary, int_n_cs_precedes),
  _NLITEM (monetary, int_n_sep_by_space),
  _NLITEM (monetary, int_p_sign_posn),
  _NLITEM (monetary, int_n_sign_posn),
  _NLITEM (monetary, codeset),
  _NLITEM (monetary, wint_curr_symbol),
  _NLITEM (monetary, wcurrency_symbol),
  _NLITEM (monetary, wmon_decimal_point),
  _NLITEM (monetary, wmon_thousands_sep),
  _NLITEM (monetary, wpositive_sign),
  _NLITEM (monetary, wnegative_sign),
  _NLITEM (messages, codeset),
  _NLITEM (messages, wyesexpr),
  _NLITEM (messages, wnoexpr),
  _NLITEM (messages, wyesstr),
  _NLITEM (messages, wnostr),
};
#endif /* __HAVE_LOCALE_INFO_EXTENDED__ */

#define _REL(BASE) ((int)item-BASE)

extern char *__locale_charset ();

char *
_DEFUN(nl_langinfo, (item), 
       nl_item item) {

   char *ret, *cs;
#ifndef __CYGWIN__
   char *s;
#endif
   static char *csym = NULL;
#ifdef TRANSITION_PERIOD_HACK
   static char *cset = NULL;
#endif /* TRANSITION_PERIOD_HACK */
   char *nptr;

   switch (item) {
#ifdef __HAVE_LOCALE_INFO__
	case _NL_MESSAGES_CODESET:
	      	ret = (char *) __get_current_messages_locale ()->codeset;
		goto do_codeset;
#ifdef __HAVE_LOCALE_INFO_EXTENDED__
	case _NL_TIME_CODESET:
	      	ret = (char *) __get_current_time_locale ()->codeset;
		goto do_codeset;
	case _NL_NUMERIC_CODESET:
	      	ret = (char *) __get_current_numeric_locale ()->codeset;
		goto do_codeset;
	case _NL_MONETARY_CODESET:
	      	ret = (char *) __get_current_monetary_locale ()->codeset;
		goto do_codeset;
#ifdef __CYGWIN__
	case _NL_COLLATE_CODESET:
		{
		  extern const char *__get_current_collate_codeset (void);
		  ret = (char *) __get_current_collate_codeset ();
		  goto do_codeset;
		}
#endif /* __CYGWIN__ */
#endif /* __HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
	case CODESET:
#ifdef __CYGWIN__
		ret = __locale_charset ();
#endif
do_codeset:
#ifdef __CYGWIN__
		/* Convert charset to Linux compatible codeset string. */
		if (ret[0] == 'A'/*SCII*/)
		  ret = "ANSI_X3.4-1968";
		else if (ret[0] == 'E')
		  {
		    if (strcmp (ret, "EUCJP") == 0)
		      ret = "EUC-JP";
		    else if (strcmp (ret, "EUCKR") == 0)
		      ret = "EUC-KR";
		    else if (strcmp (ret, "EUCCN") == 0)
		      ret = "GB2312";
		  }
		else if (ret[0] == 'C'/*Pxxxx*/)
		  {
		    if (strcmp (ret + 2, "874") == 0)
		      ret = "TIS-620";
		    else if (strcmp (ret + 2, "20866") == 0)
		      ret = "KOI8-R";
		    else if (strcmp (ret + 2, "21866") == 0)
		      ret = "KOI8-U";
		    else if (strcmp (ret + 2, "101") == 0)
		      ret = "GEORGIAN-PS";
		    else if (strcmp (ret + 2, "102") == 0)
		      ret = "PT154";
		  }
		else if (ret[0] == 'S'/*JIS*/)
		  {
		    /* Cygwin uses MSFT's implementation of SJIS, which differs
		       in some codepoints from the real thing, especially
		       0x5c: yen sign instead of backslash,
		       0x7e: overline instead of tilde.
		       We can't use the real SJIS since otherwise Win32
		       pathnames would become invalid.  OTOH, if we return
		       "SJIS" here, then libiconv will do mb<->wc conversion
		       differently to our internal functions.  Therefore we
		       return what we really implement, CP932.  This is handled
		       fine by libiconv. */
		    ret = "CP932";
		  }
#else
		ret = "";
		if ((s = setlocale(LC_CTYPE, NULL)) != NULL) {
			if ((cs = strchr(s, '.')) != NULL) {
				ret = cs + 1;
#ifdef TRANSITION_PERIOD_HACK
				if (strncmp(ret, "ISO_", 4) == 0) {
					int slen = strlen(ret);

                                        nptr = realloc(cset, slen);

                                        if (!nptr && cset)
                                          free (cset);

                                        cset = nptr;
					if (cset != NULL) {
						strcpy(cset, "ISO");
						strcat(cset, ret + 4);
						ret = cset;
					} else
						ret = "";
				} else if (strcmp(ret, "EUC") == 0) {
					if (strncmp(s, "ja_JP", 5) == 0)
						ret = "eucJP";
					else if (strncmp(s, "ko_KR", 5) == 0)
						ret = "eucKR";
					else if (strncmp(s, "zh_CN", 5) == 0)
						ret = "eucCN";
				} else if (strcmp(ret, "ASCII") == 0)
					ret = "US-ASCII";
#endif /* TRANSITION_PERIOD_HACK */
			} else if (strcmp(s, "C") == 0 ||
				   strcmp(s, "POSIX") == 0
#ifdef TRANSITION_PERIOD_HACK
				   || strstr(s, "ASCII") != NULL
#endif /* TRANSITION_PERIOD_HACK */
				  )
				ret = "US-ASCII";
		}
#endif /* __CYGWIN__ */
		break;
	case D_T_FMT:
		ret = (char *) __get_current_time_locale()->c_fmt;
		break;
	case D_FMT:
		ret = (char *) __get_current_time_locale()->x_fmt;
		break;
	case T_FMT:
		ret = (char *) __get_current_time_locale()->X_fmt;
		break;
	case T_FMT_AMPM:
		ret = (char *) __get_current_time_locale()->ampm_fmt;
		break;
	case AM_STR:
		ret = (char *) __get_current_time_locale()->am_pm[0];
		break;
	case PM_STR:
		ret = (char *) __get_current_time_locale()->am_pm[1];
		break;
	case DAY_1: case DAY_2: case DAY_3:
	case DAY_4: case DAY_5: case DAY_6: case DAY_7:
		ret = (char*) __get_current_time_locale()->weekday[_REL(DAY_1)];
		break;
	case ABDAY_1: case ABDAY_2: case ABDAY_3:
	case ABDAY_4: case ABDAY_5: case ABDAY_6: case ABDAY_7:
		ret = (char*) __get_current_time_locale()->wday[_REL(ABDAY_1)];
		break;
	case MON_1: case MON_2: case MON_3: case MON_4:
	case MON_5: case MON_6: case MON_7: case MON_8:
	case MON_9: case MON_10: case MON_11: case MON_12:
		ret = (char*) __get_current_time_locale()->month[_REL(MON_1)];
		break;
	case ABMON_1: case ABMON_2: case ABMON_3: case ABMON_4:
	case ABMON_5: case ABMON_6: case ABMON_7: case ABMON_8:
	case ABMON_9: case ABMON_10: case ABMON_11: case ABMON_12:
		ret = (char*) __get_current_time_locale()->mon[_REL(ABMON_1)];
		break;
	case ERA:
		ret = (char*) __get_current_time_locale()->era;
		break;
	case ERA_D_FMT:
		ret = (char*) __get_current_time_locale()->era_d_fmt;
		break;
	case ERA_D_T_FMT:
		ret = (char*) __get_current_time_locale()->era_d_t_fmt;
		break;
	case ERA_T_FMT:
		ret = (char*) __get_current_time_locale()->era_t_fmt;
		break;
	case ALT_DIGITS:
		ret = (char*) __get_current_time_locale()->alt_digits;
		break;
	case _DATE_FMT:	/* GNU extension */
		ret = (char*) __get_current_time_locale()->date_fmt;
		break;
	case RADIXCHAR:
		ret = (char*) __get_current_numeric_locale()->decimal_point;
		break;
	case THOUSEP:
		ret = (char*) __get_current_numeric_locale()->thousands_sep;
		break;
	case YESEXPR:
		ret = (char*) __get_current_messages_locale()->yesexpr;
		break;
	case NOEXPR:
		ret = (char*) __get_current_messages_locale()->noexpr;
		break;
	/*
	 * All items marked with LEGACY are available, but not recomended
	 * by SUSv2 to be used in portable applications since they're subject
	 * to remove in future specification editions
	 */
	case YESSTR:            /* LEGACY  */
		ret = (char*) __get_current_messages_locale()->yesstr;
		break;
	case NOSTR:             /* LEGACY  */
		ret = (char*) __get_current_messages_locale()->nostr;
		break;
	case CRNCYSTR:
		ret = "";
		cs = (char*) __get_current_monetary_locale()->currency_symbol;
		if (*cs != '\0') {
			char pos = localeconv()->p_cs_precedes;

			if (pos == localeconv()->n_cs_precedes) {
				char psn = '\0';

				if (pos == CHAR_MAX) {
					if (strcmp(cs, __get_current_monetary_locale()->mon_decimal_point) == 0)
						psn = '.';
				} else
					psn = pos ? '-' : '+';
				if (psn != '\0') {
					int clen = strlen(cs);

                                        nptr = realloc(csym, clen + 2);
                                        if (!nptr && csym)
                                          free (csym);

                                        csym = nptr;

					if (csym != NULL) {
						*csym = psn;
						strcpy(csym + 1, cs);
						ret = csym;
					}
				}
			}
		}
		break;
	case D_MD_ORDER:        /* local extension */
		ret = (char *) __get_current_time_locale()->md_order;
		break;
#ifdef __HAVE_LOCALE_INFO__
	case _NL_CTYPE_MB_CUR_MAX:
		ret = (char *) __get_current_ctype_locale()->mb_cur_max;
		break;
#endif
	default:
#ifdef __HAVE_LOCALE_INFO_EXTENDED__
		if (item > _NL_LOCALE_EXTENDED_FIRST_ENTRY
		    && item < _NL_LOCALE_EXTENDED_LAST_ENTRY) {
			int idx = item - _NL_LOCALE_EXTENDED_FIRST_ENTRY - 1;
			return *(char **) ((char *) (*nl_ext[idx].base)()
					   + nl_ext[idx].offset);
		}
#endif
		ret = "";
   }
   return (ret);
}
@


1.13
log
@	* libc/locale/lctype.c: Include <string.h> and "setlocale.h".
	(_C_ctype_locale): Add braces to initializer.
	(__ctype_load_locale): Fix compiler warnings in non-Cygwin case.
	* libc/locale/nl_langinfo.c (nl_langinfo): Expose _NL_CTYPE_MB_CUR_MAX
	case only if __HAVE_LOCALE_INFO__ is defined.
@
text
@d185 4
a188 1
   char *ret, *s, *cs;
@


1.12
log
@	Extend locale support to maintain wide char values of native strings
	if __HAVE_LOCALE_INFO_EXTENDED__ is defined.
	* libc/include/langinfo.h (enum __nl_item): New type.  Define all
	native values accessible through nl_langinfo.  Define previously
	existing POSIX-compatible values as macros as well.
	* libc/include/stdlib.h (__mb_cur_max): Drop declaration.
	(__locale_mb_cur_max): Declare.
	(MB_CUR_MAX): Re-define calling __locale_mb_cur_max.
	* libc/locale/Makefile.am (ELIX_SOURCES): Add lctype.c.
	* libc/locale/Makefile.in: Regenerate.
	* libc/locale/lctype.c: New file to define and load LC_CTYPE category.
	* libc/locale/lctype.h: New file, matching header.
	* libc/locale/lmessages.c (_C_messages_locale): Add default values for
	wide char members.
	(__messages_load_locale): Add _C_messages_locale in call to
	__set_lc_messages_from_win.
	* libc/locale/lmessages.h (struct lc_messages_T): Add wide char members.
	* libc/locale/lmonetary.c (_C_monetary_locale):  Add default values for
	wide char members.
	(__monetary_load_locale): Add _C_monetary_locale in call to
	__set_lc_monetary_from_win.
	* libc/locale/lmonetary.h (struct lc_monetary_T): Add wide char members.
	Add numerical values for international currency formatting per
	POSIX-1.2008, if __HAVE_LOCALE_INFO_EXTENDED__ is defined.
	* libc/locale/lnumeric.c (_C_numeric_locale): Add default values for
	wide char members.
	(__numeric_load_locale): Add _C_numeric_locale in call to
	__set_lc_numeric_from_win.
	* libc/locale/lnumeric.h (struct lc_numeric_T): Add wide char members.
	* libc/locale/locale.c (loadlocale): Return doing nothing if category
	locale didn't change.  Convert category if chain to switch statement.
	Call __ctype_load_locale in LC_CTYPE case.
	(__locale_charset): Add (but disable for now) returning codeset from
	__get_current_ctype_locale.
	(__locale_mb_cur_max): Add (but disable for now) returning mb_cur_max
	from __get_current_ctype_locale.
	(__locale_msgcharset): Add returning codeset from
	__get_current_messages_locale.
	(_localeconv_r): Accommodate int_XXX values.
	* libc/locale/nl_langinfo.c (nl_ext): New array to define what is to
	be returned for non-POSIX values.
	(nl_Langinfo): Return correct codeset for each locale category.  Return
	extended values if __HAVE_LOCALE_INFO_EXTENDED__ is defined.
	* libc/locale/timelocal.c (_C_time_locale): Add default values for
	wide char members.
	(__time_load_locale): Add _C_time_locale in call to
	__set_lc_time_from_win.
	* libc/locale/timelocal.h (struct lc_time_T): Add wide char members.
	* libc/stdio/vfwprintf.c (_VFWPRINTF_R): Use wide char decimal point
	and thousands_sep if __HAVE_LOCALE_INFO_EXTENDED__ is defined.
	* libc/time/strftime.c: Rework to accommodate availability of wide char
	strings in LC_TIME category if __HAVE_LOCALE_INFO_EXTENDED__ is defined.
@
text
@d415 1
d419 1
@


1.11
log
@	* libc/locale/locale.c (loadlocale): Optimize "EUC" charset check.
	Cygwin only: Allow GB2312 and EUC-CN as alternative codeset names
	for GBK.  Add to documentation.
	* libc/locale/nl_langinfo.c (nl_langinfo): On Cygwin, translate EUCCN
	to GB2312.
@
text
@d35 1
d45 132
d193 24
d220 3
d415 3
d419 8
@


1.10
log
@	* libc/include/langinfo.h (_NL_TIME_DATE_FMT): Define new nl_item
	value for LC_TIME entry date_fmt.
	(_DATE_FMT): Define "official" GNU name same as _NL_TIME_DATE_FMT.
	* libc/locale/nl_langinfo.c (nl_langinfo): Add case for _DATE_FMT.
@
text
@d72 2
@


1.9
log
@	* libc/locale/timelocal.h (struct lc_time_T): Add missing ERA-related
	members.
	* libc/locale/timelocal.c (_C_time_local): Set new members to empty
	strings.
	* libc/locale/nl_langinfo.c (nl_langinfo): Return values from
	__get_current_time_locale() for ERA related requests.
@
text
@d192 3
@


1.8
log
@	* libc/ctype/ctype_cp.h (_CTYPE_GEORGIAN_PS_128_254): Define.
	(_CTYPE_GEORGIAN_PS_255): Define.
	(_CTYPE_PT154_128_254): Define.
	(_CTYPE_PT154_255): Define.
	(__ctype_cp): Add array members for above ctype definitions.
	* libc/locale/locale.c (loadlocale): Make TIS-620 charset name
	available for all targets.  Add guards for setting the conversion
	function pointers.  Add support for GEORGIAN-PS and PT154 charsets.
	Change documentation to reflect current behaviour more closely.
	* libc/locale/nl_langinfo.c (nl_langinfo): On Cygwin, translate
	"CP101" to "GEORGIAN-PS" and "CP102" to "PT154".
	* libc/stdlib/sb_charsets.c (__cp_conv): Add conversion arrays
	for GEORGIAN-PS and PT154.
	(__cp_index): Map invalid Windows codepage number 101 to
	GEORGIAN-PS conversion array, 102 to PT154 conversion array.
@
text
@d178 1
a178 2
		/* XXX: need to be implemented  */
		ret = "";
d181 1
a181 2
		/* XXX: need to be implemented  */
		ret = "";
d184 1
a184 2
		/* XXX: need to be implemented  */
		ret = "";
d187 1
a187 2
		/* XXX: need to be implemented  */
		ret = "";
d190 1
a190 2
		/* XXX: need to be implemented  */
		ret = "";
@


1.7
log
@	* libc/locale/nl_langinfo.c (nl_langinfo): Return "CP932" when using
	SJIS on Cygwin.  Explain why.
@
text
@d81 4
@


1.6
log
@	* libc/locale/lmonetary.c (__monetary_load_locale): Take additional
	parameters for wide char to multibyte conversion.  Call
	__set_lc_monetary_from_win on Cygwin.
	* libc/locale/lmonetary.h: Make C++-safe.
	(__monetary_load_locale): Change declaration.
	* libc/locale/lnumeric.c (__numeric_load_locale): Take additional
	parameters for wide char to multibyte conversion.  Call
	__set_lc_numeric_from_win on Cygwin.
	* libc/locale/lnumeric.h: Make C++-safe.
	(__numeric_load_locale): Change declaration.
	* libc/locale/locale.c (lconv): De-constify for Cygwin.
	(__set_charset_from_locale): Rename from
	__set_charset_from_codepage.  Take locale as parameter instead of
	a codepage.
	(loadlocale): Allow "EUC-JP" for "EUCJP" and "EUC-KR" for "EUCKR".
	Change documnetation accordingly.  Enable LC_COLLATE, LC_MONETARY,
	LC_NUMERIC, and LC_TIME handling on Cygwin.
	(_localeconv_r): On Cygwin, copy values from monetary and numeric
	domain if change has been noted.
	* libc/locale/nl_langinfo.c (nl_langinfo): Accommodate change of
	am/pm layout in struct lc_time_T.
	* libc/locale/timelocal.c (_C_time_locale): Accommodate
	redefinition of am/pm members.
	(__time_load_locale): Take additional parameters for wide char
	to multibyte conversion.  Call __set_lc_time_from_win on Cygwin.
	* libc/locale/timelocal.h: Make C++-safe.
	(struct lc_time_T): Convert am and pm to a am_pm array for easier
	consumption by strftime and strptime.
	(__time_load_locale): Change declaration.
	* libc/time/strftime.c: Change documentation to reflect changes to
	strftime.  Remove locale constant strings in favor of access to
	locale-specifc data.
	(_ctloc): Define access method for locale-specifc data.
	(TOLOWER): Define for tolower conversion.
	(strftime): Throughout, convert locale-specific formats to use
	locale-specific data.  Add GNU-specific "%P" format.
	* libc/time/strptime.c: Remove locale constant strings in favor of
	access to locale-specifc data.
	(_ctloc): Define access method for locale-specifc data.
	(strptime): Throughout, convert locale-specific formats to use
	locale-specific data.
@
text
@d82 14
@


1.5
log
@	* libc/locale/nl_langinfo.c (nl_langinfo): On Cygwin, translate
	often-used charsets into Linux compatible codesets.
@
text
@d136 1
a136 1
		ret = (char *) __get_current_time_locale()->am;
d139 1
a139 1
		ret = (char *) __get_current_time_locale()->pm;
@


1.4
log
@	* libc/locale/nl_langinfo.c (nl_langinfo): Add Cygwin-specific temporary
	exception for KOI8 charsets.
@
text
@d63 19
a81 6
		/* Temporary exception for KOI8 charsets which are
		   incorrectly treated by calling applications otherwise. */
		if (strcmp (ret, "CP20866") == 0)
		  ret = "KOI8-R";
		else if (strcmp (ret, "CP21866") == 0)
		  ret = "KOI8-U";
@


1.3
log
@	* libc/locale/nl_langinfo.c (nl_langinfo): Just return current locale
	charset on Cygwin.
@
text
@d63 6
@


1.2
log
@
2003-06-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/argz/argz_add.c: Change to use _DEFUN macro for function
        definition.
        * libc/argz/argz_add_sep.c: Ditto.
        * libc/argz/argz_append.c libc/argz/argz_count.c: Ditto.
        * libc/argz/argz_create.c libc/argz/argz_create_sep.c: Ditto.
        * libc/argz/argz_delete.c libc/argz/argz_extract.c: Ditto.
        * libc/argz/argz_insert.c libc/argz/argz_next.c: Ditto.
        * libc/argz/argz_replace.c libc/argz/argz_stringify.c: Ditto.
        * libc/argz/envz_add.c libc/argz/envz_entry.c: Ditto.
        * libc/argz/envz_get.c libc/argz/envz_merge.c: Ditto.
        * libc/argz/envz_remove.c libc/argz/envz_strip.c: Ditto.
        * libc/locale/nl_langinfo.c libc/misc/ffs.c: Ditto.
        * libc/posix/closedir.c libc/posix/creat.c: Ditto.
        * libc/posix/execl.c libc/posix/execle.c: Ditto.
        * libc/posix/execlp.c libc/posix/execve.c: Ditto.
        * libc/posix/isatty.c libc/posix/opendir.c: Ditto.
        * libc/posix/popen.c libc/posix/readdir.c: Ditto.
        * libc/posix/readdir_r.c libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c libc/search/hcreate.c: Ditto.
        * libc/search/tdelete.c libc/search/tdestroy.c: Ditto.
        * libc/search/tfind.c libc/search/tsearch.c: Ditto.
        * libc/search/twalk.c libc/signal/signal.c: Ditto.
@
text
@d40 1
d42 1
d46 2
d61 3
d102 1
@


1.1
log
@	* libc/include/langinfo.h: New file.
	* libc/include/wchar.h: Likewise.
	* libc/include/sys/syslimits.h: Likewise.
	* libc/locale/fix_grouping.c: Likewise.
	* libc/locale/ldpart.c: Likewise.
	* libc/locale/ldpart.h: Likewise.
	* libc/locale/lmessages.c: Likewise.
	* libc/locale/lmessages.h: Likewise.
	* libc/locale/lmonetary.c: Likewise.
	* libc/locale/lmonetary.h: Likewise.
	* libc/locale/lnumeric.c: Likewise.
	* libc/locale/lnumeric.h: Likewise.
	* libc/locale/nl_langinfo.3: Likewise.
	* libc/locale/nl_langinfo.c: Likewise.
	* libc/locale/timelocal.c: Likewise.
	* libc/locale/timelocal.h: Likewise.
	* libc/stdlib/btowc.c: Likewise.
	* libc/stdlib/mbrlen.c: Likewise.
	* libc/stdlib/mbrtowc.c: Likewise.
	* libc/stdlib/mbsinit.c: Likewise.
	* libc/stdlib/mbsrtowcs.c: Likewise.
	* libc/stdlib/wcrtomb.c: Likewise.
	* libc/stdlib/wcsrtombs.c: Likewise.
	* libc/stdlib/wctob.c: Likewise.
	* libc/sys/linux/prof-freq.c: Likewise.
	* libc/sys/linux/profile.c: Likewise.
	* libc/sys/linux/machine/i386/dl-procinfo.c: Likewise.
	* libc/sys/linux/machine/i386/dl-procinfo.h: Likewise.
	* libc/include/stdlib.h: Change re-entrant functions to take
	mbstate_t pointers.
	* libc/include/sys/_types.h: Define _mbstate_t.
	* libc/include/sys/config.h (MB_LEN_MAX): New macro.
	* libc/include/sys/errno.h (EILSEQ): New error code.
	* libc/include/sys/reent.h: Include wchar.h.  Change reentrant
	structure to use mbstate_t.
	* libc/locale/Makefile.am (LIB_SOURCES): Add new files.
	* libc/machine/powerpc/vfprintf.c: Use mbstate_t.
	* libc/machine/powerpc/vfscanf.c: Likewise.
	* libc/stdio/getdelim.c: Reallocate buffer only when necessary.
	* libc/stdio/vfprintf.c: Likewise.
	* libc/stdio/vfscanf.c: Likewise.
	* libc/stdlib/Makefile.am (LIB_SOURCES): Add new files.
	* libc/stdlib/mblen.c: Use mbstate_t.
	* libc/stdlib/mblen_r.c: Likewise.
	* libc/stdlib/mbstowcs.c: Likewise.
	* libc/stdlib/mbstowcs_r.c: Likewise.
	* libc/stdlib/mbtowc.c: Likewise.
	* libc/stdlib/mbtowc_r.c: Likewise.
	* libc/stdlib/wcstombs.c: Likewise.
	* libc/stdlib/wcstombs_r.c: Likewise.
	* libc/stdlib/wctomb_r.c: Likewise.
	* libc/sys/linux/Makefile.am (LIB_SOURCES): Add prof-freq.c and
	profile.c.
	* libc/sys/linux/machine/i386/Makefile.am (LIB_SOURCES): Add
	dl-procinfo.c.
	* libc/sys/linux/sys/errno.h (EILSEQ): New error code.
	* libc/sys/linux/sys/types.h (off_t): Define type.
	* testsuite/newlib.locale/UTF-8.c: Change locale name from UTF-8
	to C-UTF-8.
	* testsuite/newlib.locale/UTF-8.exp: Likewise.
@
text
@d45 2
a46 1
nl_langinfo(nl_item item) {
@

