head	1.6;
access;
symbols
	cygwin-1_7_35-release:1.6
	cygwin-1_7_34-release:1.6
	newlib-2_2_0:1.6.0.6
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.6
	cygwin-1_7_31-release:1.6
	cygwin-1_7_30-release:1.6
	cygwin-1_7_29-release:1.6
	cygwin-1_7_28-release:1.6
	newlib-2_1_0:1.6
	cygwin-1_7_27-release:1.6
	cygwin-1_7_26-release:1.6
	cygwin-1_7_25-release:1.6
	cygwin-1_7_24-release:1.6
	cygwin-1_7_23-release:1.6
	cygwin-1_7_22-release:1.6
	cygwin-1_7_21-release:1.6
	cygwin-1_7_20-release:1.6
	cygwin-1_7_19-release:1.6
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.6.0.4
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	newlib-2_0_0:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.2
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	newlib-1_20_0:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	newlib-1_19_0:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	newlib-1_18_0:1.5
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.4
	binutils-arc-20080908-branch:1.4.0.2
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.2;
locks; strict;
comment	@# @;


1.6
date	2010.02.08.17.24.22;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.14.20.50.53;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.08.21.48.06;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.07.18.59.45;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.03.19.45.26;	author kazu;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.27.16.05.35;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
2010-02-08  Josef Wolf  <jw@@raven.inka.de>

        * libc/machine/m68k/memcpy.S: MISALIGEND_OK should not be set for
        __mcpu32__.
@
text
@/* a-memcpy.s -- memcpy, optimised for m68k asm
 *
 * Copyright (c) 2007 mocom software GmbH & Co KG)
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#include "m68kasm.h"

#if defined (__mcoldfire__) || defined (__mc68010__) || defined (__mc68020__) || defined (__mc68030__) || defined (__mc68040__) || defined (__mc68060__)
# define MISALIGNED_OK 1
#else
# define MISALIGNED_OK 0
#endif
	
	.text
	.align	4

	.globl	SYM(memcpy)
	.type	SYM(memcpy), @@function

/*   memcpy, optimised
 *
 *   strategy:
 *       - no argument testing (the original memcpy from the GNU lib does
 *         no checking either)
 *       - make sure the destination pointer (the write pointer) is long word
 *         aligned. This is the best you can do, because writing to unaligned
 *         addresses can be the most costfull thing you could do.
 *       - Once you have figured that out, we do a little loop unrolling
 *         to further improve speed.
 */

SYM(memcpy):
	move.l	4(sp),a0	| dest ptr
	move.l	8(sp),a1	| src ptr
	move.l	12(sp),d1	| len
	cmp.l	#8,d1		| if fewer than 8 bytes to transfer,
	blo	.Lresidue	| do not optimise

#if !MISALIGNED_OK
	/* Goto .Lresidue if either dest or src is not 4-byte aligned */
	move.l	a0,d0
	and.l	#3,d0
	bne	.Lresidue
	move.l	a1,d0
	and.l	#3,d0
	bne	.Lresidue
#else /* MISALIGNED_OK */
	/* align dest */
	move.l	a0,d0		| copy of dest
	neg.l	d0
	and.l	#3,d0		| look for the lower two only
	beq	2f		| is aligned?
	sub.l	d0,d1
	lsr.l	#1,d0		| word align needed?
	bcc	1f
	move.b	(a1)+,(a0)+
1:
	lsr.l	#1,d0		| long align needed?
	bcc	2f
	move.w	(a1)+,(a0)+
2:
#endif /* !MISALIGNED_OK */

	/* long word transfers */
	move.l	d1,d0
	and.l	#3,d1		| byte residue
	lsr.l	#3,d0
	bcc	1f		| carry set for 4-byte residue
	move.l	(a1)+,(a0)+
1:
	lsr.l	#1,d0		| number of 16-byte transfers
	bcc	.Lcopy 		| carry set for 8-byte residue
	bra	.Lcopy8

1:
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
.Lcopy8:
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
.Lcopy:
#if !defined (__mcoldfire__)
	dbra	d0,1b
	sub.l	#0x10000,d0
#else
	subq.l	#1,d0
#endif
	bpl	1b
	bra	.Lresidue

1:
	move.b	(a1)+,(a0)+	| move residue bytes

.Lresidue:
#if !defined (__mcoldfire__)
	dbra	d1,1b		| loop until done
#else
	subq.l	#1,d1
	bpl	1b
#endif
	move.l	4(sp),d0	| return value
	rts
@


1.5
log
@
2009-12-14  Maxim Kuvyrkov <maxim@@codesourcery.com>

        * libc/machine/m68k/memcpy.S: Patch to support
        boards which do not support unaligned read/write.
@
text
@d18 1
a18 1
#if defined (__mcoldfire__) || defined (__mcpu32__) || defined (__mc68010__) || defined (__mc68020__) || defined (__mc68030__) || defined (__mc68040__) || defined (__mc68060__)
@


1.4
log
@
2008-01-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/m68k/memcpy.S: Remove % from register references
        as this is already handled by m68kasm.h.
        * libc/machine/m68k/memset.S: Ditto.
@
text
@d18 6
d49 9
d72 1
@


1.3
log
@
2008-01-07  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/m68k/m68kasm.h: New file.
        * libc/machine/m68k/setjmp.S: Remove common definitions and
        place in m68kasm.h.  Include "m68kasm.h".
        * libc/machine/m68k/memcpy.S: Include "m68kasm.h" and use
        SYM() macro when referencing function name.
        * libc/machine/m68k/memset.S: Ditto.
@
text
@d37 4
a40 4
	move.l	4(%sp),%a0	| dest ptr
	move.l	8(%sp),%a1	| src ptr
	move.l	12(%sp),%d1	| len
	cmp.l	#8,%d1		| if fewer than 8 bytes to transfer,
d44 3
a46 3
	move.l	%a0,%d0		| copy of dest
	neg.l	%d0
	and.l	#3,%d0		| look for the lower two only
d48 2
a49 2
	sub.l	%d0,%d1
	lsr.l	#1,%d0		| word align needed?
d51 1
a51 1
	move.b	(%a1)+,(%a0)+
d53 1
a53 1
	lsr.l	#1,%d0		| long align needed?
d55 1
a55 1
	move.w	(%a1)+,(%a0)+
d59 3
a61 3
	move.l	%d1,%d0
	and.l	#3,%d1		| byte residue
	lsr.l	#3,%d0
d63 1
a63 1
	move.l	(%a1)+,(%a0)+
d65 1
a65 1
	lsr.l	#1,%d0		| number of 16-byte transfers
d70 2
a71 2
	move.l	(%a1)+,(%a0)+
	move.l	(%a1)+,(%a0)+
d73 2
a74 2
	move.l	(%a1)+,(%a0)+
	move.l	(%a1)+,(%a0)+
d77 2
a78 2
	dbra	%d0,1b
	sub.l	#0x10000,%d0
d80 1
a80 1
	subq.l	#1,%d0
d86 1
a86 1
	move.b	(%a1)+,(%a0)+	| move residue bytes
d90 1
a90 1
	dbra	%d1,1b		| loop until done
d92 1
a92 1
	subq.l	#1,%d1
d95 1
a95 1
	move.l	4(%sp),%d0	| return value
@


1.2
log
@	* libc/machine/m68k/Makefile.am (lib_a_SOURCES): Add memcpy.S
	and memset.S.
	* libc/machine/m68k/Makefile.in: Regenerate.
	* libc/machine/m68k/memcpy.S: Use sub.l followed by dbra.
	* libc/machine/m68k/memset.S: Likewise.
@
text
@d16 2
d21 2
a22 2
	.globl	memcpy
	.type	memcpy, @@function
d36 1
a36 1
memcpy:
@


1.1
log
@
2007-04-27  Kazu Hirata  <kazu@@codesourcery.com>

	* libc/machine/m68k/Makefile.am (lib_a_SOURCES): Add memcpy.S
	and memset.S.
	* libc/machine/m68k/Makefile.in: Regenerate.
	* libc/machine/m68k/memcpy.S, libc/machine/m68k/memset.S: New.
@
text
@d76 1
d79 1
a80 1
#endif
@

