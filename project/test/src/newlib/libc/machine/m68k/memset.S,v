head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	newlib-2_2_0:1.4.0.10
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_28-release:1.4
	newlib-2_1_0:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.8
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.6
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	newlib-1_19_0:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.4
	binutils-arc-20080908-branch:1.4.0.2
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.2;
locks; strict;
comment	@# @;


1.4
date	2008.01.08.21.48.06;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.07.18.59.45;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.03.19.45.26;	author kazu;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.27.16.05.35;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
2008-01-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/m68k/memcpy.S: Remove % from register references
        as this is already handled by m68kasm.h.
        * libc/machine/m68k/memset.S: Ditto.
@
text
@/* a-memset.s -- memset, optimised for fido asm
 *
 * Copyright (c) 2007 mocom software GmbH & Co KG)
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#include "m68kasm.h"

	.text
	.align	4

	.globl	SYM(memset)
	.type	SYM(memset), @@function

|   memset, optimised
|
|   strategy:
|       - no argument testing (the original memcpy from the GNU lib does
|         no checking either)
|       - make sure the destination pointer (the write pointer) is long word
|         aligned. This is the best you can do, because writing to unaligned
|         addresses can be the most costfull thing one could do.
|       - we fill long word wise if possible
|
|   VG, 2006
|
|	bugfixes:
|		- distribution of byte value improved - in cases someone gives
|         non-byte value
|		- residue byte transfer was not working
|
|	VG, April 2007
|
SYM(memset):
	move.l	4(sp),a0	| dest ptr
	move.l	8(sp),d0	| value
	move.l	12(sp),d1	| len
	cmp.l	#16,d1
	blo	.Lbset		| below, byte fills
	|
	move.l	d2,-(sp)	| need a register
	move.b	d0,d2		| distribute low byte to all byte in word
	lsl.l	#8,d0
	move.b	d2,d0
	move.w	d0,d2
	swap	d0		| rotate 16
	move.w	d2,d0
	|
	move.l	a0,d2		| copy of src
	neg.l	d2		| 1 2 3 ==> 3 2 1
	and.l	#3,d2
	beq	2f		| is aligned
	|
	sub.l	d2,d1		| fix length
	lsr.l	#1,d2		| word align needed?
	bcc	1f
	move.b	d0,(a0)+	| fill byte
1:
	lsr.l	#1,d2		| long align needed?
	bcc	2f
	move.w	d0,(a0)+	| fill word
2:
	move.l	d1,d2		| number of long transfers (at least 3)
	lsr.l	#2,d2
	subq.l	#1,d2

1:
	move.l	d0,(a0)+	| fill long words
.Llset:
#if !defined (__mcoldfire__)
	dbra	d2,1b		| loop until done
	sub.l	#0x10000,d2
#else
	subq.l	#1,d2
#endif
	bpl	1b
	and.l	#3,d1		| residue byte transfers, fixed
	move.l	(sp)+,d2	| restore d2
	bra	.Lbset

1:
	move.b	d0,(a0)+	| fill residue bytes
.Lbset:
#if !defined (__mcoldfire__)
	dbra	d1,1b		| loop until done
#else
	subq.l	#1,d1
	bpl	1b
#endif
	move.l	4(sp),d0	| return value
	rts
@


1.3
log
@
2008-01-07  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/m68k/m68kasm.h: New file.
        * libc/machine/m68k/setjmp.S: Remove common definitions and
        place in m68kasm.h.  Include "m68kasm.h".
        * libc/machine/m68k/memcpy.S: Include "m68kasm.h" and use
        SYM() macro when referencing function name.
        * libc/machine/m68k/memset.S: Ditto.
@
text
@d44 4
a47 4
	move.l	4(%sp),%a0	| dest ptr
	move.l	8(%sp),%d0	| value
	move.l	12(%sp),%d1	| len
	cmp.l	#16,%d1
d50 7
a56 7
	move.l	%d2,-(%sp)	| need a register
	move.b	%d0,%d2		| distribute low byte to all byte in word
	lsl.l	#8,%d0
	move.b	%d2,%d0
	move.w	%d0,%d2
	swap	%d0		| rotate 16
	move.w	%d2,%d0
d58 3
a60 3
	move.l	%a0,%d2		| copy of src
	neg.l	%d2		| 1 2 3 ==> 3 2 1
	and.l	#3,%d2
d63 2
a64 2
	sub.l	%d2,%d1		| fix length
	lsr.l	#1,%d2		| word align needed?
d66 1
a66 1
	move.b	%d0,(%a0)+	| fill byte
d68 1
a68 1
	lsr.l	#1,%d2		| long align needed?
d70 1
a70 1
	move.w	%d0,(%a0)+	| fill word
d72 3
a74 3
	move.l	%d1,%d2		| number of long transfers (at least 3)
	lsr.l	#2,%d2
	subq.l	#1,%d2
d77 1
a77 1
	move.l	%d0,(%a0)+	| fill long words
d80 2
a81 2
	dbra	%d2,1b		| loop until done
	sub.l	#0x10000,%d2
d83 1
a83 1
	subq.l	#1,%d2
d86 2
a87 2
	and.l	#3,%d1		| residue byte transfers, fixed
	move.l	(%sp)+,%d2	| restore d2
d91 1
a91 1
	move.b	%d0,(%a0)+	| fill residue bytes
d94 1
a94 1
	dbra	%d1,1b		| loop until done
d96 1
a96 1
	subq.l	#1,%d1
d99 1
a99 1
	move.l	4(%sp),%d0	| return value
@


1.2
log
@	* libc/machine/m68k/Makefile.am (lib_a_SOURCES): Add memcpy.S
	and memset.S.
	* libc/machine/m68k/Makefile.in: Regenerate.
	* libc/machine/m68k/memcpy.S: Use sub.l followed by dbra.
	* libc/machine/m68k/memset.S: Likewise.
@
text
@d16 2
d21 2
a22 2
	.globl	memset
	.type	memset, @@function
d43 1
a43 1
memset:
@


1.1
log
@
2007-04-27  Kazu Hirata  <kazu@@codesourcery.com>

	* libc/machine/m68k/Makefile.am (lib_a_SOURCES): Add memcpy.S
	and memset.S.
	* libc/machine/m68k/Makefile.in: Regenerate.
	* libc/machine/m68k/memcpy.S, libc/machine/m68k/memset.S: New.
@
text
@d79 1
d82 1
a83 1
#endif
@

