head	1.5;
access;
symbols
	cygwin-1_7_35-release:1.5
	cygwin-1_7_34-release:1.5
	newlib-2_2_0:1.5.0.10
	cygwin-1_7_33-release:1.5
	cygwin-1_7_32-release:1.5
	cygwin-1_7_31-release:1.5
	cygwin-1_7_30-release:1.5
	cygwin-1_7_29-release:1.5
	cygwin-1_7_28-release:1.5
	newlib-2_1_0:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	cygwin-1_7_25-release:1.5
	cygwin-1_7_24-release:1.5
	cygwin-1_7_23-release:1.5
	cygwin-1_7_22-release:1.5
	cygwin-1_7_21-release:1.5
	cygwin-1_7_20-release:1.5
	cygwin-1_7_19-release:1.5
	cygwin-64bit-postmerge:1.5
	cygwin-64bit-premerge-branch:1.5.0.8
	cygwin-64bit-premerge:1.5
	cygwin-1_7_18-release:1.5
	newlib-2_0_0:1.5
	cygwin-1_7_17-release:1.5
	cygwin-64bit-branch:1.5.0.6
	cygwin-1_7_16-release:1.5
	cygwin-1_7_15-release:1.5
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	cygwin-1_7_11-release:1.5
	cygwin-1_7_10-release:1.5
	newlib-1_20_0:1.5
	cygwin-1_7_9-release:1.5
	cygwin-1_7_8-release:1.5
	newlib-1_19_0:1.5
	cygwin-1_7_7-release:1.5
	cygwin-1_7_5-release:1.5
	cygwin-1_7_4-release:1.5
	cygwin-1_7_3-release:1.5
	cygwin-1_7_2-release:1.5
	newlib-1_18_0:1.5
	cygwin-1_7_1-release:1.5
	newlib-1_17_0-arc:1.5.0.4
	binutils-arc-20080908-branch:1.5.0.2
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.4
	newlib-1_15_0:1.3;
locks; strict;
comment	@ * @;


1.5
date	2008.04.01.19.02.16;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.19.23.53.07;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.29.19.54.05;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.22.21.19.56;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.27.23.02.00;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
2008-04-01 Patrick Mansfield <patmans@@us.ibm.com>

        * libc/machine/spu/memcmp.c: New file for SPU optimized memcmp.
        * libc/machine/spu/strncmp.h: New file supply _strncmp_internal.
        * libc/machine/spu/Makefile.am: Add memcmp.c.
        * libc/machine/spu/Makefile.in: Rebuild.
        * libc/machine/spu/strncmp.c: Use _strncmp_internal.
@
text
@/*
  (C) Copyright 2001,2006,
  International Business Machines Corporation,
  Sony Computer Entertainment, Incorporated,
  Toshiba Corporation,

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
    * Neither the names of the copyright holders nor the names of their
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
*/
#include <stddef.h>
#include <spu_intrinsics.h>
#include "strncmp.h"

/*
 * Compare the two strings s1 and s2 of length n. Returns an integer less
 * than, equal to, or greater than zero if s1 is found, respectively,
 * to be less than, to match, or be greater than s2.
 */
int strncmp(const char *s1, const char *s2, size_t n)
{
  vec_uint4 end_v;
  return _strncmp_internal (s1, s2, n, &end_v, 1);
}
@


1.4
log
@
2007-01-19  Kazunori Asayama <asayama@@sm.sony.co.jp>

        * libc/machine/spu/c99ppe.h: Replace vector with __vector.
        * libc/machine/spu/vec_literal.h: Ditto.
        * libc/machine/spu/strncmp.c: Ditto.
@
text
@d33 1
d35 1
a35 2
#include <stddef.h>
#include "vec_literal.h"
d37 3
a39 2
/* Compare the two strings s1 and s2 of length n.  Returns an integer
 * less than, equal to, or greater than zero if  s1  is  found, respectively,
a41 1

d44 2
a45 87
  unsigned int offset1, offset2;
  vec_int4 n_v;
  vec_uint4 cnt1_v, cnt2_v, max_cnt_v;
  vec_uint4 gt_v, lt_v, mask_v, end1_v, end2_v, end_v, neq_v;
  vec_uint4 shift_n_v, shift_eos_v, max_shift_v;
  vec_uchar16 shuffle1, shuffle2;
  vec_uchar16 data1A, data1B, data1, data2A, data2B, data2;
  vec_uchar16 *ptr1, *ptr2;

  data1 = data2 = spu_splats((unsigned char)0);

  ptr1 = (vec_uchar16 *)s1;
  ptr2 = (vec_uchar16 *)s2;

  offset1 = (unsigned int)(ptr1) & 15;
  offset2 = (unsigned int)(ptr2) & 15;

  shuffle1 = (vec_uchar16)spu_add((vec_uint4)spu_splats((unsigned char)offset1),
				  VEC_LITERAL(vec_uint4, 0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F));
  shuffle2 = (vec_uchar16)spu_add((vec_uint4)spu_splats((unsigned char)offset2),
				  VEC_LITERAL(vec_uint4, 0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F));
  data1A = *ptr1++;
  data2A = *ptr2++;

  n_v = spu_promote((int)n, 0);

  do {
    data1B = *ptr1++;
    data2B = *ptr2++;

    /* Quadword align each of the input strings so that
     * we operate on full quadwords.
     */
    data1 = spu_shuffle(data1A, data1B, shuffle1);
    data2 = spu_shuffle(data2A, data2B, shuffle2);

    data1A = data1B;
    data2A = data2B;

    neq_v = spu_gather(spu_xor(spu_cmpeq(data1, data2), -1));

    end1_v = spu_gather(spu_cmpeq(data1, 0));
    end2_v = spu_gather(spu_cmpeq(data2, 0));
    end_v  = spu_or(end1_v, end2_v), 0;

    n_v = spu_add(n_v, -16);

    /* Repeat until either
     * 1) the character count expired,
     * 2) a null character is discovered in one of the input strings, or
     * 3) the strings do not compare equal.
     */
  } while (spu_extract(spu_and(spu_cmpeq(spu_or(end_v, neq_v), 0), spu_cmpgt(n_v, 0)), 0));

  /* Construct a mask to eliminate characters that are not of interest
   * in the comparison. Theses include characters that are beyond the
   * n character count and beyond the first null character.
   */
  cnt1_v = spu_cntlz(end1_v);
  cnt2_v = spu_cntlz(end2_v);

  max_cnt_v = spu_sel(cnt1_v, cnt2_v, spu_cmpgt(cnt2_v, cnt1_v));

  mask_v = spu_splats((unsigned int)0xFFFF);

  shift_n_v = spu_andc((__vector unsigned int)spu_sub(0, n_v), spu_cmpgt(n_v, -1));
  shift_eos_v = spu_sub(32, max_cnt_v);

  max_shift_v = spu_sel(shift_n_v, shift_eos_v, spu_cmpgt(shift_eos_v, shift_n_v));

  mask_v = spu_and(spu_sl(mask_v, spu_extract(max_shift_v, 0)), mask_v);

  /* Determine if greater then or less then in the case that they are
   * not equal. gt_v is either 1 (in the case s1 is greater then s2), or
   * -1 (in the case that s2 is greater then s1).
   */
  gt_v = spu_gather(spu_cmpgt(data1, data2));
  lt_v = spu_gather(spu_cmpgt(data2, data1));

  gt_v = spu_sub(-1, spu_sl(spu_cmpgt(gt_v, lt_v), 1));

  /* Construct a mask to be applied to gt_v if the strings are discovered
   * to be equal.
   */
  mask_v = spu_cmpeq(spu_and(neq_v, mask_v), 0);

  return (spu_extract(spu_andc(gt_v, mask_v), 0));
@


1.3
log
@
2006-11-29  Kazunori Asayama  <asayama@@sm.sony.co.jp>

        * libc/machine/spu/memset.c: Fix type of explicit cast.
        * libc/machine/spu/strncmp.c: Add explicit cast.
        * libc/machine/spu/strrchr.c: Ditto.
        * libc/machine/spu/strspn.c: Ditto.
@
text
@d109 1
a109 1
  shift_n_v = spu_andc((vector unsigned int)spu_sub(0, n_v), spu_cmpgt(n_v, -1));
@


1.2
log
@
2006-11-22  Luca Barbato  <lu_zero@@gentoo.org>

        * libc/machine/spu/memcpy.c: Use spu_splats, explicit cast.
        * libc/machine/spu/memmove.c: Use spu_splats, explicit cast.
        * libc/machine/spu/memset.c: Use spu_splats, remove apple-cast.
        * libc/machine/spu/strchr.c: Use spu_splats, remove apple-cast.
        * libc/machine/spu/strncat.c: Explicit cast.
        * libc/machine/spu/strncmp.c: Use spu_splats.
        * libc/machine/spu/strncpy.c: Explicit cast.
        * libc/machine/spu/strrchr.c: Use spu_splats.
        * libc/machine/spu/strspn.c: Use spu_splats.
@
text
@d53 1
a53 1
  data1 = data2 = spu_splats(0);
@


1.1
log
@
2006-10-27  Joel Schopp  <jschopp@@austin.ibm.com>

        * libc/machine/spu/memcpy.c: Override generic function with vectorized
        version optimized for the cell spu.
        * libc/machine/spu/memmove.c: Ditto.
        * libc/machine/spu/memset.c: Ditto.
        * libc/machine/spu/strcat.c: Ditto.
        * libc/machine/spu/strchr.c: Ditto.
        * libc/machine/spu/strcmp.c: Ditto.
        * libc/machine/spu/strcpy.c: Ditto.
        * libc/machine/spu/strcspn.c: Ditto.
        * libc/machine/spu/strlen.c: Ditto.
        * libc/machine/spu/strncat.c: Ditto.
        * libc/machine/spu/strncmp.c: Ditto.
        * libc/machine/spu/strncpy.c: Ditto.
        * libc/machine/spu/strpbrk.c: Ditto.
        * libc/machine/spu/strrchr.c: Ditto.
        * libc/machine/spu/strspn.c: Ditto.
        * libc/machine/spu/strxfrm.c: Ditto.
        * libc/machine/spu/vec_literal.h: Add abstraction of vector literals,
        removing altivec style initializers.
        * libc/machine/spu/Makefile.am: Add new files to list so they build
        * libc/machine/spu/Makefile.in: Regenerate from new Makefile.am
@
text
@d53 1
a53 1
  data1 = data2 = VEC_SPLAT_U8(0);
@

