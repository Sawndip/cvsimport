head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.10
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.8
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	newlib-2_0_0:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.6
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	newlib-1_20_0:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	newlib-1_18_0:1.2
	cygwin-1_7_1-release:1.2
	newlib-1_17_0-arc:1.2.0.4
	binutils-arc-20080908-branch:1.2.0.2
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.06.16.18.51.10;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.23.18.45.22;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2008-06-16  Ken Werner  <ken.werner@@de.ibm.com>

	* libc/machine/spu/mk_syscalls: Provide .type and .size directives
	in generated assembler files.
	* libc/machine/spu/fprintf.S: Regenerate.
	* libc/machine/spu/fscanf.S: Regenerate.
	* libc/machine/spu/printf.S: Regenerate.
	* libc/machine/spu/scanf.S: Regenerate.
	* libc/machine/spu/snprintf.S: Regenerate.
	* libc/machine/spu/sprintf.S: Regenerate.
	* libc/machine/spu/sscanf.S: Regenerate.
	* libc/machine/spu/stack_reg_va.S (__stack_reg_va): Provide .type
	and .size directives.
	* libc/machine/spu/setjmp.S (setjmp): Likewise.
	(longjmp): Likewise.
@
text
@/*
  Copyright (c) 2007, Toshiba Corporation

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
    * Neither the names of Toshiba nor the names of its
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * This file contains code use to construct a PIC, spu side, syscall 
 * function with variable parameters in accordance with the CBE ABI.
 *
 * This function is equivalent to constructing a va_list structure and 
 * calling the va_list form of the function. Therefore, for example,
 * a printf function stack frame will look like this:
 *
 *             |   Stack    | high memory
 *             |   Parms    |
 *             |            |
 *             |------------|
 *             |  Link Reg  |
 *             |------------|
 *             | Back Chain |<-----. <---- input SP
 *             |------------|      |
 *             |  Reg 74    |      |
 *             |------------|      |
 *             |  Reg 73    |      |
 *             |------------|      |
 *             //   ...    //      |
 *             |------------|      |
 *             |  Reg  5    |      |
 *             |------------|      |
 *             |  Reg  4    |<--.  |
 *             |------------|   |  |
 *     va_list.| call_stack |------'
 *             |------------|   |   
 *     va_list.|  next_arg  |---'
 *             |------------| 
 *             | format (r3)| <---- start of parameters
 *             |------------|                   |------------|
 *             |    stack   |                   |            |
 *             |    code    |                   |(Back Chain)| <---- output SP
 *             | 1-3 qwords | <---- code_ptr    `------------'
 *             `------------'
 *                            low memory
 *
 * This was written in assembly so that it is smaller than what would
 * be produced by using va_start.
 */

#include "c99ppe.h"

#define parms		$2	/* Number of fixed arguments */

#define offset		$67
#define flag		$68
#define regdec		$69
#define link		$70

#define code_ptr	$71
#define ptr		$72
#define inst		$73
#define tmp		$74

	.text
	.global __stack_reg_va
	.type	__stack_reg_va, @@function

__stack_reg_va:

	/* Save registers 69-74 explicitly so that we have some
	 * working registers. 
	 */
	stqd	$74, 16*(-1)($sp)
	stqd	$73, 16*(-2)($sp)
	stqd	$72, 16*(-3)($sp)
	stqd	$71, 16*(-4)($sp)
	stqd	$70, 16*(-5)($sp)
	stqd	$69, 16*(-6)($sp)

	/* Construct self-modifying stack code that saves the remaining
	 * volatile registers onto the stack.
	 */
	il	regdec, -1		/* for decrement register value in save instruction */
	shlqbyi	regdec, regdec, 12
	il	tmp, -(SPE_STACK_REGS+2+3)*16
	a	code_ptr, $sp, tmp
	lqr	tmp, save_regs_1	/* store stack code */
	stqd	tmp,  0(code_ptr)
	lqr	inst, save_regs_2
	ai	ptr, $sp, 16*(-6)
	sync
	bisl	link, code_ptr		/* branch to the constructed stack code */

	/* Adjust pointer so that it points to the first variable
	 * argument on the stack.
	 */
	ai	offset, parms, -1	/* offset = parms - 1 */
	mpyi	offset, offset, 16	/* offset = offset * 16 */
	a	ptr, ptr, offset	/* ptr = ptr + offset */

	/* Store the va_list to the parameter list.
	 */
	stqd	$sp, 16*(-1)(ptr)
	stqd	ptr, 16*(-2)(ptr)

	/* Make $3 store address.
	*/
	ai	offset, parms, 2	/* offset = parms + 2 */
	mpyi	offset, offset, -16	/* offset = offset * -16 */
	a	ptr, ptr, offset	/* ptr = ptr + offset */

	/* Save all the fixed (non-variable arguments on the stack)
	 */
	ceqi	flag, parms, 0x01	/* if(parms==1) flag=0xFFFFFFFF */
	brnz	flag, reg_3		/* if(flag!=0) jump */
	ceqi	flag, parms, 0x02	/* if(parms==2) flag=0xFFFFFFFF */
	brnz	flag, reg_4		/* if(flag!=0) jump */
	stqd	$5, 16*2(ptr)
reg_4:
	stqd	$4, 16*1(ptr)
reg_3:
	stqd	$3, 0(ptr)

	il	$3, -16*(SPE_STACK_REGS+2+2)
	stqx	$sp, $3, $sp		/* save back chain */
	a	$sp, $sp, $3
	bi      $0			/* return to caller */

/***************************** stack code *********************************************/
	
	/* The following code is copied into the stack for re-entract,
	 * self-modified, code execution. This code copies the volatile
	 * registers into a va_list parameter array.
	 */
	.balignl	16, 0
save_regs_1:
	stqd	inst, 16(code_ptr)	/* store instruction */
	sync
	a	inst, inst, regdec	/* decrement register number in the instruction */
	ceqbi	tmp, inst, 3		/* if (reg-num == 3) tmp = 0x000000FF 000..0 */
save_regs_2:	
	stqd	$68, -16(ptr)
	ai	ptr, ptr, -16
	brz	tmp, save_regs_1	/* if (tmp == 0) jump */
	bi	link			/* finish to make va_list */

	.size	__stack_reg_va, .-__stack_reg_va

@


1.1
log
@
2007-08-23  Hidetaka Takano  <hidetaka.takano@@glb.toshiba.co.jp>

        Reduce the memory consumption of variable argument functions
        for SPU (cell):
        * libc/machine/spu/Makefile.am: Replace printf/scanf family C sources
          to assembler sources.
        * libc/machine/spu/Makefile.in: Regenerated.
        * libc/machine/spu/stdio.c: Add __check_init function wrapping
          CHECK_INIT macro to use from assembler routines.
        * libc/machine/spu/c99ppe.h: Add definitions for assembler code.
        * libc/machine/spu/fiprintf.S: New file.
        * libc/machine/spu/fiscanf.S: Ditto.
        * libc/machine/spu/fprintf.S: Ditto.
        * libc/machine/spu/fscanf.S: Ditto.
        * libc/machine/spu/iprintf.S: Ditto.
        * libc/machine/spu/iscanf.S: Ditto.
        * libc/machine/spu/printf.S: Ditto.
        * libc/machine/spu/scanf.S: Ditto.
        * libc/machine/spu/siprintf.S: Ditto.
        * libc/machine/spu/siscanf.S: Ditto.
        * libc/machine/spu/sniprintf.S: Ditto.
        * libc/machine/spu/snprintf.S: Ditto.
        * libc/machine/spu/sprintf.S: Ditto.
        * libc/machine/spu/sscanf.S: Ditto.
        * libc/machine/spu/stack_reg_va.S: Ditto.
        * libc/machine/spu/syscall.def: Ditto. (for maintenance)
        * libc/machine/spu/mk_syscalls: Ditto. (for maintenance)
        * libc/machine/spu/fiprintf.c: Removed. (Replaced by .S)
        * libc/machine/spu/fiscanf.c: Ditto.
        * libc/machine/spu/fprintf.c: Ditto.
        * libc/machine/spu/fscanf.c: Ditto.
        * libc/machine/spu/iprintf.c: Ditto.
        * libc/machine/spu/iscanf.c: Ditto.
        * libc/machine/spu/printf.c: Ditto.
        * libc/machine/spu/scanf.c: Ditto.
        * libc/machine/spu/siprintf.c: Ditto.
        * libc/machine/spu/siscanf.c: Ditto.
        * libc/machine/spu/sniprintf.c: Ditto.
        * libc/machine/spu/snprintf.c: Ditto.
        * libc/machine/spu/sprintf.c: Ditto.
        * libc/machine/spu/sscanf.c: Ditto.
@
text
@d88 1
d168 3
@

