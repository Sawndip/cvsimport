head	1.6;
access;
symbols
	cygwin-1_7_35-release:1.6
	cygwin-1_7_34-release:1.6
	newlib-2_2_0:1.6.0.16
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.6
	cygwin-1_7_31-release:1.6
	cygwin-1_7_30-release:1.6
	cygwin-1_7_29-release:1.6
	cygwin-1_7_28-release:1.6
	newlib-2_1_0:1.6
	cygwin-1_7_27-release:1.6
	cygwin-1_7_26-release:1.6
	cygwin-1_7_25-release:1.6
	cygwin-1_7_24-release:1.6
	cygwin-1_7_23-release:1.6
	cygwin-1_7_22-release:1.6
	cygwin-1_7_21-release:1.6
	cygwin-1_7_20-release:1.6
	cygwin-1_7_19-release:1.6
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.6.0.14
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	newlib-2_0_0:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.12
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	newlib-1_20_0:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	newlib-1_19_0:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	newlib-1_18_0:1.6
	cygwin-1_7_1-release:1.6
	newlib-1_17_0-arc:1.6.0.10
	binutils-arc-20080908-branch:1.6.0.8
	binutils-arc-20080908-branchpoint:1.6
	newlib-1_17_0:1.6
	newlib-1_16_0:1.6
	newlib-1_15_0:1.6
	newlib-csl-coldfire-4_1-32:1.6
	newlib-csl-sourcerygxx-4_1-32:1.6
	newlib-csl-innovasic-fido-3_4_4-33:1.6
	newlib-csl-coldfire-4_1-30:1.6
	newlib-csl-sourcerygxx-4_1-30:1.6
	newlib-csl-coldfire-4_1-28:1.6
	newlib-csl-sourcerygxx-4_1-28:1.6
	newlib-csl-arm-2006q3-27:1.6
	newlib-csl-sourcerygxx-4_1-27:1.6
	newlib-csl-arm-2006q3-26:1.6
	newlib-csl-sourcerygxx-4_1-26:1.6
	newlib-csl-sourcerygxx-4_1-24:1.6
	newlib-csl-sourcerygxx-4_1-23:1.6
	newlib-csl-sourcerygxx-4_1-21:1.6
	newlib-csl-arm-2006q3-21:1.6
	newlib-csl-arm-2006q3-19:1.6
	newlib-csl-sourcerygxx-4_1-19:1.6
	newlib-csl-sourcerygxx-4_1-18:1.6
	newlib-csl-sourcerygxx-3_4_4-25:1.6
	newlib-csl-sourcerygxx-4_1-17:1.6
	cr-0x5f1:1.6.0.6
	newlib-csl-sourcerygxx-4_1-14:1.6
	newlib-csl-sourcerygxx-4_1-13:1.6
	newlib-csl-sourcerygxx-4_1-12:1.6
	newlib-csl-sourcerygxx-4_1-9:1.6
	newlib-csl-sourcerygxx-4_1-8:1.6
	newlib-csl-sourcerygxx-4_1-7:1.6
	newlib-csl-arm-2006q1-6:1.6
	newlib-csl-sourcerygxx-4_1-6:1.6
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.6
	newlib-csl-arm-2005-q1a:1.6
	newlib-1_13_0:1.6
	csl-arm-2004-q3:1.6
	csl-arm-2004-q1a:1.6
	csl-arm-2004-q1:1.6
	newlib-1_12_0:1.6
	csl-arm-2003-q4:1.6
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4
	cygnus_cvs_20020108_pre:1.1.1.1
	newlib-1_10_0:1.1.1.1
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2003.04.09.10.48.02;	author amylaar;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.03.13.06.02;	author amylaar;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.13.14.53.17;	author amylaar;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.08.17.56.50;	author amylaar;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.06.10.43.18;	author amylaar;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* libc/machine/sh/memset.S: Avoid clobbering volatile
	objects following a tiny to-be-set array in the same quadword.
@
text
@!
! Fast SH memset
!
! by Toshiyasu Morita (tm@@netcom.com)
!
! SH5 code by J"orn Rennecke (joern.rennecke@@superh.com)
! Copyright 2002 SuperH Ltd.
!

#include "asm.h"

ENTRY(memset)
#if __SHMEDIA__
	pta/l multiquad, tr0
	ptabs r18, tr2

	andi r2, -8, r25
	add r2, r4, r5
	addi r5, -1, r20    // calculate end address.
	andi r20, -8, r20
	cmveq r4, r25, r20
	bne/u r25, r20, tr0 // multiquad

!	This sequence could clobber volatile objects that are in the same
!	quadword as a very short char array.
!	ldlo.q r2, 0, r7
!	shlli r4, 2, r4
!	movi -1, r8
!	SHHI r8, r4, r8
!	SHHI r8, r4, r8
!	mcmv r7, r8, r3
!	stlo.q r2, 0, r3

	pta/l setlongs, tr0
	movi 4, r8
	bgeu/u r4, r8, tr0
	pta/l endset, tr0
	beqi/u r4, 0, tr0
	st.b r2, 0, r3
	beqi/u r4, 1, tr0
	nop
	st.b r2, 1, r3
	beqi/l r4, 2, tr0
	st.b r2,2,r3
endset: blink tr2, r63
setlongs:
	mshflo.b r3, r3, r3
	mperm.w r3, r63, r3	// Fill pattern now in every byte of r3
	stlo.l r2, 0, r3
	nop
	nop
	sthi.l r5, -1, r3
	blink tr2, r63

multiquad:
	mshflo.b r3, r3, r3
	mperm.w r3, r63, r3	// Fill pattern now in every byte of r3
	pta/l lastquad, tr0
	stlo.q r2, 0, r3
	sub r20, r25, r24
	movi 64, r9
	beqi/u r24, 8, tr0 // lastquad
	pta/l loop, tr1
	addi r20, -7*8, r8 // loop end address; This might overflow, so we need
	                   // to use a different test before we start the loop
	bgeu/u r24, r9, tr1// loop
	st.q r25, 8, r3
	shlri r24, 4, r24
	st.q r20, -8, r3
	beqi/u r24, 1, tr0 // lastquad
	st.q r25, 16, r3
	st.q r20, -16, r3
	beqi/u r24, 2, tr0 // lastquad
	st.q r25, 24, r3
	st.q r20, -24, r3
lastquad:
	sthi.q r5, -1, r3
	blink tr2,r63

loop:
	alloco r25, 32
	st.q r25, 8, r3
	st.q r25, 16, r3
	st.q r25, 24, r3
	st.q r25, 32, r3
	addi r25, 32, r25
	bgeu/l r8, r25, tr1 // loop

	st.q r20, -40, r3
	st.q r20, -32, r3
	st.q r20, -24, r3
	st.q r20, -16, r3
	st.q r20, -8, r3
	sthi.q r5, -1, r3
	blink tr2,r63
#else /* ! SHMEDIA, i.e. SH1 .. SH4 / SHcompact */
! Entry: r4: destination pointer
!        r5: fill value
!        r6: byte count
!
! Exit:  r0-r3: trashed
!

! This assumes that the first four bytes of the address space (0..3) are
! reserved - usually by the linker script.  Otherwise, we would had to check
! for the case of objects of the size 12..15 at address 0..3 .

#ifdef __SH5__
#define DST r2
#define VAL r3
#define CNT r4
#define TMP r5
#else
#define DST r4
#define VAL r5
#define CNT r6
#define TMP r2
#endif

	mov	#12,r0	! Check for small number of bytes
	cmp/gt	CNT,r0
	mov	DST,r0
	SL(bt, L_store_byte_loop_check0, add DST,CNT)

	tst	#3,r0	! Align destination
	SL(bt,	L_dup_bytes, extu.b r5,r5)
	.balignw 4,0x0009
L_align_loop:
	mov.b	VAL,@@r0
	add	#1,r0
	tst	#3,r0
	bf	L_align_loop

L_dup_bytes:	
	swap.b	VAL,TMP	! Duplicate bytes across longword
	or	TMP,VAL
	swap.w	VAL,TMP
	or	TMP,VAL

	add	#-16,CNT

	.balignw 4,0x0009
L_store_long_loop:
	mov.l	VAL,@@r0	! Store double longs to memory
	cmp/hs	CNT,r0
	mov.l	VAL,@@(4,r0)
	SL(bf, L_store_long_loop, add #8,r0)

	add	#16,CNT

L_store_byte_loop_check0:
	cmp/eq	CNT,r0
	bt	L_exit
	.balignw 4,0x0009
L_store_byte_loop:
	mov.b	VAL,@@r0	! Store bytes to memory
	add	#1,r0
	cmp/eq	CNT,r0
	bf	L_store_byte_loop

L_exit:
	rts
	mov	r4,r0
#endif /* ! SHMEDIA */
@


1.5
log
@	* libc/machine/sh/memset.S: Fix problem with alloco region
	exceeding destination region for length >= 88 bytes, start
	& 0x16 == 0, end & 0x1f == 18.
@
text
@a14 1
	mshflo.b r3,r3,r3
a15 1
	mperm.w r3, r63, r3	// Fill pattern now in every byte of r3
d24 29
a52 7
	ldlo.q r2, 0, r7
	shlli r4, 2, r4
	movi -1, r8
	SHHI r8, r4, r8
	SHHI r8, r4, r8
	mcmv r7, r8, r3
	stlo.q r2, 0, r3
d56 2
@


1.4
log
@	* libc/machine/sh/memset.S (memset, __SHMEDIA__ code):
	Fixed bug in writing end of set region.
@
text
@d15 1
a15 1
	andi r2, 7, r22
a16 2
	mshflo.b r3,r3,r3
	add r4, r22, r23
d19 6
a24 2
	movi 8, r9
	bgtu/u r23, r9, tr0 // multiquad
d38 3
a40 3
	shlri r23, 3, r24
	add r2, r4, r5
	beqi/u r24, 1, tr0 // lastquad
a41 2
	sub r2, r22, r25
	andi r5, -8, r20   // calculate end address and
d44 1
a44 1
	bge/u r24, r9, tr1 // loop
d46 1
a47 1
	shlri r24, 1, r24
@


1.3
log
@	* libc/machine/sh/memset.S (memset, __SHMEDIA__ code):
	Also handle as single quad word when destination ends at last
	byte of first quad word.  Fix byte selection in single quad code.
@
text
@d22 1
a22 1
	bgtu/u r23, r9, tr0
d65 1
a65 1
	bgeu/l r8, r25, tr1
d67 2
@


1.2
log
@	* Makefile.am (lib_a_SOURCES, SH64 case): Add memcpy.S, memset.S
	and strcpy.S.
	* Makefile.in: Regenerate.
	* asm.h (_ENTRY): Set SH5 alignment to 8 bytes.
	(SHHI, SHLO): Define.
	* memcpy.S: Add code for SH5.
	* memset.S: Likewise.
	* strcpy.S: Likewise.
@
text
@d15 1
d18 2
a19 1
	mperm.w r3, r63, r3
d21 2
a22 4
	andi r2, 7, r22
	add r4, r22, r23
	shlri r23, 3, r24
	bnei/u r24, 0, tr0
d25 1
a25 1
	shlli r4, 3, r4
d28 3
a30 2
	mcmv r7, r8, r22
	stlo.q r2, 0, r22
d36 1
d43 1
a43 1
	movi 8, r9         // to use a different test before we start the loop
@


1.1
log
@Initial revision
@
text
@d6 65
d82 11
a92 1
#include "asm.h"
a93 1
ENTRY(memset)
d95 3
a97 3
	cmp/gt	r6,r0
	mov	r4,r0
	SL(bt, L_store_byte_loop_check0, add r4,r6)
d103 1
a103 1
	mov.b	r5,@@r0
d109 4
a112 4
	swap.b	r5,r2	! Duplicate bytes across longword
	or	r2,r5
	swap.w	r5,r2
	or	r2,r5
d114 1
a114 1
	add	#-16,r6
d118 3
a120 3
	mov.l	r5,@@r0	! Store double longs to memory
	cmp/hs	r6,r0
	mov.l	r5,@@(4,r0)
d123 1
a123 1
	add	#16,r6
d126 1
a126 1
	cmp/eq	r6,r0
d130 1
a130 1
	mov.b	r5,@@r0	! Store bytes to memory
d132 1
a132 1
	cmp/eq	r6,r0
d138 1
a138 1

@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
