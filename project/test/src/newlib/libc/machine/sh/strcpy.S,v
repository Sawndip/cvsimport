head	1.5;
access;
symbols
	cygwin-1_7_35-release:1.5
	cygwin-1_7_34-release:1.5
	newlib-2_2_0:1.5.0.16
	cygwin-1_7_33-release:1.5
	cygwin-1_7_32-release:1.5
	cygwin-1_7_31-release:1.5
	cygwin-1_7_30-release:1.5
	cygwin-1_7_29-release:1.5
	cygwin-1_7_28-release:1.5
	newlib-2_1_0:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	cygwin-1_7_25-release:1.5
	cygwin-1_7_24-release:1.5
	cygwin-1_7_23-release:1.5
	cygwin-1_7_22-release:1.5
	cygwin-1_7_21-release:1.5
	cygwin-1_7_20-release:1.5
	cygwin-1_7_19-release:1.5
	cygwin-64bit-postmerge:1.5
	cygwin-64bit-premerge-branch:1.5.0.14
	cygwin-64bit-premerge:1.5
	cygwin-1_7_18-release:1.5
	newlib-2_0_0:1.5
	cygwin-1_7_17-release:1.5
	cygwin-64bit-branch:1.5.0.12
	cygwin-1_7_16-release:1.5
	cygwin-1_7_15-release:1.5
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	cygwin-1_7_11-release:1.5
	cygwin-1_7_10-release:1.5
	newlib-1_20_0:1.5
	cygwin-1_7_9-release:1.5
	cygwin-1_7_8-release:1.5
	newlib-1_19_0:1.5
	cygwin-1_7_7-release:1.5
	cygwin-1_7_5-release:1.5
	cygwin-1_7_4-release:1.5
	cygwin-1_7_3-release:1.5
	cygwin-1_7_2-release:1.5
	newlib-1_18_0:1.5
	cygwin-1_7_1-release:1.5
	newlib-1_17_0-arc:1.5.0.10
	binutils-arc-20080908-branch:1.5.0.8
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.5
	newlib-1_15_0:1.5
	newlib-csl-coldfire-4_1-32:1.5
	newlib-csl-sourcerygxx-4_1-32:1.5
	newlib-csl-innovasic-fido-3_4_4-33:1.5
	newlib-csl-coldfire-4_1-30:1.5
	newlib-csl-sourcerygxx-4_1-30:1.5
	newlib-csl-coldfire-4_1-28:1.5
	newlib-csl-sourcerygxx-4_1-28:1.5
	newlib-csl-arm-2006q3-27:1.5
	newlib-csl-sourcerygxx-4_1-27:1.5
	newlib-csl-arm-2006q3-26:1.5
	newlib-csl-sourcerygxx-4_1-26:1.5
	newlib-csl-sourcerygxx-4_1-24:1.5
	newlib-csl-sourcerygxx-4_1-23:1.5
	newlib-csl-sourcerygxx-4_1-21:1.5
	newlib-csl-arm-2006q3-21:1.5
	newlib-csl-arm-2006q3-19:1.5
	newlib-csl-sourcerygxx-4_1-19:1.5
	newlib-csl-sourcerygxx-4_1-18:1.5
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5
	cr-0x5f1:1.5.0.6
	newlib-csl-sourcerygxx-4_1-14:1.5
	newlib-csl-sourcerygxx-4_1-13:1.5
	newlib-csl-sourcerygxx-4_1-12:1.5
	newlib-csl-sourcerygxx-4_1-9:1.5
	newlib-csl-sourcerygxx-4_1-8:1.5
	newlib-csl-sourcerygxx-4_1-7:1.5
	newlib-csl-arm-2006q1-6:1.5
	newlib-csl-sourcerygxx-4_1-6:1.5
	newlib-csl-sourcerygxx-4_1-5:1.5
	newlib-csl-sourcerygxx-4_1-4:1.5
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.5
	newlib-csl-arm-2005-q1b:1.5
	newlib-csl-arm-2005-q1a:1.5
	newlib-1_13_0:1.5
	csl-arm-2004-q3:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	newlib-1_12_0:1.5
	csl-arm-2003-q4:1.5
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	newlib-1_11_0:1.5
	cygnus_cvs_20020108_pre:1.1.1.1
	newlib-1_10_0:1.1.1.1
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2002.06.13.18.25.19;	author amylaar;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.16.17.29.15;	author amylaar;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.16.16.16.14;	author amylaar;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.06.10.43.18;	author amylaar;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* libc/machine/sh/strcpy.S (strcpy, __SHMEDIA__ code):
	Fix clobbering bytes before destination if src and dst have same
	non-zero misalignment.
@
text
@! Entry: arg0: destination
!        arg1: source
! Exit:  result: destination
!
! SH5 code Copyright 2002 SuperH Ltd.

#include "asm.h"

ENTRY(strcpy)

#if __SHMEDIA__

	pta/l shortstring,tr1
	ldlo.q r3,0,r4
	ptabs r18,tr4
	shlli r3,3,r7
	addi r2, 8, r0
	mcmpeq.b r4,r63,r6
	SHHI r6,r7,r6
	bnei/u r6,0,tr1 // shortstring
	pta/l no_lddst, tr2
	ori r3,-8,r23
	sub r2, r23, r0
	sub r3, r2, r21
	addi r21, 8, r20
	ldx.q r0, r21, r5
	pta/l loop, tr0
	ori r2,-8,r22
	mcmpeq.b r5, r63, r6
	bgt/u r22, r23, tr2 // no_lddst

	// r22 < r23 :  Need to do a load from the destination.
	// r22 == r23 : Doesn't actually need to load from destination,
	//              but still can be handled here.
	ldlo.q r2, 0, r9
	movi -1, r8
	SHLO r8, r7, r8
	mcmv r4, r8, r9
	stlo.q r2, 0, r9
	beqi/l r6, 0, tr0 // loop

	add r5, r63, r4
	addi r0, 8, r0
	blink tr1, r63 // shortstring
no_lddst:
	// r22 > r23: note that for r22 == r23 the sthi.q would clobber
	//            bytes before the destination region.
	stlo.q r2, 0, r4
	SHHI r4, r7, r4
	sthi.q r0, -1, r4
	beqi/l r6, 0, tr0 // loop

	add r5, r63, r4
	addi r0, 8, r0
shortstring:
#ifndef __LITTLE_ENDIAN__
	pta/l shortstring2,tr1
	byterev r4,r4
#endif
shortstring2:
	st.b r0,-8,r4
	andi r4,0xff,r5
	shlri r4,8,r4
	addi r0,1,r0
	bnei/l r5,0,tr1
	blink tr4,r63 // return
	
	.balign 8
loop:
	stlo.q r0, 0, r5
	ldx.q r0, r20, r4
	addi r0, 16, r0
	sthi.q r0, -9, r5
	mcmpeq.b r4, r63, r6
	bnei/u r6, 0, tr1 // shortstring
	ldx.q r0, r21, r5
	stlo.q r0, -8, r4
	sthi.q r0, -1, r4
	mcmpeq.b r5, r63, r6
	beqi/l r6, 0, tr0 // loop

	add r5, r63, r4
	addi r0, 8, r0
	blink tr1, r63 // shortstring

#else /* ! __SHMEDIA__, i.e. SH 1..4 / SHcompact */

#ifdef __SH5__
#define DST r2
#define SRC r3
#define TMP r4
#define RESULT R2
!        r0,r1,r3,r4: clobbered
#else
#define DST r4
#define SRC r5
#define TMP r2
#define RESULT r0
!        r1-r2,r5: clobbered
#endif
	mov     DST,r0
	or      SRC,r0
	tst	#3,r0
	SL(bf, L_setup_char_loop, mov DST,r0)
	mov.l   @@SRC+,r1
	mov     #0,TMP
	cmp/str TMP,r1
	SL(bt, Longword_loop_end, sub SRC,r0)
	.align  2
Longword_loop:
	mov.l   r1,@@(r0,SRC)
	mov.l   @@SRC+,r1
	cmp/str TMP,r1
	bt      Longword_loop_end
	mov.l   r1,@@(r0,SRC)
	mov.l   @@SRC+,r1
	cmp/str TMP,r1
	bf      Longword_loop
Longword_loop_end:
	add	#-4,SRC
	add	#3,r0
	.align  2
L_char_loop:
	mov.b	@@SRC+,r1
L_char_loop_start:
	tst	r1,r1
	SL(bf, L_char_loop, mov.b r1,@@(r0,SRC))
	rts
	mov DST,RESULT
L_setup_char_loop:
	mov.b	@@SRC+,r1
	bra L_char_loop_start
	sub SRC,r0
#endif /* ! __SHMEDIA__ */
@


1.4
log
@	* libc/machine/sh/strcpy.S (strcpy): make sure r0 has right value
	at first loop exit point.
@
text
@d30 1
a30 1
	bge/u r22, r23, tr2 // no_lddst
d32 3
a34 1
	// r22 < r23 ;  Need to do a load from the destination.
d46 2
@


1.3
log
@	* libc/machine/sh/strcpy.S (strcpy): Replace LITTLE_ENDIAN with
	__LITTLE_ENDIAN__.
@
text
@d17 1
a17 1
	add r2,r63,r0
d41 1
d50 1
d57 1
a57 1
	st.b r0,0,r4
d79 1
@


1.2
log
@	* Makefile.am (lib_a_SOURCES, SH64 case): Add memcpy.S, memset.S
	and strcpy.S.
	* Makefile.in: Regenerate.
	* asm.h (_ENTRY): Set SH5 alignment to 8 bytes.
	(SHHI, SHLO): Define.
	* memcpy.S: Add code for SH5.
	* memset.S: Likewise.
	* strcpy.S: Likewise.
@
text
@d50 1
a50 1
#ifndef LITTLE_ENDIAN
@


1.1
log
@Initial revision
@
text
@d1 5
a5 4
! Entry: r4: destination
!        r5: source
! Exit:  r0: destination
!        r1-r2,r5: clobbered
d10 86
a95 2
	mov     r4,r0
	or      r5,r0
d97 5
a101 5
	SL(bf, L_setup_char_loop, mov r4,r0)
	mov.l   @@r5+,r1
	mov     #0,r2
	cmp/str r2,r1
	SL(bt, Longword_loop_end, sub r5,r0)
d104 3
a106 3
	mov.l   r1,@@(r0,r5)
	mov.l   @@r5+,r1
	cmp/str r2,r1
d108 3
a110 3
	mov.l   r1,@@(r0,r5)
	mov.l   @@r5+,r1
	cmp/str r2,r1
d113 1
a113 1
	add	#-4,r5
d117 1
a117 1
	mov.b	@@r5+,r1
d120 1
a120 1
	SL(bf, L_char_loop, mov.b r1,@@(r0,r5))
d122 1
a122 1
	mov r4,r0
d124 1
a124 1
	mov.b	@@r5+,r1
d126 2
a127 1
	sub r5,r0
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
