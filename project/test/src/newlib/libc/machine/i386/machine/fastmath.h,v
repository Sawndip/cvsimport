head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	newlib-2_2_0:1.3.0.10
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_28-release:1.3
	newlib-2_1_0:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.8
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	newlib-2_0_0:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.6
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	newlib-1_20_0:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	newlib-1_19_0:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	newlib-1_18_0:1.3
	cygwin-1_7_1-release:1.3
	newlib-1_17_0-arc:1.3.0.4
	binutils-arc-20080908-branch:1.3.0.2
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3;
locks; strict;
comment	@ * @;


1.3
date	2007.12.19.22.20.25;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.17.19.36.43;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.17.19.21.32;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2007-12-19  Dave Korn  <dave.korn@@artimi.com>
            Jeff Johnston  <jjohnstn@@redhhat.com>

        * libc/include/_ansi.h: Add _LONG_LONG definition.
        * libc/include/math.h (llrint, llrintf, rintl, lrintl, llrintl): Add
        prototypes.
        * libc/machine/i386/machine/fastmath.h: Add support for new i386
        fast math versions of rint, lrint, and llrint family functions.
        * libm/machine/i386/Makefile.am: Add new files.
        * libm/machine/i386/Makefile.in: Regenerated.
        * libm/machine/i386/f_llrint.c, libm/machine/i386/f_lrint.c,
        libm/machine/i386/f_rint.c, libm/machine/i386/f_llrintf.c,
        libm/machine/i386/f_lrintf.c, libm/machine/i386/f_rintf.c,
        libm/machine/i386/f_llrintl.c, libm/machine/i386/f_lrintl.c,
        libm/machine/i386/f_rintl.c:  New files with fast math implementations.
@
text
@#ifndef _MACHFASTMATH_H
#define _MACHFASTMATH_H

#if defined(__GNUC__) && __STDC__ - 0 > 0

#define __str1__(__x) #__x
#define __str2__(__x) __str1__(__x)
#define __U_L_PREFIX__ __str2__(__USER_LABEL_PREFIX__)

__extension__ double atan2(double, double)
  __asm__(__U_L_PREFIX__ "_f_atan2");
__extension__ double exp(double)
  __asm__(__U_L_PREFIX__ "_f_exp");
__extension__ double frexp(double, int*)
  __asm__(__U_L_PREFIX__ "_f_frexp");
__extension__ double ldexp(double, int)
  __asm__(__U_L_PREFIX__ "_f_ldexp");
__extension__ double log(double)
  __asm__(__U_L_PREFIX__ "_f_log");
__extension__ double log10(double)
  __asm__(__U_L_PREFIX__ "_f_log10");
__extension__ double pow(double, double)
  __asm__(__U_L_PREFIX__ "_f_pow");
__extension__ double tan(double)
  __asm__(__U_L_PREFIX__ "_f_tan");

#if !defined(__STRICT_ANSI__) || defined(__cplusplus) || __STDC_VERSION__ >= 199901L


__extension__ float atan2f(float, float)
  __asm__(__U_L_PREFIX__ "_f_atan2f");
__extension__ float expf(float)
  __asm__(__U_L_PREFIX__ "_f_expf");
__extension__ float frexpf(float, int*)
  __asm__(__U_L_PREFIX__ "_f_frexpf");
__extension__ float ldexpf(float, int)
  __asm__(__U_L_PREFIX__ "_f_ldexpf");
__extension__ long long llrint(double)
  __asm__(__U_L_PREFIX__ "_f_llrint");
__extension__ long long llrintf(float)
  __asm__(__U_L_PREFIX__ "_f_llrintf");
__extension__ long long llrintl(long double)
  __asm__(__U_L_PREFIX__ "_f_llrintl");
__extension__ float logf(float)
  __asm__(__U_L_PREFIX__ "_f_logf");
__extension__ float log10f(float)
  __asm__(__U_L_PREFIX__ "_f_log10f");
__extension__ long lrint(double)
  __asm__(__U_L_PREFIX__ "_f_lrint");
__extension__ long lrintf(float)
  __asm__(__U_L_PREFIX__ "_f_lrintf");
__extension__ long lrintl(long double)
  __asm__(__U_L_PREFIX__ "_f_lrintl");
__extension__ float powf(float, float)
  __asm__(__U_L_PREFIX__ "_f_powf");
__extension__ double rint(double)
  __asm__(__U_L_PREFIX__ "_f_rint");
__extension__ float rintf(float)
  __asm__(__U_L_PREFIX__ "_f_rintf");
__extension__ long double rintl(long double)
  __asm__(__U_L_PREFIX__ "_f_rintl");
__extension__ float tanf(float)
  __asm__(__U_L_PREFIX__ "_f_tanf");
#endif

#else

double EXFUN(_f_atan2,(double, double));
double EXFUN(_f_exp,(double));
double EXFUN(_f_frexp,(double, int*));
double EXFUN(_f_ldexp,(double, int));
double EXFUN(_f_log,(double));
double EXFUN(_f_log10,(double));
double EXFUN(_f_pow,(double, double));

#define atan2(__y,__x)	_f_atan2((__y),(__x))
#define exp(__x)	_f_exp(__x)
#define frexp(__x,__p)	_f_frexp((__x),(__p))
#define ldexp(__x,__e)	_f_ldexp((__x),(__e))
#define log(__x)	_f_log(__x)
#define log10(__x)	_f_log10(__x)
#define pow(__x,__y)	_f_pow((__x),(__y))

#ifndef __STRICT_ANSI__

float EXFUN(_f_atan2f,(float, float));
float EXFUN(_f_expf,(float));
float EXFUN(_f_frexpf,(float, int*));
float EXFUN(_f_ldexpf,(float, int));
long long EXFUN(_f_llrint,(double));
long long EXFUN(_f_llrintf,(float));
long long EXFUN(_f_llrintl,(long double));
float EXFUN(_f_logf,(float));
float EXFUN(_f_log10f,(float));
long EXFUN(_f_lrint,(double));
long EXFUN(_f_lrintf,(float));
long EXFUN(_f_lrintl,(long double));
float EXFUN(_f_powf,(float, float));
float EXFUN(_f_rint,(double));
double EXFUN(_f_rintf,(float));
long double EXFUN(_f_rintl,(long double));

#define atan2f(__y,__x)	_f_atan2f((__y),(__x))
#define expf(__x)	_f_expf(__x)
#define frexpf(__x,__p)	_f_frexpf((__x),(__p))
#define ldexpf(__x,__e)	_f_ldexpf((__x),(__e))
#define llrint(__x)	_f_llrint((__x))
#define llrintf(__x)	_f_llrintf((__x))
#define llrintl(__x)	_f_llrintl((__x))
#define logf(__x)	_f_logf(__x)
#define log10f(__x)	_f_log10f(__x)
#define lrint(__x)	_f_lrint((__x))
#define lrintf(__x)	_f_lrintf((__x))
#define lrintl(__x)	_f_lrintl((__x))
#define powf(__x,y)	_f_powf((__x),(__y))
#define rint(__x)	_f_rint((__x))
#define rintf(__x)	_f_rintf((__x))
#define rintl(__x)	_f_rintl((__x))
#endif

#endif /* GCC */
#endif /* _MACHFASTMATH_H */
@


1.2
log
@
Fix typo.
@
text
@d29 1
d38 6
d48 6
d56 6
a75 8
float EXFUN(_f_atan2f,(float, float));
float EXFUN(_f_expf,(float));
float EXFUN(_f_frexpf,(float, int*));
float EXFUN(_f_ldexpf,(float, int));
float EXFUN(_f_logf,(float));
float EXFUN(_f_log10f,(float));
float EXFUN(_f_powf,(float, float));

d85 18
d107 3
d112 3
d116 3
@


1.1
log
@
2007-10-17  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/i386/machine/fastmath.h: New file.
@
text
@d6 1
a6 1
#define __str1__(__x) #x
@

