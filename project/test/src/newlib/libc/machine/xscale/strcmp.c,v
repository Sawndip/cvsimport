head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.16
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.14
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	newlib-2_0_0:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.12
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	newlib-1_20_0:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	newlib-1_18_0:1.2
	cygwin-1_7_1-release:1.2
	newlib-1_17_0-arc:1.2.0.10
	binutils-arc-20080908-branch:1.2.0.8
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	cr-0x5f1:1.2.0.6
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.04.20.00.29.51;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.30.01.57.27;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2002-04-19  Bill Siegmund

        * libc/machine/xscale/memchr.c: Don't use multi-line strings.
        * libc/machine/xscale/memcmp.c: Ditto.
        * libc/machine/xscale/memcpy.c: Ditto.
        * libc/machine/xscale/memmove.c: Ditto.
        * libc/machine/xscale/memset.c: Ditto.
        * libc/machine/xscale/strchr.c: Ditto.
        * libc/machine/xscale/strcmp.c: Ditto.
        * libc/machine/xscale/strcpy.c: Ditto.
        * libc/machine/xscale/strlen.c: Ditto.
@
text
@#if defined __thumb__

#include "../../string/strcmp.c"

#else

#include <string.h>
#include "xscale.h"

int
strcmp (const char *s1, const char *s2)
{
  asm (PRELOADSTR ("%0") : : "r" (s1));
  asm (PRELOADSTR ("%0") : : "r" (s2));

#ifndef __OPTIMIZE_SIZE__
  if (((long)s1 & 3) == ((long)s2 & 3))
    {
      int result;

      /* Skip unaligned part.  */
      while ((long)s1 & 3)
	{
	  if (*s1 == '\0' || *s1 != *s2)
	    goto out;
	  s1++;
	  s2++;
	}

  /* Load two constants:
     lr = 0xfefefeff [ == ~(0x80808080 << 1) ]
     ip = 0x80808080  */

      asm (
       "ldr	r2, [%1, #0]\n\
	ldr	r3, [%2, #0]\n\
	cmp	r2, r3\n\
	bne	2f\n\
\n\
	mov	ip, #0x80\n\
	add	ip, ip, #0x8000\n\
	add	ip, ip, ip, lsl #16\n\
	mvn	lr, ip, lsl #1\n\
\n\
0:\n\
	ldr	r2, [%1, #0]\n\
	add	r3, r2, lr\n\
	bic	r3, r3, r2\n\
	tst	r3, ip\n\
	beq	1f\n\
	mov	%0, #0x0\n\
	b	3f\n\
1:\n\
	ldr	r2, [%1, #4]!\n\
	ldr	r3, [%2, #4]!\n\
"	PRELOADSTR("%1") "\n\
"	PRELOADSTR("%2") "\n\
	cmp	r2, r3\n\
	beq	0b"

       /* The following part could be done in a C loop as well, but it needs
	  to be assembler to save some cycles in the case where the optimized
	  loop above finds the strings to be equal.  */
"\n\
2:\n\
	ldrb	r2, [%1, #0]\n\
"	PRELOADSTR("%1") "\n\
"	PRELOADSTR("%2") "\n\
	cmp	r2, #0x0\n\
	beq	1f\n\
	ldrb	r3, [%2, #0]\n\
	cmp	r2, r3\n\
	bne	1f\n\
0:\n\
	ldrb	r3, [%1, #1]!\n\
	add	%2, %2, #1\n\
	ands	ip, r3, #0xff\n\
	beq	1f\n\
	ldrb	r3, [%2]\n\
	cmp	ip, r3\n\
	beq	0b\n\
1:\n\
	ldrb	lr, [%1, #0]\n\
	ldrb	ip, [%2, #0]\n\
	rsb	%0, ip, lr\n\
3:\n\
"

       : "=r" (result), "=&r" (s1), "=&r" (s2)
       : "1" (s1), "2" (s2)
       : "lr", "ip", "r2", "r3", "cc");
      return result;
    }
#endif

  while (*s1 != '\0' && *s1 == *s2)
    {
      asm (PRELOADSTR("%0") : : "r" (s1));
      asm (PRELOADSTR("%0") : : "r" (s2));
      s1++;
      s2++;
    }
 out:
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
}

#endif
@


1.1
log
@Add support for Intel's XScale processor
@
text
@d35 24
a58 24
       "ldr	r2, [%1, #0]
	ldr	r3, [%2, #0]
	cmp	r2, r3
	bne	2f

	mov	ip, #0x80
	add	ip, ip, #0x8000
	add	ip, ip, ip, lsl #16
	mvn	lr, ip, lsl #1

0:
	ldr	r2, [%1, #0]
	add	r3, r2, lr
	bic	r3, r3, r2
	tst	r3, ip
	beq	1f
	mov	%0, #0x0
	b	3f
1:
	ldr	r2, [%1, #4]!
	ldr	r3, [%2, #4]!
"	PRELOADSTR("%1") "
"	PRELOADSTR("%2") "
	cmp	r2, r3
d64 23
a86 23
"
2:
	ldrb	r2, [%1, #0]
"	PRELOADSTR("%1") "
"	PRELOADSTR("%2") "
	cmp	r2, #0x0
	beq	1f
	ldrb	r3, [%2, #0]
	cmp	r2, r3
	bne	1f
0:
	ldrb	r3, [%1, #1]!
	add	%2, %2, #1
	ands	ip, r3, #0xff
	beq	1f
	ldrb	r3, [%2]
	cmp	ip, r3
	beq	0b
1:
	ldrb	lr, [%1, #0]
	ldrb	ip, [%2, #0]
	rsb	%0, ip, lr
3:
@

