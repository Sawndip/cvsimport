head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	newlib-2_2_0:1.3.0.16
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_28-release:1.3
	newlib-2_1_0:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.14
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	newlib-2_0_0:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.12
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	newlib-1_20_0:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	newlib-1_19_0:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	newlib-1_18_0:1.3
	cygwin-1_7_1-release:1.3
	newlib-1_17_0-arc:1.3.0.10
	binutils-arc-20080908-branch:1.3.0.8
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3
	newlib-1_15_0:1.3
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	cr-0x5f1:1.3.0.6
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	newlib-1_11_0:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.11.10.21.36.38;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.16.15.45.29;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.17.05.57.19;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2003-11-10  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/machine/powerpc/ufix64toa.c (_ufix64to_r): Fix shifts
        to use (Ebits + 1) which accounts for the sign-bit.
@
text
@/* _ufix64toa_r: convert unsigned 64-bit fixed point to ASCII string.
 *
 * This routine converts an unsigned fixed-point number to long double format and
 * then calls _ldtoa_r to do the conversion.
 *
 * Written by Jeff Johnston.
 */

#ifdef __SPE__

#include <_ansi.h>
#include <limits.h>
#include <errno.h>
#include <stdlib.h>
#include <reent.h>
#include "fix64.h"

extern char *_simdldtoa_r _PARAMS((struct _reent *, LONG_DOUBLE_UNION *, int,
			       int, int *, int *, char **));

/*
 * Convert an unsigned fixed-point 64-bit value to string.
 *
 * Ignores `locale' stuff.
 */

char *
_DEFUN (_ufix64toa_r, (rptr, value, mode, ndigits, decpt, sign, rve),
	struct _reent *rptr _AND
	__uint64_t value _AND
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
  union long_double_union ldbl;
  union fix64_union fix64;
  unsigned long tmp;
  int exp, negexp;

  /* if input is 0, no additional work is needed */
  if (value == 0)
    {
      ldbl.i[0] = ldbl.i[1] = ldbl.i[2] = ldbl.i[3] = 0;
    }
  else /* otherwise, we calculate long double equivalent of value */
    {
      /* find exponent by locating most-significant one-bit */
      fix64.ll = value;
      negexp = 1;
      if (hiword(fix64) == 0)
	{
	  tmp = loword(fix64);
	  negexp = 33;
	}
      else
	{
	  tmp = hiword(fix64);
	  negexp = 1;
	}

      while (negexp < 65)
	{
	  if (tmp & 0x80000000)
	    break;
	  ++negexp;
	  tmp <<= 1;
	}
      
      /* shift input appropriately */
      fix64.ll = value << (negexp - 1 + (Exp_msk1 != 0));
      
      /* build long double */
      exp = -negexp + Bias;
      word0(ldbl) = (exp << Exp_shift);
      word1(ldbl) = hiword(fix64) << (32-Ebits-1);
      word2(ldbl) = loword(fix64) << (32-Ebits-1);
      word3(ldbl) = 0;
      if (Ebits+1 < 32)
	{
	  word0(ldbl) |= hiword(fix64) >> (Ebits + 1);
	  word1(ldbl) |= loword(fix64) >> (Ebits + 1);
	}
    }

  /* convert long double to character */
  return _simdldtoa_r (rptr, &ldbl, mode, ndigits, decpt, sign, rve);
}

#endif /* __SPE__ */
@


1.2
log
@
2003-04-16  Jeff Johnston  <jjohnstn@@redhat.com>

        * newlib/libc/machine/powerpc (ato*fix*.c,strto*fix*.c): Shield
        all code with #ifdef __SPE__ test.
        * newlib/libc/machine/powerpc (simdldtoa.c, ufix64toa.c): Ditto.
@
text
@d77 2
a78 2
      word1(ldbl) = hiword(fix64) << (32-Ebits);
      word2(ldbl) = loword(fix64) << (32-Ebits);
d80 1
a80 1
      if (Ebits < 32)
d82 2
a83 2
	  word0(ldbl) |= hiword(fix64) >> Ebits;
	  word1(ldbl) |= loword(fix64) >> Ebits;
@


1.1
log
@
2002-08-17  Jeff Johnston  <jjohnstn@@redhat.com>

        * configure.host: Add powerpc*-*-eabispe* configuration.
        * libc/machine/powerpc/atosfix16.c: New fixed-point conversion file.
        * libc/machine/powerpc/atosfix32.c: Ditto.
        * libc/machine/powerpc/atosfix64.c: Ditto.
        * libc/machine/powerpc/atoufix16.c: Ditto.
        * libc/machine/powerpc/atoufix32.c: Ditto.
        * libc/machine/powerpc/atoufix64.c: Ditto.
        * libc/machine/powerpc/fix64.h: Ditto.
        * libc/machine/powerpc/simdldtoa.c: Ditto.
        * libc/machine/powerpc/strtosfix16.c: Ditto.
        * libc/machine/powerpc/strtosfix32.c: Ditto.
        * libc/machine/powerpc/strtosfix64.c: Ditto.
        * libc/machine/powerpc/strtoufix16.c: Ditto.
        * libc/machine/powerpc/strtoufix32.c: Ditto.
        * libc/machine/powerpc/strtoufix64.c: Ditto.
        * libc/machine/powerpc/ufix64toa.c: Ditto.
        * libc/machine/powerpc/configure.in: Add check for
        powerpc*-eabispe and add fixed-point conversion functions.
        * libc/machine/powerpc/configure: Regenerated.
        * libc/machine/powerpc/vfprintf.c[__SPE__]: Add support for
        %r and %R format specifiers which handle fixed-point data.
        * libc/machine/powerpc/vfscanf.c[__SPE__]: Ditto.
        * libc/machine/powerpc/machine/stdlib.h[__SPE__]: Add fixed-point
        function prototypes.
@
text
@d9 2
d91 1
@

