head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	newlib-2_2_0:1.7.0.2
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.6
	cygwin-1_7_31-release:1.6
	cygwin-1_7_30-release:1.6
	cygwin-1_7_29-release:1.6
	cygwin-1_7_28-release:1.6
	newlib-2_1_0:1.6
	cygwin-1_7_27-release:1.6
	cygwin-1_7_26-release:1.6
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.14
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.12
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	newlib-1_19_0:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.10
	binutils-arc-20080908-branch:1.4.0.8
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4
	newlib-csl-sourcerygxx-4_1-32:1.4
	newlib-csl-innovasic-fido-3_4_4-33:1.4
	newlib-csl-coldfire-4_1-30:1.4
	newlib-csl-sourcerygxx-4_1-30:1.4
	newlib-csl-coldfire-4_1-28:1.4
	newlib-csl-sourcerygxx-4_1-28:1.4
	newlib-csl-arm-2006q3-27:1.4
	newlib-csl-sourcerygxx-4_1-27:1.4
	newlib-csl-arm-2006q3-26:1.4
	newlib-csl-sourcerygxx-4_1-26:1.4
	newlib-csl-sourcerygxx-4_1-24:1.4
	newlib-csl-sourcerygxx-4_1-23:1.4
	newlib-csl-sourcerygxx-4_1-21:1.4
	newlib-csl-arm-2006q3-21:1.4
	newlib-csl-arm-2006q3-19:1.4
	newlib-csl-sourcerygxx-4_1-19:1.4
	newlib-csl-sourcerygxx-4_1-18:1.4
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4
	cygnus_cvs_20020108_pre:1.3
	newlib-1_10_0:1.3
	newlib-1_9_0:1.1.1.1
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2014.11.28.08.47.39;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.27.12.45.56;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.26.19.58.19;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.07.17.07.42;	author rsandifo;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.13.15.41.39;	author aldyh;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.08.21.39.32;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* libc/include/machine/setjmp.h [__mips__]: Remove __mips_fpr == 64
	from the 64-bit _JBTYPE definition.
	* libc/machine/mips/setjmp.S: Re-work the o32 FP64 support to match
	the now one-and-only supported o32 FP64 ABI extension.  Also
	support o32 FPXX.
@
text
@/* This is a simple version of setjmp and longjmp for MIPS 32 and 64.

   Ian Lance Taylor, Cygnus Support, 13 May 1993.  */

#ifdef __mips16
/* This file contains 32 bit assembly code.  */
	.set nomips16
#endif

#define GPR_LAYOUT		\
	GPR_OFFSET ($16, 0);	\
	GPR_OFFSET ($17, 1);	\
	GPR_OFFSET ($18, 2);	\
	GPR_OFFSET ($19, 3);	\
	GPR_OFFSET ($20, 4);	\
	GPR_OFFSET ($21, 5);	\
	GPR_OFFSET ($22, 6);	\
	GPR_OFFSET ($23, 7);	\
	GPR_OFFSET ($29, 8);	\
	GPR_OFFSET ($30, 9);	\
	GPR_OFFSET ($31, 10)

#define NUM_GPRS_SAVED 11

#ifdef __mips_hard_float
#if _MIPS_SIM == _ABIN32
#define FPR_LAYOUT		\
	FPR_OFFSET ($f20, 0);	\
	FPR_OFFSET ($f22, 1);	\
	FPR_OFFSET ($f24, 2);	\
	FPR_OFFSET ($f26, 3);	\
	FPR_OFFSET ($f28, 4);	\
	FPR_OFFSET ($f30, 5);
#elif _MIPS_SIM == _ABI64
#define FPR_LAYOUT		\
	FPR_OFFSET ($f24, 0);	\
	FPR_OFFSET ($f25, 1);	\
	FPR_OFFSET ($f26, 2);	\
	FPR_OFFSET ($f27, 3);	\
	FPR_OFFSET ($f28, 4);	\
	FPR_OFFSET ($f29, 5);	\
	FPR_OFFSET ($f30, 6);	\
	FPR_OFFSET ($f31, 7);
#elif __mips_fpr == 0 || __mips_fpr == 64

/* This deals with the o32 FPXX and FP64 cases.  Here we must use
   SDC1 and LDC1 to access the FPRs.  These instructions require
   8-byte aligned addresses.
   Unfortunately, the MIPS jmp_buf only guarantees 4-byte alignment
   and this cannot be increased without breaking compatibility with
   pre-existing objects built against newlib.  There are 11 GPRS
   saved in the jmp_buf so a buffer that happens to be 8-byte aligned
   ends up leaving the FPR slots 4-byte aligned and an (only) 4-byte
   aligned buffer leads to the FPR slots being 8-byte aligned!
   
   To resolve this, we move the location of $31 to the last slot
   in the jmp_buf when the overall buffer is 8-byte aligned.  $31
   is simply loaded/stored twice to avoid adding complexity to the
   GPR_LAYOUT macro above as well as FPR_LAYOUT.

   The location of the last slot is index 22 which is calculated
   from there being 11 GPRs saved and then 12 FPRs saved so the
   index of the last FPR is 11+11.
   
   The base of the jmp_buf is modified in $4 to allow the
   FPR_OFFSET macros to just use the usual constant slot numbers
   regardless of whether the realignment happened or not.  */

#define FPR_LAYOUT		\
	and $8, $4, 4;	 	\
	bne $8, $0, 1f;		\
	GPR_OFFSET ($31, 22);	\
	addiu $4, $4, -4;	\
1:				\
	FPR_OFFSET ($f20, 0);  	\
	FPR_OFFSET ($f22, 2);	\
	FPR_OFFSET ($f24, 4);	\
	FPR_OFFSET ($f26, 6);	\
	FPR_OFFSET ($f28, 8);	\
	FPR_OFFSET ($f30, 10);
#else /* Assuming _MIPS_SIM == _ABIO32 */
#define FPR_LAYOUT		\
	FPR_OFFSET ($f20, 0);	\
	FPR_OFFSET ($f21, 1);	\
	FPR_OFFSET ($f22, 2);	\
	FPR_OFFSET ($f23, 3);	\
	FPR_OFFSET ($f24, 4);	\
	FPR_OFFSET ($f25, 5);	\
	FPR_OFFSET ($f26, 6);	\
	FPR_OFFSET ($f27, 7);	\
	FPR_OFFSET ($f28, 8);	\
	FPR_OFFSET ($f29, 9);	\
	FPR_OFFSET ($f30, 10);	\
	FPR_OFFSET ($f31, 11);
#endif
#else
#define FPR_LAYOUT
#endif
	
#ifdef __mips64
#define BYTES_PER_WORD 8
#define LOAD_GPR ld
#define LOAD_FPR ldc1
#define STORE_GPR sd
#define STORE_FPR sdc1
#else
#define LOAD_GPR lw
#define STORE_GPR sw
#define BYTES_PER_WORD 4
#if __mips_fpr == 0 || __mips_fpr == 64
#define LOAD_FPR ldc1
#define STORE_FPR sdc1
#else
#define LOAD_FPR lwc1
#define STORE_FPR swc1
#endif
#endif

#define GPOFF(INDEX) (INDEX * BYTES_PER_WORD)
#define FPOFF(INDEX) ((INDEX + NUM_GPRS_SAVED) * BYTES_PER_WORD)

/* int setjmp (jmp_buf);  */
	.globl	setjmp
	.ent	setjmp
setjmp:
	.frame	$sp,0,$31

#define GPR_OFFSET(REG, INDEX) STORE_GPR REG,GPOFF(INDEX)($4)
#define FPR_OFFSET(REG, INDEX) STORE_FPR REG,FPOFF(INDEX)($4)
	GPR_LAYOUT
	FPR_LAYOUT
#undef GPR_OFFSET
#undef FPR_OFFSET

	move	$2,$0
	j	$31

	.end	setjmp

/* volatile void longjmp (jmp_buf, int);  */
	.globl	longjmp
	.ent	longjmp
longjmp:
	.frame	$sp,0,$31

#define GPR_OFFSET(REG, INDEX) LOAD_GPR REG,GPOFF(INDEX)($4)
#define FPR_OFFSET(REG, INDEX) LOAD_FPR REG,FPOFF(INDEX)($4)
	GPR_LAYOUT
	FPR_LAYOUT
#undef GPR_OFFSET
#undef FPR_OFFSET

	bne	$5,$0,1f
	li	$5,1
1:
	move	$2,$5
	j	$31

	.end longjmp
@


1.6
log
@	* libc/machine/mips/setjmp.S: Fix definition of macro FPR_LAYOUT
	for ABI == N32.
@
text
@d44 37
d109 4
a112 4
#if __mips_fpr == 64
#define BYTES_PER_WORD 8
#define LOAD_FPR l.d
#define STORE_FPR s.d
a113 1
#define BYTES_PER_WORD 4
@


1.5
log
@
2013-11-26  Matheus Almeida  <Matheus.Almeida@@imgtec.com>

        * libc/include/machine/setjmp.h: Add support for __mips_fpr being
        64 and treat it the same as if __mips64 is set.
        * libc/machine/mips/setjmp.S: Ditto, plus add checks for _MIPS_SIM
        being _ABIN32 and _ABI64.
@
text
@d27 1
@


1.4
log
@	* libc/include/machine/setjmp.h: For mips, define _JBLEN based
	based on __mips_soft_float rather than __mips64.
	* libc/machine/mips/setjmp.S: Provide hard and soft float versions
	of both 32-bit and 64-bit code.
@
text
@d26 18
d56 2
a57 1
	FPR_OFFSET ($f31, 11)
d61 1
a61 1

d69 7
a76 1
#define LOAD_GPR lw
a77 1
#define STORE_GPR sw
d80 1
@


1.3
log
@2001-07-12  Aldy Hernandez  <aldyh@@redhat.com>

        * libc/machine/mips/setjmp.S: Allow mips16 and mips64 to coexist.
@
text
@d3 1
a3 8
   The MIPS 32 version does NOT save the floating point register, which is
   wrong, but I don't know how to cleanly handle machines without a
   floating point coprocessor.

   Ian Lance Taylor, Cygnus Support, 13 May 1993.

   The MIPS 64 version saves registers fp20 to fp31.  23 registers
   are saved in all.  */
d10 50
d66 6
a71 44
#ifdef __mips64

	sd      $16, 000($4)    /* s0 */
	sd      $17, 010($4)    /* s1 */
	sd      $18, 020($4)    /* s2 */
	sd      $19, 030($4)    /* s3 */
	sd      $20, 040($4)    /* s4 */
	sd      $21, 050($4)    /* s5 */
	sd      $22, 060($4)    /* s6 */
	sd      $23, 070($4)    /* s7 */

	sdc1    $f20, 0100($4)
	sdc1    $f21, 0110($4)
	sdc1    $f22, 0120($4)
	sdc1    $f23, 0130($4)
	sdc1    $f24, 0140($4)
	sdc1    $f25, 0150($4)
	sdc1    $f26, 0160($4)
	sdc1    $f27, 0170($4)
	sdc1    $f28, 0200($4)
	sdc1    $f29, 0210($4)
	sdc1    $f30, 0220($4)
	sdc1    $f31, 0230($4)

	sd      $29, 0240($4)   /* sp */
	sd      $30, 0250($4)   /* fp */
	sd      $31, 0260($4)   /* ra */

#else /* not __mips64 */

	sw	$16,0($4)	/* $s0 */
	sw	$17,4($4)	/* $s1 */
	sw	$18,8($4)	/* $s2 */
	sw	$19,12($4)	/* $s3 */
	sw	$20,16($4)	/* $s4 */
	sw	$21,20($4)	/* $s5 */
	sw	$22,24($4)	/* $s6 */
	sw	$23,28($4)	/* $s7 */
	sw	$30,32($4)	/* $s8 */

	sw	$sp,36($4)
	sw	$31,40($4)

#endif /* not __mips64 */
a73 1

d84 6
a89 44
#ifdef __mips64

	ld      $16, 000($4)    /* s0 */
	ld      $17, 010($4)    /* s1 */
	ld      $18, 020($4)    /* s2 */
	ld      $19, 030($4)    /* s3 */
	ld      $20, 040($4)    /* s4 */
	ld      $21, 050($4)    /* s5 */
	ld      $22, 060($4)    /* s6 */
	ld      $23, 070($4)    /* s7 */

	ldc1    $f20, 0100($4)
	ldc1    $f21, 0110($4)
	ldc1    $f22, 0120($4)
	ldc1    $f23, 0130($4)
	ldc1    $f24, 0140($4)
	ldc1    $f25, 0150($4)
	ldc1    $f26, 0160($4)
	ldc1    $f27, 0170($4)
	ldc1    $f28, 0200($4)
	ldc1    $f29, 0210($4)
	ldc1    $f30, 0220($4)
	ldc1    $f31, 0230($4)

	ld      $29, 0240($4)   /* sp */
	ld      $30, 0250($4)   /* fp */
	ld      $31, 0260($4)   /* ra */

#else /* not __mips64 */

	lw	$16,0($4)	/* $s0 */
	lw	$17,4($4)	/* $s1 */
	lw	$18,8($4)	/* $s2 */
	lw	$19,12($4)	/* $s3 */
	lw	$20,16($4)	/* $s4 */
	lw	$21,20($4)	/* $s5 */
	lw	$22,24($4)	/* $s6 */
	lw	$23,28($4)	/* $s7 */
	lw	$30,32($4)	/* $s8 */

	lw	$sp,36($4)
	lw	$31,40($4)

#endif /* not __mips64 */
a94 1

@


1.2
log
@
2001-03-07  Richard Sandiford  <rsandifo@@redhat.com>

        * (libc/include/machine/setjmp.h): Use 23 DI-mode ints for a
        jmpbuf on MIPS64 targets.
        * (libc/machine/mips/setjmp.S): Add MIPS64 version.
@
text
@a11 1
#ifndef __mips64
a14 1
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* This is a simple version of setjmp and longjmp.
d3 1
a3 1
   This version does NOT save the floating point register, which is
d7 1
a7 1
   Ian Lance Taylor, Cygnus Support, 13 May 1993.  */
d9 4
d17 1
d25 30
d68 2
d82 30
d124 2
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
