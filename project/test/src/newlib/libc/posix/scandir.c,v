head	1.8;
access;
symbols
	cygwin-1_7_35-release:1.8
	cygwin-1_7_34-release:1.8
	newlib-2_2_0:1.8.0.4
	cygwin-1_7_33-release:1.8
	cygwin-1_7_32-release:1.8
	cygwin-1_7_31-release:1.8
	cygwin-1_7_30-release:1.8
	cygwin-1_7_29-release:1.8
	cygwin-1_7_28-release:1.8
	newlib-2_1_0:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.2
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	newlib-2_0_0:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.4
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	newlib-1_20_0:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.7
	newlib-1_19_0:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	newlib-1_18_0:1.7
	cygwin-1_7_1-release:1.7
	newlib-1_17_0-arc:1.7.0.2
	binutils-arc-20080908-branch:1.5.0.8
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.7
	newlib-1_16_0:1.5
	newlib-1_15_0:1.5
	newlib-csl-coldfire-4_1-32:1.5
	newlib-csl-sourcerygxx-4_1-32:1.5
	newlib-csl-innovasic-fido-3_4_4-33:1.5
	newlib-csl-coldfire-4_1-30:1.5
	newlib-csl-sourcerygxx-4_1-30:1.5
	newlib-csl-coldfire-4_1-28:1.5
	newlib-csl-sourcerygxx-4_1-28:1.5
	newlib-csl-arm-2006q3-27:1.5
	newlib-csl-sourcerygxx-4_1-27:1.5
	newlib-csl-arm-2006q3-26:1.5
	newlib-csl-sourcerygxx-4_1-26:1.5
	newlib-csl-sourcerygxx-4_1-24:1.5
	newlib-csl-sourcerygxx-4_1-23:1.5
	newlib-csl-sourcerygxx-4_1-21:1.5
	newlib-csl-arm-2006q3-21:1.5
	newlib-csl-arm-2006q3-19:1.5
	newlib-csl-sourcerygxx-4_1-19:1.5
	newlib-csl-sourcerygxx-4_1-18:1.5
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5
	cr-0x5f1:1.5.0.6
	newlib-csl-sourcerygxx-4_1-14:1.5
	newlib-csl-sourcerygxx-4_1-13:1.5
	newlib-csl-sourcerygxx-4_1-12:1.5
	newlib-csl-sourcerygxx-4_1-9:1.5
	newlib-csl-sourcerygxx-4_1-8:1.5
	newlib-csl-sourcerygxx-4_1-7:1.5
	newlib-csl-arm-2006q1-6:1.5
	newlib-csl-sourcerygxx-4_1-6:1.5
	newlib-csl-sourcerygxx-4_1-5:1.5
	newlib-csl-sourcerygxx-4_1-4:1.5
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.5
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	newlib-1_11_0:1.3
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.2
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.8
date	2013.04.02.11.38.12;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.24.20.42.33;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.31.21.03.41;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.26.22.16.34;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.06.19.57.51;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.05.20.58.57;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.28.20.06.54;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* libc/posix/scandir.c (DIRSIZ): Use offsetof instead of magic
	number.
@
text
@#ifndef HAVE_OPENDIR

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)scandir.c	5.10 (Berkeley) 2/23/91";
#endif /* LIBC_SCCS and not lint */

/*
 * Scan the directory dirname calling select to make a list of selected
 * directory entries then sort using qsort and compare routine dcomp.
 * Returns the number of entries and a pointer to a list of pointers to
 * struct dirent (through namelist). Returns -1 if there were any errors.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <stddef.h>
#include <dirent.h>
#include <stdlib.h>
#include <string.h>
#include <sys/lock.h>

/*
 * The DIRSIZ macro gives the minimum record length which will hold
 * the directory entry.  This requires the amount of space in struct dirent
 * without the d_name field, plus enough space for the name with a terminating
 * null byte (dp->d_namlen+1), rounded up to a 4 byte boundary.
 */
#undef DIRSIZ
#ifdef _DIRENT_HAVE_D_NAMLEN
#define DIRSIZ(dp) \
    (offsetof (struct dirent, d_name) + (((dp)->d_namlen+1 + 3) &~ 3))
#else
#define DIRSIZ(dp) \
    (offsetof (struct dirent, d_name) + ((strlen((dp)->d_name)+1 + 3) &~ 3))
#endif

#ifndef __P
#define __P(args) ()
#endif

int
_DEFUN(scandir, (dirname, namelist, select, dcomp),
	const char *dirname _AND
	struct dirent ***namelist _AND
	int (*select) __P((const struct dirent *)) _AND
	int (*dcomp) __P((const struct dirent **, const struct dirent **)))
{
	register struct dirent *d, *p, **names;
	register size_t nitems;
	struct stat stb;
	long arraysz;
	DIR *dirp;
	int successful = 0;
	int rc = 0;

	dirp = NULL;
	names = NULL;

	if ((dirp = opendir(dirname)) == NULL)
		return(-1);
#ifdef HAVE_DD_LOCK
	__lock_acquire_recursive(dirp->dd_lock);
#endif
	if (fstat(dirp->dd_fd, &stb) < 0)
		goto cleanup;

	/*
 	 * If there were no directory entries, then bail.
 	 */
	if (stb.st_size == 0)
		goto cleanup;

	/*
	 * estimate the array size by taking the size of the directory file
	 * and dividing it by a multiple of the minimum size entry. 
	 */
	arraysz = (stb.st_size / 24);
	names = (struct dirent **)malloc(arraysz * sizeof(struct dirent *));
	if (names == NULL)
		goto cleanup;

	nitems = 0;
	while ((d = readdir(dirp)) != NULL) {
		if (select != NULL && !(*select)(d))
			continue;	/* just selected names */
		/*
		 * Make a minimum size copy of the data
		 */
		p = (struct dirent *)malloc(DIRSIZ(d));
		if (p == NULL)
			goto cleanup;
		p->d_ino = d->d_ino;
		p->d_reclen = d->d_reclen;
#ifdef _DIRENT_HAVE_D_NAMLEN
		p->d_namlen = d->d_namlen;
		bcopy(d->d_name, p->d_name, p->d_namlen + 1);
#else
               strcpy(p->d_name, d->d_name);
#endif
		/*
		 * Check to make sure the array has space left and
		 * realloc the maximum size.
		 */
		if (++nitems >= arraysz) {
			if (fstat(dirp->dd_fd, &stb) < 0)
				goto cleanup;
			arraysz = stb.st_size / 12;
			names = (struct dirent **)reallocf((char *)names,
				arraysz * sizeof(struct dirent *));
			if (names == NULL)
				goto cleanup;
		}
		names[nitems-1] = p;
	}
	successful = 1;
cleanup:
	closedir(dirp);
	if (successful) {
		if (nitems && dcomp != NULL)
			qsort(names, nitems, sizeof(struct dirent *), (void *)dcomp);
		*namelist = names;
		rc = nitems;
	} else {  /* We were unsuccessful, clean up storage and return -1.  */
		if ( names ) {
			int i;
			for (i=0; i < nitems; i++ )
				free( names[i] );
			free( names );
		}
		rc = -1;
	}

#ifdef HAVE_DD_LOCK
	__lock_release_recursive(dirp->dd_lock);
#endif
	return(rc);
}

/*
 * Alphabetic order comparison routine for those who want it.
 */
int
_DEFUN(alphasort, (d1, d2),
       const struct dirent **d1 _AND
       const struct dirent **d2)
{
       return(strcmp((*d1)->d_name, (*d2)->d_name));
}

#endif /* ! HAVE_OPENDIR */
@


1.7
log
@
2008-11-24  Joel Sherrill <joel.sherrill@@oarcorp.com>

        * libc/posix/scandir.c: Fix memory leaks.
@
text
@d45 1
d60 1
a60 1
    ((sizeof (struct dirent) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3))
d63 1
a63 1
    ((sizeof (struct dirent) - (MAXNAMLEN+1)) + ((strlen((dp)->d_name)+1 + 3) &~ 3))
@


1.6
log
@
2008-10-31  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/limits.h: Add ARG_MAX, PATH_MAX, and _POSIX2_RE_DUP_MAX.
        * libc/include/envlock.h: New file.
        * libc/include/fnmatch.h: Ditto.
        * libc/include/glob.h: Ditto.
        * libc/include/regex.h: Ditto.
        * libc/include/wordexp.h: Ditto.
        * libc/posix/Makefile.am: Add new files moved from
        libc/sys/linux/stdlib.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/COPYRIGHT: New file moved from libc/sys/linux/stdlib.
        * libc/posix/cclass.h: Ditto.
        * libc/posix/cname.h: Ditto.
        * libc/posix/collate.c: Ditto.
        * libc/posix/collate.h: Ditto.
        * libc/posix/collcmp.c: Ditto.
        * libc/posix/engine.c: Ditto.
        * libc/posix/fnmatch.3: Ditto.
        * libc/posix/glob.3: Ditto.
        * libc/posix/fnmatch.c: Ditto.
        * libc/posix/glob.c: Ditto.
        * libc/posix/namespace.h: Ditto.
        * libc/posix/reallocf.c: Ditto.
        * libc/posix/regcomp.c: Ditto.
        * libc/posix/regerror.c: Ditto.
        * libc/posix/regex.3: Ditto.
        * libc/posix/regex2.h: Ditto.
        * libc/posix/regexec.c: Ditto.
        * libc/posix/regfree.c: Ditto.
        * libc/posix/rune.h: Ditto.
        * libc/posix/runetype.h: Ditto.
        * libc/posix/scandir.c: Remove advertising clause which is not in
        effect.
        * libc/posix/sysexits.h: Ditto.
        * libc/posix/un-namespace.h: Ditto.
        * libc/posix/utils.h: Ditto.
        * libc/posix/wordexp.c: Ditto.
        * libc/posix/wordfree.c: Ditto.
        * libc/posix/execl.c: Add !_NO_EXECVE flag check.
        * libc/posix/execle.c: Ditto.
        * libc/posix/execlp.c: Ditto.
        * libc/posix/execv.c: Ditto.
        * libc/posix/execve.c: Ditto.
        * libc/posix/execvp.c: Ditto.
        * libc/posix/popen.c: Add !_NO_POPEN flag check.
        * libc/sys/linux/configure: Regenerated.
        * libc/sys/linux/configure.in: Remove stdlib.
        * libc/sys/linux/include/limits.h: Add include of linux/limits.h.
        * libc/sys/linux/stdlib/Makefile.am: Removed.
        * libc/sys/linux/stdlib/Makefile.in: Ditto.
        * libc/sys/linux/stdlib/COPYRIGHT: Moved to libc/posix.
        * libc/sys/linux/stdlib/cclass.h: Ditto.
        * libc/sys/linux/stdlib/cname.h: Ditto.
        * libc/sys/linux/stdlib/collate.c: Ditto.
        * libc/sys/linux/stdlib/collate.h: Ditto.
        * libc/sys/linux/stdlib/collcmp.c: Ditto.
        * libc/sys/linux/stdlib/engine.c: Ditto.
        * libc/sys/linux/stdlib/fnmatch.3: Ditto.
        * libc/sys/linux/stdlib/fnmatch.c: Ditto.
        * libc/sys/linux/stdlib/glob.3: Ditto.
        * libc/sys/linux/stdlib/glob.c: Ditto.
        * libc/sys/linux/stdlib/reallocf.c: Ditto.
        * libc/sys/linux/stdlib/regcomp.c: Ditto.
        * libc/sys/linux/stdlib/regerror.c: Ditto.
        * libc/sys/linux/stdlib/regex.3: Ditto.
        * libc/sys/linux/stdlib/regex2.h: Ditto.
        * libc/sys/linux/stdlib/regexec.c: Ditto.
        * libc/sys/linux/stdlib/regfree.c: Ditto.
        * libc/sys/linux/stdlib/utils.h: Ditto.
        * libc/sys/linux/stdlib/wordexp.c: Ditto.
        * libc/sys/linux/stdlib/wordfree.c: Ditto.
@
text
@d81 5
d92 8
a99 6
	if (fstat(dirp->dd_fd, &stb) < 0) {
#ifdef HAVE_DD_LOCK
		__lock_release_recursive(dirp->dd_lock);
#endif
		return(-1);
	}
d107 2
a108 6
	if (names == NULL) {
#ifdef HAVE_DD_LOCK
		__lock_release_recursive(dirp->dd_lock);
#endif
		return(-1);
	}
d118 2
a119 6
		if (p == NULL) {
#ifdef HAVE_DD_LOCK
			__lock_release_recursive(dirp->dd_lock);
#endif
			return(-1);
		}
d133 2
a134 6
			if (fstat(dirp->dd_fd, &stb) < 0) {
#ifdef HAVE_DD_LOCK
				__lock_release_recursive(dirp->dd_lock);
#endif
				return(-1);	/* just might have grown */
			}
d136 1
a136 1
			names = (struct dirent **)realloc((char *)names,
d138 2
a139 6
			if (names == NULL) {
#ifdef HAVE_DD_LOCK
				__lock_release_recursive(dirp->dd_lock);
#endif
				return(-1);
			}
d143 2
d146 15
a160 3
	if (nitems && dcomp != NULL)
		qsort(names, nitems, sizeof(struct dirent *), (void *)dcomp);
	*namelist = names;
d164 1
a164 1
	return(nitems);
@


1.5
log
@
2005-10-26  Shaun Jackman  <sjackman@@gmail.com>

        * libc/posix/scandir.c (scandir): Update the function
        prototype to match the header.
        * libc/sys/linux/linuxthreads/bits/libc-lock.h: Remove an
        extraneous #endif.
        * libc/sys/linux/sys/lock.h: Do not include
        machine/weakalias.h, since it's not used by this file.
@
text
@a14 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
@


1.4
log
@
2003-06-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/argz/argz_add.c: Change to use _DEFUN macro for function
        definition.
        * libc/argz/argz_add_sep.c: Ditto.
        * libc/argz/argz_append.c libc/argz/argz_count.c: Ditto.
        * libc/argz/argz_create.c libc/argz/argz_create_sep.c: Ditto.
        * libc/argz/argz_delete.c libc/argz/argz_extract.c: Ditto.
        * libc/argz/argz_insert.c libc/argz/argz_next.c: Ditto.
        * libc/argz/argz_replace.c libc/argz/argz_stringify.c: Ditto.
        * libc/argz/envz_add.c libc/argz/envz_entry.c: Ditto.
        * libc/argz/envz_get.c libc/argz/envz_merge.c: Ditto.
        * libc/argz/envz_remove.c libc/argz/envz_strip.c: Ditto.
        * libc/locale/nl_langinfo.c libc/misc/ffs.c: Ditto.
        * libc/posix/closedir.c libc/posix/creat.c: Ditto.
        * libc/posix/execl.c libc/posix/execle.c: Ditto.
        * libc/posix/execlp.c libc/posix/execve.c: Ditto.
        * libc/posix/isatty.c libc/posix/opendir.c: Ditto.
        * libc/posix/popen.c libc/posix/readdir.c: Ditto.
        * libc/posix/readdir_r.c libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c libc/search/hcreate.c: Ditto.
        * libc/search/tdelete.c libc/search/tdestroy.c: Ditto.
        * libc/search/tfind.c libc/search/tsearch.c: Ditto.
        * libc/search/twalk.c libc/signal/signal.c: Ditto.
@
text
@d77 2
a78 2
	int (*select) __P((struct dirent *)) _AND
	int (*dcomp) __P((const void *, const void *)))
d158 1
a158 1
		qsort(names, nitems, sizeof(struct dirent *), dcomp);
@


1.3
log
@
2002-06-05  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h[__linux__]: Add strsignal prototype.
        * libc/include/sys/lock.h: New file with default locking support.
        * libc/include/sys/reent.h: Add signal buffer support for strsignal
        and psignal.
        * libc/posix/Makefile.am: Add support for readdir_r.c.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/closedir.c: Add locking support and hash table cleanup.
        * libc/posix/opendir.c: Add lock support.
        * libc/posix/readdir.c: Ditto.
        * libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c: Ditto.
        * libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c: Ditto plus add _cleanupdir routine to
        clean up leftover hash table entries.
        * libc/posix/readdir_r.c: New file.
        * libc/sys/linux/Makefile.am: Add psignal.c and strsignal.c support.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/sys/dirent.h: Add dd_lock to DIR structure.
        * libc/sys/linux/sys/signal.h: Add psignal prototype.
        * libc/sys/linux/psignal.c: New file.
        * libc/sys/linux/strsignal.c: Ditto.
@
text
@d74 5
a78 5
scandir(dirname, namelist, select, dcomp)
	const char *dirname;
	struct dirent ***namelist;
	int (*select) __P((struct dirent *));
	int (*dcomp) __P((const void *, const void *));
d170 3
a172 3
alphasort(d1, d2)
       const struct dirent **d1;
       const struct dirent **d2;
@


1.2
log
@
2000-08-27  Werner Almesberger  <Werner.Almesberger@@epfl.ch>

        * libc/posix/scandir.c (DIRSIZ, scandir): use struct dirent.d_namlen
        only if _DIRENT_HAVE_D_NAMLEN is defined.
        (alphasort): aligned prototype with
        libc/sys/cygwin/sys/dirent.h and simplified function body.
        * libc/posix/telldir.c (telldir): changed "telldir" prototype to
        long telldir (DIR *) as mentioned in annex B of POSIX.1
@
text
@d52 1
d88 7
a94 1
	if (fstat(dirp->dd_fd, &stb) < 0)
d96 1
d104 4
a107 1
	if (names == NULL)
d109 1
d119 4
a122 1
		if (p == NULL)
d124 1
d138 4
a141 1
			if (fstat(dirp->dd_fd, &stb) < 0)
d143 1
d147 4
a150 1
			if (names == NULL)
d152 1
d160 3
@


1.1
log
@Initial revision
@
text
@d60 1
d63 4
d111 1
d114 3
d144 2
a145 2
	const void *d1;
	const void *d2;
d147 1
a147 2
	return(strcmp((*(struct dirent **)d1)->d_name,
	    (*(struct dirent **)d2)->d_name));
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
