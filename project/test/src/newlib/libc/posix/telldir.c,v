head	1.10;
access;
symbols
	cygwin-1_7_35-release:1.10
	cygwin-1_7_34-release:1.10
	newlib-2_2_0:1.10.0.6
	cygwin-1_7_33-release:1.10
	cygwin-1_7_32-release:1.10
	cygwin-1_7_31-release:1.10
	cygwin-1_7_30-release:1.10
	cygwin-1_7_29-release:1.10
	cygwin-1_7_28-release:1.10
	newlib-2_1_0:1.10
	cygwin-1_7_27-release:1.10
	cygwin-1_7_26-release:1.10
	cygwin-1_7_25-release:1.10
	cygwin-1_7_24-release:1.10
	cygwin-1_7_23-release:1.10
	cygwin-1_7_22-release:1.10
	cygwin-1_7_21-release:1.10
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.10.0.4
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	newlib-2_0_0:1.10
	cygwin-1_7_17-release:1.10
	cygwin-64bit-branch:1.10.0.2
	cygwin-1_7_16-release:1.10
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	newlib-1_20_0:1.9
	cygwin-1_7_9-release:1.9
	cygwin-1_7_8-release:1.9
	newlib-1_19_0:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.9
	cygwin-1_7_4-release:1.9
	cygwin-1_7_3-release:1.9
	cygwin-1_7_2-release:1.9
	newlib-1_18_0:1.6
	cygwin-1_7_1-release:1.6
	newlib-1_17_0-arc:1.6.0.2
	binutils-arc-20080908-branch:1.5.0.8
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.6
	newlib-1_16_0:1.5
	newlib-1_15_0:1.5
	newlib-csl-coldfire-4_1-32:1.5
	newlib-csl-sourcerygxx-4_1-32:1.5
	newlib-csl-innovasic-fido-3_4_4-33:1.5
	newlib-csl-coldfire-4_1-30:1.5
	newlib-csl-sourcerygxx-4_1-30:1.5
	newlib-csl-coldfire-4_1-28:1.5
	newlib-csl-sourcerygxx-4_1-28:1.5
	newlib-csl-arm-2006q3-27:1.5
	newlib-csl-sourcerygxx-4_1-27:1.5
	newlib-csl-arm-2006q3-26:1.5
	newlib-csl-sourcerygxx-4_1-26:1.5
	newlib-csl-sourcerygxx-4_1-24:1.5
	newlib-csl-sourcerygxx-4_1-23:1.5
	newlib-csl-sourcerygxx-4_1-21:1.5
	newlib-csl-arm-2006q3-21:1.5
	newlib-csl-arm-2006q3-19:1.5
	newlib-csl-sourcerygxx-4_1-19:1.5
	newlib-csl-sourcerygxx-4_1-18:1.5
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5
	cr-0x5f1:1.5.0.6
	newlib-csl-sourcerygxx-4_1-14:1.5
	newlib-csl-sourcerygxx-4_1-13:1.5
	newlib-csl-sourcerygxx-4_1-12:1.5
	newlib-csl-sourcerygxx-4_1-9:1.5
	newlib-csl-sourcerygxx-4_1-8:1.5
	newlib-csl-sourcerygxx-4_1-7:1.5
	newlib-csl-arm-2006q1-6:1.5
	newlib-csl-sourcerygxx-4_1-6:1.5
	newlib-csl-sourcerygxx-4_1-5:1.5
	newlib-csl-sourcerygxx-4_1-4:1.5
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.5
	newlib-csl-arm-2005-q1b:1.5
	newlib-csl-arm-2005-q1a:1.5
	newlib-1_13_0:1.5
	csl-arm-2004-q3:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	newlib-1_12_0:1.5
	csl-arm-2003-q4:1.5
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.2
	newlib-2000-02-17:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2012.07.16.17.03.50;	author corsepiu;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.09.20.38.18;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.06.10.32.20;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.11.23.24.47;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.27.21.01.40;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.06.19.57.51;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.26.18.56.06;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.05.20.58.57;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.28.20.06.54;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.39.47;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.10
log
@2012-07-16  Ralf Cors√©pius  <ralf.corsepius@@rtems.org>

	* libc/posix/telldir.c: Conditionally build dd_hash_lock.
@
text
@#ifndef HAVE_OPENDIR

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)telldir.c	5.9 (Berkeley) 2/23/91";
#endif /* LIBC_SCCS and not lint */

#include <sys/param.h>
#include <dirent.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/lock.h>

/*
 * The option SINGLEUSE may be defined to say that a telldir
 * cookie may be used only once before it is freed. This option
 * is used to avoid having memory usage grow without bound.
 */
#define SINGLEUSE

/*
 * One of these structures is malloced to describe the current directory
 * position each time telldir is called. It records the current magic 
 * cookie returned by getdirentries and the offset within the buffer
 * associated with that return value.
 */
struct ddloc {
	struct	ddloc *loc_next;/* next structure in list */
	long	loc_index;	/* key associated with structure */
	long	loc_seek;	/* magic cookie returned by getdirentries */
	long	loc_loc;	/* offset of entry in buffer */
	DIR    *loc_dirp;       /* DIR pointer */
};

#define	NDIRHASH	32	/* Num of hash lists, must be a power of 2 */
#define	LOCHASH(i)	((i)&(NDIRHASH-1))

static long	dd_loccnt = 1;	/* Index of entry for sequential readdir's */
static struct	ddloc *dd_hash[NDIRHASH];   /* Hash list heads for ddlocs */

#ifdef HAVE_DD_LOCK
__LOCK_INIT(static, dd_hash_lock);
#endif

/*
 * return a pointer into a directory
 */

#if !defined(_ELIX_LEVEL) || (_ELIX_LEVEL >= 2)

long
_DEFUN(telldir, (dirp),
       DIR *dirp)
{
	register int index;
	register struct ddloc *lp;

	if ((lp = (struct ddloc *)malloc(sizeof(struct ddloc))) == NULL)
		return (-1);

#ifdef HAVE_DD_LOCK
	__lock_acquire_recursive(dirp->dd_lock);
	__lock_acquire(dd_hash_lock);
#endif
	index = dd_loccnt++;
	lp->loc_index = index;
	lp->loc_seek = dirp->dd_seek;
	lp->loc_loc = dirp->dd_loc;
	lp->loc_dirp = dirp;
	lp->loc_next = dd_hash[LOCHASH(index)];
	dd_hash[LOCHASH(index)] = lp;
#ifdef HAVE_DD_LOCK
	__lock_release(dd_hash_lock);
	__lock_release_recursive(dirp->dd_lock);
#endif
	return (index);
}

#endif /* !_ELIX_LEVEL || _ELIX_LEVEL >= 2 */

/*
 * seek to an entry in a directory.
 * Only values returned by "telldir" should be passed to seekdir.
 */
void
_DEFUN(_seekdir, (dirp, loc),
	register DIR *dirp _AND
	long loc)
{
	register struct ddloc *lp;
	register struct ddloc **prevlp;
	struct dirent *dp;

#ifdef HAVE_DD_LOCK
	__lock_acquire(dd_hash_lock);
#endif
	if (loc != 0) {
		prevlp = &dd_hash[LOCHASH(loc)];
		lp = *prevlp;
		while (lp != NULL) {
			if (lp->loc_index == loc)
				break;
			prevlp = &lp->loc_next;
			lp = lp->loc_next;
		}
		if (lp == NULL) {
#ifdef HAVE_DD_LOCK
			__lock_release(dd_hash_lock);
#endif
			return;
		}
		if (lp->loc_loc == dirp->dd_loc && lp->loc_seek == dirp->dd_seek)
			goto found;
		(void) lseek(dirp->dd_fd, lp->loc_seek, 0);
		dirp->dd_seek = lp->loc_seek;
		dirp->dd_loc = 0;
		while (dirp->dd_loc < lp->loc_loc) {
			dp = readdir(dirp);
			if (dp == NULL)
				break;
		}
found:
#ifdef SINGLEUSE
		*prevlp = lp->loc_next;
		free((caddr_t)lp);
#endif
	} else {
		// loc 0 means rewinding
		(void) lseek(dirp->dd_fd, 0, 0);
		dirp->dd_seek = 0;
		dirp->dd_loc = 0;
	}
#ifdef HAVE_DD_LOCK
	__lock_release(dd_hash_lock);
#endif
}

/* clean out any hash entries from a closed directory */
void
_DEFUN(_cleanupdir, (dirp),
	register DIR *dirp)
{
	int i;

#ifdef HAVE_DD_LOCK
	__lock_acquire(dd_hash_lock);
#endif
	for (i = 0; i < NDIRHASH; ++i) {
		struct ddloc head;
		register struct ddloc *lp;
		register struct ddloc *prevlp;

		lp = dd_hash[i];
		head.loc_next = lp;
		prevlp = &head;
		while (lp != NULL) {
			struct ddloc *nextlp;

			nextlp = lp->loc_next;
			if (lp->loc_dirp == dirp) {
				prevlp->loc_next = nextlp;
				free((caddr_t)lp);
			}
			else
				prevlp = lp;
			lp = nextlp;
		}
		dd_hash[i] = head.loc_next;
	}
#ifdef HAVE_DD_LOCK
	__lock_release(dd_hash_lock);
#endif

}
#endif /* ! HAVE_OPENDIR */
@


1.9
log
@
2010-03-09  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/posix/telldir.c (dd_loccnt): Change start index to be 1
        instead of 0.
        (_seekdir): A loc of 0 now means rewind dir.
@
text
@d72 2
d75 1
@


1.8
log
@	* libc/posix/telldir.c: Remove bogus nested prototype of lseek().
@
text
@d70 1
a70 1
static long	dd_loccnt;	/* Index of entry for sequential readdir's */
d126 10
a135 9
	prevlp = &dd_hash[LOCHASH(loc)];
	lp = *prevlp;
	while (lp != NULL) {
		if (lp->loc_index == loc)
			break;
		prevlp = &lp->loc_next;
		lp = lp->loc_next;
	}
	if (lp == NULL) {
d137 1
a137 1
		__lock_release(dd_hash_lock);
d139 12
a150 12
		return;
	}
	if (lp->loc_loc == dirp->dd_loc && lp->loc_seek == dirp->dd_seek)
		goto found;
	(void) lseek(dirp->dd_fd, lp->loc_seek, 0);
	dirp->dd_seek = lp->loc_seek;
	dirp->dd_loc = 0;
	while (dirp->dd_loc < lp->loc_loc) {
		dp = readdir(dirp);
		if (dp == NULL)
			break;
	}
d153 2
a154 2
	*prevlp = lp->loc_next;
	free((caddr_t)lp);
d156 6
@


1.7
log
@
2010-01-11  Sebastian Huber <sebastian.huber@@embedded-brains.de>

        * libc/posix/telldir.c (_cleanupdir): Fixed usage of freed memory.
@
text
@a121 1
	extern long lseek();
@


1.6
log
@
2008-11-27  Ralf Corsepius <ralf.corsepius@@rtems.org>

        * libc/posix/telldir.c: Use #if !defined() instead of #ifndef
        to fix GCC warning.
@
text
@d172 1
d175 1
d177 2
a178 7
		while (lp != NULL && lp->loc_dirp == dirp) {
			dd_hash[i] = lp->loc_next;
			prevlp = lp;
			free((caddr_t)lp);
			lp = prevlp->loc_next;
		}
		prevlp = lp;
d180 5
a184 3
			lp = lp->loc_next;
			if (lp != NULL && lp->loc_dirp == dirp) {
				prevlp->loc_next = lp->loc_next;
a185 1
				lp = prevlp;
d189 1
d191 1
@


1.5
log
@
2003-06-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/argz/argz_add.c: Change to use _DEFUN macro for function
        definition.
        * libc/argz/argz_add_sep.c: Ditto.
        * libc/argz/argz_append.c libc/argz/argz_count.c: Ditto.
        * libc/argz/argz_create.c libc/argz/argz_create_sep.c: Ditto.
        * libc/argz/argz_delete.c libc/argz/argz_extract.c: Ditto.
        * libc/argz/argz_insert.c libc/argz/argz_next.c: Ditto.
        * libc/argz/argz_replace.c libc/argz/argz_stringify.c: Ditto.
        * libc/argz/envz_add.c libc/argz/envz_entry.c: Ditto.
        * libc/argz/envz_get.c libc/argz/envz_merge.c: Ditto.
        * libc/argz/envz_remove.c libc/argz/envz_strip.c: Ditto.
        * libc/locale/nl_langinfo.c libc/misc/ffs.c: Ditto.
        * libc/posix/closedir.c libc/posix/creat.c: Ditto.
        * libc/posix/execl.c libc/posix/execle.c: Ditto.
        * libc/posix/execlp.c libc/posix/execve.c: Ditto.
        * libc/posix/isatty.c libc/posix/opendir.c: Ditto.
        * libc/posix/popen.c libc/posix/readdir.c: Ditto.
        * libc/posix/readdir_r.c libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c libc/search/hcreate.c: Ditto.
        * libc/search/tdelete.c libc/search/tdestroy.c: Ditto.
        * libc/search/tfind.c libc/search/tsearch.c: Ditto.
        * libc/search/twalk.c libc/signal/signal.c: Ditto.
@
text
@d78 1
a78 1
#ifndef _ELIX_LEVEL || _ELIX_LEVEL >= 2
@


1.4
log
@
2002-08-26  Jeff Johnston  <jjohnstn@@redhat.com>

        * Makefile.am(LIBC_OBJECTLISTS): Add STDIO64_OBJECTLIST.
        * Makefile.in: Regenerated.
        * acinclude.m4: Add support for --enable-newlib-elix-level option.
        * aclocal.m4: Regenerated.
        * configure: Ditto.
        * configure.host: Add code to define _ELIX_LEVEL if
        --enable-newlib-elix-level option is used.
        * configure.in:
        * libc/aclocal.m4: Regenerated.
        * libc/configure: Ditto.
        * libc/argz/Makefile.am: Add EL/IX level checking.
        * libc/argz/Makefile.in: Regenerated.
        * libc/argz/dummy.c: New file.
        * libc/ctype/Makefile.am: Add EL/IX level checking.
        * libc/ctype/Makefile.in: Regenerated.
        * libc/locale/Makefile.am: Add EL/IX level checking.
        * libc/locale/Makefile.in: Regenerated.
        * libc/posix/Makefile.am: Add EL/IX level checking.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/telldir.c: Add EL/IX level checking.
        * libc/reent/Makefile.am: Ditto.
        * libc/reent/fstat64r.c: Ditto.
        * libc/reent/lseek64r.c: Ditto.
        * libc/reent/open64r.c: Ditto.
        * libc/reent/Makefile.in: Regenerated.
        * libc/search/Makefile.am: Add EL/IX level checking.
        * libc/search/Makefile.in: Regenerated.
        * libc/stdio/Makefile.am: Add EL/IX level checking.
        * libc/stdio/Makefile.in: Regenerated.
        * libc/stdio64/Makefile.am: Add EL/IX level checking.
        * libc/stdio64/Makefile.in: Regenerated.
        * libc/stdio64/dummy.c: New file.
        * libc/stdio64/fgetpos64.c: Fix so _LARGEFILE_64 macro is checked
        after first include.
        * libc/stdio64/fopen64.c: Ditto.
        * libc/stdio64/freopen64.c: Ditto.
        * libc/stdio64/fseeko64.c: Ditto.
        * libc/stdio64/fsetpos64.c: Ditto.
        * libc/stdio64/ftello64.c: Ditto.
        * libc/stdio64/tmpfile64.c: Ditto.
        * libc/stdlib/Makefile.am: Add EL/IX level checking.
        * libc/stdlib/Makefile.in: Regenerated.
        * libc/stdlib/mstats.c: Add EL/IX level checking.
        * libc/string/Makefile.am: Ditto.
        * libc/string/Makefile.in: Regenerated.
        * libc/sys/linux/Makefile.am: Add EL/IX level checking.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/aclocal.m4: Ditto.
        * libc/sys/linux/configure: Ditto.
        * libc/sys/linux/aio.c: Add EL/IX level checking.
        * libc/sys/linux/ftok.c: Ditto.
        * libc/sys/linux/getdate.c: Ditto.
        * libc/sys/linux/ids.c: Ditto.
        * libc/sys/linux/inode.c: Ditto.
        * libc/sys/linux/io.c: Ditto.
        * libc/sys/linux/process.c: Ditto.
        * libc/sys/linux/resource.c: Ditto.
        * libc/sys/linux/sched.c: Ditto.
        * libc/sys/linux/sig.c: Ditto.
        * libc/sys/linux/termios.c: Ditto.
        * libc/sys/linux/wait.c: Ditto plus add __waitpid and
        __libc___waitpid weak aliases.
        * libc/sys/linux/machine/i386/syscall.h: Add new _base macros
        that generate the code for a syscall, but do not create a
        weak alias.
        * libc/syscalls/Makefile.am: Add EL/IX level checking.
        * libc/syscalls/Makefile.in: Regenerated.
        * libc/time/tzset_r.c: Change to replace strdup with equivalent
        functionality.
        * libc/unix/Makefile.am: Add EL/IX level checking.
        * libc/unix/Makefile.in: Regenerated.
@
text
@d81 2
a82 2
telldir(dirp)
       DIR *dirp;
d115 3
a117 3
_seekdir(dirp, loc)
	register DIR *dirp;
	long loc;
d163 2
a164 2
_cleanupdir (dirp)
	register DIR *dirp;
@


1.3
log
@
2002-06-05  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/string.h[__linux__]: Add strsignal prototype.
        * libc/include/sys/lock.h: New file with default locking support.
        * libc/include/sys/reent.h: Add signal buffer support for strsignal
        and psignal.
        * libc/posix/Makefile.am: Add support for readdir_r.c.
        * libc/posix/Makefile.in: Regenerated.
        * libc/posix/closedir.c: Add locking support and hash table cleanup.
        * libc/posix/opendir.c: Add lock support.
        * libc/posix/readdir.c: Ditto.
        * libc/posix/rewinddir.c: Ditto.
        * libc/posix/scandir.c: Ditto.
        * libc/posix/seekdir.c: Ditto.
        * libc/posix/telldir.c: Ditto plus add _cleanupdir routine to
        clean up leftover hash table entries.
        * libc/posix/readdir_r.c: New file.
        * libc/sys/linux/Makefile.am: Add psignal.c and strsignal.c support.
        * libc/sys/linux/Makefile.in: Regenerated.
        * libc/sys/linux/sys/dirent.h: Add dd_lock to DIR structure.
        * libc/sys/linux/sys/signal.h: Add psignal prototype.
        * libc/sys/linux/psignal.c: New file.
        * libc/sys/linux/strsignal.c: Ditto.
@
text
@d77 3
d107 2
@


1.2
log
@
2000-08-27  Werner Almesberger  <Werner.Almesberger@@epfl.ch>

        * libc/posix/scandir.c (DIRSIZ, scandir): use struct dirent.d_namlen
        only if _DIRENT_HAVE_D_NAMLEN is defined.
        (alphasort): aligned prototype with
        libc/sys/cygwin/sys/dirent.h and simplified function body.
        * libc/posix/telldir.c (telldir): changed "telldir" prototype to
        long telldir (DIR *) as mentioned in annex B of POSIX.1
@
text
@d44 1
d64 1
d72 1
d86 5
d95 1
d98 4
d119 3
d130 4
a133 1
	if (lp == NULL)
d135 1
d151 3
d156 37
@


1.1
log
@Initial revision
@
text
@d76 1
a76 1
	const DIR *dirp;
@


1.1.1.1
log
@import newlib-2000-02-17 snapshot
@
text
@@
