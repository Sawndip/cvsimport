head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	newlib-2_2_0:1.4.0.16
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_28-release:1.4
	newlib-2_1_0:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.14
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.12
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	newlib-1_19_0:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.10
	binutils-arc-20080908-branch:1.4.0.8
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.4
	newlib-csl-coldfire-4_1-32:1.4
	newlib-csl-sourcerygxx-4_1-32:1.4
	newlib-csl-innovasic-fido-3_4_4-33:1.4
	newlib-csl-coldfire-4_1-30:1.4
	newlib-csl-sourcerygxx-4_1-30:1.4
	newlib-csl-coldfire-4_1-28:1.4
	newlib-csl-sourcerygxx-4_1-28:1.4
	newlib-csl-arm-2006q3-27:1.4
	newlib-csl-sourcerygxx-4_1-27:1.4
	newlib-csl-arm-2006q3-26:1.4
	newlib-csl-sourcerygxx-4_1-26:1.4
	newlib-csl-sourcerygxx-4_1-24:1.4
	newlib-csl-sourcerygxx-4_1-23:1.4
	newlib-csl-sourcerygxx-4_1-21:1.4
	newlib-csl-arm-2006q3-21:1.4
	newlib-csl-arm-2006q3-19:1.4
	newlib-csl-sourcerygxx-4_1-19:1.4
	newlib-csl-sourcerygxx-4_1-18:1.4
	newlib-csl-sourcerygxx-3_4_4-25:1.4
	newlib-csl-sourcerygxx-4_1-17:1.4
	cr-0x5f1:1.4.0.6
	newlib-csl-sourcerygxx-4_1-14:1.4
	newlib-csl-sourcerygxx-4_1-13:1.4
	newlib-csl-sourcerygxx-4_1-12:1.4
	newlib-csl-sourcerygxx-4_1-9:1.4
	newlib-csl-sourcerygxx-4_1-8:1.4
	newlib-csl-sourcerygxx-4_1-7:1.4
	newlib-csl-arm-2006q1-6:1.4
	newlib-csl-sourcerygxx-4_1-6:1.4
	newlib-csl-sourcerygxx-4_1-5:1.4
	newlib-csl-sourcerygxx-4_1-4:1.4
	newlib-autotools-branch:1.4.0.4
	newlib-csl-20060320-branch:1.4.0.2
	newlib-csl-20060320-branchpoint:1.4
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	newlib-1_11_0:1.4;
locks; strict;
comment	@ * @;


1.4
date	2002.08.23.01.56.05;	author fitzsim;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.23.48.47;	author fitzsim;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.01.17.05.44;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.24.20.53.29;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* libc/include/langinfo.h: New file.
	* libc/include/wchar.h: Likewise.
	* libc/include/sys/syslimits.h: Likewise.
	* libc/locale/fix_grouping.c: Likewise.
	* libc/locale/ldpart.c: Likewise.
	* libc/locale/ldpart.h: Likewise.
	* libc/locale/lmessages.c: Likewise.
	* libc/locale/lmessages.h: Likewise.
	* libc/locale/lmonetary.c: Likewise.
	* libc/locale/lmonetary.h: Likewise.
	* libc/locale/lnumeric.c: Likewise.
	* libc/locale/lnumeric.h: Likewise.
	* libc/locale/nl_langinfo.3: Likewise.
	* libc/locale/nl_langinfo.c: Likewise.
	* libc/locale/timelocal.c: Likewise.
	* libc/locale/timelocal.h: Likewise.
	* libc/stdlib/btowc.c: Likewise.
	* libc/stdlib/mbrlen.c: Likewise.
	* libc/stdlib/mbrtowc.c: Likewise.
	* libc/stdlib/mbsinit.c: Likewise.
	* libc/stdlib/mbsrtowcs.c: Likewise.
	* libc/stdlib/wcrtomb.c: Likewise.
	* libc/stdlib/wcsrtombs.c: Likewise.
	* libc/stdlib/wctob.c: Likewise.
	* libc/sys/linux/prof-freq.c: Likewise.
	* libc/sys/linux/profile.c: Likewise.
	* libc/sys/linux/machine/i386/dl-procinfo.c: Likewise.
	* libc/sys/linux/machine/i386/dl-procinfo.h: Likewise.
	* libc/include/stdlib.h: Change re-entrant functions to take
	mbstate_t pointers.
	* libc/include/sys/_types.h: Define _mbstate_t.
	* libc/include/sys/config.h (MB_LEN_MAX): New macro.
	* libc/include/sys/errno.h (EILSEQ): New error code.
	* libc/include/sys/reent.h: Include wchar.h.  Change reentrant
	structure to use mbstate_t.
	* libc/locale/Makefile.am (LIB_SOURCES): Add new files.
	* libc/machine/powerpc/vfprintf.c: Use mbstate_t.
	* libc/machine/powerpc/vfscanf.c: Likewise.
	* libc/stdio/getdelim.c: Reallocate buffer only when necessary.
	* libc/stdio/vfprintf.c: Likewise.
	* libc/stdio/vfscanf.c: Likewise.
	* libc/stdlib/Makefile.am (LIB_SOURCES): Add new files.
	* libc/stdlib/mblen.c: Use mbstate_t.
	* libc/stdlib/mblen_r.c: Likewise.
	* libc/stdlib/mbstowcs.c: Likewise.
	* libc/stdlib/mbstowcs_r.c: Likewise.
	* libc/stdlib/mbtowc.c: Likewise.
	* libc/stdlib/mbtowc_r.c: Likewise.
	* libc/stdlib/wcstombs.c: Likewise.
	* libc/stdlib/wcstombs_r.c: Likewise.
	* libc/stdlib/wctomb_r.c: Likewise.
	* libc/sys/linux/Makefile.am (LIB_SOURCES): Add prof-freq.c and
	profile.c.
	* libc/sys/linux/machine/i386/Makefile.am (LIB_SOURCES): Add
	dl-procinfo.c.
	* libc/sys/linux/sys/errno.h (EILSEQ): New error code.
	* libc/sys/linux/sys/types.h (off_t): Define type.
	* testsuite/newlib.locale/UTF-8.c: Change locale name from UTF-8
	to C-UTF-8.
	* testsuite/newlib.locale/UTF-8.exp: Likewise.
@
text
@/*
 *  Copyright (C) 2002 by Red Hat, Incorporated. All rights reserved.
 *
 *  Permission to use, copy, modify, and distribute this software
 *  is freely granted, provided that this notice is preserved.
 *
 *  Tests gleaned from Markus Kuhn's UTF-8 and Unicode FAQ,
 *  and specifically, his UTF-8-test.txt decoder stress test file.
 */

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

#define MAX_BYTES 65

int num_invalid(const char *s, int len);

char first[6][6] = {
  {0x0},                                   /* U-00000000 */
  {0xc2, 0x80},                            /* U-00000080 */
  {0xe0, 0xa0, 0x80},                      /* U-00000800 */
  {0xf0, 0x90, 0x80, 0x80},                /* U-00010000 */
  {0xf8, 0x88, 0x80, 0x80, 0x80},          /* U-00200000 */
  {0xfc, 0x84, 0x80, 0x80, 0x80, 0x80}     /* U-04000000 */
};

char last[6][6] = {
  {0x7f},                                  /* U-0000007F */
  {0xdf, 0xbf},                            /* U-000007FF */
  {0xef, 0xbf, 0xbf},                      /* U-0000FFFF */
  {0xf7, 0xbf, 0xbf, 0xbf},                /* U-001FFFFF */
  {0xfb, 0xbf, 0xbf, 0xbf, 0xbf},          /* U-03FFFFFF */
  {0xfd, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf}     /* U-7FFFFFFF */
};

char boundary[5][6] = {
  {0xed, 0x9f, 0xbf},                      /* U-0000D7FF */
  {0xee, 0x80, 0x80},                      /* U-0000E000 */
  {0xef, 0xbf, 0xbd},                      /* U-0000FFFD */
  {0xf4, 0x8f, 0xbf, 0xbf},                /* U-0010FFFF */
  {0xf4, 0x90, 0x80, 0x80}                 /* U-00110000 */
};

char continuation_bytes[8][7] = {
  {0x80},
  {0xbf},
  {0x80, 0xbf},
  {0x80, 0xbf, 0x80},
  {0x80, 0xbf, 0x80, 0xbf},
  {0x80, 0xbf, 0x80, 0xbf, 0x80},
  {0x80, 0xbf, 0x80, 0xbf, 0x80, 0xbf},
  {0x80, 0xbf, 0x80, 0xbf, 0x80, 0xbf, 0x80}
};

char all_continuation_bytes[64];


char all_two_byte_seq[32];
char all_three_byte_seq[16];
char all_four_byte_seq[8];
char all_five_byte_seq[4];
char all_six_byte_seq[2];

char incomplete_seq[10][6] = {
  {0xc2},                            /* U-00000080 */
  {0xe0, 0x80},                      /* U-00000800 */
  {0xf0, 0x80, 0x80},                /* U-00010000 */
  {0xf8, 0x80, 0x80, 0x80},          /* U-00200000 */
  {0xfc, 0x80, 0x80, 0x80, 0x80},    /* U-04000000 */
  {0xdf},                            /* U-000007FF */
  {0xef, 0xbf},                      /* U-0000FFFF */
  {0xf7, 0xbf, 0xbf},                /* U-001FFFFF */
  {0xfb, 0xbf, 0xbf, 0xbf},          /* U-03FFFFFF */
  {0xfd, 0xbf, 0xbf, 0xbf, 0xbf}     /* U-7FFFFFFF */
};

char incomplete_seq_concat[30];

char impossible_bytes[3][4] = {
  {0xfe},
  {0xff},
  {0xfe, 0xfe, 0xff, 0xff}
};

char overlong[5][6] = {
  {0xc0, 0xaf},
  {0xe0, 0x80, 0xaf},
  {0xf0, 0x80, 0x80, 0xaf},
  {0xf8, 0x80, 0x80, 0x80, 0xaf},
  {0xfc, 0x80, 0x80, 0x80, 0x80, 0xaf}
};

char overlong_max[5][6] = {
  {0xc1, 0xbf},
  {0xe0, 0x9f, 0xbf},
  {0xf0, 0x8f, 0xbf, 0xbf},
  {0xf8, 0x87, 0xbf, 0xbf, 0xbf},
  {0xfc, 0x83, 0xbf, 0xbf, 0xbf, 0xbf}
};

char overlong_nul[5][6] = {
  {0xc0, 0x80},
  {0xe0, 0x80, 0x80},
  {0xf0, 0x80, 0x80, 0x80},
  {0xf8, 0x80, 0x80, 0x80, 0x80},
  {0xfc, 0x80, 0x80, 0x80, 0x80, 0x80}
};

char single_surrogates[7][3] = {
  {0xed, 0xa0, 0x80},
  {0xed, 0xad, 0xbf},
  {0xed, 0xae, 0x80},
  {0xed, 0xaf, 0xbf},
  {0xed, 0xb0, 0x80},
  {0xed, 0xbe, 0x80},
  {0xed, 0xbf, 0xbf}
};

char paired_surrogates[8][6] = {
  {0xed, 0xa0, 0x80, 0xed, 0xb0, 0x80},
  {0xed, 0xa0, 0x80, 0xed, 0xbf, 0xbf},
  {0xed, 0xad, 0xbf, 0xed, 0xb0, 0x80},
  {0xed, 0xad, 0xbf, 0xed, 0xbf, 0xbf},
  {0xed, 0xae, 0x80, 0xed, 0xb0, 0x80},
  {0xed, 0xae, 0x80, 0xed, 0xbf, 0xbf},
  {0xed, 0xaf, 0xbf, 0xed, 0xb0, 0x80},
  {0xed, 0xaf, 0xbf, 0xed, 0xbf, 0xbf}
};

char illegal_pos[2][3] = {
  {0xff, 0xfe},
  {0xff, 0xff}
};
  
int main()
  {
    wchar_t wchar;
    int retval;
    int i;

    if (!setlocale(LC_CTYPE, "C-UTF-8"))
      {
        printf("Failed to set C-UTF-8 locale.\n");
        return 1;
      }
    else
      printf("Set C-UTF-8 locale.\n");

    /* 2  Boundary condition test cases */
    /* 2.1  First possible sequence of a certain length */
    retval = mbtowc(&wchar, first[0], MAX_BYTES);
    if (retval == 0)
      printf("2.1.1: U-%08d\n", wchar);
    else
      printf("2.1.1: Invalid\n");

    for (i = 2; i < 7; i++)
    {
      retval = mbtowc (&wchar, first[i-1], MAX_BYTES);
      if (retval == i)
        printf("2.1.%d: U-%08x\n", i, wchar);
      else
        printf("2.1.%d: Invalid\n", i);
    }

    /* 2.2  Last possible sequence of a certain length */
    for (i = 1; i < 7; i++)
    {
      retval = mbtowc (&wchar, last[i-1], MAX_BYTES);
      if (retval == i)
        printf("2.2.%d: U-%08x\n", i, wchar);
      else
        printf("2.2.%d: Invalid\n", i);
    }

    /* 2.3  Other boundary conditions */
    for (i = 1; i < 6; i++)
      {
        retval = mbtowc (&wchar, boundary[i-1], MAX_BYTES);
        if ((i < 4 && retval == 3) || (i > 3 && retval == 4))
          printf("2.3.%d: U-%08x\n", i, wchar);
        else
          printf("2.3.%d: Invalid\n", i);
      }

    /* 3  Malformed sequences */
    /* 3.1  Unexpected continuation bytes */
    retval = mbtowc (&wchar, continuation_bytes[0], MAX_BYTES);
    if (retval == 1)
      printf("3.1.1: U-%08x\n", wchar);
    else
      printf("3.1.1: 1 Invalid\n");

    retval = mbtowc (&wchar, continuation_bytes[1], MAX_BYTES);
    if (retval == 1)
      printf("3.1.2: U-%08x\n", wchar);
    else
      printf("3.1.2: 1 Invalid\n");

    for(i=2; i< 8; i++)
      {
        retval = num_invalid(continuation_bytes[i], i);
        if (retval == -1)
          printf("3.1.%d: Valid Character Found\n", i+1);
        else
          printf("3.1.%d: %d Invalid\n", i+1, retval);
      }

    for(i = 0x80; i < 0xc0; i++)
      all_continuation_bytes[i-0x80] = i;

    retval = num_invalid(all_continuation_bytes, 0xc0 - 0x80);
    if (retval == -1)
      printf("3.1.9: Valid Character Found\n");
    else
      printf("3.1.9: %d Invalid\n", retval);

    /* 3.2  Lonely start characters */
    for(i = 0xc0; i < 0xe0; i++)
      all_two_byte_seq[i-0xc0] = i;

    retval = num_invalid(all_two_byte_seq, 0xe0 - 0xc0);
    if (retval == -1)
      printf("3.2.1: Valid Character Found\n");
    else
      printf("3.2.1: %d Invalid\n", retval);

    for(i = 0xe0; i < 0xf0; i++)
      all_three_byte_seq[i-0xe0] = i;

    retval = num_invalid(all_three_byte_seq, 0xf0 - 0xe0);
    if (retval == -1)
      printf("3.2.2: Valid Character Found\n");
    else
      printf("3.2.2: %d Invalid\n", retval);
    
    for(i = 0xf0; i < 0xf8; i++)
      all_four_byte_seq[i-0xf0] = i;

    retval = num_invalid(all_four_byte_seq, 0xf8 - 0xf0);
    if (retval == -1)
      printf("3.2.3: Valid Character Found\n");
    else
      printf("3.2.3: %d Invalid\n", retval);
    
    for(i = 0xf8; i < 0xfc; i++)
      all_five_byte_seq[i-0xf8] = i;

    retval = num_invalid(all_five_byte_seq, 0xfc - 0xf8);
    if (retval == -1)
      printf("3.2.4: Valid Character Found\n");
    else
      printf("3.2.4: %d Invalid\n", retval);

    for(i = 0xfc; i < 0xfe; i++)
      all_six_byte_seq[i-0xfc] = i;

    retval = num_invalid(all_six_byte_seq, 0xfe - 0xfc);
    if (retval == -1)
      printf("3.2.5: Valid Character Found\n");
    else
      printf("3.2.5: %d Invalid\n", retval);

    /* 3.3  Sequences with last continuation byte missing */
    for(i = 1; i < 6; i++)
      {
        retval = mbtowc(&wchar, incomplete_seq[i-1], i);
        if(retval == -1)
          printf("3.3.%d: 1 Invalid\n", i);
        else
          printf("3.3.%d: Valid Character Found\n", i);
      }

    for(i = 6; i < 11; i++)
      {
        retval = mbtowc(&wchar, incomplete_seq[i-1], i - 5);
        if(retval == -1)
          printf("3.3.%d: 1 Invalid\n", i);
        else
          printf("3.3.%d: Valid Character Found\n", i);
      }

    /* 3.4  Concatenation of incomplete sequences */
    /* This test is excluded because the mbtowc function does not return the
       number of bytes read in an invalid multi-byte sequence. */

    /* 3.5  Impossible bytes */
    retval = mbtowc(&wchar, impossible_bytes[0], 1);
    if(retval == -1)
      printf("3.5.1: 1 Invalid\n");
    else
      printf("3.5.1: Valid Character Found\n");

    retval = mbtowc(&wchar, impossible_bytes[1], 1);
    if(retval == -1)
      printf("3.5.2: 1 Invalid\n");
    else
      printf("3.5.2: Valid Character Found\n");

    retval = mbtowc(&wchar, impossible_bytes[2], 4);
    if(retval == -1)
      printf("3.5.3: 1 Invalid\n");
    else
      printf("3.5.3: Valid Character Found\n");

    /* 4  Overlong sequences */
    /* 4.1  Examples of an overlong ASCII character */
    for(i = 2; i < 7; i++)
      {
        retval = mbtowc(&wchar, overlong[i-2], i);
        if(retval == -1)
          printf("4.1.%d: 1 Invalid\n", i-1);
        else
          printf("4.1.%d: Valid Character Found\n", i-1);
      }

    /* 4.2  Maximum overlong sequences */
    for(i = 2; i < 7; i++)
      {
        retval = mbtowc(&wchar, overlong_max[i-2], i);
        if(retval == -1)
          printf("4.2.%d: 1 Invalid\n", i-1);
        else
          printf("4.2.%d: Valid Character Found\n", i-1);
      }

    /* 4.3  Overlong representation of the NUL character */
    for(i = 2; i < 7; i++)
      {
        retval = mbtowc(&wchar, overlong_nul[i-2], i);
        if(retval == -1)
          printf("4.3.%d: 1 Invalid\n", i-1);
        else
          printf("4.3.%d: Valid Character Found\n", i-1);
      }

    /* 5  Illegal code positions */
    /* 5.1 Single UTF-16 surrogates */
    for (i = 1; i < 8; i++)
      {
        retval = mbtowc(&wchar, single_surrogates[i-1], 3);
        if(retval == -1)
          printf("5.1.%d: 1 Invalid\n", i);
        else
          printf("5.1.%d: Valid Character Found\n", i);
      }
    
    /* 5.2 Paired UTF-16 surrogates */
    for (i = 1; i < 8; i++)
      {
        retval = mbtowc(&wchar, paired_surrogates[i-1], 6);
        if(retval == -1)
          printf("5.2.%d: 1 Invalid\n", i);
        else
          printf("5.2.%d: Valid Character Found\n", i);
      }

    /* 5.3 Other illegal code positions */
    retval = mbtowc(&wchar, illegal_pos[0], 3);
    if(retval == -1)
      printf("5.3.1: 1 Invalid\n");
    else
      printf("5.3.1: Valid Character Found\n");

    retval = mbtowc(&wchar, illegal_pos[1], 3);
    if(retval == -1)
      printf("5.3.2: 1 Invalid\n");
    else
      printf("5.3.2: Valid Character Found\n");
    
    return 0;
  }

/* return number of invalid characters in string,
   returns -1 if a valid character is found */
int
num_invalid(const char *s, int len)
{
  int retval = 0;
  int i = 0;
  int num_inv = 0;
  wchar_t wchar;
  const char *t;

  t = s;

  for(i=0; i<len; t++, i++)
    {
      retval = mbtowc (&wchar, t, len - i);
      if(retval == -1)
        num_inv++;
      else
        return -1;
    }
  return num_inv;
}
@


1.3
log
@	* testsuite/lib/checkoutput.exp (newlib_check_output): Output
	only one pass or fail per test file.  Trim \r's from output
	values received from test programs.  Remove support for named
	tests.
	* testsuite/newlib.locale/UTF-8.exp: Update to support new
	newlib_check_output behaviour.
	* testsuite/newlib.locale/UTF-8.c: Likewise.
@
text
@d142 1
a142 1
    if (!setlocale(LC_CTYPE, "UTF-8"))
d144 1
a144 1
        printf("Failed to set UTF-8 locale.\n");
d148 1
a148 1
      printf("Set UTF-8 locale.\n");
@


1.2
log
@	* Makefile.am (site.exp): Remove newlib_cflags.  Add
	multibuildtop.
	* testsuite/newlib.locale/UTF-8.c: Change fprintf's to printf's.
	* testsuite/lib/flags.exp: New file.
	* testsuite/lib/newlib.exp: Load flags.exp.
	(newlib_target_compile): Remove libgloss directory references.
	(newlib_init): Remove newlib_cflags references.
@
text
@d154 1
a154 1
      printf("2.1.1: U-%08d \n", wchar);
d156 1
a156 1
      printf("2.1.1: Invalid \n");
d162 1
a162 1
        printf("2.1.%d: U-%08x \n", i, wchar);
d164 1
a164 1
        printf("2.1.%d: Invalid \n", i);
d172 1
a172 1
        printf("2.2.%d: U-%08x \n", i, wchar);
d174 1
a174 1
        printf("2.2.%d: Invalid \n", i);
d182 1
a182 1
          printf("2.3.%d: U-%08x \n", i, wchar);
d184 1
a184 1
          printf("2.3.%d: Invalid \n", i);
d191 1
a191 1
      printf("3.1.1: U-%08x \n", wchar);
d193 1
a193 1
      printf("3.1.1: 1 Invalid \n");
d197 1
a197 1
      printf("3.1.2: U-%08x \n", wchar);
d199 1
a199 1
      printf("3.1.2: 1 Invalid \n");
d207 1
a207 1
          printf("3.1.%d: %d Invalid \n", i+1, retval);
d217 1
a217 1
      printf("3.1.9: %d Invalid \n", retval);
d227 1
a227 1
      printf("3.2.1: %d Invalid \n", retval);
d236 1
a236 1
      printf("3.2.2: %d Invalid \n", retval);
d245 1
a245 1
      printf("3.2.3: %d Invalid \n", retval);
d254 1
a254 1
      printf("3.2.4: %d Invalid \n", retval);
d263 1
a263 1
      printf("3.2.5: %d Invalid \n", retval);
d270 1
a270 1
          printf("3.3.%d: 1 Invalid \n", i);
d279 1
a279 1
          printf("3.3.%d: 1 Invalid \n", i);
d291 1
a291 1
      printf("3.5.1: 1 Invalid \n");
d297 1
a297 1
      printf("3.5.2: 1 Invalid \n");
d303 1
a303 1
      printf("3.5.3: 1 Invalid \n");
d313 1
a313 1
          printf("4.1.%d: 1 Invalid \n", i-1);
d323 1
a323 1
          printf("4.2.%d: 1 Invalid \n", i-1);
d333 1
a333 1
          printf("4.3.%d: 1 Invalid \n", i-1);
d344 1
a344 1
          printf("5.1.%d: 1 Invalid \n", i);
d354 1
a354 1
          printf("5.2.%d: 1 Invalid \n", i);
d362 1
a362 1
      printf("5.3.1: 1 Invalid \n");
d368 1
a368 1
      printf("5.3.2: 1 Invalid \n");
@


1.1
log
@	* Makefile.am (check-DEJAGNU): New target.
	(site.exp): Likewise.
	* acinclude.m4 (NEWLIB_CONFIGURE): Replace AC_CANONICAL_HOST
	with AC_CANONICAL_SYSTEM.  Remove AC_CANONICAL_BUILD.
	* libc/locale/locale.c (_setlocale_r): Add UTF-8 support.
	* libc/stdlib/mbtowc_r.c (_mbtowc_r): Likewise.
	* libc/stdlib/wctomb_r.c (_wctomb_r): Likewise.
	* testsuite: New directory.
	* testsuite/config: Likewise.
	* testsuite/lib: Likewise.
	* testsuite/newlib.locale: Likewise.
	* testsuite/newlib.string: Likewise.
	* testsuite/config/default.exp: New file.
	* testsuite/lib/checkoutput.exp: New file.
	* testsuite/lib/newlib.exp: New file.
	* testsuite/lib/passfail.exp: New file.
	* testsuite/newlib.locale/UTF-8.c: New file.
	* testsuite/newlib.locale/UTF-8.exp: New file.
	* testsuite/newlib.locale/locale.exp: New file.
	* testsuite/newlib.string/string.exp: New file.
	* testsuite/newlib.string/tstring.c: New file.
@
text
@d144 1
a144 1
        fprintf(stderr, "Failed to set UTF-8 locale.\n");
d148 1
a148 1
      fprintf(stderr, "Set UTF-8 locale.\n");
@

