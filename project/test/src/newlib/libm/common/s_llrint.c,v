head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.6
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.4
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	newlib-2_0_0:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.2
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	newlib-1_20_0:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	newlib-1_18_0:1.1
	cygwin-1_7_1-release:1.1;
locks; strict;
comment	@ * @;


1.2
date	2010.08.03.18.21.20;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.03.17.39.24;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2010-08-03  Craig Howland <howland@@LGSInnovations.com>

        * libm/common/s_lrint.c (lrint):  Annotate shift operations with
        possible shift amount ranges, and use SAFE_RIGHT_SHIFT to avoid
        undefined behaviour.
        * libm/common/s_llrint.c (llrint):  Likewise.
        * libm/common/s_lround.c (lround):  Correct some comments on ranges.
        * libm/common/s_llround.c (llround):  Likewise.
@
text
@/* lrint adapted to be llrint for Newlib, 2009 by Craig Howland.  */
/* @@(#)s_lrint.c 5.1 93/09/24 */
/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 */

/*
 * llrint(x)
 * Return x rounded to integral value according to the prevailing
 * rounding mode.
 * Method:
 *	Using floating addition.
 * Exception:
 *	Inexact flag raised if x not equal to llrint(x).
 */

#include "fdlibm.h"

#ifndef _DOUBLE_IS_32BITS

#ifdef __STDC__
static const double
#else
static double 
#endif

/* Adding a double, x, to 2^52 will cause the result to be rounded based on
   the fractional part of x, according to the implementation's current rounding
   mode.  2^52 is the smallest double that can be represented using all 52 significant
   digits. */
TWO52[2]={
  4.50359962737049600000e+15, /* 0x43300000, 0x00000000 */
 -4.50359962737049600000e+15, /* 0xC3300000, 0x00000000 */
};

long long int
#ifdef __STDC__
	llrint(double x)
#else
	llrint(x)
	double x;
#endif
{
  __int32_t i0,j0,sx;
  __uint32_t i1;
  double t;
  volatile double w;
  long long int result;
  
  EXTRACT_WORDS(i0,i1,x);

  /* Extract sign bit. */
  sx = (i0>>31)&1;

  /* Extract exponent field. */
  j0 = ((i0 & 0x7ff00000) >> 20) - 1023;
  /* j0 in [-1023,1024] */
  
  if(j0 < 20)
    {
      /* j0 in [-1023,19] */
      if(j0 < -1)
        return 0;
      else
        {
          /* j0 in [0,19] */
	  /* shift amt in [0,19] */
          w = TWO52[sx] + x;
          t = w - TWO52[sx];
          GET_HIGH_WORD(i0, t);
          /* Detect the all-zeros representation of plus and
             minus zero, which fails the calculation below. */
          if ((i0 & ~((__int32_t)1 << 31)) == 0)
              return 0;
          /* After round:  j0 in [0,20] */
          j0 = ((i0 & 0x7ff00000) >> 20) - 1023;
          i0 &= 0x000fffff;
          i0 |= 0x00100000;
	  /* shift amt in [20,0] */
          result = i0 >> (20 - j0);
        }
    }
  else if (j0 < (int)(8 * sizeof (long long int)) - 1)
    {
      /* 64bit return: j0 in [20,62] */
      if (j0 >= 52)
	/* 64bit return: j0 in [52,62] */
	/* 64bit return: left shift amt in [32,42] */
        result = ((long long int) ((i0 & 0x000fffff) | 0x0010000) << (j0 - 20)) | 
		/* 64bit return: right shift amt in [0,10] */
                   (i1 << (j0 - 52));
      else
        {
	  /* 64bit return: j0 in [20,51] */
          w = TWO52[sx] + x;
          t = w - TWO52[sx];
          EXTRACT_WORDS (i0, i1, t);
          j0 = ((i0 & 0x7ff00000) >> 20) - 1023;
          i0 &= 0x000fffff;
          i0 |= 0x00100000;
          /* After round:
	   * 64bit return: j0 in [20,52] */
	  /* 64bit return: left shift amt in [0,32] */
          /* ***64bit return: right shift amt in [32,0] */
          result = ((long long int) i0 << (j0 - 20))
			| SAFE_RIGHT_SHIFT (i1, (52 - j0));
        }
    }
  else
    {
      return (long long int) x;
    }
  
  return sx ? -result : result;
}

#endif /* _DOUBLE_IS_32BITS */
@


1.1
log
@
2009-04-03  Craig Howland <howland@@LGSInnovations.com>

        * libm/common/s_llrint.c: New file, implementing llrint().
        * libm/common/sf_llrint.c: New file, implementing llrintf().
        * libm/common/Makefile.am:  Add s_llrint.c (src); sf_llrint.c (fsrc).
        * libm/common/Makefile.in:  Regenerate.
@
text
@d64 1
d68 1
d73 2
d80 1
a80 1
          if ((i0 & ~(1 << 31)) == 0)
d82 1
d86 1
d92 1
d94 2
d97 1
d101 1
d108 6
a113 1
          result = ((long long int) i0 << (j0 - 20)) | (i1 >> (52 - j0));
@

