head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	newlib-2_2_0:1.2.0.6
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_28-release:1.2
	newlib-2_1_0:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.4
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	newlib-2_0_0:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.2
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	newlib-1_20_0:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	newlib-1_18_0:1.2
	cygwin-1_7_1-release:1.2
	newlib-1_17_0-arc:1.1.0.10
	binutils-arc-20080908-branch:1.1.0.8
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	cr-0x5f1:1.1.0.6
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2009.05.15.16.15.57;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.14.21.11.39;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2009-05-15  Craig Howland <howland@@LGSInnovations.com>

        * configure.in:  Add configuration test for long double type existing
        and set flag _HAVE_LONG_DOUBLE if true.  Fix INIT_ARRAY (.init_array)
        and _LDBL_EQ_DBL tests to not link so that will work with
        cross-compilers.
        * configure: Regenerated.
        * Makefile.in: Ditto.
        * newlib.hin: Add _HAVE_LONG_DOUBLE flag.
        * libc/include/math.h:  Change non-builtin defines for HUGE_VAL,
        HUGE_VALF, and HUGE_VALL to be constant expressions.  Add definitions
        for the non-builtin case for INFINITY and NAN.  Gate HUGE_VALL and
        union __ldmath definitions with (new) _HAVE_LONG_DOUBLE.
        *libm/common/s_infconst.c:  Change definitions to use values from
        float.h instead of non-so-portable integer forms.  Mark as being
        deprecated (because now removed from math.h, are not used anywhere
        in Newlib, itself).
@
text
@/* Infinity as a constant value.   This is used for HUGE_VAL.
 * Added by Cygnus Support.
 */

#include <float.h>
#include <math.h>

/* These should never actually be used any longer, as their use in math.h was
 * removed, but they are kept here in case a user was pointing to them.
 * FIXME:  deprecate these identifiers and then delete them.  */
 
/* Float version of infinity.  */
const union __fmath __infinityf[1] = { { FLT_MAX+FLT_MAX } };

/* Double version of infinity.  */
const union __dmath __infinity[1] = { { DBL_MAX+DBL_MAX } };

/* Long double version of infinity.  */
#if defined(_HAVE_LONG_DOUBLE)
const union __ldmath __infinityld[1] = { { LDBL_MAX+LDBL_MAX } };
#endif
@


1.1
log
@
2005-10-14  Jeff Johnston  <jjohnstn@@redhat.com>

        * libc/include/math.h (HUGE_VALF, HUGE_VALL): New.
        * libm/common/Makefile.am: Add s_infconst.c support.
        * libm/common/Makefile.in: Regenerated.
        * libm/common/s_infconst.c: New file with float and
        long double infinity support added.
        * libm/math/Makefile.am: Remove s_infconst.c support.
        * libm/math/Makefile.in: Regenerated.
        * libm/math/s_infconst.c: Moved to common directory.
        * libm/mathfp/Makefile.am: Remove s_infconst.c support.
        * libm/mathfp/Makefile.in: Regenerated.
        * libm/mathfp/s_infconst.c: Moved to common directory.
@
text
@d6 1
a6 1
#include "fdlibm.h"
d8 4
d13 1
a13 1
const union __fmath __infinityf[1] = {{{0x7f800000}}};
d16 1
a16 9
#ifndef _DOUBLE_IS_32BITS
 #ifdef __IEEE_BIG_ENDIAN
  const union __dmath __infinity[1] = {{{0x7ff00000, 0}}};
 #else
  const union __dmath __infinity[1] = {{{0, 0x7ff00000}}};
 #endif
#else /* defined (_DOUBLE_IS_32BITS) */
 const union __dmath __infinity[1] = {{{0x7f800000, 0}}};
#endif /* defined (_DOUBLE_IS_32BITS) */
d19 3
a21 18
#ifdef __IEEE_BIG_ENDIAN
 #if LDBL_MANT_DIG == 24
  const union __ldmath __infinityld[1] = {{{0x7f800000, 0, 0, 0}}};
 #elif LDBL_MANT_DIG == 53
  const union __ldmath __infinityld[1] = {{{0x7ff00000, 0, 0, 0}}};
 #else
  const union __ldmath __infinityld[1] = {{{0x7fff0000, 0, 0, 0}}};
 #endif /* LDBL_MANT_DIG size  */
#else /* __IEEE_LITTLE_ENDIAN  */
 #if LDBL_MANT_DIG == 24
  const union __ldmath __infinityld[1] = {{{0x7f800000, 0, 0, 0}}};
 #elif LDBL_MANT_DIG == 53
  const union __ldmath __infinityld[1] = {{{0, 0x7ff00000, 0, 0}}};
 #else
  const union __ldmath __infinityld[1] = {{{0, 0x80000000, 0x00007fff, 0}}};
 #endif /* LDBL_MANT_DIG size  */
#endif /* __IEEE_LITTLE_ENDIAN  */

@

