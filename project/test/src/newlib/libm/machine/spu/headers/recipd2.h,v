head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	newlib-2_2_0:1.4.0.8
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_28-release:1.4
	newlib-2_1_0:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.6
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	newlib-2_0_0:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.4
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	newlib-1_20_0:1.4
	cygwin-1_7_9-release:1.4
	newlib-1_19_0:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	newlib-1_18_0:1.4
	cygwin-1_7_1-release:1.4
	newlib-1_17_0-arc:1.4.0.2
	binutils-arc-20080908-branch:1.3.0.2
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.4
	newlib-1_16_0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.11.26.19.59.25;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.04.17.50.56;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.04.17.46.14;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.28.18.44.24;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
2008-11-26 Ken Werner <ken.werner@@de.ibm.com>

        * libm/machine/spu/headers/acosd2.h: Rebase against current simdmath.
        * libm/machine/spu/headers/asind2.h: Likewise.
        * libm/machine/spu/headers/asinhf4.h: Likewise.
        * libm/machine/spu/headers/divd2.h: Likewise.
        * libm/machine/spu/headers/erf_utils.h: Likewise.
        * libm/machine/spu/headers/erfcd2.h: Likewise.
        * libm/machine/spu/headers/erfcf4.h: Likewise.
        * libm/machine/spu/headers/erfd2.h: Likewise.
        * libm/machine/spu/headers/recipd2.h: Likewise.
@
text
@/* --------------------------------------------------------------  */
/* (C)Copyright 2001,2008,                                         */
/* International Business Machines Corporation,                    */
/* Sony Computer Entertainment, Incorporated,                      */
/* Toshiba Corporation,                                            */
/*                                                                 */
/* All Rights Reserved.                                            */
/*                                                                 */
/* Redistribution and use in source and binary forms, with or      */
/* without modification, are permitted provided that the           */
/* following conditions are met:                                   */
/*                                                                 */
/* - Redistributions of source code must retain the above copyright*/
/*   notice, this list of conditions and the following disclaimer. */
/*                                                                 */
/* - Redistributions in binary form must reproduce the above       */
/*   copyright notice, this list of conditions and the following   */
/*   disclaimer in the documentation and/or other materials        */
/*   provided with the distribution.                               */
/*                                                                 */
/* - Neither the name of IBM Corporation nor the names of its      */
/*   contributors may be used to endorse or promote products       */
/*   derived from this software without specific prior written     */
/*   permission.                                                   */
/*                                                                 */
/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND          */
/* CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,     */
/* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF        */
/* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE        */
/* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR            */
/* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT    */
/* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;    */
/* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)        */
/* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       */
/* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR    */
/* OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  */
/* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              */
/* --------------------------------------------------------------  */
/* PROLOG END TAG zYx                                              */
#ifdef __SPU__

#ifndef _RECIPD2_H_
#define _RECIPD2_H_		1

#include <spu_intrinsics.h>


/*
 * FUNCTION
 *	vector double _recipd2(vector double value)
 * 
 * DESCRIPTION
 * 	The _recipd2 function inverts "value" and returns the result. 
 *      Computation is performed using the single precision reciprocal 
 *      estimate and interpolate instructions to produce a 12 accurate 
 *      estimate.
 *
 *	One (1) iteration of a Newton-Raphson is performed to improve 
 *	accuracy to single precision floating point. Two additional double 
 *	precision iterations are  needed to achieve a full double
 *	preicision result.
 *
 *	The Newton-Raphson iteration is of the form:
 *	a)	X[i+1] = X[i] * (2.0 - b*X[i]) 
 *          or
 *      b)	X[i+1] = X[i] + X[i]*(1.0 - X[i]*b)
 * 	where b is the input value to be inverted
 *
 *      The later (b) form improves the accuracy to 99.95% correctly rounded.
 */ 
static __inline vector double _recipd2(vector double value_in)
{
  vec_float4  x0;
  vec_float4  value;
  vec_float4  one   = spu_splats(1.0f);
  vec_double2 one_d = spu_splats(1.0);
  vec_double2 x1, x2, x3;
  vec_double2 scale;
  vec_double2 exp, value_d;
  vec_ullong2 expmask = spu_splats(0x7FF0000000000000ULL);
  vec_ullong2 is0inf;

#ifdef __SPU_EDP__
  vec_ullong2 isdenorm;
  vec_ullong2 expmask_minus1 = spu_splats(0x7FE0000000000000ULL);

  /* Determine special input values. For example, if the input is a denorm, infinity or 0 */

  isdenorm = spu_testsv(value_in, (SPU_SV_POS_DENORM   | SPU_SV_NEG_DENORM));
  is0inf   = spu_testsv(value_in, (SPU_SV_NEG_ZERO     | SPU_SV_POS_ZERO |
				   SPU_SV_NEG_INFINITY | SPU_SV_POS_INFINITY));

  /* Scale the divisor to correct for double precision floating
   * point exponents that are out of single precision range.
   */
  exp = spu_and(value_in, (vec_double2)expmask);
  scale = spu_xor(exp, (vec_double2)spu_sel(expmask, expmask_minus1, isdenorm));
  value_d = spu_mul(value_in, scale);
  value = spu_roundtf(value_d);

  /* Perform reciprocal with 1 single precision and 2 double precision
   * Newton-Raphson iterations.
   */
  x0 = spu_re(value);
  x1 = spu_extend(spu_madd(spu_nmsub(value, x0, one), x0, x0));
  x2 = spu_madd(spu_nmsub(value_d, x1, one_d), x1, x1);
  x3 = spu_madd(spu_nmsub(value_d, x2, one_d), x2, x2);
  x3 = spu_sel(spu_mul(x3, scale), spu_xor(value_in, (vector double)expmask), is0inf);

#else /* !__SPU_EDP__ */

  vec_uint4 isinf, iszero, isdenorm0;
  vec_double2 value_abs;
  vec_double2 sign = spu_splats(-0.0);
  vec_double2 denorm_scale = (vec_double2)spu_splats(0x4330000000000000ULL);
  vec_double2 exp_53 = (vec_double2)spu_splats(0x0350000000000000ULL);
  vec_uchar16 splat_hi = (vec_uchar16){0,1,2,3, 0,1,2,3, 8,9,10,11, 8,9,10,11};
  vec_uchar16 swap = (vec_uchar16){4,5,6,7, 0,1,2,3, 12,13,14,15, 8,9,10,11};

  value_abs = spu_andc(value_in, sign);
  exp = spu_and(value_in, (vec_double2)expmask);

  /* Determine if the input is a special value. These include:
   *  denorm   - then we must coerce it to a normal value. 
   *  zero     - then we must return an infinity
   *  infinity - then we must return a zero.
   */
  isdenorm0 = spu_cmpeq(spu_shuffle((vec_uint4)exp, (vec_uint4)exp, splat_hi), 0);

  isinf  = spu_cmpeq((vec_uint4)value_abs, (vec_uint4)expmask);
  iszero = spu_cmpeq((vec_uint4)value_abs, 0);
  isinf  = spu_and(isinf,  spu_shuffle(isinf, isinf, swap));
  iszero = spu_and(iszero, spu_shuffle(iszero, iszero, swap));
  is0inf = (vec_ullong2)spu_or(isinf, iszero);

  /* If the inputs is a denorm, we must first convert it to a normal number since
   * arithmetic operations on denormals produces 0 on Cell/B.E.
   */
  value_d = spu_sub(spu_or(value_abs, exp_53), exp_53);
  value_d = spu_sel(value_abs, value_d, (vec_ullong2)isdenorm0);

  /* Scale the divisor to correct for double precision floating
   * point exponents that are out of single precision range.
   */
  scale = spu_xor(spu_and(value_d, (vec_double2)expmask), (vec_double2)expmask);
  value_d = spu_mul(value_d, scale);
  value = spu_roundtf(value_d);

  /* Perform reciprocal with 1 single precision and 2 double precision
   * Newton-Raphson iterations. The bias is removed after the single 
   * precision iteration.
   */
  x0 = spu_re(value);
  x1 = spu_extend(spu_madd(spu_nmsub(value, x0, one), x0, x0));
  x2 = spu_madd(spu_nmsub(value_d, x1, one_d), x1, x1);
  x3 = spu_madd(spu_nmsub(value_d, x2, one_d), x2, x2);
  x3 = spu_mul(x3, spu_sel(scale, value_in, (vec_ullong2)sign));
  x3 = spu_sel(x3, spu_mul(x3, denorm_scale), (vec_ullong2)isdenorm0);
  x3 = spu_sel(x3, spu_xor(value_in, (vector double)expmask), is0inf);

#endif /* __SPU_EDP__ */

  return (x3);
}

#endif /* _RECIPD2_H_ */
#endif /* __SPU__ */
@


1.3
log
@
2008-09-04  Ken Werner  <ken.werner@@de.ibm.com>

        * libm/machine/spu/headers/acosd2.h: Duplicated preamble text removed.
        * libm/machine/spu/headers/acosf4.h: Likewise.
        * libm/machine/spu/headers/acoshd2.h: Likewise.
        * libm/machine/spu/headers/acoshf4.h: Likewise.
        * libm/machine/spu/headers/asind2.h: Likewise.
        * libm/machine/spu/headers/asinf4.h: Likewise.
        * libm/machine/spu/headers/asinhd2.h: Likewise.
        * libm/machine/spu/headers/asinhf4.h: Likewise.
        * libm/machine/spu/headers/atan2d2.h: Likewise.
        * libm/machine/spu/headers/atan2f4.h: Likewise.
        * libm/machine/spu/headers/atand2.h: Likewise.
        * libm/machine/spu/headers/atanf4.h: Likewise.
        * libm/machine/spu/headers/atanhd2.h: Likewise.
        * libm/machine/spu/headers/atanhf4.h: Likewise.
        * libm/machine/spu/headers/cos_sin.h: Likewise.
        * libm/machine/spu/headers/cosd2.h: Likewise.
        * libm/machine/spu/headers/cosf4.h: Likewise.
        * libm/machine/spu/headers/coshd2.h: Likewise.
        * libm/machine/spu/headers/coshf4.h: Likewise.
        * libm/machine/spu/headers/divd2.h: Likewise.
        * libm/machine/spu/headers/divf4.h: Likewise.
        * libm/machine/spu/headers/erf_utils.h: Likewise.
        * libm/machine/spu/headers/erfcd2.h: Likewise.
        * libm/machine/spu/headers/erfcf4.h: Likewise.
        * libm/machine/spu/headers/erfd2.h: Likewise.
        * libm/machine/spu/headers/erff4.h: Likewise.
        * libm/machine/spu/headers/exp2d2.h: Likewise.
        * libm/machine/spu/headers/exp2f4.h: Likewise.
        * libm/machine/spu/headers/expd2.h: Likewise.
        * libm/machine/spu/headers/expf4.h: Likewise.
        * libm/machine/spu/headers/expm1d2.h: Likewise.
        * libm/machine/spu/headers/expm1f4.h: Likewise.
        * libm/machine/spu/headers/floord2.h: Likewise.
        * libm/machine/spu/headers/floorf4.h: Likewise.
        * libm/machine/spu/headers/hypotd2.h: Likewise.
        * libm/machine/spu/headers/hypotf4.h: Likewise.
        * libm/machine/spu/headers/isnand2.h: Likewise.
        * libm/machine/spu/headers/isnanf4.h: Likewise.
        * libm/machine/spu/headers/ldexpd2.h: Likewise.
        * libm/machine/spu/headers/ldexpf4.h: Likewise.
        * libm/machine/spu/headers/lgammad2.h: Likewise.
        * libm/machine/spu/headers/lgammaf4.h: Likewise.
        * libm/machine/spu/headers/log10d2.h: Likewise.
        * libm/machine/spu/headers/log1pd2.h: Likewise.
        * libm/machine/spu/headers/log1pf4.h: Likewise.
        * libm/machine/spu/headers/log2d2.h: Likewise.
        * libm/machine/spu/headers/log2f4.h: Likewise.
        * libm/machine/spu/headers/logbf4.h: Likewise.
        * libm/machine/spu/headers/logd2.h: Likewise.
        * libm/machine/spu/headers/logf4.h: Likewise.
        * libm/machine/spu/headers/nearbyintf4.h: Likewise.
        * libm/machine/spu/headers/nextafterd2.h: Likewise.
        * libm/machine/spu/headers/nextafterf4.h: Likewise.
        * libm/machine/spu/headers/powd2.h: Likewise.
        * libm/machine/spu/headers/powf4.h: Likewise.
        * libm/machine/spu/headers/recipd2.h: Likewise.
        * libm/machine/spu/headers/recipf4.h: Likewise.
        * libm/machine/spu/headers/rintf4.h: Likewise.
        * libm/machine/spu/headers/scalbnf4.h: Likewise.
        * libm/machine/spu/headers/signbitd2.h: Likewise.
        * libm/machine/spu/headers/sincosd2.h: Likewise.
        * libm/machine/spu/headers/sincosf4.h: Likewise.
        * libm/machine/spu/headers/sind2.h: Likewise.
        * libm/machine/spu/headers/sinf4.h: Likewise.
        * libm/machine/spu/headers/sinhd2.h: Likewise.
        * libm/machine/spu/headers/sinhf4.h: Likewise.
        * libm/machine/spu/headers/sqrtd2.h: Likewise.
        * libm/machine/spu/headers/sqrtf4.h: Likewise.
        * libm/machine/spu/headers/tand2.h: Likewise.
        * libm/machine/spu/headers/tanf4.h: Likewise.
        * libm/machine/spu/headers/tanhd2.h: Likewise.
        * libm/machine/spu/headers/tanhf4.h: Likewise.
        * libm/machine/spu/headers/tgammad2.h: Likewise.
        * libm/machine/spu/headers/tgammaf4.h: Likewise.
        * libm/machine/spu/headers/truncd2.h: Likewise.
        * libm/machine/spu/headers/truncf4.h: Likewise.
        * libm/machine/spu/headers/simdmath.h: Likewise.
@
text
@d65 3
a67 1
 *		X[i+1] = X[i] * (2.0 - b*X[i]) 
d70 1
d72 1
a72 1
static __inline vector double _recipd2(vector double value_d)
d74 9
a82 7
  vector unsigned long long expmask  = (vector unsigned long long) { 0x7FF0000000000000ULL, 0x7FF0000000000000ULL };
  vector float  x0;
  vector float  value;
  vector float  two   = spu_splats(2.0f);
  vector double two_d = spu_splats(2.0);
  vector double x1, x2, x3;
  vector double bias;
d84 11
a94 1
  /* Bias the divisor to correct for double precision floating
d97 4
a100 1
  bias = spu_xor(spu_and(value_d, (vector double)expmask), (vector double)expmask);
d102 3
a104 1
  value = spu_roundtf(spu_mul(value_d, bias));
d106 24
a129 6
  x1 = spu_extend(spu_mul(x0, spu_nmsub(value, x0, two)));
  x1 = spu_mul(x1, bias);
  x2 = spu_mul(x1, spu_nmsub(value_d, x1, two_d));
  x3 = spu_mul(x2, spu_nmsub(value_d, x2, two_d));

  /* Handle input = +/- infinity or +/-0. */
d131 2
a132 9
#ifdef __SPU_EDP__
  vec_ullong2 is0inf = spu_testsv(value_d, SPU_SV_NEG_ZERO     | SPU_SV_POS_ZERO |
                                           SPU_SV_NEG_INFINITY | SPU_SV_POS_INFINITY);
#else
  vec_double2 nzero = spu_splats(-0.0);
  vec_double2 xabs = spu_andc(value_d, nzero);
  vector unsigned char swap  = (vector unsigned char) {4,5,6,7, 0,1,2,3, 12,13,14,15, 8,9,10,11};
  vec_uint4 isinf  = spu_cmpeq((vec_uint4)xabs, (vec_uint4)expmask);
  vec_uint4 iszero = spu_cmpeq((vec_uint4)xabs, 0);
d135 27
a161 1
  vec_ullong2 is0inf = (vec_ullong2)spu_or(isinf, iszero);
a163 2
  x3 = spu_sel(x3, spu_xor(value_d, (vector double)expmask), is0inf);

@


1.2
log
@
2008-09-04  Ken Werner  <ken.werner@@de.ibm.com>

        * libm/machine/spu/headers/acoshf4.h: Rebase against current simdmath.
        * libm/machine/spu/headers/asinhd2.h: Likewise.
        * libm/machine/spu/headers/atanhd2.h: Likewise.
        * libm/machine/spu/headers/atanhf4.h: Likewise.
        * libm/machine/spu/headers/erff4.h: Likewise.
        * libm/machine/spu/headers/expd2.h: Likewise.
        * libm/machine/spu/headers/ldexpd2.h: Likewise.
        * libm/machine/spu/headers/lgammaf4.h: Likewise.
        * libm/machine/spu/headers/logbf4.h: Likewise.
        * libm/machine/spu/headers/nextafterd2.h: Likewise.
        * libm/machine/spu/headers/nextafterf4.h: Likewise.
        * libm/machine/spu/headers/recipd2.h: Likewise.
        * libm/machine/spu/headers/simdmath.h: Likewise.
        * libm/machine/spu/headers/acoshd2.: Likewise.
@
text
@d2 1
a2 1
/* (C)Copyright 2006,2007,                                         */
a24 12
/* Redistributions of source code must retain the above copyright  */
/* notice, this list of conditions and the following disclaimer.   */
/*                                                                 */
/* Redistributions in binary form must reproduce the above         */
/* copyright notice, this list of conditions and the following     */
/* disclaimer in the documentation and/or other materials          */
/* provided with the distribution.                                 */
/*                                                                 */
/* Neither the name of IBM Corporation nor the names of its        */
/* contributors may be used to endorse or promote products         */
/* derived from this software without specific prior written       */
/* permission.                                                     */
@


1.1
log
@
2007-09-28  Patrick Mansfield  <patmans@@us.ibm.com>

	* libm/machine/spu/Makefile.am: Add new C files.
	* libm/machine/spu/Makefile.in: Regenerate.
	* libm/machine/spu/headers/acos.h: New file.
	* libm/machine/spu/headers/acosd2.h: Ditto.
	* libm/machine/spu/headers/acosf.h: Ditto.
	* libm/machine/spu/headers/acosf4.h: Ditto.
	* libm/machine/spu/headers/acosh.h: Ditto.
	* libm/machine/spu/headers/acoshd2.h: Ditto.
	* libm/machine/spu/headers/acoshf.h: Ditto.
	* libm/machine/spu/headers/acoshf4.h: Ditto.
	* libm/machine/spu/headers/asin.h: Ditto.
	* libm/machine/spu/headers/asind2.h: Ditto.
	* libm/machine/spu/headers/asinf.h: Ditto.
	* libm/machine/spu/headers/asinf4.h: Ditto.
	* libm/machine/spu/headers/asinh.h: Ditto.
	* libm/machine/spu/headers/asinhd2.h: Ditto.
	* libm/machine/spu/headers/asinhf.h: Ditto.
	* libm/machine/spu/headers/asinhf4.h: Ditto.
	* libm/machine/spu/headers/atan.h: Ditto.
	* libm/machine/spu/headers/atan2.h: Ditto.
	* libm/machine/spu/headers/atan2d2.h: Ditto.
	* libm/machine/spu/headers/atan2f.h: Ditto.
	* libm/machine/spu/headers/atan2f4.h: Ditto.
	* libm/machine/spu/headers/atand2.h: Ditto.
	* libm/machine/spu/headers/atanf4.h: Ditto.
	* libm/machine/spu/headers/atanh.h: Ditto.
	* libm/machine/spu/headers/atanhd2.h: Ditto.
	* libm/machine/spu/headers/atanhf.h: Ditto.
	* libm/machine/spu/headers/atanhf4.h: Ditto.
	* libm/machine/spu/headers/cos.h: Ditto.
	* libm/machine/spu/headers/cos_sin.h: Ditto.
	* libm/machine/spu/headers/cosd2.h: Ditto.
	* libm/machine/spu/headers/cosf.h: Ditto.
	* libm/machine/spu/headers/cosf4.h: Ditto.
	* libm/machine/spu/headers/cosh.h: Ditto.
	* libm/machine/spu/headers/coshd2.h: Ditto.
	* libm/machine/spu/headers/coshf.h: Ditto.
	* libm/machine/spu/headers/coshf4.h: Ditto.
	* libm/machine/spu/headers/divd2.h: Ditto.
	* libm/machine/spu/headers/divf4.h: Ditto.
	* libm/machine/spu/headers/erf.h: Ditto.
	* libm/machine/spu/headers/erf_utils.h: Ditto.
	* libm/machine/spu/headers/erfc.h: Ditto.
	* libm/machine/spu/headers/erfcd2.h: Ditto.
	* libm/machine/spu/headers/erfcf.h: Ditto.
	* libm/machine/spu/headers/erfcf4.h: Ditto.
	* libm/machine/spu/headers/erfd2.h: Ditto.
	* libm/machine/spu/headers/erff.h: Ditto.
	* libm/machine/spu/headers/erff4.h: Ditto.
	* libm/machine/spu/headers/exp.h: Ditto.
	* libm/machine/spu/headers/exp2.h: Ditto.
	* libm/machine/spu/headers/exp2d2.h: Ditto.
	* libm/machine/spu/headers/exp2f4.h: Ditto.
	* libm/machine/spu/headers/expd2.h: Ditto.
	* libm/machine/spu/headers/expf4.h: Ditto.
	* libm/machine/spu/headers/expm1.h: Ditto.
	* libm/machine/spu/headers/expm1d2.h: Ditto.
	* libm/machine/spu/headers/expm1f.h: Ditto.
	* libm/machine/spu/headers/expm1f4.h: Ditto.
	* libm/machine/spu/headers/floord2.h: Ditto.
	* libm/machine/spu/headers/floorf4.h: Ditto.
	* libm/machine/spu/headers/hypot.h: Ditto.
	* libm/machine/spu/headers/hypotd2.h: Ditto.
	* libm/machine/spu/headers/hypotf.h: Ditto.
	* libm/machine/spu/headers/hypotf4.h: Ditto.
	* libm/machine/spu/headers/isnan.h: Ditto.
	* libm/machine/spu/headers/isnand2.h: Ditto.
	* libm/machine/spu/headers/isnanf.h: Ditto.
	* libm/machine/spu/headers/isnanf4.h: Ditto.
	* libm/machine/spu/headers/ldexpd2.h: Ditto.
	* libm/machine/spu/headers/ldexpf4.h: Ditto.
	* libm/machine/spu/headers/lgamma.h: Ditto.
	* libm/machine/spu/headers/lgammad2.h: Ditto.
	* libm/machine/spu/headers/lgammaf.h: Ditto.
	* libm/machine/spu/headers/lgammaf4.h: Ditto.
	* libm/machine/spu/headers/log.h: Ditto.
	* libm/machine/spu/headers/log10.h: Ditto.
	* libm/machine/spu/headers/log10d2.h: Ditto.
	* libm/machine/spu/headers/log1p.h: Ditto.
	* libm/machine/spu/headers/log1pd2.h: Ditto.
	* libm/machine/spu/headers/log1pf.h: Ditto.
	* libm/machine/spu/headers/log1pf4.h: Ditto.
	* libm/machine/spu/headers/log2.h: Ditto.
	* libm/machine/spu/headers/log2d2.h: Ditto.
	* libm/machine/spu/headers/log2f4.h: Ditto.
	* libm/machine/spu/headers/logbf.h: Ditto.
	* libm/machine/spu/headers/logbf4.h: Ditto.
	* libm/machine/spu/headers/logd2.h: Ditto.
	* libm/machine/spu/headers/logf4.h: Ditto.
	* libm/machine/spu/headers/nearbyintf.h: Ditto.
	* libm/machine/spu/headers/nearbyintf4.h: Ditto.
	* libm/machine/spu/headers/nextafter.h: Ditto.
	* libm/machine/spu/headers/nextafterd2.h: Ditto.
	* libm/machine/spu/headers/nextafterf.h: Ditto.
	* libm/machine/spu/headers/nextafterf4.h: Ditto.
	* libm/machine/spu/headers/pow.h: Ditto.
	* libm/machine/spu/headers/powd2.h: Ditto.
	* libm/machine/spu/headers/powf.h: Ditto.
	* libm/machine/spu/headers/powf4.h: Ditto.
	* libm/machine/spu/headers/recipd2.h: Ditto.
	* libm/machine/spu/headers/recipf4.h: Ditto.
	* libm/machine/spu/headers/rintf.h: Ditto.
	* libm/machine/spu/headers/rintf4.h: Ditto.
	* libm/machine/spu/headers/scalbnf4.h: Ditto.
	* libm/machine/spu/headers/signbit.h: Ditto.
	* libm/machine/spu/headers/signbitd2.h: Ditto.
	* libm/machine/spu/headers/simdmath.h: Ditto.
	* libm/machine/spu/headers/sin.h: Ditto.
	* libm/machine/spu/headers/sincos.h: Ditto.
	* libm/machine/spu/headers/sincosd2.h: Ditto.
	* libm/machine/spu/headers/sincosf.h: Ditto.
	* libm/machine/spu/headers/sincosf4.h: Ditto.
	* libm/machine/spu/headers/sind2.h: Ditto.
	* libm/machine/spu/headers/sinf.h: Ditto.
	* libm/machine/spu/headers/sinf4.h: Ditto.
	* libm/machine/spu/headers/sinh.h: Ditto.
	* libm/machine/spu/headers/sinhd2.h: Ditto.
	* libm/machine/spu/headers/sinhf.h: Ditto.
	* libm/machine/spu/headers/sinhf4.h: Ditto.
	* libm/machine/spu/headers/sqrtd2.h: Ditto.
	* libm/machine/spu/headers/sqrtf.h: Ditto.
	* libm/machine/spu/headers/sqrtf4.h: Ditto.
	* libm/machine/spu/headers/tan.h: Ditto.
	* libm/machine/spu/headers/tand2.h: Ditto.
	* libm/machine/spu/headers/tanf.h: Ditto.
	* libm/machine/spu/headers/tanf4.h: Ditto.
	* libm/machine/spu/headers/tanh.h: Ditto.
	* libm/machine/spu/headers/tanhd2.h: Ditto.
	* libm/machine/spu/headers/tanhf.h: Ditto.
	* libm/machine/spu/headers/tanhf4.h: Ditto.
	* libm/machine/spu/headers/tgamma.h: Ditto.
	* libm/machine/spu/headers/tgammad2.h: Ditto.
	* libm/machine/spu/headers/tgammaf.h: Ditto.
	* libm/machine/spu/headers/tgammaf4.h: Ditto.
	* libm/machine/spu/headers/truncd2.h: Ditto.
	* libm/machine/spu/headers/truncf4.h: Ditto.
	* libm/machine/spu/log2.c: Ditto.
	* libm/machine/spu/s_asinh.c: Ditto.
	* libm/machine/spu/s_atan.c: Ditto.
	* libm/machine/spu/s_cos.c: Ditto.
	* libm/machine/spu/s_erf.c: Ditto.
	* libm/machine/spu/s_expm1.c: Ditto.
	* libm/machine/spu/s_isnan.c: Ditto.
	* libm/machine/spu/s_log1p.c: Ditto.
	* libm/machine/spu/s_nextafter.c: Ditto.
	* libm/machine/spu/s_sin.c: Ditto.
	* libm/machine/spu/s_tan.c: Ditto.
	* libm/machine/spu/s_tanh.c: Ditto.
	* libm/machine/spu/sf_asinh.c: Ditto.
	* libm/machine/spu/sf_cos.c: Ditto.
	* libm/machine/spu/sf_erf.c: Ditto.
	* libm/machine/spu/sf_expm1.c: Ditto.
	* libm/machine/spu/sf_log1p.c: Ditto.
	* libm/machine/spu/sf_logb.c: Ditto.
	* libm/machine/spu/sf_nearbyint.c: Ditto.
	* libm/machine/spu/sf_nextafter.c: Ditto.
	* libm/machine/spu/sf_rint.c: Ditto.
	* libm/machine/spu/sf_sin.c: Ditto.
	* libm/machine/spu/sf_tan.c: Ditto.
	* libm/machine/spu/sf_tanh.c: Ditto.
	* libm/machine/spu/w_acos.c: Ditto.
	* libm/machine/spu/w_acosh.c: Ditto.
	* libm/machine/spu/w_asin.c: Ditto.
	* libm/machine/spu/w_atan2.c: Ditto.
	* libm/machine/spu/w_atanh.c: Ditto.
	* libm/machine/spu/w_cosh.c: Ditto.
	* libm/machine/spu/w_exp.c: Ditto.
	* libm/machine/spu/w_exp2.c: Ditto.
	* libm/machine/spu/w_hypot.c: Ditto.
	* libm/machine/spu/w_lgamma.c: Ditto.
	* libm/machine/spu/w_log.c: Ditto.
	* libm/machine/spu/w_log10.c: Ditto.
	* libm/machine/spu/w_pow.c: Ditto.
	* libm/machine/spu/w_sincos.c: Ditto.
	* libm/machine/spu/w_sinh.c: Ditto.
	* libm/machine/spu/w_tgamma.c: Ditto.
	* libm/machine/spu/wf_acos.c: Ditto.
	* libm/machine/spu/wf_acosh.c: Ditto.
	* libm/machine/spu/wf_asin.c: Ditto.
	* libm/machine/spu/wf_atan2.c: Ditto.
	* libm/machine/spu/wf_atanh.c: Ditto.
	* libm/machine/spu/wf_cosh.c: Ditto.
	* libm/machine/spu/wf_hypot.c: Ditto.
	* libm/machine/spu/wf_lgamma.c: Ditto.
	* libm/machine/spu/wf_pow.c: Ditto.
	* libm/machine/spu/wf_sincos.c: Ditto.
	* libm/machine/spu/wf_sinh.c: Ditto.
	* libm/machine/spu/wf_sqrt.c: Ditto.
	* libm/machine/spu/wf_tgamma.c: Ditto.
@
text
@a82 1
  vector unsigned long long zero     = (vector unsigned long long) { 0x0000000000000000ULL, 0x0000000000000000ULL };
a83 1
  vector unsigned long long signmask = (vector unsigned long long) { 0x8000000000000000ULL, 0x8000000000000000ULL };
d95 1
d104 16
a119 4
  vec_double2 xabs = spu_andc(value_d, (vec_double2)signmask);
  vec_ullong2 zeroinf = spu_or(spu_cmpeq(xabs, (vec_double2)expmask),
                               spu_cmpeq(xabs, (vec_double2)zero));
  x3 = spu_sel(x3, spu_xor(value_d, (vector double)expmask), zeroinf);
@

