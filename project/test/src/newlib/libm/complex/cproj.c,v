head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	newlib-2_2_0:1.3.0.6
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_28-release:1.3
	newlib-2_1_0:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.4
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	newlib-2_0_0:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.2
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	newlib-1_20_0:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.2
	newlib-1_19_0:1.2;
locks; strict;
comment	@ * @;


1.3
date	2011.03.01.21.43.15;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.18.22.40.24;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.08.10.35.14;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2011-03-01  Aaron Landwehr <snaphat@@gmail.com>

        * libm/complex/cproj.c: Fix typo.
        * libm/complex/cprojf.c: Ditto.
@
text
@/*	$NetBSD: cproj.c,v 1.3 2010/09/20 17:51:38 christos Exp $	*/

/*-
 * Copyright (c) 2010 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * imported and modified include for newlib 2010/10/03 
 * Marco Atzeri <marco_atzeri@@yahoo.it>
 */

/*
FUNCTION
        <<cproj>>, <<cprojf>>--- Riemann sphere projection
 
INDEX
        cproj
INDEX
        cprojf

ANSI_SYNOPSIS
       #include <complex.h>
       double complex cproj(double complex <[z]>);
       float complex cprojf(float complex <[z]>);


DESCRIPTION
        These functions compute a projection of <[z]> onto the Riemann 
        sphere: <[z]> projects to <[z]> except that all complex infinities 
        (even those with one infinite part and one NaN part) project 
        to positive infinity on the real axis. If <[z]> has an infinite part,
        then <<cproj>>(<[z]>) is equivalent to

                 INFINITY + I * copysign(0.0, cimag(z))

        <<cprojf>> is identical to <<cproj>>, except that it performs
        its calculations on <<floats complex>>.

RETURNS
        The cproj functions return the value of the projection onto 
        the Riemann sphere.

PORTABILITY
        <<cproj>> and <<cprojf>> are ISO C99

QUICKREF
        <<cproj>> and <<cprojf>> are ISO C99

*/

#include <sys/cdefs.h>
/*__RCSID("$NetBSD: cproj.c,v 1.3 2010/09/20 17:51:38 christos Exp $"); */

#include <complex.h>
#include <math.h>

#include "../common/fdlibm.h"

/*
 * cproj(double complex z)
 *
 * These functions return the value of the projection (not stereographic!)
 * onto the Riemann sphere.
 *
 * z projects to z, except that all complex infinities (even those with one
 * infinite part and one NaN part) project to positive infinity on the real axis.
 * If z has an infinite part, then cproj(z) shall be equivalent to:
 *
 * INFINITY + I * copysign(0.0, cimag(z))
 */
double complex
cproj(double complex z)
{
	double_complex w = { .z = z };

	if (isinf(creal(z)) || isinf(cimag(z))) {
#ifdef __INFINITY
		REAL_PART(w) = __INFINITY;
#else
		REAL_PART(w) = INFINITY;
#endif
		IMAG_PART(w) = copysign(0.0, cimag(z));
	}

	return (w.z);
}
@


1.2
log
@
2010-10-18  Marco Atzeri  <marco_atzeri@@yahoo.it>

        * libm/Makefile.am: added complex functions documentation
        * libm/libm.texinfo: ditto
        * libm/complex/Makefile.am: Ditto
        * libm/complex/complex.tex: Ditto
        * libm/complex/(cabs.c, cacos.c, cacosh.c, carg.c,
        casin.c, casinh.c, catan.c, catanh.c, ccos.c, ccosh.c,
        cexp.c, cimag.c, clog.c, conj.c, cpow.c, cproj.c, creal.c,
        csin.c, csinh.c, csqrt.c, ctan.c, ctanh.c): Ditto
        * libm/Makefile.in: Regenerate
        * libm/complex/Makefile.in: Ditto
@
text
@d96 1
a96 1
	if (isinf(creal(z) || isinf(cimag(z)))) {
@


1.1
log
@	* libc/include/complex.h: New complex header.
	* libm/common/fdlibm.h: Added ifdef _COMPLEX_H.
	* libm/complex/*: New complex functions imported from NetBSD.
	* libm/Makefile.am: Added complex subdir.
	* libm/Makefile.in: Regenerate.
	* libm/configure.in: Added complex subdir.
	* libm/configure: Regenerate.
@
text
@d32 39
@

