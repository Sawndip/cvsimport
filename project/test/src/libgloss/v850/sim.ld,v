head	1.2;
access;
symbols
	newlib-2_2_0:1.1.0.2
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.03.05.11.26.59;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.23.17.52.37;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* v850/sim.ld: Add a .note.renesas section.
@
text
@/* Default linker script, for normal executables */
OUTPUT_FORMAT("elf32-v850", "elf32-v850",
	      "elf32-v850")
OUTPUT_ARCH(v850)
ENTRY(_start)
GROUP(-lc -lsim -lgcc)
SEARCH_DIR(.);
EXTERN(__ctbp __ep __gp);
SECTIONS
{
  /* This saves a little space in the ELF file, since the zda starts
     at a higher location that the ELF headers take up.  */
  .zdata 0x160 :
  {
	*(.zdata)
	*(.zbss)
	*(reszdata)
	*(.zcommon)
  }
  /* This is the read only part of the zero data area.
     Having it as a seperate section prevents its
     attributes from being inherited by the zdata
     section.  Specifically it prevents the zdata
     section from being marked READONLY.  */
  .rozdata ALIGN (4) :
  {
	*(.rozdata)
	*(romzdata)
	*(romzbss)
  }
  /* Read-only sections, merged into text segment.  */
  . = 0x100000;
  .interp	: { *(.interp) }
  .hash		: { *(.hash) }
  .dynsym	: { *(.dynsym) }
  .dynstr	: { *(.dynstr) }
  .rel.text	: { *(.rel.text) }
  .rela.text	: { *(.rela.text) }
  .rel.data	: { *(.rel.data) }
  .rela.data	: { *(.rela.data) }
  .rel.rodata	: { *(.rel.rodata) }
  .rela.rodata	: { *(.rela.rodata) }
  .rel.gcc_except_table : { *(.rel.gcc_except_table) }
  .rela.gcc_except_table : { *(.rela.gcc_except_table) }
  .rel.got	: { *(.rel.got) }
  .rela.got	: { *(.rela.got) }
  .rel.ctors	: { *(.rel.ctors) }
  .rela.ctors	: { *(.rela.ctors) }
  .rel.dtors	: { *(.rel.dtors) }
  .rela.dtors	: { *(.rela.dtors) }
  .rel.init	: { *(.rel.init) }
  .rela.init	: { *(.rela.init) }
  .rel.fini	: { *(.rel.fini) }
  .rela.fini	: { *(.rela.fini) }
  .rel.bss	: { *(.rel.bss) }
  .rela.bss	: { *(.rela.bss) }
  .rel.plt	: { *(.rel.plt) }
  .rela.plt	: { *(.rela.plt) }
  .init		: { KEEP (*(.init)) } =0
  .plt		: { *(.plt) }
  .text		:
  {
    *(.text)
    *(.text.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.gnu.linkonce.t*)
  } =0
  _etext = .;
  PROVIDE (etext = .);
   /* This is special code area at the end of the normal text section.
      It contains a small lookup table at the start followed by the
      code pointed to by entries in the lookup table.  */
  .call_table_data ALIGN (4) :
  {
    PROVIDE(__ctbp = .);
    *(.call_table_data)
  } = 0xff   /* Fill gaps with 0xff.  */
  .call_table_text :
  {
    *(.call_table_text)
  }
  .fini		: { KEEP (*(.fini)) } =0
  .rodata	: { *(.rodata) *(.rodata.*) *(.gnu.linkonce.r*) }
  .rodata1	: { *(.rodata1) }
  .data		:
  {
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d*)
    CONSTRUCTORS
  }
  .data1	: { *(.data1) }
  .ctors	:
  {
    ___ctors = .;
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*crtend(.ctors))
    ___ctors_end = .;
  }
  .dtors	:
  {
    ___dtors = .;
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*crtend.o(.dtors))
    ___dtors_end = .;
  }
  .jcr		:
  {
    KEEP (*(.jcr))
  }
  .gcc_except_table : { *(.gcc_except_table) }
  .got		: { *(.got.plt) *(.got) }
  .dynamic	: { *(.dynamic) }
  .tdata ALIGN (4) :
  {
	PROVIDE (__ep = .);
	*(.tbyte)
	*(.tcommon_byte)
	*(.tdata)
	*(.tbss)
	*(.tcommon)
  }
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata ALIGN (4) :
  {
	PROVIDE (__gp = . + 0x8000);
	*(.sdata)
   }
  /* See comment about .rozdata. */
  .rosdata ALIGN (4) :
  {
	*(.rosdata)
  }
  /* We place the .sbss data section AFTER the .rosdata section, so that
     it can directly preceed the .bss section.  This allows runtime startup
     code to initialise all the zero-data sections by simply taking the
     value of '_edata' and zeroing until it reaches '_end'.  */
  .sbss :
  {
	__sbss_start = .;
	*(.sbss)
	*(.scommon)
  }
  _edata  = DEFINED (__sbss_start) ? __sbss_start : . ;
  PROVIDE (edata = _edata);
  .bss       :
  {
	__bss_start = DEFINED (__sbss_start) ? __sbss_start : . ;
	__real_bss_start = . ;
	*(.dynbss)
	*(.bss)
	*(COMMON)
  }
  _end = . ;
  PROVIDE (end = .);

  .note.renesas 0 : { KEEP(*(.note.renesas)) }  

  /* Stabs debugging sections.  */
  .stab 0		: { *(.stab) }
  .stabstr 0		: { *(.stabstr) }
  .stab.excl 0		: { *(.stab.excl) }
  .stab.exclstr 0	: { *(.stab.exclstr) }
  .stab.index 0		: { *(.stab.index) }
  .stab.indexstr 0	: { *(.stab.indexstr) }
  .comment 0		: { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0	: { *(.debug) }
  .line           0	: { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0	: { *(.debug_srcinfo) }
  .debug_sfnames  0	: { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0	: { *(.debug_aranges) }
  .debug_pubnames 0	: { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0	: { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0	: { *(.debug_abbrev) }
  .debug_line     0	: { *(.debug_line) }
  .debug_frame    0	: { *(.debug_frame) }
  .debug_str      0	: { *(.debug_str) }
  .debug_loc      0	: { *(.debug_loc) }
  .debug_macinfo  0	: { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions.  */
  .debug_weaknames 0	: { *(.debug_weaknames) }
  .debug_funcnames 0	: { *(.debug_funcnames) }
  .debug_typenames 0	: { *(.debug_typenames) }
  .debug_varnames  0	: { *(.debug_varnames) }
  /* User stack.  */
  .stack 0x200000	:
  {
	__stack = .;
	*(.stack)
  }
}

@


1.1
log
@
2010-07-23  Naveen.H.S  <naveenh1@@kpitcummins.com>
            Gina Verlekar <gina.verlekar@@kpitcummins.com>

        Moving files from libc/sys/sysnecv850 to libgloss/v850

        * libgloss/libnosys/configure: Regenerated.
        * libgloss/libnosys/configure.in: Compact v850 support to v850*-*-*.
        * libgloss/libnosys/configure: Regenerated.
        * libgloss/configure.in: Add libgloss support for v850.
        * libgloss/configure: Regenerated.
        * libgloss/v850/access.c: New file.
        * libgloss/v850/aclocal.m4: New.
        * libgloss/v850/chmod.c: New.
        * libgloss/v850/chown.c: New.
        * libgloss/v850/close.c: New.
        * libgloss/v850/configure: New.
        * libgloss/v850/configure.in: New.
        * libgloss/v850/crt0.S: New.
        * libgloss/v850/crt1.c: New.
        * libgloss/v850/execv.c: New.
        * libgloss/v850/execve.c: New.
        * libgloss/v850/_exit.c: New.
        * libgloss/v850/fork.c: New.
        * libgloss/v850/fstat.c: New.
        * libgloss/v850/getpid.c: New.
        * libgloss/v850/gettime.c: New.
        * libgloss/v850/isatty.c: New.
        * libgloss/v850/kill.c: New.
        * libgloss/v850/link.c: New.
        * libgloss/v850/lseek.c: New.
        * libgloss/v850/Makefile.in: New.
        * libgloss/v850/open.c: New.
        * libgloss/v850/pipe.c: New.
        * libgloss/v850/read.c: New.
        * libgloss/v850/sbrk.c: New.
        * libgloss/v850/sim.ld: New.
        * libgloss/v850/stat.c: New.
        * libgloss/v850/time.c: New.
        * libgloss/v850/times.c: New.
        * libgloss/v850/trap.S: New.
        * libgloss/v850/unlink.c: New.
        * libgloss/v850/utime.c: New.
        * libgloss/v850/wait.c: New.
        * libgloss/v850/write.c: New.
@
text
@d161 3
@

