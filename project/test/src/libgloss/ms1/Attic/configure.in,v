head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.12.12.11.16.41;	author nathan;	state dead;
branches;
next	1.1;

1.1
date	2005.07.06.12.58.12;	author aldyh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Rename ms1 files to mt files (part 1 -- renames only)
@
text
@dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.5)dnl
AC_INIT(crt0.S)

if test "${enable_shared}" = "yes" ; then
    echo "Shared libraries not supported for cross compiling, ignored"
fi

if test "$srcdir" = "." ; then
  if test "${with_target_subdir}" != "." ; then
    libgloss_topdir="${srcdir}/${with_multisrctop}../../.."
  else
    libgloss_topdir="${srcdir}/${with_multisrctop}../.."
  fi
else
  libgloss_topdir="${srcdir}/../.."
fi
AC_CONFIG_AUX_DIR($libgloss_topdir)

AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM

AC_PROG_INSTALL

# FIXME: We temporarily define our own version of AC_PROG_CC.  This is
# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We
# are probably using a cross compiler, which will not be able to fully
# link an executable.  This should really be fixed in autoconf
# itself.

AC_DEFUN(LIB_AC_PROG_CC,
[AC_BEFORE([$0], [AC_PROG_CPP])dnl
AC_CHECK_PROG(CC, gcc, gcc)
if test -z "$CC"; then
  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)
  test -z "$CC" && AC_MSG_ERROR([no acceptable cc found in \$PATH])
fi

AC_PROG_CC_GNU

if test $ac_cv_prog_gcc = yes; then
  GCC=yes
dnl Check whether -g works, even if CFLAGS is set, in case the package
dnl plays around with CFLAGS (such as to build both debugging and
dnl normal versions of a library), tasteless as that idea is.
  ac_test_CFLAGS="${CFLAGS+set}"
  ac_save_CFLAGS="$CFLAGS"
  CFLAGS=
  AC_PROG_CC_G
  if test "$ac_test_CFLAGS" = set; then
    CFLAGS="$ac_save_CFLAGS"
  elif test $ac_cv_prog_cc_g = yes; then
    CFLAGS="-g -O2"
  else
    CFLAGS="-O2"
  fi
else
  GCC=
  test "${CFLAGS+set}" = set || CFLAGS="-g"
fi
])

LIB_AC_PROG_CC

AS=${AS-as}
AC_SUBST(AS)
AR=${AR-ar}
AC_SUBST(AR)
LD=${LD-ld}
AC_SUBST(LD)
AC_PROG_RANLIB

host_makefile_frag=${srcdir}/../config/default.mh

dnl We have to assign the same value to other variables because autoconf
dnl doesn't provide a mechanism to substitute a replacement keyword with
dnl arbitrary data or pathnames.
dnl
host_makefile_frag_path=$host_makefile_frag
AC_SUBST(host_makefile_frag_path)
AC_SUBST_FILE(host_makefile_frag)

AC_OUTPUT(Makefile,
. ${libgloss_topdir}/config-ml.in,
srcdir=${srcdir}
target=${target}
ac_configure_args="${ac_configure_args} --enable-multilib"
CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}
libgloss_topdir=${libgloss_topdir}
)
@


1.1
log
@	* configure.in: Add ms1 case.
	* configure: Regenerate.
	* ms1/16-002.ld: New.
	* ms1/16-003.ld: New.
	* ms1/64-001.ld: New.
	* ms1/access.c: New.
	* ms1/chmod.c: New.
	* ms1/close.c: New.
	* ms1/configure: New.
	* ms1/configure.in: New.
	* ms1/crt0-16-002.S: New.
	* ms1/crt0-16-003.S: New.
	* ms1/crt0-64-001.S: New.
	* ms1/crt0.S: New.
	* ms1/exit-16-002.c: New.
	* ms1/exit-16-003.c: New.
	* ms1/exit-64-001.c: New.
	* ms1/exit.c: New.
	* ms1/fstat.c: New.
	* ms1/getpid.c: New.
	* ms1/gettime.c: New.
	* ms1/isatty.c: New.
	* ms1/kill.c: New.
	* ms1/lseek.c: New.
	* ms1/Makefile.in: New.
	* ms1/open.c: New.
	* ms1/read.c: New.
	* ms1/sbrk.c: New.
	* ms1/startup-16-002.S: New.
	* ms1/startup-16-003.S: New.
	* ms1/startup-64-001.S: New.
	* ms1/stat.c: New.
	* ms1/time.c: New.
	* ms1/times.c: New.
	* ms1/trap.h: New.
	* ms1/trap.S: New.
	* ms1/unlink.c: New.
	* ms1/utime.c: New.
	* ms1/write.c: New.
@
text
@@

