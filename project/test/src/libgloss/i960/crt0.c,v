head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.1
log
@20000317 sourceware import
@
text
@extern int main(int argc, char **argv, char **envp);
extern int brk (void *value);

extern char bss_start;
extern char end;

char *__env[1] = {0};
char **environ = __env;

#define ENABLE_TRACE_MASK 1

__inline static void 
enable_tracing (void)
{
    register int mask = ENABLE_TRACE_MASK;
    __asm__ volatile ("modpc %0,%0,%0"
	              :
	              : "d" (mask));
}

#define STACK_ALIGN 64

__inline static void
set_stack (void* ptr)
{
    ptr = (void *)(((int)ptr + STACK_ALIGN - 1) & ~(STACK_ALIGN - 1));
    /* SP must be 64 bytes larger than FP at start.  */
    __asm__ volatile ("mov %0,sp"
	              :
	              : "d" (ptr+STACK_ALIGN));
    __asm__ volatile ("mov %0,fp"
	              :
	              : "d" (ptr));
}

__inline static void 
init_Cregs (void)
{
    /* set register values gcc like */
    register unsigned int mask0=0x3b001000;
    register unsigned int mask1=0x00009107;
    __asm__ volatile ("mov   %0,g14"
                      :                      /* no output */
                      : "I" (0));            /* gnu structure pointer */
    __asm__ volatile ("modac %1,%0,%0"
                      :                      /* no output */
                      : "d" (mask0),
                        "d" (mask1));        /* fpu control kb */
}

void
_start(void)
{
  char *p;

  enable_tracing ();
  set_stack (&end);
  init_Cregs ();
  /* The stack grows upwards, so this makes the heap start after a 256K
     stack area.  PlumHall known to fail with less than 73K of stack.  */
  brk (&end+0x40000);
  /* clear bss */
  memset (&bss_start, 0, &end - &bss_start);
  main(0, 0, 0);
  exit(0);
}
@
