head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.2
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.12.15.22.58.40;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2011-12-15  Konrad Eisele <konrad@@gaisler.com>

        * configure.in: Add SPARC LEON support.
        * configure: Regenerated.
        * sparc_leon/asm-leon/amba.h, sparc_leon/asm-leon/asmmacro.h,
        sparc_leon/asm-leon/clock.h, sparc_leon/asm-leon/contextswitch.h,
        sparc_leon/asm-leon/elfmacro.h, sparc_leon/asm-leon/head.h,
        sparc_leon/asm-leon/irq.h, sparc_leon/asm-leon/jiffies.h,
        sparc_leon/asm-leon/lambapp.h, sparc_leon/asm-leon/lambapp_devs.h,
        sparc_leon/asm-leon/leon.h, sparc_leon/asm-leon/leon3.h,
        sparc_leon/asm-leon/leonbare_debug.h, sparc_leon/asm-leon/leonbare_kernel.h,
        sparc_leon/asm-leon/leonbare_kernel_queue.h, sparc_leon/asm-leon/leoncompat.h,
        sparc_leon/asm-leon/leondbg.h, sparc_leon/asm-leon/leonstack.h,
        sparc_leon/asm-leon/liblocks.h, sparc_leon/asm-leon/linkage.h,
        sparc_leon/asm-leon/param.h, sparc_leon/asm-leon/queue.h,
        sparc_leon/asm-leon/spinlock.h, sparc_leon/asm-leon/stack.h,
        sparc_leon/asm-leon/time.h, sparc_leon/asm-leon/timer.h,
        sparc_leon/asm-leon/types.h, sparc_leon/asm-leon/winmacros.h:
        New file.
        * sparc_leon/Makefile.in, sparc_leon/_exit.c,
        sparc_leon/amba.c, sparc_leon/amba_dbg.c,
        sparc_leon/amba_driver.c, sparc_leon/amba_scan.c,
        sparc_leon/asm-leon, sparc_leon/bdinit.S,
        sparc_leon/busscan.S, sparc_leon/cacheA.S,
        sparc_leon/catch_interrupt.c, sparc_leon/catch_interrupt_mvt.c,
        sparc_leon/catch_interrupt_pending.c, sparc_leon/catch_interrupt_svt.c,
        sparc_leon/configure.in,
        sparc_leon/console.c, sparc_leon/console_dbg.c,
        sparc_leon/console_init.c, sparc_leon/contextswitch.c,
        sparc_leon/contextswitch_asm.S, sparc_leon/crt0.S,
        sparc_leon/crti.S, sparc_leon/crtn.S,
        sparc_leon/etrap.S, sparc_leon/etrap_fast.S,
        sparc_leon/fpu.S, sparc_leon/gettimeofday.c,
        sparc_leon/initcalls.c, sparc_leon/io.c,
        sparc_leon/irqinstall.S, sparc_leon/irqtrap.S,
        sparc_leon/irqtrap_fast.S, sparc_leon/jiffies.c,
        sparc_leon/kernel.c, sparc_leon/kernel_context.S,
        sparc_leon/kernel_debug.c, sparc_leon/kernel_debug_var.c,
        sparc_leon/kernel_mm.c, sparc_leon/kernel_mutex.c,
        sparc_leon/kernel_queue.c, sparc_leon/kernel_sched.c,
        sparc_leon/kernel_thread.c, sparc_leon/lcpuinit.S,
        sparc_leon/locore.S, sparc_leon/locore_atexit.c,
        sparc_leon/locore_clean.S, sparc_leon/locore_mvt.S,
        sparc_leon/locore_mvt_reset.S, sparc_leon/locore_svt.S,
        sparc_leon/locore_svt_reset.S, sparc_leon/locore_svtdisp.S,
        sparc_leon/locore_var.S, sparc_leon/locore_var_svt.S,
        sparc_leon/mmu_asm.S, sparc_leon/mutex.c,
        sparc_leon/nocache.S, sparc_leon/pnpinit.c,
        sparc_leon/pnpinit_malloc.c, sparc_leon/pnpinit_simple.c,
        sparc_leon/regwin.S, sparc_leon/regwin_patch.c,
        sparc_leon/regwin_slow.S, sparc_leon/regwinflush.S,
        sparc_leon/rtc.c, sparc_leon/rtrap.S,
        sparc_leon/rtrap_fast.S, sparc_leon/stop.S,
        sparc_leon/timer.c, sparc_leon/times.c:
        New file
        * sparc_leon/configure: Regenerate
@
text
@/*
 * Copyright (c) 2011 Aeroflex Gaisler
 *
 * BSD license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#include <asm-leon/asmmacro.h>
#include <asm-leon/leonstack.h>
#include <asm-leon/winmacros.h>
#include <asm-leon/leon.h>
	
#ifndef _SOFT_FLOAT

  	.seg    "text"
	/* ------- */
  	.weak	_fpdis_enable_svt
	.set	_fpdis_enable_svt,__fpdis_enable_svt
  	.weak	_fpdis_enable
	.set	_fpdis_enable,__fpdis_enable
	/* ------- */
	!.global _fpdis_enable,_fpdis_enable_svt
__fpdis_enable_svt:
__fpdis_enable:

	set SPARC_PSR_EF_MASK,%l3
	or %l0,%l3,%l0
	or %l0,0xf00, %l3		! PIL up to 15, enable fpu
	wr %l3,0, %psr		        ! restore the condition flags, enable fpu
	nop
	nop
	nop
	
	mov	%psr, %l3		! check if fpu is present
	set SPARC_PSR_EF_MASK,%l4
	andcc	%l3, %l4, %l3
	bne	4f
	 nop
	
	 ta	0                       ! no fpu present, halt
	
4:
	set     fpustate_current,%l4
	
	ld [%l4],%l4
	set     fpustate_owner,%l5
	ld [%l5],%l5
	cmp	%l4,%l5
	beq	mpfnostore
	 nop
	cmp    %g0,%l5
	 beq	mpfstore
	nop

	FW_STORE(%l5)
	
mpfstore:	
	set     fpustate_owner,%l6
	st %l4,[%l6]
	cmp    %g0,%l4
	 beq	mpfnostore
	nop
	
	FW_LOAD(%l4)

mpfnostore:	
	wr	%l0,0, %psr		! restore the condition flags, enable fpu
	nop
	nop
	nop
	
	jmpl	%l1,  %g0
	rett	%l2
	
  	.seg    "data"

	.global fpustate_default
	.align	8
fpustate_default:
	.long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0;
	.long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0;
	.long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0;
	.long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0;
	.long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0; .long 0;
	.global fpustate_owner
fpustate_owner:
	.word	fpustate_default				! pointer to FPU owning context
	
 	.global fpustate_current	
fpustate_current:	
	.word	fpustate_default				! pointer to current threads FPU context
	        
#endif
@
