head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.2
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.12.15.22.58.40;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2011-12-15  Konrad Eisele <konrad@@gaisler.com>

        * configure.in: Add SPARC LEON support.
        * configure: Regenerated.
        * sparc_leon/asm-leon/amba.h, sparc_leon/asm-leon/asmmacro.h,
        sparc_leon/asm-leon/clock.h, sparc_leon/asm-leon/contextswitch.h,
        sparc_leon/asm-leon/elfmacro.h, sparc_leon/asm-leon/head.h,
        sparc_leon/asm-leon/irq.h, sparc_leon/asm-leon/jiffies.h,
        sparc_leon/asm-leon/lambapp.h, sparc_leon/asm-leon/lambapp_devs.h,
        sparc_leon/asm-leon/leon.h, sparc_leon/asm-leon/leon3.h,
        sparc_leon/asm-leon/leonbare_debug.h, sparc_leon/asm-leon/leonbare_kernel.h,
        sparc_leon/asm-leon/leonbare_kernel_queue.h, sparc_leon/asm-leon/leoncompat.h,
        sparc_leon/asm-leon/leondbg.h, sparc_leon/asm-leon/leonstack.h,
        sparc_leon/asm-leon/liblocks.h, sparc_leon/asm-leon/linkage.h,
        sparc_leon/asm-leon/param.h, sparc_leon/asm-leon/queue.h,
        sparc_leon/asm-leon/spinlock.h, sparc_leon/asm-leon/stack.h,
        sparc_leon/asm-leon/time.h, sparc_leon/asm-leon/timer.h,
        sparc_leon/asm-leon/types.h, sparc_leon/asm-leon/winmacros.h:
        New file.
        * sparc_leon/Makefile.in, sparc_leon/_exit.c,
        sparc_leon/amba.c, sparc_leon/amba_dbg.c,
        sparc_leon/amba_driver.c, sparc_leon/amba_scan.c,
        sparc_leon/asm-leon, sparc_leon/bdinit.S,
        sparc_leon/busscan.S, sparc_leon/cacheA.S,
        sparc_leon/catch_interrupt.c, sparc_leon/catch_interrupt_mvt.c,
        sparc_leon/catch_interrupt_pending.c, sparc_leon/catch_interrupt_svt.c,
        sparc_leon/configure.in,
        sparc_leon/console.c, sparc_leon/console_dbg.c,
        sparc_leon/console_init.c, sparc_leon/contextswitch.c,
        sparc_leon/contextswitch_asm.S, sparc_leon/crt0.S,
        sparc_leon/crti.S, sparc_leon/crtn.S,
        sparc_leon/etrap.S, sparc_leon/etrap_fast.S,
        sparc_leon/fpu.S, sparc_leon/gettimeofday.c,
        sparc_leon/initcalls.c, sparc_leon/io.c,
        sparc_leon/irqinstall.S, sparc_leon/irqtrap.S,
        sparc_leon/irqtrap_fast.S, sparc_leon/jiffies.c,
        sparc_leon/kernel.c, sparc_leon/kernel_context.S,
        sparc_leon/kernel_debug.c, sparc_leon/kernel_debug_var.c,
        sparc_leon/kernel_mm.c, sparc_leon/kernel_mutex.c,
        sparc_leon/kernel_queue.c, sparc_leon/kernel_sched.c,
        sparc_leon/kernel_thread.c, sparc_leon/lcpuinit.S,
        sparc_leon/locore.S, sparc_leon/locore_atexit.c,
        sparc_leon/locore_clean.S, sparc_leon/locore_mvt.S,
        sparc_leon/locore_mvt_reset.S, sparc_leon/locore_svt.S,
        sparc_leon/locore_svt_reset.S, sparc_leon/locore_svtdisp.S,
        sparc_leon/locore_var.S, sparc_leon/locore_var_svt.S,
        sparc_leon/mmu_asm.S, sparc_leon/mutex.c,
        sparc_leon/nocache.S, sparc_leon/pnpinit.c,
        sparc_leon/pnpinit_malloc.c, sparc_leon/pnpinit_simple.c,
        sparc_leon/regwin.S, sparc_leon/regwin_patch.c,
        sparc_leon/regwin_slow.S, sparc_leon/regwinflush.S,
        sparc_leon/rtc.c, sparc_leon/rtrap.S,
        sparc_leon/rtrap_fast.S, sparc_leon/stop.S,
        sparc_leon/timer.c, sparc_leon/times.c:
        New file
        * sparc_leon/configure: Regenerate
@
text
@/*
 * Copyright (c) 2011 Aeroflex Gaisler
 *
 * BSD license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#include <asm-leon/leonstack.h>
#include <asm-leon/asmmacro.h>
#include <asm-leon/winmacros.h>
#include <asm-leon/leon.h>

	/* l0: psr
	   l1: pc
	   l2: npc
	   l3: wim
	   l7: irqnr */	 
         
  	.seg    "text"

	/* ------- */
  	.weak	_leonbare_irq_entry_svt
	.set	_leonbare_irq_entry_svt,__leonbare_irq_entry_svt
  	.weak	leonbare_irq_entry
	.set	leonbare_irq_entry,_leonbare_irq_entry
	/* ------- */
        !.global leonbare_irq_entry,_leonbare_irq_entry_svt
        .global _irqtbl, _irqtrap, handler_irq, fpustate_current

#define FASTIRQ_ENABLE	
/*#define FASTIRQ_DYNAMIC*/	/* depend on FASTIRQ_ENABLE */
	
__leonbare_irq_entry_svt:	 /* irq from svt trap dispatcher */
	sub %l6,0x10, %l7 
	rd %wim, %l3
	
_leonbare_irq_entry:	

	SAVE_ALL_FAST(.L3)                        ! fast irq processing, volatile %g6, use frame 
	
.L3:
#ifdef __threadx__	
	set	_tx_thread_system_state, %o0
	ld      [%o0],%o1
	add	%o1,1,%o1
	st      %o1,[%o0]
#endif
	
	set     nestcount,%o0
	ld      [%o0],%o1
	add	%o1,1,%o1
	st      %o1,[%o0]
	
#ifdef CONFIG_LEONBARE_NONESTEDIRQ	
        or	%l0, SPARC_PSR_PIL_MASK, %o0       ! no nested irqs
	wr	%o0, SPARC_PSR_ET_MASK, %psr
	WRITE_PAUSE
#else
	sll     %l7,SPARC_PSR_PIL_SHIFT,%o1
	andn	%l0,SPARC_PSR_PIL_MASK,%o0
	or	%o0, %o1, %o1
	set     nestedirq,%o0
	ld      [%o0],%o0
        cmp     %g0,%o0                            ! no nested irqs?
	beq,a   .L1
        or	%o1, SPARC_PSR_PIL_MASK, %o1       
.L1:	
	wr	%o1, SPARC_PSR_ET_MASK, %psr
	WRITE_PAUSE
#endif
	
	mov	%l7, %o0                           ! irq level
        call	handler_irq                        ! void handler_irq (int irq, struct leonbare_pt_regs *pt_regs) 
#ifndef _SOFT_FLOAT
	 add	%sp, FW_REGS_SZ + 8 + SF_REGS_SZ , %o1	! pt_regs ptr
#else
	 add	%sp, SF_REGS_SZ , %o1		   ! pt_regs ptr
#endif
	
	or      %l0, SPARC_PSR_PIL_MASK, %o1
	wr	%o1, SPARC_PSR_ET_MASK, %psr	   ! enable nesting again, keep ET up
	WRITE_PAUSE

	set     nestcount,%o0
	ld      [%o0],%o1
	sub	%o1,1,%o1
	st      %o1,[%o0]
	
#ifdef __threadx__	
	set	_tx_thread_system_state, %o0
	ld      [%o0],%o1
	sub	%o1,1,%o1
	st      %o1,[%o0]
#endif
	
	RESTORE_ALL_FAST

        .seg    "data"
        .global nestedirq
	.align  4
nestedirq:
        .long   0
        .global fastirq
	.align  4
fastirq:
        .long   0
        .global nestcount
	.align  4
nestcount:
        .long   0
@
