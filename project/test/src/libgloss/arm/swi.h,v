head	1.4;
access;
symbols
	newlib-2_2_0:1.4.0.2
	newlib-2_1_0:1.4
	newlib-2_0_0:1.4
	newlib-1_20_0:1.4
	newlib-1_19_0:1.3
	newlib-1_18_0:1.3
	newlib-1_17_0-arc:1.3.0.4
	binutils-arc-20080908-branch:1.3.0.2
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2.2.1
	newlib-csl-sourcerygxx-4_1-32:1.2.2.1
	newlib-csl-innovasic-fido-3_4_4-33:1.2.2.1
	newlib-csl-coldfire-4_1-30:1.2.2.1
	newlib-csl-sourcerygxx-4_1-30:1.2.2.1
	newlib-csl-coldfire-4_1-28:1.2.2.1
	newlib-csl-sourcerygxx-4_1-28:1.2.2.1
	newlib-csl-arm-2006q3-27:1.2.2.1
	newlib-csl-sourcerygxx-4_1-27:1.2.2.1
	newlib-csl-arm-2006q3-26:1.2.2.1
	newlib-csl-sourcerygxx-4_1-26:1.2.2.1
	newlib-csl-sourcerygxx-4_1-24:1.2.2.1
	newlib-csl-sourcerygxx-4_1-23:1.2.2.1
	newlib-csl-sourcerygxx-4_1-21:1.2.2.1
	newlib-csl-arm-2006q3-21:1.2.2.1
	newlib-csl-arm-2006q3-19:1.2.2.1
	newlib-csl-sourcerygxx-4_1-19:1.2.2.1
	newlib-csl-sourcerygxx-4_1-18:1.2.2.1
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.07.13.15.06.21;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.25.23.05.24;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.07.18.46.23;	author jjohnstn;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.06.09.19.06.50;	author jjohnstn;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.01.15.28.54;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* arm/crt0.S: Support armv6-m processors in libgloss.
	* arm/swi.h: Likewise.
	* arm/trap.S: Likewise.
	* arm/redboot-crt0.S: Likewise.
	* arm/linux-crt0.c: Likewise.
	* arm/arm.h: New.
@
text
@#include "arm.h"

/* SWI numbers for RDP (Demon) monitor.  */
#define SWI_WriteC                 0x0
#define SWI_Write0                 0x2
#define SWI_ReadC                  0x4
#define SWI_CLI                    0x5
#define SWI_GetEnv                 0x10
#define SWI_Exit                   0x11
#define SWI_EnterOS                0x16

#define SWI_GetErrno               0x60
#define SWI_Clock                  0x61
#define SWI_Time                   0x63
#define SWI_Remove                 0x64
#define SWI_Rename                 0x65
#define SWI_Open                   0x66

#define SWI_Close                  0x68
#define SWI_Write                  0x69
#define SWI_Read                   0x6a
#define SWI_Seek                   0x6b
#define SWI_Flen                   0x6c

#define SWI_IsTTY                  0x6e
#define SWI_TmpNam                 0x6f
#define SWI_InstallHandler         0x70
#define SWI_GenerateError          0x71


/* Now the SWI numbers and reason codes for RDI (Angel) monitors.  */
#define AngelSWI_ARM 			0x123456
#ifdef __thumb__
#define AngelSWI 			0xAB
#else
#define AngelSWI 			AngelSWI_ARM
#endif
/* For thumb only architectures use the BKPT instruction instead of SWI.  */
#ifdef THUMB_V7M_V6M
#define AngelSWIInsn			"bkpt"
#define AngelSWIAsm			bkpt
#else
#define AngelSWIInsn			"swi"
#define AngelSWIAsm			swi
#endif

/* The reason codes:  */
#define AngelSWI_Reason_Open		0x01
#define AngelSWI_Reason_Close		0x02
#define AngelSWI_Reason_WriteC		0x03
#define AngelSWI_Reason_Write0		0x04
#define AngelSWI_Reason_Write		0x05
#define AngelSWI_Reason_Read		0x06
#define AngelSWI_Reason_ReadC		0x07
#define AngelSWI_Reason_IsTTY		0x09
#define AngelSWI_Reason_Seek		0x0A
#define AngelSWI_Reason_FLen		0x0C
#define AngelSWI_Reason_TmpNam		0x0D
#define AngelSWI_Reason_Remove		0x0E
#define AngelSWI_Reason_Rename		0x0F
#define AngelSWI_Reason_Clock		0x10
#define AngelSWI_Reason_Time		0x11
#define AngelSWI_Reason_System		0x12
#define AngelSWI_Reason_Errno		0x13
#define AngelSWI_Reason_GetCmdLine 	0x15
#define AngelSWI_Reason_HeapInfo 	0x16
#define AngelSWI_Reason_EnterSVC 	0x17
#define AngelSWI_Reason_ReportException 0x18
#define ADP_Stopped_ApplicationExit 	((2 << 16) + 38)
#define ADP_Stopped_RunTimeError 	((2 << 16) + 35)

#if defined(ARM_RDI_MONITOR) && !defined(__ASSEMBLER__)

static inline int
do_AngelSWI (int reason, void * arg)
{
  int value;
  asm volatile ("mov r0, %1; mov r1, %2; " AngelSWIInsn " %a3; mov %0, r0"
       : "=r" (value) /* Outputs */
       : "r" (reason), "r" (arg), "i" (AngelSWI) /* Inputs */
       : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
		/* Clobbers r0 and r1, and lr if in supervisor mode */);
                /* Accordingly to page 13-77 of ARM DUI 0040D other registers
                   can also be clobbered.  Some memory positions may also be
                   changed by a system call, so they should not be kept in
                   registers. Note: we are assuming the manual is right and
                   Angel is respecting the APCS.  */
  return value;
}

#endif
@


1.3
log
@	* arm/licfunc.c (do_AngelSWI): Remove.
	* arm/syscalls.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New.
@
text
@d1 2
d38 2
a39 2
/* For Thumb-2 code use the BKPT instruction instead of SWI.  */
#ifdef __thumb2__
@


1.2
log
@
2006-02-07  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Add Thumb-2 startup code.
        * arm/redboot-crt0.S: Ditto.
        * arm/libcfunc.c (do_AngelSWI): Use AngelSWIInsn.
        * arm/swi.h (AngelSWIInsn, AngelSWIAsm): Define.
        * arm/trap.S: Disable for Thumb-2.
@
text
@d69 21
@


1.2.2.1
log
@2006-09-01  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Include _exit.c in BSPs.  Add rdimon-ram.ld.
	Build linker scripts instead of spec files for rdimon and rdpmon.
	Pass CRT0 ad BSP to arm.sc.
	* arm/_exit.c: New file.
	* arm/arm.sc: Add STARTUP, GROUP and SEARCH_DIR.  Remove defaults
	for ROM and RAM.
	* arm/crt0.S: Give Thumb-2 symbols function type.
	Skip generic Arm init code for Thumb-2.
	Add _nmi_isr and _fault_isr.
	* arm/libcfunc.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New function.
	* arm/syscalls.c (do_AngelSWI): Remove.
	(_exit): Remove.
	(isatty): New function.
@
text
@a68 21

#if defined(ARM_RDI_MONITOR) && !defined(__ASSEMBLER__)

static inline int
do_AngelSWI (int reason, void * arg)
{
  int value;
  asm volatile ("mov r0, %1; mov r1, %2; " AngelSWIInsn " %a3; mov %0, r0"
       : "=r" (value) /* Outputs */
       : "r" (reason), "r" (arg), "i" (AngelSWI) /* Inputs */
       : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
		/* Clobbers r0 and r1, and lr if in supervisor mode */);
                /* Accordingly to page 13-77 of ARM DUI 0040D other registers
                   can also be clobbered.  Some memory positions may also be
                   changed by a system call, so they should not be kept in
                   registers. Note: we are assuming the manual is right and
                   Angel is respecting the APCS.  */
  return value;
}

#endif
@


1.1
log
@
2004-06-09  Toralf Lund  <toralf@@procaptura.com>

        * arm/crt0.S: Copied from newlib and it now also sets up stacks for
        FIQ and IRQ mode, plus calls hardware_init_hook() and
        software_init_hook() if present.
        * arm/libcfunc.c, arm/swi.h, arm/syscalls.c: Copied
        from newlib.
        * arm/Makefile.in: Build crt0.o, rdpmon-crt0.o, rdimon-crt0.o,
        librdpmon.a, librdimon.a - support file for "bare" setup, as well
        as "RDP" and "RDI" monitors.
        * arm/coff-rdpmon.specs, arm/elf-rdpmon.specs,
        arm/coff-rdimon.specs, arm/elf-rdimon.specs: gcc specs files to go
        with above mentioned support libs and startfiles.
@
text
@d36 8
@

