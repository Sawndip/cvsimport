head	1.13;
access;
symbols
	newlib-2_2_0:1.13.0.2
	newlib-2_1_0:1.12
	newlib-2_0_0:1.9
	newlib-1_20_0:1.9
	newlib-1_19_0:1.8
	newlib-1_18_0:1.8
	newlib-1_17_0-arc:1.8.0.4
	binutils-arc-20080908-branch:1.8.0.2
	binutils-arc-20080908-branchpoint:1.8
	newlib-1_17_0:1.8
	newlib-1_16_0:1.8
	newlib-1_15_0:1.7
	newlib-csl-coldfire-4_1-32:1.6.2.8
	newlib-csl-sourcerygxx-4_1-32:1.6.2.8
	newlib-csl-innovasic-fido-3_4_4-33:1.6.2.8
	newlib-csl-coldfire-4_1-30:1.6.2.8
	newlib-csl-sourcerygxx-4_1-30:1.6.2.8
	newlib-csl-coldfire-4_1-28:1.6.2.8
	newlib-csl-sourcerygxx-4_1-28:1.6.2.8
	newlib-csl-arm-2006q3-27:1.6.2.8
	newlib-csl-sourcerygxx-4_1-27:1.6.2.8
	newlib-csl-arm-2006q3-26:1.6.2.7
	newlib-csl-sourcerygxx-4_1-26:1.6.2.7
	newlib-csl-sourcerygxx-4_1-24:1.6.2.6
	newlib-csl-sourcerygxx-4_1-23:1.6.2.6
	newlib-csl-sourcerygxx-4_1-21:1.6.2.6
	newlib-csl-arm-2006q3-21:1.6.2.6
	newlib-csl-arm-2006q3-19:1.6.2.6
	newlib-csl-sourcerygxx-4_1-19:1.6.2.6
	newlib-csl-sourcerygxx-4_1-18:1.6.2.5
	newlib-csl-sourcerygxx-3_4_4-25:1.7
	newlib-csl-sourcerygxx-4_1-17:1.6.2.2
	newlib-csl-sourcerygxx-4_1-14:1.6.2.2
	newlib-csl-sourcerygxx-4_1-13:1.6.2.2
	newlib-csl-sourcerygxx-4_1-12:1.6.2.2
	newlib-csl-sourcerygxx-4_1-9:1.6.2.2
	newlib-csl-sourcerygxx-4_1-8:1.6.2.1
	newlib-csl-sourcerygxx-4_1-7:1.6.2.1
	newlib-csl-arm-2006q1-6:1.6.2.1
	newlib-csl-sourcerygxx-4_1-6:1.6.2.1
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.6
	newlib-csl-arm-2005-q1a:1.5
	newlib-1_13_0:1.5
	csl-arm-2004-q3:1.5
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.13
date	2014.08.14.15.00.31;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.18.09.53.45;	author mshawcroft;	state Exp;
branches;
next	1.11;

1.11
date	2013.09.27.15.40.38;	author mshawcroft;	state Exp;
branches;
next	1.10;

1.10
date	2013.09.20.14.23.41;	author rearnsha;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.29.15.32.09;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.03.16.55.25;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.30.17.40.47;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.13.00.01.40;	author jjohnstn;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2004.06.28.22.42.19;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.17.19.33.27;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.19.06.50;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.07.00.25.57;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.07.18.12.32;	author msalter;	state Exp;
branches;
next	;

1.6.2.1
date	2006.05.31.14.07.02;	author mmitchel;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2006.06.13.20.56.08;	author mmitchel;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2006.08.30.22.24.18;	author pbrook;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2006.09.01.15.28.54;	author pbrook;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2006.09.01.21.55.12;	author pbrook;	state Exp;
branches;
next	1.6.2.6;

1.6.2.6
date	2006.09.11.16.55.11;	author pbrook;	state Exp;
branches;
next	1.6.2.7;

1.6.2.7
date	2006.10.23.21.25.20;	author pbrook;	state Exp;
branches;
next	1.6.2.8;

1.6.2.8
date	2006.11.06.16.55.49;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* arm/elf-nano.specs: New file.
	* arm/elf-rdimon.specs: Support nano.specs.
	* arm/Makefile.in: Support nano.specs.
	* libnosys/nosys.specs: Support nano.specs.
@
text
@#
#
DESTDIR =
VPATH = @@srcdir@@ @@srcdir@@/..
srcdir = @@srcdir@@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

host_alias = @@host_alias@@
target_alias = @@target_alias@@

bindir = @@bindir@@
libdir = @@libdir@@
tooldir = $(exec_prefix)/$(target_alias)

objtype = @@objtype@@

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTISRCTOP =
MULTIBUILDTOP =
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

SHELL =	/bin/sh

CC = @@CC@@

AS = @@AS@@
AR = @@AR@@
LD = @@LD@@
RANLIB = @@RANLIB@@

SUBDIRS = @@subdirs@@

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

@@BUILD_CRT0_TRUE@@CRT0		= crt0.o
@@BUILD_CRT0_TRUE@@CRT0_INSTALL	= install-crt0
@@BUILD_CRT0_FALSE@@CRT0		=
@@BUILD_CRT0_FALSE@@CRT0_INSTALL	=

NANO_SCRIPTS=nano.specs
NANO_INSTALL=install-nano

LINUX_CRT0    = linux-crt0.o
LINUX_BSP     = libgloss-linux.a
LINUX_OBJS    = linux-syscalls0.o linux-syscalls1.o
LINUX_SCRIPTS = linux.specs
LINUX_INSTALL = install-linux

REDBOOT_CRT0	= redboot-crt0.o 
REDBOOT_OBJS	= redboot-syscalls.o
REDBOOT_SCRIPTS	= redboot.ld redboot.specs
REDBOOT_INSTALL	= install-redboot

RDPMON_CRT0	= rdpmon-crt0.o
RDPMON_BSP	= librdpmon.a
RDPMON_OBJS	= ftruncate.o libcfunc.o syscalls.o trap.o truncate.o _exit.o _kill.o
RDPMON_SCRIPTS	= rdpmon.specs
RDPMON_INSTALL	= install-rdpmon

RDIMON_CRT0	= rdimon-crt0.o
RDIMON_BSP	= librdimon.a
RDIMON_OBJS	= $(patsubst %,rdimon-%,$(RDPMON_OBJS))
RDIMON_SCRIPTS	= rdimon.specs aprofile-validation.specs aprofile-ve.specs
RDIMON_INSTALL	= install-rdimon

CFLAGS		= -g

# Here is all of the eval board stuff
PID_SCRIPTS	= pid.specs
PID_INSTALL	= install-pid

IQ80310_SCRIPTS	= iq80310.specs
IQ80310_INSTALL	= install-iq80310


# Host specific makefile fragment comes in here.
@@host_makefile_frag@@

#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
all: ${CRT0} ${LINUX_CRT0} ${LINUX_BSP} ${REDBOOT_CRT0} ${REDBOOT_OBJS} ${RDPMON_CRT0} ${RDPMON_BSP} ${RDIMON_CRT0} ${RDIMON_BSP}
	@@rootpre=`pwd`/; export rootpre; \
	srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
	for dir in .. ${SUBDIRS}; do \
	  if [ x$$dir != x.. ]; then \
	    if [ -d $$dir ]; then \
	      (cd $$dir; $(MAKE) $(FLAGS_TO_PASS)); \
	    else true; fi; \
	  else true; fi; \
	done

#
# here's where we build the test programs for each target
#
.PHONY: test
test:

#
crt0.o: crt0.S
redboot-crt0.o: redboot-crt0.S
redboot-syscalls.o: redboot-syscalls.c $(srcdir)/../syscall.h

rdpmon-crt0.o: crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDP_MONITOR -o $@@ -c $<

rdimon-crt0.o: crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-ftruncate.o: ftruncate.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-trap.o: trap.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-truncate.o: truncate.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-_exit.o: _exit.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-_kill.o: _kill.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-syscalls.o: syscalls.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

rdimon-libcfunc.o: libcfunc.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

$(LINUX_BSP): $(LINUX_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

$(RDPMON_BSP): $(RDPMON_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

$(RDIMON_BSP): $(RDIMON_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

clean mostlyclean:
	rm -f a.out core *.i *.o *-test *.srec *.dis *.x $(SIM_BSP) $(IQ80310_BSP)
	@@rootpre=`pwd`/; export rootpre; \
	srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
	for dir in .. ${SUBDIRS}; do \
	  if [ x$$dir != x.. ]; then \
	    if [ -d $$dir ]; then \
	      (cd $$dir; $(MAKE) $(FLAGS_TO_PASS) clean); \
	    else true; fi; \
	  else true; fi; \
	done

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status *~

.PHONY: install info install-info clean-info
install: ${CRT0_INSTALL} ${LINUX_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL} ${NANO_INSTALL}
	@@rootpre=`pwd`/; export rootpre; \
	srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
	for dir in .. ${SUBDIRS}; do \
	  if [ x$$dir != x.. ]; then \
	    if [ -d $$dir ]; then \
	      (cd $$dir; $(MAKE) $(FLAGS_TO_PASS) install); \
	    else true; fi; \
	  else true; fi; \
	done

install-nano:
	set -e; for x in ${NANO_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done

install-crt0:
	${INSTALL_DATA} ${CRT0} $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x

install-linux:
	set -e; for x in ${LINUX_CRT0} ${LINUX_BSP}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${LINUX_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done

install-redboot:
	set -e; for x in ${REDBOOT_CRT0} ${REDBOOT_OBJS}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${REDBOOT_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done

install-rdpmon:
	set -e; for x in ${RDPMON_CRT0} ${RDPMON_BSP}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${RDPMON_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done

install-rdimon:
	set -e; for x in ${RDIMON_CRT0} ${RDIMON_BSP}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${RDIMON_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done


install-pid:
	set -e; for x in ${PID_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done

install-iq80310:
	set -e; for x in ${IQ80310_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done


doc:
info:
install-info:
clean-info:

Makefile: Makefile.in config.status @@host_makefile_frag_path@@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
@


1.12
log
@[ARM] Provide ftruncate() and truncate() stubs.
@
text
@d55 5
a59 2
@@BUILD_CRT0_FALSE@@CRT0		= 
@@BUILD_CRT0_FALSE@@CRT0_INSTALL	= 
d178 1
a178 1
install: ${CRT0_INSTALL} ${LINUX_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL}
d189 3
@


1.11
log
@[ARM] Add SPECS file for ARM validation model.
@
text
@d71 1
a71 1
RDPMON_OBJS	= syscalls.o libcfunc.o trap.o _exit.o _kill.o
d126 3
d132 3
@


1.10
log
@2013-09-20  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	    Ramana Radhakrishnan  <ramana.radhakrishnan@@arm.com>
	    Greta Yorsh  <greta.yorsh@@arm.com>

	* arm/Makefile.in: Add support for cpu-init directory and add
	elf-aprofile-ve.specs.
	* arm/configure.in: Likewise.
	* arm/configure: Regenerate.
	* arm/cpu-init: New directory.
	* arm/cpu-init/Makefile.in: New file.
	* arm/cpu-init/rdimon-aem.S: Likewise.
	* arm/crt0.S: Call _rdimon_init_hook
	* arm/elf-aprofile-ve.specs: New file.
@
text
@d78 1
a78 1
RDIMON_SCRIPTS	= rdimon.specs aprofile-ve.specs
@


1.9
log
@
2011-06-29  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/Makefile.in: Add $CFLAGS to compile commands for specified .o targets.
@
text
@d44 2
d78 1
a78 1
RDIMON_SCRIPTS	= rdimon.specs
d99 9
d155 9
d170 9
@


1.8
log
@
2006-01-03  Kazu Hirata  <kazu@@codesourcery.com>

        * arm/Makefile (RDPMON_OBJS): Add _exit.o and _kill.o.
        (RDIMON_OBJS): Define in terms of RDPMON_OBJS.
        (rdimon-_exit.o, rdimon-_kill.o): New.
        * arm/_exit.c, arm/_kill.c: New.
        * arm/syscalls.c (_exit, _kill): Remove.
@
text
@d110 1
a110 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDP_MONITOR -o $@@ -c $<
d113 1
a113 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d116 1
a116 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d119 1
a119 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d122 1
a122 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d125 1
a125 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d128 1
a128 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
@


1.7
log
@
2006-05-30  Shaun Jackman  <sjackman@@gmail.com>

      * arm/Makefile.in: Add Linux syscall interface.
      * arm/linux-crt0.S: New file.
      * arm/linux-syscall.h: New file.
      * arm/linux-syscalls0.S: New file.
      * arm/linux-syscalls1.c: New file.
@
text
@d69 1
a69 1
RDPMON_OBJS	= syscalls.o libcfunc.o trap.o
d75 1
a75 1
RDIMON_OBJS	= rdimon-syscalls.o rdimon-libcfunc.o rdimon-trap.o
d118 6
@


1.6
log
@
2005-04-12  Shaun Jackman  <sjackman@@gmail.com>

        * libgloss/arm/Makefile.in (RDPMON_BSP): librdpmon.a was empty due
        to a typo. Fixed.
        (RDIMON_BSP): Ditto.
@
text
@d56 6
d96 1
a96 1
all: ${CRT0} ${REDBOOT_CRT0} ${REDBOOT_OBJS} ${RDPMON_CRT0} ${RDPMON_BSP} ${RDIMON_CRT0} ${RDIMON_BSP}
d124 4
d143 1
a143 1
install: ${CRT0_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL}
d148 4
@


1.6.2.1
log
@	* libgloss/arm/Makefile.in (LMS_SCRIPTS): New variable.
	(LMS_INSTALL): Likewise.
	(install): Depend on LMS_INSTALL.
	(install-lms): New target.
	* libgloss/arm/elf-cm3.lmd: New file.
	* libgloss/arm/elf-lm3s10x.ld: Likewise.
@
text
@a72 3
LMS_SCRIPTS     = cm3.ld lm3s10x.ld
LMS_INSTALL     = install-lms

d133 1
a133 1
install: ${CRT0_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL} ${LMS_INSTALL}
a156 2
install-lms:
	set -e; for x in ${LMS_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)/${tooldir}/lib${MULTISUBDIR}/$$x; done
@


1.6.2.2
log
@	Issue #733
	libgloss/
	* arm/Makefile.in (LMS_SCRIPTS): Add lm3s301.ld and lm3s31x.ld.
@
text
@d73 1
a73 1
LMS_SCRIPTS     = cm3.ld lm3s10x.ld lm3s301.ld lm3s31x.ld
@


1.6.2.3
log
@2006-08-30  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Change armv7m linker script generation.  Add
	armv7m.spec.  Build armv7m-crt0.o.
	* arm/arm.sc: New file.
	* arm/armv7m.specs: New file.
	* arm/crt0.S: Add armv7m code.
	* arm/elf-lm3s10x.ld: Remove.
	* arm/elf-lm3s301.ld: Remove.
	* arm/elf-lm3s31x.ld: Remove.
	* arm/swi.h (do_AngelSWI): Add definition.
	* arm/syscalls.c: Merge lazy semihosting initialization from newlib.

	newlib/
	* libc/sys/arm/crt0.S: Add armv7m rom startup code.
@
text
@d73 3
a84 5
ARMV7M_OBJS	= armv7m-crt0.o \
		  armv7m-rom.ld lm3s10x-rom.ld lm3s301-rom.ld lm3s31x-rom.ld \
		  armv7m-ram.ld lm3s10x-ram.ld lm3s301-ram.ld lm3s31x-ram.ld
ARMV7M_SPECS	= armv7m.specs
ARMV7M_INSTALL	= install-armv7m
d93 1
a93 1
all: ${CRT0} ${REDBOOT_CRT0} ${REDBOOT_OBJS} ${RDPMON_CRT0} ${RDPMON_BSP} ${RDIMON_CRT0} ${RDIMON_BSP} ${ARMV7M_OBJS}
a102 3
armv7m-crt0.o: crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -D_ARM_V7M -o $@@ -c $<

a128 15
# Armv7M board files.
#        ram rom stack
armv7m=  32M 32M no
lm3s10x=  2k  8k yes
lm3s301=  2k 16k yes
lm3s31x=  4k 16k yes

%-ram.ld : arm.sc Makefile
	RAM_SIZE=$(word 1,$($*)) \
	  ${SHELL} $< $(word 3,$($*)) >$@@
%-rom.ld : arm.sc Makefile
	RAM_SIZE=$(word 1,$($*)) \
	  ROM_SIZE=$(word 2,$($*)) \
	  ${SHELL} $< $(word 3,$($*)) >$@@

d136 1
a136 1
install: ${CRT0_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL} ${ARMV7M_INSTALL}
d160 2
a161 3
install-armv7m:
	set -e; for x in ${ARMV7M_OBJS}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${ARMV7M_SPECS}; do ${INSTALL_DATA} ${srcdir}/$$x $(DESTDIR)/${tooldir}/lib${MULTISUBDIR}/$$x; done
@


1.6.2.4
log
@2006-09-01  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Include _exit.c in BSPs.  Add rdimon-ram.ld.
	Build linker scripts instead of spec files for rdimon and rdpmon.
	Pass CRT0 ad BSP to arm.sc.
	* arm/_exit.c: New file.
	* arm/arm.sc: Add STARTUP, GROUP and SEARCH_DIR.  Remove defaults
	for ROM and RAM.
	* arm/crt0.S: Give Thumb-2 symbols function type.
	Skip generic Arm init code for Thumb-2.
	Add _nmi_isr and _fault_isr.
	* arm/libcfunc.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New function.
	* arm/syscalls.c (do_AngelSWI): Remove.
	(_exit): Remove.
	(isatty): New function.
@
text
@d61 1
a61 1
RDPMON_CRT0	= rdpmon-crt0.o rdpmon-ram.ld
d63 2
a64 1
RDPMON_OBJS	= syscalls.o libcfunc.o trap.o _exit.o
d67 1
a67 1
RDIMON_CRT0	= rdimon-crt0.o rdimon-ram.ld
d69 2
a70 2
RDIMON_OBJS	= rdimon-syscalls.o rdimon-libcfunc.o rdimon-trap.o \
		  rdimon-_exit.o
d82 1
a82 1
ARMV7M_OBJS	= armv7m-crt0.o rdimon-ram.ld \
a119 3
rdimon-_exit.o: _exit.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<

d135 5
a139 8
#        ram           rom             stack crt0          bsp
#        position size position   size
rdimon=  0      4096M           0   0   no   rdimon-crt0.o -lrdimon
rdpmon=  0      4096M           0   0   no   rdpmon-crt0.o -lrdpmon
armv7m=  0        32M  0x20000000 32M   no   armv7m-crt0.o -lrdimon
lm3s10x= 0         2k  0x20000000  8k  yes   armv7m-crt0.o -lrdimon
lm3s301= 0         2k  0x20000000 16k  yes   armv7m-crt0.o -lrdimon
lm3s31x= 0         4k  0x20000000 16k  yes   armv7m-crt0.o -lrdimon
d142 2
a143 3
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  CRT0=$(word 6,$($*)) BSP=$(word 7,$($*)) \
	  ${SHELL} $< $(word 5,$($*)) >$@@
d145 3
a147 4
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ROM=$(word 3,$($*)) ROM_SIZE=$(word 4,$($*)) \
	  CRT0=$(word 6,$($*)) BSP=$(word 7,$($*)) \
	  ${SHELL} $< $(word 5,$($*)) >$@@
d167 1
d171 1
@


1.6.2.5
log
@2006-09-01  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Reduce rdi/rdp ram size to avoid overflow.
@
text
@d139 2
a140 2
rdimon=  0      4095M           0   0   no   rdimon-crt0.o -lrdimon
rdpmon=  0      4095M           0   0   no   rdpmon-crt0.o -lrdpmon
@


1.6.2.6
log
@2006-09-11  Daniel Jacobowitz  <dan@@codesourcery.com>

	libgloss/
	* arm/Makefile.in (armv7m, lm3s10x, lm3s301, lm3s31x): Swap
	RAM and ROM.
	(rdimon, rdpmon): Skip 8k.
@
text
@d136 9
a144 12
# Default and armv7M board files.
# For RAM configurations which start at zero, skip 8k.  This prevents
# the simulator from getting confused about whether we have our own
# SWI vectors.
#        ram            rom             stack crt0          bsp
#        position  size position  size
rdimon=  0x8000   4095M        0     0   no   rdimon-crt0.o -lrdimon
rdpmon=  0x8000   4095M        0     0   no   rdpmon-crt0.o -lrdpmon
armv7m=  0x20000000 32M        0   32M   no   armv7m-crt0.o -lrdimon
lm3s10x= 0x20000000  2k        0    8k  yes   armv7m-crt0.o -lrdimon
lm3s301= 0x20000000  2k        0   16k  yes   armv7m-crt0.o -lrdimon
lm3s31x= 0x20000000  4k        0   16k  yes   armv7m-crt0.o -lrdimon
@


1.6.2.7
log
@2006-10-23  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in (ARMV7M_OBJS): Add lm3s6xx-rom.ld, lm3s8xx-rom.ld,
	lm3s6xx-ram.ld and lm3s8xx-ram.ld
	(lm3s6xx, lm3s8xx): Define.
@
text
@d83 1
a83 3
		  lm3s6xx-rom.ld lm3s8xx-rom.ld \
		  armv7m-ram.ld lm3s10x-ram.ld lm3s301-ram.ld lm3s31x-ram.ld \
		  lm3s6xx-ram.ld lm3s8xx-ram.ld
a147 2
lm3s6xx= 0x20000000  8k        0   32k  yes   armv7m-crt0.o -lrdimon
lm3s8xx= 0x20000000  8k        0   64k  yes   armv7m-crt0.o -lrdimon
@


1.6.2.8
log
@2006-11-06  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefie.in (ALL_CFLAGS): Define and use.
@
text
@a103 3
# Note that when building the library, ${MULTILIB} is not the way multilib
# options are passed; they're passed in $(CFLAGS).
ALL_CFLAGS=$(CFLAGS_FOR_TARGET) $(CFLAGS)
d107 1
a107 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -D_ARM_V7M -o $@@ -c $<
d113 1
a113 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDP_MONITOR -o $@@ -c $<
d116 1
a116 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d119 1
a119 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d122 1
a122 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d125 1
a125 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
d128 1
a128 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) -DARM_RDI_MONITOR -o $@@ -c $<
@


1.5
log
@
2004-06-27  Hideki Iwamoto <h-iwamoto@@kit.hi-ho.ne.jp>

        * Makefile.in: Support $(DESTDIR).
        * arm/Makefile.in: Ditto.
        * d30v/Makefile.in: Ditto.
        * doc/Makefile.in: Ditto.
        * fr30/Makefile.in: Ditto.
        * frv/Makefile.in: Ditto.
        * hp74x/Makefile.in: Ditto.
        * i386/Makefile.in: Ditto.
        * i960/Makefile.in: Ditto.
        * iq2000/Makefile.in: Ditto.
        * libnosys/Makefile.in: Ditto.
        * m32r/Makefile.in: Ditto.
        * m68hc11/Makefile.in: Ditto.
        * m68k/Makefile.in: Ditto.
        * mcore/Makefile.in: Ditto.
        * mips/Makefile.in: Ditto.
        * mn10200/Makefile.in: Ditto.
        * mn10300/Makefile.in: Ditto.
        * pa/Makefile.in: Ditto.
        * rs6000/Makefile.in: Ditto.
        * sparc/Makefile.in: Ditto.
        * sparc/libsys/Makefile.in: Ditto.
        * xstormy16/Makefile.in: Ditto.
@
text
@d119 1
a119 1
	${AR} ${ARFLAGS} $@@ $(IDTOBJS)
d123 1
a123 1
	${AR} ${ARFLAGS} $@@ $(IDTOBJS)
@


1.4
log
@
2004-06-17  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/configure.in: Check the value of newlib-may-supply-syscalls
        enablement variable to determine if crt0 should or should not be
        built.
        * arm/configure: Regenerated.
        * arm/Makefile.in: Changed to look at @@BUILD_CRT0_TRUE@@ and
        @@BUILD_CRT0_FALSE@@ variables set in configure to determine
        if crt0.o should be built and installed.
@
text
@d3 1
d136 1
a136 1
	${INSTALL_DATA} ${CRT0} ${tooldir}/lib${MULTISUBDIR}/$$x
d139 2
a140 2
	set -e; for x in ${REDBOOT_CRT0} ${REDBOOT_OBJS}; do ${INSTALL_DATA} $$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${REDBOOT_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
d143 2
a144 2
	set -e; for x in ${RDPMON_CRT0} ${RDPMON_BSP}; do ${INSTALL_DATA} $$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${RDPMON_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
d147 2
a148 2
	set -e; for x in ${RDIMON_CRT0} ${RDIMON_BSP}; do ${INSTALL_DATA} $$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
	set -e; for x in ${RDIMON_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
d152 1
a152 1
	set -e; for x in ${PID_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
d155 1
a155 1
	set -e; for x in ${IQ80310_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
@


1.3
log
@
2004-06-09  Toralf Lund  <toralf@@procaptura.com>

        * arm/crt0.S: Copied from newlib and it now also sets up stacks for
        FIQ and IRQ mode, plus calls hardware_init_hook() and
        software_init_hook() if present.
        * arm/libcfunc.c, arm/swi.h, arm/syscalls.c: Copied
        from newlib.
        * arm/Makefile.in: Build crt0.o, rdpmon-crt0.o, rdimon-crt0.o,
        librdpmon.a, librdimon.a - support file for "bare" setup, as well
        as "RDP" and "RDI" monitors.
        * arm/coff-rdpmon.specs, arm/elf-rdpmon.specs,
        arm/coff-rdimon.specs, arm/elf-rdimon.specs: gcc specs files to go
        with above mentioned support libs and startfiles.
@
text
@d50 4
a53 2
CRT0		= crt0.o
CRT0_INSTALL	= install-crt0
@


1.2
log
@
2002-11-08 Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/Makefile.in: Add support for new pid specs.
        * arm/coff-iq80310.specs: Change to allow future support.
        * arm/elf-iq80310.specs: Ditto.
        * arm/elf-redboot.specs: Ditto.
        * arm/coff-redboot.ld: Add EH frame support.
        * arm/redboot-crt0.S: Add optional code to clear bss without
        memset.
        * arm/coff-pid.specs: New file.
        * arm/elf-pid.specs: New file.
@
text
@d50 5
a54 1
REDBOOT_OBJS	= redboot-crt0.o  redboot-syscalls.o
d57 13
d87 1
a87 1
all: ${REDBOOT_OBJS}
d96 1
d100 23
d130 1
a130 1
install: ${REDBOOT_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL}
d132 2
d136 1
a136 1
	set -e; for x in ${REDBOOT_OBJS}; do ${INSTALL_DATA} $$x ${tooldir}/lib${MULTISUBDIR}/$$x; done
d139 9
@


1.1
log
@Add ARM support
@
text
@d50 1
a50 1
REDBOOT_OBJS	= redboot-crt0.o redboot-syscalls.o
d55 4
a58 1
# Here is specific eval board stuff
d62 1
d89 1
a89 1
install: ${REDBOOT_INSTALL} ${IQ80310_INSTALL}
d95 3
@

