head	1.6;
access;
symbols
	newlib-2_2_0:1.6.0.2
	newlib-2_1_0:1.6
	newlib-2_0_0:1.6
	newlib-1_20_0:1.6
	newlib-1_19_0:1.6
	newlib-1_18_0:1.6
	newlib-1_17_0-arc:1.5.0.4
	binutils-arc-20080908-branch:1.5.0.2
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.5
	newlib-1_15_0:1.5
	newlib-csl-sourcerygxx-3_4_4-25:1.3;
locks; strict;
comment	@# @;


1.6
date	2009.10.26.10.00.41;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.16.33.50;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.02.19.57.46;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.04.23.58.02;	author sjackman;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.05.20.15.23;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.30.17.40.47;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        * arm/linux-syscalls0.S (SYSCALL0, SYSCALL3, SYSCALL6, SYSCALL4):
        Delete Thumb definitions - the ARM versions work correctly in
        Thumb mode.
@
text
@/** Linux system call interface for the ARM processor.
 * Written by Shaun Jackman <sjackman@@gmail.com>.
 * Copyright 2006 Pathway Connectivity
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

#include "linux-syscall.h"

#if __thumb__
# define FUNC(name) .type name, %function; .thumb_func; name:
# define SET .thumb_set
#else
# define FUNC(name) .type name, %function; name:
# define SET .set
#endif

#define GLOBAL(name) .global name; FUNC(name)
#define SIZE(name) .size name, .-name

# define SYSCALL4(name) \
	GLOBAL(_ ## name); \
	swi #SYS_ ## name; \
	b _set_errno; \
	SIZE(_ ## name)

# define SYSCALL6(name) \
	GLOBAL(_ ## name); \
	push { r4 - r5 }; \
	ldr r4, [sp, #8]; \
	ldr r5, [sp, #12]; \
	swi #SYS_ ## name; \
	pop { r4 - r5 }; \
	b _set_errno; \
	SIZE(_ ## name)

#define SYSCALL0(name) SYSCALL3(name)
#define SYSCALL3(name) SYSCALL4(name)
#define SYSCALL1(name) SYSCALL3(name)
#define SYSCALL2(name) SYSCALL3(name)
#define SYSCALL5(name) SYSCALL6(name)

SYSCALL1(alarm)
SYSCALL1(brk)
SYSCALL1(chdir)
SYSCALL2(chmod)
SYSCALL3(chown)
SYSCALL1(close)
SYSCALL1(dup)
SYSCALL2(dup2)
SYSCALL3(execve)
SYSCALL1(exit)
SYSCALL3(fcntl)
SYSCALL2(fstat)
SYSCALL2(ftruncate)
SYSCALL3(getdents)
SYSCALL0(getegid)
SYSCALL0(geteuid)
SYSCALL0(getgid)
SYSCALL2(getgroups)
SYSCALL1(getpgid)
SYSCALL0(getpgrp)
SYSCALL0(getpid)
SYSCALL0(getuid)
SYSCALL2(gettimeofday)
SYSCALL3(ioctl)
SYSCALL2(kill)
SYSCALL3(lchown)
SYSCALL2(link)
SYSCALL3(lseek)
SYSCALL2(lstat)
SYSCALL2(mkdir)
SYSCALL3(mknod)
SYSCALL2(nanosleep)
SYSCALL3(open)
SYSCALL0(pause)
SYSCALL1(pipe)
SYSCALL3(read)
SYSCALL3(readlink)
SYSCALL4(reboot)
SYSCALL1(rmdir)
SYSCALL5(select)
SYSCALL2(setpgid)
SYSCALL1(setgid)
SYSCALL0(setsid)
SYSCALL1(setuid)
SYSCALL3(sigprocmask)
SYSCALL2(socketcall)
SYSCALL2(stat)
SYSCALL1(stime)
SYSCALL2(symlink)
SYSCALL1(sync)
SYSCALL1(sysinfo)
SYSCALL1(times)
SYSCALL2(truncate)
SYSCALL1(umask)
SYSCALL1(uname)
SYSCALL1(unlink)
SYSCALL2(utime)
SYSCALL0(vfork)
SYSCALL4(wait4)
SYSCALL3(write)

#define ALIAS(name) .GLOBAL name; SET name, _ ## name

ALIAS(alarm)
ALIAS(chdir)
ALIAS(chmod)
ALIAS(chown)
ALIAS(dup)
ALIAS(dup2)
ALIAS(ftruncate)
ALIAS(getdents)
ALIAS(getegid)
ALIAS(geteuid)
ALIAS(getgid)
ALIAS(getgroups)
ALIAS(getpgid)
ALIAS(getpgrp)
ALIAS(getuid)
ALIAS(ioctl)
ALIAS(lchown)
ALIAS(lstat)
ALIAS(mkdir)
ALIAS(mknod)
ALIAS(nanosleep)
ALIAS(pause)
ALIAS(pipe)
ALIAS(readlink)
ALIAS(rmdir)
ALIAS(select)
ALIAS(setgid)
ALIAS(setpgid)
ALIAS(setsid)
ALIAS(setuid)
ALIAS(sigprocmask)
ALIAS(stime)
ALIAS(symlink)
ALIAS(sync)
ALIAS(sysinfo)
ALIAS(truncate)
ALIAS(umask)
ALIAS(uname)
ALIAS(utime)
ALIAS(vfork)
ALIAS(wait4)

# define SOCKETCALL(name, NAME) \
	GLOBAL(name); \
	push { r0 - r3 }; \
	mov r0, #SYS_ ## NAME; \
	b _socketcall_tail; \
	SIZE(name)

FUNC(_socketcall_tail)
	mov r1, sp
	push { lr }
	bl _socketcall
	pop { r3 }
	add sp, #16
#if defined(__ARM_ARCH_2__) || defined(__ARM_ARCH_3__) \
    || defined(__ARM_ARCH_3M__) || defined(__ARM_ARCH_4__)
	mov pc, r3
#else
	bx r3
#endif
	SIZE(_socketcall_tail)

#define SOCKETCALL2(name, NAME) SOCKETCALL(name, NAME)
#define SOCKETCALL3(name, NAME) SOCKETCALL(name, NAME)
#define SOCKETCALL4(name, NAME) SOCKETCALL(name, NAME)
#define SOCKETCALL5(name, NAME) SOCKETCALL(name, NAME)
#define SOCKETCALL6(name, NAME) SOCKETCALL(name, NAME)

SOCKETCALL3(accept, ACCEPT)
SOCKETCALL3(bind, BIND)
SOCKETCALL3(connect, CONNECT)
SOCKETCALL3(getpeername, GETPEERNAME)
SOCKETCALL3(getsockname, GETSOCKNAME)
SOCKETCALL5(getsockopt, GETSOCKOPT)
SOCKETCALL2(listen, LISTEN)
SOCKETCALL4(recv, RECV)
SOCKETCALL6(recvfrom, RECVFROM)
SOCKETCALL3(recvmsg, RECVMSG)
SOCKETCALL4(send, SEND)
SOCKETCALL3(sendmsg, SENDMSG)
SOCKETCALL6(sendto, SENDTO)
SOCKETCALL5(setsockopt, SETSOCKOPT)
SOCKETCALL2(shutdown, SHUTDOWN)
SOCKETCALL3(socket, SOCKET)
SOCKETCALL4(socketpair, SOCKETPAIR)
@


1.5
log
@
2006-10-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/linux-syscalls0.c: Rewrite bx insn architecture flag check         to avoid use of __ARM_ARCH__.
@
text
@a21 41
#if __thumb__

# define SYSCALL0(name) \
	GLOBAL(_ ## name); \
	mov r12, r7; \
	mov r7, #SYS_ ## name; \
	swi; \
	mov r7, r12; \
	b _set_errno; \
	SIZE(_ ## name)

/* static int _syscall3(int a, int b, int c, int number); */
FUNC(_syscall3)
	push { r7 }
	mov r7, r3
	swi
	pop { r7 }
	b _set_errno
	SIZE(_syscall3)

# define SYSCALL3(name) \
	GLOBAL(_ ## name); \
	mov r3, #SYS_ ## name; \
	b _syscall3; \
	SIZE(_ ## name)

# define SYSCALL6(name) \
	GLOBAL(_ ## name); \
	push { r4 - r5, r7 }; \
	ldr r4, [sp, #12]; \
	ldr r5, [sp, #16]; \
	mov r7, #SYS_ ## name; \
	swi; \
	pop { r4 - r5, r7 }; \
	b _set_errno; \
	SIZE(_ ## name)

# define SYSCALL4(name) SYSCALL6(name)

#else /* __thumb__ */

a39 3

#endif /* __thumb__ */

@


1.4
log
@
2006-10-02  Nick Clifton  <nickc@@redhat.com>

        * arm/linux-syscalls0.c: Add arm architecture flag
        checks around bx insn.
@
text
@d206 4
a209 1
#if (__ARM_ARCH__ > 4) || defined(__ARM_ARCH_4T__)
a210 2
#else
	mov pc, r3
@


1.3
log
@2006-07-04  Shaun Jackman  <sjackman@@gmail.com>

	* arm/linux-syscalls0.S (ftruncate, getegid, geteuid, getgid,
	getgroups, getpgid, getpgrp, getuid, lchown, pause, pipe,
	setpgid, setgid, setsid, setuid, sigprocmask, sync, uname): New
	system call.
@
text
@d206 1
d208 3
@


1.2
log
@
2006-06-05  Shaun Jackman  <sjackman@@gmail.com>

        * arm/linux-syscalls0.S (reboot): Remove.
        * arm/linux-syscalls1.c (reboot): New function.
@
text
@d100 1
d102 6
d109 1
d113 1
d121 2
d128 5
d137 1
d142 1
d157 1
d159 7
d167 1
d172 2
d177 5
d184 1
d188 1
@


1.1
log
@
2006-05-30  Shaun Jackman  <sjackman@@gmail.com>

      * arm/Makefile.in: Add Linux syscall interface.
      * arm/linux-crt0.S: New file.
      * arm/linux-syscall.h: New file.
      * arm/linux-syscalls0.S: New file.
      * arm/linux-syscalls1.c: New file.
@
text
@a145 1
ALIAS(reboot)
@

