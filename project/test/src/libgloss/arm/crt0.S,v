head	1.17;
access;
symbols
	newlib-2_2_0:1.16.0.2
	newlib-2_1_0:1.16
	newlib-2_0_0:1.12
	newlib-1_20_0:1.12
	newlib-1_19_0:1.8
	newlib-1_18_0:1.8
	newlib-1_17_0-arc:1.8.0.2
	binutils-arc-20080908-branch:1.7.0.2
	binutils-arc-20080908-branchpoint:1.7
	newlib-1_17_0:1.8
	newlib-1_16_0:1.6
	newlib-1_15_0:1.5
	newlib-csl-coldfire-4_1-32:1.5.2.2
	newlib-csl-sourcerygxx-4_1-32:1.5.2.2
	newlib-csl-innovasic-fido-3_4_4-33:1.5.2.2
	newlib-csl-coldfire-4_1-30:1.5.2.2
	newlib-csl-sourcerygxx-4_1-30:1.5.2.2
	newlib-csl-coldfire-4_1-28:1.5.2.2
	newlib-csl-sourcerygxx-4_1-28:1.5.2.2
	newlib-csl-arm-2006q3-27:1.5.2.2
	newlib-csl-sourcerygxx-4_1-27:1.5.2.2
	newlib-csl-arm-2006q3-26:1.5.2.2
	newlib-csl-sourcerygxx-4_1-26:1.5.2.2
	newlib-csl-sourcerygxx-4_1-24:1.5.2.2
	newlib-csl-sourcerygxx-4_1-23:1.5.2.2
	newlib-csl-sourcerygxx-4_1-21:1.5.2.2
	newlib-csl-arm-2006q3-21:1.5.2.2
	newlib-csl-arm-2006q3-19:1.5.2.2
	newlib-csl-sourcerygxx-4_1-19:1.5.2.2
	newlib-csl-sourcerygxx-4_1-18:1.5.2.2
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5
	newlib-csl-sourcerygxx-4_1-14:1.5
	newlib-csl-sourcerygxx-4_1-13:1.5
	newlib-csl-sourcerygxx-4_1-12:1.5
	newlib-csl-sourcerygxx-4_1-9:1.5
	newlib-csl-sourcerygxx-4_1-8:1.5
	newlib-csl-sourcerygxx-4_1-7:1.5
	newlib-csl-arm-2006q1-6:1.5
	newlib-csl-sourcerygxx-4_1-6:1.5
	newlib-csl-sourcerygxx-4_1-5:1.5
	newlib-csl-sourcerygxx-4_1-4:1.5
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.1;
locks; strict;
comment	@# @;


1.17
date	2015.02.17.09.30.52;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2013.10.14.15.15.12;	author rearnsha;	state Exp;
branches;
next	1.15;

1.15
date	2013.09.20.14.23.41;	author rearnsha;	state Exp;
branches;
next	1.14;

1.14
date	2013.08.12.11.27.37;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2013.07.02.21.34.35;	author jjohnstn;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.13.22.45.12;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.29.11.23.29;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.29.11.06.49;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.13.15.06.21;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.06.20.55.19;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.25.09.02.40;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.13.18.13.39;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.07.18.46.23;	author jjohnstn;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.07.19.15.15.25;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.07.18.01.26;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.26.16.43.35;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.09.19.06.50;	author jjohnstn;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.30.22.24.18;	author pbrook;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.09.01.15.28.54;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.17
log
@	* arm/crt0.S: Initialise __heap_limit when ARM_RDI_MONITOR is defined.
	* arm/syscalls.c: define __heap_limit global symbol.
	* arm/syscalls.c (_sbrk): Honour __heap_limit.
@
text
@#include "newlib.h"
#include "arm.h"
#include "swi.h"

/* ANSI concatenation macros.  */
#define CONCAT(a, b) CONCAT2(a, b)
#define CONCAT2(a, b) a ## b

#ifdef __USER_LABEL_PREFIX__
#define FUNCTION( name ) CONCAT (__USER_LABEL_PREFIX__, name)
#else
#error __USER_LABEL_PREFIX is not defined
#endif

#ifdef HAVE_INITFINI_ARRAY
#define _init	__libc_init_array
#define _fini	__libc_fini_array
#endif

#if defined(__ARM_EABI__) && defined(__thumb__) && !defined(__thumb2__)
/* For Thumb1 we need to force the architecture to be sure that we get the
   correct attributes on the object file; otherwise the assembler will get
   confused and mark the object as being v6T2.  */
#if defined(__ARM_ARCH_4T__)
	.arch armv4t
#elif defined(__ARM_ARCH_5T__) || defined(__ARM_ARCH_5TE__)
	/* Nothing in this object requires higher than v5.  */
	.arch armv5t
#elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) \
	|| defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) \
	|| defined(__ARM_ARCH_6ZK__)
	/* Nothing in this object requires higher than v6.  */
	.arch armv6
#elif defined(__ARM_ARCH_6M__)
#ifdef ARM_RDP_MONITOR
	/* Object file uses SVC, so mark as v6s-m.  */
	.arch armv6s-m
#else
	.arch armv6-m
#endif
#endif
#endif

/* .text is used instead of .section .text so it works with arm-aout too.  */
	.text
	.syntax unified
#ifdef THUMB_V7_V6M
	.thumb
.macro FUNC_START name
	.global \name
	.thumb_func
\name:
.endm
#else
	.code 32
.macro FUNC_START name
	.global \name
\name:
.endm
#endif

.macro indirect_call reg
#ifdef HAVE_CALL_INDIRECT
	blx \reg
#else
	mov	lr, pc
	mov	pc, \reg
#endif
.endm

	.align 	0

	FUNC_START	_mainCRTStartup
	FUNC_START	_start
#if defined(__ELF__) && !defined(__USING_SJLJ_EXCEPTIONS__)
	/* Annotation for EABI unwinding tables.  */
	.fnstart
#endif

	/* __ARM_ARCH_PROFILE is defined from GCC 4.8 onwards, however __ARM_ARCH_7A
	has been defined since 4.2 onwards, which is when v7-a support was added
	and hence 'A' profile support was added in the compiler.  Allow for this
	file to be built with older compilers.  We only call this for A profile
	cores.  */
#if defined (__ARM_ARCH_7A__) || (__ARM_ARCH_PROFILE == 'A')
/*  The init hook does not use the stack and is called before the stack has been set up.  */
#ifdef ARM_RDI_MONITOR
	bl	_rdimon_hw_init_hook
	.weak	FUNCTION (_rdimon_hw_init_hook)
#endif
#endif

/* Start by setting up a stack */
#ifdef ARM_RDP_MONITOR
	/*  Issue Demon SWI to read stack info */
	swi	SWI_GetEnv	/*  Returns command line in r0 */
	mov	sp,r1		/*  and the highest memory address in r1 */

	/*  stack limit is at end of data */
	/*  allow slop for stack overflow handling and small frames */
#ifdef __ARM_ARCH_6M__
	ldr	r0, .LC2
	adds	r0, #128
	adds	r0, #128
	mov	sl, r0
#else
	ldr	sl, .LC2
	add	sl, sl, #256
#endif
#else
#ifdef ARM_RDI_MONITOR
	/*  Issue Angel SWI to read stack info */
	movs	r0, #AngelSWI_Reason_HeapInfo
	adr	r1, .LC0	/*  point at ptr to 4 words to receive data */
#ifdef THUMB_V7M_V6M
	bkpt	AngelSWI
#elif defined(__thumb2__)
	/*  We are in thumb mode for startup on armv7 architectures. */
	AngelSWIAsm	AngelSWI
#else
	/*  We are always in ARM mode for startup on pre armv7 archs. */
	AngelSWIAsm	AngelSWI_ARM
#endif
	ldr	r0, .LC0	/*  point at values read */

	/* Set __heap_limit.  */
	ldr     r1, [r0, #4]
	ldr     r2, =__heap_limit
	str     r1, [r2]

	ldr     r1, [r0, #0]
	cmp     r1, #0
	bne     .LC32
	/* If the heap base value [r0, #0] is 0 then the heap base is actually 
	   at the end of program data (i.e. __end__). See:
           http://infocenter.arm.com/help/topic/com.arm.doc.dui0471-/Bacbefaa.html
	   for more information.  */
	ldr     r1, .LC31
	str     r1, [r0, #0]
.LC32:	
	ldr	r1, [r0, #8]
	ldr	r2, [r0, #12]
	/*  We skip setting sp/sl if 0 returned from semihosting. 
	    - According to semihosting docs, if 0 returned from semihosting,
	      the system was unable to calculate the real value, so it's ok
	      to skip setting sp/sl to 0 here.
	    - Considering M-profile processors, We might want to initialize
	      sp by the first entry of vector table and return 0 to SYS_HEAPINFO
	      semihosting call, which will be skipped here. */
	cmp	r1, #0
	beq	.LC26
	mov	sp, r1
.LC26:
	cmp	r2, #0
	beq	.LC27
	/*  allow slop for stack overflow handling and small frames */
#ifdef __ARM_ARCH_6M__
	adds	r2, #128
	adds	r2, #128
	mov	sl, r2
#else
	add	sl, r2, #256
#endif
.LC27:
#else
	/*  Set up the stack pointer to a fixed value */
	/*  Changes by toralf:
	    - Allow linker script to provide stack via __stack symbol - see
	      defintion of .Lstack
	    - Provide "hooks" that may be used by the application to add
	      custom init code - see .Lhwinit and .Lswinit	
	    - Go through all execution modes and set up stack for each of them.
	      Loosely based on init.s from ARM/Motorola example code.
              Note: Mode switch via CPSR is not allowed once in non-privileged
		    mode, so we take care not to enter "User" to set up its sp,
		    and also skip most operations if already in that mode. */

	ldr	r3, .Lstack
	cmp	r3, #0
#ifdef __thumb2__
	it	eq
#endif	
#ifdef __ARM_ARCH_6M__
	bne	.LC28
	ldr	r3, .LC0
.LC28:
#else
	ldreq	r3, .LC0
#endif
	/* Note: This 'mov' is essential when starting in User, and ensures we
		 always get *some* sp value for the initial mode, even if we 
		 have somehow missed it below (in which case it gets the same
		 value as FIQ - not ideal, but better than nothing.) */
	mov	sp, r3
#ifdef THUMB_V7_V6M
	/* XXX Fill in stack assignments for interrupt modes.  */
#else
	mrs	r2, CPSR
	tst	r2, #0x0F	/* Test mode bits - in User of all are 0 */
	beq	.LC23		/* "eq" means r2 AND #0x0F is 0 */
	msr     CPSR_c, #0xD1	/* FIRQ mode, interrupts disabled */
	mov 	sp, r3
	sub	sl, sp, #0x1000	/* This mode also has its own sl (see below) */
	
	mov	r3, sl	
	msr     CPSR_c, #0xD7	/* Abort mode, interrupts disabled */
	mov	sp, r3
	sub	r3, r3, #0x1000

	msr     CPSR_c, #0xDB	/* Undefined mode, interrupts disabled */
	mov	sp, r3
	sub	r3, r3, #0x1000

	msr     CPSR_c, #0xD2	/* IRQ mode, interrupts disabled */
	mov	sp, r3
	sub	r3, r3, #0x2000
		
	msr     CPSR_c, #0xD3	/* Supervisory mode, interrupts disabled */

	mov	sp, r3
	sub	r3, r3, #0x8000	/* Min size 32k */
	bic	r3, r3, #0x00FF	/* Align with current 64k block */
	bic	r3, r3, #0xFF00

	str	r3, [r3, #-4]	/* Move value into user mode sp without */ 
	ldmdb	r3, {sp}^       /* changing modes, via '^' form of ldm */ 
	orr	r2, r2, #0xC0	/* Back to original mode, presumably SVC, */
	msr	CPSR_c, r2	/* with FIQ/IRQ disable bits forced to 1 */
#endif	
.LC23:
	/* Setup a default stack-limit in-case the code has been
	   compiled with "-mapcs-stack-check".  Hard-wiring this value
	   is not ideal, since there is currently no support for
	   checking that the heap and stack have not collided, or that
	   this default 64k is enough for the program being executed.
	   However, it ensures that this simple crt0 world will not
	   immediately cause an overflow event:  */
#ifdef __ARM_ARCH_6M__
	movs	r2, #64
	lsls	r2, r2, #10
	subs	r2, r3, r2
	mov	sl, r2
#else
	sub	sl, r3, #64 << 10	/* Still assumes 256bytes below sl */
#endif
#endif
#endif
	/* Zero the memory in the .bss section.  */
	movs 	a2, #0			/* Second arg: fill value */
	mov	fp, a2			/* Null frame pointer */
	mov	r7, a2			/* Null frame pointer for Thumb */
	
	ldr	a1, .LC1		/* First arg: start of memory block */
	ldr	a3, .LC2	
	subs	a3, a3, a1		/* Third arg: length of block */
	

#if defined(__thumb__) && !defined(THUMB_V7_V6M)
	/* Enter Thumb mode.... */
	add	a4, pc, #1	/* Get the address of the Thumb block */
	bx	a4		/* Go there and start Thumb decoding  */

	.code 16
	.global __change_mode
	.thumb_func
__change_mode:	
#endif
	
	bl	FUNCTION (memset)
#if !defined (ARM_RDP_MONITOR) && !defined (ARM_RDI_MONITOR)
/* Changes by toralf: Taken from libgloss/m68k/crt0.S
 * initialize target specific stuff. Only execute these
 * functions it they exist.
 */
	ldr	r3, .Lhwinit
	cmp	r3, #0
	beq	.LC24
	indirect_call r3
.LC24:	
	ldr	r3, .Lswinit
	cmp	r3, #0
	beq	.LC25
	indirect_call r3

.LC25:	
	movs	r0, #0		/*  no arguments  */
	movs	r1, #0		/*  no argv either */
#else
	/* Need to set up standard file handles */
	bl	FUNCTION (initialise_monitor_handles)
	
#ifdef ARM_RDP_MONITOR
	swi	SWI_GetEnv	/*  sets r0 to point to the command line */
	movs	r1, r0
#else
	movs	r0, #AngelSWI_Reason_GetCmdLine
	adr	r1, .LC30	/*  Space for command line */
	AngelSWIAsm	AngelSWI
	ldr	r1, .LC30
#endif
	/*  Parse string at r1 */
	movs	r0, #0		/*  count of arguments so far */
	/* Push a NULL argument onto the end of the list.  */
#ifdef __thumb__
	push	{r0}
#else
	stmfd	sp!, {r0}
#endif
.LC10:
/*  Skip leading blanks */
#ifdef __thumb__
	ldrb	r3, [r1]
	adds	r1, #1
#else
	ldrb	r3, [r1], #1
#endif
	cmp	r3, #0
	beq	.LC12
	cmp	r3, #' '
	beq	.LC10

/*  See whether we are scanning a string */
	cmp	r3, #'"'
#ifdef __thumb__
	beq	.LC20
	cmp	r3, #'\''
	bne	.LC21
.LC20:
	movs	r2, r3
	b	.LC22

.LC21:
	movs	r2, #' '	/*  terminator type */
	subs	r1, r1, #1	/*  adjust back to point at start char */
.LC22:
#else
	cmpne	r3, #'\''
	moveq	r2, r3
	movne	r2, #' '	/*  terminator type */
	subne	r1, r1, #1	/*  adjust back to point at start char */
#endif

/*  Stack a pointer to the current argument */
#ifdef __thumb__
	push	{r1}
#else
	stmfd	sp!, {r1}
#endif
	adds	r0, r0, #1
.LC11:
#ifdef __thumb__
	ldrb	r3, [r1]
	adds	r1, #1
#else
	ldrb	r3, [r1], #1
#endif
	cmp	r3, #0
	beq	.LC12
	cmp	r2, r3		/*  reached terminator? */
	bne	.LC11
	movs	r2, #0
	subs	r3, r1, #1
	strb	r2, [r3]	/*  terminate the arg string */
	b	.LC10

.LC12:
	mov	r1, sp		/*  point at stacked arg pointers */
	/* We've now got the stacked args in order reverse the */
#ifdef __thumb__
	movs	r2, r0
	lsls	r2, #2
	add	r2, sp
	mov	r3, sp
.LC15:	cmp	r2, r3
	bls	.LC14
	subs	r2, #4
	ldr	r4, [r2]
	ldr	r5, [r3]
	str	r5, [r2]
	str	r4, [r3]
	adds	r3, #4
	b	.LC15
.LC14:	
	/* Ensure doubleword stack alignment.  */
	mov	r4, sp
	movs	r5, #7
	bics	r4, r5
	mov	sp, r4
#else
	add	r2, sp, r0, LSL #2	/* End of args */
	mov	r3, sp			/* Start of args */
.LC13:	cmp	r2, r3
	ldrhi	r4,[r2, #-4]		/* Reverse ends of list */
	ldrhi	r5, [r3]
	strhi	r5, [r2, #-4]!
	strhi	r4, [r3], #4
	bhi	.LC13
	/* Ensure doubleword stack alignment.  */
	bic	sp, sp, #7
#endif
#endif

#ifdef __USES_INITFINI__
	/* Some arm/elf targets use the .init and .fini sections
	   to create constructors and destructors, and for these
	   targets we need to call the _init function and arrange
	   for _fini to be called at program exit.  */
	movs	r4, r0
	movs	r5, r1
#ifdef _LITE_EXIT
	/* Make reference to atexit weak to avoid unconditionally pulling in
	   support code.  Refer to comments in __atexit.c for more details.  */
	.weak	FUNCTION(atexit)
	ldr	r0, .Latexit
	cmp	r0, #0
	beq	.Lweak_atexit
#endif
	ldr	r0, .Lfini
	bl	FUNCTION (atexit)
.Lweak_atexit:
	bl	FUNCTION (_init)
	movs	r0, r4
	movs	r1, r5
#endif
	bl	FUNCTION (main)

	bl	FUNCTION (exit)		/* Should not return.  */

#if defined(__thumb__) && !defined(THUMB_V7_V6M)
	/* Come out of Thumb mode.  This code should be redundant.  */

	mov	a4, pc
	bx	a4

	.code 32
	.global change_back
change_back:
	/* Halt the execution.  This code should never be executed.  */
	/* With no debug monitor, this probably aborts (eventually).
	   With a Demon debug monitor, this halts cleanly.
	   With an Angel debug monitor, this will report 'Unknown SWI'.	 */
	swi	SWI_Exit
#endif
	
	/* For Thumb, constants must be after the code since only 
	   positive offsets are supported for PC relative addresses.  */
	
	.align 0
.LC0:
#ifdef ARM_RDI_MONITOR
	.word	HeapBase
#else
#ifndef ARM_RDP_MONITOR
	/* Changes by toralf: Provide alternative "stack" variable whose value
	   may be defined externally; .Lstack will be used instead of .LC0 if
	   it points to a non-0 value. Also set up references to "hooks" that
           may be used by the application to provide additional init code. */
	
#ifdef __pe__
	.word	0x800000
#else
	.word	0x80000			/* Top of RAM on the PIE board.  */
#endif
.Lstack:	
	.word	__stack
.Lhwinit:	
	.word	FUNCTION (hardware_init_hook)
.Lswinit:
	.word	FUNCTION (software_init_hook)

	/* Set up defaults for the above variables in the form of weak symbols
	   - so that application will link correctly, and get value 0 in
	   runtime (meaning "ignore setting") for the variables, when the user
	   does not provide the symbols. (The linker uses a weak symbol if,
	   and only if, a normal version of the same symbol isn't provided
	   e.g. by a linker script or another object file.) */	

	.weak __stack
	.weak FUNCTION (hardware_init_hook) 
	.weak FUNCTION (software_init_hook)
#endif
	
#endif
#if defined(__ELF__) && !defined(__USING_SJLJ_EXCEPTIONS__)
	/* Protect against unhandled exceptions.  */
	.cantunwind
	.fnend
#endif
.LC1:
	.word	__bss_start__
.LC2:
	.word	__bss_end__
#ifdef __USES_INITFINI__
#ifdef _LITE_EXIT
.Latexit:
	.word	FUNCTION(atexit)

	/* Weak reference _fini in case of lite exit.  */
	.weak	FUNCTION(_fini)
#endif
.Lfini:
	.word	FUNCTION(_fini)
#endif
#ifdef ARM_RDI_MONITOR
.LC30:
	.word	CommandLine
	.word	255
.LC31:
	.word	__end__

/*  Workspace for Angel calls.  */
	.data
/*  Data returned by monitor SWI.  */
.global	__stack_base__
HeapBase:	.word	0
HeapLimit:	.word	0
__stack_base__:	.word	0
StackLimit:	.word	0
CommandLine:	.space	256,0	/*  Maximum length of 255 chars handled.  */
#endif
	
#ifdef __pe__
	.section .idata$3
	.long	0,0,0,0,0,0,0,0
#endif
@


1.16
log
@2013-10-14  Ramana Radhakrishnan  <ramana.radhakrishnan@@arm.com>

	* arm/cpu-init/rdimon-aem.S: Disable for M class cores.
	* arm/crt0.S: Don't call _rdimon_hw_init_hook for non-A class cores.
	* arm/cpu-init/Makefile.in (CPU_INIT_OBJS): Use CFLAGS.
@
text
@d126 5
@


1.15
log
@2013-09-20  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	    Ramana Radhakrishnan  <ramana.radhakrishnan@@arm.com>
	    Greta Yorsh  <greta.yorsh@@arm.com>

	* arm/Makefile.in: Add support for cpu-init directory and add
	elf-aprofile-ve.specs.
	* arm/configure.in: Likewise.
	* arm/configure: Regenerate.
	* arm/cpu-init: New directory.
	* arm/cpu-init/Makefile.in: New file.
	* arm/cpu-init/rdimon-aem.S: Likewise.
	* arm/crt0.S: Call _rdimon_init_hook
	* arm/elf-aprofile-ve.specs: New file.
@
text
@d80 6
d91 1
@


1.14
log
@	* aarch64/crt0.S: Remove 'start'.
	* arm/crt0.S: Ditto.
	* arm/redboot-crt0.S: Ditto.
@
text
@d80 6
@


1.13
log
@
2013-07-02  Joey Ye  <joey.ye@@arm.com>

        * arm/crt0.S (_mainCRTStartup): Weak reference to atexit and _fini
        when lite exit is enabled.
@
text
@a74 1
	FUNC_START	start
@


1.12
log
@
2011-12-13  Richard Earnshaw  <rearnsha@@arm.com>
            Thomas Klein  <th.r.klein@@web.de>

        * arm/crt0.S: Manually set the target architecture
        when compiling for Thumb1 on EABI targets.
        Avoid v6-only Thumb-1 MOV instruction.
@
text
@d393 8
d403 1
d407 1
a407 1
#endif	
d477 7
@


1.11
log
@	* arm/crt0.s: Support 0 heap base response from HeapInfo syscall.
@
text
@d20 24
d277 1
a277 1
	mov	r1, r0
d312 1
a312 1
	mov	r2, r3
d353 1
a353 1
	mov	r2, r0
d391 2
a392 2
	mov	r4, r0
	mov	r5, r1
d396 2
a397 2
	mov	r0, r4
	mov	r1, r5
@


1.10
log
@	* arm/arm.h (HAVE_CALL_INDIRECT): Define.
        * arm/crt0.S (indirect_call): New macro.  Encodes indirect
	function calls.  Does not use blx for pre-armv5 targets.
@
text
@d89 11
d451 2
@


1.9
log
@	* arm/crt0.S: Support armv6-m processors in libgloss.
	* arm/swi.h: Likewise.
	* arm/trap.S: Likewise.
	* arm/redboot-crt0.S: Likewise.
	* arm/linux-crt0.c: Likewise.
	* arm/arm.h: New.
@
text
@d37 10
d226 1
a226 6
#if defined(__thumb__) || defined(__thumb2__)
	blx   r3
#else
	mov	lr, pc
	mov	pc, r3
#endif
d231 1
a231 6
#if defined(__thumb__) || defined(__thumb2__)
	blx   r3
#else
	mov	lr, pc
	mov	pc, r3
#endif
@


1.8
log
@
2008-10-06  Bill Tompkins  <bill+newlib@@key-square.com>

        * arm/crt0.S: Fix calling hardware_init_hook() or software_init_hook()
        under thumb and thumb2.
@
text
@d2 1
a21 1
#if defined(__thumb2__)
d23 1
d52 12
a63 3
	ldr	sl, .LC2	/*  stack limit is at end of data */
	add	sl, sl, #256	/*  allow slop for stack overflow handling */
				/*  and small frames */
d67 1
a67 1
	mov	r0, #AngelSWI_Reason_HeapInfo
d69 1
a69 1
#if defined(__thumb2__)
d71 3
d75 1
a75 1
	/*  We are always in ARM mode for startup */
d79 24
a102 4
	ldr	sp, [r0, #8]
	ldr	sl, [r0, #12]
	add	sl, sl, #256	/*  allow slop for stack overflow handling */
				/*  and small frames */
d121 5
d127 1
d133 1
a133 1
#ifdef __thumb2__
d176 6
d185 1
d187 1
a187 1
	mov 	a2, #0			/* Second arg: fill value */
d193 1
a193 1
	sub	a3, a3, a1		/* Third arg: length of block */
d196 1
a196 1
#if defined(__thumb__) && !defined(__thumb2__)
d234 2
a235 2
	mov	r0, #0		/*  no arguments  */
	mov	r1, #0		/*  no argv either */
d244 1
a244 1
	mov	r0, #AngelSWI_Reason_GetCmdLine
d250 1
a250 1
	mov	r0, #0		/*  count of arguments so far */
d261 1
a261 1
	add	r1, #1
d281 2
a282 2
	mov	r2, #' '	/*  terminator type */
	sub	r1, r1, #1	/*  adjust back to point at start char */
d297 1
a297 1
	add	r0, r0, #1
d301 1
a301 1
	add	r1, #1
d309 2
a310 2
	mov	r2, #0
	sub	r3, r1, #1
d319 1
a319 1
	lsl	r2, #2
d324 1
a324 1
	sub	r2, #4
d329 1
a329 1
	add	r3, #4
d334 2
a335 2
	mov	r5, #7
	bic	r4, r5
d368 1
a368 1
#if defined(__thumb__) && !defined(__thumb2__)
@


1.7
log
@            * libc/machine/arm/setjmp.S: Fix thumb2 support.

            * arm/crt0.S: Allow assembly under ARMv7 ISA.  Support for
            initializing stack pointers for interrupt modes is still pending.
@
text
@d170 3
d175 1
d180 3
d185 2
@


1.6
log
@
2007-08-13  Carlos O'Donell  <carlos@@codesourcery.com>

	* arm/crt0.S: Remove '.set' for __stack, hardware_init_hook,
	and software_init_hook.
@
text
@d85 3
d94 3
d118 1
a125 1
	
d128 1
@


1.5
log
@
2006-02-07  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Add Thumb-2 startup code.
        * arm/redboot-crt0.S: Ditto.
        * arm/libcfunc.c (do_AngelSWI): Use AngelSWIInsn.
        * arm/swi.h (AngelSWIInsn, AngelSWIAsm): Define.
        * arm/trap.S: Disable for Thumb-2.
@
text
@a354 4
	.set __stack, 0
	.set FUNCTION (hardware_init_hook), 0
	.set FUNCTION (software_init_hook), 0
	
@


1.5.2.1
log
@2006-08-30  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Change armv7m linker script generation.  Add
	armv7m.spec.  Build armv7m-crt0.o.
	* arm/arm.sc: New file.
	* arm/armv7m.specs: New file.
	* arm/crt0.S: Add armv7m code.
	* arm/elf-lm3s10x.ld: Remove.
	* arm/elf-lm3s301.ld: Remove.
	* arm/elf-lm3s31x.ld: Remove.
	* arm/swi.h (do_AngelSWI): Add definition.
	* arm/syscalls.c: Merge lazy semihosting initialization from newlib.

	newlib/
	* libc/sys/arm/crt0.S: Add armv7m rom startup code.
@
text
@d46 2
a47 25
	/* Start by setting up a stack */
#ifdef _ARM_V7M
	/* Copy .data into ram.  */
	ldr	r0, =__data_load
	ldr	r1, =__data_start
	cmp	r0, r1 /* If LMA == VMA we are running from ram.  */
	beq	2f
	ldr	r2, =_edata
	/* When running from ROM the stack pointer is set up at CPU reset.  */
	/* Copy .data into RAM.  */
1:
	ldr	r3, [r0], #4
	str	r3, [r1], #4
	cmp	r1, r2
	blt	1b
	b	3f
2:
	/* Set the stack pointer when running from RAM.  */
	ldr	r0, .Lstack
	cmp	r0, #0
	beq	3f
	mov	sp, r0
3:
#else
# ifdef ARM_RDP_MONITOR
d54 2
a55 2
# else
#  ifdef ARM_RDI_MONITOR
d59 1
a59 1
#   if defined(__thumb2__)
d61 1
a61 1
#   else
d64 1
a64 1
#   endif
d70 1
a70 1
#  else
d130 2
a131 3
	sub	sl, sp, #64 << 10	/* Still assumes 256bytes below sl */
#  endif
# endif
a132 1
	
d155 1
a155 5
        /* For ARM V7M, we do not want to have semihosting traps in
   	   crt0.o, so that people can use the same programs both with
	   and without semihosting.  */   
#if ((!defined (ARM_RDP_MONITOR) && !defined (ARM_RDI_MONITOR)) \
     || defined (_ARM_V7M))
d175 4
a178 1
# ifdef ARM_RDP_MONITOR
d181 1
a181 1
# else
d186 1
a186 1
# endif
d190 1
a190 1
# ifdef __thumb__
d192 1
a192 1
# else
d194 1
a194 1
# endif
d197 1
a197 1
# ifdef __thumb__
d200 1
a200 1
# else
d202 1
a202 1
# endif
d210 1
a210 1
# ifdef __thumb__
d222 1
a222 1
# else
d227 1
a227 1
# endif
d230 1
a230 1
# ifdef __thumb__
d232 1
a232 1
# else
d234 1
a234 1
# endif
d237 1
a237 1
# ifdef __thumb__
d240 1
a240 1
# else
d242 1
a242 1
# endif
d255 1
a255 1
# ifdef __thumb__
d275 1
a275 1
# else
d286 1
a286 1
# endif
a325 1
#ifndef _ARM_V7M
d327 1
a327 1
# ifdef ARM_RDI_MONITOR
d329 2
a330 2
# else
#  ifndef ARM_RDP_MONITOR
d336 1
a336 1
#   ifdef __pe__
d338 1
a338 1
#   else
d340 1
a340 6
#   endif
#  endif
# endif
#endif 	
#if ((!defined (ARM_RDP_MONITOR) && !defined (ARM_RDI_MONITOR)) \
     || defined (_ARM_V7M))
d355 1
d359 1
a361 5

	/* For ARMV7M we want to error if no stack location is defined.  */
#if !defined(_ARM_V7M)
	.set __stack, 0
	.weak __stack
d363 1
d378 1
a378 1
#if defined(ARM_RDI_MONITOR) && !defined(_ARM_V7M)
a397 15

#ifdef _ARM_V7M
	/* The hardware uses this vector to handle hardware resets and 
	   exceptions.  */
	.section .isr_vector, "a"
	/* The value for the stack pointer at reset.  */
	.word	__stack
	/* The value for the PC at reset.  */
	.word	_start
	/* The value for the PC if an NMI occurs.  */
	.word	_nmi_isr
	/* The value for the PC if a fault occurs.  */
	.word	_fault_isr
#endif /* _ARM_V7M */
	 
@


1.5.2.2
log
@2006-09-01  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Include _exit.c in BSPs.  Add rdimon-ram.ld.
	Build linker scripts instead of spec files for rdimon and rdpmon.
	Pass CRT0 ad BSP to arm.sc.
	* arm/_exit.c: New file.
	* arm/arm.sc: Add STARTUP, GROUP and SEARCH_DIR.  Remove defaults
	for ROM and RAM.
	* arm/crt0.S: Give Thumb-2 symbols function type.
	Skip generic Arm init code for Thumb-2.
	Add _nmi_isr and _fault_isr.
	* arm/libcfunc.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New function.
	* arm/syscalls.c (do_AngelSWI): Remove.
	(_exit): Remove.
	(isatty): New function.
@
text
@a26 1
	.type \name, %function
a107 6
#   ifdef __thumb2__
	/* Skip the mode initialization for Thumb-2.  We don't know whether
	we're on an "M" variant or not.  */
	it	eq
	ldreq	r3, .LC0
#   else
a153 1
#   endif
a433 11
	.text
	/* Default handler routines for exception handlers. Can be
	   overriden by the user.  */
	.weak _nmi_isr
	FUNC_START _nmi_isr
	b .

	.weak _fault_isr
	FUNC_START _fault_isr
	b .

@


1.4
log
@
2005-07-19  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Ensure doubleword stack alignment.
@
text
@d21 9
d31 5
d38 3
a40 6
	.global	_mainCRTStartup
	.global	_start
	.global	start
start:
_start:
_mainCRTStartup:
d59 6
a64 1
	swi	AngelSWI_ARM	/*  We are always in ARM mode for startup */
d143 2
a144 2
#ifdef __thumb__		/* Enter Thumb mode.... */

d184 1
a184 1
	swi	AngelSWI
d306 1
a306 1
#ifdef __thumb__
@


1.3
log
@
2005-01-07  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Call __libc_{init,fini}_array instead of
        _init/_fini if they exist.
@
text
@d254 5
d268 2
@


1.2
log
@
2004-11-26  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S (_start): Add .cantunwind annotation.
@
text
@d1 1
d14 5
@


1.1
log
@
2004-06-09  Toralf Lund  <toralf@@procaptura.com>

        * arm/crt0.S: Copied from newlib and it now also sets up stacks for
        FIQ and IRQ mode, plus calls hardware_init_hook() and
        software_init_hook() if present.
        * arm/libcfunc.c, arm/swi.h, arm/syscalls.c: Copied
        from newlib.
        * arm/Makefile.in: Build crt0.o, rdpmon-crt0.o, rdimon-crt0.o,
        librdpmon.a, librdimon.a - support file for "bare" setup, as well
        as "RDP" and "RDI" monitors.
        * arm/coff-rdpmon.specs, arm/elf-rdpmon.specs,
        arm/coff-rdimon.specs, arm/elf-rdimon.specs: gcc specs files to go
        with above mentioned support libs and startfiles.
@
text
@d24 4
d336 5
@

