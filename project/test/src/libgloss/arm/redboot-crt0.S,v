head	1.9;
access;
symbols
	newlib-2_2_0:1.9.0.2
	newlib-2_1_0:1.9
	newlib-2_0_0:1.8
	newlib-1_20_0:1.7
	newlib-1_19_0:1.6
	newlib-1_18_0:1.6
	newlib-1_17_0-arc:1.6.0.8
	binutils-arc-20080908-branch:1.6.0.6
	binutils-arc-20080908-branchpoint:1.6
	newlib-1_17_0:1.6
	newlib-1_16_0:1.6
	newlib-1_15_0:1.6
	newlib-csl-coldfire-4_1-32:1.6
	newlib-csl-sourcerygxx-4_1-32:1.6
	newlib-csl-innovasic-fido-3_4_4-33:1.6
	newlib-csl-coldfire-4_1-30:1.6
	newlib-csl-sourcerygxx-4_1-30:1.6
	newlib-csl-coldfire-4_1-28:1.6
	newlib-csl-sourcerygxx-4_1-28:1.6
	newlib-csl-arm-2006q3-27:1.6
	newlib-csl-sourcerygxx-4_1-27:1.6
	newlib-csl-arm-2006q3-26:1.6
	newlib-csl-sourcerygxx-4_1-26:1.6
	newlib-csl-sourcerygxx-4_1-24:1.6
	newlib-csl-sourcerygxx-4_1-23:1.6
	newlib-csl-sourcerygxx-4_1-21:1.6
	newlib-csl-arm-2006q3-21:1.6
	newlib-csl-arm-2006q3-19:1.6
	newlib-csl-sourcerygxx-4_1-19:1.6
	newlib-csl-sourcerygxx-4_1-18:1.6
	newlib-csl-sourcerygxx-3_4_4-25:1.6
	newlib-csl-sourcerygxx-4_1-17:1.6
	newlib-csl-sourcerygxx-4_1-14:1.6
	newlib-csl-sourcerygxx-4_1-13:1.6
	newlib-csl-sourcerygxx-4_1-12:1.6
	newlib-csl-sourcerygxx-4_1-9:1.6
	newlib-csl-sourcerygxx-4_1-8:1.6
	newlib-csl-sourcerygxx-4_1-7:1.6
	newlib-csl-arm-2006q1-6:1.6
	newlib-csl-sourcerygxx-4_1-6:1.6
	newlib-csl-sourcerygxx-4_1-5:1.6
	newlib-csl-sourcerygxx-4_1-4:1.6
	newlib-autotools-branch:1.6.0.4
	newlib-csl-20060320-branch:1.6.0.2
	newlib-csl-20060320-branchpoint:1.6
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	newlib-1_12_0:1.4
	csl-arm-2003-q4:1.4
	newlib-1_11_0:1.4
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.9
date	2013.08.12.11.27.37;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.02.08.09.45;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.13.15.06.21;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.24.20.43.19;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.07.18.46.23;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.07.00.25.57;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.05.18.09.18;	author msalter;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.24.13.33.55;	author msalter;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.07.18.12.32;	author msalter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* aarch64/crt0.S: Remove 'start'.
	* arm/crt0.S: Ditto.
	* arm/redboot-crt0.S: Ditto.
@
text
@#include "arm.h"
	
    .file   "crt0.S"
	
#define XGLUE(a,b) a##b
#define GLUE(a,b) XGLUE(a,b)
	
#ifdef __USER_LABEL_PREFIX__
#define SYM_NAME( name ) GLUE (__USER_LABEL_PREFIX__, name)
#else
#error __USER_LABEL_PREFIX is not defined
#endif

    .text
	.syntax unified
     /* Setup the assembly entry point.  */
#ifdef THUMB_V7_V6M
.macro FUNC_START name
	.global \name
	.thumb_func
\name:
.endm
	.thumb
#else
.macro FUNC_START name
	.global \name
\name:
.endm
	.code 32
#endif
	FUNC_START SYM_NAME(_start)
    /* Unnecessary to set fp for v6-m/v7-m, which don't support
       ARM state.  */
#ifndef THUMB_V7M_V6M
	mov	fp, #0	/* Null frame pointer.  */
#endif
	movs	r7, #0	/* Null frame pointer for Thumb.  */

	/* Enable interrupts for gdb debugging.  */
#ifdef THUMB_V7_V6M
	cpsie if
#else
	mrs    r0, cpsr
	bic    r0, r0, #0xC0
	msr    cpsr, r0
#endif
	
	movs 	a2, #0			/* Second arg: fill value.  */
	ldr	a1, .LC1		/* First arg: start of memory block.  */
	ldr	a3, .LC2	
	subs	a3, a3, a1		/* Third arg: length of block.  */

#ifdef	GCRT0
	/* Zero out the bss without using memset. 
	   Using memset is bad because it may be instrumented for
	   profiling, but at this point, the profiling data structures
	   have not been set up. 
	   FIXME: This loop could be a lot more efficient.  */
	subs	a3, a3, #0
	beq	2f
1:	strb	a2, [a1]
	subs	a3, a3, #1
	add	a1, a1, #1
	bne	1b
2:	
	/* Nothing to left to clear.  */
#endif

#if defined(__thumb__) && !defined(THUMB_V7_V6M)
	/* Enter Thumb mode. */
	add	a4, pc, #1	/* Get the address of the Thumb block.  */
	bx	a4		/* Go there and start Thumb decoding.   */

	.code 16
	.global __change_mode
	.thumb_func
__change_mode:	
#endif

#ifndef	GCRT0
	bl	SYM_NAME(memset)
#endif
	bl	SYM_NAME(__get_memtop)
	subs	r0, r0, #32
	mov	sp, r0

#ifdef __USES_INITFINI__
	/* Some arm/elf targets use the .init and .fini sections
	   to create constructors and destructors, and for these
	   targets we need to call the _init function and arrange
	   for _fini to be called at program exit.  */
	ldr	r0, .Lfini
	bl	SYM_NAME (atexit)
	bl	SYM_NAME (_init)
#endif	

	movs 	a1, #0
	ldr	a2, .LC3
	movs	a3, a2
	bl	SYM_NAME(main)
    1:	bl	SYM_NAME(exit)
	b	1b
	.align	2
.LC1:
	.word	__bss_start__
.LC2:
	.word	__bss_end__
.LC3:
	.word	0
#ifdef __USES_INITFINI__
.Lfini:
	.word	SYM_NAME(_fini)
#endif
#if 0
#ifdef __thumb__
	.code 16
#endif
	.global SYM_NAME(__syscall)
#ifdef __thumb__
        .thumb_func
#else
	.align  4
#endif
SYM_NAME(__syscall):
	mov	r12, lr
#ifdef __thumb__
	swi	0x18
#else
	swi	0x180001
#endif
	mov	pc, r12
#endif
@


1.8
log
@	* arm/redboot-crt0.S (__change_mode): Replace mov with movs.
@
text
@a30 1
	FUNC_START SYM_NAME(start)
@


1.7
log
@	* arm/crt0.S: Support armv6-m processors in libgloss.
	* arm/swi.h: Likewise.
	* arm/trap.S: Likewise.
	* arm/redboot-crt0.S: Likewise.
	* arm/linux-crt0.c: Likewise.
	* arm/arm.h: New.
@
text
@d100 1
a100 1
	mov	a3, a2
@


1.6
log
@
2006-02-24  Paul Brook  <paul@@codesourcery.com>

	* arm/redboot-crt0.S: Use cps in Thumb-2 mode.
@
text
@d1 1
d15 1
d17 1
a17 1
#ifdef __thumb2__
a22 1
	.syntax unified
d33 3
d37 2
a38 1
	mov	r7, #0	/* Null frame pointer for Thumb.  */
d41 1
a41 1
#ifdef __thumb2__
d49 1
a49 1
	mov 	a2, #0			/* Second arg: fill value.  */
d52 1
a52 1
	sub	a3, a3, a1		/* Third arg: length of block.  */
d70 2
a71 1
#if defined(__thumb__) && !defined(__thumb2__)	/* Enter Thumb mode. */
d85 1
a85 1
	sub	r0, r0, #32
d98 1
a98 1
	mov 	a1, #0
@


1.5
log
@
2006-02-07  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Add Thumb-2 startup code.
        * arm/redboot-crt0.S: Ditto.
        * arm/libcfunc.c (do_AngelSWI): Use AngelSWIInsn.
        * arm/swi.h (AngelSWIInsn, AngelSWIAsm): Define.
        * arm/trap.S: Disable for Thumb-2.
@
text
@d36 3
d42 1
@


1.4
log
@
2002-11-08 Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/Makefile.in: Add support for new pid specs.
        * arm/coff-iq80310.specs: Change to allow future support.
        * arm/elf-iq80310.specs: Ditto.
        * arm/elf-redboot.specs: Ditto.
        * arm/coff-redboot.ld: Add EH frame support.
        * arm/redboot-crt0.S: Add optional code to clear bss without
        memset.
        * arm/coff-pid.specs: New file.
        * arm/elf-pid.specs: New file.
@
text
@d15 17
a31 5
    .code 32
    .globl SYM_NAME(start)
    .globl SYM_NAME(_start)
SYM_NAME(start):
SYM_NAME(_start):
d61 1
a61 1
#ifdef __thumb__		/* Enter Thumb mode. */
@


1.3
log
@Add init/fini support.
@
text
@a0 1

d14 1
a14 3
     /*
      * Setup the assembly entry point.
      */
d20 2
a21 2
	mov	fp, #0	/* Null frame pointer */
	mov	r7, #0	/* Null frame pointer for Thumb */
d23 1
a23 1
	/* enable interrupts for gdb debugging */
d28 2
a29 2
	mov 	a2, #0			/* Second arg: fill value */
	ldr	a1, .LC1		/* First arg: start of memory block */
d31 17
a47 1
	sub	a3, a3, a1		/* Third arg: length of block */
d49 3
a51 3
#ifdef __thumb__		/* Enter Thumb mode.... */
	add	a4, pc, #1	/* Get the address of the Thumb block */
	bx	a4		/* Go there and start Thumb decoding  */
d59 1
d61 1
a61 1
	
a92 1
	
@


1.2
log
@Use __get_memtop to put stack in high memory.
@
text
@d52 10
d68 1
d75 4
@


1.1
log
@Add ARM support
@
text
@d48 4
@

