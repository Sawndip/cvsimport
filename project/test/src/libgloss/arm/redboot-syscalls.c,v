head	1.4;
access;
symbols
	newlib-2_2_0:1.4.0.6
	newlib-2_1_0:1.4
	newlib-2_0_0:1.4
	newlib-1_20_0:1.4
	newlib-1_19_0:1.4
	newlib-1_18_0:1.4
	newlib-1_17_0-arc:1.4.0.4
	binutils-arc-20080908-branch:1.4.0.2
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.3
	newlib-1_15_0:1.3
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	newlib-1_11_0:1.3
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.01.03.22.38.30;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.29.21.51.25;	author jlarmour;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.24.13.32.46;	author msalter;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.07.18.12.32;	author msalter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
2008-01-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/redboot-syscalls.c: Consistently supply _isatty if syscalls
        dir is used in newlib.
        * bfin/syscalls.c: Ditto.
        * cris/gensyscalls: Ditto.
        * fr30/syscalls.c: Ditto.
        * frv/isatty.c: Ditto.
        * iq2000/isatty.c: Ditto.
        * libnosys/isatty.c: Ditto.
        * m32r/isatty.c: Ditto.
        * mn10200/isatty.c: Ditto.
        * mn10300/isatty.c: Ditto.
        * xstormy16/isatty.c: New file with _isatty function.
@
text
@/*
 * redboot-syscalls.c -- provide system call support for RedBoot
 *
 * Copyright (c) 1997, 2001, 2002 Red Hat, Inc.
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 *
 */

#include <stdlib.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <errno.h>
#include "syscall.h"

// Use "naked" attribute to suppress C prologue/epilogue
static int __attribute__ ((naked)) __syscall(int func_no, ...)
{
    asm ("mov	r12, lr\n");
#ifdef __thumb__
    asm ("swi 0x18\n");
#else
    asm ("swi 0x180001\n");
#endif
    asm ("mov	pc, r12\n");
}

int
_close(int fd)
{
    int  err;
    err = __syscall(SYS_close, fd);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


void
_exit(int stat)
{
    while (1)
        __syscall(SYS_exit, stat);
}


int
_stat (const char *filename, struct stat *st)
{
    int err;
    err = __syscall(SYS_stat, filename, st);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}

int
_fstat (int file, struct stat *st)
{
    int err;
    err = __syscall(SYS_fstat, file, st);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}

int
_getpid(void)
{
    return 1;
}


int
_gettimeofday (void * tp, void * tzp)
{
    int err;
    err = __syscall(SYS_gettimeofday, tp, tzp);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


int
_isatty(int fd)
{
    int err;
    err = __syscall(SYS_isatty, fd);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


int
_kill(int pid, int sig)
{
  if(pid == 1)
    _exit(sig);
  return 0;
}


off_t
_lseek(int fd, off_t offset, int whence)
{
    int err;
    err = __syscall(SYS_lseek, fd, offset, whence);
    if (err<0)
      {
        errno = -err;
        return (off_t)-1;
      }
    return err;
}


int
_open(const char *buf, int flags, int mode)
{
    int err ;
    err = __syscall(SYS_open, buf, flags, mode);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


int
_write(int fd, const char *buf, int nbytes)
{
    int err;

    err = __syscall(SYS_write, fd, buf, nbytes);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


void
print(char *ptr)
{
  char *p = ptr;

  while (*p != '\0')
    p++;

  _write (1, ptr, p-ptr);
}

void
_raise (void)
{
    return;
}


int
_read(int fd, char *buf, int nbytes)
{
    int err;
    err = __syscall(SYS_read, fd, buf, nbytes);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}


extern char end[];                /* end is set in the linker command file */

char *heap_ptr;

char *
_sbrk (int nbytes)
{
    char        *base;

    if (!heap_ptr)
	heap_ptr = (char *)&end;
    base = heap_ptr;
    heap_ptr += nbytes;

    return base;
}


clock_t
_times(struct tms * tp)
{
    clock_t utime;
    int err;
    err = __syscall(SYS_times, &utime);
    if (err)
	utime = 0;

    if (tp) {
	tp->tms_utime = utime;
	tp->tms_stime = 0;
	tp->tms_cutime = 0;
	tp->tms_cstime = 0;
    }

    return utime;
}

int
_rename (const char *oldpath, const char *newpath)
{
    int err ;
    err = __syscall(SYS_rename, oldpath, newpath);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}

int
_unlink (const char *pathname)
{
    int err ;
    err = __syscall(SYS_unlink, pathname);
    if (err<0)
      {
        errno = -err;
        return -1;
      }
    return err;
}

int
_system (const char *command)
{
    int err ;
    err = __syscall(SYS_system, command);
    return err;
}

#define SYS_meminfo     1001

void *
__get_memtop(void)
{
  unsigned long totmem = 0, topmem = 0;
  int numbanks;

  __syscall(SYS_meminfo, (unsigned long)&totmem, (unsigned long)&topmem, 0);
  return (void*)topmem;
}
@


1.3
log
@	* arm/syscall.h: New file. To define extra syscall values for RedBoot.

	* arm/redboot-syscalls.c (_close): Fix setting of errno value.
	(_lseek): Ditto.
	(_open): Ditto.
	(_write): Ditto.
	(_read): Ditto.
	(_rename): New function.
	(_system): Ditto.
	(_stat): Ditto.
	(_unlink): Call a syscall for this now.
	(isatty): Ditto.
	(_fstat): Ditto.
	(_gettimeofday): Ditto.
@
text
@d106 1
a106 1
isatty(int fd)
@


1.2
log
@(_times): Unconditionally use SYS_times.
(__get_memtop): New funtion to return top of memory.
@
text
@d41 5
a45 2
    if (err)
	errno = err;
d59 13
d74 8
a81 3
    st->st_mode = S_IFCHR;
    st->st_blksize = 4096;
    return 0;
d94 8
a101 1
    return 0;
d108 8
a115 1
    return (1);
d133 5
a137 2
    if (err)
	errno = err;
d147 5
a151 2
    if (err)
	errno = err;
d162 5
a166 2
    if (err)
	errno = err;
d194 5
a198 2
    if (err)
	errno = err;
d240 12
d256 8
a263 1
  return -1;
d266 7
@


1.1
log
@Add ARM support
@
text
@d4 1
a4 1
 * Copyright (c) 1997, 2001 Cygnus Support
a177 1
#ifdef HAVE_BSP_CLOCK
d179 1
a179 1
    err = __syscall(SYS_utime, &utime);
a181 3
#else
    utime = 0;
#endif
d200 12
@

