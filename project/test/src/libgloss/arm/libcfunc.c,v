head	1.9;
access;
symbols
	newlib-2_2_0:1.9.0.6
	newlib-2_1_0:1.9
	newlib-2_0_0:1.9
	newlib-1_20_0:1.9
	newlib-1_19_0:1.9
	newlib-1_18_0:1.9
	newlib-1_17_0-arc:1.9.0.4
	binutils-arc-20080908-branch:1.9.0.2
	binutils-arc-20080908-branchpoint:1.9
	newlib-1_17_0:1.9
	newlib-1_16_0:1.9
	newlib-1_15_0:1.8
	newlib-csl-coldfire-4_1-32:1.7.2.1
	newlib-csl-sourcerygxx-4_1-32:1.7.2.1
	newlib-csl-innovasic-fido-3_4_4-33:1.7.2.1
	newlib-csl-coldfire-4_1-30:1.7.2.1
	newlib-csl-sourcerygxx-4_1-30:1.7.2.1
	newlib-csl-coldfire-4_1-28:1.7.2.1
	newlib-csl-sourcerygxx-4_1-28:1.7.2.1
	newlib-csl-arm-2006q3-27:1.7.2.1
	newlib-csl-sourcerygxx-4_1-27:1.7.2.1
	newlib-csl-arm-2006q3-26:1.7.2.1
	newlib-csl-sourcerygxx-4_1-26:1.7.2.1
	newlib-csl-sourcerygxx-4_1-24:1.7.2.1
	newlib-csl-sourcerygxx-4_1-23:1.7.2.1
	newlib-csl-sourcerygxx-4_1-21:1.7.2.1
	newlib-csl-arm-2006q3-21:1.7.2.1
	newlib-csl-arm-2006q3-19:1.7.2.1
	newlib-csl-sourcerygxx-4_1-19:1.7.2.1
	newlib-csl-sourcerygxx-4_1-18:1.7.2.1
	newlib-csl-sourcerygxx-3_4_4-25:1.8
	newlib-csl-sourcerygxx-4_1-17:1.7
	newlib-csl-sourcerygxx-4_1-14:1.7
	newlib-csl-sourcerygxx-4_1-13:1.7
	newlib-csl-sourcerygxx-4_1-12:1.7
	newlib-csl-sourcerygxx-4_1-9:1.7
	newlib-csl-sourcerygxx-4_1-8:1.7
	newlib-csl-sourcerygxx-4_1-7:1.7
	newlib-csl-arm-2006q1-6:1.7
	newlib-csl-sourcerygxx-4_1-6:1.7
	newlib-csl-sourcerygxx-4_1-5:1.7
	newlib-csl-sourcerygxx-4_1-4:1.7
	newlib-autotools-branch:1.7.0.4
	newlib-csl-20060320-branch:1.7.0.2
	newlib-csl-20060320-branchpoint:1.7
	newlib-1_14_0:1.6
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1;
locks; strict;
comment	@ * @;


1.9
date	2006.12.25.23.05.24;	author kazu;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.05.19.46.18;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.07.18.46.23;	author jjohnstn;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.11.30.23.37.14;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.17.18.56.41;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.02.19.32.06;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.02.19.28.31;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.18.16.18.17;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.09.19.06.50;	author jjohnstn;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.01.15.28.54;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* arm/licfunc.c (do_AngelSWI): Remove.
	* arm/syscalls.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New.
@
text
@/* Support files for GNU libc.  Files in the C namespace go here.
   Files in the system namespace (ie those that start with an underscore)
   go in syscalls.c.
   
   Note: These functions are in a seperate file so that OS providers can
   overrride the system call stubs (defined in syscalls.c) without having
   to provide libc funcitons as well.  */

#include "swi.h"
#include <errno.h>
#include <unistd.h>

unsigned __attribute__((weak))
alarm (unsigned seconds)
{
	(void)seconds;
	return 0;
}

clock_t _clock(void);
clock_t __attribute__((weak))
clock(void)
{
      return _clock();
}

int _isatty(int fildes);
int __attribute__((weak))
isatty(int fildes)
{
	return _isatty(fildes);
}

int __attribute__((weak))
pause(void)
{
	errno = ENOSYS;
	return -1;
}

#include <sys/types.h>
#include <time.h>

unsigned __attribute__((weak))
sleep(unsigned seconds)
{
	clock_t t0 = _clock();
	clock_t dt = seconds * CLOCKS_PER_SEC;

	while (_clock() - t0  < dt);
	return 0;
}

int __attribute__((weak))
usleep(useconds_t useconds)
{
	clock_t t0 = _clock();
	clock_t dt = useconds / (1000000/CLOCKS_PER_SEC);

	while (_clock() - t0  < dt);
	return 0;
}
@


1.8
log
@
2006-06-05  Shaun Jackman  <sjackman@@gmail.com>

        * arm/syscalls.c (kill) [ARM_RDI_MONITOR]: Use the signal
        argument to choose an ADP exception reason.
        * arm/libcfunc.c (abort): Remove this function.
@
text
@a12 14
#ifdef ARM_RDI_MONITOR
static inline int
do_AngelSWI (int reason, void * arg)
{
  int value;
  asm volatile ("mov r0, %1; mov r1, %2; " AngelSWIInsn " %a3; mov %0, r0"
       : "=r" (value) /* Outputs */
       : "r" (reason), "r" (arg), "i" (AngelSWI) /* Inputs */
       : "r0", "r1", "lr"
		/* Clobbers r0 and r1, and lr if in supervisor mode */);
  return value;
}
#endif /* ARM_RDI_MONITOR */

@


1.7
log
@
2006-02-07  Paul Brook  <paul@@codesourcery.com>

        * arm/crt0.S: Add Thumb-2 startup code.
        * arm/redboot-crt0.S: Ditto.
        * arm/libcfunc.c (do_AngelSWI): Use AngelSWIInsn.
        * arm/swi.h (AngelSWIInsn, AngelSWIAsm): Define.
        * arm/trap.S: Disable for Thumb-2.
@
text
@a26 12
void
abort (void)
{
  extern void _exit (int n);
#ifdef ARM_RDI_MONITOR
  do_AngelSWI (AngelSWI_Reason_ReportException,
	      (void *) ADP_Stopped_RunTimeError);
#else
  _exit(17);
#endif
}

@


1.7.2.1
log
@2006-09-01  Paul Brook  <paul@@codesourcery.com>

	libgloss/
	* arm/Makefile.in: Include _exit.c in BSPs.  Add rdimon-ram.ld.
	Build linker scripts instead of spec files for rdimon and rdpmon.
	Pass CRT0 ad BSP to arm.sc.
	* arm/_exit.c: New file.
	* arm/arm.sc: Add STARTUP, GROUP and SEARCH_DIR.  Remove defaults
	for ROM and RAM.
	* arm/crt0.S: Give Thumb-2 symbols function type.
	Skip generic Arm init code for Thumb-2.
	Add _nmi_isr and _fault_isr.
	* arm/libcfunc.c (do_AngelSWI): Remove.
	* arm/swi.h (do_AngelSWI): New function.
	* arm/syscalls.c (do_AngelSWI): Remove.
	(_exit): Remove.
	(isatty): New function.
@
text
@d13 14
@


1.6
log
@
2005-11-30  Shaun Jackman  <sjackman@@gmail.com>

        * arm/libcfunc.c (clock, sleep, usleep): New functions.
        * arm/syscalls.c (_clock): New function.
        (_times): Call _clock.
@
text
@d18 1
a18 1
  asm volatile ("mov r0, %1; mov r1, %2; swi %a3; mov %0, r0"
@


1.5
log
@
2005-11-17  Shaun Jackman  <sjackman@@gmail.com>

	* libgloss/arm/libcfunc.c (isatty): Call _isatty. GDB now supports
	the IsTTY SWI that _isatty calls.
@
text
@d46 7
d61 1
a61 1
pause (void)
d66 23
@


1.4
log
@
Fixed comment spacing.
@
text
@d50 1
a50 4
	/* GDB does not yet support the IsTTY SWI that _isatty
	 * calls, so always return true for now.  */
	(void)fildes;
	return 1;
@


1.3
log
@
2005-08-02  Shaun Jackman  <sjackman@@gmail.com>

        * libgloss/arm/libcfunc.c (isatty): New function.
@
text
@d51 1
a51 1
	 * calls, so always return true for now. */
@


1.2
log
@
2005-07-18  Shaun Jackman  <sjackman@@gmail.com>

        * libgloss/arm/libcfunc.c (abort): Call _exit instead of the RDI swi.
        (alarm): Add the weak attribute.
        (pause): New function. Return ENOSYS.
        * libgloss/arm/syscalls.c (_getpid): Add the weak attribute.
        (_fstat): Ditto.
        (_stat): Ditto.
        (_link): Ditto. Return ENOSYS.
        (_unlink): Call the swi instead of returning -1.
        (_raise): Add the weak attribute. Return ENOSYS.
        (isatty): Rename to _isatty. Call the swi instead of returning 1.
        (_system): Call the swi instead of returning ENOSYS.
        (_rename): Ditto.
@
text
@d46 10
@


1.1
log
@
2004-06-09  Toralf Lund  <toralf@@procaptura.com>

        * arm/crt0.S: Copied from newlib and it now also sets up stacks for
        FIQ and IRQ mode, plus calls hardware_init_hook() and
        software_init_hook() if present.
        * arm/libcfunc.c, arm/swi.h, arm/syscalls.c: Copied
        from newlib.
        * arm/Makefile.in: Build crt0.o, rdpmon-crt0.o, rdimon-crt0.o,
        librdpmon.a, librdimon.a - support file for "bare" setup, as well
        as "RDP" and "RDI" monitors.
        * arm/coff-rdpmon.specs, arm/elf-rdpmon.specs,
        arm/coff-rdimon.specs, arm/elf-rdimon.specs: gcc specs files to go
        with above mentioned support libs and startfiles.
@
text
@d8 1
d10 2
a13 1

a26 1

d30 1
d35 1
a35 1
 asm ("mov r0,#17\nswi %a0" :: "i" (SWI_Exit));
d39 9
a47 2
void
alarm (void)
d49 2
@

