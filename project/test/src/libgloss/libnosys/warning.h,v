head	1.5;
access;
symbols
	newlib-2_2_0:1.5.0.10
	newlib-2_1_0:1.5
	newlib-2_0_0:1.5
	newlib-1_20_0:1.5
	newlib-1_19_0:1.5
	newlib-1_18_0:1.5
	newlib-1_17_0-arc:1.5.0.8
	binutils-arc-20080908-branch:1.5.0.6
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.5
	newlib-1_15_0:1.5
	newlib-csl-coldfire-4_1-32:1.5
	newlib-csl-sourcerygxx-4_1-32:1.5
	newlib-csl-innovasic-fido-3_4_4-33:1.5
	newlib-csl-coldfire-4_1-30:1.5
	newlib-csl-sourcerygxx-4_1-30:1.5
	newlib-csl-coldfire-4_1-28:1.5
	newlib-csl-sourcerygxx-4_1-28:1.5
	newlib-csl-arm-2006q3-27:1.5
	newlib-csl-sourcerygxx-4_1-27:1.5
	newlib-csl-arm-2006q3-26:1.5
	newlib-csl-sourcerygxx-4_1-26:1.5
	newlib-csl-sourcerygxx-4_1-24:1.5
	newlib-csl-sourcerygxx-4_1-23:1.5
	newlib-csl-sourcerygxx-4_1-21:1.5
	newlib-csl-arm-2006q3-21:1.5
	newlib-csl-arm-2006q3-19:1.5
	newlib-csl-sourcerygxx-4_1-19:1.5
	newlib-csl-sourcerygxx-4_1-18:1.5
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5
	newlib-csl-sourcerygxx-4_1-14:1.5
	newlib-csl-sourcerygxx-4_1-13:1.5
	newlib-csl-sourcerygxx-4_1-12:1.5
	newlib-csl-sourcerygxx-4_1-9:1.5
	newlib-csl-sourcerygxx-4_1-8:1.5
	newlib-csl-sourcerygxx-4_1-7:1.5
	newlib-csl-arm-2006q1-6:1.5
	newlib-csl-sourcerygxx-4_1-6:1.5
	newlib-csl-sourcerygxx-4_1-5:1.5
	newlib-csl-sourcerygxx-4_1-4:1.5
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.5
	newlib-csl-arm-2005-q1b:1.5
	newlib-csl-arm-2005-q1a:1.5
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.5
date	2005.01.21.21.55.07;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.18.19.27.44;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.15.00.17.51;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.11.20.48.04;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
2005-01-21  Hans-Peter Nilsson  <hp@@axis.com>

	* libnosys/warning.h (stub_warning): Remove "warning: " prefix.
@
text
@#ifndef __WARNING_H__
#define __WARNING_H__

#ifdef HAVE_GNU_LD
# ifdef HAVE_ELF

/* We want the .gnu.warning.SYMBOL section to be unallocated.  */
#  ifdef HAVE_ASM_PREVIOUS_DIRECTIVE
#   define __make_section_unallocated(section_string)   \
  asm(".section " section_string "\n .previous");
#  elif defined (HAVE_ASM_POPSECTION_DIRECTIVE)
#   define __make_section_unallocated(section_string)   \
  asm(".pushsection " section_string "\n .popsection");
#  else
#   define __make_section_unallocated(section_string)
#  endif

#  ifdef HAVE_SECTION_ATTRIBUTES
#   define link_warning(symbol, msg)                     \
  static const char __evoke_link_warning_##symbol[]     \
    __attribute__ ((section (".gnu.warning." __SYMBOL_PREFIX #symbol), \
		   __used__)) = msg;
#  else
#   define link_warning(symbol, msg)
#  endif

#else /* !ELF */

#  define link_warning(symbol, msg)             \
  asm(".stabs \"" msg "\",30,0,0,0\n"   \
      ".stabs \"" __SYMBOL_PREFIX #symbol "\",1,0,0,0\n");
# endif
#else /* !GNULD */
/* We will never be heard; they will all die horribly.  */
# define link_warning(symbol, msg)
#endif

/* A canned warning for sysdeps/stub functions.
   The GNU linker prepends a "warning: " string.  */
#define stub_warning(name) \
  link_warning (name, \
                #name " is not implemented and will always fail")

#endif /* __WARNING_H__ */
@


1.4
log
@
2005-01-18  Hans-Peter Nilsson  <hp@@axis.com>

        * libnosys/warning.h (link_warning) [HAVE_GNU_LD and HAVE_ELF]:
        Prefix symbol in section name with __SYMBOL_PREFIX.  Do not use
        __make_section_unallocated.  Mark magic variable as used.
@
text
@d38 2
a39 1
/* A canned warning for sysdeps/stub functions.  */
d42 1
a42 1
                "warning: " #name " is not implemented and will always fail")
@


1.3
log
@
2005-01-14  Hans-Peter Nilsson  <hp@@axis.com>

        * libnosys/warning.h (__make_section_unallocated)
        [HAVE_ASM_PREVIOUS_DIRECTIVE, HAVE_ASM_POPSECTION_DIRECTIVE]: Use "\n"
        instead of ";" to delimit assembly lines.
@
text
@a19 1
  __make_section_unallocated (".gnu.warning." #symbol)  \
d21 2
a22 1
    __attribute__ ((section (".gnu.warning." #symbol))) = msg;
@


1.2
log
@	* libnosys/acconfig.h (HAVE_SECTION_ATTRIBUTES): New macro.
	* libnosys/configure.in: Check gcc's support for section attributes.
	* libnosys/warning.h: Have link_warning expand to nothing if gcc
	does not support section attributes.
@
text
@d10 1
a10 1
  asm(".section " section_string "; .previous");
d13 1
a13 1
  asm(".pushsection " section_string "; .popsection");
@


1.1
log
@20000317 sourceware import
@
text
@d18 2
a19 1
#  define link_warning(symbol, msg)                     \
d23 3
@

