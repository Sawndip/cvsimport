head	1.12;
access;
symbols
	newlib-2_2_0:1.12.0.2
	newlib-2_1_0:1.11
	newlib-2_0_0:1.11
	newlib-1_20_0:1.9
	newlib-1_19_0:1.7
	newlib-1_18_0:1.5
	newlib-1_17_0-arc:1.2.0.4
	binutils-arc-20080908-branch:1.2.0.2
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1;
locks; strict;
comment	@# @;


1.12
date	2014.09.22.15.26.45;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2012.12.17.17.44.35;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.24.04.41.10;	author vapier;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.18.18.41.20;	author vapier;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.27.03.40.00;	author vapier;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.16.17.06.55;	author vapier;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.15.20.32.10;	author vapier;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.08.16.35.34;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.16.15.59.40;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.08.21.17.58;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.14.22.00.45;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.08.19.36.56;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* configure.in: Remove config_libnosys=false
	* configure: Regenerated.
	* msp430/nosyscalls.S: Rename to ciosyscalls.S
	* msp430/Makefile.in: Change LIBNOSYS to LIB_CIO.
@
text
@#
#

DESTDIR =
VPATH = @@srcdir@@ @@srcdir@@/..
srcdir = @@srcdir@@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..
top_srcdir = @@top_srcdir@@

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

host_alias = @@host_alias@@
target_alias = @@target_alias@@

bindir = @@bindir@@
libdir = @@libdir@@
tooldir = $(exec_prefix)/$(target_alias)

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =

SHELL =	/bin/sh

mkinstalldirs = $(SHELL) $(top_srcdir)/../../mkinstalldirs

CC = @@CC@@

AS = @@AS@@
AR = @@AR@@
LD = @@LD@@
RANLIB = @@RANLIB@@

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

OBJS		=
CFLAGS		=
SCRIPTS		=

# Here is all of the simulator stuff
SIM_SCRIPTS	=
SIM_LDFLAGS	=
SIM_BSP		= libsim.a
SIM_CRT0	= crt0.o
SIM_OBJS	= syscalls.o clear_cache_range.o
SIM_TEST	= sim-test
SIM_INSTALL	= install-sim

# Here is all of the development board stuff
BOARD_SCRIPTS	= bfin-common-sc.ld  bfin-common-mc.ld bfin-common-mc0.ld \
	bf504.ld bf506.ld \
	bf512.ld bf514.ld bf516.ld bf518.ld \
	bf522.ld bf523.ld bf524.ld bf525.ld bf526.ld bf527.ld \
	bf531.ld bf532.ld bf533.ld \
	bf534.ld bf536.ld bf537.ld \
	bf538.ld bf539.ld \
	bf542.ld bf544.ld bf547.ld bf548.ld bf549.ld \
	bf561.ld bf561a.ld bf561b.ld bf561m.ld \
	bf606.ld bf606c0.ld bf606c1.ld bf606m.ld \
	bf607.ld bf607c0.ld bf607c1.ld bf607m.ld \
	bf608.ld bf608c0.ld bf608c1.ld bf608m.ld \
	bf609.ld bf609c0.ld bf609c1.ld bf609m.ld \
	bf592.ld
BOARD_LDFLAGS	=
BOARD_BSP	= libbfinbsp.a
BOARD_CRT0S	= basiccrt.o basiccrts.o
BOARD_CRT0S	+= basiccrt561.o basiccrt561s.o basiccrt561b.o
# BOARD_CRT0S	+= basiccrt60x.o basiccrt60xs.o basiccrt60xc1.o
BOARD_OBJS	= clear_cache_range.o _exit.o
BOARD_TEST	=
BOARD_INSTALL	= install-board

# Host specific makefile fragment comes in here.
@@host_makefile_frag@@

INCLUDES += -I$(srcdir)/include
#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
all: ${SIM_CRT0} ${SIM_BSP} ${BOARD_CRT0S} ${BOARD_BSP}

#
# here's where we build the board support packages for each target
#
${BOARD_BSP}: ${OBJS} ${BOARD_OBJS}
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

${SIM_BSP}: ${OBJS} ${SIM_OBJS}
	${AR} ${ARFLAGS} ${SIM_BSP} ${SIM_OBJS} ${OBJS}
	${RANLIB} ${SIM_BSP}

#
#
#
crt0.o: crt0.S

basiccrt.o: basiccrt.S
ifeq (,$(findstring mcpu=,$(CFLAGS)))
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf532-any -o $@@ -c $<
else
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -o $@@ -c $<
endif

basiccrts.o: basiccrt.S
ifeq (,$(findstring mcpu=,$(CFLAGS)))
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf532-any -o $@@ -c $<
else
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -o $@@ -c $<
endif

basiccrt561.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-none -o $@@ -c $<
else
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-any -o $@@ -c $<
endif

basiccrt561s.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-none -o $@@ -c $<
else
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-any -o $@@ -c $<
endif

basiccrt561b.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) -D__ADSPBF561_COREB__ $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-none -o $@@ -c $<
else
	$(CC) -D__ADSPBF561_COREB__ $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf561-any -o $@@ -c $<
endif

basiccrt60x.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-none -o $@@ -c $<
else
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-any -o $@@ -c $<
endif

basiccrt60xs.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-none -o $@@ -c $<
else
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-any -o $@@ -c $<
endif

basiccrt60xc1.o: basiccrt.S
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
	$(CC) -D__ADSPBF60x_CORE1__ $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-none -o $@@ -c $<
else
	$(CC) -D__ADSPBF60x_CORE1__ $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf608-any -o $@@ -c $<
endif

clean mostlyclean:
	rm -f a.out core *.i *.o ${SIM_BSP} ${BOARD_BSP}

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status *~

.PHONY: install info install-info clean-info
install: ${SIM_INSTALL} ${BOARD_INSTALL}

install-sim:
	for x in ${SIM_CRT0} ${SIM_BSP} ${SIM_SCRIPTS}; do \
	 ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x || exit $$?; \
	done

install-board:
	for x in ${BOARD_CRT0S} ${BOARD_BSP}; do \
	 ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x || exit $$?; \
	done
	-if [ -z "${MULTISUBDIR}" ]; then \
	  for x in ${BOARD_SCRIPTS}; do \
	   ${INSTALL_DATA} ${srcdir}/$$x $(DESTDIR)${tooldir}/lib/$$x; \
	  done; \
	  ${mkinstalldirs} ${DESTDIR}${tooldir}/include; \
	  for i in ${srcdir}/include/*.h; do \
	   ${INSTALL_DATA} $$i ${DESTDIR}${tooldir}/include/`basename $$i`; \
	  done; \
	  ${mkinstalldirs} ${DESTDIR}${tooldir}/include/sys; \
	  for i in ${srcdir}/include/sys/*.h; do \
	   ${INSTALL_DATA} $$i ${DESTDIR}${tooldir}/include/sys/`basename $$i`; \
	  done; \
	else true; fi

doc:
info:
install-info:
clean-info:

Makefile: Makefile.in config.status @@host_makefile_frag_path@@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
@


1.11
log
@
2012-12-17  Stuart Henderson  <shenders@@gcc.gnu.org>

	* bfin/Makefile.in: Add BF60x support.
	* bfin/basiccrt.S: Add core1 support.
	* bfin/bf606.ld: New file.
	* bfin/bf606c0.ld: New file.
	* bfin/bf606c1.ld: New file.
	* bfin/bf606m.ld: New file.
	* bfin/bf607.ld: New file.
	* bfin/bf607c0.ld: New file.
	* bfin/bf607c1.ld: New file.
	* bfin/bf607m.ld: New file.
	* bfin/bf608.ld: New file.
	* bfin/bf608c0.ld: New file.
	* bfin/bf608c1.ld: New file.
	* bfin/bf608m.ld: New file.
	* bfin/bf609.ld: New file.
	* bfin/bf609c0.ld: New file.
	* bfin/bf609c1.ld: New file.
	* bfin/bf609m.ld: New file.
	* bfin/bfin-common-mc0.ld: New file.
	* bfin/include/cdefBF606.h : New file.
	* bfin/include/cdefBF607.h : New file.
	* bfin/include/cdefBF608.h : New file.
	* bfin/include/cdefBF609.h : New file.
	* bfin/include/defBF606.h : New file.
	* bfin/include/defBF607.h : New file.
	* bfin/include/defBF608.h : New file.
	* bfin/include/defBF609.h : New file.
	* bfin/include/sys/_adi_platform.h: Add BF60x support.
	* bfin/include/sys/anomaly_macros_rtl.h : Clean up.
@
text
@d81 1
a81 1
BOARD_CRT0S	+= basiccrt60x.o basiccrt60xs.o basiccrt60xc1.o
@


1.10
log
@libgloss: bfin: add a better default _exit
@
text
@d63 1
a63 1
BOARD_SCRIPTS	= bfin-common-sc.ld  bfin-common-mc.ld \
d72 4
d81 1
d147 21
@


1.9
log
@libgloss: bfin: add clear_cache_range support (for gcc)
@
text
@d77 1
a77 1
BOARD_OBJS	= clear_cache_range.o
@


1.8
log
@libgloss: bfin: abort on install errors
@
text
@d58 1
a58 1
SIM_OBJS	= syscalls.o
d74 1
a74 1
BOARD_BSP	= # We actually use libnosys.a
d77 1
a77 1
BOARD_OBJS	=
d94 4
@


1.7
log
@libgloss: bfin: add support for bf592 processors

Import the headers from VisualDSP and add a linker script for them.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d149 1
a149 1
	 ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
d154 1
a154 1
	 ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
@


1.6
log
@libgloss: bfin: add support for bf50x processors

Import the headers from VisualDSP and add linker scripts for them.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d71 2
a72 1
	bf561.ld bf561a.ld bf561b.ld bf561m.ld
@


1.5
log
@
2009-10-08  Jie Zhang  <jie.zhang@@analog.com>

        * bfin/Makefile.in (basiccrt.o, basiccrts.o): Use
        -mcpu=bf532-any for the default multilib.
@
text
@d64 1
@


1.4
log
@
2009-09-16  Mike Frysinger  <michael.frysinger@@analog.com>

        * bfin/Makefile.in (BOARD_SCRIPTS): Add bf512.ld, bf514.ld,
        and bf516.ld, bf518.ld.
        * bfin/bf512.ld: New file.
        * bfin/bf514.ld: Likewise.
        * bfin/bf516.ld: Likewise.
        * bfin/bf518.ld: Likewise
@
text
@d102 3
d106 1
d109 3
d113 1
@


1.3
log
@
2009-09-08  Jie Zhang  <jie.zhang@@analog.com>

        * bfin/Makefile.in (basiccrt.o, basiccrts.o): Don't use
        -mcpu=bf532-any for the default multilib.
@
text
@a62 1
# BF531, BF532, BF533, BF537
d64 1
@


1.2
log
@
2008-08-14  Jie Zhang  <jie.zhang@@analog.com>

        * bfin/Makefile.in: (top_srcdir): Define.
        (mkinstalldirs): Define.
        (BOARD_SCRIPTS): Define.
        (BOARD_LDFLAGS): Define.
        (BOARD_BSP): Define.
        (BOARD_CRT0S): Define.
        (BOARD_OBJS): Define.
        (BOARD_TEST): Define.
        (BOARD_INSTALL): Define.
        (INCLUDES): Add -I$(srcdir)/include.
        (all): Add ${BOARD_CRT0S} and ${BOARD_BSP}.
        (.c.S): Remove target.
        (crt0.o): New target.
        (basiccrt.o): Likewise.
        (basiccrtb.o): Likewise.
        (basiccrts.o): Likewise.
        (basiccrt561.o, basiccrt561s.o, basiccrt561b.o): Likewise
        (clean mostlyclean): Remove ${BOARD_BSP}.
        (install): Depend on ${BOARD_INSTALL}.
        (install-sim): Reformat.
        (install-board): New target.
        * bfin/basiccrt.S: Remove useless __ADSPBF561_COREB__ in
        workaround code for 05000229.
        * bfin/syscalls.c (do_syscall): Use `EXCPT 0' instead of
        `RAISE 0' for syscall.
        * bfin/basiccrt.S: New file.
        * bfin/bf5*ld: New file.
        * bfin/bfin-common-mc.ld: New file.
        * bfin/bfin-common-sc.ld: New file.
        * bfin/include/blackfin.h: New file.
        * bfin/include/cdefBF5*.h: New file.
        * bfin/include/cdef_LPBlackfin.h: New file.
        * bfin/include/cdefblackfin.h: New file.
        * bfin/include/cplb.h: New file.
        * bfin/include/cplbtab.h: New file.
        * bfin/include/defBF5*.h: New files.
        * bfin/include/def_LPBlackfin.h: New files.
        * bfin/include/defblackfin.h: New file.
        * bfin/include/sys/_adi_platform.h: New file.
        * bfin/include/sys/anomaly_macros_rtl.h: New file.
        * bfin/include/sys/excause.h: New file.
        * bfin/include/sys/exception.h: New file.
        * bfin/include/sys/mc_typedef.h: New file.
        * bfin/include/sys/platform.h: New file.
        * bfin/include/sys/pll.h: New file.
        * bfin/include/sysreg.h: New file.
        * libnosys/configure.in (MISSING_SYSCALL_NAMES): Don't define
        for bfin.
        * libnosys/configure: Regenerate.
@
text
@a101 1
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
a102 3
else
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf532-any -o $@@ -c $<
endif
a104 1
ifneq (,$(findstring mcpu=bf532-none,$(CFLAGS)))
a105 3
else
	$(CC) -D__BFIN_SDRAM $(CFLAGS_FOR_TARGET) $(INCLUDES) $(CFLAGS) -mcpu=bf532-any -o $@@ -c $<
endif
a120 1

@


1.1
log
@
2006-11-08  Jie Zhang  <jzhang918@@gmail.com>

        * bfin/configure.in: New.
        * bfin/crt0.S: New.
        * bfin/Makefile.in: New.
        * bfin/syscalls.c: New.
        * bfin/aclocal.m4: Generate.
        * bfin/configure: Ditto.
        * configure.in: Add support for bfin-*-*.
        * configure: Regenerate.
        * syscall.h (SYS_argc): Define.
        (SYS_argnlen): Define.
        (SYS_argn): Define.
@
text
@d10 1
d33 2
d62 17
d82 1
d87 1
a87 1
all: ${SIM_CRT0} ${SIM_BSP}
d99 37
a135 2
.c.S:
	${CC} ${CFLAGS_FOR_TARGET} -c $<
d138 1
a138 1
	rm -f a.out core *.i *.o $(SIM_BSP)
d144 1
a144 1
install: ${SIM_INSTALL}
d147 21
a167 1
	set -e; for x in ${SIM_CRT0} ${SIM_BSP} ${SIM_SCRIPTS}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
@

