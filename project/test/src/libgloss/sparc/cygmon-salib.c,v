head	1.3;
access;
symbols
	newlib-2_2_0:1.3.0.6
	newlib-2_1_0:1.3
	newlib-2_0_0:1.3
	newlib-1_20_0:1.3
	newlib-1_19_0:1.3
	newlib-1_18_0:1.3
	newlib-1_17_0-arc:1.3.0.4
	binutils-arc-20080908-branch:1.3.0.2
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.3
date	2007.07.06.17.00.13;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.17.17.29.02;	author joel;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.52;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2007-07-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/syscalls.c (gettimeofday): Change to POSIX signature
        where second argument is passed as void *.
        * bfin/syscalls.c (gettimeofday): Ditto.
        * cris/gensyscalls (gettimeofday): Ditto.
        * cris/linunistd.h (gettimeofday): Ditto.
        * crx/time.c (gettimeofday): Ditto.
        * frv/sim-time.c (gettimeofday): Ditto.
        * i386/cygmon-salib.c (gettimeofday): Ditto.
        * libnosys/gettod.c (gettimeofday): Ditto.
        * m68k/io-gettimeofday.c (gettimeofday): Ditto.
        * sparc/cygmon-salib.c (gettimeofday): Ditto.
        * spu/gettimeofday.c (gettimeofday): Ditto.
@
text
@#ifdef TARGET_CPU_SPARC64
#include <sys/types.h>
#endif
#include <sys/time.h>

void
putTtyChar(int c)
{
  /* 2 is fork under solaris; bad juju */
  asm("	mov %i0,%o0		\n\
	or %g0,2,%g1		\n\
	ta 8			\n\
	nop");
}

int
write(int fd,char *ptr,int amt)
{
  if (fd < 0 || fd > 2)
    {
      return -1;
    }
  asm(" or %g0, 4, %g1		\n\
	ta 8			\n\
	nop");
  return amt;
}

int
read(int fd,char *ptr,int amt)
{
  if (fd < 0 || fd > 2)
    {
      return -1;
    }
  asm(" or %g0, 3, %g1		\n\
	ta 8			\n\
	nop");
  return amt;
}

void
_exit(int code)
{
  while(1) {
    asm(" or %g0,1,%g1		\n\
	  ta 8			\n\
	  nop			\n\
	  ta 1			\n\
	  nop");
  }
}

int
setitimer(int which, const struct itimerval *value, struct itimerval *ovalue)
{
  asm(" or %g0, 158, %g1	\n\
	ta 8			\n\
	nop");
}



long
sbrk (unsigned long amt)
{
  extern char _end;
  static char *ptr = 0;
  char *res;
  if (ptr == 0)
    ptr = &_end;
  if (amt == 0)
    return (long)ptr;

  if (((long)ptr) % 8)
    ptr = ptr + (8 - (((long)(ptr)) % 8));
  res = ptr;
  ptr += amt;
  return (long)res;
}

#ifdef TARGET_CPU_SPARC64
long
_sbrk_r (void *foo, unsigned long amt)
{
  return sbrk(amt);
}

long
_fstat_r (void *foo, void *bar, void *baz)
{
  return -1;
}

long
_brk_r (void *foo)
{
  return sbrk(0);
}

int
_open_r (char *filename, int mode)
{
  return open (filename, mode);
}

int
_close_r (int fd)
{
  return close(fd);
}
#endif

int
close (int fd)
{
  return 0;
}

int
fstat(int des,void *buf)
{
  return -1;
}

int
lseek(int des,unsigned long offset, int whence)
{
  return -1;
}

int
isatty(int fd)
{
  return (fd < 3);
}

int
kill (int pid, int signal)
{
  asm ("or %g0, 37, %g1		\n\
	ta 8			\n\
	nop");
}

int
getpid ()
{
  return -1;
}

int
getitimer (int which, struct itimerval *value)
{
  asm ("or %g0, 157, %g1	\n\
	ta 8			\n\
	nop");
}

void
__install_signal_handler (void *func)
{
  asm ("mov %o0, %o1		\n\
	mov %g0, %o0		\n\
	or %g0, 48, %g1		\n\
	ta 8			\n\
	nop");
}

int
gettimeofday (struct timeval *tp, void *tzp)
{
  asm ("or %g0, 156, %g1	\n\
	ta 8			\n\
	nop");
}

int
stime (long *seconds)
{
  asm ("or %g0, 25, %g1		\n\
	ta 8			\n\
	nop");
}

int
add_mapping (long vma, long pma, long size)
{
  asm ("or %g0, 115, %g1	\n\
	ta 8			\n\
	nop");
}

int
remove_mapping (long vma, long vma_end)
{
  asm ("or %g0, 117, %g1	\n\
	ta 8			\n\
	nop");
}

int
open (char *filename, int mode)
{
  return -1;
}

void *
__getProgramArgs (int *argv)
{
  int *res;

  /* 184 is tsolsys under solaris; bad juju */
  asm ("mov %1, %%o0		\n\
	or %%g0, 184, %%g1	\n\
	ta 8			\n\
	nop			\n\
	mov %%o0, %0" : "=r" (res) : "r" (argv): "g1");
  return res;
}
@


1.2
log
@2002-04-17	Joel Sherrill <joel@@OARcorp.com>

	* sparc/cygmon-salib.c, sparc/erc32-stub.c: Don't use multi-line
	strings.
@
text
@d171 1
a171 1
gettimeofday (struct timeval *tp, struct timezone *tzp)
@


1.1
log
@20000317 sourceware import
@
text
@d10 3
a12 3
  asm("	mov %i0,%o0
	or %g0,2,%g1
	ta 8
d23 2
a24 2
  asm(" or %g0, 4, %g1
	ta 8
d36 2
a37 2
  asm(" or %g0, 3, %g1
	ta 8
d46 5
a50 5
    asm("	or %g0,1,%g1
		ta 8
		nop
		ta 1
		nop");
d57 2
a58 2
  asm(" or %g0, 158, %g1
	ta 8
d141 2
a142 2
  asm ("or %g0, 37, %g1
	ta 8
d155 2
a156 2
  asm ("or %g0, 157, %g1
	ta 8
d163 4
a166 4
  asm ("mov %o0, %o1
	mov %g0, %o0
	or %g0, 48, %g1
	ta 8
d173 2
a174 2
  asm ("or %g0, 156, %g1
	ta 8
d181 2
a182 2
  asm ("or %g0, 25, %g1
	ta 8
d189 2
a190 2
  asm ("or %g0, 115, %g1
	ta 8
d197 2
a198 2
  asm ("or %g0, 117, %g1
	ta 8
d214 4
a217 4
  asm ("mov %1, %%o0
	or %%g0, 184, %%g1
	ta 8
	nop
@

