head	1.2;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.22.17.38.39;	author yselkowitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.52;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* sparc/crt0.S: Declare use of system registers.
* sparc/cygmon-crt0.S: Ditto.
* sparc/erc32-crt0.S: Ditto.
* sparc/traps.S: Ditto.
@
text
@/*
 * This is based on the file srt0.s provided with the binary
 * distribution of the SPARC Instruction Simulator (SIS) found
 * at ftp://ftp.estec.esa.nl/pub/ws/wsd/erc32.
 */

#include "asm.h"

	.register %g2, #scratch
	.register %g3, #scratch

	.data
        .align  8
SYM(environ):
        .long   0

	.text

	.globl SYM(start)
SYM(start):
	sethi	%hi(__stack), %g1
        or      %g1,%lo(__stack),%g1
	mov	%g1, %sp		! set the stack pointer
        mov     %sp, %fp

        /* clear the bss */
        sethi %hi(__bss_start),%g2
        or    %g2,%lo(__bss_start),%g2	! start of bss
        sethi %hi(_end),%g3
        or    %g3,%lo(_end),%g3		! end of bss
        mov   %g0,%g1			! so std has two zeros
zerobss:
        std    %g0,[%g2]
        add    %g2,8,%g2
        cmp    %g2,%g3
        bleu,a zerobss
        nop

        /* move data segment to proper location */
 
#if 0
relocd:
        set (_endtext),%g2		! g2 = start of data in aout file
        set (_environ),%g4		! g4 = start of where data should go
        set (_edata),%g3		! g3 = end of where data should go
        subcc   %g3, %g4, %g5		! g5 = length of data

        subcc   %g4, %g2, %g0		! need to relocate data ?
        ble     initok
        ld      [%g4], %g6
        subcc   %g6, 1, %g0
        be      initok
mvdata:
        subcc   %g5, 8, %g5
        ldd     [%g2 + %g5], %g6
        bg      mvdata
        std     %g6, [%g4 + %g5]

initok:
#endif

	call	SYM(__fix_ctors)
	nop
        call    SYM(main)
        nop

	/* call exit from the C library so atexit gets called, and the
	 * C++ destructors get run. This calls our exit routine below	 * when it's done.
	 */
	call	SYM(exit)
	nop

	.globl	SYM(_exit)
SYM(_exit):
	set	0xdeadd00d, %o1		! Magic number for simulator.
        ta      0                       ! Halt if _main returns ...
        nop
 
@


1.1
log
@20000317 sourceware import
@
text
@d9 3
@

