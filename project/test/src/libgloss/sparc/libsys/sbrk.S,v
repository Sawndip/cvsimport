head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2000.03.17.22.48.52;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.1
log
@20000317 sourceware import
@
text
@! sbrk() system call

#include "syscallasm.h"

	TEXT_SECTION
	ALIGN (4)
#ifdef REENT
	GLOBAL (ASM_SYMBOL (_sbrk_r))
ASM_SYMBOL (_sbrk_r):
	mov	%o0,%o5
	mov	%o1,%o0
#else
	GLOBAL (ASM_SYMBOL (sbrk))
ASM_SYMBOL (sbrk):
#endif
	add	%o0,7,%o0
	andn	%o0,7,%o0
	sethi	%hi (ASM_PRIVATE_SYMBOL (curbrk)),%o2
#ifdef __sparc_v9__
	lduw	[%o2+%lo (ASM_PRIVATE_SYMBOL (curbrk))],%o3
#else
	ld	[%o2+%lo (ASM_PRIVATE_SYMBOL (curbrk))],%o3
#endif
	add	%o3,7,%o3
	andn	%o3,7,%o3
	add	%o3,%o0,%o0
	mov	%o0,%o4
	mov	SYS_brk,%g1
	ta	SYSCALL_TRAP
	bcs	err
	nop
	st	%o4,[%o2+%lo (ASM_PRIVATE_SYMBOL (curbrk))]
	jmpl	%o7+8,%g0
	mov	%o3,%o0

#ifdef REENT
	GLOBAL (ASM_SYMBOL (_brk_r))
ASM_SYMBOL (_brk_r):
	mov	%o0,%o5
	mov	%o1,%o0
#else
	GLOBAL (ASM_SYMBOL (brk))
ASM_SYMBOL (brk):
#endif
	add	%o0,7,%o0
	andn	%o0,7,%o0
	mov	%o0,%o2
	mov	SYS_brk,%g1
	ta	SYSCALL_TRAP
	bcs	err
	nop
	sethi	%hi (ASM_PRIVATE_SYMBOL (curbrk)),%o3
	st	%o2,[%o3+%lo (ASM_PRIVATE_SYMBOL (curbrk))]
	retl
	mov	%g0,%o0

err:
#ifdef REENT
	sethi	%hi (ASM_PRIVATE_SYMBOL (cerror_r)),%g1
	or	%g1,%lo (ASM_PRIVATE_SYMBOL (cerror_r)),%g1
#else
	sethi	%hi (ASM_PRIVATE_SYMBOL (cerror)),%g1
	or	%g1,%lo (ASM_PRIVATE_SYMBOL (cerror)),%g1
#endif
	jmpl	%g1,%g0
	mov	%o5,%o1
@
