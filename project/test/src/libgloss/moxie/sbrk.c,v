head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.2
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.04.22.19.48.07;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2009-04-22  Anthony Green  <green@@moxielogic.com>

        * configure.in: Add moxie support.
        * configure: Regenerate.
        * moxie/aclocal.m4, moxie/configure, moxie/configure.in,
        moxie/crt0.S, moxie/fstat.c, moxie/getpid.c, isatty.c,
        moxie/kill.c, moxie/Makefile.in, moxie/moxie-elf-common.ld,
        moxie/print.c, moxie/putnum.c, moxie/qemu.ld, moxie/qemu-time.c,
        moxie/qemu-write.c, moxie/sbrk.c, moxie/sim-close.S,
        moxie/sim-exit.S,
        moxie/sim-inbyte.c, moxie/sim.ld, moxie/sim-lseek.c,
        moxie/sim-lseek.S, moxie/sim-open.S, moxie/sim-read.S, moxie/sim-time.c,
        moxie/sim-unlink.S, moxie/sim-write.S, moxie/stat.c: New files.
@
text
@/* sbrk.c -- allocate memory dynamically.
 * 
 * Copyright (c) 2008 Anthony Green
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */
#include <errno.h>
#include "glue.h"

/* just in case, most boards have at least some memory */
#ifndef RAMSIZE
#  define RAMSIZE             (caddr_t)0x100000
#endif

char *__heap_ptr = (char *)&_end;

/*
 * sbrk -- changes heap size size. Get nbytes more
 *         RAM. We just increment a pointer in what's
 *         left of memory on the board.
 */
char *
_sbrk (nbytes)
     int nbytes;
{
  char *base;
  char *sp;

  base = __heap_ptr;
  __heap_ptr += nbytes;

  return base;
/* FIXME: We really want to make sure we don't run out of RAM, but this
 *       isn't very portable.
 */
#if 0
  if ((RAMSIZE - heap_ptr - nbytes) >= 0) {
    base = heap_ptr;
    heap_ptr += nbytes;
    return (base);
  } else {
    errno = ENOMEM;
    return ((char *)-1);
  }
#endif
}
@
