head	1.3;
access;
symbols
	newlib-2_2_0:1.3.0.10
	newlib-2_1_0:1.3
	newlib-2_0_0:1.3
	newlib-1_20_0:1.3
	newlib-1_19_0:1.3
	newlib-1_18_0:1.3
	newlib-1_17_0-arc:1.3.0.8
	binutils-arc-20080908-branch:1.3.0.6
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3
	newlib-1_15_0:1.3
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.01.07.21.10.54;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.12.23.14.24;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.51;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2002-01-07  Chris Demetriou  <cgd@@broadcom.com>

	* crt0.S: Check for definition of __mips64 rather than
	checking (__mips < 3).
	* pmon.S: Likewise.
	* cygmon.c (sysCall): Avoid multi-line string literals.
@
text
@/*
 * pmon.S -- low-level entry points into PMON monitor.
 *
 * Copyright (c) 1996, 1997, 2002 Cygnus Support
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#ifdef __mips16
/* This file contains 32 bit assembly code.  */
	.set nomips16
#endif

#if !defined(__mips64)
  /* This machine does not support 64-bit operations.  */
  #define ADDU addu
  #define SUBU subu
#else
  /* This machine supports 64-bit operations.  */
  #define ADDU daddu
  #define SUBU dsubu
#endif

#include "regs.S"

	.text
	.align	2

#ifdef LSI
  #define PMON_VECTOR 0xffffffffbfc00200
#else
  #define PMON_VECTOR 0xffffffffbfc00500
#endif

#ifndef __mips_eabi
/* Provide named functions for entry into the monitor: */
#define INDIRECT(name,index)				\
	.globl	name;					\
	.ent	name;					\
	.set	noreorder;				\
name:	la	$2,+(PMON_VECTOR+((index)*4));		\
	lw	$2,0($2);				\
	j	$2;					\
	nop;						\
	.set	reorder;				\
	.end	name

#else
#define INDIRECT(name,index)				\
	.globl	name;					\
	.ent	name;					\
	.set	noreorder;				\
name:	la	$2,+(PMON_VECTOR+((index)*4));		\
	lw	$2,0($2);				\
	SUBU	sp,sp,0x40;				\
	sd	ra,0x38(sp);				\
	sd	fp,0x30(sp);				\
	jal	$2;					\
	move	fp,sp;					\
	ld	ra,0x38(sp);				\
	ld	fp,0x30(sp);				\
	j	ra;					\
	ADDU	sp,sp,0x40;				\
	.set	reorder;				\
	.end	name
#endif


/* The following magic numbers are for the slots into the PMON monitor */
/* The first are used as the lo-level library run-time: */
INDIRECT(read,0)
INDIRECT(write,1)
INDIRECT(open,2)
INDIRECT(close,3)
/* The following are useful monitor routines: */
INDIRECT(mon_ioctl,4)
INDIRECT(mon_printf,5)
INDIRECT(mon_vsprintf,6)
INDIRECT(mon_ttctl,7)
INDIRECT(mon_cliexit,8)
INDIRECT(mon_getenv,9)
INDIRECT(mon_onintr,10)
INDIRECT(mon_flush_cache,11)
INDIRECT(_flush_cache,11)
INDIRECT(mon_exception,12)

/* The following routine is required by the "print()" function: */
	.globl	outbyte
	.ent	outbyte
	.set	noreorder
outbyte:
	subu	sp,sp,0x20	/* allocate stack space for string */
	sd	ra,0x18(sp)	/* stack return address */
	sd	fp,0x10(sp)	/* stack frame-pointer */
	move	fp,sp		/* take a copy of the stack pointer */
	/* We leave so much space on the stack for the string (16
	   characters), since the call to mon_printf seems to corrupt
	   the 8bytes at offset 8 into the string/stack. */
	sb	a0,0x00(sp)	/* character to print */
	sb	z0,0x01(sp)	/* NUL terminator */
	jal	mon_printf	/* and output the string */
	move	a0,sp		/* take a copy of the string pointer {DELAY SLOT} */

	move	sp,fp		/* recover stack pointer */
	ld	ra,0x18(sp)	/* recover return address */
	ld	fp,0x10(sp)	/* recover frame-pointer */
	j	ra		/* return to the caller */
	addu	sp,sp,0x20	/* dump the stack space {DELAY SLOT} */
	.set	reorder
	.end	outbyte

/* The following routine is required by the "sbrk()" function: */
	.globl	get_mem_info
	.ent	get_mem_info
	.set	noreorder
get_mem_info:
	# in:  a0 = pointer to 3 word structure
	# out: void
	subu	sp,sp,0x18	/* create some stack space */
	sd	ra,0x00(sp)	/* stack return address */
	sd	fp,0x08(sp)	/* stack frame-pointer */
	sd	a0,0x10(sp)	/* stack structure pointer */
	move	fp,sp		/* take a copy of the stack pointer */

	# The monitor has already sized memory, but unfortunately we
	# do not have access to the data location containing the
	# memory size.

	jal	__sizemem
	nop

	ld	a0,0x10(sp)	# recover structure pointer
	sw	v0,0(a0)	# amount of memory available

	# Deal with getting the cache size information:
	mfc0	a1, C0_CONFIG
	nop
	nop
	andi	a2,a1,0x7 << 9	# bits 11..9 for instruction cache size
	sll	a2,a2,12 - 8
	sw 	a2,4(a0)
	andi	a2,a1,0x7 << 6	# bits 8..6 for data cache size
	sll	a2,a2,12 - 5
	sw 	a2,8(a0)	# data cache size
	#
	move	sp,fp		/* recover stack pointer */
	ld	ra,0x00(sp)	/* recover return address */
	ld	fp,0x08(sp)	/* recover frame-pointer */
	j	ra		/* return to the caller */
	addu	sp,sp,0x18	/* restore stack pointer {DELAY SLOT} */
	.set	reorder
	.end	get_mem_info

#ifdef LSI

# For the LSI MiniRISC board, we can safely assume that we have
# at least one megabyte of RAM.

	.globl	__sizemem
	.ent	__sizemem
__sizemem:
	li	v0,0x100000
	j	ra
	.end	__sizemem
#else


#endif
/* EOF pmon.S */
@


1.2
log
@
2002-11-12 Jeff Johnston  <jjohnstn@@redhat.com>

        *  mips/Makefile.in: Add cygmon support.
        *  mips/configure.in: Ditto.
        *  mips/configure: Regenerated.
        *  mips/crt0_cygmon.S: New file.
        *  mips/cygmon.c: Ditto.
        *  mips/pmon.S: Minor formatting and copyright changes.
        *  mips/crt0.S: Ditto.
@
text
@d22 1
a22 1
#if __mips < 3
@


1.1
log
@20000317 sourceware import
@
text
@d4 1
a4 1
 * Copyright (c) 1996, 1997 Cygnus Support
@

