head	1.13;
access;
symbols
	newlib-2_2_0:1.13.0.2
	newlib-2_1_0:1.11
	newlib-2_0_0:1.11
	newlib-1_20_0:1.11
	newlib-1_19_0:1.11
	newlib-1_18_0:1.11
	newlib-1_17_0-arc:1.11.0.4
	binutils-arc-20080908-branch:1.11.0.2
	binutils-arc-20080908-branchpoint:1.11
	newlib-1_17_0:1.11
	newlib-1_16_0:1.11
	newlib-1_15_0:1.11
	newlib-csl-coldfire-4_1-32:1.9
	newlib-csl-sourcerygxx-4_1-32:1.9
	newlib-csl-innovasic-fido-3_4_4-33:1.9
	newlib-csl-coldfire-4_1-30:1.9
	newlib-csl-sourcerygxx-4_1-30:1.9
	newlib-csl-coldfire-4_1-28:1.9
	newlib-csl-sourcerygxx-4_1-28:1.9
	newlib-csl-arm-2006q3-27:1.9
	newlib-csl-sourcerygxx-4_1-27:1.9
	newlib-csl-arm-2006q3-26:1.9
	newlib-csl-sourcerygxx-4_1-26:1.9
	newlib-csl-sourcerygxx-4_1-24:1.9
	newlib-csl-sourcerygxx-4_1-23:1.9
	newlib-csl-sourcerygxx-4_1-21:1.9
	newlib-csl-arm-2006q3-21:1.9
	newlib-csl-arm-2006q3-19:1.9
	newlib-csl-sourcerygxx-4_1-19:1.9
	newlib-csl-sourcerygxx-4_1-18:1.9
	newlib-csl-sourcerygxx-3_4_4-25:1.9
	newlib-csl-sourcerygxx-4_1-17:1.9
	newlib-csl-sourcerygxx-4_1-14:1.9
	newlib-csl-sourcerygxx-4_1-13:1.9
	newlib-csl-sourcerygxx-4_1-12:1.9
	newlib-csl-sourcerygxx-4_1-9:1.9
	newlib-csl-sourcerygxx-4_1-8:1.9
	newlib-csl-sourcerygxx-4_1-7:1.9
	newlib-csl-arm-2006q1-6:1.9
	newlib-csl-sourcerygxx-4_1-6:1.9
	newlib-csl-sourcerygxx-4_1-5:1.9
	newlib-csl-sourcerygxx-4_1-4:1.9
	newlib-autotools-branch:1.9.0.4
	newlib-csl-20060320-branch:1.9.0.2
	newlib-csl-20060320-branchpoint:1.9
	newlib-1_14_0:1.9
	newlib-csl-arm-2005-q1b:1.9
	newlib-csl-arm-2005-q1a:1.9
	newlib-1_13_0:1.9
	csl-arm-2004-q3:1.9
	csl-arm-2004-q1a:1.9
	csl-arm-2004-q1:1.9
	newlib-1_12_0:1.9
	csl-arm-2003-q4:1.9
	newlib-1_11_0:1.5
	cygnus_cvs_20020108_pre:1.3
	newlib-1_10_0:1.3
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.13
date	2014.11.28.08.51.03;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2014.11.27.00.28.09;	author jjohnstn;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.27.16.12.51;	author jjohnstn;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.24.18.19.18;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.26.20.22.16;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.18.19.32.24;	author rsandifo;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.08.12.54.29;	author rsandifo;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.07.21.10.54;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.12.23.14.24;	author jjohnstn;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.12.15.37.03;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.11.14.24.35;	author meissner;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.31.20.18.49;	author echristo;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.51;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* mips/crt0.S: Configure processor based on .MIPS.abiflags.
	Remove FPU availability check, just use the pre-processor flags
	to indicicate what the user wanted.
	* mips/abiflags.S: New file.
	* mips/regs.S (SR_MSA): Define macro.
	* mips/mti32.ld: Place .MIPS.abiflags and wrap in marker symbols.
	* mips/mti64.ld: Likewise.
	* mips/mti64_64.ld: Likewise.
	* mips/mti64_n32.ld: Likewise.
@
text
@/*
 * crt0.S -- startup file for MIPS.
 *
 * Copyright (c) 1995, 1996, 1997, 2001 Cygnus Support
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

/* This file does not use any floating-point ABI.  */
	.gnu_attribute 4,0

#ifdef __mips16
/* This file contains 32 bit assembly code.  */
	.set nomips16
#endif

#include "regs.S"
#include "abiflags.S"

/*
 * Set up some room for a stack. We just grab a chunk of memory.
 */
#define STACK_SIZE  0x4000
#define GLOBAL_SIZE 0x2000

#define STARTUP_STACK_SIZE	0x0100

/* This is for referencing addresses that are not in the .sdata or
   .sbss section under embedded-pic, or before we've set up gp.  */
#ifdef __mips_embedded_pic
# ifdef __mips64
#  define LA(t,x) la t,x-PICBASE ; daddu t,s0,t
# else
#  define LA(t,x) la t,x-PICBASE ; addu t,s0,t
# endif
#else /* __mips_embedded_pic */
# define LA(t,x) la t,x
#endif /* __mips_embedded_pic */

	.comm	__memsize, 12
	.comm	__lstack, STARTUP_STACK_SIZE

	.text
	.align	2

/* Without the following nop, GDB thinks _start is a data variable.
 * This is probably a bug in GDB in handling a symbol that is at the
 * start of the .text section.
 */
	nop

	.globl	hardware_hazard_hook .text
	.globl	_start
	.ent	_start
_start:
#ifdef __mips_embedded_pic
#define PICBASE start_PICBASE
	.set	noreorder
	PICBASE = .+8
        bal	PICBASE
	nop
	move	s0,$31
	.set	reorder
#endif
#if __mips<3
#  define STATUS_MASK (SR_CU1|SR_PE)
#else
/* Post-mips2 has no SR_PE bit.  */
#  ifdef __mips64
/* Turn on 64-bit addressing and additional float regs.  */
#    define STATUS_MASK (SR_CU1|SR_FR|SR_KX|SR_SX|SR_UX)
#  else
#    if __mips_fpr==32
#      define STATUS_MASK (SR_CU1)
#    else
/* Turn on additional float regs.  */
#      define STATUS_MASK (SR_CU1|SR_FR)
#    endif
#  endif
#endif

	/* Clear Cause register.  */
	mtc0	zero,C0_CAUSE
	nop

	/* Read MIPS_abiflags structure and set status/config registers
	   accordingly.  */
	.weak	__MIPS_abiflags_start
	.weak	__MIPS_abiflags_end
	LA	(t0,__MIPS_abiflags_start)
	LA	(t1,__MIPS_abiflags_end)
	addiu	t1,t1,-24
	move	v0,zero			/* Mask for C0_SR.  */

	/* Branch to 1f is the .MIPS.abiflags section is not 24 bytes.  This
	   indicates it is either missing or corrupt.  */
	bne	t0,t1,1f

	/* Check isa_level.  */
	lbu	t1,ABIFlags_isa_level(t0)
	sltu	v1,t1,3			/* Is MIPS < 3?  */
	xori	t1,t1,64		/* Is MIPS64?  */
	beq	v1,zero,4f
	li	v1,SR_PE
	or	v0,v0,v1		/* Enable soft reset.  */
4:
	li	v1,(SR_KX|SR_SX|SR_UX)
	bne	t1,zero,5f
	or	v0,v0,v1		/* Enable extended addressing.  */
5:
	/* Check fp_abi.  */
	lbu	t1,ABIFlags_fp_abi(t0)
	xori	t1,t1,Val_GNU_MIPS_ABI_FP_SOFT
	li	v1,SR_CU1
	beq	t1,zero,2f		/* Skip MSA and cpr1_size checks.  */
	or	v0,v0,v1		/* Enable co-processor 1.  */

	/* Check cpr1_size.  */
	lbu	t1,ABIFlags_cpr1_size(t0)
	xori	t1,t1,AFL_REG_64
	li	v1,SR_FR
	bne	t1,zero,3f
	or	v0,v0,v1		/* Enable 64-bit FPU registers.  */
3:
	/* Check ases.  */
	lw	t1,ABIFlags_ases(t0)
	andi	t1,t1,AFL_ASE_MSA
	li	v1,SR_FR
	beq	t1,zero,2f
	or	v0,v0,v1		/* Enable 64-bit FPU registers.  */
	li	v1,SR_MSA
	.set	push
	.set	mips32
	mtc0	v1,C0_CONFIG,5		/* Enable MSA.  */
	.set	pop
	b	2f

1:
	/* MIPS_abiflags structure is not available.  Set status/config
	   registers based on flags defined by compiler.  */
#ifdef __mips_soft_float
	li	v0,(STATUS_MASK-(STATUS_MASK & SR_CU1))
#else
	li	v0,STATUS_MASK
#endif

2:
	/* Set C0_SR,  */
	mtc0	v0,C0_SR
	nop

	/* Avoid hazard from C0_SR changes.  */
	LA	(t0, hardware_hazard_hook)
	beq	t0,zero,2f
	jalr	t0
2:


/* Fix high bits, if any, of the PC so that exception handling doesn't get
   confused.  */
	LA (v0, 3f)
	jr	v0
3:
	LA (gp, _gp)				# set the global data pointer
	.end _start

/*
 * zero out the bss section.
 */
	.globl	__memsize
	.globl	get_mem_info .text
	.globl	__stack
	.globl	__global
	.ent	zerobss
zerobss:
	LA (v0, _fbss)
	LA (v1, _end)
	beq	v0,v1,2f
1:
	addiu	v0,v0,4
	sw	zero,-4(v0)
	bne	v0,v1,1b
2:
	la	t0, __lstack			# make a small stack so we
	addiu	sp, t0, STARTUP_STACK_SIZE	# can run some C code
	la	a0, __memsize			# get the usable memory size
	jal	get_mem_info

	/* setup the stack pointer */
	LA (t0, __stack)			# is __stack set ?
	bne	t0,zero,4f

	/* NOTE: a0[0] contains the amount of memory available, and
	         not the last memory address. */
	la	a0, __memsize
	lw	t0,0(a0)			# last address of memory available
	la	t1,K0BASE			# cached kernel memory
	addu	t0,t0,t1			# get the end of memory address
	/* Allocate 32 bytes for the register parameters.  Allocate 16
	   bytes for a null argv and envp.  Round the result up to 64
	   bytes to preserve alignment.  */
	subu	t0,t0,64
4:
	move	sp,t0				# set stack pointer
	.end	zerobss

/*
 * initialize target specific stuff. Only execute these
 * functions it they exist.
 */
	.globl	hardware_init_hook .text
	.globl	software_init_hook .text
	.type	_fini,@@function
	.type	_init,@@function
	.globl	atexit .text
	.globl	exit .text
	.ent	init
init:
	LA (t9, hardware_init_hook)		# init the hardware if needed
	beq	t9,zero,6f
	jalr	t9
6:
	LA (t9, software_init_hook)		# init the hardware if needed
	beq	t9,zero,7f
	jalr	t9
7:
	LA (a0, _fini)
	jal	atexit

#ifdef GCRT0
	.globl	_ftext
	.globl	_extext
	LA (a0, _ftext)
	LA (a1, _etext)
	jal	monstartup
#endif


	jal	_init				# run global constructors

	addiu	a1,sp,32			# argv = sp + 32
	addiu	a2,sp,40			# envp = sp + 40
#if __mips64
	sd	zero,(a1)			# argv[argc] = 0
	sd	zero,(a2)			# envp[0] = 0
#else
	sw	zero,(a1)
	sw	zero,(a2)
#endif
	move	a0,zero				# set argc to 0
	jal	main				# call the program start function

	# fall through to the "exit" routine
	move	a0,v0				# pass through the exit code
	jal	exit				# call libc exit to run the G++
						# destructors
	.end	init

 
/* Assume the PICBASE set up above is no longer valid below here.  */
#ifdef __mips_embedded_pic
#undef PICBASE
#endif
	
/*
 * _exit -- Exit from the application. Normally we cause a user trap
 *          to return to the ROM monitor for another run. NOTE: This is
 *	    the only other routine we provide in the crt0.o object, since
 *          it may be tied to the "_start" routine. It also allows
 *          executables that contain a complete world to be linked with
 *          just the crt0.o object.
 */
	.globl	hardware_exit_hook .text
	.globl	_exit
	.ent _exit
_exit:
7:
#ifdef __mips_embedded_pic
	/* Need to reinit PICBASE, since we might be called via exit()
	   rather than via a return path which would restore old s0.  */
#define PICBASE exit_PICBASE
	.set	noreorder
	PICBASE = .+8
	bal	PICBASE
	nop
	move	s0,$31
	.set	reorder
#endif
#ifdef GCRT0
	LA (t0, _mcleanup)
	jalr	t0
#endif
	LA (t0, hardware_exit_hook)
	beq	t0,zero,1f
	jalr	t0
1:

	# break instruction can cope with 0xfffff, but GAS limits the range:
	break	1023
	b	7b				# but loop back just in-case
	.end _exit
 
/* Assume the PICBASE set up above is no longer valid below here.  */
#ifdef __mips_embedded_pic
#undef PICBASE
#endif

/* EOF crt0.S */
@


1.12
log
@
2014-11-26  Matthew Fortune  <Matthew.Fortune@@imgtec.com>

        * mips/crt0.S: Remove .set noreorder throughout.
        (zerobss): Open code the bltu macro instruction so that the
        zero-loop does not have a NOP in the branch delay slot.
@
text
@d17 3
d26 1
d89 3
a91 3
	li	v0, STATUS_MASK
	mtc0	v0, C0_SR
	mtc0	zero, C0_CAUSE
d94 52
a145 4
	/* Avoid hazard from FPU enable and other SR changes.  */
	LA (t0, hardware_hazard_hook)
	beq	t0,zero,1f
	jalr	t0
d147 7
d155 4
a158 2
/* Check for FPU presence.  Don't check if we know that soft_float is
   being used.  (This also avoids illegal instruction exceptions.)  */
d160 2
a161 18
#ifndef __mips_soft_float
	li	t2,0xAAAA5555
	mtc1	t2,fp0		/* write to FPR 0 */
	mtc1	zero,fp1	/* write to FPR 1 */
	mfc1	t0,fp0
	mfc1	t1,fp1
	nop
	bne	t0,t2,1f	/* check for match */
	bne	t1,zero,1f	/* double check */
	j	2f		/* FPU is present. */
#endif
1:
	/* FPU is not present.  Set status register to say that. */
	li	v0, (STATUS_MASK-(STATUS_MASK & SR_CU1))
	mtc0	v0, C0_SR
	nop
	/* Avoid hazard from FPU disable.  */
	LA (t0, hardware_hazard_hook)
d167 2
a168 2
/* Fix high bits, if any, of the PC so that exception handling
   doesn't get confused.  */
@


1.11
log
@
2006-11-27  Jeff Johnston  <jjohnstn@@redhat.com>

        * mips/crt0.S: Fix preprocessor statements from previous patch
        to be ANSI.
@
text
@a59 1
	.set	noreorder
d62 1
d67 1
d93 1
a93 3
	nop
	jal	t0
	nop
a106 1
	nop
a107 1
	nop
a108 1
	nop
d118 1
a118 3
	nop
	jal	t0
	nop
a125 1
	nop
d141 6
a146 5
3:
	sw	zero,0(v0)
	bltu	v0,v1,3b
	addiu	v0,v0,4				# executed in delay slot

a150 1
	nop
a154 1
	nop
d184 1
a184 3
	nop
	jal	t9
	nop
d188 1
a188 3
	nop
	jal	t9
	nop
a191 1
	nop
a198 1
	nop
a202 1
	nop
d213 1
a214 1
	move	a0,zero				# set argc to 0
d217 1
a219 1
	move	a0,v0				# pass through the exit code
d245 1
d250 1
d254 1
a254 2
	jal	t0
	nop
d258 1
a258 3
	nop
	jal	t0
	nop
a263 1
	nop
@


1.10
log
@
2006-11-24  Thiemo Seufer  <ths@@mips.com>
            Nigel Stephens  <nigel@@mips.com>

        * mips/crt0.S (_start): Use all available float registers. Don't touch
        SR_PE on post-mips2 CPUs, it means soft reset there.
@
text
@d76 1
a76 1
#    ifdef __mips_fpr=32
@


1.9
log
@
2003-05-26  Eric Christopher  <echristo@@redhat.com>

        * mips/crt0.S: Remove stackbase variable set.
@
text
@d68 2
a69 2
#if !defined(__mips64) || (__mips_fpr==32)
#define STATUS_MASK (SR_CU1|SR_PE)
d71 12
a82 2
# For mips3 or mips4, turn on 64-bit addressing and additional float regs
#define STATUS_MASK (SR_CU1|SR_PE|SR_FR|SR_KX|SR_SX|SR_UX)
@


1.8
log
@	* mips/crt0.S (zerobss): Reload __memsize after call.
@
text
@a45 1
	.comm   __stackbase,4
a165 1
	sw	sp,__stackbase			# keep this for future ref
@


1.7
log
@	* mips/crt0.S (_start): Allocate 64 bytes of stack instead of 32.
	Pass an empty argv and envp to main().
@
text
@d157 1
@


1.6
log
@
2002-01-07  Chris Demetriou  <cgd@@broadcom.com>

	* crt0.S: Check for definition of __mips64 rather than
	checking (__mips < 3).
	* pmon.S: Likewise.
	* cygmon.c (sysCall): Avoid multi-line string literals.
@
text
@d160 4
a163 10
	/* We must subtract 24 bytes for the 3 8 byte arguments to main, in
	   case main wants to write them back to the stack.  The caller is
	   supposed to allocate stack space for parameters in registers in
	   the old MIPS ABIs.  We must do this even though we aren't passing
	   arguments, because main might be declared to have them.

	   Some ports need a larger alignment for the stack, so we subtract
	   32, which satisifes the stack for the arguments and keeps the
	   stack pointer better aligned.  */
	subu	t0,t0,32			# and generate a starting stack-pointer
d210 10
a220 2
	jal	main				# call the program start function
	nop
@


1.5
log
@
2002-11-12 Jeff Johnston  <jjohnstn@@redhat.com>

        *  mips/Makefile.in: Add cygmon support.
        *  mips/configure.in: Ditto.
        *  mips/configure: Regenerated.
        *  mips/crt0_cygmon.S: New file.
        *  mips/cygmon.c: Ditto.
        *  mips/pmon.S: Minor formatting and copyright changes.
        *  mips/crt0.S: Ditto.
@
text
@d69 1
a69 1
#if (__mips < 3) || (__mips_fpr==32)
@


1.4
log
@
2002-07-12  Chris Demetriou  <cgd@@broadcom.com>

        * mips/array.ld (hardware_exit_hook, hardware_hazard_hook): New
        symbols for optionally-provided functions.
        * mips/ddb-kseg0.ld: Likewise.
        * mips/ddb.ld: Likewise.
        * mips/dve.ld: Likewise.
        * mips/idt.ld: Likewise.
        * mips/idt32.ld: Likewise.
        * mips/idt64.ld: Likewise.
        * mips/idtecoff.ld: Likewise.
        * mips/jmr3904app-java.ld: Likewise.
        * mips/jmr3904app.ld: Likewise.
        * mips/jmr3904dram-java.ld: Likewise.
        * mips/jmr3904dram.ld: Likewise.
        * mips/lsi.ld: Likewise.
        * mips/nullmon.ld: Likewise.
        * mips/pmon.ld: Likewise.
        * mips/crt0.S: Invoke hardware_exit_hook and hardware_hazard_hook
        functions if they are provided.
        (_exit): Handle __embedded_pic properly.
@
text
@d40 1
a40 1
#else /* __mips_embedded_pic */ 
d42 1
a42 1
#endif /* __mips_embedded_pic */ 
d119 1
a119 1
/* Fix high bits, if any, of the PC so that exception handling 
d164 1
a164 1
	   arguments, because main might be declared to have them. 
d212 1
d226 1
a267 1
	nop
d271 1
a271 1

@


1.3
log
@If -mfp32, do not enable 64-bit FPR registers on mips3
@
text
@d57 1
d63 1
d80 8
d110 6
d224 5
d238 1
d243 9
d253 2
a254 1
	jal	_mcleanup
d257 7
d270 5
@


1.2
log
@2001-03-30  Richard Henderson  <rth@@redhat.com>
	    Eric Christopher  <echristo@@redhat.com>

	* mips/crt0.S: Fix for .init/.fini sections.
@
text
@d4 1
a4 1
 * Copyright (c) 1995, 1996, 1997 Cygnus Support
d67 1
a67 1
#if __mips < 3
@


1.1
log
@20000317 sourceware import
@
text
@a118 1
	.globl	zerobss
d165 2
a166 1
	.globl	__do_global_dtors .text
a168 1
	.globl	init
d183 1
a183 1
	LA (a0, __do_global_dtors)
d195 3
@

