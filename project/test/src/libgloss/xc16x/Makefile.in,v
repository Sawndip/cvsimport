head	1.3;
access;
symbols
	newlib-2_2_0:1.3.0.2
	newlib-2_1_0:1.3
	newlib-2_0_0:1.3
	newlib-1_20_0:1.3
	newlib-1_19_0:1.3
	newlib-1_18_0:1.3;
locks; strict;
comment	@# @;


1.3
date	2009.12.16.20.00.55;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.10.17.22.11;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.10.17.07.04;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2009-12-16  Conny Marco Menebrocker <c-m-m@@gmx.de>

        * xc16x/Makefile.in: Remove extraneous stuff
        brought in by copy.
        * xc16x/configure.in: Ditto.
        * xc16x/configure: Regenerated.
@
text
@#
# Copyright (C) 2006 KPIT Cummins
# Copyright (C) 2009 Conny Marco Menebr√∂cker
# All rights reserved.
#
# Redistribution and use in source and binary forms is permitted
# provided that the above copyright notice and following paragraph are
# duplicated in all such forms.
#
# This file is distributed WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

DESTDIR =
VPATH = @@srcdir@@
srcdir = @@srcdir@@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

host_alias = @@host_alias@@
target_alias = @@target_alias@@
program_transform_name = @@program_transform_name@@

bindir = @@bindir@@
libdir = @@libdir@@
tooldir = $(exec_prefix)/$(target_alias)

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

SHELL =	/bin/sh

CC = @@CC@@

#AS = @@AS@@
AS = `if [ -f ${objroot}/../gas/as.new ] ; \
	then echo ${objroot}/../gas/as.new ; \
	else echo as ; fi`

AR = @@AR@@

#LD = @@LD@@
LD = `if [ -f ${objroot}/../ld/ld.new ] ; \
	then echo ${objroot}/../ld/ld.new ; \
	else echo ld ; fi`

RANLIB = @@RANLIB@@

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

CRT0 = crt0.o

# Generic object files common to all targets.
GENOBJS_NO_TRAP = close.o create.o crt0.o fstat.o getchar1.o \
    isatty.o lseek.o mem-layout.o misc.o open.o \
    read.o sbrk.o syscalls.o write.o
GENOBJS = ${GENOBJS_NO_TRAP} trap_handle.o

# Object files specific to particular targets.
EVALOBJS = ${GENOBJS}
CYGMONOBJS = ${GENOBJS_NO_TRAP}

CFLAGS = -g 

GCC_LDFLAGS = `if [ -d ${objroot}/../gcc ] ; \
	then echo -L${objroot}/../gcc ; fi`

SCRIPTS = @@script_list@@
BSP = @@bsp_list@@

# Host specific makefile fragment comes in here.
@@host_makefile_frag@@

#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#

all: ${CRT0} ${BSP}

#
# here's where we build the board support packages for each target
#

libeval.a: $(EVALOBJS)
	${AR} ${ARFLAGS} $@@ $(EVALOBJS)
	${RANLIB} $@@

libcygmon.a: $(CYGMONOBJS)
	${AR} ${ARFLAGS} $@@ $(CYGMONOBJS)
	${RANLIB} $@@


doc:	

clean mostlyclean:
	rm -f a.out core *.i *~ *.o *-test *.srec *.dis *.map *.x

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status a.out

.PHONY: install info install-info clean-info
install:
	@@for crt in ${CRT0}; do \
	$(INSTALL_PROGRAM) $${crt} $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$${crt}; \
	done
	@@for bsp in ${BSP}; do \
	 $(INSTALL_PROGRAM) $${bsp} $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}; \
	done
	@@for script in ${SCRIPTS}; do \
	 $(INSTALL_DATA) ${srcdir}/$${script}.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$${script}.ld; \
	done

info:
install-info:
clean-info:

# these are for the BSPs
crt0.o: ${srcdir}/crt0.S

# target specific makefile fragment comes in here.
@@target_makefile_frag@@

Makefile: Makefile.in config.status @@host_makefile_frag_path@@ @@target_makefile_frag_path@@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
@


1.2
log
@
Fix reference to putchar.o and puts.o which were moved to newlib as part of
initial check-in.
@
text
@d68 1
a68 1
CRT0 = crt0.o crt0_cygmon.o crt0_redboot.o
d96 1
a96 1
all: ${CRT0} test.o ${BSP}
a110 10
# compile a fully linked binary. The -Wl,-T*.ld is for the linker
# script. By using -Wl, the linker script is put on the proper place
# in the comand line for ld, and all the symbols will get fully
# resolved.

test: ${CRT0} test.o
	${CC} $(CFLAGS_FOR_TARGET) -L${srcdir} -L${objdir} \
	test.o -o $@@ $(NEWLIB_LDFLAGS) -Wl,-Teval.ld
	@@echo Done...

a134 2
test.o:	${srcdir}/test.c

a136 1
crt0_cygmon.o: ${srcdir}/crt0_cygmon.S
@


1.1
log
@
2009-12-10  Conny Marco Menebrocker <c-m-m@@gmx.de>

        * configure.in: Add xc16x support.
        * configure: Regenerated.
        * xc16x/Makefile.in: New file for xc16x port.
        * xc16x/aclocal.m4: Ditto.
        * xc16x/close.S: Ditto.
        * xc16x/configure: Ditto.
        * xc16x/configure.in: Ditto.
        * xc16x/create.c: Ditto.
        * xc16x/crt0.S: Ditto.
        * xc16x/fstat.S: Ditto.
        * xc16x/getchar1.c: Ditto.
        * xc16x/isatty.c: Ditto.
        * xc16x/lseek.c: Ditto.
        * xc16x/mem-layout.c: Ditto.
        * xc16x/misc.c: Ditto.
        * xc16x/open.c: Ditto.
        * xc16x/read.c: Ditto.
        * xc16x/sbrk.c: Ditto.
        * xc16x/syscalls.c: Ditto.
        * xc16x/trap_handle.c: Ditto.
        * xc16x/write.c: Ditto.
        * xc16x/sys/syscall.h: Ditto.
@
text
@d72 2
a73 2
    isatty.o lseek.o mem-layout.o misc.o open.o putchar.o \
    puts.o read.o sbrk.o syscalls.o write.o
@

