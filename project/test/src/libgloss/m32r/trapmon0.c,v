head	1.2;
access;
symbols
	newlib-2_2_0:1.2.0.10
	newlib-2_1_0:1.2
	newlib-2_0_0:1.2
	newlib-1_20_0:1.2
	newlib-1_19_0:1.2
	newlib-1_18_0:1.2
	newlib-1_17_0-arc:1.2.0.8
	binutils-arc-20080908-branch:1.2.0.6
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.04.15.19.53.34;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2002-04-15  Hans-Peter Nilsson  <hp@@bitrange.com>

        * m32r/trapmon0.c (__trap0): Don't use multi-line strings.
@
text
@/*
 * Mon2000 Trap handler (syscall interface).
 *
 * This trap handler is linked into the mon2000 libgloss (libmon).
 */
#include <reent.h>
#include "syscall.h"

int __trap0 (int function, int p1, int p2, int p3, struct _reent *r)
{
  int rc = 0;

  switch (function) {
  case SYS_exit:
    /* loop so GDB can't go past system exit call */
    while (1) {
      asm volatile (
          "ldi	  r0, #0						\n"
          "trap    #15        ; return control to Mon2000");
    }
    break;

  case SYS_write:
  {
    int i;

    for( i=0; i<p3; i++ ) {
      asm volatile (
          "ldi   r0, #2							\n"
          "ldi   r1, #15      ; load Ctrl-O (ASCII 15)			\n"
          "trap  #15          ; write Ctrl-O for quoting purposes" );

      asm volatile (
          "ldi   r0, #2							\n"
          "ldb   r1, %0							\n"
          "trap  #15          ; write character to console" 
          : /* no outputs */
          : "m" (((char*)p2)[i]));
    }

    rc = p3;                 /* return number of chars written */
    break;
  }

  default:
    rc = 0;
    break;
  }

  return rc;
}


@


1.1
log
@20000317 sourceware import
@
text
@d17 3
a19 3
      asm volatile (" 
          ldi	  r0, #0
          trap    #15        ; return control to Mon2000");
d28 4
a31 4
      asm volatile (" 
          ldi   r0, #2
          ldi   r1, #15      ; load Ctrl-O (ASCII 15)
          trap  #15          ; write Ctrl-O for quoting purposes" );
d33 4
a36 4
      asm volatile (" 
          ldi   r0, #2
          ldb   r1, %0
          trap  #15          ; write character to console" 
@

