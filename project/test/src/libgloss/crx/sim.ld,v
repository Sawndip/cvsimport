head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-1_13_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2004.10.05.20.00.53;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2004-10-05  Tomer Levi  <Tomer.Levi@@nsc.com>

        * configure.in: Support crx-*-*.
        * configure: regenerate.
        * crx/_exit.c: New file.
        * crx/_getenv.c: Ditto.
        * crx/_rename: Ditto.
        * crx/close.c: Ditto.
        * crx/configure.in: Ditto.
        * crx/crti.S: Ditto.
        * crx/crtn.S: Ditto.
        * crx/crt0.S: Ditto.
        * crx/dvz_hndl.c: Ditto.
        * crx/flg_hndl.c: Ditto.
        * crx/fstat.c: Ditto.
        * crx/getpid.c: Ditto.
        * crx/iad_hndl.c: Ditto.
        * crx/intable.c: Ditto.
        * crx/isatty.c: Ditto.
        * crx/kill.c: Ditto.
        * crx/lseek.c: Ditto.
        * crx/Makefile.in: Ditto.
        * crx/open.c: Ditto.
        * crx/putnum.c: Ditto.
        * crx/read.c: Ditto.
        * crx/sbrk.c: Ditto.
        * crx/sim.ld: Ditto.
        * crx/stat.c: Ditto.
        * crx/svc_hndl.c: Ditto.
        * crx/time.c: Ditto.
        * crx/und_hndl.c: Ditto.
        * crx/unlink.c: Ditto.
        * crx/write.c: Ditto.
@
text
@/* Example Linker Script for linking NS CRX elf32 files. */
OUTPUT_FORMAT("elf32-crx")
OUTPUT_ARCH(crx)

/* 
 The libh.a library includes various CR default handlers.
 The libsim.a library includes low-level functions, which
 are used as an interface to communicate with the simulator.
*/
GROUP(-lc -lsim -lh -lgcc)

/*
 The next line forces the entry point (_start in this script)
 to be entered in the output file as an undefined symbol.
 It is needed in case the entry point is not called explicitly
 (which is the usual case) AND is in an archive.
*/
EXTERN(_start)
ENTRY(_start)

/* Define memory regions */
MEMORY
{
  rom  : ORIGIN = 0x2,  LENGTH = 3M
  ram  : ORIGIN = 4M,   LENGTH = 10M
}

SECTIONS
{
  .init :
  { 
    __INIT_START = .; 
    KEEP (*(.init))
    __INIT_END = .; 
  } > rom

  .fini :
  { 
    __FINI_START = .; 
    KEEP (*(.fini))
    __FINI_END = .; 
  } > rom

  .jcr :
  { 
    KEEP (*(.jcr))
  } > rom

  .text : 
  { 
    __TEXT_START = .; 
    *(.text) *(.text.*) *(.gnu.linkonce.t.*) 
    __TEXT_END = .; 
  } > rom

  .rdata : 
  {
     __RDATA_START = .; 
     *(.rdata_4) *(.rdata_2) *(.rdata_1) *(.rdata.*) *(.gnu.linkonce.r.*) 
     __RDATA_END = .; 
  } > rom

  .ctor ALIGN(4) : 
  { 
    __CTOR_START = .; 
    KEEP (*crtbegin*.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend*.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    __CTOR_END = .; 
  } > rom

  .dtor ALIGN(4) : 
  { 
    __DTOR_START = .; 
    KEEP (*crtbegin*.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend*.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    __DTOR_END = .; 
  } > rom

  .data : 
  {
    __DATA_START = .; 
    *(.data_4) *(.data_2) *(.data_1) *(.data) *(.data.*) *(.gnu.linkonce.d.*) 
    __DATA_END = .; 
  } > ram AT > rom

  .bss (NOLOAD) : 
  {
    __BSS_START = .; 
    *(.bss_4) *(.bss_2) *(.bss_1) *(.bss) *(COMMON) *(.bss.*) *(.gnu.linkonce.b.*) 
    __BSS_END = .; 
  } > ram

/*
 You may change the sizes of the following sections to fit the actual
 size your program requires.
 The heap and stack are aligned to the bus width, as a speed optimization
 for accessing data located there.
*/
  .heap : 
  { 
    . = ALIGN(4); 
    __HEAP_START = .; 
    . += 0x2000; 
    __HEAP_MAX = .; 
  } > ram

  .stack : 
  { 
    . = ALIGN(4); 
    . += 0x6000; 
    __STACK_START = .; 
  } > ram

  .istack : 
  { 
    . = ALIGN(4); 
    . += 0x100; 
    __ISTACK_START = .; 
  } > ram
}

__DATA_IMAGE_START = LOADADDR(.data);
@
