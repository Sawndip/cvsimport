head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2014.12.15.20.17.37;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2014-12-15  Stefan Wallentowitz  <stefan.wallentowitz@@tum.de>

        * or1k/Makefile.in: Add libor1k
        * or1k/README: New file
        * or1k/caches-asm.S: New file
        * or1k/exceptions-asm.S: New file
        * or1k/exceptions.c: New file
        * or1k/impure.c: New file
        * or1k/include/or1k-nop.h: New file
        * or1k/include/or1k-support.h: New file
        * or1k/interrupts-asm.S: New file
        * or1k/interrupts.c: New file
        * or1k/mmu-asm.S: New file
        * or1k/or1k-internals.h: New file
        * or1k/or1k_uart.c: New file
        * or1k/or1k_uart.h: New file
        * or1k/outbyte.S: New file
        * or1k/sbrk.c: New file
        * or1k/sync-asm.S: New file
        * or1k/syscalls.c: New file
        * or1k/timer.c: New file
        * or1k/util.c: New file
@
text
@#include "include/or1k-support.h"

#include "or1k-internals.h"

#ifdef __OR1K_MULTICORE__
or1k_exception_handler_table_t *_or1k_exception_handler_table;
#else
or1k_exception_handler_table_t _or1k_exception_handler_table;
#endif

void or1k_exception_handler_add(int id, or1k_exception_handler_fptr handler)
{
	// Subtract 2 as we do not have a vector at 0 and reset is static
	id = id - 2;
#ifdef __OR1K_MULTICORE__
	_or1k_exception_handler_table[or1k_coreid()][id] = handler;

#else
	_or1k_exception_handler_table[id] = handler;
#endif
}
@
