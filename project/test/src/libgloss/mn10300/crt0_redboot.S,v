head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2001.10.31.19.19.08;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2001-10-31  David Howells  <dhowells@@redhat.com>

        * syscall.h: Added SYS_times, SYS_gettimeofday, SYS_link values.
        * mn10300/times.c: Renamed "times" to "_times" so that it can be
        referenced by newlib.
        * mn10300/cygmon.c: New file.
        * mn10300/crt0_redboot.S: Ditto.
        * mn10300/crt0_cygmon.S: Ditto.
        * mn10300/Makefile.in: Added RedBoot and Cygmon support.
        * mn10300/configure.in: Changed to allow for future
        evaluation boards to be added.
        * mn10300/configure: Regenerated.
@
text
@/*
 * crt0_redboot.S -- Minimal startup file for MN10300 targets running Redboot.
 *
 * Copyright (c) 2001 Red Hat, Inc.
 * Derived from crt0_cygmon.S - Copyright (c) 1995, 1996, 1997, 2000 Red Hat, Inc.
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

/*
 * This file contains the minimal startup code necessary.
 * This will not do any hardware initialization.  It is assumed that we are talking to Redboot
 * and therefore the hardware will be initialized properly.
 */

/*
 * Set up some room for a stack. We just grab a chunk of memory.
 */
#define STACK_SIZE  0x4000
#define GLOBAL_SIZE 0x2000

#define STARTUP_STACK_SIZE	0x0100

	.comm	__memsize, 12
	.comm	__lstack, STARTUP_STACK_SIZE
	.comm	__stackbase,4

	.section .text
	.global	_start
_start:
	/*
	 * Setup a small stack so we can run some C code,
	 * and get the usable memory size.
	 */
	mov	__lstack,a0
	add	STARTUP_STACK_SIZE-4,a0
	mov	a0,sp

	/*
	 * zero out the bss section.
	 */
	.global	__memsize
	.global	_get_mem_info
zerobss:
	mov	__bss_start, a0				# These variables are defined in the linker script
	mov	_end, a1

	cmp	a0, a1					# If no bss, then do nothing
	beq	7f

	clr	d0
3:
	movbu	d0,(a0)					# Clear a byte and bump pointer
	inc	a0
	cmp	a0, a1
	bne	3b

7:
	/*
	 * Setup the stack pointer -- 
	 *    get_mem_info returns the top of memory, so just use that In
	 *    addition, we must subtract 24 bytes for the 3 8 byte
	 *    arguments to main, in case main wants to write them back to
	 *    the stack.  The caller is supposed to allocate stack space
	 *    for parameters in registers in the old MIPS ABIs.	 We must
	 *    do this even though we aren't passing arguments, because
	 *    main might be declared to have them.
	 *    Some ports need a larger alignment for the stack, so we
	 *    subtract 32, which satisifes the stack for the arguments and
	 *    keeps the stack pointer better aligned.
	 */
	mov	__memsize, d0
	call	_get_mem_info,[],0

	sub	32, a0
	mov	a0, sp

	mov	__stackbase, a1
	mov	a0, (a1)				# keep this for future ref

	call	___main,[],0				# Call __main to run ctors/dtors
	clr	d0
	clr	d1
	mov	d0, (4,sp)
 	or	0x0800,psw				# Enable interrupts
	call	_main,[],0				# Call main program
	call	_exit,[],0
	
/* EOF crt0_redboot.S */
@
