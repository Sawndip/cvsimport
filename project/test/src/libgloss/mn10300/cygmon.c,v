head	1.1;
access;
symbols
	newlib-2_2_0:1.1.0.10
	newlib-2_1_0:1.1
	newlib-2_0_0:1.1
	newlib-1_20_0:1.1
	newlib-1_19_0:1.1
	newlib-1_18_0:1.1
	newlib-1_17_0-arc:1.1.0.8
	binutils-arc-20080908-branch:1.1.0.6
	binutils-arc-20080908-branchpoint:1.1
	newlib-1_17_0:1.1
	newlib-1_16_0:1.1
	newlib-1_15_0:1.1
	newlib-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	newlib-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	newlib-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	newlib-csl-sourcerygxx-4_1-14:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	newlib-autotools-branch:1.1.0.4
	newlib-csl-20060320-branch:1.1.0.2
	newlib-csl-20060320-branchpoint:1.1
	newlib-1_14_0:1.1
	newlib-csl-arm-2005-q1b:1.1
	newlib-csl-arm-2005-q1a:1.1
	newlib-1_13_0:1.1
	csl-arm-2004-q3:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	newlib-1_12_0:1.1
	csl-arm-2003-q4:1.1
	newlib-1_11_0:1.1
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1;
locks; strict;
comment	@ * @;


1.1
date	2001.10.31.19.19.08;	author jjohnstn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
2001-10-31  David Howells  <dhowells@@redhat.com>

        * syscall.h: Added SYS_times, SYS_gettimeofday, SYS_link values.
        * mn10300/times.c: Renamed "times" to "_times" so that it can be
        referenced by newlib.
        * mn10300/cygmon.c: New file.
        * mn10300/crt0_redboot.S: Ditto.
        * mn10300/crt0_cygmon.S: Ditto.
        * mn10300/Makefile.in: Added RedBoot and Cygmon support.
        * mn10300/configure.in: Changed to allow for future
        evaluation boards to be added.
        * mn10300/configure: Regenerated.
@
text
@/* cygmon.c -- Glue code for linking apps to run on top of Cygmon.
 *
 * Copyright (c) 1998, 1999, 2000, 2001 Red Hat, Inc.
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#include <errno.h>

// These need to be kept in sync with the definitions in Cygmon.
#define SYS_meminfo     1001
#include "syscall.h"

/* Structure filled in by get_mem_info.  Only the size field is
   actually used (by sbrk), so the others aren't even filled in.  */
struct s_mem
{
  unsigned int size;
  unsigned int icsize;
  unsigned int dcsize;
};

// Perform a system call.
// Unused parameters should be set to 0.
int __trap0(unsigned long func, unsigned long p1, unsigned long p2, unsigned long p3)
{
  int ret = 0;
#ifdef __AM33__
  {
    register unsigned long d0 asm ("d0") = func;
    register unsigned long d1 asm ("d1") = p1;
    register unsigned long d2 asm ("d2") = p2;
    register unsigned long d3 asm ("d3") = p3;
    asm volatile ("    syscall 0\n"
		  "    nop"
		  : "+d" (d0) : "d" (d1), "d" (d2), "d" (d3) : "memory");
    ret = d0;
  }
#endif

  if (func == SYS_exit)
    {
      while (1)
        {
          asm volatile (" .byte 0xff ");  // trigger a breakpoint to drop back into Cygmon
        }
    }

  if (ret != 0)
      errno = ret;

  return ret;
}

void *
get_mem_info (mem)
     struct s_mem *mem;
{
  unsigned long totmem = 0, topmem = 0;
  register int numbanks;

  numbanks = __trap0(SYS_meminfo, (unsigned long)&totmem, (unsigned long)&topmem, 0);
  mem->size = totmem;
  return (void*)topmem;
}
@
