head	1.9;
access;
symbols
	newlib-2_2_0:1.9.0.6
	newlib-2_1_0:1.9
	newlib-2_0_0:1.9
	newlib-1_20_0:1.9
	newlib-1_19_0:1.9
	newlib-1_18_0:1.9
	newlib-1_17_0-arc:1.9.0.4
	binutils-arc-20080908-branch:1.9.0.2
	binutils-arc-20080908-branchpoint:1.9
	newlib-1_17_0:1.9
	newlib-1_16_0:1.9
	newlib-1_15_0:1.8
	newlib-csl-coldfire-4_1-32:1.5.2.19
	newlib-csl-sourcerygxx-4_1-32:1.5.2.19
	newlib-csl-innovasic-fido-3_4_4-33:1.5.2.19
	newlib-csl-coldfire-4_1-30:1.5.2.16
	newlib-csl-sourcerygxx-4_1-30:1.5.2.16
	newlib-csl-coldfire-4_1-28:1.5.2.16
	newlib-csl-sourcerygxx-4_1-28:1.5.2.16
	newlib-csl-arm-2006q3-27:1.5.2.16
	newlib-csl-sourcerygxx-4_1-27:1.5.2.16
	newlib-csl-arm-2006q3-26:1.5.2.14
	newlib-csl-sourcerygxx-4_1-26:1.5.2.14
	newlib-csl-sourcerygxx-4_1-24:1.5.2.12
	newlib-csl-sourcerygxx-4_1-23:1.5.2.11
	newlib-csl-sourcerygxx-4_1-21:1.5.2.11
	newlib-csl-arm-2006q3-21:1.5.2.11
	newlib-csl-arm-2006q3-19:1.5.2.9
	newlib-csl-sourcerygxx-4_1-19:1.5.2.9
	newlib-csl-sourcerygxx-4_1-18:1.5.2.9
	newlib-csl-sourcerygxx-3_4_4-25:1.5
	newlib-csl-sourcerygxx-4_1-17:1.5.2.6
	newlib-csl-sourcerygxx-4_1-14:1.5.2.6
	newlib-csl-sourcerygxx-4_1-13:1.5.2.6
	newlib-csl-sourcerygxx-4_1-12:1.5.2.6
	newlib-csl-sourcerygxx-4_1-9:1.5.2.6
	newlib-csl-sourcerygxx-4_1-8:1.5.2.6
	newlib-csl-sourcerygxx-4_1-7:1.5.2.6
	newlib-csl-arm-2006q1-6:1.5.2.6
	newlib-csl-sourcerygxx-4_1-6:1.5.2.6
	newlib-csl-sourcerygxx-4_1-5:1.5.2.2
	newlib-csl-sourcerygxx-4_1-4:1.5.2.2
	newlib-autotools-branch:1.5.0.4
	newlib-csl-20060320-branch:1.5.0.2
	newlib-csl-20060320-branchpoint:1.5
	newlib-1_14_0:1.4
	newlib-csl-arm-2005-q1b:1.4
	newlib-csl-arm-2005-q1a:1.4
	newlib-1_13_0:1.4
	csl-arm-2004-q3:1.4
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	newlib-1_11_0:1.3
	cygnus_cvs_20020108_pre:1.3
	newlib-1_10_0:1.3
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.9
date	2007.01.04.18.05.56;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.18.21.48.18;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.11.19.58.01;	author jjohnstn;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.01.05.41.06;	author kazu;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.22.18.02.54;	author jjohnstn;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2004.06.28.22.42.20;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.10.23.47.42;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.28.18.41.57;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;

1.5.2.1
date	2006.03.29.07.03.19;	author nathan;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.03.29.09.08.37;	author nathan;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2006.05.22.22.26.09;	author sandra;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2006.05.24.07.54.51;	author nathan;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2006.05.25.17.33.20;	author nathan;	state Exp;
branches;
next	1.5.2.6;

1.5.2.6
date	2006.06.05.14.22.26;	author nathan;	state Exp;
branches;
next	1.5.2.7;

1.5.2.7
date	2006.08.25.11.55.48;	author nathan;	state Exp;
branches;
next	1.5.2.8;

1.5.2.8
date	2006.08.31.09.00.40;	author nathan;	state Exp;
branches;
next	1.5.2.9;

1.5.2.9
date	2006.09.06.08.45.15;	author nathan;	state Exp;
branches;
next	1.5.2.10;

1.5.2.10
date	2006.09.18.07.41.02;	author nathan;	state Exp;
branches;
next	1.5.2.11;

1.5.2.11
date	2006.09.18.11.30.53;	author nathan;	state Exp;
branches;
next	1.5.2.12;

1.5.2.12
date	2006.10.07.20.08.48;	author nathan;	state Exp;
branches;
next	1.5.2.13;

1.5.2.13
date	2006.10.20.21.01.50;	author nathan;	state Exp;
branches;
next	1.5.2.14;

1.5.2.14
date	2006.10.23.19.28.29;	author nathan;	state Exp;
branches;
next	1.5.2.15;

1.5.2.15
date	2006.11.01.17.31.07;	author nathan;	state Exp;
branches;
next	1.5.2.16;

1.5.2.16
date	2006.11.01.17.39.29;	author nathan;	state Exp;
branches;
next	1.5.2.17;

1.5.2.17
date	2006.12.01.11.02.07;	author kazu;	state Exp;
branches;
next	1.5.2.18;

1.5.2.18
date	2006.12.13.10.39.14;	author nathan;	state Exp;
branches;
next	1.5.2.19;

1.5.2.19
date	2006.12.15.18.09.03;	author drow;	state Exp;
branches;
next	1.5.2.20;

1.5.2.20
date	2006.12.22.07.47.30;	author nathan;	state Exp;
branches;
next	1.5.2.21;

1.5.2.21
date	2006.12.22.18.13.03;	author nathan;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
2007-01-04  Kazu Hirata  <kazu@@codesourcery.com>

        Merge from newlib-csl-20060320-branch:
        2006-12-22  Nathan Sidwell  <nathan@@codesourcery.com>

        libgloss/
        * m68k/Makefile.in (CF_ISRS): Remove now shared routines.
        * m68k/cf-crt0.S (__reset): Define here.
        * m68k/cf-isrs.c: Share some ISRS.  Add aliases for each IRQ slot.
        * m68k/cf-isv.S: Move to .interrupt_vector section.  Make each
        slot a unique routine.
        * m68k/cf.sc: Adjust for .interrupt_vector section.

        libgloss/
        * m68k/Makefile.in (m5273c3): Rename to ...
        (m5272c3): ... here to fix typo.
        (m5249c3): New.
        (CF_BOARDS): Add it.
@
text
@# Copyright (c) 1995, 1996, 2001 Cygnus Support  -*- mode:makefile -*-
#
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors
# and need not follow the licensing terms described here, provided that
# the new terms are clearly indicated on the first page of each file where
# they apply.
#
# This currently works with Motorola's MVME135 and IDP m68k based
# target boards.
#

DESTDIR =
VPATH = @@srcdir@@
srcdir = @@srcdir@@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

host_alias = @@host_alias@@
target_alias = @@target_alias@@
program_transform_name = @@program_transform_name@@

bindir = @@bindir@@
libdir = @@libdir@@
tooldir = $(exec_prefix)/$(target_alias)

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

SHELL =	/bin/sh

CC = @@CC@@

AS = @@AS@@
AR = @@AR@@
LD = @@LD@@
RANLIB = @@RANLIB@@
AR_FLAGS = qv

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

SCRIPTS = mvme162 mvme135 idp bcc

OBJS =  close.o fstat.o getpid.o isatty.o kill.o \
	lseek.o open.o print.o putnum.o read.o sbrk.o stat.o \
	unlink.o write.o

# What targets to build for.  This is a list of {m68k,cf}
DO = @@DO@@

# Here is all of the simulator stuff
SIM_SCRIPTS	= sim.ld
SIM_LDFLAGS	= -Tsim.ld
SIM_BSP		= libsim.a
SIM_CRT0	= sim-crt0.o
SIM_OBJS	= sim-print.o sim-inbyte.o sim-sbrk.o sim-abort.o sim-errno.o simulator.o sim-funcs.o unlink.o
SIM_TEST	= 
SIM_INSTALL	= install-sim


CRT0 = crt0.o
#
# here's all the MVME135 target stuff
#
MVME_LDFLAGS=	-L${srcdir} -Tmvme135.ld
MVME135_BSP=	libmvme135.a
MVME162_BSP=	libmvme162.a
#MVME135_OBJS=	mvme.o
#MVME162_OBJS=	mvme.o
# Uncomment the last two objects if you want to use the GDB stub. 
# The stub is included "as is", and will likely take some hacking
# to work on your system.
MVME135_OBJS=	cpu32bug.o # mvme-stub.o mvme135-asm.o
MVME162_OBJS=	cpu32bug.o # mvme-stub.o mvme162lx-asm.o


#
# here's all the BCC target stuff
#
BCC_LDFLAGS=	-L${srcdir} -Tbcc.ld
BCC_BSP=	libbcc.a
BCC_OBJS=	cpu32bug.o

#
# here's all the IDP target stuff
#
IDP_LDFLAGS=	-L${srcdir} -Tidp.ld
IDP_BSP=	libidp.a
IDP_OBJS=	leds.o idp-inbyte.o idp-outbyte.o mc68ec.o

#
# here's all the IDP GDB target stuff
#
IDPGDB_LDFLAGS=	-L${srcdir} -Tidpgdb.ld
IDPGDB_BSP=	libidpgdb.a
IDPGDB_OBJS=	leds.o idp-inbyte.o idp-gdb-outbyte.o mc68ec.o

#
# here's all the ColdFire boards
#
CF_CRT0S=	cf-hosted-crt0.o cf-unhosted-crt0.o
CF_BSP=		libcf.a
CF_OBJS=	cf-isv.o cf-crt1.o cf-hosted.o getpid.o kill.o cf-sbrk.o \
		cf-exit.o $(patsubst %,cf-%.o,${CF_ISRS})
CF_ISRS=	other_interrupt access_error address_error \
	illegal_instruction divide_by_zero privilege_violation \
	trace unimplemented_opcode breakpoint_debug_interrupt \
	format_error spurious_interrupt fp_interrupt \
	unsupported_instruction trap_interrupt

#              RAM       ROM
m5208evb  := 1024M 16M          0M   2M
m5213evb  :=  512M 32K          0M 256K
m52235evb :=  512M 32K          0M 256K
m5235evb  :=    0M 16M  0xFFE00000   2M
m5249c3	  :=    0M  4M  0xFFE00000   2M
m5272c3   :=    0M  4M  0xFFE00000   2M
m5275evb  :=    0M 16M  0xFFE00000   2M
m5282evb  :=    0M 16M  0xFFE00000   2M
m5329evb  := 1024M 32M          0M   2M
m5485evb  :=    0M 64M       1024M  16M

CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5249c3 m5272c3 m5275evb \
	m5282evb m5329evb m5485evb
CF_RAM_SCRIPTS := $(patsubst %,%-ram.ld,$(CF_BOARDS))
CF_ROM_SCRIPTS := $(patsubst %,%-rom.ld,$(CF_BOARDS))
CF_HOSTED_SCRIPTS := $(patsubst %.ld,%-hosted.ld,$(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS))
CF_SCRIPTS = $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS) $(CF_HOSTED_SCRIPTS)
CF_SOURCES = cf-isv.S cf-crt0.S cf-crt1.c asm.h

# Fido board.
# Programs built with the ROM linker script are designed to be
# executed from flash.  Programs built with the RAM linker script are
# designed to be run via JTAG.  Program built with the RedBoot linker
# script are designed to be run from the RedBoot boot loader.
FIDO_CRT0S    = fido-rom-crt0.o fido-ram-crt0.o fido-redboot-crt0.o
FIDO_BSP      = libfido.a
FIDO_OBJS     = fido-hosted.o getpid.o kill.o fido-sbrk.o fido-_exit.o \
		$(patsubst %,fido-%Handler.o,$(FIDO_HANDLERS))
FIDO_HANDLERS:= BusError AddressError IllegalInstruction DivideByZero Chk \
	Trapcc PrivilegeViolation Trace ALine FLine HwBreakpoint Reserved0 \
	FormatError UnitializedInt SoftwareInt \
	$(addprefix Unassigned,0 1 2 3 4 5 6) \
	$(addprefix Int,0 1 2 3 4 5 6 7) \
	$(addprefix Trap,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	$(addprefix Reserved,048 049 050 051 052 053 054 055 056 057 058 \
				059 060 061 062 063) \
	ContextOvertime MpuError \
	$(addprefix SystemTimer,0 1 2 3 4) \
	WatchdogTimer TimerCounter0 TimerCounter1 DMA0 DMA1 AtoDConversion \
	$(addprefix Pdma,0 1 2 3) \
	$(addprefix Reserved,081 082 083 084 085 086 087 088 089 \
				090 091 092 093 094 095) \
	$(addprefix Trapx,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	Dummy
FIDO_UNHOSTED_SCRIPTS:= fido-rom.ld fido-sram.ld fido-sdram.ld
FIDO_HOSTED_SCRIPTS:=$(patsubst %.ld,%-hosted.ld,$(FIDO_UNHOSTED_SCRIPTS))
FIDO_SCRIPTS  = $(FIDO_UNHOSTED_SCRIPTS) $(FIDO_HOSTED_SCRIPTS) fido-redboot.ld
FIDO_SOURCES  = fido-crt0.S asm.h fido.h

#
# here's all the unhosted stuff
#
UNHOSTED_BSP=	libunhosted.a
UNHOSTED_OBJS=	unhosted-close.o unhosted-fstat.o \
		unhosted-gettimeofday.o unhosted-isatty.o unhosted-lseek.o \
		unhosted-open.o unhosted-read.o unhosted-rename.o \
		unhosted-stat.o unhosted-system.o unhosted-time.o \
		unhosted-unlink.o unhosted-write.o

#
# here's all the hosted stuff
#
HOSTED_BSP=	libhosted.a
HOSTED_OBJS=	hosted-gdb.o hosted-exit.o $(patsubst un%,%,$(UNHOSTED_OBJS))

# Host specific makefile fragment comes in here.
@@host_makefile_frag@@

all :: $(DO:%=all_%)

#
# here's where we build the board support packages for each target
#

.PHONY: all_m68k
all_m68k :: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} \
	${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP}
.PHONY: all_cf
all_cf :: ${CF_CRT0S} ${CF_BSP} ${CF_SCRIPTS} ${HOSTED_BSP} ${UNHOSTED_BSP}

.PHONY: all_fido
all_fido :: ${FIDO_CRT0S} ${FIDO_BSP} ${FIDO_SCRIPTS} \
	${HOSTED_BSP} ${UNHOSTED_BSP}

${SIM_BSP}: ${SIM_OBJS}
	${AR} ${ARFLAGS} $@@ ${SIM_OBJS}
	${RANLIB} $@@

${BCC_BSP}: $(OBJS) ${BCC_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${BCC_OBJS}
	${RANLIB} $@@

${IDP_BSP}: $(OBJS) ${IDP_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${IDP_OBJS}
	${RANLIB} $@@

${IDPGDB_BSP}: $(OBJS) ${IDPGDB_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${IDPGDB_OBJS}
	${RANLIB} $@@

${MVME135_BSP}: $(OBJS) ${MVME135_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${MVME135_OBJS}
	${RANLIB} $@@

${MVME162_BSP}: $(OBJS) ${MVME162_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${MVME162_OBJS}
	${RANLIB} $@@

# build hosted library
$(HOSTED_OBJS): hosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@@
$(HOSTED_BSP): $(HOSTED_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@
cf-hosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@@

# build unhosted library
$(UNHOSTED_OBJS): unhosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@@
$(UNHOSTED_BSP): $(UNHOSTED_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@
cf-unhosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@@

# build coldfire library
$(patsubst %,cf-%.o,${CF_ISRS}) : cf-isrs.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $< -o $@@ \
	  -DL_$(patsubst cf-%.o,%,$@@)
$(CF_BSP): $(CF_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

m%-ram.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ${SHELL} $< >$@@
m%-rom.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@@
m%-ram-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ${SHELL} $< >$@@
m%-rom-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@@

#build fido library
fido-%-crt0.o : fido-crt0.S asm.h fido.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) \
		-DFIDO_$* -c -o $@@ $<

$(patsubst %,fido-%Handler.o,${FIDO_HANDLERS}) : fido-handler.c
	$(CC) $(CFLAGS_FOR_TARGET) -fomit-frame-pointer $(CFLAGS) $(INCLUDES) \
		-c $< -o $@@ -DHANDLER=$(patsubst fido-%.o,_%,$@@)
${FIDO_BSP}: ${FIDO_OBJS}
	${AR} ${ARFLAGS} $@@ ${FIDO_OBJS}
	${RANLIB} $@@

fido-rom.ld: fido.sc
	MODE=rom IO=unhosted ${SHELL} $< > $@@

fido-rom-hosted.ld: fido.sc
	MODE=rom IO=hosted ${SHELL} $< > $@@

fido-sram.ld: fido.sc
	MODE=sram IO=unhosted ${SHELL} $< > $@@

fido-sram-hosted.ld: fido.sc
	MODE=sram IO=hosted ${SHELL} $< > $@@

fido-sdram.ld: fido.sc
	MODE=sdram IO=unhosted ${SHELL} $< > $@@

fido-sdram-hosted.ld: fido.sc
	MODE=sdram IO=hosted ${SHELL} $< > $@@

fido-redboot.ld: fido.sc
	MODE=redboot IO=unhosted ${SHELL} $< > $@@

leds.o: ${srcdir}/leds.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-inbyte.o: ${srcdir}/idp-inbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-outbyte.o: ${srcdir}/idp-outbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-gdb-outbyte.o: ${srcdir}/idp-outbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DGDB_MONITOR_OUTPUT $(INCLUDES) -c $< -o $@@

mc68ec.o: ${srcdir}/mc68ec.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

test.o: ${srcdir}/test.c

#
# Make a simple test case to test the linker script, startup code, and
# I/O code
#
test: $(OBJS) idp-test.srec mvme135-test.srec bcc-test.srec \
	idp-test.dis mvme135-test.dis bcc-test.dis
	@@echo Done...

# compile a fully linked binary. The -N option is for a.out, so the
# base address will be zero, rather than the default of 0x2020. The
# -Wl,-T*.ld is for the linker script. By using -Wl, the linker script
# is put on the proper place in the comand line for ld, and all the
# symbols will get fully resolved.

idp-test.x: test.o ${CRT0} Makefile ${IDP_BSP}
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
	test.o -o $@@ $(LDFLAGS_FOR_TARGET) -N -Wl,-Tidp.ld
idp-test.srec: idp-test.x
	$(OBJCOPY) -O srec idp-test.x $@@
idp-test.dis: idp-test.x
	@@rm -fr idp-test.dis
	$(OBJDUMP) -d idp-test.x > $@@
idp-test: idp-test.srec idp-test.dis

idpgdb-test.x: test.o ${CRT0} Makefile ${IDPGDB_BSP}
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
	test.o -o $@@ $(LDFLAGS_FOR_TARGET) -N -Wl,-Tidpgdb.ld
idpgdb-test.srec: idpgdb-test.x
	$(OBJCOPY) -O srec idpgdb-test.x $@@
idpgdb-test.dis: idpgdb-test.x
	@@rm -fr idpgdb-test.dis
	$(OBJDUMP) -d idpgdb-test.x > $@@
idpgdb-test: idpgdb-test.srec idpgdb-test.dis

mvme135-test.x: test.o ${CRT0} ${srcdir}/mvme135.ld Makefile  ${MVME135_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tmvme135.ld -nostdlib
mvme135-test.srec: mvme135-test.x
	$(OBJCOPY) -O srec mvme135-test.x $@@
mvme135-test.dis: mvme135-test.x
	@@rm -fr mvme135-test.dis
	$(OBJDUMP) -d mvme135-test.x > $@@
mvme135-test: mvme135-test.srec mvme135-test.dis

mvme162-test.x: test.o ${CRT0} ${srcdir}/mvme162.ld Makefile  ${MVME162_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tmvme162.ld -nostdlib
mvme162-test.srec: mvme162-test.x
	$(OBJCOPY) -O srec mvme162-test.x $@@
mvme162-test.dis: mvme162-test.x
	@@rm -fr mvme162-test.dis
	$(OBJDUMP) -d mvme162-test.x > $@@
mvme162-test: mvme162-test.srec mvme162-test.dis

bcc-test.x: test.o ${CRT0} ${srcdir}/bcc.ld Makefile  ${BCC_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tbcc.ld -nostdlib
bcc-test.srec: bcc-test.x
	$(OBJCOPY) -O srec bcc-test.x $@@
bcc-test.dis: bcc-test.x
	@@rm -fr bcc-test.dis
	$(OBJDUMP) -d bcc-test.x > $@@
bcc-test: bcc-test.srec bcc-test.dis

# a C++ test case
dtor.o:  $(srcdir)/dtor.C
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -o $@@ -c $<
dtor.dis: dtor.x
	@@rm -fr dtor.dis
	$(OBJDUMP) -d dtor.x > $@@
dtor.x: dtor.o ${CRT0} ${srcdir}/mvme135.ld Makefile  ${MVME135_BSP}
	${CC} -L${srcdir} -L${objdir} dtor.o -o $@@ $(LIBS_FOR_TARGET) \
	-N -Wl,-Tmvme135.ld -nostdlib

unlink.o: $(srcdir)/../unlink.c

.PHONY: install info dvi doc install-info clean-info
install:: $(DO:%=install_%)


.PHONY:install_m68k
install_m68k::
	# install SIM stuff
	$(INSTALL_PROGRAM) $(SIM_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(SIM_CRT0)
	$(INSTALL_PROGRAM) $(SIM_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(SIM_BSP)
	$(INSTALL_DATA) ${srcdir}/sim.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sim.ld
	#
	$(INSTALL_PROGRAM) $(CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CRT0)
	# install BCC stuff
	$(INSTALL_PROGRAM) $(BCC_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BCC_BSP)
	$(INSTALL_DATA) ${srcdir}/bcc.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/bcc.ld
	# install IDP stuff
	$(INSTALL_PROGRAM) $(IDP_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(IDP_BSP)
	$(INSTALL_DATA) ${srcdir}/idp.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/idp.ld
	# install IDPGDB stuff
	$(INSTALL_PROGRAM) $(IDPGDB_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(IDPGDB_BSP)
	$(INSTALL_DATA) ${srcdir}/idpgdb.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/idpgdb.ld
	# install MVME135 stuff
	$(INSTALL_PROGRAM) $(MVME135_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(MVME135_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme135.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/mvme135.ld
	# install MVME162lx stuff
	$(INSTALL_PROGRAM) $(MVME162_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(MVME162_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme162.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/mvme162.ld
	$(INSTALL_DATA) ${srcdir}/sbc5204.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sbc5204.ld
	$(INSTALL_DATA) ${srcdir}/sbc5206.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sbc5206.ld

.PHONY: install_cf
install_cf:: install_io
	# install CF stuff
	$(INSTALL_DATA) $(CF_CRT0S) $(CF_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(CF_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL_DATA) $(addprefix ${srcdir}/,$(CF_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
endif

.PHONY: install_fido
install_fido:: install_io
	$(INSTALL_DATA) $(FIDO_CRT0S) $(FIDO_BSP) \
		$(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)
	$(INSTALL_DATA) $(FIDO_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL) -d $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
	$(INSTALL_DATA) $(addprefix $(srcdir)/,$(FIDO_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
endif

.PHONY: install_io
install_io::
	# install IO stuff
	$(INSTALL_DATA) $(HOSTED_BSP) $(UNHOSTED_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}

# target specific makefile fragment comes in here.
@@target_makefile_frag@@

clean mostlyclean:
	rm -f a.out core *.i *~ *.a *.o *-test *.srec *.dis *.x *.map

distclean maintainer-clean realclean: clean
	rm -f Makefile config.cache config.log config.status

info dvi doc:
install-info:
clean-info:

Makefile: Makefile.in config.status @@host_makefile_frag_path@@ @@target_makefile_frag_path@@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
@


1.8
log
@
2006-12-18  Kazu Hirata  <kazu@@codesourcery.com>

        Merge from newlib-csl-20060320-branch:
        2006-12-15  Daniel Jacobowitz  <dan@@codesourcery.com>

        * m68k/fido-crt0.S (_vector_table): Reference
        _PrivilegeViolationHandler.

        2006-12-15  Daniel Jacobowitz  <dan@@codesourcery.com>

        * m68k/fido-crt0.S (_start): Set %vbr for context 0 in
        RAM configs.
        * m68k/fido.sc: Clean up formatting.  Add comments.  Move
        stack and heap end to SDRAM for SRAM and SDRAM configurations.
        Put RedBoot application text in SRAM.

        2006-12-13  Nathan Sidwell  <nathan@@codesourcery.com>

        * m68k/Makefile (install_cf): Don't loop over files here.  Only
        install sources for the default multilib.
        (install_fido): Likewise.
        (install_io): Install bsps in one go.

        2006-12-01  Nathan Sidwell  <nathan@@codesourcery.com>
                    Kazu Hirata  <kazu@@codesourcery.com>

        * configure.in: Recognize fido-*-*.
        * configure: Regenerate.
        * m68k/Makefile.in (CF_ISRS): Use addprefix.
        (FIDO_CRT0, FIDO_BSP, FIDO_OBJS, FIDO_HANDLERS,
        FIDO_UNHOSTED_SCRIPTS, FIDO_HOSTED_SCRIPTS, FIDO_SCRIPTS,
        FIDO_SOURCES, all_fido, fido-%-crt0.o, fido-rom.ld,
        fido-rom-hosted.ld, fido-sram.ld, fido-sram-hosted.ld,
        fido-sdram.ld, fido-sdram-hosted.ld, fido-redboot.ld,
        install_fido): New.
        * m68k/asm.h (mbb): New.
        * m68k/configure.in (DO): Check for __mfido__.
        * m68k/configure: Regenerate.
        * m68k/fido-_exit.c, m68k/fido-crt0.S, m68k/fido-handler.c,
        m68k/fido-hosted.S, m68k/fido-sbrk.c, m68k/fido.h,
        m68k/fido.sc, m68k/fido_profiling.h: New.
@
text
@d126 1
a126 1
CF_ISRS=	other_interrupt reset access_error address_error \
d128 3
a130 7
	trace unimplemented_line_a_opcode unimplemented_line_f_opcode \
	non_pc_breakpoint_debug_interrupt pc_breakpoint_debug_interrupt \
	format_error spurious_interrupt  fp_branch_unordered \
	fp_inexact_result fp_divide_by_zero fp_underflow fp_operand_error \
	fp_overflow fp_input_not_a_number fp_input_denormalized_number \
	unsupported_instruction \
	$(addprefix trap,0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
d137 2
a138 1
m5273c3   :=    0M  4M  0xFFE00000   2M
d144 1
a144 1
CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5272c3 m5275evb \
@


1.7
log
@
2006-12-11 Kazu Hirata <kazu@@codesourcery.com>

	Merge from newlib-csl-20060320-branch:
	2006-12-01  Nathan Sidwell  <nathan@@codesourcery.com>
		    Kazu Hirata  <kazu@@codesourcery.com>

	* m68k/Makefile.in (CF_ISRS): Use addprefix.

	2006-11-01 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CFLAGS): Do not clear.  Add to all compilations.
	(ARFLAGS): Remove commented out definition.


	* m68k/configure.in (DO) Set to list of target cpu families.
	* m68k/configure: Rebuilt.
	* m68k/Makefile.in (DO): New.
	(UNHOSTED_BSP, UNHOSTED_OBJS, HOSTED_BSP, HOSTED_OBJS): Move
	later.
	(m5208evb, m5213evb, m52235evb, m5235evb, m5273c3, m5275evb,
	m5282evb, m5329evb, m5485evb): Move earlier.
	(all): Add all_$DO dependencies.
	(all_cf, all_m68k): New targets, depend on cf & m68k bsps as
	appropriate.
	(m%-ram.ld, m%-rom.ld, m%-ram-hosted.ld, m%-rom-hosted.ld): Add
	'm' prefix.
	(install): Add install_$DO dependencies.
	(install_cf, install_m68k): New targets.  Perform cf and m68k
	installs as appropriate.
	(install_io): New, install the io libraries.


	2006-10-23 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_CRT0): Rename to CF_CRT0S, separate hosted
	& unhosted versions.
	(CF_OBJS): Add cf-isv.o.
	(CF_SOURCES): Add cf-isv.S.
	(cf-hosted-crt0.o, cf-unhosted-crt0.o): New targets.
	* m68k/cf-isv.S: New, broken out of ...
	* m68k/cf-crt0.S: ... here.  Add HOSTED & UNHOSTED differences.
	* m68k/cf-crt1.c (__start1): Add heap_limit argument.
	(__heap_limit): Define.
	* m68k/cf-sbrk.c (__heap_limit): Declare.
	(sbrk): Adjust for __heap_limit.
	* m68k/cf.sc: Use different crt0's for hosted & unhosted.
	Install a separate isv.o file.
	* m68k/io.h (HOSTED_PUTCHAR): Replace with ...
	(HOSTED_INIT_SIM): ... this.


	2006-10-20 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_BOARDS): Add m5275evb.
	(m5275evb): New board.


	2006-10-20 Vladimir Prus <vladimir@@codesourcery.com>

	* m68k/cf.sc: Add linkonce sections and
	DWARF sections.


	2006-10-07 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in: Adjust Coldfire rules.
	(BDM_CRT0, BDM_BSP, BDM_OBJS, BDM_ISRS): Rename	to ...
	(CF_CRT0, CF_BSP, CF_OBJS, CF_ISRS): ... here.  Adjust.
	(BDM_OTHER_OBJS): Remove.
	(BDM_SYSOBJS): Rename to ...
	(UNHOSTED_OBJS): ... here.  Adjust.
	(UNHOSTED_BSP, HOSTED_OBJS, HOSTED_BSP): New.
	(CF_HOSTED_SCRIPTS): New.
	(CF_SCRIPTS, CF_SOURCES): Adjust.
	* m68k/cf.sc: Add IO library variable.
	* m68k/bdm-crt0.S, m68k/bdm-crt1.c, m68k/bdm-isrs.c,
	m68k/bdm-sbrk.c, m68k/bdm-semihost.S: Rename to ...
	* m68k/cf-crt0.S, m68k/cf-crt1.c, m68k/cf-isrs.c, m68k/cf-sbrk.c,
	m68k/cf-hosted.S: ... here.
	* m68k/cf-exit.c: New.
	* m68k/bdm-gdb.h, m68k/bdm-semihost.h: Merge into ...
	* m68k/io.h: ... here.  Add unhosted support.  Adjust conversion
	function names.
	* m68k/bdm-gdb.c: Rename to ...
	* m68k/io-gdb.c: ... here.  Adjust names of conversion functions.
	* m68k/bdm-close.c, m68k/bdm-exit.c, m68k/bdm-fstat.c,
	m68k/bdm-gettimeofday.c, m68k/bdm-isatty.c, m68k/bdm-lseek.c,
	m68k/bdm-open.c, m68k/bdm-read.c, m68k/bdm-rename.c,
	m68k/bdm-stat.c, m68k/bdm-system.c, m68k/bdm-time.c,
	m68k/bdm-unlink.c, m68k/bdm-write.c: Rename to ...
	* m68k/io-close.c, m68k/io-exit.c, m68k/io-fstat.c,
	m68k/io-gettimeofday.c, m68k/io-isatty.c, m68k/io-lseek.c,
	m68k/io-open.c, m68k/io-read.c, m68k/io-rename.c, m68k/io-stat.c,
	m68k/io-system.c, m68k/io-time.c, m68k/io-unlink.c,
	m68k/io-write.c: ... here.  Include io.h. Adjust for hosted &
	unhosted libraries.  Adjust names of gdb conversion functions.


	2006-09-29 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/bdm-semihost.S: Add more comments. Make instruction weirder.

	2006-09-22 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/bdm-crt1.c (hardware_init_hook): Use #defines for CACR bits.

	2006-09-18 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in: Don't force a frame pointer on the ISRs.
	* m68k/bdm-crt1.c (__start1): Don't set the VBR here.
	(hardeare_init_hook): Define weakly.  Set VBR here, enable caching
	if supported.


	* m68k/Makefile.in (bdm-semihost.o): Build from bdm-semihost.S.
	* m68k/bdm-semihost.c: Remove.
	* m68k/bdm-semihost.S: New.
	* m68k/bdm-crt0.S: Don't install semihosting trap handler.
	* m68k/bdm-close.c, bdm-exit.c, bdm-fstat.c, bdm-gettimeofday.c,
	bdm-isatty.c, bdm-lseek.c, bdm-open.c, bdm-read.c, bdm-rename.c,
	bdm-stat.c, bdm-system.c, bdm-unlink.c, bdm-write.c): Update.
	* m68k/bdm-isrs.c: Update comment.
	* m68k/bdm-semihost.h (BDM_TRAPNUM, BDM_FUNC_REG, BDM_ARG_REG,
	BDM_TRAP): Remove.
	(__bdm_semihost): Declare.


	2006-09-15 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (BDM_OTHER_OBJS): Remove sbrk.o.
	(BDM_SYSOBJS): Add bdm-sbrk.o.
	* m68k/bdm-sbrk.c: New.


	2006-09-06 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_SOURCES): New.
	(install): Install them.


	2006-09-01 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/cf.sc: Add .jcr section to .text.
@
text
@d155 30
d216 4
d283 33
d442 20
a461 10
	for crt in $(CF_CRT0S) ; \
	do $(INSTALL_DATA) $$crt $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$crt ; \
	done
	$(INSTALL_DATA) $(CF_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CF_BSP)
	for script in $(CF_SCRIPTS) ; \
	do $(INSTALL_DATA) $$script $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$script ; \
	done
	for src in $(CF_SOURCES) ; \
	do $(INSTALL_DATA) ${srcdir}/$$src $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$src ; \
	done
d466 2
a467 2
	$(INSTALL_DATA) $(HOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(HOSTED_BSP)
	$(INSTALL_DATA) $(UNHOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(UNHOSTED_BSP)
@


1.6
log
@libgloss/
	Merge from newlib-csl-20060320-branch:
	2006-08-31  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/bdm-crt1.c: Call hardware_init_hook before copying
	initialized data.

	* m68k/Makefile.in (CF_BDM_SCRIPTS): Rename to CF_RAM_SCRIPTS.
	(CF_SCRIPTS): Update.
	(%-bdm.ld): Rename to %-ram.ld.

	2006-08-25  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/Makefile.in (DBUG_BSP, DBUG_OBJS): Remove.
	(BDM_CRT0): New.
	(BDM_OBJS): Add bdm-crt1.o.
	(BDM_OTHER_OBJS): Remove print.o putnum.o
	(CF_BOARDS): New.
	(CF_BDM_SCRIPTS): Generated name of ram scripts.
	(CF_ROM_SCRIPTS): Generated name of rom scripts.
	(CF_SCRIPTS): Adjust.
	(all): Add BDM_CRT0.
	(bdm-crt0.o, bdm-crt1.o): New targets.
	(bdm-isv.o): Remove.
	(m5208evb, m5213evb, m52235evb, m5235evb, m5273c3, m5282evb,
	m5329evb, m5485evb): New.
	(%-bdm.ld, %-rom.ld): New. Replace individual linker script rules.
	(install): Remove DBUG installs.
	* m68k/bdm-crt0.S: New.
	* m68k/bdm-crt1.c: New.
	* m68k/bdm-exit.c: Call __reset.
	* m68k/bdm-isv.c: Remove.
	* m68k/cf.sc: Adjust to produce either rom or ram images.
	* m68k/dbug-exit.S, m68k/dbug-inbyte.S, m68k/dbug-outbyte.S: Remove.

	2006-07-24  Nathan Sidwell  <nathan@@codesourcery.com>

	Bug 844
	* m68k/cf.sc: Set entry point to _start.
	* m68k/crt0.X (_start): New name for entrypoint
	(start): Weak alias for start.

	2006-06-09  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/bdm-system.c (_system): Support system(NULL).

	2006-06-08  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/bdm-system.c (_system): Properly encode non failure exit
	code.

	2006-06-05  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/Makefile.in (BDM_SYSOBJS): Remove bdm-inbyte.o.
	Add bdm-time.o.
	* m68k/bdm-close.c: Add copyright notice.
	* m68k/bdm-fstat.c: Add copyright notice.
	* m68k/bdm-gettimeofday.c: Add copyright notice.
	* m68k/bdm-inbyte.c: Remove.
	* m68k/bdm-isatty.c: Add copyright notice.
	* m68k/bdm-lseek.c: Add copyright notice. Fix &/| thinko.
	* m68k/bdm-open.c: Add copyright notice.
	* m68k/bdm-read.c: Add copyright notice.
	* m68k/bdm-rename.c: Add copyright notice.
	* m68k/bdm-stat.c: Add copyright notice.
	* m68k/bdm-system.c: Add copyright notice.
	* m68k/bdm-time.c: New.
	* m68k/bdm-unlink.c: Add copyright notice.
	* m68k/bdm-write.c: Add copyright notice.

	2006-05-25  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/Makefile.in (m52235-dbug.ld, m52235-bdm.ld): New
	scripts.

	2006-05-24  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/Makefile.in (BDM_SYSOBJS): Remove bdm-outbyte.o.
	* m68k/bdm-outbyte.c: Delete.
	* m68k/bdm-semihost.h (BDM_OUTBYTE): Mark as obsolete.

	2006-05-22  Sandra Loosemore <sandra@@codesourcery.com>

	* m68k/bdm-semihost.h: Add new constants for additional
	semihosting functions.  Add new BDM_TRAP macro to encapsulate
	inline asm.
	* m68k/bdm-exit.c (_exit): Use new BDM_TRAP macro.
	* m68k/bdm-outbyte.c (outbyte): Ditto.
	* m68k/bdm-isrs.c, m68k/bdm-isv.c: Former BDM_TRAP
	now called BDM_TRAPNUM.
	* m68k/bdm-gdb.h, m68k/bdm-gdb.c: New files
	containing declarations and conversion functions for GDB's fileio
	protocol.
	* m68k/bdm-close.c: New file to define corresponding function.
	* m68k/bdm-fstat.c: Ditto.
	* m68k/bdm-gettimeofday.c: Ditto.
	* m68k/bdm-isatty.c: Ditto.
	* m68k/bdm-lseek.c: Ditto.
	* m68k/bdm-open.c: Ditto.
	* m68k/bdm-read.c: Ditto.
	* m68k/bdm-rename.c: Ditto.
	* m68k/bdm-stat.c: Ditto.
	* m68k/bdm-system.c: Ditto.
	* m68k/bdm-unlink.c: Ditto.
	* m68k/bdm-write.c Ditto.
	* m68k/Makefile.in: Add dependencies for new files.

	2006-03-29  Nathan Sidwell  <nathan@@codesourcery.com>

	* m68k/bdm-isv.c (software_init_hook): Fix trap numbering.

	* m68k/Makefile.in (CF_SCRIPTS): Add m5329 board.
	Reorder.
	(*-dbug.ld, *-bdm.ld): Add appropriate IO definition.
	(m5329evb-dbug.ld, m5329evb-bdm.ld): New.
	* cf.sc (GROUP): Revert previous change.  Add IO library.

	* m68k/Makefile.in (BDM_BSP, BDM_OBJS, BDM_ISRS): New.
	(CF_SCRIPTS): Rename dbug scripts.  Add bdm scripts. Add m5485
	scripts.
	(all): Add new targets.
	(BDM_BSP): New target.
	(bdm-isv.o, bdm-exit.o, bdm-outbyte.o, bdm-semihost.o): New
	targets.
	(BDM_ISRS): New targets.
	(m5208evb.ld, m5213evb.ld, m5235evb.ld, m5272c3.ld, m5282evb.ld):
	Rename and adjust.
	(m5485evb-dbug): New.
	(m5208evb-bdm.ld, m5213evb-bdm.ld, m5235evb-bdm.ld,
	m5272c3-bdm.ld, m5282evb-bdm.ld, m5485evb-bdm.ld): New.
	(install): Add BDM_BSP.
	* m68k/bdm-exit.c: New
	* m68k/bdm-inbyte.c: New
	* m68k/bdm-outbyte.c: New
	* m68k/bdm-semihost.c: New
	* m68k/bdm-semihost.h: New
	* m68k/bdm-isrs.c: New.
	* m68k/bdm-isv.c: New.
	* dbug-cf.sc: Renamed to ...
	* cf.sc: ... here.  Add bdm flexibility. Remove GROUP

	2006-05-22  Sandra Loosemore <sandra@@codesourcery.com>

	* m68k/bdm-semihost.h: Add new constants for additional
	semihosting functions.  Add new BDM_TRAP macro to encapsulate
	inline asm.
	* m68k/bdm-exit.c (_exit): Use new BDM_TRAP macro.
	* m68k/bdm-outbyte.c (outbyte): Ditto.
	* m68k/bdm-isrs.c, m68k/bdm-isv.c: Former BDM_TRAP
	now called BDM_TRAPNUM.
	* m68k/bdm-gdb.h, m68k/bdm-gdb.c: New files
	containing declarations and conversion functions for GDB's fileio
	protocol.
	* m68k/bdm-close.c: New file to define corresponding function.
	* m68k/bdm-fstat.c: Ditto.
	* m68k/bdm-gettimeofday.c: Ditto.
	* m68k/bdm-isatty.c: Ditto.
	* m68k/bdm-lseek.c: Ditto.
	* m68k/bdm-open.c: Ditto.
	* m68k/bdm-read.c: Ditto.
	* m68k/bdm-rename.c: Ditto.
	* m68k/bdm-stat.c: Ditto.
	* m68k/bdm-system.c: Ditto.
	* m68k/bdm-unlink.c: Ditto.
	* m68k/bdm-write.c Ditto.
	* m68k/Makefile.in: Add dependencies for new files.

newlib/
	Merge from newlib-csl-20060320-branch:
	2006-05-22  Sandra Loosemore <sandra@@codesourcery.com>

	* configure.host: Tell it we have _rename and _system when
	building m68k-unknown-elf.
@
text
@d1 1
a1 1
# Copyright (c) 1995, 1996, 2001 Cygnus Support
d69 2
a70 3
CFLAGS = -g
# ARFLAGS = rv

d120 1
a120 1
# here's all the BDM semihosting stuff
d122 5
a126 10
BDM_CRT0=	bdm-crt0.o
BDM_BSP=	libbdm.a
BDM_OBJS=	bdm-crt1.o bdm-semihost.o $(BDM_SYSOBJS) \
		$(patsubst %,bdm-%.o,${BDM_ISRS})
BDM_OTHER_OBJS=	getpid.o kill.o sbrk.o
BDM_SYSOBJS= 	bdm-close.o bdm-exit.o bdm-fstat.o bdm-gdb.o \
		bdm-gettimeofday.o bdm-isatty.o bdm-lseek.o \
		bdm-open.o bdm-read.o bdm-rename.o \
		bdm-stat.o bdm-system.o bdm-time.o bdm-unlink.o bdm-write.o
BDM_ISRS=	other_interrupt reset access_error address_error \
d130 16
a145 5
	format_error spurious_interrupt trap0 trap1 trap2 trap3 trap4 \
	trap5 trap6 trap7 trap8 trap9 trap10 trap11 trap12 trap13 trap14 \
	trap15 fp_branch_unordered fp_inexact_result fp_divide_by_zero \
	fp_underflow fp_operand_error fp_overflow fp_input_not_a_number \
	fp_input_denormalized_number unsupported_instruction
d147 2
a148 2
CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5272c3 m5282evb \
	m5329evb m5485evb
d151 19
a169 1
CF_SCRIPTS=  $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS)
d174 1
a174 6
#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${IDPGDB_BSP} \
	${MVME135_BSP} ${MVME162_BSP} ${BDM_CRT0} ${BDM_BSP} ${CF_SCRIPTS}
d179 7
a201 4
${BDM_BSP}: $(BDM_OTHER_OBJS) ${BDM_OBJS}
	${AR} ${ARFLAGS} $@@ $(BDM_OTHER_OBJS) ${BDM_OBJS}
	${RANLIB} $@@

d210 38
a247 31
$(BDM_SYSOBJS): %.o: %.c bdm-semihost.h bdm-gdb.h
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ 
bdm-crt0.o : bdm-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@
bdm-crt1.o : bdm-crt1.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@
#We need to omit the frame pointer to ensure there is no prologue.
bdm-semihost.o : bdm-semihost.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ -fomit-frame-pointer

# We need to keep the frame pointer to make sure there's some
# prologue.  Otherwise we get confused with the semihosting reoutine.
$(patsubst %,bdm-%.o,${BDM_ISRS}) : bdm-isrs.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ \
	  -DL_$(patsubst bdm-%.o,%,$@@) -fno-omit-frame-pointer

#            RAM       ROM
m5208evb  := 1024M 16M 0M 2M
m5213evb  :=  512M 32K 0M 256K
m52235evb :=  512M 32K 0M 256K
m5235evb  :=    0M 16M 0xFFE00000 2M
m5273c3   :=    0M  4M 0xFFE00000 2M
m5282evb  :=    0M 16M 0xFFE00000 2M
m5329evb  := 1024M 32M 0M 2M
m5485evb  :=    0M 64M 1024M 16M

%-ram.ld : cf.sc Makefile
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) ${SHELL} $< >$@@
%-rom.ld : cf.sc Makefile
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ROM=$(word 3,$($*)) ROM_SIZE=$(word 4,$($*)) ${SHELL} $< >$@@
d250 1
a250 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $<
d253 1
a253 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $<
d256 1
a256 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $<
d259 1
a259 1
	$(CC) $(CFLAGS_FOR_TARGET) -DGDB_MONITOR_OUTPUT $(INCLUDES) -c $< -o $@@
d262 1
a262 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $<
d281 1
a281 1
	${CC} $(CFLAGS_FOR_TARGET) -L${srcdir} -L${objdir} \
d291 1
a291 1
	${CC} $(CFLAGS_FOR_TARGET) -L${srcdir} -L${objdir} \
d332 1
a332 1
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -o $@@ -c $<
d343 5
a347 1
install:
a368 4
	# install BDM stuff
	$(INSTALL_PROGRAM) $(BDM_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_CRT0)
	$(INSTALL_PROGRAM) $(BDM_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_BSP)

d371 8
d382 9
@


1.5
log
@
2006-02-22  Nathan Sidwell  <nathan@@codesourcery.com>

        * m68k/Makefile.in (CF_SCRIPTS): New.
        (all): Add CF_SCRIPTS.
        (m5208evb.ld, m5213evb.ld, m5235evb.ld, m5272c3.ld,
        m5282evb.ld): New targets
        (install): Iterate over CF_SCRIPTS.
        * m68k/crt0.S: Don't use dbra on any cf chips.
        * m68k/dbug-cf.sc: New.
@
text
@d121 1
a121 1
# here's all the DBUG target stuff
d123 24
a146 4
DBUG_BSP=	libdbug.a
DBUG_OBJS=	dbug-exit.o dbug-inbyte.o dbug-outbyte.o

CF_SCRIPTS=   m5208evb.ld m5213evb.ld m5235evb.ld m5272c3.ld m5282evb.ld
d155 2
a156 1
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP} ${DBUG_BSP} ${CF_SCRIPTS}
d177 2
a178 2
${DBUG_BSP}: $(OBJS) ${DBUG_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${DBUG_OBJS}
d189 31
a219 14
m5208evb.ld: dbug-cf.sc Makefile
	RAMSTART=1024M RAMSIZE=16M RAMDBUG=128K ${SHELL} $< > $@@

m5213evb.ld: dbug-cf.sc Makefile
	RAMSTART=512M RAMSIZE=32K RAMDBUG=8K ${SHELL} $< > $@@

m5235evb.ld: dbug-cf.sc Makefile
	RAMSTART=0M RAMSIZE=16M RAMDBUG=64K ${SHELL} $< > $@@

m5272c3.ld: dbug-cf.sc Makefile
	RAMSTART=0M RAMSIZE=4M RAMDBUG=128K ${SHELL} $< > $@@

m5282evb.ld: dbug-cf.sc Makefile
	RAMSTART=0M RAMSIZE=16M RAMDBUG=64K ${SHELL} $< > $@@
d337 4
a340 2
	# install DBUG stuff
	$(INSTALL_PROGRAM) $(DBUG_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(DBUG_BSP)
@


1.5.2.1
log
@	* libgloss/m68k/Makefile.in (BDM_BSP, BDM_OBJS, BDM_ISRS): New.
	(CF_SCRIPTS): Rename dbug scripts.  Add bdm scripts. Add m5485
	scripts.
	(all): Add new targets.
	(BDM_BSP): New target.
	(bdm-isv.o, bdm-exit.o, bdm-outbyte.o, bdm-semihost.o): New
	targets.
	(BDM_ISRS): New targets.
	(m5208evb.ld, m5213evb.ld, m5235evb.ld, m5272c3.ld, m5282evb.ld):
	Rename and adjust.
	(m5485evb-dbug): New.
	(m5208evb-bdm.ld, m5213evb-bdm.ld, m5235evb-bdm.ld,
	m5272c3-bdm.ld, m5282evb-bdm.ld, m5485evb-bdm.ld): New.
	(install): Add BDM_BSP.
	* libgloss/m68k/bdm-exit.c: New
	* libgloss/m68k/bdm-inbyte.c: New
	* libgloss/m68k/bdm-outbyte.c: New
	* libgloss/m68k/bdm-semihost.c: New
	* libgloss/m68k/bdm-semihost.h: New
	* libgloss/m68k/bdm-isrs.c: New.
	* libgloss/m68k/bdm-isv.c: New.
	* cf-dbug.sc: Renamed to ...
	* cf.sc: ... here.  Add bdm flexibility. Remove GROUP
@
text
@d126 1
a126 20
#
# here's all the BDM semihosting stuff
#
BDM_BSP=	libbdm.a
BDM_OBJS=	bdm-exit.o bdm-inbyte.o bdm-outbyte.o bdm-isv.o \
		bdm-semihost.o $(patsubst %,bdm-%.o,${BDM_ISRS})
BDM_ISRS=	other_interrupt reset access_error address_error \
	illegal_instruction divide_by_zero privilege_violation \
	trace unimplemented_line_a_opcode unimplemented_line_f_opcode \
	non_pc_breakpoint_debug_interrupt pc_breakpoint_debug_interrupt \
	format_error spurious_interrupt trap0 trap1 trap2 trap3 trap4 \
	trap5 trap6 trap7 trap8 trap9 trap10 trap11 trap12 trap13 trap14 \
	trap15 fp_branch_unordered fp_inexact_result fp_divide_by_zero \
	fp_underflow fp_operand_error fp_overflow fp_input_not_a_number \
	fp_input_denormalized_number unsupported_instruction

CF_SCRIPTS=   m5208evb-dbug.ld m5213evb-dbug.ld m5235evb-dbug.ld \
	m5272c3-dbug.ld m5282evb-dbug.ld m5485evb-dbug.ld \
	m5208evb-bdm.ld m5213evb-bdm.ld m5235evb-bdm.ld \
	m5272c3-bdm.ld m5282evb-bdm.ld m5485evb-bdm.ld
d135 1
a135 1
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP} ${DBUG_BSP} ${BDM_BSP} ${CF_SCRIPTS}
a159 4
${BDM_BSP}: $(OBJS) ${BDM_OBJS}
	${AR} ${ARFLAGS} $@@ $(OBJS) ${BDM_OBJS}
	${RANLIB} $@@

d168 1
a168 11
bdm-isv.o : bdm-isv.c bdm-semihost.h
bdm-exit.o : bdm-exit.c bdm-semihost.h
bdm-outbyte.o : bdm-outbyte.c bdm-semihost.h
bdm-semihost.o : bdm-semihost.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ -fomit-frame-pointer

$(patsubst %,bdm-%.o,${BDM_ISRS}) : bdm-isrs.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ \
	  -DL_$(patsubst bdm-%.o,%,$@@) -fno-omit-frame-pointer

m5208evb-dbug.ld: cf.sc Makefile
d171 1
a171 1
m5213evb-dbug.ld: cf.sc Makefile
d174 1
a174 1
m5235evb-dbug.ld: cf.sc Makefile
d177 1
a177 1
m5272c3-dbug.ld: cf.sc Makefile
d180 1
a180 1
m5282evb-dbug.ld: cf.sc Makefile
a182 21
m5485evb-dbug.ld: cf.sc Makefile
	RAMSTART=0M RAMSIZE=64M RAMDBUG=128K ${SHELL} $< > $@@

m5208evb-bdm.ld: cf.sc Makefile
	ISV=1 RAMSTART=1024M RAMSIZE=16M ${SHELL} $< > $@@

m5213evb-bdm.ld: cf.sc Makefile
	ISV=1 RAMSTART=512M RAMSIZE=32K ${SHELL} $< > $@@

m5235evb-bdm.ld: cf.sc Makefile
	ISV=1 RAMSTART=0M RAMSIZE=16M ${SHELL} $< > $@@

m5272c3-bdm.ld: cf.sc Makefile
	ISV=1 RAMSTART=0M RAMSIZE=4M ${SHELL} $< > $@@

m5282evb-bdm.ld: cf.sc Makefile
	RAMSTART=0M RAMSIZE=16M ${SHELL} $< > $@@

m5485evb-bdm.ld: cf.sc Makefile
	ISV=1 RAMSTART=0M RAMSIZE=64M ${SHELL} $< > $@@

a300 3
	# install BDM stuff
	$(INSTALL_PROGRAM) $(BDM_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_BSP)

@


1.5.2.2
log
@	* libgloss/m68k/Makefile.in (CF_SCRIPTS): Add m5329 board.
	Reorder.
	(*-dbug.ld, *-bdm.ld): Add appropriate IO definition.
	(m5329evb-dbug.ld, m5329evb-bdm.ld): New.
	* cf.sc (GROUP): Revert previous change.  Add IO library.
@
text
@d142 4
a145 7
CF_SCRIPTS=   m5208evb-dbug.ld 	m5208evb-bdm.ld \
	m5213evb-dbug.ld m5213evb-bdm.ld \
	m5235evb-dbug.ld m5235evb-bdm.ld \
	m5272c3-dbug.ld m5272c3-bdm.ld \
	m5282evb-dbug.ld m5282evb-bdm.ld \
	m5329evb-dbug.ld m5329evb-bdm.ld \
	m5485evb-dbug.ld m5485evb-bdm.ld
d202 1
a202 4
	IO=dbug RAMSTART=1024M RAMSIZE=16M RAMDBUG=128K ${SHELL} $< > $@@

m5208evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=1024M RAMSIZE=16M ${SHELL} $< > $@@
d205 1
a205 4
	IO=dbug RAMSTART=512M RAMSIZE=32K RAMDBUG=8K ${SHELL} $< > $@@

m5213evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=512M RAMSIZE=32K ${SHELL} $< > $@@
d208 1
a208 1
	IO=dbug RAMSTART=0M RAMSIZE=16M RAMDBUG=64K ${SHELL} $< > $@@
d210 2
a211 2
m5235evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=0M RAMSIZE=16M ${SHELL} $< > $@@
d213 2
a214 2
m5272c3-dbug.ld: cf.sc Makefile
	IO=dbug RAMSTART=0M RAMSIZE=4M RAMDBUG=128K ${SHELL} $< > $@@
d216 2
a217 2
m5272c3-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=0M RAMSIZE=4M ${SHELL} $< > $@@
d219 2
a220 2
m5282evb-dbug.ld: cf.sc Makefile
	IO=dbug RAMSTART=0M RAMSIZE=16M RAMDBUG=64K ${SHELL} $< > $@@
d222 2
a223 2
m5282evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=0M RAMSIZE=16M ${SHELL} $< > $@@
d225 2
a226 2
m5329evb-dbug.ld: cf.sc Makefile
	IO=dbug RAMSTART=1024M RAMSIZE=32M RAMDBUG=128K ${SHELL} $< > $@@
d228 2
a229 2
m5329evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=1024M RAMSIZE=32M RAMDBUG=128K ${SHELL} $< > $@@
d231 2
a232 2
m5485evb-dbug.ld: cf.sc Makefile
	IO=dbug RAMSTART=0M RAMSIZE=64M RAMDBUG=128K ${SHELL} $< > $@@
d235 1
a235 1
	IO=bdm ISV=1 RAMSTART=0M RAMSIZE=64M ${SHELL} $< > $@@
@


1.5.2.3
log
@Add semihosting support for BDM mode on ColdFire
@
text
@d130 2
a131 7
BDM_OBJS=	bdm-isv.o bdm-semihost.o $(BDM_SYSOBJS) \
		$(patsubst %,bdm-%.o,${BDM_ISRS})
BDM_OTHER_OBJS=	getpid.o kill.o sbrk.o print.o putnum.o
BDM_SYSOBJS= 	bdm-close.o bdm-exit.o bdm-fstat.o bdm-gdb.o \
		bdm-gettimeofday.o bdm-inbyte.o bdm-isatty.o bdm-lseek.o \
		bdm-open.o bdm-outbyte.o bdm-read.o bdm-rename.o \
		bdm-stat.o bdm-system.o bdm-unlink.o bdm-write.o
d182 2
a183 2
${BDM_BSP}: $(BDM_OTHER_OBJS) ${BDM_OBJS}
	${AR} ${ARFLAGS} $@@ $(BDM_OTHER_OBJS) ${BDM_OBJS}
a193 3

$(BDM_SYSOBJS): %.o: %.c bdm-semihost.h bdm-gdb.h
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@ 
d195 2
@


1.5.2.4
log
@	* libgloss/m68k/Makefile.in (BDM_SYSOBJS): Remove bdm-outbyte.o
	* libgloss/m68k/bdm-outbyte.c: Delete.
	* libgloss/m68k/bdm-semihost.h (BDM_OUTBYTE): Mark as obsolete.
@
text
@d135 1
a135 1
		bdm-open.o bdm-read.o bdm-rename.o \
@


1.5.2.5
log
@	* libgloss/m68k/Makefile.in (m52235-dbug.ld, m52235-bdm.ld): New
	scripts.
@
text
@a148 1
	m52235evb-dbug.ld m52235evb-bdm.ld \
a221 6
m52235evb-dbug.ld: cf.sc Makefile
	IO=dbug RAMSTART=512M RAMSIZE=32K RAMDBUG=8K ${SHELL} $< > $@@

m52235evb-bdm.ld: cf.sc Makefile
	IO=bdm ISV=1 RAMSTART=512M RAMSIZE=32K ${SHELL} $< > $@@

@


1.5.2.6
log
@	* libgloss/m68k/Makefile.in (BDM_SYSOBJS): Remove bdm-inbyte.o.
	Add bdm-time.o.
	* libgloss/m68k/bdm-close.c: Add copyright notice.
	* libgloss/m68k/bdm-fstat.c: Add copyright notice.
	* libgloss/m68k/bdm-gettimeofday.c: Add copyright notice. Fix &/|
	thinko.
	* libgloss/m68k/bdm-inbyte.c: Remove.
	* libgloss/m68k/bdm-isatty.c: Add copyright notice.
	* libgloss/m68k/bdm-lseek.c: Add copyright notice.
	* libgloss/m68k/bdm-open.c: Add copyright notice.
	* libgloss/m68k/bdm-read.c: Add copyright notice.
	* libgloss/m68k/bdm-rename.c: Add copyright notice.
	* libgloss/m68k/bdm-stat.c: Add copyright notice.
	* libgloss/m68k/bdm-system.c: Add copyright notice.
	* libgloss/m68k/bdm-time.c: New.
	* libgloss/m68k/bdm-unlink.c: Add copyright notice.
	* libgloss/m68k/bdm-write.c: Add copyright notice.
@
text
@d134 1
a134 1
		bdm-gettimeofday.o bdm-isatty.o bdm-lseek.o \
d136 1
a136 1
		bdm-stat.o bdm-system.o bdm-time.o bdm-unlink.o bdm-write.o
@


1.5.2.7
log
@	libgloss/
	* m68k/Makefile.in (DBUG_BSP, DBUG_OBJS): Remove.
	(BDM_CRT0): New.
	(BDM_OBJS): Add bdm-crt1.o.
	(BDM_OTHER_OBJS): Remove print.o putnum.o
	(CF_BOARDS): New.
	(CF_BDM_SCRIPTS): Generated name of ram scripts.
	(CF_ROM_SCRIPTS): Generated name of rom scripts.
	(CF_SCRIPTS): Adjust.
	(all): Add BDM_CRT0.
	(bdm-crt0.o, bdm-crt1.o): New targets.
	(bdm-isv.o): Remove.
	(m5208evb, m5213evb, m52235evb, m5235evb, m5273c3, m5282evb,
	m5329evb, m5485evb): New.
	(%-bdm.ld, %-rom.ld): New. Replace individual linker script rules.
	(install): Remove DBUG installs.
	* m68k/bdm-crt0.S: New.
	* m68k/bdm-crt1.c: New.
	* m68k/bdm-exit.c: Call __reset.
	* m68k/bdm-isv.c: Remove.
	* m68k/cf.sc: Adjust to produce either rom or ram images.
	* m68k/dbug-exit.S, m68k/dbug-inbyte.S, m68k/dbug-outbyte.S: Remove.
@
text
@d121 6
a128 1
BDM_CRT0=	bdm-crt0.o
d130 1
a130 1
BDM_OBJS=	bdm-crt1.o bdm-semihost.o $(BDM_SYSOBJS) \
d132 1
a132 1
BDM_OTHER_OBJS=	getpid.o kill.o sbrk.o
d147 8
a154 5
CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5272c3 m5282evb \
	m5329evb m5485evb
CF_BDM_SCRIPTS := $(patsubst %,%-bdm.ld,$(CF_BOARDS))
CF_ROM_SCRIPTS := $(patsubst %,%-rom.ld,$(CF_BOARDS))
CF_SCRIPTS=  $(CF_BDM_SCRIPTS) $(CF_ROM_SCRIPTS)
d163 1
a163 2
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${IDPGDB_BSP} \
	${MVME135_BSP} ${MVME162_BSP} ${BDM_CRT0} ${BDM_BSP} ${CF_SCRIPTS}
d184 4
d200 1
d203 1
a203 5
bdm-crt0.o : bdm-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@
bdm-crt1.o : bdm-crt1.c
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@
#We need to omit the frame pointer to ensure there is no prologue.
a206 2
# We need to keep the frame pointer to make sure there's some
# prologue.  Otherwise we get confused with the semihosting reoutine.
d211 47
a257 15
#            RAM       ROM
m5208evb  := 1024M 16M 0M 2M
m5213evb  :=  512M 32K 0M 256K
m52235evb :=  512M 32K 0M 256K
m5235evb  :=    0M 16M 0xFFE00000 2M
m5273c3   :=    0M  4M 0xFFE00000 2M
m5282evb  :=    0M 16M 0xFFE00000 2M
m5329evb  := 1024M 32M 0M 2M
m5485evb  :=    0M 64M 1024M 16M

%-bdm.ld : cf.sc Makefile
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) ${SHELL} $< >$@@
%-rom.ld : cf.sc Makefile
	RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ROM=$(word 3,$($*)) ROM_SIZE=$(word 4,$($*)) ${SHELL} $< >$@@
d375 2
a377 1
	$(INSTALL_PROGRAM) $(BDM_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_CRT0)
@


1.5.2.8
log
@	libgloss/
	* m68k/Makefile.in (CF_BDM_SCRIPTS): Rename to CF_RAM_SCRIPTS.
	(CF_SCRIPTS): Update.
	(%-bdm.ld): Rename to %-ram.ld.
@
text
@d144 1
a144 1
CF_RAM_SCRIPTS := $(patsubst %,%-ram.ld,$(CF_BOARDS))
d146 1
a146 1
CF_SCRIPTS=  $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS)
d215 1
a215 1
%-ram.ld : cf.sc Makefile
@


1.5.2.9
log
@	libgloss/
	* m68k/Makefile.in (CF_SOURCES): New.
	(install): Install them.
@
text
@d146 1
a146 2
CF_SCRIPTS = $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS)
CF_SOURCES = bdm-crt0.S bdm-crt1.c asm.h
d338 3
a340 5
	$(INSTALL_DATA) $(BDM_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_CRT0)
	$(INSTALL_DATA) $(BDM_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BDM_BSP)
	for src in $(CF_SOURCES) ; \
	do $(INSTALL_DATA) ${srcdir}/$$src $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$src ; \
	done
@


1.5.2.10
log
@	libgloss/
	* m68k/Makefile.in (bdm-semihost.o): Build from bdm-semihost.S.
	* m68k/bdm-semihost.c: Remove.
	* m68k/bdm-semihost.S: New.
	* m68k/bdm-crt0.S: Don't install semihosting trap handler.
	* m68k/bdm-close.c, bdm-exit.c, bdm-fstat.c, bdm-gettimeofday.c,
	bdm-isatty.c, bdm-lseek.c, bdm-open.c, bdm-read.c, bdm-rename.c,
	bdm-stat.c, bdm-system.c, bdm-unlink.c, bdm-write.c): Update.
	* m68k/bdm-isrs.c: Update comment.
	* m68k/bdm-semihost.h (BDM_TRAPNUM, BDM_FUNC_REG, BDM_ARG_REG,
	BDM_TRAP): Remove.
	(__bdm_semihost): Declare.
@
text
@d127 1
a127 1
BDM_OTHER_OBJS=	getpid.o kill.o
d130 1
a130 1
		bdm-open.o bdm-read.o bdm-rename.o bdm-sbrk.o \
d196 3
a198 2
bdm-semihost.o : bdm-semihost.S
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $< -o $@@
@


1.5.2.11
log
@	libgloss/
	* m68k/Makefile.in: Don't force a frame pointer on the ISRs.
	* m68k/bdm-crt1.c (__start1): Don't set the VBR here.
	(hardeare_init_hook): Define weakly.  Set VBR here, enable caching
	if supported.
@
text
@d199 2
d203 1
a203 1
	  -DL_$(patsubst bdm-%.o,%,$@@)
@


1.5.2.12
log
@	libgloss/
	* m68k/Makefile.in: Adjust Coldfire rules.
	(BDM_CRT0, BDM_BSP, BDM_OBJS, BDM_ISRS): Rename	to ...
	(CF_CRT0, CF_BSP, CF_OBJS, CF_ISRS): ... here.  Adjust.
	(BDM_OTHER_OBJS): Remove.
	(BDM_SYSOBJS): Rename to ...
	(UNHOSTED_OBJS): ... here.  Adjust.
	(UNHOSTED_BSP, HOSTED_OBJS, HOSTED_BSP): New.
	(CF_HOSTED_SCRIPTS): New.
	(CF_SCRIPTS, CF_SOURCES): Adjust.
	* m68k/cf.sc: Add IO library variable.
	* m68k/bdm-crt0.S, m68k/bdm-crt1.c, m68k/bdm-isrs.c,
	m68k/bdm-sbrk.c, m68k/bdm-semihost.S: Rename to ...
	* m68k/cf-crt0.S, m68k/cf-crt1.c, m68k/cf-isrs.c, m68k/cf-sbrk.c,
	m68k/cf-hosted.S: ... here.
	* m68k/cf-exit.c: New.
	* m68k/bdm-gdb.h, m68k/bdm-semihost.h: Merge into ...
	* m68k/io.h: ... here.  Add unhosted support.  Adjust conversion
	function names.
	* m68k/bdm-gdb.c: Rename to ...
	* m68k/io-gdb.c: ... here.  Adjust names of conversion functions.
	* m68k/bdm-close.c, m68k/bdm-exit.c, m68k/bdm-fstat.c,
	m68k/bdm-gettimeofday.c, m68k/bdm-isatty.c, m68k/bdm-lseek.c,
	m68k/bdm-open.c, m68k/bdm-read.c, m68k/bdm-rename.c,
	m68k/bdm-stat.c, m68k/bdm-system.c, m68k/bdm-time.c,
	m68k/bdm-unlink.c, m68k/bdm-write.c: Rename to ...
	* m68k/io-close.c, m68k/io-exit.c, m68k/io-fstat.c,
	m68k/io-gettimeofday.c, m68k/io-isatty.c, m68k/io-lseek.c,
	m68k/io-open.c, m68k/io-read.c, m68k/io-rename.c, m68k/io-stat.c,
	m68k/io-system.c, m68k/io-time.c, m68k/io-unlink.c,
	m68k/io-write.c: ... here.  Include io.h. Adjust for hosted &
	unhosted libraries.  Adjust names of gdb conversion functions.
@
text
@d1 1
a1 1
# Copyright (c) 1995, 1996, 2001 Cygnus Support  -*- mode:makefile -*-
d121 1
a121 1
# here's all the unhosted stuff
d123 10
a132 21
UNHOSTED_BSP=	libunhosted.a
UNHOSTED_OBJS=	unhosted-close.o unhosted-fstat.o \
		unhosted-gettimeofday.o unhosted-isatty.o unhosted-lseek.o \
		unhosted-open.o unhosted-read.o unhosted-rename.o \
		unhosted-stat.o unhosted-system.o unhosted-time.o \
		unhosted-unlink.o unhosted-write.o

#
# here's all the hosted stuff
#
HOSTED_BSP=	libhosted.a
HOSTED_OBJS=	hosted-gdb.o hosted-exit.o $(patsubst un%,%,$(UNHOSTED_OBJS))

#
# here's all the ColdFire boards
#
CF_CRT0=	cf-crt0.o
CF_BSP=		libcf.a
CF_OBJS=	cf-crt1.o cf-hosted.o getpid.o kill.o cf-sbrk.o cf-exit.o \
		$(patsubst %,cf-%.o,${CF_ISRS})
CF_ISRS=	other_interrupt reset access_error address_error \
d146 2
a147 3
CF_HOSTED_SCRIPTS := $(patsubst %.ld,%-hosted.ld,$(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS))
CF_SCRIPTS = $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS) $(CF_HOSTED_SCRIPTS)
CF_SOURCES = cf-crt0.S cf-crt1.c asm.h
d157 1
a157 2
	${MVME135_BSP} ${MVME162_BSP} ${HOSTED_BSP} ${UNHOSTED_BSP} \
	${CF_CRT0} ${CF_BSP} ${CF_SCRIPTS}
d178 4
d190 8
a197 6
# build hosted library
$(HOSTED_OBJS): hosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) -DHOSTED=1 $(INCLUDES) -c $< -o $@@
$(HOSTED_BSP): $(HOSTED_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@
d199 1
a199 9
# build unhosted library
$(UNHOSTED_OBJS): unhosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) -DHOSTED=0 $(INCLUDES) -c $< -o $@@
$(UNHOSTED_BSP): $(UNHOSTED_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@

# build coldfire library
$(patsubst %,cf-%.o,${CF_ISRS}) : cf-isrs.c
d201 1
a201 4
	  -DL_$(patsubst cf-%.o,%,$@@)
$(CF_BSP): $(CF_OBJS)
	${AR} ${ARFLAGS} $@@ $^
	${RANLIB} $@@
d214 1
a214 2
	IO=unhosted RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ${SHELL} $< >$@@
d216 1
a216 7
	IO=unhosted RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ROM=$(word 3,$($*)) ROM_SIZE=$(word 4,$($*)) ${SHELL} $< >$@@
%-ram-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
	  ${SHELL} $< >$@@
%-rom-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$($*)) RAM_SIZE=$(word 2,$($*)) \
d335 6
a342 6
	# install IO stuff
	$(INSTALL_DATA) $(HOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(HOSTED_BSP)
	$(INSTALL_DATA) $(UNHOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(UNHOSTED_BSP)
	# install CF stuff
	$(INSTALL_DATA) $(CF_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CF_CRT0)
	$(INSTALL_DATA) $(CF_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CF_BSP)
a345 3
	for src in $(CF_SOURCES) ; \
	do $(INSTALL_DATA) ${srcdir}/$$src $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$src ; \
	done
@


1.5.2.13
log
@	libgloss/
	* m68k/Makefile.in (CF_BOARDS): Add m5275evb.
	(m5275evb): New board.
@
text
@d153 2
a154 2
CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5272c3 m5275evb \
	m5282evb m5329evb m5485evb
a226 1
m5275evb  :=    0M 16M 0xFFE00000 2M
@


1.5.2.14
log
@	libgloss/
	* m68k/Makefile.in (CF_CRT0): Rename to CF_CRT0S, separate hosted
	& unhosted versions.
	(CF_OBJS): Add cf-isv.o.
	(CF_SOURCES): Add cf-isv.S.
	(cf-hosted-crt0.o, cf-unhosted-crt0.o): New targets.
	* m68k/cf-isv.S: New, broken out of ...
	* m68k/cf-crt0.S: ... here.  Add HOSTED & UNHOSTED differences.
	* m68k/cf-crt1.c (__start1): Add heap_limit argument.
	(__heap_limit): Define.
	* m68k/cf-sbrk.c (__heap_limit): Declare.
	(sbrk): Adjust for __heap_limit.
	* m68k/cf.sc: Use different crt0's for hosted & unhosted.
	Install a separate isv.o file.
	* m68k/io.h (HOSTED_PUTCHAR): Replace with ...
	(HOSTED_INIT_SIM): ... this.
@
text
@d139 1
a139 1
CF_CRT0S=	cf-hosted-crt0.o cf-unhosted-crt0.o
d141 2
a142 2
CF_OBJS=	cf-isv.o cf-crt1.o cf-hosted.o getpid.o kill.o cf-sbrk.o \
		cf-exit.o $(patsubst %,cf-%.o,${CF_ISRS})
d159 1
a159 1
CF_SOURCES = cf-isv.S cf-crt0.S cf-crt1.c asm.h
d170 1
a170 1
	${CF_CRT0S} ${CF_BSP} ${CF_SCRIPTS}
a204 2
cf-hosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -DHOSTED=1 $(INCLUDES) -c $< -o $@@
a211 2
cf-unhosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -DHOSTED=0 $(INCLUDES) -c $< -o $@@
d367 1
a367 3
	for crt in $(CF_CRT0S) ; \
	do $(INSTALL_DATA) $$crt $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$$crt ; \
	done
@


1.5.2.15
log
@	libgloss/
	* m68k/configure.in (DO) Set to list of target cpu families.
	* m68k/configure: Rebuilt.
	* m68k/Makefile.in (DO): New.
	(UNHOSTED_BSP, UNHOSTED_OBJS, HOSTED_BSP, HOSTED_OBJS): Move
	later.
	(m5208evb, m5213evb, m52235evb, m5235evb, m5273c3, m5275evb,
	m5282evb, m5329evb, m5485evb): Move earlier.
	(all): Add all_$DO dependencies.
	(all_cf, all_m68k): New targets, depend on cf & m68k bsps as
	appropriate.
	(m%-ram.ld, m%-rom.ld, m%-ram-hosted.ld, m%-rom-hosted.ld): Add
	'm' prefix.
	(install): Add install_$DO dependencies.
	(install_cf, install_m68k): New targets.  Perform cf and m68k
	installs as appropriate.
	(install_io): New, install the io libraries.
@
text
@a71 2
# What targets to build for.  This is a list of {m68k,cf}
DO = @@DO@@
d121 16
a152 11
#              RAM       ROM
m5208evb  := 1024M 16M          0M   2M
m5213evb  :=  512M 32K          0M 256K
m52235evb :=  512M 32K          0M 256K
m5235evb  :=    0M 16M  0xFFE00000   2M
m5273c3   :=    0M  4M  0xFFE00000   2M
m5275evb  :=    0M 16M  0xFFE00000   2M
m5282evb  :=    0M 16M  0xFFE00000   2M
m5329evb  := 1024M 32M          0M   2M
m5485evb  :=    0M 64M       1024M  16M

d161 2
a162 9
#
# here's all the unhosted stuff
#
UNHOSTED_BSP=	libunhosted.a
UNHOSTED_OBJS=	unhosted-close.o unhosted-fstat.o \
		unhosted-gettimeofday.o unhosted-isatty.o unhosted-lseek.o \
		unhosted-open.o unhosted-read.o unhosted-rename.o \
		unhosted-stat.o unhosted-system.o unhosted-time.o \
		unhosted-unlink.o unhosted-write.o
d165 2
a166 1
# here's all the hosted stuff
d168 3
a170 7
HOSTED_BSP=	libhosted.a
HOSTED_OBJS=	hosted-gdb.o hosted-exit.o $(patsubst un%,%,$(UNHOSTED_OBJS))

# Host specific makefile fragment comes in here.
@@host_makefile_frag@@

all :: $(DO:%=all_%)
a174 8

.PHONY: all_m68k
all_m68k :: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} \
	${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP}
.PHONY: all_cf
all_cf :: ${CF_CRT0S} ${CF_BSP} ${CF_SCRIPTS} ${HOSTED_BSP} ${UNHOSTED_BSP}


d225 13
a237 2
m%-ram.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
d239 5
a243 5
m%-rom.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@@
m%-ram-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
d245 3
a247 3
m%-rom-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@@
d343 1
a343 5
install:: $(DO:%=install_%)


.PHONY:install_m68k
install_m68k::
d367 3
a369 3

.PHONY: install_cf
install_cf:: install_io
a381 6
.PHONY: install_io
install_io::
	# install IO stuff
	$(INSTALL_DATA) $(HOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(HOSTED_BSP)
	$(INSTALL_DATA) $(UNHOSTED_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(UNHOSTED_BSP)

@


1.5.2.16
log
@	libgloss/
	* m68k/Makefile.in (CFLAGS): Do not clear.  Add to all compilations.
	(ARFLAGS): Remove commented out definition.
@
text
@d69 3
d216 1
a216 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@@
d221 1
a221 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@@
d225 1
a225 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@@
d230 1
a230 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@@
d234 1
a234 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $< -o $@@ \
d254 1
a254 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<
d257 1
a257 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<
d260 1
a260 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<
d263 1
a263 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DGDB_MONITOR_OUTPUT $(INCLUDES) -c $< -o $@@
d266 1
a266 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<
d285 1
a285 1
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
d295 1
a295 1
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
d336 1
a336 1
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -o $@@ -c $<
@


1.5.2.17
log
@	/
	* config.sub: Recognize fido and fido-*.

	libgloss/
	* configure.in: Recognize fido-*-*.
	* configure: Regenerate.
	* m68k/Makefile.in (CF_ISRS): Use addprefix.
	(FIDO_CRT0, FIDO_BSP, FIDO_OBJS, FIDO_HANDLERS,
	FIDO_UNHOSTED_SCRIPTS, FIDO_HOSTED_SCRIPTS, FIDO_SCRIPTS,
	FIDO_SOURCES, all_fido, fido-%-crt0.o, fido-rom.ld,
	fido-rom-hosted.ld, fido-sram.ld, fido-sram-hosted.ld,
	fido-sdram.ld, fido-sdram-hosted.ld, fido-redboot.ld,
	install_fido): New.
	* m68k/asm.h (mbb): New.
	* m68k/configure.in (DO): Check for __mfido__.
	* m68k/configure: Regenerate.
	* m68k/fido-_exit.c, m68k/fido-crt0.S, m68k/fido-handler.c,
	m68k/fido-hosted.S, m68k/fido-sbrk.c, m68k/fido.h,
	m68k/fido.sc, m68k/fido_profiling.h: New.

	newlib/
	* configure.host: Recognize fido.
@
text
@d130 5
a134 5
	format_error spurious_interrupt  fp_branch_unordered \
	fp_inexact_result fp_divide_by_zero fp_underflow fp_operand_error \
	fp_overflow fp_input_not_a_number fp_input_denormalized_number \
	unsupported_instruction \
	$(addprefix trap,0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
a154 30
# Fido board.
# Programs built with the ROM linker script are designed to be
# executed from flash.  Programs built with the RAM linker script are
# designed to be run via JTAG.  Program built with the RedBoot linker
# script are designed to be run from the RedBoot boot loader.
FIDO_CRT0S    = fido-rom-crt0.o fido-ram-crt0.o fido-redboot-crt0.o
FIDO_BSP      = libfido.a
FIDO_OBJS     = fido-hosted.o getpid.o kill.o fido-sbrk.o fido-_exit.o \
		$(patsubst %,fido-%Handler.o,$(FIDO_HANDLERS))
FIDO_HANDLERS:= BusError AddressError IllegalInstruction DivideByZero Chk \
	Trapcc PriviligeViolation Trace ALine FLine HwBreakpoint Reserved0 \
	FormatError UnitializedInt SoftwareInt \
	$(addprefix Unassigned,0 1 2 3 4 5 6) \
	$(addprefix Int,0 1 2 3 4 5 6 7) \
	$(addprefix Trap,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	$(addprefix Reserved,048 049 050 051 052 053 054 055 056 057 058 \
				059 060 061 062 063) \
	ContextOvertime MpuError \
	$(addprefix SystemTimer,0 1 2 3 4) \
	WatchdogTimer TimerCounter0 TimerCounter1 DMA0 DMA1 AtoDConversion \
	$(addprefix Pdma,0 1 2 3) \
	$(addprefix Reserved,081 082 083 084 085 086 087 088 089 \
				090 091 092 093 094 095) \
	$(addprefix Trapx,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	Dummy
FIDO_UNHOSTED_SCRIPTS:= fido-rom.ld fido-sram.ld fido-sdram.ld
FIDO_HOSTED_SCRIPTS:=$(patsubst %.ld,%-hosted.ld,$(FIDO_UNHOSTED_SCRIPTS))
FIDO_SCRIPTS  = $(FIDO_UNHOSTED_SCRIPTS) $(FIDO_HOSTED_SCRIPTS) fido-redboot.ld
FIDO_SOURCES  = fido-crt0.S asm.h fido.h

a185 3
.PHONY: all_fido
all_fido :: ${FIDO_CRT0S} ${FIDO_BSP} ${FIDO_SCRIPTS} \
	${HOSTED_BSP} ${UNHOSTED_BSP}
a249 33
#build fido library
fido-%-crt0.o : fido-crt0.S asm.h fido.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) \
		-DFIDO_$* -c -o $@@ $<

$(patsubst %,fido-%Handler.o,${FIDO_HANDLERS}) : fido-handler.c
	$(CC) $(CFLAGS_FOR_TARGET) -fomit-frame-pointer $(CFLAGS) $(INCLUDES) \
		-c $< -o $@@ -DHANDLER=$(patsubst fido-%.o,_%,$@@)
${FIDO_BSP}: ${FIDO_OBJS}
	${AR} ${ARFLAGS} $@@ ${FIDO_OBJS}
	${RANLIB} $@@

fido-rom.ld: fido.sc
	MODE=rom IO=unhosted ${SHELL} $< > $@@

fido-rom-hosted.ld: fido.sc
	MODE=rom IO=hosted ${SHELL} $< > $@@

fido-sram.ld: fido.sc
	MODE=sram IO=unhosted ${SHELL} $< > $@@

fido-sram-hosted.ld: fido.sc
	MODE=sram IO=hosted ${SHELL} $< > $@@

fido-sdram.ld: fido.sc
	MODE=sdram IO=unhosted ${SHELL} $< > $@@

fido-sdram-hosted.ld: fido.sc
	MODE=sdram IO=hosted ${SHELL} $< > $@@

fido-redboot.ld: fido.sc
	MODE=redboot IO=unhosted ${SHELL} $< > $@@

a386 11
.PHONY: install_fido
install_fido:: install_io
	$(INSTALL_PROGRAM) $(FIDO_CRT0S) $(FIDO_BSP) $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)
	for x in $(FIDO_SCRIPTS); do \
		$(INSTALL_DATA) $$x $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}; \
	done
	mkdir -p $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
	for x in $(FIDO_SOURCES); do \
		$(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src; \
	done

@


1.5.2.18
log
@	libgloss/
	* m68k/Makefile (install_cf): Don't loop over files here.  Only
	install sources for the default multilib.
	(install_fido): Likewise.
	(install_io): Install bsps in one go.
@
text
@d442 10
a451 8
	$(INSTALL_DATA) $(CF_CRT0S) $(CF_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(CF_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL_DATA) $(addprefix ${srcdir}/,$(CF_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
endif
d455 8
a462 9
	$(INSTALL_DATA) $(FIDO_CRT0S) $(FIDO_BSP) \
		$(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)
	$(INSTALL_DATA) $(FIDO_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL) -d $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
	$(INSTALL_DATA) $(addprefix $(srcdir)/,$(FIDO_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
endif
d467 2
a468 2
	$(INSTALL_DATA) $(HOSTED_BSP) $(UNHOSTED_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
@


1.5.2.19
log
@	libgloss/
	* m68k/Makefile.in (FIDO_OBJS): Build fido-priv.o.
	* m68k/fido-crt0.S (_vector_table): Reference
	_PrivilegeViolationHandler.
	* m68k/fido-priv.S: New file.
@
text
@d163 1
a163 2
		$(patsubst %,fido-%Handler.o,$(FIDO_HANDLERS)) fido-priv.o
# Note: Do not spell correct Privilige here.  See fido-priv.S.
@


1.5.2.20
log
@	libgloss/
	* m68k/Makefile.in (CF_ISRS): Remove now shared routines.
	* m68k/cf-crt0.S (__reset): Define here.
	(__start): Adjust semihosting.
	* m68k/cf-hosted.S (__hosted): Adjust semihosting.
	* m68k/cf-isrs.c: Share some ISRS.  Add aliases for each IRQ slot.
	* m68k/cf-isv.S: Move to .interrupt_vector section.  Make each
	slot a unique routine.
	* m68k/cf.sc: Adjust for .interrupt_vector section.
@
text
@d126 1
a126 1
CF_ISRS=	other_interrupt access_error address_error \
d128 7
a134 3
	trace unimplemented_opcode breakpoint_debug_interrupt \
	format_error spurious_interrupt fp_interrupt \
	unsupported_instruction trap_interrupt
@


1.5.2.21
log
@	libgloss/
	* m68k/Makefile.in (m5273c3): Rename to ...
	(m5272c3): ... here to fix typo.
	(m5249c3): New.
	(CF_BOARDS): Add it.
@
text
@d137 1
a137 2
m5249c3	  :=    0M  4M  0xFFE00000   2M
m5272c3   :=    0M  4M  0xFFE00000   2M
d143 1
a143 1
CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5249c3 m5272c3 m5275evb \
@


1.4
log
@
2004-06-27  Hideki Iwamoto <h-iwamoto@@kit.hi-ho.ne.jp>

        * Makefile.in: Support $(DESTDIR).
        * arm/Makefile.in: Ditto.
        * d30v/Makefile.in: Ditto.
        * doc/Makefile.in: Ditto.
        * fr30/Makefile.in: Ditto.
        * frv/Makefile.in: Ditto.
        * hp74x/Makefile.in: Ditto.
        * i386/Makefile.in: Ditto.
        * i960/Makefile.in: Ditto.
        * iq2000/Makefile.in: Ditto.
        * libnosys/Makefile.in: Ditto.
        * m32r/Makefile.in: Ditto.
        * m68hc11/Makefile.in: Ditto.
        * m68k/Makefile.in: Ditto.
        * mcore/Makefile.in: Ditto.
        * mips/Makefile.in: Ditto.
        * mn10200/Makefile.in: Ditto.
        * mn10300/Makefile.in: Ditto.
        * pa/Makefile.in: Ditto.
        * rs6000/Makefile.in: Ditto.
        * sparc/Makefile.in: Ditto.
        * sparc/libsys/Makefile.in: Ditto.
        * xstormy16/Makefile.in: Ditto.
@
text
@d126 2
d135 1
a135 1
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP} ${DBUG_BSP}
d168 15
d303 3
@


1.3
log
@Add support for GDB monitor-style I/O.
* m68k/idp-outbyte.c (raw_outbyte): Renamed from outbyte; made
static.
(outbyte): Call raw_outbyte; if GDB_MONITOR_OUTPUT is #defined,
precede the byte with a ^O character.
* m68k/idpgdb.ld: New linker script.
* m68k/Makefile.in (IDPGDB_LDFLAGS, IDPGDB_BSP, IDPGDB_OBJS): New
variables.
(all): Add ${IDPGDB_BSP} to the list of things to build.
(${IDPGDB_BSP}, idp-gdb-outbyte.o, idpgdb-test.x,
idpgdb-test.srec, idpgdb-test.dis, idpgdb-test): New rules.
(install): Install the IDPGDB stuff, too.
@
text
@d17 1
d262 3
a264 3
	$(INSTALL_PROGRAM) $(SIM_CRT0) $(tooldir)/lib${MULTISUBDIR}/$(SIM_CRT0)
	$(INSTALL_PROGRAM) $(SIM_BSP) $(tooldir)/lib${MULTISUBDIR}/$(SIM_BSP)
	$(INSTALL_DATA) ${srcdir}/sim.ld $(tooldir)/lib${MULTISUBDIR}/sim.ld
d266 1
a266 1
	$(INSTALL_PROGRAM) $(CRT0) $(tooldir)/lib${MULTISUBDIR}/$(CRT0)
d268 2
a269 2
	$(INSTALL_PROGRAM) $(BCC_BSP) $(tooldir)/lib${MULTISUBDIR}/$(BCC_BSP)
	$(INSTALL_DATA) ${srcdir}/bcc.ld $(tooldir)/lib${MULTISUBDIR}/bcc.ld
d271 2
a272 2
	$(INSTALL_PROGRAM) $(IDP_BSP) $(tooldir)/lib${MULTISUBDIR}/$(IDP_BSP)
	$(INSTALL_DATA) ${srcdir}/idp.ld $(tooldir)/lib${MULTISUBDIR}/idp.ld
d274 2
a275 2
	$(INSTALL_PROGRAM) $(IDPGDB_BSP) $(tooldir)/lib${MULTISUBDIR}/$(IDPGDB_BSP)
	$(INSTALL_DATA) ${srcdir}/idpgdb.ld $(tooldir)/lib${MULTISUBDIR}/idpgdb.ld
d277 2
a278 2
	$(INSTALL_PROGRAM) $(MVME135_BSP) $(tooldir)/lib${MULTISUBDIR}/$(MVME135_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme135.ld $(tooldir)/lib${MULTISUBDIR}/mvme135.ld
d280 2
a281 2
	$(INSTALL_PROGRAM) $(MVME162_BSP) $(tooldir)/lib${MULTISUBDIR}/$(MVME162_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme162.ld $(tooldir)/lib${MULTISUBDIR}/mvme162.ld
d283 3
a285 3
	$(INSTALL_PROGRAM) $(DBUG_BSP) $(tooldir)/lib${MULTISUBDIR}/$(DBUG_BSP)
	$(INSTALL_DATA) ${srcdir}/sbc5204.ld $(tooldir)/lib${MULTISUBDIR}/sbc5204.ld
	$(INSTALL_DATA) ${srcdir}/sbc5206.ld $(tooldir)/lib${MULTISUBDIR}/sbc5206.ld
@


1.2
log
@
2001-02-28  Will Cohen  <wcohen@@redhat.com>

        * src/libgloss/m68k/Makefile.in: Updated copyright and
         added rules to build simulator related libraries.
        (SIM_SCRIPTS): New variable.
        (SIM_LDFLAGS): New variable.
        (SIM_BSP): New variable.
        (SIM_CRT0): New variable.
        (SIM_OBJS): New variable.
        (SIM_TEST): New variable.
        (SIM_INSTALL): new variable.
        * src/libgloss/m68k/sim-abort.c: New file.
        * src/libgloss/m68k/sim-crt0.S: New file.
        * src/libgloss/m68k/sim-errno.c: New file.
        * src/libgloss/m68k/sim-funcs.c: New file.
        * src/libgloss/m68k/sim-inbyte.c: New file.
        * src/libgloss/m68k/sim-print.c: New file.
        * src/libgloss/m68k/sim-sbrk.c: New file.
        * src/libgloss/m68k/sim.ld: New file.
        * src/libgloss/m68k/simulator.S: New file.
@
text
@d113 7
d132 1
a132 1
all: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} ${MVME135_BSP} ${MVME162_BSP} ${DBUG_BSP}
d149 4
d174 3
d206 10
d272 3
@


1.1
log
@20000317 sourceware import
@
text
@d1 1
a1 1
# Copyright (c) 1995, 1996 Cygnus Support
d71 11
d125 1
a125 1
all: ${CRT0} ${BCC_BSP} ${IDP_BSP} ${MVME135_BSP} ${MVME162_BSP} ${DBUG_BSP}
d130 4
d232 1
d236 5
@

