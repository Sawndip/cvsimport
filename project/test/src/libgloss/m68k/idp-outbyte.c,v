head	1.2;
access;
symbols
	newlib-2_2_0:1.2.0.10
	newlib-2_1_0:1.2
	newlib-2_0_0:1.2
	newlib-1_20_0:1.2
	newlib-1_19_0:1.2
	newlib-1_18_0:1.2
	newlib-1_17_0-arc:1.2.0.8
	binutils-arc-20080908-branch:1.2.0.6
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.2
	newlib-1_10_0:1.2
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.09.10.23.47.42;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add support for GDB monitor-style I/O.
* m68k/idp-outbyte.c (raw_outbyte): Renamed from outbyte; made
static.
(outbyte): Call raw_outbyte; if GDB_MONITOR_OUTPUT is #defined,
precede the byte with a ^O character.
* m68k/idpgdb.ld: New linker script.
* m68k/Makefile.in (IDPGDB_LDFLAGS, IDPGDB_BSP, IDPGDB_OBJS): New
variables.
(all): Add ${IDPGDB_BSP} to the list of things to build.
(${IDPGDB_BSP}, idp-gdb-outbyte.o, idpgdb-test.x,
idpgdb-test.srec, idpgdb-test.dis, idpgdb-test): New rules.
(install): Install the IDPGDB stuff, too.
@
text
@/* idp-outbyte.c
 * Copyright (c) 1995 Cygnus Support
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#include <_ansi.h>
#include "mc68681reg.h"

/* 
 * The DUART is mapped into the IDP address space in an unusual 
 * manner.  The mc68681 is an 8 bit device located on the least
 * significant byte (byte0) of the data bus.  Bytes 3, 2, and 
 * one have nothing in them and writes to these locations are
 * not valid.
 */

#define DUART_ADDR	0x00B00000
#define READREG(x)	(*((volatile char *) DUART_ADDR + (x * 4) + 3))
#define WRITEREG(x, y)	(*((char *) DUART_ADDR + (x * 4) + 3) = y)

/*
 * raw_outbyte -- send a byte to the DUART buffer. This only sends
 *           to channel A.
 */
static void
_DEFUN (raw_outbyte, (byte),
	char byte)
{
  /* First, wait for the UART to finish clocking out the last
     character we sent, if any.  Then, give it the next character to
     work on.  By waiting first, then handing off a new character, we
     allow the UART to work while the processor (perhaps) does other
     things; if we waited after sending each character, there'd be no
     opportunity for parallelism.  */
  while ((READREG (DUART_SRA) & 0x04) == 0x00)
    ;

  WRITEREG (DUART_TBA, byte);		/* write the byte */
}


/*
 * outbyte -- send BYTE out the DUART's channel A, for display to
 *      the user.
 *
 *      Normally, this is identical to raw_outbyte, but if
 *      GDB_MONITOR_OUTPUT is #defined, we prefix each byte we send
 *      with a ^O character (ASCII 15).  This is a signal to GDB's
 *      `rom68k' target to pass the character directly on to the user;
 *      it allows programs to do console output under GDB.
 *
 *      We compile this file twice: once with GDB_MONITOR_OUTPUT
 *      #defined, and once without.  The former .o file we put in
 *      libidpgdb.a, which is included in the link by idpgdb.ld; the
 *      latter we put in libidp.a, which is selected by idp.ld.
 */
void
_DEFUN (outbyte, (byte),
        char byte)
{
#ifdef GDB_MONITOR_OUTPUT
  raw_outbyte (0x0f);
#endif
  raw_outbyte (byte);
}
@


1.1
log
@20000317 sourceware import
@
text
@d31 1
a31 1
 * outbyte -- send a byte to the DUART buffer. This only sends
d34 2
a35 2
void
_DEFUN (outbyte, (byte),
d38 6
d48 26
@

