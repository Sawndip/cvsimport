head	1.5;
access;
symbols
	newlib-2_2_0:1.5.0.6
	newlib-2_1_0:1.5
	newlib-2_0_0:1.5
	newlib-1_20_0:1.5
	newlib-1_19_0:1.5
	newlib-1_18_0:1.5
	newlib-1_17_0-arc:1.5.0.4
	binutils-arc-20080908-branch:1.5.0.2
	binutils-arc-20080908-branchpoint:1.5
	newlib-1_17_0:1.5
	newlib-1_16_0:1.5
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.1.2.2
	newlib-csl-sourcerygxx-4_1-32:1.1.2.2
	newlib-csl-innovasic-fido-3_4_4-33:1.1.2.2
	newlib-csl-20060320-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2007.05.30.18.33.56;	author kazu;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.23.16.22.27;	author kazu;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.27.16.00.45;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.18.21.48.18;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.01.11.02.08;	author kazu;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.12.01.11.02.08;	author kazu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.12.15.16.47.08;	author drow;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* m68k/cf-crt1.C, m68k/cf.sc, m68k/fido.sc, m68k/fido-crt0.S:
	Replace __INIT_SECTION__ and __FINI_SECTION__ with _init and
	_fini, respectively.
@
text
@SRAM_ORIGIN=0x03000000
SRAM_LENGTH=0x00100000

# HEAPEND must be in the same memory region as DATA.  STACK should be
# above HEAPEND, also in the same region, for configurations which
# need __stack.

case $MODE in
    rom)
	CRT0=rom
	TEXT=rom
	DATA=sram
	DATALOAD="rom"
	STACK=0x030ffffc
	HEAPEND=0x03080000
	;;
    sram)
	CRT0=ram
	TEXT=sram
	DATA=sdram
	STACK=0x021ffffc
	HEAPEND=0x02180000
	# Leave the rest of SDRAM for manual use.
	;;
    sdram)
	CRT0=ram
	TEXT=sdram
	DATA=sdram
	STACK=0x021ffffc
	HEAPEND=0x02180000
	# Leave the rest of SDRAM for manual use.
	;;
    redboot)
	CRT0=redboot
	# We need to avoid the area used by RedBoot
	SRAM_ORIGIN=0x3080000
	SRAM_LENGTH=0x80000
	# Put code for RedBoot apps in SRAM, since the fido1100 has
	# trouble running code from SDRAM.
	TEXT=sram
	DATA=sdram
	STACK=0
	HEAPEND=0x027f0000
	;;
    *)
	ERROR
	;;
esac

cat <<EOF
/*
 * Setup the memory map of the Innovasic SBC 
 * stack grows down from high memory.
 *
 * The memory map for the ROM model looks like this:
 *
 * +--------------------+ <-address 0 in Flash
 * | .vector_table      |
 * +--------------------+ <- low memory
 * | .text              |
 * |        _etext      |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * +--------------------+
 * | DCACHE_CODE        | code to be loaded into DCACHE
 * |     _dcache_start  |
 * |     _dcache_end    |
 * +--------------------+
 * | .data              | initialized data goes here
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * +--------------------+ <- The beginning of the SRAM area
 * | .data              | a wriable copy of data goes here.
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * |        _heapend    |    End   of heap, used by sbrk()
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * |        __stack     | top of stack
 * +--------------------+
 *
 *
 * The memory map for the RAM model looks like this:
 *
 * +--------------------+ <- The beginning of the SRAM or SDRAM area.
 * | .vector_table      |
 * +--------------------+ <- low memory
 * | .text              |
 * |        _etext      |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * +--------------------+
 * | DCACHE_CODE        | code to be loaded into DCACHE
 * |     _dcache_start  |
 * |     _dcache_end    |
 * +--------------------+
 * | .data              | initialized data goes here
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * |        _heapend    |    End   of heap, used by sbrk()
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * |        __stack     | top of stack
 * +--------------------+
 */

STARTUP(fido-${CRT0}-crt0.o)
OUTPUT_ARCH(m68k)
ENTRY(_start);
GROUP(-l${IO} -lfido -lc -lgcc)

MEMORY {
  /* Flash ROM.  */
  rom (rx)      : ORIGIN = 0x0000000, LENGTH = 0x800000
  /* Internal SRAM.  */
  int_ram (rwx) : ORIGIN = 0x1000000, LENGTH = 0x6000
  /* External SDRAM.  */
  sdram (rwx)   : ORIGIN = 0x2000000, LENGTH = 0x800000
  /* External SRAM.  */
  sram (rwx)     : ORIGIN = ${SRAM_ORIGIN}, LENGTH = ${SRAM_LENGTH}
}

SECTIONS {
  /* The interrupt vector is placed at the beginning of ${TEXT},
     as required at reset.  */
  .vector_table : {
    *(.vector_table)
  } > ${TEXT}

  /* Text section.  */
  .text :
  {
    *(.text .text.*)
    *(.gnu.linkonce.t.*)

    . = ALIGN(0x4);
    /* These are for running static constructors and destructors under ELF.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*crtend.o(.ctors))
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*crtend.o(.dtors))

    . = ALIGN(0x4);
    KEEP (*crtbegin.o(.jcr))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .jcr))
    KEEP (*crtend.o(.jcr))

    *(.rodata .rodata.*)
    *(.gnu.linkonce.r.*)
    *(.gcc_except_table) 
    *(.eh_frame)

    . = ALIGN(0x2);
    _init = . ;
    LONG (0x4e560000)	/* linkw %fp,#0 */
    *(.init)
    SHORT (0x4e5e)	/* unlk %fp */
    SHORT (0x4e75)	/* rts */

    _fini = . ;
    LONG (0x4e560000)	/* linkw %fp,#0 */
    *(.fini)
    SHORT (0x4e5e)	/* unlk %fp */
    SHORT (0x4e75)	/* rts */
    . = ALIGN(0x800);   /* align to a 2K dcache boundary */
    _dcache_start = .;
    *(DCACHE_CODE)
    _dcache_end = .;
    _etext = .;
    *(.lit)
    . = ALIGN(0x4);
    __start_romdata = .;
  } > ${TEXT}

  /* Initialized data section.  */
  .data :
  {
    _data = .;
    *(.got.plt) *(.got)
    *(.shdata);
    *(.data .data.*)
    *(.gnu.linkonce.d.*)
    _edata_cksum = .;
    *(checksum);
    _edata = .;
  } > ${DATA} ${DATALOAD:+AT>} ${DATALOAD}

  /* Zero-initialized data.  */ 
  .bss :
  {
    . = ALIGN(0x4);
    __bss_start = . ;
    *(.shbss)
    *(.bss .bss.*)
    *(.gnu.linkonce.b.*)
    *(COMMON)
    _end =  ALIGN (0x8);
    __end = _end;
  } > ${DATA}

  /* Specially designated data is placed in the internal RAM.  */
  fast_memory :
  {
    . = ALIGN(0x4);
    __fast_start = .;
    *(FAST_RAM)
    __fast_stop = .;
  } > int_ram
}

PROVIDE (__stack = ${STACK});

PROVIDE (_heapend = ${HEAPEND});
EOF
@


1.4
log
@	* m68k/fido.sc (.data): Move .jcr to .text.  Catch .got.plt
	and .got.
@
text
@d170 1
a170 1
    __INIT_SECTION__ = . ;
d176 1
a176 1
    __FINI_SECTION__ = . ;
@


1.3
log
@
2007-04-27  Kazu Hirata  <kazu@@codesourcery.com>

        * libgloss/m68k/fido.sc: Catch .text.*, .rodata.*, .data.*,
        .bss.*, .ctor.*, and .dtor.*.  Wrap ctor/dtor-related sections
        with KEEP.
@
text
@d159 5
d195 1
a195 1
    KEEP (*(.jcr));
@


1.2
log
@
2006-12-18  Kazu Hirata  <kazu@@codesourcery.com>

        Merge from newlib-csl-20060320-branch:
        2006-12-15  Daniel Jacobowitz  <dan@@codesourcery.com>

        * m68k/fido-crt0.S (_vector_table): Reference
        _PrivilegeViolationHandler.

        2006-12-15  Daniel Jacobowitz  <dan@@codesourcery.com>

        * m68k/fido-crt0.S (_start): Set %vbr for context 0 in
        RAM configs.
        * m68k/fido.sc: Clean up formatting.  Add comments.  Move
        stack and heap end to SDRAM for SRAM and SDRAM configurations.
        Put RedBoot application text in SRAM.

        2006-12-13  Nathan Sidwell  <nathan@@codesourcery.com>

        * m68k/Makefile (install_cf): Don't loop over files here.  Only
        install sources for the default multilib.
        (install_fido): Likewise.
        (install_io): Install bsps in one go.

        2006-12-01  Nathan Sidwell  <nathan@@codesourcery.com>
                    Kazu Hirata  <kazu@@codesourcery.com>

        * configure.in: Recognize fido-*-*.
        * configure: Regenerate.
        * m68k/Makefile.in (CF_ISRS): Use addprefix.
        (FIDO_CRT0, FIDO_BSP, FIDO_OBJS, FIDO_HANDLERS,
        FIDO_UNHOSTED_SCRIPTS, FIDO_HOSTED_SCRIPTS, FIDO_SCRIPTS,
        FIDO_SOURCES, all_fido, fido-%-crt0.o, fido-rom.ld,
        fido-rom-hosted.ld, fido-sram.ld, fido-sram-hosted.ld,
        fido-sdram.ld, fido-sdram-hosted.ld, fido-redboot.ld,
        install_fido): New.
        * m68k/asm.h (mbb): New.
        * m68k/configure.in (DO): Check for __mfido__.
        * m68k/configure: Regenerate.
        * m68k/fido-_exit.c, m68k/fido-crt0.S, m68k/fido-handler.c,
        m68k/fido-hosted.S, m68k/fido-sbrk.c, m68k/fido.h,
        m68k/fido.sc, m68k/fido_profiling.h: New.
@
text
@d145 3
a147 1
    *(.text .gnu.linkonce.t.*)
d149 12
a160 13
     __CTOR_LIST__ = .;
    ___CTOR_LIST__ = .;
    LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
    *(.ctors)
    LONG(0)
    __CTOR_END__ = .;
    __DTOR_LIST__ = .;
    ___DTOR_LIST__ = .;
    LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
    *(.dtors)
     LONG(0)
    __DTOR_END__ = .;
    *(.rodata* .gnu.linkonce.r.*)
d192 2
a193 1
    *(.data .gnu.linkonce.d.*);
d205 2
a206 1
    *(.bss .gnu.linkonce.b.*)
@


1.1
log
@file fido.sc was initially added on branch newlib-csl-20060320-branch.
@
text
@d1 222
@


1.1.2.1
log
@	/
	* config.sub: Recognize fido and fido-*.

	libgloss/
	* configure.in: Recognize fido-*-*.
	* configure: Regenerate.
	* m68k/Makefile.in (CF_ISRS): Use addprefix.
	(FIDO_CRT0, FIDO_BSP, FIDO_OBJS, FIDO_HANDLERS,
	FIDO_UNHOSTED_SCRIPTS, FIDO_HOSTED_SCRIPTS, FIDO_SCRIPTS,
	FIDO_SOURCES, all_fido, fido-%-crt0.o, fido-rom.ld,
	fido-rom-hosted.ld, fido-sram.ld, fido-sram-hosted.ld,
	fido-sdram.ld, fido-sdram-hosted.ld, fido-redboot.ld,
	install_fido): New.
	* m68k/asm.h (mbb): New.
	* m68k/configure.in (DO): Check for __mfido__.
	* m68k/configure: Regenerate.
	* m68k/fido-_exit.c, m68k/fido-crt0.S, m68k/fido-handler.c,
	m68k/fido-hosted.S, m68k/fido-sbrk.c, m68k/fido.h,
	m68k/fido.sc, m68k/fido_profiling.h: New.

	newlib/
	* configure.host: Recognize fido.
@
text
@a0 214
SRAM_ORIGIN=0x3000000
SRAM_LENGTH=0x100000

case $MODE in
    rom)
	CRT0=rom
	TEXT=rom
	DATA=sram
	DATALOAD="rom"
	STACK=0x30ffffc
	HEAPEND=0x03080000
	;;
    sram)
	CRT0=ram
	TEXT=sram
	DATA=sdram
	STACK=0x30ffffc
	HEAPEND=0x03080000
	;;
    sdram)
	CRT0=ram
	TEXT=sdram
	DATA=sdram
	STACK=0x30ffffc
	HEAPEND=0x03080000
	;;
    redboot)
	CRT0=redboot
	# We need to avoid the area used by RedBoot
	SRAM_ORIGIN=0x3080000
	SRAM_LENGTH=0x80000
	TEXT=sdram
	DATA=sdram
	STACK=0
	HEAPEND=0x027f0000
	;;
    *)
	ERROR
	;;
esac

cat <<EOF
/*
 * Setup the memory map of the Innovasic SBC 
 * stack grows down from high memory.
 *
 * The memory map for the ROM model looks like this:
 *
 * +--------------------+ <-address 0 in Flash
 * | .vector_table      |
 * +--------------------+ <- low memory
 * | .text              |
 * |        _etext      |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * +--------------------+
 * | DCACHE_CODE        | code to be loaded into DCACHE
 * |     _dcache_start  |
 * |     _dcache_end    |
 * +--------------------+
 * | .data              | initialized data goes here
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * +--------------------+ <- The beginning of the SRAM area
 * | .data              | a wriable copy of data goes here.
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * |        _heapend    |    End   of heap, used by sbrk()
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * |        __stack     | top of stack
 * +--------------------+
 *
 *
 * The memory map for the RAM model looks like this:
 *
 * +--------------------+ <- The beginning of the SRAM or SDRAM area.
 * | .vector_table      |
 * +--------------------+ <- low memory
 * | .text              |
 * |        _etext      |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * +--------------------+
 * | DCACHE_CODE        | code to be loaded into DCACHE
 * |     _dcache_start  |
 * |     _dcache_end    |
 * +--------------------+
 * | .data              | initialized data goes here
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * |        _heapend    |    End   of heap, used by sbrk()
 * +--------------------+
 * .                    .
 * .                    .
 * .                    .
 * |        __stack     | top of stack
 * +--------------------+
 */

STARTUP(fido-${CRT0}-crt0.o)
OUTPUT_ARCH(m68k)
ENTRY(_start);
GROUP(-l${IO} -lfido -lc -lgcc)

MEMORY {
  /* Flash ROM.  */
  rom (rx)      : ORIGIN = 0x0000000, LENGTH = 0x800000
  /* Internal SRAM.  */
  int_ram (rwx) : ORIGIN = 0x1000000, LENGTH = 0x6000
  /* External SDRAM.  */
  sdram (rwx)   : ORIGIN = 0x2000000, LENGTH = 0x800000
  /* External SRAM.  */
  sram (rwx)     : ORIGIN = ${SRAM_ORIGIN}, LENGTH = ${SRAM_LENGTH}
}

SECTIONS {
  /* The interrupt vector is placed at the beginning of ${TEXT},
     as required at reset.  */
  .vector_table : {
    *(.vector_table)
  } > ${TEXT}

  /* Text section.  */
  .text :
  {
    *(.text .gnu.linkonce.t.*)
    . = ALIGN(0x4);
     __CTOR_LIST__ = .;
    ___CTOR_LIST__ = .;
    LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
    *(.ctors)
    LONG(0)
    __CTOR_END__ = .;
    __DTOR_LIST__ = .;
    ___DTOR_LIST__ = .;
    LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
    *(.dtors)
     LONG(0)
    __DTOR_END__ = .;
    *(.rodata* .gnu.linkonce.r.*)
    *(.gcc_except_table) 
    *(.eh_frame)

    . = ALIGN(0x2);
    __INIT_SECTION__ = . ;
    LONG (0x4e560000)	/* linkw %fp,#0 */
    *(.init)
    SHORT (0x4e5e)	/* unlk %fp */
    SHORT (0x4e75)	/* rts */

    __FINI_SECTION__ = . ;
    LONG (0x4e560000)	/* linkw %fp,#0 */
    *(.fini)
    SHORT (0x4e5e)	/* unlk %fp */
    SHORT (0x4e75)	/* rts */
    . = ALIGN(0x800);   /* align to a 2K dcache boundary */
    _dcache_start = .;
    *(DCACHE_CODE)
    _dcache_end = .;
    _etext = .;
    *(.lit)
    . = ALIGN(0x4);
    __start_romdata = .;
  } > ${TEXT}

  /* Initialized data section.  */
  .data :
  {
    _data = .;
    KEEP (*(.jcr));
    *(.shdata);
    *(.data .gnu.linkonce.d.*);
    _edata_cksum = .;
    *(checksum);
    _edata = .;
  } > ${DATA} ${DATALOAD:+AT>} ${DATALOAD}

  /* Zero-initialized data.  */ 
  .bss :
  {
    . = ALIGN(0x4);
    __bss_start = . ;
    *(.shbss)
    *(.bss .gnu.linkonce.b.*)
    *(COMMON)
    _end =  ALIGN (0x8);
    __end = _end;
  } > ${DATA}

  /* Specially designated data is placed in the internal RAM.  */
  fast_memory :
  {
    . = ALIGN(0x4);
    __fast_start = .;
    *(FAST_RAM)
    __fast_stop = .;
  } > int_ram
}

PROVIDE (__stack = ${STACK});

PROVIDE (_heapend = ${HEAPEND});
EOF
@


1.1.2.2
log
@	* libgloss/m68k/fido-crt0.S (_start): Set %vbr for context 0 in
	RAM configs.
	* libgloss/m68k/fido.sc: Clean up formatting.  Add comments.  Move
	stack and heap end to SDRAM for SRAM and SDRAM configurations.
	Put RedBoot application text in SRAM.
@
text
@d1 2
a2 6
SRAM_ORIGIN=0x03000000
SRAM_LENGTH=0x00100000

# HEAPEND must be in the same memory region as DATA.  STACK should be
# above HEAPEND, also in the same region, for configurations which
# need __stack.
d10 1
a10 1
	STACK=0x030ffffc
d17 2
a18 3
	STACK=0x021ffffc
	HEAPEND=0x02180000
	# Leave the rest of SDRAM for manual use.
d24 2
a25 3
	STACK=0x021ffffc
	HEAPEND=0x02180000
	# Leave the rest of SDRAM for manual use.
d32 1
a32 3
	# Put code for RedBoot apps in SRAM, since the fido1100 has
	# trouble running code from SDRAM.
	TEXT=sram
@


