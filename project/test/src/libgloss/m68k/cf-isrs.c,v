head	1.3;
access;
symbols
	newlib-2_2_0:1.3.0.6
	newlib-2_1_0:1.3
	newlib-2_0_0:1.3
	newlib-1_20_0:1.3
	newlib-1_19_0:1.3
	newlib-1_18_0:1.3
	newlib-1_17_0-arc:1.3.0.4
	binutils-arc-20080908-branch:1.3.0.2
	binutils-arc-20080908-branchpoint:1.3
	newlib-1_17_0:1.3
	newlib-1_16_0:1.3
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.1.2.1
	newlib-csl-sourcerygxx-4_1-32:1.1.2.1
	newlib-csl-innovasic-fido-3_4_4-33:1.1.2.1
	newlib-csl-coldfire-4_1-30:1.1.2.1
	newlib-csl-sourcerygxx-4_1-30:1.1.2.1
	newlib-csl-coldfire-4_1-28:1.1.2.1
	newlib-csl-sourcerygxx-4_1-28:1.1.2.1
	newlib-csl-arm-2006q3-27:1.1.2.1
	newlib-csl-sourcerygxx-4_1-27:1.1.2.1
	newlib-csl-arm-2006q3-26:1.1.2.1
	newlib-csl-sourcerygxx-4_1-26:1.1.2.1
	newlib-csl-sourcerygxx-4_1-24:1.1.2.1
	newlib-csl-20060320-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2007.01.04.18.05.56;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.11.19.58.01;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.07.20.08.48;	author nathan;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.10.07.20.08.48;	author nathan;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.12.22.07.47.30;	author nathan;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
2007-01-04  Kazu Hirata  <kazu@@codesourcery.com>

        Merge from newlib-csl-20060320-branch:
        2006-12-22  Nathan Sidwell  <nathan@@codesourcery.com>

        libgloss/
        * m68k/Makefile.in (CF_ISRS): Remove now shared routines.
        * m68k/cf-crt0.S (__reset): Define here.
        * m68k/cf-isrs.c: Share some ISRS.  Add aliases for each IRQ slot.
        * m68k/cf-isv.S: Move to .interrupt_vector section.  Make each
        slot a unique routine.
        * m68k/cf.sc: Adjust for .interrupt_vector section.

        libgloss/
        * m68k/Makefile.in (m5273c3): Rename to ...
        (m5272c3): ... here to fix typo.
        (m5249c3): New.
        (CF_BOARDS): Add it.
@
text
@/*
 * cf-isv.c -- 
 *
 * Copyright (c) 2006 CodeSourcery Inc
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

/* This file contains default interrupt handlers code for the
   interrupt vector.  All but one of the interrupts are user
   replaceable.

   These interrupt handlers are entered whenever the associated
   interrupt occurs.  All they do is stop the debugger to give the user
   the opportunity to determine where the problem was.  */


/* Each ISR is a loop containing a halt instruction  */
#define ISR_DEFINE(NAME) 					\
void __attribute__((interrupt_handler)) NAME (void)		\
{								\
  while (1)							\
    __asm__ __volatile__ ("halt" ::: "memory");			\
}								\
struct eat_trailing_semicolon

#if defined (L_other_interrupt)
static ISR_DEFINE (__other_interrupt);
#define ALIAS __other_interrupt
#define PREFIX interrupt
#define ALIASES A(6) A(7) \
	A(15) A(16) A(17) A(18) A(19) A(20) A(21) A(22) A(23) \
     	A(25) A(26) A(27) A(28) A(29) A(30) A(31) \
	A(56) A(57) A(58) A(59) A(60) A(62) A(63) \
	A(64) A(65) A(66) A(67) A(68) A(69) A(70) A(71) \
	A(72) A(73) A(74) A(75) A(76) A(77) A(78) A(79) \
	A(80) A(81) A(82) A(83) A(84) A(85) A(86) A(87) \
	A(88) A(89) A(90) A(91) A(92) A(93) A(94) A(95) \
	A(96) A(97) A(98) A(99) A(100) A(101) A(102) A(103) \
	A(104) A(105) A(106) A(107) A(108) A(109) A(110) A(111) \
	A(112) A(113) A(114) A(115) A(116) A(117) A(118) A(119) \
	A(120) A(121) A(122) A(123) A(124) A(125) A(126) A(127) \
	A(128) A(129) A(130) A(131) A(132) A(133) A(134) A(135) \
	A(136) A(137) A(138) A(139) A(140) A(141) A(142) A(143) \
	A(144) A(145) A(146) A(147) A(148) A(149) A(150) A(151) \
	A(152) A(153) A(154) A(155) A(156) A(157) A(158) A(159) \
	A(160) A(161) A(162) A(163) A(164) A(165) A(166) A(167) \
	A(168) A(169) A(170) A(171) A(172) A(173) A(174) A(175) \
	A(176) A(177) A(178) A(179) A(180) A(181) A(182) A(183) \
	A(184) A(185) A(186) A(187) A(188) A(189) A(190) A(191) \
	A(192) A(193) A(194) A(195) A(196) A(197) A(198) A(199) \
	A(200) A(201) A(202) A(203) A(204) A(205) A(206) A(207) \
	A(208) A(209) A(210) A(211) A(212) A(213) A(214) A(215) \
	A(216) A(217) A(218) A(219) A(220) A(221) A(222) A(223) \
	A(224) A(225) A(226) A(227) A(228) A(229) A(230) A(231) \
	A(232) A(233) A(234) A(235) A(236) A(237) A(238) A(239) \
	A(240) A(241) A(242) A(243) A(244) A(245) A(246) A(247) \
	A(248) A(249) A(250) A(251) A(252) A(253) A(254) A(255)
#endif

#if defined (L_access_error)
ISR_DEFINE (__access_error);
#define DEFINED __access_error
#endif

#if defined (L_address_error)
ISR_DEFINE (__address_error);
#define DEFINED __address_error
#endif

#if defined (L_illegal_instruction)
ISR_DEFINE (__illegal_instruction);
#define DEFINED __illegal_instruction
#endif

#if defined (L_divide_by_zero)
ISR_DEFINE (__divide_by_zero);
#define DEFINED __divide_by_zero
#endif

#if defined (L_privilege_violation)
ISR_DEFINE (__privilege_violation);
#define DEFINED __privilege_violation
#endif

#if defined (L_trace)
ISR_DEFINE (__trace);
#define DEFINED __trace
#endif

#if defined (L_unimplemented_opcode)
static ISR_DEFINE (__unimplemented_opcode);
#define ALIAS __unimplemented_opcode
#define PREFIX unimplemented_
#define SUFFIX _opcode
#define ALIASES A(line_a) A(line_f)
#endif

#if defined (L_breakpoint_debug_interrupt)
static ISR_DEFINE (__breakpoint_debug_interrupt);
#define ALIAS __breakpoint_debug_interrupt
#define SUFFIX _breakpoint_debug_interrupt
#define ALIASES A(non_pc) A(pc)
#endif

#if defined (L_format_error)
ISR_DEFINE (__format_error);
#define DEFINED __format_error
#endif

#if defined (L_spurious_interrupt)
ISR_DEFINE (__spurious_interrupt);
#define DEFINED __spurious_interrupt
#endif

#if defined (L_trap_interrupt)
static ISR_DEFINE (__trap_interrupt);
#define ALIAS __trap_interrupt
#define PREFIX trap
#define ALIASES A(0) A(1) A(2) A(3) A(4) A(5) A(6) A(7) \
	A(8) A(9) A(10) A(11) A(12) A(13) A(14) A(15)
#endif

#if defined (L_fp_interrupt)
static ISR_DEFINE (__fp_interrupt);
#define ALIAS __fp_interrupt
#define PREFIX fp_
#define ALIASES A(branch_unordered) A(inexact_result) A(divide_by_zero) \
	A(underflow) A(operand_error) A(overflow) A(input_not_a_number)	\
	A(input_denormalized_number)
#endif

#if defined (L_unsupported_instruction)
ISR_DEFINE (__unsupported_instruction);
#define DEFINED __unsupported_instruction
#endif

#if defined(ALIAS)
#ifndef PREFIX
#define PREFIX
#endif
#ifndef SUFFIX
#define SUFFIX
#endif
#define STRING_(a) #a
#define STRING(a) STRING_(a)
#define PASTE4_(a,b,c,d) a##b##c##d
#define PASTE4(a,b,c,d) PASTE4_(a,b,c,d)
#define A(N) \
  void __attribute__((weak, alias(STRING(ALIAS)))) PASTE4(__,PREFIX,N,SUFFIX) (void);
ALIASES
#elif !defined(DEFINED)
#error "No interrupt routine requested"
#endif

@


1.2
log
@
2006-12-11 Kazu Hirata <kazu@@codesourcery.com>

	Merge from newlib-csl-20060320-branch:
	2006-12-01  Nathan Sidwell  <nathan@@codesourcery.com>
		    Kazu Hirata  <kazu@@codesourcery.com>

	* m68k/Makefile.in (CF_ISRS): Use addprefix.

	2006-11-01 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CFLAGS): Do not clear.  Add to all compilations.
	(ARFLAGS): Remove commented out definition.


	* m68k/configure.in (DO) Set to list of target cpu families.
	* m68k/configure: Rebuilt.
	* m68k/Makefile.in (DO): New.
	(UNHOSTED_BSP, UNHOSTED_OBJS, HOSTED_BSP, HOSTED_OBJS): Move
	later.
	(m5208evb, m5213evb, m52235evb, m5235evb, m5273c3, m5275evb,
	m5282evb, m5329evb, m5485evb): Move earlier.
	(all): Add all_$DO dependencies.
	(all_cf, all_m68k): New targets, depend on cf & m68k bsps as
	appropriate.
	(m%-ram.ld, m%-rom.ld, m%-ram-hosted.ld, m%-rom-hosted.ld): Add
	'm' prefix.
	(install): Add install_$DO dependencies.
	(install_cf, install_m68k): New targets.  Perform cf and m68k
	installs as appropriate.
	(install_io): New, install the io libraries.


	2006-10-23 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_CRT0): Rename to CF_CRT0S, separate hosted
	& unhosted versions.
	(CF_OBJS): Add cf-isv.o.
	(CF_SOURCES): Add cf-isv.S.
	(cf-hosted-crt0.o, cf-unhosted-crt0.o): New targets.
	* m68k/cf-isv.S: New, broken out of ...
	* m68k/cf-crt0.S: ... here.  Add HOSTED & UNHOSTED differences.
	* m68k/cf-crt1.c (__start1): Add heap_limit argument.
	(__heap_limit): Define.
	* m68k/cf-sbrk.c (__heap_limit): Declare.
	(sbrk): Adjust for __heap_limit.
	* m68k/cf.sc: Use different crt0's for hosted & unhosted.
	Install a separate isv.o file.
	* m68k/io.h (HOSTED_PUTCHAR): Replace with ...
	(HOSTED_INIT_SIM): ... this.


	2006-10-20 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_BOARDS): Add m5275evb.
	(m5275evb): New board.


	2006-10-20 Vladimir Prus <vladimir@@codesourcery.com>

	* m68k/cf.sc: Add linkonce sections and
	DWARF sections.


	2006-10-07 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in: Adjust Coldfire rules.
	(BDM_CRT0, BDM_BSP, BDM_OBJS, BDM_ISRS): Rename	to ...
	(CF_CRT0, CF_BSP, CF_OBJS, CF_ISRS): ... here.  Adjust.
	(BDM_OTHER_OBJS): Remove.
	(BDM_SYSOBJS): Rename to ...
	(UNHOSTED_OBJS): ... here.  Adjust.
	(UNHOSTED_BSP, HOSTED_OBJS, HOSTED_BSP): New.
	(CF_HOSTED_SCRIPTS): New.
	(CF_SCRIPTS, CF_SOURCES): Adjust.
	* m68k/cf.sc: Add IO library variable.
	* m68k/bdm-crt0.S, m68k/bdm-crt1.c, m68k/bdm-isrs.c,
	m68k/bdm-sbrk.c, m68k/bdm-semihost.S: Rename to ...
	* m68k/cf-crt0.S, m68k/cf-crt1.c, m68k/cf-isrs.c, m68k/cf-sbrk.c,
	m68k/cf-hosted.S: ... here.
	* m68k/cf-exit.c: New.
	* m68k/bdm-gdb.h, m68k/bdm-semihost.h: Merge into ...
	* m68k/io.h: ... here.  Add unhosted support.  Adjust conversion
	function names.
	* m68k/bdm-gdb.c: Rename to ...
	* m68k/io-gdb.c: ... here.  Adjust names of conversion functions.
	* m68k/bdm-close.c, m68k/bdm-exit.c, m68k/bdm-fstat.c,
	m68k/bdm-gettimeofday.c, m68k/bdm-isatty.c, m68k/bdm-lseek.c,
	m68k/bdm-open.c, m68k/bdm-read.c, m68k/bdm-rename.c,
	m68k/bdm-stat.c, m68k/bdm-system.c, m68k/bdm-time.c,
	m68k/bdm-unlink.c, m68k/bdm-write.c: Rename to ...
	* m68k/io-close.c, m68k/io-exit.c, m68k/io-fstat.c,
	m68k/io-gettimeofday.c, m68k/io-isatty.c, m68k/io-lseek.c,
	m68k/io-open.c, m68k/io-read.c, m68k/io-rename.c, m68k/io-stat.c,
	m68k/io-system.c, m68k/io-time.c, m68k/io-unlink.c,
	m68k/io-write.c: ... here.  Include io.h. Adjust for hosted &
	unhosted libraries.  Adjust names of gdb conversion functions.


	2006-09-29 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/bdm-semihost.S: Add more comments. Make instruction weirder.

	2006-09-22 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/bdm-crt1.c (hardware_init_hook): Use #defines for CACR bits.

	2006-09-18 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in: Don't force a frame pointer on the ISRs.
	* m68k/bdm-crt1.c (__start1): Don't set the VBR here.
	(hardeare_init_hook): Define weakly.  Set VBR here, enable caching
	if supported.


	* m68k/Makefile.in (bdm-semihost.o): Build from bdm-semihost.S.
	* m68k/bdm-semihost.c: Remove.
	* m68k/bdm-semihost.S: New.
	* m68k/bdm-crt0.S: Don't install semihosting trap handler.
	* m68k/bdm-close.c, bdm-exit.c, bdm-fstat.c, bdm-gettimeofday.c,
	bdm-isatty.c, bdm-lseek.c, bdm-open.c, bdm-read.c, bdm-rename.c,
	bdm-stat.c, bdm-system.c, bdm-unlink.c, bdm-write.c): Update.
	* m68k/bdm-isrs.c: Update comment.
	* m68k/bdm-semihost.h (BDM_TRAPNUM, BDM_FUNC_REG, BDM_ARG_REG,
	BDM_TRAP): Remove.
	(__bdm_semihost): Declare.


	2006-09-15 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (BDM_OTHER_OBJS): Remove sbrk.o.
	(BDM_SYSOBJS): Add bdm-sbrk.o.
	* m68k/bdm-sbrk.c: New.


	2006-09-06 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/Makefile.in (CF_SOURCES): New.
	(install): Install them.


	2006-09-01 Nathan Sidwell <nathan@@codesourcery.com>

	* m68k/cf.sc: Add .jcr section to .text.
@
text
@d36 31
a66 5
ISR_DEFINE (__other_interrupt);
#endif

#if defined (L_reset)
ISR_DEFINE (__reset);
d71 1
d76 1
d81 1
d86 1
d91 1
d96 1
d99 13
a111 14
#if defined (L_unimplemented_line_a_opcode)
ISR_DEFINE (__unimplemented_line_a_opcode);
#endif

#if defined (L_unimplemented_line_f_opcode)
ISR_DEFINE (__unimplemented_line_f_opcode);
#endif

#if defined (L_non_pc_breakpoint_debug_interrupt)
ISR_DEFINE (__non_pc_breakpoint_debug_interrupt);
#endif

#if defined (L_pc_breakpoint_debug_interrupt)
ISR_DEFINE (__pc_breakpoint_debug_interrupt);
d116 1
d121 1
d124 15
a138 2
#if defined (L_trap0)
ISR_DEFINE (__trap0);
d141 3
a143 38
#if defined (L_trap1)
ISR_DEFINE (__trap1);
#endif

#if defined (L_trap2)
ISR_DEFINE (__trap2);
#endif

#if defined (L_trap3)
ISR_DEFINE (__trap3);
#endif

#if defined (L_trap4)
ISR_DEFINE (__trap4);
#endif

#if defined (L_trap5)
ISR_DEFINE (__trap5);
#endif

#if defined (L_trap6)
ISR_DEFINE (__trap6);
#endif

#if defined (L_trap7)
ISR_DEFINE (__trap7);
#endif

#if defined (L_trap8)
ISR_DEFINE (__trap8);
#endif

#if defined (L_trap9)
ISR_DEFINE (__trap9);
#endif

#if defined (L_trap10)
ISR_DEFINE (__trap10);
d146 16
a161 2
#if defined (L_trap11)
ISR_DEFINE (__trap11);
a163 51
#if defined (L_trap12)
ISR_DEFINE (__trap12);
#endif

#if defined (L_trap13)
ISR_DEFINE (__trap13);
#endif

#if defined (L_trap14)
ISR_DEFINE (__trap14);
#endif

#if defined (L_trap15)
ISR_DEFINE (__trap15);
#endif

#if defined (L_fp_branch_unordered)
ISR_DEFINE (__fp_branch_unordered);
#endif

#if defined (L_fp_inexact_result)
ISR_DEFINE (__fp_inexact_result);
#endif

#if defined (L_fp_divide_by_zero)
ISR_DEFINE (__fp_divide_by_zero);
#endif

#if defined (L_fp_underflow)
ISR_DEFINE (__fp_underflow);
#endif

#if defined (L_fp_operand_error)
ISR_DEFINE (__fp_operand_error);
#endif

#if defined (L_fp_overflow)
ISR_DEFINE (__fp_overflow);
#endif

#if defined (L_fp_input_not_a_number)
ISR_DEFINE (__fp_input_not_a_number);
#endif

#if defined (L_fp_input_denormalized_number)
ISR_DEFINE (__fp_input_denormalized_number);
#endif

#if defined (L_unsupported_instruction)
ISR_DEFINE (__unsupported_instruction);
#endif
@


1.1
log
@file cf-isrs.c was initially added on branch newlib-csl-20060320-branch.
@
text
@d1 189
@


1.1.2.1
log
@	libgloss/
	* m68k/Makefile.in: Adjust Coldfire rules.
	(BDM_CRT0, BDM_BSP, BDM_OBJS, BDM_ISRS): Rename	to ...
	(CF_CRT0, CF_BSP, CF_OBJS, CF_ISRS): ... here.  Adjust.
	(BDM_OTHER_OBJS): Remove.
	(BDM_SYSOBJS): Rename to ...
	(UNHOSTED_OBJS): ... here.  Adjust.
	(UNHOSTED_BSP, HOSTED_OBJS, HOSTED_BSP): New.
	(CF_HOSTED_SCRIPTS): New.
	(CF_SCRIPTS, CF_SOURCES): Adjust.
	* m68k/cf.sc: Add IO library variable.
	* m68k/bdm-crt0.S, m68k/bdm-crt1.c, m68k/bdm-isrs.c,
	m68k/bdm-sbrk.c, m68k/bdm-semihost.S: Rename to ...
	* m68k/cf-crt0.S, m68k/cf-crt1.c, m68k/cf-isrs.c, m68k/cf-sbrk.c,
	m68k/cf-hosted.S: ... here.
	* m68k/cf-exit.c: New.
	* m68k/bdm-gdb.h, m68k/bdm-semihost.h: Merge into ...
	* m68k/io.h: ... here.  Add unhosted support.  Adjust conversion
	function names.
	* m68k/bdm-gdb.c: Rename to ...
	* m68k/io-gdb.c: ... here.  Adjust names of conversion functions.
	* m68k/bdm-close.c, m68k/bdm-exit.c, m68k/bdm-fstat.c,
	m68k/bdm-gettimeofday.c, m68k/bdm-isatty.c, m68k/bdm-lseek.c,
	m68k/bdm-open.c, m68k/bdm-read.c, m68k/bdm-rename.c,
	m68k/bdm-stat.c, m68k/bdm-system.c, m68k/bdm-time.c,
	m68k/bdm-unlink.c, m68k/bdm-write.c: Rename to ...
	* m68k/io-close.c, m68k/io-exit.c, m68k/io-fstat.c,
	m68k/io-gettimeofday.c, m68k/io-isatty.c, m68k/io-lseek.c,
	m68k/io-open.c, m68k/io-read.c, m68k/io-rename.c, m68k/io-stat.c,
	m68k/io-system.c, m68k/io-time.c, m68k/io-unlink.c,
	m68k/io-write.c: ... here.  Include io.h. Adjust for hosted &
	unhosted libraries.  Adjust names of gdb conversion functions.
@
text
@a0 189
/*
 * cf-isv.c -- 
 *
 * Copyright (c) 2006 CodeSourcery Inc
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

/* This file contains default interrupt handlers code for the
   interrupt vector.  All but one of the interrupts are user
   replaceable.

   These interrupt handlers are entered whenever the associated
   interrupt occurs.  All they do is stop the debugger to give the user
   the opportunity to determine where the problem was.  */


/* Each ISR is a loop containing a halt instruction  */
#define ISR_DEFINE(NAME) 					\
void __attribute__((interrupt_handler)) NAME (void)		\
{								\
  while (1)							\
    __asm__ __volatile__ ("halt" ::: "memory");			\
}								\
struct eat_trailing_semicolon

#if defined (L_other_interrupt)
ISR_DEFINE (__other_interrupt);
#endif

#if defined (L_reset)
ISR_DEFINE (__reset);
#endif

#if defined (L_access_error)
ISR_DEFINE (__access_error);
#endif

#if defined (L_address_error)
ISR_DEFINE (__address_error);
#endif

#if defined (L_illegal_instruction)
ISR_DEFINE (__illegal_instruction);
#endif

#if defined (L_divide_by_zero)
ISR_DEFINE (__divide_by_zero);
#endif

#if defined (L_privilege_violation)
ISR_DEFINE (__privilege_violation);
#endif

#if defined (L_trace)
ISR_DEFINE (__trace);
#endif

#if defined (L_unimplemented_line_a_opcode)
ISR_DEFINE (__unimplemented_line_a_opcode);
#endif

#if defined (L_unimplemented_line_f_opcode)
ISR_DEFINE (__unimplemented_line_f_opcode);
#endif

#if defined (L_non_pc_breakpoint_debug_interrupt)
ISR_DEFINE (__non_pc_breakpoint_debug_interrupt);
#endif

#if defined (L_pc_breakpoint_debug_interrupt)
ISR_DEFINE (__pc_breakpoint_debug_interrupt);
#endif

#if defined (L_format_error)
ISR_DEFINE (__format_error);
#endif

#if defined (L_spurious_interrupt)
ISR_DEFINE (__spurious_interrupt);
#endif

#if defined (L_trap0)
ISR_DEFINE (__trap0);
#endif

#if defined (L_trap1)
ISR_DEFINE (__trap1);
#endif

#if defined (L_trap2)
ISR_DEFINE (__trap2);
#endif

#if defined (L_trap3)
ISR_DEFINE (__trap3);
#endif

#if defined (L_trap4)
ISR_DEFINE (__trap4);
#endif

#if defined (L_trap5)
ISR_DEFINE (__trap5);
#endif

#if defined (L_trap6)
ISR_DEFINE (__trap6);
#endif

#if defined (L_trap7)
ISR_DEFINE (__trap7);
#endif

#if defined (L_trap8)
ISR_DEFINE (__trap8);
#endif

#if defined (L_trap9)
ISR_DEFINE (__trap9);
#endif

#if defined (L_trap10)
ISR_DEFINE (__trap10);
#endif

#if defined (L_trap11)
ISR_DEFINE (__trap11);
#endif

#if defined (L_trap12)
ISR_DEFINE (__trap12);
#endif

#if defined (L_trap13)
ISR_DEFINE (__trap13);
#endif

#if defined (L_trap14)
ISR_DEFINE (__trap14);
#endif

#if defined (L_trap15)
ISR_DEFINE (__trap15);
#endif

#if defined (L_fp_branch_unordered)
ISR_DEFINE (__fp_branch_unordered);
#endif

#if defined (L_fp_inexact_result)
ISR_DEFINE (__fp_inexact_result);
#endif

#if defined (L_fp_divide_by_zero)
ISR_DEFINE (__fp_divide_by_zero);
#endif

#if defined (L_fp_underflow)
ISR_DEFINE (__fp_underflow);
#endif

#if defined (L_fp_operand_error)
ISR_DEFINE (__fp_operand_error);
#endif

#if defined (L_fp_overflow)
ISR_DEFINE (__fp_overflow);
#endif

#if defined (L_fp_input_not_a_number)
ISR_DEFINE (__fp_input_not_a_number);
#endif

#if defined (L_fp_input_denormalized_number)
ISR_DEFINE (__fp_input_denormalized_number);
#endif

#if defined (L_unsupported_instruction)
ISR_DEFINE (__unsupported_instruction);
#endif
@


1.1.2.2
log
@	libgloss/
	* m68k/Makefile.in (CF_ISRS): Remove now shared routines.
	* m68k/cf-crt0.S (__reset): Define here.
	(__start): Adjust semihosting.
	* m68k/cf-hosted.S (__hosted): Adjust semihosting.
	* m68k/cf-isrs.c: Share some ISRS.  Add aliases for each IRQ slot.
	* m68k/cf-isv.S: Move to .interrupt_vector section.  Make each
	slot a unique routine.
	* m68k/cf.sc: Adjust for .interrupt_vector section.
@
text
@d36 5
a40 31
static ISR_DEFINE (__other_interrupt);
#define ALIAS __other_interrupt
#define PREFIX interrupt
#define ALIASES A(6) A(7) \
	A(15) A(16) A(17) A(18) A(19) A(20) A(21) A(22) A(23) \
     	A(25) A(26) A(27) A(28) A(29) A(30) A(31) \
	A(56) A(57) A(58) A(59) A(60) A(62) A(63) \
	A(64) A(65) A(66) A(67) A(68) A(69) A(70) A(71) \
	A(72) A(73) A(74) A(75) A(76) A(77) A(78) A(79) \
	A(80) A(81) A(82) A(83) A(84) A(85) A(86) A(87) \
	A(88) A(89) A(90) A(91) A(92) A(93) A(94) A(95) \
	A(96) A(97) A(98) A(99) A(100) A(101) A(102) A(103) \
	A(104) A(105) A(106) A(107) A(108) A(109) A(110) A(111) \
	A(112) A(113) A(114) A(115) A(116) A(117) A(118) A(119) \
	A(120) A(121) A(122) A(123) A(124) A(125) A(126) A(127) \
	A(128) A(129) A(130) A(131) A(132) A(133) A(134) A(135) \
	A(136) A(137) A(138) A(139) A(140) A(141) A(142) A(143) \
	A(144) A(145) A(146) A(147) A(148) A(149) A(150) A(151) \
	A(152) A(153) A(154) A(155) A(156) A(157) A(158) A(159) \
	A(160) A(161) A(162) A(163) A(164) A(165) A(166) A(167) \
	A(168) A(169) A(170) A(171) A(172) A(173) A(174) A(175) \
	A(176) A(177) A(178) A(179) A(180) A(181) A(182) A(183) \
	A(184) A(185) A(186) A(187) A(188) A(189) A(190) A(191) \
	A(192) A(193) A(194) A(195) A(196) A(197) A(198) A(199) \
	A(200) A(201) A(202) A(203) A(204) A(205) A(206) A(207) \
	A(208) A(209) A(210) A(211) A(212) A(213) A(214) A(215) \
	A(216) A(217) A(218) A(219) A(220) A(221) A(222) A(223) \
	A(224) A(225) A(226) A(227) A(228) A(229) A(230) A(231) \
	A(232) A(233) A(234) A(235) A(236) A(237) A(238) A(239) \
	A(240) A(241) A(242) A(243) A(244) A(245) A(246) A(247) \
	A(248) A(249) A(250) A(251) A(252) A(253) A(254) A(255)
a44 1
#define DEFINED __access_error
a48 1
#define DEFINED __address_error
a52 1
#define DEFINED __illegal_instruction
a56 1
#define DEFINED __divide_by_zero
a60 1
#define DEFINED __privilege_violation
a64 1
#define DEFINED __trace
d67 14
a80 13
#if defined (L_unimplemented_opcode)
static ISR_DEFINE (__unimplemented_opcode);
#define ALIAS __unimplemented_opcode
#define PREFIX unimplemented_
#define SUFFIX _opcode
#define ALIASES A(line_a) A(line_f)
#endif

#if defined (L_breakpoint_debug_interrupt)
static ISR_DEFINE (__breakpoint_debug_interrupt);
#define ALIAS __breakpoint_debug_interrupt
#define SUFFIX _breakpoint_debug_interrupt
#define ALIASES A(non_pc) A(pc)
a84 1
#define DEFINED __format_error
a88 1
#define DEFINED __spurious_interrupt
d91 42
a132 15
#if defined (L_trap_interrupt)
static ISR_DEFINE (__trap_interrupt);
#define ALIAS __trap_interrupt
#define PREFIX trap
#define ALIASES A(0) A(1) A(2) A(3) A(4) A(5) A(6) A(7) \
	A(8) A(9) A(10) A(11) A(12) A(13) A(14) A(15)
#endif

#if defined (L_fp_interrupt)
static ISR_DEFINE (__fp_interrupt);
#define ALIAS __fp_interrupt
#define PREFIX fp_
#define ALIASES A(branch_unordered) A(inexact_result) A(divide_by_zero) \
	A(underflow) A(operand_error) A(overflow) A(input_not_a_number)	\
	A(input_denormalized_number)
d135 46
a180 3
#if defined (L_unsupported_instruction)
ISR_DEFINE (__unsupported_instruction);
#define DEFINED __unsupported_instruction
d183 2
a184 16
#if defined(ALIAS)
#ifndef PREFIX
#define PREFIX
#endif
#ifndef SUFFIX
#define SUFFIX
#endif
#define STRING_(a) #a
#define STRING(a) STRING_(a)
#define PASTE4_(a,b,c,d) a##b##c##d
#define PASTE4(a,b,c,d) PASTE4_(a,b,c,d)
#define A(N) \
  void __attribute__((weak, alias(STRING(ALIAS)))) PASTE4(__,PREFIX,N,SUFFIX) (void);
ALIASES
#elif !defined(DEFINED)
#error "No interrupt routine requested"
d187 3
@


