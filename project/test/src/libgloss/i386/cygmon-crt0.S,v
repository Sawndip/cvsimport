head	1.2;
access;
symbols
	newlib-2_2_0:1.2.0.10
	newlib-2_1_0:1.2
	newlib-2_0_0:1.2
	newlib-1_20_0:1.2
	newlib-1_19_0:1.2
	newlib-1_18_0:1.2
	newlib-1_17_0-arc:1.2.0.8
	binutils-arc-20080908-branch:1.2.0.6
	binutils-arc-20080908-branchpoint:1.2
	newlib-1_17_0:1.2
	newlib-1_16_0:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.2
	newlib-csl-sourcerygxx-4_1-32:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.2
	newlib-csl-coldfire-4_1-30:1.2
	newlib-csl-sourcerygxx-4_1-30:1.2
	newlib-csl-coldfire-4_1-28:1.2
	newlib-csl-sourcerygxx-4_1-28:1.2
	newlib-csl-arm-2006q3-27:1.2
	newlib-csl-sourcerygxx-4_1-27:1.2
	newlib-csl-arm-2006q3-26:1.2
	newlib-csl-sourcerygxx-4_1-26:1.2
	newlib-csl-sourcerygxx-4_1-24:1.2
	newlib-csl-sourcerygxx-4_1-23:1.2
	newlib-csl-sourcerygxx-4_1-21:1.2
	newlib-csl-arm-2006q3-21:1.2
	newlib-csl-arm-2006q3-19:1.2
	newlib-csl-sourcerygxx-4_1-19:1.2
	newlib-csl-sourcerygxx-4_1-18:1.2
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	newlib-csl-sourcerygxx-4_1-17:1.2
	newlib-csl-sourcerygxx-4_1-14:1.2
	newlib-csl-sourcerygxx-4_1-13:1.2
	newlib-csl-sourcerygxx-4_1-12:1.2
	newlib-csl-sourcerygxx-4_1-9:1.2
	newlib-csl-sourcerygxx-4_1-8:1.2
	newlib-csl-sourcerygxx-4_1-7:1.2
	newlib-csl-arm-2006q1-6:1.2
	newlib-csl-sourcerygxx-4_1-6:1.2
	newlib-csl-sourcerygxx-4_1-5:1.2
	newlib-csl-sourcerygxx-4_1-4:1.2
	newlib-autotools-branch:1.2.0.4
	newlib-csl-20060320-branch:1.2.0.2
	newlib-csl-20060320-branchpoint:1.2
	newlib-1_14_0:1.2
	newlib-csl-arm-2005-q1b:1.2
	newlib-csl-arm-2005-q1a:1.2
	newlib-1_13_0:1.2
	csl-arm-2004-q3:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	newlib-1_12_0:1.2
	csl-arm-2003-q4:1.2
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.25.19.18.46;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2002-10-25  Bernd Schmidt  <bernds@@redhat.com>

        * i386/cygmon.ld: Add entry for .gcc_except_table.

2000-10-25  Mark Salter  <msalter@@redhat.com>

        * i386/cygmon-crt0.S: Use __USER_LABEL_PREFIX__ for symbols. Always
        use __start for start symbol.
        * i386/cygmon-salib.c: Don't build __do_global_[cd]tors for AOUT.
        Disable file I/O extensions to make Plum Hall happy.
        * i386/cygmon.ld: Set __start as entry point.
        * i386/Makefile.in: Support IS_AOUT.
        * i386/configure.in: Support IS_AOUT.
        * i386/configure: Regenerated.
        * i386/cygmon-salib.c:
        * i386/cygmon-gmon.c (_mcount): It's _etext.
@
text
@/*
 * crt0 startup code for user programs running under Cygmon
 *
 * Copyright (c) 1998, 2000 Cygnus Support
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#define _S2(P,X) P ## X
#define _S1(P,X) _S2(P,X)
#define SYM(X) _S1(__USER_LABEL_PREFIX__,X)

.data
        .align  8
SYM(environ):
        .long   0

SYM(argc):
	.long	0

	.text
	.align 4

	.globl __start
__start:
	/* see if the stack is already setup. if not, then default
         *  to using the value of %sp as set by the ROM monitor
         */
	movl	$__stack, %eax
	testl	%eax, %eax
	jz	1f
	movl	%eax, %esp
1:
	mov $0, %ebp

	movl	$__bss_start, %edi
	movl	$__bss_end, %ecx
	subl	%edi, %ecx
	xorl	%eax, %eax
	rep; stosb

	pushl	$SYM(__sigtramp)
	pushl	$0
	call	SYM(__install_signal_handler)
	popl	%eax

	pushl	$SYM(__do_global_dtors)
	call	SYM(atexit)
	popl	%eax

	call	SYM(__do_global_ctors)

	pushl	$SYM(argc)
	call	SYM(__get_program_arguments)
	popl	%ecx

	movl	SYM(argc), %ecx
	pushl	%eax
	pushl	%ecx
	call	SYM(main)
	popl	%ecx
	popl	%edx

	/* call exit from the C library so atexit gets called, and the
	 * C++ destructors get run. This calls our exit routine below	 
	 * when it's done.
	 */
	pushl	%eax
	call	SYM(exit)
3:
	jmp	3b
@


1.1
log
@20000317 sourceware import
@
text
@d4 1
a4 1
 * Copyright (c) 1998 Cygnus Support
d17 3
a19 5
#ifndef NEED_UNDERSCORE
#define SYM(X) X
#else
#define SYM(X) _ ## X
#endif
d32 2
a33 2
	.globl SYM(_start)
SYM(_start):
d37 4
a40 4
	lea __stack,%eax
	cmpl $0,%eax
	jz 1f
	mov %eax, %esp
d44 27
a70 28
	lea __bss_start, %eax
2:
	movb $0,(%eax)
	inc %eax
	cmp $__bss_end,%eax
	jl 2b
	
2:
	pushl $SYM(__sigtramp)
	pushl $0
	call SYM(__install_signal_handler)
	add $4, %esp

	pushl $SYM(__do_global_dtors)
	call SYM(atexit)
	add $4, %esp

	call SYM(__do_global_ctors)

	pushl $SYM(argc)
	call SYM(__get_program_arguments)
	add $4, %esp

	pushl %eax
	lea SYM(argc), %ebx
	pushl (%ebx)
	call SYM(main)
	add $8, %esp
d76 1
a76 1
	pushl %eax
d79 1
a79 1
	jmp 3b
@

