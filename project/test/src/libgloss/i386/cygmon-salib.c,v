head	1.4;
access;
symbols
	newlib-2_2_0:1.4.0.6
	newlib-2_1_0:1.4
	newlib-2_0_0:1.4
	newlib-1_20_0:1.4
	newlib-1_19_0:1.4
	newlib-1_18_0:1.4
	newlib-1_17_0-arc:1.4.0.4
	binutils-arc-20080908-branch:1.4.0.2
	binutils-arc-20080908-branchpoint:1.4
	newlib-1_17_0:1.4
	newlib-1_16_0:1.4
	newlib-1_15_0:1.3
	newlib-csl-coldfire-4_1-32:1.3
	newlib-csl-sourcerygxx-4_1-32:1.3
	newlib-csl-innovasic-fido-3_4_4-33:1.3
	newlib-csl-coldfire-4_1-30:1.3
	newlib-csl-sourcerygxx-4_1-30:1.3
	newlib-csl-coldfire-4_1-28:1.3
	newlib-csl-sourcerygxx-4_1-28:1.3
	newlib-csl-arm-2006q3-27:1.3
	newlib-csl-sourcerygxx-4_1-27:1.3
	newlib-csl-arm-2006q3-26:1.3
	newlib-csl-sourcerygxx-4_1-26:1.3
	newlib-csl-sourcerygxx-4_1-24:1.3
	newlib-csl-sourcerygxx-4_1-23:1.3
	newlib-csl-sourcerygxx-4_1-21:1.3
	newlib-csl-arm-2006q3-21:1.3
	newlib-csl-arm-2006q3-19:1.3
	newlib-csl-sourcerygxx-4_1-19:1.3
	newlib-csl-sourcerygxx-4_1-18:1.3
	newlib-csl-sourcerygxx-3_4_4-25:1.3
	newlib-csl-sourcerygxx-4_1-17:1.3
	newlib-csl-sourcerygxx-4_1-14:1.3
	newlib-csl-sourcerygxx-4_1-13:1.3
	newlib-csl-sourcerygxx-4_1-12:1.3
	newlib-csl-sourcerygxx-4_1-9:1.3
	newlib-csl-sourcerygxx-4_1-8:1.3
	newlib-csl-sourcerygxx-4_1-7:1.3
	newlib-csl-arm-2006q1-6:1.3
	newlib-csl-sourcerygxx-4_1-6:1.3
	newlib-csl-sourcerygxx-4_1-5:1.3
	newlib-csl-sourcerygxx-4_1-4:1.3
	newlib-autotools-branch:1.3.0.4
	newlib-csl-20060320-branch:1.3.0.2
	newlib-csl-20060320-branchpoint:1.3
	newlib-1_14_0:1.3
	newlib-csl-arm-2005-q1b:1.3
	newlib-csl-arm-2005-q1a:1.3
	newlib-1_13_0:1.3
	csl-arm-2004-q3:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	newlib-1_12_0:1.3
	csl-arm-2003-q4:1.3
	newlib-1_11_0:1.2
	cygnus_cvs_20020108_pre:1.1
	newlib-1_10_0:1.1
	newlib-1_9_0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.07.06.17.00.13;	author jjohnstn;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.12.18.06.01;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.25.19.18.46;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.17.22.48.50;	author ranjith;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
2007-07-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * arm/syscalls.c (gettimeofday): Change to POSIX signature
        where second argument is passed as void *.
        * bfin/syscalls.c (gettimeofday): Ditto.
        * cris/gensyscalls (gettimeofday): Ditto.
        * cris/linunistd.h (gettimeofday): Ditto.
        * crx/time.c (gettimeofday): Ditto.
        * frv/sim-time.c (gettimeofday): Ditto.
        * i386/cygmon-salib.c (gettimeofday): Ditto.
        * libnosys/gettod.c (gettimeofday): Ditto.
        * m68k/io-gettimeofday.c (gettimeofday): Ditto.
        * sparc/cygmon-salib.c (gettimeofday): Ditto.
        * spu/gettimeofday.c (gettimeofday): Ditto.
@
text
@/*
 * Standard x86 syscalls for user programs running under Cygmon
 *
 * Copyright (c) 1998, 2000 Cygnus Support
 *
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors
 * and need not follow the licensing terms described here, provided that
 * the new terms are clearly indicated on the first page of each file where
 * they apply.
 */

#include <fcntl.h>
#include <stdlib.h>
#include "cygmon-syscall.h"
#include <sys/time.h>

extern int errno;

_syscall3(int,write,int,i,char *,c,int,len);
#if 0
_syscall3(int,read,int,i,char *,c,int,len);
#else
int
read (int des, char *dest, int len)
{
  return -1;
}
#endif

_syscall2(int,kill,int,pid,int,signal);

_syscall2(void,__install_signal_handler,int,arg,void *,handler);
_syscall1(char **,__get_program_arguments,int *,argc);

_syscall1(void,__sys_exit,int,exitcode);
_syscall1(void,putTtyChar,int,character);
_syscall1(time_t,time,time_t *,ptr);
_syscall2(int, gettimeofday, struct timeval *,time, void *,z);
_syscall3(int, __open, const char *, filename, int, mode, int, filemode);
_syscall4(void, profil, unsigned short *, buff, unsigned int, bufsiz,
	  unsigned int, offset, unsigned int, scale);
_syscall1(int, close, int, fd);

/* Bleah. */
int
open (const char *filename, int mode, ...)
{
#if 0
  return __open (filename, mode, 0644); 
#else
  return -1;
#endif
}

/* Ultra-super cheezy. */
int
isatty (int i)
{
  return i<3;
}

int unlink (const char *p)
{
  return -1;
}


char *
sbrk (int amt)
{
  extern char _end;
  static char *ptr = 0;
  char *res;
  if (ptr == 0)
    ptr = &_end;
  if (amt == 0)
    return (char *)ptr;

  if (((long)ptr) % 8)
    ptr = ptr + (8 - (((long)(ptr)) % 8));
  res = ptr;
  ptr += amt;
  return (char *)res;
}

void
_exit(int i)
{
  while(1) {
    __sys_exit (i);
    asm("	int $3");
  }
}

int
fstat(int des, struct stat *buf)
{
  return -1;
}

int
lseek(int des,unsigned long offset, int whence)
{
  return -1;
}

int
getpid ()
{
  return -1;
}

/* Simple replacement for the clock() syscall. */
clock_t
clock ()
{
  struct timeval t;

  gettimeofday (&t, 0);
  return t.tv_sec * 1000 + (t.tv_usec / 1000);
}

#if ! defined(COFF) && ! defined(AOUT)
typedef void (*ctp)();
void
__do_global_ctors ()
{
  extern int __CTOR_LIST__;
  int *c = &__CTOR_LIST__;
  c++;
  while (*c)
    {
      ctp d = (ctp)*c;
      (d)();
      c++;
    }
}

void
__do_global_dtors ()
{
  extern int __DTOR_LIST__;
  int *c = &__DTOR_LIST__;
  int *cp = c;
  c++;
  while (*c)
    {
      c++;
    }
  c--;
  while (c > cp)
    {
      ctp d = (ctp)*c;
      (*d)();
      c--;
    }
}
#endif

void
profil_write (int type, char *buffer, int len)
{
  static int des = -1;

  if (des < 0)
    {
      des = open ("gmon.out", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    }
  if (len == 0)
    {
      close (des);
    }
  else
    {
      write (des, buffer, len);
    }
}
@


1.3
log
@
2003-08-12  Jeff Johnston  <jjohnstn@@redhat.com>

        * i386/cygmon-salib.c (unlink): New stub.
@
text
@d43 1
a43 1
_syscall2(int, gettimeofday, struct timeval *,time, struct timezone *,z);
@


1.2
log
@
2002-10-25  Bernd Schmidt  <bernds@@redhat.com>

        * i386/cygmon.ld: Add entry for .gcc_except_table.

2000-10-25  Mark Salter  <msalter@@redhat.com>

        * i386/cygmon-crt0.S: Use __USER_LABEL_PREFIX__ for symbols. Always
        use __start for start symbol.
        * i386/cygmon-salib.c: Don't build __do_global_[cd]tors for AOUT.
        Disable file I/O extensions to make Plum Hall happy.
        * i386/cygmon.ld: Set __start as entry point.
        * i386/Makefile.in: Support IS_AOUT.
        * i386/configure.in: Support IS_AOUT.
        * i386/configure: Regenerated.
        * i386/cygmon-salib.c:
        * i386/cygmon-gmon.c (_mcount): It's _etext.
@
text
@d67 6
@


1.1
log
@20000317 sourceware import
@
text
@d4 1
a4 1
 * Copyright (c) 1998 Cygnus Support
d25 1
a25 1

d27 7
d53 1
d55 3
d122 1
a122 1
#ifndef COFF
@

