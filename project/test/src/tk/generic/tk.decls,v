head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TK_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.42;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.12;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.24;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.50;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.00.22.30;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.10.00.22.30;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.20.38.26;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# tk.decls --
#
#	This file contains the declarations for all supported public
#	functions that are exported by the Tk library via the stubs table.
#	This file is used to generate the tkDecls.h, tkPlatDecls.h,
#	tkStub.c, and tkPlatStub.c files.
#	
#
# Copyright (c) 1998-2000 Ajuba Solutions.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: @@(#) $Id: tk.decls,v 1.24 2002/08/31 06:12:19 das Exp $

library tk

# Define the tk interface with 3 sub interfaces:
#     tkPlat	 - platform specific public
#     tkInt	 - generic private
#     tkPlatInt - platform specific private

interface tk
hooks {tkPlat tkInt tkIntPlat tkIntXlib}

# Declare each of the functions in the public Tk interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.

declare 0 generic {
    void Tk_MainLoop (void)
}

declare 1 generic {
    XColor *Tk_3DBorderColor (Tk_3DBorder border)
}

declare 2 generic {
    GC Tk_3DBorderGC (Tk_Window tkwin, Tk_3DBorder border,
	    int which)
}

declare 3 generic {
    void Tk_3DHorizontalBevel (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int leftIn,
	    int rightIn, int topBevel, int relief)
}

declare 4 generic {
    void Tk_3DVerticalBevel (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int leftBevel,
	    int relief)
}

declare 5 generic {
    void Tk_AddOption (Tk_Window tkwin, CONST char *name,
	    CONST char *value, int priority)
}

declare 6 generic {
    void Tk_BindEvent (Tk_BindingTable bindingTable,
	    XEvent *eventPtr, Tk_Window tkwin, int numObjects,
	    ClientData *objectPtr)
}

declare 7 generic {
    void Tk_CanvasDrawableCoords (Tk_Canvas canvas,
	    double x, double y, short *drawableXPtr,
	    short *drawableYPtr)
}

declare 8 generic {
    void Tk_CanvasEventuallyRedraw (Tk_Canvas canvas, int x1, int y1,
	    int x2, int y2)
}

declare 9 generic {
    int Tk_CanvasGetCoord (Tcl_Interp *interp,
	    Tk_Canvas canvas, CONST char *str, double *doublePtr)
}

declare 10 generic {
    Tk_CanvasTextInfo *Tk_CanvasGetTextInfo (Tk_Canvas canvas)
}

declare 11 generic {
    int Tk_CanvasPsBitmap (Tcl_Interp *interp,
	    Tk_Canvas canvas, Pixmap bitmap, int x, int y,
	    int width, int height)
}

declare 12 generic {
    int Tk_CanvasPsColor (Tcl_Interp *interp,
	    Tk_Canvas canvas, XColor *colorPtr)
}

declare 13 generic {
    int Tk_CanvasPsFont (Tcl_Interp *interp,
	    Tk_Canvas canvas, Tk_Font font)
}

declare 14 generic {
    void Tk_CanvasPsPath (Tcl_Interp *interp,
	    Tk_Canvas canvas, double *coordPtr, int numPoints)
}

declare 15 generic {
    int Tk_CanvasPsStipple (Tcl_Interp *interp,
	    Tk_Canvas canvas, Pixmap bitmap)
}

declare 16 generic {
    double Tk_CanvasPsY (Tk_Canvas canvas, double y)
}

declare 17 generic {
    void Tk_CanvasSetStippleOrigin (Tk_Canvas canvas, GC gc)
}

declare 18 generic {
    int Tk_CanvasTagsParseProc (ClientData clientData, Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *value, char *widgRec, int offset)
}

declare 19 generic {
    char * Tk_CanvasTagsPrintProc (ClientData clientData, Tk_Window tkwin,
	    char *widgRec, int offset, Tcl_FreeProc **freeProcPtr)
}

declare 20 generic {
    Tk_Window	Tk_CanvasTkwin (Tk_Canvas canvas)
}

declare 21 generic {
    void Tk_CanvasWindowCoords (Tk_Canvas canvas, double x, double y,
	    short *screenXPtr, short *screenYPtr)
}

declare 22 generic {
    void Tk_ChangeWindowAttributes (Tk_Window tkwin, unsigned long valueMask,
	    XSetWindowAttributes *attsPtr)
}

declare 23 generic {
    int Tk_CharBbox (Tk_TextLayout layout, int index, int *xPtr,
	    int *yPtr, int *widthPtr, int *heightPtr)
}

declare 24 generic {
    void Tk_ClearSelection (Tk_Window tkwin, Atom selection)
}

declare 25 generic {
    int Tk_ClipboardAppend (Tcl_Interp *interp,Tk_Window tkwin,
	    Atom target, Atom format, char* buffer)
}

declare 26 generic {
    int Tk_ClipboardClear (Tcl_Interp *interp, Tk_Window tkwin)
}

declare 27 generic {
    int Tk_ConfigureInfo (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    char *widgRec, CONST char *argvName, int flags)
}

declare 28 generic {
    int Tk_ConfigureValue (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    char *widgRec, CONST char *argvName, int flags)
}

declare 29 generic {
    int Tk_ConfigureWidget (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    int argc, CONST84 char **argv, char *widgRec,
	    int flags)
}

declare 30 generic {
    void Tk_ConfigureWindow (Tk_Window tkwin,
	    unsigned int valueMask, XWindowChanges *valuePtr)
}

declare 31 generic {
    Tk_TextLayout Tk_ComputeTextLayout (Tk_Font font,
	    CONST char *str, int numChars, int wrapLength,
	    Tk_Justify justify, int flags, int *widthPtr,
	    int *heightPtr)
}

declare 32 generic {
    Tk_Window Tk_CoordsToWindow (int rootX, int rootY, Tk_Window tkwin)
}

declare 33 generic {
    unsigned long Tk_CreateBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr, CONST char *command, int append)
}

declare 34 generic {
    Tk_BindingTable Tk_CreateBindingTable (Tcl_Interp *interp)
}

declare 35 generic {
    Tk_ErrorHandler Tk_CreateErrorHandler (Display *display,
	    int errNum, int request, int minorCode,
	    Tk_ErrorProc *errorProc, ClientData clientData)
}

declare 36 generic {
    void Tk_CreateEventHandler (Tk_Window token,
	    unsigned long mask, Tk_EventProc *proc,
	    ClientData clientData)
}

declare 37 generic {
    void Tk_CreateGenericHandler (Tk_GenericProc *proc, ClientData clientData)
}

declare 38 generic {
    void Tk_CreateImageType (Tk_ImageType *typePtr)
}

declare 39 generic {
    void Tk_CreateItemType (Tk_ItemType *typePtr)
}

declare 40 generic {
    void Tk_CreatePhotoImageFormat (Tk_PhotoImageFormat *formatPtr)
}

declare 41 generic {
    void Tk_CreateSelHandler (Tk_Window tkwin,
	    Atom selection, Atom target,
	    Tk_SelectionProc *proc, ClientData clientData,
	    Atom format)
}

declare 42 generic {
    Tk_Window Tk_CreateWindow (Tcl_Interp *interp,
	    Tk_Window parent, CONST char *name, CONST char *screenName)
}

declare 43 generic {
    Tk_Window Tk_CreateWindowFromPath (Tcl_Interp *interp, Tk_Window tkwin,
	    CONST char *pathName, CONST char *screenName)
}

declare 44 generic {
    int Tk_DefineBitmap (Tcl_Interp *interp, CONST char *name,
	    CONST char *source, int width, int height)
}

declare 45 generic {
    void Tk_DefineCursor (Tk_Window window, Tk_Cursor cursor)
}

declare 46 generic {
    void Tk_DeleteAllBindings (Tk_BindingTable bindingTable, ClientData object)
}

declare 47 generic {
    int Tk_DeleteBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr)
}

declare 48 generic {
    void Tk_DeleteBindingTable (Tk_BindingTable bindingTable)
}

declare 49 generic {
    void Tk_DeleteErrorHandler (Tk_ErrorHandler handler)
}

declare 50 generic {
    void Tk_DeleteEventHandler (Tk_Window token,
	    unsigned long mask, Tk_EventProc *proc,
	    ClientData clientData)
}

declare 51 generic {
    void Tk_DeleteGenericHandler (Tk_GenericProc *proc, ClientData clientData)
}

declare 52 generic {
    void Tk_DeleteImage (Tcl_Interp *interp, CONST char *name)
}

declare 53 generic {
    void Tk_DeleteSelHandler (Tk_Window tkwin, Atom selection, Atom target)
}

declare 54 generic {
    void Tk_DestroyWindow (Tk_Window tkwin)
}

declare 55 generic {
    CONST84_RETURN char * Tk_DisplayName (Tk_Window tkwin)
}

declare 56 generic {
    int Tk_DistanceToTextLayout (Tk_TextLayout layout, int x, int y)
}

declare 57 generic {
    void Tk_Draw3DPolygon (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border,
	    XPoint *pointPtr, int numPoints, int borderWidth,
	    int leftRelief)
}

declare 58 generic {
    void Tk_Draw3DRectangle (Tk_Window tkwin, Drawable drawable,
	    Tk_3DBorder border, int x, int y, int width, int height,
	    int borderWidth, int relief)
}

declare 59 generic {
    void Tk_DrawChars (Display *display, Drawable drawable, GC gc,
	    Tk_Font tkfont, CONST char *source, int numBytes, int x, int y)
}

declare 60 generic {
    void Tk_DrawFocusHighlight (Tk_Window tkwin, GC gc, int width,
	    Drawable drawable)
}

declare 61 generic {
    void Tk_DrawTextLayout (Display *display,
	    Drawable drawable, GC gc, Tk_TextLayout layout,
	    int x, int y, int firstChar, int lastChar)
}

declare 62 generic {
    void Tk_Fill3DPolygon (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border,
	    XPoint *pointPtr, int numPoints, int borderWidth,
	    int leftRelief)
}

declare 63 generic {
    void Tk_Fill3DRectangle (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int borderWidth,
	    int relief)
}

declare 64 generic {
    Tk_PhotoHandle Tk_FindPhoto (Tcl_Interp *interp, CONST char *imageName)
}

declare 65 generic {
    Font Tk_FontId (Tk_Font font)
}

declare 66 generic {
    void Tk_Free3DBorder (Tk_3DBorder border)
}

declare 67 generic {
    void Tk_FreeBitmap (Display *display, Pixmap bitmap)
}

declare 68 generic {
    void Tk_FreeColor (XColor *colorPtr)
}

declare 69 generic {
    void Tk_FreeColormap (Display *display, Colormap colormap)
}

declare 70 generic {
    void Tk_FreeCursor (Display *display, Tk_Cursor cursor)
}

declare 71 generic {
    void Tk_FreeFont (Tk_Font f)
}

declare 72 generic {
    void Tk_FreeGC (Display *display, GC gc)
}

declare 73 generic {
    void Tk_FreeImage (Tk_Image image)
}

declare 74 generic {
    void Tk_FreeOptions (Tk_ConfigSpec *specs,
	    char *widgRec, Display *display, int needFlags)
}

declare 75 generic {
    void Tk_FreePixmap (Display *display, Pixmap pixmap)
}

declare 76 generic {
    void Tk_FreeTextLayout (Tk_TextLayout textLayout)
}

declare 77 generic {
    void Tk_FreeXId (Display *display, XID xid)
}

declare 78 generic {
    GC Tk_GCForColor (XColor *colorPtr, Drawable drawable)
}

declare 79 generic {
    void Tk_GeometryRequest (Tk_Window tkwin, int reqWidth,  int reqHeight)
}

declare 80 generic {
    Tk_3DBorder	Tk_Get3DBorder (Tcl_Interp *interp, Tk_Window tkwin,
	    Tk_Uid colorName)
}

declare 81 generic {
    void Tk_GetAllBindings (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object)
}

declare 82 generic {
    int Tk_GetAnchor (Tcl_Interp *interp,
	    CONST char *str, Tk_Anchor *anchorPtr)
}

declare 83 generic {
    CONST84_RETURN char * Tk_GetAtomName (Tk_Window tkwin, Atom atom)
}

declare 84 generic {
    CONST84_RETURN char * Tk_GetBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr)
}

declare 85 generic {
    Pixmap Tk_GetBitmap (Tcl_Interp *interp, Tk_Window tkwin, CONST char * str)
}

declare 86 generic {
    Pixmap Tk_GetBitmapFromData (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *source, int width, int height)
}

declare 87 generic {
    int Tk_GetCapStyle (Tcl_Interp *interp, CONST char *str, int *capPtr)
}

declare 88 generic {
    XColor * Tk_GetColor (Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid name)
}

declare 89 generic {
    XColor * Tk_GetColorByValue (Tk_Window tkwin, XColor *colorPtr)
}

declare 90 generic {
    Colormap Tk_GetColormap (Tcl_Interp *interp, Tk_Window tkwin,
	    CONST char *str)
}

declare 91 generic {
    Tk_Cursor Tk_GetCursor (Tcl_Interp *interp, Tk_Window tkwin,
	    Tk_Uid str)
}

declare 92 generic {
    Tk_Cursor Tk_GetCursorFromData (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *source, CONST char *mask,
	    int width, int height, int xHot, int yHot,
	    Tk_Uid fg, Tk_Uid bg)
}

declare 93 generic {
    Tk_Font Tk_GetFont (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str)
}

declare 94 generic {
    Tk_Font Tk_GetFontFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 95 generic {
    void Tk_GetFontMetrics (Tk_Font font, Tk_FontMetrics *fmPtr)
}

declare 96 generic {
    GC Tk_GetGC (Tk_Window tkwin, unsigned long valueMask, XGCValues *valuePtr)
}

declare 97 generic {
    Tk_Image Tk_GetImage (Tcl_Interp *interp, Tk_Window tkwin, CONST char *name,
	    Tk_ImageChangedProc *changeProc, ClientData clientData)
}

declare 98 generic {
    ClientData Tk_GetImageMasterData (Tcl_Interp *interp,
	    CONST char *name, Tk_ImageType **typePtrPtr)
}

declare 99 generic {
    Tk_ItemType * Tk_GetItemTypes (void)
}

declare 100 generic {
    int Tk_GetJoinStyle (Tcl_Interp *interp, CONST char *str, int *joinPtr)
}

declare 101 generic {
    int Tk_GetJustify (Tcl_Interp *interp,
	    CONST char *str, Tk_Justify *justifyPtr)
}

declare 102 generic {
    int Tk_GetNumMainWindows (void)
}

declare 103 generic {
    Tk_Uid Tk_GetOption (Tk_Window tkwin, CONST char *name, 
	    CONST char *className)
}

declare 104 generic {
    int Tk_GetPixels (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, int *intPtr)
}

declare 105 generic {
    Pixmap Tk_GetPixmap (Display *display, Drawable d,
	    int width, int height, int depth)
}

declare 106 generic {
    int Tk_GetRelief (Tcl_Interp *interp, CONST char *name, int *reliefPtr)
}

declare 107 generic {
    void Tk_GetRootCoords (Tk_Window tkwin, int *xPtr, int *yPtr)
}

declare 108 generic {
    int Tk_GetScrollInfo (Tcl_Interp *interp,
	    int argc, CONST84 char **argv, double *dblPtr, int *intPtr)
}

declare 109 generic {
    int Tk_GetScreenMM (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, double *doublePtr)
}

declare 110 generic {
    int Tk_GetSelection (Tcl_Interp *interp,
	    Tk_Window tkwin, Atom selection, Atom target,
	    Tk_GetSelProc *proc, ClientData clientData)
}

declare 111 generic {
    Tk_Uid Tk_GetUid (CONST char *str)
}

declare 112 generic {
    Visual * Tk_GetVisual (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, int *depthPtr,
	    Colormap *colormapPtr)
}

declare 113 generic {
    void Tk_GetVRootGeometry (Tk_Window tkwin,
	    int *xPtr, int *yPtr, int *widthPtr, int *heightPtr)
}

declare 114 generic {
    int Tk_Grab (Tcl_Interp *interp, Tk_Window tkwin, int grabGlobal)
}

declare 115 generic {
    void Tk_HandleEvent (XEvent *eventPtr)
}

declare 116 generic {
    Tk_Window Tk_IdToWindow (Display *display, Window window)
}

declare 117 generic {
    void Tk_ImageChanged (Tk_ImageMaster master, int x, int y,
	    int width, int height, int imageWidth, int imageHeight)
}

declare 118 generic {
    int Tk_Init (Tcl_Interp *interp)
}

declare 119 generic {
    Atom Tk_InternAtom (Tk_Window tkwin, CONST char *name)
}

declare 120 generic {
    int Tk_IntersectTextLayout (Tk_TextLayout layout, int x, int y,
	    int width, int height)
}

declare 121 generic {
    void Tk_MaintainGeometry (Tk_Window slave,
	    Tk_Window master, int x, int y, int width, int height)
}

declare 122 generic {
    Tk_Window Tk_MainWindow (Tcl_Interp *interp)
}

declare 123 generic {
    void Tk_MakeWindowExist (Tk_Window tkwin)
}

declare 124 generic {
    void Tk_ManageGeometry (Tk_Window tkwin,
	    Tk_GeomMgr *mgrPtr, ClientData clientData)
}

declare 125 generic {
    void Tk_MapWindow (Tk_Window tkwin)
}

declare 126 generic {
    int Tk_MeasureChars (Tk_Font tkfont,
	    CONST char *source, int numBytes, int maxPixels,
	    int flags, int *lengthPtr)
}

declare 127 generic {
    void Tk_MoveResizeWindow (Tk_Window tkwin,
	    int x, int y, int width, int height)
}

declare 128 generic {
    void Tk_MoveWindow (Tk_Window tkwin, int x, int y)
}

declare 129 generic {
    void Tk_MoveToplevelWindow (Tk_Window tkwin, int x, int y)
}

declare 130 generic {
    CONST84_RETURN char * Tk_NameOf3DBorder (Tk_3DBorder border)
}

declare 131 generic {
    CONST84_RETURN char * Tk_NameOfAnchor (Tk_Anchor anchor)
}

declare 132 generic {
    CONST84_RETURN char * Tk_NameOfBitmap (Display *display, Pixmap bitmap)
}

declare 133 generic {
    CONST84_RETURN char * Tk_NameOfCapStyle (int cap)
}

declare 134 generic {
    CONST84_RETURN char * Tk_NameOfColor (XColor *colorPtr)
}

declare 135 generic {
    CONST84_RETURN char * Tk_NameOfCursor (Display *display, Tk_Cursor cursor)
}

declare 136 generic {
    CONST84_RETURN char * Tk_NameOfFont (Tk_Font font)
}

declare 137 generic {
    CONST84_RETURN char * Tk_NameOfImage (Tk_ImageMaster imageMaster)
}

declare 138 generic {
    CONST84_RETURN char * Tk_NameOfJoinStyle (int join)
}

declare 139 generic {
    CONST84_RETURN char * Tk_NameOfJustify (Tk_Justify justify)
}

declare 140 generic {
    CONST84_RETURN char * Tk_NameOfRelief (int relief)
}

declare 141 generic {
    Tk_Window Tk_NameToWindow (Tcl_Interp *interp,
	    CONST char *pathName, Tk_Window tkwin)
}

declare 142 generic {
    void Tk_OwnSelection (Tk_Window tkwin,
	    Atom selection, Tk_LostSelProc *proc,
	    ClientData clientData)
}

declare 143 generic {
    int Tk_ParseArgv (Tcl_Interp *interp,
	    Tk_Window tkwin, int *argcPtr, CONST84 char **argv,
	    Tk_ArgvInfo *argTable, int flags)
}

declare 144 generic {
    void Tk_PhotoPutBlock_NoComposite (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height)
}

declare 145 generic {
    void Tk_PhotoPutZoomedBlock_NoComposite (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int zoomX, int zoomY,
	    int subsampleX, int subsampleY)
}

declare 146 generic {
    int Tk_PhotoGetImage (Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr)
}

declare 147 generic {
    void Tk_PhotoBlank (Tk_PhotoHandle handle)
}

declare 148 generic {
    void Tk_PhotoExpand (Tk_PhotoHandle handle, int width, int height )
}

declare 149 generic {
    void Tk_PhotoGetSize (Tk_PhotoHandle handle, int *widthPtr, int *heightPtr)
}

declare 150 generic {
    void Tk_PhotoSetSize (Tk_PhotoHandle handle, int width, int height)
}

declare 151 generic {
    int Tk_PointToChar (Tk_TextLayout layout, int x, int y)
}

declare 152 generic {
    int Tk_PostscriptFontName (Tk_Font tkfont, Tcl_DString *dsPtr)
}

declare 153 generic {
    void Tk_PreserveColormap (Display *display, Colormap colormap)
}

declare 154 generic {
    void Tk_QueueWindowEvent (XEvent *eventPtr, Tcl_QueuePosition position)
}

declare 155 generic {
    void Tk_RedrawImage (Tk_Image image, int imageX,
	    int imageY, int width, int height,
	    Drawable drawable, int drawableX, int drawableY)
}

declare 156 generic {
    void Tk_ResizeWindow (Tk_Window tkwin, int width, int height)
}

declare 157 generic {
    int Tk_RestackWindow (Tk_Window tkwin, int aboveBelow, Tk_Window other)
}

declare 158 generic {
    Tk_RestrictProc *Tk_RestrictEvents (Tk_RestrictProc *proc,
	    ClientData arg, ClientData *prevArgPtr)
}

declare 159 generic {
    int Tk_SafeInit (Tcl_Interp *interp)
}

declare 160 generic {
    CONST char * Tk_SetAppName (Tk_Window tkwin, CONST char *name)
}

declare 161 generic {
    void Tk_SetBackgroundFromBorder (Tk_Window tkwin, Tk_3DBorder border)
}

declare 162 generic {
    void Tk_SetClass (Tk_Window tkwin, CONST char *className)
}

declare 163 generic {
    void Tk_SetGrid (Tk_Window tkwin, int reqWidth, int reqHeight,
	    int gridWidth, int gridHeight)
}

declare 164 generic {
    void Tk_SetInternalBorder (Tk_Window tkwin, int width)
}

declare 165 generic {
    void Tk_SetWindowBackground (Tk_Window tkwin, unsigned long pixel)
}

declare 166 generic {
    void Tk_SetWindowBackgroundPixmap (Tk_Window tkwin, Pixmap pixmap)
}

declare 167 generic {
    void Tk_SetWindowBorder (Tk_Window tkwin, unsigned long pixel)
}

declare 168 generic {
    void Tk_SetWindowBorderWidth (Tk_Window tkwin, int width)
}

declare 169 generic {
    void Tk_SetWindowBorderPixmap (Tk_Window tkwin, Pixmap pixmap)
}

declare 170 generic {
    void Tk_SetWindowColormap (Tk_Window tkwin, Colormap colormap)
}

declare 171 generic {
    int Tk_SetWindowVisual (Tk_Window tkwin, Visual *visual, int depth,
	    Colormap colormap)
}

declare 172 generic {
    void Tk_SizeOfBitmap (Display *display, Pixmap bitmap, int *widthPtr,
	    int *heightPtr)
}

declare 173 generic {
    void Tk_SizeOfImage (Tk_Image image, int *widthPtr, int *heightPtr)
}

declare 174 generic {
    int Tk_StrictMotif (Tk_Window tkwin)
}

declare 175 generic {
    void Tk_TextLayoutToPostscript (Tcl_Interp *interp, Tk_TextLayout layout)
}

declare 176 generic {
    int Tk_TextWidth (Tk_Font font, CONST char *str, int numBytes)
}

declare 177 generic {
    void Tk_UndefineCursor (Tk_Window window)
}

declare 178 generic {
    void Tk_UnderlineChars (Display *display,
	    Drawable drawable, GC gc, Tk_Font tkfont,
	    CONST char *source, int x, int y, int firstByte,
	    int lastByte)
}

declare 179 generic {
    void Tk_UnderlineTextLayout (Display *display, Drawable drawable, GC gc,
	    Tk_TextLayout layout, int x, int y,
	    int underline)
}

declare 180 generic {
    void Tk_Ungrab (Tk_Window tkwin)
}

declare 181 generic {
    void Tk_UnmaintainGeometry (Tk_Window slave, Tk_Window master)
}

declare 182 generic {
    void Tk_UnmapWindow (Tk_Window tkwin)
}

declare 183 generic {
    void Tk_UnsetGrid (Tk_Window tkwin)
}

declare 184 generic {
    void Tk_UpdatePointer (Tk_Window tkwin, int x, int y, int state)
}

# new functions for 8.1

declare 185 generic {
    Pixmap  Tk_AllocBitmapFromObj (Tcl_Interp *interp, Tk_Window tkwin,
    Tcl_Obj *objPtr)
}

declare 186 generic {
    Tk_3DBorder Tk_Alloc3DBorderFromObj (Tcl_Interp *interp, Tk_Window tkwin,
	    Tcl_Obj *objPtr)
}

declare 187 generic {
    XColor *  Tk_AllocColorFromObj (Tcl_Interp *interp, Tk_Window tkwin,
	    Tcl_Obj *objPtr)
}

declare 188 generic {
    Tk_Cursor Tk_AllocCursorFromObj (Tcl_Interp *interp, Tk_Window tkwin,
	    Tcl_Obj *objPtr)
}

declare 189 generic {
    Tk_Font  Tk_AllocFontFromObj (Tcl_Interp *interp, Tk_Window tkwin,
	    Tcl_Obj *objPtr)

}

declare 190 generic {
    Tk_OptionTable Tk_CreateOptionTable (Tcl_Interp *interp,
	    CONST Tk_OptionSpec *templatePtr)
}

declare 191 generic {
    void  Tk_DeleteOptionTable (Tk_OptionTable optionTable)
}

declare 192 generic {
    void  Tk_Free3DBorderFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 193 generic {
    void  Tk_FreeBitmapFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 194 generic {
    void  Tk_FreeColorFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 195 generic {
    void  Tk_FreeConfigOptions (char *recordPtr, Tk_OptionTable optionToken,
	    Tk_Window tkwin)

}

declare 196 generic {
    void  Tk_FreeSavedOptions (Tk_SavedOptions *savePtr)
}

declare 197 generic {
    void  Tk_FreeCursorFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 198 generic {
    void  Tk_FreeFontFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 199 generic {
    Tk_3DBorder Tk_Get3DBorderFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 200 generic {
    int	 Tk_GetAnchorFromObj (Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tk_Anchor *anchorPtr)
}

declare 201 generic {
    Pixmap  Tk_GetBitmapFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 202 generic {
    XColor *  Tk_GetColorFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 203 generic {
    Tk_Cursor Tk_GetCursorFromObj (Tk_Window tkwin, Tcl_Obj *objPtr)
}

declare 204 generic {
    Tcl_Obj * Tk_GetOptionInfo (Tcl_Interp *interp,
	    char *recordPtr, Tk_OptionTable optionTable,
	    Tcl_Obj *namePtr, Tk_Window tkwin)
}

declare 205 generic {
    Tcl_Obj * Tk_GetOptionValue (Tcl_Interp *interp, char *recordPtr,
	    Tk_OptionTable optionTable, Tcl_Obj *namePtr, Tk_Window tkwin)
}

declare 206 generic {
    int	 Tk_GetJustifyFromObj (Tcl_Interp *interp,
	    Tcl_Obj *objPtr, Tk_Justify *justifyPtr)
}

declare 207 generic {
    int	 Tk_GetMMFromObj (Tcl_Interp *interp,
	    Tk_Window tkwin, Tcl_Obj *objPtr, double *doublePtr)
}

declare 208 generic {
    int	 Tk_GetPixelsFromObj (Tcl_Interp *interp,
	    Tk_Window tkwin, Tcl_Obj *objPtr, int *intPtr)
}

declare 209 generic {
    int	 Tk_GetReliefFromObj (Tcl_Interp *interp,
	    Tcl_Obj *objPtr, int *resultPtr)
}

declare 210 generic {
    int	 Tk_GetScrollInfoObj (Tcl_Interp *interp,
	    int objc, Tcl_Obj *CONST objv[], double *dblPtr, int *intPtr)
}

declare 211 generic {
    int	 Tk_InitOptions (Tcl_Interp *interp, char *recordPtr,
	    Tk_OptionTable optionToken, Tk_Window tkwin)
}

declare 212 generic {
    void  Tk_MainEx (int argc, char **argv, Tcl_AppInitProc *appInitProc,
	    Tcl_Interp *interp)
}

declare 213 generic {
    void  Tk_RestoreSavedOptions (Tk_SavedOptions *savePtr)
}

declare 214 generic {
    int	 Tk_SetOptions (Tcl_Interp *interp, char *recordPtr,
	    Tk_OptionTable optionTable, int objc,
	    Tcl_Obj *CONST objv[], Tk_Window tkwin,
	    Tk_SavedOptions *savePtr, int *maskPtr)
}

declare 215 generic {
    void Tk_InitConsoleChannels (Tcl_Interp *interp)
}

declare 216 generic {
    int Tk_CreateConsoleWindow (Tcl_Interp *interp)
}

declare 217 generic {
    void Tk_CreateSmoothMethod (Tcl_Interp *interp, Tk_SmoothMethod *method)
}

#declare 218 generic {
#    void Tk_CreateCanvasVisitor (Tcl_Interp *interp, VOID *typePtr)
#}

#declare 219 generic {
#    VOID *Tk_GetCanvasVisitor (Tcl_Interp *interp, CONST char *name)
#}

declare 220 generic {
    int Tk_GetDash (Tcl_Interp *interp, CONST char *value, Tk_Dash *dash)
}
declare 221 generic {
    void Tk_CreateOutline (Tk_Outline *outline)
}
declare 222 generic {
    void Tk_DeleteOutline (Display *display, Tk_Outline *outline)
}
declare 223 generic {
    int Tk_ConfigOutlineGC (XGCValues *gcValues, Tk_Canvas canvas,
	    Tk_Item *item, Tk_Outline *outline)
}
declare 224 generic {
    int Tk_ChangeOutlineGC (Tk_Canvas canvas, Tk_Item *item,
	    Tk_Outline *outline)
}
declare 225 generic {
    int Tk_ResetOutlineGC (Tk_Canvas canvas, Tk_Item *item,
	    Tk_Outline *outline)
}
declare 226 generic {
    int Tk_CanvasPsOutline (Tk_Canvas canvas, Tk_Item *item,
	    Tk_Outline *outline)
}
declare 227 generic {
    void Tk_SetTSOrigin (Tk_Window tkwin, GC gc, int x, int y)
}
declare 228 generic {
    int Tk_CanvasGetCoordFromObj (Tcl_Interp *interp, Tk_Canvas canvas,
	    Tcl_Obj *obj, double *doublePtr)
}
declare 229 generic {
    void Tk_CanvasSetOffset (Tk_Canvas canvas, GC gc, Tk_TSOffset *offset)
}
declare 230 generic {
    void Tk_DitherPhoto (Tk_PhotoHandle handle, int x, int y, int width,
	    int height)
}
declare 231 generic {
    int Tk_PostscriptBitmap (Tcl_Interp *interp, Tk_Window tkwin,
	    Tk_PostscriptInfo psInfo, Pixmap bitmap, int startX,
	    int startY, int width, int height)
}
declare 232 generic {
    int Tk_PostscriptColor (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
	    XColor *colorPtr)
}
declare 233 generic {
    int Tk_PostscriptFont (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
	    Tk_Font font)
}
declare 234 generic {
    int Tk_PostscriptImage (Tk_Image image, Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_PostscriptInfo psinfo, int x, int y,
	    int width, int height, int prepass)
}
declare 235 generic {
    void Tk_PostscriptPath (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
	    double *coordPtr, int numPoints)
}
declare 236 generic {
    int Tk_PostscriptStipple (Tcl_Interp *interp, Tk_Window tkwin,
	    Tk_PostscriptInfo psInfo, Pixmap bitmap)
}
declare 237 generic {
    double Tk_PostscriptY (double y, Tk_PostscriptInfo psInfo)
}
declare 238 generic {
    int	Tk_PostscriptPhoto (Tcl_Interp *interp,
	    Tk_PhotoImageBlock *blockPtr, Tk_PostscriptInfo psInfo,
	    int width, int height)
}

# New in 8.4a1
#
declare 239 generic {
    void Tk_CreateClientMessageHandler (Tk_ClientMessageProc *proc)
}
declare 240 generic {
    void Tk_DeleteClientMessageHandler (Tk_ClientMessageProc *proc)
}

# New in 8.4a2
#
declare 241 generic {
    Tk_Window Tk_CreateAnonymousWindow (Tcl_Interp *interp,
	    Tk_Window parent, CONST char *screenName)
}
declare 242 generic {
    void Tk_SetClassProcs (Tk_Window tkwin,
	    Tk_ClassProcs *procs, ClientData instanceData)
}

# New in 8.4a4
#
declare 243 generic {
    void Tk_SetInternalBorderEx (Tk_Window tkwin, int left, int right,
	    int top, int bottom)
}
declare 244 generic {
    void Tk_SetMinimumRequestSize (Tk_Window tkwin,
	    int minWidth, int minHeight)
}

# New in 8.4a5
#
declare 245 generic {
    void Tk_SetCaretPos (Tk_Window tkwin, int x, int y, int height)
}

declare 246 generic {
    void Tk_PhotoPutBlock (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int compRule)
}
declare 247 generic {
    void Tk_PhotoPutZoomedBlock (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int zoomX, int zoomY,
	    int subsampleX, int subsampleY, int compRule)
}

declare 248 generic {
    int Tk_CollapseMotionEvents (Display *display, int collapse)
}

# Style engine
declare 249 generic {
    Tk_StyleEngine Tk_RegisterStyleEngine (CONST char *name,
	    Tk_StyleEngine parent)
}
declare 250 generic {
    Tk_StyleEngine Tk_GetStyleEngine (CONST char *name)
}
declare 251 generic {
    int Tk_RegisterStyledElement (Tk_StyleEngine engine,
	    Tk_ElementSpec *templatePtr)
}
declare 252 generic {
    int Tk_GetElementId (CONST char *name)
}
declare 253 generic {
    Tk_Style Tk_CreateStyle (CONST char *name, Tk_StyleEngine engine,
	    ClientData clientData)
}
declare 254 generic {
    Tk_Style Tk_GetStyle (Tcl_Interp *interp, CONST char *name)
}
declare 255 generic {
    void Tk_FreeStyle (Tk_Style style)
}
declare 256 generic {
    CONST char * Tk_NameOfStyle (Tk_Style style)
}
declare 257 generic {
    Tk_Style  Tk_AllocStyleFromObj (Tcl_Interp *interp, Tcl_Obj *objPtr)
}
declare 258 generic {
    Tk_Style Tk_GetStyleFromObj (Tcl_Obj *objPtr)
}
declare 259 generic {
    void  Tk_FreeStyleFromObj (Tcl_Obj *objPtr)
}
declare 260 generic {
    Tk_StyledElement Tk_GetStyledElement (Tk_Style style, int elementId,
	Tk_OptionTable optionTable)
}
declare 261 generic {
    void Tk_GetElementSize (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, int width, int height,
	    int inner, int *widthPtr, int *heightPtr)
}
declare 262 generic {
    void Tk_GetElementBox (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, int x, int y, int width,
	    int height, int inner, int *xPtr, int *yPtr, int *widthPtr,
	    int *heightPtr)
}
declare 263 generic {
    int Tk_GetElementBorderWidth (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin)
}
declare 264 generic {
    void Tk_DrawElement (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, Drawable d, int x, int y,
	    int width, int height, int state)
}


# Define the platform specific public Tk interface.  These functions are
# only available on the designated platform.

interface tkPlat

# Unix specific functions
#   (none)

# Windows specific functions

declare 0 win {
    Window Tk_AttachHWND (Tk_Window tkwin, HWND hwnd)
}

declare 1 win {
    HINSTANCE Tk_GetHINSTANCE (void)
}

declare 2 win {
    HWND Tk_GetHWND (Window window)
}

declare 3 win {
    Tk_Window Tk_HWNDToWindow (HWND hwnd)
}

declare 4 win {
    void Tk_PointerEvent (HWND hwnd, int x, int y)
}

declare 5 win {
    int Tk_TranslateWinEvent (HWND hwnd,
	    UINT message, WPARAM wParam, LPARAM lParam, LRESULT *result)
}

# Mac specific functions

declare 0 mac {
    void Tk_MacSetEmbedHandler (
	    Tk_MacEmbedRegisterWinProc *registerWinProcPtr,
	    Tk_MacEmbedGetGrafPortProc *getPortProcPtr,
	    Tk_MacEmbedMakeContainerExistProc *containerExistProcPtr,
	    Tk_MacEmbedGetClipProc *getClipProc,
	    Tk_MacEmbedGetOffsetInParentProc *getOffsetProc)
}
 
declare 1 mac {
    void Tk_MacTurnOffMenus (void)
}

declare 2 mac {
    void Tk_MacTkOwnsCursor (int tkOwnsIt)
}

declare 3 mac {
    void TkMacInitMenus (Tcl_Interp *interp)
}

declare 4 mac {
    void TkMacInitAppleEvents (Tcl_Interp *interp)
}

declare 5 mac {
    int TkMacConvertEvent (EventRecord *eventPtr)
}

declare 6 mac {
    int TkMacConvertTkEvent (EventRecord *eventPtr, Window window)
}

declare 7 mac {
    void TkGenWMConfigureEvent (Tk_Window tkwin,
	    int x, int y, int width, int height, int flags)
}

declare 8 mac {
    void TkMacInvalClipRgns (TkWindow *winPtr)
}

declare 9 mac {
    int TkMacHaveAppearance (void)
}

declare 10 mac {
    GWorldPtr TkMacGetDrawablePort (Drawable drawable)
}

# Mac OS X specific functions

declare 0 aqua {
    void Tk_MacOSXSetEmbedHandler ( \
	    Tk_MacOSXEmbedRegisterWinProc *registerWinProcPtr, \
	    Tk_MacOSXEmbedGetGrafPortProc *getPortProcPtr, \
	    Tk_MacOSXEmbedMakeContainerExistProc *containerExistProcPtr, \
	    Tk_MacOSXEmbedGetClipProc *getClipProc, \
	    Tk_MacOSXEmbedGetOffsetInParentProc *getOffsetProc)
}
 
declare 1 aqua {
    void Tk_MacOSXTurnOffMenus (void)
}

declare 2 aqua {
    void Tk_MacOSXTkOwnsCursor (int tkOwnsIt)
}

declare 3 aqua {
    void TkMacOSXInitMenus (Tcl_Interp *interp)
}

declare 4 aqua {
    void TkMacOSXInitAppleEvents (Tcl_Interp *interp)
}

declare 5 aqua {
    void TkGenWMConfigureEvent (Tk_Window tkwin, \
	    int x, int y, int width, int height, int flags)
}

declare 6 aqua {
    void TkMacOSXInvalClipRgns (TkWindow *winPtr)
}

declare 7 aqua {
    GWorldPtr TkMacOSXGetDrawablePort (Drawable drawable)
}

declare 8 aqua {
    ControlRef TkMacOSXGetRootControl (Drawable drawable)
}

declare 9 aqua {
    void Tk_MacOSXSetupTkNotifier (void)
}

declare 10 aqua {
    int Tk_MacOSXIsAppInFront (void)
}
@


1.4
log
@touched all sources to ease next import
@
text
@d9 2
a10 1
# Copyright (c) 1998-1999 by Scriptics Corporation.
d14 1
a14 1
# RCS: @@(#) $Id: tk.decls,v 1.3.6.1 2000/09/26 16:07:44 spolk Exp $
d39 1
a39 1
    GC Tk_3DBorderGC (Tk_Window tkwin, Tk_3DBorder border, \
d44 3
a46 3
    void Tk_3DHorizontalBevel (Tk_Window tkwin, \
	    Drawable drawable, Tk_3DBorder border, int x, \
	    int y, int width, int height, int leftIn, \
d51 3
a53 3
    void Tk_3DVerticalBevel (Tk_Window tkwin, \
	    Drawable drawable, Tk_3DBorder border, int x, \
	    int y, int width, int height, int leftBevel, \
d58 2
a59 2
    void Tk_AddOption (Tk_Window tkwin, char *name, \
	    char *value, int priority)
d63 2
a64 2
    void Tk_BindEvent (Tk_BindingTable bindingTable, \
	    XEvent *eventPtr, Tk_Window tkwin, int numObjects, \
d69 2
a70 2
    void Tk_CanvasDrawableCoords (Tk_Canvas canvas, \
	    double x, double y, short *drawableXPtr, \
d75 1
a75 1
    void Tk_CanvasEventuallyRedraw (Tk_Canvas canvas, int x1, int y1, \
d80 2
a81 2
    int Tk_CanvasGetCoord (Tcl_Interp *interp, \
	    Tk_Canvas canvas, char *str, double *doublePtr)
d89 2
a90 2
    int Tk_CanvasPsBitmap (Tcl_Interp *interp, \
	    Tk_Canvas canvas, Pixmap bitmap, int x, int y, \
d95 1
a95 1
    int Tk_CanvasPsColor (Tcl_Interp *interp, \
d100 1
a100 1
    int Tk_CanvasPsFont (Tcl_Interp *interp, \
d105 1
a105 1
    void Tk_CanvasPsPath (Tcl_Interp *interp, \
d110 1
a110 1
    int Tk_CanvasPsStipple (Tcl_Interp *interp, \
d123 2
a124 2
    int Tk_CanvasTagsParseProc (ClientData clientData, Tcl_Interp *interp, \
	    Tk_Window tkwin, char *value, char *widgRec, int offset)
d128 1
a128 1
    char * Tk_CanvasTagsPrintProc (ClientData clientData, Tk_Window tkwin, \
d137 1
a137 1
    void Tk_CanvasWindowCoords (Tk_Canvas canvas, double x, double y, \
d142 1
a142 1
    void Tk_ChangeWindowAttributes (Tk_Window tkwin, unsigned long valueMask, \
d147 1
a147 1
    int Tk_CharBbox (Tk_TextLayout layout, int index, int *xPtr, \
d156 1
a156 1
    int Tk_ClipboardAppend (Tcl_Interp *interp,Tk_Window tkwin, \
d165 3
a167 3
    int Tk_ConfigureInfo (Tcl_Interp *interp, \
	    Tk_Window tkwin, Tk_ConfigSpec *specs, \
	    char *widgRec, char *argvName, int flags)
d171 3
a173 3
    int Tk_ConfigureValue (Tcl_Interp *interp, \
	    Tk_Window tkwin, Tk_ConfigSpec *specs, \
	    char *widgRec, char *argvName, int flags)
d177 3
a179 3
    int Tk_ConfigureWidget (Tcl_Interp *interp, \
	    Tk_Window tkwin, Tk_ConfigSpec *specs, \
	    int argc, char **argv, char *widgRec, \
d184 1
a184 1
    void Tk_ConfigureWindow (Tk_Window tkwin, \
d189 3
a191 3
    Tk_TextLayout Tk_ComputeTextLayout (Tk_Font font, \
	    CONST char *str, int numChars, int wrapLength, \
	    Tk_Justify justify, int flags, int *widthPtr, \
d200 3
a202 3
    unsigned long Tk_CreateBinding (Tcl_Interp *interp, \
	    Tk_BindingTable bindingTable, ClientData object, \
	    char *eventStr, char *command, int append)
d210 2
a211 2
    Tk_ErrorHandler Tk_CreateErrorHandler (Display *display, \
	    int errNum, int request, int minorCode, \
d216 2
a217 2
    void Tk_CreateEventHandler (Tk_Window token, \
	    unsigned long mask, Tk_EventProc *proc, \
d238 3
a240 3
    void Tk_CreateSelHandler (Tk_Window tkwin, \
	    Atom selection, Atom target, \
	    Tk_SelectionProc *proc, ClientData clientData, \
d245 2
a246 2
    Tk_Window Tk_CreateWindow (Tcl_Interp *interp, \
	    Tk_Window parent, char *name, char *screenName)
d250 2
a251 2
    Tk_Window Tk_CreateWindowFromPath (Tcl_Interp *interp, Tk_Window tkwin, \
	    char *pathName, char *screenName)
d255 2
a256 2
    int Tk_DefineBitmap (Tcl_Interp *interp, CONST char *name, char *source, \
	    int width, int height)
d268 3
a270 3
    int Tk_DeleteBinding (Tcl_Interp *interp, \
	    Tk_BindingTable bindingTable, ClientData object, \
	    char *eventStr)
d282 2
a283 2
    void Tk_DeleteEventHandler (Tk_Window token, \
	    unsigned long mask, Tk_EventProc *proc, \
d292 1
a292 1
    void Tk_DeleteImage (Tcl_Interp *interp, char *name)
d304 1
a304 1
    char * Tk_DisplayName (Tk_Window tkwin)
d312 3
a314 3
    void Tk_Draw3DPolygon (Tk_Window tkwin, \
	    Drawable drawable, Tk_3DBorder border, \
	    XPoint *pointPtr, int numPoints, int borderWidth, \
d319 2
a320 2
    void Tk_Draw3DRectangle (Tk_Window tkwin, Drawable drawable, \
	    Tk_3DBorder border, int x, int y, int width, int height, \
d325 1
a325 1
    void Tk_DrawChars (Display *display, Drawable drawable, GC gc, \
d330 1
a330 1
    void Tk_DrawFocusHighlight (Tk_Window tkwin, GC gc, int width, \
d335 2
a336 2
    void Tk_DrawTextLayout (Display *display, \
	    Drawable drawable, GC gc, Tk_TextLayout layout, \
d341 3
a343 3
    void Tk_Fill3DPolygon (Tk_Window tkwin, \
	    Drawable drawable, Tk_3DBorder border, \
	    XPoint *pointPtr, int numPoints, int borderWidth, \
d348 3
a350 3
    void Tk_Fill3DRectangle (Tk_Window tkwin, \
	    Drawable drawable, Tk_3DBorder border, int x, \
	    int y, int width, int height, int borderWidth, \
d355 1
a355 1
    Tk_PhotoHandle Tk_FindPhoto (Tcl_Interp *interp, char *imageName)
d395 1
a395 1
    void Tk_FreeOptions (Tk_ConfigSpec *specs, \
d420 1
a420 1
    Tk_3DBorder	Tk_Get3DBorder (Tcl_Interp *interp, Tk_Window tkwin, \
d425 1
a425 1
    void Tk_GetAllBindings (Tcl_Interp *interp, \
d430 2
a431 2
    int Tk_GetAnchor (Tcl_Interp *interp, \
	    char *str, Tk_Anchor *anchorPtr)
d435 1
a435 1
    char * Tk_GetAtomName (Tk_Window tkwin, Atom atom)
d439 3
a441 3
    char * Tk_GetBinding (Tcl_Interp *interp, \
	    Tk_BindingTable bindingTable, ClientData object, \
	    char *eventStr)
d449 2
a450 2
    Pixmap Tk_GetBitmapFromData (Tcl_Interp *interp, \
	    Tk_Window tkwin, char *source, int width, int height)
d454 1
a454 1
    int Tk_GetCapStyle (Tcl_Interp *interp, char *str, int *capPtr)
d466 2
a467 1
    Colormap Tk_GetColormap (Tcl_Interp *interp, Tk_Window tkwin, char *str)
d471 1
a471 1
    Tk_Cursor Tk_GetCursor (Tcl_Interp *interp, Tk_Window tkwin, \
d476 3
a478 3
    Tk_Cursor Tk_GetCursorFromData (Tcl_Interp *interp, \
	    Tk_Window tkwin, char *source, char *mask, \
	    int width, int height, int xHot, int yHot, \
d483 1
a483 1
    Tk_Font Tk_GetFont (Tcl_Interp *interp, \
d500 1
a500 1
    Tk_Image Tk_GetImage (Tcl_Interp *interp, Tk_Window tkwin, char *name, \
d505 2
a506 2
    ClientData Tk_GetImageMasterData (Tcl_Interp *interp, \
	    char *name, Tk_ImageType **typePtrPtr)
d514 1
a514 1
    int Tk_GetJoinStyle (Tcl_Interp *interp, char *str, int *joinPtr)
d518 2
a519 2
    int Tk_GetJustify (Tcl_Interp *interp, \
	    char *str, Tk_Justify *justifyPtr)
d527 2
a528 1
    Tk_Uid Tk_GetOption (Tk_Window tkwin, char *name, char *className)
d532 2
a533 2
    int Tk_GetPixels (Tcl_Interp *interp, \
	    Tk_Window tkwin, char *str, int *intPtr)
d537 1
a537 1
    Pixmap Tk_GetPixmap (Display *display, Drawable d, \
d542 1
a542 1
    int Tk_GetRelief (Tcl_Interp *interp, char *name, int *reliefPtr)
d550 2
a551 2
    int Tk_GetScrollInfo (Tcl_Interp *interp, \
	    int argc, char **argv, double *dblPtr, int *intPtr)
d555 2
a556 2
    int Tk_GetScreenMM (Tcl_Interp *interp, \
	    Tk_Window tkwin, char *str, double *doublePtr)
d560 2
a561 2
    int Tk_GetSelection (Tcl_Interp *interp, \
	    Tk_Window tkwin, Atom selection, Atom target, \
d570 2
a571 2
    Visual * Tk_GetVisual (Tcl_Interp *interp, \
	    Tk_Window tkwin, char *str, int *depthPtr, \
d576 1
a576 1
    void Tk_GetVRootGeometry (Tk_Window tkwin, \
d593 1
a593 1
    void Tk_ImageChanged (Tk_ImageMaster master, int x, int y, \
d602 1
a602 1
    Atom Tk_InternAtom (Tk_Window tkwin, char *name)
d606 1
a606 1
    int Tk_IntersectTextLayout (Tk_TextLayout layout, int x, int y, \
d611 1
a611 1
    void Tk_MaintainGeometry (Tk_Window slave, \
d624 1
a624 1
    void Tk_ManageGeometry (Tk_Window tkwin, \
d633 2
a634 2
    int Tk_MeasureChars (Tk_Font tkfont, \
	    CONST char *source, int numBytes, int maxPixels, \
d639 1
a639 1
    void Tk_MoveResizeWindow (Tk_Window tkwin, \
d652 1
a652 1
    char * Tk_NameOf3DBorder (Tk_3DBorder border)
d656 1
a656 1
    char * Tk_NameOfAnchor (Tk_Anchor anchor)
d660 1
a660 1
    char * Tk_NameOfBitmap (Display *display, Pixmap bitmap)
d664 1
a664 1
    char * Tk_NameOfCapStyle (int cap)
d668 1
a668 1
    char * Tk_NameOfColor (XColor *colorPtr)
d672 1
a672 1
    char * Tk_NameOfCursor (Display *display, Tk_Cursor cursor)
d676 1
a676 1
    char * Tk_NameOfFont (Tk_Font font)
d680 1
a680 1
    char * Tk_NameOfImage (Tk_ImageMaster imageMaster)
d684 1
a684 1
    char * Tk_NameOfJoinStyle (int join)
d688 1
a688 1
    char * Tk_NameOfJustify (Tk_Justify justify)
d692 1
a692 1
    char * Tk_NameOfRelief (int relief)
d696 2
a697 2
    Tk_Window Tk_NameToWindow (Tcl_Interp *interp, \
	    char *pathName, Tk_Window tkwin)
d701 2
a702 2
    void Tk_OwnSelection (Tk_Window tkwin, \
	    Atom selection, Tk_LostSelProc *proc, \
d707 2
a708 2
    int Tk_ParseArgv (Tcl_Interp *interp, \
	    Tk_Window tkwin, int *argcPtr, char **argv, \
d713 2
a714 2
    void Tk_PhotoPutBlock (Tk_PhotoHandle handle, \
	    Tk_PhotoImageBlock *blockPtr, int x, int y, \
d719 3
a721 3
    void Tk_PhotoPutZoomedBlock (Tk_PhotoHandle handle, \
	    Tk_PhotoImageBlock *blockPtr, int x, int y, \
	    int width, int height, int zoomX, int zoomY, \
d762 2
a763 2
    void Tk_RedrawImage (Tk_Image image, int imageX, \
	    int imageY, int width, int height, \
d776 1
a776 1
    Tk_RestrictProc *Tk_RestrictEvents (Tk_RestrictProc *proc, \
d785 1
a785 1
    char * Tk_SetAppName (Tk_Window tkwin, char *name)
d793 1
a793 1
    void Tk_SetClass (Tk_Window tkwin, char *className)
d797 1
a797 1
    void Tk_SetGrid (Tk_Window tkwin, int reqWidth, int reqHeight, \
d830 1
a830 1
    int Tk_SetWindowVisual (Tk_Window tkwin, Visual *visual, int depth,\
d835 1
a835 1
    void Tk_SizeOfBitmap (Display *display, Pixmap bitmap, int *widthPtr, \
d860 3
a862 3
    void Tk_UnderlineChars (Display *display, \
	    Drawable drawable, GC gc, Tk_Font tkfont, \
	    CONST char *source, int x, int y, int firstByte, \
d867 2
a868 2
    void Tk_UnderlineTextLayout (Display *display, Drawable drawable, GC gc, \
	    Tk_TextLayout layout, int x, int y, \
d895 1
a895 1
    Pixmap  Tk_AllocBitmapFromObj (Tcl_Interp *interp, Tk_Window tkwin, \
d900 1
a900 1
    Tk_3DBorder Tk_Alloc3DBorderFromObj (Tcl_Interp *interp, Tk_Window tkwin, \
d905 1
a905 1
    XColor *  Tk_AllocColorFromObj (Tcl_Interp *interp, Tk_Window tkwin, \
d910 1
a910 1
    Tk_Cursor Tk_AllocCursorFromObj (Tcl_Interp *interp, Tk_Window tkwin, \
d915 1
a915 1
    Tk_Font  Tk_AllocFontFromObj (Tcl_Interp *interp, Tk_Window tkwin, \
d921 1
a921 1
    Tk_OptionTable Tk_CreateOptionTable (Tcl_Interp *interp, \
d942 1
a942 1
    void  Tk_FreeConfigOptions (char *recordPtr, Tk_OptionTable optionToken, \
d964 1
a964 1
    int  Tk_GetAnchorFromObj (Tcl_Interp *interp, Tcl_Obj *objPtr, \
d981 2
a982 2
    Tcl_Obj * Tk_GetOptionInfo (Tcl_Interp *interp, \
	    char *recordPtr, Tk_OptionTable optionTable, \
d987 1
a987 1
    Tcl_Obj * Tk_GetOptionValue (Tcl_Interp *interp, char *recordPtr, \
d992 1
a992 1
    int  Tk_GetJustifyFromObj (Tcl_Interp *interp, \
d997 1
a997 1
    int  Tk_GetMMFromObj (Tcl_Interp *interp, \
d1002 1
a1002 1
    int  Tk_GetPixelsFromObj (Tcl_Interp *interp, \
d1007 1
a1007 1
    int  Tk_GetReliefFromObj (Tcl_Interp *interp, \
d1012 1
a1012 1
    int  Tk_GetScrollInfoObj (Tcl_Interp *interp, \
d1017 2
a1018 3
    int  Tk_InitOptions (
       Tcl_Interp *interp, char *recordPtr, \
	       Tk_OptionTable optionToken, Tk_Window tkwin)
d1022 1
a1022 1
    void  Tk_MainEx (int argc, char **argv, Tcl_AppInitProc *appInitProc, \
d1031 3
a1033 3
    int  Tk_SetOptions (Tcl_Interp *interp, char *recordPtr, \
	    Tk_OptionTable optionTable, int objc, \
	    Tcl_Obj *CONST objv[], Tk_Window tkwin, \
d1067 1
a1067 1
    int Tk_ConfigOutlineGC (XGCValues *gcValues, Tk_Canvas canvas, \
d1071 1
a1071 1
    int Tk_ChangeOutlineGC (Tk_Canvas canvas, Tk_Item *item, \
d1075 1
a1075 1
    int Tk_ResetOutlineGC (Tk_Canvas canvas, Tk_Item *item, \
d1079 1
a1079 1
    int Tk_CanvasPsOutline (Tk_Canvas canvas, Tk_Item *item, \
d1086 1
a1086 1
    int Tk_CanvasGetCoordFromObj (Tcl_Interp *interp, Tk_Canvas canvas, \
d1093 1
a1093 1
    void Tk_DitherPhoto (Tk_PhotoHandle handle, int x, int y, int width, \
d1097 2
a1098 2
    int Tk_PostscriptBitmap (Tcl_Interp *interp, Tk_Window tkwin, \
	    Tk_PostscriptInfo psInfo, Pixmap bitmap, int startX, \
d1102 1
a1102 1
    int Tk_PostscriptColor (Tcl_Interp *interp, Tk_PostscriptInfo psInfo, \
d1106 1
a1106 1
    int Tk_PostscriptFont (Tcl_Interp *interp, Tk_PostscriptInfo psInfo, \
d1110 2
a1111 2
    int Tk_PostscriptImage (Tk_Image image, Tcl_Interp *interp, \
	    Tk_Window tkwin, Tk_PostscriptInfo psinfo, int x, int y, \
d1115 1
a1115 1
    void Tk_PostscriptPath (Tcl_Interp *interp, Tk_PostscriptInfo psInfo, \
d1119 1
a1119 1
    int Tk_PostscriptStipple (Tcl_Interp *interp, Tk_Window tkwin, \
d1126 2
a1127 2
    int	Tk_PostscriptPhoto (Tcl_Interp *interp, \
	    Tk_PhotoImageBlock *blockPtr, Tk_PostscriptInfo psInfo, \
d1131 116
d1278 1
a1278 1
    int Tk_TranslateWinEvent (HWND hwnd, \
d1285 5
a1289 5
    void Tk_MacSetEmbedHandler ( \
	    Tk_MacEmbedRegisterWinProc *registerWinProcPtr, \
	    Tk_MacEmbedGetGrafPortProc *getPortProcPtr, \
	    Tk_MacEmbedMakeContainerExistProc *containerExistProcPtr, \
	    Tk_MacEmbedGetClipProc *getClipProc, \
d1318 1
a1318 1
    void TkGenWMConfigureEvent (Tk_Window tkwin, \
d1334 51
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tk 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tk 8.4.0
@
text
@d9 1
a9 2
# Copyright (c) 1998-2000 Ajuba Solutions.
#
d13 1
a13 1
# RCS: @@(#) $Id: tk.decls,v 1.24 2002/08/31 06:12:19 das Exp $
d38 1
a38 1
    GC Tk_3DBorderGC (Tk_Window tkwin, Tk_3DBorder border,
d43 3
a45 3
    void Tk_3DHorizontalBevel (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int leftIn,
d50 3
a52 3
    void Tk_3DVerticalBevel (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int leftBevel,
d57 2
a58 2
    void Tk_AddOption (Tk_Window tkwin, CONST char *name,
	    CONST char *value, int priority)
d62 2
a63 2
    void Tk_BindEvent (Tk_BindingTable bindingTable,
	    XEvent *eventPtr, Tk_Window tkwin, int numObjects,
d68 2
a69 2
    void Tk_CanvasDrawableCoords (Tk_Canvas canvas,
	    double x, double y, short *drawableXPtr,
d74 1
a74 1
    void Tk_CanvasEventuallyRedraw (Tk_Canvas canvas, int x1, int y1,
d79 2
a80 2
    int Tk_CanvasGetCoord (Tcl_Interp *interp,
	    Tk_Canvas canvas, CONST char *str, double *doublePtr)
d88 2
a89 2
    int Tk_CanvasPsBitmap (Tcl_Interp *interp,
	    Tk_Canvas canvas, Pixmap bitmap, int x, int y,
d94 1
a94 1
    int Tk_CanvasPsColor (Tcl_Interp *interp,
d99 1
a99 1
    int Tk_CanvasPsFont (Tcl_Interp *interp,
d104 1
a104 1
    void Tk_CanvasPsPath (Tcl_Interp *interp,
d109 1
a109 1
    int Tk_CanvasPsStipple (Tcl_Interp *interp,
d122 2
a123 2
    int Tk_CanvasTagsParseProc (ClientData clientData, Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *value, char *widgRec, int offset)
d127 1
a127 1
    char * Tk_CanvasTagsPrintProc (ClientData clientData, Tk_Window tkwin,
d136 1
a136 1
    void Tk_CanvasWindowCoords (Tk_Canvas canvas, double x, double y,
d141 1
a141 1
    void Tk_ChangeWindowAttributes (Tk_Window tkwin, unsigned long valueMask,
d146 1
a146 1
    int Tk_CharBbox (Tk_TextLayout layout, int index, int *xPtr,
d155 1
a155 1
    int Tk_ClipboardAppend (Tcl_Interp *interp,Tk_Window tkwin,
d164 3
a166 3
    int Tk_ConfigureInfo (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    char *widgRec, CONST char *argvName, int flags)
d170 3
a172 3
    int Tk_ConfigureValue (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    char *widgRec, CONST char *argvName, int flags)
d176 3
a178 3
    int Tk_ConfigureWidget (Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_ConfigSpec *specs,
	    int argc, CONST84 char **argv, char *widgRec,
d183 1
a183 1
    void Tk_ConfigureWindow (Tk_Window tkwin,
d188 3
a190 3
    Tk_TextLayout Tk_ComputeTextLayout (Tk_Font font,
	    CONST char *str, int numChars, int wrapLength,
	    Tk_Justify justify, int flags, int *widthPtr,
d199 3
a201 3
    unsigned long Tk_CreateBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr, CONST char *command, int append)
d209 2
a210 2
    Tk_ErrorHandler Tk_CreateErrorHandler (Display *display,
	    int errNum, int request, int minorCode,
d215 2
a216 2
    void Tk_CreateEventHandler (Tk_Window token,
	    unsigned long mask, Tk_EventProc *proc,
d237 3
a239 3
    void Tk_CreateSelHandler (Tk_Window tkwin,
	    Atom selection, Atom target,
	    Tk_SelectionProc *proc, ClientData clientData,
d244 2
a245 2
    Tk_Window Tk_CreateWindow (Tcl_Interp *interp,
	    Tk_Window parent, CONST char *name, CONST char *screenName)
d249 2
a250 2
    Tk_Window Tk_CreateWindowFromPath (Tcl_Interp *interp, Tk_Window tkwin,
	    CONST char *pathName, CONST char *screenName)
d254 2
a255 2
    int Tk_DefineBitmap (Tcl_Interp *interp, CONST char *name,
	    CONST char *source, int width, int height)
d267 3
a269 3
    int Tk_DeleteBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr)
d281 2
a282 2
    void Tk_DeleteEventHandler (Tk_Window token,
	    unsigned long mask, Tk_EventProc *proc,
d291 1
a291 1
    void Tk_DeleteImage (Tcl_Interp *interp, CONST char *name)
d303 1
a303 1
    CONST84_RETURN char * Tk_DisplayName (Tk_Window tkwin)
d311 3
a313 3
    void Tk_Draw3DPolygon (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border,
	    XPoint *pointPtr, int numPoints, int borderWidth,
d318 2
a319 2
    void Tk_Draw3DRectangle (Tk_Window tkwin, Drawable drawable,
	    Tk_3DBorder border, int x, int y, int width, int height,
d324 1
a324 1
    void Tk_DrawChars (Display *display, Drawable drawable, GC gc,
d329 1
a329 1
    void Tk_DrawFocusHighlight (Tk_Window tkwin, GC gc, int width,
d334 2
a335 2
    void Tk_DrawTextLayout (Display *display,
	    Drawable drawable, GC gc, Tk_TextLayout layout,
d340 3
a342 3
    void Tk_Fill3DPolygon (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border,
	    XPoint *pointPtr, int numPoints, int borderWidth,
d347 3
a349 3
    void Tk_Fill3DRectangle (Tk_Window tkwin,
	    Drawable drawable, Tk_3DBorder border, int x,
	    int y, int width, int height, int borderWidth,
d354 1
a354 1
    Tk_PhotoHandle Tk_FindPhoto (Tcl_Interp *interp, CONST char *imageName)
d394 1
a394 1
    void Tk_FreeOptions (Tk_ConfigSpec *specs,
d419 1
a419 1
    Tk_3DBorder	Tk_Get3DBorder (Tcl_Interp *interp, Tk_Window tkwin,
d424 1
a424 1
    void Tk_GetAllBindings (Tcl_Interp *interp,
d429 2
a430 2
    int Tk_GetAnchor (Tcl_Interp *interp,
	    CONST char *str, Tk_Anchor *anchorPtr)
d434 1
a434 1
    CONST84_RETURN char * Tk_GetAtomName (Tk_Window tkwin, Atom atom)
d438 3
a440 3
    CONST84_RETURN char * Tk_GetBinding (Tcl_Interp *interp,
	    Tk_BindingTable bindingTable, ClientData object,
	    CONST char *eventStr)
d448 2
a449 2
    Pixmap Tk_GetBitmapFromData (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *source, int width, int height)
d453 1
a453 1
    int Tk_GetCapStyle (Tcl_Interp *interp, CONST char *str, int *capPtr)
d465 1
a465 2
    Colormap Tk_GetColormap (Tcl_Interp *interp, Tk_Window tkwin,
	    CONST char *str)
d469 1
a469 1
    Tk_Cursor Tk_GetCursor (Tcl_Interp *interp, Tk_Window tkwin,
d474 3
a476 3
    Tk_Cursor Tk_GetCursorFromData (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *source, CONST char *mask,
	    int width, int height, int xHot, int yHot,
d481 1
a481 1
    Tk_Font Tk_GetFont (Tcl_Interp *interp,
d498 1
a498 1
    Tk_Image Tk_GetImage (Tcl_Interp *interp, Tk_Window tkwin, CONST char *name,
d503 2
a504 2
    ClientData Tk_GetImageMasterData (Tcl_Interp *interp,
	    CONST char *name, Tk_ImageType **typePtrPtr)
d512 1
a512 1
    int Tk_GetJoinStyle (Tcl_Interp *interp, CONST char *str, int *joinPtr)
d516 2
a517 2
    int Tk_GetJustify (Tcl_Interp *interp,
	    CONST char *str, Tk_Justify *justifyPtr)
d525 1
a525 2
    Tk_Uid Tk_GetOption (Tk_Window tkwin, CONST char *name, 
	    CONST char *className)
d529 2
a530 2
    int Tk_GetPixels (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, int *intPtr)
d534 1
a534 1
    Pixmap Tk_GetPixmap (Display *display, Drawable d,
d539 1
a539 1
    int Tk_GetRelief (Tcl_Interp *interp, CONST char *name, int *reliefPtr)
d547 2
a548 2
    int Tk_GetScrollInfo (Tcl_Interp *interp,
	    int argc, CONST84 char **argv, double *dblPtr, int *intPtr)
d552 2
a553 2
    int Tk_GetScreenMM (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, double *doublePtr)
d557 2
a558 2
    int Tk_GetSelection (Tcl_Interp *interp,
	    Tk_Window tkwin, Atom selection, Atom target,
d567 2
a568 2
    Visual * Tk_GetVisual (Tcl_Interp *interp,
	    Tk_Window tkwin, CONST char *str, int *depthPtr,
d573 1
a573 1
    void Tk_GetVRootGeometry (Tk_Window tkwin,
d590 1
a590 1
    void Tk_ImageChanged (Tk_ImageMaster master, int x, int y,
d599 1
a599 1
    Atom Tk_InternAtom (Tk_Window tkwin, CONST char *name)
d603 1
a603 1
    int Tk_IntersectTextLayout (Tk_TextLayout layout, int x, int y,
d608 1
a608 1
    void Tk_MaintainGeometry (Tk_Window slave,
d621 1
a621 1
    void Tk_ManageGeometry (Tk_Window tkwin,
d630 2
a631 2
    int Tk_MeasureChars (Tk_Font tkfont,
	    CONST char *source, int numBytes, int maxPixels,
d636 1
a636 1
    void Tk_MoveResizeWindow (Tk_Window tkwin,
d649 1
a649 1
    CONST84_RETURN char * Tk_NameOf3DBorder (Tk_3DBorder border)
d653 1
a653 1
    CONST84_RETURN char * Tk_NameOfAnchor (Tk_Anchor anchor)
d657 1
a657 1
    CONST84_RETURN char * Tk_NameOfBitmap (Display *display, Pixmap bitmap)
d661 1
a661 1
    CONST84_RETURN char * Tk_NameOfCapStyle (int cap)
d665 1
a665 1
    CONST84_RETURN char * Tk_NameOfColor (XColor *colorPtr)
d669 1
a669 1
    CONST84_RETURN char * Tk_NameOfCursor (Display *display, Tk_Cursor cursor)
d673 1
a673 1
    CONST84_RETURN char * Tk_NameOfFont (Tk_Font font)
d677 1
a677 1
    CONST84_RETURN char * Tk_NameOfImage (Tk_ImageMaster imageMaster)
d681 1
a681 1
    CONST84_RETURN char * Tk_NameOfJoinStyle (int join)
d685 1
a685 1
    CONST84_RETURN char * Tk_NameOfJustify (Tk_Justify justify)
d689 1
a689 1
    CONST84_RETURN char * Tk_NameOfRelief (int relief)
d693 2
a694 2
    Tk_Window Tk_NameToWindow (Tcl_Interp *interp,
	    CONST char *pathName, Tk_Window tkwin)
d698 2
a699 2
    void Tk_OwnSelection (Tk_Window tkwin,
	    Atom selection, Tk_LostSelProc *proc,
d704 2
a705 2
    int Tk_ParseArgv (Tcl_Interp *interp,
	    Tk_Window tkwin, int *argcPtr, CONST84 char **argv,
d710 2
a711 2
    void Tk_PhotoPutBlock_NoComposite (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
d716 3
a718 3
    void Tk_PhotoPutZoomedBlock_NoComposite (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int zoomX, int zoomY,
d759 2
a760 2
    void Tk_RedrawImage (Tk_Image image, int imageX,
	    int imageY, int width, int height,
d773 1
a773 1
    Tk_RestrictProc *Tk_RestrictEvents (Tk_RestrictProc *proc,
d782 1
a782 1
    CONST char * Tk_SetAppName (Tk_Window tkwin, CONST char *name)
d790 1
a790 1
    void Tk_SetClass (Tk_Window tkwin, CONST char *className)
d794 1
a794 1
    void Tk_SetGrid (Tk_Window tkwin, int reqWidth, int reqHeight,
d827 1
a827 1
    int Tk_SetWindowVisual (Tk_Window tkwin, Visual *visual, int depth,
d832 1
a832 1
    void Tk_SizeOfBitmap (Display *display, Pixmap bitmap, int *widthPtr,
d857 3
a859 3
    void Tk_UnderlineChars (Display *display,
	    Drawable drawable, GC gc, Tk_Font tkfont,
	    CONST char *source, int x, int y, int firstByte,
d864 2
a865 2
    void Tk_UnderlineTextLayout (Display *display, Drawable drawable, GC gc,
	    Tk_TextLayout layout, int x, int y,
d892 1
a892 1
    Pixmap  Tk_AllocBitmapFromObj (Tcl_Interp *interp, Tk_Window tkwin,
d897 1
a897 1
    Tk_3DBorder Tk_Alloc3DBorderFromObj (Tcl_Interp *interp, Tk_Window tkwin,
d902 1
a902 1
    XColor *  Tk_AllocColorFromObj (Tcl_Interp *interp, Tk_Window tkwin,
d907 1
a907 1
    Tk_Cursor Tk_AllocCursorFromObj (Tcl_Interp *interp, Tk_Window tkwin,
d912 1
a912 1
    Tk_Font  Tk_AllocFontFromObj (Tcl_Interp *interp, Tk_Window tkwin,
d918 1
a918 1
    Tk_OptionTable Tk_CreateOptionTable (Tcl_Interp *interp,
d939 1
a939 1
    void  Tk_FreeConfigOptions (char *recordPtr, Tk_OptionTable optionToken,
d961 1
a961 1
    int	 Tk_GetAnchorFromObj (Tcl_Interp *interp, Tcl_Obj *objPtr,
d978 2
a979 2
    Tcl_Obj * Tk_GetOptionInfo (Tcl_Interp *interp,
	    char *recordPtr, Tk_OptionTable optionTable,
d984 1
a984 1
    Tcl_Obj * Tk_GetOptionValue (Tcl_Interp *interp, char *recordPtr,
d989 1
a989 1
    int	 Tk_GetJustifyFromObj (Tcl_Interp *interp,
d994 1
a994 1
    int	 Tk_GetMMFromObj (Tcl_Interp *interp,
d999 1
a999 1
    int	 Tk_GetPixelsFromObj (Tcl_Interp *interp,
d1004 1
a1004 1
    int	 Tk_GetReliefFromObj (Tcl_Interp *interp,
d1009 1
a1009 1
    int	 Tk_GetScrollInfoObj (Tcl_Interp *interp,
d1014 3
a1016 2
    int	 Tk_InitOptions (Tcl_Interp *interp, char *recordPtr,
	    Tk_OptionTable optionToken, Tk_Window tkwin)
d1020 1
a1020 1
    void  Tk_MainEx (int argc, char **argv, Tcl_AppInitProc *appInitProc,
d1029 3
a1031 3
    int	 Tk_SetOptions (Tcl_Interp *interp, char *recordPtr,
	    Tk_OptionTable optionTable, int objc,
	    Tcl_Obj *CONST objv[], Tk_Window tkwin,
d1065 1
a1065 1
    int Tk_ConfigOutlineGC (XGCValues *gcValues, Tk_Canvas canvas,
d1069 1
a1069 1
    int Tk_ChangeOutlineGC (Tk_Canvas canvas, Tk_Item *item,
d1073 1
a1073 1
    int Tk_ResetOutlineGC (Tk_Canvas canvas, Tk_Item *item,
d1077 1
a1077 1
    int Tk_CanvasPsOutline (Tk_Canvas canvas, Tk_Item *item,
d1084 1
a1084 1
    int Tk_CanvasGetCoordFromObj (Tcl_Interp *interp, Tk_Canvas canvas,
d1091 1
a1091 1
    void Tk_DitherPhoto (Tk_PhotoHandle handle, int x, int y, int width,
d1095 2
a1096 2
    int Tk_PostscriptBitmap (Tcl_Interp *interp, Tk_Window tkwin,
	    Tk_PostscriptInfo psInfo, Pixmap bitmap, int startX,
d1100 1
a1100 1
    int Tk_PostscriptColor (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
d1104 1
a1104 1
    int Tk_PostscriptFont (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
d1108 2
a1109 2
    int Tk_PostscriptImage (Tk_Image image, Tcl_Interp *interp,
	    Tk_Window tkwin, Tk_PostscriptInfo psinfo, int x, int y,
d1113 1
a1113 1
    void Tk_PostscriptPath (Tcl_Interp *interp, Tk_PostscriptInfo psInfo,
d1117 1
a1117 1
    int Tk_PostscriptStipple (Tcl_Interp *interp, Tk_Window tkwin,
d1124 2
a1125 2
    int	Tk_PostscriptPhoto (Tcl_Interp *interp,
	    Tk_PhotoImageBlock *blockPtr, Tk_PostscriptInfo psInfo,
a1128 116
# New in 8.4a1
#
declare 239 generic {
    void Tk_CreateClientMessageHandler (Tk_ClientMessageProc *proc)
}
declare 240 generic {
    void Tk_DeleteClientMessageHandler (Tk_ClientMessageProc *proc)
}

# New in 8.4a2
#
declare 241 generic {
    Tk_Window Tk_CreateAnonymousWindow (Tcl_Interp *interp,
	    Tk_Window parent, CONST char *screenName)
}
declare 242 generic {
    void Tk_SetClassProcs (Tk_Window tkwin,
	    Tk_ClassProcs *procs, ClientData instanceData)
}

# New in 8.4a4
#
declare 243 generic {
    void Tk_SetInternalBorderEx (Tk_Window tkwin, int left, int right,
	    int top, int bottom)
}
declare 244 generic {
    void Tk_SetMinimumRequestSize (Tk_Window tkwin,
	    int minWidth, int minHeight)
}

# New in 8.4a5
#
declare 245 generic {
    void Tk_SetCaretPos (Tk_Window tkwin, int x, int y, int height)
}

declare 246 generic {
    void Tk_PhotoPutBlock (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int compRule)
}
declare 247 generic {
    void Tk_PhotoPutZoomedBlock (Tk_PhotoHandle handle,
	    Tk_PhotoImageBlock *blockPtr, int x, int y,
	    int width, int height, int zoomX, int zoomY,
	    int subsampleX, int subsampleY, int compRule)
}

declare 248 generic {
    int Tk_CollapseMotionEvents (Display *display, int collapse)
}

# Style engine
declare 249 generic {
    Tk_StyleEngine Tk_RegisterStyleEngine (CONST char *name,
	    Tk_StyleEngine parent)
}
declare 250 generic {
    Tk_StyleEngine Tk_GetStyleEngine (CONST char *name)
}
declare 251 generic {
    int Tk_RegisterStyledElement (Tk_StyleEngine engine,
	    Tk_ElementSpec *templatePtr)
}
declare 252 generic {
    int Tk_GetElementId (CONST char *name)
}
declare 253 generic {
    Tk_Style Tk_CreateStyle (CONST char *name, Tk_StyleEngine engine,
	    ClientData clientData)
}
declare 254 generic {
    Tk_Style Tk_GetStyle (Tcl_Interp *interp, CONST char *name)
}
declare 255 generic {
    void Tk_FreeStyle (Tk_Style style)
}
declare 256 generic {
    CONST char * Tk_NameOfStyle (Tk_Style style)
}
declare 257 generic {
    Tk_Style  Tk_AllocStyleFromObj (Tcl_Interp *interp, Tcl_Obj *objPtr)
}
declare 258 generic {
    Tk_Style Tk_GetStyleFromObj (Tcl_Obj *objPtr)
}
declare 259 generic {
    void  Tk_FreeStyleFromObj (Tcl_Obj *objPtr)
}
declare 260 generic {
    Tk_StyledElement Tk_GetStyledElement (Tk_Style style, int elementId,
	Tk_OptionTable optionTable)
}
declare 261 generic {
    void Tk_GetElementSize (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, int width, int height,
	    int inner, int *widthPtr, int *heightPtr)
}
declare 262 generic {
    void Tk_GetElementBox (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, int x, int y, int width,
	    int height, int inner, int *xPtr, int *yPtr, int *widthPtr,
	    int *heightPtr)
}
declare 263 generic {
    int Tk_GetElementBorderWidth (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin)
}
declare 264 generic {
    void Tk_DrawElement (Tk_Style style, Tk_StyledElement element,
	    char *recordPtr, Tk_Window tkwin, Drawable d, int x, int y,
	    int width, int height, int state)
}


d1160 1
a1160 1
    int Tk_TranslateWinEvent (HWND hwnd,
d1167 5
a1171 5
    void Tk_MacSetEmbedHandler (
	    Tk_MacEmbedRegisterWinProc *registerWinProcPtr,
	    Tk_MacEmbedGetGrafPortProc *getPortProcPtr,
	    Tk_MacEmbedMakeContainerExistProc *containerExistProcPtr,
	    Tk_MacEmbedGetClipProc *getClipProc,
d1200 1
a1200 1
    void TkGenWMConfigureEvent (Tk_Window tkwin,
a1215 51
# Mac OS X specific functions

declare 0 aqua {
    void Tk_MacOSXSetEmbedHandler ( \
	    Tk_MacOSXEmbedRegisterWinProc *registerWinProcPtr, \
	    Tk_MacOSXEmbedGetGrafPortProc *getPortProcPtr, \
	    Tk_MacOSXEmbedMakeContainerExistProc *containerExistProcPtr, \
	    Tk_MacOSXEmbedGetClipProc *getClipProc, \
	    Tk_MacOSXEmbedGetOffsetInParentProc *getOffsetProc)
}
 
declare 1 aqua {
    void Tk_MacOSXTurnOffMenus (void)
}

declare 2 aqua {
    void Tk_MacOSXTkOwnsCursor (int tkOwnsIt)
}

declare 3 aqua {
    void TkMacOSXInitMenus (Tcl_Interp *interp)
}

declare 4 aqua {
    void TkMacOSXInitAppleEvents (Tcl_Interp *interp)
}

declare 5 aqua {
    void TkGenWMConfigureEvent (Tk_Window tkwin, \
	    int x, int y, int width, int height, int flags)
}

declare 6 aqua {
    void TkMacOSXInvalClipRgns (TkWindow *winPtr)
}

declare 7 aqua {
    GWorldPtr TkMacOSXGetDrawablePort (Drawable drawable)
}

declare 8 aqua {
    ControlRef TkMacOSXGetRootControl (Drawable drawable)
}

declare 9 aqua {
    void Tk_MacOSXSetupTkNotifier (void)
}

declare 10 aqua {
    int Tk_MacOSXIsAppInFront (void)
}
@

