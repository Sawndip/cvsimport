head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TK_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2003.01.21.20.24.44;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.13;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.25;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.51;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.00.22.32;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.10.00.22.32;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.20.38.25;	author kseitz;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.01.21.19.54.12;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@/*
 * tkIntXlibDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.16 2002/10/09 11:56:33 das Exp $
 */

#ifndef _TKINTXLIBDECLS
#define _TKINTXLIBDECLS

#ifdef MAC_TCL
#include "Xutil.h"
#else
#include "X11/Xutil.h"
#endif

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 7 */
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display* d, 
				Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, 
				unsigned int ui1, unsigned int ui2));
/* 8 */
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display* d, Font f1, 
				Font f2, unsigned int ui1, unsigned int ui2, 
				XColor* x1, XColor* x2));
/* 9 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 10 */
EXTERN XHostAddress *	XListHosts _ANSI_ARGS_((Display* d, int* i, Bool* b));
/* 11 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, 
				unsigned int k, int i));
/* 12 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 13 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 15 */
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display* d, Window w, 
				int i));
/* 16 */
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display* d, Window w, 
				int i));
/* 17 */
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display* d, 
				Window w, Window** wpp, int* ip));
/* 18 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 19 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 20 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 21 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 22 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 23 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 24 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 25 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 26 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
				unsigned int width, unsigned int height));
/* 27 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 28 */
EXTERN void		XDeleteProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a));
/* 29 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 30 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 31 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 32 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 33 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 34 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 35 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 36 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* d, int i));
/* 37 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 38 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 39 */
EXTERN void		XFreeCursor _ANSI_ARGS_((Display* d, Cursor c));
/* 40 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 41 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 42 */
EXTERN void		XGetInputFocus _ANSI_ARGS_((Display* d, Window* w, 
				int* i));
/* 43 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 44 */
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, XWindowAttributes* x));
/* 45 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 46 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 47 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 48 */
EXTERN Status		XLookupColor _ANSI_ARGS_((Display* d, Colormap c1, 
				_Xconst char* c2, XColor* x1, XColor* x2));
/* 49 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 50 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 51 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 52 */
EXTERN void		XNextEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 53 */
EXTERN void		XPutBackEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 54 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* x, int i));
/* 55 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 56 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
/* 57 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 58 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 59 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 60 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 61 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 62 */
EXTERN void		XSetCommand _ANSI_ARGS_((Display* d, Window w, 
				CONST char** c, int i));
/* 63 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 64 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 65 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 66 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 67 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 68 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 69 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 70 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 71 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 72 */
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display* d, 
				Window w1, Window w2, int i1, int i2, 
				int* i3, int* i4, Window* w3));
/* 73 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 74 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 75 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 76 */
EXTERN void		XWindowEvent _ANSI_ARGS_((Display* d, Window w, 
				long l, XEvent* x));
/* 77 */
EXTERN void		XDestroyIC _ANSI_ARGS_((XIC x));
/* 78 */
EXTERN Bool		XFilterEvent _ANSI_ARGS_((XEvent* x, Window w));
/* 79 */
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi, 
				XKeyPressedEvent* xk, char* c, int i, 
				KeySym* k, Status* s));
/* 80 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
/* Slot 81 is reserved */
/* 82 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
				XColor * colorPtr));
/* 83 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
				unsigned long valuemask, XGCValues* values));
/* 84 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 85 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
				_Xconst char* atom_name, Bool only_if_exists));
/* 86 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 87 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 88 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
				Pixmap pixmap));
/* 89 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int clip_x_origin, int clip_y_origin));
/* 90 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int ts_x_origin, int ts_y_origin));
/* 91 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
/* 92 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
/* 93 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
/* 94 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
/* 95 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
/* 96 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
/* 97 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
/* 98 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
/* 99 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 100 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 101 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
				int* nitems_return));
/* 102 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
				Window w, XTextProperty* text_prop));
/* 103 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
				int count, XTextProperty* text_prop_return));
/* 104 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int x1, int y1, int x2, int y2));
/* 105 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* d, Window s, 
				Window dw, int sx, int sy, unsigned int sw, 
				unsigned int sh, int dx, int dy));
/* 106 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
#endif /* __WIN32__ */
#ifdef MAC_TCL
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 13 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
				unsigned int width, unsigned int height));
/* 20 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 27 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 28 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 29 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 30 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 47 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 55 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 57 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
				XColor * colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
				unsigned long valuemask, XGCValues* values));
/* 60 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
				_Xconst char* atom_name, Bool only_if_exists));
/* 62 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 63 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 64 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
				Pixmap pixmap));
/* 65 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
/* 68 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
/* 69 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
/* 70 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
/* 71 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
/* 72 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
/* 73 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
/* 74 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
				int* nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
				Window w, XTextProperty* text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
				int count, XTextProperty* text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display, 
				int mode));
/* 82 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d, 
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, XPoint * points, 
				int npoints, int mode));
/* 87 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
				unsigned int src_height, int dest_x, 
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
				int ncolors));
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 13 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
				unsigned int width, unsigned int height));
/* 20 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 27 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 28 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 29 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 30 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 47 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 55 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 57 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
				XColor * colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
				unsigned long valuemask, XGCValues* values));
/* 60 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
				_Xconst char* atom_name, Bool only_if_exists));
/* 62 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 63 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 64 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
				Pixmap pixmap));
/* 65 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
/* 68 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
/* 69 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
/* 70 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
/* 71 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
/* 72 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
/* 73 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
/* 74 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
				int* nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
				Window w, XTextProperty* text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
				int count, XTextProperty* text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display, 
				int mode));
/* 82 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d, 
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, XPoint * points, 
				int npoints, int mode));
/* 87 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
				unsigned int src_height, int dest_x, 
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
				int ncolors));
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
#endif /* MAC_OSX_TK */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#ifdef __WIN32__
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display* d, Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, unsigned int ui1, unsigned int ui2)); /* 7 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display* d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor* x1, XColor* x2)); /* 8 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 9 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display* d, int* i, Bool* b)); /* 10 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, unsigned int k, int i)); /* 11 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 12 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 14 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 15 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 16 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display* d, Window w, Window** wpp, int* ip)); /* 17 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 18 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 19 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 20 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 21 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 22 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 23 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 24 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 25 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 26 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 27 */
    void (*xDeleteProperty) _ANSI_ARGS_((Display* d, Window w, Atom a)); /* 28 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 29 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 30 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 31 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 32 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 33 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 34 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 35 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* d, int i)); /* 36 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 37 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 38 */
    void (*xFreeCursor) _ANSI_ARGS_((Display* d, Cursor c)); /* 39 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 40 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 41 */
    void (*xGetInputFocus) _ANSI_ARGS_((Display* d, Window* w, int* i)); /* 42 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 43 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display* d, Window w, XWindowAttributes* x)); /* 44 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 45 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 46 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 47 */
    Status (*xLookupColor) _ANSI_ARGS_((Display* d, Colormap c1, _Xconst char* c2, XColor* x1, XColor* x2)); /* 48 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 49 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 50 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 51 */
    void (*xNextEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 52 */
    void (*xPutBackEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 53 */
    void (*xQueryColors) _ANSI_ARGS_((Display* d, Colormap c, XColor* x, int i)); /* 54 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 55 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 56 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 57 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 58 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 59 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 60 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 61 */
    void (*xSetCommand) _ANSI_ARGS_((Display* d, Window w, CONST char** c, int i)); /* 62 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 63 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 64 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 65 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 66 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 67 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 68 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 69 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 70 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 71 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display* d, Window w1, Window w2, int i1, int i2, int* i3, int* i4, Window* w3)); /* 72 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 73 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 74 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 75 */
    void (*xWindowEvent) _ANSI_ARGS_((Display* d, Window w, long l, XEvent* x)); /* 76 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 77 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent* x, Window w)); /* 78 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent* xk, char* c, int i, KeySym* k, Status* s)); /* 79 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 80 */
    void *reserved81;
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 82 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 83 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 84 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 85 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 86 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 87 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 88 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 89 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 90 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 91 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 92 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 93 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 94 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 95 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 96 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 97 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 98 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 99 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 100 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 101 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 102 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 103 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 104 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy)); /* 105 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 106 */
#endif /* __WIN32__ */
#ifdef MAC_TCL
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
#endif /* MAC_OSX_TK */
} TkIntXlibStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 19 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
#endif
/* Slot 81 is reserved */
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_TCL
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#endif /* MAC_OSX_TK */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTXLIBDECLS */
@


1.4
log
@touched all sources to ease next import
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.3.6.1 2000/10/02 23:14:05 spolk Exp $
d234 1
a234 1
				char** c, int i));
d654 1037
a1690 114
#endif /* MAC_TCL */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#ifdef __WIN32__
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display* d, Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, unsigned int ui1, unsigned int ui2)); /* 7 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display* d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor* x1, XColor* x2)); /* 8 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 9 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display* d, int* i, Bool* b)); /* 10 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, unsigned int k, int i)); /* 11 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 12 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 14 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 15 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 16 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display* d, Window w, Window** wpp, int* ip)); /* 17 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 18 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 19 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 20 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 21 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 22 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 23 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 24 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 25 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 26 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 27 */
    void (*xDeleteProperty) _ANSI_ARGS_((Display* d, Window w, Atom a)); /* 28 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 29 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 30 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 31 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 32 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 33 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 34 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 35 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* d, int i)); /* 36 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 37 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 38 */
    void (*xFreeCursor) _ANSI_ARGS_((Display* d, Cursor c)); /* 39 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 40 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 41 */
    void (*xGetInputFocus) _ANSI_ARGS_((Display* d, Window* w, int* i)); /* 42 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 43 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display* d, Window w, XWindowAttributes* x)); /* 44 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 45 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 46 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 47 */
    Status (*xLookupColor) _ANSI_ARGS_((Display* d, Colormap c1, _Xconst char* c2, XColor* x1, XColor* x2)); /* 48 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 49 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 50 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 51 */
    void (*xNextEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 52 */
    void (*xPutBackEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 53 */
    void (*xQueryColors) _ANSI_ARGS_((Display* d, Colormap c, XColor* x, int i)); /* 54 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 55 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 56 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 57 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 58 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 59 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 60 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 61 */
    void (*xSetCommand) _ANSI_ARGS_((Display* d, Window w, char** c, int i)); /* 62 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 63 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 64 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 65 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 66 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 67 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 68 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 69 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 70 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 71 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display* d, Window w1, Window w2, int i1, int i2, int* i3, int* i4, Window* w3)); /* 72 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 73 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 74 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 75 */
    void (*xWindowEvent) _ANSI_ARGS_((Display* d, Window w, long l, XEvent* x)); /* 76 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 77 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent* x, Window w)); /* 78 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent* xk, char* c, int i, KeySym* k, Status* s)); /* 79 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 80 */
    void *reserved81;
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 82 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 83 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 84 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 85 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 86 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 87 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 88 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 89 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 90 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 91 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 92 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 93 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 94 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 95 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 96 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 97 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 98 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 99 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 100 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 101 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 102 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 103 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 104 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy)); /* 105 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 106 */
a1692 108
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
#endif /* MAC_TCL */
} TkIntXlibStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
a1720 8
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
d1723 1
a1723 5
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
d1727 1
a1727 1
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
d1731 1
a1731 1
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
d1735 1
a1735 1
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
d1739 1
a1739 13
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
d1743 1
a1743 1
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
d1747 1
a1747 1
	(tkIntXlibStubsPtr->xBell) /* 19 */
d1751 1
a1751 1
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
d1755 1
a1755 5
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
d1759 1
a1759 1
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
d1763 1
a1763 1
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
d1767 1
a1767 1
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
d1771 1
a1771 1
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
d1775 1
a1775 5
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
d1779 1
a1779 1
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
d1783 1
a1783 1
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
d1787 1
a1787 1
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
d1791 1
a1791 1
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
d1795 1
a1795 1
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
d1799 1
a1799 1
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
d1803 1
a1803 5
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
d1807 1
a1807 1
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
d1811 1
a1811 5
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
d1815 1
a1815 1
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
d1819 1
a1819 5
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
d1823 1
a1823 5
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
d1827 1
a1827 1
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
d1831 1
a1831 1
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
d1835 1
a1835 5
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
d1839 1
a1839 1
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
d1843 1
a1843 1
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
d1847 1
a1847 13
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
d1851 1
a1851 5
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
d1855 1
a1855 1
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
d1859 1
a1859 1
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
d1863 1
a1863 1
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
d1867 1
a1867 1
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
d1871 1
a1871 5
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
d1875 1
a1875 1
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
d1879 1
a1879 1
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
d1883 1
a1883 1
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
d1887 1
a1887 1
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
d1891 1
a1891 1
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
d1895 1
a1895 1
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
d1899 1
a1899 1
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
d1903 1
a1903 1
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
d1907 1
a1907 5
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
d1911 1
a1911 1
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
d1915 1
a1915 1
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
d1919 1
a1919 17
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
d1923 1
a1923 1
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
a1924 1
/* Slot 81 is reserved */
d1927 1
a1927 1
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
d1931 1
a1931 1
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
d1935 1
a1935 1
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
d1939 1
a1939 1
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
d1943 1
a1943 1
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
d1947 1
a1947 1
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
d1951 1
a1951 1
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
d1955 1
a1955 1
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
d1959 1
a1959 1
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
d1963 1
a1963 1
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
d1967 1
a1967 1
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
d1971 1
a1971 1
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
d1975 1
a1975 1
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
d1979 1
a1979 1
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
d1983 1
a1983 1
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
d1987 1
a1987 1
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
d1991 1
a1991 1
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
d1995 1
a1995 1
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
d1999 1
a1999 1
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
d2003 1
a2003 1
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
d2007 1
a2007 1
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
d2011 9
a2019 1
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
d2023 17
a2039 1
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
d2043 9
a2051 1
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
d2053 3
a2055 3
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
d2057 2
a2058 2
#endif /* __WIN32__ */
#ifdef MAC_TCL
d2419 5
a2423 1
#endif /* MAC_TCL */
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tk 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tk 8.4.0
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.15 2002/08/31 06:12:20 das Exp $
d234 1
a234 1
				CONST char** c, int i));
a654 286
#ifdef MAC_OSX_TK
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 13 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
				unsigned int width, unsigned int height));
/* 20 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 27 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 28 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 29 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 30 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 47 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 55 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 57 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
				XColor * colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
				unsigned long valuemask, XGCValues* values));
/* 60 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
				_Xconst char* atom_name, Bool only_if_exists));
/* 62 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 63 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
				unsigned long foreground));
/* 64 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
				Pixmap pixmap));
/* 65 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
/* 68 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
/* 69 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
/* 70 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
/* 71 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
/* 72 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
/* 73 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
/* 74 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
				int* nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
				Window w, XTextProperty* text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
				int count, XTextProperty* text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display, 
				int mode));
/* 82 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d, 
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, XPoint * points, 
				int npoints, int mode));
/* 87 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
				unsigned int src_height, int dest_x, 
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
				int ncolors));
#endif /* MAC_OSX_TK */
d723 1
a723 1
    void (*xSetCommand) _ANSI_ARGS_((Display* d, Window w, CONST char** c, int i)); /* 62 */
d860 1
a860 93
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
#endif /* MAC_OSX_TK */
d866 3
a868 231
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 19 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
d870 8
a877 207
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
#endif
/* Slot 81 is reserved */
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_TCL
d906 8
d916 5
a920 1
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
d924 1
a924 1
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
d928 13
a940 1
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
d942 3
a944 3
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
d946 3
a948 3
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
d952 1
a952 1
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
d956 1
a956 1
	(tkIntXlibStubsPtr->xBell) /* 13 */
d960 1
a960 1
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
d964 5
a968 1
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
d972 1
a972 1
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
d976 1
a976 1
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
d980 1
a980 1
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
d984 1
a984 1
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
d988 5
a992 1
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
d996 1
a996 1
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
d1000 1
a1000 1
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
d1004 1
a1004 1
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
d1008 1
a1008 1
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
d1012 1
a1012 1
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
d1016 1
a1016 1
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
d1020 5
a1024 1
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
d1028 1
a1028 1
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
d1032 5
a1036 1
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
d1040 1
a1040 1
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
d1044 5
a1048 1
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
d1052 5
a1056 1
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
d1060 1
a1060 1
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
d1064 1
a1064 1
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
d1068 5
a1072 1
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
d1076 1
a1076 1
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
d1080 1
a1080 1
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
d1084 13
a1096 1
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
d1100 5
a1104 1
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
d1108 1
a1108 1
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
d1112 1
a1112 1
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
d1116 1
a1116 1
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
d1120 1
a1120 1
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
d1124 5
a1128 1
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
d1132 1
a1132 1
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
d1136 1
a1136 1
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
d1140 1
a1140 1
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
d1144 1
a1144 1
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
d1148 1
a1148 1
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
d1152 1
a1152 1
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
d1156 1
a1156 1
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
d1160 1
a1160 1
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
d1164 5
a1168 1
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
d1172 1
a1172 1
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
d1176 1
a1176 1
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
d1180 17
a1196 1
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
d1200 1
a1200 1
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
d1202 1
d1205 1
a1205 1
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
d1209 1
a1209 1
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
d1213 1
a1213 1
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
d1217 1
a1217 1
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
d1221 1
a1221 1
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
d1225 1
a1225 1
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
d1229 1
a1229 1
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
d1233 1
a1233 1
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
d1237 1
a1237 1
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
d1241 1
a1241 1
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
d1245 1
a1245 1
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
d1249 1
a1249 1
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
d1253 1
a1253 1
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
d1257 1
a1257 1
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
d1261 1
a1261 1
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
d1265 1
a1265 1
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
d1269 1
a1269 1
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
d1273 1
a1273 1
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
d1277 1
a1277 1
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
d1281 1
a1281 1
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
d1285 1
a1285 1
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
d1289 1
a1289 9
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
d1293 1
a1293 17
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
d1297 1
a1297 1
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
d1299 3
a1301 3
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
d1303 2
a1304 6
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
d1665 1
a1665 1
#endif /* MAC_OSX_TK */
@


1.1.1.3
log
@imported tk 8.4.1
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.16 2002/10/09 11:56:33 das Exp $
a653 4
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
a939 4
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
a1145 1
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
a1237 1
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
a2042 4
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
a2403 4
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
@


