head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.50;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.28;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.53;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.35;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.05;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test labels, buttons, checkbuttons, and
# radiobuttons in Tk (i.e., all the widgets defined in tkButton.c).  It is
# organized in the standard fashion for Tcl tests.
#
# Copyright (c) 1994 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: button.test,v 1.13 2002/09/02 23:32:35 hobbs Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

proc bogusTrace args {
    error "trace aborted"
}
catch {unset value}
catch {unset value2}

# Create entries in the option database to be sure that geometry options
# like border width have predictable values.

option add *Button.borderWidth 2
option add *Button.highlightThickness 2
option add *Button.font {Helvetica -12 bold}

eval image delete [image names]
if {[testConstraint testImageType]} {
    image create test image1
}
label .l -text Label
button .b -text Button
checkbutton .c -text Checkbutton
radiobutton .r -text Radiobutton
pack .l .b .c .r
update
set i 1
foreach test {
    {-activebackground #012345 #012345 non-existent
	    {unknown color name "non-existent"} {1 1 1 1}}
    {-activeforeground #ff0000 #ff0000 non-existent
	    {unknown color name "non-existent"} {1 1 1 1}}
    {-anchor nw nw bogus {bad anchor "bogus": must be n, ne, e, se, s, sw, w, nw, or center} {1 1 1 1}}
    {-background #ff0000 #ff0000 non-existent
	    {unknown color name "non-existent"} {1 1 1 1}}
    {-bd 4 4 badValue {bad screen distance "badValue"} {1 1 1 1}}
    {-bg #ff0000 #ff0000 non-existent {unknown color name "non-existent"}
	    {1 1 1 1}}
    {-bitmap questhead questhead badValue {bitmap "badValue" not defined}
	    {1 1 1 1}}
    {-borderwidth 1.3 1.3 badValue {bad screen distance "badValue"} {1 1 1 1}}
    {-command "set x" {set x} {} {} {0 1 1 1}}
    {-compound left left bogus {bad compound "bogus": must be bottom, center, left, none, right, or top} {1 1 1 1}}
    {-cursor arrow arrow badValue {bad cursor spec "badValue"} {1 1 1 1}}
    {-default active active huh?
	    {bad default "huh?": must be active, disabled, or normal}
	    {0 1 0 0}}
    {-disabledforeground #00ff00 #00ff00 xyzzy {unknown color name "xyzzy"}
	    {1 1 1 1}}
    {-fg #110022 #110022 bogus {unknown color name "bogus"} {1 1 1 1}}
    {-font {Helvetica 12} {Helvetica 12} {} {font "" doesn't exist} {1 1 1 1}}
    {-foreground #110022 #110022 bogus {unknown color name "bogus"} {1 1 1 1}}
    {-height 18 18 20.0 {expected integer but got "20.0"} {1 1 1 1}}
    {-highlightbackground #112233 #112233 ugly {unknown color name "ugly"}
	    {1 1 1 1}}
    {-highlightcolor #110022 #110022 bogus {unknown color name "bogus"}
	    {1 1 1 1}}
    {-highlightthickness 6m 6m badValue {bad screen distance "badValue"}
	    {1 1 1 1}}
    {-image image1 image1 bogus {image "bogus" doesn't exist} {1 1 1 1}}
    {-indicatoron yes 1 no_way {expected boolean value but got "no_way"}
	    {0 0 1 1}}
    {-justify right right bogus {bad justification "bogus": must be left, right, or center} {1 1 1 1}}
    {-offrelief flat flat 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {0 0 1 1}}
    {-offvalue lousy lousy {} {} {0 0 1 0}}
    {-offvalue fantastic fantastic {} {} {0 0 1 0}}
    {-overrelief "" "" 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {0 1 1 1}}
    {-padx 12m 12m 420x {bad screen distance "420x"} {1 1 1 1}}
    {-pady 12m 12m 420x {bad screen distance "420x"} {1 1 1 1}}
    {-repeatdelay 100 100 foo {expected integer but got "foo"} {0 1 0 0}}
    {-repeatinterval 100 100 foo {expected integer but got "foo"} {0 1 0 0}}
    {-relief flat flat 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {1 1 1 1}}
    {-selectcolor #110022 #110022 bogus {unknown color name "bogus"} {0 0 1 1}}
    {-selectimage image1 image1 bogus {image "bogus" doesn't exist} {0 0 1 1}}
    {-state normal normal bogus {bad state "bogus": must be active, disabled, or normal} {1 1 1 1}}
    {-takefocus "any string" "any string" {} {} {1 1 1 1}}
    {-text "Sample text" {Sample text} {} {} {1 1 1 1}}
    {-textvariable i i {} {} {1 1 1 1}}
    {-underline 5 5 3p {expected integer but got "3p"} {1 1 1 1}}
    {-value anyString anyString {} {} {0 0 0 1}}
    {-width 402 402 3p {expected integer but got "3p"} {1 1 1 1}}
    {-wraplength 100 100 6x {bad screen distance "6x"} {1 1 1 1}}
} {
    set name [lindex $test 0]
    set classes [lindex $test 5]
    foreach w {.l .b .c .r} hasOption [lindex $test 5] {
	if $hasOption {
	    test button-1.$i {configuration options} testImageType {
		$w configure $name [lindex $test 1]
		lindex [$w configure $name] 4
	    } [lindex $test 2]
	    incr i
	    if {[lindex $test 3] != ""} {
		test button-1.$i {configuration options} testImageType {
		    list [catch {$w configure $name [lindex $test 3]} msg] $msg
		} [list 1 [lindex $test 4]]
	    }
	    $w configure $name [lindex [$w configure $name] 3]
	} else {
	    test button-1.$i {configuration options} testImageType {
		list [catch {$w configure $name [lindex $test 1]} msg] $msg
	    } "1 {unknown option \"$name\"}"
	}
    }
    incr i
}
test button-1.$i {configuration options} {
    .c configure -selectcolor {}
} {}

test button-3.1 {ButtonCreate - not enough cd ../unix
} {
    list [catch {button} msg] $msg
} {1 {wrong # args: should be "button pathName ?options?"}}
test button-3.2 {ButtonCreate procedure - setting label class} {
    catch {destroy .x}
    label .x
    winfo class .x
} {Label}
test button-3.3 {ButtonCreate - setting button class} {
    catch {destroy .x}
    button .x
    winfo class .x
} {Button}
test button-3.4 {ButtonCreate - setting checkbutton class} {
    catch {destroy .x}
    checkbutton .x
    winfo class .x
} {Checkbutton}
test button-3.5 {ButtonCreate - setting radiobutton class} {
    catch {destroy .x}
    radiobutton .x
    winfo class .x
} {Radiobutton}
rename button gorp
test button-3.6 {ButtonCreate - setting class} {
    catch {destroy .x}
    gorp .x
    winfo class .x
} {Button}
rename gorp button
test button-3.7 {ButtonCreate - bad window name} {
    list [catch {button foo} msg] $msg
} {1 {bad window path name "foo"}}
test button-3.8 {ButtonCreate procedure - error in default option value} {
    catch {destroy .funny}
    option add *funny.background bogus
    list [catch {button .funny} msg] $msg $errorInfo
} {1 {unknown color name "bogus"} {unknown color name "bogus"
    (database entry for "-background" in widget ".funny")
    invoked from within
"button .funny"}}
test button-3.9 {ButtonCreate procedure - option error} {
    catch {destroy .x}
    list [catch {button .x -gorp foo} msg] $msg [winfo exists .x]
} {1 {unknown option "-gorp"} 0}
test button-3.10 {ButtonCreate procedure - return value} {
    catch {destroy .abcd}
    set x [button .abcd]
    destroy .abc
    set x
} {.abcd}

test button-4.1 {ButtonWidgetCmd - too few arguments} {
    list [catch {.b} msg] $msg
} {1 {wrong # args: should be ".b option ?arg arg ...?"}}
test button-4.2 {ButtonWidgetCmd - bad option name} {
    list [catch {.b c} msg] $msg
} {1 {ambiguous option "c": must be cget, configure, flash, or invoke}}
test button-4.3 {ButtonWidgetCmd - bad option name} {
    list [catch {.b bogus} msg] $msg
} {1 {bad option "bogus": must be cget, configure, flash, or invoke}}
test button-4.4 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.b cget a b} msg] $msg
} {1 {wrong # args: should be ".b cget option"}}
test button-4.5 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.b cget -gorp} msg] $msg
} {1 {unknown option "-gorp"}}
test button-4.6 {ButtonWidgetCmd procedure, "cget" option} {
    .b configure -highlightthickness 3
    .b cget -highlightthickness
} {3}
test button-4.7 {ButtonWidgetCmd procedure, "cget" option} {
    catch {.l cget -disabledforeground}
} {0}
test button-4.8 {ButtonWidgetCmd procedure, "cget" option} {
    catch {.b cget -disabledforeground}
} {0}
test button-4.9 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.b cget -variable} msg] $msg
} {1 {unknown option "-variable"}}
test button-4.10 {ButtonWidgetCmd procedure, "cget" option} {
    catch {.c cget -variable}
} {0}
test button-4.11 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.c cget -value} msg] $msg
} {1 {unknown option "-value"}}
test button-4.12 {ButtonWidgetCmd procedure, "cget" option} {
    catch {.r cget -value}
} {0}
test button-4.13 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.r cget -onvalue} msg] $msg
} {1 {unknown option "-onvalue"}}
test button-4.14 {ButtonWidgetCmd procedure, "configure" option} {
    llength [.c configure]
} {39}
test button-4.15 {ButtonWidgetCmd procedure, "configure" option} {
    list [catch {.b configure -gorp} msg] $msg
} {1 {unknown option "-gorp"}}
test button-4.16 {ButtonWidgetCmd procedure, "configure" option} {
    list [catch {.b co -bg #ffffff -fg} msg] $msg
} {1 {value for "-fg" missing}}
test button-4.17 {ButtonWidgetCmd procedure, "configure" option} {
    .b configure -fg #123456
    .b configure -bg #654321
    lindex [.b configure -fg] 4
} {#123456}
.c configure -variable value -onvalue 1 -offvalue 0
.r configure -variable value2 -value red
test button-4.18 {ButtonWidgetCmd procedure, "deselect" option} {
    list [catch {.c deselect foo} msg] $msg
} {1 {wrong # args: should be ".c deselect"}}
test button-4.19 {ButtonWidgetCmd procedure, "deselect" option} {
    list [catch {.l deselect} msg] $msg
} {1 {bad option "deselect": must be cget or configure}}
test button-4.20 {ButtonWidgetCmd procedure, "deselect" option} {
    list [catch {.b deselect} msg] $msg
} {1 {bad option "deselect": must be cget, configure, flash, or invoke}}
test button-4.21 {ButtonWidgetCmd procedure, "deselect" option} {
    set value 1
    .c d
    set value
} {0}
test button-4.22 {ButtonWidgetCmd procedure, "deselect" option} {
    set value2 green
    .r deselect
    set value2
} {green}
test button-4.23 {ButtonWidgetCmd procedure, "deselect" option} {
    set value2 red
    .r deselect
    set value2
} {}
test button-4.24 {ButtonWidgetCmd procedure, "deselect" option} {
    set value 1
    trace variable value w bogusTrace
    set result [list [catch {.c deselect} msg] $msg $errorInfo $value]
    trace vdelete value w bogusTrace
    set result
} {1 {can't set "value": trace aborted} {can't set "value": trace aborted
    while executing
".c deselect"} 0}
test button-4.25 {ButtonWidgetCmd procedure, "deselect" option} {
    set value2 red
    trace variable value2 w bogusTrace
    set result [list [catch {.r deselect} msg] $msg $errorInfo $value2]
    trace vdelete value2 w bogusTrace
    set result
} {1 {can't set "value2": trace aborted} {can't set "value2": trace aborted
    while executing
".r deselect"} {}}
test button-4.26 {ButtonWidgetCmd procedure, "flash" option} {
    list [catch {.b flash foo} msg] $msg
} {1 {wrong # args: should be ".b flash"}}
test button-4.27 {ButtonWidgetCmd procedure, "flash" option} {
    list [catch {.l flash} msg] $msg
} {1 {bad option "flash": must be cget or configure}}
test button-4.28 {ButtonWidgetCmd procedure, "flash" option} {
    list [catch {.b flash} msg] $msg
} {0 {}}
test button-4.29 {ButtonWidgetCmd procedure, "flash" option} {
    list [catch {.c flash} msg] $msg
} {0 {}}
test button-4.30 {ButtonWidgetCmd procedure, "flash" option} {
    list [catch {.r f} msg] $msg
} {0 {}}
test button-4.31 {ButtonWidgetCmd procedure, "invoke" option} {
    list [catch {.b invoke foo} msg] $msg
} {1 {wrong # args: should be ".b invoke"}}
test button-4.32 {ButtonWidgetCmd procedure, "invoke" option} {
    list [catch {.l invoke} msg] $msg
} {1 {bad option "invoke": must be cget or configure}}
test button-4.33 {ButtonWidgetCmd procedure, "invoke" option} {
    .b configure -command {set x invoked}
    set x "not invoked"
    .b invoke
    set x
} {invoked}
test button-4.34 {ButtonWidgetCmd procedure, "invoke" option} {
    .b configure -command {set x invoked} -state disabled
    set x "not invoked"
    .b invoke
    set x
} {not invoked}
test button-4.35 {ButtonWidgetCmd procedure, "invoke" option} {
    set value bogus
    .c configure -command {set x invoked} -variable value -onvalue 1 \
	    -offvalue 0
    set x "not invoked"
    .c invoke
    list $x $value
} {invoked 1}
test button-4.36 {ButtonWidgetCmd procedure, "invoke" option} {
    set value2 green
    .r configure -command {set x invoked} -variable value2 -value red
    set x "not invoked"
    .r i
    list $x $value2
} {invoked red}
test button-4.37 {ButtonWidgetCmd procedure, "select" option} {
    list [catch {.l select} msg] $msg
} {1 {bad option "select": must be cget or configure}}
test button-4.38 {ButtonWidgetCmd procedure, "select" option} {
    list [catch {.b select} msg] $msg
} {1 {bad option "select": must be cget, configure, flash, or invoke}}
test button-4.39 {ButtonWidgetCmd procedure, "select" option} {
    list [catch {.c select foo} msg] $msg
} {1 {wrong # args: should be ".c select"}}
test button-4.40 {ButtonWidgetCmd procedure, "select" option} {
    set value bogus
    .c configure -command {} -variable value -onvalue lovely -offvalue 0
    .c s
    set value
} {lovely}
test button-4.41 {ButtonWidgetCmd procedure, "select" option} {
    set value2 green
    .r configure -command {} -variable value2 -value red
    .r select
    set value2
} {red}
test button-4.42 {ButtonWidgetCmd procedure, "select" option} {
    set value2 yellow
    trace variable value2 w bogusTrace
    set result [list [catch {.r select} msg] $msg $errorInfo $value2]
    trace vdelete value2 w bogusTrace
    set result
} {1 {can't set "value2": trace aborted} {can't set "value2": trace aborted
    while executing
".r select"} red}
test button-4.43 {ButtonWidgetCmd procedure, "toggle" option} {
    list [catch {.l toggle} msg] $msg
} {1 {bad option "toggle": must be cget or configure}}
test button-4.44 {ButtonWidgetCmd procedure, "toggle" option} {
    list [catch {.b toggle} msg] $msg
} {1 {bad option "toggle": must be cget, configure, flash, or invoke}}
test button-4.45 {ButtonWidgetCmd procedure, "toggle" option} {
    list [catch {.r toggle} msg] $msg
} {1 {bad option "toggle": must be cget, configure, deselect, flash, invoke, or select}}
test button-4.46 {ButtonWidgetCmd procedure, "toggle" option} {
    list [catch {.c toggle foo} msg] $msg
} {1 {wrong # args: should be ".c toggle"}}
test button-4.47 {ButtonWidgetCmd procedure, "toggle" option} {
    set value bogus
    .c configure -command {} -variable value -onvalue sunshine -offvalue rain
    .c toggle
    set result $value
    .c toggle
    lappend result $value
    .c toggle
    lappend result $value
} {sunshine rain sunshine}
test button-4.48 {ButtonWidgetCmd procedure, "toggle" option} {
    .c configure -onvalue xyz -offvalue abc
    set value xyz
    trace variable value w bogusTrace
    set result [list [catch {.c toggle} msg] $msg $errorInfo $value]
    trace vdelete value w bogusTrace
    set result
} {1 {can't set "value": trace aborted} {can't set "value": trace aborted
    while executing
".c toggle"} abc}
test button-4.49 {ButtonWidgetCmd procedure, "toggle" option} {
    .c configure -onvalue xyz -offvalue abc
    set value abc
    trace variable value w bogusTrace
    set result [list [catch {.c toggle} msg] $msg $errorInfo $value]
    trace vdelete value w bogusTrace
    set result
} {1 {can't set "value": trace aborted} {can't set "value": trace aborted
    while executing
".c toggle"} xyz}
test button-4.50 {ButtonWidgetCmd procedure, "toggle" option} {
    catch {unset value}; set value(1) 1;
    set result [list [catch {.c toggle} msg] $msg $errorInfo]
    unset value;
    set result
} {1 {can't set "value": variable is array} {can't set "value": variable is array
    while executing
".c toggle"}}

test button-5.1 {DestroyButton procedure} testImageType {
    image create test image1
    button .b1 -image image1
    button .b2 -fg #ff0000 -text "Button 2"
    button .b3 -state active -text "Button 3"
    button .b4 -disabledforeground #0000ff -state disabled -text "Button 4"
    checkbutton .b5 -variable x -text "Checkbutton 5"
    set x 1
    pack .b1 .b2 .b3 .b4 .b5
    update
    deleteWindows
} {}

test button-6.1 {ConfigureButton - textvariable trace} {
    catch {destroy .b1}
    button .b1 -bd 4 -bg green
    catch {.b1 configure -bd 7 -bg green -fg bogus}
    list [catch {.b1 configure -bd 7 -bg red -fg bogus} msg] \
	    $msg [.b1 cget -bd] [.b1 cget -bg]
} {1 {unknown color name "bogus"} 4 green}
test button-6.2 {ConfigureButton - textvariable trace} {
    catch {destroy .b1}
    set x From-x
    set y From-y
    button .b1 -textvariable x
    .b1 configure -textvariable y
    set x New
    lindex [.b1 configure -text] 4
} {From-y}
test button-6.2 {ConfigureButton - variable traces} {
    catch {destroy .b1}
    catch {unset x}
    checkbutton .b1 -variable x
    set x 1
    set y 1
    .b1 configure -textvariable y
    set x 0
    .b1 toggle
    set y
} {1}
test button-6.3 {ConfigureButton - image handling} testImageType {
    catch {destroy .b1}
    eval image delete [image names]
    image create test image1
    image create test image2
    button .b1 -image image1
    image delete image1
    .b1 configure -image image2
    image names
} {image2}
test button-6.5 {ConfigureButton - default value for variable} {
    catch {destroy .b1}
    checkbutton .b1
    .b1 cget -variable
} {b1}
test button-6.6 {ConfigureButton - setting selected state from variable} {
    catch {destroy .b1}
    set x 0
    set y Shiny
    checkbutton .b1 -variable x
    .b1 configure -variable y -onvalue Shiny
    .b1 toggle
    set y
} 0
test button-6.7 {ConfigureButton - setting selected state from variable} {
    catch {destroy .b1}
    catch {unset x}
    checkbutton .b1 -variable x -offvalue Bogus
    set x
} Bogus
test button-6.8 {ConfigureButton - setting selected state from variable} {
    catch {destroy .b1}
    catch {unset x}
    radiobutton .b1 -variable x
    set x
} {}
test button-6.9 {ConfigureButton - error in setting variable} {
    catch {destroy .b1}
    catch {unset x}
    trace variable x w bogusTrace
    set result [list [catch {radiobutton .b1 -variable x} msg] $msg]
    trace vdelete x w bogusTrace
    set result
} {1 {can't set "x": trace aborted}}
test button-6.10 {ConfigureButton - bad image name} {
    catch {destroy .b1}
    list [catch {button .b1 -image bogus} msg] $msg
} {1 {image "bogus" doesn't exist}}
test button-6.11 {ConfigureButton - setting variable from current text value} {
    catch {destroy .b1}
    catch {unset x}
    button .b1 -textvariable x -text "Button 1"
    set x
} {Button 1}
test button-6.12 {ConfigureButton - using current value of variable} {
    catch {destroy .b1}
    set x Override
    button .b1 -textvariable x -text "Button 1"
    set x
} {Override}
test button-6.13 {ConfigureButton - variable handling} {
    catch {destroy .b1}
    catch {unset x}
    trace variable x w bogusTrace
    set result [list [catch {radiobutton .b1 -text foo -textvariable x} msg] \
	    $msg $x]
    trace vdelete x w bogusTrace
    set result
} {1 {can't set "x": trace aborted} foo}
test button-6.14 {ConfigureButton - -width option} {
    catch {destroy .b1}
    button .b1 -text "Button 1"
    list [catch {.b1 configure -width 1i} msg] $msg $errorInfo
} {1 {expected integer but got "1i"} {expected integer but got "1i"
    (processing -width option)
    invoked from within
".b1 configure -width 1i"}}
test button-6.15 {ConfigureButton - -height option} {
    catch {destroy .b1}
    button .b1 -text "Button 1"
    list [catch {.b1 configure -height 0.5c} msg] $msg $errorInfo
} {1 {expected integer but got "0.5c"} {expected integer but got "0.5c"
    (processing -height option)
    invoked from within
".b1 configure -height 0.5c"}}
test button-6.16 {ConfigureButton - -width option} {
    catch {destroy .b1}
    button .b1 -bitmap questhead
    list [catch {.b1 configure -width abc} msg] $msg $errorInfo
} {1 {bad screen distance "abc"} {bad screen distance "abc"
    (processing -width option)
    invoked from within
".b1 configure -width abc"}}
test button-6.17 {ConfigureButton - -height option} testImageType {
    catch {destroy .b1}
    eval image delete [image names]
    image create test image1
    button .b1 -image image1
    list [catch {.b1 configure -height 0.5x} msg] $msg $errorInfo
} {1 {bad screen distance "0.5x"} {bad screen distance "0.5x"
    (processing -height option)
    invoked from within
".b1 configure -height 0.5x"}}
test button-6.18 {ConfigureButton - computing geometry} {nonPortable fonts} {
    catch {destroy .b1}
    button .b1 -text "Sample text" -width 10 -height 2
    pack .b1
    set result "[winfo reqwidth .b1] [winfo reqheight .b1]"
    .b1 configure -bitmap questhead
    lappend result [winfo reqwidth .b1] [winfo reqheight .b1]
} {102 46 20 12}
test button-6.19 {ConfigureButton - computing geometry} {
    catch {destroy .b1}
    button .b1 -text "Button 1"
    set old [winfo reqwidth .b1]
    .b1 configure -text "Much longer text"
    set new [winfo reqwidth .b1]
    expr $old == $new
} {0}

test button-7.1 {ButtonEventProc procedure} {
    catch {destroy .b1}
    button .b1 -text "Test Button" -command {
	destroy .b1
	set x [list [winfo exists .b1] [info commands .b1]]
    }
    .b1 invoke
    set x
} {0 {}}
test button-7.2 {ButtonEventProc procedure} {
    deleteWindows
    button .b1 -bg #543210
    rename .b1 .b2
    set x {}
    lappend x [winfo children .]
    lappend x [.b2 cget -bg]
    destroy .b1
    lappend x [info command .b*] [winfo children .]
} {.b1 #543210 {} {}}

test button-8.1 {ButtonCmdDeletedProc procedure} {
    deleteWindows
    button .b1
    rename .b1 {}
    list [info command .b*] [winfo children .]
} {{} {}}

test button-9.1 {TkInvokeButton procedure} {
    catch {destroy .b1}
    set x 0
    checkbutton .b1 -variable x
    set result $x
    .b1 invoke
    lappend result $x
    .b1 invoke
    lappend result $x
} {0 1 0}
test button-9.2 {TkInvokeButton procedure} {
    catch {destroy .b1}
    set x 0
    checkbutton .b1 -variable x
    trace variable x w bogusTrace
    set result [list [catch {.b1 invoke} msg] $msg $x]
    trace vdelete x w bogusTrace
    set result
} {1 {can't set "x": trace aborted} 1}
test button-9.3 {TkInvokeButton procedure} {
    catch {destroy .b1}
    set x 1
    checkbutton .b1 -variable x
    trace variable x w bogusTrace
    set result [list [catch {.b1 invoke} msg] $msg $x]
    trace vdelete x w bogusTrace
    set result
} {1 {can't set "x": trace aborted} 0}
test button-9.4 {TkInvokeButton procedure} {
    catch {destroy .b1}
    set x 0
    radiobutton .b1 -variable x -value red
    set result $x
    .b1 invoke
    lappend result $x
    .b1 invoke
    lappend result $x
} {0 red red}
test button-9.5 {TkInvokeButton procedure} {
    catch {destroy .b1}
    radiobutton .b1 -variable x -value red
    set x green
    trace variable x w bogusTrace
    set result [list [catch {.b1 invoke} msg] $msg $errorInfo $x]
    trace vdelete x w bogusTrace
    set result
} {1 {can't set "x": trace aborted} {can't set "x": trace aborted
    while executing
".b1 invoke"} red}
test button-9.6 {TkInvokeButton procedure} {
    deleteWindows
    set result untouched
    button .b1 -command {set result invoked}
    list [catch {.b1 invoke} msg] $msg $result
} {0 invoked invoked}
test button-9.7 {TkInvokeButton procedure} {
    deleteWindows
    set result untouched
    set x 0
    checkbutton .b1 -variable x -command {set result "invoked $x"}
    list [catch {.b1 invoke} msg] $msg $result
} {0 {invoked 1} {invoked 1}}
test button-9.8 {TkInvokeButton procedure} {
    deleteWindows
    set result untouched
    set x 0
    radiobutton .b1 -variable x -value red -command {set result "invoked $x"}
    list [catch {.b1 invoke} msg] $msg $result
} {0 {invoked red} {invoked red}}

test button-10.1 {ButtonVarProc procedure} {
    deleteWindows
    set x 1
    checkbutton .b1 -variable x
    unset x
    set result [info exists x]
    .b1 toggle
    lappend result $x
    set x 0
    .b1 toggle
    lappend result $x
} {0 1 1}
test button-10.2 {ButtonVarProc procedure} {
    deleteWindows
    set x 0
    checkbutton .b1 -variable x
    set x 44
    .b1 toggle
    set x
} {1}
test button-10.3 {ButtonVarProc procedure} {
    deleteWindows
    set x 1
    checkbutton .b1 -variable x
    set x 44
    .b1 toggle
    set x
} {1}
test button-10.4 {ButtonVarProc procedure} {
    deleteWindows
    set x 0
    checkbutton .b1 -variable x
    set x 1
    .b1 toggle
    set x
} {0}
test button-10.5 {ButtonVarProc procedure} {
    deleteWindows
    set x 1
    checkbutton .b1 -variable x
    set x 1
    .b1 toggle
    set x
} {0}
test button-10.6 {ButtonVarProc procedure} {
    deleteWindows
    set x 0
    checkbutton .b1 -variable x
    set x 0
    .b1 toggle
    set x
} {1}
test button-10.7 {ButtonVarProc procedure} {
    deleteWindows
    set x 1
    checkbutton .b1 -variable x
    set x 0
    .b1 toggle
    set x
} {1}
test button-10.8 {ButtonVarProc procedure, can't read variable} {
    # This test does nothing but produce a core dump if there's a prbblem.
    deleteWindows
    catch {unset a}
    checkbutton .b1 -variable a
    unset a
    set a(32) 0
    unset a
} {}

test button-11.1 {ButtonTextVarProc procedure} {
    deleteWindows
    set x Label
    button .b1 -textvariable x
    unset x
    set result [list $x [lindex [.b1 configure -text] 4]]
    set x New
    lappend result [lindex [.b1 configure -text] 4]
} {Label Label New}
test button-11.2 {ButtonTextVarProc procedure} {
    deleteWindows
    # Windows buttons have a default min width, so we have to
    # set this to be longer to force the wider button.
    set x ExtraLongLabel
    button .b1 -textvariable x
    set old [winfo reqwidth .b1]
    set x New
    set new [winfo reqwidth .b1]
    list [lindex [.b1 configure -text] 4] [expr $old == $new]
} {New 0}

test button-12.1 {ButtonImageProc procedure} testImageType {
    deleteWindows
    eval image delete [image names]
    image create test image1
    label .b1 -image image1 -padx 0 -pady 0 -bd 0
    pack .b1
    set result "[winfo reqwidth .b1] [winfo reqheight .b1]"
    image1 changed 0 0 0 0 80 100
    lappend result [winfo reqwidth .b1] [winfo reqheight .b1]
} {30 15 80 100}

deleteWindows
set l [interp hidden]

test button-13.1 {button widget vs hidden commands} {
    catch {destroy .b}
    button .b -text hello
    interp hide {} .b
    destroy .b
    list [winfo children .] [interp hidden]
} [list {} $l]

deleteWindows

test button-14.1 {size behaviouor} {
    set res {}
    foreach class {label button radiobutton checkbutton} {
	eval destroy [winfo children .]

	$class .a -text Hej 
	$class .b -text Hej -width 10 -height 1
	$class .c -text "" -width 10 -height 1

	for {set t 0} {$t < 2} {incr t} {
	    set res2 {}
	    # With -width, width should not be affected by text change
	    lappend res2 [expr {[winfo reqwidth .b] == [winfo reqwidth .c]}]
	    # With -height, height should not be affected by text change
	    lappend res2 [expr {[winfo reqheight .b] == [winfo reqheight .c]}]
	    # A one line text should be as high as -height 1
	    lappend res2 [expr {[winfo reqheight .a] == [winfo reqheight .b]}]
	    lappend res $res2
	    
	    # Do the second round with another font
	    .a configure -font "Arial 20"
	    .b configure -font "Arial 20"
	    .c configure -font "Arial 20"
	}
    }
    set res
} {{1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1}}

deleteWindows

option clear

# cleanup
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: button.test,v 1.7.6.2 2000/09/26 16:09:07 spolk Exp $
d12 6
a17 17
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[lsearch [image types] test] < 0} {
    puts "This application hasn't been compiled with the \"test\""
    puts "image, so I can't run this test.  Are you sure you're using"
    puts "tktest instead of wish?"
    ::tcltest::cleanupTests
    return
}

foreach i [winfo children .] {
    destroy $i
}
wm geometry . {}
raise .
d33 3
a35 1
image create test image1
d58 1
d79 1
d82 1
d85 3
a87 1
    {-relief groove groove 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {1 1 1 1}}
d103 1
a103 1
	    test button-1.$i {configuration options} {
d109 1
a109 1
		test button-1.$i {configuration options} {
d115 1
a115 1
	    test button-1.$i {configuration options} {
d221 1
a221 1
} {36}
d406 1
a406 1
test button-5.1 {DestroyButton procedure} {
d416 1
a416 1
    eval destroy [winfo children .]
d446 1
a446 1
test button-6.3 {ConfigureButton - image handling} {
d539 1
a539 1
test button-6.17 {ConfigureButton - -height option} {
d576 1
a576 1
    eval destroy [winfo children .]
d587 1
a587 1
    eval destroy [winfo children .]
d643 1
a643 1
    eval destroy [winfo children .]
d649 1
a649 1
    eval destroy [winfo children .]
d656 1
a656 1
    eval destroy [winfo children .]
d664 1
a664 1
    eval destroy [winfo children .]
d676 1
a676 1
    eval destroy [winfo children .]
d684 1
a684 1
    eval destroy [winfo children .]
d692 1
a692 1
    eval destroy [winfo children .]
d700 1
a700 1
    eval destroy [winfo children .]
d708 1
a708 1
    eval destroy [winfo children .]
d716 1
a716 1
    eval destroy [winfo children .]
d725 1
a725 1
    eval destroy [winfo children .]
d734 1
a734 1
    eval destroy [winfo children .]
d743 4
a746 2
    eval destroy [winfo children .]
    set x Label
d754 2
a755 2
test button-12.1 {ButtonImageProc procedure} {
    eval destroy [winfo children .]
d765 1
a765 1
eval destroy [winfo children .]
d776 31
a806 1
eval destroy [winfo children .]
a812 1

@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d7 2
d10 5
a14 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: button.test,v 1.10 1999/01/26 04:11:34 jingham Exp $
d20 1
a23 4
if {[info procs test] != "test"} {
    source defs
}

d54 1
a54 1
	    {unknown color name "non-existent"}}
d56 2
a57 2
	    {unknown color name "non-existent"}}
    {-anchor nw nw bogus {bad anchor position "bogus": must be n, ne, e, se, s, sw, w, nw, or center}}
d59 43
a101 32
	    {unknown color name "non-existent"}}
    {-bg #ff0000 #ff0000 non-existent {unknown color name "non-existent"}}
    {-bd 4 4 badValue {bad screen distance "badValue"}}
    {-bitmap questhead questhead badValue {bitmap "badValue" not defined}}
    {-borderwidth 1.3 1 badValue {bad screen distance "badValue"}}
    {-command "set x" {set x} {} {}}
    {-cursor arrow arrow badValue {bad cursor spec "badValue"}}
    {-disabledforeground #00ff00 #00ff00 xyzzy {unknown color name "xyzzy"}}
    {-fg #110022 #110022 bogus {unknown color name "bogus"}}
    {-font {Helvetica 12} {Helvetica 12} {} {font "" doesn't exist}}
    {-foreground #110022 #110022 bogus {unknown color name "bogus"}}
    {-height 18 18 20.0 {expected integer but got "20.0"}}
    {-highlightbackground #112233 #112233 ugly {unknown color name "ugly"}}
    {-highlightcolor #110022 #110022 bogus {unknown color name "bogus"}}
    {-highlightthickness 18 18 badValue {bad screen distance "badValue"}}
    {-image image1 image1 bogus {image "bogus" doesn't exist}}
    {-indicatoron yes 1 no_way {expected boolean value but got "no_way"}}
    {-justify right right bogus {bad justification "bogus": must be left, right, or center}}
    {-offvalue lousy lousy {} {}}
    {-offvalue fantastic fantastic {} {}}
    {-padx 12 12 420x {bad screen distance "420x"}}
    {-pady 12 12 420x {bad screen distance "420x"}}
    {-relief groove groove 1.5 {bad relief type "1.5": must be flat, groove, raised, ridge, solid, or sunken}}
    {-selectcolor #110022 #110022 bogus {unknown color name "bogus"}}
    {-selectimage image1 image1 bogus {image "bogus" doesn't exist}}
    {-state normal normal bogus {bad state value "bogus": must be normal, active, or disabled}}
    {-takefocus "any string" "any string" {} {}}
    {-text "Sample text" {Sample text} {} {}}
    {-textvariable i i {} {}}
    {-underline 5 5 3p {expected integer but got "3p"}}
    {-width 402 402 3p {expected integer but got "3p"}}
    {-wraplength 100 100 6x {bad screen distance "6x"}}
d104 19
a122 9
    test button-1.$i {configuration options} {
	.c configure $name [lindex $test 1]
	lindex [.c configure $name] 4
    } [lindex $test 2]
    incr i
    if {[lindex $test 3] != ""} {
	test button-1.$i {configuration options} {
	    list [catch {.c configure $name [lindex $test 3]} msg] $msg
	} [list 1 [lindex $test 4]]
a123 1
    .c configure $name [lindex [.c configure $name] 3]
a128 25
incr i
# the following tests only work on buttons, not checkbuttons
test button-1.$i {configuration options} {
    .b configure -default active
    lindex [.b configure -default] 4
} active
incr i
test button-1.$i {configuration options} {
    .b configure -default normal
    lindex [.b configure -default] 4
} normal
incr i
test button-1.$i {configuration options} {
    .b configure -default disabled
    lindex [.b configure -default] 4
} disabled
incr i
test button-1.$i {configuration options} {
    .b configure -default active
    lindex [.b configure -default] 3
} disabled
incr i
test button-1.$i {configuration options} {
    list [catch {.b configure -default no_way} msg] $msg
} {1 {bad -default value "no_way": must be normal, active, or disabled}}
d130 1
a130 33
set i 1
foreach check {
    {-activebackground 1 0 0 0}
    {-activeforeground 1 0 0 0}
    {-anchor 0 0 0 0}
    {-background 0 0 0 0}
    {-bd 0 0 0 0}
    {-bg 0 0 0 0}
    {-bitmap 0 0 0 0}
    {-borderwidth 0 0 0 0}
    {-command 1 0 0 0}
    {-cursor 0 0 0 0}
    {-default 1 0 1 1}
    {-disabledforeground 1 0 0 0}
    {-fg 0 0 0 0}
    {-font 0 0 0 0}
    {-foreground 0 0 0 0}
    {-height 0 0 0 0}
    {-image 0 0 0 0}
    {-indicatoron 1 1 0 0}
    {-offvalue 1 1 0 1}
    {-onvalue 1 1 0 1}
    {-padx 0 0 0 0}
    {-pady 0 0 0 0}
    {-relief 0 0 0 0}
    {-selectcolor 1 1 0 0}
    {-selectimage 1 1 0 0}
    {-state 1 0 0 0}
    {-text 0 0 0 0}
    {-textvariable 0 0 0 0}
    {-value 1 1 1 0}
    {-variable 1 1 0 0}
    {-width 0 0 0 0}
a131 19
    test button-2.$i {label-specific options} "
	catch {.l configure [lindex $check 0]}
    " [lindex $check 1]
    incr i
    test button-2.$i {button-specific options} "
	catch {.b configure [lindex $check 0]}
    " [lindex $check 2]
    incr i
    test button-2.$i {checkbutton-specific options} "
	catch {.c configure [lindex $check 0]}
    " [lindex $check 3]
    incr i
    test button-2.$i {radiobutton-specific options} "
	catch {.r configure [lindex $check 0]}
    " [lindex $check 4]
    incr i
}

test button-3.1 {ButtonCreate procedure} {
d134 1
a134 1
test button-3.2 {ButtonCreate procedure} {
d139 1
a139 1
test button-3.3 {ButtonCreate procedure} {
d144 1
a144 1
test button-3.4 {ButtonCreate procedure} {
d149 1
a149 1
test button-3.5 {ButtonCreate procedure} {
d155 1
a155 1
test button-3.6 {ButtonCreate procedure} {
d161 1
a161 1
test button-3.7 {ButtonCreate procedure} {
d164 9
a172 1
test button-3.8 {ButtonCreate procedure} {
d176 6
d183 1
a183 1
test button-4.1 {ButtonWidgetCmd procedure} {
d186 1
a186 1
test button-4.2 {ButtonWidgetCmd procedure, "cget" option} {
d188 5
a192 2
} {1 {bad option "c": must be cget, configure, flash, or invoke}}
test button-4.3 {ButtonWidgetCmd procedure, "cget" option} {
d195 1
a195 1
test button-4.4 {ButtonWidgetCmd procedure, "cget" option} {
d198 1
a198 1
test button-4.5 {ButtonWidgetCmd procedure, "cget" option} {
a201 3
test button-4.6 {ButtonWidgetCmd procedure, "cget" option} {
    list [catch {.l cget -disabledforeground} msg] $msg
} {1 {unknown option "-disabledforeground"}}
d203 3
d208 1
a208 1
test button-4.8 {ButtonWidgetCmd procedure, "cget" option} {
d211 1
a211 1
test button-4.9 {ButtonWidgetCmd procedure, "cget" option} {
d214 1
a214 1
test button-4.10 {ButtonWidgetCmd procedure, "cget" option} {
d217 1
a217 1
test button-4.11 {ButtonWidgetCmd procedure, "cget" option} {
d220 1
a220 1
test button-4.12 {ButtonWidgetCmd procedure, "cget" option} {
d223 1
a223 1
test button-4.13 {ButtonWidgetCmd procedure, "configure" option} {
d226 1
a226 1
test button-4.14 {ButtonWidgetCmd procedure, "configure" option} {
d229 1
a229 1
test button-4.15 {ButtonWidgetCmd procedure, "configure" option} {
d232 1
a232 1
test button-4.16 {ButtonWidgetCmd procedure, "configure" option} {
d239 1
a239 1
test button-4.17 {ButtonWidgetCmd procedure, "deselect" option} {
d242 1
a242 1
test button-4.18 {ButtonWidgetCmd procedure, "deselect" option} {
d245 1
a245 1
test button-4.19 {ButtonWidgetCmd procedure, "deselect" option} {
d248 1
a248 1
test button-4.20 {ButtonWidgetCmd procedure, "deselect" option} {
d253 1
a253 1
test button-4.21 {ButtonWidgetCmd procedure, "deselect" option} {
d258 1
a258 1
test button-4.22 {ButtonWidgetCmd procedure, "deselect" option} {
d263 1
a263 1
test button-4.23 {ButtonWidgetCmd procedure, "deselect" option} {
d272 1
a272 1
test button-4.24 {ButtonWidgetCmd procedure, "deselect" option} {
d281 1
a281 1
test button-4.25 {ButtonWidgetCmd procedure, "flash" option} {
d284 1
a284 1
test button-4.26 {ButtonWidgetCmd procedure, "flash" option} {
d287 1
a287 1
test button-4.27 {ButtonWidgetCmd procedure, "flash" option} {
d290 1
a290 1
test button-4.28 {ButtonWidgetCmd procedure, "flash" option} {
d293 1
a293 1
test button-4.29 {ButtonWidgetCmd procedure, "flash" option} {
d296 1
a296 1
test button-4.30 {ButtonWidgetCmd procedure, "invoke" option} {
d299 1
a299 1
test button-4.31 {ButtonWidgetCmd procedure, "invoke" option} {
d302 1
a302 1
test button-4.32 {ButtonWidgetCmd procedure, "invoke" option} {
d308 1
a308 1
test button-4.33 {ButtonWidgetCmd procedure, "invoke" option} {
d314 1
a314 1
test button-4.34 {ButtonWidgetCmd procedure, "invoke" option} {
d322 1
a322 1
test button-4.35 {ButtonWidgetCmd procedure, "invoke" option} {
d329 1
a329 1
test button-4.36 {ButtonWidgetCmd procedure, "select" option} {
d332 1
a332 1
test button-4.37 {ButtonWidgetCmd procedure, "select" option} {
d335 1
a335 1
test button-4.38 {ButtonWidgetCmd procedure, "select" option} {
d338 1
a338 1
test button-4.39 {ButtonWidgetCmd procedure, "select" option} {
d344 1
a344 1
test button-4.40 {ButtonWidgetCmd procedure, "select" option} {
d350 1
a350 1
test button-4.41 {ButtonWidgetCmd procedure, "select" option} {
d359 1
a359 1
test button-4.42 {ButtonWidgetCmd procedure, "toggle" option} {
d362 1
a362 1
test button-4.43 {ButtonWidgetCmd procedure, "toggle" option} {
d365 1
a365 1
test button-4.44 {ButtonWidgetCmd procedure, "toggle" option} {
d368 1
a368 1
test button-4.45 {ButtonWidgetCmd procedure, "toggle" option} {
d371 1
a371 1
test button-4.46 {ButtonWidgetCmd procedure, "toggle" option} {
d381 1
a381 1
test button-4.47 {ButtonWidgetCmd procedure, "toggle" option} {
d391 1
a391 1
test button-4.48 {ButtonWidgetCmd procedure, "toggle" option} {
a400 3
test button-4.49 {ButtonWidgetCmd procedure} {
    list [catch {.c bad_option} msg] $msg
} {1 {bad option "bad_option": must be cget, configure, deselect, flash, invoke, select, or toggle}}
d423 8
a430 1
test button-6.1 {ConfigureButton procedure} {
d439 1
a439 1
test button-6.2 {ConfigureButton procedure} {
d450 1
a450 1
test button-6.3 {ConfigureButton procedure} {
d460 1
a460 7
test button-6.4 {ConfigureButton procedure} {
    catch {destroy .b1}
    button .b1 -text "Test" -state disabled
    list [catch {.b1 configure -state bogus} msg] $msg \
	    [lindex [.b1 configure -state] 4]
} {1 {bad state value "bogus": must be normal, active, or disabled} normal}
test button-6.5 {ConfigureButton procedure} {
d465 1
a465 1
test button-6.6 {ConfigureButton procedure} {
d474 1
a474 1
test button-6.7 {ConfigureButton procedure} {
d480 1
a480 1
test button-6.8 {ConfigureButton procedure} {
d486 1
a486 1
test button-6.9 {ConfigureButton procedure} {
d494 1
a494 1
test button-6.10 {ConfigureButton procedure} {
d498 1
a498 1
test button-6.11 {ConfigureButton procedure} {
d504 1
a504 1
test button-6.12 {ConfigureButton procedure} {
d510 1
a510 1
test button-6.13 {ConfigureButton procedure} {
d519 1
a519 1
test button-6.14 {ConfigureButton procedure} {
d527 1
a527 1
test button-6.15 {ConfigureButton procedure} {
d535 1
a535 1
test button-6.16 {ConfigureButton procedure} {
d543 1
a543 1
test button-6.17 {ConfigureButton procedure} {
d553 1
a553 1
test button-6.18 {ConfigureButton procedure} {nonPortable fonts} {
d561 1
a561 1
test button-6.19 {ConfigureButton procedure} {
d781 4
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a6 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d8 4
a11 5
# RCS: @@(#) $Id: button.test,v 1.7.6.2 2000/09/26 16:09:07 spolk Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
a16 1
    ::tcltest::cleanupTests
d20 4
d54 1
a54 1
	    {unknown color name "non-existent"} {1 1 1 1}}
d56 2
a57 2
	    {unknown color name "non-existent"} {1 1 1 1}}
    {-anchor nw nw bogus {bad anchor "bogus": must be n, ne, e, se, s, sw, w, nw, or center} {1 1 1 1}}
d59 32
a90 43
	    {unknown color name "non-existent"} {1 1 1 1}}
    {-bd 4 4 badValue {bad screen distance "badValue"} {1 1 1 1}}
    {-bg #ff0000 #ff0000 non-existent {unknown color name "non-existent"}
	    {1 1 1 1}}
    {-bitmap questhead questhead badValue {bitmap "badValue" not defined}
	    {1 1 1 1}}
    {-borderwidth 1.3 1.3 badValue {bad screen distance "badValue"} {1 1 1 1}}
    {-command "set x" {set x} {} {} {0 1 1 1}}
    {-cursor arrow arrow badValue {bad cursor spec "badValue"} {1 1 1 1}}
    {-default active active huh?
	    {bad default "huh?": must be active, disabled, or normal}
	    {0 1 0 0}}
    {-disabledforeground #00ff00 #00ff00 xyzzy {unknown color name "xyzzy"}
	    {1 1 1 1}}
    {-fg #110022 #110022 bogus {unknown color name "bogus"} {1 1 1 1}}
    {-font {Helvetica 12} {Helvetica 12} {} {font "" doesn't exist} {1 1 1 1}}
    {-foreground #110022 #110022 bogus {unknown color name "bogus"} {1 1 1 1}}
    {-height 18 18 20.0 {expected integer but got "20.0"} {1 1 1 1}}
    {-highlightbackground #112233 #112233 ugly {unknown color name "ugly"}
	    {1 1 1 1}}
    {-highlightcolor #110022 #110022 bogus {unknown color name "bogus"}
	    {1 1 1 1}}
    {-highlightthickness 6m 6m badValue {bad screen distance "badValue"}
	    {1 1 1 1}}
    {-image image1 image1 bogus {image "bogus" doesn't exist} {1 1 1 1}}
    {-indicatoron yes 1 no_way {expected boolean value but got "no_way"}
	    {0 0 1 1}}
    {-justify right right bogus {bad justification "bogus": must be left, right, or center} {1 1 1 1}}
    {-offvalue lousy lousy {} {} {0 0 1 0}}
    {-offvalue fantastic fantastic {} {} {0 0 1 0}}
    {-padx 12m 12m 420x {bad screen distance "420x"} {1 1 1 1}}
    {-pady 12m 12m 420x {bad screen distance "420x"} {1 1 1 1}}
    {-relief groove groove 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {1 1 1 1}}
    {-selectcolor #110022 #110022 bogus {unknown color name "bogus"} {0 0 1 1}}
    {-selectimage image1 image1 bogus {image "bogus" doesn't exist} {0 0 1 1}}
    {-state normal normal bogus {bad state "bogus": must be active, disabled, or normal} {1 1 1 1}}
    {-takefocus "any string" "any string" {} {} {1 1 1 1}}
    {-text "Sample text" {Sample text} {} {} {1 1 1 1}}
    {-textvariable i i {} {} {1 1 1 1}}
    {-underline 5 5 3p {expected integer but got "3p"} {1 1 1 1}}
    {-value anyString anyString {} {} {0 0 0 1}}
    {-width 402 402 3p {expected integer but got "3p"} {1 1 1 1}}
    {-wraplength 100 100 6x {bad screen distance "6x"} {1 1 1 1}}
d93 9
a101 19
    set classes [lindex $test 5]
    foreach w {.l .b .c .r} hasOption [lindex $test 5] {
	if $hasOption {
	    test button-1.$i {configuration options} {
		$w configure $name [lindex $test 1]
		lindex [$w configure $name] 4
	    } [lindex $test 2]
	    incr i
	    if {[lindex $test 3] != ""} {
		test button-1.$i {configuration options} {
		    list [catch {$w configure $name [lindex $test 3]} msg] $msg
		} [list 1 [lindex $test 4]]
	    }
	    $w configure $name [lindex [$w configure $name] 3]
	} else {
	    test button-1.$i {configuration options} {
		list [catch {$w configure $name [lindex $test 1]} msg] $msg
	    } "1 {unknown option \"$name\"}"
	}
d103 1
d109 25
d135 33
a167 1
test button-3.1 {ButtonCreate - not enough cd ../unix
d169 19
d190 1
a190 1
test button-3.2 {ButtonCreate procedure - setting label class} {
d195 1
a195 1
test button-3.3 {ButtonCreate - setting button class} {
d200 1
a200 1
test button-3.4 {ButtonCreate - setting checkbutton class} {
d205 1
a205 1
test button-3.5 {ButtonCreate - setting radiobutton class} {
d211 1
a211 1
test button-3.6 {ButtonCreate - setting class} {
d217 1
a217 1
test button-3.7 {ButtonCreate - bad window name} {
d220 1
a220 9
test button-3.8 {ButtonCreate procedure - error in default option value} {
    catch {destroy .funny}
    option add *funny.background bogus
    list [catch {button .funny} msg] $msg $errorInfo
} {1 {unknown color name "bogus"} {unknown color name "bogus"
    (database entry for "-background" in widget ".funny")
    invoked from within
"button .funny"}}
test button-3.9 {ButtonCreate procedure - option error} {
a223 6
test button-3.10 {ButtonCreate procedure - return value} {
    catch {destroy .abcd}
    set x [button .abcd]
    destroy .abc
    set x
} {.abcd}
d225 1
a225 1
test button-4.1 {ButtonWidgetCmd - too few arguments} {
d228 1
a228 1
test button-4.2 {ButtonWidgetCmd - bad option name} {
d230 2
a231 5
} {1 {ambiguous option "c": must be cget, configure, flash, or invoke}}
test button-4.3 {ButtonWidgetCmd - bad option name} {
    list [catch {.b bogus} msg] $msg
} {1 {bad option "bogus": must be cget, configure, flash, or invoke}}
test button-4.4 {ButtonWidgetCmd procedure, "cget" option} {
d234 1
a234 1
test button-4.5 {ButtonWidgetCmd procedure, "cget" option} {
d237 1
a237 1
test button-4.6 {ButtonWidgetCmd procedure, "cget" option} {
d241 3
d245 1
a245 1
    catch {.l cget -disabledforeground}
a247 3
    catch {.b cget -disabledforeground}
} {0}
test button-4.9 {ButtonWidgetCmd procedure, "cget" option} {
d250 1
a250 1
test button-4.10 {ButtonWidgetCmd procedure, "cget" option} {
d253 1
a253 1
test button-4.11 {ButtonWidgetCmd procedure, "cget" option} {
d256 1
a256 1
test button-4.12 {ButtonWidgetCmd procedure, "cget" option} {
d259 1
a259 1
test button-4.13 {ButtonWidgetCmd procedure, "cget" option} {
d262 1
a262 1
test button-4.14 {ButtonWidgetCmd procedure, "configure" option} {
d265 1
a265 1
test button-4.15 {ButtonWidgetCmd procedure, "configure" option} {
d268 1
a268 1
test button-4.16 {ButtonWidgetCmd procedure, "configure" option} {
d271 1
a271 1
test button-4.17 {ButtonWidgetCmd procedure, "configure" option} {
d278 1
a278 1
test button-4.18 {ButtonWidgetCmd procedure, "deselect" option} {
d281 1
a281 1
test button-4.19 {ButtonWidgetCmd procedure, "deselect" option} {
d284 1
a284 1
test button-4.20 {ButtonWidgetCmd procedure, "deselect" option} {
d287 1
a287 1
test button-4.21 {ButtonWidgetCmd procedure, "deselect" option} {
d292 1
a292 1
test button-4.22 {ButtonWidgetCmd procedure, "deselect" option} {
d297 1
a297 1
test button-4.23 {ButtonWidgetCmd procedure, "deselect" option} {
d302 1
a302 1
test button-4.24 {ButtonWidgetCmd procedure, "deselect" option} {
d311 1
a311 1
test button-4.25 {ButtonWidgetCmd procedure, "deselect" option} {
d320 1
a320 1
test button-4.26 {ButtonWidgetCmd procedure, "flash" option} {
d323 1
a323 1
test button-4.27 {ButtonWidgetCmd procedure, "flash" option} {
d326 1
a326 1
test button-4.28 {ButtonWidgetCmd procedure, "flash" option} {
d329 1
a329 1
test button-4.29 {ButtonWidgetCmd procedure, "flash" option} {
d332 1
a332 1
test button-4.30 {ButtonWidgetCmd procedure, "flash" option} {
d335 1
a335 1
test button-4.31 {ButtonWidgetCmd procedure, "invoke" option} {
d338 1
a338 1
test button-4.32 {ButtonWidgetCmd procedure, "invoke" option} {
d341 1
a341 1
test button-4.33 {ButtonWidgetCmd procedure, "invoke" option} {
d347 1
a347 1
test button-4.34 {ButtonWidgetCmd procedure, "invoke" option} {
d353 1
a353 1
test button-4.35 {ButtonWidgetCmd procedure, "invoke" option} {
d361 1
a361 1
test button-4.36 {ButtonWidgetCmd procedure, "invoke" option} {
d368 1
a368 1
test button-4.37 {ButtonWidgetCmd procedure, "select" option} {
d371 1
a371 1
test button-4.38 {ButtonWidgetCmd procedure, "select" option} {
d374 1
a374 1
test button-4.39 {ButtonWidgetCmd procedure, "select" option} {
d377 1
a377 1
test button-4.40 {ButtonWidgetCmd procedure, "select" option} {
d383 1
a383 1
test button-4.41 {ButtonWidgetCmd procedure, "select" option} {
d389 1
a389 1
test button-4.42 {ButtonWidgetCmd procedure, "select" option} {
d398 1
a398 1
test button-4.43 {ButtonWidgetCmd procedure, "toggle" option} {
d401 1
a401 1
test button-4.44 {ButtonWidgetCmd procedure, "toggle" option} {
d404 1
a404 1
test button-4.45 {ButtonWidgetCmd procedure, "toggle" option} {
d407 1
a407 1
test button-4.46 {ButtonWidgetCmd procedure, "toggle" option} {
d410 1
a410 1
test button-4.47 {ButtonWidgetCmd procedure, "toggle" option} {
d420 1
a420 1
test button-4.48 {ButtonWidgetCmd procedure, "toggle" option} {
d430 1
a430 1
test button-4.49 {ButtonWidgetCmd procedure, "toggle" option} {
d440 3
d465 1
a465 8
test button-6.1 {ConfigureButton - textvariable trace} {
    catch {destroy .b1}
    button .b1 -bd 4 -bg green
    catch {.b1 configure -bd 7 -bg green -fg bogus}
    list [catch {.b1 configure -bd 7 -bg red -fg bogus} msg] \
	    $msg [.b1 cget -bd] [.b1 cget -bg]
} {1 {unknown color name "bogus"} 4 green}
test button-6.2 {ConfigureButton - textvariable trace} {
d474 1
a474 1
test button-6.2 {ConfigureButton - variable traces} {
d485 1
a485 1
test button-6.3 {ConfigureButton - image handling} {
d495 7
a501 1
test button-6.5 {ConfigureButton - default value for variable} {
d506 1
a506 1
test button-6.6 {ConfigureButton - setting selected state from variable} {
d515 1
a515 1
test button-6.7 {ConfigureButton - setting selected state from variable} {
d521 1
a521 1
test button-6.8 {ConfigureButton - setting selected state from variable} {
d527 1
a527 1
test button-6.9 {ConfigureButton - error in setting variable} {
d535 1
a535 1
test button-6.10 {ConfigureButton - bad image name} {
d539 1
a539 1
test button-6.11 {ConfigureButton - setting variable from current text value} {
d545 1
a545 1
test button-6.12 {ConfigureButton - using current value of variable} {
d551 1
a551 1
test button-6.13 {ConfigureButton - variable handling} {
d560 1
a560 1
test button-6.14 {ConfigureButton - -width option} {
d568 1
a568 1
test button-6.15 {ConfigureButton - -height option} {
d576 1
a576 1
test button-6.16 {ConfigureButton - -width option} {
d584 1
a584 1
test button-6.17 {ConfigureButton - -height option} {
d594 1
a594 1
test button-6.18 {ConfigureButton - computing geometry} {nonPortable fonts} {
d602 1
a602 1
test button-6.19 {ConfigureButton - computing geometry} {
a821 4

# cleanup
::tcltest::cleanupTests
return
@


1.1.1.3
log
@import tk 8.4.0
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: button.test,v 1.13 2002/09/02 23:32:35 hobbs Exp $
d12 17
a28 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d44 1
a44 3
if {[testConstraint testImageType]} {
    image create test image1
}
a66 1
    {-compound left left bogus {bad compound "bogus": must be bottom, center, left, none, right, or top} {1 1 1 1}}
a86 1
    {-offrelief flat flat 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {0 0 1 1}}
a88 1
    {-overrelief "" "" 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {0 1 1 1}}
d91 1
a91 3
    {-repeatdelay 100 100 foo {expected integer but got "foo"} {0 1 0 0}}
    {-repeatinterval 100 100 foo {expected integer but got "foo"} {0 1 0 0}}
    {-relief flat flat 1.5 {bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken} {1 1 1 1}}
d107 1
a107 1
	    test button-1.$i {configuration options} testImageType {
d113 1
a113 1
		test button-1.$i {configuration options} testImageType {
d119 1
a119 1
	    test button-1.$i {configuration options} testImageType {
d225 1
a225 1
} {39}
d410 1
a410 1
test button-5.1 {DestroyButton procedure} testImageType {
d420 1
a420 1
    deleteWindows
d450 1
a450 1
test button-6.3 {ConfigureButton - image handling} testImageType {
d543 1
a543 1
test button-6.17 {ConfigureButton - -height option} testImageType {
d580 1
a580 1
    deleteWindows
d591 1
a591 1
    deleteWindows
d647 1
a647 1
    deleteWindows
d653 1
a653 1
    deleteWindows
d660 1
a660 1
    deleteWindows
d668 1
a668 1
    deleteWindows
d680 1
a680 1
    deleteWindows
d688 1
a688 1
    deleteWindows
d696 1
a696 1
    deleteWindows
d704 1
a704 1
    deleteWindows
d712 1
a712 1
    deleteWindows
d720 1
a720 1
    deleteWindows
d729 1
a729 1
    deleteWindows
d738 1
a738 1
    deleteWindows
d747 2
a748 4
    deleteWindows
    # Windows buttons have a default min width, so we have to
    # set this to be longer to force the wider button.
    set x ExtraLongLabel
d756 2
a757 2
test button-12.1 {ButtonImageProc procedure} testImageType {
    deleteWindows
d767 1
a767 1
deleteWindows
d778 1
a778 31
deleteWindows

test button-14.1 {size behaviouor} {
    set res {}
    foreach class {label button radiobutton checkbutton} {
	eval destroy [winfo children .]

	$class .a -text Hej 
	$class .b -text Hej -width 10 -height 1
	$class .c -text "" -width 10 -height 1

	for {set t 0} {$t < 2} {incr t} {
	    set res2 {}
	    # With -width, width should not be affected by text change
	    lappend res2 [expr {[winfo reqwidth .b] == [winfo reqwidth .c]}]
	    # With -height, height should not be affected by text change
	    lappend res2 [expr {[winfo reqheight .b] == [winfo reqheight .c]}]
	    # A one line text should be as high as -height 1
	    lappend res2 [expr {[winfo reqheight .a] == [winfo reqheight .b]}]
	    lappend res $res2
	    
	    # Do the second round with another font
	    .a configure -font "Arial 20"
	    .b configure -font "Arial 20"
	    .c configure -font "Arial 20"
	}
    }
    set res
} {{1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1} {1 1 1}}

deleteWindows
d785 1
@


