head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.10;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the procedures in tkUnixFont.c. 
# It is organized in the standard fashion for Tcl tests.
#
# Many of these tests are visually oriented and cannot be checked
# programmatically (such as "does an underlined font appear to be
# underlined?"); these tests attempt to exercise the code in question,
# but there are no results that can be checked.  Some tests depend on the
# fonts having or not having certain properties, which may not be valid
# at all sites.  
#
# Copyright (c) 1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: unixFont.test,v 1.7 2002/07/13 20:28:35 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

testConstraint hasArial 1
testConstraint hasCourierNew 1
testConstraint hasTimesNew 1
set xlsf [auto_execok xlsfonts]
if {[llength $xlsf]} {
    foreach {constraint font} {
	hasArial	arial
	hasCourierNew	"courier new"
	hasTimesNew	"times new roman"
    } {
	if {![catch {eval exec $xlsf [list *-$font-*]} res]
		&& ![string match *unmatched* $res]} {
	    # Newer Unix systems have more default fonts installed, 
	    # so we can't rely on fallbacks for fonts to need to
	    # fall back on anything.
	    testConstraint $constraint 0
	}
    }
}

catch {destroy .b}
toplevel .b
wm geom .b +0+0
update idletasks

# Font should be fixed width and have chars missing below char 32, so can
# test control char expansion and missing character code.

set courier {Courier -10}
set cx [font measure $courier 0]

label .b.l -padx 0 -pady 0 -bd 0 -highlightthickness 0 -justify left -text "0" -font fixed
pack .b.l
canvas .b.c -closeenough 0

set t [.b.c create text 0 0 -anchor nw -just left -font $courier]
pack .b.c
update

set ax [winfo reqwidth .b.l]
set ay [winfo reqheight .b.l]
proc getsize {} {
    update
    return "[winfo reqwidth .b.l] [winfo reqheight .b.l]"
}

test unixfont-1.1 {TkpGetNativeFont procedure: not native} {unix noExceed} {
    list [catch {font measure {} xyz} msg] $msg
} {1 {font "" doesn't exist}}
test unixfont-1.2 {TkpGetNativeFont procedure: native} unix {
    font measure fixed 0
} {6}

test unixfont-2.1 {TkpGetFontFromAttributes procedure: no family} unix {
    font actual {-size 10}
    set x {}
} {}
test unixfont-2.2 {TkpGetFontFromAttributes procedure: Times relatives} \
	{unix noExceed hasTimesNew} {
    set x {}
    lappend x [lindex [font actual {-family "Times New Roman"}] 1]
    lappend x [lindex [font actual {-family "New York"}] 1]
    lappend x [lindex [font actual {-family "Times"}] 1]
} {times times times}
test unixfont-2.3 {TkpGetFontFromAttributes procedure: Courier relatives} \
	{unix noExceed hasCourierNew} {
    set x {}
    lappend x [lindex [font actual {-family "Courier New"}] 1]
    lappend x [lindex [font actual {-family "Monaco"}] 1]
    lappend x [lindex [font actual {-family "Courier"}] 1]
} {courier courier courier}
test unixfont-2.4 {TkpGetFontFromAttributes procedure: Helvetica relatives} \
	{unix noExceed hasArial} {
    set x {}
    lappend x [lindex [font actual {-family "Arial"}] 1]
    lappend x [lindex [font actual {-family "Geneva"}] 1]
    lappend x [lindex [font actual {-family "Helvetica"}] 1]
} {helvetica helvetica helvetica}
test unixfont-2.5 {TkpGetFontFromAttributes procedure: fallback} unix {
    font actual {-xyz-xyz-*-*-*-*-*-*-*-*-*-*-*-*}
    set x {}
} {}
test unixfont-2.6 {TkpGetFontFromAttributes: fallback to fixed family} unix {
    lindex [font actual {-family fixed -size 10}] 1
} {fixed}
test unixfont-2.7 {TkpGetFontFromAttributes: fixed family not available!} unix {
    # no test available
} {}
test unixfont-2.8 {TkpGetFontFromAttributes: loop over returned font names} unix {
    lindex [font actual {-family fixed -size 31}] 1
} {fixed}
test unixfont-2.9 {TkpGetFontFromAttributes: reject adobe courier if possible} {unix noExceed} {
    lindex [font actual {-family courier}] 1
} {courier}
test unixfont-2.10 {TkpGetFontFromAttributes: scalable font found} unix {
    lindex [font actual {-family courier -size 37}] 3
} {37}
test unixfont-2.11 {TkpGetFontFromAttributes: font cannot be loaded} unix {
    # On Linux, XListFonts() was returning names for fonts that do not
    # actually exist, causing the subsequent XLoadQueryFont() to fail
    # unexpectedly.  Now falls back to another font if that happens.

    font actual {-size 14}
    set x {}
} {}    

test unixfont-3.1 {TkpDeleteFont procedure} unix {
    font actual {-family xyz}
    set x {}
} {}

test unixfont-4.1 {TkpGetFontFamilies procedure} unix {
    font families
    set x {}
} {}

test unixfont-5.1 {Tk_MeasureChars procedure: no chars to be measured} unix {
    .b.l config -text "000000" -wrap [expr $ax*3]
    .b.l config -wrap 0
} {}
test unixfont-5.2 {Tk_MeasureChars procedure: no right margin} unix {
    .b.l config -text "000000"
} {}
test unixfont-5.3 {Tk_MeasureChars procedure: loop over chars} unix {
    .b.l config -text "0"
    .b.l config -text "\377"
    .b.l config -text "0\3770\377"
    .b.l config -text "000000000000000"
} {}
.b.l config -wrap [expr $ax*10]
test unixfont-5.4 {Tk_MeasureChars procedure: reached right edge} unix {
    .b.l config -text "0000000000000"
    getsize
} "[expr $ax*10] [expr $ay*2]"
test unixfont-5.5 {Tk_MeasureChars procedure: ran out of chars} unix {
    .b.l config -text "000000"
    getsize
} "[expr $ax*6] $ay"
test unixfont-5.6 {Tk_MeasureChars procedure: find last word} unix {
    .b.l config -text "000000 00000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test unixfont-5.7 {Tk_MeasureChars procedure: already saw space in line} unix {
    .b.l config -text "000000     00000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test unixfont-5.8 {Tk_MeasureChars procedure: internal spaces significant} unix {
    .b.l config -text "00  000     00000"
    getsize
} "[expr $ax*7] [expr $ay*2]"
test unixfont-5.9 {Tk_MeasureChars procedure: TK_PARTIAL_OK} unix {
    .b.c dchars $t 0 end
    .b.c insert $t 0 "0000"
    .b.c index $t @@[expr int($ax*2.5)],1
} {2}
test unixfont-5.10 {Tk_MeasureChars procedure: TK_AT_LEAST_ONE} unix {
    .b.l config -text "000000000000"
    getsize
} "[expr $ax*10] [expr $ay*2]"
test unixfont-5.11 {Tk_MeasureChars: TK_AT_LEAST_ONE + not even one char fit!} unix {
    set a [.b.l cget -wrap]
    .b.l config -text "000000" -wrap 1
    set x [getsize]
    .b.l config -wrap $a
    set x
} "$ax [expr $ay*6]"
test unixfont-5.12 {Tk_MeasureChars procedure: include eol spaces} unix {
    .b.l config -text "000   \n000"
    getsize
} "[expr $ax*6] [expr $ay*2]"

test unixfont-6.1 {Tk_DrawChars procedure: loop test} unix {
    .b.l config -text "a"
    update
} {}
test unixfont-6.2 {Tk_DrawChars procedure: loop test} unix {
    .b.l config -text "abcd"
    update
} {}
test unixfont-6.3 {Tk_DrawChars procedure: special char} unix {
    .b.l config -text "\001"
    update
} {}
test unixfont-6.4 {Tk_DrawChars procedure: normal then special} unix {
    .b.l config -text "ab\001"
    update
} {}
test unixfont-6.5 {Tk_DrawChars procedure: ends with special} unix {
    .b.l config -text "ab\001"
    update
} {}
test unixfont-6.6 {Tk_DrawChars procedure: more normal chars at end} unix {
    .b.l config -text "ab\001def"
    update
} {}

test unixfont-7.1 {DrawChars procedure: no effects} unix {
    .b.l config -text "abc"
    update
} {}
test unixfont-7.2 {DrawChars procedure: underlining} unix {
    set f [.b.l cget -font]
    .b.l config -text "abc" -font "courier 10 underline"
    update
    .b.l config -font $f
} {}
test unixfont-7.3 {DrawChars procedure: overstrike} unix {
    set f [.b.l cget -font]
    .b.l config -text "abc" -font "courier 10 overstrike"
    update
    .b.l config -font $f
} {}

test unixfont-8.1 {AllocFont procedure: use old font} unix {
    font create xyz
    button .c -font xyz
    font configure xyz -family times
    update
    destroy .c
    font delete xyz
} {}
test unixfont-8.2 {AllocFont procedure: parse information from XLFD} unix {
    expr {[lindex [font actual {-family times -size 0}] 3] == 0}
} {0}
test unixfont-8.3 {AllocFont procedure: can't parse info from name} unix {
    catch {unset fontArray}
    # check that font actual returns the correct attributes.
    # the values of those attributes are system dependent.
    array set fontArray [font actual a12biluc]
    set result [lsort [array names fontArray]]
    catch {unset fontArray}
    set result
} {-family -overstrike -size -slant -underline -weight}
test unixfont-8.4 {AllocFont procedure: classify characters} unix {
    set x 0
    incr x [font measure $courier "\u4000"]   ;# 6
    incr x [font measure $courier "\002"]   ;# 4
    incr x [font measure $courier "\012"]   ;# 2
    incr x [font measure $courier "\101"]   ;# 1
    set x
} [expr $cx*13]
test unixfont-8.5 {AllocFont procedure: setup widths of normal chars} unix {
    font metrics $courier -fixed
} {1}
test unixfont-8.6 {AllocFont procedure: setup widths of special chars} unix {
    set x 0
    incr x [font measure $courier "\001"]   ;# 4
    incr x [font measure $courier "\002"]   ;# 4
    incr x [font measure $courier "\012"]   ;# 2
    set x
} [expr $cx*10]
test unixfont-8.7 {AllocFont procedure: XA_UNDERLINE_POSITION} unix {
    catch {font actual -adobe-courier-bold-i-normal--0-0-0-0-m-0-iso8859-1}
    set x {}
} {}
test unixfont-8.8 {AllocFont procedure: no XA_UNDERLINE_POSITION} unix {
    catch {font actual --symbol-medium-r-normal--0-0-0-0-p-0-sun-fontspecific}
    set x {}
} {}
test unixfont-8.9 {AllocFont procedure: XA_UNDERLINE_THICKNESS} unix {
    catch {font actual -adobe-courier-bold-i-normal--0-0-0-0-m-0-iso8859-1}
    set x {}
} {}
test unixfont-8.10 {AllocFont procedure: no XA_UNDERLINE_THICKNESS} unix {
    catch {font actual --symbol-medium-r-normal--0-0-0-0-p-0-sun-fontspecific}
    set x {}
} {}
test unixfont-8.11 {AllocFont procedure: XA_UNDERLINE_POSITION was 0} unix {
    catch {font actual -adobe-courier-bold-i-normal--0-0-0-0-m-0-iso8859-1}
    set x {}
} {}

test unixfont-9.1 {GetControlCharSubst procedure: 2 chars subst} unix {
    .b.c dchars $t 0 end
    .b.c insert $t 0 "0\a0"
    set x {}
    lappend x [.b.c index $t @@[expr $ax*0],0]
    lappend x [.b.c index $t @@[expr $ax*1],0]
    lappend x [.b.c index $t @@[expr $ax*2],0]
    lappend x [.b.c index $t @@[expr $ax*3],0]
} {0 1 1 2}
test unixfont-9.2 {GetControlCharSubst procedure: 4 chars subst} unix {
    .b.c dchars $t 0 end
    .b.c insert $t 0 "0\0010"
    set x {}
    lappend x [.b.c index $t @@[expr $ax*0],0]
    lappend x [.b.c index $t @@[expr $ax*1],0]
    lappend x [.b.c index $t @@[expr $ax*2],0]
    lappend x [.b.c index $t @@[expr $ax*3],0]
    lappend x [.b.c index $t @@[expr $ax*4],0]
    lappend x [.b.c index $t @@[expr $ax*5],0]
} {0 1 1 1 1 2}

# cleanup
::tcltest::cleanupTests
return













@


1.4
log
@touched all sources to ease next import
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: unixFont.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d17 25
a41 8
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {$tcl_platform(platform)!="unix"} {
    puts "skipping: Unix only tests..."
    ::tcltest::cleanupTests
    return
d70 1
a70 1
test unixfont-1.1 {TkpGetNativeFont procedure: not native} {noExceed} {
d73 1
a73 1
test unixfont-1.2 {TkpGetNativeFont procedure: native} {
d77 1
a77 1
test unixfont-2.1 {TkpGetFontFromAttributes procedure: no family} {
d82 1
a82 1
	{noExceed} {
d89 1
a89 1
	{noExceed} {
d96 1
a96 1
	{noExceed} {
d102 1
a102 1
test unixfont-2.5 {TkpGetFontFromAttributes procedure: fallback} {
d106 1
a106 1
test unixfont-2.6 {TkpGetFontFromAttributes: fallback to fixed family} {
d109 1
a109 1
test unixfont-2.7 {TkpGetFontFromAttributes: fixed family not available!} {
d112 1
a112 1
test unixfont-2.8 {TkpGetFontFromAttributes: loop over returned font names} {
d115 1
a115 1
test unixfont-2.9 {TkpGetFontFromAttributes: reject adobe courier if possible} {noExceed} {
d118 1
a118 1
test unixfont-2.10 {TkpGetFontFromAttributes: scalable font found} {
d121 1
a121 1
test unixfont-2.11 {TkpGetFontFromAttributes: font cannot be loaded} {
d130 1
a130 1
test unixfont-3.1 {TkpDeleteFont procedure} {
d135 1
a135 1
test unixfont-4.1 {TkpGetFontFamilies procedure} {
d140 1
a140 1
test unixfont-5.1 {Tk_MeasureChars procedure: no chars to be measured} {
d144 1
a144 1
test unixfont-5.2 {Tk_MeasureChars procedure: no right margin} {
d147 1
a147 1
test unixfont-5.3 {Tk_MeasureChars procedure: loop over chars} {
d154 1
a154 1
test unixfont-5.4 {Tk_MeasureChars procedure: reached right edge} {
d158 1
a158 1
test unixfont-5.5 {Tk_MeasureChars procedure: ran out of chars} {
d162 1
a162 1
test unixfont-5.6 {Tk_MeasureChars procedure: find last word} {
d166 1
a166 1
test unixfont-5.7 {Tk_MeasureChars procedure: already saw space in line} {
d170 1
a170 1
test unixfont-5.8 {Tk_MeasureChars procedure: internal spaces significant} {
d174 1
a174 1
test unixfont-5.9 {Tk_MeasureChars procedure: TK_PARTIAL_OK} {
d179 1
a179 1
test unixfont-5.10 {Tk_MeasureChars procedure: TK_AT_LEAST_ONE} {
d183 1
a183 1
test unixfont-5.11 {Tk_MeasureChars: TK_AT_LEAST_ONE + not even one char fit!} {
d190 1
a190 1
test unixfont-5.12 {Tk_MeasureChars procedure: include eol spaces} {
d195 1
a195 1
test unixfont-6.1 {Tk_DrawChars procedure: loop test} {
d199 1
a199 1
test unixfont-6.2 {Tk_DrawChars procedure: loop test} {
d203 1
a203 1
test unixfont-6.3 {Tk_DrawChars procedure: special char} {
d207 1
a207 1
test unixfont-6.4 {Tk_DrawChars procedure: normal then special} {
d211 1
a211 1
test unixfont-6.5 {Tk_DrawChars procedure: ends with special} {
d215 1
a215 1
test unixfont-6.6 {Tk_DrawChars procedure: more normal chars at end} {
d220 1
a220 1
test unixfont-7.1 {DrawChars procedure: no effects} {
d224 1
a224 1
test unixfont-7.2 {DrawChars procedure: underlining} {
d230 1
a230 1
test unixfont-7.3 {DrawChars procedure: overstrike} {
d237 1
a237 1
test unixfont-8.1 {AllocFont procedure: use old font} {
d245 1
a245 1
test unixfont-8.2 {AllocFont procedure: parse information from XLFD} {
d248 1
a248 1
test unixfont-8.3 {AllocFont procedure: can't parse info from name} {
d257 1
a257 1
test unixfont-8.4 {AllocFont procedure: classify characters} {
d265 1
a265 1
test unixfont-8.5 {AllocFont procedure: setup widths of normal chars} {
d268 1
a268 1
test unixfont-8.6 {AllocFont procedure: setup widths of special chars} {
d275 1
a275 1
test unixfont-8.7 {AllocFont procedure: XA_UNDERLINE_POSITION} {
d279 1
a279 1
test unixfont-8.8 {AllocFont procedure: no XA_UNDERLINE_POSITION} {
d283 1
a283 1
test unixfont-8.9 {AllocFont procedure: XA_UNDERLINE_THICKNESS} {
d287 1
a287 1
test unixfont-8.10 {AllocFont procedure: no XA_UNDERLINE_THICKNESS} {
d291 1
a291 1
test unixfont-8.11 {AllocFont procedure: XA_UNDERLINE_POSITION was 0} {
d296 1
a296 1
test unixfont-9.1 {GetControlCharSubst procedure: 2 chars subst} {
d305 1
a305 1
test unixfont-9.2 {GetControlCharSubst procedure: 4 chars subst} {
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d12 2
d15 5
a19 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: unixFont.test,v 1.2 1998/09/14 18:23:52 stanton Exp $
d22 2
a26 4
if {[string compare test [info procs test]] != 0} {
    source defs
}

d53 1
a53 1
test unixfont-1.1 {TkpGetNativeFont procedure: not native} {
d64 2
a65 1
test unixfont-2.2 {TkpGetFontFromAttributes procedure: Times relatives} {
d71 2
a72 1
test unixfont-2.3 {TkpGetFontFromAttributes procedure: Courier relatives} {
d78 2
a79 1
test unixfont-2.4 {TkpGetFontFromAttributes procedure: Helvetica relatives} {
d98 1
a98 1
test unixfont-2.9 {TkpGetFontFromAttributes: reject adobe courier if possible} {
d229 1
a229 1
    expr [lindex [font actual {-family times -size 0}] 3]==0
d232 8
a239 6
    if [catch {set a [font actual a12biluc]}]==0 {
	string compare $a "-family a12biluc -size 0 -weight normal -slant roman -underline 0 -overstrike 0"
    } else {
	set a 0
    }
} {0}
d242 1
a242 1
    incr x [font measure $courier "\001"]   ;# 4
d247 1
a247 1
} [expr $cx*11]
d290 1
a290 1
    .b.c insert $t 0 "0\1770"
d299 16
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a11 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d13 4
a16 1
# RCS: @@(#) $Id: unixFont.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d18 2
a19 2
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
d22 2
a23 4
if {$tcl_platform(platform)!="unix"} {
    puts "skipping: Unix only tests..."
    ::tcltest::cleanupTests
    return
d52 1
a52 1
test unixfont-1.1 {TkpGetNativeFont procedure: not native} {noExceed} {
d63 1
a63 2
test unixfont-2.2 {TkpGetFontFromAttributes procedure: Times relatives} \
	{noExceed} {
d69 1
a69 2
test unixfont-2.3 {TkpGetFontFromAttributes procedure: Courier relatives} \
	{noExceed} {
d75 1
a75 2
test unixfont-2.4 {TkpGetFontFromAttributes procedure: Helvetica relatives} \
	{noExceed} {
d94 1
a94 1
test unixfont-2.9 {TkpGetFontFromAttributes: reject adobe courier if possible} {noExceed} {
d225 1
a225 1
    expr {[lindex [font actual {-family times -size 0}] 3] == 0}
d228 6
a233 8
    catch {unset fontArray}
    # check that font actual returns the correct attributes.
    # the values of those attributes are system dependent.
    array set fontArray [font actual a12biluc]
    set result [lsort [array names fontArray]]
    catch {unset fontArray}
    set result
} {-family -overstrike -size -slant -underline -weight}
d236 1
a236 1
    incr x [font measure $courier "\u4000"]   ;# 6
d241 1
a241 1
} [expr $cx*13]
d284 1
a284 1
    .b.c insert $t 0 "0\0010"
a292 16

# cleanup
::tcltest::cleanupTests
return












@


1.1.1.3
log
@import tk 8.4.0
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: unixFont.test,v 1.7 2002/07/13 20:28:35 dgp Exp $
d17 8
a24 25
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

testConstraint hasArial 1
testConstraint hasCourierNew 1
testConstraint hasTimesNew 1
set xlsf [auto_execok xlsfonts]
if {[llength $xlsf]} {
    foreach {constraint font} {
	hasArial	arial
	hasCourierNew	"courier new"
	hasTimesNew	"times new roman"
    } {
	if {![catch {eval exec $xlsf [list *-$font-*]} res]
		&& ![string match *unmatched* $res]} {
	    # Newer Unix systems have more default fonts installed, 
	    # so we can't rely on fallbacks for fonts to need to
	    # fall back on anything.
	    testConstraint $constraint 0
	}
    }
d53 1
a53 1
test unixfont-1.1 {TkpGetNativeFont procedure: not native} {unix noExceed} {
d56 1
a56 1
test unixfont-1.2 {TkpGetNativeFont procedure: native} unix {
d60 1
a60 1
test unixfont-2.1 {TkpGetFontFromAttributes procedure: no family} unix {
d65 1
a65 1
	{unix noExceed hasTimesNew} {
d72 1
a72 1
	{unix noExceed hasCourierNew} {
d79 1
a79 1
	{unix noExceed hasArial} {
d85 1
a85 1
test unixfont-2.5 {TkpGetFontFromAttributes procedure: fallback} unix {
d89 1
a89 1
test unixfont-2.6 {TkpGetFontFromAttributes: fallback to fixed family} unix {
d92 1
a92 1
test unixfont-2.7 {TkpGetFontFromAttributes: fixed family not available!} unix {
d95 1
a95 1
test unixfont-2.8 {TkpGetFontFromAttributes: loop over returned font names} unix {
d98 1
a98 1
test unixfont-2.9 {TkpGetFontFromAttributes: reject adobe courier if possible} {unix noExceed} {
d101 1
a101 1
test unixfont-2.10 {TkpGetFontFromAttributes: scalable font found} unix {
d104 1
a104 1
test unixfont-2.11 {TkpGetFontFromAttributes: font cannot be loaded} unix {
d113 1
a113 1
test unixfont-3.1 {TkpDeleteFont procedure} unix {
d118 1
a118 1
test unixfont-4.1 {TkpGetFontFamilies procedure} unix {
d123 1
a123 1
test unixfont-5.1 {Tk_MeasureChars procedure: no chars to be measured} unix {
d127 1
a127 1
test unixfont-5.2 {Tk_MeasureChars procedure: no right margin} unix {
d130 1
a130 1
test unixfont-5.3 {Tk_MeasureChars procedure: loop over chars} unix {
d137 1
a137 1
test unixfont-5.4 {Tk_MeasureChars procedure: reached right edge} unix {
d141 1
a141 1
test unixfont-5.5 {Tk_MeasureChars procedure: ran out of chars} unix {
d145 1
a145 1
test unixfont-5.6 {Tk_MeasureChars procedure: find last word} unix {
d149 1
a149 1
test unixfont-5.7 {Tk_MeasureChars procedure: already saw space in line} unix {
d153 1
a153 1
test unixfont-5.8 {Tk_MeasureChars procedure: internal spaces significant} unix {
d157 1
a157 1
test unixfont-5.9 {Tk_MeasureChars procedure: TK_PARTIAL_OK} unix {
d162 1
a162 1
test unixfont-5.10 {Tk_MeasureChars procedure: TK_AT_LEAST_ONE} unix {
d166 1
a166 1
test unixfont-5.11 {Tk_MeasureChars: TK_AT_LEAST_ONE + not even one char fit!} unix {
d173 1
a173 1
test unixfont-5.12 {Tk_MeasureChars procedure: include eol spaces} unix {
d178 1
a178 1
test unixfont-6.1 {Tk_DrawChars procedure: loop test} unix {
d182 1
a182 1
test unixfont-6.2 {Tk_DrawChars procedure: loop test} unix {
d186 1
a186 1
test unixfont-6.3 {Tk_DrawChars procedure: special char} unix {
d190 1
a190 1
test unixfont-6.4 {Tk_DrawChars procedure: normal then special} unix {
d194 1
a194 1
test unixfont-6.5 {Tk_DrawChars procedure: ends with special} unix {
d198 1
a198 1
test unixfont-6.6 {Tk_DrawChars procedure: more normal chars at end} unix {
d203 1
a203 1
test unixfont-7.1 {DrawChars procedure: no effects} unix {
d207 1
a207 1
test unixfont-7.2 {DrawChars procedure: underlining} unix {
d213 1
a213 1
test unixfont-7.3 {DrawChars procedure: overstrike} unix {
d220 1
a220 1
test unixfont-8.1 {AllocFont procedure: use old font} unix {
d228 1
a228 1
test unixfont-8.2 {AllocFont procedure: parse information from XLFD} unix {
d231 1
a231 1
test unixfont-8.3 {AllocFont procedure: can't parse info from name} unix {
d240 1
a240 1
test unixfont-8.4 {AllocFont procedure: classify characters} unix {
d248 1
a248 1
test unixfont-8.5 {AllocFont procedure: setup widths of normal chars} unix {
d251 1
a251 1
test unixfont-8.6 {AllocFont procedure: setup widths of special chars} unix {
d258 1
a258 1
test unixfont-8.7 {AllocFont procedure: XA_UNDERLINE_POSITION} unix {
d262 1
a262 1
test unixfont-8.8 {AllocFont procedure: no XA_UNDERLINE_POSITION} unix {
d266 1
a266 1
test unixfont-8.9 {AllocFont procedure: XA_UNDERLINE_THICKNESS} unix {
d270 1
a270 1
test unixfont-8.10 {AllocFont procedure: no XA_UNDERLINE_THICKNESS} unix {
d274 1
a274 1
test unixfont-8.11 {AllocFont procedure: XA_UNDERLINE_POSITION was 0} unix {
d279 1
a279 1
test unixfont-9.1 {GetControlCharSubst procedure: 2 chars subst} unix {
d288 1
a288 1
test unixfont-9.2 {GetControlCharSubst procedure: 4 chars subst} unix {
@


