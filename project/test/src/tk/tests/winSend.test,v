head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TK_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.20.39.10;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the "send" command and the
# other procedures in the file tkSend.c.  It is organized in the
# standard fashion for Tcl tests.
#
# Copyright (c) 1994 Sun Microsystems, Inc.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: winSend.test,v 1.4 2002/07/13 20:28:36 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

namespace import -force tcltest::interpreter

# Compute a script that will load Tk into a child interpreter.

foreach pkg [info loaded] {
    if {[lindex $pkg 1] == "Tk"} {
	set loadTk "load $pkg"
	break
    }
}

# Procedure to create a new application with a given name and class.

proc newApp {name {safe {}}} {
    global loadTk
    if {[string compare $safe "-safe"] == 0} {
	interp create -safe $name
    } else {
	interp create $name
    }
    $name eval [list set argv [list -name $name]]
    catch {eval $loadTk $name}
}

set currentInterps [winfo interps]
if {[testConstraint win] && [llength [info commands send]]} {

    if {[catch {exec [interpreter] &}] == 0} {

	# Wait until the child application has launched.
	while {[llength [winfo interps]] == [llength $currentInterps]} {}

	# Now find an interp to send to
	set newInterps [winfo interps]
	foreach interp $newInterps {
	    if {[lsearch -exact $currentInterps $interp] < 0} {
		break
	    }
	}

	# Now we have found our interpreter we are going to send to.
	# Make sure that it works first.
	testConstraint winSend	[expr {[catch {
					send $interp {console hide; update}
				}] == 0}]
    }
}

# setting up dde server is done when the first interp is created and
# cannot be tested very easily.
test winSend-1.1 {Tk_SetAppName - changing name of interp} winSend {
    newApp testApp
    list [testApp eval tk appname testApp2] [interp delete testApp]
} {testApp2 {}}
test winSend-1.2 {Tk_SetAppName - changing name - not front of linked list} {
	winSend
} {
    newApp testApp
    newApp testApp2
    list [testApp eval tk appname testApp3] [interp delete testApp] [interp delete testApp2]
} {testApp3 {} {}}
test winSend-1.3 {Tk_SetAppName - unique name - no conflicts} winSend {
    newApp testApp
    list [testApp eval tk appname testApp] [interp delete testApp]
} {testApp {}}
test winSend-1.4 {Tk_SetAppName - unique name - one conflict} winSend {
    newApp testApp
    newApp foobar
    list [foobar eval tk appname testApp] [interp delete foobar] [interp delete testApp]
} {{testApp #2} {} {}}
test winSend-1.5 {Tk_SetAppName - unique name - one conflict} winSend {
    newApp testApp
    newApp foobar
    newApp blaz
    foobar eval tk appname testApp
    list [blaz eval tk appname testApp] [interp delete foobar] [interp delete testApp] [interp delete blaz]
} {{testApp #3} {} {} {}}
test winSend-1.6 {Tk_SetAppName - safe interps} winSend {
    newApp testApp -safe
    list [catch {testApp eval send testApp {set foo a}} msg] $msg [interp delete testApp]
} {1 {invalid command name "send"} {}}

test winSend-2.1 {Tk_SendObjCmd - # of args} winSend {
    list [catch {send tktest} msg] $msg
} {1 {wrong # args: should be "send ?options? interpName arg ?arg ...?"}}
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
    list [catch {send -bogus tktest} msg] $msg
} {1 {bad option "-bogus": must be -async, -displayof, or --}}
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
    list [catch {send -async bogus foo} msg] $msg
} {1 {no registered server named "bogus"}}
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
    list [catch {send -displayof . bogus foo} msg] $msg
} {1 {no registered server named "bogus"}}
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
    list [catch {send -- -bogus foo} msg] $msg
} {1 {no registered server named "-bogus"}}
test winSend-2.2 {Tk_SendObjCmd - sending to ourselves} winSend {
    list [send [tk appname] {set foo a}]
} {a}
test winSend-2.3 {Tk_SendObjCmd - sending to ourselves in a different interpreter} winSend {
    newApp testApp
    list [catch {send testApp {set foo b}} msg] $msg [interp delete testApp]
} {0 b {}}
test winSend-2.4 {Tk_SendObjCmd - sending to ourselves in a different interp with errors} winSend {
    newApp testApp
    list [catch {send testApp {expr 2 / 0}} msg] $msg $errorCode $errorInfo [interp delete testApp]
} "1 {divide by zero} {ARITH DIVZERO {divide by zero}} {divide by zero\n    while executing\n\"expr 2 / 0\"\n    invoked from within\n\"send testApp {expr 2 / 0}\"} {}"
test winSend-2.5 {Tk_SendObjCmd - sending to another app async} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {send -async $interp {set foo a}} msg] $msg
} {0 {}}
test winSend-2.6 {Tk_SendObjCmd - sending to another app sync - no error} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {send $interp {set foo a}} msg] $msg
} {0 a}
test winSend-2.7 {Tk_SendObjCmd - sending to another app - error} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {send $interp {expr 2 / 0}} msg] $msg $errorCode $errorInfo
} "1 {divide by zero} {ARITH DIVZERO {divide by zero}} {divide by zero\n    while executing\n\"expr 2 / 0\"\n    invoked from within\n\"send \$interp {expr 2 / 0}\"}"

test winSend-3.1 {TkGetInterpNames} winSend {
    set origLength [llength $currentInterps]
    set newLength [llength [winfo interps]]
    expr {($newLength - 2) == $origLength}
} {1}

test winSend-4.1 {DeleteProc - changing name of app} winSend {
    newApp a
    list [a eval tk appname foo] [interp delete a]
} {foo {}}
test winSend-4.2 {DeleteProc - normal} winSend {
    newApp a
    list [interp delete a]
} {{}}

test winSend-5.1 {ExecuteRemoteObject - no error} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [send $interp {send [tk appname] {expr 2 / 1}}]
} {2}
test winSend-5.2 {ExecuteRemoteObject - error} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {send $interp {send [tk appname] {expr 2 / 0}}} msg] $msg
} {1 {divide by zero}}

test winSend-6.1 {SendDDEServer - XTYP_CONNECT} winSend {
    set foo "Hello, World"
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde request Tk [tk appname] foo"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 {Hello, World}}
test winSend-6.2 {SendDDEServer - XTYP_CONNECT_CONFIRM} winSend {
    set foo "Hello, World"
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde request Tk [tk appname] foo"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 {Hello, World}}
test winSend-6.3 {SendDDEServer - XTYP_DISCONNECT} winSend {
    set foo "Hello, World"
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde request Tk [tk appname] foo"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 {Hello, World}}
test winSend-6.4 {SendDDEServer - XTYP_REQUEST variable} winSend {
    set foo "Hello, World"
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde request Tk [tk appname] foo"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 {Hello, World}}
test winSend-6.5 {SendDDEServer - XTYP_REQUEST array} winSend {
    catch {unset foo}
    set foo(test) "Hello, World"
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde request Tk [tk appname] foo(test)"
    list [catch "send \{$interp\} \{$command\}" msg] $msg [catch {unset foo}]
} {0 {Hello, World} 0}
test winSend-6.6 {SendDDEServer - XTYP_REQUEST return results} winSend {
    set foo 3
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "send [tk appname] {expr $foo + 1}"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 4}
test winSend-6.7 {SendDDEServer - XTYP_EXECUTE} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "send [tk appname] {expr 4 / 2}"
    list [catch "send \{$interp\} \{$command\}" msg] $msg
} {0 2}
test winSend-6.8 {SendDDEServer - XTYP_WILDCONNECT} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    set command "dde services Tk {}"
    list [catch "send \{$interp\} \{$command\}"]
} {0}

test winSend-7.1 {DDEExitProc} winSend {
    newApp testApp
    list [interp delete testApp]
} {{}}

test winSend-8.1 {SendDdeConnect} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [send $interp {set tk foo}]
} {foo}

test winSend-9.1 {SetDDEError} winSend {
    list [catch {dde execute Tk foo {set foo hello}} msg] $msg
} {1 {dde command failed}}

test winSend-10.1 {Tk_DDEObjCmd - wrong num args} winSend {
    list [catch {dde} msg] $msg
} {1 {wrong # args: should be "dde ?-async? serviceName topicName value"}}
test winSend-10.2 {Tk_DDEObjCmd - unknown subcommand} winSend {
    list [catch {dde foo} msg] $msg
} {1 {bad command "foo": must be execute, request, or services}}
test winSend-10.3 {Tk_DDEObjCmd - execute - wrong num args} winSend {
    list [catch {dde execute} msg] $msg
} {1 {wrong # args: should be "dde execute ?-async? serviceName topicName value"}}
test winSend-10.4 {Tk_DDEObjCmd - execute - wrong num args} winSend {
    list [catch {dde execute 3 4 5 6 7} msg] $msg
} {1 {wrong # args: should be "dde execute ?-async? serviceName topicName value"}}
test winSend-10.5 {Tk_DDEObjCmd - execute async - wrong num args} winSend {
    list [catch {dde execute -async} msg] $msg
} {1 {wrong # args: should be "dde execute ?-async? serviceName topicName value"}}
test winSend-10.6 {Tk_DDEObjCmd - request - wrong num args} winSend {
    list [catch {dde request} msg] $msg
} {1 {wrong # args: should be "dde request serviceName topicName value"}}
test winSend-10.7 {Tk_DDEObjCmd - services wrong num args} winSend {
    list [catch {dde services} msg] $msg
} {1 {wrong # args: should be "dde services serviceName topicName"}}
test winSend-10.8 {Tk_DDEObjCmd - null service name} winSend {
    list [catch {dde services {} {tktest #2}}]
} {0}
test winSend-10.9 {Tk_DDEObjCmd - null topic name} winSend {
    list [catch {dde services {Tk} {}}]
} {0}
test winSend-10.10 {Tk_DDEObjCmd - execute - nothing to execute} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {dde execute Tk $interp {}} msg] $msg
} {1 {cannot execute null data}}
test winSend-10.11 {Tk_DDEObjCmd - execute - no such conversation} winSend {
    list [catch {dde execute Tk foo {set foo hello}} msg] $msg
} {1 {dde command failed}}
test winSend-10.12 {Tk_DDEObjCmd - execute - async} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {dde execute -async Tk $interp {set foo hello}} msg] $msg
} {0 {}}
test winSend-10.13 {Tk_DDEObjCmd - execute} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {dde execute Tk $interp {set foo goodbye}} msg] $msg
} {0 {}}
test winSend-10.14 {Tk_DDEObjCmd - request - nothing to request} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {dde request Tk $interp {}} msg] $msg
} {1 {cannot request value of null data}}
test winSend-10.15 {Tk_DDEObjCmd - request - invalid interp} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    list [catch {dde request Tk foo foo} msg] $msg
} {1 {dde command failed}}
test winSend-10.16 {Tk_DDEObjCmd - invalid variable} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    send $interp {unset foo}
    list [catch {dde request Tk $interp foo} msg] $msg
} {1 {remote server cannot handle this command}}
test winSend-10.17 {Tk_DDEObjCmd - valid variable} winSend {
    set newInterps [winfo interps]
    foreach interp $newInterps {
	if {[lsearch $currentInterps $interp] < 0} {
	    break
	}
    }
    send $interp {set foo winSend-10.17}
    list [catch {dde request Tk $interp foo} msg] $msg
} {0 winSend-10.17}
test winSend-10.18 {Tk_DDEObjCmd - services} winSend {
    set currentService [list Tk [tk appname]]
    list [catch {dde services Tk {}} msg] [expr [lsearch $msg $currentService] >= 0]
} {0 1}

# Get rid of the other app and all of its interps

set newInterps [winfo interps]
while {[llength $newInterps] != [llength $currentInterps]} {
    foreach interp $newInterps {
	if {[lsearch -exact $currentInterps $interp] < 0} {
	    catch {send $interp exit}
	    set newInterps [winfo interps]
	    break
	}
    }
}

# cleanup
::tcltest::cleanupTests
return

@


1.4
log
@touched all sources to ease next import
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: winSend.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d12 6
a17 23
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {$tcl_platform(platform) != "windows"} {
    puts "skipping: Windows only tests..."
    ::tcltest::cleanupTests
    return
}

if {[info commands send] != "send"} {
    puts "skipping: Unimplemented send command"
    ::tcltest::cleanupTests
    return
}

foreach i [winfo children .] {
    destroy $i
}
wm geometry . {}
raise .

set currentInterps [winfo interps]
d19 1
a19 5
if {[catch {exec tktest &}] == 1} {
    puts "Could not run winSend.test because another instance of tktest could not be loaded."
    ::tcltest::cleanupTests
    return;
}
d43 4
a46 1
# Wait until the child application has launched.
d48 2
a49 2
while {[llength [winfo interps]] == [llength $currentInterps]} {
}
d51 13
a63 5
# Now find an interp to send to
set newInterps [winfo interps]
foreach interp $newInterps {
    if {[lsearch -exact $currentInterps $interp] < 0} {
	break
a66 8
# Now we have found our interpreter we are going to send to. Make sure that
# it works first.
if {[catch {send $interp {console hide; update}}] == 1} {
    puts "Could not send to child interpreter $interp"
    ::tcltest::cleanupTests
   return
}

d69 1
a69 1
test winSend-1.1 {Tk_SetAppName - changing name of interp} {
d74 2
d80 1
a80 1
test winSend-1.3 {Tk_SetAppName - unique name - no conflicts} {
d84 1
a84 1
test winSend-1.4 {Tk_SetAppName - unique name - one conflict} {
d89 1
a89 1
test winSend-1.5 {Tk_SetAppName - unique name - one conflict} {
d96 1
a96 1
test winSend-1.6 {Tk_SetAppName - safe interps} {
d101 1
a101 1
test winSend-2.1 {Tk_SendObjCmd - # of args} {
d104 1
a104 1
test winSend-2.1 {Tk_SendObjCmd: arguments} {
d107 1
a107 1
test winSend-2.1 {Tk_SendObjCmd: arguments} {
d110 1
a110 1
test winSend-2.1 {Tk_SendObjCmd: arguments} {
d113 1
a113 1
test winSend-2.1 {Tk_SendObjCmd: arguments} {
d116 1
a116 1
test winSend-2.2 {Tk_SendObjCmd - sending to ourselves} {
d119 1
a119 1
test winSend-2.3 {Tk_SendObjCmd - sending to ourselves in a different interpreter} {
d123 1
a123 1
test winSend-2.4 {Tk_SendObjCmd - sending to ourselves in a different interp with errors} {
d127 1
a127 1
test winSend-2.5 {Tk_SendObjCmd - sending to another app async} {
d136 1
a136 1
test winSend-2.6 {Tk_SendObjCmd - sending to another app sync - no error} {
d145 1
a145 1
test winSend-2.7 {Tk_SendObjCmd - sending to another app - error} {
d155 1
a155 1
test winSend-3.1 {TkGetInterpNames} {
d161 1
a161 1
test winSend-4.1 {DeleteProc - changing name of app} {
d165 1
a165 1
test winSend-4.2 {DeleteProc - normal} {
d170 1
a170 1
test winSend-5.1 {ExecuteRemoteObject - no error} {
d179 1
a179 1
test winSend-5.2 {ExecuteRemoteObject - error} {
d189 1
a189 1
test winSend-6.1 {SendDDEServer - XTYP_CONNECT} {
d200 1
a200 1
test winSend-6.2 {SendDDEServer - XTYP_CONNECT_CONFIRM} {
d211 1
a211 1
test winSend-6.3 {SendDDEServer - XTYP_DISCONNECT} {
d222 1
a222 1
test winSend-6.4 {SendDDEServer - XTYP_REQUEST variable} {
d233 1
a233 1
test winSend-6.5 {SendDDEServer - XTYP_REQUEST array} {
d245 1
a245 1
test winSend-6.6 {SendDDEServer - XTYP_REQUEST return results} {
d256 1
a256 1
test winSend-6.7 {SendDDEServer - XTYP_EXECUTE} {
d266 1
a266 1
test winSend-6.8 {SendDDEServer - XTYP_WILDCONNECT} {
d277 1
a277 1
test winSend-7.1 {DDEExitProc} {
d282 1
a282 1
test winSend-8.1 {SendDdeConnect} {
d292 1
a292 1
test winSend-9.1 {SetDDEError} {
d296 1
a296 1
test winSend-10.1 {Tk_DDEObjCmd - wrong num args} {
d299 1
a299 1
test winSend-10.2 {Tk_DDEObjCmd - unknown subcommand} {
d302 1
a302 1
test winSend-10.3 {Tk_DDEObjCmd - execute - wrong num args} {
d305 1
a305 1
test winSend-10.4 {Tk_DDEObjCmd - execute - wrong num args} {
d308 1
a308 1
test winSend-10.5 {Tk_DDEObjCmd - execute async - wrong num args} {
d311 1
a311 1
test winSend-10.6 {Tk_DDEObjCmd - request - wrong num args} {
d314 1
a314 1
test winSend-10.7 {Tk_DDEObjCmd - services wrong num args} {
d317 1
a317 1
test winSend-10.8 {Tk_DDEObjCmd - null service name} {
d320 1
a320 1
test winSend-10.9 {Tk_DDEObjCmd - null topic name} {
d323 1
a323 1
test winSend-10.10 {Tk_DDEObjCmd - execute - nothing to execute} {
d332 1
a332 1
test winSend-10.11 {Tk_DDEObjCmd - execute - no such conversation} {
d335 1
a335 1
test winSend-10.12 {Tk_DDEObjCmd - execute - async} {
d344 1
a344 1
test winSend-10.13 {Tk_DDEObjCmd - execute} {
d353 1
a353 1
test winSend-10.14 {Tk_DDEObjCmd - request - nothing to request} {
d362 1
a362 1
test winSend-10.15 {Tk_DDEObjCmd - request - invalid interp} {
d371 1
a371 1
test winSend-10.16 {Tk_DDEObjCmd - invalid variable} {
d381 1
a381 1
test winSend-10.17 {Tk_DDEObjCmd - valid variable} {
d391 1
a391 1
test winSend-10.18 {Tk_DDEObjCmd - services} {
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tk 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tk 8.4.0
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: winSend.test,v 1.4 2002/07/13 20:28:36 dgp Exp $
d12 23
a34 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d36 5
a40 1
namespace import -force tcltest::interpreter
d64 1
a64 2
set currentInterps [winfo interps]
if {[testConstraint win] && [llength [info commands send]]} {
d66 2
a67 1
    if {[catch {exec [interpreter] &}] == 0} {
d69 7
a75 2
	# Wait until the child application has launched.
	while {[llength [winfo interps]] == [llength $currentInterps]} {}
d77 6
a82 14
	# Now find an interp to send to
	set newInterps [winfo interps]
	foreach interp $newInterps {
	    if {[lsearch -exact $currentInterps $interp] < 0} {
		break
	    }
	}

	# Now we have found our interpreter we are going to send to.
	# Make sure that it works first.
	testConstraint winSend	[expr {[catch {
					send $interp {console hide; update}
				}] == 0}]
    }
d87 1
a87 1
test winSend-1.1 {Tk_SetAppName - changing name of interp} winSend {
a91 2
	winSend
} {
d96 1
a96 1
test winSend-1.3 {Tk_SetAppName - unique name - no conflicts} winSend {
d100 1
a100 1
test winSend-1.4 {Tk_SetAppName - unique name - one conflict} winSend {
d105 1
a105 1
test winSend-1.5 {Tk_SetAppName - unique name - one conflict} winSend {
d112 1
a112 1
test winSend-1.6 {Tk_SetAppName - safe interps} winSend {
d117 1
a117 1
test winSend-2.1 {Tk_SendObjCmd - # of args} winSend {
d120 1
a120 1
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
d123 1
a123 1
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
d126 1
a126 1
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
d129 1
a129 1
test winSend-2.1 {Tk_SendObjCmd: arguments} winSend {
d132 1
a132 1
test winSend-2.2 {Tk_SendObjCmd - sending to ourselves} winSend {
d135 1
a135 1
test winSend-2.3 {Tk_SendObjCmd - sending to ourselves in a different interpreter} winSend {
d139 1
a139 1
test winSend-2.4 {Tk_SendObjCmd - sending to ourselves in a different interp with errors} winSend {
d143 1
a143 1
test winSend-2.5 {Tk_SendObjCmd - sending to another app async} winSend {
d152 1
a152 1
test winSend-2.6 {Tk_SendObjCmd - sending to another app sync - no error} winSend {
d161 1
a161 1
test winSend-2.7 {Tk_SendObjCmd - sending to another app - error} winSend {
d171 1
a171 1
test winSend-3.1 {TkGetInterpNames} winSend {
d177 1
a177 1
test winSend-4.1 {DeleteProc - changing name of app} winSend {
d181 1
a181 1
test winSend-4.2 {DeleteProc - normal} winSend {
d186 1
a186 1
test winSend-5.1 {ExecuteRemoteObject - no error} winSend {
d195 1
a195 1
test winSend-5.2 {ExecuteRemoteObject - error} winSend {
d205 1
a205 1
test winSend-6.1 {SendDDEServer - XTYP_CONNECT} winSend {
d216 1
a216 1
test winSend-6.2 {SendDDEServer - XTYP_CONNECT_CONFIRM} winSend {
d227 1
a227 1
test winSend-6.3 {SendDDEServer - XTYP_DISCONNECT} winSend {
d238 1
a238 1
test winSend-6.4 {SendDDEServer - XTYP_REQUEST variable} winSend {
d249 1
a249 1
test winSend-6.5 {SendDDEServer - XTYP_REQUEST array} winSend {
d261 1
a261 1
test winSend-6.6 {SendDDEServer - XTYP_REQUEST return results} winSend {
d272 1
a272 1
test winSend-6.7 {SendDDEServer - XTYP_EXECUTE} winSend {
d282 1
a282 1
test winSend-6.8 {SendDDEServer - XTYP_WILDCONNECT} winSend {
d293 1
a293 1
test winSend-7.1 {DDEExitProc} winSend {
d298 1
a298 1
test winSend-8.1 {SendDdeConnect} winSend {
d308 1
a308 1
test winSend-9.1 {SetDDEError} winSend {
d312 1
a312 1
test winSend-10.1 {Tk_DDEObjCmd - wrong num args} winSend {
d315 1
a315 1
test winSend-10.2 {Tk_DDEObjCmd - unknown subcommand} winSend {
d318 1
a318 1
test winSend-10.3 {Tk_DDEObjCmd - execute - wrong num args} winSend {
d321 1
a321 1
test winSend-10.4 {Tk_DDEObjCmd - execute - wrong num args} winSend {
d324 1
a324 1
test winSend-10.5 {Tk_DDEObjCmd - execute async - wrong num args} winSend {
d327 1
a327 1
test winSend-10.6 {Tk_DDEObjCmd - request - wrong num args} winSend {
d330 1
a330 1
test winSend-10.7 {Tk_DDEObjCmd - services wrong num args} winSend {
d333 1
a333 1
test winSend-10.8 {Tk_DDEObjCmd - null service name} winSend {
d336 1
a336 1
test winSend-10.9 {Tk_DDEObjCmd - null topic name} winSend {
d339 1
a339 1
test winSend-10.10 {Tk_DDEObjCmd - execute - nothing to execute} winSend {
d348 1
a348 1
test winSend-10.11 {Tk_DDEObjCmd - execute - no such conversation} winSend {
d351 1
a351 1
test winSend-10.12 {Tk_DDEObjCmd - execute - async} winSend {
d360 1
a360 1
test winSend-10.13 {Tk_DDEObjCmd - execute} winSend {
d369 1
a369 1
test winSend-10.14 {Tk_DDEObjCmd - request - nothing to request} winSend {
d378 1
a378 1
test winSend-10.15 {Tk_DDEObjCmd - request - invalid interp} winSend {
d387 1
a387 1
test winSend-10.16 {Tk_DDEObjCmd - invalid variable} winSend {
d397 1
a397 1
test winSend-10.17 {Tk_DDEObjCmd - valid variable} winSend {
d407 1
a407 1
test winSend-10.18 {Tk_DDEObjCmd - services} winSend {
@

