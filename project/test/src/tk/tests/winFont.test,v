head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.10;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the procedures in tkWinFont.c. 
# It is organized in the standard fashion for Tcl tests.
#
# Many of these tests are visually oriented and cannot be checked
# programmatically (such as "does an underlined font appear to be
# underlined?"); these tests attempt to exercise the code in question,
# but there are no results that can be checked.  
#
# Copyright (c) 1996-1997 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: winFont.test,v 1.8 2002/07/13 20:28:36 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

catch {destroy .b}
catch {font delete xyz}

toplevel .b
wm geometry .b +0+0
update idletasks

set courier {Courier 14}
set cx [font measure $courier 0]

label .b.l -padx 0 -pady 0 -bd 0 -highlightthickness 0 -justify left -text "0" -font systemfixed
pack .b.l
canvas .b.c -closeenough 0

set t [.b.c create text 0 0 -anchor nw -just left -font $courier]
pack .b.c
update

set ax [winfo reqwidth .b.l]
set ay [winfo reqheight .b.l]
proc getsize {} {
    update
    return "[winfo reqwidth .b.l] [winfo reqheight .b.l]"
}

test winfont-1.1 {TkpGetNativeFont procedure: not native} {pcOnly} {
    list [catch {font measure {} xyz} msg] $msg
} {1 {font "" doesn't exist}}
test winfont-1.2 {TkpGetNativeFont procedure: native} {pcOnly} {
    font measure ansifixed 0
    font measure ansi 0
    font measure device 0
    font measure oemfixed 0
    font measure systemfixed 0
    font measure system 0
    set x {}
} {}

test winfont-2.1 {TkpGetFontFromAttributes procedure: pointsize} {pcOnly} {
    expr [font actual {-size -10} -size]>0
} {1}
test winfont-2.2 {TkpGetFontFromAttributes procedure: pointsize} {pcOnly} {
    expr [font actual {-family Arial} -size]>0
} {1}
test winfont-2.3 {TkpGetFontFromAttributes procedure: normal weight} {pcOnly} {
    font actual {-weight normal} -weight
} {normal}
test winfont-2.4 {TkpGetFontFromAttributes procedure: bold weight} {pcOnly} {
    font actual {-weight bold} -weight
} {bold}
test winfont-2.5 {TkpGetFontFromAttributes procedure: no family} {pcOnly} {
    catch {expr {[font actual {-size 10} -size]}}
} 0
test winfont-2.6 {TkpGetFontFromAttributes procedure: family} {pcOnly} {
    font actual {-family Arial} -family
} {Arial}
test winfont-2.7 {TkpGetFontFromAttributes procedure: Times fonts} {pcOnly} {
    set x {}
    lappend x [font actual {-family "Times"} -family]
    lappend x [font actual {-family "New York"} -family]
    lappend x [font actual {-family "Times New Roman"} -family]
} {{Times New Roman} {Times New Roman} {Times New Roman}}
test winfont-2.8 {TkpGetFontFromAttributes procedure: Courier fonts} {pcOnly} {
    set x {}
    lappend x [font actual {-family "Courier"} -family]
    lappend x [font actual {-family "Monaco"} -family]
    lappend x [font actual {-family "Courier New"} -family]
} {{Courier New} {Courier New} {Courier New}}
test winfont-2.9 {TkpGetFontFromAttributes procedure: Helvetica fonts} {pcOnly} {
    set x {}
    lappend x [font actual {-family "Helvetica"} -family]
    lappend x [font actual {-family "Geneva"} -family]
    lappend x [font actual {-family "Arial"} -family]
} {Arial Arial Arial}
test winfont-2.10 {TkpGetFontFromAttributes procedure: fallback} {pcOnly} {
    # No way to get it to fail! Any font name is acceptable.
} {}

test winfont-3.1 {TkpDeleteFont procedure} {pcOnly} {
    font actual {-family xyz}
    set x {}
} {}

test winfont-4.1 {TkpGetFontFamilies procedure} {pcOnly} {
    font families
    set x {}
} {}

test winfont-5.1 {Tk_MeasureChars procedure: unbounded right margin} {pcOnly} {
    .b.l config -wrap 0 -text "000000"
    getsize
} "[expr $ax*6] $ay"
test winfont-5.2 {Tk_MeasureChars procedure: static width buffer exceeded} {pcOnly} {
    .b.l config -wrap 100000 -text "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    getsize
} "[expr $ax*256] $ay"
test winfont-5.3 {Tk_MeasureChars procedure: all chars did fit} {pcOnly} {
    .b.l config -wrap [expr $ax*10] -text "00000000"
    getsize
} "[expr $ax*8] $ay"
test winfont-5.4 {Tk_MeasureChars procedure: not all chars fit} {pcOnly} {
    .b.l config -wrap [expr $ax*6] -text "00000000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test winfont-5.5 {Tk_MeasureChars procedure: include last partial char} {pcOnly} {
    .b.c dchars $t 0 end
    .b.c insert $t 0 "0000"
    .b.c index $t @@[expr int($cx*2.5)],1
} {2}
test winfont-5.6 {Tk_MeasureChars procedure: at least one char on line} {pcOnly} { 
    .b.l config -text "000000" -wrap 1
    getsize
} "$ax [expr $ay*6]"
test winfont-5.7 {Tk_MeasureChars procedure: whole words} {pcOnly} {
    .b.l config -wrap [expr $ax*8] -text "000000 0000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test winfont-5.8 {Tk_MeasureChars procedure: already saw space in line} {pcOnly} {
    .b.l config -wrap [expr $ax*12] -text "000000    0000000"
    getsize
} "[expr $ax*7] [expr $ay*2]"
test winfont-5.9 {Tk_MeasureChars procedure: internal spaces significant} {pcOnly} {
    .b.l config -wrap [expr $ax*12] -text "000  00   00000"
    getsize
} "[expr $ax*7] [expr $ay*2]"
test winfont-5.10 {Tk_MeasureChars procedure: make first part of word fit} {pcOnly} {
    .b.l config -wrap [expr $ax*12] -text "0000000000000000"
    getsize
} "[expr $ax*12] [expr $ay*2]"
test winfont-5.10 {Tk_MeasureChars procedure: check for kerning} \
	{pcOnly nonPortable} {
    set font [.b.l cget -font]
    .b.l config -font {{MS Sans Serif} 8} -text "W"
    set width [winfo reqwidth .b.l]
    .b.l config -text "XaYoYaKaWx"
    set x [lindex [getsize] 0]
    .b.l config -font $font
    expr $x < ($width*10)
} 1
test winfont-6.1 {Tk_DrawChars procedure: loop test} {pcOnly} {
    .b.l config -text "a"
    update
} {}

test winfont-7.1 {AllocFont procedure: use old font} {pcOnly} {
    font create xyz
    catch {destroy .c}
    button .c -font xyz
    font configure xyz -family times
    update
    destroy .c
    font delete xyz
} {}
test winfont-7.2 {AllocFont procedure: extract info from logfont} {pcOnly} {
    font actual {arial 10 bold italic underline overstrike}
} {-family Arial -size 10 -weight bold -slant italic -underline 1 -overstrike 1}
test winfont-7.3 {AllocFont procedure: extract info from textmetric} {pcOnly} {
    font metric {arial 10 bold italic underline overstrike} -fixed
} {0}
test winfont-7.4 {AllocFont procedure: extract info from textmetric} {pcOnly} {
    font metric systemfixed -fixed
} {1}

# cleanup
destroy .b
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winFont.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d15 6
a20 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
a188 12












@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d10 2
d13 1
a13 8
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: winFont.test,v 1.3 1998/09/14 18:23:53 stanton Exp $

if {$tcl_platform(platform)!="windows"} {
    return
}
d15 2
a16 2
if {[string compare test [info procs test]] != 0} {
    source defs
d23 1
d44 1
a44 1
test winfont-1.1 {TkpGetNativeFont procedure: not native} {
d47 1
a47 1
test winfont-1.2 {TkpGetNativeFont procedure: native} {
d57 1
a57 1
test winfont-2.1 {TkpGetFontFromAttributes procedure: pointsize} {
d60 1
a60 1
test winfont-2.2 {TkpGetFontFromAttributes procedure: pointsize} {
d63 1
a63 1
test winfont-2.3 {TkpGetFontFromAttributes procedure: normal weight} {
d66 1
a66 1
test winfont-2.4 {TkpGetFontFromAttributes procedure: bold weight} {
d69 1
a69 1
test winfont-2.5 {TkpGetFontFromAttributes procedure: no family} {
d72 1
a72 1
test winfont-2.6 {TkpGetFontFromAttributes procedure: family} {
d75 1
a75 1
test winfont-2.7 {TkpGetFontFromAttributes procedure: Times fonts} {
d81 1
a81 1
test winfont-2.8 {TkpGetFontFromAttributes procedure: Courier fonts} {
d87 1
a87 1
test winfont-2.9 {TkpGetFontFromAttributes procedure: Helvetica fonts} {
d93 1
a93 1
test winfont-2.10 {TkpGetFontFromAttributes procedure: fallback} {
d97 1
a97 1
test winfont-3.1 {TkpDeleteFont procedure} {
d102 1
a102 1
test winfont-4.1 {TkpGetFontFamilies procedure} {
d107 1
a107 1
test winfont-5.1 {Tk_MeasureChars procedure: unbounded right margin} {
d111 1
a111 1
test winfont-5.2 {Tk_MeasureChars procedure: static width buffer exceeded} {
d115 1
a115 1
test winfont-5.3 {Tk_MeasureChars procedure: all chars did fit} {
d119 1
a119 1
test winfont-5.4 {Tk_MeasureChars procedure: not all chars fit} {
d123 1
a123 1
test winfont-5.5 {Tk_MeasureChars procedure: include last partial char} {
d128 1
a128 1
test winfont-5.6 {Tk_MeasureChars procedure: at least one char on line} { 
d132 1
a132 1
test winfont-5.7 {Tk_MeasureChars procedure: whole words} {
d136 1
a136 1
test winfont-5.8 {Tk_MeasureChars procedure: already saw space in line} {
d140 1
a140 1
test winfont-5.9 {Tk_MeasureChars procedure: internal spaces significant} {
d144 1
a144 1
test winfont-5.10 {Tk_MeasureChars procedure: make first part of word fit} {
d148 2
a149 1
test winfont-5.10 {Tk_MeasureChars procedure: check for kerning} {nonPortable} {
d158 1
a158 1
test winfont-6.1 {Tk_DrawChars procedure: loop test} {
d163 1
a163 1
test winfont-7.1 {AllocFont procedure: use old font} {
d172 1
a172 1
test winfont-7.2 {AllocFont procedure: extract info from logfont} {
d175 1
a175 1
test winfont-7.3 {AllocFont procedure: extract info from textmetric} {
d178 1
a178 1
test winfont-7.4 {AllocFont procedure: extract info from textmetric} {
d182 1
d184 14
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a9 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d11 8
a18 1
# RCS: @@(#) $Id: winFont.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d20 2
a21 2
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
a27 1
wm geometry .b +0+0
d48 1
a48 1
test winfont-1.1 {TkpGetNativeFont procedure: not native} {pcOnly} {
d51 1
a51 1
test winfont-1.2 {TkpGetNativeFont procedure: native} {pcOnly} {
d61 1
a61 1
test winfont-2.1 {TkpGetFontFromAttributes procedure: pointsize} {pcOnly} {
d64 1
a64 1
test winfont-2.2 {TkpGetFontFromAttributes procedure: pointsize} {pcOnly} {
d67 1
a67 1
test winfont-2.3 {TkpGetFontFromAttributes procedure: normal weight} {pcOnly} {
d70 1
a70 1
test winfont-2.4 {TkpGetFontFromAttributes procedure: bold weight} {pcOnly} {
d73 1
a73 1
test winfont-2.5 {TkpGetFontFromAttributes procedure: no family} {pcOnly} {
d76 1
a76 1
test winfont-2.6 {TkpGetFontFromAttributes procedure: family} {pcOnly} {
d79 1
a79 1
test winfont-2.7 {TkpGetFontFromAttributes procedure: Times fonts} {pcOnly} {
d85 1
a85 1
test winfont-2.8 {TkpGetFontFromAttributes procedure: Courier fonts} {pcOnly} {
d91 1
a91 1
test winfont-2.9 {TkpGetFontFromAttributes procedure: Helvetica fonts} {pcOnly} {
d97 1
a97 1
test winfont-2.10 {TkpGetFontFromAttributes procedure: fallback} {pcOnly} {
d101 1
a101 1
test winfont-3.1 {TkpDeleteFont procedure} {pcOnly} {
d106 1
a106 1
test winfont-4.1 {TkpGetFontFamilies procedure} {pcOnly} {
d111 1
a111 1
test winfont-5.1 {Tk_MeasureChars procedure: unbounded right margin} {pcOnly} {
d115 1
a115 1
test winfont-5.2 {Tk_MeasureChars procedure: static width buffer exceeded} {pcOnly} {
d119 1
a119 1
test winfont-5.3 {Tk_MeasureChars procedure: all chars did fit} {pcOnly} {
d123 1
a123 1
test winfont-5.4 {Tk_MeasureChars procedure: not all chars fit} {pcOnly} {
d127 1
a127 1
test winfont-5.5 {Tk_MeasureChars procedure: include last partial char} {pcOnly} {
d132 1
a132 1
test winfont-5.6 {Tk_MeasureChars procedure: at least one char on line} {pcOnly} { 
d136 1
a136 1
test winfont-5.7 {Tk_MeasureChars procedure: whole words} {pcOnly} {
d140 1
a140 1
test winfont-5.8 {Tk_MeasureChars procedure: already saw space in line} {pcOnly} {
d144 1
a144 1
test winfont-5.9 {Tk_MeasureChars procedure: internal spaces significant} {pcOnly} {
d148 1
a148 1
test winfont-5.10 {Tk_MeasureChars procedure: make first part of word fit} {pcOnly} {
d152 1
a152 2
test winfont-5.10 {Tk_MeasureChars procedure: check for kerning} \
	{pcOnly nonPortable} {
d161 1
a161 1
test winfont-6.1 {Tk_DrawChars procedure: loop test} {pcOnly} {
d166 1
a166 1
test winfont-7.1 {AllocFont procedure: use old font} {pcOnly} {
d175 1
a175 1
test winfont-7.2 {AllocFont procedure: extract info from logfont} {pcOnly} {
d178 1
a178 1
test winfont-7.3 {AllocFont procedure: extract info from textmetric} {pcOnly} {
d181 1
a181 1
test winfont-7.4 {AllocFont procedure: extract info from textmetric} {pcOnly} {
a184 1
# cleanup
a185 14
::tcltest::cleanupTests
return












@


1.1.1.3
log
@import tk 8.4.0
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winFont.test,v 1.8 2002/07/13 20:28:36 dgp Exp $
d15 3
a17 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d186 12
@


