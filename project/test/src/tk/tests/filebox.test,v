head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.50;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.53;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.06;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out Tk's "tk_getOpenFile" and
# "tk_getSaveFile" commands. It is organized in the standard fashion
# for Tcl tests.
#
# Copyright (c) 1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: filebox.test,v 1.13 2002/07/14 05:48:46 dgp Exp $
#

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

namespace import -force tcltest::makeFile
namespace import -force tcltest::removeFile

set tk_strictMotif_old $tk_strictMotif

#----------------------------------------------------------------------
#
# Procedures needed by this test file
#
#----------------------------------------------------------------------

proc ToPressButton {parent btn} {
    global isNative
    if {!$isNative} {
	after 100 SendButtonPress $parent $btn mouse
    }
}

proc ToEnterFileByKey {parent fileName fileDir} {
    global isNative
    if {!$isNative} {
	after 100 EnterFileByKey $parent [list $fileName] [list $fileDir]
    }
}

proc PressButton {btn} {
    event generate $btn <Enter>
    event generate $btn <1> -x 5 -y 5
    event generate $btn <ButtonRelease-1> -x 5 -y 5
}

proc EnterFileByKey {parent fileName fileDir} {
    global tk_strictMotif
    if {$parent == "."} {
	set w .__tk_filedialog
    } else {
	set w $parent.__tk_filedialog
    }
    upvar ::tk::dialog::file::__tk_filedialog data

    if {$tk_strictMotif} {
	$data(sEnt) delete 0 end
	$data(sEnt) insert 0 [file join $fileDir $fileName]
    } else {
	$data(ent) delete 0 end
	$data(ent) insert 0 $fileName
    }

    update
    SendButtonPress $parent ok mouse
}

proc SendButtonPress {parent btn type} {
    global tk_strictMotif
    if {$parent == "."} {
	set w .__tk_filedialog
    } else {
	set w $parent.__tk_filedialog
    }
    upvar ::tk::dialog::file::__tk_filedialog data

    set button $data($btn\Btn)
    if ![winfo ismapped $button] {
	update
    }

    if {$type == "mouse"} {
	PressButton $button
    } else {
	event generate $w <Enter>
	focus $w
	event generate $button <Enter>
	event generate $w <KeyPress> -keysym Return
    }
}


#----------------------------------------------------------------------
#
# The test suite proper
#
#----------------------------------------------------------------------

if {$tcl_platform(platform) == "unix"} {
    set modes "0 1"
} else {
    set modes 1
}

set unknownOptionsMsg(tk_getOpenFile) {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -multiple, -parent, or -title}}
set unknownOptionsMsg(tk_getSaveFile) {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -parent, or -title}}

set tmpFile "filebox.tmp"
makeFile {
    # this file can be empty!
} $tmpFile

array set filters {
    1 {}
    2 {
	{"Text files"		{.txt .doc}	}
	{"Text files"		{}		TEXT}
	{"Tcl Scripts"		{.tcl}		TEXT}
	{"C Source Files"	{.c .h}		}
	{"All Source Files"	{.tcl .c .h}	}
	{"Image Files"		{.gif}		}
	{"Image Files"		{.jpeg .jpg}	}
	{"Image Files"		""		{GIFF JPEG}}
	{"All files"		*}
    }
    3 {
	{"Text files"		{.txt .doc}	TEXT}
	{"Foo"			{""}		TEXT}
    }
}

foreach mode $modes {

    #
    # Test both the motif version and the "tk" version of the file dialog
    # box on Unix.
    #
    # Note that this can use the same test number twice!
    #

    set addedExtensions {}
    if {$tcl_platform(platform) == "unix"} {
	set tk_strictMotif $mode
	# Extension adding is only done when using the non-motif file
	# box with an extension-less filename
	if {!$mode} {
	    set addedExtensions {NONE {} .txt .txt}
	}
    }

    test filebox-1.1 "tk_getOpenFile command" {
	list [catch {tk_getOpenFile -foo} msg] $msg
    } $unknownOptionsMsg(tk_getOpenFile)

    catch {tk_getOpenFile -foo 1} msg
    regsub -all ,      $msg "" options
    regsub \"-foo\" $options "" options
    
    foreach option $options {
        if {[string index $option 0] == "-"} {
    	test filebox-1.2 "tk_getOpenFile command" {
    	    list [catch {tk_getOpenFile $option} msg] $msg
    	} [list 1 "value for \"$option\" missing"]
        }
    }
    
    test filebox-1.3 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -foo bar} msg] $msg
    } $unknownOptionsMsg(tk_getOpenFile)
    
    test filebox-1.4 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -initialdir} msg] $msg
    } {1 {value for "-initialdir" missing}}
    
    test filebox-1.5 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -parent foo.bar} msg] $msg
    } {1 {bad window path name "foo.bar"}}
    
    test filebox-1.6 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -filetypes {Foo}} msg] $msg
    } {1 {bad file type "Foo", should be "typeName {extension ?extensions ...?} ?{macType ?macTypes ...?}?"}}
    
    if {[info commands tk::MotifFDialog] == "" && [info commands ::tk::dialog::file::] == ""} {
        set isNative 1
    } else {
        set isNative 0
    }
    
    set parent .
    
    set verylongstring longstring:
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring

    set color #404040
    test filebox-2.1 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent cancel
        tk_getOpenFile -title "Press Cancel ($verylongstring)" -parent $parent
    } ""
    
    set fileName $tmpFile
    set fileDir [pwd]
    set pathName [file join $fileDir $fileName]
    
    test filebox-2.2 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Press Ok" \
    		    -parent $parent -initialfile $fileName -initialdir $fileDir]
    } $pathName
    
    test filebox-2.3 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToEnterFileByKey $parent $fileName $fileDir
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir $fileDir]
    } $pathName
    
    test filebox-2.4 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir . \
    		    -initialfile $fileName]
    } $pathName
    
    test filebox-2.5 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir /badpath \
    		    -initialfile $fileName]
    } $pathName
    
    test filebox-2.6 "tk_getOpenFile command" {nonUnixUserInteraction} {
        toplevel .t1; toplevel .t2
        wm geometry .t1 +0+0
        wm geometry .t2 +0+0
        ToPressButton .t1 ok
        set choice {}
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t1 -initialdir $fileDir \
    	    -initialfile $fileName]
        ToPressButton .t2 ok
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t2 -initialdir $fileDir \
    	    -initialfile $fileName]
        ToPressButton .t1 ok
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t1 -initialdir $fileDir \
    	    -initialfile $fileName]
        destroy .t1
        destroy .t2
        set choice
    } [list $pathName $pathName $pathName]

    foreach x [lsort -integer [array names filters]] {
        test filebox-3.$x "tk_getOpenFile command" {nonUnixUserInteraction} {
    	ToPressButton $parent ok
    	set choice [tk_getOpenFile -title "Press Ok" -filetypes $filters($x)\
    			-parent $parent -initialfile $fileName -initialdir $fileDir]
        } $pathName
    }

    test filebox-4.1 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -foo} msg] $msg
    } $unknownOptionsMsg(tk_getSaveFile)

    catch {tk_getSaveFile -foo 1} msg
    regsub -all ,      $msg "" options
    regsub \"-foo\" $options "" options

    foreach option $options {
	if {[string index $option 0] == "-"} {
	    test filebox-4.2 "tk_getSaveFile command" {
		list [catch {tk_getSaveFile $option} msg] $msg
	    } [list 1 "value for \"$option\" missing"]
	}
    }

    test filebox-4.3 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -foo bar} msg] $msg
    } $unknownOptionsMsg(tk_getSaveFile)

    test filebox-4.4 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -initialdir} msg] $msg
    } {1 {value for "-initialdir" missing}}

    test filebox-4.5 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -parent foo.bar} msg] $msg
    } {1 {bad window path name "foo.bar"}}

    test filebox-4.6 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -filetypes {Foo}} msg] $msg
    } {1 {bad file type "Foo", should be "typeName {extension ?extensions ...?} ?{macType ?macTypes ...?}?"}}

    if {[info commands tk::MotifFDialog] == "" && [info commands ::tk::dialog::file::] == ""} {
	set isNative 1
    } else {
	set isNative 0
    }

    set parent .

    set verylongstring longstring:
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring

    set color #404040
    test filebox-5.1 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent cancel
	tk_getSaveFile -title "Press Cancel ($verylongstring)" -parent $parent
    } ""

    set fileName "12x 455"
    set fileDir [pwd]
    set pathName [file join [pwd] $fileName]

    test filebox-5.2 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Press Ok" \
		-parent $parent -initialfile $fileName -initialdir $fileDir]
    } $pathName

    test filebox-5.3 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToEnterFileByKey $parent $fileName $fileDir
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir $fileDir]
    } $pathName

    test filebox-5.4 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir . \
		-initialfile $fileName]
    } $pathName

    test filebox-5.5 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir /badpath \
		-initialfile $fileName]
    } $pathName

    test filebox-5.6 "tk_getSaveFile command" {nonUnixUserInteraction} {
	toplevel .t1; toplevel .t2
	wm geometry .t1 +0+0
	wm geometry .t2 +0+0
	ToPressButton .t1 ok
	set choice {}
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t1 -initialdir $fileDir \
		-initialfile $fileName]
	ToPressButton .t2 ok
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t2 -initialdir $fileDir \
		-initialfile $fileName]
	ToPressButton .t1 ok
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t1 -initialdir $fileDir \
		-initialfile $fileName]
	destroy .t1
	destroy .t2
	set choice
    } [list $pathName $pathName $pathName]

    foreach x [lsort -integer [array names filters]] {
	test filebox-6.$x "tk_getSaveFile command" {nonUnixUserInteraction} {
	    ToPressButton $parent ok
	    set choice [tk_getSaveFile -title "Press Ok" -filetypes $filters($x)\
		    -parent $parent -initialfile $fileName -initialdir $fileDir]
	} $pathName[lindex $addedExtensions $x]
    }

    # The rest of the tests need to be executed on Unix only.
    # The test whether the dialog box widgets were implemented correctly.
    # These tests are not
    # needed on the other platforms because they use native file dialogs.
}

set tk_strictMotif $tk_strictMotif_old

# cleanup
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: filebox.test,v 1.7.6.2 2000/09/26 16:09:17 spolk Exp $
d12 9
a20 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
a23 6
# Some tests require user interaction on non-unix platform

set ::tcltest::testConfig(nonUnixUserInteraction) \
    [expr {$::tcltest::testConfig(userInteraction) || \
	$::tcltest::testConfig(unixOnly)}]

d108 2
a109 1
set unknownOptionsMsg {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -parent, or -title}}
d116 19
d141 2
d144 1
d147 5
d154 119
a272 3
    #
    # Test both the "open" and the "save" dialogs
    #
d274 13
a286 15
    foreach command "tk_getOpenFile tk_getSaveFile" {
	test filebox-1.1 "$command command" {
	    list [catch {$command -foo} msg] $msg
	} $unknownOptionsMsg

	catch {$command -foo 1} msg
	regsub -all ,      $msg "" options
	regsub \"-foo\" $options "" options

	foreach option $options {
	    if {[string index $option 0] == "-"} {
		test filebox-1.2 "$command command" {
		    list [catch {$command $option} msg] $msg
		} [list 1 "value for \"$option\" missing"]
	    }
d288 1
d290 15
a304 21
	test filebox-1.3 "$command command" {
	    list [catch {$command -foo bar} msg] $msg
	} $unknownOptionsMsg

	test filebox-1.4 "$command command" {
	    list [catch {$command -initialdir} msg] $msg
	} {1 {value for "-initialdir" missing}}

	test filebox-1.5 "$command command" {
	    list [catch {$command -parent foo.bar} msg] $msg
	} {1 {bad window path name "foo.bar"}}

	test filebox-1.6 "$command command" {
	    list [catch {$command -filetypes {Foo}} msg] $msg
	} {1 {bad file type "Foo", should be "typeName {extension ?extensions ...?} ?{macType ?macTypes ...?}?"}}

	if {[info commands tkMotifFDialog] == "" && [info commands ::tk::dialog::file::tkFDialog] == ""} {
	    set isNative 1
	} else {
	    set isNative 0
	}
d306 5
a310 1
	set parent .
d312 1
a312 38
	set verylongstring longstring:
	set verylongstring $verylongstring$verylongstring
	set verylongstring $verylongstring$verylongstring
	set verylongstring $verylongstring$verylongstring
	set verylongstring $verylongstring$verylongstring
#	set verylongstring $verylongstring$verylongstring
#	set verylongstring $verylongstring$verylongstring
#	set verylongstring $verylongstring$verylongstring
#	set verylongstring $verylongstring$verylongstring
#	set verylongstring $verylongstring$verylongstring

	set color #404040
	test filebox-2.1 "$command command" {nonUnixUserInteraction} {
	    ToPressButton $parent cancel
	    $command -title "Press Cancel ($verylongstring)" -parent $parent
	} ""

	if {$command == "tk_getSaveFile"} {
	    set fileName "12x 455"
	    set fileDir [pwd]
	    set pathName [file join [pwd] $fileName]
	} else {
	    set fileName $tmpFile
	    set fileDir [pwd]
	    set pathName [file join $fileDir $fileName]
	}

	test filebox-2.2 "$command command" {nonUnixUserInteraction} {
	    ToPressButton $parent ok
	    set choice [$command -title "Press Ok" \
			    -parent $parent -initialfile $fileName -initialdir $fileDir]
	} $pathName

	test filebox-2.3 "$command command" {nonUnixUserInteraction} {
	    ToEnterFileByKey $parent $fileName $fileDir
	    set choice [$command -title "Enter \"$fileName\" and press Ok" \
			    -parent $parent -initialdir $fileDir]
	} $pathName
d314 71
a384 6
	test filebox-2.4 "$command command" {nonUnixUserInteraction} {
	    ToPressButton $parent ok
	    set choice [$command -title "Enter \"$fileName\" and press Ok" \
			    -parent $parent -initialdir . \
			    -initialfile $fileName]
	} $pathName
d386 2
a387 1
	test filebox-2.5 "$command command" {nonUnixUserInteraction} {
d389 3
a391 65
	    set choice [$command -title "Enter \"$fileName\" and press Ok" \
			    -parent $parent -initialdir /badpath \
			    -initialfile $fileName]
	} $pathName

	test filebox-2.6 "$command command" {nonUnixUserInteraction} {
	    toplevel .t1; toplevel .t2
	    wm geometry .t1 +0+0
	    wm geometry .t2 +0+0
	    ToPressButton .t1 ok
	    set choice {}
	    lappend choice [$command \
		    -title "Enter \"$fileName\" and press Ok" \
		    -parent .t1 -initialdir $fileDir \
		    -initialfile $fileName]
	    ToPressButton .t2 ok
	    lappend choice [$command \
		    -title "Enter \"$fileName\" and press Ok" \
		    -parent .t2 -initialdir $fileDir \
		    -initialfile $fileName]
	    ToPressButton .t1 ok
	    lappend choice [$command \
		    -title "Enter \"$fileName\" and press Ok" \
		    -parent .t1 -initialdir $fileDir \
		    -initialfile $fileName]
	    destroy .t1
	    destroy .t2
	    set choice
	} [list $pathName $pathName $pathName]
 


	set filters(1) {}

	set filters(2) {
	    {"Text files"	{.txt .doc}	}
	    {"Text files"	{}		TEXT}
	    {"Tcl Scripts"	{.tcl}		TEXT}
	    {"C Source Files"	{.c .h}		}
	    {"All Source Files"	{.tcl .c .h}	}
	    {"Image Files"	{.gif}		}
	    {"Image Files"	{.jpeg .jpg}	}
	    {"Image Files"	""		{GIFF JPEG}}
	    {"All files"	*}
	}

	set filters(3) {
	    {"Text files"	{.txt .doc}	TEXT}
	    {"Foo"		{""}		TEXT}
	}

	foreach x [lsort -integer [array names filters]] {
	    test filebox-3.$x "$command command" {nonUnixUserInteraction} {
		ToPressButton $parent ok
		set choice [$command -title "Press Ok" -filetypes $filters($x)\
				-parent $parent -initialfile $fileName -initialdir $fileDir]
	    } $pathName
	}

	# The rest of the tests need to be executed on Unix only.
	# The test whether the dialog box widgets were implemented correctly.
	# These tests are not
	# needed on the other platforms because they use native file dialogs.

	# end inner if
d394 4
a397 1
    # end outer if
a404 1

@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d6 2
d9 1
a9 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: filebox.test,v 1.9 1999/01/26 04:11:34 jingham Exp $
d11 4
d18 6
d57 1
a57 1
    upvar #0 [winfo name $w] data
d78 1
a78 1
    upvar #0 [winfo name $w] data
a101 4
if {[string compare test [info procs test]] == 1} {
    source defs
}

d108 7
a130 7

	if {$command == "tk_getOpenFile" && $mode == 0} {
	    set unknownOptionsMsg {1 {unknown option "-foo", must be -defaultextension, -filetypes, -initialdir, -initialfile, -multiple, -parent or -title}}
	} else {
	    set unknownOptionsMsg {1 {unknown option "-foo", must be -defaultextension, -filetypes, -initialdir, -initialfile, -parent or -title}}
	}

d135 1
d163 1
a163 1
	if {[info commands tkMotifFDialog] == "" && [info commands tkFDialog] == ""} {
a168 4
	if {$isNative && ![info exists INTERACTIVE]} {
	    continue
	}

d183 1
a183 1
	test filebox-2.1 "$command command" {
a187 1

d193 1
a193 4
	    set thisFile [info script]
	    set fileName [file tail $thisFile]
	    set appPWD [pwd]
	    cd [file dirname $thisFile]
a194 1
	    cd $appPWD
d198 1
a198 1
	test filebox-2.2 "$command command" {
d204 1
a204 1
	test filebox-2.3 "$command command" {
d210 1
a210 1
	test filebox-2.4 "$command command" {
d217 1
a217 1
	test filebox-2.5 "$command command" {
d224 1
a224 1
	test filebox-2.6 "$command command" {
d226 2
d271 1
a271 1
	    test filebox-3.$x "$command command" {
d278 3
a280 3
	#
	# The rest of the tests need to be executed on Unix only. The test whether
	# the dialog box widgets were implemented correctly. These tests are not
a281 4
	#



d291 4
a294 7
if {$isNative && ![info exists INTERACTIVE]} {
    puts " Some tests were skipped because they could not be performed"
    puts " automatically on this platform. If you wish to execute them"
    puts " interactively, set the TCL variable INTERACTIVE and re-run"
    puts " the test."
    return
}
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a5 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d7 4
a10 1
# RCS: @@(#) $Id: filebox.test,v 1.7.6.2 2000/09/26 16:09:17 spolk Exp $
a12 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

a14 6
# Some tests require user interaction on non-unix platform

set ::tcltest::testConfig(nonUnixUserInteraction) \
    [expr {$::tcltest::testConfig(userInteraction) || \
	$::tcltest::testConfig(unixOnly)}]

d48 1
a48 1
    upvar ::tk::dialog::file::__tk_filedialog data
d69 1
a69 1
    upvar ::tk::dialog::file::__tk_filedialog data
d93 4
a102 7
set unknownOptionsMsg {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -parent, or -title}}

set tmpFile "filebox.tmp"
makeFile {
    # this file can be empty!
} $tmpFile

d119 7
a129 1
	catch {$command -foo 1} msg
d157 1
a157 1
	if {[info commands tkMotifFDialog] == "" && [info commands ::tk::dialog::file::tkFDialog] == ""} {
d163 4
d181 1
a181 1
	test filebox-2.1 "$command command" {nonUnixUserInteraction} {
d186 1
d192 4
a195 1
	    set fileName $tmpFile
d197 1
d201 1
a201 1
	test filebox-2.2 "$command command" {nonUnixUserInteraction} {
d207 1
a207 1
	test filebox-2.3 "$command command" {nonUnixUserInteraction} {
d213 1
a213 1
	test filebox-2.4 "$command command" {nonUnixUserInteraction} {
d220 1
a220 1
	test filebox-2.5 "$command command" {nonUnixUserInteraction} {
d227 1
a227 1
	test filebox-2.6 "$command command" {nonUnixUserInteraction} {
a228 2
	    wm geometry .t1 +0+0
	    wm geometry .t2 +0+0
d272 1
a272 1
	    test filebox-3.$x "$command command" {nonUnixUserInteraction} {
d279 3
a281 3
	# The rest of the tests need to be executed on Unix only.
	# The test whether the dialog box widgets were implemented correctly.
	# These tests are not
d283 4
d296 7
a302 4
# cleanup
::tcltest::cleanupTests
return

@


1.1.1.3
log
@import tk 8.4.0
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: filebox.test,v 1.13 2002/07/14 05:48:46 dgp Exp $
d12 5
a16 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d18 1
a18 2
namespace import -force tcltest::makeFile
namespace import -force tcltest::removeFile
d20 3
a22 1
set tk_strictMotif_old $tk_strictMotif
d108 1
a108 2
set unknownOptionsMsg(tk_getOpenFile) {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -multiple, -parent, or -title}}
set unknownOptionsMsg(tk_getSaveFile) {1 {bad option "-foo": must be -defaultextension, -filetypes, -initialdir, -initialfile, -parent, or -title}}
a114 19
array set filters {
    1 {}
    2 {
	{"Text files"		{.txt .doc}	}
	{"Text files"		{}		TEXT}
	{"Tcl Scripts"		{.tcl}		TEXT}
	{"C Source Files"	{.c .h}		}
	{"All Source Files"	{.tcl .c .h}	}
	{"Image Files"		{.gif}		}
	{"Image Files"		{.jpeg .jpg}	}
	{"Image Files"		""		{GIFF JPEG}}
	{"All files"		*}
    }
    3 {
	{"Text files"		{.txt .doc}	TEXT}
	{"Foo"			{""}		TEXT}
    }
}

a120 2
    # Note that this can use the same test number twice!
    #
a121 1
    set addedExtensions {}
a123 5
	# Extension adding is only done when using the non-motif file
	# box with an extension-less filename
	if {!$mode} {
	    set addedExtensions {NONE {} .txt .txt}
	}
d126 20
a145 119
    test filebox-1.1 "tk_getOpenFile command" {
	list [catch {tk_getOpenFile -foo} msg] $msg
    } $unknownOptionsMsg(tk_getOpenFile)

    catch {tk_getOpenFile -foo 1} msg
    regsub -all ,      $msg "" options
    regsub \"-foo\" $options "" options
    
    foreach option $options {
        if {[string index $option 0] == "-"} {
    	test filebox-1.2 "tk_getOpenFile command" {
    	    list [catch {tk_getOpenFile $option} msg] $msg
    	} [list 1 "value for \"$option\" missing"]
        }
    }
    
    test filebox-1.3 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -foo bar} msg] $msg
    } $unknownOptionsMsg(tk_getOpenFile)
    
    test filebox-1.4 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -initialdir} msg] $msg
    } {1 {value for "-initialdir" missing}}
    
    test filebox-1.5 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -parent foo.bar} msg] $msg
    } {1 {bad window path name "foo.bar"}}
    
    test filebox-1.6 "tk_getOpenFile command" {
        list [catch {tk_getOpenFile -filetypes {Foo}} msg] $msg
    } {1 {bad file type "Foo", should be "typeName {extension ?extensions ...?} ?{macType ?macTypes ...?}?"}}
    
    if {[info commands tk::MotifFDialog] == "" && [info commands ::tk::dialog::file::] == ""} {
        set isNative 1
    } else {
        set isNative 0
    }
    
    set parent .
    
    set verylongstring longstring:
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring

    set color #404040
    test filebox-2.1 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent cancel
        tk_getOpenFile -title "Press Cancel ($verylongstring)" -parent $parent
    } ""
    
    set fileName $tmpFile
    set fileDir [pwd]
    set pathName [file join $fileDir $fileName]
    
    test filebox-2.2 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Press Ok" \
    		    -parent $parent -initialfile $fileName -initialdir $fileDir]
    } $pathName
    
    test filebox-2.3 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToEnterFileByKey $parent $fileName $fileDir
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir $fileDir]
    } $pathName
    
    test filebox-2.4 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir . \
    		    -initialfile $fileName]
    } $pathName
    
    test filebox-2.5 "tk_getOpenFile command" {nonUnixUserInteraction} {
        ToPressButton $parent ok
        set choice [tk_getOpenFile -title "Enter \"$fileName\" and press Ok" \
    		    -parent $parent -initialdir /badpath \
    		    -initialfile $fileName]
    } $pathName
    
    test filebox-2.6 "tk_getOpenFile command" {nonUnixUserInteraction} {
        toplevel .t1; toplevel .t2
        wm geometry .t1 +0+0
        wm geometry .t2 +0+0
        ToPressButton .t1 ok
        set choice {}
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t1 -initialdir $fileDir \
    	    -initialfile $fileName]
        ToPressButton .t2 ok
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t2 -initialdir $fileDir \
    	    -initialfile $fileName]
        ToPressButton .t1 ok
        lappend choice [tk_getOpenFile \
    	    -title "Enter \"$fileName\" and press Ok" \
    	    -parent .t1 -initialdir $fileDir \
    	    -initialfile $fileName]
        destroy .t1
        destroy .t2
        set choice
    } [list $pathName $pathName $pathName]

    foreach x [lsort -integer [array names filters]] {
        test filebox-3.$x "tk_getOpenFile command" {nonUnixUserInteraction} {
    	ToPressButton $parent ok
    	set choice [tk_getOpenFile -title "Press Ok" -filetypes $filters($x)\
    			-parent $parent -initialfile $fileName -initialdir $fileDir]
        } $pathName
    }
d147 20
a166 13
    test filebox-4.1 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -foo} msg] $msg
    } $unknownOptionsMsg(tk_getSaveFile)

    catch {tk_getSaveFile -foo 1} msg
    regsub -all ,      $msg "" options
    regsub \"-foo\" $options "" options

    foreach option $options {
	if {[string index $option 0] == "-"} {
	    test filebox-4.2 "tk_getSaveFile command" {
		list [catch {tk_getSaveFile $option} msg] $msg
	    } [list 1 "value for \"$option\" missing"]
a167 1
    }
d169 1
a169 15
    test filebox-4.3 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -foo bar} msg] $msg
    } $unknownOptionsMsg(tk_getSaveFile)

    test filebox-4.4 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -initialdir} msg] $msg
    } {1 {value for "-initialdir" missing}}

    test filebox-4.5 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -parent foo.bar} msg] $msg
    } {1 {bad window path name "foo.bar"}}

    test filebox-4.6 "tk_getSaveFile command" {
	list [catch {tk_getSaveFile -filetypes {Foo}} msg] $msg
    } {1 {bad file type "Foo", should be "typeName {extension ?extensions ...?} ?{macType ?macTypes ...?}?"}}
d171 26
a196 5
    if {[info commands tk::MotifFDialog] == "" && [info commands ::tk::dialog::file::] == ""} {
	set isNative 1
    } else {
	set isNative 0
    }
d198 11
a208 1
    set parent .
d210 6
a215 71
    set verylongstring longstring:
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring
    # set verylongstring $verylongstring$verylongstring

    set color #404040
    test filebox-5.1 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent cancel
	tk_getSaveFile -title "Press Cancel ($verylongstring)" -parent $parent
    } ""

    set fileName "12x 455"
    set fileDir [pwd]
    set pathName [file join [pwd] $fileName]

    test filebox-5.2 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Press Ok" \
		-parent $parent -initialfile $fileName -initialdir $fileDir]
    } $pathName

    test filebox-5.3 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToEnterFileByKey $parent $fileName $fileDir
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir $fileDir]
    } $pathName

    test filebox-5.4 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir . \
		-initialfile $fileName]
    } $pathName

    test filebox-5.5 "tk_getSaveFile command" {nonUnixUserInteraction} {
	ToPressButton $parent ok
	set choice [tk_getSaveFile -title "Enter \"$fileName\" and press Ok" \
		-parent $parent -initialdir /badpath \
		-initialfile $fileName]
    } $pathName

    test filebox-5.6 "tk_getSaveFile command" {nonUnixUserInteraction} {
	toplevel .t1; toplevel .t2
	wm geometry .t1 +0+0
	wm geometry .t2 +0+0
	ToPressButton .t1 ok
	set choice {}
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t1 -initialdir $fileDir \
		-initialfile $fileName]
	ToPressButton .t2 ok
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t2 -initialdir $fileDir \
		-initialfile $fileName]
	ToPressButton .t1 ok
	lappend choice [tk_getSaveFile \
		-title "Enter \"$fileName\" and press Ok" \
		-parent .t1 -initialdir $fileDir \
		-initialfile $fileName]
	destroy .t1
	destroy .t2
	set choice
    } [list $pathName $pathName $pathName]
d217 1
a217 2
    foreach x [lsort -integer [array names filters]] {
	test filebox-6.$x "tk_getSaveFile command" {nonUnixUserInteraction} {
d219 65
a283 3
	    set choice [tk_getSaveFile -title "Press Ok" -filetypes $filters($x)\
		    -parent $parent -initialfile $fileName -initialdir $fileDir]
	} $pathName[lindex $addedExtensions $x]
d286 1
a286 4
    # The rest of the tests need to be executed on Unix only.
    # The test whether the dialog box widgets were implemented correctly.
    # These tests are not
    # needed on the other platforms because they use native file dialogs.
d294 1
@


