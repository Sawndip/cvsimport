head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.53;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.07;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the procedures in tkMacFont.c. 
# It is organized in the standard fashion for Tcl tests.
#
# Some of these tests are visually oriented and cannot be checked
# programmatically (such as "does an underlined font appear to be
# underlined?"); these tests attempt to exercise the code in question,
# but there are no results that can be checked.  
#
# Copyright (c) 1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: macFont.test,v 1.6 2002/07/14 05:48:46 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

catch {destroy .b}
toplevel .b
update idletasks

set courier {Courier 12}
set cx [font measure $courier 0]

set fixed {Monaco 12}
label .b.l -padx 0 -pady 0 -bd 0 -highlightthickness 0 -justify left -text "0" -font $fixed
pack .b.l
canvas .b.c -closeenough 0

set t [.b.c create text 0 0 -anchor nw -just left -font $courier]
pack .b.c
update

set ax [winfo reqwidth .b.l]
set ay [winfo reqheight .b.l]
proc getsize {} {
    update
    return "[winfo reqwidth .b.l] [winfo reqheight .b.l]"
}

testConstraint gothic 0
set gothic {gothic 12}
set mx [font measure  $gothic \u4e4e]
if {[font actual $gothic -family] != [font actual system -family]} {
    testConstraint gothic 1
}

test macFont-1.1 {TkpFontPkgInit} {macOnly} {
} {}

test macfont-2.1 {TkpGetNativeFont: not native} {macOnly} {
    list [catch {font measure {} xyz} msg] $msg
} {1 {font "" doesn't exist}}
test macFont-2.2 {TkpGetNativeFont: native} {macOnly} {
    font measure system "0"
    font measure application "0"
    set x {}
} {}

test macFont-3.1 {TkpGetFontFromAttributes: no family} {macOnly} {
    font actual {-underline 1} -family
} [font actual system -family]
test macFont-3.2 {TkpGetFontFromAttributes: long family name} {macOnly} {
    set x "12345678901234567890123456789012345678901234567890"
    set x "$x$x$x$x$x$x"
    font actual "-family $x" -family
} [font actual system -family]
test macFont-3.3 {TkpGetFontFromAttributes: family} {macOnly} {
    font actual {-family Courier} -family
} {Courier}
test macFont-3.4 {TkpGetFontFromAttributes: Times fonts} {macOnly} {
    set x {}
    lappend x [font actual {-family "Times"} -family]
    lappend x [font actual {-family "Times New Roman"} -family]
} {Times Times}
test macFont-3.5 {TkpGetFontFromAttributes: Courier fonts} {macOnly} {
    set x {}
    lappend x [font actual {-family "Courier"} -family]
    lappend x [font actual {-family "Courier New"} -family]
} {Courier Courier}
test macFont-3.6 {TkpGetFontFromAttributes: Helvetica fonts} {macOnly} {
    set x {}
    lappend x [font actual {-family "Geneva"} -family]
    lappend x [font actual {-family "Helvetica"} -family]
    lappend x [font actual {-family "Arial"} -family]
} {Geneva Helvetica Helvetica}
test macFont-3.7 {TkpGetFontFromAttributes: try aliases} {macOnly} {
    font actual {arial 10} -family
} {Helvetica}    
test macFont-3.8 {TkpGetFontFromAttributes: try fallbacks} {macOnly} {
    font actual {{ms sans serif} 10} -family
} {Chicago}
test macFont-3.9 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-weight normal} -weight
} {normal}
test macFont-3.10 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-weight bold} -weight
} {bold}
test macFont-3.11 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-slant roman} -slant
} {roman}
test macFont-3.12 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-slant italic} -slant
} {italic}
test macFont-3.13 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-underline false} -underline
} {0}
test macFont-3.14 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-underline true} -underline
} {1}
test macFont-3.15 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-overstrike false} -overstrike
} {0}
test macFont-3.16 {TkpGetFontFromAttributes: styles} {macOnly} {
    font actual {-overstrike true} -overstrike
} {0}

test macFont-4.1 {TkpDeleteFont} {macOnly} {
    font actual {-family xyz}
    set x {}
} {}

test macFont-5.1 {TkpGetFontFamilies} {macOnly} {
    expr {[lsearch [font families] Geneva] > 0}
} {1}

test macFont-6.1 {TkpGetSubFonts} {testfont gothic macOnly} {
    .b.l config -text "abc\u4e4e" 
    update
    set x [testfont subfonts $fixed]
} "Monaco [font actual $gothic -family]"    

test macFont-7.1 {Tk_MeasureChars: unbounded right margin} {macOnly} {
    .b.l config -wrap 0 -text "000000"
    getsize
} "[expr $ax*6] $ay"
test macFont-7.2 {Tk_MeasureChars: static width buffer exceeded} {macOnly} {
    .b.l config -wrap 100000 -text "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    getsize
} "[expr $ax*256] $ay"
test macFont-7.3 {Tk_MeasureChars: all chars did fit} {macOnly} {
    .b.l config -wrap [expr $ax*10] -text "00000000"
    getsize
} "[expr $ax*8] $ay"
test macFont-7.4 {Tk_MeasureChars: not all chars fit} {macOnly} {
    .b.l config -wrap [expr $ax*6] -text "00000000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test macFont-7.5 {Tk_MeasureChars: already saw space in line} {macOnly} {
    .b.l config -wrap [expr $ax*12] -text "000000    0000000"
    getsize
} "[expr $ax*7] [expr $ay*2]"
test macFont-7.6 {Tk_MeasureChars: internal spaces significant} {macOnly} {
    .b.l config -wrap [expr $ax*12] -text "000  00   00000"
    getsize
} "[expr $ax*7] [expr $ay*2]"
test macFont-7.7 {Tk_MeasureChars: include last partial char} {macOnly} {
    .b.c dchars $t 0 end
    .b.c insert $t 0 "0000"
    .b.c index $t @@[expr int($ax*2.5)],1
} {2}
test macFont-7.8 {Tk_MeasureChars: at least one char on line} { macOnly} {
    .b.l config -text "000000" -wrap 1
    getsize
} "$ax [expr $ay*6]"
test macFont-7.9 {Tk_MeasureChars: whole words} {macOnly} {
    .b.l config -wrap [expr $ax*8] -text "000000 0000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
test macFont-7.10 {Tk_MeasureChars: make first part of word fit} {macOnly} {
    .b.l config -wrap [expr $ax*12] -text "0000000000000000"
    getsize
} "[expr $ax*12] [expr $ay*2]"
test macFont-7.11 {Tk_MeasureChars: numBytes == 0} {macOnly} {
    font measure system {}
} {0}
test macFont-7.12 {Tk_MeasureChars: maxLength < 0} {macOnly} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.13 {Tk_MeasureChars: loop on each char} {macOnly} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.14 {Tk_MeasureChars: p == end} {macOnly} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.15 {Tk_MeasureChars: p > end} {macOnly} {
    font measure $courier abc\xc2
} "[expr $cx*4]"
test macFont-7.16 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic macOnly} {
    font measure $courier abc\u4e4edef
} [expr $cx*6+$mx]
test macFont-7.17 {Tk_MeasureChars: measure no chars (in loop)} {gothic macOnly} {
    font measure $courier \u4e4edef
} [expr $mx+$cx*3]
test macFont-7.18 {Tk_MeasureChars: final measure} {gothic macOnly} {
    font measure $courier \u4e4edef
} [expr $mx+$cx*3]
test macFont-7.19 {Tk_MeasureChars: final measure (no chars)} {gothic macOnly} {
    font measure $courier \u4e4e
} [expr $mx]
test macFont-7.20 {Tk_MeasureChars: maxLength >= 0} {macOnly} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.21 {Tk_MeasureChars: loop on each char} {macOnly} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.22 {Tk_MeasureChars: p == end} {macOnly} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.23 {Tk_MeasureChars: p > end} {macOnly} {
    .b.l config -wrap [expr $ax*8] -text "00\xc2"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.24 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic macOnly} {
    .b.l config -wrap [expr $ax*8] -text "00\u4e4e00"
    getsize
} "[expr $ax*4+$mx] $ay"
test macFont-7.25 {Tk_MeasureChars: measure no chars (in loop)} {gothic macOnly} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e00"
    getsize
} "[expr $mx+$ax*2] $ay"
test macFont-7.26 {Tk_MeasureChars: rest == NULL} {gothic macOnly} {
    .b.l config -wrap [expr $ax*20] -text "000000\u4e4e\u4e4e00"
    getsize
} "[expr $ax*8+$mx*2] $ay"
test macFont-7.27 {Tk_MeasureChars: rest != NULL in first segment} {gothic macOnly} {
    .b.l config -wrap [expr $ax*5] -text "000000\u4e4e\u4e4f00"
    getsize
} "[expr $ax*5] [expr $ay*3]"
test macFont-7.28 {Tk_MeasureChars: rest != NULL in next segment} {gothic macOnly} {
    # even some of the "0"s would fit after \u4e4d, they should all wrap to next line.  
    .b.l config -wrap [expr $ax*8] -text "\u4e4d\u4e4d000000\u4e4e\u4e4f00"
    getsize
} "[expr $ax*6+$mx] [expr $ay*3]"
test macFont-7.29 {Tk_MeasureChars: final measure} {gothic macOnly} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e00"
    getsize
} "[expr $mx+$ax*2] $ay"
test macFont-7.30 {Tk_MeasureChars: final measure (no chars)} {gothic macOnly} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e"
    getsize
} "$mx $ay"
test macFont-7.31 {Tk_MeasureChars: rest == NULL} {macOnly} {
    .b.l config -wrap [expr $ax*1000] -text 0000
    getsize
} "[expr $ax*4] $ay"
test macFont-7.32 {Tk_MeasureChars: rest != NULL} {macOnly} {
    .b.l config -wrap [expr $ax*6] -text "00000000"
    getsize
} "[expr $ax*6] [expr $ay*2]"

test macFont-8.1 {Tk_DrawChars procedure} {macOnly} {
    .b.l config -text "a"
    update
} {}

test macFont-9.1 {AllocMacFont: use old font} {macOnly} {
    font create xyz
    button .c -font xyz
    font configure xyz -family times
    update
    destroy .c
    font delete xyz
} {}
test macFont-9.2 {AllocMacFont: extract info from style} {macOnly} {
    font actual {Monaco 9 bold italic underline overstrike}
} {-family Monaco -size 9 -weight bold -slant italic -underline 1 -overstrike 0}
test macFont-9.3 {AllocMacFont: extract text metrics} {macOnly} {
    font metric {Geneva 10} -fixed
} {0}
test macFont-9.4 {AllocMacFont: extract text metrics} {macOnly} {
    font metric "Monaco 9" -fixed
} {1}

destroy .b

# cleanup
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: macFont.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $
d15 6
a20 9
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {$tcl_platform(platform)!="macintosh"} {
    puts "skipping: Mac only tests..."
    ::tcltest::cleanupTests
    return
}
d45 1
a45 1
set ::tcltest::testConfig(gothic) 0
d49 1
a49 1
    set ::tcltest::testConfig(gothic) 1
d52 1
a52 1
test macFont-1.1 {TkpFontPkgInit} {
d55 1
a55 1
test macfont-2.1 {TkpGetNativeFont: not native} {
d58 1
a58 1
test macFont-2.2 {TkpGetNativeFont: native} {
d64 1
a64 1
test macFont-3.1 {TkpGetFontFromAttributes: no family} {
d67 1
a67 1
test macFont-3.2 {TkpGetFontFromAttributes: long family name} {
d72 1
a72 1
test macFont-3.3 {TkpGetFontFromAttributes: family} {
d75 1
a75 1
test macFont-3.4 {TkpGetFontFromAttributes: Times fonts} {
d80 1
a80 1
test macFont-3.5 {TkpGetFontFromAttributes: Courier fonts} {
d85 1
a85 1
test macFont-3.6 {TkpGetFontFromAttributes: Helvetica fonts} {
d91 1
a91 1
test macFont-3.7 {TkpGetFontFromAttributes: try aliases} {
d94 1
a94 1
test macFont-3.8 {TkpGetFontFromAttributes: try fallbacks} {
d97 1
a97 1
test macFont-3.9 {TkpGetFontFromAttributes: styles} {
d100 1
a100 1
test macFont-3.10 {TkpGetFontFromAttributes: styles} {
d103 1
a103 1
test macFont-3.11 {TkpGetFontFromAttributes: styles} {
d106 1
a106 1
test macFont-3.12 {TkpGetFontFromAttributes: styles} {
d109 1
a109 1
test macFont-3.13 {TkpGetFontFromAttributes: styles} {
d112 1
a112 1
test macFont-3.14 {TkpGetFontFromAttributes: styles} {
d115 1
a115 1
test macFont-3.15 {TkpGetFontFromAttributes: styles} {
d118 1
a118 1
test macFont-3.16 {TkpGetFontFromAttributes: styles} {
d122 1
a122 1
test macFont-4.1 {TkpDeleteFont} {
d127 1
a127 1
test macFont-5.1 {TkpGetFontFamilies} {
d131 1
a131 1
test macFont-6.1 {TkpGetSubFonts} {gothic} {
d137 1
a137 1
test macFont-7.1 {Tk_MeasureChars: unbounded right margin} {
d141 1
a141 1
test macFont-7.2 {Tk_MeasureChars: static width buffer exceeded} {
d145 1
a145 1
test macFont-7.3 {Tk_MeasureChars: all chars did fit} {
d149 1
a149 1
test macFont-7.4 {Tk_MeasureChars: not all chars fit} {
d153 1
a153 1
test macFont-7.5 {Tk_MeasureChars: already saw space in line} {
d157 1
a157 1
test macFont-7.6 {Tk_MeasureChars: internal spaces significant} {
d161 1
a161 1
test macFont-7.7 {Tk_MeasureChars: include last partial char} {
d166 1
a166 1
test macFont-7.8 {Tk_MeasureChars: at least one char on line} { 
d170 1
a170 1
test macFont-7.9 {Tk_MeasureChars: whole words} {
d174 1
a174 1
test macFont-7.10 {Tk_MeasureChars: make first part of word fit} {
d178 1
a178 1
test macFont-7.11 {Tk_MeasureChars: numBytes == 0} {
d181 1
a181 1
test macFont-7.12 {Tk_MeasureChars: maxLength < 0} {
d184 1
a184 1
test macFont-7.13 {Tk_MeasureChars: loop on each char} {
d187 1
a187 1
test macFont-7.14 {Tk_MeasureChars: p == end} {
d190 1
a190 1
test macFont-7.15 {Tk_MeasureChars: p > end} {
d193 1
a193 1
test macFont-7.16 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic} {
d196 1
a196 1
test macFont-7.17 {Tk_MeasureChars: measure no chars (in loop)} {gothic} {
d199 1
a199 1
test macFont-7.18 {Tk_MeasureChars: final measure} {gothic} {
d202 1
a202 1
test macFont-7.19 {Tk_MeasureChars: final measure (no chars)} {gothic} {
d205 1
a205 1
test macFont-7.20 {Tk_MeasureChars: maxLength >= 0} {
d209 1
a209 1
test macFont-7.21 {Tk_MeasureChars: loop on each char} {
d213 1
a213 1
test macFont-7.22 {Tk_MeasureChars: p == end} {
d217 1
a217 1
test macFont-7.23 {Tk_MeasureChars: p > end} {
d221 1
a221 1
test macFont-7.24 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic} {
d225 1
a225 1
test macFont-7.25 {Tk_MeasureChars: measure no chars (in loop)} {gothic} {
d229 1
a229 1
test macFont-7.26 {Tk_MeasureChars: rest == NULL} {gothic} {
d233 1
a233 1
test macFont-7.27 {Tk_MeasureChars: rest != NULL in first segment} {gothic} {
d237 1
a237 1
test macFont-7.28 {Tk_MeasureChars: rest != NULL in next segment} {gothic} {
d242 1
a242 1
test macFont-7.29 {Tk_MeasureChars: final measure} {gothic} {
d246 1
a246 1
test macFont-7.30 {Tk_MeasureChars: final measure (no chars)} {gothic} {
d250 1
a250 1
test macFont-7.31 {Tk_MeasureChars: rest == NULL} {
d254 1
a254 1
test macFont-7.32 {Tk_MeasureChars: rest != NULL} {
d259 1
a259 1
test macFont-8.1 {Tk_DrawChars procedure} {
d264 1
a264 1
test macFont-9.1 {AllocMacFont: use old font} {
d272 1
a272 1
test macFont-9.2 {AllocMacFont: extract info from style} {
d275 1
a275 1
test macFont-9.3 {AllocMacFont: extract text metrics} {
d278 1
a278 1
test macFont-9.4 {AllocMacFont: extract text metrics} {
a286 13













@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d10 2
d13 5
a17 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: macFont.test,v 1.2 1998/09/14 18:23:48 stanton Exp $
d20 2
a24 4
if {[string compare test [info procs test]] != 0} {
    source defs
}

d29 1
a29 1
set courier {Courier 10}
d32 2
a33 1
label .b.l -padx 0 -pady 0 -bd 0 -highlightthickness 0 -justify left -text "0" -font "Monaco 9"
d48 11
a58 1
test macfont-1.1 {TkpGetNativeFont procedure: not native} {
d61 1
a61 1
test macfont-1.2 {TkpGetNativeFont procedure: native} {
d67 1
a67 1
test macfont-2.1 {TkpGetFontFromAttributes procedure: no family} {
d70 1
a70 1
test macfont-2.2 {TkpGetFontFromAttributes procedure: long family name} {
d75 1
a75 1
test macfont-2.3 {TkpGetFontFromAttributes procedure: family} {
d78 1
a78 1
test macfont-2.4 {TkpGetFontFromAttributes procedure: Times fonts} {
d83 1
a83 1
test macfont-2.5 {TkpGetFontFromAttributes procedure: Courier fonts} {
d88 1
a88 1
test macfont-2.6 {TkpGetFontFromAttributes procedure: Helvetica fonts} {
d94 7
a100 1
test macfont-2.7 {TkpGetFontFromAttributes procedure: styles} {
d103 1
a103 1
test macfont-2.8 {TkpGetFontFromAttributes procedure: styles} {
d106 1
a106 1
test macfont-2.9 {TkpGetFontFromAttributes procedure: styles} {
d109 1
a109 1
test macfont-2.10 {TkpGetFontFromAttributes procedure: styles} {
d112 1
a112 1
test macfont-2.11 {TkpGetFontFromAttributes procedure: styles} {
d115 1
a115 1
test macfont-2.12 {TkpGetFontFromAttributes procedure: styles} {
d118 1
a118 1
test macfont-2.13 {TkpGetFontFromAttributes procedure: styles} {
d121 1
a121 1
test macfont-2.14 {TkpGetFontFromAttributes procedure: styles} {
d125 1
a125 1
test macfont-3.1 {TkpDeleteFont procedure} {
d130 9
a138 4
test macfont-4.1 {TkpGetFontFamilies procedure} {
    font families
    set x {}
} {}
d140 1
a140 1
test macfont-5.1 {Tk_MeasureChars procedure: unbounded right margin} {
d144 1
a144 1
test macfont-5.2 {Tk_MeasureChars procedure: static width buffer exceeded} {
d148 1
a148 1
test macfont-5.3 {Tk_MeasureChars procedure: all chars did fit} {
d152 1
a152 1
test macfont-5.4 {Tk_MeasureChars procedure: not all chars fit} {
d156 1
a156 1
test macfont-5.5 {Tk_MeasureChars procedure: already saw space in line} {
d160 1
a160 1
test macfont-5.6 {Tk_MeasureChars procedure: internal spaces significant} {
d164 1
a164 1
test macfont-5.7 {Tk_MeasureChars procedure: include last partial char} {
d169 1
a169 1
test macfont-5.8 {Tk_MeasureChars procedure: at least one char on line} { 
d173 1
a173 1
test macfont-5.9 {Tk_MeasureChars procedure: whole words} {
d177 1
a177 1
test macfont-5.10 {Tk_MeasureChars procedure: make first part of word fit} {
d181 80
d262 1
a262 1
test macfont-6.1 {Tk_DrawChars procedure} {
d267 1
a267 1
test macfont-7.1 {AllocMacFont procedure: use old font} {
d275 1
a275 1
test macfont-7.2 {AllocMacFont procedure: extract info from style} {
d278 1
a278 1
test macfont-7.3 {AllocMacFont procedure: extract text metrics} {
d281 1
a281 1
test macfont-7.4 {AllocMacFont procedure: extract text metrics} {
d286 17
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a9 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d11 4
a14 1
# RCS: @@(#) $Id: macFont.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $
d16 2
a17 2
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
d20 2
a21 4
if {$tcl_platform(platform)!="macintosh"} {
    puts "skipping: Mac only tests..."
    ::tcltest::cleanupTests
    return
d28 1
a28 1
set courier {Courier 12}
d31 1
a31 2
set fixed {Monaco 12}
label .b.l -padx 0 -pady 0 -bd 0 -highlightthickness 0 -justify left -text "0" -font $fixed
d46 1
a46 11
set ::tcltest::testConfig(gothic) 0
set gothic {gothic 12}
set mx [font measure  $gothic \u4e4e]
if {[font actual $gothic -family] != [font actual system -family]} {
    set ::tcltest::testConfig(gothic) 1
}

test macFont-1.1 {TkpFontPkgInit} {
} {}

test macfont-2.1 {TkpGetNativeFont: not native} {
d49 1
a49 1
test macFont-2.2 {TkpGetNativeFont: native} {
d55 1
a55 1
test macFont-3.1 {TkpGetFontFromAttributes: no family} {
d58 1
a58 1
test macFont-3.2 {TkpGetFontFromAttributes: long family name} {
d63 1
a63 1
test macFont-3.3 {TkpGetFontFromAttributes: family} {
d66 1
a66 1
test macFont-3.4 {TkpGetFontFromAttributes: Times fonts} {
d71 1
a71 1
test macFont-3.5 {TkpGetFontFromAttributes: Courier fonts} {
d76 1
a76 1
test macFont-3.6 {TkpGetFontFromAttributes: Helvetica fonts} {
d82 1
a82 7
test macFont-3.7 {TkpGetFontFromAttributes: try aliases} {
    font actual {arial 10} -family
} {Helvetica}    
test macFont-3.8 {TkpGetFontFromAttributes: try fallbacks} {
    font actual {{ms sans serif} 10} -family
} {Chicago}
test macFont-3.9 {TkpGetFontFromAttributes: styles} {
d85 1
a85 1
test macFont-3.10 {TkpGetFontFromAttributes: styles} {
d88 1
a88 1
test macFont-3.11 {TkpGetFontFromAttributes: styles} {
d91 1
a91 1
test macFont-3.12 {TkpGetFontFromAttributes: styles} {
d94 1
a94 1
test macFont-3.13 {TkpGetFontFromAttributes: styles} {
d97 1
a97 1
test macFont-3.14 {TkpGetFontFromAttributes: styles} {
d100 1
a100 1
test macFont-3.15 {TkpGetFontFromAttributes: styles} {
d103 1
a103 1
test macFont-3.16 {TkpGetFontFromAttributes: styles} {
d107 1
a107 1
test macFont-4.1 {TkpDeleteFont} {
d112 4
a115 9
test macFont-5.1 {TkpGetFontFamilies} {
    expr {[lsearch [font families] Geneva] > 0}
} {1}

test macFont-6.1 {TkpGetSubFonts} {gothic} {
    .b.l config -text "abc\u4e4e" 
    update
    set x [testfont subfonts $fixed]
} "Monaco [font actual $gothic -family]"    
d117 1
a117 1
test macFont-7.1 {Tk_MeasureChars: unbounded right margin} {
d121 1
a121 1
test macFont-7.2 {Tk_MeasureChars: static width buffer exceeded} {
d125 1
a125 1
test macFont-7.3 {Tk_MeasureChars: all chars did fit} {
d129 1
a129 1
test macFont-7.4 {Tk_MeasureChars: not all chars fit} {
d133 1
a133 1
test macFont-7.5 {Tk_MeasureChars: already saw space in line} {
d137 1
a137 1
test macFont-7.6 {Tk_MeasureChars: internal spaces significant} {
d141 1
a141 1
test macFont-7.7 {Tk_MeasureChars: include last partial char} {
d146 1
a146 1
test macFont-7.8 {Tk_MeasureChars: at least one char on line} { 
d150 1
a150 1
test macFont-7.9 {Tk_MeasureChars: whole words} {
d154 1
a154 1
test macFont-7.10 {Tk_MeasureChars: make first part of word fit} {
a157 80
test macFont-7.11 {Tk_MeasureChars: numBytes == 0} {
    font measure system {}
} {0}
test macFont-7.12 {Tk_MeasureChars: maxLength < 0} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.13 {Tk_MeasureChars: loop on each char} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.14 {Tk_MeasureChars: p == end} {
    font measure $courier abcd
} "[expr $cx*4]"
test macFont-7.15 {Tk_MeasureChars: p > end} {
    font measure $courier abc\xc2
} "[expr $cx*4]"
test macFont-7.16 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic} {
    font measure $courier abc\u4e4edef
} [expr $cx*6+$mx]
test macFont-7.17 {Tk_MeasureChars: measure no chars (in loop)} {gothic} {
    font measure $courier \u4e4edef
} [expr $mx+$cx*3]
test macFont-7.18 {Tk_MeasureChars: final measure} {gothic} {
    font measure $courier \u4e4edef
} [expr $mx+$cx*3]
test macFont-7.19 {Tk_MeasureChars: final measure (no chars)} {gothic} {
    font measure $courier \u4e4e
} [expr $mx]
test macFont-7.20 {Tk_MeasureChars: maxLength >= 0} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.21 {Tk_MeasureChars: loop on each char} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.22 {Tk_MeasureChars: p == end} {
    .b.l config -wrap [expr $ax*8] -text "000"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.23 {Tk_MeasureChars: p > end} {
    .b.l config -wrap [expr $ax*8] -text "00\xc2"
    getsize
} "[expr $ax*3] $ay"
test macFont-7.24 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic} {
    .b.l config -wrap [expr $ax*8] -text "00\u4e4e00"
    getsize
} "[expr $ax*4+$mx] $ay"
test macFont-7.25 {Tk_MeasureChars: measure no chars (in loop)} {gothic} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e00"
    getsize
} "[expr $mx+$ax*2] $ay"
test macFont-7.26 {Tk_MeasureChars: rest == NULL} {gothic} {
    .b.l config -wrap [expr $ax*20] -text "000000\u4e4e\u4e4e00"
    getsize
} "[expr $ax*8+$mx*2] $ay"
test macFont-7.27 {Tk_MeasureChars: rest != NULL in first segment} {gothic} {
    .b.l config -wrap [expr $ax*5] -text "000000\u4e4e\u4e4f00"
    getsize
} "[expr $ax*5] [expr $ay*3]"
test macFont-7.28 {Tk_MeasureChars: rest != NULL in next segment} {gothic} {
    # even some of the "0"s would fit after \u4e4d, they should all wrap to next line.  
    .b.l config -wrap [expr $ax*8] -text "\u4e4d\u4e4d000000\u4e4e\u4e4f00"
    getsize
} "[expr $ax*6+$mx] [expr $ay*3]"
test macFont-7.29 {Tk_MeasureChars: final measure} {gothic} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e00"
    getsize
} "[expr $mx+$ax*2] $ay"
test macFont-7.30 {Tk_MeasureChars: final measure (no chars)} {gothic} {
    .b.l config -wrap [expr $ax*8] -text "\u4e4e"
    getsize
} "$mx $ay"
test macFont-7.31 {Tk_MeasureChars: rest == NULL} {
    .b.l config -wrap [expr $ax*1000] -text 0000
    getsize
} "[expr $ax*4] $ay"
test macFont-7.32 {Tk_MeasureChars: rest != NULL} {
    .b.l config -wrap [expr $ax*6] -text "00000000"
    getsize
} "[expr $ax*6] [expr $ay*2]"
d159 1
a159 1
test macFont-8.1 {Tk_DrawChars procedure} {
d164 1
a164 1
test macFont-9.1 {AllocMacFont: use old font} {
d172 1
a172 1
test macFont-9.2 {AllocMacFont: extract info from style} {
d175 1
a175 1
test macFont-9.3 {AllocMacFont: extract text metrics} {
d178 1
a178 1
test macFont-9.4 {AllocMacFont: extract text metrics} {
a182 17

# cleanup
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tk 8.4.0
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: macFont.test,v 1.6 2002/07/14 05:48:46 dgp Exp $
d15 9
a23 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d48 1
a48 1
testConstraint gothic 0
d52 1
a52 1
    testConstraint gothic 1
d55 1
a55 1
test macFont-1.1 {TkpFontPkgInit} {macOnly} {
d58 1
a58 1
test macfont-2.1 {TkpGetNativeFont: not native} {macOnly} {
d61 1
a61 1
test macFont-2.2 {TkpGetNativeFont: native} {macOnly} {
d67 1
a67 1
test macFont-3.1 {TkpGetFontFromAttributes: no family} {macOnly} {
d70 1
a70 1
test macFont-3.2 {TkpGetFontFromAttributes: long family name} {macOnly} {
d75 1
a75 1
test macFont-3.3 {TkpGetFontFromAttributes: family} {macOnly} {
d78 1
a78 1
test macFont-3.4 {TkpGetFontFromAttributes: Times fonts} {macOnly} {
d83 1
a83 1
test macFont-3.5 {TkpGetFontFromAttributes: Courier fonts} {macOnly} {
d88 1
a88 1
test macFont-3.6 {TkpGetFontFromAttributes: Helvetica fonts} {macOnly} {
d94 1
a94 1
test macFont-3.7 {TkpGetFontFromAttributes: try aliases} {macOnly} {
d97 1
a97 1
test macFont-3.8 {TkpGetFontFromAttributes: try fallbacks} {macOnly} {
d100 1
a100 1
test macFont-3.9 {TkpGetFontFromAttributes: styles} {macOnly} {
d103 1
a103 1
test macFont-3.10 {TkpGetFontFromAttributes: styles} {macOnly} {
d106 1
a106 1
test macFont-3.11 {TkpGetFontFromAttributes: styles} {macOnly} {
d109 1
a109 1
test macFont-3.12 {TkpGetFontFromAttributes: styles} {macOnly} {
d112 1
a112 1
test macFont-3.13 {TkpGetFontFromAttributes: styles} {macOnly} {
d115 1
a115 1
test macFont-3.14 {TkpGetFontFromAttributes: styles} {macOnly} {
d118 1
a118 1
test macFont-3.15 {TkpGetFontFromAttributes: styles} {macOnly} {
d121 1
a121 1
test macFont-3.16 {TkpGetFontFromAttributes: styles} {macOnly} {
d125 1
a125 1
test macFont-4.1 {TkpDeleteFont} {macOnly} {
d130 1
a130 1
test macFont-5.1 {TkpGetFontFamilies} {macOnly} {
d134 1
a134 1
test macFont-6.1 {TkpGetSubFonts} {testfont gothic macOnly} {
d140 1
a140 1
test macFont-7.1 {Tk_MeasureChars: unbounded right margin} {macOnly} {
d144 1
a144 1
test macFont-7.2 {Tk_MeasureChars: static width buffer exceeded} {macOnly} {
d148 1
a148 1
test macFont-7.3 {Tk_MeasureChars: all chars did fit} {macOnly} {
d152 1
a152 1
test macFont-7.4 {Tk_MeasureChars: not all chars fit} {macOnly} {
d156 1
a156 1
test macFont-7.5 {Tk_MeasureChars: already saw space in line} {macOnly} {
d160 1
a160 1
test macFont-7.6 {Tk_MeasureChars: internal spaces significant} {macOnly} {
d164 1
a164 1
test macFont-7.7 {Tk_MeasureChars: include last partial char} {macOnly} {
d169 1
a169 1
test macFont-7.8 {Tk_MeasureChars: at least one char on line} { macOnly} {
d173 1
a173 1
test macFont-7.9 {Tk_MeasureChars: whole words} {macOnly} {
d177 1
a177 1
test macFont-7.10 {Tk_MeasureChars: make first part of word fit} {macOnly} {
d181 1
a181 1
test macFont-7.11 {Tk_MeasureChars: numBytes == 0} {macOnly} {
d184 1
a184 1
test macFont-7.12 {Tk_MeasureChars: maxLength < 0} {macOnly} {
d187 1
a187 1
test macFont-7.13 {Tk_MeasureChars: loop on each char} {macOnly} {
d190 1
a190 1
test macFont-7.14 {Tk_MeasureChars: p == end} {macOnly} {
d193 1
a193 1
test macFont-7.15 {Tk_MeasureChars: p > end} {macOnly} {
d196 1
a196 1
test macFont-7.16 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic macOnly} {
d199 1
a199 1
test macFont-7.17 {Tk_MeasureChars: measure no chars (in loop)} {gothic macOnly} {
d202 1
a202 1
test macFont-7.18 {Tk_MeasureChars: final measure} {gothic macOnly} {
d205 1
a205 1
test macFont-7.19 {Tk_MeasureChars: final measure (no chars)} {gothic macOnly} {
d208 1
a208 1
test macFont-7.20 {Tk_MeasureChars: maxLength >= 0} {macOnly} {
d212 1
a212 1
test macFont-7.21 {Tk_MeasureChars: loop on each char} {macOnly} {
d216 1
a216 1
test macFont-7.22 {Tk_MeasureChars: p == end} {macOnly} {
d220 1
a220 1
test macFont-7.23 {Tk_MeasureChars: p > end} {macOnly} {
d224 1
a224 1
test macFont-7.24 {Tk_MeasureChars: thisFamilyPtr != lastFamilyPtr} {gothic macOnly} {
d228 1
a228 1
test macFont-7.25 {Tk_MeasureChars: measure no chars (in loop)} {gothic macOnly} {
d232 1
a232 1
test macFont-7.26 {Tk_MeasureChars: rest == NULL} {gothic macOnly} {
d236 1
a236 1
test macFont-7.27 {Tk_MeasureChars: rest != NULL in first segment} {gothic macOnly} {
d240 1
a240 1
test macFont-7.28 {Tk_MeasureChars: rest != NULL in next segment} {gothic macOnly} {
d245 1
a245 1
test macFont-7.29 {Tk_MeasureChars: final measure} {gothic macOnly} {
d249 1
a249 1
test macFont-7.30 {Tk_MeasureChars: final measure (no chars)} {gothic macOnly} {
d253 1
a253 1
test macFont-7.31 {Tk_MeasureChars: rest == NULL} {macOnly} {
d257 1
a257 1
test macFont-7.32 {Tk_MeasureChars: rest != NULL} {macOnly} {
d262 1
a262 1
test macFont-8.1 {Tk_DrawChars procedure} {macOnly} {
d267 1
a267 1
test macFont-9.1 {AllocMacFont: use old font} {macOnly} {
d275 1
a275 1
test macFont-9.2 {AllocMacFont: extract info from style} {macOnly} {
d278 1
a278 1
test macFont-9.3 {AllocMacFont: extract text metrics} {macOnly} {
d281 1
a281 1
test macFont-9.4 {AllocMacFont: extract text metrics} {macOnly} {
d290 13
@


