head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.08;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the option-handling facilities
# of Tk.  It is organized in the standard fashion for Tcl tests.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: option.test,v 1.4 2002/07/13 20:28:35 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

namespace import -force tcltest::makeFile
namespace import -force tcltest::removeFile

catch {destroy .op1}
catch {destroy .op2}
set appName [winfo name .]

# First, test basic retrievals, being sure to trigger all the various
# types of NodeElements (EXACT_LEAF_NAME, WILDCARD_NODE_CLASS, and
# everything in-between).

frame .op1 -class Class1
frame .op2 -class Class2
frame .op1.op3 -class Class1
frame .op1.op4 -class Class3
frame .op2.op5 -class Class2
frame .op1.op3.op6 -class Class4

option clear
option add *Color1 red
option add *x blue
option add *Class1.x yellow
option add $appName.op1.x green
option add *Class2.Color1 orange
option add $appName.op2.op5.Color2 purple
option add $appName.Class1.Class3.y brown
option add $appName*op6*Color2 black
option add $appName*Class1.op1.Color2 grey

test option-1.1 {basic option retrieval} {option get . x Color1} blue
test option-1.2 {basic option retrieval} {option get . y Color1} red
test option-1.3 {basic option retrieval} {option get . z Color1} red
test option-1.4 {basic option retrieval} {option get . x Color2} blue
test option-1.5 {basic option retrieval} {option get . y Color2} {}
test option-1.6 {basic option retrieval} {option get . z Color2} {}

test option-2.1 {basic option retrieval} {option get .op1 x Color1} green
test option-2.2 {basic option retrieval} {option get .op1 y Color1} red
test option-2.3 {basic option retrieval} {option get .op1 z Color1} red
test option-2.4 {basic option retrieval} {option get .op1 x Color2} green
test option-2.5 {basic option retrieval} {option get .op1 y Color2} {}
test option-2.6 {basic option retrieval} {option get .op1 z Color2} {}

test option-3.1 {basic option retrieval} {option get .op1.op3 x Color1} yellow
test option-3.2 {basic option retrieval} {option get .op1.op3 y Color1} red
test option-3.3 {basic option retrieval} {option get .op1.op3 z Color1} red
test option-3.4 {basic option retrieval} {option get .op1.op3 x Color2} yellow
test option-3.5 {basic option retrieval} {option get .op1.op3 y Color2} {}
test option-3.6 {basic option retrieval} {option get .op1.op3 z Color2} {}

test option-4.1 {basic option retrieval} {option get .op1.op3.op6 x Color1} blue
test option-4.2 {basic option retrieval} {option get .op1.op3.op6 y Color1} red
test option-4.3 {basic option retrieval} {option get .op1.op3.op6 z Color1} red
test option-4.4 {basic option retrieval} {option get .op1.op3.op6 x Color2} black
test option-4.5 {basic option retrieval} {option get .op1.op3.op6 y Color2} black
test option-4.6 {basic option retrieval} {option get .op1.op3.op6 z Color2} black

test option-5.1 {basic option retrieval} {option get .op1.op4 x Color1} blue
test option-5.2 {basic option retrieval} {option get .op1.op4 y Color1} brown
test option-5.3 {basic option retrieval} {option get .op1.op4 z Color1} red
test option-5.4 {basic option retrieval} {option get .op1.op4 x Color2} blue
test option-5.5 {basic option retrieval} {option get .op1.op4 y Color2} brown
test option-5.6 {basic option retrieval} {option get .op1.op4 z Color2} {}

test option-6.1 {basic option retrieval} {option get .op2 x Color1} orange
test option-6.2 {basic option retrieval} {option get .op2 y Color1} orange
test option-6.3 {basic option retrieval} {option get .op2 z Color1} orange
test option-6.4 {basic option retrieval} {option get .op2 x Color2} blue
test option-6.5 {basic option retrieval} {option get .op2 y Color2} {}
test option-6.6 {basic option retrieval} {option get .op2 z Color2} {}

test option-7.1 {basic option retrieval} {option get .op2.op5 x Color1} orange
test option-7.2 {basic option retrieval} {option get .op2.op5 y Color1} orange
test option-7.3 {basic option retrieval} {option get .op2.op5 z Color1} orange
test option-7.4 {basic option retrieval} {option get .op2.op5 x Color2} purple
test option-7.5 {basic option retrieval} {option get .op2.op5 y Color2} purple
test option-7.6 {basic option retrieval} {option get .op2.op5 z Color2} purple

# Now try similar tests to above, except jump around non-hierarchically
# between windows to make sure that the option stacks are pushed and
# popped correctly.

option get . foo Foo
test option-8.1 {stack pushing/popping} {option get .op2.op5 x Color1} orange
test option-8.2 {stack pushing/popping} {option get .op2.op5 y Color1} orange
test option-8.3 {stack pushing/popping} {option get .op2.op5 z Color1} orange
test option-8.4 {stack pushing/popping} {option get .op2.op5 x Color2} purple
test option-8.5 {stack pushing/popping} {option get .op2.op5 y Color2} purple
test option-8.6 {stack pushing/popping} {option get .op2.op5 z Color2} purple

test option-9.1 {stack pushing/popping} {option get . x Color1} blue
test option-9.2 {stack pushing/popping} {option get . y Color1} red
test option-9.3 {stack pushing/popping} {option get . z Color1} red
test option-9.4 {stack pushing/popping} {option get . x Color2} blue
test option-9.5 {stack pushing/popping} {option get . y Color2} {}
test option-9.6 {stack pushing/popping} {option get . z Color2} {}

test option-10.1 {stack pushing/popping} {option get .op1.op3.op6 x Color1} blue
test option-10.2 {stack pushing/popping} {option get .op1.op3.op6 y Color1} red
test option-10.3 {stack pushing/popping} {option get .op1.op3.op6 z Color1} red
test option-10.4 {stack pushing/popping} {option get .op1.op3.op6 x Color2} black
test option-10.5 {stack pushing/popping} {option get .op1.op3.op6 y Color2} black
test option-10.6 {stack pushing/popping} {option get .op1.op3.op6 z Color2} black

test option-11.1 {stack pushing/popping} {option get .op1.op3 x Color1} yellow
test option-11.2 {stack pushing/popping} {option get .op1.op3 y Color1} red
test option-11.3 {stack pushing/popping} {option get .op1.op3 z Color1} red
test option-11.4 {stack pushing/popping} {option get .op1.op3 x Color2} yellow
test option-11.5 {stack pushing/popping} {option get .op1.op3 y Color2} {}
test option-11.6 {stack pushing/popping} {option get .op1.op3 z Color2} {}

test option-12.1 {stack pushing/popping} {option get .op1 x Color1} green
test option-12.2 {stack pushing/popping} {option get .op1 y Color1} red
test option-12.3 {stack pushing/popping} {option get .op1 z Color1} red
test option-12.4 {stack pushing/popping} {option get .op1 x Color2} green
test option-12.5 {stack pushing/popping} {option get .op1 y Color2} {}
test option-12.6 {stack pushing/popping} {option get .op1 z Color2} {}

# Test the major priority levels (widgetDefault, etc.)

option add $appName.op1.a 100 100
option add $appName.op1.A interactive interactive
option add $appName.op1.b userDefault userDefault
option add $appName.op1.B startupFile startupFile
option add $appName.op1.c widgetDefault widgetDefault
option add $appName.op1.C 0 0

test option-13.1 {priority levels} {option get .op1 a A} 100
test option-13.2 {priority levels} {option get .op1 b A} interactive
test option-13.3 {priority levels} {option get .op1 b B} userDefault
test option-13.4 {priority levels} {option get .op1 c B} startupFile
test option-13.5 {priority levels} {option get .op1 c C} widgetDefault
option add $appName.op1.B file2 widget
test option-13.6 {priority levels} {option get .op1 c B} startupFile
option add $appName.op1.B file2 startupFile
test option-13.7 {priority levels} {option get .op1 c B} file2

# Test various error conditions

test option-14.1 {error conditions} {
    list [catch {option} msg] $msg
} {1 {wrong # args: should be "option cmd arg ?arg ...?"}}
test option-14.2 {error conditions} {
    list [catch {option x} msg] $msg
} {1 {bad option "x": must be add, clear, get, or readfile}}
test option-14.3 {error conditions} {
    list [catch {option foo 3} msg] $msg
} {1 {bad option "foo": must be add, clear, get, or readfile}}
test option-14.4 {error conditions} {
    list [catch {option add 3} msg] $msg
} {1 {wrong # args: should be "option add pattern value ?priority?"}}
test option-14.5 {error conditions} {
    list [catch {option add . a b c} msg] $msg
} {1 {wrong # args: should be "option add pattern value ?priority?"}}
test option-14.6 {error conditions} {
    list [catch {option add . a -1} msg] $msg
} {1 {bad priority level "-1": must be widgetDefault, startupFile, userDefault, interactive, or a number between 0 and 100}}
test option-14.7 {error conditions} {
    list [catch {option add . a 101} msg] $msg
} {1 {bad priority level "101": must be widgetDefault, startupFile, userDefault, interactive, or a number between 0 and 100}}
test option-14.8 {error conditions} {
    list [catch {option add . a gorp} msg] $msg
} {1 {bad priority level "gorp": must be widgetDefault, startupFile, userDefault, interactive, or a number between 0 and 100}}
test option-14.9 {error conditions} {
    list [catch {option get 3} msg] $msg
} {1 {wrong # args: should be "option get window name class"}}
test option-14.10 {error conditions} {
    list [catch {option get 3 4} msg] $msg
} {1 {wrong # args: should be "option get window name class"}}
test option-14.11 {error conditions} {
    list [catch {option get 3 4 5 6} msg] $msg
} {1 {wrong # args: should be "option get window name class"}}
test option-14.12 {error conditions} {
    list [catch {option get .gorp.gorp a A} msg] $msg
} {1 {bad window path name ".gorp.gorp"}}

set option1 [file join [testsDirectory] option.file1]
set option2 [file join [testsDirectory] option.file2]

test option-15.1 {database files} {
    list [catch {option read non-existent} msg] $msg
} {1 {couldn't open "non-existent": no such file or directory}}
option read $option1
test option-15.2 {database files} {option get . x1 color} blue
if {$appName == "tktest"} {
    test option-15.3 {database files} {option get . x2 color} green
}
test option-15.4 {database files} {option get . x3 color} purple
test option-15.5 {database files} {option get . {x 4} color} brown
test option-15.6 {database files} {option get . x6 color} {}
test option-15.7 {database files} {
    list [catch {option read $option1 widget foo} msg] $msg
} {1 {wrong # args: should be "option readfile fileName ?priority?"}}
option add *x3 burgundy
catch {option read $option1 userDefault}
test option-15.8 {database files} {option get . x3 color} burgundy
test option-15.9 {database files} {
    list [catch {option read $option2} msg] $msg
} {1 {missing colon on line 2}}

test option-16.1 {ReadOptionFile} {
    set option3 [makeFile {} option.file3]
    set file [open $option3 w]
    fconfigure $file -translation crlf
    puts $file "*x7: true\n*x8: false"
    close $file
    option read $option3 userDefault
    set result [list [option get . x7 color] [option get . x8 color]]
    removeFile $option3
    set result
} {true false}

catch {destroy .op1}
catch {destroy .op2}

# cleanup
::tcltest::cleanupTests
return













@


1.4
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: option.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $
d11 9
a19 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
d194 2
a195 3
set option1 [file join $::tcltest::testsDir option.file1]
set option2 [file join $::tcltest::testsDir option.file2]
set option3 [file join $::tcltest::testsDir option.file3]
d219 2
a220 1
    set file [open "$option3" w]
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d6 2
d9 1
a9 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: option.test,v 1.10 1999/01/26 04:11:36 jingham Exp $
d11 3
a13 2
if {[string compare test [info procs test]] == 1} then \
  {source defs}
d188 3
a190 9
if {$tcl_platform(os) == "Win32s"} {
    set option1 OPTION~2.FIL
    set option2 OPTION~1.FIL
    set option3 OPTION~3.FIL
} else {
    set option1 option.file1
    set option2 option.file2
    set option3 option.file3
}
d226 17
a242 1
concat {}
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a5 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d7 4
a10 1
# RCS: @@(#) $Id: option.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $
d12 2
a13 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
d188 9
a196 3
set option1 [file join $::tcltest::testsDir option.file1]
set option2 [file join $::tcltest::testsDir option.file2]
set option3 [file join $::tcltest::testsDir option.file3]
d232 1
a232 17

# cleanup
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tk 8.4.0
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: option.test,v 1.4 2002/07/13 20:28:35 dgp Exp $
d11 3
a13 9
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

namespace import -force tcltest::makeFile
namespace import -force tcltest::removeFile
d188 3
a190 2
set option1 [file join [testsDirectory] option.file1]
set option2 [file join [testsDirectory] option.file2]
d214 1
a214 2
    set option3 [makeFile {} option.file3]
    set file [open $option3 w]
@


