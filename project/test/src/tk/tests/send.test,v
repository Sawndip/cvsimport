head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.08;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the "send" command and the
# other procedures in the file tkSend.c.  It is organized in the
# standard fashion for Tcl tests.
#
# Copyright (c) 1994 Sun Microsystems, Inc.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# Copyright (c) 2001 by ActiveState Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: send.test,v 1.8 2002/07/14 05:48:46 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

testConstraint xhost [llength [auto_execok xhost]]
testConstraint testsend [llength [info commands testsend]]

# Compute a script that will load Tk into a child interpreter.

foreach pkg [info loaded] {
    if {[lindex $pkg 1] == "Tk"} {
	set loadTk "load $pkg"
	break
    }
}

# Procedure to create a new application with a given name and class.

proc newApp {screen name class} {
    global loadTk
    interp create $name
    $name eval [list set argv [list -display $screen -name $name -class $class]]
    eval $loadTk $name
}

set name [tk appname]
set commId ""
catch {
    set registry [testsend prop root InterpRegistry]
    set commId [lindex [testsend prop root InterpRegistry] 0]
}
tk appname tktest
catch {send t_s_1 destroy .}
catch {send t_s_2 destroy .}

test send-1.1 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend bogus
    set result [winfo interps]
    tk appname tktest
    list $result [winfo interps]
} {{} tktest}
test send-1.2 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    set result [winfo interps]
    tk appname tktest
    list $result [winfo interps]
} {{} tktest}
test send-1.3 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend prop root InterpRegistry abcdefg
    tk appname tktest
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " tktest\nabcdefg\n"

frame .f -width 1 -height 1
set id [string range [winfo id .f] 2 end]
test send-2.1 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    list [catch {send foo bar} msg] $msg
} {1 {no application named "foo"}}
test send-2.2 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry " abc\n def\nghi\n\n$id foo\n"
    tk appname foo
} {foo #2}
test send-2.3 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "gyz foo\n"
    tk appname foo
} {foo}
test send-2.4 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "${id}z foo\n"
    tk appname foo
} {foo}

test send-3.1 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 gorp\n12345 foo\n12345 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n012345 gorp\n12345 foo\n"
test send-3.2 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 gorp\n12345 tktest\n23456 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n012345 gorp\n23456 tktest\n"
test send-3.3 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 tktest\n12345 bar\n23456 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n12345 bar\n23456 tktest\n"
test send-3.4 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "foo"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\nfoo\n"
test send-3.5 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry ""
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n"

test send-4.1 {RegAddName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    tk appname bar
    testsend prop root InterpRegistry
} "$commId bar\n"
test send-4.2 {RegAddName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "abc def"
    tk appname bar
    tk appname foo
    testsend prop root InterpRegistry
} "$commId foo\nabc def\n"

# Previous checks should already cover the Regclose procedure.

test send-5.1 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "123 abc\n"
    winfo interps
} {}
test send-5.2 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id Hi there"
    winfo interps
} {{Hi there}}
test send-5.3 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id Bogus"
    list [catch {send Bogus set a 44} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-5.4 {ValidateName procedure} {secureserver testsend} {
    tk appname test
    testsend prop root InterpRegistry "$commId Bogus\n$commId test\n"
    winfo interps
} {test}

if {[testConstraint xhost]} {
    winfo interps
    tk appname tktest
    update
    setupbg
    set x [split [exec xhost] \n]
    foreach i [lrange $x 1 end]  {
	exec xhost - $i
    }
}

test send-6.1 {ServerSecure procedure} {nonPortable secureserver} {
    set a 44
    list [dobg [list send [tk appname] set a 55]] $a
} {55 55}
test send-6.2 {ServerSecure procedure} {nonPortable secureserver} {
    set a 22
    exec xhost [exec hostname]
    list [catch {dobg [list send [tk appname] set a 33]} msg] $a $msg
} {0 22 {X server insecure (must use xauth-style authorization); command ignored}}
test send-6.3 {ServerSecure procedure} {nonPortable secureserver} {
    set a abc
    exec xhost - [exec hostname]
    list [dobg [list send [tk appname] set a new]] $a
} {new new}
cleanupbg

test send-7.1 {Tk_SetAppName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    tk appname newName
    list [tk appname oldName] [testsend prop root InterpRegistry]
} "oldName {$commId oldName\n}"
test send-7.2 {Tk_SetAppName procedure, name not in use} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    list [tk appname gorp] [testsend prop root InterpRegistry]
} "gorp {$commId gorp\n}"
test send-7.3 {Tk_SetAppName procedure, name in use by us} {secureserver testsend} {
    tk appname name1
    testsend prop root InterpRegistry "$commId name2\n"
    list [tk appname name2] [testsend prop root InterpRegistry]
} "name2 {$commId name2\n}"
test send-7.4 {Tk_SetAppName procedure, name in use} {secureserver testsend} {
    tk appname name1
    testsend prop root InterpRegistry "$id foo\n$id foo #2\n$id foo #3\n"
    list [tk appname foo] [testsend prop root InterpRegistry]
} "{foo #4} {$commId foo #4\n$id foo\n$id foo #2\n$id foo #3\n}"

test send-8.1 {Tk_SendCmd procedure, options} {secureserver} {
    setupbg
    set app [dobg {tk appname}]
    set a 66
    send -async $app [list send [tk appname] set a 77]
    set result $a
    after 200 set x 40
    tkwait variable x
    cleanupbg
    lappend result $a
} {66 77}
test send-8.2 {Tk_SendCmd procedure, options} {secureserver altDisplay} {
    setupbg -display $env(TK_ALT_DISPLAY)
    tk appname xyzgorp
    set a homeDisplay
    set result [dobg "
    toplevel .t -screen [winfo screen .]
    wm geometry .t +0+0
    set a altDisplay
    tk appname xyzgorp
    list \[send xyzgorp set a\] \[send -displayof .t xyzgorp set a\]
    "]
    cleanupbg
    set result
} {altDisplay homeDisplay}
test send-8.3 {Tk_SendCmd procedure, options} {secureserver} {
    list [catch {send -- -async foo bar baz} msg] $msg
} {1 {no application named "-async"}}
test send-8.4 {Tk_SendCmd procedure, options} {secureserver} {
    list [catch {send -gorp foo bar baz} msg] $msg
} {1 {bad option "-gorp": must be -async, -displayof, or --}}
test send-8.5 {Tk_SendCmd procedure, options} {secureserver} {
    list [catch {send -async foo} msg] $msg
} {1 {wrong # args: should be "send ?options? interpName arg ?arg ...?"}}
test send-8.6 {Tk_SendCmd procedure, options} {secureserver} {
    list [catch {send foo} msg] $msg
} {1 {wrong # args: should be "send ?options? interpName arg ?arg ...?"}}
test send-8.7 {Tk_SendCmd procedure, local execution} {secureserver} {
    set a initial
    send [tk appname] {set a new}
    set a
} {new}
test send-8.8 {Tk_SendCmd procedure, local execution} {secureserver} {
    set a initial
    send [tk appname] set a new
    set a
} {new}
test send-8.9 {Tk_SendCmd procedure, local execution} {secureserver} {
    set a initial
    string tolower [list [catch {send [tk appname] open bad_file} msg] \
	    $msg $errorInfo $errorCode]
} {1 {couldn't open "bad_file": no such file or directory} {couldn't open "bad_file": no such file or directory
    while executing
"open bad_file"
    invoked from within
"send [tk appname] open bad_file"} {posix enoent {no such file or directory}}}
test send-8.10 {Tk_SendCmd procedure, no such interpreter} {secureserver} {
    list [catch {send bogus_name bogus_command} msg] $msg
} {1 {no application named "bogus_name"}}

catch {
    newApp "" t_s_1 Test
    t_s_1 eval wm withdraw .
}

test send-8.11 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 set a them
    list $a [send t_s_1 set a]
} {us them}
test send-8.12 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 {set a them}
    list $a [send t_s_1 {set a}]
} {us them}
test send-8.13 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 {set a them}
    list $a [send t_s_1 {set a}]
} {us them}
test send-8.14 {Tk_SendCmd procedure, local interp killed by send} {secureserver testsend} {
    newApp "" t_s_2 Test
    list [catch {send t_s_2 {destroy .; concat result}} msg] $msg
} {0 result}

catch {interp delete t_s_2}

test send-8.15 {Tk_SendCmd procedure, local interp, error info} {secureserver testsend} {
    catch {error foo}
    list [catch {send t_s_1 {if 1 {open bogus_file_name}}} msg] $msg $errorInfo $errorCode
} {1 {couldn't open "bogus_file_name": no such file or directory} {couldn't open "bogus_file_name": no such file or directory
    while executing
"open bogus_file_name"
    invoked from within
"if 1 {open bogus_file_name}"
    invoked from within
"send t_s_1 {if 1 {open bogus_file_name}}"} {POSIX ENOENT {no such file or directory}}}
test send-8.16 {Tk_SendCmd procedure, bogusCommWindow} {secureserver testsend} {
    testsend prop root InterpRegistry "10234 bogus\n"
    set result [list [catch {send bogus bogus command} msg] $msg]
    winfo interps
    tk appname tktest
    set result
} {1 {no application named "bogus"}}

catch {interp delete t_s_1}

test send-8.17 {Tk_SendCmd procedure, deferring events} {secureserver nonPortable} {
    # Non-portable because some window managers ignore "raise"
    # requests so can't guarantee that new app's window won't
    # obscure .f, thereby masking the Expose event.

    setupbg
    set app [dobg {tk appname}]
    raise .		; # Don't want new app obscuring .f
    catch {destroy .f}
    frame .f
    place .f -x 0 -y 0
    bind .f <Expose> {set a exposed}
    set a {no event yet}
    set result ""
    lappend result [send $app send [list [tk appname]] set a]
    lappend result $a
    update
    cleanupbg
    lappend result $a
} {{no event yet} {no event yet} exposed}
test send-8.18 {Tk_SendCmd procedure, error in remote app} {secureserver} {
    setupbg
    set app [dobg {tk appname}]
    set result [string tolower [list [catch {send $app open bad_name} msg] \
	    $msg $errorInfo $errorCode]]
    cleanupbg
    set result
} {1 {couldn't open "bad_name": no such file or directory} {couldn't open "bad_name": no such file or directory
    while executing
"open bad_name"
    invoked from within
"send $app open bad_name"} {posix enoent {no such file or directory}}}
test send-8.19 {Tk_SendCmd, using modal timeouts} {secureserver} {
    setupbg
    set app [dobg {tk appname}]
    set x no
    set result ""
    after 0 {set x yes}
    lappend result [send $app {concat x y z}]
    lappend result $x
    update
    cleanupbg
    lappend result $x
} {{x y z} no yes}

tk appname tktest
catch {destroy .f}
frame .f
set id [string range [winfo id .f] 2 end]

test send-9.1 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry \
	    "$commId tktest\nfoo bar\n$commId tktest\n$id frame .f\n\n\n"
    list [winfo interps] [testsend prop root InterpRegistry]
} "{tktest tktest {frame .f}} {$commId tktest\n$commId tktest\n$id frame .f
}"
test send-9.2 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry \
	    "$commId tktest\nfoobar\n$commId gorp\n"
    list [winfo interps] [testsend prop root InterpRegistry]
} "tktest {$commId tktest\n}"
test send-9.3 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    list [winfo interps] [testsend prop root InterpRegistry]
} {{} {}}

catch {testsend prop root InterpRegistry "$commId tktest\n$id dummy\n"}

test send-10.1 {SendEventProc procedure, bogus comm property} {secureserver testsend} {
    testsend prop comm Comm {abc def}
    testsend prop comm Comm {}
    update
} {}
test send-10.2 {SendEventProc procedure, simultaneous messages} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-s set a 44\nc\n-n tktest\n-s set b 45\n"
    set a null
    set b xyzzy
    update
    list $a $b
} {44 45}
test send-10.3 {SendEventProc procedure, simultaneous messages} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-s set a newA\nr\n-s [testsend serial]\n-r 12345\nc\n-n tktest\n-s set b newB\n"
    set a null
    set b xyzzy
    set x [send dummy bogus]
    list $x $a $b
} {12345 newA newB}
test send-10.4 {SendEventProc procedure, leading nulls, bogus commands} {secureserver testsend} {
    testsend prop comm Comm \
	    "\n\nx\n-bogus\n\nc\n-n tktest\n-s set a 44\n"
    set a null
    update
    set a
} {44}
test send-10.5 {SendEventProc procedure, extraneous command options} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-x miscellanous\n-y who knows?\n-s set a new\n"
    set a null
    update
    set a
} {new}
test send-10.6 {SendEventProc procedure, unknown interpreter} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n unknown\n-r $id 44\n-s set a new\n"
    set a null
    update
    list [testsend prop [winfo id .f] Comm] $a
} "{\nr\n-s 44\n-r receiver never heard of interpreter \"unknown\"\n-c 1\n} null"
test send-10.7 {SendEventProc procedure, error in script} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
    update
    testsend prop [winfo id .f] Comm
} {
r
-s 62
-r test error
-i Initial errorInfo
    ("foreach" body line 1)
    invoked from within
"foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}"
-e test code
-c 1
}
test send-10.8 {SendEventProc procedure, exceptional return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s break\n"
    update
    testsend prop [winfo id .f] Comm
} {
r
-s 62
-r 
-c 3
}
test send-10.9 {SendEventProc procedure, empty return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s concat\n"
    update
    testsend prop [winfo id .f] Comm
} {
r
-s 62
-r 
}
test send-10.10 {SendEventProc procedure, asynchronous calls} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.11 {SendEventProc procedure, exceptional return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s break\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.12 {SendEventProc procedure, empty return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s concat\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.13 {SendEventProc procedure, return processing} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-c 1\n-e test1\n-i test2\n-r test3\n-s [testsend serial]\n"
    list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
} {1 test3 {test2
    invoked from within
"send dummy foo"} test1}
test send-10.14 {SendEventProc procedure, extraneous return options} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-x test1\n-y test2\n-r result\n-s [testsend serial]\n"
    list [catch {send dummy foo} msg] $msg
} {0 result}
test send-10.15 {SendEventProc procedure, serial number} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-r response\n"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-10.16 {SendEventProc procedure, serial number} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-r response\n\n-s 0"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-10.17 {SendEventProc procedure, errorCode and errorInfo} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-i test1\n-e test2\n-c 4\n-s [testsend serial]\n"
    set errorCode oldErrorCode
    set errorInfo oldErrorInfo
    list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
} {4 {} oldErrorInfo oldErrorCode}
test send-10.18 {SendEventProc procedure, send kills application} {secureserver testsend} {
    setupbg
    dobg {tk appname t_s_3}
    set x [list [catch {send t_s_3 destroy .} msg] $msg]
    cleanupbg
    set x
} {0 {}}
test send-10.19 {SendEventProc procedure, send exits} {secureserver testsend} {
    setupbg
    dobg {tk appname t_s_3}
    set x [list [catch {send t_s_3 exit} msg] $msg]
    cleanupbg
    set x
} {1 {target application died}}

test send-11.1 {AppendPropCarefully and AppendErrorProc procedures} {secureserver testsend} {
    testsend prop root InterpRegistry "0x21447 dummy\n"
    list [catch {send dummy foo} msg] $msg
} {1 {no application named "dummy"}}
test send-11.2 {AppendPropCarefully and AppendErrorProc procedures} {secureserver testsend} {
    testsend prop comm Comm "c\n-r0x123 44\n-n tktest\n-s concat a b c\n"
    update
} {}

winfo interps
tk appname tktest
catch {destroy .f}
frame .f
set id [string range [winfo id .f] 2 end]

test send-12.1 {TimeoutProc procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id dummy\n"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}

catch {testsend prop root InterpRegistry ""}

test send-12.2 {TimeoutProc procedure} {secureserver} {
    winfo interps
    tk appname tktest
    update
    setupbg
    set app [dobg {
	after 10 {after 10 {after 5000; exit}}
	tk appname
    }]
    after 200
    set result [list [catch {send $app foo} msg] $msg]
    cleanupbg
    set result
} {1 {target application died}}

winfo interps
tk appname tktest
test send-13.1 {DeleteProc procedure} {secureserver} {
    setupbg
    set app [dobg {rename send {}; tk appname}]
    set result [list [catch {send $app foo} msg] $msg [winfo interps]]
    cleanupbg
    set result
} {1 {no application named "tktest #2"} tktest}
test send-13.2 {DeleteProc procedure} {secureserver} {
    winfo interps
    tk appname tktest
    rename send {}
    set result {}
    lappend result [winfo interps] [info commands send]
    tk appname foo
    lappend result [winfo interps] [info commands send]
} {{} {} foo send}

test send-14.1 {SendRestrictProc procedure, sends crossing from different displays} {secureserver altDisplay} {
    setupbg -display $env(TK_ALT_DISPLAY)
    set result [dobg "
    toplevel .t -screen [winfo screen .]
    wm geometry .t +0+0
    tk appname xyzgorp1
    set x child
    "]
    toplevel .t -screen $env(TK_ALT_DISPLAY)
    wm geometry .t +0+0
    tk appname xyzgorp2
    update
    set y parent
    set result [send -displayof .t xyzgorp1 {list $x [send -displayof .t xyzgorp2 set y]}]
    destroy .t
    cleanupbg
    set result
} {child parent}

catch {
    testsend prop root InterpRegister $registry
    tk appname tktest
}
test send-15.1 {UpdateCommWindow procedure} {secureserver testsend} {
    set x [list [testsend prop comm TK_APPLICATION]]
    newApp "" t_s_1 Test
    send t_s_1 wm withdraw .
    newApp "" t_s_2 Test
    send t_s_2 wm withdraw .
    lappend x [testsend prop comm TK_APPLICATION]
    interp delete t_s_1
    lappend x [testsend prop comm TK_APPLICATION]
    interp delete t_s_2
    lappend x [testsend prop comm TK_APPLICATION]
} {tktest {t_s_2 t_s_1 tktest} {t_s_2 tktest} tktest}

catch {
    tk appname $name
    testsend prop root InterpRegistry $registry
    testdeleteapps
}
rename newApp {}

# cleanup
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d8 1
a8 1
# All rights reserved.
d10 4
a13 5
# RCS: @@(#) $Id: send.test,v 1.4.6.1 2000/05/04 21:26:29 spolk Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
d15 6
a20 15
if {$tcl_platform(platform) == "macintosh"} {
    puts "send is not available on the Mac - skipping tests"
    ::tcltest::cleanupTests
    return
}
if {$tcl_platform(platform) == "window"} {
    puts "send is not available under Windows - skipping tests"
    ::tcltest::cleanupTests
    return
}
if {[auto_execok xhost] == ""} {
    puts "xhost application isn't available - skipping tests"
    ::tcltest::cleanupTests
    return
}
d22 2
a23 27
if {[info commands testsend] == "testsend"} {
    set gotTestCmds 1
} else {
    set gotTestCmds 0
}

foreach i [winfo children .] {
    destroy $i
}
wm geometry . {}
raise .

# If send is disabled because of inadequate security, don't run any
# of these tests at all.

setupbg
set app [dobg {tk appname}]
if {[catch {send $app set a 0} msg] == 1} {
    if [string match "X server insecure *" $msg] {
	puts -nonewline "Your X server is insecure, so \"send\" can't be used;"
	puts " skipping \"send\" tests."
	cleanupbg
	::tcltest::cleanupTests
	return
    }
}
cleanupbg
d44 2
a45 1
if $gotTestCmds {
d53 115
a167 106
if $gotTestCmds {
    test send-1.1 {RegOpen procedure, bogus property} {
	testsend bogus
	set result [winfo interps]
	tk appname tktest
	list $result [winfo interps]
    } {{} tktest}
    test send-1.2 {RegOpen procedure, bogus property} {
	testsend prop root InterpRegistry {}
	set result [winfo interps]
	tk appname tktest
	list $result [winfo interps]
    } {{} tktest}
    test send-1.3 {RegOpen procedure, bogus property} {
	testsend prop root InterpRegistry abcdefg
	tk appname tktest
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " tktest\nabcdefg\n"

    frame .f -width 1 -height 1
    set id [string range [winfo id .f] 2 end]
    test send-2.1 {RegFindName procedure} {
	testsend prop root InterpRegistry {}
	list [catch {send foo bar} msg] $msg
    } {1 {no application named "foo"}}
    test send-2.2 {RegFindName procedure} {
	testsend prop root InterpRegistry " abc\n def\nghi\n\n$id foo\n"
	tk appname foo
    } {foo #2}
    test send-2.3 {RegFindName procedure} {
	testsend prop root InterpRegistry "gyz foo\n"
	tk appname foo
    } {foo}
    test send-2.4 {RegFindName procedure} {
	testsend prop root InterpRegistry "${id}z foo\n"
	tk appname foo
    } {foo}

    test send-3.1 {RegDeleteName procedure} {
	tk appname tktest
	testsend prop root InterpRegistry "012345 gorp\n12345 foo\n12345 tktest"
	tk appname x
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " x\n012345 gorp\n12345 foo\n"
    test send-3.2 {RegDeleteName procedure} {
	tk appname tktest
	testsend prop root InterpRegistry "012345 gorp\n12345 tktest\n23456 tktest"
	tk appname x
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " x\n012345 gorp\n23456 tktest\n"
    test send-3.3 {RegDeleteName procedure} {
	tk appname tktest
	testsend prop root InterpRegistry "012345 tktest\n12345 bar\n23456 tktest"
	tk appname x
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " x\n12345 bar\n23456 tktest\n"
    test send-3.4 {RegDeleteName procedure} {
	tk appname tktest
	testsend prop root InterpRegistry "foo"
	tk appname x
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " x\nfoo\n"
    test send-3.5 {RegDeleteName procedure} {
	tk appname tktest
	testsend prop root InterpRegistry ""
	tk appname x
	set x [testsend prop root InterpRegistry]
	string range $x [string first " " $x] end
    } " x\n"

    test send-4.1 {RegAddName procedure} {
	testsend prop root InterpRegistry ""
	tk appname bar
	testsend prop root InterpRegistry
    } "$commId bar\n"
    test send-4.2 {RegAddName procedure} {
	testsend prop root InterpRegistry "abc def"
	tk appname bar
	tk appname foo
	testsend prop root InterpRegistry
    } "$commId foo\nabc def\n"

    # Previous checks should already cover the Regclose procedure.

    test send-5.1 {ValidateName procedure} {
	testsend prop root InterpRegistry "123 abc\n"
	winfo interps
    } {}
    test send-5.2 {ValidateName procedure} {
	testsend prop root InterpRegistry "$id Hi there"
	winfo interps
    } {{Hi there}}
    test send-5.3 {ValidateName procedure} {
	testsend prop root InterpRegistry "$id Bogus"
	list [catch {send Bogus set a 44} msg] $msg
    } {1 {target application died or uses a Tk version before 4.0}}
    test send-5.4 {ValidateName procedure} {
	tk appname test
	testsend prop root InterpRegistry "$commId Bogus\n$commId test\n"
	winfo interps
    } {test}
d170 1
a170 9
winfo interps
tk appname tktest
update
setupbg
set x [split [exec xhost] \n]
foreach i [lrange $x 1 end]  {
    exec xhost - $i
}
test send-6.1 {ServerSecure procedure} {nonPortable} {
d174 1
a174 1
test send-6.2 {ServerSecure procedure} {nonPortable} {
d179 1
a179 1
test send-6.3 {ServerSecure procedure} {nonPortable} {
d186 19
a204 21
if $gotTestCmds {
    test send-7.1 {Tk_SetAppName procedure} {
	testsend prop root InterpRegistry ""
	tk appname newName
	list [tk appname oldName] [testsend prop root InterpRegistry]
    } "oldName {$commId oldName\n}"
    test send-7.2 {Tk_SetAppName procedure, name not in use} {
	testsend prop root InterpRegistry ""
	list [tk appname gorp] [testsend prop root InterpRegistry]
    } "gorp {$commId gorp\n}"
    test send-7.3 {Tk_SetAppName procedure, name in use by us} {
	tk appname name1
	testsend prop root InterpRegistry "$commId name2\n"
	list [tk appname name2] [testsend prop root InterpRegistry]
    } "name2 {$commId name2\n}"
    test send-7.4 {Tk_SetAppName procedure, name in use} {
	tk appname name1
	testsend prop root InterpRegistry "$id foo\n$id foo #2\n$id foo #3\n"
	list [tk appname foo] [testsend prop root InterpRegistry]
    } "{foo #4} {$commId foo #4\n$id foo\n$id foo #2\n$id foo #3\n}"
}
d206 1
a206 1
test send-8.1 {Tk_SendCmd procedure, options} {
d217 15
a231 17
if [info exists env(TK_ALT_DISPLAY)] {
    test send-8.2 {Tk_SendCmd procedure, options} {
	setupbg -display $env(TK_ALT_DISPLAY)
	tk appname xyzgorp
	set a homeDisplay
	set result [dobg "
	    toplevel .t -screen [winfo screen .]
	    wm geometry .t +0+0
	    set a altDisplay
	    tk appname xyzgorp
	    list \[send xyzgorp set a\] \[send -displayof .t xyzgorp set a\]
	"]
	cleanupbg
	set result
    } {altDisplay homeDisplay}
}
test send-8.3 {Tk_SendCmd procedure, options} {
d234 1
a234 1
test send-8.4 {Tk_SendCmd procedure, options} {
d237 1
a237 1
test send-8.5 {Tk_SendCmd procedure, options} {
d240 1
a240 1
test send-8.6 {Tk_SendCmd procedure, options} {
d243 1
a243 1
test send-8.7 {Tk_SendCmd procedure, local execution} {
d248 1
a248 1
test send-8.8 {Tk_SendCmd procedure, local execution} {
d253 1
a253 1
test send-8.9 {Tk_SendCmd procedure, local execution} {
d262 1
a262 1
test send-8.10 {Tk_SendCmd procedure, no such interpreter} {
d265 2
a266 1
if $gotTestCmds {
d269 28
a296 24
    test send-8.11 {Tk_SendCmd procedure, local execution, different interp} {
	set a us
	send t_s_1 set a them
	list $a [send t_s_1 set a]
    } {us them}
    test send-8.12 {Tk_SendCmd procedure, local execution, different interp} {
	set a us
	send t_s_1 {set a them}
	list $a [send t_s_1 {set a}]
    } {us them}
    test send-8.13 {Tk_SendCmd procedure, local execution, different interp} {
	set a us
	send t_s_1 {set a them}
	list $a [send t_s_1 {set a}]
    } {us them}
    test send-8.14 {Tk_SendCmd procedure, local interp killed by send} {
	newApp "" t_s_2 Test
	list [catch {send t_s_2 {destroy .; concat result}} msg] $msg
    } {0 result}
    interp delete t_s_2
    test send-8.15 {Tk_SendCmd procedure, local interp, error info} {
	catch {error foo}
	list [catch {send t_s_1 {if 1 {open bogus_file_name}}} msg] $msg $errorInfo $errorCode
    } {1 {couldn't open "bogus_file_name": no such file or directory} {couldn't open "bogus_file_name": no such file or directory
d303 11
a313 10
    test send-8.16 {Tk_SendCmd procedure, bogusCommWindow} {
	testsend prop root InterpRegistry "10234 bogus\n"
	set result [list [catch {send bogus bogus command} msg] $msg]
	winfo interps
	tk appname tktest
	set result
    } {1 {no application named "bogus"}}
    interp delete t_s_1
}
test send-8.17 {Tk_SendCmd procedure, deferring events} {nonPortable} {
d333 1
a333 1
test send-8.18 {Tk_SendCmd procedure, error in remote app} {
d345 1
a345 1
test send-8.19 {Tk_SendCmd, using modal timeouts} {
d362 6
a367 6
if $gotTestCmds {
    test send-9.1 {Tk_GetInterpNames procedure} {
	testsend prop root InterpRegistry \
		"$commId tktest\nfoo bar\n$commId tktest\n$id frame .f\n\n\n"
	list [winfo interps] [testsend prop root InterpRegistry]
    } "{tktest tktest {frame .f}} {$commId tktest\n$commId tktest\n$id frame .f
d369 62
a430 61
    test send-9.2 {Tk_GetInterpNames procedure} {
	testsend prop root InterpRegistry \
		"$commId tktest\nfoobar\n$commId gorp\n"
	list [winfo interps] [testsend prop root InterpRegistry]
    } "tktest {$commId tktest\n}"
    test send-9.3 {Tk_GetInterpNames procedure} {
	testsend prop root InterpRegistry {}
	list [winfo interps] [testsend prop root InterpRegistry]
    } {{} {}}

    testsend prop root InterpRegistry "$commId tktest\n$id dummy\n"
    test send-10.1 {SendEventProc procedure, bogus comm property} {
	testsend prop comm Comm {abc def}
	testsend prop comm Comm {}
	update
    } {}
    test send-10.2 {SendEventProc procedure, simultaneous messages} {
	testsend prop comm Comm \
		"c\n-n tktest\n-s set a 44\nc\n-n tktest\n-s set b 45\n"
	set a null
	set b xyzzy
	update
	list $a $b
    } {44 45}
    test send-10.3 {SendEventProc procedure, simultaneous messages} {
	testsend prop comm Comm \
		"c\n-n tktest\n-s set a newA\nr\n-s [testsend serial]\n-r 12345\nc\n-n tktest\n-s set b newB\n"
	set a null
	set b xyzzy
	set x [send dummy bogus]
	list $x $a $b
    } {12345 newA newB}
    test send-10.4 {SendEventProc procedure, leading nulls, bogus commands} {
	testsend prop comm Comm \
		"\n\nx\n-bogus\n\nc\n-n tktest\n-s set a 44\n"
	set a null
	update
	set a
    } {44}
    test send-10.5 {SendEventProc procedure, extraneous command options} {
	testsend prop comm Comm \
		"c\n-n tktest\n-x miscellanous\n-y who knows?\n-s set a new\n"
	set a null
	update
	set a
    } {new}
    test send-10.6 {SendEventProc procedure, unknown interpreter} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n unknown\n-r $id 44\n-s set a new\n"
	set a null
	update
	list [testsend prop [winfo id .f] Comm] $a
    } "{\nr\n-s 44\n-r receiver never heard of interpreter \"unknown\"\n-c 1\n} null"
    test send-10.7 {SendEventProc procedure, error in script} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-r $id 62\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
	update
	testsend prop [winfo id .f] Comm
    } {
d441 7
a447 7
    test send-10.8 {SendEventProc procedure, exceptional return} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-r $id 62\n-s break\n"
	update
	testsend prop [winfo id .f] Comm
    } {
d453 7
a459 7
    test send-10.9 {SendEventProc procedure, empty return} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-r $id 62\n-s concat\n"
	update
	testsend prop [winfo id .f] Comm
    } {
d464 26
a489 26
    test send-10.10 {SendEventProc procedure, asynchronous calls} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
	update
	testsend prop [winfo id .f] Comm
    } {}
    test send-10.11 {SendEventProc procedure, exceptional return} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-s break\n"
	update
	testsend prop [winfo id .f] Comm
    } {}
    test send-10.12 {SendEventProc procedure, empty return} {
	testsend prop [winfo id .f] Comm {}
	testsend prop comm Comm \
		"c\n-n tktest\n-s concat\n"
	update
	testsend prop [winfo id .f] Comm
    } {}
    test send-10.13 {SendEventProc procedure, return processing} {
	testsend prop comm Comm \
		"r\n-c 1\n-e test1\n-i test2\n-r test3\n-s [testsend serial]\n"
	list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
    } {1 test3 {test2
d492 45
a536 46
    test send-10.14 {SendEventProc procedure, extraneous return options} {
	testsend prop comm Comm \
		"r\n-x test1\n-y test2\n-r result\n-s [testsend serial]\n"
	list [catch {send dummy foo} msg] $msg
    } {0 result}
    test send-10.15 {SendEventProc procedure, serial number} {
	testsend prop comm Comm \
		"r\n-r response\n"
	list [catch {send dummy foo} msg] $msg
    } {1 {target application died or uses a Tk version before 4.0}}
    test send-10.16 {SendEventProc procedure, serial number} {
	testsend prop comm Comm \
		"r\n-r response\n\n-s 0"
	list [catch {send dummy foo} msg] $msg
    } {1 {target application died or uses a Tk version before 4.0}}
    test send-10.17 {SendEventProc procedure, errorCode and errorInfo} {
	testsend prop comm Comm \
		"r\n-i test1\n-e test2\n-c 4\n-s [testsend serial]\n"
	set errorCode oldErrorCode
	set errorInfo oldErrorInfo
	list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
    } {4 {} oldErrorInfo oldErrorCode}
    test send-10.18 {SendEventProc procedure, send kills application} {
	setupbg
	dobg {tk appname t_s_3}
	set x [list [catch {send t_s_3 destroy .} msg] $msg]
	cleanupbg
	set x
    } {0 {}}
    test send-10.19 {SendEventProc procedure, send exits} {
	setupbg
	dobg {tk appname t_s_3}
	set x [list [catch {send t_s_3 exit} msg] $msg]
	close $::tcltest::fd
	set x
    } {1 {target application died}}

    test send-11.1 {AppendPropCarefully and AppendErrorProc procedures} {
	testsend prop root InterpRegistry "0x21447 dummy\n"
	list [catch {send dummy foo} msg] $msg
    } {1 {no application named "dummy"}}
    test send-11.2 {AppendPropCarefully and AppendErrorProc procedures} {
	testsend prop comm Comm "c\n-r0x123 44\n-n tktest\n-s concat a b c\n"
	update
    } {}
}
d543 9
a551 8
if $gotTestCmds {
    test send-12.1 {TimeoutProc procedure} {
        testsend prop root InterpRegistry "$id dummy\n"
        list [catch {send dummy foo} msg] $msg
    } {1 {target application died or uses a Tk version before 4.0}}
    testsend prop root InterpRegistry ""
}
test send-12.2 {TimeoutProc procedure} {
d556 4
a559 6
    puts $::tcltest::fd {after 10 {after 5000; exit}; puts [tk appname]; puts **DONE**; flush stdout}
    set ::tcltest::bgDone 0
    set ::tcltest::bgData {}
    flush $::tcltest::fd
    tkwait variable ::tcltest::bgDone
    set app $::tcltest::bgData
d562 1
a562 1
    close $::tcltest::fd
d568 1
a568 1
test send-13.1 {DeleteProc procedure} {
d575 1
a575 1
test send-13.2 {DeleteProc procedure} {
d585 18
a602 20
if [info exists env(TK_ALT_DISPLAY)] {
    test send-14.1 {SendRestrictProc procedure, sends crossing from different displays} {
	setupbg -display $env(TK_ALT_DISPLAY)
	set result [dobg "
	    toplevel .t -screen [winfo screen .]
	    wm geometry .t +0+0
	    tk appname xyzgorp1
	    set x child
	"]
	toplevel .t -screen $env(TK_ALT_DISPLAY)
	wm geometry .t +0+0
	tk appname xyzgorp2
	update
	set y parent
	set result [send -displayof .t xyzgorp1 {list $x [send -displayof .t xyzgorp2 set y]}]
	destroy .t
	cleanupbg
	set result
    } {child parent}
}
d604 1
a604 1
if $gotTestCmds {
a606 12
    test send-15.1 {UpdateCommWindow procedure} {
	set x [list [testsend prop comm TK_APPLICATION]]
	newApp "" t_s_1 Test
	send t_s_1 wm withdraw .
	newApp "" t_s_2 Test
	send t_s_2 wm withdraw .
	lappend x [testsend prop comm TK_APPLICATION]
	interp delete t_s_1
	lappend x [testsend prop comm TK_APPLICATION]
	interp delete t_s_2
	lappend x [testsend prop comm TK_APPLICATION]
    } {tktest {t_s_2 t_s_1 tktest} {t_s_2 tktest} tktest}
d608 12
d621 2
a622 2
tk appname $name
if $gotTestCmds {
a623 2
}
if $gotTestCmds {
a630 13













@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d7 2
d10 5
a14 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: send.test,v 1.9 1999/01/26 04:11:38 jingham Exp $
d18 1
d23 1
d28 1
a31 3
if {[info procs test] != "test"} {
    source defs
}
d54 1
d332 2
d555 1
a555 1
	close $fd
d586 6
a591 6
    puts $fd {after 10 {after 5000; exit}; puts [tk appname]; puts **DONE**; flush stdout}
    set bgDone 0
    set bgData {}
    flush $fd
    tkwait variable bgDone
    set app $bgData
d594 1
a594 1
    close $fd
d663 17
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a6 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d8 4
a11 5
# RCS: @@(#) $Id: send.test,v 1.4.6.1 2000/05/04 21:26:29 spolk Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
a14 1
    ::tcltest::cleanupTests
a18 1
    ::tcltest::cleanupTests
a22 1
    ::tcltest::cleanupTests
d26 3
a50 1
	::tcltest::cleanupTests
a327 2
"if 1 {open bogus_file_name}"
    invoked from within
d549 1
a549 1
	close $::tcltest::fd
d580 6
a585 6
    puts $::tcltest::fd {after 10 {after 5000; exit}; puts [tk appname]; puts **DONE**; flush stdout}
    set ::tcltest::bgDone 0
    set ::tcltest::bgData {}
    flush $::tcltest::fd
    tkwait variable ::tcltest::bgDone
    set app $::tcltest::bgData
d588 1
a588 1
    close $::tcltest::fd
a656 17

# cleanup
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tk 8.4.0
@
text
@d8 1
a8 1
# Copyright (c) 2001 by ActiveState Corporation.
d10 27
a36 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: send.test,v 1.8 2002/07/14 05:48:46 dgp Exp $
d38 5
a42 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d44 15
a58 2
testConstraint xhost [llength [auto_execok xhost]]
testConstraint testsend [llength [info commands testsend]]
d79 1
a79 2
set commId ""
catch {
d87 107
a193 18
test send-1.1 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend bogus
    set result [winfo interps]
    tk appname tktest
    list $result [winfo interps]
} {{} tktest}
test send-1.2 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    set result [winfo interps]
    tk appname tktest
    list $result [winfo interps]
} {{} tktest}
test send-1.3 {RegOpen procedure, bogus property} {secureserver testsend} {
    testsend prop root InterpRegistry abcdefg
    tk appname tktest
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " tktest\nabcdefg\n"
d195 7
a201 96
frame .f -width 1 -height 1
set id [string range [winfo id .f] 2 end]
test send-2.1 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    list [catch {send foo bar} msg] $msg
} {1 {no application named "foo"}}
test send-2.2 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry " abc\n def\nghi\n\n$id foo\n"
    tk appname foo
} {foo #2}
test send-2.3 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "gyz foo\n"
    tk appname foo
} {foo}
test send-2.4 {RegFindName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "${id}z foo\n"
    tk appname foo
} {foo}

test send-3.1 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 gorp\n12345 foo\n12345 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n012345 gorp\n12345 foo\n"
test send-3.2 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 gorp\n12345 tktest\n23456 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n012345 gorp\n23456 tktest\n"
test send-3.3 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "012345 tktest\n12345 bar\n23456 tktest"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n12345 bar\n23456 tktest\n"
test send-3.4 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry "foo"
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\nfoo\n"
test send-3.5 {RegDeleteName procedure} {secureserver testsend} {
    tk appname tktest
    testsend prop root InterpRegistry ""
    tk appname x
    set x [testsend prop root InterpRegistry]
    string range $x [string first " " $x] end
} " x\n"

test send-4.1 {RegAddName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    tk appname bar
    testsend prop root InterpRegistry
} "$commId bar\n"
test send-4.2 {RegAddName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "abc def"
    tk appname bar
    tk appname foo
    testsend prop root InterpRegistry
} "$commId foo\nabc def\n"

# Previous checks should already cover the Regclose procedure.

test send-5.1 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "123 abc\n"
    winfo interps
} {}
test send-5.2 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id Hi there"
    winfo interps
} {{Hi there}}
test send-5.3 {ValidateName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id Bogus"
    list [catch {send Bogus set a 44} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-5.4 {ValidateName procedure} {secureserver testsend} {
    tk appname test
    testsend prop root InterpRegistry "$commId Bogus\n$commId test\n"
    winfo interps
} {test}

if {[testConstraint xhost]} {
    winfo interps
    tk appname tktest
    update
    setupbg
    set x [split [exec xhost] \n]
    foreach i [lrange $x 1 end]  {
	exec xhost - $i
    }
d203 1
a203 2

test send-6.1 {ServerSecure procedure} {nonPortable secureserver} {
d207 1
a207 1
test send-6.2 {ServerSecure procedure} {nonPortable secureserver} {
d212 1
a212 1
test send-6.3 {ServerSecure procedure} {nonPortable secureserver} {
d219 21
a239 19
test send-7.1 {Tk_SetAppName procedure} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    tk appname newName
    list [tk appname oldName] [testsend prop root InterpRegistry]
} "oldName {$commId oldName\n}"
test send-7.2 {Tk_SetAppName procedure, name not in use} {secureserver testsend} {
    testsend prop root InterpRegistry ""
    list [tk appname gorp] [testsend prop root InterpRegistry]
} "gorp {$commId gorp\n}"
test send-7.3 {Tk_SetAppName procedure, name in use by us} {secureserver testsend} {
    tk appname name1
    testsend prop root InterpRegistry "$commId name2\n"
    list [tk appname name2] [testsend prop root InterpRegistry]
} "name2 {$commId name2\n}"
test send-7.4 {Tk_SetAppName procedure, name in use} {secureserver testsend} {
    tk appname name1
    testsend prop root InterpRegistry "$id foo\n$id foo #2\n$id foo #3\n"
    list [tk appname foo] [testsend prop root InterpRegistry]
} "{foo #4} {$commId foo #4\n$id foo\n$id foo #2\n$id foo #3\n}"
d241 1
a241 1
test send-8.1 {Tk_SendCmd procedure, options} {secureserver} {
d252 17
a268 15
test send-8.2 {Tk_SendCmd procedure, options} {secureserver altDisplay} {
    setupbg -display $env(TK_ALT_DISPLAY)
    tk appname xyzgorp
    set a homeDisplay
    set result [dobg "
    toplevel .t -screen [winfo screen .]
    wm geometry .t +0+0
    set a altDisplay
    tk appname xyzgorp
    list \[send xyzgorp set a\] \[send -displayof .t xyzgorp set a\]
    "]
    cleanupbg
    set result
} {altDisplay homeDisplay}
test send-8.3 {Tk_SendCmd procedure, options} {secureserver} {
d271 1
a271 1
test send-8.4 {Tk_SendCmd procedure, options} {secureserver} {
d274 1
a274 1
test send-8.5 {Tk_SendCmd procedure, options} {secureserver} {
d277 1
a277 1
test send-8.6 {Tk_SendCmd procedure, options} {secureserver} {
d280 1
a280 1
test send-8.7 {Tk_SendCmd procedure, local execution} {secureserver} {
d285 1
a285 1
test send-8.8 {Tk_SendCmd procedure, local execution} {secureserver} {
d290 1
a290 1
test send-8.9 {Tk_SendCmd procedure, local execution} {secureserver} {
d299 1
a299 1
test send-8.10 {Tk_SendCmd procedure, no such interpreter} {secureserver} {
d302 1
a302 2

catch {
d305 24
a328 28
}

test send-8.11 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 set a them
    list $a [send t_s_1 set a]
} {us them}
test send-8.12 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 {set a them}
    list $a [send t_s_1 {set a}]
} {us them}
test send-8.13 {Tk_SendCmd procedure, local execution, different interp} {secureserver testsend} {
    set a us
    send t_s_1 {set a them}
    list $a [send t_s_1 {set a}]
} {us them}
test send-8.14 {Tk_SendCmd procedure, local interp killed by send} {secureserver testsend} {
    newApp "" t_s_2 Test
    list [catch {send t_s_2 {destroy .; concat result}} msg] $msg
} {0 result}

catch {interp delete t_s_2}

test send-8.15 {Tk_SendCmd procedure, local interp, error info} {secureserver testsend} {
    catch {error foo}
    list [catch {send t_s_1 {if 1 {open bogus_file_name}}} msg] $msg $errorInfo $errorCode
} {1 {couldn't open "bogus_file_name": no such file or directory} {couldn't open "bogus_file_name": no such file or directory
d335 10
a344 11
test send-8.16 {Tk_SendCmd procedure, bogusCommWindow} {secureserver testsend} {
    testsend prop root InterpRegistry "10234 bogus\n"
    set result [list [catch {send bogus bogus command} msg] $msg]
    winfo interps
    tk appname tktest
    set result
} {1 {no application named "bogus"}}

catch {interp delete t_s_1}

test send-8.17 {Tk_SendCmd procedure, deferring events} {secureserver nonPortable} {
d364 1
a364 1
test send-8.18 {Tk_SendCmd procedure, error in remote app} {secureserver} {
d376 1
a376 1
test send-8.19 {Tk_SendCmd, using modal timeouts} {secureserver} {
d393 6
a398 6

test send-9.1 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry \
	    "$commId tktest\nfoo bar\n$commId tktest\n$id frame .f\n\n\n"
    list [winfo interps] [testsend prop root InterpRegistry]
} "{tktest tktest {frame .f}} {$commId tktest\n$commId tktest\n$id frame .f
d400 61
a460 62
test send-9.2 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry \
	    "$commId tktest\nfoobar\n$commId gorp\n"
    list [winfo interps] [testsend prop root InterpRegistry]
} "tktest {$commId tktest\n}"
test send-9.3 {Tk_GetInterpNames procedure} {secureserver testsend} {
    testsend prop root InterpRegistry {}
    list [winfo interps] [testsend prop root InterpRegistry]
} {{} {}}

catch {testsend prop root InterpRegistry "$commId tktest\n$id dummy\n"}

test send-10.1 {SendEventProc procedure, bogus comm property} {secureserver testsend} {
    testsend prop comm Comm {abc def}
    testsend prop comm Comm {}
    update
} {}
test send-10.2 {SendEventProc procedure, simultaneous messages} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-s set a 44\nc\n-n tktest\n-s set b 45\n"
    set a null
    set b xyzzy
    update
    list $a $b
} {44 45}
test send-10.3 {SendEventProc procedure, simultaneous messages} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-s set a newA\nr\n-s [testsend serial]\n-r 12345\nc\n-n tktest\n-s set b newB\n"
    set a null
    set b xyzzy
    set x [send dummy bogus]
    list $x $a $b
} {12345 newA newB}
test send-10.4 {SendEventProc procedure, leading nulls, bogus commands} {secureserver testsend} {
    testsend prop comm Comm \
	    "\n\nx\n-bogus\n\nc\n-n tktest\n-s set a 44\n"
    set a null
    update
    set a
} {44}
test send-10.5 {SendEventProc procedure, extraneous command options} {secureserver testsend} {
    testsend prop comm Comm \
	    "c\n-n tktest\n-x miscellanous\n-y who knows?\n-s set a new\n"
    set a null
    update
    set a
} {new}
test send-10.6 {SendEventProc procedure, unknown interpreter} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n unknown\n-r $id 44\n-s set a new\n"
    set a null
    update
    list [testsend prop [winfo id .f] Comm] $a
} "{\nr\n-s 44\n-r receiver never heard of interpreter \"unknown\"\n-c 1\n} null"
test send-10.7 {SendEventProc procedure, error in script} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
    update
    testsend prop [winfo id .f] Comm
} {
d471 7
a477 7
test send-10.8 {SendEventProc procedure, exceptional return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s break\n"
    update
    testsend prop [winfo id .f] Comm
} {
d483 7
a489 7
test send-10.9 {SendEventProc procedure, empty return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-r $id 62\n-s concat\n"
    update
    testsend prop [winfo id .f] Comm
} {
d494 26
a519 26
test send-10.10 {SendEventProc procedure, asynchronous calls} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s foreach i {1 2 3} {error {test error} {Initial errorInfo} {test code}}\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.11 {SendEventProc procedure, exceptional return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s break\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.12 {SendEventProc procedure, empty return} {secureserver testsend} {
    testsend prop [winfo id .f] Comm {}
    testsend prop comm Comm \
	    "c\n-n tktest\n-s concat\n"
    update
    testsend prop [winfo id .f] Comm
} {}
test send-10.13 {SendEventProc procedure, return processing} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-c 1\n-e test1\n-i test2\n-r test3\n-s [testsend serial]\n"
    list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
} {1 test3 {test2
d522 46
a567 45
test send-10.14 {SendEventProc procedure, extraneous return options} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-x test1\n-y test2\n-r result\n-s [testsend serial]\n"
    list [catch {send dummy foo} msg] $msg
} {0 result}
test send-10.15 {SendEventProc procedure, serial number} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-r response\n"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-10.16 {SendEventProc procedure, serial number} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-r response\n\n-s 0"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}
test send-10.17 {SendEventProc procedure, errorCode and errorInfo} {secureserver testsend} {
    testsend prop comm Comm \
	    "r\n-i test1\n-e test2\n-c 4\n-s [testsend serial]\n"
    set errorCode oldErrorCode
    set errorInfo oldErrorInfo
    list [catch {send dummy foo} msg] $msg $errorInfo $errorCode
} {4 {} oldErrorInfo oldErrorCode}
test send-10.18 {SendEventProc procedure, send kills application} {secureserver testsend} {
    setupbg
    dobg {tk appname t_s_3}
    set x [list [catch {send t_s_3 destroy .} msg] $msg]
    cleanupbg
    set x
} {0 {}}
test send-10.19 {SendEventProc procedure, send exits} {secureserver testsend} {
    setupbg
    dobg {tk appname t_s_3}
    set x [list [catch {send t_s_3 exit} msg] $msg]
    cleanupbg
    set x
} {1 {target application died}}

test send-11.1 {AppendPropCarefully and AppendErrorProc procedures} {secureserver testsend} {
    testsend prop root InterpRegistry "0x21447 dummy\n"
    list [catch {send dummy foo} msg] $msg
} {1 {no application named "dummy"}}
test send-11.2 {AppendPropCarefully and AppendErrorProc procedures} {secureserver testsend} {
    testsend prop comm Comm "c\n-r0x123 44\n-n tktest\n-s concat a b c\n"
    update
} {}
d574 8
a581 9

test send-12.1 {TimeoutProc procedure} {secureserver testsend} {
    testsend prop root InterpRegistry "$id dummy\n"
    list [catch {send dummy foo} msg] $msg
} {1 {target application died or uses a Tk version before 4.0}}

catch {testsend prop root InterpRegistry ""}

test send-12.2 {TimeoutProc procedure} {secureserver} {
d586 6
a591 4
    set app [dobg {
	after 10 {after 10 {after 5000; exit}}
	tk appname
    }]
d594 1
a594 1
    cleanupbg
d600 1
a600 1
test send-13.1 {DeleteProc procedure} {secureserver} {
d607 1
a607 1
test send-13.2 {DeleteProc procedure} {secureserver} {
d617 20
a636 18
test send-14.1 {SendRestrictProc procedure, sends crossing from different displays} {secureserver altDisplay} {
    setupbg -display $env(TK_ALT_DISPLAY)
    set result [dobg "
    toplevel .t -screen [winfo screen .]
    wm geometry .t +0+0
    tk appname xyzgorp1
    set x child
    "]
    toplevel .t -screen $env(TK_ALT_DISPLAY)
    wm geometry .t +0+0
    tk appname xyzgorp2
    update
    set y parent
    set result [send -displayof .t xyzgorp1 {list $x [send -displayof .t xyzgorp2 set y]}]
    destroy .t
    cleanupbg
    set result
} {child parent}
d638 1
a638 1
catch {
d641 12
a653 12
test send-15.1 {UpdateCommWindow procedure} {secureserver testsend} {
    set x [list [testsend prop comm TK_APPLICATION]]
    newApp "" t_s_1 Test
    send t_s_1 wm withdraw .
    newApp "" t_s_2 Test
    send t_s_2 wm withdraw .
    lappend x [testsend prop comm TK_APPLICATION]
    interp delete t_s_1
    lappend x [testsend prop comm TK_APPLICATION]
    interp delete t_s_2
    lappend x [testsend prop comm TK_APPLICATION]
} {tktest {t_s_2 t_s_1 tktest} {t_s_2 tktest} tktest}
d655 2
a656 2
catch {
    tk appname $name
d658 2
d667 13
@


