head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.08;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out Tk's "raise" and
# "lower" commands, plus associated code to manage window
# stacking order.  It is organized in the standard fashion
# for Tcl tests.
#
# Copyright (c) 1993-1994 The Regents of the University of California.
# Copyright (c) 1994 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: raise.test,v 1.7 2002/07/13 20:28:35 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

testConstraint testmakeexist [llength [info commands testmakeexist]]

# Procedure to create a bunch of overlapping windows, which should
# make it easy to detect differences in order.

proc raise_setup {} {
    foreach i [winfo child .raise] {
	destroy $i
    }
    foreach i {a b c d e} {
	label .raise.$i -text $i -relief raised -bd 2
    }
    place .raise.a -x 20 -y 60 -width 60 -height 80
    place .raise.b -x 60 -y 60 -width 60 -height 80
    place .raise.c -x 100 -y 60 -width 60 -height 80
    place .raise.d -x 40 -y 20 -width 100 -height 60
    place .raise.e -x 40 -y 120 -width 100 -height 60
}

# Procedure to return information about which windows are on top
# of which other windows.

proc raise_getOrder {} {
    set x [winfo rootx .raise]
    set y [winfo rooty .raise]
    list [winfo name [winfo containing [expr $x+50] [expr $y+70]]] \
	    [winfo name [winfo containing [expr $x+90] [expr $y+70]]] \
	    [winfo name [winfo containing [expr $x+130] [expr $y+70]]] \
	    [winfo name [winfo containing [expr $x+70] [expr $y+100]]] \
	    [winfo name [winfo containing [expr $x+110] [expr $y+100]]] \
	    [winfo name [winfo containing [expr $x+50] [expr $y+130]]] \
	    [winfo name [winfo containing [expr $x+90] [expr $y+130]]] \
	    [winfo name [winfo containing [expr $x+130] [expr $y+130]]]
}

# Procedure to set up a collection of top-level windows

proc raise_makeToplevels {} {
    deleteWindows
    foreach i {.raise1 .raise2 .raise3} {
	toplevel $i
	wm geom $i 150x100+0+0
	update
    }
}

toplevel .raise
wm geom .raise 250x200+0+0

test raise-1.1 {preserve creation order} {
    raise_setup
    tkwait visibility .raise.e
    raise_getOrder
} {d d d b c e e e}
test raise-1.2 {preserve creation order} testmakeexist {
    raise_setup
    testmakeexist .raise.a
    update
    raise_getOrder
} {d d d b c e e e}
test raise-1.3 {preserve creation order} testmakeexist {
    raise_setup
    testmakeexist .raise.c
    update
    raise_getOrder
} {d d d b c e e e}
test raise-1.4 {preserve creation order} testmakeexist {
    raise_setup
    testmakeexist .raise.e
    update
    raise_getOrder
} {d d d b c e e e}
test raise-1.5 {preserve creation order} testmakeexist {
    raise_setup
    testmakeexist .raise.d .raise.c .raise.b
    update
    raise_getOrder
} {d d d b c e e e}

test raise-2.1 {raise internal windows before creation} {
    raise_setup
    raise .raise.a
    update
    raise_getOrder
} {a d d a c a e e}
test raise-2.2 {raise internal windows before creation} {
    raise_setup
    raise .raise.c
    update
    raise_getOrder
} {d d c b c e e c}
test raise-2.3 {raise internal windows before creation} {
    raise_setup
    raise .raise.e
    update
    raise_getOrder
} {d d d b c e e e}
test raise-2.4 {raise internal windows before creation} {
    raise_setup
    raise .raise.e .raise.a
    update
    raise_getOrder
} {d d d b c e b c}
test raise-2.5 {raise internal windows before creation} {
    raise_setup
    raise .raise.a .raise.d
    update
    raise_getOrder
} {a d d a c e e e}

test raise-3.1 {raise internal windows after creation} {
    raise_setup
    update
    raise .raise.a .raise.d
    raise_getOrder
} {a d d a c e e e}
test raise-3.2 {raise internal windows after creation} testmakeexist {
    raise_setup
    testmakeexist .raise.a .raise.b
    raise .raise.a .raise.b
    update
    raise_getOrder
} {d d d a c e e e}
test raise-3.3 {raise internal windows after creation} testmakeexist {
    raise_setup
    testmakeexist .raise.a .raise.d
    raise .raise.a .raise.b
    update
    raise_getOrder
} {d d d a c e e e}
test raise-3.4 {raise internal windows after creation} testmakeexist {
    raise_setup
    testmakeexist .raise.a .raise.c .raise.d
    raise .raise.a .raise.b
    update
    raise_getOrder
} {d d d a c e e e}

test raise-4.1 {raise relative to nephews} {
    raise_setup
    update
    frame .raise.d.child
    raise .raise.a .raise.d.child
    raise_getOrder
} {a d d a c e e e}
test raise-4.2 {raise relative to nephews} {
    raise_setup
    update
    frame .raise2
    list [catch {raise .raise.a .raise2} msg] $msg
} {1 {can't raise ".raise.a" above ".raise2"}}
catch {destroy .raise2}

test raise-5.1 {lower internal windows} {
    raise_setup
    update
    lower .raise.d
    raise_getOrder
} {a b c b c e e e}
test raise-5.2 {lower internal windows} {
    raise_setup
    update
    lower .raise.d .raise.b
    raise_getOrder
} {d b c b c e e e}
test raise-5.3 {lower internal windows} {
    raise_setup
    update
    lower .raise.a .raise.e
    raise_getOrder
} {a d d a c e e e}
test raise-5.4 {lower internal windows} {
    raise_setup
    update
    frame .raise2
    list [catch {lower .raise.a .raise2} msg] $msg
} {1 {can't lower ".raise.a" below ".raise2"}}
catch {destroy .raise2}

test raise-6.1 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    update
    raise .raise1
    winfo containing [winfo rootx .raise1] [winfo rooty .raise1]
} .raise1
test raise-6.2 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    update
    raise .raise2
    winfo containing [winfo rootx .raise1] [winfo rooty .raise1]
} .raise2
test raise-6.3 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    update
    raise .raise3
    raise .raise2
    raise .raise1 .raise3
    set result [winfo containing [winfo rootx .raise1] \
	    [winfo rooty .raise1]]
    destroy .raise2
    update
    after 500
    list $result [winfo containing [winfo rootx .raise1] \
	    [winfo rooty .raise1]]
} {.raise2 .raise1}
test raise-6.4 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    update
    raise .raise2
    raise .raise1
    lower .raise3 .raise1
    set result [winfo containing [winfo rootx .raise1] \
	    [winfo rooty .raise1]]
    wm geometry .raise2 +30+30
    wm geometry .raise1 +60+60
    destroy .raise1
    update
    after 500
    list $result [winfo containing [winfo rootx .raise2] \
	    [winfo rooty .raise2]]
} {.raise1 .raise3}
test raise-6.5 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    raise .raise1
    set time [lindex [time {raise .raise1}] 0]
    expr {$time < 2000000}
} 1
test raise-6.6 {raise/lower toplevel windows} {nonPortable} {
    raise_makeToplevels
    update
    raise .raise2
    raise .raise1
    raise .raise3
    frame .raise1.f1
    frame .raise1.f1.f2
    lower .raise3 .raise1.f1.f2
    set result [winfo containing [winfo rootx .raise1] \
	    [winfo rooty .raise1]]
    destroy .raise1
    update
    after 500
    list $result [winfo containing [winfo rootx .raise2] \
	    [winfo rooty .raise2]]
} {.raise1 .raise3}

test raise-7.1 {errors in raise/lower commands} {
    list [catch {raise} msg] $msg
} {1 {wrong # args: should be "raise window ?aboveThis?"}}
test raise-7.2 {errors in raise/lower commands} {
    list [catch {raise a b c} msg] $msg
} {1 {wrong # args: should be "raise window ?aboveThis?"}}
test raise-7.3 {errors in raise/lower commands} {
    list [catch {raise badName} msg] $msg
} {1 {bad window path name "badName"}}
test raise-7.4 {errors in raise/lower commands} {
    list [catch {raise . badName2} msg] $msg
} {1 {bad window path name "badName2"}}
test raise-7.5 {errors in raise/lower commands} {
    list [catch {lower} msg] $msg
} {1 {wrong # args: should be "lower window ?belowThis?"}}
test raise-7.6 {errors in raise/lower commands} {
    list [catch {lower a b c} msg] $msg
} {1 {wrong # args: should be "lower window ?belowThis?"}}
test raise-7.7 {errors in raise/lower commands} {
    list [catch {lower badName3} msg] $msg
} {1 {bad window path name "badName3"}}
test raise-7.8 {errors in raise/lower commands} {
    list [catch {lower . badName4} msg] $msg
} {1 {bad window path name "badName4"}}

deleteWindows

# cleanup
::tcltest::cleanupTests
return













@


1.4
log
@touched all sources to ease next import
@
text
@d11 1
a11 1
# RCS: @@(#) $Id: raise.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $
d13 6
a18 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
d20 1
a20 7
if {[info commands testmakeexist] == {}} {
    puts "This application hasn't been compiled with the \"testmakeexist\""
    puts "command, so I can't run this test.  Are you sure you're using"
    puts "tktest instead of wish?"
    ::tcltest::cleanupTests
    return
}
d58 1
a58 3
    foreach i [winfo child .] {
	destroy $i
    }
a65 3
foreach i [winfo child .] {
    destroy $i
}
d71 1
a71 1
    update
d74 1
a74 1
test raise-1.2 {preserve creation order} {
d80 1
a80 1
test raise-1.3 {preserve creation order} {
d86 1
a86 1
test raise-1.4 {preserve creation order} {
d92 1
a92 1
test raise-1.5 {preserve creation order} {
d136 1
a136 1
test raise-3.2 {raise internal windows after creation} {
d143 1
a143 1
test raise-3.3 {raise internal windows after creation} {
d150 1
a150 1
test raise-3.4 {raise internal windows after creation} {
d290 1
a290 3
foreach i [winfo child .] {
    destroy $i
}
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d8 2
d11 5
a15 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: raise.test,v 1.8 1999/01/26 04:11:36 jingham Exp $
d21 1
a24 3
if {[string compare test [info procs test]] == 1} then \
  {source defs}

d301 17
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a7 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d9 4
a12 5
# RCS: @@(#) $Id: raise.test,v 1.7.6.1 2000/05/04 21:26:29 spolk Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
a17 1
    ::tcltest::cleanupTests
d21 3
a299 17

# cleanup
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tk 8.4.0
@
text
@d11 1
a11 1
# RCS: @@(#) $Id: raise.test,v 1.7 2002/07/13 20:28:35 dgp Exp $
d13 3
a15 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d17 7
a23 1
testConstraint testmakeexist [llength [info commands testmakeexist]]
d61 3
a63 1
    deleteWindows
d71 3
d79 1
a79 1
    tkwait visibility .raise.e
d82 1
a82 1
test raise-1.2 {preserve creation order} testmakeexist {
d88 1
a88 1
test raise-1.3 {preserve creation order} testmakeexist {
d94 1
a94 1
test raise-1.4 {preserve creation order} testmakeexist {
d100 1
a100 1
test raise-1.5 {preserve creation order} testmakeexist {
d144 1
a144 1
test raise-3.2 {raise internal windows after creation} testmakeexist {
d151 1
a151 1
test raise-3.3 {raise internal windows after creation} testmakeexist {
d158 1
a158 1
test raise-3.4 {raise internal windows after creation} testmakeexist {
d298 3
a300 1
deleteWindows
@


