head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.2
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TK_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.50;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.53;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.20.39.05;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test the procedures in tkConfig.c,
# which comprise the new new option configuration system.  It is
# organized in the standard "white-box" fashion for Tcl tests.
#
# Copyright (c) 1997 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: config.test,v 1.6 2002/07/14 05:48:46 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

testConstraint testobjconfig [llength [info commands testobjconfig]]

proc killTables {} {
    # Note: it's important to delete chain2 before chain1, because
    # chain2 depends on chain1.  If chain1 is deleted first, the
    # delete of chain2 will crash.

    foreach t {alltypes chain2 chain1 configerror internal new notenoughparams
	    twowindows} {
	while {[testobjconfig info $t] != ""} {
	    testobjconfig delete $t
	}
    }
}

if {[testConstraint testobjconfig]} {
    killTables
}

test config-1.1 {Tk_CreateOptionTable - reference counts} testobjconfig {
    deleteWindows
    killTables
    set x {}
    testobjconfig alltypes .a
    lappend x [testobjconfig info alltypes]
    testobjconfig alltypes .b
    lappend x [testobjconfig info alltypes]
    deleteWindows
    set x
} {{1 16 -boolean} {2 16 -boolean}}
test config-1.2 {Tk_CreateOptionTable - synonym initialization} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a -synonym green
    .a cget -color
} {green}
test config-1.3 {Tk_CreateOptionTable - option database initialization} testobjconfig {
    deleteWindows
    option clear
    testobjconfig alltypes .a
    option add *b.string different
    testobjconfig alltypes .b
    list [.a cget -string] [.b cget -string]
} {foo different}
test config-1.4 {Tk_CreateOptionTable - option database initialization} testobjconfig {
    deleteWindows
    option clear
    testobjconfig alltypes .a
    option add *b.String bar
    testobjconfig alltypes .b
    list [.a cget -string] [.b cget -string]
} {foo bar}
test config-1.5 {Tk_CreateOptionTable - default initialization} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a
    .a cget -relief
} {raised}
test config-1.6 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
    killTables
    testobjconfig chain1 .a
    testobjconfig chain2 .b
    testobjconfig info chain2
} {1 4 -three 2 2 -one}
test config-1.7 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
    killTables
    testobjconfig chain2 .b
    testobjconfig chain1 .a
    testobjconfig info chain2
} {1 4 -three 2 2 -one}
test config-1.8 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
    testobjconfig chain1 .a
    testobjconfig chain2 .b
    list [catch {.a cget -four} msg] $msg [.a cget -one] \
	    [.b cget -four] [.b cget -one]
} {1 {unknown option "-four"} one four one}

test config-2.1 {Tk_DeleteOptionTable - reference counts} testobjconfig {
    deleteWindows
    killTables
    testobjconfig chain1 .a
    testobjconfig chain2 .b
    testobjconfig chain2 .c
    deleteWindows
    set x {}
    testobjconfig delete chain2
    lappend x [testobjconfig info chain2] [testobjconfig info chain1]
    testobjconfig delete chain2
    lappend x [testobjconfig info chain2] [testobjconfig info chain1]
} {{1 4 -three 2 2 -one} {2 2 -one} {} {1 2 -one}}

# No tests for DestroyOptionHashTable; couldn't figure out how to test.

test config-3.1 {Tk_InitOptions - priority of chained tables} testobjconfig {
    deleteWindows
    testobjconfig chain1 .a
    testobjconfig chain2 .b
    list [.a cget -two] [.b cget -two]
} {two {two and a half}}
test config-3.2 {Tk_InitOptions - initialize from database} testobjconfig {
    deleteWindows
    option clear
    option add *a.color blue
    testobjconfig alltypes .a
    list [.a cget -color]
} {blue}
test config-3.3 {Tk_InitOptions - initialize from database} testobjconfig {
    deleteWindows
    option clear
    option add *a.justify bogus
    testobjconfig alltypes .a
    list [.a cget -justify]
} {left}
test config-3.4 {Tk_InitOptions - initialize from widget class} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a
    list [.a cget -color]
} {red}
test config-3.5 {Tk_InitOptions - no initial value} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a
    .a cget -anchor
} {}
test config-3.6 {Tk_InitOptions - bad initial value} testobjconfig {
    deleteWindows
    option clear
    option add *a.color non-existent
    list [catch {testobjconfig alltypes .a} msg] $msg $errorInfo
} {1 {unknown color name "non-existent"} {unknown color name "non-existent"
    (database entry for "-color" in widget ".a")
    invoked from within
"testobjconfig alltypes .a"}}
option clear
test config-3.7 {Tk_InitOptions - bad initial value} testobjconfig {
    deleteWindows
    list [catch {testobjconfig configerror} msg] $msg $errorInfo
} {1 {expected integer but got "bogus"} {expected integer but got "bogus"
    (default value for "-int")
    invoked from within
"testobjconfig configerror"}}
option clear

test config-4.1 {DoObjConfig - boolean} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -boolean 0} msg] $msg [catch {.foo cget -boolean} result] $result [catch {rename .foo {}}]
} {0 .foo 0 0 0}
test config-4.2 {DoObjConfig - boolean} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -boolean 1} msg] $msg [catch {.foo cget -boolean} result] $result [catch {rename .foo {}}]
} {0 .foo 0 1 0}
test config-4.3 {DoObjConfig - invalid boolean} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -boolean {}} msg] $msg
} {1 {expected boolean value but got ""}}
test config-4.4 {DoObjConfig - boolean internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -boolean 0
    .foo cget -boolean
} {0}
test config-4.5 {DoObjConfig - integer} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -integer 3} msg] $msg [catch {.foo cget -integer} result] $result [catch {rename .foo {}}]
} {0 .foo 0 3 0}
test config-4.6 {DoObjConfig - invalid integer} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -integer bar} msg] $msg
} {1 {expected integer but got "bar"}}
test config-4.7 {DoObjConfig - integer internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -integer 421
    .foo cget -integer
} {421}
test config-4.8 {DoObjConfig - double} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -double 3.14} msg] $msg [catch {.foo cget -double} result] $result [catch {rename .foo {}}]
} {0 .foo 0 3.14 0}
test config-4.9 {DoObjConfig - invalid double} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -double bar} msg] $msg
} {1 {expected floating-point number but got "bar"}}
test config-4.10 {DoObjConfig - double internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -double 62.75
    .foo cget -double
} {62.75}
test config-4.11 {DoObjConfig - string} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -string test} msg] $msg [catch {.foo cget -string} result] $result [destroy .foo]
} {0 .foo 0 test {}}
test config-4.12 {DoObjConfig - null string} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -string {}} msg] $msg [catch {.foo cget -string} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.13 {DoObjConfig - string internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -string "this is a test"
    .foo cget -string
} {this is a test}
test config-4.14 {DoObjConfig - string table} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -stringtable two} msg] $msg [catch {.foo cget -stringtable} result] $result [destroy .foo]
} {0 .foo 0 two {}}
test config-4.15 {DoObjConfig - invalid string table} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -stringtable foo} msg] $msg
} {1 {bad stringtable "foo": must be one, two, three, or four}}
test config-4.16 {DoObjConfig - new string table} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -stringtable two
    list [catch {.foo configure -stringtable three} msg] $msg [catch {.foo cget -stringtable} result] $result [destroy .foo]
} {0 16 0 three {}}
test config-4.17 {DoObjConfig - stringtable internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -stringtable "four"
    .foo cget -stringtable
} {four}
test config-4.18 {DoObjConfig - color} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -color blue} msg] $msg [catch {.foo cget -color} result] $result [destroy .foo]
} {0 .foo 0 blue {}}
test config-4.19 {DoObjConfig - invalid color} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -color xxx} msg] $msg
} {1 {unknown color name "xxx"}}
test config-4.20 {DoObjConfig - color internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -color purple
    .foo cget -color
} {purple}
test config-4.21 {DoObjConfig - null color} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -color {}} msg] $msg [catch {.foo cget -color} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.22 {DoObjConfig - getting rid of old color} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -color #333333
    list [catch {.foo configure -color #444444} msg] $msg [catch {.foo cget -color} result] $result [destroy .foo]
} {0 32 0 #444444 {}}
test config-4.23 {DoObjConfig - font} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -font {Helvetica 72}} msg] $msg [catch {.foo cget -font} result] $result [destroy .foo]
} {0 .foo 0 {Helvetica 72} {}}
test config-4.24 {DoObjConfig - new font} testobjconfig {
    catch {rename .foo {}}
    testobjconfig alltypes .foo -font {Courier 12}
    list [catch {.foo configure -font {Helvetica 72}} msg] $msg [catch {.foo cget -font} result] $result [destroy .foo]
} {0 64 0 {Helvetica 72} {}}
test config-4.25 {DoObjConfig - invalid font} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -font {Helvetica 12 foo}} msg] $msg
} {1 {unknown font style "foo"}}
test config-4.26 {DoObjConfig - null font} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -font {}} msg] $msg [catch {.foo cget -font} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.27 {DoObjConfig - font internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -font {Times 16}
    .foo cget -font
} {Times 16}
test config-4.28 {DoObjConfig - bitmap} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -bitmap gray75} msg] $msg [catch {.foo cget -bitmap} result] $result [destroy .foo]
} {0 .foo 0 gray75 {}}
test config-4.29 {DoObjConfig - new bitmap} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -bitmap gray75
    list [catch {.foo configure -bitmap gray50} msg] $msg [catch {.foo cget -bitmap} result] $result [destroy .foo]
} {0 128 0 gray50 {}}
test config-4.30 {DoObjConfig - invalid bitmap} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -bitmap foo} msg] $msg
} {1 {bitmap "foo" not defined}}
test config-4.31 {DoObjConfig - null bitmap} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -bitmap {}} msg] $msg [catch {.foo cget -bitmap} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.32 {DoObjConfig - bitmap internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -bitmap gray25
    .foo cget -bitmap
} {gray25}
test config-4.33 {DoObjConfig - border} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -border green} msg] $msg [catch {.foo cget -border} result] $result [destroy .foo]
} {0 .foo 0 green {}}
test config-4.34 {DoObjConfig - invalid border} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -border xxx} msg] $msg
} {1 {unknown color name "xxx"}}
test config-4.35 {DoObjConfig - null border} testobjconfig {
    catch {rename .foo {}}
    list [catch {testobjconfig alltypes .foo -border {}} msg] $msg [catch {.foo cget -border} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.36 {DoObjConfig - border internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -border #123456
    .foo cget -border
} {#123456}
test config-4.37 {DoObjConfig - getting rid of old border} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -border #333333
    list [catch {.foo configure -border #444444} msg] $msg [catch {.foo cget -border} result] $result [destroy .foo]
} {0 256 0 #444444 {}}
test config-4.38 {DoObjConfig - relief} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -relief flat} msg] $msg [catch {.foo cget -relief} result] $result [destroy .foo]
} {0 .foo 0 flat {}}
test config-4.39 {DoObjConfig - invalid relief} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -relief foo} msg] $msg
} {1 {bad relief "foo": must be flat, groove, raised, ridge, solid, or sunken}}
test config-4.40 {DoObjConfig - new relief} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -relief raised
    list [catch {.foo configure -relief flat} msg] $msg [catch {.foo cget -relief} result] $result [destroy .foo]
} {0 512 0 flat {}}
test config-4.41 {DoObjConfig - relief internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -relief ridge
    .foo cget -relief
} {ridge}
test config-4.42 {DoObjConfig - cursor} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -cursor arrow} msg] $msg [catch {.foo cget -cursor} result] $result [destroy .foo]
} {0 .foo 0 arrow {}}
test config-4.43 {DoObjConfig - invalid cursor} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -cursor foo} msg] $msg
} {1 {bad cursor spec "foo"}}
test config-4.44 {DoObjConfig - null cursor} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -cursor {}} msg] $msg [catch {.foo cget -cursor} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.45 {DoObjConfig - new cursor} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -cursor xterm
    list [catch {.foo configure -cursor arrow} msg] $msg [catch {.foo cget -cursor} result] $result [destroy .foo]
} {0 1024 0 arrow {}}
test config-4.46 {DoObjConfig - cursor internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -cursor watch
    .foo cget -cursor
} {watch}
test config-4.47 {DoObjConfig - justify} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -justify center} msg] $msg [catch {.foo cget -justify} result] $result [destroy .foo]
} {0 .foo 0 center {}}
test config-4.48 {DoObjConfig - invalid justify} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -justify foo} msg] $msg
} {1 {bad justification "foo": must be left, right, or center}}
test config-4.49 {DoObjConfig - new justify} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -justify left
    list [catch {.foo configure -justify right} msg] $msg [catch {.foo cget -justify} result] $result [destroy .foo]
} {0 2048 0 right {}}
test config-4.50 {DoObjConfig - justify internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -justify center
    .foo cget -justify
} {center}
test config-4.51 {DoObjConfig - anchor} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -anchor center} msg] $msg [catch {.foo cget -anchor} result] $result [destroy .foo]
} {0 .foo 0 center {}}
test config-4.52 {DoObjConfig - invalid anchor} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -anchor foo} msg] $msg
} {1 {bad anchor "foo": must be n, ne, e, se, s, sw, w, nw, or center}}
test config-4.53 {DoObjConfig - new anchor} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -anchor e
    list [catch {.foo configure -anchor n} msg] $msg [catch {.foo cget -anchor} result] $result [destroy .foo]
} {0 4096 0 n {}}
test config-4.54 {DoObjConfig - anchor internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -anchor sw
    .foo cget -anchor
} {sw}
test config-4.55 {DoObjConfig - pixel} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -pixel 42} msg] $msg [catch {.foo cget -pixel} result] $result [destroy .foo]
} {0 .foo 0 42 {}}
test config-4.56 {DoObjConfig - invalid pixel} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -pixel foo} msg] $msg
} {1 {bad screen distance "foo"}}
test config-4.57 {DoObjConfig - new pixel} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -pixel 42m
    list [catch {.foo configure -pixel 3c} msg] $msg [catch {.foo cget -pixel} result] $result [destroy .foo]
} {0 8192 0 3c {}}
test config-4.58 {DoObjConfig - pixel internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -pixel [winfo screenmmwidth .]m
    .foo cget -pixel
} [winfo screenwidth .]
test config-4.59 {DoObjConfig - window} testobjconfig {
    catch {destroy .foo}
    catch {destroy .bar}
    toplevel .bar
    list [catch {testobjconfig twowindows .foo -window .bar} msg] $msg [catch {.foo cget -window} result] $result [destroy .foo] [destroy .bar]
} {0 .foo 0 .bar {} {}}
test config-4.60 {DoObjConfig - invalid window} testobjconfig {
    catch {destroy .foo}
    toplevel .bar
    list [catch {testobjconfig twowindows .foo -window foo} msg] $msg [destroy .bar]
} {1 {bad window path name "foo"} {}}
test config-4.61 {DoObjConfig - null window} testobjconfig {
    catch {destroy .foo}
    catch {destroy .bar}
    toplevel .bar
    list [catch {testobjconfig twowindows .foo -window {}} msg] $msg [catch {.foo cget -window} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.62 {DoObjConfig - new window} testobjconfig {
    catch {destroy .foo}
    catch {destroy .bar}
    catch {destroy .blamph}
    toplevel .bar
    toplevel .blamph
    testobjconfig twowindows .foo -window .bar
    list [catch {.foo configure -window .blamph} msg] $msg [catch {.foo cget -window} result] $result [destroy .foo] [destroy .bar] [destroy .blamph]
} {0 0 0 .blamph {} {} {}}
test config-4.63 {DoObjConfig - window internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -window .
    .foo cget -window
} {.}
test config-4.64 {DoObjConfig - releasing old values} testobjconfig {
    # This test doesn't generate a useful value to check; if an
    # error occurs, it will be detected only by memory checking software
    # such as Purify or Tcl's built-in checker.

    catch {rename .foo {}}
    testobjconfig alltypes .foo -string {Test string} -color yellow \
	    -font {Courier 18} -bitmap questhead -border green -cursor cross \
	    -custom foobar
    .foo configure -string {new string} -color brown \
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch \
	    -custom barbaz
    concat {}
} {}
test config-4.65 {DoObjConfig - releasing old values} testobjconfig {
    # This test doesn't generate a useful value to check; if an
    # error occurs, it will be detected only by memory checking software
    # such as Purify or Tcl's built-in checker.

    catch {rename .foo {}}
    testobjconfig internal .foo -string {Test string} -color yellow \
	    -font {Courier 18} -bitmap questhead -border green -cursor cross \
	    -custom foobar
    .foo configure -string {new string} -color brown \
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch \
	    -custom barbaz
    concat {}
} {}
test config-4.66 {DoObjConfig - custom} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -custom test} msg] $msg [catch {.foo cget -custom} result] $result [destroy .foo]
} {0 .foo 0 TEST {}}
test config-4.67 {DoObjConfig - null custom} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -custom {}} msg] $msg [catch {.foo cget -custom} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.68 {DoObjConfig - custom internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -custom "this is a test"
    .foo cget -custom
} {THIS IS A TEST}

test config-5.1 {ObjectIsEmpty - object is already string} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -color [format ""]
    .foo cget -color
} {}
test config-5.2 {ObjectIsEmpty - object is already string} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -color [format " "]} msg] $msg
} {1 {unknown color name " "}}
test config-5.3 {ObjectIsEmpty - must convert back to string} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -color [list]
    .foo cget -color
} {}

deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig chain2 .a
    testobjconfig alltypes .b
}
test config-6.1 {GetOptionFromObj - cached answer} testobjconfig {
    list [.a cget -three] [.a cget -three]
} {three three}
test config-6.2 {GetOptionFromObj - exact match} testobjconfig {
    .a cget -one
} {one}
test config-6.3 {GetOptionFromObj - abbreviation} testobjconfig {
    .a cget -fo
} {four}
test config-6.4 {GetOptionFromObj - ambiguous abbreviation} testobjconfig {
    list [catch {.a cget -on} msg] $msg
} {1 {unknown option "-on"}}
test config-6.5 {GetOptionFromObj - duplicate options in different tables} testobjconfig {
    .a cget -tw
} {two and a half}
test config-6.6 {GetOptionFromObj - synonym} testobjconfig {
    .b cget -synonym
} {red}

deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig alltypes .a
}
test config-7.1 {Tk_SetOptions - basics} testobjconfig {
    .a configure -color green -rel sunken
     list [.a cget -color] [.a cget -relief]
} {green sunken}
test config-7.2 {Tk_SetOptions - bogus option name} testobjconfig {
    list [catch {.a configure -bogus} msg] $msg
} {1 {unknown option "-bogus"}}
test config-7.3 {Tk_SetOptions - synonym} testobjconfig {
    .a configure -synonym blue
    .a cget -color
} {blue}
test config-7.4 {Tk_SetOptions - missing value} testobjconfig {
    list [catch {.a configure -color green -relief} msg] $msg [.a cget -color]
} {1 {value for "-relief" missing} green}
test config-7.5 {Tk_SetOptions - saving old values} testobjconfig {
    .a configure -color red -int 7 -relief raised -double 3.14159
    list [catch {.a csave -color green -int 432 -relief sunken \
	    -double 2.0 -color bogus} msg] $msg [.a cget -color] \
	    [.a cget -int] [.a cget -relief] [.a cget -double]
} {1 {unknown color name "bogus"} red 7 raised 3.14159}
test config-7.6 {Tk_SetOptions - error in DoObjConfig call} testobjconfig {
    list [catch {.a configure -color bogus} msg] $msg $errorInfo
} {1 {unknown color name "bogus"} {unknown color name "bogus"
    (processing "-color" option)
    invoked from within
".a configure -color bogus"}}
test config-7.7 {Tk_SetOptions - synonym name in error message} testobjconfig {
    list [catch {.a configure -synonym bogus} msg] $msg $errorInfo
} {1 {unknown color name "bogus"} {unknown color name "bogus"
    (processing "-synonym" option)
    invoked from within
".a configure -synonym bogus"}}
test config-7.8 {Tk_SetOptions - returning mask} testobjconfig {
    format %x [.a configure -color red -int 7 -relief raised -double 3.14159]
} {226}
test config-7.9 {Tk_SetOptions - error in DoObjConfig with custom option} testobjconfig {
    list [catch {.a configure -custom bad} msg] $msg $errorInfo
} {1 {expected good value, got "BAD"} {expected good value, got "BAD"
    (processing "-custom" option)
    invoked from within
".a configure -custom bad"}}

test config-8.1 {Tk_RestoreSavedOptions - restore in proper order} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a
    list [catch {.a csave -color green -color black -color blue \
	    -color #ffff00 -color #ff00ff -color bogus} msg] $msg \
	    [.a cget -color]
} {1 {unknown color name "bogus"} red}
test config-8.2 {Tk_RestoreSavedOptions - freeing object memory} testobjconfig {
    deleteWindows
    testobjconfig alltypes .a
    .a csave -color green -color black -color blue -color #ffff00 \
	    -color #ff00ff
} {32}
test config-8.3 {Tk_RestoreSavedOptions - boolean internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -boolean 0 -color bogus}] [.a cget -boolean]
} {1 1}
test config-8.4 {Tk_RestoreSavedOptions - integer internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -integer 24 -color bogus}] [.a cget -integer]
} {1 148962237}
test config-8.5 {Tk_RestoreSavedOptions - double internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -double 62.4 -color bogus}] [.a cget -double]
} {1 3.14159}
test config-8.6 {Tk_RestoreSavedOptions - string internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -string "A long string" -color bogus}] \
	    [.a cget -string]
} {1 foo}
test config-8.7 {Tk_RestoreSavedOptions - string table internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -stringtable three -color bogus}] \
	    [.a cget -stringtable]
} {1 one}
test config-8.8 {Tk_RestoreSavedOptions - color internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -color green -color bogus}] [.a cget -color]
} {1 red}
test config-8.9 {Tk_RestoreSavedOptions - font internal form} {testobjconfig nonPortable} {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -font {Times 12} -color bogus}] [.a cget -font]
} {1 {Helvetica 12}}
test config-8.10 {Tk_RestoreSavedOptions - bitmap internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -bitmap questhead -color bogus}] [.a cget -bitmap]
} {1 gray50}
test config-8.11 {Tk_RestoreSavedOptions - border internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -border brown -color bogus}] [.a cget -border]
} {1 blue}
test config-8.12 {Tk_RestoreSavedOptions - relief internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -relief sunken -color bogus}] [.a cget -relief]
} {1 raised}
test config-8.13 {Tk_RestoreSavedOptions - cursor internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -cursor watch -color bogus}] [.a cget -cursor]
} {1 xterm}
test config-8.14 {Tk_RestoreSavedOptions - justify internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -justify right -color bogus}] [.a cget -justify]
} {1 left}
test config-8.15 {Tk_RestoreSavedOptions - anchor internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a
    list [catch {.a csave -anchor center -color bogus}] [.a cget -anchor]
} {1 n}
test config-8.16 {Tk_RestoreSavedOptions - window internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a -window .a
    list [catch {.a csave -window .a -color bogus}] [.a cget -window]
} {1 .a}
test config-8.17 {Tk_RestoreSavedOptions - custom internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a -custom "foobar"
    list [catch {.a csave -custom "barbaz" -color bogus}] [.a cget -custom]
} {1 FOOBAR}

# Most of the tests below will cause memory leakage if there is a
# problem.  This may not be evident unless the tests are run in
# conjunction with a memory usage analyzer such as Purify.

test config-9.1 {Tk_FreeConfigOptions/FreeResources - string internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -string "two words"
    destroy .foo
} {}
test config-9.2 {Tk_FreeConfigOptions/FreeResources - color internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -color yellow
    destroy .foo
} {}
test config-9.3 {Tk_FreeConfigOptions/FreeResources - color} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -color [format blue]
    destroy .foo
} {}
test config-9.4 {Tk_FreeConfigOptions/FreeResources - font internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -font {Courier 20}
    destroy .foo
} {}
test config-9.5 {Tk_FreeConfigOptions/FreeResources - font} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -font [format {Courier 24}]
    destroy .foo
} {}
test config-9.6 {Tk_FreeConfigOptions/FreeResources - bitmap internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -bitmap gray75
    destroy .foo
} {}
test config-9.7 {Tk_FreeConfigOptions/FreeResources - bitmap} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -bitmap [format gray75]
    destroy .foo
} {}
test config-9.8 {Tk_FreeConfigOptions/FreeResources - border internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -border orange
    destroy .foo
} {}
test config-9.9 {Tk_FreeConfigOptions/FreeResources - border} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -border [format blue]
    destroy .foo
} {}
test config-9.10 {Tk_FreeConfigOptions/FreeResources - cursor internal form} testobjconfig {
    catch {destroy .foo}
    testobjconfig internal .foo
    .foo configure -cursor cross
    destroy .foo
} {}
test config-9.11 {Tk_FreeConfigOptions/FreeResources - cursor} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -cursor [format watch]
    destroy .foo
} {}
test config-9.12 {Tk_FreeConfigOptions/FreeResources - not special} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -integer [format 27]
    destroy .foo
} {}
test config-9.13 {Tk_FreeConfigOptions/FreeResources - custom internal form} testobjconfig {
    catch {destroy .fpp}
    testobjconfig internal .foo
    .foo configure -custom "foobar"
    destroy .foo
} {}

test config-10.1 {Tk_GetOptionInfo - one item} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -relief groove
    .foo configure -relief
} {-relief relief Relief raised groove}
test config-10.2 {Tk_GetOptionInfo - one item, synonym} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo
    .foo configure -color black
    .foo configure -synonym
} {-color color Color red black}
test config-10.3 {Tk_GetOptionInfo - all items} testobjconfig {
    catch {destroy .foo}
    testobjconfig alltypes .foo -font {Helvetica 18} -integer 13563
    .foo configure
} {{-boolean boolean Boolean 1 1} {-integer integer Integer 7 13563} {-double double Double 3.14159 3.14159} {-string string String foo foo} {-stringtable StringTable stringTable one one} {-color color Color red red} {-font font Font {Helvetica 12} {Helvetica 18}} {-bitmap bitmap Bitmap gray50 gray50} {-border border Border blue blue} {-relief relief Relief raised raised} {-cursor cursor Cursor xterm xterm} {-justify {} {} left left} {-anchor anchor Anchor {} {}} {-pixel pixel Pixel 1 1} {-custom {} {} {} {}} {-synonym -color}}
test config-10.4 {Tk_GetOptionInfo - chaining through tables} testobjconfig {
    catch {destroy .foo}
    testobjconfig chain2 .foo -one asdf -three xyzzy
    .foo configure
} {{-three three Three three xyzzy} {-four four Four four four} {-two two Two {two and a half} {two and a half}} {-oneAgain oneAgain OneAgain {one again} {one again}} {-one one One one asdf} {-two two Two two {two and a half}}}

deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig alltypes .a
}
test config-11.1 {GetConfigList - synonym} testobjconfig {
    lindex [.a configure] end
} {-synonym -color}
test config-11.2 {GetConfigList - null database names} testobjconfig {
    .a configure -justify
} {-justify {} {} left left}
test config-11.3 {GetConfigList - null default and current value} testobjconfig {
    .a configure -anchor
} {-anchor anchor Anchor {} {}}

deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig internal .a
}
test config-12.1 {GetObjectForOption - boolean} testobjconfig {
    .a configure -boolean 0
    .a cget -boolean
} {0}
test config-12.2 {GetObjectForOption - integer} testobjconfig {
    .a configure -integer 1247
    .a cget -integer
} {1247}
test config-12.3 {GetObjectForOption - double} testobjconfig {
    .a configure -double -88.82
    .a cget -double
} {-88.82}
test config-12.4 {GetObjectForOption - string} testobjconfig {
    .a configure -string "test value"
    .a cget -string
} {test value}
test config-12.5 {GetObjectForOption - stringTable} testobjconfig {
    .a configure -stringtable "two"
    .a cget -stringtable
} {two}
test config-12.6 {GetObjectForOption - color} testobjconfig {
    .a configure -color "green"
    .a cget -color
} {green}
test config-12.7 {GetObjectForOption - font} testobjconfig {
    .a configure -font {Times 36}
    .a cget -font
} {Times 36}
test config-12.8 {GetObjectForOption - bitmap} testobjconfig {
    .a configure -bitmap "questhead"
    .a cget -bitmap
} {questhead}
test config-12.9 {GetObjectForOption - border} testobjconfig {
    .a configure -border #33217c
    .a cget -border
} {#33217c}
test config-12.10 {GetObjectForOption - relief} testobjconfig {
    .a configure -relief groove
    .a cget -relief
} {groove}
test config-12.11 {GetObjectForOption - cursor} testobjconfig {
    .a configure -cursor watch
    .a cget -cursor
} {watch}
test config-12.12 {GetObjectForOption - justify} testobjconfig {
    .a configure -justify right
    .a cget -justify
} {right}
test config-12.13 {GetObjectForOption - anchor} testobjconfig {
    .a configure -anchor e
    .a cget -anchor
} {e}
test config-12.14 {GetObjectForOption - pixels} testobjconfig {
    .a configure -pixel 193.2
    .a cget -pixel
} {193}
test config-12.15 {GetObjectForOption - window} testobjconfig {
    .a configure -window .a
    .a cget -window
} {.a}
test config-12.16 {GetObjectForOption -custom} testobjconfig {
    .a configure -custom foobar
    .a cget -custom
} {FOOBAR}
test config-12.17 {GetObjectForOption - null values} testobjconfig {
    .a configure -string {} -color {} -font {} -bitmap {} -border {} \
	    -cursor {} -window {} -custom {}
    list [.a cget -string] [.a cget -color] [.a cget -font] \
	    [.a cget -bitmap] [.a cget -border] [.a cget -cursor] \
	    [.a cget -window] [.a cget -custom]
} {{} {} {} {} {} {} {} {}}

test config-13.1 {proper cleanup of options with widget destroy} {
    foreach type {
	button canvas entry frame listbox menu menubutton message
	scale scrollbar text radiobutton checkbutton
    } {
	destroy .w
	$type .w -cursor crosshair
	destroy .w
    }
} {}

deleteWindows

test config-14.1 {Tk_CreateOptionTable - use with namespace import} {
    namespace export -clear *
    foreach type {
	button canvas entry frame listbox menu menubutton message
	scale scrollbar spinbox text radiobutton checkbutton
    } {
	namespace eval ::foo [subst {
	    namespace import -force ::$type
	    ::foo::$type .a
	    ::foo::$type .b
	}
	]
	destroy .a .b
    }
} {}

# cleanup
deleteWindows
if {[testConstraint testobjconfig]} {
    killTables
}
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: config.test,v 1.7.6.2 2000/09/26 16:09:14 spolk Exp $
d11 6
a16 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}
d18 1
a18 7
if {[info command testobjconfig] != "testobjconfig"} {
    puts "This application hasn't been compiled with the \"testobjconfig\""
    puts "command, so I can't run this test.  Are you sure you're using"
    puts "tktest instead of wish?"
    ::tcltest::cleanupTests
    return
}
d33 2
a34 2
foreach i [winfo children .] {
    destroy $i
a35 3
killTables
wm geometry . {}
raise .
d37 2
a38 2
test config-1.1 {Tk_CreateOptionTable - reference counts} {
    eval destroy [winfo children .]
d45 1
a45 1
    eval destroy [winfo children .]
d47 3
a49 3
} {{1 15 -boolean} {2 15 -boolean}}
test config-1.2 {Tk_CreateOptionTable - synonym initialization} {
    eval destroy [winfo children .]
d53 2
a54 2
test config-1.3 {Tk_CreateOptionTable - option database initialization} {
    eval destroy [winfo children .]
d61 2
a62 2
test config-1.4 {Tk_CreateOptionTable - option database initialization} {
    eval destroy [winfo children .]
d69 2
a70 2
test config-1.5 {Tk_CreateOptionTable - default initialization} {
    eval destroy [winfo children .]
d74 2
a75 2
test config-1.6 {Tk_CreateOptionTable - chained tables} {
    eval destroy [winfo children .]
d81 2
a82 2
test config-1.7 {Tk_CreateOptionTable - chained tables} {
    eval destroy [winfo children .]
d88 2
a89 2
test config-1.8 {Tk_CreateOptionTable - chained tables} {
    eval destroy [winfo children .]
d96 2
a97 2
test config-2.1 {Tk_DeleteOptionTable - reference counts} {
    eval destroy [winfo children .]
d102 1
a102 1
    eval destroy [winfo children .]
d112 2
a113 2
test config-3.1 {Tk_InitOptions - priority of chained tables} {
    eval destroy [winfo children .]
d118 2
a119 2
test config-3.2 {Tk_InitOptions - initialize from database} {
    eval destroy [winfo children .]
d125 2
a126 2
test config-3.3 {Tk_InitOptions - initialize from database} {
    eval destroy [winfo children .]
d132 2
a133 2
test config-3.4 {Tk_InitOptions - initialize from widget class} {
    eval destroy [winfo children .]
d137 2
a138 2
test config-3.5 {Tk_InitOptions - no initial value} {
    eval destroy [winfo children .]
d142 2
a143 2
test config-3.6 {Tk_InitOptions - bad initial value} {
    eval destroy [winfo children .]
d152 2
a153 2
test config-3.7 {Tk_InitOptions - bad initial value} {
    eval destroy [winfo children .]
d161 1
a161 1
test config-4.1 {DoObjConfig - boolean} {
d165 1
a165 1
test config-4.2 {DoObjConfig - boolean} {
d169 1
a169 1
test config-4.3 {DoObjConfig - invalid boolean} {
d173 1
a173 1
test config-4.4 {DoObjConfig - boolean internal value} {
d178 1
a178 1
test config-4.5 {DoObjConfig - integer} {
d182 1
a182 1
test config-4.6 {DoObjConfig - invalid integer} {
d186 1
a186 1
test config-4.7 {DoObjConfig - integer internal value} {
d191 1
a191 1
test config-4.8 {DoObjConfig - double} {
d195 1
a195 1
test config-4.9 {DoObjConfig - invalid double} {
d199 1
a199 1
test config-4.10 {DoObjConfig - double internal value} {
d204 1
a204 1
test config-4.11 {DoObjConfig - string} {
d208 1
a208 1
test config-4.12 {DoObjConfig - null string} {
d212 1
a212 1
test config-4.13 {DoObjConfig - string internal value} {
d217 1
a217 1
test config-4.14 {DoObjConfig - string table} {
d221 1
a221 1
test config-4.15 {DoObjConfig - invalid string table} {
d225 1
a225 1
test config-4.16 {DoObjConfig - new string table} {
d230 1
a230 1
test config-4.17 {DoObjConfig - stringtable internal value} {
d235 1
a235 1
test config-4.18 {DoObjConfig - color} {
d239 1
a239 1
test config-4.19 {DoObjConfig - invalid color} {
d243 1
a243 1
test config-4.20 {DoObjConfig - color internal value} {
d248 1
a248 1
test config-4.21 {DoObjConfig - null color} {
d252 1
a252 1
test config-4.22 {DoObjConfig - getting rid of old color} {
d257 1
a257 1
test config-4.23 {DoObjConfig - font} {
d261 1
a261 1
test config-4.24 {DoObjConfig - new font} {
d266 1
a266 1
test config-4.25 {DoObjConfig - invalid font} {
d270 1
a270 1
test config-4.26 {DoObjConfig - null font} {
d274 1
a274 1
test config-4.27 {DoObjConfig - font internal value} {
d279 1
a279 1
test config-4.28 {DoObjConfig - bitmap} {
d283 1
a283 1
test config-4.29 {DoObjConfig - new bitmap} {
d288 1
a288 1
test config-4.30 {DoObjConfig - invalid bitmap} {
d292 1
a292 1
test config-4.31 {DoObjConfig - null bitmap} {
d296 1
a296 1
test config-4.32 {DoObjConfig - bitmap internal value} {
d301 1
a301 1
test config-4.33 {DoObjConfig - border} {
d305 1
a305 1
test config-4.34 {DoObjConfig - invalid border} {
d309 1
a309 1
test config-4.35 {DoObjConfig - null border} {
d313 1
a313 1
test config-4.36 {DoObjConfig - border internal value} {
d318 1
a318 1
test config-4.37 {DoObjConfig - getting rid of old border} {
d323 1
a323 1
test config-4.38 {DoObjConfig - relief} {
d327 1
a327 1
test config-4.39 {DoObjConfig - invalid relief} {
d331 1
a331 1
test config-4.40 {DoObjConfig - new relief} {
d336 1
a336 1
test config-4.41 {DoObjConfig - relief internal value} {
d341 1
a341 1
test config-4.42 {DoObjConfig - cursor} {
d345 1
a345 1
test config-4.43 {DoObjConfig - invalid cursor} {
d349 1
a349 1
test config-4.44 {DoObjConfig - null cursor} {
d353 1
a353 1
test config-4.45 {DoObjConfig - new cursor} {
d358 1
a358 1
test config-4.46 {DoObjConfig - cursor internal value} {
d363 1
a363 1
test config-4.47 {DoObjConfig - justify} {
d367 1
a367 1
test config-4.48 {DoObjConfig - invalid justify} {
d371 1
a371 1
test config-4.49 {DoObjConfig - new justify} {
d376 1
a376 1
test config-4.50 {DoObjConfig - justify internal value} {
d381 1
a381 1
test config-4.51 {DoObjConfig - anchor} {
d385 1
a385 1
test config-4.52 {DoObjConfig - invalid anchor} {
d389 1
a389 1
test config-4.53 {DoObjConfig - new anchor} {
d394 1
a394 1
test config-4.54 {DoObjConfig - anchor internal value} {
d399 1
a399 1
test config-4.55 {DoObjConfig - pixel} {
d403 1
a403 1
test config-4.56 {DoObjConfig - invalid pixel} {
d407 1
a407 1
test config-4.57 {DoObjConfig - new pixel} {
d412 1
a412 1
test config-4.58 {DoObjConfig - pixel internal value} {
d417 1
a417 1
test config-4.59 {DoObjConfig - window} {
d423 1
a423 1
test config-4.60 {DoObjConfig - invalid window} {
d428 1
a428 1
test config-4.61 {DoObjConfig - null window} {
d434 1
a434 1
test config-4.62 {DoObjConfig - new window} {
d443 1
a443 1
test config-4.63 {DoObjConfig - window internal value} {
d448 1
a448 1
test config-4.64 {DoObjConfig - releasing old values} {
d455 2
a456 1
	    -font {Courier 18} -bitmap questhead -border green -cursor cross
d458 2
a459 1
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch
d462 1
a462 1
test config-4.65 {DoObjConfig - releasing old values} {
d469 2
a470 1
	    -font {Courier 18} -bitmap questhead -border green -cursor cross
d472 2
a473 1
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch
d476 13
d490 1
a490 1
test config-5.1 {ObjectIsEmpty - object is already string} {
d495 1
a495 1
test config-5.2 {ObjectIsEmpty - object is already string} {
d499 1
a499 1
test config-5.3 {ObjectIsEmpty - must convert back to string} {
d505 6
a510 4
eval destroy [winfo children .]
testobjconfig chain2 .a
testobjconfig alltypes .b
test config-6.1 {GetOptionFromObj - cached answer} {
d513 1
a513 1
test config-6.2 {GetOptionFromObj - exact match} {
d516 1
a516 1
test config-6.3 {GetOptionFromObj - abbreviation} {
d519 1
a519 1
test config-6.4 {GetOptionFromObj - ambiguous abbreviation} {
d522 1
a522 1
test config-6.5 {GetOptionFromObj - duplicate options in different tables} {
d525 1
a525 1
test config-6.6 {GetOptionFromObj - synonym} {
d529 5
a533 3
eval destroy [winfo children .]
testobjconfig alltypes .a
test config-7.1 {Tk_SetOptions - basics} {
d537 1
a537 1
test config-7.2 {Tk_SetOptions - bogus option name} {
d540 1
a540 1
test config-7.3 {Tk_SetOptions - synonym} {
d544 1
a544 1
test config-7.4 {Tk_SetOptions - missing value} {
d547 1
a547 1
test config-7.5 {Tk_SetOptions - saving old values} {
d553 1
a553 1
test config-7.6 {Tk_SetOptions - error in DoObjConfig call} {
d559 1
a559 1
test config-7.7 {Tk_SetOptions - synonym name in error message} {
d565 1
a565 1
test config-7.8 {Tk_SetOptions - returning mask} {
d568 6
d575 2
a576 2
test config-8.1 {Tk_RestoreSavedOptions - restore in proper order} {
    eval destroy [winfo children .]
d582 2
a583 2
test config-8.2 {Tk_RestoreSavedOptions - freeing object memory} {
    eval destroy [winfo children .]
d588 2
a589 2
test config-8.3 {Tk_RestoreSavedOptions - boolean internal form} {
    eval destroy [winfo children .]
d593 2
a594 2
test config-8.4 {Tk_RestoreSavedOptions - integer internal form} {
    eval destroy [winfo children .]
d598 2
a599 2
test config-8.5 {Tk_RestoreSavedOptions - double internal form} {
    eval destroy [winfo children .]
d603 2
a604 2
test config-8.6 {Tk_RestoreSavedOptions - string internal form} {
    eval destroy [winfo children .]
d609 2
a610 2
test config-8.7 {Tk_RestoreSavedOptions - string table internal form} {
    eval destroy [winfo children .]
d615 2
a616 2
test config-8.8 {Tk_RestoreSavedOptions - color internal form} {
    eval destroy [winfo children .]
d620 2
a621 2
test config-8.9 {Tk_RestoreSavedOptions - font internal form} {nonPortable} {
    eval destroy [winfo children .]
d625 2
a626 2
test config-8.10 {Tk_RestoreSavedOptions - bitmap internal form} {
    eval destroy [winfo children .]
d630 2
a631 2
test config-8.11 {Tk_RestoreSavedOptions - border internal form} {
    eval destroy [winfo children .]
d635 2
a636 2
test config-8.12 {Tk_RestoreSavedOptions - relief internal form} {
    eval destroy [winfo children .]
d640 2
a641 2
test config-8.13 {Tk_RestoreSavedOptions - cursor internal form} {
    eval destroy [winfo children .]
d645 2
a646 2
test config-8.14 {Tk_RestoreSavedOptions - justify internal form} {
    eval destroy [winfo children .]
d650 2
a651 2
test config-8.15 {Tk_RestoreSavedOptions - anchor internal form} {
    eval destroy [winfo children .]
d655 2
a656 2
test config-8.16 {Tk_RestoreSavedOptions - window internal form} {
    eval destroy [winfo children .]
d660 5
d670 1
a670 1
test config-9.1 {Tk_FreeConfigOptions/FreeResources - string internal form} {
d676 1
a676 1
test config-9.2 {Tk_FreeConfigOptions/FreeResources - color internal form} {
d682 1
a682 1
test config-9.3 {Tk_FreeConfigOptions/FreeResources - color} {
d688 1
a688 1
test config-9.4 {Tk_FreeConfigOptions/FreeResources - font internal form} {
d694 1
a694 1
test config-9.5 {Tk_FreeConfigOptions/FreeResources - font} {
d700 1
a700 1
test config-9.6 {Tk_FreeConfigOptions/FreeResources - bitmap internal form} {
d706 1
a706 1
test config-9.7 {Tk_FreeConfigOptions/FreeResources - bitmap} {
d712 1
a712 1
test config-9.8 {Tk_FreeConfigOptions/FreeResources - border internal form} {
d718 1
a718 1
test config-9.9 {Tk_FreeConfigOptions/FreeResources - border} {
d724 1
a724 1
test config-9.10 {Tk_FreeConfigOptions/FreeResources - cursor internal form} {
d730 1
a730 1
test config-9.11 {Tk_FreeConfigOptions/FreeResources - cursor} {
d736 1
a736 1
test config-9.12 {Tk_FreeConfigOptions/FreeResources - not special} {
d742 6
d749 1
a749 1
test config-10.1 {Tk_GetOptionInfo - one item} {
d755 1
a755 1
test config-10.2 {Tk_GetOptionInfo - one item, synonym} {
d761 1
a761 1
test config-10.3 {Tk_GetOptionInfo - all items} {
d765 2
a766 2
} {{-boolean boolean Boolean 1 1} {-integer integer Integer 7 13563} {-double double Double 3.14159 3.14159} {-string string String foo foo} {-stringtable StringTable stringTable one one} {-color color Color red red} {-font font Font {Helvetica 12} {Helvetica 18}} {-bitmap bitmap Bitmap gray50 gray50} {-border border Border blue blue} {-relief relief Relief raised raised} {-cursor cursor Cursor xterm xterm} {-justify {} {} left left} {-anchor anchor Anchor {} {}} {-pixel pixel Pixel 1 1} {-synonym -color}}
test config-10.4 {Tk_GetOptionInfo - chaining through tables} {
d772 5
a776 3
eval destroy [winfo children .]
testobjconfig alltypes .a
test config-11.1 {GetConfigList - synonym} {
d779 1
a779 1
test config-11.2 {GetConfigList - null database names} {
d782 1
a782 1
test config-11.3 {GetConfigList - null default and current value} {
d786 5
a790 3
eval destroy [winfo children .]
testobjconfig internal .a
test config-12.1 {GetObjectForOption - boolean} {
d794 1
a794 1
test config-12.2 {GetObjectForOption - integer} {
d798 1
a798 1
test config-12.3 {GetObjectForOption - double} {
d802 1
a802 1
test config-12.4 {GetObjectForOption - string} {
d806 1
a806 1
test config-12.5 {GetObjectForOption - stringTable} {
d810 1
a810 1
test config-12.6 {GetObjectForOption - color} {
d814 1
a814 1
test config-12.7 {GetObjectForOption - font} {
d818 1
a818 1
test config-12.8 {GetObjectForOption - bitmap} {
d822 1
a822 1
test config-12.9 {GetObjectForOption - border} {
d826 1
a826 1
test config-12.10 {GetObjectForOption - relief} {
d830 1
a830 1
test config-12.11 {GetObjectForOption - cursor} {
d834 1
a834 1
test config-12.12 {GetObjectForOption - justify} {
d838 1
a838 1
test config-12.13 {GetObjectForOption - anchor} {
d842 1
a842 1
test config-12.14 {GetObjectForOption - pixels} {
d846 1
a846 1
test config-12.15 {GetObjectForOption - window} {
d850 5
a854 1
test config-12.16 {GetObjectForOption - null values} {
d856 1
a856 1
	    -cursor {} -window {}
d858 2
a859 2
	    [.a cget -string] [.a cget -bitmap] [.a cget -border] \
	    [.a cget -cursor] [.a cget -window]
d869 19
a887 1
	destroy .w	
d892 4
a895 2
eval destroy [winfo children .]
killTables
a897 1

@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tk 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tk 8.4.0
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: config.test,v 1.6 2002/07/14 05:48:46 dgp Exp $
d11 3
a13 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d15 7
a21 1
testConstraint testobjconfig [llength [info commands testobjconfig]]
d36 2
a37 2
if {[testConstraint testobjconfig]} {
    killTables
d39 3
d43 2
a44 2
test config-1.1 {Tk_CreateOptionTable - reference counts} testobjconfig {
    deleteWindows
d51 1
a51 1
    deleteWindows
d53 3
a55 3
} {{1 16 -boolean} {2 16 -boolean}}
test config-1.2 {Tk_CreateOptionTable - synonym initialization} testobjconfig {
    deleteWindows
d59 2
a60 2
test config-1.3 {Tk_CreateOptionTable - option database initialization} testobjconfig {
    deleteWindows
d67 2
a68 2
test config-1.4 {Tk_CreateOptionTable - option database initialization} testobjconfig {
    deleteWindows
d75 2
a76 2
test config-1.5 {Tk_CreateOptionTable - default initialization} testobjconfig {
    deleteWindows
d80 2
a81 2
test config-1.6 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
d87 2
a88 2
test config-1.7 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
d94 2
a95 2
test config-1.8 {Tk_CreateOptionTable - chained tables} testobjconfig {
    deleteWindows
d102 2
a103 2
test config-2.1 {Tk_DeleteOptionTable - reference counts} testobjconfig {
    deleteWindows
d108 1
a108 1
    deleteWindows
d118 2
a119 2
test config-3.1 {Tk_InitOptions - priority of chained tables} testobjconfig {
    deleteWindows
d124 2
a125 2
test config-3.2 {Tk_InitOptions - initialize from database} testobjconfig {
    deleteWindows
d131 2
a132 2
test config-3.3 {Tk_InitOptions - initialize from database} testobjconfig {
    deleteWindows
d138 2
a139 2
test config-3.4 {Tk_InitOptions - initialize from widget class} testobjconfig {
    deleteWindows
d143 2
a144 2
test config-3.5 {Tk_InitOptions - no initial value} testobjconfig {
    deleteWindows
d148 2
a149 2
test config-3.6 {Tk_InitOptions - bad initial value} testobjconfig {
    deleteWindows
d158 2
a159 2
test config-3.7 {Tk_InitOptions - bad initial value} testobjconfig {
    deleteWindows
d167 1
a167 1
test config-4.1 {DoObjConfig - boolean} testobjconfig {
d171 1
a171 1
test config-4.2 {DoObjConfig - boolean} testobjconfig {
d175 1
a175 1
test config-4.3 {DoObjConfig - invalid boolean} testobjconfig {
d179 1
a179 1
test config-4.4 {DoObjConfig - boolean internal value} testobjconfig {
d184 1
a184 1
test config-4.5 {DoObjConfig - integer} testobjconfig {
d188 1
a188 1
test config-4.6 {DoObjConfig - invalid integer} testobjconfig {
d192 1
a192 1
test config-4.7 {DoObjConfig - integer internal value} testobjconfig {
d197 1
a197 1
test config-4.8 {DoObjConfig - double} testobjconfig {
d201 1
a201 1
test config-4.9 {DoObjConfig - invalid double} testobjconfig {
d205 1
a205 1
test config-4.10 {DoObjConfig - double internal value} testobjconfig {
d210 1
a210 1
test config-4.11 {DoObjConfig - string} testobjconfig {
d214 1
a214 1
test config-4.12 {DoObjConfig - null string} testobjconfig {
d218 1
a218 1
test config-4.13 {DoObjConfig - string internal value} testobjconfig {
d223 1
a223 1
test config-4.14 {DoObjConfig - string table} testobjconfig {
d227 1
a227 1
test config-4.15 {DoObjConfig - invalid string table} testobjconfig {
d231 1
a231 1
test config-4.16 {DoObjConfig - new string table} testobjconfig {
d236 1
a236 1
test config-4.17 {DoObjConfig - stringtable internal value} testobjconfig {
d241 1
a241 1
test config-4.18 {DoObjConfig - color} testobjconfig {
d245 1
a245 1
test config-4.19 {DoObjConfig - invalid color} testobjconfig {
d249 1
a249 1
test config-4.20 {DoObjConfig - color internal value} testobjconfig {
d254 1
a254 1
test config-4.21 {DoObjConfig - null color} testobjconfig {
d258 1
a258 1
test config-4.22 {DoObjConfig - getting rid of old color} testobjconfig {
d263 1
a263 1
test config-4.23 {DoObjConfig - font} testobjconfig {
d267 1
a267 1
test config-4.24 {DoObjConfig - new font} testobjconfig {
d272 1
a272 1
test config-4.25 {DoObjConfig - invalid font} testobjconfig {
d276 1
a276 1
test config-4.26 {DoObjConfig - null font} testobjconfig {
d280 1
a280 1
test config-4.27 {DoObjConfig - font internal value} testobjconfig {
d285 1
a285 1
test config-4.28 {DoObjConfig - bitmap} testobjconfig {
d289 1
a289 1
test config-4.29 {DoObjConfig - new bitmap} testobjconfig {
d294 1
a294 1
test config-4.30 {DoObjConfig - invalid bitmap} testobjconfig {
d298 1
a298 1
test config-4.31 {DoObjConfig - null bitmap} testobjconfig {
d302 1
a302 1
test config-4.32 {DoObjConfig - bitmap internal value} testobjconfig {
d307 1
a307 1
test config-4.33 {DoObjConfig - border} testobjconfig {
d311 1
a311 1
test config-4.34 {DoObjConfig - invalid border} testobjconfig {
d315 1
a315 1
test config-4.35 {DoObjConfig - null border} testobjconfig {
d319 1
a319 1
test config-4.36 {DoObjConfig - border internal value} testobjconfig {
d324 1
a324 1
test config-4.37 {DoObjConfig - getting rid of old border} testobjconfig {
d329 1
a329 1
test config-4.38 {DoObjConfig - relief} testobjconfig {
d333 1
a333 1
test config-4.39 {DoObjConfig - invalid relief} testobjconfig {
d337 1
a337 1
test config-4.40 {DoObjConfig - new relief} testobjconfig {
d342 1
a342 1
test config-4.41 {DoObjConfig - relief internal value} testobjconfig {
d347 1
a347 1
test config-4.42 {DoObjConfig - cursor} testobjconfig {
d351 1
a351 1
test config-4.43 {DoObjConfig - invalid cursor} testobjconfig {
d355 1
a355 1
test config-4.44 {DoObjConfig - null cursor} testobjconfig {
d359 1
a359 1
test config-4.45 {DoObjConfig - new cursor} testobjconfig {
d364 1
a364 1
test config-4.46 {DoObjConfig - cursor internal value} testobjconfig {
d369 1
a369 1
test config-4.47 {DoObjConfig - justify} testobjconfig {
d373 1
a373 1
test config-4.48 {DoObjConfig - invalid justify} testobjconfig {
d377 1
a377 1
test config-4.49 {DoObjConfig - new justify} testobjconfig {
d382 1
a382 1
test config-4.50 {DoObjConfig - justify internal value} testobjconfig {
d387 1
a387 1
test config-4.51 {DoObjConfig - anchor} testobjconfig {
d391 1
a391 1
test config-4.52 {DoObjConfig - invalid anchor} testobjconfig {
d395 1
a395 1
test config-4.53 {DoObjConfig - new anchor} testobjconfig {
d400 1
a400 1
test config-4.54 {DoObjConfig - anchor internal value} testobjconfig {
d405 1
a405 1
test config-4.55 {DoObjConfig - pixel} testobjconfig {
d409 1
a409 1
test config-4.56 {DoObjConfig - invalid pixel} testobjconfig {
d413 1
a413 1
test config-4.57 {DoObjConfig - new pixel} testobjconfig {
d418 1
a418 1
test config-4.58 {DoObjConfig - pixel internal value} testobjconfig {
d423 1
a423 1
test config-4.59 {DoObjConfig - window} testobjconfig {
d429 1
a429 1
test config-4.60 {DoObjConfig - invalid window} testobjconfig {
d434 1
a434 1
test config-4.61 {DoObjConfig - null window} testobjconfig {
d440 1
a440 1
test config-4.62 {DoObjConfig - new window} testobjconfig {
d449 1
a449 1
test config-4.63 {DoObjConfig - window internal value} testobjconfig {
d454 1
a454 1
test config-4.64 {DoObjConfig - releasing old values} testobjconfig {
d461 1
a461 2
	    -font {Courier 18} -bitmap questhead -border green -cursor cross \
	    -custom foobar
d463 1
a463 2
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch \
	    -custom barbaz
d466 1
a466 1
test config-4.65 {DoObjConfig - releasing old values} testobjconfig {
d473 1
a473 2
	    -font {Courier 18} -bitmap questhead -border green -cursor cross \
	    -custom foobar
d475 1
a475 2
	    -font {Times 8} -bitmap gray75 -border pink -cursor watch \
	    -custom barbaz
a477 13
test config-4.66 {DoObjConfig - custom} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -custom test} msg] $msg [catch {.foo cget -custom} result] $result [destroy .foo]
} {0 .foo 0 TEST {}}
test config-4.67 {DoObjConfig - null custom} testobjconfig {
    catch {destroy .foo}
    list [catch {testobjconfig alltypes .foo -custom {}} msg] $msg [catch {.foo cget -custom} result] $result [destroy .foo]
} {0 .foo 0 {} {}}
test config-4.68 {DoObjConfig - custom internal value} testobjconfig {
    catch {rename .foo {}}
    testobjconfig internal .foo -custom "this is a test"
    .foo cget -custom
} {THIS IS A TEST}
d479 1
a479 1
test config-5.1 {ObjectIsEmpty - object is already string} testobjconfig {
d484 1
a484 1
test config-5.2 {ObjectIsEmpty - object is already string} testobjconfig {
d488 1
a488 1
test config-5.3 {ObjectIsEmpty - must convert back to string} testobjconfig {
d494 4
a497 6
deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig chain2 .a
    testobjconfig alltypes .b
}
test config-6.1 {GetOptionFromObj - cached answer} testobjconfig {
d500 1
a500 1
test config-6.2 {GetOptionFromObj - exact match} testobjconfig {
d503 1
a503 1
test config-6.3 {GetOptionFromObj - abbreviation} testobjconfig {
d506 1
a506 1
test config-6.4 {GetOptionFromObj - ambiguous abbreviation} testobjconfig {
d509 1
a509 1
test config-6.5 {GetOptionFromObj - duplicate options in different tables} testobjconfig {
d512 1
a512 1
test config-6.6 {GetOptionFromObj - synonym} testobjconfig {
d516 3
a518 5
deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig alltypes .a
}
test config-7.1 {Tk_SetOptions - basics} testobjconfig {
d522 1
a522 1
test config-7.2 {Tk_SetOptions - bogus option name} testobjconfig {
d525 1
a525 1
test config-7.3 {Tk_SetOptions - synonym} testobjconfig {
d529 1
a529 1
test config-7.4 {Tk_SetOptions - missing value} testobjconfig {
d532 1
a532 1
test config-7.5 {Tk_SetOptions - saving old values} testobjconfig {
d538 1
a538 1
test config-7.6 {Tk_SetOptions - error in DoObjConfig call} testobjconfig {
d544 1
a544 1
test config-7.7 {Tk_SetOptions - synonym name in error message} testobjconfig {
d550 1
a550 1
test config-7.8 {Tk_SetOptions - returning mask} testobjconfig {
a552 6
test config-7.9 {Tk_SetOptions - error in DoObjConfig with custom option} testobjconfig {
    list [catch {.a configure -custom bad} msg] $msg $errorInfo
} {1 {expected good value, got "BAD"} {expected good value, got "BAD"
    (processing "-custom" option)
    invoked from within
".a configure -custom bad"}}
d554 2
a555 2
test config-8.1 {Tk_RestoreSavedOptions - restore in proper order} testobjconfig {
    deleteWindows
d561 2
a562 2
test config-8.2 {Tk_RestoreSavedOptions - freeing object memory} testobjconfig {
    deleteWindows
d567 2
a568 2
test config-8.3 {Tk_RestoreSavedOptions - boolean internal form} testobjconfig {
    deleteWindows
d572 2
a573 2
test config-8.4 {Tk_RestoreSavedOptions - integer internal form} testobjconfig {
    deleteWindows
d577 2
a578 2
test config-8.5 {Tk_RestoreSavedOptions - double internal form} testobjconfig {
    deleteWindows
d582 2
a583 2
test config-8.6 {Tk_RestoreSavedOptions - string internal form} testobjconfig {
    deleteWindows
d588 2
a589 2
test config-8.7 {Tk_RestoreSavedOptions - string table internal form} testobjconfig {
    deleteWindows
d594 2
a595 2
test config-8.8 {Tk_RestoreSavedOptions - color internal form} testobjconfig {
    deleteWindows
d599 2
a600 2
test config-8.9 {Tk_RestoreSavedOptions - font internal form} {testobjconfig nonPortable} {
    deleteWindows
d604 2
a605 2
test config-8.10 {Tk_RestoreSavedOptions - bitmap internal form} testobjconfig {
    deleteWindows
d609 2
a610 2
test config-8.11 {Tk_RestoreSavedOptions - border internal form} testobjconfig {
    deleteWindows
d614 2
a615 2
test config-8.12 {Tk_RestoreSavedOptions - relief internal form} testobjconfig {
    deleteWindows
d619 2
a620 2
test config-8.13 {Tk_RestoreSavedOptions - cursor internal form} testobjconfig {
    deleteWindows
d624 2
a625 2
test config-8.14 {Tk_RestoreSavedOptions - justify internal form} testobjconfig {
    deleteWindows
d629 2
a630 2
test config-8.15 {Tk_RestoreSavedOptions - anchor internal form} testobjconfig {
    deleteWindows
d634 2
a635 2
test config-8.16 {Tk_RestoreSavedOptions - window internal form} testobjconfig {
    deleteWindows
a638 5
test config-8.17 {Tk_RestoreSavedOptions - custom internal form} testobjconfig {
    deleteWindows
    testobjconfig internal .a -custom "foobar"
    list [catch {.a csave -custom "barbaz" -color bogus}] [.a cget -custom]
} {1 FOOBAR}
d644 1
a644 1
test config-9.1 {Tk_FreeConfigOptions/FreeResources - string internal form} testobjconfig {
d650 1
a650 1
test config-9.2 {Tk_FreeConfigOptions/FreeResources - color internal form} testobjconfig {
d656 1
a656 1
test config-9.3 {Tk_FreeConfigOptions/FreeResources - color} testobjconfig {
d662 1
a662 1
test config-9.4 {Tk_FreeConfigOptions/FreeResources - font internal form} testobjconfig {
d668 1
a668 1
test config-9.5 {Tk_FreeConfigOptions/FreeResources - font} testobjconfig {
d674 1
a674 1
test config-9.6 {Tk_FreeConfigOptions/FreeResources - bitmap internal form} testobjconfig {
d680 1
a680 1
test config-9.7 {Tk_FreeConfigOptions/FreeResources - bitmap} testobjconfig {
d686 1
a686 1
test config-9.8 {Tk_FreeConfigOptions/FreeResources - border internal form} testobjconfig {
d692 1
a692 1
test config-9.9 {Tk_FreeConfigOptions/FreeResources - border} testobjconfig {
d698 1
a698 1
test config-9.10 {Tk_FreeConfigOptions/FreeResources - cursor internal form} testobjconfig {
d704 1
a704 1
test config-9.11 {Tk_FreeConfigOptions/FreeResources - cursor} testobjconfig {
d710 1
a710 1
test config-9.12 {Tk_FreeConfigOptions/FreeResources - not special} testobjconfig {
a715 6
test config-9.13 {Tk_FreeConfigOptions/FreeResources - custom internal form} testobjconfig {
    catch {destroy .fpp}
    testobjconfig internal .foo
    .foo configure -custom "foobar"
    destroy .foo
} {}
d717 1
a717 1
test config-10.1 {Tk_GetOptionInfo - one item} testobjconfig {
d723 1
a723 1
test config-10.2 {Tk_GetOptionInfo - one item, synonym} testobjconfig {
d729 1
a729 1
test config-10.3 {Tk_GetOptionInfo - all items} testobjconfig {
d733 2
a734 2
} {{-boolean boolean Boolean 1 1} {-integer integer Integer 7 13563} {-double double Double 3.14159 3.14159} {-string string String foo foo} {-stringtable StringTable stringTable one one} {-color color Color red red} {-font font Font {Helvetica 12} {Helvetica 18}} {-bitmap bitmap Bitmap gray50 gray50} {-border border Border blue blue} {-relief relief Relief raised raised} {-cursor cursor Cursor xterm xterm} {-justify {} {} left left} {-anchor anchor Anchor {} {}} {-pixel pixel Pixel 1 1} {-custom {} {} {} {}} {-synonym -color}}
test config-10.4 {Tk_GetOptionInfo - chaining through tables} testobjconfig {
d740 3
a742 5
deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig alltypes .a
}
test config-11.1 {GetConfigList - synonym} testobjconfig {
d745 1
a745 1
test config-11.2 {GetConfigList - null database names} testobjconfig {
d748 1
a748 1
test config-11.3 {GetConfigList - null default and current value} testobjconfig {
d752 3
a754 5
deleteWindows
if {[testConstraint testobjconfig]} {
    testobjconfig internal .a
}
test config-12.1 {GetObjectForOption - boolean} testobjconfig {
d758 1
a758 1
test config-12.2 {GetObjectForOption - integer} testobjconfig {
d762 1
a762 1
test config-12.3 {GetObjectForOption - double} testobjconfig {
d766 1
a766 1
test config-12.4 {GetObjectForOption - string} testobjconfig {
d770 1
a770 1
test config-12.5 {GetObjectForOption - stringTable} testobjconfig {
d774 1
a774 1
test config-12.6 {GetObjectForOption - color} testobjconfig {
d778 1
a778 1
test config-12.7 {GetObjectForOption - font} testobjconfig {
d782 1
a782 1
test config-12.8 {GetObjectForOption - bitmap} testobjconfig {
d786 1
a786 1
test config-12.9 {GetObjectForOption - border} testobjconfig {
d790 1
a790 1
test config-12.10 {GetObjectForOption - relief} testobjconfig {
d794 1
a794 1
test config-12.11 {GetObjectForOption - cursor} testobjconfig {
d798 1
a798 1
test config-12.12 {GetObjectForOption - justify} testobjconfig {
d802 1
a802 1
test config-12.13 {GetObjectForOption - anchor} testobjconfig {
d806 1
a806 1
test config-12.14 {GetObjectForOption - pixels} testobjconfig {
d810 1
a810 1
test config-12.15 {GetObjectForOption - window} testobjconfig {
d814 1
a814 5
test config-12.16 {GetObjectForOption -custom} testobjconfig {
    .a configure -custom foobar
    .a cget -custom
} {FOOBAR}
test config-12.17 {GetObjectForOption - null values} testobjconfig {
d816 1
a816 1
	    -cursor {} -window {} -custom {}
d818 2
a819 2
	    [.a cget -bitmap] [.a cget -border] [.a cget -cursor] \
	    [.a cget -window] [.a cget -custom]
d829 1
a829 19
	destroy .w
    }
} {}

deleteWindows

test config-14.1 {Tk_CreateOptionTable - use with namespace import} {
    namespace export -clear *
    foreach type {
	button canvas entry frame listbox menu menubutton message
	scale scrollbar spinbox text radiobutton checkbutton
    } {
	namespace eval ::foo [subst {
	    namespace import -force ::$type
	    ::foo::$type .a
	    ::foo::$type .b
	}
	]
	destroy .a .b
d834 2
a835 4
deleteWindows
if {[testConstraint testobjconfig]} {
    killTables
}
d838 1
@

