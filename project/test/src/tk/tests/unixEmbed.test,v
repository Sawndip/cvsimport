head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.16;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.29;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.36;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.39.10;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# This file is a Tcl script to test out the procedures in the file 
# tkUnixEmbed.c.  It is organized in the standard fashion for Tcl
# tests.
#
# Copyright (c) 1996-1997 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: unixEmbed.test,v 1.11 2002/07/13 21:52:34 dgp Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

setupbg
dobg {wm withdraw .}

# eatColors --
# Creates a toplevel window and allocates enough colors in it to
# use up all the slots in the colormap.
#
# Arguments:
# w -		Name of toplevel window to create.

proc eatColors {w} {
    catch {destroy $w}
    toplevel $w
    wm geom $w +0+0
    canvas $w.c -width 400 -height 200 -bd 0
    pack $w.c
    for {set y 0} {$y < 8} {incr y} {
	for {set x 0} {$x < 40} {incr x} {
	    set color [format #%02x%02x%02x [expr $x*6] [expr $y*30] 0]
	    $w.c create rectangle [expr 10*$x] [expr 20*$y] \
		    [expr 10*$x + 10] [expr 20*$y + 20] -outline {} \
		    -fill $color
	}
    }
    update
}

# colorsFree --
#
# Returns 1 if there appear to be free colormap entries in a window,
# 0 otherwise.
#
# Arguments:
# w -			Name of window in which to check.
# red, green, blue -	Intensities to use in a trial color allocation
#			to see if there are colormap entries free.

proc colorsFree {w {red 31} {green 245} {blue 192}} {
    set vals [winfo rgb $w [format #%02x%02x%02x $red $green $blue]]
    expr ([lindex $vals 0]/256 == $red) && ([lindex $vals 1]/256 == $green) \
	    && ([lindex $vals 2]/256 == $blue)
}

test unixEmbed-1.1 {TkpUseWindow procedure, bad window identifier} unix {
    catch {destroy .t}
    list [catch {toplevel .t -use xyz} msg] $msg
} {1 {expected integer but got "xyz"}}
test unixEmbed-1.2 {TkpUseWindow procedure, bad window identifier} unix {
    catch {destroy .t}
    list [catch {toplevel .t -use 47} msg] $msg
} {1 {couldn't create child of window "47"}}
test unixEmbed-1.3 {TkpUseWindow procedure, inheriting colormap} {unix nonPortable} {
    catch {destroy .t}
    catch {destroy .x}
    toplevel .t -colormap new
    wm geometry .t +0+0
    eatColors .t.t
    frame .t.f -container 1
    toplevel .x -use [winfo id .t.f]
    set result [colorsFree .x]
    destroy .t
    set result
} {0}
test unixEmbed-1.4 {TkpUseWindow procedure, inheriting colormap} {unix nonPortable} {
    catch {destroy .t}
    catch {destroy .t2}
    catch {destroy .x}
    toplevel .t -container 1 -colormap new
    wm geometry .t +0+0
    eatColors .t2
    toplevel .x -use [winfo id .t]
    set result [colorsFree .x]
    destroy .t
    set result
} {1}

test unixEmbed-1.5 {TkpUseWindow procedure, creating Container records} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -container 1 -width 200 -height 50
    pack .f1 .f2
    dobg "set w [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t -use $w
	list [testembed] [expr [lindex [lindex [testembed all] 0] 0] - $w]
    }
} {{{XXX {} {} .t}} 0}
test unixEmbed-1.6 {TkpUseWindow procedure, creating Container records} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -container 1 -width 200 -height 50
    pack .f1 .f2
    dobg "set w1 [winfo id .f1]"
    dobg "set w2 [winfo id .f2]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	toplevel .t2 -use $w2
	testembed
    }
} {{XXX {} {} .t2} {XXX {} {} .t1}}
test unixEmbed-1.7 {TkpUseWindow procedure, container and embedded in same app} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -container 1 -width 200 -height 50
    pack .f1 .f2
    toplevel .t1 -use [winfo id .f1]
    toplevel .t2 -use [winfo id .f2]
    testembed
} {{XXX .f2 {} .t2} {XXX .f1 {} .t1}}

# Can't think of any way to test the procedures TkpMakeWindow,
# TkpMakeContainer, or EmbedErrorProc.

test unixEmbed-2.1 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	testembed
    }
    destroy .f1
    update
    dobg {
	testembed
    }
} {}
test unixEmbed-2.2 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	testembed
	destroy .t1
	testembed
    }
} {}
test unixEmbed-2.3 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    toplevel .t1 -use [winfo id .f1]
    update
    destroy .f1
    testembed
} {}
test unixEmbed-2.4 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    toplevel .t1 -use [winfo id .f1]
    update
    destroy .t1
    set x [testembed]
    update
    list $x [testembed]
} {{{XXX .f1 {} {}}} {}}

test unixEmbed-3.1 {ContainerEventProc procedure, detect creation} \
	{unix testembed nonPortable} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    set x [testembed]
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	wm withdraw .t1
    }
    list $x [testembed]
} {{{XXX .f1 {} {}}} {{XXX .f1 XXX {}}}}
test unixEmbed-3.2 {ContainerEventProc procedure, set size on creation} unix {
    deleteWindows
    toplevel .t1 -container 1
    wm geometry .t1 +0+0
    toplevel .t2 -use [winfo id .t1] -bg red
    update
    wm geometry .t2
} {200x200+0+0}
test unixEmbed-3.2 {ContainerEventProc procedure, disallow position changes} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1 -bd 2 -relief raised
	update
	wm geometry .t1 +30+40
    }
    update
    dobg {
	wm geometry .t1
    }
} {200x200+0+0}
test unixEmbed-3.3 {ContainerEventProc procedure, disallow position changes} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	update
	wm geometry .t1 300x100+30+40
    }
    update
    dobg {
	wm geometry .t1
    }
} {300x100+0+0}
test unixEmbed-3.4 {ContainerEventProc procedure, geometry requests} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    dobg {
	.t1 configure -width 300 -height 80
    }
    update
    list [winfo width .f1] [winfo height .f1] [dobg {wm geometry .t1}]
} {300 80 300x80+0+0}
test unixEmbed-3.5 {ContainerEventProc procedure, map requests} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	set x unmapped
	bind .t1 <Map> {set x mapped}
    }
    update
    dobg {
	after 100
	update
	set x
    }
} {mapped}
test unixEmbed-3.6 {ContainerEventProc procedure, destroy events} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    bind .f1 <Destroy> {set x dead}
    set x alive
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    dobg {
	destroy .t1
    }
    update
    list $x [winfo exists .f1]
} {dead 0}

test unixEmbed-4.1 {EmbedStructureProc procedure, configure events} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    dobg {
	.t1 configure -width 180 -height 100
    }
    update
    dobg {
	winfo geometry .t1
    }
} {180x100+0+0}
test unixEmbed-4.2 {EmbedStructureProc procedure, destroy events} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    set x [testembed]
    destroy .f1
    list $x [testembed]
} {{{XXX .f1 XXX {}}} {}}

test unixEmbed-5.1 {EmbedFocusProc procedure, FocusIn events} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	bind .t1 <FocusIn> {lappend x "focus in %W"}
	bind .t1 <FocusOut> {lappend x "focus out %W"}
	set x {}
    }
    focus -force .f1
    update
    dobg {set x}
} {{focus in .t1}}
test unixEmbed-5.2 {EmbedFocusProc procedure, focusing on dead window} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    dobg {
	after 200 {destroy .t1}
    }
    after 400
    focus -force .f1
    update
} {}
test unixEmbed-5.3 {EmbedFocusProc procedure, FocusOut events} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
	bind .t1 <FocusIn> {lappend x "focus in %W"}
	bind .t1 <FocusOut> {lappend x "focus out %W"}
	set x {}
    }
    focus -force .f1
    update
    set x [dobg {update; set x}]
    focus .
    update
    list $x [dobg {update; set x}]
} {{{focus in .t1}} {{focus in .t1} {focus out .t1}}}

test unixEmbed-6.1 {EmbedGeometryRequest procedure, window changes size} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    dobg {
	bind .t1 <Configure> {lappend x {configure .t1 %w %h}}
	set x {}
	.t1 configure -width 300 -height 120
	update
	list $x [winfo geom .t1]
    }
} {{{configure .t1 300 120}} 300x120+0+0}
test unixEmbed-6.2 {EmbedGeometryRequest procedure, window changes size} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    place .f1 -width 200 -height 200
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    after 300 {set x done}
    vwait x
    dobg {
	bind .t1 <Configure> {lappend x {configure .t1 %w %h}}
	set x {}
	.t1 configure -width 300 -height 120
	update
	list $x [winfo geom .t1]
    }
} {{{configure .t1 200 200}} 200x200+0+0}

# Can't think up any tests for TkpGetOtherWindow procedure.

test unixEmbed-7.1 {TkpRedirectKeyEvent procedure, forward keystroke} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    focus -force .
    bind . <KeyPress> {lappend x {key %A %E}}
    set x {}
    set y [dobg {
	update
	bind .t1 <KeyPress> {lappend y {key %A}}
	set y {}
	event generate .t1 <KeyPress> -keysym a
	set y
    }]
    update
    bind . <KeyPress> {}
    list $x $y
} {{{key a 1}} {}}
test unixEmbed-7.2 {TkpRedirectKeyEvent procedure, don't forward keystroke width} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1
    }
    update
    focus -force .f1
    update
    bind . <KeyPress> {lappend x {key %A}}
    set x {}
    set y [dobg {
	update
	bind .t1 <KeyPress> {lappend y {key %A}}
	set y {}
	event generate .t1 <KeyPress> -keysym b
	set y
    }]
    update
    bind . <KeyPress> {}
    list $x $y
} {{} {{key b}}}

test unixEmbed-8.1 {TkpClaimFocus procedure} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -width 200 -height 50
    pack .f1 .f2
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1 -highlightthickness 2 -bd 2 -relief sunken
    }
    focus -force .f2
    update
    list [dobg {
	focus .t1
	set x [list [focus]]
	update
	after 500
	update
	lappend x [focus]
    }] [focus]
} {{{} .t1} .f1}
test unixEmbed-8.2 {TkpClaimFocus procedure} unix {
    catch {interp delete child}
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -width 200 -height 50
    pack .f1 .f2
    interp create child
    child eval "set argv {-use [winfo id .f1]}"
    load {} Tk child
    child eval {
	. configure -bd 2 -highlightthickness 2 -relief sunken
    }
    focus -force .f2
    update
    list [child eval {
	focus .
	set x [list [focus]]
	update
	lappend x [focus]
    }] [focus]
} {{{} .} .f1}
catch {interp delete child}

test unixEmbed-9.1 {EmbedWindowDeleted procedure, check parentPtr} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    frame .f2 -container 1 -width 200 -height 50
    frame .f3 -container 1 -width 200 -height 50
    frame .f4 -container 1 -width 200 -height 50
    pack .f1 .f2 .f3 .f4
    set x {}
    lappend x [testembed]
    foreach w {.f3 .f4 .f1 .f2} {
	destroy $w
	lappend x [testembed]
    }
    set x
} {{{XXX .f4 {} {}} {XXX .f3 {} {}} {XXX .f2 {} {}} {XXX .f1 {} {}}} {{XXX .f4 {} {}} {XXX .f2 {} {}} {XXX .f1 {} {}}} {{XXX .f2 {} {}} {XXX .f1 {} {}}} {{XXX .f2 {} {}}} {}}
test unixEmbed-9.2 {EmbedWindowDeleted procedure, check embeddedPtr} {unix testembed} {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    dobg "set w1 [winfo id .f1]"
    dobg {
	eval destroy [winfo child .]
	toplevel .t1 -use $w1 -highlightthickness 2 -bd 2 -relief sunken
	set x {}
	lappend x [testembed]
	destroy .t1
	lappend x [testembed]
    }
} {{{XXX {} {} .t1}} {}}

test unixEmbed-10.1 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    toplevel .t1 -use [winfo id .f1] -width 150 -height 80
    update
    wm geometry .t1 +40+50
    update
    wm geometry .t1
} {150x80+0+0}
test unixEmbed-10.2 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} unix {
    deleteWindows
    frame .f1 -container 1 -width 200 -height 50
    pack .f1
    toplevel .t1 -use [winfo id .f1] -width 150 -height 80
    update
    wm geometry .t1 70x300+10+20
    update
    wm geometry .t1
} {70x300+0+0}

# cleanup
deleteWindows
cleanupbg
::tcltest::cleanupTests
return













@


1.4
log
@touched all sources to ease next import
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: unixEmbed.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d11 6
a16 13
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {$tcl_platform(platform) != "unix"} {
    puts "skipping: Unix only tests..."
    ::tcltest::cleanupTests
    return
}

eval destroy [winfo children .]
wm geometry . {}
raise .
d61 1
a61 1
test unixEmbed-1.1 {TkpUseWindow procedure, bad window identifier} {
d65 1
a65 1
test unixEmbed-1.2 {TkpUseWindow procedure, bad window identifier} {
d69 1
a69 1
test unixEmbed-1.3 {TkpUseWindow procedure, inheriting colormap} {nonPortable} {
d81 1
a81 1
test unixEmbed-1.4 {TkpUseWindow procedure, inheriting colormap} {nonPortable} {
d94 2
a95 10
if {[string compare testembed [info commands testembed]] != 0} {
    puts "This application hasn't been compiled with the testembed command,"
    puts "therefore I am skipping all of these tests."
    cleanupbg
    ::tcltest::cleanupTests
    return
}

test unixEmbed-1.5 {TkpUseWindow procedure, creating Container records} {
    eval destroy [winfo child .]
d106 2
a107 2
test unixEmbed-1.6 {TkpUseWindow procedure, creating Container records} {
    eval destroy [winfo child .]
d120 2
a121 2
test unixEmbed-1.7 {TkpUseWindow procedure, container and embedded in same app} {
    eval destroy [winfo child .]
d133 2
a134 4
test unixEmbed-2.1 {EmbeddedEventProc procedure} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d149 2
a150 4
test unixEmbed-2.2 {EmbeddedEventProc procedure} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d162 2
a163 4
test unixEmbed-2.3 {EmbeddedEventProc procedure} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d171 2
a172 4
test unixEmbed-2.4 {EmbeddedEventProc procedure} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d184 2
a185 4
	{nonPortable} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d197 2
a198 4
test unixEmbed-3.2 {ContainerEventProc procedure, set size on creation} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d205 2
a206 4
test unixEmbed-3.2 {ContainerEventProc procedure, disallow position changes} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d221 2
a222 4
test unixEmbed-3.3 {ContainerEventProc procedure, disallow position changes} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d237 2
a238 4
test unixEmbed-3.4 {ContainerEventProc procedure, geometry requests} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d253 2
a254 4
test unixEmbed-3.5 {ContainerEventProc procedure, map requests} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d271 2
a272 4
test unixEmbed-3.6 {ContainerEventProc procedure, destroy events} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d290 2
a291 4
test unixEmbed-4.1 {EmbedStructureProc procedure, configure events} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d308 2
a309 4
test unixEmbed-4.2 {EmbedStructureProc procedure, destroy events} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d323 2
a324 4
test unixEmbed-5.1 {EmbedFocusProc procedure, FocusIn events} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d339 2
a340 4
test unixEmbed-5.2 {EmbedFocusProc procedure, focusing on dead window} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d356 2
a357 4
test unixEmbed-5.3 {EmbedFocusProc procedure, FocusOut events} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d376 2
a377 4
test unixEmbed-6.1 {EmbedGeometryRequest procedure, window changes size} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d394 2
a395 4
test unixEmbed-6.2 {EmbedGeometryRequest procedure, window changes size} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d416 2
a417 4
test unixEmbed-7.1 {TkpRedirectKeyEvent procedure, forward keystroke} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d439 2
a440 4
test unixEmbed-7.2 {TkpRedirectKeyEvent procedure, don't forward keystroke width} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d465 2
a466 4
test unixEmbed-8.1 {TkpClaimFocus procedure} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d486 1
a486 1
test unixEmbed-8.2 {TkpClaimFocus procedure} {
d488 1
a488 3
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d494 1
a494 1
    load {} tk child
d509 2
a510 4
test unixEmbed-9.1 {EmbedWindowDeleted procedure, check parentPtr} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d524 2
a525 4
test unixEmbed-9.2 {EmbedWindowDeleted procedure, check embeddedPtr} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d539 2
a540 4
test unixEmbed-10.1 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d549 2
a550 4
test unixEmbed-10.2 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} {
    foreach w [winfo child .] {
	catch {destroy $w}
    }
d561 1
a561 3
foreach w [winfo child .] {
    catch {destroy $w}
}
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d6 2
d9 5
a13 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: unixEmbed.test,v 1.3 1998/09/14 18:23:52 stanton Exp $
d16 2
a20 4
if {[info procs test] != "test"} {
    source defs
}

d76 1
a76 1
test unixEmbed-1.3 {TkpUseWindow procedure, inheriting colormap} {
d88 1
a88 1
test unixEmbed-1.4 {TkpUseWindow procedure, inheriting colormap} {
d104 2
d206 2
a207 1
test unixEmbed-3.1 {ContainerEventProc procedure, detect creation} {
d627 1
a627 1

d632 15
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@a5 2
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
d7 4
a10 1
# RCS: @@(#) $Id: unixEmbed.test,v 1.7.6.1 2000/05/04 21:26:30 spolk Exp $
d12 2
a13 2
if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
d16 2
a17 4
if {$tcl_platform(platform) != "unix"} {
    puts "skipping: Unix only tests..."
    ::tcltest::cleanupTests
    return
d75 1
a75 1
test unixEmbed-1.3 {TkpUseWindow procedure, inheriting colormap} {nonPortable} {
d87 1
a87 1
test unixEmbed-1.4 {TkpUseWindow procedure, inheriting colormap} {nonPortable} {
a102 2
    cleanupbg
    ::tcltest::cleanupTests
d203 1
a203 2
test unixEmbed-3.1 {ContainerEventProc procedure, detect creation} \
	{nonPortable} {
d623 1
a623 1
# cleanup
a627 15
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tk 8.4.0
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: unixEmbed.test,v 1.11 2002/07/13 21:52:34 dgp Exp $
d11 13
a23 6
package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands
d68 1
a68 1
test unixEmbed-1.1 {TkpUseWindow procedure, bad window identifier} unix {
d72 1
a72 1
test unixEmbed-1.2 {TkpUseWindow procedure, bad window identifier} unix {
d76 1
a76 1
test unixEmbed-1.3 {TkpUseWindow procedure, inheriting colormap} {unix nonPortable} {
d88 1
a88 1
test unixEmbed-1.4 {TkpUseWindow procedure, inheriting colormap} {unix nonPortable} {
d101 10
a110 2
test unixEmbed-1.5 {TkpUseWindow procedure, creating Container records} {unix testembed} {
    deleteWindows
d121 2
a122 2
test unixEmbed-1.6 {TkpUseWindow procedure, creating Container records} {unix testembed} {
    deleteWindows
d135 2
a136 2
test unixEmbed-1.7 {TkpUseWindow procedure, container and embedded in same app} {unix testembed} {
    deleteWindows
d148 4
a151 2
test unixEmbed-2.1 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
d166 4
a169 2
test unixEmbed-2.2 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
d181 4
a184 2
test unixEmbed-2.3 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
d192 4
a195 2
test unixEmbed-2.4 {EmbeddedEventProc procedure} {unix testembed} {
    deleteWindows
d207 4
a210 2
	{unix testembed nonPortable} {
    deleteWindows
d222 4
a225 2
test unixEmbed-3.2 {ContainerEventProc procedure, set size on creation} unix {
    deleteWindows
d232 4
a235 2
test unixEmbed-3.2 {ContainerEventProc procedure, disallow position changes} unix {
    deleteWindows
d250 4
a253 2
test unixEmbed-3.3 {ContainerEventProc procedure, disallow position changes} unix {
    deleteWindows
d268 4
a271 2
test unixEmbed-3.4 {ContainerEventProc procedure, geometry requests} unix {
    deleteWindows
d286 4
a289 2
test unixEmbed-3.5 {ContainerEventProc procedure, map requests} unix {
    deleteWindows
d306 4
a309 2
test unixEmbed-3.6 {ContainerEventProc procedure, destroy events} unix {
    deleteWindows
d327 4
a330 2
test unixEmbed-4.1 {EmbedStructureProc procedure, configure events} unix {
    deleteWindows
d347 4
a350 2
test unixEmbed-4.2 {EmbedStructureProc procedure, destroy events} {unix testembed} {
    deleteWindows
d364 4
a367 2
test unixEmbed-5.1 {EmbedFocusProc procedure, FocusIn events} unix {
    deleteWindows
d382 4
a385 2
test unixEmbed-5.2 {EmbedFocusProc procedure, focusing on dead window} unix {
    deleteWindows
d401 4
a404 2
test unixEmbed-5.3 {EmbedFocusProc procedure, FocusOut events} unix {
    deleteWindows
d423 4
a426 2
test unixEmbed-6.1 {EmbedGeometryRequest procedure, window changes size} unix {
    deleteWindows
d443 4
a446 2
test unixEmbed-6.2 {EmbedGeometryRequest procedure, window changes size} unix {
    deleteWindows
d467 4
a470 2
test unixEmbed-7.1 {TkpRedirectKeyEvent procedure, forward keystroke} unix {
    deleteWindows
d492 4
a495 2
test unixEmbed-7.2 {TkpRedirectKeyEvent procedure, don't forward keystroke width} unix {
    deleteWindows
d520 4
a523 2
test unixEmbed-8.1 {TkpClaimFocus procedure} unix {
    deleteWindows
d543 1
a543 1
test unixEmbed-8.2 {TkpClaimFocus procedure} unix {
d545 3
a547 1
    deleteWindows
d553 1
a553 1
    load {} Tk child
d568 4
a571 2
test unixEmbed-9.1 {EmbedWindowDeleted procedure, check parentPtr} {unix testembed} {
    deleteWindows
d585 4
a588 2
test unixEmbed-9.2 {EmbedWindowDeleted procedure, check embeddedPtr} {unix testembed} {
    deleteWindows
d602 4
a605 2
test unixEmbed-10.1 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} unix {
    deleteWindows
d614 4
a617 2
test unixEmbed-10.2 {geometry propagation in tkUnixWm.c/UpdateGeometryInfo} unix {
    deleteWindows
d628 3
a630 1
deleteWindows
@


