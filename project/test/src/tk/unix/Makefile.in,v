head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	insight_7_6-2013-04-10-branchpoint:1.8
	gdb_7_6-branch:1.8.0.28
	sid-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	gdb_7_5-branch:1.8.0.26
	sid-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	gdb_7_4-branch:1.8.0.24
	sid-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	gdb_7_3-branch:1.8.0.22
	sid-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	gdb_7_1-branch:1.8.0.20
	gdb_7_0-branch:1.8.0.18
	sid-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.8
	arc-sim-20090309:1.8
	sid-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	sid-snapshot-20090701:1.8
	sid-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	kevinb-pre-tk8_5_7_merge:1.8
	sid-snapshot-20090401:1.8
	arc-insight_6_8-branch:1.8.0.16
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.14
	insight_6_8-branchpoint:1.8
	sid-snapshot-20090301:1.8
	sid-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	sid-snapshot-20081201:1.8
	sid-snapshot-20081101:1.8
	sid-snapshot-20081001:1.8
	sid-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	sid-snapshot-20080701:1.8
	sid-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	gdb_6_8-branch:1.8.0.12
	sid-snapshot-20080301:1.8
	sid-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	sid-snapshot-20071001:1.8
	insight_6_6-20070208-release:1.8
	gdb_6_6-branch:1.8.0.10
	gdb_6_6-2006-11-15-branchpoint:1.8
	insight_6_5-20061003-release:1.8
	gdb_6_5-branch:1.8.0.8
	gdb_6_5-2006-05-14-branchpoint:1.8
	gdb_6_4-branch:1.8.0.6
	gdb_6_4-2005-11-01-branchpoint:1.8
	gdb_6_1-2004-04-05-release:1.8
	gdb_6_1-branch:1.8.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	gdb_6_0-2003-10-04-release:1.8
	gdb_6_0-branch:1.8.0.2
	gdb_6_0-2003-06-23-branchpoint:1.8
	TK8_4_1:1.1.1.4
	gdb_5_3-2002-12-12-release:1.5
	tcltk840-20020924-branch:1.6.0.2
	tcltk840-20020924-branchpoint:1.6
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.5
	sid-20020905-branch:1.5.0.6
	gdb_5_3-branch:1.5.0.4
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.2
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2003.01.21.20.24.51;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.21.19.53.17;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.24.18.39.30;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.10.20.21.26;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.19.00.44.46;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.18.21.16.09;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.38.02;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.01.21.19.53.39;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Updated to tk 8.4.1
@
text
@#
# This file is a Makefile for Tk.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@@foo@@" will get replaced in the
# actual Makefile.
#
# RCS: @@(#) $Id: Makefile.in,v 1.85 2002/10/10 05:01:23 hobbs Exp $

# Current Tk version;  used in various names.

TCLVERSION		= @@TCL_VERSION@@
VERSION			= @@TK_VERSION@@
MAJOR_VERSION		= @@TK_MAJOR_VERSION@@
MINOR_VERSION		= @@TK_MINOR_VERSION@@
PATCH_LEVEL		= @@TK_PATCH_LEVEL@@
LOCALES			= @@LOCALES@@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT		=

# Directory from which applications will reference the library of Tcl
# scripts (note: you can set the TK_LIBRARY environment variable at
# run-time to override the compiled-in location):

# REDHAT LOCAL
#TK_LIBRARY		= $(prefix)/lib/tk$(VERSION)
TK_LIBRARY =		@@datadir@@/tk$(VERSION)
# END REDHAT LOCAL

# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR		= $(libdir)

# Directory in which to install the program wish:
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)

# Directory in which to install the .a or .so binary for the Tk library:
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)

# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TK_LIBRARY)

# Directory in which to install the include file tk.h:
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)

# Top-level directory for manual entries:
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)

# Directory in which to install manual entry for wish:
MAN1_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for Tk's C library
# procedures:
MAN3_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Tcl commands implemented by Tk:
MANN_INSTALL_DIR	= $(MAN_INSTALL_DIR)/mann

# The directory containing the Tcl sources and headers appropriate
# for this version of Tk ("srcdir" will be replaced or has already
# been replaced by the configure script):
TCL_GENERIC_DIR		= @@TCL_SRC_DIR@@/generic

# The directory containing the Tcl library archive file appropriate
# for this version of Tk:
TCL_BIN_DIR		= @@TCL_BIN_DIR@@

# The linker flags needed to link in the Tcl library (ex: -ltcl8.2)
TCL_LIB_FLAG		= @@TCL_LIB_FLAG@@

# Libraries built with optimization switches have this additional extension
TK_DBGX			= @@TK_DBGX@@

# Flag, 1: we're building a shared lib, 0 we're not
TK_SHARED_BUILD		= @@TK_SHARED_BUILD@@

# Directory in which to install the pkgIndex.tcl file for loadable Tk
PKG_INSTALL_DIR		= $(LIB_INSTALL_DIR)/tk$(VERSION)$(TK_DBGX)

# Package index file for loadable Tk
PKG_INDEX		= $(PKG_INSTALL_DIR)/pkgIndex.tcl

# warning flags
CFLAGS_WARNING		= @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG		= @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE		= @@CFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS			= $(CFLAGS_DEBUG)
#CFLAGS			= $(CFLAGS_OPTIMIZE)
#CFLAGS			= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS			= @@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Flags to pass to the linker
LDFLAGS_DEBUG		= @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE	= @@LDFLAGS_OPTIMIZE@@
LDFLAGS			= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@

# A "-I" switch that can be used when compiling to make all of the
# X11 include files accessible (the configure script will try to
# set this value, and will cause it to be an empty string if the
# include files are accessible via /usr/include).
X11_INCLUDES		= @@XINCLUDES@@

# Linker switch(es) to use to link with the X11 library archive (the
# configure script will try to set this value automatically, but you
# can override it).
X11_LIB_SWITCHES	= @@XLIBSW@@


# To turn off the security checks that disallow incoming sends when
# the X server appears to be insecure, reverse the comments on the
# following lines:
SECURITY_FLAGS		=
#SECURITY_FLAGS		= -DTK_NO_SECURITY

# To disable ANSI-C procedure prototypes reverse the comment characters
# on the following lines:
PROTO_FLAGS		=
#PROTO_FLAGS		= -DNO_PROTOTYPE

# To enable memory debugging reverse the comment characters on the following
# lines. or call configure with --enable-symbols=mem
# Warning:  if you enable memory debugging, you must do it *everywhere*,
# including all the code that calls Tcl, and you must use ckalloc and
# ckfree everywhere instead of malloc and free.
MEM_DEBUG_FLAGS		=
#MEM_DEBUG_FLAGS	= -DTCL_MEM_DEBUG

# If your X server is X11R4 or earlier, then you may wish to reverse
# the comment characters on the following two lines.  This will enable
# extra code to speed up XStringToKeysym.  In X11R5 and later releases
# XStringToKeysym is plenty fast, so you needn't define REDO_KEYSYM_LOOKUP.
KEYSYM_FLAGS		=
#KEYSYM_FLAGS		= -DREDO_KEYSYM_LOOKUP

# Tk does not used deprecated Tcl constructs so it should
# compile fine with -DTCL_NO_DEPRECATED. To remove its own
# set of deprecated code uncomment the second line.
NO_DEPRECATED_FLAGS	= -DTCL_NO_DEPRECATED
#NO_DEPRECATED_FLAGS	= -DTCL_NO_DEPRECATED -DTK_NO_DEPRECATED

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL			= /bin/sh

# Tk used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL_STRIP_PROGRAM   = -s
INSTALL_STRIP_LIBRARY   = -S -S

INSTALL			= @@srcdir@@/install-sh -c
INSTALL_PROGRAM		= ${INSTALL}
INSTALL_LIBRARY		= ${INSTALL}
INSTALL_DATA		= ${INSTALL} -m 644

# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

# The symbols below provide support for dynamic loading and shared
# libraries.  The values of the symbols are normally set by the
# configure script.  You shouldn't normally need to modify any of
# these definitions by hand.

SHLIB_CFLAGS		= @@SHLIB_CFLAGS@@

# To enable support for stubs in Tcl.
STUB_LIB_FILE		= @@TK_STUB_LIB_FILE@@

TK_STUB_LIB_FILE	= @@TK_STUB_LIB_FILE@@
#TK_STUB_LIB_FILE	= libtkstub.a

# Generic stub lib name used in rules that apply to tcl and tk
STUB_LIB_FILE		= ${TK_STUB_LIB_FILE}

TK_STUB_LIB_FLAG	= @@TK_STUB_LIB_FLAG@@
#TK_STUB_LIB_FLAG	= -ltkstub

TK_LIB_FILE		= @@TK_LIB_FILE@@
#TK_LIB_FILE		= libtk.a

# Generic lib name used in rules that apply to tcl and tk
LIB_FILE		= ${TK_LIB_FILE}

TK_LIB_FLAG		= @@TK_LIB_FLAG@@
#TK_LIB_FLAG		= -ltk

TCL_LIB_SPEC		= @@TCL_LIB_SPEC@@
TCL_STUB_LIB_SPEC	= @@TCL_STUB_LIB_SPEC@@
TCL_STUB_LIB_FLAG	= @@TCL_STUB_LIB_FLAG@@
TK_EXP_FILE		= @@TK_EXP_FILE@@
TK_BUILD_EXP_FILE	= @@TK_BUILD_EXP_FILE@@

TCL_STUB_FLAGS		= @@TCL_STUB_FLAGS@@

# Libraries to use when linking.  This definition is determined by the
# configure script.
LIBS = @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@
WISH_LIBS = $(TCL_LIB_SPEC) @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@

# The symbol below provides support for dynamic loading and shared
# libraries.  See configure.in for a description of what it means.
# The values of the symbolis normally set by the configure script.

STLIB_LD		= @@STLIB_LD@@
SHLIB_LD		= @@SHLIB_LD@@
SHLIB_LD_LIBS		= @@SHLIB_LD_LIBS@@
TK_SHLIB_LD_EXTRAS	= @@TK_SHLIB_LD_EXTRAS@@

# Additional search flags needed to find the various shared libraries
# at run-time.  The first symbol is for use when creating a binary
# with cc, and the second is for use when running ld directly.
CC_SEARCH_FLAGS	= @@CC_SEARCH_FLAGS@@
LD_SEARCH_FLAGS	= @@LD_SEARCH_FLAGS@@

# support for embedded libraries on Darwin / Mac OS X
DYLIB_INSTALL_DIR	= ${LIB_RUNTIME_DIR}

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------

AC_FLAGS		= @@EXTRA_CFLAGS@@ @@DEFS@@
AR			= @@AR@@
RANLIB			= @@RANLIB@@
SRC_DIR			= @@srcdir@@/..
TOP_DIR			= @@srcdir@@/..
GENERIC_DIR		= $(TOP_DIR)/generic
UNIX_DIR		= @@srcdir@@
BMAP_DIR		= $(TOP_DIR)/bitmaps
TOOL_DIR		= @@TCL_SRC_DIR@@/tools

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

# Flags to be passed to mkLinks to control whether the manpages
# should be compressed and linked with softlinks
MKLINKS_FLAGS           = @@MKLINKS_FLAGS@@

CC			= @@CC@@

CC_SWITCHES_NO_STUBS = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I${UNIX_DIR} -I${GENERIC_DIR} \
-I${BMAP_DIR} -I${TCL_GENERIC_DIR} ${X11_INCLUDES} \
${AC_FLAGS} ${PROTO_FLAGS} \
${SECURITY_FLAGS} ${MEM_DEBUG_FLAGS} ${KEYSYM_FLAGS} ${NO_DEPRECATED_FLAGS}

CC_SWITCHES = ${CC_SWITCHES_NO_STUBS} ${TCL_STUB_FLAGS} 

DEPEND_SWITCHES = ${CFLAGS} -I${UNIX_DIR} -I${GENERIC_DIR} \
-I${BMAP_DIR} \
-I${TCL_GENERIC_DIR} ${X11_INCLUDES} \
${AC_FLAGS} ${PROTO_FLAGS} ${SECURITY_FLAGS} ${MEM_DEBUG_FLAGS} \
${KEYSYM_FLAGS}

WISH_OBJS = tkAppInit.o

TKTEST_OBJS = tkTestInit.o tkTest.o tkSquare.o

WIDGOBJS = tkButton.o tkEntry.o tkFrame.o tkListbox.o \
	tkMenu.o tkMenubutton.o tkMenuDraw.o tkMessage.o \
	tkPanedWindow.o tkScale.o tkScrollbar.o

CANVOBJS = tkCanvas.o tkCanvArc.o tkCanvBmap.o tkCanvImg.o \
	tkCanvLine.o tkCanvPoly.o tkCanvPs.o tkCanvText.o \
	tkCanvUtil.o tkCanvWind.o tkRectOval.o tkTrig.o

IMAGEOBJS = tkImage.o tkImgBmap.o tkImgGIF.o tkImgPPM.o tkImgPhoto.o

TEXTOBJS = tkText.o tkTextBTree.o tkTextDisp.o tkTextImage.o tkTextIndex.o \
	tkTextMark.o tkTextTag.o tkTextWind.o

UNIXOBJS = tkUnix.o tkUnix3d.o tkUnixButton.o tkUnixColor.o tkUnixConfig.o \
	tkUnixCursor.o tkUnixDraw.o tkUnixEmbed.o tkUnixEvent.o \
	tkUnixFocus.o tkUnixFont.o tkUnixInit.o tkUnixKey.o tkUnixMenu.o \
	tkUnixMenubu.o tkUnixScale.o tkUnixScrlbr.o tkUnixSelect.o \
	tkUnixSend.o tkUnixWm.o tkUnixXId.o tkStubInit.o tkStubLib.o

STUB_LIB_OBJS = tkStubLib.o tkStubImg.o

OBJS =  tk3d.o tkArgv.o tkAtom.o tkBind.o tkBitmap.o tkClipboard.o tkCmds.o \
	tkColor.o tkConfig.o tkConsole.o tkCursor.o tkError.o tkEvent.o \
	tkFocus.o tkFont.o tkGet.o tkGC.o tkGeometry.o tkGrab.o tkGrid.o \
	tkMain.o tkObj.o tkOldConfig.o tkOption.o tkPack.o tkPlace.o \
	tkSelect.o tkStyle.o tkUndo.o tkUtil.o tkVisual.o tkWindow.o  \
	$(UNIXOBJS) $(WIDGOBJS) $(CANVOBJS) $(IMAGEOBJS) $(TEXTOBJS)

TK_DECLS = \
	$(GENERIC_DIR)/tk.decls \
	$(GENERIC_DIR)/tkInt.decls

SRCS = \
	$(GENERIC_DIR)/tk3d.c $(GENERIC_DIR)/tkArgv.c \
	$(GENERIC_DIR)/tkAtom.c $(GENERIC_DIR)/tkBind.c	\
	$(GENERIC_DIR)/tkBitmap.c $(GENERIC_DIR)/tkClipboard.c \
	$(GENERIC_DIR)/tkCmds.c $(GENERIC_DIR)/tkColor.c \
	$(GENERIC_DIR)/tkConfig.c $(GENERIC_DIR)/tkCursor.c \
	$(GENERIC_DIR)/tkError.c $(GENERIC_DIR)/tkEvent.c \
	$(GENERIC_DIR)/tkFocus.c $(GENERIC_DIR)/tkFont.c \
	$(GENERIC_DIR)/tkGet.c $(GENERIC_DIR)/tkGC.c \
	$(GENERIC_DIR)/tkGeometry.c $(GENERIC_DIR)/tkGrab.c \
	$(GENERIC_DIR)/tkGrid.c $(GENERIC_DIR)/tkConsole.c \
	$(GENERIC_DIR)/tkMain.c $(GENERIC_DIR)/tkOption.c \
	$(GENERIC_DIR)/tkPack.c $(GENERIC_DIR)/tkPlace.c \
	$(GENERIC_DIR)/tkSelect.c $(GENERIC_DIR)/tkStyle.c \
	$(GENERIC_DIR)/tkUndo.c $(GENERIC_DIR)/tkUtil.c \
	$(GENERIC_DIR)/tkVisual.c $(GENERIC_DIR)/tkWindow.c \
	$(GENERIC_DIR)/tkButton.c $(GENERIC_DIR)/tkObj.c \
	$(GENERIC_DIR)/tkEntry.c $(GENERIC_DIR)/tkFrame.c \
	$(GENERIC_DIR)/tkListbox.c $(GENERIC_DIR)/tkMenu.c \
	$(GENERIC_DIR)/tkMenubutton.c $(GENERIC_DIR)/tkMenuDraw.c \
	$(GENERIC_DIR)/tkMessage.c $(GENERIC_DIR)/tkPanedWindow.c \
	$(GENERIC_DIR)/tkScale.c $(GENERIC_DIR)/tkScrollbar.c \
	$(GENERIC_DIR)/tkCanvas.c $(GENERIC_DIR)/tkCanvArc.c \
	$(GENERIC_DIR)/tkCanvBmap.c $(GENERIC_DIR)/tkCanvImg.c \
	$(GENERIC_DIR)/tkCanvLine.c $(GENERIC_DIR)/tkCanvPoly.c \
	$(GENERIC_DIR)/tkCanvPs.c $(GENERIC_DIR)/tkCanvText.c \
	$(GENERIC_DIR)/tkCanvUtil.c \
	$(GENERIC_DIR)/tkCanvWind.c $(GENERIC_DIR)/tkRectOval.c \
	$(GENERIC_DIR)/tkTrig.c $(GENERIC_DIR)/tkImage.c \
	$(GENERIC_DIR)/tkImgBmap.c $(GENERIC_DIR)/tkImgGIF.c \
	$(GENERIC_DIR)/tkImgPPM.c \
	$(GENERIC_DIR)/tkImgPhoto.c $(GENERIC_DIR)/tkText.c \
	$(GENERIC_DIR)/tkTextBTree.c $(GENERIC_DIR)/tkTextDisp.c \
	$(GENERIC_DIR)/tkTextImage.c \
	$(GENERIC_DIR)/tkTextIndex.c $(GENERIC_DIR)/tkTextMark.c \
	$(GENERIC_DIR)/tkTextTag.c $(GENERIC_DIR)/tkTextWind.c \
	$(GENERIC_DIR)/tkOldConfig.c \
	$(GENERIC_DIR)/tkSquare.c $(GENERIC_DIR)/tkTest.c \
	$(GENERIC_DIR)/tkStubInit.c $(GENERIC_DIR)/tkStubLib.c \
	$(UNIX_DIR)/tkAppInit.c $(UNIX_DIR)/tkUnix.c \
	$(UNIX_DIR)/tkUnix3d.c \
	$(UNIX_DIR)/tkUnixButton.c $(UNIX_DIR)/tkUnixColor.c \
	$(UNIX_DIR)/tkUnixConfig.c \
	$(UNIX_DIR)/tkUnixCursor.c \
	$(UNIX_DIR)/tkUnixDraw.c \
	$(UNIX_DIR)/tkUnixEmbed.c $(UNIX_DIR)/tkUnixEvent.c \
	$(UNIX_DIR)/tkUnixFocus.c \
	$(UNIX_DIR)/tkUnixFont.c $(UNIX_DIR)/tkUnixInit.c \
	$(UNIX_DIR)/tkUnixKey.c \
	$(UNIX_DIR)/tkUnixMenu.c $(UNIX_DIR)/tkUnixMenubu.c \
	$(UNIX_DIR)/tkUnixScale.c $(UNIX_DIR)/tkUnixScrlbr.c \
	$(UNIX_DIR)/tkUnixSelect.c \
	$(UNIX_DIR)/tkUnixSend.c $(UNIX_DIR)/tkUnixWm.c \
	$(UNIX_DIR)/tkUnixXId.c


HDRS = bltList.h \
	default.h ks_names.h tkPatch.h tk.h tkButton.h tkCanvas.h tkInt.h  \
	tkPort.h tkScrollbar.h tkText.h

DEMOPROGS = browse hello ixset rmt rolodex square tcolor timer widget

all: binaries libraries doc

binaries: ${LIB_FILE} ${STUB_LIB_FILE} wish

libraries:

$(SRC_DIR)/doc/man.macros:
	chmod +x $(UNIX_DIR)/install-sh
	$(INSTALL_DATA) @@TCL_SRC_DIR@@/doc/man.macros $(SRC_DIR)/doc/man.macros

doc: $(SRC_DIR)/doc/man.macros

# The following target is configured by autoconf to generate either
# a shared library or non-shared library for Tk.
${LIB_FILE}: ${OBJS}
	rm -f $@@
	@@MAKE_LIB@@

${STUB_LIB_FILE}: ${STUB_LIB_OBJS}
	rm -f $@@
	@@MAKE_STUB_LIB@@

# Make target which outputs the list of the .o contained in the Tk lib
# usefull to build a single big shared library containing Tcl/Tk and other
# extensions.  used for the Tcl Plugin.  -- dl
tkLibObjs:
	@@echo ${OBJS}

# This targets actually build the objects needed for the lib in the above
# case
objs: ${OBJS}


wish: $(WISH_OBJS) $(TK_LIB_FILE) $(TK_STUB_LIB_FILE)
	$(CC) $(LDFLAGS) $(WISH_OBJS) \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(CC_SEARCH_FLAGS) -o wish

# Resetting the LIB_RUNTIME_DIR below is required so that
# the generated tktest executable gets the build directory
# burned into its ld search path. This keeps tktest from
# picking up an already installed version of the Tcl or
# Tk shared libraries.

tktest: $(TKTEST_OBJS) $(TK_LIB_FILE)
	$(MAKE) tktest-real LIB_RUNTIME_DIR=`pwd`:$(TCL_BIN_DIR)

tktest-real:
	${CC} $(LDFLAGS) $(TKTEST_OBJS) \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(CC_SEARCH_FLAGS) -o tktest

# FIXME: This xttest rule seems to be broken in a number of ways.
# It should use CC_SEARCH_FLAGS, it does not include the shared
# lib location logic from tktest, and it is not clear where this
# test.o object file comes from.
xttest: test.o tkTest.o tkSquare.o $(TK_LIB_FILE)
	${CC} $(LDFLAGS) test.o tkTest.o tkSquare.o \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(LD_SEARCH_FLAGS) -lXt -o xttest

# Note, in the target below TCL_LIBRARY needs to be set or else
# "make test" won't work in the case where the compilation directory
# isn't the same as the source directory.
# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"

test: tktest
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 \
	$(TESTFLAGS) $(TCLTESTARGS)

# Tests with different languages
testlang: tktest
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	for lang in $(LOCALES) ;  \
	do \
	LANG=$(lang); export LANG; \
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 \
	$(TESTFLAGS) $(TCLTESTARGS); \
	done

# Useful target to launch a built tktest with the proper path,...
runtest: tktest
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	./tktest

# This target can be used to run wish from the build directory
# via `make shell` or `make shell SCRIPT=/tmp/foo.tcl`
shell: wish
	@@LD_LIBRARY_PATH_VAR@@=`pwd`:${TCL_BIN_DIR}:${@@LD_LIBRARY_PATH_VAR@@}; \
	export @@LD_LIBRARY_PATH_VAR@@; \
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	./wish $(SCRIPT)

# This target can be used to run wish inside either gdb or insight
gdb: wish
	@@echo "set env @@LD_LIBRARY_PATH_VAR@@=`pwd`:${TCL_BIN_DIR}:${@@LD_LIBRARY_PATH_VAR@@}" > gdb.run
	@@echo "set env TCL_LIBRARY=@@TCL_SRC_DIR@@/library" >> gdb.run
	@@echo "set env TK_LIBRARY=@@TK_SRC_DIR@@/library" >> gdb.run
	gdb ./wish --command=gdb.run
	rm gdb.run

install: all install-binaries install-libraries install-demos install-doc

install-strip:
	$(MAKE) install \
		INSTALL_PROGRAM="$(INSTALL_PROGRAM) ${INSTALL_STRIP_PROGRAM}" \
		INSTALL_LIBRARY="$(INSTALL_LIBRARY) ${INSTALL_STRIP_LIBRARY}"

# Note: before running ranlib below, must cd to target directory because
# some ranlibs write to current directory, and this might not always be
# possible (e.g. if installing as root).

install-binaries: $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) $(TK_BUILD_EXP_FILE) wish
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) $(PKG_INSTALL_DIR); \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@if test ! -x $(UNIX_DIR)/install-sh; then \
	    chmod +x $(UNIX_DIR)/install-sh; \
	    fi
	@@if test "x$(TK_SHARED_BUILD)" = "x1"; then \
	    echo "Creating package index $(PKG_INDEX)"; \
	    rm -f $(PKG_INDEX); \
	    (\
	    echo "if {[package vcompare [package provide Tcl]\
		$(TCLVERSION)] != 0} { return }";\
	    echo "package ifneeded Tk $(VERSION)\
		[list load [file join \$$dir .. $(TK_LIB_FILE)] Tk]";\
	    ) > $(PKG_INDEX); \
	    fi
	@@echo "Installing $(LIB_FILE) to $(LIB_INSTALL_DIR)/"
	@@@@INSTALL_LIB@@
	@@chmod 555 $(LIB_INSTALL_DIR)/$(LIB_FILE)
	@@echo "Installing wish as $(BIN_INSTALL_DIR)/wish$(VERSION)"
	@@$(INSTALL_PROGRAM) wish $(BIN_INSTALL_DIR)/wish$(VERSION)
	@@echo "Installing tkConfig.sh to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) tkConfig.sh $(LIB_INSTALL_DIR)/tkConfig.sh
	@@if test "$(TK_BUILD_EXP_FILE)" != ""; then \
	    echo "Installing $(TK_EXP_FILE) to $(LIB_INSTALL_DIR)/"; \
	    $(INSTALL_DATA) $(TK_BUILD_EXP_FILE) \
			$(LIB_INSTALL_DIR)/$(TK_EXP_FILE); \
	fi
	@@if test "$(STUB_LIB_FILE)" != "" ; then \
	    echo "Installing $(STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	    @@INSTALL_STUB_LIB@@ ; \
	fi

install-libraries:
	@@for i in $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images \
		$(SCRIPT_INSTALL_DIR)/msgs; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@if test ! -x $(UNIX_DIR)/install-sh; then \
	    chmod +x $(UNIX_DIR)/install-sh; \
	    fi
	@@echo "Installing header files";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkDecls.h \
		$(GENERIC_DIR)/tkPlatDecls.h ; \
	    do \
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR); \
	    done;
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(SRC_DIR)/library/*.tcl $(GENERIC_DIR)/prolog.ps \
	        $(SRC_DIR)/library/tclIndex $(UNIX_DIR)/tkAppInit.c; \
	    do \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
	    done;
	@@echo "Installing library images directory";
	@@for i in $(SRC_DIR)/library/images/*; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/images; \
	    fi; \
	    done;
	@@echo "Installing translation directory";
	@@for i in $(SRC_DIR)/library/msgs/*.msg; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/msgs; \
	    fi; \
	    done;

install-demos:
	@@for i in $(SCRIPT_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR)/demos \
		$(SCRIPT_INSTALL_DIR)/demos/images ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@echo "Installing demos to $(SCRIPT_INSTALL_DIR)/demos/";
	@@for i in $(SRC_DIR)/library/demos/*; \
	    do \
	    if [ -f $$i ] ; then \
		sed -e '3 s|exec wish|exec wish$(VERSION)|' \
			$$i > $(SCRIPT_INSTALL_DIR)/demos/`basename $$i`; \
	    fi; \
	    done;
	@@for i in $(DEMOPROGS); \
	    do \
	    chmod 755 $(SCRIPT_INSTALL_DIR)/demos/$$i; \
	    done;
	@@echo "Installing demo images";
	@@for i in $(SRC_DIR)/library/demos/images/*; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/demos/images; \
		fi; \
	    done;

install-doc:
	@@if test ! -x $(UNIX_DIR)/mkLinks; then \
	    chmod +x $(UNIX_DIR)/mkLinks; \
	    fi
	@@for i in $(MAN_INSTALL_DIR) $(MAN1_INSTALL_DIR) $(MAN3_INSTALL_DIR) $(MANN_INSTALL_DIR) ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@echo "Installing top-level (.1) docs";
	@@cd $(SRC_DIR)/doc; for i in *.1; \
	    do \
	    rm -f $(MAN1_INSTALL_DIR)/$$i; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		    $$i > $(MAN1_INSTALL_DIR)/$$i; \
	    chmod 444 $(MAN1_INSTALL_DIR)/$$i; \
	    done;
	@@echo "Cross-linking top-level (.1) docs";
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MAN1_INSTALL_DIR)
	@@echo "Installing C API (.3) docs";
	@@cd $(SRC_DIR)/doc; for i in *.3; \
	    do \
	    rm -f $(MAN3_INSTALL_DIR)/$$i; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		    $$i > $(MAN3_INSTALL_DIR)/$$i; \
	    chmod 444 $(MAN3_INSTALL_DIR)/$$i; \
	    done;
	@@echo "Cross-linking top-level (.3) docs";
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MAN3_INSTALL_DIR)
	@@echo "Installing command (.n) docs";
	@@cd $(SRC_DIR)/doc; for i in *.n; \
	    do \
	    rm -f $(MANN_INSTALL_DIR)/$$i; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		    $$i > $(MANN_INSTALL_DIR)/$$i; \
	    chmod 444 $(MANN_INSTALL_DIR)/$$i; \
	    done;
	@@echo "Cross-linking command (.n) docs";
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MANN_INSTALL_DIR)

Makefile: $(UNIX_DIR)/Makefile.in
	$(SHELL) config.status

clean:
	rm -f *.a *.o libtk* core errs *~ \#* TAGS *.E a.out errors \
		tktest wish config.info lib.exp

distclean: clean
	rm -f Makefile config.status config.cache config.log tkConfig.sh \
		$(PACKAGE).* prototype

depend:
	makedepend -- $(DEPEND_SWITCHES) -- $(SRCS)

# Test binaries.  The rule for tkTestInit.o is complicated because
# it is is compiled from tkAppInit.c.  Can't use the "-o" option
# because this doesn't work on some strange compilers (e.g. UnixWare).

tkTestInit.o: $(UNIX_DIR)/tkAppInit.c
	@@if test -f tkAppInit.o ; then \
	    rm -f tkAppInit.sav; \
	    mv tkAppInit.o tkAppInit.sav; \
	fi;
	$(CC) -c $(CC_SWITCHES_NO_STUBS) -DTK_TEST $(UNIX_DIR)/tkAppInit.c
	rm -f tkTestInit.o
	mv tkAppInit.o tkTestInit.o
	@@if test -f tkAppInit.sav ; then \
	    mv tkAppInit.sav tkAppInit.o; \
	fi;

tkAppInit.o: $(UNIX_DIR)/tkAppInit.c
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(UNIX_DIR)/tkAppInit.c

tk3d.o: $(GENERIC_DIR)/tk3d.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tk3d.c

tkArgv.o: $(GENERIC_DIR)/tkArgv.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkArgv.c

tkAtom.o: $(GENERIC_DIR)/tkAtom.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkAtom.c

tkBind.o: $(GENERIC_DIR)/tkBind.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkBind.c

tkBitmap.o: $(GENERIC_DIR)/tkBitmap.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkBitmap.c

tkClipboard.o: $(GENERIC_DIR)/tkClipboard.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkClipboard.c

tkCmds.o: $(GENERIC_DIR)/tkCmds.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCmds.c

tkColor.o: $(GENERIC_DIR)/tkColor.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkColor.c

tkConfig.o: $(GENERIC_DIR)/tkConfig.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkConfig.c

tkConsole.o: $(GENERIC_DIR)/tkConsole.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkConsole.c

tkCursor.o: $(GENERIC_DIR)/tkCursor.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCursor.c

tkError.o: $(GENERIC_DIR)/tkError.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkError.c

tkEvent.o: $(GENERIC_DIR)/tkEvent.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkEvent.c

tkFocus.o: $(GENERIC_DIR)/tkFocus.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkFocus.c

tkFont.o: $(GENERIC_DIR)/tkFont.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkFont.c

tkGet.o: $(GENERIC_DIR)/tkGet.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkGet.c

tkGC.o: $(GENERIC_DIR)/tkGC.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkGC.c

tkGeometry.o: $(GENERIC_DIR)/tkGeometry.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkGeometry.c

tkGrab.o: $(GENERIC_DIR)/tkGrab.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkGrab.c

tkGrid.o: $(GENERIC_DIR)/tkGrid.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkGrid.c

tkMain.o: $(GENERIC_DIR)/tkMain.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkMain.c

tkObj.o: $(GENERIC_DIR)/tkObj.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkObj.c

tkOldConfig.o: $(GENERIC_DIR)/tkOldConfig.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkOldConfig.c

tkOption.o: $(GENERIC_DIR)/tkOption.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkOption.c

tkPack.o: $(GENERIC_DIR)/tkPack.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkPack.c

tkPlace.o: $(GENERIC_DIR)/tkPlace.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkPlace.c

tkSelect.o: $(GENERIC_DIR)/tkSelect.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkSelect.c

tkStyle.o: $(GENERIC_DIR)/tkStyle.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStyle.c

tkUtil.o: $(GENERIC_DIR)/tkUtil.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkUtil.c

tkVisual.o: $(GENERIC_DIR)/tkVisual.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkVisual.c

tkWindow.o: $(GENERIC_DIR)/tkWindow.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkWindow.c

tkButton.o: $(GENERIC_DIR)/tkButton.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkButton.c

tkEntry.o: $(GENERIC_DIR)/tkEntry.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkEntry.c

tkFrame.o: $(GENERIC_DIR)/tkFrame.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkFrame.c

tkListbox.o: $(GENERIC_DIR)/tkListbox.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkListbox.c

tkMenu.o: $(GENERIC_DIR)/tkMenu.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkMenu.c

tkMenubutton.o: $(GENERIC_DIR)/tkMenubutton.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkMenubutton.c

tkMenuDraw.o: $(GENERIC_DIR)/tkMenuDraw.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkMenuDraw.c

tkMessage.o: $(GENERIC_DIR)/tkMessage.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkMessage.c

tkPanedWindow.o: $(GENERIC_DIR)/tkPanedWindow.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkPanedWindow.c

tkScale.o: $(GENERIC_DIR)/tkScale.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkScale.c

tkScrollbar.o: $(GENERIC_DIR)/tkScrollbar.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkScrollbar.c

tkSquare.o: $(GENERIC_DIR)/tkSquare.c
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(GENERIC_DIR)/tkSquare.c

tkCanvas.o: $(GENERIC_DIR)/tkCanvas.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvas.c

tkCanvArc.o: $(GENERIC_DIR)/tkCanvArc.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvArc.c

tkCanvBmap.o: $(GENERIC_DIR)/tkCanvBmap.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvBmap.c

tkCanvImg.o: $(GENERIC_DIR)/tkCanvImg.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvImg.c

tkCanvLine.o: $(GENERIC_DIR)/tkCanvLine.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvLine.c

tkCanvPoly.o: $(GENERIC_DIR)/tkCanvPoly.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvPoly.c

tkCanvPs.o: $(GENERIC_DIR)/tkCanvPs.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvPs.c

tkCanvText.o: $(GENERIC_DIR)/tkCanvText.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvText.c

tkCanvUtil.o: $(GENERIC_DIR)/tkCanvUtil.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvUtil.c

tkCanvWind.o: $(GENERIC_DIR)/tkCanvWind.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkCanvWind.c

tkRectOval.o: $(GENERIC_DIR)/tkRectOval.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkRectOval.c

tkTrig.o: $(GENERIC_DIR)/tkTrig.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTrig.c

tkImage.o: $(GENERIC_DIR)/tkImage.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkImage.c

tkImgBmap.o: $(GENERIC_DIR)/tkImgBmap.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkImgBmap.c

tkImgGIF.o: $(GENERIC_DIR)/tkImgGIF.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkImgGIF.c

tkImgPPM.o: $(GENERIC_DIR)/tkImgPPM.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkImgPPM.c

tkImgPhoto.o: $(GENERIC_DIR)/tkImgPhoto.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkImgPhoto.c

tkTest.o: $(GENERIC_DIR)/tkTest.c
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(GENERIC_DIR)/tkTest.c

tkText.o: $(GENERIC_DIR)/tkText.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkText.c

tkTextBTree.o: $(GENERIC_DIR)/tkTextBTree.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextBTree.c

tkTextDisp.o: $(GENERIC_DIR)/tkTextDisp.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextDisp.c

tkTextImage.o: $(GENERIC_DIR)/tkTextImage.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextImage.c

tkTextIndex.o: $(GENERIC_DIR)/tkTextIndex.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextIndex.c

tkTextMark.o: $(GENERIC_DIR)/tkTextMark.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextMark.c

tkTextTag.o: $(GENERIC_DIR)/tkTextTag.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextTag.c

tkTextWind.o: $(GENERIC_DIR)/tkTextWind.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTextWind.c

tkStubInit.o: $(GENERIC_DIR)/tkStubInit.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubInit.c

# Stub library binaries, these must be compiled for use in a shared library
# even though they will be placed in a static archive

tkStubLib.o: $(GENERIC_DIR)/tkStubLib.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubLib.c

tkStubImg.o: $(GENERIC_DIR)/tkStubImg.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubImg.c

tkUndo.o: $(GENERIC_DIR)/tkUndo.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkUndo.c

tkUnix.o: $(UNIX_DIR)/tkUnix.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnix.c

tkUnix3d.o: $(UNIX_DIR)/tkUnix3d.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnix3d.c

tkUnixButton.o: $(UNIX_DIR)/tkUnixButton.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixButton.c

tkUnixColor.o: $(UNIX_DIR)/tkUnixColor.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixColor.c

tkUnixConfig.o: $(UNIX_DIR)/tkUnixConfig.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixConfig.c

tkUnixCursor.o: $(UNIX_DIR)/tkUnixCursor.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixCursor.c

tkUnixDraw.o: $(UNIX_DIR)/tkUnixDraw.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixDraw.c

tkUnixEmbed.o: $(UNIX_DIR)/tkUnixEmbed.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixEmbed.c

tkUnixEvent.o: $(UNIX_DIR)/tkUnixEvent.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixEvent.c

tkUnixFocus.o: $(UNIX_DIR)/tkUnixFocus.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixFocus.c

tkUnixFont.o: $(UNIX_DIR)/tkUnixFont.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixFont.c

tkUnixInit.o: $(UNIX_DIR)/tkUnixInit.c $(GENERIC_DIR)/tkInitScript.h tkConfig.sh
	$(CC) -c $(CC_SWITCHES) -DTK_LIBRARY=\"${TK_LIBRARY}\" \
	    $(UNIX_DIR)/tkUnixInit.c

tkUnixKey.o: $(UNIX_DIR)/tkUnixKey.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixKey.c

tkUnixMenu.o: $(UNIX_DIR)/tkUnixMenu.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixMenu.c

tkUnixMenubu.o: $(UNIX_DIR)/tkUnixMenubu.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixMenubu.c

tkUnixScale.o: $(UNIX_DIR)/tkUnixScale.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixScale.c

tkUnixScrlbr.o: $(UNIX_DIR)/tkUnixScrlbr.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixScrlbr.c

tkUnixSelect.o: $(UNIX_DIR)/tkUnixSelect.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixSelect.c

tkUnixSend.o: $(UNIX_DIR)/tkUnixSend.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixSend.c

tkUnixWm.o: $(UNIX_DIR)/tkUnixWm.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixWm.c

tkUnixXId.o: $(UNIX_DIR)/tkUnixXId.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixXId.c

.c.o:
	$(CC) -c $(CC_SWITCHES) $<

#
# Target to check for proper usage of UCHAR macro.
#

checkuchar:
	-egrep isalnum\|isalpha\|iscntrl\|isdigit\|islower\|isprint\|ispunct\|isspace\|isupper\|isxdigit\|toupper\|tolower $(SRCS) | grep -v UCHAR

#
# Target to make sure that only symbols with "Tk" prefixes are
# exported.
#

checkexports: $(TK_LIB_FILE)
	-nm -p $(TK_LIB_FILE) | awk '$$2 ~ /[TDB]/ { print $$3 }' | sort -n | grep -v '^[Tt]k'


#
# Regenerate the stubs files.
#

$(GENERIC_DIR)/tkStubInit.c: $(GENERIC_DIR)/tk.decls \
		$(GENERIC_DIR)/tkInt.decls
	@@echo "Warning: tkStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"

genstubs:
	$(TCL_EXE) $(TOOL_DIR)/genStubs.tcl $(GENERIC_DIR) \
		$(GENERIC_DIR)/tk.decls $(GENERIC_DIR)/tkInt.decls

#
# Target to check that all exported functions have an entry in the stubs
# tables.
#

checkstubs:
	-@@for i in `nm -p $(TK_LIB_FILE) | awk '$$2 ~ /T/ { print $$3 }' \
		| sort -n`; do \
		match=0; \
		for j in $(TK_DECLS); do \
		    if [ `grep -c $$i $$j` -gt 0 ]; then \
			match=1; \
		    fi; \
		done; \
		if [ $$match -eq 0 ]; then echo $$i; fi \
	done


#
# Target to create a Tk RPM for Linux.  Requires that you be on a Linux
# system.
#

rpm: all /bin/rpm
	rm -f THIS.TCL.SPEC
	echo "%define _builddir `pwd`" > THIS.TK.SPEC
	echo "%define _rpmdir `pwd`/RPMS" >> THIS.TK.SPEC
	cat tk.spec >> THIS.TK.SPEC
	mkdir -p RPMS/i386
	rpm -bb THIS.TK.SPEC
	mv RPMS/i386/*.rpm .
	rm -rf RPMS THIS.TK.SPEC

mklinks:
	$(TCL_EXE) $(TCLDIR)/unix/mkLinks.tcl \
		$(UNIX_DIR)/../doc/*.[13n] > $(UNIX_DIR)/mkLinks
	chmod +x $(UNIX_DIR)/mkLinks

#
# Target to create a proper Tk distribution from information in the
# master source directory.  DISTDIR must be defined to indicate where
# to put the distribution.  DISTDIR must be an absolute path name.
#

DISTROOT = /tmp/dist
DISTNAME =	tk${VERSION}${PATCH_LEVEL}
ZIPNAME =	tk${MAJOR_VERSION}${MINOR_VERSION}${PATCH_LEVEL}.zip
DISTDIR =	$(DISTROOT)/$(DISTNAME)
TCLDIR = 	@@TCL_SRC_DIR@@
$(UNIX_DIR)/configure: $(UNIX_DIR)/configure.in
	autoconf $(UNIX_DIR)/configure.in > $(UNIX_DIR)/configure

dist:   $(UNIX_DIR)/configure mklinks
	rm -rf $(DISTDIR)
	mkdir -p $(DISTDIR)
	mkdir $(DISTDIR)/unix
	cp -p $(UNIX_DIR)/*.c $(UNIX_DIR)/*.h $(DISTDIR)/unix
	cp $(TOP_DIR)/license.terms $(UNIX_DIR)/Makefile.in $(DISTDIR)/unix
	chmod 664 $(DISTDIR)/unix/Makefile.in
	cp $(UNIX_DIR)/configure $(UNIX_DIR)/configure.in $(UNIX_DIR)/tk.spec \
		$(UNIX_DIR)/aclocal.m4 $(UNIX_DIR)/tcl.m4 \
		$(UNIX_DIR)/tkConfig.sh.in $(TCLDIR)/unix/install-sh \
		$(UNIX_DIR)/README $(UNIX_DIR)/mkLinks $(DISTDIR)/unix
	chmod 775 $(DISTDIR)/unix/configure $(DISTDIR)/unix/configure.in
	chmod +x $(DISTDIR)/unix/install-sh
	mkdir $(DISTDIR)/bitmaps
	@@(cd $(TOP_DIR); for i in bitmaps/* ; do \
	    if [ -f $$i ] ; then \
		sed -e 's/static char/static unsigned char/' \
		       $$i > $(DISTDIR)/$$i; \
	    fi; \
	done;)
	mkdir $(DISTDIR)/generic
	cp -p $(GENERIC_DIR)/*.c $(GENERIC_DIR)/*.h $(GENERIC_DIR)/prolog.ps \
		$(DISTDIR)/generic
	cp -p $(GENERIC_DIR)/*.decls $(DISTDIR)/generic
	cp -p $(GENERIC_DIR)/README $(DISTDIR)/generic
	cp -p $(TOP_DIR)/changes $(TOP_DIR)/ChangeLog $(TOP_DIR)/README \
		$(TOP_DIR)/license.terms $(DISTDIR)
	rm -f $(DISTDIR)/generic/blt*.[ch]
	mkdir $(DISTDIR)/win
	cp $(TOP_DIR)/win/Makefile.in $(DISTDIR)/win
	cp $(TOP_DIR)/win/configure.in \
		$(TOP_DIR)/win/configure \
		$(TOP_DIR)/win/tkConfig.sh.in \
		$(TOP_DIR)/win/aclocal.m4 $(TOP_DIR)/win/tcl.m4 \
		$(DISTDIR)/win
	cp -p $(TOP_DIR)/win/*.c $(TOP_DIR)/win/*.h $(DISTDIR)/win
	cp -p $(TOP_DIR)/win/*.bat $(DISTDIR)/win
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/*.bat
	cp -p $(TOP_DIR)/win/makefile.* $(DISTDIR)/win
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/makefile.*
	cp -p $(TOP_DIR)/win/rules.vc $(DISTDIR)/win
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rules.vc
	cp -p $(TOP_DIR)/win/README $(DISTDIR)/win
	cp -p $(TOP_DIR)/win/lamp.bmp $(DISTDIR)/win
	cp -p $(TOP_DIR)/license.terms $(DISTDIR)/win
	mkdir $(DISTDIR)/win/rc
	cp -p $(TOP_DIR)/win/rc/wish.exe.manifest $(DISTDIR)/win/rc/
	cp -p $(TOP_DIR)/win/rc/*.rc $(TOP_DIR)/win/rc/*.cur \
		$(TOP_DIR)/win/rc/*.ico $(TOP_DIR)/win/rc/*.bmp \
		$(DISTDIR)/win/rc
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rc/*.rc
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rc/wish.exe.manifest
	mkdir $(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/tkMacProjects.sea.hqx $(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/*.c $(TOP_DIR)/mac/*.h $(TOP_DIR)/mac/*.r \
		$(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/README $(DISTDIR)/mac
	cp -p $(TOP_DIR)/license.terms $(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/*.pch $(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/*.doc $(DISTDIR)/mac
	cp -p $(TOP_DIR)/mac/*.tcl $(DISTDIR)/mac
	mkdir $(DISTDIR)/macosx
	cp -p $(TOP_DIR)/macosx/Makefile $(TOP_DIR)/macosx/Wish.icns \
		$(TOP_DIR)/macosx/*.c $(TOP_DIR)/macosx/*.h \
		$(TOP_DIR)/macosx/*.r $(TOP_DIR)/macosx/*.tcl $(DISTDIR)/macosx
	mkdir $(DISTDIR)/macosx/Wish.pbproj
	cp -p $(TOP_DIR)/macosx/Wish.pbproj/*.pbx* \
		$(DISTDIR)/macosx/Wish.pbproj
	mkdir $(DISTDIR)/compat
	cp -p $(TOP_DIR)/license.terms $(TCLDIR)/compat/unistd.h \
		$(TCLDIR)/compat/stdlib.h $(TCLDIR)/compat/limits.h \
		$(DISTDIR)/compat
	mkdir $(DISTDIR)/xlib
	cp -p $(TOP_DIR)/xlib/*.h $(TOP_DIR)/xlib/*.c $(DISTDIR)/xlib
	cp -p $(TOP_DIR)/license.terms $(DISTDIR)/xlib
	mkdir $(DISTDIR)/xlib/X11
	cp -p $(TOP_DIR)/xlib/X11/*.h $(DISTDIR)/xlib/X11
	cp -p $(TOP_DIR)/license.terms $(DISTDIR)/xlib/X11
	mkdir $(DISTDIR)/library
	cp -p $(TOP_DIR)/license.terms $(TOP_DIR)/library/*.tcl \
		$(TOP_DIR)/library/tclIndex \
		$(DISTDIR)/library
	mkdir $(DISTDIR)/library/images
	@@(cd $(TOP_DIR); for i in library/images/* ; do \
	    if [ -f $$i ] ; then \
		cp $$i $(DISTDIR)/$$i; \
	    fi; \
	done;)
	mkdir $(DISTDIR)/library/msgs
	@@(cd $(TOP_DIR); for i in library/msgs/*.msg ; do \
	    if [ -f $$i ] ; then \
		cp $$i $(DISTDIR)/$$i; \
	    fi; \
	done;)
	mkdir $(DISTDIR)/library/demos
	cp -pr $(TOP_DIR)/library/demos/*.tcl \
		$(TOP_DIR)/library/demos/tclIndex \
		$(TOP_DIR)/library/demos/browse \
		$(TOP_DIR)/library/demos/hello $(TOP_DIR)/library/demos/ixset \
		$(TOP_DIR)/library/demos/rmt $(TOP_DIR)/library/demos/rolodex \
		$(TOP_DIR)/library/demos/square \
		$(TOP_DIR)/library/demos/tcolor \
		$(TOP_DIR)/library/demos/timer \
		$(TOP_DIR)/library/demos/widget \
		$(TOP_DIR)/library/demos/README \
		$(TOP_DIR)/license.terms $(DISTDIR)/library/demos
	mkdir $(DISTDIR)/library/demos/images
	@@(cd $(TOP_DIR); for i in library/demos/images/* ; do \
	    if [ -f $$i ] ; then \
		cp $$i $(DISTDIR)/$$i; \
	    fi; \
	done;)
	mkdir $(DISTDIR)/doc
	cp -p $(TOP_DIR)/license.terms $(TOP_DIR)/doc/*.[13n] \
		$(TCLDIR)/doc/man.macros $(DISTDIR)/doc
	mkdir $(DISTDIR)/tests
	cp -p $(TOP_DIR)/license.terms $(TOP_DIR)/tests/*.test \
		$(TOP_DIR)/tests/*.tcl $(TOP_DIR)/tests/README \
		$(TOP_DIR)/tests/option.file* $(DISTDIR)/tests

#
# The following target can only be used for non-patch releases.  Use
# the "allpatch" target below for patch releases.
#

alldist: dist
	rm -f $(DISTROOT)/$(DISTNAME)-src.tar.gz $(DISTROOT)/$(ZIPNAME)
	cd $(DISTROOT); tar cf $(DISTNAME)-src.tar $(DISTNAME); \
		gzip -9 $(DISTNAME)-src.tar; zip -qr8 $(ZIPNAME) $(DISTNAME)

#
# The target below is similar to "alldist" except it works for patch
# releases.  It is needed because patch releases are peculiar: the
# patch designation appears in the name of the compressed file
# (e.g. tcl8.0p1.tar.gz) but the extracted source directory doesn't
# include the patch designation (e.g. tcl8.0).
#

allpatch: dist
	rm -f $(DISTROOT)/$(DISTNAME)-src.tar.gz $(DISTROOT)/$(ZIPNAME)
	mv $(DISTROOT)/tk${VERSION} $(DISTROOT)/old
	mv $(DISTROOT)/$(DISTNAME) $(DISTROOT)/tk${VERSION}
	cd $(DISTROOT); tar cf $(DISTNAME)-src.tar tk${VERSION}; \
		gzip -9 $(DISTNAME)-src.tar; zip -r8 $(ZIPNAME) tk${VERSION}
	mv $(DISTROOT)/tk${VERSION} $(DISTROOT)/$(DISTNAME)
	mv $(DISTROOT)/old $(DISTROOT)/tk${VERSION}

#
# Target to create a Macintosh version of the distribution.  This will
# do a normal distribution and then massage the output to prepare it
# for moving to the Mac platform.  This requires a few scripts and
# programs found only in the Tcl greoup's tool workspace.
#

macdist: dist
	rm -f $(DISTDIR)/mac/tkMacProjects.sea.hqx
	$(TCL_EXE) $(TOOL_DIR)/man2html.tcl $(DISTDIR)/tmp ../.. tk$(VERSION)
	mv $(DISTDIR)/tmp/tk$(VERSION) $(DISTDIR)/html
	rm -rf $(DISTDIR)/doc
	rm -rf $(DISTDIR)/tmp
	$(TCL_EXE) $(TOOL_DIR)/cvtEOL.tcl $(DISTDIR)

#
# Targets to build Solaris package of the distribution for the current
# architecture.  To build stream packages for both sun4 and i86pc
# architectures: 
#
#   On the sun4 machine, execute the following:
#     make distclean; ./configure
#     make DISTDIR=<distdir> package
#
#   Once the build is complete, execute the following on the i86pc
#   machine:
#     make DISTDIR=<distdir> package-quick
#
# <distdir> is the absolute path to a directory where the build should
# take place.  These steps will generate the $(PACKAGE).sun4 and
# $(PACKAGE).i86pc stream packages.  It is important that the packages be
# built in this fashion in order to ensure that the architecture
# independent files are exactly the same, including timestamps, in
# both packages.
#

PACKAGE=SCRPtk

package: dist package-config package-common package-binaries package-generate
package-quick: package-config package-binaries package-generate

#
# Configure for the current architecture in the dist directory.
#
package-config:
	mkdir -p $(DISTDIR)/unix/`arch`
	cd $(DISTDIR)/unix/`arch`; \
        ../configure --prefix=/opt/SUNWtcl/$(TCLVERSION) \
		--exec_prefix=/opt/SUNWtcl/$(TCLVERSION)/`arch` \
		--with-tcl=$(DISTDIR)/../tcl$(TCLVERSION)/unix/`arch` \
		--enable-shared
	mkdir -p $(DISTDIR)/SUNWtcl/$(TCLVERSION)
	mkdir -p $(DISTDIR)/SUNWtcl/$(TCLVERSION)/`arch`

#
# Build and install the architecture independent files in the dist directory.
#

package-common:
	cd $(DISTDIR)/unix/`arch`;\
	$(MAKE); \
	$(MAKE) install-libraries install-doc \
		prefix=$(DISTDIR)/SUNWtcl/$(TCLVERSION) \
		exec_prefix=$(DISTDIR)/SUNWtcl/$(TCLVERSION)/`arch`
	mkdir -p $(DISTDIR)/SUNWtcl/$(TCLVERSION)/bin
	sed -e "s/TCLVERSION/$(TCLVERSION)/g" \
		-e "s/TKVERSION/$(VERSION)/g" < $(UNIX_DIR)/wish.sh \
		> $(DISTDIR)/SUNWtcl/$(TCLVERSION)/bin/wish$(VERSION)
	chmod 755 $(DISTDIR)/SUNWtcl/$(TCLVERSION)/bin/wish$(VERSION)

#
# Build and install the architecture specific files in the dist directory.
#

package-binaries: 
	cd $(DISTDIR)/unix/`arch`; \
	$(MAKE); \
	$(MAKE) install-binaries prefix=$(DISTDIR)/SUNWtcl/$(TCLVERSION) \
		exec_prefix=$(DISTDIR)/SUNWtcl/$(TCLVERSION)/`arch`

#
# Generate a package from the installed files in the dist directory for the
# current architecture.
#

package-generate:
	pkgproto $(DISTDIR)/SUNWtcl/$(TCLVERSION)/bin=bin \
		 $(DISTDIR)/SUNWtcl/$(TCLVERSION)/include=include \
		 $(DISTDIR)/SUNWtcl/$(TCLVERSION)/lib=lib \
		 $(DISTDIR)/SUNWtcl/$(TCLVERSION)/man=man \
		 $(DISTDIR)/SUNWtcl/$(TCLVERSION)/`arch`=`arch` \
	| $(TCL_EXE) $(TCLDIR)/unix/mkProto.tcl $(TCLVERSION) \
		$(UNIX_DIR) > prototype
	pkgmk -o -d . -f prototype -a `arch`
	pkgtrans -s . $(PACKAGE).`arch` $(PACKAGE)
	rm -rf $(PACKAGE)

# DO NOT DELETE THIS LINE -- make depend depends on it.
@


1.7
log
@touched all sources to ease next import
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.9.6.8 2001/08/07 02:18:46 mdejong Exp $
d14 4
d49 3
d53 1
d55 2
a56 5
# CYGNUS LOCAL location independence
# What is appended to the prefix to get the library name.  Note that
# this MUST begin with a "/".
TK_LIB_TRAILER = /lib/tk$(VERSION)
# END CYGNUS LOCAL
d58 2
a59 2
# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)/$(TK_LIBRARY)
d62 1
a62 1
LIB_INSTALL_DIR =	$(INSTALL_ROOT)@@libdir@@
d64 2
a65 8
# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR =	@@libdir@@

# Directory in which to install the program wish:
BIN_INSTALL_DIR =	$(INSTALL_ROOT)@@bindir@@

# Directory from which the program wish should be referenced by scripts:
BIN_DIR =		@@bindir@@
d68 1
a68 1
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)@@includedir@@
d71 1
a71 1
MAN_INSTALL_DIR =	$(INSTALL_ROOT)@@mandir@@
d93 3
d99 9
d117 4
a120 6
#TK_CFLAGS			= $(CFLAGS_DEBUG)
#TK_CFLAGS			= $(CFLAGS_OPTIMIZE)
#TK_CFLAGS			= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
TK_CFLAGS			= @@CFLAGS_DEFAULT@@

CFLAGS = @@CFLAGS@@
d151 4
a154 3
# lines.  Warning:  if you enable memory debugging, you must do it
# *everywhere*, including all the code that calls Tcl, and you must use
# ckalloc and ckfree everywhere instead of malloc and free.
d173 1
a173 1
SHELL = @@SHELL@@
d180 3
d185 1
d188 5
a192 5
# The following specifies which Tcl executable to use for make targets
# below.  This can generally be 'tclsh', meaning all targets will work
# once we have created the initial executable, but in some cases you
# may want to use a target without having made tclsh on these sources
# (like for make genstubs)
a194 1

d208 3
d217 3
d223 3
a225 2
TCL_BUILD_LIB_SPEC	= @@TCL_BUILD_LIB_SPEC@@

d233 2
a234 2
LIBS = @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@ -lc
WISH_LIBS = $(TCL_BUILD_LIB_SPEC) @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@ -lc
d240 1
a240 13
STLIB_LD = @@STLIB_LD@@
SHLIB_LD = @@SHLIB_LD@@
SHLIB_LD_LIBS = @@SHLIB_LD_LIBS@@

# CYGNUS LOCAL
# Defines for building libtk
SHLIB_SUFFIX = @@SHLIB_SUFFIX@@
TCL_SHARED_LIB_SUFFIX = @@TCL_SHARED_LIB_SUFFIX@@
TCL_UNSHARED_LIB_SUFFIX = @@TCL_UNSHARED_LIB_SUFFIX@@
TK_SHARED_LIB_FILE = @@TK_SHARED_LIB_FILE@@
TK_UNSHARED_LIB_FILE = @@TK_UNSHARED_LIB_FILE@@
# END CYGNUS LOCAL

d243 1
a243 1

d248 5
a252 2
TK_CC_SEARCH_FLAGS	= @@TK_CC_SEARCH_FLAGS@@
TK_LD_SEARCH_FLAGS	= @@TK_LD_SEARCH_FLAGS@@
d262 1
a262 1
TK_RANLIB		= @@RANLIB@@
d276 4
d282 1
a282 1
CC_SWITCHES_NO_STUBS = ${CFLAGS} ${TK_CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
d298 1
a298 3
TCLTEST_OBJS = ${TCL_BIN_DIR}/tclTest.o ${TCL_BIN_DIR}/tclThreadTest.o \
        ${TCL_BIN_DIR}/tclUnixTest.o
TKTEST_OBJS = $(TCLTEST_OBJS) tkTestInit.o tkTest.o tkSquare.o
d301 2
a302 2
	tkMenu.o tkMenubutton.o tkMenuDraw.o tkMessage.o tkScale.o \
	tkScrollbar.o
d325 1
a325 1
	tkSelect.o tkUtil.o tkVisual.o tkWindow.o  \
d345 2
a346 1
	$(GENERIC_DIR)/tkSelect.c $(GENERIC_DIR)/tkUtil.c \
d352 1
a352 1
	$(GENERIC_DIR)/tkMessage.c \
a391 5
INSTALL_HDRS = $(GENERIC_DIR)/tk.h  \
	$(GENERIC_DIR)/tkInt.h \
	$(GENERIC_DIR)/tkDecls.h \
	$(GENERIC_DIR)/tkIntXlibDecls.h

d396 1
a396 1
binaries: ${TK_LIB_FILE} ${STUB_LIB_FILE} wish
d408 2
a409 2
${TK_LIB_FILE}: ${OBJS}
	rm -f ${TK_LIB_FILE}
a410 1
	$(TK_RANLIB) ${TK_LIB_FILE}
d413 1
a413 1
	rm -f ${STUB_LIB_FILE}
a414 1
	$(TK_RANLIB) ${STUB_LIB_FILE}
d427 1
a427 1
wish: $(WISH_OBJS) $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) @@TCL_LIB_FULL_PATH@@
d430 7
a436 1
		$(WISH_LIBS) $(TK_CC_SEARCH_FLAGS) -o wish
d438 2
a439 5
# This rule is executed if the user tried to run tktest without first
# building tcltest in the Tcl bin directory. Just do it for them.
${TCL_BIN_DIR}/tcltest:
	cd ${TCL_BIN_DIR} ; \
	make tcltest
d441 1
a441 1
tktest: ${TCL_BIN_DIR}/tcltest $(TKTEST_OBJS) $(TK_LIB_FILE) @@TCL_LIB_FULL_PATH@@
d444 1
a444 1
		$(WISH_LIBS) $(TK_CC_SEARCH_FLAGS) -o tktest
d446 5
a450 1
xttest: test.o tkTest.o tkSquare.o $(TK_LIB_FILE) @@TCL_LIB_FULL_PATH@@
d453 1
a453 1
		$(WISH_LIBS) $(TK_LD_SEARCH_FLAGS) -lXt -o xttest
d458 3
a462 5
	LD_LIBRARY_PATH=`pwd`:${TCL_BIN_DIR}:${LD_LIBRARY_PATH}; \
	export LD_LIBRARY_PATH; \
	LIBPATH=`pwd`:${TCL_BIN_DIR}:${LIBPATH}; export LIBPATH; \
	SHLIB_PATH=`pwd`:${TCL_BIN_DIR}:${SHLIB_PATH}; \
	export SHLIB_PATH; \
d465 13
a477 1
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 $(TCLTESTARGS)
a480 4
	LD_LIBRARY_PATH=`pwd`:${TCL_BIN_DIR}:${LD_LIBRARY_PATH}; \
	export LD_LIBRARY_PATH; \
	LIBPATH=`pwd`:${TCL_BIN_DIR}:${LIBPATH}; export LIBPATH; \
	SHLIB_PATH=`pwd`:${TCL_BIN_DIR}:${SHLIB_PATH}; export SHLIB_PATH; \
d485 17
d504 5
d514 1
a514 1
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) ; \
d526 9
a534 2
	@@if test ! -x $(UNIX_DIR)/mkLinks; then \
	    chmod +x $(UNIX_DIR)/mkLinks; \
d536 3
a538 4
	@@echo "Installing $(TK_LIB_FILE) to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) $(TK_LIB_FILE) $(LIB_INSTALL_DIR)/$(TK_LIB_FILE)
	@@(cd $(LIB_INSTALL_DIR); $(TK_RANLIB) $(TK_LIB_FILE))
	@@chmod 555 $(LIB_INSTALL_DIR)/$(TK_LIB_FILE)
d547 5
a551 6
	    fi
	@@if test "$(TK_STUB_LIB_FILE)" != "" ; then \
	    echo "Installing $(TK_STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	    $(INSTALL_DATA) $(STUB_LIB_FILE) \
			 $(LIB_INSTALL_DIR)/$(TK_STUB_LIB_FILE); \
	    fi
d554 3
a556 2
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images; \
d569 2
a570 1
	@@for i in $(INSTALL_HDRS) ; \
d587 2
a588 5

# CYGNUS LOCAL: install-minimal target.
install-minimal:
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images; \
d590 3
a592 11
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	for i in $(SRC_DIR)/library/*.tcl $(SRC_DIR)/library/tclIndex $(SRC_DIR)/library/prolog.ps; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d596 1
a596 1
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(SCRIPT_INSTALL_DIR) \
d628 3
d646 1
a646 1
	    chmod 644 $(MAN1_INSTALL_DIR)/$$i; \
d649 1
a649 1
	@@$(UNIX_DIR)/mkLinks $(MAN1_INSTALL_DIR)
d656 1
a656 1
	    chmod 644 $(MAN3_INSTALL_DIR)/$$i; \
d659 1
a659 1
	@@$(UNIX_DIR)/mkLinks $(MAN3_INSTALL_DIR)
d666 1
a666 1
	    chmod 644 $(MANN_INSTALL_DIR)/$$i; \
d669 1
a669 1
	@@$(UNIX_DIR)/mkLinks $(MANN_INSTALL_DIR)
d671 1
a671 1
Makefile: $(UNIX_DIR)/Makefile.in config.status
a673 3
config.status: $(UNIX_DIR)/configure
	./config.status --recheck

d785 3
d821 3
d923 3
d1008 1
a1008 1
# Target to regenerate header files and stub files from the *.decls tables.
d1010 8
d1056 5
d1068 2
a1069 2
DISTNAME =	tk@@TK_VERSION@@@@TK_PATCH_LEVEL@@
ZIPNAME =	tk@@TK_MAJOR_VERSION@@@@TK_MINOR_VERSION@@@@TK_PATCH_LEVEL@@.zip
d1072 1
a1072 1
$(UNIX_DIR)/configure:
d1075 1
a1075 1
dist:   $(UNIX_DIR)/configure
d1082 2
a1083 2
	cp $(UNIX_DIR)/configure $(UNIX_DIR)/configure.in \
		$(UNIX_DIR)/aclocal.m4 \
d1085 1
a1085 1
		$(UNIX_DIR)/README $(DISTDIR)/unix
a1087 3
	$(TCL_EXE) $(TCLDIR)/unix/mkLinks.tcl $(TOP_DIR)/doc/*.[13n] \
		> $(DISTDIR)/unix/mkLinks
	chmod +x $(DISTDIR)/unix/mkLinks
d1108 1
a1108 1
		$(TOP_DIR)/win/aclocal.m4 \
d1112 1
d1114 3
d1118 1
d1121 1
d1125 2
a1134 1
	cp -p $(TOP_DIR)/mac/*.exp $(DISTDIR)/mac
d1136 7
d1163 6
d1201 3
a1203 6
	rm -f $(DISTROOT)/$(DISTNAME).tar.Z \
		$(DISTROOT)/$(DISTNAME).tar.gz \
		$(DISTROOT)/$(ZIPNAME)
	cd $(DISTROOT); tar cf $(DISTNAME).tar $(DISTNAME); \
		gzip -9 -c $(DISTNAME).tar > $(DISTNAME).tar.gz; \
		compress $(DISTNAME).tar; zip -qr8 $(ZIPNAME) $(DISTNAME)
d1214 1
a1214 3
	rm -f $(DISTROOT)/$(DISTNAME).tar.Z \
		$(DISTROOT)/$(DISTNAME).tar.gz \
		$(DISTROOT)/$(ZIPNAME)
d1217 2
a1218 3
	cd $(DISTROOT); tar cf $(DISTNAME).tar tk${VERSION}; \
		gzip -9 -c $(DISTNAME).tar > $(DISTNAME).tar.gz; \
		compress $(DISTNAME).tar; zip -r8 $(ZIPNAME) tk${VERSION}
a1319 1

@


1.6
log
@touched all sources to ease next import
@
text
@@


1.5
log
@2002-01-10  Keith Seitz  <keiths@@redhat.com>

	* unix/Makefile.in (TK_RANLIB): Renamed from just "RANLIB".
	Changed all references to "RANLIB" to "TK_RANLIB" so that
	toplevel Makefile doesn't override our own settings.
@
text
@@


1.4
log
@
	* Makefile.in: Fixed bad merge when installing
	../doc/*.n man files.
@
text
@d251 1
a251 1
RANLIB			= @@RANLIB@@
d402 1
a402 1
	$(RANLIB) ${TK_LIB_FILE}
d407 1
a407 1
	$(RANLIB) ${STUB_LIB_FILE}
d489 1
a489 1
	@@(cd $(LIB_INSTALL_DIR); $(RANLIB) $(TK_LIB_FILE))
@


1.3
log
@
	* Makefile.in: Added TK_CFLAGS for flags that
	shouldn't be supressed by the top level Makefile's
	CFLAGS settings.
@
text
@d624 2
a625 2
		    $$i > $(MAN3_INSTALL_DIR)/$$name; \
	    chmod 644 $(MAN3_INSTALL_DIR)/$$name; \
@


1.2
log
@touched all tk files to ease next import
@
text
@d106 6
a111 4
#CFLAGS			= $(CFLAGS_DEBUG)
#CFLAGS			= $(CFLAGS_OPTIMIZE)
#CFLAGS			= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS			= @@CFLAGS@@ @@CFLAGS_DEFAULT@@
d267 1
a267 1
CC_SWITCHES_NO_STUBS = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
# SCCS: @@(#) Makefile.in 1.146 97/11/05 11:10:45
d12 2
a13 2
TCLVERSION = @@TCL_VERSION@@
VERSION = @@TK_VERSION@@
d28 6
a33 2
prefix =		@@prefix@@
exec_prefix =		@@exec_prefix@@
d40 1
a40 1
INSTALL_ROOT =
d54 1
a54 1
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)$(TK_LIBRARY)
d75 1
a75 1
MAN1_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man1
d79 1
a79 1
MAN3_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man3
d83 1
a83 1
MANN_INSTALL_DIR =	$(MAN_INSTALL_DIR)/mann
d88 1
a88 1
TCL_GENERIC_DIR =	@@TCL_SRC_DIR@@/generic
d92 23
a114 1
TCL_BIN_DIR =		@@TCL_BIN_DIR@@
d120 1
a120 1
X11_INCLUDES =		@@XINCLUDES@@
d125 1
a125 1
X11_LIB_SWITCHES =	@@XLIBSW@@
a126 7
# Libraries to use when linking.  This definition is determined by the
# configure script.
LIBS = @@TCL_BUILD_LIB_SPEC@@ @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@ -lc

# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS = @@CFLAGS@@
d131 2
a132 2
SECURITY_FLAGS =
#SECURITY_FLAGS = -DTK_NO_SECURITY
d136 2
a137 2
PROTO_FLAGS =
#PROTO_FLAGS = -DNO_PROTOTYPE
d143 2
a144 2
MEM_DEBUG_FLAGS =
#MEM_DEBUG_FLAGS = -DTCL_MEM_DEBUG
d150 8
a157 2
KEYSYM_FLAGS =
#KEYSYM_FLAGS = -DREDO_KEYSYM_LOOKUP
d168 10
a177 3
INSTALL = @@srcdir@@/install-sh -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644
d185 7
a191 1
TK_SHLIB_CFLAGS = @@TK_SHLIB_CFLAGS@@
d193 2
a194 2
TK_LIB_FILE = @@TK_LIB_FILE@@
#TK_LIB_FILE = libtk.a
d196 2
a197 2
TK_LIB_FLAG = @@TK_LIB_FLAG@@
#TK_LIB_FLAG = -ltk
d199 14
a212 2
TCL_LIB_FLAG = @@TCL_LIB_FLAG@@
#TCL_LIB_FLAG = -ltcl
d218 1
d220 1
d229 5
d238 2
a239 2
TK_CC_SEARCH_FLAGS = @@TK_CC_SEARCH_FLAGS@@
TK_LD_SEARCH_FLAGS = @@TK_LD_SEARCH_FLAGS@@
d247 9
a255 8
AC_FLAGS =		@@DEFS@@
RANLIB =		@@RANLIB@@
SRC_DIR =		@@srcdir@@/..
TOP_DIR =		@@srcdir@@/..
GENERIC_DIR =		$(TOP_DIR)/generic
UNIX_DIR = 		@@srcdir@@
BMAP_DIR =		$(TOP_DIR)/bitmaps
TOOL_DIR =		@@TCL_SRC_DIR@@/tools
d263 1
d265 1
a265 2
CC =		@@CC@@
CC_SWITCHES =	${CFLAGS} ${CFLAGS_WARNING} ${TK_SHLIB_CFLAGS} \
d267 5
a271 2
-I${BMAP_DIR} -I${TCL_GENERIC_DIR} ${X11_INCLUDES} ${AC_FLAGS} ${PROTO_FLAGS} \
${SECURITY_FLAGS} ${MEM_DEBUG_FLAGS} ${KEYSYM_FLAGS}
d281 3
a283 1
TKTEST_OBJS = tkTestInit.o tkTest.o tkSquare.o
d298 7
a304 5
UNIXOBJS = tkUnix.o tkUnix3d.o tkUnixButton.o tkUnixColor.o tkUnixCursor.o \
	tkUnixDialog.o tkUnixDraw.o \
	tkUnixEmbed.o tkUnixEvent.o tkUnixFocus.o tkUnixFont.o tkUnixInit.o \
	tkUnixMenu.o tkUnixMenubu.o tkUnixScale.o tkUnixScrlbr.o \
	tkUnixSelect.o tkUnixSend.o tkUnixWm.o tkUnixXId.o
d307 1
a307 1
	tkColor.o tkConfig.o tkCursor.o tkError.o tkEvent.o \
d309 2
a310 2
	tkMain.o tkOption.o tkPack.o tkPlace.o \
	tkSelect.o tkUtil.o tkVisual.o tkWindow.o \
d313 4
d327 1
a327 1
	$(GENERIC_DIR)/tkGrid.c \
d332 1
a332 1
	$(GENERIC_DIR)/tkButton.c \
d352 1
d354 1
d358 1
d360 1
a360 1
	$(UNIX_DIR)/tkUnixDialog.c $(UNIX_DIR)/tkUnixDraw.c \
d364 1
d376 5
d383 3
a385 1
all: wish
d387 1
a387 1
# CYGNUS LOCAL
d389 3
a391 2
# The shared- and unshared-library cases are separate, so that RANLIB
# can unconditionally work.
d393 1
a393 3
${TK_SHARED_LIB_FILE}: ${OBJS}
	rm -f @@TK_LIB_FILE@@
	@@MAKE_LIB@@
d395 4
a398 2
${TK_UNSHARED_LIB_FILE}: ${OBJS}
	rm -f @@TK_LIB_FILE@@
d402 4
a405 1
# END CYGNUS LOCAL
d412 1
d418 20
a437 12
wish: $(WISH_OBJS) $(TK_LIB_FILE)
	$(CC) @@LD_FLAGS@@ $(WISH_OBJS) @@TK_BUILD_LIB_SPEC@@ $(LIBS) \
		$(TK_CC_SEARCH_FLAGS) -o wish

tktest: $(TKTEST_OBJS) $(TK_LIB_FILE)
	${CC} @@LD_FLAGS@@ $(TKTEST_OBJS) @@TK_BUILD_LIB_SPEC@@ $(LIBS) \
		$(TK_CC_SEARCH_FLAGS) -o tktest

xttest: test.o tkTest.o tkSquare.o $(TK_LIB_FILE)
	${CC} @@LD_FLAGS@@ test.o tkTest.o tkSquare.o \
		@@TK_BUILD_LIB_SPEC@@ $(LIBS) \
		@@TK_LD_SEARCH_FLAGS@@ -lXt -o xttest
d446 1
d450 2
a451 4
	TK_LIBRARY=$(TOP_DIR)/library; export TK_LIBRARY; \
	( echo cd $(TOP_DIR)/tests\; source all\; exit ) \
	| ./tktest -geometry +0+0

d454 1
a454 1
runtest:
d457 2
a458 2
	SHLIB_PATH=`pwd`:${TCL_BIN_DIR}:${SHLIB_PATH}; \
	export SHLIB_PATH; \
d460 1
a460 1
	TK_LIBRARY=$(TOP_DIR)/library; export TK_LIBRARY; \
d463 1
a463 1
install: install-binaries install-libraries install-demos install-man
d469 1
a469 1
install-binaries: $(TK_LIB_FILE) wish
d474 1
a474 1
		mkdir $$i; \
d479 7
a485 1
	@@echo "Installing $(TK_LIB_FILE)"
d489 3
a491 3
	@@echo "Installing wish"
	@@$(INSTALL_PROGRAM) wish $(BIN_INSTALL_DIR)/wish
	@@echo "Installing tkConfig.sh"
d493 10
d510 1
a510 1
		mkdir $$i; \
d515 11
a525 3
	@@echo "Installing tk.h"
	@@$(INSTALL_DATA) $(GENERIC_DIR)/tk.h $(INCLUDE_INSTALL_DIR)/tk.h
	for i in $(SRC_DIR)/library/*.tcl $(SRC_DIR)/library/tclIndex $(SRC_DIR)/library/prolog.ps $(UNIX_DIR)/tkAppInit.c; \
a526 1
	    echo "Installing $$i"; \
d529 2
a530 1
	for i in $(SRC_DIR)/library/images/*; \
a532 1
		echo "Installing $$i"; \
d562 1
a562 1
		mkdir $$i; \
d567 1
a570 1
		echo "Installing $$i"; \
d579 1
a582 1
		echo "Installing $$i"; \
d587 2
a588 2
install-man:
	@@for i in $(MAN_INSTALL_DIR) $(MAN1_INSTALL_DIR) $(MAN3_INSTALL_DIR) ; \
d592 1
a592 1
		mkdir $$i; \
d597 1
a599 1
	    echo "Installing doc/$$i"; \
d605 3
a607 1
	$(UNIX_DIR)/mkLinks $(MAN1_INSTALL_DIR)
a609 1
	    echo "Installing doc/$$i"; \
d615 3
d620 1
a620 3
	    echo "Installing doc/$$i"; \
	    rm -f $(MAN3_INSTALL_DIR)/$$i; \
	    name=`echo $$i | sed -e 's/n$$/3/'`; \
d625 2
a626 1
	$(UNIX_DIR)/mkLinks $(MAN3_INSTALL_DIR)
d640 1
a640 1
		SUNWtk.* prototype
d654 1
a654 1
	$(CC) -c $(CC_SWITCHES) -DTK_TEST $(UNIX_DIR)/tkAppInit.c
d661 3
a666 3
tkAppInit.o: $(UNIX_DIR)/tkAppInit.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkAppInit.c

d691 3
d727 6
d785 1
a785 1
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkSquare.c
d839 1
a839 1
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkTest.c
d865 12
d889 3
a894 3
tkUnixDialog.o: $(UNIX_DIR)/tkUnixDialog.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixDialog.c

d914 3
d959 40
d1015 1
a1015 1
	mkdir $(DISTDIR)
d1021 1
a1022 1
		$(UNIX_DIR)/porting.notes $(UNIX_DIR)/porting.old \
d1026 1
a1026 1
	tclsh $(TCLDIR)/unix/mkLinks.tcl $(TOP_DIR)/doc/*.[13n] \
d1037 3
a1039 1
	cp -p $(GENERIC_DIR)/*.c $(GENERIC_DIR)/*.h $(DISTDIR)/generic
d1041 2
a1042 2
	cp -p $(TOP_DIR)/changes $(TOP_DIR)/README $(TOP_DIR)/license.terms \
		$(DISTDIR)
d1045 6
d1061 1
a1061 4
	sccs edit -s $(TOP_DIR)/mac/tkMacProjects.sea.hqx
	cp -p tkMacProjects.sea.hqx $(DISTDIR)/mac
	sccs unedit $(TOP_DIR)/mac/tkMacProjects.sea.hqx
	rm -f tkMacProjects.sea.hqx
d1082 1
a1082 1
		$(TOP_DIR)/library/tclIndex $(TOP_DIR)/library/prolog.ps \
d1113 2
a1114 4
		$(TOP_DIR)/tests/visual $(TOP_DIR)/tests/*.tcl \
		$(TOP_DIR)/tests/README $(TOP_DIR)/tests/all \
		$(TOP_DIR)/tests/defs $(TOP_DIR)/tests/option.file* \
		$(DISTDIR)/tests
d1127 1
a1127 1
		compress $(DISTNAME).tar; zip -r8 $(ZIPNAME) $(DISTNAME)
d1158 1
a1158 1
	tclsh $(TOOL_DIR)/man2html.tcl $(DISTDIR)/tmp ../.. tk$(VERSION)
d1162 1
a1162 1
	tclsh $(TOOL_DIR)/cvtEOL.tcl $(DISTDIR)
d1210 1
a1210 1
	$(MAKE) install-libraries install-man \
d1240 1
a1240 1
	| tclsh $(TCLDIR)/unix/mkProto.tcl $(TCLVERSION) \
d1247 1
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.9.6.8 2001/08/07 02:18:46 mdejong Exp $
d12 2
a13 2
TCLVERSION		= @@TCL_VERSION@@
VERSION			= @@TK_VERSION@@
d28 2
a29 6
prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@
d36 1
a36 1
INSTALL_ROOT		=
d50 1
a50 1
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)/$(TK_LIBRARY)
d71 1
a71 1
MAN1_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man1
d75 1
a75 1
MAN3_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man3
d79 1
a79 1
MANN_INSTALL_DIR	= $(MAN_INSTALL_DIR)/mann
d84 1
a84 1
TCL_GENERIC_DIR		= @@TCL_SRC_DIR@@/generic
d88 1
a88 23
TCL_BIN_DIR		= @@TCL_BIN_DIR@@

# Libraries built with optimization switches have this additional extension
TK_DBGX			= @@TK_DBGX@@

# warning flags
CFLAGS_WARNING		= @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG		= @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE		= @@CFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS			= $(CFLAGS_DEBUG)
#CFLAGS			= $(CFLAGS_OPTIMIZE)
#CFLAGS			= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS			= @@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Flags to pass to the linker
LDFLAGS_DEBUG		= @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE	= @@LDFLAGS_OPTIMIZE@@
LDFLAGS			= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@
d94 1
a94 1
X11_INCLUDES		= @@XINCLUDES@@
d99 1
a99 1
X11_LIB_SWITCHES	= @@XLIBSW@@
d101 7
d112 2
a113 2
SECURITY_FLAGS		=
#SECURITY_FLAGS		= -DTK_NO_SECURITY
d117 2
a118 2
PROTO_FLAGS		=
#PROTO_FLAGS		= -DNO_PROTOTYPE
d124 2
a125 2
MEM_DEBUG_FLAGS		=
#MEM_DEBUG_FLAGS	= -DTCL_MEM_DEBUG
d131 2
a132 8
KEYSYM_FLAGS		=
#KEYSYM_FLAGS		= -DREDO_KEYSYM_LOOKUP

# Tk does not used deprecated Tcl constructs so it should
# compile fine with -DTCL_NO_DEPRECATED. To remove its own
# set of deprecated code uncomment the second line.
NO_DEPRECATED_FLAGS	= -DTCL_NO_DEPRECATED
#NO_DEPRECATED_FLAGS	= -DTCL_NO_DEPRECATED -DTK_NO_DEPRECATED
d143 3
a145 10
INSTALL			= @@srcdir@@/install-sh -c
INSTALL_PROGRAM		= ${INSTALL}
INSTALL_DATA		= ${INSTALL} -m 644

# The following specifies which Tcl executable to use for make targets
# below.  This can generally be 'tclsh', meaning all targets will work
# once we have created the initial executable, but in some cases you
# may want to use a target without having made tclsh on these sources
# (like for make genstubs)
TCL_EXE			= tclsh
d153 1
a153 7
SHLIB_CFLAGS		= @@SHLIB_CFLAGS@@

# To enable support for stubs in Tcl.
STUB_LIB_FILE		= @@TK_STUB_LIB_FILE@@

TK_STUB_LIB_FILE	= @@TK_STUB_LIB_FILE@@
#TK_STUB_LIB_FILE	= libtkstub.a
d155 2
a156 2
TK_STUB_LIB_FLAG	= @@TK_STUB_LIB_FLAG@@
#TK_STUB_LIB_FLAG	= -ltkstub
d158 2
a159 2
TK_LIB_FILE		= @@TK_LIB_FILE@@
#TK_LIB_FILE		= libtk.a
d161 2
a162 14
TK_LIB_FLAG		= @@TK_LIB_FLAG@@
#TK_LIB_FLAG		= -ltk

TCL_BUILD_LIB_SPEC	= @@TCL_BUILD_LIB_SPEC@@

TK_EXP_FILE		= @@TK_EXP_FILE@@
TK_BUILD_EXP_FILE	= @@TK_BUILD_EXP_FILE@@

TCL_STUB_FLAGS		= @@TCL_STUB_FLAGS@@

# Libraries to use when linking.  This definition is determined by the
# configure script.
LIBS = @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@ -lc
WISH_LIBS = $(TCL_BUILD_LIB_SPEC) @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@ -lc
a167 1
STLIB_LD = @@STLIB_LD@@
a168 1
SHLIB_LD_LIBS = @@SHLIB_LD_LIBS@@
a176 5
# END CYGNUS LOCAL

SHLIB_LD		= @@SHLIB_LD@@
SHLIB_LD_LIBS		= @@SHLIB_LD_LIBS@@

d181 2
a182 2
TK_CC_SEARCH_FLAGS	= @@TK_CC_SEARCH_FLAGS@@
TK_LD_SEARCH_FLAGS	= @@TK_LD_SEARCH_FLAGS@@
d190 8
a197 9
AC_FLAGS		= @@EXTRA_CFLAGS@@ @@DEFS@@
AR			= @@AR@@
RANLIB			= @@RANLIB@@
SRC_DIR			= @@srcdir@@/..
TOP_DIR			= @@srcdir@@/..
GENERIC_DIR		= $(TOP_DIR)/generic
UNIX_DIR		= @@srcdir@@
BMAP_DIR		= $(TOP_DIR)/bitmaps
TOOL_DIR		= @@TCL_SRC_DIR@@/tools
a204 1
CC			= @@CC@@
d206 2
a207 1
CC_SWITCHES_NO_STUBS = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
d209 2
a210 5
-I${BMAP_DIR} -I${TCL_GENERIC_DIR} ${X11_INCLUDES} \
${AC_FLAGS} ${PROTO_FLAGS} \
${SECURITY_FLAGS} ${MEM_DEBUG_FLAGS} ${KEYSYM_FLAGS} ${NO_DEPRECATED_FLAGS}

CC_SWITCHES = ${CC_SWITCHES_NO_STUBS} ${TCL_STUB_FLAGS} 
d220 1
a220 3
TCLTEST_OBJS = ${TCL_BIN_DIR}/tclTest.o ${TCL_BIN_DIR}/tclThreadTest.o \
        ${TCL_BIN_DIR}/tclUnixTest.o
TKTEST_OBJS = $(TCLTEST_OBJS) tkTestInit.o tkTest.o tkSquare.o
d235 5
a239 7
UNIXOBJS = tkUnix.o tkUnix3d.o tkUnixButton.o tkUnixColor.o tkUnixConfig.o \
	tkUnixCursor.o tkUnixDraw.o tkUnixEmbed.o tkUnixEvent.o \
	tkUnixFocus.o tkUnixFont.o tkUnixInit.o tkUnixKey.o tkUnixMenu.o \
	tkUnixMenubu.o tkUnixScale.o tkUnixScrlbr.o tkUnixSelect.o \
	tkUnixSend.o tkUnixWm.o tkUnixXId.o tkStubInit.o tkStubLib.o

STUB_LIB_OBJS = tkStubLib.o tkStubImg.o
d242 1
a242 1
	tkColor.o tkConfig.o tkConsole.o tkCursor.o tkError.o tkEvent.o \
d244 2
a245 2
	tkMain.o tkObj.o tkOldConfig.o tkOption.o tkPack.o tkPlace.o \
	tkSelect.o tkUtil.o tkVisual.o tkWindow.o  \
a247 4
TK_DECLS = \
	$(GENERIC_DIR)/tk.decls \
	$(GENERIC_DIR)/tkInt.decls

d258 1
a258 1
	$(GENERIC_DIR)/tkGrid.c $(GENERIC_DIR)/tkConsole.c \
d263 1
a263 1
	$(GENERIC_DIR)/tkButton.c $(GENERIC_DIR)/tkObj.c \
a282 1
	$(GENERIC_DIR)/tkOldConfig.c \
a283 1
	$(GENERIC_DIR)/tkStubInit.c $(GENERIC_DIR)/tkStubLib.c \
a286 1
	$(UNIX_DIR)/tkUnixConfig.c \
d288 1
a288 1
	$(UNIX_DIR)/tkUnixDraw.c \
a291 1
	$(UNIX_DIR)/tkUnixKey.c \
a302 5
INSTALL_HDRS = $(GENERIC_DIR)/tk.h  \
	$(GENERIC_DIR)/tkInt.h \
	$(GENERIC_DIR)/tkDecls.h \
	$(GENERIC_DIR)/tkIntXlibDecls.h

d305 1
a305 1
all: binaries libraries doc
d307 1
a307 1
binaries: ${TK_LIB_FILE} ${STUB_LIB_FILE} wish
d309 2
a310 1
libraries:
d312 3
a314 5
$(SRC_DIR)/doc/man.macros:
	chmod +x $(UNIX_DIR)/install-sh
	$(INSTALL_DATA) @@TCL_SRC_DIR@@/doc/man.macros $(SRC_DIR)/doc/man.macros

doc: $(SRC_DIR)/doc/man.macros
d316 2
a317 4
# The following target is configured by autoconf to generate either
# a shared library or non-shared library for Tk.
${TK_LIB_FILE}: ${OBJS}
	rm -f ${TK_LIB_FILE}
d321 1
a321 4
${STUB_LIB_FILE}: ${STUB_LIB_OBJS}
	rm -f ${STUB_LIB_FILE}
	@@MAKE_STUB_LIB@@
	$(RANLIB) ${STUB_LIB_FILE}
a327 1

d333 12
a344 20
wish: $(WISH_OBJS) $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) @@TCL_LIB_FULL_PATH@@
	$(CC) $(LDFLAGS) $(WISH_OBJS) \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(TK_CC_SEARCH_FLAGS) -o wish

# This rule is executed if the user tried to run tktest without first
# building tcltest in the Tcl bin directory. Just do it for them.
${TCL_BIN_DIR}/tcltest:
	cd ${TCL_BIN_DIR} ; \
	make tcltest

tktest: ${TCL_BIN_DIR}/tcltest $(TKTEST_OBJS) $(TK_LIB_FILE) @@TCL_LIB_FULL_PATH@@
	${CC} $(LDFLAGS) $(TKTEST_OBJS) \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(TK_CC_SEARCH_FLAGS) -o tktest

xttest: test.o tkTest.o tkSquare.o $(TK_LIB_FILE) @@TCL_LIB_FULL_PATH@@
	${CC} $(LDFLAGS) test.o tkTest.o tkSquare.o \
		@@TK_BUILD_LIB_SPEC@@ \
		$(WISH_LIBS) $(TK_LD_SEARCH_FLAGS) -lXt -o xttest
a352 1
	LIBPATH=`pwd`:${TCL_BIN_DIR}:${LIBPATH}; export LIBPATH; \
d356 4
a359 2
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 $(TCLTESTARGS)
d362 1
a362 1
runtest: tktest
d365 2
a366 2
	LIBPATH=`pwd`:${TCL_BIN_DIR}:${LIBPATH}; export LIBPATH; \
	SHLIB_PATH=`pwd`:${TCL_BIN_DIR}:${SHLIB_PATH}; export SHLIB_PATH; \
d368 1
a368 1
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
d371 1
a371 1
install: all install-binaries install-libraries install-demos install-doc
d377 1
a377 1
install-binaries: $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) $(TK_BUILD_EXP_FILE) wish
d382 1
a382 1
		mkdir -p $$i; \
d387 1
a387 7
	@@if test ! -x $(UNIX_DIR)/install-sh; then \
	    chmod +x $(UNIX_DIR)/install-sh; \
	    fi
	@@if test ! -x $(UNIX_DIR)/mkLinks; then \
	    chmod +x $(UNIX_DIR)/mkLinks; \
	    fi
	@@echo "Installing $(TK_LIB_FILE) to $(LIB_INSTALL_DIR)/"
d391 3
a393 3
	@@echo "Installing wish as $(BIN_INSTALL_DIR)/wish$(VERSION)"
	@@$(INSTALL_PROGRAM) wish $(BIN_INSTALL_DIR)/wish$(VERSION)
	@@echo "Installing tkConfig.sh to $(LIB_INSTALL_DIR)/"
a394 10
	@@if test "$(TK_BUILD_EXP_FILE)" != ""; then \
	    echo "Installing $(TK_EXP_FILE) to $(LIB_INSTALL_DIR)/"; \
	    $(INSTALL_DATA) $(TK_BUILD_EXP_FILE) \
			$(LIB_INSTALL_DIR)/$(TK_EXP_FILE); \
	    fi
	@@if test "$(TK_STUB_LIB_FILE)" != "" ; then \
	    echo "Installing $(TK_STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	    $(INSTALL_DATA) $(STUB_LIB_FILE) \
			 $(LIB_INSTALL_DIR)/$(TK_STUB_LIB_FILE); \
	    fi
d402 1
a402 1
		mkdir -p $$i; \
d407 3
a409 11
	@@if test ! -x $(UNIX_DIR)/install-sh; then \
	    chmod +x $(UNIX_DIR)/install-sh; \
	    fi
	@@echo "Installing header files";
	@@for i in $(INSTALL_HDRS) ; \
	    do \
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR); \
	    done;
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(SRC_DIR)/library/*.tcl $(GENERIC_DIR)/prolog.ps \
	        $(SRC_DIR)/library/tclIndex $(UNIX_DIR)/tkAppInit.c; \
d411 1
d414 1
a414 2
	@@echo "Installing library images directory";
	@@for i in $(SRC_DIR)/library/images/*; \
d417 1
d447 1
a447 1
		mkdir -p $$i; \
a451 1
	@@echo "Installing demos to $(SCRIPT_INSTALL_DIR)/demos/";
d455 1
a463 1
	@@echo "Installing demo images";
d467 1
d472 2
a473 2
install-doc:
	@@for i in $(MAN_INSTALL_DIR) $(MAN1_INSTALL_DIR) $(MAN3_INSTALL_DIR) $(MANN_INSTALL_DIR) ; \
d477 1
a477 1
		mkdir -p $$i; \
a481 1
	@@echo "Installing top-level (.1) docs";
d484 1
d490 1
a490 3
	@@echo "Cross-linking top-level (.1) docs";
	@@$(UNIX_DIR)/mkLinks $(MAN1_INSTALL_DIR)
	@@echo "Installing C API (.3) docs";
d493 1
a498 3
	@@echo "Cross-linking top-level (.3) docs";
	@@$(UNIX_DIR)/mkLinks $(MAN3_INSTALL_DIR)
	@@echo "Installing command (.n) docs";
d501 3
a503 1
	    rm -f $(MANN_INSTALL_DIR)/$$i; \
d508 1
a508 2
	@@echo "Cross-linking command (.n) docs";
	@@$(UNIX_DIR)/mkLinks $(MANN_INSTALL_DIR)
d522 1
a522 1
		$(PACKAGE).* prototype
d536 1
a536 1
	$(CC) -c $(CC_SWITCHES_NO_STUBS) -DTK_TEST $(UNIX_DIR)/tkAppInit.c
a542 3
tkAppInit.o: $(UNIX_DIR)/tkAppInit.c
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(UNIX_DIR)/tkAppInit.c

d546 3
a572 3
tkConsole.o: $(GENERIC_DIR)/tkConsole.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkConsole.c

a605 6
tkObj.o: $(GENERIC_DIR)/tkObj.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkObj.c

tkOldConfig.o: $(GENERIC_DIR)/tkOldConfig.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkOldConfig.c

d658 1
a658 1
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(GENERIC_DIR)/tkSquare.c
d712 1
a712 1
	$(CC) -c $(CC_SWITCHES_NO_STUBS) $(GENERIC_DIR)/tkTest.c
a737 12
tkStubInit.o: $(GENERIC_DIR)/tkStubInit.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubInit.c

# Stub library binaries, these must be compiled for use in a shared library
# even though they will be placed in a static archive

tkStubLib.o: $(GENERIC_DIR)/tkStubLib.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubLib.c

tkStubImg.o: $(GENERIC_DIR)/tkStubImg.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStubImg.c

a749 3
tkUnixConfig.o: $(UNIX_DIR)/tkUnixConfig.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixConfig.c

d753 3
a774 3
tkUnixKey.o: $(UNIX_DIR)/tkUnixKey.c
	$(CC) -c $(CC_SWITCHES) $(UNIX_DIR)/tkUnixKey.c

a816 40
# Target to regenerate header files and stub files from the *.decls tables.
#

genstubs:
	$(TCL_EXE) $(TOOL_DIR)/genStubs.tcl $(GENERIC_DIR) \
		$(GENERIC_DIR)/tk.decls $(GENERIC_DIR)/tkInt.decls

#
# Target to check that all exported functions have an entry in the stubs
# tables.
#

checkstubs:
	-@@for i in `nm -p $(TK_LIB_FILE) | awk '$$2 ~ /T/ { print $$3 }' \
		| sort -n`; do \
		match=0; \
		for j in $(TK_DECLS); do \
		    if [ `grep -c $$i $$j` -gt 0 ]; then \
			match=1; \
		    fi; \
		done; \
		if [ $$match -eq 0 ]; then echo $$i; fi \
	done


#
# Target to create a Tk RPM for Linux.  Requires that you be on a Linux
# system.
#

rpm: all /bin/rpm
	rm -f THIS.TCL.SPEC
	echo "%define _builddir `pwd`" > THIS.TK.SPEC
	echo "%define _rpmdir `pwd`/RPMS" >> THIS.TK.SPEC
	cat tk.spec >> THIS.TK.SPEC
	mkdir -p RPMS/i386
	rpm -bb THIS.TK.SPEC
	mv RPMS/i386/*.rpm .
	rm -rf RPMS THIS.TK.SPEC

d833 1
a833 1
	mkdir -p $(DISTDIR)
a838 1
		$(UNIX_DIR)/aclocal.m4 \
d840 1
d844 1
a844 1
	$(TCL_EXE) $(TCLDIR)/unix/mkLinks.tcl $(TOP_DIR)/doc/*.[13n] \
d855 1
a855 3
	cp -p $(GENERIC_DIR)/*.c $(GENERIC_DIR)/*.h $(GENERIC_DIR)/prolog.ps \
		$(DISTDIR)/generic
	cp -p $(GENERIC_DIR)/*.decls $(DISTDIR)/generic
d857 2
a858 2
	cp -p $(TOP_DIR)/changes $(TOP_DIR)/ChangeLog $(TOP_DIR)/README \
		$(TOP_DIR)/license.terms $(DISTDIR)
a860 6
	cp $(TOP_DIR)/win/Makefile.in $(DISTDIR)/win
	cp $(TOP_DIR)/win/configure.in \
		$(TOP_DIR)/win/configure \
		$(TOP_DIR)/win/tkConfig.sh.in \
		$(TOP_DIR)/win/aclocal.m4 \
		$(DISTDIR)/win
d871 4
a874 1
	cp -p $(TOP_DIR)/mac/tkMacProjects.sea.hqx $(DISTDIR)/mac
d895 1
a895 1
		$(TOP_DIR)/library/tclIndex \
d926 4
a929 2
		$(TOP_DIR)/tests/*.tcl $(TOP_DIR)/tests/README \
		$(TOP_DIR)/tests/option.file* $(DISTDIR)/tests
d942 1
a942 1
		compress $(DISTNAME).tar; zip -qr8 $(ZIPNAME) $(DISTNAME)
d973 1
a973 1
	$(TCL_EXE) $(TOOL_DIR)/man2html.tcl $(DISTDIR)/tmp ../.. tk$(VERSION)
d977 1
a977 1
	$(TCL_EXE) $(TOOL_DIR)/cvtEOL.tcl $(DISTDIR)
d1025 1
a1025 1
	$(MAKE) install-libraries install-doc \
d1055 1
a1055 1
	| $(TCL_EXE) $(TCLDIR)/unix/mkProto.tcl $(TCLVERSION) \
a1061 1

@


1.1.1.3
log
@import tk 8.4.0
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.82 2002/09/10 09:59:15 das Exp $
a13 4
MAJOR_VERSION		= @@TK_MAJOR_VERSION@@
MINOR_VERSION		= @@TK_MINOR_VERSION@@
PATCH_LEVEL		= @@TK_PATCH_LEVEL@@
LOCALES			= @@LOCALES@@
d45 13
a57 1
TK_LIBRARY		= $(prefix)/lib/tk$(VERSION)
d60 1
a60 1
LIB_RUNTIME_DIR		= $(libdir)
d63 1
a63 4
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)

# Directory in which to install the .a or .so binary for the Tk library:
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)
d65 2
a66 2
# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TK_LIBRARY)
d69 1
a69 1
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)
d72 1
a72 1
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)
a93 3
# The linker flags needed to link in the Tcl library (ex: -ltcl8.2)
TCL_LIB_FLAG		= @@TCL_LIB_FLAG@@

a96 9
# Flag, 1: we're building a shared lib, 0 we're not
TK_SHARED_BUILD		= @@TK_SHARED_BUILD@@

# Directory in which to install the pkgIndex.tcl file for loadable Tk
PKG_INSTALL_DIR		= $(LIB_INSTALL_DIR)/tk$(VERSION)$(TK_DBGX)

# Package index file for loadable Tk
PKG_INDEX		= $(PKG_INSTALL_DIR)/pkgIndex.tcl

d161 1
a161 1
SHELL			= /bin/sh
a169 1
INSTALL_LIBRARY		= ${INSTALL}
d172 5
a176 5
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
d179 1
a192 3
# Generic stub lib name used in rules that apply to tcl and tk
STUB_LIB_FILE		= ${TK_STUB_LIB_FILE}

a198 3
# Generic lib name used in rules that apply to tcl and tk
LIB_FILE		= ${TK_LIB_FILE}

d202 2
a203 3
TCL_LIB_SPEC		= @@TCL_LIB_SPEC@@
TCL_STUB_LIB_SPEC	= @@TCL_STUB_LIB_SPEC@@
TCL_STUB_LIB_FLAG	= @@TCL_STUB_LIB_FLAG@@
d211 2
a212 2
LIBS = @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@
WISH_LIBS = $(TCL_LIB_SPEC) @@LIBS@@ $(X11_LIB_SWITCHES) @@DL_LIBS@@ @@MATH_LIBS@@
d218 13
a230 1
STLIB_LD		= @@STLIB_LD@@
d233 1
a233 1
TK_SHLIB_LD_EXTRAS	= @@TK_SHLIB_LD_EXTRAS@@
d238 2
a239 5
CC_SEARCH_FLAGS	= @@CC_SEARCH_FLAGS@@
LD_SEARCH_FLAGS	= @@LD_SEARCH_FLAGS@@

# support for embedded libraries on Darwin / Mac OS X
DYLIB_INSTALL_DIR	= ${LIB_RUNTIME_DIR}
a262 4
# Flags to be passed to mkLinks to control whether the manpages
# should be compressed and linked with softlinks
MKLINKS_FLAGS           = @@MKLINKS_FLAGS@@

d281 3
a283 1
TKTEST_OBJS = tkTestInit.o tkTest.o tkSquare.o
d286 2
a287 2
	tkMenu.o tkMenubutton.o tkMenuDraw.o tkMessage.o \
	tkPanedWindow.o tkScale.o tkScrollbar.o
d310 1
a310 1
	tkSelect.o tkStyle.o tkUndo.o tkUtil.o tkVisual.o tkWindow.o  \
d330 1
a330 2
	$(GENERIC_DIR)/tkSelect.c $(GENERIC_DIR)/tkStyle.c \
	$(GENERIC_DIR)/tkUndo.c $(GENERIC_DIR)/tkUtil.c \
d336 1
a336 1
	$(GENERIC_DIR)/tkMessage.c $(GENERIC_DIR)/tkPanedWindow.c \
d376 5
d385 1
a385 1
binaries: ${LIB_FILE} ${STUB_LIB_FILE} wish
d397 2
a398 2
${LIB_FILE}: ${OBJS}
	rm -f $@@
d400 1
d403 1
a403 1
	rm -f $@@
d405 1
d418 1
a418 1
wish: $(WISH_OBJS) $(TK_LIB_FILE) $(TK_STUB_LIB_FILE)
d421 1
a421 7
		$(WISH_LIBS) $(CC_SEARCH_FLAGS) -o wish

# Resetting the LIB_RUNTIME_DIR below is required so that
# the generated tktest executable gets the build directory
# burned into its ld search path. This keeps tktest from
# picking up an already installed version of the Tcl or
# Tk shared libraries.
d423 5
a427 2
tktest: $(TKTEST_OBJS) $(TK_LIB_FILE)
	$(MAKE) tktest-real LIB_RUNTIME_DIR=`pwd`:$(TCL_BIN_DIR)
d429 1
a429 1
tktest-real:
d432 1
a432 1
		$(WISH_LIBS) $(CC_SEARCH_FLAGS) -o tktest
d434 1
a434 5
# FIXME: This xttest rule seems to be broken in a number of ways.
# It should use CC_SEARCH_FLAGS, it does not include the shared
# lib location logic from tktest, and it is not clear where this
# test.o object file comes from.
xttest: test.o tkTest.o tkSquare.o $(TK_LIB_FILE)
d437 1
a437 1
		$(WISH_LIBS) $(LD_SEARCH_FLAGS) -lXt -o xttest
a441 3
# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d444 5
d451 1
a451 13
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 \
	$(TESTFLAGS) $(TCLTESTARGS)

# Tests with different languages
testlang: tktest
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	for lang in $(LOCALES) ;  \
	do \
	LANG=$(lang); export LANG; \
	./tktest $(TOP_DIR)/tests/all.tcl -geometry +0+0 \
	$(TESTFLAGS) $(TCLTESTARGS); \
	done
d455 4
a462 17
# This target can be used to run wish from the build directory
# via `make shell` or `make shell SCRIPT=/tmp/foo.tcl`
shell: wish
	@@LD_LIBRARY_PATH_VAR@@=`pwd`:${TCL_BIN_DIR}:${@@LD_LIBRARY_PATH_VAR@@}; \
	export @@LD_LIBRARY_PATH_VAR@@; \
	TCL_LIBRARY=@@TCL_SRC_DIR@@/library; export TCL_LIBRARY; \
	TK_LIBRARY=@@TK_SRC_DIR@@/library; export TK_LIBRARY; \
	./wish $(SCRIPT)

# This target can be used to run wish inside either gdb or insight
gdb: wish
	@@echo "set env @@LD_LIBRARY_PATH_VAR@@=`pwd`:${TCL_BIN_DIR}:${@@LD_LIBRARY_PATH_VAR@@}" > gdb.run
	@@echo "set env TCL_LIBRARY=@@TCL_SRC_DIR@@/library" >> gdb.run
	@@echo "set env TK_LIBRARY=@@TK_SRC_DIR@@/library" >> gdb.run
	gdb ./wish --command=gdb.run
	rm gdb.run

d470 1
a470 1
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) $(PKG_INSTALL_DIR); \
d482 2
a483 9
	@@if test "x$(TK_SHARED_BUILD)" = "x1"; then \
	    echo "Creating package index $(PKG_INDEX)"; \
	    rm -f $(PKG_INDEX); \
	    (\
	    echo "if {[package vcompare [package provide Tcl]\
		$(TCLVERSION)] != 0} { return }";\
	    echo "package ifneeded Tk $(VERSION)\
		[list load [file join \$$dir .. $(TK_LIB_FILE)] Tk]";\
	    ) > $(PKG_INDEX); \
d485 4
a488 3
	@@echo "Installing $(LIB_FILE) to $(LIB_INSTALL_DIR)/"
	@@@@INSTALL_LIB@@
	@@chmod 555 $(LIB_INSTALL_DIR)/$(LIB_FILE)
d497 6
a502 5
	fi
	@@if test "$(STUB_LIB_FILE)" != "" ; then \
	    echo "Installing $(STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	    @@INSTALL_STUB_LIB@@ ; \
	fi
d505 2
a506 3
	@@for i in $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images \
		$(SCRIPT_INSTALL_DIR)/msgs; \
d519 1
a519 2
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkDecls.h \
		$(GENERIC_DIR)/tkPlatDecls.h ; \
d536 5
a540 2
	@@echo "Installing translation directory";
	@@for i in $(SRC_DIR)/library/msgs/*.msg; \
d542 11
a552 3
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/msgs; \
	    fi; \
d556 1
a556 1
	@@for i in $(SCRIPT_INSTALL_DIR) \
a587 3
	@@if test ! -x $(UNIX_DIR)/mkLinks; then \
	    chmod +x $(UNIX_DIR)/mkLinks; \
	    fi
d603 1
a603 1
	    chmod 444 $(MAN1_INSTALL_DIR)/$$i; \
d606 1
a606 1
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MAN1_INSTALL_DIR)
d613 1
a613 1
	    chmod 444 $(MAN3_INSTALL_DIR)/$$i; \
d616 1
a616 1
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MAN3_INSTALL_DIR)
d622 2
a623 2
		    $$i > $(MANN_INSTALL_DIR)/$$i; \
	    chmod 444 $(MANN_INSTALL_DIR)/$$i; \
d626 1
a626 1
	@@$(UNIX_DIR)/mkLinks $(MKLINKS_FLAGS) $(MANN_INSTALL_DIR)
d628 1
a628 1
Makefile: $(UNIX_DIR)/Makefile.in
d631 3
a744 3
tkStyle.o: $(GENERIC_DIR)/tkStyle.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkStyle.c

a777 3
tkPanedWindow.o: $(GENERIC_DIR)/tkPanedWindow.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkPanedWindow.c

a876 3
tkUndo.o: $(GENERIC_DIR)/tkUndo.c
	$(CC) -c $(CC_SWITCHES) $(GENERIC_DIR)/tkUndo.c

d959 1
a959 3

#
# Regenerate the stubs files.
a961 6
$(GENERIC_DIR)/tkStubInit.c: $(GENERIC_DIR)/tk.decls \
		$(GENERIC_DIR)/tkInt.decls
	@@echo "Warning: tkStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"

a998 5
mklinks:
	$(TCL_EXE) $(TCLDIR)/unix/mkLinks.tcl \
		$(UNIX_DIR)/../doc/*.[13n] > $(UNIX_DIR)/mkLinks
	chmod +x $(UNIX_DIR)/mkLinks

d1006 2
a1007 2
DISTNAME =	tk${VERSION}${PATCH_LEVEL}
ZIPNAME =	tk${MAJOR_VERSION}${MINOR_VERSION}${PATCH_LEVEL}.zip
d1010 1
a1010 1
$(UNIX_DIR)/configure: $(UNIX_DIR)/configure.in
d1013 1
a1013 1
dist:   $(UNIX_DIR)/configure mklinks
d1020 2
a1021 2
	cp $(UNIX_DIR)/configure $(UNIX_DIR)/configure.in $(UNIX_DIR)/tk.spec \
		$(UNIX_DIR)/aclocal.m4 $(UNIX_DIR)/tcl.m4 \
d1023 1
a1023 1
		$(UNIX_DIR)/README $(UNIX_DIR)/mkLinks $(DISTDIR)/unix
d1026 3
d1049 1
a1049 1
		$(TOP_DIR)/win/aclocal.m4 $(TOP_DIR)/win/tcl.m4 \
a1052 1
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/*.bat
a1053 3
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/makefile.*
	cp -p $(TOP_DIR)/win/rules.vc $(DISTDIR)/win
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rules.vc
a1054 1
	cp -p $(TOP_DIR)/win/lamp.bmp $(DISTDIR)/win
a1056 1
	cp -p $(TOP_DIR)/win/rc/wish.exe.manifest $(DISTDIR)/win/rc/
a1059 2
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rc/*.rc
	$(TCL_EXE) $(TOOL_DIR)/eolFix.tcl -crlf $(DISTDIR)/win/rc/wish.exe.manifest
d1068 1
a1069 7
	mkdir $(DISTDIR)/macosx
	cp -p $(TOP_DIR)/macosx/Makefile $(TOP_DIR)/macosx/Wish.icns \
		$(TOP_DIR)/macosx/*.c $(TOP_DIR)/macosx/*.h \
		$(TOP_DIR)/macosx/*.r $(DISTDIR)/macosx
	mkdir $(DISTDIR)/macosx/Wish.pbproj
	cp -p $(TOP_DIR)/macosx/Wish.pbproj/*.pbx* \
		$(DISTDIR)/macosx/Wish.pbproj
a1089 6
	mkdir $(DISTDIR)/library/msgs
	@@(cd $(TOP_DIR); for i in library/msgs/*.msg ; do \
	    if [ -f $$i ] ; then \
		cp $$i $(DISTDIR)/$$i; \
	    fi; \
	done;)
d1247 1
@


1.1.1.4
log
@imported tk 8.4.1
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.85 2002/10/10 05:01:23 hobbs Exp $
d147 3
a149 4
# lines. or call configure with --enable-symbols=mem
# Warning:  if you enable memory debugging, you must do it *everywhere*,
# including all the code that calls Tcl, and you must use ckalloc and
# ckfree everywhere instead of malloc and free.
a174 3
INSTALL_STRIP_PROGRAM   = -s
INSTALL_STRIP_LIBRARY   = -S -S

a495 5
install-strip:
	$(MAKE) install \
		INSTALL_PROGRAM="$(INSTALL_PROGRAM) ${INSTALL_STRIP_PROGRAM}" \
		INSTALL_LIBRARY="$(INSTALL_LIBRARY) ${INSTALL_STRIP_LIBRARY}"

d1126 1
a1126 1
		$(TOP_DIR)/macosx/*.r $(TOP_DIR)/macosx/*.tcl $(DISTDIR)/macosx
d1188 6
a1193 3
	rm -f $(DISTROOT)/$(DISTNAME)-src.tar.gz $(DISTROOT)/$(ZIPNAME)
	cd $(DISTROOT); tar cf $(DISTNAME)-src.tar $(DISTNAME); \
		gzip -9 $(DISTNAME)-src.tar; zip -qr8 $(ZIPNAME) $(DISTNAME)
d1204 3
a1206 1
	rm -f $(DISTROOT)/$(DISTNAME)-src.tar.gz $(DISTROOT)/$(ZIPNAME)
d1209 3
a1211 2
	cd $(DISTROOT); tar cf $(DISTNAME)-src.tar tk${VERSION}; \
		gzip -9 $(DISTNAME)-src.tar; zip -r8 $(ZIPNAME) tk${VERSION}
@


