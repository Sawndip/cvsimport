head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	insight_7_6-2013-04-10-branchpoint:1.10
	gdb_7_6-branch:1.10.0.28
	sid-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	gdb_7_5-branch:1.10.0.26
	sid-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	gdb_7_4-branch:1.10.0.24
	sid-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	gdb_7_3-branch:1.10.0.22
	sid-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	gdb_7_1-branch:1.10.0.20
	gdb_7_0-branch:1.10.0.18
	sid-snapshot-20100201:1.10
	sid-snapshot-20100101:1.10
	sid-snapshot-20091201:1.10
	sid-snapshot-20091101:1.10
	sid-snapshot-20091001:1.10
	arc-sim-20090309:1.10
	sid-snapshot-20090901:1.10
	sid-snapshot-20090801:1.10
	sid-snapshot-20090701:1.10
	sid-snapshot-20090601:1.10
	sid-snapshot-20090501:1.10
	kevinb-pre-tk8_5_7_merge:1.10
	sid-snapshot-20090401:1.10
	arc-insight_6_8-branch:1.10.0.16
	arc-insight_6_8-branchpoint:1.10
	insight_6_8-branch:1.10.0.14
	insight_6_8-branchpoint:1.10
	sid-snapshot-20090301:1.10
	sid-snapshot-20090201:1.10
	sid-snapshot-20090101:1.10
	sid-snapshot-20081201:1.10
	sid-snapshot-20081101:1.10
	sid-snapshot-20081001:1.10
	sid-snapshot-20080901:1.10
	sid-snapshot-20080801:1.10
	sid-snapshot-20080701:1.10
	sid-snapshot-20080601:1.10
	sid-snapshot-20080501:1.10
	sid-snapshot-20080403:1.10
	sid-snapshot-20080401:1.10
	gdb_6_8-branch:1.10.0.12
	sid-snapshot-20080301:1.10
	sid-snapshot-20080201:1.10
	sid-snapshot-20080101:1.10
	sid-snapshot-20071201:1.10
	sid-snapshot-20071101:1.10
	sid-snapshot-20071001:1.10
	insight_6_6-20070208-release:1.10
	gdb_6_6-branch:1.10.0.10
	gdb_6_6-2006-11-15-branchpoint:1.10
	insight_6_5-20061003-release:1.10
	gdb_6_5-branch:1.10.0.8
	gdb_6_5-2006-05-14-branchpoint:1.10
	gdb_6_4-branch:1.10.0.6
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb_6_1-2004-04-05-release:1.10
	gdb_6_1-branch:1.10.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.10
	gdb_6_0-2003-10-04-release:1.10
	gdb_6_0-branch:1.10.0.2
	gdb_6_0-2003-06-23-branchpoint:1.10
	TK8_4_1:1.1.1.4
	gdb_5_3-2002-12-12-release:1.7
	tcltk840-20020924-branch:1.8.0.2
	tcltk840-20020924-branchpoint:1.8
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.7
	sid-20020905-branch:1.7.0.4
	gdb_5_3-branch:1.7.0.2
	gdb_5_3-2002-09-04-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.3
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2003.01.21.20.24.52;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.21.19.53.17;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.24.18.39.30;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.16.00.42.39;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.09.18.54.17;	author cgd;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.10.01.16.54;	author irox;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.10.01.01.01;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.13.22.14.13;	author jeffh;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.14.00.23.47;	author spolk;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.38.03;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.01.21.19.53.41;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Updated to tk 8.4.1
@
text
@#! /bin/bash -norc
dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tk installation
dnl	to configure the system for the local environment.
#
# RCS: @@(#) $Id: configure.in,v 1.82 2002/09/27 18:09:53 dgp Exp $

AC_INIT(../generic/tk.h)
AC_PREREQ(2.13)

TK_VERSION=8.4
TK_MAJOR_VERSION=8
TK_MINOR_VERSION=4
TK_PATCH_LEVEL=".1"
VERSION=${TK_VERSION}
LOCALES="cs de el en en_gb es fr it nl ru"

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi
# libdir must be a fully qualified path and (not ${exec_prefix}/lib)
eval libdir="$libdir"
# Make sure srcdir is fully qualified!
srcdir=`cd $srcdir ; pwd`
TK_SRC_DIR=`cd $srcdir/..; pwd`

#------------------------------------------------------------------------
# Compress and/or soft link the manpages?
#------------------------------------------------------------------------
SC_CONFIG_MANPAGES

#------------------------------------------------------------------------
# Standard compiler checks
#------------------------------------------------------------------------

# If the user did not set CFLAGS, set it now to keep
# the AC_PROG_CC macro from adding "-g -O2".
if test "${CFLAGS+set}" != "set" ; then
    CFLAGS=""
fi

AC_PROG_CC

#------------------------------------------------------------------------
# I'm not sure why these need to come before all of the other tests
#------------------------------------------------------------------------

AC_HAVE_HEADERS(unistd.h limits.h)

#------------------------------------------------------------------------
# Threads support
#------------------------------------------------------------------------

SC_ENABLE_THREADS

#------------------------------------------------------------------------------
# If we're using GCC, see if the compiler understands -pipe.  If so, use it.
# It makes compiling go faster.  (This is only a performance feature.)
#------------------------------------------------------------------------------

if test -z "$no_pipe"; then
if test -n "$GCC"; then
  AC_MSG_CHECKING([if the compiler understands -pipe])
  OLDCC="$CC"  
  CC="$CC -pipe"
  AC_TRY_COMPILE(,,
    AC_MSG_RESULT(yes),
    CC="$OLDCC"
    AC_MSG_RESULT(no))
fi  
fi

#--------------------------------------------------------------------
#	Detect what compiler flags to set for 64-bit support.
#--------------------------------------------------------------------

SC_TCL_EARLY_FLAGS

SC_TCL_64BIT_FLAGS

#--------------------------------------------------------------------
# Find and load the tclConfig.sh file
#--------------------------------------------------------------------

SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG

#--------------------------------------------------------------------
# Recompute the necessary flags to run the compiler
#--------------------------------------------------------------------

SC_ENABLE_SHARED

SC_CONFIG_CFLAGS

SC_ENABLE_SYMBOLS

LIB_RUNTIME_DIR='${LIB_RUNTIME_DIR}'

TK_DBGX=${DBGX}

#------------------------------------------------------------------------
# If Tcl and Tk are installed in different places, adjust the library
# search path to reflect this.
#------------------------------------------------------------------------

if test "$TCL_EXEC_PREFIX" != "$exec_prefix"; then
    LIB_RUNTIME_DIR="${LIB_RUNTIME_DIR}:${TCL_EXEC_PREFIX}/lib"
fi

#--------------------------------------------------------------------
# On a few very rare systems, all of the libm.a stuff is
# already in libc.a.  Set compiler flags accordingly.
# Also, Linux requires the "ieee" library for math to work
# right (and it must appear before "-lm").
#--------------------------------------------------------------------

AC_CHECK_FUNC(sin, MATH_LIBS="", MATH_LIBS="-lm")
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])

#--------------------------------------------------------------------
# On AIX systems, libbsd.a has to be linked in to support
# non-blocking file IO.  This library has to be linked in after
# the MATH_LIBS or it breaks the pow() function.  The way to
# insure proper sequencing, is to add it to the tail of MATH_LIBS.
# This library also supplies gettimeofday.
#--------------------------------------------------------------------
libbsd=no
if test "`uname -s`" = "AIX" ; then
    AC_CHECK_LIB(bsd, gettimeofday, libbsd=yes)
    if test $libbsd = yes; then
	MATH_LIBS="$MATH_LIBS -lbsd"
    fi
fi

#--------------------------------------------------------------------
# Supply a substitute for stdlib.h if it doesn't define strtol,
# strtoul, or strtod (which it doesn't in some versions of SunOS).
#--------------------------------------------------------------------

AC_MSG_CHECKING(stdlib.h)
AC_HEADER_EGREP(strtol, stdlib.h, tk_ok=yes, tk_ok=no)
AC_HEADER_EGREP(strtoul, stdlib.h, , tk_ok=no)
AC_HEADER_EGREP(strtod, stdlib.h, , tk_ok=no)
if test $tk_ok = no; then
    AC_DEFINE(NO_STDLIB_H)
fi
AC_MSG_RESULT($tk_ok)

#--------------------------------------------------------------------
# Include sys/select.h if it exists and if it supplies things
# that appear to be useful and aren't already in sys/types.h.
# This appears to be true only on the RS/6000 under AIX.  Some
# systems like OSF/1 have a sys/select.h that's of no use, and
# other systems like SCO UNIX have a sys/select.h that's
# pernicious.  If "fd_set" isn't defined anywhere then set a
# special flag.
#--------------------------------------------------------------------

AC_MSG_CHECKING([fd_set and sys/select])
AC_TRY_COMPILE([#include <sys/types.h>],
	[fd_set readMask, writeMask;], tk_ok=yes, tk_ok=no)
if test $tk_ok = no; then
    AC_HEADER_EGREP(fd_mask, sys/select.h, tk_ok=yes)
    if test $tk_ok = yes; then
	AC_DEFINE(HAVE_SYS_SELECT_H)
    fi
fi
AC_MSG_RESULT($tk_ok)
if test $tk_ok = no; then
    AC_DEFINE(NO_FD_SET)
fi

#--------------------------------------------------------------------
# Check for various typedefs and provide substitutes if
# they don't exist.
#--------------------------------------------------------------------

AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

#------------------------------------------------------------------------------
#       Find out about time handling differences.
#------------------------------------------------------------------------------

AC_CHECK_HEADERS(sys/time.h)
AC_HEADER_TIME

#-------------------------------------------
#     In OS/390 struct pwd has no pw_gecos field
#-------------------------------------------

AC_MSG_CHECKING([pw_gecos in struct pwd])
AC_TRY_COMPILE([#include <pwd.h>],
      [struct passwd pwd; pwd.pw_gecos;], tk_ok=yes, tk_ok=no)
AC_MSG_RESULT($tk_ok)
if test $tk_ok = yes; then
    AC_DEFINE(HAVE_PW_GECOS)
fi

#--------------------------------------------------------------------
#	Locate the X11 header files and the X11 library archive.  Try
#	the ac_path_x macro first, but if it doesn't find the X stuff
#	(e.g. because there's no xmkmf program) then check through
#	a list of possible directories.  Under some conditions the
#	autoconf macro will return an include directory that contains
#	no include files, so double-check its result just to be safe.
#--------------------------------------------------------------------

SC_PATH_X

#--------------------------------------------------------------------
#	Various manipulations on the search path used at runtime to
#	find shared libraries:
#	1. If the X library binaries are in a non-standard directory,
#	   add the X library location into that search path.
#	2. On systems such as AIX and Ultrix that use "-L" as the
#	   search path option, colons cannot be used to separate
#	   directories from each other. Change colons to " -L".
#	3. Create two sets of search flags, one for use in cc lines
#	   and the other for when the linker is invoked directly.  In
#	   the second case, '-Wl,' must be stripped off and commas must
#	   be replaced by spaces.
#--------------------------------------------------------------------

if test "x${x_libraries}" != "x"; then
    LIB_RUNTIME_DIR="${LIB_RUNTIME_DIR}:${x_libraries}"
fi
if test "${TCL_LD_SEARCH_FLAGS}" = '-L${LIB_RUNTIME_DIR}'; then
    LIB_RUNTIME_DIR=`echo ${LIB_RUNTIME_DIR} |sed -e 's/:/ -L/g'`
fi

# The statement below is very tricky!  It actually *evaluates* the
# string in TCL_CC_SEARCH_FLAGS and TCL_LD_SEARCH_FLAGS which
# causes a substitution of the variable LIB_RUNTIME_DIR.

eval "CC_SEARCH_FLAGS=\"$TCL_CC_SEARCH_FLAGS\""
eval "LD_SEARCH_FLAGS=\"$TCL_LD_SEARCH_FLAGS\""

#--------------------------------------------------------------------
#	Check for the existence of various libraries.  The order here
#	is important, so that then end up in the right order in the
#	command line generated by make.  The -lsocket and -lnsl libraries
#	require a couple of special tricks:
#	1. Use "connect" and "accept" to check for -lsocket, and
#	   "gethostbyname" to check for -lnsl.
#	2. Use each function name only once:  can't redo a check because
#	   autoconf caches the results of the last check and won't redo it.
#	3. Use -lnsl and -lsocket only if they supply procedures that
#	   aren't already present in the normal libraries.  This is because
#	   IRIX 5.2 has libraries, but they aren't needed and they're
#	   bogus:  they goof up name resolution if used.
#	4. On some SVR4 systems, can't use -lsocket without -lnsl too.
#	   To get around this problem, check for both libraries together
#	   if -lsocket doesn't work by itself.
#--------------------------------------------------------------------

AC_CHECK_LIB(Xbsd, main, [LIBS="$LIBS -lXbsd"])

tk_checkBoth=0
AC_CHECK_FUNC(connect, tk_checkSocket=0, tk_checkSocket=1)
if test "$tk_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", tk_checkBoth=1)
fi
if test "$tk_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, tk_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , [AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"])])

# Add the threads support libraries

LIBS="$LIBS$THREADS_LIBS"

#--------------------------------------------------------------------
# One more check related to the X libraries.  The standard releases
# of Ultrix don't support the "xauth" mechanism, so send won't work
# unless TK_NO_SECURITY is defined.  However, there are usually copies
# of the MIT X server available as well, which do support xauth.
# Check for the MIT stuff and use it if it exists.
#
# Note: can't use ac_check_lib macro (at least, not in Autoconf 2.1)
# because it can't deal with the "-" in the library name.
#--------------------------------------------------------------------

if test -d /usr/include/mit ; then
    AC_MSG_CHECKING([MIT X libraries])
    tk_oldCFlags=$CFLAGS
    CFLAGS="$CFLAGS -I/usr/include/mit"
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lX11-mit"
    AC_TRY_LINK([
	#include <X11/Xlib.h>
    ], [
	XOpenDisplay(0);
    ], [
	AC_MSG_RESULT(yes)
	XLIBSW="-lX11-mit"
	XINCLUDES="-I/usr/include/mit"
    ], AC_MSG_RESULT(no))
    CFLAGS=$tk_oldCFlags
    LIBS=$tk_oldLibs
fi

#--------------------------------------------------------------------
#	On a few very rare systems, all of the libm.a stuff is
#	already in libc.a.  Set compiler flags accordingly.
#	Also, Linux requires the "ieee" library for math to
#	work right (and it must appear before "-lm").
#--------------------------------------------------------------------

MATH_LIBS=""
AC_CHECK_FUNC(sin, , MATH_LIBS="-lm")
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])

#--------------------------------------------------------------------
#	Figure out whether "char" is unsigned.  If so, set a
#	#define for __CHAR_UNSIGNED__.
#--------------------------------------------------------------------

AC_C_CHAR_UNSIGNED

#--------------------------------------------------------------------
#	Under Solaris 2.4, strtod returns the wrong value for the
#	terminating character under some conditions.  Check for this
#	and if the problem exists use a substitute procedure
#	"fixstrtod" (provided by Tcl) that corrects the error.
#--------------------------------------------------------------------

SC_BUGGY_STRTOD

#--------------------------------------------------------------------
#	The statements below define a collection of symbols related to
#	building libtk as a shared library instead of a static library.
#--------------------------------------------------------------------

eval eval "TK_SHARED_LIB_SUFFIX=${SHARED_LIB_SUFFIX}"
eval eval "TK_UNSHARED_LIB_SUFFIX=${UNSHARED_LIB_SUFFIX}"

if test "${SHARED_BUILD}" = "1" -a "${SHLIB_SUFFIX}" != ""; then
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \${TCL_STUB_LIB_SPEC}"
    TCL_STUB_FLAGS="-DUSE_TCL_STUBS"
else
    TCL_STUB_FLAGS=""
fi
TK_LIB_FILE=libtk${LIB_SUFFIX}
eval "TK_LIB_FILE=${TK_LIB_FILE}"

# Note:  in the following variable, it's important to use the absolute
# path name of the Tcl directory rather than "..":  this is because
# AIX remembers this path and will attempt to use it at run-time to look
# up the Tcl library.

if test "$SHARED_BUILD" = 0 -o $TCL_NEEDS_EXP_FILE = 0; then
    if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
	eval TK_LIB_FLAG="-ltk${VERSION}\${TK_DBGX}"
    else
	eval TK_LIB_FLAG="-ltk`echo ${VERSION} | tr -d .`\${TK_DBGX}"
    fi
    TK_BUILD_LIB_SPEC="-L`pwd` ${TK_LIB_FLAG}"
    TK_LIB_SPEC="-L${libdir} ${TK_LIB_FLAG}"
    TK_BUILD_EXP_FILE=""
    TK_EXP_FILE=""
else
    TK_BUILD_EXP_FILE="lib.exp"
    eval "TK_EXP_FILE=libtk${TCL_EXPORT_FILE_SUFFIX}"

    if test "$GCC" = "yes" ; then
	TK_BUILD_LIB_SPEC="-Wl,-bI:`pwd`/${TK_BUILD_EXP_FILE} -L`pwd`"
	TK_LIB_SPEC="-Wl,-bI:${libdir}/${TK_EXP_FILE} -L`pwd`"    
    else
	TK_BUILD_LIB_SPEC="-bI:`pwd`/${TK_BUILD_EXP_FILE}"
	TK_LIB_SPEC="-bI:${libdir}/${TK_EXP_FILE}"    
    fi
fi
TK_SHARED_BUILD=${SHARED_BUILD}

#--------------------------------------------------------------------
# The statements below define various symbols relating to creating
# the stub'd version of the Tk library
#
# For now, linking to Tcl stubs is not supported with Tk. It causes
# too many problems with linking.  When Tk is a fully loadable 
# extension, linking the the Tcl stubs will be supported.
#--------------------------------------------------------------------

# Replace ${VERSION} with contents of ${TK_VERSION}
eval "TK_STUB_LIB_FILE=libtkstub${TK_UNSHARED_LIB_SUFFIX}"

if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
    eval TK_STUB_LIB_FLAG="-ltkstub${TK_VERSION}\${TK_DBGX}"
else
    eval TK_STUB_LIB_FLAG="-ltkstub`echo ${TK_VERSION} | tr -d .`\${TK_DBGX}"
fi

TK_BUILD_STUB_LIB_SPEC="-L`pwd` ${TK_STUB_LIB_FLAG}"
TK_STUB_LIB_SPEC="-L${libdir} ${TK_STUB_LIB_FLAG}"
TK_BUILD_STUB_LIB_PATH="`pwd`/${TK_STUB_LIB_FILE}"
TK_STUB_LIB_PATH="${libdir}/${TK_STUB_LIB_FILE}"

eval "TK_LIB_FILE=${TK_LIB_FILE}"

AC_SUBST(TK_VERSION)
AC_SUBST(TK_MAJOR_VERSION)
AC_SUBST(TK_MINOR_VERSION)
AC_SUBST(TK_PATCH_LEVEL)
AC_SUBST(TK_DBGX)

AC_SUBST(TK_STUB_LIB_FILE)
AC_SUBST(TK_STUB_LIB_FLAG)
AC_SUBST(TK_BUILD_STUB_LIB_SPEC)
AC_SUBST(TK_STUB_LIB_SPEC)
AC_SUBST(TK_BUILD_STUB_LIB_PATH)
AC_SUBST(TK_STUB_LIB_PATH)
AC_SUBST(TK_STUB_FLAGS)
AC_SUBST(TK_BUILD_EXP_FILE)
AC_SUBST(TK_EXP_FILE)

AC_SUBST(TCL_STUB_FLAGS)
AC_SUBST(TK_BUILD_EXP_FILE)
AC_SUBST(TK_EXP_FILE)

AC_SUBST(LD_LIBRARY_PATH_VAR)

AC_SUBST(MATH_LIBS)
AC_SUBST(TK_BUILD_LIB_SPEC)
AC_SUBST(TK_LIB_FILE)
AC_SUBST(TK_LIB_FLAG)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_SRC_DIR)
AC_SUBST(XINCLUDES)
AC_SUBST(XLIBSW)
AC_SUBST(TK_SHARED_BUILD)
AC_SUBST(LOCALES)

AC_OUTPUT(Makefile tkConfig.sh)
@


1.9
log
@touched all sources to ease next import
@
text
@d5 2
a6 5
# RCS: @@(#) $Id: configure.in,v 1.9.6.11 2001/08/07 02:18:47 mdejong Exp $

# CYGNUS LOCAL, autoconf 2.5 or higher to get --bindir et al
AC_PREREQ(2.5)
# END CYGNUS LOCAL
d9 1
a9 1
# RCS: @@(#) $Id: configure.in,v 1.9.6.11 2001/08/07 02:18:47 mdejong Exp $
d11 1
a11 1
TK_VERSION=8.3
d13 2
a14 2
TK_MINOR_VERSION=3
TK_PATCH_LEVEL=".2"
d16 5
d28 2
d32 16
a47 1
TCL_TOOL_PATH(TK_SRC_DIR, "`cd $srcdir/..; pwd`")
a48 1
AC_PROG_RANLIB
d51 4
d81 8
d99 2
d243 2
a244 4
# string in TCL_LD_SEARCH_FLAGS, which causes a substitution of the
# variable LIB_RUNTIME_DIR.

eval "TK_CC_SEARCH_FLAGS=\"$TCL_LD_SEARCH_FLAGS\""
d246 2
a247 93
#
# CYGNUS LOCAL:  statically link on Solaris, HPUX & SunOS so that
#                we don't have problems with people not having libraries
#                installed or not having LD_LIBRARY_PATH set.
#

    case "$host" in
#
# gdb linked statically w/ Solaris iff GCC and GNU ld are used,
# otherwise dynamic
#
        *-*-solaris2*)
	    sol_xlibsw=
            if test "x$GCC" = "xyes" ; then
	       # This is probably the simplest way to test for GNU ld.
	       # It only works with relatively recent versions of GNU
	       # ld.
	       gld_text=`$CC -Wl,--version 2>&1 | sed 1q`
	       case "$gld_text" in
		GNU* | *BFD*)
		    # sol2.* has libX*.so files in /usr/lib,
		    # but not libX*.a files, so we need to force a
		    # -L/usr/openwin/lib option, sometimes.
		    # FIXME: this won't work right if someone has
		    # their own X libraries in say /usr/local/lib.
		    case "$XLIBSW" in
		    *-L*) ;;
		    *) if test ! -f /usr/lib/libXt.a; then
			    XLIBSW="-L/usr/openwin/lib $XLIBSW"
			fi
			;;
		    esac

		   # Why do we link against libX11 twice?  Because the
		   # Openwin X11 and Xext libraries are seriously broken.
		   sol_xlibsw="-Wl,-Bstatic $XLIBSW -lXext -lX11 -Wl,-Bdynamic"
		   ;;
	       esac
            fi
	    if test -z "$sol_xlibsw"; then
	      if test "x$x_libraries" != "x"; then
		XLIBSW="$XLIBSW -R$x_libraries"
	      fi
	    else
	       XLIBSW=$sol_xlibsw
	       suppress_enable_shared=yes
	    fi
	    ;;
#
# gdb linked statically w/ SunOS or HPUX
#
        m68k-hp-hpux*|hppa*-hp-hpux*|sparc-sun-sunos*)
            if test "x$x_libraries" != "x" ;
            then
	       XLIBSW="$x_libraries/libX11.a"
            else
	       XLIBSW="/usr/lib/libX11.a"
            fi
	    suppress_enable_shared=yes
	    ;;

#
# GDB should be linked dynamically on NetBSD, but needs the linker
# to set an RPATH in the binaries for the X11 library directory.  It's
# assumed that if a shared libtk is being built, it will be RPATH'd
# in via a directive in the tcl library configuration information.
#
	*-*-netbsd*)
	    if test "x$x_libraries" != "x"; then
	      XLIBSW="$XLIBSW -Wl,-rpath,$x_libraries"
	    fi
	    ;;

#
# default is to link dynamically
#
        *)
	   ;;
    esac
#
# END CYGNUS LOCAL

# The following case handles the differences between linking with "ld"
# and the compiler

case $SHLIB_LD in
    *ld*)
      TK_LD_SEARCH_FLAGS=`echo ${TK_CC_SEARCH_FLAGS} |sed -e "s|-Wl,||g" -e "s|,| |g"`
      ;;
    *)
      TK_LD_SEARCH_FLAGS="${TK_CC_SEARCH_FLAGS}"
      ;;
esac
d269 11
a279 32
# CYGNUS LOCAL: Store any socket library(ies) in the cache, and don't
# mess up the cache values of the functions we check for.
AC_CACHE_CHECK([for socket libraries], tcl_cv_lib_sockets,
 [tcl_cv_lib_sockets=
  tk_checkBoth=0
  unset ac_cv_func_connect
  AC_CHECK_FUNC(connect, tk_checkSocket=0, tk_checkSocket=1)
  if test "$tk_checkSocket" = 1; then
      unset ac_cv_func_connect
      AC_CHECK_LIB(socket, main, tcl_cv_lib_sockets="-lsocket",
		   tk_checkBoth=1)
  fi
  if test "$tk_checkBoth" = 1; then
      tk_oldLibs=$LIBS
      LIBS="$LIBS -lsocket -lnsl"
      unset ac_cv_func_accept
      AC_CHECK_FUNC(accept,
		    [tcl_checkNsl=0
		     tcl_cv_lib_sockets="-lsocket -lnsl"])
      unset ac_cv_func_accept
      LIBS=$tk_oldLibs
  fi
  unset ac_cv_func_gethostbyname
  tk_oldLibs=$LIBS
  LIBS="$LIBS $tk_cv_lib_sockets"
  AC_CHECK_FUNC(gethostbyname, ,
		[AC_CHECK_LIB(nsl, main,
			      [tcl_cv_lib_sockets="$tcl_cv_lib_sockets -lnsl"])])
  unset ac_cv_func_gethostbyname
  LIBS=$tcl_oldLIBS
])
test -z "$tcl_cv_lib_sockets" || LIBS="$LIBS $tcl_cv_lib_sockets"
a346 2
SC_ENABLE_SHARED

d351 2
a352 7
    TK_SHLIB_CFLAGS="${SHLIB_CFLAGS}"
    TCL_TOOL_SHARED_LIB_LONGNAME(TK_LIB_FILE, tk, ${TK_SHARED_LIB_SUFFIX})
    MAKE_LIB="\${SHLIB_LD} -o \${TK_LIB_FILE} \${OBJS} \$(TK_LD_SEARCH_FLAGS) ${TCL_BUILD_STUB_LIB_SPEC} \${LIBS}"
    RANLIB=":"

#    TCL_STUB_FLAGS="-DUSE_TCL_STUBS"
    TCL_STUB_FLAGS=""
a353 4
    TK_SHLIB_CFLAGS=""
    TCL_TOOL_STATIC_LIB_LONGNAME(TK_LIB_FILE, tk, ${TK_UNSHARED_LIB_SUFFIX})
    MAKE_LIB="\${STLIB_LD} \${TK_LIB_FILE} \${OBJS}"

d356 2
d365 7
a371 3
    TCL_TOOL_LIB_SHORTNAME(TK_LIB_FLAG, tk, $TK_VERSION)
    TCL_TOOL_LIB_SPEC(TK_BUILD_LIB_SPEC, `pwd`, ${TK_LIB_FLAG})
    TCL_TOOL_LIB_SPEC(TK_LIB_SPEC, ${exec_prefix}/lib, ${TK_LIB_FLAG})
d377 8
a384 3
    
    TK_BUILD_LIB_SPEC="-bI:`pwd`/${TK_BUILD_EXP_FILE}"
    TK_LIB_SPEC="-bI:${exec_prefix}/lib/${TK_EXP_FILE}"
a387 4
dnl CYGNUS LOCAL
TK_BUILD_INCLUDES="-I`cd $srcdir/../generic; pwd`"
dnl END CYGNUS LOCAL

d397 8
a404 1
TCL_TOOL_STATIC_LIB_LONGNAME(TK_STUB_LIB_FILE, tkstub, ${TK_UNSHARED_LIB_SUFFIX})
d406 4
a409 1
MAKE_STUB_LIB="\${STLIB_LD} \${STUB_LIB_FILE} \${STUB_LIB_OBJS}"
d411 1
a411 3
TCL_TOOL_LIB_SHORTNAME(TK_STUB_LIB_FLAG, tkstub, ${TK_VERSION})
TCL_TOOL_LIB_SPEC(TK_BUILD_STUB_LIB_SPEC, `pwd`, ${TK_STUB_LIB_FLAG})
TCL_TOOL_LIB_SPEC(TK_STUB_LIB_SPEC, ${exec_prefix}/lib, ${TK_STUB_LIB_FLAG})
d413 5
a417 2
TCL_TOOL_LIB_PATH(TK_BUILD_STUB_LIB_PATH, `pwd`, ${TK_STUB_LIB_FILE})
TCL_TOOL_LIB_PATH(TK_STUB_LIB_PATH, `pwd`, ${TK_STUB_LIB_FILE})
a424 1
AC_SUBST(MAKE_STUB_LIB)
d433 2
a434 9
AC_SUBST(CFLAGS_DEFAULT)
AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(LDFLAGS_DEFAULT)
AC_SUBST(LDFLAGS_DEBUG)
AC_SUBST(LDFLAGS_OPTIMIZE)
AC_SUBST(TK_DBGX)
AC_SUBST(DL_LIBS)
AC_SUBST(EXTRA_CFLAGS)
a435 20
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(MAKE_LIB)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(TK_SHLIB_CFLAGS)
AC_SUBST(STLIB_LD)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_LD_LIBS)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SHLIB_VERSION)
AC_SUBST(TCL_BIN_DIR)
AC_SUBST(TCL_LIB_FULL_PATH)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_LIB_FLAG)
AC_SUBST(TCL_BUILD_STUB_LIB_SPEC)
AC_SUBST(TCL_BUILD_LIB_SPEC)
AC_SUBST(TCL_DBGX)
AC_SUBST(TCL_LIB_FLAG)
AC_SUBST(TCL_SRC_DIR)
AC_SUBST(TCL_VERSION)
a436 3
AC_SUBST(TK_LIB_FULL_PATH)
AC_SUBST(TK_CC_SEARCH_FLAGS)
AC_SUBST(TK_LD_SEARCH_FLAGS)
a439 3
AC_SUBST(TK_MAJOR_VERSION)
AC_SUBST(TK_MINOR_VERSION)
AC_SUBST(TK_PATCH_LEVEL)
a440 1
AC_SUBST(TK_VERSION)
d444 1
a444 10
dnl CYGNUS LOCAL
AC_SUBST(TK_BUILD_INCLUDES)
dnl END CYGNUS LOCAL
# CYGNUS LOCAL
# Need more variables to keep shared/static linking separate.
AC_SUBST(TCL_SHARED_LIB_SUFFIX)
AC_SUBST(TCL_UNSHARED_LIB_SUFFIX)
AC_SUBST(TK_SHARED_LIB_FILE)
AC_SUBST(TK_UNSHARED_LIB_FILE)
# END CYGNUS LOCAL
a446 1

@


1.8
log
@touched all sources to ease next import
@
text
@@


1.7
log
@        From Mo DeJong  <supermo@@bayarea.net>:
        * unix/configure.in: Use TCL_BUILD_STUB_LIB_SPEC instead of
        TCL_STUB_LIB_SPEC when defining MAKE_LIB since we want to
        link to the libtclstub in the build directory.
        * unix/configure: Regenerated.
@
text
@@


1.6
log
@2002-02-09  Chris Demetriou  <cgd@@broadcom.com>

        * configure.in: When building for NetBSD host systems, tell
        linker to provide RPATH for the X11 library directory.
        * configure: Regenerate.
@
text
@d437 1
a437 1
    MAKE_LIB="\${SHLIB_LD} -o \${TK_LIB_FILE} \${OBJS} \$(TK_LD_SEARCH_FLAGS) ${TCL_STUB_LIB_SPEC} \${LIBS}"
@


1.5
log
@touched all tk files to ease next import
@
text
@d276 13
@


1.4
log
@Tk8.3 upgrade merge.
@
text
@@


1.3
log
@2001-02-13  Jeff Holcomb  <jeffh@@redhat.com>

        * configure.in: Use "*-*-solaris2*" so linking works correctly
        on i386-pc-solaris machines.
        * configure: Regenerated.
@
text
@d1 1
a1 1
! /bin/bash -norc
d5 1
d12 1
a12 1
# SCCS: @@(#) configure.in 1.90 97/11/20 12:45:45
d14 1
a14 8
# CYGNUS LOCAL tromey - find config.guess/config.sub in our tree
AC_CONFIG_AUX_DIR($srcdir/../..)
AC_CANONICAL_SYSTEM
AC_PROG_CC
AC_PROG_INSTALL
# END CYGNUS LOCAL

TK_VERSION=8.0
d16 2
a17 2
TK_MINOR_VERSION=0
TK_PATCH_LEVEL=".4"
d26 3
a28 1
TK_SRC_DIR=`cd $srcdir/..; pwd`
d31 2
a32 8
AC_ARG_ENABLE(gcc, [  --enable-gcc            allow use of gcc if available],
    [tk_ok=$enableval], [tkl_ok=no])
if test "$tk_ok" = "yes"; then
    AC_PROG_CC
else
    CC=${CC-cc}
AC_SUBST(CC)
fi
d35 10
a44 4
# set the warning flags depending on whether or not we are using gcc
if test "${GCC}" = "yes" ; then
    # leave -Wimplicit-int out, the X libs generate so many of these warnings
    # that they obscure everything else.
d46 10
a55 3
    CFLAGS_WARNING="-Wall -Wconversion -Wno-implicit-int"
else
    CFLAGS_WARNING=""
d59 1
a59 2
#	See if there was a command-line option for where Tcl is;  if
#	not, assume that its top-level directory is a sibling of ours.
d62 2
a63 11
AC_ARG_WITH(tcl, [  --with-tcl=DIR          use Tcl 8.0 binaries from DIR],
	TCL_BIN_DIR=$withval, TCL_BIN_DIR=`cd ../../tcl/unix; pwd`)
if test -z "$TCL_BIN_DIR"; then
    AC_MSG_ERROR(couldn't find Tcl build directory in ../../tcl/unix)
fi
if test ! -d $TCL_BIN_DIR; then
    AC_MSG_ERROR(Tcl directory $TCL_BIN_DIR doesn't exist)
fi
if test ! -f $TCL_BIN_DIR/Makefile; then
    AC_MSG_ERROR(There's no Makefile in $TCL_BIN_DIR;  perhaps you didn't specify the Tcl *build* directory (not the toplevel Tcl directory) or you forgot to configure Tcl?)
fi
d66 1
a66 3
#	Read in configuration information generated by Tcl for shared
#	libraries, and arrange for it to be substituted into our
#	Makefile.
d69 3
a71 9
file=$TCL_BIN_DIR/tclConfig.sh
. $file
SHLIB_CFLAGS=$TCL_SHLIB_CFLAGS
SHLIB_LD=$TCL_SHLIB_LD
SHLIB_LD_LIBS=$TCL_SHLIB_LD_LIBS
SHLIB_SUFFIX=$TCL_SHLIB_SUFFIX
SHLIB_VERSION=$TCL_SHLIB_VERSION
DL_LIBS=$TCL_DL_LIBS
LD_FLAGS=$TCL_LD_FLAGS
d75 3
d80 1
d83 1
a83 1
    LIB_RUNTIME_DIR="${LIB_RUNTIME_DIR}:${TCL_EXEC_PREFIX}"
d87 27
a113 2
#	Supply a substitute for stdlib.h if it doesn't define strtol,
#	strtoul, or strtod (which it doesn't in some versions of SunOS).
d126 7
a132 7
#	Include sys/select.h if it exists and if it supplies things
#	that appear to be useful and aren't already in sys/types.h.
#	This appears to be true only on the RS/6000 under AIX.  Some
#	systems like OSF/1 have a sys/select.h that's of no use, and
#	other systems like SCO UNIX have a sys/select.h that's
#	pernicious.  If "fd_set" isn't defined anywhere then set a
#	special flag.
d150 2
a151 2
#	Check for various typedefs and provide substitutes if
#	they don't exist.
d154 4
a157 4
AC_MODE_T
AC_PID_T
AC_SIZE_T
AC_UID_T
d166 12
d187 1
a187 63
AC_PATH_X
not_really_there=""
if test "$no_x" = ""; then
    if test "$x_includes" = ""; then
	AC_TRY_CPP([#include <X11/XIntrinsic.h>], , not_really_there="yes")
    else
	if test ! -r $x_includes/X11/Intrinsic.h; then
	    not_really_there="yes"
	fi
    fi
fi
if test "$no_x" = "yes" -o "$not_really_there" = "yes"; then
    AC_MSG_CHECKING(for X11 header files)
    XINCLUDES="# no special path needed"
    AC_TRY_CPP([#include <X11/Intrinsic.h>], , XINCLUDES="nope")
    if test "$XINCLUDES" = nope; then
        dirs="/usr/unsupported/include /usr/local/include /usr/X386/include /usr/X11R6/include /usr/X11R5/include /usr/include/X11R5 /usr/include/X11R4 /usr/openwin/include /usr/X11/include /usr/sww/include"
        for i in $dirs ; do
	    if test -r $i/X11/Intrinsic.h; then
		AC_MSG_RESULT($i)
	        XINCLUDES=" -I$i"
		break
	    fi
        done
    fi
else
    if test "$x_includes" != ""; then
	XINCLUDES=-I$x_includes
    else
	XINCLUDES="# no special path needed"
    fi
fi
if test "$XINCLUDES" = nope; then
    AC_MSG_RESULT(couldn't find any!)
    XINCLUDES="# no include files found"
fi

if test "$no_x" = yes; then
    AC_MSG_CHECKING(for X11 libraries)
    XLIBSW=nope
    dirs="/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/X11R6/lib /usr/X11R5/lib /usr/lib/X11R5 /usr/lib/X11R4 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib"
    for i in $dirs ; do
	if test -r $i/libX11.a -o -r $i/libX11.so -o -r $i/libX11.sl; then
	    AC_MSG_RESULT($i)
	    XLIBSW="-L$i -lX11"
	    x_libraries="$i"
	    break
	fi
    done
else
    if test "$x_libraries" = ""; then
	XLIBSW=-lX11
    else
	XLIBSW="-L$x_libraries -lX11"
    fi
fi
if test "$XLIBSW" = nope ; then
    AC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)
fi
if test "$XLIBSW" = nope ; then
    AC_MSG_RESULT(couldn't find any!  Using -lX11.)
    XLIBSW=-lX11
fi
a214 6
TK_LD_SEARCH_FLAGS=`echo ${TK_CC_SEARCH_FLAGS} |sed -e "s|-Wl,||g" -e "s|,| |g"`

# CYGNUS LOCAL: Don't hack TK_LD_SEARCH_FLAGS if SHLIB_LD is gcc.
case "${SHLIB_LD}" in
  *gcc*) TK_LD_SEARCH_FLAGS="${TK_CC_SEARCH_FLAGS}" ;;
esac
d265 1
a265 1
# gdb linked statically w/ SunOS or HPUX, but not hpux11 wide
a266 3
	hppa*64*-hp-hpux*)
	    ;;

d285 12
d350 4
d409 1
a409 22
AC_CHECK_FUNC(strtod, tk_strtod=1, tk_strtod=0)
if test "$tk_strtod" = 1; then
    AC_MSG_CHECKING([for Solaris 2.4 strtod bug])
    AC_TRY_RUN([
	extern double strtod();
	int main()
	{
	    char *string = "NaN";
	    char *term;
	    strtod(string, &term);
	    if ((term != string) && (term[-1] == 0)) {
		exit(1);
	    }
	    exit(0);
	}], tk_ok=1, tk_ok=0, tk_ok=0)
    if test "$tk_ok" = 1; then
	AC_MSG_RESULT(ok)
    else
	AC_MSG_RESULT(buggy)
	AC_DEFINE(strtod, fixstrtod)
    fi
fi
d416 4
a419 10
AC_ARG_ENABLE(shared,
    [  --enable-shared         build libtk as a shared library],
    [ok=$enableval], [ok=no])

# CYGNUS LOCAL: on machines where static linking of libX11 is important,
# it is also important to build a static libtk.
if test -n "$suppress_enable_shared"; then
   ok=no
fi
# END CYGNUS LOCAL
d421 1
a421 4
TK_SHARED_LIB_FILE=
TK_UNSHARED_LIB_FILE=
if test "$ok" = "yes" -a "${SHLIB_SUFFIX}" != ""; then
    TK_SHARED_BUILD=1
d423 2
a424 3
    eval "TK_LIB_FILE=libtk${TCL_SHARED_LIB_SUFFIX}"
    TK_SHARED_LIB_FILE="$TK_LIB_FILE"
    MAKE_LIB="\${SHLIB_LD} -o ${TK_LIB_FILE} \${OBJS} \$(TK_LD_SEARCH_FLAGS) ${SHLIB_LD_LIBS}"
d426 3
a429 1
    TK_SHARED_BUILD=0
d431 4
a434 3
    eval "TK_LIB_FILE=libtk${TCL_UNSHARED_LIB_SUFFIX}"
    TK_UNSHARED_LIB_FILE="$TK_LIB_FILE"
    MAKE_LIB="ar cr ${TK_LIB_FILE} \${OBJS}"
a436 4
dnl CYGNUS LOCAL
TK_BUILD_INCLUDES="-I`cd $srcdir/../generic; pwd`"
dnl END CYGNUS LOCAL

d442 6
a447 3
if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
    TK_BUILD_LIB_SPEC="-L`pwd` -ltk${VERSION}"
    TK_LIB_FLAG="-ltk${VERSION}\${TK_DBGX}"
d449 5
a453 2
    TK_BUILD_LIB_SPEC="-L`pwd` -ltk`echo ${VERSION} | tr -d .`"
    TK_LIB_FLAG="-ltk`echo ${VERSION} | tr -d .`\${TK_DBGX}"
d455 1
d457 3
a459 1
TK_LIB_FULL_PATH="`pwd`/${TK_LIB_FILE}"
d461 42
d504 1
a504 1
AC_SUBST(LD_FLAGS)
d506 2
d510 2
d517 4
d522 2
a525 3
dnl CYGNUS LOCAL
AC_SUBST(TK_BUILD_INCLUDES)
dnl END CYGNUS LOCAL
d527 1
a529 1
AC_SUBST(TK_LIB_FULL_PATH)
a535 1
AC_SUBST(TK_SHLIB_CFLAGS)
d541 3
d553 1
@


1.2
log
@2000-12-08  Syd Polk  <spolk@@redhat.com>

	* unix/configure.in: Change hppa*w to hppa*64.
	* unix/configure: Regenerate.
@
text
@d269 1
a269 1
        sparc-sun-solaris2*)
@


1.1
log
@Initial revision
@
text
@d309 1
a309 1
	hppa*w-hp-hpux*)
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@d1 1
a1 1
#! /bin/bash -norc
a4 1
# RCS: @@(#) $Id: configure.in,v 1.9.6.11 2001/08/07 02:18:47 mdejong Exp $
d11 1
a11 1
# RCS: @@(#) $Id: configure.in,v 1.9.6.11 2001/08/07 02:18:47 mdejong Exp $
d13 8
a20 1
TK_VERSION=8.3
d22 2
a23 2
TK_MINOR_VERSION=3
TK_PATCH_LEVEL=".2"
d32 1
a32 3
# Make sure srcdir is fully qualified!
srcdir=`cd $srcdir ; pwd`
TCL_TOOL_PATH(TK_SRC_DIR, "`cd $srcdir/..; pwd`")
d35 8
a42 2
AC_PROG_CC

d45 4
a48 3
#------------------------------------------------------------------------
# Threads support
#------------------------------------------------------------------------
d50 3
a52 17
SC_ENABLE_THREADS

#------------------------------------------------------------------------------
# If we're using GCC, see if the compiler understands -pipe.  If so, use it.
# It makes compiling go faster.  (This is only a performance feature.)
#------------------------------------------------------------------------------

if test -z "$no_pipe"; then
if test -n "$GCC"; then
  AC_MSG_CHECKING([if the compiler understands -pipe])
  OLDCC="$CC"  
  CC="$CC -pipe"
  AC_TRY_COMPILE(,,
    AC_MSG_RESULT(yes),
    CC="$OLDCC"
    AC_MSG_RESULT(no))
fi  
d56 2
a57 1
# Find and load the tclConfig.sh file
d60 11
a70 2
SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG
d73 3
a75 1
# Recompute the necessary flags to run the compiler
d78 9
a86 3
SC_CONFIG_CFLAGS

SC_ENABLE_SYMBOLS
a89 3
TK_DBGX=${DBGX}

#------------------------------------------------------------------------
a91 1
#------------------------------------------------------------------------
d94 1
a94 1
    LIB_RUNTIME_DIR="${LIB_RUNTIME_DIR}:${TCL_EXEC_PREFIX}/lib"
d98 2
a99 27
# On a few very rare systems, all of the libm.a stuff is
# already in libc.a.  Set compiler flags accordingly.
# Also, Linux requires the "ieee" library for math to work
# right (and it must appear before "-lm").
#--------------------------------------------------------------------

AC_CHECK_FUNC(sin, MATH_LIBS="", MATH_LIBS="-lm")
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])

#--------------------------------------------------------------------
# On AIX systems, libbsd.a has to be linked in to support
# non-blocking file IO.  This library has to be linked in after
# the MATH_LIBS or it breaks the pow() function.  The way to
# insure proper sequencing, is to add it to the tail of MATH_LIBS.
# This library also supplies gettimeofday.
#--------------------------------------------------------------------
libbsd=no
if test "`uname -s`" = "AIX" ; then
    AC_CHECK_LIB(bsd, gettimeofday, libbsd=yes)
    if test $libbsd = yes; then
	MATH_LIBS="$MATH_LIBS -lbsd"
    fi
fi

#--------------------------------------------------------------------
# Supply a substitute for stdlib.h if it doesn't define strtol,
# strtoul, or strtod (which it doesn't in some versions of SunOS).
d112 7
a118 7
# Include sys/select.h if it exists and if it supplies things
# that appear to be useful and aren't already in sys/types.h.
# This appears to be true only on the RS/6000 under AIX.  Some
# systems like OSF/1 have a sys/select.h that's of no use, and
# other systems like SCO UNIX have a sys/select.h that's
# pernicious.  If "fd_set" isn't defined anywhere then set a
# special flag.
d136 2
a137 2
# Check for various typedefs and provide substitutes if
# they don't exist.
d140 4
a143 4
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T
a151 12
#-------------------------------------------
#     In OS/390 struct pwd has no pw_gecos field
#-------------------------------------------

AC_MSG_CHECKING([pw_gecos in struct pwd])
AC_TRY_COMPILE([#include <pwd.h>],
      [struct passwd pwd; pwd.pw_gecos;], tk_ok=yes, tk_ok=no)
AC_MSG_RESULT($tk_ok)
if test $tk_ok = yes; then
    AC_DEFINE(HAVE_PW_GECOS)
fi

d161 63
a223 1
SC_PATH_X
d251 6
d307 1
a307 1
# gdb linked statically w/ SunOS or HPUX
d309 3
a329 12
# The following case handles the differences between linking with "ld"
# and the compiler

case $SHLIB_LD in
    *ld*)
      TK_LD_SEARCH_FLAGS=`echo ${TK_CC_SEARCH_FLAGS} |sed -e "s|-Wl,||g" -e "s|,| |g"`
      ;;
    *)
      TK_LD_SEARCH_FLAGS="${TK_CC_SEARCH_FLAGS}"
      ;;
esac

a382 4
# Add the threads support libraries

LIBS="$LIBS$THREADS_LIBS"

d438 22
a459 1
SC_BUGGY_STRTOD
d466 10
a475 1
SC_ENABLE_SHARED
d477 4
a480 4
eval eval "TK_SHARED_LIB_SUFFIX=${SHARED_LIB_SUFFIX}"
eval eval "TK_UNSHARED_LIB_SUFFIX=${UNSHARED_LIB_SUFFIX}"

if test "${SHARED_BUILD}" = "1" -a "${SHLIB_SUFFIX}" != ""; then
d482 3
a484 2
    TCL_TOOL_SHARED_LIB_LONGNAME(TK_LIB_FILE, tk, ${TK_SHARED_LIB_SUFFIX})
    MAKE_LIB="\${SHLIB_LD} -o \${TK_LIB_FILE} \${OBJS} \$(TK_LD_SEARCH_FLAGS) ${TCL_STUB_LIB_SPEC} \${LIBS}"
a485 3

#    TCL_STUB_FLAGS="-DUSE_TCL_STUBS"
    TCL_STUB_FLAGS=""
d487 1
d489 4
a492 2
    TCL_TOOL_STATIC_LIB_LONGNAME(TK_LIB_FILE, tk, ${TK_UNSHARED_LIB_SUFFIX})
    MAKE_LIB="\${STLIB_LD} \${TK_LIB_FILE} \${OBJS}"
d494 3
a496 2
    TCL_STUB_FLAGS=""
fi
d503 3
a505 6
if test "$SHARED_BUILD" = 0 -o $TCL_NEEDS_EXP_FILE = 0; then
    TCL_TOOL_LIB_SHORTNAME(TK_LIB_FLAG, tk, $TK_VERSION)
    TCL_TOOL_LIB_SPEC(TK_BUILD_LIB_SPEC, `pwd`, ${TK_LIB_FLAG})
    TCL_TOOL_LIB_SPEC(TK_LIB_SPEC, ${exec_prefix}/lib, ${TK_LIB_FLAG})
    TK_BUILD_EXP_FILE=""
    TK_EXP_FILE=""
d507 2
a508 5
    TK_BUILD_EXP_FILE="lib.exp"
    eval "TK_EXP_FILE=libtk${TCL_EXPORT_FILE_SUFFIX}"
    
    TK_BUILD_LIB_SPEC="-bI:`pwd`/${TK_BUILD_EXP_FILE}"
    TK_LIB_SPEC="-bI:${exec_prefix}/lib/${TK_EXP_FILE}"
a509 1
TK_SHARED_BUILD=${SHARED_BUILD}
d511 1
a511 3
dnl CYGNUS LOCAL
TK_BUILD_INCLUDES="-I`cd $srcdir/../generic; pwd`"
dnl END CYGNUS LOCAL
a512 42
#--------------------------------------------------------------------
# The statements below define various symbols relating to creating
# the stub'd version of the Tk library
#
# For now, linking to Tcl stubs is not supported with Tk. It causes
# too many problems with linking.  When Tk is a fully loadable 
# extension, linking the the Tcl stubs will be supported.
#--------------------------------------------------------------------

TCL_TOOL_STATIC_LIB_LONGNAME(TK_STUB_LIB_FILE, tkstub, ${TK_UNSHARED_LIB_SUFFIX})

MAKE_STUB_LIB="\${STLIB_LD} \${STUB_LIB_FILE} \${STUB_LIB_OBJS}"

TCL_TOOL_LIB_SHORTNAME(TK_STUB_LIB_FLAG, tkstub, ${TK_VERSION})
TCL_TOOL_LIB_SPEC(TK_BUILD_STUB_LIB_SPEC, `pwd`, ${TK_STUB_LIB_FLAG})
TCL_TOOL_LIB_SPEC(TK_STUB_LIB_SPEC, ${exec_prefix}/lib, ${TK_STUB_LIB_FLAG})

TCL_TOOL_LIB_PATH(TK_BUILD_STUB_LIB_PATH, `pwd`, ${TK_STUB_LIB_FILE})
TCL_TOOL_LIB_PATH(TK_STUB_LIB_PATH, `pwd`, ${TK_STUB_LIB_FILE})

AC_SUBST(TK_STUB_LIB_FILE)
AC_SUBST(TK_STUB_LIB_FLAG)
AC_SUBST(TK_BUILD_STUB_LIB_SPEC)
AC_SUBST(TK_STUB_LIB_SPEC)
AC_SUBST(TK_BUILD_STUB_LIB_PATH)
AC_SUBST(TK_STUB_LIB_PATH)
AC_SUBST(MAKE_STUB_LIB)
AC_SUBST(TK_STUB_FLAGS)
AC_SUBST(TK_BUILD_EXP_FILE)
AC_SUBST(TK_EXP_FILE)

AC_SUBST(TCL_STUB_FLAGS)
AC_SUBST(TK_BUILD_EXP_FILE)
AC_SUBST(TK_EXP_FILE)

AC_SUBST(CFLAGS_DEFAULT)
AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(LDFLAGS_DEFAULT)
AC_SUBST(LDFLAGS_DEBUG)
AC_SUBST(LDFLAGS_OPTIMIZE)
AC_SUBST(TK_DBGX)
d514 1
a514 1
AC_SUBST(EXTRA_CFLAGS)
a515 2
AC_SUBST(AR)
AC_SUBST(RANLIB)
a517 2
AC_SUBST(TK_SHLIB_CFLAGS)
AC_SUBST(STLIB_LD)
a522 4
AC_SUBST(TCL_LIB_FULL_PATH)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_LIB_FLAG)
AC_SUBST(TCL_BUILD_STUB_LIB_SPEC)
a523 2
AC_SUBST(TCL_DBGX)
AC_SUBST(TCL_LIB_FLAG)
d526 3
a529 1
AC_SUBST(TK_LIB_FULL_PATH)
d532 1
d539 1
a544 3
dnl CYGNUS LOCAL
AC_SUBST(TK_BUILD_INCLUDES)
dnl END CYGNUS LOCAL
a553 1

@


1.1.1.3
log
@import tk 8.4.0
@
text
@d5 5
a9 2
#
# RCS: @@(#) $Id: configure.in,v 1.81 2002/09/02 21:21:51 hobbs Exp $
d12 1
a12 1
AC_PREREQ(2.13)
d14 1
a14 1
TK_VERSION=8.4
d16 2
a17 2
TK_MINOR_VERSION=4
TK_PATCH_LEVEL=".0"
a18 5
LOCALES="cs de el en en_gb es fr it nl ru"

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------
a25 2
# libdir must be a fully qualified path and (not ${exec_prefix}/lib)
eval libdir="$libdir"
d28 1
a28 16
TK_SRC_DIR=`cd $srcdir/..; pwd`

#------------------------------------------------------------------------
# Compress and/or soft link the manpages?
#------------------------------------------------------------------------
SC_CONFIG_MANPAGES

#------------------------------------------------------------------------
# Standard compiler checks
#------------------------------------------------------------------------

# If the user did not set CFLAGS, set it now to keep
# the AC_PROG_CC macro from adding "-g -O2".
if test "${CFLAGS+set}" != "set" ; then
    CFLAGS=""
fi
d30 1
a32 4
#------------------------------------------------------------------------
# I'm not sure why these need to come before all of the other tests
#------------------------------------------------------------------------

a58 8
#	Detect what compiler flags to set for 64-bit support.
#--------------------------------------------------------------------

SC_TCL_EARLY_FLAGS

SC_TCL_64BIT_FLAGS

#--------------------------------------------------------------------
a68 2
SC_ENABLE_SHARED

d211 4
a214 2
# string in TCL_CC_SEARCH_FLAGS and TCL_LD_SEARCH_FLAGS which
# causes a substitution of the variable LIB_RUNTIME_DIR.
d216 80
a295 2
eval "CC_SEARCH_FLAGS=\"$TCL_CC_SEARCH_FLAGS\""
eval "LD_SEARCH_FLAGS=\"$TCL_LD_SEARCH_FLAGS\""
d317 32
a348 11
tk_checkBoth=0
AC_CHECK_FUNC(connect, tk_checkSocket=0, tk_checkSocket=1)
if test "$tk_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", tk_checkBoth=1)
fi
if test "$tk_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, tk_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , [AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"])])
d416 2
d422 7
a428 2
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \${TCL_STUB_LIB_SPEC}"
    TCL_STUB_FLAGS="-DUSE_TCL_STUBS"
d430 4
a435 2
TK_LIB_FILE=libtk${LIB_SUFFIX}
eval "TK_LIB_FILE=${TK_LIB_FILE}"
d443 3
a445 7
    if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
	eval TK_LIB_FLAG="-ltk${VERSION}\${TK_DBGX}"
    else
	eval TK_LIB_FLAG="-ltk`echo ${VERSION} | tr -d .`\${TK_DBGX}"
    fi
    TK_BUILD_LIB_SPEC="-L`pwd` ${TK_LIB_FLAG}"
    TK_LIB_SPEC="-L${libdir} ${TK_LIB_FLAG}"
d451 3
a453 8

    if test "$GCC" = "yes" ; then
	TK_BUILD_LIB_SPEC="-Wl,-bI:`pwd`/${TK_BUILD_EXP_FILE} -L`pwd`"
	TK_LIB_SPEC="-Wl,-bI:${libdir}/${TK_EXP_FILE} -L`pwd`"    
    else
	TK_BUILD_LIB_SPEC="-bI:`pwd`/${TK_BUILD_EXP_FILE}"
	TK_LIB_SPEC="-bI:${libdir}/${TK_EXP_FILE}"    
    fi
d457 4
d470 1
a470 2
# Replace ${VERSION} with contents of ${TK_VERSION}
eval "TK_STUB_LIB_FILE=libtkstub${TK_UNSHARED_LIB_SUFFIX}"
d472 1
a472 5
if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
    eval TK_STUB_LIB_FLAG="-ltkstub${TK_VERSION}\${TK_DBGX}"
else
    eval TK_STUB_LIB_FLAG="-ltkstub`echo ${TK_VERSION} | tr -d .`\${TK_DBGX}"
fi
d474 3
a476 4
TK_BUILD_STUB_LIB_SPEC="-L`pwd` ${TK_STUB_LIB_FLAG}"
TK_STUB_LIB_SPEC="-L${libdir} ${TK_STUB_LIB_FLAG}"
TK_BUILD_STUB_LIB_PATH="`pwd`/${TK_STUB_LIB_FILE}"
TK_STUB_LIB_PATH="${libdir}/${TK_STUB_LIB_FILE}"
d478 2
a479 7
eval "TK_LIB_FILE=${TK_LIB_FILE}"

AC_SUBST(TK_VERSION)
AC_SUBST(TK_MAJOR_VERSION)
AC_SUBST(TK_MINOR_VERSION)
AC_SUBST(TK_PATCH_LEVEL)
AC_SUBST(TK_DBGX)
d487 1
d496 9
a504 2
AC_SUBST(LD_LIBRARY_PATH_VAR)

d506 20
d527 3
d533 3
d537 1
d541 10
a550 1
AC_SUBST(LOCALES)
d553 1
@


1.1.1.4
log
@imported tk 8.4.1
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: configure.in,v 1.82 2002/09/27 18:09:53 dgp Exp $
d14 1
a14 1
TK_PATCH_LEVEL=".1"
@


