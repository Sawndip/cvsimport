head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	insight_7_6-2013-04-10-branchpoint:1.8
	gdb_7_6-branch:1.8.0.28
	sid-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	gdb_7_5-branch:1.8.0.26
	sid-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	gdb_7_4-branch:1.8.0.24
	sid-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	gdb_7_3-branch:1.8.0.22
	sid-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	gdb_7_1-branch:1.8.0.20
	gdb_7_0-branch:1.8.0.18
	sid-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.8
	arc-sim-20090309:1.8
	sid-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	sid-snapshot-20090701:1.8
	sid-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	kevinb-pre-tk8_5_7_merge:1.8
	sid-snapshot-20090401:1.8
	arc-insight_6_8-branch:1.8.0.16
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.14
	insight_6_8-branchpoint:1.8
	sid-snapshot-20090301:1.8
	sid-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	sid-snapshot-20081201:1.8
	sid-snapshot-20081101:1.8
	sid-snapshot-20081001:1.8
	sid-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	sid-snapshot-20080701:1.8
	sid-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	gdb_6_8-branch:1.8.0.12
	sid-snapshot-20080301:1.8
	sid-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	sid-snapshot-20071001:1.8
	insight_6_6-20070208-release:1.8
	gdb_6_6-branch:1.8.0.10
	gdb_6_6-2006-11-15-branchpoint:1.8
	insight_6_5-20061003-release:1.8
	gdb_6_5-branch:1.8.0.8
	gdb_6_5-2006-05-14-branchpoint:1.8
	gdb_6_4-branch:1.8.0.6
	gdb_6_4-2005-11-01-branchpoint:1.8
	gdb_6_1-2004-04-05-release:1.8
	gdb_6_1-branch:1.8.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	gdb_6_0-2003-10-04-release:1.8
	gdb_6_0-branch:1.8.0.2
	gdb_6_0-2003-06-23-branchpoint:1.8
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.5
	tcltk840-20020924-branch:1.6.0.2
	tcltk840-20020924-branchpoint:1.6
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.5
	sid-20020905-branch:1.5.0.4
	gdb_5_3-branch:1.5.0.2
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2003.01.21.20.24.52;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.21.19.53.17;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.24.18.39.30;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.01.01.38.46;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.10.01.16.55;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.10.01.01.01;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.08.03.26.04;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.30;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.37;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.38.26;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Updated to tk 8.4.1
@
text
@# This file is a Makefile for Tk.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@@foo@@" will get replaced in the
# actual Makefile.
#
# RCS: @@(#) $Id: Makefile.in,v 1.58 2002/09/04 17:44:55 andreas_kupries Exp $

TCLVERSION		= @@TCL_VERSION@@
VERSION			= @@TK_VERSION@@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT		=

# Directory from which applications will reference the library of Tk
# scripts (note: you can set the TK_LIBRARY environment variable at
# run-time to override this value):

# REDHAT LOCAL
#TK_LIBRARY		= $(prefix)/lib/tk$(VERSION)
TK_LIBRARY		= @@datadir@@/tk$(VERSION)
# END REDHAT LOCAL

# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR		= $(libdir)

# Directory in which to install the program wish:
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)

# Directory in which to install the .a or .so binary for the Tk library:
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)

# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TK_LIBRARY)

# Directory in which to install the include file tk.h:
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)

# Top-level directory for manual entries:
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)

# Directory in which to install manual entry for wish:
MAN1_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for Tk's C library
# procedures:
MAN3_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Tk commands:
MANN_INSTALL_DIR	= $(MAN_INSTALL_DIR)/mann

# Libraries built with optimization switches have this additional extension
TK_DBGX			= @@TK_DBGX@@

# Directory in which to install the pkgIndex.tcl file for loadable Tk
PKG_INSTALL_DIR		= $(LIB_INSTALL_DIR)/tk$(VERSION)$(TK_DBGX)

# Package index file for loadable Tk
PKG_INDEX		= $(PKG_INSTALL_DIR)/pkgIndex.tcl

# The directory containing the Tcl source and header files.
TCL_SRC_DIR		= @@TCL_SRC_DIR@@

# The directory containing the Tcl library archive file appropriate
# for this version of Tk:
TCL_BIN_DIR		= @@TCL_BIN_DIR@@

# The directory containing the Tcl sources and headers appropriate
# for this version of Tk ("srcdir" will be replaced or has already
# been replaced by the configure script):
TCL_GENERIC_DIR	= @@TCL_SRC_DIR@@/generic
TCL_TOOL_DIR = @@TCL_SRC_DIR@@/tools

# Converts a POSIX path to a Windows native path.
CYGPATH			= @@CYGPATH@@

# The name of the Tcl library.
TCL_LIB_FILE	  = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_LIB_FILE@@')"
TCL_STUB_LIB_FILE = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_STUB_LIB_FILE@@')"

SRC_DIR			= @@srcdir@@
ROOT_DIR		= $(SRC_DIR)/..
WIN_DIR			= $(SRC_DIR)
UNIX_DIR		= $(SRC_DIR)/../unix
GENERIC_DIR		= $(SRC_DIR)/../generic
BITMAP_DIR		= $(ROOT_DIR)/bitmaps
XLIB_DIR		= $(ROOT_DIR)/xlib
RC_DIR			= $(WIN_DIR)/rc

ROOT_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(ROOT_DIR)')
WIN_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(WIN_DIR)')
GENERIC_DIR_NATIVE 	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
BITMAP_DIR_NATIVE	= $(shell $(CYGPATH) '$(ROOT_DIR)/bitmaps')
XLIB_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)/xlib')
TCL_GENERIC_NATIVE	= $(shell $(CYGPATH) '$(TCL_GENERIC_DIR)')
TCL_SRC_DIR_NATIVE      = $(shell $(CYGPATH) '$(TCL_SRC_DIR)')
RC_DIR_NATIVE      	= $(shell $(CYGPATH) '$(RC_DIR)')

DLLSUFFIX		= @@DLLSUFFIX@@
LIBSUFFIX		= @@LIBSUFFIX@@
EXESUFFIX		= @@EXESUFFIX@@

TK_STUB_LIB_FILE	= @@TK_STUB_LIB_FILE@@
TK_LIB_FILE		= @@TK_LIB_FILE@@
TK_DLL_FILE		= @@TK_DLL_FILE@@

SHARED_LIBRARIES 	= $(TK_DLL_FILE) $(TK_STUB_LIB_FILE)
STATIC_LIBRARIES	= $(TK_LIB_FILE)

WISH			= wish$(VER)${EXESUFFIX}
TKTEST			= tktest${EXEEXT}
CAT32			= cat32$(EXEEXT)
MAN2TCL			= man2tcl$(EXEEXT)

@@SET_MAKE@@

# Setting the VPATH variable to a list of paths will cause the 
# makefile to look into these paths when resolving .c to .obj
# dependencies.

VPATH = $(GENERIC_DIR):$(WIN_DIR):$(UNIX_DIR):$(XLIB_DIR):$(RC_DIR)

# warning flags
CFLAGS_WARNING	= @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@

# The default switches for optimization or debugging
LDFLAGS_DEBUG    = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS		= $(CFLAGS_DEBUG)
#CFLAGS		= $(CFLAGS_OPTIMIZE)
#CFLAGS		= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS		= @@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS	= @@MAN2TCLFLAGS@@

AR		= @@AR@@
RANLIB		= @@RANLIB@@
CC		= @@CC@@
RC		= @@RC@@
RES		= @@RES@@
TK_RES		= @@TK_RES@@
AC_FLAGS	= @@EXTRA_CFLAGS@@ @@DEFS@@
CPPFLAGS	= @@CPPFLAGS@@
LDFLAGS		= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@
LDFLAGS_CONSOLE	= @@LDFLAGS_CONSOLE@@
LDFLAGS_WINDOW	= @@LDFLAGS_WINDOW@@
EXEEXT		= @@EXEEXT@@
OBJEXT		= @@OBJEXT@@
STLIB_LD	= @@STLIB_LD@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(TCL_STUB_LIB_FILE) $(LIBS)
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_SUFFIX	= @@SHLIB_SUFFIX@@
VER		= @@TK_MAJOR_VERSION@@@@TK_MINOR_VERSION@@
DOTVER		= @@TK_MAJOR_VERSION@@.@@TK_MINOR_VERSION@@
LIBS		= @@LIBS@@ @@LIBS_GUI@@
RMDIR		= rm -rf
MKDIR		= mkdir -p
SHELL		= @@SHELL@@
RM		= rm -f
COPY		= cp

TCLSH_PROG	= @@TCLSH_PROG@@

# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" \
-I"${XLIB_DIR_NATIVE}" -I"${BITMAP_DIR_NATIVE}" \
 -I"${TCL_GENERIC_NATIVE}" ${AC_FLAGS}

CC_OBJNAME = @@CC_OBJNAME@@
CC_EXENAME = @@CC_EXENAME@@

STUB_CC_SWITCHES	= ${CC_SWITCHES} -DUSE_TCL_STUBS
CON_CC_SWITCHES		= ${CC_SWITCHES} -DCONSOLE

# Tk used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL		= cp
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA	= ${INSTALL}

WISH_OBJS = \
	winMain.$(OBJEXT)

TKTEST_OBJS = \
	testMain.$(OBJEXT) \
	tkSquare.$(OBJEXT) \
	tkTest.$(OBJEXT) \
	tkWinTest.$(OBJEXT)

XLIB_OBJS = \
	xcolors.$(OBJEXT) \
	xdraw.$(OBJEXT) \
	xgc.$(OBJEXT) \
	ximage.$(OBJEXT) \
	xutil.$(OBJEXT)

TK_OBJS = \
	tkConsole.$(OBJEXT) \
	tkUnixMenubu.$(OBJEXT) \
	tkUnixScale.$(OBJEXT) \
	$(XLIB_OBJS) \
	tkWin3d.$(OBJEXT) \
	tkWin32Dll.$(OBJEXT) \
	tkWinButton.$(OBJEXT) \
	tkWinClipboard.$(OBJEXT) \
	tkWinColor.$(OBJEXT) \
	tkWinConfig.$(OBJEXT) \
	tkWinCursor.$(OBJEXT) \
	tkWinDialog.$(OBJEXT) \
	tkWinDraw.$(OBJEXT) \
	tkWinEmbed.$(OBJEXT) \
	tkWinFont.$(OBJEXT) \
	tkWinImage.$(OBJEXT) \
	tkWinInit.$(OBJEXT) \
	tkWinKey.$(OBJEXT) \
	tkWinMenu.$(OBJEXT) \
	tkWinPixmap.$(OBJEXT) \
	tkWinPointer.$(OBJEXT) \
	tkWinRegion.$(OBJEXT) \
	tkWinScrlbr.$(OBJEXT) \
	tkWinSend.$(OBJEXT) \
	tkWinWindow.$(OBJEXT) \
	tkWinWm.$(OBJEXT) \
	tkWinX.$(OBJEXT) \
	stubs.$(OBJEXT) \
	tk3d.$(OBJEXT) \
	tkArgv.$(OBJEXT) \
	tkAtom.$(OBJEXT) \
	tkBind.$(OBJEXT) \
	tkBitmap.$(OBJEXT) \
	tkButton.$(OBJEXT) \
	tkCanvArc.$(OBJEXT) \
	tkCanvBmap.$(OBJEXT) \
	tkCanvImg.$(OBJEXT) \
	tkCanvLine.$(OBJEXT) \
	tkCanvPoly.$(OBJEXT) \
	tkCanvPs.$(OBJEXT) \
	tkCanvText.$(OBJEXT) \
	tkCanvUtil.$(OBJEXT) \
	tkCanvWind.$(OBJEXT) \
	tkCanvas.$(OBJEXT) \
	tkClipboard.$(OBJEXT) \
	tkCmds.$(OBJEXT) \
	tkColor.$(OBJEXT) \
	tkConfig.$(OBJEXT) \
	tkCursor.$(OBJEXT) \
	tkEntry.$(OBJEXT) \
	tkError.$(OBJEXT) \
	tkEvent.$(OBJEXT) \
	tkFileFilter.$(OBJEXT) \
	tkFocus.$(OBJEXT) \
	tkFont.$(OBJEXT) \
	tkFrame.$(OBJEXT) \
	tkGC.$(OBJEXT) \
	tkGeometry.$(OBJEXT) \
	tkGet.$(OBJEXT) \
	tkGrab.$(OBJEXT) \
	tkGrid.$(OBJEXT) \
	tkImage.$(OBJEXT) \
	tkImgBmap.$(OBJEXT) \
	tkImgGIF.$(OBJEXT) \
	tkImgPPM.$(OBJEXT) \
	tkImgPhoto.$(OBJEXT) \
	tkImgUtil.$(OBJEXT) \
	tkListbox.$(OBJEXT) \
	tkMacWinMenu.$(OBJEXT) \
	tkMain.$(OBJEXT) \
	tkMenu.$(OBJEXT) \
	tkMenubutton.$(OBJEXT) \
	tkMenuDraw.$(OBJEXT) \
	tkMessage.$(OBJEXT) \
	tkPanedWindow.$(OBJEXT) \
	tkObj.$(OBJEXT) \
	tkOldConfig.$(OBJEXT) \
	tkOption.$(OBJEXT) \
	tkPack.$(OBJEXT) \
	tkPlace.$(OBJEXT) \
	tkPointer.$(OBJEXT) \
	tkRectOval.$(OBJEXT) \
	tkScale.$(OBJEXT) \
	tkScrollbar.$(OBJEXT) \
	tkSelect.$(OBJEXT) \
	tkStyle.$(OBJEXT) \
	tkText.$(OBJEXT) \
	tkTextBTree.$(OBJEXT) \
	tkTextDisp.$(OBJEXT) \
	tkTextImage.$(OBJEXT) \
	tkTextIndex.$(OBJEXT) \
	tkTextMark.$(OBJEXT) \
	tkTextTag.$(OBJEXT) \
	tkTextWind.$(OBJEXT) \
	tkTrig.$(OBJEXT) \
	tkUndo.$(OBJEXT) \
	tkUtil.$(OBJEXT) \
	tkVisual.$(OBJEXT) \
	tkStubInit.$(OBJEXT) \
	tkStubLib.$(OBJEXT) \
	tkWindow.$(OBJEXT)

STUB_OBJS = \
	tkStubLib.$(OBJEXT) \
	tkStubImg.$(OBJEXT)

TCL_DOCS = "$(TCL_SRC_DIR_NATIVE)"/doc/*.[13n]
TK_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]
CORE_DOCS = $(TCL_DOCS) $(TK_DOCS)

DEMOPROGS = browse hello ixset rmt rolodex square tcolor timer widget

# Main targets.  The default target -- all -- builds the binaries, 
# performs any post processing on libraries or documents.

all: binaries libraries doc

binaries: @@LIBRARIES@@ $(WISH)

libraries:

$(ROOT_DIR)/doc/man.macros:
	$(INSTALL_DATA) "$(TCL_SRC_DIR)/doc/man.macros" "$(ROOT_DIR)/doc/man.macros"

doc: $(ROOT_DIR)/doc/man.macros

winhelp: $(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	$(TCLSH_PROG) "$(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl" tcl "$(VER)" $(CORE_DOCS)
	$(COPY) "$(TCL_BIN_DIR)"/tcl.hpj ./
	hcw /c /e tcl.hpj
	$(COPY) ./tcl$(VER).cnt ./TCL$(VER).HLP "$(TCL_SRC_DIR_NATIVE)"/tools/

$(MAN2TCL): $(TCL_SRC_DIR_NATIVE)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(TCL_SRC_DIR_NATIVE)"/tools/man2tcl.c

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"

test: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)

runtest: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) $(TESTFLAGS) $(SCRIPT)

# This target can be used to run wish from the build directory
# via `make shell` or `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(WISH) $(SCRIPT)

# This target can be used to run wish inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(TCL_SRC_DIR_NATIVE)/library" > gdb.run
	@@echo "set env TK_LIBRARY=$(ROOT_DIR_NATIVE)/library" >> gdb.run
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	gdb ./$(WISH) --command=gdb.run
	@@$(RM) gdb.run

install: all install-binaries install-libraries install-doc install-demos

install-binaries: binaries
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) $(PKG_INSTALL_DIR); \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in $(TK_DLL_FILE) $(WISH); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
		$(COPY) $$i "$(BIN_INSTALL_DIR)"; \
	    fi; \
	    done
	@@echo "Creating package index $(PKG_INDEX)"; 
	@@$(RM) $(PKG_INDEX);
	@@(\
	echo "if {[package vcompare [package provide Tcl]\
		$(TCLVERSION)] != 0} { return }";\
	echo "package ifneeded Tk $(VERSION)\
		[list load [file join \$$dir .. .. bin $(TK_DLL_FILE)] Tk]";\
	) > $(PKG_INDEX);
	@@for i in tkConfig.sh $(TK_LIB_FILE) $(TK_STUB_LIB_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
		$(COPY) $$i "$(LIB_INSTALL_DIR)"; \
	    fi; \
	    done

install-libraries: libraries
	@@for i in $(INSTALL_ROOT)$(prefix)/lib \
		$(INCLUDE_INSTALL_DIR) $(INCLUDE_INSTALL_DIR)/X11 \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images \
		$(SCRIPT_INSTALL_DIR)/msgs; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@echo "Installing header files to $(INCLUDE_INSTALL_DIR)/";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkPlatDecls.h \
		$(GENERIC_DIR)/tkIntXlibDecls.h $(GENERIC_DIR)/tkDecls.h ; \
	    do \
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR); \
	    done;
	@@for i in $(XLIB_DIR)/X11/*.h; \
	    do \
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR)/X11; \
	    done;
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(ROOT_DIR)/library/*.tcl $(GENERIC_DIR)/prolog.ps \
	        $(ROOT_DIR)/library/tclIndex $(UNIX_DIR)/tkAppInit.c; \
	    do \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
	    done;
	@@echo "Installing library images directory";
	@@for i in $(ROOT_DIR)/library/images/*; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/images; \
	    fi; \
	    done;
	@@echo "Installing translation directory";
	@@for i in $(ROOT_DIR)/library/msgs/*.msg; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/msgs; \
	    fi; \
	    done;

install-demos:
	@@for i in $(INSTALL_ROOT)$(prefix)/lib $(SCRIPT_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR)/demos \
		$(SCRIPT_INSTALL_DIR)/demos/images ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@echo "Installing demos to $(SCRIPT_INSTALL_DIR)/demos/";
	@@for i in $(ROOT_DIR)/library/demos/*; \
	    do \
	    if [ -f $$i ] ; then \
		sed -e '3 s|exec $(WISH)|exec $(WISH)|' \
			$$i > $(SCRIPT_INSTALL_DIR)/demos/`basename $$i`; \
	    fi; \
	    done;
	@@for i in $(DEMOPROGS); \
	    do \
	    chmod 755 $(SCRIPT_INSTALL_DIR)/demos/$$i; \
	    done;
	@@echo "Installing demo images";
	@@for i in $(ROOT_DIR)/library/demos/images/*; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/demos/images; \
		fi; \
	    done;

install-doc: doc


$(WISH): $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) $(WISH_OBJS) wish.$(RES)
	$(CC) $(CFLAGS) $(WISH_OBJS) $(TCL_LIB_FILE) $(TK_LIB_FILE) $(LIBS) \
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

tktest : $(TKTEST)

$(TKTEST): $(TK_LIB_FILE) $(TKTEST_OBJS) wish.$(RES) $(CAT32)
	$(CC) $(CFLAGS) $(TKTEST_OBJS) $(TCL_LIB_FILE) \
	$(TK_LIB_FILE) $(LIBS) \
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

cat32.${OBJEXT}: $(TCL_SRC_DIR)/win/cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

$(CAT32): cat32.${OBJEXT}
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

# The following targets are configured by autoconf to generate either
# a shared library or static library

${TK_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TK_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@

${TK_DLL_FILE}: ${TK_OBJS} $(TK_RES)
	@@$(RM) ${TK_DLL_FILE}
	@@MAKE_DLL@@ ${TK_OBJS} $(TK_RES) $(SHLIB_LD_LIBS)

${TK_LIB_FILE}: ${TK_OBJS}
	@@$(RM) ${TK_LIB_FILE}
	@@MAKE_LIB@@ ${TK_OBJS}
	@@POST_MAKE_LIB@@

# Special case object file targets

winMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

testMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ -DTK_TEST $(CC_OBJNAME)

tkTest.$(OBJEXT): tkTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkWinTest.$(OBJEXT): tkWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkSquare.$(OBJEXT): tkSquare.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Implicit rule for all object files that will end up in the Tcl library

.c.$(OBJEXT):
	$(CC) -c $(STUB_CC_SWITCHES) -DBUILD_tk @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@

depend:

cleanhelp:
	$(RM) *.hlp *.cnt *.hpj *.GID *.rtf man2tcl${EXEEXT}

clean: cleanhelp
	$(RM) *.lib *.a *.exp *.dll *.res *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(WISH) $(TKTEST) $(CAT32)
	$(RM) *.pch *.ilk *.pdb

distclean: clean
	$(RM) Makefile config.status config.cache config.log tkConfig.sh

Makefile: $(SRC_DIR)/Makefile.in
	./config.status

#
# Regenerate the stubs files.
#

$(GENERIC_DIR)/tkStubInit.c: $(GENERIC_DIR)/tk.decls \
		$(GENERIC_DIR)/tkInt.decls
	@@echo "Warning: tkStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"

genstubs:
	$(TCL_EXE) "$(TCL_TOOL_DIR}\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tk.decls" \
            "$(GENERIC_DIR_NATIVE)\tkInt.decls"
@


1.7
log
@touched all sources to ease next import
@
text
@d7 1
a7 1
# RCS: @@(#) $Id: Makefile.in,v 1.9.6.13 2001/08/07 02:18:47 mdejong Exp $
d42 3
d46 1
d80 6
d97 1
d99 1
a99 1
# This program converts from POSIX to Windows native paths.
d103 2
a104 2
TCL_LIB_SPEC	  = @@TCL_BUILD_LIB_SPEC@@
TCL_STUB_LIB_SPEC = @@TCL_BUILD_STUB_LIB_SPEC@@
a121 1
TCL_BIN_DIR_NATIVE      = $(shell $(CYGPATH) '$(TCL_BIN_DIR)')
a130 1
TK_DLL_BASE		= @@TK_DLL_BASE@@
a134 3
WISH_RES		= @@WISH_RES@@
TK_RES			= @@TK_RES@@

d174 1
a181 1
LIBS_GUI	= @@LIBS_GUI@@
d184 1
a185 1
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(TCL_STUB_LIB_SPEC) $(LIBS_GUI)
d189 1
a189 1
LIBS		= @@LIBS@@ $(LIBS_GUI)
d196 8
a203 3
# FIXME: Add a "make shell SCRIPT=foo.tcl" argument
# so that a shell can easily be run from the build dir.
TCLSH_PROG	= $(TCL_BIN_DIR)/tclsh$(VER)
a227 6
TCLTEST_OBJS = \
	${TCL_BIN_DIR}/tclThreadTest.$(OBJEXT)

TCLTEST_OBJS_NATIVE = \
	"${TCL_BIN_DIR_NATIVE}/tclThreadTest.$(OBJEXT)"

a228 8
	$(TCLTEST_OBJS) \
	testMain.$(OBJEXT) \
	tkSquare.$(OBJEXT) \
	tkTest.$(OBJEXT) \
	tkWinTest.$(OBJEXT)

TKTEST_OBJS_NATIVE = \
	$(TCLTEST_OBJS_NATIVE) \
d316 1
d327 1
d337 1
d364 1
a364 1
	$(INSTALL_DATA) @@TCL_SRC_DIR@@/doc/man.macros $(ROOT_DIR)/doc/man.macros
d372 1
a372 1
	$(TCLSH_PROG) "$(TCL_SRC_DIR_NATIVE)"/tools/man2help.tcl tcl "$(VER)" $(CORE_DOCS)
d380 4
d391 9
a399 1
runtest: tktest
d403 9
a411 1
	./$(TKTEST) 
d415 2
a416 2
install-binaries:
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) ; \
d425 20
a444 16
	@@echo "Installing $(TK_LIB_FILE) to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) $(TK_LIB_FILE) $(LIB_INSTALL_DIR)/$(TK_LIB_FILE)
	@@echo "Installing $(WISH) as $(BIN_INSTALL_DIR)/wish$(VERSION)"
	@@$(INSTALL_PROGRAM) $(WISH) $(BIN_INSTALL_DIR)/$(WISH)
	@@echo "Installing tkConfig.sh to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) tkConfig.sh $(LIB_INSTALL_DIR)/tkConfig.sh
	@@if test "$(DLLSUFFIX)" != "" ; then \
	    echo "Installing $(TK_DLL_FILE) to $(LIB_INSTALL_DIR)/" ; \
	    $(INSTALL_PROGRAM) $(TK_DLL_FILE) \
		$(BIN_INSTALL_DIR)/$(TK_DLL_FILE) ; \
	fi
	@@if test "$(TK_STUB_LIB_FILE)" != "" ; then \
	    if [ -f $(TK_STUB_LIB_FILE) ]; then \
	        echo "Installing $(TK_STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	        $(INSTALL_DATA) $(TK_STUB_LIB_FILE) \
			 $(LIB_INSTALL_DIR)/$(TK_STUB_LIB_FILE); \
d446 1
a446 1
        fi
d448 1
a448 1
install-libraries:
d451 2
a452 1
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images; \
d461 3
a463 3
	@@echo "Installing header files";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkDecls.h \
		$(GENERIC_DIR)/tkIntXlibDecls.h ; \
d484 7
d524 1
a524 1
install-doc:
d527 3
a529 3
$(WISH): $(TK_LIB_FILE) $(WISH_OBJS) $(WISH_RES)
	$(CC) $(CFLAGS) $(WISH_OBJS) $(TCL_LIB_SPEC) $(TK_LIB_FILE) $(LIBS) \
	$(WISH_RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)
d533 2
a534 2
$(TKTEST): $(TK_LIB_FILE) $(TKTEST_OBJS) $(WISH_RES) $(CAT32)
	$(CC) $(CFLAGS) $(TKTEST_OBJS_NATIVE) $(TCL_LIB_SPEC) \
d536 1
a536 1
	$(WISH_RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)
a543 15
# WISH_RES 
$(RC_DIR)/wish_static.rc : $(RC_DIR)/wish.rc $(RC_DIR)/tk_base.rc
	cat $(RC_DIR)/wish.rc $(RC_DIR)/tk_base.rc > $(RC_DIR)/wish_static.rc

wish_static.$(RES) : $(RC_DIR)/wish_static.rc
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@


# TK_RES
$(RC_DIR)/tk_dll.rc : $(RC_DIR)/tk.rc $(RC_DIR)/tk_base.rc
	cat $(RC_DIR)/tk.rc $(RC_DIR)/tk_base.rc > $(RC_DIR)/tk_dll.rc

tk_dll.$(RES) : $(RC_DIR)/tk_dll.rc
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@

d554 1
a554 3
	@@MAKE_DLL@@ ${TK_OBJS} $(TK_RES) $(SHLIB_LD_LIBS) $(TK_DLL_BASE)

${GNU_TK_LIB_FILE}: ${TK_DLL_FILE}
d556 1
a556 1
${MSVC_TK_LIB_FILE}: ${TK_OBJS}
a577 2
tclThreadTest.$(OBJEXT): $(TCL_BIN_DIR)/tclThreadTest.$(OBJEXT)

d591 1
a591 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@
d599 1
a599 1
	$(RM) *.lib *.a *.exp *.dll *.$(RES) *.${OBJEXT} *~ \#* TAGS a.out
d608 16
@


1.6
log
@touched all sources to ease next import
@
text
@@


1.5
log
@        * win/winMain.c (main): Ifdef out for cygwin.

        * win/tcl.m4 (SC_CONFIG_CFLAGS): Add TK_DLL_BASE variable
        to define DLL image bases on cygwin.
        Do not link with "-e _WinMain@@16" on cygwin.
        * win/configure.in (TK_DLL_BASE): Substitute into makefile.
        * win/configure: Regenerated.
        * win/Makefile.in: Use TK_DLL_BASE to build DLLs.
@
text
@@


1.4
log
@touched all tk files to ease next import
@
text
@d121 1
d537 1
a537 1
	@@MAKE_DLL@@ ${TK_OBJS} $(TK_RES) $(SHLIB_LD_LIBS)
@


1.3
log
@Tk8.3 upgrade merge.
@
text
@@


1.2
log
@Change various Makefile.in to use standard autoconf variables.
@
text
@d1 30
a30 50
# Visual C++ 2.x and 4.0 makefile
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1995-1996 Sun Microsystems, Inc.
# SCCS: @@(#) makefile.vc 1.63 97/08/13 13:33:32

# Does not depend on the presence of any environment variables in
# order to compile tcl; all needed information is derived from 
# location of the compiler directories.

# This file is CYGNUS LOCAL.  It is a copy of makefile.vc from the
# standard tk distribution, modified to work with cygwin and an
# autoconf configure script.  I have chosen to minimize the number of
# changes, so the comments continue to refer to Visual C++ and the
# like.  This should make it easier to merge in a new version if that
# is necessary.

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@
srcdir = @@srcdir@@
VPATH = $(srcdir):$(srcdir)/../xlib:$(srcdir)/../generic:$(srcdir)/../unix:$(srcdir)/../win/rc
libdir=@@libdir@@
bindir=@@bindir@@
includedir=@@includedir@@
mandir=@@mandir@@
datadir=@@datadir@@
host_alias=@@host_alias@@

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

CC = @@CC@@
CFLAGS = @@CFLAGS@@
NM = @@NM@@
AS = @@AS@@
LD = @@LD@@
DLLTOOL = @@DLLTOOL@@
WINDRES = @@WINDRES@@

OBJEXT=@@OBJEXT@@

DLL_LDFLAGS = @@DLL_LDFLAGS@@
DLL_LDLIBS = @@DLL_LDLIBS@@

# Current Tk version;  used in various names.

DIRVERSION = @@TK_VERSION@@
d37 1
a37 1
INSTALL_ROOT =
d39 1
a39 1
# Directory from which applications will reference the library of Tcl
d41 2
a42 2
# run-time to override the compiled-in location):
TK_LIBRARY =		$(datadir)/tk$(DIRVERSION)
d44 5
a48 2
# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)$(TK_LIBRARY)
d51 1
a51 1
LIB_INSTALL_DIR =	$(INSTALL_ROOT)$(libdir)
d53 2
a54 2
# Directory in which to install the program wish:
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(bindir)
d57 4
a60 1
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)$(includedir)
d62 288
a349 3
# Directory in which to install the X11 header files.  These files are
# not machine independent, so they should not go in includedir.
X11_INCLUDE_INSTALL_DIR = $(INSTALL_ROOT)$(includedir)/X11
d353 32
a384 14
#
# Project directories
#
# ROOT    = top of source tree
#
# TMPDIR  = location where .obj files should be stored during build
#
# TOOLS32 = location of VC++ 32-bit development tools. Note that the
#	    VC++ 2.0 header files are broken, so you need to use the
#	    ones that come with the developer network CD's, or later
#	    versions of VC++.
#
# TCLDIR = location of top of Tcl source heirarchy
#
d386 5
a390 268
ROOT	= $(srcdir)/..
TMPDIR	= .
TOOLS32	= c:\msdev
TCLDIR	= $(srcdir)/../../tcl

# Set this to the appropriate value of /MACHINE: for your platform
MACHINE	= IX86

# Comment the following line to compile with symbols
NODEBUG=1

# uncomment the following two lines to compile with TCL_MEM_DEBUG
#DEBUGDEFINES	=-DTCL_MEM_DEBUG

######################################################################
# Do not modify below this line
######################################################################

VERSION = 80

TCLDLL = cygtcl$(VERSION).dll
TCLLIB = libtcl$(VERSION).a
TCLPLUGINDLL = cygtcl$(VERSION)p.dll
TCLPLUGINLIB = libtcl$(VERSION)p.a
TKDLL = cygtk$(VERSION).dll
TKLIB = libtk$(VERSION).a
TKPLUGINDLL = cygtk$(VERSION)p.dll
TKPLUGINLIB = libtk$(VERSION)p.a

WISH = cygwish$(VERSION).exe
WISHP = cygwishp$(VERSION).exe
TKTEST = tktest.exe
DUMPEXTS = $(TMPDIR)/dumpexts.exe

WISHOBJS = \
	$(TMPDIR)/tkConsole.$(OBJEXT) \
	$(TMPDIR)/winMain.$(OBJEXT)

TKTESTOBJS = \
	$(TMPDIR)/tkConsole.$(OBJEXT) \
	$(TMPDIR)/tkTest.$(OBJEXT) \
	$(TMPDIR)/tkSquare.$(OBJEXT) \
	$(TMPDIR)/testMain.$(OBJEXT)

XLIBOBJS = \
	$(TMPDIR)/xcolors.$(OBJEXT) \
	$(TMPDIR)/xdraw.$(OBJEXT) \
	$(TMPDIR)/xgc.$(OBJEXT) \
	$(TMPDIR)/ximage.$(OBJEXT) \
	$(TMPDIR)/xutil.$(OBJEXT)

TKOBJS = \
	$(TMPDIR)/tkUnixMenubu.$(OBJEXT) \
	$(TMPDIR)/tkUnixScale.$(OBJEXT) \
	$(XLIBOBJS) \
	$(TMPDIR)/tkWin3d.$(OBJEXT) \
	$(TMPDIR)/tkWin32Dll.$(OBJEXT) \
	$(TMPDIR)/tkWinButton.$(OBJEXT) \
	$(TMPDIR)/tkWinClipboard.$(OBJEXT) \
	$(TMPDIR)/tkWinColor.$(OBJEXT) \
	$(TMPDIR)/tkWinCursor.$(OBJEXT) \
	$(TMPDIR)/tkWinDialog.$(OBJEXT) \
	$(TMPDIR)/tkWinDraw.$(OBJEXT) \
	$(TMPDIR)/tkWinEmbed.$(OBJEXT) \
	$(TMPDIR)/tkWinFont.$(OBJEXT) \
	$(TMPDIR)/tkWinImage.$(OBJEXT) \
	$(TMPDIR)/tkWinInit.$(OBJEXT) \
	$(TMPDIR)/tkWinKey.$(OBJEXT) \
	$(TMPDIR)/tkWinMenu.$(OBJEXT) \
	$(TMPDIR)/tkWinPixmap.$(OBJEXT) \
	$(TMPDIR)/tkWinPointer.$(OBJEXT) \
	$(TMPDIR)/tkWinRegion.$(OBJEXT) \
	$(TMPDIR)/tkWinScrlbr.$(OBJEXT) \
	$(TMPDIR)/tkWinSend.$(OBJEXT) \
	$(TMPDIR)/tkWinWindow.$(OBJEXT) \
	$(TMPDIR)/tkWinWm.$(OBJEXT) \
	$(TMPDIR)/tkWinX.$(OBJEXT) \
	$(TMPDIR)/stubs.$(OBJEXT) \
	$(TMPDIR)/tk3d.$(OBJEXT) \
	$(TMPDIR)/tkArgv.$(OBJEXT) \
	$(TMPDIR)/tkAtom.$(OBJEXT) \
	$(TMPDIR)/tkBind.$(OBJEXT) \
	$(TMPDIR)/tkBitmap.$(OBJEXT) \
	$(TMPDIR)/tkButton.$(OBJEXT) \
	$(TMPDIR)/tkCanvArc.$(OBJEXT) \
	$(TMPDIR)/tkCanvBmap.$(OBJEXT) \
	$(TMPDIR)/tkCanvImg.$(OBJEXT) \
	$(TMPDIR)/tkCanvLine.$(OBJEXT) \
	$(TMPDIR)/tkCanvPoly.$(OBJEXT) \
	$(TMPDIR)/tkCanvPs.$(OBJEXT) \
	$(TMPDIR)/tkCanvText.$(OBJEXT) \
	$(TMPDIR)/tkCanvUtil.$(OBJEXT) \
	$(TMPDIR)/tkCanvWind.$(OBJEXT) \
	$(TMPDIR)/tkCanvas.$(OBJEXT) \
	$(TMPDIR)/tkClipboard.$(OBJEXT) \
	$(TMPDIR)/tkCmds.$(OBJEXT) \
	$(TMPDIR)/tkColor.$(OBJEXT) \
	$(TMPDIR)/tkConfig.$(OBJEXT) \
	$(TMPDIR)/tkCursor.$(OBJEXT) \
	$(TMPDIR)/tkEntry.$(OBJEXT) \
	$(TMPDIR)/tkError.$(OBJEXT) \
	$(TMPDIR)/tkEvent.$(OBJEXT) \
	$(TMPDIR)/tkFileFilter.$(OBJEXT) \
	$(TMPDIR)/tkFocus.$(OBJEXT) \
	$(TMPDIR)/tkFont.$(OBJEXT) \
	$(TMPDIR)/tkFrame.$(OBJEXT) \
	$(TMPDIR)/tkGC.$(OBJEXT) \
	$(TMPDIR)/tkGeometry.$(OBJEXT) \
	$(TMPDIR)/tkGet.$(OBJEXT) \
	$(TMPDIR)/tkGrab.$(OBJEXT) \
	$(TMPDIR)/tkGrid.$(OBJEXT) \
	$(TMPDIR)/tkImage.$(OBJEXT) \
	$(TMPDIR)/tkImgBmap.$(OBJEXT) \
	$(TMPDIR)/tkImgGIF.$(OBJEXT) \
	$(TMPDIR)/tkImgPPM.$(OBJEXT) \
	$(TMPDIR)/tkImgPhoto.$(OBJEXT) \
	$(TMPDIR)/tkImgUtil.$(OBJEXT) \
	$(TMPDIR)/tkListbox.$(OBJEXT) \
	$(TMPDIR)/tkMacWinMenu.$(OBJEXT) \
	$(TMPDIR)/tkMain.$(OBJEXT) \
	$(TMPDIR)/tkMenu.$(OBJEXT) \
	$(TMPDIR)/tkMenubutton.$(OBJEXT) \
	$(TMPDIR)/tkMenuDraw.$(OBJEXT) \
	$(TMPDIR)/tkMessage.$(OBJEXT) \
	$(TMPDIR)/tkOption.$(OBJEXT) \
	$(TMPDIR)/tkPack.$(OBJEXT) \
	$(TMPDIR)/tkPlace.$(OBJEXT) \
	$(TMPDIR)/tkPointer.$(OBJEXT) \
	$(TMPDIR)/tkRectOval.$(OBJEXT) \
	$(TMPDIR)/tkScale.$(OBJEXT) \
	$(TMPDIR)/tkScrollbar.$(OBJEXT) \
	$(TMPDIR)/tkSelect.$(OBJEXT) \
	$(TMPDIR)/tkText.$(OBJEXT) \
	$(TMPDIR)/tkTextBTree.$(OBJEXT) \
	$(TMPDIR)/tkTextDisp.$(OBJEXT) \
	$(TMPDIR)/tkTextImage.$(OBJEXT) \
	$(TMPDIR)/tkTextIndex.$(OBJEXT) \
	$(TMPDIR)/tkTextMark.$(OBJEXT) \
	$(TMPDIR)/tkTextTag.$(OBJEXT) \
	$(TMPDIR)/tkTextWind.$(OBJEXT) \
	$(TMPDIR)/tkTrig.$(OBJEXT) \
	$(TMPDIR)/tkUtil.$(OBJEXT) \
	$(TMPDIR)/tkVisual.$(OBJEXT) \
	$(TMPDIR)/tkWindow.$(OBJEXT)

cc32		= $(TOOLS32)\bin\cl.exe
link32		= $(TOOLS32)\bin\link.exe
rc32		= $(TOOLS32)\bin\rc.exe
include32	= -I$(TOOLS32)\include

WINDIR          = $(ROOT)/win
GENERICDIR	= $(ROOT)/generic
XLIBDIR		= $(ROOT)/xlib
BITMAPDIR	= $(ROOT)/bitmaps
TCLLIBDIR       = ../../tcl/win
RCDIR		= $(WINDIR)/rc

TK_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR) -I$(BITMAPDIR) -I$(XLIBDIR) \
			-I$(TCLDIR)/generic
TK_DEFINES	= $(DEBUGDEFINES)

TK_CFLAGS	= $(cdebug) $(cflags) $(cvarsdll) \
			$(TK_INCLUDES) $(TK_DEFINES) $(CFLAGS)

######################################################################
# Link flags
######################################################################

#!IFDEF NODEBUG
#ldebug = /RELEASE
#!ELSE
#ldebug = -debug:full -debugtype:cv
#!ENDIF

# declarations common to all linker options
# lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
#!IF "$(MACHINE)" == "IX86"
#DLLENTRY = @@12
#lflags   = $(lcommon) -align:0x1000 /MACHINE:$(MACHINE)
#!ELSE
#lflags   = $(lcommon) /MACHINE:$(MACHINE)
#!ENDIF

ifeq ($(OBJEXT),obj)

lcommon = /NODEFAULTLIB /RELEASE /NOLOGO
lflags   = $(lcommon) -align:0x1000 /MACHINE:$(MACHINE)
conlflags = $(lflags)  -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup
dlllflags = $(lflags) -entry:_DllMainCRTStartup@@12 -dll

else

conlflags = $(lflags) -Wl,--subsystem,console -mwindows
guilflags = $(lflags) -mwindows
dlllflags = $(lflags)

endif

#!IF "$(MACHINE)" == "PPC"
#libc = libc.lib
#libcdll = crtdll.lib
#!ELSE
#libc = libc.lib oldnames.lib
#libcdll = msvcrt.lib oldnames.lib
#!ENDIF

ifeq ($(OBJEXT),o)

baselibs   = -lkernel32 $(optlibs) -ladvapi32
winlibs    = $(baselibs) -luser32 -lgdi32 -lcomdlg32 -lwinspool

else

baselibs   = kernel32.lib $(optlibs) advapi32.lib
winlibs    = $(baselibs) user32.lib gdi32.lib comdlg32.lib winspool.lib
libcdll    = msvcrt.lib oldnames.lib

endif

guilibs	   = $(libc) $(winlibs)

guilibsdll = $(libcdll) $(winlibs)

######################################################################
# Compile flags
######################################################################

#!IFDEF NODEBUG
#cdebug = -Ox
#!ELSE
#cdebug = -Z7 -Od -WX
#!ENDIF

# declarations common to all compiler options
#ccommon = -c -W3 -nologo -YX

#!IF "$(MACHINE)" == "IX86"
#cflags = $(ccommon) -D_X86_=1
#!ELSE
#!IF "$(MACHINE)" == "MIPS"
#cflags = $(ccommon) -D_MIPS_=1
#!ELSE
#!IF "$(MACHINE)" == "PPC"
#cflags = $(ccommon) -D_PPC_=1
#!ELSE
#!IF "$(MACHINE)" == "ALPHA"
#cflags = $(ccommon) -D_ALPHA_=1
#!ENDIF
#!ENDIF
#!ENDIF
#!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL

CON_CFLAGS	= $(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE

######################################################################
# Project specific targets
######################################################################

all:    $(TKDLL) $(TKLIB) $(WISH)
test:	$(TKTEST)
plugin:	$(TKPLUGINDLL) $(WISHP)
d392 1
a392 1
install: install-binaries install-libraries install-demos
d394 1
a394 1
install-binaries: $(TKDLL) $(TKLIB) $(WISH)
d399 1
a399 1
		mkdir $$i; \
d404 3
a406 4
	@@echo "Installing $(TKLIB)"
	@@$(INSTALL_DATA) $(TKLIB) $(LIB_INSTALL_DIR)/$(TKLIB)
	@@chmod 555 $(LIB_INSTALL_DIR)/$(TKLIB)
	@@echo "Installing wish"
d408 14
a421 2
	@@echo "Installing tkConfig.sh"
	@@$(INSTALL_DATA) ../unix/tkConfig.sh $(LIB_INSTALL_DIR)/tkConfig.sh
d424 3
a426 7
	@@echo "Installing DLL"
	@@$(INSTALL_DATA) $(TKDLL) $(BIN_INSTALL_DIR)/$(TKDLL)
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) $(INSTALL_ROOT)@@exec_prefix@@ \
		$(INSTALL_ROOT)@@exec_prefix@@/@@host_alias@@ \
		$(INSTALL_ROOT)@@exec_prefix@@/@@host_alias@@/include \
		$(X11_INCLUDE_INSTALL_DIR) ; \
d430 1
a430 1
		mkdir $$i; \
d435 3
a437 3
	@@echo "Installing tk.h"
	@@$(INSTALL_DATA) $(GENERICDIR)/tk.h $(INCLUDE_INSTALL_DIR)/tk.h
	for i in $(XLIBDIR)/X11/*.h; \
d439 1
a439 2
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(X11_INCLUDE_INSTALL_DIR); \
d441 1
a441 1
	for i in $(ROOT)/library/*.tcl $(ROOT)/library/tclIndex $(ROOT)/library/prolog.ps $(ROOT)/unix/tkAppInit.c; \
d443 1
a443 2
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d445 3
a447 5

install-minimal:
	@@echo "Installing DLL"
	@@$(INSTALL_DATA) $(TKDLL) $(BIN_INSTALL_DIR)/$(TKDLL)
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(SCRIPT_INSTALL_DIR) ; \
d449 1
a449 6
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
d451 2
a452 1
	for i in $(ROOT)/library/*.tcl $(ROOT)/library/tclIndex $(ROOT)/library/prolog.ps; \
d454 3
a456 2
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d460 1
a460 1
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(SCRIPT_INSTALL_DIR) \
d466 1
a466 1
		mkdir $$i; \
d471 2
a472 1
	@@for i in $(ROOT)/library/demos/*; \
d475 1
a475 2
		echo "Installing $$i"; \
		sed -e '3 s|exec wish|exec $(WISH)|' \
d483 2
a484 1
	@@for i in $(ROOT)/library/demos/images/*; \
a486 1
		echo "Installing $$i"; \
d491 37
a527 1
ifeq ($(OBJEXT),o)
d529 15
a543 104
$(TKDLL): $(TKOBJS) tkres.$(OBJEXT) tkcyg.def
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tk.base -o $(TKDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66300000
	$(DLLTOOL) --as=$(AS) --dllname $(TKDLL) --def $(TMPDIR)/tkcyg.def --base-file tk.base --output-exp tk.exp
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tk.base tk.exp -o $(TKDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66300000
	$(DLLTOOL) --as=$(AS) --dllname $(TKDLL) --def $(TMPDIR)/tkcyg.def --base-file tk.base --output-exp tk.exp
	$(CC) $(DLL_LDFLAGS) tk.exp -o $(TKDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66300000

else

$(TKDLL): $(TKOBJS) tkres.$(OBJEXT) tkcyg.def
	link $(ldebug) $(dlllflags) -def:tkcyg.def \
		-out:$@@ tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) \
		$(guilibsdll) $(TKOBJS)
	mv cygtk80.lib libtk80.a
endif

ifeq ($(OBJEXT),o)

$(TKLIB): $(TMPDIR)/tkcyg.def
	$(DLLTOOL) --as=$(AS) --dllname $(TKDLL) --def $(TMPDIR)/tkcyg.def --output-lib $(TKLIB)

else

$(TKLIB): $(TKDLL)

endif

$(TKPLUGINLIB): $(TMPDIR)/plugin.def
	$(DLLTOOL) --as=$(AS) --dllname $(TKPLUGINDLL) --def $(TMPDIR)/plugin.def --output-lib $(TKPLUGINLIB)

$(TKPLUGINDLL): $(TKOBJS) tkres.$(OBJEXT) $(TMPDIR)/plugin.def
	$(CC) $(DLL_LDFLAGS) -Wl,--base-file,tkplugin.base -o $(TKPLUGINDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66800000
	$(DLLTOOL) --as=$(AS) --dllname $(TKPLUGINDLL) --def $(TMPDIR)/plugin.def --base-file tkplugin.base --output-exp tk.exp
	$(CC) $(DLL_LDFLAGS) -Wl,--base-file,tkplugin.base tk.exp -o $(TKPLUGINDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66800000
	$(DLLTOOL) --as=$(AS) --dllname $(TKPLUGINDLL) --def $(TMPDIR)/plugin.def --base-file tkplugin.base --output-exp tk.exp
	$(CC) $(DLL_LDFLAGS) tk.exp -o $(TKPLUGINDLL) $(TKOBJS) tkres.$(OBJEXT) $(TCLLIBDIR)/$(TCLLIB) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66800000

ifeq ($(OBJEXT),o)

$(WISH): $(WISHOBJS) wishres.$(OBJEXT) $(TKLIB)
	$(CC) $(ldebug) $(guilflags) $(WISHOBJS) wishres.$(OBJEXT) -o $@@ \
		$(TKLIB) $(TCLLIBDIR)/$(TCLLIB) $(guilibsdll)

else

$(WISH): $(WISHOBJS) wishres.$(OBJEXT) $(TKLIB)
	link $(ldebug) $(guilflags) $(WISHOBJS) wishres.$(OBJEXT) -OUT:$@@ \
		$(TKLIB) $(TCLLIBDIR)/$(TCLLIB) $(guilibsdll)
endif

$(WISHP): $(WISHOBJS) $(TKPLUGINLIB) wishres.$(OBJEXT)
	$(CC) $(ldebug) $(guilflags) $(WISHOBJS) wishres.$(OBJEXT) -o $@@ \
		$(TKPLUGINLIB) $(TCLLIBDIR)/$(TCLPLUGINLIB) $(guilibsdll)

$(TKTEST): $(TKTESTOBJS) wishres.$(OBJEXT) $(TKLIB)
	$(CC) $(ldebug) $(guilflags) $(TKTESTOBJS) wishres.$(OBJEXT) -o $@@ \
		$(TKLIB) $(TCLLIBDIR)/$(TCLLIB) $(guilibsdll)

ifeq ($(OBJEXT),o)
tkcyg.def: $(TKOBJS)
	echo 'EXPORTS' > tmp.def
	for o in $(TKOBJS); do \
	  $(NM) --extern-only --defined-only $$o | sed -e 's/[^ ]* [^ ]* //' -e 's/^_//' | fgrep -v DllEntryPoint | fgrep -v DllMain | fgrep -v impure_ptr >> tmp.def; \
	done
	mv tmp.def $(TMPDIR)/tkcyg.def

plugin.def: $(TKOBJS)
	echo 'EXPORTS' > tmp.def
	for o in $(TKOBJS); do \
	  $(NM) --extern-only --defined-only $$o | sed -e 's/[^ ]* [^ ]* //' -e 's/^_//' | fgrep -v DllEntryPoint | fgrep -v DllMain | fgrep -v impure_ptr >> tmp.def; \
	done
	mv tmp.def $(TMPDIR)/plugin.def

else

# Source-Navigator need the extra Symbols.

tkcyg.def: $(TKOBJS) $(DUMPEXTS)
	$(DUMPEXTS) -o tkcyg.def $(TKDLL) $(TKOBJS)
	echo "	tkWindowType" >> tkcyg.def
	echo "	tkArcType" >> tkcyg.def
	echo "	tkBitmapType" >> tkcyg.def
	echo "	tkOvalType" >> tkcyg.def
	echo "	tkImageType" >> tkcyg.def
	echo "	tkPolygonType" >> tkcyg.def
	echo "	tkLineType" >> tkcyg.def
	echo "	tkTextType" >> tkcyg.def
	echo "	tkRectangleType" >> tkcyg.def
	echo "	tkTextCharType" >> tkcyg.def

plugin.def: $(TKOBJS) $(DUMPEXTS)
	$(DUMPEXTS) -o tkcyg.def $(TKDLL) $(TKOBJS) 


$(DUMPEXTS): $(TCLDIR)/win/winDumpExts.c
	$(CC) $(TCLDIR)/win/winDumpExts.c user32.lib -link -OUT:$(DUMPEXTS)

endif

#$(DUMPEXTS): $(TCLDIR)\win\winDumpExts.c
#	$(cc32) $(CON_CFLAGS) -Fo$(TMPDIR)\ $?
#	set LIB=$(TOOLS32)\lib
#	$(link32) $(ldebug) $(conlflags) $(guilibs) -out:$@@ \
#		$(TMPDIR)\winDumpExts.$(OBJEXT)bj 
a544 1
#
a545 1
#
d547 25
a571 2
$(TMPDIR)/testMain.$(OBJEXT): $(ROOT)/win/winMain.c
	$(CC) -c $(TK_CFLAGS) -DTK_TEST -o $@@ $?
a572 4
#
# Implicit rules
#
.SUFFIXES: .S .c .o .obj .s
d574 4
a577 1
	$(CC) -c $(TK_CFLAGS) $<
d579 1
a579 1
ifeq ($(OBJEXT),o)
d581 2
a582 2
tkres.$(OBJEXT): $(ROOT)/win/rc/tk.rc
	$(WINDRES) --include $(ROOT)/win/rc --include $(ROOT)/generic --define VS_VERSION_INFO=1 $(ROOT)/win/rc/tk.rc tkres.$(OBJEXT)
d584 4
a587 56
wishres.$(OBJEXT): $(ROOT)/win/rc/wish.rc
	$(WINDRES) --include $(ROOT)/win/rc --include $(ROOT)/generic --define VS_VERSION_INFO=1 $(ROOT)/win/rc/wish.rc wishres.$(OBJEXT)

else

tkres.$(OBJEXT): $(ROOT)/win/rc/tk.rc
	rc -i$(ROOT)/win/rc -i$(ROOT)/generic -dVS_VERSION_INFO=1 -fotkres.$(OBJEXT) $(ROOT)/win/rc/tk.rc 

wishres.$(OBJEXT): $(ROOT)/win/rc/wish.rc
	rc -i$(ROOT)/win/rc -i$(ROOT)/generic -dVS_VERSION_INFO=1 -fowishres.$(OBJEXT) $(ROOT)/win/rc/wish.rc 

endif

#{$(ROOT)\win\rc}.rc{$(TMPDIR)}.res:
#	$(rc32) -fo $@@ -r -i $(ROOT)\generic $<

clean:
	rm -f *.exp *.a *.dll *.exe $(TMPDIR)/*.$(OBJEXT) *.res *.def
	rm -f tk.base tkplugin.base

# dependencies

$(TMPDIR)/tk.res: \
    $(RCDIR)/buttons.bmp \
    $(RCDIR)/cursor*.cur \
    $(RCDIR)/tk.ico

$(GENERICDIR)/default.h: $(WINDIR)/tkWinDefault.h
$(GENERICDIR)/tkButton.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkCanvas.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkEntry.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkFrame.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkListbox.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMenu.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMenubutton.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMessage.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkScale.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkScrollbar.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkText.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkTextIndex.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkTextTag.c: $(GENERICDIR)/default.h

$(GENERICDIR)/tkText.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextBTree.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextDisp.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextDisp.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextImage.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextIndex.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextMark.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextTag.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextWind.c: $(GENERICDIR)/tkText.h

$(GENERICDIR)/tkMacWinMenu.c: $(GENERICDIR)/tkMenu.h
$(GENERICDIR)/tkMenu.c: $(GENERICDIR)/tkMenu.h
$(GENERICDIR)/tkMenuDraw.c: $(GENERICDIR)/tkMenu.h
$(WINDIR)/tkWinMenu.c: $(GENERICDIR)/tkMenu.h
d589 2
a590 2
Makefile: $(WINDIR)/Makefile.in config.status
	$(SHELL) config.status
d592 2
a593 2
config.status: $(WINDIR)/configure
	./config.status --recheck
@


1.1
log
@Initial revision
@
text
@a21 1
VPATH = @@srcdir@@:@@srcdir@@/../xlib:@@srcdir@@/../generic:@@srcdir@@/../unix:@@srcdir@@/../win/rc
d23 7
d62 1
a62 1
TK_LIBRARY =		@@datadir@@/tk$(DIRVERSION)
d68 1
a68 1
LIB_INSTALL_DIR =	$(INSTALL_ROOT)@@libdir@@
d71 1
a71 1
BIN_INSTALL_DIR =	$(INSTALL_ROOT)@@bindir@@
d74 1
a74 1
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)@@includedir@@
d78 1
a78 1
X11_INCLUDE_INSTALL_DIR = $(INSTALL_ROOT)@@exec_prefix@@/@@host_alias@@/include/X11
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@d1 44
a44 30
# This file is a Makefile for Tk.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@@foo@@" will get replaced in the
# actual Makefile.
#
# RCS: @@(#) $Id: Makefile.in,v 1.9.6.13 2001/08/07 02:18:47 mdejong Exp $

TCLVERSION		= @@TCL_VERSION@@
VERSION			= @@TK_VERSION@@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@
d51 1
a51 1
INSTALL_ROOT		=
d53 1
a53 1
# Directory from which applications will reference the library of Tk
d55 2
a56 2
# run-time to override this value):
TK_LIBRARY		= @@datadir@@/tk$(VERSION)
d58 2
a59 5
# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR		= $(libdir)

# Directory in which to install the program wish:
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)
d62 1
a62 1
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)
d64 2
a65 2
# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TK_LIBRARY)
d68 1
a68 4
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)

# Top-level directory for manual entries:
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)
d70 3
a72 288
# Directory in which to install manual entry for wish:
MAN1_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for Tk's C library
# procedures:
MAN3_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Tk commands:
MANN_INSTALL_DIR	= $(MAN_INSTALL_DIR)/mann

# Libraries built with optimization switches have this additional extension
TK_DBGX			= @@TK_DBGX@@

# The directory containing the Tcl source and header files.
TCL_SRC_DIR		= @@TCL_SRC_DIR@@

# The directory containing the Tcl library archive file appropriate
# for this version of Tk:
TCL_BIN_DIR		= @@TCL_BIN_DIR@@

# The directory containing the Tcl sources and headers appropriate
# for this version of Tk ("srcdir" will be replaced or has already
# been replaced by the configure script):
TCL_GENERIC_DIR	= @@TCL_SRC_DIR@@/generic

# This program converts from POSIX to Windows native paths.
CYGPATH			= @@CYGPATH@@

# The name of the Tcl library.
TCL_LIB_SPEC	  = @@TCL_BUILD_LIB_SPEC@@
TCL_STUB_LIB_SPEC = @@TCL_BUILD_STUB_LIB_SPEC@@

SRC_DIR			= @@srcdir@@
ROOT_DIR		= $(SRC_DIR)/..
WIN_DIR			= $(SRC_DIR)
UNIX_DIR		= $(SRC_DIR)/../unix
GENERIC_DIR		= $(SRC_DIR)/../generic
BITMAP_DIR		= $(ROOT_DIR)/bitmaps
XLIB_DIR		= $(ROOT_DIR)/xlib
RC_DIR			= $(WIN_DIR)/rc

ROOT_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(ROOT_DIR)')
WIN_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(WIN_DIR)')
GENERIC_DIR_NATIVE 	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
BITMAP_DIR_NATIVE	= $(shell $(CYGPATH) '$(ROOT_DIR)/bitmaps')
XLIB_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)/xlib')
TCL_GENERIC_NATIVE	= $(shell $(CYGPATH) '$(TCL_GENERIC_DIR)')
TCL_SRC_DIR_NATIVE      = $(shell $(CYGPATH) '$(TCL_SRC_DIR)')
TCL_BIN_DIR_NATIVE      = $(shell $(CYGPATH) '$(TCL_BIN_DIR)')
RC_DIR_NATIVE      	= $(shell $(CYGPATH) '$(RC_DIR)')

DLLSUFFIX		= @@DLLSUFFIX@@
LIBSUFFIX		= @@LIBSUFFIX@@
EXESUFFIX		= @@EXESUFFIX@@

TK_STUB_LIB_FILE	= @@TK_STUB_LIB_FILE@@
TK_LIB_FILE		= @@TK_LIB_FILE@@
TK_DLL_FILE		= @@TK_DLL_FILE@@

SHARED_LIBRARIES 	= $(TK_DLL_FILE) $(TK_STUB_LIB_FILE)
STATIC_LIBRARIES	= $(TK_LIB_FILE)

WISH_RES		= @@WISH_RES@@
TK_RES			= @@TK_RES@@

WISH			= wish$(VER)${EXESUFFIX}
TKTEST			= tktest${EXEEXT}
CAT32			= cat32$(EXEEXT)
MAN2TCL			= man2tcl$(EXEEXT)

@@SET_MAKE@@

# Setting the VPATH variable to a list of paths will cause the 
# makefile to look into these paths when resolving .c to .obj
# dependencies.

VPATH = $(GENERIC_DIR):$(WIN_DIR):$(UNIX_DIR):$(XLIB_DIR):$(RC_DIR)

# warning flags
CFLAGS_WARNING	= @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@

# The default switches for optimization or debugging
LDFLAGS_DEBUG    = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS		= $(CFLAGS_DEBUG)
#CFLAGS		= $(CFLAGS_OPTIMIZE)
#CFLAGS		= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS		= @@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS	= @@MAN2TCLFLAGS@@

AR		= @@AR@@
RANLIB		= @@RANLIB@@
CC		= @@CC@@
RC		= @@RC@@
RES		= @@RES@@
AC_FLAGS	= @@EXTRA_CFLAGS@@ @@DEFS@@
CPPFLAGS	= @@CPPFLAGS@@
LDFLAGS		= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@
LDFLAGS_CONSOLE	= @@LDFLAGS_CONSOLE@@
LDFLAGS_WINDOW	= @@LDFLAGS_WINDOW@@
EXEEXT		= @@EXEEXT@@
OBJEXT		= @@OBJEXT@@
LIBS_GUI	= @@LIBS_GUI@@
STLIB_LD	= @@STLIB_LD@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(TCL_STUB_LIB_SPEC) $(LIBS_GUI)
SHLIB_SUFFIX	= @@SHLIB_SUFFIX@@
VER		= @@TK_MAJOR_VERSION@@@@TK_MINOR_VERSION@@
DOTVER		= @@TK_MAJOR_VERSION@@.@@TK_MINOR_VERSION@@
LIBS		= @@LIBS@@ $(LIBS_GUI)
RMDIR		= rm -rf
MKDIR		= mkdir -p
SHELL		= @@SHELL@@
RM		= rm -f
COPY		= cp

# FIXME: Add a "make shell SCRIPT=foo.tcl" argument
# so that a shell can easily be run from the build dir.
TCLSH_PROG	= $(TCL_BIN_DIR)/tclsh$(VER)

CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" \
-I"${XLIB_DIR_NATIVE}" -I"${BITMAP_DIR_NATIVE}" \
 -I"${TCL_GENERIC_NATIVE}" ${AC_FLAGS}

CC_OBJNAME = @@CC_OBJNAME@@
CC_EXENAME = @@CC_EXENAME@@

STUB_CC_SWITCHES	= ${CC_SWITCHES} -DUSE_TCL_STUBS
CON_CC_SWITCHES		= ${CC_SWITCHES} -DCONSOLE

# Tk used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL		= cp
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA	= ${INSTALL}

WISH_OBJS = \
	winMain.$(OBJEXT)

TCLTEST_OBJS = \
	${TCL_BIN_DIR}/tclThreadTest.$(OBJEXT)

TCLTEST_OBJS_NATIVE = \
	"${TCL_BIN_DIR_NATIVE}/tclThreadTest.$(OBJEXT)"

TKTEST_OBJS = \
	$(TCLTEST_OBJS) \
	testMain.$(OBJEXT) \
	tkSquare.$(OBJEXT) \
	tkTest.$(OBJEXT) \
	tkWinTest.$(OBJEXT)

TKTEST_OBJS_NATIVE = \
	$(TCLTEST_OBJS_NATIVE) \
	testMain.$(OBJEXT) \
	tkSquare.$(OBJEXT) \
	tkTest.$(OBJEXT) \
	tkWinTest.$(OBJEXT)

XLIB_OBJS = \
	xcolors.$(OBJEXT) \
	xdraw.$(OBJEXT) \
	xgc.$(OBJEXT) \
	ximage.$(OBJEXT) \
	xutil.$(OBJEXT)

TK_OBJS = \
	tkConsole.$(OBJEXT) \
	tkUnixMenubu.$(OBJEXT) \
	tkUnixScale.$(OBJEXT) \
	$(XLIB_OBJS) \
	tkWin3d.$(OBJEXT) \
	tkWin32Dll.$(OBJEXT) \
	tkWinButton.$(OBJEXT) \
	tkWinClipboard.$(OBJEXT) \
	tkWinColor.$(OBJEXT) \
	tkWinConfig.$(OBJEXT) \
	tkWinCursor.$(OBJEXT) \
	tkWinDialog.$(OBJEXT) \
	tkWinDraw.$(OBJEXT) \
	tkWinEmbed.$(OBJEXT) \
	tkWinFont.$(OBJEXT) \
	tkWinImage.$(OBJEXT) \
	tkWinInit.$(OBJEXT) \
	tkWinKey.$(OBJEXT) \
	tkWinMenu.$(OBJEXT) \
	tkWinPixmap.$(OBJEXT) \
	tkWinPointer.$(OBJEXT) \
	tkWinRegion.$(OBJEXT) \
	tkWinScrlbr.$(OBJEXT) \
	tkWinSend.$(OBJEXT) \
	tkWinWindow.$(OBJEXT) \
	tkWinWm.$(OBJEXT) \
	tkWinX.$(OBJEXT) \
	stubs.$(OBJEXT) \
	tk3d.$(OBJEXT) \
	tkArgv.$(OBJEXT) \
	tkAtom.$(OBJEXT) \
	tkBind.$(OBJEXT) \
	tkBitmap.$(OBJEXT) \
	tkButton.$(OBJEXT) \
	tkCanvArc.$(OBJEXT) \
	tkCanvBmap.$(OBJEXT) \
	tkCanvImg.$(OBJEXT) \
	tkCanvLine.$(OBJEXT) \
	tkCanvPoly.$(OBJEXT) \
	tkCanvPs.$(OBJEXT) \
	tkCanvText.$(OBJEXT) \
	tkCanvUtil.$(OBJEXT) \
	tkCanvWind.$(OBJEXT) \
	tkCanvas.$(OBJEXT) \
	tkClipboard.$(OBJEXT) \
	tkCmds.$(OBJEXT) \
	tkColor.$(OBJEXT) \
	tkConfig.$(OBJEXT) \
	tkCursor.$(OBJEXT) \
	tkEntry.$(OBJEXT) \
	tkError.$(OBJEXT) \
	tkEvent.$(OBJEXT) \
	tkFileFilter.$(OBJEXT) \
	tkFocus.$(OBJEXT) \
	tkFont.$(OBJEXT) \
	tkFrame.$(OBJEXT) \
	tkGC.$(OBJEXT) \
	tkGeometry.$(OBJEXT) \
	tkGet.$(OBJEXT) \
	tkGrab.$(OBJEXT) \
	tkGrid.$(OBJEXT) \
	tkImage.$(OBJEXT) \
	tkImgBmap.$(OBJEXT) \
	tkImgGIF.$(OBJEXT) \
	tkImgPPM.$(OBJEXT) \
	tkImgPhoto.$(OBJEXT) \
	tkImgUtil.$(OBJEXT) \
	tkListbox.$(OBJEXT) \
	tkMacWinMenu.$(OBJEXT) \
	tkMain.$(OBJEXT) \
	tkMenu.$(OBJEXT) \
	tkMenubutton.$(OBJEXT) \
	tkMenuDraw.$(OBJEXT) \
	tkMessage.$(OBJEXT) \
	tkObj.$(OBJEXT) \
	tkOldConfig.$(OBJEXT) \
	tkOption.$(OBJEXT) \
	tkPack.$(OBJEXT) \
	tkPlace.$(OBJEXT) \
	tkPointer.$(OBJEXT) \
	tkRectOval.$(OBJEXT) \
	tkScale.$(OBJEXT) \
	tkScrollbar.$(OBJEXT) \
	tkSelect.$(OBJEXT) \
	tkText.$(OBJEXT) \
	tkTextBTree.$(OBJEXT) \
	tkTextDisp.$(OBJEXT) \
	tkTextImage.$(OBJEXT) \
	tkTextIndex.$(OBJEXT) \
	tkTextMark.$(OBJEXT) \
	tkTextTag.$(OBJEXT) \
	tkTextWind.$(OBJEXT) \
	tkTrig.$(OBJEXT) \
	tkUtil.$(OBJEXT) \
	tkVisual.$(OBJEXT) \
	tkStubInit.$(OBJEXT) \
	tkStubLib.$(OBJEXT) \
	tkWindow.$(OBJEXT)

STUB_OBJS = \
	tkStubLib.$(OBJEXT) \
	tkStubImg.$(OBJEXT)

TCL_DOCS = "$(TCL_SRC_DIR_NATIVE)"/doc/*.[13n]
TK_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]
CORE_DOCS = $(TCL_DOCS) $(TK_DOCS)
d76 14
a89 25
# Main targets.  The default target -- all -- builds the binaries, 
# performs any post processing on libraries or documents.

all: binaries libraries doc

binaries: @@LIBRARIES@@ $(WISH)

libraries:

$(ROOT_DIR)/doc/man.macros:
	$(INSTALL_DATA) @@TCL_SRC_DIR@@/doc/man.macros $(ROOT_DIR)/doc/man.macros

doc: $(ROOT_DIR)/doc/man.macros

winhelp: $(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	$(TCLSH_PROG) "$(TCL_SRC_DIR_NATIVE)"/tools/man2help.tcl tcl "$(VER)" $(CORE_DOCS)
	$(COPY) "$(TCL_BIN_DIR)"/tcl.hpj ./
	hcw /c /e tcl.hpj
	$(COPY) ./tcl$(VER).cnt ./TCL$(VER).HLP "$(TCL_SRC_DIR_NATIVE)"/tools/

$(MAN2TCL): $(TCL_SRC_DIR_NATIVE)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(TCL_SRC_DIR_NATIVE)"/tools/man2tcl.c
d91 268
a358 6
test: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)
d360 1
a360 5
runtest: tktest
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) 
d362 1
a362 3
install: all install-binaries install-libraries install-doc install-demos

install-binaries:
d367 1
a367 1
		$(MKDIR) $$i; \
d372 4
a375 3
	@@echo "Installing $(TK_LIB_FILE) to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) $(TK_LIB_FILE) $(LIB_INSTALL_DIR)/$(TK_LIB_FILE)
	@@echo "Installing $(WISH) as $(BIN_INSTALL_DIR)/wish$(VERSION)"
d377 2
a378 14
	@@echo "Installing tkConfig.sh to $(LIB_INSTALL_DIR)/"
	@@$(INSTALL_DATA) tkConfig.sh $(LIB_INSTALL_DIR)/tkConfig.sh
	@@if test "$(DLLSUFFIX)" != "" ; then \
	    echo "Installing $(TK_DLL_FILE) to $(LIB_INSTALL_DIR)/" ; \
	    $(INSTALL_PROGRAM) $(TK_DLL_FILE) \
		$(BIN_INSTALL_DIR)/$(TK_DLL_FILE) ; \
	fi
	@@if test "$(TK_STUB_LIB_FILE)" != "" ; then \
	    if [ -f $(TK_STUB_LIB_FILE) ]; then \
	        echo "Installing $(TK_STUB_LIB_FILE) to $(LIB_INSTALL_DIR)/"; \
	        $(INSTALL_DATA) $(TK_STUB_LIB_FILE) \
			 $(LIB_INSTALL_DIR)/$(TK_STUB_LIB_FILE); \
	    fi; \
        fi
d381 7
a387 3
	@@for i in $(INSTALL_ROOT)$(prefix)/lib \
		$(INCLUDE_INSTALL_DIR) $(INCLUDE_INSTALL_DIR)/X11 \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images; \
d391 1
a391 1
		$(MKDIR) $$i; \
d396 3
a398 3
	@@echo "Installing header files";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkDecls.h \
		$(GENERIC_DIR)/tkIntXlibDecls.h ; \
d400 2
a401 1
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR); \
d403 1
a403 1
	@@for i in $(XLIB_DIR)/X11/*.h; \
d405 2
a406 1
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR)/X11; \
d408 5
a412 3
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(ROOT_DIR)/library/*.tcl $(GENERIC_DIR)/prolog.ps \
	        $(ROOT_DIR)/library/tclIndex $(UNIX_DIR)/tkAppInit.c; \
d414 6
a419 1
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d421 1
a421 2
	@@echo "Installing library images directory";
	@@for i in $(ROOT_DIR)/library/images/*; \
d423 2
a424 3
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/images; \
	    fi; \
d428 1
a428 1
	@@for i in $(INSTALL_ROOT)$(prefix)/lib $(SCRIPT_INSTALL_DIR) \
d434 1
a434 1
		$(MKDIR) $$i; \
d439 1
a439 2
	@@echo "Installing demos to $(SCRIPT_INSTALL_DIR)/demos/";
	@@for i in $(ROOT_DIR)/library/demos/*; \
d442 2
a443 1
		sed -e '3 s|exec $(WISH)|exec $(WISH)|' \
d451 1
a451 2
	@@echo "Installing demo images";
	@@for i in $(ROOT_DIR)/library/demos/images/*; \
d454 1
d459 1
a459 1
install-doc:
d461 104
d566 1
a566 51
$(WISH): $(TK_LIB_FILE) $(WISH_OBJS) $(WISH_RES)
	$(CC) $(CFLAGS) $(WISH_OBJS) $(TCL_LIB_SPEC) $(TK_LIB_FILE) $(LIBS) \
	$(WISH_RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

tktest : $(TKTEST)

$(TKTEST): $(TK_LIB_FILE) $(TKTEST_OBJS) $(WISH_RES) $(CAT32)
	$(CC) $(CFLAGS) $(TKTEST_OBJS_NATIVE) $(TCL_LIB_SPEC) \
	$(TK_LIB_FILE) $(LIBS) \
	$(WISH_RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

cat32.${OBJEXT}: $(TCL_SRC_DIR)/win/cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

$(CAT32): cat32.${OBJEXT}
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

# WISH_RES 
$(RC_DIR)/wish_static.rc : $(RC_DIR)/wish.rc $(RC_DIR)/tk_base.rc
	cat $(RC_DIR)/wish.rc $(RC_DIR)/tk_base.rc > $(RC_DIR)/wish_static.rc

wish_static.$(RES) : $(RC_DIR)/wish_static.rc
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@


# TK_RES
$(RC_DIR)/tk_dll.rc : $(RC_DIR)/tk.rc $(RC_DIR)/tk_base.rc
	cat $(RC_DIR)/tk.rc $(RC_DIR)/tk_base.rc > $(RC_DIR)/tk_dll.rc

tk_dll.$(RES) : $(RC_DIR)/tk_dll.rc
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@

# The following targets are configured by autoconf to generate either
# a shared library or static library

${TK_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TK_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@

${TK_DLL_FILE}: ${TK_OBJS} $(TK_RES)
	@@$(RM) ${TK_DLL_FILE}
	@@MAKE_DLL@@ ${TK_OBJS} $(TK_RES) $(SHLIB_LD_LIBS)

${GNU_TK_LIB_FILE}: ${TK_DLL_FILE}

${MSVC_TK_LIB_FILE}: ${TK_OBJS}
	@@$(RM) ${TK_LIB_FILE}
	@@MAKE_LIB@@ ${TK_OBJS}
	@@POST_MAKE_LIB@@

d568 1
d570 2
a571 25
winMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

testMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ -DTK_TEST $(CC_OBJNAME)

tkTest.$(OBJEXT): tkTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkWinTest.$(OBJEXT): tkWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkSquare.$(OBJEXT): tkSquare.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclThreadTest.$(OBJEXT): $(TCL_BIN_DIR)/tclThreadTest.$(OBJEXT)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Implicit rule for all object files that will end up in the Tcl library
d573 4
d578 1
a578 4
	$(CC) -c $(STUB_CC_SWITCHES) -DBUILD_tk @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@
d580 1
a580 1
depend:
d582 2
a583 2
cleanhelp:
	$(RM) *.hlp *.cnt *.hpj *.GID *.rtf man2tcl${EXEEXT}
d585 56
a640 4
clean: cleanhelp
	$(RM) *.lib *.a *.exp *.dll *.$(RES) *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(WISH) $(TKTEST) $(CAT32)
	$(RM) *.pch *.ilk *.pdb
d642 2
a643 2
distclean: clean
	$(RM) Makefile config.status config.cache config.log tkConfig.sh
d645 2
a646 2
Makefile: $(SRC_DIR)/Makefile.in
	./config.status
@


1.1.1.3
log
@import tk 8.4.0
@
text
@d7 1
a7 1
# RCS: @@(#) $Id: Makefile.in,v 1.58 2002/09/04 17:44:55 andreas_kupries Exp $
d42 1
a42 1
TK_LIBRARY		= $(prefix)/lib/tk$(VERSION)
a75 6
# Directory in which to install the pkgIndex.tcl file for loadable Tk
PKG_INSTALL_DIR		= $(LIB_INSTALL_DIR)/tk$(VERSION)$(TK_DBGX)

# Package index file for loadable Tk
PKG_INDEX		= $(PKG_INSTALL_DIR)/pkgIndex.tcl

a86 1
TCL_TOOL_DIR = @@TCL_SRC_DIR@@/tools
d88 1
a88 1
# Converts a POSIX path to a Windows native path.
d92 2
a93 2
TCL_LIB_FILE	  = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_LIB_FILE@@')"
TCL_STUB_LIB_FILE = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_STUB_LIB_FILE@@')"
d111 1
d125 3
a166 1
TK_RES		= @@TK_RES@@
d174 1
a176 1
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(TCL_STUB_LIB_FILE) $(LIBS)
d178 1
d182 1
a182 1
LIBS		= @@LIBS@@ @@LIBS_GUI@@
d189 3
a191 8
TCLSH_PROG	= @@TCLSH_PROG@@

# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh
d216 6
d223 8
a317 1
	tkPanedWindow.$(OBJEXT) \
a327 1
	tkStyle.$(OBJEXT) \
a336 1
	tkUndo.$(OBJEXT) \
d363 1
a363 1
	$(INSTALL_DATA) "$(TCL_SRC_DIR)/doc/man.macros" "$(ROOT_DIR)/doc/man.macros"
d371 1
a371 1
	$(TCLSH_PROG) "$(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl" tcl "$(VER)" $(CORE_DOCS)
a378 4
# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"

d386 1
a386 9
runtest: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) $(TESTFLAGS) $(SCRIPT)

# This target can be used to run wish from the build directory
# via `make shell` or `make shell SCRIPT=foo.tcl`
shell: binaries
d390 1
a390 9
	./$(WISH) $(SCRIPT)

# This target can be used to run wish inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(TCL_SRC_DIR_NATIVE)/library" > gdb.run
	@@echo "set env TK_LIBRARY=$(ROOT_DIR_NATIVE)/library" >> gdb.run
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	gdb ./$(WISH) --command=gdb.run
	@@$(RM) gdb.run
d394 2
a395 2
install-binaries: binaries
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) $(PKG_INSTALL_DIR); \
d404 16
a419 20
	@@for i in $(TK_DLL_FILE) $(WISH); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
		$(COPY) $$i "$(BIN_INSTALL_DIR)"; \
	    fi; \
	    done
	@@echo "Creating package index $(PKG_INDEX)"; 
	@@$(RM) $(PKG_INDEX);
	@@(\
	echo "if {[package vcompare [package provide Tcl]\
		$(TCLVERSION)] != 0} { return }";\
	echo "package ifneeded Tk $(VERSION)\
		[list load [file join \$$dir .. .. bin $(TK_DLL_FILE)] Tk]";\
	) > $(PKG_INDEX);
	@@for i in tkConfig.sh $(TK_LIB_FILE) $(TK_STUB_LIB_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
		$(COPY) $$i "$(LIB_INSTALL_DIR)"; \
d421 1
a421 1
	    done
d423 1
a423 1
install-libraries: libraries
d426 1
a426 2
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images \
		$(SCRIPT_INSTALL_DIR)/msgs; \
d435 3
a437 3
	@@echo "Installing header files to $(INCLUDE_INSTALL_DIR)/";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkPlatDecls.h \
		$(GENERIC_DIR)/tkIntXlibDecls.h $(GENERIC_DIR)/tkDecls.h ; \
a457 7
	@@echo "Installing translation directory";
	@@for i in $(ROOT_DIR)/library/msgs/*.msg; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/msgs; \
	    fi; \
	    done;
d491 1
a491 1
install-doc: doc
d494 3
a496 3
$(WISH): $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) $(WISH_OBJS) wish.$(RES)
	$(CC) $(CFLAGS) $(WISH_OBJS) $(TCL_LIB_FILE) $(TK_LIB_FILE) $(LIBS) \
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)
d500 2
a501 2
$(TKTEST): $(TK_LIB_FILE) $(TKTEST_OBJS) wish.$(RES) $(CAT32)
	$(CC) $(CFLAGS) $(TKTEST_OBJS) $(TCL_LIB_FILE) \
d503 1
a503 1
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)
d511 15
d538 3
a540 1
${TK_LIB_FILE}: ${TK_OBJS}
d562 2
d577 1
a577 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@
d585 1
a585 1
	$(RM) *.lib *.a *.exp *.dll *.res *.${OBJEXT} *~ \#* TAGS a.out
a593 16

#
# Regenerate the stubs files.
#

$(GENERIC_DIR)/tkStubInit.c: $(GENERIC_DIR)/tk.decls \
		$(GENERIC_DIR)/tkInt.decls
	@@echo "Warning: tkStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"

genstubs:
	$(TCL_EXE) "$(TCL_TOOL_DIR}\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tk.decls" \
            "$(GENERIC_DIR_NATIVE)\tkInt.decls"
@


