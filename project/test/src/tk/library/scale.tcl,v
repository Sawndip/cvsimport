head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.46;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.14;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.26;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.52;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.29;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.29;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.33;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.38.50;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# scale.tcl --
#
# This file defines the default bindings for Tk scale widgets and provides
# procedures that help in implementing the bindings.
#
# RCS: @@(#) $Id: scale.tcl,v 1.9 2002/02/26 01:07:08 hobbs Exp $
#
# Copyright (c) 1994 The Regents of the University of California.
# Copyright (c) 1994-1995 Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#

#-------------------------------------------------------------------------
# The code below creates the default class bindings for entries.
#-------------------------------------------------------------------------

# Standard Motif bindings:

bind Scale <Enter> {
    if {$tk_strictMotif} {
	set tk::Priv(activeBg) [%W cget -activebackground]
	%W config -activebackground [%W cget -background]
    }
    tk::ScaleActivate %W %x %y
}
bind Scale <Motion> {
    tk::ScaleActivate %W %x %y
}
bind Scale <Leave> {
    if {$tk_strictMotif} {
	%W config -activebackground $tk::Priv(activeBg)
    }
    if {[string equal [%W cget -state] "active"]} {
	%W configure -state normal
    }
}
bind Scale <1> {
    tk::ScaleButtonDown %W %x %y
}
bind Scale <B1-Motion> {
    tk::ScaleDrag %W %x %y
}
bind Scale <B1-Leave> { }
bind Scale <B1-Enter> { }
bind Scale <ButtonRelease-1> {
    tk::CancelRepeat
    tk::ScaleEndDrag %W
    tk::ScaleActivate %W %x %y
}
bind Scale <2> {
    tk::ScaleButton2Down %W %x %y
}
bind Scale <B2-Motion> {
    tk::ScaleDrag %W %x %y
}
bind Scale <B2-Leave> { }
bind Scale <B2-Enter> { }
bind Scale <ButtonRelease-2> {
    tk::CancelRepeat
    tk::ScaleEndDrag %W
    tk::ScaleActivate %W %x %y
}
if {[string equal $tcl_platform(platform) "windows"]} {
    # On Windows do the same with button 3, as that is the right mouse button
    bind Scale <3>		[bind Scale <2>]
    bind Scale <B3-Motion>	[bind Scale <B2-Motion>]
    bind Scale <B3-Leave>	[bind Scale <B2-Leave>]
    bind Scale <B3-Enter>	[bind Scale <B2-Enter>]
    bind Scale <ButtonRelease-3> [bind Scale <ButtonRelease-2>]
}
bind Scale <Control-1> {
    tk::ScaleControlPress %W %x %y
}
bind Scale <Up> {
    tk::ScaleIncrement %W up little noRepeat
}
bind Scale <Down> {
    tk::ScaleIncrement %W down little noRepeat
}
bind Scale <Left> {
    tk::ScaleIncrement %W up little noRepeat
}
bind Scale <Right> {
    tk::ScaleIncrement %W down little noRepeat
}
bind Scale <Control-Up> {
    tk::ScaleIncrement %W up big noRepeat
}
bind Scale <Control-Down> {
    tk::ScaleIncrement %W down big noRepeat
}
bind Scale <Control-Left> {
    tk::ScaleIncrement %W up big noRepeat
}
bind Scale <Control-Right> {
    tk::ScaleIncrement %W down big noRepeat
}
bind Scale <Home> {
    %W set [%W cget -from]
}
bind Scale <End> {
    %W set [%W cget -to]
}

# ::tk::ScaleActivate --
# This procedure is invoked to check a given x-y position in the
# scale and activate the slider if the x-y position falls within
# the slider.
#
# Arguments:
# w -		The scale widget.
# x, y -	Mouse coordinates.

proc ::tk::ScaleActivate {w x y} {
    if {[string equal [$w cget -state] "disabled"]} {
	return
    }
    if {[string equal [$w identify $x $y] "slider"]} {
	set state active
    } else {
	set state normal
    }
    if {[string compare [$w cget -state] $state]} {
	$w configure -state $state
    }
}

# ::tk::ScaleButtonDown --
# This procedure is invoked when a button is pressed in a scale.  It
# takes different actions depending on where the button was pressed.
#
# Arguments:
# w -		The scale widget.
# x, y -	Mouse coordinates of button press.

proc ::tk::ScaleButtonDown {w x y} {
    variable ::tk::Priv
    set Priv(dragging) 0
    set el [$w identify $x $y]
    if {[string equal $el "trough1"]} {
	ScaleIncrement $w up little initial
    } elseif {[string equal $el "trough2"]} {
	ScaleIncrement $w down little initial
    } elseif {[string equal $el "slider"]} {
	set Priv(dragging) 1
	set Priv(initValue) [$w get]
	set coords [$w coords]
	set Priv(deltaX) [expr {$x - [lindex $coords 0]}]
	set Priv(deltaY) [expr {$y - [lindex $coords 1]}]
	$w configure -sliderrelief sunken
    }
}

# ::tk::ScaleDrag --
# This procedure is called when the mouse is dragged with
# mouse button 1 down.  If the drag started inside the slider
# (i.e. the scale is active) then the scale's value is adjusted
# to reflect the mouse's position.
#
# Arguments:
# w -		The scale widget.
# x, y -	Mouse coordinates.

proc ::tk::ScaleDrag {w x y} {
    variable ::tk::Priv
    if {!$Priv(dragging)} {
	return
    }
    $w set [$w get [expr {$x-$Priv(deltaX)}] [expr {$y-$Priv(deltaY)}]]
}

# ::tk::ScaleEndDrag --
# This procedure is called to end an interactive drag of the
# slider.  It just marks the drag as over.
#
# Arguments:
# w -		The scale widget.

proc ::tk::ScaleEndDrag {w} {
    variable ::tk::Priv
    set Priv(dragging) 0
    $w configure -sliderrelief raised
}

# ::tk::ScaleIncrement --
# This procedure is invoked to increment the value of a scale and
# to set up auto-repeating of the action if that is desired.  The
# way the value is incremented depends on the "dir" and "big"
# arguments.
#
# Arguments:
# w -		The scale widget.
# dir -		"up" means move value towards -from, "down" means
#		move towards -to.
# big -		Size of increments: "big" or "little".
# repeat -	Whether and how to auto-repeat the action:  "noRepeat"
#		means don't auto-repeat, "initial" means this is the
#		first action in an auto-repeat sequence, and "again"
#		means this is the second repetition or later.

proc ::tk::ScaleIncrement {w dir big repeat} {
    variable ::tk::Priv
    if {![winfo exists $w]} return
    if {[string equal $big "big"]} {
	set inc [$w cget -bigincrement]
	if {$inc == 0} {
	    set inc [expr {abs([$w cget -to] - [$w cget -from])/10.0}]
	}
	if {$inc < [$w cget -resolution]} {
	    set inc [$w cget -resolution]
	}
    } else {
	set inc [$w cget -resolution]
    }
    if {([$w cget -from] > [$w cget -to]) ^ [string equal $dir "up"]} {
	set inc [expr {-$inc}]
    }
    $w set [expr {[$w get] + $inc}]

    if {[string equal $repeat "again"]} {
	set Priv(afterId) [after [$w cget -repeatinterval] \
		[list tk::ScaleIncrement $w $dir $big again]]
    } elseif {[string equal $repeat "initial"]} {
	set delay [$w cget -repeatdelay]
	if {$delay > 0} {
	    set Priv(afterId) [after $delay \
		    [list tk::ScaleIncrement $w $dir $big again]]
	}
    }
}

# ::tk::ScaleControlPress --
# This procedure handles button presses that are made with the Control
# key down.  Depending on the mouse position, it adjusts the scale
# value to one end of the range or the other.
#
# Arguments:
# w -		The scale widget.
# x, y -	Mouse coordinates where the button was pressed.

proc ::tk::ScaleControlPress {w x y} {
    set el [$w identify $x $y]
    if {[string equal $el "trough1"]} {
	$w set [$w cget -from]
    } elseif {[string equal $el "trough2"]} {
	$w set [$w cget -to]
    }
}

# ::tk::ScaleButton2Down
# This procedure is invoked when button 2 is pressed over a scale.
# It sets the value to correspond to the mouse position and starts
# a slider drag.
#
# Arguments:
# w -		The scrollbar widget.
# x, y -	Mouse coordinates within the widget.

proc ::tk::ScaleButton2Down {w x y} {
    variable ::tk::Priv

    if {[string equal [$w cget -state] "disabled"]} {
      return
    }
    $w configure -state active
    $w set [$w get $x $y]
    set Priv(dragging) 1
    set Priv(initValue) [$w get]
    set coords "$x $y"
    set Priv(deltaX) 0
    set Priv(deltaY) 0
}
@


1.4
log
@touched all sources to ease next import
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: scale.tcl,v 1.7.6.2 2000/09/26 16:08:46 spolk Exp $
d23 1
a23 1
	set tkPriv(activeBg) [%W cget -activebackground]
d26 1
a26 1
    tkScaleActivate %W %x %y
d29 1
a29 1
    tkScaleActivate %W %x %y
d33 1
a33 1
	%W config -activebackground $tkPriv(activeBg)
d40 1
a40 1
    tkScaleButtonDown %W %x %y
d43 1
a43 1
    tkScaleDrag %W %x %y
d48 3
a50 3
    tkCancelRepeat
    tkScaleEndDrag %W
    tkScaleActivate %W %x %y
d53 1
a53 1
    tkScaleButton2Down %W %x %y
d56 1
a56 1
    tkScaleDrag %W %x %y
d61 11
a71 3
    tkCancelRepeat
    tkScaleEndDrag %W
    tkScaleActivate %W %x %y
d74 1
a74 1
    tkScaleControlPress %W %x %y
d77 1
a77 1
    tkScaleIncrement %W up little noRepeat
d80 1
a80 1
    tkScaleIncrement %W down little noRepeat
d83 1
a83 1
    tkScaleIncrement %W up little noRepeat
d86 1
a86 1
    tkScaleIncrement %W down little noRepeat
d89 1
a89 1
    tkScaleIncrement %W up big noRepeat
d92 1
a92 1
    tkScaleIncrement %W down big noRepeat
d95 1
a95 1
    tkScaleIncrement %W up big noRepeat
d98 1
a98 1
    tkScaleIncrement %W down big noRepeat
d107 1
a107 1
# tkScaleActivate --
d116 1
a116 1
proc tkScaleActivate {w x y} {
d130 1
a130 1
# tkScaleButtonDown --
d138 3
a140 3
proc tkScaleButtonDown {w x y} {
    global tkPriv
    set tkPriv(dragging) 0
d143 1
a143 1
	tkScaleIncrement $w up little initial
d145 1
a145 1
	tkScaleIncrement $w down little initial
d147 2
a148 2
	set tkPriv(dragging) 1
	set tkPriv(initValue) [$w get]
d150 2
a151 2
	set tkPriv(deltaX) [expr {$x - [lindex $coords 0]}]
	set tkPriv(deltaY) [expr {$y - [lindex $coords 1]}]
d156 1
a156 1
# tkScaleDrag --
d166 3
a168 3
proc tkScaleDrag {w x y} {
    global tkPriv
    if {!$tkPriv(dragging)} {
d171 1
a171 1
    $w set [$w get [expr {$x-$tkPriv(deltaX)}] [expr {$y-$tkPriv(deltaY)}]]
d174 1
a174 1
# tkScaleEndDrag --
d181 3
a183 3
proc tkScaleEndDrag {w} {
    global tkPriv
    set tkPriv(dragging) 0
d187 1
a187 1
# tkScaleIncrement --
d203 2
a204 2
proc tkScaleIncrement {w dir big repeat} {
    global tkPriv
d223 2
a224 2
	set tkPriv(afterId) [after [$w cget -repeatinterval] \
		[list tkScaleIncrement $w $dir $big again]]
d228 2
a229 2
	    set tkPriv(afterId) [after $delay \
		    [list tkScaleIncrement $w $dir $big again]]
d234 1
a234 1
# tkScaleControlPress --
d243 1
a243 1
proc tkScaleControlPress {w x y} {
d252 1
a252 1
# tkScaleButton2Down
d261 2
a262 2
proc tkScaleButton2Down {w x y} {
    global tkPriv
d269 2
a270 2
    set tkPriv(dragging) 1
    set tkPriv(initValue) [$w get]
d272 2
a273 2
    set tkPriv(deltaX) 0
    set tkPriv(deltaY) 0
a274 2


@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
# SCCS: @@(#) scale.tcl 1.12 96/04/16 11:42:25
d35 1
a35 1
    if {[%W cget -state] == "active"} {
d109 2
a110 3
    global tkPriv
    if {[$w cget -state] == "disabled"} {
	return;
d112 2
a113 2
    if {[$w identify $x $y] == "slider"} {
	$w configure -state active
d115 4
a118 1
	$w configure -state normal
d134 1
a134 1
    if {$el == "trough1"} {
d136 1
a136 1
    } elseif {$el == "trough2"} {
d138 1
a138 1
    } elseif {$el == "slider"} {
d163 1
a163 2
    $w set [$w get [expr {$x - $tkPriv(deltaX)}] \
	    [expr {$y - $tkPriv(deltaY)}]]
d198 1
a198 1
    if {$big == "big"} {
d209 1
a209 1
    if {([$w cget -from] > [$w cget -to]) ^ ($dir == "up")} {
d214 1
a214 1
    if {$repeat == "again"} {
d216 2
a217 2
		tkScaleIncrement $w $dir $big again]
    } elseif {$repeat == "initial"} {
d221 1
a221 1
		    tkScaleIncrement $w $dir $big again]
d237 1
a237 1
    if {$el == "trough1"} {
d239 1
a239 1
    } elseif {$el == "trough2"} {
d256 2
a257 2
    if {[$w cget -state] == "disabled"} {
	return;
d267 2
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: scale.tcl,v 1.7.6.2 2000/09/26 16:08:46 spolk Exp $
d35 1
a35 1
    if {[string equal [%W cget -state] "active"]} {
d109 3
a111 2
    if {[string equal [$w cget -state] "disabled"]} {
	return
d113 2
a114 2
    if {[string equal [$w identify $x $y] "slider"]} {
	set state active
d116 1
a116 4
	set state normal
    }
    if {[string compare [$w cget -state] $state]} {
	$w configure -state $state
d132 1
a132 1
    if {[string equal $el "trough1"]} {
d134 1
a134 1
    } elseif {[string equal $el "trough2"]} {
d136 1
a136 1
    } elseif {[string equal $el "slider"]} {
d161 2
a162 1
    $w set [$w get [expr {$x-$tkPriv(deltaX)}] [expr {$y-$tkPriv(deltaY)}]]
d197 1
a197 1
    if {[string equal $big "big"]} {
d208 1
a208 1
    if {([$w cget -from] > [$w cget -to]) ^ [string equal $dir "up"]} {
d213 1
a213 1
    if {[string equal $repeat "again"]} {
d215 2
a216 2
		[list tkScaleIncrement $w $dir $big again]]
    } elseif {[string equal $repeat "initial"]} {
d220 1
a220 1
		    [list tkScaleIncrement $w $dir $big again]]
d236 1
a236 1
    if {[string equal $el "trough1"]} {
d238 1
a238 1
    } elseif {[string equal $el "trough2"]} {
d255 2
a256 2
    if {[string equal [$w cget -state] "disabled"]} {
      return
a265 2


@


1.1.1.3
log
@import tk 8.4.0
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: scale.tcl,v 1.9 2002/02/26 01:07:08 hobbs Exp $
d23 1
a23 1
	set tk::Priv(activeBg) [%W cget -activebackground]
d26 1
a26 1
    tk::ScaleActivate %W %x %y
d29 1
a29 1
    tk::ScaleActivate %W %x %y
d33 1
a33 1
	%W config -activebackground $tk::Priv(activeBg)
d40 1
a40 1
    tk::ScaleButtonDown %W %x %y
d43 1
a43 1
    tk::ScaleDrag %W %x %y
d48 3
a50 3
    tk::CancelRepeat
    tk::ScaleEndDrag %W
    tk::ScaleActivate %W %x %y
d53 1
a53 1
    tk::ScaleButton2Down %W %x %y
d56 1
a56 1
    tk::ScaleDrag %W %x %y
d61 3
a63 11
    tk::CancelRepeat
    tk::ScaleEndDrag %W
    tk::ScaleActivate %W %x %y
}
if {[string equal $tcl_platform(platform) "windows"]} {
    # On Windows do the same with button 3, as that is the right mouse button
    bind Scale <3>		[bind Scale <2>]
    bind Scale <B3-Motion>	[bind Scale <B2-Motion>]
    bind Scale <B3-Leave>	[bind Scale <B2-Leave>]
    bind Scale <B3-Enter>	[bind Scale <B2-Enter>]
    bind Scale <ButtonRelease-3> [bind Scale <ButtonRelease-2>]
d66 1
a66 1
    tk::ScaleControlPress %W %x %y
d69 1
a69 1
    tk::ScaleIncrement %W up little noRepeat
d72 1
a72 1
    tk::ScaleIncrement %W down little noRepeat
d75 1
a75 1
    tk::ScaleIncrement %W up little noRepeat
d78 1
a78 1
    tk::ScaleIncrement %W down little noRepeat
d81 1
a81 1
    tk::ScaleIncrement %W up big noRepeat
d84 1
a84 1
    tk::ScaleIncrement %W down big noRepeat
d87 1
a87 1
    tk::ScaleIncrement %W up big noRepeat
d90 1
a90 1
    tk::ScaleIncrement %W down big noRepeat
d99 1
a99 1
# ::tk::ScaleActivate --
d108 1
a108 1
proc ::tk::ScaleActivate {w x y} {
d122 1
a122 1
# ::tk::ScaleButtonDown --
d130 3
a132 3
proc ::tk::ScaleButtonDown {w x y} {
    variable ::tk::Priv
    set Priv(dragging) 0
d135 1
a135 1
	ScaleIncrement $w up little initial
d137 1
a137 1
	ScaleIncrement $w down little initial
d139 2
a140 2
	set Priv(dragging) 1
	set Priv(initValue) [$w get]
d142 2
a143 2
	set Priv(deltaX) [expr {$x - [lindex $coords 0]}]
	set Priv(deltaY) [expr {$y - [lindex $coords 1]}]
d148 1
a148 1
# ::tk::ScaleDrag --
d158 3
a160 3
proc ::tk::ScaleDrag {w x y} {
    variable ::tk::Priv
    if {!$Priv(dragging)} {
d163 1
a163 1
    $w set [$w get [expr {$x-$Priv(deltaX)}] [expr {$y-$Priv(deltaY)}]]
d166 1
a166 1
# ::tk::ScaleEndDrag --
d173 3
a175 3
proc ::tk::ScaleEndDrag {w} {
    variable ::tk::Priv
    set Priv(dragging) 0
d179 1
a179 1
# ::tk::ScaleIncrement --
d195 2
a196 2
proc ::tk::ScaleIncrement {w dir big repeat} {
    variable ::tk::Priv
d215 2
a216 2
	set Priv(afterId) [after [$w cget -repeatinterval] \
		[list tk::ScaleIncrement $w $dir $big again]]
d220 2
a221 2
	    set Priv(afterId) [after $delay \
		    [list tk::ScaleIncrement $w $dir $big again]]
d226 1
a226 1
# ::tk::ScaleControlPress --
d235 1
a235 1
proc ::tk::ScaleControlPress {w x y} {
d244 1
a244 1
# ::tk::ScaleButton2Down
d253 2
a254 2
proc ::tk::ScaleButton2Down {w x y} {
    variable ::tk::Priv
d261 2
a262 2
    set Priv(dragging) 1
    set Priv(initValue) [$w get]
d264 2
a265 2
    set Priv(deltaX) 0
    set Priv(deltaY) 0
d267 2
@


