head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.28
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.26
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.24
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.22
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.20
	gdb_7_0-branch:1.5.0.18
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tk8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.16
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.14
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.12
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.10
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.8
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	TK8_4_1:1.1.1.3
	gdb_5_3-2002-12-12-release:1.2
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TK_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.20.24.46;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.21.19.53.14;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.39.26;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.01.16.51;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.29;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.29;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.10.00.22.33;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.20.38.49;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tk 8.4.1
@
text
@# clrpick.tcl --
#
#	Color selection dialog for platforms that do not support a
#	standard color selection dialog.
#
# RCS: @@(#) $Id: clrpick.tcl,v 1.19 2002/07/22 21:25:39 mdejong Exp $
#
# Copyright (c) 1996 Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# ToDo:
#
#	(1): Find out how many free colors are left in the colormap and
#	     don't allocate too many colors.
#	(2): Implement HSV color selection. 
#

# Make sure namespaces exist
namespace eval ::tk {}
namespace eval ::tk::dialog {}
namespace eval ::tk::dialog::color {
    namespace import ::tk::msgcat::*
}

# ::tk::dialog::color:: --
#
#	Create a color dialog and let the user choose a color. This function
#	should not be called directly. It is called by the tk_chooseColor
#	function when a native color selector widget does not exist
#
proc ::tk::dialog::color:: {args} {
    variable ::tk::Priv
    set dataName __tk__color
    upvar ::tk::dialog::color::$dataName data
    set w .$dataName

    # The lines variables track the start and end indices of the line
    # elements in the colorbar canvases.
    set data(lines,red,start)   0
    set data(lines,red,last)   -1
    set data(lines,green,start) 0
    set data(lines,green,last) -1
    set data(lines,blue,start)  0
    set data(lines,blue,last)  -1

    # This is the actual number of lines that are drawn in each color strip.
    # Note that the bars may be of any width.
    # However, NUM_COLORBARS must be a number that evenly divides 256.
    # Such as 256, 128, 64, etc.
    set data(NUM_COLORBARS) 16

    # BARS_WIDTH is the number of pixels wide the color bar portion of the
    # canvas is. This number must be a multiple of NUM_COLORBARS
    set data(BARS_WIDTH) 160

    # PLGN_WIDTH is the number of pixels wide of the triangular selection
    # polygon. This also results in the definition of the padding on the 
    # left and right sides which is half of PLGN_WIDTH. Make this number even.
    set data(PLGN_HEIGHT) 10

    # PLGN_HEIGHT is the height of the selection polygon and the height of the 
    # selection rectangle at the bottom of the color bar. No restrictions.
    set data(PLGN_WIDTH) 10

    Config $dataName $args
    InitValues $dataName

    set sc [winfo screen $data(-parent)]
    set winExists [winfo exists $w]
    if {!$winExists || [string compare $sc [winfo screen $w]]} {
	if {$winExists} {
	    destroy $w
	}
	toplevel $w -class TkColorDialog -screen $sc
	BuildDialog $w
    }

    # Dialog boxes should be transient with respect to their parent,
    # so that they will always stay on top of their parent window.  However,
    # some window managers will create the window as withdrawn if the parent
    # window is withdrawn or iconified.  Combined with the grab we put on the
    # window, this can hang the entire application.  Therefore we only make
    # the dialog transient if the parent is viewable.

    if {[winfo viewable [winfo toplevel $data(-parent)]] } {
	wm transient $w $data(-parent)
    }

    # 5. Withdraw the window, then update all the geometry information
    # so we know how big it wants to be, then center the window in the
    # display and de-iconify it.

    ::tk::PlaceWindow $w widget $data(-parent)
    wm title $w $data(-title)

    # 6. Set a grab and claim the focus too.

    ::tk::SetFocusGrab $w $data(okBtn)

    # 7. Wait for the user to respond, then restore the focus and
    # return the index of the selected button.  Restore the focus
    # before deleting the window, since otherwise the window manager
    # may take the focus away so we can't redirect it.  Finally,
    # restore any grab that was in effect.

    vwait ::tk::Priv(selectColor)
    ::tk::RestoreFocusGrab $w $data(okBtn)
    unset data

    return $Priv(selectColor)
}

# ::tk::dialog::color::InitValues --
#
#	Get called during initialization or when user resets NUM_COLORBARS
#
proc ::tk::dialog::color::InitValues {dataName} {
    upvar ::tk::dialog::color::$dataName data

    # IntensityIncr is the difference in color intensity between a colorbar
    # and its neighbors.
    set data(intensityIncr) [expr {256 / $data(NUM_COLORBARS)}]

    # ColorbarWidth is the width of each colorbar
    set data(colorbarWidth) \
	    [expr {$data(BARS_WIDTH) / $data(NUM_COLORBARS)}]

    # Indent is the width of the space at the left and right side of the
    # colorbar. It is always half the selector polygon width, because the
    # polygon extends into the space.
    set data(indent) [expr {$data(PLGN_WIDTH) / 2}]

    set data(colorPad) 2
    set data(selPad)   [expr {$data(PLGN_WIDTH) / 2}]

    #
    # minX is the x coordinate of the first colorbar
    #
    set data(minX) $data(indent)

    #
    # maxX is the x coordinate of the last colorbar
    #
    set data(maxX) [expr {$data(BARS_WIDTH) + $data(indent)-1}]

    #
    # canvasWidth is the width of the entire canvas, including the indents
    #
    set data(canvasWidth) [expr {$data(BARS_WIDTH) + $data(PLGN_WIDTH)}]

    # Set the initial color, specified by -initialcolor, or the
    # color chosen by the user the last time.
    set data(selection) $data(-initialcolor)
    set data(finalColor)  $data(-initialcolor)
    set rgb [winfo rgb . $data(selection)]

    set data(red,intensity)   [expr {[lindex $rgb 0]/0x100}]
    set data(green,intensity) [expr {[lindex $rgb 1]/0x100}]
    set data(blue,intensity)  [expr {[lindex $rgb 2]/0x100}]
}

# ::tk::dialog::color::Config  --
#
#	Parses the command line arguments to tk_chooseColor
#
proc ::tk::dialog::color::Config {dataName argList} {
    variable ::tk::Priv
    upvar ::tk::dialog::color::$dataName data

    # 1: the configuration specs
    #
    if {[info exists Priv(selectColor)] && \
	    [string compare $Priv(selectColor) ""]} {
	set defaultColor $Priv(selectColor)
    } else {
	set defaultColor [. cget -background]
    }

    set specs [list \
	    [list -initialcolor "" "" $defaultColor] \
	    [list -parent "" "" "."] \
	    [list -title "" "" [mc "Color"]] \
	    ]

    # 2: parse the arguments
    #
    tclParseConfigSpec ::tk::dialog::color::$dataName $specs "" $argList

    if {[string equal $data(-title) ""]} {
	set data(-title) " "
    }
    if {[catch {winfo rgb . $data(-initialcolor)} err]} {
	error $err
    }

    if {![winfo exists $data(-parent)]} {
	error "bad window path name \"$data(-parent)\""
    }
}

# ::tk::dialog::color::BuildDialog --
#
#	Build the dialog.
#
proc ::tk::dialog::color::BuildDialog {w} {
    upvar ::tk::dialog::color::[winfo name $w] data

    # TopFrame contains the color strips and the color selection
    #
    set topFrame [frame $w.top -relief raised -bd 1]

    # StripsFrame contains the colorstrips and the individual RGB entries
    set stripsFrame [frame $topFrame.colorStrip]

    set maxWidth [::tk::mcmaxamp &Red &Green &Blue]
    set maxWidth [expr {$maxWidth<6?6:$maxWidth}]
    set colorList [list \
	    red		[mc "&Red"]	\
	    green	[mc "&Green"]	\
	    blue	[mc "&Blue"]	\
	    ]
    foreach {color l} $colorList {
	# each f frame contains an [R|G|B] entry and the equiv. color strip.
	set f [frame $stripsFrame.$color]

	# The box frame contains the label and entry widget for an [R|G|B]
	set box [frame $f.box]

	bind [::tk::AmpWidget label $box.label -text $l: -width $maxWidth \
	    -anchor ne] <<AltUnderlined>> [list focus $box.entry]
	
	entry $box.entry -textvariable \
		::tk::dialog::color::[winfo name $w]($color,intensity) \
		-width 4
	pack $box.label -side left -fill y -padx 2 -pady 3
	pack $box.entry -side left -anchor n -pady 0
	pack $box -side left -fill both

	set height [expr \
	    {[winfo reqheight $box.entry] - \
	    2*([$box.entry cget -highlightthickness] + [$box.entry cget -bd])}]

	canvas $f.color -height $height\
	    -width $data(BARS_WIDTH) -relief sunken -bd 2
	canvas $f.sel -height $data(PLGN_HEIGHT) \
	    -width $data(canvasWidth) -highlightthickness 0
	pack $f.color -expand yes -fill both
	pack $f.sel -expand yes -fill both

	pack $f -side top -fill x -padx 0 -pady 2

	set data($color,entry) $box.entry
	set data($color,col) $f.color
	set data($color,sel) $f.sel

	bind $data($color,col) <Configure> \
	    [list tk::dialog::color::DrawColorScale $w $color 1]
	bind $data($color,col) <Enter> \
	    [list tk::dialog::color::EnterColorBar $w $color]
	bind $data($color,col) <Leave> \
	    [list tk::dialog::color::LeaveColorBar $w $color]

	bind $data($color,sel) <Enter> \
	    [list tk::dialog::color::EnterColorBar $w $color]
	bind $data($color,sel) <Leave> \
	    [list tk::dialog::color::LeaveColorBar $w $color]

	bind $box.entry <Return> [list tk::dialog::color::HandleRGBEntry $w]
    }

    pack $stripsFrame -side left -fill both -padx 4 -pady 10

    # The selFrame contains a frame that demonstrates the currently
    # selected color
    #
    set selFrame [frame $topFrame.sel]
    set lab [::tk::AmpWidget label $selFrame.lab -text [mc "&Selection:"] \
	    -anchor sw]
    set ent [entry $selFrame.ent \
	-textvariable ::tk::dialog::color::[winfo name $w](selection) \
	-width 16]
    set f1  [frame $selFrame.f1 -relief sunken -bd 2]
    set data(finalCanvas) [frame $f1.demo -bd 0 -width 100 -height 70]

    pack $lab $ent -side top -fill x -padx 4 -pady 2
    pack $f1 -expand yes -anchor nw -fill both -padx 6 -pady 10
    pack $data(finalCanvas) -expand yes -fill both

    bind $ent <Return> [list tk::dialog::color::HandleSelEntry $w]

    pack $selFrame -side left -fill none -anchor nw
    pack $topFrame -side top -expand yes -fill both -anchor nw

    # the botFrame frame contains the buttons
    #
    set botFrame [frame $w.bot -relief raised -bd 1]
    set maxWidth [::tk::mcmaxamp &OK &Cancel]
    set maxWidth [expr {$maxWidth<8?8:$maxWidth}]
    ::tk::AmpWidget button $botFrame.ok     -text [mc "&OK"]		\
	    -width $maxWidth \
	    -command [list tk::dialog::color::OkCmd $w]
    ::tk::AmpWidget button $botFrame.cancel -text [mc "&Cancel"]	\
	    -width $maxWidth \
	    -command [list tk::dialog::color::CancelCmd $w]

    set data(okBtn)      $botFrame.ok
    set data(cancelBtn)  $botFrame.cancel
 
    pack $botFrame.ok $botFrame.cancel \
	-padx 10 -pady 10 -expand yes -side left
    pack $botFrame -side bottom -fill x


    # Accelerator bindings
    bind $lab <<AltUnderlined>> [list focus $ent]
    bind $w <KeyPress-Escape> [list tk::ButtonInvoke $data(cancelBtn)]
    bind $w <Alt-Key> [list tk::AltKeyInDialog $w %A]

    wm protocol $w WM_DELETE_WINDOW [list tk::dialog::color::CancelCmd $w]
}

# ::tk::dialog::color::SetRGBValue --
#
#	Sets the current selection of the dialog box
#
proc ::tk::dialog::color::SetRGBValue {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data 

    set data(red,intensity)   [lindex $color 0]
    set data(green,intensity) [lindex $color 1]
    set data(blue,intensity)  [lindex $color 2]
    
    RedrawColorBars $w all

    # Now compute the new x value of each colorbars pointer polygon
    foreach color [list red green blue ] {
	set x [RgbToX $w $data($color,intensity)]
	MoveSelector $w $data($color,sel) $color $x 0
    }
}

# ::tk::dialog::color::XToRgb --
#
#	Converts a screen coordinate to intensity
#
proc ::tk::dialog::color::XToRgb {w x} {
    upvar ::tk::dialog::color::[winfo name $w] data
    
    set x [expr {($x * $data(intensityIncr))/ $data(colorbarWidth)}]
    if {$x > 255} { set x 255 }
    return $x
}

# ::tk::dialog::color::RgbToX
#
#	Converts an intensity to screen coordinate.
#
proc ::tk::dialog::color::RgbToX {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data
    
    return [expr {($color * $data(colorbarWidth)/ $data(intensityIncr))}]
}


# ::tk::dialog::color::DrawColorScale --
# 
#	Draw color scale is called whenever the size of one of the color
#	scale canvases is changed.
#
proc ::tk::dialog::color::DrawColorScale {w c {create 0}} {
    upvar ::tk::dialog::color::[winfo name $w] data

    # col: color bar canvas
    # sel: selector canvas
    set col $data($c,col)
    set sel $data($c,sel)

    # First handle the case that we are creating everything for the first time.
    if {$create} {
	# First remove all the lines that already exist.
	if { $data(lines,$c,last) > $data(lines,$c,start)} {
	    for {set i $data(lines,$c,start)} \
		{$i <= $data(lines,$c,last)} { incr i} {
		$sel delete $i
	    }
	}
	# Delete the selector if it exists
	if {[info exists data($c,index)]} {
	    $sel delete $data($c,index)
	}
	
	# Draw the selection polygons
	CreateSelector $w $sel $c
	$sel bind $data($c,index) <ButtonPress-1> \
		[list tk::dialog::color::StartMove $w $sel $c %x $data(selPad) 1]
	$sel bind $data($c,index) <B1-Motion> \
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(selPad)]
	$sel bind $data($c,index) <ButtonRelease-1> \
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(selPad)]

	set height [winfo height $col]
	# Create an invisible region under the colorstrip to catch mouse clicks
	# that aren't on the selector.
	set data($c,clickRegion) [$sel create rectangle 0 0 \
		$data(canvasWidth) $height -fill {} -outline {}]

	bind $col <ButtonPress-1> \
		[list tk::dialog::color::StartMove $w $sel $c %x $data(colorPad)]
	bind $col <B1-Motion> \
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(colorPad)]
	bind $col <ButtonRelease-1> \
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(colorPad)]

	$sel bind $data($c,clickRegion) <ButtonPress-1> \
		[list tk::dialog::color::StartMove $w $sel $c %x $data(selPad)]
	$sel bind $data($c,clickRegion) <B1-Motion> \
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(selPad)]
	$sel bind $data($c,clickRegion) <ButtonRelease-1> \
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(selPad)]
    } else {
	# l is the canvas index of the first colorbar.
	set l $data(lines,$c,start)
    }
    
    # Draw the color bars.
    set highlightW [expr {[$col cget -highlightthickness] + [$col cget -bd]}]
    for {set i 0} { $i < $data(NUM_COLORBARS)} { incr i} {
	set intensity [expr {$i * $data(intensityIncr)}]
	set startx [expr {$i * $data(colorbarWidth) + $highlightW}]
	if {[string equal $c "red"]} {
	    set color [format "#%02x%02x%02x" \
			   $intensity \
			   $data(green,intensity) \
			   $data(blue,intensity)]
	} elseif {[string equal $c "green"]} {
	    set color [format "#%02x%02x%02x" \
			   $data(red,intensity) \
			   $intensity \
			   $data(blue,intensity)]
	} else {
	    set color [format "#%02x%02x%02x" \
			   $data(red,intensity) \
			   $data(green,intensity) \
			   $intensity]
	}

	if {$create} {
	    set index [$col create rect $startx $highlightW \
		    [expr {$startx +$data(colorbarWidth)}] \
		    [expr {[winfo height $col] + $highlightW}]\
	        -fill $color -outline $color]
	} else {
	    $col itemconfigure $l -fill $color -outline $color
	    incr l
	}
    }
    $sel raise $data($c,index)

    if {$create} {
	set data(lines,$c,last) $index
	set data(lines,$c,start) [expr {$index - $data(NUM_COLORBARS) + 1}]
    }

    RedrawFinalColor $w
}

# ::tk::dialog::color::CreateSelector --
#
#	Creates and draws the selector polygon at the position
#	$data($c,intensity).
#
proc ::tk::dialog::color::CreateSelector {w sel c } {
    upvar ::tk::dialog::color::[winfo name $w] data
    set data($c,index) [$sel create polygon \
	0 $data(PLGN_HEIGHT) \
	$data(PLGN_WIDTH) $data(PLGN_HEIGHT) \
	$data(indent) 0]
    set data($c,x) [RgbToX $w $data($c,intensity)]
    $sel move $data($c,index) $data($c,x) 0
}

# ::tk::dialog::color::RedrawFinalColor
#
#	Combines the intensities of the three colors into the final color
#
proc ::tk::dialog::color::RedrawFinalColor {w} {
    upvar ::tk::dialog::color::[winfo name $w] data

    set color [format "#%02x%02x%02x" $data(red,intensity) \
	$data(green,intensity) $data(blue,intensity)]
    
    $data(finalCanvas) configure -bg $color
    set data(finalColor) $color
    set data(selection) $color
    set data(finalRGB) [list \
	    $data(red,intensity) \
	    $data(green,intensity) \
	    $data(blue,intensity)]
}

# ::tk::dialog::color::RedrawColorBars --
#
# Only redraws the colors on the color strips that were not manipulated.
# Params: color of colorstrip that changed. If color is not [red|green|blue]
#         Then all colorstrips will be updated
#
proc ::tk::dialog::color::RedrawColorBars {w colorChanged} {
    upvar ::tk::dialog::color::[winfo name $w] data

    switch $colorChanged {
	red { 
	    DrawColorScale $w green
	    DrawColorScale $w blue
	}
	green {
	    DrawColorScale $w red
	    DrawColorScale $w blue
	}
	blue {
	    DrawColorScale $w red
	    DrawColorScale $w green
	}
	default {
	    DrawColorScale $w red
	    DrawColorScale $w green
	    DrawColorScale $w blue
	}
    }
    RedrawFinalColor $w
}

#----------------------------------------------------------------------
#			Event handlers
#----------------------------------------------------------------------

# ::tk::dialog::color::StartMove --
#
#	Handles a mousedown button event over the selector polygon.
#	Adds the bindings for moving the mouse while the button is
#	pressed.  Sets the binding for the button-release event.
# 
# Params: sel is the selector canvas window, color is the color of the strip.
#
proc ::tk::dialog::color::StartMove {w sel color x delta {dontMove 0}} {
    upvar ::tk::dialog::color::[winfo name $w] data

    if {!$dontMove} {
	MoveSelector $w $sel $color $x $delta
    }
}

# ::tk::dialog::color::MoveSelector --
# 
# Moves the polygon selector so that its middle point has the same
# x value as the specified x. If x is outside the bounds [0,255],
# the selector is set to the closest endpoint.
#
# Params: sel is the selector canvas, c is [red|green|blue]
#         x is a x-coordinate.
#
proc ::tk::dialog::color::MoveSelector {w sel color x delta} {
    upvar ::tk::dialog::color::[winfo name $w] data

    incr x -$delta

    if { $x < 0 } {
	set x 0
    } elseif { $x > $data(BARS_WIDTH)} {
	set x $data(BARS_WIDTH)
    }
    set diff [expr {$x - $data($color,x)}]
    $sel move $data($color,index) $diff 0
    set data($color,x) [expr {$data($color,x) + $diff}]
    
    # Return the x value that it was actually set at
    return $x
}

# ::tk::dialog::color::ReleaseMouse
#
# Removes mouse tracking bindings, updates the colorbars.
#
# Params: sel is the selector canvas, color is the color of the strip,
#         x is the x-coord of the mouse.
#
proc ::tk::dialog::color::ReleaseMouse {w sel color x delta} {
    upvar ::tk::dialog::color::[winfo name $w] data 

    set x [MoveSelector $w $sel $color $x $delta]
    
    # Determine exactly what color we are looking at.
    set data($color,intensity) [XToRgb $w $x]

    RedrawColorBars $w $color
}

# ::tk::dialog::color::ResizeColorbars --
#
#	Completely redraws the colorbars, including resizing the
#	colorstrips
#
proc ::tk::dialog::color::ResizeColorBars {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
    
    if { ($data(BARS_WIDTH) < $data(NUM_COLORBARS)) || 
	 (($data(BARS_WIDTH) % $data(NUM_COLORBARS)) != 0)} {
	set data(BARS_WIDTH) $data(NUM_COLORBARS)
    }
    InitValues [winfo name $w]
    foreach color [list red green blue ] {
	$data($color,col) configure -width $data(canvasWidth)
	DrawColorScale $w $color 1
    }
}

# ::tk::dialog::color::HandleSelEntry --
#
#	Handles the return keypress event in the "Selection:" entry
#
proc ::tk::dialog::color::HandleSelEntry {w} {
    upvar ::tk::dialog::color::[winfo name $w] data

    set text [string trim $data(selection)]
    # Check to make sure that the color is valid
    if {[catch {set color [winfo rgb . $text]} ]} {
	set data(selection) $data(finalColor)
	return
    }
    
    set R [expr {[lindex $color 0]/0x100}]
    set G [expr {[lindex $color 1]/0x100}]
    set B [expr {[lindex $color 2]/0x100}]

    SetRGBValue $w "$R $G $B"
    set data(selection) $text
}

# ::tk::dialog::color::HandleRGBEntry --
#
#	Handles the return keypress event in the R, G or B entry
#
proc ::tk::dialog::color::HandleRGBEntry {w} {
    upvar ::tk::dialog::color::[winfo name $w] data

    foreach c [list red green blue] {
	if {[catch {
	    set data($c,intensity) [expr {int($data($c,intensity))}]
	}]} {
	    set data($c,intensity) 0
	}

	if {$data($c,intensity) < 0} {
	    set data($c,intensity) 0
	}
	if {$data($c,intensity) > 255} {
	    set data($c,intensity) 255
	}
    }

    SetRGBValue $w "$data(red,intensity) \
	$data(green,intensity) $data(blue,intensity)"
}    

# mouse cursor enters a color bar
#
proc ::tk::dialog::color::EnterColorBar {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data

    $data($color,sel) itemconfig $data($color,index) -fill red
}

# mouse leaves enters a color bar
#
proc ::tk::dialog::color::LeaveColorBar {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data

    $data($color,sel) itemconfig $data($color,index) -fill black
}

# user hits OK button
#
proc ::tk::dialog::color::OkCmd {w} {
    variable ::tk::Priv
    upvar ::tk::dialog::color::[winfo name $w] data

    set Priv(selectColor) $data(finalColor)
}

# user hits Cancel button
#
proc ::tk::dialog::color::CancelCmd {w} {
    variable ::tk::Priv
    set Priv(selectColor) ""
}

@


1.4
log
@touched all sources to ease next import
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: clrpick.tcl,v 1.7.6.2 2000/09/26 16:08:36 spolk Exp $
d20 8
a27 1
# tkColorDialog --
d33 5
a37 4
proc tkColorDialog {args} {
    global tkPriv
    set w .__tk__color
    upvar #0 $w data
d52 1
a52 1
    set data(NUM_COLORBARS) 8
d56 1
a56 1
    set data(BARS_WIDTH) 128
d67 2
a68 2
    tkColorDialog_Config $w $args
    tkColorDialog_InitValues $w
d76 2
a77 2
	toplevel $w -class tkColorDialog -screen $sc
	tkColorDialog_BuildDialog $w
d80 10
a89 1
    wm transient $w $data(-parent)
d108 1
a108 1
    vwait tkPriv(selectColor)
d112 1
a112 1
    return $tkPriv(selectColor)
d115 1
a115 1
# tkColorDialog_InitValues --
d119 2
a120 2
proc tkColorDialog_InitValues {w} {
    upvar #0 $w data
d164 1
a164 1
# tkColorDialog_Config  --
d168 3
a170 3
proc tkColorDialog_Config {w argList} {
    global tkPriv
    upvar #0 $w data
d174 3
a176 3
    if {[info exists tkPriv(selectColor)] && \
	    [string compare $tkPriv(selectColor) ""]} {
	set defaultColor $tkPriv(selectColor)
d184 1
a184 1
	    [list -title "" "" "Color"] \
d189 1
a189 1
    tclParseConfigSpec $w $specs "" $argList
d203 1
a203 1
# tkColorDialog_BuildDialog --
d207 2
a208 2
proc tkColorDialog_BuildDialog {w} {
    upvar #0 $w data
d217 8
a224 3
    foreach c { Red Green Blue } {
	set color [string tolower $c]

d231 6
a236 3
	label $box.label -text $c: -width 6 -under 0 -anchor ne
	entry $box.entry -textvariable [format %s $w]($color,intensity) \
	    -width 4
d259 1
a259 1
	    [list tkColorDialog_DrawColorScale $w $color 1]
d261 1
a261 1
	    [list tkColorDialog_EnterColorBar $w $color]
d263 1
a263 1
	    [list tkColorDialog_LeaveColorBar $w $color]
d266 1
a266 1
	    [list tkColorDialog_EnterColorBar $w $color]
d268 1
a268 1
	    [list tkColorDialog_LeaveColorBar $w $color]
d270 1
a270 1
	bind $box.entry <Return> [list tkColorDialog_HandleRGBEntry $w]
d279 4
a282 2
    set lab [label $selFrame.lab -text "Selection:" -under 0 -anchor sw]
    set ent [entry $selFrame.ent -textvariable [format %s $w](selection) \
d291 1
a291 1
    bind $ent <Return> [list tkColorDialog_HandleSelEntry $w]
d299 8
a306 4
    button $botFrame.ok     -text OK            -width 8 -under 0 \
	-command [list tkColorDialog_OkCmd $w]
    button $botFrame.cancel -text Cancel        -width 8 -under 0 \
	-command [list tkColorDialog_CancelCmd $w]
d317 3
d321 1
a321 9
    bind $w <Alt-r> [list focus $data(red,entry)]
    bind $w <Alt-g> [list focus $data(green,entry)]
    bind $w <Alt-b> [list focus $data(blue,entry)]
    bind $w <Alt-s> [list focus $ent]
    bind $w <KeyPress-Escape> [list tkButtonInvoke $data(cancelBtn)]
    bind $w <Alt-c> [list tkButtonInvoke $data(cancelBtn)]
    bind $w <Alt-o> [list tkButtonInvoke $data(okBtn)]

    wm protocol $w WM_DELETE_WINDOW [list tkColorDialog_CancelCmd $w]
d324 1
a324 1
# tkColorDialog_SetRGBValue --
d328 2
a329 2
proc tkColorDialog_SetRGBValue {w color} {
    upvar #0 $w data 
d335 1
a335 1
    tkColorDialog_RedrawColorBars $w all
d338 3
a340 3
    foreach color { red green blue } {
	set x [tkColorDialog_RgbToX $w $data($color,intensity)]
	tkColorDialog_MoveSelector $w $data($color,sel) $color $x 0
d344 1
a344 1
# tkColorDialog_XToRgb --
d348 2
a349 2
proc tkColorDialog_XToRgb {w x} {
    upvar #0 $w data
d351 3
a353 1
    return [expr {($x * $data(intensityIncr))/ $data(colorbarWidth)}]
d356 1
a356 1
# tkColorDialog_RgbToX
d360 2
a361 2
proc tkColorDialog_RgbToX {w color} {
    upvar #0 $w data
d367 1
a367 1
# tkColorDialog_DrawColorScale --
d372 2
a373 3
proc tkColorDialog_DrawColorScale {w c {create 0}} {
    global lines
    upvar #0 $w data
d395 1
a395 1
	tkColorDialog_CreateSelector $w $sel $c
d397 1
a397 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(selPad) 1]
d399 1
a399 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
d401 1
a401 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)]
d410 1
a410 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(colorPad)]
d412 1
a412 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(colorPad)]
d414 1
a414 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(colorPad)]
d417 1
a417 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(selPad)]
d419 1
a419 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
d421 1
a421 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)]
d466 1
a466 1
    tkColorDialog_RedrawFinalColor $w
d469 1
a469 1
# tkColorDialog_CreateSelector --
d474 2
a475 2
proc tkColorDialog_CreateSelector {w sel c } {
    upvar #0 $w data
d480 1
a480 1
    set data($c,x) [tkColorDialog_RgbToX $w $data($c,intensity)]
d484 1
a484 1
# tkColorDialog_RedrawFinalColor
d488 2
a489 2
proc tkColorDialog_RedrawFinalColor {w} {
    upvar #0 $w data
d503 1
a503 1
# tkColorDialog_RedrawColorBars --
d509 2
a510 2
proc tkColorDialog_RedrawColorBars {w colorChanged} {
    upvar #0 $w data
d514 2
a515 2
	    tkColorDialog_DrawColorScale $w green
	    tkColorDialog_DrawColorScale $w blue
d518 2
a519 2
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w blue
d522 2
a523 2
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w green
d526 3
a528 3
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w green
	    tkColorDialog_DrawColorScale $w blue
d531 1
a531 1
    tkColorDialog_RedrawFinalColor $w
d538 1
a538 1
# tkColorDialog_StartMove --
d546 2
a547 2
proc tkColorDialog_StartMove {w sel color x delta {dontMove 0}} {
    upvar #0 $w data
d550 1
a550 1
	tkColorDialog_MoveSelector $w $sel $color $x $delta
d554 1
a554 1
# tkColorDialog_MoveSelector --
d563 2
a564 2
proc tkColorDialog_MoveSelector {w sel color x delta} {
    upvar #0 $w data
d570 2
a571 2
    } elseif { $x >= $data(BARS_WIDTH)} {
	set x [expr {$data(BARS_WIDTH) - 1}]
d581 1
a581 1
# tkColorDialog_ReleaseMouse
d588 2
a589 2
proc tkColorDialog_ReleaseMouse {w sel color x delta} {
    upvar #0 $w data 
d591 1
a591 1
    set x [tkColorDialog_MoveSelector $w $sel $color $x $delta]
d594 1
a594 1
    set data($color,intensity) [tkColorDialog_XToRgb $w $x]
d596 1
a596 1
    tkColorDialog_RedrawColorBars $w $color
d599 1
a599 1
# tkColorDialog_ResizeColorbars --
d604 2
a605 2
proc tkColorDialog_ResizeColorBars {w} {
    upvar #0 $w data
d611 2
a612 2
    tkColorDialog_InitValues $w
    foreach color { red green blue } {
d614 1
a614 1
	tkColorDialog_DrawColorScale $w $color 1
d618 1
a618 1
# tkColorDialog_HandleSelEntry --
d622 2
a623 2
proc tkColorDialog_HandleSelEntry {w} {
    upvar #0 $w data
d636 1
a636 1
    tkColorDialog_SetRGBValue $w "$R $G $B"
d640 1
a640 1
# tkColorDialog_HandleRGBEntry --
d644 2
a645 2
proc tkColorDialog_HandleRGBEntry {w} {
    upvar #0 $w data
d647 1
a647 1
    foreach c {red green blue} {
d662 2
a663 2
    tkColorDialog_SetRGBValue $w "$data(red,intensity) $data(green,intensity) \
	$data(blue,intensity)"
d668 2
a669 2
proc tkColorDialog_EnterColorBar {w color} {
    upvar #0 $w data
d676 2
a677 2
proc tkColorDialog_LeaveColorBar {w color} {
    upvar #0 $w data
d684 3
a686 3
proc tkColorDialog_OkCmd {w} {
    global tkPriv
    upvar #0 $w data
d688 1
a688 1
    set tkPriv(selectColor) $data(finalColor)
d693 3
a695 4
proc tkColorDialog_CancelCmd {w} {
    global tkPriv

    set tkPriv(selectColor) ""
a696 2


@


1.3
log
@touched all sources to ease next import
@
text
@@


1.2
log
@touched all tk files to ease next import
@
text
@@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
# SCCS: @@(#) clrpick.tcl 1.3 96/09/05 09:59:24
d62 7
a68 2
    if {![winfo exists $w]} {
	toplevel $w -class tkColorDialog
d71 1
a73 1

d78 1
a78 8
    wm withdraw $w
    update idletasks
    set x [expr {[winfo screenwidth $w]/2 - [winfo reqwidth $w]/2 \
	    - [winfo vrootx [winfo parent $w]]}]
    set y [expr {[winfo screenheight $w]/2 - [winfo reqheight $w]/2 \
	    - [winfo vrooty [winfo parent $w]]}]
    wm geom $w +$x+$y
    wm deiconify $w
d83 1
a83 7
    set oldFocus [focus]
    set oldGrab [grab current $w]
    if {$oldGrab != ""} {
	set grabStatus [grab status $oldGrab]
    }
    grab $w
    focus $data(okBtn)
d91 2
a92 4
    tkwait variable tkPriv(selectColor)
    catch {focus $oldFocus}
    grab release $w
    destroy $w
d94 1
a94 7
    if {$oldGrab != ""} {
	if {$grabStatus == "global"} {
	    grab -global $oldGrab
	} else {
	    grab $oldGrab
	}
    }
d134 1
a134 2
    set data(canvasWidth) [expr {$data(BARS_WIDTH) + \
	    $data(PLGN_WIDTH)}]
d157 5
a161 4
    set specs {
	{-initialcolor "" "" ""}
	{-parent "" "" "."}
	{-title "" "" "Color"}
d164 6
d174 1
a174 1
    if {![string compare $data(-title) ""]} {
d177 2
a178 11
    if {![string compare $data(-initialcolor) ""]} {
	if {[info exists tkPriv(selectColor)] && \
		[string compare $tkPriv(selectColor) ""]} {
	    set data(-initialcolor) $tkPriv(selectColor)
	} else {
	    set data(-initialcolor) [. cget -background]
	}
    } else {
	if {[catch {winfo rgb . $data(-initialcolor)} err]} {
	    error $err
	}
d234 1
a234 1
	    "tkColorDialog_DrawColorScale $w $color 1"
d236 1
a236 1
	    "tkColorDialog_EnterColorBar $w $color"
d238 1
a238 1
	    "tkColorDialog_LeaveColorBar $w $color"
d241 1
a241 1
	    "tkColorDialog_EnterColorBar $w $color"
d243 3
a245 3
	    "tkColorDialog_LeaveColorBar $w $color"
	
	bind $box.entry <Return> "tkColorDialog_HandleRGBEntry $w"
d264 1
a264 1
    bind $ent <Return> "tkColorDialog_HandleSelEntry $w"
d273 1
a273 1
	-command "tkColorDialog_OkCmd $w"
d275 1
a275 1
	-command "tkColorDialog_CancelCmd $w"
d287 7
a293 7
    bind $w <Alt-r> "focus $data(red,entry)"
    bind $w <Alt-g> "focus $data(green,entry)"
    bind $w <Alt-b> "focus $data(blue,entry)"
    bind $w <Alt-s> "focus $ent"
    bind $w <KeyPress-Escape> "tkButtonInvoke $data(cancelBtn)"
    bind $w <Alt-c> "tkButtonInvoke $data(cancelBtn)"
    bind $w <Alt-o> "tkButtonInvoke $data(okBtn)"
d295 1
a295 1
    wm protocol $w WM_DELETE_WINDOW "tkColorDialog_CancelCmd $w"
d370 1
a370 1
	    "tkColorDialog_StartMove $w $sel $c %x $data(selPad) 1"
d372 1
a372 1
	    "tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)"
d374 1
a374 1
	    "tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)"
d380 1
a380 1
	    $data(canvasWidth) $height -fill {} -outline {}]
d383 1
a383 1
	    "tkColorDialog_StartMove $w $sel $c %x $data(colorPad)"
d385 1
a385 1
	    "tkColorDialog_MoveSelector $w $sel $c %x $data(colorPad)"
d387 1
a387 1
	    "tkColorDialog_ReleaseMouse $w $sel $c %x $data(colorPad)"
d390 1
a390 1
	    "tkColorDialog_StartMove $w $sel $c %x $data(selPad)"
d392 1
a392 1
	    "tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)"
d394 1
a394 1
	    "tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)"
d401 1
a401 2
    set highlightW [expr \
	    {[$col cget -highlightthickness] + [$col cget -bd]}]
d405 1
a405 1
	if { $c == "red" } {
d410 1
a410 1
	} elseif { $c == "green" } {
d428 1
a428 1
	    $col itemconf $l -fill $color -outline $color
d467 1
a467 1
    $data(finalCanvas) conf -bg $color
d471 3
a473 3
	$data(red,intensity) \
	$data(green,intensity) \
	$data(blue,intensity)]
d586 1
a586 1
	$data($color,col) conf -width $data(canvasWidth)
d671 2
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@Tk 8.3 upgrade
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: clrpick.tcl,v 1.7.6.2 2000/09/26 16:08:36 spolk Exp $
d62 2
a63 7
    set sc [winfo screen $data(-parent)]
    set winExists [winfo exists $w]
    if {!$winExists || [string compare $sc [winfo screen $w]]} {
	if {$winExists} {
	    destroy $w
	}
	toplevel $w -class tkColorDialog -screen $sc
d66 1
a67 1
    wm transient $w $data(-parent)
d73 8
a80 1
    ::tk::PlaceWindow $w widget $data(-parent)
d85 7
a91 1
    ::tk::SetFocusGrab $w $data(okBtn)
d99 4
a102 2
    vwait tkPriv(selectColor)
    ::tk::RestoreFocusGrab $w $data(okBtn)
d104 7
a110 1

d150 2
a151 1
    set data(canvasWidth) [expr {$data(BARS_WIDTH) + $data(PLGN_WIDTH)}]
d174 4
a177 5
    if {[info exists tkPriv(selectColor)] && \
	    [string compare $tkPriv(selectColor) ""]} {
	set defaultColor $tkPriv(selectColor)
    } else {
	set defaultColor [. cget -background]
a179 6
    set specs [list \
	    [list -initialcolor "" "" $defaultColor] \
	    [list -parent "" "" "."] \
	    [list -title "" "" "Color"] \
	    ]

d184 1
a184 1
    if {[string equal $data(-title) ""]} {
d187 11
a197 2
    if {[catch {winfo rgb . $data(-initialcolor)} err]} {
	error $err
d253 1
a253 1
	    [list tkColorDialog_DrawColorScale $w $color 1]
d255 1
a255 1
	    [list tkColorDialog_EnterColorBar $w $color]
d257 1
a257 1
	    [list tkColorDialog_LeaveColorBar $w $color]
d260 1
a260 1
	    [list tkColorDialog_EnterColorBar $w $color]
d262 3
a264 3
	    [list tkColorDialog_LeaveColorBar $w $color]

	bind $box.entry <Return> [list tkColorDialog_HandleRGBEntry $w]
d283 1
a283 1
    bind $ent <Return> [list tkColorDialog_HandleSelEntry $w]
d292 1
a292 1
	-command [list tkColorDialog_OkCmd $w]
d294 1
a294 1
	-command [list tkColorDialog_CancelCmd $w]
d306 7
a312 7
    bind $w <Alt-r> [list focus $data(red,entry)]
    bind $w <Alt-g> [list focus $data(green,entry)]
    bind $w <Alt-b> [list focus $data(blue,entry)]
    bind $w <Alt-s> [list focus $ent]
    bind $w <KeyPress-Escape> [list tkButtonInvoke $data(cancelBtn)]
    bind $w <Alt-c> [list tkButtonInvoke $data(cancelBtn)]
    bind $w <Alt-o> [list tkButtonInvoke $data(okBtn)]
d314 1
a314 1
    wm protocol $w WM_DELETE_WINDOW [list tkColorDialog_CancelCmd $w]
d389 1
a389 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(selPad) 1]
d391 1
a391 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
d393 1
a393 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)]
d399 1
a399 1
		$data(canvasWidth) $height -fill {} -outline {}]
d402 1
a402 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(colorPad)]
d404 1
a404 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(colorPad)]
d406 1
a406 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(colorPad)]
d409 1
a409 1
		[list tkColorDialog_StartMove $w $sel $c %x $data(selPad)]
d411 1
a411 1
		[list tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
d413 1
a413 1
		[list tkColorDialog_ReleaseMouse $w $sel $c %x $data(selPad)]
d420 2
a421 1
    set highlightW [expr {[$col cget -highlightthickness] + [$col cget -bd]}]
d425 1
a425 1
	if {[string equal $c "red"]} {
d430 1
a430 1
	} elseif {[string equal $c "green"]} {
d448 1
a448 1
	    $col itemconfigure $l -fill $color -outline $color
d487 1
a487 1
    $data(finalCanvas) configure -bg $color
d491 3
a493 3
	    $data(red,intensity) \
	    $data(green,intensity) \
	    $data(blue,intensity)]
d606 1
a606 1
	$data($color,col) configure -width $data(canvasWidth)
a690 2


@


1.1.1.3
log
@import tk 8.4.0
@
text
@d6 1
a6 1
# RCS: @@(#) $Id: clrpick.tcl,v 1.19 2002/07/22 21:25:39 mdejong Exp $
d20 1
a20 8
# Make sure namespaces exist
namespace eval ::tk {}
namespace eval ::tk::dialog {}
namespace eval ::tk::dialog::color {
    namespace import ::tk::msgcat::*
}

# ::tk::dialog::color:: --
d26 4
a29 5
proc ::tk::dialog::color:: {args} {
    variable ::tk::Priv
    set dataName __tk__color
    upvar ::tk::dialog::color::$dataName data
    set w .$dataName
d44 1
a44 1
    set data(NUM_COLORBARS) 16
d48 1
a48 1
    set data(BARS_WIDTH) 160
d59 2
a60 2
    Config $dataName $args
    InitValues $dataName
d68 2
a69 2
	toplevel $w -class TkColorDialog -screen $sc
	BuildDialog $w
d72 1
a72 10
    # Dialog boxes should be transient with respect to their parent,
    # so that they will always stay on top of their parent window.  However,
    # some window managers will create the window as withdrawn if the parent
    # window is withdrawn or iconified.  Combined with the grab we put on the
    # window, this can hang the entire application.  Therefore we only make
    # the dialog transient if the parent is viewable.

    if {[winfo viewable [winfo toplevel $data(-parent)]] } {
	wm transient $w $data(-parent)
    }
d91 1
a91 1
    vwait ::tk::Priv(selectColor)
d95 1
a95 1
    return $Priv(selectColor)
d98 1
a98 1
# ::tk::dialog::color::InitValues --
d102 2
a103 2
proc ::tk::dialog::color::InitValues {dataName} {
    upvar ::tk::dialog::color::$dataName data
d147 1
a147 1
# ::tk::dialog::color::Config  --
d151 3
a153 3
proc ::tk::dialog::color::Config {dataName argList} {
    variable ::tk::Priv
    upvar ::tk::dialog::color::$dataName data
d157 3
a159 3
    if {[info exists Priv(selectColor)] && \
	    [string compare $Priv(selectColor) ""]} {
	set defaultColor $Priv(selectColor)
d167 1
a167 1
	    [list -title "" "" [mc "Color"]] \
d172 1
a172 1
    tclParseConfigSpec ::tk::dialog::color::$dataName $specs "" $argList
d186 1
a186 1
# ::tk::dialog::color::BuildDialog --
d190 2
a191 2
proc ::tk::dialog::color::BuildDialog {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
d200 3
a202 8
    set maxWidth [::tk::mcmaxamp &Red &Green &Blue]
    set maxWidth [expr {$maxWidth<6?6:$maxWidth}]
    set colorList [list \
	    red		[mc "&Red"]	\
	    green	[mc "&Green"]	\
	    blue	[mc "&Blue"]	\
	    ]
    foreach {color l} $colorList {
d209 3
a211 6
	bind [::tk::AmpWidget label $box.label -text $l: -width $maxWidth \
	    -anchor ne] <<AltUnderlined>> [list focus $box.entry]
	
	entry $box.entry -textvariable \
		::tk::dialog::color::[winfo name $w]($color,intensity) \
		-width 4
d234 1
a234 1
	    [list tk::dialog::color::DrawColorScale $w $color 1]
d236 1
a236 1
	    [list tk::dialog::color::EnterColorBar $w $color]
d238 1
a238 1
	    [list tk::dialog::color::LeaveColorBar $w $color]
d241 1
a241 1
	    [list tk::dialog::color::EnterColorBar $w $color]
d243 1
a243 1
	    [list tk::dialog::color::LeaveColorBar $w $color]
d245 1
a245 1
	bind $box.entry <Return> [list tk::dialog::color::HandleRGBEntry $w]
d254 2
a255 4
    set lab [::tk::AmpWidget label $selFrame.lab -text [mc "&Selection:"] \
	    -anchor sw]
    set ent [entry $selFrame.ent \
	-textvariable ::tk::dialog::color::[winfo name $w](selection) \
d264 1
a264 1
    bind $ent <Return> [list tk::dialog::color::HandleSelEntry $w]
d272 4
a275 8
    set maxWidth [::tk::mcmaxamp &OK &Cancel]
    set maxWidth [expr {$maxWidth<8?8:$maxWidth}]
    ::tk::AmpWidget button $botFrame.ok     -text [mc "&OK"]		\
	    -width $maxWidth \
	    -command [list tk::dialog::color::OkCmd $w]
    ::tk::AmpWidget button $botFrame.cancel -text [mc "&Cancel"]	\
	    -width $maxWidth \
	    -command [list tk::dialog::color::CancelCmd $w]
a285 3
    bind $lab <<AltUnderlined>> [list focus $ent]
    bind $w <KeyPress-Escape> [list tk::ButtonInvoke $data(cancelBtn)]
    bind $w <Alt-Key> [list tk::AltKeyInDialog $w %A]
d287 9
a295 1
    wm protocol $w WM_DELETE_WINDOW [list tk::dialog::color::CancelCmd $w]
d298 1
a298 1
# ::tk::dialog::color::SetRGBValue --
d302 2
a303 2
proc ::tk::dialog::color::SetRGBValue {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data 
d309 1
a309 1
    RedrawColorBars $w all
d312 3
a314 3
    foreach color [list red green blue ] {
	set x [RgbToX $w $data($color,intensity)]
	MoveSelector $w $data($color,sel) $color $x 0
d318 1
a318 1
# ::tk::dialog::color::XToRgb --
d322 2
a323 2
proc ::tk::dialog::color::XToRgb {w x} {
    upvar ::tk::dialog::color::[winfo name $w] data
d325 1
a325 3
    set x [expr {($x * $data(intensityIncr))/ $data(colorbarWidth)}]
    if {$x > 255} { set x 255 }
    return $x
d328 1
a328 1
# ::tk::dialog::color::RgbToX
d332 2
a333 2
proc ::tk::dialog::color::RgbToX {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data
d339 1
a339 1
# ::tk::dialog::color::DrawColorScale --
d344 3
a346 2
proc ::tk::dialog::color::DrawColorScale {w c {create 0}} {
    upvar ::tk::dialog::color::[winfo name $w] data
d368 1
a368 1
	CreateSelector $w $sel $c
d370 1
a370 1
		[list tk::dialog::color::StartMove $w $sel $c %x $data(selPad) 1]
d372 1
a372 1
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(selPad)]
d374 1
a374 1
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(selPad)]
d383 1
a383 1
		[list tk::dialog::color::StartMove $w $sel $c %x $data(colorPad)]
d385 1
a385 1
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(colorPad)]
d387 1
a387 1
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(colorPad)]
d390 1
a390 1
		[list tk::dialog::color::StartMove $w $sel $c %x $data(selPad)]
d392 1
a392 1
		[list tk::dialog::color::MoveSelector $w $sel $c %x $data(selPad)]
d394 1
a394 1
		[list tk::dialog::color::ReleaseMouse $w $sel $c %x $data(selPad)]
d439 1
a439 1
    RedrawFinalColor $w
d442 1
a442 1
# ::tk::dialog::color::CreateSelector --
d447 2
a448 2
proc ::tk::dialog::color::CreateSelector {w sel c } {
    upvar ::tk::dialog::color::[winfo name $w] data
d453 1
a453 1
    set data($c,x) [RgbToX $w $data($c,intensity)]
d457 1
a457 1
# ::tk::dialog::color::RedrawFinalColor
d461 2
a462 2
proc ::tk::dialog::color::RedrawFinalColor {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
d476 1
a476 1
# ::tk::dialog::color::RedrawColorBars --
d482 2
a483 2
proc ::tk::dialog::color::RedrawColorBars {w colorChanged} {
    upvar ::tk::dialog::color::[winfo name $w] data
d487 2
a488 2
	    DrawColorScale $w green
	    DrawColorScale $w blue
d491 2
a492 2
	    DrawColorScale $w red
	    DrawColorScale $w blue
d495 2
a496 2
	    DrawColorScale $w red
	    DrawColorScale $w green
d499 3
a501 3
	    DrawColorScale $w red
	    DrawColorScale $w green
	    DrawColorScale $w blue
d504 1
a504 1
    RedrawFinalColor $w
d511 1
a511 1
# ::tk::dialog::color::StartMove --
d519 2
a520 2
proc ::tk::dialog::color::StartMove {w sel color x delta {dontMove 0}} {
    upvar ::tk::dialog::color::[winfo name $w] data
d523 1
a523 1
	MoveSelector $w $sel $color $x $delta
d527 1
a527 1
# ::tk::dialog::color::MoveSelector --
d536 2
a537 2
proc ::tk::dialog::color::MoveSelector {w sel color x delta} {
    upvar ::tk::dialog::color::[winfo name $w] data
d543 2
a544 2
    } elseif { $x > $data(BARS_WIDTH)} {
	set x $data(BARS_WIDTH)
d554 1
a554 1
# ::tk::dialog::color::ReleaseMouse
d561 2
a562 2
proc ::tk::dialog::color::ReleaseMouse {w sel color x delta} {
    upvar ::tk::dialog::color::[winfo name $w] data 
d564 1
a564 1
    set x [MoveSelector $w $sel $color $x $delta]
d567 1
a567 1
    set data($color,intensity) [XToRgb $w $x]
d569 1
a569 1
    RedrawColorBars $w $color
d572 1
a572 1
# ::tk::dialog::color::ResizeColorbars --
d577 2
a578 2
proc ::tk::dialog::color::ResizeColorBars {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
d584 2
a585 2
    InitValues [winfo name $w]
    foreach color [list red green blue ] {
d587 1
a587 1
	DrawColorScale $w $color 1
d591 1
a591 1
# ::tk::dialog::color::HandleSelEntry --
d595 2
a596 2
proc ::tk::dialog::color::HandleSelEntry {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
d609 1
a609 1
    SetRGBValue $w "$R $G $B"
d613 1
a613 1
# ::tk::dialog::color::HandleRGBEntry --
d617 2
a618 2
proc ::tk::dialog::color::HandleRGBEntry {w} {
    upvar ::tk::dialog::color::[winfo name $w] data
d620 1
a620 1
    foreach c [list red green blue] {
d635 2
a636 2
    SetRGBValue $w "$data(red,intensity) \
	$data(green,intensity) $data(blue,intensity)"
d641 2
a642 2
proc ::tk::dialog::color::EnterColorBar {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data
d649 2
a650 2
proc ::tk::dialog::color::LeaveColorBar {w color} {
    upvar ::tk::dialog::color::[winfo name $w] data
d657 3
a659 3
proc ::tk::dialog::color::OkCmd {w} {
    variable ::tk::Priv
    upvar ::tk::dialog::color::[winfo name $w] data
d661 1
a661 1
    set Priv(selectColor) $data(finalColor)
d666 4
a669 3
proc ::tk::dialog::color::CancelCmd {w} {
    variable ::tk::Priv
    set Priv(selectColor) ""
d671 2
@


