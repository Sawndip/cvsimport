head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.28
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	gdb_7_5-branch:1.3.0.26
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	gdb_7_4-branch:1.3.0.24
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	gdb_7_3-branch:1.3.0.22
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	gdb_7_1-branch:1.3.0.20
	gdb_7_0-branch:1.3.0.18
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	arc-sim-20090309:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	kevinb-pre-tk8_5_7_merge:1.3
	sid-snapshot-20090401:1.3
	arc-insight_6_8-branch:1.3.0.16
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.14
	insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	gdb_6_8-branch:1.3.0.12
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.10
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.8
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.6
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.2
	gdb_6_0-2003-06-23-branchpoint:1.3
	TK8_4_1:1.1.1.2
	tcltk840-20020924-branch:1.1.1.1.0.2
	tcltk840-20020924-branchpoint:1.1.1.1
	TK_8_4_0:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.21.20.24.49;	author hunt;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	2003.01.21.19.53.15;	author hunt;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.20.38.42;	author kseitz;	state Exp;
branches
	1.1.1.1;
next	;

1.3.16.1
date	2009.09.11.04.46.04;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	2002.09.24.20.38.42;	author kseitz;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.01.21.19.54.35;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Updated to tk 8.4.1
@
text
@/* 
 * tkAppInit.c --
 *
 *        Provides a default version of the Tcl_AppInit procedure for
 *        use in wish and similar Tk-based applications.
 *
 * Copyright (c) 1993 The Regents of the University of California.
 * Copyright (c) 1994-1997 Sun Microsystems, Inc.
 * Copyright 2001, Apple Computer, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkMacOSXAppInit.c,v 1.4 2002/10/21 04:37:34 das Exp $
 */
#include <pthread.h>
#include <sys/stat.h>
#include "tk.h"
#include "tclInt.h"
#include "locale.h"

#include <Carbon/Carbon.h>
#include "tkPort.h"
#include "tkMacOSX.h"
#include "tkMacOSXEvent.h"

/*
 * If the App is in an App package, then we want to add the Scripts
 * directory to the auto_path.  But we have to wait till after the
 * Tcl_Init is run, or it gets blown away.  This stores what we
 * figured out in main.
 */
 
char scriptPath[PATH_MAX + 1];

extern Tcl_Interp *gStdoutInterp;

#ifdef TK_TEST
extern int                Tktest_Init _ANSI_ARGS_((Tcl_Interp *interp));
#endif /* TK_TEST */

/*
 *----------------------------------------------------------------------
 *
 * main --
 *
 *        This is the main program for the application.
 *
 * Results:
 *        None: Tk_Main never returns here, so this procedure never
 *        returns either.
 *
 * Side effects:
 *        Whatever the application does.
 *
 *----------------------------------------------------------------------
 */

int
main(argc, argv)
    int argc;                        /* Number of command-line arguments. */
    char **argv;                /* Values of command-line arguments. */
{
    int textEncoding; /* 
                       * Variable used to take care of
                       * lazy font initialization
                       */
    CFBundleRef bundleRef;

    /*
     * The following #if block allows you to change the AppInit
     * function by using a #define of TCL_LOCAL_APPINIT instead
     * of rewriting this entire file.  The #if checks for that
     * #define and uses Tcl_AppInit if it doesn't exist.
     */
    
#ifndef TK_LOCAL_APPINIT
#define TK_LOCAL_APPINIT Tcl_AppInit    
#endif
    extern int TK_LOCAL_APPINIT _ANSI_ARGS_((Tcl_Interp *interp));

    scriptPath[0] = '\0';

    /*
     * The following #if block allows you to change how Tcl finds the startup
     * script, prime the library or encoding paths, fiddle with the argv,
     * etc., without needing to rewrite Tk_Main().  Note, if you use this
     * hook, then I won't do the CFBundle lookup, since if you are messing
     * around at this level, you probably don't want me to do this for you...
     */
    
#ifdef TK_LOCAL_MAIN_HOOK
    extern int TK_LOCAL_MAIN_HOOK _ANSI_ARGS_((int *argc, char ***argv));
    TK_LOCAL_MAIN_HOOK(&argc, &argv);
#else

    /*
     * On MacOS X, we look for a file in the Resources/Scripts directory
     * called AppMain.tcl and if found, we set argv[1] to that, so that
     * the rest of the code will find it, and add the Scripts folder to
     * the auto_path.  If we don't find the startup script, we just bag
     * it, assuming the user is starting up some other way.
     */
    
    bundleRef = CFBundleGetMainBundle();
    
    if (bundleRef != NULL) {
        CFURLRef appMainURL;
        appMainURL = CFBundleCopyResourceURL(bundleRef, 
                CFSTR("AppMain"), 
                CFSTR("tcl"), 
                CFSTR("Scripts"));

        if (appMainURL != NULL) {
            CFURLRef scriptFldrURL;
            char *startupScript = malloc(PATH_MAX + 1);
                            
            if (CFURLGetFileSystemRepresentation (appMainURL, true,
                    startupScript, PATH_MAX)) {
                TclSetStartupScriptFileName(startupScript);
                scriptFldrURL = CFBundleCopyResourceURL(bundleRef,
                        CFSTR("Scripts"),
                        NULL,
                        NULL);
                CFURLGetFileSystemRepresentation(scriptFldrURL, 
                        true, scriptPath, PATH_MAX);
                CFRelease(scriptFldrURL);
            } else {
                free(startupScript);
            }
            CFRelease(appMainURL);
        }
    }

#endif
    textEncoding=GetApplicationTextEncoding();
    
    /*
     * Now add the scripts folder to the auto_path.
     */
     
    Tk_Main(argc,argv,TK_LOCAL_APPINIT);
    return 0;                        /* Needed only to prevent compiler warning. */
}

/*
 *----------------------------------------------------------------------
 *
 * Tcl_AppInit --
 *
 *        This procedure performs application-specific initialization.
 *        Most applications, especially those that incorporate additional
 *        packages, will have their own version of this procedure.
 *
 * Results:
 *        Returns a standard Tcl completion code, and leaves an error
 *        message in the interp's result if an error occurs.
 *
 * Side effects:
 *        Depends on the startup script.
 *
 *----------------------------------------------------------------------
 */

int
Tcl_AppInit(interp)
    Tcl_Interp *interp;                /* Interpreter for application. */
{        
    if (Tcl_Init(interp) == TCL_ERROR) {
        return TCL_ERROR;
    }    
    if (Tk_Init(interp) == TCL_ERROR) {
        return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Tk", Tk_Init, Tk_SafeInit);

    if (scriptPath[0] != '\0') {
        Tcl_SetVar(interp, "auto_path", scriptPath,
                TCL_GLOBAL_ONLY|TCL_LIST_ELEMENT|TCL_APPEND_VALUE);
    }
    
#ifdef TK_TEST
    if (Tktest_Init(interp) == TCL_ERROR) {
        return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Tktest", Tktest_Init,
            (Tcl_PackageInitProc *) NULL);
#endif /* TK_TEST */

    /*
     * If we don't have a TTY and stdin is a special character file of length 0,
     * (e.g. /dev/null, which is what Finder sets when double clicking Wish)
     * then use the Tk based console interpreter.
     */

    if (!isatty(0)) {
	struct stat st;
	if (fstat(0, &st) || (S_ISCHR(st.st_mode) && st.st_blocks == 0)) {
            Tk_InitConsoleChannels(interp);
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDIN));
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDOUT));
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDERR));
	    if (Tk_CreateConsoleWindow(interp) == TCL_ERROR) {
		goto error;
	    }
	    /* Only show the console if we don't have a startup script */
	    if (TclGetStartupScriptPath() == NULL) {
		Tcl_Eval(interp, "console show");
	    }
	}
    }
    
    /*
     * Call the init procedures for included packages.  Each call should
     * look like this:
     *
     * if (Mod_Init(interp) == TCL_ERROR) {
     *     return TCL_ERROR;
     * }
     *
     * where "Mod" is the name of the module.
     */

    /*
     * Call Tcl_CreateCommand for application-specific commands, if
     * they weren't already created by the init procedures called above.
     */

    
    /*
     * Specify a user-specific startup file to invoke if the application
     * is run interactively.  Typically the startup file is "~/.apprc"
     * where "app" is the name of the application.  If this line is deleted
     * then no user-specific startup file will be run under any conditions.
     */
     
    Tcl_SetVar(interp, "tcl_rcFileName", "~/.wishrc", TCL_GLOBAL_ONLY);

    return TCL_OK;

    error:
    return TCL_ERROR;
}
@


1.3.16.1
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkMacOSXAppInit.c,v 1.3 2003/01/21 20:24:49 hunt Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkMacOSXAppInit.c,v 1.1.1.1 2002/09/24 20:38:42 kseitz Exp $
d17 1
d23 1
a26 4
#ifndef MAX_PATH_LEN
    #define MAX_PATH_LEN 1024
#endif

d34 1
a34 1
char scriptPath[MAX_PATH_LEN + 1];
d116 1
a116 1
            char *startupScript = malloc(MAX_PATH_LEN + 1);
d119 1
a119 1
                    startupScript, MAX_PATH_LEN)) {
d126 1
a126 1
                        true, scriptPath, MAX_PATH_LEN);
d191 3
a193 2
     * If we don't have a TTY, then use the Tk based console
     * interpreter instead.
d196 15
a210 12
    if (ttyname(0) == NULL) {
        Tk_InitConsoleChannels(interp);
        Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDIN));
        Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDOUT));
        Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDERR));
        if (Tk_CreateConsoleWindow(interp) == TCL_ERROR) {
            goto error;
        }
	/* Only show the console if we don't have a startup script */
        if (TclGetStartupScriptPath() == NULL) {
            Tcl_Eval(interp, "console show");
        }
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkMacOSXAppInit.c,v 1.2 2002/08/31 06:12:29 das Exp $
@


1.1.1.1
log
@import tk 8.4.0
@
text
@@


1.1.1.2
log
@imported tk 8.4.1
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkMacOSXAppInit.c,v 1.4 2002/10/21 04:37:34 das Exp $
a16 1
#include <sys/stat.h>
a21 1
#include "tkPort.h"
d25 4
d36 1
a36 1
char scriptPath[PATH_MAX + 1];
d118 1
a118 1
            char *startupScript = malloc(PATH_MAX + 1);
d121 1
a121 1
                    startupScript, PATH_MAX)) {
d128 1
a128 1
                        true, scriptPath, PATH_MAX);
d193 2
a194 3
     * If we don't have a TTY and stdin is a special character file of length 0,
     * (e.g. /dev/null, which is what Finder sets when double clicking Wish)
     * then use the Tk based console interpreter.
d197 12
a208 15
    if (!isatty(0)) {
	struct stat st;
	if (fstat(0, &st) || (S_ISCHR(st.st_mode) && st.st_blocks == 0)) {
            Tk_InitConsoleChannels(interp);
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDIN));
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDOUT));
            Tcl_RegisterChannel(interp, Tcl_GetStdChannel(TCL_STDERR));
	    if (Tk_CreateConsoleWindow(interp) == TCL_ERROR) {
		goto error;
	    }
	    /* Only show the console if we don't have a startup script */
	    if (TclGetStartupScriptPath() == NULL) {
		Tcl_Eval(interp, "console show");
	    }
	}
@

