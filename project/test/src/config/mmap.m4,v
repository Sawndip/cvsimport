head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	cgen-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	cgen-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	cgen-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	cgen-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	cgen-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	cgen-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	cgen-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	cgen-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	cgen-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	cgen-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	cgen-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	cgen-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	cgen-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	cgen-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	cgen-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	cgen-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	cgen-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	cgen-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	cgen-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	cgen-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	cgen-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	cgen-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	cgen-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	cgen-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	cgen-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	cgen-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	cgen-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	cgen-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	cgen-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	cgen-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	cgen-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	cgen-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	cgen-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	cgen-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	cgen-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	cgen-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	cgen-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	cgen-snapshot-20150401:1.1
	cygwin-1_7_35-release:1.1
	sid-snapshot-20150301:1.1
	cgen-snapshot-20150301:1.1
	cygwin-1_7_34-release:1.1
	sid-snapshot-20150201:1.1
	cgen-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	cgen-snapshot-20150101:1.1
	newlib-2_2_0:1.1.0.14
	sid-snapshot-20141201:1.1
	cgen-snapshot-20141201:1.1
	cygwin-1_7_33-release:1.1
	sid-snapshot-20141101:1.1
	cgen-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	cgen-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	cgen-snapshot-20140901:1.1
	cygwin-1_7_32-release:1.1
	sid-snapshot-20140801:1.1
	cgen-snapshot-20140801:1.1
	cygwin-1_7_31-release:1.1
	sid-snapshot-20140701:1.1
	cgen-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	cgen-snapshot-20140601:1.1
	cygwin-1_7_30-release:1.1
	sid-snapshot-20140501:1.1
	cgen-snapshot-20140501:1.1
	cygwin-1_7_29-release:1.1
	sid-snapshot-20140401:1.1
	cgen-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	cgen-snapshot-20140301:1.1
	cygwin-1_7_28-release:1.1
	sid-snapshot-20140201:1.1
	cgen-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	cgen-snapshot-20140101:1.1
	newlib-2_1_0:1.1
	sid-snapshot-20131201:1.1
	cgen-snapshot-20131201:1.1
	cygwin-1_7_27-release:1.1
	cygwin-1_7_26-release:1.1
	sid-snapshot-20131101:1.1
	cgen-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	cgen-snapshot-20131001:1.1
	binutils-2_24-branch:1.1.0.12
	binutils-2_24-branchpoint:1.1
	sid-snapshot-20130901:1.1
	cgen-snapshot-20130901:1.1
	cygwin-1_7_25-release:1.1
	gdb_7_6_1-2013-08-30-release:1.1
	cygwin-1_7_24-release:1.1
	cygwin-1_7_23-release:1.1
	sid-snapshot-20130801:1.1
	cgen-snapshot-20130801:1.1
	cygwin-1_7_22-release:1.1
	cygwin-1_7_21-release:1.1
	sid-snapshot-20130701:1.1
	cgen-snapshot-20130701:1.1
	cygwin-1_7_20-release:1.1
	cygwin-1_7_19-release:1.1
	sid-snapshot-20130601:1.1
	cgen-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	cgen-snapshot-20130501:1.1
	gdb_7_6-2013-04-26-release:1.1
	cygwin-64bit-postmerge:1.1
	cygwin-64bit-premerge-branch:1.1.0.10
	cygwin-64bit-premerge:1.1
	sid-snapshot-20130401:1.1
	cgen-snapshot-20130401:1.1
	binutils-2_23_2:1.1
	gdb_7_6-branch:1.1.0.8
	gdb_7_6-2013-03-12-branchpoint:1.1
	cygwin-1_7_18-release:1.1
	sid-snapshot-20130301:1.1
	cgen-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	cgen-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	cgen-snapshot-20130101:1.1
	newlib-2_0_0:1.1
	sid-snapshot-20121201:1.1
	cgen-snapshot-20121201:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	binutils-2_23_1:1.1
	sid-snapshot-20121101:1.1
	cgen-snapshot-20121101:1.1
	binutils-2_23:1.1
	cygwin-1_7_17-release:1.1
	sid-snapshot-20121001:1.1
	cgen-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	cgen-snapshot-20120901:1.1
	gdb_7_5-2012-08-17-release:1.1
	cygwin-64bit-branch:1.1.0.6
	sid-snapshot-20120801:1.1
	cgen-snapshot-20120801:1.1
	binutils-2_23-branch:1.1.0.4
	binutils-2_23-branchpoint:1.1
	cygwin-1_7_16-release:1.1
	gdb_7_5-branch:1.1.0.2
	gdb_7_5-2012-07-18-branchpoint:1.1
	sid-snapshot-20120701:1.1
	cgen-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	cgen-snapshot-20120601:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.05.29.15.58.15;	author jsm28;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Resync config/ from GCC.
@
text
@dnl ----------------------------------------------------------------------
dnl This whole bit snagged from gcc

dnl
dnl mmap(2) blacklisting.  Some platforms provide the mmap library routine
dnl but don't support all of the features we need from it.
dnl
AC_DEFUN([GCC_AC_FUNC_MMAP_BLACKLIST],
[
AC_CHECK_HEADER([sys/mman.h],
		[gcc_header_sys_mman_h=yes], [gcc_header_sys_mman_h=no])
AC_CHECK_FUNC([mmap], [gcc_func_mmap=yes], [gcc_func_mmap=no])
if test "$gcc_header_sys_mman_h" != yes \
 || test "$gcc_func_mmap" != yes; then
   gcc_cv_func_mmap_file=no
   gcc_cv_func_mmap_dev_zero=no
   gcc_cv_func_mmap_anon=no
else
   AC_CACHE_CHECK([whether read-only mmap of a plain file works], 
  gcc_cv_func_mmap_file,
  [# Add a system to this blacklist if 
   # mmap(0, stat_size, PROT_READ, MAP_PRIVATE, fd, 0) doesn't return a
   # memory area containing the same data that you'd get if you applied
   # read() to the same fd.  The only system known to have a problem here
   # is VMS, where text files have record structure.
   case "$host_os" in
     *vms* | ultrix*)
        gcc_cv_func_mmap_file=no ;;
     *)
        gcc_cv_func_mmap_file=yes;;
   esac])
   AC_CACHE_CHECK([whether mmap from /dev/zero works],
  gcc_cv_func_mmap_dev_zero,
  [# Add a system to this blacklist if it has mmap() but /dev/zero
   # does not exist, or if mmapping /dev/zero does not give anonymous
   # zeroed pages with both the following properties:
   # 1. If you map N consecutive pages in with one call, and then
   #    unmap any subset of those pages, the pages that were not
   #    explicitly unmapped remain accessible.
   # 2. If you map two adjacent blocks of memory and then unmap them
   #    both at once, they must both go away.
   # Systems known to be in this category are Windows (all variants),
   # VMS, and Darwin.
   case "$host_os" in
     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)
        gcc_cv_func_mmap_dev_zero=no ;;
     *)
        gcc_cv_func_mmap_dev_zero=yes;;
   esac])

   # Unlike /dev/zero, the MAP_ANON(YMOUS) defines can be probed for.
   AC_CACHE_CHECK([for MAP_ANON(YMOUS)], gcc_cv_decl_map_anon,
    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[#include <sys/types.h>
#include <sys/mman.h>
#include <unistd.h>

#ifndef MAP_ANONYMOUS
#define MAP_ANONYMOUS MAP_ANON
#endif
],
[int n = MAP_ANONYMOUS;])],
    gcc_cv_decl_map_anon=yes,
    gcc_cv_decl_map_anon=no)])

   if test $gcc_cv_decl_map_anon = no; then
     gcc_cv_func_mmap_anon=no
   else
     AC_CACHE_CHECK([whether mmap with MAP_ANON(YMOUS) works],
     gcc_cv_func_mmap_anon,
  [# Add a system to this blacklist if it has mmap() and MAP_ANON or
   # MAP_ANONYMOUS, but using mmap(..., MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)
   # doesn't give anonymous zeroed pages with the same properties listed
   # above for use of /dev/zero.
   # Systems known to be in this category are Windows, VMS, and SCO Unix.
   case "$host_os" in
     *vms* | cygwin* | pe | mingw* | sco* | udk* )
        gcc_cv_func_mmap_anon=no ;;
     *)
        gcc_cv_func_mmap_anon=yes;;
   esac])
   fi
fi

if test $gcc_cv_func_mmap_file = yes; then
  AC_DEFINE(HAVE_MMAP_FILE, 1,
	    [Define if read-only mmap of a plain file works.])
fi
if test $gcc_cv_func_mmap_dev_zero = yes; then
  AC_DEFINE(HAVE_MMAP_DEV_ZERO, 1,
	    [Define if mmap of /dev/zero works.])
fi
if test $gcc_cv_func_mmap_anon = yes; then
  AC_DEFINE(HAVE_MMAP_ANON, 1,
	    [Define if mmap with MAP_ANON(YMOUS) works.])
fi
])
@
