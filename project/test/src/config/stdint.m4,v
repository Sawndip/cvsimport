head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	cgen-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	cgen-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	cgen-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	cgen-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	cgen-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	cgen-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	cgen-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	cgen-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	cgen-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	cgen-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	cgen-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	cgen-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	cgen-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	cgen-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	cgen-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	cgen-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	cgen-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	cgen-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	cgen-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	cgen-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	cgen-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	cgen-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	cgen-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	cgen-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	cgen-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	cgen-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	cgen-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	cgen-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	cgen-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	cgen-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	cgen-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	cgen-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	cgen-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	cgen-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	cgen-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	cgen-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	cgen-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	cgen-snapshot-20150401:1.8
	cygwin-1_7_35-release:1.8
	sid-snapshot-20150301:1.8
	cgen-snapshot-20150301:1.8
	cygwin-1_7_34-release:1.8
	sid-snapshot-20150201:1.8
	cgen-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	cgen-snapshot-20150101:1.8
	newlib-2_2_0:1.8.0.14
	sid-snapshot-20141201:1.8
	cgen-snapshot-20141201:1.8
	cygwin-1_7_33-release:1.8
	sid-snapshot-20141101:1.8
	cgen-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	cgen-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	cgen-snapshot-20140901:1.8
	cygwin-1_7_32-release:1.8
	sid-snapshot-20140801:1.8
	cgen-snapshot-20140801:1.8
	cygwin-1_7_31-release:1.8
	sid-snapshot-20140701:1.8
	cgen-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	cgen-snapshot-20140601:1.8
	cygwin-1_7_30-release:1.8
	sid-snapshot-20140501:1.8
	cgen-snapshot-20140501:1.8
	cygwin-1_7_29-release:1.8
	sid-snapshot-20140401:1.8
	cgen-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	cgen-snapshot-20140301:1.8
	cygwin-1_7_28-release:1.8
	sid-snapshot-20140201:1.8
	cgen-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	cgen-snapshot-20140101:1.8
	newlib-2_1_0:1.8
	sid-snapshot-20131201:1.8
	cgen-snapshot-20131201:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	sid-snapshot-20131101:1.8
	cgen-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	cgen-snapshot-20131001:1.8
	binutils-2_24-branch:1.8.0.12
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.7
	sid-snapshot-20130901:1.8
	cgen-snapshot-20130901:1.8
	cygwin-1_7_25-release:1.8
	gdb_7_6_1-2013-08-30-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	sid-snapshot-20130801:1.8
	cgen-snapshot-20130801:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	sid-snapshot-20130701:1.8
	cgen-snapshot-20130701:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	sid-snapshot-20130601:1.8
	cgen-snapshot-20130601:1.8
	sid-snapshot-20130501:1.8
	cgen-snapshot-20130501:1.8
	gdb_7_6-2013-04-26-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.10
	cygwin-64bit-premerge:1.8
	sid-snapshot-20130401:1.8
	cgen-snapshot-20130401:1.8
	binutils-2_23_2:1.8
	gdb_7_6-branch:1.8.0.8
	gdb_7_6-2013-03-12-branchpoint:1.8
	cygwin-1_7_18-release:1.8
	sid-snapshot-20130301:1.8
	cgen-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	cgen-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	cgen-snapshot-20130101:1.8
	newlib-2_0_0:1.8
	sid-snapshot-20121201:1.8
	cgen-snapshot-20121201:1.8
	gdb_7_5_1-2012-11-29-release:1.8
	binutils-2_23_1:1.8
	sid-snapshot-20121101:1.8
	cgen-snapshot-20121101:1.8
	binutils-2_23:1.8
	cygwin-1_7_17-release:1.8
	sid-snapshot-20121001:1.8
	cgen-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	cgen-snapshot-20120901:1.8
	gdb_7_5-2012-08-17-release:1.8
	cygwin-64bit-branch:1.8.0.6
	sid-snapshot-20120801:1.8
	cgen-snapshot-20120801:1.8
	binutils-2_23-branch:1.8.0.4
	binutils-2_23-branchpoint:1.8
	cygwin-1_7_16-release:1.8
	gdb_7_5-branch:1.8.0.2
	gdb_7_5-2012-07-18-branchpoint:1.8
	sid-snapshot-20120701:1.8
	cgen-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	cgen-snapshot-20120601:1.8
	cygwin-1_7_15-release:1.7
	sid-snapshot-20120501:1.7
	cgen-snapshot-20120501:1.7
	binutils-2_22_branch:1.7.0.10
	gdb_7_4_1-2012-04-26-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	sid-snapshot-20120401:1.7
	cgen-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	cgen-snapshot-20120301:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	sid-snapshot-20120201:1.7
	cgen-snapshot-20120201:1.7
	gdb_7_4-2012-01-24-release:1.7
	sid-snapshot-20120101:1.7
	cgen-snapshot-20120101:1.7
	newlib-1_20_0:1.7
	gdb_7_4-branch:1.7.0.8
	gdb_7_4-2011-12-13-branchpoint:1.7
	sid-snapshot-20111201:1.7
	cgen-snapshot-20111201:1.7
	binutils-2_22:1.7
	sid-snapshot-20111101:1.7
	cgen-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	cgen-snapshot-20111001:1.7
	binutils-2_22-branch:1.7.0.6
	binutils-2_22-branchpoint:1.7
	gdb_7_3_1-2011-09-04-release:1.7
	sid-snapshot-20110901:1.7
	cgen-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	cgen-snapshot-20110801:1.7
	gdb_7_3-2011-07-26-release:1.7
	sid-snapshot-20110701:1.7
	cgen-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	cgen-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	cgen-snapshot-20110501:1.7
	gdb_7_3-branch:1.7.0.4
	gdb_7_3-2011-04-01-branchpoint:1.7
	sid-snapshot-20110401:1.7
	cgen-snapshot-20110401:1.7
	cygwin-1_7_9-release:1.7
	sid-snapshot-20110301:1.7
	cgen-snapshot-20110301:1.7
	cygwin-1_7_8-release:1.7
	sid-snapshot-20110201:1.7
	cgen-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	cgen-snapshot-20110101:1.7
	newlib-1_19_0:1.7
	binutils-2_21:1.7
	sid-snapshot-20101201:1.7
	cgen-snapshot-20101201:1.7
	binutils-2_21-branch:1.7.0.2
	binutils-2_21-branchpoint:1.7
	sid-snapshot-20101101:1.7
	cgen-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	cgen-snapshot-20101001:1.7
	binutils-2_20_1:1.3
	gdb_7_2-2010-09-02-release:1.6
	sid-snapshot-20100901:1.7
	cgen-snapshot-20100901:1.7
	cygwin-1_7_7-release:1.7
	sid-snapshot-20100801:1.6
	cgen-snapshot-20100801:1.6
	gdb_7_2-branch:1.6.0.2
	gdb_7_2-2010-07-07-branchpoint:1.6
	sid-snapshot-20100701:1.6
	cgen-snapshot-20100701:1.6
	sid-snapshot-20100601:1.5
	cgen-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	cgen-snapshot-20100501:1.5
	cygwin-1_7_5-release:1.5
	cygwin-1_7_4-release:1.5
	sid-snapshot-20100401:1.5
	cgen-snapshot-20100401:1.5
	cygwin-1_7_3-release:1.5
	cygwin-1_7_2-release:1.5
	gdb_7_1-2010-03-18-release:1.5
	sid-snapshot-20100301:1.5
	cgen-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.4
	gdb_7_1-2010-02-18-branchpoint:1.5
	sid-snapshot-20100201:1.5
	cgen-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	cgen-snapshot-20100101:1.5
	gdb_7_0_1-2009-12-22-release:1.5
	newlib-1_18_0:1.5
	cygwin-1_7_1-release:1.5
	sid-snapshot-20091201:1.5
	cgen-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	cgen-snapshot-20091101:1.5
	binutils-2_20:1.3
	gdb_7_0-2009-10-06-release:1.5
	sid-snapshot-20091001:1.5
	cgen-snapshot-20091001:1.5
	gdb_7_0-branch:1.5.0.2
	gdb_7_0-2009-09-16-branchpoint:1.5
	arc-sim-20090309:1.3
	binutils-arc-20081103-branch:1.3.0.38
	binutils-arc-20081103-branchpoint:1.3
	newlib-1_17_0-arc:1.3.0.36
	binutils-2_20-branch:1.3.0.34
	binutils-2_20-branchpoint:1.3
	sid-snapshot-20090901:1.3
	cgen-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	cgen-snapshot-20090801:1.3
	msnyder-checkpoint-072509-branch:1.3.0.32
	msnyder-checkpoint-072509-branchpoint:1.3
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.30
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.3.0.28
	cgen-1_1-branchpoint:1.3
	sid-snapshot-20090601:1.3
	cgen-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	cgen-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	cgen-snapshot-20090401:1.3
	binutils-arc-20080908-branch:1.3.0.26
	binutils-arc-20080908-branchpoint:1.3
	arc-20081103-branch:1.3.0.24
	arc-20081103-branchpoint:1.3
	arc-insight_6_8-branch:1.3.0.22
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.20
	insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	cgen-snapshot-20090301:1.3
	binutils-2_19_1:1.3
	sid-snapshot-20090201:1.3
	cgen-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	cgen-snapshot-20090101:1.3
	reverse-20081226-branch:1.3.0.18
	reverse-20081226-branchpoint:1.3
	newlib-1_17_0:1.3
	sid-snapshot-20081201:1.3
	cgen-snapshot-20081201:1.3
	multiprocess-20081120-branch:1.3.0.16
	multiprocess-20081120-branchpoint:1.3
	sid-snapshot-20081101:1.3
	cgen-snapshot-20081101:1.3
	binutils-2_19:1.3
	sid-snapshot-20081001:1.3
	cgen-snapshot-20081001:1.3
	reverse-20080930-branch:1.3.0.14
	reverse-20080930-branchpoint:1.3
	binutils-2_19-branch:1.3.0.12
	binutils-2_19-branchpoint:1.3
	sid-snapshot-20080901:1.3
	cgen-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	cgen-snapshot-20080801:1.3
	reverse-20080717-branch:1.3.0.10
	reverse-20080717-branchpoint:1.3
	sid-snapshot-20080701:1.3
	cgen-snapshot-20080701:1.3
	msnyder-reverse-20080609-branch:1.3.0.8
	msnyder-reverse-20080609-branchpoint:1.3
	drow-reverse-20070409-branch:1.2.0.6
	drow-reverse-20070409-branchpoint:1.2
	sid-snapshot-20080601:1.3
	cgen-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	cgen-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	cgen-snapshot-20080401:1.3
	gdb_6_8-2008-03-27-release:1.3
	sid-snapshot-20080301:1.3
	cgen-snapshot-20080301:1.3
	gdb_6_8-branch:1.3.0.6
	gdb_6_8-2008-02-26-branchpoint:1.3
	sid-snapshot-20080201:1.3
	cgen-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	cgen-snapshot-20080101:1.3
	newlib-1_16_0:1.3
	sid-snapshot-20071201:1.3
	cgen-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	cgen-snapshot-20071101:1.3
	gdb_6_7_1-2007-10-29-release:1.3
	gdb_6_7-2007-10-10-release:1.3
	sid-snapshot-20071001:1.3
	cgen-snapshot-20071001:1.3
	gdb_6_7-branch:1.3.0.4
	gdb_6_7-2007-09-07-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	insight_6_6-20070208-release:1.2
	newlib-1_15_0:1.2
	newlib-csl-coldfire-4_1-32:1.1
	binutils-csl-coldfire-4_1-32:1.1
	newlib-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	gdb_6_6-2006-12-18-release:1.2
	newlib-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	newlib-csl-coldfire-4_1-30:1.1
	binutils-csl-coldfire-4_1-30:1.1
	newlib-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	newlib-csl-coldfire-4_1-28:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	newlib-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	gdb_6_6-branch:1.2.0.4
	gdb_6_6-2006-11-15-branchpoint:1.2
	newlib-csl-arm-2006q3-27:1.1
	binutils-csl-arm-2006q3-27:1.1
	newlib-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	newlib-csl-arm-2006q3-26:1.1
	binutils-csl-arm-2006q3-26:1.1
	newlib-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	newlib-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	newlib-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	insight_6_5-20061003-release:1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1
	newlib-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	newlib-csl-arm-2006q3-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	newlib-csl-arm-2006q3-19:1.1
	binutils-csl-arm-2006q3-19:1.1
	newlib-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	newlib-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	newlib-csl-sourcerygxx-3_4_4-25:1.2
	nickrob-async-20060828-mergepoint:1.2
	gdb-csl-symbian-6_4_50_20060226-11:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	newlib-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-20060226-branch-local-2:1.1
	cr-0x5f1:1.2.0.2
	newlib-csl-sourcerygxx-4_1-14:1.1
	gdb-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	newlib-csl-sourcerygxx-4_1-13:1.1
	gdb-csl-sourcerygxx-4_1-13:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	newlib-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	gdb_6_5-20060621-release:1.1
	newlib-csl-sourcerygxx-4_1-9:1.1
	gdb-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	newlib-csl-sourcerygxx-4_1-8:1.1
	gdb-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	newlib-csl-sourcerygxx-4_1-7:1.1
	gdb-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	newlib-csl-arm-2006q1-6:1.1
	gdb-csl-arm-2006q1-6:1.1
	binutils-csl-arm-2006q1-6:1.1
	newlib-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1
	gdb-csl-coldfire-4_1-11:1.1
	binutils-csl-coldfire-4_1-11:1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	gdb-csl-coldfire-4_1-10:1.1
	gdb_6_5-branch:1.1.0.24
	gdb_6_5-2006-05-14-branchpoint:1.1
	binutils-csl-coldfire-4_1-10:1.1
	newlib-csl-sourcerygxx-4_1-5:1.1
	gdb-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	nickrob-async-20060513-branch:1.1.0.22
	nickrob-async-20060513-branchpoint:1.1
	newlib-csl-sourcerygxx-4_1-4:1.1
	gdb-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	msnyder-reverse-20060502-branch:1.1.0.20
	msnyder-reverse-20060502-branchpoint:1.1
	gdb-csl-morpho-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	readline_5_1-import-branch:1.1.0.18
	readline_5_1-import-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1
	binutils-2_17-branch:1.1.0.16
	binutils-2_17-branchpoint:1.1
	gdb-csl-symbian-20060226-branch:1.1.0.14
	gdb-csl-symbian-20060226-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1
	msnyder-reverse-20060331-branch:1.1.0.12
	msnyder-reverse-20060331-branchpoint:1.1
	newlib-autotools-branch:1.1.0.10
	newlib-csl-20060320-branch:1.1.0.8
	newlib-csl-20060320-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.6
	binutils-csl-2_17-branchpoint:1.1
	gdb-csl-available-20060303-branch:1.1.0.4
	gdb-csl-available-20060303-branchpoint:1.1
	gdb-csl-20060226-branch:1.1.0.2
	gdb-csl-20060226-branchpoint:1.1
	binutils_latest_snapshot:1.8;
locks; strict;
comment	@# @;


1.8
date	2012.05.29.15.58.15;	author jsm28;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.21.12.34.06;	author rwild;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.01.17.28.12;	author rwild;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.09.19.46.39;	author bonzini;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.09.17.05.42;	author bonzini;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.12.13.06.01;	author bonzini;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.25.08.32.44;	author bonzini;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.02.18.55.51;	author bonzini;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Resync config/ from GCC.
@
text
@AC_DEFUN([GCC_STDINT_TYPES],
[AC_REQUIRE([AC_TYPE_INT8_T])
AC_REQUIRE([AC_TYPE_INT16_T])
AC_REQUIRE([AC_TYPE_INT32_T])
AC_REQUIRE([AC_TYPE_INT64_T])
AC_REQUIRE([AC_TYPE_INTMAX_T])
AC_REQUIRE([AC_TYPE_INTPTR_T])
AC_REQUIRE([AC_TYPE_UINT8_T])
AC_REQUIRE([AC_TYPE_UINT16_T])
AC_REQUIRE([AC_TYPE_UINT32_T])
AC_REQUIRE([AC_TYPE_UINT64_T])
AC_REQUIRE([AC_TYPE_UINTMAX_T])
AC_REQUIRE([AC_TYPE_UINTPTR_T])])

dnl @@synopsis GCC_HEADER_STDINT [( HEADER-TO-GENERATE [, HEADERS-TO-CHECK])]
dnl
dnl the "ISO C9X: 7.18 Integer types <stdint.h>" section requires the
dnl existence of an include file <stdint.h> that defines a set of
dnl typedefs, especially uint8_t,int32_t,uintptr_t.
dnl Many older installations will not provide this file, but some will
dnl have the very same definitions in <inttypes.h>. In other environments
dnl we can use the inet-types in <sys/types.h> which would define the
dnl typedefs int8_t and u_int8_t respectivly.
dnl
dnl This macros will create a local "_stdint.h" or the headerfile given as
dnl an argument. In many cases that file will pick the definition from a
dnl "#include <stdint.h>" or "#include <inttypes.h>" statement, while
dnl in other environments it will provide the set of basic 'stdint's defined:
dnl int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,intptr_t,uintptr_t
dnl int_least32_t.. int_fast32_t.. intmax_t
dnl which may or may not rely on the definitions of other files.
dnl
dnl Sometimes the stdint.h or inttypes.h headers conflict with sys/types.h,
dnl so we test the headers together with sys/types.h and always include it
dnl into the generated header (to match the tests with the generated file).
dnl Hopefully this is not a big annoyance.
dnl
dnl If your installed header files require the stdint-types you will want to
dnl create an installable file mylib-int.h that all your other installable
dnl header may include. So, for a library package named "mylib", just use
dnl      GCC_HEADER_STDINT(mylib-int.h)
dnl in configure.in and install that header file in Makefile.am along with
dnl the other headers (mylib.h).  The mylib-specific headers can simply
dnl use "#include <mylib-int.h>" to obtain the stdint-types.
dnl
dnl Remember, if the system already had a valid <stdint.h>, the generated
dnl file will include it directly. No need for fuzzy HAVE_STDINT_H things...
dnl
dnl @@author  Guido Draheim <guidod@@gmx.de>, Paolo Bonzini <bonzini@@gnu.org>

AC_DEFUN([GCC_HEADER_STDINT],
[m4_define(_GCC_STDINT_H, m4_ifval($1, $1, _stdint.h))

inttype_headers=`echo inttypes.h sys/inttypes.h $2 | sed -e 's/,/ /g'`

acx_cv_header_stdint=stddef.h
acx_cv_header_stdint_kind="(already complete)"
for i in stdint.h $inttype_headers; do
  unset ac_cv_type_uintptr_t
  unset ac_cv_type_uintmax_t
  unset ac_cv_type_int_least32_t
  unset ac_cv_type_int_fast32_t
  unset ac_cv_type_uint64_t
  _AS_ECHO_N([looking for a compliant stdint.h in $i, ])
  AC_CHECK_TYPE(uintmax_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(uintptr_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(int_least32_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(int_fast32_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind="(lacks uint64_t)"], [#include <sys/types.h>
#include <$i>])
  break
done
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(lacks uintmax_t)"
  for i in stdint.h $inttype_headers; do
    unset ac_cv_type_uintptr_t
    unset ac_cv_type_uint32_t
    unset ac_cv_type_uint64_t
    _AS_ECHO_N([looking for an incomplete stdint.h in $i, ])
    AC_CHECK_TYPE(uint32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(uint64_t,,,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(uintptr_t,,,[#include <sys/types.h>
#include <$i>])
    break
  done
fi
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(u_intXX_t style)"
  for i in sys/types.h $inttype_headers; do
    unset ac_cv_type_u_int32_t
    unset ac_cv_type_u_int64_t
    _AS_ECHO_N([looking for u_intXX_t types in $i, ])
    AC_CHECK_TYPE(u_int32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(u_int64_t,,,[#include <sys/types.h>
#include <$i>])
    break
  done
fi
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(using manual detection)"
fi

test -z "$ac_cv_type_uintptr_t" && ac_cv_type_uintptr_t=no
test -z "$ac_cv_type_uint64_t" && ac_cv_type_uint64_t=no
test -z "$ac_cv_type_u_int64_t" && ac_cv_type_u_int64_t=no
test -z "$ac_cv_type_int_least32_t" && ac_cv_type_int_least32_t=no
test -z "$ac_cv_type_int_fast32_t" && ac_cv_type_int_fast32_t=no

# ----------------- Summarize what we found so far

AC_MSG_CHECKING([what to include in _GCC_STDINT_H])

case `AS_BASENAME(_GCC_STDINT_H)` in
  stdint.h) AC_MSG_WARN([are you sure you want it there?]) ;;
  inttypes.h) AC_MSG_WARN([are you sure you want it there?]) ;;
  *) ;;
esac

AC_MSG_RESULT($acx_cv_header_stdint $acx_cv_header_stdint_kind)

# ----------------- done included file, check C basic types --------

# Lacking an uintptr_t?  Test size of void *
case "$acx_cv_header_stdint:$ac_cv_type_uintptr_t" in
  stddef.h:* | *:no) AC_CHECK_SIZEOF(void *) ;;
esac

# Lacking an uint64_t?  Test size of long
case "$acx_cv_header_stdint:$ac_cv_type_uint64_t:$ac_cv_type_u_int64_t" in
  stddef.h:*:* | *:no:no) AC_CHECK_SIZEOF(long) ;;
esac

if test $acx_cv_header_stdint = stddef.h; then
  # Lacking a good header?  Test size of everything and deduce all types.
  AC_CHECK_SIZEOF(int)
  AC_CHECK_SIZEOF(short)
  AC_CHECK_SIZEOF(char)

  AC_MSG_CHECKING(for type equivalent to int8_t)
  case "$ac_cv_sizeof_char" in
    1) acx_cv_type_int8_t=char ;;
    *) AC_MSG_ERROR([no 8-bit type, please report a bug])
  esac
  AC_MSG_RESULT($acx_cv_type_int8_t)

  AC_MSG_CHECKING(for type equivalent to int16_t)
  case "$ac_cv_sizeof_int:$ac_cv_sizeof_short" in
    2:*) acx_cv_type_int16_t=int ;;
    *:2) acx_cv_type_int16_t=short ;;
    *) AC_MSG_ERROR([no 16-bit type, please report a bug])
  esac
  AC_MSG_RESULT($acx_cv_type_int16_t)

  AC_MSG_CHECKING(for type equivalent to int32_t)
  case "$ac_cv_sizeof_int:$ac_cv_sizeof_long" in
    4:*) acx_cv_type_int32_t=int ;;
    *:4) acx_cv_type_int32_t=long ;;
    *) AC_MSG_ERROR([no 32-bit type, please report a bug])
  esac
  AC_MSG_RESULT($acx_cv_type_int32_t)
fi

# These tests are here to make the output prettier

if test "$ac_cv_type_uint64_t" != yes && test "$ac_cv_type_u_int64_t" != yes; then
  case "$ac_cv_sizeof_long" in
    8) acx_cv_type_int64_t=long ;;
  esac
  AC_MSG_CHECKING(for type equivalent to int64_t)
  AC_MSG_RESULT(${acx_cv_type_int64_t-'using preprocessor symbols'})
fi

# Now we can use the above types

if test "$ac_cv_type_uintptr_t" != yes; then
  AC_MSG_CHECKING(for type equivalent to intptr_t)
  case $ac_cv_sizeof_void_p in
    2) acx_cv_type_intptr_t=int16_t ;;
    4) acx_cv_type_intptr_t=int32_t ;;
    8) acx_cv_type_intptr_t=int64_t ;;
    *) AC_MSG_ERROR([no equivalent for intptr_t, please report a bug])
  esac
  AC_MSG_RESULT($acx_cv_type_intptr_t)
fi

# ----------------- done all checks, emit header -------------
AC_CONFIG_COMMANDS(_GCC_STDINT_H, [
if test "$GCC" = yes; then
  echo "/* generated for " `$CC --version | sed 1q` "*/" > tmp-stdint.h
else
  echo "/* generated for $CC */" > tmp-stdint.h
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF

  #ifndef GCC_GENERATED_STDINT_H
  #define GCC_GENERATED_STDINT_H 1

  #include <sys/types.h>
EOF

if test "$acx_cv_header_stdint" != stdint.h; then
  echo "#include <stddef.h>" >> tmp-stdint.h
fi
if test "$acx_cv_header_stdint" != stddef.h; then
  echo "#include <$acx_cv_header_stdint>" >> tmp-stdint.h
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF
  /* glibc uses these symbols as guards to prevent redefinitions.  */
  #ifdef __int8_t_defined
  #define _INT8_T
  #define _INT16_T
  #define _INT32_T
  #endif
  #ifdef __uint32_t_defined
  #define _UINT32_T
  #endif

EOF

# ----------------- done header, emit basic int types -------------
if test "$acx_cv_header_stdint" = stddef.h; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    #ifndef _UINT8_T
    #define _UINT8_T
    #ifndef __uint8_t_defined
    #define __uint8_t_defined
    #ifndef uint8_t
    typedef unsigned $acx_cv_type_int8_t uint8_t;
    #endif
    #endif
    #endif

    #ifndef _UINT16_T
    #define _UINT16_T
    #ifndef __uint16_t_defined
    #define __uint16_t_defined
    #ifndef uint16_t
    typedef unsigned $acx_cv_type_int16_t uint16_t;
    #endif
    #endif
    #endif

    #ifndef _UINT32_T
    #define _UINT32_T
    #ifndef __uint32_t_defined
    #define __uint32_t_defined
    #ifndef uint32_t
    typedef unsigned $acx_cv_type_int32_t uint32_t;
    #endif
    #endif
    #endif

    #ifndef _INT8_T
    #define _INT8_T
    #ifndef __int8_t_defined
    #define __int8_t_defined
    #ifndef int8_t
    typedef $acx_cv_type_int8_t int8_t;
    #endif
    #endif
    #endif

    #ifndef _INT16_T
    #define _INT16_T
    #ifndef __int16_t_defined
    #define __int16_t_defined
    #ifndef int16_t
    typedef $acx_cv_type_int16_t int16_t;
    #endif
    #endif
    #endif

    #ifndef _INT32_T
    #define _INT32_T
    #ifndef __int32_t_defined
    #define __int32_t_defined
    #ifndef int32_t
    typedef $acx_cv_type_int32_t int32_t;
    #endif
    #endif
    #endif
EOF
elif test "$ac_cv_type_u_int32_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* int8_t int16_t int32_t defined by inet code, we do the u_intXX types */
    #ifndef _INT8_T
    #define _INT8_T
    #endif
    #ifndef _INT16_T
    #define _INT16_T
    #endif
    #ifndef _INT32_T
    #define _INT32_T
    #endif

    #ifndef _UINT8_T
    #define _UINT8_T
    #ifndef __uint8_t_defined
    #define __uint8_t_defined
    #ifndef uint8_t
    typedef u_int8_t uint8_t;
    #endif
    #endif
    #endif

    #ifndef _UINT16_T
    #define _UINT16_T
    #ifndef __uint16_t_defined
    #define __uint16_t_defined
    #ifndef uint16_t
    typedef u_int16_t uint16_t;
    #endif
    #endif
    #endif

    #ifndef _UINT32_T
    #define _UINT32_T
    #ifndef __uint32_t_defined
    #define __uint32_t_defined
    #ifndef uint32_t
    typedef u_int32_t uint32_t;
    #endif
    #endif
    #endif
EOF
else
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Some systems have guard macros to prevent redefinitions, define them.  */
    #ifndef _INT8_T
    #define _INT8_T
    #endif
    #ifndef _INT16_T
    #define _INT16_T
    #endif
    #ifndef _INT32_T
    #define _INT32_T
    #endif
    #ifndef _UINT8_T
    #define _UINT8_T
    #endif
    #ifndef _UINT16_T
    #define _UINT16_T
    #endif
    #ifndef _UINT32_T
    #define _UINT32_T
    #endif
EOF
fi

# ------------- done basic int types, emit int64_t types ------------
if test "$ac_cv_type_uint64_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* system headers have good uint64_t and int64_t */
    #ifndef _INT64_T
    #define _INT64_T
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #endif
EOF
elif test "$ac_cv_type_u_int64_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* system headers have an u_int64_t (and int64_t) */
    #ifndef _INT64_T
    #define _INT64_T
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #ifndef __uint64_t_defined
    #define __uint64_t_defined
    #ifndef uint64_t
    typedef u_int64_t uint64_t;
    #endif
    #endif
    #endif
EOF
elif test -n "$acx_cv_type_int64_t"; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* architecture has a 64-bit type, $acx_cv_type_int64_t */
    #ifndef _INT64_T
    #define _INT64_T
    #ifndef int64_t
    typedef $acx_cv_type_int64_t int64_t;
    #endif
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #ifndef __uint64_t_defined
    #define __uint64_t_defined
    #ifndef uint64_t
    typedef unsigned $acx_cv_type_int64_t uint64_t;
    #endif
    #endif
    #endif
EOF
else
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* some common heuristics for int64_t, using compiler-specific tests */
    #if defined __STDC_VERSION__ && (__STDC_VERSION__-0) >= 199901L
    #ifndef _INT64_T
    #define _INT64_T
    #ifndef __int64_t_defined
    #ifndef int64_t
    typedef long long int64_t;
    #endif
    #endif
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #ifndef uint64_t
    typedef unsigned long long uint64_t;
    #endif
    #endif

    #elif defined __GNUC__ && defined (__STDC__) && __STDC__-0
    /* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and
       does not implement __extension__.  But that compiler doesn't define
       __GNUC_MINOR__.  */
    # if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)
    # define __extension__
    # endif

    # ifndef _INT64_T
    # define _INT64_T
    # ifndef int64_t
    __extension__ typedef long long int64_t;
    # endif
    # endif
    # ifndef _UINT64_T
    # define _UINT64_T
    # ifndef uint64_t
    __extension__ typedef unsigned long long uint64_t;
    # endif
    # endif

    #elif !defined __STRICT_ANSI__
    # if defined _MSC_VER || defined __WATCOMC__ || defined __BORLANDC__

    #  ifndef _INT64_T
    #  define _INT64_T
    #  ifndef int64_t
    typedef __int64 int64_t;
    #  endif
    #  endif
    #  ifndef _UINT64_T
    #  define _UINT64_T
    #  ifndef uint64_t
    typedef unsigned __int64 uint64_t;
    #  endif
    #  endif
    # endif /* compiler */

    #endif /* ANSI version */
EOF
fi

# ------------- done int64_t types, emit intptr types ------------
if test "$ac_cv_type_uintptr_t" != yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define intptr_t based on sizeof(void*) = $ac_cv_sizeof_void_p */
    #ifndef __uintptr_t_defined
    #ifndef uintptr_t
    typedef u$acx_cv_type_intptr_t uintptr_t;
    #endif
    #endif
    #ifndef __intptr_t_defined
    #ifndef intptr_t
    typedef $acx_cv_type_intptr_t  intptr_t;
    #endif
    #endif
EOF
fi

# ------------- done intptr types, emit int_least types ------------
if test "$ac_cv_type_int_least32_t" != yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define int_least types */
    typedef int8_t     int_least8_t;
    typedef int16_t    int_least16_t;
    typedef int32_t    int_least32_t;
    #ifdef _INT64_T
    typedef int64_t    int_least64_t;
    #endif

    typedef uint8_t    uint_least8_t;
    typedef uint16_t   uint_least16_t;
    typedef uint32_t   uint_least32_t;
    #ifdef _UINT64_T
    typedef uint64_t   uint_least64_t;
    #endif
EOF
fi

# ------------- done intptr types, emit int_fast types ------------
if test "$ac_cv_type_int_fast32_t" != yes; then
  dnl NOTE: The following code assumes that sizeof (int) > 1.
  dnl Fix when strange machines are reported.
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define int_fast types.  short is often slow */
    typedef int8_t       int_fast8_t;
    typedef int          int_fast16_t;
    typedef int32_t      int_fast32_t;
    #ifdef _INT64_T
    typedef int64_t      int_fast64_t;
    #endif

    typedef uint8_t      uint_fast8_t;
    typedef unsigned int uint_fast16_t;
    typedef uint32_t     uint_fast32_t;
    #ifdef _UINT64_T
    typedef uint64_t     uint_fast64_t;
    #endif
EOF
fi

if test "$ac_cv_type_uintmax_t" != yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define intmax based on what we found */
    #ifndef intmax_t
    #ifdef _INT64_T
    typedef int64_t       intmax_t;
    #else
    typedef long          intmax_t;
    #endif
    #endif
    #ifndef uintmax_t
    #ifdef _UINT64_T
    typedef uint64_t      uintmax_t;
    #else
    typedef unsigned long uintmax_t;
    #endif
    #endif
EOF
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF

  #endif /* GCC_GENERATED_STDINT_H */
EOF

if test -r ]_GCC_STDINT_H[ && cmp -s tmp-stdint.h ]_GCC_STDINT_H[; then
  rm -f tmp-stdint.h
else
  mv -f tmp-stdint.h ]_GCC_STDINT_H[
fi

], [
GCC="$GCC"
CC="$CC"
acx_cv_header_stdint="$acx_cv_header_stdint"
acx_cv_type_int8_t="$acx_cv_type_int8_t"
acx_cv_type_int16_t="$acx_cv_type_int16_t"
acx_cv_type_int32_t="$acx_cv_type_int32_t"
acx_cv_type_int64_t="$acx_cv_type_int64_t"
acx_cv_type_intptr_t="$acx_cv_type_intptr_t"
ac_cv_type_uintmax_t="$ac_cv_type_uintmax_t"
ac_cv_type_uintptr_t="$ac_cv_type_uintptr_t"
ac_cv_type_uint64_t="$ac_cv_type_uint64_t"
ac_cv_type_u_int64_t="$ac_cv_type_u_int64_t"
ac_cv_type_u_int32_t="$ac_cv_type_u_int32_t"
ac_cv_type_int_least32_t="$ac_cv_type_int_least32_t"
ac_cv_type_int_fast32_t="$ac_cv_type_int_fast32_t"
ac_cv_sizeof_void_p="$ac_cv_sizeof_void_p"
])

])
@


1.7
log
@Fix misquoting in stdint.m4.

config/:
	PR target/45084
	* stdint.m4 (GCC_HEADER_STDINT): Use m4 quotes for arguments
	of AC_MSG_ERROR.

libdecnumber/:
	* configure: Regenerate.

bfd/:
	* configure: Regenerate.
@
text
@d21 1
a21 1
dnl have the very same definitions in <inttypes.h>. In other enviroments
@


1.6
log
@Sync toplevel files from GCC.

/:
        Sync from GCC:

        2010-05-05  Sebastian Pop  <sebastian.pop@@amd.com>
        * configure.ac: Allow all the versions greater than 0.10 of PPL.
        * configure: Regenerated.

        2010-04-20  Eric Botcazou  <ebotcazou@@adacore.com>
        * configure.ac (BUILD_CONFIG): Redirect output to /dev/null.
        * configure: Regenerate.

        2010-04-17  Ralf Corsépius  <ralf.corsepius@@rtems.org>
        * configure.ac (*-*-rtems*): Add target-libiberty to $skipdirs.
        * configure: Regenerate.

        2010-04-16  Rainer Orth  <ro@@CeBiTec.Uni-Bielefeld.DE>
        * configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx
        separately.
        * configure: Regenerate.

        2010-04-13  Steve Ellcey  <sje@@cup.hp.com>
        * configure: Regenerate after change to elf.m4.

        2010-04-02  Sebastian Pop  <sebastian.pop@@amd.com>
        * configure.ac: Add brackets around AC_TRY_COMPILE alternative.
        * configure: Regenerated.

        2010-04-02  Sebastian Pop  <sebastian.pop@@amd.com>
        * configure.ac: Print "buggy but acceptable" when CLooG
        revision is less than 9.
        * configure: Regenerated.

config/:
        Sync from GCC:

        2010-04-13  Steve Ellcey  <sje@@cup.hp.com>
        * elf.m4: Add hppa[12]*-*-hpux* to list of non-elf platforms.

        2010-01-05  Rainer Orth  <ro@@CeBiTec.Uni-Bielefeld.DE>
        * stdint.m4 (GCC_HEADER_STDINT): Don't typedef uint8_t etc. if
        corresponding macros already exist.

bfd/:
        * configure: Regenerate.
@
text
@d149 1
a149 1
    *) AC_MSG_ERROR(no 8-bit type, please report a bug)
d157 1
a157 1
    *) AC_MSG_ERROR(no 16-bit type, please report a bug)
d165 1
a165 1
    *) AC_MSG_ERROR(no 32-bit type, please report a bug)
d188 1
a188 1
    *) AC_MSG_ERROR(no equivalent for intptr_t, please report a bug)
@


1.5
log
@config:
2009-09-09  Paolo Bonzini  <bonzini@@gnu.org>

	* stdint.m4 (GCC_HEADER_STDINT): Revert changes to this macro in
	the previous two patches.

bfd:
2009-09-09  Paolo Bonzini  <bonzini@@gnu.org>

	* configure: Regenerate.
@
text
@d237 1
d241 1
d247 1
d251 1
d257 1
d261 1
d267 1
d271 1
d277 1
d281 1
d287 1
d291 1
d311 1
d315 1
d321 1
d325 1
d331 1
d335 1
d385 1
d389 1
d397 1
d400 1
d405 1
d409 1
d419 1
d423 1
d426 1
d429 1
d441 1
d444 1
d447 1
d450 1
d457 1
d460 1
d463 1
d466 1
d479 1
d482 1
d484 1
d487 1
d539 1
d545 2
d552 1
@


1.4
log
@config:
2009-09-09  Paolo Bonzini  <bonzini@@gnu.org>

	* stdint.m4: Store temporary file in $tmp/_GCC_STDINT_H.

bfd:
2009-09-09  Paolo Bonzini  <bonzini@@gnu.org>

	* configure: Regnerate.
@
text
@d15 36
d52 140
a191 14
[AC_REQUIRE([GCC_STDINT_TYPES])
AC_CHECK_TYPES([int_least32_t, int_fast32_t],,,[#include <sys/types.h>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif])

m4_define([_GCC_STDINT_H], m4_ifval($1, $1, _stdint.h))
m4_if(m4_bmatch(m4_quote(/_GCC_STDINT_H),
                /stdint\.h$, bad,
                /inttypes\.h$, bad, ok), bad,
      [m4_fatal([cannot overwrite ]m4_quote(_GCC_STDINT_H))])
d193 1
d195 85
a279 12
cat > $tmp/_GCC_STDINT_H <<EOF
#ifndef GCC_GENERATED_STDINT_H
#define GCC_GENERATED_STDINT_H 1

#include "config.h"
#include <sys/types.h>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
d281 2
d284 168
d453 1
a453 1
  sed 's/^ *//' >> $tmp/_GCC_STDINT_H <<EOF
d459 1
d461 1
d466 1
d468 1
d472 1
d476 1
a476 1
  sed 's/^ *//' >> $tmp/_GCC_STDINT_H <<EOF
d482 1
d484 1
d489 1
d491 1
d495 21
a515 1
echo '@@%:@@endif /* GCC_GENERATED_STDINT_H */' >> $tmp/_GCC_STDINT_H
d517 2
a518 2
if test -r _GCC_STDINT_H && cmp -s $tmp/_GCC_STDINT_H _GCC_STDINT_H; then
  rm -f $tmp/_GCC_STDINT_H
d520 1
a520 1
  mv -f $tmp/_GCC_STDINT_H _GCC_STDINT_H
d524 13
d539 1
@


1.3
log
@config:
2007-04-11  Kai Tietz  <kai.tietz@@onevision.com>

	* stdint.m4: Make template compatible with older cygwin
	types.h, wrapping each type in a __XXX_t_defined #ifdef.
@
text
@d1 13
a13 35
dnl @@synopsis GCC_HEADER_STDINT [( HEADER-TO-GENERATE [, HEADERS-TO-CHECK])]
dnl
dnl the "ISO C9X: 7.18 Integer types <stdint.h>" section requires the
dnl existence of an include file <stdint.h> that defines a set of
dnl typedefs, especially uint8_t,int32_t,uintptr_t.
dnl Many older installations will not provide this file, but some will
dnl have the very same definitions in <inttypes.h>. In other enviroments
dnl we can use the inet-types in <sys/types.h> which would define the
dnl typedefs int8_t and u_int8_t respectivly.
dnl
dnl This macros will create a local "_stdint.h" or the headerfile given as
dnl an argument. In many cases that file will pick the definition from a
dnl "#include <stdint.h>" or "#include <inttypes.h>" statement, while
dnl in other environments it will provide the set of basic 'stdint's defined:
dnl int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,intptr_t,uintptr_t
dnl int_least32_t.. int_fast32_t.. intmax_t
dnl which may or may not rely on the definitions of other files.
dnl
dnl Sometimes the stdint.h or inttypes.h headers conflict with sys/types.h,
dnl so we test the headers together with sys/types.h and always include it
dnl into the generated header (to match the tests with the generated file).
dnl Hopefully this is not a big annoyance.
dnl
dnl If your installed header files require the stdint-types you will want to
dnl create an installable file mylib-int.h that all your other installable
dnl header may include. So, for a library package named "mylib", just use
dnl      GCC_HEADER_STDINT(mylib-int.h)
dnl in configure.in and install that header file in Makefile.am along with
dnl the other headers (mylib.h).  The mylib-specific headers can simply
dnl use "#include <mylib-int.h>" to obtain the stdint-types.
dnl
dnl Remember, if the system already had a valid <stdint.h>, the generated
dnl file will include it directly. No need for fuzzy HAVE_STDINT_H things...
dnl
dnl @@author  Guido Draheim <guidod@@gmx.de>, Paolo Bonzini <bonzini@@gnu.org>
d16 14
a29 1
[m4_define(_GCC_STDINT_H, m4_ifval($1, $1, _stdint.h))
a30 140
inttype_headers=`echo inttypes.h sys/inttypes.h $2 | sed -e 's/,/ /g'`

acx_cv_header_stdint=stddef.h
acx_cv_header_stdint_kind="(already complete)"
for i in stdint.h $inttype_headers; do
  unset ac_cv_type_uintptr_t
  unset ac_cv_type_uintmax_t
  unset ac_cv_type_int_least32_t
  unset ac_cv_type_int_fast32_t
  unset ac_cv_type_uint64_t
  _AS_ECHO_N([looking for a compliant stdint.h in $i, ])
  AC_CHECK_TYPE(uintmax_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(uintptr_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(int_least32_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(int_fast32_t,,[acx_cv_header_stdint_kind="(mostly complete)"], [#include <sys/types.h>
#include <$i>])
  AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind="(lacks uint64_t)"], [#include <sys/types.h>
#include <$i>])
  break
done
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(lacks uintmax_t)"
  for i in stdint.h $inttype_headers; do
    unset ac_cv_type_uintptr_t
    unset ac_cv_type_uint32_t
    unset ac_cv_type_uint64_t
    _AS_ECHO_N([looking for an incomplete stdint.h in $i, ])
    AC_CHECK_TYPE(uint32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(uint64_t,,,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(uintptr_t,,,[#include <sys/types.h>
#include <$i>])
    break
  done
fi
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(u_intXX_t style)"
  for i in sys/types.h $inttype_headers; do
    unset ac_cv_type_u_int32_t
    unset ac_cv_type_u_int64_t
    _AS_ECHO_N([looking for u_intXX_t types in $i, ])
    AC_CHECK_TYPE(u_int32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>
#include <$i>])
    AC_CHECK_TYPE(u_int64_t,,,[#include <sys/types.h>
#include <$i>])
    break
  done
fi
if test "$acx_cv_header_stdint" = stddef.h; then
  acx_cv_header_stdint_kind="(using manual detection)"
fi

test -z "$ac_cv_type_uintptr_t" && ac_cv_type_uintptr_t=no
test -z "$ac_cv_type_uint64_t" && ac_cv_type_uint64_t=no
test -z "$ac_cv_type_u_int64_t" && ac_cv_type_u_int64_t=no
test -z "$ac_cv_type_int_least32_t" && ac_cv_type_int_least32_t=no
test -z "$ac_cv_type_int_fast32_t" && ac_cv_type_int_fast32_t=no

# ----------------- Summarize what we found so far

AC_MSG_CHECKING([what to include in _GCC_STDINT_H])

case `AS_BASENAME(_GCC_STDINT_H)` in
  stdint.h) AC_MSG_WARN([are you sure you want it there?]) ;;
  inttypes.h) AC_MSG_WARN([are you sure you want it there?]) ;;
  *) ;;
esac

AC_MSG_RESULT($acx_cv_header_stdint $acx_cv_header_stdint_kind)

# ----------------- done included file, check C basic types --------

# Lacking an uintptr_t?  Test size of void *
case "$acx_cv_header_stdint:$ac_cv_type_uintptr_t" in
  stddef.h:* | *:no) AC_CHECK_SIZEOF(void *) ;;
esac

# Lacking an uint64_t?  Test size of long
case "$acx_cv_header_stdint:$ac_cv_type_uint64_t:$ac_cv_type_u_int64_t" in
  stddef.h:*:* | *:no:no) AC_CHECK_SIZEOF(long) ;;
esac

if test $acx_cv_header_stdint = stddef.h; then
  # Lacking a good header?  Test size of everything and deduce all types.
  AC_CHECK_SIZEOF(int)
  AC_CHECK_SIZEOF(short)
  AC_CHECK_SIZEOF(char)

  AC_MSG_CHECKING(for type equivalent to int8_t)
  case "$ac_cv_sizeof_char" in
    1) acx_cv_type_int8_t=char ;;
    *) AC_MSG_ERROR(no 8-bit type, please report a bug)
  esac
  AC_MSG_RESULT($acx_cv_type_int8_t)

  AC_MSG_CHECKING(for type equivalent to int16_t)
  case "$ac_cv_sizeof_int:$ac_cv_sizeof_short" in
    2:*) acx_cv_type_int16_t=int ;;
    *:2) acx_cv_type_int16_t=short ;;
    *) AC_MSG_ERROR(no 16-bit type, please report a bug)
  esac
  AC_MSG_RESULT($acx_cv_type_int16_t)

  AC_MSG_CHECKING(for type equivalent to int32_t)
  case "$ac_cv_sizeof_int:$ac_cv_sizeof_long" in
    4:*) acx_cv_type_int32_t=int ;;
    *:4) acx_cv_type_int32_t=long ;;
    *) AC_MSG_ERROR(no 32-bit type, please report a bug)
  esac
  AC_MSG_RESULT($acx_cv_type_int32_t)
fi

# These tests are here to make the output prettier

if test "$ac_cv_type_uint64_t" != yes && test "$ac_cv_type_u_int64_t" != yes; then
  case "$ac_cv_sizeof_long" in
    8) acx_cv_type_int64_t=long ;;
  esac
  AC_MSG_CHECKING(for type equivalent to int64_t)
  AC_MSG_RESULT(${acx_cv_type_int64_t-'using preprocessor symbols'})
fi

# Now we can use the above types

if test "$ac_cv_type_uintptr_t" != yes; then
  AC_MSG_CHECKING(for type equivalent to intptr_t)
  case $ac_cv_sizeof_void_p in
    2) acx_cv_type_intptr_t=int16_t ;;
    4) acx_cv_type_intptr_t=int32_t ;;
    8) acx_cv_type_intptr_t=int64_t ;;
    *) AC_MSG_ERROR(no equivalent for intptr_t, please report a bug)
  esac
  AC_MSG_RESULT($acx_cv_type_intptr_t)
fi

# ----------------- done all checks, emit header -------------
d32 12
a43 85
if test "$GCC" = yes; then
  echo "/* generated for " `$CC --version | sed 1q` "*/" > tmp-stdint.h
else
  echo "/* generated for $CC */" > tmp-stdint.h
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF

  #ifndef GCC_GENERATED_STDINT_H
  #define GCC_GENERATED_STDINT_H 1

  #include <sys/types.h>
EOF

if test "$acx_cv_header_stdint" != stdint.h; then
  echo "#include <stddef.h>" >> tmp-stdint.h
fi
if test "$acx_cv_header_stdint" != stddef.h; then
  echo "#include <$acx_cv_header_stdint>" >> tmp-stdint.h
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF
  /* glibc uses these symbols as guards to prevent redefinitions.  */
  #ifdef __int8_t_defined
  #define _INT8_T
  #define _INT16_T
  #define _INT32_T
  #endif
  #ifdef __uint32_t_defined
  #define _UINT32_T
  #endif

EOF

# ----------------- done header, emit basic int types -------------
if test "$acx_cv_header_stdint" = stddef.h; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    #ifndef _UINT8_T
    #define _UINT8_T
    #ifndef __uint8_t_defined
    #define __uint8_t_defined
    typedef unsigned $acx_cv_type_int8_t uint8_t;
    #endif
    #endif

    #ifndef _UINT16_T
    #define _UINT16_T
    #ifndef __uint16_t_defined
    #define __uint16_t_defined
    typedef unsigned $acx_cv_type_int16_t uint16_t;
    #endif
    #endif

    #ifndef _UINT32_T
    #define _UINT32_T
    #ifndef __uint32_t_defined
    #define __uint32_t_defined
    typedef unsigned $acx_cv_type_int32_t uint32_t;
    #endif
    #endif

    #ifndef _INT8_T
    #define _INT8_T
    #ifndef __int8_t_defined
    #define __int8_t_defined
    typedef $acx_cv_type_int8_t int8_t;
    #endif
    #endif

    #ifndef _INT16_T
    #define _INT16_T
    #ifndef __int16_t_defined
    #define __int16_t_defined
    typedef $acx_cv_type_int16_t int16_t;
    #endif
    #endif

    #ifndef _INT32_T
    #define _INT32_T
    #ifndef __int32_t_defined
    #define __int32_t_defined
    typedef $acx_cv_type_int32_t int32_t;
    #endif
    #endif
a44 2
elif test "$ac_cv_type_u_int32_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF
a45 168
    /* int8_t int16_t int32_t defined by inet code, we do the u_intXX types */
    #ifndef _INT8_T
    #define _INT8_T
    #endif
    #ifndef _INT16_T
    #define _INT16_T
    #endif
    #ifndef _INT32_T
    #define _INT32_T
    #endif

    #ifndef _UINT8_T
    #define _UINT8_T
    #ifndef __uint8_t_defined
    #define __uint8_t_defined
    typedef u_int8_t uint8_t;
    #endif
    #endif

    #ifndef _UINT16_T
    #define _UINT16_T
    #ifndef __uint16_t_defined
    #define __uint16_t_defined
    typedef u_int16_t uint16_t;
    #endif
    #endif

    #ifndef _UINT32_T
    #define _UINT32_T
    #ifndef __uint32_t_defined
    #define __uint32_t_defined
    typedef u_int32_t uint32_t;
    #endif
    #endif
EOF
else
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Some systems have guard macros to prevent redefinitions, define them.  */
    #ifndef _INT8_T
    #define _INT8_T
    #endif
    #ifndef _INT16_T
    #define _INT16_T
    #endif
    #ifndef _INT32_T
    #define _INT32_T
    #endif
    #ifndef _UINT8_T
    #define _UINT8_T
    #endif
    #ifndef _UINT16_T
    #define _UINT16_T
    #endif
    #ifndef _UINT32_T
    #define _UINT32_T
    #endif
EOF
fi

# ------------- done basic int types, emit int64_t types ------------
if test "$ac_cv_type_uint64_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* system headers have good uint64_t and int64_t */
    #ifndef _INT64_T
    #define _INT64_T
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #endif
EOF
elif test "$ac_cv_type_u_int64_t" = yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* system headers have an u_int64_t (and int64_t) */
    #ifndef _INT64_T
    #define _INT64_T
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #ifndef __uint64_t_defined
    #define __uint64_t_defined
    typedef u_int64_t uint64_t;
    #endif
    #endif
EOF
elif test -n "$acx_cv_type_int64_t"; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* architecture has a 64-bit type, $acx_cv_type_int64_t */
    #ifndef _INT64_T
    #define _INT64_T
    typedef $acx_cv_type_int64_t int64_t;
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    #ifndef __uint64_t_defined
    #define __uint64_t_defined
    typedef unsigned $acx_cv_type_int64_t uint64_t;
    #endif
    #endif
EOF
else
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* some common heuristics for int64_t, using compiler-specific tests */
    #if defined __STDC_VERSION__ && (__STDC_VERSION__-0) >= 199901L
    #ifndef _INT64_T
    #define _INT64_T
    #ifndef __int64_t_defined
    typedef long long int64_t;
    #endif
    #endif
    #ifndef _UINT64_T
    #define _UINT64_T
    typedef unsigned long long uint64_t;
    #endif

    #elif defined __GNUC__ && defined (__STDC__) && __STDC__-0
    /* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and
       does not implement __extension__.  But that compiler doesn't define
       __GNUC_MINOR__.  */
    # if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)
    # define __extension__
    # endif

    # ifndef _INT64_T
    # define _INT64_T
    __extension__ typedef long long int64_t;
    # endif
    # ifndef _UINT64_T
    # define _UINT64_T
    __extension__ typedef unsigned long long uint64_t;
    # endif

    #elif !defined __STRICT_ANSI__
    # if defined _MSC_VER || defined __WATCOMC__ || defined __BORLANDC__

    #  ifndef _INT64_T
    #  define _INT64_T
    typedef __int64 int64_t;
    #  endif
    #  ifndef _UINT64_T
    #  define _UINT64_T
    typedef unsigned __int64 uint64_t;
    #  endif
    # endif /* compiler */

    #endif /* ANSI version */
EOF
fi

# ------------- done int64_t types, emit intptr types ------------
if test "$ac_cv_type_uintptr_t" != yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define intptr_t based on sizeof(void*) = $ac_cv_sizeof_void_p */
    #ifndef __uintptr_t_defined
    typedef u$acx_cv_type_intptr_t uintptr_t;
    #endif
    #ifndef __intptr_t_defined
    typedef $acx_cv_type_intptr_t  intptr_t;
    #endif
EOF
fi

# ------------- done intptr types, emit int_least types ------------
d47 1
a47 1
  sed 's/^ *//' >> tmp-stdint.h <<EOF
a52 1
    #ifdef _INT64_T
a53 1
    #endif
a57 1
    #ifdef _UINT64_T
a58 1
    #endif
a61 1
# ------------- done intptr types, emit int_fast types ------------
d65 1
a65 1
  sed 's/^ *//' >> tmp-stdint.h <<EOF
a70 1
    #ifdef _INT64_T
a71 1
    #endif
a75 1
    #ifdef _UINT64_T
a76 1
    #endif
d80 1
a80 21
if test "$ac_cv_type_uintmax_t" != yes; then
  sed 's/^ *//' >> tmp-stdint.h <<EOF

    /* Define intmax based on what we found */
    #ifdef _INT64_T
    typedef int64_t       intmax_t;
    #else
    typedef long          intmax_t;
    #endif
    #ifdef _UINT64_T
    typedef uint64_t      uintmax_t;
    #else
    typedef unsigned long uintmax_t;
    #endif
EOF
fi

sed 's/^ *//' >> tmp-stdint.h <<EOF

  #endif /* GCC_GENERATED_STDINT_H */
EOF
d82 2
a83 2
if test -r ]_GCC_STDINT_H[ && cmp -s tmp-stdint.h ]_GCC_STDINT_H[; then
  rm -f tmp-stdint.h
d85 1
a85 1
  mv -f tmp-stdint.h ]_GCC_STDINT_H[
a88 13
GCC="$GCC"
CC="$CC"
acx_cv_header_stdint="$acx_cv_header_stdint"
acx_cv_type_int8_t="$acx_cv_type_int8_t"
acx_cv_type_int16_t="$acx_cv_type_int16_t"
acx_cv_type_int32_t="$acx_cv_type_int32_t"
acx_cv_type_int64_t="$acx_cv_type_int64_t"
acx_cv_type_intptr_t="$acx_cv_type_intptr_t"
ac_cv_type_uintmax_t="$ac_cv_type_uintmax_t"
ac_cv_type_uintptr_t="$ac_cv_type_uintptr_t"
ac_cv_type_uint64_t="$ac_cv_type_uint64_t"
ac_cv_type_u_int64_t="$ac_cv_type_u_int64_t"
ac_cv_type_u_int32_t="$ac_cv_type_u_int32_t"
a90 1
ac_cv_sizeof_void_p="$ac_cv_sizeof_void_p"
@


1.2
log
@2006-07-25  Paolo Bonzini  <bonzini@@gnu.org>

	PR build/26188
        * stdint.m4: Test for uintptr_t even on systems with uint64_t or uint32_t.

	Sync from GCC
	2006-07-21  Steve Ellcey  <sje@@cup.hp.com>

        PR target/26792
        * unwind_ipinfo.m4: New.
@
text
@d221 2
d225 1
d229 2
d233 1
d237 2
d241 1
d245 2
d249 1
d253 2
d257 1
d261 2
d265 1
d283 2
d287 1
d291 2
d295 1
d299 2
d303 1
d351 2
d355 1
d367 2
d371 1
d380 1
d383 1
d428 1
d430 2
d433 1
@


1.1
log
@2006-02-01  Paolo Bonzini  <bonzini@@gnu.org>

        PR target/25259
        * stdint.m4: New.
@
text
@d64 1
a64 1
  acx_cv_header_stdint_kind="(lacks uintptr_t)"
d66 1
d72 3
a74 1
    AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind="(lacks uintptr_t and uint64_t)"], [#include <sys/types.h>
d87 1
a87 1
    AC_CHECK_TYPE(u_int64_t,,[acx_cv_header_stdint_kind="(u_intXX_t style, lacks u_int64_t)"], [#include <sys/types.h>
@

