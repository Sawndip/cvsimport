head	1.2;
access;
symbols
	tcltk840-20020924-branch:1.1.1.1.0.2
	tcltk840-20020924-branchpoint:1.1.1.1
	BLT_2_4_Y:1.1.1.1
	NET:1.1.1
	blt2_4y:1.1.1.1
	net_blt:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2006.05.04.15.11.57;	author drow;	state dead;
branches;
next	1.1;

1.1
date	2002.04.15.17.40.15;	author kseitz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.04.15.17.40.15;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2006-05-04  Steve Ellcey  <sje@@cup.hp.com>

	* blt, iwidgets, mmalloc: Remove directories.
@
text
@#ifndef BLT_POOL_H
#define BLT_POOL_H

typedef struct Blt_PoolChainStruct {
   struct Blt_PoolChainStruct *nextPtr;
} Blt_PoolChain;

#define BLT_STRING_ITEMS		0
#define BLT_FIXED_SIZE_ITEMS		1
#define BLT_VARIABLE_SIZE_ITEMS		2

typedef struct Blt_PoolStruct *Blt_Pool;

typedef void *(Blt_PoolAllocProc) _ANSI_ARGS_((Blt_Pool pool, size_t size));
typedef void (Blt_PoolFreeProc) _ANSI_ARGS_((Blt_Pool pool, void *item));

struct Blt_PoolStruct {
    Blt_PoolChain *headPtr;	/* Chain of malloc'ed chunks. */
    Blt_PoolChain *freePtr; 	/* List of deleted items. This is only used
				 * for fixed size items. */
    size_t poolSize;		/* Log2 of # of items in the current block. */
    size_t itemSize;		/* Size of an item. */
    size_t bytesLeft;		/* # of bytes left in the current chunk. */
    size_t waste;
    
    Blt_PoolAllocProc *allocProc;
    Blt_PoolFreeProc *freeProc;
};

EXTERN Blt_Pool Blt_PoolCreate _ANSI_ARGS_((int type));
EXTERN void Blt_PoolDestroy _ANSI_ARGS_((Blt_Pool pool));

#define Blt_PoolAllocItem(poolPtr, n) (*((poolPtr)->allocProc))(poolPtr, n)
#define Blt_PoolFreeItem(poolPtr, item) (*((poolPtr)->freeProc))(poolPtr, item)

#endif /* BLT_POOL_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of blt2.4y
@
text
@@
