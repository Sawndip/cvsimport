head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	cgen-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	cgen-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	cgen-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	cgen-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	cgen-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	cgen-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	cgen-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	cgen-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	cgen-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	cgen-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	cgen-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	cgen-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	cgen-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	cgen-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	cgen-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	cgen-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	cgen-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	cgen-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	cgen-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	cgen-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	cgen-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	cgen-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	cgen-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	cgen-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	cgen-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	cgen-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	cgen-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	cgen-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	cgen-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	cgen-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	cgen-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	cgen-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	cgen-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	cgen-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	cgen-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	cgen-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	cgen-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	cgen-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	cgen-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	cgen-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	cgen-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	cgen-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	cgen-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	cgen-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	cgen-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	cgen-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	cgen-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	cgen-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	cgen-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	cgen-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	cgen-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	cgen-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	cgen-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	cgen-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	cgen-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	cgen-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	cgen-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	cgen-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	cgen-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	cgen-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	cgen-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	cgen-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	cgen-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	cgen-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	cgen-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	cgen-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	cgen-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	cgen-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	cgen-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	cgen-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	cgen-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	cgen-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	cgen-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	cgen-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	cgen-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	cgen-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	cgen-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	cgen-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	cgen-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	cgen-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	cgen-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	cgen-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	cgen-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	cgen-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	cgen-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	cgen-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	cgen-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	cgen-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	cgen-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	cgen-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	cgen-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	cgen-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	cgen-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	cgen-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	cgen-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	cgen-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	cgen-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	cgen-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	cgen-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	cgen-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	cgen-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	cgen-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	cgen-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	cgen-snapshot-20091001:1.4
	arc-sim-20090309:1.2
	sid-snapshot-20090901:1.3
	cgen-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	cgen-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.2
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.2.0.6
	cgen-1_1-branchpoint:1.2
	sid-snapshot-20090601:1.2
	cgen-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	cgen-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	cgen-snapshot-20090401:1.2
	arc-insight_6_8-branch:1.2.0.4
	arc-insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	cgen-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	cgen-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	cgen-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	cgen-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	cgen-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	cgen-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	cgen-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	cgen-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	cgen-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	cgen-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	cgen-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	cgen-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	cgen-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	cgen-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	cgen-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	cgen-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	cgen-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	cgen-snapshot-20071001:1.2
	msnyder-fork-checkpoint-branch:1.2.0.2
	msnyder-fork-checkpoint-branchpoint:1.2
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.6
	cagney_regbuf-20020515-branch:1.1.1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2009.09.09.03.51.11;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.2.6.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* iformat.scm (ifields-base-ifields): Simplify.
	(compute-insn-length): Simplify, call ifields-base-ifields.
	(compute-insn-base-mask): Ditto.
	* ifield.scm (ifld-known-values): Ditto.
	(ifld-base-ifields): Ditto.
	* insn.scm (insn-value): Ditto.
	* pgmr-tools.scm (pgmr-pretty-print-insn-format): Ditto.
@
text
@; Programmer development tools.
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.
;
; This file contains a collection of programmer debugging tools.
; They're mainly intended for using cgen to debug other things,
; but any kind of debugging tool can go here.
; All routines require the application independent part of cgen to be loaded
; and the .cpu file to be loaded.  They do not require any particular
; application though (opcodes, simulator, etc.).  If they do, that's a bug.
; It may be that the appication has a generally useful routine that should
; live elsewhere, but that's it.
;
; These tools don't have to be particularily efficient (within reason).
; It's more important that they be simple and clear.
;
; Some tools require ifmt-compute! to be run.
; They will run it if necessary.
;
; Table of contents:
;
; pgmr-pretty-print-insn-format
;   cgen debugging tool, pretty prints the iformat of an <insn> object
;
; pgmr-pretty-print-insn-value
;   break out an instruction's value into its component fields
;
; pgmr-lookup-insn
;   given a random bit pattern for an instruction, lookup the insn and return
;   its <insn> object

; Pretty print the instruction's opcode value, for debugging.
; INSN is an <insn> object.

(define (pgmr-pretty-print-insn-format insn)

  (define (to-width width n-str)
    (string-take-with-filler (- width)
			     n-str
			     #\0))

  (define (dump-insn-mask mask insn-length)
    (string-append "0x" (to-width (quotient insn-length 4)
				  (number->string mask 16))
		   ", "
		   (string-map
		    (lambda (n)
		      (string-append " " (to-width 4 (number->string n 2))))
		    (reverse
		     (split-bits (make-list (quotient insn-length 4) 4)
				 mask)))))

  ; Print VALUE with digits not in MASK printed as "X".
  (define (dump-insn-value value mask insn-length)
    (string-append "0x" (to-width (quotient insn-length 4)
				  (number->string value 16))
		   ", "
		   (string-map
		    (lambda (n mask)
		      (string-append
		       " "
		       (list->string
			(map (lambda (char in-mask?)
			       (if in-mask? char #\X))
			     (string->list (to-width 4 (number->string n 2)))
			     (bits->bools mask 4)))))
		    (reverse
		     (split-bits (make-list (quotient insn-length 4) 4)
				 value))
		    (reverse
		     (split-bits (make-list (quotient insn-length 4) 4)
				 mask)))))

  (define (dump-ifield f)
    (string-append " Name: "
		   (obj:name f)
		   ", "
		   "Start: "
		   (number->string
		    (+ (bitrange-word-offset (-ifld-bitrange f))
		       (bitrange-start (-ifld-bitrange f))))
		   ", "
		   "Length: "
		   (number->string (ifld-length f))
		   "\n"))

  (let* ((iflds (sort-ifield-list (insn-iflds insn)
				  (not (current-arch-insn-lsb0?))))
	 (mask (compute-insn-base-mask iflds))
	 (mask-length (compute-insn-base-mask-length iflds)))

    (display
     (string-append
      "Instruction: " (obj:name insn)
      "\n"
      "Syntax: "
      (insn-syntax insn)
      "\n"
      "Fields:\n"
      (string-map dump-ifield iflds)
      "Instruction length (computed from ifield list): "
      (number->string (apply + (map ifld-length iflds)))
      "\n"
      "Mask:  "
      (dump-insn-mask mask mask-length)
      "\n"
      "Value: "
      (let ((value (apply +
			  (map (lambda (fld)
				 (ifld-value fld mask-length
					     (ifld-get-value fld)))
			       (find ifld-constant? (ifields-base-ifields (insn-iflds insn)))))))
	(dump-insn-value value mask mask-length))
      ; TODO: Print value spaced according to fields.
      "\n"
      )))
)

; Pretty print an instruction's value.

(define (pgmr-pretty-print-insn-value insn value)
  (define (dump-ifield ifld value name-width)
    (string-append
     (string-take name-width (obj:str-name ifld))
     ": "
     (number->string value)
     ", 0x"
     (number->hex value)
     "\n"))

  (let ((ifld-values (map (lambda (ifld)
			    (ifld-extract ifld insn value))
			  (insn-iflds insn)))
	(max-name-length (apply max
				(map string-length
				     (map obj:name
					  (insn-iflds insn)))))
	)

    (display
     (string-append
      "Instruction: " (obj:name insn)
      "\n"
      "Fields:\n"
      (string-map (lambda (ifld value)
		    (dump-ifield ifld value max-name-length))
		  (insn-iflds insn)
		  ifld-values)
      )))
)

; Return the <insn> object matching VALUE.
; VALUE is either a single number of size base-insn-bitsize,
; or a list of numbers for variable length ISAs.
; LENGTH is the total length of VALUE in bits.

(define (pgmr-lookup-insn length value)
  (arch-analyze-insns! CURRENT-ARCH
		       #t ; include aliases
		       #f) ; don't need to analyze semantics

  ; Return a boolean indicating if BASE matches the base part of <insn> INSN.
  (define (match-base base insn)
    (let ((mask (compute-insn-base-mask (insn-iflds insn)))
	  (ivalue (insn-value insn)))
      ; return (value & mask) == ivalue
      (= (logand base mask) ivalue)))

  (define (match-rest value insn)
    #t)

  (let ((base (if (list? value) (car value) value)))
    (let loop ((insns (current-insn-list)))
      (if (null? insns)
	  #f
	  (let ((insn (car insns)))
	    (if (and (= length (insn-length insn))
		     (match-base base insn)
		     (match-rest value insn))
		insn
		(loop (cdr insns)))))))
)
@


1.3
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d113 1
a113 1
			       (find ifld-constant? (collect ifld-base-ifields (insn-iflds insn)))))))
@


1.2
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
@


1.2.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2009 Red Hat, Inc.
@


1.1
log
@Initial revision
@
text
@d125 1
a125 1
     (string-take name-width (obj:name ifld))
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
