head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	cgen-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	cgen-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	cgen-snapshot-20180401:1.10
	sid-snapshot-20180301:1.9
	cgen-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	cgen-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	cgen-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	cgen-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	cgen-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	cgen-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	cgen-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	cgen-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	cgen-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	cgen-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	cgen-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	cgen-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	cgen-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	cgen-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	cgen-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	cgen-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	cgen-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	cgen-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	cgen-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	cgen-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	cgen-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	cgen-snapshot-20160501:1.9
	sid-snapshot-20160401:1.9
	cgen-snapshot-20160401:1.9
	sid-snapshot-20160301:1.9
	cgen-snapshot-20160301:1.9
	sid-snapshot-20160201:1.9
	cgen-snapshot-20160201:1.9
	sid-snapshot-20160101:1.9
	cgen-snapshot-20160101:1.9
	sid-snapshot-20151201:1.9
	cgen-snapshot-20151201:1.9
	sid-snapshot-20151101:1.9
	cgen-snapshot-20151101:1.9
	sid-snapshot-20151001:1.9
	cgen-snapshot-20151001:1.9
	sid-snapshot-20150901:1.9
	cgen-snapshot-20150901:1.9
	sid-snapshot-20150801:1.9
	cgen-snapshot-20150801:1.9
	sid-snapshot-20150701:1.9
	cgen-snapshot-20150701:1.9
	sid-snapshot-20150601:1.9
	cgen-snapshot-20150601:1.9
	sid-snapshot-20150501:1.9
	cgen-snapshot-20150501:1.9
	sid-snapshot-20150401:1.9
	cgen-snapshot-20150401:1.9
	sid-snapshot-20150301:1.9
	cgen-snapshot-20150301:1.9
	sid-snapshot-20150201:1.9
	cgen-snapshot-20150201:1.9
	sid-snapshot-20150101:1.9
	cgen-snapshot-20150101:1.9
	sid-snapshot-20141201:1.9
	cgen-snapshot-20141201:1.9
	sid-snapshot-20141101:1.9
	cgen-snapshot-20141101:1.9
	sid-snapshot-20141001:1.9
	cgen-snapshot-20141001:1.9
	sid-snapshot-20140901:1.9
	cgen-snapshot-20140901:1.9
	sid-snapshot-20140801:1.9
	cgen-snapshot-20140801:1.9
	sid-snapshot-20140701:1.9
	cgen-snapshot-20140701:1.9
	sid-snapshot-20140601:1.9
	cgen-snapshot-20140601:1.9
	sid-snapshot-20140501:1.9
	cgen-snapshot-20140501:1.9
	sid-snapshot-20140401:1.9
	cgen-snapshot-20140401:1.9
	sid-snapshot-20140301:1.9
	cgen-snapshot-20140301:1.9
	sid-snapshot-20140201:1.9
	cgen-snapshot-20140201:1.9
	sid-snapshot-20140101:1.9
	cgen-snapshot-20140101:1.9
	sid-snapshot-20131201:1.9
	cgen-snapshot-20131201:1.9
	sid-snapshot-20131101:1.9
	cgen-snapshot-20131101:1.9
	sid-snapshot-20131001:1.9
	cgen-snapshot-20131001:1.9
	sid-snapshot-20130901:1.9
	cgen-snapshot-20130901:1.9
	sid-snapshot-20130801:1.9
	cgen-snapshot-20130801:1.9
	sid-snapshot-20130701:1.9
	cgen-snapshot-20130701:1.9
	sid-snapshot-20130601:1.9
	cgen-snapshot-20130601:1.9
	sid-snapshot-20130501:1.9
	cgen-snapshot-20130501:1.9
	sid-snapshot-20130401:1.9
	cgen-snapshot-20130401:1.9
	sid-snapshot-20130301:1.9
	cgen-snapshot-20130301:1.9
	sid-snapshot-20130201:1.9
	cgen-snapshot-20130201:1.9
	sid-snapshot-20130101:1.9
	cgen-snapshot-20130101:1.9
	sid-snapshot-20121201:1.9
	cgen-snapshot-20121201:1.9
	sid-snapshot-20121101:1.9
	cgen-snapshot-20121101:1.9
	sid-snapshot-20121001:1.9
	cgen-snapshot-20121001:1.9
	sid-snapshot-20120901:1.9
	cgen-snapshot-20120901:1.9
	sid-snapshot-20120801:1.9
	cgen-snapshot-20120801:1.9
	sid-snapshot-20120701:1.9
	cgen-snapshot-20120701:1.9
	sid-snapshot-20120601:1.9
	cgen-snapshot-20120601:1.9
	sid-snapshot-20120501:1.9
	cgen-snapshot-20120501:1.9
	sid-snapshot-20120401:1.9
	cgen-snapshot-20120401:1.9
	sid-snapshot-20120301:1.9
	cgen-snapshot-20120301:1.9
	sid-snapshot-20120201:1.9
	cgen-snapshot-20120201:1.9
	sid-snapshot-20120101:1.9
	cgen-snapshot-20120101:1.9
	sid-snapshot-20111201:1.9
	cgen-snapshot-20111201:1.9
	sid-snapshot-20111101:1.9
	cgen-snapshot-20111101:1.9
	sid-snapshot-20111001:1.9
	cgen-snapshot-20111001:1.9
	sid-snapshot-20110901:1.9
	cgen-snapshot-20110901:1.9
	sid-snapshot-20110801:1.9
	cgen-snapshot-20110801:1.9
	sid-snapshot-20110701:1.9
	cgen-snapshot-20110701:1.9
	sid-snapshot-20110601:1.9
	cgen-snapshot-20110601:1.9
	sid-snapshot-20110501:1.9
	cgen-snapshot-20110501:1.9
	sid-snapshot-20110401:1.9
	cgen-snapshot-20110401:1.9
	sid-snapshot-20110301:1.9
	cgen-snapshot-20110301:1.9
	sid-snapshot-20110201:1.9
	cgen-snapshot-20110201:1.9
	sid-snapshot-20110101:1.9
	cgen-snapshot-20110101:1.9
	sid-snapshot-20101201:1.9
	cgen-snapshot-20101201:1.9
	sid-snapshot-20101101:1.9
	cgen-snapshot-20101101:1.9
	sid-snapshot-20101001:1.9
	cgen-snapshot-20101001:1.9
	sid-snapshot-20100901:1.9
	cgen-snapshot-20100901:1.9
	sid-snapshot-20100801:1.9
	cgen-snapshot-20100801:1.9
	sid-snapshot-20100701:1.9
	cgen-snapshot-20100701:1.9
	sid-snapshot-20100601:1.9
	cgen-snapshot-20100601:1.9
	sid-snapshot-20100501:1.9
	cgen-snapshot-20100501:1.9
	sid-snapshot-20100401:1.9
	cgen-snapshot-20100401:1.9
	sid-snapshot-20100301:1.9
	cgen-snapshot-20100301:1.9
	sid-snapshot-20100201:1.9
	cgen-snapshot-20100201:1.9
	sid-snapshot-20100101:1.9
	cgen-snapshot-20100101:1.9
	sid-snapshot-20091201:1.9
	cgen-snapshot-20091201:1.9
	sid-snapshot-20091101:1.9
	cgen-snapshot-20091101:1.9
	sid-snapshot-20091001:1.9
	cgen-snapshot-20091001:1.9
	arc-sim-20090309:1.6
	sid-snapshot-20090901:1.8
	cgen-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	cgen-snapshot-20090801:1.8
	sid-snapshot-20090701:1.7
	cgen-snapshot-20090701:1.7
	dje-cgen-play1-branch:1.7.0.2
	dje-cgen-play1-branchpoint:1.7
	cgen-1_1-branch:1.6.0.6
	cgen-1_1-branchpoint:1.6
	sid-snapshot-20090601:1.6
	cgen-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	cgen-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	cgen-snapshot-20090401:1.6
	arc-insight_6_8-branch:1.6.0.4
	arc-insight_6_8-branchpoint:1.6
	sid-snapshot-20090301:1.6
	cgen-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	cgen-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	cgen-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	cgen-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	cgen-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	cgen-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	cgen-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	cgen-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	cgen-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	cgen-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	cgen-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	cgen-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	cgen-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	cgen-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	cgen-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	cgen-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	cgen-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	cgen-snapshot-20071001:1.6
	msnyder-fork-checkpoint-branch:1.6.0.2
	msnyder-fork-checkpoint-branchpoint:1.6
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.4
	cagney_regbuf-20020515-branch:1.3.0.2
	cagney_regbuf-20020515-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2018.03.03.01.31.31;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.07.18.19.07;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2003.09.08.17.17.22;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.25.23.18.15;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.09.08.24.22;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.7.2.1
date	2009.07.14.16.19.51;	author devans;	state Exp;
branches;
next	;

1.6.6.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.10
log
@binutils opcodes error messages

This patch is aimed at making binutils/opcodes files comply with the
GNU coding standard regarding error messages, that is, they should
start with the program name followed by a colon, then a lower case
message.  Accomplished by calling opcodes_error_handler to output the
program name (and final '\n'), rather than calling fprintf.

	* desc-cpu.scm (opcodes_error_handler): Define.
	(@@arch@@_cgen_rebuild_tables): Use opcodes_error_handler.
	(@@arch@@_cgen_cpu_open): Likewise.
	* opc-asmdis.scm (@@arch@@_cgen_parse_operand): Likewise.
	(@@arch@@_cgen_print_operand): Likewise.
	* opc-ibld.scm (@@arch@@_cgen_get_int_operand): Likewise.
	(@@arch@@_cgen_get_vma_operand): Likewise.
	(@@arch@@_cgen_set_int_operand): Likewise.
	(@@arch@@_cgen_set_vma_operand): Likewise.
	(@@arch@@_cgen_insert_operand): Likewise.
	(@@arch@@_cgen_extract_operand): Likewise.
	* utils.scm: Update emitted copyright dates.
@
text
@; Instruction builder support.
; Copyright (C) 2000, 2001, 2005, 2009 Red Hat, Inc.
; This file is part of CGEN.

; Instruction field support.

(define (/gen-fget-switch)
  (logit 2 "Generating field get switch ...\n")
  (string-list
   "\
int @@arch@@_cgen_get_int_operand     (CGEN_CPU_DESC, int, const CGEN_FIELDS *);
bfd_vma @@arch@@_cgen_get_vma_operand (CGEN_CPU_DESC, int, const CGEN_FIELDS *);

/* Getting values from cgen_fields is handled by a collection of functions.
   They are distinguished by the type of the VALUE argument they return.
   TODO: floating point, inlining support, remove cases where result type
   not appropriate.  */

int
@@arch@@_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			     int opindex,
			     const CGEN_FIELDS * fields)
{
  int value;

  switch (opindex)
    {
"
   (gen-switch 'fget)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while getting int operand\"),
	 opindex);
      abort ();
  }

  return value;
}

bfd_vma
@@arch@@_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			     int opindex,
			     const CGEN_FIELDS * fields)
{
  bfd_vma value;

  switch (opindex)
    {
"
   (gen-switch 'fget)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while getting vma operand\"),
	 opindex);
      abort ();
  }

  return value;
}
\n")
)

(define (/gen-fset-switch)
  (logit 2 "Generating field set switch ...\n")
  (string-list
   "\
void @@arch@@_cgen_set_int_operand  (CGEN_CPU_DESC, int, CGEN_FIELDS *, int);
void @@arch@@_cgen_set_vma_operand  (CGEN_CPU_DESC, int, CGEN_FIELDS *, bfd_vma);

/* Stuffing values in cgen_fields is handled by a collection of functions.
   They are distinguished by the type of the VALUE argument they accept.
   TODO: floating point, inlining support, remove cases where argument type
   not appropriate.  */

void
@@arch@@_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			     int opindex,
			     CGEN_FIELDS * fields,
			     int value)
{
  switch (opindex)
    {
"
   (gen-switch 'fset)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while setting int operand\"),
	 opindex);
      abort ();
  }
}

void
@@arch@@_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			     int opindex,
			     CGEN_FIELDS * fields,
			     bfd_vma value)
{
  switch (opindex)
    {
"
   (gen-switch 'fset)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while setting vma operand\"),
	 opindex);
      abort ();
  }
}
\n")
)

; Utilities of cgen-ibld.h.

; Return a list of operands the assembler syntax uses.
; This is a subset of the fields of the insn.

(define (ifmt-opcode-operands ifmt)
  (map ifld-get-value
       (find (lambda (elm) (not (number? (ifld-get-value elm))))
	     (ifmt-ifields ifmt)))
)

; Subroutine of gen-insn-builders to generate the builder for one insn.
; FIXME: wip.

(define (gen-insn-builder insn)
  (let* ((ifmt (insn-ifmt insn))
	 (operands (ifmt-opcode-operands ifmt))
	 (length (ifmt-length ifmt)))
    (gen-obj-sanitize
     insn
     (string-append
      "#define @@ARCH@@_IBLD_"
      (string-upcase (gen-sym insn))
      "(endian, buf, lenp"
      (gen-c-args (map gen-sym operands))
      ")\n"
      "\n")))
)

(define (gen-insn-builders)
  (string-write
   "\
/* For each insn there is an @@ARCH@@_IBLD_<NAME> macro that builds the
   instruction in the supplied buffer.  For architectures where it's
   possible to represent all machine codes as host integer values it
   would be nicer to have these return the instruction rather than store
   it in BUF.  For consistency with variable length ISA's this does not.  */

"
   (lambda () (string-write-map gen-insn-builder (current-insn-list)))
   )
)

; Generate the C code for dealing with operands.

(define (/gen-insert-switch)
  (logit 2 "Generating insert switch ...\n")
  (string-list
   "\
const char * @@arch@@_cgen_insert_operand
  (CGEN_CPU_DESC, int, CGEN_FIELDS *, CGEN_INSN_BYTES_PTR, bfd_vma);

/* Main entry point for operand insertion.

   This function is basically just a big switch statement.  Earlier versions
   used tables to look up the function to use, but
   - if the table contains both assembler and disassembler functions then
     the disassembler contains much of the assembler and vice-versa,
   - there's a lot of inlining possibilities as things grow,
   - using a switch statement avoids the function call overhead.

   This function could be moved into `parse_insn_normal', but keeping it
   separate makes clear the interface between `parse_insn_normal' and each of
   the handlers.  It's also needed by GAS to insert operands that couldn't be
   resolved during parsing.  */

const char *
@@arch@@_cgen_insert_operand (CGEN_CPU_DESC cd,
			     int opindex,
			     CGEN_FIELDS * fields,
			     CGEN_INSN_BYTES_PTR buffer,
			     bfd_vma pc ATTRIBUTE_UNUSED)
{
  const char * errmsg = NULL;
  unsigned int total_length = CGEN_FIELDS_BITSIZE (fields);

  switch (opindex)
    {
"
   (gen-switch 'insert)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while building insn\"),
	 opindex);
      abort ();
  }

  return errmsg;
}\n\n")
)

(define (/gen-extract-switch)
  (logit 2 "Generating extract switch ...\n")
  (string-list
   "\
int @@arch@@_cgen_extract_operand
  (CGEN_CPU_DESC, int, CGEN_EXTRACT_INFO *, CGEN_INSN_INT, CGEN_FIELDS *, bfd_vma);

/* Main entry point for operand extraction.
   The result is <= 0 for error, >0 for success.
   ??? Actual values aren't well defined right now.

   This function is basically just a big switch statement.  Earlier versions
   used tables to look up the function to use, but
   - if the table contains both assembler and disassembler functions then
     the disassembler contains much of the assembler and vice-versa,
   - there's a lot of inlining possibilities as things grow,
   - using a switch statement avoids the function call overhead.

   This function could be moved into `print_insn_normal', but keeping it
   separate makes clear the interface between `print_insn_normal' and each of
   the handlers.  */

int
@@arch@@_cgen_extract_operand (CGEN_CPU_DESC cd,
			     int opindex,
			     CGEN_EXTRACT_INFO *ex_info,
			     CGEN_INSN_INT insn_value,
			     CGEN_FIELDS * fields,
			     bfd_vma pc)
{
  /* Assume success (for those operands that are nops).  */
  int length = 1;
  unsigned int total_length = CGEN_FIELDS_BITSIZE (fields);

  switch (opindex)
    {
"
   (gen-switch 'extract)
"
    default :
      /* xgettext:c-format */
      opcodes_error_handler
	(_(\"internal error: unrecognized field %d while decoding insn\"),
	 opindex);
      abort ();
    }

  return length;
}\n\n")
)

; Utilities of cgen-ibld.in.

; Emit a function to call to initialize the ibld tables.

(define (/gen-ibld-init-fn)
  (string-write
   "\
/* Function to call before using the instruction builder tables.  */

void
@@arch@@_cgen_init_ibld_table (CGEN_CPU_DESC cd)
{
  cd->insert_handlers = & @@arch@@_cgen_insert_handlers[0];
  cd->extract_handlers = & @@arch@@_cgen_extract_handlers[0];

  cd->insert_operand = @@arch@@_cgen_insert_operand;
  cd->extract_operand = @@arch@@_cgen_extract_operand;

  cd->get_int_operand = @@arch@@_cgen_get_int_operand;
  cd->set_int_operand = @@arch@@_cgen_set_int_operand;
  cd->get_vma_operand = @@arch@@_cgen_get_vma_operand;
  cd->set_vma_operand = @@arch@@_cgen_set_vma_operand;
}
"
   )
)

; Generate the C header for building instructions.

(define (cgen-ibld.h)
  (logit 1 "Generating " (current-arch-name) "-ibld.h ...\n")
  (string-write
   (gen-c-copyright "Instruction builder for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#ifndef @@ARCH@@_IBLD_H
#define @@ARCH@@_IBLD_H

"
   (lambda () (gen-extra-ibld.h (opc-file-path) (current-arch-name)))
   "\n"
   gen-insn-builders
   "
#endif /* @@ARCH@@_IBLD_H */
"
   )
)

; Generate the C support for building instructions.

(define (cgen-ibld.in)
  (logit 1 "Generating " (current-arch-name) "-ibld.in ...\n")
  (string-write
   ; No need for copyright, appended to file with one.
   "\n"
   /gen-insert-switch
   /gen-extract-switch
   (lambda () (gen-handler-table "insert" opc-insert-handlers))
   (lambda () (gen-handler-table "extract" opc-extract-handlers))
   /gen-fget-switch
   /gen-fset-switch
   /gen-ibld-init-fn
   )
)
@


1.9
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d33 3
a35 2
      fprintf (stderr, _(\"Unrecognized field %d while getting int operand.\\n\"),
		       opindex);
d56 3
a58 2
      fprintf (stderr, _(\"Unrecognized field %d while getting vma operand.\\n\"),
		       opindex);
d92 3
a94 2
      fprintf (stderr, _(\"Unrecognized field %d while setting int operand.\\n\"),
		       opindex);
d112 3
a114 2
      fprintf (stderr, _(\"Unrecognized field %d while setting vma operand.\\n\"),
		       opindex);
d204 3
a206 2
      fprintf (stderr, _(\"Unrecognized field %d while building insn.\\n\"),
	       opindex);
d255 3
a257 2
      fprintf (stderr, _(\"Unrecognized field %d while decoding insn.\\n\"),
	       opindex);
@


1.8
log
@	* opc-ibld.scm (gen-insn-builder): Convert symbols to strings
	before passing to gen-c-args.
@
text
@d7 1
a7 1
(define (-gen-fget-switch)
d65 1
a65 1
(define (-gen-fset-switch)
d162 1
a162 1
(define (-gen-insert-switch)
d209 1
a209 1
(define (-gen-extract-switch)
d263 1
a263 1
(define (-gen-ibld-init-fn)
d314 2
a315 2
   -gen-insert-switch
   -gen-extract-switch
d318 3
a320 3
   -gen-fget-switch
   -gen-fset-switch
   -gen-ibld-init-fn
@


1.7
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d141 1
a141 1
      (gen-c-args (map obj:name operands))
@


1.7.2.1
log
@Bring over various patches from the trunk.
@
text
@d141 1
a141 1
      (gen-c-args (map gen-sym operands))
@


1.6
log
@Update function declarations to ISO C90 formatting
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2005 Red Hat, Inc.
@


1.6.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2005, 2009 Red Hat, Inc.
@


1.5
log
@2003-09-08  Dave Brolley  <brolley@@redhat.com>

        On behalf of Doug Evans <dje@@sebabeach.org>
        Pass in paths to input files, instead of assuming they live in
        $srcdir/cpu.  Plus misc. option processing cleanup.
        * cgen-doc.scm (doc-arguments): Make options strings not symbols.
        Add pre-process pass to all options.
        * cgen-gas.scm (gas-arguments): Ditto.
        * cgen-sid.scm (sim-arguments): Ditto.
        * cgen-sim.scm (sim-arguments): Ditto.
        * cgen-stest.scm (stest-arguments): Ditto.
        * cgen-opc.scm (opc-arguments): Ditto.  New argument -OPC.
        (-opc-file-path): New global.
        (opc-file-path): New fn.
        * opcodes.scm (read-cpu.opc): Replace srcdir,cpu args with opc-file.
        All callers updated.
        (gen-extra-cpu.h,gen-extra-cpu.c,gen-extra-opc.h,gen-extra-opc.c,
        gen-extra-asm.c,gen-extra-dis.c,gen-extra-ibld.h,gen-extra-ibld.c):
        Replace srcdir arg with opc-file.  All callers updated.
        * read.scm (-opt-spec-update): Delete.
        (opt-get-first-pass,opt-get-second-pass): New fns.
        (-cgen): Process application-specific arguments in two passes.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001 Red Hat, Inc.
d11 2
a12 4
int @@arch@@_cgen_get_int_operand
  PARAMS ((CGEN_CPU_DESC, int, const CGEN_FIELDS *));
bfd_vma @@arch@@_cgen_get_vma_operand
  PARAMS ((CGEN_CPU_DESC, int, const CGEN_FIELDS *));
d20 3
a22 4
@@arch@@_cgen_get_int_operand (cd, opindex, fields)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     int opindex;
     const CGEN_FIELDS * fields;
d42 3
a44 4
@@arch@@_cgen_get_vma_operand (cd, opindex, fields)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     int opindex;
     const CGEN_FIELDS * fields;
d69 2
a70 4
void @@arch@@_cgen_set_int_operand
  PARAMS ((CGEN_CPU_DESC, int, CGEN_FIELDS *, int));
void @@arch@@_cgen_set_vma_operand
  PARAMS ((CGEN_CPU_DESC, int, CGEN_FIELDS *, bfd_vma));
d78 4
a81 5
@@arch@@_cgen_set_int_operand (cd, opindex, fields, value)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     int opindex;
     CGEN_FIELDS * fields;
     int value;
d97 4
a100 5
@@arch@@_cgen_set_vma_operand (cd, opindex, fields, value)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     int opindex;
     CGEN_FIELDS * fields;
     bfd_vma value;
d167 1
a167 1
  PARAMS ((CGEN_CPU_DESC, int, CGEN_FIELDS *, CGEN_INSN_BYTES_PTR, bfd_vma));
d184 5
a188 6
@@arch@@_cgen_insert_operand (cd, opindex, fields, buffer, pc)
     CGEN_CPU_DESC cd;
     int opindex;
     CGEN_FIELDS * fields;
     CGEN_INSN_BYTES_PTR buffer;
     bfd_vma pc ATTRIBUTE_UNUSED;
d214 1
a214 2
  PARAMS ((CGEN_CPU_DESC, int, CGEN_EXTRACT_INFO *, CGEN_INSN_INT,
           CGEN_FIELDS *, bfd_vma));
d232 6
a237 7
@@arch@@_cgen_extract_operand (cd, opindex, ex_info, insn_value, fields, pc)
     CGEN_CPU_DESC cd;
     int opindex;
     CGEN_EXTRACT_INFO *ex_info;
     CGEN_INSN_INT insn_value;
     CGEN_FIELDS * fields;
     bfd_vma pc;
d269 1
a269 2
@@arch@@_cgen_init_ibld_table (cd)
     CGEN_CPU_DESC cd;
@


1.4
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d310 1
a310 1
   (lambda () (gen-extra-ibld.h srcdir (current-arch-name))) ; from <arch>.opc
@


1.3
log
@* converge with Red Hat internal tree.
@
text
@d303 1
a303 1
   (gen-copyright "Instruction builder for @@arch@@."
@


1.2
log
@Fix compile time warning messages in generated C files
@
text
@d189 1
a189 2
   resolved during parsing.
*/
d239 1
a239 2
   the handlers.
*/
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d11 5
d23 1
a23 1
     CGEN_CPU_DESC cd;
d46 1
a46 1
     CGEN_CPU_DESC cd;
d73 5
d85 1
a85 1
     CGEN_CPU_DESC cd;
d105 1
a105 1
     CGEN_CPU_DESC cd;
d174 3
d198 1
a198 1
     bfd_vma pc;
d223 4
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
