head	1.20;
access;
symbols
	sid-snapshot-20180601:1.20
	cgen-snapshot-20180601:1.20
	sid-snapshot-20180501:1.20
	cgen-snapshot-20180501:1.20
	sid-snapshot-20180401:1.20
	cgen-snapshot-20180401:1.20
	sid-snapshot-20180301:1.20
	cgen-snapshot-20180301:1.20
	sid-snapshot-20180201:1.20
	cgen-snapshot-20180201:1.20
	sid-snapshot-20180101:1.20
	cgen-snapshot-20180101:1.20
	sid-snapshot-20171201:1.20
	cgen-snapshot-20171201:1.20
	sid-snapshot-20171101:1.20
	cgen-snapshot-20171101:1.20
	sid-snapshot-20171001:1.20
	cgen-snapshot-20171001:1.20
	sid-snapshot-20170901:1.20
	cgen-snapshot-20170901:1.20
	sid-snapshot-20170801:1.20
	cgen-snapshot-20170801:1.20
	sid-snapshot-20170701:1.20
	cgen-snapshot-20170701:1.20
	sid-snapshot-20170601:1.20
	cgen-snapshot-20170601:1.20
	sid-snapshot-20170501:1.20
	cgen-snapshot-20170501:1.20
	sid-snapshot-20170401:1.20
	cgen-snapshot-20170401:1.20
	sid-snapshot-20170301:1.20
	cgen-snapshot-20170301:1.20
	sid-snapshot-20170201:1.20
	cgen-snapshot-20170201:1.20
	sid-snapshot-20170101:1.20
	cgen-snapshot-20170101:1.20
	sid-snapshot-20161201:1.20
	cgen-snapshot-20161201:1.20
	sid-snapshot-20161101:1.20
	cgen-snapshot-20161101:1.20
	sid-snapshot-20160901:1.20
	cgen-snapshot-20160901:1.20
	sid-snapshot-20160801:1.20
	cgen-snapshot-20160801:1.20
	sid-snapshot-20160701:1.20
	cgen-snapshot-20160701:1.20
	sid-snapshot-20160601:1.20
	cgen-snapshot-20160601:1.20
	sid-snapshot-20160501:1.20
	cgen-snapshot-20160501:1.20
	sid-snapshot-20160401:1.20
	cgen-snapshot-20160401:1.20
	sid-snapshot-20160301:1.20
	cgen-snapshot-20160301:1.20
	sid-snapshot-20160201:1.20
	cgen-snapshot-20160201:1.20
	sid-snapshot-20160101:1.20
	cgen-snapshot-20160101:1.20
	sid-snapshot-20151201:1.20
	cgen-snapshot-20151201:1.20
	sid-snapshot-20151101:1.20
	cgen-snapshot-20151101:1.20
	sid-snapshot-20151001:1.20
	cgen-snapshot-20151001:1.20
	sid-snapshot-20150901:1.20
	cgen-snapshot-20150901:1.20
	sid-snapshot-20150801:1.20
	cgen-snapshot-20150801:1.20
	sid-snapshot-20150701:1.20
	cgen-snapshot-20150701:1.20
	sid-snapshot-20150601:1.20
	cgen-snapshot-20150601:1.20
	sid-snapshot-20150501:1.20
	cgen-snapshot-20150501:1.20
	sid-snapshot-20150401:1.20
	cgen-snapshot-20150401:1.20
	sid-snapshot-20150301:1.20
	cgen-snapshot-20150301:1.20
	sid-snapshot-20150201:1.20
	cgen-snapshot-20150201:1.20
	sid-snapshot-20150101:1.20
	cgen-snapshot-20150101:1.20
	sid-snapshot-20141201:1.20
	cgen-snapshot-20141201:1.20
	sid-snapshot-20141101:1.20
	cgen-snapshot-20141101:1.20
	sid-snapshot-20141001:1.20
	cgen-snapshot-20141001:1.20
	sid-snapshot-20140901:1.20
	cgen-snapshot-20140901:1.20
	sid-snapshot-20140801:1.20
	cgen-snapshot-20140801:1.20
	sid-snapshot-20140701:1.20
	cgen-snapshot-20140701:1.20
	sid-snapshot-20140601:1.20
	cgen-snapshot-20140601:1.20
	sid-snapshot-20140501:1.20
	cgen-snapshot-20140501:1.20
	sid-snapshot-20140401:1.20
	cgen-snapshot-20140401:1.20
	sid-snapshot-20140301:1.20
	cgen-snapshot-20140301:1.20
	sid-snapshot-20140201:1.20
	cgen-snapshot-20140201:1.20
	sid-snapshot-20140101:1.20
	cgen-snapshot-20140101:1.20
	sid-snapshot-20131201:1.20
	cgen-snapshot-20131201:1.20
	sid-snapshot-20131101:1.20
	cgen-snapshot-20131101:1.20
	sid-snapshot-20131001:1.20
	cgen-snapshot-20131001:1.20
	sid-snapshot-20130901:1.20
	cgen-snapshot-20130901:1.20
	sid-snapshot-20130801:1.20
	cgen-snapshot-20130801:1.20
	sid-snapshot-20130701:1.20
	cgen-snapshot-20130701:1.20
	sid-snapshot-20130601:1.20
	cgen-snapshot-20130601:1.20
	sid-snapshot-20130501:1.20
	cgen-snapshot-20130501:1.20
	sid-snapshot-20130401:1.20
	cgen-snapshot-20130401:1.20
	sid-snapshot-20130301:1.20
	cgen-snapshot-20130301:1.20
	sid-snapshot-20130201:1.20
	cgen-snapshot-20130201:1.20
	sid-snapshot-20130101:1.20
	cgen-snapshot-20130101:1.20
	sid-snapshot-20121201:1.20
	cgen-snapshot-20121201:1.20
	sid-snapshot-20121101:1.20
	cgen-snapshot-20121101:1.20
	sid-snapshot-20121001:1.20
	cgen-snapshot-20121001:1.20
	sid-snapshot-20120901:1.20
	cgen-snapshot-20120901:1.20
	sid-snapshot-20120801:1.20
	cgen-snapshot-20120801:1.20
	sid-snapshot-20120701:1.20
	cgen-snapshot-20120701:1.20
	sid-snapshot-20120601:1.20
	cgen-snapshot-20120601:1.20
	sid-snapshot-20120501:1.20
	cgen-snapshot-20120501:1.20
	sid-snapshot-20120401:1.20
	cgen-snapshot-20120401:1.20
	sid-snapshot-20120301:1.20
	cgen-snapshot-20120301:1.20
	sid-snapshot-20120201:1.20
	cgen-snapshot-20120201:1.20
	sid-snapshot-20120101:1.20
	cgen-snapshot-20120101:1.20
	sid-snapshot-20111201:1.20
	cgen-snapshot-20111201:1.20
	sid-snapshot-20111101:1.20
	cgen-snapshot-20111101:1.20
	sid-snapshot-20111001:1.20
	cgen-snapshot-20111001:1.20
	sid-snapshot-20110901:1.20
	cgen-snapshot-20110901:1.20
	sid-snapshot-20110801:1.20
	cgen-snapshot-20110801:1.20
	sid-snapshot-20110701:1.20
	cgen-snapshot-20110701:1.20
	sid-snapshot-20110601:1.20
	cgen-snapshot-20110601:1.20
	sid-snapshot-20110501:1.20
	cgen-snapshot-20110501:1.20
	sid-snapshot-20110401:1.20
	cgen-snapshot-20110401:1.20
	sid-snapshot-20110301:1.20
	cgen-snapshot-20110301:1.20
	sid-snapshot-20110201:1.20
	cgen-snapshot-20110201:1.20
	sid-snapshot-20110101:1.20
	cgen-snapshot-20110101:1.20
	sid-snapshot-20101201:1.20
	cgen-snapshot-20101201:1.20
	sid-snapshot-20101101:1.20
	cgen-snapshot-20101101:1.20
	sid-snapshot-20101001:1.20
	cgen-snapshot-20101001:1.20
	sid-snapshot-20100901:1.20
	cgen-snapshot-20100901:1.20
	sid-snapshot-20100801:1.20
	cgen-snapshot-20100801:1.20
	sid-snapshot-20100701:1.20
	cgen-snapshot-20100701:1.20
	sid-snapshot-20100601:1.20
	cgen-snapshot-20100601:1.20
	sid-snapshot-20100501:1.20
	cgen-snapshot-20100501:1.20
	sid-snapshot-20100401:1.20
	cgen-snapshot-20100401:1.20
	sid-snapshot-20100301:1.20
	cgen-snapshot-20100301:1.20
	sid-snapshot-20100201:1.20
	cgen-snapshot-20100201:1.20
	sid-snapshot-20100101:1.20
	cgen-snapshot-20100101:1.20
	sid-snapshot-20091201:1.20
	cgen-snapshot-20091201:1.20
	sid-snapshot-20091101:1.19
	cgen-snapshot-20091101:1.19
	sid-snapshot-20091001:1.19
	cgen-snapshot-20091001:1.19
	arc-sim-20090309:1.15
	sid-snapshot-20090901:1.17
	cgen-snapshot-20090901:1.17
	sid-snapshot-20090801:1.17
	cgen-snapshot-20090801:1.17
	sid-snapshot-20090701:1.17
	cgen-snapshot-20090701:1.17
	dje-cgen-play1-branch:1.17.0.2
	dje-cgen-play1-branchpoint:1.17
	cgen-1_1-branch:1.16.0.2
	cgen-1_1-branchpoint:1.16
	sid-snapshot-20090601:1.15
	cgen-snapshot-20090601:1.15
	sid-snapshot-20090501:1.15
	cgen-snapshot-20090501:1.15
	sid-snapshot-20090401:1.15
	cgen-snapshot-20090401:1.15
	arc-insight_6_8-branch:1.15.0.4
	arc-insight_6_8-branchpoint:1.15
	sid-snapshot-20090301:1.15
	cgen-snapshot-20090301:1.15
	sid-snapshot-20090201:1.15
	cgen-snapshot-20090201:1.15
	sid-snapshot-20090101:1.15
	cgen-snapshot-20090101:1.15
	sid-snapshot-20081201:1.15
	cgen-snapshot-20081201:1.15
	sid-snapshot-20081101:1.15
	cgen-snapshot-20081101:1.15
	sid-snapshot-20081001:1.15
	cgen-snapshot-20081001:1.15
	sid-snapshot-20080901:1.15
	cgen-snapshot-20080901:1.15
	sid-snapshot-20080801:1.15
	cgen-snapshot-20080801:1.15
	sid-snapshot-20080701:1.15
	cgen-snapshot-20080701:1.15
	sid-snapshot-20080601:1.15
	cgen-snapshot-20080601:1.15
	sid-snapshot-20080501:1.15
	cgen-snapshot-20080501:1.15
	sid-snapshot-20080403:1.15
	sid-snapshot-20080401:1.15
	cgen-snapshot-20080401:1.15
	sid-snapshot-20080301:1.15
	cgen-snapshot-20080301:1.15
	sid-snapshot-20080201:1.15
	cgen-snapshot-20080201:1.15
	sid-snapshot-20080101:1.15
	cgen-snapshot-20080101:1.15
	sid-snapshot-20071201:1.15
	cgen-snapshot-20071201:1.15
	sid-snapshot-20071101:1.15
	cgen-snapshot-20071101:1.15
	sid-snapshot-20071001:1.15
	cgen-snapshot-20071001:1.15
	msnyder-fork-checkpoint-branch:1.15.0.2
	msnyder-fork-checkpoint-branchpoint:1.15
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.4
	cagney_regbuf-20020515-branch:1.8.0.2
	cagney_regbuf-20020515-branchpoint:1.8
	cygnus_cvs_20020108_pre:1.7
	cgen-1-1-branch:1.5.0.2;
locks; strict;
comment	@# @;


1.20
date	2009.11.03.16.24.02;	author devans;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.10.07.23.29;	author devans;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.20.21.34.28;	author devans;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2005.06.15.21.28.19;	author brolley;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.26.19.40.30;	author brolley;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.26.18.57.19;	author brolley;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.08.16.19.35;	author devans;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.10.18.26.02;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.16.18.09.06;	author brolley;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.07.18.46.19;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.07.08.23.59;	author bje;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.07.07.05.05;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.12.02.54.39;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.02.21.18.27;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.01.19.15.30;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.29.18.56.26;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.08.22.34.20;	author bje;	state Exp;
branches;
next	;

1.16.2.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;


desc
@@


1.20
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@; Decoder generation.
; Copyright (C) 2000, 2002, 2003, 2009 Red Hat, Inc.
; This file is part of CGEN.

; Return decode entries for each insn.
; ??? At one point we generated one variable per instruction rather than one
; big array.  It doesn't matter too much (yet).  Generating one big array is
; simpler.

(define (/gen-decode-insn-globals insn-list)
  ; Print the higher detailed stuff at higher verbosity.
  (logit 2 "Processing decode insn globals ...\n")

  (let* ((all-attrs (current-insn-attr-list))
	 (last-insn (string-upcase (gen-c-symbol (caar (list-take -1
                      (gen-obj-list-enums (non-multi-insns (current-insn-list)))))))))

    (string-write
     "
// The instruction descriptor array. 
\n"

     (if (with-pbb?)
	 "\
// Have label pointers been initialized?
// XXX: Note that this is also needed by when semantics are implemented as
// functions to handle machine variants.
bool @@prefix@@_idesc::idesc_table_initialized_p = false;\n\n"
	 "")

     "\
@@prefix@@_idesc @@prefix@@_idesc::idesc_table[@@PREFIX@@_INSN_" last-insn " + 1] =
{\n"

     (string-map
      (lambda (insn)
	(let ((name (gen-sym insn))
              (sfmt (insn-sfmt insn))
	      (pbb? (obj-has-attr? insn 'PBB))
	      (virtual? (obj-has-attr? insn 'VIRTUAL)))
	  (string-append
	   "  { "
	   (if (with-pbb?)
	       "0, "
	       "")
	   (if (with-scache?)
	       (if pbb?
		   "0, "
		   (string-append (/gen-sem-fn-name insn) ", "))
	       "") 
	   "\"" (string-upcase name) "\", "
	   (gen-cpu-insn-enum (current-cpu) insn)
	   ", "
	   (gen-obj-attr-sid-defn 'insn insn all-attrs)
	   " },\n")))
      insn-list)

     "\n};\n\n"
     ))
)

; Return a function that lookups up virtual insns.

(define (/gen-virtual-insn-finder)
  (string-list
   "\
// Given a canonical virtual insn id, return the target specific one.

@@prefix@@_insn_type
@@prefix@@_idesc::lookup_virtual (virtual_insn_type vit)
{
  switch (vit)
    {
      case VIRTUAL_INSN_INVALID: return @@PREFIX@@_INSN_X_INVALID;
"

   (if (with-pbb?)
       "\
      case VIRTUAL_INSN_BEGIN: return @@PREFIX@@_INSN_X_BEGIN;
      case VIRTUAL_INSN_CHAIN: return @@PREFIX@@_INSN_X_CHAIN;
      case VIRTUAL_INSN_CTI_CHAIN: return @@PREFIX@@_INSN_X_CTI_CHAIN;
      case VIRTUAL_INSN_BEFORE: return @@PREFIX@@_INSN_X_BEFORE;
      case VIRTUAL_INSN_AFTER: return @@PREFIX@@_INSN_X_AFTER;
"
       "")
   (if (and (with-pbb?)
	    (state-conditional-exec?))
       "\
      case VIRTUAL_INSN_COND: return @@PREFIX@@_INSN_X_COND;
"
       ; Unused, but may still be requested.  Just return X_INVALID.
       "\
      case VIRTUAL_INSN_COND: return @@PREFIX@@_INSN_X_INVALID;
")
   "\
    }
  abort ();
}\n\n"
   )
)

; Return enum name of format FMT.

(define (/gen-fmt-enum fmt)
  (string-upcase (gen-sym fmt))
)

; Return names of semantic fns for INSN.
; ??? Make global, call from gen-semantic-fn, blah blah blah.

(define (/gen-sem-fn-name insn)
  (string-append "@@prefix@@_sem_" (gen-sym insn))
)

; Return decls of each semantic fn.

(define (/gen-sem-fn-decls)
  (string-write
   "// Decls of each semantic fn.\n\n"
   "using @@cpu@@::@@prefix@@_sem_fn;\n"
   (string-list-map (lambda (insn)
		      (string-list "extern @@prefix@@_sem_fn "
				   (/gen-sem-fn-name insn)
				   ";\n"))
		    (scache-engine-insns))
   "\n"
   )
)




; idesc, argbuf, and scache types

; Generate decls for the insn descriptor table type IDESC.

(define (/gen-idesc-decls)
  (string-append 
   "
// Forward decls.
struct @@cpu@@_cpu;
struct @@prefix@@_scache;
"
   (if (with-parallel?)
       "typedef void (@@prefix@@_sem_fn) (@@cpu@@_cpu* cpu, @@prefix@@_scache* sem, int tick, @@prefix@@::write_stacks &buf);"
       "typedef sem_status (@@prefix@@_sem_fn) (@@cpu@@_cpu* cpu, @@prefix@@_scache* sem);")
   "\n"
   "\n"   
"
// Instruction descriptor.

struct @@prefix@@_idesc {
\n"

   (if (with-pbb?)
       "\
  // computed-goto label pointer (pbb engine)
  // FIXME: frag case to be redone (should instead point to usage table).
  cgoto_label cgoto;\n\n"
       "")

   (if (with-scache?)
       "\
  // scache engine executor for this insn
  @@prefix@@_sem_fn* execute;\n\n"
       "")

   "\
  const char* insn_name;
  enum @@prefix@@_insn_type sem_index;
  @@arch@@_insn_attr attrs;

  // idesc table: indexed by sem_index
  static @@prefix@@_idesc idesc_table[];
"

   (if (with-pbb?)
      "\

  // semantic label pointers filled_in?
  static bool idesc_table_initialized_p;\n"
      "")

   "\

  static @@prefix@@_insn_type lookup_virtual (virtual_insn_type vit);
};

")
)

; Utility of /gen-argbuf-fields-union to generate the definition for
; <sformat-abuf> SBUF.

(define (/gen-argbuf-elm sbuf)
  (logit 2 "Processing sbuf format " (obj:name sbuf) " ...\n")
  (string-list
   "  struct { /* " (obj:comment sbuf) " */\n"
   (let ((elms (sbuf-elms sbuf)))
     (if (null? elms)
	 "    int empty;\n"
	 (string-list-map (lambda (elm)
			    (string-append "    "
					   (cadr elm)
					   " "
					   (car elm)
					   ";\n"))
			  (sbuf-elms sbuf))))
   "  } " (gen-sym sbuf) ";\n")
)

; Utility of /gen-scache-decls to generate the union of extracted ifields.

(define (/gen-argbuf-fields-union)
  (string-list
   "\
// Instruction argument buffer.

union @@prefix@@_sem_fields {\n"
   (string-list-map /gen-argbuf-elm (current-sbuf-list))
   "\
  // This one is for chain/cti-chain virtual insns.
  struct {
    // Number of insns in pbb.
    unsigned insn_count;
    // This is used by chain insns and by untaken conditional branches.
    @@prefix@@_scache* next;
    @@prefix@@_scache* branch_target;
  } chain;
  // This one is for `before' virtual insns.
  struct {
    // The cache entry of the real insn.
    @@prefix@@_scache* insn;
  } before;
};\n\n"
   )
)

(define (/gen-scache-decls)
  (string-list
   (/gen-argbuf-fields-union)
   "\
// Simulator instruction cache.

struct @@prefix@@_scache {
  // executor
  union {
    cgoto_label cgoto;
    @@prefix@@_sem_fn* fn;
  } execute;
\n"
   
   (if (state-conditional-exec?)
       "\
  // condition
  UINT cond;
\n"
       "")

   "\
  // PC of this instruction.
  PCADDR addr;

  // instruction class
  @@prefix@@_idesc* idesc;

  // argument buffer
  @@prefix@@_sem_fields fields;

" (if (with-any-profile?)
      (string-append "
  // writeback flags
  // Only used if profiling or parallel execution support enabled during
  // file generation.
  unsigned long long written;
")
      "") "

  // decode given instruction
  void decode (@@cpu@@_cpu* current_cpu, PCADDR pc, @@prefix@@_insn_word base_insn, @@prefix@@_insn_word entire_insn);
};

")
)

; Instruction field extraction support.
; Two implementations are provided, one for !with-scache and one for
; with-scache.
;
; Extracting ifields is a three phase process.  First the ifields are
; extracted and stored in local variables.  Then any ifields requiring
; additional processing for operands are handled.  Then in the with-scache
; case the results are stored in a struct for later retrieval by the semantic
; code.
;
; The !with-scache case does this processing in the semantic function,
; except it doesn't need the last step (it doesn't need to store the results
; in a struct for later use).
;
; The with-scache case extracts the ifields in the decode function.
; Furthermore, we use <sformat-argbuf> to reduce the quantity of structures
; created (this helps semantic-fragment pbb engines).

; Return C code to record <ifield> F for the semantic handler
; in a local variable rather than an ARGBUF struct.

(define (/gen-record-argbuf-ifld f sfmt)
  (string-append "  " (gen-ifld-argbuf-ref f)
		 " = " (gen-extracted-ifld-value f) ";\n")
)

; Return three of arguments to TRACE:
; string argument to fprintf, character indicating type of third arg, value.
; The type is one of: x.

(define (/gen-trace-argbuf-ifld f sfmt)
  (string-append
   ; FIXME: Add method to return fprintf format string.
   ", \"" (gen-sym f) " 0x%x\""
   ", 'x'"
   ", " (gen-extracted-ifld-value f))
)

; Instruction field extraction support cont'd.
; Hardware support.

; gen-extract method.
; For the default case we use the ifield as is, which is output elsewhere.

(method-make!
 <hardware-base> 'gen-extract
 (lambda (self op sfmt local?)
   "")
)

; gen-trace-extract method.
; Return appropriate arguments for TRACE_EXTRACT.

(method-make!
 <hardware-base> 'gen-trace-extract
 (lambda (self op sfmt)
   "")
)

; Extract the necessary fields into ARGBUF.

(method-make!
 <hw-register> 'gen-extract
 (lambda (self op sfmt local?)
   (if (hw-cache-addr? self)
       (string-append "  "
		      (if local?
			  (gen-hw-index-argbuf-name (op:index op))
			  (gen-hw-index-argbuf-ref (op:index op)))
		      " = & "
		      (gen-cpu-ref (hw-isas self) (gen-sym (op:type op)))
		      (gen-array-ref (gen-extracted-ifld-value (op-ifield op)))
		      ";\n")
       ""))
)

; Return appropriate arguments for TRACE_EXTRACT.

(method-make!
 <hw-register> 'gen-trace-extract
 (lambda (self op sfmt)
   (if (hw-cache-addr? self)
       (string-append
	; FIXME: Add method to return fprintf format string.
	", \"" (gen-sym op) " 0x%x\""
	", 'x'"
	", " (gen-extracted-ifld-value (op-ifield op)))
       ""))
)

; Extract the necessary fields into ARGBUF.

(method-make!
 <hw-address> 'gen-extract
 (lambda (self op sfmt local?)
   (string-append "  "
		  (if local?
		      (gen-hw-index-argbuf-name (op:index op))
		      (gen-hw-index-argbuf-ref (op:index op)))
		  " = "
		  (gen-extracted-ifld-value (op-ifield op))
		  ";\n"))
)

; Return appropriate arguments for TRACE_EXTRACT.

(method-make!
 <hw-address> 'gen-trace-extract
 (lambda (self op sfmt)
   (string-append
    ; FIXME: Add method to return fprintf format string.
    ", \"" (gen-sym op) " 0x%x\""
    ", 'x'"
    ", " (gen-extracted-ifld-value (op-ifield op))))
)

; Instruction field extraction support cont'd.
; Operand support.

; Return C code to record the field for the semantic handler.
; In the case of a register, this is usually the address of the register's
; value (if CACHE-ADDR).
; LOCAL? indicates whether to record the value in a local variable or in
; the ARGBUF struct.
; ??? Later allow target to provide an `extract' expression.

(define (/gen-op-extract op sfmt local?)
  (send (op:type op) 'gen-extract op sfmt local?)
)

; Return three of arguments to TRACE_EXTRACT:
; string argument to fprintf, character indicating type of third arg, value.
; The type is one of: x.

(define (/gen-op-trace-extract op sfmt)
  (send (op:type op) 'gen-trace-extract op sfmt)
)

; Return C code to define local vars to hold processed ifield data for
; <sformat> SFMT.
; This is used when !with-scache.
; Definitions of the extracted ifields is handled elsewhere.

(define (gen-sfmt-op-argbuf-defns sfmt)
  (let ((operands (sfmt-extracted-operands sfmt)))
    (logit 3 "sfmt = " (obj:name sfmt) " operands=" (string-map obj:name operands))
    (string-list-map (lambda (op)
		       (let ((var-spec (sfmt-op-sbuf-elm op sfmt)))
			 (if var-spec
			     (string-append "  "
					    (cadr var-spec)
					    " "
					    (car var-spec)
					    ";\n")
			     "")))
		     operands))
)

; Return C code to assign values to the local vars that hold processed ifield
; data for <sformat> SFMT.
; This is used when !with-scache.
; Assignment of the extracted ifields is handled elsewhere.

(define (gen-sfmt-op-argbuf-assigns sfmt)
  (let ((operands (sfmt-extracted-operands sfmt)))
    (string-list-map (lambda (op)
		       (/gen-op-extract op sfmt #t))
		     operands))
)

; Instruction field extraction support cont'd.
; Emit extraction section of decode function.

; Return C code to record insn field data for <sformat> SFMT.
; This is used when with-scache.

(define (/gen-record-args sfmt)
  (let ((operands (sfmt-extracted-operands sfmt))
	(iflds (sfmt-needed-iflds sfmt)))
    (string-list
     "  /* Record the fields for the semantic handler.  */\n"
     (string-list-map (lambda (f) (/gen-record-argbuf-ifld f sfmt))
		      iflds)
     (string-list-map (lambda (op) (/gen-op-extract op sfmt #f))
		      operands)
     "  if (UNLIKELY(current_cpu->trace_extract_p))\n"
     "    {\n"
     "      current_cpu->trace_stream \n"
     "        << \"0x\" << hex << pc << dec << \" (" (gen-sym sfmt) ")\\t\"\n"
     ; NB: The following is not necessary any more, as the ifield list 
     ;     is a subset of the operand list.
     ; (string-list-map (lambda (f) 
     ;			(string-list
     ;			 "        << \" " (gen-sym f) ":0x\" << hex << " (gen-sym f) " << dec\n"))
     ;		      iflds)
     (string-list-map (lambda (ifld) 
			(string-list
			 "        << \" " (gen-extracted-ifld-value ifld) ":0x\" << hex << "
					; Add (SI) or (USI) cast for byte-wide data, to prevent C++ iostreams
					; from printing byte as plain raw char.
			 (cond ((not ifld) "")
			       ((mode:eq? 'QI (ifld-decode-mode ifld)) "(SI) ")
			       ((mode:eq? 'UQI (ifld-decode-mode ifld)) "(USI) ")
			       (else ""))
			 (gen-extracted-ifld-value ifld)
			 " << dec\n"))
		      iflds)
     "        << endl;\n"
     "    }\n"
     ))
)

; Return C code to record insn field data for profiling.
; Also recorded are operands not mentioned in the fields but mentioned
; in the semantic code.
;
; FIXME: Register usage may need to be tracked as an array of longs.
; If there are more than 32 regs, we can't know which until build time.
; ??? For now we only handle reg sets of 32 or less.
;
; ??? The other way to obtain register numbers is to defer computing them
; until they're actually needed.  It will speed up execution when not doing
; profiling, though the speed up is only for the extraction phase.
; On the other hand the current way has one memory reference per register
; number in the profiling routines.  For RISC this can be a lose, though for
; more complicated instruction sets it could be a win as all the computation
; is kept to the extraction phase.  If someone wants to put forth some real
; data, this might then be changed (or at least noted).

(define (/gen-record-profile-args sfmt)
  (let ((in-ops (find op-profilable? (sfmt-in-ops sfmt)))
	(out-ops (find op-profilable? (sfmt-out-ops sfmt)))
	)
    (if (or (not (with-any-profile?)) (and (null? in-ops) (null? out-ops)))
	""
	(string-list
	 "  /* Record the fields for profiling.  */\n"
	 "  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))\n"
	 "    {\n"
	 (string-list-map (lambda (op) (op:record-profile op sfmt #f))
			  in-ops)
	 (string-list-map (lambda (op) (op:record-profile op sfmt #t))
			  out-ops)
	 "    }\n"
	 )))
)

; Return C code that extracts the fields of <sformat> SFMT.
;
; Extraction is based on formats to reduce the amount of code generated.
; However, we also need to emit code which records the hardware elements used
; by the semantic code.  This is currently done by recording this information
; with the format.

(define (/gen-extract-fn sfmt)
  (logit 2 "Processing extractor for \"" (sfmt-key sfmt) "\" ...\n")
  (string-list
   "void
@@prefix@@_extract_" (gen-sym sfmt) " (@@prefix@@_scache* abuf, @@cpu@@_cpu* current_cpu, PCADDR pc, @@prefix@@_insn_word base_insn, @@prefix@@_insn_word entire_insn)"
   "{\n"
   "    @@prefix@@_insn_word insn = "
   (if (adata-integral-insn? CURRENT-ARCH)
       "entire_insn;\n"
       "base_insn;\n")
   (gen-define-field-macro sfmt)
   (gen-define-ifields (sfmt-iflds sfmt) (sfmt-length sfmt) "    " #f)
   "\n"
   (gen-extract-ifields (sfmt-iflds sfmt) (sfmt-length sfmt) "    " #f)
   "\n"
   (/gen-record-args sfmt)
   "\n"
   (/gen-record-profile-args sfmt)
   (gen-undef-field-macro sfmt)
   "}\n\n"
   )
)

; For each format, return its extraction function.

(define (/define-all-extractor-fns)
  (logit 2 "Processing extractor fn bodies ...\n")
  (string-list-map /gen-extract-fn (current-sfmt-list))
)

(define (/declare-all-extractor-fns)
  (logit 2 "Processing extractor fn declarations ...\n")
  (string-map (lambda (sfmt)
		(string-append "
static void
@@prefix@@_extract_" (gen-sym sfmt) " (@@prefix@@_scache* abuf, @@cpu@@_cpu* current_cpu, PCADDR pc, @@prefix@@_insn_word base_insn, @@prefix@@_insn_word entire_insn);"))
	      (current-sfmt-list))
)


; Generate top level decoder.
; INITIAL-BITNUMS is a target supplied list of bit numbers to use to
; build the first decode table.  If nil, we compute 8 bits of it (FIXME)
; ourselves.
; LSB0? is non-#f if bit number 0 is the least significant bit.

(define (/gen-decode-fn insn-list initial-bitnums lsb0?)
  (assert (with-scache?))

  ; Compute the initial DECODE-BITSIZE as the minimum of all insn lengths.
  ; The caller of @@prefix@@_decode must fetch and pass exactly this number of bits
  ; of the instruction.
  ; ??? Make this a parameter later but only if necessary.

  (let ((decode-bitsize (state-base-insn-bitsize)))

    ; Compute INITIAL-BITNUMS if not supplied.
    ; 0 is passed for the start bit (it is independent of lsb0?)
    (if (null? initial-bitnums)
	(set! initial-bitnums
	      (if (= 0 (length insn-list))
		  (list 0) ; dummy value
		  (decode-get-best-bits insn-list nil
					0 ; startbit
					8 ; max
					decode-bitsize
					lsb0?))))
	
    ; All set.  gen-decoder does the hard part, we just print out the result. 
    (let ((decode-code (gen-decoder insn-list initial-bitnums
				    decode-bitsize
				    "    " lsb0?
				    (current-insn-lookup 'x-invalid #f)
				    #t)))

      (string-write
       "
// Declare extractor functions
"
       /declare-all-extractor-fns

       "

// Fetch & decode instruction
void
@@prefix@@_scache::decode (@@cpu@@_cpu* current_cpu, PCADDR pc, @@prefix@@_insn_word base_insn, @@prefix@@_insn_word entire_insn)
{
  /* Result of decoder.  */
  @@PREFIX@@_INSN_TYPE itype;

  {
    @@prefix@@_insn_word insn = base_insn;
\n"
       decode-code
       "
  }

  /* The instruction has been decoded and fields extracted.  */
  done:
"
       (if (state-conditional-exec?)
	   (let ((cond-ifld (current-ifld-lookup (car (isa-condition (current-isa))))))
	     (string-append
	      "  {\n"
	      (gen-ifld-extract-decl cond-ifld "    " #f)
	      (gen-ifld-extract cond-ifld "    "
				(state-base-insn-bitsize)
				(state-base-insn-bitsize)
				"base_insn" nil #f)
	      "    this->cond = " (gen-sym cond-ifld) ";\n"
	      "  }\n"))
	   "")

       "
  this->addr = pc;
  // FIXME: To be redone (to handle ISA variants).
  this->idesc = & @@prefix@@_idesc::idesc_table[itype];
  // ??? record semantic handler?
  assert(this->idesc->sem_index == itype);
}

"

       /define-all-extractor-fns
       )))
)

; Entry point.  Generate decode.h.

(define (cgen-decode.h)
  (logit 1 "Generating " (gen-cpu-name) "-decode.h ...\n")

  (sim-analyze-insns!)

  ; Turn parallel execution support on if cpu needs it.
  (set-with-parallel?! (state-parallel-exec?))

  (string-write
   (gen-c-copyright "Decode header for @@prefix@@."
		  copyright-red-hat package-red-hat-simulators)
   "\
#ifndef @@PREFIX@@_DECODE_H
#define @@PREFIX@@_DECODE_H

"
   (if (with-parallel?)
       "\
namespace @@prefix@@ {
// forward declaration of struct in -defs.h
struct write_stacks;
}

"
       "")
"\
namespace @@cpu@@ {

using namespace cgen;
using namespace @@arch@@;

typedef UINT @@prefix@@_insn_word;

"
   (lambda () (gen-cpu-insn-enum-decl (current-cpu)
				      (non-multi-insns (non-alias-insns (current-insn-list)))))
   /gen-idesc-decls
   /gen-scache-decls

   "\
} // end @@cpu@@ namespace
\n"

   ; ??? The semantic functions could go in the cpu's namespace.
   ; There's no pressing need for it though.
   (if (with-scache?)
       /gen-sem-fn-decls
       "")

   "\
#endif /* @@PREFIX@@_DECODE_H */\n"
   )
)

; Entry point.  Generate decode.cxx.

(define (cgen-decode.cxx)
  (logit 1 "Generating " (gen-cpu-name) "-decode.cxx ...\n")

  (sim-analyze-insns!)

  ; Turn parallel execution support on if cpu needs it.
  (set-with-parallel?! (state-parallel-exec?))

  ; Tell the rtx->c translator we are the simulator.
  (rtl-c-config! #:rtl-cover-fns? #t)

  (string-write
   (gen-c-copyright "Simulator instruction decoder for @@prefix@@."
		  copyright-red-hat package-red-hat-simulators)
   "\

#if HAVE_CONFIG_H
#include \"config.h\"
#endif
#include \"@@cpu@@.h\"

using namespace @@cpu@@; // FIXME: namespace organization still wip
\n"

   (lambda () (/gen-decode-insn-globals (non-multi-insns (non-alias-insns (current-insn-list)))))
   /gen-virtual-insn-finder
   (lambda () (/gen-decode-fn (real-insns (current-insn-list))
			      (state-decode-assist)
			      (current-arch-insn-lsb0?)))
   )
)
@


1.19
log
@	* insn.scm (/parse-insn-format): New arg `verify?', all callers updated.
	(/insn-parse): Don't verify iformat for virtual insns.

	* sid-decode.scm (cgen-decode.cxx): Remove redundant call to
	non-multi-insns.
	* sid-model.scm (/gen-model-insn-fn-decls): Ditto.
	(/gen-model-insn-fns, /gen-model-class-decls): Ditto.
	* sid.scm (pbb-engine-insns): Ditto.
	* sim-decode.scm (cgen-decode.c): Ditto.
@
text
@d612 1
a612 1
				    (current-insn-lookup 'x-invalid)
@


1.18
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d751 1
a751 1
   (lambda () (/gen-decode-fn (non-multi-insns (real-insns (current-insn-list)))
@


1.17
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d10 1
a10 1
(define (-gen-decode-insn-globals insn-list)
d49 1
a49 1
		   (string-append (-gen-sem-fn-name insn) ", "))
d64 1
a64 1
(define (-gen-virtual-insn-finder)
d104 1
a104 1
(define (-gen-fmt-enum fmt)
d111 1
a111 1
(define (-gen-sem-fn-name insn)
d117 1
a117 1
(define (-gen-sem-fn-decls)
d123 1
a123 1
				   (-gen-sem-fn-name insn)
d137 1
a137 1
(define (-gen-idesc-decls)
d192 1
a192 1
; Utility of -gen-argbuf-fields-union to generate the definition for
d195 1
a195 1
(define (-gen-argbuf-elm sbuf)
d212 1
a212 1
; Utility of -gen-scache-decls to generate the union of extracted ifields.
d214 1
a214 1
(define (-gen-argbuf-fields-union)
d220 1
a220 1
   (string-list-map -gen-argbuf-elm (current-sbuf-list))
d239 1
a239 1
(define (-gen-scache-decls)
d241 1
a241 1
   (-gen-argbuf-fields-union)
d307 1
a307 1
(define (-gen-record-argbuf-ifld f sfmt)
d316 1
a316 1
(define (-gen-trace-argbuf-ifld f sfmt)
d412 1
a412 1
(define (-gen-op-extract op sfmt local?)
d420 1
a420 1
(define (-gen-op-trace-extract op sfmt)
d452 1
a452 1
		       (-gen-op-extract op sfmt #t))
d462 1
a462 1
(define (-gen-record-args sfmt)
d467 1
a467 1
     (string-list-map (lambda (f) (-gen-record-argbuf-ifld f sfmt))
d469 1
a469 1
     (string-list-map (lambda (op) (-gen-op-extract op sfmt #f))
d515 1
a515 1
(define (-gen-record-profile-args sfmt)
d540 1
a540 1
(define (-gen-extract-fn sfmt)
d555 1
a555 1
   (-gen-record-args sfmt)
d557 1
a557 1
   (-gen-record-profile-args sfmt)
d565 1
a565 1
(define (-define-all-extractor-fns)
d567 1
a567 1
  (string-list-map -gen-extract-fn (current-sfmt-list))
d570 1
a570 1
(define (-declare-all-extractor-fns)
d586 1
a586 1
(define (-gen-decode-fn insn-list initial-bitnums lsb0?)
d619 1
a619 1
       -declare-all-extractor-fns
d663 1
a663 1
       -define-all-extractor-fns
d705 2
a706 2
   -gen-idesc-decls
   -gen-scache-decls
d715 1
a715 1
       -gen-sem-fn-decls
d749 3
a751 3
   (lambda () (-gen-decode-insn-globals (non-multi-insns (non-alias-insns (current-insn-list)))))
   -gen-virtual-insn-finder
   (lambda () (-gen-decode-fn (non-multi-insns (real-insns (current-insn-list)))
@


1.16
log
@	* desc-cpu.scm (cgen-desc.h): Tweak logit message for consistency.
	(cgen-desc.c): Ditto.
	* sid-cpu.scm (cgen-desc.h, cgen-cpu.h, cgen-defs.h): Ditto.
	(cgen-write.cxx, cgen-semantics.cxx, cgen-sem-switch.cxx): Ditto.
	* sid-decode.scm (cgen-decode.h, cgen-decode.cxx): Ditto.
	* sid-model.scm (cgen-model.cxx, cgen-model.h): Ditto.
	* sim-arch.scm (cgen-arch.h, cgen-arch.c): Ditto.
	(cgen-cpuall.h, cgen-ops.c): Ditto.
	* sim-cpu.scm (cgen-cpu.h, cgen-defs.h, cgen-cpu.c): Ditto.
	(cgen-read.c, cgen-write.c, cgen-semantics.c): Ditto.
	(cgen-sem-switch.c): Ditto.
	* sim-decode.scm (cgen-decode.h, cgen-decode.c): Ditto.
	* sim-model.c (cgen-model.c): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002, 2003 Red Hat, Inc.
@


1.16.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002, 2003, 2009 Red Hat, Inc.
@


1.15
log
@2005-06-15  Dave Brolley  <brolley@@redhat.com>

        * sid-cpu.scm (-gen-hw-stream-and-destream-fns): New function.
        (cgen-cpu.h): Call it.

        Contributed on behalf of Graydon Hoare
        2001-06-05  graydon hoare  <graydon@@redhat.com>

        * utils.scm (foldl): Define.
        (foldr): Define.
        (filter): Define.
        (union): Define.
        (intersection): Simplify.
        * sid.scm : Set APPLICATION to SID-SIMULATOR.
        (-op-gen-delayed-set-maybe-trace): Define.
        (<operand> 'gen-set-{quiet,trace}): Delegate to
        op-gen-delayed-set-quiet etc. Note: this is still a little tangled
        up and needs cleaning.
        (-with-parallel?): Hardwire with-parallel to #t.
        (<operand> 'cxmake-get): Replace with lookahead-aware code
        * sid-decode.scm: Remove per-insn writeback fns.
        (-gen-idesc-decls): Redefine sem_fn type.
        * sid-cpu.scm (gen-write-stack-structure): Replace parexec stuff
        with write stack stuff.
        (cgen-write.cxx): Replace per-insn writebacks with single write
        stack writeback. Add write stack reset function.
        (-gen-scache-semantic-fn insn): Replace parexec stuff with write
        stack stuff.
        * rtl-c.scm (xop): Clone operand into delayed operand if #:delayed
        estate attribute set.
        (delay): Set #:delayed attribute to calculated delay, update
        maximum delay of cpu, check (delay ...) usage.
        * operand.scm (<operand>): Add delayed slot to <operand>.
        * mach.scm (<cpu>): Add max-delay slot to <cpu>.
        * dev.scm (load-sid): Set APPLICATION to SID-SIMULATOR.
        * doc/rtl.texi (Expressions): Add section on (delay ...).
@
text
@d670 1
a670 1
  (logit 1 "Generating " (gen-cpu-name) " decode.h ...\n")
d726 1
a726 1
  (logit 1 "Generating " (gen-cpu-name) " decode.cxx ...\n")
@


1.14
log
@2003-10-26  Dave Brolley  <brolley@@redhat.com>

        * sid-decode.scm (-gen-record-profile-args): Test trace_counter_p
        and final_insn_count_p. Don't test WITH_PROFILE_MODEL_P.
        (-gen-extract-fn): Call -gen-record-profile-args.
@
text
@d50 1
a50 4
	       "")
           (if (with-parallel?)
               (string-append (-gen-write-fn-name sfmt) ", ")
               "")
a130 19
;; and the same for writeback functions

(define (-gen-write-fn-name sfmt)
  (string-append "@@prefix@@_write_" (gen-sym sfmt))
)


(define (-gen-write-fn-decls)
  (string-write
   "// Decls of each writeback fn.\n\n"
   "using @@cpu@@::@@prefix@@_write_fn;\n"
   (string-list-map (lambda (sfmt)
		      (string-list "extern @@prefix@@_write_fn "
				   (-gen-write-fn-name sfmt)
				   ";\n"))
		    (current-sfmt-list))
   "\n"
   )
)
d145 1
a145 3
       "struct @@prefix@@_parexec;\n" "")
   (if (with-parallel?)
       "typedef void (@@prefix@@_sem_fn) (@@cpu@@_cpu* cpu, @@prefix@@_scache* sem, @@prefix@@_parexec* par_exec);"
a147 3
   (if (with-parallel?)
       "typedef sem_status (@@prefix@@_write_fn) (@@cpu@@_cpu* cpu, @@prefix@@_scache* sem, @@prefix@@_parexec* par_exec);"
       "")
a167 6
   (if (with-parallel?)
       "\
  // scache write executor for this insn
  @@prefix@@_write_fn* writeback;\n\n"
       "")

d270 1
a270 1
" (if (or (with-any-profile?) (with-parallel-write?))
d519 1
a519 1
    (if (and (null? in-ops) (null? out-ops))
d684 11
a717 4
   (if (with-parallel?)
       -gen-write-fn-decls
       "")

@


1.13
log
@2003-10-26  Dave Brolley  <brolley@@redhat.com>

        * sid-decode.scm (-gen-record-profile-args): Test trace_counter_p
        and final_insn_count_p.
        (-gen-extract-fn): Call -gen-record-profile-args.
@
text
@a554 1
	 "#if WITH_PROFILE_MODEL_P\n"
a562 1
	 "#endif\n"
@


1.12
log
@misc. whitespace and comment cleanup
@
text
@d557 1
a557 1
	 "  if (PROFILE_MODEL_P (current_cpu))\n"
d592 1
a592 1
   ;(-gen-record-profile-args sfmt) ??? not supported yet
@


1.11
log
@2003-06-10  Dave Brolley  <brolley@@redhat.com>

        * sid-cpu.scm: Generate #include of config.h into @@prefix@@-sem.cxx.
        * sid-decode.scm: Generate #include of config.h into
        @@prefix@@-decode.cxx.
        * sid-model.scm: Generate #include of config.h into @@prefix@@-model.cxx.
@
text
@a619 3
; FIXME: Need to be perfect for every subtable, or allow target more control.
; Leave for later (and don't give target more control until oodles of effort
; have been spent trying to be perfect! ... or close enough).
d635 2
a636 1
	      (if (= 0 (length insn-list)) (list 0) ; dummy value
@


1.10
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d771 3
@


1.9
log
@2003-04-16  Dave Brolley  <brolley@@redhat.com>

        * doc/rtl.texi (Iiming): Correct example to use 'model-name'.
        * utils.scm (copyright-fsf): Update generate copyright years.
        (copyright-cygnus): Ditto.
        * sid.scm (-op-gen-set-trace): Generate code to fill in bitmask of modified
        operands.
        (-gen-arch-model-decls): Don't generate unit enum declaration or MAX_UNITS
        here.
        (<operand>'gen-profile-code): New parameter 'when'.
        (<iunit>'gen-profile-code): Ditto.
        (<insn>'gen-profile-code): Ditto.
        (<unit>'gen-profile-code): Ditto. Only generate 'referenced' and
        'insn_reference' for the 'after' function.
        * model.scm (unit:enum): Moved to sim-model.scm.
        * sim-model.scm (unit:enum): Moved from model.scm.
        * sid-decode.scm (-gen-scache-decls): Generate the 'written' field.
        * cgen-sid.scm (sim-arguments): Document the generation of model.h.
        * sid-model.scm (unit:enum): New version for sid.
        (gen-model-class-name): New function.
        (gen-model-unit-fn-decl): New function.
        (gen-model-fn-decls): Call gen-model-unit-fn-decl.
        (gen-model-unit-fn-name): New parameter 'when'.
        (-gen-model-insn-fn-name): Ditto.
        (-gen-model-insn-qualified-fn-name): New function.
        (-gen-model-insn-fn-decl): New function.
        (-gen-model-insn-fn-decls): New function.
        (-gen-model-insn-fn): New parameter 'when'. Call
        -gen-model-insn-qualified-fn-name.
        (-gen-model-insn-fns): Generate the constructor for the model. Generate
        functions for modelling insn before and after execution.
        (-gen-model-class-decls): New function.
        (" (gen-model-class-name model) "): New function.
        (gen-model-classes): New function.
        (-gen-insn-timing): Generate functions for modelling insn before and after
        execution.
        (-gen-insn-unit-timing): Generate class-qualified names.
        (-gen-model-timing-table): Ditto.
        (cgen-model.cxx): Generate #include for @@cpu@@.h. Omit generation of code
        not needed (yet) by sid.
        (cgen-model.h): New function.
@
text
@d715 1
a715 1
   (gen-copyright "Decode header for @@prefix@@."
d767 1
a767 1
   (gen-copyright "Simulator instruction decoder for @@prefix@@."
@


1.8
log
@* better support multiple-isa devices.

2002-01-25  Frank Ch. Eigler  <fche@@redhat.com>

        * sid-cpu.scm (-gen-hardware-types): Generate single hardware union
        for multiple-isa configurations.
        * sid-decode.scm (-gen-decode-fn): Tolerate empty insn list.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002 Red Hat, Inc.
d303 1
a303 1
" (if (or (with-profile?) (with-parallel-write?))
@


1.7
log
@2002-01-07  Ben Elliston  <bje@@redhat.com>

	* utils.scm (package-cygnus-simulators): Rename from this ..
	(package-red-hat-simulators): .. to this.
	* opcodes.scm (option-set!): Use package-red-hat-simulators.
	* sid-cpu.scm (cgen-desc.h): Likewise.
	(cgen-cpu.h): Likewise.
	(cgen-defs.h): Likewise.
	(cgen-write.cxx): Likewise.
	(cgen-semantics.cxx): Likewise.
	(cgen-sem-switch.cxx): Likewise.
	* sid-decode.scm (cgen-decode.h): Likewise.
	(cgen-decode.cxx): Likewise.
	* sid-model.scm (cgen-model.cxx): Likewise.
	* sid.scm (option-set!): Likewise.
	* sim.scm (option-set!): Likewise.
@
text
@d637 8
a644 6
	(set! initial-bitnums (decode-get-best-bits insn-list nil
						    0 ; startbit
						    8 ; max
						    decode-bitsize
						    lsb0?)))

@


1.6
log
@2002-01-07  Ben Elliston  <bje@@redhat.com>

	* utils.scm (copyright-fsf): Add 2002.
	(copyright-cygnus): Rename to copyright-red-hat.
	(copyright-red-hat): Add 2002.
	(CURRENT-COPYRIGHT): Update comment.
	* opcodes.scm (option-set!): Update callers.
	* sid-model.scm (cgen-model.cxx): Likewise.
	* sid-cpu.scm: Likewise.
	* sid-decode.scm: Likewise.
	* sid.scm (option-set!): Handle "redhat" as an option for
	"copyright"; use copyright-red-hat.
	* sim.scm (option-set!): Likewise.
@
text
@d714 1
a714 1
		  copyright-red-hat package-cygnus-simulators)
d766 1
a766 1
		  copyright-red-hat package-cygnus-simulators)
@


1.5
log
@* more 16/32-bit insn set support; simulator (sid)

2001-07-11  Frank Ch. Eigler  <fche@@redhat.com>

	* sid-cpu.scm (-gen-mach-params): New proc to emit ...CHUNK_BITSIZE...
	(cgen-desc.h): Call it.
	* sid-decode.scm (-gen-decode-fn): Use base-insn-bitsize as
	decode-size.
	* utils-sim.scm (-gen-decode-insn-entry): For SID only, prepare
	entire_insn for extraction, if it's shorter than base-insn-bitsize.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d714 1
a714 1
		  copyright-cygnus package-cygnus-simulators)
d766 1
a766 1
		  copyright-cygnus package-cygnus-simulators)
@


1.4
log
@2001-04-02  Ben Elliston  <bje@@redhat.com>

	* sid-cpu.scm (-last-insn): New function.
	(-gen-sem-switch-engine): Loop through idesc while less than or
	equal to the last instruction enum, not less than the MAX enum.
	(-gen-sfrag-engine-fn): Clean up frag_label_table initialisation.
	* sid-decode.scm (-gen-decode-insn-globals): Define the idesc
	table's size to be the last instruction enum plus one, not
	@@PREFIX@@_INSN_MAX.
	* sid.scm (gen-cpu-insn-enum-decl): Do not append a dummy `max'
	instruction onto the instruction list.
@
text
@d632 1
a632 1
  (let ((decode-bitsize (apply min (map insn-base-mask-length insn-list))))
@


1.3
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d14 3
a16 1
  (let* ((all-attrs (current-insn-attr-list)))
d32 1
a32 1
@@prefix@@_idesc @@prefix@@_idesc::idesc_table[@@PREFIX@@_INSN_MAX] =
@


1.2
log
@* belated outward merge

2001-01-26  Frank Ch. Eigler  <fche@@redhat.com>

	* sid-cpu.scm (gen-parallel-exec-type): Use unsigned long long for
	writeback tracking.
	(-gen-write-fn, -gen-sem-case, -gen-sfrag-case): Ditto.
	* sid-decode.scm (-gen-scache-decls): Exclude writeback tracking field
	if unnecessary.
	* sid.scm (<operand> gen-write): Use unsigned long long expression
	for writeback.
	(-op-gen-set-trace, -op-gen-set-trace-parallel): Ditto.
	(<unit> gen-profile-code): Ditto.

2001-01-08  Frank Ch. Eigler  <fche@@redhat.com>

	* operand.scm (<operand> pretty-sem-name): New field.
	(<operand> make): Initialize it from hw-name.
	(op:set-pretty-sem-name!): New function.
	(<operand> gen-pretty-name): Default to fetching new field.
	* rtl.scm (hw): Copy hw-name to pretty-sem-name instead.  Restore
	sem-name setting from -rtx-hw-name.
@
text
@d502 1
a502 1
     "  if (current_cpu->trace_extract_p)\n"
@


1.1
log
@2000-12-08  Ben Elliston  <bje@@redhat.com>

	* dev.scm (load-sid): New function.
	* cgen-sid.scm: New file.
	* sid-cpu.scm: Likeiwse.
	* sid-decode.scm: Likewise.
	* sid-model.scm: Likewise.
	* sid.scm: Likewise.
@
text
@d301 2
d306 3
a308 1
  unsigned written;
@

