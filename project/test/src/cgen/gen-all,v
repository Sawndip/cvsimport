head	1.13;
access;
symbols
	sid-snapshot-20180601:1.13
	cgen-snapshot-20180601:1.13
	sid-snapshot-20180501:1.13
	cgen-snapshot-20180501:1.13
	sid-snapshot-20180401:1.13
	cgen-snapshot-20180401:1.13
	sid-snapshot-20180301:1.13
	cgen-snapshot-20180301:1.13
	sid-snapshot-20180201:1.13
	cgen-snapshot-20180201:1.13
	sid-snapshot-20180101:1.13
	cgen-snapshot-20180101:1.13
	sid-snapshot-20171201:1.13
	cgen-snapshot-20171201:1.13
	sid-snapshot-20171101:1.13
	cgen-snapshot-20171101:1.13
	sid-snapshot-20171001:1.13
	cgen-snapshot-20171001:1.13
	sid-snapshot-20170901:1.13
	cgen-snapshot-20170901:1.13
	sid-snapshot-20170801:1.13
	cgen-snapshot-20170801:1.13
	sid-snapshot-20170701:1.13
	cgen-snapshot-20170701:1.13
	sid-snapshot-20170601:1.13
	cgen-snapshot-20170601:1.13
	sid-snapshot-20170501:1.13
	cgen-snapshot-20170501:1.13
	sid-snapshot-20170401:1.13
	cgen-snapshot-20170401:1.13
	sid-snapshot-20170301:1.13
	cgen-snapshot-20170301:1.13
	sid-snapshot-20170201:1.13
	cgen-snapshot-20170201:1.13
	sid-snapshot-20170101:1.13
	cgen-snapshot-20170101:1.13
	sid-snapshot-20161201:1.13
	cgen-snapshot-20161201:1.13
	sid-snapshot-20161101:1.13
	cgen-snapshot-20161101:1.13
	sid-snapshot-20160901:1.13
	cgen-snapshot-20160901:1.13
	sid-snapshot-20160801:1.13
	cgen-snapshot-20160801:1.13
	sid-snapshot-20160701:1.13
	cgen-snapshot-20160701:1.13
	sid-snapshot-20160601:1.13
	cgen-snapshot-20160601:1.13
	sid-snapshot-20160501:1.13
	cgen-snapshot-20160501:1.13
	sid-snapshot-20160401:1.13
	cgen-snapshot-20160401:1.13
	sid-snapshot-20160301:1.13
	cgen-snapshot-20160301:1.13
	sid-snapshot-20160201:1.13
	cgen-snapshot-20160201:1.13
	sid-snapshot-20160101:1.13
	cgen-snapshot-20160101:1.13
	sid-snapshot-20151201:1.13
	cgen-snapshot-20151201:1.13
	sid-snapshot-20151101:1.13
	cgen-snapshot-20151101:1.13
	sid-snapshot-20151001:1.13
	cgen-snapshot-20151001:1.13
	sid-snapshot-20150901:1.13
	cgen-snapshot-20150901:1.13
	sid-snapshot-20150801:1.13
	cgen-snapshot-20150801:1.13
	sid-snapshot-20150701:1.13
	cgen-snapshot-20150701:1.13
	sid-snapshot-20150601:1.13
	cgen-snapshot-20150601:1.13
	sid-snapshot-20150501:1.13
	cgen-snapshot-20150501:1.13
	sid-snapshot-20150401:1.13
	cgen-snapshot-20150401:1.13
	sid-snapshot-20150301:1.13
	cgen-snapshot-20150301:1.13
	sid-snapshot-20150201:1.13
	cgen-snapshot-20150201:1.13
	sid-snapshot-20150101:1.13
	cgen-snapshot-20150101:1.13
	sid-snapshot-20141201:1.13
	cgen-snapshot-20141201:1.13
	sid-snapshot-20141101:1.13
	cgen-snapshot-20141101:1.13
	sid-snapshot-20141001:1.13
	cgen-snapshot-20141001:1.13
	sid-snapshot-20140901:1.13
	cgen-snapshot-20140901:1.13
	sid-snapshot-20140801:1.13
	cgen-snapshot-20140801:1.13
	sid-snapshot-20140701:1.13
	cgen-snapshot-20140701:1.13
	sid-snapshot-20140601:1.13
	cgen-snapshot-20140601:1.13
	sid-snapshot-20140501:1.13
	cgen-snapshot-20140501:1.13
	sid-snapshot-20140401:1.13
	cgen-snapshot-20140401:1.13
	sid-snapshot-20140301:1.13
	cgen-snapshot-20140301:1.13
	sid-snapshot-20140201:1.13
	cgen-snapshot-20140201:1.13
	sid-snapshot-20140101:1.13
	cgen-snapshot-20140101:1.13
	sid-snapshot-20131201:1.13
	cgen-snapshot-20131201:1.13
	sid-snapshot-20131101:1.13
	cgen-snapshot-20131101:1.13
	sid-snapshot-20131001:1.13
	cgen-snapshot-20131001:1.13
	sid-snapshot-20130901:1.13
	cgen-snapshot-20130901:1.13
	sid-snapshot-20130801:1.13
	cgen-snapshot-20130801:1.13
	sid-snapshot-20130701:1.13
	cgen-snapshot-20130701:1.13
	sid-snapshot-20130601:1.13
	cgen-snapshot-20130601:1.13
	sid-snapshot-20130501:1.13
	cgen-snapshot-20130501:1.13
	sid-snapshot-20130401:1.13
	cgen-snapshot-20130401:1.13
	sid-snapshot-20130301:1.13
	cgen-snapshot-20130301:1.13
	sid-snapshot-20130201:1.13
	cgen-snapshot-20130201:1.13
	sid-snapshot-20130101:1.13
	cgen-snapshot-20130101:1.13
	sid-snapshot-20121201:1.12
	cgen-snapshot-20121201:1.12
	sid-snapshot-20121101:1.12
	cgen-snapshot-20121101:1.12
	sid-snapshot-20121001:1.12
	cgen-snapshot-20121001:1.12
	sid-snapshot-20120901:1.12
	cgen-snapshot-20120901:1.12
	sid-snapshot-20120801:1.12
	cgen-snapshot-20120801:1.12
	sid-snapshot-20120701:1.12
	cgen-snapshot-20120701:1.12
	sid-snapshot-20120601:1.12
	cgen-snapshot-20120601:1.12
	sid-snapshot-20120501:1.12
	cgen-snapshot-20120501:1.12
	sid-snapshot-20120401:1.12
	cgen-snapshot-20120401:1.12
	sid-snapshot-20120301:1.12
	cgen-snapshot-20120301:1.12
	sid-snapshot-20120201:1.12
	cgen-snapshot-20120201:1.12
	sid-snapshot-20120101:1.12
	cgen-snapshot-20120101:1.12
	sid-snapshot-20111201:1.12
	cgen-snapshot-20111201:1.12
	sid-snapshot-20111101:1.12
	cgen-snapshot-20111101:1.12
	sid-snapshot-20111001:1.12
	cgen-snapshot-20111001:1.12
	sid-snapshot-20110901:1.12
	cgen-snapshot-20110901:1.12
	sid-snapshot-20110801:1.12
	cgen-snapshot-20110801:1.12
	sid-snapshot-20110701:1.12
	cgen-snapshot-20110701:1.12
	sid-snapshot-20110601:1.12
	cgen-snapshot-20110601:1.12
	sid-snapshot-20110501:1.12
	cgen-snapshot-20110501:1.12
	sid-snapshot-20110401:1.12
	cgen-snapshot-20110401:1.12
	sid-snapshot-20110301:1.12
	cgen-snapshot-20110301:1.12
	sid-snapshot-20110201:1.12
	cgen-snapshot-20110201:1.12
	sid-snapshot-20110101:1.12
	cgen-snapshot-20110101:1.12
	sid-snapshot-20101201:1.12
	cgen-snapshot-20101201:1.12
	sid-snapshot-20101101:1.12
	cgen-snapshot-20101101:1.12
	sid-snapshot-20101001:1.12
	cgen-snapshot-20101001:1.12
	sid-snapshot-20100901:1.12
	cgen-snapshot-20100901:1.12
	sid-snapshot-20100801:1.12
	cgen-snapshot-20100801:1.12
	sid-snapshot-20100701:1.12
	cgen-snapshot-20100701:1.12
	sid-snapshot-20100601:1.12
	cgen-snapshot-20100601:1.12
	sid-snapshot-20100501:1.12
	cgen-snapshot-20100501:1.12
	sid-snapshot-20100401:1.12
	cgen-snapshot-20100401:1.12
	sid-snapshot-20100301:1.12
	cgen-snapshot-20100301:1.12
	sid-snapshot-20100201:1.11
	cgen-snapshot-20100201:1.11
	sid-snapshot-20100101:1.5
	cgen-snapshot-20100101:1.5
	sid-snapshot-20091201:1.3
	cgen-snapshot-20091201:1.3;
locks; strict;
comment	@# @;


1.13
date	2012.12.17.16.55.41;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.10.19.28.35;	author devans;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.25.01.08.01;	author devans;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.23.22.22.28;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.23.20.24.22;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.23.19.57.20;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.23.19.21.27;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.05.06.09.01;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.17.17.52.00;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.10.17.22.51;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.14.20.11.39;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.03.06.59.25;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.01.22.42.59;	author devans;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add copyright notices
@
text
@#! /bin/sh
# Generate files for all apps,
# maybe build all apps,
# and produce a report listing differences from checked in copies.
#
#   Copyright 2012 Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.
#

# NOTE: This script doesn't rm -rf the previous run since it can run
# different tests.  If you want to start fresh, rm -rf tmp-all yourself.
#
# File ./gen-all.rc must exist and must define several env vars.
# It saves us from having to always pass the same long path names as
# parameters.
# The config file lives in "." instead of say "$HOME" so that multiple
# different configs are easily supported.
# Typical contents are:
#
## Paths to src,gcc,rel relative to ${build_dir}.
#SRC_DIR="../../../src"
#GCC_DIR="../../../gcc"
#REL_DIR="../../.."
## Location of mpc (gmp,mpfr taken from /usr/{include,lib}).
#MPC_DIR="$HOME/gnu/rel32/mpc-0.8.1"

set -e
trap "echo ERROR: $(date)" 0

all_args="$@@"

if [ ! -f ./gen-all.rc ]
then
    echo "Missing gen-all.rc file." >&2
    exit
fi

source ./gen-all.rc

usage() {
    echo "Usage:"
    echo "  gen-all help"
    echo "  gen-all [options] [todos] [apps]"
    echo "  gen-all all"
    echo ""
    echo "Options:"
    echo "cpus=\"space-separated-list-of-cpus\""
    echo "force    Force cgen files to be regenerated"
    echo ""
    echo "Things-to-do:"
    echo "config   Configure the tree"
    echo "build    Build the tree"
    echo "diffs    Generate diffs from what is checked in"
    echo ""
    echo "Applications:"
    echo "binutils, gcc, newlib, sim, sid, intrinsics"
    echo ""
    echo "Notes:"
    echo "\"all\" can be specified which means \"config, build, and diff everything\""
    echo "Options, todos, and apps may be specified in any order."
    echo ""
    echo "Example:"
    echo "sh gen-all build binutils diffs cpus=m32r"
}

# Parameters to configure.
MPC_CONFIG="--with-mpc=${MPC_DIR}"

# Set up any env vars we need, blech.
export LD_LIBRARY_PATH="${MPC_DIR}/lib"

build_all_target_sys="fr30-elf"

all_cgen_cpus="arm cris fr30 frv ip2k iq2000 lm32 m32c m32r mep mt \
openrisc sh sh64 xc16x xstormy16"

all_sid_cpus="arm m32r mep mt sh xstormy16"

do_force=no

do_config=no
do_build=no
do_diffs=no

do_binutils=no
do_gcc=no
do_newlib=no
do_sim=no
do_sid=no
do_intrinsics=no

cgen_cpus="${all_cgen_cpus}"
sid_cpus="${all_sid_cpus}"

# Parameter processing.

for a in "$@@"
do
    case $a in
    help) usage ; trap "" 0 ; exit 0 ;;
    cpus=*) cgen_cpus=${a/cpus=} sid_cpus=${cgen_cpus} ;;
    force) do_force=yes ;;
    config) do_config=yes ;;
    build) do_build=yes ;;
    diffs) do_diffs=yes ;;
    binutils) do_binutils=yes ;;
    gcc) do_gcc=yes ;;
    newlib) do_newlib=yes ;;
    sim) do_sim=yes ;;
    sid) do_sid=yes ;;
    intrinsics) do_intrinsics=yes ;;
    all)
	do_config=yes
	do_build=yes
	do_diffs=yes
	do_binutils=yes
	do_gcc=yes
	do_newlib=yes
	do_sim=yes
	do_sid=yes
	do_intrinsics=yes
	;;
    *) echo "Invalid option: $a" >&2 ; exit 1 ;;
    esac
done

if [ "${do_config}" = "no" -a "${do_build}" = "no" -a "${do_diffs}" = "no" ]
then
    echo "Nothing to do." >&2
    exit 1
fi

for c in ${cgen_cpus}
do
    if echo " ${all_cgen_cpus} " | grep -q " ${c} "
    then
	: ok
    else
	echo "Invalid cgen cpu ${c}" >&2
	exit 1
    fi
done
if [ "${do_sid}" == "yes" ]
then
    for c in ${sid_cpus}
    do
	if echo " ${all_sid_cpus} " | grep -q " ${c} "
	then
	    : ok
	else
	    echo "Invalid sid cpu ${c}" >&2
	    exit 1
	fi
    done
fi

# Utility functions.

config_src () {
    target_sys=$1
    prefix=$2

    extra_config_args=""
    if [ "${target_sys}" == "${build_all_target_sys}" ]
    then
	extra_config_args="${extra_config_args} --enable-targets=all"
    fi

    if [ -f Makefile ]
    then
	true # already configured
    elif [ "${do_config}" = "yes" ]
    then
	echo "Configuring: $(date)"
	../${SRC_DIR}/configure \
	    --prefix=${prefix} \
	    --build=${build_sys} \
	    --host=${host_sys} \
	    --target=${target_sys} \
	    --enable-shared \
	    --enable-cgen-maint \
	    --enable-languages=c \
	    ${extra_config_args}
    fi
}

config_gcc () {
    target_sys=$1
    prefix=$2

    extra_config_args=""

    if [ -f Makefile ]
    then
	true # already configured
    elif [ "${do_config}" = "yes" ]
    then
	echo "Configuring: $(date)"
	../${GCC_DIR}/configure \
	    --prefix=${prefix} \
	    --build=${build_sys} \
	    --host=${host_sys} \
	    --target=${target_sys} \
	    --enable-languages=c \
	    ${MPC_CONFIG} \
	    ${extra_config_args}
    fi
}

build_binutils () {
    target_sys=$1
    prefix=$2
    PATH=${prefix}/bin:$PATH

    if [ "${do_force}" = "yes" ]
    then
	touch ${SRC_DIR}/cgen/opcodes.scm
    fi

    echo "Building ${target_sys} binutils, $(date)"
    mkdir -p tmp-src-${target_sys}
    (
	set -e
	cd tmp-src-${target_sys}

	config_src ${target_sys} ${prefix}

	if [ "${do_build}" = "yes" ]
	then
	    echo "Building: $(date)"
	    if [ ! -f Makefile ]
	    then
		echo "Tree hasn't been configured."
		exit 1
	    fi
	    make -j3 all-binutils all-gas all-ld
	    make -j1 install-binutils install-gas install-ld
	    echo "Build done: $(date)"
	fi
    )
    if [ $? != 0 ] ; then exit 1 ; fi 
}

build_gcc () {
    target_sys=$1
    prefix=$2
    PATH=${prefix}/bin:$PATH

    echo "Building ${target_sys} gcc, $(date)"
    mkdir -p tmp-gcc-${target_sys}
    (
	set -e
	cd tmp-gcc-${target_sys}

	config_gcc ${target_sys} ${prefix}

	if [ "${do_build}" = "yes" ]
	then
	    echo "Building: $(date)"
	    if [ ! -f Makefile ]
	    then
		echo "Tree hasn't been configured."
		exit 1
	    fi
	    make -j3 all-gcc
	    make -j1 install-gcc
	    # FIXME: The toplevel makefile doesn't find ${target}-gcc,
	    # it sets CC_FOR_TARGET to ${target}-cc.
	    rm -f ${prefix}/bin/${target_sys}-cc
	    ln -s ${target_sys}-gcc ${prefix}/bin/${target_sys}-cc
	    echo "Build done: $(date)"
	fi
    )
    if [ $? != 0 ] ; then exit 1 ; fi 
}

build_newlib () {
    target_sys=$1
    prefix=$2
    PATH=${prefix}/bin:$PATH

    echo "Building ${target_sys} newlib, $(date)"
    mkdir -p tmp-src-${target_sys}
    (
	set -e
	cd tmp-src-${target_sys}

	config_src ${target_sys} ${prefix}

	if [ "${do_build}" = "yes" ]
	then
	    echo "Building: $(date)"
	    if [ ! -f Makefile ]
	    then
		echo "Tree hasn't been configured."
		exit 1
	    fi
	    make -j3 all-target-newlib all-target-libgloss
	    make -j1 install-target-newlib install-target-libgloss
	    echo "Build done: $(date)"
	fi
    )
    if [ $? != 0 ] ; then exit 1 ; fi 
}

build_sim () {
    target_sys=$1
    prefix=$2
    PATH=${prefix}/bin:$PATH

    if [ "${do_force}" = "yes" ]
    then
	touch ${SRC_DIR}/cgen/sim.scm
    fi

    echo "Building ${cpu} sim, $(date)"
    mkdir -p tmp-src-${target_sys}
    (
	set -e
	cd tmp-src-${target_sys}

	config_src ${target_sys} ${prefix}

	if [ "${do_build}" = "yes" ]
	then
	    echo "Building: $(date)"
	    if [ ! -f Makefile ]
	    then
		echo "Tree hasn't been configured."
		exit 1
	    fi
	    make -j3 all-sim all-gdb
	    make -j1 install-sim install-gdb
	    echo "Build done: $(date)"
	fi
    )
    if [ $? != 0 ] ; then exit 1 ; fi 
}

build_sid () {
    target_sys=$1
    prefix=$2
    PATH=${prefix}/bin:$PATH

    if [ "${do_force}" = "yes" ]
    then
	touch ${SRC_DIR}/cgen/sid.scm
    fi

    echo "Building ${cpu} sid, $(date)"
    mkdir -p tmp-src-${target_sys}
    (
	set -e
	cd tmp-src-${target_sys}

	config_src ${target_sys} ${prefix}

	if [ "${do_build}" = "yes" ]
	then
	    echo "Building: $(date)"
	    if [ ! -f Makefile ]
	    then
		echo "Tree hasn't been configured."
		exit 1
	    fi
	    # SID doesn't support --enable-cgen-maint, sigh.
	    if [ ! -f sid/component/cgen-cpu/Makefile ]
	    then
		make -j3 configure-sid
	    fi
	    (cd sid/component/cgen-cpu && make cgen-all)
	    if [ $? != 0 ] ; then exit 1 ; fi
	    make -j3 all-sid
	    make -j1 install-sid
	    echo "Build done: $(date)"
	fi
    )
    if [ $? != 0 ] ; then exit 1 ; fi 
}

build_intrinsics () {
    if [ "${do_build}" = "yes" ]
    then
	echo "Building intrinsics: $(date)"
	(cd ${SRC_DIR}/cgen && sh ./gen-all-intrinsics ${build_dir}/${GCC_DIR})
	if [ $? != 0 ] ; then exit 1 ; fi
	echo "Build done: $(date)"
    fi
}

build_diffs () {
    # NOTE: cvs will return with a non-zero exit code if there are diffs.
    if [ "${do_binutils}" = "yes" ]
    then
	(cd ${SRC_DIR}/opcodes && cvs diff -du >${build_dir}/opcodes.diffs)
    fi
    if [ "${do_sim}" = "yes" ]
    then
	(cd ${SRC_DIR}/sim && cvs diff -du >${build_dir}/sim.diffs)
    fi
    if [ "${do_sid}" = "yes" ]
    then
	(cd ${SRC_DIR}/sid/component/cgen-cpu && cvs diff -du >${build_dir}/sid.diffs)
    fi
    if [ "${do_intrinsics}" = "yes" ]
    then
	(cd ${GCC_DIR}/gcc/config/mep && svn diff -x -u >${build_dir}/gcc.diffs)
    fi
}

# And we're off.

echo "Starting gen-all: $(date)"
# Print the command line to make it easier to review old builds.
echo "Options: ${all_args}"

mkdir -p tmp-all
cd tmp-all
build_dir=$(pwd)

# We can't call config.guess until we've cd'd into the build_dir because
# SRC_DIR, if relative, is relative to build_dir.
build_sys=$(sh ${SRC_DIR}/config.guess)
host_sys=${build_sys}

for cpu in ${cgen_cpus}
do
    # FIXME: arm-eabi is preferred over arm-elf
    target_sys=${cpu}-elf
    prefix=$(cd ${REL_DIR} && pwd -P)/rel-${target_sys}
    [ $? != 0 ] && { echo "Error setting prefix" >&2 ; exit 1 ; }
    mkdir -p ${prefix}

    if [ "${do_binutils}" = "yes" ]
    then
	build_binutils ${target_sys} ${prefix}
    fi

    if [ "${do_sim}" = "yes" ]
    then
	build_sim ${target_sys} ${prefix}
    fi

    if [ "${do_gcc}" = "yes" ]
    then
	# GCC doesn't support some cpus that cgen supports.
	case ${target_sys} in
	ip2k-*) ;;
	mt-*) ;;
	openrisc-* | or32-*) ;;
	xc16x-*) ;;
	*) build_gcc ${target_sys} ${prefix} ;;
	esac
    fi

    if [ "${do_newlib}" = "yes" ]
    then
	# Newlib doesn't support some cpus that cgen supports.
	# We also can't build newlib if we don't have gcc.
	case ${target_sys} in
	ip2k-*) ;;
	mt-*) ;;
	openrisc-* | or32-*) ;;
	xc16x-*) ;;
	*) build_newlib ${target_sys} ${prefix} ;;
	esac
    fi
done

for cpu in ${sid_cpus}
do
    # FIXME: arm-eabi is preferred over arm-elf
    target_sys=${cpu}-elf
    prefix=$(cd ${REL_DIR} && pwd -P)/rel-${target_sys}
    [ $? != 0 ] && { echo "Error setting prefix" >&2 ; exit 1 ; }
    mkdir -p ${prefix}

    if [ "${do_sid}" = "yes" ]
    then
	build_sid ${target_sys} ${prefix}
    fi
done

if [ "${do_intrinsics}" = "yes" ]
then
    build_intrinsics ${target_sys} ${prefix}
fi

if [ "${do_diffs}" = "yes" ]
then
    build_diffs ${target_sys} ${prefix}
fi

echo "Ending gen-all: $(date)"
trap "" 0
@


1.12
log
@	* gen-all: Print options.
@
text
@d6 17
@


1.11
log
@	* gen-all: Be more consistent with intrinsic generation.
@
text
@d26 2
d410 2
@


1.10
log
@gen-all: Be smarter about what diffs to generate.
@
text
@d53 1
a53 1
    echo "\"all\" can be specified which means \"all of the above\""
d74 1
d77 2
a84 1
do_diffs=no
d99 1
a105 1
    diffs) do_diffs=yes ;;
d109 1
a115 1
	do_diffs=yes
d121 6
d376 7
a382 2
    (cd ${SRC_DIR}/cgen && sh ./gen-all-intrinsics ${build_dir}/${GCC_DIR})
    if [ $? != 0 ] ; then exit 1 ; fi
@


1.9
log
@gen-all: add "force" option
@
text
@d374 16
a389 4
    (cd ${SRC_DIR}/opcodes && cvs diff -du >${build_dir}/opcodes.diffs)
    (cd ${SRC_DIR}/sim && cvs diff -du >${build_dir}/sim.diffs)
    (cd ${SRC_DIR}/sid/component/cgen-cpu && cvs diff -du >${build_dir}/sid.diffs)
    (cd ${GCC_DIR}/gcc/config/mep && svn diff -x -u >${build_dir}/gcc.diffs)
@


1.8
log
@add usage info
@
text
@d42 1
d47 1
a47 1
    echo "diffs    Generate diffs from what's checked in"
d73 1
d94 1
d201 5
d297 5
d331 5
d368 1
a368 1
    (cd .. && sh ./gen-all-intrinsics ${build_dir}/${GCC_DIR})
@


1.7
log
@	* gen-all: Move build-configuration related parameters to an
	external file.
@
text
@d34 25
d90 1
@


1.6
log
@	* gen-all (all_cgen_cpus): Add sh.
@
text
@d8 14
d26 9
a34 1
MPC_DIR="/path/to/mpc"
d36 2
d40 1
a40 1
echo "Starting gen-all: $(date)"
d60 2
d114 1
a114 12
mkdir -p tmp-all
cd tmp-all
build_dir=$(pwd)

# Paths to src,gcc,rel relative to ${build_dir}.
src="../../../src"
gcc="../../../gcc"
reltop="../../.."

build_all_target_sys="fr30-elf"
build_sys=$(sh ${src}/config.guess)
host_sys=${build_sys}
d132 1
a132 1
	../${src}/configure \
d156 1
a156 1
	../${gcc}/configure \
d324 1
a324 1
    (cd .. && sh ./gen-all-intrinsics ${build_dir}/${gcc})
d330 4
a333 4
    (cd ${src}/opcodes && cvs diff -du >${build_dir}/opcodes.diffs)
    (cd ${src}/sim && cvs diff -du >${build_dir}/sim.diffs)
    (cd ${src}/sid/component/cgen-cpu && cvs diff -du >${build_dir}/sid.diffs)
    (cd ${gcc}/gcc/config/mep && svn diff -x -u >${build_dir}/gcc.diffs)
d336 13
d353 1
a353 1
    prefix=$(cd ${reltop} && pwd -P)/rel-${target_sys}
d397 1
a397 1
    prefix=$(cd ${reltop} && pwd -P)/rel-${target_sys}
@


1.5
log
@	* gen-all: Add support for building gcc/newlib.
	Specify --prefix and install all built tools.
@
text
@d19 1
a19 1
openrisc sh64 xc16x xstormy16"
@


1.4
log
@	* gen-all: Rewrite.  Build more ports.  Split out building of sid.
@
text
@d12 4
d18 1
a18 1
cgen_cpus="arm cris fr30 frv ip2k iq2000 lm32 m32c m32r mep mt \
d21 1
a21 1
sid_cpus="arm m32r mep mt sh xstormy16"
d26 2
d32 4
d39 1
d43 2
d53 2
d64 24
d92 4
a95 3
# Paths to src,gcc relative to ${build_dir}.
src=../../../src
gcc=../../../gcc
d97 1
a97 1
build_all_target_sys="m32r-elf"
d118 1
d129 23
d155 1
d174 63
d246 1
d265 1
d275 1
d299 1
a299 1
	    if [ $? != 0 ] ; then exit 1 ; fi 
d301 1
d323 1
d325 3
a327 1
    prefix=${build_dir}/rel/${target_sys}
d338 25
d367 1
d369 3
a371 1
    prefix=${build_dir}/rel/${target_sys}
@


1.3
log
@	* gen-all: Explicitly build binutils, gas, ld, gdb, sid.
@
text
@d14 1
a14 1
cgen_cpus="cris fr30 frv ip2k iq2000 lm32 m32c m32r mep mt \
d17 2
d21 3
a24 1
do_sim=no
d31 3
a33 1
    src) do_src=yes ;;
a34 1
    sim) do_sim=yes ;;
d39 3
a41 1
	do_src=yes
a42 1
	do_sim=yes
d57 1
a57 1
cpu=m32r
a59 1
target_sys=${cpu}-elf
d61 30
a90 1
prefix=${build_dir}/rel/${cpu}
d92 2
a93 4
if [ "${do_src}" = "yes" ]
then
    echo "Building src $(date)"
    mkdir -p tmp-src
d96 5
a100 2
	cd tmp-src
	if [ -f Makefile ]
d102 26
a127 2
	    true # already configured
	elif [ "${do_config}" = "yes" ]
d129 8
a136 9
	    echo "Configuring: $(date)"
	    ../${src}/configure \
		--build=${build_sys} \
		--host=${host_sys} \
		--target=${target_sys} \
		--enable-targets=all \
		--enable-shared \
		--enable-cgen-maint \
		--enable-languages=c
d138 16
a161 1
	    make -j3 all-binutils all-gas all-ld all-gdb all-sid
d163 4
d170 1
d174 1
a174 1
fi
d176 1
a176 2
if [ "${do_intrinsics}" = "yes" ]
then
d179 36
a214 1
fi
d216 1
a216 1
if [ "${do_sim}" = "yes" ]
d218 1
a218 34
    for cpu in ${cgen_cpus}
    do
	echo "Building $cpu sim $(date)"
	mkdir -p tmp-sim-${cpu}
	(
	    set -e
	    cd tmp-sim-${cpu}
	    target_sys="${cpu}-elf"
	    if [ -f Makefile ]
	    then
		true # already configured
	    elif [ "${do_config}" = "yes" ]
	    then
		echo "Configuring: $(date)"
		../${src}/configure \
		    --build=${build_sys} \
		    --host=${host_sys} \
		    --target=${target_sys} \
		    --enable-cgen-maint \
		    --enable-languages=c
	    fi
	    if [ "${do_build}" = "yes" ]
	    then
		echo "Building: $(date)"
		if [ ! -f Makefile ]
		then
		    echo "Tree hasn't been configured."
		    exit 1
		fi
		make -j3 all-sim
	    fi
	)
	if [ $? != 0 ] ; then exit 1 ; fi 
    done
d223 1
a223 5
    # NOTE: cvs will return with a non-zero exit code if there are diffs.
    (cd ${src}/opcodes && cvs diff -du >${build_dir}/opcodes.diffs)
    (cd ${src}/sim && cvs diff -du >${build_dir}/sim.diffs)
    (cd ${src}/sid/component/cgen-cpu && cvs diff -du >${build_dir}/sid.diffs)
    (cd ${gcc}/gcc/config/mep && svn diff -x -u >${build_dir}/gcc.diffs)
@


1.2
log
@	* gen-all (do_src): Manually run cgen-all for sid.
@
text
@d88 1
a88 1
	    make -j3
@


1.1
log
@	* gen-all: New file.
@
text
@d89 4
@

