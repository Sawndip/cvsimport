head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	cgen-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	cgen-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	cgen-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	cgen-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	cgen-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	cgen-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	cgen-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	cgen-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	cgen-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	cgen-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	cgen-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	cgen-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	cgen-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	cgen-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	cgen-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	cgen-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	cgen-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	cgen-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	cgen-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	cgen-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	cgen-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	cgen-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	cgen-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	cgen-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	cgen-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	cgen-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	cgen-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	cgen-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	cgen-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	cgen-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	cgen-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	cgen-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	cgen-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	cgen-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	cgen-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	cgen-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	cgen-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	cgen-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	cgen-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	cgen-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	cgen-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	cgen-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	cgen-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	cgen-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	cgen-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	cgen-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	cgen-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	cgen-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	cgen-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	cgen-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	cgen-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	cgen-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	cgen-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	cgen-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	cgen-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	cgen-snapshot-20131001:1.7
	sid-snapshot-20130901:1.7
	cgen-snapshot-20130901:1.7
	sid-snapshot-20130801:1.7
	cgen-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	cgen-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	cgen-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	cgen-snapshot-20130501:1.7
	sid-snapshot-20130401:1.7
	cgen-snapshot-20130401:1.7
	sid-snapshot-20130301:1.7
	cgen-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	cgen-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	cgen-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	cgen-snapshot-20121201:1.7
	sid-snapshot-20121101:1.7
	cgen-snapshot-20121101:1.7
	sid-snapshot-20121001:1.7
	cgen-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	cgen-snapshot-20120901:1.7
	sid-snapshot-20120801:1.7
	cgen-snapshot-20120801:1.7
	sid-snapshot-20120701:1.7
	cgen-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	cgen-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	cgen-snapshot-20120501:1.7
	sid-snapshot-20120401:1.7
	cgen-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	cgen-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	cgen-snapshot-20120201:1.7
	sid-snapshot-20120101:1.7
	cgen-snapshot-20120101:1.7
	sid-snapshot-20111201:1.7
	cgen-snapshot-20111201:1.7
	sid-snapshot-20111101:1.7
	cgen-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	cgen-snapshot-20111001:1.7
	sid-snapshot-20110901:1.7
	cgen-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	cgen-snapshot-20110801:1.7
	sid-snapshot-20110701:1.7
	cgen-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	cgen-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	cgen-snapshot-20110501:1.7
	sid-snapshot-20110401:1.7
	cgen-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	cgen-snapshot-20110301:1.7
	sid-snapshot-20110201:1.7
	cgen-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	cgen-snapshot-20110101:1.7
	sid-snapshot-20101201:1.7
	cgen-snapshot-20101201:1.7
	sid-snapshot-20101101:1.7
	cgen-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	cgen-snapshot-20101001:1.7
	sid-snapshot-20100901:1.7
	cgen-snapshot-20100901:1.7
	sid-snapshot-20100801:1.7
	cgen-snapshot-20100801:1.7
	sid-snapshot-20100701:1.7
	cgen-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	cgen-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	cgen-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	cgen-snapshot-20100401:1.7
	sid-snapshot-20100301:1.7
	cgen-snapshot-20100301:1.7
	sid-snapshot-20100201:1.7
	cgen-snapshot-20100201:1.7
	sid-snapshot-20100101:1.7
	cgen-snapshot-20100101:1.7
	sid-snapshot-20091201:1.7
	cgen-snapshot-20091201:1.7
	sid-snapshot-20091101:1.7
	cgen-snapshot-20091101:1.7
	sid-snapshot-20091001:1.7
	cgen-snapshot-20091001:1.7
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.7
	cgen-snapshot-20090901:1.7
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	cgen-snapshot-20090701:1.6
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	cgen-1_1-branch:1.5.0.6
	cgen-1_1-branchpoint:1.5
	sid-snapshot-20090601:1.5
	cgen-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	cgen-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	cgen-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.4
	arc-insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	cgen-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	cgen-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	cgen-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	cgen-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	cgen-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	cgen-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	cgen-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	cgen-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	cgen-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	cgen-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	cgen-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	cgen-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	cgen-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	cgen-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	cgen-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	cgen-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	cgen-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	cgen-snapshot-20071001:1.5
	msnyder-fork-checkpoint-branch:1.5.0.2
	msnyder-fork-checkpoint-branchpoint:1.5
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.6
	cagney_regbuf-20020515-branch:1.3.0.4
	cagney_regbuf-20020515-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	cgen-1-1-branch:1.3.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.28.19.30.02;	author brolley;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.14.20.38.42;	author geoffk;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.02.00.18.57;	author gkm;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.5.6.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@; General cpu info generator support.
; Copyright (C) 2000, 2003, 2009 Red Hat, Inc.
; This file is part of CGEN.
;
; This file generates C versions of the more salient parts of the description
; file.  It's currently part of opcodes or simulator support,
; and doesn't exist as its own "application" (i.e. user of cgen),
; though that's not precluded.

; strip-mnemonic?: If each mnemonic is constant, the insn table doesn't need
; to record them in the syntax field as the mnemonic field also contains it.
; Furthermore, the insn table can be hashed on complete mnemonic.
; ??? Should live in <derived-arch-data> or some such.

(define strip-mnemonic? #f)

; Attribute support code.

(define (gen-attr-table-defn type attr-list)
  (string-append
   "const CGEN_ATTR_TABLE "
   "@@arch@@_cgen_" type "_attr_table[] =\n{\n"
   (string-map (lambda (attr)
		 (gen-obj-sanitize
		  attr
		  (string-append "  { "
				 "\""
				 (string-upcase (obj:str-name attr))
				 "\", "
				 (if (class-instance? <boolean-attribute> attr)
				     "&bool_attr[0], &bool_attr[0]"
				     (string-append "& " (gen-sym attr)
						    "_attr[0], & "
						    (gen-sym attr)
						    "_attr[0]"))
				 " },\n")))
	       attr-list)
   "  { 0, 0, 0 }\n"
   "};\n\n")
)

(define (gen-attr-table-defns)
  (logit 2 "Generating attribute table defns ...\n")
  (string-append
   "\
/* Attributes.  */

static const CGEN_ATTR_ENTRY bool_attr[] =
{
  { \"#f\", 0 },
  { \"#t\", 1 },
  { 0, 0 }
};

"
   ; Generate tables mapping names to values for all the non-boolean attrs.
   (string-map gen-defn (current-attr-list))
   ; Generate tables for each domain (ifld, insn, etc.) mapping attribute type
   ; to index.
   (gen-attr-table-defn "ifield" (current-ifld-attr-list))
   (gen-attr-table-defn "hardware" (current-hw-attr-list))
   (gen-attr-table-defn "operand" (current-op-attr-list))
   (gen-attr-table-defn "insn" (current-insn-attr-list))
   )
)

; HW-ASM is the base class for supporting hardware elements in the opcode table
; (aka assembler/disassembler).

; Return the C declaration.
; It is up to a derived class to redefine this as necessary.

(method-make! <hw-asm> 'gen-decl (lambda (self) ""))

; Return the C definition.
; It is up to a derived class to redefine this as necessary.

(method-make! <hw-asm> 'gen-defn (lambda (self) ""))

(method-make! <hw-asm> 'gen-ref (lambda (self) "0"))

(method-make! <hw-asm> 'gen-init (lambda (self) ""))

(method-make! <hw-asm> 'gen-table-entry (lambda (self) "CGEN_ASM_NONE, 0, "))

; Prefix of global variables describing operand values.

(define hw-asm-prefix "@@arch@@_cgen_opval_")

; Emit a C reference to a value operand.
; Usually the operand's details are stored in a struct so in the default
; case return that struct (?correct?).  The caller must add the "&" if desired.

(define (gen-hw-asm-ref name)
  (string-append hw-asm-prefix (gen-c-symbol name))
)

; Keyword support.

; Keyword operands.
; Return the C declaration of a keyword list.

(method-make!
 <keyword> 'gen-decl
 (lambda (self)
   (string-append
    "extern CGEN_KEYWORD "
    (gen-hw-asm-ref (elm-get self 'name))
    ";\n"))
)

; Return the C definition of a keyword list.

(method-make!
 <keyword> 'gen-defn
 (lambda (self)
   (string-append
    "static CGEN_KEYWORD_ENTRY "
    (gen-hw-asm-ref (elm-get self 'name)) "_entries"
    "[] =\n{\n"
    (string-drop -2 ; Delete trailing ",\n" [don't want the ,]
		 (string-map (lambda (e)
			       (string-append
				"  { \""
				(->string (elm-get self 'name-prefix))
				(->string (car e)) ; operand name
				"\", "
				(if (string? (cadr e))
				    (cadr e)
				    (number->string (cadr e))) ; value
				", {0, {{{0, 0}}}}, 0, 0"
				" },\n"
				))
			     (elm-get self 'values)))
    "\n};\n\n"
    "CGEN_KEYWORD "
    (gen-hw-asm-ref (elm-get self 'name))
    " =\n{\n"
    "  & " (gen-hw-asm-ref (elm-get self 'name)) "_entries[0],\n"
    "  " (number->string (length (elm-get self 'values))) ",\n"
    "  0, 0, 0, 0, \"\"\n"
    "};\n\n"
    )
   )
)

; Return a reference to a keyword table.

(method-make!
 <keyword> 'gen-ref
 (lambda (self) (string-append "& " (gen-hw-asm-ref (elm-get self 'name))))
)

(method-make!
 <keyword> 'gen-table-entry
 (lambda (self)
   (string-append "CGEN_ASM_KEYWORD, (PTR) " (send self 'gen-ref) ", "))
)

; Return the C code to initialize a keyword.
; If the `hash' attr is present, the values are hashed.  Currently this is
; done by calling back to GAS to have it add the registers to its symbol table.
; FIXME: Currently unused.  Should be done either in the open routine or
; lazily upon lookup.

(method-make!
 <keyword> 'gen-init
 (lambda (self)
   (cond ((has-attr? self 'HASH)
	  (string-append
	   "  @@arch@@_cgen_asm_hash_keywords ("
	   (send self 'gen-ref)
	   ");\n"
	   ))
	 (else ""))
   )
)

; Operand support.

; Return a reference to the operand's attributes.

(method-make!
 <operand> 'gen-attr-ref
 (lambda (self)
   (string-append "& CGEN_OPERAND_ATTRS (CGEN_SYM (operand_table)) "
		  "[" (op-enum self) "]"))
)

; Name of C variable that is a pointer to the fields struct.

(define ifields-var "fields")

; Given FIELD, an `ifield' object, return an lvalue for the operand in
; IFIELDS-VAR.

(define (gen-operand-result-var field)
  (string-append ifields-var "->" (gen-sym field))
)

; Basic description init,finish,analyzer support.

; Return a boolean indicating if all insns have a constant mnemonic
; (ie: no $'s in insn's name in `syntax' field).
; If constant, one can build the assembler hash table using the entire
; mnemonic.

(define (constant-mnemonics?)
  #f ; FIXME
)

; Initialize any "desc" specific things before loading the .cpu file.
; N.B. Since "desc" is always a part of another application, that
; application's init! routine must call this one.

(define (desc-init!)
  *UNSPECIFIED*
)

; Finish any "desc" specific things after loading the .cpu file.
; This is separate from analyze-data! as cpu-load performs some
; consistency checks in between.
; N.B. Since "desc" is always a part of another application, that
; application's finish! routine must call this one.

(define (desc-finish!)
  *UNSPECIFIED*
)

; Compute various needed globals and assign any computed fields of
; the various objects.  This is the standard routine that is called after
; a .cpu file is loaded.
; N.B. Since "desc" is always a part of another application, that
; application's analyze! routine must call this one.

(define (desc-analyze!)
  (set! strip-mnemonic? (constant-mnemonics?))

  *UNSPECIFIED*
)
@


1.6
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d125 1
a125 1
				(->string (elm-get self 'prefix))
@


1.5
log
@2005-10-28  Dave Brolley  <brolley@@redhat.com>

        Contribute the following changes:
        2005-09-19  Dave Brolley  <brolley@@redhat.com>

        * attr.scm (gen-value-for-defn-raw): New methods.
        (gen-value-for-defn): Don't test for 'SID-SIMULATOR. Call
        gen-value-for-defn-raw.
        * sid.scm (gen-obj-attr-sid-defn): Call gen-value-for-defn-raw.

        2002-12-13  Dave Brolley  <brolley@@redhat.com>

        * utils-cgen.scm (gen-attr-type): Moved from sid.scm.
        (-gen-attr-accessors): New function.
        (gen-obj-attr-defn): Update terminating initializer.
        (gen-obj-attr-end-defn): New function.
        * sid.scm (gen-attr-type): Moved to utils-cgen.scm.
        * sid-cpu.scm (cgen-desc.h): Generate code to include
        "opcode/cgen-bitset.h"
        * intrinsics.scm (kept-insn-isas): Correct the extraction of the isa
        name.
        * desc.scm ('gen-defn): Update terminating initializer.
        * desc-cpu.scm (gen-ifld-decls): Call -gen-attr-accessors. Update
        terminatinig initializer.
        (gen-hw-decls): Ditto.
        (gen-operand-decls): Ditto.
        (gen-insn-decls): Ditto.
        (-gen-hash-defines): Generate code to include "opcde/cgen-bitset.h"
        (gen-insn-table): Update terminating initializer.
        (-gen-cpu-open): Update generation of @@arch@@_cgen_rebuild_tables,
        @@arch@@_cgen_cpu_open, @@arch@@_cgen_cpu_close.
        * attr.scm (charmask-bytes): New function.
        (bitset-attr->charmask): New function.
        (<bitset-attribute>): Handle isa-attributes specially. Also handle
        differences for SID-SIMULATOR.
        (<integer-attribute>): Handle differences for SID-SIMULATOR.
        (<enum-attribute>): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2003 Red Hat, Inc.
@


1.5.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2003, 2009 Red Hat, Inc.
@


1.4
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d131 1
a131 1
				", {0, {0}}, 0, 0"
@


1.3
log
@Index: opcodes/ChangeLog
2001-06-13  Geoffrey Keating  <geoffk@@redhat.com>

	* cgen-asm.c (cgen_parse_keyword): When looking for the
	boundaries of a keyword, allow any special characters
	that are actually in one of the allowed keyword.
	* cgen-opc.c (cgen_keyword_add): Add any special characters
	to the nonalpha_chars field.

Index: cgen/ChangeLog
2001-06-13  Geoffrey Keating  <geoffk@@redhat.com>

	* desc.scm (<keyword> 'gen-defn): Add extra zero into
	CGEN_KEYWORD_ENTRY initializers.

Index: include/opcode/ChangeLog
2001-06-13  Geoffrey Keating  <geoffk@@redhat.com>

	* cgen.h (cgen_keyword): Add nonalpha_chars field.
@
text
@d28 1
a28 1
				 (string-upcase (obj:name attr))
d125 2
a126 1
				(elm-get self 'prefix) (car e) ; operand name
@


1.2
log
@	* desc.scm ((<keyword>,gen-defn): Prepend prefix to keyword index names.
@
text
@d140 1
a140 1
    "  0, 0, 0, 0\n"
@


1.1
log
@Initial revision
@
text
@d124 3
a126 2
				"  { "
				"\"" (car e) "\", " ; operand name
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
