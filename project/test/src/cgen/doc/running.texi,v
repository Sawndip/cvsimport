head	1.8;
access;
symbols
	sid-snapshot-20180601:1.7
	cgen-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	cgen-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	cgen-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	cgen-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	cgen-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	cgen-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	cgen-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	cgen-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	cgen-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	cgen-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	cgen-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	cgen-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	cgen-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	cgen-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	cgen-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	cgen-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	cgen-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	cgen-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	cgen-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	cgen-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	cgen-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	cgen-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	cgen-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	cgen-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	cgen-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	cgen-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	cgen-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	cgen-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	cgen-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	cgen-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	cgen-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	cgen-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	cgen-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	cgen-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	cgen-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	cgen-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	cgen-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	cgen-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	cgen-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	cgen-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	cgen-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	cgen-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	cgen-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	cgen-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	cgen-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	cgen-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	cgen-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	cgen-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	cgen-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	cgen-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	cgen-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	cgen-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	cgen-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	cgen-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	cgen-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	cgen-snapshot-20131001:1.7
	sid-snapshot-20130901:1.7
	cgen-snapshot-20130901:1.7
	sid-snapshot-20130801:1.7
	cgen-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	cgen-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	cgen-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	cgen-snapshot-20130501:1.7
	sid-snapshot-20130401:1.7
	cgen-snapshot-20130401:1.7
	sid-snapshot-20130301:1.7
	cgen-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	cgen-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	cgen-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	cgen-snapshot-20121201:1.7
	sid-snapshot-20121101:1.7
	cgen-snapshot-20121101:1.7
	sid-snapshot-20121001:1.7
	cgen-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	cgen-snapshot-20120901:1.7
	sid-snapshot-20120801:1.7
	cgen-snapshot-20120801:1.7
	sid-snapshot-20120701:1.7
	cgen-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	cgen-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	cgen-snapshot-20120501:1.7
	sid-snapshot-20120401:1.7
	cgen-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	cgen-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	cgen-snapshot-20120201:1.7
	sid-snapshot-20120101:1.7
	cgen-snapshot-20120101:1.7
	sid-snapshot-20111201:1.7
	cgen-snapshot-20111201:1.7
	sid-snapshot-20111101:1.7
	cgen-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	cgen-snapshot-20111001:1.7
	sid-snapshot-20110901:1.7
	cgen-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	cgen-snapshot-20110801:1.7
	sid-snapshot-20110701:1.7
	cgen-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	cgen-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	cgen-snapshot-20110501:1.7
	sid-snapshot-20110401:1.7
	cgen-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	cgen-snapshot-20110301:1.7
	sid-snapshot-20110201:1.7
	cgen-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	cgen-snapshot-20110101:1.7
	sid-snapshot-20101201:1.7
	cgen-snapshot-20101201:1.7
	sid-snapshot-20101101:1.7
	cgen-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	cgen-snapshot-20101001:1.7
	sid-snapshot-20100901:1.7
	cgen-snapshot-20100901:1.7
	sid-snapshot-20100801:1.7
	cgen-snapshot-20100801:1.7
	sid-snapshot-20100701:1.7
	cgen-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	cgen-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	cgen-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	cgen-snapshot-20100401:1.7
	sid-snapshot-20100301:1.7
	cgen-snapshot-20100301:1.7
	sid-snapshot-20100201:1.7
	cgen-snapshot-20100201:1.7
	sid-snapshot-20100101:1.7
	cgen-snapshot-20100101:1.7
	sid-snapshot-20091201:1.7
	cgen-snapshot-20091201:1.7
	sid-snapshot-20091101:1.7
	cgen-snapshot-20091101:1.7
	sid-snapshot-20091001:1.7
	cgen-snapshot-20091001:1.7
	arc-sim-20090309:1.2
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.3
	cgen-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.4
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.3.0.2
	cgen-1_1-branchpoint:1.3
	sid-snapshot-20090601:1.2
	cgen-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	cgen-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	cgen-snapshot-20090401:1.2
	arc-insight_6_8-branch:1.2.0.2
	arc-insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	cgen-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	cgen-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	cgen-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	cgen-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	cgen-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	cgen-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	cgen-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	cgen-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	cgen-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	cgen-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	cgen-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	cgen-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	cgen-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	cgen-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	cgen-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	cgen-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	cgen-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	cgen-snapshot-20071001:1.2
	msnyder-fork-checkpoint-branch:1.1.1.1.0.8
	msnyder-fork-checkpoint-branchpoint:1.1.1.1
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.6
	cagney_regbuf-20020515-branch:1.1.1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2018.11.20.20.32.39;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.09.20.43.05;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.13.19.30.32;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.13.19.28.09;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.07.21.29.20;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.14.18.32.28;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.24.13.49.48;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.8
log
@2018-11-20  Jose E. Marchesi  <jose.marchesi@@oracle.com>

* doc/running.texi (Set up the arguments for cgen): Raised from a
	subsection to a section.
@
text
@@@c Copyright (C) 2000, 2009 Red Hat, Inc.
@@c This file is part of the CGEN manual.
@@c For copying conditions, see the file cgen.texi.

@@node Running CGEN
@@chapter Running CGEN

CGEN is usually run from a shell script provided by the application.
For example, in @@file{libopcodes} there is @@file{cgen.sh}.

The main tasks of this script are to:

@@enumerate
@@item Set up the arguments for cgen.
@@item Run cgen.
@@item Apply any post processing to the output files.
@@end enumerate

@@section Set up the arguments for cgen.

CGEN takes several standard arguments.
Each application can then add its own arguments.
By convention generic CGEN options are lowercase letters
and applications use uppercase letters for their arguments.

@@c organization of application-specific args needs work

@@menu
* a::            -a Specify path of .cpu file to load.
* b::            -b Use debugging evaluator, for backtraces.
* d::            -d Start interactive debugging session.
* f::            -f Specify a set of flags to control code generation.
* h::            -h,--help Print usage information.
* i::            -i Specify isa-list entries to keep.
* m::            -m Specify mach-list entries to keep.
* s::            -s Specify the source directory.
* t::            -t Specify tracing of various things.
* v::            -v Increment the verbosity level.
* w::            -w Enable various diagnostics.
* version::      --version Print version info.

* opcodes::      Opcodes generator arguments.
* sim::          Simulator generator arguments.
* sid::          Sid generator arguments.
* html::         HTML doc generator arguments.
@@end menu

@@node a
@@section Specify path of architecture's .cpu file to load. @@option{-a} @@var{path}

Use this option to specify the @@file{.cpu} file to load.

@@node b
@@section Use debugging evaluator, for backtraces. @@option{-b}

Use this option when trying to debug a cgen failure.
It turns on the debugging facilities of the underlying system, e.g. Guile,
and is typically used to produce better error messages (e.g. better
backtraces).
Guile's debugging evaluator is slower than the normal one,
so this option is off by default.

@@node d
@@section Start interactive debugging session. @@option{-d}

Use this option when trying to debug a cgen failure and you
want to enter a debugging
@@code{repl}@@footnote{Read-Evaluate-Print-Loop}
in the underlying system, e.g. Guile.

@@node f
@@section Specify a set of flags to control code generation. @@option{-f} @@var{flags}

Use this option to pass various code generation options to the application.
@@var{flags} is a space-separated list of options with the format
@@code{name} or @@code{name=value}.
Each application accepts its own set of options.

@@c Need to say more here, and for each option.

@@menu
* Opcodes Generator Options::        Opcodes Generator Options
* GDB Simulator Generator Options::  GDB Generator Simulator
* SID Simulator Generator Options::  SID Generator Simulator
* HTML Doc Generator Options::       HTML Doc Generator Options
@@end menu

@@node Opcodes Generator Options
@@subsection Opcodes Generator Options

The @@code{Opcodes} generator accepts the following options:

@@table @@code

@@item opinst
Include the operand instance table in the generated code.

@@item copyright=<kind>
The argument is the copyright to add to the generated code.
It must be one of @@code{fsf} or @@code{redhat}.

@@item package=<package>
The argument is the package the opcodes files are being generated for.
It must be one of @@code{binutils}, @@code{gnusim} (the simulators in GDB
releases) or @@code{cygsim} (SID simulators).

@@end table

@@node GDB Simulator Generator Options
@@subsection GDB Simulator Generator Options

@@table @@code

@@item with-scache

Specify this option to enable the ``semantic cache'' of the simulator.
The simulator uses the semantic cache to speed up simulation by caching
the decoding of instructions.

@@item with-profile=<fn|sw>

Specify this option to enable basic profiling support.

fn - do profiling in the semantic function

sw - do profiling in the semantic switch

@@item with-multiple-isa

Specify this option to enable multiple-isa support.
This is useful for the arm+thumb simulator,
and allows the simulator to simulator programs that use both ISAs.

@@item with-generic-write

This option is for architectures that can execute multiple
instructions in parallel.
Instruction semantics are performed by recording the results
in a generic buffer, and doing a post-semantics writeback pass.
@@c What happens if this option is left off?

@@item with-parallel-only
@@c Only generate parallel versions of each insn.

@@item copyright=<kind>
The argument is the copyright to add to the generated code.
It must be one of @@code{fsf} or @@code{redhat}.

@@item package=<package>
The argument is the package the simulator files are being generated for.
It must be one of @@code{gnusim} (the simulators in GDB
releases) or @@code{cygsim} (SID simulators).
@@c Is cygsim old or what?  SID has its own generators.

@@end table

@@node SID Simulator Generator Options
@@subsection SID Simulator Generator Options

@@table @@code

@@item with-scache

Specify this option to enable the ``semantic cache'' of the simulator.
The simulator uses the semantic cache to speed up simulation by caching
the decoding of instructions.

@@emph{NOTE:} Not all targets support this option.

@@item with-pbb

Specify this option to enable the ``pseudo basic block'' engine.
The simulator uses the pbb engine to speed up simulation by analyzing
the instruction stream a pseudo basic block at a time.

@@emph{NOTE:} Not all targets support this option.

@@item with-sem-frags

Specify this option to enable the semantic fragment engine.

@@emph{NOTE:} This option requires @@code{with-pbb}.

@@emph{NOTE:} Not all targets support this option.

@@item with-profile=<fn|sim>

Specify this option to enable basic profiling support.

fn - do profiling in the semantic function

sw - do profiling in the semantic switch

@@item with-multiple-isa

Specify this option to enable multiple-isa support.
This is useful for the arm+thumb simulator,
and allows the simulator to simulator programs that use both ISAs.

@@item copyright=<kind>
The argument is the copyright to add to the generated code.
It must be one of @@code{fsf} or @@code{redhat}.

@@item package=<package>
The argument is the package the simulator files are being generated for.
It must be one of @@code{gnusim} (the simulators in GDB
releases) or @@code{cygsim} (SID simulators).
@@c What's gnusim doing here?

@@end table

@@node HTML Doc Generator Options
@@subsection HTML Doc Generator Options

@@table @@code

@@item copyright=<kind>
The argument is the copyright to add to the generated code.
It must be @@code{doc}.

@@item package=<package>
The argument is the package the opcodes files are being generated for.
It must be @@code{cgen}.

@@end table

@@node h
@@section Print usage information. @@option{-h,--help}

The standard --help option.

@@node i
@@section Specify isa-list entries to keep. @@option{-i} @@var{isa-list}

Use this option select a subset of the ISAs for the architecture.
This is useful, for example, to generate only Thumb support from an
arm+thumb description.

@@node m
@@section Specify mach-list entries to keep. @@option{-m} @@var{mach-list}

Use this option to select a subset of the machines of the architecture.
This is useful, for example, to generate a simulator for a specific
variant of the architecture.

@@node s
@@section Specify the source directory. @@option{-s} @@var{srcdir}

Use this to specify where the rest of CGEN's files are.

For example in @@code{Binutils} CGEN is typically a sibling
of @@file{src/opcodes}, i.e., @@file{src/cgen}.

@@node t
@@section Specify tracing of various things. @@option{-t} @@var{trace-list}

Use this to turn on the tracing of various things.
The argument is a comma-separated list of things to trace.
At present the following may be traced.

@@itemize @@bullet

@@item @@option{commands}

Trace the commands from the description file(s).

@@item @@option{pmacros}

Trace the invocation and expansion of pmacros from the description file(s).

@@item @@option{all}

Trace everything.

@@end itemize

Each application will invoke CGEN in its own way, so the details of
enabling tracing may vary from application to application.
Generally though, each application has a CGENFLAGS makefile variable
for passing flags to CGEN.

Binutils example:

@@smallexample
# Trace pmacro expansion while generating the m32r port's opcodes files
# in the binutils package.
cd obj/opcodes
rm stamp-m32r
make stamp-m32r CGENFLAGS="-v -b -t pmacros"
@@end smallexample

@@node v
@@section Increment the verbosity level. @@option{-v}

Specifying multiple @@code{-v} options will increase the verbosity.

@@node w
@@section Enable various diagnostics. @@option{-w} @@var{diagnostic-list}

Use this to turn on warnings or errors of various things.
The argument is a comma-separated list.
At present the following diagnostics are supported.

@@itemize @@bullet

@@item @@option{iformat}

Turn on verification of the instruction format.
If an instruction's field list has missing bits or too many bits
then a warning is issued.

@@emph{NOTE:} The checking is incomplete, but it does catch most
common forms of errors.

@@item @@option{all}

Turn on diagnostics for everything.

@@end itemize

Each application will invoke CGEN in its own way, so the details of
enabling diagnostics may vary from application to application.
Generally though, each application has a CGENFLAGS makefile variable
for passing flags to CGEN.

Binutils example:

@@smallexample
# Turn on verification of instruction formats while generating
# the m32r port's opcodes files in the binutils package.
cd obj/opcodes
rm stamp-m32r
make stamp-m32r CGENFLAGS="-v -b -w iformat"
@@end smallexample

@@node version
@@section Print version info. @@option{--version}

The standard --version option.

@@node opcodes
@@section Opcodes generator arguments

The opcodes generator accepts these arguments.

@@table @@code
@@item @@code{-OPC} @@var{FILE}
Specify the path to the @@file{.opc} file.
The @@file{.opc} file contains C code that is copied to the output.
It's useful for providing non-standard or non-straightforward
parsers and printers.

@@item @@code{-H} @@var{FILE}
Generate $arch-desc.h in FILE.

@@item @@code{-C} @@file{FILE}
Generate $arch-desc.c in FILE.

@@item @@code{-O} @@var{FILE}
Generate $arch-opc.h in FILE.

@@item @@code{-P} @@var{FILE}
Generate $arch-opc.c in FILE.

@@item @@code{-Q} @@var{FILE}
Generate $arch-opinst.c in FILE.

@@item @@code{-B} @@var{FILE}
Generate $arch-ibld.h in FILE.

@@item @@code{-L} @@var{FILE}
Generate $arch-ibld.in in FILE.

@@item @@code{-A} @@var{FILE}
Generate $arch-asm.in in FILE.

@@item @@code{-D} @@var{FILE}
Generate $arch-dis.in in FILE.

@@end table

@@node sim
@@section Simulator generator arguments

The simulator generator accepts these arguments.

@@table @@code

@@item @@code{-A} @@var{FILE}
Generate arch.h in FILE.

@@item @@code{-B} @@var{FILE}
Generate arch.c in FILE.

@@item @@code{-C} @@var{FILE}
Generate cpu-<cpu>.h in FILE.

@@item @@code{-U} @@var{FILE}
Generate cpu-<cpu>.c in FILE.

@@item @@code{-N} @@var{FILE}
Generate cpu-all.h in FILE.

@@item @@code{-F} @@var{FILE}
Generate memops.h in FILE.

@@item @@code{-G} @@var{FILE}
Generate defs.h in FILE.

@@item @@code{-P} @@var{FILE}
Generate semops.h in FILE.

@@item @@code{-T} @@var{FILE}
Generate decode.h in FILE.

@@item @@code{-D} @@var{FILE}
Generate decode.c in FILE.

@@item @@code{-E} @@var{FILE}
Generate extract.c in FILE.

@@item @@code{-R} @@var{FILE}
Generate read.c in FILE.

@@item @@code{-W} @@var{FILE}
Generate write.c in FILE.

@@item @@code{-S} @@var{FILE}
Generate semantics.c in FILE.

@@item @@code{-X} @@var{FILE}
Generate sem-switch.c in FILE.

@@item @@code{-O} @@var{FILE}
Generate ops.c in FILE.

@@item @@code{-M} @@var{FILE}
Generate model.c in FILE.

@@item @@code{-L} @@var{FILE}
Generate mainloop.in in FILE.

@@end table

@@node sid
@@section Sid generator arguments

The SID simulator generator accepts these arguments.

@@table @@code

@@item @@code{-H} @@var{FILE}
Generate desc.h in FILE.

@@item @@code{-C} @@var{FILE}
Generate cpu.h in FILE.

@@item @@code{-E} @@var{FILE}
Generate defs.h in FILE.

@@item @@code{-T} @@var{FILE}
Generate decode.h in FILE.

@@item @@code{-D} @@var{FILE}
Generate decode.cxx in FILE.

@@item @@code{-W} @@var{FILE}
Generate write.cxx in FILE.

@@item @@code{-S} @@var{FILE}
Generate semantics.cxx in FILE.

@@item @@code{-X} @@var{FILE}
Generate sem-switch.cxx in FILE.

@@item @@code{-M} @@var{FILE}
Generate model.cxx in FILE.

@@item @@code{-N} @@var{FILE}
Generate model.h in FILE.

@@end table

@@node html
@@section HTML doc generator arguments

The HTML doc generator accepts these arguments.

@@table @@code

@@item @@code{-H} @@var{FILE}
Generate $arch.html in FILE.

@@item @@code{-I} @@var{FILE}
Generate $arch-insn.html in FILE.

@@item @@code{-N} @@var{FILE}
Set the name of the insn.html file as FILE.

@@end table
@


1.7
log
@	Add support for controlling warnings/errors.
	Add tests for iformat description errors.
	* dev.scm (cload): New option #:diag.
	* read.scm (<reader>): New member verify-iformat?.
	(/parse-diagnostic, parse-warning): New functions.
	(parse-error): Guts moved to /parse-diagnostic.
	(/set-diagnostic-options!): New function.
	(cpu-load): New arg diagnostic-options, all callers updated.
	Recognize -w diagnostic-option-list.
	* ifield.scm (ifields-base-ifields): Move here from iformat.scm.
	(ifld-simple-ifields, ifields-simple-ifields): New function.
	* insn.scm (/parse-insn-format-iflds): New function.
	(/parse-insn-format): Guts moved to /parse-insn-format-iflds.
	New arg isa, all callers updated.  Do some basic validation of the
	ifield list if requested.
	* mach.scm (/sanity-check-insns): Improve error message text.
	* doc/running.text: Document -w option.

	* ifield.scm (/multi-ifield-parse): Initialize bitrange.
@
text
@d19 1
a19 1
@@subsection Set up the arguments for cgen.
@


1.6
log
@tweak
@
text
@d39 1
d297 39
@


1.5
log
@add example usage of -t tracing option
@
text
@d276 6
a281 1
Example:
@


1.4
log
@	Add -t option for tracing things like commands, pmacro expansion.
	* dev.scm (cload): New arg #:trace.
	* pmacros.scm (-pmacro-expand): Rewrite pmacro tracing.
	(pmacro-trace): New arg `loc'.  Rewrite pmacro tracing.
	(pmacro-debug): Call pmacro-trace instead of -pmacro-expand.
	* read.scm (<reader>): New members trace-commands?, trace-pmacros?.
	(-reader-process-expanded-1!): Trace commands if requested.
	(-reader-process!): Call pmacro-trace of pmacro tracing requested.
	(-set-trace-options!): New function.
	(-init-reader!): New function.
	(cpu-load): New arg trace-options, all callers updated.
	Call -init-reader! and -set-trace-options!.
	(cgen-usage): Improve output formatting.
	(common-arguments): New option -t.
	(-cgen): Process -t.
	* utils-cgen.scm (single-location->string): Renamed from
	pretty-print-single-location.  All callers updated.
	(location->string): Renamed from pretty-print-location.
	All callers updated.
	(source-properties-location->string): New function.
	* doc/running.texi: Document -t.
@
text
@d276 10
@


1.3
log
@	* doc/cgenint.texi: Renamed from internals.texi.  Several cleanups.
	* doc/app.texi: Cleanup pass.
	* doc/cgen.texi: Cleanup pass.
	* doc/glossary.texi: Add entries for ifield, iformat, sformat, insn.
	* doc/intro.texi: Cleanup pass.
	* doc/mdate-sh: New file.
	* doc/opcodes.texi: Cleanup pass.
	* doc/pmacros.texi: Cleanup pass.
	* doc/porting.texi: Cleanup pass.
	* doc/rtl.texi: Cleanup pass.
	* doc/running.texi: Cleanup pass.  Document more runtime options.
	* doc/stamp-vti: Update.
	* doc/version.texi: Update.
@
text
@d37 1
d253 23
@


1.2
log
@Fix spelling typos
@
text
@d1 1
a1 1
@@c Copyright (C) 2000 Red Hat, Inc.
d8 414
a421 2
This chapter needs to explain how to run CGEN, how it fits together, and
what to expect when you do run it (i.e., output, resultant files, etc).
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
what to expect when you do run it (ie. output, resultant files, etc).
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
