head	1.9;
access;
symbols
	sid-snapshot-20180601:1.9
	cgen-snapshot-20180601:1.9
	sid-snapshot-20180501:1.9
	cgen-snapshot-20180501:1.9
	sid-snapshot-20180401:1.9
	cgen-snapshot-20180401:1.9
	sid-snapshot-20180301:1.9
	cgen-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	cgen-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	cgen-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	cgen-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	cgen-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	cgen-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	cgen-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	cgen-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	cgen-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	cgen-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	cgen-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	cgen-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	cgen-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	cgen-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	cgen-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	cgen-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	cgen-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	cgen-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	cgen-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	cgen-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	cgen-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	cgen-snapshot-20160501:1.9
	sid-snapshot-20160401:1.8
	cgen-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	cgen-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	cgen-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	cgen-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	cgen-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	cgen-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	cgen-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	cgen-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	cgen-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	cgen-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	cgen-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	cgen-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	cgen-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	cgen-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	cgen-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	cgen-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	cgen-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	cgen-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	cgen-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	cgen-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	cgen-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	cgen-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	cgen-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	cgen-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	cgen-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	cgen-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	cgen-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	cgen-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	cgen-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	cgen-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	cgen-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	cgen-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	cgen-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	cgen-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	cgen-snapshot-20130601:1.8
	sid-snapshot-20130501:1.8
	cgen-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	cgen-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	cgen-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	cgen-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	cgen-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	cgen-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	cgen-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	cgen-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	cgen-snapshot-20120901:1.8
	sid-snapshot-20120801:1.8
	cgen-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	cgen-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	cgen-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	cgen-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	cgen-snapshot-20120401:1.8
	sid-snapshot-20120301:1.8
	cgen-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	cgen-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	cgen-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	cgen-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	cgen-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	cgen-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	cgen-snapshot-20110901:1.8
	sid-snapshot-20110801:1.8
	cgen-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	cgen-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	cgen-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	cgen-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	cgen-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	cgen-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	cgen-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	cgen-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	cgen-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	cgen-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	cgen-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	cgen-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	cgen-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	cgen-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	cgen-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	cgen-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	cgen-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	cgen-snapshot-20100301:1.8
	sid-snapshot-20100201:1.8
	cgen-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	cgen-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	cgen-snapshot-20091201:1.8
	sid-snapshot-20091101:1.7
	cgen-snapshot-20091101:1.7
	sid-snapshot-20091001:1.7
	cgen-snapshot-20091001:1.7
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	cgen-snapshot-20090701:1.6
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	cgen-1_1-branch:1.5.0.6
	cgen-1_1-branchpoint:1.5
	sid-snapshot-20090601:1.5
	cgen-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	cgen-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	cgen-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.4
	arc-insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	cgen-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	cgen-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	cgen-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	cgen-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	cgen-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	cgen-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	cgen-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	cgen-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	cgen-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	cgen-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	cgen-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	cgen-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	cgen-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	cgen-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	cgen-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	cgen-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	cgen-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	cgen-snapshot-20071001:1.5
	msnyder-fork-checkpoint-branch:1.5.0.2
	msnyder-fork-checkpoint-branchpoint:1.5
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	cgen-1-1-branch:1.2.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2016.04.14.15.27.54;	author fche;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.05.16.55.33;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.15.12.52.00;	author nickc;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2003.08.07.15.53.58;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.20.19.03.33;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.5.6.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.9
log
@2016-04-14  Trevor Saunders  <tbsaunde@@tbsaunde.org>

        * opc-itab.scm (asm_hash_insn_p): Stop using old style arguments.
        (dis_hash_insn_p): Likewise.
        (asm_hash_insn): Likewise.
        (dis_hash_insn): Likewise.
        * opc-opinst.scm (@@arch@@_cgen_init_opinst_table): Likewise.
@
text
@; Operand instance support.
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.

; Return C code to define one instance of operand object OP.
; TYPE is one of "INPUT" or "OUTPUT".

(define (/gen-operand-instance op type)
  (let ((index (op:index op)))
    (string-append "  { "
		   type ", "
		   "\"" (gen-sym op) "\", "
		   (hw-enum (op:type op)) ", "
		   ; FIXME: Revisit CGEN_ prefix, use MODE (FOO) instead.
		   "CGEN_" (mode:enum (op:mode op)) ", "
		   ; FIXME: We don't handle memory properly yet.  Later.
		   (cond ((memory? (op:type op))
			  "0, 0")
			 ((has-attr? op 'SEM-ONLY)
			  "0, 0")
			 ((eq? (hw-index:type index) 'ifield)
			  (if (= (ifld-length (hw-index:value index)) 0)
			      "0, 0"
			      (string-append "OP_ENT ("
					     (string-upcase (gen-sym op))
					     "), 0")))
			 ((eq? (hw-index:type index) 'constant)
			  (string-append "0, "
					 (number->string (hw-index:value index))))
			 ((eq? (hw-index:type index) 'enum)
			  (let ((sym (hw-index-enum-name index))
				(obj (hw-index-enum-obj index)))
			    (string-append "0, "
					   (gen-enum-sym obj sym))))
			 (else "0, 0"))
		   ", " (if (op:cond? op) "COND_REF" "0")
		   " },\n"))
)

; Return C code to define arrays of operand instances read from and written
; to by <sformat> SFMT.
; This is based on the semantics of the instruction.
; ??? All runtime chosen values (e.g. a particular register in a register bank)
; is assumed to be selected statically by the instruction.  When some cpu
; violates this assumption (say because a previous instruction determines
; which register(s) the next instruction operates on), this will need
; additional support.

(define (/gen-operand-instance-table sfmt)
  (let ((ins (sfmt-in-ops sfmt))
	(outs (sfmt-out-ops sfmt)))
    ; This used to exclude outputing anything if there were no ins or outs.
    (gen-obj-sanitize
     (sfmt-eg-insn sfmt) ; sanitize based on the example insn
     (string-append
      "static const CGEN_OPINST "
      (gen-sym sfmt) "_ops[] ATTRIBUTE_UNUSED = {\n"
      (string-map (lambda (op) (/gen-operand-instance op "INPUT"))
		  ins)
      (string-map (lambda (op)  (/gen-operand-instance op "OUTPUT"))
		  outs)
      "  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n};\n\n")))
)

(define (/gen-operand-instance-tables)
  (string-write
   "\
/* Operand references.  */

"
   (gen-define-with-symcat "OP_ENT(op) @@ARCH@@_OPERAND_" "op")
"\
#define INPUT CGEN_OPINST_INPUT
#define OUTPUT CGEN_OPINST_OUTPUT
#define END CGEN_OPINST_END
#define COND_REF CGEN_OPINST_COND_REF

"
   (lambda () (string-write-map /gen-operand-instance-table (current-sfmt-list)))
   "\
#undef OP_ENT
#undef INPUT
#undef OUTPUT
#undef END
#undef COND_REF

"
   )
)

; Return C code for INSN's operand instance table.

(define (gen-operand-instance-ref insn)
  (let* ((sfmt (insn-sfmt insn))
	 (ins (sfmt-in-ops sfmt))
	 (outs (sfmt-out-ops sfmt)))
    (if (and (null? ins) (null? outs))
	"0"
	(string-append "& " (gen-sym sfmt) "_ops[0]")))
)

; Return C code to define a table to lookup an insn's operand instance table.

(define (/gen-insn-opinst-lookup-table)
  (string-list
   "/* Operand instance lookup table.  */\n\n"
   "static const CGEN_OPINST *@@arch@@_cgen_opinst_table[MAX_INSNS] = {\n"
   "  0,\n" ; null first entry
   (string-list-map
    (lambda (insn)
      (gen-obj-sanitize
       insn
       (string-append "  & " (gen-sym (insn-sfmt insn)) "_ops[0],\n")))
    (current-insn-list))
   "};\n\n"
   "\
/* Function to call before using the operand instance table.  */

void
@@arch@@_cgen_init_opinst_table (CGEN_CPU_DESC cd)
{
  int i;
  const CGEN_OPINST **oi = & @@arch@@_cgen_opinst_table[0];
  CGEN_INSN *insns = (CGEN_INSN *) cd->insn_table.init_entries;
  for (i = 0; i < MAX_INSNS; ++i)
    insns[i].opinst = oi[i];
}
"
   )
)

; Return the maximum number of operand instances used by any insn.
; If not generating the operand instance table, use a heuristic.

(define (max-operand-instances)
  (if /opcodes-build-operand-instance-table?
      (apply max
	     (map (lambda (insn)
		    (+ (length (sfmt-in-ops (insn-sfmt insn)))
		       (length (sfmt-out-ops (insn-sfmt insn)))))
		  (current-insn-list)))
      8) ; FIXME: for now
)

; Generate $arch-opinst.c.

(define (cgen-opinst.c)
  (logit 1 "Generating " (current-arch-name) "-opinst.c ...\n")

  ; If instruction semantics haven't been analyzed, do that now.
  (if (not (arch-semantics-analyzed? CURRENT-ARCH))
      (begin
	(logit 1 "Instruction semantics weren't analyzed when .cpu file was loaded.\n")
	(logit 1 "Doing so now ...\n")
	(arch-analyze-insns! CURRENT-ARCH
			     #t ; include aliases
			     #t) ; /opcodes-build-operand-instance-table?
	))

  (string-write
   (gen-c-copyright "Semantic operand instances for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#include \"sysdep.h\"
#include \"ansidecl.h\"
#include \"bfd.h\"
#include \"symcat.h\"
#include \"@@prefix@@-desc.h\"
#include \"@@prefix@@-opc.h\"
\n"
   /gen-operand-instance-tables
   /gen-insn-opinst-lookup-table
   )
)
@


1.8
log
@	* utils.scm (reduce): Delete.

	* rtl-traverse.scm (/rtx-canon-rtx-enum): Tweak local name.

	* enum.scm (gen-enum-sym): Make consistent with gen-enum-decl
	regarding PREFIX attribute handling.

	* operand.scm (<hw-index>): Add enum to possible types, all uses
	updated.
	(hw-index-constant?, hw-index-constant-value): New functions.
	(make-enum-hw-index, hw-index-enum-name, hw-index-enum-value,
	hw-index-enum-obj): New functions.
	(/operand-parse): Handle enum indices.
	* intrinsics.scm (md-operand:fixed-register): Use hw-index-constant?,
	hw-index-constant-value.
	* rtl.scm (rtx-constant-value): Fix handling of enums.
	* rtx-funcs.scm (enum): Ditto.
	* sid.scm (<hardware-base> cxmake-get): Only ifield indices are
	currently supported here.
@
text
@d120 1
a120 2
@@arch@@_cgen_init_opinst_table (cd)
     CGEN_CPU_DESC cd;
@


1.7
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d30 5
@


1.6
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d8 1
a8 1
(define (-gen-operand-instance op type)
d44 1
a44 1
(define (-gen-operand-instance-table sfmt)
d53 1
a53 1
      (string-map (lambda (op) (-gen-operand-instance op "INPUT"))
d55 1
a55 1
      (string-map (lambda (op)  (-gen-operand-instance op "OUTPUT"))
d60 1
a60 1
(define (-gen-operand-instance-tables)
d74 1
a74 1
   (lambda () (string-write-map -gen-operand-instance-table (current-sfmt-list)))
d99 1
a99 1
(define (-gen-insn-opinst-lookup-table)
d132 1
a132 1
  (if -opcodes-build-operand-instance-table?
d153 1
a153 1
			     #t) ; -opcodes-build-operand-instance-table?
d167 2
a168 2
   -gen-operand-instance-tables
   -gen-insn-opinst-lookup-table
@


1.5
log
@Fix compile time warning messages
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
@


1.5.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2009 Red Hat, Inc.
@


1.4
log
@	From Michael Meissner.
	* opc-opinst.scm (-gen-operand-instance-table): Initialize all of
	the elements for the END record of CGEN_OPINST, silencing warnings.
@
text
@d52 1
a52 1
      (gen-sym sfmt) "_ops[] = {\n"
@


1.3
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d57 1
a57 1
      "  { END }\n};\n\n")))
@


1.2
log
@* ANSI C fixes

2000-11-20  Frank Ch. Eigler  <fche@@redhat.com>

	* opc-itab.scm (-gen-ifmt-table, -gen-macro-insn-table: Remove
	unneeded "\n\n" from F() macro definition.

2000-11-15  Greg McGary  <greg@@mcgary.org>

	* utils-cgen.scm (gen-define-with-symcat): New function.
	* desc-cpu.scm (gen-ifld-defns): Use it.
	(gen-hw-table-defns): Use it.
	(-gen-hash-defines): Use it.
	(gen-operand-table): Use it.
	(gen-insn-table): Use it.  Remove spurious `#undef MNEM'.
	* opc-itab.scm (-gen-ifmt-table): Use it.
	(-gen-insn-opcode-table): Use it.
	(-gen-macro-insn-table): Use it.
	* opc-opinst.scm (-gen-operand-instance-tables): Use it.
	* sim-cpu.scm (cgen-semantics.c): Use it.
	(cgen-sem-switch.c): Use it.
@
text
@d157 1
a157 1
   (gen-copyright "Semantic operand instances for @@arch@@."
@


1.1
log
@Initial revision
@
text
@d65 3
a71 1
#define OP_ENT(op) CONCAT2 (@@ARCH@@_OPERAND_,op)
d76 1
a80 1
#undef OP_ENT
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
