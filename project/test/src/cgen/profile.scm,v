head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	cgen-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	cgen-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	cgen-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	cgen-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	cgen-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	cgen-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	cgen-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	cgen-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	cgen-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	cgen-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	cgen-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	cgen-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	cgen-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	cgen-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	cgen-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	cgen-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	cgen-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	cgen-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	cgen-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	cgen-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	cgen-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	cgen-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	cgen-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	cgen-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	cgen-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	cgen-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	cgen-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	cgen-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	cgen-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	cgen-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	cgen-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	cgen-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	cgen-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	cgen-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	cgen-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	cgen-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	cgen-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	cgen-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	cgen-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	cgen-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	cgen-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	cgen-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	cgen-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	cgen-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	cgen-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	cgen-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	cgen-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	cgen-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	cgen-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	cgen-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	cgen-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	cgen-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	cgen-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	cgen-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	cgen-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	cgen-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	cgen-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	cgen-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	cgen-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	cgen-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	cgen-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	cgen-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	cgen-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	cgen-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	cgen-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	cgen-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	cgen-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	cgen-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	cgen-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	cgen-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	cgen-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	cgen-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	cgen-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	cgen-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	cgen-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	cgen-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	cgen-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	cgen-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	cgen-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	cgen-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	cgen-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	cgen-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	cgen-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	cgen-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	cgen-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	cgen-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	cgen-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	cgen-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	cgen-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	cgen-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	cgen-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	cgen-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	cgen-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	cgen-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	cgen-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	cgen-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	cgen-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	cgen-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	cgen-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	cgen-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	cgen-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	cgen-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	cgen-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	cgen-snapshot-20091001:1.2
	arc-sim-20090309:1.1.1.1
	sid-snapshot-20090901:1.2
	cgen-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	cgen-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	cgen-snapshot-20090701:1.2
	dje-cgen-play1-branch:1.2.0.2
	dje-cgen-play1-branchpoint:1.2
	cgen-1_1-branch:1.1.1.1.0.12
	cgen-1_1-branchpoint:1.1.1.1
	sid-snapshot-20090601:1.1.1.1
	cgen-snapshot-20090601:1.1.1.1
	sid-snapshot-20090501:1.1.1.1
	cgen-snapshot-20090501:1.1.1.1
	sid-snapshot-20090401:1.1.1.1
	cgen-snapshot-20090401:1.1.1.1
	arc-insight_6_8-branch:1.1.1.1.0.10
	arc-insight_6_8-branchpoint:1.1.1.1
	sid-snapshot-20090301:1.1.1.1
	cgen-snapshot-20090301:1.1.1.1
	sid-snapshot-20090201:1.1.1.1
	cgen-snapshot-20090201:1.1.1.1
	sid-snapshot-20090101:1.1.1.1
	cgen-snapshot-20090101:1.1.1.1
	sid-snapshot-20081201:1.1.1.1
	cgen-snapshot-20081201:1.1.1.1
	sid-snapshot-20081101:1.1.1.1
	cgen-snapshot-20081101:1.1.1.1
	sid-snapshot-20081001:1.1.1.1
	cgen-snapshot-20081001:1.1.1.1
	sid-snapshot-20080901:1.1.1.1
	cgen-snapshot-20080901:1.1.1.1
	sid-snapshot-20080801:1.1.1.1
	cgen-snapshot-20080801:1.1.1.1
	sid-snapshot-20080701:1.1.1.1
	cgen-snapshot-20080701:1.1.1.1
	sid-snapshot-20080601:1.1.1.1
	cgen-snapshot-20080601:1.1.1.1
	sid-snapshot-20080501:1.1.1.1
	cgen-snapshot-20080501:1.1.1.1
	sid-snapshot-20080403:1.1.1.1
	sid-snapshot-20080401:1.1.1.1
	cgen-snapshot-20080401:1.1.1.1
	sid-snapshot-20080301:1.1.1.1
	cgen-snapshot-20080301:1.1.1.1
	sid-snapshot-20080201:1.1.1.1
	cgen-snapshot-20080201:1.1.1.1
	sid-snapshot-20080101:1.1.1.1
	cgen-snapshot-20080101:1.1.1.1
	sid-snapshot-20071201:1.1.1.1
	cgen-snapshot-20071201:1.1.1.1
	sid-snapshot-20071101:1.1.1.1
	cgen-snapshot-20071101:1.1.1.1
	sid-snapshot-20071001:1.1.1.1
	cgen-snapshot-20071001:1.1.1.1
	msnyder-fork-checkpoint-branch:1.1.1.1.0.8
	msnyder-fork-checkpoint-branchpoint:1.1.1.1
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.6
	cagney_regbuf-20020515-branch:1.1.1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1.12.1;
next	;

1.1.1.1.12.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@;;; {Profile}
;;; Copyright (C) 2009 Red Hat, Inc.
;;; This file is part of CGEN.
;;; See file COPYING.CGEN for details.
;;;
;;; This code is just an experimental prototype (e. g., it is not
;;; thread safe), but since it's at the same time useful, it's
;;; included anyway.
;;;
;;; This is copied from the tracing support in debug.scm.
;;; If merged into the main distribution it will need an efficiency
;;; and layout cleanup pass.

; FIXME: Prefix "proc-" added to not collide with cgen stuff.

; Put this stuff in the debug module since we need the trace facilities.
(define-module (ice-9 profile) :use-module (ice-9 debug))

(define profiled-procedures '())

(define-public (profile-enable . args)
  (if (null? args)
      (nameify profiled-procedures)
      (begin
	(for-each (lambda (proc)
		    (if (not (procedure? proc))
			(error "profile: Wrong type argument:" proc))
		    ; `trace' is a magic property understood by guile
		    (set-procedure-property! proc 'trace #t)
		    (if (not (memq proc profiled-procedures))
			(set! profiled-procedures
			      (cons proc profiled-procedures))))
		  args)
	(set! apply-frame-handler profile-entry)
	(set! exit-frame-handler profile-exit)
	(debug-enable 'trace)
	(nameify args))))

(define-public (profile-disable . args)
  (if (and (null? args)
	   (not (null? profiled-procedures)))
      (apply profile-disable profiled-procedures)
      (begin
	(for-each (lambda (proc)
		    (set-procedure-property! proc 'trace #f)
		    (set! profiled-procedures (delq! proc profiled-procedures)))
		  args)
	(if (null? profiled-procedures)
	    (debug-disable 'trace))
	(nameify args))))

(define (nameify ls)
  (map (lambda (proc)
	 (let ((name (procedure-name proc)))
	   (or name proc)))
       ls))

; Subroutine of profile-entry to find the calling procedure.
; Result is name of calling procedure or #f.

(define (find-caller frame)
  (let ((prev (frame-previous frame)))
    (if prev
	; ??? Not sure this is right.  The goal is to find the real "caller".
	(if (and (frame-procedure? prev)
		 ;(or (frame-real? prev) (not (frame-evaluating-args? prev)))
		 (not (frame-evaluating-args? prev))
		 )
	    (let ((name (procedure-name (frame-procedure prev))))
	      (if name name 'lambda))
	    (find-caller prev))
	'top-level))
)

; Return the current time.
; The result is a black box understood only by elapsed-time.

(define (current-time) (gettimeofday))

; Return the elapsed time in milliseconds since START.

(define (elapsed-time start)
  (let ((now (gettimeofday)))
    (+ (* (- (car now) (car start)) 1000)
       (quotient (- (cdr now) (cdr start)) 1000)))
)

; Handle invocation of profiled procedures.

(define (profile-entry key cont tail)
  (if (eq? (stack-id cont) 'repl-stack)
      (let* ((stack (make-stack cont))
	     (frame (stack-ref stack 0))
	     (proc (frame-procedure frame)))
	(if proc
	    ; procedure-property returns #f if property not present
	    (let ((counts (procedure-property proc 'profile-count)))
	      (set-procedure-property! proc 'entry-time (current-time))
	      (if counts
		  (let* ((caller (find-caller frame))
			 (count-elm (assq caller counts)))
		    (if count-elm
			(set-cdr! count-elm (1+ (cdr count-elm)))
			(set-procedure-property! proc 'profile-count
						 (acons caller 1 counts)))))))))

  ; SCM_TRACE_P is reset each time by the interpreter
  ;(display "entry\n" (current-error-port))
  (debug-enable 'trace)
  ;; It's not necessary to call the continuation since
  ;; execution will continue if the handler returns
  ;(cont #f)
)

; Handle exiting of profiled procedures.

(define (profile-exit key cont retval)
  ;(display "exit\n" (current-error-port))
  (display (list key cont retval)) (newline)
  (display (stack-id cont)) (newline)
  (if (eq? (stack-id cont) 'repl-stack)
      (let* ((stack (make-stack cont))
	     (frame (stack-ref stack 0))
	     (proc (frame-procedure frame)))
	(display stack) (newline)
	(display frame) (newline)
	(if proc
	    (set-procedure-property!
	     proc 'total-time
	     (+ (procedure-property proc 'total-time)
		(elapsed-time (procedure-property proc 'entry-time)))))))

  ; ??? Need to research if we have to do this or not.
  ; SCM_TRACE_P is reset each time by the interpreter
  (debug-enable 'trace)
)

; Called before something is to be profiled.
; All desired procedures to be profiled must have been previously selected.
; Property `profile-count' is an association list of caller name and call
; count.
; ??? Will eventually want to use a hash table or some such.

(define-public (profile-init)
  (for-each (lambda (proc)
	      (set-procedure-property! proc 'profile-count '())
	      (set-procedure-property! proc 'total-time 0))
	    profiled-procedures)
)

; Called after execution to print profile counts.
; If ARGS contains 'all, stats on all profiled procs are printed, not just
; those that were actually called.

(define-public (profile-stats . args)
  (let ((stats (map (lambda (proc)
		      (cons (procedure-name proc)
			    (procedure-property proc 'profile-count)))
		    profiled-procedures))
	(all? (memq 'all args))
	(sort (if (defined? 'sort) (local-ref '(sort)) (lambda args args))))

    (display "Profiling results:\n\n")

    ; Print the procs in sorted order.
    (let ((stats (sort stats (lambda (a b) (string<? (car a) (car b))))))
      (for-each (lambda (proc-stats)
		  (if (or all? (not (null? (cdr proc-stats))))
		      ; Print by decreasing frequency.
		      (let ((calls (sort (cdr proc-stats) (lambda (a b) (> (cdr a) (cdr b))))))
			(display (string-append (car proc-stats) "\n"))
			(for-each (lambda (call)
				    (display (string-append "  "
							    (number->string (cdr call))
							    " "
							    (car call)
							    "\n")))
				  calls)
			(display "  ")
			(display (apply + (map cdr calls)))
			(display " -- total\n\n"))))
		stats)))
)
@


1.1
log
@Initial revision
@
text
@d2 3
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@


1.1.1.1.12.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@a1 3
;;; Copyright (C) 2009 Red Hat, Inc.
;;; This file is part of CGEN.
;;; See file COPYING.CGEN for details.
@

