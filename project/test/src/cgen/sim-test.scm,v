head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	cgen-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	cgen-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	cgen-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	cgen-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	cgen-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	cgen-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	cgen-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	cgen-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	cgen-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	cgen-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	cgen-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	cgen-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	cgen-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	cgen-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	cgen-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	cgen-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	cgen-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	cgen-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	cgen-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	cgen-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	cgen-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	cgen-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	cgen-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	cgen-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	cgen-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	cgen-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	cgen-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	cgen-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	cgen-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	cgen-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	cgen-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	cgen-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	cgen-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	cgen-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	cgen-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	cgen-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	cgen-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	cgen-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	cgen-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	cgen-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	cgen-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	cgen-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	cgen-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	cgen-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	cgen-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	cgen-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	cgen-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	cgen-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	cgen-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	cgen-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	cgen-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	cgen-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	cgen-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	cgen-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	cgen-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	cgen-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	cgen-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	cgen-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	cgen-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	cgen-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	cgen-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	cgen-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	cgen-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	cgen-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	cgen-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	cgen-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	cgen-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	cgen-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	cgen-snapshot-20120901:1.5
	sid-snapshot-20120801:1.5
	cgen-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	cgen-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	cgen-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	cgen-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	cgen-snapshot-20120401:1.5
	sid-snapshot-20120301:1.5
	cgen-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	cgen-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	cgen-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	cgen-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	cgen-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	cgen-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	cgen-snapshot-20110901:1.5
	sid-snapshot-20110801:1.5
	cgen-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	cgen-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	cgen-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	cgen-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	cgen-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	cgen-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	cgen-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	cgen-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	cgen-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	cgen-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	cgen-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	cgen-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	cgen-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	cgen-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	cgen-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	cgen-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	cgen-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	cgen-snapshot-20100301:1.5
	sid-snapshot-20100201:1.5
	cgen-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	cgen-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	cgen-snapshot-20091201:1.5
	sid-snapshot-20091101:1.4
	cgen-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	cgen-snapshot-20091001:1.4
	arc-sim-20090309:1.2
	sid-snapshot-20090901:1.3
	cgen-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	cgen-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.2
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.2.0.12
	cgen-1_1-branchpoint:1.2
	sid-snapshot-20090601:1.2
	cgen-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	cgen-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	cgen-snapshot-20090401:1.2
	arc-insight_6_8-branch:1.2.0.10
	arc-insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	cgen-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	cgen-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	cgen-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	cgen-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	cgen-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	cgen-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	cgen-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	cgen-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	cgen-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	cgen-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	cgen-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	cgen-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	cgen-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	cgen-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	cgen-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	cgen-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	cgen-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	cgen-snapshot-20071001:1.2
	msnyder-fork-checkpoint-branch:1.2.0.8
	msnyder-fork-checkpoint-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	cgen-1-1-branch:1.2.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2009.11.03.16.24.02;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.12.17.07.48;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.01.11.56.53;	author bje;	state Exp;
branches
	1.2.12.1;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.2.12.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@; CPU description file generator for the simulator testsuite.
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; This is invoked to build allinsn.exp and a script to run to
; generate allinsn.s and allinsn.d.

; Specify which application.
(set! APPLICATION 'SIM-TEST)

; Called before/after the .cpu file has been read.

(define (sim-test-init!) (opcodes-init!))
(define (sim-test-finish!) (opcodes-finish!))

; Called after .cpu file has been read and global error checks are done.
; We use the `tmp' member to record the syntax split up into its components.

(define (sim-test-analyze!)
  (opcodes-analyze!)
  (map (lambda
	   (insn) (elm-xset! insn 'tmp (syntax-break-out (insn-syntax insn)
							 (obj-isa-list insn))))
       (current-insn-list))
  *UNSPECIFIED*
)

; Methods to compute test data.
; The result is a list of strings to be inserted in the assembler
; in the operand's position.

(method-make!
 <hw-asm> 'test-data
 (lambda (self n)
   ; FIXME: floating point support
   (let ((signed (list 0 1 -1 2 -2))
	 (unsigned (list 0 1 2 3 4))
	 (mode (elm-get self 'mode)))
     (map number->string
	  (list-take n
		     (if (eq? (mode:class mode) 'UINT)
			 unsigned
			 signed)))))
)

(method-make!
 <keyword> 'test-data
 (lambda (self n)
   (let* ((values (elm-get self 'values))
	  (n (min n (length values))))
     ; FIXME: Need to handle mach variants.
     (map car (list-take n values))))
)

(method-make!
 <hw-address> 'test-data
 (lambda (self n)
   (let ((test-data '("foodata" "4" "footext" "-4")))
     (list-take n test-data)))
)

(method-make!
 <hw-iaddress> 'test-data
 (lambda (self n)
   (let ((test-data '("footext" "4" "foodata" "-4")))
     (list-take n test-data)))
)

(method-make-forward! <hw-register> 'indices '(test-data))
(method-make-forward! <hw-immediate> 'values '(test-data))

; This can't use method-make-forward! as we need to call op:type to
; resolve the hardware reference.

(method-make!
 <operand> 'test-data
 (lambda (self n)
   (send (op:type self) 'test-data n))
)

; Given an operand, return a set of N test data.
; e.g. For a keyword operand, return a random subset.
; For a number, return N numbers.

(define (operand-test-data op n)
  (send op 'test-data n)
)

; Given the broken out assembler syntax string, return the list of operand
; objects.

(define (extract-operands syntax-list)
  (let loop ((result nil) (l syntax-list))
    (cond ((null? l) (reverse result))
	  ((object? (car l)) (loop (cons (car l) result) (cdr l)))
	  (else (loop result (cdr l)))))
)

; Given a list of operands for an instruction, return the test set
; (all possible combinations).
; N is the number of testcases for each operand.
; The result has N to-the-power (length OP-LIST) elements.

(define (build-test-set op-list n)
  (let ((test-data (map (lambda (op) (operand-test-data op n)) op-list))
	(len (length op-list)))
    ; FIXME: Make slicker later.
    (cond ((=? len 0) (list (list)))
	  ((=? len 1) test-data)
	  (else (list (map car test-data)))))
)

; Given an assembler expression and a set of operands build a testcase.
; SYNTAX-LIST is a list of syntax elements (characters) and <operand> objects.
; TEST-DATA is a list of strings, one element per operand.
; FIXME: wip

(define (build-sim-testcase syntax-list test-data)
  (logit 3 "Building a testcase for: "
	 (map (lambda (sl)
		(string-append " "
			       (cond ((string? sl)
				      sl)
				     ((operand? sl)
				      (obj:str-name sl))
				     (else
				      (with-output-to-string
					(lambda () (display sl)))))))
	      syntax-list)
	 ", test data: "
	 (map (lambda (td) (list " " td))
	      test-data)
	 "\n")
  (let loop ((result nil) (sl syntax-list) (td test-data))
    ;(display (list result sl td "\n"))
    (cond ((null? sl)
	   (string-append "\t"
			  (apply string-append (reverse result))
			  "\n"))
	  ((string? (car sl))
	   (loop (cons (car sl) result) (cdr sl) td))
	  (else (loop (cons (->string (car td)) result) (cdr sl) (cdr td)))))
)

; Generate a set of testcases for INSN.
; FIXME: wip

(define (gen-sim-test insn)
  (logit 2 "Generating sim test set for " (obj:name insn) " ...\n")
  (string-append
   "\t.global " (gen-sym insn) "\n"
   (gen-sym insn) ":\n"
   (let* ((syntax-list (insn-tmp insn))
	  (op-list (extract-operands syntax-list))
	  (test-set (build-test-set op-list 2)))
     (string-map (lambda (test-data)
		   (build-sim-testcase syntax-list test-data))
		 test-set))
   )
)

; Generate the shell script that builds the .cgs files.
; .cgs are .s files except that there may be other .s files in the directory
; and we want the .exp driver script to easily find the files.
;
; Eventually it would be nice to generate as much of the testcase as possible.
; For now we just generate the template and leave the programmer to fill in
; the guts of the test (i.e. set up various registers, execute the insn to be
; tested, and then verify the results).
; Clearly some hand generated testcases will also be needed, but this
; provides a good start for each instruction.

(define (cgen-build.sh)
  (logit 1 "Generating sim-build.sh ...\n")
  (string-append
   "\
#/bin/sh
# Generate test result data for "
(symbol->string (current-arch-name))
" simulator testing.
# This script is machine generated.
# It is intended to be run in the testsuite source directory.
#
# Syntax: /bin/sh sim-build.sh

# Put results here, so we preserve the existing set for comparison.
rm -rf tmpdir
mkdir tmpdir
cd tmpdir
\n"

    (string-map (lambda (insn)
		  (string-append
		   "cat <<EOF > " (gen-file-name (obj:name insn)) ".cgs\n"
		   ; FIXME: Need to record assembler line comment char in .cpu.
		   "# "
		   (symbol->string (current-arch-name))
		   " testcase for " (backslash "$" (insn-syntax insn))
		   " -*- Asm -*-\n"
		   "# mach: "
		   (let ((machs (insn-machs insn)))
		     (if (null? machs)
			 "all"
			 (string-drop1
			  (string-map (lambda (mach)
					(string-append "," (symbol->string mach)))
				      machs))))
		   "\n\n"
		   "\t.include \"testutils.inc\"\n\n"
		   "\tstart\n\n"
		   (gen-sim-test insn)
		   "\n\tpass\n"
		   "EOF\n\n"))
		(non-alias-insns (current-insn-list)))
   )
)

; Generate the dejagnu allinsn.exp file that drives the tests.

(define (cgen-allinsn.exp)
  (logit 1 "Generating sim-allinsn.exp ...\n")
  (string-append
   "\
# " (string-upcase (symbol->string (current-arch-name))) " simulator testsuite.

if [istarget " (symbol->string (current-arch-name)) "*-*-*] {
    # load support procs (none yet)
    # load_lib cgen.exp

    # all machines
    set all_machs \""
   (string-drop1 (string-map (lambda (m)
			       (string-append " "
					      (gen-sym m)))
			     (current-mach-list)))
   "\"

    # The .cgs suffix is for \"cgen .s\".
    foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.cgs]] {
	# If we're only testing specific files and this isn't one of them,
	# skip it.
	if ![runtest_file_p $runtests $src] {
	    continue
	}

	run_sim_test $src $all_machs
    }
}\n"
   )
)
@


1.4
log
@	* sim-test.scm (*): Symbols no longer can be passed to string-append.
@
text
@d23 2
a24 1
	   (insn) (elm-xset! insn 'tmp (syntax-break-out (insn-syntax insn))))
@


1.3
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d125 1
a125 1
				      (obj:name sl))
d142 1
a142 1
	  (else (loop (cons (car td) result) (cdr sl) (cdr td)))))
d178 3
a180 1
# Generate test result data for " (current-arch-name) " simulator testing.
d196 4
a199 1
		   "# " (current-arch-name) " testcase for " (backslash "$" (insn-syntax insn)) " -*- Asm -*-\n"
d204 4
a207 3
			 (string-drop1 (string-map (lambda (mach)
						     (string-append "," mach))
						   machs))))
d224 1
a224 1
# " (string-upcase (current-arch-name)) " simulator testsuite.
d226 1
a226 1
if [istarget " (current-arch-name) "*-*-*] {
@


1.2
log
@2000-11-01  Ben Elliston  <bje@@redhat.com>

	* sim-test.scm (cgen-build.sh): Include "-*- Asm -*-" in test cases.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
@


1.2.12.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2009 Red Hat, Inc.
@


1.1
log
@Initial revision
@
text
@d194 1
a194 1
		   "# " (current-arch-name) " testcase for " (backslash "$" (insn-syntax insn)) "\n"
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
