head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	cgen-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	cgen-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	cgen-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	cgen-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	cgen-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	cgen-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	cgen-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	cgen-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	cgen-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	cgen-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	cgen-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	cgen-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	cgen-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	cgen-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	cgen-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	cgen-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	cgen-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	cgen-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	cgen-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	cgen-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	cgen-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	cgen-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	cgen-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	cgen-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	cgen-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	cgen-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	cgen-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	cgen-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	cgen-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	cgen-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	cgen-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	cgen-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	cgen-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	cgen-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	cgen-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	cgen-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	cgen-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	cgen-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	cgen-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	cgen-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	cgen-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	cgen-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	cgen-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	cgen-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	cgen-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	cgen-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	cgen-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	cgen-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	cgen-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	cgen-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	cgen-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	cgen-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	cgen-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	cgen-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	cgen-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	cgen-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	cgen-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	cgen-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	cgen-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	cgen-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	cgen-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	cgen-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	cgen-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	cgen-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	cgen-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	cgen-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	cgen-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	cgen-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	cgen-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	cgen-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	cgen-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	cgen-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	cgen-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	cgen-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	cgen-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	cgen-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	cgen-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	cgen-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	cgen-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	cgen-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	cgen-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	cgen-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	cgen-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	cgen-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	cgen-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	cgen-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	cgen-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	cgen-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	cgen-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	cgen-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	cgen-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	cgen-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	cgen-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	cgen-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	cgen-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	cgen-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	cgen-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	cgen-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	cgen-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	cgen-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	cgen-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	cgen-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	cgen-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	cgen-snapshot-20091001:1.6
	arc-sim-20090309:1.4
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	cgen-snapshot-20090701:1.6
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	cgen-1_1-branch:1.5.0.2
	cgen-1_1-branchpoint:1.5
	sid-snapshot-20090601:1.4
	cgen-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	cgen-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	cgen-snapshot-20090401:1.4
	arc-insight_6_8-branch:1.4.0.4
	arc-insight_6_8-branchpoint:1.4
	sid-snapshot-20090301:1.4
	cgen-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	cgen-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	cgen-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	cgen-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	cgen-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	cgen-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	cgen-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	cgen-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	cgen-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	cgen-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	cgen-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	cgen-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	cgen-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	cgen-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	cgen-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	cgen-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	cgen-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	cgen-snapshot-20071001:1.4
	msnyder-fork-checkpoint-branch:1.4.0.2
	msnyder-fork-checkpoint-branchpoint:1.4
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.6
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	cgen-1-1-branch:1.2.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.14.17.09.56;	author devans;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.02.09.22.04.03;	author jimb;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.08.17.17.22;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.01.04.45.20;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.5.2.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@; Simulator generator entry point.
; This is invoked to build: arch.h, cpu-<cpu>.h, memops.h, semops.h, decode.h,
; decode.c, defs.h, extract.c, semantics.c, ops.c, model.c, mainloop.in.
;
; memops.h, semops.h, ops.c, mainloop.in are either deprecated or wip.
;
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
;
; This is a standalone script, we don't load anything until we parse the
; -s argument (keeps reliance off of environment variables, etc.).

; Load the various support routines.

(define (load-files srcdir)
  (load (string-append srcdir "/read.scm"))
  (load (string-append srcdir "/utils-sim.scm"))
  (load (string-append srcdir "/sim.scm"))
  (load (string-append srcdir "/sim-arch.scm"))
  (load (string-append srcdir "/sim-cpu.scm"))
  (load (string-append srcdir "/sim-model.scm"))
  (load (string-append srcdir "/sim-decode.scm"))
)

(define sim-arguments
  (list
   (list "-A" "file" "generate arch.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-arch.h)))
   (list "-B" "file" "generate arch.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-arch.c)))
   (list "-C" "file" "generate cpu-<cpu>.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-cpu.h)))
   (list "-U" "file" "generate cpu-<cpu>.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-cpu.c)))
   (list "-N" "file" "generate cpu-all.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-cpuall.h)))
   (list "-F" "file" "generate memops.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-mem-ops.h)))
   (list "-G" "file" "generate defs.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-defs.h)))
   (list "-P" "file" "generate semops.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-sem-ops.h)))
   (list "-T" "file" "generate decode.h in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-decode.h)))
   (list "-D" "file" "generate decode.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-decode.c)))
   (list "-E" "file" "generate extract.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-extract.c)))
   (list "-R" "file" "generate read.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-read.c)))
   (list "-W" "file" "generate write.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-write.c)))
   (list "-S" "file" "generate semantics.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-semantics.c)))
   (list "-X" "file" "generate sem-switch.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-sem-switch.c)))
   (list "-O" "file" "generate ops.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-ops.c)))
   (list "-M" "file" "generate model.c in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-model.c)))
   (list "-L" "file" "generate mainloop.in in <file>"
	 #f
	 (lambda (arg) (file-write arg cgen-mainloop.in)))
   )
)

; Kept global so it's available to the other .scm files.
(define srcdir ".")

; Scan argv for -s srcdir.
; We can't process any other args until we find the cgen source dir.
; The result is srcdir.
; We assume "-s" isn't the argument to another option.  Unwise, yes.
; Alternatives are to require it to be the first argument or at least preceed
; any option with a "-s" argument, or to put knowledge of the common argument
; set and common argument parsing code in every top level file.

(define (find-srcdir argv)
  (let loop ((argv argv))
    (if (null? argv)
	(error "`-s srcdir' not present, can't load cgen"))
    (if (string=? "-s" (car argv))
	(begin
	  (if (null? (cdr argv))
	      (error "missing srcdir arg to `-s'"))
	  (cadr argv))
	(loop (cdr argv))))
)

; Main routine, parses options and calls generators.

(define (cgen-sim argv)
  (let ()

    ; Find and set srcdir, then load all Scheme code.
    ; Drop the first argument, it is the script name (i.e. argv[0]).
    (set! srcdir (find-srcdir (cdr argv)))
    (set! %load-path (cons srcdir %load-path))
    (load-files srcdir)

    (display-argv argv)

    (cgen #:argv argv
	  #:app-name "sim"
	  #:arg-spec sim-arguments
	  #:init sim-init!
	  #:finish sim-finish!
	  #:analyze sim-analyze!)
    )
)

(cgen-sim (program-arguments))
@


1.5
log
@	* attr.scm: Removing trailing whitespace.
	* cgen-intrinsics.scm: Ditto.
	* cgen-sim.scm: Ditto.
	* cos.scm: Ditto.
	* enum.scm: Ditto.
	* guile.scm: Ditto.
	* sim.scm: Ditto.
@
text
@d7 1
a7 1
; Copyright (C) 2000 Red Hat, Inc.
@


1.5.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d7 1
a7 1
; Copyright (C) 2000, 2009 Red Hat, Inc.
@


1.4
log
@cgen/ChangeLog:
2005-02-09  Jim Blandy  <jimb@@redhat.com>

	* cgen-sim.scm (load-files): Don't load fixup.scm.  (See
	corresponding change in the sim/common directory.)

sim/common/ChangeLog:
2005-02-09  Jim Blandy  <jimb@@redhat.com>

	* Make-common.in (CGEN): Load guile.scm, and include a trailing
	'-s' argument.
	(CGEN_FLAGS_TO_PASS): Include single quotes around the reference
	to $(CGEN), to ensure that the command substitution happens where
	the variable is referenced in the submake, not when the submake's
	arguments are expanded.
	(cgen.sh): Be prepared for the 'cgen' argument to contain spaces.
	(arch, cpu, decode, cpu-decode, defs, desc): Place the name of the
	application Scheme script directly after ${cgen}; don't precede it
	with a -s.
@
text
@d104 1
a104 1
	(loop (cdr argv))))	
@


1.3
log
@2003-09-08  Dave Brolley  <brolley@@redhat.com>

        On behalf of Doug Evans <dje@@sebabeach.org>
        Pass in paths to input files, instead of assuming they live in
        $srcdir/cpu.  Plus misc. option processing cleanup.
        * cgen-doc.scm (doc-arguments): Make options strings not symbols.
        Add pre-process pass to all options.
        * cgen-gas.scm (gas-arguments): Ditto.
        * cgen-sid.scm (sim-arguments): Ditto.
        * cgen-sim.scm (sim-arguments): Ditto.
        * cgen-stest.scm (stest-arguments): Ditto.
        * cgen-opc.scm (opc-arguments): Ditto.  New argument -OPC.
        (-opc-file-path): New global.
        (opc-file-path): New fn.
        * opcodes.scm (read-cpu.opc): Replace srcdir,cpu args with opc-file.
        All callers updated.
        (gen-extra-cpu.h,gen-extra-cpu.c,gen-extra-opc.h,gen-extra-opc.c,
        gen-extra-asm.c,gen-extra-dis.c,gen-extra-ibld.h,gen-extra-ibld.c):
        Replace srcdir arg with opc-file.  All callers updated.
        * read.scm (-opt-spec-update): Delete.
        (opt-get-first-pass,opt-get-second-pass): New fns.
        (-cgen): Process application-specific arguments in two passes.
@
text
@a15 3
  ; Fix up Scheme to be what we use (guile is always in flux).
  (primitive-load-path (string-append srcdir "/fixup.scm"))

@


1.2
log
@2000-12-01  Ben Elliston  <bje@@redhat.com>

	* sim-cpu.scm (cgen-cpu.h): Only emit argbuf, scache and extract
	definitions if run without with-multipla-isa?.
	(cgen-defs.h): New function. Emit an ISA-specific defs file.
	* cgen-sim.scm (sim-arguments): Accept -G option to generate defs.
@
text
@d30 2
a31 1
   (list '-A "file" "generate arch.h in <file>"
d33 2
a34 1
   (list '-B "file" "generate arch.c in <file>"
d36 2
a37 1
   (list '-C "file" "generate cpu-<cpu>.h in <file>"
d39 2
a40 1
   (list '-U "file" "generate cpu-<cpu>.c in <file>"
d42 2
a43 1
   (list '-N "file" "generate cpu-all.h in <file>"
d45 2
a46 1
   (list '-F "file" "generate memops.h in <file>"
d48 2
a49 1
   (list '-G "file" "generate defs.h in <file>"
d51 2
a52 1
   (list '-P "file" "generate semops.h in <file>"
d54 2
a55 1
   (list '-T "file" "generate decode.h in <file>"
d57 2
a58 1
   (list '-D "file" "generate decode.c in <file>"
d60 2
a61 1
   (list '-E "file" "generate extract.c in <file>"
d63 2
a64 1
   (list '-R "file" "generate read.c in <file>"
d66 2
a67 1
   (list '-W "file" "generate write.c in <file>"
d69 2
a70 1
   (list '-S "file" "generate semantics.c in <file>"
d72 2
a73 1
   (list '-X "file" "generate sem-switch.c in <file>"
d75 2
a76 1
   (list '-O "file" "generate ops.c in <file>"
d78 2
a79 1
   (list '-M "file" "generate model.c in <file>"
d81 2
a82 1
   (list '-L "file" "generate mainloop.in in <file>"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
; decode.c, extract.c, semantics.c, ops.c, model.c, mainloop.in.
d42 2
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
