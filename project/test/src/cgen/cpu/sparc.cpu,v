head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	cgen-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	cgen-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	cgen-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	cgen-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	cgen-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	cgen-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	cgen-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	cgen-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	cgen-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	cgen-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	cgen-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	cgen-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	cgen-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	cgen-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	cgen-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	cgen-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	cgen-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	cgen-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	cgen-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	cgen-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	cgen-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	cgen-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	cgen-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	cgen-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	cgen-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	cgen-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	cgen-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	cgen-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	cgen-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	cgen-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	cgen-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	cgen-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	cgen-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	cgen-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	cgen-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	cgen-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	cgen-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	cgen-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	cgen-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	cgen-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	cgen-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	cgen-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	cgen-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	cgen-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	cgen-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	cgen-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	cgen-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	cgen-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	cgen-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	cgen-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	cgen-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	cgen-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	cgen-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	cgen-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	cgen-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	cgen-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	cgen-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	cgen-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	cgen-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	cgen-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	cgen-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	cgen-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	cgen-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	cgen-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	cgen-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	cgen-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	cgen-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	cgen-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	cgen-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	cgen-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	cgen-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	cgen-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	cgen-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	cgen-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	cgen-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	cgen-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	cgen-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	cgen-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	cgen-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	cgen-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	cgen-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	cgen-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	cgen-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	cgen-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	cgen-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	cgen-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	cgen-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	cgen-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	cgen-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	cgen-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	cgen-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	cgen-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	cgen-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	cgen-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	cgen-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	cgen-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	cgen-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	cgen-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	cgen-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	cgen-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	cgen-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	cgen-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	cgen-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	cgen-snapshot-20091001:1.2
	arc-sim-20090309:1.1
	sid-snapshot-20090901:1.2
	cgen-snapshot-20090901:1.2
	sid-snapshot-20090801:1.1
	cgen-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	cgen-snapshot-20090701:1.1
	dje-cgen-play1-branch:1.1.0.88
	dje-cgen-play1-branchpoint:1.1
	cgen-1_1-branch:1.1.0.86
	cgen-1_1-branchpoint:1.1
	sid-snapshot-20090601:1.1
	cgen-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	cgen-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	cgen-snapshot-20090401:1.1
	arc-insight_6_8-branch:1.1.0.84
	arc-insight_6_8-branchpoint:1.1
	sid-snapshot-20090301:1.1
	cgen-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	cgen-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	cgen-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	cgen-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	cgen-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	cgen-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	cgen-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	cgen-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	cgen-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	cgen-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	cgen-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	cgen-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	cgen-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	cgen-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	cgen-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	cgen-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	cgen-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	cgen-snapshot-20071001:1.1
	msnyder-fork-checkpoint-branch:1.1.0.82
	msnyder-fork-checkpoint-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.78
	gdb-csl-arm-20051020-branchpoint:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.80
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.76
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.74
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.72
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.70
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.68
	drow_intercu-20040221-branchpoint:1.1
	cagney_bfdfile-20040213-branch:1.1.0.66
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.64
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.62
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.60
	cagney_x86i386-20030821-branch:1.1.0.58
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.56
	gdb_6_0-2003-06-23-branchpoint:1.1
	jimb-ppc64-linux-20030613-branch:1.1.0.54
	jimb-ppc64-linux-20030613-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.52
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.50
	cagney_writestrings-20030508-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.48
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.46
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.44
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.42
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	kettenis_i386newframe-20030406-branch:1.1.0.40
	kettenis_i386newframe-20030406-branchpoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.38
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.36
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.34
	cagney_lazyid-20030317-branchpoint:1.1
	kettenis-i386newframe-20030316-mergepoint:1.1
	offbyone-20030313-branch:1.1.0.32
	offbyone-20030313-branchpoint:1.1
	kettenis-i386newframe-20030308-branch:1.1.0.30
	kettenis-i386newframe-20030308-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.28
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.26
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.24
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.22
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.20
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.18
	gdb_5_3-branch:1.1.0.16
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.14
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.12
	readline_4_3-import-branchpoint:1.1
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.10
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.8
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.6
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.4
	gdb_5_2-2002-03-03-branchpoint:1.1
	cygnus_cvs_20020108_pre:1.1
	cgen-1-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.05.12.45.47;	author bje;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@; SPARC CPU description.  -*- Scheme -*-
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; Notes:
; - sparc64 support wip
; - fp support todo
; - source file layout wip
; - cpu family layout wip
; - page numbers refered to here are to the sparc architecture reference
;   manuals (v8,v9).

(define-rtl-version 0 8)

(include "simplify.inc")

(define-arch
  (name sparc)
  (comment "Sun SPARC architecture")
  (insn-lsb0? #t)
  ; This list isn't currently intended to be identical to BFD's sparc mach
  ; list.  In time if and when there's a need.
  ; While following the goal of incremental complication, v6,v7,sparclet don't
  ; appear here either.
  (machs sparc-v8 sparclite sparc-v9 sparc-v9a)
  ;(default-mach sparc-v8)
  (isas sparc)
)

; Macros to simplify MACH attribute specification.
(define-pmacro (MACH32) (MACH sparc-v8,sparclite))
(define-pmacro (MACH64) (MACH sparc-v9,sparc-v9a))

; Attribute to simplify machine specific RTL.
(define-attr
  (type boolean)
  (name ARCH64)
  (comment "`true' for sparc64 machs")
)

(define-isa
  (name sparc)
  (base-insn-bitsize 32) ; number of bits that can be initially fetched
  ; Initial bitnumbers to decode insns by.
  (decode-assist (31 30 24 23 22 21 20 19)) ; 0 1 7 8 9 10 11 12
)

; The instruction fetch/execute cycle.
; This is split into two parts as sometimes more than one instruction is
; decoded at once.
; The `const 0' argument to decode/execute is used to distinguish
; multiple instructions processed at the same time (e.g. m32r).
;
; ??? This is wip, and not currently used.
; ??? To be moved into define-arch and define-cpu.
; ??? It might simplify things to separate the execute process from the
; one that updates the PC.

; This is how to fetch and extract the fields of an instruction.

;(define-extract
;  (sequence ((USI insn))
;	    (set-quiet insn (ifetch: USI pc))
;	    (decode pc insn (const 0))
;	    )
;)

; This is how to execute an extracted instruction.

;(define-execute
;  (sequence ((AI new_pc))
;	    (set-quiet new_pc (execute AI (const 0)))
;	    ; QI mode means just do an assignment, not a jump.
;	    ; FIXME: VOID also means something special.  Perhaps there's a way
;	    ; to use a mode other than QI (WI?) and have something cleaner?
;	    (if (attr: HOSTINT insn (const 0) DELAY-SLOT)
;		(if (andif (attr: BI insn (const 0) ANNUL) h-annul-p)
;		    (c-call "do_annul")
;		    (sequence () ; in delay slot
;			      (set-quiet QI pc h-npc)
;			      (set-quiet AI h-npc new_pc)))
;		(sequence () ; not in delay slot
;			  (set-quiet QI pc h-npc)
;			  (set-quiet AI h-npc (add new_pc (const 4))))
;	    ))
;)

; Instruction fields.

(dnf f-op        "op"        () 31 2)
(dnf f-op2       "op2"       () 24 3)
(dnf f-op3       "op3"       () 24 6)
(dnf f-rs1       "rs1"       () 18 5)
(dnf f-rs2       "rs2"       () 4 5)
(dnf f-rd        "rd"        () 29 5)
(dnf f-rd-res    "rd"        (RESERVED) 29 5)
(dnf f-i         "i"         () 13 1)
(df  f-simm13    "simm13"    () 12 13 INT #f #f)
(dnf f-imm22     "imm22"     () 21 22)
(define-ifield (name f-hi22) (comment "hi22") (attrs)
  (start 21) (length 22)
  ; shifting done elsewhere
  ;(encode (value pc) (srl WI value (const 10)))
  ;(decode (value pc) (sll WI value (const 10)))
)
(dnf f-a         "a"         () 29 1)
(dnf f-fmt2-cond "fmt2 cond" () 28 4)
(df f-disp22     "disp22"    (PCREL-ADDR) 21 22 INT
    ((value pc) (sra WI (sub WI value pc) (const WI 2)))
    ((value pc) (add WI (sll WI value (const WI 2)) pc)))
(df f-disp30     "disp30"    (PCREL-ADDR) 29 30 INT
    ((value pc) (sra WI (sub WI value pc) (const WI 2)))
    ((value pc) (add WI (sll WI value (const WI 2)) pc)))
(dnf f-opf       "opf"       () 13 9)
(dnf f-res-12-8  "reserved bits of simm13 field when i=0" (RESERVED) 12 8)
(dnf f-simm10    "simm10"    () 9 10)
(dnf f-fmt2-cc   "cc"        () 21 2)
(dnf f-fmt3-cc   "fmt3 cc"   () 26 2)
(dnf f-x         "x"         () 12 1)
(dnf f-shcnt32   "shcnt32"   () 4 5)
(dnf f-fcn       "fcn"       () 29 5)
(dnf f-imm-asi   "asi"       () 12 8)
(dnf f-asi       "asi"       () 12 8)
(dnf f-res-asi   "reserved bits in asi position" (RESERVED) 12 8)
(dnf f-fmt4-cc   "fmt4 cc"   () 12 2)
(dnf f-soft-trap "soft trap" () 6 7)
(dnf f-opf-low5  "opf low5"  () 9 5)
(dnf f-opf-low6  "opf low6"  () 10 6)
(dnf f-opf-cc    "cc"        () 13 3)

; Enums of opcodes, special insn values, etc.
; ??? Some of this to be moved and/or split up into sparc{32,64}.cpu.

(define-normal-insn-enum insn-op
  "main insn opcode field, v8 page ???, v9 page 267"
  () OP_ f-op
  ; order is important, the numbers here are actually part of symbols
  ; (e.g. OP_0, OP_1, OP_2, OP_3) so they must be strings.
  ("0" "1" "2" "3")
)

(define-normal-insn-enum insn-op2
  "op2 insn type, v8 page ???, v9 page 267"
  () OP2_ f-op2
  ; order is important
  ; ??? some of these are for v9 only (ok?)
  (UNIMP BPCC BICC BPR SETHI FBPFCC FBFCC RESERVED)
)

(define-normal-insn-enum insn-fmt2
  "op=2 op3 values, v8 page ??, v9 page 268"
  () OP3_ f-op3
  (
   (ADD 0) (ADDCC 16) ; v9 page 135
   (ADDX 8) (ADDXCC 24) ; v8 page ??
   (ADDC 8 ARCH64) (ADDCCC 24 ARCH64) ; v9 page 135
   (SUB 4) (SUBCC 20) ; v9 page 230
   (SUBX 12) (SUBXCC 28) ; v8 page ??
   (SUBC 12 ARCH64) (SUBCCC 28 ARCH64) ; v9 page 230
   (AND 1) (ANDCC 17) (ANDN 5) (ANDNCC 21)
   (OR 2) (ORCC 18) (ORN 6) (ORNCC 22)
   (XOR 3) (XORCC 19) (XNOR 7) (XNORCC 23)
   (SLL #x25) (SRL #x26) (SRA #x27)
   (MULSCC #x24 !ARCH64) ; v8 page 112
   (UMUL #xa) (SMUL #xb) (UMULCC #x1a) (SMULCC #x1b) ; v8 page 113
   (UDIV #xe) (SDIV #xf) (UDIVCC #x1e) (SDIVCC #x1f)

   (FPOPS1 #x34) (FPOPS2 #x35)

   (SAVE #x3c) (RESTORE #x3d) ; v8 page 117
   (RETT #x39) ; v8 page 127
   (JMPL #x38) ; v8 page 126

   (RDY #x28) (RDASR #x28) ; v8 page 131
   (WRY #x30) (WRASR #x30) ; v8 page 133

   ; v8 page 131
   (RDPSR #x29 !ARCH64) (RDWIM #x2a !ARCH64) (RDTBR #x2b !ARCH64)
   ; v8 page 133
   (WRPSR #x31 !ARCH64) (WRWIM #x32 !ARCH64) (WRTBR #x33 !ARCH64)

   ; v9 page 155
   (DONE_RETRY #x3e ARCH64)
   ; v9 page 165
   (FLUSH #x3b ARCH64)
   ; v9 page 167
   (FLUSHW #x2b ARCH64)
   ; v9 page 169
   (IMPDEP1 #x36 ARCH64) (IMPDEP2 #x37 ARCH64)
   ; v9 page 183
   (MEMBAR #x28 ARCH64)
   ; v9 page 191
   (MOVCC #x2c ARCH64)
   )
)

(define-normal-insn-enum insn-fmt3
  "op=3 op3 values, v8 page ???, v9 page 269"
  () OP3_ f-op3
  (; order is important
   LDUW LDUB LDUH LDD
   STW STB STH STD
   (LDSW - ARCH64) LDSB LDSH (LDX - ARCH64)
   RES12 LDSTUB (STX - ARCH64) SWAP

   LDUWA LDUBA LDUHA LDDA
   STWA STBA STHA STDA
   (LDSWA - ARCH64) LDSBA LDSHA (LDXA - ARCH64)
   RES28 LDSTUBA (STXA - ARCH64) SWAPA

   LDF (LDFSR #x21) (LDXFSR #x21) LDQF LDDF
   STF (STFSR #x25) (STXFSR #x25) STQF STDF
   RES40 RES41 RES42 RES43
   RES44 PREFETCH RES46 RES47

   LDFA RES49 LDQFA LDDFA
   STFA RES53 STQFA STDFA
   RES56 RES57 RES58 RES59
   (CASA - ARCH64) (PREFETCHA - ARCH64) (CASXA - ARCH64) RES63
   )
)

(define-normal-insn-enum rd-insn
  "rd insn type"
  () RD_ f-rd
  (; order is important
   Y RES1 CCR ASI TICK PC FPRS ASR7
   ASR8 ASR9 ASR10 ASR11 ASR12 ASR13 ASR14 MEMBAR_STBAR
   )
)

(define-normal-insn-enum wr-insn
  "wr insn type"
  () WR_ f-rd
  (; order is important
   Y RES1 CCR ASI ASR4 ASR5 FPRS ASR7
   ASR8 ASR9 ASR10 ASR11 ASR12 ASR13 ASR14 SIGM
   )
)

; The standard condition code tests.

(define-normal-insn-enum cc-tests
  "condition code tests, v8 page ???, v9 page 144"
  () "" f-fmt2-cond
  (
   (CC_A 8) ; always
   (CC_N 0) ; never
   (CC_NE 9) ; not equal
   (CC_NZ 9) ; not zero
   (CC_E 1) ; equal
   (CC_Z 1) ; zero
   (CC_G 10) ; greater
   (CC_LE 2) ; less or equal
   (CC_GE 11) ; greater or equal
   (CC_L 3) ; less
   (CC_GU 12) ; unsigned greater
   (CC_LEU 4) ; unsigned less or equal
   (CC_CC 13) ; carry clear
   (CC_GEU 13) ; unsigned greater or equal
   (CC_CS 5) ; carry set
   (CC_LU 5) ; unsigned less than
   (CC_POS 14) ; positive
   (CC_NEG 6) ; negative
   (CC_VC 15) ; overflow clear
   (CC_VS 7) ; overflow set
   )
)

; Floating point condition code tests.

(define-normal-insn-enum fcc-tests
  "condition code tests, v8 page ???, v9 page 138"
  () "FCOND_" f-fmt2-cond
  (
   (A 8) ; always
   (N 0) ; never
   (U 7) ; unordered
   (G 6) ; greater
   (UG 5) ; unordered or greater
   (L 4) ; less
   (UL 3) ; unordered or less
   (LG 2) ; less or greater
   (NE 1) ; less or greater or unordered (not equal)
   (E 9) ; equal
   (UE 10) ; unordered or equal
   (GE 11) ; greater or equal
   (UGE 12) ; unordered or greater or equal
   (LE 13) ; less or equal
   (ULE 14) ; unordered or less or equal
   (O 15) ; equal or less or greater (ordered)
   )
)

(define-normal-insn-enum fcc-value "fcc value" () FCC_ f-fmt2-cc
  (EQ LT GT UN)
)

(define-normal-insn-enum fpop1
  "fp op 1, v8 page ???, v9 page 270"
  () FPOPS1_ f-opf
  (
   (FMOVS 1) (FMOVD 2) (FMOVQ 3)
   (FNEGS 5) (FNEGD 6) (FNEGQ 7)
   (FABSS 9) (FABSD 10) (FABSQ 11)
   (FSQRTS #x29) (FSQRTD #x2a) (FSQRTQ #x2b)
   (FADDS #x41) (FADDD #x42) (FADDQ #x43)
   (FSUBS #x45) (FSUBD #x46) (FSUBQ #x47)
   (FMULS #x49) (FMULD #x4a) (FMULQ #x4b)
   (FDIVS #x4d) (FDIVD #x4e) (FDIVQ #x4f)
   (FSMULD #x69) (FDMULQ #x6e)
   (FSTOX #x81) (FDTOX #x82) (FQTOX #x83)
   (FXTOS #x84) (FXTOD #x88) (FXTOQ #x8c)
   (FITOS #xc4) (FDTOS #xc6) (FQTOS #xc7)
   (FITOD #xc8) (FSTOD #xc9) (FQTOD #xcb)
   (FITOQ #xcc) (FSTOQ #xcd) (FDTOQ #xce)
   (FSTOI #xd1) (FDTOI #xd2) (FQTOI #xd3)
   (MAX 511)
   )
)

; ??? check MACH64, are all v9 only?

(define-normal-insn-enum fpop2
  "fp op 2, v9 page 271"
  (ARCH64) FPOPS2_ f-opf
  (
   (FCMPS #x51) (FCMPD #x52) (FCMPQ #x53)
   (FCMPSE #x55) (FCMPDE #x56) (FCMPQE #x57)
   (FMOVSFCC0 #x01) (FMOVDFCC0 #x02) (FMOVQFCC0 #x03)
   (FMOVSFCC1 #x41) (FMOVDFCC1 #x42) (FMOVQFCC1 #x43)
   (FMOVSFCC2 #x81) (FMOVDFCC2 #x82) (FMOVQFCC2 #x83)
   (FMOVSFCC3 #xc1) (FMOVDFCC3 #xc2) (FMOVQFCC3 #xc3)
   (FMOVSICC #x101) (FMOVDICC #x102) (FMOVQICC #x103)
   (FMOVSXCC #x181) (FMOVDXCC #x182) (FMOVQXCC #x183)
   (FMOVRZS #x25) (FMOVRZD #x26) (FMOVRZQ #x27)
   (FMOVRLEZS #x45) (FMOVRLEZD #x46) (FMOVRLEZQ #x47)
   (FMOVRLZS #x65) (FMOVRLZD #x66) (FMOVRLZQ #x67)
   (FMOVRNZS #xa5) (FMOVRNZD #xa6) (FMOVRNZQ #xa7)
   (FMOVRGZS #xc5) (FMOVRGZD #xc6) (FMOVRGZQ #xc7)
   (FMOVRGEZS #xe5) (FMOVRGEZD #xe6) (FMOVRGEZQ #xe7)
   (MAX 511)
   )
)

; Hardware pieces.
; These are common to all (or most all) machs.

(dnh h-pc "program counter" (PC PROFILE) (pc) () () ())

(define-hardware
  (name h-npc)
  (comment "next pc")
  (attrs PC)
  (type register WI)
)

(define-keyword
  (name gr-names)
  (enum-prefix H-GR-)
  (name-prefix "%")
  (values (fp 30) (sp 14)
	  (g0 0) (g1 1) (g2 2) (g3 3) (g4 4) (g5 5) (g6 6) (g7 7)
	  (o0 8) (o1 9) (o2 10) (o3 11) (o4 12) (o5 13) (o6 14) (o7 15)
	  (l0 16) (l1 17) (l2 18) (l3 19) (l4 20) (l5 21) (l6 22) (l7 23)
	  (i0 24) (i1 25) (i2 26) (i3 27) (i4 28) (i5 29) (i6 30) (i7 31)
	  )
)

; The general registers are accessed via a level of indirection to handle
; the register windows.  h-gr provides the top level entry point which is
; indirected through various means depending upon the register window
; implementation of the day.  To be solidified in time.
;
; ??? Separation of h-gr for sparc32/64 is currently an experiment.

(define-hardware
  (name h-gr) ; h-gr32
  ;(semantic-name h-gr)
  (comment "sparc32 general registers")
  (attrs PROFILE VIRTUAL (MACH32))
  (type register SI (32))
  (indices extern-keyword gr-names) ; keyword "%" (h-gr-indices))
  (get (index) (c-call SI "GET_H_GR_RAW" index))
  (set (index newval) (c-call VOID "SET_H_GR_RAW" index newval))
)

(define-hardware
  (name h-gr) ; h-gr64
  ;(semantic-name h-gr)
  (comment "sparc64 general registers")
  (attrs PROFILE VIRTUAL (MACH64))
  (type register DI (32))
  (indices extern-keyword gr-names) ; keyword "%" (h-gr-indices))
  (get (index) (c-call SI "GET_H_GR_RAW" index))
  (set (index newval) (c-call VOID "SET_H_GR_RAW" index newval))
)

(define-hardware
  (name h-a)
  (comment "annul bit")
  (type immediate (UINT 1))
  (values keyword "" (("" 0) (",a" 1)))
)

; The condition code bits.
(dsh h-icc-c "icc carry bit"    () (register BI))
(dsh h-icc-n "icc negative bit" () (register BI))
(dsh h-icc-v "icc overflow bit" () (register BI))
(dsh h-icc-z "icc zero bit"     () (register BI))

; The extended condition code bits of v9.
(dsh h-xcc-c "xcc carry bit"    (ARCH64) (register BI))
(dsh h-xcc-n "xcc negative bit" (ARCH64) (register BI))
(dsh h-xcc-v "xcc overflow bit" (ARCH64) (register BI))
(dsh h-xcc-z "xcc zero bit"     (ARCH64) (register BI))

; Misc. regs.

; h-y is virtual because the real value is kept in the asr array.
; ??? wip is get/set fields
(define-hardware
  (name h-y)
  (comment "y register")
  (attrs VIRTUAL)
  (type register WI)
  (get () (reg WI h-asr 0))
  (set (newval) (set (reg WI h-asr 0) newval))
)

(dnh h-asr "ancilliary state registers" ()
     (register WI (32))
     (keyword "%" 
	      (
	       (y 0)
	       (asr0 0) (asr1 1) (asr2 2) (asr3 3)
	       (asr4 4) (asr5 5) (asr6 6) (asr7 7)
	       (asr8 8) (asr9 9) (asr10 10) (asr11 11)
	       (asr12 12) (asr13 13) (asr14 14) (asr15 15)
	       (asr16 16) (asr17 17) (asr18 18) (asr19 19)
	       (asr20 20) (asr21 21) (asr22 22) (asr23 23)
	       (asr24 24) (asr25 25) (asr26 26) (asr27 27)
	       (asr28 28) (asr29 29) (asr30 30) (asr31 31)
	       ))
     ()
     ()
) ; FIXME:wip

; This assists the simulator engine, not part of the architecture.
; ??? There should be an attribute for these critters.
(dsh h-annul-p "annul next insn? - assists execution" () (register BI))

; %lo,%hi,etc.

(dnh h-lo10 "signed low 10 bits" ()
     (immediate (UINT 10)) ; integer (UNSIGNED) 10))
     () () ()
)

(dnh h-lo13 "signed low 13 bits" ()
     (immediate (INT 13)) ; integer (SIGNED) 13))
     () () ()
)

(dnh h-hi22 "unsigned high 22 bits" ()
     (immediate (UINT 22)) ; integer (UNSIGNED) 22))
     () () ()
)

; Instruction Operands.

(dnop rs1 "source register 1" () h-gr f-rs1)
(dnop rs2 "source register 2" () h-gr f-rs2)
(dnop rd "destination register" () h-gr f-rd)

; double-reg args to ldd,std

(define-operand
  (name rdd)
  (comment "rd as two registers")
  (type h-gr)
  (index f-rd)
;  (get (args self index)
;       (mode (DI)
;	 (eq (and index (const 1)) (const 0)) ; predicate, even regs only
;	 (make: DI SI
;		(reg h-gr index)
;		(reg h-gr (add index (const 1)))))
;       )
;  (set (args self index newval)
;       (mode (DI)
;	 (eq (and index (const 1)) (const 0)) ; predicate, even regs only
;	 (sequence ()
;		   (set (reg h-gr index)
;			(slice: SI DI newval (const 0)))
;		   (set (reg h-gr (add index (const 1)))
;			(slice: SI DI newval (const 1)))))
;       )
;  (asm (parse "rdd"))
)

(dnop simm13 "13 bit signed immediate" () h-lo13 f-simm13)
(dnop imm22 "22 bit unsigned immediate" () h-uint f-imm22)

(dnop a "annul bit" () h-a f-a)

(dnop icc-c "carry flag"    (SEM-ONLY) h-icc-c f-nil)
(dnop icc-v "overflow flag" (SEM-ONLY) h-icc-v f-nil)
(dnop icc-n "negative flag" (SEM-ONLY) h-icc-n f-nil)
(dnop icc-z "zero flag"     (SEM-ONLY) h-icc-z f-nil)

(dnop xcc-c "extended carry flag"    (SEM-ONLY) h-xcc-c f-nil)
(dnop xcc-v "extended overflow flag" (SEM-ONLY) h-xcc-v f-nil)
(dnop xcc-n "extended negative flag" (SEM-ONLY) h-xcc-n f-nil)
(dnop xcc-z "extended zero flag"     (SEM-ONLY) h-xcc-z f-nil)

; These two map h-asr to f-rs1 and f-rd so we have something to use in
; the assembler spec, insn format, and semantic fields.
; FIXME: 'twould be nice if we could do this mapping on the fly in the
; define-insn (i.e. the old (%0,%1 stuff)).
(dnop rdasr "read asr operand" () h-asr f-rs1)
(dnop wrasr "write asr operand" () h-asr f-rd)

(dnop asi "asi field" () h-uint f-asi)

(dnop disp22 "22 bit displacement" () h-iaddr f-disp22)
(dnop disp30 "30 bit displacement" () h-iaddr f-disp30)

(define-operand
  (name lo10)
  (comment "10 bit signed immediate, for %lo()")
  (type h-lo10)
  (index f-simm10)
  (handlers (parse "lo10"))
)
(define-operand
  (name lo13)
  (comment "13 bit signed immediate, for %lo()")
  (type h-lo13)
  (index f-simm13)
  (handlers (parse "lo13"))
)
(define-operand
  (name hi22)
  (comment "22 bit unsigned immediate, for %hi()")
  (type h-hi22)
  (index f-hi22)
  (handlers (parse "hi22") (print "hi22"))
)

; SPARC specific instruction attributes used:

(define-attr
  (for insn)
  (type boolean)
  (name TRAP)
  (comment "insn is a trap insn")
)

(define-attr
  (for insn)
  (type boolean)
  (name V9-DEPRECATED)
  (comment "insn is deprecated in v9")
)

; Globally useful macros.

; CC is one of icc,xcc.
; ??? Might want canonical forms of these.
; ??? Maybe move this to a library.
; ??? bitfields still on todo list
(define-pmacro (test-always cc) (const 1))
(define-pmacro (test-never cc)  (const 0))
(define-pmacro (test-ne cc)     (not (.sym cc -z)))
(define-pmacro (test-eq cc)     (.sym cc -z))
(define-pmacro (test-gt cc)     (not (or (.sym cc -z) (xor (.sym cc -n) (.sym cc -v)))))
(define-pmacro (test-le cc)     (or (.sym cc -z) (xor (.sym cc -n) (.sym cc -v))))
(define-pmacro (test-ge cc)     (not (xor (.sym cc -n) (.sym cc -v))))
(define-pmacro (test-lt cc)     (xor (.sym cc -n) (.sym cc -v)))
(define-pmacro (test-gtu cc)    (not (or (.sym cc -c) (.sym cc -z))))
(define-pmacro (test-leu cc)    (or (.sym cc -c) (.sym cc -z)))
(define-pmacro (test-geu cc)    (not (.sym cc -c)))
(define-pmacro (test-ltu cc)    (.sym cc -c))
(define-pmacro (test-pos cc)    (not (.sym cc -n)))
(define-pmacro (test-neg cc)    (.sym cc -n))
(define-pmacro (test-vc cc)     (not (.sym cc -v)))
(define-pmacro (test-vs cc)     (.sym cc -v))

(define-pmacro (uncond-br-sem test cc)
  (delay (const 1)
	 (sequence ()
		   (if (test cc)
		       (set pc disp22))
		   (annul a)))
)
(define-pmacro (cond-br-sem test cc)
  (delay (const 1)
	 (if (test cc)
	     (set pc disp22)
	     (annul a)))
)

; The rest is broken out into various files.

(if (keep-mach? (sparc-v8 sparclite))
    (include "sparc32.cpu"))

(if (keep-mach? (sparc-v9 sparc-v9a))
    (include "sparc64.cpu"))

(include "sparccom.cpu")
(include "sparcfpu.cpu")
@


1.1
log
@2001-07-05  Ben Elliston  <bje@@redhat.com>

	* README: Update.

	* read.scm (include): Include files from srcdir/cpu.
	(-cgen): Likewise for loading .cpu files.
	* *.cpu: Move all cpu descriptions into cpu subdirectory.
	* *.opc: Likewise.
	* simplify.inc: Likewise.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d14 2
d361 2
a362 2
  (print-name h-gr)
  (prefix "%")
@

