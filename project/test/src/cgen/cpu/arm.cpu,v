head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	cgen-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	cgen-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	cgen-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	cgen-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	cgen-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	cgen-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	cgen-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	cgen-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	cgen-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	cgen-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	cgen-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	cgen-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	cgen-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	cgen-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	cgen-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	cgen-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	cgen-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	cgen-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	cgen-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	cgen-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	cgen-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	cgen-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	cgen-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	cgen-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	cgen-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	cgen-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	cgen-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	cgen-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	cgen-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	cgen-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	cgen-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	cgen-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	cgen-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	cgen-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	cgen-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	cgen-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	cgen-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	cgen-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	cgen-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	cgen-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	cgen-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	cgen-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	cgen-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	cgen-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	cgen-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	cgen-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	cgen-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	cgen-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	cgen-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	cgen-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	cgen-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	cgen-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	cgen-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	cgen-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	cgen-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	cgen-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	cgen-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	cgen-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	cgen-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	cgen-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	cgen-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	cgen-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	cgen-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	cgen-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	cgen-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	cgen-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	cgen-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	cgen-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	cgen-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	cgen-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	cgen-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	cgen-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	cgen-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	cgen-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	cgen-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	cgen-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	cgen-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	cgen-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	cgen-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	cgen-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	cgen-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	cgen-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	cgen-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	cgen-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	cgen-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	cgen-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	cgen-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	cgen-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	cgen-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	cgen-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	cgen-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	cgen-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	cgen-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	cgen-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	cgen-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	cgen-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	cgen-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	cgen-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	cgen-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	cgen-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	cgen-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	cgen-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	cgen-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	cgen-snapshot-20091001:1.3
	arc-sim-20090309:1.2
	sid-snapshot-20090901:1.3
	cgen-snapshot-20090901:1.3
	sid-snapshot-20090801:1.2
	cgen-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	cgen-snapshot-20090701:1.2
	dje-cgen-play1-branch:1.2.0.36
	dje-cgen-play1-branchpoint:1.2
	cgen-1_1-branch:1.2.0.34
	cgen-1_1-branchpoint:1.2
	sid-snapshot-20090601:1.2
	cgen-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	cgen-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	cgen-snapshot-20090401:1.2
	arc-insight_6_8-branch:1.2.0.32
	arc-insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	cgen-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	cgen-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	cgen-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	cgen-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	cgen-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	cgen-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	cgen-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	cgen-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	cgen-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	cgen-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	cgen-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	cgen-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	cgen-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	cgen-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	cgen-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	cgen-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	cgen-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	cgen-snapshot-20071001:1.2
	msnyder-fork-checkpoint-branch:1.2.0.30
	msnyder-fork-checkpoint-branchpoint:1.2
	gdb-csl-arm-20051020-branch:1.2.0.26
	gdb-csl-arm-20051020-branchpoint:1.2
	drow_intercu-merge-20040921:1.2
	drow_intercu-merge-20040915:1.2
	jimb-gdb_6_2-e500-branch:1.2.0.28
	jimb-gdb_6_2-e500-branchpoint:1.2
	gdb_6_2-20040730-release:1.2
	gdb_6_2-branch:1.2.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.2
	gdb_6_1_1-20040616-release:1.2
	gdb_6_1-2004-04-05-release:1.2
	drow_intercu-merge-20040402:1.2
	drow_intercu-merge-20040327:1.2
	ezannoni_pie-20040323-branch:1.2.0.22
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.20
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow_intercu-20040221-branch:1.2.0.16
	drow_intercu-20040221-branchpoint:1.2
	cagney_bfdfile-20040213-branch:1.2.0.14
	cagney_bfdfile-20040213-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	cagney_bigcore-20040122-branch:1.2.0.12
	cagney_bigcore-20040122-branchpoint:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	gdb_6_0-2003-10-04-release:1.2
	kettenis_sparc-20030918-branch:1.2.0.10
	kettenis_sparc-20030918-branchpoint:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.8
	cagney_x86i386-20030821-branch:1.2.0.6
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.4
	gdb_6_0-2003-06-23-branchpoint:1.2
	jimb-ppc64-linux-20030613-branch:1.2.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.2
	cagney_convert-20030606-branch:1.1.0.52
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.50
	cagney_writestrings-20030508-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.48
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.46
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.44
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.42
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	kettenis_i386newframe-20030406-branch:1.1.0.40
	kettenis_i386newframe-20030406-branchpoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.38
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.36
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.34
	cagney_lazyid-20030317-branchpoint:1.1
	kettenis-i386newframe-20030316-mergepoint:1.1
	offbyone-20030313-branch:1.1.0.32
	offbyone-20030313-branchpoint:1.1
	kettenis-i386newframe-20030308-branch:1.1.0.30
	kettenis-i386newframe-20030308-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.28
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.26
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.24
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.22
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.20
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.18
	gdb_5_3-branch:1.1.0.16
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.14
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.12
	readline_4_3-import-branchpoint:1.1
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.10
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.8
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.6
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.4
	gdb_5_2-2002-03-03-branchpoint:1.1
	cygnus_cvs_20020108_pre:1.1
	cgen-1-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.10.21.22.03;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.05.12.45.47;	author bje;	state Exp;
branches
	1.1.20.1
	1.1.22.1;
next	;

1.1.20.1
date	2003.06.27.21.49.33;	author carlton;	state Exp;
branches;
next	;

1.1.22.1
date	2003.12.14.20.26.55;	author drow;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@; ARM CPU description.  -*- Scheme -*-
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

(define-rtl-version 0 8)

(include "simplify.inc")

(define-arch
  (name arm)
  (comment "Advanced RISC Machines (ARM)")
  (insn-lsb0? #t)
  (machs arm7tdmi)
  (isas arm thumb)
)

; ??? There should be an official rtx to do this.  Until then.
(define-pmacro (invalid-insn)
  (c-call BI "invalid_insn" pc) ; FIXME: Not VOID to workaround codegen bug.
)

(define-isa
  (name arm)
  (comment "ARM instruction set (32 bit insns)")
  (base-insn-bitsize 32)
  ; FIXME: wip. `f-cond' is currently defined in arm7.cpu.
  (condition f-cond
	     ; `cond-code' is the extracted value of `f-cond'
	     ; FIXME: wip
;	     (case BI cond-code
;		   ((COND_EQ) (reg h-zbit))
;		   ((COND_NE) (not (reg h-zbit)))
;		   ((COND_CS) (reg h-cbit))
;		   ((COND_CC) (not (reg h-cbit)))
;		   ((COND_MI) (reg h-nbit))
;		   ((COND_PL) (not (reg h-zbit)))
;		   ((COND_VS) (reg h-vbit))
;		   ((COND_VC) (not (reg h-vbit)))
;		   ((COND_HI) (and (reg h-cbit) (not (reg h-zbit))))
;		   ((COND_LS) (not (or (reg h-cbit) (reg h-zbit))))
;		   ((COND_GE) (eq (reg h-zbit) (reg h-vbit)))
;		   ((COND_LT) (ne (reg h-nbit) (reg h-vbit)))
;		   ((COND_GT) (and (not (reg h-zbit))
;				   (eq (reg h-nbit) (reg h-vbit))))
;		   ((COND_LE) (or (reg h-zbit)
;				  (ne (reg h-nbit) (reg h-vbit))))
;		   ((COND_AL) 1)
;		   (else (sequence BI () (invalid-insn) 1))))
	     (c-call BI "eval_cond" cond-code pc))
  (decode-assist (27 26 25 24 23 22 21))
  ; We can lengthen pbb's by breaking insns that set h-gr into those that set
  ; h-gr[15] (the pc), and those that don't.
  ; Other analysis of the isa will benefit from this, so this is recorded here
  ; rather than in a simulator specific file.
;;   (decode-splits
;;   ; split insns with field f-rd into f-rd == 15, f-rd != 15
;;   ; ??? To be made more general in time.
;;   (f-rd ; split on values of this field
;;    ()   ; no extra constraints
;;    ((no-pc-dest (.iota 15)) (pc-dest 15)) ; list of splits
;;    )
;;   )
  (setup-semantics (set-quiet (reg h-gr 15) (add pc (attr (current-insn) R15-OFFSET))))
)

(define-isa
  (name thumb)
  (comment "ARM Thumb instruction set (16 bit insns)")
  (base-insn-bitsize 16)
  (decode-assist (15 14 13 12 11 10 9 8))
  (setup-semantics (set-quiet (reg h-gr 15) (add pc 4)))
)

(define-cpu
  (name arm7f)
  (comment "ARM7")
  (endian either)
  (word-bitsize 32)
)

(define-mach
  (name arm7tdmi)
  (comment "ARM 7TDMI core")
  (cpu arm7f)
  (isas arm thumb)
)

(define-model
  (name arm710)
  (comment "ARM 710 microprocessor")
  (mach arm7tdmi)
  (unit u-exec "Execution Unit" ()
	1 1 ; issue done
	() () () ())
)

; IDOC attribute for instruction documentation.
; FIXME: Categorization is a bit tricky when alu ops can set the pc.

(define-attr
  (for insn)
  (type enum)
  (name IDOC)
  (comment "insn kind for documentation")
  (attrs META)
  (values
   (MEM - () "Memory")
   (ALU - () "ALU")
   (FPU - () "FPU")
   (BR - () "Branch")
   (PRIV - () "Priviledged")
   (MISC - () "Miscellaneous")
  )
)

; Hardware.

; The program counter is actually reg 15.
; But ... [there's always a "But ..." :-(] when referenced in instructions
; the value is either 8 or 12 beyond the address of the instruction in
; ARM mode and 4 beyond in Thumb mode.
; To handle this the program counter is treated as a separate register
; and r15 is set to the appropriate offset before executing each instruction.
; This seems like the simplest and most efficient way to handle this.

(define-hardware
  (name h-pc)
  (comment "ARM program counter (h-gr reg 15)")
  (attrs PC (ISA arm,thumb))
  (type pc)
  ; In ARM mode the bottom two bits read as zero.
  ; In Thumb mode the bottom bit reads as zero.
  ; This can be handled during gets, sets, or both.
  ; Handling this in sets seems best ('tis handled in only one place and the
  ; stored value is always correct - assuming all out-of-band sets are ok).
  ; ??? Might be possible to optimize out the test of tbit.  Later.
  (set (newval)
       (if (reg h-tbit)
	   (set (raw-reg SI h-pc) (and newval -2))
	   (set (raw-reg SI h-pc) (and newval -4))))
)

(define-keyword
  (name gr-names)
  (enum-prefix H-GR-)
  (values (pc 15) ; put this first so it is prefered over r15
	  (r0 0) (r1 1) (r2 2) (r3 3) (r4 4) (r5 5) (r6 6) (r7 7) 
	  (r8 8) (r9 9) (r10 10) (r11 11) (r12 12) (r13 13) (r14 14) (r15 15)
	  (sp 13) (lr 14))
)

(define-hardware 
  (name h-gr)
  (comment "General purpose registers")
  (attrs (ISA arm,thumb) CACHE-ADDR)
  (type register SI (16))
  (indices extern-keyword gr-names)
)

; Banked versions of h-gr.
; h-gr is always "active".  When a mode switch happens, the copies in h-gr
; are copied to their holding buffers, and new values are switched in.
; ??? The non-user-mode versions of these registers have special names which
; are just(?) aliases for the normal names.

(define-hardware
  (name h-gr-usr)
  (comment "user/system mode r8-r14 holding buffer")
  (attrs (ISA arm,thumb))
  (type register SI (7))
)
(define-hardware
  (name h-gr-fiq)
  (comment "fiq mode r8-r14 regs")
  (attrs (ISA arm,thumb))
  (type register SI (7))
)
(define-hardware
  (name h-gr-svc)
  (comment "supervisor mode r13-r14 regs")
  (attrs (ISA arm,thumb))
  (type register SI (2))
)
(define-hardware
  (name h-gr-abt)
  (comment "abort mode r13-r14 regs")
  (attrs (ISA arm,thumb))
  (type register SI (2))
)
(define-hardware
  (name h-gr-irq)
  (comment "irq mode r13-r14 regs")
  (attrs (ISA arm,thumb))
  (type register SI (2))
)
(define-hardware
  (name h-gr-und)
  (comment "undefined mode r13-r14 regs")
  (attrs (ISA arm,thumb))
  (type register SI (2))
)

; The condition code bits.

(dsh h-cbit "carry bit"    ((ISA arm,thumb)) (register BI))
(dsh h-nbit "negative bit" ((ISA arm,thumb)) (register BI))
(dsh h-vbit "overflow bit" ((ISA arm,thumb)) (register BI))
(dsh h-zbit "zerobit"      ((ISA arm,thumb)) (register BI))

(dnop cbit "carry bit"     ((ISA arm,thumb)) h-cbit f-nil)
(dnop nbit "negative bit"  ((ISA arm,thumb)) h-nbit f-nil)
(dnop vbit "overflow bit"  ((ISA arm,thumb)) h-vbit f-nil)
(dnop zbit "zero bit"      ((ISA arm,thumb)) h-zbit f-nil)

; The CPSR (current program status register).

(dsh h-ibit  "irq disable bit" ((ISA arm,thumb)) (register BI))
(dsh h-fbit  "fiq disable bit" ((ISA arm,thumb)) (register BI))

(define-hardware
  (name h-tbit)
  (comment "thumb bit")
  (attrs (ISA arm,thumb))
  (type register BI)
  (set (newval)
       (sequence ()
		 (c-call VOID "arm_tbit_set" newval)))
)

(define-keyword
  (name arm-mode)
  (comment "arm cpu states")
  (values (User #x10)
	  (FIQ  #x11)
	  (IRQ  #x12)
	  (Supervisor #x13)
	  (Abort #x17)
	  (Undefined #x1b)
	  (System #x1f)
	  )
)

(define-hardware
  (name h-mbits)
  (comment "m4,m3,m2,m1,m0")
  (attrs (ISA arm,thumb))
  (type register (UINT 5))
  (set (newval)
       (sequence ()
		 ; processor goes into an undefined state if bad value,
		 ; so do something similar
		 (case VOID newval
			((ARM-MODE-User ARM-MODE-FIQ ARM-MODE-IRQ
			  ARM-MODE-Supervisor ARM-MODE-Abort
			  ARM-MODE-Undefined ARM-MODE-System)
			 (nop))
			(else (error VOID "bad value for M4-M0")))
		 (c-call VOID "arm_mbits_set" newval)))
)

(define-hardware
  (name h-cpsr)
  (comment "Current Program Status Register")
  (attrs VIRTUAL (ISA arm,thumb))
  (type register SI) ; One CPSR register.
  (get ()
       ; ??? 'twould be nice if one `or' would do
       (or SI (sll (zext SI (reg BI h-nbit)) (const 31))
	    (or SI (sll (zext SI (reg BI h-zbit)) (const 30))
		 (or SI (sll (zext SI (reg BI h-cbit)) (const 29))
		      (or SI (sll (zext SI (reg BI h-vbit)) (const 28))
			   (or SI (sll (zext SI (reg BI h-ibit)) (const 7))
				(or SI (sll (zext SI (reg BI h-fbit)) (const 6))
				     (or SI (sll (zext SI (reg BI h-tbit)) (const 5))
					  (reg UINT h-mbits)))))))))
  (set (newval)
       (sequence ()
		 ; FIXME: Processor enters undefined state if software changes
		 ; tbit, so we should do something similar.
		 (set (reg h-nbit) (ne (and newval #x80000000) 0))
		 (set (reg h-zbit) (ne (and newval #x40000000) 0))
		 (set (reg h-cbit) (ne (and newval #x20000000) 0))
		 (set (reg h-vbit) (ne (and newval #x10000000) 0))
		 ; FIXME: user mode is not permitted to change ibit/fbit!
		 (set (reg h-ibit) (ne (and newval #x00000080) 0))
		 (set (reg h-fbit) (ne (and newval #x00000040) 0))
		 (set (reg h-tbit) (ne (and newval #x00000020) 0))
		 (set (reg h-mbits) (and newval #x1f))))
)

(define-hardware
  (name h-spsr-fiq)
  (comment "Saved Process Status Register during FIQ")
  (attrs (ISA arm,thumb))
  (type register SI)
)
(define-hardware
  (name h-spsr-svc)
  (comment "Saved Process Status Register during SVC")
  (attrs (ISA arm,thumb))
  (type register SI)
)
(define-hardware
  (name h-spsr-abt)
  (comment "Saved Process Status Register during Abort")
  (attrs (ISA arm,thumb))
  (type register SI)
)
(define-hardware
  (name h-spsr-irq)
  (comment "Saved Process Status Register during IRQ")
  (attrs (ISA arm,thumb))
  (type register SI)
)
(define-hardware
  (name h-spsr-und)
  (comment "Saved Process Status Register during Undefined")
  (attrs (ISA arm,thumb))
  (type register SI)
)

; Virtual version of spsr to access real one based on current mode.

(define-hardware
  (name h-spsr)
  (comment "virtual spsr")
  (attrs VIRTUAL (ISA arm,thumb))
  (type register SI)
  (get ()
       (case SI (reg h-mbits)
	      ((ARM-MODE-User)       (error SI "can't read spsr in user mode"))
	      ((ARM-MODE-FIQ)        (reg h-spsr-fiq))
	      ((ARM-MODE-IRQ)        (reg h-spsr-irq))
	      ((ARM-MODE-Supervisor) (reg h-spsr-svc))
	      ((ARM-MODE-Abort)      (reg h-spsr-abt))
	      ((ARM-MODE-Undefined)  (reg h-spsr-und))
	      ((ARM-MODE-System)     (error SI "can't read spsr in system mode"))
	      (else (error SI "can't read spsr, invalid mode"))))
  (set (newval)
       (case VOID (reg h-mbits)
	      ((ARM-MODE-User)       (error VOID "can't set spsr in user mode"))
	      ((ARM-MODE-FIQ)        (set (reg h-spsr-fiq) newval))
	      ((ARM-MODE-IRQ)        (set (reg h-spsr-irq) newval))
	      ((ARM-MODE-Supervisor) (set (reg h-spsr-svc) newval))
	      ((ARM-MODE-Abort)      (set (reg h-spsr-abt) newval))
	      ((ARM-MODE-Undefined)  (set (reg h-spsr-und) newval))
	      ((ARM-MODE-System)     (error VOID "can't set spsr in system mode"))
	      (else (error VOID "can't set spsr, invalid mode"))))
)

; Explicitly define the shift types so they can be used in semantics
; (enums are created for them).

(define-keyword
  (name shift-type)
  (comment "operand 2 shift type")
  (values (lsl 0) (asl 0) (lsr 1) (asr 2) (ror 3))
)

(define-hardware
  (name h-operand2-shifttype)
  (comment "operand2 shift type")
  (type immediate (UINT 2))
  (values extern-keyword shift-type)
)

; Utility macros for setting the condition codes.

(define-pmacro (set-zn-flags result)
  (sequence ()
	    (set zbit (zflag WI result))
	    (set nbit (nflag WI result)))
)

; Logical operation flag handling:
; cbit is set to the carry out of a shift operation if present
; nbit is set to the sign bit
; vbit is not affected
; zflag is set to indicate whether the result was zero or not

(define-pmacro (set-logical-cc result carry-out)
  (sequence ()
	    (set-zn-flags result)
	    (set cbit carry-out))
)

(define-pmacro (set-add-flags arg1 arg2 carry)
  (sequence ((SI result))
	    (set result (addc arg1 arg2 carry))
	    (set-zn-flags result)
	    (set cbit (add-cflag arg1 arg2 carry))
	    (set vbit (add-oflag arg1 arg2 carry)))
)

(define-pmacro (set-sub-flags arg1 arg2 borrow)
  (sequence ((SI result))
	    (set result (subc arg1 arg2 (not borrow)))
	    (set-zn-flags result)
	    (set cbit (not (sub-cflag arg1 arg2 (not borrow))))
	    (set vbit (sub-oflag arg1 arg2 (not borrow))))
)

; Utility macros for testing the condition codes.

(define-pmacro (test-ne)  (not zbit))
(define-pmacro (test-eq)  zbit)
(define-pmacro (test-gt)  (not (or zbit (xor nbit vbit))))
(define-pmacro (test-le)  (or zbit (xor nbit vbit)))
(define-pmacro (test-ge)  (not (xor nbit vbit)))
(define-pmacro (test-lt)  (xor nbit vbit))
(define-pmacro (test-hi)  (and cbit (not zbit)))
(define-pmacro (test-ls)  (or (not cbit) zbit))
(define-pmacro (test-cc)  (not cbit))
(define-pmacro (test-cs)  cbit)
(define-pmacro (test-pl)  (not nbit))
(define-pmacro (test-mi)  nbit)
(define-pmacro (test-vc)  (not vbit))
(define-pmacro (test-vs)  vbit)

(if (keep-isa? (arm))
    (include "arm7.cpu"))
(if (keep-isa? (thumb))
    (include "thumb.cpu"))
@


1.2
log
@	* mach.scm (current-*-add!): Disallow redefinition.  Make result
	"unspecified".
	* insn.scm (insn-builtin!): Don't define relaxable here, now defined in
	operand.scm.
	* operand.scm (operand-builtin!): Define RELAXABLE for insns too.
	* cpu/m32r.cpu (disp8,disp24): RELAX renamed to RELAXABLE.

	* gen-all-doc: Split arm and frv docs up a bit.

	* cpu/arm.cpu: Add IDOC attribute.
	* cpu/frv.cpu: Ditto.
	* cpu/i960.cpu: Ditto.
	* cpu/openrisc.cpu: Ditto.
	* cpu/xstormy16.cpu: Ditto.
	* cpu/m32r.cpu: Ditto.
	(all insns): Explicitly specify IDOC attribute.

	* Makefile.am (MACH,ISAS,INSN_FILE_NAME): New vars.
	(desc,opcodes,sim-arch,sim-cpu,gas-test,sim-test): Use MACH,ISAS.
	(html): Use MACH,ISAS,INSN_FILE_NAME.  Generate insn.html separately.
	* Makefile.in: Regenerate.
	* attr.scm (<integer-attribute>:parse-value-def): Implement.
	(-attr-read): Defer computing default value until we know the type.
	(attr-has-attr?): Delete, move contents to <attr-list>:has-attr?.
	(<attr-list>:attr-present?): New method.
	(atlist-attr-present?,obj-attr-present?): New fns.
	(obj-has-attr-value?,obj-has-attr-value-no-default?): New fns.
	(attr-builtin!): New insn attr IDOC.
	* cgen-doc.scm (doc-arguments): New args -I,-N.
	* enum.scm (parse-enum-vals): New arg errtxt, all callers updated.
	Support comment as fourth element of enum value.
	(enum-val-name,enum-val-value,enum-val-attrs,enum-val-comment): New fns.
	* html.scm (gen-html-header): New arg kind, all callers updated.
	(gen-table-of-contents): New arg insn-file, all callers updated.
	(gen-list-entry,gen-doc-header): New fn.
	(get-operands): Delete.
	(gen-iformat-table): Rewrite.
	(gen-insn-doc-1): Print constant-folded and trimmed semantics.
	(gen-insn-doc-list): New args name, comment, insns.  All callers updated.
	(get-insn-properties,guess-insn-idoc-attr!): New fn.
	(insn-sets-pc?,insn-refs-mem?,insn-uses-fpu?): New fns.
	(get-insns-for-category,gen-categories-insn-lists): New fns.
	(gen-insn-docs): Simplify each insn's semantics first.
	Print insn tables sorted by IDOC categories.
	(*insn-html-file-name*): New global.
	(cgen-insn.html): New fn.
	(cgen-all): Update.
	* insn.scm (<insn>): Create a setter for the `tmp' member.
	* semantics.scm (insn-build-known-values): Renamed from
	-build-known-values.  All callers updated.

	* rtl.scm: Move traveral/evaluation support to ...
	* rtl-traverse.scm: New file.
	* read.scm: Maybe-load rtl-traverse.scm.

	* rtl.scm (-rtx-valid-types): Add SETRTX.

	* rtx-funcs.scm (nop,parallel): Fix mode.

	* utils.scm (eqv-lookup-index): New fn.
	(assq-lookup-index): Renamed from lookup-index.  All callers updated.

	* dev.scm (load-doc): Set APPLICATION.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d6 2
d146 1
a146 1
  (print-name h-gr)
a357 1
  (prefix "")
@


1.1
log
@2001-07-05  Ben Elliston  <bje@@redhat.com>

	* README: Update.

	* read.scm (include): Include files from srcdir/cpu.
	(-cgen): Likewise for loading .cpu files.
	* *.cpu: Move all cpu descriptions into cpu subdirectory.
	* *.opc: Likewise.
	* simplify.inc: Likewise.
@
text
@d95 19
@


1.1.22.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a94 19

; IDOC attribute for instruction documentation.
; FIXME: Categorization is a bit tricky when alu ops can set the pc.

(define-attr
  (for insn)
  (type enum)
  (name IDOC)
  (comment "insn kind for documentation")
  (attrs META)
  (values
   (MEM - () "Memory")
   (ALU - () "ALU")
   (FPU - () "FPU")
   (BR - () "Branch")
   (PRIV - () "Priviledged")
   (MISC - () "Miscellaneous")
  )
)
@


1.1.20.1
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a94 19

; IDOC attribute for instruction documentation.
; FIXME: Categorization is a bit tricky when alu ops can set the pc.

(define-attr
  (for insn)
  (type enum)
  (name IDOC)
  (comment "insn kind for documentation")
  (attrs META)
  (values
   (MEM - () "Memory")
   (ALU - () "ALU")
   (FPU - () "FPU")
   (BR - () "Branch")
   (PRIV - () "Priviledged")
   (MISC - () "Miscellaneous")
  )
)
@


