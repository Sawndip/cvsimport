head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	cgen-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	cgen-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	cgen-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	cgen-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	cgen-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	cgen-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	cgen-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	cgen-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	cgen-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	cgen-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	cgen-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	cgen-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	cgen-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	cgen-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	cgen-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	cgen-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	cgen-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	cgen-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	cgen-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	cgen-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	cgen-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	cgen-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	cgen-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	cgen-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	cgen-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	cgen-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	cgen-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	cgen-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	cgen-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	cgen-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	cgen-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	cgen-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	cgen-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	cgen-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	cgen-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	cgen-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	cgen-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	cgen-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	cgen-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	cgen-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	cgen-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	cgen-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	cgen-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	cgen-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	cgen-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	cgen-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	cgen-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	cgen-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	cgen-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	cgen-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	cgen-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	cgen-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	cgen-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	cgen-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	cgen-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	cgen-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	cgen-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	cgen-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	cgen-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	cgen-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	cgen-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	cgen-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	cgen-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	cgen-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	cgen-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	cgen-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	cgen-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	cgen-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	cgen-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	cgen-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	cgen-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	cgen-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	cgen-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	cgen-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	cgen-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	cgen-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	cgen-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	cgen-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	cgen-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	cgen-snapshot-20111001:1.6
	gdb_7_3-branch:1.6.0.2
	sid-snapshot-20110901:1.6
	cgen-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	cgen-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	cgen-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	cgen-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	cgen-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	cgen-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	cgen-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	cgen-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	cgen-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	cgen-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	cgen-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	cgen-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	cgen-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	cgen-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	cgen-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	cgen-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	cgen-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	cgen-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	cgen-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	cgen-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	cgen-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	cgen-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	cgen-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	cgen-snapshot-20091001:1.6
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.5
	cgen-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	cgen-snapshot-20090701:1.5
	dje-cgen-play1-branch:1.5.0.6
	dje-cgen-play1-branchpoint:1.5
	cgen-1_1-branch:1.5.0.4
	cgen-1_1-branchpoint:1.5
	sid-snapshot-20090601:1.5
	cgen-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	cgen-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	cgen-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.2
	arc-insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	cgen-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	cgen-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	cgen-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	cgen-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	cgen-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	cgen-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	cgen-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	cgen-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	cgen-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	cgen-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	cgen-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	cgen-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	cgen-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	cgen-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	cgen-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	cgen-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	cgen-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	cgen-snapshot-20071001:1.5
	msnyder-fork-checkpoint-branch:1.4.0.36
	msnyder-fork-checkpoint-branchpoint:1.4
	gdb-csl-arm-20051020-branch:1.4.0.32
	gdb-csl-arm-20051020-branchpoint:1.4
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.34
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.30
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.28
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.26
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.24
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.22
	drow_intercu-20040221-branchpoint:1.4
	cagney_bfdfile-20040213-branch:1.4.0.20
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.18
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.16
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.14
	cagney_x86i386-20030821-branch:1.4.0.12
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.10
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.8
	jimb-ppc64-linux-20030613-branchpoint:1.4
	cagney_convert-20030606-branch:1.4.0.6
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.3.0.6
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.4.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.2
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.2
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.2
	kettenis_i386newframe-20030406-branch:1.2.0.30
	kettenis_i386newframe-20030406-branchpoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.28
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.26
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.24
	cagney_lazyid-20030317-branchpoint:1.2
	kettenis-i386newframe-20030316-mergepoint:1.2
	offbyone-20030313-branch:1.2.0.22
	offbyone-20030313-branchpoint:1.2
	kettenis-i386newframe-20030308-branch:1.2.0.20
	kettenis-i386newframe-20030308-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.18
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.2.0.16
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.14
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.12
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.10
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.8
	gdb_5_3-branch:1.2.0.6
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.4
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.2
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.8
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.6
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.4
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1;
locks; strict;
comment	@# @;


1.6
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.10.18.18.04.40;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.21.14.10.46;	author amylaar;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.15.08.51.52;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.25.17.17.45;	author bje;	state Exp;
branches
	1.2.10.1
	1.2.12.1;
next	1.1;

1.1
date	2002.02.01.11.32.02;	author bje;	state Exp;
branches
	1.1.8.1;
next	;

1.6.2.1
date	2011.09.04.17.03.15;	author brobecke;	state Exp;
branches;
next	;

1.2.10.1
date	2003.04.16.19.56.47;	author carlton;	state Exp;
branches;
next	1.2.10.2;

1.2.10.2
date	2003.05.23.18.40.30;	author carlton;	state Exp;
branches;
next	;

1.2.12.1
date	2003.12.14.20.26.56;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.07.22.21.46.52;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@; SuperH SHcompact instruction set description.  -*- Scheme -*-
; Copyright (C) 2000, 2006 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; dshcf -- define-normal-sh-compact-field

(define-pmacro (dshcf xname xcomment xattrs xstart xlength)
  (dnf xname xcomment (.splice (ISA compact) (.unsplice xattrs)) xstart xlength))

; dshcop -- define-normal-sh-compact-operand

(define-pmacro (dshcop xname xcomment xattrs xhardware xfield)
  (dnop xname xcomment (.splice (ISA compact) (.unsplice xattrs)) xhardware xfield))


; SHcompact-specific attributes.

(define-attr
  (for insn)
  (type boolean)
  (name ILLSLOT)
  (comment "instruction may not appear in a delay slot")
)

(define-attr
  (for insn)
  (type boolean)
  (name FP-INSN)
  (comment "floating point instruction")
)

(define-attr
  (for insn)
  (type boolean)
  (name 32-BIT-INSN)
  (comment "32 bit insn")
)

; Attributes to describe categories of insns
(define-attr
  (for insn)
  (type enum)
  (name SH4-GROUP)
  (comment "sh4 insn groups")
  ; The order of declaration is significant. Table lookup is
  ; performed using these as indices.
  (values NONE MT EX BR LS FE CO MAX)
)

(define-attr
  (for insn)
  (type enum)
  (name SH4A-GROUP)
  (comment "sh4a insn groups")
  ; The order of declaration is significant. Table lookup is
  ; performed using these as indices.
  (values NONE MT EX BR LS FE CO MAX)
)

(define-keyword
  (name frc-names)
  (attrs (ISA compact))
  (enum-prefix H-FRC-)
  (values (fr0   0) (fr1   1) (fr2   2) (fr3   3) (fr4   4) (fr5   5)
	  (fr6   6) (fr7   7) (fr8   8) (fr9   9) (fr10 10) (fr11 11)
	  (fr12 12) (fr13 13) (fr14 14) (fr15 15))
)

(define-keyword
  (name drc-names)
  (attrs (ISA compact))
  (enum-prefix H-DRC-)
  (values (dr0 0) (dr2 2) (dr4 4) (dr6 6) (dr8 8) (dr10 10) (dr12 12) (dr14 14))
)

(define-keyword
  (name xf-names)
  (attrs (ISA compact))
  (enum-prefix H-XF-)
  (values (xf0   0) (xf1   1) (xf2   2) (xf3   3) (xf4   4) (xf5   5)
	  (xf6   6) (xf7   7) (xf8   8) (xf9   9) (xf10 10) (xf11 11)
	  (xf12 12) (xf13 13) (xf14 14) (xf15 15))
)

; Hardware specific to the SHcompact mode.

(define-pmacro (front) (mul 16 frbit))
(define-pmacro (back) (mul 16 (not frbit)))

(define-hardware
  (name h-frc)
  (comment "Single precision floating point registers")
  (attrs VIRTUAL PROFILE (ISA compact))
  (indices extern-keyword frc-names)
  (type register SF (16))
  (get (index) (reg h-fr (add (front) index)))
  (set (index newval) (set (reg h-fr (add (front) index)) newval))
)

(define-hardware
  (name h-drc)
  (comment "Double precision floating point registers")
  (attrs VIRTUAL PROFILE (ISA compact))
  (indices extern-keyword drc-names)
  (type register DF (8))
  (get (index) (reg h-dr (add (front) index)))
  (set (index newval) (set (reg h-dr (add (front) index)) newval))
)

(define-hardware
  (name h-xf)
  (comment "Extended single precision floating point registers")
  (attrs VIRTUAL (ISA compact))
  (indices extern-keyword xf-names)
  (type register SF (16))
  (get (index) (reg h-fr (add (back) index)))
  (set (index newval) (set (reg h-fr (add (back) index)) newval))
)

(define-hardware
  (name h-xd)
  (comment "Extended double precision floating point registers")
  (attrs VIRTUAL (ISA compact))
  (indices extern-keyword frc-names)
  (type register DF (8))
  (get (index) (reg h-dr (add (back) index)))
  (set (index newval) (set (reg h-dr (add (back) index)) newval))
)

(define-hardware
  (name h-fvc)
  (comment "Single precision floating point vectors")
  (attrs VIRTUAL (ISA compact))
  (indices keyword "" ((fv0 0) (fv4 4) (fv8 8) (fv12 12)))
  (type register SF (4))
  (get (index) (reg h-fr (add (front) index)))
  (set (index newval) (set (reg h-fr (add (front) index)) newval))
)

; not needed? Using h-fpscr directly
;(define-hardware
;  (name h-fpccr)
;  (comment "SHcompact floating point status/control register")
;  (attrs VIRTUAL (ISA compact))
;  (type register SI)
;  (get () (or (or (or (raw-reg h-fpscr) (sll SI prbit 19)) (sll SI szbit 20)) (sll SI frbit 21)))
;  (set (newvalue) (sequence ()
;			    (set (reg h-fpscr) newvalue)
;			    (set prbit (and (srl newvalue 19) 1))
;			    (set szbit (and (srl newvalue 20) 1))
;			    (set frbit (and (srl newvalue 21) 1))))
;)

(define-hardware
  (name h-gbr)
  (comment "Global base register")
  (attrs VIRTUAL (ISA compact))
  (type register SI)
  (get () (subword SI (raw-reg h-gr 16) 1))
  (set (newval) (set (raw-reg h-gr 16) (ext DI newval)))
)

(define-hardware
  (name h-vbr)
  (comment "Vector base register")
  (attrs VIRTUAL (ISA compact))
  (type register SI)
  (get () (subword SI (raw-reg h-gr 20) 1))
  (set (newval) (set (raw-reg h-gr 20) (ext DI newval)))
)

(define-hardware
  (name h-pr)
  (comment "Procedure link register")
  (attrs VIRTUAL (ISA compact))
  (type register SI)
  (get () (subword SI (raw-reg h-gr 18) 1))
  (set (newval) (set (raw-reg h-gr 18) (ext DI newval)))
)

(define-hardware
  (name h-macl)
  (comment "Multiple-accumulate low register")
  (attrs VIRTUAL (ISA compact))
  (type register SI)
  (get () (subword SI (raw-reg h-gr 17) 1))
  (set (newval) (set (raw-reg h-gr 17) (-join-si (subword SI (raw-reg h-gr 17) 0) newval)))
)

(define-hardware
  (name h-mach)
  (comment "Multiply-accumulate high register")
  (attrs VIRTUAL (ISA compact))
  (type register SI)
  (get () (subword SI (raw-reg h-gr 17) 0))
  (set (newval) (set (raw-reg h-gr 17) (-join-si newval (subword SI (raw-reg h-gr 17) 1))))
)
  
(define-hardware
  (name h-tbit)
  (comment "Condition code flag")
  (attrs VIRTUAL (ISA compact))
  (type register BI)
  (get () (and BI (raw-reg h-gr 19) 1))
  (set (newval) (set (raw-reg h-gr 19) (or (and (raw-reg h-gr 19) (inv DI 1)) (zext DI newval))))
)


(dshcf f-op4     "Opcode (4 bits)"         ()   0   4)
(dshcf f-op8     "Opcode (8 bits)"         ()   0   8)
(dshcf f-op16    "Opcode (16 bits)"        ()   0  16)

(dshcf f-sub4    "Sub opcode (4 bits)"     ()  12   4)
(dshcf f-sub8    "Sub opcode (8 bits)"     ()   8   8)
(dshcf f-sub10   "Sub opcode (10 bits)"    ()   6  10)

(dshcf f-rn      "Register selector n"     ()   4   4)
(dshcf f-rm      "Register selector m"     ()   8   4)

(dshcf f-7-1     "One bit at bit 8"        ()   7   1)
(dshcf f-11-1    "One bit at bit 11"       ()  11   1)
(dshcf f-16-4    "4 bits at bit 16"        ()  16   4)

(df  f-disp8  "Displacement (8 bits)"  ((ISA compact) PCREL-ADDR) 8 8 INT
     ((value pc) (sra SI value 1))
     ((value pc) (add SI (sll SI value 1) (add pc 4))))

(df  f-disp12 "Displacement (12 bits)" ((ISA compact) PCREL-ADDR) 4 12 INT
     ((value pc) (sra SI value 1))
     ((value pc) (add SI (sll SI value 1) (add pc 4))))

(dshcf f-imm8    "Immediate (8 bits)"      ()   8   8)
(dshcf f-imm4    "Immediate (4 bits)"      ()  12   4)

(df f-imm4x2     "Immediate (4 bits)"      ((ISA compact)) 12 4 UINT
    ((value pc) (srl SI value 1))
    ((value pc) (sll SI value 1)))

(df f-imm4x4     "Immediate (4 bits)"      ((ISA compact)) 12 4 UINT
    ((value pc) (srl SI value 2))
    ((value pc) (sll SI value 2)))

(df f-imm8x2     "Immediate (8 bits)"      ((ISA compact)) 8 8 UINT
    ((value pc) (sra SI value 1))
    ((value pc) (sll SI value 1)))

(df f-imm8x4     "Immediate (8 bits)"      ((ISA compact)) 8 8 UINT
    ((value pc) (sra SI value 2))
    ((value pc) (sll SI value 2)))

(df  f-imm12x4 "Displacement (12 bits)" ((ISA compact)) 20 12 INT
     ((value pc) (sra SI value 2))
     ((value pc) (sll SI value 2)))

(df  f-imm12x8 "Displacement (12 bits)" ((ISA compact)) 20 12 INT
     ((value pc) (sra SI value 3))
     ((value pc) (sll SI value 3)))

(df f-dn "Double selector n" ((ISA compact))  4 3 UINT
    ((value pc) (srl SI value 1))
    ((value pc) (sll SI value 1)))

(df f-dm         "Double selector m"       ((ISA compact)) 8 3 UINT
    ((value pc) (srl SI value 1))
    ((value pc) (sll SI value 1)))

(df f-vn         "Vector selector n"       ((ISA compact)) 4 2 UINT
    ((value pc) (srl SI value 2))
    ((value pc) (sll SI value 2)))

(df f-vm         "Vector selector m"       ((ISA compact)) 6 2 UINT
    ((value pc) (srl SI value 2))
    ((value pc) (sll SI value 2)))

(df f-xn         "Extended selector n"     ((ISA compact)) 4 3 UINT
    ((value pc) (srl SI value 1))
    ((value pc) (add SI (sll SI value 1) 1)))

(df f-xm         "Extended selector m"     ((ISA compact)) 8 3 UINT
    ((value pc) (srl SI value 1))
    ((value pc) (add SI (sll SI value 1) 1)))

(df f-imm20-hi "imm20 hi" ((ISA compact))  8  4  INT #f #f)
(df f-imm20-lo "imm20 lo" ((ISA compact)) 16 16 UINT #f #f)
(define-multi-ifield
  (name f-imm20)
  (comment "20 bit immediate")
  (attrs (ISA compact))
  (mode INT)
  (subfields f-imm20-hi f-imm20-lo)
  (insert (sequence ()
		    (set (ifield f-imm20-lo) (and (ifield f-imm20) #xffff))
		    (set (ifield f-imm20-hi) (sra (ifield f-imm20) 16))))
  (extract (set (ifield f-imm20)
		(or (sll (ifield f-imm20-hi) 16) (ifield f-imm20-lo))))
  )


; Operands.

(dshcop rm     "Left general purpose register"          ()   h-grc   f-rm)
(dshcop rn     "Right general purpose register"         ()   h-grc   f-rn)
(dshcop r0     "Register 0"                             ()   h-grc   0)

(dshcop frn    "Single precision register"              ()   h-frc   f-rn)
(dshcop frm    "Single precision register"              ()   h-frc   f-rm)
(dshcop fr0    "Single precision register 0"            ()   h-frc   0)

(dshcop fmovn  "Register for fmov"                      ((SH2e-MACH)) h-fmov f-rn)
(dshcop fmovm  "Register for fmov"                      ((SH2e-MACH)) h-fmov f-rm)

(dshcop fvn    "Left floating point vector"             ()   h-fvc   f-vn)
(dshcop fvm    "Right floating point vector"            ()   h-fvc   f-vm)

(dshcop drn    "Left double precision register"         ()   h-drc   f-dn)
(dshcop drm    "Right double precision register"        ()   h-drc   f-dm)

(dshcop imm4   "Immediate value (4 bits)"		()   h-sint  f-imm4)
(dshcop imm8   "Immediate value (8 bits)"               ()   h-sint  f-imm8)
(dshcop uimm8  "Immediate value (8 bits unsigned)"      ()   h-uint  f-imm8)
(dshcop imm20  "Immediate value (20 bits)"              ()   h-sint  f-imm20)

(dshcop imm4x2 "Immediate value (4 bits, 2x scale)"     ()   h-uint  f-imm4x2)
(dshcop imm4x4 "Immediate value (4 bits, 4x scale)"     ()   h-uint  f-imm4x4)
(dshcop imm8x2 "Immediate value (8 bits, 2x scale)"     ()   h-uint  f-imm8x2)
(dshcop imm8x4 "Immediate value (8 bits, 4x scale)"     ()   h-uint  f-imm8x4)

(dshcop disp8  "Displacement (8 bits)"                  ()   h-iaddr f-disp8)
(dshcop disp12 "Displacement (12 bits)"                 ()   h-iaddr f-disp12)
(dshcop imm12x4 "Displacement (12 bits)"                ()   h-sint  f-imm12x4)
(dshcop imm12x8 "Displacement (12 bits)"                ()   h-sint  f-imm12x8)

(dshcop rm64   "Register m (64 bits)"                   ()   h-gr    f-rm)
(dshcop rn64   "Register n (64 bits)"                   ()   h-gr    f-rn)

(dshcop gbr    "Global base register"                   ()   h-gbr   f-nil)
(dshcop vbr    "Vector base register"                   ()   h-vbr   f-nil)
(dshcop pr     "Procedure link register"                ()   h-pr    f-nil)

(dshcop fpscr  "Floating point status/control register" ()   h-fpscr f-nil)

(dshcop tbit   "Condition code flag"                    ()   h-tbit  f-nil)
(dshcop sbit   "Multiply-accumulate saturation flag"    ()   h-sbit  f-nil)
(dshcop mbit   "Divide-step M flag"                     ()   h-mbit  f-nil)
(dshcop qbit   "Divide-step Q flag"                     ()   h-qbit  f-nil)
(dshcop fpul   "Floating point ???"			()   h-fr    32)

(dshcop frbit  "Floating point register bank bit"       ()   h-frbit f-nil)
(dshcop szbit  "Floating point transfer size bit"       ()   h-szbit f-nil)
(dshcop prbit  "Floating point precision bit"           ()   h-prbit f-nil)

(dshcop macl   "Multiply-accumulate low register"       ()   h-macl  f-nil)
(dshcop mach   "Multiply-accumulate high register"      ()   h-mach  f-nil)

(define-operand (name fsdm) (comment "bar")
  (attrs (ISA compact) (SH2e-MACH)) (type h-fsd) (index f-rm) (handlers (parse "fsd")))

(define-operand (name fsdn) (comment "bar")
  (attrs (ISA compact) (SH2e-MACH)) (type h-fsd) (index f-rn))


; Cover macro to dni to indicate these are all SHcompact instructions.
; dshmi: define-normal-sh-compact-insn

(define-pmacro (dshci xname xcomment xattrs xsyntax xformat xsemantics xtiming)
  (define-insn
    (name (.sym xname -compact))
    (comment xcomment)
    (.splice attrs (.unsplice xattrs) (ISA compact))
    (syntax xsyntax)
    (format xformat)
    (semantics xsemantics)
    (.splice timing (.unsplice xtiming))))

(dshci add "Add"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "add $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 12))
       (set rn (add rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec))))

(dshci addi "Add immediate"
       ((SH4-GROUP EX))
       "add #$imm8, $rn"
       (+ (f-op4 7) rn imm8)
       (set rn (add rn (ext SI (and QI imm8 255))))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec))))

(dshci addc "Add with carry"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "addc $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 14))
       (sequence ((BI flag))
		 (set flag (add-cflag rn rm tbit))
		 (set rn (addc rn rm tbit))
		 (set tbit flag))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci addv "Add with overflow"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "addv $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 15))
       (sequence ((BI t))
		 (set t (add-oflag rn rm 0))
		 (set rn (add rn rm))
		 (set tbit t))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci and "Bitwise AND"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "and $rm64, $rn64"
       (+ (f-op4 2) rn64 rm64 (f-sub4 9))
       (set rn64 (and rm64 rn64))
       (all-models ((unit u-use-gr (in usereg rn64))
		    (unit u-use-gr (in usereg rm64))
		    (unit u-exec))))

(dshci andi "Bitwise AND immediate"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "and #$uimm8, r0"
       (+ (f-op8 #xc9) uimm8)
       (set r0 (and r0 (zext DI uimm8)))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-exec))))

(dshci andb "Bitwise AND memory byte"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "and.b #$imm8, @@(r0, gbr)"
       (+ (f-op8 #xcd) imm8)
       (sequence ((DI addr) (UQI data))
		 (set addr (add r0 gbr))
		 (set data (and (mem UQI addr) imm8))
		 (set (mem UQI addr) data))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-logic-b)
		    (unit u-memory-access))))

(dshci bf "Conditional branch"
       ((SH4-GROUP BR) (SH4A-GROUP BR))
       "bf $disp8"
       (+ (f-op8 #x8b) disp8)
       (if (not tbit)
	   (set pc disp8))
       ; non-delayed branch stalls 2 cycles
       (all-models ((unit u-use-tbit)
		    (unit u-branch (cycles 3)))))

(dshci bfs "Conditional branch with delay slot"
       ((SH2-MACH) (SH4-GROUP BR) (SH4A-GROUP BR))
       "bf/s $disp8"
       (+ (f-op8 #x8f) disp8)
       (if (not tbit)
	   (sequence ()
		     (set pc (add pc 2)) ; kludge to get it marked as referenced
		     (save-delayed-pc disp8)
		     (set-delay 1 pc disp8)))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-use-tbit)
		    (unit u-branch (cycles 2)))))

(dshci bra "Branch"
       ((SH4-GROUP BR) (SH4A-GROUP BR))
       "bra $disp12"
       (+ (f-op4 10) disp12)
       (sequence ()
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc disp12)
		 (set-delay 1 pc disp12))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-branch (cycles 2)))))

(dshci braf "Branch far"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP BR))
       "braf $rn"
       (+ (f-op4 0) rn (f-sub8 35))
       (sequence ()
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc (add (ext DI rn) (add pc 4)))
		 (set-delay 1 pc (add (ext DI rn) (add pc 4))))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-jmp (cycles 2)))))

(dshci brk "Breakpoint"
       ((SH5-MACH))
       "brk"
       (+ (f-op16 59))
       (c-call "sh64_break" pc)
       ())

(dshci bsr "Branch to subroutine"
       ((SH4-GROUP BR) (SH4A-GROUP BR))
       "bsr $disp12"
       (+ (f-op4 11) disp12)
       (sequence ()
		 (set-delay 1 pr (add pc 4))
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc disp12)
		 (set-delay 1 pc disp12))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-branch (cycles 2)))))

(dshci bsrf "Branch to far subroutine"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP BR))
       "bsrf $rn"
       (+ (f-op4 0) rn (f-sub8 3))
       (sequence ()
		 (set-delay 1 pr (add pc 4))
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc (add (ext DI rn) (add pc 4)))
		 (set-delay 1 pc (add (ext DI rn) (add pc 4))))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-jsr (cycles 2)))))
       
(dshci bt "Conditional branch"
       ((SH4-GROUP BR) (SH4A-GROUP BR))
       "bt $disp8"
       (+ (f-op8 #x89) disp8)
       (if tbit
	   (set pc disp8))
       ; non-delayed branch stalls 2 cycles
       (all-models ((unit u-use-tbit)
		    (unit u-branch (cycles 3)))))

(dshci bts "Conditional branch with delay slot"
       ((SH2-MACH) (SH4-GROUP BR) (SH4A-GROUP BR))
       "bt/s $disp8"
       (+ (f-op8 #x8d) disp8)
       (if tbit
	   (sequence ()
		     (set pc (add pc 2)) ; kludge to get it marked as referenced
		     (save-delayed-pc disp8)
		     (set-delay 1 pc disp8)))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-use-tbit)
		    (unit u-branch (cycles 2)))))

(dshci clrmac "Clear MACL and MACH"
       ((SH4-GROUP CO) (SH4A-GROUP EX))
       "clrmac"
       (+ (f-op16 40))
       (sequence ()
		 (set macl 0)
		 (set mach 0))
       (all-models ((unit u-use-multiply-result)
		    (unit u-exec)
		    (unit u-set-mac))))

(dshci clrs "Clear S-bit"
       ((SH3-MACH) (SH4-GROUP CO) (SH4A-GROUP EX))
       "clrs"
       (+ (f-op16 72))
       (set sbit 0)
       (sh3-models ((unit u-exec)
		    (unit u-set-sr-bit))))
;		    (unit u-set-sr))))

(dshci clrt "Clear T-bit"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "clrt"
       (+ (f-op16 8))
       (set tbit 0)
       (all-models ((unit u-exec)
		    (unit u-use-tbit)
		    (unit u-set-sr-bit))))
;		    (unit u-set-sr))))

(dshci cmpeq "Compare if equal"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/eq $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 0))
       (set tbit (eq rm rn))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmpeqi "Compare if equal (immediate)"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/eq #$imm8, r0"
       (+ (f-op8 #x88) imm8)
       (set tbit (eq r0 (ext SI (and QI imm8 255))))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmpge "Compare if greater than or equal"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/ge $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 3))
       (set tbit (ge rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmpgt "Compare if greater than"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/gt $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 7))
       (set tbit (gt rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmphi "Compare if greater than (unsigned)"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/hi $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 6))
       (set tbit (gtu rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmphs "Compare if greater than or equal (unsigned)"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/hs $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 2))
       (set tbit (geu rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmppl "Compare if greater than zero"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/pl $rn"
       (+ (f-op4 4) rn (f-sub8 21))
       (set tbit (gt rn 0))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmppz "Compare if greater than or equal zero"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/pz $rn"
       (+ (f-op4 4) rn (f-sub8 17))
       (set tbit (ge rn 0))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci cmpstr "Compare bytes"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "cmp/str $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 12))
       (sequence ((BI t) (SI temp))
		 (set temp (xor rm rn))
		 (set t (eq (and temp #xff000000) 0))
		 (set t (or (eq (and temp #xff0000) 0) t))
		 (set t (or (eq (and temp #xff00) 0) t))
		 (set t (or (eq (and temp #xff) 0) t))
		 (set tbit (if BI (gtu t 0) 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci div0s "Initialise divide-step state for signed division"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "div0s $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 7))
       (sequence ()
		 (set qbit (srl rn 31))
		 (set mbit (srl rm 31))
		 (set tbit (if BI (eq (srl rm 31) (srl rn 31)) 0 1)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci div0u "Initialise divide-step state for unsigned division"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "div0u"
       (+ (f-op16 25))
       (sequence ()
		 (set tbit 0)
		 (set qbit 0)
		 (set mbit 0))
       (all-models ((unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci div1 "Divide step"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "div1 $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 4))
       (sequence ((BI oldq) (SI tmp0) (UQI tmp1))
		 (set oldq qbit)
		 (set qbit (srl rn 31))
		 (set rn (or (sll rn 1) (zext SI tbit)))
		 (if (not oldq)
		     (if (not mbit)
			 (sequence ()
				   (set tmp0 rn)
				   (set rn (sub rn rm))
				   (set tmp1 (gtu rn tmp0))
				   (if (not qbit)
				       (set qbit (if BI tmp1 1 0))
				       (set qbit (if BI (eq tmp1 0) 1 0))))
			 (sequence ()
				   (set tmp0 rn)
				   (set rn (add rn rm))
				   (set tmp1 (ltu rn tmp0))
				   (if (not qbit)
				       (set qbit (if BI (eq tmp1 0) 1 0))
				       (set qbit (if BI tmp1 1 0)))))
		     (if (not mbit)
			 (sequence ()
				   (set tmp0 rn)
				   (set rn (add rm rn))
				   (set tmp1 (ltu rn tmp0))
				   (if (not qbit)
				       (set qbit (if BI tmp1 1 0))
				       (set qbit (if BI (eq tmp1 0) 1 0))))
			 (sequence ()
				   (set tmp0 rn)
				   (set rn (sub rn rm))
				   (set tmp1 (gtu rn tmp0))
				   (if (not qbit)
				       (set qbit (if BI (eq tmp1 0) 1 0))
				       (set qbit (if BI tmp1 1 0))))))
		 (set tbit (if BI (eq qbit mbit) 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci divu "Unsigned Divide"
       ((SH2a-nofpu-MACH))
       "divu r0, $rn"
       (+ (f-op4 4) rn (f-sub8 #x84))
       (set rn (udiv rn r0))
       (sh2a-nofpu-models ((unit u-use-gr (in usereg rn))
			   (unit u-use-gr (in usereg r0))
			   (unit u-exec (cycles 34)))))

(dshci mulr "Multiply to Register"
       ((SH2a-nofpu-MACH))
       "mulr r0, $rn"
       (+ (f-op4 4) rn (f-sub8 #x80))
       (set rn (mul rn r0))
       (sh2a-nofpu-models ((unit u-use-gr (in usereg rn))
			   (unit u-use-gr (in usereg r0))
			   (unit u-mulr)
			   (unit u-mulr-gr (out loadreg rn)))))

(dshci dmulsl "Multiply long (signed)"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP EX))
       "dmuls.l $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 13))
       (sequence ((DI result))
		 (set result (mul (ext DI rm) (ext DI rn)))
		 (set mach (subword SI result 0))
		 (set macl (subword SI result 1)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-dmul))))

(dshci dmulul "Multiply long (unsigned)"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP EX))
       "dmulu.l $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 5))
       (sequence ((DI result))
		 (set result (mul (zext DI rm) (zext DI rn)))
		 (set mach (subword SI result 0))
		 (set macl (subword SI result 1)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-dmul))))

(dshci dt "Decrement and set"
       ((SH2-MACH) (SH4-GROUP EX) (SH4A-GROUP EX))
       "dt $rn"
       (+ (f-op4 4) rn (f-sub8 16))
       (sequence ()
		 (set rn (sub rn 1))
		 (set tbit (eq rn 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci extsb "Sign extend byte"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "exts.b $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 14))
       (set rn (ext SI (subword QI rm 3)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci extsw "Sign extend word"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "exts.w $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 15))
       (set rn (ext SI (subword HI rm 1)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci extub "Zero extend byte"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "extu.b $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 12))
       (set rn (zext SI (subword QI rm 3)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci extuw "Zero etxend word"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "extu.w $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 13))
       (set rn (zext SI (subword HI rm 1)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci fabs "Floating point absolute"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fabs $fsdn"
       (+ (f-op4 15) fsdn (f-sub8 #x5d))
       (if prbit
	   (set fsdn (c-call DF "sh64_fabsd" fsdn))
	   (set fsdn (c-call SF "sh64_fabss" fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-set-fr-0 (out loadreg fsdn)))))

(dshci fadd "Floating point add"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fadd $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 0))
       (if prbit
	   (set fsdn (c-call DF "sh64_faddd" fsdm fsdn))
	   (set fsdn (c-call SF "sh64_fadds" fsdm fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr (out loadreg fsdn)))))

(dshci fcmpeq "Floating point compare equal"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fcmp/eq $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 4))
       (if prbit
	   (set tbit (c-call BI "sh64_fcmpeqd" fsdm fsdn))
	   (set tbit (c-call BI "sh64_fcmpeqs" fsdm fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fcmp)
		     (unit u-fpu))))
       
(dshci fcmpgt "Floating point compare greater than"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fcmp/gt $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 5))
       (if prbit
	   (set tbit (c-call BI "sh64_fcmpgtd" fsdn fsdm))
	   (set tbit (c-call BI "sh64_fcmpgts" fsdn fsdm)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fcmp)
		     (unit u-fpu))))

(dshci fcnvds "Floating point convert (double to single)"
       ((SH2a-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fcnvds $drn, fpul"
       (+ (f-op4 15) drn (f-7-1 0) (f-sub8 #xbd))
       (set fpul (c-call SF "sh64_fcnvds" drn))
       (sh2a-fpu-models ((unit u-use-dr (in usereg drn))
			 (unit u-exec)
			 (unit u-fcnv)
			 (unit u-set-fpul))))

(dshci fcnvsd "Floating point convert (single to double)"
       ((SH2a-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fcnvsd fpul, $drn"
       (+ (f-op4 15) drn (f-7-1 0) (f-sub8 #xad))
       (set drn (c-call DF "sh64_fcnvsd" fpul))
       (sh2a-fpu-models ((unit u-use-fpul)
			 (unit u-exec)
			 (unit u-fcnv)
			 (unit u-set-dr (out loadreg drn)))))

(dshci fdiv "Floating point divide"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fdiv $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 3))
       (if prbit
	   (set fsdn (c-call DF "sh64_fdivd" fsdn fsdm))
	   (set fsdn (c-call SF "sh64_fdivs" fsdn fsdm)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fdiv (out loadreg fsdn)))))

(dshci fipr "Floating point inner product"
       ((SH4-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fipr $fvm, $fvn"
       (+ (f-op4 15) fvn fvm (f-sub8 #xed))
       (c-call VOID "sh64_fipr" (index-of fvm) (index-of fvn))
       (sh4-models ((unit u-exec)
		    (unit u-fipr))))

(dshci flds "Floating point load status register"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "flds $frn, fpul"
       (+ (f-op4 15) frn (f-sub8 #x1d))
       (set fpul frn)
       (sh2e-models ((unit u-use-fr (in usereg frn))
		     (unit u-exec)
		     (unit u-flds-fpul))))

(dshci fldi0 "Floating point load immediate 0.0"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fldi0 $frn"
       (+ (f-op4 15) frn (f-sub8 #x8d))
       (set frn (c-call SF "sh64_fldi0"))
       (sh2e-models ((unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-set-fr-0 (out loadreg frn)))))

(dshci fldi1 "Floating point load immediate 1.0"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fldi1 $frn"
       (+ (f-op4 15) frn (f-sub8 #x9d))
       (set frn (c-call SF "sh64_fldi1"))
       (sh2e-models ((unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-set-fr-0 (out loadreg frn)))))

(dshci float "Floating point integer conversion"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "float fpul, $fsdn"
       (+ (f-op4 15) fsdn (f-sub8 #x2d))
       (if prbit
	   (set fsdn (c-call DF "sh64_floatld" fpul))
	   (set fsdn (c-call SF "sh64_floatls" fpul)))
       (sh2e-models ((unit u-use-fpul)
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr (out loadreg fsdn)))))

(dshci fmac "Floating point multiply and accumulate"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fmac fr0, $frm, $frn"
       (+ (f-op4 15) frn frm (f-sub4 14))
       (set frn (c-call SF "sh64_fmacs" fr0 frm frn))
       (sh2e-models ((unit u-use-fr (in usereg frm))
		     (unit u-use-fr (in usereg frn))
		     (unit u-use-fr (in usereg fr0))
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr (out loadreg frn)))))

(dshci fmov1 "Floating point move (register to register)"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov $fmovm, $fmovn"
       (+ (f-op4 15) fmovn fmovm (f-sub4 12))
       (set fmovn fmovm)
       (sh2e-models ((unit u-use-fr (in usereg fmovm))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-set-fr-0 (out loadreg fmovn)))))

(dshci fmov2 "Floating point load"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov @@$rm, $fmovn"
       (+ (f-op4 15) fmovn rm (f-sub4 8))
       (if (not szbit)
	   (set fmovn (mem SF rm))
	   (set fmovn (mem DF rm)))
       (sh2e-models ((unit u-use-gr (in usereg rm))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-load-fr (out loadreg fmovn)))))

(dshci fmov3 "Floating point load (post-increment)"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov @@${rm}+, fmovn"
       (+ (f-op4 15) fmovn rm (f-sub4 9))
       (if (not szbit)
	   (sequence ()
		     (set fmovn (mem SF rm))
		     (set rm (add rm 4)))
	   (sequence ()
		     (set fmovn (mem DF rm))
		     (set rm (add rm 8))))
       (sh2e-models ((unit u-use-gr (in usereg rm))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-load-fr (out loadreg fmovn)))))

(dshci fmov4 "Floating point load (register/register indirect)"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov @@(r0, $rm), $fmovn"
       (+ (f-op4 15) fmovn rm (f-sub4 6))
       (if (not szbit)
	   (set fmovn (mem SF (add r0 rm)))
	   (set fmovn (mem DF (add r0 rm))))
       (sh2e-models ((unit u-use-gr (in usereg rm))
		     (unit u-use-gr (in usereg r0))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-load-fr (out loadreg fmovn)))))

(dshci fmov5 "Floating point store"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov $fmovm, @@$rn"
       (+ (f-op4 15) rn fmovm (f-sub4 10))
       (if (not szbit)
	   (set (mem SF rn) fmovm)
	   (set (mem DF rn) fmovm))
       (sh2e-models ((unit u-use-fr (in usereg fmovm))
		     (unit u-use-gr (in usereg rn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access))))

(dshci fmov6 "Floating point store (pre-decrement)"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov $fmovm, @@-$rn"
       (+ (f-op4 15) rn fmovm (f-sub4 11))
       (if (not szbit)
	   (sequence ()
		     (set rn (sub rn 4))
		     (set (mem SF rn) fmovm))
	   (sequence ()
		     (set rn (sub rn 8))
		     (set (mem DF rn) fmovm)))
       (sh2e-models ((unit u-use-fr (in usereg fmovm))
		     (unit u-use-gr (in usereg rn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access))))

(dshci fmov7 "Floating point store (register/register indirect)"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fmov $fmovm, @@(r0, $rn)"
       (+ (f-op4 15) rn fmovm (f-sub4 7))
       (if (not szbit)
	   (set (mem SF (add r0 rn)) fmovm)
	   (set (mem DF (add r0 rn)) fmovm))
       (sh2e-models ((unit u-use-fr (in usereg fmovm))
		     (unit u-use-gr (in usereg rn))
		     (unit u-use-gr (in usereg r0))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access))))

(dshci fmov8 "Load double float from memory (register indirect w/ displacement)"
       ((SH2a-MACH) 32-BIT-INSN)
       "fmov.d @@($imm12x8, $rm), $drn"
       (+ (f-op4 3) (f-sub4 1) (f-7-1 0) (f-16-4 7) drn rm imm12x8)
       (set drn (mem DF (add rm imm12x8)))
       (sh2a-fpu-models ((unit u-use-gr (in usereg rm))
			 (unit u-exec)
			 (unit u-fpu)
			 (unit u-fpu-memory-access (cycles 1)) ; 1 extra cycle
			 (unit u-load-dr (out loadreg drn)))))

(dshci fmov9 "Store double float to memory (register indirect w/ displacement)"
       ((SH2a-MACH) 32-BIT-INSN)
       "mov.l $drm, @@($imm12x8, $rn)"
       (+ (f-op4 3) (f-sub4 1) (f-11-1 0) (f-16-4 3) rn drm imm12x8)
       (set (mem DF (add rn imm12x8)) drm)
       (sh2a-fpu-models ((unit u-use-fr (in usereg drm))
			 (unit u-exec)
			 (unit u-fpu)
			 (unit u-fpu-memory-access (cycles 1))))) ; 1 extra cycle

(dshci fmul "Floating point multiply"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fmul $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 2))
       (if prbit
	   (set fsdn (c-call DF "sh64_fmuld" fsdm fsdn))
	   (set fsdn (c-call SF "sh64_fmuls" fsdm fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr (out loadreg fsdn)))))

(dshci fneg "Floating point negate"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
       "fneg $fsdn"
       (+ (f-op4 15) fsdn (f-sub8 #x4d))
       (if prbit
	   (set fsdn (c-call DF "sh64_fnegd" fsdn))
	   (set fsdn (c-call SF "sh64_fnegs" fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-set-fr-0 (out loadreg fsdn)))))

(dshci frchg "Toggle floating point register banks"
       (FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "frchg"
       (+ (f-op16 #xfbfd))
       (set frbit (not frbit))
       ())

(dshci fschg "Set size of floating point transfers"
       (FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fschg"
       (+ (f-op16 #xf3fd))
       (set szbit (not szbit))
       ())

(dshci fsqrt "Floating point square root"
       ((MACH sh2a-fpu,sh3e,sh4,sh4a,sh5) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fsqrt $fsdn"
       (+ (f-op4 15) fsdn (f-sub8 #x6d))
       (if prbit
	   (set fsdn (c-call DF "sh64_fsqrtd" fsdn))
	   (set fsdn (c-call SF "sh64_fsqrts" fsdn)))
       (fsqrt-models ((unit u-use-fr (in usereg fsdn))
		      (unit u-exec)
		      (unit u-fsqrt (out loadreg fsdn)))))

(dshci fsts "Floating point store status register"
       ((SH2e-MACH) FP-INSN (SH4-GROUP LS) (SH4A-GROUP LS))
      "fsts fpul, $frn"
       (+ (f-op4 15) frn (f-sub8 13))
       (set frn fpul)
       (sh2e-models ((unit u-use-fpul)
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr-0 (out loadreg frn)))))

(dshci fsub "Floating point subtract"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "fsub $fsdm, $fsdn"
       (+ (f-op4 15) fsdn fsdm (f-sub4 1))
       (if prbit
	   (set fsdn (c-call DF "sh64_fsubd" fsdn fsdm))
	   (set fsdn (c-call SF "sh64_fsubs" fsdn fsdm)))
       (sh2e-models ((unit u-use-fr (in usereg fsdm))
		     (unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fr (out loadreg fsdn)))))

(dshci ftrc "Floating point truncate"
       ((SH2e-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "ftrc $fsdn, fpul"
       (+ (f-op4 15) fsdn (f-sub8 #x3d))
       (set fpul (if SF prbit
		     (c-call SF "sh64_ftrcdl" fsdn)
		     (c-call SF "sh64_ftrcsl" fsdn)))
       (sh2e-models ((unit u-use-fr (in usereg fsdn))
		     (unit u-exec)
		     (unit u-fpu)
		     (unit u-set-fpul))))

(dshci ftrv "Floating point transform vector"
       ((SH4-MACH) FP-INSN (SH4-GROUP FE) (SH4A-GROUP FE))
       "ftrv xmtrx, $fvn"
       (+ (f-op4 15) fvn (f-sub10 #x1fd))
       (c-call VOID "sh64_ftrv" (index-of fvn))
       (sh4-models ((unit u-exec)
		    (unit u-ftrv))))

(dshci jmp "Jump"
       ((SH4-GROUP CO) (SH4A-GROUP BR))
       "jmp @@$rn"
       (+ (f-op4 4) rn (f-sub8 43))
       (sequence ()
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc rn)
		 (set-delay 1 pc rn)
		 (cg-profile pc rn))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-jmp (cycles 2)))))

(dshci jsr "Jump to subroutine"
       ((SH4-GROUP CO) (SH4A-GROUP BR))
       "jsr @@$rn"
       (+ (f-op4 4) rn (f-sub8 11))
       (sequence ()
		 (set-delay 1 pr (add pc 4))
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc rn)
		 (set-delay 1 pc rn)
		 (cg-profile pc rn))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-jsr (cycles 2)))))

(dshci ldc-gbr "Load control register (GBR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "ldc $rn, gbr"
       (+ (f-op4 4) rn (f-sub8 30))
       (set gbr rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldc-gbr))))

(dshci ldc-vbr "Load control register (VBR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "ldc $rn, vbr"
       (+ (f-op4 4) rn (f-sub8 46))
       (set vbr rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec))))

(dshci ldc-sr "Load control register (SR)"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "ldc $rn, sr"
       (+ (f-op4 4) rn (f-sub8 14))
       (set (reg h-sr) rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldc-sr))))

(dshci ldcl-gbr "Load control register (GBR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "ldc.l @@${rn}+, gbr"
       (+ (f-op4 4) rn (f-sub8 23))
       (sequence ()
		 (set gbr (mem SI rn))
		 (set rn (add rn 4)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldcl)
		    (unit u-memory-access)
		    (unit u-load-gbr))))

(dshci ldcl-vbr "Load control register (VBR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "ldc.l @@${rn}+, vbr"
       (+ (f-op4 4) rn (f-sub8 39))
       (sequence ()
		 (set vbr (mem SI rn))
		 (set rn (add rn 4)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldcl-vbr)
		    (unit u-memory-access)
		    (unit u-load-vbr))))

(dshci lds-fpscr "Load status register (FPSCR)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "lds $rn, fpscr"
       (+ (f-op4 4) rn (f-sub8 106))
       (set fpscr rn)
       (sh2e-models ((unit u-use-gr (in usereg rn))
		     (unit u-lds-fpscr))))

(dshci ldsl-fpscr "Load status register (FPSCR)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "lds.l @@${rn}+, fpscr"
       (+ (f-op4 4) rn (f-sub8 102))
       (sequence ()
		 (set fpscr (mem SI rn))
		 (set rn (add rn 4)))
       (sh2e-models ((unit u-use-gr (in usereg rn))
		     (unit u-lds-fpscr)
		     (unit u-fpu-memory-access)
		     (unit u-ldsl-fpscr))))

(dshci lds-fpul "Load status register (FPUL)"
       ((SH2e-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "lds $rn, fpul"
       (+ (f-op4 4) rn (f-sub8 90))
       ; Use subword to convert rn's mode.
       (set fpul (subword SF rn 0))
       (sh2e-models ((unit u-use-gr (in usereg rn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-load-fpul))))

(dshci ldsl-fpul "Load status register (FPUL)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "lds.l @@${rn}+, fpul"
       (+ (f-op4 4) rn (f-sub8 86))
       (sequence ()
		 (set fpul (mem SF rn))
		 (set rn (add rn 4)))
       (sh2e-models ((unit u-use-gr (in usereg rn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-load-fpul))))

(dshci lds-mach "Load status register (MACH)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds $rn, mach"
       (+ (f-op4 4) rn (f-sub8 10))
       (set mach rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-exec)
		    (unit u-set-mac))))

(dshci ldsl-mach "Load status register (MACH), post-increment"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds.l @@${rn}+, mach"
       (+ (f-op4 4) rn (f-sub8 6))
       (sequence ()
		 (set mach (mem SI rn))
		 (set rn (add rn 4)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-mac))))

(dshci lds-macl "Load status register (MACL)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds $rn, macl"
       (+ (f-op4 4) rn (f-sub8 26))
       (set macl rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-exec)
		    (unit u-set-mac))))

(dshci ldsl-macl "Load status register (MACL), post-increment"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds.l @@${rn}+, macl"
       (+ (f-op4 4) rn (f-sub8 22))
       (sequence ()
		 (set macl (mem SI rn))
		 (set rn (add rn 4)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-mac))))

(dshci lds-pr "Load status register (PR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds $rn, pr"
       (+ (f-op4 4) rn (f-sub8 42))
       (set pr rn)
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-lds-pr))))

(dshci ldsl-pr "Load status register (PR), post-increment"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "lds.l @@${rn}+, pr"
       (+ (f-op4 4) rn (f-sub8 38))
       (sequence ()
		 (set pr (mem SI rn))
		 (set rn (add rn 4)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-lds-pr)
		    (unit u-memory-access)
		    (unit u-load-pr))))

(dshci macl "Multiply and accumulate (long)"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP CO))
       "mac.l @@${rm}+, @@${rn}+"
       (+ (f-op4 0) rn rm (f-sub4 15))
       (sequence ((DI tmpry) (DI mac) (DI result) (SI x) (SI y))
		 (set x (mem SI rn))
		 (set rn (add rn 4))
		 (if (eq (index-of rn) (index-of rm))
		     (sequence ()
			       (set rn (add rn 4))
			       (set rm (add rm 4))))
		 (set y (mem SI rm))
		 (set rm (add rm 4))
		 (set tmpry (mul (zext DI x) (zext DI y)))
		 (set mac (or DI (sll (zext DI mach) 32) (zext DI macl)))
		 (set result (add mac tmpry))
		 (sequence ()
			   (if sbit
			       (sequence ((SI min) (SI max))
					 (set max (srl (inv DI 0) 16))
					; Preserve bit 48 for sign.
					 (set min (srl (inv DI 0) 15))
					 (if (gt result max)
					     (set result max)
					     (if (lt result min)
						 (set result min)))))
			   (set mach (subword SI result 0))
			   (set macl (subword SI result 1))))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-macl))))

(dshci macw "Multiply and accumulate (word)"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "mac.w @@${rm}+, @@${rn}+"
       (+ (f-op4 4) rn rm (f-sub4 15))
       (sequence ((SI tmpry) (DI mac) (DI result) (HI x) (HI y))
		 (set x (mem HI rn))
		 (set rn (add rn 2))
		 (if (eq (index-of rn) (index-of rm))
		     (sequence ()
			       (set rn (add rn 2))
			       (set rm (add rm 2))))
		 (set y (mem HI rm))
		 (set rm (add rm 2))
		 (set tmpry (mul (zext SI x) (zext SI y)))
		 (if sbit
		     (sequence ()
			       (if (add-oflag tmpry macl 0)
				   (set mach 1))
			       (set macl (add tmpry macl)))
		     (sequence ()
			       (set mac (or DI (sll (zext DI mach) 32) (zext DI macl)))
			       (set result (add mac (ext DI tmpry)))
			       (set mach (subword SI result 0))
			       (set macl (subword SI result 1)))))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-macw))))

(dshci mov "Move"
       ((SH4-GROUP MT) (SH4A-GROUP MT))
       "mov $rm64, $rn64"
       (+ (f-op4 6) rn64 rm64 (f-sub4 3))
       (set rn64 rm64)
       (all-models ((unit u-use-gr (in usereg rm64))
		    (unit u-exec))))

(dshci movi "Move immediate"
       ((SH4-GROUP EX) (SH4A-GROUP MT))
       "mov #$imm8, $rn"
       (+ (f-op4 14) rn imm8)
       (set rn (ext DI (and QI imm8 255)))
       ())

(dshci movi20 "Move immediate"
       ((SH2a-nofpu-MACH) 32-BIT-INSN)
       "movi20 #$imm20, $rn"
       (+ (f-op4 0) (f-sub4 0) rn imm20)
       (set rn imm20)
       (sh2a-nofpu-models ((unit u-exec))))

(dshci movb1 "Store byte to memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b $rm, @@$rn"
       (+ (f-op4 2) rn rm (f-sub4 0))
       (set (mem UQI rn) (subword UQI rm 3))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movb2 "Store byte to memory (register indirect w/ pre-decrement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b $rm, @@-$rn"
       (+ (f-op4 2) rn rm (f-sub4 4))
       (sequence ((DI addr))
		 (set addr (sub rn 1))
		 (set (mem UQI addr) (subword UQI rm 3))
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movb3 "Store byte to memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b $rm, @@(r0,$rn)"
       (+ (f-op4 0) rn rm (f-sub4 4))
       (set (mem UQI (add r0 rn)) (subword UQI rm 3))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movb4 "Store byte to memory (GBR-relative w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b r0, @@($imm8, gbr)"
       (+ (f-op8 #xc0) imm8)
       (sequence ((DI addr))
		 (set addr (add gbr imm8))
		 (set (mem UQI addr) (subword UQI r0 3)))
       (all-models ((unit u-exec)
		    (unit u-sx)
		    (unit u-memory-access))))

(dshci movb5 "Store byte to memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b r0, @@($imm4, $rm)"
       (+ (f-op8 #x80) rm imm4)
       (sequence ((DI addr))
		 (set addr (add rm imm4))
		 (set (mem UQI addr) (subword UQI r0 3)))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movb6 "Load byte from memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b @@$rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 0))
       (set rn (ext SI (mem QI rm)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movb7 "Load byte from memory (register indirect w/ post-increment)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b @@${rm}+, $rn"
       (+ (f-op4 6) rn rm (f-sub4 4))
       (sequence ((QI data))
		 (set data (mem QI rm))
		 (if (eq (index-of rm) (index-of rn))
		     (set rm (ext SI data))
		     (set rm (add rm 1)))
		 (set rn (ext SI data)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movb8 "Load byte from memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b @@(r0, $rm), $rn"
       (+ (f-op4 0) rn rm (f-sub4 12))
       (set rn (ext SI (mem QI (add r0 rm))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movb9 "Load byte from memory (GBR-relative with displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b @@($imm8, gbr), r0"
       (+ (f-op8 #xc4) imm8)
       (set r0 (ext SI (mem QI (add gbr imm8))))
       (all-models ((unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg r0)))))

(dshci movb10 "Load byte from memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.b @@($imm4, $rm), r0"
       (+ (f-op8 #x84) rm imm4)
       (set r0 (ext SI (mem QI (add rm imm4))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg r0)))))

(dshci movl1 "Store long word to memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l $rm, @@$rn"
       (+ (f-op4 2) rn rm (f-sub4 2))
       (set (mem SI rn) rm)
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movl2 "Store long word to memory (register indirect w/ pre-decrement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l $rm, @@-$rn"
       (+ (f-op4 2) rn rm (f-sub4 6))
       (sequence ((SI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) rm)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movl3 "Store long word to memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l $rm, @@(r0, $rn)"
       (+ (f-op4 0) rn rm (f-sub4 6))
       (set (mem SI (add r0 rn)) rm)
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movl4 "Store long word to memory (GBR-relative w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l r0, @@($imm8x4, gbr)"
       (+ (f-op8 #xc2) imm8x4)
       (set (mem SI (add gbr imm8x4)) r0)
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-sx)
		    (unit u-memory-access))))

(dshci movl5 "Store long word to memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l $rm, @@($imm4x4, $rn)"
       (+ (f-op4 1) rn rm imm4x4)
       (set (mem SI (add rn imm4x4)) rm)
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movl6 "Load long word to memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@$rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 2))
       (set rn (mem SI rm))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movl7 "Load long word from memory (register indirect w/ post-increment)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@${rm}+, $rn"
       (+ (f-op4 6) rn rm (f-sub4 6))
       (sequence ()
		 (set rn (mem SI rm))
		 (if (eq (index-of rm) (index-of rn))
		     (set rm rn)
		     (set rm (add rm 4))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movl8 "Load long word from memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@(r0, $rm), $rn"
       (+ (f-op4 0) rn rm (f-sub4 14))
       (set rn (mem SI (add r0 rm)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movl9 "Load long word from memory (GBR-relative w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@($imm8x4, gbr), r0"
       (+ (f-op8 #xc6) imm8x4)
       (set r0 (mem SI (add gbr imm8x4)))
       (all-models ((unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg r0)))))

(dshci movl10 "Load long word from memory (PC-relative w/ displacement)"
       (ILLSLOT (SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@($imm8x4, pc), $rn"
       (+ (f-op4 13) rn imm8x4)
       (set rn (mem SI (add imm8x4 (and (add pc 4) (inv 3)))))
       (all-models ((unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movl11 "Load long word from memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.l @@($imm4x4, $rm), $rn"
       (+ (f-op4 5) rn rm imm4x4)
       (set rn (mem SI (add rm imm4x4)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movl12 "Load long word from memory (register indirect w/ displacement)"
       ((SH2a-nofpu-MACH) 32-BIT-INSN)
       "mov.l @@($imm12x4, $rm), $rn"
       (+ (f-op4 3) (f-sub4 1) (f-16-4 6) rn rm imm12x4)
       (set rn (mem SI (add rm imm12x4)))
       (sh2a-nofpu-models ((unit u-use-gr (in usereg rm))
			   (unit u-exec)
			   (unit u-memory-access)
			   (unit u-load-gr (out loadreg rn)))))

(dshci movl13 "Store long word to memory (register indirect w/ displacement)"
       ((SH2a-nofpu-MACH) 32-BIT-INSN)
       "mov.l $rm, @@($imm12x4, $rn)"
       (+ (f-op4 3) (f-sub4 1) (f-16-4 2) rn rm imm12x4)
       (set (mem SI (add rn imm12x4)) rm)
       (sh2a-nofpu-models ((unit u-use-gr (in usereg rm))
			   (unit u-exec)
			   (unit u-memory-access))))

(dshci movw1 "Store word to memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w $rm, @@$rn"
       (+ (f-op4 2) rn rm (f-sub4 1))
       (set (mem HI rn) (subword HI rm 1))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movw2 "Store word to memory (register indirect w/ pre-decrement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w $rm, @@-$rn"
       (+ (f-op4 2) rn rm (f-sub4 5))
       (sequence ((DI addr))
		 (set addr (sub rn 2))
		 (set (mem HI addr) (subword HI rm 1))
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movw3 "Store word to memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w $rm, @@(r0, $rn)"
       (+ (f-op4 0) rn rm (f-sub4 5))
       (set (mem HI (add r0 rn)) (subword HI rm 1))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movw4 "Store word to memory (GBR-relative w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w r0, @@($imm8x2, gbr)"
       (+ (f-op8 #xc1) imm8x2)
       (set (mem HI (add gbr imm8x2)) (subword HI r0 1))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-sx)
		    (unit u-memory-access))))

(dshci movw5 "Store word to memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w r0, @@($imm4x2, $rm)"
       (+ (f-op8 #x81) rm imm4x2)
       (set (mem HI (add rm imm4x2)) (subword HI r0 1))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci movw6 "Load word from memory (register indirect w/ zero displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@$rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 1))
       (set rn (ext SI (mem HI rm)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movw7 "Load word from memory (register indirect w/ post-increment)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@${rm}+, $rn"
       (+ (f-op4 6) rn rm (f-sub4 5))
       (sequence ((HI data))
		 (set data (mem HI rm))
		 (if (eq (index-of rm) (index-of rn))
		     (set rm (ext SI data))
		     (set rm (add rm 2)))
		 (set rn (ext SI data)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movw8 "Load word from memory (register/register indirect)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@(r0, $rm), $rn"
       (+ (f-op4 0) rn rm (f-sub4 13))
       (set rn (ext SI (mem HI (add r0 rm))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-gr (in usereg r0))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movw9 "Load word from memory (GBR-relative w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@($imm8x2, gbr), r0"
       (+ (f-op8 #xc5) imm8x2)
       (set r0 (ext SI (mem HI (add gbr imm8x2))))
       (all-models ((unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg r0)))))

(dshci movw10 "Load word from memory (PC-relative w/ displacement)"
       (ILLSLOT (SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@($imm8x2, pc), $rn"
       (+ (f-op4 9) rn imm8x2)
       (set rn (ext SI (mem HI (add (add pc 4) imm8x2))))
       (all-models ((unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg rn)))))

(dshci movw11 "Load word from memory (register indirect w/ displacement)"
       ((SH4-GROUP LS) (SH4A-GROUP LS))
       "mov.w @@($imm4x2, $rm), r0"
       (+ (f-op8 #x85) rm imm4x2)
       (set r0 (ext SI (mem HI (add rm imm4x2))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-memory-access)
		    (unit u-load-gr (out loadreg r0)))))

(dshci mova "Move effective address"
       (ILLSLOT (SH4-GROUP EX) (SH4A-GROUP LS))
       "mova @@($imm8x4, pc), r0"
       (+ (f-op8 #xc7) imm8x4)
       (set r0 (add (and (add pc 4) (inv 3)) imm8x4))
       ())

(dshci movcal "Move with cache block allocation"
       ((SH4-nofpu-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "movca.l r0, @@$rn"
       (+ (f-op4 0) rn (f-sub8 #xc3))
       (set (mem SI rn) r0)
       (sh4-nofpu-models ((unit u-use-gr (in usereg rn))
			  (unit u-ocb (cycles 6)))))
       
(dshci movcol "Move Conditional"
       ((SH4a-nofpu-MACH) (SH4A-GROUP CO))
       "movco.l r0, @@$rn"
       (+ (f-op4 0) rn (f-sub8 #x73))
       ; Never executes since LDST and movli are not implemented
       (set rn rn) ; hack to allow profiling
       (sh4a-nofpu-models ((unit u-use-gr (in usereg rn))
			   (unit u-exec))))

(dshci movt "Move t-bit"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "movt $rn"
       (+ (f-op4 0) rn (f-sub8 41))
       (set rn (zext SI tbit))
       (all-models ((unit u-use-tbit)
		    (unit u-exec))))

(dshci movual "Move unaligned"
       ((SH4a-nofpu-MACH) (SH4A-GROUP LS))
       "movua.l @@$rn, r0"
       (+ (f-op4 4) rn (f-sub8 #xa9))
       (set r0 (c-call SI "sh64_movua" pc rn))
       (sh4a-nofpu-models ((unit u-use-gr (in usereg rn))
			   (unit u-exec)
			   (unit u-memory-access (cycles 1))
			   (unit u-load-gr (out loadreg r0)))))

(dshci movual2 "Move unaligned with post increment"
       ((SH4a-nofpu-MACH) (SH4A-GROUP LS))
       "movua.l @@$rn+, r0"
       (+ (f-op4 4) rn (f-sub8 #xe9))
       (sequence ()
		 (set r0 (c-call SI "sh64_movua" pc rn))
		 (set rn (add rn 4)))
       (sh4a-nofpu-models ((unit u-use-gr (in usereg rn))
			   (unit u-exec)
			   (unit u-memory-access (cycles 1))
			   (unit u-load-gr (out loadreg r0)))))

(dshci mull "Multiply"
       ((SH2-MACH) (SH4-GROUP CO) (SH4A-GROUP EX))
       "mul.l $rm, $rn"
       (+ (f-op4 0) rn rm (f-sub4 7))
       (set macl (mul rm rn))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-mull))))

(dshci mulsw "Multiply words (signed)"
       ((SH4-GROUP CO) (SH4A-GROUP EX))
       "muls.w $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 15))
       (set macl (mul (ext SI (subword HI rm 1)) (ext SI (subword HI rn 1))))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-mulsw)
		    (unit u-multiply))))

(dshci muluw "Multiply words (unsigned)"
       ((SH4-GROUP CO) (SH4A-GROUP EX))
       "mulu.w $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 14))
       (set macl (mul (zext SI (subword HI rm 1)) (zext SI (subword HI rn 1))))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-mulsw)
		    (unit u-multiply))))

(dshci neg "Negate"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "neg $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 11))
       (set rn (neg rm))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec))))

(dshci negc "Negate with carry"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "negc $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 10))
       (sequence ((BI flag))
		 (set flag (sub-cflag 0 rm tbit))
		 (set rn (subc 0 rm tbit))
		 (set tbit flag))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci nop "No operation"
       ((SH4-GROUP MT) (SH4A-GROUP MT))
       "nop"
       (+ (f-op16 9))
       (nop)
       ())

(dshci not "Bitwise NOT"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "not $rm64, $rn64"
       (+ (f-op4 6) rn64 rm64 (f-sub4 7))
       (set rn64 (inv rm64))
       (all-models ((unit u-use-gr (in usereg rm64))
		    (unit u-exec))))

(dshci ocbi "Invalidate operand cache block"
       ((SH4-nofpu-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "ocbi @@$rn"
       (+ (f-op4 0) rn (f-sub8 147))
       (sequence ()
		 (set rn rn) ; appease CGEN profiling generation for now
		 (unimp "ocbi"))
       (sh4-nofpu-models ((unit u-use-gr (in usereg rn))
			  (unit u-ocb (cycles 1)))))

(dshci ocbp "Purge operand cache block"
       ((SH4-nofpu-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "ocbp @@$rn"
       (+ (f-op4 0) rn (f-sub8 163))
       (sequence ()
		 (set rn rn) ; appease CGEN profiling generation for now
		 (unimp "ocbp"))
       (sh4-nofpu-models ((unit u-use-gr (in usereg rn))
			  (unit u-ocb (cycles 4)))))

(dshci ocbwb "Write back operand cache block"
       ((SH4-nofpu-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "ocbwb @@$rn"
       (+ (f-op4 0) rn (f-sub8 179))
       (sequence ()
		 (set rn rn) ; appease CGEN profiling generation for now
		 (unimp "ocbwb"))
       (sh4-nofpu-models ((unit u-use-gr (in usereg rn))
			  (unit u-ocb (cycles 4)))))

(dshci or "Bitwise OR"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "or $rm64, $rn64"
       (+ (f-op4 2) rn64 rm64 (f-sub4 11))
       (set rn64 (or rm64 rn64))
       (all-models ((unit u-use-gr (in usereg rm64))
		    (unit u-use-gr (in usereg rn64))
		    (unit u-exec))))

(dshci ori "Bitwise OR immediate"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "or #$uimm8, r0"
       (+ (f-op8 #xcb) uimm8)
       (set r0 (or r0 (zext DI uimm8)))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-exec))))

(dshci orb "Bitwise OR immediate"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "or.b #$imm8, @@(r0, gbr)"
       (+ (f-op8 #xcf) imm8)
       (sequence ((DI addr) (UQI data))
		 (set addr (add r0 gbr))
		 (set data (or (mem UQI addr) imm8))
		 (set (mem UQI addr) data))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-logic-b)
		    (unit u-memory-access))))

(dshci pref "Prefetch data"
       ((SH3-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "pref @@$rn"
       (+ (f-op4 0) rn (f-sub8 131))
       (c-call VOID "sh64_pref" rn)
       (sh3-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci rotcl "Rotate with carry left"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "rotcl $rn"
       (+ (f-op4 4) rn (f-sub8 36))
       (sequence ((BI temp))
		 (set temp (srl rn 31))
		 (set rn (or (sll rn 1) tbit))
		 (set tbit (if BI temp 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci rotcr "Rotate with carry right"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "rotcr $rn"
       (+ (f-op4 4) rn (f-sub8 37))
       (sequence ((BI lsbit) (SI temp))
		 (set lsbit (if BI (eq (and rn 1) 0) 0 1))
		 (set temp tbit)
		 (set rn (or (srl rn 1) (sll temp 31)))
		 (set tbit (if BI lsbit 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci rotl "Rotate left"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "rotl $rn"
       (+ (f-op4 4) rn (f-sub8 4))
       (sequence ((BI temp))
		 (set temp (srl rn 31))
		 (set rn (or (sll rn 1) temp))
		 (set tbit (if BI temp 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci rotr "Rotate right"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "rotr $rn"
       (+ (f-op4 4) rn (f-sub8 5))
       (sequence ((BI lsbit) (SI temp))
		 (set lsbit (if BI (eq (and rn 1) 0) 0 1))
		 (set temp lsbit)
		 (set rn (or (srl rn 1) (sll temp 31)))
		 (set tbit (if BI lsbit 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci rts "Return from subroutine"
       ((SH4-GROUP CO) (SH4A-GROUP BR))
       "rts"
       (+ (f-op16 11))
       (sequence ()
		 (set pc (add pc 2)) ; kludge to get it marked as referenced
		 (save-delayed-pc pr)
		 (set-delay 1 pc pr)
		 (notify-ret pr))
       ; delayed branch stalls 1 cycle
       (all-models ((unit u-jmp (cycles 2)))))

(dshci sets "Set S-bit"
       ((SH3-MACH) (SH4-GROUP CO) (SH4A-GROUP EX))
       "sets"
       (+ (f-op16 88))
       (set sbit 1)
       (sh3-models ((unit u-exec)
		    (unit u-set-sr-bit))))
;		    (unit u-set-sr))))

(dshci sett "Set T-bit"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "sett"
       (+ (f-op16 24))
       (set tbit 1)
       (all-models ((unit u-exec)
		    (unit u-use-tbit)
		    (unit u-set-sr-bit))))
;		    (unit u-set-sr))))

(dshci shad "Shift arithmetic dynamic"
       ((MACH sh2a-nofpu,sh2a-fpu,sh3,sh3e,sh4-nofpu,sh4,sh4a-nofpu,sh4a,sh4al,sh5) (SH4-GROUP EX) (SH4A-GROUP EX))
       "shad $rm, $rn"
       (+ (f-op4 4) rn rm (f-sub4 12))
       (sequence ((SI shamt))
		 (set shamt (and rm 31))
		 (if (ge rm 0)
		     (set rn (sll rn shamt))
		     (if (ne shamt 0)
			 (set rn (sra rn (sub 32 shamt)))
			 (if (lt rn 0)
			     (set rn (neg 1))
			     (set rn 0)))))
       (shad-models ((unit u-use-gr (in usereg rn))
		     (unit u-use-gr (in usereg rm))
		     (unit u-exec)
		     (unit u-shift))))

(dshci shal "Shift left arithmetic one bit"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shal $rn"
       (+ (f-op4 4) rn (f-sub8 32))
       (sequence ((BI t))
		 (set t (srl rn 31))
		 (set rn (sll rn 1))
		 (set tbit (if BI t 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci shar "Shift right arithmetic one bit"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shar $rn"
       (+ (f-op4 4) rn (f-sub8 33))
       (sequence ((BI t))
		 (set t (and rn 1))
		 (set rn (sra rn 1))
		 (set tbit (if BI t 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci shld "Shift logical dynamic"
       ((SH3-MACH) (SH4-GROUP EX) (SH4A-GROUP EX))
       "shld $rm, $rn"
       (+ (f-op4 4) rn rm (f-sub4 13))
       (sequence ((SI shamt))
		 (set shamt (and rm 31))
		 (if (ge rm 0)
		     (set rn (sll rn shamt))
		     (if (ne shamt 0)
			 (set rn (srl rn (sub 32 shamt)))
			 (set rn 0))))
       (sh3-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shll "Shift left logical one bit"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shll $rn"
       (+ (f-op4 4) rn (f-sub8 0))
       (sequence ((BI t))
		 (set t (srl rn 31))
		 (set rn (sll rn 1))
		 (set tbit (if BI t 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci shll2 "Shift left logical two bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shll2 $rn"
       (+ (f-op4 4) rn (f-sub8 8))
       (set rn (sll rn 2))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shll8 "Shift left logical eight bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shll8 $rn"
       (+ (f-op4 4) rn (f-sub8 24))
       (set rn (sll rn 8))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shll16 "Shift left logical sixteen bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shll16 $rn"
       (+ (f-op4 4) rn (f-sub8 40))
       (set rn (sll rn 16))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shlr "Shift right logical one bit"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shlr $rn"
       (+ (f-op4 4) rn (f-sub8 1))
       (sequence ((BI t))
		 (set t (and rn 1))
		 (set rn (srl rn 1))
		 (set tbit (if BI t 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-shift)
		    (unit u-set-sr-bit))))

(dshci shlr2 "Shift right logical two bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shlr2 $rn"
       (+ (f-op4 4) rn (f-sub8 9))
       (set rn (srl rn 2))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shlr8 "Shift right logical eight bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shlr8 $rn"
       (+ (f-op4 4) rn (f-sub8 25))
       (set rn (srl rn 8))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci shlr16 "Shift right logical sixteen bits"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "shlr16 $rn"
       (+ (f-op4 4) rn (f-sub8 41))
       (set rn (srl rn 16))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-exec)
		    (unit u-shift))))

(dshci stc-gbr "Store control register (GBR)"
       ((SH4-GROUP CO))
       "stc gbr, $rn"
       (+ (f-op4 0) rn (f-sub8 18))
       (set rn gbr)
       ())

(dshci stc-vbr "Store control register (VBR)"
       ((SH4-GROUP CO))
       "stc vbr, $rn"
       (+ (f-op4 0) rn (f-sub8 34))
       (set rn vbr)
       (all-models ((unit u-stc-vbr))))

(dshci stcl-gbr "Store control register (GBR)"
       ((SH4-GROUP CO))
       "stc.l gbr, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 19))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) gbr)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldcl (cycles 2))
		    (unit u-memory-access))))

(dshci stcl-vbr "Store control register (VBR)"
       ((SH4-GROUP CO))
       "stc.l vbr, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 35))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) vbr)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-ldcl (cycles 2))
		    (unit u-memory-access))))

(dshci sts-fpscr "Store status register (FPSCR)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "sts fpscr, $rn"
       (+ (f-op4 0) rn (f-sub8 106))
       (set rn fpscr)
       (sh2e-models ((unit u-use-fpscr)
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-fpu-load-gr (out loadreg rn)))))

(dshci stsl-fpscr "Store status register (FPSCR)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "sts.l fpscr, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 98))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) fpscr)
		 (set rn addr))
       (sh2e-models ((unit u-use-gr (in usereg rn))
		     (unit u-use-fpscr)
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access))))

(dshci sts-fpul "Store status regitser (FPUL)"
       ((SH2e-MACH) (SH4-GROUP LS) (SH4A-GROUP LS))
       "sts fpul, $rn"
       (+ (f-op4 0) rn (f-sub8 90))
       (set rn (subword SI fpul 0))
       (sh2e-models ((unit u-use-fpul)
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access)
		     (unit u-fpu-load-gr (out loadreg rn)))))

(dshci stsl-fpul "Store status register (FPUL)"
       ((SH2e-MACH) (SH4-GROUP CO) (SH4A-GROUP LS))
       "sts.l fpul, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 82))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SF addr) fpul)
		 (set rn addr))
       (sh2e-models ((unit u-use-fpul)
		     (unit u-use-gr (in usereg rn))
		     (unit u-exec)
		     (unit u-maybe-fpu)
		     (unit u-fpu-memory-access))))

(dshci sts-mach "Store status register (MACH)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts mach, $rn"
       (+ (f-op4 0) rn (f-sub8 10))
       (set rn mach)
       (all-models ((unit u-use-multiply-result)
		    (unit u-write-back)
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci stsl-mach "Store status register (MACH)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts.l mach, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 2))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) mach)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-write-back)
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci sts-macl "Store status register (MACL)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts macl, $rn"
       (+ (f-op4 0) rn (f-sub8 26))
       (set rn macl)
       (all-models ((unit u-use-multiply-result)
		    (unit u-write-back)
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci stsl-macl "Store status register (MACL)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts.l macl, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 18))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) macl)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-multiply-result)
		    (unit u-write-back)
		    (unit u-exec)
		    (unit u-memory-access))))

(dshci sts-pr "Store status register (PR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts pr, $rn"
       (+ (f-op4 0) rn (f-sub8 42))
       (set rn pr)
       (all-models ((unit u-use-pr)
		    (unit u-sts-pr))))

(dshci stsl-pr "Store status register (PR)"
       ((SH4-GROUP CO) (SH4A-GROUP LS))
       "sts.l pr, @@-$rn"
       (+ (f-op4 4) rn (f-sub8 34))
       (sequence ((DI addr))
		 (set addr (sub rn 4))
		 (set (mem SI addr) pr)
		 (set rn addr))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-pr)
		    (unit u-sts-pr)
		    (unit u-memory-access))))

(dshci sub "Subtract"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "sub $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 8))
       (set rn (sub rn rm))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec))))

(dshci subc "Subtract and detect carry"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "subc $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 10))
       (sequence ((BI flag))
		 (set flag (sub-cflag rn rm tbit))
		 (set rn (subc rn rm tbit))
		 (set tbit flag))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec))))

(dshci subv "Subtract and detect overflow"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "subv $rm, $rn"
       (+ (f-op4 3) rn rm (f-sub4 11))
       (sequence ((BI t))
		 (set t (sub-oflag rn rm 0))
		 (set rn (sub rn rm))
		 (set tbit (if BI t 1 0)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci swapb "Swap bytes"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "swap.b $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 8))
       (sequence ((UHI top-half) (UQI byte1) (UQI byte0))
		 (set top-half (subword HI rm 0))
		 (set byte1 (subword QI rm 2))
		 (set byte0 (subword QI rm 3))
		 (set rn (or SI (sll SI top-half 16) (or SI (sll SI byte0 8) byte1))))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci swapw "Swap words"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "swap.w $rm, $rn"
       (+ (f-op4 6) rn rm (f-sub4 9))
       (set rn (or (srl rm 16) (sll rm 16)))
       (all-models ((unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))

(dshci tasb "Test and set byte"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "tas.b @@$rn"
       (+ (f-op4 4) rn (f-sub8 27))
       (sequence ((UQI byte))
		 (set byte (mem UQI rn))
		 (set tbit (if BI (eq byte 0) 1 0))
		 (set byte (or byte 128))
		 (set (mem UQI rn) byte))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-tbit)
		    (unit u-tas)
		    (unit u-set-sr-bit)
		    (unit u-memory-access))))

(dshci trapa "Trap"
       (ILLSLOT (SH4-GROUP CO) (SH4A-GROUP CO))
       "trapa #$uimm8"
       (+ (f-op8 #xc3) uimm8)
       (c-call "sh64_compact_trapa" uimm8 pc)
       (all-models ((unit u-trap))))

(dshci tst "Test and set t-bit"
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "tst $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 8))
       (set tbit (if BI (eq (and rm rn) 0) 1 0))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci tsti "Test and set t-bit immediate" 
       ((SH4-GROUP MT) (SH4A-GROUP EX))
       "tst #$uimm8, r0"
       (+ (f-op8 #xc8) uimm8)
       (set tbit (if BI (eq (and r0 (zext SI uimm8)) 0) 1 0))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-use-tbit)
		    (unit u-exec)
		    (unit u-set-sr-bit))))

(dshci tstb "Test and set t-bit immedate with memory byte"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "tst.b #$imm8, @@(r0, gbr)"
       (+ (f-op8 #xcc) imm8)
       (sequence ((DI addr))
		 (set addr (add r0 gbr))
		 (set tbit (if BI (eq (and (mem UQI addr) imm8) 0) 1 0)))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-use-tbit)
		    (unit u-exec (cycles 3))
		    (unit u-sx (cycles 3))
		    (unit u-set-sr-bit)
		    (unit u-memory-access))))

(dshci xor "Exclusive OR"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "xor $rm64, $rn64"
       (+ (f-op4 2) rn64 rm64 (f-sub4 10))
       (set rn64 (xor rn64 rm64))
       (all-models ((unit u-use-gr (in usereg rn64))
		    (unit u-use-gr (in usereg rm64))
		    (unit u-exec))))

(dshci xori "Exclusive OR immediate"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "xor #$uimm8, r0"
       (+ (f-op8 #xca) uimm8)
       (set r0 (xor r0 (zext DI uimm8)))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-exec))))

(dshci xorb "Exclusive OR immediate with memory byte"
       ((SH4-GROUP CO) (SH4A-GROUP CO))
       "xor.b #$imm8, @@(r0, gbr)"
       (+ (f-op8 #xce) imm8)
       (sequence ((DI addr) (UQI data))
		 (set addr (add r0 gbr))
		 (set data (xor (mem UQI addr) imm8))
		 (set (mem UQI addr) data))
       (all-models ((unit u-use-gr (in usereg r0))
		    (unit u-logic-b)
		    (unit u-memory-access))))

(dshci xtrct "Extract"
       ((SH4-GROUP EX) (SH4A-GROUP EX))
       "xtrct $rm, $rn"
       (+ (f-op4 2) rn rm (f-sub4 13))
       (set rn (or (sll rm 16) (srl rn 16)))
       (all-models ((unit u-use-gr (in usereg rn))
		    (unit u-use-gr (in usereg rm))
		    (unit u-exec)
		    (unit u-shift))))
@


1.6.2.1
log
@Import sources from cgen/cpu directory

cgen/cpu/ChangeLog:

 	* cris.cpu, frv.cpu, iq10.cpu, iq2000.cpu, iq2000m.cpu, lm32.cpu,
 	m32c.cpu, m32r.cpu, mt.cpu, sh.cpu, sh64-compact.cpu,
 	sh64-media.cpu, xc16x.cpu: New file, copied from cgen/cpu.
@
text
@d1 4
a4 23
; Hitachi SHcompact instruction set description.  -*- Scheme -*-
;
; Copyright 2000, 2007, 2009 Free Software Foundation, Inc.
;
; Contributed by Red Hat Inc; developed under contract from Hitachi
; Semiconductor (America) Inc.
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.
d8 2
a9 2
(define-pmacro (dshcf xname xcomment ignored xstart xlength)
  (dnf xname xcomment ((ISA compact)) xstart xlength))
d13 2
a14 2
(define-pmacro (dshcop xname xcomment ignored xhardware xfield)
  (dnop xname xcomment ((ISA compact)) xhardware xfield))
d33 28
d64 1
a64 1
  (print-name h-frc)
d73 1
a73 1
  (print-name h-drc)
d80 1
a80 1
  (print-name h-xf)
d94 1
a94 1
  (attrs VIRTUAL (ISA compact))
d104 1
a104 1
  (attrs VIRTUAL (ISA compact))
d141 14
d156 2
a157 2
  (name h-fpccr)
  (comment "SHcompact floating point status/control register")
d160 2
a161 6
  (get () (or (or (or (raw-reg h-fpscr) (sll SI prbit 19)) (sll SI szbit 20)) (sll SI frbit 21)))
  (set (newvalue) (sequence ()
			    (set (reg h-fpscr) newvalue)
			    (set prbit (and (srl newvalue 19) 1))
			    (set szbit (and (srl newvalue 20) 1))
			    (set frbit (and (srl newvalue 21) 1))))
d165 2
a166 2
  (name h-gbr)
  (comment "Global base register")
d169 2
a170 2
  (get () (subword SI (raw-reg h-gr 16) 1))
  (set (newval) (set (raw-reg h-gr 16) (ext DI newval)))
d210 14
a223 7
(dshcf f-op4     "Opcode (4 bits)"         ()  15   4)
(dshcf f-op8     "Opcode (8 bits)"         ()  15   8)
(dshcf f-op16    "Opcode (16 bits)"        ()  15  16)

(dshcf f-sub4    "Sub opcode (4 bits)"     ()   3   4)
(dshcf f-sub8    "Sub opcode (8 bits)"     ()   7   8)
(dshcf f-sub10   "Sub opcode (10 bits)"    ()   9  10)
d225 1
a225 6
(dshcf f-rn      "Register selector n"     ()  11   4)
(dshcf f-rm      "Register selector m"     ()   7   4)

(dshcf f-8-1     "One bit at bit 8"        ()   8   1)

(df  f-disp8  "Displacement (8 bits)"  ((ISA compact) PCREL-ADDR) 7 8 INT
d229 1
a229 1
(df  f-disp12 "Displacement (12 bits)" ((ISA compact) PCREL-ADDR) 11 12 INT
d233 2
a234 2
(dshcf f-imm8    "Immediate (8 bits)"      ()   7   8)
(dshcf f-imm4    "Immediate (4 bits)"      ()   3   4)
d236 1
a236 1
(df f-imm4x2     "Immediate (4 bits)"      ((ISA compact)) 3 4 UINT
d240 1
a240 1
(df f-imm4x4     "Immediate (4 bits)"      ((ISA compact)) 3 4 UINT
d244 1
a244 1
(df f-imm8x2     "Immediate (8 bits)"      ((ISA compact)) 7 8 UINT
d248 1
a248 1
(df f-imm8x4     "Immediate (8 bits)"      ((ISA compact)) 7 8 UINT
d252 9
a260 1
(df f-dn "Double selector n" ((ISA compact)) 11 3 UINT
d264 1
a264 1
(df f-dm         "Double selector m"       ((ISA compact)) 7 3 UINT
d268 1
a268 1
(df f-vn         "Vector selector n"       ((ISA compact)) 11 2 UINT
d272 1
a272 1
(df f-vm         "Vector selector m"       ((ISA compact)) 9 2 UINT
d276 1
a276 1
(df f-xn         "Extended selector n"     ((ISA compact)) 11 3 UINT
d280 1
a280 1
(df f-xm         "Extended selector m"     ((ISA compact)) 7 3 UINT
d284 15
d308 4
d322 1
d331 2
d338 1
d341 1
a341 1
(dshcop fpscr  "Floating point status/control register" ()   h-fpccr f-nil)
a355 1

d357 1
a357 1
  (attrs (ISA compact)) (type h-frc) (index f-rm) (handlers (parse "fsd")))
d360 1
a360 1
  (attrs (ISA compact)) (type h-frc) (index f-rn))
d366 1
a366 1
(define-pmacro (dshci xname xcomment xattrs xsyntax xformat xsemantics)
d373 2
a374 4
    (semantics xsemantics)))

(define-pmacro (dr operand) (reg h-dr (index-of operand)))
(define-pmacro (xd x) (reg h-xd (and (index-of x) (inv QI 1))))
d377 1
a377 1
       ()
d380 4
a383 1
       (set rn (add rn rm)))
d386 1
a386 1
       ()
d389 3
a391 1
       (set rn (add rn (ext SI (and QI imm8 255)))))
d394 1
a394 1
       ()
d400 6
a405 1
		 (set tbit flag)))
d408 1
a408 1
       ()
d414 6
a419 1
		 (set tbit t)))
d422 1
a422 1
       ()
d425 4
a428 1
       (set rn64 (and rm64 rn64)))
d431 1
a431 1
       ()
d434 3
a436 1
       (set r0 (and r0 (zext DI uimm8))))
d439 1
a439 1
       ()
d445 4
a448 1
		 (set (mem UQI addr) data)))
d451 1
a451 1
       ()
d455 4
a458 1
	   (set pc disp8)))
d461 1
a461 1
       ()
d465 7
a471 1
	   (delay 1 (set pc disp8))))
d474 1
a474 1
       ()
d477 6
a482 1
       (delay 1 (set pc disp12)))
d485 1
a485 1
       ()
d488 7
a494 1
       (delay 1 (set pc (add (ext DI rn) (add pc 4)))))
d497 1
a497 1
       ()
d500 2
a501 1
       (c-call "sh64_break" pc))
d504 1
a504 1
       ()
d507 7
a513 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc disp12))))
d516 1
a516 1
       ()
d519 8
a526 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc (add (ext DI rn) (add pc 4))))))
d529 1
a529 1
       ()
d533 4
a536 1
	   (set pc disp8)))
d539 1
a539 1
       ()
d543 7
a549 1
	   (delay 1 (set pc disp8))))
d552 1
a552 1
       ()
d557 4
a560 1
		 (set mach 0)))
d563 1
a563 1
       ()
d566 4
a569 1
       (set sbit 0))
d572 1
a572 1
       ()
d575 5
a579 1
       (set tbit 0))
d582 1
a582 1
       ()
d585 6
a590 1
       (set tbit (eq rm rn)))
d593 1
a593 1
       ()
d596 5
a600 1
       (set tbit (eq r0 (ext SI (and QI imm8 255)))))
d603 1
a603 1
       ()
d606 6
a611 1
       (set tbit (ge rn rm)))
d614 1
a614 1
       ()
d617 6
a622 1
       (set tbit (gt rn rm)))
d625 1
a625 1
       ()
d628 6
a633 1
       (set tbit (gtu rn rm)))
d636 1
a636 1
       ()
d639 6
a644 1
       (set tbit (geu rn rm)))
d647 1
a647 1
       ()
d650 5
a654 1
       (set tbit (gt rn 0)))
d657 1
a657 1
       ()
d660 5
a664 1
       (set tbit (ge rn 0)))
d667 1
a667 1
       ()
d676 6
a681 1
		 (set tbit (if BI (gtu t 0) 1 0))))
d684 1
a684 1
       ()
d690 6
a695 1
		 (set tbit (if BI (eq (srl rm 31) (srl rn 31)) 0 1))))
d698 1
a698 1
       ()
d704 4
a707 1
		 (set mbit 0)))
d710 1
a710 1
       ()
d748 25
a772 1
		 (set tbit (if BI (eq qbit mbit) 1 0))))
d775 1
a775 1
       ()
d781 4
a784 1
		 (set macl (subword SI result 1))))
d787 1
a787 1
       ()
d793 4
a796 1
		 (set macl (subword SI result 1))))
d799 1
a799 1
       ()
d804 5
a808 1
		 (set tbit (eq rn 0))))
d811 1
a811 1
       ()
d814 4
a817 1
       (set rn (ext SI (subword QI rm 3))))
d820 1
a820 1
       ()
d823 4
a826 1
       (set rn (ext SI (subword HI rm 1))))
d829 1
a829 1
       ()
d832 4
a835 1
       (set rn (zext SI (subword QI rm 3))))
d838 1
a838 1
       ()
d841 4
a844 1
       (set rn (zext SI (subword HI rm 1))))
d847 1
a847 1
       (FP-INSN)
d851 6
a856 2
	   (set (dr fsdn) (c-call DF "sh64_fabsd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fabss" fsdn))))
d859 1
a859 1
       (FP-INSN)
d863 7
a869 2
	   (set (dr fsdn) (c-call DF "sh64_faddd" (dr fsdm) (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fadds" fsdm fsdn))))
d872 1
a872 1
       (FP-INSN)
d876 7
a882 2
	   (set tbit (c-call BI "sh64_fcmpeqd" (dr fsdm) (dr fsdn)))
	   (set tbit (c-call BI "sh64_fcmpeqs" fsdm fsdn))))
d885 1
a885 1
       (FP-INSN)
d889 7
a895 2
	   (set tbit (c-call BI "sh64_fcmpgtd" (dr fsdn) (dr fsdm)))
	   (set tbit (c-call BI "sh64_fcmpgts" fsdn fsdm))))
d898 1
a898 1
       (FP-INSN)
d900 6
a905 2
       (+ (f-op4 15) drn (f-8-1 10) (f-sub8 #xbd))
       (set fpul (c-call SF "sh64_fcnvds" drn)))
d908 1
a908 1
       (FP-INSN)
d910 6
a915 2
       (+ (f-op4 15) drn (f-8-1 0) (f-sub8 #xad))
       (set drn (c-call DF "sh64_fcnvsd" fpul)))
d918 1
a918 1
       (FP-INSN)
d922 6
a927 2
	   (set (dr fsdn) (c-call DF "sh64_fdivd" (dr fsdn) (dr fsdm)))
	   (set fsdn (c-call SF "sh64_fdivs" fsdn fsdm))))
d930 1
a930 1
       (FP-INSN)
d933 3
a935 8
       (sequence ((QI m) (QI n) (SF res))
		 (set m (index-of fvm))
		 (set n (index-of fvn))
		 (set res (c-call SF "sh64_fmuls" fvm fvn))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 1)) (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 2)) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 3)) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 3)) res)))
d938 2
a939 2
       (FP-INSN)
       "flds $frn"
d941 4
a944 1
       (set fpul frn))
d947 1
a947 1
       (FP-INSN)
d950 4
a953 1
       (set frn (c-call SF "sh64_fldi0")))
d956 1
a956 1
       (FP-INSN)
d959 4
a962 1
       (set frn (c-call SF "sh64_fldi1")))
d965 1
a965 1
       (FP-INSN)
d969 6
a974 2
	   (set (dr fsdn) (c-call DF "sh64_floatld" fpul))
	   (set fsdn (c-call SF "sh64_floatls" fpul))))
d977 1
a977 1
       (FP-INSN)
d980 7
a986 5
       (set frn (c-call SF "sh64_fmacs" (reg h-frc 0) frm frn)))

(define-pmacro (even x) (eq (and x 1) 0))
(define-pmacro (odd x)  (eq (and x 1) 1))
(define-pmacro (extd x) (odd (index-of x)))
d989 8
a996 14
       (FP-INSN)
       "fmov $frm, $frn"
       (+ (f-op4 15) frn frm (f-sub4 12))
       (if (not szbit)
	   ; single precision operation
	   (set frn frm)
	   ; double or extended operation
	   (if (extd frm)
	       (if (extd frn)
		   (set (xd frn) (xd frm))
		   (set (dr frn) (xd frm)))
	       (if (extd frn)
		   (set (xd frn) (dr frm))
		   (set (dr frn) (dr frm))))))
d999 3
a1001 3
       (FP-INSN)
       "fmov @@$rm, $frn"
       (+ (f-op4 15) frn rm (f-sub4 8))
d1003 7
a1009 6
	   ; single precision operation
	   (set frn (mem SF rm))
	   ; double or extended operation
	   (if (extd frn)
	       (set (xd frn) (mem DF rm))
	       (set (dr frn) (mem DF rm)))))
d1012 3
a1014 3
       (FP-INSN)
       "fmov @@${rm}+, frn"
       (+ (f-op4 15) frn rm (f-sub4 9))
a1015 1
	   ; single precision operation
d1017 1
a1017 1
		     (set frn (mem SF rm))
a1018 1
	   ; double or extended operation
d1020 7
a1026 4
		     (if (extd frn)
			 (set (xd frn) (mem DF rm))
			 (set (dr frn) (mem DF rm)))
		     (set rm (add rm 8)))))
d1029 3
a1031 3
       (FP-INSN)
       "fmov @@(r0, $rm), $frn"
       (+ (f-op4 15) frn rm (f-sub4 6))
d1033 8
a1040 6
	   ; single precision operation
	   (set frn (mem SF (add r0 rm)))
	   ; double or extended operation
	   (if (extd frn)
	       (set (xd frn) (mem DF (add r0 rm)))
	       (set (dr frn) (mem DF (add r0 rm))))))
d1043 3
a1045 3
       (FP-INSN)
       "fmov $frm, @@$rn"
       (+ (f-op4 15) rn frm (f-sub4 10))
d1047 7
a1053 6
	   ; single precision operation
	   (set (mem SF rn) frm)
	   ; double or extended operation
	   (if (extd frm)
	       (set (mem DF rn) (xd frm))
	       (set (mem DF rn) (dr frm)))))
d1056 3
a1058 3
       (FP-INSN)
       "fmov $frm, @@-$rn"
       (+ (f-op4 15) rn frm (f-sub4 11))
a1059 1
	   ; single precision operation
d1062 1
a1062 2
		     (set (mem SF rn) frm))
	   ; double or extended operation
d1065 6
a1070 3
		     (if (extd frm)
			 (set (mem DF rn) (xd frm))
			 (set (mem DF rn) (dr frm))))))
d1073 3
a1075 3
       (FP-INSN)
       "fmov $frm, @@(r0, $rn)"
       (+ (f-op4 15) rn frm (f-sub4 7))
d1077 29
a1105 6
	   ; single precision operation
	   (set (mem SF (add r0 rn)) frm)
	   ; double or extended operation
	   (if (extd frm)
	       (set (mem DF (add r0 rn)) (xd frm))
	       (set (mem DF (add r0 rn)) (dr frm)))))
d1108 1
a1108 1
       (FP-INSN)
d1112 7
a1118 2
	   (set (dr fsdn) (c-call DF "sh64_fmuld" (dr fsdm) (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fmuls" fsdm fsdn))))
d1121 1
a1121 1
       (FP-INSN)
d1125 6
a1130 2
	   (set (dr fsdn) (c-call DF "sh64_fnegd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fnegs" fsdn))))
d1133 1
a1133 1
       (FP-INSN)
d1136 2
a1137 1
       (set frbit (not frbit)))
d1140 1
a1140 1
       (FP-INSN)
d1143 2
a1144 1
       (set szbit (not szbit)))
d1147 1
a1147 1
       (FP-INSN)
d1151 5
a1155 2
	   (set (dr fsdn) (c-call DF "sh64_fsqrtd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fsqrts" fsdn))))
d1158 1
a1158 1
       (FP-INSN)
d1161 5
a1165 1
       (set frn fpul))
d1168 1
a1168 1
       (FP-INSN)
d1172 7
a1178 2
	   (set (dr fsdn) (c-call DF "sh64_fsubd" (dr fsdn) (dr fsdm)))
	   (set fsdn (c-call SF "sh64_fsubs" fsdn fsdm))))
d1181 1
a1181 1
       (FP-INSN)
d1185 6
a1190 2
		     (c-call SF "sh64_ftrcdl" (dr fsdn))
		     (c-call SF "sh64_ftrcsl" fsdn))))
d1193 1
a1193 1
       (FP-INSN)
d1196 3
a1198 22
       (sequence ((QI n) (SF res))
		 (set n (index-of fvn))
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 0) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 4)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 8)  (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 12) (reg h-frc (add n 3)))))
		 (set (reg h-frc n) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 1) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 5)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 9)  (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 13) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 1)) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 2) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 6)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 10) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 14) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 2)) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 3) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 7)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 11) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 15) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 3)) res)))
d1201 1
a1201 1
       ()
d1204 7
a1210 1
       (delay 1 (set pc rn)))
d1213 1
a1213 1
       ()
d1216 8
a1223 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc rn))))
d1225 2
a1226 2
(dshci ldc "Load control register (GBR)"
       ()
d1229 19
a1247 1
       (set gbr rn))
d1249 2
a1250 2
(dshci ldcl "Load control register (GBR)"
       ()
d1252 12
d1266 6
a1271 2
		 (set gbr (mem SI rn))
		 (set rn (add rn 4))))
d1274 1
a1274 1
       ()
d1277 3
a1279 1
       (set fpscr rn))
d1282 1
a1282 1
       ()
d1287 5
a1291 1
		 (set rn (add rn 4))))
d1294 1
a1294 1
       ()
d1298 6
a1303 1
       (set fpul (subword SF rn 0)))
d1306 1
a1306 1
       ()
d1311 6
a1316 1
		 (set rn (add rn 4))))
d1319 1
a1319 1
       ()
d1322 5
a1326 1
       (set mach rn))
d1329 1
a1329 1
       ()
d1334 6
a1339 1
		 (set rn (add rn 4))))
d1342 1
a1342 1
       ()
d1345 5
a1349 1
       (set macl rn))
d1352 1
a1352 1
       ()
d1357 6
a1362 1
		 (set rn (add rn 4))))
d1365 1
a1365 1
       ()
d1368 3
a1370 1
       (set pr rn))
d1373 1
a1373 1
       ()
d1378 5
a1382 1
		 (set rn (add rn 4))))
d1385 1
a1385 1
       ()
d1411 4
a1414 1
			   (set macl (subword SI result 1)))))
d1417 1
a1417 1
       ()
d1439 4
a1442 1
			       (set macl (subword SI result 1))))))
d1445 1
a1445 1
       ()
d1448 3
a1450 1
       (set rn64 rm64))
d1453 1
a1453 1
       ()
d1456 9
a1464 1
       (set rn (ext DI (and QI imm8 255))))
d1467 1
a1467 1
       ()
d1470 5
a1474 1
       (set (mem UQI rn) (subword UQI rm 3)))
d1477 1
a1477 1
       ()
d1483 5
a1487 1
		 (set rn addr)))
d1490 1
a1490 1
       ()
d1493 6
a1498 1
       (set (mem UQI (add r0 rn)) (subword UQI rm 3)))
d1501 1
a1501 1
       ()
d1506 4
a1509 1
		 (set (mem UQI addr) (subword UQI r0 3))))
d1512 1
a1512 1
       ()
d1517 5
a1521 1
		 (set (mem UQI addr) (subword UQI r0 3))))
d1524 1
a1524 1
       ()
d1527 5
a1531 1
       (set rn (ext SI (mem QI rm))))
d1534 1
a1534 1
       ()
d1542 5
a1546 1
		 (set rn (ext SI data))))
d1549 1
a1549 1
       ()
d1552 6
a1557 1
       (set rn (ext SI (mem QI (add r0 rm)))))
d1560 1
a1560 1
       ()
d1563 4
a1566 1
       (set r0 (ext SI (mem QI (add gbr imm8)))))
d1569 1
a1569 1
       ()
d1572 5
a1576 1
       (set r0 (ext SI (mem QI (add rm imm4)))))
d1579 1
a1579 1
       ()
d1582 5
a1586 1
       (set (mem SI rn) rm))
d1589 1
a1589 1
       ()
d1595 5
a1599 1
		 (set rn addr)))
d1602 1
a1602 1
       ()
d1605 6
a1610 1
       (set (mem SI (add r0 rn)) rm))
d1613 1
a1613 1
       ()
d1616 5
a1620 1
       (set (mem SI (add gbr imm8x4)) r0))
d1623 1
a1623 1
       ()
d1626 5
a1630 1
       (set (mem SI (add rn imm4x4)) rm))
d1633 1
a1633 1
       ()
d1636 5
a1640 1
       (set rn (mem SI rm)))
d1643 1
a1643 1
       ()
d1650 5
a1654 1
		     (set rm (add rm 4)))))
d1657 1
a1657 1
       ()
d1660 6
a1665 1
       (set rn (mem SI (add r0 rm))))
d1668 1
a1668 1
       ()
d1671 4
a1674 1
       (set r0 (mem SI (add gbr imm8x4))))
d1677 1
a1677 1
       (ILLSLOT)
d1680 4
a1683 1
       (set rn (mem SI (add imm8x4 (and (add pc 4) (inv 3))))))
d1686 1
a1686 1
       ()
d1689 24
a1712 1
       (set rn (mem SI (add rm imm4x4))))
d1715 1
a1715 1
       ()
d1718 5
a1722 1
       (set (mem HI rn) (subword HI rm 1)))
d1725 1
a1725 1
       ()
d1731 5
a1735 1
		 (set rn addr)))
d1738 1
a1738 1
       ()
d1741 6
a1746 1
       (set (mem HI (add r0 rn)) (subword HI rm 1)))
d1749 1
a1749 1
       ()
d1752 5
a1756 1
       (set (mem HI (add gbr imm8x2)) (subword HI r0 1)))
d1759 8
a1766 4
       ()
       "mov.w r0, @@($imm4x2, $rn)"
       (+ (f-op8 #x81) rn imm4x2)
       (set (mem HI (add rn imm4x2)) (subword HI r0 1)))
d1769 1
a1769 1
       ()
d1772 5
a1776 1
       (set rn (ext SI (mem HI rm))))
d1779 1
a1779 1
       ()
d1787 5
a1791 1
		 (set rn (ext SI data))))
d1794 1
a1794 1
       ()
d1797 6
a1802 1
       (set rn (ext SI (mem HI (add r0 rm)))))
d1805 1
a1805 1
       ()
d1808 4
a1811 1
       (set r0 (ext SI (mem HI (add gbr imm8x2)))))
d1814 1
a1814 1
       (ILLSLOT)
d1817 4
a1820 1
       (set rn (ext SI (mem HI (add (add pc 4) imm8x2)))))
d1823 1
a1823 1
       ()
d1826 5
a1830 1
       (set r0 (ext SI (mem HI (add rm imm4x2)))))
d1833 1
a1833 1
       (ILLSLOT)
d1836 2
a1837 1
       (set r0 (add (and (add pc 4) (inv 3)) imm8x4)))
d1840 1
a1840 1
       ()
d1843 3
a1845 1
       (set (mem SI rn) r0))
d1847 9
d1857 1
a1857 1
       ()
d1860 25
a1884 1
       (set rn (zext SI tbit)))
d1887 1
a1887 1
       ()
d1890 4
a1893 1
       (set macl (mul rm rn)))
d1896 1
a1896 1
       ()
d1899 5
a1903 1
       (set macl (mul (ext SI (subword HI rm 1)) (ext SI (subword HI rn 1)))))
d1906 1
a1906 1
       ()
d1909 5
a1913 1
       (set macl (mul (zext SI (subword HI rm 1)) (zext SI (subword HI rn 1)))))
d1916 1
a1916 1
       ()
d1919 3
a1921 1
       (set rn (neg rm)))
d1924 1
a1924 1
       ()
d1930 5
a1934 1
		 (set tbit flag)))
d1937 1
a1937 1
       ()
d1940 2
a1941 1
       (nop))
d1944 1
a1944 1
       ()
d1947 3
a1949 1
       (set rn64 (inv rm64)))
d1952 1
a1952 1
       ()
d1955 5
a1959 1
       (unimp "ocbi"))
d1962 1
a1962 1
       ()
d1965 5
a1969 1
       (unimp "ocbp"))
d1972 1
a1972 1
       ()
d1975 5
a1979 1
       (unimp "ocbwb"))
d1982 1
a1982 1
       ()
d1985 4
a1988 1
       (set rn64 (or rm64 rn64)))
d1991 1
a1991 1
       ()
d1994 3
a1996 1
       (set r0 (or r0 (zext DI uimm8))))
d1999 1
a1999 1
       ()
d2005 4
a2008 1
		 (set (mem UQI addr) data)))
d2011 1
a2011 1
       ()
d2014 4
a2017 1
       (unimp "pref"))
d2020 1
a2020 1
       ()
d2026 6
a2031 1
		 (set tbit (if BI temp 1 0))))
d2034 1
a2034 1
       ()
d2041 6
a2046 1
		 (set tbit (if BI lsbit 1 0))))
d2049 1
a2049 1
       ()
d2055 6
a2060 1
		 (set tbit (if BI temp 1 0))))
d2063 1
a2063 1
       ()
d2070 6
a2075 1
		 (set tbit (if BI lsbit 1 0))))
d2078 1
a2078 1
       ()
d2081 7
a2087 1
       (delay 1 (set pc pr)))
d2090 1
a2090 1
       ()
d2093 4
a2096 1
       (set sbit 1))
d2099 1
a2099 1
       ()
d2102 5
a2106 1
       (set tbit 1))
d2109 1
a2109 1
       ()
d2112 2
a2113 2
       (sequence ((QI shamt))
		 (set shamt (and QI rm 31))
d2120 5
a2124 1
			     (set rn 0))))))
d2127 1
a2127 1
       ()
d2133 6
a2138 1
		 (set tbit (if BI t 1 0))))
d2141 1
a2141 1
       ()
d2147 6
a2152 1
		 (set tbit (if BI t 1 0))))
d2155 1
a2155 1
       ()
d2158 2
a2159 2
       (sequence ((QI shamt))
		 (set shamt (and QI rm 31))
d2164 4
a2167 1
			 (set rn 0)))))
d2170 1
a2170 1
       ()
d2176 6
a2181 1
		 (set tbit (if BI t 1 0))))
d2184 1
a2184 1
       ()
d2187 4
a2190 1
       (set rn (sll rn 2)))
d2193 1
a2193 1
       ()
d2196 4
a2199 1
       (set rn (sll rn 8)))
d2202 1
a2202 1
       ()
d2205 4
a2208 1
       (set rn (sll rn 16)))
d2211 1
a2211 1
       ()
d2217 6
a2222 1
		 (set tbit (if BI t 1 0))))
d2225 1
a2225 1
       ()
d2228 4
a2231 1
       (set rn (srl rn 2)))
d2234 1
a2234 1
       ()
d2237 4
a2240 1
       (set rn (srl rn 8)))
d2243 1
a2243 1
       ()
d2246 4
a2249 1
       (set rn (srl rn 16)))
d2252 1
a2252 1
       ()
d2255 9
a2263 1
       (set rn gbr))
d2266 1
a2266 1
       ()
d2272 16
a2287 1
		 (set rn addr)))
d2290 1
a2290 1
       ()
d2293 6
a2298 1
       (set rn fpscr))
d2301 1
a2301 1
       ()
d2307 6
a2312 1
		 (set rn addr)))
d2314 2
a2315 2
(dshci sts-fpul "Store status register (FPUL)"
       ()
d2318 6
a2323 1
       (set rn (subword SI fpul 0)))
d2326 1
a2326 1
       ()
d2332 6
a2337 1
		 (set rn addr)))
d2340 1
a2340 1
       ()
d2343 5
a2347 1
       (set rn mach))
d2350 1
a2350 1
       ()
d2356 6
a2361 1
		 (set rn addr)))
d2364 1
a2364 1
       ()
d2367 5
a2371 1
       (set rn macl))
d2374 1
a2374 1
       ()
d2380 6
a2385 1
		 (set rn addr)))
d2388 1
a2388 1
       ()
d2391 3
a2393 1
       (set rn pr))
d2396 1
a2396 1
       ()
d2402 5
a2406 1
		 (set rn addr)))
d2409 1
a2409 1
       ()
d2412 4
a2415 1
       (set rn (sub rn rm)))
d2418 1
a2418 1
       ()
d2424 5
a2428 1
		 (set tbit flag)))
d2431 1
a2431 1
       ()
d2437 6
a2442 1
		 (set tbit (if BI t 1 0))))
d2445 1
a2445 1
       ()
d2452 4
a2455 1
		 (set rn (or SI (sll SI top-half 16) (or SI (sll SI byte0 8) byte1)))))
d2458 1
a2458 1
       ()
d2461 4
a2464 1
       (set rn (or (srl rm 16) (sll rm 16))))
d2467 1
a2467 1
       ()
d2474 6
a2479 1
		 (set (mem UQI rn) byte)))
d2482 1
a2482 1
       (ILLSLOT)
d2485 2
a2486 1
       (c-call "sh64_compact_trapa" uimm8 pc))
d2489 1
a2489 1
       ()
d2492 6
a2497 1
       (set tbit (if BI (eq (and rm rn) 0) 1 0)))
d2500 1
a2500 1
       ()
d2503 5
a2507 1
       (set tbit (if BI (eq (and r0 (zext SI uimm8)) 0) 1 0)))
d2510 1
a2510 1
       ()
d2515 7
a2521 1
		 (set tbit (if BI (eq (and (mem UQI addr) imm8) 0) 1 0))))
d2524 1
a2524 1
       ()
d2527 4
a2530 1
       (set rn64 (xor rn64 rm64)))
d2533 1
a2533 1
       ()
d2536 3
a2538 1
       (set (reg h-gr 0) (xor (reg h-gr 0) (zext DI uimm8))))
d2541 1
a2541 1
       ()
d2547 4
a2550 1
		 (set (mem UQI addr) data)))
d2553 1
a2553 1
       ()
d2556 5
a2560 1
       (set rn (or (sll rm 16) (srl rn 16))))
@


1.5
log
@2006-10-18  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2006-07-11  Dave Brolley  <brolley@@redhat.com>

        * cpu/sh64-compact.cpu (movual, movual2): New insns.
        (movcol): New insn.
        * cpu/sh.cpu (sh4a-nofpu-models): New pmacro.
        * sid.scm (-op-gen-delayed-set-maybe-trace): If delay used, note the
        hardware or memory mode which was used.
        * sid-cpu.scm (hw-need-write-stack?): New function.
        (-gen-hw-stream-and-destream-fns): Compute stack-regs. Use it to
        identify hardware which uses write stacks.
        (useful-mode-names): Renamed to write-stack-memory-mode-names.
        Initialized to an empty list.
        (-gen-writestacks, -gen-reset-fn, -gen-unified-write-fn): Use
        hw-need-write-stack?.
        * hardware.scm (used-in-delay-rtl?): New member of <hardware-base>.
        (define-getters <hardware-base>): Define used-in-delay-rtl?.
        (used-in-delay-rtl?): New method of <hardware-base>.
        (hw-used-in-delay-rtl?): New function.

        2006-06-20  Dave Brolley  <brolley@@redhat.com>

        * sid.scm (gen-attr-type): Removed.
        * cpu/sh.cpu (SH2a-nofpu-MACH): Add sh5.
        (SH2a-MACH): Add sh5.
        (sh2a-nofpu-models): Add units for sh5.
        (sh2a-fpu-models): Likewise.

        2006-06-15  Dave Brolley  <brolley@@redhat.com>

        * cpu/sh-sim.cpu: New file.
        * cpu/sh-sid.cpu: New file.
        * cpu/sh64-media.cpu (dshci): Add xtiming argument and splice it in.
        (All fields): Remap for (insn-lsb0? #f)
        (All insns): Add timing specs.
        * cpu/sh64-compact.cpu (dshcf,dshcop): Replace 'ignored' argument with
        'xattrs' and .splice it in.
        (32-BIT-INSN,SH4-GROUP,SH4A-GROUP): New insn attributes.
        (h-frc,h-drc): Add PROFILE attribute.
        (h-fpccr): Removed.
        (h-vbr): New hardware.
        (All fields): Remap for (insn-lsb0? #f)
        (f-imm20-hi,f-imm20-lo,f-imm20): New fields.
        (fr0,fmovm,fmovn,imm20,imm12x4,imm12x8,vbr): New operands.
        (fpscr): Use h-fpscr.
        (fsdm,fsdn): Use h-fsd.
        (dshci): Add xtiming argument and splice it in.
        (dr,xd): pmacros removed.
        (All insns): Add timing specs, *-MACH attribibutes,
        SH4{A}-GROUP attributes.
        (divu,mulr,ldc-vbr,ldc-sr,ldcl-vbr,movl12,movl13,stcl-vbr): New insns.
        * cpu/sh.cpu): Include sh-sid.cpu or sh-sim.cpu depending on whether
        we're being processed for sim or sid.
        (define-arch): Change insn-lsb0? for #f. Add machs sh2e, sh2a-fpu,
        sh2a-nofpu, sh4-nofpu, sh4a-nofpu, sh4a, sh4al.
        (define-isa compact): Add (isa-parallel-insns 2).
        (define-isa media): Add (isa-parallel-insns 2). Add
        (default-insn-word-bitsize 32). Change base-insn-bitsize to 32.
        (define-mach): Add sh2e, sh2a-fpu, sh2a-nofpu, sh4-nofpu, sh4a-nofpu,
        sh4a, sh4al
        (SH2-MACH, SH2e-MACH, SH2a-nofpu-MACH, SH2a-MACH, SH3-MACH)
        (SH3e-MACH, SH4-nofpu-MACH, SH4-MACH, SH4a-nofpu-MACH, SH4a-MACH)
        (SH4al-MACH, SH5-MACH): New pmacros.
        (common-units, common-fp-units, sh2a-nofpu-units, sh2a-fpu-units)
        (sh4-nofpu-units, sh4-common-fp-units, sh5-media-units)
        (sh5-media-fp-units, common-model, common-model-with-fp)
        (sh3-model, sh3e-model): New pmacros.
        (define-model sh2): New model.
        (define-model sh2e): New model.
        (define-model sh3): New model.
        (define-model sh3e): New model.
        (define-model sh2a-nofpu): New model.
        (define-model sh2a-fpu): New model.
        (define-model sh4-nofpu): New model.
        (define-model sh4): New model.
        (define-model sh4a-nofpu): New model.
        (define-model sh4a): New model.
        (define-model sh4al): New model.
        (define-model sh5-media): New model.
        (define-model sh5): Add all units.
        (all-models, sh2e-models, sh2a-nofpu-models, sh2a-fpu-models)
        (sh3-models, sh3e-models, sh4-nofpu-models, sh4-models)
        (sh5-media-models, shad-models, fsqrt-models): New pmacros.
        (h-pc): Add PROFILE attribute.
        (h-fr): Likewise.
        (h-tr): Likewise.
        (h-gr,h-grc): Likewise.
        (h-cr): Set h-sr in setter.
        (h-frbit): Get/Set h-fpscr.
        (h-szbit,h-prbit): Likewise.
        (h-fp): Add PROFILE attribute. Now indexed by even indices 0-62.
        Add getter and setter.
        (h-fc): Add PROFILE attribute. Now indexed by quad indices 0-60.
        Adjust getter and setter.
        (h-fmtx): Add PROFILE attribute. Now indexed by 0, 16, 32 and 48.
        Adjust getter and setter.
        (h-dr): Add PROFILE attribute. Now indexed by even indices 0-62.
        (h-fsd,h-fmov): New hardware.
@
text
@d64 1
a64 1
  (print-name h-frc)
d73 1
a73 1
  (print-name h-drc)
d80 1
a80 1
  (print-name h-xf)
@


1.4
log
@	* cpu/sh.cpu: Amend comments to refer to SuperH.
	* cpu/sh64-compact.cpu: Change comment to refer to SuperH.
	* cpu/sh64-media.cpu: Likewise.
	(Saturation): Update manual reference.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d8 2
a9 2
(define-pmacro (dshcf xname xcomment ignored xstart xlength)
  (dnf xname xcomment ((ISA compact)) xstart xlength))
d13 2
a14 2
(define-pmacro (dshcop xname xcomment ignored xhardware xfield)
  (dnop xname xcomment ((ISA compact)) xhardware xfield))
d33 28
d94 1
a94 1
  (attrs VIRTUAL (ISA compact))
d104 1
a104 1
  (attrs VIRTUAL (ISA compact))
d141 14
d156 2
a157 2
  (name h-fpccr)
  (comment "SHcompact floating point status/control register")
d160 2
a161 6
  (get () (or (or (or (raw-reg h-fpscr) (sll SI prbit 19)) (sll SI szbit 20)) (sll SI frbit 21)))
  (set (newvalue) (sequence ()
			    (set (reg h-fpscr) newvalue)
			    (set prbit (and (srl newvalue 19) 1))
			    (set szbit (and (srl newvalue 20) 1))
			    (set frbit (and (srl newvalue 21) 1))))
d165 2
a166 2
  (name h-gbr)
  (comment "Global base register")
d169 2
a170 2
  (get () (subword SI (raw-reg h-gr 16) 1))
  (set (newval) (set (raw-reg h-gr 16) (ext DI newval)))
d210 14
a223 12
(dshcf f-op4     "Opcode (4 bits)"         ()  15   4)
(dshcf f-op8     "Opcode (8 bits)"         ()  15   8)
(dshcf f-op16    "Opcode (16 bits)"        ()  15  16)

(dshcf f-sub4    "Sub opcode (4 bits)"     ()   3   4)
(dshcf f-sub8    "Sub opcode (8 bits)"     ()   7   8)
(dshcf f-sub10   "Sub opcode (10 bits)"    ()   9  10)

(dshcf f-rn      "Register selector n"     ()  11   4)
(dshcf f-rm      "Register selector m"     ()   7   4)

(dshcf f-8-1     "One bit at bit 8"        ()   8   1)
d225 1
a225 1
(df  f-disp8  "Displacement (8 bits)"  ((ISA compact) PCREL-ADDR) 7 8 INT
d229 1
a229 1
(df  f-disp12 "Displacement (12 bits)" ((ISA compact) PCREL-ADDR) 11 12 INT
d233 2
a234 2
(dshcf f-imm8    "Immediate (8 bits)"      ()   7   8)
(dshcf f-imm4    "Immediate (4 bits)"      ()   3   4)
d236 1
a236 1
(df f-imm4x2     "Immediate (4 bits)"      ((ISA compact)) 3 4 UINT
d240 1
a240 1
(df f-imm4x4     "Immediate (4 bits)"      ((ISA compact)) 3 4 UINT
d244 1
a244 1
(df f-imm8x2     "Immediate (8 bits)"      ((ISA compact)) 7 8 UINT
d248 1
a248 1
(df f-imm8x4     "Immediate (8 bits)"      ((ISA compact)) 7 8 UINT
d252 9
a260 1
(df f-dn "Double selector n" ((ISA compact)) 11 3 UINT
d264 1
a264 1
(df f-dm         "Double selector m"       ((ISA compact)) 7 3 UINT
d268 1
a268 1
(df f-vn         "Vector selector n"       ((ISA compact)) 11 2 UINT
d272 1
a272 1
(df f-vm         "Vector selector m"       ((ISA compact)) 9 2 UINT
d276 1
a276 1
(df f-xn         "Extended selector n"     ((ISA compact)) 11 3 UINT
d280 1
a280 1
(df f-xm         "Extended selector m"     ((ISA compact)) 7 3 UINT
d284 15
d308 4
d322 1
d331 2
d338 1
d341 1
a341 1
(dshcop fpscr  "Floating point status/control register" ()   h-fpccr f-nil)
a355 1

d357 1
a357 1
  (attrs (ISA compact)) (type h-frc) (index f-rm) (handlers (parse "fsd")))
d360 1
a360 1
  (attrs (ISA compact)) (type h-frc) (index f-rn))
d366 1
a366 1
(define-pmacro (dshci xname xcomment xattrs xsyntax xformat xsemantics)
d373 2
a374 4
    (semantics xsemantics)))

(define-pmacro (dr operand) (reg h-dr (index-of operand)))
(define-pmacro (xd x) (reg h-xd (and (index-of x) (inv QI 1))))
d377 1
a377 1
       ()
d380 4
a383 1
       (set rn (add rn rm)))
d386 1
a386 1
       ()
d389 3
a391 1
       (set rn (add rn (ext SI (and QI imm8 255)))))
d394 1
a394 1
       ()
d400 6
a405 1
		 (set tbit flag)))
d408 1
a408 1
       ()
d414 6
a419 1
		 (set tbit t)))
d422 1
a422 1
       ()
d425 4
a428 1
       (set rn64 (and rm64 rn64)))
d431 1
a431 1
       ()
d434 3
a436 1
       (set r0 (and r0 (zext DI uimm8))))
d439 1
a439 1
       ()
d445 4
a448 1
		 (set (mem UQI addr) data)))
d451 1
a451 1
       ()
d455 4
a458 1
	   (set pc disp8)))
d461 1
a461 1
       ()
d465 7
a471 1
	   (delay 1 (set pc disp8))))
d474 1
a474 1
       ()
d477 6
a482 1
       (delay 1 (set pc disp12)))
d485 1
a485 1
       ()
d488 7
a494 1
       (delay 1 (set pc (add (ext DI rn) (add pc 4)))))
d497 1
a497 1
       ()
d500 2
a501 1
       (c-call "sh64_break" pc))
d504 1
a504 1
       ()
d507 7
a513 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc disp12))))
d516 1
a516 1
       ()
d519 8
a526 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc (add (ext DI rn) (add pc 4))))))
d529 1
a529 1
       ()
d533 4
a536 1
	   (set pc disp8)))
d539 1
a539 1
       ()
d543 7
a549 1
	   (delay 1 (set pc disp8))))
d552 1
a552 1
       ()
d557 4
a560 1
		 (set mach 0)))
d563 1
a563 1
       ()
d566 4
a569 1
       (set sbit 0))
d572 1
a572 1
       ()
d575 5
a579 1
       (set tbit 0))
d582 1
a582 1
       ()
d585 6
a590 1
       (set tbit (eq rm rn)))
d593 1
a593 1
       ()
d596 5
a600 1
       (set tbit (eq r0 (ext SI (and QI imm8 255)))))
d603 1
a603 1
       ()
d606 6
a611 1
       (set tbit (ge rn rm)))
d614 1
a614 1
       ()
d617 6
a622 1
       (set tbit (gt rn rm)))
d625 1
a625 1
       ()
d628 6
a633 1
       (set tbit (gtu rn rm)))
d636 1
a636 1
       ()
d639 6
a644 1
       (set tbit (geu rn rm)))
d647 1
a647 1
       ()
d650 5
a654 1
       (set tbit (gt rn 0)))
d657 1
a657 1
       ()
d660 5
a664 1
       (set tbit (ge rn 0)))
d667 1
a667 1
       ()
d676 6
a681 1
		 (set tbit (if BI (gtu t 0) 1 0))))
d684 1
a684 1
       ()
d690 6
a695 1
		 (set tbit (if BI (eq (srl rm 31) (srl rn 31)) 0 1))))
d698 1
a698 1
       ()
d704 4
a707 1
		 (set mbit 0)))
d710 1
a710 1
       ()
d748 25
a772 1
		 (set tbit (if BI (eq qbit mbit) 1 0))))
d775 1
a775 1
       ()
d781 4
a784 1
		 (set macl (subword SI result 1))))
d787 1
a787 1
       ()
d793 4
a796 1
		 (set macl (subword SI result 1))))
d799 1
a799 1
       ()
d804 5
a808 1
		 (set tbit (eq rn 0))))
d811 1
a811 1
       ()
d814 4
a817 1
       (set rn (ext SI (subword QI rm 3))))
d820 1
a820 1
       ()
d823 4
a826 1
       (set rn (ext SI (subword HI rm 1))))
d829 1
a829 1
       ()
d832 4
a835 1
       (set rn (zext SI (subword QI rm 3))))
d838 1
a838 1
       ()
d841 4
a844 1
       (set rn (zext SI (subword HI rm 1))))
d847 1
a847 1
       (FP-INSN)
d851 6
a856 2
	   (set (dr fsdn) (c-call DF "sh64_fabsd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fabss" fsdn))))
d859 1
a859 1
       (FP-INSN)
d863 7
a869 2
	   (set (dr fsdn) (c-call DF "sh64_faddd" (dr fsdm) (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fadds" fsdm fsdn))))
d872 1
a872 1
       (FP-INSN)
d876 7
a882 2
	   (set tbit (c-call BI "sh64_fcmpeqd" (dr fsdm) (dr fsdn)))
	   (set tbit (c-call BI "sh64_fcmpeqs" fsdm fsdn))))
d885 1
a885 1
       (FP-INSN)
d889 7
a895 2
	   (set tbit (c-call BI "sh64_fcmpgtd" (dr fsdn) (dr fsdm)))
	   (set tbit (c-call BI "sh64_fcmpgts" fsdn fsdm))))
d898 1
a898 1
       (FP-INSN)
d900 6
a905 2
       (+ (f-op4 15) drn (f-8-1 10) (f-sub8 #xbd))
       (set fpul (c-call SF "sh64_fcnvds" drn)))
d908 1
a908 1
       (FP-INSN)
d910 6
a915 2
       (+ (f-op4 15) drn (f-8-1 0) (f-sub8 #xad))
       (set drn (c-call DF "sh64_fcnvsd" fpul)))
d918 1
a918 1
       (FP-INSN)
d922 6
a927 2
	   (set (dr fsdn) (c-call DF "sh64_fdivd" (dr fsdn) (dr fsdm)))
	   (set fsdn (c-call SF "sh64_fdivs" fsdn fsdm))))
d930 1
a930 1
       (FP-INSN)
d933 3
a935 8
       (sequence ((QI m) (QI n) (SF res))
		 (set m (index-of fvm))
		 (set n (index-of fvn))
		 (set res (c-call SF "sh64_fmuls" fvm fvn))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 1)) (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 2)) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-frc (add m 3)) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 3)) res)))
d938 2
a939 2
       (FP-INSN)
       "flds $frn"
d941 4
a944 1
       (set fpul frn))
d947 1
a947 1
       (FP-INSN)
d950 4
a953 1
       (set frn (c-call SF "sh64_fldi0")))
d956 1
a956 1
       (FP-INSN)
d959 4
a962 1
       (set frn (c-call SF "sh64_fldi1")))
d965 1
a965 1
       (FP-INSN)
d969 6
a974 2
	   (set (dr fsdn) (c-call DF "sh64_floatld" fpul))
	   (set fsdn (c-call SF "sh64_floatls" fpul))))
d977 1
a977 1
       (FP-INSN)
d980 7
a986 5
       (set frn (c-call SF "sh64_fmacs" (reg h-frc 0) frm frn)))

(define-pmacro (even x) (eq (and x 1) 0))
(define-pmacro (odd x)  (eq (and x 1) 1))
(define-pmacro (extd x) (odd (index-of x)))
d989 8
a996 14
       (FP-INSN)
       "fmov $frm, $frn"
       (+ (f-op4 15) frn frm (f-sub4 12))
       (if (not szbit)
	   ; single precision operation
	   (set frn frm)
	   ; double or extended operation
	   (if (extd frm)
	       (if (extd frn)
		   (set (xd frn) (xd frm))
		   (set (dr frn) (xd frm)))
	       (if (extd frn)
		   (set (xd frn) (dr frm))
		   (set (dr frn) (dr frm))))))
d999 3
a1001 3
       (FP-INSN)
       "fmov @@$rm, $frn"
       (+ (f-op4 15) frn rm (f-sub4 8))
d1003 7
a1009 6
	   ; single precision operation
	   (set frn (mem SF rm))
	   ; double or extended operation
	   (if (extd frn)
	       (set (xd frn) (mem DF rm))
	       (set (dr frn) (mem DF rm)))))
d1012 3
a1014 3
       (FP-INSN)
       "fmov @@${rm}+, frn"
       (+ (f-op4 15) frn rm (f-sub4 9))
a1015 1
	   ; single precision operation
d1017 1
a1017 1
		     (set frn (mem SF rm))
a1018 1
	   ; double or extended operation
d1020 7
a1026 4
		     (if (extd frn)
			 (set (xd frn) (mem DF rm))
			 (set (dr frn) (mem DF rm)))
		     (set rm (add rm 8)))))
d1029 3
a1031 3
       (FP-INSN)
       "fmov @@(r0, $rm), $frn"
       (+ (f-op4 15) frn rm (f-sub4 6))
d1033 8
a1040 6
	   ; single precision operation
	   (set frn (mem SF (add r0 rm)))
	   ; double or extended operation
	   (if (extd frn)
	       (set (xd frn) (mem DF (add r0 rm)))
	       (set (dr frn) (mem DF (add r0 rm))))))
d1043 3
a1045 3
       (FP-INSN)
       "fmov $frm, @@$rn"
       (+ (f-op4 15) rn frm (f-sub4 10))
d1047 7
a1053 6
	   ; single precision operation
	   (set (mem SF rn) frm)
	   ; double or extended operation
	   (if (extd frm)
	       (set (mem DF rn) (xd frm))
	       (set (mem DF rn) (dr frm)))))
d1056 3
a1058 3
       (FP-INSN)
       "fmov $frm, @@-$rn"
       (+ (f-op4 15) rn frm (f-sub4 11))
a1059 1
	   ; single precision operation
d1062 1
a1062 2
		     (set (mem SF rn) frm))
	   ; double or extended operation
d1065 6
a1070 3
		     (if (extd frm)
			 (set (mem DF rn) (xd frm))
			 (set (mem DF rn) (dr frm))))))
d1073 3
a1075 3
       (FP-INSN)
       "fmov $frm, @@(r0, $rn)"
       (+ (f-op4 15) rn frm (f-sub4 7))
d1077 29
a1105 6
	   ; single precision operation
	   (set (mem SF (add r0 rn)) frm)
	   ; double or extended operation
	   (if (extd frm)
	       (set (mem DF (add r0 rn)) (xd frm))
	       (set (mem DF (add r0 rn)) (dr frm)))))
d1108 1
a1108 1
       (FP-INSN)
d1112 7
a1118 2
	   (set (dr fsdn) (c-call DF "sh64_fmuld" (dr fsdm) (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fmuls" fsdm fsdn))))
d1121 1
a1121 1
       (FP-INSN)
d1125 6
a1130 2
	   (set (dr fsdn) (c-call DF "sh64_fnegd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fnegs" fsdn))))
d1133 1
a1133 1
       (FP-INSN)
d1136 2
a1137 1
       (set frbit (not frbit)))
d1140 1
a1140 1
       (FP-INSN)
d1143 2
a1144 1
       (set szbit (not szbit)))
d1147 1
a1147 1
       (FP-INSN)
d1151 5
a1155 2
	   (set (dr fsdn) (c-call DF "sh64_fsqrtd" (dr fsdn)))
	   (set fsdn (c-call SF "sh64_fsqrts" fsdn))))
d1158 1
a1158 1
       (FP-INSN)
d1161 5
a1165 1
       (set frn fpul))
d1168 1
a1168 1
       (FP-INSN)
d1172 7
a1178 2
	   (set (dr fsdn) (c-call DF "sh64_fsubd" (dr fsdn) (dr fsdm)))
	   (set fsdn (c-call SF "sh64_fsubs" fsdn fsdm))))
d1181 1
a1181 1
       (FP-INSN)
d1185 6
a1190 2
		     (c-call SF "sh64_ftrcdl" (dr fsdn))
		     (c-call SF "sh64_ftrcsl" fsdn))))
d1193 1
a1193 1
       (FP-INSN)
d1196 3
a1198 22
       (sequence ((QI n) (SF res))
		 (set n (index-of fvn))
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 0) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 4)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 8)  (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 12) (reg h-frc (add n 3)))))
		 (set (reg h-frc n) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 1) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 5)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 9)  (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 13) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 1)) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 2) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 6)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 10) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 14) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 2)) res)
		 (set res (c-call SF "sh64_fmuls" (reg h-xf 3) (reg h-frc n)))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 7)  (reg h-frc (add n 1)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 11) (reg h-frc (add n 2)))))
		 (set res (c-call SF "sh64_fadds" res (c-call SF "sh64_fmuls" (reg h-xf 15) (reg h-frc (add n 3)))))
		 (set (reg h-frc (add n 3)) res)))
d1201 1
a1201 1
       ()
d1204 7
a1210 1
       (delay 1 (set pc rn)))
d1213 1
a1213 1
       ()
d1216 8
a1223 3
       (delay 1 (sequence ()
			  (set pr (add pc 4))
			  (set pc rn))))
d1225 2
a1226 2
(dshci ldc "Load control register (GBR)"
       ()
d1229 19
a1247 1
       (set gbr rn))
d1249 2
a1250 2
(dshci ldcl "Load control register (GBR)"
       ()
d1255 17
a1271 1
		 (set rn (add rn 4))))
d1274 1
a1274 1
       ()
d1277 3
a1279 1
       (set fpscr rn))
d1282 1
a1282 1
       ()
d1287 5
a1291 1
		 (set rn (add rn 4))))
d1294 1
a1294 1
       ()
d1298 6
a1303 1
       (set fpul (subword SF rn 0)))
d1306 1
a1306 1
       ()
d1311 6
a1316 1
		 (set rn (add rn 4))))
d1319 1
a1319 1
       ()
d1322 5
a1326 1
       (set mach rn))
d1329 1
a1329 1
       ()
d1334 6
a1339 1
		 (set rn (add rn 4))))
d1342 1
a1342 1
       ()
d1345 5
a1349 1
       (set macl rn))
d1352 1
a1352 1
       ()
d1357 6
a1362 1
		 (set rn (add rn 4))))
d1365 1
a1365 1
       ()
d1368 3
a1370 1
       (set pr rn))
d1373 1
a1373 1
       ()
d1378 5
a1382 1
		 (set rn (add rn 4))))
d1385 1
a1385 1
       ()
d1411 4
a1414 1
			   (set macl (subword SI result 1)))))
d1417 1
a1417 1
       ()
d1439 4
a1442 1
			       (set macl (subword SI result 1))))))
d1445 1
a1445 1
       ()
d1448 3
a1450 1
       (set rn64 rm64))
d1453 1
a1453 1
       ()
d1456 9
a1464 1
       (set rn (ext DI (and QI imm8 255))))
d1467 1
a1467 1
       ()
d1470 5
a1474 1
       (set (mem UQI rn) (subword UQI rm 3)))
d1477 1
a1477 1
       ()
d1483 5
a1487 1
		 (set rn addr)))
d1490 1
a1490 1
       ()
d1493 6
a1498 1
       (set (mem UQI (add r0 rn)) (subword UQI rm 3)))
d1501 1
a1501 1
       ()
d1506 4
a1509 1
		 (set (mem UQI addr) (subword UQI r0 3))))
d1512 1
a1512 1
       ()
d1517 5
a1521 1
		 (set (mem UQI addr) (subword UQI r0 3))))
d1524 1
a1524 1
       ()
d1527 5
a1531 1
       (set rn (ext SI (mem QI rm))))
d1534 1
a1534 1
       ()
d1542 5
a1546 1
		 (set rn (ext SI data))))
d1549 1
a1549 1
       ()
d1552 6
a1557 1
       (set rn (ext SI (mem QI (add r0 rm)))))
d1560 1
a1560 1
       ()
d1563 4
a1566 1
       (set r0 (ext SI (mem QI (add gbr imm8)))))
d1569 1
a1569 1
       ()
d1572 5
a1576 1
       (set r0 (ext SI (mem QI (add rm imm4)))))
d1579 1
a1579 1
       ()
d1582 5
a1586 1
       (set (mem SI rn) rm))
d1589 1
a1589 1
       ()
d1595 5
a1599 1
		 (set rn addr)))
d1602 1
a1602 1
       ()
d1605 6
a1610 1
       (set (mem SI (add r0 rn)) rm))
d1613 1
a1613 1
       ()
d1616 5
a1620 1
       (set (mem SI (add gbr imm8x4)) r0))
d1623 1
a1623 1
       ()
d1626 5
a1630 1
       (set (mem SI (add rn imm4x4)) rm))
d1633 1
a1633 1
       ()
d1636 5
a1640 1
       (set rn (mem SI rm)))
d1643 1
a1643 1
       ()
d1650 5
a1654 1
		     (set rm (add rm 4)))))
d1657 1
a1657 1
       ()
d1660 6
a1665 1
       (set rn (mem SI (add r0 rm))))
d1668 1
a1668 1
       ()
d1671 4
a1674 1
       (set r0 (mem SI (add gbr imm8x4))))
d1677 1
a1677 1
       (ILLSLOT)
d1680 4
a1683 1
       (set rn (mem SI (add imm8x4 (and (add pc 4) (inv 3))))))
d1686 1
a1686 1
       ()
d1689 24
a1712 1
       (set rn (mem SI (add rm imm4x4))))
d1715 1
a1715 1
       ()
d1718 5
a1722 1
       (set (mem HI rn) (subword HI rm 1)))
d1725 1
a1725 1
       ()
d1731 5
a1735 1
		 (set rn addr)))
d1738 1
a1738 1
       ()
d1741 6
a1746 1
       (set (mem HI (add r0 rn)) (subword HI rm 1)))
d1749 1
a1749 1
       ()
d1752 5
a1756 1
       (set (mem HI (add gbr imm8x2)) (subword HI r0 1)))
d1759 1
a1759 1
       ()
d1762 5
a1766 1
       (set (mem HI (add rm imm4x2)) (subword HI r0 1)))
d1769 1
a1769 1
       ()
d1772 5
a1776 1
       (set rn (ext SI (mem HI rm))))
d1779 1
a1779 1
       ()
d1787 5
a1791 1
		 (set rn (ext SI data))))
d1794 1
a1794 1
       ()
d1797 6
a1802 1
       (set rn (ext SI (mem HI (add r0 rm)))))
d1805 1
a1805 1
       ()
d1808 4
a1811 1
       (set r0 (ext SI (mem HI (add gbr imm8x2)))))
d1814 1
a1814 1
       (ILLSLOT)
d1817 4
a1820 1
       (set rn (ext SI (mem HI (add (add pc 4) imm8x2)))))
d1823 1
a1823 1
       ()
d1826 5
a1830 1
       (set r0 (ext SI (mem HI (add rm imm4x2)))))
d1833 1
a1833 1
       (ILLSLOT)
d1836 2
a1837 1
       (set r0 (add (and (add pc 4) (inv 3)) imm8x4)))
d1840 1
a1840 1
       ()
d1843 3
a1845 1
       (set (mem SI rn) r0))
d1847 9
d1857 1
a1857 1
       ()
d1860 25
a1884 1
       (set rn (zext SI tbit)))
d1887 1
a1887 1
       ()
d1890 4
a1893 1
       (set macl (mul rm rn)))
d1896 1
a1896 1
       ()
d1899 5
a1903 1
       (set macl (mul (ext SI (subword HI rm 1)) (ext SI (subword HI rn 1)))))
d1906 1
a1906 1
       ()
d1909 5
a1913 1
       (set macl (mul (zext SI (subword HI rm 1)) (zext SI (subword HI rn 1)))))
d1916 1
a1916 1
       ()
d1919 3
a1921 1
       (set rn (neg rm)))
d1924 1
a1924 1
       ()
d1930 5
a1934 1
		 (set tbit flag)))
d1937 1
a1937 1
       ()
d1940 2
a1941 1
       (nop))
d1944 1
a1944 1
       ()
d1947 3
a1949 1
       (set rn64 (inv rm64)))
d1952 1
a1952 1
       ()
d1955 5
a1959 1
       (unimp "ocbi"))
d1962 1
a1962 1
       ()
d1965 5
a1969 1
       (unimp "ocbp"))
d1972 1
a1972 1
       ()
d1975 5
a1979 1
       (unimp "ocbwb"))
d1982 1
a1982 1
       ()
d1985 4
a1988 1
       (set rn64 (or rm64 rn64)))
d1991 1
a1991 1
       ()
d1994 3
a1996 1
       (set r0 (or r0 (zext DI uimm8))))
d1999 1
a1999 1
       ()
d2005 4
a2008 1
		 (set (mem UQI addr) data)))
d2011 1
a2011 1
       ()
d2014 4
a2017 1
       (unimp "pref"))
d2020 1
a2020 1
       ()
d2026 6
a2031 1
		 (set tbit (if BI temp 1 0))))
d2034 1
a2034 1
       ()
d2041 6
a2046 1
		 (set tbit (if BI lsbit 1 0))))
d2049 1
a2049 1
       ()
d2055 6
a2060 1
		 (set tbit (if BI temp 1 0))))
d2063 1
a2063 1
       ()
d2070 6
a2075 1
		 (set tbit (if BI lsbit 1 0))))
d2078 1
a2078 1
       ()
d2081 7
a2087 1
       (delay 1 (set pc pr)))
d2090 1
a2090 1
       ()
d2093 4
a2096 1
       (set sbit 1))
d2099 1
a2099 1
       ()
d2102 5
a2106 1
       (set tbit 1))
d2109 1
a2109 1
       ()
d2112 2
a2113 2
       (sequence ((QI shamt))
		 (set shamt (and QI rm 31))
d2120 5
a2124 1
			     (set rn 0))))))
d2127 1
a2127 1
       ()
d2133 6
a2138 1
		 (set tbit (if BI t 1 0))))
d2141 1
a2141 1
       ()
d2147 6
a2152 1
		 (set tbit (if BI t 1 0))))
d2155 1
a2155 1
       ()
d2158 2
a2159 2
       (sequence ((QI shamt))
		 (set shamt (and QI rm 31))
d2164 4
a2167 1
			 (set rn 0)))))
d2170 1
a2170 1
       ()
d2176 6
a2181 1
		 (set tbit (if BI t 1 0))))
d2184 1
a2184 1
       ()
d2187 4
a2190 1
       (set rn (sll rn 2)))
d2193 1
a2193 1
       ()
d2196 4
a2199 1
       (set rn (sll rn 8)))
d2202 1
a2202 1
       ()
d2205 4
a2208 1
       (set rn (sll rn 16)))
d2211 1
a2211 1
       ()
d2217 6
a2222 1
		 (set tbit (if BI t 1 0))))
d2225 1
a2225 1
       ()
d2228 4
a2231 1
       (set rn (srl rn 2)))
d2234 1
a2234 1
       ()
d2237 4
a2240 1
       (set rn (srl rn 8)))
d2243 1
a2243 1
       ()
d2246 4
a2249 1
       (set rn (srl rn 16)))
d2252 1
a2252 1
       ()
d2255 9
a2263 1
       (set rn gbr))
d2266 1
a2266 1
       ()
d2272 16
a2287 1
		 (set rn addr)))
d2290 1
a2290 1
       ()
d2293 6
a2298 1
       (set rn fpscr))
d2301 1
a2301 1
       ()
d2307 6
a2312 1
		 (set rn addr)))
d2314 2
a2315 2
(dshci sts-fpul "Store status register (FPUL)"
       ()
d2318 6
a2323 1
       (set rn (subword SI fpul 0)))
d2326 1
a2326 1
       ()
d2332 6
a2337 1
		 (set rn addr)))
d2340 1
a2340 1
       ()
d2343 5
a2347 1
       (set rn mach))
d2350 1
a2350 1
       ()
d2356 6
a2361 1
		 (set rn addr)))
d2364 1
a2364 1
       ()
d2367 5
a2371 1
       (set rn macl))
d2374 1
a2374 1
       ()
d2380 6
a2385 1
		 (set rn addr)))
d2388 1
a2388 1
       ()
d2391 3
a2393 1
       (set rn pr))
d2396 1
a2396 1
       ()
d2402 5
a2406 1
		 (set rn addr)))
d2409 1
a2409 1
       ()
d2412 4
a2415 1
       (set rn (sub rn rm)))
d2418 1
a2418 1
       ()
d2424 5
a2428 1
		 (set tbit flag)))
d2431 1
a2431 1
       ()
d2437 6
a2442 1
		 (set tbit (if BI t 1 0))))
d2445 1
a2445 1
       ()
d2452 4
a2455 1
		 (set rn (or SI (sll SI top-half 16) (or SI (sll SI byte0 8) byte1)))))
d2458 1
a2458 1
       ()
d2461 4
a2464 1
       (set rn (or (srl rm 16) (sll rm 16))))
d2467 1
a2467 1
       ()
d2474 6
a2479 1
		 (set (mem UQI rn) byte)))
d2482 1
a2482 1
       (ILLSLOT)
d2485 2
a2486 1
       (c-call "sh64_compact_trapa" uimm8 pc))
d2489 1
a2489 1
       ()
d2492 6
a2497 1
       (set tbit (if BI (eq (and rm rn) 0) 1 0)))
d2500 1
a2500 1
       ()
d2503 5
a2507 1
       (set tbit (if BI (eq (and r0 (zext SI uimm8)) 0) 1 0)))
d2510 1
a2510 1
       ()
d2515 7
a2521 1
		 (set tbit (if BI (eq (and (mem UQI addr) imm8) 0) 1 0))))
d2524 1
a2524 1
       ()
d2527 4
a2530 1
       (set rn64 (xor rn64 rm64)))
d2533 1
a2533 1
       ()
d2536 3
a2538 1
       (set (reg h-gr 0) (xor (reg h-gr 0) (zext DI uimm8))))
d2541 1
a2541 1
       ()
d2547 4
a2550 1
		 (set (mem UQI addr) data)))
d2553 1
a2553 1
       ()
d2556 5
a2560 1
       (set rn (or (sll rm 16) (srl rn 16))))
@


1.3
log
@Replace occurrances of 'Hitachi' with 'Renesas'.
@
text
@d1 1
a1 1
; Renesas SHcompact instruction set description.  -*- Scheme -*-
@


1.2
log
@2002-06-25  J"orn Rennecke <joern.rennecke@@superh.com>

	* cpu/sh64-compact.cpu (movw5): Use Correct operand field for reg.
	* cpu/sh64-media.cpu (-ldhi-byte, -ldhi-word, -ldhi-long): New macros.
	(-ldlo-byte, -ldlo-word, -ldlo-long): Likewise.
	(-sthi-word, -sthi-long -stlo-byte, -stlo-word, -stlo-long): Likewise.
	(ldhil, ldhiq, ldlol, ldloq, stlol, stloq): Implement.
	(mshfhib, mshfhil, mshfhiw, mshflob, mshflol, mshflow): Fix indices.
	(-sthi-byte): If there is a single byte to store, store it at
	proper address.
	(sthil, sthiq): Fix big-endian behaviour.
	(mcnvslw, mcnvswb, mcnvswub, mmacfxwl, mmacnfx.wl): Fix indices.
	(mmulfxl, mmulfxw, mmulfxrpw, mmulhiwl, mmullowl): Likewise.
	(saturate): Use Dimode to check if saturation operation is required.
	(usaturate): Likewise.
	(mpermw): Fix mask.
	(-maddsl, -maddsub): Compute to-be-saturated value in wider mode.
	(-maddsw, mmacfxwl, mmacnfx.wl, -mshaldsl, -mshaldsw): Likewise.
	(-mshardl, -mshardw, -msubsl, -msubsub, -msubsw): Likewise.
	(msadubq): Fix subword index in second operand of first subtraction.
@
text
@d1 1
a1 1
; Hitachi SHcompact instruction set description.  -*- Scheme -*-
@


1.2.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
; SuperH SHcompact instruction set description.  -*- Scheme -*-
@


1.2.10.1
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d1 1
a1 1
; Renesas SHcompact instruction set description.  -*- Scheme -*-
@


1.2.10.2
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d1 1
a1 1
; SuperH SHcompact instruction set description.  -*- Scheme -*-
@


1.1
log
@* Contribute Hitachi SH5 port.
@
text
@d1231 3
a1233 3
       "mov.w r0, @@($imm4x2, $rn)"
       (+ (f-op8 #x81) rn imm4x2)
       (set (mem HI (add rn imm4x2)) (subword HI r0 1)))
@


1.1.8.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1231 3
a1233 3
       "mov.w r0, @@($imm4x2, $rm)"
       (+ (f-op8 #x81) rm imm4x2)
       (set (mem HI (add rm imm4x2)) (subword HI r0 1)))
@


