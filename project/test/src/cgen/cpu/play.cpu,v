head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	cgen-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	cgen-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	cgen-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	cgen-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	cgen-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	cgen-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	cgen-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	cgen-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	cgen-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	cgen-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	cgen-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	cgen-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	cgen-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	cgen-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	cgen-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	cgen-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	cgen-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	cgen-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	cgen-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	cgen-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	cgen-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	cgen-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	cgen-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	cgen-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	cgen-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	cgen-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	cgen-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	cgen-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	cgen-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	cgen-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	cgen-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	cgen-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	cgen-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	cgen-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	cgen-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	cgen-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	cgen-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	cgen-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	cgen-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	cgen-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	cgen-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	cgen-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	cgen-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	cgen-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	cgen-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	cgen-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	cgen-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	cgen-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	cgen-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	cgen-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	cgen-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	cgen-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	cgen-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	cgen-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	cgen-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	cgen-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	cgen-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	cgen-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	cgen-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	cgen-snapshot-20130601:1.10
	sid-snapshot-20130501:1.10
	cgen-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	cgen-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	cgen-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	cgen-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	cgen-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	cgen-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	cgen-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	cgen-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	cgen-snapshot-20120901:1.10
	sid-snapshot-20120801:1.10
	cgen-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	cgen-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	cgen-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	cgen-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	cgen-snapshot-20120401:1.10
	sid-snapshot-20120301:1.10
	cgen-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	cgen-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	cgen-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	cgen-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	cgen-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	cgen-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	cgen-snapshot-20110901:1.10
	sid-snapshot-20110801:1.10
	cgen-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	cgen-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	cgen-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	cgen-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	cgen-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	cgen-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	cgen-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	cgen-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	cgen-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	cgen-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	cgen-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	cgen-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	cgen-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	cgen-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	cgen-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	cgen-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	cgen-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	cgen-snapshot-20100301:1.10
	sid-snapshot-20100201:1.10
	cgen-snapshot-20100201:1.10
	sid-snapshot-20100101:1.10
	cgen-snapshot-20100101:1.10
	sid-snapshot-20091201:1.10
	cgen-snapshot-20091201:1.10
	sid-snapshot-20091101:1.10
	cgen-snapshot-20091101:1.10
	sid-snapshot-20091001:1.10
	cgen-snapshot-20091001:1.10
	arc-sim-20090309:1.3
	sid-snapshot-20090901:1.9
	cgen-snapshot-20090901:1.9
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.66
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.3.0.64
	cgen-1_1-branchpoint:1.3
	sid-snapshot-20090601:1.3
	cgen-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	cgen-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	cgen-snapshot-20090401:1.3
	arc-insight_6_8-branch:1.3.0.62
	arc-insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	cgen-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	cgen-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	cgen-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	cgen-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	cgen-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	cgen-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	cgen-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	cgen-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	cgen-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	cgen-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	cgen-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	cgen-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	cgen-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	cgen-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	cgen-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	cgen-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	cgen-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	cgen-snapshot-20071001:1.3
	msnyder-fork-checkpoint-branch:1.3.0.60
	msnyder-fork-checkpoint-branchpoint:1.3
	gdb-csl-arm-20051020-branch:1.3.0.56
	gdb-csl-arm-20051020-branchpoint:1.3
	drow_intercu-merge-20040921:1.3
	drow_intercu-merge-20040915:1.3
	jimb-gdb_6_2-e500-branch:1.3.0.58
	jimb-gdb_6_2-e500-branchpoint:1.3
	gdb_6_2-20040730-release:1.3
	gdb_6_2-branch:1.3.0.54
	gdb_6_2-2004-07-10-gmt-branchpoint:1.3
	gdb_6_1_1-20040616-release:1.3
	gdb_6_1-2004-04-05-release:1.3
	drow_intercu-merge-20040402:1.3
	drow_intercu-merge-20040327:1.3
	ezannoni_pie-20040323-branch:1.3.0.52
	ezannoni_pie-20040323-branchpoint:1.3
	cagney_tramp-20040321-mergepoint:1.3
	cagney_tramp-20040309-branch:1.3.0.50
	cagney_tramp-20040309-branchpoint:1.3
	gdb_6_1-branch:1.3.0.48
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	drow_intercu-20040221-branch:1.3.0.46
	drow_intercu-20040221-branchpoint:1.3
	cagney_bfdfile-20040213-branch:1.3.0.44
	cagney_bfdfile-20040213-branchpoint:1.3
	drow-cplus-merge-20040208:1.3
	carlton_dictionary-20040126-merge:1.3
	cagney_bigcore-20040122-branch:1.3.0.42
	cagney_bigcore-20040122-branchpoint:1.3
	drow-cplus-merge-20040113:1.3
	drow-cplus-merge-20031224:1.3
	drow-cplus-merge-20031220:1.3
	carlton_dictionary-20031215-merge:1.3
	drow-cplus-merge-20031214:1.3
	carlton-dictionary-20031111-merge:1.3
	gdb_6_0-2003-10-04-release:1.3
	kettenis_sparc-20030918-branch:1.3.0.40
	kettenis_sparc-20030918-branchpoint:1.3
	carlton_dictionary-20030917-merge:1.3
	ezannoni_pie-20030916-branchpoint:1.3
	ezannoni_pie-20030916-branch:1.3.0.38
	cagney_x86i386-20030821-branch:1.3.0.36
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.34
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.30
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.28
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.24
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.20
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.18
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.16
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.14
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.12
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.10
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.8
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.6
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030202-branch:1.3.0.4
	interps-20030202-branchpoint:1.3
	cagney-unwind-20030108-branch:1.3.0.2
	cagney-unwind-20030108-branchpoint:1.3
	carlton_dictionary-20021223-merge:1.3
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.22
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.20
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.18
	gdb_5_3-branch:1.1.0.16
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.14
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.12
	readline_4_3-import-branchpoint:1.1
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.10
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.8
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.6
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.4
	gdb_5_2-2002-03-03-branchpoint:1.1
	cygnus_cvs_20020108_pre:1.1
	cgen-1-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.10
date	2009.09.09.20.43.05;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.28.06.20.29;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.27.21.28.48;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.23.16.15.53;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.16.17.48.30;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.13.20.55.21;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.07.18.44.09;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.22.02.06.47;	author devans;	state Exp;
branches
	1.3.66.1;
next	1.2;

1.2
date	2002.12.21.03.58.29;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.05.12.45.47;	author bje;	state Exp;
branches
	1.1.20.1
	1.1.22.1;
next	;

1.3.66.1
date	2009.07.14.16.08.51;	author devans;	state Exp;
branches;
next	1.3.66.2;

1.3.66.2
date	2009.07.14.16.19.51;	author devans;	state Exp;
branches;
next	;

1.1.20.1
date	2002.12.23.19.38.05;	author carlton;	state Exp;
branches;
next	;

1.1.22.1
date	2003.12.14.20.26.56;	author drow;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	Add support for controlling warnings/errors.
	Add tests for iformat description errors.
	* dev.scm (cload): New option #:diag.
	* read.scm (<reader>): New member verify-iformat?.
	(/parse-diagnostic, parse-warning): New functions.
	(parse-error): Guts moved to /parse-diagnostic.
	(/set-diagnostic-options!): New function.
	(cpu-load): New arg diagnostic-options, all callers updated.
	Recognize -w diagnostic-option-list.
	* ifield.scm (ifields-base-ifields): Move here from iformat.scm.
	(ifld-simple-ifields, ifields-simple-ifields): New function.
	* insn.scm (/parse-insn-format-iflds): New function.
	(/parse-insn-format): Guts moved to /parse-insn-format-iflds.
	New arg isa, all callers updated.  Do some basic validation of the
	ifield list if requested.
	* mach.scm (/sanity-check-insns): Improve error message text.
	* doc/running.text: Document -w option.

	* ifield.scm (/multi-ifield-parse): Initialize bitrange.
@
text
@; cpu description for debugging and experimental purposes. -*- Scheme -*-
; This file is part of CGEN.
; See file COPYING.CGEN for details.
; Copyright (C) 2000 Red Hat, Inc.
;
; This file is for experimental purposes.  Don't expect it to be correct
; or up to date.

(define-rtl-version 0 7)

(include "simplify.inc")

(define-arch
  (name play) ; name of cpu
  (comment "experimental .cpu file")
  (insn-lsb0? #t)
  (machs playb)
  (isas play)
)

(define-isa
  (name play)
  (base-insn-bitsize 16)
  (decode-assist (0 1 2 3))
)
  
(define-cpu
  (name cpuf)
  (comment "experimental cpu family")
  (endian little)
  (word-bitsize 32)
)

(define-mach
  (name playb)
  (comment "experimental mach")
  (cpu cpuf)
)

(define-model
  (name test) (comment "test") (attrs)
  (mach playb)
  ;(pipeline all "" () ((fetch) (decode) (execute) (writeback)))
  (unit u-exec "Execution Unit" () 1 1
	() () () ())
)

; Instruction fields.
; Copies of all the variations.

; little endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; little endian, lsb0? = #t
(dnf f-op1       "op1"                 () 15 4)
(dnf f-op2       "op2"                 () 11 4)
(dnf f-op3       "op3"                 () 7 4)
(dnf f-op4       "op4"                 () 3 4)
(dnf f-r1        "r1"                  () 7 4)
(dnf f-r2        "r2"                  () 3 4)
(df  f-simm16     "simm16"             () 31 16 INT #f #f)
(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
(df  f-simm32     "simm32"             () 47 32 INT #f #f)
(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

; big endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; big endian, lsb0? = #t
;(dnf f-op1       "op1"                 () 15 4)
;(dnf f-op2       "op2"                 () 11 4)
;(dnf f-op3       "op3"                 () 7 4)
;(dnf f-op4       "op4"                 () 3 4)
;(dnf f-r1        "r1"                  () 7 4)
;(dnf f-r2        "r2"                  () 3 4)
;(df  f-simm16     "simm16"             () 31 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
;(df  f-simm32     "simm32"             () 47 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

(define-normal-insn-enum insn-op1 "insn format enums" () OP1_ f-op1
  (.map .str (.iota 16))
)

(define-normal-insn-enum insn-op2 "insn format enums (2)" () OP2_ f-op2
  (.map .str (.iota 16))
)

(define-normal-insn-enum insn-op3 "insn format enums (3)" () OP3_ f-op3
  (.map .str (.iota 16))
)

(define-normal-insn-enum insn-op4 "insn format enums (4)" () OP4_ f-op4
  (.map .str (.iota 16))
)

; Hardware.

(dnh h-pc "program counter" (PC PROFILE) (pc) () () ())

; get the real index of a gpr on the circular register queue.

(define-pmacro (real-gpr-index index)
  (if WI (lt index 20)
    ; global reg
    index
    ; local reg
    (sequence WI ((WI pr))
      (set pr (add index (reg h-gr 0)))
      (if WI (ge pr 256)
    (sub pr 236)
    pr
      )
    )
  )
)

; All accesses to gprs in instructions use {get|set}-{gpr|vgpr}
; functions.  These functions handle register 0 being 0.  This cannot
; be handled without understanding the context of the get or set since
; regs 1-3 are 0 for vector instructions but not for scalar
; instructions.
;
; general purpose registers.

;(define-hardware
;  (name h-gpr)
;  (comment "General Purpose Registers")
;  (type register DI (256))
;  (indices keyword "" (gen-register-names "r" 256 0 1))
;  (get (index)
;    (raw-reg DI h-gpr (real-gpr-index index))
;  )
;  (set (index newval)
;    (set (raw-reg DI h-gpr (real-gpr-index index)) newval)
;  )
;)


(define-hardware
  (name h-gr)
  (comment "general registers")
  (attrs PROFILE );CACHE-ADDR)
  (type register WI (16))
  (indices keyword ""
	   ( (fp 13) (lr 14) (sp 15)
	     (r0 0) (r1 1) (r2 2) (r3 3) (r4 4) (r5 5) (r6 6) (r7 7)
	     (r8 8) (r9 9) (r10 10) (r11 11) (r12 12) (r13 13) (r14 14) (r15 15)
	     ))
  (get (index)
    (raw-reg WI h-gr (real-gpr-index index))
  )
  (set (index newval)
    (set (raw-reg WI h-gr (real-gpr-index index)) newval)
  )
)

(define-hardware
  (name h-status)
  (comment "status reg")
  (type register SI)
  (get () (const 0))
  (set (newval) (nop))
)

; These bits are actually part of the PS register
(dsh h-nbit "negative bit" () (register BI))
(dsh h-zbit "zero     bit" () (register BI))
(dsh h-vbit "overflow bit" () (register BI))
(dsh h-cbit "carry    bit" () (register BI))

(define-hardware
  (name ps)
  (type register QI)
  (layout h-nbit h-zbit h-vbit h-cbit (0 4))
)

(dsh h-df "df test" () (register DF))
(dsh h-tf "tf test" () (register TF))

(define-hardware
  (name accum)
  (type register (INT 64))
)

; Operand attributes.

(define-attr
  (for operand)
  (type boolean)
  (name HASH-PREFIX)
  (comment "immediates have a '#' prefix")
)

; Operands.

(dnop nbit "negative bit" (SEM-ONLY) h-nbit f-nil)
(dnop vbit "overflow bit" (SEM-ONLY) h-vbit f-nil)
(dnop zbit "zero     bit" (SEM-ONLY) h-zbit f-nil)
(dnop cbit "carry    bit" (SEM-ONLY) h-cbit f-nil)

(dnop dr     "destination register"    () h-gr   f-r1)
(dnop sr     "source register"         () h-gr   f-r2)
(dnop simm16 "16 bit signed immediate" (HASH-PREFIX) h-sint f-simm16)
(dnop simm16b "16 bit signed immediate after simm32" (HASH-PREFIX) h-sint f-simm16b)
(dnop simm32 "32 bit signed immediate" (HASH-PREFIX) h-sint f-simm32)
(dnop simm32b "32 bit signed immediate after simm16" (HASH-PREFIX) h-sint f-simm32b)

; Note that `df' doesn't work as that is a pmacro.
(dnop df-reg "df reg" () h-df f-nil)
(dnop tf-reg "tf reg" () h-tf f-nil)

; Instructions.

(dni add "add"
     ()
     "add $dr,$sr"
     ; Use (f-op1 OP1_4) to exercise it.
     (+ (f-op1 OP1_4) OP2_0 dr sr)
     (sequence ()
	       (set vbit (add-oflag dr sr (const 0)))
	       (set cbit (add-cflag dr sr (const 0)))
	       (set dr (add dr sr))
	       (set zbit (zflag dr))
	       (set nbit (nflag dr)))
     ()
)

(dni addv2 "add version 2"
     ()
     "add $dr,$sr"
     (+ OP1_4 OP2_1 dr sr)
     (sequence ((WI tmp1))
	       (parallel ()
			 (set (local DFLT tmp1) (add dr sr))
			 (set vbit (add-oflag dr sr (const 0)))
			 (set cbit (add-cflag dr sr (const 0))))
	       (set zbit (zflag tmp1))
	       (set nbit (nflag tmp1))
	       (set dr tmp1)
	       )
     ()
)

(dni addi16 "addi16"
     ()
     "addi16 $dr,$sr,$simm16"
     (+ OP1_4 OP2_2 dr sr simm16)
     (set dr (add sr simm16))
     ()
)

(dni addi32 "addi32"
     ()
     "addi32 $dr,$sr,$simm32"
     (+ OP1_4 OP2_3 dr sr simm32)
     (set dr (add sr simm32))
     ()
)

(define-pmacro (reg+ oprnd n)
  (reg h-gr (add (index-of oprnd) (const n)))
)

(dni ldm "ldm"
     ()
     "ldm $dr,$sr"
     (+ OP1_5 OP2_2 dr sr)
     (sequence ()
	       (set dr sr)
	       (set (reg+ dr 1) (reg+ sr 1))
	       )
     ()
)

(dni use-ifield "use-ifield"
     ()
     "foo $dr,$sr"
     (+ OP1_5 OP2_3 dr sr)
     (sequence ()
	       (set dr (ifield f-r2))
	       )
     ()
)

(dni use-index-of "index-of"
     ()
     "index-of $dr,$sr"
     (+ OP1_5 OP2_4 dr sr)
     (set dr (reg h-gr (add (index-of sr) (const 1))))
     ()
)

(dni load-df "use df"
     ()
     "load-df df,[$sr]"
     (+ OP1_6 OP2_0 OP3_0 sr)
     (set df-reg (mem DF sr))
     ()
)

(dni make-df "use df"
     ()
     "make-df df,[$sr]"
     (+ OP1_6 OP2_1 OP3_0 sr)
     (set df-reg (join DF SI (mem SI sr) (mem SI (add sr (const 4)))))
     ()
)

(dni split-df "use df"
     ()
     "split-df df,[$sr]"
     (+ OP1_6 OP2_2 OP3_0 sr)
     (sequence ((DF temp))
	       (set temp df-reg)
	       (set (concat (SI SI)
			     sr
			     (reg h-gr (add (regno sr) (const 1))))
		    (split DF SI temp))
	       )
     ()
)

(dni load-tf "use tf"
     ()
     "load-tf tf,[$sr]"
     (+ OP1_6 OP2_3 OP3_0 sr)
     (set tf-reg (mem TF sr))
     ()
)

(dni make-tf "use tf"
     ()
     "make-tf tf,[$sr]"
     (+ OP1_6 OP2_4 OP3_0 sr)
     (set tf-reg (join TF SI
		    sr
		    (reg h-gr (add (regno sr) (const 1)))
		    (reg h-gr (add (regno sr) (const 2)))
		    (reg h-gr (add (regno sr) (const 3)))))
     ()
)

(dni split-tf "use tf"
     ()
     "split-tf tf,[$sr]"
     (+ OP1_6 OP2_5 OP3_0 sr)
     (sequence ((TF temp))
	       (set temp tf-reg)
	       (set (concat (SI SI SI SI)
			     sr
			     (reg h-gr (add (regno sr) (const 1)))
			     (reg h-gr (add (regno sr) (const 2)))
			     (reg h-gr (add (regno sr) (const 3))))
		    (split TF SI temp))
	       )
     ()
)

;;(define-pmacro (no-ext-expr mode expr) expr)
;;(define-pmacro (ext-expr mode expr) (ext mode expr))
;;(define-pmacro (zext-expr mode expr) (zext mode expr))

(define-pmacro (load-op suffix op2-op mode ext-op)
 (.let (
	(no-ext-expr (.pmacro (mode expr) expr))
	(ext-expr (.pmacro (mode expr) (ext mode expr)))
	(zext-expr (.pmacro (mode expr) (zext mode expr)))
	 )
  (begin
    (dni (.sym ld suffix) (.str "ld" suffix)
	 ()
	 (.str "ld" suffix " $dr,@@@@$sr")
	 (+ OP1_2 op2-op dr sr)
	 (set dr (ext-op WI (mem mode sr)))
	 ())
  )
 )
)

(load-op "" OP2_12 WI no-ext-expr)
(load-op b OP2_8 QI ext-expr)
(load-op h OP2_10 HI ext-expr)
(load-op ub OP2_9 QI zext-expr)
(load-op uh OP2_11 HI zext-expr)

(dni do-count-test "do-count-test"
     ()
     "do-count-test $dr,$sr"
     (+ OP1_7 OP2_0 dr sr)
     (sequence ()
	       (do-count VOID iter 4 (set dr (add sr iter)))
	       (do-count iter (and sr 7) (set dr (add sr iter)))
	       )
     ()
)
@


1.9
log
@Rework do-count to take an expression for the iteration count,
and swap the iteration-variable/#iterations arguments.
@
text
@d119 39
d168 6
d198 5
@


1.8
log
@	Add do-count rtl function.
	* rtl-c.scm (s-do-count): New function.
	(do-count): New rtl handler.
	* rtl-traverse.scm (-rtx-traverse-iteration): New function.
	(-rtx-make-traverser-table): Add ITERATION.
	* rtl.scm (rtx-env-make-iteration-locals): New function.
	* rtx-funcs.scm (do-count): New rtl function.
	* cpu/play.cpu: Add do-count-test insn.
	* doc/rtl.texi: Add docs on do-count.
@
text
@d359 4
a362 1
     (do-count VOID 4 iter (set dr (add sr iter)))
@


1.7
log
@	Add define-rtl-version.
	* read.scm (-CGEN-RTL-VERSION): Renamed from -CGEN-LANG-VERSION.
	(cgen-rtl-major, cgen-rtl-minor): Similarly renamed.
	(cgen-lang-fixlevel): Delete.
	(-supported-rtl-versions): New variable.
	(-cmd-define-rtl-version): New function.
	(init-reader!): New command define-rtl-version.
	(-cgen): Add rtl version to --version output.
	* doc/rtl.texi: Document rtl version support.
	* cpu/play.cpu: Add define-rtl-version.
@
text
@d203 1
a203 1
			 (set tmp1 (add dr sr))
d354 8
@


1.6
log
@	* cpu/play.cpu: Add example of hardware `layout'.
	* doc/porting.tex: Add docs on simplify.inc.
	* doc/rtl.texi: Cleanup pass over "Simplification macros",
	and other things.

	* ifield.scm: Whitespace/formatting cleanup.

	* ifield.scm (-multi-ifield-parse): Watch for missing subfields.
@
text
@d9 2
@


1.5
log
@	Extend pmacro language, add testsuite.
	* Makefile.am (SUBDIRS): Add testsuite.
	* Makefile.in: Regenerate.
	* configure.in (AC_OUTPUT): Create testsuite/Makefile,
	testsuite/test-utils.sh.
	* configure: Regenerate.
	* dev.scm (cload): Handle testsuite app.
	(load-testsuite): New function.
	* pmacros.scm: (-pmacro-debug?): New global.
	(-smacro-table): New global.
	(-smacro-lookup, -smacro-set!): New functions.
	(-pmacro-make): New argument `syntactic-form?', all callers updated.
	(-pmacro-syntactic-form?): New function.
	(-pmacro-expected-number, -pmacro-verify-number): New functions.
	(-pmacro-expected-integer, -pmacro-verify-integer): New functions.
	(-pmacro-expected-non-negative-integer): New function.
	(-pmacro-verify-non-negative-integer): New function.
	(-pmacro-expand-expr-list): New function.
	(-pmacro-process-args-1): Renamed from -pmacro-process-args.
	(-pmacro-process-args): Renamed from -pmacro-invoke.
	(-pmacro-apply, -smacro-apply): New functions.
	(-pmacro-expand): Rewrite syntactic form processing.
	(-pmacro-build-lambda): Reformat.
	(define-pmacro): Watch for more errors in definition.
	(pmacro-debug): New function.
	(pmacro-trace): Set/reset -pmacro-debug?.
	(all existing builtin pmacro helpers): Rename to -pmacro-builtin-foo.
	(-pmacro-builtin-substring): Fix.  Add support for `end' marker.
	(-pmacro-builtin-for-each, et.al.): New helpers for .for-each, .let,
	.if, .case, .cond, .begin, .print, .dump, .error, .list, .ref,
	.length, .replicate, .equals, .and, .or, .not, .eq, .ne, .lt, .gt,
	.le, .ge, .add, .sub, .mul, .div, .rem, .sll, .srl, .sra, .bitand,
	.bitor, .bitxor, bitinv, .car, .cdr, .caar, .cadr, .cdar, .cddr.
	(pmacros-init!): Initialize -smacro-table.
	Rewrite pmacro initialization.
	* read.scm (reader-process-expanded): Renamed from
	-reader-process-expanded.  All callers updated.
	Recognize () as a no-op.
	(cpu-load): Tweak logging messages.
	* utils.scm (message): Add comment.
	* cpu/play.cpu: Add some instructions to play with .let.
	* doc/cgenint.texi: Move some debugging related docs to here from
	cgen.texi.
	* doc/pmacros.texi: Reorganize.  Add docs for new builtin pmacros.
	* testsuite/Makefile.am: New file.
	* testsuite/Makefile.in: New file.
	* testsuite/test-utils.sh.in: New file.
	* testsuite/run-tests.sh: New file.
	* testsuite/testsuite.cpu: New file.
	* testsuite/pmacros-1.test: New file.
@
text
@d137 1
a137 1
; These bits are actualy part of the PS register
d143 6
@


1.4
log
@	* cpu/play.cpu (add): Use (ifield enum) for one format element.
	* cpu/play.opc: New file.

	Allow arbitrary enums in instruction formats, e.g. (f-op1 OP1_4).
	* insn.scm (-parse-insn-format-ifield-spec): Recognize (ifield enum).
	* doc/rtl.texi (Instructions): Update.
@
text
@d319 27
@


1.3
log
@more playing around
@
text
@d178 2
a179 1
     (+ OP1_4 OP2_0 dr sr)
@


1.3.66.1
log
@Copy over from trunk.
	Extend pmacro language, add testsuite.
	* Makefile.am (SUBDIRS): Add testsuite.
	* Makefile.in: Regenerate.
	* configure.in (AC_OUTPUT): Create testsuite/Makefile,
	testsuite/test-utils.sh.
	* configure: Regenerate.
	* dev.scm (cload): Handle testsuite app.
	(load-testsuite): New function.
	* pmacros.scm: (-pmacro-debug?): New global.
	(-smacro-table): New global.
	(-smacro-lookup, -smacro-set!): New functions.
	(-pmacro-make): New argument `syntactic-form?', all callers updated.
	(-pmacro-syntactic-form?): New function.
	(-pmacro-expected-number, -pmacro-verify-number): New functions.
	(-pmacro-expected-integer, -pmacro-verify-integer): New functions.
	(-pmacro-expected-non-negative-integer): New function.
	(-pmacro-verify-non-negative-integer): New function.
	(-pmacro-expand-expr-list): New function.
	(-pmacro-process-args-1): Renamed from -pmacro-process-args.
	(-pmacro-process-args): Renamed from -pmacro-invoke.
	(-pmacro-apply, -smacro-apply): New functions.
	(-pmacro-expand): Rewrite syntactic form processing.
	(-pmacro-build-lambda): Reformat.
	(define-pmacro): Watch for more errors in definition.
	(pmacro-debug): New function.
	(pmacro-trace): Set/reset -pmacro-debug?.
	(all existing builtin pmacro helpers): Rename to -pmacro-builtin-foo.
	(-pmacro-builtin-substring): Fix.  Add support for `end' marker.
	(-pmacro-builtin-for-each, et.al.): New helpers for .for-each, .let,
	.if, .case, .cond, .begin, .print, .dump, .error, .list, .ref,
	.length, .replicate, .equals, .and, .or, .not, .eq, .ne, .lt, .gt,
	.le, .ge, .add, .sub, .mul, .div, .rem, .sll, .srl, .sra, .bitand,
	.bitor, .bitxor, bitinv, .car, .cdr, .caar, .cadr, .cdar, .cddr.
	(pmacros-init!): Initialize -smacro-table.
	Rewrite pmacro initialization.
	* read.scm (reader-process-expanded): Renamed from
	-reader-process-expanded.  All callers updated.
	Recognize () as a no-op.
	(cpu-load): Tweak logging messages.
	* utils.scm (message): Add comment.
	* cpu/play.cpu: Add some instructions to play with .let.
	* doc/cgenint.texi: Move some debugging related docs to here from
	cgen.texi.
	* doc/pmacros.texi: Reorganize.  Add docs for new builtin pmacros.
	* testsuite/Makefile.am: New file.
	* testsuite/Makefile.in: New file.
	* testsuite/test-utils.sh.in: New file.
	* testsuite/run-tests.sh: New file.
	* testsuite/testsuite.cpu: New file.
	* testsuite/pmacros-1.test: New file.
@
text
@a317 27

;;(define-pmacro (no-ext-expr mode expr) expr)
;;(define-pmacro (ext-expr mode expr) (ext mode expr))
;;(define-pmacro (zext-expr mode expr) (zext mode expr))

(define-pmacro (load-op suffix op2-op mode ext-op)
 (.let (
	(no-ext-expr (.pmacro (mode expr) expr))
	(ext-expr (.pmacro (mode expr) (ext mode expr)))
	(zext-expr (.pmacro (mode expr) (zext mode expr)))
	 )
  (begin
    (dni (.sym ld suffix) (.str "ld" suffix)
	 ()
	 (.str "ld" suffix " $dr,@@@@$sr")
	 (+ OP1_2 op2-op dr sr)
	 (set dr (ext-op WI (mem mode sr)))
	 ())
  )
 )
)

(load-op "" OP2_12 WI no-ext-expr)
(load-op b OP2_8 QI ext-expr)
(load-op h OP2_10 HI ext-expr)
(load-op ub OP2_9 QI zext-expr)
(load-op uh OP2_11 HI zext-expr)
@


1.3.66.2
log
@Bring over various patches from the trunk.
@
text
@d178 1
a178 2
     ; Use (f-op1 OP1_4) to exercise it.
     (+ (f-op1 OP1_4) OP2_0 dr sr)
@


1.2
log
@tweak
@
text
@d14 1
a14 1
  (insn-lsb0? #f)
d47 1
d49 48
a96 8
(dnf f-op1       "op1"                 () 0 4)
(dnf f-op2       "op2"                 () 4 4)
(dnf f-op3       "op3"                 () 8 4)
(dnf f-op4       "op4"                 () 12 4)
(dnf f-r1        "r1"                  () 8 4)
(dnf f-r2        "r2"                  () 12 4)
(df  f-simm16     "simm16"             () 16 16 INT #f #f)

d165 3
d204 1
a204 1
(dni addi "addi"
d206 1
a206 1
     "addi $dr,$sr,$simm16"
d209 8
@


1.1
log
@2001-07-05  Ben Elliston  <bje@@redhat.com>

	* README: Update.

	* read.scm (include): Include files from srcdir/cpu.
	(-cgen): Likewise for loading .cpu files.
	* *.cpu: Move all cpu descriptions into cpu subdirectory.
	* *.opc: Likewise.
	* simplify.inc: Likewise.
@
text
@d123 1
a123 1
(dnop simm-16 "16 bit signed immediate" (HASH-PREFIX) h-sint f-simm16)
d162 3
a164 3
     "addi $dr,$sr,$simm-16"
     (+ OP1_4 OP2_2 dr sr simm-16)
     (set dr (add sr simm-16))
@


1.1.22.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d14 1
a14 1
  (insn-lsb0? #t)
a46 1
; Copies of all the variations.
d48 8
a55 48
; little endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; little endian, lsb0? = #t
(dnf f-op1       "op1"                 () 15 4)
(dnf f-op2       "op2"                 () 11 4)
(dnf f-op3       "op3"                 () 7 4)
(dnf f-op4       "op4"                 () 3 4)
(dnf f-r1        "r1"                  () 7 4)
(dnf f-r2        "r2"                  () 3 4)
(df  f-simm16     "simm16"             () 31 16 INT #f #f)
(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
(df  f-simm32     "simm32"             () 47 32 INT #f #f)
(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

; big endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; big endian, lsb0? = #t
;(dnf f-op1       "op1"                 () 15 4)
;(dnf f-op2       "op2"                 () 11 4)
;(dnf f-op3       "op3"                 () 7 4)
;(dnf f-op4       "op4"                 () 3 4)
;(dnf f-r1        "r1"                  () 7 4)
;(dnf f-r2        "r2"                  () 3 4)
;(df  f-simm16     "simm16"             () 31 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
;(df  f-simm32     "simm32"             () 47 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

d123 1
a123 4
(dnop simm16 "16 bit signed immediate" (HASH-PREFIX) h-sint f-simm16)
(dnop simm16b "16 bit signed immediate after simm32" (HASH-PREFIX) h-sint f-simm16b)
(dnop simm32 "32 bit signed immediate" (HASH-PREFIX) h-sint f-simm32)
(dnop simm32b "32 bit signed immediate after simm16" (HASH-PREFIX) h-sint f-simm32b)
d160 1
a160 9
(dni addi16 "addi16"
     ()
     "addi16 $dr,$sr,$simm16"
     (+ OP1_4 OP2_2 dr sr simm16)
     (set dr (add sr simm16))
     ()
)

(dni addi32 "addi32"
d162 3
a164 3
     "addi32 $dr,$sr,$simm32"
     (+ OP1_4 OP2_3 dr sr simm32)
     (set dr (add sr simm32))
@


1.1.20.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d14 1
a14 1
  (insn-lsb0? #t)
a46 1
; Copies of all the variations.
d48 8
a55 48
; little endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; little endian, lsb0? = #t
(dnf f-op1       "op1"                 () 15 4)
(dnf f-op2       "op2"                 () 11 4)
(dnf f-op3       "op3"                 () 7 4)
(dnf f-op4       "op4"                 () 3 4)
(dnf f-r1        "r1"                  () 7 4)
(dnf f-r2        "r2"                  () 3 4)
(df  f-simm16     "simm16"             () 31 16 INT #f #f)
(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
(df  f-simm32     "simm32"             () 47 32 INT #f #f)
(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

; big endian, lsb0? = #f
;(dnf f-op1       "op1"                 () 0 4)
;(dnf f-op2       "op2"                 () 4 4)
;(dnf f-op3       "op3"                 () 8 4)
;(dnf f-op4       "op4"                 () 12 4)
;(dnf f-r1        "r1"                  () 8 4)
;(dnf f-r2        "r2"                  () 12 4)
;(df  f-simm16     "simm16"             () 16 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 48 16 INT #f #f)
;(df  f-simm32     "simm32"             () 16 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 32 32 INT #f #f)

; big endian, lsb0? = #t
;(dnf f-op1       "op1"                 () 15 4)
;(dnf f-op2       "op2"                 () 11 4)
;(dnf f-op3       "op3"                 () 7 4)
;(dnf f-op4       "op4"                 () 3 4)
;(dnf f-r1        "r1"                  () 7 4)
;(dnf f-r2        "r2"                  () 3 4)
;(df  f-simm16     "simm16"             () 31 16 INT #f #f)
;(df  f-simm16b    "16 bit signed immediate after simm32" () 63 16 INT #f #f)
;(df  f-simm32     "simm32"             () 47 32 INT #f #f)
;(df  f-simm32b    "32 bit signed immediate after simm16" () 63 32 INT #f #f)

d123 1
a123 4
(dnop simm16 "16 bit signed immediate" (HASH-PREFIX) h-sint f-simm16)
(dnop simm16b "16 bit signed immediate after simm32" (HASH-PREFIX) h-sint f-simm16b)
(dnop simm32 "32 bit signed immediate" (HASH-PREFIX) h-sint f-simm32)
(dnop simm32b "32 bit signed immediate after simm16" (HASH-PREFIX) h-sint f-simm32b)
d160 1
a160 9
(dni addi16 "addi16"
     ()
     "addi16 $dr,$sr,$simm16"
     (+ OP1_4 OP2_2 dr sr simm16)
     (set dr (add sr simm16))
     ()
)

(dni addi32 "addi32"
d162 3
a164 3
     "addi32 $dr,$sr,$simm32"
     (+ OP1_4 OP2_3 dr sr simm32)
     (set dr (add sr simm32))
@


