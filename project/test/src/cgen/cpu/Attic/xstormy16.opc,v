head	1.7;
access;
symbols
	sid-snapshot-20110801:1.6
	cgen-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	cgen-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	cgen-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	cgen-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	cgen-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	cgen-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	cgen-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	cgen-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	cgen-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	cgen-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	cgen-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	cgen-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	cgen-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	cgen-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	cgen-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	cgen-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	cgen-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	cgen-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	cgen-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	cgen-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	cgen-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	cgen-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	cgen-snapshot-20091001:1.6
	arc-sim-20090309:1.6.6.1
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	cgen-snapshot-20090701:1.6
	dje-cgen-play1-branch:1.6.0.10
	dje-cgen-play1-branchpoint:1.6
	cgen-1_1-branch:1.6.0.8
	cgen-1_1-branchpoint:1.6
	sid-snapshot-20090601:1.6
	cgen-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	cgen-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	cgen-snapshot-20090401:1.6
	arc-insight_6_8-branch:1.6.0.6
	arc-insight_6_8-branchpoint:1.6
	sid-snapshot-20090301:1.6
	cgen-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	cgen-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	cgen-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	cgen-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	cgen-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	cgen-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	cgen-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	cgen-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	cgen-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	cgen-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	cgen-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	cgen-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	cgen-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	cgen-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	cgen-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	cgen-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	cgen-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	cgen-snapshot-20071001:1.6
	msnyder-fork-checkpoint-branch:1.6.0.4
	msnyder-fork-checkpoint-branchpoint:1.6
	gdb-csl-arm-20051020-branch:1.6.0.2
	gdb-csl-arm-20051020-branchpoint:1.6
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.58
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.54
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.52
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.50
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.48
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.46
	drow_intercu-20040221-branchpoint:1.4
	cagney_bfdfile-20040213-branch:1.4.0.44
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.42
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.40
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.38
	cagney_x86i386-20030821-branch:1.4.0.36
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.34
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.4
	cagney_convert-20030606-branch:1.4.0.30
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.28
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.24
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.20
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.18
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.16
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.14
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.12
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.10
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.8
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.6
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030202-branch:1.4.0.4
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.20
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.18
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.16
	gdb_5_3-branch:1.1.0.14
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.12
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.10
	readline_4_3-import-branchpoint:1.1
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.8
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.6
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.4
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.2
	gdb_5_2-2002-03-03-branchpoint:1.1
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.7
date	2011.08.22.15.25.10;	author nickc;	state dead;
branches;
next	1.6;

1.6
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2005.02.23.16.04.38;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.17.04.48.25;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.17.03.54.41;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.02.21.53.53;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.07.22.51.28;	author geoffk;	state Exp;
branches
	1.1.18.1
	1.1.20.1;
next	;

1.1.18.1
date	2002.12.23.19.38.05;	author carlton;	state Exp;
branches;
next	;

1.1.20.1
date	2003.12.14.20.26.56;	author drow;	state Exp;
branches;
next	;

1.6.6.1
date	2009.03.09.20.36.06;	author amylaar;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Move cpu files from cgen/cpu to top level cpu directory.
@
text
@/* XSTORMY16 opcode support.  -*- C -*-
   Copyright (C) 2001, 2002, 2005 Red Hat, Inc.
   This file is part of CGEN.  */

/* This file is an addendum to xstormy16.cpu.  Heavy use of C code isn't
   appropriate in .cpu files, so it resides here.  This especially applies
   to assembly/disassembly where parsing/printing can be quite involved.
   Such things aren't really part of the specification of the cpu, per se,
   so .cpu files provide the general framework and .opc files handle the
   nitty-gritty details as necessary.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h".  */

/* -- opc.h */

/* Allows reason codes to be output when assembler errors occur.  */
#define CGEN_VERBOSE_ASSEMBLER_ERRORS

/* We can't use the default hash size because many bits are used by
   operands.  */
#define CGEN_DIS_HASH_SIZE 1
#define CGEN_DIS_HASH(buf, value) 0
/* -- */

/* -- asm.c */

/* The machine-independent code doesn't know how to disambiguate
     mov (foo),r3
   and
     mov (r2),r3
   where 'foo' is a label.  This helps it out. */

static const char *
parse_mem8 (CGEN_CPU_DESC cd,
	    const char **strp,
	    int opindex,
	    unsigned long *valuep)
{
  if (**strp == '(')
    {
      const char *s = *strp;
      
      if (s[1] == '-' && s[2] == '-')
	return _("Bad register in preincrement");

      while (ISALNUM (*++s))
	;
      if (s[0] == '+' && s[1] == '+' && (s[2] == ')' || s[2] == ','))
	return _("Bad register in postincrement");
      if (s[0] == ',' || s[0] == ')')
	return _("Bad register name");
    }
  else if (cgen_parse_keyword (cd, strp, & xstormy16_cgen_opval_gr_names, 
			       (long *) valuep) == NULL)
    return _("Label conflicts with register name");
  else if (strncasecmp (*strp, "rx,", 3) == 0
	   || strncasecmp (*strp, "rxl,", 3) == 0
	   || strncasecmp (*strp, "rxh,", 3) == 0)
    return _("Label conflicts with `Rx'");
  else if (**strp == '#')
    return _("Bad immediate expression");
  
  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
}

/* For the add and subtract instructions, there are two immediate forms,
   one for small operands and one for large ones.  We want to use
   the small one when possible, but we do not want to generate relocs
   of the small size.  This is somewhat tricky.  */
   
static const char *
parse_small_immediate (CGEN_CPU_DESC cd,
		       const char **strp,
		       int opindex,
		       unsigned long *valuep)
{
  bfd_vma value;
  enum cgen_parse_operand_result result;
  const char *errmsg;

  if (**strp == '@@')
    return _("No relocation for small immediate");

  errmsg = (* cd->parse_operand_fn)
    (cd, CGEN_PARSE_OPERAND_INTEGER, strp, opindex, BFD_RELOC_NONE,
     & result, & value);
  
  if (errmsg)
    return errmsg;

  if (result != CGEN_PARSE_OPERAND_RESULT_NUMBER)
    return _("Small operand was not an immediate number");

  *valuep = value;
  return NULL;
}

/* Literal scan be either a normal literal, a @@hi() or @@lo relocation.  */
   
static const char *
parse_immediate16 (CGEN_CPU_DESC cd,
		   const char **strp,
		   int opindex,
		   unsigned long *valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result;
  bfd_reloc_code_real_type code = BFD_RELOC_NONE;
  bfd_vma value;

  if (strncmp (*strp, "@@hi(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_HI16;
    }
  else
  if (strncmp (*strp, "@@lo(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_LO16;
    }

  if (code == BFD_RELOC_NONE)
    errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
  else
    {
      errmsg = cgen_parse_address (cd, strp, opindex, code, &result, &value);
      if ((errmsg == NULL) &&
	  (result != CGEN_PARSE_OPERAND_RESULT_QUEUED))
	errmsg = _("Operand is not a symbol");

      *valuep = value;
      if ((code == BFD_RELOC_HI16 || code == BFD_RELOC_LO16)
	  && **strp == ')')        
	*strp += 1;
      else
        {
	  errmsg = _("Syntax error: No trailing ')'");
	  return errmsg;
	}
    }
  return errmsg;
}
/* -- */
@


1.6
log
@Update function declarations to ISO C90 formatting
@
text
@@


1.6.6.1
log
@Check in ARCompact simulator.  A valid configuration is arc-elf.
This is not quite finished and has most likely a few files that are
obsolete & not used, but it's good enough to run gcc regression tests.
@
text
@d28 1
a28 1
#define CGEN_DIS_HASH(buf, value, big_p) 0
@


1.5
log
@Fix compile time warnings generated by gcc 4.0
@
text
@d18 1
a18 2
   <arch>-ibd.h additions use: "-- ibd.h"
*/
a31 6
static const char * parse_mem8
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_small_immediate
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_immediate16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d40 4
a43 5
parse_mem8 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d78 4
a81 5
parse_small_immediate (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d92 1
a92 1
     &result, &value);
d104 1
a104 1
/* Literal scan be either a normal literal, a @@hi() or @@lo relocation. */
d107 4
a110 5
parse_immediate16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
@


1.4
log
@* cpu/xstormy16.opc (parse_immediate16): Add prototype.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002 Red Hat, Inc.
d68 1
a68 1
			       valuep) == NULL)
@


1.3
log
@* cpu/xstormy16.cpu (imm16): Call handler immediate16.
* cpu/xstormy16.opc (parse_small_immediate): Return on '@@'.
(parse_immediate16): Handle immediate16 values, which now include
@@hi(label) and @@lo(label)
@
text
@d37 2
@


1.2
log
@	* desc-cpu.scm (gen-maybe-multi-ifld): Remove superfluous parens.
	Add braces and cast for union field.
	(gen-multi-ifield-nodes): Add braces and cast for union field.
	(cgen_operand_table): Similarly fix sentinel.
	(cgen_cpu_close): Constify "insns".  Formatting.
	(cgen-desc.c): Include xregex.h.
	* cpu/ip2k.opc (ip2k_cgen_insn_supported): Move to opc.c section.
	Prototype.
	<opc.c>: Include safe-ctype.h.
	(ip2k_asm_hash): Use ISSPACE and TOLOWER.
	(PARSE_FUNC_DECL): Declare.  Use to prototype parse_fr, parse_addr16,
	parse_addr16_p, parse_addr16_cjp, parse_lit8 and parse_bit3.
	(parse_fr): Constify "old_strp".  Correct type of "tempvalue".
	Don't test it for >= 0.  Use ISSPACE rather than isspace.  Formatting.
	(parse_addr16): Correct type of "value".  Formatting.
	(parse_addr16_p): Likewise.
	(parse_addr16_cjp): Likewise.
	(parse_lit8): Likewise.
	(parse_bit3): Formatting.
	(PRINT_FUNC_DECL): Define.  Use to prototype print_fr, print_dollarhex,
	print_dollarhex8, print_dollarhex16, print_dollarhex_addr16h,
	print_dollarhex_addr16l, print_dollarhex_p, print_dollarhex_cj and
	print_decimal.
	(print_fr): Add ATTRIBUTE_UNUSED on unused args.  Formatting.
	(print_dollarhex): Add ATTRIBUTE_UNUSED on unused args.
	(print_dollarhex8): Likewise.
	(print_dollarhex16): Likewise.
	(print_dollarhex_addr16h): Likewise.
	(print_dollarhex_addr16l): Likewise.
	(print_dollarhex_p): Likewise.
	(print_dollarhex_cj): Likewise.
	(print_decimal): Likewise.
	* cpu/xstormy16.opc (parse_mem8): Use ISALNUM rather than isalnum.
@
text
@d94 3
d109 48
@


1.1
log
@	* cpu/xstormy16.cpu: New file.
	* cpu/xstormy16.opc: New file.
@
text
@d2 1
a2 1
   Copyright (C) 2001 Red Hat, Inc.
d58 1
a58 1
      while (isalnum (*++s))
@


1.1.20.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002 Red Hat, Inc.
a36 2
static const char * parse_immediate16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d58 1
a58 1
      while (ISALNUM (*++s))
a93 3
  if (**strp == '@@')
    return _("No relocation for small immediate");

a105 48
}

/* Literal scan be either a normal literal, a @@hi() or @@lo relocation. */
   
static const char *
parse_immediate16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
{
  const char *errmsg;
  enum cgen_parse_operand_result result;
  bfd_reloc_code_real_type code = BFD_RELOC_NONE;
  bfd_vma value;

  if (strncmp (*strp, "@@hi(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_HI16;
    }
  else
  if (strncmp (*strp, "@@lo(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_LO16;
    }

  if (code == BFD_RELOC_NONE)
    errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
  else
    {
      errmsg = cgen_parse_address (cd, strp, opindex, code, &result, &value);
      if ((errmsg == NULL) &&
	  (result != CGEN_PARSE_OPERAND_RESULT_QUEUED))
	errmsg = _("Operand is not a symbol");

      *valuep = value;
      if ((code == BFD_RELOC_HI16 || code == BFD_RELOC_LO16)
	  && **strp == ')')        
	*strp += 1;
      else
        {
	  errmsg = _("Syntax error: No trailing ')'");
	  return errmsg;
	}
    }
  return errmsg;
@


1.1.18.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002 Red Hat, Inc.
a36 2
static const char * parse_immediate16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d58 1
a58 1
      while (ISALNUM (*++s))
a93 3
  if (**strp == '@@')
    return _("No relocation for small immediate");

a105 48
}

/* Literal scan be either a normal literal, a @@hi() or @@lo relocation. */
   
static const char *
parse_immediate16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
{
  const char *errmsg;
  enum cgen_parse_operand_result result;
  bfd_reloc_code_real_type code = BFD_RELOC_NONE;
  bfd_vma value;

  if (strncmp (*strp, "@@hi(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_HI16;
    }
  else
  if (strncmp (*strp, "@@lo(", 4) == 0)
    {
      *strp += 4;
      code = BFD_RELOC_LO16;
    }

  if (code == BFD_RELOC_NONE)
    errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
  else
    {
      errmsg = cgen_parse_address (cd, strp, opindex, code, &result, &value);
      if ((errmsg == NULL) &&
	  (result != CGEN_PARSE_OPERAND_RESULT_QUEUED))
	errmsg = _("Operand is not a symbol");

      *valuep = value;
      if ((code == BFD_RELOC_HI16 || code == BFD_RELOC_LO16)
	  && **strp == ')')        
	*strp += 1;
      else
        {
	  errmsg = _("Syntax error: No trailing ')'");
	  return errmsg;
	}
    }
  return errmsg;
@


