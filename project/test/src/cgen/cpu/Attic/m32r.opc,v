head	1.13;
access;
symbols
	gdb_7_3-branch:1.13.0.2
	arc-sim-20090309:1.12.4.1
	sid-snapshot-20090701:1.12
	cgen-snapshot-20090701:1.12
	dje-cgen-play1-branch:1.12.0.8
	dje-cgen-play1-branchpoint:1.12
	cgen-1_1-branch:1.12.0.6
	cgen-1_1-branchpoint:1.12
	sid-snapshot-20090601:1.12
	cgen-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	cgen-snapshot-20090501:1.12
	sid-snapshot-20090401:1.12
	cgen-snapshot-20090401:1.12
	arc-insight_6_8-branch:1.12.0.4
	arc-insight_6_8-branchpoint:1.12
	sid-snapshot-20090301:1.12
	cgen-snapshot-20090301:1.12
	sid-snapshot-20090201:1.12
	cgen-snapshot-20090201:1.12
	sid-snapshot-20090101:1.12
	cgen-snapshot-20090101:1.12
	sid-snapshot-20081201:1.12
	cgen-snapshot-20081201:1.12
	sid-snapshot-20081101:1.12
	cgen-snapshot-20081101:1.12
	sid-snapshot-20081001:1.12
	cgen-snapshot-20081001:1.12
	sid-snapshot-20080901:1.12
	cgen-snapshot-20080901:1.12
	sid-snapshot-20080801:1.12
	cgen-snapshot-20080801:1.12
	sid-snapshot-20080701:1.12
	cgen-snapshot-20080701:1.12
	sid-snapshot-20080601:1.12
	cgen-snapshot-20080601:1.12
	sid-snapshot-20080501:1.12
	cgen-snapshot-20080501:1.12
	sid-snapshot-20080403:1.12
	sid-snapshot-20080401:1.12
	cgen-snapshot-20080401:1.12
	sid-snapshot-20080301:1.12
	cgen-snapshot-20080301:1.12
	sid-snapshot-20080201:1.12
	cgen-snapshot-20080201:1.12
	sid-snapshot-20080101:1.12
	cgen-snapshot-20080101:1.12
	sid-snapshot-20071201:1.12
	cgen-snapshot-20071201:1.12
	sid-snapshot-20071101:1.12
	cgen-snapshot-20071101:1.12
	sid-snapshot-20071001:1.12
	cgen-snapshot-20071001:1.12
	msnyder-fork-checkpoint-branch:1.12.0.2
	msnyder-fork-checkpoint-branchpoint:1.12
	gdb-csl-arm-20051020-branch:1.11.0.2
	gdb-csl-arm-20051020-branchpoint:1.11
	drow_intercu-merge-20040921:1.6
	drow_intercu-merge-20040915:1.6
	jimb-gdb_6_2-e500-branch:1.6.0.6
	jimb-gdb_6_2-e500-branchpoint:1.6
	gdb_6_2-20040730-release:1.6
	gdb_6_2-branch:1.6.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.6
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.6
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.10
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.8
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.4
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.2
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.2
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.3
	gdb_6_0-2003-10-04-release:1.3
	kettenis_sparc-20030918-branch:1.3.0.60
	kettenis_sparc-20030918-branchpoint:1.3
	carlton_dictionary-20030917-merge:1.3
	ezannoni_pie-20030916-branchpoint:1.3
	ezannoni_pie-20030916-branch:1.3.0.58
	cagney_x86i386-20030821-branch:1.3.0.56
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.54
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.52
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.50
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.48
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.46
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.44
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.42
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.40
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.38
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.36
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.34
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.32
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.30
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.28
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.26
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030202-branch:1.3.0.24
	interps-20030202-branchpoint:1.3
	cagney-unwind-20030108-branch:1.3.0.22
	cagney-unwind-20030108-branchpoint:1.3
	carlton_dictionary-20021223-merge:1.3
	gdb_5_3-2002-12-12-release:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.20
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.18
	carlton_dictionary-20020920-branchpoint:1.3
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.16
	gdb_5_3-branch:1.3.0.14
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.12
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.10
	readline_4_3-import-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	kseitz_interps-20020528-branch:1.3.0.8
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.6
	cagney_regbuf-20020515-branchpoint:1.3
	jimb-macro-020506-branch:1.3.0.4
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	cgen-1-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.13
date	2009.07.12.16.03.39;	author devans;	state dead;
branches
	1.13.2.1;
next	1.12;

1.12
date	2005.10.27.06.57.56;	author amodra;	state Exp;
branches
	1.12.4.1
	1.12.6.1
	1.12.8.1;
next	1.11;

1.11
date	2005.10.19.14.44.16;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.18.07.53.17;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.14.08.33.27;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.23.16.04.38;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.30.09.29.16;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.13.02.55.15;	author bje;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.12.03.17.38.50;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.20.05.16.06;	author bje;	state Exp;
branches
	1.3.18.1
	1.3.20.1;
next	1.2;

1.2
date	2001.10.09.08.24.22;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.05.12.45.47;	author bje;	state Exp;
branches;
next	;

1.3.18.1
date	2003.12.15.23.59.57;	author carlton;	state Exp;
branches;
next	;

1.3.20.1
date	2003.12.14.20.26.56;	author drow;	state Exp;
branches;
next	;

1.5.4.1
date	2004.04.02.16.47.40;	author drow;	state Exp;
branches;
next	;

1.12.4.1
date	2009.03.09.20.36.06;	author amylaar;	state Exp;
branches;
next	;

1.12.6.1
date	2009.07.12.15.59.25;	author devans;	state dead;
branches;
next	;

1.12.8.1
date	2009.07.14.16.13.32;	author devans;	state dead;
branches;
next	;

1.13.2.1
date	2011.09.04.17.03.15;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	Delete files that now live in ../cpu.
	* cpu/iq20.cpu: Delete.
	* cpu/iq2000.cpu: Delete.
	* cpu/iq2000.opc: Delete.
	* cpu/iq2000m.cpu: Delete.
	* cpu/m32r.cpu: Delete.
	* cpu/m32r.opc: Delete.
	* cpu/xc16x.cpu: Delete.
	* cpu/xc16x.opc: Delete.
@
text
@/* M32R opcode support.  -*- C -*-
   Copyright (C) 2000, 2001, 2004, 2005 Red Hat, Inc.
   This file is part of CGEN.  */

/* This file is an addendum to m32r.cpu.  Heavy use of C code isn't
   appropriate in .cpu files, so it resides here.  This especially applies
   to assembly/disassembly where parsing/printing can be quite involved.
   Such things aren't really part of the specification of the cpu, per se,
   so .cpu files provide the general framework and .opc files handle the
   nitty-gritty details as necessary.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h"  */

/* -- opc.h */

#undef  CGEN_DIS_HASH_SIZE
#define CGEN_DIS_HASH_SIZE 256
#undef  CGEN_DIS_HASH
#if 0
#define X(b) (((unsigned char *) (b))[0] & 0xf0)
#define CGEN_DIS_HASH(buffer, value) \
(X (buffer) | \
 (X (buffer) == 0x40 || X (buffer) == 0xe0 || X (buffer) == 0x60 || X (buffer) == 0x50 ? 0 \
  : X (buffer) == 0x70 || X (buffer) == 0xf0 ? (((unsigned char *) (buffer))[0] & 0xf) \
  : X (buffer) == 0x30 ? ((((unsigned char *) (buffer))[1] & 0x70) >> 4) \
  : ((((unsigned char *) (buffer))[1] & 0xf0) >> 4)))
#else
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash (buffer, value)
extern unsigned int m32r_cgen_dis_hash (const char *, CGEN_INSN_INT);
#endif

/* -- */

/* -- opc.c */
unsigned int
m32r_cgen_dis_hash (const char * buf ATTRIBUTE_UNUSED, CGEN_INSN_INT value)
{
  unsigned int x;

  if (value & 0xffff0000) /* 32bit instructions.  */
    value = (value >> 16) & 0xffff;

  x = (value >> 8) & 0xf0;
  if (x == 0x40 || x == 0xe0 || x == 0x60 || x == 0x50)
    return x;

  if (x == 0x70 || x == 0xf0)
    return x | ((value >> 8) & 0x0f);

  if (x == 0x30)
    return x | ((value & 0x70) >> 4);
  else
    return x | ((value & 0xf0) >> 4);
}

/* -- */

/* -- asm.c */
static const char * MISSING_CLOSING_PARENTHESIS = N_("missing `)'");

/* Handle '#' prefixes (i.e. skip over them).  */

static const char *
parse_hash (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	    const char **strp,
	    int opindex ATTRIBUTE_UNUSED,
	    long *valuep ATTRIBUTE_UNUSED)
{
  if (**strp == '#')
    ++*strp;
  return NULL;
}

/* Handle shigh(), high().  */

static const char *
parse_hi16 (CGEN_CPU_DESC cd,
	    const char **strp,
	    int opindex,
	    unsigned long *valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "high(", 5) == 0)
    {
      *strp += 5;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_ULO,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	{
	  value >>= 16;
	  value &= 0xffff;
	}
      *valuep = value;
      return errmsg;
    }
  else if (strncasecmp (*strp, "shigh(", 6) == 0)
    {
      *strp += 6;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_SLO,
 				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
        {
          value += 0x8000;
          value >>= 16;
	  value &= 0xffff;
        }
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
}

/* Handle low() in a signed context.  Also handle sda().
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_slo16 (CGEN_CPU_DESC cd, const char ** strp, int opindex, long * valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value = ((value & 0xffff) ^ 0x8000) - 0x8000;
      *valuep = value;
      return errmsg;
    }

  if (strncasecmp (*strp, "sda(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_SDA16,
				   NULL, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_signed_integer (cd, strp, opindex, valuep);
}

/* Handle low() in an unsigned context.
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_ulo16 (CGEN_CPU_DESC cd,
	     const char **strp,
	     int opindex,
	     unsigned long *valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value &= 0xffff;
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
}

/* -- */

/* -- dis.c */
/* Immediate values are prefixed with '#'.  */

#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length)	\
  do								\
    {								\
      if (CGEN_BOOL_ATTR ((attrs), CGEN_OPERAND_HASH_PREFIX))	\
        (*info->fprintf_func) (info->stream, "#");		\
    }								\
  while (0)

/* Handle '#' prefixes as operands.  */

static void
print_hash (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	    void * dis_info,
	    long value ATTRIBUTE_UNUSED,
	    unsigned int attrs ATTRIBUTE_UNUSED,
	    bfd_vma pc ATTRIBUTE_UNUSED,
	    int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
}

#undef  CGEN_PRINT_INSN
#define CGEN_PRINT_INSN my_print_insn

static int
my_print_insn (CGEN_CPU_DESC cd,
	       bfd_vma pc,
	       disassemble_info *info)
{
  bfd_byte buffer[CGEN_MAX_INSN_SIZE];
  bfd_byte *buf = buffer;
  int status;
  int buflen = (pc & 3) == 0 ? 4 : 2;
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  bfd_byte *x;

  /* Read the base part of the insn.  */

  status = (*info->read_memory_func) (pc - ((!big_p && (pc & 3) != 0) ? 2 : 0),
                                      buf, buflen, info);
  if (status != 0)
    {
      (*info->memory_error_func) (status, pc, info);
      return -1;
    }

  /* 32 bit insn?  */
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
    return print_insn (cd, pc, info, buf, buflen);

  /* Print the first insn.  */
  if ((pc & 3) == 0)
    {
      buf += (big_p ? 0 : 2);
      if (print_insn (cd, pc, info, buf, 2) == 0)
	(*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);
      buf += (big_p ? 2 : -2);
    }

  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
    {
      /* Parallel.  */
      (*info->fprintf_func) (info->stream, " || ");
      *x &= 0x7f;
    }
  else
    (*info->fprintf_func) (info->stream, " -> ");

  /* The "& 3" is to pass a consistent address.
     Parallel insns arguably both begin on the word boundary.
     Also, branch insns are calculated relative to the word boundary.  */
  if (print_insn (cd, pc & ~ (bfd_vma) 3, info, buf, 2) == 0)
    (*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);

  return (pc & 3) ? 2 : 4;
}

/* -- */
@


1.13.2.1
log
@Import sources from cgen/cpu directory

cgen/cpu/ChangeLog:

 	* cris.cpu, frv.cpu, iq10.cpu, iq2000.cpu, iq2000m.cpu, lm32.cpu,
 	m32c.cpu, m32r.cpu, mt.cpu, sh.cpu, sh64-compact.cpu,
 	sh64-media.cpu, xc16x.cpu: New file, copied from cgen/cpu.
@
text
@d2 2
a3 24

   Copyright 1998, 1999, 2000, 2001, 2004, 2005, 2007, 2009
   Free Software Foundation, Inc.

   Contributed by Red Hat Inc; developed under contract from
   Mitsubishi Electric Corporation.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

d104 1
a104 1
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
d116 1
a116 1
				   & result_type, & value);
d122 3
a124 3
	{
	  value += 0x8000;
	  value >>= 16;
d126 1
a126 1
	}
d139 1
a139 4
parse_slo16 (CGEN_CPU_DESC cd,
	     const char ** strp,
	     int opindex,
	     long * valuep)
d216 1
d218 7
a224 31
/* Print signed operands with '#' prefixes.  */

static void
print_signed_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			       void * dis_info,
			       long value,
			       unsigned int attrs ATTRIBUTE_UNUSED,
			       bfd_vma pc ATTRIBUTE_UNUSED,
			       int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "%ld", value);
}

/* Print unsigned operands with '#' prefixes.  */

static void
print_unsigned_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
				 void * dis_info,
				 long value,
				 unsigned int attrs ATTRIBUTE_UNUSED,
				 bfd_vma pc ATTRIBUTE_UNUSED,
				 int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "0x%lx", value);
}
d259 1
a259 1
				      buf, buflen, info);
@


1.12
log
@	* cpu/m32r.opc (parse_hi16): Do not assume a 32-bit host word size.
@
text
@@


1.12.8.1
log
@	Delete files that now live in ../cpu.
	* cpu/iq10.cpu: Delete.
	* cpu/iq2000.cpu: Delete.
	* cpu/iq2000.opc: Delete.
	* cpu/iq2000m.cpu: Delete.
	* cpu/m32r.cpu: Delete.
	* cpu/m32r.opc: Delete.
@
text
@@


1.12.6.1
log
@	Delete files that now live in ../cpu.
	* cpu/iq20.cpu: Delete.
	* cpu/iq2000.cpu: Delete.
	* cpu/iq2000.opc: Delete.
	* cpu/iq2000m.cpu: Delete.
	* cpu/m32r.cpu: Delete.
	* cpu/m32r.opc: Delete.
	* cpu/xc16x.cpu: Delete.
	* cpu/xc16x.opc: Delete.
@
text
@@


1.12.4.1
log
@Check in ARCompact simulator.  A valid configuration is arc-elf.
This is not quite finished and has most likely a few files that are
obsolete & not used, but it's good enough to run gcc regression tests.
@
text
@d27 1
a27 1
#define CGEN_DIS_HASH(buffer, value, big_p) \
d34 1
a34 1
#define CGEN_DIS_HASH(buffer, value, big_p) m32r_cgen_dis_hash (buffer, value)
@


1.11
log
@* m32r.opc (parse_slo16): Fix bad application of previous patch.
@
text
@a64 1

d105 4
a108 1
	value >>= 16;
d123 1
a123 1
          value = value + (value & 0x8000 ? 0x10000 : 0);
d125 1
@


1.10
log
@m32r.opc (parse_slo16): Better version of previous patch.
@
text
@d155 1
a155 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
	    value = ((value & 0xffff) ^ 0x8000) - 0x8000;
        }
@


1.9
log
@m32r.opc (parse_slo16): Do not assume a 32-bit host word size.
@
text
@d158 1
a158 1
	    value |= ~0xffff;
@


1.8
log
@Update function declarations to ISO C90 formatting
@
text
@d158 1
a158 1
             value |= 0xffff0000;
@


1.7
log
@Fix compile time warnings generated by gcc 4.0
@
text
@d34 2
a35 2
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash(buffer, value)
extern unsigned int m32r_cgen_dis_hash(const char *, CGEN_INSN_INT);
d42 1
a42 3
m32r_cgen_dis_hash (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value;
d45 2
a46 2
                                                                                
  if (value & 0xffff0000) /* 32bit instructions */
d48 2
a49 2
                                                                                
  x = (value>>8) & 0xf0;
d52 1
a52 1
                                                                                
d54 2
a55 2
    return x | ((value>>8) & 0x0f);
                                                                                
d61 1
a61 1
                                                                                
d65 2
a66 8
static const char * parse_hash
  PARAMS ((CGEN_CPU_DESC, const char **, int, long *));
static const char * parse_hi16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_slo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, long *));
static const char * parse_ulo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d71 4
a74 5
parse_hash (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     const char **strp;
     int opindex ATTRIBUTE_UNUSED;
     long *valuep ATTRIBUTE_UNUSED;
d84 4
a87 5
parse_hi16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d100 1
a100 1
				   &result_type, &value);
d102 1
a102 1
	return "missing `)'";
d114 1
a114 1
 				   &result_type, &value);
d116 1
a116 1
	return "missing `)'";
d136 1
a136 5
parse_slo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     long *valuep;
d149 1
a149 1
				   &result_type, &value);
d151 1
a151 1
	return "missing `)'";
d168 1
a168 1
				   NULL, &value);
d170 1
a170 1
	return "missing `)'";
d184 4
a187 5
parse_ulo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d200 1
a200 1
				   &result_type, &value);
d202 1
a202 1
	return "missing `)'";
a216 3
static void print_hash PARAMS ((CGEN_CPU_DESC, PTR, long, unsigned, bfd_vma, int));
static int my_print_insn PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *));

d230 6
a235 7
print_hash (cd, dis_info, value, attrs, pc, length)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     long value ATTRIBUTE_UNUSED;
     unsigned int attrs ATTRIBUTE_UNUSED;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d238 1
d246 3
a248 4
my_print_insn (cd, pc, info)
     CGEN_CPU_DESC cd;
     bfd_vma pc;
     disassemble_info *info;
@


1.6
log
@Fix bug parsing shigh(0xffff8000)
@
text
@d2 1
a2 1
   Copyright (C) 2000, 2001, 2004 Red Hat, Inc.
d68 1
a68 1
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d83 1
a83 1
     unsigned long *valuep ATTRIBUTE_UNUSED;
d269 2
a270 2
  char buffer[CGEN_MAX_INSN_SIZE];
  char *buf = buffer;
d274 1
a274 1
  char *x;
@


1.5
log
@2004-02-10  Kazuhiro Inaoka  <inaoka.kazuhiro@@renesas.dot.com>

	* cpu/m32r.opc (my_print_insn): Fixed incorrect output when
	disassembling codes for 0x*2 addresses.
@
text
@d2 1
a2 1
   Copyright (C) 2000, 2001 Red Hat, Inc.
d18 1
a18 2
   <arch>-ibd.h additions use: "-- ibd.h"
*/
d130 4
a133 1
	value = (value >> 16) + (value & 0x8000 ? 1 : 0);
@


1.5.4.1
log
@Merge GDB mainline of 20040402 to intercu branch.
@
text
@d2 1
a2 1
   Copyright (C) 2000, 2001, 2004 Red Hat, Inc.
d18 2
a19 1
   <arch>-ibd.h additions use: "-- ibd.h"  */
d131 1
a131 4
        {
          value = value + (value & 0x8000 ? 0x10000 : 0);
          value >>= 16;
        }
@


1.4
log
@Add support for the M32R2 processor.
@
text
@d276 2
a277 1
  status = (*info->read_memory_func) (pc, buf, buflen, info);
a289 1
  buf += (big_p ? 0 : 2);
d292 1
d295 1
a296 1
  buf += (big_p ? 2 : -2);
@


1.3
log
@* merge 2001-11-01.
@
text
@d26 1
d34 4
d41 26
d167 5
a171 1
	value &= 0xffff;
d271 2
d284 2
a285 1
  if ((pc & 3) == 0 && (buf[0] & 0x80) != 0)
d289 1
a293 1
      buf += 2;
d295 1
d297 2
a298 1
  if (buf[0] & 0x80)
d302 1
a302 1
      buf[0] &= 0x7f;
@


1.3.18.1
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@a25 1
#if 0
a32 4
#else
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash(buffer, value)
extern unsigned int m32r_cgen_dis_hash(const char *, CGEN_INSN_INT);
#endif
a35 26
/* -- opc.c */
unsigned int
m32r_cgen_dis_hash (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value;
{
  unsigned int x;
                                                                                
  if (value & 0xffff0000) /* 32bit instructions */
    value = (value >> 16) & 0xffff;
                                                                                
  x = (value>>8) & 0xf0;
  if (x == 0x40 || x == 0xe0 || x == 0x60 || x == 0x50)
    return x;
                                                                                
  if (x == 0x70 || x == 0xf0)
    return x | ((value>>8) & 0x0f);
                                                                                
  if (x == 0x30)
    return x | ((value & 0x70) >> 4);
  else
    return x | ((value & 0xf0) >> 4);
}
                                                                                
/* -- */

d136 1
a136 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
             value |= 0xffff0000;
        }
a235 2
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  char *x;
d247 1
a247 2
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
a250 1
  buf += (big_p ? 0 : 2);
d255 1
a256 1
  buf += (big_p ? 2 : -2);
d258 1
a258 2
  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
d262 1
a262 1
      *x &= 0x7f;
@


1.3.20.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a25 1
#if 0
a32 4
#else
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash(buffer, value)
extern unsigned int m32r_cgen_dis_hash(const char *, CGEN_INSN_INT);
#endif
a35 26
/* -- opc.c */
unsigned int
m32r_cgen_dis_hash (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value;
{
  unsigned int x;
                                                                                
  if (value & 0xffff0000) /* 32bit instructions */
    value = (value >> 16) & 0xffff;
                                                                                
  x = (value>>8) & 0xf0;
  if (x == 0x40 || x == 0xe0 || x == 0x60 || x == 0x50)
    return x;
                                                                                
  if (x == 0x70 || x == 0xf0)
    return x | ((value>>8) & 0x0f);
                                                                                
  if (x == 0x30)
    return x | ((value & 0x70) >> 4);
  else
    return x | ((value & 0xf0) >> 4);
}
                                                                                
/* -- */

d136 1
a136 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
             value |= 0xffff0000;
        }
a235 2
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  char *x;
d247 1
a247 2
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
a250 1
  buf += (big_p ? 0 : 2);
d255 1
a256 1
  buf += (big_p ? 2 : -2);
d258 1
a258 2
  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
d262 1
a262 1
      *x &= 0x7f;
@


1.2
log
@Fix compile time warning messages in generated C files
@
text
@d23 1
a23 1
#undef CGEN_DIS_HASH_SIZE
d25 1
a25 1
#undef CGEN_DIS_HASH
d212 1
a212 1
     CGEN_CPU_DESC cd;
d214 4
a217 4
     long value;
     unsigned int attrs;
     bfd_vma pc;
     int length;
@


1.1
log
@2001-07-05  Ben Elliston  <bje@@redhat.com>

	* README: Update.

	* read.scm (include): Include files from srcdir/cpu.
	(-cgen): Likewise for loading .cpu files.
	* *.cpu: Move all cpu descriptions into cpu subdirectory.
	* *.opc: Likewise.
	* simplify.inc: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 2000 Red Hat, Inc.
d37 8
d50 1
a50 1
     CGEN_CPU_DESC cd;
d52 2
a53 2
     int opindex;
     unsigned long *valuep;
d195 2
d200 7
a206 5
#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length) \
do { \
  if (CGEN_BOOL_ATTR ((attrs), CGEN_OPERAND_HASH_PREFIX)) \
    (*info->fprintf_func) (info->stream, "#"); \
} while (0)
d223 1
a223 1
#undef CGEN_PRINT_INSN
@

