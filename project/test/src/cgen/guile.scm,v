head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	cgen-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	cgen-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	cgen-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	cgen-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	cgen-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	cgen-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	cgen-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	cgen-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	cgen-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	cgen-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	cgen-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	cgen-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	cgen-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	cgen-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	cgen-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	cgen-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	cgen-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	cgen-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	cgen-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	cgen-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	cgen-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	cgen-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	cgen-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	cgen-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	cgen-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	cgen-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	cgen-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	cgen-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	cgen-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	cgen-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	cgen-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	cgen-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	cgen-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	cgen-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	cgen-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	cgen-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	cgen-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	cgen-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	cgen-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	cgen-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	cgen-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	cgen-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	cgen-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	cgen-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	cgen-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	cgen-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	cgen-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	cgen-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	cgen-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	cgen-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	cgen-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	cgen-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	cgen-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	cgen-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	cgen-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	cgen-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	cgen-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	cgen-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	cgen-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	cgen-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	cgen-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	cgen-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	cgen-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	cgen-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	cgen-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	cgen-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	cgen-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	cgen-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	cgen-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	cgen-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	cgen-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	cgen-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	cgen-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	cgen-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	cgen-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	cgen-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	cgen-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	cgen-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	cgen-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	cgen-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	cgen-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	cgen-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	cgen-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	cgen-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	cgen-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	cgen-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	cgen-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	cgen-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	cgen-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	cgen-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	cgen-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	cgen-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	cgen-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	cgen-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	cgen-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	cgen-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	cgen-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	cgen-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	cgen-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	cgen-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	cgen-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	cgen-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	cgen-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	cgen-snapshot-20091001:1.6
	arc-sim-20090309:1.3
	sid-snapshot-20090901:1.6
	cgen-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	cgen-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	cgen-snapshot-20090701:1.6
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	cgen-1_1-branch:1.5.0.2
	cgen-1_1-branchpoint:1.5
	sid-snapshot-20090601:1.3
	cgen-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	cgen-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	cgen-snapshot-20090401:1.3
	arc-insight_6_8-branch:1.3.0.4
	arc-insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	cgen-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	cgen-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	cgen-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	cgen-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	cgen-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	cgen-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	cgen-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	cgen-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	cgen-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	cgen-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	cgen-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	cgen-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	cgen-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	cgen-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	cgen-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	cgen-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	cgen-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	cgen-snapshot-20071001:1.3
	msnyder-fork-checkpoint-branch:1.3.0.2
	msnyder-fork-checkpoint-branchpoint:1.3;
locks; strict;
comment	@# @;


1.6
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.14.17.16.45;	author devans;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2009.06.14.17.09.56;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.15.09.03.59;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.15.09.01.35;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.07.18.51.31;	author jimb;	state Exp;
branches;
next	;

1.5.2.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@; Guile-specific functions.
; Copyright (C) 2000, 2004, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

(define *guile-major-version* (string->number (major-version)))
(define *guile-minor-version* (string->number (minor-version)))

; eval takes a module argument in 1.6 and later

(if (or (> *guile-major-version* 1)
	(>= *guile-minor-version* 6))
    (define (eval1 expr)
      (eval expr (current-module)))
    (define (eval1 expr)
      (eval expr))
)

; symbol-bound? is deprecated in 1.6

(if (or (> *guile-major-version* 1)
	(>= *guile-minor-version* 6))
    (define (symbol-bound? table s)
      (if table
	  (error "must pass #f for symbol-bound? first arg"))
      ; FIXME: Not sure this is 100% correct.
      (module-defined? (current-module) s))
)

(if (symbol-bound? #f 'load-from-path)
    (begin
      (define (load file)
	(begin
	  ;(load-from-path file)
	  (primitive-load-path file)
	  ))
      )
)

; FIXME: to be deleted
(define =? =)
(define >=? >=)

(if (not (symbol-bound? #f '%stat))
    (begin
      (define %stat stat)
      )
)

(if (symbol-bound? #f 'debug-enable)
    (debug-enable 'backtrace)
)

; Guile 1.3 has reverse!, Guile 1.2 has list-reverse!.
; CGEN uses reverse!
(if (and (not (symbol-bound? #f 'reverse!))
	 (symbol-bound? #f 'list-reverse!))
    (define reverse! list-reverse!)
)

(define (debug-write . objs)
  (map (lambda (o)
	 ((if (string? o) display write) o (current-error-port)))
       objs)
  (newline (current-error-port)))

;; Guile 1.8 no longer has "." in %load-path so relative path loads
;; no longer work.

(if (or (> *guile-major-version* 1)
	(>= *guile-minor-version* 8))
    (set! %load-path (append %load-path (list ".")))
)


;;; Enabling and disabling debugging features of the host Scheme.

;;; For the initial load proces, turn everything on.  We'll disable it
;;; before we start doing the heavy computation.
(if (memq 'debug-extensions *features*)
    (begin
      (debug-enable 'backtrace)
      (debug-enable 'debug)
      (debug-enable 'backwards)
      (debug-set! depth 2000)
      (debug-set! maxdepth 2000)
      (debug-set! stack 100000)
      (debug-set! frames 10)))
(read-enable 'positions)

;;; Call THUNK, with debugging enabled if FLAG is true, or disabled if
;;; FLAG is false.
;;;
;;; (On systems other than Guile, this needn't actually do anything at
;;; all, beyond calling THUNK, so long as your backtraces are still
;;; helpful.  In Guile, the debugging evaluator is slower, so we don't
;;; want to use it unless the user asked for it.)
(define (cgen-call-with-debugging flag thunk)
  (if (memq 'debug-extensions *features*)
      ((if flag debug-enable debug-disable) 'debug))

  ;; Now, make that debugging / no-debugging setting actually take
  ;; effect.
  ;;
  ;; Guile has two separate evaluators, one that does the extra
  ;; bookkeeping for backtraces, and one which doesn't, but runs
  ;; faster.  However, the evaluation process (in either evaluator)
  ;; ordinarily never consults the variable that says which evaluator
  ;; to use: whatever evaluator was running just keeps rolling along.
  ;; There are certain primitives, like some of the eval variants,
  ;; that do actually check.  start-stack is one such primitive, but
  ;; we don't want to shadow whatever other stack id is there, so we
  ;; do all the real work in the ID argument, and do nothing in the
  ;; EXP argument.  What a kludge.
  (start-stack (begin (thunk) #t) #f))


;;; Apply PROC to ARGS, marking that application as the bottom of the
;;; stack for error backtraces.
;;;
;;; (On systems other than Guile, this doesn't really need to do
;;; anything other than apply PROC to ARGS, as long as something
;;; ensures that backtraces will work right.)
(define (cgen-debugging-stack-start proc args)

  ;; Naming this procedure, rather than using an anonymous lambda,
  ;; allows us to pass less fragile cut info to save-stack.
  (define (handler . args)
		;;(display args (current-error-port))
		;;(newline (current-error-port))
		;; display-error takes 6 arguments.
		;; If `quit' is called from elsewhere, it may not have 6
		;; arguments.  Not sure how best to handle this.
		(if (= (length args) 5)
		    (begin
		      (apply display-error #f (current-error-port) (cdr args))
		      ;; Grab a copy of the current stack,
		      (save-stack handler 0)
		      (backtrace)))
		(quit 1))

  ;; Apply proc to args, and if any uncaught exception is thrown, call
  ;; handler WITHOUT UNWINDING THE STACK (that's the 'lazy' part).  We
  ;; need the stack left alone so we can produce a backtrace.
  (lazy-catch #t
	      (lambda ()
		;; I have no idea why the 'load-stack' stack mark is
		;; not still present on the stack; we're still loading
		;; cgen-APP.scm, aren't we?  But stack-id returns #f
		;; in handler if we don't do a start-stack here.
		(start-stack proc (apply proc args)))
	      handler))
@


1.5
log
@	* guile.scm: Add "." to %load-path if >= guile version 1.8.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2004 Red Hat, Inc.
@


1.5.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2004, 2009 Red Hat, Inc.
@


1.4
log
@	* attr.scm: Removing trailing whitespace.
	* cgen-intrinsics.scm: Ditto.
	* cgen-sim.scm: Ditto.
	* cos.scm: Ditto.
	* enum.scm: Ditto.
	* guile.scm: Ditto.
	* sim.scm: Ditto.
@
text
@d67 8
@


1.3
log
@* guile.scm (cgen-call-with-debugging): Doc fix.
@
text
@a66 1

d93 1
a93 1
  
d129 1
a129 1
		      ;; Grab a copy of the current stack, 
d138 1
a138 1
	      (lambda () 
@


1.2
log
@Make backtraces work more reliably.
* guile.scm: Set up debugging parameters, and enable debugging and
source positions while loading.
(cgen-call-with-debugging, cgen-debugging-stack-start): New
functions.
* read.scm: Don't set debugging parameters here.
(catch-with-backtrace): Function deleted.
(-cgen): Simply note the presence or absence of the -b option.
Pass the flag to cgen-call-with-debugging, so debugging is turned
off here if the user didn't request it, for faster computation.
(cgen): Call cgen-debugging-stack-start here, instead of
catch-with-backtrace.

* Makefile.am (GUILE): Explicitly load guile.scm here, and leave a
trailing -s.
(desc, html, opcodes, sim-arch, sim-cpu, gas-test, sim-test):
Don't write out the trailing -s here.
* Makefile.in: Regenerated.
* cgen-doc.scm, cgen-gas.scm, cgen-stest.scm): Don't load
fixup.scm here; let the caller decide which Scheme's customization
file to preload.
* dev.scm: Load guile.scm, not fixup.scm.
* fixup.scm: Deleted; contents have all moved to guile.scm.
* README: Doc fix.

* guile.scm (debug-write): New function.
@
text
@d95 2
a96 1
  ;; Now, actually start using the debugging evaluator.
@


1.1
log
@cgen/ChangeLog:
2005-02-07  Jim Blandy  <jimb@@redhat.com>

	* guile.scm: New file, containing Guile-specific definitions and
	adaptations.  This is loaded by the app-specific shell scripts.
	Initially identical to fixup.scm.
	* cgen-sid.scm: Don't load fixup.scm here.

sid/component/cgen-cpu/ChangeLog:
2005-02-02  Jim Blandy  <jimb@@redhat.com>

	* CGEN.sh.in: Request on the command line that cgen/guile.scm be
	loaded before cgen-sid.scm; cgen-sid.scm no longer loads fixup.scm.
@
text
@d60 85
@

