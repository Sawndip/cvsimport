head	1.14;
access;
symbols
	sid-snapshot-20180601:1.14
	cgen-snapshot-20180601:1.14
	sid-snapshot-20180501:1.14
	cgen-snapshot-20180501:1.14
	sid-snapshot-20180401:1.14
	cgen-snapshot-20180401:1.14
	sid-snapshot-20180301:1.14
	cgen-snapshot-20180301:1.14
	sid-snapshot-20180201:1.14
	cgen-snapshot-20180201:1.14
	sid-snapshot-20180101:1.14
	cgen-snapshot-20180101:1.14
	sid-snapshot-20171201:1.14
	cgen-snapshot-20171201:1.14
	sid-snapshot-20171101:1.14
	cgen-snapshot-20171101:1.14
	sid-snapshot-20171001:1.14
	cgen-snapshot-20171001:1.14
	sid-snapshot-20170901:1.14
	cgen-snapshot-20170901:1.14
	sid-snapshot-20170801:1.14
	cgen-snapshot-20170801:1.14
	sid-snapshot-20170701:1.14
	cgen-snapshot-20170701:1.14
	sid-snapshot-20170601:1.14
	cgen-snapshot-20170601:1.14
	sid-snapshot-20170501:1.14
	cgen-snapshot-20170501:1.14
	sid-snapshot-20170401:1.14
	cgen-snapshot-20170401:1.14
	sid-snapshot-20170301:1.14
	cgen-snapshot-20170301:1.14
	sid-snapshot-20170201:1.14
	cgen-snapshot-20170201:1.14
	sid-snapshot-20170101:1.14
	cgen-snapshot-20170101:1.14
	sid-snapshot-20161201:1.14
	cgen-snapshot-20161201:1.14
	sid-snapshot-20161101:1.14
	cgen-snapshot-20161101:1.14
	sid-snapshot-20160901:1.14
	cgen-snapshot-20160901:1.14
	sid-snapshot-20160801:1.14
	cgen-snapshot-20160801:1.14
	sid-snapshot-20160701:1.14
	cgen-snapshot-20160701:1.14
	sid-snapshot-20160601:1.14
	cgen-snapshot-20160601:1.14
	sid-snapshot-20160501:1.14
	cgen-snapshot-20160501:1.14
	sid-snapshot-20160401:1.14
	cgen-snapshot-20160401:1.14
	sid-snapshot-20160301:1.14
	cgen-snapshot-20160301:1.14
	sid-snapshot-20160201:1.14
	cgen-snapshot-20160201:1.14
	sid-snapshot-20160101:1.14
	cgen-snapshot-20160101:1.14
	sid-snapshot-20151201:1.14
	cgen-snapshot-20151201:1.14
	sid-snapshot-20151101:1.14
	cgen-snapshot-20151101:1.14
	sid-snapshot-20151001:1.14
	cgen-snapshot-20151001:1.14
	sid-snapshot-20150901:1.14
	cgen-snapshot-20150901:1.14
	sid-snapshot-20150801:1.14
	cgen-snapshot-20150801:1.14
	sid-snapshot-20150701:1.14
	cgen-snapshot-20150701:1.14
	sid-snapshot-20150601:1.14
	cgen-snapshot-20150601:1.14
	sid-snapshot-20150501:1.14
	cgen-snapshot-20150501:1.14
	sid-snapshot-20150401:1.14
	cgen-snapshot-20150401:1.14
	sid-snapshot-20150301:1.14
	cgen-snapshot-20150301:1.14
	sid-snapshot-20150201:1.14
	cgen-snapshot-20150201:1.14
	sid-snapshot-20150101:1.14
	cgen-snapshot-20150101:1.14
	sid-snapshot-20141201:1.14
	cgen-snapshot-20141201:1.14
	sid-snapshot-20141101:1.14
	cgen-snapshot-20141101:1.14
	sid-snapshot-20141001:1.14
	cgen-snapshot-20141001:1.14
	sid-snapshot-20140901:1.14
	cgen-snapshot-20140901:1.14
	sid-snapshot-20140801:1.14
	cgen-snapshot-20140801:1.14
	sid-snapshot-20140701:1.14
	cgen-snapshot-20140701:1.14
	sid-snapshot-20140601:1.14
	cgen-snapshot-20140601:1.14
	sid-snapshot-20140501:1.14
	cgen-snapshot-20140501:1.14
	sid-snapshot-20140401:1.14
	cgen-snapshot-20140401:1.14
	sid-snapshot-20140301:1.14
	cgen-snapshot-20140301:1.14
	sid-snapshot-20140201:1.14
	cgen-snapshot-20140201:1.14
	sid-snapshot-20140101:1.14
	cgen-snapshot-20140101:1.14
	sid-snapshot-20131201:1.14
	cgen-snapshot-20131201:1.14
	sid-snapshot-20131101:1.14
	cgen-snapshot-20131101:1.14
	sid-snapshot-20131001:1.14
	cgen-snapshot-20131001:1.14
	sid-snapshot-20130901:1.14
	cgen-snapshot-20130901:1.14
	sid-snapshot-20130801:1.14
	cgen-snapshot-20130801:1.14
	sid-snapshot-20130701:1.14
	cgen-snapshot-20130701:1.14
	sid-snapshot-20130601:1.14
	cgen-snapshot-20130601:1.14
	sid-snapshot-20130501:1.14
	cgen-snapshot-20130501:1.14
	sid-snapshot-20130401:1.14
	cgen-snapshot-20130401:1.14
	sid-snapshot-20130301:1.14
	cgen-snapshot-20130301:1.14
	sid-snapshot-20130201:1.14
	cgen-snapshot-20130201:1.14
	sid-snapshot-20130101:1.14
	cgen-snapshot-20130101:1.14
	sid-snapshot-20121201:1.14
	cgen-snapshot-20121201:1.14
	sid-snapshot-20121101:1.14
	cgen-snapshot-20121101:1.14
	sid-snapshot-20121001:1.14
	cgen-snapshot-20121001:1.14
	sid-snapshot-20120901:1.14
	cgen-snapshot-20120901:1.14
	sid-snapshot-20120801:1.14
	cgen-snapshot-20120801:1.14
	sid-snapshot-20120701:1.14
	cgen-snapshot-20120701:1.14
	sid-snapshot-20120601:1.14
	cgen-snapshot-20120601:1.14
	sid-snapshot-20120501:1.14
	cgen-snapshot-20120501:1.14
	sid-snapshot-20120401:1.14
	cgen-snapshot-20120401:1.14
	sid-snapshot-20120301:1.14
	cgen-snapshot-20120301:1.14
	sid-snapshot-20120201:1.14
	cgen-snapshot-20120201:1.14
	sid-snapshot-20120101:1.14
	cgen-snapshot-20120101:1.14
	sid-snapshot-20111201:1.14
	cgen-snapshot-20111201:1.14
	sid-snapshot-20111101:1.14
	cgen-snapshot-20111101:1.14
	sid-snapshot-20111001:1.14
	cgen-snapshot-20111001:1.14
	sid-snapshot-20110901:1.14
	cgen-snapshot-20110901:1.14
	sid-snapshot-20110801:1.14
	cgen-snapshot-20110801:1.14
	sid-snapshot-20110701:1.14
	cgen-snapshot-20110701:1.14
	sid-snapshot-20110601:1.14
	cgen-snapshot-20110601:1.14
	sid-snapshot-20110501:1.14
	cgen-snapshot-20110501:1.14
	sid-snapshot-20110401:1.14
	cgen-snapshot-20110401:1.14
	sid-snapshot-20110301:1.14
	cgen-snapshot-20110301:1.14
	sid-snapshot-20110201:1.14
	cgen-snapshot-20110201:1.14
	sid-snapshot-20110101:1.14
	cgen-snapshot-20110101:1.14
	sid-snapshot-20101201:1.14
	cgen-snapshot-20101201:1.14
	sid-snapshot-20101101:1.14
	cgen-snapshot-20101101:1.14
	sid-snapshot-20101001:1.14
	cgen-snapshot-20101001:1.14
	sid-snapshot-20100901:1.14
	cgen-snapshot-20100901:1.14
	sid-snapshot-20100801:1.14
	cgen-snapshot-20100801:1.14
	sid-snapshot-20100701:1.14
	cgen-snapshot-20100701:1.14
	sid-snapshot-20100601:1.14
	cgen-snapshot-20100601:1.14
	sid-snapshot-20100501:1.14
	cgen-snapshot-20100501:1.14
	sid-snapshot-20100401:1.14
	cgen-snapshot-20100401:1.14
	sid-snapshot-20100301:1.14
	cgen-snapshot-20100301:1.14
	sid-snapshot-20100201:1.14
	cgen-snapshot-20100201:1.14
	sid-snapshot-20100101:1.14
	cgen-snapshot-20100101:1.14
	sid-snapshot-20091201:1.14
	cgen-snapshot-20091201:1.14
	sid-snapshot-20091101:1.14
	cgen-snapshot-20091101:1.14
	sid-snapshot-20091001:1.14
	cgen-snapshot-20091001:1.14
	arc-sim-20090309:1.10
	sid-snapshot-20090901:1.12
	cgen-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	cgen-snapshot-20090801:1.12
	sid-snapshot-20090701:1.12
	cgen-snapshot-20090701:1.12
	dje-cgen-play1-branch:1.12.0.2
	dje-cgen-play1-branchpoint:1.12
	cgen-1_1-branch:1.11.0.2
	cgen-1_1-branchpoint:1.11
	sid-snapshot-20090601:1.10
	cgen-snapshot-20090601:1.10
	sid-snapshot-20090501:1.10
	cgen-snapshot-20090501:1.10
	sid-snapshot-20090401:1.10
	cgen-snapshot-20090401:1.10
	arc-insight_6_8-branch:1.10.0.2
	arc-insight_6_8-branchpoint:1.10
	sid-snapshot-20090301:1.10
	cgen-snapshot-20090301:1.10
	sid-snapshot-20090201:1.10
	cgen-snapshot-20090201:1.10
	sid-snapshot-20090101:1.10
	cgen-snapshot-20090101:1.10
	sid-snapshot-20081201:1.10
	cgen-snapshot-20081201:1.10
	sid-snapshot-20081101:1.10
	cgen-snapshot-20081101:1.10
	sid-snapshot-20081001:1.10
	cgen-snapshot-20081001:1.10
	sid-snapshot-20080901:1.10
	cgen-snapshot-20080901:1.10
	sid-snapshot-20080801:1.10
	cgen-snapshot-20080801:1.10
	sid-snapshot-20080701:1.10
	cgen-snapshot-20080701:1.10
	sid-snapshot-20080601:1.10
	cgen-snapshot-20080601:1.10
	sid-snapshot-20080501:1.10
	cgen-snapshot-20080501:1.10
	sid-snapshot-20080403:1.10
	sid-snapshot-20080401:1.10
	cgen-snapshot-20080401:1.10
	sid-snapshot-20080301:1.10
	cgen-snapshot-20080301:1.10
	sid-snapshot-20080201:1.10
	cgen-snapshot-20080201:1.10
	sid-snapshot-20080101:1.10
	cgen-snapshot-20080101:1.10
	sid-snapshot-20071201:1.10
	cgen-snapshot-20071201:1.10
	sid-snapshot-20071101:1.10
	cgen-snapshot-20071101:1.10
	sid-snapshot-20071001:1.10
	cgen-snapshot-20071001:1.10
	msnyder-fork-checkpoint-branch:1.8.0.2
	msnyder-fork-checkpoint-branchpoint:1.8
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.4
	cagney_regbuf-20020515-branch:1.3.0.2
	cagney_regbuf-20020515-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	cgen-1-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.14
date	2009.09.10.07.23.29;	author devans;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.20.21.34.28;	author devans;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2006.11.07.21.12.08;	author brolley;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.09.18.33.04;	author brolley;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.21.16.42.01;	author brolley;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.10.18.26.02;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.16.18.09.06;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.07.08.23.59;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.07.07.05.05;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.08.22.34.20;	author bje;	state Exp;
branches;
next	;

1.11.2.1
date	2009.06.24.14.57.46;	author devans;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* insn.scm (/parse-insn-format): New arg `verify?', all callers updated.
	(/insn-parse): Don't verify iformat for virtual insns.

	* sid-decode.scm (cgen-decode.cxx): Remove redundant call to
	non-multi-insns.
	* sid-model.scm (/gen-model-insn-fn-decls): Ditto.
	(/gen-model-insn-fns, /gen-model-class-decls): Ditto.
	* sid.scm (pbb-engine-insns): Ditto.
	* sim-decode.scm (cgen-decode.c): Ditto.
@
text
@; Simulator model support, plus misc. things associated with a cpu family.
; Copyright (C) 2000, 2002, 2003, 2006, 2009 Red Hat, Inc.
; This file is part of CGEN.

(define (unit:enum u)
  (gen-c-symbol (string-append "UNIT_"
			       (string-upcase (obj:str-name u))))
)

; Return C code to define cpu implementation properties.

(define (/gen-cpu-imp-properties)
  (string-list
   "\
/* The properties of this cpu's implementation.  */

static const MACH_IMP_PROPERTIES @@cpu@@_imp_properties =
{
  sizeof (@@cpu@@_cpu),
#if WITH_SCACHE
  sizeof (SCACHE)
#else
  0
#endif
};\n\n"
   )
)

; Insn modeling support.

; Generate code to profile hardware elements.
; ??? Not currently used.

(define (/gen-hw-profile-code)
  ; Fetch profilable input and output operands of the semantic code.
  (let ((in-ops (find op-profilable? (sfmt-in-ops (insn-sfmt insn))))
	(out-ops (find op-profilable? (sfmt-out-ops (insn-sfmt insn)))))
    (string-list
     ; For each operand, record its being get/set.
     (string-list-map (lambda (op) (send op 'gen-profile-code insn #f))
		      in-ops)
     (string-list-map (lambda (op) (send op 'gen-profile-code insn #t))
		      out-ops)
     ))
)

; Return decls of hardware element profilers.
; ??? Not currently used.

(define (/gen-hw-profile-decls)
  (string-list
   "/* Hardware profiling handlers.  */\n\n"
   (string-list-map (lambda (hw)
		      (string-append "extern void @@prefix@@_model_mark_get_"
				     (gen-sym hw) " (@@cpu@@_cpu *"
				     (if (hw-scalar? hw)
					 ""
					 ", int") ; FIXME: get index type
				     ");\n"
				     "extern void @@prefix@@_model_mark_set_"
				     (gen-sym hw) " (@@cpu@@_cpu *"
				     (if (hw-scalar? hw)
					 ""
					 ", int") ; FIXME: get index type
				     ");\n"))
		    (find hw-profilable? (current-hw-list)))
   "\n"
   )
)

; Return the name of the class representing the given MODEL.
(define (gen-model-class-name model)
  (string-append "@@prefix@@_" (gen-sym model) "_model")
)

; Return name of profiling handler for MODEL, UNIT.
; Also called by sim.scm.

(define (gen-model-unit-fn-name model unit when)
  (string-append "model_" (gen-sym unit) "_" (symbol->string when))
)

(define (gen-model-unit-fn-decl model unit when)
  (let ((gen-args (lambda (args)
		    (gen-c-args (map (lambda (arg)
				       (string-append
					(mode:c-type (mode:lookup (cadr arg)))
					" /*" (symbol->string (car arg)) "*/"))
				     (find (lambda (arg)
					     ; Indices of scalars not passed.
					     (not (null? (cdr arg))))
					   args)))))
	)
    (string-append
     "  virtual UINT "
     (gen-model-unit-fn-name model unit when)
     " (@@cpu@@_cpu *cpu, const struct @@prefix@@_idesc *idesc,"
     " int unit_num"
     (if (equal? when 'after)
	 ", unsigned long long referenced" "")
     (gen-args (unit:inputs unit))
     (gen-args (unit:outputs unit))
     ")\n"))
)

; Return decls of all insn model handlers.

(define (gen-model-fn-decls model)
  (string-list
   "\n"
   "// Function unit handlers\n"
   "// To be overridden as needed.\n"
   (string-list-map (lambda (unit)
		      (string-append
		       (gen-model-unit-fn-decl model unit 'before)
		       "    {\n"
		       "      return 0;\n"
		       "    }\n"
		       (gen-model-unit-fn-decl model unit 'after)
		       "    {\n"
		       "      return timing[idesc->sem_index].units[unit_num].done;\n"
		       "    }\n"))
		    (model:units model))
  )
)

; Return name of profile handler for INSN, MODEL.

(define (/gen-model-insn-fn-name model insn when)
  (string-append "model_" (gen-sym insn) "_" (symbol->string when))
)

(define (/gen-model-insn-qualified-fn-name model insn when)
  (string-append (gen-model-class-name model) "::" (/gen-model-insn-fn-name model insn when))
)

; Return declaration of function to model INSN.

(define (/gen-model-insn-fn-decl model insn when)
  (string-list
   "UINT "
   (/gen-model-insn-fn-name model insn when)
   " (@@cpu@@_cpu *current_cpu, @@prefix@@_scache *sem);\n"
  )
)

(define (/gen-model-insn-fn-decls model)
  (string-list
   "  // These methods call the appropriate unit modeller(s) for each insn.\n"
   (string-list-map
    (lambda (insn)
      (string-list
       "  " (/gen-model-insn-fn-decl model insn 'before)
       "  " (/gen-model-insn-fn-decl model insn 'after)))
    (real-insns (current-insn-list)))
  )
)

; Return function to model INSN.

(define (/gen-model-insn-fn model insn when)
  (logit 2 "Processing modeling for " (obj:name insn) ": \"" (insn-syntax insn) "\" ...\n")
  (let ((sfmt (insn-sfmt insn)))
    (string-list
     "UINT\n"
     (/gen-model-insn-qualified-fn-name model insn when)
     " (@@cpu@@_cpu *current_cpu, @@prefix@@_scache *sem)\n"
     "{\n"
     (if (with-scache?)
	 (gen-define-field-macro sfmt)
	 "")
     "  const @@prefix@@_scache* abuf = sem;\n"
     "  const @@prefix@@_idesc* idesc = abuf->idesc;\n"
     ; or: idesc = & CPU_IDESC (current_cpu) ["
     ; (gen-cpu-insn-enum (mach-cpu (model:mach model)) insn)
     ; "];\n"
     "  int cycles = 0;\n"
     (send insn 'gen-profile-locals model)
     (if (with-scache?)
	 ""
	 (string-list
	  "  PCADDR UNUSED pc = current_cpu->hardware.h_pc;\n"
	  "  @@prefix@@_insn_word insn = abuf->insn;\n"
	  (gen-define-ifields (sfmt-iflds sfmt) (sfmt-length sfmt) "  " #f)
	  (gen-sfmt-argvars-defns sfmt)
	  (gen-extract-ifields (sfmt-iflds sfmt) (sfmt-length sfmt) "  " #f)
	  (gen-sfmt-argvars-assigns sfmt)))
     ; Emit code to model the insn.  Function units are handled here.
     (send insn 'gen-profile-code model when "cycles")
     "  return cycles;\n"
     (if (with-scache?)
	 (gen-undef-field-macro sfmt)
	 "")
     "}\n\n"))
)


; Return insn modeling handlers.
; ??? Might wish to reduce the amount of output by combining identical cases.
; ??? Modelling of insns could be table driven, but that puts constraints on
; generality.

(define (/gen-model-insn-fns)
  (string-write
   "/* Model handlers for each insn.  */\n\n"
   (lambda () (string-write-map
	       (lambda (model)
		 (string-write
		  ; Generate the model constructor.
		  (gen-model-class-name model) "::" (gen-model-class-name model) " (@@cpu@@_cpu *cpu)\n"
		  "  : cgen_model (cpu)\n"
		  "{\n"
		  "}\n"
		  "\n")
		 (string-write-map
		  (lambda (insn)
		    (string-list
		     (/gen-model-insn-fn model insn 'before)
		     (/gen-model-insn-fn model insn 'after)))
		  (real-insns (current-insn-list))))
	       (current-model-list)))
   )
)

(define (/gen-model-class-decls model)
  (string-append
   "\n"
   "  "
   (gen-enum-decl 'unit_number "unit types"
		  "UNIT_"
		  (cons '(none)
			(append
			 ; "apply append" squeezes out nils.
			 (apply append
				(list 
				 ; create <model_name>-<unit-name> for each unit
				 (let ((units (model:units model)))
				   (if (null? units)
				       nil
				       (map (lambda (unit)
					      (cons (obj:name unit)
						    (cons '- (atlist-attrs (obj-atlist model)))))
					    units)))))
			 '((max)))))
   "  struct unit {\n"
   "    unit_number unit;\n"
   "    UINT issue;\n"
   "    UINT done;\n"
   "  };\n\n"

   ; FIXME: revisit MAX_UNITS
  "  static const int MAX_UNITS = "
  (number->string
   (let ((insn-list (real-insns (current-insn-list))))
     (if (null? insn-list)
	 1
	 (apply max
		(map (lambda (lengths) (apply max lengths))
		     (map (lambda (insn)
			    (let ((timing (insn-timing insn)))
			      (if (null? timing)
				  '(1)
				  (map (lambda (insn-timing)
					 (if (null? (cdr insn-timing))
					     '1
					     (length (timing:units (cdr insn-timing)))))
				       timing))))
			  insn-list))))))
   ";\n"
  )
)

; Return the C++ class representing the given model.
(define (gen-model-class model)
  (string-list
   "\
class " (gen-model-class-name model) " : public cgen_model
{
public:
  " (gen-model-class-name model) " (@@cpu@@_cpu *cpu);

  // Call the proper unit modelling function for the given insn.
  UINT model_before (@@cpu@@_cpu *current_cpu, @@prefix@@_scache* sem)
    {
      return (this->*(timing[sem->idesc->sem_index].model_before)) (current_cpu, sem);
    } 
  UINT model_after (@@cpu@@_cpu *current_cpu, @@prefix@@_scache* sem)
    {
      return (this->*(timing[sem->idesc->sem_index].model_after)) (current_cpu, sem);
    } 
"
   (gen-model-fn-decls model)
   "\

protected:
"
   (/gen-model-insn-fn-decls model)
   (/gen-model-class-decls model)
"\

  typedef UINT (" (gen-model-class-name model) "::*model_function) (@@cpu@@_cpu* current_cpu, @@prefix@@_scache* sem);

  struct insn_timing {
    // This is an integer that identifies this insn.
    UINT num;
    // Functions to handle insn-specific profiling.
    model_function model_before;
    model_function model_after;
    // Array of function units used by this insn.
    unit units[MAX_UNITS];
  };

  static const insn_timing timing[];
};
"
  )
)

; Return the C++ classes representing the current list of models.
(define (gen-model-classes)
   (string-list-map
    (lambda (model)
      (string-list
       "\n"
       (gen-model-class model)))
    (current-model-list))
)

; Generate timing table entry for function unit U while executing INSN.
; U is a <unit> object.
; ARGS is a list of overriding arguments from INSN.

(define (/gen-insn-unit-timing model insn u args)
  (string-append
   "{ "
   (gen-model-class-name model) "::" (unit:enum u) ", "
   (number->string (unit:issue u)) ", "
   (let ((cycles (assq-ref args 'cycles)))
     (if cycles
	 (number->string (car cycles))
	 (number->string (unit:done u))))
   " }, "
   )
)

; Generate timing table entry for MODEL for INSN.

(define (/gen-insn-timing model insn)
  ; Instruction timing is stored as an associative list based on the model.
  (let ((timing (assq (obj:name model) (insn-timing insn))))
    ;(display timing) (newline)
    (string-list
     "  { "
     (gen-cpu-insn-enum (mach-cpu (model:mach model)) insn)
     ", "
     (if (obj-has-attr? insn 'VIRTUAL)
	 "0, 0"
	 (string-append
	  "& " (/gen-model-insn-qualified-fn-name model insn 'before) ", "
	  "& " (/gen-model-insn-qualified-fn-name model insn 'after)))
     ", { "
     (string-drop
      -2
      (if (not timing)
	  (/gen-insn-unit-timing model insn (model-default-unit model) nil)
	  (let ((units (timing:units (cdr timing))))
	    (string-map (lambda (iunit)
			  (/gen-insn-unit-timing model insn
						 (iunit:unit iunit)
						 (iunit:args iunit)))
			units))))
     " } },\n"
     ))
)

; Generate model timing table for MODEL.

(define (/gen-model-timing-table model)
  (string-write
   "/* Model timing data for `" (obj:name model) "'.  */\n\n"
   "const " (gen-model-class-name model) "::insn_timing " (gen-model-class-name model) "::timing[] = {\n"
   (lambda () (string-write-map (lambda (insn) (/gen-insn-timing model insn))
				(non-multi-insns (non-alias-insns (current-insn-list)))))
   "};\n\n"
   )
)

; Return C code to define model profiling support stuff.

(define (/gen-model-profile-data)
  (string-write
   "/* We assume UNIT_NONE == 0 because the tables don't always terminate\n"
   "   entries with it.  */\n\n"
   (lambda () (string-write-map /gen-model-timing-table (current-model-list)))
   )
)

; Return C code to define the model table for MACH.

(define (/gen-mach-model-table mach)
  (string-list
   "\
static const MODEL " (gen-sym mach) "_models[] =\n{\n"
   (string-list-map (lambda (model)
		      (string-list "  { "
				   "\"" (obj:name model) "\", "
				   "& " (gen-sym (model:mach model)) "_mach, "
				   (model:enum model) ", "
				   "TIMING_DATA (& "
				   (gen-sym model)
				   "_timing[0]), "
				   (gen-sym model) "_model_init"
				   " },\n"))
		    (find (lambda (model) (eq? (obj:name mach)
					       (obj:name (model:mach model))))
			  (current-model-list)))
   "  { 0 }\n"
   "};\n\n"
   )
)

; Return C code to define model init fn.

(define (/gen-model-init-fn model)
  (string-list "\
static void\n"
(gen-sym model) "_model_init (@@cpu@@_cpu *cpu)
{
  cpu->model_data = new @@PREFIX@@_MODEL_DATA;
}\n\n"
   )
)

; Return C code to define model data and support fns.

(define (/gen-model-defns)
  (string-write
   (lambda () (string-write-map /gen-model-init-fn (current-model-list)))
   "#if WITH_PROFILE_MODEL_P
#define TIMING_DATA(td) td
#else
#define TIMING_DATA(td) 0
#endif\n\n"
   (lambda () (string-write-map /gen-mach-model-table (current-mach-list)))
   )
)

; Return C definitions for this cpu family variant.

(define (/gen-cpu-defns)
  "" 
)

; Return C code to define the machine data.

(define (/gen-mach-defns)
  (string-list-map
   (lambda (mach)
     (gen-obj-sanitize
      mach
      (string-list "\
static void\n"
(gen-sym mach) "_init_cpu (@@cpu@@_cpu *cpu)
{
  @@prefix@@_init_idesc_table (cpu);
}

const MACH " (gen-sym mach) "_mach =
{
  \"" (obj:name mach) "\", "
  "\"" (mach-bfd-name mach) "\",
  " (number->string (cpu-word-bitsize (mach-cpu mach))) ", "
  ; FIXME: addr-bitsize: delete
  (number->string (cpu-word-bitsize (mach-cpu mach))) ", "
  "& " (gen-sym mach) "_models[0], "
  "& " (gen-sym (mach-cpu mach)) "_imp_properties,
  " (gen-sym mach) "_init_cpu
};

")))

   (current-mach-list))
)

; Top level file generators.

; Generate model.cxx

(define (cgen-model.cxx)
  (logit 1 "Generating " (gen-cpu-name) "-model.cxx ...\n")
  (assert-keep-one)

  ; Turn parallel execution support on if cpu needs it.
  (set-with-parallel?! (state-parallel-exec?))

  (string-write
   (gen-c-copyright "Simulator model support for @@prefix@@."
		  copyright-red-hat package-red-hat-simulators)
   "\

#if HAVE_CONFIG_H
#include \"config.h\"
#endif
#include \"@@cpu@@.h\"

using namespace @@cpu@@; // FIXME: namespace organization still wip

/* The profiling data is recorded here, but is accessed via the profiling
   mechanism.  After all, this is information for profiling.  */

"
   /gen-model-insn-fns
   /gen-model-profile-data
;  not adapted for sid yet
;   /gen-model-defns
;   /gen-cpu-imp-properties
;   /gen-cpu-defns
;   /gen-mach-defns
   )
)

(define (cgen-model.h)
  (logit 1 "Generating " (gen-cpu-name) "-model.h ...\n")
  (assert-keep-one)

  (string-write
   (gen-c-copyright "Simulator model support for @@prefix@@."
		  copyright-red-hat package-red-hat-simulators)
   "\
#ifndef @@PREFIX@@_MODEL_H
#define @@PREFIX@@_MODEL_H

#include \"cgen-cpu.h\"
#include \"cgen-model.h\"

namespace @@cpu@@
{
using namespace cgen;
"
   (gen-model-classes)
   "\

} // namespace @@cpu@@

#endif // @@PREFIX@@_MODEL_H
"
  )
)
@


1.13
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d155 1
a155 1
    (non-multi-insns (real-insns (current-insn-list))))
d220 1
a220 1
		  (non-multi-insns (real-insns (current-insn-list)))))
d254 1
a254 1
   (let ((insn-list (non-multi-insns (real-insns (current-insn-list)))))
@


1.12
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d12 1
a12 1
(define (-gen-cpu-imp-properties)
d34 1
a34 1
(define (-gen-hw-profile-code)
d50 1
a50 1
(define (-gen-hw-profile-decls)
d129 1
a129 1
(define (-gen-model-insn-fn-name model insn when)
d133 2
a134 2
(define (-gen-model-insn-qualified-fn-name model insn when)
  (string-append (gen-model-class-name model) "::" (-gen-model-insn-fn-name model insn when))
d139 1
a139 1
(define (-gen-model-insn-fn-decl model insn when)
d142 1
a142 1
   (-gen-model-insn-fn-name model insn when)
d147 1
a147 1
(define (-gen-model-insn-fn-decls model)
d153 2
a154 2
       "  " (-gen-model-insn-fn-decl model insn 'before)
       "  " (-gen-model-insn-fn-decl model insn 'after)))
d161 1
a161 1
(define (-gen-model-insn-fn model insn when)
d166 1
a166 1
     (-gen-model-insn-qualified-fn-name model insn when)
d203 1
a203 1
(define (-gen-model-insn-fns)
d218 2
a219 2
		     (-gen-model-insn-fn model insn 'before)
		     (-gen-model-insn-fn model insn 'after)))
d225 1
a225 1
(define (-gen-model-class-decls model)
d297 2
a298 2
   (-gen-model-insn-fn-decls model)
   (-gen-model-class-decls model)
d333 1
a333 1
(define (-gen-insn-unit-timing model insn u args)
d348 1
a348 1
(define (-gen-insn-timing model insn)
d359 2
a360 2
	  "& " (-gen-model-insn-qualified-fn-name model insn 'before) ", "
	  "& " (-gen-model-insn-qualified-fn-name model insn 'after)))
d365 1
a365 1
	  (-gen-insn-unit-timing model insn (model-default-unit model) nil)
d368 1
a368 1
			  (-gen-insn-unit-timing model insn
d378 1
a378 1
(define (-gen-model-timing-table model)
d382 1
a382 1
   (lambda () (string-write-map (lambda (insn) (-gen-insn-timing model insn))
d390 1
a390 1
(define (-gen-model-profile-data)
d394 1
a394 1
   (lambda () (string-write-map -gen-model-timing-table (current-model-list)))
d400 1
a400 1
(define (-gen-mach-model-table mach)
d424 1
a424 1
(define (-gen-model-init-fn model)
d436 1
a436 1
(define (-gen-model-defns)
d438 1
a438 1
   (lambda () (string-write-map -gen-model-init-fn (current-model-list)))
d444 1
a444 1
   (lambda () (string-write-map -gen-mach-model-table (current-mach-list)))
d450 1
a450 1
(define (-gen-cpu-defns)
d456 1
a456 1
(define (-gen-mach-defns)
d512 2
a513 2
   -gen-model-insn-fns
   -gen-model-profile-data
d515 4
a518 4
;   -gen-model-defns
;   -gen-cpu-imp-properties
;   -gen-cpu-defns
;   -gen-mach-defns
@


1.11
log
@	* desc-cpu.scm (cgen-desc.h): Tweak logit message for consistency.
	(cgen-desc.c): Ditto.
	* sid-cpu.scm (cgen-desc.h, cgen-cpu.h, cgen-defs.h): Ditto.
	(cgen-write.cxx, cgen-semantics.cxx, cgen-sem-switch.cxx): Ditto.
	* sid-decode.scm (cgen-decode.h, cgen-decode.cxx): Ditto.
	* sid-model.scm (cgen-model.cxx, cgen-model.h): Ditto.
	* sim-arch.scm (cgen-arch.h, cgen-arch.c): Ditto.
	(cgen-cpuall.h, cgen-ops.c): Ditto.
	* sim-cpu.scm (cgen-cpu.h, cgen-defs.h, cgen-cpu.c): Ditto.
	(cgen-read.c, cgen-write.c, cgen-semantics.c): Ditto.
	(cgen-sem-switch.c): Ditto.
	* sim-decode.scm (cgen-decode.h, cgen-decode.c): Ditto.
	* sim-model.c (cgen-model.c): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002, 2003, 2006 Red Hat, Inc.
@


1.11.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002, 2003, 2006, 2009 Red Hat, Inc.
@


1.10
log
@2006-11-07  Dave Brolley  <brolley@@redhat.com>

        * sid-model.scm (gen-model-unit-fn-decl): Use symbol->string where
        necessary.
@
text
@d490 1
a490 1
  (logit 1 "Generating " (gen-cpu-name) " model.cxx ...\n")
d523 1
a523 1
  (logit 1 "Generating " (gen-cpu-name) " model.h ...\n")
@


1.9
log
@2006-05-09  Dave Brolley  <brolley@@redhat.com>

        * sid-model.scm (-gen-model-class-decls): Handle the case where insn-timing
        is null.
        * sim.scm (-gen-arch-model-decls): Likewise.
@
text
@d88 1
a88 1
					" /*" (car arg) "*/"))
@


1.8
log
@2003-10-21  Dave Brolley  <brolley@@redhat.com>

        * sid-model.scm (-gen-model-class-decls): Generate MAX_UNITS as
        a static const int.
        * decode.scm (-opcode-slots): Correct typo in logit call.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002, 2003 Red Hat, Inc.
d264 3
a266 1
					 (length (timing:units (cdr insn-timing))))
@


1.7
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d252 1
a252 1
  "  #define MAX_UNITS ("
d267 1
a267 1
   ")\n"
@


1.6
log
@2003-06-10  Dave Brolley  <brolley@@redhat.com>

        * sid-cpu.scm: Generate #include of config.h into @@prefix@@-sem.cxx.
        * sid-decode.scm: Generate #include of config.h into
        @@prefix@@-decode.cxx.
        * sid-model.scm: Generate #include of config.h into @@prefix@@-model.cxx.
@
text
@d7 1
a7 1
			       (string-upcase (obj:name u))))
@


1.5
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d499 3
@


1.4
log
@2003-04-16  Dave Brolley  <brolley@@redhat.com>

        * doc/rtl.texi (Iiming): Correct example to use 'model-name'.
        * utils.scm (copyright-fsf): Update generate copyright years.
        (copyright-cygnus): Ditto.
        * sid.scm (-op-gen-set-trace): Generate code to fill in bitmask of modified
        operands.
        (-gen-arch-model-decls): Don't generate unit enum declaration or MAX_UNITS
        here.
        (<operand>'gen-profile-code): New parameter 'when'.
        (<iunit>'gen-profile-code): Ditto.
        (<insn>'gen-profile-code): Ditto.
        (<unit>'gen-profile-code): Ditto. Only generate 'referenced' and
        'insn_reference' for the 'after' function.
        * model.scm (unit:enum): Moved to sim-model.scm.
        * sim-model.scm (unit:enum): Moved from model.scm.
        * sid-decode.scm (-gen-scache-decls): Generate the 'written' field.
        * cgen-sid.scm (sim-arguments): Document the generation of model.h.
        * sid-model.scm (unit:enum): New version for sid.
        (gen-model-class-name): New function.
        (gen-model-unit-fn-decl): New function.
        (gen-model-fn-decls): Call gen-model-unit-fn-decl.
        (gen-model-unit-fn-name): New parameter 'when'.
        (-gen-model-insn-fn-name): Ditto.
        (-gen-model-insn-qualified-fn-name): New function.
        (-gen-model-insn-fn-decl): New function.
        (-gen-model-insn-fn-decls): New function.
        (-gen-model-insn-fn): New parameter 'when'. Call
        -gen-model-insn-qualified-fn-name.
        (-gen-model-insn-fns): Generate the constructor for the model. Generate
        functions for modelling insn before and after execution.
        (-gen-model-class-decls): New function.
        (" (gen-model-class-name model) "): New function.
        (gen-model-classes): New function.
        (-gen-insn-timing): Generate functions for modelling insn before and after
        execution.
        (-gen-insn-unit-timing): Generate class-qualified names.
        (-gen-model-timing-table): Ditto.
        (cgen-model.cxx): Generate #include for @@cpu@@.h. Omit generation of code
        not needed (yet) by sid.
        (cgen-model.h): New function.
@
text
@d495 1
a495 1
   (gen-copyright "Simulator model support for @@prefix@@."
d522 1
a522 1
   (gen-copyright "Simulator model support for @@prefix@@."
@


1.3
log
@2002-01-07  Ben Elliston  <bje@@redhat.com>

	* utils.scm (package-cygnus-simulators): Rename from this ..
	(package-red-hat-simulators): .. to this.
	* opcodes.scm (option-set!): Use package-red-hat-simulators.
	* sid-cpu.scm (cgen-desc.h): Likewise.
	(cgen-cpu.h): Likewise.
	(cgen-defs.h): Likewise.
	(cgen-write.cxx): Likewise.
	(cgen-semantics.cxx): Likewise.
	(cgen-sem-switch.cxx): Likewise.
	* sid-decode.scm (cgen-decode.h): Likewise.
	(cgen-decode.cxx): Likewise.
	* sid-model.scm (cgen-model.cxx): Likewise.
	* sid.scm (option-set!): Likewise.
	* sim.scm (option-set!): Likewise.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2002 Red Hat, Inc.
d5 5
d71 5
d79 2
a80 2
(define (gen-model-unit-fn-name model unit)
  (string-append "@@prefix@@_model_" (gen-sym model) "_" (gen-sym unit))
d83 1
a83 4
; Return decls of all insn model handlers.
; This is called from sim-decode.scm.

(define (gen-model-fn-decls)
d94 11
d106 19
a124 22
    (string-list
     ; -gen-hw-profile-decls
     "/* Function unit handlers (user written).  */\n\n"
     (string-list-map
      (lambda (model)
	(string-list-map (lambda (unit)
			   (string-append
			    "extern int "
			    (gen-model-unit-fn-name model unit)
			    " (@@cpu@@_cpu *, const struct @@prefix@@_idesc *,"
			    " int /*unit_num*/, int /*referenced*/"
			    (gen-args (unit:inputs unit))
			    (gen-args (unit:outputs unit))
			    ");\n"))
			 (model:units model)))
      (current-model-list))
     "\n"
     "/* Profiling before/after handlers (user written) */\n\n"
     "extern void @@prefix@@_model_insn_before (@@cpu@@_cpu *, int /*first_p*/);\n"
     "extern void @@prefix@@_model_insn_after (@@cpu@@_cpu *, int /*last_p*/, int /*cycles*/);\n"
     "\n"
     ))
d129 28
a156 2
(define (-gen-model-insn-fn-name model insn)
  (string-append "model_" (gen-sym model) "_" (gen-sym insn))
d161 1
a161 1
(define (-gen-model-insn-fn model insn)
d165 3
a167 3
     "static int\n"
     (-gen-model-insn-fn-name model insn)
     " (@@cpu@@_cpu *current_cpu, @@prefix@@_scache *sem_arg)\n"
d172 2
a173 2
     "  const @@prefix@@_argbuf * UNUSED abuf = sem_arg->argbuf;\n"
     "  const @@prefix@@_idesc * UNUSED idesc = abuf->idesc;\n"
d189 1
a189 1
     (send insn 'gen-profile-code model "cycles")
d197 1
d208 7
d216 4
a219 1
		  (lambda (insn) (-gen-model-insn-fn model insn))
d224 102
d334 1
a334 1
   "(int) " (unit:enum u) ", "
d355 4
a358 2
	 "0"
	 (-gen-model-insn-fn-name model insn))
d379 1
a379 1
   "static const @@PREFIX@@_INSN_TIMING " (gen-sym model) "_timing[] = {\n"
d499 1
a499 1
#include \"@@arch@@-main.h\"
a505 2
#if WITH_PROFILE_MODEL_P

d509 7
a515 1
"#endif /* WITH_PROFILE_MODEL_P */\n\n"
d517 26
a542 5
   -gen-model-defns
   -gen-cpu-imp-properties
   -gen-cpu-defns
   -gen-mach-defns
   )
@


1.2
log
@2002-01-07  Ben Elliston  <bje@@redhat.com>

	* utils.scm (copyright-fsf): Add 2002.
	(copyright-cygnus): Rename to copyright-red-hat.
	(copyright-red-hat): Add 2002.
	(CURRENT-COPYRIGHT): Update comment.
	* opcodes.scm (option-set!): Update callers.
	* sid-model.scm (cgen-model.cxx): Likewise.
	* sid-cpu.scm: Likewise.
	* sid-decode.scm: Likewise.
	* sid.scm (option-set!): Handle "redhat" as an option for
	"copyright"; use copyright-red-hat.
	* sim.scm (option-set!): Likewise.
@
text
@d340 1
a340 1
		  copyright-red-hat package-cygnus-simulators)
@


1.1
log
@2000-12-08  Ben Elliston  <bje@@redhat.com>

	* dev.scm (load-sid): New function.
	* cgen-sid.scm: New file.
	* sid-cpu.scm: Likeiwse.
	* sid-decode.scm: Likewise.
	* sid-model.scm: Likewise.
	* sid.scm: Likewise.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d340 1
a340 1
		  copyright-cygnus package-cygnus-simulators)
@

