head	1.15;
access;
symbols
	sid-snapshot-20180601:1.15
	cgen-snapshot-20180601:1.15
	sid-snapshot-20180501:1.15
	cgen-snapshot-20180501:1.15
	sid-snapshot-20180401:1.15
	cgen-snapshot-20180401:1.15
	sid-snapshot-20180301:1.15
	cgen-snapshot-20180301:1.15
	sid-snapshot-20180201:1.15
	cgen-snapshot-20180201:1.15
	sid-snapshot-20180101:1.15
	cgen-snapshot-20180101:1.15
	sid-snapshot-20171201:1.15
	cgen-snapshot-20171201:1.15
	sid-snapshot-20171101:1.15
	cgen-snapshot-20171101:1.15
	sid-snapshot-20171001:1.15
	cgen-snapshot-20171001:1.15
	sid-snapshot-20170901:1.15
	cgen-snapshot-20170901:1.15
	sid-snapshot-20170801:1.15
	cgen-snapshot-20170801:1.15
	sid-snapshot-20170701:1.15
	cgen-snapshot-20170701:1.15
	sid-snapshot-20170601:1.15
	cgen-snapshot-20170601:1.15
	sid-snapshot-20170501:1.15
	cgen-snapshot-20170501:1.15
	sid-snapshot-20170401:1.15
	cgen-snapshot-20170401:1.15
	sid-snapshot-20170301:1.15
	cgen-snapshot-20170301:1.15
	sid-snapshot-20170201:1.15
	cgen-snapshot-20170201:1.15
	sid-snapshot-20170101:1.15
	cgen-snapshot-20170101:1.15
	sid-snapshot-20161201:1.15
	cgen-snapshot-20161201:1.15
	sid-snapshot-20161101:1.15
	cgen-snapshot-20161101:1.15
	sid-snapshot-20160901:1.15
	cgen-snapshot-20160901:1.15
	sid-snapshot-20160801:1.15
	cgen-snapshot-20160801:1.15
	sid-snapshot-20160701:1.15
	cgen-snapshot-20160701:1.15
	sid-snapshot-20160601:1.15
	cgen-snapshot-20160601:1.15
	sid-snapshot-20160501:1.15
	cgen-snapshot-20160501:1.15
	sid-snapshot-20160401:1.15
	cgen-snapshot-20160401:1.15
	sid-snapshot-20160301:1.15
	cgen-snapshot-20160301:1.15
	sid-snapshot-20160201:1.15
	cgen-snapshot-20160201:1.15
	sid-snapshot-20160101:1.15
	cgen-snapshot-20160101:1.15
	sid-snapshot-20151201:1.15
	cgen-snapshot-20151201:1.15
	sid-snapshot-20151101:1.15
	cgen-snapshot-20151101:1.15
	sid-snapshot-20151001:1.15
	cgen-snapshot-20151001:1.15
	sid-snapshot-20150901:1.15
	cgen-snapshot-20150901:1.15
	sid-snapshot-20150801:1.15
	cgen-snapshot-20150801:1.15
	sid-snapshot-20150701:1.15
	cgen-snapshot-20150701:1.15
	sid-snapshot-20150601:1.15
	cgen-snapshot-20150601:1.15
	sid-snapshot-20150501:1.15
	cgen-snapshot-20150501:1.15
	sid-snapshot-20150401:1.15
	cgen-snapshot-20150401:1.15
	sid-snapshot-20150301:1.15
	cgen-snapshot-20150301:1.15
	sid-snapshot-20150201:1.15
	cgen-snapshot-20150201:1.15
	sid-snapshot-20150101:1.15
	cgen-snapshot-20150101:1.15
	sid-snapshot-20141201:1.15
	cgen-snapshot-20141201:1.15
	sid-snapshot-20141101:1.15
	cgen-snapshot-20141101:1.15
	sid-snapshot-20141001:1.15
	cgen-snapshot-20141001:1.15
	sid-snapshot-20140901:1.15
	cgen-snapshot-20140901:1.15
	sid-snapshot-20140801:1.15
	cgen-snapshot-20140801:1.15
	sid-snapshot-20140701:1.15
	cgen-snapshot-20140701:1.15
	sid-snapshot-20140601:1.15
	cgen-snapshot-20140601:1.15
	sid-snapshot-20140501:1.15
	cgen-snapshot-20140501:1.15
	sid-snapshot-20140401:1.15
	cgen-snapshot-20140401:1.15
	sid-snapshot-20140301:1.15
	cgen-snapshot-20140301:1.15
	sid-snapshot-20140201:1.15
	cgen-snapshot-20140201:1.15
	sid-snapshot-20140101:1.15
	cgen-snapshot-20140101:1.15
	sid-snapshot-20131201:1.15
	cgen-snapshot-20131201:1.15
	sid-snapshot-20131101:1.15
	cgen-snapshot-20131101:1.15
	sid-snapshot-20131001:1.15
	cgen-snapshot-20131001:1.15
	sid-snapshot-20130901:1.15
	cgen-snapshot-20130901:1.15
	sid-snapshot-20130801:1.15
	cgen-snapshot-20130801:1.15
	sid-snapshot-20130701:1.15
	cgen-snapshot-20130701:1.15
	sid-snapshot-20130601:1.15
	cgen-snapshot-20130601:1.15
	sid-snapshot-20130501:1.15
	cgen-snapshot-20130501:1.15
	sid-snapshot-20130401:1.15
	cgen-snapshot-20130401:1.15
	sid-snapshot-20130301:1.15
	cgen-snapshot-20130301:1.15
	sid-snapshot-20130201:1.15
	cgen-snapshot-20130201:1.15
	sid-snapshot-20130101:1.15
	cgen-snapshot-20130101:1.15
	sid-snapshot-20121201:1.15
	cgen-snapshot-20121201:1.15
	sid-snapshot-20121101:1.15
	cgen-snapshot-20121101:1.15
	sid-snapshot-20121001:1.15
	cgen-snapshot-20121001:1.15
	sid-snapshot-20120901:1.15
	cgen-snapshot-20120901:1.15
	sid-snapshot-20120801:1.15
	cgen-snapshot-20120801:1.15
	sid-snapshot-20120701:1.15
	cgen-snapshot-20120701:1.15
	sid-snapshot-20120601:1.15
	cgen-snapshot-20120601:1.15
	sid-snapshot-20120501:1.15
	cgen-snapshot-20120501:1.15
	sid-snapshot-20120401:1.15
	cgen-snapshot-20120401:1.15
	sid-snapshot-20120301:1.15
	cgen-snapshot-20120301:1.15
	sid-snapshot-20120201:1.15
	cgen-snapshot-20120201:1.15
	sid-snapshot-20120101:1.15
	cgen-snapshot-20120101:1.15
	sid-snapshot-20111201:1.15
	cgen-snapshot-20111201:1.15
	sid-snapshot-20111101:1.15
	cgen-snapshot-20111101:1.15
	sid-snapshot-20111001:1.15
	cgen-snapshot-20111001:1.15
	sid-snapshot-20110901:1.15
	cgen-snapshot-20110901:1.15
	sid-snapshot-20110801:1.15
	cgen-snapshot-20110801:1.15
	sid-snapshot-20110701:1.15
	cgen-snapshot-20110701:1.15
	sid-snapshot-20110601:1.15
	cgen-snapshot-20110601:1.15
	sid-snapshot-20110501:1.15
	cgen-snapshot-20110501:1.15
	sid-snapshot-20110401:1.15
	cgen-snapshot-20110401:1.15
	sid-snapshot-20110301:1.15
	cgen-snapshot-20110301:1.15
	sid-snapshot-20110201:1.15
	cgen-snapshot-20110201:1.15
	sid-snapshot-20110101:1.15
	cgen-snapshot-20110101:1.15
	sid-snapshot-20101201:1.15
	cgen-snapshot-20101201:1.15
	sid-snapshot-20101101:1.15
	cgen-snapshot-20101101:1.15
	sid-snapshot-20101001:1.15
	cgen-snapshot-20101001:1.15
	sid-snapshot-20100901:1.15
	cgen-snapshot-20100901:1.15
	sid-snapshot-20100801:1.15
	cgen-snapshot-20100801:1.15
	sid-snapshot-20100701:1.15
	cgen-snapshot-20100701:1.15
	sid-snapshot-20100601:1.15
	cgen-snapshot-20100601:1.15
	sid-snapshot-20100501:1.15
	cgen-snapshot-20100501:1.15
	sid-snapshot-20100401:1.15
	cgen-snapshot-20100401:1.15
	sid-snapshot-20100301:1.15
	cgen-snapshot-20100301:1.15
	sid-snapshot-20100201:1.15
	cgen-snapshot-20100201:1.15
	sid-snapshot-20100101:1.15
	cgen-snapshot-20100101:1.15
	sid-snapshot-20091201:1.15
	cgen-snapshot-20091201:1.15
	sid-snapshot-20091101:1.13
	cgen-snapshot-20091101:1.13
	sid-snapshot-20091001:1.13
	cgen-snapshot-20091001:1.13
	arc-sim-20090309:1.8
	sid-snapshot-20090901:1.12
	cgen-snapshot-20090901:1.12
	sid-snapshot-20090801:1.9
	cgen-snapshot-20090801:1.9
	sid-snapshot-20090701:1.9
	cgen-snapshot-20090701:1.9
	dje-cgen-play1-branch:1.9.0.2
	dje-cgen-play1-branchpoint:1.9
	cgen-1_1-branch:1.8.0.12
	cgen-1_1-branchpoint:1.8
	sid-snapshot-20090601:1.8
	cgen-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	cgen-snapshot-20090501:1.8
	sid-snapshot-20090401:1.8
	cgen-snapshot-20090401:1.8
	arc-insight_6_8-branch:1.8.0.10
	arc-insight_6_8-branchpoint:1.8
	sid-snapshot-20090301:1.8
	cgen-snapshot-20090301:1.8
	sid-snapshot-20090201:1.8
	cgen-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	cgen-snapshot-20090101:1.8
	sid-snapshot-20081201:1.8
	cgen-snapshot-20081201:1.8
	sid-snapshot-20081101:1.8
	cgen-snapshot-20081101:1.8
	sid-snapshot-20081001:1.8
	cgen-snapshot-20081001:1.8
	sid-snapshot-20080901:1.8
	cgen-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	cgen-snapshot-20080801:1.8
	sid-snapshot-20080701:1.8
	cgen-snapshot-20080701:1.8
	sid-snapshot-20080601:1.8
	cgen-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	cgen-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	cgen-snapshot-20080401:1.8
	sid-snapshot-20080301:1.8
	cgen-snapshot-20080301:1.8
	sid-snapshot-20080201:1.8
	cgen-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	cgen-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	cgen-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	cgen-snapshot-20071101:1.8
	sid-snapshot-20071001:1.8
	cgen-snapshot-20071001:1.8
	msnyder-fork-checkpoint-branch:1.8.0.8
	msnyder-fork-checkpoint-branchpoint:1.8
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.6
	cagney_regbuf-20020515-branch:1.8.0.4
	cagney_regbuf-20020515-branchpoint:1.8
	cygnus_cvs_20020108_pre:1.8
	cgen-1-1-branch:1.8.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2009.11.05.16.55.33;	author devans;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.03.16.24.01;	author devans;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.07.22.17.33;	author devans;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.20.17.03.29;	author devans;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.18.16.34.41;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.14.19.52.57;	author geoffk;	state Exp;
branches
	1.8.12.1;
next	1.7;

1.7
date	2001.06.14.19.51.44;	author geoffk;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.11.02.24.51;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.26.05.17.28;	author bje;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.24.12.22.35;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.31.23.50.09;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.06.16.55.16;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.8.12.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.15
log
@	* utils.scm (reduce): Delete.

	* rtl-traverse.scm (/rtx-canon-rtx-enum): Tweak local name.

	* enum.scm (gen-enum-sym): Make consistent with gen-enum-decl
	regarding PREFIX attribute handling.

	* operand.scm (<hw-index>): Add enum to possible types, all uses
	updated.
	(hw-index-constant?, hw-index-constant-value): New functions.
	(make-enum-hw-index, hw-index-enum-name, hw-index-enum-value,
	hw-index-enum-obj): New functions.
	(/operand-parse): Handle enum indices.
	* intrinsics.scm (md-operand:fixed-register): Use hw-index-constant?,
	hw-index-constant-value.
	* rtl.scm (rtx-constant-value): Fix handling of enums.
	* rtx-funcs.scm (enum): Ditto.
	* sid.scm (<hardware-base> cxmake-get): Only ifield indices are
	currently supported here.
@
text
@; CPU description file generator for the GNU assembler testsuite.
; Copyright (C) 2000, 2001, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; This is invoked to build allinsn.exp and a script to run to
; generate allinsn.s and allinsn.d.

; Specify which application.
(set! APPLICATION 'GAS-TEST)

; Called before/after the .cpu file has been read.

(define (gas-test-init!) (opcodes-init!))
(define (gas-test-finish!) (opcodes-finish!))

; Called after .cpu file has been read and global error checks are done.
; We use the `tmp' member to record the syntax split up into its components.

(define (gas-test-analyze!)
  (opcodes-analyze!)
  (map (lambda (insn)
	 (elm-xset! insn 'tmp (syntax-break-out (insn-syntax insn)
						(obj-isa-list insn))))
       (non-multi-insns (current-insn-list)))
  *UNSPECIFIED*
)

; Methods to compute test data.
; The result is a list of strings to be inserted in the assembler
; in the operand's position.

; For a general assembler operand, just turn the value into a string.

(method-make!
 <hw-asm> 'test-data
 (lambda (self ops)
   (map (lambda (op)
	  (cond ((null? op) "")
		((number? op) (number->string op))
		(else (error "unsupported assembler operand" op))))
	ops))
)

; For a keyword operand, choose the appropriate keyword.
; OPS is a list of values, e.g. from an ifield.

(method-make!
 <keyword> 'test-data
 (lambda (self ops)
   (let* ((test-cases (elm-get self 'values))
	  (prefix (elm-get self 'name-prefix))
	  (find-kw (lambda (val)
		     (find-first (lambda (kw) (= (cadr kw) val)) test-cases))))
     (map (lambda (n)
	    ;; If an ifield has, e.g., 2 bits (values 0,1,2,3) and the keyword
	    ;; only has two values, e.g. (foo 0) (bar 1), then we can get
	    ;; invalid requests, i.e. for ifield values of 2 and 3.
	    ;; It's not clear what to do here, but it seems like this is an
	    ;; error in the description file.
	    ;; So it seems like we should flag an error for invalid requests.
	    ;; OTOH, we're just generating testcases.  So instead we just
	    ;; flag a warning and cope by returning the first keyword in the
	    ;; list.
	    (let ((kw (find-kw n)))
	      (if (not kw)
		  (begin
		    (message "WARNING: Invalid test data request for keyword "
			     (obj:name self)
			     ": "
			     n
			     ".\n"
			     "         Compensating by picking a different value.\n")
		    (set! kw (car test-cases))))
	      (string-append 
	       (if (and (not (string=? prefix ""))
			(eq? (string-ref prefix 0) #\$))
		   "\\" "")
	       prefix
	       (->string (car kw)))))
 	  ops)))
)

(method-make!
 <hw-address> 'test-data
 (lambda (self ops)
   (let* ((test-cases '("foodata" "4" "footext" "-4"))
	  (nr-ops (length ops))
	  (selection (map (lambda (z) (random (length test-cases)))
			  (iota nr-ops))))
     (map (lambda (n) (list-ref test-cases n)) selection)))
)

(method-make!
 <hw-iaddress> 'test-data
 (lambda (self ops)
   (let* ((test-cases '("footext" "4" "foodata" "-4"))
	  (nr-ops (length ops))
	  (selection (map (lambda (z) (random (length test-cases)))
			  (iota nr-ops))))
     (map (lambda (n) (list-ref test-cases n)) selection)))
)

(method-make-forward! <hw-register> 'indices '(test-data))
(method-make-forward! <hw-immediate> 'values '(test-data))

; Test data for a field is chosen firstly out of some bit patterns,
; then randomly.  It is then interpreted based on whether there 
; is a decode method.

(method-make!
 <ifield> 'test-data
 (lambda (self n)
   (let* ((bf-len (ifld-length self))
	  (field-max (inexact->exact (round (expt 2 bf-len))))
	  (highbit (quotient field-max 2))
	  (values (map (lambda (n) 
			 (case n
			   ((0) 0)
			   ((1) (- field-max 1))
			   ((2) highbit)
			   ((3) (- highbit 1))
			   ((4) 1)
			   (else (random field-max))))
		       (iota n)))
	  (decode (ifld-decode self)))
     (if decode
	 ; FIXME: need to run the decoder.
	 values
	 ; no decode method
	 (case (mode:class (ifld-mode self))
	   ((INT) (map (lambda (n) (if (>= n highbit) (- n field-max) n)) 
		       values))
	   ((UINT) values)
	   (else (error "unsupported mode class" 
			(mode:class (ifld-mode self))))))))
)

;; Return N values for assembler test data, or nil if there are none
;; (e.g. scalars).
;; ??? This also returns nil for str-expr and rtx.

(method-make!
 <hw-index> 'test-data
 (lambda (self n)
   (case (hw-index:type self)
     ((ifield operand) (send (hw-index:value self) 'test-data n))
     ((constant enum) (make-list n (hw-index-constant-value self)))
     ((scalar) (make-list n nil))
     ((str-expr rtx) (make-list n nil)) ;; ???
     (else (error "invalid hw-index type" (hw-index:type self)))))
)

(method-make!
 <operand> 'test-data
 (lambda (self n)
   (send (op:type self) 'test-data (send (op:index self) 'test-data n)))
)

; Given an operand, return a set of N test data.
; e.g. For a keyword operand, return a random subset.
; For a number, return N numbers.

(define (operand-test-data op n)
  (send op 'test-data n)
)

; Given the broken out assembler syntax string, return the list of operand
; objects.

(define (extract-operands syntax-list)
  (let loop ((result nil) (l syntax-list))
    (cond ((null? l) (reverse! result))
	  ((object? (car l)) (loop (cons (car l) result) (cdr l)))
	  (else (loop result (cdr l)))))
)

; Collate a list of operands into a test test.
; Input is a list of operand lists. Returns a collated set of test
; inputs. For example:
; ((r0 r1 r2) (r3 r4 r5) (2 3 8)) => ((r0 r3 2) (r1 r4 3) (r2 r5 8))
; L is a list of lists.  All elements must have the same length.

(define (/collate-test-set L)
  (if (= (length (car L)) 0)
      '()
      (cons (map car L)
	    (/collate-test-set (map cdr L))))
)

; Given a list of operands for an instruction, return the test set
; (all possible combinations).
; N is the number of testcases for each operand.
; The result has N to-the-power (length OP-LIST) elements.

(define (build-test-set op-list n)
  (let ((test-data (map (lambda (op) (operand-test-data op n)) op-list))
	(len (length op-list)))
    (cond ((= len 0) (list (list)))
	  (else (/collate-test-set test-data))))
)

; Given an assembler expression and a set of operands build a testcase.
; TEST-DATA is a list of strings, one element per operand.

(define (build-asm-testcase syntax-list test-data)
  (let loop ((result nil) (sl syntax-list) (td test-data))
    ;(display (list result sl td "\n"))
    (cond ((null? sl)
	   (string-append "\t"
			  (apply string-append (reverse result))
			  "\n"))
	  ((string? (car sl))
	   (loop (cons (car sl) result) (cdr sl) td))
	  (else (loop (cons (car td) result) (cdr sl) (cdr td)))))
)

; Generate the testsuite for INSN.
; FIXME: make the number of cases an argument to this application.

(define (gen-gas-test insn)
  (logit 2 "Generating gas test data for " (obj:name insn) " ...\n")
  (string-append
   "\t.text\n"
   "\t.global " (gen-sym insn) "\n"
   (gen-sym insn) ":\n"
   (let* ((syntax-list (insn-tmp insn))
	  (op-list (extract-operands syntax-list))
	  (test-set (build-test-set op-list 8)))
     (string-map (lambda (test-data)
		   (build-asm-testcase syntax-list test-data))
		 test-set))
   )
)

; Generate the shell script that builds the .d file.
; .d files contain the objdump result that is used to see whether the
; testcase passed.
; We do this by running gas and objdump.
; Obviously this isn't quite right - bugs in gas or
; objdump - the things we're testing - will cause an incorrect testsuite to
; be built and thus the bugs will be missed.  It is *not* intended that this
; be run immediately before running the testsuite!  Rather, this is run to
; generate the testsuite which is then inspected for accuracy and checked
; into CVS.  As bugs in the testsuite are found they are corrected by hand.
; Or if they're due to bugs in the generator the generator can be rerun and
; the output diff'd to ensure no errors have crept back in.
; The point of doing things this way is TO SAVE A HELL OF A LOT OF TYPING!
; Clearly some hand generated testcases will also be needed, but this
; provides a good test for each instruction.

(define (cgen-build.sh)
  (logit 1 "Generating gas-build.sh ...\n")
  (string-append
   "\
#/bin/sh
# Generate test result data for " (->string (current-arch-name)) " GAS testing.
# This script is machine generated.
# It is intended to be run in the testsuite source directory.
#
# Syntax: build.sh /path/to/build/gas

if [ $# = 0 ] ; then
  if [ ! -x ../gas/as-new ] ; then
    echo \"Usage: $0 [/path/to/gas/build]\"
  else
    BUILD=`pwd`/../gas
  fi
else
  BUILD=$1
fi

if [ ! -x $BUILD/as-new ] ; then
  echo \"$BUILD is not a gas build directory\"
  exit 1
fi

# Put results here, so we preserve the existing set for comparison.
rm -rf tmpdir
mkdir tmpdir
cd tmpdir

function gentest {
    rm -f a.out
    $BUILD/as-new ${1}.s -o a.out
    echo \"#as:\" >${1}.d
    echo \"#objdump: -dr\" >>${1}.d
    echo \"#name: $1\" >>${1}.d
    $BUILD/../binutils/objdump -dr a.out | \
	sed -e 's/(/\\\\(/g' \
            -e 's/)/\\\\)/g' \
            -e 's/\\$/\\\\$/g' \
            -e 's/\\[/\\\\\\[/g' \
            -e 's/\\]/\\\\\\]/g' \
            -e 's/[+]/\\\\+/g' \
            -e 's/[.]/\\\\./g' \
            -e 's/[*]/\\\\*/g' | \
	sed -e 's/^.*file format.*$/.*: +file format .*/' \
	>>${1}.d
    rm -f a.out
}

# Now come all the testcases.
cat > allinsn.s <<EOF
 .data
foodata: .word 42
 .text
footext:\n"
    (string-map (lambda (insn)
		  (gen-gas-test insn))
		(non-multi-insns (current-insn-list)))
    "EOF\n"
    "\n"
    "# Finally, generate the .d file.\n"
    "gentest allinsn\n"
   )
)

; Generate the dejagnu allinsn.exp file that drives the tests.

(define (cgen-allinsn.exp)
  (logit 1 "Generating allinsn.exp ...\n")
  (string-append
   "\
# " (string-upcase (->string (current-arch-name))) " assembler testsuite. -*- Tcl -*-

if [istarget " (->string (current-arch-name)) "*-*-*] {
    run_dump_test \"allinsn\"
}\n"
   )
)
@


1.14
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@d148 1
a148 1
     ((constant) (make-list n (hw-index:value self)))
@


1.13
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d23 2
a24 1
	 (elm-xset! insn 'tmp (syntax-break-out (insn-syntax insn))))
@


1.12
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@d183 1
a183 1
(define (-collate-test-set L)
d187 1
a187 1
	    (-collate-test-set (map cdr L))))
d199 1
a199 1
	  (else (-collate-test-set test-data))))
@


1.11
log
@	* gas-test.scm (<keyword> test-data): Catch invalid requests,
	flag a warning and compensate.
	(<hw-address test-data): Tweak for readability.
	(<hw-iaddress test-data): Ditto.
	(cgen-build.sh): Convert symbols to strings before passing to
	string-append.
	(cgen-allinsn.exp): Ditto.
@
text
@d51 1
a51 1
	  (prefix (elm-get self 'prefix))
@


1.10
log
@	* gas-test.scm (<hw-asm>, test-data): Handle () values.
	(<keyword>, test-data): Convert symbols to strings before passing
	to string-append.
	(<hw-index>, test-data): Enumerate all cases.  Emit correctly sized
	result for scalars.

	* operand.scm (hw-index-scalar): Set `name'.
	(hw-index-anyof, hw-index-derived): Ditto.
@
text
@d45 1
d50 4
a53 2
   (let ((test-cases (elm-get self 'values))
	 (prefix (elm-get self 'prefix)))
d55 25
a79 6
	    (string-append 
	     (if (and (not (string=? prefix ""))
		      (eq? (string-ref prefix 0) #\$))
		 "\\" "")
	     prefix
	     (->string (car (list-ref test-cases n)))))
d87 3
a89 2
	  (n (length ops))
	  (selection (map (lambda (z) (random (length test-cases))) (iota n))))
d97 3
a99 2
	  (n (length ops))
	  (selection (map (lambda (z) (random (length test-cases))) (iota n))))
d256 1
a256 1
# Generate test result data for " (current-arch-name) " GAS testing.
d324 1
a324 1
# " (string-upcase (current-arch-name)) " assembler testsuite. -*- Tcl -*-
d326 1
a326 1
if [istarget " (current-arch-name) "*-*-*] {
@


1.9
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d33 1
d37 5
a41 1
   (map number->string ops))
d45 1
d49 2
a50 2
   (let* ((test-cases (elm-get self 'values))
	  (prefix (elm-get self 'prefix)))
d52 2
a53 2
 	    (string-append 
 	     (if (and (not (string=? prefix ""))
d56 2
a57 2
 	     prefix 
	     (car (list-ref test-cases n))))
d85 1
d114 4
d123 4
a126 2
     ((constant) (hw-index:value self))
     (else nil)))
d157 1
d160 1
a160 1
  (if (=? (length (car L)) 0)
d174 1
a174 1
    (cond ((=? len 0) (list (list)))
@


1.8
log
@	* gas-test.scm (gen-gas-test): Create 8 testcases, not just 5.
	(<operand> 'test-data): Involve both the index and the hardware
	in testcase generation.
	(<hw-indx> 'test-data): Generate test data from the underlying
	object.
	(<ifield> 'test-data): Generate test data by computing bit
	patterns for the field, then decoding them.
	(<hw-address> 'test-data): Allow for new calling convention.
	(<hw-iaddress> 'test-data): Likewise.
	(<keyword> 'test-data): Convert index values into keywords.
	(<hw-asm> 'test-data): Convert index values into integer strings.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001 Red Hat, Inc.
@


1.8.12.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2009 Red Hat, Inc.
@


1.7
log
@	* gas-test.scm (cgen-build.sh): Escape '.' as well.
@
text
@d32 1
d35 2
a36 10
 (lambda (self n)
   ; FIXME: floating point support
   (let* ((signed (list 0 1 -1 2 -2))
	  (unsigned (list 0 1 2 3 4))
	  (mode (elm-get self 'mode))
	  (test-cases (if (eq? (mode:class mode) 'UINT) unsigned signed))
	  (selection (map (lambda (z) (random (length test-cases))) (iota n))))
     ; FIXME: wider ranges.
     (map number->string
	  (map (lambda (n) (list-ref test-cases n)) selection))))
d39 1
d42 1
a42 1
 (lambda (self n)
a43 1
	  (selection (map (lambda (z) (random (length test-cases))) (iota n)))
d46 7
a52 4
	    (string-append 
	     (if (eq? (string-ref prefix 0) #\$) "\\" "")
	     (elm-get self 'prefix) (car (list-ref test-cases n))))
	  selection)))
d57 1
a57 1
 (lambda (self n)
d59 1
d66 1
a66 1
 (lambda (self n)
d68 1
d76 39
a114 2
; This can't use method-make-forward! as we need to call op:type to
; resolve the hardware reference.
d119 1
a119 1
   (send (op:type self) 'test-data n))
d190 1
a190 1
	  (test-set (build-test-set op-list 5)))
@


1.6
log
@2001-05-11  Ben Elliston  <bje@@redhat.com>

	* gas-test.scm (cgen-build.sh, gentest): Escape $ with a backslash
	when generating allinsn.d from objdump output. Without it, the
	testsuite will treat $ as the regular expression for end of line.
@
text
@d222 1
@


1.5
log
@2001-03-26  Ben Elliston  <bje@@redhat.com>

	* gas-test.scm (<keyword>,test-data): Prefix keywords by their
	specified prefix and, if necessary, escape `$' in gas-build.sh to
	prevent unwanted shell variable expansion.
@
text
@d218 1
@


1.4
log
@2001-03-24  Ben Elliston  <bje@@redhat.com>

	* gas-test.scm (<hw-asm>,test-data): Choose pseudo-random data.
	(<keyword>,test-data): Likewise.
	(<hw-address>,test-data): Likewise.
	(<hw-iaddress>,test-data): Likewise.
	(-collate-test-set): New function.
	(build-test-set): Use it.
	(gen-gas-test): Generate five test cases per instruction.
	(cgen-allinsn.exp): Include "-*- Tcl -*-" in DejaGNU test file.

	* read.scm: Load "slib/random" if random is not defined.
	* slib/random.scm: New file.
@
text
@d50 7
a56 2
	  (selection (map (lambda (z) (random (length test-cases))) (iota n))))
     (map (lambda (n) (car (list-ref test-cases n))) selection)))
@


1.3
log
@2000-10-31  Ben Elliston  <bje@@redhat.com>

	* gas-test.scm (cgen-build.sh): Allow the generated script to run
	with no command line arguments if the gas build directory can be
	determined.
@
text
@d1 2
a2 2
; CPU description file generator for the GAS testsuite.
; Copyright (C) 2000 Red Hat, Inc.
d36 6
a41 3
   (let ((signed (list 0 1 -1 2 -2))
	 (unsigned (list 0 1 2 3 4))
	 (mode (elm-get self 'mode)))
d43 1
a43 4
	  (list-take n
		     (if (eq? (mode:class mode) 'UINT)
			 unsigned
			 signed)))))
d49 3
a51 4
   (let* ((values (elm-get self 'values))
	  (n (min n (length values))))
     ; FIXME: Need to handle mach variants.
     (map car (list-take n values))))
d57 3
a59 2
   (let ((test-data '("foodata" "4" "footext" "-4")))
     (list-take n test-data)))
d65 3
a67 2
   (let ((test-data '("footext" "4" "foodata" "-4")))
     (list-take n test-data)))
d100 12
a119 1
    ; FIXME: Make slicker later.
d121 1
a121 2
	  ((=? len 1) test-data)
	  (else (list (map car test-data)))))
d140 1
a140 1
; FIXME: This needs to be expanded upon.
d150 1
a150 2
	  (test-set (build-test-set op-list 2)))
     ;(display test-set) (newline)
d244 1
a244 1
# " (string-upcase (current-arch-name)) " assembler testsuite.
@


1.2
log
@2000-10-06  Dave Brolley  <brolley@@redhat.com>

	* utils-gen.scm (-gen-ifld-extract-base): Compute start position as
	ifld-start + ifld-word-offset.
	(gen-ifld-extract): Check adata-integral-insn? before checking whether
	the field is beyond the base number of bits.
	(gen-define-ifields): Use a base-length of 32 if adata-integral-insn?.
	(gen-extract-ifields): Ditto.
	* gas-test.scm (gentest): Generate backslashes before '[' and ']'
	characters in the regular expression.
@
text
@d174 9
a182 1
BUILD=$1
d184 3
a186 3
if [ ! -f $BUILD/as-new ] ; then
    echo \"$BUILD is not a GAS build directory.\"
    exit 1
@


1.1
log
@Initial revision
@
text
@d193 6
a198 1
	sed -e 's/(/\\\\(/g' -e 's/)/\\\\)/g' -e 's/[+]/\\\\+/g' -e 's/[*]/\\\*/g' | \
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
