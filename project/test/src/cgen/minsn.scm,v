head	1.9;
access;
symbols
	sid-snapshot-20180601:1.9
	cgen-snapshot-20180601:1.9
	sid-snapshot-20180501:1.9
	cgen-snapshot-20180501:1.9
	sid-snapshot-20180401:1.9
	cgen-snapshot-20180401:1.9
	sid-snapshot-20180301:1.9
	cgen-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	cgen-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	cgen-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	cgen-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	cgen-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	cgen-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	cgen-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	cgen-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	cgen-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	cgen-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	cgen-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	cgen-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	cgen-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	cgen-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	cgen-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	cgen-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	cgen-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	cgen-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	cgen-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	cgen-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	cgen-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	cgen-snapshot-20160501:1.9
	sid-snapshot-20160401:1.9
	cgen-snapshot-20160401:1.9
	sid-snapshot-20160301:1.9
	cgen-snapshot-20160301:1.9
	sid-snapshot-20160201:1.9
	cgen-snapshot-20160201:1.9
	sid-snapshot-20160101:1.9
	cgen-snapshot-20160101:1.9
	sid-snapshot-20151201:1.9
	cgen-snapshot-20151201:1.9
	sid-snapshot-20151101:1.9
	cgen-snapshot-20151101:1.9
	sid-snapshot-20151001:1.9
	cgen-snapshot-20151001:1.9
	sid-snapshot-20150901:1.9
	cgen-snapshot-20150901:1.9
	sid-snapshot-20150801:1.9
	cgen-snapshot-20150801:1.9
	sid-snapshot-20150701:1.9
	cgen-snapshot-20150701:1.9
	sid-snapshot-20150601:1.9
	cgen-snapshot-20150601:1.9
	sid-snapshot-20150501:1.9
	cgen-snapshot-20150501:1.9
	sid-snapshot-20150401:1.9
	cgen-snapshot-20150401:1.9
	sid-snapshot-20150301:1.9
	cgen-snapshot-20150301:1.9
	sid-snapshot-20150201:1.9
	cgen-snapshot-20150201:1.9
	sid-snapshot-20150101:1.9
	cgen-snapshot-20150101:1.9
	sid-snapshot-20141201:1.9
	cgen-snapshot-20141201:1.9
	sid-snapshot-20141101:1.9
	cgen-snapshot-20141101:1.9
	sid-snapshot-20141001:1.9
	cgen-snapshot-20141001:1.9
	sid-snapshot-20140901:1.9
	cgen-snapshot-20140901:1.9
	sid-snapshot-20140801:1.9
	cgen-snapshot-20140801:1.9
	sid-snapshot-20140701:1.9
	cgen-snapshot-20140701:1.9
	sid-snapshot-20140601:1.9
	cgen-snapshot-20140601:1.9
	sid-snapshot-20140501:1.9
	cgen-snapshot-20140501:1.9
	sid-snapshot-20140401:1.9
	cgen-snapshot-20140401:1.9
	sid-snapshot-20140301:1.9
	cgen-snapshot-20140301:1.9
	sid-snapshot-20140201:1.9
	cgen-snapshot-20140201:1.9
	sid-snapshot-20140101:1.9
	cgen-snapshot-20140101:1.9
	sid-snapshot-20131201:1.9
	cgen-snapshot-20131201:1.9
	sid-snapshot-20131101:1.9
	cgen-snapshot-20131101:1.9
	sid-snapshot-20131001:1.9
	cgen-snapshot-20131001:1.9
	sid-snapshot-20130901:1.9
	cgen-snapshot-20130901:1.9
	sid-snapshot-20130801:1.9
	cgen-snapshot-20130801:1.9
	sid-snapshot-20130701:1.9
	cgen-snapshot-20130701:1.9
	sid-snapshot-20130601:1.9
	cgen-snapshot-20130601:1.9
	sid-snapshot-20130501:1.9
	cgen-snapshot-20130501:1.9
	sid-snapshot-20130401:1.9
	cgen-snapshot-20130401:1.9
	sid-snapshot-20130301:1.9
	cgen-snapshot-20130301:1.9
	sid-snapshot-20130201:1.9
	cgen-snapshot-20130201:1.9
	sid-snapshot-20130101:1.9
	cgen-snapshot-20130101:1.9
	sid-snapshot-20121201:1.9
	cgen-snapshot-20121201:1.9
	sid-snapshot-20121101:1.9
	cgen-snapshot-20121101:1.9
	sid-snapshot-20121001:1.9
	cgen-snapshot-20121001:1.9
	sid-snapshot-20120901:1.9
	cgen-snapshot-20120901:1.9
	sid-snapshot-20120801:1.9
	cgen-snapshot-20120801:1.9
	sid-snapshot-20120701:1.9
	cgen-snapshot-20120701:1.9
	sid-snapshot-20120601:1.9
	cgen-snapshot-20120601:1.9
	sid-snapshot-20120501:1.9
	cgen-snapshot-20120501:1.9
	sid-snapshot-20120401:1.9
	cgen-snapshot-20120401:1.9
	sid-snapshot-20120301:1.9
	cgen-snapshot-20120301:1.9
	sid-snapshot-20120201:1.9
	cgen-snapshot-20120201:1.9
	sid-snapshot-20120101:1.9
	cgen-snapshot-20120101:1.9
	sid-snapshot-20111201:1.9
	cgen-snapshot-20111201:1.9
	sid-snapshot-20111101:1.9
	cgen-snapshot-20111101:1.9
	sid-snapshot-20111001:1.9
	cgen-snapshot-20111001:1.9
	sid-snapshot-20110901:1.9
	cgen-snapshot-20110901:1.9
	sid-snapshot-20110801:1.9
	cgen-snapshot-20110801:1.9
	sid-snapshot-20110701:1.9
	cgen-snapshot-20110701:1.9
	sid-snapshot-20110601:1.9
	cgen-snapshot-20110601:1.9
	sid-snapshot-20110501:1.9
	cgen-snapshot-20110501:1.9
	sid-snapshot-20110401:1.9
	cgen-snapshot-20110401:1.9
	sid-snapshot-20110301:1.9
	cgen-snapshot-20110301:1.9
	sid-snapshot-20110201:1.9
	cgen-snapshot-20110201:1.9
	sid-snapshot-20110101:1.9
	cgen-snapshot-20110101:1.9
	sid-snapshot-20101201:1.9
	cgen-snapshot-20101201:1.9
	sid-snapshot-20101101:1.9
	cgen-snapshot-20101101:1.9
	sid-snapshot-20101001:1.9
	cgen-snapshot-20101001:1.9
	sid-snapshot-20100901:1.9
	cgen-snapshot-20100901:1.9
	sid-snapshot-20100801:1.9
	cgen-snapshot-20100801:1.9
	sid-snapshot-20100701:1.9
	cgen-snapshot-20100701:1.9
	sid-snapshot-20100601:1.9
	cgen-snapshot-20100601:1.9
	sid-snapshot-20100501:1.9
	cgen-snapshot-20100501:1.9
	sid-snapshot-20100401:1.9
	cgen-snapshot-20100401:1.9
	sid-snapshot-20100301:1.9
	cgen-snapshot-20100301:1.9
	sid-snapshot-20100201:1.9
	cgen-snapshot-20100201:1.9
	sid-snapshot-20100101:1.9
	cgen-snapshot-20100101:1.9
	sid-snapshot-20091201:1.9
	cgen-snapshot-20091201:1.9
	sid-snapshot-20091101:1.8
	cgen-snapshot-20091101:1.8
	sid-snapshot-20091001:1.8
	cgen-snapshot-20091001:1.8
	arc-sim-20090309:1.2
	sid-snapshot-20090901:1.7
	cgen-snapshot-20090901:1.7
	sid-snapshot-20090801:1.4
	cgen-snapshot-20090801:1.4
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.2
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.2.0.6
	cgen-1_1-branchpoint:1.2
	sid-snapshot-20090601:1.2
	cgen-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	cgen-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	cgen-snapshot-20090401:1.2
	arc-insight_6_8-branch:1.2.0.4
	arc-insight_6_8-branchpoint:1.2
	sid-snapshot-20090301:1.2
	cgen-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	cgen-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	cgen-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	cgen-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	cgen-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	cgen-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	cgen-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	cgen-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	cgen-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	cgen-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	cgen-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	cgen-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	cgen-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	cgen-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	cgen-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	cgen-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	cgen-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	cgen-snapshot-20071001:1.2
	msnyder-fork-checkpoint-branch:1.2.0.2
	msnyder-fork-checkpoint-branchpoint:1.2
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.6
	cagney_regbuf-20020515-branch:1.1.1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2009.11.03.16.24.02;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.27.04.22.56;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.12.22.33.37;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.06.16.40.43;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.18.20.44.58;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.2.6.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@; Macro instruction definitions.
; Copyright (C) 2000, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; Expansion:
; If the macro expands to a string, arguments in the input string
; are refered to with %N.  Multiple insns are separated with '\n'.
; String expansion is a special case of the normal form which is a Scheme
; expression that controls the expansion.  The Scheme expression will be able
; to refer to the current assembly state to decide how to perform the
; expansion.  Special expression `emit' is used to call the assembler emitter
; for a particular insn.  Special expression `expand' is used to return a
; string to be reparsed (which is special cased).

; Parse a list of macro-instruction expansion descriptions.
; This is the main routine for building an minsn-expansion object from a
; description in the .cpu file.
; All arguments are in raw (non-evaluated) form.

; ??? At present we only support macros that are aliases of one real insn.

; Object to describe a macro-insn.

(define <macro-insn>
  (class-make '<macro-insn>
	      '(<source-ident>)
	      '(
		; syntax of the macro
		syntax
		; list of expansion expressions
		expansions
		)
	      nil)
)

(method-make-make! <macro-insn>
		   '(location name comment attrs syntax expansions))

; Accessor fns

(define minsn-syntax (elm-make-getter <macro-insn> 'syntax))
(define minsn-expansions (elm-make-getter <macro-insn> 'expansions))

; Return a list of the machs that support MINSN.

(define (minsn-machs minsn)
  nil
)

; Return macro-instruction mnemonic.
; This is computed from the syntax string.

(define minsn-mnemonic insn-mnemonic)

; Return enum cgen_minsn_types value for MINSN.

(define (minsn-enum minsn)
  (string-upcase (string-append "@@ARCH@@_MINSN_" (gen-sym minsn)))
)

; Parse a macro-insn expansion description.
; ??? At present we only support unconditional simple expansion.

(define (/minsn-parse-expansion context expn)
  (if (not (form? expn))
      (parse-error context "invalid macro expansion" expn))
  (if (not (eq? 'emit (car expn)))
      (parse-error context "invalid macro expansion, must be `(emit ...)'" expn))
  expn
)

; Parse a macro-instruction description.
; This is the main routine for building a macro-insn object from a
; description in the .cpu file.
; All arguments are in raw (non-evaluated) form.
; The result is the parsed object or #f if object isn't for selected mach(s).

(define (/minsn-parse context name comment attrs syntax expansions)
  (logit 2 "Processing macro-insn " name " ...\n")

  (if (not (list? expansions))
      (parse-error context "invalid macro expansion list" expansions))

  ;; Pick out name first to augment the error context.
  (let* ((name (parse-name context name))
	 (context (context-append-name context name))
	 (atlist-obj (atlist-parse context attrs "cgen_minsn")))

    (if (keep-atlist? atlist-obj #f)

	(let ((result (make <macro-insn>
			(context-location context)
			name
			(parse-comment context comment)
			atlist-obj
			(parse-syntax context syntax)
			(map (lambda (e) (/minsn-parse-expansion context e))
			     expansions))))
	  result)

	(begin
	  (logit 2 "Ignoring " name ".\n")
	  #f)))
)

; Read a macro-insn description
; This is the main routine for analyzing macro-insns in the .cpu file.
; CONTEXT is a <context> object for error messages.
; ARG-LIST is an associative list of field name and field value.
; /minsn-parse is invoked to create the `macro-insn' object.

(define (/minsn-read context . arg-list)
  (let (
	(name nil)
	(comment "")
	(attrs nil)
	(syntax "")
	(expansions nil)
	)

    ; Loop over each element in ARG-LIST, recording what's found.
    (let loop ((arg-list arg-list))
      (if (null? arg-list)
	  nil
	  (let ((arg (car arg-list))
		(elm-name (caar arg-list)))
	    (case elm-name
	      ((name) (set! name (cadr arg)))
	      ((comment) (set! comment (cadr arg)))
	      ((attrs) (set! attrs (cdr arg)))
	      ((syntax) (set! syntax (cadr arg)))
	      ((expansions) (set! expansions (cdr arg)))
	      (else (parse-error context "invalid macro-insn arg" arg)))
	    (loop (cdr arg-list)))))

    ; Now that we've identified the elements, build the object.
    (/minsn-parse context name comment attrs syntax expansions))
)

; Define a macro-insn object, name/value pair list version.

(define define-minsn
  (lambda arg-list
    (if (eq? APPLICATION 'SIMULATOR)
	#f ; don't waste time if simulator
	(let ((m (apply /minsn-read (cons (make-current-context "define-minsn")
					  arg-list))))
	  (if m
	      (current-minsn-add! m))
	  m)))
)

; Define a macro-insn object, all arguments specified.
; This only supports one expansion.
; Use define-minsn for the general case (??? which is of course not implemented
; yet :-).

(define (define-full-minsn name comment attrs syntax expansion)
  (if (eq? APPLICATION 'SIMULATOR)
      #f ; don't waste time if simulator
      (let ((m (/minsn-parse (make-current-context "define-full-minsn")
			     name comment
			     (cons 'ALIAS attrs)
			     syntax (list expansion))))
	(if m
	    (current-minsn-add! m))
	m))
)

; Compute the ifield list for an alias macro-insn.
; This involves making a copy of REAL-INSN's ifield list and assigning
; known quantities to operands that have fixed values in the macro-insn.

(define (/minsn-compute-iflds context minsn-iflds real-insn)
  (let* ((iflds (list-copy (insn-iflds real-insn)))
	 ; List of "free variables", i.e. operands.
	 (ifld-ops (find ifld-operand? iflds))
	 ; Names of fields in `ifld-ops'.  As elements of minsn-iflds are
	 ; parsed the associated element in ifld-names is deleted.  At the
	 ; end ifld-names must be empty.  delq! can't delete the first
	 ; element in a list, so we insert a fencepost.
	 (ifld-names (cons #f (map obj:name ifld-ops)))
	 (isa-name-list (obj-isa-list real-insn)))
    ;(logit 3 "Computing ifld list, operand field names: " ifld-names "\n")
    ; For each macro-insn ifield expression, look it up in the real insn's
    ; ifield list.  If an operand without a prespecified value, leave
    ; unchanged.  If an operand or ifield with a value, assign the value to
    ; the ifield entry.
    (for-each (lambda (f)
		(let* ((op-name (if (pair? f) (car f) f))
		       (op-obj (current-op-lookup op-name isa-name-list))
		       ; If `op-name' is an operand, use its ifield.
		       ; Otherwise `op-name' must be an ifield name.
		       (f-name (if op-obj
				   (obj:name (hw-index:value (op:index op-obj)))
				   op-name))
		       (ifld-pair (object-memq f-name iflds)))
		  ;(logit 3 "Processing ifield " f-name " ...\n")
		  (if (not ifld-pair)
		      (parse-error context "unknown operand" f))
		  ; Ensure `f' is an operand.
		  (if (not (memq f-name ifld-names))
		      (parse-error context "not an operand" f))
		  (if (pair? f)
		      (set-car! ifld-pair (ifld-new-value (car ifld-pair) (cadr f))))
		  (delq! f-name ifld-names)))
	      minsn-iflds)
    (if (not (equal? ifld-names '(#f)))
	(parse-error context "incomplete operand list, missing: " (cdr ifld-names)))
    iflds)
)

; Create an aliased real insn from an alias macro-insn.

(define (minsn-make-alias context minsn)
  (if (or (not (has-attr? minsn 'ALIAS))
	  ; Must emit exactly one real insn.
	  (not (eq? 'emit (caar (minsn-expansions minsn)))))
      (parse-error context "not an alias macro-insn" minsn))

  (let* ((expn (car (minsn-expansions minsn)))
	 (alias-of (current-insn-lookup (cadr expn) (obj-isa-list minsn))))

    (if (not alias-of)
	(parse-error context "unknown real insn in expansion" minsn))

    (let ((i (make <insn>
		   (context-location context)
		   (obj:name minsn)
		   (obj:comment minsn)
		   (obj-atlist minsn)
		   (minsn-syntax minsn)
		   (/minsn-compute-iflds (context-append context
							 (string-append ": " (obj:str-name minsn)))
					 (cddr expn) alias-of)
		   #f ; ifield-assertion
		   #f ; semantics
		   #f ; timing
		   )))
      ; FIXME: use same format entry as real insn,
      ; build mask and test value at run time.
      (insn-set-ifmt! i (ifmt-build i -1 #f (insn-iflds i))) ; (car (ifmt-analyze i #f))))
      ;(insn-set-ifmt! i (insn-ifmt alias-of))
      i))
)

; Called before a .cpu file is read in.

(define (minsn-init!)
  (reader-add-command! 'define-minsn
		       "\
Define a macro instruction, name/value pair list version.
"
		       nil 'arg-list define-minsn)
  (reader-add-command! 'define-full-minsn
		       "\
Define a macro instruction, all arguments specified.
"
		       nil '(name comment attrs syntax expansion)
		       define-full-minsn)

  *UNSPECIFIED*
)

; Called after the .cpu file has been read in.

(define (minsn-finish!)
  *UNSPECIFIED*
)
@


1.8
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d183 2
a184 1
	 (ifld-names (cons #f (map obj:name ifld-ops))))
d192 1
a192 1
		       (op-obj (current-op-lookup op-name))
d223 1
a223 1
	 (alias-of (current-insn-lookup (cadr expn))))
@


1.7
log
@	* ifield.scm (<ifield> constructor): New arg `location',
	all callers updated.
	* insn.scm (<insn> constructor): Ditto.
	(<multi-insn> constructor): Ditto.
	* minsn.scm (<macro-insn> constructor): Ditto.
	* operand.scm (<operand> constructor): Ditto.
	* utils-cgen.scm (builtin-location): New function.
	(<source-ident>): Fix default value of member `location'.
	(source-ident?): New function.
@
text
@d65 1
a65 1
(define (-minsn-parse-expansion context expn)
d79 1
a79 1
(define (-minsn-parse context name comment attrs syntax expansions)
d98 1
a98 1
			(map (lambda (e) (-minsn-parse-expansion context e))
d111 1
a111 1
; -minsn-parse is invoked to create the `macro-insn' object.
d113 1
a113 1
(define (-minsn-read context . arg-list)
d138 1
a138 1
    (-minsn-parse context name comment attrs syntax expansions))
d147 1
a147 1
	(let ((m (apply -minsn-read (cons (make-current-context "define-minsn")
d162 1
a162 1
      (let ((m (-minsn-parse (make-current-context "define-full-minsn")
d175 1
a175 1
(define (-minsn-compute-iflds context minsn-iflds real-insn)
d233 1
a233 1
		   (-minsn-compute-iflds (context-append context
@


1.6
log
@	Clean up cpu file parsing, pass context consistently instead of the
	old "errtxt" argument.
	NOTE: ACU == "All Callers Updated".
	* attr.scm (-parse-simple-attribute): Renamed from
	parse-simple-attribute, ACU.
	(-attr-parse): Change errtxt argument to context, ACU.
	(-attr-read): Ditto.
	(atlist-parse): Ditto.  Put context arg first.
	(attr-parse): Use parse-error instead of context-error.
	* enum.scm (parse-enum-vals): Change errtxt argument to context, ACU.
	(-enum-parse-prefix, -enum-parse, -enum-read): Ditto.
	* hardware.scm (-keyword-parse): Renamed from keyword-parse.
	`context' arg is now a <context> object.  ACU.
	(-keyword-read): `context' arg is now a <context> object.  ACU.
	(-hw-parse-indices): Change errtxt argument to context, ACU.
	(-hw-parse-values, -hw-parse-handlers): Ditto.
	(-hw-parse-getter, -hw-parse-setter, -hw-parse, -hw-read): Ditto.
	(-hw-validate-layout, -hw-create-getter-from-layout,
	-hw-create-setter-from-layout): Ditto.
	(<hw-register>:parse!, <hw-pc>:parse!): Ditto.
	(<hw-memory>:parse!, <hw-immediate>:parse!): Ditto.
	(<hw-address>:parse!): Ditto.
	* ifield.scm (-ifield-parse, ifield-read): Ditto.
	(-ifld-parse-follows, -ifld-parse-encode-decode): Ditto.
	(-ifld-parse-encode, -ifld-parse-decode): Ditto.
	(-multi-ifield-parse, -multi-ifield-read): Ditto.
	* insn.scm (-insn-parse, -insn-read): Ditto.
	(parse-syntax): Ditto.  Put context arg first.
	(-parse-insn-format-symbol): Change errtxt argument to context, ACU.
	(-parse-insn-format-ifield-spec, -parse-insn-format-list): Ditto.
	(-parse-insn-format): Ditto.
	* mach.scm (-arch-parse-alignment, -arch-parse-machs): Ditto.
	(-arch-parse-isas): Ditto.
	(-isa-read): Add context arg, ACU.
	(-cpu-parse, -cpu-read, -mach-read): Ditto.
	* minsn.scm (-minsn-parse-expansion): Change errtxt argument to
	context, ACU.
	(-minsn-parse, -minsn-read, -minsn-compute-iflds): Ditto.
	(minsn-make-alias): Ditto.
	* mode.scm (-mode-parse): Ditto.
	(parse-mode-name): Ditto.  Put context arg first.
	* model.scm (-prefetch-parse, -retire-parse, -pipeline-parse): Change
	errtxt argument to context, ACU.
	(-unit-parse, -model-parse, -model-read): Ditto.
	* operand.scm (-operand-parse-getter): Use parse-error instead of
	context-error.
	(-operand-parse-setter): Ditto.
	(-operand-parse): Change errtxt argument to context, ACU.
	(-operand-read, -derived-operand-parse, -derived-operand-read): Ditto.
	(-anyof-operand-parse, -anyof-operand-read): Ditto.
	* read.scm (reader-error): Delete.  Use parse-error instead.
	(parse-error): Change errtxt argument to context, ACU.  Split args
	argument into expr and maybe-help-text.
	(-reader-process-expanded-1!): Reorganize.
	* rtl.scm (-subr-read): Change errtxt argument to context, ACU.
	* types.scm (parse-type): Ditto.
	* utils-cgen.scm (single-location->simple-string): New function.
	(<context>): Replace members file,lineno with location.
	(make-prefix-context): Renamed from context-make-prefix, ACU.
	(make-current-context): New function.
	(context-append, context-append-name): New functions.
	(context-make-reader): Delete.
	(parse-name): Change errtxt argument to context, ACU.
	Put context arg first.
	(parse-comment): Ditto.
	(parse-number): Change errtxt argument to context, ACU.
	(arg-list-validate-name, arg-list-check-no-args,
	arg-list-symbol-arg): Ditto.

	* read.scm (-cmd-if): Don't assume test is a list.

	* html.scm (get-insn-properties): Delete errtxt, unused.
@
text
@d37 2
a38 1
(method-make-make! <macro-insn> '(name comment attrs syntax expansions))
d93 1
d228 1
@


1.5
log
@	Track source location better, for better error messages.
	* pmacros.scm (-pmacro-eval): Delete, unused.
	(pmacro-expand, -pmacro-expand): New arg `loc', all callers updated.
	(-pmacro-expand-expr-list, -smacro-apply): Ditto.
	(scan-list, scan): Ditto.
	(-pmacro-builtin-pmacro, -pmacro-builtin-let, -pmacro-builtin-if,
	-pmacro-builtin-case, -pmacro-builtin-cond, -pmacro-builtin-begin,
	-pmacro-builtin-andif, -pmacro-builtin-orif): Ditto.
	(scan-list1): New function.
	(-pmacro-build-lambda): New arg `loc', all callers updated.  Rewrite.
	* read.scm (<reader>): New member `location'.
	(-reader-lookup-command): Renamed from reader-lookup-command,
	all callers updated.
	(reader-error): Rewrite to produce better source location info.
	(current-reader-location): New function.
	(-reader-process-expanded-1!): Renamed from -reader-process-expanded-1.
	All callers updated.  Record source location of expression.
	(reader-process-expanded!): Renamed from reader-process-expanded.
	All callers updated.
	(-reader-process!): Renamed from reader-process.  New arg `loc'.
	All callers updated.  Record source location of define-pmacro.
	* utils-cgen.scm (<location>): New class.
	(single-location): New (pseudo) class.
	(pretty-print-single-location, pretty-print-location): New functions.
	(location-top, location-push-single, location-push): New functions.
	(unspecified-location, current-input-location): New functions.
	(location-property): New object property.
	(location-property-set!): New function.
	(<source-ident>): Renamed from <ordered-ident>.  New member `location'.
	All uses updated.
	* testsuite/location-1.test: New testcase.
	* testsuite/run-tests.sh: Fix fail count handling.
	* testsuite/test-utils.sh.in (run_cgen): New option `-f'.  Allow tests
	to expect cgen to fail.

	* pmacros.scm (*): Use "pmacro" instead of "macro" more consistently.

	* read.scm (-cmd-include): Renamed from include.  All callers updated.
	(-cmd-if): Renamed from cmd-if.  All callers updated.
	Use reader-process-expanded! on then/else clauses instead of eval1.
@
text
@d64 1
a64 1
(define (-minsn-parse-expansion errtxt expn)
d66 1
a66 1
      (parse-error errtxt "invalid macro expansion" expn))
d68 1
a68 1
      (parse-error errtxt "invalid macro expansion, must be `(emit ...)'" expn))
d78 1
a78 1
(define (-minsn-parse errtxt name comment attrs syntax expansions)
d82 1
a82 1
      (parse-error errtxt "invalid macro expansion list" expansions))
d84 4
a87 2
  (let ((name (parse-name name errtxt))
	(atlist-obj (atlist-parse attrs "cgen_minsn" errtxt)))
d93 1
a93 1
			(parse-comment comment errtxt)
d95 2
a96 2
			(parse-syntax syntax errtxt)
			(map (lambda (e) (-minsn-parse-expansion errtxt e))
d107 1
a107 1
; ERRTXT is prepended to error messages to provide context.
d111 2
a112 2
(define (-minsn-read errtxt . arg-list)
  (let (; Current macro-insn elements:
d119 1
d132 1
a132 1
	      (else (parse-error errtxt "invalid macro-insn arg" arg)))
d134 1
d136 1
a136 2
    (-minsn-parse errtxt name comment attrs syntax expansions)
    )
d145 2
a146 1
	(let ((m (apply -minsn-read (cons "define-minsn" arg-list))))
d160 2
a161 1
      (let ((m (-minsn-parse "define-full-minsn" name comment
d173 1
a173 1
(define (minsn-compute-iflds errtxt minsn-iflds real-insn)
d198 1
a198 1
		      (parse-error errtxt "unknown operand" f))
d201 1
a201 1
		      (parse-error errtxt "not an operand" f))
d207 1
a207 1
	(parse-error errtxt "incomplete operand list, missing: " (cdr ifld-names)))
d213 1
a213 1
(define (minsn-make-alias errtxt minsn)
d217 1
a217 1
      (parse-error errtxt "not an alias macro-insn" minsn))
d223 1
a223 1
	(parse-error errtxt "unknown real insn in expansion" minsn))
d230 3
a232 3
		   (minsn-compute-iflds (string-append errtxt
						       ": " (obj:str-name minsn))
					(cddr expn) alias-of)
@


1.4
log
@	Use hash tables to record ifields, operands, insns, macro-insns.
	* attr.scm (attr-builtin!): Tweak some comments.
	* hardware.scm (hardware-builtin!): Call all-isas-attr-value.
	* ifield.scm (<ifield>): Subclass from <ordered-ident> instead of
	<ident>.
	(<multi-ifield>): New constructor.
	(ifield-builtin!): Add isa attr to f-nil, f-anyof.
	* insn.scm (<insn>): Subclass from <ordered-ident> instead of
	<ident>.
	(-sub-insn-make!): Add hack to avoid differences in generated code.
	(multi-insn-instantiate!): Add total number of multi-insns to
	logging message.
	* mach.scm (<arch>): Rename members ifld-list, op-list, insn-list,
	minsn-list to foo-table.  New member next-ordinal.
	Update getters/setters.
	(arch-ifld-list, arch-op-list, arch-insn-list, arch-minsn-list):
	New functions.
	(-get-next-ordinal!, -get-lowest-ordinal): New function.
	(-make-ident-object-table, -ident-object-table->list,
	-ident-object-table-add!, -ident-object-table-lookup): New functions.
	(current-ifld-list, current-ifld-add! current-ifld-lookup,
	-ifld-already-defined?): Rewrite.
	(current-op-list, current-op-add! current-op-lookup,
	-op-already-defined?): Rewrite.
	(current-raw-insn-list, insn-list-car, insn-list-splice!): Delete.
	(current-insn-list, current-insn-add! current-insn-lookup,
	-insn-already-defined?): Rewrite.
	(current-minsn-list, current-minsn-add! current-minsn-lookup,
	-minsn-already-defined?): Rewrite.
	(all-isas-attr-value, all-isas-attr, attr-isa-list): New functions.
	(MAX-VIRTUAL-INSNS): Define.
	(arch-analyze-insns!): Add hack to avoid differences in generated code.
	Update use of arch-insn-list.
	(mach-init!): Initialize ifld-table, op-table, insn-table, minsn-table.
	(arch-finish!): Delete references to ifld-table, op-table, insn-table,
	minsn-table.
	* minsn.scm (<macro-insn>): Subclass from <ordered-ident> instead of
	<ident>.  New constructor.
	* operand.scm (<operand>): Subclass from <ordered-ident> instead of
	<ident>.
	* sid.scm (-virtual-insn-add!): New function.
	(-create-virtual-insns!): Call it.
	(-fill-sim-insn-list!): Rewrite.
	* sim.scm (-virtual-insn-add!, -create-virtual-insns!): New functions.
	(sim-finish!): Move contents to -create-virtual-insns!, and call it.
	* utils-cgen.scm (<ordered-ident>): New class.
	(obj-ordinal, obj-set-ordinal!): New functions.
	(add-ident-methods!): Delete.

	* model.scm (parse-insn-timing): Change logging message to level 3.
@
text
@d27 1
a27 1
	      '(<ordered-ident>)
@


1.3
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d27 1
a27 1
	      '(<ident>)
d37 2
@


1.2
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
@


1.2.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2009 Red Hat, Inc.
@


1.1
log
@Initial revision
@
text
@d224 1
a224 1
						       ": " (obj:name minsn))
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
