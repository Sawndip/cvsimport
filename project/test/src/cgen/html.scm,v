head	1.16;
access;
symbols
	sid-snapshot-20180601:1.16
	cgen-snapshot-20180601:1.16
	sid-snapshot-20180501:1.16
	cgen-snapshot-20180501:1.16
	sid-snapshot-20180401:1.16
	cgen-snapshot-20180401:1.16
	sid-snapshot-20180301:1.16
	cgen-snapshot-20180301:1.16
	sid-snapshot-20180201:1.16
	cgen-snapshot-20180201:1.16
	sid-snapshot-20180101:1.16
	cgen-snapshot-20180101:1.16
	sid-snapshot-20171201:1.16
	cgen-snapshot-20171201:1.16
	sid-snapshot-20171101:1.16
	cgen-snapshot-20171101:1.16
	sid-snapshot-20171001:1.16
	cgen-snapshot-20171001:1.16
	sid-snapshot-20170901:1.16
	cgen-snapshot-20170901:1.16
	sid-snapshot-20170801:1.16
	cgen-snapshot-20170801:1.16
	sid-snapshot-20170701:1.16
	cgen-snapshot-20170701:1.16
	sid-snapshot-20170601:1.16
	cgen-snapshot-20170601:1.16
	sid-snapshot-20170501:1.16
	cgen-snapshot-20170501:1.16
	sid-snapshot-20170401:1.16
	cgen-snapshot-20170401:1.16
	sid-snapshot-20170301:1.16
	cgen-snapshot-20170301:1.16
	sid-snapshot-20170201:1.16
	cgen-snapshot-20170201:1.16
	sid-snapshot-20170101:1.16
	cgen-snapshot-20170101:1.16
	sid-snapshot-20161201:1.16
	cgen-snapshot-20161201:1.16
	sid-snapshot-20161101:1.16
	cgen-snapshot-20161101:1.16
	sid-snapshot-20160901:1.16
	cgen-snapshot-20160901:1.16
	sid-snapshot-20160801:1.16
	cgen-snapshot-20160801:1.16
	sid-snapshot-20160701:1.16
	cgen-snapshot-20160701:1.16
	sid-snapshot-20160601:1.16
	cgen-snapshot-20160601:1.16
	sid-snapshot-20160501:1.16
	cgen-snapshot-20160501:1.16
	sid-snapshot-20160401:1.16
	cgen-snapshot-20160401:1.16
	sid-snapshot-20160301:1.16
	cgen-snapshot-20160301:1.16
	sid-snapshot-20160201:1.16
	cgen-snapshot-20160201:1.16
	sid-snapshot-20160101:1.16
	cgen-snapshot-20160101:1.16
	sid-snapshot-20151201:1.16
	cgen-snapshot-20151201:1.16
	sid-snapshot-20151101:1.16
	cgen-snapshot-20151101:1.16
	sid-snapshot-20151001:1.16
	cgen-snapshot-20151001:1.16
	sid-snapshot-20150901:1.16
	cgen-snapshot-20150901:1.16
	sid-snapshot-20150801:1.16
	cgen-snapshot-20150801:1.16
	sid-snapshot-20150701:1.16
	cgen-snapshot-20150701:1.16
	sid-snapshot-20150601:1.16
	cgen-snapshot-20150601:1.16
	sid-snapshot-20150501:1.16
	cgen-snapshot-20150501:1.16
	sid-snapshot-20150401:1.16
	cgen-snapshot-20150401:1.16
	sid-snapshot-20150301:1.16
	cgen-snapshot-20150301:1.16
	sid-snapshot-20150201:1.16
	cgen-snapshot-20150201:1.16
	sid-snapshot-20150101:1.16
	cgen-snapshot-20150101:1.16
	sid-snapshot-20141201:1.16
	cgen-snapshot-20141201:1.16
	sid-snapshot-20141101:1.16
	cgen-snapshot-20141101:1.16
	sid-snapshot-20141001:1.16
	cgen-snapshot-20141001:1.16
	sid-snapshot-20140901:1.16
	cgen-snapshot-20140901:1.16
	sid-snapshot-20140801:1.16
	cgen-snapshot-20140801:1.16
	sid-snapshot-20140701:1.16
	cgen-snapshot-20140701:1.16
	sid-snapshot-20140601:1.16
	cgen-snapshot-20140601:1.16
	sid-snapshot-20140501:1.16
	cgen-snapshot-20140501:1.16
	sid-snapshot-20140401:1.16
	cgen-snapshot-20140401:1.16
	sid-snapshot-20140301:1.16
	cgen-snapshot-20140301:1.16
	sid-snapshot-20140201:1.16
	cgen-snapshot-20140201:1.16
	sid-snapshot-20140101:1.16
	cgen-snapshot-20140101:1.16
	sid-snapshot-20131201:1.16
	cgen-snapshot-20131201:1.16
	sid-snapshot-20131101:1.16
	cgen-snapshot-20131101:1.16
	sid-snapshot-20131001:1.16
	cgen-snapshot-20131001:1.16
	sid-snapshot-20130901:1.16
	cgen-snapshot-20130901:1.16
	sid-snapshot-20130801:1.16
	cgen-snapshot-20130801:1.16
	sid-snapshot-20130701:1.16
	cgen-snapshot-20130701:1.16
	sid-snapshot-20130601:1.16
	cgen-snapshot-20130601:1.16
	sid-snapshot-20130501:1.16
	cgen-snapshot-20130501:1.16
	sid-snapshot-20130401:1.16
	cgen-snapshot-20130401:1.16
	sid-snapshot-20130301:1.16
	cgen-snapshot-20130301:1.16
	sid-snapshot-20130201:1.16
	cgen-snapshot-20130201:1.16
	sid-snapshot-20130101:1.16
	cgen-snapshot-20130101:1.16
	sid-snapshot-20121201:1.16
	cgen-snapshot-20121201:1.16
	sid-snapshot-20121101:1.16
	cgen-snapshot-20121101:1.16
	sid-snapshot-20121001:1.16
	cgen-snapshot-20121001:1.16
	sid-snapshot-20120901:1.16
	cgen-snapshot-20120901:1.16
	sid-snapshot-20120801:1.16
	cgen-snapshot-20120801:1.16
	sid-snapshot-20120701:1.16
	cgen-snapshot-20120701:1.16
	sid-snapshot-20120601:1.16
	cgen-snapshot-20120601:1.16
	sid-snapshot-20120501:1.16
	cgen-snapshot-20120501:1.16
	sid-snapshot-20120401:1.16
	cgen-snapshot-20120401:1.16
	sid-snapshot-20120301:1.16
	cgen-snapshot-20120301:1.16
	sid-snapshot-20120201:1.16
	cgen-snapshot-20120201:1.16
	sid-snapshot-20120101:1.16
	cgen-snapshot-20120101:1.16
	sid-snapshot-20111201:1.16
	cgen-snapshot-20111201:1.16
	sid-snapshot-20111101:1.16
	cgen-snapshot-20111101:1.16
	sid-snapshot-20111001:1.16
	cgen-snapshot-20111001:1.16
	sid-snapshot-20110901:1.16
	cgen-snapshot-20110901:1.16
	sid-snapshot-20110801:1.16
	cgen-snapshot-20110801:1.16
	sid-snapshot-20110701:1.16
	cgen-snapshot-20110701:1.16
	sid-snapshot-20110601:1.16
	cgen-snapshot-20110601:1.16
	sid-snapshot-20110501:1.16
	cgen-snapshot-20110501:1.16
	sid-snapshot-20110401:1.16
	cgen-snapshot-20110401:1.16
	sid-snapshot-20110301:1.16
	cgen-snapshot-20110301:1.16
	sid-snapshot-20110201:1.16
	cgen-snapshot-20110201:1.16
	sid-snapshot-20110101:1.16
	cgen-snapshot-20110101:1.16
	sid-snapshot-20101201:1.16
	cgen-snapshot-20101201:1.16
	sid-snapshot-20101101:1.16
	cgen-snapshot-20101101:1.16
	sid-snapshot-20101001:1.16
	cgen-snapshot-20101001:1.16
	sid-snapshot-20100901:1.16
	cgen-snapshot-20100901:1.16
	sid-snapshot-20100801:1.16
	cgen-snapshot-20100801:1.16
	sid-snapshot-20100701:1.16
	cgen-snapshot-20100701:1.16
	sid-snapshot-20100601:1.16
	cgen-snapshot-20100601:1.16
	sid-snapshot-20100501:1.16
	cgen-snapshot-20100501:1.16
	sid-snapshot-20100401:1.16
	cgen-snapshot-20100401:1.16
	sid-snapshot-20100301:1.16
	cgen-snapshot-20100301:1.16
	sid-snapshot-20100201:1.16
	cgen-snapshot-20100201:1.16
	sid-snapshot-20100101:1.16
	cgen-snapshot-20100101:1.16
	sid-snapshot-20091201:1.16
	cgen-snapshot-20091201:1.16
	sid-snapshot-20091101:1.14
	cgen-snapshot-20091101:1.14
	sid-snapshot-20091001:1.13
	cgen-snapshot-20091001:1.13
	arc-sim-20090309:1.6
	sid-snapshot-20090901:1.11
	cgen-snapshot-20090901:1.11
	sid-snapshot-20090801:1.10
	cgen-snapshot-20090801:1.10
	sid-snapshot-20090701:1.10
	cgen-snapshot-20090701:1.10
	dje-cgen-play1-branch:1.10.0.2
	dje-cgen-play1-branchpoint:1.10
	cgen-1_1-branch:1.8.0.2
	cgen-1_1-branchpoint:1.8
	sid-snapshot-20090601:1.6
	cgen-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	cgen-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	cgen-snapshot-20090401:1.6
	arc-insight_6_8-branch:1.6.0.4
	arc-insight_6_8-branchpoint:1.6
	sid-snapshot-20090301:1.6
	cgen-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	cgen-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	cgen-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	cgen-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	cgen-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	cgen-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	cgen-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	cgen-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	cgen-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	cgen-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	cgen-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	cgen-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	cgen-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	cgen-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	cgen-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	cgen-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	cgen-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	cgen-snapshot-20071001:1.6
	msnyder-fork-checkpoint-branch:1.6.0.2
	msnyder-fork-checkpoint-branchpoint:1.6;
locks; strict;
comment	@# @;


1.16
date	2009.11.12.05.33.53;	author devans;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.03.16.24.01;	author devans;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.26.00.56.34;	author devans;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.23.22.30.19;	author devans;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.12.17.34.15;	author devans;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.12.22.33.37;	author devans;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.22.07.02.36;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.18.18.17.50;	author devans;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2009.06.15.05.00.26;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.08.16.19.35;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.10.21.22.02;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.04.20.22.49;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.15.07.52.36;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	;

1.8.2.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;


desc
@@


1.16
log
@	* html.scm (gen-insn-docs): Add logging message.
@
text
@; CPU documentation generator, html output
; Copyright (C) 2003, 2009 Doug Evans
; This file is part of CGEN.  See file COPYING.CGEN for details.
;
; TODO:
; - assumes names, comments, etc. don't interfere with html.
;   Just like in generation of C there are routines to C-ize symbols,
;   we need to pass output through an html-izer.
; - make generated html more readable, e.g. more indentation
; - should really print the semantics in pseudo-C, a much better form for
;   the intended audience
; - registers that have multiple independent fields (like x86 eflags)
;   need to be printed like instruction formats are
; - uses some deprecated html, use css at very least
; - multi-ifields ok?
; - mapping from operands to h/w isn't as clear as it needs to be
; - for insn formats, if field is large consider printing "n ... m",
;   would want "n" left justified and "m" right justified though
; - for insn formats, consider printing them better,
;   e.g. maybe generate image and include that instead
; - need ability to specify more prose for each architecture
; - assembler support
; - need to add docs to website that can be linked to here, rather than
;   including generic cgen documentation here
; - function units, timing, etc.
; - instruction framing

; Global state variables.

; Specify which application.
(set! APPLICATION 'DOC)

; String containing copyright text.
(define CURRENT-COPYRIGHT #f)

; String containing text defining the package we're generating code for.
(define CURRENT-PACKAGE #f)

(define copyright-doc
  (cons "\
THIS FILE IS MACHINE GENERATED WITH CGEN.

See the input .cpu file(s) for copyright information.
"
	"\
"))

; Initialize the options.

(define (option-init!)
  (set! CURRENT-COPYRIGHT copyright-doc)
  (set! CURRENT-PACKAGE package-cgen)
  *UNSPECIFIED*
)

; Handle an option passed in from the command line.

(define (option-set! name value)
  (case name
    ((copyright) (cond ((equal?  value '("doc"))
			(set! CURRENT-COPYRIGHT copyright-doc))
		       (else (error "invalid copyright value" value))))
    ((package) (cond ((equal?  value '("cgen"))
		      (set! CURRENT-PACKAGE package-cgen))
		     (else (error "invalid package value" value))))
    (else (error "unknown option" name))
    )
  *UNSPECIFIED*
)

; Misc utilities.

; Return COPYRIGHT, with FILE-DESC as the first line
; and PACKAGE as the name of the package which the file belongs in.
; COPYRIGHT is a pair of (header . trailer).

(define (gen-html-copyright file-desc copyright package)
  (string-append "<! " file-desc "\n\n"
		 (car copyright)
		 "\n" package "\n"
		 (cdr copyright)
		 "\n>\n\n")
)

; KIND is one of "Architecture" or "Instruction".
; TODO: Add author arg so all replies for this arch go to right person.

(define (gen-html-header kind)
  (let* ((arch (symbol->string (current-arch-name)))
	 (ARCH (string-upcase arch)))
    (string-list
     "<!doctype html public \"-//w3c//dtd html 4.0 transitional//en\">\n"
     "<html>\n"
     "<head>\n"
     "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n"
     "  <meta name=\"description\" content=\"" ARCH " " kind " Documentation\">\n"
     "  <meta name=\"language\" content=\"en-us\">\n"
     "  <meta name=\"owner\" content=\"dje@@sebabeach.org (Doug Evans)\">\n"
     "  <meta name=\"reply-to\" content=\"dje@@sebabeach.org (Doug Evans)\">\n"
     "  <title>" ARCH " " kind " Documentation</title>\n"
     "</head>\n"
     "<body bgcolor=\"#F0F0F0\" TEXT=\"#003333\" LINK=\"#FF0000\" VLINK=\"#444444\" alink=\"#000000\">\n"
     )
    )
)

(define (gen-html-trailer)
  (string-list
   "\n"
   "<p><hr><p>\n"
   "This documentation was machine generated from the cgen cpu description\n"
   "files for this architecture.\n"
   "<br>\n"
   "<a href=\"http://sources.redhat.com/cgen/\">http://sources.redhat.com/cgen/</a>\n"
   "</body>\n"
   "</html>\n"
   )
)

; INSN-FILE is the name of the .html file containing instruction definitions.

(define (gen-table-of-contents insn-file)
  (let ((ARCH (string-upcase (symbol->string (current-arch-name)))))
    (string-list
     "<h1>\n"
     (string-append ARCH " Architecture Documentation")
     "</h1>\n"
     "\n"
     "<br>\n"
     "DISCLAIMER: This documentation is derived from the cgen cpu description\n"
     "of this architecture, and does not represent official documentation\n"
     "of the chip maker.\n"
     "<p><hr><p>\n"
     "\n"
     "<ul>\n"
     "<li><a href=\"#arch\">Architecture</a></li>\n"
     "<li><a href=\"#machines\">Machine variants</a></li>\n"
     "<li><a href=\"#models\">Model variants</a></li>\n"
     "<li><a href=\"#registers\">Registers</a></li>\n"
     "<li><a href=\"" insn-file "#insns\">Instructions</a></li>\n"
     "<li><a href=\"" insn-file "#macro-insns\">Macro instructions</a></li>\n"
     "<li><a href=\"#assembler\">Assembler supplemental</a></li>\n"
     "</ul>\n"
     "<br>\n"
     ; TODO: Move this to the cgen website, and include a link here.
     "In cgen-parlance, an architecture consists of machines and models.\n"
     "A `machine' is the specification of a variant of the architecture,\n"
     "and a `model' is the implementation of that specification.\n"
     "Typically there is a one-to-one correspondance between machine and model.\n"
     "The distinction allows for separation of what application programs see\n"
     "(the machine), and how to tune for the chip (what the compiler sees).\n"
     "<br>\n"
     "A \"cpu family\" is a cgen concoction to help organize the generated code.\n"
     "Chip variants that are quite dissimilar can be treated separately by the\n"
     "generated code even though they're both members of the same architecture.\n"
      ))
)

; Utility to print a list entry for NAME/COMMENT, kind KIND
; which is a link to the entry's description.
; KIND is one of "mach", "model", etc.

(define (gen-list-entry name comment kind)
  (string-append "<li>"
		 "<a href=\"#" kind "-" (->string name) "\">"
		 (->string name)
		 " - "
		 comment
		 "</a>\n"
		 "</li>\n")
)

; Cover-fn to gen-list-entry for use with objects.

(define (gen-obj-list-entry o kind)
  (gen-list-entry (obj:name o) (obj:comment o) kind)
)

; Utility to print the header for the description of TEXT.

(define (gen-doc-header text anchor-name)
  (string-list
   "<a name=\"" anchor-name "\"></a>\n"
   "<h3>" text "</h3>\n"
   )
)

; Cover-fn to gen-doc-header for use with objects.
; KIND is one of "mach", "model", etc.

(define (gen-obj-doc-header o kind)
  (gen-doc-header (string-append (obj:str-name o) " - " (obj:comment o))
		  (string-append kind "-" (obj:str-name o)))
)

; Architecture page.

(define (gen-cpu-intro cpu)
  (string-list
   "<li>\n"
   (obj:str-name cpu) " - " (obj:comment cpu) "\n"
   "<br>\n"
   "<br>\n"
   "Machines:\n"
   "<ul>\n"
   (string-list-map gen-mach-intro
		    (alpha-sort-obj-list (machs-for-cpu cpu)))
   "</ul>\n"
   "</li>\n"
   "<br>\n"
   )
)

(define (gen-mach-intro mach)
  (string-list
   "<li>\n"
   (obj:str-name mach) " - " (obj:comment mach) "\n"
   "<br>\n"
   "<br>\n"
   "Models:\n"
   "<ul>\n"
   (string-list-map gen-model-intro
		    (alpha-sort-obj-list (models-for-mach mach)))
   "</ul>\n"
   "</li>\n"
   "<br>\n"
   )
)

(define (gen-model-intro model)
  (string-list
   "<li>\n"
   (obj:str-name model) " - " (obj:comment model) "\n"
   "<br>\n"
   "</li>\n"
   )
)

(define (gen-isa-intro isa)
  (string-list
   "<li>\n"
   (obj:str-name isa) " - " (obj:comment isa) "\n"
   "<br>\n"
   ; FIXME: wip
   ; I'd like to include the .cpu file tag here, but using English text
   ; feels more appropriate.  Having both is excessive.
   ; Pick one, and have a link to its description/tag.
   ; I'm leaning toward using the cgen tag here as we'll probably want
   ; access (via an html tag) to more than one-liner descriptions.
   "<ul>\n"
   "<li>default-insn-word-bitsize: "
   (number->string (isa-default-insn-word-bitsize isa))
   "</li>\n"
   "<br>\n"
   "<li>default-insn-bitsize: "
   (number->string (isa-default-insn-bitsize isa))
   "</li>\n"
   "<br>\n"
   "<li>base-insn-bitsize: "
   (number->string (isa-base-insn-bitsize isa))
   "</li>\n"
   "<br>\n"
   "<li>decode-assist: "
   (string-map (lambda (n) (string-append " " (number->string n)))
	       (isa-decode-assist isa))
   "</li>\n"
   "<br>\n"
   "<li>decode-splits: "
   (string-map (lambda (n) (string-append " " (number->string n)))
	       (isa-decode-splits isa))
   "</li>\n"
   "<br>\n"
   (if (> (isa-liw-insns isa) 1)
       (string-append "<li>liw-insns: "
		      (number->string (isa-liw-insns isa))
		      "</li>\n"
		      "<br>\n")
       "")
   (if (> (isa-parallel-insns isa) 1)
       (string-append "<li>parallel-insns: "
		      (number->string (isa-parallel-insns isa))
		      "</li>\n"
		      "<br>\n")
       "")
   (if (isa-condition isa)
       (string-append "<li>condition-field: "
		      (symbol->string (car (isa-condition isa)))
		      "</li>\n"
		      "<br>\n"
		      "<li>condition:\n"
		      "<font size=+2>\n"
		      "<pre>" ; no trailing newline here on purpose
		      (with-output-to-string
			(lambda ()
			  (pretty-print (cadr (isa-condition isa)))))
		      "</pre></font>\n"
		      "</li>\n"
		      "<br>\n")
       "")
   (if (isa-setup-semantics isa)
       (string-append "<li>setup-semantics:\n"
		      "<font size=+2>\n"
		      "<pre>" ; no trailing newline here on purpose
		      (with-output-to-string
			(lambda ()
			  (pretty-print (cdr (isa-setup-semantics isa)))))
		      "</pre></font>\n"
		      "</li>\n"
		      "<br>\n")
       "")
   "</ul>\n"
   "</li>\n"
   )
)

(define (gen-arch-intro)
  ; NOTE: This includes cpu families.
  (let ((ARCH (string-upcase (symbol->string (current-arch-name))))
	(isas (current-isa-list))
	(cpus (current-cpu-list))
	)
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"arch\"></a>\n"
     "<h2>" ARCH " Architecture</h2>\n"
     "<p>\n"
     "This section describes various things about the cgen description of\n"
     "the " ARCH " architecture.  Familiarity with cgen cpu descriptions\n"
     "is assumed.\n"
     "<p>\n"
     "Bit number orientation (arch.lsb0?): "
     (if (current-arch-insn-lsb0?) "lsb = 0" "msb = 0")
     "\n"
     "<p>\n"
     "<h3>ISA description</h3>\n"
     ; NOTE: For the normal case there's only one isa, thus specifying it in
     ; a list is excessive.  Later.
     "<p>\n"
     "<ul>\n"
     (string-list-map gen-isa-intro
		      (alpha-sort-obj-list isas))
     "</ul>\n"
     "<p>\n"
     "<h3>CPU Families</h3>\n"
     "<ul>\n"
     (string-list-map gen-cpu-intro
		      (alpha-sort-obj-list cpus))
     "</ul>\n"
     ))
)

; Machine page.

(define (gen-machine-doc-1 mach)
  (string-list
   (gen-obj-doc-header mach "mach")
   "<ul>\n"
   "<li>\n"
   "bfd-name: "
   (mach-bfd-name mach)
   "\n"
   "</li>\n"
   "<li>\n"
   "isas: "
   (string-map (lambda (isa)
		 (string-append " " (obj:str-name isa)))
	       (mach-isas mach))
   "\n"
   "</li>\n"
   "</ul>\n"
   )
)

(define (gen-machine-docs)
  (let ((machs (alpha-sort-obj-list (current-mach-list))))
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"machines\"></a>\n"
     "<h2>Machine variants</h2>\n"
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "mach"))
		 machs)
     "</ul>\n"
     (string-list-map gen-machine-doc-1 machs)
     ))
)

; Model page.

(define (gen-model-doc-1 model)
  (string-list
   (gen-obj-doc-header model "model")
   "<ul>\n"
   "</ul>\n"
   )
)

(define (gen-model-docs)
  (let ((models (alpha-sort-obj-list (current-model-list))))
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"models\"></a>\n"
     "<h2>Model variants</h2>\n"
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "model"))
		 models)
     "</ul>\n"
     (string-list-map gen-model-doc-1 models)
     ))
)

; Register page.
;
; TODO: Provide tables of regs for each mach.

; Subroutine of gen-reg-doc-1 to simplify it.
; Generate a list of names of registers in register array REG.
; The catch is that we want to shrink r0,r1,r2,...,r15 to r0...r15.

(define (gen-pretty-reg-array-names reg)
  ; We currently only support arrays of rank 1 (vectors).
  (if (!= (hw-rank reg) 1)
      (error "gen-pretty-reg-array-names: unsupported rank" (hw-rank reg)))
  (let ((indices (hw-indices reg)))
    (if (class-instance? <keyword> indices)
	(let ((values (kw-values indices)))
	  (string-list
	   "<br>\n"
	   "names:\n"
	   "<br>\n"
	   "<table frame=border border=2>\n"
	   "<tr>\n"
	   (string-list-map (lambda (v)
			      (string-list "<tr>\n"
					   "<td>"
					   (car v)
					   "</td>\n"
					   "<td>"
					   (number->string (cadr v))
					   "</td>\n"
					   "</tr>\n"))
			    values)))
	""))
)

(define (gen-reg-doc-1 reg)
  (string-list
   (gen-obj-doc-header reg "reg")
   "<ul>\n"
   "<li>\n"
   "machines: "
   (string-map (lambda (mach)
		 (string-append " " (symbol->string mach)))
	       (obj-attr-value reg 'MACH))
   "\n"
   "</li>\n"
   "<li>\n"
   "bitsize: "
   (number->string (hw-bits reg))
   "\n"
   "</li>\n"
   (if (not (hw-scalar? reg))
       (string-list "<li>\n"
		    "array: "
		    (string-map (lambda (dim)
				  (string-append "[" (number->string dim) "]"))
				(hw-shape reg))
		    "\n"
		    (gen-pretty-reg-array-names reg)
		    "</li>\n")
       "")
   "</ul>\n"
   )
)

(define (gen-register-docs)
  (let ((regs (alpha-sort-obj-list (find register? (current-hw-list)))))
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"registers\"></a>\n"
     "<h2>Registers</h2>\n"
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "reg"))
		 regs)
     "</ul>\n"
     (string-list-map gen-reg-doc-1 regs)
     ))
)

; Instruction page.

; Generate a diagram typically used to display instruction fields.
; OPERANDS is a list of numbers (for constant valued ifields)
; or operand names.

(define (gen-iformat-table-1 bitnums names operands)
  (string-list
   "<table frame=border border=2>\n"
   "<tr>\n"
   (string-list-map (lambda (b)
		      (string-list "<td>\n"
				   (string-map (lambda (n)
						 (string-append " "
								(number->string n)))
					       b)
				   "\n"
				   "</td>\n"))
		    bitnums)
   "</tr>\n"
   "<tr>\n"
   (string-list-map (lambda (n)
		      (string-list "<td>\n"
				   n
				   "\n"
				   "</td>\n"))
		    names)
   "</tr>\n"
   "<tr>\n"
   (string-list-map (lambda (o)
		      (string-list "<td>\n"
				   (if (number? o)
				       (string-append "0x"
						      (number->string o 16))
				       o)
				   "\n"
				   "</td>\n"))
		    operands)
   "</tr>\n"
   "</table>\n")
)

; Compute the list of field bit-numbers for each field.

(define (get-ifield-bitnums widths lsb0?)
  (let* ((total-width (apply + widths))
	 (bitnums (iota total-width
			(if lsb0? (1- total-width) 0)
			(if lsb0? -1 1))))
    (let loop ((result '()) (widths widths) (bitnums bitnums))
      (if (null? widths)
	  (reverse! result)
	  (loop (cons (list-take (car widths) bitnums)
		      result)
		(cdr widths)
		(list-drop (car widths) bitnums)))))
)

; Generate a diagram typically used to display instruction fields.

(define (gen-iformat-table insn)
  (let* ((lsb0? (current-arch-insn-lsb0?))
	 (sorted-iflds (sort-ifield-list (insn-iflds insn) (not lsb0?))))
    (let ((widths (map ifld-length sorted-iflds))
	  (names (map obj:name sorted-iflds))
	  (operands (map (lambda (f)
			   (if (ifld-constant? f)
			       (ifld-get-value f)
			       (obj:name (ifld-get-value f))))
			 sorted-iflds)))
      (gen-iformat-table-1 (get-ifield-bitnums widths lsb0?) names operands)))
)

(define (gen-insn-doc-1 insn)
  (string-list
   (gen-obj-doc-header insn "insn")
   "<ul>\n"
   "<li>\n"
   "machines: "
   (string-map (lambda (mach)
		 (string-append " " (symbol->string mach)))
	       (obj-attr-value insn 'MACH))
   "\n"
   "</li>\n"
   "<br>\n"
   "<li>\n"
   "syntax: "
   "<tt><font size=+2>"
   (insn-syntax insn)
   "</font></tt>\n"
   "</li>\n"
   "<br>\n"
   "<li>\n"
   "format:\n"
   (gen-iformat-table insn)
   "</li>\n"
   "<br>\n"
   (if (insn-ifield-assertion insn)
       (string-append "<li>\n"
		      "instruction field constraint:\n"
		      "<font size=+2>\n"
		      "<pre>" ; no trailing newline here on purpose
		      (with-output-to-string
			(lambda ()
			  (pretty-print (insn-ifield-assertion insn))))
		      "</pre></font>\n"
		      "</li>\n"
		      "<br>\n")
       "")
   "<li>\n"
   "semantics:\n"
   "<font size=+2>\n"
   "<pre>" ; no trailing newline here on purpose
   (with-output-to-string
     (lambda ()
       ; Print the const-folded semantics, computed in `tmp'.
       (pretty-print (rtx-trim-for-doc (insn-tmp insn)))))
   "</pre></font>\n"
   "</li>\n"
   ; "<br>\n" ; not present on purpose
   (if (not (null? (insn-timing insn)))
       (string-list "<li>\n"
		    "execution unit(s):\n"
		    "<br>\n"
		    "<br>\n"
		    "<ul>\n"
		    (string-list-map
		     (lambda (t)
		       (string-append "<li>\n"
				      (->string (car t))
				      ": "
				      (string-map (lambda (u)
						    (string-append " "
								   (obj:str-name (iunit:unit u))))
						  (timing:units (cdr t)))
				      "\n"
				      "</li>\n"))
		     ; ignore timings for discarded
		     (find (lambda (t) (not (null? (cdr t))))
			   (insn-timing insn)))
		    "</ul>\n"
		    "</li>\n"
		    "<br>\n")
       "")
   "</ul>\n"
   )
)

(define (gen-insn-doc-list mach name comment insns)
  (string-list
   "<hr>\n"
   (gen-doc-header (string-append (obj:str-name mach)
				  " "
				  (->string name)
				  (if (string=? comment "")
				      ""
				      (string-append " - " comment)))
		   (string-append "mach-insns-"
				  (obj:str-name mach)
				  "-"
				  (->string name)))
   "<ul>\n"
   (string-list-map (lambda (o)
		      (gen-obj-list-entry o "insn"))
		    insns)
   "</ul>\n"
   )
)

; Return boolean indicating if INSN sets the pc.

(define (insn-sets-pc? insn)
  (or (obj-has-attr? insn 'COND-CTI)
      (obj-has-attr? insn 'UNCOND-CTI)
      (obj-has-attr? insn 'SKIP-CTI))
)

; Traverse the semantics of INSN and return a list of symbols
; indicating various interesting properties we find.
; This is taken from `semantic-attrs' which does the same thing to find the
; CTI attributes.
; The result is list of properties computed from the semantics.
; The possibilities are: MEM, FPU.

(define (get-insn-properties insn)
  (logit 2 "Collecting properties of insn " (obj:name insn) " ...\n")

  (let*
      ((context #f) ; ??? do we need a better context?

       ; List of attributes computed from SEM-CODE-LIST.
       ; The first element is just a dummy so that append! always works.
       (sem-attrs (list #f))

       ; Called for expressions encountered in SEM-CODE-LIST.
       (process-expr!
	(lambda (rtx-obj expr parent-expr op-pos tstate appstuff)
	  (case (car expr)

	    ((operand) (if (memory? (op:type (current-op-lookup (rtx-arg1 expr)
								(obj-isa-list insn))))
			   ; Don't change to '(MEM), since we use append!.
			   (append! sem-attrs (list 'MEM)))
		       (if (mode-float? (mode:lookup (rtx-mode expr)))
			   ; Don't change to '(FPU), since we use append!.
			   (append! sem-attrs (list 'FPU)))
		       )

	    ((mem) (append! sem-attrs (list 'MEM)))

	    ; If this is a syntax expression, the operands won't have been
	    ; processed, so tell our caller we want it to by returning #f.
	    ; We do the same for non-syntax expressions to keep things
	    ; simple.  This requires collaboration with the traversal
	    ; handlers which are defined to do what we want if we return #f.
	    (else #f))))
       )

    ; Traverse the expression recording the attributes.
    ; We just want the side-effects of computing various properties
    ; so we discard the result.

    (rtx-traverse context
		  insn
		  ; Simplified semantics recorded in the `tmp' field.
		  (insn-tmp insn)
		  process-expr!
		  #f)

    ; Drop dummy first arg and remove duplicates.
    (nub (cdr sem-attrs) identity))
)

; Return boolean indicating if PROPS indicates INSN references memory.

(define (insn-refs-mem? insn props)
  (->bool (memq 'MEM props))
)

; Return boolean indicating if PROPS indicates INSN uses the fpu.

(define (insn-uses-fpu? insn props)
  (->bool (memq 'FPU props))
)

; Ensure INSN has attribute IDOC.
; If not specified, guess(?).

(define (guess-insn-idoc-attr! insn)
  (if (not (obj-attr-present? insn 'IDOC))
    (let ((attr #f)
	  (props (get-insn-properties insn)))
      ; Try various heuristics.
      (if (and (not attr)
	       (insn-sets-pc? insn))
	  (set! attr 'BR))
      (if (and (not attr)
	       (insn-refs-mem? insn props))
	  (set! attr 'MEM))
      (if (and (not attr)
	       (insn-uses-fpu? insn props))
	  (set! attr 'FPU))
      ; If nothing else works, assume ALU.
      (if (not attr)
	  (set! attr 'ALU))
      (obj-cons-attr! insn (enum-attr-make 'IDOC attr))))
  *UNSPECIFIED*
)

; Return subset of insns in IDOC category CAT-NAME.

(define (get-insns-for-category insns cat-name)
  (find (lambda (insn)
	  (obj-has-attr-value-no-default? insn 'IDOC cat-name))
	insns)
)

; CATEGORIES is a list of "enum value" elements for each category.
; See <enum-attribute> for the definition.
; INSNS is already alphabetically sorted and selected for just MACH.

(define (gen-categories-insn-lists mach categories insns)
  (string-list
   ; generate a table of insns for each category
   (string-list-map (lambda (c)
		      (let ((cat-insns (get-insns-for-category insns (enum-val-name c)))
			    (comment (enum-val-comment c)))
			(if (null? cat-insns)
			    ""
			    (gen-insn-doc-list mach (enum-val-name c) comment cat-insns))))
		    categories)
   ; lastly, the alphabetical list
   (gen-insn-doc-list mach (obj:name mach) (obj:comment mach) insns)
   )
)

; CATEGORIES is a list of "enum value" elements for each category.
; See <enum-attribute> for the definition.
; INSNS is already alphabetically sorted and selected for just MACH.

(define (gen-insn-categories mach categories insns)
  (string-list
   "<ul>\n"
   (string-list-map (lambda (c)
		      (let ((cat-insns (get-insns-for-category insns (enum-val-name c)))
			    (comment (enum-val-comment c)))
			(if (null? cat-insns)
			    ""
			    (string-list
			     "<li><a href=\"#mach-insns-"
			     (obj:str-name mach)
			     "-"
			     (->string (enum-val-name c))
			     "\">"
			     (->string (enum-val-name c))
			     (if (string=? comment "")
				 ""
				 (string-append " - " comment))
			     "</a></li>\n"
			     ))))
		    categories)
   "<li><a href=\"#mach-insns-"
   (obj:str-name mach)
   "-"
   (obj:str-name mach)
   "\">alphabetically</a></li>\n"
   "</ul>\n"
   )
)

; ??? There's an inefficiency here, we compute insns for each mach for each
; category twice.  Left for later if warranted.

(define (gen-insn-docs)
  ; First simplify the semantics, e.g. do constant folding.
  ; For insns built up from macros, often this will remove a lot of clutter.
  (for-each (lambda (insn)
	      (logit 2 "Simplifying the rtl for insn " (obj:name insn) " ...\n")
	      (insn-set-tmp! insn (rtx-simplify-insn #f insn)))
	    (current-insn-list))

  (let ((machs (current-mach-list))
	(insns (alpha-sort-obj-list (current-insn-list)))
	(categories (attr-values (current-attr-lookup 'IDOC))))
    ; First, install IDOC attributes for insns that don't specify one.
    (for-each guess-insn-idoc-attr! insns)
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"insns\"></a>\n"
     "<h2>Instructions</h2>\n"
     "Instructions for each machine:\n"
     "<ul>\n"
;     (string-map (lambda (o)
;		   (gen-obj-list-entry o "mach-insns"))
;		 machs)
     (string-list-map (lambda (m)
			(let ((mach-insns (find (lambda (insn)
						  (mach-supports? m insn))
						insns)))
			  (string-list "<li>"
				       (obj:str-name m)
				       " - "
				       (obj:comment m)
				       "</li>\n"
				       (gen-insn-categories m categories mach-insns)
			   )))
		      machs)
     "</ul>\n"
;     (string-list-map (lambda (m)
;			(gen-insn-doc-list m insns))
;		      machs)
     (string-list-map (lambda (m)
			(let ((mach-insns (find (lambda (insn)
						  (mach-supports? m insn))
						insns)))
			  (gen-categories-insn-lists m categories mach-insns)))
		      machs)
     "<hr>\n"
     "<h2>Individual instructions descriptions</h2>\n"
     "<br>\n"
     (string-list-map gen-insn-doc-1 insns)
     ))
)

; Macro-instruction page.

(define (gen-macro-insn-doc-1 minsn)
  (string-list
   (gen-obj-doc-header minsn "macro-insn")
   "<ul>\n"
   "<li>\n"
   "syntax: "
   "<tt><font size=+2>"
   (minsn-syntax minsn)
   "</font></tt>\n"
   "</li>\n"
   "<br>\n"
   "<li>\n"
   "transformation:\n"
   "<font size=+2>\n"
   "<pre>" ; no trailing newline here on purpose
   (with-output-to-string
     (lambda ()
       (pretty-print (minsn-expansions minsn))))
   "</pre></font>\n"
   "</li>\n"
   "</ul>\n"
   )
)

(define (gen-macro-insn-doc-list mach)
  (let ((minsns (find (lambda (minsn)
			(mach-supports? mach minsn))
		      (current-minsn-list))))
    (string-list
     (gen-obj-doc-header mach "mach-macro-insns")
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "macro-insn"))
		 minsns)
     "</ul>\n"
     ))
)

(define (gen-macro-insn-docs)
  (let ((machs (current-mach-list))
	(minsns (alpha-sort-obj-list (current-minsn-list))))
    (string-list
     "\n"
     "<hr>\n"
     "<a name=\"macro-insns\"></a>\n"
     "<h2>Macro Instructions</h2>\n"
     "Macro instructions for each machine:\n"
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "mach-macro-insns"))
		 machs)
     "</ul>\n"
     (string-list-map gen-macro-insn-doc-list machs)
     "<p>\n"
     "<h2>Individual macro-instructions descriptions</h2>\n"
     "<br>\n"
     (string-list-map gen-macro-insn-doc-1 minsns)
     ))
)

; Assembler page.

(define (gen-asm-docs)
  (string-list
   "\n"
   "<hr>\n"
   "<a name=\"assembler\"></a>\n"
   "<h2>Assembler supplemental</h2>\n"
   )
)

; Documentation init,finish,analyzer support.

; Initialize any doc specific things before loading the .cpu file.

(define (doc-init!)
  (desc-init!)
  (mode-set-biggest-word-bitsizes!)
  *UNSPECIFIED*
)

; Finish any doc specific things after loading the .cpu file.
; This is separate from analyze-data! as cpu-load performs some
; consistency checks in between.

(define (doc-finish!)
  (desc-finish!)
  *UNSPECIFIED*
)

; Compute various needed globals and assign any computed fields of
; the various objects.  This is the standard routine that is called after
; a .cpu file is loaded.

(define (doc-analyze!)
  (desc-analyze!)

  ; If the IDOC attribute isn't defined, provide a default one.
  (if (not (current-attr-lookup 'IDOC))
      (define-attr
	'(for insn)
	'(type enum)
	'(name IDOC)
	'(comment "insn kind for documentation")
	'(attrs META)
	'(values
	  (MEM - () "Memory")
	  (ALU - () "ALU")
	  (FPU - () "FPU")
	  (BR - () "Branch")
	  (MISC - () "Miscellaneous"))))

  ; Initialize the rtl->c translator.
  (rtl-c-config!)

  ; Only include semantic operands when computing the format tables if we're
  ; generating operand instance tables.
  ; ??? Actually, may always be able to exclude the semantic operands.
  ; Still need to traverse the semantics to derive machine computed attributes.
  (arch-analyze-insns! CURRENT-ARCH
		       #t ; include aliases?
		       #f) ; analyze semantics?

  *UNSPECIFIED*
)

; Top level C code generators

; Set by the -N argument.
(define *insn-html-file-name* "unspecified.html")

(define (cgen.html)
  (logit 1 "Generating " (current-arch-name) ".html ...\n")
  (string-write
   (gen-html-copyright (string-append "Architecture documentation for "
				      (symbol->string (current-arch-name))
				      ".")
		       CURRENT-COPYRIGHT CURRENT-PACKAGE)
   (gen-html-header "Architecture")
   (gen-table-of-contents *insn-html-file-name*)
   gen-arch-intro
   gen-machine-docs
   gen-model-docs
   gen-register-docs
   gen-asm-docs
   gen-html-trailer
   )
)

(define (cgen-insn.html)
  (logit 1 "Generating " (current-arch-name) "-insn.html ...\n")
  (string-write
   (gen-html-copyright (string-append "Instruction documentation for "
				      (symbol->string (current-arch-name))
				      ".")
		       CURRENT-COPYRIGHT CURRENT-PACKAGE)
   (gen-html-header "Instruction")
   gen-insn-docs
   gen-macro-insn-docs
   gen-html-trailer
   )
)

; For debugging.

(define (cgen-all)
  (string-write
   cgen.html
   cgen-insn.html
   )
)
@


1.15
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@d834 1
@


1.14
log
@	Record bitset attributes internally as a list.
	Record rtx attribute values internally as ((rtx-expr)).
	* attr.scm (bitset-attr?): Delete, unused.
	(<bitset-attribute> parse-value): Rewrite.
	(/attr-parse): Rewrite bitset default value processing.
	(/attr-read): Pick out values of scalar attributes to distinguish
	them from bitset values which are a list.
	Fix spelling errors for processing of default values.
	Handle string attributes.
	(bitset-attr->list): Delete, all callers updated.
	(/bitset-attr->charmask): Renamed from bitset-attr->charmask.
	All callers updated.
	(atlist-source-form): Rewrite.
	* hardware.scm (<hardware-base> 'get-isas): Update recognition
	of all isas.
	(hardware-builtin!): Update spec of ISA attribute, (ISA foo,bar)
	-> (ISA foo bar).
	* intrinsics.scm (target:belongs-to-group?): Update, bitset attribute
	values are now lists.
	* mach.scm (def-isa-attr!): Update, bitset attribute values,
	including the default, are now lists.
	(all-isas-attr-value): Result is now a list.
	* doc/rtl.texi: Clean up pass over attribute docs.
@
text
@d696 2
a697 1
	    ((operand) (if (memory? (op:type (current-op-lookup (rtx-arg1 expr))))
@


1.13
log
@	* xc16x.cpu (h-cr): New hardware.
	(muls): Comment out parts that won't compile, add fixme.
	(mulu, divl, divlu, jmpabs, jmpa-, jmprel, jbc, jnbs, callr): Ditto.
	(scxti, scxtmg, scxtm, bclear, bclr18, bset19, bitset, bmov): Ditto.
	(bmovn, band, bor, bxor, bcmp, bfldl, bfldh): Ditto.

	Rewrite rtl processing to require it to be "canonicalized" first,
	and write a full canonicalizer / expression checker.
	Remove all appearances of DFLT in canonical rtl.
	* attr.scm (/attr-eval atval owner): Call rtx-canonicalize,
	then rtx-simplify.
	* iformat.scm (ifmt-analyze) Use canonical semantics.
	* insn (<insn>): New member canonical-semantics.
	* mach.scm (<arch>): New member multi-insns-instantiated?.
	(/instantiate-multi-insns!): New function.
	(/canonicalize-insns!): New function.
	(arch-analyze-insns!): Canonicalize insn semantics before processing
	them.
	* mode.scm (/mode-set-word-params!): New function.
	(mode-void?): New function.
	(mode-compatible?): VOID is compatible with VOID.
	(/mode-word-sizes-defined?): New global.
	(mode-set-word-modes!): Use/set it.
	(mode-ensure-word-sizes-defined): Update.
	(mode-builtin!): New builtin "modes" SYM, INSN, MACH.
	Redo WI/UWI/AI/IAI handling.
	(op:new-mode): No longer accept DFLT.
	(<derived-operand> constructor): Ensure all fields are initialized.
	(<anyof-operand> constructor): Ditto.
	(/derived-parse-ifield-assertion): Delete arg `args'.
	All callers updated.
	* rtl-c.scm (<rtl-c-eval-state>): New member `for-insn?'.
	(rtl-c): Call rtx-canonicalize instead of rtx-compile.
	(rtl-c-expr, rtl-c++): Ditto.
	(/rtl-c-get): Use mode of operand, not containing expression.
	(rtl-c-set-quiet, rtl-c-set-trace): Remove DFLT support.
	(/rtx-use-sem-fn?): Don't check for (insn? owner), check
	estate-for-insn? instead.
	(s-unop): Use mode of expression, not first operand.
	(s-binop, s-binop-with-bit, s-shop, s-cmpop): Ditto.
	(s-sequence): Remove DFLT support.
	(ifield): Use mode of expression, not UINT.
	(pc): Comment out, unused.
	(int-attr): New rtx kind.
	(attr): Deprecate.
	(set, set-quiet): Pass src to rtl-c-set-{trace,quiet} for expansion.
	* rtl-traverse.scm (/rtx-canon-debug?): New global.
	(/make-cstate): New function.
	(/cstate-context, /cstate-outer-expr): New functions.
	(/rtx-canon-error): New function.
	(/rtx-lookup-hw, /rtx-pick-mode, /rtx-pick-mode3, /rtx-pick-op-mode,
	/rtx-get-last-cond-case-rtx): New functions.
	(/rtx-canon-*): New functions.
	(/rtx-canner-table, /rtx-operand-canoners): New globals.
	(/rtx-make-canon-table, /rtx-special-expr-canoners): New functions.
	(/rtx-option, /rtx-option-list?): Rewrite.
	(rtx-munge-mode&options): Replaces /rtx-munge-mode&options.
	Rewritten, all callers updated.
	(/rtx-canon-expr, /rtx-canon): New functions.
	(rtx-canonicalize): Move here from rtl-xform.scm and rewrite.
	(rtx-canonicalize-stmt): New function.
	(tstate-make): Remove arg `set?'.  All callers updated.
	(tstate-new-set?): Delete.
	(/rtx-traverse-options, /rtx-traverse-*mode): Delete,
	moved to /rtx-canon-*.
	(/rtx-traverse-normal-operand): New function.
	(/rtx-traverse-rtx-list): Delete arg `mode', all callers updated.
	(/rtx-traverse-rtx, /rtx-traverse-setrtx,, /rtx-traverse-testrtx,
	/rtx-traverse-condrtx, /rtx-traverse-casertx, /rtx-traverse-locals,
	/rtx-traverse-iteration, /rtx-traverse-env, /rtx-traverse-attrs):
	Ditto.
	(/rtx-traverse-symbol, /rtx-traverse-string, /rtx-traverse-number,
	/rtx-traverse-symornum, /rtx-traverse-object): Delete.
	(/rtx-make-traverser-table): Update.
	(/rtx-traverse-operands): Remove mode processing, now done during
	canonicalization.
	(/rtx-traverse-expr): Delete arg `mode', all callers updated.
	(/rtx-traverse): Ditto.
	(rtx-init-traverser-tables!): New function.
	* rtl-xform (/rtx-verify-no-dflt-modes-expr-fn): New function.
	(rtx-verify-no-dflt-modes): New function.
	(/rtx-simplify-expr-fn): Update, `arg' mode deleted.
	(rtx-simplify-insn): Use insn-canonical-semantics.
	(rtx-canonicalize): Moved to rtl-traverse.scm.
	(/compile-expr-fn, rtx-compile): Delete.
	(/rtx-trim-rtx-list): New function.
	(/rtx-trim-for-doc): Handle set, if.
	* rtl.scm (<rtx-func>): New members result-mode, matchexpr-index.
	(/rtx-valid-mode-types): Update.
	(/rtx-valid-matches): Update.
	(/rtx-find-matchexpr-index): New function.
	(rtx-lookup): Require rtx-kind to be the rtx name.
	(def-rtx-node): New arg result-mode, all callers updated.
	(def-rtx-syntax-node, def-rtx-operand-node): Ditto.
	(rtx-lazy-sem-mode): Delete.
	(/rtx-closure-make): New arg `mode', all callers updated.
	(rtx-make-ifield, rtx-make-operand, rtx-make-local): Ditto.
	(rtx-operand-obj): Rewrite.
	(rtx-make-xop): New functions.
	(/hw): Renamed from `hw', all callers updated.
	Use the correct mode instead of DFLT for the index.
	(rtl-builtin!): Call rtx-init-traversal-tables!.
	(rtl-finish!): Update.
	* rtx-funcs.scm (all rtx functions): New parameter: result-mode.
	Update mode arg-type.
	(pc): Comment out.
	(int-attr): New rtx kind.
	(attr): Deprecate.
	* sem-frags.scm (/frag-hash-compute!): Update, mode arg deleted.
	(/frag-cost-compute!): Ditto.
	* semantics.scm (/build-operand!): Delete args op-name, op.
	New arg op-expr.  All callers updated.
	(/build-mem-operand!): Remove DFLT support.
	(semantic-compile): Update process-expr!, mode arg deleted.
	* sid-cpu.scm (gen-semantic-code): Specify #:for-insn? in
	rtl-c++ calls.
	(/gen-sem-case, /gen-sfrag-code): Ditto.
	* sid.scm (/op-gen-set-trace1): Renamed from /op-gen-set-trace.
	(/op-gen-set-trace): New function.  If not doing profiling,
	call /op-gen-set-quiet.
	* sim-cpu.scm (gen-semantic-code): Specify #:for-insn? in rtl-c calls.
	* utils-gen.scm (/gen-ifld-extract-base): Update call to rtl-c.
	(/gen-ifld-extract-beyond, gen-multi-ifld-extract): Ditto.
	* utils.scm (find-first-index): New function.
	* doc/rtl.texi: Delete docs for `attr'.  Add `int-attr'.
@
text
@d459 1
a459 1
	       (bitset-attr->list (obj-attr-value reg 'MACH)))
d578 1
a578 1
	       (bitset-attr->list (obj-attr-value insn 'MACH)))
@


1.12
log
@	Clean up pass of mode handling.
	Make use of mode name vs <mode> object more consistent and clear.
	* hardware.scm (/keyword-read): Default mode to the mode name,
	not the <mode> object.
	(/hw-parse-indices): Parse mode name and pass mode object to
	<hw-asm> constructor.
	(/hw-parse-values): Ditto.
	(<hw-register> parse!): Pass mode name to /hw-parse-indices
	and /hw-parse-values.
	(<hw-memory> parse!): Ditto.
	(<hw-address> parse!): Ditto.
	* mode.scm (/mode-table): New global, replaces mode-list.
	Modes stored in hashtable instead of list.
	(/mode-class-table): New global.
	(mode-list-non-alias-values): Update.
	(mode:eq?, mode-compatible?, mode:add!): Update.
	(mode:lookup): Restrict arg to the mode's name.  All callers updated.
	(mode-maybe-lookup): New function.
	(mode-real-name): Restrict arg to a <mode> object.  All callers updated.
	(mode-real-mode, mode-sem-mode, mode-bigger?): Ditto.
	(mode-find, mode-set-word-modes!): Update
	(mode-ensure-word-sizes-defined): Update.
	(/sort-mode-classes!): New function.
	(mode-builtin!): Update.  Sort mode classes here.
	(mode-finish!): Sort mode classes here too.
	* rtl-c.scm (/rtl-c-get): Restrict mode arg to a <mode> object.
	All callers updated.
	(rtl-c-set-quiet): Allow mode to be name of object.
	(rtl-c-set-trace): Ditto.
	* rtl-traverse.scm (rtl-eval-with-estate): Restrict mode arg to
	<mode> object.  All callers updated.
	* rtl.scm (rtx-sem-mode): Restrict arg to <mode> object.
	(rtx-lazy-sem-mode): Ditto.
	(<rtx-temp> make!): Assert mode arg is a <mode> object.
	(rtx-env-make): Allow var-list modes to be name or object.
	* sem-frags.scm (/frag-expr-assq-locals): New function.
	(/frag-compute-locals!): Call it.
	(/sfrag-create-cse-mapping): Renamed from sfrag-create-cse-mapping.
	All callers updated.
	* semantics.scm (/build-mem-operand!): Handle mode aliases.
@
text
@d682 2
a691 1
       ; MODE is the name of the mode.
d693 1
a693 1
	(lambda (rtx-obj expr mode parent-expr op-pos tstate appstuff)
d696 1
a696 1
	    ((operand) (if (memory? (op:type (rtx-operand-obj expr)))
d699 1
a699 1
		       (if (mode-float? (op:mode (rtx-operand-obj expr)))
@


1.11
log
@	Clean up cpu file parsing, pass context consistently instead of the
	old "errtxt" argument.
	NOTE: ACU == "All Callers Updated".
	* attr.scm (-parse-simple-attribute): Renamed from
	parse-simple-attribute, ACU.
	(-attr-parse): Change errtxt argument to context, ACU.
	(-attr-read): Ditto.
	(atlist-parse): Ditto.  Put context arg first.
	(attr-parse): Use parse-error instead of context-error.
	* enum.scm (parse-enum-vals): Change errtxt argument to context, ACU.
	(-enum-parse-prefix, -enum-parse, -enum-read): Ditto.
	* hardware.scm (-keyword-parse): Renamed from keyword-parse.
	`context' arg is now a <context> object.  ACU.
	(-keyword-read): `context' arg is now a <context> object.  ACU.
	(-hw-parse-indices): Change errtxt argument to context, ACU.
	(-hw-parse-values, -hw-parse-handlers): Ditto.
	(-hw-parse-getter, -hw-parse-setter, -hw-parse, -hw-read): Ditto.
	(-hw-validate-layout, -hw-create-getter-from-layout,
	-hw-create-setter-from-layout): Ditto.
	(<hw-register>:parse!, <hw-pc>:parse!): Ditto.
	(<hw-memory>:parse!, <hw-immediate>:parse!): Ditto.
	(<hw-address>:parse!): Ditto.
	* ifield.scm (-ifield-parse, ifield-read): Ditto.
	(-ifld-parse-follows, -ifld-parse-encode-decode): Ditto.
	(-ifld-parse-encode, -ifld-parse-decode): Ditto.
	(-multi-ifield-parse, -multi-ifield-read): Ditto.
	* insn.scm (-insn-parse, -insn-read): Ditto.
	(parse-syntax): Ditto.  Put context arg first.
	(-parse-insn-format-symbol): Change errtxt argument to context, ACU.
	(-parse-insn-format-ifield-spec, -parse-insn-format-list): Ditto.
	(-parse-insn-format): Ditto.
	* mach.scm (-arch-parse-alignment, -arch-parse-machs): Ditto.
	(-arch-parse-isas): Ditto.
	(-isa-read): Add context arg, ACU.
	(-cpu-parse, -cpu-read, -mach-read): Ditto.
	* minsn.scm (-minsn-parse-expansion): Change errtxt argument to
	context, ACU.
	(-minsn-parse, -minsn-read, -minsn-compute-iflds): Ditto.
	(minsn-make-alias): Ditto.
	* mode.scm (-mode-parse): Ditto.
	(parse-mode-name): Ditto.  Put context arg first.
	* model.scm (-prefetch-parse, -retire-parse, -pipeline-parse): Change
	errtxt argument to context, ACU.
	(-unit-parse, -model-parse, -model-read): Ditto.
	* operand.scm (-operand-parse-getter): Use parse-error instead of
	context-error.
	(-operand-parse-setter): Ditto.
	(-operand-parse): Change errtxt argument to context, ACU.
	(-operand-read, -derived-operand-parse, -derived-operand-read): Ditto.
	(-anyof-operand-parse, -anyof-operand-read): Ditto.
	* read.scm (reader-error): Delete.  Use parse-error instead.
	(parse-error): Change errtxt argument to context, ACU.  Split args
	argument into expr and maybe-help-text.
	(-reader-process-expanded-1!): Reorganize.
	* rtl.scm (-subr-read): Change errtxt argument to context, ACU.
	* types.scm (parse-type): Ditto.
	* utils-cgen.scm (single-location->simple-string): New function.
	(<context>): Replace members file,lineno with location.
	(make-prefix-context): Renamed from context-make-prefix, ACU.
	(make-current-context): New function.
	(context-append, context-append-name): New functions.
	(context-make-reader): Delete.
	(parse-name): Change errtxt argument to context, ACU.
	Put context arg first.
	(parse-comment): Ditto.
	(parse-number): Change errtxt argument to context, ACU.
	(arg-list-validate-name, arg-list-check-no-args,
	arg-list-symbol-arg): Ditto.

	* read.scm (-cmd-if): Don't assume test is a list.

	* html.scm (get-insn-properties): Delete errtxt, unused.
@
text
@d690 1
@


1.10
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@a684 3
       ; String for error messages.
       (errtxt "semantic attribute computation for html")

@


1.9
log
@	* rtl-xform.scm (rtx-simplify-insn): New function.
	* html.scm (gen-insn-docs): Call it.
	* sem-frags.scm (sem-find-common-frags, -frag-test-data): Ditto.
	* iformat.scm (ifmt-analyze): Minor simplification.
@
text
@d2 1
a2 1
; Copyright (C) 2003, Doug Evans
@


1.8
log
@	* html.scm (doc-analyze!): Provide defualt IDOC attribute if missing.
@
text
@d834 1
a834 3
	      (insn-set-tmp! insn (rtx-simplify #f insn
						(insn-semantics insn)
						(insn-build-known-values insn))))
@


1.8.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2003, 2009 Doug Evans
@


1.7
log
@	* Makefile.am (ARCHFILE): Fix path.
	* Makefile.in: Regenerate.
	* html.scm: Use "pre" instead of "plaintext".
@
text
@d958 1
a958 1
; Initialize any opcodes specific things before loading the .cpu file.
d966 1
a966 1
; Finish any opcodes specific things after loading the .cpu file.
d982 15
@


1.6
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d292 1
a292 1
		      "<plaintext>" ; no trailing newline here on purpose
d296 1
a296 1
		      "</plaintext></font>\n"
d303 1
a303 1
		      "<plaintext>" ; no trailing newline here on purpose
d307 1
a307 1
		      "</plaintext></font>\n"
d598 1
a598 1
		      "<plaintext>" ; no trailing newline here on purpose
d602 1
a602 1
		      "</plaintext></font>\n"
d609 1
a609 1
   "<plaintext>" ; no trailing newline here on purpose
d614 1
a614 1
   "</plaintext></font>\n"
d899 1
a899 1
   "<plaintext>" ; no trailing newline here on purpose
d903 1
a903 1
   "</plaintext></font>\n"
@


1.5
log
@misc. whitespace and comment cleanup
@
text
@d89 2
a90 2
  (let ((arch (current-arch-name))
	(ARCH (string-upcase (current-arch-name))))
d123 1
a123 1
  (let ((ARCH (string-upcase (current-arch-name))))
d165 2
a166 2
		 "<a href=\"#" kind "-" name "\">"
		 name
d192 2
a193 2
  (gen-doc-header (string-append (obj:name o) " - " (obj:comment o))
		  (string-append kind "-" (obj:name o)))
d201 1
a201 1
   (obj:name cpu) " - " (obj:comment cpu) "\n"
d217 1
a217 1
   (obj:name mach) " - " (obj:comment mach) "\n"
d233 1
a233 1
   (obj:name model) " - " (obj:comment model) "\n"
d242 1
a242 1
   (obj:name isa) " - " (obj:comment isa) "\n"
d287 1
a287 1
		      (car (isa-condition isa))
d318 1
a318 1
  (let ((ARCH (string-upcase (current-arch-name)))
d367 1
a367 1
		 (string-append " " (obj:name isa)))
d458 1
a458 1
		 (string-append " " mach))
d577 1
a577 1
		 (string-append " " mach))
d626 1
a626 1
				      (car t)
d630 1
a630 1
								   (obj:name (iunit:unit u))))
d648 1
a648 1
   (gen-doc-header (string-append (obj:name mach)
d650 1
a650 1
				  name
d655 1
a655 1
				  (obj:name mach)
d657 1
a657 1
				  name))
d807 1
a807 1
			     (obj:name mach)
d809 1
a809 1
			     (enum-val-name c)
d811 1
a811 1
			     (enum-val-name c)
d819 1
a819 1
   (obj:name mach)
d821 1
a821 1
   (obj:name mach)
d859 1
a859 1
				       (obj:name m)
d1005 1
a1005 1
				      (current-arch-name)
d1023 1
a1023 1
				      (current-arch-name)
@


1.4
log
@	* mach.scm (current-*-add!): Disallow redefinition.  Make result
	"unspecified".
	* insn.scm (insn-builtin!): Don't define relaxable here, now defined in
	operand.scm.
	* operand.scm (operand-builtin!): Define RELAXABLE for insns too.
	* cpu/m32r.cpu (disp8,disp24): RELAX renamed to RELAXABLE.

	* gen-all-doc: Split arm and frv docs up a bit.

	* cpu/arm.cpu: Add IDOC attribute.
	* cpu/frv.cpu: Ditto.
	* cpu/i960.cpu: Ditto.
	* cpu/openrisc.cpu: Ditto.
	* cpu/xstormy16.cpu: Ditto.
	* cpu/m32r.cpu: Ditto.
	(all insns): Explicitly specify IDOC attribute.

	* Makefile.am (MACH,ISAS,INSN_FILE_NAME): New vars.
	(desc,opcodes,sim-arch,sim-cpu,gas-test,sim-test): Use MACH,ISAS.
	(html): Use MACH,ISAS,INSN_FILE_NAME.  Generate insn.html separately.
	* Makefile.in: Regenerate.
	* attr.scm (<integer-attribute>:parse-value-def): Implement.
	(-attr-read): Defer computing default value until we know the type.
	(attr-has-attr?): Delete, move contents to <attr-list>:has-attr?.
	(<attr-list>:attr-present?): New method.
	(atlist-attr-present?,obj-attr-present?): New fns.
	(obj-has-attr-value?,obj-has-attr-value-no-default?): New fns.
	(attr-builtin!): New insn attr IDOC.
	* cgen-doc.scm (doc-arguments): New args -I,-N.
	* enum.scm (parse-enum-vals): New arg errtxt, all callers updated.
	Support comment as fourth element of enum value.
	(enum-val-name,enum-val-value,enum-val-attrs,enum-val-comment): New fns.
	* html.scm (gen-html-header): New arg kind, all callers updated.
	(gen-table-of-contents): New arg insn-file, all callers updated.
	(gen-list-entry,gen-doc-header): New fn.
	(get-operands): Delete.
	(gen-iformat-table): Rewrite.
	(gen-insn-doc-1): Print constant-folded and trimmed semantics.
	(gen-insn-doc-list): New args name, comment, insns.  All callers updated.
	(get-insn-properties,guess-insn-idoc-attr!): New fn.
	(insn-sets-pc?,insn-refs-mem?,insn-uses-fpu?): New fns.
	(get-insns-for-category,gen-categories-insn-lists): New fns.
	(gen-insn-docs): Simplify each insn's semantics first.
	Print insn tables sorted by IDOC categories.
	(*insn-html-file-name*): New global.
	(cgen-insn.html): New fn.
	(cgen-all): Update.
	* insn.scm (<insn>): Create a setter for the `tmp' member.
	* semantics.scm (insn-build-known-values): Renamed from
	-build-known-values.  All callers updated.

	* rtl.scm: Move traveral/evaluation support to ...
	* rtl-traverse.scm: New file.
	* read.scm: Maybe-load rtl-traverse.scm.

	* rtl.scm (-rtx-valid-types): Add SETRTX.

	* rtx-funcs.scm (nop,parallel): Fix mode.

	* utils.scm (eqv-lookup-index): New fn.
	(assq-lookup-index): Renamed from lookup-index.  All callers updated.

	* dev.scm (load-doc): Set APPLICATION.
@
text
@a26 2
; - ARM docs mix arm/thumb, should be separate,
;   first try to split using keep-isa
@


1.3
log
@	Better handling of 64 bit and mixed 32/64 bit architectures.
	* hardware.scm (hw-update-word-modes!): New fn.
	* mach.scm (define-cpu)): Call mode-set-word-modes!,
	hw-update-word-modes!.
	(state-word-bitsize): Replace FIXME with requested check.
	(arch-analyze-insns!): Call mode-ensure-word-sizes-defined.
	* mode.scm (mode-find): Ignore INT,UINT.
	(-mode-word-sizes-kind): New global.
	(mode-set-word-modes!,mode-set-identical-word-bitsizes!,
	mode-set-biggest-word-bitsizes!,mode-ensure-word-sizes-defined): New fns.
	(mode-init!): Initialize -mode-word-sizes-kind.  Move initialization
	of mode-list to ...
	(mode-builtin!): ... here.  Initialize WI/UWI/AI/IAI to something
	unusable, correct values set later.
	(mode-finish!): Remove cruft.
	* html.scm (doc-init!): Call mode-set-biggest-word-bitsizes!.
	* opcodes.scm (opcodes-init!): Ditto.
	* rtx-funcs.scm (annul): Fix mode of pc.
	* cpu/ia64.cpu: Remove cruft that sets word modes.
	* cpu/xstormy16.cpu (define-cpu): Set word-bitsize.
@
text
@a21 3
; - frv-doc.html is massive, default plan is to split it up by machine
;   but is that the way to go here?
;   --> split up output into several files anyway (for all archs)
d87 1
d90 1
a90 1
(define (gen-html-header)
d98 1
a98 1
     "  <meta name=\"description\" content=\"" ARCH " Architecture Documentation\">\n"
d102 1
a102 1
     "  <title>" ARCH " Architecture Documentation</title>\n"
d122 3
a124 1
(define (gen-table-of-contents)
d142 2
a143 2
     "<li><a href=\"#insns\">Instructions</a></li>\n"
     "<li><a href=\"#macro-insns\">Macro instructions</a></li>\n"
d161 2
a162 2
; Utility to print a list entry for object O of kind KIND
; which is a link to the description of O.
d165 1
a165 1
(define (gen-obj-list-entry o kind)
d167 2
a168 2
		 "<a href=\"#" kind "-" (obj:name o) "\">"
		 (obj:name o)
d170 1
a170 1
		 (obj:comment o)
d175 16
a190 1
; Utility to print the header for the description of object O of kind KIND.
d194 2
a195 4
  (string-list
   "<a name=\"" kind "-" (obj:name o) "\"></a>\n"
   "<h3>" (obj:name o) " - " (obj:comment o) "</h3>\n"
   )
d200 1
a200 1
(define (-gen-cpu-intro cpu)
d208 1
a208 1
   (string-list-map -gen-mach-intro
d216 1
a216 1
(define (-gen-mach-intro mach)
d224 1
a224 1
   (string-list-map -gen-model-intro
d232 1
a232 1
(define (-gen-model-intro model)
d241 1
a241 1
(define (-gen-isa-intro isa)
d343 1
a343 1
     (string-list-map -gen-isa-intro
d349 1
a349 1
     (string-list-map -gen-cpu-intro
a556 12
; Return ordered list of operands for each field in NAMES.
; The result is an acceptable arg to gen-iformat-table-1.

(define (get-operands insn)
  (let ((ifields (ifmt-ifields (insn-ifmt insn))))
    (map (lambda (f)
	   (if (ifld-constant? f)
	       (ifld-get-value f)
	       (obj:name (ifld-get-value f))))
	 ifields))
)

a557 2
; NAMES is a list of field names,
; WIDTHS is a list of their widths.
d560 10
a569 7
  (let* ((widths (map ifld-length
		      (ifmt-ifields (insn-ifmt insn))))
	 (names (map obj:name
		     (ifmt-ifields (insn-ifmt insn))))
	 (operands (get-operands insn))
	 (lsb0? (current-arch-insn-lsb0?)))
    (gen-iformat-table-1 (get-ifield-bitnums widths lsb0?) names operands))
d614 2
a615 1
       (pretty-print (insn-semantics insn))))
d636 3
a638 1
		     (insn-timing insn))
d647 180
a826 12
(define (gen-insn-doc-list mach)
  (let ((insns (find (lambda (insn)
		       (mach-supports? mach insn))
		     (current-insn-list))))
    (string-list
     (gen-obj-doc-header mach "mach-insns")
     "<ul>\n"
     (string-map (lambda (o)
		   (gen-obj-list-entry o "insn"))
		 insns)
     "</ul>\n"
     ))
d829 3
d833 8
d842 4
a845 1
	(insns (alpha-sort-obj-list (current-insn-list))))
d853 15
a867 3
     (string-map (lambda (o)
		   (gen-obj-list-entry o "mach-insns"))
		 machs)
d869 10
a878 2
     (string-list-map gen-insn-doc-list machs)
     "<p>\n"
a998 3
;
; TODO: Will eventually want to split .html output into several files to
; speed up loading into browsers.
d1000 5
a1004 2
(define (cgen-doc.html)
  (logit 1 "Generating " (current-arch-name) "-doc.html ...\n")
d1010 2
a1011 2
   gen-html-header
   gen-table-of-contents
d1016 13
a1030 1
   gen-asm-docs
d1034 1
a1034 1

d1039 2
a1040 1
   cgen-doc.html
@


1.2
log
@add some more todos
@
text
@d757 1
@


1.1
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d28 4
@

