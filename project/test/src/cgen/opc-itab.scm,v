head	1.20;
access;
symbols
	sid-snapshot-20180601:1.20
	cgen-snapshot-20180601:1.20
	sid-snapshot-20180501:1.20
	cgen-snapshot-20180501:1.20
	sid-snapshot-20180401:1.20
	cgen-snapshot-20180401:1.20
	sid-snapshot-20180301:1.20
	cgen-snapshot-20180301:1.20
	sid-snapshot-20180201:1.20
	cgen-snapshot-20180201:1.20
	sid-snapshot-20180101:1.20
	cgen-snapshot-20180101:1.20
	sid-snapshot-20171201:1.20
	cgen-snapshot-20171201:1.20
	sid-snapshot-20171101:1.20
	cgen-snapshot-20171101:1.20
	sid-snapshot-20171001:1.20
	cgen-snapshot-20171001:1.20
	sid-snapshot-20170901:1.20
	cgen-snapshot-20170901:1.20
	sid-snapshot-20170801:1.20
	cgen-snapshot-20170801:1.20
	sid-snapshot-20170701:1.20
	cgen-snapshot-20170701:1.20
	sid-snapshot-20170601:1.20
	cgen-snapshot-20170601:1.20
	sid-snapshot-20170501:1.20
	cgen-snapshot-20170501:1.20
	sid-snapshot-20170401:1.20
	cgen-snapshot-20170401:1.20
	sid-snapshot-20170301:1.20
	cgen-snapshot-20170301:1.20
	sid-snapshot-20170201:1.20
	cgen-snapshot-20170201:1.20
	sid-snapshot-20170101:1.20
	cgen-snapshot-20170101:1.20
	sid-snapshot-20161201:1.20
	cgen-snapshot-20161201:1.20
	sid-snapshot-20161101:1.20
	cgen-snapshot-20161101:1.20
	sid-snapshot-20160901:1.20
	cgen-snapshot-20160901:1.20
	sid-snapshot-20160801:1.20
	cgen-snapshot-20160801:1.20
	sid-snapshot-20160701:1.19
	cgen-snapshot-20160701:1.19
	sid-snapshot-20160601:1.19
	cgen-snapshot-20160601:1.19
	sid-snapshot-20160501:1.19
	cgen-snapshot-20160501:1.19
	sid-snapshot-20160401:1.18
	cgen-snapshot-20160401:1.18
	sid-snapshot-20160301:1.18
	cgen-snapshot-20160301:1.18
	sid-snapshot-20160201:1.18
	cgen-snapshot-20160201:1.18
	sid-snapshot-20160101:1.18
	cgen-snapshot-20160101:1.18
	sid-snapshot-20151201:1.18
	cgen-snapshot-20151201:1.18
	sid-snapshot-20151101:1.18
	cgen-snapshot-20151101:1.18
	sid-snapshot-20151001:1.18
	cgen-snapshot-20151001:1.18
	sid-snapshot-20150901:1.18
	cgen-snapshot-20150901:1.18
	sid-snapshot-20150801:1.18
	cgen-snapshot-20150801:1.18
	sid-snapshot-20150701:1.18
	cgen-snapshot-20150701:1.18
	sid-snapshot-20150601:1.18
	cgen-snapshot-20150601:1.18
	sid-snapshot-20150501:1.18
	cgen-snapshot-20150501:1.18
	sid-snapshot-20150401:1.18
	cgen-snapshot-20150401:1.18
	sid-snapshot-20150301:1.18
	cgen-snapshot-20150301:1.18
	sid-snapshot-20150201:1.18
	cgen-snapshot-20150201:1.18
	sid-snapshot-20150101:1.18
	cgen-snapshot-20150101:1.18
	sid-snapshot-20141201:1.18
	cgen-snapshot-20141201:1.18
	sid-snapshot-20141101:1.18
	cgen-snapshot-20141101:1.18
	sid-snapshot-20141001:1.18
	cgen-snapshot-20141001:1.18
	sid-snapshot-20140901:1.18
	cgen-snapshot-20140901:1.18
	sid-snapshot-20140801:1.18
	cgen-snapshot-20140801:1.18
	sid-snapshot-20140701:1.18
	cgen-snapshot-20140701:1.18
	sid-snapshot-20140601:1.18
	cgen-snapshot-20140601:1.18
	sid-snapshot-20140501:1.18
	cgen-snapshot-20140501:1.18
	sid-snapshot-20140401:1.18
	cgen-snapshot-20140401:1.18
	sid-snapshot-20140301:1.18
	cgen-snapshot-20140301:1.18
	sid-snapshot-20140201:1.18
	cgen-snapshot-20140201:1.18
	sid-snapshot-20140101:1.18
	cgen-snapshot-20140101:1.18
	sid-snapshot-20131201:1.18
	cgen-snapshot-20131201:1.18
	sid-snapshot-20131101:1.18
	cgen-snapshot-20131101:1.18
	sid-snapshot-20131001:1.18
	cgen-snapshot-20131001:1.18
	sid-snapshot-20130901:1.18
	cgen-snapshot-20130901:1.18
	sid-snapshot-20130801:1.18
	cgen-snapshot-20130801:1.18
	sid-snapshot-20130701:1.18
	cgen-snapshot-20130701:1.18
	sid-snapshot-20130601:1.18
	cgen-snapshot-20130601:1.18
	sid-snapshot-20130501:1.18
	cgen-snapshot-20130501:1.18
	sid-snapshot-20130401:1.18
	cgen-snapshot-20130401:1.18
	sid-snapshot-20130301:1.18
	cgen-snapshot-20130301:1.18
	sid-snapshot-20130201:1.18
	cgen-snapshot-20130201:1.18
	sid-snapshot-20130101:1.18
	cgen-snapshot-20130101:1.18
	sid-snapshot-20121201:1.18
	cgen-snapshot-20121201:1.18
	sid-snapshot-20121101:1.18
	cgen-snapshot-20121101:1.18
	sid-snapshot-20121001:1.18
	cgen-snapshot-20121001:1.18
	sid-snapshot-20120901:1.18
	cgen-snapshot-20120901:1.18
	sid-snapshot-20120801:1.18
	cgen-snapshot-20120801:1.18
	sid-snapshot-20120701:1.18
	cgen-snapshot-20120701:1.18
	sid-snapshot-20120601:1.18
	cgen-snapshot-20120601:1.18
	sid-snapshot-20120501:1.18
	cgen-snapshot-20120501:1.18
	sid-snapshot-20120401:1.18
	cgen-snapshot-20120401:1.18
	sid-snapshot-20120301:1.18
	cgen-snapshot-20120301:1.18
	sid-snapshot-20120201:1.18
	cgen-snapshot-20120201:1.18
	sid-snapshot-20120101:1.18
	cgen-snapshot-20120101:1.18
	sid-snapshot-20111201:1.18
	cgen-snapshot-20111201:1.18
	sid-snapshot-20111101:1.18
	cgen-snapshot-20111101:1.18
	sid-snapshot-20111001:1.18
	cgen-snapshot-20111001:1.18
	sid-snapshot-20110901:1.18
	cgen-snapshot-20110901:1.18
	sid-snapshot-20110801:1.18
	cgen-snapshot-20110801:1.18
	sid-snapshot-20110701:1.18
	cgen-snapshot-20110701:1.18
	sid-snapshot-20110601:1.18
	cgen-snapshot-20110601:1.18
	sid-snapshot-20110501:1.18
	cgen-snapshot-20110501:1.18
	sid-snapshot-20110401:1.18
	cgen-snapshot-20110401:1.18
	sid-snapshot-20110301:1.18
	cgen-snapshot-20110301:1.18
	sid-snapshot-20110201:1.18
	cgen-snapshot-20110201:1.18
	sid-snapshot-20110101:1.18
	cgen-snapshot-20110101:1.18
	sid-snapshot-20101201:1.18
	cgen-snapshot-20101201:1.18
	sid-snapshot-20101101:1.18
	cgen-snapshot-20101101:1.18
	sid-snapshot-20101001:1.18
	cgen-snapshot-20101001:1.18
	sid-snapshot-20100901:1.18
	cgen-snapshot-20100901:1.18
	sid-snapshot-20100801:1.18
	cgen-snapshot-20100801:1.18
	sid-snapshot-20100701:1.18
	cgen-snapshot-20100701:1.18
	sid-snapshot-20100601:1.18
	cgen-snapshot-20100601:1.18
	sid-snapshot-20100501:1.18
	cgen-snapshot-20100501:1.18
	sid-snapshot-20100401:1.18
	cgen-snapshot-20100401:1.18
	sid-snapshot-20100301:1.18
	cgen-snapshot-20100301:1.18
	sid-snapshot-20100201:1.18
	cgen-snapshot-20100201:1.18
	sid-snapshot-20100101:1.18
	cgen-snapshot-20100101:1.18
	sid-snapshot-20091201:1.18
	cgen-snapshot-20091201:1.18
	sid-snapshot-20091101:1.17
	cgen-snapshot-20091101:1.17
	sid-snapshot-20091001:1.17
	cgen-snapshot-20091001:1.17
	arc-sim-20090309:1.13.4.1
	sid-snapshot-20090901:1.16
	cgen-snapshot-20090901:1.16
	sid-snapshot-20090801:1.15
	cgen-snapshot-20090801:1.15
	sid-snapshot-20090701:1.15
	cgen-snapshot-20090701:1.15
	dje-cgen-play1-branch:1.15.0.2
	dje-cgen-play1-branchpoint:1.15
	cgen-1_1-branch:1.14.0.2
	cgen-1_1-branchpoint:1.14
	sid-snapshot-20090601:1.14
	cgen-snapshot-20090601:1.14
	sid-snapshot-20090501:1.14
	cgen-snapshot-20090501:1.14
	sid-snapshot-20090401:1.14
	cgen-snapshot-20090401:1.14
	arc-insight_6_8-branch:1.13.0.4
	arc-insight_6_8-branchpoint:1.13
	sid-snapshot-20090301:1.14
	cgen-snapshot-20090301:1.14
	sid-snapshot-20090201:1.13
	cgen-snapshot-20090201:1.13
	sid-snapshot-20090101:1.13
	cgen-snapshot-20090101:1.13
	sid-snapshot-20081201:1.13
	cgen-snapshot-20081201:1.13
	sid-snapshot-20081101:1.13
	cgen-snapshot-20081101:1.13
	sid-snapshot-20081001:1.13
	cgen-snapshot-20081001:1.13
	sid-snapshot-20080901:1.13
	cgen-snapshot-20080901:1.13
	sid-snapshot-20080801:1.13
	cgen-snapshot-20080801:1.13
	sid-snapshot-20080701:1.13
	cgen-snapshot-20080701:1.13
	sid-snapshot-20080601:1.13
	cgen-snapshot-20080601:1.13
	sid-snapshot-20080501:1.13
	cgen-snapshot-20080501:1.13
	sid-snapshot-20080403:1.13
	sid-snapshot-20080401:1.13
	cgen-snapshot-20080401:1.13
	sid-snapshot-20080301:1.13
	cgen-snapshot-20080301:1.13
	sid-snapshot-20080201:1.13
	cgen-snapshot-20080201:1.13
	sid-snapshot-20080101:1.13
	cgen-snapshot-20080101:1.13
	sid-snapshot-20071201:1.13
	cgen-snapshot-20071201:1.13
	sid-snapshot-20071101:1.13
	cgen-snapshot-20071101:1.13
	sid-snapshot-20071001:1.13
	cgen-snapshot-20071001:1.13
	msnyder-fork-checkpoint-branch:1.13.0.2
	msnyder-fork-checkpoint-branchpoint:1.13
	sid-20020905-branchpoint:1.7
	sid-20020905-branch:1.7.0.4
	cagney_regbuf-20020515-branch:1.7.0.2
	cagney_regbuf-20020515-branchpoint:1.7
	cygnus_cvs_20020108_pre:1.7
	cgen-1-1-branch:1.6.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2016.07.25.15.39.06;	author fche;	state Exp;
branches;
next	1.19;

1.19
date	2016.04.14.15.27.54;	author fche;	state Exp;
branches;
next	1.18;

1.18
date	2009.11.03.16.24.02;	author devans;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.16;

1.16
date	2009.08.12.22.33.37;	author devans;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.18.17.13.03;	author nickc;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	2005.02.15.12.52.00;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.08.17.17.22;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.10.21.22.03;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.09.08.24.22;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.12.21.30.04;	author jjohnstn;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.21.21.50.57;	author bje;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.21.21.48.37;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.20.19.30.13;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.20.19.03.33;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.14.2.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.13.4.1
date	2009.03.09.20.36.04;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.20
log
@2016-07-18  Trevor Saunders <tbsaunde@@tbsaunde.org>

	* desc-cpu.scm, opc-itab.sbm: Emit extern "C" { ... } wrappers to
	make generated code usable by C++.
@
text
@; Opcode table support.
; Copyright (C) 2000, 2005, 2009 Red Hat, Inc.
; This file is part of CGEN.

; Append code here to be run before insn parsing/etc.
; These are for internal use and aren't intended to appear in .cpu files.
; ??? Nothing currently uses them but that might change.

(define parse-init-code "")
(define insert-init-code "")
(define extract-init-code "")
(define print-init-code "")

; Define CGEN_INIT_{PARSE,INSERT,EXTRACT,PRINT} macros.
; ??? These were early escape hatches.  Not currently used.

(define (/gen-init-macros)
  (logit 2 "Generating init macros ...\n")
  (string-append
   "#define CGEN_INIT_PARSE(od) \\
{\\\n"
   parse-init-code
   "}\n"
   "#define CGEN_INIT_INSERT(od) \\
{\\\n"
   insert-init-code
   "}\n"
   "#define CGEN_INIT_EXTRACT(od) \\
{\\\n"
   extract-init-code
   "}\n"
   "#define CGEN_INIT_PRINT(od) \\
{\\\n"
   print-init-code
   "}\n"
  )
)

; Instruction field support.

; Return C code to declare various ifield types,decls.

(define (/gen-ifield-decls)
  (logit 2 "Generating instruction field decls ...\n")
  (string-append
   "/* This struct records data prior to insertion or after extraction.  */\n"
   "struct cgen_fields\n{\n"
   ; A special member `length' is used to record the length.
   "  int length;\n"
   (string-map gen-ifield-value-decl (non-derived-ifields (current-ifld-list)))
   "};\n\n"
   )
)

; Instruction syntax support.

; Extract the operand fields in SYNTAX-STRING.
; The result is a list of operand names.
; ??? Not currently used, but keep awhile.

(define (extract-syntax-operands syntax)
  (let loop ((syn syntax) (result nil))

    (cond ((= (string-length syn) 0)
	   (reverse! result))

	  ((char=? #\\ (string-ref syn 0))
	   (if (= (string-length syn) 1)
	       (error "missing char after '\\'" syntax))
	   (loop (string-drop 2 syn) result))

	  ((char=? #\$ (string-ref syn 0))
	   ; Extract the symbol from the string, which will be the name of
	   ; an operand.  Append it to the result.
	   (if (= (string-length syn) 1)
	       (error "missing operand name" syntax))
	   (if (char=? (string-ref syn 1) #\{)
	       (let ((n (chars-until-delimiter syn #\})))
		 ; Note that 'n' includes the leading ${.
		 (case n
		   ((0) (error "empty operand name" syntax))
		   ((#f) (error "missing '}'" syntax))
		   (else (loop (string-drop (+ n 1) syn)
			       (cons (string->symbol (substring syn 2 n))
				     result)))))
	       (let ((n (id-len (string-drop1 syn))))
		 (if (= n 0)
		     (error "empty or invalid operand name" syntax))
		 (loop (string-drop (1+ n) syn)
		       (cons (string->symbol (substring syn 1 (1+ n)))
			     result)))))

	  (else (loop (string-drop1 syn) result))))
)

; Strip the mnemonic part from SYNTAX.
; (ie: everything up to but not including the first space or '$')
; If STRIP-MNEM-OPERANDS?, strip them too.

(define (strip-mnemonic strip-mnem-operands? syntax)
  (let ((space (string-index syntax #\space)))
    (if strip-mnem-operands?
	(if space
	    (string-drop space syntax)
	    "")
	(let loop ((syn syntax))
	  (if (= (string-length syn) 0)
	      ""
	      (case (string-ref syn 0)
		((#\space) syn)
		((#\\) (loop (string-drop 2 syn)))
		((#\$) syn)
		(else (loop (string-drop1 syn))))))))
)

; Compute the sequence of syntax bytes for SYNTAX.
; STRIP-MNEMONIC? is #t if the mnemonic part is to be stripped off.
; STRIP-MNEM-OPERANDS? is #t if any mnemonic operands are to be stripped off.
; SYNTAX is a string of text and operands.
; OP-MACRO is the macro to call that computes an operand's value.
; The resulting syntax is expressed as a sequence of bytes.
; Values < 128 are characters that must be matched.
; Values >= 128 are 128 + the index into the operand table.

(define (compute-syntax strip-mnemonic? strip-mnem-operands? syntax op-macro
			isa-name-list)
  (let ((context (make-prefix-context "syntax computation"))
	(syntax (if strip-mnemonic?
		    (strip-mnemonic strip-mnem-operands? syntax)
		    syntax)))

    (let loop ((syn syntax) (result ""))

      (cond ((= (string-length syn) 0)
	     (string-append result "0"))

	    ((char=? #\\ (string-ref syn 0))
	     (if (= (string-length syn) 1)
		 (parse-error context "missing char after '\\'" syntax))
	     (let ((escaped-char (string-ref syn 1))
		   (remainder (string-drop 2 syn)))
	       (if (char=? #\\ escaped-char)
		   (loop remainder (string-append result "'\\\\', "))
		   (loop remainder (string-append result "'" (string escaped-char) "', ")))))

	    ((char=? #\$ (string-ref syn 0))
	     ; Extract the symbol from the string, which will be the name of
	     ; an operand.  Append it to the result.
	     (if (= (string-length syn) 1)
		 (parse-error context "missing operand name" syntax))
	     ; Is it $foo or ${foo}?
	     (if (char=? (string-ref syn 1) #\{)
		 (let ((n (chars-until-delimiter syn #\})))
		   ; Note that 'n' includes the leading ${.
		   ; FIXME: \} not implemented yet.
		   (case n
		     ((0) (parse-error context "empty operand name" syntax))
		     ((#f) (parse-error context "missing '}'" syntax))
		     (else (loop (string-drop (+ n 1) syn)
				 (string-append result op-macro " ("
						(string-upcase
						 (gen-c-symbol
						  (substring syn 2 n)))
						"), ")))))
		 (let ((n (id-len (string-drop1 syn))))
		   (if (= n 0)
		       (parse-error context "empty or invalid operand name" syntax))
		   (let ((operand (string->symbol (substring syn 1 (1+ n)))))
		     (if (not (current-op-lookup operand isa-name-list))
			 (parse-error context "undefined operand " operand syntax)))
		   (loop (string-drop (1+ n) syn)
			 (string-append result op-macro " ("
					(string-upcase
					 (gen-c-symbol
					  (substring syn 1 (1+ n))))
					"), ")))))

	    ; Append the character to the result.
	    (else (loop (string-drop1 syn)
			(string-append result
				       "'" (string-take1 syn) "', "))))))
)

; Return C code to define the syntax string for SYNTAX
; MNEM is the C value to use to represent the instruction's mnemonic.
; OP is the C macro to use to compute an operand's syntax value.
; ISA-NAME-LIST is the list of ISA names in which the owning insn lives.

(define (gen-syntax-entry mnem op syntax isa-name-list)
  (string-append
   "{ { "
   mnem ", "
   ; `mnem' is used to represent the mnemonic, so we always want to strip it
   ; from the syntax string, regardless of the setting of `strip-mnemonic?'.
   (compute-syntax #t #f syntax op isa-name-list)
   " } }")
)

; Instruction format table support.

; Return the table for IFMT, an <iformat> object.

(define (/gen-ifmt-table-1 ifmt)
  (gen-obj-sanitize
   (ifmt-eg-insn ifmt) ; sanitize based on the example insn
   (string-list
    "static const CGEN_IFMT " (gen-sym ifmt) " ATTRIBUTE_UNUSED = {\n"
    "  "
    (number->string (ifmt-mask-length ifmt)) ", "
    (number->string (ifmt-length ifmt)) ", "
    "0x" (number->string (ifmt-mask ifmt) 16) ", "
    "{ "
    (string-list-map (lambda (ifld)
		       (string-list "{ F (" (ifld-enum ifld #f) ") }, "))
		     (ifmt-ifields ifmt))
    "{ 0 } }\n};\n\n"))
)

; Generate the insn format table.

(define (/gen-ifmt-table)
  (string-write
   "/* Instruction formats.  */\n\n"
   (gen-define-with-symcat "F(f) & @@arch@@_cgen_ifld_table[@@ARCH@@_" "f]")
   (string-list-map /gen-ifmt-table-1 (current-ifmt-list))
   "#undef F\n\n"
   )
)

; Parse/insert/extract/print handlers.
; Each handler type is recorded in the assembler/disassembler as an array of
; pointers to functions.  The value recorded in the operand table is the index
; into this array. The first element in the array is reserved as index 0 is
; special (the "default").
;
; The handlers are recorded here as associative lists in case we ever want
; to record more than just the name.
;
; Adding a new handler involves
; - specifying its name in the .cpu file
; - getting its name appended to these tables
; - writing the C code
;
; ??? It might be useful to define the handler in Scheme.  Later.

(define opc-parse-handlers '((insn-normal)))
(define opc-insert-handlers '((insn-normal)))
(define opc-extract-handlers '((insn-normal)))
(define opc-print-handlers '((insn-normal)))

; FIXME: There currently isn't a spot for specifying special handlers for
; each instruction.  For now assume we always use the same ones.

(define (insn-handlers insn)
  (string-append
   (number->string (assq-lookup-index 'insn-normal opc-parse-handlers 0))
   ", "
   (number->string (assq-lookup-index 'insn-normal opc-insert-handlers 0))
   ", "
   (number->string (assq-lookup-index 'insn-normal opc-extract-handlers 0))
   ", "
   (number->string (assq-lookup-index 'insn-normal opc-print-handlers 0))
   )
)

; Return C code to define the cgen_opcode_handler struct for INSN.
; This is intended to be the ultimate escape hatch for the parse/insert/
; extract/print handlers.  Each entry is an index into a table of handlers.
; The escape hatch isn't used yet.

(define (gen-insn-handlers insn)
  (string-append
   "{ "
   (insn-handlers insn)
   " }"
   )
)

; Handler table support.
; There are tables for each of parse/insert/extract/print.

; Return C code to define the handler table for NAME with values VALUES.

(define (gen-handler-table name values)
  (string-append
   "cgen_" name "_fn * const @@arch@@_cgen_" name "_handlers[] = \n{\n"
   (string-map (lambda (elm)
		 (string-append "  " name "_"
				(gen-c-symbol (car elm))
				",\n"))
	       values)
   "};\n\n"
   )
)

; Instruction table support.

; Return a declaration of an enum for all insns.

(define (/gen-insn-enum)
  (logit 2 "Generating instruction enum ...\n")
  (let ((insns (gen-obj-list-enums (non-multi-insns (current-insn-list)))))
    (string-list
     (gen-enum-decl 'cgen_insn_type "@@arch@@ instruction types"
		    "@@ARCH@@_INSN_"
		    (cons '(invalid) insns))
     "/* Index of `invalid' insn place holder.  */\n"
     "#define CGEN_INSN_INVALID @@ARCH@@_INSN_INVALID\n\n"
     "/* Total number of insns in table.  */\n"
     "#define MAX_INSNS ((int) @@ARCH@@_INSN_"
     (string-upcase (gen-c-symbol (caar (list-take -1 insns)))) " + 1)\n\n"
   )
  )
)

; Return a reference to the format table entry of INSN.

(define (gen-ifmt-entry insn)
  (string-append "& " (gen-sym (insn-ifmt insn)))
)

; Return the definition of an instruction value entry.

(define (gen-ivalue-entry insn)
  (string-list "{ "
	       "0x" (number->string (insn-value insn) 16)
	       (if #f ; (ifmt-opcodes-beyond-base? (insn-ifmt insn))
		   (string-list ", { "
				; ??? wip: opcode values beyond the base insn
				"0 }")
		   "")
	       " }")
)

; Generate an insn opcode entry for INSN.
; ALL-ATTRS is a list of all instruction attributes.
; NUM-NON-BOOLS is the number of non-boolean insn attributes.

(define (/gen-insn-opcode-entry insn all-attrs num-non-bools)
  (gen-obj-sanitize
   insn
   (string-list
    "/* " (insn-syntax insn) " */\n"
    "  {\n"
    "    " (gen-insn-handlers insn) ",\n"
    "    "
    (gen-syntax-entry "MNEM" "OP" (insn-syntax insn) (obj-isa-list insn))
    ",\n"
    ; ??? 'twould save space to put a pointer here and record format separately
    "    " (gen-ifmt-entry insn) ", "
    ;"0x" (number->string (insn-value insn) 16) ",\n"
    (gen-ivalue-entry insn) "\n"
    "  },\n"))
)

; Generate insn table.

(define (/gen-insn-opcode-table)
  (logit 2 "Generating instruction opcode table ...\n")
  (let* ((all-attrs (current-insn-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-write
     (gen-define-with-symcat "A(a) (1 << CGEN_INSN_" "a)")
     (gen-define-with-symcat "OPERAND(op) @@ARCH@@_OPERAND_" "op")
     "\
#define MNEM CGEN_SYNTAX_MNEMONIC /* syntax value for mnemonic */
#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))

/* The instruction table.  */

static const CGEN_OPCODE @@arch@@_cgen_insn_opcode_table[MAX_INSNS] =
{
  /* Special null first entry.
     A `num' value of zero is thus invalid.
     Also, the special `invalid' insn resides here.  */
  { { 0, 0, 0, 0 }, {{0}}, 0, {0}},\n"

     (lambda ()
       (string-write-map (lambda (insn)
                           (logit 3 "Generating insn opcode entry for " (obj:name insn) " ...\n")
                           (/gen-insn-opcode-entry insn all-attrs
						   num-non-bools))
                         (non-multi-insns (current-insn-list))))

     "\
};

#undef A
#undef OPERAND
#undef MNEM
#undef OP

"
     )
    )
)

; Return assembly/disassembly hashing support.

(define (/gen-hash-fns)
  (string-list
   "\
#ifndef CGEN_ASM_HASH_P
#define CGEN_ASM_HASH_P(insn) 1
#endif

#ifndef CGEN_DIS_HASH_P
#define CGEN_DIS_HASH_P(insn) 1
#endif

/* Return non-zero if INSN is to be added to the hash table.
   Targets are free to override CGEN_{ASM,DIS}_HASH_P in the .opc file.  */

static int
asm_hash_insn_p (const CGEN_INSN *insn ATTRIBUTE_UNUSED)
{
  return CGEN_ASM_HASH_P (insn);
}

static int
dis_hash_insn_p (const CGEN_INSN *insn)
{
  /* If building the hash table and the NO-DIS attribute is present,
     ignore.  */
  if (CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_NO_DIS))
    return 0;
  return CGEN_DIS_HASH_P (insn);
}

#ifndef CGEN_ASM_HASH
#define CGEN_ASM_HASH_SIZE 127
#ifdef CGEN_MNEMONIC_OPERANDS
#define CGEN_ASM_HASH(mnem) (*(unsigned char *) (mnem) % CGEN_ASM_HASH_SIZE)
#else
#define CGEN_ASM_HASH(mnem) (*(unsigned char *) (mnem) % CGEN_ASM_HASH_SIZE) /*FIXME*/
#endif
#endif

/* It doesn't make much sense to provide a default here,
   but while this is under development we do.
   BUFFER is a pointer to the bytes of the insn, target order.
   VALUE is the first base_insn_bitsize bits as an int in host order.  */

#ifndef CGEN_DIS_HASH
#define CGEN_DIS_HASH_SIZE 256
#define CGEN_DIS_HASH(buf, value) (*(unsigned char *) (buf))
#endif

/* The result is the hash value of the insn.
   Targets are free to override CGEN_{ASM,DIS}_HASH in the .opc file.  */

static unsigned int
asm_hash_insn (const char *mnem)
{
  return CGEN_ASM_HASH (mnem);
}

/* BUF is a pointer to the bytes of the insn, target order.
   VALUE is the first base_insn_bitsize bits as an int in host order.  */

static unsigned int
dis_hash_insn (const char *buf ATTRIBUTE_UNUSED,
		     CGEN_INSN_INT value ATTRIBUTE_UNUSED)
{
  return CGEN_DIS_HASH (buf, value);
}
\n"
   )
)

; Hash support decls.

(define (/gen-hash-decls)
  (string-list
   "\
/* The hash functions are recorded here to help keep assembler code out of
   the disassembler and vice versa.  */

static int asm_hash_insn_p        (const CGEN_INSN *);
static unsigned int asm_hash_insn (const char *);
static int dis_hash_insn_p        (const CGEN_INSN *);
static unsigned int dis_hash_insn (const char *, CGEN_INSN_INT);
\n"
   )
)

; Macro insn support.

; Return a macro-insn expansion entry.

(define (/gen-miexpn-entry entry)
   ; FIXME: wip
  "0, "
)

; Return a macro-insn table entry.
; ??? wip, not currently used.

(define (/gen-minsn-table-entry minsn all-attrs num-non-bools)
  (gen-obj-sanitize
   minsn
   (string-list
    "  /* " (minsn-syntax minsn) " */\n"
    "  {\n"
    "    "
    "-1, " ; macro-insns are not currently enumerated, no current need to
    "\"" (obj:str-name minsn) "\", "
    "\"" (minsn-mnemonic minsn) "\",\n"
    "    "
    (gen-syntax-entry "MNEM" "OP" (minsn-syntax minsn) (obj-isa-list minsn))
    ",\n"
    "    (PTR) & macro_" (gen-sym minsn) "_expansions[0],\n"
    "    "
    (gen-obj-attr-defn 'minsn minsn all-attrs num-non-bools gen-insn-attr-mask)
    "\n"
    "  },\n"))
)

; Return a macro-insn opcode table entry.
; ??? wip, not currently used.

(define (/gen-minsn-opcode-entry minsn all-attrs num-non-bools)
  (gen-obj-sanitize
   minsn
   (string-list
    "  /* " (minsn-syntax minsn) " */\n"
    "  {\n"
    "    "
    "-1, " ; macro-insns are not currently enumerated, no current need to
    "\"" (obj:str-name minsn) "\", "
    "\"" (minsn-mnemonic minsn) "\",\n"
    "    "
    (gen-syntax-entry "MNEM" "OP" (minsn-syntax minsn) (obj-isa-list minsn))
    ",\n"
    "    (PTR) & macro_" (gen-sym minsn) "_expansions[0],\n"
    "    "
    (gen-obj-attr-defn 'minsn minsn all-attrs num-non-bools gen-insn-attr-mask)
    "\n"
    "  },\n"))
)

; Macro insn expansion has one basic form, but we optimize the common case
; of unconditionally expanding the input text to one instruction.
; The general form is a Scheme expression that is interpreted at runtime to
; decide how to perform the expansion.  Yes, that means having a (perhaps
; minimal) Scheme interpreter in the assembler.
; Another thing to do is have a builder for each real insn so instead of
; expanding to text, the macro-expansion could invoke the builder for each
; expanded-to insn.

(define (/gen-macro-insn-table)
  (logit 2 "Generating macro-instruction table ...\n")
  (let* ((minsn-list (map (lambda (minsn)
			    (if (has-attr? minsn 'ALIAS)
				(minsn-make-alias (make-prefix-context "gen-macro-insn-table")
						  minsn)
				minsn))
			  (current-minsn-list)))
	 (all-attrs (current-insn-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-write
     "/* Formats for ALIAS macro-insns.  */\n\n"
     (gen-define-with-symcat "F(f) & @@arch@@_cgen_ifld_table[@@ARCH@@_" "f]")
     (lambda ()
       (string-write-map /gen-ifmt-table-1
			 (map insn-ifmt (find (lambda (minsn)
						(has-attr? minsn 'ALIAS))
					      minsn-list))))
     "#undef F\n\n"
     "/* Each non-simple macro entry points to an array of expansion possibilities.  */\n\n"
     (lambda () 
       (string-write-map (lambda (minsn)
			   (if (has-attr? minsn 'ALIAS)
			       ""
			       (string-append
				"static const CGEN_MINSN_EXPANSION macro_" (gen-sym minsn) "_expansions[] =\n"
				"{\n"
				(string-map /gen-miexpn-entry
					    (minsn-expansions minsn))
				"  { 0, 0 }\n};\n\n")))
			 minsn-list))
     (gen-define-with-symcat "A(a) (1 << CGEN_INSN_" "a)")
     (gen-define-with-symcat "OPERAND(op) @@ARCH@@_OPERAND_" "op")
     "\
#define MNEM CGEN_SYNTAX_MNEMONIC /* syntax value for mnemonic */
#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))

/* The macro instruction table.  */

static const CGEN_IBASE @@arch@@_cgen_macro_insn_table[] =
{
"
     (lambda ()
       (string-write-map (lambda (minsn)
			   (logit 3 "Generating macro-insn table entry for " (obj:name minsn) " ...\n")
			   ; Simple macro-insns are emitted as aliases of real insns.
			   (if (has-attr? minsn 'ALIAS)
			       (gen-insn-table-entry minsn all-attrs num-non-bools)
			       (/gen-minsn-table-entry minsn all-attrs num-non-bools)))
			 minsn-list))
     "\
};

/* The macro instruction opcode table.  */

static const CGEN_OPCODE @@arch@@_cgen_macro_insn_opcode_table[] =
{\n"
     (lambda ()
       (string-write-map (lambda (minsn)
			   (logit 3 "Generating macro-insn table entry for " (obj:name minsn) " ...\n")
			   ; Simple macro-insns are emitted as aliases of real insns.
			   (if (has-attr? minsn 'ALIAS)
			       (/gen-insn-opcode-entry minsn all-attrs num-non-bools)
			       (/gen-minsn-opcode-entry minsn all-attrs num-non-bools)))
			 minsn-list))
     "\
};

#undef A
#undef OPERAND
#undef MNEM
#undef OP
\n"
    ))
)

; Emit a function to call to initialize the opcode table.

(define (/gen-opcode-init-fn)
  (string-write
   "\
/* Set the recorded length of the insn in the CGEN_FIELDS struct.  */

static void
set_fields_bitsize (CGEN_FIELDS *fields, int size)
{
  CGEN_FIELDS_BITSIZE (fields) = size;
}

/* Function to call before using the operand instance table.
   This plugs the opcode entries and macro instructions into the cpu table.  */

void
@@arch@@_cgen_init_opcode_table (CGEN_CPU_DESC cd)
{
  int i;
  int num_macros = (sizeof (@@arch@@_cgen_macro_insn_table) /
		    sizeof (@@arch@@_cgen_macro_insn_table[0]));
  const CGEN_IBASE *ib = & @@arch@@_cgen_macro_insn_table[0];
  const CGEN_OPCODE *oc = & @@arch@@_cgen_macro_insn_opcode_table[0];
  CGEN_INSN *insns = xmalloc (num_macros * sizeof (CGEN_INSN));

  /* This test has been added to avoid a warning generated
     if memset is called with a third argument of value zero.  */
  if (num_macros >= 1)
    memset (insns, 0, num_macros * sizeof (CGEN_INSN));
  for (i = 0; i < num_macros; ++i)
    {
      insns[i].base = &ib[i];
      insns[i].opcode = &oc[i];
      @@arch@@_cgen_build_insn_regex (& insns[i]);
    }
  cd->macro_insn_table.init_entries = insns;
  cd->macro_insn_table.entry_size = sizeof (CGEN_IBASE);
  cd->macro_insn_table.num_init_entries = num_macros;

  oc = & @@arch@@_cgen_insn_opcode_table[0];
  insns = (CGEN_INSN *) cd->insn_table.init_entries;
  for (i = 0; i < MAX_INSNS; ++i)
    {
      insns[i].opcode = &oc[i];
      @@arch@@_cgen_build_insn_regex (& insns[i]);
    }

  cd->sizeof_fields = sizeof (CGEN_FIELDS);
  cd->set_fields_bitsize = set_fields_bitsize;

  cd->asm_hash_p = asm_hash_insn_p;
  cd->asm_hash = asm_hash_insn;
  cd->asm_hash_size = CGEN_ASM_HASH_SIZE;

  cd->dis_hash_p = dis_hash_insn_p;
  cd->dis_hash = dis_hash_insn;
  cd->dis_hash_size = CGEN_DIS_HASH_SIZE;
}
"
   )
)

; Top level C code generators

; FIXME: Create enum objects for all the enums we explicitly declare here.
; Then they'd be usable and we wouldn't have to special case them here.

(define (cgen-opc.h)
  (logit 1 "Generating " (current-arch-name) "-opc.h ...\n")
  (string-write
   (gen-c-copyright "Instruction opcode header for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#ifndef @@ARCH@@_OPC_H
#define @@ARCH@@_OPC_H

#ifdef __cplusplus
extern \"C\" {
#endif

"
   (lambda () (gen-extra-opc.h (opc-file-path) (current-arch-name)))
   /gen-insn-enum
   /gen-ifield-decls
   /gen-init-macros
   "

   #ifdef __cplusplus
   }
   #endif

#endif /* @@ARCH@@_OPC_H */
"
   )
)

; This file contains the instruction opcode table.

(define (cgen-opc.c)
  (logit 1 "Generating " (current-arch-name) "-opc.c ...\n")
  (string-write
   (gen-c-copyright "Instruction opcode table for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#include \"sysdep.h\"
#include \"ansidecl.h\"
#include \"bfd.h\"
#include \"symcat.h\"
#include \"@@prefix@@-desc.h\"
#include \"@@prefix@@-opc.h\"
#include \"libiberty.h\"
\n"
   (lambda () (gen-extra-opc.c (opc-file-path) (current-arch-name)))
   /gen-hash-decls
   /gen-ifmt-table
   /gen-insn-opcode-table
   /gen-macro-insn-table
   /gen-hash-fns
   /gen-opcode-init-fn
   )
)
@


1.19
log
@2016-04-14  Trevor Saunders  <tbsaunde@@tbsaunde.org>

        * opc-itab.scm (asm_hash_insn_p): Stop using old style arguments.
        (dis_hash_insn_p): Likewise.
        (asm_hash_insn): Likewise.
        (dis_hash_insn): Likewise.
        * opc-opinst.scm (@@arch@@_cgen_init_opinst_table): Likewise.
@
text
@d704 4
d715 4
@


1.18
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@d415 1
a415 2
asm_hash_insn_p (insn)
     const CGEN_INSN *insn ATTRIBUTE_UNUSED;
d421 1
a421 2
dis_hash_insn_p (insn)
     const CGEN_INSN *insn;
d453 1
a453 2
asm_hash_insn (mnem)
     const char * mnem;
d462 2
a463 3
dis_hash_insn (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value ATTRIBUTE_UNUSED;
@


1.17
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d125 2
a126 1
(define (compute-syntax strip-mnemonic? strip-mnem-operands? syntax op-macro)
d169 1
a169 1
		     (if (not (current-op-lookup operand))
d187 1
d189 1
a189 1
(define (gen-syntax-entry mnem op syntax)
d195 1
a195 1
   (compute-syntax #t #f syntax op)
d346 3
a348 1
    "    " (gen-syntax-entry "MNEM" "OP" (insn-syntax insn)) ",\n"
d513 3
a515 1
    "    " (gen-syntax-entry "MNEM" "OP" (minsn-syntax minsn)) ",\n"
d536 3
a538 1
    "    " (gen-syntax-entry "MNEM" "OP" (minsn-syntax minsn)) ",\n"
@


1.16
log
@	Clean up cpu file parsing, pass context consistently instead of the
	old "errtxt" argument.
	NOTE: ACU == "All Callers Updated".
	* attr.scm (-parse-simple-attribute): Renamed from
	parse-simple-attribute, ACU.
	(-attr-parse): Change errtxt argument to context, ACU.
	(-attr-read): Ditto.
	(atlist-parse): Ditto.  Put context arg first.
	(attr-parse): Use parse-error instead of context-error.
	* enum.scm (parse-enum-vals): Change errtxt argument to context, ACU.
	(-enum-parse-prefix, -enum-parse, -enum-read): Ditto.
	* hardware.scm (-keyword-parse): Renamed from keyword-parse.
	`context' arg is now a <context> object.  ACU.
	(-keyword-read): `context' arg is now a <context> object.  ACU.
	(-hw-parse-indices): Change errtxt argument to context, ACU.
	(-hw-parse-values, -hw-parse-handlers): Ditto.
	(-hw-parse-getter, -hw-parse-setter, -hw-parse, -hw-read): Ditto.
	(-hw-validate-layout, -hw-create-getter-from-layout,
	-hw-create-setter-from-layout): Ditto.
	(<hw-register>:parse!, <hw-pc>:parse!): Ditto.
	(<hw-memory>:parse!, <hw-immediate>:parse!): Ditto.
	(<hw-address>:parse!): Ditto.
	* ifield.scm (-ifield-parse, ifield-read): Ditto.
	(-ifld-parse-follows, -ifld-parse-encode-decode): Ditto.
	(-ifld-parse-encode, -ifld-parse-decode): Ditto.
	(-multi-ifield-parse, -multi-ifield-read): Ditto.
	* insn.scm (-insn-parse, -insn-read): Ditto.
	(parse-syntax): Ditto.  Put context arg first.
	(-parse-insn-format-symbol): Change errtxt argument to context, ACU.
	(-parse-insn-format-ifield-spec, -parse-insn-format-list): Ditto.
	(-parse-insn-format): Ditto.
	* mach.scm (-arch-parse-alignment, -arch-parse-machs): Ditto.
	(-arch-parse-isas): Ditto.
	(-isa-read): Add context arg, ACU.
	(-cpu-parse, -cpu-read, -mach-read): Ditto.
	* minsn.scm (-minsn-parse-expansion): Change errtxt argument to
	context, ACU.
	(-minsn-parse, -minsn-read, -minsn-compute-iflds): Ditto.
	(minsn-make-alias): Ditto.
	* mode.scm (-mode-parse): Ditto.
	(parse-mode-name): Ditto.  Put context arg first.
	* model.scm (-prefetch-parse, -retire-parse, -pipeline-parse): Change
	errtxt argument to context, ACU.
	(-unit-parse, -model-parse, -model-read): Ditto.
	* operand.scm (-operand-parse-getter): Use parse-error instead of
	context-error.
	(-operand-parse-setter): Ditto.
	(-operand-parse): Change errtxt argument to context, ACU.
	(-operand-read, -derived-operand-parse, -derived-operand-read): Ditto.
	(-anyof-operand-parse, -anyof-operand-read): Ditto.
	* read.scm (reader-error): Delete.  Use parse-error instead.
	(parse-error): Change errtxt argument to context, ACU.  Split args
	argument into expr and maybe-help-text.
	(-reader-process-expanded-1!): Reorganize.
	* rtl.scm (-subr-read): Change errtxt argument to context, ACU.
	* types.scm (parse-type): Ditto.
	* utils-cgen.scm (single-location->simple-string): New function.
	(<context>): Replace members file,lineno with location.
	(make-prefix-context): Renamed from context-make-prefix, ACU.
	(make-current-context): New function.
	(context-append, context-append-name): New functions.
	(context-make-reader): Delete.
	(parse-name): Change errtxt argument to context, ACU.
	Put context arg first.
	(parse-comment): Ditto.
	(parse-number): Change errtxt argument to context, ACU.
	(arg-list-validate-name, arg-list-check-no-args,
	arg-list-symbol-arg): Ditto.

	* read.scm (-cmd-if): Don't assume test is a list.

	* html.scm (get-insn-properties): Delete errtxt, unused.
@
text
@d17 1
a17 1
(define (-gen-init-macros)
d43 1
a43 1
(define (-gen-ifield-decls)
d201 1
a201 1
(define (-gen-ifmt-table-1 ifmt)
d219 1
a219 1
(define (-gen-ifmt-table)
d223 1
a223 1
   (string-list-map -gen-ifmt-table-1 (current-ifmt-list))
d298 1
a298 1
(define (-gen-insn-enum)
d337 1
a337 1
(define (-gen-insn-opcode-entry insn all-attrs num-non-bools)
d354 1
a354 1
(define (-gen-insn-opcode-table)
d377 1
a377 1
                           (-gen-insn-opcode-entry insn all-attrs
d396 1
a396 1
(define (-gen-hash-fns)
d473 1
a473 1
(define (-gen-hash-decls)
d491 1
a491 1
(define (-gen-miexpn-entry entry)
d499 1
a499 1
(define (-gen-minsn-table-entry minsn all-attrs num-non-bools)
d520 1
a520 1
(define (-gen-minsn-opcode-entry minsn all-attrs num-non-bools)
d547 1
a547 1
(define (-gen-macro-insn-table)
d561 1
a561 1
       (string-write-map -gen-ifmt-table-1
d574 1
a574 1
				(string-map -gen-miexpn-entry
d595 1
a595 1
			       (-gen-minsn-table-entry minsn all-attrs num-non-bools)))
d609 2
a610 2
			       (-gen-insn-opcode-entry minsn all-attrs num-non-bools)
			       (-gen-minsn-opcode-entry minsn all-attrs num-non-bools)))
d625 1
a625 1
(define (-gen-opcode-init-fn)
d702 3
a704 3
   -gen-insn-enum
   -gen-ifield-decls
   -gen-init-macros
d729 6
a734 6
   -gen-hash-decls
   -gen-ifmt-table
   -gen-insn-opcode-table
   -gen-macro-insn-table
   -gen-hash-fns
   -gen-opcode-init-fn
@


1.15
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d126 1
a126 1
  (let ((context "syntax computation")
d551 2
a552 1
				(minsn-make-alias "gen-macro-insn-table" minsn)
@


1.14
log
@        * fr30-opc.c: Regenerate.
        * frv-opc.c: Regenerate.
        * ip2k-opc.c: Regenerate.
        * iq2000-opc.c: Regenerate.
        * lm32-opc.c: Regenerate.
        * m32c-opc.c: Regenerate.
        * m32r-opc.c: Regenerate.
        * mep-opc.c: Regenerate.
        * mt-opc.c: Regenerate.
        * xc16x-opc.c: Regenerate.
        * xstormy16-opc.c: Regenerate.
        * tic54x-dis.c (print_instruction): Avoid compiler warning on
        sprintf call.

        * opc-itab.scm (<>_cgen_init_opcode_table): Avoid compiler warning
        about calling memset with a zero length.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2005 Red Hat, Inc.
@


1.14.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2005, 2009 Red Hat, Inc.
@


1.13
log
@Update function declarations to ISO C90 formatting
@
text
@d648 4
a651 1
  memset (insns, 0, num_macros * sizeof (CGEN_INSN));
@


1.13.4.1
log
@Check in ARCompact simulator.  A valid configuration is arc-elf.
This is not quite finished and has most likely a few files that are
obsolete & not used, but it's good enough to run gcc regression tests.
@
text
@a2 1
; Copyright (C) 2007 Free Software Foundation, Inc.
d15 1
a15 1
; ??? These were early escape hatches.  Only CGEN_INIT_PRINT is currently used.
d444 1
a444 1
#define CGEN_DIS_HASH(buf, value, big_p) (*(unsigned char *) (buf))
d461 1
a461 1
dis_hash_insn (buf, value, big_p)
a463 1
     int big_p ATTRIBUTE_UNUSED;
d465 1
a465 1
  return CGEN_DIS_HASH (buf, value, big_p);
d482 1
a482 1
static unsigned int dis_hash_insn (const char *, CGEN_INSN_INT, int);
@


1.12
log
@Fix compile time warning messages
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d479 4
a482 4
static int asm_hash_insn_p PARAMS ((const CGEN_INSN *));
static unsigned int asm_hash_insn PARAMS ((const char *));
static int dis_hash_insn_p PARAMS ((const CGEN_INSN *));
static unsigned int dis_hash_insn PARAMS ((const char *, CGEN_INSN_INT));
a626 2
static void set_fields_bitsize PARAMS ((CGEN_FIELDS *, int));

d630 1
a630 3
set_fields_bitsize (fields, size)
     CGEN_FIELDS *fields;
     int size;
d639 1
a639 2
@@arch@@_cgen_init_opcode_table (cd)
     CGEN_CPU_DESC cd;
d646 2
a647 1
  CGEN_INSN *insns = (CGEN_INSN *) xmalloc (num_macros * sizeof (CGEN_INSN));
@


1.11
log
@2003-09-08  Dave Brolley  <brolley@@redhat.com>

        On behalf of Doug Evans <dje@@sebabeach.org>
        Pass in paths to input files, instead of assuming they live in
        $srcdir/cpu.  Plus misc. option processing cleanup.
        * cgen-doc.scm (doc-arguments): Make options strings not symbols.
        Add pre-process pass to all options.
        * cgen-gas.scm (gas-arguments): Ditto.
        * cgen-sid.scm (sim-arguments): Ditto.
        * cgen-sim.scm (sim-arguments): Ditto.
        * cgen-stest.scm (stest-arguments): Ditto.
        * cgen-opc.scm (opc-arguments): Ditto.  New argument -OPC.
        (-opc-file-path): New global.
        (opc-file-path): New fn.
        * opcodes.scm (read-cpu.opc): Replace srcdir,cpu args with opc-file.
        All callers updated.
        (gen-extra-cpu.h,gen-extra-cpu.c,gen-extra-opc.h,gen-extra-opc.c,
        gen-extra-asm.c,gen-extra-dis.c,gen-extra-ibld.h,gen-extra-ibld.c):
        Replace srcdir arg with opc-file.  All callers updated.
        * read.scm (-opt-spec-update): Delete.
        (opt-get-first-pass,opt-get-second-pass): New fns.
        (-cgen): Process application-specific arguments in two passes.
@
text
@d205 1
a205 1
    "static const CGEN_IFMT " (gen-sym ifmt) " = {\n"
@


1.10
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d701 1
a701 1
   (lambda () (gen-extra-opc.h srcdir (current-arch-name))) ; from <arch>.opc
d728 1
a728 1
   (lambda () (gen-extra-opc.c srcdir (current-arch-name))) ; from <arch>.opc
@


1.9
log
@	* mach.scm (current-*-add!): Disallow redefinition.  Make result
	"unspecified".
	* insn.scm (insn-builtin!): Don't define relaxable here, now defined in
	operand.scm.
	* operand.scm (operand-builtin!): Define RELAXABLE for insns too.
	* cpu/m32r.cpu (disp8,disp24): RELAX renamed to RELAXABLE.

	* gen-all-doc: Split arm and frv docs up a bit.

	* cpu/arm.cpu: Add IDOC attribute.
	* cpu/frv.cpu: Ditto.
	* cpu/i960.cpu: Ditto.
	* cpu/openrisc.cpu: Ditto.
	* cpu/xstormy16.cpu: Ditto.
	* cpu/m32r.cpu: Ditto.
	(all insns): Explicitly specify IDOC attribute.

	* Makefile.am (MACH,ISAS,INSN_FILE_NAME): New vars.
	(desc,opcodes,sim-arch,sim-cpu,gas-test,sim-test): Use MACH,ISAS.
	(html): Use MACH,ISAS,INSN_FILE_NAME.  Generate insn.html separately.
	* Makefile.in: Regenerate.
	* attr.scm (<integer-attribute>:parse-value-def): Implement.
	(-attr-read): Defer computing default value until we know the type.
	(attr-has-attr?): Delete, move contents to <attr-list>:has-attr?.
	(<attr-list>:attr-present?): New method.
	(atlist-attr-present?,obj-attr-present?): New fns.
	(obj-has-attr-value?,obj-has-attr-value-no-default?): New fns.
	(attr-builtin!): New insn attr IDOC.
	* cgen-doc.scm (doc-arguments): New args -I,-N.
	* enum.scm (parse-enum-vals): New arg errtxt, all callers updated.
	Support comment as fourth element of enum value.
	(enum-val-name,enum-val-value,enum-val-attrs,enum-val-comment): New fns.
	* html.scm (gen-html-header): New arg kind, all callers updated.
	(gen-table-of-contents): New arg insn-file, all callers updated.
	(gen-list-entry,gen-doc-header): New fn.
	(get-operands): Delete.
	(gen-iformat-table): Rewrite.
	(gen-insn-doc-1): Print constant-folded and trimmed semantics.
	(gen-insn-doc-list): New args name, comment, insns.  All callers updated.
	(get-insn-properties,guess-insn-idoc-attr!): New fn.
	(insn-sets-pc?,insn-refs-mem?,insn-uses-fpu?): New fns.
	(get-insns-for-category,gen-categories-insn-lists): New fns.
	(gen-insn-docs): Simplify each insn's semantics first.
	Print insn tables sorted by IDOC categories.
	(*insn-html-file-name*): New global.
	(cgen-insn.html): New fn.
	(cgen-all): Update.
	* insn.scm (<insn>): Create a setter for the `tmp' member.
	* semantics.scm (insn-build-known-values): Renamed from
	-build-known-values.  All callers updated.

	* rtl.scm: Move traveral/evaluation support to ...
	* rtl-traverse.scm: New file.
	* read.scm: Maybe-load rtl-traverse.scm.

	* rtl.scm (-rtx-valid-types): Add SETRTX.

	* rtx-funcs.scm (nop,parallel): Fix mode.

	* utils.scm (eqv-lookup-index): New fn.
	(assq-lookup-index): Renamed from lookup-index.  All callers updated.

	* dev.scm (load-doc): Set APPLICATION.
@
text
@d507 1
a507 1
    "\"" (obj:name minsn) "\", "
d528 1
a528 1
    "\"" (obj:name minsn) "\", "
@


1.8
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d254 1
a254 1
   (number->string (lookup-index 'insn-normal opc-parse-handlers 0))
d256 1
a256 1
   (number->string (lookup-index 'insn-normal opc-insert-handlers 0))
d258 1
a258 1
   (number->string (lookup-index 'insn-normal opc-extract-handlers 0))
d260 1
a260 1
   (number->string (lookup-index 'insn-normal opc-print-handlers 0))
@


1.7
log
@Fix compile time warning messages in generated C files
@
text
@d694 1
a694 1
   (gen-copyright "Instruction opcode header for @@arch@@."
d717 1
a717 1
   (gen-copyright "Instruction opcode table for @@arch@@."
@


1.6
log
@
2001-07-12  Jeff Johnston  <jjohnstn@@redhat.com>

        * opc-itab.scm (@@arch@@_cgen_init_opcode_table): Unconditionally
        call @@arch@@_cgen_build_insn_regex now that regex support is in
        libiberty.
@
text
@d412 1
a412 1
     const CGEN_INSN *insn;
d462 2
a463 2
     const char * buf;
     CGEN_INSN_INT value;
d627 2
@


1.5
log
@2001-03-21  Ben Elliston  <bje@@redhat.com>

	* opc-itab.scm (compute-syntax): Emit a parse error if an operand
	given in a syntax string is undefined.
@
text
@d655 1
d664 4
a667 1
    insns[i].opcode = &oc[i];
@


1.4
log
@2001-03-21  Ben Elliston  <bje@@redhat.com>

	* opc-itab.scm (compute-syntax): Emit a parse error if an operand
	name is empty or invalid -- eg. "$(rs)" instead of "($rs)".
@
text
@d167 3
@


1.3
log
@2001-03-20  Ben Elliston  <bje@@redhat.com>

	* opc-itab.scm (-gen-insn-enum): Do not append a dummy `max'
	instruction onto the instruction list. Define MAX_INSNS to be the
	value of the last instruction enum plus one.
@
text
@d165 2
@


1.2
log
@* ANSI C fixes

2000-11-20  Frank Ch. Eigler  <fche@@redhat.com>

	* opc-itab.scm (-gen-ifmt-table, -gen-macro-insn-table: Remove
	unneeded "\n\n" from F() macro definition.

2000-11-15  Greg McGary  <greg@@mcgary.org>

	* utils-cgen.scm (gen-define-with-symcat): New function.
	* desc-cpu.scm (gen-ifld-defns): Use it.
	(gen-hw-table-defns): Use it.
	(-gen-hash-defines): Use it.
	(gen-operand-table): Use it.
	(gen-insn-table): Use it.  Remove spurious `#undef MNEM'.
	* opc-itab.scm (-gen-ifmt-table): Use it.
	(-gen-insn-opcode-table): Use it.
	(-gen-macro-insn-table): Use it.
	* opc-opinst.scm (-gen-operand-instance-tables): Use it.
	* sim-cpu.scm (cgen-semantics.c): Use it.
	(cgen-sem-switch.c): Use it.
@
text
@d295 10
a304 10
  (string-list
   (gen-enum-decl 'cgen_insn_type "@@arch@@ instruction types"
		  "@@ARCH@@_INSN_"
		  (cons '(invalid)
			(append (gen-obj-list-enums (non-multi-insns (current-insn-list)))
				'((max)))))
   "/* Index of `invalid' insn place holder.  */\n"
   "#define CGEN_INSN_INVALID @@ARCH@@_INSN_INVALID\n\n"
   "/* Total number of insns in table.  */\n"
   "#define MAX_INSNS ((int) @@ARCH@@_INSN_MAX)\n\n"
d306 1
@


1.1
log
@Initial revision
@
text
@d217 1
a217 1
   "#define F(f) & @@arch@@_cgen_ifld_table[CONCAT2 (@@ARCH@@_,f)]\n\n"
d353 2
a355 1
#define A(a) (1 << CONCAT2 (CGEN_INSN_,a))
a356 1
#define OPERAND(op) CONCAT2 (@@ARCH@@_OPERAND_,op)
d379 1
a380 1
#undef OPERAND
d552 1
a552 1
     "#define F(f) & @@arch@@_cgen_ifld_table[CONCAT2 (@@ARCH@@_,f)]\n\n"
d571 2
a573 1
#define A(a) (1 << CONCAT2 (CGEN_INSN_,a))
a574 1
#define OPERAND(op) CONCAT2 (@@ARCH@@_OPERAND_,op)
d609 1
a610 1
#undef OPERAND
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
