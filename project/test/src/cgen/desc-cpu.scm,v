head	1.36;
access;
symbols
	sid-snapshot-20180601:1.36
	cgen-snapshot-20180601:1.36
	sid-snapshot-20180501:1.36
	cgen-snapshot-20180501:1.36
	sid-snapshot-20180401:1.36
	cgen-snapshot-20180401:1.36
	sid-snapshot-20180301:1.35
	cgen-snapshot-20180301:1.35
	sid-snapshot-20180201:1.35
	cgen-snapshot-20180201:1.35
	sid-snapshot-20180101:1.35
	cgen-snapshot-20180101:1.35
	sid-snapshot-20171201:1.35
	cgen-snapshot-20171201:1.35
	sid-snapshot-20171101:1.35
	cgen-snapshot-20171101:1.35
	sid-snapshot-20171001:1.35
	cgen-snapshot-20171001:1.35
	sid-snapshot-20170901:1.35
	cgen-snapshot-20170901:1.35
	sid-snapshot-20170801:1.35
	cgen-snapshot-20170801:1.35
	sid-snapshot-20170701:1.35
	cgen-snapshot-20170701:1.35
	sid-snapshot-20170601:1.35
	cgen-snapshot-20170601:1.35
	sid-snapshot-20170501:1.35
	cgen-snapshot-20170501:1.35
	sid-snapshot-20170401:1.34
	cgen-snapshot-20170401:1.34
	sid-snapshot-20170301:1.34
	cgen-snapshot-20170301:1.34
	sid-snapshot-20170201:1.34
	cgen-snapshot-20170201:1.34
	sid-snapshot-20170101:1.34
	cgen-snapshot-20170101:1.34
	sid-snapshot-20161201:1.34
	cgen-snapshot-20161201:1.34
	sid-snapshot-20161101:1.34
	cgen-snapshot-20161101:1.34
	sid-snapshot-20160901:1.34
	cgen-snapshot-20160901:1.34
	sid-snapshot-20160801:1.34
	cgen-snapshot-20160801:1.34
	sid-snapshot-20160701:1.33
	cgen-snapshot-20160701:1.33
	sid-snapshot-20160601:1.33
	cgen-snapshot-20160601:1.33
	sid-snapshot-20160501:1.33
	cgen-snapshot-20160501:1.33
	sid-snapshot-20160401:1.33
	cgen-snapshot-20160401:1.33
	sid-snapshot-20160301:1.33
	cgen-snapshot-20160301:1.33
	sid-snapshot-20160201:1.33
	cgen-snapshot-20160201:1.33
	sid-snapshot-20160101:1.33
	cgen-snapshot-20160101:1.33
	sid-snapshot-20151201:1.33
	cgen-snapshot-20151201:1.33
	sid-snapshot-20151101:1.33
	cgen-snapshot-20151101:1.33
	sid-snapshot-20151001:1.33
	cgen-snapshot-20151001:1.33
	sid-snapshot-20150901:1.33
	cgen-snapshot-20150901:1.33
	sid-snapshot-20150801:1.33
	cgen-snapshot-20150801:1.33
	sid-snapshot-20150701:1.33
	cgen-snapshot-20150701:1.33
	sid-snapshot-20150601:1.33
	cgen-snapshot-20150601:1.33
	sid-snapshot-20150501:1.33
	cgen-snapshot-20150501:1.33
	sid-snapshot-20150401:1.33
	cgen-snapshot-20150401:1.33
	sid-snapshot-20150301:1.33
	cgen-snapshot-20150301:1.33
	sid-snapshot-20150201:1.33
	cgen-snapshot-20150201:1.33
	sid-snapshot-20150101:1.33
	cgen-snapshot-20150101:1.33
	sid-snapshot-20141201:1.33
	cgen-snapshot-20141201:1.33
	sid-snapshot-20141101:1.33
	cgen-snapshot-20141101:1.33
	sid-snapshot-20141001:1.33
	cgen-snapshot-20141001:1.33
	sid-snapshot-20140901:1.33
	cgen-snapshot-20140901:1.33
	sid-snapshot-20140801:1.33
	cgen-snapshot-20140801:1.33
	sid-snapshot-20140701:1.33
	cgen-snapshot-20140701:1.33
	sid-snapshot-20140601:1.33
	cgen-snapshot-20140601:1.33
	sid-snapshot-20140501:1.33
	cgen-snapshot-20140501:1.33
	sid-snapshot-20140401:1.33
	cgen-snapshot-20140401:1.33
	sid-snapshot-20140301:1.33
	cgen-snapshot-20140301:1.33
	sid-snapshot-20140201:1.33
	cgen-snapshot-20140201:1.33
	sid-snapshot-20140101:1.33
	cgen-snapshot-20140101:1.33
	sid-snapshot-20131201:1.33
	cgen-snapshot-20131201:1.33
	sid-snapshot-20131101:1.33
	cgen-snapshot-20131101:1.33
	sid-snapshot-20131001:1.33
	cgen-snapshot-20131001:1.33
	sid-snapshot-20130901:1.33
	cgen-snapshot-20130901:1.33
	sid-snapshot-20130801:1.33
	cgen-snapshot-20130801:1.33
	sid-snapshot-20130701:1.33
	cgen-snapshot-20130701:1.33
	sid-snapshot-20130601:1.33
	cgen-snapshot-20130601:1.33
	sid-snapshot-20130501:1.33
	cgen-snapshot-20130501:1.33
	sid-snapshot-20130401:1.33
	cgen-snapshot-20130401:1.33
	sid-snapshot-20130301:1.33
	cgen-snapshot-20130301:1.33
	sid-snapshot-20130201:1.33
	cgen-snapshot-20130201:1.33
	sid-snapshot-20130101:1.33
	cgen-snapshot-20130101:1.33
	sid-snapshot-20121201:1.33
	cgen-snapshot-20121201:1.33
	sid-snapshot-20121101:1.33
	cgen-snapshot-20121101:1.33
	sid-snapshot-20121001:1.33
	cgen-snapshot-20121001:1.33
	sid-snapshot-20120901:1.33
	cgen-snapshot-20120901:1.33
	sid-snapshot-20120801:1.33
	cgen-snapshot-20120801:1.33
	sid-snapshot-20120701:1.33
	cgen-snapshot-20120701:1.33
	sid-snapshot-20120601:1.33
	cgen-snapshot-20120601:1.33
	sid-snapshot-20120501:1.33
	cgen-snapshot-20120501:1.33
	sid-snapshot-20120401:1.33
	cgen-snapshot-20120401:1.33
	sid-snapshot-20120301:1.33
	cgen-snapshot-20120301:1.33
	sid-snapshot-20120201:1.33
	cgen-snapshot-20120201:1.33
	sid-snapshot-20120101:1.33
	cgen-snapshot-20120101:1.33
	sid-snapshot-20111201:1.33
	cgen-snapshot-20111201:1.33
	sid-snapshot-20111101:1.33
	cgen-snapshot-20111101:1.33
	sid-snapshot-20111001:1.33
	cgen-snapshot-20111001:1.33
	sid-snapshot-20110901:1.33
	cgen-snapshot-20110901:1.33
	sid-snapshot-20110801:1.33
	cgen-snapshot-20110801:1.33
	sid-snapshot-20110701:1.33
	cgen-snapshot-20110701:1.33
	sid-snapshot-20110601:1.33
	cgen-snapshot-20110601:1.33
	sid-snapshot-20110501:1.33
	cgen-snapshot-20110501:1.33
	sid-snapshot-20110401:1.33
	cgen-snapshot-20110401:1.33
	sid-snapshot-20110301:1.33
	cgen-snapshot-20110301:1.33
	sid-snapshot-20110201:1.33
	cgen-snapshot-20110201:1.33
	sid-snapshot-20110101:1.33
	cgen-snapshot-20110101:1.33
	sid-snapshot-20101201:1.33
	cgen-snapshot-20101201:1.33
	sid-snapshot-20101101:1.33
	cgen-snapshot-20101101:1.33
	sid-snapshot-20101001:1.33
	cgen-snapshot-20101001:1.33
	sid-snapshot-20100901:1.33
	cgen-snapshot-20100901:1.33
	sid-snapshot-20100801:1.33
	cgen-snapshot-20100801:1.33
	sid-snapshot-20100701:1.33
	cgen-snapshot-20100701:1.33
	sid-snapshot-20100601:1.33
	cgen-snapshot-20100601:1.33
	sid-snapshot-20100501:1.33
	cgen-snapshot-20100501:1.33
	sid-snapshot-20100401:1.33
	cgen-snapshot-20100401:1.33
	sid-snapshot-20100301:1.33
	cgen-snapshot-20100301:1.33
	sid-snapshot-20100201:1.31
	cgen-snapshot-20100201:1.31
	sid-snapshot-20100101:1.30
	cgen-snapshot-20100101:1.30
	sid-snapshot-20091201:1.30
	cgen-snapshot-20091201:1.30
	sid-snapshot-20091101:1.29
	cgen-snapshot-20091101:1.29
	sid-snapshot-20091001:1.28
	cgen-snapshot-20091001:1.28
	arc-sim-20090309:1.22
	sid-snapshot-20090901:1.26
	cgen-snapshot-20090901:1.26
	sid-snapshot-20090801:1.24
	cgen-snapshot-20090801:1.24
	sid-snapshot-20090701:1.24
	cgen-snapshot-20090701:1.24
	dje-cgen-play1-branch:1.24.0.2
	dje-cgen-play1-branchpoint:1.24
	cgen-1_1-branch:1.23.0.2
	cgen-1_1-branchpoint:1.23
	sid-snapshot-20090601:1.22
	cgen-snapshot-20090601:1.22
	sid-snapshot-20090501:1.22
	cgen-snapshot-20090501:1.22
	sid-snapshot-20090401:1.22
	cgen-snapshot-20090401:1.22
	arc-insight_6_8-branch:1.22.0.4
	arc-insight_6_8-branchpoint:1.22
	sid-snapshot-20090301:1.22
	cgen-snapshot-20090301:1.22
	sid-snapshot-20090201:1.22
	cgen-snapshot-20090201:1.22
	sid-snapshot-20090101:1.22
	cgen-snapshot-20090101:1.22
	sid-snapshot-20081201:1.22
	cgen-snapshot-20081201:1.22
	sid-snapshot-20081101:1.22
	cgen-snapshot-20081101:1.22
	sid-snapshot-20081001:1.22
	cgen-snapshot-20081001:1.22
	sid-snapshot-20080901:1.22
	cgen-snapshot-20080901:1.22
	sid-snapshot-20080801:1.22
	cgen-snapshot-20080801:1.22
	sid-snapshot-20080701:1.22
	cgen-snapshot-20080701:1.22
	sid-snapshot-20080601:1.22
	cgen-snapshot-20080601:1.22
	sid-snapshot-20080501:1.22
	cgen-snapshot-20080501:1.22
	sid-snapshot-20080403:1.22
	sid-snapshot-20080401:1.22
	cgen-snapshot-20080401:1.22
	sid-snapshot-20080301:1.22
	cgen-snapshot-20080301:1.22
	sid-snapshot-20080201:1.22
	cgen-snapshot-20080201:1.22
	sid-snapshot-20080101:1.22
	cgen-snapshot-20080101:1.22
	sid-snapshot-20071201:1.22
	cgen-snapshot-20071201:1.22
	sid-snapshot-20071101:1.22
	cgen-snapshot-20071101:1.22
	sid-snapshot-20071001:1.22
	cgen-snapshot-20071001:1.22
	msnyder-fork-checkpoint-branch:1.22.0.2
	msnyder-fork-checkpoint-branchpoint:1.22
	sid-20020905-branchpoint:1.12
	sid-20020905-branch:1.12.0.4
	cagney_regbuf-20020515-branch:1.12.0.2
	cagney_regbuf-20020515-branchpoint:1.12
	cygnus_cvs_20020108_pre:1.10
	cgen-1-1-branch:1.8.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.36
date	2018.03.03.01.31.30;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2017.04.13.11.58.48;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2016.07.25.15.39.06;	author fche;	state Exp;
branches;
next	1.33;

1.33
date	2010.02.13.03.39.15;	author devans;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.12.02.12.12;	author devans;	state Exp;
branches;
next	1.31;

1.31
date	2010.01.25.03.50.43;	author devans;	state Exp;
branches;
next	1.30;

1.30
date	2009.11.03.16.24.01;	author devans;	state Exp;
branches;
next	1.29;

1.29
date	2009.10.24.00.20.30;	author devans;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.09.17.06.19;	author devans;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.07.22.17.33;	author devans;	state Exp;
branches;
next	1.26;

1.26
date	2009.08.24.06.46.16;	author devans;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.22.23.41.05;	author devans;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.20.21.34.28;	author devans;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2005.10.28.19.30.02;	author brolley;	state Exp;
branches;
next	1.21;

1.21
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.22.00.31.31;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.09.20.53.42;	author jimb;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.08.17.17.22;	author brolley;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.14.00.02.40;	author brolley;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.12.22.31.31;	author brolley;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.02.21.53.53;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.08.20.47.04;	author graydon;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.22.21.45.38;	author graydon;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.13.09.38.02;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.09.08.24.22;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.12.02.32.25;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.20.20.48.33;	author patrickm;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.02.22.50.13;	author patrickm;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.06.12.11.09;	author bje;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.03.04.53.23;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.20.19.03.33;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.02.19.13.53;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.23.2.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.36
log
@binutils opcodes error messages

This patch is aimed at making binutils/opcodes files comply with the
GNU coding standard regarding error messages, that is, they should
start with the program name followed by a colon, then a lower case
message.  Accomplished by calling opcodes_error_handler to output the
program name (and final '\n'), rather than calling fprintf.

	* desc-cpu.scm (opcodes_error_handler): Define.
	(@@arch@@_cgen_rebuild_tables): Use opcodes_error_handler.
	(@@arch@@_cgen_cpu_open): Likewise.
	* opc-asmdis.scm (@@arch@@_cgen_parse_operand): Likewise.
	(@@arch@@_cgen_print_operand): Likewise.
	* opc-ibld.scm (@@arch@@_cgen_get_int_operand): Likewise.
	(@@arch@@_cgen_get_vma_operand): Likewise.
	(@@arch@@_cgen_set_int_operand): Likewise.
	(@@arch@@_cgen_set_vma_operand): Likewise.
	(@@arch@@_cgen_insert_operand): Likewise.
	(@@arch@@_cgen_extract_operand): Likewise.
	* utils.scm: Update emitted copyright dates.
@
text
@; Generate .c/.h versions of main elements of cpu description file.
; Copyright (C) 2000, 2001, 2002, 2003, 2005, 2009, 2010 Red Hat, Inc.
; This file is part of CGEN.

; ISA support code.

(define (/gen-isa-table-defns)
  (logit 2 "Generating isa table defns ...\n")

  (string-list
   "\
/* Instruction set variants.  */

static const CGEN_ISA @@arch@@_cgen_isa_table[] = {
"
   (string-list-map (lambda (isa)
		      (gen-obj-sanitize
		       isa
		       (string-append "  { "
				      "\"" (obj:str-name isa) "\", "
				      (number->string
				       (isa-default-insn-bitsize isa))
				      ", "
				      (number->string
				       (isa-base-insn-bitsize isa))
				      ", "
				      (number->string
				       (isa-min-insn-bitsize isa))
				      ", "
				      (number->string
				       (isa-max-insn-bitsize isa))
				      " },\n")))
		    (current-isa-list))
   "\
  { 0, 0, 0, 0, 0 }
};
\n"
   )
)

; Mach support code.

; Return C code to describe the various cpu variants.
; Currently this is quite simple, the various cpu names and their mach numbers
; are recorded in a "keyword" table.
; ??? No longer used as there is the mach attribute.
;
;(set! mach-table (make <keyword> 'mach "machine list"
;			(make <attr-list> "" nil) ; FIXME: sanitization?
;			(map (lambda (elm) (list (obj:name elm) (mach-number elm)))
;			     (current-mach-list))))

(define (/gen-mach-table-decls)
  (logit 2 "Generating machine table decls ...\n")
  "" ; (gen-decl mach-table)
)

(define (/gen-mach-table-defns)
  (logit 2 "Generating machine table defns ...\n")

  (string-list
   "\
/* Machine variants.  */

static const CGEN_MACH @@arch@@_cgen_mach_table[] = {
"
   (string-list-map (lambda (mach)
		      (gen-obj-sanitize
		       mach
		       (string-append "  { "
				      "\"" (obj:str-name mach) "\", "
				      "\"" (mach-bfd-name mach) "\", "
				      (mach-enum mach) ", "
				      (number->string (cpu-insn-chunk-bitsize (mach-cpu mach)))
				      " },\n")))
		    (current-mach-list))
   "\
  { 0, 0, 0, 0 }
};
\n"
   )
)

; Attribute support code.

; Return C code to describe the various attributes.

(define (/gen-attr-table-decls)
  (logit 2 "Generating attribute table decls ...\n")
  (string-append
   "/* Attributes.  */\n"
   "extern const CGEN_ATTR_TABLE @@arch@@_cgen_hardware_attr_table[];\n"
   "extern const CGEN_ATTR_TABLE @@arch@@_cgen_ifield_attr_table[];\n"
   "extern const CGEN_ATTR_TABLE @@arch@@_cgen_operand_attr_table[];\n"
   "extern const CGEN_ATTR_TABLE @@arch@@_cgen_insn_attr_table[];\n"
   "\n"
   )
)

; Alternative GEN-MASK argument to gen-bool-attrs.
; This uses the `A' macro to abbreviate the attribute definition.

(define (gen-A-attr-mask prefix name)
  (string-append "A(" (string-upcase (gen-c-symbol name)) ")")
)

; Instruction fields support code.

; Return C code to declare various ifield bits.

(define (gen-ifld-decls)
  (logit 2 "Generating instruction field decls ...\n")
  (string-list
   "/* Ifield support.  */\n\n"
   "/* Ifield attribute indices.  */\n\n"
   (gen-attr-enum-decl "cgen_ifld" (current-ifld-attr-list))
   (gen-attr-accessors "cgen_ifld" (current-ifld-attr-list))
   (gen-enum-decl 'ifield_type "@@arch@@ ifield types"
		  "@@ARCH@@_"
		  (append (gen-obj-list-enums (non-derived-ifields (current-ifld-list)))
			  '((f-max))))
   "#define MAX_IFLD ((int) @@ARCH@@_F_MAX)\n\n"
   )
)

; Return C code to define the instruction field table,
; and any other ifield related definitions.

(define (gen-ifld-defns)
  (logit 2 "Generating ifield table ...\n")
  (let* ((ifld-list (current-ifld-list))
	 (all-attrs (current-ifld-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-list
     "
/* The instruction field table.  */

"
     (gen-define-with-symcat "A(a) (1 << CGEN_IFLD_" "a)")
     "
const CGEN_IFLD @@arch@@_cgen_ifld_table[] =
{
"
     (string-list-map
      (lambda (ifld)
	(gen-obj-sanitize ifld
			  (string-append
			   "  { "
			   (ifld-enum ifld) ", "
			   "\"" (obj:str-name ifld) "\", "
                           (if
                            (or (has-attr? ifld 'VIRTUAL)
                                (derived-ifield? ifld))
                             "0, 0, 0, 0,"
                             (string-append
		              (number->string (ifld-word-offset ifld)) ", "
			      (number->string (ifld-word-length ifld)) ", "
			      (number->string (ifld-start ifld)) ", "
			      (number->string (ifld-length ifld)) ", "))
			   (gen-obj-attr-defn 'ifld ifld all-attrs
				      num-non-bools gen-A-attr-mask)
			   "  },\n")))
      ifld-list)
     "\
  { 0, 0, 0, 0, 0, 0, " (gen-obj-attr-end-defn all-attrs num-non-bools) " }
};

#undef A

"
     ))
)

; Hardware support.

; Return C code to declare the various hardware bits
; that can be (or must be) defined before including opcode/cgen.h.

(define (gen-hw-decls)
  (logit 2 "Generating hardware decls ...\n")
  (string-list
   "/* Hardware attribute indices.  */\n\n"
   (gen-attr-enum-decl "cgen_hw" (current-hw-attr-list))
   (gen-attr-accessors "cgen_hw" (current-hw-attr-list))
   (gen-enum-decl 'cgen_hw_type "@@arch@@ hardware types"
		  "HW_" ; FIXME: @@ARCH@@_
		  (append (nub (map (lambda (hw)
				      (cons (hw-sem-name hw)
					    (cons '-
						  (atlist-attrs
						   (obj-atlist hw)))))
				    (current-hw-list))
			       (lambda (elm) (car elm)))
			  '((max))))
   "#define MAX_HW ((int) HW_MAX)\n\n"
   )
)

; Return declarations of variables tables used by HW.

(define (/gen-hw-decl hw)
  (string-append
   (if (hw-indices hw)
       (gen-decl (hw-indices hw))
       "")
   (if (hw-values hw)
       (gen-decl (hw-values hw))
       "")
   )
)

; Return C code to declare the various hardware bits
; that must be defined after including opcode/cgen.h.

(define (gen-hw-table-decls)
  (logit 2 "Generating hardware table decls ...\n")
  (string-list
   "/* Hardware decls.  */\n\n"
   (string-map /gen-hw-decl (current-hw-list))
   "\n"
   "extern const CGEN_HW_ENTRY @@arch@@_cgen_hw_table[];\n"
   )
)

; Return definitions of variables tables used by HW.
; Only do this for `PRIVATE' elements.  Public ones are emitted elsewhere.

(define (/gen-hw-defn hw)
  (string-append
   (if (and (hw-indices hw)
	    (obj-has-attr? (hw-indices hw) 'PRIVATE))
       (gen-defn (hw-indices hw))
       "")
   (if (and (hw-values hw)
	    (obj-has-attr? (hw-values hw) 'PRIVATE))
       (gen-defn (hw-values hw))
       "")
   )
)

; Generate the tables for the various hardware bits (register names, etc.).
; A table is generated for each element, and then another table is generated
; which collects them all together.
; Uses include looking up a particular register set so that a new reg
; can be added to it [at runtime].

(define (gen-hw-table-defns)
  (logit 2 "Generating hardware table ...\n")
  (let* ((all-attrs (current-hw-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-list
     (string-list-map gen-defn (current-kw-list))
     (string-list-map /gen-hw-defn (current-hw-list))
     "
/* The hardware table.  */

"
     (gen-define-with-symcat "A(a) (1 << CGEN_HW_" "a)")
     "
const CGEN_HW_ENTRY @@arch@@_cgen_hw_table[] =
{
"
     (string-list-map
      (lambda (hw)
	(gen-obj-sanitize hw
			  (string-list
			   "  { "
			   "\"" (obj:str-name hw) "\", "
			   (hw-enum hw) ", "
			   ; ??? No element currently requires both indices and
			   ; values specs so we only output the needed one.
			   (or (and (hw-indices hw)
				    (send (hw-indices hw) 'gen-table-entry))
			       (and (hw-values hw)
				    (send (hw-values hw) 'gen-table-entry))
			       "CGEN_ASM_NONE, 0, ")
			   (gen-obj-attr-defn 'hw hw all-attrs
					      num-non-bools gen-A-attr-mask)
			   " },\n")))
      (current-hw-list))
     "\
  { 0, 0, CGEN_ASM_NONE, 0, " (gen-obj-attr-end-defn all-attrs num-non-bools) " }
};

#undef A

"
     ))
)

; Utilities of cgen-opc.h.

; Return #define's of several constants.
; FIXME: Some of these to be moved into table of structs, one per cpu family.

(define (/gen-hash-defines)
  (logit 2 "Generating #define's ...\n")
  (string-list
   "#define CGEN_ARCH @@arch@@\n\n"
   "/* Given symbol S, return @@arch@@_cgen_<S>.  */\n"
   (gen-define-with-symcat "CGEN_SYM(s) @@arch@@" "_cgen_" "s")
   "\n\n/* Selected cpu families.  */\n"
   ; FIXME: Move to sim's arch.h.
   (string-map (lambda (cpu)
		 (gen-obj-sanitize cpu
				   (string-append "#define HAVE_CPU_"
						  (string-upcase (gen-sym cpu))
						  "\n")))
	       (current-cpu-list))
   "\n"
   "#define CGEN_INSN_LSB0_P " (if (current-arch-insn-lsb0?) "1" "0")
   "\n\n"
   "/* Minimum size of any insn (in bytes).  */\n"
   "#define CGEN_MIN_INSN_SIZE "
   (number->string (bits->bytes
		    (apply min (map isa-min-insn-bitsize (current-isa-list)))))
   "\n\n"
   "/* Maximum size of any insn (in bytes).  */\n"
   "#define CGEN_MAX_INSN_SIZE "
   (number->string (bits->bytes
		    (apply max (map isa-max-insn-bitsize (current-isa-list)))))
   "\n\n"
   ; This tells the assembler/disassembler whether or not it can use an int to
   ; record insns, which is faster.  Since this controls the typedef of the
   ; insn buffer, only enable this if all isas support it.
   "#define CGEN_INT_INSN_P "
   (if (all-true? (map isa-integral-insn? (current-isa-list))) "1" "0")
   "\n"
   "\n"
   "/* Maximum number of syntax elements in an instruction.  */\n"
   "#define CGEN_ACTUAL_MAX_SYNTAX_ELEMENTS "
   ; The +2 account for the leading "MNEM" and trailing 0.
   (number->string (+ 2 (apply max (map (lambda (insn) 
					  (length (syntax-break-out (insn-syntax insn)
								    (obj-isa-list insn))))
					(current-insn-list)))))
   "\n"
   "\n"
   "/* CGEN_MNEMONIC_OPERANDS is defined if mnemonics have operands.\n"
   "   e.g. In \"b,a foo\" the \",a\" is an operand.  If mnemonics have operands\n"
   "   we can't hash on everything up to the space.  */\n"
   (if strip-mnemonic?
       "/*#define CGEN_MNEMONIC_OPERANDS*/\n"
       "#define CGEN_MNEMONIC_OPERANDS\n")
   "\n"
   ; "/* Maximum number of operands any insn or macro-insn has.  */\n"
   ; FIXME: Should compute.
   ; "#define CGEN_MAX_INSN_OPERANDS 16\n"
   ; "\n"
   "/* Maximum number of fields in an instruction.  */\n"
   "#define CGEN_ACTUAL_MAX_IFMT_OPERANDS "
   (number->string (apply max (map (lambda (f) (length (ifmt-ifields f)))
				   (current-ifmt-list))))
   "\n\n"
  )
)

; Operand support.

; Return C code to declare various operand bits.

(define (gen-operand-decls)
  (logit 2 "Generating operand decls ...\n")
  (string-list
   "/* Operand attribute indices.  */\n\n"
   (gen-attr-enum-decl "cgen_operand" (current-op-attr-list))
   (gen-attr-accessors "cgen_operand" (current-op-attr-list))
   (gen-enum-decl 'cgen_operand_type "@@arch@@ operand types"
		  "@@ARCH@@_OPERAND_"
		  (nub (append (gen-obj-list-enums (current-op-list))
			       '((max)))
		       car))
   "/* Number of operands types.  */\n"
   "#define MAX_OPERANDS " (number->string (length (gen-obj-list-enums (current-op-list)))) "\n\n"
   ; was: "#define MAX_OPERANDS ((int) @@ARCH@@_OPERAND_MAX)\n\n"
   "/* Maximum number of operands referenced by any insn.  */\n"
   "#define MAX_OPERAND_INSTANCES "
   (number->string (max-operand-instances))
   "\n\n"
   )
)

; Generate C code to define the operand table.

(define ifld-number-cache #f)
(define (ifld-number f)
  (if (not ifld-number-cache)
      (let* ((ls (find (lambda (f) (not (has-attr? f 'VIRTUAL)))
		       (non-derived-ifields (current-ifld-list))))
	     (numls (iota (length ls))))
	(set! ifld-number-cache 
	      (map (lambda (elt num) (cons (obj:name elt) num)) 
		   ls numls))))
  (number->string (cdr (assoc (obj:name f) ifld-number-cache))))

(define (gen-maybe-multi-ifld-of-op op)
  (let* ((idx (op:index op))
	 (ty (hw-index:type idx))
	 (fld (hw-index:value idx)))
    (gen-maybe-multi-ifld ty fld)))

(define (gen-maybe-multi-ifld ty fld)
  (let* ((field-ref "0")
	 (field-count "0"))
    (if (equal? ty 'ifield)
	(if (multi-ifield? fld) 
	    (begin
	      (set! field-ref (string-append "&" (ifld-enum fld) "_MULTI_IFIELD[0]"))
	      (set! field-count (number->string (length (elm-get fld 'subfields)))))
	    ; else	    
	      (set! field-ref (string-append "&@@arch@@_cgen_ifld_table[" (ifld-enum fld) "]"))))
    (string-append "{ " field-count ", { (const PTR) " field-ref " } }")))

(define (gen-multi-ifield-nodes)
  (let ((multis (find multi-ifield? (current-ifld-list))))
    (apply string-append
	   (append 
	    
	    '("\n\n/* multi ifield declarations */\n\n")
	    (map   
	     (lambda (ifld) 
	       (string-append 
		"const CGEN_MAYBE_MULTI_IFLD " 
		(ifld-enum ifld) "_MULTI_IFIELD [];\n"))
	     multis)

	    '("\n\n/* multi ifield definitions */\n\n")
	    (map   
	     (lambda (ifld)
	       (string-append
		"const CGEN_MAYBE_MULTI_IFLD " 
		(ifld-enum ifld) "_MULTI_IFIELD [] =\n{"
		(apply string-append 
		       (map (lambda (x) (string-append "\n    " (gen-maybe-multi-ifld 'ifield x) ",")) 
			    (elm-get ifld 'subfields)))
		"\n    { 0, { (const PTR) 0 } }\n};\n"))
	     multis)))))

(define (gen-operand-table)
  (logit 2 "Generating operand table ...\n")
  (let* ((all-attrs (current-op-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-list
     "
/* The operand table.  */

"
     (gen-define-with-symcat "A(a) (1 << CGEN_OPERAND_" "a)")
     (gen-define-with-symcat "OPERAND(op) @@ARCH@@_OPERAND_" "op")
"
const CGEN_OPERAND @@arch@@_cgen_operand_table[] =
{
"
     (string-list-map
      (lambda (op)
	(gen-obj-sanitize op
			  (string-append
			   "/* " (obj:str-name op) ": " (obj:comment op) " */\n"
                          (if (or (derived-operand? op)
                                  (anyof-operand? op))
                              ""
                              (string-append 
			         "  { "
    		   	         "\"" (obj:str-name op) "\", "
			         (op-enum op) ", "
			         (hw-enum (op:hw-name op)) ", "
			         (number->string (op:start op)) ", "
			         (number->string (op:length op)) ",\n"
			         "    "
                                 (gen-maybe-multi-ifld-of-op op) ", \n"
			         "    "
			         (gen-obj-attr-defn 'operand op all-attrs
				       	            num-non-bools gen-A-attr-mask)
			         "  },\n"
			      )))))
      (current-op-list))
     "/* sentinel */\n\
  { 0, 0, 0, 0, 0,\n    { 0, { (const PTR) 0 } },\n    " (gen-obj-attr-end-defn all-attrs num-non-bools) " }
};

#undef A

"
     )
    )
)

; Instruction table support.

; Return C code to declare various insn bits.

(define (gen-insn-decls)
  (logit 2 "Generating instruction decls ...\n")
  (string-list
   "/* Insn attribute indices.  */\n\n"
   (gen-attr-enum-decl "cgen_insn" (current-insn-attr-list))
   (gen-attr-accessors "cgen_insn" (current-insn-attr-list))
   )
)

; Generate an insn table entry for INSN.
; ALL-ATTRS is a list of all instruction attributes.
; NUM-NON-BOOLS is the number of non-boolean insn attributes.

(define (gen-insn-table-entry insn all-attrs num-non-bools)
  (gen-obj-sanitize
   insn
   (string-list
    "/* " (insn-syntax insn) " */\n"
    "  {\n"
    "    "
    (if (has-attr? insn 'ALIAS) "-1" (insn-enum insn)) ", "
    "\"" (obj:str-name insn) "\", "
    "\"" (insn-mnemonic insn) "\", "
    ;(if (has-attr? insn 'ALIAS) "0" (number->string (insn-length insn))) ",\n"
    (number->string (insn-length insn)) ",\n"
; ??? There is currently a problem with embedded newlines, and this might
; best be put in another file [the table is already pretty big].
; Might also wish to output bytecodes instead.
;    "    "
;    (if (insn-semantics insn)
;	(string-append "\""
;		       (with-output-to-string
;			 ; ??? Should we do macro expansion here?
;			 (lambda () (display (insn-semantics insn))))
;		       "\"")
;	"0")
;    ",\n"
    ; ??? Might wish to output the raw format spec here instead
    ; (either as plain text or bytecodes).
    ; Values could be lazily computed and cached.
    "    "
    (gen-obj-attr-defn 'insn insn all-attrs num-non-bools gen-A-attr-mask)
    "\n  },\n"))
)

; Generate insn table.

(define (gen-insn-table)
  (logit 2 "Generating instruction table ...\n")
  (let* ((all-attrs (current-insn-attr-list))
	 (num-non-bools (attr-count-non-bools all-attrs)))
    (string-write
     "
/* The instruction table.  */

#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))
"
     (gen-define-with-symcat "A(a) (1 << CGEN_INSN_" "a)")
"
static const CGEN_IBASE @@arch@@_cgen_insn_table[MAX_INSNS] =
{
  /* Special null first entry.
     A `num' value of zero is thus invalid.
     Also, the special `invalid' insn resides here.  */
  { 0, 0, 0, 0, " (gen-obj-attr-end-defn all-attrs num-non-bools) " },\n"

     (lambda ()
       (string-write-map (lambda (insn)
                           (logit 3 "Generating insn table entry for " (obj:name insn) " ...\n")
                           (gen-insn-table-entry insn all-attrs num-non-bools))
                         (non-multi-insns (current-insn-list))))

     "\
};

#undef OP
#undef A

"
     )
    )
)

; Cpu table handling support.
;
; ??? A lot of this can live in a machine independent file, but there's
; currently no place to put this file (there's no libcgen).  libopcodes is the
; wrong place as some simulator ports use this but they don't use libopcodes.

; Return C routines to open/close a cpu description table.
; This is defined here and not in cgen-opc.in because it refers to
; CGEN_{ASM,DIS}_HASH and insn_table/macro_insn_table which is defined
; earlier in the file.  ??? Things can certainly be rearranged though
; and opcodes/cgen.sh modified to insert the generated part into the middle
; of the file like is done for assembler/disassembler support.

(define (/gen-cpu-open)
  (string-append
   "\
#ifndef opcodes_error_handler
#define opcodes_error_handler(...) \\
  fprintf (stderr, __VA_ARGS__); fputc ('\\n', stderr)
#endif

static const CGEN_MACH * lookup_mach_via_bfd_name (const CGEN_MACH *, const char *);
static void build_hw_table      (CGEN_CPU_TABLE *);
static void build_ifield_table  (CGEN_CPU_TABLE *);
static void build_operand_table (CGEN_CPU_TABLE *);
static void build_insn_table    (CGEN_CPU_TABLE *);
static void @@arch@@_cgen_rebuild_tables (CGEN_CPU_TABLE *);

/* Subroutine of @@arch@@_cgen_cpu_open to look up a mach via its bfd name.  */

static const CGEN_MACH *
lookup_mach_via_bfd_name (const CGEN_MACH *table, const char *name)
{
  while (table->name)
    {
      if (strcmp (name, table->bfd_name) == 0)
	return table;
      ++table;
    }
  return NULL;
}

/* Subroutine of @@arch@@_cgen_cpu_open to build the hardware table.  */

static void
build_hw_table (CGEN_CPU_TABLE *cd)
{
  int i;
  int machs = cd->machs;
  const CGEN_HW_ENTRY *init = & @@arch@@_cgen_hw_table[0];
  /* MAX_HW is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_HW_ENTRY **selected =
    (const CGEN_HW_ENTRY **) xmalloc (MAX_HW * sizeof (CGEN_HW_ENTRY *));

  cd->hw_table.init_entries = init;
  cd->hw_table.entry_size = sizeof (CGEN_HW_ENTRY);
  memset (selected, 0, MAX_HW * sizeof (CGEN_HW_ENTRY *));
  /* ??? For now we just use machs to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_HW_ATTR_VALUE (&init[i], CGEN_HW_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->hw_table.entries = selected;
  cd->hw_table.num_entries = MAX_HW;
}

/* Subroutine of @@arch@@_cgen_cpu_open to build the hardware table.  */

static void
build_ifield_table (CGEN_CPU_TABLE *cd)
{
  cd->ifld_table = & @@arch@@_cgen_ifld_table[0];
}

/* Subroutine of @@arch@@_cgen_cpu_open to build the hardware table.  */

static void
build_operand_table (CGEN_CPU_TABLE *cd)
{
  int i;
  int machs = cd->machs;
  const CGEN_OPERAND *init = & @@arch@@_cgen_operand_table[0];
  /* MAX_OPERANDS is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_OPERAND **selected = xmalloc (MAX_OPERANDS * sizeof (* selected));

  cd->operand_table.init_entries = init;
  cd->operand_table.entry_size = sizeof (CGEN_OPERAND);
  memset (selected, 0, MAX_OPERANDS * sizeof (CGEN_OPERAND *));
  /* ??? For now we just use mach to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_OPERAND_ATTR_VALUE (&init[i], CGEN_OPERAND_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->operand_table.entries = selected;
  cd->operand_table.num_entries = MAX_OPERANDS;
}

/* Subroutine of @@arch@@_cgen_cpu_open to build the hardware table.
   ??? This could leave out insns not supported by the specified mach/isa,
   but that would cause errors like \"foo only supported by bar\" to become
   \"unknown insn\", so for now we include all insns and require the app to
   do the checking later.
   ??? On the other hand, parsing of such insns may require their hardware or
   operand elements to be in the table [which they mightn't be].  */

static void
build_insn_table (CGEN_CPU_TABLE *cd)
{
  int i;
  const CGEN_IBASE *ib = & @@arch@@_cgen_insn_table[0];
  CGEN_INSN *insns = xmalloc (MAX_INSNS * sizeof (CGEN_INSN));

  memset (insns, 0, MAX_INSNS * sizeof (CGEN_INSN));
  for (i = 0; i < MAX_INSNS; ++i)
    insns[i].base = &ib[i];
  cd->insn_table.init_entries = insns;
  cd->insn_table.entry_size = sizeof (CGEN_IBASE);
  cd->insn_table.num_init_entries = MAX_INSNS;
}

/* Subroutine of @@arch@@_cgen_cpu_open to rebuild the tables.  */

static void
@@arch@@_cgen_rebuild_tables (CGEN_CPU_TABLE *cd)
{
  int i;
  CGEN_BITSET *isas = cd->isas;
  unsigned int machs = cd->machs;

  cd->int_insn_p = CGEN_INT_INSN_P;

  /* Data derived from the isa spec.  */
#define UNSET (CGEN_SIZE_UNKNOWN + 1)
  cd->default_insn_bitsize = UNSET;
  cd->base_insn_bitsize = UNSET;
  cd->min_insn_bitsize = 65535; /* Some ridiculously big number.  */
  cd->max_insn_bitsize = 0;
  for (i = 0; i < MAX_ISAS; ++i)
    if (cgen_bitset_contains (isas, i))
      {
	const CGEN_ISA *isa = & @@arch@@_cgen_isa_table[i];

	/* Default insn sizes of all selected isas must be
	   equal or we set the result to 0, meaning \"unknown\".  */
	if (cd->default_insn_bitsize == UNSET)
	  cd->default_insn_bitsize = isa->default_insn_bitsize;
	else if (isa->default_insn_bitsize == cd->default_insn_bitsize)
	  ; /* This is ok.  */
	else
	  cd->default_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Base insn sizes of all selected isas must be equal
	   or we set the result to 0, meaning \"unknown\".  */
	if (cd->base_insn_bitsize == UNSET)
	  cd->base_insn_bitsize = isa->base_insn_bitsize;
	else if (isa->base_insn_bitsize == cd->base_insn_bitsize)
	  ; /* This is ok.  */
	else
	  cd->base_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Set min,max insn sizes.  */
	if (isa->min_insn_bitsize < cd->min_insn_bitsize)
	  cd->min_insn_bitsize = isa->min_insn_bitsize;
	if (isa->max_insn_bitsize > cd->max_insn_bitsize)
	  cd->max_insn_bitsize = isa->max_insn_bitsize;
      }

  /* Data derived from the mach spec.  */
  for (i = 0; i < MAX_MACHS; ++i)
    if (((1 << i) & machs) != 0)
      {
	const CGEN_MACH *mach = & @@arch@@_cgen_mach_table[i];

	if (mach->insn_chunk_bitsize != 0)
	{
	  if (cd->insn_chunk_bitsize != 0 && cd->insn_chunk_bitsize != mach->insn_chunk_bitsize)
	    {
	      opcodes_error_handler
		(/* xgettext:c-format */
		 _(\"internal error: @@arch@@_cgen_rebuild_tables: \"
		   \"conflicting insn-chunk-bitsize values: `%d' vs. `%d'\"),
		 cd->insn_chunk_bitsize, mach->insn_chunk_bitsize);
	      abort ();
	    }

 	  cd->insn_chunk_bitsize = mach->insn_chunk_bitsize;
	}
      }

  /* Determine which hw elements are used by MACH.  */
  build_hw_table (cd);

  /* Build the ifield table.  */
  build_ifield_table (cd);

  /* Determine which operands are used by MACH/ISA.  */
  build_operand_table (cd);

  /* Build the instruction table.  */
  build_insn_table (cd);
}

/* Initialize a cpu table and return a descriptor.
   It's much like opening a file, and must be the first function called.
   The arguments are a set of (type/value) pairs, terminated with
   CGEN_CPU_OPEN_END.

   Currently supported values:
   CGEN_CPU_OPEN_ISAS:    bitmap of values in enum isa_attr
   CGEN_CPU_OPEN_MACHS:   bitmap of values in enum mach_attr
   CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name
   CGEN_CPU_OPEN_ENDIAN:  specify endian choice
   CGEN_CPU_OPEN_END:     terminates arguments

   ??? Simultaneous multiple isas might not make sense, but it's not (yet)
   precluded.  */

CGEN_CPU_DESC
@@arch@@_cgen_cpu_open (enum cgen_cpu_open_arg arg_type, ...)
{
  CGEN_CPU_TABLE *cd = (CGEN_CPU_TABLE *) xmalloc (sizeof (CGEN_CPU_TABLE));
  static int init_p;
  CGEN_BITSET *isas = 0;  /* 0 = \"unspecified\" */
  unsigned int machs = 0; /* 0 = \"unspecified\" */
  enum cgen_endian endian = CGEN_ENDIAN_UNKNOWN;
  va_list ap;

  if (! init_p)
    {
      init_tables ();
      init_p = 1;
    }

  memset (cd, 0, sizeof (*cd));

  va_start (ap, arg_type);
  while (arg_type != CGEN_CPU_OPEN_END)
    {
      switch (arg_type)
	{
	case CGEN_CPU_OPEN_ISAS :
	  isas = va_arg (ap, CGEN_BITSET *);
	  break;
	case CGEN_CPU_OPEN_MACHS :
	  machs = va_arg (ap, unsigned int);
	  break;
	case CGEN_CPU_OPEN_BFDMACH :
	  {
	    const char *name = va_arg (ap, const char *);
	    const CGEN_MACH *mach =
	      lookup_mach_via_bfd_name (@@arch@@_cgen_mach_table, name);

	    if (mach != NULL)
	      machs |= 1 << mach->num;
	    break;
	  }
	case CGEN_CPU_OPEN_ENDIAN :
	  endian = va_arg (ap, enum cgen_endian);
	  break;
	default :
	  opcodes_error_handler
	    (/* xgettext:c-format */
	     _(\"internal error: @@arch@@_cgen_cpu_open: \"
	       \"unsupported argument `%d'\"),
	     arg_type);
	  abort (); /* ??? return NULL? */
	}
      arg_type = va_arg (ap, enum cgen_cpu_open_arg);
    }
  va_end (ap);

  /* Mach unspecified means \"all\".  */
  if (machs == 0)
    machs = (1 << MAX_MACHS) - 1;
  /* Base mach is always selected.  */
  machs |= 1;
  if (endian == CGEN_ENDIAN_UNKNOWN)
    {
      /* ??? If target has only one, could have a default.  */
      opcodes_error_handler
	(/* xgettext:c-format */
	 _(\"internal error: @@arch@@_cgen_cpu_open: no endianness specified\"));
      abort ();
    }

  cd->isas = cgen_bitset_copy (isas);
  cd->machs = machs;
  cd->endian = endian;
  /* FIXME: for the sparc case we can determine insn-endianness statically.
     The worry here is where both data and insn endian can be independently
     chosen, in which case this function will need another argument.
     Actually, will want to allow for more arguments in the future anyway.  */
  cd->insn_endian = endian;

  /* Table (re)builder.  */
  cd->rebuild_tables = @@arch@@_cgen_rebuild_tables;
  @@arch@@_cgen_rebuild_tables (cd);

  /* Default to not allowing signed overflow.  */
  cd->signed_overflow_ok_p = 0;
  
  return (CGEN_CPU_DESC) cd;
}

/* Cover fn to @@arch@@_cgen_cpu_open to handle the simple case of 1 isa, 1 mach.
   MACH_NAME is the bfd name of the mach.  */

CGEN_CPU_DESC
@@arch@@_cgen_cpu_open_1 (const char *mach_name, enum cgen_endian endian)
{
  return @@arch@@_cgen_cpu_open (CGEN_CPU_OPEN_BFDMACH, mach_name,
			       CGEN_CPU_OPEN_ENDIAN, endian,
			       CGEN_CPU_OPEN_END);
}

/* Close a cpu table.
   ??? This can live in a machine independent file, but there's currently
   no place to put this file (there's no libcgen).  libopcodes is the wrong
   place as some simulator ports use this but they don't use libopcodes.  */

void
@@arch@@_cgen_cpu_close (CGEN_CPU_DESC cd)
{
  unsigned int i;
  const CGEN_INSN *insns;

  if (cd->macro_insn_table.init_entries)
    {
      insns = cd->macro_insn_table.init_entries;
      for (i = 0; i < cd->macro_insn_table.num_init_entries; ++i, ++insns)
	if (CGEN_INSN_RX ((insns)))
	  regfree (CGEN_INSN_RX (insns));
    }

  if (cd->insn_table.init_entries)
    {
      insns = cd->insn_table.init_entries;
      for (i = 0; i < cd->insn_table.num_init_entries; ++i, ++insns)
	if (CGEN_INSN_RX (insns))
	  regfree (CGEN_INSN_RX (insns));
    }  

  if (cd->macro_insn_table.init_entries)
    free ((CGEN_INSN *) cd->macro_insn_table.init_entries);

  if (cd->insn_table.init_entries)
    free ((CGEN_INSN *) cd->insn_table.init_entries);

  if (cd->hw_table.entries)
    free ((CGEN_HW_ENTRY *) cd->hw_table.entries);

  if (cd->operand_table.entries)
    free ((CGEN_HW_ENTRY *) cd->operand_table.entries);

  free (cd);
}

")
)

; General initialization C code
; Code is appended during processing.

(define /cputab-init-code "")
(define (cputab-add-init! code)
  (set! /cputab-init-code (string-append /cputab-init-code code))
)

; Return the C code to define the various initialization functions.
; This does not include assembler/disassembler specific stuff.
; Generally, this function doesn't do anything.
; It exists to allow a global-static-constructor kind of thing should
; one ever be necessary.

(define (gen-init-fns)
  (logit 2 "Generating init fns ...\n")
  (string-append
   "\
/* Initialize anything needed to be done once, before any cpu_open call.  */

static void
init_tables (void)
{\n"
   /cputab-init-code
   "}\n\n"
  )
)

; Top level C code generators

; FIXME: Create enum objects for all the enums we explicitly declare here.
; Then they'd be usable and we wouldn't have to special case them here.

(define (cgen-desc.h)
  (logit 1 "Generating " (current-arch-name) "-desc.h ...\n")
  (string-write
   (gen-c-copyright "CPU data header for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#ifndef @@ARCH@@_CPU_H
#define @@ARCH@@_CPU_H

#ifdef __cplusplus
extern \"C\" {
#endif

"
   /gen-hash-defines
   ; This is defined in arch.h.  It's not defined here as there is yet to
   ; be a need for it in the assembler/disassembler.
   ;(gen-enum-decl 'model_type "model types"
   ;		  "MODEL_"
   ;		  (append (map list (map obj:name (current-model-list))) '((max))))
   ;"#define MAX_MODELS ((int) MODEL_MAX)\n\n"
   (let ((enums (find (lambda (obj) (not (obj-has-attr? obj 'VIRTUAL)))
		      (current-enum-list))))
     (if (null? enums)
	 ""
	 (string-list
	  "/* Enums.  */\n\n"
	  (string-map gen-decl enums))))
   "/* Attributes.  */\n\n"
   (string-map gen-decl (current-attr-list))
   "/* Number of architecture variants.  */\n"
   ; If there is only 1 isa, leave out special handling.  */
   (if (= (length (current-isa-list)) 1)
       "#define MAX_ISAS  1\n"
       "#define MAX_ISAS  ((int) ISA_MAX)\n")
   "#define MAX_MACHS ((int) MACH_MAX)\n\n"
   gen-ifld-decls
   gen-hw-decls
   gen-operand-decls
   gen-insn-decls
   "/* cgen.h uses things we just defined.  */\n"
   "#include \"opcode/cgen.h\"\n\n"
   "extern const struct cgen_ifld @@arch@@_cgen_ifld_table[];\n\n"
   /gen-attr-table-decls
   /gen-mach-table-decls
   gen-hw-table-decls
   "\n"
   (lambda ()
     (if (opc-file-provided?)
	 (gen-extra-cpu.h (opc-file-path) (current-arch-name))
	 ""))
   "

   #ifdef __cplusplus
   }
   #endif

#endif /* @@ARCH@@_CPU_H */
"
   )
)

; This file contains the "top level" definitions of the cpu.
; This includes various elements of the description file, expressed in C.
;
; ??? A lot of this file can go in a machine-independent file!  However,
; some simulators don't use the cgen opcodes support so there is currently
; no place to put this file.  To be revisited when we do have such a place.

(define (cgen-desc.c)
  (logit 1 "Generating " (current-arch-name) "-desc.c ...\n")
  (string-write
   (gen-c-copyright "CPU data for @@arch@@."
		  CURRENT-COPYRIGHT CURRENT-PACKAGE)
   "\
#include \"sysdep.h\"
#include <stdio.h>
#include <stdarg.h>
#include \"ansidecl.h\"
#include \"bfd.h\"
#include \"symcat.h\"
#include \"@@arch@@-desc.h\"
#include \"@@arch@@-opc.h\"
#include \"opintl.h\"
#include \"libiberty.h\"
#include \"xregex.h\"
\n"
   (lambda ()
     (if (opc-file-provided?)
	 (gen-extra-cpu.c (opc-file-path) (current-arch-name))
	 ""))
   gen-attr-table-defns
   /gen-isa-table-defns
   /gen-mach-table-defns
   gen-hw-table-defns
   gen-ifld-defns
   gen-multi-ifield-nodes
   gen-operand-table
   gen-insn-table
   gen-init-fns
   /gen-cpu-open
   )
)
@


1.35
log
@	PR 20946
	* desc-cpu.scm (lookup_mach_via_bfd_name): Return NULL if the name
	could not be matched.
	(@@arch@@_cgen_cpu_open): Allow for lookup_mach_via_bfd_name returning
@
text
@d591 5
d756 5
a760 2
	      fprintf (stderr, \"@@arch@@_cgen_rebuild_tables: conflicting insn-chunk-bitsize values: `%d' vs. `%d'\\n\",
		       cd->insn_chunk_bitsize, mach->insn_chunk_bitsize);
d839 5
a843 2
	  fprintf (stderr, \"@@arch@@_cgen_cpu_open: unsupported argument `%d'\\n\",
		   arg_type);
d858 3
a860 1
      fprintf (stderr, \"@@arch@@_cgen_cpu_open: no endianness specified\\n\");
@


1.34
log
@2016-07-18  Trevor Saunders <tbsaunde@@tbsaunde.org>

	* desc-cpu.scm, opc-itab.sbm: Emit extern "C" { ... } wrappers to
	make generated code usable by C++.
@
text
@d609 1
a609 1
  abort ();
d823 2
a824 1
	    machs |= 1 << mach->num;
@


1.33
log
@update copyright year
@
text
@d967 4
d1011 4
@


1.32
log
@	* desc-cpu.scm (/gen-cpu-open): Remove comment on K&R support.
	* utils-cgen.scm (gen-define-with-symcat): Remove K&R support.

	* utils-sim.scm (compute-sformat-argbufs!): Use more consistent name
	for name of empty sbuf.

	* iformat.scm (/sfmt-search-key, /ifmt-lookup-sfmt!): Add assert.

	* insn.scm (<insn>): Add initial value for members fmt-desc, ifmt,
	sfmt, tmp.
	(/sub-insn-ifields): Delete old commented out code.
	(/sub-insn-make!, /parse-insn-format-symbol): Ditto.
	* operand.scm (/anyof-merge-setter, anyof-merge-semantics): Ditto.

	* sim-decode.scm (/gen-decode-insn-globals): Tweak formatting of
	generated code.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2002, 2003, 2005, 2009 Red Hat, Inc.
@


1.31
log
@	* desc-cpu.scm (cgen-desc.h): Don't print virtual enums.
	* sid-cpu.scm (cgen-desc.h): Ditto.
	* enum.scm (enum-builtin!): New function.
	* read.scm (reader-install-builtin!): Call it.
	* rtl-c.scm (s-convop): Delete, replaced with ...
	(s-int-convop, s-float-convop): ... new fns.
	(ext, zext, trunc): Update.
	(fext, ftrunc, float, ufloat, fix, ufix): Update.
	* rtx-funcs.scm (fext, ftrunc, float, ufloat, fix, ufix): New parameter
	`how'.
	* cpu/mep-fmax.cpu (fcvtsw): Update.
	* cpu/sh.cpu (h-fsd, h-fmov): Update.
	* doc/rtl.texi (float-convop): Update.

	* frv.cpu (floating-point-conversion): Update call to fp conv op.
	(floating-point-dual-conversion, ne-floating-point-dual-conversion,
	conditional-floating-point-conversion, ne-floating-point-conversion,
	float-parallel-mul-add-double-semantics): Ditto.
@
text
@d786 1
a786 5
   precluded.

   ??? We only support ISO C stdargs here, not K&R.
   Laziness, plus experiment to see if anything requires K&R - eventually
   K&R will no longer be supported - e.g. GDB is currently trying this.  */
@


1.30
log
@	Specify isa(s) when doing ifield, operand, insn lookups.
	ACU = all callers updated.
	* attr.scm (/attr-eval): Call rtx-value instead of rtx-eval-with-estate.
	* enum.scm (define-full-insn-enum): Pass isa-name-list to
	current-ifld-lookup.
	* html.scm (get-insn-properties): Pass isa-name-list to
	current-op-lookup.
	* ifield.scm (/ifld-parse-follows): New arg isas, ACU.
	* insn.scm (/parse-insn-format-symbol): New arg isa-name-list, ACU.
	(/parse-insn-format-list, /parse-insn-iformat-iflds): Ditto.
	(/parse-insn-format, syntax-break-out): Ditto.
	* mach.scm (obj-filter-by-isa): New function.
	(current-ifld-lookup): New optional arg maybe-isa-name-list.
	(/ifld-already-defined?, /op-already-defined?): Simplify.
	(current-op-lookup): New optional arg maybe-isa-name-list.
	(current-insn-lookup): New arg isa-name-list, ACU.
	(/insn-already-defined?, /minsn-already-defined?): Simplify.
	(current-minsn-lookup): New arg isa-name-list, ACU.
	* minsn.scm (/minsn-compute-iflds): Pass isa-name-list to
	current-op-lookup.
	* opc-itab.scm (compute-syntax): New arg isa-name-list, ACU.
	(gen-syntax-entry): Ditto.
	* operand.scm (/operand-parse): Pass isa-name-list to
	current-ifld-lookup.
	(/derived-parse-encoding): New arg isa-name-list, ACU.
	(/derived-parse-ifield-assertion): Ditto.
	(/derived-operand-parse): Pass isa-name-list to current-op-lookup.
	(/anyof-parse-choice): Ditto.
	(anyof-satisfies-assertions?): Pass context to rtx-solve.
	(/anyof-merge-syntax): New arg container, ACU.
	(operand-builtin!): Add pc to all isas.
	* rtl-c.scm (estate-make-for-rtl-c): Delete arg extra-vars-alist, ACU.
	(estate-make-for-rtl-c++, rtl-c-expr-parsed): Ditto.
	(rtl-c-parsed, rtl-c++-parsed): Ditto.
	(rtl-c): New arg isa-name-list, ACU.
	(rtl-c-expr, rtl-c++): Ditto.
	(closure): New arg isa-name-list, ACU.
	* rtl-traverse.scm (/make-cstate): New arg isa-name-list, ACU.
	(/cstate-isas): New function.
	(/rtx-canon-symbol-list): New function.
	(/rtx-canon-env-stack): Renamed from /rtx-canon-env, ACU.
	updated.
	(/rtx-make-canon-table): Rename ENV to ENVSTACK, new entry SYMBOLLIST.
	(/rtx-canon-rtx-operand): Pass isa list to current-op-lookup.
	(/rtx-canon-rtx-ref, /rtx-canon): Ditto.
	(rtx-canonicalize): New arg isa-name-list, ACU.
	(rtx-canonicalize-stmt): Delete.
	(tstate-make): New arg isas, ACU.
	(tstate-isas, tstate--set-isas!): New functions.
	(tstate-env-stack): Renamed from tstate-env, ACU.
	(tstate-set-env-stack!): Renamed from tstate-set-env!, ACU.
	(tstate-make-closure): Renamed from tstate-new-env, new arg
	isa-name-list, ACU.
	(/rtx-traverse-env): Delete.
	(/rtx-make-traverser-table): Rename ENV to ENVSTACK, new entry
	SUMBOLLIST.
	(/rtx-traverse): Include conditional flag in dump output.
	Update isa,envstack for closures.  Pass isa list to current-op-lookup.
	(<eval-state>): New member isas.  Rename env to env-stack.
	(<eval-state> vmake!): Handle #:isas.  #:env renamed to #:env-stack.
	(<eval-state>): New getter/setter for isas.  Rename env getter/setter
	to env-stack.
	(estate-make-for-eval): Provide #:isas.
	(estate-make-closure): Renamed from estate-new-env.  New arg
	isa-name-list, ACU.
	* rtl-xform.scm (/rtx-simplify-expr-fn): Handle closures.
	(/rtx-trim-args): ENV renamed to ENVSTACK.  Ad ITERATION, SYMBOLLIST.
	(/rtx-trim-for-doc): Handle closures.
	* rtl.scm (/rtx-valid-types): Rename ENV to ENVSTACK.  Add ITERATION,
	SYMBOLLIST.
	(rtx-env-var-list): Delete.
	(rtx-env-make): Handle already-compiled environments.
	(rtx-var-alist-to-env): New function.
	(rtx-var-alist-to-closure-env-stack, rtx-make-env-stack): New functions.
	(rtx-env-stack-dump): Renamed from rtx-env-dump, ACU.
	(rtx-operand-obj): New arg isa-name-list, ACU.
	(rtx-closure-isas, rtx-closure-env-stack, rtx-closure-expr): New
	functions.
	* rtx-funcs.scm (closure): New arg isa-name-list, reorder args, ACU.
	* sem-frags.scm (<sfrag>): Delete member compiled-semantics.
	(/frag-compute-desired-frags): Minor simplification.
	(/frag-pick-best): Ditto.
	* sid-cpu.scm (gen-semantic-code): Require canonical rtl.
	(/gen-sfrag-code): Update.
	* sim-cpu.scm (gen-semantic-code): Require canonical rtl.
	* utils-cgen.scm (sanitize): New arg isa-name-list, ACU.
	* utils.scm (non-null-intersection?): New function.
@
text
@d979 7
a985 2
   "/* Enums.  */\n\n"
   (string-map gen-decl (current-enum-list))
@


1.29
log
@	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
@
text
@d334 2
a335 1
					  (length (syntax-break-out (insn-syntax insn))))
@


1.28
log
@	* dev.scm (*): Change default verbosity level to 2.

	* ifield.scm (<ifield> pretty-print): New method.
	(ifld-pretty-print): New function.
	(<multi-ifield> pretty-print): New method.

	* ifield.scm (<ifield> field-start): Delete word-len arg.
	All callers updated.
	(ifld-start): Ditto.
	(<multi-ifield> field-start): Ditto.
	* operand.scm (<hw-index> field-start): Ditto.
@
text
@a298 2
   "#include \"opcode/cgen-bitset.h\"\n"
   "\n"
@


1.27
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d158 1
a158 1
			      (number->string (ifld-start ifld #f)) ", "
@


1.26
log
@	* hardware.scm (<keyword>): Rename member print-name -> enum-prefix.
	Rename member prefix -> name-prefix.
	(<keyword> getters): Update.
	(-keyword-parse): Update.  Default enum-prefix to NAME-.
	(-keyword-read): Update.  Don't compute default value for
	enum-prefix here.
	(define-keyword): Update.
	(-hw-parse-keyword): Pass "UNUSED" for enum-prefix to -keyword-parse.
	* read.scm (cgen-rtl-version): New function.
	(-supported-rtl-versions): Add (0 8).
	* desc-cpu.scm (-gen-hw-decl): Remove cruft.
	* desc.scm (<keyword> gen-defn): prefix -> name-prefix.
	* gas-test.scm (<keyword> test-data): prefix -> name-prefix.
	* cpu/arm.cpu (gr-names, shift-type): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	Remove unnecessary name-prefix spec.
	* cpu/fr30.cpu (gr-names, cr-names, dr-names): Ditto.
	* cpu/ip2k.cpu (register-names): Ditto.
	* cpu/m68k.cpu (dr-names, ar-names): Ditto.
	* cpu/sparc.cpu (gr-names): Ditto.
	* cpu/xc16x.cpu (gr-names, ext-names,psw-names): Ditto.
	(grb-names, conditioncode-names, extconditioncode-names): Ditto.
	(grb8-names, r8-names, regmem8-names, regdiv8-names): Ditto.
	(reg0-name, reg0-name1, regbmem8-names, memgr8-names): Ditto.
	* cpu/ia32.cpu (gr8-names, gr16-names, gr-names): Call
	define-rtl-version.  Update, print-name -> enum-prefix, make uppercase,
	prefix -> name-prefix.
	* cpu/sh64-compact.cpu (frc-names): Call define-rtl-version.
	Update, print-name -> enum-prefix, make uppercase.
	(drc-names, xf-names): Ditto.
	* cpu/xstormy16.cpu (gr-names, gr-Rb-names): Ditto.
	* doc/rtl.texi (Keywords): New section.
	(hardware indices): Update text.
	(rtl versions): Add 0.8.
@
text
@d7 1
a7 1
(define (-gen-isa-table-defns)
d53 1
a53 1
(define (-gen-mach-table-decls)
d58 1
a58 1
(define (-gen-mach-table-defns)
d88 1
a88 1
(define (-gen-attr-table-decls)
d117 1
a117 1
   (-gen-attr-accessors "cgen_ifld" (current-ifld-attr-list))
d184 1
a184 1
   (-gen-attr-accessors "cgen_hw" (current-hw-attr-list))
d201 1
a201 1
(define (-gen-hw-decl hw)
d219 1
a219 1
   (string-map -gen-hw-decl (current-hw-list))
d228 1
a228 1
(define (-gen-hw-defn hw)
d253 1
a253 1
     (string-list-map -gen-hw-defn (current-hw-list))
d296 1
a296 1
(define (-gen-hash-defines)
d368 1
a368 1
   (-gen-attr-accessors "cgen_operand" (current-op-attr-list))
d498 1
a498 1
   (-gen-attr-accessors "cgen_insn" (current-insn-attr-list))
d589 1
a589 1
(define (-gen-cpu-open)
d933 1
a933 1
(define -cputab-init-code "")
d935 1
a935 1
  (set! -cputab-init-code (string-append -cputab-init-code code))
d953 1
a953 1
   -cputab-init-code
d973 1
a973 1
   -gen-hash-defines
d997 2
a998 2
   -gen-attr-table-decls
   -gen-mach-table-decls
d1042 2
a1043 2
   -gen-isa-table-defns
   -gen-mach-table-defns
d1050 1
a1050 1
   -gen-cpu-open
@


1.25
log
@	* Makefile.am (OPTIONS): Define.
	(desc): Just generate <arch>-desc.[ch] files.
	* Makefile.in: Regenerate.
	* desc-cpu.scm (cgen-desc.h): Skip call to gen-extra-cpu.h if there's
	no .opc file.
	(cgen-desc.c): Similarly.
	* gen-all-desc: New file.
	* opcodes.scm (opc-file-provided?): New function.
@
text
@d203 1
a203 3
   (if (and (hw-indices hw)
	    ; ??? Commented out as opcode changes are needed
	    ) ; (not (obj-has-attr? (hw-indices hw) 'PRIVATE)))
d206 1
a206 3
   (if (and (hw-values hw)
	    ; ??? Commented out as opcode changes are needed
	    ) ; (not (obj-has-attr? (hw-values hw) 'PRIVATE)))
@


1.24
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d1005 4
a1008 1
   (lambda () (gen-extra-cpu.h (opc-file-path) (current-arch-name)))
d1041 4
a1044 1
   (lambda () (gen-extra-cpu.c (opc-file-path) (current-arch-name)))
@


1.23
log
@	* desc-cpu.scm (cgen-desc.h): Tweak logit message for consistency.
	(cgen-desc.c): Ditto.
	* sid-cpu.scm (cgen-desc.h, cgen-cpu.h, cgen-defs.h): Ditto.
	(cgen-write.cxx, cgen-semantics.cxx, cgen-sem-switch.cxx): Ditto.
	* sid-decode.scm (cgen-decode.h, cgen-decode.cxx): Ditto.
	* sid-model.scm (cgen-model.cxx, cgen-model.h): Ditto.
	* sim-arch.scm (cgen-arch.h, cgen-arch.c): Ditto.
	(cgen-cpuall.h, cgen-ops.c): Ditto.
	* sim-cpu.scm (cgen-cpu.h, cgen-defs.h, cgen-cpu.c): Ditto.
	(cgen-read.c, cgen-write.c, cgen-semantics.c): Ditto.
	(cgen-sem-switch.c): Ditto.
	* sim-decode.scm (cgen-decode.h, cgen-decode.c): Ditto.
	* sim-model.c (cgen-model.c): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2002, 2003, 2005 Red Hat, Inc.
@


1.23.2.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2002, 2003, 2005, 2009 Red Hat, Inc.
@


1.22
log
@2005-10-28  Dave Brolley  <brolley@@redhat.com>

        Contribute the following changes:
        2005-09-19  Dave Brolley  <brolley@@redhat.com>

        * attr.scm (gen-value-for-defn-raw): New methods.
        (gen-value-for-defn): Don't test for 'SID-SIMULATOR. Call
        gen-value-for-defn-raw.
        * sid.scm (gen-obj-attr-sid-defn): Call gen-value-for-defn-raw.

        2002-12-13  Dave Brolley  <brolley@@redhat.com>

        * utils-cgen.scm (gen-attr-type): Moved from sid.scm.
        (-gen-attr-accessors): New function.
        (gen-obj-attr-defn): Update terminating initializer.
        (gen-obj-attr-end-defn): New function.
        * sid.scm (gen-attr-type): Moved to utils-cgen.scm.
        * sid-cpu.scm (cgen-desc.h): Generate code to include
        "opcode/cgen-bitset.h"
        * intrinsics.scm (kept-insn-isas): Correct the extraction of the isa
        name.
        * desc.scm ('gen-defn): Update terminating initializer.
        * desc-cpu.scm (gen-ifld-decls): Call -gen-attr-accessors. Update
        terminatinig initializer.
        (gen-hw-decls): Ditto.
        (gen-operand-decls): Ditto.
        (gen-insn-decls): Ditto.
        (-gen-hash-defines): Generate code to include "opcde/cgen-bitset.h"
        (gen-insn-table): Update terminating initializer.
        (-gen-cpu-open): Update generation of @@arch@@_cgen_rebuild_tables,
        @@arch@@_cgen_cpu_open, @@arch@@_cgen_cpu_close.
        * attr.scm (charmask-bytes): New function.
        (bitset-attr->charmask): New function.
        (<bitset-attribute>): Handle isa-attributes specially. Also handle
        differences for SID-SIMULATOR.
        (<integer-attribute>): Handle differences for SID-SIMULATOR.
        (<enum-attribute>): Ditto.
@
text
@d968 1
a968 1
  (logit 1 "Generating " (current-arch-name) " desc.h ...\n")
d1021 1
a1021 1
  (logit 1 "Generating " (current-arch-name) " desc.c ...\n")
@


1.21
log
@Update function declarations to ISO C90 formatting
@
text
@d117 1
d165 1
a165 1
  { 0, 0, 0, 0, 0, 0, {0, {0}} }
d184 1
d286 1
a286 1
  { 0, 0, CGEN_ASM_NONE, 0, {0, {0}} }
d303 2
d372 1
d483 1
a483 1
  { 0, 0, 0, 0, 0,\n    { 0, { (const PTR) 0 } },\n    { 0, { 0 } } }
d502 1
d561 1
a561 1
  { 0, 0, 0, 0, {0, {0}} },\n"
d705 1
a705 1
  unsigned int isas = cd->isas;
d717 1
a717 1
    if (((1 << i) & isas) != 0)
d802 1
a802 1
  unsigned int isas = 0;  /* 0 = \"unspecified\" */
d821 1
a821 1
	  isas = va_arg (ap, unsigned int);
a851 3
  /* ISA unspecified means \"all\".  */
  if (isas == 0)
    isas = (1 << MAX_ISAS) - 1;
d859 1
a859 1
  cd->isas = isas;
@


1.20
log
@	* desc-cpu.scm (gen-ifld-decls): Move cgen_ifld_table from here..
	(cgen-desc.h): ..to here, after opcode/cgen.h include.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2002, 2003 Red Hat, Inc.
d590 6
a595 7
static const CGEN_MACH * lookup_mach_via_bfd_name
  PARAMS ((const CGEN_MACH *, const char *));
static void build_hw_table  PARAMS ((CGEN_CPU_TABLE *));
static void build_ifield_table  PARAMS ((CGEN_CPU_TABLE *));
static void build_operand_table PARAMS ((CGEN_CPU_TABLE *));
static void build_insn_table    PARAMS ((CGEN_CPU_TABLE *));
static void @@arch@@_cgen_rebuild_tables PARAMS ((CGEN_CPU_TABLE *));
d600 1
a600 3
lookup_mach_via_bfd_name (table, name)
     const CGEN_MACH *table;
     const char *name;
d614 1
a614 2
build_hw_table (cd)
     CGEN_CPU_TABLE *cd;
d640 1
a640 2
build_ifield_table (cd)
     CGEN_CPU_TABLE *cd;
d648 1
a648 2
build_operand_table (cd)
     CGEN_CPU_TABLE *cd;
d656 1
a656 2
  const CGEN_OPERAND **selected =
    (const CGEN_OPERAND **) xmalloc (MAX_OPERANDS * sizeof (CGEN_OPERAND *));
d679 1
a679 2
build_insn_table (cd)
     CGEN_CPU_TABLE *cd;
d683 1
a683 1
  CGEN_INSN *insns = (CGEN_INSN *) xmalloc (MAX_INSNS * sizeof (CGEN_INSN));
d696 1
a696 2
@@arch@@_cgen_rebuild_tables (cd)
     CGEN_CPU_TABLE *cd;
d708 1
a708 1
  cd->min_insn_bitsize = 65535; /* some ridiculously big number */
d720 1
a720 1
	  ; /* this is ok */
d729 1
a729 1
	  ; /* this is ok */
d841 1
a841 1
  /* mach unspecified means \"all\" */
d844 1
a844 1
  /* base mach is always selected */
d846 1
a846 1
  /* isa unspecified means \"all\" */
d879 1
a879 3
@@arch@@_cgen_cpu_open_1 (mach_name, endian)
     const char *mach_name;
     enum cgen_endian endian;
d892 1
a892 2
@@arch@@_cgen_cpu_close (cd)
     CGEN_CPU_DESC cd;
d901 2
a902 4
	{
	  if (CGEN_INSN_RX ((insns)))
	    regfree (CGEN_INSN_RX (insns));
	}
d909 3
a911 7
	{
	  if (CGEN_INSN_RX (insns))
	    regfree (CGEN_INSN_RX (insns));
	}
    }

  
a949 1
static void init_tables PARAMS ((void));
d952 1
a952 1
init_tables ()
@


1.19
log
@* desc-cpu.scm (gen-hw-table-decls): Emit an 'extern' declaration
for @@arch@@_cgen_hw_table.  GDB needs to be able to find this.
@
text
@a114 1
   "extern const struct cgen_ifld @@arch@@_cgen_ifld_table[];\n\n"
d1016 1
@


1.18
log
@2003-09-08  Dave Brolley  <brolley@@redhat.com>

        On behalf of Doug Evans <dje@@sebabeach.org>
        Pass in paths to input files, instead of assuming they live in
        $srcdir/cpu.  Plus misc. option processing cleanup.
        * cgen-doc.scm (doc-arguments): Make options strings not symbols.
        Add pre-process pass to all options.
        * cgen-gas.scm (gas-arguments): Ditto.
        * cgen-sid.scm (sim-arguments): Ditto.
        * cgen-sim.scm (sim-arguments): Ditto.
        * cgen-stest.scm (stest-arguments): Ditto.
        * cgen-opc.scm (opc-arguments): Ditto.  New argument -OPC.
        (-opc-file-path): New global.
        (opc-file-path): New fn.
        * opcodes.scm (read-cpu.opc): Replace srcdir,cpu args with opc-file.
        All callers updated.
        (gen-extra-cpu.h,gen-extra-cpu.c,gen-extra-opc.h,gen-extra-opc.c,
        gen-extra-asm.c,gen-extra-dis.c,gen-extra-ibld.h,gen-extra-ibld.c):
        Replace srcdir arg with opc-file.  All callers updated.
        * read.scm (-opt-spec-update): Delete.
        (opt-get-first-pass,opt-get-second-pass): New fns.
        (-cgen): Process application-specific arguments in two passes.
@
text
@d224 1
@


1.17
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d1020 1
a1020 1
   (lambda () (gen-extra-cpu.h srcdir (current-arch-name))) ; from <arch>.opc
d1053 1
a1053 1
   (lambda () (gen-extra-cpu.c srcdir (current-arch-name))) ; from <arch>.opc
@


1.16
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d20 1
a20 1
				      "\"" (obj:name isa) "\", "
d71 1
a71 1
				      "\"" (obj:name mach) "\", "
d150 1
a150 1
			   "\"" (obj:name ifld) "\", "
d270 1
a270 1
			   "\"" (obj:name hw) "\", "
d458 1
a458 1
			   "/* " (obj:name op) ": " (obj:comment op) " */\n"
d464 1
a464 1
    		   	         "\"" (obj:name op) "\", "
d512 1
a512 1
    "\"" (obj:name insn) "\", "
@


1.15
log
@Update copyright date.
@
text
@d986 1
a986 1
   (gen-copyright "CPU data header for @@arch@@."
d1038 1
a1038 1
   (gen-copyright "CPU data for @@arch@@."
@


1.14
log
@2003-02-11  Dave Brolley  <brolley@@redhat.com>

        * desc-cpu.scm (gen-ifld-defns): Add all ifields to the
        @@arch@@_cgen-ifld_table.
        (gen-maybe-multi-ifld): Use the ifield enumerators to index the
        @@arch@@_cgen-ifld_table.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001, 2002 Red Hat, Inc.
@


1.13
log
@	* desc-cpu.scm (gen-maybe-multi-ifld): Remove superfluous parens.
	Add braces and cast for union field.
	(gen-multi-ifield-nodes): Add braces and cast for union field.
	(cgen_operand_table): Similarly fix sentinel.
	(cgen_cpu_close): Constify "insns".  Formatting.
	(cgen-desc.c): Include xregex.h.
	* cpu/ip2k.opc (ip2k_cgen_insn_supported): Move to opc.c section.
	Prototype.
	<opc.c>: Include safe-ctype.h.
	(ip2k_asm_hash): Use ISSPACE and TOLOWER.
	(PARSE_FUNC_DECL): Declare.  Use to prototype parse_fr, parse_addr16,
	parse_addr16_p, parse_addr16_cjp, parse_lit8 and parse_bit3.
	(parse_fr): Constify "old_strp".  Correct type of "tempvalue".
	Don't test it for >= 0.  Use ISSPACE rather than isspace.  Formatting.
	(parse_addr16): Correct type of "value".  Formatting.
	(parse_addr16_p): Likewise.
	(parse_addr16_cjp): Likewise.
	(parse_lit8): Likewise.
	(parse_bit3): Formatting.
	(PRINT_FUNC_DECL): Define.  Use to prototype print_fr, print_dollarhex,
	print_dollarhex8, print_dollarhex16, print_dollarhex_addr16h,
	print_dollarhex_addr16l, print_dollarhex_p, print_dollarhex_cj and
	print_decimal.
	(print_fr): Add ATTRIBUTE_UNUSED on unused args.  Formatting.
	(print_dollarhex): Add ATTRIBUTE_UNUSED on unused args.
	(print_dollarhex8): Likewise.
	(print_dollarhex16): Likewise.
	(print_dollarhex_addr16h): Likewise.
	(print_dollarhex_addr16l): Likewise.
	(print_dollarhex_p): Likewise.
	(print_dollarhex_cj): Likewise.
	(print_decimal): Likewise.
	* cpu/xstormy16.opc (parse_mem8): Use ISALNUM rather than isalnum.
@
text
@d131 1
a131 2
  (let* ((ifld-list (find (lambda (f) (not (has-attr? f 'VIRTUAL)))
			  (non-derived-ifields (current-ifld-list))))
d151 9
a159 4
			   (number->string (ifld-word-offset ifld)) ", "
			   (number->string (ifld-word-length ifld)) ", "
			   (number->string (ifld-start ifld #f)) ", "
			   (number->string (ifld-length ifld)) ", "
d161 1
a161 1
					      num-non-bools gen-A-attr-mask)
d411 1
a411 1
	      (set! field-ref (string-append "&@@arch@@_cgen_ifld_table[" (ifld-number fld) "]"))))
@


1.12
log
@[ cgen/ChangeLog ]

2002-05-01  Graydon Hoare  <graydon@@redhat.com>

	* desc-cpu.scm (@@arch@@_cgen_cpu_close): Fix memory leaks.

[ opcodes/ChangeLog ]

2002-05-07  Graydon Hoare  <graydon@@redhat.com>

	* cgen-dis.in: (print_insn_@@arch@@): Cache list of opened CPUs rather
	than just most-recently-opened.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2001 Red Hat, Inc.
d404 1
a404 1
	      (set! field-ref (string-append "&(" (ifld-enum fld) "_MULTI_IFIELD[0])"))
d407 2
a408 2
	      (set! field-ref (string-append "&(@@arch@@_cgen_ifld_table[" (ifld-number fld) "])"))))    
    (string-append "{ " field-count ", " field-ref " }"))) 
d432 1
a432 1
		"\n    {0,0}\n};\n"))
d473 2
a474 2
     "\
  { 0, 0, 0, 0, 0, {0, {0}} }
d903 1
a903 1
  CGEN_INSN *insns;
d911 1
a911 1
	    regfree(CGEN_INSN_RX (insns));
d921 1
a921 1
	    regfree(CGEN_INSN_RX (insns));
d1047 1
@


1.11
log
@[ include/opcode/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* cgen.h (CGEN_MAYBE_MULTI_IFLD): New structure.
	(CGEN_OPERAND): Add CGEN_MAYBE_MULTI_IFLD field.

[ opcodes/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* fr30-asm.c: Regenerate.
	* fr30-desc.c: Likewise.
	* fr30-desc.h: Likewise.
	* fr30-dis.c: Likewise.
	* fr30-ibld.c: Likewise.
	* fr30-opc.c: Likewise.
	* fr30-opc.h: Likewise.
	* m32r-asm.c: Likewise.
	* m32r-desc.c: Likewise.
	* m32r-desc.h: Likewise.
	* m32r-dis.c: Likewise.
	* m32r-ibld.c: Likewise.
	* m32r-opc.c: Likewise.
	* m32r-opc.h: Likewise.
	* m32r-opinst.c: Likewise.
	* openrisc-asm.c: Likewise.
	* openrisc-desc.c: Likewise.
	* openrisc-desc.h: Likewise.
	* openrisc-dis.c: Likewise.
	* openrisc-ibld.c: Likewise.
	* openrisc-opc.c: Likewise.
	* openrisc-opc.h: Likewise.
	* xstormy16-desc.c: Likewise.

[ cgen/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* desc-cpu.scm (ifld-number-cache): Add.
	(ifld-number): Add.
	(gen-maybe-multi-ifld-of-op): Add.
	(gen-maybe-multi-ifld): Add.
	(gen-multi-ifield-nodes): Add.
	(cgen-desc.c): Add call to gen-multi-ifield-nodes.
@
text
@d902 28
d932 1
d935 4
@


1.10
log
@Use safe-ctype.h not ctype.h
@
text
@d381 54
d466 2
d720 2
a721 2
	/* Default insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning \"unknown\".  */
d729 2
a730 2
	/* Base insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning \"unknown\".  */
d1021 1
@


1.9
log
@Fix compile time warning messages in generated C files
@
text
@a948 1
#include <ctype.h>
@


1.8
log
@* some support for funny-endian 16/32-bit insn sets

[cgen/ChangeLog]
2001-07-11  Frank Ch. Eigler  <fche@@redhat.com>

        * desc-cpu.scm (-gen-mach-table-defns): Emit fourth field: the
        mach->cpu insn-chunk-bitsize.
        (-gen-cpu-open): In @@arch@@_cgen_rebuild_tables, process above new
        field toward CGEN_CPU_TABLE->insn_chunk_bitsize.
        * mach.scm (<cpu>): New field insn-chunk-bitsize.
        (-cpu-parse, -cpu-read): Parse/initialize it.
        * doc/rtl.texi (define-cpu): Document it.

[opcodes/ChangeLog]
2001-07-11  Frank Ch. Eigler  <fche@@redhat.com>

        * cgen-dis.in (print_insn): Use cgen_get_insn_value instead of
        bfd_get_bits.
        * cgen-opc.c (cgen_get_insn_value, cgen_put_insn_value): Respect
        non-zero CGEN_CPU_DESC->insn_chunk_bitsize.

[include/opcode/ChangeLog]
2001-07-11  Frank Ch. Eigler  <fche@@redhat.com>

        * cgen.h (CGEN_MACH): Add insn_chunk_bitsize field.
        (cgen_cpu_desc): Ditto.
@
text
@d530 8
d875 1
@


1.7
log
@  Correct machine calculation on disassembly.

  2001-03-20  Patrick Macdonald  <patrickm@@redhat.com>

        * desc-cpu.scm (@@arch@@_cgen_cpu_open): Correct machine calculation for
        arg_type CGEN_CPU_OPEN_BFDMACH.
@
text
@d73 2
a74 1
				      (mach-enum mach)
d78 1
a78 1
  { 0, 0, 0 }
d639 1
a639 1
  int i,n_isas;
a640 1
#if 0
a641 1
#endif
a678 2

	++n_isas;
a680 1
#if 0 /* Does nothing?? */
d687 11
a697 1
	++n_machs;
a698 1
#endif
@


1.6
log
@        CGEN portion of fix for syntax array elements when max operands
        greater than 127.

        2001-02-02  Patrick Macdonald  <patrickm@@redhat.com>

        * desc-cpu.scm (-gen-hash-defines): Rename
        CGEN_ACTUAL_MAX_SYNTAX_BYTES to CGEN_ACTUAL_MAX_SYNTAX_ELEMENTS.
@
text
@d762 1
a762 1
	    machs |= mach->num << 1;
@


1.5
log
@2001-01-06  Ben Elliston  <bje@@redhat.com>

	* utils-gen.scm (gen-sfmt-enum-decl): Use @@prefix@@ and @@PREFIX@@
	instead of @@cpu@@ and @@CPU@@ to generically prefix symbol names.
	* sim-cpu.scm (-gen-sem-fn-table-entry): Likewise.
	(-gen-semantic-fn-table): Likewise.
	(-gen-scache-semantic-fn): Likewise.
	(-gen-no-scache-semantic-fn): Likewise.
	(cgen-read.c): Likewise.
	(cgen-sem-switch.c): Likewise.
	* desc-cpu.scm (cgen-desc.c): Use @@arch@@, not @@prefix@@, since this
	is a filename prefix.
	* sim-decode.scm (IDESC-TABLE-VAR): Use @@prefix@@, et al.
	(-gen-decode-insn-globals): Likewise.
	(-gen-idesc-decls): Likewise.
	(cgen-decode.h): Likewise.
	(cgen-decode.c): Likewise.
	* sim.scm (gen-cpu-insn-enum-decl): Likewise.
	(gen-cpu-insn-enum): Likewise.
	(sim-finish!): Likewise.
@
text
@d327 2
a328 2
   "/* Maximum nymber of syntax bytes in an instruction.  */\n"
   "#define CGEN_ACTUAL_MAX_SYNTAX_BYTES "
@


1.4
log
@2000-12-03  Ben Elliston  <bje@@redhat.com>

	* desc-cpu.scm (cgen-desc.h): Clarify generated filenames.
	(cgen-desc.c): Likewise.
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
d941 2
a942 2
#include \"@@prefix@@-desc.h\"
#include \"@@prefix@@-opc.h\"
@


1.3
log
@* ANSI C fixes

2000-11-20  Frank Ch. Eigler  <fche@@redhat.com>

	* opc-itab.scm (-gen-ifmt-table, -gen-macro-insn-table: Remove
	unneeded "\n\n" from F() macro definition.

2000-11-15  Greg McGary  <greg@@mcgary.org>

	* utils-cgen.scm (gen-define-with-symcat): New function.
	* desc-cpu.scm (gen-ifld-defns): Use it.
	(gen-hw-table-defns): Use it.
	(-gen-hash-defines): Use it.
	(gen-operand-table): Use it.
	(gen-insn-table): Use it.  Remove spurious `#undef MNEM'.
	* opc-itab.scm (-gen-ifmt-table): Use it.
	(-gen-insn-opcode-table): Use it.
	(-gen-macro-insn-table): Use it.
	* opc-opinst.scm (-gen-operand-instance-tables): Use it.
	* sim-cpu.scm (cgen-semantics.c): Use it.
	(cgen-sem-switch.c): Use it.
@
text
@d877 1
a877 1
  (logit 1 "Generating " (current-arch-name) "-desc.h ...\n")
d929 1
a929 1
  (logit 1 "Generating " (current-arch-name) "-desc.c ...\n")
@


1.2
log
@* usability improvement

2000-10-02  Frank Ch. Eigler  <fche@@redhat.com>

	* desc-cpu.scm: (gen-operand-decls): Emit MAX_OPERANDS as a
	preprocessor constant.
@
text
@d135 1
a135 1
     "\
d138 3
a140 2
#define A(a) (1 << CONCAT2 (CGEN_IFLD_,a))

a251 1

d254 3
a256 2
#define A(a) (1 << CONCAT2 (CGEN_HW_,a))

d298 2
a299 2
   "#define CGEN_SYM(s) CONCAT3 (@@arch@@,_cgen_,s)\n\n"
   "/* Selected cpu families.  */\n"
d385 1
a385 1
     "\
d388 4
a391 3
#define A(a) (1 << CONCAT2 (CGEN_OPERAND_,a))
#define OPERAND(op) CONCAT2 (@@ARCH@@_OPERAND_,op)

d482 1
a482 4
     "\
#define A(a) (1 << CONCAT2 (CGEN_INSN_,a))
#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))

d485 4
d505 1
a506 2
#undef MNEM
#undef OP
@


1.1
log
@Initial revision
@
text
@d368 2
a369 1
   "#define MAX_OPERANDS ((int) @@ARCH@@_OPERAND_MAX)\n\n"
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
