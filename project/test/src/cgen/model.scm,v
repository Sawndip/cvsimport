head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	cgen-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	cgen-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	cgen-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	cgen-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	cgen-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	cgen-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	cgen-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	cgen-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	cgen-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	cgen-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	cgen-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	cgen-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	cgen-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	cgen-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	cgen-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	cgen-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	cgen-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	cgen-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	cgen-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	cgen-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	cgen-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	cgen-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	cgen-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	cgen-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	cgen-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	cgen-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	cgen-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	cgen-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	cgen-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	cgen-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	cgen-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	cgen-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	cgen-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	cgen-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	cgen-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	cgen-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	cgen-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	cgen-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	cgen-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	cgen-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	cgen-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	cgen-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	cgen-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	cgen-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	cgen-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	cgen-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	cgen-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	cgen-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	cgen-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	cgen-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	cgen-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	cgen-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	cgen-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	cgen-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	cgen-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	cgen-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	cgen-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	cgen-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	cgen-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	cgen-snapshot-20130601:1.10
	sid-snapshot-20130501:1.10
	cgen-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	cgen-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	cgen-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	cgen-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	cgen-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	cgen-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	cgen-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	cgen-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	cgen-snapshot-20120901:1.10
	sid-snapshot-20120801:1.10
	cgen-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	cgen-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	cgen-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	cgen-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	cgen-snapshot-20120401:1.10
	sid-snapshot-20120301:1.10
	cgen-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	cgen-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	cgen-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	cgen-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	cgen-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	cgen-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	cgen-snapshot-20110901:1.10
	sid-snapshot-20110801:1.10
	cgen-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	cgen-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	cgen-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	cgen-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	cgen-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	cgen-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	cgen-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	cgen-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	cgen-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	cgen-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	cgen-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	cgen-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	cgen-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	cgen-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	cgen-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	cgen-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	cgen-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	cgen-snapshot-20100301:1.10
	sid-snapshot-20100201:1.10
	cgen-snapshot-20100201:1.10
	sid-snapshot-20100101:1.9
	cgen-snapshot-20100101:1.9
	sid-snapshot-20091201:1.9
	cgen-snapshot-20091201:1.9
	sid-snapshot-20091101:1.9
	cgen-snapshot-20091101:1.9
	sid-snapshot-20091001:1.9
	cgen-snapshot-20091001:1.9
	arc-sim-20090309:1.4
	sid-snapshot-20090901:1.8
	cgen-snapshot-20090901:1.8
	sid-snapshot-20090801:1.7
	cgen-snapshot-20090801:1.7
	sid-snapshot-20090701:1.5
	cgen-snapshot-20090701:1.5
	dje-cgen-play1-branch:1.5.0.2
	dje-cgen-play1-branchpoint:1.5
	cgen-1_1-branch:1.4.0.6
	cgen-1_1-branchpoint:1.4
	sid-snapshot-20090601:1.4
	cgen-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	cgen-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	cgen-snapshot-20090401:1.4
	arc-insight_6_8-branch:1.4.0.4
	arc-insight_6_8-branchpoint:1.4
	sid-snapshot-20090301:1.4
	cgen-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	cgen-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	cgen-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	cgen-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	cgen-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	cgen-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	cgen-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	cgen-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	cgen-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	cgen-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	cgen-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	cgen-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	cgen-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	cgen-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	cgen-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	cgen-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	cgen-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	cgen-snapshot-20071001:1.4
	msnyder-fork-checkpoint-branch:1.4.0.2
	msnyder-fork-checkpoint-branchpoint:1.4
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.6
	cagney_regbuf-20020515-branch:1.1.1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	cgen-1-1-branch:1.1.1.1.0.2
	cgen-1-0:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2010.01.25.00.40.29;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.07.22.17.34;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.12.22.33.37;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.21.04.23.59;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.18.20.44.58;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.24.15.03.09;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.16.05.35.47;	author devans;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2003.05.15.07.25.02;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.16.18.09.06;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches
	1.1.1.1;
next	;

1.4.6.1
date	2009.06.24.14.57.45;	author devans;	state Exp;
branches;
next	;

1.1.1.1
date	2000.07.28.04.11.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* utils-cgen.scm (<location>): Define using new define-class.
	(<ident>, <source-ident>, <context>): Ditto.

	* cos.scm (/object-string): New function.
	(/object-error): Use it.
	(/object-count-true): New function
	(object-copy-top): Delete.  All callers changed to call object-copy.
	(/parse-member-list, /build-getter-defs, /build-setter-defs): New fns.
	(define-class, define-interface, define-method): New macros.
	(define-getters, define-setters, vmake): Moved here ...
	* utils-cgen.scm: ... from here.
@
text
@; CPU implementation description.
; Copyright (C) 2000, 2003, 2009 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

; A model is an implementation of a mach.
; NOTE: wip [with all the caveats that implies].
; The intent here is to define the aspects of a CPU that affect performance,
; usable by any tool (but for the immediate future a simulator).

; Pipeline specification.

(define <pipeline>
  (class-make '<pipeline> nil '(name comment atlist elms) nil))

(define (pipeline:length p) (length (elm-xget p 'elms)))

; Function unit specification.

; FIXME: Might wish to record which pipeline element(s) the unit is associated
; with.  At the moment pipeline data isn't used, but later.

(define <unit>
  (class-make '<unit>
	      '(<ident>)
	      '(
		; wip
		issue done
		; Lists of (name mode) pairs that record unit state.
		state
		; Lists of (name mode [default-value]).
		inputs outputs
		; RTL of code to invoke to do profiling.
		; `nil' means use the default
		; ??? Not currently used since all profiling handlers
		; are user-written.
		profile
		; Model this unit is associated with.
		model-name
		)
	      nil))

; ??? Rather than create a circularity, we record the model's symbol in
; the `model' element.
; FIXME: Shouldn't use current-model-lookup.  Guile is better at printing
; things with circularities now, so should probably put back the circularity
; and delete the current-model-lookup reference.
(define (unit:model u) (current-model-lookup (elm-xget u 'model-name)))
(define unit:issue (elm-make-getter <unit> 'issue))
(define unit:done (elm-make-getter <unit> 'done))
(define unit:state (elm-make-getter <unit> 'state))
(define unit:inputs (elm-make-getter <unit> 'inputs))
(define unit:outputs (elm-make-getter <unit> 'outputs))
(define unit:profile (elm-make-getter <unit> 'profile))

; Create a copy of unit U with new values for ISSUE and DONE.
; This is used when recording an instruction's timing information.
; ??? This might be better recorded in a different class from UNIT
; since we're not creating a new unit, we're just special casing it for
; one instruction.
; FIXME: No longer used.

(define (unit:make-insn-timing u issue done)
  (let ((result (object-copy u)))
    (elm-xset! result 'issue issue)
    (elm-xset! result 'done done)
    result)
)

; The `<model>' class.
;
; FETCH is the instruction fetch process as it relates to the implementation.
; e.g.
; - how many instructions are fetched at once
; - how those instructions are initially processed for delivery to the
;   appropriate pipeline
; RETIRE is used to specify any final processing needed to complete an insn.
; PIPELINES is a list of pipeline objects.
; UNITS is a list of function units.
; STATE is a list of (var mode) pairs.
;
; For the more complicated cpus this can get really complicated really fast.
; No intent is made to get there in one day.

(define <model>
  (class-make '<model>
	      '(<ident>)
	      '(mach prefetch retire pipelines state units)
	      nil))

(define model:mach (elm-make-getter <model> 'mach))
(define model:prefetch (elm-make-getter <model> 'prefetch))
(define model:retire (elm-make-getter <model> 'retire))
(define model:pipelines (elm-make-getter <model> 'pipelines))
(define model:state (elm-make-getter <model> 'state))
(define model:units (elm-make-getter <model> 'units))

(define (model:enum m)
  (gen-c-symbol (string-append "MODEL_" (string-upcase (obj:str-name m))))
)

(define (models-for-mach mach)
  (let ((mach-name (obj:name mach)))
    (find (lambda (model)
	    (eq? (obj:name (model:mach model)) mach-name))
	  (current-model-list)))
)

; Parse a `prefetch' spec.

(define (/prefetch-parse context expr)
  nil
)

; Parse a `retire' spec.

(define (/retire-parse context expr)
  nil
)

; Parse a `pipeline' spec.
; ??? Perhaps we should also use name/value pairs here, but that's an
; unnecessary complication at this point in time.

(define (/pipeline-parse context model-name spec) ; name comments attrs elements)
  (if (not (= (length spec) 4))
      (parse-error context "pipeline spec not `name comment attrs elements'" spec))
  (apply make (cons <pipeline> spec))
)

; Parse a function `unit' spec.
; ??? Perhaps we should also use name/value pairs here, but that's an
; unnecessary complication at this point in time.

(define (/unit-parse context model-name spec) ; name comments attrs elements)
  (if (not (= (length spec) 9))
      (parse-error context "unit spec not `name comment attrs issue done state inputs outputs profile'" spec))
  (apply make (append (cons <unit> spec) (list model-name)))
)

; Parse a model definition.
; This is the main routine for building a model object from a
; description in the .cpu file.
; All arguments are in raw (non-evaluated) form.

(define (/model-parse context name comment attrs mach-name prefetch retire pipelines state units)
  (logit 2 "Processing model " name " ...\n")

  ;; Pick out name first to augment the error context.
  (let* ((name (parse-name context name))
	 (context (context-append-name context name))
	 (mach (current-mach-lookup mach-name)))

    (if (null? units)
	(parse-error context "there must be at least one function unit" name))

    (if mach ; is `mach' being "kept"?
	(let ((model-obj
	       (make <model>
		     name
		     (parse-comment context comment)
		     (atlist-parse context attrs "cpu")
		     mach
		     (/prefetch-parse context prefetch)
		     (/retire-parse context retire)
		     (map (lambda (p) (/pipeline-parse context name p)) pipelines)
		     state
		     (map (lambda (u) (/unit-parse context name u)) units))))
	  model-obj)

	(begin
	  ; MACH wasn't found, ignore this model.
	  (logit 2 "Nonexistant mach " mach-name ", ignoring " name ".\n")
	  #f)))
)

; Read a model description.
; This is the main routine for analyzing models in the .cpu file.
; CONTEXT is a <context> object for error messages.
; ARG-LIST is an associative list of field name and field value.
; /model-parse is invoked to create the `model' object.

(define (/model-read context . arg-list)
  (let (
	(name nil)      ; name of model
	(comment nil)   ; description of model
	(attrs nil)     ; attributes
	(mach nil)      ; mach this model implements
	(prefetch nil)  ; instruction prefetch handling
	(retire nil)    ; instruction completion handling
	(pipelines nil) ; list of pipelines
	(state nil)     ; list of (name mode) pairs to record state
	(units nil)     ; list of function units
	)

    (let loop ((arg-list arg-list))
      (if (null? arg-list)
	  nil
	  (let ((arg (car arg-list))
		(elm-name (caar arg-list)))
	    (case elm-name
	      ((name) (set! name (cadr arg)))
	      ((comment) (set! comment (cadr arg)))
	      ((attrs) (set! attrs (cdr arg)))
	      ((mach) (set! mach (cadr arg)))
	      ((prefetch) (set! prefetch (cadr arg)))
	      ((retire) (set! retire (cadr arg)))
	      ((pipeline) (set! pipelines (cons (cdr arg) pipelines)))
	      ((state) (set! state (cdr arg)))
	      ((unit) (set! units (cons (cdr arg) units)))
	      (else (parse-error context "invalid model arg" arg)))
	    (loop (cdr arg-list)))))

    ; Now that we've identified the elements, build the object.
    (/model-parse context name comment attrs mach prefetch retire pipelines state units))
)

; Define a cpu model object, name/value pair list version.

(define define-model
  (lambda arg-list
    (let ((m (apply /model-read (cons (make-current-context "define-model")
				      arg-list))))
      (if m
	  (current-model-add! m))
      m))
)

; Instruction timing.

; There is one of these for each model timing description per instruction.

(define <timing> (class-make '<timing> nil '(model units) nil))

(define timing:model (elm-make-getter <timing> 'model))
(define timing:units (elm-make-getter <timing> 'units))

; timing:units is a list of these.
; ARGS is a list of (name value) pairs.

(define <iunit> (class-make '<iunit> nil '(unit args) nil))

(define iunit:unit (elm-make-getter <iunit> 'unit))
(define iunit:args (elm-make-getter <iunit> 'args))

; Return the default unit used by MODEL.
; ??? For now this is always u-exec.

(define (model-default-unit model)
  (object-assq 'u-exec (model:units model))
)

; Subroutine of parse-insn-timing to parse the timing spec for MODEL.
; The result is a <timing> object.

(define (/insn-timing-parse-model context model spec)
  (make <timing> model
	(map (lambda (unit-timing-desc)
	       (let ((type (car unit-timing-desc))
		     (args (cdr unit-timing-desc)))
		 (case type
		   ((unit) ; syntax is `unit name (arg1 val1) ...'
		    (let ((unit (object-assq (car args)
					     (model:units model))))
		      (if (not unit)
			  (parse-error context "unknown function unit" args))
		      (make <iunit> unit (cdr args))))
		   (else (parse-error context "bad unit timing spec"
				      unit-timing-desc)))))
	     spec))
)

; Given the timing information for an instruction return an associative
; list of timing objects (one for each specified model).
; INSN-TIMING-DESC is a list of
; (model1 (unit unit1-name ...) ...) (model2 (unit unit1-name ...) ...) ...
; Entries for models not included (because the machine wasn't selected)
; are returned as (model1), i.e. an empty unit list.

(define (parse-insn-timing context insn-timing-desc)
  (logit 3 "  parse-insn-timing: context= " (context-prefix context)
	 ", desc= " insn-timing-desc "\n")
  (map (lambda (model-timing-desc)
	 (let* ((model-name (car model-timing-desc))
		(model (current-model-lookup model-name)))
	   (cons model-name
		 (if model
		     (/insn-timing-parse-model context model
					       (cdr model-timing-desc))
		     '()))))
       insn-timing-desc)
)

; Called before a .cpu file is read in.

(define (model-init!)

  (reader-add-command! 'define-model
		       "\
Define a cpu model, name/value pair list version.
"
		       nil 'arg-list define-model
  )

  *UNSPECIFIED*
)

; Called after a .cpu file has been read in.

(define (model-finish!)
  *UNSPECIFIED*
)
@


1.9
log
@	* read.scm (rtl-version-equal?): New function.
	(rtl-version-at-least?, rtl-version-older?): New functions.

	* *.scm: Use / to prefix "local" vars/fns, for r6rs compliance.
	* pmacros.scm (/pmacro-builtin-splice): Refer to $unsplice for
	rtl versions >= 0.9.
	(pmacros-init!): Tweak to prepare for $<pmacro> for builtin pmacros.
@
text
@d64 1
a64 1
  (let ((result (object-copy-top u)))
@


1.8
log
@	Clean up cpu file parsing, pass context consistently instead of the
	old "errtxt" argument.
	NOTE: ACU == "All Callers Updated".
	* attr.scm (-parse-simple-attribute): Renamed from
	parse-simple-attribute, ACU.
	(-attr-parse): Change errtxt argument to context, ACU.
	(-attr-read): Ditto.
	(atlist-parse): Ditto.  Put context arg first.
	(attr-parse): Use parse-error instead of context-error.
	* enum.scm (parse-enum-vals): Change errtxt argument to context, ACU.
	(-enum-parse-prefix, -enum-parse, -enum-read): Ditto.
	* hardware.scm (-keyword-parse): Renamed from keyword-parse.
	`context' arg is now a <context> object.  ACU.
	(-keyword-read): `context' arg is now a <context> object.  ACU.
	(-hw-parse-indices): Change errtxt argument to context, ACU.
	(-hw-parse-values, -hw-parse-handlers): Ditto.
	(-hw-parse-getter, -hw-parse-setter, -hw-parse, -hw-read): Ditto.
	(-hw-validate-layout, -hw-create-getter-from-layout,
	-hw-create-setter-from-layout): Ditto.
	(<hw-register>:parse!, <hw-pc>:parse!): Ditto.
	(<hw-memory>:parse!, <hw-immediate>:parse!): Ditto.
	(<hw-address>:parse!): Ditto.
	* ifield.scm (-ifield-parse, ifield-read): Ditto.
	(-ifld-parse-follows, -ifld-parse-encode-decode): Ditto.
	(-ifld-parse-encode, -ifld-parse-decode): Ditto.
	(-multi-ifield-parse, -multi-ifield-read): Ditto.
	* insn.scm (-insn-parse, -insn-read): Ditto.
	(parse-syntax): Ditto.  Put context arg first.
	(-parse-insn-format-symbol): Change errtxt argument to context, ACU.
	(-parse-insn-format-ifield-spec, -parse-insn-format-list): Ditto.
	(-parse-insn-format): Ditto.
	* mach.scm (-arch-parse-alignment, -arch-parse-machs): Ditto.
	(-arch-parse-isas): Ditto.
	(-isa-read): Add context arg, ACU.
	(-cpu-parse, -cpu-read, -mach-read): Ditto.
	* minsn.scm (-minsn-parse-expansion): Change errtxt argument to
	context, ACU.
	(-minsn-parse, -minsn-read, -minsn-compute-iflds): Ditto.
	(minsn-make-alias): Ditto.
	* mode.scm (-mode-parse): Ditto.
	(parse-mode-name): Ditto.  Put context arg first.
	* model.scm (-prefetch-parse, -retire-parse, -pipeline-parse): Change
	errtxt argument to context, ACU.
	(-unit-parse, -model-parse, -model-read): Ditto.
	* operand.scm (-operand-parse-getter): Use parse-error instead of
	context-error.
	(-operand-parse-setter): Ditto.
	(-operand-parse): Change errtxt argument to context, ACU.
	(-operand-read, -derived-operand-parse, -derived-operand-read): Ditto.
	(-anyof-operand-parse, -anyof-operand-read): Ditto.
	* read.scm (reader-error): Delete.  Use parse-error instead.
	(parse-error): Change errtxt argument to context, ACU.  Split args
	argument into expr and maybe-help-text.
	(-reader-process-expanded-1!): Reorganize.
	* rtl.scm (-subr-read): Change errtxt argument to context, ACU.
	* types.scm (parse-type): Ditto.
	* utils-cgen.scm (single-location->simple-string): New function.
	(<context>): Replace members file,lineno with location.
	(make-prefix-context): Renamed from context-make-prefix, ACU.
	(make-current-context): New function.
	(context-append, context-append-name): New functions.
	(context-make-reader): Delete.
	(parse-name): Change errtxt argument to context, ACU.
	Put context arg first.
	(parse-comment): Ditto.
	(parse-number): Change errtxt argument to context, ACU.
	(arg-list-validate-name, arg-list-check-no-args,
	arg-list-symbol-arg): Ditto.

	* read.scm (-cmd-if): Don't assume test is a list.

	* html.scm (get-insn-properties): Delete errtxt, unused.
@
text
@d111 1
a111 1
(define (-prefetch-parse context expr)
d117 1
a117 1
(define (-retire-parse context expr)
d125 1
a125 1
(define (-pipeline-parse context model-name spec) ; name comments attrs elements)
d135 1
a135 1
(define (-unit-parse context model-name spec) ; name comments attrs elements)
d146 1
a146 1
(define (-model-parse context name comment attrs mach-name prefetch retire pipelines state units)
d164 3
a166 3
		     (-prefetch-parse context prefetch)
		     (-retire-parse context retire)
		     (map (lambda (p) (-pipeline-parse context name p)) pipelines)
d168 1
a168 1
		     (map (lambda (u) (-unit-parse context name u)) units))))
d181 1
a181 1
; -model-parse is invoked to create the `model' object.
d183 1
a183 1
(define (-model-read context . arg-list)
d215 1
a215 1
    (-model-parse context name comment attrs mach prefetch retire pipelines state units))
d222 1
a222 1
    (let ((m (apply -model-read (cons (make-current-context "define-model")
d256 1
a256 1
(define (-insn-timing-parse-model context model spec)
d288 1
a288 1
		     (-insn-timing-parse-model context model
@


1.7
log
@	* model.scm (parse-insn-timing): Tweak logging message.
	* operand.scm: Comment and whitespace tweaks.
	(op:type): Tweak error message.
	(op-ifield): Tweak logging message.
	(-derived-operand-parse, anyof-merge-semantics): Ditto.
	* read.scm: Whitespace cleanup.
	* utils.scm: Whitespace cleanup.
@
text
@d111 1
a111 1
(define (-prefetch-parse errtxt expr)
d117 1
a117 1
(define (-retire-parse errtxt expr)
d125 1
a125 1
(define (-pipeline-parse errtxt model-name spec) ; name comments attrs elements)
d127 1
a127 1
      (parse-error errtxt "pipeline spec not `name comment attrs elements'" spec))
d135 1
a135 1
(define (-unit-parse errtxt model-name spec) ; name comments attrs elements)
d137 1
a137 1
      (parse-error errtxt "unit spec not `name comment attrs issue done state inputs outputs profile'" spec))
d146 1
a146 1
(define (-model-parse errtxt name comment attrs mach-name prefetch retire pipelines state units)
d148 6
a153 4
  (let ((name (parse-name name errtxt))
	; FIXME: switch to `context' like in cver.
	(errtxt (stringsym-append errtxt " " name))
	(mach (current-mach-lookup mach-name)))
d155 2
a156 1
	(parse-error errtxt "there must be at least one function unit" name))
d161 2
a162 2
		     (parse-comment comment errtxt)
		     (atlist-parse attrs "cpu" errtxt)
d164 3
a166 3
		     (-prefetch-parse errtxt prefetch)
		     (-retire-parse errtxt retire)
		     (map (lambda (p) (-pipeline-parse errtxt name p)) pipelines)
d168 1
a168 1
		     (map (lambda (u) (-unit-parse errtxt name u)) units))))
d170 1
d179 1
a179 1
; ERRTXT is prepended to error messages to provide context.
d183 2
a184 2
(define (-model-read errtxt . arg-list)
  (let (; Current mach elements:
d195 1
d211 1
a211 1
	      (else (parse-error errtxt "invalid model arg" arg)))
d213 1
d215 1
a215 2
    (-model-parse errtxt name comment attrs mach prefetch retire pipelines state units)
    )
d222 2
a223 1
    (let ((m (apply -model-read (cons "define-model" arg-list))))
d281 2
a282 1
  (logit 3 "  parse-insn-timing: context= " context ", desc= " insn-timing-desc "\n")
@


1.6
log
@	Use hash tables to record ifields, operands, insns, macro-insns.
	* attr.scm (attr-builtin!): Tweak some comments.
	* hardware.scm (hardware-builtin!): Call all-isas-attr-value.
	* ifield.scm (<ifield>): Subclass from <ordered-ident> instead of
	<ident>.
	(<multi-ifield>): New constructor.
	(ifield-builtin!): Add isa attr to f-nil, f-anyof.
	* insn.scm (<insn>): Subclass from <ordered-ident> instead of
	<ident>.
	(-sub-insn-make!): Add hack to avoid differences in generated code.
	(multi-insn-instantiate!): Add total number of multi-insns to
	logging message.
	* mach.scm (<arch>): Rename members ifld-list, op-list, insn-list,
	minsn-list to foo-table.  New member next-ordinal.
	Update getters/setters.
	(arch-ifld-list, arch-op-list, arch-insn-list, arch-minsn-list):
	New functions.
	(-get-next-ordinal!, -get-lowest-ordinal): New function.
	(-make-ident-object-table, -ident-object-table->list,
	-ident-object-table-add!, -ident-object-table-lookup): New functions.
	(current-ifld-list, current-ifld-add! current-ifld-lookup,
	-ifld-already-defined?): Rewrite.
	(current-op-list, current-op-add! current-op-lookup,
	-op-already-defined?): Rewrite.
	(current-raw-insn-list, insn-list-car, insn-list-splice!): Delete.
	(current-insn-list, current-insn-add! current-insn-lookup,
	-insn-already-defined?): Rewrite.
	(current-minsn-list, current-minsn-add! current-minsn-lookup,
	-minsn-already-defined?): Rewrite.
	(all-isas-attr-value, all-isas-attr, attr-isa-list): New functions.
	(MAX-VIRTUAL-INSNS): Define.
	(arch-analyze-insns!): Add hack to avoid differences in generated code.
	Update use of arch-insn-list.
	(mach-init!): Initialize ifld-table, op-table, insn-table, minsn-table.
	(arch-finish!): Delete references to ifld-table, op-table, insn-table,
	minsn-table.
	* minsn.scm (<macro-insn>): Subclass from <ordered-ident> instead of
	<ident>.  New constructor.
	* operand.scm (<operand>): Subclass from <ordered-ident> instead of
	<ident>.
	* sid.scm (-virtual-insn-add!): New function.
	(-create-virtual-insns!): Call it.
	(-fill-sim-insn-list!): Rewrite.
	* sim.scm (-virtual-insn-add!, -create-virtual-insns!): New functions.
	(sim-finish!): Move contents to -create-virtual-insns!, and call it.
	* utils-cgen.scm (<ordered-ident>): New class.
	(obj-ordinal, obj-set-ordinal!): New functions.
	(add-ident-methods!): Delete.

	* model.scm (parse-insn-timing): Change logging message to level 3.
@
text
@d275 1
a275 1
  (logit 3 "parse-insn-timing: context==" context ", desc==" insn-timing-desc "\n")
@


1.5
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d275 1
a275 1
  (logit 2 "parse-insn-timing: context==" context ", desc==" insn-timing-desc "\n")
@


1.4
log
@	Add guile 1.6.4 support.
	- empty list must be quoted
	- string functions have stricter type checking
	- eval now takes a second argument
	- symbol-bound? is deprecated
	* attr.scm (-attr-parse): Use stringsym-append to build errtxt.
	(bitset-attr->list): Ensure arg to string-cut is a string.
	(attr-parse): Ensure args to string-ref and string-drop1 are strings.
	(<enum-attribute>,gen-value-for-defn): Fetch string name of self.
	* cos.scm (-class-list): Must quote empty list.
	(-class-parent-classes,-class-compute-class-desc): Ditto.
	(class-make,make,object-reset!): Ditto.
	(method-make-make!): Call eval1 instead of eval.
	(method-make-forward!,method-make-virtual-forward!): Ditto.
	* decode.scm (subdtable-add): Use stringsym-append instead of
	string-append.
	(-gen-exprtable-name): Fetch string name of exprtable-entry-insn.
	(-build-decode-table-entry): Fetch string name of insn.
	* desc-cpu.scm (-gen-isa-table-defns): Fetch string name of isa.
	(-gen-mach-table-defns): Ditto for mach.
	(gen-ifld-defns): Ditto for ifld.
	(gen-hw-table-defns): Ditto for hw.
	(gen-operand-table): Ditto for op.
	(gen-insn-table-entry): Ditto for insn.
	* desc.scm (gen-attr-table-defn): Ditto for attr.
	(<keyword>,gen-defn): Don't pass symbols to string-append.
	* enum.scm (parse-enum-vals): Use symbolstr-append instead of
	symbol-append.
	(enum-vals-upcase): Use symbol-upcase to build result.
	(-enum-parse): Use stringsym-append to build errtxt.
	* fixup.scm (*guile-major-version*,*guile-minor-version*): New globals.
	(eval1): New function.
	(symbol-bound?): Provide own version if >= guile 1.6.
	* hardware.scm (define-keyword): Use string-append instead of
	symbol-append.
	* html.scm (gen-html-header,gen-table-of-contents,gen-arch-intro,
	cgen.html,cgen-insn.html): Convert current-arch-name to a string
	before using.
	(gen-list-entry): Handle either symbol or string `name' arg.
	(gen-obj-doc-header): Fetch string name of `o' arg.
	(define-cpu-intro): Ditto for cpu.
	(gen-mach-intro): Ditto for mach.
	(gen-model-intro): Ditto for model.
	(gen-isa-intro): Ditto for isa.
	(gen-machine-doc-1): Ditto for isa.
	(gen-reg-doc-1): Convert mach to string first.
	(gen-insn-doc-1): Ditto.  Convert model/unit names to strings first.
	(gen-insn-doc-list): Fetch string name of mach.  Convert insn name
	to string first.
	(gen-insn-categories): Fetch string name of mach.  Convert
	enum-val-name to string first.
	(gen-insn-docs): Fetch string name of mach.
	* ifield.scm (ifld-ilk): Result is a string.
	* iformat.scm (-ifmt-search-key): Convert attr value to string first.
	Fetch string name of ifld.
	(-sfmt-search-key): Similarily for ifld and op.
	* insn.scm (syntax-make): Fetch string name of syntax element.
	* mach.scm (-cpu-parse): Use stringsym-append to build errtxt.
	* minsn.scm (minsn-make-alias): Fetch string name of minsn.
	* mode.scm (mode:c-type): Result is a string.
	(mode:enum): Fetch string name of mode.
	(-mode-parse): Use stringsym-append to build errtxt.
	* model.scm (model:enum): Fetch string name of model.
	(-model-parse): Use stringsym-append to build errtxt.
	(parse-insn-timing): Must quote empty list.
	* opc-itab.scm (-gen-minsn-table-entry): Fetch string name of minsn.
	(-gen-minsn-opcode-entry): Ditto.
	* opcodes.scm (<operand>,gen-function-name): `what' arg is a symbol,
	convert to string.
	(read-cpu.opc): Convert current-arch-name to a string before using.
	* operand.scm (<operand>,gen-pretty-name): Ensure `name' is a string.
	(<derived-operand>): Must quote empty list.
	(op-sort): Simplify, call alpha-sort-obj-list to do sort.
	* pgmr-tools.scm (pgmr-pretty-print-insn-value): Fetch string name
	of ifld.
	* pmacros.scm (-pmacro-build-lambda): Use eval1 instead of eval.
	(-pmacro-sym): Must convert symbols to strings before passing to
	string-append.
	(-pmacro-str): Ditto.
	(pmacros-init!): Use eval1 instead of eval.
	* read.scm (keep-mach-atlist?): Simplify, use bitset-attr->list.
	(keep-isa-atlist?): Ditto.
	(cmd-if): Use eval1 instead of eval.
	* rtl-c.scm (<c-expr>,get-name): Fetch string name of self.
	(-rtl-c-get): Fetch string name of src.
	(s-unop): Ditto for mode.
	(s-binop,s-binop-with-bit,s-shop,s-convop,s-cmpop): Ditto.
	(-gen-par-temp-defns,subword): Ditto.
	(join): Use stringsym-append instead of string-append.
	* rtl-traverse.scm (rtx-option?): Convert option to string first.
	(rtx-traverse-debug): Fetch string name of rtx-obj.
	* rtl.scm (def-rtx-node): Use eval1 instead of eval.
	(def-rtx-syntax-node,def-rtx-operand-node,def-rtx-macro-node): Ditto.
	(rtx-pretty-name): Result is a string.
	(-rtx-hw-name): Use symbolstr-append instead of symbol-append.
	* semantics.scm (semantic-compile): Simplify, use alpha-sort-obj-list.
	* sid-cpu.scm (cgen-write.cxx): Convert current-arch-name to a string
	before using.
	(-gen-sfrag-case): Fetch string name of user.
	* sid-model.scm (unit:enum): Fetch string name of unit.
	* sid.scm (<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Convert current-arch-name to a string before using.
	* sim-cpu.scm (-gen-scache-semantic-fn): Fetch string name of insn.
	(-gen-no-scache-semantic-fn): Ditto.
	(cgen-defs.h): Fetch string name of isa.
	(cgen-read.c): Convert current-arch-name to a string before using.
	(cgen-write.c): Ditto.
	* sim-model.scm (unit:enum): Fetch string name of unit.
	(gen-model-fn-decls): Use stringsym-append instead of string-append.
	(-gen-model-timing-table): Fetch string name of model.
	(-gen-mach-model-table): Ditto.
	(-gen-mach-defns): Fetch string name of mach.
	* sim.scm (gen-reg-access-defn): Fetch string name of hw.
	(<hw-memory>,cxmake-get): Fetch string name of mode.
	(<hw-memory>,gen-set-quiet): Ditto.
	(gen-mode-defs): Ditto.
	(sim-finish!): Must quote empty list.
	* utils-cgen.scm (<ident>): Must quote empty list.
	(obj:str-name): New fn.
	(parse-comment): Result is a string.
	(parse-symbol): Result is a symbol.
	(parse-string): Result is a string.
	(keyword-list?): Convert arg to string before calling string-ref.
	(keyword-list->arg-list): Ditto.
	(gen-attr-name): Convert attr-name to string first.
	(alpha-sort-obj-list): Use symbol<? instead of string<?.
	* utils-gen.scm (attr-gen-decl): Fetch string name of attr.
	(gen-define-ifmt-ifields): Ditto for fld.
	* utils.scm (gen-c-symbol): Ensure str is a string before calling
	map-over-string.
	(gen-file-name): Ditto.
	(symbol-downcase,symbol-upcase,symbol<?): New fns.
	(stringsym-append,symbolstr-append,->string,->symbol): New fns.
	(reduce): Call eval1 instead of eval.
	* cpu/m32r.cpu (addi): Don't use `#.'.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2003 Red Hat, Inc.
@


1.4.6.1
log
@	* All *.scm files: Update copyright year.
	* utils.scm (copyright-fsf, copyright-redhat): Ditto.
@
text
@d2 1
a2 1
; Copyright (C) 2000, 2003, 2009 Red Hat, Inc.
@


1.3
log
@	* Makefile.am (srcroot): New var.
	(html): New rule.
	* Makefile.in: Regenerate.
	* cgen-doc.scm: New file.
	* html.scm: New file.
	* gen-all-doc: New file.
	* dev.scm (cload): Handle DOC application.
	(load-doc): New fn.
	* machs.scm (machs-for-cpu): New fn.
	* model.scm (models-for-cpu): New fn.
	* utils.scm (gen-c-copyright): Renamed from gen-copyright.
	All uses updated.
	(iota): Rewrite to be identical to pmacro version.  All uses updated.
	* utils-cgen.scm (alpha-sort-obj-list): New fn.
@
text
@d99 1
a99 1
  (gen-c-symbol (string-append "MODEL_" (string-upcase (obj:name m))))
d150 1
a150 1
	(errtxt (string-append errtxt " " name))
d283 1
a283 1
		     ()))))
@


1.2
log
@2003-04-16  Dave Brolley  <brolley@@redhat.com>

        * doc/rtl.texi (Iiming): Correct example to use 'model-name'.
        * utils.scm (copyright-fsf): Update generate copyright years.
        (copyright-cygnus): Ditto.
        * sid.scm (-op-gen-set-trace): Generate code to fill in bitmask of modified
        operands.
        (-gen-arch-model-decls): Don't generate unit enum declaration or MAX_UNITS
        here.
        (<operand>'gen-profile-code): New parameter 'when'.
        (<iunit>'gen-profile-code): Ditto.
        (<insn>'gen-profile-code): Ditto.
        (<unit>'gen-profile-code): Ditto. Only generate 'referenced' and
        'insn_reference' for the 'after' function.
        * model.scm (unit:enum): Moved to sim-model.scm.
        * sim-model.scm (unit:enum): Moved from model.scm.
        * sid-decode.scm (-gen-scache-decls): Generate the 'written' field.
        * cgen-sid.scm (sim-arguments): Document the generation of model.h.
        * sid-model.scm (unit:enum): New version for sid.
        (gen-model-class-name): New function.
        (gen-model-unit-fn-decl): New function.
        (gen-model-fn-decls): Call gen-model-unit-fn-decl.
        (gen-model-unit-fn-name): New parameter 'when'.
        (-gen-model-insn-fn-name): Ditto.
        (-gen-model-insn-qualified-fn-name): New function.
        (-gen-model-insn-fn-decl): New function.
        (-gen-model-insn-fn-decls): New function.
        (-gen-model-insn-fn): New parameter 'when'. Call
        -gen-model-insn-qualified-fn-name.
        (-gen-model-insn-fns): Generate the constructor for the model. Generate
        functions for modelling insn before and after execution.
        (-gen-model-class-decls): New function.
        (" (gen-model-class-name model) "): New function.
        (gen-model-classes): New function.
        (-gen-insn-timing): Generate functions for modelling insn before and after
        execution.
        (-gen-insn-unit-timing): Generate class-qualified names.
        (-gen-model-timing-table): Ditto.
        (cgen-model.cxx): Generate #include for @@cpu@@.h. Omit generation of code
        not needed (yet) by sid.
        (cgen-model.h): New function.
@
text
@d101 7
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
; Copyright (C) 2000 Red Hat, Inc.
a68 7

(define (unit:enum u)
  (gen-c-symbol (string-append "UNIT_"
			       (string-upcase (obj:name (unit:model u)))
			       "_"
			       (string-upcase (obj:name u))))
)
d268 1
@


1.1.1.1
log
@CGEN 1.0 import
@
text
@@
