head	1.14;
access;
symbols
	binutils-2_24-branch:1.14.0.18
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.14
	binutils-2_23_2:1.14
	binutils-2_23_1:1.14
	binutils-2_23:1.14
	binutils-2_23-branch:1.14.0.16
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.14
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.12
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.10
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.14
	binutils-2_20:1.14
	binutils-arc-20081103-branch:1.14.0.8
	binutils-arc-20081103-branchpoint:1.14
	binutils-2_20-branch:1.14.0.6
	binutils-2_20-branchpoint:1.14
	dje-cgen-play1-branch:1.14.0.4
	dje-cgen-play1-branchpoint:1.14
	arc-20081103-branch:1.14.0.2
	arc-20081103-branchpoint:1.14
	binutils-2_19_1:1.13
	binutils-2_19:1.13
	binutils-2_19-branch:1.13.0.2
	binutils-2_19-branchpoint:1.13
	binutils-2_18:1.11
	binutils-2_18-branch:1.11.0.2
	binutils-2_18-branchpoint:1.11
	binutils_latest_snapshot:1.14;
locks; strict;
comment	@# @;


1.14
date	2008.10.09.13.42.30;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.12.12.23.13;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.07.14.46.44;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.21.00.31.39;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.18.02.09.20;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.05.00.27.39;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.29.13.10.10;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.11.03.10.11;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.27.02.10.58;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.26.23.56.40;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.01.06.14.37;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.13.07.33.32;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.11.06.24.40;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* embedspu.sh: Pass -Wa,-noexecstack to $CC.
@
text
@#! /bin/sh 
# Embed an SPU ELF executable into a PowerPC object file.
#
# Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
#
# This file is part of GNU Binutils.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
# 02110-1301, USA.

usage ()
{
  echo "Usage: embedspu [flags] symbol_name input_filename output_filename"
  echo
  echo "        input_filename:  SPU ELF executable to be embedded"
  echo "        output_filename: Resulting PowerPC object file"
  echo "        symbol_name:     Name of program handle struct to be defined"
  echo "        flags:           GCC flags defining PowerPC object file format"
  echo "                         (e.g. -m32 or -m64)"
  exit 1
}

program_transform_name=
mydir=`dirname "$0"`

find_prog ()
{
  prog=`echo $1 | sed "$program_transform_name"`
  prog="$mydir/$prog"
  test -x "$prog" && return 0
  prog="$mydir/$1"
  test -x "$prog" && return 0
  prog=`echo $1 | sed "$program_transform_name"`
  which $prog > /dev/null 2> /dev/null && return 0
  return 1
}

SYMBOL=
INFILE=
OUTFILE=
FLAGS=

parse_args ()
{
  while test -n "$1"; do
    case "$1" in
      -*) FLAGS="${FLAGS} $1" ;;
      *)  if test -z "$SYMBOL"; then
	    SYMBOL="$1"
	  elif test -z "$INFILE"; then
	    INFILE="$1"
	  elif test -z "$OUTFILE"; then
	    OUTFILE="$1"
	  else
	    echo "Too many arguments!"
	    usage
	  fi ;;
    esac
    shift
  done
  if test -z "$OUTFILE"; then
    usage
  fi
  if test ! -r "$INFILE"; then
    echo "${INFILE}: File not found"
    usage
  fi
}

main ()
{
  parse_args "$@@"

  # Find a powerpc gcc.  Support running from a combined tree build.
  if test -x "$mydir/../gcc/xgcc"; then
    CC="$mydir/../gcc/xgcc -B$mydir/../gcc/"
  else
    find_prog gcc
    if test $? -ne 0; then
      echo "Cannot find $prog"
      exit 1
    fi
    CC="$prog"
  fi

  # Find readelf.  Any old readelf should do.
  find_prog readelf
  if test $? -ne 0; then
    if which readelf > /dev/null 2> /dev/null; then
      prog=readelf
    else
      echo "Cannot find $prog"
      exit 1
    fi
  fi
  READELF="$prog"

  # Sanity check the input file
  if ! ${READELF} -h ${INFILE} | grep 'Class:.*ELF32' >/dev/null 2>/dev/null \
     || ! ${READELF} -h ${INFILE} | grep 'Type:.*EXEC' >/dev/null 2>/dev/null \
     || ! ${READELF} -h ${INFILE} | egrep 'Machine:.*(SPU|17)' >/dev/null 2>/dev/null
  then
    echo "${INFILE}: Does not appear to be an SPU executable"
    exit 1
  fi

  toe=`${READELF} -S ${INFILE} | sed -n -e 's, *\[ *\([0-9]*\)\] *\.toe *[PROGN]*BITS *\([0-9a-f]*\).*,\1 \2,p'`
  toe_addr=`echo $toe | sed -n -e 's,.* ,,p'`
  toe=`echo $toe | sed -n -e 's, .*,,p'`
  has_ea=`${READELF} -S ${INFILE} | sed -n -e 's, *\[ *\([0-9]*\)\] *\._ea *PROGBITS.*,\1,p'`
  # For loaded sections, pick off section number, address, and file offset
  sections=`${READELF} -S ${INFILE} | sed -n -e 's, *\[ *\([0-9]*\)\] *[^ ]* *PROGBITS *\([0-9a-f]*\) *\([0-9a-f]*\).*,\1 \2 \3,p'`
  sections=`echo ${sections}`
  # For relocation sections, pick off file offset and info (points to
  # section where relocs apply)
  relas=`${READELF} -S ${INFILE} | sed -n -e 's, *\[ *[0-9]*\] *[^ ]* *RELA *[0-9a-f]* *0*\([0-9a-f][0-9a-f]*\).* \([0-9a-f][0-9a-f]*\) *[0-9a-f][0-9a-f]*$,\1 \2,p'`
  relas=`echo ${relas}`

  # Build embedded SPU image.
  # 1. The whole SPU ELF file is written to .rodata.speelf
  # 2. Symbols starting with the string "_EAR_" in the SPU ELF image are
  #    special.  They allow an SPU program to access corresponding symbols
  #    (ie. minus the _EAR_ prefix), in the PowerPC program.  _EAR_ without
  #    a suffix is used to refer to the addrress of the SPU image in
  #    PowerPC address space.  _EAR_* symbols must all be defined in .toe
  #    at 16 byte intervals, or they must be defined in other non-bss
  #    sections.
  #    Find all _EAR_ symbols in .toe using readelf, sort by address, and
  #    write the address of the corresponding PowerPC symbol in a table
  #    built in .data.spetoe.  For _EAR_ symbols not in .toe, create
  #    .reloc commands to relocate their location directly.
  # 3. Look for R_SPU_PPU32 and R_SPU_PPU64 relocations in the SPU ELF image
  #    and create .reloc commands for them.
  # 4. Write a struct spe_program_handle to .data.
  # 5. Write a table of _SPUEAR_ symbols.
  ${CC} ${FLAGS} -x assembler-with-cpp -nostartfiles -nostdlib \
	-Wa,-mbig -Wa,-noexecstack -Wl,-r -Wl,-x -o ${OUTFILE} - <<EOF
 .section .data.spetoe,"aw",@@progbits
 .p2align 7
__spetoe__:
`${READELF} -s -W ${INFILE} | grep ' _EAR_' | sort -k 2 | awk \
'BEGIN { \
	addr = strtonum ("0x" "'${toe_addr:-0}'"); \
	split ("'"${sections}"'", s, " "); \
	for (i = 1; i in s; i += 3) { \
	    sec_off[s[i]] = strtonum ("0x" s[i+2]) - strtonum ("0x" s[i+1]); \
	} \
} \
$7 == "'${toe}'" && strtonum ("0x" $2) != addr { \
	print "#error Symbol " $8 " not in 16 byte element toe array!"; \
} \
$7 == "'${toe}'" { \
	addr = addr + 16; \
} \
$7 == "'${toe}'" { \
	print "#ifdef _LP64"; \
	print " .quad " ($8 == "_EAR_" ? "__speelf__" : substr($8, 6)) ", 0"; \
	print "#else"; \
	print " .int 0, " ($8 == "_EAR_" ? "__speelf__" : substr($8, 6)) ", 0, 0"; \
	print "#endif"; \
} \
$7 != "'${toe}'" && $7 in sec_off { \
	print "#ifdef _LP64"; \
	print " .reloc __speelf__+" strtonum ("0x" $2) + sec_off[$7] ", R_PPC64_ADDR64, " ($8 == "_EAR_" ? "__speelf__" : substr($8, 6)); \
	print "#else"; \
	print " .reloc __speelf__+" strtonum ("0x" $2) + sec_off[$7] + 4 ", R_PPC_ADDR32, " ($8 == "_EAR_" ? "__speelf__" : substr($8, 6)); \
	print "#endif"; \
	if (!donedef) { print "#define HAS_RELOCS 1"; donedef = 1; }; \
} \
$7 != "'${toe}'" && ! $7 in sec_off { \
	print "#error Section not found for " $8; \
} \
'`
`test -z "${relas}" || ${READELF} -r -W ${INFILE} | awk \
'BEGIN { \
	split ("'"${sections}"'", s, " "); \
	for (i = 1; i in s; i += 3) { \
	    sec_off[s[i]] = strtonum ("0x" s[i+2]) - strtonum ("0x" s[i+1]); \
	} \
	split ("'"${relas}"'", s, " "); \
	for (i = 1; i in s; i += 2) { \
	    rela[s[i]] = strtonum (s[i+1]); \
	} \
} \
/^Relocation section/ { \
	sec = substr($6, 3); \
} \
$3 ~ /R_SPU_PPU/ { \
	print "#ifdef _LP64"; \
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] ", R_PPC64_ADDR" substr($3, 10) ", " ($5 != "" ? $5 "+0x" $7 : "__speelf__ + 0x" $4); \
	print "#else"; \
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] + (substr($3, 10) == "64" ? 4 : 0)", R_PPC_ADDR32, " ($5 != "" ? $5 "+0x" $7 : "__speelf__ + 0x" $4); \
	print "#endif"; \
	if (!donedef) { print "#define HAS_RELOCS 1"; donedef = 1; }; \
} \
$3 ~ /unrecognized:/ { \
	print "#ifdef _LP64"; \
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] ", R_PPC64_ADDR" ($4 == "f" ? "64" : "32") ", " ($6 != "" ? $6 "+0x" $8 : "__speelf__ + 0x" $5); \
	print "#else"; \
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] + ($4 == "f" ? 4 : 0)", R_PPC_ADDR32, " ($6 != "" ? $6 "+0x" $8 : "__speelf__ + 0x" $5); \
	print "#endif"; \
	if (!donedef) { print "#define HAS_RELOCS 1"; donedef = 1; }; \
} \
'`
#if ${has_ea:-0}
 .section .data.speelf,"aw",@@progbits
#elif defined (HAS_RELOCS) && (defined (__PIC__) || defined (__PIE__))
 .section .data.rel.ro.speelf,"a",@@progbits
#else
 .section .rodata.speelf,"a",@@progbits
#endif
 .p2align 7
__speelf__:
 .incbin "${INFILE}"

 .section .data.spehandle,"aw",@@progbits
 .globl ${SYMBOL}
 .type ${SYMBOL}, @@object
# fill in a struct spe_program_handle
#ifdef _LP64
 .p2align 3
${SYMBOL}:
 .int 24
 .int 0
 .quad __speelf__
 .quad __spetoe__
#else
 .p2align 2
${SYMBOL}:
 .int 12
 .int __speelf__
 .int __spetoe__
#endif
 .size ${SYMBOL}, . - ${SYMBOL}

`${READELF} -s -W ${INFILE} | grep ' _SPUEAR_' | sort -k 2 | awk \
'{ \
	print " .globl '${SYMBOL}'_" substr($8, 9); \
	print " .type '${SYMBOL}'_" substr($8, 9) ", @@object"; \
	print " .size '${SYMBOL}'_" substr($8, 9) ", 4"; \
	print "'${SYMBOL}'_" substr($8, 9) ":"; \
	print " .int 0x" $2; \
} \
'`
EOF
}

main "$@@"
@


1.13
log
@	* embedspu.sh: Test for presence of ._ea by looking at section
	table rather than looking at relocs.  Correct toe_addr substitution.
@
text
@d149 1
a149 1
	-Wa,-mbig -Wl,-r -Wl,-x -o ${OUTFILE} - <<EOF
@


1.12
log
@bfd/
	* elf32-spu.c (spu_elf_special_sections): Add "._ea".
	(spu_elf_relocate_section): Handle relocations against symbols
	defined in ._ea specially.
binutils/
	* embedspu.sh: Take note of R_SPU_PPU32/64 relocs without a symbol,
	and if present, put image in ".data.speelf".  Put program handle
	in ".data.spehandle".
ld/emulparams/
	* elf32_spu.sh (OTHER_SECTIONS): Add "._ea".
	* elf32ppc.sh: If building with spu support, put ".data.spehandle"
	sections at the start of ".data" and provide a symbol to locate
	the directory of embedded spe programs.
ld/testsuite/
	* ld-spu/ear.s: Align various sections.
	* ld-spu/embed.rd: Update.
@
text
@d122 1
d155 1
a155 1
	addr = strtonum ("0x" "'${toe_addr-0}'"); \
a205 1
	if (!has_ea && $5 == "") { print "#define HAS_EA 1"; has_ea = 1; }; \
a213 1
	if (!has_ea && $5 == "") { print "#define HAS_EA 1"; has_ea = 1; }; \
d217 1
a217 1
#ifdef HAS_EA
@


1.11
log
@Change sources over to using GPLv3
@
text
@d4 1
a4 1
# Copyright 2006, 2007 Free Software Foundation, Inc.
d141 1
a141 1
  #    built in .data.spetoe.  For _EAE_ symbols not in .toe, create
d205 1
d214 1
d218 3
a220 1
#if defined (HAS_RELOCS) && (defined (__PIC__) || defined (__PIE__))
d229 1
a229 1
 .section .data,"aw",@@progbits
@


1.10
log
@	* embedspu.sh (relas): Correct sh_info parsing.
@
text
@d10 1
a10 1
# the Free Software Foundation; either version 2 of the License, or
@


1.9
log
@	* embedspu.sh: Parse _SPUEAR_ symbol values as hex.
@
text
@d127 1
a127 1
  relas=`${READELF} -S ${INFILE} | sed -n -e 's, *\[ *[0-9]*\] *[^ ]* *RELA *[0-9a-f]* *0*\([0-9a-f][0-9a-f]*\) .*\([0-9a-f][0-9a-f]*\) *[0-9a-f][0-9a-f]*$,\1 \2,p'`
@


1.8
log
@	* embedspu.sh: Handle R_SPU_PPU* relocs with no symbol.
@
text
@d251 1
a251 1
	print " .int " $2; \
@


1.7
log
@binutils/
	* embedspu.sh: Emit SPU ELF image to .data.rel.ro.speelf if
	pic or pie and image needs relocs.
ld/
	* emultempl/spuelf.em (base_name): New function, split out from..
	(embedded_spu_file) ..here.  Pass -fPIC or -fpie to embedspu
	invocation if we deduce a shared lib or position independent
	executable build by looking at ctrbegin* linker input files.
@
text
@d201 1
a201 1
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] ", R_PPC64_ADDR" substr($3, 10) ", " $5 "+0x" $7; \
d203 1
a203 1
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] + (substr($3, 10) == "64" ? 4 : 0)", R_PPC_ADDR32, " $5 "+0x" $7; \
d209 1
a209 1
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] ", R_PPC64_ADDR" ($4 == "f" ? "64" : "32") ", " $6 "+0x" $8; \
d211 1
a211 1
	print " .reloc __speelf__+" strtonum ("0x" $1) + sec_off[rela[sec]] + ($4 == "f" ? 4 : 0)", R_PPC_ADDR32, " $6 "+0x" $8; \
@


1.6
log
@include/elf/
	* spu.h (R_SPU_PPU32, R_SPU_PPU64): Define.
bfd/
	* reloc.c (BFD_RELOC_SPU_PPU32, BFD_RELOC_SPU_PPU64): Define.
	* elf-bfd.h (struct elf_backend_data): Change return type of
	elf_backend_relocate_section to int.
	* elf32-spu.c (elf_howto_table): Add howtos for R_SPU_PPU32 and
	R_SPU_PPU64.
	(spu_elf_bfd_to_reloc_type): Convert new relocs.
	(spu_elf_count_relocs): New function.
	(elf_backend_count_relocs): Define.
	(spu_elf_relocate_section): Arrange to emit R_SPU_PPU32 and
	R_SPU_PPU64 relocs.
	* elflink.c (elf_link_input_bfd): Emit relocs if relocate_section
	returns 2.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
gas/
	* config/tc-spu.c (md_pseudo_table): Add int, long, quad.  Call
	spu_cons for word.
	(md_assemble): Tidy use of insn.flag.
	(get_imm): Likewise.  Handle uppercase input too.
	(spu_cons): New function.
	* config/tc-spu.h (tc_fix_adjustable): Don't adjust SPU_PPU relocs.
	(TC_FORCE_RELOCATION): Don't resolve them either.
binutils/
	* embedspu.sh (find_prog): Prefer prog in same dir as embedspu
	over one found on the users path.
	(main): Generate .reloc for each R_SPU_PPU* reloc.
@
text
@a148 5
 .section .rodata.speelf,"a",@@progbits
 .p2align 7
__speelf__:
 .incbin "${INFILE}"

d179 1
d205 1
d213 1
d216 8
@


1.5
log
@	* embedspu.sh: Correct toe_addr quoting.
@
text
@a40 1
  which $prog > /dev/null 2> /dev/null && return 0
d46 1
d98 1
a98 1
  # Find readelf.  Any old readelf should do.  We only want to read syms.
d122 1
d125 4
d143 4
a146 2
  # 3. Write a struct spe_program_handle to .data.
  # 4. Write a table of _SPUEAR_ symbols.
d189 29
@


1.4
log
@	* embedspu.sh: Combine "_EAR_" and "_EAR_*" patterns.  Tighten
	.toe section and .toe address checks.  Use .reloc for _EAR*
	symbols defined in non-BSS sections.  Build table for _SPUEAR_
	symbols.
@
text
@d152 1
a152 1
	addr = strtonum ("0x" '${toe_addr-0}'); \
@


1.3
log
@	* embedspu.sh: Set type and size of global program handle symbol.
@
text
@d119 6
d131 7
a137 5
  #    PowerPC address space.  _EAR_* symbols must all be defined in one
  #    section at 16 byte intervals.
  #    Find all _EAR_ symbols using readelf, sort by address, and write
  #    the address of the corresponding PowerPC symbol in a table built
  #    in .data.spetoe.
d139 1
d152 5
a156 2
  last_addr = 0; \
  last_sym = ""; \
d158 2
a159 2
last_addr != 0 && strtonum("0x" $2) != last_addr + 16 { \
	print "#error Symbols " last_sym " and " $8 " are not 16 bytes apart!"; \
d161 2
a162 2
{ last_addr = strtonum("0x" $2); \
  last_sym = $8; \
d164 1
a164 1
$8 == "_EAR_" { \
d166 1
a166 1
	print " .quad __speelf__, 0"; \
d168 1
a168 1
	print " .int 0, __speelf__, 0, 0"; \
d171 1
a171 1
$8 != "_EAR_" { \
d173 1
a173 1
	print " .quad " substr($8, 6) ", 0"; \
d175 1
a175 1
	print " .int 0, " substr($8, 6) ", 0, 0"; \
d177 5
a181 1
}'`
d202 10
@


1.2
log
@	* embedspu.sh: Add -W to readelf invocation.
@
text
@d169 1
d185 1
@


1.1
log
@	* embedspu.sh: New file.
	* Makefile.am (embedspu): Add rule.
	* configure.in (BUILD_MISC): Add embedspu for powerpc-linux.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d4 1
a4 1
# Copyright 2006 Free Software Foundation, Inc.
d141 1
a141 1
`${READELF} -s ${INFILE} | grep ' _EAR_' | sort -k 2 | awk \
@

