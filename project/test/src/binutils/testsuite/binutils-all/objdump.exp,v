head	1.35;
access;
symbols
	binutils-2_24-branch:1.35.0.2
	binutils-2_24-branchpoint:1.35
	binutils-2_21_1:1.27
	binutils-2_23_2:1.33.2.2
	binutils-2_23_1:1.33.2.1
	binutils-2_23:1.33.2.1
	binutils-2_23-branch:1.33.0.2
	binutils-2_23-branchpoint:1.33
	binutils-2_22_branch:1.27.0.6
	binutils-2_22:1.27
	binutils-2_22-branch:1.27.0.4
	binutils-2_22-branchpoint:1.27
	binutils-2_21:1.27
	binutils-2_21-branch:1.27.0.2
	binutils-2_21-branchpoint:1.27
	binutils-2_20_1:1.25.2.2
	binutils-2_20:1.25.2.2
	binutils-arc-20081103-branch:1.24.0.8
	binutils-arc-20081103-branchpoint:1.24
	binutils-2_20-branch:1.25.0.2
	binutils-2_20-branchpoint:1.25
	dje-cgen-play1-branch:1.24.0.6
	dje-cgen-play1-branchpoint:1.24
	arc-20081103-branch:1.24.0.4
	arc-20081103-branchpoint:1.24
	binutils-2_19_1:1.24
	binutils-2_19:1.24
	binutils-2_19-branch:1.24.0.2
	binutils-2_19-branchpoint:1.24
	binutils-2_18:1.21
	binutils-2_18-branch:1.21.0.2
	binutils-2_18-branchpoint:1.21
	binutils-csl-coldfire-4_1-32:1.20
	binutils-csl-sourcerygxx-4_1-32:1.20
	binutils-csl-innovasic-fido-3_4_4-33:1.20
	binutils-csl-sourcerygxx-3_4_4-32:1.18
	binutils-csl-coldfire-4_1-30:1.20
	binutils-csl-sourcerygxx-4_1-30:1.20
	binutils-csl-coldfire-4_1-28:1.20
	binutils-csl-sourcerygxx-4_1-29:1.20
	binutils-csl-sourcerygxx-4_1-28:1.20
	binutils-csl-arm-2006q3-27:1.20
	binutils-csl-sourcerygxx-4_1-27:1.20
	binutils-csl-arm-2006q3-26:1.20
	binutils-csl-sourcerygxx-4_1-26:1.20
	binutils-csl-sourcerygxx-4_1-25:1.20
	binutils-csl-sourcerygxx-4_1-24:1.20
	binutils-csl-sourcerygxx-4_1-23:1.20
	binutils-csl-sourcerygxx-4_1-21:1.20
	binutils-csl-arm-2006q3-21:1.20
	binutils-csl-sourcerygxx-4_1-22:1.20
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.20
	binutils-csl-sourcerygxx-4_1-20:1.20
	binutils-csl-arm-2006q3-19:1.20
	binutils-csl-sourcerygxx-4_1-19:1.20
	binutils-csl-sourcerygxx-4_1-18:1.20
	binutils-csl-renesas-4_1-9:1.20
	binutils-csl-sourcerygxx-3_4_4-25:1.18
	binutils-csl-renesas-4_1-8:1.20
	binutils-csl-renesas-4_1-7:1.20
	binutils-csl-renesas-4_1-6:1.20
	binutils-csl-sourcerygxx-4_1-17:1.20
	binutils-csl-sourcerygxx-4_1-14:1.20
	binutils-csl-sourcerygxx-4_1-15:1.20
	binutils-csl-sourcerygxx-4_1-13:1.20
	binutils-2_17:1.20
	binutils-csl-sourcerygxx-4_1-12:1.20
	binutils-csl-sourcerygxx-3_4_4-21:1.20
	binutils-csl-wrs-linux-3_4_4-24:1.18
	binutils-csl-wrs-linux-3_4_4-23:1.18
	binutils-csl-sourcerygxx-4_1-9:1.20
	binutils-csl-sourcerygxx-4_1-8:1.20
	binutils-csl-sourcerygxx-4_1-7:1.20
	binutils-csl-arm-2006q1-6:1.20
	binutils-csl-sourcerygxx-4_1-6:1.20
	binutils-csl-wrs-linux-3_4_4-22:1.18
	binutils-csl-coldfire-4_1-11:1.20
	binutils-csl-sourcerygxx-3_4_4-19:1.20
	binutils-csl-coldfire-4_1-10:1.20
	binutils-csl-sourcerygxx-4_1-5:1.20
	binutils-csl-sourcerygxx-4_1-4:1.20
	binutils-csl-wrs-linux-3_4_4-21:1.18
	binutils-csl-morpho-4_1-4:1.20
	binutils-csl-sourcerygxx-3_4_4-17:1.20
	binutils-csl-wrs-linux-3_4_4-20:1.18
	binutils-2_17-branch:1.20.0.4
	binutils-2_17-branchpoint:1.20
	binutils-csl-2_17-branch:1.20.0.2
	binutils-csl-2_17-branchpoint:1.20
	binutils-csl-gxxpro-3_4-branch:1.18.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.18
	binutils-2_16_1:1.18
	binutils-csl-arm-2005q1b:1.18
	binutils-2_16:1.18
	binutils-csl-arm-2005q1a:1.18
	binutils-csl-arm-2005q1-branch:1.18.0.4
	binutils-csl-arm-2005q1-branchpoint:1.18
	binutils-2_16-branch:1.18.0.2
	binutils-2_16-branchpoint:1.18
	csl-arm-2004-q3d:1.17
	csl-arm-2004-q3:1.16
	binutils-2_15:1.16
	binutils-2_15-branchpoint:1.16
	csl-arm-2004-q1a:1.16
	csl-arm-2004-q1:1.16
	binutils-2_15-branch:1.16.0.6
	cagney_bfdfile-20040213-branch:1.16.0.4
	cagney_bfdfile-20040213-branchpoint:1.16
	cagney_bigcore-20040122-branch:1.16.0.2
	cagney_bigcore-20040122-branchpoint:1.16
	csl-arm-2003-q4:1.16
	binutils-2_14:1.14
	binutils-2_14-branch:1.14.0.2
	binutils-2_14-branchpoint:1.14
	binutils-2_13_2_1:1.11
	binutils-2_13_2:1.11
	binutils-2_13_1:1.11
	binutils-2_13:1.11
	binutils-2_13-branchpoint:1.11
	binutils-2_13-branch:1.11.0.2
	binutils-2_12_1:1.10.2.1
	binutils-2_12:1.10.2.1
	binutils-2_12-branch:1.10.0.2
	binutils-2_12-branchpoint:1.10
	cygnus_cvs_20020108_pre:1.10
	binutils-2_11_2:1.7.2.1
	binutils-2_11_1:1.7.2.1
	binutils-2_11:1.7
	x86_64versiong3:1.7
	binutils-2_11-branch:1.7.0.2
	binutils-2_10_1:1.4
	binutils-2_10:1.4
	binutils-2_10-branch:1.4.0.2
	binutils-2_10-branchpoint:1.4
	binutils_latest_snapshot:1.35
	repo-unification-2000-02-06:1.4
	binu_ss_19990721:1.3
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.35
date	2012.11.27.17.26.08;	author roland;	state Exp;
branches;
next	1.34;

1.34
date	2012.08.13.14.52.44;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2012.02.25.19.51.32;	author walt;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2012.02.14.01.00.50;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2011.11.25.14.47.48;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	2011.10.07.20.13.54;	author hjl;	state Exp;
branches;
next	1.29;

1.29
date	2011.10.05.14.13.31;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2011.10.04.14.25.40;	author carlos;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.08.10.35.07;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.05.00.42.29;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2009.09.02.07.22.32;	author amodra;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2008.07.26.01.15.42;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.10.01.32.23;	author csilvers;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.04.23.41.54;	author bwilson;	state Exp;
branches;
next	1.21;

1.21
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.18.03.51.19;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.08.14.17.40;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.03.11.46.14;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.04.15.04.41;	author hp;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.03.10.48.53;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.08.18.13.38;	author brolley;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.18.08.28.38;	author sveinse;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.28.10.38.46;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.15.23.41.18;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.10.10.17.58;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.19.12.38.20;	author aj;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.05.24.22.01.25;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.13.06.43.59;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.09.23.33.24;	author nickc;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.07.01.09.42.27;	author fche;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.19.01.22.39;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	99.09.04.17.38.46;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	99.06.29.01.31.18;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.06.09.03.01.25;	author schwab;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.10;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.33.2.1
date	2012.08.16.09.21.40;	author nickc;	state Exp;
branches;
next	1.33.2.2;

1.33.2.2
date	2012.11.29.23.29.13;	author roland;	state Exp;
branches;
next	;

1.25.2.1
date	2009.09.05.00.42.38;	author dj;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2009.09.08.10.48.48;	author amodra;	state Exp;
branches;
next	;

1.10.2.1
date	2002.02.10.10.16.54;	author nickc;	state Exp;
branches;
next	;

1.7.2.1
date	2001.06.07.03.12.29;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.10;	author rth;	state Exp;
branches;
next	;


desc
@@


1.35
log
@binutils/testsuite/
	* lib/binutils-common.exp (is_zlib_supported): New function.
	* lib/utils-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
	* binutils-all/compress.exp: Bail out if zlib is not available.
	* binutils-all/objdump.exp (objdump compressed debug):
	Mark unsupported if zlib is not available.
	* binutils-all/readelf.exp (readelf_compressed_wa_test): Likewise.

gas/testsuite/
	* lib/gas-defs.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.

ld/testsuite/
	* ld-elf/compress.exp: Bail out if zlib is not supported.
	* lib/ld-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
@
text
@#   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
#   2003, 2004, 2007, 2008, 2009, 2011, 2012
#   Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@prep.ai.mit.edu

# This file was written by Rob Savoye <rob@@cygnus.com>
# and rewritten by Ian Lance Taylor <ian@@cygnus.com>

if ![is_remote host] {
    if {[which $OBJDUMP] == 0} then {
	perror "$OBJDUMP does not exist"
	return
    }
}

send_user "Version [binutil_version $OBJDUMP]"

# Simple test of objdump -i

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -i"]

set cpus_expected [list]
lappend cpus_expected aarch64 alpha arc arm cris
lappend cpus_expected d10v d30v fr30 fr500 fr550 h8 hppa i386 i860 i960 ip2022
lappend cpus_expected m16c m32c m32r m68hc11 m68hc12 m68k m88k MCore MicroBlaze
lappend cpus_expected mips mn10200 mn10300 ms1 msp ns32k pj powerpc pyramid
lappend cpus_expected romp rs6000 s390 sh sparc
lappend cpus_expected tahoe tic54x tic80 tilegx tms320c30 tms320c4x tms320c54x
lappend cpus_expected v850 vax we32k x86-64 xscale xtensa z8k z8001 z8002

# Make sure the target CPU shows up in the list.
lappend cpus_expected ${target_cpu}

# Create regexp
set cpus_regex "([join $cpus_expected | ])"

verbose -log "CPU regex: $cpus_regex"

set want "BFD header file version.*srec\[^\n\]*\n\[^\n\]*header \[^\n\]*endian\[^\n\]*, data \[^\n\]*endian.*$cpus_regex"

if [regexp $want $got] then {
    pass "objdump -i"
} else {
    fail "objdump -i"
}

# The remaining tests require a test file.


if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {
    return
}
if [is_remote host] {
    set testfile [remote_download host tmpdir/bintest.o]
} else {
    set testfile tmpdir/bintest.o
}

# Test objdump -f

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -f $testfile"]

set want "$testfile:\[ 	\]*file format.*architecture:\[ 	\]*${cpus_regex}.*HAS_RELOC.*HAS_SYMS"

if ![regexp $want $got] then {
    fail "objdump -f"
} else {
    pass "objdump -f"
}

# Test objdump -h

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -h $testfile"]

set want "$testfile:\[ 	\]*file format.*Sections.*\[0-9\]+\[ 	\]+\[^ 	\]*(text|TEXT|\\\$CODE\\\$)\[^ 	\]*\[ 	\]*(\[0-9a-fA-F\]+).*\[0-9\]+\[ 	\]+\[^ 	\]*(\\.data|DATA)\[^ 	\]*\[ 	\]*(\[0-9a-fA-F\]+)"

if ![regexp $want $got all text_name text_size data_name data_size] then {
    fail "objdump -h"
} else {
    verbose "text name is $text_name size is $text_size"
    verbose "data name is $data_name size is $data_size"
    set ets 8
    set eds 4
    # The [ti]c4x target has the property sizeof(char)=sizeof(long)=1
    if [istarget *c4x*-*-*] then {
        set ets 2
        set eds 1
    }
    # c54x section sizes are in bytes, not octets; adjust accordingly
    if [istarget *c54x*-*-*] then {
	set ets 4
	set eds 2
    }
    if {[expr "0x$text_size"] < $ets || [expr "0x$data_size"] < $eds} then {
	send_log "sizes too small\n"
	fail "objdump -h"
    } else {
	pass "objdump -h"
    }
}

# Test objdump -t

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -t $testfile"]

if [info exists vars] then { unset vars }
while {[regexp "(\[a-z\]*_symbol)(.*)" $got all symbol rest]} {
    set vars($symbol) 1
    set got $rest
}

if {![info exists vars(text_symbol)] \
     || ![info exists vars(data_symbol)] \
     || ![info exists vars(common_symbol)] \
     || ![info exists vars(external_symbol)]} then {
    fail "objdump -t"
} else {
    pass "objdump -t"
}

# Test objdump -r

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -r $testfile"]

set want "$testfile:\[ 	\]*file format.*RELOCATION RECORDS FOR \\\[\[^\]\]*(text|TEXT|\\\$CODE\\\$)\[^\]\]*\\\].*external_symbol"

if [regexp $want $got] then {
    pass "objdump -r"
} else {
    fail "objdump -r"
}

# Test objdump -s

set got [binutils_run $OBJDUMP "$OBJDUMPFLAGS -s $testfile"]

set want "$testfile:\[ 	\]*file format.*Contents.*(text|TEXT|\\\$CODE\\\$)\[^0-9\]*\[ 	\]*\[0-9a-fA-F\]*\[ 	\]*(00000001|01000000|00000100).*Contents.*(data|DATA)\[^0-9\]*\[ 	\]*\[0-9a-fA-F\]*\[ 	\]*(00000002|02000000|00000200)"

if [regexp $want $got] then {
    pass "objdump -s"
} else {
    fail "objdump -s"
}

# Test objdump -s on a file that contains a compressed .debug section

if { ![is_elf_format] || ![is_zlib_supported] } then {
    unsupported "objdump compressed debug"
} elseif { ![binutils_assemble $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o] } then {
    fail "objdump compressed debug"
} else {
    if [is_remote host] {
	set compressed_testfile [remote_download host tmpdir/dw2-compressed.o]
    } else {
	set compressed_testfile tmpdir/dw2-compressed.o
    }

    set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -s -j .zdebug_abbrev $compressed_testfile" "" "/dev/null" "objdump.out"]

    if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
	fail "objdump -s -j .zdebug_abbrev (reason: unexpected output)"
	send_log $got
	send_log "\n"
    }

    if { [regexp_diff objdump.out $srcdir/$subdir/objdump.s] } then {
	fail "objdump -s -j .zdebug_abbrev"
    } else {
	pass "objdump -s -j .zdebug_abbrev"
    }

    # Test objdump -W on a file that contains some compressed .debug sections

    set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -W $compressed_testfile" "" "/dev/null" "objdump.out"]

    if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
	fail "objdump -W (reason: unexpected output)"
	send_log $got
	send_log "\n"
    }

    if { [regexp_diff objdump.out $srcdir/$subdir/objdump.W] } then {
	fail "objdump -W"
    } else {
	pass "objdump -W"
    }
}

# Test objdump -WL on a file that contains line information for multiple files and search directories.
# Not supported on mcore, moxie and openrisc targets because they do not (yet) support the generation
# of DWARF2 line debug information.

if { ![is_elf_format]
     || [istarget "hppa64*-*-hpux*"]
     || [istarget "i370-*-*"]
     || [istarget "i960-*-*"]
     || [istarget "ia64*-*-*"]
     || [istarget "mcore-*-*"]
     || [istarget "moxie-*-*"]
     || [istarget "openrisc-*-*"]
     || [istarget "or32-*-*"]
} then {
    unsupported "objump decode line"
} else {
    if { ![binutils_assemble $srcdir/$subdir/dw2-decodedline.S tmpdir/dw2-decodedline.o] } then {
	fail "objdump decoded line"
    }

    if [is_remote host] {
	set decodedline_testfile [remote_download host tmpdir/dw2-decodedline.o]
    } else {
	set decodedline_testfile tmpdir/dw2-decodedline.o
    }

    set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -WL $decodedline_testfile" "" "/dev/null" "objdump.out"]

    if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
	fail "objdump -WL (reason: unexpected output)"
	send_log $got
	send_log "\n"
    }

    if { [regexp_diff objdump.out $srcdir/$subdir/objdump.WL] } then {
	fail "objdump -WL"
    } else {
	pass "objdump -WL"
    }
}

# Options which are not tested: -a -d -D -R -T -x -l --stabs
# I don't see any generic way to test any of these other than -a.
# Tests could be written for specific targets, and that should be done
# if specific problems are found.
@


1.34
log
@Add support for 64-bit ARM architecture: AArch64
@
text
@d2 1
a2 1
#   2003, 2004, 2007, 2008, 2009, 2011
d9 1
a9 1
# 
d14 1
a14 1
# 
d163 1
a163 1
if { ![is_elf_format] } then {
@


1.33
log
@Add big-endian support for tilegx.

bfd/
	* config.bfd (tilegx-*-*): rename little endian vector; add big
	endian vector.
	(tilegxbe-*-*): New case.
	* configure.in (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): New vector.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): New vector.
	* configure: Regenerate.
	* elf32-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* elf64-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* targets.c (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): Declare.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): Declare.
	(_bfd_target_vector): Add / rename above vectors.

binutils/testsuite/
	* binutils-all/objdump.exp (cpus_expected): Add tilegx.

gas/
	* tc-tilegx.c (tilegx_target_format): Handle big endian.
	(OPTION_EB): Define.
	(OPTION_EL): Define.
	(md_longopts): Add entries for "EB" and "EL".
	(md_parse_option): Handle OPTION_EB and OPTION_EL.
	(md_show_usage): Add -EB and -EL.
	(md_number_to_chars): New.
	* tc-tilegx.h (TARGET_BYTES_BIG_ENDIAN): Guard definition with
	ifndef.
	(md_number_to_chars): Delete.
	* configure.tgt (tilegx*be): Handle.
	* doc/as.texinfo [TILE-Gx]: Document -EB and -EL.
	* doc/c-tilegx.texi: Ditto.

ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx_be.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx_be.c.
	(eelf32tilegx_be.c): Add rule to build this file.
	(eelf64tilegx_be.c): Ditto.
	* Makefile.in: Regenerate.
	* configure.tgt (tilegx-*-*): Support big endian.
	(tilegxbe-*-*): New.
	* emulparams/elf32tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf32tilegx_be.sh: New.
	* emulparams/elf64tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf64tilegx_be.sh: New.

ld/testsuite/
	* ld-tilegx/reloc-be.d: New.
	* ld-tilegx/reloc-le.d: New.
	* ld-tilegx/reloc.d: Delete.
	* ld-tilegx/tilegx.exp: Test big and little endian.
@
text
@d39 1
a39 1
lappend cpus_expected alpha arc arm cris
@


1.33.2.1
log
@Add support for 64-bit ARM architecture: aarch64
@
text
@d39 1
a39 1
lappend cpus_expected aarch64 alpha arc arm cris
@


1.33.2.2
log
@binutils/testsuite/
	* lib/binutils-common.exp (is_zlib_supported): New function.
	* lib/utils-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
	* binutils-all/compress.exp: Bail out if zlib is not available.
	* binutils-all/objdump.exp (objdump compressed debug):
	Mark unsupported if zlib is not available.
	* binutils-all/readelf.exp (readelf_compressed_wa_test): Likewise.

gas/testsuite/
	* lib/gas-defs.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.

ld/testsuite/
	* ld-elf/compress.exp: Bail out if zlib is not supported.
	* lib/ld-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
@
text
@d2 1
a2 1
#   2003, 2004, 2007, 2008, 2009, 2011, 2012
d9 1
a9 1
#
d14 1
a14 1
#
d163 1
a163 1
if { ![is_elf_format] || ![is_zlib_supported] } then {
@


1.32
log
@	* binutils-all/dw2-decodedline.S: Always have whitespace before
	directives.
	* binutils-all/version.s: Likewise.
	* binutils-all/objdump.exp (dw2-decodedline): Don't run for
	hppa64*-*-hpux*, i370-*-*, i960-*-*.
@
text
@d44 2
a45 2
lappend cpus_expected tahoe tic54x tic80 tms320c30 tms320c4x tms320c54x v850
lappend cpus_expected vax we32k x86-64 xscale xtensa z8k z8001 z8002
@


1.31
log
@	* binutils-all/objdump.exp (cpus): Add MicroBlaze.
	(objdump -WL): Skip this test on MCore, Moxie and OpenRisc
	targets.

	* binutils-all/objcopy.exp (localize-hidden-1): Expect this test
	to fail on MIPS based targets.
@
text
@d210 3
@


1.30
log
@Don't run dw2-decodedline.S on ia64.

2011-10-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/objdump.exp: Don't run dw2-decodedline.S on ia64.
@
text
@d41 1
a41 1
lappend cpus_expected m16c m32c m32r m68hc11 m68hc12 m68k m88k MCore
d206 2
d209 7
a215 1
if { ![is_elf_format] || [istarget "ia64*-*-*"]} then {
@


1.29
log
@
	* readelf.c (get_machine_dlags): Add support for RX's PID mode.

	* ld-scripts/phdrs.exp: Expect to fail for the RX.

	* elf32-rx.c: Add support for PID mode.
	(rx_elf_relocate_section): Add checks for unsafe PID relocations.
	Include addend in R_RX_SYM relocations.

	* config/rx-defs.h (rx_pid_register): New.
	(rx_gp_register): New.
	* config/rx-parse.y (rx_lex): Add support for %gpreg and %pidreg.
	(displacement): Add PID support.
	* config/tc-rx.c (rx_pid_mode): New.
	(rx_num_int_regs): New.
	(rx_pid_register): New.
	(rx_gp_register): New.
	(options): Add -mpid and -mint-register= options.
	(md_longopts): Likewise.
	(md_parse_option): Likewise.
	(md_show_usage): Likewise.
	(rx_pid_symbol): New.
	(rx_pidreg_symbol): New.
	(rx_gpreg_symbol): New.
	(md_begin): Support PID.
	(rx_validate_fix_sub): Support PID.
	(tc_gen_reloc): Support PID.
	* doc/c-rx.texi: Document PID support.

	* rx.h (E_FLAG_RX_PID): New.
@
text
@d207 1
a207 1
if { ![is_elf_format] } then {
@


1.28
log
@binutils/

2011-10-04  Paul Woegerer  <paul_woegerer@@mentor.com>
	    Carlos O'Donell  <carlos@@codesourcery.com>

	* dwarf.c (display_debug_lines_decoded): Index directory_table with
	directory_index from file_table entry.

binutils/testsuite/

2011-10-04  Carlos O'Donell  <carlos@@codesourcery.com>

	* binutils-all/dw2-decodedline.S: New file.
	* binutils-all/objdump.WL: New file.
	* binutils-all/objdump.exp: Update copyright year.
	New test case for -WL.
@
text
@d207 6
a212 3
if { ![binutils_assemble $srcdir/$subdir/dw2-decodedline.S tmpdir/dw2-decodedline.o] } then {
    fail "objdump decoded line"
}
d214 5
a218 5
if [is_remote host] {
    set decodedline_testfile [remote_download host tmpdir/dw2-decodedline.o]
} else {
    set decodedline_testfile tmpdir/dw2-decodedline.o
}
d220 1
a220 1
set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -WL $decodedline_testfile" "" "/dev/null" "objdump.out"]
d222 5
a226 5
if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
    fail "objdump -WL (reason: unexpected output)"
    send_log $got
    send_log "\n"
}
d228 5
a232 4
if { [regexp_diff objdump.out $srcdir/$subdir/objdump.WL] } then {
    fail "objdump -WL"
} else {
    pass "objdump -WL"
@


1.27
log
@	* binutils-all/objdump.exp (cpus_expected): Add ms1.
@
text
@d2 1
a2 1
#   2003, 2004, 2007, 2008, 2009
d205 25
@


1.26
log
@* binutils-all/objdump.exp: Add m16c and m32c to the list of
expected cpus.
@
text
@d42 1
a42 1
lappend cpus_expected mips mn10200 mn10300 msp ns32k pj powerpc pyramid
@


1.25
log
@update copyright dates
@
text
@d41 1
a41 1
lappend cpus_expected m32r m68hc11 m68hc12 m68k m88k MCore
@


1.25.2.1
log
@* binutils-all/objdump.exp: Add m16c and m32c to the list of
expected cpus.
@
text
@d41 1
a41 1
lappend cpus_expected m16c m32c m32r m68hc11 m68hc12 m68k m88k MCore
@


1.25.2.2
log
@	* binutils-all/objdump.exp (cpus_expected): Add ms1.

	2009-09-07  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	* binutils-all/testranges.s (.debug_info): Pad the only CU.
	* binutils-all/testranges.s: Replace all .long by .4byte.
@
text
@d42 1
a42 1
lappend cpus_expected mips mn10200 mn10300 ms1 msp ns32k pj powerpc pyramid
@


1.24
log
@	* binutils-all/objdump.exp: Run compressed debug test only for ELF.
@
text
@d2 1
a2 1
#   2003, 2004, 2007, 2008
@


1.23
log
@bfd/
	* Makefile.am (BFD32_LIBS): Add compress.lo.
	(BFD32_LIBS_CFILES): Add compress.c.
	(BFD_H_FILES): Likewise.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf2.c (read_section): New function.
	(read_indirect_string): Call new function read_section.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Call new function read_section when just one
	.zdebug_info section is found, otherwise read and compress
	multiple sections.
	(_bfd_dwarf2_cleanup_debug_info): Free sec_info_ptr.
	* elf.c (_bfd_elf_make_section_from_shdr): Add zdebug prefix.
	(special_sections_z): New struct.
	(special_sections): Refer to special_sections_z.
	* elfxx-mips.c (_bfd_mips_elf_section_from_shdr): Recognize
	sections named .zdebug_*.
	(_bfd_mips_elf_fake_sections): Likewise.
	* compress.c: New file.
	(bfd_uncompress_section_contents): New function.
bfd/doc/
	* Makefile.am (BFD_H_DEP): Add ../compress.c.
	* Makefile.in: Regenerate.
binutils/
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf.c (debug_displays): Add .zdebug_* strings.
	* dwarf.h (struct dwarf_section): Add fields uncompressed_namd
	and compressed_name.
	* objdump.c (load_debug_section): Call
	bfd_uncompress_section_contents when loading a compressed
	section.
	(dump_dwarf_section): Recognize compressed section name.
	(mach_o_dwarf_sections): Rename as
	mach_o_uncompressed_dwarf_sections.
	(mach_o_compressed_dwarf_sections): New variable.
	(generic_dwarf_section): Rename as
	generic_uncompressed_dwarf_sections.
	(generic_compressed_dwarf_sections): New variable.
	(check_mach_o_dwarf): Save and restore
	mach_o_compressed_dwarf_sections.
	* readelf.c: Add #include for config.h and zlib.h
	(process_section_headers): Recognize compressed section name.
	(uncompress_section_contents): New function.
	(load_debug_section): Call uncompress_section_contents when
	loading a compressed section.
	(display_debug_section): Recognize compressed section name.
binutils/testsuite:
	* binutils-all/objdump.exp: Add test for objdump -s on a file
	with a compressed debug section.  Add test for objdump -W on a
	file that contains a compressed debug section.
	* binutils-all/readelf.exp: Call readelf_compressed_wa_test.
	(readelf_compressed_wa_test): New function.
	* binutils-all/dw2-compressed.S: New file.
	* binutils-all/objdump.W: New file.
	* binutils-all/objdump.s: New file.
	* binutils-all/readelf.wa: New file.
@
text
@d2 1
a2 1
#   2003, 2004, 2007
d163 4
a166 5
if {![binutils_assemble $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o]} then {
    return
}
if [is_remote host] {
    set compressed_testfile [remote_download host tmpdir/dw2-compressed.o]
d168 5
a172 2
    set compressed_testfile tmpdir/dw2-compressed.o
}
d174 1
a174 1
set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -s -j .zdebug_abbrev $compressed_testfile" "" "/dev/null" "objdump.out"]
d176 5
a180 5
if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
    fail "objdump -s -j .zdebug_abbrev (reason: unexpected output)"
    send_log $got
    send_log "\n"
}
d182 5
a186 5
if { [regexp_diff objdump.out $srcdir/$subdir/objdump.s] } then {
    fail "objdump -s -j .zdebug_abbrev"
} else {
    pass "objdump -s -j .zdebug_abbrev"
}
d188 1
a188 1
# Test objdump -W on a file that contains some compressed .debug sections
d190 1
a190 1
set got [remote_exec host "$OBJDUMP $OBJDUMPFLAGS -W $compressed_testfile" "" "/dev/null" "objdump.out"]
d192 5
a196 5
if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
    fail "objdump -W (reason: unexpected output)"
    send_log $got
    send_log "\n"
}
d198 5
a202 4
if { [regexp_diff objdump.out $srcdir/$subdir/objdump.W] } then {
    fail "objdump -W"
} else {
    pass "objdump -W"
a205 1

@


1.22
log
@binutils/testsuite/
    * binutils-all/objdump.exp (cpus_expected): Add xtensa.
ld/testsuite/
    * ld-undefined/undefined.exp: XFAIL for xtensa*-*-linux*.
@
text
@d161 43
@


1.21
log
@Change sources over to using GPLv3
@
text
@d45 1
a45 1
lappend cpus_expected vax we32k x86-64 xscale z8k z8001 z8002
@


1.20
log
@Remove a29k support.
@
text
@d2 1
a2 1
#   2003, 2004
d7 1
a7 1
# the Free Software Foundation; either version 2 of the License, or
@


1.19
log
@Update FSF address
@
text
@d39 1
a39 1
lappend cpus_expected a29k alliant alpha arc arm convex cris
@


1.18
log
@update copyright dates
@
text
@d17 1
a17 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.17
log
@	* binutils-all/objdump.exp (cpus_expected): Append cris.
@
text
@d1 2
a2 1
#   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
@


1.16
log
@Add "msp" to list of expected architectures.
@
text
@d38 1
a38 1
lappend cpus_expected a29k alliant alpha arc arm convex 
@


1.15
log
@2003-10-06  Dave Brolley  <brolley@@redhat.com>

        * binutils-all/objdump.exp (cpu_expected): Add fr550.
@
text
@d41 1
a41 1
lappend cpus_expected mips mn10200 mn10300 ns32k pj powerpc pyramid
@


1.14
log
@
TIC4X testcase commit

	* binutils/testsuite/binutils-all/objcopy.exp: Disable tic4x
	from test
	* binutils/testsuite/binutils-all/objdump.exp: Setup proper
	values for tic4x testcase
	* gas/testsuite/gas/all/gas.exp: Setup for tic4x testcase
	* gas/testsuite/gas/macros/macros.exp: Ditto
	* gas/testsuite/gas/all/gas.exp: Setup for tic4x testcase
	* gas/testsuite/gas/macros/macros.exp: Ditto
	* gas/testsuite/gas/tic4x: New tic4x gas testsuite directory
	* ld/testsuite/ld-scripts/script.exp: Setup for tic4x testcase
@
text
@d39 1
a39 1
lappend cpus_expected d10v d30v fr30 fr500 h8 hppa i386 i860 i960 ip2022
@


1.13
log
@Add TMS320C4x support
@
text
@d99 5
@


1.12
log
@	* binutils-all/objdump.exp (cpus_expected): Add fr500, ip2022,
	tic80, tms320c30.
	* binutils-all/objcopy.exp (simple copy): Revise xfails.
@
text
@d43 1
a43 1
lappend cpus_expected tahoe tic54x tic80 tms320c30 tms320c54x v850
@


1.11
log
@Add 'xscale' as an expected cpu type.
@
text
@d39 1
a39 1
lappend cpus_expected d10v d30v fr30 h8 hppa i386 i860 i960
d42 2
a43 1
lappend cpus_expected romp rs6000 s390 sh sparc tahoe tic54x tms320c54x v850
@


1.10
log
@
	* testsuite/binutils-all/objdump.exp: Add x86-64.
@
text
@d43 1
a43 1
lappend cpus_expected vax we32k x86-64 z8k z8001 z8002
@


1.10.2.1
log
@Add 'xscale' as an expected cpu type.
@
text
@d43 1
a43 1
lappend cpus_expected vax we32k x86-64 xscale z8k z8001 z8002
@


1.9
log
@2001-05-24  H.J. Lu  <hjl@@gnu.org>

	* binutils-all/objdump.exp (cpus_expected): Add s390.
@
text
@d43 1
a43 1
lappend cpus_expected vax we32k z8k z8001 z8002
@


1.8
log
@Fix typos in ChangeLogs and update copyright notices
@
text
@d42 1
a42 1
lappend cpus_expected romp rs6000 sh sparc tahoe tic54x tms320c54x v850
@


1.7
log
@Add tic54x and tms320c54x to expected cpus list.
@
text
@d1 2
a2 1
#   Copyright (C) 1993, 1994, 1995, 1996, 2000 Free Software Foundation, Inc.
@


1.7.2.1
log
@Update copyright notices.
@
text
@d1 1
a1 2
#   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
#   Free Software Foundation, Inc.
@


1.6
log
@* test cleanup

2000-07-01  Frank Ch. Eigler  <fche@@redhat.com>

	* binutils-all/objdump.exp (cpus_expected, cpus_regex): Reorganize
	syntax to display more tcl nature.
@
text
@d41 1
a41 1
lappend cpus_expected romp rs6000 sh sparc tahoe v850
@


1.5
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d1 1
a1 1
#   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.
d36 7
a42 1
set cpus_expected "(a29k|alliant|alpha|arc|arm|convex|d10v|d30v|fr30|h8|hppa|i386|i860|i960|m32r|m68hc11|m68hc12|m68k|m88k|MCore|mips|mn10200|mn10300|ns32k|pj|powerpc|pyramid|romp|rs6000|sh|sparc|tahoe|v850|vax|we32k|z8k|z8001|z8002)"
d45 6
a50 3
if ![regexp $cpus_expected $target_cpu] {
    regsub "^\[(\]" "$cpus_expected" "(${target_cpu}|" cpus_expected;
}
d52 1
a52 1
set want "BFD header file version.*srec\[^\n\]*\n\[^\n\]*header \[^\n\]*endian\[^\n\]*, data \[^\n\]*endian.*$cpus_expected"
d76 1
a76 1
set want "$testfile:\[ 	\]*file format.*architecture:\[ 	\]*${cpus_expected}.*HAS_RELOC.*HAS_SYMS"
@


1.4
log
@1999-09-02  Steve Chamberlain  <sac@@pobox.com>

	* binutils-all/objdump.exp: Add pj to cpus_expected.
@
text
@d36 1
a36 1
set cpus_expected "(a29k|alliant|alpha|arc|arm|convex|d10v|d30v|fr30|h8|hppa|i386|i860|i960|m32r|m68k|m88k|MCore|mips|mn10200|mn10300|ns32k|pj|powerpc|pyramid|romp|rs6000|sh|sparc|tahoe|v850|vax|we32k|z8k|z8001|z8002)"
d86 8
a93 1
    if {[expr "0x$text_size"] < 8 || [expr "0x$data_size"] < 4} then {
d136 1
a136 1
set want "$testfile:\[ 	\]*file format.*Contents.*(text|TEXT|\\\$CODE\\\$)\[^0-9\]*\[ 	\]*\[0-9a-fA-F\]*\[ 	\]*(00000001|01000000).*Contents.*(data|DATA)\[^0-9\]*\[ 	\]*\[0-9a-fA-F\]*\[ 	\]*(00000002|02000000)"
@


1.3
log
@Add fr30 and mcore to expected cpus list.
Fix readelf -r test to not assume a fixed number of spaces in the output.
@
text
@d36 1
a36 1
set cpus_expected "(a29k|alliant|alpha|arc|arm|convex|d10v|d30v|fr30|h8|hppa|i386|i860|i960|m32r|m68k|m88k|MCore|mips|mn10200|mn10300|ns32k|powerpc|pyramid|romp|rs6000|sh|sparc|tahoe|v850|vax|we32k|z8k|z8001|z8002)"
@


1.2
log
@	* binutils-all/objdump.exp: Tighten regexp to match `objdump -i'
	output to avoid massive exponential behaviour.
@
text
@d36 1
a36 1
set cpus_expected "(a29k|alliant|alpha|arc|arm|convex|d10v|d30v|h8|hppa|i386|i860|i960|m32r|m68k|m88k|mips|mn10200|mn10300|ns32k|powerpc|pyramid|romp|rs6000|sh|sparc|tahoe|v850|vax|we32k|z8k|z8001|z8002)"
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
set want "BFD header file version.*srec.*header .* endian.*, data .* endian.*$cpus_expected"
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

