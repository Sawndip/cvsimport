head	1.34;
access;
symbols
	binutils-2_24-branch:1.34.0.2
	binutils-2_24-branchpoint:1.34
	binutils-2_21_1:1.30
	binutils-2_23_2:1.32.2.1
	binutils-2_23_1:1.32
	binutils-2_23:1.32
	binutils-2_23-branch:1.32.0.2
	binutils-2_23-branchpoint:1.32
	binutils-2_22_branch:1.31.0.4
	binutils-2_22:1.31
	binutils-2_22-branch:1.31.0.2
	binutils-2_22-branchpoint:1.31
	binutils-2_21:1.30
	binutils-2_21-branch:1.30.0.4
	binutils-2_21-branchpoint:1.30
	binutils-2_20_1:1.30
	binutils-2_20:1.30
	binutils-arc-20081103-branch:1.29.0.8
	binutils-arc-20081103-branchpoint:1.29
	binutils-2_20-branch:1.30.0.2
	binutils-2_20-branchpoint:1.30
	dje-cgen-play1-branch:1.29.0.6
	dje-cgen-play1-branchpoint:1.29
	arc-20081103-branch:1.29.0.4
	arc-20081103-branchpoint:1.29
	binutils-2_19_1:1.29
	binutils-2_19:1.29
	binutils-2_19-branch:1.29.0.2
	binutils-2_19-branchpoint:1.29
	binutils-2_18:1.26
	binutils-2_18-branch:1.26.0.2
	binutils-2_18-branchpoint:1.26
	binutils-csl-coldfire-4_1-32:1.22
	binutils-csl-sourcerygxx-4_1-32:1.22
	binutils-csl-innovasic-fido-3_4_4-33:1.22
	binutils-csl-sourcerygxx-3_4_4-32:1.21
	binutils-csl-coldfire-4_1-30:1.22
	binutils-csl-sourcerygxx-4_1-30:1.22
	binutils-csl-coldfire-4_1-28:1.22
	binutils-csl-sourcerygxx-4_1-29:1.22
	binutils-csl-sourcerygxx-4_1-28:1.22
	binutils-csl-arm-2006q3-27:1.22
	binutils-csl-sourcerygxx-4_1-27:1.22
	binutils-csl-arm-2006q3-26:1.22
	binutils-csl-sourcerygxx-4_1-26:1.22
	binutils-csl-sourcerygxx-4_1-25:1.22
	binutils-csl-sourcerygxx-4_1-24:1.22
	binutils-csl-sourcerygxx-4_1-23:1.22
	binutils-csl-sourcerygxx-4_1-21:1.22
	binutils-csl-arm-2006q3-21:1.22
	binutils-csl-sourcerygxx-4_1-22:1.22
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.22
	binutils-csl-sourcerygxx-4_1-20:1.22
	binutils-csl-arm-2006q3-19:1.22
	binutils-csl-sourcerygxx-4_1-19:1.22
	binutils-csl-sourcerygxx-4_1-18:1.22
	binutils-csl-renesas-4_1-9:1.22
	binutils-csl-sourcerygxx-3_4_4-25:1.21
	binutils-csl-renesas-4_1-8:1.22
	binutils-csl-renesas-4_1-7:1.22
	binutils-csl-renesas-4_1-6:1.22
	binutils-csl-sourcerygxx-4_1-17:1.22
	binutils-csl-sourcerygxx-4_1-14:1.22
	binutils-csl-sourcerygxx-4_1-15:1.22
	binutils-csl-sourcerygxx-4_1-13:1.22
	binutils-2_17:1.22
	binutils-csl-sourcerygxx-4_1-12:1.22
	binutils-csl-sourcerygxx-3_4_4-21:1.22
	binutils-csl-wrs-linux-3_4_4-24:1.21
	binutils-csl-wrs-linux-3_4_4-23:1.21
	binutils-csl-sourcerygxx-4_1-9:1.22
	binutils-csl-sourcerygxx-4_1-8:1.22
	binutils-csl-sourcerygxx-4_1-7:1.22
	binutils-csl-arm-2006q1-6:1.22
	binutils-csl-sourcerygxx-4_1-6:1.22
	binutils-csl-wrs-linux-3_4_4-22:1.21
	binutils-csl-coldfire-4_1-11:1.22
	binutils-csl-sourcerygxx-3_4_4-19:1.22
	binutils-csl-coldfire-4_1-10:1.22
	binutils-csl-sourcerygxx-4_1-5:1.22
	binutils-csl-sourcerygxx-4_1-4:1.22
	binutils-csl-wrs-linux-3_4_4-21:1.21
	binutils-csl-morpho-4_1-4:1.22
	binutils-csl-sourcerygxx-3_4_4-17:1.22
	binutils-csl-wrs-linux-3_4_4-20:1.21
	binutils-2_17-branch:1.22.0.4
	binutils-2_17-branchpoint:1.22
	binutils-csl-2_17-branch:1.22.0.2
	binutils-csl-2_17-branchpoint:1.22
	binutils-csl-gxxpro-3_4-branch:1.21.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.21
	binutils-2_16_1:1.21
	binutils-csl-arm-2005q1b:1.21
	binutils-2_16:1.21
	binutils-csl-arm-2005q1a:1.21
	binutils-csl-arm-2005q1-branch:1.21.0.4
	binutils-csl-arm-2005q1-branchpoint:1.21
	binutils-2_16-branch:1.21.0.2
	binutils-2_16-branchpoint:1.21
	csl-arm-2004-q3d:1.20
	csl-arm-2004-q3:1.20
	binutils-2_15:1.19
	binutils-2_15-branchpoint:1.19
	csl-arm-2004-q1a:1.19
	csl-arm-2004-q1:1.19
	binutils-2_15-branch:1.19.0.6
	cagney_bfdfile-20040213-branch:1.19.0.4
	cagney_bfdfile-20040213-branchpoint:1.19
	cagney_bigcore-20040122-branch:1.19.0.2
	cagney_bigcore-20040122-branchpoint:1.19
	csl-arm-2003-q4:1.19
	binutils-2_14:1.18
	binutils-2_14-branch:1.18.0.2
	binutils-2_14-branchpoint:1.18
	binutils-2_13_2_1:1.15
	binutils-2_13_2:1.15
	binutils-2_13_1:1.15
	binutils-2_13:1.15
	binutils-2_13-branchpoint:1.15
	binutils-2_13-branch:1.15.0.4
	binutils-2_12_1:1.15
	binutils-2_12:1.15
	binutils-2_12-branch:1.15.0.2
	binutils-2_12-branchpoint:1.15
	cygnus_cvs_20020108_pre:1.15
	binutils-2_11_2:1.6.2.2
	binutils-2_11_1:1.6.2.2
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.34
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.34
date	2013.05.02.21.06.13;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2012.11.27.17.26.08;	author roland;	state Exp;
branches;
next	1.32;

1.32
date	2012.02.01.15.44.30;	author nickc;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2010.12.31.11.00.59;	author rsandifo;	state Exp;
branches;
next	1.30;

1.30
date	2009.09.02.07.22.32;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2008.07.10.01.32.23;	author csilvers;	state Exp;
branches;
next	1.28;

1.28
date	2007.08.30.13.47.35;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.28.13.21.53;	author jsm28;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.21.19.01.20;	author rearnsha;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.14.10.05.59;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2006.08.15.18.23.10;	author ths;	state Exp;
branches;
next	1.22;

1.22
date	2005.05.08.14.17.40;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.03.11.46.14;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.12.03.28.45;	author bje;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.30.00.15.54;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.26.07.57.26;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.26.07.53.20;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.23.17.36.08;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.15.01.11.09;	author geoffk;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.03.13.51.09;	author ths;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.05.02.26.04;	author law;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.25.00.48.49;	author ths;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.21.07.44.32;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.25.18.58.10;	author hjl;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.07.21.00;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.31.06.37.39;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.13.06.43.59;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.03.01.59.12;	author nickc;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.10.25.23.23.39;	author hp;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.19.18.04.56;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.01.21.35;	author hp;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.02.12.47.19;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.32.2.1
date	2012.11.29.23.29.13;	author roland;	state Exp;
branches;
next	;

1.6.2.1
date	2001.06.07.03.12.29;	author amodra;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.06.11.10.04.32;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches;
next	;


desc
@@


1.34
log
@	* archures.c: Add some more MSP430 machine numbers.
	* config.bfd (msp430): Define targ_selvecs.
	* configure.in: Add bfd_elf32_msp430_ti_vec.
	* cpu-msp430.c: Add some more MSP430 machine numbers.
	* elf32-msp430.c Add support for MSP430X relocations.
	Add support for TI compiler generated relocations.
	Add support for sym_diff relocations.
	Add support for relaxing out of range short branches into long
	branches.
	Add support for MSP430 attribute section.
	* reloc.c: Add MSP430X relocations.
	* targets.c: Add bfd_elf32_msp430_ti_vec.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.

	* readelf.c: Add support for MSP430X architecture.

	* readelf.exp: Expect -wi test to fail for the MSP430.

	* config/tc-msp430.c: Add support for the MSP430X architecture.
	Add code to insert a NOP instruction after any instruction that
	might change the interrupt state.
	Add support for the LARGE memory model.
	Add code to initialise the .MSP430.attributes section.
	* config/tc-msp430.h: Add support for the MSP430X architecture.
	* doc/c-msp430.texi: Document the new -mL and -mN command line
	options.
	* NEWS: Mention support for the MSP430X architecture.

	* gas/all/gas.exp: Skip the DIFF1 test for the MSP430.
	Expect the FORWARD test to pass for the MSP430.
	Skip the REDEF tests for the MSP430.
	Expect the 930509A test to fail for the MSP430.
	* gas/all/sleb128-4.d: Skip for the MSP430.
	* gas/elf/elf.exp: Set target_machine to msp430 for the MSP430.
	Skip the EHOPT0 test for the MSP430.
	Skip the REDEF and EQU-RELOC tests for the MSP430.
	* gas/elf/section2.e-msp430: New file.
	* gas/lns/lns-big-delta.d: Remove expectation of 20-bit
	addresses.
	* gas/lns/lns.exp: Use alternate LNS COMMON test for the MSP430.
	* gas/msp430/msp430x.s: New test.
	* gas/msp430/msp430x.d: Expected disassembly.
	* gas/msp430/msp430.exp: Run new test.
	* gas/msp430/opcode.d: Update expected disassembly.

	* msp430.h: Add MSP430X relocs.
	Add some more MSP430 machine numbers.
	Add values used by .MSP430.attributes section.

	* msp430.h: Add patterns for MSP430X instructions.

	* Makefile.am: Add emsp430X.c
	* Makefine.in: Regenerate.
	* configure.tgt (msp430): Add msp430X emulation.
	* ldmain.c (multiple_definition): Only disable relaxation if it
	was enabled by the user.
	* ldmain.h (RELAXATION_ENABLED_BY_USER): New macro.
	* emulparams/msp430all.sh: Add support for MSP430X.
	* emultempl/generic.em: (before_parse): Enable relaxation for the
	MSP430.
	* scripttempl/msp430.sc: Reorganize sections.  Add .rodata
	section.
	* scripttempl/msp430_3.sc: Likewise.
	* NEWS: Mention support for MSP430X.

	* ld-elf/flags1.d: Expect this test to pass on the MSP430.
	* ld-elf/init-fini-arrays.d: Expect this test to fail on the
	MSP430.
	* ld-elf/merge.d: Expect this test to pass on the MSP430.
	* ld-elf/sec64k.exp: Skip these tests for the MSP430.
	* ld-gc/pr13683.d: Expect this test to fail on the MSP430.
	* ld-srec/srec.exp: Expect these tests to fail on the MSP430.
	* ld-undefined/undefined.exp: Expect the UNDEFINED LINE test to
	fail on the MSP430.

	* msp430-dis.c: Add support for MSP430X instructions.
@
text
@#   Copyright 1999-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@prep.ai.mit.edu

# Written by Nick Clifton <nickc@@cygnus.com>
# Based on scripts written by Ian Lance Taylor <ian@@cygnus.com>
# and Ken Raeburn <raeburn@@cygnus.com>.

# Exclude non-ELF targets.
if ![is_elf_format] {
    verbose "$READELF is only intended for ELF targets" 2
    return
}

# First some helpful procedures, then the tests themselves

# Return the contents of the filename given
proc file_contents { filename } {
    set file [open $filename r]
    set contents [read $file]
    close $file
    return $contents
}

# Find out the size by reading the output of the EI_CLASS field.
# Similar to the test for readelf -h, but we're just looking for the
# EI_CLASS line here.
proc readelf_find_size { binary_file } {
    global READELF
    global READELFFLAGS
    global readelf_size

    set readelf_size ""
    set testname "finding out ELF size with readelf -h"
    set got [remote_exec host "$READELF $READELFFLAGS -h $binary_file" "" "/dev/null" "readelf.out"]
    if [is_remote host] then {
        remote_upload host "readelf.out"
    }

    if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]]} then {
	send_log $got
	fail $testname
	return
    }

    if { ! [regexp "\n\[ \]*Class:\[ \]*ELF(\[0-9\]+)\n" \
	    [file_contents readelf.out] nil readelf_size] } {
	verbose -log "EI_CLASS field not found in output"
	verbose -log "output is \n[file_contents readelf.out]"
	fail $testname
	return
    } else {
	verbose -log "ELF size is $readelf_size"
    }

    pass $testname
}

# Run an individual readelf test.
# Basically readelf is run on the binary_file with the given options.
# Readelf's output is captured and then compared against the contents
# of the regexp_file-readelf_size if it exists, else regexp_file.

proc readelf_test { options binary_file regexp_file xfails } {

    global READELF
    global READELFFLAGS
    global readelf_size
    global srcdir
    global subdir

    send_log "exec $READELF $READELFFLAGS $options $binary_file > readelf.out\n"
    set got [remote_exec host "$READELF $READELFFLAGS $options $binary_file" "" "/dev/null" "readelf.out"]

    foreach xfail $xfails {
	setup_xfail $xfail
    }

    if { [lindex $got 0] != 0 || ![string match "" [lindex $got 1]] } then {
	fail "readelf $options (reason: unexpected output)"
	send_log $got
	send_log "\n"
	return
    }

    set target_machine ""
    if [istarget "mips*-*-*"] then {
	if { [istarget "mips*-*-*linux*"]
	     || [istarget "mips*-sde-elf*"]
	     || [istarget "mips*-*freebsd*"] } then {
	    set target_machine tmips
	} else {
	    set target_machine mips
	}
    }

    if { $target_machine != "" && [file exists $srcdir/$subdir/$regexp_file-$readelf_size-$target_machine] } then {
	set regexp_file $regexp_file-$readelf_size-$target_machine
    } elseif { $target_machine != "" && [file exists $srcdir/$subdir/$regexp_file-$target_machine] } then {
	set regexp_file $regexp_file-$target_machine
    } elseif { [file exists $srcdir/$subdir/$regexp_file-$readelf_size] } then {
	set regexp_file $regexp_file-$readelf_size
    }

    if { [regexp_diff readelf.out $srcdir/$subdir/$regexp_file] } then {
	fail "readelf $options"
	verbose "output is \n[file_contents readelf.out]" 2
	return
    }

    pass "readelf $options"
}

# Simple proc to skip certain expected warning messages.

proc prune_readelf_wi_warnings { text } {
    regsub -all "(^|\n)(.*Skipping unexpected symbol type.*)" $text "\\1" text
    return $text
}

# Testing the "readelf -wi" option is difficult because there
# is no guaranteed order to the output, and because some ports
# will use indirect string references, whilst others will use
# direct references.  So instead of having an expected output
# file, like the other readelf tests, we grep for strings that
# really ought to be there.

proc readelf_wi_test {} {
    global READELF
    global READELFFLAGS
    global srcdir
    global subdir

    # Compile the second test file.
    if { [target_compile $srcdir/$subdir/testprog.c tmpdir/testprog.o object debug] != "" } {
	verbose "Unable to compile test file."
	untested "readelf -wi"
	return
    }

    # Download it.
    set tempfile [remote_download host tmpdir/testprog.o]

    # Run "readelf -wi" on it.
    set got [remote_exec host "$READELF $READELFFLAGS -wi $tempfile" "" "/dev/null" "readelf.out"]

    # Upload the results.
    set output [remote_upload host readelf.out]

    file_on_host delete $tempfile

    # Strip any superflous warnings.
    set got [prune_readelf_wi_warnings [lindex $got 1]]

    if ![string match "" $got] then {
	fail "readelf $READELFFLAGS -wi (reason: unexpected output)"
	send_log $got
	send_log "\n"
	return
    }

    if ![file size $output] then {
	# If the output file is empty, then this target does not
	# generate dwarf2 output.  This is not a failure.
	verbose "No output from 'readelf -wi'"
	untested "readelf -wi"
	return
    }

    # Search for strings that should be in the output.
    set sought {
	".*DW_TAG_compile_unit.*"
	".*DW_TAG_subprogram.*"
	".*DW_TAG_base_type.*"
	".*DW_AT_producer.*(GNU C|indirect string).*"
	".*DW_AT_language.*ANSI C.*"
	".*DW_AT_name.*(testprog.c|indirect string).*"
	".*DW_AT_name.*fn.*"
	".*DW_AT_name.*(main|indirect string).*"
	".*\(DW_OP_addr: 0\).*"
    }

    # The MSP430 in LARGE mode does not generate a DW_OP_addr.
    setup_xfail msp430*-*-*

    foreach looked_for $sought {
	set lines [grep $output $looked_for]
	if ![llength $lines] then {
	    fail "readelf -wi: missing: $looked_for"
	    send_log readelf.out
	    return
	}
    }

    file_on_host delete $output

    # All done.
    pass "readelf -wi"
}

# This tests "readelf -wa", but on a file with a compressed
# .debug_abbrev section.

proc readelf_compressed_wa_test {} {
    global READELF
    global READELFFLAGS
    global srcdir
    global subdir

    if { ![is_zlib_supported] } {
	unsupported "readelf -wa (compressed)"
	return
    }

    # Compile the compressed-debug-section test file.
    if { [target_compile $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o object debug] != "" } {
	verbose "Unable to compile test file."
	untested "readelf -wa (compressed)"
	return
    }

    # Download it.
    set tempfile [remote_download host tmpdir/dw2-compressed.o]

    # Run "readelf -wa" on it.
    set got [remote_exec host "$READELF $READELFFLAGS -wa $tempfile" "" "/dev/null" "readelf.out"]

    # Upload the results.
    set output [remote_upload host readelf.out]

    file_on_host delete $tempfile

    if { [string compare [file_contents readelf.out] [file_contents $srcdir/$subdir/readelf.wa]] != 0 } then {
	fail "readelf -wa (compressed)"
	verbose "output is \n[file_contents readelf.out]" 2
	verbose "expected is \n[file_contents $srcdir/$subdir/readelf.wa]" 2
	return
    }

    pass "readelf -wa (compressed)"
}

# Test readelf's dumping abilities.

proc readelf_dump_test {} {
    global READELF
    global READELFFLAGS
    global srcdir
    global subdir

    # Assemble the dump test file.
    if {![binutils_assemble $srcdir/$subdir/dumptest.s tmpdir/dumptest.o]} then {
      unresolved "readelf -p: failed to assemble dump test file"
      return
    }
    # Download it.
    set tempfile [remote_download host tmpdir/dumptest.o]

    # Run "readelf -p.data" on it.
    set got [remote_exec host "$READELF $READELFFLAGS -p.data $tempfile" "" "/dev/null" "readelf.out"]
    set got [lindex $got 1]

    # Upload the results.
    set output [remote_upload host readelf.out]

    # Check for something going wrong.
    if ![string match "" $got] then {
	fail "readelf -p: unexpected output"
	send_log $got
	send_log "\n"
	return
    }

    # Search for strings that should be in the output.
    set sought {
	".*test_string.*"
    }

    foreach looked_for $sought {
	set lines [grep $output $looked_for]
	if ![llength $lines] then {
	    fail "readelf -p: missing: $looked_for"
	    send_log readelf.out
	    return
	}
    }

    file_on_host delete $tempfile
    file_on_host delete $output

    # All done.
    pass "readelf -p"

    # XXX FIXME: Add test of readelf -x here
}

if ![is_remote host] {
    if {[which $READELF] == 0} then {
        perror "$READELF does not exist"
        return
    }
}

send_user "Version [binutil_version $READELF]"

# Assemble the test file.
if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {
    perror "could not assemble test file"
    unresolved "readelf - failed to assemble"
    return
}

if ![is_remote host] {
    set tempfile tmpdir/bintest.o
} else {
    set tempfile [remote_download host tmpdir/bintest.o]
}

# First, determine the size, so specific output matchers can be used.
readelf_find_size $tempfile

# Run the tests.
readelf_test -h $tempfile readelf.h  {}
readelf_test -S $tempfile readelf.s  {}
readelf_test -s $tempfile readelf.ss {}
readelf_test -r $tempfile readelf.r  {}

readelf_wi_test
readelf_compressed_wa_test

readelf_dump_test

# PR 13482 - Check for off-by-one errors when dumping .note sections.
if {![binutils_assemble $srcdir/$subdir/version.s tmpdir/version.o]} then {
    perror "could not assemble version note test file"
    unresolved "readelf - failed to assemble"
    return
}

if ![is_remote host] {
    set tempfile tmpdir/version.o
} else {
    set tempfile [remote_download host tmpdir/version.o]
}

readelf_test -n $tempfile readelf.n  {}
@


1.33
log
@binutils/testsuite/
	* lib/binutils-common.exp (is_zlib_supported): New function.
	* lib/utils-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
	* binutils-all/compress.exp: Bail out if zlib is not available.
	* binutils-all/objdump.exp (objdump compressed debug):
	Mark unsupported if zlib is not available.
	* binutils-all/readelf.exp (readelf_compressed_wa_test): Likewise.

gas/testsuite/
	* lib/gas-defs.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.

ld/testsuite/
	* ld-elf/compress.exp: Bail out if zlib is not supported.
	* lib/ld-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
@
text
@d1 1
a1 2
#   Copyright 1999, 2000, 2001, 2003, 2004, 2007, 2009, 2012
#   Free Software Foundation, Inc.
d198 3
@


1.32
log
@	PR binutils/13482
	* readelf.c (process_corefile_note_segment): Fix off-by-one errors
	verifying the contents of a note.

	* binutils-all/version.s: New test source file.
	* binutils-all/readelf.n: New file: expected readelf output.
	* binutils-all/readelf.exp: Add test of .note section contents.
@
text
@d8 1
a8 1
# 
d13 1
a13 1
# 
d87 1
a87 1
    
d149 1
a149 1
    
d167 1
a167 1
    
d185 1
a185 1
    
d198 2
a199 2
    
    foreach looked_for $sought {	
d209 1
a209 1
    
d222 6
a227 1
    
d245 1
a245 1
    
d263 1
a263 1
    
d291 2
a292 2
    
    foreach looked_for $sought {	
d301 1
a301 1
    file_on_host delete $tempfile    
@


1.32.2.1
log
@binutils/testsuite/
	* lib/binutils-common.exp (is_zlib_supported): New function.
	* lib/utils-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
	* binutils-all/compress.exp: Bail out if zlib is not available.
	* binutils-all/objdump.exp (objdump compressed debug):
	Mark unsupported if zlib is not available.
	* binutils-all/readelf.exp (readelf_compressed_wa_test): Likewise.

gas/testsuite/
	* lib/gas-defs.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.

ld/testsuite/
	* ld-elf/compress.exp: Bail out if zlib is not supported.
	* lib/ld-lib.exp (run_dump_test): If as options include
	--compress-debug-sections and zlib is not available, report
	the test as unsupported.
@
text
@d8 1
a8 1
#
d13 1
a13 1
#
d87 1
a87 1

d149 1
a149 1

d167 1
a167 1

d185 1
a185 1

d198 2
a199 2

    foreach looked_for $sought {
d209 1
a209 1

d222 1
a222 6

    if { ![is_zlib_supported] } {
	unsupported "readelf -wa (compressed)"
	return
    }

d240 1
a240 1

d258 1
a258 1

d286 2
a287 2

    foreach looked_for $sought {
d296 1
a296 1
    file_on_host delete $tempfile
@


1.31
log
@bfd/
2010-12-23  Robert Millan  <rmh@@gnu.org>

	* config.bfd: Recognize mips-freebsd and mips-kfreebsd-gnu.
	* configure.host: Likewise.
	* configure.in: Support for `bfd_elf32_ntradbigmips_freebsd_vec',
	`bfd_elf32_ntradlittlemips_freebsd_vec',
	`bfd_elf32_tradbigmips_freebsd_vec',
	`bfd_elf32_tradlittlemips_freebsd_vec',
	`bfd_elf64_tradbigmips_freebsd_vec' and
	`bfd_elf64_tradlittlemips_freebsd_vec'.
	* configure: Regenerate.
	* elf32-mips.c: New target for FreeBSD support
	(same as traditional MIPS but overrides ELF_OSABI
	with ELFOSABI_FREEBSD).
	* elf64-mips.c: Likewise.
	* elfn32-mips.c: Likewise.
	* targets.c (_bfd_target_vector): Add
	`bfd_elf32_ntradbigmips_freebsd_vec',
	`bfd_elf32_ntradlittlemips_freebsd_vec',
	`bfd_elf32_tradbigmips_freebsd_vec',
	`bfd_elf32_tradlittlemips_freebsd_vec',
	`bfd_elf64_tradbigmips_freebsd_vec' and
	`bfd_elf64_tradlittlemips_freebsd_vec'.

ld/
2010-12-14  Robert Millan  <rmh@@gnu.org>

	* configure.tgt: Recognize mips-freebsd and mips-kfreebsd-gnu.

	* emulparams/elf32btsmip_fbsd.sh: New file.
	* emulparams/elf32btsmipn32_fbsd.sh: Likewise.
	* emulparams/elf32ltsmip_fbsd.sh: Likewise.
	* emulparams/elf32ltsmipn32_fbsd.sh: Likewise.
	* emulparams/elf64btsmip_fbsd.sh: Likewise.
	* emulparams/elf64ltsmip_fbsd.sh: Likewise.

	* Makefile.am: Add build rules for `eelf32btsmip_fbsd.c',
	`eelf32btsmipn32_fbsd.c', `eelf32ltsmip_fbsd.c',
	`eelf32ltsmipn32_fbsd.c', `eelf64btsmip_fbsd.c' and
	`eelf64ltsmip_fbsd.c'.
	* Makefile.in: Regenerate.

gas/
2010-12-19  Robert Millan  <rmh@@gnu.org>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* config/tc-mips.c (ELF_TARGET): New macro.  Generates target
	names accordingly to whether TE_FreeBSD and whether TE_TMIPS
	are defined.
	(mips_target_format): Refactor code using ELF_TARGET().
	(support_64bit_objects): Likewise.

	* configure.in: Recognize mips-freebsd and mips-kfreebsd-gnu.
	* configure.tgt: Likewise.
	* configure: Regenerate.

binutils/testsuite/
	* binutils-all/readelf.exp: Handle MIPS FreeBSD targets.

gas/testsuite/
	* gas/mips/e32el-rel2.d: Accept any file format.
	* gas/mips/elf-rel.d: Likewise.
	* gas/mips/elf-rel2.d: Likewise.
	* gas/mips/elf-rel3.d: Likewise.
	* gas/mips/elfel-rel.d: Likewise.
	* gas/mips/elfel-rel2.d: Likewise.
	* gas/mips/elfel-rel3.d: Likewise.
	* gas/mips/ldstla-32-mips3-shared.d: Likewise.
	* gas/mips/ldstla-32-mips3.d: Likewise.
	* gas/mips/ldstla-32-shared.d: Likewise.
	* gas/mips/ldstla-32.d: Likewise.
	* gas/mips/ldstla-n64-shared.d: Likewise.
	* gas/mips/ldstla-n64.d: Likewise.
	* gas/mips/noat-1.d: Likewise.
	* gas/mips/set-arch.d: Likewise.
	* gas/mips/tls-o32.d: Likewise.

ld/testsuite/
	* ld-mips-elf/mips-elf-flags.exp: Handle FreeBSD targets.
	* ld-mips-elf/mips-elf.exp: Likewise.
	* ld-mips-elf/mips16-call-global.d: Accept any file format.
	* ld-mips-elf/mips16-intermix.d: Likewise.
@
text
@d1 1
a1 1
#   Copyright 1999, 2000, 2001, 2003, 2004, 2007, 2009
d340 15
@


1.30
log
@update copyright dates
@
text
@d104 3
a106 1
	if { [istarget "mips*-*-*linux*"] || [istarget "mips*-sde-elf*"] } then {
@


1.29
log
@bfd/
	* Makefile.am (BFD32_LIBS): Add compress.lo.
	(BFD32_LIBS_CFILES): Add compress.c.
	(BFD_H_FILES): Likewise.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf2.c (read_section): New function.
	(read_indirect_string): Call new function read_section.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Call new function read_section when just one
	.zdebug_info section is found, otherwise read and compress
	multiple sections.
	(_bfd_dwarf2_cleanup_debug_info): Free sec_info_ptr.
	* elf.c (_bfd_elf_make_section_from_shdr): Add zdebug prefix.
	(special_sections_z): New struct.
	(special_sections): Refer to special_sections_z.
	* elfxx-mips.c (_bfd_mips_elf_section_from_shdr): Recognize
	sections named .zdebug_*.
	(_bfd_mips_elf_fake_sections): Likewise.
	* compress.c: New file.
	(bfd_uncompress_section_contents): New function.
bfd/doc/
	* Makefile.am (BFD_H_DEP): Add ../compress.c.
	* Makefile.in: Regenerate.
binutils/
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf.c (debug_displays): Add .zdebug_* strings.
	* dwarf.h (struct dwarf_section): Add fields uncompressed_namd
	and compressed_name.
	* objdump.c (load_debug_section): Call
	bfd_uncompress_section_contents when loading a compressed
	section.
	(dump_dwarf_section): Recognize compressed section name.
	(mach_o_dwarf_sections): Rename as
	mach_o_uncompressed_dwarf_sections.
	(mach_o_compressed_dwarf_sections): New variable.
	(generic_dwarf_section): Rename as
	generic_uncompressed_dwarf_sections.
	(generic_compressed_dwarf_sections): New variable.
	(check_mach_o_dwarf): Save and restore
	mach_o_compressed_dwarf_sections.
	* readelf.c: Add #include for config.h and zlib.h
	(process_section_headers): Recognize compressed section name.
	(uncompress_section_contents): New function.
	(load_debug_section): Call uncompress_section_contents when
	loading a compressed section.
	(display_debug_section): Recognize compressed section name.
binutils/testsuite:
	* binutils-all/objdump.exp: Add test for objdump -s on a file
	with a compressed debug section.  Add test for objdump -W on a
	file that contains a compressed debug section.
	* binutils-all/readelf.exp: Call readelf_compressed_wa_test.
	(readelf_compressed_wa_test): New function.
	* binutils-all/dw2-compressed.S: New file.
	* binutils-all/objdump.W: New file.
	* binutils-all/objdump.s: New file.
	* binutils-all/readelf.wa: New file.
@
text
@d1 2
a2 1
#   Copyright 1999, 2000, 2001, 2003, 2004, 2007 Free Software Foundation, Inc.
@


1.28
log
@* readelf.c (dump_type): New type used to classify the kinds of dump requested by the user.
  (dump_sects, cmdline_dump_sects): Use the new type.
  (options): Add --string-dump option.
  (request_dump): Rename to request_dump_bynumber.  Use dump_type.
  (request_dump_byname): Use dump_type.
  (parse_args): Parse --string-dump option.
  (process_section_headers): Fix calls to request_dump.
  (initialise_dumps_byname): Likewise.
  (dump_section): Rename to dump_section_as_bytes.
  (dump_section_as_strings): New function.  Display the contents of a section as printable strings.
  (process_section_contents): String dump the section if requested.
  (process_object): Use dump_type.
  (main): Likewise.
* Makefile.am: Add dependency for readelf.c on safe-ctype.h.
* Makefile.in: Regenerate.
* NEWS: Mention the new feature.
* doc/binutils.texi: Document the new feature.
* testsuite/binutils-all/dumptest.s: New test file.
* testsuite/binutils-all/readelf.exp: Add test of readelf's -p switch.
@
text
@d211 36
d334 1
@


1.27
log
@bfd:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* elf32-arm.c (elf32_arm_compare_mapping): Compare first on vma,
	then on type.

binutils/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* binutils-all/ar.exp (long_filenames): Delete temporary files on
	the host.
	* binutils-all/arm/objdump.exp: Only check "which $OBJDUMP" if
	host is local.
	* binutils-all/objcopy.exp: Use ${srecfile} to get the name of the
	srec file to be passed to binutils_run.
	(objcopy_test_readelf): Use remote_exec.
	* binutils-all/readelf.exp (readelf_find_size): Use remote_exec.
	(readelf_test): Likewise.
	(readelf_wi_test): Likewise.
	* lib/utils-lib.exp (run_dump_test): Only check "which $binary" if
	host is local.  Use remote_exec.  Use $tempfile not
	tmpdir/bintest.o.

gas:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* as.c (main): Flush stderr before printing listings to ensure
	consistent output order across platforms.

gas/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* lib/gas-defs.exp (gas_version): Use remote_* functions instead
	of exec.
	(gas_host_run): New.
	(gas_run): Use gas_host_run.
	(gas_start): Likewise.
	(run_dump_test): Likewise.
	(objdump): Use gas_host_run.
	(objdump_start_no_subdir): Likewise.
	* lib/gas-dg.exp (gas-dg-test): Use "remote_file host delete".
	* lib/run: Remove.
	* gas/macros/macros.exp: Download app4b.s to host.
	* gas/i386/i386.exp (gas_64_check): Use gas_host_run.
	(gas_32_check): Likewise.
	* gas/maxq10/maxq10.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/maxq20/maxq20.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/sparc/sparc.exp (gas_64_check): Likewise.
	* gas/cfi/cfi.exp: Likewise.
	* gas/elf/elf.exp (run_list_test): Likewise.  Use temporary file
	for readelf output in place of pipe.
	* gas/all/gas.exp: Download incbin.dat to host.
	(do_comment): Allow \r\r\n.

ld:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ldlang.c (sort_sections_by_lma): Sort by internal id after lma
	for stable sort.

ld/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ld-elfcomm/elfcomm.exp: Use run_host_cmd.  Only check "which
	$CC" if host is local.
	* ld-checks/checks.exp: Use run_host_cmd.
	* ld-elf/exclude.exp: Likewise.
	* ld-elf/elf.exp: Download merge.ld if host is remote.
	* ld-elf/binutils.exp (binutils_test): Use remote_exec.
	* ld-elf/tls_common.exp: Use run_host_cmd.
	* lib/ld-lib.exp (ld_version): Only check "which $ld" if host is
	local.  Use remote_exec.
	(run_host_cmd): New.
	(run_host_cmd_yesno): New.
	(default_ld_relocate): Use run_host_cmd_yesno.
	(default_ld_link): Likewise.
	(default_ld_simple_link): Use run_host_cmd.
	(default_ld_compile): Only check "which $ccprog" if host is local.
	Use remote_file and remote_exec.
	(default_ld_assemble): Only check "which $as" if host is local.
	Use run_host_cmd.
	(default_ld_nm): Use remote_exec, remote_upload and remote_file.
	(run_dump_test): Use remote_exec, remote_upload and remote_file.
	Only check "which $binary" if host is local.
	(run_ld_link_tests): Use remote_exec, remote_upload and
	remote_file.
	* ld-selective/selective.exp: Only check "which $CXX" if host is
	local.  Use remote_exec.
	* ld-scripts/phdrs.exp: Only check "which $objdump" if host is
	local.  Use run_host_cmd.
	* ld-scripts/phdrs2.exp: Likewise.
	* ld-scripts/weak.exp: Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
	* ld-scripts/crossref.exp: Only check "which $CC" if host is local.
	Use run_host_cmd.
	* ld-scripts/map-address.exp: Upload map_address.map if host is
	remote.
	* ld-srec/srec.exp (run_srec_tests): Use run_host_cmd.  Only check
	"which $CC" and "which $CXX" if host is local.
	* ld-undefined/undefined.exp: Only check "which $CC" if host is
	local.  Use remote_file and run_host_cmd.
	* config/default.exp: Use remote_exec to create tmpdir.
@
text
@d24 6
d212 52
a263 4
# Exclude non-ELF targets.
if ![is_elf_format] {
    verbose "$READELF is only intended for ELF targets" 2
    return
d277 1
a277 1
    perror "unresolved 1"
d298 2
@


1.26
log
@Change sources over to using GPLv3
@
text
@d44 4
a47 1
    catch "exec $READELF $READELFFLAGS -h $binary_file > readelf.out" got
d49 1
a49 1
    if ![string match "" $got] then {
d82 1
a82 1
    catch "exec $READELF $READELFFLAGS $options $binary_file > readelf.out" got
d88 1
a88 1
    if ![string match "" $got] then {
d152 1
a152 2
    send_log "exec $READELF $READELFFLAGS -wi $tempfile > readelf.out\n"
    catch "exec $READELF $READELFFLAGS -wi $tempfile > readelf.out" got
d160 1
a160 1
    set got [prune_readelf_wi_warnings $got]
@


1.25
log
@	* binutils-all/readelf.exp (regexp_diff): Delete.
@
text
@d1 1
a1 1
#   Copyright 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.
d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
@


1.24
log
@* binutils-all/readelf.exp (readelf_wi_test): Fix unexpected output failure message.
@
text
@a33 102
# regexp_diff, based on simple_diff taken from ld test suite
#	compares two files line-by-line
#	file1 contains strings, file2 contains regexps and #-comments
#	blank lines are ignored in either file
#	returns non-zero if differences exist
#
proc regexp_diff { file_1 file_2 } {

    set eof -1
    set end_1 0
    set end_2 0
    set differences 0
    set diff_pass 0

    if [file exists $file_1] then {
	set file_a [open $file_1 r]
    } else {
	warning "$file_1 doesn't exist"
	return 1
    }

    if [file exists $file_2] then {
	set file_b [open $file_2 r]
    } else {
	fail "$file_2 doesn't exist"
	close $file_a
	return 1
    }

    verbose " Regexp-diff'ing: $file_1 $file_2" 2

    while { 1 } {
	set line_a ""
	set line_b ""
	while { [string length $line_a] == 0 } {
	    if { [gets $file_a line_a] == $eof } {
		set end_1 1
		break
	    }
	}
	while { [string length $line_b] == 0 || [string match "#*" $line_b] } {
	    if [ string match "#pass" $line_b ] {
		set end_2 1
		set diff_pass 1
		break
	    } elseif [ string match "#..." $line_b ] {
		if { [gets $file_b line_b] == $eof } {
		    set end_2 1
		    break
		}
		verbose "looking for \"^$line_b$\"" 3
		while { ![regexp "^$line_b$" "$line_a"] } {
		    verbose "skipping    \"$line_a\"" 3
		    if { [gets $file_a line_a] == $eof } {
			set end_1 1
			break
		    }
		}
		break
	    }
	    if { [gets $file_b line_b] == $eof } {
		set end_2 1
		break
	    }
	}

        if { $diff_pass } { 
            break 
        } elseif { $end_1 && $end_2 } { 
            break
        } elseif { $end_1 } {
            send_log "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1\n"
            verbose "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1" 3
            set differences 1
            break
        } elseif { $end_2 } {
            send_log "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n"
            verbose "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n" 3
            set differences 1
            break
        } else {
            verbose "regexp \"^$line_b$\"\nline   \"$line_a\"" 3
            if ![regexp "^$line_b$" "$line_a"] {
		send_log "regexp_diff match failure\n"
		send_log "regexp \"^$line_b$\"\nline   \"$line_a\"\n"
		set differences 1
            }
        }
    }

    if { $differences == 0 && !$diff_pass && [eof $file_a] != [eof $file_b] } {
	send_log "$file_1 and $file_2 are different lengths\n"
	verbose "$file_1 and $file_2 are different lengths" 3
	set differences 1
    }

    close $file_a
    close $file_b

    return $differences
}

@


1.23
log
@	[ ChangeLog ]
	* config.sub: Add support for sde as alias of mipsisa32-sde-elf.

	[ bfd/ChangeLog ]
	* config.bfd: Add configurations for mips*el-sde-elf* and
	mips*-sde-elf*.

	[ binutils/testsuite/ChangeLog ]
	* binutils-all/readelf.exp (readelf_test): Handle mips*-sde-elf*.

	[ gas/ChangeLog ]
	* configure.tgt: Handle mips*-sde-elf*.

	[ gas/testsuite/ChangeLog ]
	* gas/mips/mips.exp: Handle mips*-sde-elf*.
@
text
@d263 1
a263 1
	fail "readelf $options (reason: unexpected output)"
@


1.22
log
@Update FSF address
@
text
@d196 1
a196 1
	if { [istarget "mips*-*-*linux*"] } then {
@


1.21
log
@update copyright dates
@
text
@d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.20
log
@	* binutils-all/ar.exp: Remove stray semicolons.
	* binutils-all/dlltool.exp: Likewise.
	* binutils-all/objcopy.exp: Likewise.
	* binutils-all/readelf.exp: Likewise.
	* binutils-all/windres/windres.exp: Likewise.
	* lib/utils-lib.exp: Likewise.
@
text
@d1 1
a1 1
#   Copyright 1999, 2000 Free Software Foundation, Inc.
@


1.19
log
@2003-09-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* readelf.c (dump_relocations): Support SHN_IA_64_ANSI_COMMON.
	(get_symbol_index_type): Likewise.

testsuites/

2003-09-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/readelf.exp: Use is_elf_format.

	* binutils-all/readelf.h: Support IA64/ILP32.
	* binutils-all/readelf.s: Likewise.
	* binutils-all/readelf.ss: Likewise.

	* lib/utils-lib.exp (proc is_elf_format): Copy from ld
	testsuite. Add ia64-*-hpux*.
@
text
@d248 1
a248 1
    set tempfile [remote_download host tmpdir/testprog.o];
d255 1
a255 1
    set output [remote_upload host readelf.out];
d257 1
a257 1
    file_on_host delete $tempfile;
d299 1
a299 1
    file_on_host delete $output;
d329 1
a329 1
    set tempfile tmpdir/bintest.o;
@


1.18
log
@oops - forgot to add the grep for "(DW_OP_addr: 0)"
@
text
@d306 2
a307 19
# Only ELF based toolchains need readelf.
# For now be paranoid and assume that if ELF is not mentioned
# in the target string, then the target is not an ELF based port.

if { ![istarget *-*-elf*] \
     && ![istarget *-*-linux*] \
     && ![istarget i?86-*-sysv4*] \
     && ![istarget i?86-*-unixware] \
     && ![istarget mips*-*-irix5*] \
     && ![istarget mips*-*-irix6*] \
     && ![istarget powerpc-*-sysv4*] \
     && ![istarget powerpc-*-eabi*] \
     && ![istarget sparc*-*-solaris2*] } {
    verbose "$READELF is only intended for ELF targets" 2
    return
}

if { [istarget *-*-linux*oldld*] \
     || [istarget *-*-linux*aout*] } {
@


1.17
log
@Rework readelf -wi tests to grep for expected strings.
@
text
@d287 1
@


1.16
log
@Fix "readelf -wi" test
@
text
@a166 6
# Simple proc to skip certain expected warning messages.
proc prune_readelf_warnings { text } {
    regsub -all "(^|\n)(.*Skipping unexpected symbol type.*)" $text "\\1" text
    return $text
}

a186 2
    set got [prune_readelf_warnings $got]
    
d220 83
d359 1
a359 17

# Compile the second test file.
if { [target_compile $srcdir/$subdir/testprog.c tmpdir/testprog.o object debug] != "" } {
    untested "readelf -w"
    return
}

if [is_remote host] {
    set tempfile [remote_download host tmpdir/testprog.o];
} else {
    set tempfile tmpdir/testprog.o
}

# The xfail targets here do not default to DWARF2 format debug information
# The symptom is that the output of 'readelf -wi' is empty.

readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-* mips*-*-elf* avr-*-* d30v-*-* h8300*-*-* i960-*-* m32r-*-* sparc-*-*}
@


1.15
log
@	* binutils-all/readelf.exp: powerpc-*-eabi* is an ELF target.
@
text
@d167 6
d192 2
d196 1
d198 1
a198 1
	fail "readelf $options"
d300 1
a300 1
readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-* mips*-*-elf* *-*-linux* h8300*-*-*}
@


1.14
log
@	* binutils-all/readelf.exp: Exclude mips*-*-elf* from 'readelf -wi'
	test.
@
text
@d232 1
@


1.13
log
@	* readelf.c: Include elf/h8 for H8 series definitions.
	(guess_is_rela): H8 series if RELA.
	(dump_relocations): Handle H8 series relocations.

	* testsuite/binutils/all/readelf.exp: Expect readelf -wi to
	fail for the H8 series.
@
text
@d290 1
a290 1
readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-* *-*-linux* h8300*-*-*}
@


1.12
log
@	* binutils-all/readelf.exp: Don't regard mips*el-*-* as traditional
	mips.
	* gas/mips/mips.exp: Likewise. Use traditional testcases for
	mips${el}16-f if needed.
	* gas/mips/elempic.d: New file, testcase for little endian empic.
	* gas/mips/elfel-rel2.d: Don't test trailing zeroes in dump.
	* gas/mips/mips16-f.d: Use non-traditional symbol sorting.
	* gas/mips/mipsel16-f.d: Likewise.
	* gas/mips/mipsel16-e.d: New file, testcase for little endian MIPS16
	relocations.
	* gas/mips/tmipsel16-f.d: New file, testcase for little endian MIPS16
	relocations, traditional variant.
@
text
@d290 1
a290 1
readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-* *-*-linux*}
@


1.11
log
@Fix typos
@
text
@d195 1
a195 1
	if { [istarget mips*el-*-*] || [istarget "mips*-*-*linux*"] } then {
@


1.10
log
@2001-05-25  H.J. Lu  <hjl@@gnu.org>

	* binutils-all/readelf.exp (readelf_test): Set target_machine
	to tmips for traditional mips.

	* binutils-all/readelf.s: Support traditional mips.

	* binutils-all/readelf.ss-tmips: New for traditional mips.
@
text
@d252 1
a252 1
# Assemle the test file.
@


1.9
log
@s/linuxaout/linux*aout/, s/linuxoldld/linux*oldld/
@
text
@d195 5
a199 1
      set target_machine mips
@


1.8
log
@2001-03-30  H.J. Lu  <hjl@@gnu.org>

	* binutils-all/readelf.exp: Run on more ELF targets.
@
text
@d233 2
a234 2
if { [istarget *-*-linuxoldld*] \
     || [istarget *-*-linuxaout*] } {
@


1.7
log
@Fix typos in ChangeLogs and update copyright notices
@
text
@d221 14
a234 1
if ![istarget "*-*elf"] then {
d286 1
a286 1
readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-*}
@


1.6
log
@Fix readelf -S and readelf -s tests for MIPS and v850
@
text
@d1 1
a1 1
#   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
@


1.6.2.1
log
@Update copyright notices.
@
text
@d1 1
a1 1
#   Copyright 1999, 2000 Free Software Foundation, Inc.
@


1.6.2.2
log
@Merge from mainline.
@
text
@d195 1
a195 5
	if { [istarget mips*el-*-*] || [istarget "mips*-*-*linux*"] } then {
	    set target_machine tmips
	} else {
	    set target_machine mips
	}
d221 1
a221 14
if { ![istarget *-*-elf*] \
     && ![istarget *-*-linux*] \
     && ![istarget i?86-*-sysv4*] \
     && ![istarget i?86-*-unixware] \
     && ![istarget mips*-*-irix5*] \
     && ![istarget mips*-*-irix6*] \
     && ![istarget powerpc-*-sysv4*] \
     && ![istarget sparc*-*-solaris2*] } {
    verbose "$READELF is only intended for ELF targets" 2
    return
}

if { [istarget *-*-linux*oldld*] \
     || [istarget *-*-linux*aout*] } {
d273 1
a273 1
readelf_test -wi $tempfile readelf.wi {v850*-*-* cris-*-* *-*-linux*}
@


1.5
log
@	* binutils-all/readelf.exp (-wi test): Add cris-*-* to xfails.
@
text
@d79 14
d193 10
a202 1
    if { [file exists $srcdir/$subdir/$regexp_file-$readelf_size] } then {
d253 2
a254 9

# The v850 fails the next two tests because it creates two special
# sections of its own: .call_table_data and .call_table_text
# The regexp scripts are not expecting these sections...
# MIPS targets fail because they add .rela.txt (empty), .mdebug,
# and .reginfo sections.

readelf_test -S $tempfile readelf.s  {v850*-*-* mips*-*-*}
readelf_test -s $tempfile readelf.ss {v850*-*-* mips*-*-*}
@


1.4
log
@(readelf -S test, readelf -s test): Expect mips*-*-* to fail.
@
text
@d257 1
a257 1
readelf_test -wi $tempfile readelf.wi {v850*-*-*}
@


1.3
log
@	* binutils-all/readelf.exp (regexp_diff): Do not break when a
	mismatching line is found.
	(readelf_find_size): New.
	(readelf_size): New global variable.
	(readelf_test): Add newline to send_log of command.
	If $srcdir/$subdir/$regexp_file-$readelf_size exists, use it
	instead of $srcdir/$subdir/$regexp_file.
	(*-*elf test): Fix typo in message.
	* binutils-all/readelf.s-64: New.
	* binutils-all/readelf.ss-64: New.
@
text
@d169 2
a170 2
    if { [llength $xfails] != 0 } then {
	setup_xfail $xfails
d234 2
d237 2
a238 2
readelf_test -S $tempfile readelf.s  {v850*-*-*}
readelf_test -s $tempfile readelf.ss {v850*-*-*}
@


1.2
log
@Correct a typo in the author's surname!
@
text
@d1 1
a1 1
#   Copyright (C) 1999 Free Software Foundation, Inc.
a105 1
                break
d122 31
d156 1
a156 1
# of the regexp_file.
d162 1
d166 1
a166 1
    send_log "exec $READELF $READELFFLAGS $options $binary_file > readelf.out"
d179 4
d199 1
a199 1
    verbose "$READELF is only intenteded for ELF targets" 2
d225 4
a228 1
# Run the tests
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
# Written by Nick Clifto  <nickc@@cygnus.com>
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

