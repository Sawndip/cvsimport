head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.10
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.5
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.8
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.6
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.4
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.2
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.3.2.1
	binutils-2_20:1.3.2.1
	binutils-2_20-branch:1.3.0.2
	binutils-2_20-branchpoint:1.3
	binutils_latest_snapshot:1.5;
locks; strict;
comment	@# @;


1.5
date	2009.09.07.18.07.02;	author jkratoch;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.07.18.02.59;	author jkratoch;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.07.19.32.06;	author drow;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2009.07.29.06.10.18;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.14.16.57.18;	author jkratoch;	state Exp;
branches;
next	;

1.3.2.1
date	2009.09.08.10.48.48;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.5
log
@binutils/
	* dwarf.c (process_debug_info): Support section padding abbrev codes.

binutils/testsuite/
	* binutils-all/testranges.s (.debug_info): Pad the only CU.
@
text
@# Test .debug_info can reference .debug_ranges entries without ordering the
# offsets strictly as increasing.

	.text
start:
	.byte	1
sub:
	.byte	2
end:

	.section	.debug_ranges,"",%progbits
range:

range_sub:
	.4byte	sub, end
	.4byte	0, 0	;# range terminator

range_cu:
	.4byte	start, end
	.4byte	0, 0	;# range terminator

	.section	.debug_info,"",%progbits
	.4byte	debugE - debugS	;# Length of Compilation Unit Info
debugS:
	.short	0x2	;# DWARF version number
	.4byte	abbrev0	;# Offset Into Abbrev. Section
	.byte	0x4	;# Pointer Size (in bytes)

	.uleb128 0x1	;# (DIE (0xb) DW_TAG_compile_unit)
	.4byte	range_cu - range	;# DW_AT_ranges

	.uleb128 0x2	;# (DIE (0x6d) DW_TAG_subprogram)
	.ascii "A\0"	;# DW_AT_name
	.4byte	range_sub - range	;# DW_AT_ranges

	;# minimal section alignment on alpha-* is 2, ensure no new invalid CU
	;# will be started.
	.balign	2
debugE:

	.section	.debug_abbrev,"",%progbits
abbrev0:
	.uleb128 0x1	;# (abbrev code)
	.uleb128 0x11	;# (TAG: DW_TAG_compile_unit)
	.byte	0x0	;# DW_children_no
	.uleb128 0x55	;# (DW_AT_ranges)
	.uleb128 0x6	;# (DW_FORM_data4)
	.byte	0x0
	.byte	0x0

	.uleb128 0x2	;# (abbrev code)
	.uleb128 0x2e	;# (TAG: DW_TAG_subprogram)
	.byte	0x0	;# DW_children_no
	.uleb128 0x3	;# (DW_AT_name)
	.uleb128 0x8	;# (DW_FORM_string)
	.uleb128 0x55	;# (DW_AT_ranges)
	.uleb128 0x6	;# (DW_FORM_data4)
	.byte	0x0
	.byte	0x0

	.byte	0x0	;# abbrevs terminator
@


1.4
log
@binutils/testsuite/
	* binutils-all/testranges.s: Replace all .long by .4byte.
@
text
@d35 4
@


1.3
log
@	binutils/testsuite/
	* binutils-all/testranges.s: Use %progbits.  Use ";#" for comments.
@
text
@d15 2
a16 2
	.long	sub, end
	.long	0, 0	;# range terminator
d19 2
a20 2
	.long	start, end
	.long	0, 0	;# range terminator
d23 1
a23 1
	.long	debugE - debugS	;# Length of Compilation Unit Info
d26 1
a26 1
	.long	abbrev0	;# Offset Into Abbrev. Section
d30 1
a30 1
	.long	range_cu - range	;# DW_AT_ranges
d34 1
a34 1
	.long	range_sub - range	;# DW_AT_ranges
@


1.3.2.1
log
@	* binutils-all/objdump.exp (cpus_expected): Add ms1.

	2009-09-07  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	* binutils-all/testranges.s (.debug_info): Pad the only CU.
	* binutils-all/testranges.s: Replace all .long by .4byte.
@
text
@d15 2
a16 2
	.4byte	sub, end
	.4byte	0, 0	;# range terminator
d19 2
a20 2
	.4byte	start, end
	.4byte	0, 0	;# range terminator
d23 1
a23 1
	.4byte	debugE - debugS	;# Length of Compilation Unit Info
d26 1
a26 1
	.4byte	abbrev0	;# Offset Into Abbrev. Section
d30 1
a30 1
	.4byte	range_cu - range	;# DW_AT_ranges
d34 1
a34 5
	.4byte	range_sub - range	;# DW_AT_ranges

	;# minimal section alignment on alpha-* is 2, ensure no new invalid CU
	;# will be started.
	.balign	2
@


1.2
log
@	* binutils-all/testranges.s: Replace .value with .short.
@
text
@d11 1
a11 1
	.section	.debug_ranges,"",@@progbits
d16 1
a16 1
	.long	0, 0	# range terminator
d20 1
a20 1
	.long	0, 0	# range terminator
d22 2
a23 2
	.section	.debug_info,"",@@progbits
	.long	debugE - debugS	# Length of Compilation Unit Info
d25 10
a34 10
	.short	0x2	# DWARF version number
	.long	abbrev0	# Offset Into Abbrev. Section
	.byte	0x4	# Pointer Size (in bytes)

	.uleb128 0x1	# (DIE (0xb) DW_TAG_compile_unit)
	.long	range_cu - range	# DW_AT_ranges

	.uleb128 0x2	# (DIE (0x6d) DW_TAG_subprogram)
	.ascii "A\0"	# DW_AT_name
	.long	range_sub - range	# DW_AT_ranges
d37 1
a37 1
	.section	.debug_abbrev,"",@@progbits
d39 5
a43 5
	.uleb128 0x1	# (abbrev code)
	.uleb128 0x11	# (TAG: DW_TAG_compile_unit)
	.byte	0x0	# DW_children_no
	.uleb128 0x55	# (DW_AT_ranges)
	.uleb128 0x6	# (DW_FORM_data4)
d47 7
a53 7
	.uleb128 0x2	# (abbrev code)
	.uleb128 0x2e	# (TAG: DW_TAG_subprogram)
	.byte	0x0	# DW_children_no
	.uleb128 0x3	# (DW_AT_name)
	.uleb128 0x8	# (DW_FORM_string)
	.uleb128 0x55	# (DW_AT_ranges)
	.uleb128 0x6	# (DW_FORM_data4)
d57 1
a57 1
	.byte	0x0	# abbrevs terminator
@


1.1
log
@binutils/
	Support unordered .debug_info references to .debug_ranges.
	* dwarf.c (struct range_entry, range_entry_compar): New.
	(display_debug_ranges): Remove variables last_offset, first, j,
	seen_first_offset, use_debug_info and next.  New variables
	range_entries and range_entry_fill.  Create the sorted copy
	range_entries.  Remove the FIXME error on detected unordered references.
	* dwarf.h (debug_info <range_lists>): New comment.

binutils/testsuite/
	* binutils-all/objcopy.exp (testranges): New test.
	* binutils-all/testranges.d, binutils-all/testranges.s: New files.
@
text
@d25 1
a25 1
	.value	0x2	# DWARF version number
@

