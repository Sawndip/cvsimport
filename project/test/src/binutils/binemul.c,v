head	1.14;
access;
symbols
	binutils-2_24-branch:1.14.0.8
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.13
	binutils-2_23_2:1.14
	binutils-2_23_1:1.14
	binutils-2_23:1.14
	binutils-2_23-branch:1.14.0.6
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.4
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.2
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.13
	binutils-2_21-branch:1.13.0.2
	binutils-2_21-branchpoint:1.13
	binutils-2_20_1:1.12
	binutils-2_20:1.12
	binutils-arc-20081103-branch:1.11.0.8
	binutils-arc-20081103-branchpoint:1.11
	binutils-2_20-branch:1.12.0.2
	binutils-2_20-branchpoint:1.12
	dje-cgen-play1-branch:1.11.0.6
	dje-cgen-play1-branchpoint:1.11
	arc-20081103-branch:1.11.0.4
	arc-20081103-branchpoint:1.11
	binutils-2_19_1:1.11
	binutils-2_19:1.11
	binutils-2_19-branch:1.11.0.2
	binutils-2_19-branchpoint:1.11
	binutils-2_18:1.10
	binutils-2_18-branch:1.10.0.2
	binutils-2_18-branchpoint:1.10
	binutils-csl-coldfire-4_1-32:1.8
	binutils-csl-sourcerygxx-4_1-32:1.8
	binutils-csl-innovasic-fido-3_4_4-33:1.8
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.8
	binutils-csl-sourcerygxx-4_1-30:1.8
	binutils-csl-coldfire-4_1-28:1.8
	binutils-csl-sourcerygxx-4_1-29:1.8
	binutils-csl-sourcerygxx-4_1-28:1.8
	binutils-csl-arm-2006q3-27:1.8
	binutils-csl-sourcerygxx-4_1-27:1.8
	binutils-csl-arm-2006q3-26:1.8
	binutils-csl-sourcerygxx-4_1-26:1.8
	binutils-csl-sourcerygxx-4_1-25:1.8
	binutils-csl-sourcerygxx-4_1-24:1.8
	binutils-csl-sourcerygxx-4_1-23:1.8
	binutils-csl-sourcerygxx-4_1-21:1.8
	binutils-csl-arm-2006q3-21:1.8
	binutils-csl-sourcerygxx-4_1-22:1.8
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.8
	binutils-csl-sourcerygxx-4_1-20:1.8
	binutils-csl-arm-2006q3-19:1.8
	binutils-csl-sourcerygxx-4_1-19:1.8
	binutils-csl-sourcerygxx-4_1-18:1.8
	binutils-csl-renesas-4_1-9:1.8
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.8
	binutils-csl-renesas-4_1-7:1.8
	binutils-csl-renesas-4_1-6:1.8
	binutils-csl-sourcerygxx-4_1-17:1.8
	binutils-csl-sourcerygxx-4_1-14:1.8
	binutils-csl-sourcerygxx-4_1-15:1.8
	binutils-csl-sourcerygxx-4_1-13:1.8
	binutils-2_17:1.8
	binutils-csl-sourcerygxx-4_1-12:1.8
	binutils-csl-sourcerygxx-3_4_4-21:1.8
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.8
	binutils-csl-sourcerygxx-4_1-8:1.8
	binutils-csl-sourcerygxx-4_1-7:1.8
	binutils-csl-arm-2006q1-6:1.8
	binutils-csl-sourcerygxx-4_1-6:1.8
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.8
	binutils-csl-sourcerygxx-3_4_4-19:1.8
	binutils-csl-coldfire-4_1-10:1.8
	binutils-csl-sourcerygxx-4_1-5:1.8
	binutils-csl-sourcerygxx-4_1-4:1.8
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.8
	binutils-csl-sourcerygxx-3_4_4-17:1.8
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.8.0.4
	binutils-2_17-branchpoint:1.8
	binutils-csl-2_17-branch:1.8.0.2
	binutils-csl-2_17-branchpoint:1.8
	binutils-csl-gxxpro-3_4-branch:1.5.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.10
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.8
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.5
	csl-arm-2004-q3:1.5
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	binutils-2_15-branch:1.5.0.6
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	csl-arm-2003-q4:1.5
	binutils-2_14:1.4
	binutils-2_14-branch:1.4.0.2
	binutils-2_14-branchpoint:1.4
	binutils-2_13_2_1:1.3
	binutils-2_13_2:1.3
	binutils-2_13_1:1.3
	binutils-2_13:1.3
	binutils-2_13-branchpoint:1.3
	binutils-2_13-branch:1.3.0.2
	binutils_latest_snapshot:1.14;
locks; strict;
comment	@ * @;


1.14
date	2010.12.10.08.51.47;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.15.17.10.15;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.02.07.22.31;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2008.03.28.06.49.44;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.27.11.54.09;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.18.14.16.51;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.08.14.17.38;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.00.03.32;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.14.12.20.16;	author aj;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.30.08.39.41;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.19.16.17.54;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.04.01.55.39;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.18.12.45.54;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* binemul.h (do_ar_emul_append): Declare.
	* binemul.c (any_ok): New function.
	(do_ar_emul_append): Rename from do_ar_emul_default_append.  Make
	global, add check arg.  Adjust callers.
	(ar_emul_default_replace): Tidy.
	* configure.tgt (powerpc-*-aix[5-9]*,rs6000-*-aix[5-9]*): Use
	bin_aix_emulation.
	* emul_aix.c (bin_aix5_emulation, ar_emul_aix_internal): Delete.
	(ar_emul_aix5_append, ar_emul_aix5_replace): Delete.
	(check_aix): New function.
	(ar_emul_aix_append, ar_emul_aix_replace): Rewrite.
@
text
@/* Binutils emulation layer.
   Copyright 2002, 2003, 2005, 2007, 2008, 2010
   Free Software Foundation, Inc.
   Written by Tom Rix, Red Hat Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "binemul.h"

extern bin_emulation_xfer_type bin_dummy_emulation;

void
ar_emul_usage (FILE *fp)
{
  if (bin_dummy_emulation.ar_usage)
    bin_dummy_emulation.ar_usage (fp);
}

void
ar_emul_default_usage (FILE *fp)
{
  AR_EMUL_USAGE_PRINT_OPTION_HEADER (fp);
  /* xgettext:c-format */
  fprintf (fp, _("  No emulation specific options\n"));
}

bfd_boolean
ar_emul_append (bfd **after_bfd, char *file_name, const char *target,
		bfd_boolean verbose, bfd_boolean flatten)
{
  if (bin_dummy_emulation.ar_append)
    return bin_dummy_emulation.ar_append (after_bfd, file_name, target,
					  verbose, flatten);

  return FALSE;
}

static bfd_boolean
any_ok (bfd *new_bfd ATTRIBUTE_UNUSED)
{
  return TRUE;
}

bfd_boolean
do_ar_emul_append (bfd **after_bfd, bfd *new_bfd,
		   bfd_boolean verbose, bfd_boolean flatten,
		   bfd_boolean (*check) (bfd *))
{
  /* When flattening, add the members of an archive instead of the
     archive itself.  */
  if (flatten && bfd_check_format (new_bfd, bfd_archive))
    {
      bfd *elt;
      bfd_boolean added = FALSE;

      for (elt = bfd_openr_next_archived_file (new_bfd, NULL);
           elt;
           elt = bfd_openr_next_archived_file (new_bfd, elt))
        {
          if (do_ar_emul_append (after_bfd, elt, verbose, TRUE, check))
            {
              added = TRUE;
              after_bfd = &((*after_bfd)->archive_next);
            }
        }

      return added;
    }

  if (!check (new_bfd))
    return FALSE;

  AR_EMUL_APPEND_PRINT_VERBOSE (verbose, new_bfd->filename);

  new_bfd->archive_next = *after_bfd;
  *after_bfd = new_bfd;

  return TRUE;
}

bfd_boolean
ar_emul_default_append (bfd **after_bfd, char *file_name,
			const char *target, bfd_boolean verbose,
			bfd_boolean flatten)
{
  bfd *new_bfd;

  new_bfd = bfd_openr (file_name, target);
  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);
  return do_ar_emul_append (after_bfd, new_bfd, verbose, flatten, any_ok);
}

bfd_boolean
ar_emul_replace (bfd **after_bfd, char *file_name, const char *target,
		 bfd_boolean verbose)
{
  if (bin_dummy_emulation.ar_replace)
    return bin_dummy_emulation.ar_replace (after_bfd, file_name,
					   target, verbose);

  return FALSE;
}

bfd_boolean
ar_emul_default_replace (bfd **after_bfd, char *file_name,
			 const char *target, bfd_boolean verbose)
{
  bfd *new_bfd;

  new_bfd = bfd_openr (file_name, target);
  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);

  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, file_name);

  new_bfd->archive_next = *after_bfd;
  *after_bfd = new_bfd;

  return TRUE;
}

bfd_boolean
ar_emul_parse_arg (char *arg)
{
  if (bin_dummy_emulation.ar_parse_arg)
    return bin_dummy_emulation.ar_parse_arg (arg);

  return FALSE;
}

bfd_boolean
ar_emul_default_parse_arg (char *arg ATTRIBUTE_UNUSED)
{
  return FALSE;
}
@


1.13
log
@Pass "plugin" as target for "ar --plugin" when opening a BFD file.

2010-09-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* ar.c (plugin_target): New.
	(main): Set plugin_target to "plugin" for --plugin.
	(open_inarch): Initialize target to plugin_target.
	(replace_members): Pass plugin_target to ar_emul_replace
	and ar_emul_append.

	* binemul.h (ar_emul_append): Add a target argument.
	(ar_emul_default_append): Likewise.
	(ar_emul_replace): Likewise.
	(ar_emul_default_replace): Likewise.
	(bin_emulation_xfer_struct): Add a target argument to
	ar_append and ar_replace.

	* binemul.c (ar_emul_append): Updated.  Pass target to bfd_openr.
	(do_ar_emul_default_append): Likewise.
	(ar_emul_default_append): Likewise.
	(ar_emul_replace): Likewise.
	(ar_emul_default_replace): Likewise.
@
text
@d2 2
a3 1
   Copyright 2002, 2003, 2005, 2007, 2008 Free Software Foundation, Inc.
d54 10
a63 3
do_ar_emul_default_append (bfd **after_bfd, bfd *new_bfd,
			   bfd_boolean verbose, bfd_boolean flatten)
  {
d75 1
a75 1
          if (do_ar_emul_default_append (after_bfd, elt, verbose, TRUE))
d85 3
d105 1
a105 1
  return do_ar_emul_default_append (after_bfd, new_bfd, verbose, flatten);
d123 1
a123 1
  bfd *temp;
d125 2
a126 2
  temp = *after_bfd;
  *after_bfd = bfd_openr (file_name, target);
a127 1
  AR_EMUL_ELEMENT_CHECK (*after_bfd, file_name);
d130 2
a131 1
  (*after_bfd)->archive_next = temp;
@


1.12
log
@update copyright dates
@
text
@d42 2
a43 2
ar_emul_append (bfd **after_bfd, char *file_name, bfd_boolean verbose,
                bfd_boolean flatten)
d46 2
a47 2
    return bin_dummy_emulation.ar_append (after_bfd, file_name, verbose,
                                          flatten);
d54 1
a54 1
			bfd_boolean verbose, bfd_boolean flatten)
d87 2
a88 1
			bfd_boolean verbose, bfd_boolean flatten)
d92 1
a92 1
  new_bfd = bfd_openr (file_name, NULL);
d98 2
a99 1
ar_emul_replace (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d102 2
a103 1
    return bin_dummy_emulation.ar_replace (after_bfd, file_name, verbose);
d110 1
a110 1
			 bfd_boolean verbose)
d115 1
a115 1
  *after_bfd = bfd_openr (file_name, NULL);
@


1.11
log
@Add support for thin archives.
    * bfd/archive.c (_bfd_find_nested_archive): New function.
    (get_extended_arelt_filename): Add origin parameter.
    (_bfd_generic_read_ar_hdr_mag): Deal with extended name
    combined with a file offset.
    (append_relative_path): New function.
    (_bfd_get_elt_at_filepos): Deal with external members and
    nested archives.
    (bfd_generic_openr_next_archived_file): Thin archives.
    (bfd_generic_archive_p): Recognize new magic string.
    (adjust_relative_path): New function.
    (_bfd_construct_extended_name_table): Construct extended
    names for thin archive members.
    (_bfd_write_archive_contents): Emit new magic string, skip
    copying files for thin archives.
    * bfd/bfd-in.h (bfd_is_thin_archive): New macro.
    * bfd/bfd.c (struct bfd): New fields for thin archives.
    * bfd/libbfd-in.h (struct areltdata): New field for thin archives.
    * bfd/opncls.c (bfd_close): Delete BFDs for nested archives.
    * binutils/ar.c (make_thin_archive): New global flag.
    (map_over_members): Deal with full pathnames in thin archives.
    (usage, main): Add 'T' option for building thin archives.
    (replace_members): Pass thin archive flag to ar_emul_append.
    * binutils/arsup.c (ar_open): Initialize new flag.
    * binutils/binemul.c (ar_emul_append): Add new parameter for
    flattening nested archives.
    (do_ar_emul_default_append): New function.
    (ar_emul_default_append): Factored out recursive code.
    * binutils/binemul.h (ar_emul_default_append): Add new parameter.
    (struct bin_emulation_xfer_struct): New parameter for ar_append.
    * binutils/dlltool.c (gen_lib_file): Initialize thin archive flag.
    * binutils/emul_aix.c (ar_emul_aix_internal): Add new flatten
    parameter, currently unimplemented.
    All callers changed.
    * binutils/objcopy.c (copy_archive): Preserve thin archive flag.
    * binutils/doc/binutils.texi: Update ar documentation.
    * binutils/testsuite/binutils-all/ar.exp: Add thin archive tests.
    * include/aout/ar.h (ARMAGT): New magic string for thin archives.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2007, 2008 Free Software Foundation, Inc.
@


1.10
log
@Change sources over to using GPLv3
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2007 Free Software Foundation, Inc.
d42 2
a43 1
ar_emul_append (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d46 2
a47 1
    return bin_dummy_emulation.ar_append (after_bfd, file_name, verbose);
d52 21
a72 5
bfd_boolean
ar_emul_default_append (bfd **after_bfd, char *file_name,
			bfd_boolean verbose)
{
  bfd *temp;
d74 2
a75 2
  temp = *after_bfd;
  *after_bfd = bfd_openr (file_name, NULL);
d77 1
a77 2
  AR_EMUL_ELEMENT_CHECK (*after_bfd, file_name);
  AR_EMUL_APPEND_PRINT_VERBOSE (verbose, file_name);
d79 2
a80 1
  (*after_bfd)->archive_next = temp;
d86 11
@


1.9
log
@bfd/
	* bfd.c (struct bfd): Rename "next" to "archive_next".
	* archive.c: Rename uses throughout file.
	* archive64.c: Likewise.
	* coff-rs6000.c: Likewise.
	* ecoff.c: Likewise.
	* som.c: Likewise.
	* bfd-in2.h: Regenerate.
binutils/
	* ar.c: Rename uses of bfd.next to bfd.archive_next throughout.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* objcopy.c: Likewise.
	* dlltool.c: Likewise.
ld/
	* pe-dll.c: Rename uses of bfd.next to bfd.archive_next throughout.
@
text
@d2 1
a2 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d19 2
a20 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.8
log
@Fix spelling of Red Hat
@
text
@d61 1
a61 1
  (*after_bfd)->next = temp;
d87 1
a87 1
  (*after_bfd)->next = temp;
@


1.7
log
@Update FSF address
@
text
@d3 1
a3 1
   Written by Tom Rix, Redhat.
@


1.6
log
@	* ar.c (mri_mode): Make static.
	* arsup.c (obfd, real_name, outfile): Likewise.
	* binemul.c (ar_emul_create): Remove unused function.
	(ar_emul_default_create): Likewise.
	* binemul.h (ar_emul_create): Remove declaration.
	(ar_emul_default_create): Likewise.
	(struct bin_emulation_xfer_struct): Remove ar_create member.
	* bucomm.c (report): Make static.
	* bucomm.h (report): Remove declaration.
	* cxxfilt.c (mbuffer): Make static.
	(main): Use unsigned ints for some loop control variables.
	* readelf.c: Make many global variables static.
	* size.c (berkeley_format): Make static.
	(long_options): Likewise.
	* emul_aix.c (bin_aix_emulation): Remove ar_emul_default_create
	structure initialiser.
	(bin_aix5_emulation): Likewise.
	* emul_vanilla.c (bin_vanilla_emulation): Likewise.
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.5
log
@	* addr2line.c: Convert to ISO C90 prototypes, change PTR, remove
	unneeded (void *) casts.
	* ar.c: Likewise.
	* arlex.l: Likewise.
	* arparse.y: Likewise.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* bucomm.h: Likewise.
	* budbg.h: Likewise.
	* budemang.c: Likewise.
	* budemang.h: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* cxxfilt.c: Likewise.
	* debug.c: Likewise.
	* debug.h: Likewise.
	* deflex.l: Likewise.
	* dlltool.c: Likewise.
	* dlltool.h: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* filemode.c: Likewise.
	* ieee.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmconv.h: Likewise.
	* nlmheader.y: Likewise.
	* nm.c: Likewise.
	* prdbg.c: Likewise.
	* rclex.l: Likewise.
	* rcparse.y: Likewise.
	* rdcoff.c: Likewise.
	* rddbg.c: Likewise.
	* rename.c: Likewise.
	* resbin.c: Likewise.
	* rescoff.c: Likewise.
	* resrc.c: Likewise.
	* size.c: Likewise.
	* srconv.c: Likewise.
	* stabs.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* sysinfo.y: Likewise.
	* syslex.l: Likewise.
	* unwind-ia64.c: Likewise.
	* unwind-ia64.h: Likewise.
	* version.c: Likewise.
	* windres.c: Likewise.
	* windres.h: Likewise.
	* winduni.c: Likewise.
	* wrstabs.c: Likewise.
@
text
@a92 41
ar_emul_create (bfd **abfd_out, char *archive_file_name, char *file_name)
{
  if (bin_dummy_emulation.ar_create)
    return bin_dummy_emulation.ar_create (abfd_out, archive_file_name,
					  file_name);

  return FALSE;
}

bfd_boolean
ar_emul_default_create (bfd **abfd_out, char *archive_file_name,
			char *file_name)
{
  char *target = NULL;

  /* Try to figure out the target to use for the archive from the
     first object on the list.  */
  if (file_name != NULL)
    {
      bfd *obj;

      obj = bfd_openr (file_name, NULL);
      if (obj != NULL)
	{
	  if (bfd_check_format (obj, bfd_object))
	    target = bfd_get_target (obj);
	  (void) bfd_close (obj);
	}
    }

  /* Create an empty archive.  */
  *abfd_out = bfd_openw (archive_file_name, target);
  if (*abfd_out == NULL
      || ! bfd_set_format (*abfd_out, bfd_archive)
      || ! bfd_close (*abfd_out))
    bfd_fatal (archive_file_name);

  return TRUE;
}

bfd_boolean
@


1.4
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 2002 Free Software Foundation, Inc.
d26 1
a26 2
ar_emul_usage (fp)
     FILE *fp;
d33 1
a33 2
ar_emul_default_usage (fp)
     FILE *fp;
d41 1
a41 4
ar_emul_append (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d50 2
a51 4
ar_emul_default_append (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d67 1
a67 4
ar_emul_replace (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d76 2
a77 4
ar_emul_default_replace (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d93 1
a93 4
ar_emul_create (abfd_out, archive_file_name, file_name)
     bfd **abfd_out;
     char *archive_file_name;
     char *file_name;
d103 2
a104 4
ar_emul_default_create (abfd_out, archive_file_name, file_name)
     bfd **abfd_out;
     char *archive_file_name;
     char *file_name;
d134 1
a134 2
ar_emul_parse_arg (arg)
     char *arg;
d143 1
a143 2
ar_emul_default_parse_arg (arg)
     char *arg ATTRIBUTE_UNUSED;
@


1.3
log
@	* addr2line.c: Fix formatting.
	* ar.c: Likewise.
	* arsup.c: Likewise.
	* arsup.h: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* coffgrok.h: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 2002 Free Software Foundation, Inc.
d42 1
a42 1
boolean
d46 1
a46 1
     boolean verbose;
d51 1
a51 1
  return false;
d54 1
a54 1
boolean
d58 1
a58 1
     boolean verbose;
d70 1
a70 1
  return true;
d73 1
a73 1
boolean
d77 1
a77 1
     boolean verbose;
d82 1
a82 1
  return false;
d85 1
a85 1
boolean
d89 1
a89 1
     boolean verbose;
d101 1
a101 1
  return true;
d104 1
a104 1
boolean
d114 1
a114 1
  return false;
d117 1
a117 1
boolean
d147 1
a147 1
  return true;
d150 1
a150 1
boolean
d157 1
a157 1
  return false;
d160 1
a160 1
boolean
d164 1
a164 1
  return false;
@


1.2
log
@	* ar.c (replace_members): Remove unused var.  Formatting fix.
	* binemul.c (ar_emul_default_parse_arg): Add ATTRIBUTE_UNUSED.
@
text
@d111 1
a111 1
    return bin_dummy_emulation.ar_create (abfd_out, archive_file_name, 
@


1.1
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d162 1
a162 1
     char *arg;
@

