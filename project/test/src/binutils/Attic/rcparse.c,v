head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.2
	binutils-2_13_2:1.1.8.2
	binutils-2_13_1:1.1.8.2
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.2
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.2
	binutils-2_11_1:1.1.4.2
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2000.05.29.14.08.52;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.52;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.40.35;	author pb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.06.10.15.37.28;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.01.01;	author drow;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.05.11.20.00.49;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.45;	author drow;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.30.17.02.38;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.07;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.16;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.45;	author drow;	state Exp;
branches
	1.1.14.1.4.1;
next	;

1.1.14.1.4.1
date	2006.03.16.20.02.29;	author carlos;	state dead;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.41;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.19;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.15;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.01;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.27;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file rcparse.c was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 4659
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BEG = 258,
     END = 259,
     ACCELERATORS = 260,
     VIRTKEY = 261,
     ASCII = 262,
     NOINVERT = 263,
     SHIFT = 264,
     CONTROL = 265,
     ALT = 266,
     BITMAP = 267,
     CURSOR = 268,
     DIALOG = 269,
     DIALOGEX = 270,
     EXSTYLE = 271,
     CAPTION = 272,
     CLASS = 273,
     STYLE = 274,
     AUTO3STATE = 275,
     AUTOCHECKBOX = 276,
     AUTORADIOBUTTON = 277,
     CHECKBOX = 278,
     COMBOBOX = 279,
     CTEXT = 280,
     DEFPUSHBUTTON = 281,
     EDITTEXT = 282,
     GROUPBOX = 283,
     LISTBOX = 284,
     LTEXT = 285,
     PUSHBOX = 286,
     PUSHBUTTON = 287,
     RADIOBUTTON = 288,
     RTEXT = 289,
     SCROLLBAR = 290,
     STATE3 = 291,
     USERBUTTON = 292,
     BEDIT = 293,
     HEDIT = 294,
     IEDIT = 295,
     FONT = 296,
     ICON = 297,
     ANICURSOR = 298,
     ANIICON = 299,
     DLGINCLUDE = 300,
     DLGINIT = 301,
     FONTDIR = 302,
     HTML = 303,
     MANIFEST = 304,
     PLUGPLAY = 305,
     VXD = 306,
     TOOLBAR = 307,
     BUTTON = 308,
     LANGUAGE = 309,
     CHARACTERISTICS = 310,
     VERSIONK = 311,
     MENU = 312,
     MENUEX = 313,
     MENUITEM = 314,
     SEPARATOR = 315,
     POPUP = 316,
     CHECKED = 317,
     GRAYED = 318,
     HELP = 319,
     INACTIVE = 320,
     MENUBARBREAK = 321,
     MENUBREAK = 322,
     MESSAGETABLE = 323,
     RCDATA = 324,
     STRINGTABLE = 325,
     VERSIONINFO = 326,
     FILEVERSION = 327,
     PRODUCTVERSION = 328,
     FILEFLAGSMASK = 329,
     FILEFLAGS = 330,
     FILEOS = 331,
     FILETYPE = 332,
     FILESUBTYPE = 333,
     BLOCKSTRINGFILEINFO = 334,
     BLOCKVARFILEINFO = 335,
     VALUE = 336,
     BLOCK = 337,
     MOVEABLE = 338,
     FIXED = 339,
     PURE = 340,
     IMPURE = 341,
     PRELOAD = 342,
     LOADONCALL = 343,
     DISCARDABLE = 344,
     NOT = 345,
     QUOTEDUNISTRING = 346,
     QUOTEDSTRING = 347,
     STRING = 348,
     NUMBER = 349,
     SIZEDUNISTRING = 350,
     SIZEDSTRING = 351,
     IGNORED_TOKEN = 352,
     NEG = 353
   };
#endif
/* Tokens.  */
#define BEG 258
#define END 259
#define ACCELERATORS 260
#define VIRTKEY 261
#define ASCII 262
#define NOINVERT 263
#define SHIFT 264
#define CONTROL 265
#define ALT 266
#define BITMAP 267
#define CURSOR 268
#define DIALOG 269
#define DIALOGEX 270
#define EXSTYLE 271
#define CAPTION 272
#define CLASS 273
#define STYLE 274
#define AUTO3STATE 275
#define AUTOCHECKBOX 276
#define AUTORADIOBUTTON 277
#define CHECKBOX 278
#define COMBOBOX 279
#define CTEXT 280
#define DEFPUSHBUTTON 281
#define EDITTEXT 282
#define GROUPBOX 283
#define LISTBOX 284
#define LTEXT 285
#define PUSHBOX 286
#define PUSHBUTTON 287
#define RADIOBUTTON 288
#define RTEXT 289
#define SCROLLBAR 290
#define STATE3 291
#define USERBUTTON 292
#define BEDIT 293
#define HEDIT 294
#define IEDIT 295
#define FONT 296
#define ICON 297
#define ANICURSOR 298
#define ANIICON 299
#define DLGINCLUDE 300
#define DLGINIT 301
#define FONTDIR 302
#define HTML 303
#define MANIFEST 304
#define PLUGPLAY 305
#define VXD 306
#define TOOLBAR 307
#define BUTTON 308
#define LANGUAGE 309
#define CHARACTERISTICS 310
#define VERSIONK 311
#define MENU 312
#define MENUEX 313
#define MENUITEM 314
#define SEPARATOR 315
#define POPUP 316
#define CHECKED 317
#define GRAYED 318
#define HELP 319
#define INACTIVE 320
#define MENUBARBREAK 321
#define MENUBREAK 322
#define MESSAGETABLE 323
#define RCDATA 324
#define STRINGTABLE 325
#define VERSIONINFO 326
#define FILEVERSION 327
#define PRODUCTVERSION 328
#define FILEFLAGSMASK 329
#define FILEFLAGS 330
#define FILEOS 331
#define FILETYPE 332
#define FILESUBTYPE 333
#define BLOCKSTRINGFILEINFO 334
#define BLOCKVARFILEINFO 335
#define VALUE 336
#define BLOCK 337
#define MOVEABLE 338
#define FIXED 339
#define PURE 340
#define IMPURE 341
#define PRELOAD 342
#define LOADONCALL 343
#define DISCARDABLE 344
#define NOT 345
#define QUOTEDUNISTRING 346
#define QUOTEDSTRING 347
#define STRING 348
#define NUMBER 349
#define SIZEDUNISTRING 350
#define SIZEDSTRING 351
#define IGNORED_TOKEN 352
#define NEG 353




/* Copy the first part of user declarations.  */
#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008,
   2011  Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.
   Extended by Kai Tietz, Onevision.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */


/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "sysdep.h"
#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static rc_res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static rc_dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static rc_uint_type base_style;
static rc_uint_type default_style;
static rc_res_id class;
static rc_res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const rc_res_id res_null_text = { 1, {{0, &null_unichar}}};



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 69 "rcparse.y"
{
  rc_accelerator acc;
  rc_accelerator *pacc;
  rc_dialog_control *dialog_control;
  rc_menuitem *menuitem;
  struct
  {
    rc_rcdata_item *first;
    rc_rcdata_item *last;
  } rcdata;
  rc_rcdata_item *rcdata_item;
  rc_fixed_versioninfo *fixver;
  rc_ver_info *verinfo;
  rc_ver_stringtable *verstringtable;
  rc_ver_stringinfo *verstring;
  rc_ver_varinfo *vervar;
  rc_toolbar_item *toobar_item;
  rc_res_id id;
  rc_res_res_info res_info;
  struct
  {
    rc_uint_type on;
    rc_uint_type off;
  } memflags;
  struct
  {
    rc_uint_type val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  rc_uint_type il;
  rc_uint_type is;
  const char *s;
  struct
  {
    rc_uint_type length;
    const char *s;
  } ss;
  unichar *uni;
  struct
  {
    rc_uint_type length;
    const unichar *s;
  } suni;
}
/* Line 193 of yacc.c.  */
#line 405 "rcparse.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 418 "rcparse.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   810

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  102
/* YYNRULES -- Number of rules.  */
#define YYNRULES  276
/* YYNRULES -- Number of states.  */
#define YYNSTATES  520

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   353

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   105,   100,     2,
     110,   111,   103,   101,   108,   102,     2,   104,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   109,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    99,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    98,     2,   106,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,   107
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    49,    56,
      57,    60,    63,    68,    70,    72,    74,    78,    81,    83,
      85,    87,    89,    91,    93,    98,   103,   104,   118,   119,
     133,   134,   149,   150,   154,   155,   159,   163,   167,   171,
     175,   181,   188,   196,   205,   209,   213,   218,   222,   223,
     226,   227,   232,   233,   238,   239,   244,   245,   250,   251,
     256,   257,   261,   273,   286,   287,   292,   293,   298,   299,
     303,   304,   309,   310,   315,   322,   331,   342,   354,   355,
     360,   361,   365,   366,   371,   372,   377,   378,   383,   384,
     389,   390,   395,   396,   400,   401,   406,   407,   423,   430,
     439,   449,   452,   453,   456,   458,   460,   461,   465,   466,
     470,   471,   475,   476,   480,   485,   490,   494,   501,   502,
     505,   510,   513,   520,   521,   525,   528,   530,   532,   534,
     536,   538,   540,   547,   548,   551,   554,   558,   564,   567,
     573,   580,   588,   598,   603,   604,   607,   608,   610,   612,
     614,   616,   620,   624,   628,   631,   632,   639,   640,   644,
     649,   652,   654,   656,   658,   660,   662,   664,   666,   668,
     670,   672,   679,   684,   693,   694,   698,   701,   708,   709,
     716,   723,   727,   731,   735,   739,   743,   744,   750,   758,
     759,   765,   766,   772,   773,   777,   779,   781,   783,   785,
     788,   790,   793,   794,   797,   801,   806,   810,   811,   814,
     815,   818,   820,   822,   824,   826,   828,   830,   832,   834,
     836,   838,   841,   843,   845,   847,   849,   851,   854,   856,
     859,   861,   864,   866,   869,   873,   878,   880,   884,   885,
     887,   890,   892,   894,   898,   901,   904,   908,   912,   916,
     920,   924,   928,   932,   936,   939,   941,   943,   947,   950,
     954,   958,   962,   966,   970,   974,   978
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     113,     0,    -1,    -1,   113,   114,    -1,   113,   120,    -1,
     113,   121,    -1,   113,   122,    -1,   113,   162,    -1,   113,
     163,    -1,   113,   164,    -1,   113,   165,    -1,   113,   170,
      -1,   113,   173,    -1,   113,   178,    -1,   113,   183,    -1,
     113,   182,    -1,   113,   185,    -1,   113,    97,    -1,   191,
       5,   194,     3,   115,     4,    -1,    -1,   115,   116,    -1,
     117,   211,    -1,   117,   211,   108,   118,    -1,    92,    -1,
     212,    -1,   119,    -1,   118,   108,   119,    -1,   118,   119,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,   191,    12,   196,   198,    -1,   191,    13,
     195,   198,    -1,    -1,   191,    14,   196,   126,   212,   208,
     208,   208,   123,   127,     3,   128,     4,    -1,    -1,   191,
      15,   196,   126,   212,   208,   208,   208,   124,   127,     3,
     128,     4,    -1,    -1,   191,    15,   196,   126,   212,   208,
     208,   208,   208,   125,   127,     3,   128,     4,    -1,    -1,
      16,   109,   209,    -1,    -1,   127,    17,   199,    -1,   127,
      18,   191,    -1,   127,    19,   205,    -1,   127,    16,   209,
      -1,   127,    18,   199,    -1,   127,    41,   209,   108,   199,
      -1,   127,    41,   209,   108,   199,   208,    -1,   127,    41,
     209,   108,   199,   208,   208,    -1,   127,    41,   209,   108,
     199,   208,   208,   208,    -1,   127,    57,   191,    -1,   127,
      55,   209,    -1,   127,    54,   209,   208,    -1,   127,    56,
     209,    -1,    -1,   128,   129,    -1,    -1,    20,   153,   130,
     151,    -1,    -1,    21,   153,   131,   151,    -1,    -1,    22,
     153,   132,   151,    -1,    -1,    38,   153,   133,   151,    -1,
      -1,    23,   153,   134,   151,    -1,    -1,    24,   135,   151,
      -1,    10,   153,   209,   152,   156,   208,   208,   208,   208,
     207,   155,    -1,    10,   153,   209,   152,   156,   208,   208,
     208,   208,   208,   208,   155,    -1,    -1,    25,   153,   136,
     151,    -1,    -1,    26,   153,   137,   151,    -1,    -1,    27,
     138,   151,    -1,    -1,    28,   153,   139,   151,    -1,    -1,
      39,   153,   140,   151,    -1,    42,   193,   209,   208,   208,
     155,    -1,    42,   193,   209,   208,   208,   208,   208,   155,
      -1,    42,   193,   209,   208,   208,   208,   208,   158,   207,
     155,    -1,    42,   193,   209,   208,   208,   208,   208,   158,
     208,   208,   155,    -1,    -1,    40,   153,   141,   151,    -1,
      -1,    29,   142,   151,    -1,    -1,    30,   153,   143,   151,
      -1,    -1,    31,   153,   144,   151,    -1,    -1,    32,   153,
     145,   151,    -1,    -1,    33,   153,   146,   151,    -1,    -1,
      34,   153,   147,   151,    -1,    -1,    35,   148,   151,    -1,
      -1,    36,   153,   149,   151,    -1,    -1,    37,   193,   209,
     108,   209,   108,   209,   108,   209,   108,   209,   108,   150,
     205,   207,    -1,   209,   208,   208,   208,   208,   155,    -1,
     209,   208,   208,   208,   208,   160,   207,   155,    -1,   209,
     208,   208,   208,   208,   160,   208,   208,   155,    -1,   108,
     154,    -1,    -1,   154,   108,    -1,   212,    -1,   199,    -1,
      -1,     3,   174,     4,    -1,    -1,   108,   157,   205,    -1,
      -1,   108,   159,   205,    -1,    -1,   108,   161,   205,    -1,
     191,    41,   195,   198,    -1,   191,    42,   195,   198,    -1,
      54,   209,   208,    -1,   191,    57,   194,     3,   166,     4,
      -1,    -1,   166,   167,    -1,    59,   199,   208,   168,    -1,
      59,    60,    -1,    61,   199,   168,     3,   166,     4,    -1,
      -1,   168,   108,   169,    -1,   168,   169,    -1,    62,    -1,
      63,    -1,    64,    -1,    65,    -1,    66,    -1,    67,    -1,
     191,    58,   194,     3,   171,     4,    -1,    -1,   171,   172,
      -1,    59,   199,    -1,    59,   199,   208,    -1,    59,   199,
     208,   208,   207,    -1,    59,    60,    -1,    61,   199,     3,
     171,     4,    -1,    61,   199,   208,     3,   171,     4,    -1,
      61,   199,   208,   208,     3,   171,     4,    -1,    61,   199,
     208,   208,   208,   207,     3,   171,     4,    -1,   191,    68,
     196,   198,    -1,    -1,   175,   176,    -1,    -1,   177,    -1,
     203,    -1,   204,    -1,   210,    -1,   177,   108,   203,    -1,
     177,   108,   204,    -1,   177,   108,   210,    -1,   177,   108,
      -1,    -1,    70,   194,     3,   179,   180,     4,    -1,    -1,
     180,   209,   202,    -1,   180,   209,   108,   202,    -1,   180,
       1,    -1,   191,    -1,    48,    -1,    69,    -1,    49,    -1,
      50,    -1,    51,    -1,    45,    -1,    46,    -1,    43,    -1,
      44,    -1,   191,   181,   194,     3,   174,     4,    -1,   191,
     181,   194,   198,    -1,   191,    52,   194,   209,   208,     3,
     184,     4,    -1,    -1,   184,    53,   191,    -1,   184,    60,
      -1,   191,    71,   186,     3,   187,     4,    -1,    -1,   186,
      72,   209,   208,   208,   208,    -1,   186,    73,   209,   208,
     208,   208,    -1,   186,    74,   209,    -1,   186,    75,   209,
      -1,   186,    76,   209,    -1,   186,    77,   209,    -1,   186,
      78,   209,    -1,    -1,   187,    79,     3,   188,     4,    -1,
     187,    80,     3,    81,   199,   190,     4,    -1,    -1,   188,
      82,     3,   189,     4,    -1,    -1,   189,    81,   199,   108,
     199,    -1,    -1,   190,   208,   208,    -1,   212,    -1,   192,
      -1,   200,    -1,    93,    -1,   212,   108,    -1,   192,    -1,
     192,   108,    -1,    -1,   194,   197,    -1,   194,    55,   209,
      -1,   194,    54,   209,   208,    -1,   194,    56,   209,    -1,
      -1,   195,   197,    -1,    -1,   196,   197,    -1,    83,    -1,
      84,    -1,    85,    -1,    86,    -1,    87,    -1,    88,    -1,
      89,    -1,    92,    -1,    93,    -1,   200,    -1,   199,   200,
      -1,    91,    -1,    92,    -1,   204,    -1,   203,    -1,   201,
      -1,   202,   201,    -1,    96,    -1,   203,    96,    -1,    95,
      -1,   204,    95,    -1,   206,    -1,    90,   206,    -1,   205,
      98,   206,    -1,   205,    98,    90,   206,    -1,    94,    -1,
     110,   209,   111,    -1,    -1,   208,    -1,   108,   209,    -1,
     210,    -1,    94,    -1,   110,   210,   111,    -1,   106,   210,
      -1,   102,   210,    -1,   210,   103,   210,    -1,   210,   104,
     210,    -1,   210,   105,   210,    -1,   210,   101,   210,    -1,
     210,   102,   210,    -1,   210,   100,   210,    -1,   210,    99,
     210,    -1,   210,    98,   210,    -1,   108,   212,    -1,   213,
      -1,    94,    -1,   110,   210,   111,    -1,   106,   210,    -1,
     213,   103,   210,    -1,   213,   104,   210,    -1,   213,   105,
     210,    -1,   213,   101,   210,    -1,   213,   102,   210,    -1,
     213,   100,   210,    -1,   213,    99,   210,    -1,   213,    98,
     210,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   179,   179,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   201,   212,
     215,   236,   241,   253,   273,   283,   287,   292,   299,   303,
     308,   312,   316,   320,   329,   341,   355,   353,   380,   378,
     407,   405,   437,   440,   446,   448,   454,   458,   463,   467,
     471,   484,   499,   514,   529,   533,   537,   541,   547,   549,
     561,   560,   573,   572,   585,   584,   597,   596,   612,   611,
     624,   623,   637,   648,   658,   657,   670,   669,   682,   681,
     694,   693,   706,   705,   720,   725,   731,   737,   744,   743,
     759,   758,   771,   770,   783,   782,   794,   793,   806,   805,
     818,   817,   830,   829,   842,   841,   855,   853,   874,   885,
     896,   908,   919,   922,   926,   931,   941,   944,   954,   953,
     960,   959,   966,   965,   973,   985,   998,  1007,  1018,  1021,
    1038,  1042,  1046,  1054,  1057,  1061,  1068,  1072,  1076,  1080,
    1084,  1088,  1097,  1108,  1111,  1128,  1132,  1136,  1140,  1144,
    1148,  1152,  1156,  1166,  1179,  1179,  1191,  1195,  1202,  1210,
    1218,  1226,  1235,  1244,  1253,  1263,  1262,  1267,  1269,  1274,
    1279,  1287,  1291,  1296,  1301,  1306,  1311,  1316,  1321,  1326,
    1331,  1342,  1349,  1359,  1365,  1366,  1385,  1410,  1421,  1426,
    1432,  1438,  1443,  1448,  1453,  1458,  1473,  1476,  1480,  1488,
    1491,  1499,  1502,  1510,  1513,  1522,  1527,  1536,  1540,  1550,
    1555,  1559,  1570,  1576,  1582,  1587,  1592,  1603,  1608,  1620,
    1625,  1637,  1642,  1647,  1652,  1657,  1662,  1667,  1677,  1681,
    1689,  1694,  1709,  1713,  1722,  1726,  1738,  1743,  1759,  1763,
    1775,  1779,  1801,  1805,  1809,  1813,  1820,  1824,  1834,  1837,
    1846,  1855,  1864,  1868,  1872,  1877,  1882,  1887,  1892,  1897,
    1902,  1907,  1912,  1917,  1928,  1937,  1948,  1952,  1956,  1961,
    1966,  1971,  1976,  1981,  1986,  1991,  1996
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BEG", "END", "ACCELERATORS", "VIRTKEY",
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR",
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE",
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX",
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT",
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3",
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "ANICURSOR",
  "ANIICON", "DLGINCLUDE", "DLGINIT", "FONTDIR", "HTML", "MANIFEST",
  "PLUGPLAY", "VXD", "TOOLBAR", "BUTTON", "LANGUAGE", "CHARACTERISTICS",
  "VERSIONK", "MENU", "MENUEX", "MENUITEM", "SEPARATOR", "POPUP",
  "CHECKED", "GRAYED", "HELP", "INACTIVE", "MENUBARBREAK", "MENUBREAK",
  "MESSAGETABLE", "RCDATA", "STRINGTABLE", "VERSIONINFO", "FILEVERSION",
  "PRODUCTVERSION", "FILEFLAGSMASK", "FILEFLAGS", "FILEOS", "FILETYPE",
  "FILESUBTYPE", "BLOCKSTRINGFILEINFO", "BLOCKVARFILEINFO", "VALUE",
  "BLOCK", "MOVEABLE", "FIXED", "PURE", "IMPURE", "PRELOAD", "LOADONCALL",
  "DISCARDABLE", "NOT", "QUOTEDUNISTRING", "QUOTEDSTRING", "STRING",
  "NUMBER", "SIZEDUNISTRING", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'",
  "'&'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='",
  "'('", "')'", "$accept", "input", "accelerator", "acc_entries",
  "acc_entry", "acc_event", "acc_options", "acc_option", "bitmap",
  "cursor", "dialog", "@@1", "@@2", "@@3", "exstyle", "styles", "controls",
  "control", "@@4", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10", "@@11", "@@12",
  "@@13", "@@14", "@@15", "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22",
  "@@23", "@@24", "control_params", "cresid", "optresidc", "resid",
  "opt_control_data", "control_styleexpr", "@@25", "icon_styleexpr", "@@26",
  "control_params_styleexpr", "@@27", "font", "icon", "language", "menu",
  "menuitems", "menuitem", "menuitem_flags", "menuitem_flag", "menuex",
  "menuexitems", "menuexitem", "messagetable", "optrcdata_data", "@@28",
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", "string_data",
  "rcdata_id", "user", "toolbar", "toolbar_data", "versioninfo",
  "fixedverinfo", "verblocks", "verstringtables", "vervals", "vertrans",
  "id", "resname", "resref", "suboptions", "memflags_move_discard",
  "memflags_move", "memflag", "file_name", "res_unicode_string_concat",
  "res_unicode_string", "res_unicode_sizedstring",
  "res_unicode_sizedstring_concat", "sizedstring", "sizedunistring",
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr",
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   124,    94,
      38,    43,    45,    42,    47,    37,   126,   353,    44,    61,
      40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   113,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   118,   119,   119,
     119,   119,   119,   119,   120,   121,   123,   122,   124,   122,
     125,   122,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
     130,   129,   131,   129,   132,   129,   133,   129,   134,   129,
     135,   129,   129,   129,   136,   129,   137,   129,   138,   129,
     139,   129,   140,   129,   129,   129,   129,   129,   141,   129,
     142,   129,   143,   129,   144,   129,   145,   129,   146,   129,
     147,   129,   148,   129,   149,   129,   150,   129,   151,   151,
     151,   152,   153,   153,   154,   154,   155,   155,   157,   156,
     159,   158,   161,   160,   162,   163,   164,   165,   166,   166,
     167,   167,   167,   168,   168,   168,   169,   169,   169,   169,
     169,   169,   170,   171,   171,   172,   172,   172,   172,   172,
     172,   172,   172,   173,   175,   174,   176,   176,   177,   177,
     177,   177,   177,   177,   177,   179,   178,   180,   180,   180,
     180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   182,   182,   183,   184,   184,   184,   185,   186,   186,
     186,   186,   186,   186,   186,   186,   187,   187,   187,   188,
     188,   189,   189,   190,   190,   191,   191,   192,   192,   193,
     193,   193,   194,   194,   194,   194,   194,   195,   195,   196,
     196,   197,   197,   197,   197,   197,   197,   197,   198,   198,
     199,   199,   200,   200,   201,   201,   202,   202,   203,   203,
     204,   204,   205,   205,   205,   205,   206,   206,   207,   207,
     208,   209,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   211,   212,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     3,     3,     3,
       5,     6,     7,     8,     3,     3,     4,     3,     0,     2,
       0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     3,    11,    12,     0,     4,     0,     4,     0,     3,
       0,     4,     0,     4,     6,     8,    10,    11,     0,     4,
       0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     4,     0,     3,     0,     4,     0,    15,     6,     8,
       9,     2,     0,     2,     1,     1,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     0,     2,     0,     1,     1,     1,
       1,     3,     3,     3,     2,     0,     6,     0,     3,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     6,     4,     8,     0,     3,     2,     6,     0,     6,
       6,     3,     3,     3,     3,     3,     0,     5,     7,     0,
       5,     0,     5,     0,     3,     1,     1,     1,     1,     2,
       1,     2,     0,     2,     3,     4,     3,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     3,     4,     1,     3,     0,     1,
       2,     1,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     1,     1,     3,     2,     3,
       3,     3,     3,     3,     3,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       2,     0,     1,     0,   212,   232,   233,   208,   266,    17,
       0,     0,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    15,    14,    16,     0,   206,   207,   205,
     265,   252,     0,     0,     0,     0,   251,     0,   268,     0,
     212,   219,   217,   219,   219,   217,   217,   179,   180,   177,
     178,   172,   174,   175,   176,   212,   212,   212,   219,   173,
     188,   212,   171,     0,     0,     0,     0,     0,     0,     0,
       0,   255,   254,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,   221,   222,
     223,   224,   225,   226,   227,   213,   267,     0,     0,     0,
      42,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     276,   275,   274,   272,   273,   269,   270,   271,   253,   250,
     263,   262,   261,   259,   260,   256,   257,   258,   167,     0,
     214,   216,    19,   228,   229,   220,    34,   218,    35,     0,
       0,     0,   124,   125,     0,   128,   143,   153,   196,     0,
       0,     0,     0,     0,     0,     0,   154,   182,     0,   215,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     191,   192,   193,   194,   195,     0,   156,   170,   166,     0,
      18,    23,    20,     0,    24,    43,     0,     0,   184,   127,
       0,     0,   129,   142,     0,     0,   144,   187,     0,     0,
       0,     0,   181,   240,   238,   155,   157,   158,   159,   160,
       0,   236,   168,   235,   234,     0,    21,     0,     0,     0,
     131,     0,   230,   133,   148,   145,     0,   199,     0,     0,
       0,   164,   239,   241,   169,   237,   264,     0,    36,    38,
     183,     0,   186,   231,   133,     0,   146,   143,     0,     0,
       0,   189,   190,   161,   162,   163,    28,    29,    30,    31,
      32,    33,    22,    25,    44,    44,    40,   185,   130,   128,
     136,   137,   138,   139,   140,   141,     0,   135,   248,     0,
     143,     0,   197,     0,   203,     0,    27,     0,     0,    44,
       0,   134,   147,   249,   149,     0,   143,   248,   201,     0,
      26,    58,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    58,     0,   132,   150,     0,     0,     0,   198,     0,
       0,    48,    45,    46,    49,   207,     0,   246,     0,    47,
     242,     0,     0,    55,    57,    54,     0,    58,   151,   143,
     200,     0,   204,    37,   112,   112,   112,   112,   112,    70,
     112,   112,    78,   112,    90,   112,   112,   112,   112,   112,
     102,   112,     0,   112,   112,   112,     0,    59,   243,     0,
       0,     0,    56,    39,     0,     0,     0,     0,     0,   115,
     114,    60,    62,    64,    68,     0,    74,    76,     0,    80,
       0,    92,    94,    96,    98,   100,     0,   104,   210,     0,
       0,    66,    82,    88,     0,   247,     0,   244,    50,    41,
     152,     0,     0,   113,     0,     0,     0,     0,    71,     0,
       0,     0,    79,     0,    91,     0,     0,     0,     0,     0,
     103,     0,   211,     0,   209,     0,     0,     0,     0,   245,
      51,   202,     0,     0,    61,    63,    65,    69,     0,    75,
      77,    81,    93,    95,    97,    99,   101,   105,     0,    67,
      83,    89,     0,    52,   111,   118,     0,     0,     0,   116,
      53,     0,     0,     0,     0,   154,    84,     0,   119,     0,
     116,     0,     0,   116,     0,   122,   108,   248,     0,   117,
     120,    85,   248,   248,     0,   116,   249,     0,     0,   116,
     249,   116,   249,   123,   109,   116,     0,   121,    86,   116,
      72,   116,   110,     0,    87,    73,   106,     0,   248,   107
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,    12,   160,   182,   183,   262,   263,    13,    14,
      15,   264,   265,   289,   140,   287,   320,   367,   414,   415,
     416,   435,   417,   385,   420,   421,   388,   423,   436,   437,
     390,   425,   426,   427,   428,   429,   396,   431,   517,   418,
     443,   377,   378,   476,   466,   471,   492,   498,   487,   494,
      16,    17,    18,    19,   165,   192,   245,   277,    20,   166,
     196,    21,   175,   176,   205,   206,    22,   128,   158,    61,
      23,    24,   219,    25,   108,   167,   249,   317,   299,    26,
      27,   399,    37,    99,    98,    95,   136,   379,   222,   211,
     212,   213,   214,   329,   330,   292,   293,   419,    36,   216,
     380,    30
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -283
static const yytype_int16 yypact[] =
{
    -283,    34,  -283,   191,  -283,  -283,  -283,  -283,  -283,  -283,
     191,   191,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,   463,  -283,  -283,  -283,
     589,  -283,   191,   191,   191,   -61,   626,   264,  -283,   437,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,   191,   191,   191,   191,   191,   191,   191,
     191,  -283,  -283,   526,   191,  -283,   191,   191,   191,   191,
     191,   191,   191,   191,  -283,   191,   191,   191,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,   279,   694,   694,
     137,   137,   694,   694,   491,   404,   441,   694,   166,   253,
     699,   379,   301,   109,   109,  -283,  -283,  -283,  -283,  -283,
     699,   379,   301,   109,   109,  -283,  -283,  -283,  -283,   -61,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,   -42,
     218,   218,  -283,  -283,   -61,  -283,  -283,  -283,  -283,   191,
     191,   191,   191,   191,   191,   191,  -283,  -283,     0,  -283,
      -1,   191,   -61,   -61,    67,    76,   170,    17,   -61,   -61,
    -283,  -283,  -283,  -283,  -283,    99,   325,  -283,  -283,   111,
    -283,  -283,  -283,    37,  -283,  -283,   -61,   -61,  -283,  -283,
     -40,    -2,  -283,  -283,    94,    -2,  -283,  -283,   162,   165,
     -61,   -61,  -283,  -283,  -283,  -283,    73,    98,   106,   626,
      88,  -283,    88,    98,   106,   218,   100,   -61,   -61,    32,
    -283,   -53,  -283,    -2,  -283,   -53,    16,  -283,   134,   -61,
     -61,   325,  -283,  -283,    88,  -283,  -283,   552,  -283,   -61,
    -283,   265,  -283,  -283,  -283,    53,   -61,  -283,    13,    18,
      -2,  -283,  -283,    98,   106,   626,  -283,  -283,  -283,  -283,
    -283,  -283,     3,  -283,  -283,  -283,  -283,  -283,   -22,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,   743,  -283,   -61,   186,
    -283,    14,  -283,   243,    -2,   552,  -283,   259,   548,  -283,
     193,  -283,  -283,  -283,  -283,   194,  -283,   -61,  -283,    33,
    -283,  -283,   191,    -2,   265,    70,   191,   191,   191,   191,
     265,  -283,   565,  -283,  -283,   198,   247,    31,  -283,   -61,
     639,  -283,    -2,  -283,    -2,   203,    65,  -283,   191,   163,
    -283,   160,   -61,  -283,  -283,  -283,   676,  -283,  -283,  -283,
    -283,    -2,  -283,  -283,   288,   288,   288,   288,   288,  -283,
     288,   288,  -283,   288,  -283,   288,   288,   288,   288,   288,
    -283,   288,   265,   288,   288,   288,   265,  -283,  -283,   168,
      83,    -2,  -283,  -283,   713,   199,   180,   191,   173,    -2,
    -283,  -283,  -283,  -283,  -283,   191,  -283,  -283,   191,  -283,
     191,  -283,  -283,  -283,  -283,  -283,   191,  -283,   179,   191,
     182,  -283,  -283,  -283,   191,  -283,    65,  -283,   -53,  -283,
    -283,    -2,   184,  -283,   191,   191,   191,   191,  -283,   -61,
     191,   191,  -283,   191,  -283,   191,   191,   191,   191,   191,
    -283,   191,  -283,   188,  -283,   191,   191,   191,   -61,  -283,
     -61,    -2,   288,   202,  -283,  -283,  -283,  -283,   -61,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,   191,  -283,
    -283,  -283,   -61,   -61,  -283,  -283,   -61,   -61,   215,    15,
    -283,    70,   -61,   -61,   191,  -283,  -283,   -61,   163,   -61,
      21,   222,   269,    28,   -61,  -283,  -283,   -61,   191,  -283,
    -283,  -283,   -61,   -61,    70,   324,   -61,   235,    70,   324,
     -61,   324,   -61,   163,  -283,   324,   191,   163,  -283,   324,
    -283,   324,  -283,   236,  -283,  -283,  -283,    70,    81,  -283
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -235,  -283,  -283,
    -283,  -283,  -283,  -283,   254,  -240,  -242,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,   219,
    -283,   411,   -82,   -71,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,    92,  -283,   126,    96,  -283,  -104,
    -283,  -283,   -99,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
    -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,   -24,
    -232,    19,   209,   276,   240,   690,   489,  -137,     7,  -166,
     177,  -150,  -144,  -117,  -228,  -282,   -30,    -3,    -4,  -283,
      22,  -283
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -231
static const yytype_int16 yytable[] =
{
      35,   177,    62,   180,   178,    75,    38,    39,    28,   256,
     257,   258,   259,   260,   261,   316,   280,   296,   475,   247,
     220,   197,   282,    29,   475,   288,   207,   286,    71,    72,
      73,   475,   208,    28,     2,   340,   240,   318,     5,     6,
     270,   271,   272,   273,   274,   275,   235,    74,    29,   312,
     300,     5,     6,   221,   223,    74,   269,   225,   226,   110,
     111,   112,   113,   114,   115,   116,   117,   161,   235,   336,
     188,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     189,   253,   129,   130,   131,   241,   276,   254,     3,     5,
       6,   181,   242,     8,    31,   374,   198,   199,   368,   159,
     283,   144,    32,   202,     4,    10,    33,     5,     6,    11,
      34,   285,   341,   284,   164,   270,   271,   272,   273,   274,
     275,    74,    74,    74,    74,     5,     6,     7,     8,   485,
     398,     9,   186,   187,   398,   190,   490,   191,   200,   201,
      10,    74,   407,   279,    11,   215,   168,   169,   170,   171,
     172,   173,   174,   139,   224,   179,   217,   218,   185,   327,
     326,   276,   162,   163,   327,   227,   322,   324,   228,   148,
     229,   230,   209,   406,   193,   328,   295,   327,   439,   370,
     328,   231,   184,   203,   204,     5,     6,   238,   239,    74,
     294,   244,   315,   328,   232,   246,   248,   313,   314,   251,
     252,   233,   338,   410,   376,   495,   203,   204,   237,   266,
     499,   501,    81,    82,    83,   250,   278,   267,   281,   210,
      88,    89,    90,    91,    92,    93,    94,   255,   243,   194,
     243,   195,   243,   243,   408,   375,   519,   236,   149,   150,
     151,   152,   153,   154,   155,   194,   298,   195,    28,    97,
     339,   297,   190,   194,   191,   195,   156,   194,   194,   195,
     195,   370,   301,    29,   104,   105,   106,    84,   371,   319,
     109,     5,     6,   489,   441,   302,   303,   304,   305,   405,
     323,   413,   132,   100,   101,    31,   335,   432,   411,   342,
     434,   243,   442,    32,  -230,  -230,   458,    33,   107,   321,
     306,    34,   372,   331,   332,   333,   334,    85,    86,    87,
     465,   325,     8,   307,   308,   309,   310,    28,    85,    86,
      87,   102,   103,   474,    10,   369,    29,   475,    11,   243,
     488,   243,    29,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,   506,   516,   133,   134,    88,    89,    90,
      91,    92,    93,    94,   478,   141,     5,     6,     7,     8,
     464,   290,    88,    89,    90,    91,    92,    93,    94,    28,
     268,    10,   291,    28,   412,    11,   482,   503,   440,     5,
       6,   507,     8,   243,   400,   404,   243,   234,   400,   448,
       0,     0,     0,     0,    10,     0,   433,     0,    11,     0,
     518,   438,    79,    80,    81,    82,    83,   145,   462,   486,
     463,     0,   491,     0,     0,   243,     0,     0,   467,    31,
     203,   204,     0,     0,   504,     0,     0,    32,   508,     0,
     510,    33,   469,   470,   512,    34,   472,   473,   514,   477,
     515,     0,   479,   480,   146,     0,     0,   483,   243,   484,
       0,     0,     0,     0,   493,   468,     0,   496,    85,    86,
      87,     0,   500,   502,     0,     0,   505,     0,    40,     0,
     509,   481,   511,     0,     0,    41,    42,    43,    44,    78,
      79,    80,    81,    82,    83,   497,     0,    88,    89,    90,
      91,    92,    93,    94,     0,    85,    86,    87,     0,     0,
       0,     0,     0,   513,    45,    46,    47,    48,    49,    50,
       0,    51,    52,    53,    54,    55,     0,     0,     0,     0,
      56,    57,     0,     0,    88,    89,    90,    91,    92,    93,
      94,    58,    59,     0,    60,    76,    77,    78,    79,    80,
      81,    82,    83,     0,     0,    85,    86,    87,    96,     0,
       0,   311,     0,     0,     5,     6,     7,     8,   256,   257,
     258,   259,   260,   261,   302,   303,   304,   305,   337,    10,
       0,     0,     0,    11,    88,    89,    90,    91,    92,    93,
      94,   302,   303,   304,   305,    31,     0,     0,   138,   306,
       0,   142,   143,    32,     0,     0,   147,    33,   157,     0,
       0,    34,   307,   308,   309,   310,   306,   422,     0,   424,
       0,     0,     0,     0,     0,   430,     0,     0,     0,   307,
     308,   309,   310,     0,    76,    77,    78,    79,    80,    81,
      82,    83,     0,   444,   445,   446,   447,   118,     0,   449,
     450,     0,   451,   343,   452,   453,   454,   455,   456,   344,
     457,     0,     0,     0,   459,   460,   461,     0,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     373,   366,     0,     0,     0,     0,   344,    63,    64,    65,
      66,    67,    68,    69,    70,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   409,   366,     0,
       0,     0,     0,   344,    76,    77,    78,    79,    80,    81,
      82,    83,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,   366,   381,   382,   383,   384,
       0,   386,   387,     0,   389,     0,   391,   392,   393,   394,
     395,     0,   397,     0,   401,   402,   403,    88,    89,    90,
      91,    92,    93,    94,     0,     0,   133,   134,   135,   137,
     135,   135,   137,   137,     0,     0,     0,   135,    77,    78,
      79,    80,    81,    82,    83,   270,   271,   272,   273,   274,
     275
};

static const yytype_int16 yycheck[] =
{
       3,     1,    26,     4,     4,    35,    10,    11,     1,     6,
       7,     8,     9,    10,    11,   297,     3,     3,     3,     3,
      60,     4,     4,     1,     3,   265,   176,   262,    32,    33,
      34,     3,   176,    26,     0,     4,     4,     4,    91,    92,
      62,    63,    64,    65,    66,    67,   212,   108,    26,   289,
     285,    91,    92,   190,   191,   108,     3,   194,   195,    63,
      64,    65,    66,    67,    68,    69,    70,   109,   234,   311,
       3,    74,    76,    77,    78,    79,    80,    81,    82,    83,
       4,   231,    85,    86,    87,    53,   108,   231,    54,    91,
      92,    92,    60,    94,    94,   337,    79,    80,   326,   129,
      82,   104,   102,     4,    70,   106,   106,    91,    92,   110,
     110,   108,    81,   250,   144,    62,    63,    64,    65,    66,
      67,   108,   108,   108,   108,    91,    92,    93,    94,   108,
     362,    97,   162,   163,   366,    59,   108,    61,   168,   169,
     106,   108,   370,   247,   110,   108,   149,   150,   151,   152,
     153,   154,   155,    16,    60,   158,   186,   187,   161,    94,
      90,   108,   140,   141,    94,     3,   303,   304,     3,     3,
     200,   201,   176,    90,     4,   110,   280,    94,   406,    98,
     110,   108,   160,    95,    96,    91,    92,   217,   218,   108,
       4,   221,   296,   110,    96,   225,   226,     4,     4,   229,
     230,    95,     4,     4,   341,   487,    95,    96,   108,   239,
     492,   493,   103,   104,   105,    81,   246,   241,   248,   108,
      83,    84,    85,    86,    87,    88,    89,   231,   221,    59,
     223,    61,   225,   226,   371,   339,   518,   215,    72,    73,
      74,    75,    76,    77,    78,    59,     3,    61,   241,    40,
       3,   281,    59,    59,    61,    61,     3,    59,    59,    61,
      61,    98,     3,   241,    55,    56,    57,     3,   108,   299,
      61,    91,    92,     4,   411,    16,    17,    18,    19,   111,
     304,   108,     3,    43,    44,    94,   310,   108,   108,   319,
     108,   284,   108,   102,    91,    92,   108,   106,    58,   302,
      41,   110,   332,   306,   307,   308,   309,    54,    55,    56,
     108,   304,    94,    54,    55,    56,    57,   310,    54,    55,
      56,    45,    46,   108,   106,   328,   304,     3,   110,   322,
     108,   324,   310,    54,    55,    56,    83,    84,    85,    86,
      87,    88,    89,   108,   108,    92,    93,    83,    84,    85,
      86,    87,    88,    89,   471,   101,    91,    92,    93,    94,
     442,   269,    83,    84,    85,    86,    87,    88,    89,   362,
     244,   106,   276,   366,   377,   110,   475,   494,   408,    91,
      92,   498,    94,   376,   362,   366,   379,   210,   366,   419,
      -1,    -1,    -1,    -1,   106,    -1,   399,    -1,   110,    -1,
     517,   404,   101,   102,   103,   104,   105,     3,   438,   480,
     440,    -1,   483,    -1,    -1,   408,    -1,    -1,   448,    94,
      95,    96,    -1,    -1,   495,    -1,    -1,   102,   499,    -1,
     501,   106,   462,   463,   505,   110,   466,   467,   509,   469,
     511,    -1,   472,   473,     3,    -1,    -1,   477,   441,   479,
      -1,    -1,    -1,    -1,   484,   458,    -1,   487,    54,    55,
      56,    -1,   492,   493,    -1,    -1,   496,    -1,     5,    -1,
     500,   474,   502,    -1,    -1,    12,    13,    14,    15,   100,
     101,   102,   103,   104,   105,   488,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    54,    55,    56,    -1,    -1,
      -1,    -1,    -1,   506,    41,    42,    43,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      57,    58,    -1,    -1,    83,    84,    85,    86,    87,    88,
      89,    68,    69,    -1,    71,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,    54,    55,    56,   111,    -1,
      -1,     3,    -1,    -1,    91,    92,    93,    94,     6,     7,
       8,     9,    10,    11,    16,    17,    18,    19,     3,   106,
      -1,    -1,    -1,   110,    83,    84,    85,    86,    87,    88,
      89,    16,    17,    18,    19,    94,    -1,    -1,    99,    41,
      -1,   102,   103,   102,    -1,    -1,   107,   106,   109,    -1,
      -1,   110,    54,    55,    56,    57,    41,   388,    -1,   390,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    54,
      55,    56,    57,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,   414,   415,   416,   417,   111,    -1,   420,
     421,    -1,   423,     4,   425,   426,   427,   428,   429,    10,
     431,    -1,    -1,    -1,   435,   436,   437,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       4,    42,    -1,    -1,    -1,    -1,    10,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,     4,    42,    -1,
      -1,    -1,    -1,    10,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,    -1,   361,    -1,   363,   364,   365,    83,    84,    85,
      86,    87,    88,    89,    -1,    -1,    92,    93,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,   107,    99,   100,
     101,   102,   103,   104,   105,    62,    63,    64,    65,    66,
      67
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   113,     0,    54,    70,    91,    92,    93,    94,    97,
     106,   110,   114,   120,   121,   122,   162,   163,   164,   165,
     170,   173,   178,   182,   183,   185,   191,   192,   200,   212,
     213,    94,   102,   106,   110,   209,   210,   194,   210,   210,
       5,    12,    13,    14,    15,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    57,    58,    68,    69,
      71,   181,   191,    98,    99,   100,   101,   102,   103,   104,
     105,   210,   210,   210,   108,   208,    98,    99,   100,   101,
     102,   103,   104,   105,     3,    54,    55,    56,    83,    84,
      85,    86,    87,    88,    89,   197,   111,   194,   196,   195,
     196,   196,   195,   195,   194,   194,   194,   196,   186,   194,
     210,   210,   210,   210,   210,   210,   210,   210,   111,   209,
     210,   210,   210,   210,   210,   210,   210,   210,   179,   209,
     209,   209,     3,    92,    93,   197,   198,   197,   198,    16,
     126,   126,   198,   198,   209,     3,     3,   198,     3,    72,
      73,    74,    75,    76,    77,    78,     3,   198,   180,   208,
     115,   109,   212,   212,   208,   166,   171,   187,   209,   209,
     209,   209,   209,   209,   209,   174,   175,     1,     4,   209,
       4,    92,   116,   117,   212,   209,   208,   208,     3,     4,
      59,    61,   167,     4,    59,    61,   172,     4,    79,    80,
     208,   208,     4,    95,    96,   176,   177,   203,   204,   210,
     108,   201,   202,   203,   204,   108,   211,   208,   208,   184,
      60,   199,   200,   199,    60,   199,   199,     3,     3,   208,
     208,   108,    96,    95,   202,   201,   212,   108,   208,   208,
       4,    53,    60,   200,   208,   168,   208,     3,   208,   188,
      81,   208,   208,   203,   204,   210,     6,     7,     8,     9,
      10,    11,   118,   119,   123,   124,   208,   191,   168,     3,
      62,    63,    64,    65,    66,    67,   108,   169,   208,   171,
       3,   208,     4,    82,   199,   108,   119,   127,   127,   125,
     166,   169,   207,   208,     4,   171,     3,   208,     3,   190,
     119,     3,    16,    17,    18,    19,    41,    54,    55,    56,
      57,     3,   127,     4,     4,   171,   207,   189,     4,   208,
     128,   209,   199,   191,   199,   200,    90,    94,   110,   205,
     206,   209,   209,   209,   209,   191,   128,     3,     4,     3,
       4,    81,   208,     4,    10,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    42,   129,   206,   209,
      98,   108,   208,     4,   128,   171,   199,   153,   154,   199,
     212,   153,   153,   153,   153,   135,   153,   153,   138,   153,
     142,   153,   153,   153,   153,   153,   148,   153,   192,   193,
     212,   153,   153,   153,   193,   111,    90,   206,   199,     4,
       4,   108,   209,   108,   130,   131,   132,   134,   151,   209,
     136,   137,   151,   139,   151,   143,   144,   145,   146,   147,
     151,   149,   108,   209,   108,   133,   140,   141,   209,   206,
     208,   199,   108,   152,   151,   151,   151,   151,   208,   151,
     151,   151,   151,   151,   151,   151,   151,   151,   108,   151,
     151,   151,   208,   208,   154,   108,   156,   208,   209,   208,
     208,   157,   208,   208,   108,     3,   155,   208,   205,   208,
     208,   209,   174,   208,   208,   108,   155,   160,   108,     4,
     108,   155,   158,   208,   161,   207,   208,   209,   159,   207,
     208,   207,   208,   205,   155,   208,   108,   205,   155,   208,
     155,   208,   155,   209,   155,   155,   108,   150,   205,   207
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 18:
#line 202 "rcparse.y"
    {
	    define_accelerator ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].pacc));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 19:
#line 212 "rcparse.y"
    {
	    (yyval.pacc) = NULL;
	  }
    break;

  case 20:
#line 216 "rcparse.y"
    {
	    rc_accelerator *a;

	    a = (rc_accelerator *) res_alloc (sizeof *a);
	    *a = (yyvsp[(2) - (2)].acc);
	    if ((yyvsp[(1) - (2)].pacc) == NULL)
	      (yyval.pacc) = a;
	    else
	      {
		rc_accelerator **pp;

		for (pp = &(yyvsp[(1) - (2)].pacc)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		(yyval.pacc) = (yyvsp[(1) - (2)].pacc);
	      }
	  }
    break;

  case 21:
#line 237 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (2)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 22:
#line 242 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (4)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (4)].il);
	    (yyval.acc).flags |= (yyvsp[(4) - (4)].is);
	    if (((yyval.acc).flags & ACC_VIRTKEY) == 0
		&& ((yyval.acc).flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;

  case 23:
#line 254 "rcparse.y"
    {
	    const char *s = (yyvsp[(1) - (1)].s);
	    char ch;

	    (yyval.acc).next = NULL;
	    (yyval.acc).id = 0;
	    ch = *s;
	    if (ch != '^')
	      (yyval.acc).flags = 0;
	    else
	      {
		(yyval.acc).flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = TOUPPER (s[0]);
	      }
	    (yyval.acc).key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;

  case 24:
#line 274 "rcparse.y"
    {
	    (yyval.acc).next = NULL;
	    (yyval.acc).flags = 0;
	    (yyval.acc).id = 0;
	    (yyval.acc).key = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 25:
#line 284 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (1)].is);
	  }
    break;

  case 26:
#line 288 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 27:
#line 293 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 28:
#line 300 "rcparse.y"
    {
	    (yyval.is) = ACC_VIRTKEY;
	  }
    break;

  case 29:
#line 304 "rcparse.y"
    {
	    /* This is just the absence of VIRTKEY.  */
	    (yyval.is) = 0;
	  }
    break;

  case 30:
#line 309 "rcparse.y"
    {
	    (yyval.is) = ACC_NOINVERT;
	  }
    break;

  case 31:
#line 313 "rcparse.y"
    {
	    (yyval.is) = ACC_SHIFT;
	  }
    break;

  case 32:
#line 317 "rcparse.y"
    {
	    (yyval.is) = ACC_CONTROL;
	  }
    break;

  case 33:
#line 321 "rcparse.y"
    {
	    (yyval.is) = ACC_ALT;
	  }
    break;

  case 34:
#line 330 "rcparse.y"
    {
	    define_bitmap ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 35:
#line 342 "rcparse.y"
    {
	    define_cursor ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 36:
#line 355 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 37:
#line 372 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 38:
#line 380 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 39:
#line 399 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 40:
#line 407 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (9)].il);
	      dialog.y = (yyvsp[(6) - (9)].il);
	      dialog.width = (yyvsp[(7) - (9)].il);
	      dialog.height = (yyvsp[(8) - (9)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (9)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.ex->help = (yyvsp[(9) - (9)].il);
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (9)].res_info);
	      style = 0;
	    }
    break;

  case 41:
#line 427 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (14)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 42:
#line 437 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 43:
#line 441 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 45:
#line 449 "rcparse.y"
    {
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    dialog.caption = (yyvsp[(3) - (3)].uni);
	  }
    break;

  case 46:
#line 455 "rcparse.y"
    {
	    dialog.class = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 47:
#line 460 "rcparse.y"
    {
	    dialog.style = style;
	  }
    break;

  case 48:
#line 464 "rcparse.y"
    {
	    dialog.exstyle = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 49:
#line 468 "rcparse.y"
    {
	    res_unistring_to_id (& dialog.class, (yyvsp[(3) - (3)].uni));
	  }
    break;

  case 50:
#line 472 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (5)].il);
	    dialog.font = (yyvsp[(5) - (5)].uni);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 51:
#line 485 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (6)].il);
	    dialog.font = (yyvsp[(5) - (6)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (6)].il);
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 52:
#line 500 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (7)].il);
	    dialog.font = (yyvsp[(5) - (7)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (7)].il);
		dialog.ex->italic = (yyvsp[(7) - (7)].il);
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 53:
#line 515 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (8)].il);
	    dialog.font = (yyvsp[(5) - (8)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (8)].il);
		dialog.ex->italic = (yyvsp[(7) - (8)].il);
		dialog.ex->charset = (yyvsp[(8) - (8)].il);
	      }
	  }
    break;

  case 54:
#line 530 "rcparse.y"
    {
	    dialog.menu = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 55:
#line 534 "rcparse.y"
    {
	    sub_res_info.characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 56:
#line 538 "rcparse.y"
    {
	    sub_res_info.language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 57:
#line 542 "rcparse.y"
    {
	    sub_res_info.version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 59:
#line 550 "rcparse.y"
    {
	    rc_dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = (yyvsp[(2) - (2)].dialog_control);
	  }
    break;

  case 60:
#line 561 "rcparse.y"
    {
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 61:
#line 569 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 62:
#line 573 "rcparse.y"
    {
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 63:
#line 581 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 64:
#line 585 "rcparse.y"
    {
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 65:
#line 593 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 66:
#line 597 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 67:
#line 605 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "BEDIT");
	  }
    break;

  case 68:
#line 612 "rcparse.y"
    {
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 69:
#line 620 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 70:
#line 624 "rcparse.y"
    {
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 71:
#line 634 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 72:
#line 639 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(6) - (11)].il), (yyvsp[(7) - (11)].il), (yyvsp[(8) - (11)].il), (yyvsp[(9) - (11)].il), (yyvsp[(4) - (11)].id), style, (yyvsp[(10) - (11)].il));
	    if ((yyvsp[(11) - (11)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(11) - (11)].rcdata_item);
	      }
	  }
    break;

  case 73:
#line 650 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (12)].id), (yyvsp[(3) - (12)].il), (yyvsp[(6) - (12)].il), (yyvsp[(7) - (12)].il), (yyvsp[(8) - (12)].il), (yyvsp[(9) - (12)].il), (yyvsp[(4) - (12)].id), style, (yyvsp[(10) - (12)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(11) - (12)].il);
	    (yyval.dialog_control)->data = (yyvsp[(12) - (12)].rcdata_item);
	  }
    break;

  case 74:
#line 658 "rcparse.y"
    {
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 75:
#line 666 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 76:
#line 670 "rcparse.y"
    {
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 77:
#line 678 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 78:
#line 682 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;

  case 79:
#line 690 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 80:
#line 694 "rcparse.y"
    {
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 81:
#line 702 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 82:
#line 706 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 83:
#line 714 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "HEDIT");
	  }
    break;

  case 84:
#line 721 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (6)].id), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), 0, 0, 0, (yyvsp[(6) - (6)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 85:
#line 727 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (8)].id), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), 0, 0, 0, (yyvsp[(8) - (8)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 86:
#line 733 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (10)].id), (yyvsp[(3) - (10)].il), (yyvsp[(4) - (10)].il), (yyvsp[(5) - (10)].il), style, (yyvsp[(9) - (10)].il), 0, (yyvsp[(10) - (10)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 87:
#line 739 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(4) - (11)].il), (yyvsp[(5) - (11)].il), style, (yyvsp[(9) - (11)].il), (yyvsp[(10) - (11)].il), (yyvsp[(11) - (11)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 88:
#line 744 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 89:
#line 752 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "IEDIT");
	  }
    break;

  case 90:
#line 759 "rcparse.y"
    {
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class.named = 0;
	      class.u.id = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 91:
#line 767 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 92:
#line 771 "rcparse.y"
    {
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 93:
#line 779 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 94:
#line 783 "rcparse.y"
    {
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	    }
    break;

  case 95:
#line 790 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 96:
#line 794 "rcparse.y"
    {
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 97:
#line 802 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 98:
#line 806 "rcparse.y"
    {
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 99:
#line 814 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 100:
#line 818 "rcparse.y"
    {
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 101:
#line 826 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 102:
#line 830 "rcparse.y"
    {
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;

  case 103:
#line 838 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 104:
#line 842 "rcparse.y"
    {
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 105:
#line 850 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 106:
#line 855 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 107:
#line 857 "rcparse.y"
    {
	    rc_res_id cid;
	    cid.named = 0;
	    cid.u.id = CTL_BUTTON;
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (15)].id), (yyvsp[(3) - (15)].il), (yyvsp[(5) - (15)].il), (yyvsp[(7) - (15)].il), (yyvsp[(9) - (15)].il), (yyvsp[(11) - (15)].il), cid,
				 style, (yyvsp[(15) - (15)].il));
	  }
    break;

  case 108:
#line 875 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (6)].il), (yyvsp[(2) - (6)].il), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if ((yyvsp[(6) - (6)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(6) - (6)].rcdata_item);
	      }
	  }
    break;

  case 109:
#line 887 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (8)].il), (yyvsp[(2) - (8)].il), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), class, style, (yyvsp[(7) - (8)].il));
	    if ((yyvsp[(8) - (8)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(8) - (8)].rcdata_item);
	      }
	  }
    break;

  case 110:
#line 898 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (9)].il), (yyvsp[(2) - (9)].il), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), class, style, (yyvsp[(7) - (9)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(8) - (9)].il);
	    (yyval.dialog_control)->data = (yyvsp[(9) - (9)].rcdata_item);
	  }
    break;

  case 111:
#line 909 "rcparse.y"
    {
	    if ((yyvsp[(2) - (2)].id).named)
	      res_unistring_to_id (&(yyval.id), (yyvsp[(2) - (2)].id).u.n.name);
	    else
	      (yyval.id)=(yyvsp[(2) - (2)].id);
	  }
    break;

  case 112:
#line 919 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), "");
	  }
    break;

  case 113:
#line 922 "rcparse.y"
    { (yyval.id)=(yyvsp[(1) - (2)].id); }
    break;

  case 114:
#line 927 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 115:
#line 932 "rcparse.y"
    {
	    (yyval.id).named = 1;
	    (yyval.id).u.n.name = (yyvsp[(1) - (1)].uni);
	    (yyval.id).u.n.length = unichar_len ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 116:
#line 941 "rcparse.y"
    {
	    (yyval.rcdata_item) = NULL;
	  }
    break;

  case 117:
#line 945 "rcparse.y"
    {
	    (yyval.rcdata_item) = (yyvsp[(2) - (3)].rcdata).first;
	  }
    break;

  case 118:
#line 954 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 120:
#line 960 "rcparse.y"
    { style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;

  case 122:
#line 966 "rcparse.y"
    { style = base_style | WS_CHILD | WS_VISIBLE; }
    break;

  case 124:
#line 974 "rcparse.y"
    {
	    define_font ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 125:
#line 986 "rcparse.y"
    {
	    define_icon ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 126:
#line 999 "rcparse.y"
    {
	    language = (yyvsp[(2) - (3)].il) | ((yyvsp[(3) - (3)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 127:
#line 1008 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 128:
#line 1018 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 129:
#line 1022 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 130:
#line 1039 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (4)].uni), (yyvsp[(3) - (4)].il), (yyvsp[(4) - (4)].is), 0, 0, NULL);
	  }
    break;

  case 131:
#line 1043 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;

  case 132:
#line 1047 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), 0, (yyvsp[(3) - (6)].is), 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 133:
#line 1054 "rcparse.y"
    {
	    (yyval.is) = 0;
	  }
    break;

  case 134:
#line 1058 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 135:
#line 1062 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 136:
#line 1069 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_CHECKED;
	  }
    break;

  case 137:
#line 1073 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_GRAYED;
	  }
    break;

  case 138:
#line 1077 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_HELP;
	  }
    break;

  case 139:
#line 1081 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_INACTIVE;
	  }
    break;

  case 140:
#line 1085 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBARBREAK;
	  }
    break;

  case 141:
#line 1089 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBREAK;
	  }
    break;

  case 142:
#line 1098 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 143:
#line 1108 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 144:
#line 1112 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 145:
#line 1129 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (2)].uni), 0, 0, 0, 0, NULL);
	  }
    break;

  case 146:
#line 1133 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (3)].uni), (yyvsp[(3) - (3)].il), 0, 0, 0, NULL);
	  }
    break;

  case 147:
#line 1137 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), (yyvsp[(3) - (5)].il), (yyvsp[(4) - (5)].il), (yyvsp[(5) - (5)].il), 0, NULL);
	  }
    break;

  case 148:
#line 1141 "rcparse.y"
    {
 	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;

  case 149:
#line 1145 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), 0, 0, 0, 0, (yyvsp[(4) - (5)].menuitem));
	  }
    break;

  case 150:
#line 1149 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), (yyvsp[(3) - (6)].il), 0, 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 151:
#line 1153 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (7)].uni), (yyvsp[(3) - (7)].il), (yyvsp[(4) - (7)].il), 0, 0, (yyvsp[(6) - (7)].menuitem));
	  }
    break;

  case 152:
#line 1158 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (9)].uni), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), (yyvsp[(6) - (9)].il), (yyvsp[(8) - (9)].menuitem));
	  }
    break;

  case 153:
#line 1167 "rcparse.y"
    {
	    define_messagetable ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 154:
#line 1179 "rcparse.y"
    {
	    rcparse_rcdata ();
	  }
    break;

  case 155:
#line 1183 "rcparse.y"
    {
	    rcparse_normal ();
	    (yyval.rcdata) = (yyvsp[(2) - (2)].rcdata);
	  }
    break;

  case 156:
#line 1191 "rcparse.y"
    {
	    (yyval.rcdata).first = NULL;
	    (yyval.rcdata).last = NULL;
	  }
    break;

  case 157:
#line 1196 "rcparse.y"
    {
	    (yyval.rcdata) = (yyvsp[(1) - (1)].rcdata);
	  }
    break;

  case 158:
#line 1203 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(1) - (1)].ss).s, (yyvsp[(1) - (1)].ss).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 159:
#line 1211 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(1) - (1)].suni).s, (yyvsp[(1) - (1)].suni).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 160:
#line 1219 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(1) - (1)].i).val, (yyvsp[(1) - (1)].i).dword);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 161:
#line 1227 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(3) - (3)].ss).s, (yyvsp[(3) - (3)].ss).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 162:
#line 1236 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(3) - (3)].suni).s, (yyvsp[(3) - (3)].suni).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 163:
#line 1245 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(3) - (3)].i).val, (yyvsp[(3) - (3)].i).dword);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 164:
#line 1254 "rcparse.y"
    {
	    (yyval.rcdata)=(yyvsp[(1) - (2)].rcdata);
	  }
    break;

  case 165:
#line 1263 "rcparse.y"
    { sub_res_info = (yyvsp[(2) - (3)].res_info); rcparse_rcdata (); }
    break;

  case 166:
#line 1264 "rcparse.y"
    { rcparse_normal (); }
    break;

  case 168:
#line 1270 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].suni).s, (yyvsp[(3) - (3)].suni).length);
	    rcparse_discard_strings ();
	  }
    break;

  case 169:
#line 1275 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (4)].il), (yyvsp[(4) - (4)].suni).s, (yyvsp[(4) - (4)].suni).length);
	    rcparse_discard_strings ();
	  }
    break;

  case 170:
#line 1280 "rcparse.y"
    {
	    rcparse_warning (_("invalid stringtable resource."));
	    abort ();
	  }
    break;

  case 171:
#line 1288 "rcparse.y"
    {
	    (yyval.id)=(yyvsp[(1) - (1)].id);
	  }
    break;

  case 172:
#line 1292 "rcparse.y"
    {
	  (yyval.id).named = 0;
	  (yyval.id).u.id = 23;
	}
    break;

  case 173:
#line 1297 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_RCDATA;
        }
    break;

  case 174:
#line 1302 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_MANIFEST;
        }
    break;

  case 175:
#line 1307 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_PLUGPLAY;
        }
    break;

  case 176:
#line 1312 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_VXD;
        }
    break;

  case 177:
#line 1317 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINCLUDE;
        }
    break;

  case 178:
#line 1322 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINIT;
        }
    break;

  case 179:
#line 1327 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANICURSOR;
        }
    break;

  case 180:
#line 1332 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANIICON;
        }
    break;

  case 181:
#line 1343 "rcparse.y"
    {
	    define_user_data ((yyvsp[(1) - (6)].id), (yyvsp[(2) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 182:
#line 1350 "rcparse.y"
    {
	    define_user_file ((yyvsp[(1) - (4)].id), (yyvsp[(2) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 183:
#line 1360 "rcparse.y"
    {
	  define_toolbar ((yyvsp[(1) - (8)].id), &(yyvsp[(3) - (8)].res_info), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), (yyvsp[(7) - (8)].toobar_item));
	}
    break;

  case 184:
#line 1365 "rcparse.y"
    { (yyval.toobar_item)= NULL; }
    break;

  case 185:
#line 1367 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (3)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id = (yyvsp[(3) - (3)].id);
	  if ((yyvsp[(1) - (3)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (3)].toobar_item);
	}
    break;

  case 186:
#line 1386 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (2)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id.named = 0;
	  n->id.u.id = 0;
	  if ((yyvsp[(1) - (2)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (2)].toobar_item);
	}
    break;

  case 187:
#line 1411 "rcparse.y"
    {
	    define_versioninfo ((yyvsp[(1) - (6)].id), language, (yyvsp[(3) - (6)].fixver), (yyvsp[(5) - (6)].verinfo));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 188:
#line 1421 "rcparse.y"
    {
	    (yyval.fixver) = ((rc_fixed_versioninfo *)
		  res_alloc (sizeof (rc_fixed_versioninfo)));
	    memset ((yyval.fixver), 0, sizeof (rc_fixed_versioninfo));
	  }
    break;

  case 189:
#line 1427 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->file_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->file_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 190:
#line 1433 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->product_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->product_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 191:
#line 1439 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags_mask = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 192:
#line 1444 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 193:
#line 1449 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_os = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 194:
#line 1454 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_type = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 195:
#line 1459 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_subtype = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 196:
#line 1473 "rcparse.y"
    {
	    (yyval.verinfo) = NULL;
	  }
    break;

  case 197:
#line 1477 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_stringfileinfo ((yyvsp[(1) - (5)].verinfo), (yyvsp[(4) - (5)].verstringtable));
	  }
    break;

  case 198:
#line 1481 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_varfileinfo ((yyvsp[(1) - (7)].verinfo), (yyvsp[(5) - (7)].uni), (yyvsp[(6) - (7)].vervar));
	  }
    break;

  case 199:
#line 1488 "rcparse.y"
    {
	    (yyval.verstringtable) = NULL;
	  }
    break;

  case 200:
#line 1492 "rcparse.y"
    {
	    (yyval.verstringtable) = append_ver_stringtable ((yyvsp[(1) - (5)].verstringtable), (yyvsp[(2) - (5)].s), (yyvsp[(4) - (5)].verstring));
	  }
    break;

  case 201:
#line 1499 "rcparse.y"
    {
	    (yyval.verstring) = NULL;
	  }
    break;

  case 202:
#line 1503 "rcparse.y"
    {
	    (yyval.verstring) = append_verval ((yyvsp[(1) - (5)].verstring), (yyvsp[(3) - (5)].uni), (yyvsp[(5) - (5)].uni));
	  }
    break;

  case 203:
#line 1510 "rcparse.y"
    {
	    (yyval.vervar) = NULL;
	  }
    break;

  case 204:
#line 1514 "rcparse.y"
    {
	    (yyval.vervar) = append_vertrans ((yyvsp[(1) - (3)].vervar), (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].il));
	  }
    break;

  case 205:
#line 1523 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 206:
#line 1528 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 207:
#line 1537 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 208:
#line 1541 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 209:
#line 1551 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (2)].il);
	  }
    break;

  case 210:
#line 1556 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 211:
#line 1560 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (2)].uni));
	  }
    break;

  case 212:
#line 1570 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    /* FIXME: Is this the right default?  */
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 213:
#line 1577 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 214:
#line 1583 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 215:
#line 1588 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (4)].res_info);
	    (yyval.res_info).language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 216:
#line 1593 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 217:
#line 1603 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 218:
#line 1609 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 219:
#line 1620 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 220:
#line 1626 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 221:
#line 1638 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_MOVEABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 222:
#line 1643 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_MOVEABLE;
	  }
    break;

  case 223:
#line 1648 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PURE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 224:
#line 1653 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PURE;
	  }
    break;

  case 225:
#line 1658 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PRELOAD;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 226:
#line 1663 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PRELOAD;
	  }
    break;

  case 227:
#line 1668 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_DISCARDABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 228:
#line 1678 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 229:
#line 1682 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 230:
#line 1690 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 231:
#line 1695 "rcparse.y"
    {
	    rc_uint_type l1 = unichar_len ((yyvsp[(1) - (2)].uni));
	    rc_uint_type l2 = unichar_len ((yyvsp[(2) - (2)].uni));
	    unichar *h = (unichar *) res_alloc ((l1 + l2 + 1) * sizeof (unichar));
	    if (l1 != 0)
	      memcpy (h, (yyvsp[(1) - (2)].uni), l1 * sizeof (unichar));
	    if (l2 != 0)
	      memcpy (h + l1, (yyvsp[(2) - (2)].uni), l2  * sizeof (unichar));
	    h[l1 + l2] = 0;
	    (yyval.uni) = h;
	  }
    break;

  case 232:
#line 1710 "rcparse.y"
    {
	    (yyval.uni) = unichar_dup ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 233:
#line 1714 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 234:
#line 1723 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[(1) - (1)].suni);
	  }
    break;

  case 235:
#line 1727 "rcparse.y"
    {
	    unichar *h = NULL;
	    rc_uint_type l = 0;
	    unicode_from_ascii_len (&l, &h, (yyvsp[(1) - (1)].ss).s, (yyvsp[(1) - (1)].ss).length);
	    (yyval.suni).s = h;
	    (yyval.suni).length = l;
	  }
    break;

  case 236:
#line 1739 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[(1) - (1)].suni);
	  }
    break;

  case 237:
#line 1744 "rcparse.y"
    {
	    rc_uint_type l1 = (yyvsp[(1) - (2)].suni).length;
	    rc_uint_type l2 = (yyvsp[(2) - (2)].suni).length;
	    unichar *h = (unichar *) res_alloc ((l1 + l2 + 1) * sizeof (unichar));
	    if (l1 != 0)
	      memcpy (h, (yyvsp[(1) - (2)].suni).s, l1 * sizeof (unichar));
	    if (l2 != 0)
	      memcpy (h + l1, (yyvsp[(2) - (2)].suni).s, l2  * sizeof (unichar));
	    h[l1 + l2] = 0;
	    (yyval.suni).length = l1 + l2;
	    (yyval.suni).s = h;
	  }
    break;

  case 238:
#line 1760 "rcparse.y"
    {
	    (yyval.ss) = (yyvsp[(1) - (1)].ss);
	  }
    break;

  case 239:
#line 1764 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].ss).length + (yyvsp[(2) - (2)].ss).length;
	    char *h = (char *) res_alloc (l);
	    memcpy (h, (yyvsp[(1) - (2)].ss).s, (yyvsp[(1) - (2)].ss).length);
	    memcpy (h + (yyvsp[(1) - (2)].ss).length, (yyvsp[(2) - (2)].ss).s, (yyvsp[(2) - (2)].ss).length);
	    (yyval.ss).s = h;
	    (yyval.ss).length = l;
	  }
    break;

  case 240:
#line 1776 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[(1) - (1)].suni);
	  }
    break;

  case 241:
#line 1780 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].suni).length + (yyvsp[(2) - (2)].suni).length;
	    unichar *h = (unichar *) res_alloc (l * sizeof (unichar));
	    memcpy (h, (yyvsp[(1) - (2)].suni).s, (yyvsp[(1) - (2)].suni).length * sizeof (unichar));
	    memcpy (h + (yyvsp[(1) - (2)].suni).length, (yyvsp[(2) - (2)].suni).s, (yyvsp[(2) - (2)].suni).length  * sizeof (unichar));
	    (yyval.suni).s = h;
	    (yyval.suni).length = l;
	  }
    break;

  case 242:
#line 1802 "rcparse.y"
    {
	    style |= (yyvsp[(1) - (1)].il);
	  }
    break;

  case 243:
#line 1806 "rcparse.y"
    {
	    style &=~ (yyvsp[(2) - (2)].il);
	  }
    break;

  case 244:
#line 1810 "rcparse.y"
    {
	    style |= (yyvsp[(3) - (3)].il);
	  }
    break;

  case 245:
#line 1814 "rcparse.y"
    {
	    style &=~ (yyvsp[(4) - (4)].il);
	  }
    break;

  case 246:
#line 1821 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 247:
#line 1825 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (3)].il);
	  }
    break;

  case 248:
#line 1834 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 249:
#line 1838 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 250:
#line 1847 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 251:
#line 1856 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 252:
#line 1865 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 253:
#line 1869 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 254:
#line 1873 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 255:
#line 1878 "rcparse.y"
    {
	    (yyval.i).val = - (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 256:
#line 1883 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 257:
#line 1888 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 258:
#line 1893 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 259:
#line 1898 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 260:
#line 1903 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 261:
#line 1908 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 262:
#line 1913 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 263:
#line 1918 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 264:
#line 1929 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 265:
#line 1938 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 266:
#line 1949 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 267:
#line 1953 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 268:
#line 1957 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 269:
#line 1962 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 270:
#line 1967 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 271:
#line 1972 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 272:
#line 1977 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 273:
#line 1982 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 274:
#line 1987 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 275:
#line 1992 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 276:
#line 1997 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;


/* Line 1267 of yacc.c.  */
#line 4436 "rcparse.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 2003 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 4597
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BEG = 258,
     END = 259,
     ACCELERATORS = 260,
     VIRTKEY = 261,
     ASCII = 262,
     NOINVERT = 263,
     SHIFT = 264,
     CONTROL = 265,
     ALT = 266,
     BITMAP = 267,
     CURSOR = 268,
     DIALOG = 269,
     DIALOGEX = 270,
     EXSTYLE = 271,
     CAPTION = 272,
     CLASS = 273,
     STYLE = 274,
     AUTO3STATE = 275,
     AUTOCHECKBOX = 276,
     AUTORADIOBUTTON = 277,
     CHECKBOX = 278,
     COMBOBOX = 279,
     CTEXT = 280,
     DEFPUSHBUTTON = 281,
     EDITTEXT = 282,
     GROUPBOX = 283,
     LISTBOX = 284,
     LTEXT = 285,
     PUSHBOX = 286,
     PUSHBUTTON = 287,
     RADIOBUTTON = 288,
     RTEXT = 289,
     SCROLLBAR = 290,
     STATE3 = 291,
     USERBUTTON = 292,
     BEDIT = 293,
     HEDIT = 294,
     IEDIT = 295,
     FONT = 296,
     ICON = 297,
     ANICURSOR = 298,
     ANIICON = 299,
     DLGINCLUDE = 300,
     DLGINIT = 301,
     FONTDIR = 302,
     HTML = 303,
     MANIFEST = 304,
     PLUGPLAY = 305,
     VXD = 306,
     TOOLBAR = 307,
     BUTTON = 308,
     LANGUAGE = 309,
     CHARACTERISTICS = 310,
     VERSIONK = 311,
     MENU = 312,
     MENUEX = 313,
     MENUITEM = 314,
     SEPARATOR = 315,
     POPUP = 316,
     CHECKED = 317,
     GRAYED = 318,
     HELP = 319,
     INACTIVE = 320,
     MENUBARBREAK = 321,
     MENUBREAK = 322,
     MESSAGETABLE = 323,
     RCDATA = 324,
     STRINGTABLE = 325,
     VERSIONINFO = 326,
     FILEVERSION = 327,
     PRODUCTVERSION = 328,
     FILEFLAGSMASK = 329,
     FILEFLAGS = 330,
     FILEOS = 331,
     FILETYPE = 332,
     FILESUBTYPE = 333,
     BLOCKSTRINGFILEINFO = 334,
     BLOCKVARFILEINFO = 335,
     VALUE = 336,
     BLOCK = 337,
     MOVEABLE = 338,
     FIXED = 339,
     PURE = 340,
     IMPURE = 341,
     PRELOAD = 342,
     LOADONCALL = 343,
     DISCARDABLE = 344,
     NOT = 345,
     QUOTEDUNISTRING = 346,
     QUOTEDSTRING = 347,
     STRING = 348,
     NUMBER = 349,
     SIZEDUNISTRING = 350,
     SIZEDSTRING = 351,
     IGNORED_TOKEN = 352,
     NEG = 353
   };
#endif
/* Tokens.  */
#define BEG 258
#define END 259
#define ACCELERATORS 260
#define VIRTKEY 261
#define ASCII 262
#define NOINVERT 263
#define SHIFT 264
#define CONTROL 265
#define ALT 266
#define BITMAP 267
#define CURSOR 268
#define DIALOG 269
#define DIALOGEX 270
#define EXSTYLE 271
#define CAPTION 272
#define CLASS 273
#define STYLE 274
#define AUTO3STATE 275
#define AUTOCHECKBOX 276
#define AUTORADIOBUTTON 277
#define CHECKBOX 278
#define COMBOBOX 279
#define CTEXT 280
#define DEFPUSHBUTTON 281
#define EDITTEXT 282
#define GROUPBOX 283
#define LISTBOX 284
#define LTEXT 285
#define PUSHBOX 286
#define PUSHBUTTON 287
#define RADIOBUTTON 288
#define RTEXT 289
#define SCROLLBAR 290
#define STATE3 291
#define USERBUTTON 292
#define BEDIT 293
#define HEDIT 294
#define IEDIT 295
#define FONT 296
#define ICON 297
#define ANICURSOR 298
#define ANIICON 299
#define DLGINCLUDE 300
#define DLGINIT 301
#define FONTDIR 302
#define HTML 303
#define MANIFEST 304
#define PLUGPLAY 305
#define VXD 306
#define TOOLBAR 307
#define BUTTON 308
#define LANGUAGE 309
#define CHARACTERISTICS 310
#define VERSIONK 311
#define MENU 312
#define MENUEX 313
#define MENUITEM 314
#define SEPARATOR 315
#define POPUP 316
#define CHECKED 317
#define GRAYED 318
#define HELP 319
#define INACTIVE 320
#define MENUBARBREAK 321
#define MENUBREAK 322
#define MESSAGETABLE 323
#define RCDATA 324
#define STRINGTABLE 325
#define VERSIONINFO 326
#define FILEVERSION 327
#define PRODUCTVERSION 328
#define FILEFLAGSMASK 329
#define FILEFLAGS 330
#define FILEOS 331
#define FILETYPE 332
#define FILESUBTYPE 333
#define BLOCKSTRINGFILEINFO 334
#define BLOCKVARFILEINFO 335
#define VALUE 336
#define BLOCK 337
#define MOVEABLE 338
#define FIXED 339
#define PURE 340
#define IMPURE 341
#define PRELOAD 342
#define LOADONCALL 343
#define DISCARDABLE 344
#define NOT 345
#define QUOTEDUNISTRING 346
#define QUOTEDSTRING 347
#define STRING 348
#define NUMBER 349
#define SIZEDUNISTRING 350
#define SIZEDSTRING 351
#define IGNORED_TOKEN 352
#define NEG 353




/* Copy the first part of user declarations.  */
#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.
   Extended by Kai Tietz, Onevision.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */


/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "sysdep.h"
#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static rc_res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static rc_dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static rc_uint_type base_style;
static rc_uint_type default_style;
static rc_res_id class;
static rc_res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const rc_res_id res_null_text = { 1, {{0, &null_unichar}}};



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 69 "rcparse.y"
{
  rc_accelerator acc;
  rc_accelerator *pacc;
  rc_dialog_control *dialog_control;
  rc_menuitem *menuitem;
  struct
  {
    rc_rcdata_item *first;
    rc_rcdata_item *last;
  } rcdata;
  rc_rcdata_item *rcdata_item;
  rc_fixed_versioninfo *fixver;
  rc_ver_info *verinfo;
  rc_ver_stringinfo *verstring;
  rc_ver_varinfo *vervar;
  rc_toolbar_item *toobar_item;
  rc_res_id id;
  rc_res_res_info res_info;
  struct
  {
    rc_uint_type on;
    rc_uint_type off;
  } memflags;
  struct
  {
    rc_uint_type val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  rc_uint_type il;
  rc_uint_type is;
  const char *s;
  struct
  {
    rc_uint_type length;
    const char *s;
  } ss;
  unichar *uni;
  struct
  {
    rc_uint_type length;
    const unichar *s;
  } suni;
}
/* Line 193 of yacc.c.  */
#line 404 "rcparse.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 417 "rcparse.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   835

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  99
/* YYNRULES -- Number of rules.  */
#define YYNRULES  270
/* YYNRULES -- Number of states.  */
#define YYNSTATES  515

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   353

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   105,   100,     2,
     110,   111,   103,   101,   108,   102,     2,   104,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   109,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    99,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    98,     2,   106,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,   107
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    49,    56,
      57,    60,    63,    68,    70,    72,    74,    78,    81,    83,
      85,    87,    89,    91,    93,    98,   103,   104,   118,   119,
     133,   134,   149,   150,   154,   155,   159,   163,   167,   171,
     175,   181,   188,   196,   205,   209,   213,   218,   222,   223,
     226,   227,   232,   233,   238,   239,   244,   245,   250,   251,
     256,   257,   261,   273,   286,   287,   292,   293,   298,   299,
     303,   304,   309,   310,   315,   322,   331,   342,   354,   355,
     360,   361,   365,   366,   371,   372,   377,   378,   383,   384,
     389,   390,   395,   396,   400,   401,   406,   407,   423,   430,
     439,   449,   452,   453,   456,   458,   460,   461,   465,   466,
     470,   471,   475,   476,   480,   485,   490,   494,   501,   502,
     505,   510,   513,   520,   521,   525,   528,   530,   532,   534,
     536,   538,   540,   547,   548,   551,   554,   558,   564,   567,
     573,   580,   588,   598,   603,   604,   607,   608,   610,   612,
     614,   616,   620,   624,   628,   631,   632,   639,   640,   644,
     649,   652,   654,   656,   658,   660,   662,   664,   666,   668,
     670,   672,   679,   684,   693,   694,   698,   701,   708,   709,
     716,   723,   727,   731,   735,   739,   743,   744,   753,   761,
     762,   768,   769,   773,   775,   777,   779,   781,   784,   786,
     789,   790,   793,   797,   802,   806,   807,   810,   811,   814,
     816,   818,   820,   822,   824,   826,   828,   830,   832,   834,
     837,   839,   841,   843,   846,   848,   851,   853,   856,   860,
     865,   867,   871,   872,   874,   877,   879,   881,   885,   888,
     891,   895,   899,   903,   907,   911,   915,   919,   923,   926,
     928,   930,   934,   937,   941,   945,   949,   953,   957,   961,
     965
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     113,     0,    -1,    -1,   113,   114,    -1,   113,   120,    -1,
     113,   121,    -1,   113,   122,    -1,   113,   162,    -1,   113,
     163,    -1,   113,   164,    -1,   113,   165,    -1,   113,   170,
      -1,   113,   173,    -1,   113,   178,    -1,   113,   183,    -1,
     113,   182,    -1,   113,   185,    -1,   113,    97,    -1,   190,
       5,   193,     3,   115,     4,    -1,    -1,   115,   116,    -1,
     117,   208,    -1,   117,   208,   108,   118,    -1,    92,    -1,
     209,    -1,   119,    -1,   118,   108,   119,    -1,   118,   119,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,   190,    12,   195,   197,    -1,   190,    13,
     194,   197,    -1,    -1,   190,    14,   195,   126,   209,   205,
     205,   205,   123,   127,     3,   128,     4,    -1,    -1,   190,
      15,   195,   126,   209,   205,   205,   205,   124,   127,     3,
     128,     4,    -1,    -1,   190,    15,   195,   126,   209,   205,
     205,   205,   205,   125,   127,     3,   128,     4,    -1,    -1,
      16,   109,   206,    -1,    -1,   127,    17,   198,    -1,   127,
      18,   190,    -1,   127,    19,   202,    -1,   127,    16,   206,
      -1,   127,    18,   198,    -1,   127,    41,   206,   108,   198,
      -1,   127,    41,   206,   108,   198,   205,    -1,   127,    41,
     206,   108,   198,   205,   205,    -1,   127,    41,   206,   108,
     198,   205,   205,   205,    -1,   127,    57,   190,    -1,   127,
      55,   206,    -1,   127,    54,   206,   205,    -1,   127,    56,
     206,    -1,    -1,   128,   129,    -1,    -1,    20,   153,   130,
     151,    -1,    -1,    21,   153,   131,   151,    -1,    -1,    22,
     153,   132,   151,    -1,    -1,    38,   153,   133,   151,    -1,
      -1,    23,   153,   134,   151,    -1,    -1,    24,   135,   151,
      -1,    10,   153,   206,   152,   156,   205,   205,   205,   205,
     204,   155,    -1,    10,   153,   206,   152,   156,   205,   205,
     205,   205,   205,   205,   155,    -1,    -1,    25,   153,   136,
     151,    -1,    -1,    26,   153,   137,   151,    -1,    -1,    27,
     138,   151,    -1,    -1,    28,   153,   139,   151,    -1,    -1,
      39,   153,   140,   151,    -1,    42,   192,   206,   205,   205,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   155,
      -1,    42,   192,   206,   205,   205,   205,   205,   158,   204,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   158,
     205,   205,   155,    -1,    -1,    40,   153,   141,   151,    -1,
      -1,    29,   142,   151,    -1,    -1,    30,   153,   143,   151,
      -1,    -1,    31,   153,   144,   151,    -1,    -1,    32,   153,
     145,   151,    -1,    -1,    33,   153,   146,   151,    -1,    -1,
      34,   153,   147,   151,    -1,    -1,    35,   148,   151,    -1,
      -1,    36,   153,   149,   151,    -1,    -1,    37,   192,   206,
     108,   206,   108,   206,   108,   206,   108,   206,   108,   150,
     202,   204,    -1,   206,   205,   205,   205,   205,   155,    -1,
     206,   205,   205,   205,   205,   160,   204,   155,    -1,   206,
     205,   205,   205,   205,   160,   205,   205,   155,    -1,   108,
     154,    -1,    -1,   154,   108,    -1,   209,    -1,   198,    -1,
      -1,     3,   174,     4,    -1,    -1,   108,   157,   202,    -1,
      -1,   108,   159,   202,    -1,    -1,   108,   161,   202,    -1,
     190,    41,   194,   197,    -1,   190,    42,   194,   197,    -1,
      54,   206,   205,    -1,   190,    57,   193,     3,   166,     4,
      -1,    -1,   166,   167,    -1,    59,   198,   205,   168,    -1,
      59,    60,    -1,    61,   198,   168,     3,   166,     4,    -1,
      -1,   168,   108,   169,    -1,   168,   169,    -1,    62,    -1,
      63,    -1,    64,    -1,    65,    -1,    66,    -1,    67,    -1,
     190,    58,   193,     3,   171,     4,    -1,    -1,   171,   172,
      -1,    59,   198,    -1,    59,   198,   205,    -1,    59,   198,
     205,   205,   204,    -1,    59,    60,    -1,    61,   198,     3,
     171,     4,    -1,    61,   198,   205,     3,   171,     4,    -1,
      61,   198,   205,   205,     3,   171,     4,    -1,    61,   198,
     205,   205,   205,   204,     3,   171,     4,    -1,   190,    68,
     195,   197,    -1,    -1,   175,   176,    -1,    -1,   177,    -1,
     200,    -1,   201,    -1,   207,    -1,   177,   108,   200,    -1,
     177,   108,   201,    -1,   177,   108,   207,    -1,   177,   108,
      -1,    -1,    70,   193,     3,   179,   180,     4,    -1,    -1,
     180,   206,   198,    -1,   180,   206,   108,   198,    -1,   180,
       1,    -1,   190,    -1,    48,    -1,    69,    -1,    49,    -1,
      50,    -1,    51,    -1,    45,    -1,    46,    -1,    43,    -1,
      44,    -1,   190,   181,   193,     3,   174,     4,    -1,   190,
     181,   193,   197,    -1,   190,    52,   193,   206,   205,     3,
     184,     4,    -1,    -1,   184,    53,   190,    -1,   184,    60,
      -1,   190,    71,   186,     3,   187,     4,    -1,    -1,   186,
      72,   206,   205,   205,   205,    -1,   186,    73,   206,   205,
     205,   205,    -1,   186,    74,   206,    -1,   186,    75,   206,
      -1,   186,    76,   206,    -1,   186,    77,   206,    -1,   186,
      78,   206,    -1,    -1,   187,    79,     3,    82,     3,   188,
       4,     4,    -1,   187,    80,     3,    81,   198,   189,     4,
      -1,    -1,   188,    81,   198,   108,   198,    -1,    -1,   189,
     205,   205,    -1,   209,    -1,   191,    -1,   199,    -1,    93,
      -1,   209,   108,    -1,   191,    -1,   191,   108,    -1,    -1,
     193,   196,    -1,   193,    55,   206,    -1,   193,    54,   206,
     205,    -1,   193,    56,   206,    -1,    -1,   194,   196,    -1,
      -1,   195,   196,    -1,    83,    -1,    84,    -1,    85,    -1,
      86,    -1,    87,    -1,    88,    -1,    89,    -1,    92,    -1,
      93,    -1,   199,    -1,   198,   199,    -1,    91,    -1,    92,
      -1,    96,    -1,   200,    96,    -1,    95,    -1,   201,    95,
      -1,   203,    -1,    90,   203,    -1,   202,    98,   203,    -1,
     202,    98,    90,   203,    -1,    94,    -1,   110,   206,   111,
      -1,    -1,   205,    -1,   108,   206,    -1,   207,    -1,    94,
      -1,   110,   207,   111,    -1,   106,   207,    -1,   102,   207,
      -1,   207,   103,   207,    -1,   207,   104,   207,    -1,   207,
     105,   207,    -1,   207,   101,   207,    -1,   207,   102,   207,
      -1,   207,   100,   207,    -1,   207,    99,   207,    -1,   207,
      98,   207,    -1,   108,   209,    -1,   210,    -1,    94,    -1,
     110,   207,   111,    -1,   106,   207,    -1,   210,   103,   207,
      -1,   210,   104,   207,    -1,   210,   105,   207,    -1,   210,
     101,   207,    -1,   210,   102,   207,    -1,   210,   100,   207,
      -1,   210,    99,   207,    -1,   210,    98,   207,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   177,   177,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   199,   210,
     213,   234,   239,   251,   271,   281,   285,   290,   297,   301,
     306,   310,   314,   318,   327,   339,   353,   351,   378,   376,
     405,   403,   435,   438,   444,   446,   452,   456,   461,   465,
     469,   482,   497,   512,   527,   531,   535,   539,   545,   547,
     559,   558,   571,   570,   583,   582,   595,   594,   610,   609,
     622,   621,   635,   646,   656,   655,   668,   667,   680,   679,
     692,   691,   704,   703,   718,   723,   729,   735,   742,   741,
     757,   756,   769,   768,   781,   780,   792,   791,   804,   803,
     816,   815,   828,   827,   840,   839,   853,   851,   872,   883,
     894,   906,   917,   920,   924,   929,   939,   942,   952,   951,
     958,   957,   964,   963,   971,   983,   996,  1005,  1016,  1019,
    1036,  1040,  1044,  1052,  1055,  1059,  1066,  1070,  1074,  1078,
    1082,  1086,  1095,  1106,  1109,  1126,  1130,  1134,  1138,  1142,
    1146,  1150,  1154,  1164,  1177,  1177,  1189,  1193,  1200,  1208,
    1216,  1224,  1233,  1242,  1251,  1261,  1260,  1265,  1267,  1272,
    1277,  1285,  1289,  1294,  1299,  1304,  1309,  1314,  1319,  1324,
    1329,  1340,  1347,  1357,  1363,  1364,  1383,  1408,  1419,  1424,
    1430,  1436,  1441,  1446,  1451,  1456,  1471,  1474,  1478,  1486,
    1489,  1497,  1500,  1509,  1514,  1523,  1527,  1537,  1542,  1546,
    1557,  1563,  1569,  1574,  1579,  1590,  1595,  1607,  1612,  1624,
    1629,  1634,  1639,  1644,  1649,  1654,  1664,  1668,  1676,  1681,
    1696,  1700,  1709,  1713,  1725,  1729,  1751,  1755,  1759,  1763,
    1770,  1774,  1784,  1787,  1796,  1805,  1814,  1818,  1822,  1827,
    1832,  1837,  1842,  1847,  1852,  1857,  1862,  1867,  1878,  1887,
    1898,  1902,  1906,  1911,  1916,  1921,  1926,  1931,  1936,  1941,
    1946
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BEG", "END", "ACCELERATORS", "VIRTKEY",
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR",
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE",
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX",
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT",
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3",
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "ANICURSOR",
  "ANIICON", "DLGINCLUDE", "DLGINIT", "FONTDIR", "HTML", "MANIFEST",
  "PLUGPLAY", "VXD", "TOOLBAR", "BUTTON", "LANGUAGE", "CHARACTERISTICS",
  "VERSIONK", "MENU", "MENUEX", "MENUITEM", "SEPARATOR", "POPUP",
  "CHECKED", "GRAYED", "HELP", "INACTIVE", "MENUBARBREAK", "MENUBREAK",
  "MESSAGETABLE", "RCDATA", "STRINGTABLE", "VERSIONINFO", "FILEVERSION",
  "PRODUCTVERSION", "FILEFLAGSMASK", "FILEFLAGS", "FILEOS", "FILETYPE",
  "FILESUBTYPE", "BLOCKSTRINGFILEINFO", "BLOCKVARFILEINFO", "VALUE",
  "BLOCK", "MOVEABLE", "FIXED", "PURE", "IMPURE", "PRELOAD", "LOADONCALL",
  "DISCARDABLE", "NOT", "QUOTEDUNISTRING", "QUOTEDSTRING", "STRING",
  "NUMBER", "SIZEDUNISTRING", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'",
  "'&'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='",
  "'('", "')'", "$accept", "input", "accelerator", "acc_entries",
  "acc_entry", "acc_event", "acc_options", "acc_option", "bitmap",
  "cursor", "dialog", "@@1", "@@2", "@@3", "exstyle", "styles", "controls",
  "control", "@@4", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10", "@@11", "@@12",
  "@@13", "@@14", "@@15", "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22",
  "@@23", "@@24", "control_params", "cresid", "optresidc", "resid",
  "opt_control_data", "control_styleexpr", "@@25", "icon_styleexpr", "@@26",
  "control_params_styleexpr", "@@27", "font", "icon", "language", "menu",
  "menuitems", "menuitem", "menuitem_flags", "menuitem_flag", "menuex",
  "menuexitems", "menuexitem", "messagetable", "optrcdata_data", "@@28",
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", "string_data",
  "rcdata_id", "user", "toolbar", "toolbar_data", "versioninfo",
  "fixedverinfo", "verblocks", "vervals", "vertrans", "id", "resname",
  "resref", "suboptions", "memflags_move_discard", "memflags_move",
  "memflag", "file_name", "res_unicode_string_concat",
  "res_unicode_string", "sizedstring", "sizedunistring", "styleexpr",
  "parennumber", "optcnumexpr", "cnumexpr", "numexpr", "sizednumexpr",
  "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   124,    94,
      38,    43,    45,    42,    47,    37,   126,   353,    44,    61,
      40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   113,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   118,   119,   119,
     119,   119,   119,   119,   120,   121,   123,   122,   124,   122,
     125,   122,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
     130,   129,   131,   129,   132,   129,   133,   129,   134,   129,
     135,   129,   129,   129,   136,   129,   137,   129,   138,   129,
     139,   129,   140,   129,   129,   129,   129,   129,   141,   129,
     142,   129,   143,   129,   144,   129,   145,   129,   146,   129,
     147,   129,   148,   129,   149,   129,   150,   129,   151,   151,
     151,   152,   153,   153,   154,   154,   155,   155,   157,   156,
     159,   158,   161,   160,   162,   163,   164,   165,   166,   166,
     167,   167,   167,   168,   168,   168,   169,   169,   169,   169,
     169,   169,   170,   171,   171,   172,   172,   172,   172,   172,
     172,   172,   172,   173,   175,   174,   176,   176,   177,   177,
     177,   177,   177,   177,   177,   179,   178,   180,   180,   180,
     180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   182,   182,   183,   184,   184,   184,   185,   186,   186,
     186,   186,   186,   186,   186,   186,   187,   187,   187,   188,
     188,   189,   189,   190,   190,   191,   191,   192,   192,   192,
     193,   193,   193,   193,   193,   194,   194,   195,   195,   196,
     196,   196,   196,   196,   196,   196,   197,   197,   198,   198,
     199,   199,   200,   200,   201,   201,   202,   202,   202,   202,
     203,   203,   204,   204,   205,   206,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   207,   207,   208,   209,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     3,     3,     3,
       5,     6,     7,     8,     3,     3,     4,     3,     0,     2,
       0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     3,    11,    12,     0,     4,     0,     4,     0,     3,
       0,     4,     0,     4,     6,     8,    10,    11,     0,     4,
       0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     4,     0,     3,     0,     4,     0,    15,     6,     8,
       9,     2,     0,     2,     1,     1,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     0,     2,     0,     1,     1,     1,
       1,     3,     3,     3,     2,     0,     6,     0,     3,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     6,     4,     8,     0,     3,     2,     6,     0,     6,
       6,     3,     3,     3,     3,     3,     0,     8,     7,     0,
       5,     0,     3,     1,     1,     1,     1,     2,     1,     2,
       0,     2,     3,     4,     3,     0,     2,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     2,     1,     2,     1,     2,     3,     4,
       1,     3,     0,     1,     2,     1,     1,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     1,
       1,     3,     2,     3,     3,     3,     3,     3,     3,     3,
       3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       2,     0,     1,     0,   210,   230,   231,   206,   260,    17,
       0,     0,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    15,    14,    16,     0,   204,   205,   203,
     259,   246,     0,     0,     0,     0,   245,     0,   262,     0,
     210,   217,   215,   217,   217,   215,   215,   179,   180,   177,
     178,   172,   174,   175,   176,   210,   210,   210,   217,   173,
     188,   210,   171,     0,     0,     0,     0,     0,     0,     0,
       0,   249,   248,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,   219,   220,
     221,   222,   223,   224,   225,   211,   261,     0,     0,     0,
      42,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     270,   269,   268,   266,   267,   263,   264,   265,   247,   244,
     257,   256,   255,   253,   254,   250,   251,   252,   167,     0,
     212,   214,    19,   226,   227,   218,    34,   216,    35,     0,
       0,     0,   124,   125,     0,   128,   143,   153,   196,     0,
       0,     0,     0,     0,     0,     0,   154,   182,     0,   213,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     191,   192,   193,   194,   195,     0,   156,   170,   166,     0,
      18,    23,    20,     0,    24,    43,     0,     0,   184,   127,
       0,     0,   129,   142,     0,     0,   144,   187,     0,     0,
       0,     0,   181,   234,   232,   155,   157,   158,   159,   160,
       0,   168,   228,     0,    21,     0,     0,     0,   131,     0,
     133,   148,   145,     0,     0,     0,     0,     0,   164,   233,
     235,   169,   229,   258,     0,    36,    38,   183,     0,   186,
     133,     0,   146,   143,     0,     0,     0,   189,   190,   161,
     162,   163,    28,    29,    30,    31,    32,    33,    22,    25,
      44,    44,    40,   185,   130,   128,   136,   137,   138,   139,
     140,   141,     0,   135,   242,     0,   143,     0,   199,   201,
       0,    27,     0,     0,    44,     0,   134,   147,   243,   149,
       0,   143,   242,     0,     0,    26,    58,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    58,     0,   132,   150,
       0,     0,     0,     0,   198,     0,     0,    48,    45,    46,
      49,   205,     0,   240,     0,    47,   236,     0,     0,    55,
      57,    54,     0,    58,   151,   143,   197,     0,   202,    37,
     112,   112,   112,   112,   112,    70,   112,   112,    78,   112,
      90,   112,   112,   112,   112,   112,   102,   112,     0,   112,
     112,   112,     0,    59,   237,     0,     0,     0,    56,    39,
       0,     0,     0,     0,     0,   115,   114,    60,    62,    64,
      68,     0,    74,    76,     0,    80,     0,    92,    94,    96,
      98,   100,     0,   104,   208,     0,     0,    66,    82,    88,
       0,   241,     0,   238,    50,    41,   152,   200,     0,   113,
       0,     0,     0,     0,    71,     0,     0,     0,    79,     0,
      91,     0,     0,     0,     0,     0,   103,     0,   209,     0,
     207,     0,     0,     0,     0,   239,    51,     0,     0,    61,
      63,    65,    69,     0,    75,    77,    81,    93,    95,    97,
      99,   101,   105,     0,    67,    83,    89,     0,    52,   111,
     118,     0,     0,     0,   116,    53,     0,     0,     0,     0,
     154,    84,     0,   119,     0,   116,     0,     0,   116,     0,
     122,   108,   242,     0,   117,   120,    85,   242,   242,     0,
     116,   243,     0,     0,   116,   243,   116,   243,   123,   109,
     116,     0,   121,    86,   116,    72,   116,   110,     0,    87,
      73,   106,     0,   242,   107
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,    12,   160,   182,   183,   258,   259,    13,    14,
      15,   260,   261,   284,   140,   282,   316,   363,   410,   411,
     412,   431,   413,   381,   416,   417,   384,   419,   432,   433,
     386,   421,   422,   423,   424,   425,   392,   427,   512,   414,
     438,   373,   374,   471,   461,   466,   487,   493,   482,   489,
      16,    17,    18,    19,   165,   192,   241,   273,    20,   166,
     196,    21,   175,   176,   205,   206,    22,   128,   158,    61,
      23,    24,   217,    25,   108,   167,   293,   294,    26,    27,
     395,    37,    99,    98,    95,   136,   375,   212,   207,   208,
     325,   326,   287,   288,   415,    36,   214,   376,    30
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -309
static const yytype_int16 yypact[] =
{
    -309,    68,  -309,   338,  -309,  -309,  -309,  -309,  -309,  -309,
     338,   338,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,   458,  -309,  -309,  -309,
     605,  -309,   338,   338,   338,   -92,   642,   230,  -309,   534,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,   338,   338,   338,   338,   338,   338,   338,
     338,  -309,  -309,   695,   338,  -309,   338,   338,   338,   338,
     338,   338,   338,   338,  -309,   338,   338,   338,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,   329,   724,   724,
     242,   242,   724,   724,   499,   434,   457,   724,   192,   250,
     392,   718,   318,   174,   174,  -309,  -309,  -309,  -309,  -309,
     392,   718,   318,   174,   174,  -309,  -309,  -309,  -309,   -92,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   -81,
     263,   263,  -309,  -309,   -92,  -309,  -309,  -309,  -309,   338,
     338,   338,   338,   338,   338,   338,  -309,  -309,     6,  -309,
      13,   338,   -92,   -92,    48,     8,   105,    35,   -92,   -92,
    -309,  -309,  -309,  -309,  -309,    53,   373,  -309,  -309,   -38,
    -309,  -309,  -309,   -48,  -309,  -309,   -92,   -92,  -309,  -309,
     -36,     7,  -309,  -309,    80,     7,  -309,  -309,    60,   103,
     -92,   -92,  -309,  -309,  -309,  -309,    17,    38,    47,   642,
       7,     7,  -309,   263,    65,   -92,   -92,    -1,  -309,   163,
       7,  -309,   163,    12,    74,    94,   -92,   -92,   373,  -309,
    -309,     7,  -309,  -309,   818,  -309,   -92,  -309,   253,  -309,
    -309,   184,   -92,  -309,     5,   177,     7,  -309,  -309,    38,
      47,   642,  -309,  -309,  -309,  -309,  -309,  -309,    25,  -309,
    -309,  -309,  -309,  -309,   155,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,   768,  -309,   -92,   120,  -309,    10,  -309,     7,
     818,  -309,   556,   562,  -309,   137,  -309,  -309,  -309,  -309,
     141,  -309,   -92,    21,     2,  -309,  -309,   338,     7,   253,
     -46,   338,   338,   338,   338,   253,  -309,   573,  -309,  -309,
     153,   188,   172,     7,  -309,   -92,   655,  -309,     7,  -309,
       7,    40,    27,  -309,   338,    99,  -309,    93,   -92,  -309,
    -309,  -309,   692,  -309,  -309,  -309,  -309,   168,  -309,  -309,
     258,   258,   258,   258,   258,  -309,   258,   258,  -309,   258,
    -309,   258,   258,   258,   258,   258,  -309,   258,   253,   258,
     258,   258,   253,  -309,  -309,    95,    98,     7,  -309,  -309,
     729,   173,     7,   338,   102,     7,  -309,  -309,  -309,  -309,
    -309,   338,  -309,  -309,   338,  -309,   338,  -309,  -309,  -309,
    -309,  -309,   338,  -309,   117,   338,   123,  -309,  -309,  -309,
     338,  -309,    27,  -309,   163,  -309,  -309,     7,   128,  -309,
     338,   338,   338,   338,  -309,   -92,   338,   338,  -309,   338,
    -309,   338,   338,   338,   338,   338,  -309,   338,  -309,   131,
    -309,   338,   338,   338,   -92,  -309,   -92,   258,   132,  -309,
    -309,  -309,  -309,   -92,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,   338,  -309,  -309,  -309,   -92,   -92,  -309,
    -309,   -92,   -92,   149,    18,  -309,   -46,   -92,   -92,   338,
    -309,  -309,   -92,    99,   -92,    19,   154,   203,    20,   -92,
    -309,  -309,   -92,   338,  -309,  -309,  -309,   -92,   -92,   -46,
     225,   -92,   165,   -46,   225,   -92,   225,   -92,    99,  -309,
     225,   338,    99,  -309,   225,  -309,   225,  -309,   182,  -309,
    -309,  -309,   -46,   -71,  -309
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -240,  -309,  -309,
    -309,  -309,  -309,  -309,   144,  -235,  -295,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   239,
    -309,   431,  -156,  -100,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,    26,  -309,    56,    39,  -309,  -196,
    -309,  -309,  -173,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   -25,  -265,
     -55,   232,     0,   333,   432,   375,  -129,     4,    82,    84,
    -237,  -308,  -283,   -33,    -3,     9,  -309,     3,  -309
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -229
static const yytype_int16 yytable[] =
{
      35,    62,    75,   237,    29,    28,   314,   177,   276,   311,
     178,   332,   189,   291,   364,   243,    74,   180,   281,    38,
      39,   470,   470,   470,   218,   312,   283,   366,   161,    29,
      28,   252,   253,   254,   255,   256,   257,    74,   370,   197,
     295,    71,    72,    73,   322,   102,   103,   275,   323,   307,
     211,   188,   238,     5,     6,     5,     6,   202,   403,   239,
     213,   219,   220,   224,   324,   222,   223,   190,     2,   191,
     210,   119,   110,   111,   112,   113,   114,   115,   116,   117,
     290,   231,   129,   130,   131,   120,   121,   122,   123,   124,
     125,   126,   127,   394,   435,   310,   159,   394,     5,     6,
      31,   144,   313,     5,     6,   181,   225,     8,    32,   193,
      74,   164,    33,    74,   198,   199,    34,   279,    74,    10,
      74,   323,     3,    11,   289,   228,    74,   480,   485,   186,
     187,  -228,  -228,   280,   229,   200,   201,   324,     4,   371,
     221,   308,   230,   162,   163,   309,   168,   169,   170,   171,
     172,   173,   174,   215,   216,   179,   245,   334,   185,     5,
       6,     7,     8,   184,   194,     9,   195,   226,   227,   318,
     320,     5,     6,   234,    10,   246,   336,   406,    11,   194,
     278,   195,   235,   236,   337,   209,   240,   265,   402,   242,
     244,   335,   323,   247,   248,   148,   190,   366,   191,   490,
     194,   367,   195,   262,   494,   496,   401,   484,   324,   274,
     409,   277,   194,   263,   195,   232,   233,   266,   267,   268,
     269,   270,   271,   232,   232,   428,   232,   232,   470,   473,
     514,   430,   194,    84,   195,   232,   437,   251,   404,   453,
     460,    29,    28,   407,   292,   141,   266,   267,   268,   269,
     270,   271,   498,   156,     5,     6,   502,   469,   139,     5,
       6,   315,   483,   272,   149,   150,   151,   152,   153,   154,
     155,    74,    97,   501,   319,   513,   372,    81,    82,    83,
     331,   459,   338,   232,    85,    86,    87,   104,   105,   106,
     511,   285,   272,   109,   317,   368,   264,   477,   327,   328,
     329,   330,    29,   321,    85,    86,    87,   400,    29,    28,
     249,   286,   250,    88,    89,    90,    91,    92,    93,    94,
       0,   365,   232,     0,   232,    88,    89,    90,    91,    92,
      93,    94,   132,    88,    89,    90,    91,    92,    93,    94,
       0,   232,   133,   134,     5,     6,     7,     8,     0,     5,
       6,     0,     8,     0,     0,     0,     0,     8,     0,    10,
       0,   396,    28,    11,    10,   396,    28,     0,    11,    10,
     408,   436,     0,    11,     0,   481,   100,   101,   486,   232,
       0,     0,   443,    85,    86,    87,     0,     0,     0,     0,
     499,   107,   429,     0,   503,     0,   505,   434,     0,     0,
     507,   457,     0,   458,   509,     0,   510,     0,   232,     0,
     462,   232,    88,    89,    90,    91,    92,    93,    94,    79,
      80,    81,    82,    83,   464,   465,     0,     0,   467,   468,
       0,   472,    31,     0,   474,   475,     0,   145,     0,   478,
      32,   479,     0,     0,    33,     0,   488,     0,    34,   491,
     463,     0,     0,     0,   495,   497,     0,     0,   500,     0,
     146,     0,   504,    40,   506,     0,   476,    31,   203,   204,
      41,    42,    43,    44,   138,    32,     0,   142,   143,    33,
     492,     0,   147,    34,   157,     0,     0,     0,    85,    86,
      87,    77,    78,    79,    80,    81,    82,    83,   508,    45,
      46,    47,    48,    49,    50,     0,    51,    52,    53,    54,
      55,    85,    86,    87,     0,    56,    57,    88,    89,    90,
      91,    92,    93,    94,     0,     0,    58,    59,     0,    60,
     135,   137,   135,   135,   137,   137,     0,     0,     0,   135,
      88,    89,    90,    91,    92,    93,    94,     0,     0,     5,
       6,     7,     8,    85,    86,    87,     0,     0,     0,   296,
       0,     0,     0,     0,    10,   306,     0,     0,    11,     0,
       0,     0,   297,   298,   299,   300,   333,     0,   297,   298,
     299,   300,    88,    89,    90,    91,    92,    93,    94,   297,
     298,   299,   300,    31,     0,     0,     0,   301,     0,     0,
       0,    32,     0,   301,     0,    33,     0,     0,     0,    34,
     302,   303,   304,   305,   301,     0,   302,   303,   304,   305,
       0,     0,     0,   418,     0,   420,     0,   302,   303,   304,
     305,   426,    76,    77,    78,    79,    80,    81,    82,    83,
       0,     0,     0,     0,     0,    96,     0,     0,     0,   439,
     440,   441,   442,     0,     0,   444,   445,     0,   446,   339,
     447,   448,   449,   450,   451,   340,   452,     0,     0,     0,
     454,   455,   456,     0,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   369,   362,     0,     0,
       0,     0,   340,    63,    64,    65,    66,    67,    68,    69,
      70,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   405,   362,     0,     0,     0,     0,   340,
      76,    77,    78,    79,    80,    81,    82,    83,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,   362,   377,   378,   379,   380,     0,   382,   383,     0,
     385,     0,   387,   388,   389,   390,   391,     0,   393,     0,
     397,   398,   399,    76,    77,    78,    79,    80,    81,    82,
      83,     0,     0,     0,     0,     0,   118,    88,    89,    90,
      91,    92,    93,    94,     0,     0,   133,   134,    78,    79,
      80,    81,    82,    83,   252,   253,   254,   255,   256,   257,
     266,   267,   268,   269,   270,   271
};

static const yytype_int16 yycheck[] =
{
       3,    26,    35,     4,     1,     1,     4,     1,     3,   292,
       4,   306,     4,     3,   322,     3,   108,     4,   258,    10,
      11,     3,     3,     3,    60,     4,   261,    98,   109,    26,
      26,     6,     7,     8,     9,    10,    11,   108,   333,     4,
     280,    32,    33,    34,    90,    45,    46,   243,    94,   284,
     179,     3,    53,    91,    92,    91,    92,     4,   366,    60,
     108,   190,   191,     3,   110,   194,   195,    59,     0,    61,
     108,    74,    63,    64,    65,    66,    67,    68,    69,    70,
     276,   210,    85,    86,    87,    76,    77,    78,    79,    80,
      81,    82,    83,   358,   402,   291,   129,   362,    91,    92,
      94,   104,    81,    91,    92,    92,     3,    94,   102,     4,
     108,   144,   106,   108,    79,    80,   110,   246,   108,   106,
     108,    94,    54,   110,     4,   108,   108,   108,   108,   162,
     163,    91,    92,   108,    96,   168,   169,   110,    70,   335,
      60,     4,    95,   140,   141,     4,   149,   150,   151,   152,
     153,   154,   155,   186,   187,   158,    82,     4,   161,    91,
      92,    93,    94,   160,    59,    97,    61,   200,   201,   298,
     299,    91,    92,   108,   106,    81,     4,     4,   110,    59,
       3,    61,   215,   216,   313,   176,   219,     3,    90,   222,
     223,     3,    94,   226,   227,     3,    59,    98,    61,   482,
      59,   108,    61,   236,   487,   488,   111,     4,   110,   242,
     108,   244,    59,   238,    61,   211,   213,    62,    63,    64,
      65,    66,    67,   219,   220,   108,   222,   223,     3,   466,
     513,   108,    59,     3,    61,   231,   108,   228,   367,   108,
     108,   238,   238,   372,   277,   101,    62,    63,    64,    65,
      66,    67,   489,     3,    91,    92,   493,   108,    16,    91,
      92,   294,   108,   108,    72,    73,    74,    75,    76,    77,
      78,   108,    40,   108,   299,   512,   108,   103,   104,   105,
     305,   437,   315,   279,    54,    55,    56,    55,    56,    57,
     108,   265,   108,    61,   297,   328,   240,   470,   301,   302,
     303,   304,   299,   299,    54,    55,    56,   362,   305,   305,
     228,   272,   228,    83,    84,    85,    86,    87,    88,    89,
      -1,   324,   318,    -1,   320,    83,    84,    85,    86,    87,
      88,    89,     3,    83,    84,    85,    86,    87,    88,    89,
      -1,   337,    92,    93,    91,    92,    93,    94,    -1,    91,
      92,    -1,    94,    -1,    -1,    -1,    -1,    94,    -1,   106,
      -1,   358,   358,   110,   106,   362,   362,    -1,   110,   106,
     373,   404,    -1,   110,    -1,   475,    43,    44,   478,   375,
      -1,    -1,   415,    54,    55,    56,    -1,    -1,    -1,    -1,
     490,    58,   395,    -1,   494,    -1,   496,   400,    -1,    -1,
     500,   434,    -1,   436,   504,    -1,   506,    -1,   404,    -1,
     443,   407,    83,    84,    85,    86,    87,    88,    89,   101,
     102,   103,   104,   105,   457,   458,    -1,    -1,   461,   462,
      -1,   464,    94,    -1,   467,   468,    -1,     3,    -1,   472,
     102,   474,    -1,    -1,   106,    -1,   479,    -1,   110,   482,
     453,    -1,    -1,    -1,   487,   488,    -1,    -1,   491,    -1,
       3,    -1,   495,     5,   497,    -1,   469,    94,    95,    96,
      12,    13,    14,    15,    99,   102,    -1,   102,   103,   106,
     483,    -1,   107,   110,   109,    -1,    -1,    -1,    54,    55,
      56,    99,   100,   101,   102,   103,   104,   105,   501,    41,
      42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    54,    55,    56,    -1,    57,    58,    83,    84,    85,
      86,    87,    88,    89,    -1,    -1,    68,    69,    -1,    71,
      98,    99,   100,   101,   102,   103,    -1,    -1,    -1,   107,
      83,    84,    85,    86,    87,    88,    89,    -1,    -1,    91,
      92,    93,    94,    54,    55,    56,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,   106,     3,    -1,    -1,   110,    -1,
      -1,    -1,    16,    17,    18,    19,     3,    -1,    16,    17,
      18,    19,    83,    84,    85,    86,    87,    88,    89,    16,
      17,    18,    19,    94,    -1,    -1,    -1,    41,    -1,    -1,
      -1,   102,    -1,    41,    -1,   106,    -1,    -1,    -1,   110,
      54,    55,    56,    57,    41,    -1,    54,    55,    56,    57,
      -1,    -1,    -1,   384,    -1,   386,    -1,    54,    55,    56,
      57,   392,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,   410,
     411,   412,   413,    -1,    -1,   416,   417,    -1,   419,     4,
     421,   422,   423,   424,   425,    10,   427,    -1,    -1,    -1,
     431,   432,   433,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     4,    42,    -1,    -1,
      -1,    -1,    10,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,   341,   342,   343,   344,    -1,   346,   347,    -1,
     349,    -1,   351,   352,   353,   354,   355,    -1,   357,    -1,
     359,   360,   361,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,    -1,    -1,    -1,   111,    83,    84,    85,
      86,    87,    88,    89,    -1,    -1,    92,    93,   100,   101,
     102,   103,   104,   105,     6,     7,     8,     9,    10,    11,
      62,    63,    64,    65,    66,    67
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   113,     0,    54,    70,    91,    92,    93,    94,    97,
     106,   110,   114,   120,   121,   122,   162,   163,   164,   165,
     170,   173,   178,   182,   183,   185,   190,   191,   199,   209,
     210,    94,   102,   106,   110,   206,   207,   193,   207,   207,
       5,    12,    13,    14,    15,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    57,    58,    68,    69,
      71,   181,   190,    98,    99,   100,   101,   102,   103,   104,
     105,   207,   207,   207,   108,   205,    98,    99,   100,   101,
     102,   103,   104,   105,     3,    54,    55,    56,    83,    84,
      85,    86,    87,    88,    89,   196,   111,   193,   195,   194,
     195,   195,   194,   194,   193,   193,   193,   195,   186,   193,
     207,   207,   207,   207,   207,   207,   207,   207,   111,   206,
     207,   207,   207,   207,   207,   207,   207,   207,   179,   206,
     206,   206,     3,    92,    93,   196,   197,   196,   197,    16,
     126,   126,   197,   197,   206,     3,     3,   197,     3,    72,
      73,    74,    75,    76,    77,    78,     3,   197,   180,   205,
     115,   109,   209,   209,   205,   166,   171,   187,   206,   206,
     206,   206,   206,   206,   206,   174,   175,     1,     4,   206,
       4,    92,   116,   117,   209,   206,   205,   205,     3,     4,
      59,    61,   167,     4,    59,    61,   172,     4,    79,    80,
     205,   205,     4,    95,    96,   176,   177,   200,   201,   207,
     108,   198,   199,   108,   208,   205,   205,   184,    60,   198,
     198,    60,   198,   198,     3,     3,   205,   205,   108,    96,
      95,   198,   199,   209,   108,   205,   205,     4,    53,    60,
     205,   168,   205,     3,   205,    82,    81,   205,   205,   200,
     201,   207,     6,     7,     8,     9,    10,    11,   118,   119,
     123,   124,   205,   190,   168,     3,    62,    63,    64,    65,
      66,    67,   108,   169,   205,   171,     3,   205,     3,   198,
     108,   119,   127,   127,   125,   166,   169,   204,   205,     4,
     171,     3,   205,   188,   189,   119,     3,    16,    17,    18,
      19,    41,    54,    55,    56,    57,     3,   127,     4,     4,
     171,   204,     4,    81,     4,   205,   128,   206,   198,   190,
     198,   199,    90,    94,   110,   202,   203,   206,   206,   206,
     206,   190,   128,     3,     4,     3,     4,   198,   205,     4,
      10,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    42,   129,   203,   206,    98,   108,   205,     4,
     128,   171,   108,   153,   154,   198,   209,   153,   153,   153,
     153,   135,   153,   153,   138,   153,   142,   153,   153,   153,
     153,   153,   148,   153,   191,   192,   209,   153,   153,   153,
     192,   111,    90,   203,   198,     4,     4,   198,   206,   108,
     130,   131,   132,   134,   151,   206,   136,   137,   151,   139,
     151,   143,   144,   145,   146,   147,   151,   149,   108,   206,
     108,   133,   140,   141,   206,   203,   205,   108,   152,   151,
     151,   151,   151,   205,   151,   151,   151,   151,   151,   151,
     151,   151,   151,   108,   151,   151,   151,   205,   205,   154,
     108,   156,   205,   206,   205,   205,   157,   205,   205,   108,
       3,   155,   205,   202,   205,   205,   206,   174,   205,   205,
     108,   155,   160,   108,     4,   108,   155,   158,   205,   161,
     204,   205,   206,   159,   204,   205,   204,   205,   202,   155,
     205,   108,   202,   155,   205,   155,   205,   155,   206,   155,
     155,   108,   150,   202,   204
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 18:
#line 200 "rcparse.y"
    {
	    define_accelerator ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].pacc));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 19:
#line 210 "rcparse.y"
    {
	    (yyval.pacc) = NULL;
	  }
    break;

  case 20:
#line 214 "rcparse.y"
    {
	    rc_accelerator *a;

	    a = (rc_accelerator *) res_alloc (sizeof *a);
	    *a = (yyvsp[(2) - (2)].acc);
	    if ((yyvsp[(1) - (2)].pacc) == NULL)
	      (yyval.pacc) = a;
	    else
	      {
		rc_accelerator **pp;

		for (pp = &(yyvsp[(1) - (2)].pacc)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		(yyval.pacc) = (yyvsp[(1) - (2)].pacc);
	      }
	  }
    break;

  case 21:
#line 235 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (2)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 22:
#line 240 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (4)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (4)].il);
	    (yyval.acc).flags |= (yyvsp[(4) - (4)].is);
	    if (((yyval.acc).flags & ACC_VIRTKEY) == 0
		&& ((yyval.acc).flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;

  case 23:
#line 252 "rcparse.y"
    {
	    const char *s = (yyvsp[(1) - (1)].s);
	    char ch;

	    (yyval.acc).next = NULL;
	    (yyval.acc).id = 0;
	    ch = *s;
	    if (ch != '^')
	      (yyval.acc).flags = 0;
	    else
	      {
		(yyval.acc).flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = TOUPPER (s[0]);
	      }
	    (yyval.acc).key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;

  case 24:
#line 272 "rcparse.y"
    {
	    (yyval.acc).next = NULL;
	    (yyval.acc).flags = 0;
	    (yyval.acc).id = 0;
	    (yyval.acc).key = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 25:
#line 282 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (1)].is);
	  }
    break;

  case 26:
#line 286 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 27:
#line 291 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 28:
#line 298 "rcparse.y"
    {
	    (yyval.is) = ACC_VIRTKEY;
	  }
    break;

  case 29:
#line 302 "rcparse.y"
    {
	    /* This is just the absence of VIRTKEY.  */
	    (yyval.is) = 0;
	  }
    break;

  case 30:
#line 307 "rcparse.y"
    {
	    (yyval.is) = ACC_NOINVERT;
	  }
    break;

  case 31:
#line 311 "rcparse.y"
    {
	    (yyval.is) = ACC_SHIFT;
	  }
    break;

  case 32:
#line 315 "rcparse.y"
    {
	    (yyval.is) = ACC_CONTROL;
	  }
    break;

  case 33:
#line 319 "rcparse.y"
    {
	    (yyval.is) = ACC_ALT;
	  }
    break;

  case 34:
#line 328 "rcparse.y"
    {
	    define_bitmap ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 35:
#line 340 "rcparse.y"
    {
	    define_cursor ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 36:
#line 353 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 37:
#line 370 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 38:
#line 378 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 39:
#line 397 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 40:
#line 405 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (9)].il);
	      dialog.y = (yyvsp[(6) - (9)].il);
	      dialog.width = (yyvsp[(7) - (9)].il);
	      dialog.height = (yyvsp[(8) - (9)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (9)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.ex->help = (yyvsp[(9) - (9)].il);
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (9)].res_info);
	      style = 0;
	    }
    break;

  case 41:
#line 425 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (14)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 42:
#line 435 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 43:
#line 439 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 45:
#line 447 "rcparse.y"
    {
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    dialog.caption = (yyvsp[(3) - (3)].uni);
	  }
    break;

  case 46:
#line 453 "rcparse.y"
    {
	    dialog.class = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 47:
#line 458 "rcparse.y"
    {
	    dialog.style = style;
	  }
    break;

  case 48:
#line 462 "rcparse.y"
    {
	    dialog.exstyle = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 49:
#line 466 "rcparse.y"
    {
	    res_unistring_to_id (& dialog.class, (yyvsp[(3) - (3)].uni));
	  }
    break;

  case 50:
#line 470 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (5)].il);
	    dialog.font = (yyvsp[(5) - (5)].uni);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 51:
#line 483 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (6)].il);
	    dialog.font = (yyvsp[(5) - (6)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (6)].il);
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 52:
#line 498 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (7)].il);
	    dialog.font = (yyvsp[(5) - (7)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (7)].il);
		dialog.ex->italic = (yyvsp[(7) - (7)].il);
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 53:
#line 513 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (8)].il);
	    dialog.font = (yyvsp[(5) - (8)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (8)].il);
		dialog.ex->italic = (yyvsp[(7) - (8)].il);
		dialog.ex->charset = (yyvsp[(8) - (8)].il);
	      }
	  }
    break;

  case 54:
#line 528 "rcparse.y"
    {
	    dialog.menu = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 55:
#line 532 "rcparse.y"
    {
	    sub_res_info.characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 56:
#line 536 "rcparse.y"
    {
	    sub_res_info.language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 57:
#line 540 "rcparse.y"
    {
	    sub_res_info.version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 59:
#line 548 "rcparse.y"
    {
	    rc_dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = (yyvsp[(2) - (2)].dialog_control);
	  }
    break;

  case 60:
#line 559 "rcparse.y"
    {
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 61:
#line 567 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 62:
#line 571 "rcparse.y"
    {
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 63:
#line 579 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 64:
#line 583 "rcparse.y"
    {
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 65:
#line 591 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 66:
#line 595 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 67:
#line 603 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "BEDIT");
	  }
    break;

  case 68:
#line 610 "rcparse.y"
    {
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 69:
#line 618 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 70:
#line 622 "rcparse.y"
    {
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 71:
#line 632 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 72:
#line 637 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(6) - (11)].il), (yyvsp[(7) - (11)].il), (yyvsp[(8) - (11)].il), (yyvsp[(9) - (11)].il), (yyvsp[(4) - (11)].id), style, (yyvsp[(10) - (11)].il));
	    if ((yyvsp[(11) - (11)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(11) - (11)].rcdata_item);
	      }
	  }
    break;

  case 73:
#line 648 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (12)].id), (yyvsp[(3) - (12)].il), (yyvsp[(6) - (12)].il), (yyvsp[(7) - (12)].il), (yyvsp[(8) - (12)].il), (yyvsp[(9) - (12)].il), (yyvsp[(4) - (12)].id), style, (yyvsp[(10) - (12)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(11) - (12)].il);
	    (yyval.dialog_control)->data = (yyvsp[(12) - (12)].rcdata_item);
	  }
    break;

  case 74:
#line 656 "rcparse.y"
    {
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 75:
#line 664 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 76:
#line 668 "rcparse.y"
    {
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 77:
#line 676 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 78:
#line 680 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;

  case 79:
#line 688 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 80:
#line 692 "rcparse.y"
    {
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 81:
#line 700 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 82:
#line 704 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 83:
#line 712 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "HEDIT");
	  }
    break;

  case 84:
#line 719 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (6)].id), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), 0, 0, 0, (yyvsp[(6) - (6)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 85:
#line 725 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (8)].id), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), 0, 0, 0, (yyvsp[(8) - (8)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 86:
#line 731 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (10)].id), (yyvsp[(3) - (10)].il), (yyvsp[(4) - (10)].il), (yyvsp[(5) - (10)].il), style, (yyvsp[(9) - (10)].il), 0, (yyvsp[(10) - (10)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 87:
#line 737 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(4) - (11)].il), (yyvsp[(5) - (11)].il), style, (yyvsp[(9) - (11)].il), (yyvsp[(10) - (11)].il), (yyvsp[(11) - (11)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 88:
#line 742 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 89:
#line 750 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "IEDIT");
	  }
    break;

  case 90:
#line 757 "rcparse.y"
    {
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class.named = 0;
	      class.u.id = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 91:
#line 765 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 92:
#line 769 "rcparse.y"
    {
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 93:
#line 777 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 94:
#line 781 "rcparse.y"
    {
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	    }
    break;

  case 95:
#line 788 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 96:
#line 792 "rcparse.y"
    {
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 97:
#line 800 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 98:
#line 804 "rcparse.y"
    {
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 99:
#line 812 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 100:
#line 816 "rcparse.y"
    {
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 101:
#line 824 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 102:
#line 828 "rcparse.y"
    {
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;

  case 103:
#line 836 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 104:
#line 840 "rcparse.y"
    {
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 105:
#line 848 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 106:
#line 853 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 107:
#line 855 "rcparse.y"
    {
	    rc_res_id cid;
	    cid.named = 0;
	    cid.u.id = CTL_BUTTON;
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (15)].id), (yyvsp[(3) - (15)].il), (yyvsp[(5) - (15)].il), (yyvsp[(7) - (15)].il), (yyvsp[(9) - (15)].il), (yyvsp[(11) - (15)].il), cid,
				 style, (yyvsp[(15) - (15)].il));
	  }
    break;

  case 108:
#line 873 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (6)].il), (yyvsp[(2) - (6)].il), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if ((yyvsp[(6) - (6)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(6) - (6)].rcdata_item);
	      }
	  }
    break;

  case 109:
#line 885 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (8)].il), (yyvsp[(2) - (8)].il), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), class, style, (yyvsp[(7) - (8)].il));
	    if ((yyvsp[(8) - (8)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(8) - (8)].rcdata_item);
	      }
	  }
    break;

  case 110:
#line 896 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (9)].il), (yyvsp[(2) - (9)].il), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), class, style, (yyvsp[(7) - (9)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(8) - (9)].il);
	    (yyval.dialog_control)->data = (yyvsp[(9) - (9)].rcdata_item);
	  }
    break;

  case 111:
#line 907 "rcparse.y"
    {
	    if ((yyvsp[(2) - (2)].id).named)
	      res_unistring_to_id (&(yyval.id), (yyvsp[(2) - (2)].id).u.n.name);
	    else
	      (yyval.id)=(yyvsp[(2) - (2)].id);
	  }
    break;

  case 112:
#line 917 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), "");
	  }
    break;

  case 113:
#line 920 "rcparse.y"
    { (yyval.id)=(yyvsp[(1) - (2)].id); }
    break;

  case 114:
#line 925 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 115:
#line 930 "rcparse.y"
    {
	    (yyval.id).named = 1;
	    (yyval.id).u.n.name = (yyvsp[(1) - (1)].uni);
	    (yyval.id).u.n.length = unichar_len ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 116:
#line 939 "rcparse.y"
    {
	    (yyval.rcdata_item) = NULL;
	  }
    break;

  case 117:
#line 943 "rcparse.y"
    {
	    (yyval.rcdata_item) = (yyvsp[(2) - (3)].rcdata).first;
	  }
    break;

  case 118:
#line 952 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 120:
#line 958 "rcparse.y"
    { style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;

  case 122:
#line 964 "rcparse.y"
    { style = base_style | WS_CHILD | WS_VISIBLE; }
    break;

  case 124:
#line 972 "rcparse.y"
    {
	    define_font ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 125:
#line 984 "rcparse.y"
    {
	    define_icon ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 126:
#line 997 "rcparse.y"
    {
	    language = (yyvsp[(2) - (3)].il) | ((yyvsp[(3) - (3)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 127:
#line 1006 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 128:
#line 1016 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 129:
#line 1020 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 130:
#line 1037 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (4)].uni), (yyvsp[(3) - (4)].il), (yyvsp[(4) - (4)].is), 0, 0, NULL);
	  }
    break;

  case 131:
#line 1041 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;

  case 132:
#line 1045 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), 0, (yyvsp[(3) - (6)].is), 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 133:
#line 1052 "rcparse.y"
    {
	    (yyval.is) = 0;
	  }
    break;

  case 134:
#line 1056 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 135:
#line 1060 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 136:
#line 1067 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_CHECKED;
	  }
    break;

  case 137:
#line 1071 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_GRAYED;
	  }
    break;

  case 138:
#line 1075 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_HELP;
	  }
    break;

  case 139:
#line 1079 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_INACTIVE;
	  }
    break;

  case 140:
#line 1083 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBARBREAK;
	  }
    break;

  case 141:
#line 1087 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBREAK;
	  }
    break;

  case 142:
#line 1096 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 143:
#line 1106 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 144:
#line 1110 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 145:
#line 1127 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (2)].uni), 0, 0, 0, 0, NULL);
	  }
    break;

  case 146:
#line 1131 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (3)].uni), (yyvsp[(3) - (3)].il), 0, 0, 0, NULL);
	  }
    break;

  case 147:
#line 1135 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), (yyvsp[(3) - (5)].il), (yyvsp[(4) - (5)].il), (yyvsp[(5) - (5)].il), 0, NULL);
	  }
    break;

  case 148:
#line 1139 "rcparse.y"
    {
 	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;

  case 149:
#line 1143 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), 0, 0, 0, 0, (yyvsp[(4) - (5)].menuitem));
	  }
    break;

  case 150:
#line 1147 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), (yyvsp[(3) - (6)].il), 0, 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 151:
#line 1151 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (7)].uni), (yyvsp[(3) - (7)].il), (yyvsp[(4) - (7)].il), 0, 0, (yyvsp[(6) - (7)].menuitem));
	  }
    break;

  case 152:
#line 1156 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (9)].uni), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), (yyvsp[(6) - (9)].il), (yyvsp[(8) - (9)].menuitem));
	  }
    break;

  case 153:
#line 1165 "rcparse.y"
    {
	    define_messagetable ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 154:
#line 1177 "rcparse.y"
    {
	    rcparse_rcdata ();
	  }
    break;

  case 155:
#line 1181 "rcparse.y"
    {
	    rcparse_normal ();
	    (yyval.rcdata) = (yyvsp[(2) - (2)].rcdata);
	  }
    break;

  case 156:
#line 1189 "rcparse.y"
    {
	    (yyval.rcdata).first = NULL;
	    (yyval.rcdata).last = NULL;
	  }
    break;

  case 157:
#line 1194 "rcparse.y"
    {
	    (yyval.rcdata) = (yyvsp[(1) - (1)].rcdata);
	  }
    break;

  case 158:
#line 1201 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(1) - (1)].ss).s, (yyvsp[(1) - (1)].ss).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 159:
#line 1209 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(1) - (1)].suni).s, (yyvsp[(1) - (1)].suni).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 160:
#line 1217 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(1) - (1)].i).val, (yyvsp[(1) - (1)].i).dword);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 161:
#line 1225 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(3) - (3)].ss).s, (yyvsp[(3) - (3)].ss).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 162:
#line 1234 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(3) - (3)].suni).s, (yyvsp[(3) - (3)].suni).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 163:
#line 1243 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(3) - (3)].i).val, (yyvsp[(3) - (3)].i).dword);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 164:
#line 1252 "rcparse.y"
    {
	    (yyval.rcdata)=(yyvsp[(1) - (2)].rcdata);
	  }
    break;

  case 165:
#line 1261 "rcparse.y"
    { sub_res_info = (yyvsp[(2) - (3)].res_info); }
    break;

  case 168:
#line 1268 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].uni));
	    rcparse_discard_strings ();
	  }
    break;

  case 169:
#line 1273 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (4)].il), (yyvsp[(4) - (4)].uni));
	    rcparse_discard_strings ();
	  }
    break;

  case 170:
#line 1278 "rcparse.y"
    {
	    rcparse_warning (_("invalid stringtable resource."));
	    abort ();
	  }
    break;

  case 171:
#line 1286 "rcparse.y"
    {
	    (yyval.id)=(yyvsp[(1) - (1)].id);
	  }
    break;

  case 172:
#line 1290 "rcparse.y"
    {
	  (yyval.id).named = 0;
	  (yyval.id).u.id = 23;
	}
    break;

  case 173:
#line 1295 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_RCDATA;
        }
    break;

  case 174:
#line 1300 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_MANIFEST;
        }
    break;

  case 175:
#line 1305 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_PLUGPLAY;
        }
    break;

  case 176:
#line 1310 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_VXD;
        }
    break;

  case 177:
#line 1315 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINCLUDE;
        }
    break;

  case 178:
#line 1320 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINIT;
        }
    break;

  case 179:
#line 1325 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANICURSOR;
        }
    break;

  case 180:
#line 1330 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANIICON;
        }
    break;

  case 181:
#line 1341 "rcparse.y"
    {
	    define_user_data ((yyvsp[(1) - (6)].id), (yyvsp[(2) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 182:
#line 1348 "rcparse.y"
    {
	    define_user_file ((yyvsp[(1) - (4)].id), (yyvsp[(2) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 183:
#line 1358 "rcparse.y"
    {
	  define_toolbar ((yyvsp[(1) - (8)].id), &(yyvsp[(3) - (8)].res_info), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), (yyvsp[(7) - (8)].toobar_item));
	}
    break;

  case 184:
#line 1363 "rcparse.y"
    { (yyval.toobar_item)= NULL; }
    break;

  case 185:
#line 1365 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (3)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id = (yyvsp[(3) - (3)].id);
	  if ((yyvsp[(1) - (3)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (3)].toobar_item);
	}
    break;

  case 186:
#line 1384 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (2)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id.named = 0;
	  n->id.u.id = 0;
	  if ((yyvsp[(1) - (2)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (2)].toobar_item);
	}
    break;

  case 187:
#line 1409 "rcparse.y"
    {
	    define_versioninfo ((yyvsp[(1) - (6)].id), language, (yyvsp[(3) - (6)].fixver), (yyvsp[(5) - (6)].verinfo));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 188:
#line 1419 "rcparse.y"
    {
	    (yyval.fixver) = ((rc_fixed_versioninfo *)
		  res_alloc (sizeof (rc_fixed_versioninfo)));
	    memset ((yyval.fixver), 0, sizeof (rc_fixed_versioninfo));
	  }
    break;

  case 189:
#line 1425 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->file_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->file_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 190:
#line 1431 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->product_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->product_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 191:
#line 1437 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags_mask = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 192:
#line 1442 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 193:
#line 1447 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_os = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 194:
#line 1452 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_type = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 195:
#line 1457 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_subtype = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 196:
#line 1471 "rcparse.y"
    {
	    (yyval.verinfo) = NULL;
	  }
    break;

  case 197:
#line 1475 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_stringfileinfo ((yyvsp[(1) - (8)].verinfo), (yyvsp[(4) - (8)].s), (yyvsp[(6) - (8)].verstring));
	  }
    break;

  case 198:
#line 1479 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_varfileinfo ((yyvsp[(1) - (7)].verinfo), (yyvsp[(5) - (7)].uni), (yyvsp[(6) - (7)].vervar));
	  }
    break;

  case 199:
#line 1486 "rcparse.y"
    {
	    (yyval.verstring) = NULL;
	  }
    break;

  case 200:
#line 1490 "rcparse.y"
    {
	    (yyval.verstring) = append_verval ((yyvsp[(1) - (5)].verstring), (yyvsp[(3) - (5)].uni), (yyvsp[(5) - (5)].uni));
	  }
    break;

  case 201:
#line 1497 "rcparse.y"
    {
	    (yyval.vervar) = NULL;
	  }
    break;

  case 202:
#line 1501 "rcparse.y"
    {
	    (yyval.vervar) = append_vertrans ((yyvsp[(1) - (3)].vervar), (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].il));
	  }
    break;

  case 203:
#line 1510 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 204:
#line 1515 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 205:
#line 1524 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 206:
#line 1528 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 207:
#line 1538 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (2)].il);
	  }
    break;

  case 208:
#line 1543 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 209:
#line 1547 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (2)].uni));
	  }
    break;

  case 210:
#line 1557 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    /* FIXME: Is this the right default?  */
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 211:
#line 1564 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 212:
#line 1570 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 213:
#line 1575 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (4)].res_info);
	    (yyval.res_info).language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 214:
#line 1580 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 215:
#line 1590 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 216:
#line 1596 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 217:
#line 1607 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 218:
#line 1613 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 219:
#line 1625 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_MOVEABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 220:
#line 1630 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_MOVEABLE;
	  }
    break;

  case 221:
#line 1635 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PURE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 222:
#line 1640 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PURE;
	  }
    break;

  case 223:
#line 1645 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PRELOAD;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 224:
#line 1650 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PRELOAD;
	  }
    break;

  case 225:
#line 1655 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_DISCARDABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 226:
#line 1665 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 227:
#line 1669 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 228:
#line 1677 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 229:
#line 1682 "rcparse.y"
    {
	    rc_uint_type l1 = unichar_len ((yyvsp[(1) - (2)].uni));
	    rc_uint_type l2 = unichar_len ((yyvsp[(2) - (2)].uni));
	    unichar *h = (unichar *) res_alloc ((l1 + l2 + 1) * sizeof (unichar));
	    if (l1 != 0)
	      memcpy (h, (yyvsp[(1) - (2)].uni), l1 * sizeof (unichar));
	    if (l2 != 0)
	      memcpy (h + l1, (yyvsp[(2) - (2)].uni), l2  * sizeof (unichar));
	    h[l1 + l2] = 0;
	    (yyval.uni) = h;
	  }
    break;

  case 230:
#line 1697 "rcparse.y"
    {
	    (yyval.uni) = unichar_dup ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 231:
#line 1701 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 232:
#line 1710 "rcparse.y"
    {
	    (yyval.ss) = (yyvsp[(1) - (1)].ss);
	  }
    break;

  case 233:
#line 1714 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].ss).length + (yyvsp[(2) - (2)].ss).length;
	    char *h = (char *) res_alloc (l);
	    memcpy (h, (yyvsp[(1) - (2)].ss).s, (yyvsp[(1) - (2)].ss).length);
	    memcpy (h + (yyvsp[(1) - (2)].ss).length, (yyvsp[(2) - (2)].ss).s, (yyvsp[(2) - (2)].ss).length);
	    (yyval.ss).s = h;
	    (yyval.ss).length = l;
	  }
    break;

  case 234:
#line 1726 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[(1) - (1)].suni);
	  }
    break;

  case 235:
#line 1730 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].suni).length + (yyvsp[(2) - (2)].suni).length;
	    unichar *h = (unichar *) res_alloc (l * sizeof (unichar));
	    memcpy (h, (yyvsp[(1) - (2)].suni).s, (yyvsp[(1) - (2)].suni).length * sizeof (unichar));
	    memcpy (h + (yyvsp[(1) - (2)].suni).length, (yyvsp[(2) - (2)].suni).s, (yyvsp[(2) - (2)].suni).length  * sizeof (unichar));
	    (yyval.suni).s = h;
	    (yyval.suni).length = l;
	  }
    break;

  case 236:
#line 1752 "rcparse.y"
    {
	    style |= (yyvsp[(1) - (1)].il);
	  }
    break;

  case 237:
#line 1756 "rcparse.y"
    {
	    style &=~ (yyvsp[(2) - (2)].il);
	  }
    break;

  case 238:
#line 1760 "rcparse.y"
    {
	    style |= (yyvsp[(3) - (3)].il);
	  }
    break;

  case 239:
#line 1764 "rcparse.y"
    {
	    style &=~ (yyvsp[(4) - (4)].il);
	  }
    break;

  case 240:
#line 1771 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 241:
#line 1775 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (3)].il);
	  }
    break;

  case 242:
#line 1784 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 243:
#line 1788 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 244:
#line 1797 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 245:
#line 1806 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 246:
#line 1815 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 247:
#line 1819 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 248:
#line 1823 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 249:
#line 1828 "rcparse.y"
    {
	    (yyval.i).val = - (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 250:
#line 1833 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 251:
#line 1838 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 252:
#line 1843 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 253:
#line 1848 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 254:
#line 1853 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 255:
#line 1858 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 256:
#line 1863 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 257:
#line 1868 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 258:
#line 1879 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 259:
#line 1888 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 260:
#line 1899 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 261:
#line 1903 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 262:
#line 1907 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 263:
#line 1912 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 264:
#line 1917 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 265:
#line 1922 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 266:
#line 1927 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 267:
#line 1932 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 268:
#line 1937 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 269:
#line 1942 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 270:
#line 1947 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;


/* Line 1267 of yacc.c.  */
#line 4374 "rcparse.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1953 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 4422
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BEG = 258,
     END = 259,
     ACCELERATORS = 260,
     VIRTKEY = 261,
     ASCII = 262,
     NOINVERT = 263,
     SHIFT = 264,
     CONTROL = 265,
     ALT = 266,
     BITMAP = 267,
     CURSOR = 268,
     DIALOG = 269,
     DIALOGEX = 270,
     EXSTYLE = 271,
     CAPTION = 272,
     CLASS = 273,
     STYLE = 274,
     AUTO3STATE = 275,
     AUTOCHECKBOX = 276,
     AUTORADIOBUTTON = 277,
     CHECKBOX = 278,
     COMBOBOX = 279,
     CTEXT = 280,
     DEFPUSHBUTTON = 281,
     EDITTEXT = 282,
     GROUPBOX = 283,
     LISTBOX = 284,
     LTEXT = 285,
     PUSHBOX = 286,
     PUSHBUTTON = 287,
     RADIOBUTTON = 288,
     RTEXT = 289,
     SCROLLBAR = 290,
     STATE3 = 291,
     USERBUTTON = 292,
     BEDIT = 293,
     HEDIT = 294,
     IEDIT = 295,
     FONT = 296,
     ICON = 297,
     ANICURSOR = 298,
     ANIICON = 299,
     DLGINCLUDE = 300,
     DLGINIT = 301,
     FONTDIR = 302,
     HTML = 303,
     MANIFEST = 304,
     PLUGPLAY = 305,
     VXD = 306,
     TOOLBAR = 307,
     BUTTON = 308,
     LANGUAGE = 309,
     CHARACTERISTICS = 310,
     VERSIONK = 311,
     MENU = 312,
     MENUEX = 313,
     MENUITEM = 314,
     SEPARATOR = 315,
     POPUP = 316,
     CHECKED = 317,
     GRAYED = 318,
     HELP = 319,
     INACTIVE = 320,
     MENUBARBREAK = 321,
     MENUBREAK = 322,
     MESSAGETABLE = 323,
     RCDATA = 324,
     STRINGTABLE = 325,
     VERSIONINFO = 326,
     FILEVERSION = 327,
     PRODUCTVERSION = 328,
     FILEFLAGSMASK = 329,
     FILEFLAGS = 330,
     FILEOS = 331,
     FILETYPE = 332,
     FILESUBTYPE = 333,
     BLOCKSTRINGFILEINFO = 334,
     BLOCKVARFILEINFO = 335,
     VALUE = 336,
     BLOCK = 337,
     MOVEABLE = 338,
     FIXED = 339,
     PURE = 340,
     IMPURE = 341,
     PRELOAD = 342,
     LOADONCALL = 343,
     DISCARDABLE = 344,
     NOT = 345,
     QUOTEDUNISTRING = 346,
     QUOTEDSTRING = 347,
     STRING = 348,
     NUMBER = 349,
     SIZEDUNISTRING = 350,
     SIZEDSTRING = 351,
     IGNORED_TOKEN = 352,
     NEG = 353
   };
#endif
/* Tokens.  */
#define BEG 258
#define END 259
#define ACCELERATORS 260
#define VIRTKEY 261
#define ASCII 262
#define NOINVERT 263
#define SHIFT 264
#define CONTROL 265
#define ALT 266
#define BITMAP 267
#define CURSOR 268
#define DIALOG 269
#define DIALOGEX 270
#define EXSTYLE 271
#define CAPTION 272
#define CLASS 273
#define STYLE 274
#define AUTO3STATE 275
#define AUTOCHECKBOX 276
#define AUTORADIOBUTTON 277
#define CHECKBOX 278
#define COMBOBOX 279
#define CTEXT 280
#define DEFPUSHBUTTON 281
#define EDITTEXT 282
#define GROUPBOX 283
#define LISTBOX 284
#define LTEXT 285
#define PUSHBOX 286
#define PUSHBUTTON 287
#define RADIOBUTTON 288
#define RTEXT 289
#define SCROLLBAR 290
#define STATE3 291
#define USERBUTTON 292
#define BEDIT 293
#define HEDIT 294
#define IEDIT 295
#define FONT 296
#define ICON 297
#define ANICURSOR 298
#define ANIICON 299
#define DLGINCLUDE 300
#define DLGINIT 301
#define FONTDIR 302
#define HTML 303
#define MANIFEST 304
#define PLUGPLAY 305
#define VXD 306
#define TOOLBAR 307
#define BUTTON 308
#define LANGUAGE 309
#define CHARACTERISTICS 310
#define VERSIONK 311
#define MENU 312
#define MENUEX 313
#define MENUITEM 314
#define SEPARATOR 315
#define POPUP 316
#define CHECKED 317
#define GRAYED 318
#define HELP 319
#define INACTIVE 320
#define MENUBARBREAK 321
#define MENUBREAK 322
#define MESSAGETABLE 323
#define RCDATA 324
#define STRINGTABLE 325
#define VERSIONINFO 326
#define FILEVERSION 327
#define PRODUCTVERSION 328
#define FILEFLAGSMASK 329
#define FILEFLAGS 330
#define FILEOS 331
#define FILETYPE 332
#define FILESUBTYPE 333
#define BLOCKSTRINGFILEINFO 334
#define BLOCKVARFILEINFO 335
#define VALUE 336
#define BLOCK 337
#define MOVEABLE 338
#define FIXED 339
#define PURE 340
#define IMPURE 341
#define PRELOAD 342
#define LOADONCALL 343
#define DISCARDABLE 344
#define NOT 345
#define QUOTEDUNISTRING 346
#define QUOTEDSTRING 347
#define STRING 348
#define NUMBER 349
#define SIZEDUNISTRING 350
#define SIZEDSTRING 351
#define IGNORED_TOKEN 352
#define NEG 353




/* Copy the first part of user declarations.  */
#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.
   Extended by Kai Tietz, Onevision.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */


/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "sysdep.h"
#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static rc_res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static rc_dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static rc_uint_type base_style;
static rc_uint_type default_style;
static rc_res_id class;
static rc_res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const rc_res_id res_null_text = { 1, {{0, &null_unichar}}};



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 69 "rcparse.y"
typedef union YYSTYPE {
  rc_accelerator acc;
  rc_accelerator *pacc;
  rc_dialog_control *dialog_control;
  rc_menuitem *menuitem;
  struct
  {
    rc_rcdata_item *first;
    rc_rcdata_item *last;
  } rcdata;
  rc_rcdata_item *rcdata_item;
  rc_fixed_versioninfo *fixver;
  rc_ver_info *verinfo;
  rc_ver_stringinfo *verstring;
  rc_ver_varinfo *vervar;
  rc_toolbar_item *toobar_item;
  rc_res_id id;
  rc_res_res_info res_info;
  struct
  {
    rc_uint_type on;
    rc_uint_type off;
  } memflags;
  struct
  {
    rc_uint_type val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  rc_uint_type il;
  rc_uint_type is;
  const char *s;
  struct
  {
    rc_uint_type length;
    const char *s;
  } ss;
  unichar *uni;
  struct
  {
    rc_uint_type length;
    const unichar *s;
  } suni;
} YYSTYPE;
/* Line 196 of yacc.c.  */
#line 393 "rcparse.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 219 of yacc.c.  */
#line 405 "rcparse.c"

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T) && (defined (__STDC__) || defined (__cplusplus))
# include <stddef.h> /* INFRINGES ON USER NAME SPACE */
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if defined (__STDC__) || defined (__cplusplus)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     define YYINCLUDED_STDLIB_H
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2005 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM ((YYSIZE_T) -1)
#  endif
#  ifdef __cplusplus
extern "C" {
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if (! defined (malloc) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if (! defined (free) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifdef __cplusplus
}
#  endif
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   835

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  99
/* YYNRULES -- Number of rules. */
#define YYNRULES  269
/* YYNRULES -- Number of states. */
#define YYNSTATES  515

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   353

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   105,   100,     2,
     110,   111,   103,   101,   108,   102,     2,   104,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   109,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    99,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    98,     2,   106,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,   107
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    49,    56,
      57,    60,    63,    68,    70,    72,    74,    78,    81,    83,
      85,    87,    89,    91,    93,    98,   103,   104,   118,   119,
     133,   134,   149,   150,   154,   155,   159,   163,   167,   171,
     175,   181,   188,   196,   205,   209,   213,   218,   222,   223,
     226,   227,   232,   233,   238,   239,   244,   245,   250,   251,
     256,   257,   261,   273,   286,   287,   292,   293,   298,   299,
     303,   304,   309,   310,   315,   322,   331,   342,   354,   355,
     360,   361,   365,   366,   371,   372,   377,   378,   383,   384,
     389,   390,   395,   396,   400,   401,   406,   407,   423,   430,
     439,   449,   452,   453,   456,   458,   460,   461,   465,   466,
     470,   471,   475,   476,   480,   485,   490,   494,   501,   502,
     505,   510,   513,   520,   521,   525,   528,   530,   532,   534,
     536,   538,   540,   547,   548,   551,   554,   558,   564,   567,
     573,   580,   588,   598,   603,   604,   607,   608,   610,   612,
     614,   616,   620,   624,   628,   629,   636,   637,   641,   646,
     649,   651,   653,   655,   657,   659,   661,   663,   665,   667,
     669,   676,   681,   690,   691,   695,   698,   705,   706,   713,
     720,   724,   728,   732,   736,   740,   741,   750,   758,   759,
     765,   766,   770,   772,   774,   776,   778,   781,   783,   786,
     787,   790,   794,   799,   803,   804,   807,   808,   811,   813,
     815,   817,   819,   821,   823,   825,   827,   829,   831,   834,
     836,   838,   840,   843,   845,   848,   850,   853,   857,   862,
     864,   868,   869,   871,   874,   876,   878,   882,   885,   888,
     892,   896,   900,   904,   908,   912,   916,   920,   923,   925,
     927,   931,   934,   938,   942,   946,   950,   954,   958,   962
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     113,     0,    -1,    -1,   113,   114,    -1,   113,   120,    -1,
     113,   121,    -1,   113,   122,    -1,   113,   162,    -1,   113,
     163,    -1,   113,   164,    -1,   113,   165,    -1,   113,   170,
      -1,   113,   173,    -1,   113,   178,    -1,   113,   183,    -1,
     113,   182,    -1,   113,   185,    -1,   113,    97,    -1,   190,
       5,   193,     3,   115,     4,    -1,    -1,   115,   116,    -1,
     117,   208,    -1,   117,   208,   108,   118,    -1,    92,    -1,
     209,    -1,   119,    -1,   118,   108,   119,    -1,   118,   119,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,   190,    12,   195,   197,    -1,   190,    13,
     194,   197,    -1,    -1,   190,    14,   195,   126,   209,   205,
     205,   205,   123,   127,     3,   128,     4,    -1,    -1,   190,
      15,   195,   126,   209,   205,   205,   205,   124,   127,     3,
     128,     4,    -1,    -1,   190,    15,   195,   126,   209,   205,
     205,   205,   205,   125,   127,     3,   128,     4,    -1,    -1,
      16,   109,   206,    -1,    -1,   127,    17,   198,    -1,   127,
      18,   190,    -1,   127,    19,   202,    -1,   127,    16,   206,
      -1,   127,    18,   198,    -1,   127,    41,   206,   108,   198,
      -1,   127,    41,   206,   108,   198,   205,    -1,   127,    41,
     206,   108,   198,   205,   205,    -1,   127,    41,   206,   108,
     198,   205,   205,   205,    -1,   127,    57,   190,    -1,   127,
      55,   206,    -1,   127,    54,   206,   205,    -1,   127,    56,
     206,    -1,    -1,   128,   129,    -1,    -1,    20,   153,   130,
     151,    -1,    -1,    21,   153,   131,   151,    -1,    -1,    22,
     153,   132,   151,    -1,    -1,    38,   153,   133,   151,    -1,
      -1,    23,   153,   134,   151,    -1,    -1,    24,   135,   151,
      -1,    10,   153,   206,   152,   156,   205,   205,   205,   205,
     204,   155,    -1,    10,   153,   206,   152,   156,   205,   205,
     205,   205,   205,   205,   155,    -1,    -1,    25,   153,   136,
     151,    -1,    -1,    26,   153,   137,   151,    -1,    -1,    27,
     138,   151,    -1,    -1,    28,   153,   139,   151,    -1,    -1,
      39,   153,   140,   151,    -1,    42,   192,   206,   205,   205,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   155,
      -1,    42,   192,   206,   205,   205,   205,   205,   158,   204,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   158,
     205,   205,   155,    -1,    -1,    40,   153,   141,   151,    -1,
      -1,    29,   142,   151,    -1,    -1,    30,   153,   143,   151,
      -1,    -1,    31,   153,   144,   151,    -1,    -1,    32,   153,
     145,   151,    -1,    -1,    33,   153,   146,   151,    -1,    -1,
      34,   153,   147,   151,    -1,    -1,    35,   148,   151,    -1,
      -1,    36,   153,   149,   151,    -1,    -1,    37,   192,   206,
     108,   206,   108,   206,   108,   206,   108,   206,   108,   150,
     202,   204,    -1,   206,   205,   205,   205,   205,   155,    -1,
     206,   205,   205,   205,   205,   160,   204,   155,    -1,   206,
     205,   205,   205,   205,   160,   205,   205,   155,    -1,   108,
     154,    -1,    -1,   154,   108,    -1,   209,    -1,   198,    -1,
      -1,     3,   174,     4,    -1,    -1,   108,   157,   202,    -1,
      -1,   108,   159,   202,    -1,    -1,   108,   161,   202,    -1,
     190,    41,   194,   197,    -1,   190,    42,   194,   197,    -1,
      54,   206,   205,    -1,   190,    57,   193,     3,   166,     4,
      -1,    -1,   166,   167,    -1,    59,   198,   205,   168,    -1,
      59,    60,    -1,    61,   198,   168,     3,   166,     4,    -1,
      -1,   168,   108,   169,    -1,   168,   169,    -1,    62,    -1,
      63,    -1,    64,    -1,    65,    -1,    66,    -1,    67,    -1,
     190,    58,   193,     3,   171,     4,    -1,    -1,   171,   172,
      -1,    59,   198,    -1,    59,   198,   205,    -1,    59,   198,
     205,   205,   204,    -1,    59,    60,    -1,    61,   198,     3,
     171,     4,    -1,    61,   198,   205,     3,   171,     4,    -1,
      61,   198,   205,   205,     3,   171,     4,    -1,    61,   198,
     205,   205,   205,   204,     3,   171,     4,    -1,   190,    68,
     195,   197,    -1,    -1,   175,   176,    -1,    -1,   177,    -1,
     200,    -1,   201,    -1,   207,    -1,   177,   108,   200,    -1,
     177,   108,   201,    -1,   177,   108,   207,    -1,    -1,    70,
     193,     3,   179,   180,     4,    -1,    -1,   180,   206,   198,
      -1,   180,   206,   108,   198,    -1,   180,     1,    -1,   190,
      -1,    48,    -1,    69,    -1,    49,    -1,    50,    -1,    51,
      -1,    45,    -1,    46,    -1,    43,    -1,    44,    -1,   190,
     181,   193,     3,   174,     4,    -1,   190,   181,   193,   197,
      -1,   190,    52,   193,   206,   205,     3,   184,     4,    -1,
      -1,   184,    53,   190,    -1,   184,    60,    -1,   190,    71,
     186,     3,   187,     4,    -1,    -1,   186,    72,   206,   205,
     205,   205,    -1,   186,    73,   206,   205,   205,   205,    -1,
     186,    74,   206,    -1,   186,    75,   206,    -1,   186,    76,
     206,    -1,   186,    77,   206,    -1,   186,    78,   206,    -1,
      -1,   187,    79,     3,    82,     3,   188,     4,     4,    -1,
     187,    80,     3,    81,   198,   189,     4,    -1,    -1,   188,
      81,   198,   108,   198,    -1,    -1,   189,   205,   205,    -1,
     209,    -1,   191,    -1,   199,    -1,    93,    -1,   209,   108,
      -1,   191,    -1,   191,   108,    -1,    -1,   193,   196,    -1,
     193,    55,   206,    -1,   193,    54,   206,   205,    -1,   193,
      56,   206,    -1,    -1,   194,   196,    -1,    -1,   195,   196,
      -1,    83,    -1,    84,    -1,    85,    -1,    86,    -1,    87,
      -1,    88,    -1,    89,    -1,    92,    -1,    93,    -1,   199,
      -1,   198,   199,    -1,    91,    -1,    92,    -1,    96,    -1,
     200,    96,    -1,    95,    -1,   201,    95,    -1,   203,    -1,
      90,   203,    -1,   202,    98,   203,    -1,   202,    98,    90,
     203,    -1,    94,    -1,   110,   206,   111,    -1,    -1,   205,
      -1,   108,   206,    -1,   207,    -1,    94,    -1,   110,   207,
     111,    -1,   106,   207,    -1,   102,   207,    -1,   207,   103,
     207,    -1,   207,   104,   207,    -1,   207,   105,   207,    -1,
     207,   101,   207,    -1,   207,   102,   207,    -1,   207,   100,
     207,    -1,   207,    99,   207,    -1,   207,    98,   207,    -1,
     108,   209,    -1,   210,    -1,    94,    -1,   110,   207,   111,
      -1,   106,   207,    -1,   210,   103,   207,    -1,   210,   104,
     207,    -1,   210,   105,   207,    -1,   210,   101,   207,    -1,
     210,   102,   207,    -1,   210,   100,   207,    -1,   210,    99,
     207,    -1,   210,    98,   207,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   177,   177,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   199,   210,
     213,   234,   239,   251,   271,   281,   285,   290,   297,   301,
     306,   310,   314,   318,   327,   339,   353,   351,   378,   376,
     405,   403,   435,   438,   444,   446,   452,   456,   461,   465,
     469,   482,   497,   512,   527,   531,   535,   539,   545,   547,
     559,   558,   571,   570,   583,   582,   595,   594,   610,   609,
     622,   621,   635,   646,   656,   655,   668,   667,   680,   679,
     692,   691,   704,   703,   718,   723,   729,   735,   742,   741,
     757,   756,   769,   768,   781,   780,   792,   791,   804,   803,
     816,   815,   828,   827,   840,   839,   853,   851,   872,   883,
     894,   906,   917,   920,   924,   929,   939,   942,   952,   951,
     958,   957,   964,   963,   971,   983,   996,  1005,  1016,  1019,
    1036,  1040,  1044,  1052,  1055,  1059,  1066,  1070,  1074,  1078,
    1082,  1086,  1095,  1106,  1109,  1126,  1130,  1134,  1138,  1142,
    1146,  1150,  1154,  1164,  1177,  1177,  1189,  1193,  1200,  1208,
    1216,  1224,  1233,  1242,  1257,  1256,  1261,  1263,  1268,  1273,
    1281,  1285,  1290,  1295,  1300,  1305,  1310,  1315,  1320,  1325,
    1336,  1343,  1353,  1359,  1360,  1379,  1404,  1415,  1420,  1426,
    1432,  1437,  1442,  1447,  1452,  1467,  1470,  1474,  1482,  1485,
    1493,  1496,  1505,  1510,  1519,  1523,  1533,  1538,  1542,  1553,
    1559,  1565,  1570,  1575,  1586,  1591,  1603,  1608,  1620,  1625,
    1630,  1635,  1640,  1645,  1650,  1660,  1664,  1672,  1677,  1692,
    1696,  1705,  1709,  1721,  1725,  1747,  1751,  1755,  1759,  1766,
    1770,  1780,  1783,  1792,  1801,  1810,  1814,  1818,  1823,  1828,
    1833,  1838,  1843,  1848,  1853,  1858,  1863,  1874,  1883,  1894,
    1898,  1902,  1907,  1912,  1917,  1922,  1927,  1932,  1937,  1942
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BEG", "END", "ACCELERATORS", "VIRTKEY",
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR",
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE",
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX",
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT",
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3",
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "ANICURSOR",
  "ANIICON", "DLGINCLUDE", "DLGINIT", "FONTDIR", "HTML", "MANIFEST",
  "PLUGPLAY", "VXD", "TOOLBAR", "BUTTON", "LANGUAGE", "CHARACTERISTICS",
  "VERSIONK", "MENU", "MENUEX", "MENUITEM", "SEPARATOR", "POPUP",
  "CHECKED", "GRAYED", "HELP", "INACTIVE", "MENUBARBREAK", "MENUBREAK",
  "MESSAGETABLE", "RCDATA", "STRINGTABLE", "VERSIONINFO", "FILEVERSION",
  "PRODUCTVERSION", "FILEFLAGSMASK", "FILEFLAGS", "FILEOS", "FILETYPE",
  "FILESUBTYPE", "BLOCKSTRINGFILEINFO", "BLOCKVARFILEINFO", "VALUE",
  "BLOCK", "MOVEABLE", "FIXED", "PURE", "IMPURE", "PRELOAD", "LOADONCALL",
  "DISCARDABLE", "NOT", "QUOTEDUNISTRING", "QUOTEDSTRING", "STRING",
  "NUMBER", "SIZEDUNISTRING", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'",
  "'&'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='",
  "'('", "')'", "$accept", "input", "accelerator", "acc_entries",
  "acc_entry", "acc_event", "acc_options", "acc_option", "bitmap",
  "cursor", "dialog", "@@1", "@@2", "@@3", "exstyle", "styles", "controls",
  "control", "@@4", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10", "@@11", "@@12",
  "@@13", "@@14", "@@15", "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22",
  "@@23", "@@24", "control_params", "cresid", "optresidc", "resid",
  "opt_control_data", "control_styleexpr", "@@25", "icon_styleexpr", "@@26",
  "control_params_styleexpr", "@@27", "font", "icon", "language", "menu",
  "menuitems", "menuitem", "menuitem_flags", "menuitem_flag", "menuex",
  "menuexitems", "menuexitem", "messagetable", "optrcdata_data", "@@28",
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", "string_data",
  "rcdata_id", "user", "toolbar", "toolbar_data", "versioninfo",
  "fixedverinfo", "verblocks", "vervals", "vertrans", "id", "resname",
  "resref", "suboptions", "memflags_move_discard", "memflags_move",
  "memflag", "file_name", "res_unicode_string_concat",
  "res_unicode_string", "sizedstring", "sizedunistring", "styleexpr",
  "parennumber", "optcnumexpr", "cnumexpr", "numexpr", "sizednumexpr",
  "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   124,    94,
      38,    43,    45,    42,    47,    37,   126,   353,    44,    61,
      40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   113,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   118,   119,   119,
     119,   119,   119,   119,   120,   121,   123,   122,   124,   122,
     125,   122,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
     130,   129,   131,   129,   132,   129,   133,   129,   134,   129,
     135,   129,   129,   129,   136,   129,   137,   129,   138,   129,
     139,   129,   140,   129,   129,   129,   129,   129,   141,   129,
     142,   129,   143,   129,   144,   129,   145,   129,   146,   129,
     147,   129,   148,   129,   149,   129,   150,   129,   151,   151,
     151,   152,   153,   153,   154,   154,   155,   155,   157,   156,
     159,   158,   161,   160,   162,   163,   164,   165,   166,   166,
     167,   167,   167,   168,   168,   168,   169,   169,   169,   169,
     169,   169,   170,   171,   171,   172,   172,   172,   172,   172,
     172,   172,   172,   173,   175,   174,   176,   176,   177,   177,
     177,   177,   177,   177,   179,   178,   180,   180,   180,   180,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     182,   182,   183,   184,   184,   184,   185,   186,   186,   186,
     186,   186,   186,   186,   186,   187,   187,   187,   188,   188,
     189,   189,   190,   190,   191,   191,   192,   192,   192,   193,
     193,   193,   193,   193,   194,   194,   195,   195,   196,   196,
     196,   196,   196,   196,   196,   197,   197,   198,   198,   199,
     199,   200,   200,   201,   201,   202,   202,   202,   202,   203,
     203,   204,   204,   205,   206,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   207,   208,   209,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     3,     3,     3,
       5,     6,     7,     8,     3,     3,     4,     3,     0,     2,
       0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     3,    11,    12,     0,     4,     0,     4,     0,     3,
       0,     4,     0,     4,     6,     8,    10,    11,     0,     4,
       0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     4,     0,     3,     0,     4,     0,    15,     6,     8,
       9,     2,     0,     2,     1,     1,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     0,     2,     0,     1,     1,     1,
       1,     3,     3,     3,     0,     6,     0,     3,     4,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       6,     4,     8,     0,     3,     2,     6,     0,     6,     6,
       3,     3,     3,     3,     3,     0,     8,     7,     0,     5,
       0,     3,     1,     1,     1,     1,     2,     1,     2,     0,
       2,     3,     4,     3,     0,     2,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     2,     1,     2,     1,     2,     3,     4,     1,
       3,     0,     1,     2,     1,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     1,     1,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short int yydefact[] =
{
       2,     0,     1,     0,   209,   229,   230,   205,   259,    17,
       0,     0,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    15,    14,    16,     0,   203,   204,   202,
     258,   245,     0,     0,     0,     0,   244,     0,   261,     0,
     209,   216,   214,   216,   216,   214,   214,   178,   179,   176,
     177,   171,   173,   174,   175,   209,   209,   209,   216,   172,
     187,   209,   170,     0,     0,     0,     0,     0,     0,     0,
       0,   248,   247,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,   164,     0,     0,     0,   218,   219,
     220,   221,   222,   223,   224,   210,   260,     0,     0,     0,
      42,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     269,   268,   267,   265,   266,   262,   263,   264,   246,   243,
     256,   255,   254,   252,   253,   249,   250,   251,   166,     0,
     211,   213,    19,   225,   226,   217,    34,   215,    35,     0,
       0,     0,   124,   125,     0,   128,   143,   153,   195,     0,
       0,     0,     0,     0,     0,     0,   154,   181,     0,   212,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     190,   191,   192,   193,   194,     0,   156,   169,   165,     0,
      18,    23,    20,     0,    24,    43,     0,     0,   183,   127,
       0,     0,   129,   142,     0,     0,   144,   186,     0,     0,
       0,     0,   180,   233,   231,   155,   157,   158,   159,   160,
       0,   167,   227,     0,    21,     0,     0,     0,   131,     0,
     133,   148,   145,     0,     0,     0,     0,     0,     0,   232,
     234,   168,   228,   257,     0,    36,    38,   182,     0,   185,
     133,     0,   146,   143,     0,     0,     0,   188,   189,   161,
     162,   163,    28,    29,    30,    31,    32,    33,    22,    25,
      44,    44,    40,   184,   130,   128,   136,   137,   138,   139,
     140,   141,     0,   135,   241,     0,   143,     0,   198,   200,
       0,    27,     0,     0,    44,     0,   134,   147,   242,   149,
       0,   143,   241,     0,     0,    26,    58,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    58,     0,   132,   150,
       0,     0,     0,     0,   197,     0,     0,    48,    45,    46,
      49,   204,     0,   239,     0,    47,   235,     0,     0,    55,
      57,    54,     0,    58,   151,   143,   196,     0,   201,    37,
     112,   112,   112,   112,   112,    70,   112,   112,    78,   112,
      90,   112,   112,   112,   112,   112,   102,   112,     0,   112,
     112,   112,     0,    59,   236,     0,     0,     0,    56,    39,
       0,     0,     0,     0,     0,   115,   114,    60,    62,    64,
      68,     0,    74,    76,     0,    80,     0,    92,    94,    96,
      98,   100,     0,   104,   207,     0,     0,    66,    82,    88,
       0,   240,     0,   237,    50,    41,   152,   199,     0,   113,
       0,     0,     0,     0,    71,     0,     0,     0,    79,     0,
      91,     0,     0,     0,     0,     0,   103,     0,   208,     0,
     206,     0,     0,     0,     0,   238,    51,     0,     0,    61,
      63,    65,    69,     0,    75,    77,    81,    93,    95,    97,
      99,   101,   105,     0,    67,    83,    89,     0,    52,   111,
     118,     0,     0,     0,   116,    53,     0,     0,     0,     0,
     154,    84,     0,   119,     0,   116,     0,     0,   116,     0,
     122,   108,   241,     0,   117,   120,    85,   241,   241,     0,
     116,   242,     0,     0,   116,   242,   116,   242,   123,   109,
     116,     0,   121,    86,   116,    72,   116,   110,     0,    87,
      73,   106,     0,   241,   107
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     1,    12,   160,   182,   183,   258,   259,    13,    14,
      15,   260,   261,   284,   140,   282,   316,   363,   410,   411,
     412,   431,   413,   381,   416,   417,   384,   419,   432,   433,
     386,   421,   422,   423,   424,   425,   392,   427,   512,   414,
     438,   373,   374,   471,   461,   466,   487,   493,   482,   489,
      16,    17,    18,    19,   165,   192,   241,   273,    20,   166,
     196,    21,   175,   176,   205,   206,    22,   128,   158,    61,
      23,    24,   217,    25,   108,   167,   293,   294,    26,    27,
     395,    37,    99,    98,    95,   136,   375,   212,   207,   208,
     325,   326,   287,   288,   415,    36,   214,   376,    30
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -309
static const short int yypact[] =
{
    -309,    68,  -309,   338,  -309,  -309,  -309,  -309,  -309,  -309,
     338,   338,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,   458,  -309,  -309,  -309,
     605,  -309,   338,   338,   338,   -92,   642,   230,  -309,   534,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,   338,   338,   338,   338,   338,   338,   338,
     338,  -309,  -309,   695,   338,  -309,   338,   338,   338,   338,
     338,   338,   338,   338,  -309,   338,   338,   338,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,   329,   724,   724,
     242,   242,   724,   724,   499,   434,   457,   724,   192,   250,
     392,   718,   318,   174,   174,  -309,  -309,  -309,  -309,  -309,
     392,   718,   318,   174,   174,  -309,  -309,  -309,  -309,   -92,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   -81,
     263,   263,  -309,  -309,   -92,  -309,  -309,  -309,  -309,   338,
     338,   338,   338,   338,   338,   338,  -309,  -309,     6,  -309,
      13,   338,   -92,   -92,    48,     8,   105,    35,   -92,   -92,
    -309,  -309,  -309,  -309,  -309,    53,   373,  -309,  -309,   -38,
    -309,  -309,  -309,   -48,  -309,  -309,   -92,   -92,  -309,  -309,
     -36,     7,  -309,  -309,    80,     7,  -309,  -309,    60,   103,
     -92,   -92,  -309,  -309,  -309,  -309,    17,    38,    47,   642,
       7,     7,  -309,   263,    65,   -92,   -92,    -1,  -309,   163,
       7,  -309,   163,    12,    74,    94,   -92,   -92,   373,  -309,
    -309,     7,  -309,  -309,   818,  -309,   -92,  -309,   253,  -309,
    -309,   184,   -92,  -309,     5,   177,     7,  -309,  -309,    38,
      47,   642,  -309,  -309,  -309,  -309,  -309,  -309,    25,  -309,
    -309,  -309,  -309,  -309,   155,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,   768,  -309,   -92,   120,  -309,    10,  -309,     7,
     818,  -309,   556,   562,  -309,   137,  -309,  -309,  -309,  -309,
     141,  -309,   -92,    21,     2,  -309,  -309,   338,     7,   253,
     -46,   338,   338,   338,   338,   253,  -309,   573,  -309,  -309,
     153,   188,   172,     7,  -309,   -92,   655,  -309,     7,  -309,
       7,    40,    27,  -309,   338,    99,  -309,    93,   -92,  -309,
    -309,  -309,   692,  -309,  -309,  -309,  -309,   168,  -309,  -309,
     258,   258,   258,   258,   258,  -309,   258,   258,  -309,   258,
    -309,   258,   258,   258,   258,   258,  -309,   258,   253,   258,
     258,   258,   253,  -309,  -309,    95,    98,     7,  -309,  -309,
     729,   173,     7,   338,   102,     7,  -309,  -309,  -309,  -309,
    -309,   338,  -309,  -309,   338,  -309,   338,  -309,  -309,  -309,
    -309,  -309,   338,  -309,   117,   338,   123,  -309,  -309,  -309,
     338,  -309,    27,  -309,   163,  -309,  -309,     7,   128,  -309,
     338,   338,   338,   338,  -309,   -92,   338,   338,  -309,   338,
    -309,   338,   338,   338,   338,   338,  -309,   338,  -309,   131,
    -309,   338,   338,   338,   -92,  -309,   -92,   258,   132,  -309,
    -309,  -309,  -309,   -92,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,   338,  -309,  -309,  -309,   -92,   -92,  -309,
    -309,   -92,   -92,   149,    18,  -309,   -46,   -92,   -92,   338,
    -309,  -309,   -92,    99,   -92,    19,   154,   203,    20,   -92,
    -309,  -309,   -92,   338,  -309,  -309,  -309,   -92,   -92,   -46,
     225,   -92,   165,   -46,   225,   -92,   225,   -92,    99,  -309,
     225,   338,    99,  -309,   225,  -309,   225,  -309,   182,  -309,
    -309,  -309,   -46,   -71,  -309
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -240,  -309,  -309,
    -309,  -309,  -309,  -309,   144,  -235,  -295,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   239,
    -309,   431,  -156,  -100,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,    26,  -309,    56,    39,  -309,  -196,
    -309,  -309,  -173,  -309,  -309,  -309,  -309,  -309,  -309,  -309,
    -309,  -309,  -309,  -309,  -309,  -309,  -309,  -309,   -25,  -265,
     -55,   232,     0,   333,   432,   375,  -129,     4,    82,    84,
    -237,  -308,  -283,   -33,    -3,     9,  -309,     3,  -309
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -228
static const short int yytable[] =
{
      35,    62,    75,   237,    29,    28,   314,   177,   276,   311,
     178,   332,   189,   291,   364,   243,    74,   180,   281,    38,
      39,   470,   470,   470,   218,   312,   283,   366,   161,    29,
      28,   252,   253,   254,   255,   256,   257,    74,   370,   197,
     295,    71,    72,    73,   322,   102,   103,   275,   323,   307,
     211,   188,   238,     5,     6,     5,     6,   202,   403,   239,
     213,   219,   220,   224,   324,   222,   223,   190,     2,   191,
     210,   119,   110,   111,   112,   113,   114,   115,   116,   117,
     290,   231,   129,   130,   131,   120,   121,   122,   123,   124,
     125,   126,   127,   394,   435,   310,   159,   394,     5,     6,
      31,   144,   313,     5,     6,   181,   225,     8,    32,   193,
      74,   164,    33,    74,   198,   199,    34,   279,    74,    10,
      74,   323,     3,    11,   289,   228,    74,   480,   485,   186,
     187,  -227,  -227,   280,   229,   200,   201,   324,     4,   371,
     221,   308,   230,   162,   163,   309,   168,   169,   170,   171,
     172,   173,   174,   215,   216,   179,   245,   334,   185,     5,
       6,     7,     8,   184,   194,     9,   195,   226,   227,   318,
     320,     5,     6,   234,    10,   246,   336,   406,    11,   194,
     278,   195,   235,   236,   337,   209,   240,   265,   402,   242,
     244,   335,   323,   247,   248,   148,   190,   366,   191,   490,
     194,   367,   195,   262,   494,   496,   401,   484,   324,   274,
     409,   277,   194,   263,   195,   232,   233,   266,   267,   268,
     269,   270,   271,   232,   232,   428,   232,   232,   470,   473,
     514,   430,   194,    84,   195,   232,   437,   251,   404,   453,
     460,    29,    28,   407,   292,   141,   266,   267,   268,   269,
     270,   271,   498,   156,     5,     6,   502,   469,   139,     5,
       6,   315,   483,   272,   149,   150,   151,   152,   153,   154,
     155,    74,    97,   501,   319,   513,   372,    81,    82,    83,
     331,   459,   338,   232,    85,    86,    87,   104,   105,   106,
     511,   285,   272,   109,   317,   368,   264,   477,   327,   328,
     329,   330,    29,   321,    85,    86,    87,   400,    29,    28,
     249,   286,   250,    88,    89,    90,    91,    92,    93,    94,
       0,   365,   232,     0,   232,    88,    89,    90,    91,    92,
      93,    94,   132,    88,    89,    90,    91,    92,    93,    94,
       0,   232,   133,   134,     5,     6,     7,     8,     0,     5,
       6,     0,     8,     0,     0,     0,     0,     8,     0,    10,
       0,   396,    28,    11,    10,   396,    28,     0,    11,    10,
     408,   436,     0,    11,     0,   481,   100,   101,   486,   232,
       0,     0,   443,    85,    86,    87,     0,     0,     0,     0,
     499,   107,   429,     0,   503,     0,   505,   434,     0,     0,
     507,   457,     0,   458,   509,     0,   510,     0,   232,     0,
     462,   232,    88,    89,    90,    91,    92,    93,    94,    79,
      80,    81,    82,    83,   464,   465,     0,     0,   467,   468,
       0,   472,    31,     0,   474,   475,     0,   145,     0,   478,
      32,   479,     0,     0,    33,     0,   488,     0,    34,   491,
     463,     0,     0,     0,   495,   497,     0,     0,   500,     0,
     146,     0,   504,    40,   506,     0,   476,    31,   203,   204,
      41,    42,    43,    44,   138,    32,     0,   142,   143,    33,
     492,     0,   147,    34,   157,     0,     0,     0,    85,    86,
      87,    77,    78,    79,    80,    81,    82,    83,   508,    45,
      46,    47,    48,    49,    50,     0,    51,    52,    53,    54,
      55,    85,    86,    87,     0,    56,    57,    88,    89,    90,
      91,    92,    93,    94,     0,     0,    58,    59,     0,    60,
     135,   137,   135,   135,   137,   137,     0,     0,     0,   135,
      88,    89,    90,    91,    92,    93,    94,     0,     0,     5,
       6,     7,     8,    85,    86,    87,     0,     0,     0,   296,
       0,     0,     0,     0,    10,   306,     0,     0,    11,     0,
       0,     0,   297,   298,   299,   300,   333,     0,   297,   298,
     299,   300,    88,    89,    90,    91,    92,    93,    94,   297,
     298,   299,   300,    31,     0,     0,     0,   301,     0,     0,
       0,    32,     0,   301,     0,    33,     0,     0,     0,    34,
     302,   303,   304,   305,   301,     0,   302,   303,   304,   305,
       0,     0,     0,   418,     0,   420,     0,   302,   303,   304,
     305,   426,    76,    77,    78,    79,    80,    81,    82,    83,
       0,     0,     0,     0,     0,    96,     0,     0,     0,   439,
     440,   441,   442,     0,     0,   444,   445,     0,   446,   339,
     447,   448,   449,   450,   451,   340,   452,     0,     0,     0,
     454,   455,   456,     0,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   369,   362,     0,     0,
       0,     0,   340,    63,    64,    65,    66,    67,    68,    69,
      70,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   405,   362,     0,     0,     0,     0,   340,
      76,    77,    78,    79,    80,    81,    82,    83,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,   362,   377,   378,   379,   380,     0,   382,   383,     0,
     385,     0,   387,   388,   389,   390,   391,     0,   393,     0,
     397,   398,   399,    76,    77,    78,    79,    80,    81,    82,
      83,     0,     0,     0,     0,     0,   118,    88,    89,    90,
      91,    92,    93,    94,     0,     0,   133,   134,    78,    79,
      80,    81,    82,    83,   252,   253,   254,   255,   256,   257,
     266,   267,   268,   269,   270,   271
};

static const short int yycheck[] =
{
       3,    26,    35,     4,     1,     1,     4,     1,     3,   292,
       4,   306,     4,     3,   322,     3,   108,     4,   258,    10,
      11,     3,     3,     3,    60,     4,   261,    98,   109,    26,
      26,     6,     7,     8,     9,    10,    11,   108,   333,     4,
     280,    32,    33,    34,    90,    45,    46,   243,    94,   284,
     179,     3,    53,    91,    92,    91,    92,     4,   366,    60,
     108,   190,   191,     3,   110,   194,   195,    59,     0,    61,
     108,    74,    63,    64,    65,    66,    67,    68,    69,    70,
     276,   210,    85,    86,    87,    76,    77,    78,    79,    80,
      81,    82,    83,   358,   402,   291,   129,   362,    91,    92,
      94,   104,    81,    91,    92,    92,     3,    94,   102,     4,
     108,   144,   106,   108,    79,    80,   110,   246,   108,   106,
     108,    94,    54,   110,     4,   108,   108,   108,   108,   162,
     163,    91,    92,   108,    96,   168,   169,   110,    70,   335,
      60,     4,    95,   140,   141,     4,   149,   150,   151,   152,
     153,   154,   155,   186,   187,   158,    82,     4,   161,    91,
      92,    93,    94,   160,    59,    97,    61,   200,   201,   298,
     299,    91,    92,   108,   106,    81,     4,     4,   110,    59,
       3,    61,   215,   216,   313,   176,   219,     3,    90,   222,
     223,     3,    94,   226,   227,     3,    59,    98,    61,   482,
      59,   108,    61,   236,   487,   488,   111,     4,   110,   242,
     108,   244,    59,   238,    61,   211,   213,    62,    63,    64,
      65,    66,    67,   219,   220,   108,   222,   223,     3,   466,
     513,   108,    59,     3,    61,   231,   108,   228,   367,   108,
     108,   238,   238,   372,   277,   101,    62,    63,    64,    65,
      66,    67,   489,     3,    91,    92,   493,   108,    16,    91,
      92,   294,   108,   108,    72,    73,    74,    75,    76,    77,
      78,   108,    40,   108,   299,   512,   108,   103,   104,   105,
     305,   437,   315,   279,    54,    55,    56,    55,    56,    57,
     108,   265,   108,    61,   297,   328,   240,   470,   301,   302,
     303,   304,   299,   299,    54,    55,    56,   362,   305,   305,
     228,   272,   228,    83,    84,    85,    86,    87,    88,    89,
      -1,   324,   318,    -1,   320,    83,    84,    85,    86,    87,
      88,    89,     3,    83,    84,    85,    86,    87,    88,    89,
      -1,   337,    92,    93,    91,    92,    93,    94,    -1,    91,
      92,    -1,    94,    -1,    -1,    -1,    -1,    94,    -1,   106,
      -1,   358,   358,   110,   106,   362,   362,    -1,   110,   106,
     373,   404,    -1,   110,    -1,   475,    43,    44,   478,   375,
      -1,    -1,   415,    54,    55,    56,    -1,    -1,    -1,    -1,
     490,    58,   395,    -1,   494,    -1,   496,   400,    -1,    -1,
     500,   434,    -1,   436,   504,    -1,   506,    -1,   404,    -1,
     443,   407,    83,    84,    85,    86,    87,    88,    89,   101,
     102,   103,   104,   105,   457,   458,    -1,    -1,   461,   462,
      -1,   464,    94,    -1,   467,   468,    -1,     3,    -1,   472,
     102,   474,    -1,    -1,   106,    -1,   479,    -1,   110,   482,
     453,    -1,    -1,    -1,   487,   488,    -1,    -1,   491,    -1,
       3,    -1,   495,     5,   497,    -1,   469,    94,    95,    96,
      12,    13,    14,    15,    99,   102,    -1,   102,   103,   106,
     483,    -1,   107,   110,   109,    -1,    -1,    -1,    54,    55,
      56,    99,   100,   101,   102,   103,   104,   105,   501,    41,
      42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    54,    55,    56,    -1,    57,    58,    83,    84,    85,
      86,    87,    88,    89,    -1,    -1,    68,    69,    -1,    71,
      98,    99,   100,   101,   102,   103,    -1,    -1,    -1,   107,
      83,    84,    85,    86,    87,    88,    89,    -1,    -1,    91,
      92,    93,    94,    54,    55,    56,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,   106,     3,    -1,    -1,   110,    -1,
      -1,    -1,    16,    17,    18,    19,     3,    -1,    16,    17,
      18,    19,    83,    84,    85,    86,    87,    88,    89,    16,
      17,    18,    19,    94,    -1,    -1,    -1,    41,    -1,    -1,
      -1,   102,    -1,    41,    -1,   106,    -1,    -1,    -1,   110,
      54,    55,    56,    57,    41,    -1,    54,    55,    56,    57,
      -1,    -1,    -1,   384,    -1,   386,    -1,    54,    55,    56,
      57,   392,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,   410,
     411,   412,   413,    -1,    -1,   416,   417,    -1,   419,     4,
     421,   422,   423,   424,   425,    10,   427,    -1,    -1,    -1,
     431,   432,   433,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     4,    42,    -1,    -1,
      -1,    -1,    10,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,   341,   342,   343,   344,    -1,   346,   347,    -1,
     349,    -1,   351,   352,   353,   354,   355,    -1,   357,    -1,
     359,   360,   361,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,    -1,    -1,    -1,   111,    83,    84,    85,
      86,    87,    88,    89,    -1,    -1,    92,    93,   100,   101,
     102,   103,   104,   105,     6,     7,     8,     9,    10,    11,
      62,    63,    64,    65,    66,    67
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,   113,     0,    54,    70,    91,    92,    93,    94,    97,
     106,   110,   114,   120,   121,   122,   162,   163,   164,   165,
     170,   173,   178,   182,   183,   185,   190,   191,   199,   209,
     210,    94,   102,   106,   110,   206,   207,   193,   207,   207,
       5,    12,    13,    14,    15,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    57,    58,    68,    69,
      71,   181,   190,    98,    99,   100,   101,   102,   103,   104,
     105,   207,   207,   207,   108,   205,    98,    99,   100,   101,
     102,   103,   104,   105,     3,    54,    55,    56,    83,    84,
      85,    86,    87,    88,    89,   196,   111,   193,   195,   194,
     195,   195,   194,   194,   193,   193,   193,   195,   186,   193,
     207,   207,   207,   207,   207,   207,   207,   207,   111,   206,
     207,   207,   207,   207,   207,   207,   207,   207,   179,   206,
     206,   206,     3,    92,    93,   196,   197,   196,   197,    16,
     126,   126,   197,   197,   206,     3,     3,   197,     3,    72,
      73,    74,    75,    76,    77,    78,     3,   197,   180,   205,
     115,   109,   209,   209,   205,   166,   171,   187,   206,   206,
     206,   206,   206,   206,   206,   174,   175,     1,     4,   206,
       4,    92,   116,   117,   209,   206,   205,   205,     3,     4,
      59,    61,   167,     4,    59,    61,   172,     4,    79,    80,
     205,   205,     4,    95,    96,   176,   177,   200,   201,   207,
     108,   198,   199,   108,   208,   205,   205,   184,    60,   198,
     198,    60,   198,   198,     3,     3,   205,   205,   108,    96,
      95,   198,   199,   209,   108,   205,   205,     4,    53,    60,
     205,   168,   205,     3,   205,    82,    81,   205,   205,   200,
     201,   207,     6,     7,     8,     9,    10,    11,   118,   119,
     123,   124,   205,   190,   168,     3,    62,    63,    64,    65,
      66,    67,   108,   169,   205,   171,     3,   205,     3,   198,
     108,   119,   127,   127,   125,   166,   169,   204,   205,     4,
     171,     3,   205,   188,   189,   119,     3,    16,    17,    18,
      19,    41,    54,    55,    56,    57,     3,   127,     4,     4,
     171,   204,     4,    81,     4,   205,   128,   206,   198,   190,
     198,   199,    90,    94,   110,   202,   203,   206,   206,   206,
     206,   190,   128,     3,     4,     3,     4,   198,   205,     4,
      10,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    42,   129,   203,   206,    98,   108,   205,     4,
     128,   171,   108,   153,   154,   198,   209,   153,   153,   153,
     153,   135,   153,   153,   138,   153,   142,   153,   153,   153,
     153,   153,   148,   153,   191,   192,   209,   153,   153,   153,
     192,   111,    90,   203,   198,     4,     4,   198,   206,   108,
     130,   131,   132,   134,   151,   206,   136,   137,   151,   139,
     151,   143,   144,   145,   146,   147,   151,   149,   108,   206,
     108,   133,   140,   141,   206,   203,   205,   108,   152,   151,
     151,   151,   151,   205,   151,   151,   151,   151,   151,   151,
     151,   151,   151,   108,   151,   151,   151,   205,   205,   154,
     108,   156,   205,   206,   205,   205,   157,   205,   205,   108,
       3,   155,   205,   202,   205,   205,   206,   174,   205,   205,
     108,   155,   160,   108,     4,   108,   155,   158,   205,   161,
     204,   205,   206,   159,   204,   205,   204,   205,   202,   155,
     205,   108,   202,   155,   205,   155,   205,   155,   206,   155,
     155,   108,   150,   202,   204
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()
    ;
#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 18:
#line 200 "rcparse.y"
    {
	    define_accelerator ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].pacc));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 19:
#line 210 "rcparse.y"
    {
	    (yyval.pacc) = NULL;
	  }
    break;

  case 20:
#line 214 "rcparse.y"
    {
	    rc_accelerator *a;

	    a = (rc_accelerator *) res_alloc (sizeof *a);
	    *a = (yyvsp[0].acc);
	    if ((yyvsp[-1].pacc) == NULL)
	      (yyval.pacc) = a;
	    else
	      {
		rc_accelerator **pp;

		for (pp = &(yyvsp[-1].pacc)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		(yyval.pacc) = (yyvsp[-1].pacc);
	      }
	  }
    break;

  case 21:
#line 235 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[-1].acc);
	    (yyval.acc).id = (yyvsp[0].il);
	  }
    break;

  case 22:
#line 240 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[-3].acc);
	    (yyval.acc).id = (yyvsp[-2].il);
	    (yyval.acc).flags |= (yyvsp[0].is);
	    if (((yyval.acc).flags & ACC_VIRTKEY) == 0
		&& ((yyval.acc).flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;

  case 23:
#line 252 "rcparse.y"
    {
	    const char *s = (yyvsp[0].s);
	    char ch;

	    (yyval.acc).next = NULL;
	    (yyval.acc).id = 0;
	    ch = *s;
	    if (ch != '^')
	      (yyval.acc).flags = 0;
	    else
	      {
		(yyval.acc).flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = TOUPPER (s[0]);
	      }
	    (yyval.acc).key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;

  case 24:
#line 272 "rcparse.y"
    {
	    (yyval.acc).next = NULL;
	    (yyval.acc).flags = 0;
	    (yyval.acc).id = 0;
	    (yyval.acc).key = (yyvsp[0].il);
	  }
    break;

  case 25:
#line 282 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[0].is);
	  }
    break;

  case 26:
#line 286 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-2].is) | (yyvsp[0].is);
	  }
    break;

  case 27:
#line 291 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-1].is) | (yyvsp[0].is);
	  }
    break;

  case 28:
#line 298 "rcparse.y"
    {
	    (yyval.is) = ACC_VIRTKEY;
	  }
    break;

  case 29:
#line 302 "rcparse.y"
    {
	    /* This is just the absence of VIRTKEY.  */
	    (yyval.is) = 0;
	  }
    break;

  case 30:
#line 307 "rcparse.y"
    {
	    (yyval.is) = ACC_NOINVERT;
	  }
    break;

  case 31:
#line 311 "rcparse.y"
    {
	    (yyval.is) = ACC_SHIFT;
	  }
    break;

  case 32:
#line 315 "rcparse.y"
    {
	    (yyval.is) = ACC_CONTROL;
	  }
    break;

  case 33:
#line 319 "rcparse.y"
    {
	    (yyval.is) = ACC_ALT;
	  }
    break;

  case 34:
#line 328 "rcparse.y"
    {
	    define_bitmap ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 35:
#line 340 "rcparse.y"
    {
	    define_cursor ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 36:
#line 353 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-3].il);
	      dialog.y = (yyvsp[-2].il);
	      dialog.width = (yyvsp[-1].il);
	      dialog.height = (yyvsp[0].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-4].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-5].res_info);
	      style = 0;
	    }
    break;

  case 37:
#line 370 "rcparse.y"
    {
	    define_dialog ((yyvsp[-12].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 38:
#line 378 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-3].il);
	      dialog.y = (yyvsp[-2].il);
	      dialog.width = (yyvsp[-1].il);
	      dialog.height = (yyvsp[0].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-4].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-5].res_info);
	      style = 0;
	    }
    break;

  case 39:
#line 397 "rcparse.y"
    {
	    define_dialog ((yyvsp[-12].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 40:
#line 405 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-4].il);
	      dialog.y = (yyvsp[-3].il);
	      dialog.width = (yyvsp[-2].il);
	      dialog.height = (yyvsp[-1].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-5].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.ex->help = (yyvsp[0].il);
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-6].res_info);
	      style = 0;
	    }
    break;

  case 41:
#line 425 "rcparse.y"
    {
	    define_dialog ((yyvsp[-13].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 42:
#line 435 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 43:
#line 439 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 45:
#line 447 "rcparse.y"
    {
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    dialog.caption = (yyvsp[0].uni);
	  }
    break;

  case 46:
#line 453 "rcparse.y"
    {
	    dialog.class = (yyvsp[0].id);
	  }
    break;

  case 47:
#line 458 "rcparse.y"
    {
	    dialog.style = style;
	  }
    break;

  case 48:
#line 462 "rcparse.y"
    {
	    dialog.exstyle = (yyvsp[0].il);
	  }
    break;

  case 49:
#line 466 "rcparse.y"
    {
	    res_unistring_to_id (& dialog.class, (yyvsp[0].uni));
	  }
    break;

  case 50:
#line 470 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-2].il);
	    dialog.font = (yyvsp[0].uni);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 51:
#line 483 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-3].il);
	    dialog.font = (yyvsp[-1].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[0].il);
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 52:
#line 498 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-4].il);
	    dialog.font = (yyvsp[-2].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[-1].il);
		dialog.ex->italic = (yyvsp[0].il);
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 53:
#line 513 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-5].il);
	    dialog.font = (yyvsp[-3].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[-2].il);
		dialog.ex->italic = (yyvsp[-1].il);
		dialog.ex->charset = (yyvsp[0].il);
	      }
	  }
    break;

  case 54:
#line 528 "rcparse.y"
    {
	    dialog.menu = (yyvsp[0].id);
	  }
    break;

  case 55:
#line 532 "rcparse.y"
    {
	    sub_res_info.characteristics = (yyvsp[0].il);
	  }
    break;

  case 56:
#line 536 "rcparse.y"
    {
	    sub_res_info.language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 57:
#line 540 "rcparse.y"
    {
	    sub_res_info.version = (yyvsp[0].il);
	  }
    break;

  case 59:
#line 548 "rcparse.y"
    {
	    rc_dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = (yyvsp[0].dialog_control);
	  }
    break;

  case 60:
#line 559 "rcparse.y"
    {
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 61:
#line 567 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 62:
#line 571 "rcparse.y"
    {
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 63:
#line 579 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 64:
#line 583 "rcparse.y"
    {
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 65:
#line 591 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 66:
#line 595 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 67:
#line 603 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "BEDIT");
	  }
    break;

  case 68:
#line 610 "rcparse.y"
    {
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 69:
#line 618 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 70:
#line 622 "rcparse.y"
    {
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 71:
#line 632 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 72:
#line 637 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-9].id), (yyvsp[-8].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-7].id), style, (yyvsp[-1].il));
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 73:
#line 648 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-10].id), (yyvsp[-9].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-8].id), style, (yyvsp[-2].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[-1].il);
	    (yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	  }
    break;

  case 74:
#line 656 "rcparse.y"
    {
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 75:
#line 664 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 76:
#line 668 "rcparse.y"
    {
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 77:
#line 676 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 78:
#line 680 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;

  case 79:
#line 688 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 80:
#line 692 "rcparse.y"
    {
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 81:
#line 700 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 82:
#line 704 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 83:
#line 712 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "HEDIT");
	  }
    break;

  case 84:
#line 719 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-4].id), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-1].il), 0, 0, 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 85:
#line 725 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-6].id), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), 0, 0, 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 86:
#line 731 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-8].id), (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), style, (yyvsp[-1].il), 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 87:
#line 737 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-9].id), (yyvsp[-8].il), (yyvsp[-7].il), (yyvsp[-6].il), style, (yyvsp[-2].il), (yyvsp[-1].il), (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 88:
#line 742 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 89:
#line 750 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "IEDIT");
	  }
    break;

  case 90:
#line 757 "rcparse.y"
    {
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class.named = 0;
	      class.u.id = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 91:
#line 765 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 92:
#line 769 "rcparse.y"
    {
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 93:
#line 777 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 94:
#line 781 "rcparse.y"
    {
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	    }
    break;

  case 95:
#line 788 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 96:
#line 792 "rcparse.y"
    {
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 97:
#line 800 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 98:
#line 804 "rcparse.y"
    {
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 99:
#line 812 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 100:
#line 816 "rcparse.y"
    {
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 101:
#line 824 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 102:
#line 828 "rcparse.y"
    {
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;

  case 103:
#line 836 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 104:
#line 840 "rcparse.y"
    {
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 105:
#line 848 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 106:
#line 853 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 107:
#line 855 "rcparse.y"
    {
	    rc_res_id cid;
	    cid.named = 0;
	    cid.u.id = CTL_BUTTON;
	    (yyval.dialog_control) = define_control ((yyvsp[-13].id), (yyvsp[-12].il), (yyvsp[-10].il), (yyvsp[-8].il), (yyvsp[-6].il), (yyvsp[-4].il), cid,
				 style, (yyvsp[0].il));
	  }
    break;

  case 108:
#line 873 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-1].il), class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 109:
#line 885 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), class, style, (yyvsp[-1].il));
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 110:
#line 896 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-8].il), (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), class, style, (yyvsp[-2].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[-1].il);
	    (yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	  }
    break;

  case 111:
#line 907 "rcparse.y"
    {
	    if ((yyvsp[0].id).named)
	      res_unistring_to_id (&(yyval.id), (yyvsp[0].id).u.n.name);
	    else
	      (yyval.id)=(yyvsp[0].id);
	  }
    break;

  case 112:
#line 917 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), "");
	  }
    break;

  case 113:
#line 920 "rcparse.y"
    { (yyval.id)=(yyvsp[-1].id); }
    break;

  case 114:
#line 925 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[0].il);
	  }
    break;

  case 115:
#line 930 "rcparse.y"
    {
	    (yyval.id).named = 1;
	    (yyval.id).u.n.name = (yyvsp[0].uni);
	    (yyval.id).u.n.length = unichar_len ((yyvsp[0].uni));
	  }
    break;

  case 116:
#line 939 "rcparse.y"
    {
	    (yyval.rcdata_item) = NULL;
	  }
    break;

  case 117:
#line 943 "rcparse.y"
    {
	    (yyval.rcdata_item) = (yyvsp[-1].rcdata).first;
	  }
    break;

  case 118:
#line 952 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 120:
#line 958 "rcparse.y"
    { style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;

  case 122:
#line 964 "rcparse.y"
    { style = base_style | WS_CHILD | WS_VISIBLE; }
    break;

  case 124:
#line 972 "rcparse.y"
    {
	    define_font ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 125:
#line 984 "rcparse.y"
    {
	    define_icon ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 126:
#line 997 "rcparse.y"
    {
	    language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 127:
#line 1006 "rcparse.y"
    {
	    define_menu ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 128:
#line 1016 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 129:
#line 1020 "rcparse.y"
    {
	    if ((yyvsp[-1].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[0].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[-1].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[0].menuitem);
		(yyval.menuitem) = (yyvsp[-1].menuitem);
	      }
	  }
    break;

  case 130:
#line 1037 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-2].uni), (yyvsp[-1].il), (yyvsp[0].is), 0, 0, NULL);
	  }
    break;

  case 131:
#line 1041 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;

  case 132:
#line 1045 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-4].uni), 0, (yyvsp[-3].is), 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 133:
#line 1052 "rcparse.y"
    {
	    (yyval.is) = 0;
	  }
    break;

  case 134:
#line 1056 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-2].is) | (yyvsp[0].is);
	  }
    break;

  case 135:
#line 1060 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-1].is) | (yyvsp[0].is);
	  }
    break;

  case 136:
#line 1067 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_CHECKED;
	  }
    break;

  case 137:
#line 1071 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_GRAYED;
	  }
    break;

  case 138:
#line 1075 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_HELP;
	  }
    break;

  case 139:
#line 1079 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_INACTIVE;
	  }
    break;

  case 140:
#line 1083 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBARBREAK;
	  }
    break;

  case 141:
#line 1087 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBREAK;
	  }
    break;

  case 142:
#line 1096 "rcparse.y"
    {
	    define_menu ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 143:
#line 1106 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 144:
#line 1110 "rcparse.y"
    {
	    if ((yyvsp[-1].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[0].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[-1].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[0].menuitem);
		(yyval.menuitem) = (yyvsp[-1].menuitem);
	      }
	  }
    break;

  case 145:
#line 1127 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[0].uni), 0, 0, 0, 0, NULL);
	  }
    break;

  case 146:
#line 1131 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-1].uni), (yyvsp[0].il), 0, 0, 0, NULL);
	  }
    break;

  case 147:
#line 1135 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-3].uni), (yyvsp[-2].il), (yyvsp[-1].il), (yyvsp[0].il), 0, NULL);
	  }
    break;

  case 148:
#line 1139 "rcparse.y"
    {
 	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;

  case 149:
#line 1143 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-3].uni), 0, 0, 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 150:
#line 1147 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-4].uni), (yyvsp[-3].il), 0, 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 151:
#line 1151 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-5].uni), (yyvsp[-4].il), (yyvsp[-3].il), 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 152:
#line 1156 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-7].uni), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-1].menuitem));
	  }
    break;

  case 153:
#line 1165 "rcparse.y"
    {
	    define_messagetable ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 154:
#line 1177 "rcparse.y"
    {
	    rcparse_rcdata ();
	  }
    break;

  case 155:
#line 1181 "rcparse.y"
    {
	    rcparse_normal ();
	    (yyval.rcdata) = (yyvsp[0].rcdata);
	  }
    break;

  case 156:
#line 1189 "rcparse.y"
    {
	    (yyval.rcdata).first = NULL;
	    (yyval.rcdata).last = NULL;
	  }
    break;

  case 157:
#line 1194 "rcparse.y"
    {
	    (yyval.rcdata) = (yyvsp[0].rcdata);
	  }
    break;

  case 158:
#line 1201 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[0].ss).s, (yyvsp[0].ss).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 159:
#line 1209 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[0].suni).s, (yyvsp[0].suni).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 160:
#line 1217 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[0].i).val, (yyvsp[0].i).dword);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 161:
#line 1225 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[0].ss).s, (yyvsp[0].ss).length);
	    (yyval.rcdata).first = (yyvsp[-2].rcdata).first;
	    (yyvsp[-2].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 162:
#line 1234 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[0].suni).s, (yyvsp[0].suni).length);
	    (yyval.rcdata).first = (yyvsp[-2].rcdata).first;
	    (yyvsp[-2].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 163:
#line 1243 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[0].i).val, (yyvsp[0].i).dword);
	    (yyval.rcdata).first = (yyvsp[-2].rcdata).first;
	    (yyvsp[-2].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 164:
#line 1257 "rcparse.y"
    { sub_res_info = (yyvsp[-1].res_info); }
    break;

  case 167:
#line 1264 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[-1].il), (yyvsp[0].uni));
	    rcparse_discard_strings ();
	  }
    break;

  case 168:
#line 1269 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[-2].il), (yyvsp[0].uni));
	    rcparse_discard_strings ();
	  }
    break;

  case 169:
#line 1274 "rcparse.y"
    {
	    rcparse_warning (_("invalid stringtable resource."));
	    abort ();
	  }
    break;

  case 170:
#line 1282 "rcparse.y"
    {
	    (yyval.id)=(yyvsp[0].id);
	  }
    break;

  case 171:
#line 1286 "rcparse.y"
    {
	  (yyval.id).named = 0;
	  (yyval.id).u.id = 23;
	}
    break;

  case 172:
#line 1291 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_RCDATA;
        }
    break;

  case 173:
#line 1296 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_MANIFEST;
        }
    break;

  case 174:
#line 1301 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_PLUGPLAY;
        }
    break;

  case 175:
#line 1306 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_VXD;
        }
    break;

  case 176:
#line 1311 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINCLUDE;
        }
    break;

  case 177:
#line 1316 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINIT;
        }
    break;

  case 178:
#line 1321 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANICURSOR;
        }
    break;

  case 179:
#line 1326 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANIICON;
        }
    break;

  case 180:
#line 1337 "rcparse.y"
    {
	    define_user_data ((yyvsp[-5].id), (yyvsp[-4].id), &(yyvsp[-3].res_info), (yyvsp[-1].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 181:
#line 1344 "rcparse.y"
    {
	    define_user_file ((yyvsp[-3].id), (yyvsp[-2].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 182:
#line 1354 "rcparse.y"
    {
	  define_toolbar ((yyvsp[-7].id), &(yyvsp[-5].res_info), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-1].toobar_item));
	}
    break;

  case 183:
#line 1359 "rcparse.y"
    { (yyval.toobar_item)= NULL; }
    break;

  case 184:
#line 1361 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[-2].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id = (yyvsp[0].id);
	  if ((yyvsp[-2].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[-2].toobar_item);
	}
    break;

  case 185:
#line 1380 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[-1].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id.named = 0;
	  n->id.u.id = 0;
	  if ((yyvsp[-1].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[-1].toobar_item);
	}
    break;

  case 186:
#line 1405 "rcparse.y"
    {
	    define_versioninfo ((yyvsp[-5].id), language, (yyvsp[-3].fixver), (yyvsp[-1].verinfo));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 187:
#line 1415 "rcparse.y"
    {
	    (yyval.fixver) = ((rc_fixed_versioninfo *)
		  res_alloc (sizeof (rc_fixed_versioninfo)));
	    memset ((yyval.fixver), 0, sizeof (rc_fixed_versioninfo));
	  }
    break;

  case 188:
#line 1421 "rcparse.y"
    {
	    (yyvsp[-5].fixver)->file_version_ms = ((yyvsp[-3].il) << 16) | (yyvsp[-2].il);
	    (yyvsp[-5].fixver)->file_version_ls = ((yyvsp[-1].il) << 16) | (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-5].fixver);
	  }
    break;

  case 189:
#line 1427 "rcparse.y"
    {
	    (yyvsp[-5].fixver)->product_version_ms = ((yyvsp[-3].il) << 16) | (yyvsp[-2].il);
	    (yyvsp[-5].fixver)->product_version_ls = ((yyvsp[-1].il) << 16) | (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-5].fixver);
	  }
    break;

  case 190:
#line 1433 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_flags_mask = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 191:
#line 1438 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_flags = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 192:
#line 1443 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_os = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 193:
#line 1448 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_type = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 194:
#line 1453 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_subtype = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 195:
#line 1467 "rcparse.y"
    {
	    (yyval.verinfo) = NULL;
	  }
    break;

  case 196:
#line 1471 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_stringfileinfo ((yyvsp[-7].verinfo), (yyvsp[-4].s), (yyvsp[-2].verstring));
	  }
    break;

  case 197:
#line 1475 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_varfileinfo ((yyvsp[-6].verinfo), (yyvsp[-2].uni), (yyvsp[-1].vervar));
	  }
    break;

  case 198:
#line 1482 "rcparse.y"
    {
	    (yyval.verstring) = NULL;
	  }
    break;

  case 199:
#line 1486 "rcparse.y"
    {
	    (yyval.verstring) = append_verval ((yyvsp[-4].verstring), (yyvsp[-2].uni), (yyvsp[0].uni));
	  }
    break;

  case 200:
#line 1493 "rcparse.y"
    {
	    (yyval.vervar) = NULL;
	  }
    break;

  case 201:
#line 1497 "rcparse.y"
    {
	    (yyval.vervar) = append_vertrans ((yyvsp[-2].vervar), (yyvsp[-1].il), (yyvsp[0].il));
	  }
    break;

  case 202:
#line 1506 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[0].il);
	  }
    break;

  case 203:
#line 1511 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[0].uni));
	  }
    break;

  case 204:
#line 1520 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[0].uni);
	  }
    break;

  case 205:
#line 1524 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[0].s));
	    (yyval.uni) = h;
	  }
    break;

  case 206:
#line 1534 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[-1].il);
	  }
    break;

  case 207:
#line 1539 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[0].uni));
	  }
    break;

  case 208:
#line 1543 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[-1].uni));
	  }
    break;

  case 209:
#line 1553 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    /* FIXME: Is this the right default?  */
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 210:
#line 1560 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 211:
#line 1566 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-2].res_info);
	    (yyval.res_info).characteristics = (yyvsp[0].il);
	  }
    break;

  case 212:
#line 1571 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-3].res_info);
	    (yyval.res_info).language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 213:
#line 1576 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-2].res_info);
	    (yyval.res_info).version = (yyvsp[0].il);
	  }
    break;

  case 214:
#line 1586 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 215:
#line 1592 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 216:
#line 1603 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 217:
#line 1609 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 218:
#line 1621 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_MOVEABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 219:
#line 1626 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_MOVEABLE;
	  }
    break;

  case 220:
#line 1631 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PURE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 221:
#line 1636 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PURE;
	  }
    break;

  case 222:
#line 1641 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PRELOAD;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 223:
#line 1646 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PRELOAD;
	  }
    break;

  case 224:
#line 1651 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_DISCARDABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 225:
#line 1661 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[0].s);
	  }
    break;

  case 226:
#line 1665 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[0].s);
	  }
    break;

  case 227:
#line 1673 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[0].uni);
	  }
    break;

  case 228:
#line 1678 "rcparse.y"
    {
	    rc_uint_type l1 = unichar_len ((yyvsp[-1].uni));
	    rc_uint_type l2 = unichar_len ((yyvsp[0].uni));
	    unichar *h = (unichar *) res_alloc ((l1 + l2 + 1) * sizeof (unichar));
	    if (l1 != 0)
	      memcpy (h, (yyvsp[-1].uni), l1 * sizeof (unichar));
	    if (l2 != 0)
	      memcpy (h + l1, (yyvsp[0].uni), l2  * sizeof (unichar));
	    h[l1 + l2] = 0;
	    (yyval.uni) = h;
	  }
    break;

  case 229:
#line 1693 "rcparse.y"
    {
	    (yyval.uni) = unichar_dup ((yyvsp[0].uni));
	  }
    break;

  case 230:
#line 1697 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[0].s));
	    (yyval.uni) = h;
	  }
    break;

  case 231:
#line 1706 "rcparse.y"
    {
	    (yyval.ss) = (yyvsp[0].ss);
	  }
    break;

  case 232:
#line 1710 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[-1].ss).length + (yyvsp[0].ss).length;
	    char *h = (char *) res_alloc (l);
	    memcpy (h, (yyvsp[-1].ss).s, (yyvsp[-1].ss).length);
	    memcpy (h + (yyvsp[-1].ss).length, (yyvsp[0].ss).s, (yyvsp[0].ss).length);
	    (yyval.ss).s = h;
	    (yyval.ss).length = l;
	  }
    break;

  case 233:
#line 1722 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[0].suni);
	  }
    break;

  case 234:
#line 1726 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[-1].suni).length + (yyvsp[0].suni).length;
	    unichar *h = (unichar *) res_alloc (l * sizeof (unichar));
	    memcpy (h, (yyvsp[-1].suni).s, (yyvsp[-1].suni).length * sizeof (unichar));
	    memcpy (h + (yyvsp[-1].suni).length, (yyvsp[0].suni).s, (yyvsp[0].suni).length  * sizeof (unichar));
	    (yyval.suni).s = h;
	    (yyval.suni).length = l;
	  }
    break;

  case 235:
#line 1748 "rcparse.y"
    {
	    style |= (yyvsp[0].il);
	  }
    break;

  case 236:
#line 1752 "rcparse.y"
    {
	    style &=~ (yyvsp[0].il);
	  }
    break;

  case 237:
#line 1756 "rcparse.y"
    {
	    style |= (yyvsp[0].il);
	  }
    break;

  case 238:
#line 1760 "rcparse.y"
    {
	    style &=~ (yyvsp[0].il);
	  }
    break;

  case 239:
#line 1767 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 240:
#line 1771 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[-1].il);
	  }
    break;

  case 241:
#line 1780 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 242:
#line 1784 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 243:
#line 1793 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 244:
#line 1802 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 245:
#line 1811 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[0].i);
	  }
    break;

  case 246:
#line 1815 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[-1].i);
	  }
    break;

  case 247:
#line 1819 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 248:
#line 1824 "rcparse.y"
    {
	    (yyval.i).val = - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 249:
#line 1829 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val * (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 250:
#line 1834 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val / (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 251:
#line 1839 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val % (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 252:
#line 1844 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val + (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 253:
#line 1849 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 254:
#line 1854 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val & (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 255:
#line 1859 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val ^ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 256:
#line 1864 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val | (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 257:
#line 1875 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 258:
#line 1884 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 259:
#line 1895 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[0].i);
	  }
    break;

  case 260:
#line 1899 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[-1].i);
	  }
    break;

  case 261:
#line 1903 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 262:
#line 1908 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val * (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 263:
#line 1913 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val / (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 264:
#line 1918 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val % (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 265:
#line 1923 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val + (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 266:
#line 1928 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 267:
#line 1933 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val & (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 268:
#line 1938 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val ^ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 269:
#line 1943 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val | (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;


      default: break;
    }

/* Line 1126 of yacc.c.  */
#line 4145 "rcparse.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  int yytype = YYTRANSLATE (yychar);
	  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
	  YYSIZE_T yysize = yysize0;
	  YYSIZE_T yysize1;
	  int yysize_overflow = 0;
	  char *yymsg = 0;
#	  define YYERROR_VERBOSE_ARGS_MAXIMUM 5
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;

#if 0
	  /* This is so xgettext sees the translatable formats that are
	     constructed on the fly.  */
	  YY_("syntax error, unexpected %s");
	  YY_("syntax error, unexpected %s, expecting %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
#endif
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytname[yytype];
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytname[yyx];
		yysize1 = yysize + yytnamerr (0, yytname[yyx]);
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + yystrlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow && yysize <= YYSTACK_ALLOC_MAXIMUM)
	    yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg)
	    {
	      /* Avoid sprintf, as that infringes on the user's name space.
		 Don't have undefined behavior even if the translation
		 produced a string with the wrong number of "%s"s.  */
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      goto yyexhaustedlab;
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (0)
     goto yyerrorlab;

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK;
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 1949 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}

@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 4584
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BEG = 258,
     END = 259,
     ACCELERATORS = 260,
     VIRTKEY = 261,
     ASCII = 262,
     NOINVERT = 263,
     SHIFT = 264,
     CONTROL = 265,
     ALT = 266,
     BITMAP = 267,
     CURSOR = 268,
     DIALOG = 269,
     DIALOGEX = 270,
     EXSTYLE = 271,
     CAPTION = 272,
     CLASS = 273,
     STYLE = 274,
     AUTO3STATE = 275,
     AUTOCHECKBOX = 276,
     AUTORADIOBUTTON = 277,
     CHECKBOX = 278,
     COMBOBOX = 279,
     CTEXT = 280,
     DEFPUSHBUTTON = 281,
     EDITTEXT = 282,
     GROUPBOX = 283,
     LISTBOX = 284,
     LTEXT = 285,
     PUSHBOX = 286,
     PUSHBUTTON = 287,
     RADIOBUTTON = 288,
     RTEXT = 289,
     SCROLLBAR = 290,
     STATE3 = 291,
     USERBUTTON = 292,
     BEDIT = 293,
     HEDIT = 294,
     IEDIT = 295,
     FONT = 296,
     ICON = 297,
     ANICURSOR = 298,
     ANIICON = 299,
     DLGINCLUDE = 300,
     DLGINIT = 301,
     FONTDIR = 302,
     HTML = 303,
     MANIFEST = 304,
     PLUGPLAY = 305,
     VXD = 306,
     TOOLBAR = 307,
     BUTTON = 308,
     LANGUAGE = 309,
     CHARACTERISTICS = 310,
     VERSIONK = 311,
     MENU = 312,
     MENUEX = 313,
     MENUITEM = 314,
     SEPARATOR = 315,
     POPUP = 316,
     CHECKED = 317,
     GRAYED = 318,
     HELP = 319,
     INACTIVE = 320,
     MENUBARBREAK = 321,
     MENUBREAK = 322,
     MESSAGETABLE = 323,
     RCDATA = 324,
     STRINGTABLE = 325,
     VERSIONINFO = 326,
     FILEVERSION = 327,
     PRODUCTVERSION = 328,
     FILEFLAGSMASK = 329,
     FILEFLAGS = 330,
     FILEOS = 331,
     FILETYPE = 332,
     FILESUBTYPE = 333,
     BLOCKSTRINGFILEINFO = 334,
     BLOCKVARFILEINFO = 335,
     VALUE = 336,
     BLOCK = 337,
     MOVEABLE = 338,
     FIXED = 339,
     PURE = 340,
     IMPURE = 341,
     PRELOAD = 342,
     LOADONCALL = 343,
     DISCARDABLE = 344,
     NOT = 345,
     QUOTEDUNISTRING = 346,
     QUOTEDSTRING = 347,
     STRING = 348,
     NUMBER = 349,
     SIZEDUNISTRING = 350,
     SIZEDSTRING = 351,
     IGNORED_TOKEN = 352,
     NEG = 353
   };
#endif
/* Tokens.  */
#define BEG 258
#define END 259
#define ACCELERATORS 260
#define VIRTKEY 261
#define ASCII 262
#define NOINVERT 263
#define SHIFT 264
#define CONTROL 265
#define ALT 266
#define BITMAP 267
#define CURSOR 268
#define DIALOG 269
#define DIALOGEX 270
#define EXSTYLE 271
#define CAPTION 272
#define CLASS 273
#define STYLE 274
#define AUTO3STATE 275
#define AUTOCHECKBOX 276
#define AUTORADIOBUTTON 277
#define CHECKBOX 278
#define COMBOBOX 279
#define CTEXT 280
#define DEFPUSHBUTTON 281
#define EDITTEXT 282
#define GROUPBOX 283
#define LISTBOX 284
#define LTEXT 285
#define PUSHBOX 286
#define PUSHBUTTON 287
#define RADIOBUTTON 288
#define RTEXT 289
#define SCROLLBAR 290
#define STATE3 291
#define USERBUTTON 292
#define BEDIT 293
#define HEDIT 294
#define IEDIT 295
#define FONT 296
#define ICON 297
#define ANICURSOR 298
#define ANIICON 299
#define DLGINCLUDE 300
#define DLGINIT 301
#define FONTDIR 302
#define HTML 303
#define MANIFEST 304
#define PLUGPLAY 305
#define VXD 306
#define TOOLBAR 307
#define BUTTON 308
#define LANGUAGE 309
#define CHARACTERISTICS 310
#define VERSIONK 311
#define MENU 312
#define MENUEX 313
#define MENUITEM 314
#define SEPARATOR 315
#define POPUP 316
#define CHECKED 317
#define GRAYED 318
#define HELP 319
#define INACTIVE 320
#define MENUBARBREAK 321
#define MENUBREAK 322
#define MESSAGETABLE 323
#define RCDATA 324
#define STRINGTABLE 325
#define VERSIONINFO 326
#define FILEVERSION 327
#define PRODUCTVERSION 328
#define FILEFLAGSMASK 329
#define FILEFLAGS 330
#define FILEOS 331
#define FILETYPE 332
#define FILESUBTYPE 333
#define BLOCKSTRINGFILEINFO 334
#define BLOCKVARFILEINFO 335
#define VALUE 336
#define BLOCK 337
#define MOVEABLE 338
#define FIXED 339
#define PURE 340
#define IMPURE 341
#define PRELOAD 342
#define LOADONCALL 343
#define DISCARDABLE 344
#define NOT 345
#define QUOTEDUNISTRING 346
#define QUOTEDSTRING 347
#define STRING 348
#define NUMBER 349
#define SIZEDUNISTRING 350
#define SIZEDSTRING 351
#define IGNORED_TOKEN 352
#define NEG 353




/* Copy the first part of user declarations.  */
#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.
   Extended by Kai Tietz, Onevision.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */


/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "sysdep.h"
#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static rc_res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static rc_dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static rc_uint_type base_style;
static rc_uint_type default_style;
static rc_res_id class;
static rc_res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const rc_res_id res_null_text = { 1, {{0, &null_unichar}}};



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 69 "rcparse.y"
{
  rc_accelerator acc;
  rc_accelerator *pacc;
  rc_dialog_control *dialog_control;
  rc_menuitem *menuitem;
  struct
  {
    rc_rcdata_item *first;
    rc_rcdata_item *last;
  } rcdata;
  rc_rcdata_item *rcdata_item;
  rc_fixed_versioninfo *fixver;
  rc_ver_info *verinfo;
  rc_ver_stringinfo *verstring;
  rc_ver_varinfo *vervar;
  rc_toolbar_item *toobar_item;
  rc_res_id id;
  rc_res_res_info res_info;
  struct
  {
    rc_uint_type on;
    rc_uint_type off;
  } memflags;
  struct
  {
    rc_uint_type val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  rc_uint_type il;
  rc_uint_type is;
  const char *s;
  struct
  {
    rc_uint_type length;
    const char *s;
  } ss;
  unichar *uni;
  struct
  {
    rc_uint_type length;
    const unichar *s;
  } suni;
}
/* Line 187 of yacc.c.  */
#line 404 "rcparse.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 417 "rcparse.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   849

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  99
/* YYNRULES -- Number of rules.  */
#define YYNRULES  268
/* YYNRULES -- Number of states.  */
#define YYNSTATES  514

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   353

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   105,   100,     2,
     110,   111,   103,   101,   108,   102,     2,   104,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   109,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    99,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    98,     2,   106,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,   107
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    49,    56,
      57,    60,    63,    68,    70,    72,    74,    78,    81,    83,
      85,    87,    89,    91,    93,    98,   103,   104,   118,   119,
     133,   134,   149,   150,   154,   155,   159,   163,   167,   171,
     175,   181,   188,   196,   205,   209,   213,   218,   222,   223,
     226,   227,   232,   233,   238,   239,   244,   245,   250,   251,
     256,   257,   261,   273,   286,   287,   292,   293,   298,   299,
     303,   304,   309,   310,   315,   322,   331,   342,   354,   355,
     360,   361,   365,   366,   371,   372,   377,   378,   383,   384,
     389,   390,   395,   396,   400,   401,   406,   407,   423,   430,
     439,   449,   452,   453,   456,   458,   460,   461,   465,   466,
     470,   471,   475,   476,   480,   485,   490,   494,   501,   502,
     505,   510,   513,   520,   521,   525,   528,   530,   532,   534,
     536,   538,   540,   547,   548,   551,   554,   558,   564,   567,
     573,   580,   588,   598,   603,   604,   607,   608,   610,   612,
     614,   616,   620,   624,   628,   629,   636,   637,   641,   646,
     648,   650,   652,   654,   656,   658,   660,   662,   664,   666,
     673,   678,   687,   688,   692,   695,   702,   703,   710,   717,
     721,   725,   729,   733,   737,   738,   747,   755,   756,   762,
     763,   767,   769,   771,   773,   775,   778,   780,   783,   784,
     787,   791,   796,   800,   801,   804,   805,   808,   810,   812,
     814,   816,   818,   820,   822,   824,   826,   828,   831,   833,
     835,   837,   840,   842,   845,   847,   850,   854,   859,   861,
     865,   866,   868,   871,   873,   875,   879,   882,   885,   889,
     893,   897,   901,   905,   909,   913,   917,   920,   922,   924,
     928,   931,   935,   939,   943,   947,   951,   955,   959
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     113,     0,    -1,    -1,   113,   114,    -1,   113,   120,    -1,
     113,   121,    -1,   113,   122,    -1,   113,   162,    -1,   113,
     163,    -1,   113,   164,    -1,   113,   165,    -1,   113,   170,
      -1,   113,   173,    -1,   113,   178,    -1,   113,   183,    -1,
     113,   182,    -1,   113,   185,    -1,   113,    97,    -1,   190,
       5,   193,     3,   115,     4,    -1,    -1,   115,   116,    -1,
     117,   208,    -1,   117,   208,   108,   118,    -1,    92,    -1,
     209,    -1,   119,    -1,   118,   108,   119,    -1,   118,   119,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,   190,    12,   195,   197,    -1,   190,    13,
     194,   197,    -1,    -1,   190,    14,   195,   126,   209,   205,
     205,   205,   123,   127,     3,   128,     4,    -1,    -1,   190,
      15,   195,   126,   209,   205,   205,   205,   124,   127,     3,
     128,     4,    -1,    -1,   190,    15,   195,   126,   209,   205,
     205,   205,   205,   125,   127,     3,   128,     4,    -1,    -1,
      16,   109,   206,    -1,    -1,   127,    17,   198,    -1,   127,
      18,   190,    -1,   127,    19,   202,    -1,   127,    16,   206,
      -1,   127,    18,   198,    -1,   127,    41,   206,   108,   198,
      -1,   127,    41,   206,   108,   198,   205,    -1,   127,    41,
     206,   108,   198,   205,   205,    -1,   127,    41,   206,   108,
     198,   205,   205,   205,    -1,   127,    57,   190,    -1,   127,
      55,   206,    -1,   127,    54,   206,   205,    -1,   127,    56,
     206,    -1,    -1,   128,   129,    -1,    -1,    20,   153,   130,
     151,    -1,    -1,    21,   153,   131,   151,    -1,    -1,    22,
     153,   132,   151,    -1,    -1,    38,   153,   133,   151,    -1,
      -1,    23,   153,   134,   151,    -1,    -1,    24,   135,   151,
      -1,    10,   153,   206,   152,   156,   205,   205,   205,   205,
     204,   155,    -1,    10,   153,   206,   152,   156,   205,   205,
     205,   205,   205,   205,   155,    -1,    -1,    25,   153,   136,
     151,    -1,    -1,    26,   153,   137,   151,    -1,    -1,    27,
     138,   151,    -1,    -1,    28,   153,   139,   151,    -1,    -1,
      39,   153,   140,   151,    -1,    42,   192,   206,   205,   205,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   155,
      -1,    42,   192,   206,   205,   205,   205,   205,   158,   204,
     155,    -1,    42,   192,   206,   205,   205,   205,   205,   158,
     205,   205,   155,    -1,    -1,    40,   153,   141,   151,    -1,
      -1,    29,   142,   151,    -1,    -1,    30,   153,   143,   151,
      -1,    -1,    31,   153,   144,   151,    -1,    -1,    32,   153,
     145,   151,    -1,    -1,    33,   153,   146,   151,    -1,    -1,
      34,   153,   147,   151,    -1,    -1,    35,   148,   151,    -1,
      -1,    36,   153,   149,   151,    -1,    -1,    37,   192,   206,
     108,   206,   108,   206,   108,   206,   108,   206,   108,   150,
     202,   204,    -1,   206,   205,   205,   205,   205,   155,    -1,
     206,   205,   205,   205,   205,   160,   204,   155,    -1,   206,
     205,   205,   205,   205,   160,   205,   205,   155,    -1,   108,
     154,    -1,    -1,   154,   108,    -1,   209,    -1,   199,    -1,
      -1,     3,   174,     4,    -1,    -1,   108,   157,   202,    -1,
      -1,   108,   159,   202,    -1,    -1,   108,   161,   202,    -1,
     190,    41,   194,   197,    -1,   190,    42,   194,   197,    -1,
      54,   206,   205,    -1,   190,    57,   193,     3,   166,     4,
      -1,    -1,   166,   167,    -1,    59,   198,   205,   168,    -1,
      59,    60,    -1,    61,   198,   168,     3,   166,     4,    -1,
      -1,   168,   108,   169,    -1,   168,   169,    -1,    62,    -1,
      63,    -1,    64,    -1,    65,    -1,    66,    -1,    67,    -1,
     190,    58,   193,     3,   171,     4,    -1,    -1,   171,   172,
      -1,    59,   198,    -1,    59,   198,   205,    -1,    59,   198,
     205,   205,   204,    -1,    59,    60,    -1,    61,   198,     3,
     171,     4,    -1,    61,   198,   205,     3,   171,     4,    -1,
      61,   198,   205,   205,     3,   171,     4,    -1,    61,   198,
     205,   205,   205,   204,     3,   171,     4,    -1,   190,    68,
     195,   197,    -1,    -1,   175,   176,    -1,    -1,   177,    -1,
     200,    -1,   201,    -1,   207,    -1,   177,   108,   200,    -1,
     177,   108,   201,    -1,   177,   108,   207,    -1,    -1,    70,
     193,     3,   179,   180,     4,    -1,    -1,   180,   206,   198,
      -1,   180,   206,   108,   198,    -1,   190,    -1,    48,    -1,
      69,    -1,    49,    -1,    50,    -1,    51,    -1,    45,    -1,
      46,    -1,    43,    -1,    44,    -1,   190,   181,   193,     3,
     174,     4,    -1,   190,   181,   193,   197,    -1,   190,    52,
     193,   206,   205,     3,   184,     4,    -1,    -1,   184,    53,
     190,    -1,   184,    60,    -1,   190,    71,   186,     3,   187,
       4,    -1,    -1,   186,    72,   206,   205,   205,   205,    -1,
     186,    73,   206,   205,   205,   205,    -1,   186,    74,   206,
      -1,   186,    75,   206,    -1,   186,    76,   206,    -1,   186,
      77,   206,    -1,   186,    78,   206,    -1,    -1,   187,    79,
       3,    82,     3,   188,     4,     4,    -1,   187,    80,     3,
      81,   198,   189,     4,    -1,    -1,   188,    81,   198,   108,
     198,    -1,    -1,   189,   205,   205,    -1,   209,    -1,   191,
      -1,   199,    -1,    93,    -1,   209,   108,    -1,   191,    -1,
     191,   108,    -1,    -1,   193,   196,    -1,   193,    55,   206,
      -1,   193,    54,   206,   205,    -1,   193,    56,   206,    -1,
      -1,   194,   196,    -1,    -1,   195,   196,    -1,    83,    -1,
      84,    -1,    85,    -1,    86,    -1,    87,    -1,    88,    -1,
      89,    -1,    92,    -1,    93,    -1,   199,    -1,   198,   199,
      -1,    91,    -1,    92,    -1,    96,    -1,   200,    96,    -1,
      95,    -1,   201,    95,    -1,   203,    -1,    90,   203,    -1,
     202,    98,   203,    -1,   202,    98,    90,   203,    -1,    94,
      -1,   110,   206,   111,    -1,    -1,   205,    -1,   108,   206,
      -1,   207,    -1,    94,    -1,   110,   207,   111,    -1,   106,
     207,    -1,   102,   207,    -1,   207,   103,   207,    -1,   207,
     104,   207,    -1,   207,   105,   207,    -1,   207,   101,   207,
      -1,   207,   102,   207,    -1,   207,   100,   207,    -1,   207,
      99,   207,    -1,   207,    98,   207,    -1,   108,   209,    -1,
     210,    -1,    94,    -1,   110,   207,   111,    -1,   106,   207,
      -1,   210,   103,   207,    -1,   210,   104,   207,    -1,   210,
     105,   207,    -1,   210,   101,   207,    -1,   210,   102,   207,
      -1,   210,   100,   207,    -1,   210,    99,   207,    -1,   210,
      98,   207,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   177,   177,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   199,   210,
     213,   234,   239,   251,   271,   281,   285,   290,   297,   301,
     306,   310,   314,   318,   327,   339,   353,   351,   378,   376,
     405,   403,   435,   438,   444,   446,   452,   456,   461,   465,
     469,   482,   497,   512,   527,   531,   535,   539,   545,   547,
     559,   558,   571,   570,   583,   582,   595,   594,   610,   609,
     622,   621,   635,   646,   656,   655,   668,   667,   680,   679,
     692,   691,   704,   703,   718,   723,   729,   735,   742,   741,
     757,   756,   769,   768,   781,   780,   792,   791,   804,   803,
     816,   815,   828,   827,   840,   839,   853,   851,   872,   883,
     894,   906,   917,   920,   924,   929,   939,   942,   952,   951,
     958,   957,   964,   963,   971,   983,   996,  1005,  1016,  1019,
    1036,  1040,  1044,  1052,  1055,  1059,  1066,  1070,  1074,  1078,
    1082,  1086,  1095,  1106,  1109,  1126,  1130,  1134,  1138,  1142,
    1146,  1150,  1154,  1164,  1177,  1177,  1189,  1193,  1200,  1208,
    1216,  1224,  1233,  1242,  1257,  1256,  1261,  1263,  1270,  1280,
    1284,  1289,  1294,  1299,  1304,  1309,  1314,  1319,  1324,  1335,
    1342,  1352,  1358,  1359,  1378,  1403,  1414,  1419,  1425,  1431,
    1436,  1441,  1446,  1451,  1466,  1469,  1473,  1481,  1484,  1492,
    1495,  1504,  1509,  1518,  1522,  1532,  1537,  1541,  1552,  1558,
    1564,  1569,  1574,  1585,  1590,  1602,  1607,  1619,  1624,  1629,
    1634,  1639,  1644,  1649,  1659,  1663,  1671,  1676,  1691,  1695,
    1704,  1708,  1720,  1724,  1746,  1750,  1754,  1758,  1765,  1769,
    1779,  1782,  1791,  1800,  1809,  1813,  1817,  1822,  1827,  1832,
    1837,  1842,  1847,  1852,  1857,  1862,  1873,  1882,  1893,  1897,
    1901,  1906,  1911,  1916,  1921,  1926,  1931,  1936,  1941
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BEG", "END", "ACCELERATORS", "VIRTKEY",
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR",
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE",
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX",
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT",
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3",
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "ANICURSOR",
  "ANIICON", "DLGINCLUDE", "DLGINIT", "FONTDIR", "HTML", "MANIFEST",
  "PLUGPLAY", "VXD", "TOOLBAR", "BUTTON", "LANGUAGE", "CHARACTERISTICS",
  "VERSIONK", "MENU", "MENUEX", "MENUITEM", "SEPARATOR", "POPUP",
  "CHECKED", "GRAYED", "HELP", "INACTIVE", "MENUBARBREAK", "MENUBREAK",
  "MESSAGETABLE", "RCDATA", "STRINGTABLE", "VERSIONINFO", "FILEVERSION",
  "PRODUCTVERSION", "FILEFLAGSMASK", "FILEFLAGS", "FILEOS", "FILETYPE",
  "FILESUBTYPE", "BLOCKSTRINGFILEINFO", "BLOCKVARFILEINFO", "VALUE",
  "BLOCK", "MOVEABLE", "FIXED", "PURE", "IMPURE", "PRELOAD", "LOADONCALL",
  "DISCARDABLE", "NOT", "QUOTEDUNISTRING", "QUOTEDSTRING", "STRING",
  "NUMBER", "SIZEDUNISTRING", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'",
  "'&'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='",
  "'('", "')'", "$accept", "input", "accelerator", "acc_entries",
  "acc_entry", "acc_event", "acc_options", "acc_option", "bitmap",
  "cursor", "dialog", "@@1", "@@2", "@@3", "exstyle", "styles", "controls",
  "control", "@@4", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10", "@@11", "@@12",
  "@@13", "@@14", "@@15", "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22",
  "@@23", "@@24", "control_params", "cresid", "optresidc", "resid",
  "opt_control_data", "control_styleexpr", "@@25", "icon_styleexpr", "@@26",
  "control_params_styleexpr", "@@27", "font", "icon", "language", "menu",
  "menuitems", "menuitem", "menuitem_flags", "menuitem_flag", "menuex",
  "menuexitems", "menuexitem", "messagetable", "optrcdata_data", "@@28",
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", "string_data",
  "rcdata_id", "user", "toolbar", "toolbar_data", "versioninfo",
  "fixedverinfo", "verblocks", "vervals", "vertrans", "id", "resname",
  "resref", "suboptions", "memflags_move_discard", "memflags_move",
  "memflag", "file_name", "res_unicode_string_concat",
  "res_unicode_string", "sizedstring", "sizedunistring", "styleexpr",
  "parennumber", "optcnumexpr", "cnumexpr", "numexpr", "sizednumexpr",
  "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   124,    94,
      38,    43,    45,    42,    47,    37,   126,   353,    44,    61,
      40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   113,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   118,   119,   119,
     119,   119,   119,   119,   120,   121,   123,   122,   124,   122,
     125,   122,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
     130,   129,   131,   129,   132,   129,   133,   129,   134,   129,
     135,   129,   129,   129,   136,   129,   137,   129,   138,   129,
     139,   129,   140,   129,   129,   129,   129,   129,   141,   129,
     142,   129,   143,   129,   144,   129,   145,   129,   146,   129,
     147,   129,   148,   129,   149,   129,   150,   129,   151,   151,
     151,   152,   153,   153,   154,   154,   155,   155,   157,   156,
     159,   158,   161,   160,   162,   163,   164,   165,   166,   166,
     167,   167,   167,   168,   168,   168,   169,   169,   169,   169,
     169,   169,   170,   171,   171,   172,   172,   172,   172,   172,
     172,   172,   172,   173,   175,   174,   176,   176,   177,   177,
     177,   177,   177,   177,   179,   178,   180,   180,   180,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   182,
     182,   183,   184,   184,   184,   185,   186,   186,   186,   186,
     186,   186,   186,   186,   187,   187,   187,   188,   188,   189,
     189,   190,   190,   191,   191,   192,   192,   192,   193,   193,
     193,   193,   193,   194,   194,   195,   195,   196,   196,   196,
     196,   196,   196,   196,   197,   197,   198,   198,   199,   199,
     200,   200,   201,   201,   202,   202,   202,   202,   203,   203,
     204,   204,   205,   206,   207,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   208,   209,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     3,     3,     3,
       5,     6,     7,     8,     3,     3,     4,     3,     0,     2,
       0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     3,    11,    12,     0,     4,     0,     4,     0,     3,
       0,     4,     0,     4,     6,     8,    10,    11,     0,     4,
       0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     4,     0,     3,     0,     4,     0,    15,     6,     8,
       9,     2,     0,     2,     1,     1,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     0,     2,     0,     1,     1,     1,
       1,     3,     3,     3,     0,     6,     0,     3,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     6,
       4,     8,     0,     3,     2,     6,     0,     6,     6,     3,
       3,     3,     3,     3,     0,     8,     7,     0,     5,     0,
       3,     1,     1,     1,     1,     2,     1,     2,     0,     2,
       3,     4,     3,     0,     2,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     3,     4,     1,     3,
       0,     1,     2,     1,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     1,     1,     3,
       2,     3,     3,     3,     3,     3,     3,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       2,     0,     1,     0,   208,   228,   229,   204,   258,    17,
       0,     0,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    15,    14,    16,     0,   202,   203,   201,
     257,   244,     0,     0,     0,     0,   243,     0,   260,     0,
     208,   215,   213,   215,   215,   213,   213,   177,   178,   175,
     176,   170,   172,   173,   174,   208,   208,   208,   215,   171,
     186,   208,   169,     0,     0,     0,     0,     0,     0,     0,
       0,   247,   246,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,   164,     0,     0,     0,   217,   218,
     219,   220,   221,   222,   223,   209,   259,     0,     0,     0,
      42,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     268,   267,   266,   264,   265,   261,   262,   263,   245,   242,
     255,   254,   253,   251,   252,   248,   249,   250,   166,     0,
     210,   212,    19,   224,   225,   216,    34,   214,    35,     0,
       0,     0,   124,   125,     0,   128,   143,   153,   194,     0,
       0,     0,     0,     0,     0,     0,   154,   180,     0,   211,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     189,   190,   191,   192,   193,     0,   156,   165,     0,    18,
      23,    20,     0,    24,    43,     0,     0,   182,   127,     0,
       0,   129,   142,     0,     0,   144,   185,     0,     0,     0,
       0,   179,   232,   230,   155,   157,   158,   159,   160,     0,
     167,   226,     0,    21,     0,     0,     0,   131,     0,   133,
     148,   145,     0,     0,     0,     0,     0,     0,   231,   233,
     168,   227,   256,     0,    36,    38,   181,     0,   184,   133,
       0,   146,   143,     0,     0,     0,   187,   188,   161,   162,
     163,    28,    29,    30,    31,    32,    33,    22,    25,    44,
      44,    40,   183,   130,   128,   136,   137,   138,   139,   140,
     141,     0,   135,   240,     0,   143,     0,   197,   199,     0,
      27,     0,     0,    44,     0,   134,   147,   241,   149,     0,
     143,   240,     0,     0,    26,    58,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    58,     0,   132,   150,     0,
       0,     0,     0,   196,     0,     0,    48,    45,    46,    49,
     203,     0,   238,     0,    47,   234,     0,     0,    55,    57,
      54,     0,    58,   151,   143,   195,     0,   200,    37,   112,
     112,   112,   112,   112,    70,   112,   112,    78,   112,    90,
     112,   112,   112,   112,   112,   102,   112,     0,   112,   112,
     112,     0,    59,   235,     0,     0,     0,    56,    39,     0,
       0,     0,     0,     0,   115,   114,    60,    62,    64,    68,
       0,    74,    76,     0,    80,     0,    92,    94,    96,    98,
     100,     0,   104,   206,     0,     0,    66,    82,    88,     0,
     239,     0,   236,    50,    41,   152,   198,     0,   113,     0,
       0,     0,     0,    71,     0,     0,     0,    79,     0,    91,
       0,     0,     0,     0,     0,   103,     0,   207,     0,   205,
       0,     0,     0,     0,   237,    51,     0,     0,    61,    63,
      65,    69,     0,    75,    77,    81,    93,    95,    97,    99,
     101,   105,     0,    67,    83,    89,     0,    52,   111,   118,
       0,     0,     0,   116,    53,     0,     0,     0,     0,   154,
      84,     0,   119,     0,   116,     0,     0,   116,     0,   122,
     108,   240,     0,   117,   120,    85,   240,   240,     0,   116,
     241,     0,     0,   116,   241,   116,   241,   123,   109,   116,
       0,   121,    86,   116,    72,   116,   110,     0,    87,    73,
     106,     0,   240,   107
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,    12,   160,   181,   182,   257,   258,    13,    14,
      15,   259,   260,   283,   140,   281,   315,   362,   409,   410,
     411,   430,   412,   380,   415,   416,   383,   418,   431,   432,
     385,   420,   421,   422,   423,   424,   391,   426,   511,   413,
     437,   372,   373,   470,   460,   465,   486,   492,   481,   488,
      16,    17,    18,    19,   165,   191,   240,   272,    20,   166,
     195,    21,   175,   176,   204,   205,    22,   128,   158,    61,
      23,    24,   216,    25,   108,   167,   292,   293,    26,    27,
     394,    37,    99,    98,    95,   136,   210,   374,   206,   207,
     324,   325,   286,   287,   414,    36,   213,   375,    30
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -443
static const yytype_int16 yypact[] =
{
    -443,   114,  -443,   326,  -443,  -443,  -443,  -443,  -443,  -443,
     326,   326,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,   461,  -443,  -443,  -443,
     603,  -443,   326,   326,   326,   -90,   640,   249,  -443,   511,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,   326,   326,   326,   326,   326,   326,   326,
     326,  -443,  -443,   674,   326,  -443,   326,   326,   326,   326,
     326,   326,   326,   326,  -443,   326,   326,   326,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,   287,   548,   548,
     314,   314,   548,   548,   489,   402,   439,   548,   280,   226,
     732,   456,   379,   -44,   -44,  -443,  -443,  -443,  -443,  -443,
     732,   456,   379,   -44,   -44,  -443,  -443,  -443,  -443,   -90,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,   -67,
     165,   165,  -443,  -443,   -90,  -443,  -443,  -443,  -443,   326,
     326,   326,   326,   326,   326,   326,  -443,  -443,     2,  -443,
      13,   326,   -90,   -90,    50,   118,   157,    52,   -90,   -90,
    -443,  -443,  -443,  -443,  -443,    51,   440,  -443,   231,  -443,
    -443,  -443,   -38,  -443,  -443,   -90,   -90,  -443,  -443,    42,
     -52,  -443,  -443,    80,   -52,  -443,  -443,    83,    94,   -90,
     -90,  -443,  -443,  -443,  -443,    -8,    15,    33,   640,   -52,
     -52,  -443,   165,    27,   -90,   -90,   166,  -443,   271,   -52,
    -443,   271,     7,    59,    63,   -90,   -90,   440,  -443,  -443,
     -52,  -443,  -443,   832,  -443,   -90,  -443,   255,  -443,  -443,
       1,   -90,  -443,     5,   153,   -52,  -443,  -443,    15,    33,
     640,  -443,  -443,  -443,  -443,  -443,  -443,    19,  -443,  -443,
    -443,  -443,  -443,   359,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,   782,  -443,   -90,   162,  -443,     8,  -443,   -52,   832,
    -443,   546,   563,  -443,   171,  -443,  -443,  -443,  -443,   186,
    -443,   -90,    29,    -2,  -443,  -443,   326,   -52,   255,   -56,
     326,   326,   326,   326,   255,  -443,   589,  -443,  -443,   190,
     154,   158,   -52,  -443,   -90,   653,  -443,   -52,  -443,   -52,
      62,   -63,  -443,   326,    69,  -443,    68,   -90,  -443,  -443,
    -443,   690,  -443,  -443,  -443,  -443,   298,  -443,  -443,   152,
     152,   152,   152,   152,  -443,   152,   152,  -443,   152,  -443,
     152,   152,   152,   152,   152,  -443,   152,   255,   152,   152,
     152,   255,  -443,  -443,    67,    75,   -52,  -443,  -443,   727,
     194,   -52,   326,    72,  -443,  -443,  -443,  -443,  -443,  -443,
     326,  -443,  -443,   326,  -443,   326,  -443,  -443,  -443,  -443,
    -443,   326,  -443,    74,   326,    78,  -443,  -443,  -443,   326,
    -443,   -63,  -443,   271,  -443,  -443,   -52,    85,  -443,   326,
     326,   326,   326,  -443,   -90,   326,   326,  -443,   326,  -443,
     326,   326,   326,   326,   326,  -443,   326,  -443,    96,  -443,
     326,   326,   326,   -90,  -443,   -90,   152,   102,  -443,  -443,
    -443,  -443,   -90,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,   326,  -443,  -443,  -443,   -90,   -90,  -443,  -443,
     -90,   -90,   105,     9,  -443,   -56,   -90,   -90,   326,  -443,
    -443,   -90,    69,   -90,    12,   106,   187,    16,   -90,  -443,
    -443,   -90,   326,  -443,  -443,  -443,   -90,   -90,   -56,   198,
     -90,   119,   -56,   198,   -90,   198,   -90,    69,  -443,   198,
     326,    69,  -443,   198,  -443,   198,  -443,   123,  -443,  -443,
    -443,   -56,   -46,  -443
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -244,  -443,  -443,
    -443,  -443,  -443,  -443,   121,  -246,  -300,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,   238,
    -443,   460,  -197,   294,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,   -22,  -443,    22,   -17,  -443,  -239,
    -443,  -443,  -206,  -443,  -443,  -443,  -443,  -443,  -443,  -443,
    -443,  -443,  -443,  -443,  -443,  -443,  -443,  -443,   -25,  -341,
     -97,   230,    93,    14,   723,   487,   -64,    47,    45,    49,
    -442,  -280,  -284,   -26,    -3,    11,  -443,    23,  -443
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -227
static const yytype_int16 yytable[] =
{
      35,    62,   313,   274,   264,   331,   177,   310,   275,    75,
     242,   290,   469,   280,   282,   469,   393,   179,    74,   469,
     393,    38,    39,   472,    29,   251,   252,   253,   254,   255,
     256,   322,   369,   311,   321,   294,   289,   306,   322,     5,
       6,   363,   161,    71,    72,    73,   497,   323,    28,    29,
     501,   309,   365,   187,   323,   201,   196,   100,   101,    81,
      82,    83,    74,   265,   266,   267,   268,   269,   270,   512,
     212,   119,   107,    28,   110,   111,   112,   113,   114,   115,
     116,   117,   129,   130,   131,   402,   223,   120,   121,   122,
     123,   124,   125,   126,   127,   370,    31,   224,     5,     6,
     227,   144,   217,   159,    32,   180,    74,     8,    33,   271,
     312,   228,    34,    74,     2,    74,    74,    74,   164,    10,
     479,   434,   188,    11,   484,   218,   219,   279,   229,   221,
     222,   197,   198,     5,     6,   233,   185,   186,   102,   103,
     220,   244,   199,   200,   245,   230,   168,   169,   170,   171,
     172,   173,   174,  -226,  -226,   178,   277,   334,   184,   214,
     215,   192,   335,   162,   163,   401,   288,   365,     3,   322,
     236,     5,     6,   225,   226,   307,   366,   189,   400,   190,
     408,   278,   427,   183,     4,   323,   429,   208,   234,   235,
     308,   483,   239,   436,   333,   241,   243,   489,   405,   246,
     247,   469,   493,   495,   452,     5,     6,     7,     8,   261,
     459,     9,   262,   468,   482,   273,   193,   276,   194,   237,
      10,   193,   141,   194,    11,   211,   238,   500,   513,   156,
     189,   510,   190,   317,   319,   232,   211,   211,   250,   458,
     211,   211,   284,     5,     6,   193,     8,   194,   336,   193,
     291,   194,    84,   193,   285,   194,   211,   231,    10,     8,
      29,   263,    11,   476,   399,   231,   231,   314,   231,   231,
      97,    10,   248,   318,     0,    11,   249,   231,     0,   330,
      85,    86,    87,   148,    28,   104,   105,   106,   337,     0,
     132,   109,   211,   316,     0,     0,     0,   326,   327,   328,
     329,   367,   403,    85,    86,    87,     0,   406,     0,    88,
      89,    90,    91,    92,    93,    94,     0,     0,   133,   134,
     364,    29,     5,     6,     0,   231,     0,    29,     0,     0,
     139,     0,    88,    89,    90,    91,    92,    93,    94,   209,
       0,    85,    86,    87,   211,   320,     5,     6,     7,     8,
       0,    28,   149,   150,   151,   152,   153,   154,   155,   211,
       0,    10,     5,     6,   231,    11,   231,     0,     0,   407,
      88,    89,    90,    91,    92,    93,    94,   435,     0,    74,
     395,     0,     0,   231,   395,     0,     0,     0,   442,     5,
       6,   428,     0,     0,     0,     0,   433,    88,    89,    90,
      91,    92,    93,    94,    28,   145,   371,   456,    28,   457,
       0,     0,     0,   211,     0,     0,   461,     0,   211,     0,
      31,   265,   266,   267,   268,   269,   270,     0,    32,     0,
     463,   464,    33,     0,   466,   467,    34,   471,     0,     0,
     473,   474,   146,     0,     0,   477,     0,   478,     0,   462,
     231,     0,   487,   231,     0,   490,    85,    86,    87,     0,
     494,   496,     0,     0,   499,   475,    40,   271,   503,     0,
     505,     0,     0,    41,    42,    43,    44,     0,     0,   491,
      79,    80,    81,    82,    83,    88,    89,    90,    91,    92,
      93,    94,     0,    85,    86,    87,     0,   507,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,     0,    51,
      52,    53,    54,    55,     0,     0,     0,     0,    56,    57,
       0,     0,    88,    89,    90,    91,    92,    93,    94,    58,
      59,     0,    60,     0,    31,   202,   203,     0,     0,     0,
       0,     0,    32,    85,    86,    87,    33,     0,     0,   295,
      34,     0,     5,     6,     7,     8,    78,    79,    80,    81,
      82,    83,   296,   297,   298,   299,   305,    10,     0,     0,
       0,    11,    88,    89,    90,    91,    92,    93,    94,   296,
     297,   298,   299,    31,     0,     0,   138,   300,     0,   142,
     143,    32,   332,     0,   147,    33,   157,     0,     0,    34,
     301,   302,   303,   304,   300,   296,   297,   298,   299,    76,
      77,    78,    79,    80,    81,    82,    83,   301,   302,   303,
     304,   417,    96,   419,     0,     0,     0,     0,     0,   425,
     300,    88,    89,    90,    91,    92,    93,    94,     0,     0,
     133,   134,     0,   301,   302,   303,   304,   438,   439,   440,
     441,     0,     0,   443,   444,     0,   445,   338,   446,   447,
     448,   449,   450,   339,   451,     0,     0,     0,   453,   454,
     455,     0,     0,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   368,   361,     0,     0,     0,     0,
     339,    63,    64,    65,    66,    67,    68,    69,    70,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   404,   361,     0,     0,     0,     0,   339,    76,    77,
      78,    79,    80,    81,    82,    83,     0,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   480,   361,
       0,   485,    76,    77,    78,    79,    80,    81,    82,    83,
       0,     0,     0,   498,     0,   118,     0,   502,     0,   504,
       0,     0,     0,   506,     0,     0,     0,   508,     0,   509,
     376,   377,   378,   379,     0,   381,   382,     0,   384,     0,
     386,   387,   388,   389,   390,     0,   392,     0,   396,   397,
     398,   135,   137,   135,   135,   137,   137,     0,     0,     0,
     135,    77,    78,    79,    80,    81,    82,    83,   251,   252,
     253,   254,   255,   256,   265,   266,   267,   268,   269,   270
};

static const yytype_int16 yycheck[] =
{
       3,    26,     4,   242,     3,   305,     4,   291,     3,    35,
       3,     3,     3,   257,   260,     3,   357,     4,   108,     3,
     361,    10,    11,   465,     1,     6,     7,     8,     9,    10,
      11,    94,   332,     4,    90,   279,   275,   283,    94,    91,
      92,   321,   109,    32,    33,    34,   488,   110,     1,    26,
     492,   290,    98,     3,   110,     4,     4,    43,    44,   103,
     104,   105,   108,    62,    63,    64,    65,    66,    67,   511,
     108,    74,    58,    26,    63,    64,    65,    66,    67,    68,
      69,    70,    85,    86,    87,   365,     3,    76,    77,    78,
      79,    80,    81,    82,    83,   334,    94,     3,    91,    92,
     108,   104,    60,   129,   102,    92,   108,    94,   106,   108,
      81,    96,   110,   108,     0,   108,   108,   108,   144,   106,
     108,   401,     4,   110,   108,   189,   190,   108,    95,   193,
     194,    79,    80,    91,    92,   108,   162,   163,    45,    46,
      60,    82,   168,   169,    81,   209,   149,   150,   151,   152,
     153,   154,   155,    91,    92,   158,     3,     3,   161,   185,
     186,     4,     4,   140,   141,    90,     4,    98,    54,    94,
       4,    91,    92,   199,   200,     4,   108,    59,   111,    61,
     108,   245,   108,   160,    70,   110,   108,   176,   214,   215,
       4,     4,   218,   108,     4,   221,   222,   481,     4,   225,
     226,     3,   486,   487,   108,    91,    92,    93,    94,   235,
     108,    97,   237,   108,   108,   241,    59,   243,    61,    53,
     106,    59,   101,    61,   110,   178,    60,   108,   512,     3,
      59,   108,    61,   297,   298,   212,   189,   190,   227,   436,
     193,   194,   264,    91,    92,    59,    94,    61,   312,    59,
     276,    61,     3,    59,   271,    61,   209,   210,   106,    94,
     237,   239,   110,   469,   361,   218,   219,   293,   221,   222,
      40,   106,   227,   298,    -1,   110,   227,   230,    -1,   304,
      54,    55,    56,     3,   237,    55,    56,    57,   314,    -1,
       3,    61,   245,   296,    -1,    -1,    -1,   300,   301,   302,
     303,   327,   366,    54,    55,    56,    -1,   371,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    -1,    92,    93,
     323,   298,    91,    92,    -1,   278,    -1,   304,    -1,    -1,
      16,    -1,    83,    84,    85,    86,    87,    88,    89,   108,
      -1,    54,    55,    56,   297,   298,    91,    92,    93,    94,
      -1,   304,    72,    73,    74,    75,    76,    77,    78,   312,
      -1,   106,    91,    92,   317,   110,   319,    -1,    -1,   372,
      83,    84,    85,    86,    87,    88,    89,   403,    -1,   108,
     357,    -1,    -1,   336,   361,    -1,    -1,    -1,   414,    91,
      92,   394,    -1,    -1,    -1,    -1,   399,    83,    84,    85,
      86,    87,    88,    89,   357,     3,   108,   433,   361,   435,
      -1,    -1,    -1,   366,    -1,    -1,   442,    -1,   371,    -1,
      94,    62,    63,    64,    65,    66,    67,    -1,   102,    -1,
     456,   457,   106,    -1,   460,   461,   110,   463,    -1,    -1,
     466,   467,     3,    -1,    -1,   471,    -1,   473,    -1,   452,
     403,    -1,   478,   406,    -1,   481,    54,    55,    56,    -1,
     486,   487,    -1,    -1,   490,   468,     5,   108,   494,    -1,
     496,    -1,    -1,    12,    13,    14,    15,    -1,    -1,   482,
     101,   102,   103,   104,   105,    83,    84,    85,    86,    87,
      88,    89,    -1,    54,    55,    56,    -1,   500,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    57,    58,
      -1,    -1,    83,    84,    85,    86,    87,    88,    89,    68,
      69,    -1,    71,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,   102,    54,    55,    56,   106,    -1,    -1,     3,
     110,    -1,    91,    92,    93,    94,   100,   101,   102,   103,
     104,   105,    16,    17,    18,    19,     3,   106,    -1,    -1,
      -1,   110,    83,    84,    85,    86,    87,    88,    89,    16,
      17,    18,    19,    94,    -1,    -1,    99,    41,    -1,   102,
     103,   102,     3,    -1,   107,   106,   109,    -1,    -1,   110,
      54,    55,    56,    57,    41,    16,    17,    18,    19,    98,
      99,   100,   101,   102,   103,   104,   105,    54,    55,    56,
      57,   383,   111,   385,    -1,    -1,    -1,    -1,    -1,   391,
      41,    83,    84,    85,    86,    87,    88,    89,    -1,    -1,
      92,    93,    -1,    54,    55,    56,    57,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,     4,   420,   421,
     422,   423,   424,    10,   426,    -1,    -1,    -1,   430,   431,
     432,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,     4,    42,    -1,    -1,    -1,    -1,
      10,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,     4,    42,    -1,    -1,    -1,    -1,    10,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,   474,    42,
      -1,   477,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,    -1,   489,    -1,   111,    -1,   493,    -1,   495,
      -1,    -1,    -1,   499,    -1,    -1,    -1,   503,    -1,   505,
     340,   341,   342,   343,    -1,   345,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,    -1,   356,    -1,   358,   359,
     360,    98,    99,   100,   101,   102,   103,    -1,    -1,    -1,
     107,    99,   100,   101,   102,   103,   104,   105,     6,     7,
       8,     9,    10,    11,    62,    63,    64,    65,    66,    67
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   113,     0,    54,    70,    91,    92,    93,    94,    97,
     106,   110,   114,   120,   121,   122,   162,   163,   164,   165,
     170,   173,   178,   182,   183,   185,   190,   191,   199,   209,
     210,    94,   102,   106,   110,   206,   207,   193,   207,   207,
       5,    12,    13,    14,    15,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    57,    58,    68,    69,
      71,   181,   190,    98,    99,   100,   101,   102,   103,   104,
     105,   207,   207,   207,   108,   205,    98,    99,   100,   101,
     102,   103,   104,   105,     3,    54,    55,    56,    83,    84,
      85,    86,    87,    88,    89,   196,   111,   193,   195,   194,
     195,   195,   194,   194,   193,   193,   193,   195,   186,   193,
     207,   207,   207,   207,   207,   207,   207,   207,   111,   206,
     207,   207,   207,   207,   207,   207,   207,   207,   179,   206,
     206,   206,     3,    92,    93,   196,   197,   196,   197,    16,
     126,   126,   197,   197,   206,     3,     3,   197,     3,    72,
      73,    74,    75,    76,    77,    78,     3,   197,   180,   205,
     115,   109,   209,   209,   205,   166,   171,   187,   206,   206,
     206,   206,   206,   206,   206,   174,   175,     4,   206,     4,
      92,   116,   117,   209,   206,   205,   205,     3,     4,    59,
      61,   167,     4,    59,    61,   172,     4,    79,    80,   205,
     205,     4,    95,    96,   176,   177,   200,   201,   207,   108,
     198,   199,   108,   208,   205,   205,   184,    60,   198,   198,
      60,   198,   198,     3,     3,   205,   205,   108,    96,    95,
     198,   199,   209,   108,   205,   205,     4,    53,    60,   205,
     168,   205,     3,   205,    82,    81,   205,   205,   200,   201,
     207,     6,     7,     8,     9,    10,    11,   118,   119,   123,
     124,   205,   190,   168,     3,    62,    63,    64,    65,    66,
      67,   108,   169,   205,   171,     3,   205,     3,   198,   108,
     119,   127,   127,   125,   166,   169,   204,   205,     4,   171,
       3,   205,   188,   189,   119,     3,    16,    17,    18,    19,
      41,    54,    55,    56,    57,     3,   127,     4,     4,   171,
     204,     4,    81,     4,   205,   128,   206,   198,   190,   198,
     199,    90,    94,   110,   202,   203,   206,   206,   206,   206,
     190,   128,     3,     4,     3,     4,   198,   205,     4,    10,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    42,   129,   203,   206,    98,   108,   205,     4,   128,
     171,   108,   153,   154,   199,   209,   153,   153,   153,   153,
     135,   153,   153,   138,   153,   142,   153,   153,   153,   153,
     153,   148,   153,   191,   192,   209,   153,   153,   153,   192,
     111,    90,   203,   198,     4,     4,   198,   206,   108,   130,
     131,   132,   134,   151,   206,   136,   137,   151,   139,   151,
     143,   144,   145,   146,   147,   151,   149,   108,   206,   108,
     133,   140,   141,   206,   203,   205,   108,   152,   151,   151,
     151,   151,   205,   151,   151,   151,   151,   151,   151,   151,
     151,   151,   108,   151,   151,   151,   205,   205,   154,   108,
     156,   205,   206,   205,   205,   157,   205,   205,   108,     3,
     155,   205,   202,   205,   205,   206,   174,   205,   205,   108,
     155,   160,   108,     4,   108,   155,   158,   205,   161,   204,
     205,   206,   159,   204,   205,   204,   205,   202,   155,   205,
     108,   202,   155,   205,   155,   205,   155,   206,   155,   155,
     108,   150,   202,   204
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 18:
#line 200 "rcparse.y"
    {
	    define_accelerator ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].pacc));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 19:
#line 210 "rcparse.y"
    {
	    (yyval.pacc) = NULL;
	  }
    break;

  case 20:
#line 214 "rcparse.y"
    {
	    rc_accelerator *a;

	    a = (rc_accelerator *) res_alloc (sizeof *a);
	    *a = (yyvsp[(2) - (2)].acc);
	    if ((yyvsp[(1) - (2)].pacc) == NULL)
	      (yyval.pacc) = a;
	    else
	      {
		rc_accelerator **pp;

		for (pp = &(yyvsp[(1) - (2)].pacc)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		(yyval.pacc) = (yyvsp[(1) - (2)].pacc);
	      }
	  }
    break;

  case 21:
#line 235 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (2)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 22:
#line 240 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[(1) - (4)].acc);
	    (yyval.acc).id = (yyvsp[(2) - (4)].il);
	    (yyval.acc).flags |= (yyvsp[(4) - (4)].is);
	    if (((yyval.acc).flags & ACC_VIRTKEY) == 0
		&& ((yyval.acc).flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;

  case 23:
#line 252 "rcparse.y"
    {
	    const char *s = (yyvsp[(1) - (1)].s);
	    char ch;

	    (yyval.acc).next = NULL;
	    (yyval.acc).id = 0;
	    ch = *s;
	    if (ch != '^')
	      (yyval.acc).flags = 0;
	    else
	      {
		(yyval.acc).flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = TOUPPER (s[0]);
	      }
	    (yyval.acc).key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;

  case 24:
#line 272 "rcparse.y"
    {
	    (yyval.acc).next = NULL;
	    (yyval.acc).flags = 0;
	    (yyval.acc).id = 0;
	    (yyval.acc).key = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 25:
#line 282 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (1)].is);
	  }
    break;

  case 26:
#line 286 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 27:
#line 291 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 28:
#line 298 "rcparse.y"
    {
	    (yyval.is) = ACC_VIRTKEY;
	  }
    break;

  case 29:
#line 302 "rcparse.y"
    {
	    /* This is just the absence of VIRTKEY.  */
	    (yyval.is) = 0;
	  }
    break;

  case 30:
#line 307 "rcparse.y"
    {
	    (yyval.is) = ACC_NOINVERT;
	  }
    break;

  case 31:
#line 311 "rcparse.y"
    {
	    (yyval.is) = ACC_SHIFT;
	  }
    break;

  case 32:
#line 315 "rcparse.y"
    {
	    (yyval.is) = ACC_CONTROL;
	  }
    break;

  case 33:
#line 319 "rcparse.y"
    {
	    (yyval.is) = ACC_ALT;
	  }
    break;

  case 34:
#line 328 "rcparse.y"
    {
	    define_bitmap ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 35:
#line 340 "rcparse.y"
    {
	    define_cursor ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 36:
#line 353 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 37:
#line 370 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 38:
#line 378 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (8)].il);
	      dialog.y = (yyvsp[(6) - (8)].il);
	      dialog.width = (yyvsp[(7) - (8)].il);
	      dialog.height = (yyvsp[(8) - (8)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (8)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (8)].res_info);
	      style = 0;
	    }
    break;

  case 39:
#line 397 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (13)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 40:
#line 405 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[(5) - (9)].il);
	      dialog.y = (yyvsp[(6) - (9)].il);
	      dialog.width = (yyvsp[(7) - (9)].il);
	      dialog.height = (yyvsp[(8) - (9)].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[(4) - (9)].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((rc_dialog_ex *)
			   res_alloc (sizeof (rc_dialog_ex)));
	      memset (dialog.ex, 0, sizeof (rc_dialog_ex));
	      dialog.ex->help = (yyvsp[(9) - (9)].il);
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[(3) - (9)].res_info);
	      style = 0;
	    }
    break;

  case 41:
#line 425 "rcparse.y"
    {
	    define_dialog ((yyvsp[(1) - (14)].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 42:
#line 435 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 43:
#line 439 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 45:
#line 447 "rcparse.y"
    {
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    dialog.caption = (yyvsp[(3) - (3)].uni);
	  }
    break;

  case 46:
#line 453 "rcparse.y"
    {
	    dialog.class = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 47:
#line 458 "rcparse.y"
    {
	    dialog.style = style;
	  }
    break;

  case 48:
#line 462 "rcparse.y"
    {
	    dialog.exstyle = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 49:
#line 466 "rcparse.y"
    {
	    res_unistring_to_id (& dialog.class, (yyvsp[(3) - (3)].uni));
	  }
    break;

  case 50:
#line 470 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (5)].il);
	    dialog.font = (yyvsp[(5) - (5)].uni);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 51:
#line 483 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (6)].il);
	    dialog.font = (yyvsp[(5) - (6)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (6)].il);
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 52:
#line 498 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (7)].il);
	    dialog.font = (yyvsp[(5) - (7)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (7)].il);
		dialog.ex->italic = (yyvsp[(7) - (7)].il);
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 53:
#line 513 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[(3) - (8)].il);
	    dialog.font = (yyvsp[(5) - (8)].uni);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[(6) - (8)].il);
		dialog.ex->italic = (yyvsp[(7) - (8)].il);
		dialog.ex->charset = (yyvsp[(8) - (8)].il);
	      }
	  }
    break;

  case 54:
#line 528 "rcparse.y"
    {
	    dialog.menu = (yyvsp[(3) - (3)].id);
	  }
    break;

  case 55:
#line 532 "rcparse.y"
    {
	    sub_res_info.characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 56:
#line 536 "rcparse.y"
    {
	    sub_res_info.language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 57:
#line 540 "rcparse.y"
    {
	    sub_res_info.version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 59:
#line 548 "rcparse.y"
    {
	    rc_dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = (yyvsp[(2) - (2)].dialog_control);
	  }
    break;

  case 60:
#line 559 "rcparse.y"
    {
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 61:
#line 567 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 62:
#line 571 "rcparse.y"
    {
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 63:
#line 579 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 64:
#line 583 "rcparse.y"
    {
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 65:
#line 591 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 66:
#line 595 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 67:
#line 603 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "BEDIT");
	  }
    break;

  case 68:
#line 610 "rcparse.y"
    {
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 69:
#line 618 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 70:
#line 622 "rcparse.y"
    {
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 71:
#line 632 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 72:
#line 637 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(6) - (11)].il), (yyvsp[(7) - (11)].il), (yyvsp[(8) - (11)].il), (yyvsp[(9) - (11)].il), (yyvsp[(4) - (11)].id), style, (yyvsp[(10) - (11)].il));
	    if ((yyvsp[(11) - (11)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(11) - (11)].rcdata_item);
	      }
	  }
    break;

  case 73:
#line 648 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (12)].id), (yyvsp[(3) - (12)].il), (yyvsp[(6) - (12)].il), (yyvsp[(7) - (12)].il), (yyvsp[(8) - (12)].il), (yyvsp[(9) - (12)].il), (yyvsp[(4) - (12)].id), style, (yyvsp[(10) - (12)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(11) - (12)].il);
	    (yyval.dialog_control)->data = (yyvsp[(12) - (12)].rcdata_item);
	  }
    break;

  case 74:
#line 656 "rcparse.y"
    {
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 75:
#line 664 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 76:
#line 668 "rcparse.y"
    {
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 77:
#line 676 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 78:
#line 680 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;

  case 79:
#line 688 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 80:
#line 692 "rcparse.y"
    {
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 81:
#line 700 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 82:
#line 704 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 83:
#line 712 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "HEDIT");
	  }
    break;

  case 84:
#line 719 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (6)].id), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), 0, 0, 0, (yyvsp[(6) - (6)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 85:
#line 725 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (8)].id), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), 0, 0, 0, (yyvsp[(8) - (8)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 86:
#line 731 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (10)].id), (yyvsp[(3) - (10)].il), (yyvsp[(4) - (10)].il), (yyvsp[(5) - (10)].il), style, (yyvsp[(9) - (10)].il), 0, (yyvsp[(10) - (10)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 87:
#line 737 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[(2) - (11)].id), (yyvsp[(3) - (11)].il), (yyvsp[(4) - (11)].il), (yyvsp[(5) - (11)].il), style, (yyvsp[(9) - (11)].il), (yyvsp[(10) - (11)].il), (yyvsp[(11) - (11)].rcdata_item),
				      dialog.ex);
          }
    break;

  case 88:
#line 742 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_EDIT;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 89:
#line 750 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "IEDIT");
	  }
    break;

  case 90:
#line 757 "rcparse.y"
    {
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class.named = 0;
	      class.u.id = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 91:
#line 765 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 92:
#line 769 "rcparse.y"
    {
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 93:
#line 777 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 94:
#line 781 "rcparse.y"
    {
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	    }
    break;

  case 95:
#line 788 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 96:
#line 792 "rcparse.y"
    {
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 97:
#line 800 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 98:
#line 804 "rcparse.y"
    {
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 99:
#line 812 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 100:
#line 816 "rcparse.y"
    {
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class.named = 0;
	      class.u.id = CTL_STATIC;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 101:
#line 824 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 102:
#line 828 "rcparse.y"
    {
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class.named = 0;
	      class.u.id = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;

  case 103:
#line 836 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(3) - (3)].dialog_control);
	  }
    break;

  case 104:
#line 840 "rcparse.y"
    {
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class.named = 0;
	      class.u.id = CTL_BUTTON;
	      res_text_field = (yyvsp[(2) - (2)].id);	
	    }
    break;

  case 105:
#line 848 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[(4) - (4)].dialog_control);
	  }
    break;

  case 106:
#line 853 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 107:
#line 855 "rcparse.y"
    {
	    rc_res_id cid;
	    cid.named = 0;
	    cid.u.id = CTL_BUTTON;
	    (yyval.dialog_control) = define_control ((yyvsp[(2) - (15)].id), (yyvsp[(3) - (15)].il), (yyvsp[(5) - (15)].il), (yyvsp[(7) - (15)].il), (yyvsp[(9) - (15)].il), (yyvsp[(11) - (15)].il), cid,
				 style, (yyvsp[(15) - (15)].il));
	  }
    break;

  case 108:
#line 873 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (6)].il), (yyvsp[(2) - (6)].il), (yyvsp[(3) - (6)].il), (yyvsp[(4) - (6)].il), (yyvsp[(5) - (6)].il), class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if ((yyvsp[(6) - (6)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(6) - (6)].rcdata_item);
	      }
	  }
    break;

  case 109:
#line 885 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (8)].il), (yyvsp[(2) - (8)].il), (yyvsp[(3) - (8)].il), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), class, style, (yyvsp[(7) - (8)].il));
	    if ((yyvsp[(8) - (8)].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[(8) - (8)].rcdata_item);
	      }
	  }
    break;

  case 110:
#line 896 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[(1) - (9)].il), (yyvsp[(2) - (9)].il), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), class, style, (yyvsp[(7) - (9)].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[(8) - (9)].il);
	    (yyval.dialog_control)->data = (yyvsp[(9) - (9)].rcdata_item);
	  }
    break;

  case 111:
#line 907 "rcparse.y"
    {
	    if ((yyvsp[(2) - (2)].id).named)
	      res_unistring_to_id (&(yyval.id), (yyvsp[(2) - (2)].id).u.n.name);
	    else
	      (yyval.id)=(yyvsp[(2) - (2)].id);
	  }
    break;

  case 112:
#line 917 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), "");
	  }
    break;

  case 113:
#line 920 "rcparse.y"
    { (yyval.id)=(yyvsp[(1) - (2)].id); }
    break;

  case 114:
#line 925 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 115:
#line 930 "rcparse.y"
    {
	    (yyval.id).named = 1;
	    (yyval.id).u.n.name = (yyvsp[(1) - (1)].uni);
	    (yyval.id).u.n.length = unichar_len ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 116:
#line 939 "rcparse.y"
    {
	    (yyval.rcdata_item) = NULL;
	  }
    break;

  case 117:
#line 943 "rcparse.y"
    {
	    (yyval.rcdata_item) = (yyvsp[(2) - (3)].rcdata).first;
	  }
    break;

  case 118:
#line 952 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 120:
#line 958 "rcparse.y"
    { style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;

  case 122:
#line 964 "rcparse.y"
    { style = base_style | WS_CHILD | WS_VISIBLE; }
    break;

  case 124:
#line 972 "rcparse.y"
    {
	    define_font ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 125:
#line 984 "rcparse.y"
    {
	    define_icon ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 126:
#line 997 "rcparse.y"
    {
	    language = (yyvsp[(2) - (3)].il) | ((yyvsp[(3) - (3)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 127:
#line 1006 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 128:
#line 1016 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 129:
#line 1020 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 130:
#line 1037 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (4)].uni), (yyvsp[(3) - (4)].il), (yyvsp[(4) - (4)].is), 0, 0, NULL);
	  }
    break;

  case 131:
#line 1041 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;

  case 132:
#line 1045 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), 0, (yyvsp[(3) - (6)].is), 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 133:
#line 1052 "rcparse.y"
    {
	    (yyval.is) = 0;
	  }
    break;

  case 134:
#line 1056 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (3)].is) | (yyvsp[(3) - (3)].is);
	  }
    break;

  case 135:
#line 1060 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[(1) - (2)].is) | (yyvsp[(2) - (2)].is);
	  }
    break;

  case 136:
#line 1067 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_CHECKED;
	  }
    break;

  case 137:
#line 1071 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_GRAYED;
	  }
    break;

  case 138:
#line 1075 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_HELP;
	  }
    break;

  case 139:
#line 1079 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_INACTIVE;
	  }
    break;

  case 140:
#line 1083 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBARBREAK;
	  }
    break;

  case 141:
#line 1087 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBREAK;
	  }
    break;

  case 142:
#line 1096 "rcparse.y"
    {
	    define_menu ((yyvsp[(1) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 143:
#line 1106 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 144:
#line 1110 "rcparse.y"
    {
	    if ((yyvsp[(1) - (2)].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[(2) - (2)].menuitem);
	    else
	      {
		rc_menuitem **pp;

		for (pp = &(yyvsp[(1) - (2)].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[(2) - (2)].menuitem);
		(yyval.menuitem) = (yyvsp[(1) - (2)].menuitem);
	      }
	  }
    break;

  case 145:
#line 1127 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (2)].uni), 0, 0, 0, 0, NULL);
	  }
    break;

  case 146:
#line 1131 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (3)].uni), (yyvsp[(3) - (3)].il), 0, 0, 0, NULL);
	  }
    break;

  case 147:
#line 1135 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), (yyvsp[(3) - (5)].il), (yyvsp[(4) - (5)].il), (yyvsp[(5) - (5)].il), 0, NULL);
	  }
    break;

  case 148:
#line 1139 "rcparse.y"
    {
 	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;

  case 149:
#line 1143 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (5)].uni), 0, 0, 0, 0, (yyvsp[(4) - (5)].menuitem));
	  }
    break;

  case 150:
#line 1147 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (6)].uni), (yyvsp[(3) - (6)].il), 0, 0, 0, (yyvsp[(5) - (6)].menuitem));
	  }
    break;

  case 151:
#line 1151 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (7)].uni), (yyvsp[(3) - (7)].il), (yyvsp[(4) - (7)].il), 0, 0, (yyvsp[(6) - (7)].menuitem));
	  }
    break;

  case 152:
#line 1156 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[(2) - (9)].uni), (yyvsp[(3) - (9)].il), (yyvsp[(4) - (9)].il), (yyvsp[(5) - (9)].il), (yyvsp[(6) - (9)].il), (yyvsp[(8) - (9)].menuitem));
	  }
    break;

  case 153:
#line 1165 "rcparse.y"
    {
	    define_messagetable ((yyvsp[(1) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 154:
#line 1177 "rcparse.y"
    {
	    rcparse_rcdata ();
	  }
    break;

  case 155:
#line 1181 "rcparse.y"
    {
	    rcparse_normal ();
	    (yyval.rcdata) = (yyvsp[(2) - (2)].rcdata);
	  }
    break;

  case 156:
#line 1189 "rcparse.y"
    {
	    (yyval.rcdata).first = NULL;
	    (yyval.rcdata).last = NULL;
	  }
    break;

  case 157:
#line 1194 "rcparse.y"
    {
	    (yyval.rcdata) = (yyvsp[(1) - (1)].rcdata);
	  }
    break;

  case 158:
#line 1201 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(1) - (1)].ss).s, (yyvsp[(1) - (1)].ss).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 159:
#line 1209 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(1) - (1)].suni).s, (yyvsp[(1) - (1)].suni).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 160:
#line 1217 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(1) - (1)].i).val, (yyvsp[(1) - (1)].i).dword);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 161:
#line 1225 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[(3) - (3)].ss).s, (yyvsp[(3) - (3)].ss).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 162:
#line 1234 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_unistring ((yyvsp[(3) - (3)].suni).s, (yyvsp[(3) - (3)].suni).length);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 163:
#line 1243 "rcparse.y"
    {
	    rc_rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[(3) - (3)].i).val, (yyvsp[(3) - (3)].i).dword);
	    (yyval.rcdata).first = (yyvsp[(1) - (3)].rcdata).first;
	    (yyvsp[(1) - (3)].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 164:
#line 1257 "rcparse.y"
    { sub_res_info = (yyvsp[(2) - (3)].res_info); }
    break;

  case 167:
#line 1264 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].uni));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 168:
#line 1271 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[(2) - (4)].il), (yyvsp[(4) - (4)].uni));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 169:
#line 1281 "rcparse.y"
    {
	    (yyval.id)=(yyvsp[(1) - (1)].id);
	  }
    break;

  case 170:
#line 1285 "rcparse.y"
    {
	  (yyval.id).named = 0;
	  (yyval.id).u.id = 23;
	}
    break;

  case 171:
#line 1290 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_RCDATA;
        }
    break;

  case 172:
#line 1295 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_MANIFEST;
        }
    break;

  case 173:
#line 1300 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_PLUGPLAY;
        }
    break;

  case 174:
#line 1305 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_VXD;
        }
    break;

  case 175:
#line 1310 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINCLUDE;
        }
    break;

  case 176:
#line 1315 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_DLGINIT;
        }
    break;

  case 177:
#line 1320 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANICURSOR;
        }
    break;

  case 178:
#line 1325 "rcparse.y"
    {
          (yyval.id).named = 0;
          (yyval.id).u.id = RT_ANIICON;
        }
    break;

  case 179:
#line 1336 "rcparse.y"
    {
	    define_user_data ((yyvsp[(1) - (6)].id), (yyvsp[(2) - (6)].id), &(yyvsp[(3) - (6)].res_info), (yyvsp[(5) - (6)].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 180:
#line 1343 "rcparse.y"
    {
	    define_user_file ((yyvsp[(1) - (4)].id), (yyvsp[(2) - (4)].id), &(yyvsp[(3) - (4)].res_info), (yyvsp[(4) - (4)].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 181:
#line 1353 "rcparse.y"
    {
	  define_toolbar ((yyvsp[(1) - (8)].id), &(yyvsp[(3) - (8)].res_info), (yyvsp[(4) - (8)].il), (yyvsp[(5) - (8)].il), (yyvsp[(7) - (8)].toobar_item));
	}
    break;

  case 182:
#line 1358 "rcparse.y"
    { (yyval.toobar_item)= NULL; }
    break;

  case 183:
#line 1360 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (3)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id = (yyvsp[(3) - (3)].id);
	  if ((yyvsp[(1) - (3)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (3)].toobar_item);
	}
    break;

  case 184:
#line 1379 "rcparse.y"
    {
	  rc_toolbar_item *c,*n;
	  c = (yyvsp[(1) - (2)].toobar_item);
	  n= (rc_toolbar_item *)
	      res_alloc (sizeof (rc_toolbar_item));
	  if (c != NULL)
	    while (c->next != NULL)
	      c = c->next;
	  n->prev = c;
	  n->next = NULL;
	  if (c != NULL)
	    c->next = n;
	  n->id.named = 0;
	  n->id.u.id = 0;
	  if ((yyvsp[(1) - (2)].toobar_item) == NULL)
	    (yyval.toobar_item) = n;
	  else
	    (yyval.toobar_item) = (yyvsp[(1) - (2)].toobar_item);
	}
    break;

  case 185:
#line 1404 "rcparse.y"
    {
	    define_versioninfo ((yyvsp[(1) - (6)].id), language, (yyvsp[(3) - (6)].fixver), (yyvsp[(5) - (6)].verinfo));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 186:
#line 1414 "rcparse.y"
    {
	    (yyval.fixver) = ((rc_fixed_versioninfo *)
		  res_alloc (sizeof (rc_fixed_versioninfo)));
	    memset ((yyval.fixver), 0, sizeof (rc_fixed_versioninfo));
	  }
    break;

  case 187:
#line 1420 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->file_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->file_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 188:
#line 1426 "rcparse.y"
    {
	    (yyvsp[(1) - (6)].fixver)->product_version_ms = ((yyvsp[(3) - (6)].il) << 16) | (yyvsp[(4) - (6)].il);
	    (yyvsp[(1) - (6)].fixver)->product_version_ls = ((yyvsp[(5) - (6)].il) << 16) | (yyvsp[(6) - (6)].il);
	    (yyval.fixver) = (yyvsp[(1) - (6)].fixver);
	  }
    break;

  case 189:
#line 1432 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags_mask = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 190:
#line 1437 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_flags = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 191:
#line 1442 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_os = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 192:
#line 1447 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_type = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 193:
#line 1452 "rcparse.y"
    {
	    (yyvsp[(1) - (3)].fixver)->file_subtype = (yyvsp[(3) - (3)].il);
	    (yyval.fixver) = (yyvsp[(1) - (3)].fixver);
	  }
    break;

  case 194:
#line 1466 "rcparse.y"
    {
	    (yyval.verinfo) = NULL;
	  }
    break;

  case 195:
#line 1470 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_stringfileinfo ((yyvsp[(1) - (8)].verinfo), (yyvsp[(4) - (8)].s), (yyvsp[(6) - (8)].verstring));
	  }
    break;

  case 196:
#line 1474 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_varfileinfo ((yyvsp[(1) - (7)].verinfo), (yyvsp[(5) - (7)].uni), (yyvsp[(6) - (7)].vervar));
	  }
    break;

  case 197:
#line 1481 "rcparse.y"
    {
	    (yyval.verstring) = NULL;
	  }
    break;

  case 198:
#line 1485 "rcparse.y"
    {
	    (yyval.verstring) = append_verval ((yyvsp[(1) - (5)].verstring), (yyvsp[(3) - (5)].uni), (yyvsp[(5) - (5)].uni));
	  }
    break;

  case 199:
#line 1492 "rcparse.y"
    {
	    (yyval.vervar) = NULL;
	  }
    break;

  case 200:
#line 1496 "rcparse.y"
    {
	    (yyval.vervar) = append_vertrans ((yyvsp[(1) - (3)].vervar), (yyvsp[(2) - (3)].il), (yyvsp[(3) - (3)].il));
	  }
    break;

  case 201:
#line 1505 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 202:
#line 1510 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 203:
#line 1519 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 204:
#line 1523 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 205:
#line 1533 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[(1) - (2)].il);
	  }
    break;

  case 206:
#line 1538 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (1)].uni));
	  }
    break;

  case 207:
#line 1542 "rcparse.y"
    {
	    res_unistring_to_id (&(yyval.id), (yyvsp[(1) - (2)].uni));
	  }
    break;

  case 208:
#line 1552 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    /* FIXME: Is this the right default?  */
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 209:
#line 1559 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 210:
#line 1565 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).characteristics = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 211:
#line 1570 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (4)].res_info);
	    (yyval.res_info).language = (yyvsp[(3) - (4)].il) | ((yyvsp[(4) - (4)].il) << SUBLANG_SHIFT);
	  }
    break;

  case 212:
#line 1575 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (3)].res_info);
	    (yyval.res_info).version = (yyvsp[(3) - (3)].il);
	  }
    break;

  case 213:
#line 1585 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 214:
#line 1591 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 215:
#line 1602 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (rc_res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 216:
#line 1608 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[(1) - (2)].res_info);
	    (yyval.res_info).memflags |= (yyvsp[(2) - (2)].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[(2) - (2)].memflags).off;
	  }
    break;

  case 217:
#line 1620 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_MOVEABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 218:
#line 1625 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_MOVEABLE;
	  }
    break;

  case 219:
#line 1630 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PURE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 220:
#line 1635 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PURE;
	  }
    break;

  case 221:
#line 1640 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PRELOAD;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 222:
#line 1645 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PRELOAD;
	  }
    break;

  case 223:
#line 1650 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_DISCARDABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 224:
#line 1660 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 225:
#line 1664 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[(1) - (1)].s);
	  }
    break;

  case 226:
#line 1672 "rcparse.y"
    {
	    (yyval.uni) = (yyvsp[(1) - (1)].uni);
	  }
    break;

  case 227:
#line 1677 "rcparse.y"
    {
	    rc_uint_type l1 = unichar_len ((yyvsp[(1) - (2)].uni));
	    rc_uint_type l2 = unichar_len ((yyvsp[(2) - (2)].uni));
	    unichar *h = (unichar *) res_alloc ((l1 + l2 + 1) * sizeof (unichar));
	    if (l1 != 0)
	      memcpy (h, (yyvsp[(1) - (2)].uni), l1 * sizeof (unichar));
	    if (l2 != 0)
	      memcpy (h + l1, (yyvsp[(2) - (2)].uni), l2  * sizeof (unichar));
	    h[l1 + l2] = 0;
	    (yyval.uni) = h;
	  }
    break;

  case 228:
#line 1692 "rcparse.y"
    {
	    (yyval.uni) = unichar_dup ((yyvsp[(1) - (1)].uni));
	  }
    break;

  case 229:
#line 1696 "rcparse.y"
    {
	    unichar *h = NULL;
	    unicode_from_ascii ((rc_uint_type *) NULL, &h, (yyvsp[(1) - (1)].s));
	    (yyval.uni) = h;
	  }
    break;

  case 230:
#line 1705 "rcparse.y"
    {
	    (yyval.ss) = (yyvsp[(1) - (1)].ss);
	  }
    break;

  case 231:
#line 1709 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].ss).length + (yyvsp[(2) - (2)].ss).length;
	    char *h = (char *) res_alloc (l);
	    memcpy (h, (yyvsp[(1) - (2)].ss).s, (yyvsp[(1) - (2)].ss).length);
	    memcpy (h + (yyvsp[(1) - (2)].ss).length, (yyvsp[(2) - (2)].ss).s, (yyvsp[(2) - (2)].ss).length);
	    (yyval.ss).s = h;
	    (yyval.ss).length = l;
	  }
    break;

  case 232:
#line 1721 "rcparse.y"
    {
	    (yyval.suni) = (yyvsp[(1) - (1)].suni);
	  }
    break;

  case 233:
#line 1725 "rcparse.y"
    {
	    rc_uint_type l = (yyvsp[(1) - (2)].suni).length + (yyvsp[(2) - (2)].suni).length;
	    unichar *h = (unichar *) res_alloc (l * sizeof (unichar));
	    memcpy (h, (yyvsp[(1) - (2)].suni).s, (yyvsp[(1) - (2)].suni).length * sizeof (unichar));
	    memcpy (h + (yyvsp[(1) - (2)].suni).length, (yyvsp[(2) - (2)].suni).s, (yyvsp[(2) - (2)].suni).length  * sizeof (unichar));
	    (yyval.suni).s = h;
	    (yyval.suni).length = l;
	  }
    break;

  case 234:
#line 1747 "rcparse.y"
    {
	    style |= (yyvsp[(1) - (1)].il);
	  }
    break;

  case 235:
#line 1751 "rcparse.y"
    {
	    style &=~ (yyvsp[(2) - (2)].il);
	  }
    break;

  case 236:
#line 1755 "rcparse.y"
    {
	    style |= (yyvsp[(3) - (3)].il);
	  }
    break;

  case 237:
#line 1759 "rcparse.y"
    {
	    style &=~ (yyvsp[(4) - (4)].il);
	  }
    break;

  case 238:
#line 1766 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 239:
#line 1770 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (3)].il);
	  }
    break;

  case 240:
#line 1779 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 241:
#line 1783 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].il);
	  }
    break;

  case 242:
#line 1792 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 243:
#line 1801 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 244:
#line 1810 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 245:
#line 1814 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 246:
#line 1818 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 247:
#line 1823 "rcparse.y"
    {
	    (yyval.i).val = - (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 248:
#line 1828 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 249:
#line 1833 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 250:
#line 1838 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 251:
#line 1843 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 252:
#line 1848 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 253:
#line 1853 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 254:
#line 1858 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 255:
#line 1863 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 256:
#line 1874 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(2) - (2)].il);
	  }
    break;

  case 257:
#line 1883 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[(1) - (1)].i).val;
	  }
    break;

  case 258:
#line 1894 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(1) - (1)].i);
	  }
    break;

  case 259:
#line 1898 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[(2) - (3)].i);
	  }
    break;

  case 260:
#line 1902 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[(2) - (2)].i).val;
	    (yyval.i).dword = (yyvsp[(2) - (2)].i).dword;
	  }
    break;

  case 261:
#line 1907 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val * (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 262:
#line 1912 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val / (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 263:
#line 1917 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val % (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 264:
#line 1922 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val + (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 265:
#line 1927 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val - (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 266:
#line 1932 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val & (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 267:
#line 1937 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val ^ (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;

  case 268:
#line 1942 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[(1) - (3)].i).val | (yyvsp[(3) - (3)].i).val;
	    (yyval.i).dword = (yyvsp[(1) - (3)].i).dword || (yyvsp[(3) - (3)].i).dword;
	  }
    break;


/* Line 1267 of yacc.c.  */
#line 4361 "rcparse.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1948 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 4144
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BEG = 258,
     END = 259,
     ACCELERATORS = 260,
     VIRTKEY = 261,
     ASCII = 262,
     NOINVERT = 263,
     SHIFT = 264,
     CONTROL = 265,
     ALT = 266,
     BITMAP = 267,
     CURSOR = 268,
     DIALOG = 269,
     DIALOGEX = 270,
     EXSTYLE = 271,
     CAPTION = 272,
     CLASS = 273,
     STYLE = 274,
     AUTO3STATE = 275,
     AUTOCHECKBOX = 276,
     AUTORADIOBUTTON = 277,
     CHECKBOX = 278,
     COMBOBOX = 279,
     CTEXT = 280,
     DEFPUSHBUTTON = 281,
     EDITTEXT = 282,
     GROUPBOX = 283,
     LISTBOX = 284,
     LTEXT = 285,
     PUSHBOX = 286,
     PUSHBUTTON = 287,
     RADIOBUTTON = 288,
     RTEXT = 289,
     SCROLLBAR = 290,
     STATE3 = 291,
     USERBUTTON = 292,
     BEDIT = 293,
     HEDIT = 294,
     IEDIT = 295,
     FONT = 296,
     ICON = 297,
     LANGUAGE = 298,
     CHARACTERISTICS = 299,
     VERSIONK = 300,
     MENU = 301,
     MENUEX = 302,
     MENUITEM = 303,
     SEPARATOR = 304,
     POPUP = 305,
     CHECKED = 306,
     GRAYED = 307,
     HELP = 308,
     INACTIVE = 309,
     MENUBARBREAK = 310,
     MENUBREAK = 311,
     MESSAGETABLE = 312,
     RCDATA = 313,
     STRINGTABLE = 314,
     VERSIONINFO = 315,
     FILEVERSION = 316,
     PRODUCTVERSION = 317,
     FILEFLAGSMASK = 318,
     FILEFLAGS = 319,
     FILEOS = 320,
     FILETYPE = 321,
     FILESUBTYPE = 322,
     BLOCKSTRINGFILEINFO = 323,
     BLOCKVARFILEINFO = 324,
     VALUE = 325,
     BLOCK = 326,
     MOVEABLE = 327,
     FIXED = 328,
     PURE = 329,
     IMPURE = 330,
     PRELOAD = 331,
     LOADONCALL = 332,
     DISCARDABLE = 333,
     NOT = 334,
     QUOTEDSTRING = 335,
     STRING = 336,
     NUMBER = 337,
     SIZEDSTRING = 338,
     IGNORED_TOKEN = 339,
     NEG = 340
   };
#endif
/* Tokens.  */
#define BEG 258
#define END 259
#define ACCELERATORS 260
#define VIRTKEY 261
#define ASCII 262
#define NOINVERT 263
#define SHIFT 264
#define CONTROL 265
#define ALT 266
#define BITMAP 267
#define CURSOR 268
#define DIALOG 269
#define DIALOGEX 270
#define EXSTYLE 271
#define CAPTION 272
#define CLASS 273
#define STYLE 274
#define AUTO3STATE 275
#define AUTOCHECKBOX 276
#define AUTORADIOBUTTON 277
#define CHECKBOX 278
#define COMBOBOX 279
#define CTEXT 280
#define DEFPUSHBUTTON 281
#define EDITTEXT 282
#define GROUPBOX 283
#define LISTBOX 284
#define LTEXT 285
#define PUSHBOX 286
#define PUSHBUTTON 287
#define RADIOBUTTON 288
#define RTEXT 289
#define SCROLLBAR 290
#define STATE3 291
#define USERBUTTON 292
#define BEDIT 293
#define HEDIT 294
#define IEDIT 295
#define FONT 296
#define ICON 297
#define LANGUAGE 298
#define CHARACTERISTICS 299
#define VERSIONK 300
#define MENU 301
#define MENUEX 302
#define MENUITEM 303
#define SEPARATOR 304
#define POPUP 305
#define CHECKED 306
#define GRAYED 307
#define HELP 308
#define INACTIVE 309
#define MENUBARBREAK 310
#define MENUBREAK 311
#define MESSAGETABLE 312
#define RCDATA 313
#define STRINGTABLE 314
#define VERSIONINFO 315
#define FILEVERSION 316
#define PRODUCTVERSION 317
#define FILEFLAGSMASK 318
#define FILEFLAGS 319
#define FILEOS 320
#define FILETYPE 321
#define FILESUBTYPE 322
#define BLOCKSTRINGFILEINFO 323
#define BLOCKVARFILEINFO 324
#define VALUE 325
#define BLOCK 326
#define MOVEABLE 327
#define FIXED 328
#define PURE 329
#define IMPURE 330
#define PRELOAD 331
#define LOADONCALL 332
#define DISCARDABLE 333
#define NOT 334
#define QUOTEDSTRING 335
#define STRING 336
#define NUMBER 337
#define SIZEDSTRING 338
#define IGNORED_TOKEN 339
#define NEG 340




/* Copy the first part of user declarations.  */
#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;
static struct res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const struct res_id res_null_text = { 1, {{0, &null_unichar}}};



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 66 "rcparse.y"
typedef union YYSTYPE {
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} YYSTYPE;
/* Line 196 of yacc.c.  */
#line 358 "rcparse.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 219 of yacc.c.  */
#line 370 "rcparse.c"

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T) && (defined (__STDC__) || defined (__cplusplus))
# include <stddef.h> /* INFRINGES ON USER NAME SPACE */
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if defined (__STDC__) || defined (__cplusplus)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     define YYINCLUDED_STDLIB_H
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2005 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM ((YYSIZE_T) -1)
#  endif
#  ifdef __cplusplus
extern "C" {
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if (! defined (malloc) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if (! defined (free) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifdef __cplusplus
}
#  endif
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   792

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  99
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  91
/* YYNRULES -- Number of rules. */
#define YYNRULES  247
/* YYNRULES -- Number of states. */
#define YYNSTATES  500

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   340

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      94
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    49,    56,
      57,    60,    63,    68,    70,    72,    74,    78,    81,    83,
      85,    87,    89,    91,    93,    98,   103,   104,   118,   119,
     133,   134,   149,   150,   154,   155,   159,   163,   167,   171,
     175,   181,   188,   196,   205,   209,   213,   218,   222,   223,
     226,   227,   232,   233,   238,   239,   244,   245,   250,   251,
     256,   257,   261,   273,   286,   299,   313,   314,   319,   320,
     325,   326,   330,   331,   336,   337,   342,   349,   358,   369,
     381,   382,   387,   388,   392,   393,   398,   399,   404,   405,
     410,   411,   416,   417,   422,   423,   427,   428,   433,   434,
     450,   457,   466,   476,   477,   480,   482,   485,   486,   490,
     491,   495,   496,   500,   501,   505,   510,   515,   519,   526,
     527,   530,   535,   538,   545,   546,   550,   553,   555,   557,
     559,   561,   563,   565,   572,   573,   576,   579,   583,   589,
     592,   598,   605,   613,   623,   628,   635,   640,   641,   644,
     645,   647,   649,   651,   655,   659,   660,   667,   668,   672,
     677,   684,   689,   696,   697,   704,   711,   715,   719,   723,
     727,   731,   732,   741,   749,   750,   756,   757,   761,   763,
     765,   767,   770,   773,   776,   778,   779,   782,   786,   791,
     795,   796,   799,   800,   803,   805,   807,   809,   811,   813,
     815,   817,   819,   821,   823,   826,   830,   835,   837,   841,
     842,   844,   847,   849,   851,   855,   858,   861,   865,   869,
     873,   877,   881,   885,   889,   893,   896,   898,   900,   904,
     907,   911,   915,   919,   923,   927,   931,   935
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     100,     0,    -1,    -1,   100,   101,    -1,   100,   107,    -1,
     100,   108,    -1,   100,   109,    -1,   100,   147,    -1,   100,
     148,    -1,   100,   149,    -1,   100,   150,    -1,   100,   155,
      -1,   100,   158,    -1,   100,   159,    -1,   100,   164,    -1,
     100,   167,    -1,   100,   168,    -1,   100,    84,    -1,   173,
       5,   176,     3,   102,     4,    -1,    -1,   102,   103,    -1,
     104,   187,    -1,   104,   187,    95,   105,    -1,    80,    -1,
     188,    -1,   106,    -1,   105,    95,   106,    -1,   105,   106,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,   173,    12,   178,   180,    -1,   173,    13,
     177,   180,    -1,    -1,   173,    14,   178,   113,   188,   184,
     184,   184,   110,   114,     3,   115,     4,    -1,    -1,   173,
      15,   178,   113,   188,   184,   184,   184,   111,   114,     3,
     115,     4,    -1,    -1,   173,    15,   178,   113,   188,   184,
     184,   184,   184,   112,   114,     3,   115,     4,    -1,    -1,
      16,    96,   185,    -1,    -1,   114,    17,    80,    -1,   114,
      18,   173,    -1,   114,    19,   181,    -1,   114,    16,   185,
      -1,   114,    18,    80,    -1,   114,    41,   185,    95,    80,
      -1,   114,    41,   185,    95,    80,   184,    -1,   114,    41,
     185,    95,    80,   184,   184,    -1,   114,    41,   185,    95,
      80,   184,   184,   184,    -1,   114,    46,   173,    -1,   114,
      44,   185,    -1,   114,    43,   185,   184,    -1,   114,    45,
     185,    -1,    -1,   115,   116,    -1,    -1,    20,   139,   117,
     138,    -1,    -1,    21,   139,   118,   138,    -1,    -1,    22,
     139,   119,   138,    -1,    -1,    38,   139,   120,   138,    -1,
      -1,    23,   139,   121,   138,    -1,    -1,    24,   122,   138,
      -1,    10,   139,   185,   184,   141,   184,   184,   184,   184,
     183,   140,    -1,    10,   139,   185,   184,   141,   184,   184,
     184,   184,   184,   184,   140,    -1,    10,   139,   185,    95,
      80,   141,   184,   184,   184,   184,   183,   140,    -1,    10,
     139,   185,    95,    80,   141,   184,   184,   184,   184,   184,
     184,   140,    -1,    -1,    25,   139,   123,   138,    -1,    -1,
      26,   139,   124,   138,    -1,    -1,    27,   125,   138,    -1,
      -1,    28,   139,   126,   138,    -1,    -1,    39,   139,   127,
     138,    -1,    42,   175,   185,   184,   184,   140,    -1,    42,
     175,   185,   184,   184,   184,   184,   140,    -1,    42,   175,
     185,   184,   184,   184,   184,   143,   183,   140,    -1,    42,
     175,   185,   184,   184,   184,   184,   143,   184,   184,   140,
      -1,    -1,    40,   139,   128,   138,    -1,    -1,    29,   129,
     138,    -1,    -1,    30,   139,   130,   138,    -1,    -1,    31,
     139,   131,   138,    -1,    -1,    32,   139,   132,   138,    -1,
      -1,    33,   139,   133,   138,    -1,    -1,    34,   139,   134,
     138,    -1,    -1,    35,   135,   138,    -1,    -1,    36,   139,
     136,   138,    -1,    -1,    37,   175,   185,    95,   185,    95,
     185,    95,   185,    95,   185,    95,   137,   181,   183,    -1,
     185,   184,   184,   184,   184,   140,    -1,   185,   184,   184,
     184,   184,   145,   183,   140,    -1,   185,   184,   184,   184,
     184,   145,   184,   184,   140,    -1,    -1,   188,    95,    -1,
      80,    -1,    80,    95,    -1,    -1,     3,   160,     4,    -1,
      -1,    95,   142,   181,    -1,    -1,    95,   144,   181,    -1,
      -1,    95,   146,   181,    -1,   173,    41,   177,   180,    -1,
     173,    42,   177,   180,    -1,    43,   185,   184,    -1,   173,
      46,   176,     3,   151,     4,    -1,    -1,   151,   152,    -1,
      48,    80,   184,   153,    -1,    48,    49,    -1,    50,    80,
     153,     3,   151,     4,    -1,    -1,   153,    95,   154,    -1,
     153,   154,    -1,    51,    -1,    52,    -1,    53,    -1,    54,
      -1,    55,    -1,    56,    -1,   173,    47,   176,     3,   156,
       4,    -1,    -1,   156,   157,    -1,    48,    80,    -1,    48,
      80,   184,    -1,    48,    80,   184,   184,   183,    -1,    48,
      49,    -1,    50,    80,     3,   156,     4,    -1,    50,    80,
     184,     3,   156,     4,    -1,    50,    80,   184,   184,     3,
     156,     4,    -1,    50,    80,   184,   184,   184,   183,     3,
     156,     4,    -1,   173,    57,   178,   180,    -1,   173,    58,
     176,     3,   160,     4,    -1,   173,    58,   176,   180,    -1,
      -1,   161,   162,    -1,    -1,   163,    -1,    83,    -1,   186,
      -1,   163,    95,    83,    -1,   163,    95,   186,    -1,    -1,
      59,   176,     3,   165,   166,     4,    -1,    -1,   166,   185,
      80,    -1,   166,   185,    95,    80,    -1,   173,   173,   176,
       3,   160,     4,    -1,   173,   173,   176,   180,    -1,   173,
      60,   169,     3,   170,     4,    -1,    -1,   169,    61,   185,
     184,   184,   184,    -1,   169,    62,   185,   184,   184,   184,
      -1,   169,    63,   185,    -1,   169,    64,   185,    -1,   169,
      65,   185,    -1,   169,    66,   185,    -1,   169,    67,   185,
      -1,    -1,   170,    68,     3,    71,     3,   171,     4,     4,
      -1,   170,    69,     3,    70,    80,   172,     4,    -1,    -1,
     171,    70,    80,    95,    80,    -1,    -1,   172,   184,   184,
      -1,   188,    -1,    81,    -1,    80,    -1,    80,    95,    -1,
      81,    95,    -1,   188,    95,    -1,   174,    -1,    -1,   176,
     179,    -1,   176,    44,   185,    -1,   176,    43,   185,   184,
      -1,   176,    45,   185,    -1,    -1,   177,   179,    -1,    -1,
     178,   179,    -1,    72,    -1,    73,    -1,    74,    -1,    75,
      -1,    76,    -1,    77,    -1,    78,    -1,    80,    -1,    81,
      -1,   182,    -1,    79,   182,    -1,   181,    85,   182,    -1,
     181,    85,    79,   182,    -1,    82,    -1,    97,   185,    98,
      -1,    -1,   184,    -1,    95,   185,    -1,   186,    -1,    82,
      -1,    97,   186,    98,    -1,    93,   186,    -1,    89,   186,
      -1,   186,    90,   186,    -1,   186,    91,   186,    -1,   186,
      92,   186,    -1,   186,    88,   186,    -1,   186,    89,   186,
      -1,   186,    87,   186,    -1,   186,    86,   186,    -1,   186,
      85,   186,    -1,    95,   188,    -1,   189,    -1,    82,    -1,
      97,   186,    98,    -1,    93,   186,    -1,   189,    90,   186,
      -1,   189,    91,   186,    -1,   189,    92,   186,    -1,   189,
      88,   186,    -1,   189,    89,   186,    -1,   189,    87,   186,
      -1,   189,    86,   186,    -1,   189,    85,   186,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   161,   161,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   183,   194,
     197,   218,   223,   235,   256,   266,   270,   275,   282,   286,
     291,   295,   299,   303,   312,   324,   338,   336,   363,   361,
     390,   388,   420,   423,   429,   431,   437,   441,   446,   450,
     454,   467,   482,   497,   512,   516,   520,   524,   530,   532,
     544,   543,   555,   554,   566,   565,   577,   576,   591,   590,
     602,   601,   614,   625,   634,   647,   659,   658,   670,   669,
     681,   680,   692,   691,   703,   702,   716,   721,   727,   733,
     740,   739,   754,   753,   765,   764,   776,   775,   786,   785,
     797,   796,   808,   807,   819,   818,   830,   829,   842,   840,
     858,   869,   880,   893,   896,   901,   905,   913,   916,   926,
     925,   932,   931,   938,   937,   945,   957,   970,   979,   990,
     993,  1010,  1014,  1018,  1026,  1029,  1033,  1040,  1044,  1048,
    1052,  1056,  1060,  1069,  1080,  1083,  1100,  1104,  1108,  1112,
    1116,  1120,  1124,  1128,  1138,  1150,  1157,  1170,  1170,  1182,
    1186,  1193,  1201,  1209,  1218,  1233,  1232,  1237,  1239,  1246,
    1259,  1266,  1278,  1289,  1294,  1300,  1306,  1311,  1316,  1321,
    1326,  1341,  1344,  1348,  1356,  1359,  1367,  1370,  1379,  1384,
    1400,  1404,  1408,  1416,  1421,  1439,  1445,  1451,  1456,  1461,
    1472,  1477,  1489,  1494,  1506,  1511,  1516,  1521,  1526,  1531,
    1536,  1546,  1550,  1567,  1571,  1575,  1579,  1586,  1590,  1600,
    1603,  1612,  1621,  1630,  1634,  1638,  1643,  1648,  1653,  1658,
    1663,  1668,  1673,  1678,  1683,  1694,  1703,  1714,  1718,  1722,
    1727,  1732,  1737,  1742,  1747,  1752,  1757,  1762
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BEG", "END", "ACCELERATORS", "VIRTKEY",
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR",
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE",
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX",
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT",
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3",
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE",
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", "SEPARATOR",
  "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", "MENUBARBREAK",
  "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", "VERSIONINFO",
  "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", "FILEFLAGS", "FILEOS",
  "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", "BLOCKVARFILEINFO",
  "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", "IMPURE", "PRELOAD",
  "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", "STRING", "NUMBER",
  "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", "'+'", "'-'", "'*'",
  "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", "')'", "$accept",
  "input", "accelerator", "acc_entries", "acc_entry", "acc_event",
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2",
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", "@@7",
  "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", "@@17",
  "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "control_params",
  "optresidc", "opt_control_data", "control_styleexpr", "@@25",
  "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", "font",
  "icon", "language", "menu", "menuitems", "menuitem", "menuitem_flags",
  "menuitem_flag", "menuex", "menuexitems", "menuexitem", "messagetable",
  "rcdata", "optrcdata_data", "@@28", "optrcdata_data_int", "rcdata_data",
  "stringtable", "@@29", "string_data", "user", "versioninfo",
  "fixedverinfo", "verblocks", "vervals", "vertrans", "id", "resname",
  "resref", "suboptions", "memflags_move_discard", "memflags_move",
  "memflag", "file_name", "styleexpr", "parennumber", "optcnumexpr",
  "cnumexpr", "numexpr", "sizednumexpr", "cposnumexpr", "posnumexpr",
  "sizedposnumexpr", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   124,    94,    38,    43,    45,
      42,    47,    37,   126,   340,    44,    61,    40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,    99,   100,   100,   100,   100,   100,   100,   100,   100,
     100,   100,   100,   100,   100,   100,   100,   100,   101,   102,
     102,   103,   103,   104,   104,   105,   105,   105,   106,   106,
     106,   106,   106,   106,   107,   108,   110,   109,   111,   109,
     112,   109,   113,   113,   114,   114,   114,   114,   114,   114,
     114,   114,   114,   114,   114,   114,   114,   114,   115,   115,
     117,   116,   118,   116,   119,   116,   120,   116,   121,   116,
     122,   116,   116,   116,   116,   116,   123,   116,   124,   116,
     125,   116,   126,   116,   127,   116,   116,   116,   116,   116,
     128,   116,   129,   116,   130,   116,   131,   116,   132,   116,
     133,   116,   134,   116,   135,   116,   136,   116,   137,   116,
     138,   138,   138,   139,   139,   139,   139,   140,   140,   142,
     141,   144,   143,   146,   145,   147,   148,   149,   150,   151,
     151,   152,   152,   152,   153,   153,   153,   154,   154,   154,
     154,   154,   154,   155,   156,   156,   157,   157,   157,   157,
     157,   157,   157,   157,   158,   159,   159,   161,   160,   162,
     162,   163,   163,   163,   163,   165,   164,   166,   166,   166,
     167,   167,   168,   169,   169,   169,   169,   169,   169,   169,
     169,   170,   170,   170,   171,   171,   172,   172,   173,   173,
     174,   174,   174,   175,   175,   176,   176,   176,   176,   176,
     177,   177,   178,   178,   179,   179,   179,   179,   179,   179,
     179,   180,   180,   181,   181,   181,   181,   182,   182,   183,
     183,   184,   185,   186,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   187,   188,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     3,     3,     3,
       5,     6,     7,     8,     3,     3,     4,     3,     0,     2,
       0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
       0,     3,    11,    12,    12,    13,     0,     4,     0,     4,
       0,     3,     0,     4,     0,     4,     6,     8,    10,    11,
       0,     4,     0,     3,     0,     4,     0,     4,     0,     4,
       0,     4,     0,     4,     0,     3,     0,     4,     0,    15,
       6,     8,     9,     0,     2,     1,     2,     0,     3,     0,
       3,     0,     3,     0,     3,     4,     4,     3,     6,     0,
       2,     4,     2,     6,     0,     3,     2,     1,     1,     1,
       1,     1,     1,     6,     0,     2,     2,     3,     5,     2,
       5,     6,     7,     9,     4,     6,     4,     0,     2,     0,
       1,     1,     1,     3,     3,     0,     6,     0,     3,     4,
       6,     4,     6,     0,     6,     6,     3,     3,     3,     3,
       3,     0,     8,     7,     0,     5,     0,     3,     1,     1,
       1,     2,     2,     2,     1,     0,     2,     3,     4,     3,
       0,     2,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     4,     1,     3,     0,
       1,     2,     1,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     1,     1,     3,     2,
       3,     3,     3,     3,     3,     3,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned char yydefact[] =
{
       2,     0,     1,     0,   195,   189,   237,    17,     0,     0,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,     0,   188,   236,   223,     0,     0,
       0,     0,   222,     0,   239,     0,   195,   202,   200,   202,
     202,   200,   200,   195,   195,   202,   195,   173,   195,     0,
       0,     0,     0,     0,     0,     0,     0,   226,   225,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
     165,     0,     0,     0,   204,   205,   206,   207,   208,   209,
     210,   196,   238,     0,     0,     0,    42,    42,     0,     0,
       0,     0,     0,     0,     0,     0,   247,   246,   245,   243,
     244,   240,   241,   242,   224,   221,   234,   233,   232,   230,
     231,   227,   228,   229,   167,     0,   197,   199,    19,   211,
     212,   203,    34,   201,    35,     0,     0,     0,   125,   126,
     129,   144,   154,   157,   156,   181,     0,     0,     0,     0,
       0,     0,     0,   157,   171,     0,   198,     0,     0,     0,
       0,     0,     0,     0,   159,     0,     0,     0,   176,   177,
     178,   179,   180,     0,   166,     0,    18,    23,    20,     0,
      24,    43,     0,     0,   128,     0,     0,   130,   143,     0,
       0,   145,   155,   161,   158,   160,   162,   172,     0,     0,
       0,     0,   170,   168,     0,     0,    21,     0,     0,   132,
       0,   134,   149,   146,     0,     0,     0,     0,     0,     0,
     169,   235,     0,    36,    38,   134,     0,   147,   144,     0,
     163,   164,     0,     0,   174,   175,    28,    29,    30,    31,
      32,    33,    22,    25,    44,    44,    40,   131,   129,   137,
     138,   139,   140,   141,   142,     0,   136,   219,     0,   144,
       0,   184,   186,     0,    27,     0,     0,    44,     0,   135,
     148,   220,   150,     0,   144,   219,     0,     0,    26,    58,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    58,
       0,   133,   151,     0,     0,     0,     0,   183,     0,     0,
      48,    45,    49,    46,     0,   217,     0,    47,   213,     0,
       0,    55,    57,    54,     0,    58,   152,   144,   182,     0,
     187,    37,   113,   113,   113,   113,   113,    70,   113,   113,
      80,   113,    92,   113,   113,   113,   113,   113,   104,   113,
       0,   113,   113,   113,     0,    59,   214,     0,     0,     0,
      56,    39,     0,     0,     0,   115,     0,     0,    60,    62,
      64,    68,     0,    76,    78,     0,    82,     0,    94,    96,
      98,   100,   102,     0,   106,   190,     0,   194,     0,     0,
      66,    84,    90,     0,   218,     0,   215,    50,    41,   153,
     185,   116,     0,   114,     0,     0,     0,     0,    71,     0,
       0,     0,    81,     0,    93,     0,     0,     0,     0,     0,
     105,     0,   191,   192,     0,   193,     0,     0,     0,     0,
     216,    51,     0,     0,    61,    63,    65,    69,     0,    77,
      79,    83,    95,    97,    99,   101,   103,   107,     0,    67,
      85,    91,     0,    52,     0,   119,     0,     0,     0,   117,
      53,     0,     0,     0,     0,     0,   157,    86,     0,     0,
     120,     0,   117,     0,     0,   117,     0,     0,   123,   110,
     219,     0,   118,   121,    87,   219,     0,   219,     0,   117,
     220,     0,     0,   117,   220,   219,   117,   220,   124,   111,
     117,     0,   122,    88,   117,   117,   220,    72,   117,   112,
       0,    89,    74,   117,    73,   108,    75,     0,   219,   109
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     1,    10,   147,   168,   169,   232,   233,    11,    12,
      13,   234,   235,   257,   126,   255,   289,   335,   384,   385,
     386,   406,   387,   352,   390,   391,   355,   393,   407,   408,
     357,   395,   396,   397,   398,   399,   363,   401,   497,   388,
     346,   447,   436,   442,   465,   472,   460,   468,    14,    15,
      16,    17,   151,   177,   216,   246,    18,   152,   181,    19,
      20,   153,   154,   184,   185,    21,   114,   145,    22,    23,
      94,   155,   266,   267,    24,   367,   368,    33,    85,    84,
      81,   122,   297,   298,   260,   261,   389,    32,   196,   347,
      26
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -426
static const short int yypact[] =
{
    -426,    12,  -426,   287,  -426,  -426,  -426,  -426,   287,   287,
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,   106,  -426,   585,  -426,   287,   287,
     287,   -80,   675,    83,  -426,   637,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,   287,
     287,   287,   287,   287,   287,   287,   287,  -426,  -426,   651,
     287,  -426,   287,   287,   287,   287,   287,   287,   287,   287,
    -426,   287,   287,   287,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,   286,   678,   678,   188,   188,   678,   678,
     323,   375,   678,   210,   128,   274,   682,   688,   302,    89,
      89,  -426,  -426,  -426,  -426,  -426,   682,   688,   302,    89,
      89,  -426,  -426,  -426,  -426,   -80,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,   -70,   142,   142,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,  -426,   287,   287,   287,   287,
     287,   287,   287,  -426,  -426,     2,  -426,     5,   287,   -80,
     -80,    33,    40,    47,   373,    38,   -80,   -80,  -426,  -426,
    -426,  -426,  -426,    49,  -426,    17,  -426,  -426,  -426,   -41,
    -426,  -426,   -80,   -80,  -426,   -44,   -24,  -426,  -426,   -35,
      36,  -426,  -426,  -426,  -426,   -13,   675,  -426,   129,   138,
     -80,   -80,  -426,  -426,    69,   142,    73,   -80,   -80,  -426,
     -80,  -426,  -426,   -80,     8,   454,   111,    97,   -80,   -80,
    -426,  -426,   775,  -426,   -80,  -426,   119,   -80,  -426,    13,
    -426,   675,   183,   116,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,    22,  -426,  -426,  -426,  -426,   245,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,   736,  -426,   -80,    96,  -426,
      15,  -426,  -426,   775,  -426,   370,   512,  -426,   158,  -426,
    -426,  -426,  -426,   172,  -426,   -80,    34,     6,  -426,  -426,
     287,   125,   227,    72,   287,   287,   287,   287,   260,  -426,
     523,  -426,  -426,   179,   207,   229,   131,  -426,   -80,   584,
    -426,  -426,  -426,  -426,    43,  -426,   287,   159,  -426,   151,
     -80,  -426,  -426,  -426,   621,  -426,  -426,  -426,  -426,   153,
    -426,  -426,   141,   141,   141,   141,   141,  -426,   141,   141,
    -426,   141,  -426,   141,   141,   141,   141,   141,  -426,   141,
     230,   141,   141,   141,   230,  -426,  -426,   160,   133,   169,
    -426,  -426,   658,   193,   189,   164,   287,   173,  -426,  -426,
    -426,  -426,   287,  -426,  -426,   287,  -426,   287,  -426,  -426,
    -426,  -426,  -426,   287,  -426,   175,   181,  -426,   287,   184,
    -426,  -426,  -426,   287,  -426,    43,  -426,   -80,  -426,  -426,
    -426,  -426,   185,  -426,   287,   287,   287,   287,  -426,   -80,
     287,   287,  -426,   287,  -426,   287,   287,   287,   287,   287,
    -426,   287,  -426,  -426,   197,  -426,   287,   287,   287,   -80,
    -426,   -80,   341,   199,  -426,  -426,  -426,  -426,   -80,  -426,
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,   287,  -426,
    -426,  -426,   -80,   -80,   199,  -426,   -80,   -80,   208,    18,
    -426,   -80,    72,   -80,   -80,   287,  -426,  -426,   -80,   -80,
     159,   -80,    19,   211,   298,    20,   -80,   -80,  -426,  -426,
     -80,   287,  -426,  -426,  -426,   -80,   -80,   -80,    72,   310,
     -80,   219,    72,   310,   -80,   -80,   310,   -80,   159,  -426,
     310,   287,   159,  -426,   310,   310,   -80,  -426,   310,  -426,
     220,  -426,  -426,   310,  -426,  -426,  -426,    72,   -37,  -426
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -207,  -426,  -426,
    -426,  -426,  -426,  -426,   218,  -222,  -255,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,   126,
     388,   107,  -113,  -426,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,    84,  -426,   110,    87,  -426,  -215,  -426,  -426,
    -426,  -142,  -426,  -426,  -426,  -426,  -426,  -426,  -426,  -426,
    -426,  -426,  -426,  -426,   -22,  -426,     0,   397,    82,   212,
     548,   486,  -425,  -286,  -258,    28,    -3,    11,  -426,     3,
    -426
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const unsigned short int yytable[] =
{
      31,   163,    48,   248,    25,   199,   164,   284,   336,   166,
     287,   218,     2,   256,   202,    60,   249,   450,   264,    34,
      35,   446,   446,   446,   304,   254,   148,    25,   226,   227,
     228,   229,   230,   231,   263,   280,   200,   174,   285,    57,
      58,    59,   187,   478,   178,   203,   268,   482,   338,   283,
     342,   182,   376,   192,   195,     3,   201,   105,    60,    61,
      96,    97,    98,    99,   100,   101,   102,   103,   115,   116,
     117,     4,   498,   106,   107,   108,   109,   110,   111,   112,
     113,   175,   205,   176,    27,   167,    70,     6,   179,   410,
     180,    28,   343,     5,     6,    29,     7,   193,     8,    30,
     262,    60,     9,    60,   286,     8,   188,   189,    60,     9,
      60,    36,   194,    60,   458,   463,   204,   253,    37,    38,
      39,    40,   238,    88,    89,   295,    71,    72,    73,   149,
     150,   135,   206,   156,   157,   158,   159,   160,   161,   162,
     296,   207,   165,   146,   179,   171,   180,    41,    42,   210,
     170,   294,    43,    44,   295,    74,    75,    76,    77,    78,
      79,    80,   281,    45,    46,   186,    47,   223,   212,   296,
     239,   240,   241,   242,   243,   244,   282,   172,   173,    67,
      68,    69,   222,   306,   190,   191,   251,     5,     6,   136,
     137,   138,   139,   140,   141,   142,   252,   379,   211,     8,
     197,   198,   469,     9,   125,   291,   175,   473,   176,   476,
     307,   309,   375,   133,   245,   295,   221,   485,   208,   209,
     179,   345,   180,     6,     6,   213,   214,   179,   215,   180,
     296,   217,   219,   308,     8,     8,   224,   225,     9,     9,
     499,   179,   236,   180,   338,   247,   339,   250,   344,   377,
     293,    86,    87,    71,    72,    73,   303,    92,   374,   381,
      74,    75,    76,    77,    78,    79,    80,   290,   383,   380,
     402,   299,   300,   301,   302,    25,   403,   143,   265,   405,
     412,    25,    74,    75,    76,    77,    78,    79,    80,   118,
     119,   120,   428,   337,   435,   288,   239,   240,   241,   242,
     243,   244,   462,   445,   454,   127,   461,   292,     5,     6,
     365,   366,     6,   446,   481,   495,   310,    71,    72,    73,
       8,   441,   258,     8,     9,   237,   130,     9,   340,    71,
      72,    73,   259,   369,   373,     0,     0,   369,     0,     0,
     245,     5,     6,   382,     0,     0,    74,    75,    76,    77,
      78,    79,    80,     8,   119,   120,     0,     9,    74,    75,
      76,    77,    78,    79,    80,   404,    71,    72,    73,    27,
     409,     0,     0,   269,     0,     0,    28,     0,   131,     0,
      29,     0,     0,     0,    30,     0,   270,   271,   272,   273,
      65,    66,    67,    68,    69,    74,    75,    76,    77,    78,
      79,    80,     0,     0,     0,   411,     0,     0,     0,   105,
     413,   274,     0,   275,   276,   277,   278,   418,    71,    72,
      73,   434,     0,    27,     0,   438,     0,     0,     0,     0,
      28,     0,     0,    83,    29,     0,     0,   432,    30,   433,
      90,    91,   453,    93,     0,    95,   437,    74,    75,    76,
      77,    78,    79,    80,     0,    27,   183,     0,   471,     0,
     439,   440,    28,     0,   443,   444,    29,   448,     0,   449,
      30,   451,   452,     0,     0,     0,   455,   456,   490,   457,
       0,   392,     0,   394,   466,   467,     0,     0,   470,   400,
       0,     0,     0,   474,   475,   477,     0,     0,   480,     0,
       0,     0,   484,   486,     0,   488,     0,     0,     0,     0,
     414,   415,   416,   417,   493,   279,   419,   420,     0,   421,
       0,   422,   423,   424,   425,   426,   305,   427,   270,   271,
     272,   273,   429,   430,   431,     0,    27,   220,     0,   270,
     271,   272,   273,    28,     0,     0,     0,    29,     0,     0,
       0,    30,     0,   274,     0,   275,   276,   277,   278,   459,
       0,     0,   464,     0,   274,     0,   275,   276,   277,   278,
       0,   124,     0,     0,   128,   129,   479,     0,   132,   134,
     483,   144,     0,   487,     0,     0,     0,   489,   311,     0,
       0,   491,   492,     0,   312,   494,     0,     0,     0,     0,
     496,     0,     0,     0,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   341,   334,     0,     0,     0,
       0,   312,   121,   123,   121,   121,   123,   123,     0,     0,
     121,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   378,   334,     0,     0,     0,     0,   312,     0,
      49,    50,    51,    52,    53,    54,    55,    56,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     334,   348,   349,   350,   351,     0,   353,   354,     0,   356,
       0,   358,   359,   360,   361,   362,     0,   364,     0,   370,
     371,   372,    62,    63,    64,    65,    66,    67,    68,    69,
       0,     0,     0,     0,     0,    82,    62,    63,    64,    65,
      66,    67,    68,    69,     0,     0,     0,     0,     0,   104,
      74,    75,    76,    77,    78,    79,    80,     0,   119,   120,
      62,    63,    64,    65,    66,    67,    68,    69,    63,    64,
      65,    66,    67,    68,    69,    64,    65,    66,    67,    68,
      69,   226,   227,   228,   229,   230,   231,   239,   240,   241,
     242,   243,   244
};

static const short int yycheck[] =
{
       3,   143,    24,   218,     1,    49,     4,   265,   294,     4,
       4,     3,     0,   235,    49,    95,     3,   442,     3,     8,
       9,     3,     3,     3,   279,   232,    96,    24,     6,     7,
       8,     9,    10,    11,   249,   257,    80,     4,     4,    28,
      29,    30,     4,   468,     4,    80,   253,   472,    85,   264,
     305,     4,   338,     4,    95,    43,    80,    60,    95,    31,
      49,    50,    51,    52,    53,    54,    55,    56,    71,    72,
      73,    59,   497,    62,    63,    64,    65,    66,    67,    68,
      69,    48,    95,    50,    82,    80,     3,    82,    48,   375,
      50,    89,   307,    81,    82,    93,    84,    80,    93,    97,
       4,    95,    97,    95,    70,    93,    68,    69,    95,    97,
      95,     5,    95,    95,    95,    95,    80,    95,    12,    13,
      14,    15,     3,    41,    42,    82,    43,    44,    45,   126,
     127,     3,     3,   136,   137,   138,   139,   140,   141,   142,
      97,     3,   145,   115,    48,   148,    50,    41,    42,    80,
     147,    79,    46,    47,    82,    72,    73,    74,    75,    76,
      77,    78,     4,    57,    58,   154,    60,    70,    95,    97,
      51,    52,    53,    54,    55,    56,     4,   149,   150,    90,
      91,    92,    71,     4,   156,   157,     3,    81,    82,    61,
      62,    63,    64,    65,    66,    67,    80,     4,   195,    93,
     172,   173,   460,    97,    16,    80,    48,   465,    50,   467,
       3,    80,    79,     3,    95,    82,   205,   475,   190,   191,
      48,    80,    50,    82,    82,   197,   198,    48,   200,    50,
      97,   203,   204,     4,    93,    93,   208,   209,    97,    97,
     498,    48,   214,    50,    85,   217,    95,   219,    95,    80,
     272,    39,    40,    43,    44,    45,   278,    45,    98,    95,
      72,    73,    74,    75,    76,    77,    78,   270,    95,    80,
      95,   274,   275,   276,   277,   272,    95,     3,   250,    95,
      95,   278,    72,    73,    74,    75,    76,    77,    78,     3,
      80,    81,    95,   296,    95,   267,    51,    52,    53,    54,
      55,    56,     4,    95,   446,    87,    95,    80,    81,    82,
      80,    81,    82,     3,    95,    95,   288,    43,    44,    45,
      93,   434,   238,    93,    97,   215,     3,    97,   300,    43,
      44,    45,   245,   330,   334,    -1,    -1,   334,    -1,    -1,
      95,    81,    82,   346,    -1,    -1,    72,    73,    74,    75,
      76,    77,    78,    93,    80,    81,    -1,    97,    72,    73,
      74,    75,    76,    77,    78,   368,    43,    44,    45,    82,
     373,    -1,    -1,     3,    -1,    -1,    89,    -1,     3,    -1,
      93,    -1,    -1,    -1,    97,    -1,    16,    17,    18,    19,
      88,    89,    90,    91,    92,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,    -1,   377,    -1,    -1,    -1,   412,
     382,    41,    -1,    43,    44,    45,    46,   389,    43,    44,
      45,    80,    -1,    82,    -1,   428,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    36,    93,    -1,    -1,   409,    97,   411,
      43,    44,   445,    46,    -1,    48,   418,    72,    73,    74,
      75,    76,    77,    78,    -1,    82,    83,    -1,   461,    -1,
     432,   433,    89,    -1,   436,   437,    93,   439,    -1,   441,
      97,   443,   444,    -1,    -1,    -1,   448,   449,   481,   451,
      -1,   355,    -1,   357,   456,   457,    -1,    -1,   460,   363,
      -1,    -1,    -1,   465,   466,   467,    -1,    -1,   470,    -1,
      -1,    -1,   474,   475,    -1,   477,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   486,     3,   390,   391,    -1,   393,
      -1,   395,   396,   397,   398,   399,     3,   401,    16,    17,
      18,    19,   406,   407,   408,    -1,    82,    83,    -1,    16,
      17,    18,    19,    89,    -1,    -1,    -1,    93,    -1,    -1,
      -1,    97,    -1,    41,    -1,    43,    44,    45,    46,   452,
      -1,    -1,   455,    -1,    41,    -1,    43,    44,    45,    46,
      -1,    85,    -1,    -1,    88,    89,   469,    -1,    92,    93,
     473,    95,    -1,   476,    -1,    -1,    -1,   480,     4,    -1,
      -1,   484,   485,    -1,    10,   488,    -1,    -1,    -1,    -1,
     493,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     4,    42,    -1,    -1,    -1,
      -1,    10,    84,    85,    86,    87,    88,    89,    -1,    -1,
      92,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,   313,   314,   315,   316,    -1,   318,   319,    -1,   321,
      -1,   323,   324,   325,   326,   327,    -1,   329,    -1,   331,
     332,   333,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    98,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      85,    86,    87,    88,    89,    90,    91,    92,    86,    87,
      88,    89,    90,    91,    92,    87,    88,    89,    90,    91,
      92,     6,     7,     8,     9,    10,    11,    51,    52,    53,
      54,    55,    56
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,   100,     0,    43,    59,    81,    82,    84,    93,    97,
     101,   107,   108,   109,   147,   148,   149,   150,   155,   158,
     159,   164,   167,   168,   173,   188,   189,    82,    89,    93,
      97,   185,   186,   176,   186,   186,     5,    12,    13,    14,
      15,    41,    42,    46,    47,    57,    58,    60,   173,    85,
      86,    87,    88,    89,    90,    91,    92,   186,   186,   186,
      95,   184,    85,    86,    87,    88,    89,    90,    91,    92,
       3,    43,    44,    45,    72,    73,    74,    75,    76,    77,
      78,   179,    98,   176,   178,   177,   178,   178,   177,   177,
     176,   176,   178,   176,   169,   176,   186,   186,   186,   186,
     186,   186,   186,   186,    98,   185,   186,   186,   186,   186,
     186,   186,   186,   186,   165,   185,   185,   185,     3,    80,
      81,   179,   180,   179,   180,    16,   113,   113,   180,   180,
       3,     3,   180,     3,   180,     3,    61,    62,    63,    64,
      65,    66,    67,     3,   180,   166,   184,   102,    96,   188,
     188,   151,   156,   160,   161,   170,   185,   185,   185,   185,
     185,   185,   185,   160,     4,   185,     4,    80,   103,   104,
     188,   185,   184,   184,     4,    48,    50,   152,     4,    48,
      50,   157,     4,    83,   162,   163,   186,     4,    68,    69,
     184,   184,     4,    80,    95,    95,   187,   184,   184,    49,
      80,    80,    49,    80,    80,    95,     3,     3,   184,   184,
      80,   188,    95,   184,   184,   184,   153,   184,     3,   184,
      83,   186,    71,    70,   184,   184,     6,     7,     8,     9,
      10,    11,   105,   106,   110,   111,   184,   153,     3,    51,
      52,    53,    54,    55,    56,    95,   154,   184,   156,     3,
     184,     3,    80,    95,   106,   114,   114,   112,   151,   154,
     183,   184,     4,   156,     3,   184,   171,   172,   106,     3,
      16,    17,    18,    19,    41,    43,    44,    45,    46,     3,
     114,     4,     4,   156,   183,     4,    70,     4,   184,   115,
     185,    80,    80,   173,    79,    82,    97,   181,   182,   185,
     185,   185,   185,   173,   115,     3,     4,     3,     4,    80,
     184,     4,    10,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    42,   116,   182,   185,    85,    95,
     184,     4,   115,   156,    95,    80,   139,   188,   139,   139,
     139,   139,   122,   139,   139,   125,   139,   129,   139,   139,
     139,   139,   139,   135,   139,    80,    81,   174,   175,   188,
     139,   139,   139,   175,    98,    79,   182,    80,     4,     4,
      80,    95,   185,    95,   117,   118,   119,   121,   138,   185,
     123,   124,   138,   126,   138,   130,   131,   132,   133,   134,
     138,   136,    95,    95,   185,    95,   120,   127,   128,   185,
     182,   184,    95,   184,   138,   138,   138,   138,   184,   138,
     138,   138,   138,   138,   138,   138,   138,   138,    95,   138,
     138,   138,   184,   184,    80,    95,   141,   184,   185,   184,
     184,   141,   142,   184,   184,    95,     3,   140,   184,   184,
     181,   184,   184,   185,   160,   184,   184,   184,    95,   140,
     145,    95,     4,    95,   140,   143,   184,   184,   146,   183,
     184,   185,   144,   183,   184,   184,   183,   184,   181,   140,
     184,    95,   181,   140,   184,   183,   184,   140,   184,   140,
     185,   140,   140,   184,   140,    95,   140,   137,   181,   183
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()
    ;
#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 18:
#line 184 "rcparse.y"
    {
	    define_accelerator ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].pacc));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 19:
#line 194 "rcparse.y"
    {
	    (yyval.pacc) = NULL;
	  }
    break;

  case 20:
#line 198 "rcparse.y"
    {
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = (yyvsp[0].acc);
	    if ((yyvsp[-1].pacc) == NULL)
	      (yyval.pacc) = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &(yyvsp[-1].pacc)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		(yyval.pacc) = (yyvsp[-1].pacc);
	      }
	  }
    break;

  case 21:
#line 219 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[-1].acc);
	    (yyval.acc).id = (yyvsp[0].il);
	  }
    break;

  case 22:
#line 224 "rcparse.y"
    {
	    (yyval.acc) = (yyvsp[-3].acc);
	    (yyval.acc).id = (yyvsp[-2].il);
	    (yyval.acc).flags |= (yyvsp[0].is);
	    if (((yyval.acc).flags & ACC_VIRTKEY) == 0
		&& ((yyval.acc).flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;

  case 23:
#line 236 "rcparse.y"
    {
	    const char *s = (yyvsp[0].s);
	    char ch;

	    (yyval.acc).next = NULL;
	    (yyval.acc).id = 0;
	    ch = *s;
	    if (ch != '^')
	      (yyval.acc).flags = 0;
	    else
	      {
		(yyval.acc).flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    (yyval.acc).key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;

  case 24:
#line 257 "rcparse.y"
    {
	    (yyval.acc).next = NULL;
	    (yyval.acc).flags = 0;
	    (yyval.acc).id = 0;
	    (yyval.acc).key = (yyvsp[0].il);
	  }
    break;

  case 25:
#line 267 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[0].is);
	  }
    break;

  case 26:
#line 271 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-2].is) | (yyvsp[0].is);
	  }
    break;

  case 27:
#line 276 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-1].is) | (yyvsp[0].is);
	  }
    break;

  case 28:
#line 283 "rcparse.y"
    {
	    (yyval.is) = ACC_VIRTKEY;
	  }
    break;

  case 29:
#line 287 "rcparse.y"
    {
	    /* This is just the absence of VIRTKEY.  */
	    (yyval.is) = 0;
	  }
    break;

  case 30:
#line 292 "rcparse.y"
    {
	    (yyval.is) = ACC_NOINVERT;
	  }
    break;

  case 31:
#line 296 "rcparse.y"
    {
	    (yyval.is) = ACC_SHIFT;
	  }
    break;

  case 32:
#line 300 "rcparse.y"
    {
	    (yyval.is) = ACC_CONTROL;
	  }
    break;

  case 33:
#line 304 "rcparse.y"
    {
	    (yyval.is) = ACC_ALT;
	  }
    break;

  case 34:
#line 313 "rcparse.y"
    {
	    define_bitmap ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 35:
#line 325 "rcparse.y"
    {
	    define_cursor ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 36:
#line 338 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-3].il);
	      dialog.y = (yyvsp[-2].il);
	      dialog.width = (yyvsp[-1].il);
	      dialog.height = (yyvsp[0].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-4].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-5].res_info);
	      style = 0;
	    }
    break;

  case 37:
#line 355 "rcparse.y"
    {
	    define_dialog ((yyvsp[-12].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 38:
#line 363 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-3].il);
	      dialog.y = (yyvsp[-2].il);
	      dialog.width = (yyvsp[-1].il);
	      dialog.height = (yyvsp[0].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-4].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-5].res_info);
	      style = 0;
	    }
    break;

  case 39:
#line 382 "rcparse.y"
    {
	    define_dialog ((yyvsp[-12].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 40:
#line 390 "rcparse.y"
    {
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = (yyvsp[-4].il);
	      dialog.y = (yyvsp[-3].il);
	      dialog.width = (yyvsp[-2].il);
	      dialog.height = (yyvsp[-1].il);
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = (yyvsp[-5].il);
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = (yyvsp[0].il);
	      dialog.controls = NULL;
	      sub_res_info = (yyvsp[-6].res_info);
	      style = 0;
	    }
    break;

  case 41:
#line 410 "rcparse.y"
    {
	    define_dialog ((yyvsp[-13].id), &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 42:
#line 420 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 43:
#line 424 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 45:
#line 432 "rcparse.y"
    {
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    unicode_from_ascii ((int *) NULL, &dialog.caption, (yyvsp[0].s));
	  }
    break;

  case 46:
#line 438 "rcparse.y"
    {
	    dialog.class = (yyvsp[0].id);
	  }
    break;

  case 47:
#line 443 "rcparse.y"
    {
	    dialog.style = style;
	  }
    break;

  case 48:
#line 447 "rcparse.y"
    {
	    dialog.exstyle = (yyvsp[0].il);
	  }
    break;

  case 49:
#line 451 "rcparse.y"
    {
	    res_string_to_id (& dialog.class, (yyvsp[0].s));
	  }
    break;

  case 50:
#line 455 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-2].il);
	    unicode_from_ascii ((int *) NULL, &dialog.font, (yyvsp[0].s));
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 51:
#line 468 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-3].il);
	    unicode_from_ascii ((int *) NULL, &dialog.font, (yyvsp[-1].s));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[0].il);
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 52:
#line 483 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-4].il);
	    unicode_from_ascii ((int *) NULL, &dialog.font, (yyvsp[-2].s));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[-1].il);
		dialog.ex->italic = (yyvsp[0].il);
		dialog.ex->charset = 1;
	      }
	  }
    break;

  case 53:
#line 498 "rcparse.y"
    {
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = (yyvsp[-5].il);
	    unicode_from_ascii ((int *) NULL, &dialog.font, (yyvsp[-3].s));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = (yyvsp[-2].il);
		dialog.ex->italic = (yyvsp[-1].il);
		dialog.ex->charset = (yyvsp[0].il);
	      }
	  }
    break;

  case 54:
#line 513 "rcparse.y"
    {
	    dialog.menu = (yyvsp[0].id);
	  }
    break;

  case 55:
#line 517 "rcparse.y"
    {
	    sub_res_info.characteristics = (yyvsp[0].il);
	  }
    break;

  case 56:
#line 521 "rcparse.y"
    {
	    sub_res_info.language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 57:
#line 525 "rcparse.y"
    {
	    sub_res_info.version = (yyvsp[0].il);
	  }
    break;

  case 59:
#line 533 "rcparse.y"
    {
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = (yyvsp[0].dialog_control);
	  }
    break;

  case 60:
#line 544 "rcparse.y"
    {
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 61:
#line 551 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 62:
#line 555 "rcparse.y"
    {
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 63:
#line 562 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 64:
#line 566 "rcparse.y"
    {
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 65:
#line 573 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 66:
#line 577 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 67:
#line 584 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "BEDIT");
	  }
    break;

  case 68:
#line 591 "rcparse.y"
    {
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 69:
#line 598 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 70:
#line 602 "rcparse.y"
    {
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 71:
#line 611 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 72:
#line 616 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-9].id), (yyvsp[-8].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-7].il), style, (yyvsp[-1].il));
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 73:
#line 627 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-10].id), (yyvsp[-9].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-8].il), style, (yyvsp[-2].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[-1].il);
	    (yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	  }
    break;

  case 74:
#line 636 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-10].id), (yyvsp[-9].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-2].il), 0, style, (yyvsp[-1].il));
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	    (yyval.dialog_control)->class.named = 1;
  	    unicode_from_ascii (&(yyval.dialog_control)->class.u.n.length, &(yyval.dialog_control)->class.u.n.name, (yyvsp[-7].s));
	  }
    break;

  case 75:
#line 649 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-11].id), (yyvsp[-10].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), 0, style, (yyvsp[-2].il));
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    (yyval.dialog_control)->help = (yyvsp[-1].il);
	    (yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	    (yyval.dialog_control)->class.named = 1;
  	    unicode_from_ascii (&(yyval.dialog_control)->class.u.n.length, &(yyval.dialog_control)->class.u.n.name, (yyvsp[-8].s));
	  }
    break;

  case 76:
#line 659 "rcparse.y"
    {
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 77:
#line 666 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 78:
#line 670 "rcparse.y"
    {
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 79:
#line 677 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 80:
#line 681 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;

  case 81:
#line 688 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 82:
#line 692 "rcparse.y"
    {
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 83:
#line 699 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 84:
#line 703 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 85:
#line 710 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "HEDIT");
	  }
    break;

  case 86:
#line 717 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-4].id), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-1].il), 0, 0, 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 87:
#line 723 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-6].id), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), 0, 0, 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 88:
#line 729 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-8].id), (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), style, (yyvsp[-1].il), 0, (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 89:
#line 735 "rcparse.y"
    {
	    (yyval.dialog_control) = define_icon_control ((yyvsp[-9].id), (yyvsp[-8].il), (yyvsp[-7].il), (yyvsp[-6].il), style, (yyvsp[-2].il), (yyvsp[-1].il), (yyvsp[0].rcdata_item),
				      dialog.ex);
          }
    break;

  case 90:
#line 740 "rcparse.y"
    {
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 91:
#line 747 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&(yyval.dialog_control)->class, "IEDIT");
	  }
    break;

  case 92:
#line 754 "rcparse.y"
    {
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;

  case 93:
#line 761 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 94:
#line 765 "rcparse.y"
    {
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 95:
#line 772 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 96:
#line 776 "rcparse.y"
    {
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;

  case 97:
#line 782 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 98:
#line 786 "rcparse.y"
    {
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 99:
#line 793 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 100:
#line 797 "rcparse.y"
    {
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 101:
#line 804 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 102:
#line 808 "rcparse.y"
    {
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 103:
#line 815 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 104:
#line 819 "rcparse.y"
    {
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;

  case 105:
#line 826 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 106:
#line 830 "rcparse.y"
    {
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	      res_text_field = (yyvsp[0].id);	
	    }
    break;

  case 107:
#line 837 "rcparse.y"
    {
	    (yyval.dialog_control) = (yyvsp[0].dialog_control);
	  }
    break;

  case 108:
#line 842 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 109:
#line 844 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control ((yyvsp[-13].id), (yyvsp[-12].il), (yyvsp[-10].il), (yyvsp[-8].il), (yyvsp[-6].il), (yyvsp[-4].il), CTL_BUTTON,
				 style, (yyvsp[0].il));
	  }
    break;

  case 110:
#line 859 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-2].il), (yyvsp[-1].il), class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 111:
#line 871 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), class, style, (yyvsp[-1].il));
	    if ((yyvsp[0].rcdata_item) != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		(yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	      }
	  }
    break;

  case 112:
#line 882 "rcparse.y"
    {
	    (yyval.dialog_control) = define_control (res_text_field, (yyvsp[-8].il), (yyvsp[-7].il), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), class, style, (yyvsp[-2].il));
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    (yyval.dialog_control)->help = (yyvsp[-1].il);
	    (yyval.dialog_control)->data = (yyvsp[0].rcdata_item);
	  }
    break;

  case 113:
#line 893 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), "");
	  }
    break;

  case 114:
#line 897 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[-1].il);
	  }
    break;

  case 115:
#line 902 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), (yyvsp[0].s));
	  }
    break;

  case 116:
#line 906 "rcparse.y"
    {
	    res_string_to_id (&(yyval.id), (yyvsp[-1].s));
	  }
    break;

  case 117:
#line 913 "rcparse.y"
    {
	    (yyval.rcdata_item) = NULL;
	  }
    break;

  case 118:
#line 917 "rcparse.y"
    {
	    (yyval.rcdata_item) = (yyvsp[-1].rcdata).first;
	  }
    break;

  case 119:
#line 926 "rcparse.y"
    { style = WS_CHILD | WS_VISIBLE; }
    break;

  case 121:
#line 932 "rcparse.y"
    { style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;

  case 123:
#line 938 "rcparse.y"
    { style = base_style | WS_CHILD | WS_VISIBLE; }
    break;

  case 125:
#line 946 "rcparse.y"
    {
	    define_font ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 126:
#line 958 "rcparse.y"
    {
	    define_icon ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 127:
#line 971 "rcparse.y"
    {
	    language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 128:
#line 980 "rcparse.y"
    {
	    define_menu ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 129:
#line 990 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 130:
#line 994 "rcparse.y"
    {
	    if ((yyvsp[-1].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[0].menuitem);
	    else
	      {
		struct menuitem **pp;

		for (pp = &(yyvsp[-1].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[0].menuitem);
		(yyval.menuitem) = (yyvsp[-1].menuitem);
	      }
	  }
    break;

  case 131:
#line 1011 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-2].s), (yyvsp[-1].il), (yyvsp[0].is), 0, 0, NULL);
	  }
    break;

  case 132:
#line 1015 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;

  case 133:
#line 1019 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-4].s), 0, (yyvsp[-3].is), 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 134:
#line 1026 "rcparse.y"
    {
	    (yyval.is) = 0;
	  }
    break;

  case 135:
#line 1030 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-2].is) | (yyvsp[0].is);
	  }
    break;

  case 136:
#line 1034 "rcparse.y"
    {
	    (yyval.is) = (yyvsp[-1].is) | (yyvsp[0].is);
	  }
    break;

  case 137:
#line 1041 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_CHECKED;
	  }
    break;

  case 138:
#line 1045 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_GRAYED;
	  }
    break;

  case 139:
#line 1049 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_HELP;
	  }
    break;

  case 140:
#line 1053 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_INACTIVE;
	  }
    break;

  case 141:
#line 1057 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBARBREAK;
	  }
    break;

  case 142:
#line 1061 "rcparse.y"
    {
	    (yyval.is) = MENUITEM_MENUBREAK;
	  }
    break;

  case 143:
#line 1070 "rcparse.y"
    {
	    define_menu ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].menuitem));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 144:
#line 1080 "rcparse.y"
    {
	    (yyval.menuitem) = NULL;
	  }
    break;

  case 145:
#line 1084 "rcparse.y"
    {
	    if ((yyvsp[-1].menuitem) == NULL)
	      (yyval.menuitem) = (yyvsp[0].menuitem);
	    else
	      {
		struct menuitem **pp;

		for (pp = &(yyvsp[-1].menuitem)->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = (yyvsp[0].menuitem);
		(yyval.menuitem) = (yyvsp[-1].menuitem);
	      }
	  }
    break;

  case 146:
#line 1101 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[0].s), 0, 0, 0, 0, NULL);
	  }
    break;

  case 147:
#line 1105 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-1].s), (yyvsp[0].il), 0, 0, 0, NULL);
	  }
    break;

  case 148:
#line 1109 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-3].s), (yyvsp[-2].il), (yyvsp[-1].il), (yyvsp[0].il), 0, NULL);
	  }
    break;

  case 149:
#line 1113 "rcparse.y"
    {
 	    (yyval.menuitem) = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;

  case 150:
#line 1117 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-3].s), 0, 0, 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 151:
#line 1121 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-4].s), (yyvsp[-3].il), 0, 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 152:
#line 1125 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-5].s), (yyvsp[-4].il), (yyvsp[-3].il), 0, 0, (yyvsp[-1].menuitem));
	  }
    break;

  case 153:
#line 1130 "rcparse.y"
    {
	    (yyval.menuitem) = define_menuitem ((yyvsp[-7].s), (yyvsp[-6].il), (yyvsp[-5].il), (yyvsp[-4].il), (yyvsp[-3].il), (yyvsp[-1].menuitem));
	  }
    break;

  case 154:
#line 1139 "rcparse.y"
    {
	    define_messagetable ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 155:
#line 1151 "rcparse.y"
    {
	    define_rcdata ((yyvsp[-5].id), &(yyvsp[-3].res_info), (yyvsp[-1].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 156:
#line 1158 "rcparse.y"
    {
	    define_rcdata_file ((yyvsp[-3].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 157:
#line 1170 "rcparse.y"
    {
	    rcparse_rcdata ();
	  }
    break;

  case 158:
#line 1174 "rcparse.y"
    {
	    rcparse_normal ();
	    (yyval.rcdata) = (yyvsp[0].rcdata);
	  }
    break;

  case 159:
#line 1182 "rcparse.y"
    {
	    (yyval.rcdata).first = NULL;
	    (yyval.rcdata).last = NULL;
	  }
    break;

  case 160:
#line 1187 "rcparse.y"
    {
	    (yyval.rcdata) = (yyvsp[0].rcdata);
	  }
    break;

  case 161:
#line 1194 "rcparse.y"
    {
	    struct rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[0].ss).s, (yyvsp[0].ss).length);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 162:
#line 1202 "rcparse.y"
    {
	    struct rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[0].i).val, (yyvsp[0].i).dword);
	    (yyval.rcdata).first = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 163:
#line 1210 "rcparse.y"
    {
	    struct rcdata_item *ri;

	    ri = define_rcdata_string ((yyvsp[0].ss).s, (yyvsp[0].ss).length);
	    (yyval.rcdata).first = (yyvsp[-2].rcdata).first;
	    (yyvsp[-2].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 164:
#line 1219 "rcparse.y"
    {
	    struct rcdata_item *ri;

	    ri = define_rcdata_number ((yyvsp[0].i).val, (yyvsp[0].i).dword);
	    (yyval.rcdata).first = (yyvsp[-2].rcdata).first;
	    (yyvsp[-2].rcdata).last->next = ri;
	    (yyval.rcdata).last = ri;
	  }
    break;

  case 165:
#line 1233 "rcparse.y"
    { sub_res_info = (yyvsp[-1].res_info); }
    break;

  case 168:
#line 1240 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[-1].il), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 169:
#line 1247 "rcparse.y"
    {
	    define_stringtable (&sub_res_info, (yyvsp[-2].il), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 170:
#line 1260 "rcparse.y"
    {
	    define_user_data ((yyvsp[-5].id), (yyvsp[-4].id), &(yyvsp[-3].res_info), (yyvsp[-1].rcdata).first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 171:
#line 1267 "rcparse.y"
    {
	    define_user_file ((yyvsp[-3].id), (yyvsp[-2].id), &(yyvsp[-1].res_info), (yyvsp[0].s));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 172:
#line 1279 "rcparse.y"
    {
	    define_versioninfo ((yyvsp[-5].id), language, (yyvsp[-3].fixver), (yyvsp[-1].verinfo));
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;

  case 173:
#line 1289 "rcparse.y"
    {
	    (yyval.fixver) = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset ((yyval.fixver), 0, sizeof (struct fixed_versioninfo));
	  }
    break;

  case 174:
#line 1295 "rcparse.y"
    {
	    (yyvsp[-5].fixver)->file_version_ms = ((yyvsp[-3].il) << 16) | (yyvsp[-2].il);
	    (yyvsp[-5].fixver)->file_version_ls = ((yyvsp[-1].il) << 16) | (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-5].fixver);
	  }
    break;

  case 175:
#line 1301 "rcparse.y"
    {
	    (yyvsp[-5].fixver)->product_version_ms = ((yyvsp[-3].il) << 16) | (yyvsp[-2].il);
	    (yyvsp[-5].fixver)->product_version_ls = ((yyvsp[-1].il) << 16) | (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-5].fixver);
	  }
    break;

  case 176:
#line 1307 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_flags_mask = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 177:
#line 1312 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_flags = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 178:
#line 1317 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_os = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 179:
#line 1322 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_type = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 180:
#line 1327 "rcparse.y"
    {
	    (yyvsp[-2].fixver)->file_subtype = (yyvsp[0].il);
	    (yyval.fixver) = (yyvsp[-2].fixver);
	  }
    break;

  case 181:
#line 1341 "rcparse.y"
    {
	    (yyval.verinfo) = NULL;
	  }
    break;

  case 182:
#line 1345 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_stringfileinfo ((yyvsp[-7].verinfo), (yyvsp[-4].s), (yyvsp[-2].verstring));
	  }
    break;

  case 183:
#line 1349 "rcparse.y"
    {
	    (yyval.verinfo) = append_ver_varfileinfo ((yyvsp[-6].verinfo), (yyvsp[-2].s), (yyvsp[-1].vervar));
	  }
    break;

  case 184:
#line 1356 "rcparse.y"
    {
	    (yyval.verstring) = NULL;
	  }
    break;

  case 185:
#line 1360 "rcparse.y"
    {
	    (yyval.verstring) = append_verval ((yyvsp[-4].verstring), (yyvsp[-2].s), (yyvsp[0].s));
	  }
    break;

  case 186:
#line 1367 "rcparse.y"
    {
	    (yyval.vervar) = NULL;
	  }
    break;

  case 187:
#line 1371 "rcparse.y"
    {
	    (yyval.vervar) = append_vertrans ((yyvsp[-2].vervar), (yyvsp[-1].il), (yyvsp[0].il));
	  }
    break;

  case 188:
#line 1380 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[0].il);
	  }
    break;

  case 189:
#line 1385 "rcparse.y"
    {
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup ((yyvsp[0].s));
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&(yyval.id), copy);
	    free (copy);
	  }
    break;

  case 190:
#line 1401 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[0].s);
	  }
    break;

  case 191:
#line 1405 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[-1].s);
	  }
    break;

  case 192:
#line 1409 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[-1].s);
	  }
    break;

  case 193:
#line 1417 "rcparse.y"
    {
	    (yyval.id).named = 0;
	    (yyval.id).u.id = (yyvsp[-1].il);
	  }
    break;

  case 194:
#line 1422 "rcparse.y"
    {
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup ((yyvsp[0].s));
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&(yyval.id), copy);
	    free (copy);
	  }
    break;

  case 195:
#line 1439 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (struct res_res_info));
	    (yyval.res_info).language = language;
	    /* FIXME: Is this the right default?  */
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 196:
#line 1446 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 197:
#line 1452 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-2].res_info);
	    (yyval.res_info).characteristics = (yyvsp[0].il);
	  }
    break;

  case 198:
#line 1457 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-3].res_info);
	    (yyval.res_info).language = (yyvsp[-1].il) | ((yyvsp[0].il) << SUBLANG_SHIFT);
	  }
    break;

  case 199:
#line 1462 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-2].res_info);
	    (yyval.res_info).version = (yyvsp[0].il);
	  }
    break;

  case 200:
#line 1472 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (struct res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 201:
#line 1478 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 202:
#line 1489 "rcparse.y"
    {
	    memset (&(yyval.res_info), 0, sizeof (struct res_res_info));
	    (yyval.res_info).language = language;
	    (yyval.res_info).memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;

  case 203:
#line 1495 "rcparse.y"
    {
	    (yyval.res_info) = (yyvsp[-1].res_info);
	    (yyval.res_info).memflags |= (yyvsp[0].memflags).on;
	    (yyval.res_info).memflags &=~ (yyvsp[0].memflags).off;
	  }
    break;

  case 204:
#line 1507 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_MOVEABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 205:
#line 1512 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_MOVEABLE;
	  }
    break;

  case 206:
#line 1517 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PURE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 207:
#line 1522 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PURE;
	  }
    break;

  case 208:
#line 1527 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_PRELOAD;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 209:
#line 1532 "rcparse.y"
    {
	    (yyval.memflags).on = 0;
	    (yyval.memflags).off = MEMFLAG_PRELOAD;
	  }
    break;

  case 210:
#line 1537 "rcparse.y"
    {
	    (yyval.memflags).on = MEMFLAG_DISCARDABLE;
	    (yyval.memflags).off = 0;
	  }
    break;

  case 211:
#line 1547 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[0].s);
	  }
    break;

  case 212:
#line 1551 "rcparse.y"
    {
	    (yyval.s) = (yyvsp[0].s);
	  }
    break;

  case 213:
#line 1568 "rcparse.y"
    {
	    style |= (yyvsp[0].il);
	  }
    break;

  case 214:
#line 1572 "rcparse.y"
    {
	    style &=~ (yyvsp[0].il);
	  }
    break;

  case 215:
#line 1576 "rcparse.y"
    {
	    style |= (yyvsp[0].il);
	  }
    break;

  case 216:
#line 1580 "rcparse.y"
    {
	    style &=~ (yyvsp[0].il);
	  }
    break;

  case 217:
#line 1587 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 218:
#line 1591 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[-1].il);
	  }
    break;

  case 219:
#line 1600 "rcparse.y"
    {
	    (yyval.il) = 0;
	  }
    break;

  case 220:
#line 1604 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 221:
#line 1613 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 222:
#line 1622 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 223:
#line 1631 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[0].i);
	  }
    break;

  case 224:
#line 1635 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[-1].i);
	  }
    break;

  case 225:
#line 1639 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 226:
#line 1644 "rcparse.y"
    {
	    (yyval.i).val = - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 227:
#line 1649 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val * (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 228:
#line 1654 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val / (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 229:
#line 1659 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val % (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 230:
#line 1664 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val + (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 231:
#line 1669 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 232:
#line 1674 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val & (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 233:
#line 1679 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val ^ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 234:
#line 1684 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val | (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 235:
#line 1695 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].il);
	  }
    break;

  case 236:
#line 1704 "rcparse.y"
    {
	    (yyval.il) = (yyvsp[0].i).val;
	  }
    break;

  case 237:
#line 1715 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[0].i);
	  }
    break;

  case 238:
#line 1719 "rcparse.y"
    {
	    (yyval.i) = (yyvsp[-1].i);
	  }
    break;

  case 239:
#line 1723 "rcparse.y"
    {
	    (yyval.i).val = ~ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[0].i).dword;
	  }
    break;

  case 240:
#line 1728 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val * (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 241:
#line 1733 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val / (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 242:
#line 1738 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val % (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 243:
#line 1743 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val + (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 244:
#line 1748 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val - (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 245:
#line 1753 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val & (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 246:
#line 1758 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val ^ (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;

  case 247:
#line 1763 "rcparse.y"
    {
	    (yyval.i).val = (yyvsp[-2].i).val | (yyvsp[0].i).val;
	    (yyval.i).dword = (yyvsp[-2].i).dword || (yyvsp[0].i).dword;
	  }
    break;


      default: break;
    }

/* Line 1126 of yacc.c.  */
#line 3867 "rcparse.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  int yytype = YYTRANSLATE (yychar);
	  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
	  YYSIZE_T yysize = yysize0;
	  YYSIZE_T yysize1;
	  int yysize_overflow = 0;
	  char *yymsg = 0;
#	  define YYERROR_VERBOSE_ARGS_MAXIMUM 5
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;

#if 0
	  /* This is so xgettext sees the translatable formats that are
	     constructed on the fly.  */
	  YY_("syntax error, unexpected %s");
	  YY_("syntax error, unexpected %s, expecting %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
#endif
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytname[yytype];
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytname[yyx];
		yysize1 = yysize + yytnamerr (0, yytname[yyx]);
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + yystrlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow && yysize <= YYSTACK_ALLOC_MAXIMUM)
	    yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg)
	    {
	      /* Avoid sprintf, as that infringes on the user's name space.
		 Don't have undefined behavior even if the translation
		 produced a string with the wrong number of "%s"s.  */
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      goto yyexhaustedlab;
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (0)
     goto yyerrorlab;

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK;
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 1769 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}

@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 3513
/* A Bison parser, made from rcparse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;
static struct res_id res_text_field;
static unichar null_unichar;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const struct res_id res_null_text = { 1, {{0, &null_unichar}}};


#line 65 "rcparse.y"
#ifndef YYSTYPE
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		500
#define	YYFLAG		-32768
#define	YYNTBASE	99

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   229,   230,   235,   236,   241,   242,   247,   248,   253,
     254,   258,   270,   283,   296,   310,   311,   316,   317,   322,
     323,   327,   328,   333,   334,   339,   346,   355,   366,   378,
     379,   384,   385,   389,   390,   395,   396,   401,   402,   407,
     408,   413,   414,   419,   420,   424,   425,   430,   431,   447,
     454,   463,   473,   474,   477,   479,   482,   483,   487,   488,
     492,   493,   497,   498,   502,   507,   512,   516,   523,   524,
     527,   532,   535,   542,   543,   547,   550,   552,   554,   556,
     558,   560,   562,   569,   570,   573,   576,   580,   586,   589,
     595,   602,   610,   620,   625,   632,   637,   638,   641,   642,
     644,   646,   648,   652,   656,   657,   664,   665,   669,   674,
     681,   686,   693,   694,   701,   708,   712,   716,   720,   724,
     728,   729,   738,   746,   747,   753,   754,   758,   760,   762,
     764,   767,   770,   773,   775,   776,   779,   783,   788,   792,
     793,   796,   797,   800,   802,   804,   806,   808,   810,   812,
     814,   816,   818,   820,   823,   827,   832,   834,   838,   839,
     841,   844,   846,   848,   852,   855,   858,   862,   866,   870,
     874,   878,   882,   886,   890,   893,   895,   897,   901,   904,
     908,   912,   916,   920,   924,   928,   932
};
static const short yyrhs[] =
{
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   138,   116,   137,     0,     0,
      21,   138,   117,   137,     0,     0,    22,   138,   118,   137,
       0,     0,    38,   138,   119,   137,     0,     0,    23,   138,
     120,   137,     0,     0,    24,   121,   137,     0,    10,   138,
     184,   183,   140,   183,   183,   183,   183,   182,   139,     0,
      10,   138,   184,   183,   140,   183,   183,   183,   183,   183,
     183,   139,     0,    10,   138,   184,    95,    80,   140,   183,
     183,   183,   183,   182,   139,     0,    10,   138,   184,    95,
      80,   140,   183,   183,   183,   183,   183,   183,   139,     0,
       0,    25,   138,   122,   137,     0,     0,    26,   138,   123,
     137,     0,     0,    27,   124,   137,     0,     0,    28,   138,
     125,   137,     0,     0,    39,   138,   126,   137,     0,    42,
     174,   184,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   139,     0,    42,   174,   184,   183,   183,
     183,   183,   142,   182,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   183,   183,   139,     0,     0,    40,
     138,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   138,   129,   137,     0,     0,    31,   138,   130,   137,
       0,     0,    32,   138,   131,   137,     0,     0,    33,   138,
     132,   137,     0,     0,    34,   138,   133,   137,     0,     0,
      35,   134,   137,     0,     0,    36,   138,   135,   137,     0,
       0,    37,   174,   184,    95,   184,    95,   184,    95,   184,
      95,   184,    95,   136,   180,   182,     0,   184,   183,   183,
     183,   183,   139,     0,   184,   183,   183,   183,   183,   144,
     182,   139,     0,   184,   183,   183,   183,   183,   144,   183,
     183,   139,     0,     0,   187,    95,     0,    80,     0,    80,
      95,     0,     0,     3,   159,     4,     0,     0,    95,   141,
     180,     0,     0,    95,   143,   180,     0,     0,    95,   145,
     180,     0,   172,    41,   176,   179,     0,   172,    42,   176,
     179,     0,    43,   184,   183,     0,   172,    46,   175,     3,
     150,     4,     0,     0,   150,   151,     0,    48,    80,   183,
     152,     0,    48,    49,     0,    50,    80,   152,     3,   150,
       4,     0,     0,   152,    95,   153,     0,   152,   153,     0,
      51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
      56,     0,   172,    47,   175,     3,   155,     4,     0,     0,
     155,   156,     0,    48,    80,     0,    48,    80,   183,     0,
      48,    80,   183,   183,   182,     0,    48,    49,     0,    50,
      80,     3,   155,     4,     0,    50,    80,   183,     3,   155,
       4,     0,    50,    80,   183,   183,     3,   155,     4,     0,
      50,    80,   183,   183,   183,   182,     3,   155,     4,     0,
     172,    57,   177,   179,     0,   172,    58,   175,     3,   159,
       4,     0,   172,    58,   175,   179,     0,     0,   160,   161,
       0,     0,   162,     0,    83,     0,   185,     0,   162,    95,
      83,     0,   162,    95,   185,     0,     0,    59,   175,     3,
     164,   165,     4,     0,     0,   165,   184,    80,     0,   165,
     184,    95,    80,     0,   172,   172,   175,     3,   159,     4,
       0,   172,   172,   175,   179,     0,   172,    60,   168,     3,
     169,     4,     0,     0,   168,    61,   184,   183,   183,   183,
       0,   168,    62,   184,   183,   183,   183,     0,   168,    63,
     184,     0,   168,    64,   184,     0,   168,    65,   184,     0,
     168,    66,   184,     0,   168,    67,   184,     0,     0,   169,
      68,     3,    71,     3,   170,     4,     4,     0,   169,    69,
       3,    70,    80,   171,     4,     0,     0,   170,    70,    80,
      95,    80,     0,     0,   171,   183,   183,     0,   187,     0,
      81,     0,    80,     0,    80,    95,     0,    81,    95,     0,
     187,    95,     0,   173,     0,     0,   175,   178,     0,   175,
      44,   184,     0,   175,    43,   184,   183,     0,   175,    45,
     184,     0,     0,   176,   178,     0,     0,   177,   178,     0,
      72,     0,    73,     0,    74,     0,    75,     0,    76,     0,
      77,     0,    78,     0,    80,     0,    81,     0,   181,     0,
      79,   181,     0,   180,    85,   181,     0,   180,    85,    79,
     181,     0,    82,     0,    97,   184,    98,     0,     0,   183,
       0,    95,   184,     0,   185,     0,    82,     0,    97,   185,
      98,     0,    93,   185,     0,    89,   185,     0,   185,    90,
     185,     0,   185,    91,   185,     0,   185,    92,   185,     0,
     185,    88,   185,     0,   185,    89,   185,     0,   185,    87,
     185,     0,   185,    86,   185,     0,   185,    85,   185,     0,
      95,   187,     0,   188,     0,    82,     0,    97,   185,    98,
       0,    93,   185,     0,   188,    90,   185,     0,   188,    91,
     185,     0,   188,    92,   185,     0,   188,    88,   185,     0,
     188,    89,   185,     0,   188,    87,   185,     0,   188,    86,
     185,     0,   188,    85,   185,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   182,   192,   197,
     217,   223,   234,   256,   265,   270,   275,   281,   286,   291,
     295,   299,   303,   311,   323,   335,   335,   361,   361,   388,
     388,   418,   423,   429,   431,   437,   441,   446,   450,   454,
     467,   482,   497,   512,   516,   520,   524,   530,   532,   542,
     542,   554,   554,   565,   565,   576,   576,   590,   590,   601,
     601,   614,   625,   634,   647,   658,   658,   669,   669,   680,
     680,   691,   691,   702,   702,   716,   721,   727,   733,   739,
     739,   753,   753,   764,   764,   775,   775,   785,   785,   796,
     796,   807,   807,   818,   818,   829,   829,   840,   840,   857,
     869,   880,   891,   896,   901,   905,   911,   916,   924,   924,
     930,   930,   936,   936,   944,   956,   969,   978,   988,   993,
    1009,  1014,  1018,  1024,  1029,  1033,  1039,  1044,  1048,  1052,
    1056,  1060,  1068,  1078,  1083,  1099,  1104,  1108,  1112,  1116,
    1120,  1124,  1128,  1137,  1149,  1157,  1169,  1169,  1180,  1186,
    1192,  1201,  1209,  1218,  1231,  1231,  1237,  1239,  1246,  1258,
    1266,  1277,  1287,  1294,  1300,  1306,  1311,  1316,  1321,  1326,
    1339,  1344,  1348,  1354,  1359,  1365,  1370,  1378,  1384,  1399,
    1404,  1408,  1415,  1421,  1437,  1445,  1451,  1456,  1461,  1470,
    1477,  1487,  1494,  1505,  1511,  1516,  1521,  1526,  1531,  1536,
    1545,  1550,  1566,  1571,  1575,  1579,  1585,  1590,  1598,  1603,
    1611,  1620,  1629,  1634,  1638,  1643,  1648,  1653,  1658,  1663,
    1668,  1673,  1678,  1683,  1693,  1702,  1713,  1718,  1722,  1727,
    1732,  1737,  1742,  1747,  1752,  1757,  1762
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
  "control_params", "optresidc", "opt_control_data", "control_styleexpr", 
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   138,   139,   139,   141,   140,
     143,   142,   145,   144,   146,   147,   148,   149,   150,   150,
     151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   154,   155,   155,   156,   156,   156,   156,   156,
     156,   156,   156,   157,   158,   158,   160,   159,   161,   161,
     162,   162,   162,   162,   164,   163,   165,   165,   165,   166,
     166,   167,   168,   168,   168,   168,   168,   168,   168,   168,
     169,   169,   169,   170,   170,   171,   171,   172,   172,   173,
     173,   173,   174,   174,   175,   175,   175,   175,   175,   176,
     176,   177,   177,   178,   178,   178,   178,   178,   178,   178,
     179,   179,   180,   180,   180,   180,   181,   181,   182,   182,
     183,   184,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   185,   186,   187,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188,   188
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       3,    11,    12,    12,    13,     0,     4,     0,     4,     0,
       3,     0,     4,     0,     4,     6,     8,    10,    11,     0,
       4,     0,     3,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     4,     0,     3,     0,     4,     0,    15,     6,
       8,     9,     0,     2,     1,     2,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     6,     4,     0,     2,     0,     1,
       1,     1,     3,     3,     0,     6,     0,     3,     4,     6,
       4,     6,     0,     6,     6,     3,     3,     3,     3,     3,
       0,     8,     7,     0,     5,     0,     3,     1,     1,     1,
       2,     2,     2,     1,     0,     2,     3,     4,     3,     0,
       2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     4,     1,     3,     0,     1,
       2,     1,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     1,     1,     3,     2,     3,
       3,     3,     3,     3,     3,     3,     3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,   194,   188,   236,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   187,   235,   222,     0,     0,     0,
       0,   221,     0,   238,     0,   194,   201,   199,   201,   201,
     199,   199,   194,   194,   201,   194,   172,   194,     0,     0,
       0,     0,     0,     0,     0,     0,   225,   224,     0,     0,
     126,     0,     0,     0,     0,     0,     0,     0,     0,   164,
       0,     0,     0,   203,   204,   205,   206,   207,   208,   209,
     195,   237,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   246,   245,   244,   242,   243,
     239,   240,   241,   223,   220,   233,   232,   231,   229,   230,
     226,   227,   228,   166,     0,   196,   198,    18,   210,   211,
     202,    33,   200,    34,     0,     0,     0,   124,   125,   128,
     143,   153,   156,   155,   180,     0,     0,     0,     0,     0,
       0,     0,   156,   170,     0,   197,     0,     0,     0,     0,
       0,     0,     0,   158,     0,     0,     0,   175,   176,   177,
     178,   179,     0,   165,     0,    17,    22,    19,     0,    23,
      42,     0,     0,   127,     0,     0,   129,   142,     0,     0,
     144,   154,   160,   157,   159,   161,   171,     0,     0,     0,
       0,   169,   167,     0,     0,    20,     0,     0,   131,     0,
     133,   148,   145,     0,     0,     0,     0,     0,     0,   168,
     234,     0,    35,    37,   133,     0,   146,   143,     0,   162,
     163,     0,     0,   173,   174,    27,    28,    29,    30,    31,
      32,    21,    24,    43,    43,    39,   130,   128,   136,   137,
     138,   139,   140,   141,     0,   135,   218,     0,   143,     0,
     183,   185,     0,    26,     0,     0,    43,     0,   134,   147,
     219,   149,     0,   143,   218,     0,     0,    25,    57,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    57,     0,
     132,   150,     0,     0,     0,     0,   182,     0,     0,    47,
      44,    48,    45,     0,   216,     0,    46,   212,     0,     0,
      54,    56,    53,     0,    57,   151,   143,   181,     0,   186,
      36,   112,   112,   112,   112,   112,    69,   112,   112,    79,
     112,    91,   112,   112,   112,   112,   112,   103,   112,     0,
     112,   112,   112,     0,    58,   213,     0,     0,     0,    55,
      38,     0,     0,     0,   114,     0,     0,    59,    61,    63,
      67,     0,    75,    77,     0,    81,     0,    93,    95,    97,
      99,   101,     0,   105,   189,     0,   193,     0,     0,    65,
      83,    89,     0,   217,     0,   214,    49,    40,   152,   184,
     115,     0,   113,     0,     0,     0,     0,    70,     0,     0,
       0,    80,     0,    92,     0,     0,     0,     0,     0,   104,
       0,   190,   191,     0,   192,     0,     0,     0,     0,   215,
      50,     0,     0,    60,    62,    64,    68,     0,    76,    78,
      82,    94,    96,    98,   100,   102,   106,     0,    66,    84,
      90,     0,    51,     0,   118,     0,     0,     0,   116,    52,
       0,     0,     0,     0,     0,   156,    85,     0,     0,   119,
       0,   116,     0,     0,   116,     0,     0,   122,   109,   218,
       0,   117,   120,    86,   218,     0,   218,     0,   116,   219,
       0,     0,   116,   219,   218,   116,   219,   123,   110,   116,
       0,   121,    87,   116,   116,   219,    71,   116,   111,     0,
      88,    73,   116,    72,   107,    74,     0,   218,   108,     0,
       0
};

static const short yydefgoto[] =
{
       1,     9,   146,   167,   168,   231,   232,    10,    11,    12,
     233,   234,   256,   125,   254,   288,   334,   383,   384,   385,
     405,   386,   351,   389,   390,   354,   392,   406,   407,   356,
     394,   395,   396,   397,   398,   362,   400,   496,   387,   345,
     446,   435,   441,   464,   471,   459,   467,    13,    14,    15,
      16,   150,   176,   215,   245,    17,   151,   180,    18,    19,
     152,   153,   183,   184,    20,   113,   144,    21,    22,    93,
     154,   265,   266,    23,   366,   367,    32,    84,    83,    80,
     121,   296,   297,   259,   260,   388,    31,   195,   346,    25
};

static const short yypact[] =
{
  -32768,    13,   287,-32768,-32768,-32768,-32768,   287,   287,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   106,-32768,   585,-32768,   287,   287,   287,
     -71,   675,    83,-32768,   637,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   287,   287,
     287,   287,   287,   287,   287,   287,-32768,-32768,   651,   287,
  -32768,   287,   287,   287,   287,   287,   287,   287,   287,-32768,
     287,   287,   287,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   286,   678,   678,   188,   188,   678,   678,   323,
     375,   678,   210,   128,   274,   682,   688,   642,   -37,   -37,
  -32768,-32768,-32768,-32768,-32768,   682,   688,   642,   -37,   -37,
  -32768,-32768,-32768,-32768,   -71,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -49,   141,   141,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   287,   287,   287,   287,   287,
     287,   287,-32768,-32768,    -1,-32768,     5,   287,   -71,   -71,
      34,    96,    47,   373,    39,   -71,   -71,-32768,-32768,-32768,
  -32768,-32768,    54,-32768,   -46,-32768,-32768,-32768,   -12,-32768,
  -32768,   -71,   -71,-32768,   -43,    10,-32768,-32768,   -35,    32,
  -32768,-32768,-32768,-32768,    28,   675,-32768,   113,   121,   -71,
     -71,-32768,-32768,    52,   141,    46,   -71,   -71,-32768,   -71,
  -32768,-32768,   -71,     8,   454,    97,   112,   -71,   -71,-32768,
  -32768,   775,-32768,   -71,-32768,   119,   -71,-32768,     9,-32768,
     675,   151,    87,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    22,-32768,-32768,-32768,-32768,   245,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   736,-32768,   -71,   101,-32768,    14,
  -32768,-32768,   775,-32768,   370,   512,-32768,   158,-32768,-32768,
  -32768,-32768,   172,-32768,   -71,    21,     6,-32768,-32768,   287,
     116,   227,   133,   287,   287,   287,   287,   260,-32768,   523,
  -32768,-32768,   179,   183,    95,   125,-32768,   -71,   584,-32768,
  -32768,-32768,-32768,    43,-32768,   287,   126,-32768,   115,   -71,
  -32768,-32768,-32768,   621,-32768,-32768,-32768,-32768,   138,-32768,
  -32768,   297,   297,   297,   297,   297,-32768,   297,   297,-32768,
     297,-32768,   297,   297,   297,   297,   297,-32768,   297,   230,
     297,   297,   297,   230,-32768,-32768,   137,   142,   164,-32768,
  -32768,   658,   193,   166,   153,   287,   154,-32768,-32768,-32768,
  -32768,   287,-32768,-32768,   287,-32768,   287,-32768,-32768,-32768,
  -32768,-32768,   287,-32768,   163,   173,-32768,   287,   174,-32768,
  -32768,-32768,   287,-32768,    43,-32768,   -71,-32768,-32768,-32768,
  -32768,   175,-32768,   287,   287,   287,   287,-32768,   -71,   287,
     287,-32768,   287,-32768,   287,   287,   287,   287,   287,-32768,
     287,-32768,-32768,   181,-32768,   287,   287,   287,   -71,-32768,
     -71,   341,   184,-32768,-32768,-32768,-32768,   -71,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   287,-32768,-32768,
  -32768,   -71,   -71,   184,-32768,   -71,   -71,   185,    18,-32768,
     -71,   133,   -71,   -71,   287,-32768,-32768,   -71,   -71,   126,
     -71,    19,   197,   255,    20,   -71,   -71,-32768,-32768,   -71,
     287,-32768,-32768,-32768,   -71,   -71,   -71,   133,   291,   -71,
     207,   133,   291,   -71,   -71,   291,   -71,   126,-32768,   291,
     287,   126,-32768,   291,   291,   -71,-32768,   291,-32768,   208,
  -32768,-32768,   291,-32768,-32768,-32768,   133,    84,-32768,   305,
  -32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,  -216,-32768,-32768,-32768,
  -32768,-32768,-32768,   220,  -208,  -260,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   127,   389,
     108,  -120,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    77,-32768,   107,    71,-32768,  -213,-32768,-32768,-32768,
    -141,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,   -11,   398,   140,   213,   549,
     487,  -425,  -285,  -257,    29,    -2,    12,-32768,     4,-32768
};


#define	YYLAST		792


static const short yytable[] =
{
      30,   162,    47,   163,   247,    24,   198,   283,   335,   165,
     286,   217,   248,   499,   201,   253,   449,   263,   303,    33,
      34,   445,   445,   445,    59,   284,   255,    24,   225,   226,
     227,   228,   229,   230,   192,   262,   267,   199,   173,    56,
      57,    58,   477,   186,   341,   202,   481,   147,   279,   193,
     282,   181,   375,    66,    67,    68,     2,   104,   191,    60,
      95,    96,    97,    98,    99,   100,   101,   102,   114,   115,
     116,   497,     3,   105,   106,   107,   108,   109,   110,   111,
     112,    26,   174,   194,   175,   166,    69,     5,    27,   409,
     200,   285,    28,   342,     4,     5,    29,     6,     7,   307,
     177,    59,     8,    59,    59,   261,     7,   187,   188,    59,
       8,    35,   203,    59,   457,   462,   205,   252,    36,    37,
      38,    39,   237,   204,   206,   294,    70,    71,    72,   148,
     149,   134,   209,   155,   156,   157,   158,   159,   160,   161,
     295,   211,   164,   145,   178,   170,   179,    40,    41,   178,
     169,   179,    42,    43,   250,    73,    74,    75,    76,    77,
      78,    79,   280,    44,    45,   185,    46,   251,   221,   337,
     238,   239,   240,   241,   242,   243,   281,   171,   172,    59,
      87,    88,   222,   305,   189,   190,   306,     4,     5,   135,
     136,   137,   138,   139,   140,   141,   290,   378,   210,     7,
     196,   197,   468,     8,   124,   308,   174,   472,   175,   475,
     338,   337,   293,   132,   244,   294,   220,   484,   207,   208,
     178,   374,   179,     5,   294,   212,   213,   178,   214,   179,
     295,   216,   218,   343,     7,   373,   223,   224,     8,   295,
     498,   178,   235,   179,   376,   246,   379,   249,   380,   382,
     292,    85,    86,    70,    71,    72,   302,    91,   401,   461,
      73,    74,    75,    76,    77,    78,    79,   289,   402,   404,
     411,   298,   299,   300,   301,    24,   427,   142,   264,   434,
     444,    24,    73,    74,    75,    76,    77,    78,    79,   117,
     118,   119,   460,   336,   445,   287,   238,   239,   240,   241,
     242,   243,   480,   494,   453,   500,   126,   291,     4,     5,
     364,   365,     5,   440,   257,   258,   309,    70,    71,    72,
       7,   236,   372,     7,     8,     0,   129,     8,   339,    70,
      71,    72,     0,   368,     0,     0,     0,   368,     0,     0,
     244,     4,     5,   381,     0,     0,    73,    74,    75,    76,
      77,    78,    79,     7,   118,   119,     0,     8,    73,    74,
      75,    76,    77,    78,    79,   403,    70,    71,    72,    26,
     408,     0,     0,   268,     0,     0,    27,   344,   130,     5,
      28,     0,     0,     0,    29,     0,   269,   270,   271,   272,
       7,     0,     0,     0,     8,    73,    74,    75,    76,    77,
      78,    79,     0,     0,     0,   410,     0,     0,     0,   104,
     412,   273,     0,   274,   275,   276,   277,   417,    70,    71,
      72,   433,     0,    26,     0,   437,     0,     0,     0,     0,
      27,     0,     0,    82,    28,     0,     0,   431,    29,   432,
      89,    90,   452,    92,     0,    94,   436,    73,    74,    75,
      76,    77,    78,    79,     0,    26,   182,     0,   470,     0,
     438,   439,    27,     0,   442,   443,    28,   447,     0,   448,
      29,   450,   451,     0,     0,     0,   454,   455,   489,   456,
       0,   391,     0,   393,   465,   466,     0,     0,   469,   399,
       0,     0,     0,   473,   474,   476,     0,     0,   479,     0,
       0,     0,   483,   485,     0,   487,     0,     0,     0,     0,
     413,   414,   415,   416,   492,   278,   418,   419,     0,   420,
       0,   421,   422,   423,   424,   425,   304,   426,   269,   270,
     271,   272,   428,   429,   430,     0,    26,   219,     0,   269,
     270,   271,   272,    27,     0,     0,     0,    28,     0,     0,
       0,    29,     0,   273,     0,   274,   275,   276,   277,   458,
       0,     0,   463,     0,   273,     0,   274,   275,   276,   277,
       0,   123,     0,     0,   127,   128,   478,     0,   131,   133,
     482,   143,     0,   486,     0,     0,     0,   488,   310,     0,
       0,   490,   491,     0,   311,   493,     0,     0,     0,     0,
     495,     0,     0,     0,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   340,   333,     0,     0,     0,
       0,   311,   120,   122,   120,   120,   122,   122,     0,     0,
     120,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   377,   333,     0,     0,     0,     0,   311,     0,
      48,    49,    50,    51,    52,    53,    54,    55,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     333,   347,   348,   349,   350,     0,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,     0,   363,     0,   369,
     370,   371,    61,    62,    63,    64,    65,    66,    67,    68,
      64,    65,    66,    67,    68,    81,    61,    62,    63,    64,
      65,    66,    67,    68,     0,     0,     0,     0,     0,   103,
      73,    74,    75,    76,    77,    78,    79,     0,   118,   119,
      61,    62,    63,    64,    65,    66,    67,    68,    62,    63,
      64,    65,    66,    67,    68,    63,    64,    65,    66,    67,
      68,   225,   226,   227,   228,   229,   230,   238,   239,   240,
     241,   242,   243
};

static const short yycheck[] =
{
       2,   142,    23,     4,   217,     1,    49,   264,   293,     4,
       4,     3,     3,     0,    49,   231,   441,     3,   278,     7,
       8,     3,     3,     3,    95,     4,   234,    23,     6,     7,
       8,     9,    10,    11,    80,   248,   252,    80,     4,    27,
      28,    29,   467,     4,   304,    80,   471,    96,   256,    95,
     263,     4,   337,    90,    91,    92,    43,    59,     4,    30,
      48,    49,    50,    51,    52,    53,    54,    55,    70,    71,
      72,   496,    59,    61,    62,    63,    64,    65,    66,    67,
      68,    82,    48,    95,    50,    80,     3,    82,    89,   374,
      80,    70,    93,   306,    81,    82,    97,    84,    93,     4,
       4,    95,    97,    95,    95,     4,    93,    68,    69,    95,
      97,     5,    80,    95,    95,    95,     3,    95,    12,    13,
      14,    15,     3,    95,     3,    82,    43,    44,    45,   125,
     126,     3,    80,   135,   136,   137,   138,   139,   140,   141,
      97,    95,   144,   114,    48,   147,    50,    41,    42,    48,
     146,    50,    46,    47,     3,    72,    73,    74,    75,    76,
      77,    78,     4,    57,    58,   153,    60,    80,    71,    85,
      51,    52,    53,    54,    55,    56,     4,   148,   149,    95,
      40,    41,    70,     4,   155,   156,     3,    81,    82,    61,
      62,    63,    64,    65,    66,    67,    80,     4,   194,    93,
     171,   172,   459,    97,    16,    80,    48,   464,    50,   466,
      95,    85,    79,     3,    95,    82,   204,   474,   189,   190,
      48,    79,    50,    82,    82,   196,   197,    48,   199,    50,
      97,   202,   203,    95,    93,    98,   207,   208,    97,    97,
     497,    48,   213,    50,    80,   216,    80,   218,    95,    95,
     271,    38,    39,    43,    44,    45,   277,    44,    95,     4,
      72,    73,    74,    75,    76,    77,    78,   269,    95,    95,
      95,   273,   274,   275,   276,   271,    95,     3,   249,    95,
      95,   277,    72,    73,    74,    75,    76,    77,    78,     3,
      80,    81,    95,   295,     3,   266,    51,    52,    53,    54,
      55,    56,    95,    95,   445,     0,    86,    80,    81,    82,
      80,    81,    82,   433,   237,   244,   287,    43,    44,    45,
      93,   214,   333,    93,    97,    -1,     3,    97,   299,    43,
      44,    45,    -1,   329,    -1,    -1,    -1,   333,    -1,    -1,
      95,    81,    82,   345,    -1,    -1,    72,    73,    74,    75,
      76,    77,    78,    93,    80,    81,    -1,    97,    72,    73,
      74,    75,    76,    77,    78,   367,    43,    44,    45,    82,
     372,    -1,    -1,     3,    -1,    -1,    89,    80,     3,    82,
      93,    -1,    -1,    -1,    97,    -1,    16,    17,    18,    19,
      93,    -1,    -1,    -1,    97,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,    -1,   376,    -1,    -1,    -1,   411,
     381,    41,    -1,    43,    44,    45,    46,   388,    43,    44,
      45,    80,    -1,    82,    -1,   427,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    35,    93,    -1,    -1,   408,    97,   410,
      42,    43,   444,    45,    -1,    47,   417,    72,    73,    74,
      75,    76,    77,    78,    -1,    82,    83,    -1,   460,    -1,
     431,   432,    89,    -1,   435,   436,    93,   438,    -1,   440,
      97,   442,   443,    -1,    -1,    -1,   447,   448,   480,   450,
      -1,   354,    -1,   356,   455,   456,    -1,    -1,   459,   362,
      -1,    -1,    -1,   464,   465,   466,    -1,    -1,   469,    -1,
      -1,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,    -1,
     383,   384,   385,   386,   485,     3,   389,   390,    -1,   392,
      -1,   394,   395,   396,   397,   398,     3,   400,    16,    17,
      18,    19,   405,   406,   407,    -1,    82,    83,    -1,    16,
      17,    18,    19,    89,    -1,    -1,    -1,    93,    -1,    -1,
      -1,    97,    -1,    41,    -1,    43,    44,    45,    46,   451,
      -1,    -1,   454,    -1,    41,    -1,    43,    44,    45,    46,
      -1,    84,    -1,    -1,    87,    88,   468,    -1,    91,    92,
     472,    94,    -1,   475,    -1,    -1,    -1,   479,     4,    -1,
      -1,   483,   484,    -1,    10,   487,    -1,    -1,    -1,    -1,
     492,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     4,    42,    -1,    -1,    -1,
      -1,    10,    83,    84,    85,    86,    87,    88,    -1,    -1,
      91,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,   312,   313,   314,   315,    -1,   317,   318,    -1,   320,
      -1,   322,   323,   324,   325,   326,    -1,   328,    -1,   330,
     331,   332,    85,    86,    87,    88,    89,    90,    91,    92,
      88,    89,    90,    91,    92,    98,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      85,    86,    87,    88,    89,    90,    91,    92,    86,    87,
      88,    89,    90,    91,    92,    87,    88,    89,    90,    91,
      92,     6,     7,     8,     9,    10,    11,    51,    52,    53,
      54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   include <string.h>
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 316 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 17:
#line 184 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 18:
#line 194 "rcparse.y"
{
	    yyval.pacc = NULL;
	  }
    break;
case 19:
#line 198 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  }
    break;
case 20:
#line 219 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  }
    break;
case 21:
#line 224 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;
case 22:
#line 236 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;
case 23:
#line 257 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  }
    break;
case 24:
#line 267 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
case 25:
#line 271 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 26:
#line 276 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 27:
#line 283 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  }
    break;
case 28:
#line 287 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  }
    break;
case 29:
#line 292 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  }
    break;
case 30:
#line 296 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  }
    break;
case 31:
#line 300 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  }
    break;
case 32:
#line 304 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  }
    break;
case 33:
#line 313 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 34:
#line 325 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 35:
#line 338 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 36:
#line 355 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 37:
#line 363 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 38:
#line 382 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 39:
#line 390 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	      style = 0;
	    }
    break;
case 40:
#line 410 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 41:
#line 420 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 42:
#line 424 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 44:
#line 432 "rcparse.y"
{
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  }
    break;
case 45:
#line 438 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  }
    break;
case 46:
#line 443 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
case 47:
#line 447 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
    break;
case 48:
#line 451 "rcparse.y"
{
	    res_string_to_id (& dialog.class, yyvsp[0].s);
	  }
    break;
case 49:
#line 455 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 50:
#line 468 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 51:
#line 483 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 52:
#line 498 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
	  }
    break;
case 53:
#line 513 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  }
    break;
case 54:
#line 517 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 55:
#line 521 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 525 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  }
    break;
case 58:
#line 533 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  }
    break;
case 59:
#line 544 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 60:
#line 551 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 61:
#line 555 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 62:
#line 562 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 63:
#line 566 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 64:
#line 573 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 65:
#line 577 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 66:
#line 584 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  }
    break;
case 67:
#line 591 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 68:
#line 598 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 69:
#line 602 "rcparse.y"
{
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;
case 70:
#line 611 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 71:
#line 616 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 72:
#line 627 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 73:
#line 636 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 74:
#line 649 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].id, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 75:
#line 659 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 76:
#line 666 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 77:
#line 670 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 78:
#line 677 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 79:
#line 681 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;
case 80:
#line 688 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 81:
#line 692 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 82:
#line 699 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 83:
#line 703 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 84:
#line 710 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  }
    break;
case 85:
#line 717 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 86:
#line 723 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 87:
#line 729 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 88:
#line 735 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 89:
#line 740 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 90:
#line 747 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  }
    break;
case 91:
#line 754 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;
case 92:
#line 761 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 93:
#line 765 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 94:
#line 772 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 95:
#line 776 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 96:
#line 782 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 97:
#line 786 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 98:
#line 793 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 99:
#line 797 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 100:
#line 804 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 101:
#line 808 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 102:
#line 815 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 103:
#line 819 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;
case 104:
#line 826 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 105:
#line 830 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 106:
#line 837 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 107:
#line 842 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 108:
#line 844 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-13].id, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  }
    break;
case 109:
#line 859 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 110:
#line 871 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 111:
#line 882 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 112:
#line 893 "rcparse.y"
{
	    res_string_to_id (&yyval.id, "");
	  }
    break;
case 113:
#line 897 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 114:
#line 902 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[0].s);
	  }
    break;
case 115:
#line 906 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[-1].s);
	  }
    break;
case 116:
#line 913 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 117:
#line 917 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
case 118:
#line 926 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 120:
#line 932 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
case 122:
#line 938 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 124:
#line 946 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 125:
#line 958 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 126:
#line 971 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 127:
#line 980 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 128:
#line 990 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 129:
#line 994 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 130:
#line 1011 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  }
    break;
case 131:
#line 1015 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;
case 132:
#line 1019 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 133:
#line 1026 "rcparse.y"
{
	    yyval.is = 0;
	  }
    break;
case 134:
#line 1030 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 135:
#line 1034 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 136:
#line 1041 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  }
    break;
case 137:
#line 1045 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  }
    break;
case 138:
#line 1049 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  }
    break;
case 139:
#line 1053 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  }
    break;
case 140:
#line 1057 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  }
    break;
case 141:
#line 1061 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  }
    break;
case 142:
#line 1070 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 143:
#line 1080 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 144:
#line 1084 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 145:
#line 1101 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  }
    break;
case 146:
#line 1105 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  }
    break;
case 147:
#line 1109 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  }
    break;
case 148:
#line 1113 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;
case 149:
#line 1117 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 150:
#line 1121 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 151:
#line 1125 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 152:
#line 1130 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  }
    break;
case 153:
#line 1139 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 154:
#line 1151 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 155:
#line 1158 "rcparse.y"
{
	    define_rcdata_file (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 156:
#line 1170 "rcparse.y"
{
	    rcparse_rcdata ();
	  }
    break;
case 157:
#line 1174 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 158:
#line 1182 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  }
    break;
case 159:
#line 1187 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 160:
#line 1194 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 161:
#line 1202 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 162:
#line 1210 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 163:
#line 1219 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 164:
#line 1233 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 167:
#line 1240 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 168:
#line 1247 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 169:
#line 1260 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 170:
#line 1267 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 171:
#line 1279 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 172:
#line 1289 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  }
    break;
case 173:
#line 1295 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 174:
#line 1301 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 175:
#line 1307 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 176:
#line 1312 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 177:
#line 1317 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 178:
#line 1322 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 179:
#line 1327 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 180:
#line 1341 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  }
    break;
case 181:
#line 1345 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  }
    break;
case 182:
#line 1349 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  }
    break;
case 183:
#line 1356 "rcparse.y"
{
	    yyval.verstring = NULL;
	  }
    break;
case 184:
#line 1360 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  }
    break;
case 185:
#line 1367 "rcparse.y"
{
	    yyval.vervar = NULL;
	  }
    break;
case 186:
#line 1371 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  }
    break;
case 187:
#line 1380 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  }
    break;
case 188:
#line 1385 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 189:
#line 1401 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 190:
#line 1405 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 191:
#line 1409 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 192:
#line 1417 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 193:
#line 1422 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 194:
#line 1439 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 195:
#line 1446 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 196:
#line 1452 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 197:
#line 1457 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 198:
#line 1462 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  }
    break;
case 199:
#line 1472 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 200:
#line 1478 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 201:
#line 1489 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 202:
#line 1495 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 203:
#line 1507 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 204:
#line 1512 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  }
    break;
case 205:
#line 1517 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  }
    break;
case 206:
#line 1522 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  }
    break;
case 207:
#line 1527 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  }
    break;
case 208:
#line 1532 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  }
    break;
case 209:
#line 1537 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 210:
#line 1547 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 211:
#line 1551 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 212:
#line 1568 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 213:
#line 1572 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 214:
#line 1576 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 215:
#line 1580 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 216:
#line 1587 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 217:
#line 1591 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  }
    break;
case 218:
#line 1600 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 219:
#line 1604 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 220:
#line 1613 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 221:
#line 1622 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 222:
#line 1631 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 223:
#line 1635 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 224:
#line 1639 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 225:
#line 1644 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 226:
#line 1649 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 227:
#line 1654 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 228:
#line 1659 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 229:
#line 1664 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 230:
#line 1669 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 231:
#line 1674 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 232:
#line 1679 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 233:
#line 1684 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 234:
#line 1695 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 235:
#line 1704 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 236:
#line 1715 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 237:
#line 1719 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 238:
#line 1723 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 239:
#line 1728 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 240:
#line 1733 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 241:
#line 1738 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 242:
#line 1743 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 243:
#line 1748 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 244:
#line 1753 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 245:
#line 1758 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 246:
#line 1763 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
}

#line 706 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1769 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}
@


1.1.14.1.4.1
log
@
binutils/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* rcparse.c: Remove generated file.
	* rcparse.h: Likewise.
	* nlmheader.c: Likewise.
	* nlmheader.h: Likewise.
	* arparse.c: Likewise.
	* arparse.h: Likewise.
	* sysinfo.c: Likewise.
	* sysinfo.h: Likewise.
	* defparse.c: Likewise.
	* defparse.h: Likewise.
	* rclex.c: Likewise.
	* syslex.c: Likewise.
	* deflex.c: Likewise.
	* arlex: Likewise.

gas/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* itbl-parse.c: Remove generated file.
	* itbl-parse.h: Likewise.
	* m68k-parse.c: Likewise.
	* itbl-lex.c: Likewise.

ld/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* ldgram.c: Remove generated file.
	* ldgram.h: Likewise.
	* ldlex.c: Likewise.
@
text
@@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 3501
/* A Bison parser, made from rcparse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;
static struct res_id res_text_field;

/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const struct res_id res_null_text = { 1, {{0, L""}}};


#line 63 "rcparse.y"
#ifndef YYSTYPE
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		499
#define	YYFLAG		-32768
#define	YYNTBASE	99

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   229,   230,   235,   236,   241,   242,   247,   248,   253,
     254,   258,   270,   283,   296,   310,   311,   316,   317,   322,
     323,   327,   328,   333,   334,   339,   346,   355,   366,   378,
     379,   384,   385,   389,   390,   395,   396,   401,   402,   407,
     408,   413,   414,   419,   420,   424,   425,   430,   431,   447,
     454,   463,   473,   474,   477,   479,   482,   483,   487,   488,
     492,   493,   497,   498,   502,   507,   512,   516,   523,   524,
     527,   532,   535,   542,   543,   547,   550,   552,   554,   556,
     558,   560,   562,   569,   570,   573,   576,   580,   586,   589,
     595,   602,   610,   620,   625,   632,   633,   636,   637,   639,
     641,   643,   647,   651,   652,   659,   660,   664,   669,   676,
     681,   688,   689,   696,   703,   707,   711,   715,   719,   723,
     724,   733,   741,   742,   748,   749,   753,   755,   757,   759,
     762,   765,   768,   770,   771,   774,   778,   783,   787,   788,
     791,   792,   795,   797,   799,   801,   803,   805,   807,   809,
     811,   813,   815,   818,   822,   827,   829,   833,   834,   836,
     839,   841,   843,   847,   850,   853,   857,   861,   865,   869,
     873,   877,   881,   885,   888,   890,   892,   896,   899,   903,
     907,   911,   915,   919,   923,   927
};
static const short yyrhs[] =
{
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   138,   116,   137,     0,     0,
      21,   138,   117,   137,     0,     0,    22,   138,   118,   137,
       0,     0,    38,   138,   119,   137,     0,     0,    23,   138,
     120,   137,     0,     0,    24,   121,   137,     0,    10,   138,
     184,   183,   140,   183,   183,   183,   183,   182,   139,     0,
      10,   138,   184,   183,   140,   183,   183,   183,   183,   183,
     183,   139,     0,    10,   138,   184,    95,    80,   140,   183,
     183,   183,   183,   182,   139,     0,    10,   138,   184,    95,
      80,   140,   183,   183,   183,   183,   183,   183,   139,     0,
       0,    25,   138,   122,   137,     0,     0,    26,   138,   123,
     137,     0,     0,    27,   124,   137,     0,     0,    28,   138,
     125,   137,     0,     0,    39,   138,   126,   137,     0,    42,
     174,   184,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   139,     0,    42,   174,   184,   183,   183,
     183,   183,   142,   182,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   183,   183,   139,     0,     0,    40,
     138,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   138,   129,   137,     0,     0,    31,   138,   130,   137,
       0,     0,    32,   138,   131,   137,     0,     0,    33,   138,
     132,   137,     0,     0,    34,   138,   133,   137,     0,     0,
      35,   134,   137,     0,     0,    36,   138,   135,   137,     0,
       0,    37,   174,   184,    95,   184,    95,   184,    95,   184,
      95,   184,    95,   136,   180,   182,     0,   184,   183,   183,
     183,   183,   139,     0,   184,   183,   183,   183,   183,   144,
     182,   139,     0,   184,   183,   183,   183,   183,   144,   183,
     183,   139,     0,     0,   187,    95,     0,    80,     0,    80,
      95,     0,     0,     3,   159,     4,     0,     0,    95,   141,
     180,     0,     0,    95,   143,   180,     0,     0,    95,   145,
     180,     0,   172,    41,   176,   179,     0,   172,    42,   176,
     179,     0,    43,   184,   183,     0,   172,    46,   175,     3,
     150,     4,     0,     0,   150,   151,     0,    48,    80,   183,
     152,     0,    48,    49,     0,    50,    80,   152,     3,   150,
       4,     0,     0,   152,    95,   153,     0,   152,   153,     0,
      51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
      56,     0,   172,    47,   175,     3,   155,     4,     0,     0,
     155,   156,     0,    48,    80,     0,    48,    80,   183,     0,
      48,    80,   183,   183,   182,     0,    48,    49,     0,    50,
      80,     3,   155,     4,     0,    50,    80,   183,     3,   155,
       4,     0,    50,    80,   183,   183,     3,   155,     4,     0,
      50,    80,   183,   183,   183,   182,     3,   155,     4,     0,
     172,    57,   177,   179,     0,   172,    58,   175,     3,   159,
       4,     0,     0,   160,   161,     0,     0,   162,     0,    83,
       0,   185,     0,   162,    95,    83,     0,   162,    95,   185,
       0,     0,    59,   175,     3,   164,   165,     4,     0,     0,
     165,   184,    80,     0,   165,   184,    95,    80,     0,   172,
     172,   175,     3,   159,     4,     0,   172,   172,   175,   179,
       0,   172,    60,   168,     3,   169,     4,     0,     0,   168,
      61,   184,   183,   183,   183,     0,   168,    62,   184,   183,
     183,   183,     0,   168,    63,   184,     0,   168,    64,   184,
       0,   168,    65,   184,     0,   168,    66,   184,     0,   168,
      67,   184,     0,     0,   169,    68,     3,    71,     3,   170,
       4,     4,     0,   169,    69,     3,    70,    80,   171,     4,
       0,     0,   170,    70,    80,    95,    80,     0,     0,   171,
     183,   183,     0,   187,     0,    81,     0,    80,     0,    80,
      95,     0,    81,    95,     0,   187,    95,     0,   173,     0,
       0,   175,   178,     0,   175,    44,   184,     0,   175,    43,
     184,   183,     0,   175,    45,   184,     0,     0,   176,   178,
       0,     0,   177,   178,     0,    72,     0,    73,     0,    74,
       0,    75,     0,    76,     0,    77,     0,    78,     0,    80,
       0,    81,     0,   181,     0,    79,   181,     0,   180,    85,
     181,     0,   180,    85,    79,   181,     0,    82,     0,    97,
     184,    98,     0,     0,   183,     0,    95,   184,     0,   185,
       0,    82,     0,    97,   185,    98,     0,    93,   185,     0,
      89,   185,     0,   185,    90,   185,     0,   185,    91,   185,
       0,   185,    92,   185,     0,   185,    88,   185,     0,   185,
      89,   185,     0,   185,    87,   185,     0,   185,    86,   185,
       0,   185,    85,   185,     0,    95,   187,     0,   188,     0,
      82,     0,    97,   185,    98,     0,    93,   185,     0,   188,
      90,   185,     0,   188,    91,   185,     0,   188,    92,   185,
       0,   188,    88,   185,     0,   188,    89,   185,     0,   188,
      87,   185,     0,   188,    86,   185,     0,   188,    85,   185,
       0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   159,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   180,   190,   195,
     215,   221,   232,   254,   263,   268,   273,   279,   284,   289,
     293,   297,   301,   309,   321,   333,   333,   359,   359,   386,
     386,   416,   421,   427,   429,   435,   439,   444,   448,   452,
     465,   480,   495,   510,   514,   518,   522,   528,   530,   540,
     540,   552,   552,   563,   563,   574,   574,   588,   588,   599,
     599,   612,   623,   632,   645,   656,   656,   667,   667,   678,
     678,   689,   689,   700,   700,   714,   719,   725,   731,   737,
     737,   751,   751,   762,   762,   773,   773,   783,   783,   794,
     794,   805,   805,   816,   816,   827,   827,   838,   838,   855,
     867,   878,   889,   894,   899,   903,   909,   914,   922,   922,
     928,   928,   934,   934,   942,   954,   967,   976,   986,   991,
    1007,  1012,  1016,  1022,  1027,  1031,  1037,  1042,  1046,  1050,
    1054,  1058,  1066,  1076,  1081,  1097,  1102,  1106,  1110,  1114,
    1118,  1122,  1126,  1135,  1147,  1160,  1160,  1171,  1177,  1183,
    1192,  1200,  1209,  1222,  1222,  1228,  1230,  1237,  1249,  1257,
    1268,  1278,  1285,  1291,  1297,  1302,  1307,  1312,  1317,  1330,
    1335,  1339,  1345,  1350,  1356,  1361,  1369,  1375,  1390,  1395,
    1399,  1406,  1412,  1428,  1436,  1442,  1447,  1452,  1461,  1468,
    1478,  1485,  1496,  1502,  1507,  1512,  1517,  1522,  1527,  1536,
    1541,  1557,  1562,  1566,  1570,  1576,  1581,  1589,  1594,  1602,
    1611,  1620,  1625,  1629,  1634,  1639,  1644,  1649,  1654,  1659,
    1664,  1669,  1674,  1684,  1693,  1704,  1709,  1713,  1718,  1723,
    1728,  1733,  1738,  1743,  1748,  1753
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
  "control_params", "optresidc", "opt_control_data", "control_styleexpr", 
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   138,   139,   139,   141,   140,
     143,   142,   145,   144,   146,   147,   148,   149,   150,   150,
     151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   154,   155,   155,   156,   156,   156,   156,   156,
     156,   156,   156,   157,   158,   160,   159,   161,   161,   162,
     162,   162,   162,   164,   163,   165,   165,   165,   166,   166,
     167,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     169,   169,   170,   170,   171,   171,   172,   172,   173,   173,
     173,   174,   174,   175,   175,   175,   175,   175,   176,   176,
     177,   177,   178,   178,   178,   178,   178,   178,   178,   179,
     179,   180,   180,   180,   180,   181,   181,   182,   182,   183,
     184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   186,   187,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       3,    11,    12,    12,    13,     0,     4,     0,     4,     0,
       3,     0,     4,     0,     4,     6,     8,    10,    11,     0,
       4,     0,     3,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     4,     0,     3,     0,     4,     0,    15,     6,
       8,     9,     0,     2,     1,     2,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     6,     0,     2,     0,     1,     1,
       1,     3,     3,     0,     6,     0,     3,     4,     6,     4,
       6,     0,     6,     6,     3,     3,     3,     3,     3,     0,
       8,     7,     0,     5,     0,     3,     1,     1,     1,     2,
       2,     2,     1,     0,     2,     3,     4,     3,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     4,     1,     3,     0,     1,     2,
       1,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     1,     1,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,   193,   187,   235,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   186,   234,   221,     0,     0,     0,
       0,   220,     0,   237,     0,   193,   200,   198,   200,   200,
     198,   198,   193,   193,   200,   193,   171,   193,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   223,     0,     0,
     126,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,     0,     0,   202,   203,   204,   205,   206,   207,   208,
     194,   236,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   245,   244,   243,   241,   242,
     238,   239,   240,   222,   219,   232,   231,   230,   228,   229,
     225,   226,   227,   165,     0,   195,   197,    18,   209,   210,
     201,    33,   199,    34,     0,     0,     0,   124,   125,   128,
     143,   153,   155,   179,     0,     0,     0,     0,     0,     0,
       0,   155,   169,     0,   196,     0,     0,     0,     0,     0,
       0,     0,   157,     0,     0,     0,   174,   175,   176,   177,
     178,     0,   164,     0,    17,    22,    19,     0,    23,    42,
       0,     0,   127,     0,     0,   129,   142,     0,     0,   144,
     154,   159,   156,   158,   160,   170,     0,     0,     0,     0,
     168,   166,     0,     0,    20,     0,     0,   131,     0,   133,
     148,   145,     0,     0,     0,     0,     0,     0,   167,   233,
       0,    35,    37,   133,     0,   146,   143,     0,   161,   162,
       0,     0,   172,   173,    27,    28,    29,    30,    31,    32,
      21,    24,    43,    43,    39,   130,   128,   136,   137,   138,
     139,   140,   141,     0,   135,   217,     0,   143,     0,   182,
     184,     0,    26,     0,     0,    43,     0,   134,   147,   218,
     149,     0,   143,   217,     0,     0,    25,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    57,     0,   132,
     150,     0,     0,     0,     0,   181,     0,     0,    47,    44,
      48,    45,     0,   215,     0,    46,   211,     0,     0,    54,
      56,    53,     0,    57,   151,   143,   180,     0,   185,    36,
     112,   112,   112,   112,   112,    69,   112,   112,    79,   112,
      91,   112,   112,   112,   112,   112,   103,   112,     0,   112,
     112,   112,     0,    58,   212,     0,     0,     0,    55,    38,
       0,     0,     0,   114,     0,     0,    59,    61,    63,    67,
       0,    75,    77,     0,    81,     0,    93,    95,    97,    99,
     101,     0,   105,   188,     0,   192,     0,     0,    65,    83,
      89,     0,   216,     0,   213,    49,    40,   152,   183,   115,
       0,   113,     0,     0,     0,     0,    70,     0,     0,     0,
      80,     0,    92,     0,     0,     0,     0,     0,   104,     0,
     189,   190,     0,   191,     0,     0,     0,     0,   214,    50,
       0,     0,    60,    62,    64,    68,     0,    76,    78,    82,
      94,    96,    98,   100,   102,   106,     0,    66,    84,    90,
       0,    51,     0,   118,     0,     0,     0,   116,    52,     0,
       0,     0,     0,     0,   155,    85,     0,     0,   119,     0,
     116,     0,     0,   116,     0,     0,   122,   109,   217,     0,
     117,   120,    86,   217,     0,   217,     0,   116,   218,     0,
       0,   116,   218,   217,   116,   218,   123,   110,   116,     0,
     121,    87,   116,   116,   218,    71,   116,   111,     0,    88,
      73,   116,    72,   107,    74,     0,   217,   108,     0,     0
};

static const short yydefgoto[] =
{
       1,     9,   145,   166,   167,   230,   231,    10,    11,    12,
     232,   233,   255,   125,   253,   287,   333,   382,   383,   384,
     404,   385,   350,   388,   389,   353,   391,   405,   406,   355,
     393,   394,   395,   396,   397,   361,   399,   495,   386,   344,
     445,   434,   440,   463,   470,   458,   466,    13,    14,    15,
      16,   149,   175,   214,   244,    17,   150,   179,    18,    19,
     151,   152,   182,   183,    20,   113,   143,    21,    22,    93,
     153,   264,   265,    23,   365,   366,    32,    84,    83,    80,
     121,   295,   296,   258,   259,   387,    31,   194,   345,    25
};

static const short yypact[] =
{
  -32768,    13,   265,-32768,-32768,-32768,-32768,   265,   265,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   110,-32768,   567,-32768,   265,   265,   265,
     -70,   605,   300,-32768,   657,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   265,   265,
     265,   265,   265,   265,   265,   265,-32768,-32768,   671,   265,
  -32768,   265,   265,   265,   265,   265,   265,   265,   265,-32768,
     265,   265,   265,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   307,   698,   698,   224,   224,   698,   698,   323,
     345,   698,   445,   195,   244,   694,   700,   217,    89,    89,
  -32768,-32768,-32768,-32768,-32768,   694,   700,   217,    89,    89,
  -32768,-32768,-32768,-32768,   -70,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -42,   141,   141,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   265,   265,   265,   265,   265,   265,
     265,-32768,-32768,    -1,-32768,     5,   265,   -70,   -70,     3,
      34,    51,   186,    39,   -70,   -70,-32768,-32768,-32768,-32768,
  -32768,    54,-32768,    10,-32768,-32768,-32768,   -12,-32768,-32768,
     -70,   -70,-32768,   -35,    11,-32768,-32768,   -31,    31,-32768,
  -32768,-32768,-32768,    23,   605,-32768,   128,   137,   -70,   -70,
  -32768,-32768,    68,   141,    58,   -70,   -70,-32768,   -70,-32768,
  -32768,   -70,     8,   516,    28,    85,   -70,   -70,-32768,-32768,
     787,-32768,   -70,-32768,   158,   -70,-32768,     9,-32768,   605,
     156,    80,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      22,-32768,-32768,-32768,-32768,   359,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   748,-32768,   -70,   115,-32768,    14,-32768,
  -32768,   787,-32768,   529,   540,-32768,   123,-32768,-32768,-32768,
  -32768,   124,-32768,   -70,    30,     6,-32768,-32768,   265,    86,
      65,    96,   265,   265,   265,   265,   256,-32768,   549,-32768,
  -32768,   138,   166,   178,   105,-32768,   -70,   604,-32768,-32768,
  -32768,-32768,    57,-32768,   265,   104,-32768,   100,   -70,-32768,
  -32768,-32768,   641,-32768,-32768,-32768,-32768,   107,-32768,-32768,
     170,   170,   170,   170,   170,-32768,   170,   170,-32768,   170,
  -32768,   170,   170,   170,   170,   170,-32768,   170,   140,   170,
     170,   170,   140,-32768,-32768,   106,   108,   139,-32768,-32768,
     678,   146,   148,   131,   265,   134,-32768,-32768,-32768,-32768,
     265,-32768,-32768,   265,-32768,   265,-32768,-32768,-32768,-32768,
  -32768,   265,-32768,   147,   150,-32768,   265,   153,-32768,-32768,
  -32768,   265,-32768,    57,-32768,   -70,-32768,-32768,-32768,-32768,
     159,-32768,   265,   265,   265,   265,-32768,   -70,   265,   265,
  -32768,   265,-32768,   265,   265,   265,   265,   265,-32768,   265,
  -32768,-32768,   169,-32768,   265,   265,   265,   -70,-32768,   -70,
     346,   181,-32768,-32768,-32768,-32768,   -70,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   265,-32768,-32768,-32768,
     -70,   -70,   181,-32768,   -70,   -70,   183,    18,-32768,   -70,
      96,   -70,   -70,   265,-32768,-32768,   -70,   -70,   104,   -70,
      19,   187,   228,    21,   -70,   -70,-32768,-32768,   -70,   265,
  -32768,-32768,-32768,   -70,   -70,   -70,    96,   240,   -70,   189,
      96,   240,   -70,   -70,   240,   -70,   104,-32768,   240,   265,
     104,-32768,   240,   240,   -70,-32768,   240,-32768,   190,-32768,
  -32768,   240,-32768,-32768,-32768,    96,   -59,-32768,   251,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,  -207,-32768,-32768,-32768,
  -32768,-32768,-32768,   179,  -218,  -191,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   145,   410,
     129,  -151,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    50,-32768,    77,    48,-32768,  -212,-32768,-32768,-32768,
    -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,   -39,   288,     7,    82,   424,
     343,  -424,  -284,  -257,    29,    -2,    12,-32768,     4,-32768
};


#define	YYLAST		804


static const short yytable[] =
{
      30,   161,    47,   162,   246,    24,   282,   172,   334,   164,
     285,   216,   247,   498,   197,   254,   448,   262,   200,    33,
      34,   444,   444,   252,   444,    59,   336,    24,   224,   225,
     226,   227,   228,   229,   283,   261,    59,   278,   176,    56,
      57,    58,   476,   185,   266,   198,   480,    87,    88,   201,
     281,   173,   374,   174,   146,   180,     2,   104,   190,    60,
      95,    96,    97,    98,    99,   100,   101,   102,   114,   115,
     116,   496,     3,   105,   106,   107,   108,   109,   110,   111,
     112,    26,   177,   193,   178,   165,   302,     5,    27,   408,
     191,   199,    28,   341,     4,     5,    29,     6,     7,   220,
     284,    59,     8,    59,    59,   192,     7,   186,   187,    59,
       8,   202,   340,    59,   456,    35,   461,   251,   203,   260,
      85,    86,    36,    37,    38,    39,    91,   279,   280,   147,
     148,   204,   154,   155,   156,   157,   158,   159,   160,   293,
     205,   163,   304,   144,   169,   290,     4,     5,   208,   168,
     377,    40,    41,   210,   294,   221,    42,    43,     7,   249,
     250,   236,     8,   177,   184,   178,   289,    44,    45,   305,
      46,   173,   177,   174,   178,   292,   170,   171,   293,    66,
      67,    68,   306,   188,   189,   307,   177,   373,   178,   336,
     293,     4,     5,   294,   177,   337,   178,   209,   133,   195,
     196,   467,   342,     7,   372,   294,   471,     8,   474,   237,
     238,   239,   240,   241,   242,   219,   483,   206,   207,   375,
     363,   364,     5,     5,   211,   212,   379,   213,   378,   381,
     215,   217,   460,     7,     7,   222,   223,     8,     8,   497,
     124,   234,   400,   444,   245,   401,   248,   141,   403,   291,
     343,   499,     5,   243,   410,   301,   134,   135,   136,   137,
     138,   139,   140,     7,   426,   126,   288,     8,    26,   181,
     297,   298,   299,   300,    24,    27,   433,   263,   443,    28,
      24,   439,   459,    29,   479,   493,   256,    70,    71,    72,
     235,   257,   335,   371,   286,     0,    73,    74,    75,    76,
      77,    78,    79,    69,   452,    64,    65,    66,    67,    68,
     117,     0,     0,     0,     0,   308,    73,    74,    75,    76,
      77,    78,    79,    82,   118,   119,   129,   338,     0,     0,
      89,    90,   367,    92,     0,    94,   367,     4,     5,     0,
       0,     0,   380,    70,    71,    72,     0,    26,   130,     7,
      70,    71,    72,     8,    27,     0,     0,     0,    28,     0,
       0,     0,    29,     0,   402,     0,    70,    71,    72,   407,
       0,     0,    73,    74,    75,    76,    77,    78,    79,    73,
      74,    75,    76,    77,    78,    79,     0,     0,    70,    71,
      72,     0,     0,     0,     0,    73,    74,    75,    76,    77,
      78,    79,     0,     0,   409,     0,     0,     0,   104,   411,
     237,   238,   239,   240,   241,   242,   416,    73,    74,    75,
      76,    77,    78,    79,   436,     0,   432,   123,    26,     0,
     127,   128,     0,     0,   131,    27,   430,   142,   431,    28,
       0,   451,     0,    29,     0,   435,     0,     0,   132,     0,
       0,     0,     0,     0,   243,     0,     0,   469,     0,   437,
     438,     0,     0,   441,   442,     0,   446,     0,   447,     0,
     449,   450,     0,     0,     0,   453,   454,   488,   455,     0,
       0,     0,     0,   464,   465,     0,     0,   468,    70,    71,
      72,     0,   472,   473,   475,     0,     0,   478,   390,     0,
     392,   482,   484,     0,   486,     0,   398,   120,   122,   120,
     120,   122,   122,   491,     0,   120,     0,    73,    74,    75,
      76,    77,    78,    79,     0,     0,     0,   412,   413,   414,
     415,     0,   267,   417,   418,     0,   419,     0,   420,   421,
     422,   423,   424,   277,   425,   268,   269,   270,   271,   427,
     428,   429,   303,     0,     0,     0,   268,   269,   270,   271,
       0,     0,     0,     0,     0,   268,   269,   270,   271,     0,
     272,     0,   273,   274,   275,   276,     0,     0,     0,   457,
       0,   272,   462,   273,   274,   275,   276,     0,     0,     0,
     272,     0,   273,   274,   275,   276,   477,     0,    26,   218,
     481,     0,     0,   485,     0,    27,     0,   487,   309,    28,
       0,   489,   490,    29,   310,   492,     0,     0,     0,     0,
     494,     0,     0,     0,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   339,   332,     0,     0,     0,
       0,   310,    48,    49,    50,    51,    52,    53,    54,    55,
       0,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   376,   332,     0,     0,     0,     0,   310,     0,
      61,    62,    63,    64,    65,    66,    67,    68,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   346,   347,   348,   349,     0,   351,   352,     0,   354,
       0,   356,   357,   358,   359,   360,     0,   362,     0,   368,
     369,   370,    61,    62,    63,    64,    65,    66,    67,    68,
       0,     0,     0,     0,     0,    81,    61,    62,    63,    64,
      65,    66,    67,    68,     0,     0,     0,     0,     0,   103,
      73,    74,    75,    76,    77,    78,    79,     0,   118,   119,
      62,    63,    64,    65,    66,    67,    68,    63,    64,    65,
      66,    67,    68,   224,   225,   226,   227,   228,   229,   237,
     238,   239,   240,   241,   242
};

static const short yycheck[] =
{
       2,   141,    23,     4,   216,     1,   263,     4,   292,     4,
       4,     3,     3,     0,    49,   233,   440,     3,    49,     7,
       8,     3,     3,   230,     3,    95,    85,    23,     6,     7,
       8,     9,    10,    11,     4,   247,    95,   255,     4,    27,
      28,    29,   466,     4,   251,    80,   470,    40,    41,    80,
     262,    48,   336,    50,    96,     4,    43,    59,     4,    30,
      48,    49,    50,    51,    52,    53,    54,    55,    70,    71,
      72,   495,    59,    61,    62,    63,    64,    65,    66,    67,
      68,    82,    48,    95,    50,    80,   277,    82,    89,   373,
      80,    80,    93,   305,    81,    82,    97,    84,    93,    71,
      70,    95,    97,    95,    95,    95,    93,    68,    69,    95,
      97,    80,   303,    95,    95,     5,    95,    95,    95,     4,
      38,    39,    12,    13,    14,    15,    44,     4,     4,   125,
     126,     3,   134,   135,   136,   137,   138,   139,   140,    82,
       3,   143,     4,   114,   146,    80,    81,    82,    80,   145,
       4,    41,    42,    95,    97,    70,    46,    47,    93,     3,
      80,     3,    97,    48,   152,    50,    80,    57,    58,     3,
      60,    48,    48,    50,    50,    79,   147,   148,    82,    90,
      91,    92,     4,   154,   155,    80,    48,    79,    50,    85,
      82,    81,    82,    97,    48,    95,    50,   193,     3,   170,
     171,   458,    95,    93,    98,    97,   463,    97,   465,    51,
      52,    53,    54,    55,    56,   203,   473,   188,   189,    80,
      80,    81,    82,    82,   195,   196,    95,   198,    80,    95,
     201,   202,     4,    93,    93,   206,   207,    97,    97,   496,
      16,   212,    95,     3,   215,    95,   217,     3,    95,   270,
      80,     0,    82,    95,    95,   276,    61,    62,    63,    64,
      65,    66,    67,    93,    95,    86,   268,    97,    82,    83,
     272,   273,   274,   275,   270,    89,    95,   248,    95,    93,
     276,   432,    95,    97,    95,    95,   236,    43,    44,    45,
     213,   243,   294,   332,   265,    -1,    72,    73,    74,    75,
      76,    77,    78,     3,   444,    88,    89,    90,    91,    92,
       3,    -1,    -1,    -1,    -1,   286,    72,    73,    74,    75,
      76,    77,    78,    35,    80,    81,     3,   298,    -1,    -1,
      42,    43,   328,    45,    -1,    47,   332,    81,    82,    -1,
      -1,    -1,   344,    43,    44,    45,    -1,    82,     3,    93,
      43,    44,    45,    97,    89,    -1,    -1,    -1,    93,    -1,
      -1,    -1,    97,    -1,   366,    -1,    43,    44,    45,   371,
      -1,    -1,    72,    73,    74,    75,    76,    77,    78,    72,
      73,    74,    75,    76,    77,    78,    -1,    -1,    43,    44,
      45,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,   375,    -1,    -1,    -1,   410,   380,
      51,    52,    53,    54,    55,    56,   387,    72,    73,    74,
      75,    76,    77,    78,   426,    -1,    80,    84,    82,    -1,
      87,    88,    -1,    -1,    91,    89,   407,    94,   409,    93,
      -1,   443,    -1,    97,    -1,   416,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    95,    -1,    -1,   459,    -1,   430,
     431,    -1,    -1,   434,   435,    -1,   437,    -1,   439,    -1,
     441,   442,    -1,    -1,    -1,   446,   447,   479,   449,    -1,
      -1,    -1,    -1,   454,   455,    -1,    -1,   458,    43,    44,
      45,    -1,   463,   464,   465,    -1,    -1,   468,   353,    -1,
     355,   472,   473,    -1,   475,    -1,   361,    83,    84,    85,
      86,    87,    88,   484,    -1,    91,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    -1,    -1,   382,   383,   384,
     385,    -1,     3,   388,   389,    -1,   391,    -1,   393,   394,
     395,   396,   397,     3,   399,    16,    17,    18,    19,   404,
     405,   406,     3,    -1,    -1,    -1,    16,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    -1,
      41,    -1,    43,    44,    45,    46,    -1,    -1,    -1,   450,
      -1,    41,   453,    43,    44,    45,    46,    -1,    -1,    -1,
      41,    -1,    43,    44,    45,    46,   467,    -1,    82,    83,
     471,    -1,    -1,   474,    -1,    89,    -1,   478,     4,    93,
      -1,   482,   483,    97,    10,   486,    -1,    -1,    -1,    -1,
     491,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     4,    42,    -1,    -1,    -1,
      -1,    10,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,   311,   312,   313,   314,    -1,   316,   317,    -1,   319,
      -1,   321,   322,   323,   324,   325,    -1,   327,    -1,   329,
     330,   331,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    98,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      86,    87,    88,    89,    90,    91,    92,    87,    88,    89,
      90,    91,    92,     6,     7,     8,     9,    10,    11,    51,
      52,    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 17:
#line 182 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 18:
#line 192 "rcparse.y"
{
	    yyval.pacc = NULL;
	  }
    break;
case 19:
#line 196 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  }
    break;
case 20:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  }
    break;
case 21:
#line 222 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;
case 22:
#line 234 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;
case 23:
#line 255 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  }
    break;
case 24:
#line 265 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
case 25:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 26:
#line 274 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 27:
#line 281 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  }
    break;
case 28:
#line 285 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  }
    break;
case 29:
#line 290 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  }
    break;
case 30:
#line 294 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  }
    break;
case 31:
#line 298 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  }
    break;
case 32:
#line 302 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  }
    break;
case 33:
#line 311 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 34:
#line 323 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 35:
#line 336 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 36:
#line 353 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 37:
#line 361 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 38:
#line 380 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 39:
#line 388 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	      style = 0;
	    }
    break;
case 40:
#line 408 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 41:
#line 418 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 42:
#line 422 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 44:
#line 430 "rcparse.y"
{
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  }
    break;
case 45:
#line 436 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  }
    break;
case 46:
#line 441 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
case 47:
#line 445 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
    break;
case 48:
#line 449 "rcparse.y"
{
	    res_string_to_id (& dialog.class, yyvsp[0].s);
	  }
    break;
case 49:
#line 453 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 50:
#line 466 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 51:
#line 481 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 52:
#line 496 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
	  }
    break;
case 53:
#line 511 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  }
    break;
case 54:
#line 515 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 55:
#line 519 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 523 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  }
    break;
case 58:
#line 531 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  }
    break;
case 59:
#line 542 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 60:
#line 549 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 61:
#line 553 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 62:
#line 560 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 63:
#line 564 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 64:
#line 571 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 65:
#line 575 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 66:
#line 582 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  }
    break;
case 67:
#line 589 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 68:
#line 596 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 69:
#line 600 "rcparse.y"
{
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	      res_text_field = res_null_text;	
	    }
    break;
case 70:
#line 609 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 71:
#line 614 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 72:
#line 625 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 73:
#line 634 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 74:
#line 647 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].id, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 75:
#line 657 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 76:
#line 664 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 77:
#line 668 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 78:
#line 675 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 79:
#line 679 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = res_null_text;	
	    }
    break;
case 80:
#line 686 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 81:
#line 690 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 82:
#line 697 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 83:
#line 701 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 84:
#line 708 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  }
    break;
case 85:
#line 715 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 86:
#line 721 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 87:
#line 727 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 88:
#line 733 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 89:
#line 738 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 90:
#line 745 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  }
    break;
case 91:
#line 752 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	      res_text_field = res_null_text;	
	    }
    break;
case 92:
#line 759 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 93:
#line 763 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 94:
#line 770 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 95:
#line 774 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 96:
#line 780 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 97:
#line 784 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 98:
#line 791 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 99:
#line 795 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 100:
#line 802 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 101:
#line 806 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 102:
#line 813 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 103:
#line 817 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	      res_text_field = res_null_text;	
	    }
    break;
case 104:
#line 824 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 105:
#line 828 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	      res_text_field = yyvsp[0].id;	
	    }
    break;
case 106:
#line 835 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 107:
#line 840 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 108:
#line 842 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-13].id, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  }
    break;
case 109:
#line 857 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 110:
#line 869 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 111:
#line 880 "rcparse.y"
{
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 112:
#line 891 "rcparse.y"
{
	    res_string_to_id (&yyval.id, "");
	  }
    break;
case 113:
#line 895 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 114:
#line 900 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[0].s);
	  }
    break;
case 115:
#line 904 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[-1].s);
	  }
    break;
case 116:
#line 911 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 117:
#line 915 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
case 118:
#line 924 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 120:
#line 930 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
case 122:
#line 936 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 124:
#line 944 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 125:
#line 956 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 126:
#line 969 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 127:
#line 978 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 128:
#line 988 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 129:
#line 992 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 130:
#line 1009 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  }
    break;
case 131:
#line 1013 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;
case 132:
#line 1017 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 133:
#line 1024 "rcparse.y"
{
	    yyval.is = 0;
	  }
    break;
case 134:
#line 1028 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 135:
#line 1032 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 136:
#line 1039 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  }
    break;
case 137:
#line 1043 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  }
    break;
case 138:
#line 1047 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  }
    break;
case 139:
#line 1051 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  }
    break;
case 140:
#line 1055 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  }
    break;
case 141:
#line 1059 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  }
    break;
case 142:
#line 1068 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 143:
#line 1078 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 144:
#line 1082 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 145:
#line 1099 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  }
    break;
case 146:
#line 1103 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  }
    break;
case 147:
#line 1107 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  }
    break;
case 148:
#line 1111 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;
case 149:
#line 1115 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 150:
#line 1119 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 151:
#line 1123 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 152:
#line 1128 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  }
    break;
case 153:
#line 1137 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 154:
#line 1149 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 155:
#line 1161 "rcparse.y"
{
	    rcparse_rcdata ();
	  }
    break;
case 156:
#line 1165 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 157:
#line 1173 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  }
    break;
case 158:
#line 1178 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 159:
#line 1185 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 160:
#line 1193 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 161:
#line 1201 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 162:
#line 1210 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 163:
#line 1224 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 166:
#line 1231 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 167:
#line 1238 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 168:
#line 1251 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 169:
#line 1258 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 170:
#line 1270 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 171:
#line 1280 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  }
    break;
case 172:
#line 1286 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 173:
#line 1292 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 174:
#line 1298 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 175:
#line 1303 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 176:
#line 1308 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 177:
#line 1313 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 178:
#line 1318 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 179:
#line 1332 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  }
    break;
case 180:
#line 1336 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  }
    break;
case 181:
#line 1340 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  }
    break;
case 182:
#line 1347 "rcparse.y"
{
	    yyval.verstring = NULL;
	  }
    break;
case 183:
#line 1351 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  }
    break;
case 184:
#line 1358 "rcparse.y"
{
	    yyval.vervar = NULL;
	  }
    break;
case 185:
#line 1362 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  }
    break;
case 186:
#line 1371 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  }
    break;
case 187:
#line 1376 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 188:
#line 1392 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 189:
#line 1396 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 190:
#line 1400 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 191:
#line 1408 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 192:
#line 1413 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 193:
#line 1430 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 194:
#line 1437 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 195:
#line 1443 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 196:
#line 1448 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 197:
#line 1453 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  }
    break;
case 198:
#line 1463 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 199:
#line 1469 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 200:
#line 1480 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 201:
#line 1486 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 202:
#line 1498 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 203:
#line 1503 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  }
    break;
case 204:
#line 1508 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  }
    break;
case 205:
#line 1513 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  }
    break;
case 206:
#line 1518 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  }
    break;
case 207:
#line 1523 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  }
    break;
case 208:
#line 1528 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 209:
#line 1538 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 210:
#line 1542 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 211:
#line 1559 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 212:
#line 1563 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 213:
#line 1567 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 214:
#line 1571 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 215:
#line 1578 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 216:
#line 1582 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  }
    break;
case 217:
#line 1591 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 218:
#line 1595 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 219:
#line 1604 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 220:
#line 1613 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 221:
#line 1622 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 222:
#line 1626 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 223:
#line 1630 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 224:
#line 1635 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 225:
#line 1640 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 226:
#line 1645 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 227:
#line 1650 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 228:
#line 1655 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 229:
#line 1660 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 230:
#line 1665 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 231:
#line 1670 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 232:
#line 1675 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 233:
#line 1686 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 234:
#line 1695 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 235:
#line 1706 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 236:
#line 1710 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 237:
#line 1714 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 238:
#line 1719 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 239:
#line 1724 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 240:
#line 1729 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 241:
#line 1734 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 242:
#line 1739 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 243:
#line 1744 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 244:
#line 1749 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 245:
#line 1754 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1760 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (int lang)
{
  language = lang;
}
@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 3462
/* A Bison parser, made from rcparse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 58 "rcparse.y"
#ifndef YYSTYPE
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		484
#define	YYFLAG		-32768
#define	YYNTBASE	99

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   228,   229,   233,   234,   238,   239,   243,   244,   248,
     249,   253,   265,   278,   291,   305,   306,   310,   311,   315,
     316,   320,   321,   325,   326,   330,   337,   346,   357,   369,
     370,   374,   375,   379,   380,   384,   385,   389,   390,   394,
     395,   399,   400,   404,   405,   409,   410,   414,   415,   431,
     439,   449,   460,   461,   464,   466,   469,   470,   474,   475,
     479,   480,   484,   485,   489,   494,   499,   503,   510,   511,
     514,   519,   522,   529,   530,   534,   537,   539,   541,   543,
     545,   547,   549,   556,   557,   560,   563,   567,   573,   576,
     582,   589,   597,   607,   612,   619,   620,   623,   624,   626,
     628,   630,   634,   638,   639,   646,   647,   651,   656,   663,
     668,   675,   676,   683,   690,   694,   698,   702,   706,   710,
     711,   720,   728,   729,   735,   736,   740,   742,   744,   746,
     749,   752,   755,   757,   758,   761,   765,   770,   774,   775,
     778,   779,   782,   784,   786,   788,   790,   792,   794,   796,
     798,   800,   802,   805,   809,   814,   816,   820,   821,   823,
     826,   828,   830,   834,   837,   840,   844,   848,   852,   856,
     860,   864,   868,   872,   875,   877,   879,   883,   886,   890,
     894,   898,   902,   906,   910,   914
};
static const short yyrhs[] =
{
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   116,   137,     0,     0,    21,
     117,   137,     0,     0,    22,   118,   137,     0,     0,    38,
     119,   137,     0,     0,    23,   120,   137,     0,     0,    24,
     121,   137,     0,    10,   138,   184,   183,   140,   183,   183,
     183,   183,   182,   139,     0,    10,   138,   184,   183,   140,
     183,   183,   183,   183,   183,   183,   139,     0,    10,   138,
     184,    95,    80,   140,   183,   183,   183,   183,   182,   139,
       0,    10,   138,   184,    95,    80,   140,   183,   183,   183,
     183,   183,   183,   139,     0,     0,    25,   122,   137,     0,
       0,    26,   123,   137,     0,     0,    27,   124,   137,     0,
       0,    28,   125,   137,     0,     0,    39,   126,   137,     0,
      42,   174,   184,   183,   183,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   182,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   142,   183,   183,   139,     0,     0,
      40,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   129,   137,     0,     0,    31,   130,   137,     0,     0,
      32,   131,   137,     0,     0,    33,   132,   137,     0,     0,
      34,   133,   137,     0,     0,    35,   134,   137,     0,     0,
      36,   135,   137,     0,     0,    37,   174,   184,    95,   184,
      95,   184,    95,   184,    95,   184,    95,   136,   180,   182,
       0,   138,   184,   183,   183,   183,   183,   139,     0,   138,
     184,   183,   183,   183,   183,   144,   182,   139,     0,   138,
     184,   183,   183,   183,   183,   144,   183,   183,   139,     0,
       0,   187,    95,     0,    80,     0,    80,    95,     0,     0,
       3,   159,     4,     0,     0,    95,   141,   180,     0,     0,
      95,   143,   180,     0,     0,    95,   145,   180,     0,   172,
      41,   176,   179,     0,   172,    42,   176,   179,     0,    43,
     184,   183,     0,   172,    46,   175,     3,   150,     4,     0,
       0,   150,   151,     0,    48,    80,   183,   152,     0,    48,
      49,     0,    50,    80,   152,     3,   150,     4,     0,     0,
     152,    95,   153,     0,   152,   153,     0,    51,     0,    52,
       0,    53,     0,    54,     0,    55,     0,    56,     0,   172,
      47,   175,     3,   155,     4,     0,     0,   155,   156,     0,
      48,    80,     0,    48,    80,   183,     0,    48,    80,   183,
     183,   182,     0,    48,    49,     0,    50,    80,     3,   155,
       4,     0,    50,    80,   183,     3,   155,     4,     0,    50,
      80,   183,   183,     3,   155,     4,     0,    50,    80,   183,
     183,   183,   182,     3,   155,     4,     0,   172,    57,   177,
     179,     0,   172,    58,   175,     3,   159,     4,     0,     0,
     160,   161,     0,     0,   162,     0,    83,     0,   185,     0,
     162,    95,    83,     0,   162,    95,   185,     0,     0,    59,
     175,     3,   164,   165,     4,     0,     0,   165,   184,    80,
       0,   165,   184,    95,    80,     0,   172,   172,   175,     3,
     159,     4,     0,   172,   172,   175,   179,     0,   172,    60,
     168,     3,   169,     4,     0,     0,   168,    61,   184,   183,
     183,   183,     0,   168,    62,   184,   183,   183,   183,     0,
     168,    63,   184,     0,   168,    64,   184,     0,   168,    65,
     184,     0,   168,    66,   184,     0,   168,    67,   184,     0,
       0,   169,    68,     3,    71,     3,   170,     4,     4,     0,
     169,    69,     3,    70,    80,   171,     4,     0,     0,   170,
      70,    80,    95,    80,     0,     0,   171,   183,   183,     0,
     187,     0,    81,     0,    80,     0,    80,    95,     0,    81,
      95,     0,   187,    95,     0,   173,     0,     0,   175,   178,
       0,   175,    44,   184,     0,   175,    43,   184,   183,     0,
     175,    45,   184,     0,     0,   176,   178,     0,     0,   177,
     178,     0,    72,     0,    73,     0,    74,     0,    75,     0,
      76,     0,    77,     0,    78,     0,    80,     0,    81,     0,
     181,     0,    79,   181,     0,   180,    85,   181,     0,   180,
      85,    79,   181,     0,    82,     0,    97,   184,    98,     0,
       0,   183,     0,    95,   184,     0,   185,     0,    82,     0,
      97,   185,    98,     0,    93,   185,     0,    89,   185,     0,
     185,    90,   185,     0,   185,    91,   185,     0,   185,    92,
     185,     0,   185,    88,   185,     0,   185,    89,   185,     0,
     185,    87,   185,     0,   185,    86,   185,     0,   185,    85,
     185,     0,    95,   187,     0,   188,     0,    82,     0,    97,
     185,    98,     0,    93,   185,     0,   188,    90,   185,     0,
     188,    91,   185,     0,   188,    92,   185,     0,   188,    88,
     185,     0,   188,    89,   185,     0,   188,    87,   185,     0,
     188,    86,   185,     0,   188,    85,   185,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   154,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   175,   185,   190,
     210,   216,   227,   249,   258,   263,   268,   274,   279,   284,
     288,   292,   296,   304,   316,   328,   328,   354,   354,   381,
     381,   411,   416,   422,   424,   430,   434,   439,   443,   447,
     460,   475,   490,   505,   509,   513,   517,   523,   525,   535,
     535,   546,   546,   556,   556,   566,   566,   579,   579,   589,
     589,   599,   610,   619,   632,   643,   643,   653,   653,   663,
     663,   673,   673,   683,   683,   696,   701,   707,   713,   719,
     719,   732,   732,   742,   742,   752,   752,   762,   762,   772,
     772,   782,   782,   792,   792,   802,   802,   812,   812,   829,
     842,   853,   864,   869,   874,   878,   884,   889,   897,   897,
     903,   903,   909,   909,   917,   929,   942,   951,   961,   966,
     982,   987,   991,   997,  1002,  1006,  1012,  1017,  1021,  1025,
    1029,  1033,  1041,  1051,  1056,  1072,  1077,  1081,  1085,  1089,
    1093,  1097,  1101,  1110,  1122,  1135,  1135,  1146,  1152,  1158,
    1167,  1175,  1184,  1197,  1197,  1203,  1205,  1212,  1224,  1232,
    1243,  1253,  1260,  1266,  1272,  1277,  1282,  1287,  1292,  1305,
    1310,  1314,  1320,  1325,  1331,  1336,  1344,  1350,  1365,  1370,
    1374,  1381,  1387,  1403,  1411,  1417,  1422,  1427,  1436,  1443,
    1453,  1460,  1471,  1477,  1482,  1487,  1492,  1497,  1502,  1511,
    1516,  1532,  1537,  1541,  1545,  1551,  1556,  1564,  1569,  1577,
    1586,  1595,  1600,  1604,  1609,  1614,  1619,  1624,  1629,  1634,
    1639,  1644,  1649,  1659,  1668,  1679,  1684,  1688,  1693,  1698,
    1703,  1708,  1713,  1718,  1723,  1728
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
  "control_params", "optresidc", "opt_control_data", "control_styleexpr", 
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   138,   139,   139,   141,   140,
     143,   142,   145,   144,   146,   147,   148,   149,   150,   150,
     151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   154,   155,   155,   156,   156,   156,   156,   156,
     156,   156,   156,   157,   158,   160,   159,   161,   161,   162,
     162,   162,   162,   164,   163,   165,   165,   165,   166,   166,
     167,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     169,   169,   170,   170,   171,   171,   172,   172,   173,   173,
     173,   174,   174,   175,   175,   175,   175,   175,   176,   176,
     177,   177,   178,   178,   178,   178,   178,   178,   178,   179,
     179,   180,   180,   180,   180,   181,   181,   182,   182,   183,
     184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   186,   187,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,    11,    12,    12,    13,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     6,     8,    10,    11,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     0,    15,     7,
       9,    10,     0,     2,     1,     2,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     6,     0,     2,     0,     1,     1,
       1,     3,     3,     0,     6,     0,     3,     4,     6,     4,
       6,     0,     6,     6,     3,     3,     3,     3,     3,     0,
       8,     7,     0,     5,     0,     3,     1,     1,     1,     2,
       2,     2,     1,     0,     2,     3,     4,     3,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     4,     1,     3,     0,     1,     2,
       1,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     1,     1,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,   193,   187,   235,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   186,   234,   221,     0,     0,     0,
       0,   220,     0,   237,     0,   193,   200,   198,   200,   200,
     198,   198,   193,   193,   200,   193,   171,   193,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   223,     0,     0,
     126,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,     0,     0,   202,   203,   204,   205,   206,   207,   208,
     194,   236,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   245,   244,   243,   241,   242,
     238,   239,   240,   222,   219,   232,   231,   230,   228,   229,
     225,   226,   227,   165,     0,   195,   197,    18,   209,   210,
     201,    33,   199,    34,     0,     0,     0,   124,   125,   128,
     143,   153,   155,   179,     0,     0,     0,     0,     0,     0,
       0,   155,   169,     0,   196,     0,     0,     0,     0,     0,
       0,     0,   157,     0,     0,     0,   174,   175,   176,   177,
     178,     0,   164,     0,    17,    22,    19,     0,    23,    42,
       0,     0,   127,     0,     0,   129,   142,     0,     0,   144,
     154,   159,   156,   158,   160,   170,     0,     0,     0,     0,
     168,   166,     0,     0,    20,     0,     0,   131,     0,   133,
     148,   145,     0,     0,     0,     0,     0,     0,   167,   233,
       0,    35,    37,   133,     0,   146,   143,     0,   161,   162,
       0,     0,   172,   173,    27,    28,    29,    30,    31,    32,
      21,    24,    43,    43,    39,   130,   128,   136,   137,   138,
     139,   140,   141,     0,   135,   217,     0,   143,     0,   182,
     184,     0,    26,     0,     0,    43,     0,   134,   147,   218,
     149,     0,   143,   217,     0,     0,    25,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    57,     0,   132,
     150,     0,     0,     0,     0,   181,     0,     0,    47,    44,
      48,    45,     0,   215,     0,    46,   211,     0,     0,    54,
      56,    53,     0,    57,   151,   143,   180,     0,   185,    36,
     112,    59,    61,    63,    67,    69,    75,    77,    79,    81,
      91,    93,    95,    97,    99,   101,   103,   105,     0,    65,
      83,    89,     0,    58,   212,     0,     0,     0,    55,    38,
       0,     0,     0,   114,     0,     0,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   188,     0,   192,     0,     0,   112,   112,
     112,     0,   216,     0,   213,    49,    40,   152,   183,   115,
       0,   113,    60,     0,    62,    64,    68,    70,    76,    78,
      80,    82,    92,    94,    96,    98,   100,   102,   104,   106,
     189,   190,     0,   191,    66,    84,    90,     0,   214,    50,
       0,     0,     0,     0,     0,    51,     0,   118,     0,     0,
       0,   116,    52,     0,     0,     0,     0,     0,   155,    85,
       0,     0,   119,     0,     0,     0,     0,   116,     0,     0,
     116,     0,   117,   120,    86,   217,     0,   217,   122,   109,
     217,     0,     0,   116,   218,   217,   116,   218,     0,   116,
     218,     0,   121,    87,   116,   116,   218,    71,   116,   123,
     110,   116,     0,    88,    73,   116,    72,   111,   107,    74,
       0,   217,   108,     0,     0
};

static const short yydefgoto[] =
{
       1,     9,   145,   166,   167,   230,   231,    10,    11,    12,
     232,   233,   255,   125,   253,   287,   333,   346,   347,   348,
     368,   349,   350,   351,   352,   353,   354,   369,   370,   355,
     356,   357,   358,   359,   360,   361,   362,   480,   382,   383,
     429,   418,   424,   445,   452,   450,   458,    13,    14,    15,
      16,   149,   175,   214,   244,    17,   150,   179,    18,    19,
     151,   152,   182,   183,    20,   113,   143,    21,    22,    93,
     153,   264,   265,    23,   365,   366,    32,    84,    83,    80,
     121,   295,   296,   258,   259,   104,    31,   194,   345,    25
};

static const short yypact[] =
{
  -32768,    12,   432,-32768,-32768,-32768,-32768,   432,   432,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   155,-32768,   490,-32768,   432,   432,   432,
     -80,   528,   235,-32768,   561,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   432,   432,
     432,   432,   432,   432,   432,   432,-32768,-32768,   620,   432,
  -32768,   432,   432,   432,   432,   432,   432,   432,   432,-32768,
     432,   432,   432,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   373,   647,   647,   157,   157,   647,   647,   409,
     417,   647,   424,    89,   224,   643,   649,   193,   113,   113,
  -32768,-32768,-32768,-32768,-32768,   643,   649,   193,   113,   113,
  -32768,-32768,-32768,-32768,   -80,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -43,   221,   221,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   432,   432,   432,   432,   432,   432,
     432,-32768,-32768,     6,-32768,     4,   432,   -80,   -80,    35,
      39,    50,   168,     5,   -80,   -80,-32768,-32768,-32768,-32768,
  -32768,    63,-32768,   -60,-32768,-32768,-32768,    -4,-32768,-32768,
     -80,   -80,-32768,   -36,    27,-32768,-32768,    -8,    36,-32768,
  -32768,-32768,-32768,     9,   528,-32768,   124,   142,   -80,   -80,
  -32768,-32768,    77,   221,    64,   -80,   -80,-32768,   -80,-32768,
  -32768,   -80,    11,   289,    90,    96,   -80,   -80,-32768,-32768,
     736,-32768,   -80,-32768,    24,   -80,-32768,    13,-32768,   528,
     177,    95,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      22,-32768,-32768,-32768,-32768,   191,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   697,-32768,   -80,    62,-32768,    16,-32768,
  -32768,   736,-32768,   314,   322,-32768,    78,-32768,-32768,-32768,
  -32768,   159,-32768,   -80,    32,     3,-32768,-32768,   432,   109,
     255,   102,   432,   432,   432,   432,   280,-32768,   500,-32768,
  -32768,   172,   195,   190,   126,-32768,   -80,   527,-32768,-32768,
  -32768,-32768,    43,-32768,   432,   131,-32768,   122,   -80,-32768,
  -32768,-32768,   564,-32768,-32768,-32768,-32768,   123,-32768,-32768,
     427,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   383,-32768,
  -32768,-32768,   383,-32768,-32768,   121,   129,   148,-32768,-32768,
     601,   175,   160,   144,   432,   161,   427,   427,   427,   427,
     427,   427,   427,   427,   427,   427,   427,   427,   427,   427,
     427,   427,   427,   163,   165,-32768,   432,   169,   427,   427,
     427,   432,-32768,    43,-32768,   -80,-32768,-32768,-32768,-32768,
     180,-32768,-32768,   432,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   181,-32768,-32768,-32768,-32768,   -80,-32768,   -80,
     307,   182,   -80,   432,   -80,   -80,   182,-32768,   -80,   -80,
     194,    18,-32768,   -80,   102,   -80,   -80,   432,-32768,-32768,
     -80,   -80,   131,   -80,   -80,   196,   286,    19,   -80,   -80,
      20,   432,-32768,-32768,-32768,   -80,   -80,   -80,-32768,-32768,
     -80,   199,   102,   260,   -80,   -80,   260,   -80,   102,   260,
     -80,   432,   131,-32768,   260,   260,   -80,-32768,   260,   131,
  -32768,   260,   200,-32768,-32768,   260,-32768,-32768,-32768,-32768,
     102,    44,-32768,   306,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,  -213,-32768,-32768,-32768,
  -32768,-32768,-32768,   229,  -199,  -155,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   334,    10,
     205,   -97,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    85,-32768,   114,    79,-32768,  -205,-32768,-32768,-32768,
    -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,     2,   281,    80,   215,   387,
     259,  -266,  -255,  -260,   -24,    -2,    -3,-32768,    17,-32768
};


#define	YYLAST		753


static const short yytable[] =
{
      30,   161,    47,   282,    33,    34,    60,   285,   164,   185,
     162,   246,   483,   197,   216,    59,   247,   252,    24,   262,
     191,   428,   428,   428,    56,    57,    58,   236,   224,   225,
     226,   227,   228,   229,   254,   192,   283,   334,   266,   172,
      24,   200,   261,   176,   198,    95,    96,    97,    98,    99,
     100,   101,   102,   146,   180,     2,   278,   281,   105,   106,
     107,   108,   109,   110,   111,   112,   260,   190,   114,   115,
     116,     3,   201,   186,   187,   237,   238,   239,   240,   241,
     242,   374,   279,   173,   165,   174,     5,   177,    26,   178,
     144,   193,   133,     4,     5,    27,     6,     7,    59,    28,
     341,     8,   284,    29,   203,     7,    59,   199,    59,     8,
     177,    59,   178,    59,   443,   448,   202,   251,   408,   243,
      87,    88,   302,   170,   171,   293,   173,   204,   174,   336,
     188,   189,   154,   155,   156,   157,   158,   159,   160,    59,
     294,   163,   147,   148,   169,   205,   195,   196,   340,   184,
     134,   135,   136,   137,   138,   139,   140,   208,   432,   210,
      35,   220,   168,   280,   206,   207,   221,    36,    37,    38,
      39,   211,   212,   124,   213,   250,   304,   215,   217,   377,
     249,   292,   222,   223,   293,   453,   462,   456,   234,   289,
     459,   245,   469,   248,   306,   465,    40,    41,   305,   294,
     219,    42,    43,    66,    67,    68,   307,   177,   373,   178,
     209,   293,    44,    45,   481,    46,   336,   337,   342,   372,
     177,   482,   178,   177,   263,   178,   294,   141,   375,    73,
      74,    75,    76,    77,    78,    79,     4,     5,    69,   379,
     378,   286,   237,   238,   239,   240,   241,   242,     7,   291,
      26,   181,     8,    85,    86,   301,   381,    27,   400,    91,
     401,    28,   308,   428,   403,    29,   288,    70,    71,    72,
     297,   298,   299,   300,   338,   410,   413,   417,    70,    71,
      72,    64,    65,    66,    67,    68,   243,    24,   436,   427,
     442,   441,   335,    24,   461,   478,    73,    74,    75,    76,
      77,    78,    79,     5,   118,   119,   484,    73,    74,    75,
      76,    77,    78,    79,     7,   126,    82,   267,     8,   423,
     344,   256,   257,    89,    90,   277,    92,   235,    94,     0,
     268,   269,   270,   271,   371,   290,     4,     5,   268,   269,
     270,   271,   380,   123,     0,   367,   127,   128,     7,   367,
     131,   409,     8,   142,     0,   272,   411,   273,   274,   275,
     276,     4,     5,   272,   402,   273,   274,   275,   276,   407,
       0,    26,   218,     7,     0,     0,   117,     8,    27,     0,
       0,   412,    28,   414,     0,   415,    29,   416,   419,    26,
     421,   422,     0,     0,   425,   426,    27,   430,     0,   431,
      28,   433,   434,     0,    29,     0,   437,   438,     0,   439,
     440,   420,   129,     0,   446,   447,    70,    71,    72,     0,
     130,   454,   455,   457,     0,   435,   460,   132,     0,     0,
     464,   466,     0,   468,     0,     0,   471,     0,     0,   451,
       0,     0,   475,     0,     0,    73,    74,    75,    76,    77,
      78,    79,    70,    71,    72,     0,     0,     0,     0,   472,
      70,    71,    72,   363,   364,     5,     0,    70,    71,    72,
     120,   122,   120,   120,   122,   122,     7,     0,   120,     0,
       8,    73,    74,    75,    76,    77,    78,    79,     0,    73,
      74,    75,    76,    77,    78,    79,    73,    74,    75,    76,
      77,    78,    79,   303,     0,     0,     0,   343,     0,     5,
       0,     0,     0,     0,    26,     0,   268,   269,   270,   271,
       7,    27,     0,     0,     8,    28,     0,     0,     0,    29,
       0,   309,     0,     0,     0,     0,     0,   310,     0,     0,
       0,   272,     0,   273,   274,   275,   276,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   339,   332,
       0,     0,     0,     0,   310,    48,    49,    50,    51,    52,
      53,    54,    55,     0,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   376,   332,     0,     0,     0,
       0,   310,     0,    61,    62,    63,    64,    65,    66,    67,
      68,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   444,   332,     0,   449,    61,    62,    63,    64,
      65,    66,    67,    68,     0,     0,     0,     0,   463,    81,
       0,   467,     0,     0,   470,     0,     0,     0,     0,   473,
     474,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     479,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,   404,   405,   406,    61,    62,    63,    64,    65,
      66,    67,    68,     0,     0,     0,     0,     0,   103,    73,
      74,    75,    76,    77,    78,    79,     0,   118,   119,    62,
      63,    64,    65,    66,    67,    68,    63,    64,    65,    66,
      67,    68,   224,   225,   226,   227,   228,   229,   237,   238,
     239,   240,   241,   242
};

static const short yycheck[] =
{
       2,   141,    23,   263,     7,     8,    30,     4,     4,     4,
       4,   216,     0,    49,     3,    95,     3,   230,     1,     3,
      80,     3,     3,     3,    27,    28,    29,     3,     6,     7,
       8,     9,    10,    11,   233,    95,     4,   292,   251,     4,
      23,    49,   247,     4,    80,    48,    49,    50,    51,    52,
      53,    54,    55,    96,     4,    43,   255,   262,    61,    62,
      63,    64,    65,    66,    67,    68,     4,     4,    70,    71,
      72,    59,    80,    68,    69,    51,    52,    53,    54,    55,
      56,   336,     4,    48,    80,    50,    82,    48,    82,    50,
     114,    95,     3,    81,    82,    89,    84,    93,    95,    93,
     305,    97,    70,    97,    95,    93,    95,    80,    95,    97,
      48,    95,    50,    95,    95,    95,    80,    95,   373,    95,
      40,    41,   277,   147,   148,    82,    48,     3,    50,    85,
     154,   155,   134,   135,   136,   137,   138,   139,   140,    95,
      97,   143,   125,   126,   146,     3,   170,   171,   303,   152,
      61,    62,    63,    64,    65,    66,    67,    80,   424,    95,
       5,    71,   145,     4,   188,   189,    70,    12,    13,    14,
      15,   195,   196,    16,   198,    80,     4,   201,   202,     4,
       3,    79,   206,   207,    82,   445,   452,   447,   212,    80,
     450,   215,   458,   217,     4,   455,    41,    42,     3,    97,
     203,    46,    47,    90,    91,    92,    80,    48,    79,    50,
     193,    82,    57,    58,   480,    60,    85,    95,    95,    98,
      48,   481,    50,    48,   248,    50,    97,     3,    80,    72,
      73,    74,    75,    76,    77,    78,    81,    82,     3,    95,
      80,   265,    51,    52,    53,    54,    55,    56,    93,   270,
      82,    83,    97,    38,    39,   276,    95,    89,    95,    44,
      95,    93,   286,     3,    95,    97,   268,    43,    44,    45,
     272,   273,   274,   275,   298,    95,    95,    95,    43,    44,
      45,    88,    89,    90,    91,    92,    95,   270,   428,    95,
       4,    95,   294,   276,    95,    95,    72,    73,    74,    75,
      76,    77,    78,    82,    80,    81,     0,    72,    73,    74,
      75,    76,    77,    78,    93,    86,    35,     3,    97,   416,
     310,   236,   243,    42,    43,     3,    45,   213,    47,    -1,
      16,    17,    18,    19,   332,    80,    81,    82,    16,    17,
      18,    19,   344,    84,    -1,   328,    87,    88,    93,   332,
      91,   375,    97,    94,    -1,    41,   380,    43,    44,    45,
      46,    81,    82,    41,   366,    43,    44,    45,    46,   371,
      -1,    82,    83,    93,    -1,    -1,     3,    97,    89,    -1,
      -1,   383,    93,   407,    -1,   409,    97,    80,   412,    82,
     414,   415,    -1,    -1,   418,   419,    89,   421,    -1,   423,
      93,   425,   426,    -1,    97,    -1,   430,   431,    -1,   433,
     434,   413,     3,    -1,   438,   439,    43,    44,    45,    -1,
       3,   445,   446,   447,    -1,   427,   450,     3,    -1,    -1,
     454,   455,    -1,   457,    -1,    -1,   460,    -1,    -1,   441,
      -1,    -1,   466,    -1,    -1,    72,    73,    74,    75,    76,
      77,    78,    43,    44,    45,    -1,    -1,    -1,    -1,   461,
      43,    44,    45,    80,    81,    82,    -1,    43,    44,    45,
      83,    84,    85,    86,    87,    88,    93,    -1,    91,    -1,
      97,    72,    73,    74,    75,    76,    77,    78,    -1,    72,
      73,    74,    75,    76,    77,    78,    72,    73,    74,    75,
      76,    77,    78,     3,    -1,    -1,    -1,    80,    -1,    82,
      -1,    -1,    -1,    -1,    82,    -1,    16,    17,    18,    19,
      93,    89,    -1,    -1,    97,    93,    -1,    -1,    -1,    97,
      -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
      -1,    41,    -1,    43,    44,    45,    46,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     4,    42,
      -1,    -1,    -1,    -1,    10,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     4,    42,    -1,    -1,    -1,
      -1,    10,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,   437,    42,    -1,   440,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,   453,    98,
      -1,   456,    -1,    -1,   459,    -1,    -1,    -1,    -1,   464,
     465,    -1,    -1,   468,    -1,    -1,   471,    -1,    -1,    -1,
     475,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,    -1,   368,   369,   370,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    86,
      87,    88,    89,    90,    91,    92,    87,    88,    89,    90,
      91,    92,     6,     7,     8,     9,    10,    11,    51,    52,
      53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 17:
#line 177 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 18:
#line 187 "rcparse.y"
{
	    yyval.pacc = NULL;
	  }
    break;
case 19:
#line 191 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  }
    break;
case 20:
#line 212 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  }
    break;
case 21:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;
case 22:
#line 229 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;
case 23:
#line 250 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  }
    break;
case 24:
#line 260 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
case 25:
#line 264 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 26:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 27:
#line 276 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  }
    break;
case 28:
#line 280 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  }
    break;
case 29:
#line 285 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  }
    break;
case 30:
#line 289 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  }
    break;
case 31:
#line 293 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  }
    break;
case 32:
#line 297 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  }
    break;
case 33:
#line 306 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 34:
#line 318 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 35:
#line 331 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 36:
#line 348 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 37:
#line 356 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 38:
#line 375 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 39:
#line 383 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	      style = 0;
	    }
    break;
case 40:
#line 403 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 41:
#line 413 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 42:
#line 417 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 44:
#line 425 "rcparse.y"
{
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  }
    break;
case 45:
#line 431 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  }
    break;
case 46:
#line 436 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
case 47:
#line 440 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
    break;
case 48:
#line 444 "rcparse.y"
{
	    res_string_to_id (& dialog.class, yyvsp[0].s);
	  }
    break;
case 49:
#line 448 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 50:
#line 461 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 51:
#line 476 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 52:
#line 491 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
	  }
    break;
case 53:
#line 506 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  }
    break;
case 54:
#line 510 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 55:
#line 514 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 518 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  }
    break;
case 58:
#line 526 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  }
    break;
case 59:
#line 537 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 60:
#line 543 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 61:
#line 547 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 62:
#line 553 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 63:
#line 557 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 64:
#line 563 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 65:
#line 567 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 66:
#line 573 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  }
    break;
case 67:
#line 580 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 68:
#line 586 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 69:
#line 590 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    }
    break;
case 70:
#line 596 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 71:
#line 601 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 72:
#line 612 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 73:
#line 621 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 74:
#line 634 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].id, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 75:
#line 644 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    }
    break;
case 76:
#line 650 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 77:
#line 654 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 78:
#line 660 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 79:
#line 664 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 80:
#line 670 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 81:
#line 674 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 82:
#line 680 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 83:
#line 684 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 84:
#line 690 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  }
    break;
case 85:
#line 697 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 86:
#line 703 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 87:
#line 709 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 88:
#line 715 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 89:
#line 720 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 90:
#line 726 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  }
    break;
case 91:
#line 733 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    }
    break;
case 92:
#line 739 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 93:
#line 743 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    }
    break;
case 94:
#line 749 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 95:
#line 753 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 96:
#line 759 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 97:
#line 763 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 98:
#line 769 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 99:
#line 773 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 100:
#line 779 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 101:
#line 783 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    }
    break;
case 102:
#line 789 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 103:
#line 793 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    }
    break;
case 104:
#line 799 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 105:
#line 803 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 106:
#line 809 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 107:
#line 814 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 108:
#line 816 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-13].id, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  }
    break;
case 109:
#line 832 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 110:
#line 844 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 111:
#line 855 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 112:
#line 866 "rcparse.y"
{
	    res_string_to_id (&yyval.id, "");
	  }
    break;
case 113:
#line 870 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 114:
#line 875 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[0].s);
	  }
    break;
case 115:
#line 879 "rcparse.y"
{
	    res_string_to_id (&yyval.id, yyvsp[-1].s);
	  }
    break;
case 116:
#line 886 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 117:
#line 890 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
case 118:
#line 899 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 120:
#line 905 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
case 122:
#line 911 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 124:
#line 919 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 125:
#line 931 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 126:
#line 944 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 127:
#line 953 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 128:
#line 963 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 129:
#line 967 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 130:
#line 984 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  }
    break;
case 131:
#line 988 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;
case 132:
#line 992 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 133:
#line 999 "rcparse.y"
{
	    yyval.is = 0;
	  }
    break;
case 134:
#line 1003 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 135:
#line 1007 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 136:
#line 1014 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  }
    break;
case 137:
#line 1018 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  }
    break;
case 138:
#line 1022 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  }
    break;
case 139:
#line 1026 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  }
    break;
case 140:
#line 1030 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  }
    break;
case 141:
#line 1034 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  }
    break;
case 142:
#line 1043 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 143:
#line 1053 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 144:
#line 1057 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 145:
#line 1074 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  }
    break;
case 146:
#line 1078 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  }
    break;
case 147:
#line 1082 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  }
    break;
case 148:
#line 1086 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;
case 149:
#line 1090 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 150:
#line 1094 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 151:
#line 1098 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 152:
#line 1103 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  }
    break;
case 153:
#line 1112 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 154:
#line 1124 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 155:
#line 1136 "rcparse.y"
{
	    rcparse_rcdata ();
	  }
    break;
case 156:
#line 1140 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 157:
#line 1148 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  }
    break;
case 158:
#line 1153 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 159:
#line 1160 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 160:
#line 1168 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 161:
#line 1176 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 162:
#line 1185 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 163:
#line 1199 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 166:
#line 1206 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 167:
#line 1213 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 168:
#line 1226 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 169:
#line 1233 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 170:
#line 1245 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 171:
#line 1255 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  }
    break;
case 172:
#line 1261 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 173:
#line 1267 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 174:
#line 1273 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 175:
#line 1278 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 176:
#line 1283 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 177:
#line 1288 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 178:
#line 1293 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 179:
#line 1307 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  }
    break;
case 180:
#line 1311 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  }
    break;
case 181:
#line 1315 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  }
    break;
case 182:
#line 1322 "rcparse.y"
{
	    yyval.verstring = NULL;
	  }
    break;
case 183:
#line 1326 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  }
    break;
case 184:
#line 1333 "rcparse.y"
{
	    yyval.vervar = NULL;
	  }
    break;
case 185:
#line 1337 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  }
    break;
case 186:
#line 1346 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  }
    break;
case 187:
#line 1351 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 188:
#line 1367 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 189:
#line 1371 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 190:
#line 1375 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 191:
#line 1383 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 192:
#line 1388 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 193:
#line 1405 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 194:
#line 1412 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 195:
#line 1418 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 196:
#line 1423 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 197:
#line 1428 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  }
    break;
case 198:
#line 1438 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 199:
#line 1444 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 200:
#line 1455 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 201:
#line 1461 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 202:
#line 1473 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 203:
#line 1478 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  }
    break;
case 204:
#line 1483 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  }
    break;
case 205:
#line 1488 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  }
    break;
case 206:
#line 1493 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  }
    break;
case 207:
#line 1498 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  }
    break;
case 208:
#line 1503 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 209:
#line 1513 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 210:
#line 1517 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 211:
#line 1534 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 212:
#line 1538 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 213:
#line 1542 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 214:
#line 1546 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 215:
#line 1553 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 216:
#line 1557 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  }
    break;
case 217:
#line 1566 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 218:
#line 1570 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 219:
#line 1579 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 220:
#line 1588 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 221:
#line 1597 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 222:
#line 1601 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 223:
#line 1605 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 224:
#line 1610 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 225:
#line 1615 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 226:
#line 1620 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 227:
#line 1625 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 228:
#line 1630 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 229:
#line 1635 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 230:
#line 1640 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 231:
#line 1645 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 232:
#line 1650 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 233:
#line 1661 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 234:
#line 1670 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 235:
#line 1681 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 236:
#line 1685 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 237:
#line 1689 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 238:
#line 1694 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 239:
#line 1699 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 240:
#line 1704 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 241:
#line 1709 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 242:
#line 1714 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 243:
#line 1719 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 244:
#line 1724 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 245:
#line 1729 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1735 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@


1.1.8.1
log
@Add generated files.
@
text
@a0 3447
/* A Bison parser, made from rcparse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 58 "rcparse.y"
#ifndef YYSTYPE
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		483
#define	YYFLAG		-32768
#define	YYNTBASE	99

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   228,   229,   233,   234,   238,   239,   243,   244,   248,
     249,   253,   265,   278,   291,   305,   306,   310,   311,   315,
     316,   320,   321,   325,   326,   330,   337,   346,   357,   369,
     370,   374,   375,   379,   380,   384,   385,   389,   390,   394,
     395,   399,   400,   404,   405,   409,   410,   414,   415,   432,
     440,   450,   461,   462,   464,   467,   468,   472,   473,   477,
     478,   482,   483,   487,   492,   497,   501,   508,   509,   512,
     517,   520,   527,   528,   532,   535,   537,   539,   541,   543,
     545,   547,   554,   555,   558,   561,   565,   571,   574,   580,
     587,   595,   605,   610,   617,   618,   621,   622,   624,   626,
     628,   632,   636,   637,   644,   645,   649,   654,   661,   666,
     673,   674,   681,   688,   692,   696,   700,   704,   708,   709,
     718,   726,   727,   733,   734,   738,   740,   742,   744,   747,
     750,   753,   755,   756,   759,   763,   768,   772,   773,   776,
     777,   780,   782,   784,   786,   788,   790,   792,   794,   796,
     798,   800,   803,   807,   812,   814,   818,   819,   821,   824,
     826,   828,   832,   835,   838,   842,   846,   850,   854,   858,
     862,   866,   870,   873,   875,   877,   881,   884,   888,   892,
     896,   900,   904,   908,   912
};
static const short yyrhs[] =
{
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   116,   137,     0,     0,    21,
     117,   137,     0,     0,    22,   118,   137,     0,     0,    38,
     119,   137,     0,     0,    23,   120,   137,     0,     0,    24,
     121,   137,     0,    10,   138,   184,   183,   140,   183,   183,
     183,   183,   182,   139,     0,    10,   138,   184,   183,   140,
     183,   183,   183,   183,   183,   183,   139,     0,    10,   138,
     184,    95,    80,   140,   183,   183,   183,   183,   182,   139,
       0,    10,   138,   184,    95,    80,   140,   183,   183,   183,
     183,   183,   183,   139,     0,     0,    25,   122,   137,     0,
       0,    26,   123,   137,     0,     0,    27,   124,   137,     0,
       0,    28,   125,   137,     0,     0,    39,   126,   137,     0,
      42,   174,   184,   183,   183,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   182,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   142,   183,   183,   139,     0,     0,
      40,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   129,   137,     0,     0,    31,   130,   137,     0,     0,
      32,   131,   137,     0,     0,    33,   132,   137,     0,     0,
      34,   133,   137,     0,     0,    35,   134,   137,     0,     0,
      36,   135,   137,     0,     0,    37,    80,    95,   184,    95,
     184,    95,   184,    95,   184,    95,   184,    95,   136,   180,
     182,     0,   138,   184,   183,   183,   183,   183,   139,     0,
     138,   184,   183,   183,   183,   183,   144,   182,   139,     0,
     138,   184,   183,   183,   183,   183,   144,   183,   183,   139,
       0,     0,    80,     0,    80,    95,     0,     0,     3,   159,
       4,     0,     0,    95,   141,   180,     0,     0,    95,   143,
     180,     0,     0,    95,   145,   180,     0,   172,    41,   176,
     179,     0,   172,    42,   176,   179,     0,    43,   184,   183,
       0,   172,    46,   175,     3,   150,     4,     0,     0,   150,
     151,     0,    48,    80,   183,   152,     0,    48,    49,     0,
      50,    80,   152,     3,   150,     4,     0,     0,   152,    95,
     153,     0,   152,   153,     0,    51,     0,    52,     0,    53,
       0,    54,     0,    55,     0,    56,     0,   172,    47,   175,
       3,   155,     4,     0,     0,   155,   156,     0,    48,    80,
       0,    48,    80,   183,     0,    48,    80,   183,   183,   182,
       0,    48,    49,     0,    50,    80,     3,   155,     4,     0,
      50,    80,   183,     3,   155,     4,     0,    50,    80,   183,
     183,     3,   155,     4,     0,    50,    80,   183,   183,   183,
     182,     3,   155,     4,     0,   172,    57,   177,   179,     0,
     172,    58,   175,     3,   159,     4,     0,     0,   160,   161,
       0,     0,   162,     0,    83,     0,   185,     0,   162,    95,
      83,     0,   162,    95,   185,     0,     0,    59,   175,     3,
     164,   165,     4,     0,     0,   165,   184,    80,     0,   165,
     184,    95,    80,     0,   172,   172,   175,     3,   159,     4,
       0,   172,   172,   175,   179,     0,   172,    60,   168,     3,
     169,     4,     0,     0,   168,    61,   184,   183,   183,   183,
       0,   168,    62,   184,   183,   183,   183,     0,   168,    63,
     184,     0,   168,    64,   184,     0,   168,    65,   184,     0,
     168,    66,   184,     0,   168,    67,   184,     0,     0,   169,
      68,     3,    71,     3,   170,     4,     4,     0,   169,    69,
       3,    70,    80,   171,     4,     0,     0,   170,    70,    80,
      95,    80,     0,     0,   171,   183,   183,     0,   187,     0,
      81,     0,    80,     0,    80,    95,     0,    81,    95,     0,
     187,    95,     0,   173,     0,     0,   175,   178,     0,   175,
      44,   184,     0,   175,    43,   184,   183,     0,   175,    45,
     184,     0,     0,   176,   178,     0,     0,   177,   178,     0,
      72,     0,    73,     0,    74,     0,    75,     0,    76,     0,
      77,     0,    78,     0,    80,     0,    81,     0,   181,     0,
      79,   181,     0,   180,    85,   181,     0,   180,    85,    79,
     181,     0,    82,     0,    97,   184,    98,     0,     0,   183,
       0,    95,   184,     0,   185,     0,    82,     0,    97,   185,
      98,     0,    93,   185,     0,    89,   185,     0,   185,    90,
     185,     0,   185,    91,   185,     0,   185,    92,   185,     0,
     185,    88,   185,     0,   185,    89,   185,     0,   185,    87,
     185,     0,   185,    86,   185,     0,   185,    85,   185,     0,
      95,   187,     0,   188,     0,    82,     0,    97,   185,    98,
       0,    93,   185,     0,   188,    90,   185,     0,   188,    91,
     185,     0,   188,    92,   185,     0,   188,    88,   185,     0,
     188,    89,   185,     0,   188,    87,   185,     0,   188,    86,
     185,     0,   188,    85,   185,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   154,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   175,   185,   190,
     210,   216,   227,   249,   258,   263,   268,   274,   279,   284,
     288,   292,   296,   304,   316,   328,   328,   354,   354,   381,
     381,   411,   416,   422,   424,   430,   434,   439,   443,   447,
     460,   475,   490,   505,   509,   513,   517,   523,   525,   535,
     535,   546,   546,   556,   556,   566,   566,   579,   579,   589,
     589,   599,   610,   619,   632,   643,   643,   653,   653,   663,
     663,   673,   673,   683,   683,   696,   701,   707,   713,   719,
     719,   732,   732,   742,   742,   752,   752,   762,   762,   772,
     772,   782,   782,   792,   792,   802,   802,   812,   812,   829,
     842,   853,   864,   869,   873,   879,   884,   892,   892,   898,
     898,   904,   904,   912,   924,   937,   946,   956,   961,   977,
     982,   986,   992,   997,  1001,  1007,  1012,  1016,  1020,  1024,
    1028,  1036,  1046,  1051,  1067,  1072,  1076,  1080,  1084,  1088,
    1092,  1096,  1105,  1117,  1130,  1130,  1141,  1147,  1153,  1162,
    1170,  1179,  1192,  1192,  1198,  1200,  1207,  1219,  1227,  1238,
    1248,  1255,  1261,  1267,  1272,  1277,  1282,  1287,  1300,  1305,
    1309,  1315,  1320,  1326,  1331,  1339,  1345,  1360,  1365,  1369,
    1376,  1382,  1398,  1406,  1412,  1417,  1422,  1431,  1438,  1448,
    1455,  1466,  1472,  1477,  1482,  1487,  1492,  1497,  1506,  1511,
    1527,  1532,  1536,  1540,  1546,  1551,  1559,  1564,  1572,  1581,
    1590,  1595,  1599,  1604,  1609,  1614,  1619,  1624,  1629,  1634,
    1639,  1644,  1654,  1663,  1674,  1679,  1683,  1688,  1693,  1698,
    1703,  1708,  1713,  1718,  1723
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
  "control_params", "optstringc", "opt_control_data", "control_styleexpr", 
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   139,   139,   141,   140,   143,
     142,   145,   144,   146,   147,   148,   149,   150,   150,   151,
     151,   151,   152,   152,   152,   153,   153,   153,   153,   153,
     153,   154,   155,   155,   156,   156,   156,   156,   156,   156,
     156,   156,   157,   158,   160,   159,   161,   161,   162,   162,
     162,   162,   164,   163,   165,   165,   165,   166,   166,   167,
     168,   168,   168,   168,   168,   168,   168,   168,   169,   169,
     169,   170,   170,   171,   171,   172,   172,   173,   173,   173,
     174,   174,   175,   175,   175,   175,   175,   176,   176,   177,
     177,   178,   178,   178,   178,   178,   178,   178,   179,   179,
     180,   180,   180,   180,   181,   181,   182,   182,   183,   184,
     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   186,   187,   188,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,    11,    12,    12,    13,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     6,     8,    10,    11,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     0,    16,     7,
       9,    10,     0,     1,     2,     0,     3,     0,     3,     0,
       3,     0,     3,     4,     4,     3,     6,     0,     2,     4,
       2,     6,     0,     3,     2,     1,     1,     1,     1,     1,
       1,     6,     0,     2,     2,     3,     5,     2,     5,     6,
       7,     9,     4,     6,     0,     2,     0,     1,     1,     1,
       3,     3,     0,     6,     0,     3,     4,     6,     4,     6,
       0,     6,     6,     3,     3,     3,     3,     3,     0,     8,
       7,     0,     5,     0,     3,     1,     1,     1,     2,     2,
       2,     1,     0,     2,     3,     4,     3,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     4,     1,     3,     0,     1,     2,     1,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     1,     1,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,   192,   186,   234,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   185,   233,   220,     0,     0,     0,
       0,   219,     0,   236,     0,   192,   199,   197,   199,   199,
     197,   197,   192,   192,   199,   192,   170,   192,     0,     0,
       0,     0,     0,     0,     0,     0,   223,   222,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,   162,
       0,     0,     0,   201,   202,   203,   204,   205,   206,   207,
     193,   235,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   244,   243,   242,   240,   241,
     237,   238,   239,   221,   218,   231,   230,   229,   227,   228,
     224,   225,   226,   164,     0,   194,   196,    18,   208,   209,
     200,    33,   198,    34,     0,     0,     0,   123,   124,   127,
     142,   152,   154,   178,     0,     0,     0,     0,     0,     0,
       0,   154,   168,     0,   195,     0,     0,     0,     0,     0,
       0,     0,   156,     0,     0,     0,   173,   174,   175,   176,
     177,     0,   163,     0,    17,    22,    19,     0,    23,    42,
       0,     0,   126,     0,     0,   128,   141,     0,     0,   143,
     153,   158,   155,   157,   159,   169,     0,     0,     0,     0,
     167,   165,     0,     0,    20,     0,     0,   130,     0,   132,
     147,   144,     0,     0,     0,     0,     0,     0,   166,   232,
       0,    35,    37,   132,     0,   145,   142,     0,   160,   161,
       0,     0,   171,   172,    27,    28,    29,    30,    31,    32,
      21,    24,    43,    43,    39,   129,   127,   135,   136,   137,
     138,   139,   140,     0,   134,   216,     0,   142,     0,   181,
     183,     0,    26,     0,     0,    43,     0,   133,   146,   217,
     148,     0,   142,   216,     0,     0,    25,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    57,     0,   131,
     149,     0,     0,     0,     0,   180,     0,     0,    47,    44,
      48,    45,     0,   214,     0,    46,   210,     0,     0,    54,
      56,    53,     0,    57,   150,   142,   179,     0,   184,    36,
     112,    59,    61,    63,    67,    69,    75,    77,    79,    81,
      91,    93,    95,    97,    99,   101,   103,   105,     0,    65,
      83,    89,     0,    58,   211,     0,     0,     0,    55,    38,
       0,     0,     0,   113,     0,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,     0,   112,   112,   112,   187,     0,   191,     0,
       0,   215,     0,   212,    49,    40,   151,   182,   114,     0,
      60,     0,    62,    64,    68,    70,    76,    78,    80,    82,
      92,    94,    96,    98,   100,   102,   104,   106,     0,    66,
      84,    90,   188,   189,     0,   190,   213,    50,     0,     0,
       0,     0,     0,    51,     0,   117,     0,     0,     0,   115,
      52,     0,     0,     0,     0,     0,   154,    85,     0,     0,
     118,     0,     0,     0,     0,   115,     0,     0,   115,     0,
     116,   119,    86,   216,     0,   216,   121,   109,   216,     0,
       0,   115,   217,   216,   115,   217,     0,   115,   217,     0,
     120,    87,   115,   115,   217,    71,   115,   122,   110,   115,
       0,    88,    73,   115,    72,   111,     0,    74,   107,     0,
     216,   108,     0,     0
};

static const short yydefgoto[] =
{
       1,     9,   145,   166,   167,   230,   231,    10,    11,    12,
     232,   233,   255,   125,   253,   287,   333,   345,   346,   347,
     363,   348,   349,   350,   351,   352,   353,   364,   365,   354,
     355,   356,   357,   358,   359,   360,   361,   479,   380,   381,
     427,   416,   422,   443,   450,   448,   456,    13,    14,    15,
      16,   149,   175,   214,   244,    17,   150,   179,    18,    19,
     151,   152,   182,   183,    20,   113,   143,    21,    22,    93,
     153,   264,   265,    23,   368,   369,    32,    84,    83,    80,
     121,   295,   296,   258,   259,   104,    31,   194,    24,    25
};

static const short yypact[] =
{
  -32768,    13,   412,-32768,-32768,-32768,-32768,   412,   412,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   111,-32768,   511,-32768,   412,   412,   412,
     -79,   600,   244,-32768,   562,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   412,   412,
     412,   412,   412,   412,   412,   412,-32768,-32768,   576,   412,
  -32768,   412,   412,   412,   412,   412,   412,   412,   412,-32768,
     412,   412,   412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   256,   603,   603,   297,   297,   603,   603,   280,
     337,   603,   345,   100,   231,   607,   613,   567,   172,   172,
  -32768,-32768,-32768,-32768,-32768,   607,   613,   567,   172,   172,
  -32768,-32768,-32768,-32768,   -79,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -60,    63,    63,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   412,   412,   412,   412,   412,   412,
     412,-32768,-32768,     7,-32768,     5,   412,   -79,   -79,    33,
      34,    35,   254,    51,   -79,   -79,-32768,-32768,-32768,-32768,
  -32768,    36,-32768,    60,-32768,-32768,-32768,   -38,-32768,-32768,
     -79,   -79,-32768,   -39,    11,-32768,-32768,    59,    25,-32768,
  -32768,-32768,-32768,    27,   600,-32768,   127,   144,   -79,   -79,
  -32768,-32768,    74,    63,    87,   -79,   -79,-32768,   -79,-32768,
  -32768,   -79,    12,   294,   118,   128,   -79,   -79,-32768,-32768,
     700,-32768,   -79,-32768,    22,   -79,-32768,    14,-32768,   600,
     194,   121,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      23,-32768,-32768,-32768,-32768,   309,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   661,-32768,   -79,    38,-32768,    16,-32768,
  -32768,   700,-32768,   383,   472,-32768,    42,-32768,-32768,-32768,
  -32768,   124,-32768,   -79,    10,     4,-32768,-32768,   412,   126,
     187,    99,   412,   412,   412,   412,   200,-32768,   480,-32768,
  -32768,   125,   204,   207,   135,-32768,   -79,   510,-32768,-32768,
  -32768,-32768,    49,-32768,   412,   136,-32768,   133,   -79,-32768,
  -32768,-32768,   547,-32768,-32768,-32768,-32768,   134,-32768,-32768,
     152,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   153,-32768,
  -32768,-32768,   374,-32768,-32768,   140,   112,   157,-32768,-32768,
     584,   138,   160,   148,   412,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
     152,   152,   158,   152,   152,   152,   161,   163,-32768,   412,
     165,-32768,    49,-32768,   -79,-32768,-32768,-32768,-32768,   170,
  -32768,   412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   412,-32768,
  -32768,-32768,-32768,-32768,   -79,-32768,-32768,   -79,   123,   183,
     -79,   184,   -79,   -79,   183,-32768,   -79,   -79,   412,    17,
  -32768,   -79,    99,   -79,   -79,   190,-32768,-32768,   -79,   -79,
     136,   -79,   -79,   412,   248,    18,   -79,   -79,    19,   195,
  -32768,-32768,-32768,   -79,   -79,   -79,-32768,-32768,   -79,   412,
      99,   245,   -79,   -79,   245,   -79,    99,   245,   -79,   196,
     136,-32768,   245,   245,   -79,-32768,   245,   136,-32768,   245,
     412,-32768,-32768,   245,-32768,-32768,   201,-32768,-32768,    99,
      64,-32768,   295,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,  -206,-32768,-32768,-32768,
  -32768,-32768,-32768,   212,   -85,  -259,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   281,    -8,
    -212,  -104,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    78,-32768,   113,    92,-32768,  -204,-32768,-32768,-32768,
    -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,-32768,   350,   139,   175,   475,
     416,  -329,  -257,  -258,    29,    -2,    -1,-32768,  -122,-32768
};


#define	YYLAST		717


static const short yytable[] =
{
      30,   161,    47,   147,   148,   282,    33,    34,   285,   164,
     197,   162,   246,   482,   283,   216,    59,   247,   302,   262,
     426,   426,   426,   168,   252,   236,    56,    57,    58,   224,
     225,   226,   227,   228,   229,   334,   146,   172,   176,   180,
     190,   198,   260,   261,   340,   266,   279,    95,    96,    97,
      98,    99,   100,   101,   102,   185,     2,   193,   281,    60,
     105,   106,   107,   108,   109,   110,   111,   112,   114,   115,
     116,   209,     3,   237,   238,   239,   240,   241,   242,   373,
     284,   173,   177,   174,   178,   165,   177,     5,   178,    26,
     173,   199,   174,   430,     4,     5,    27,     6,     7,    59,
      28,   341,     8,   133,    29,   202,     7,    59,   200,    59,
       8,    59,    59,   441,   446,   406,    35,   243,   251,   186,
     187,   460,   203,    36,    37,    38,    39,   467,   280,   304,
     204,   293,   154,   155,   156,   157,   158,   159,   160,   201,
     191,   163,   376,   144,   169,     5,   294,   205,   254,   336,
     480,   184,    40,    41,   208,   192,     7,    42,    43,    59,
       8,   134,   135,   136,   137,   138,   139,   140,    44,    45,
     278,    46,   177,   177,   178,   178,   170,   171,   292,    87,
      88,   293,   210,   188,   189,   451,   177,   454,   178,   220,
     457,   372,     4,     5,   293,   463,   294,   249,   221,   195,
     196,   250,   219,   414,     7,    26,   289,   305,     8,   294,
     370,   306,    27,    85,    86,   307,    28,   206,   207,    91,
      29,   336,   481,   442,   211,   212,   447,   213,   337,   342,
     215,   217,   343,   362,   141,   222,   223,   374,   371,   461,
     377,   234,   465,   378,   245,   468,   248,    69,   426,   291,
     471,   472,   440,   398,   474,   301,   402,   475,   403,   117,
     405,   477,    66,    67,    68,   408,   288,   290,     4,     5,
     297,   298,   299,   300,    70,    71,    72,   263,   415,   418,
       7,     4,     5,   129,     8,   433,   434,    70,    71,    72,
     449,   470,   335,     7,   286,   483,   478,     8,   126,    70,
      71,    72,   344,    73,    74,    75,    76,    77,    78,    79,
     421,   118,   119,   124,   256,   308,    73,    74,    75,    76,
      77,    78,    79,    70,    71,    72,   235,   338,    73,    74,
      75,    76,    77,    78,    79,   257,    26,   181,     0,     0,
     130,     0,   379,    27,     0,     0,     0,    28,   132,     0,
       0,    29,    73,    74,    75,    76,    77,    78,    79,     0,
     237,   238,   239,   240,   241,   242,     0,   404,     0,    73,
      74,    75,    76,    77,    78,    79,    26,   218,     0,   410,
      70,    71,    72,    27,     0,    82,   267,    28,    70,    71,
      72,    29,    89,    90,     0,    92,   411,    94,     0,   268,
     269,   270,   271,   407,   243,     0,     0,     0,   409,    73,
      74,    75,    76,    77,    78,    79,   425,    73,    74,    75,
      76,    77,    78,    79,   272,     0,   273,   274,   275,   276,
       0,   439,     0,   412,     0,     0,   413,     0,     0,   417,
       0,   419,   420,     0,     0,   423,   424,   459,   428,     0,
     429,     0,   431,   432,   366,   367,     5,   435,   436,     0,
     437,   438,     0,     0,     0,   444,   445,     7,   476,     0,
       0,     8,   452,   453,   455,   277,     0,   458,     0,     0,
       0,   462,   464,   303,   466,     0,     0,   469,   268,   269,
     270,   271,     0,   473,    26,     0,   268,   269,   270,   271,
     123,    27,     0,   127,   128,    28,     0,   131,     0,    29,
     142,     0,     0,   272,   309,   273,   274,   275,   276,     0,
     310,   272,     0,   273,   274,   275,   276,     0,     0,     0,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   339,   332,     0,     0,     0,     0,   310,   120,   122,
     120,   120,   122,   122,     0,     0,   120,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   375,   332,
       0,     0,     0,     0,   310,     0,    48,    49,    50,    51,
      52,    53,    54,    55,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   399,   400,   401,    61,    62,    63,
      64,    65,    66,    67,    68,    64,    65,    66,    67,    68,
      81,    61,    62,    63,    64,    65,    66,    67,    68,     0,
       0,     0,     0,     0,   103,    73,    74,    75,    76,    77,
      78,    79,     0,   118,   119,    61,    62,    63,    64,    65,
      66,    67,    68,    62,    63,    64,    65,    66,    67,    68,
      63,    64,    65,    66,    67,    68,   224,   225,   226,   227,
     228,   229,   237,   238,   239,   240,   241,   242
};

static const short yycheck[] =
{
       2,   141,    23,   125,   126,   263,     7,     8,     4,     4,
      49,     4,   216,     0,     4,     3,    95,     3,   277,     3,
       3,     3,     3,   145,   230,     3,    27,    28,    29,     6,
       7,     8,     9,    10,    11,   292,    96,     4,     4,     4,
       4,    80,     4,   247,   303,   251,     4,    48,    49,    50,
      51,    52,    53,    54,    55,     4,    43,    95,   262,    30,
      61,    62,    63,    64,    65,    66,    67,    68,    70,    71,
      72,   193,    59,    51,    52,    53,    54,    55,    56,   336,
      70,    48,    48,    50,    50,    80,    48,    82,    50,    82,
      48,    80,    50,   422,    81,    82,    89,    84,    93,    95,
      93,   305,    97,     3,    97,    80,    93,    95,    49,    95,
      97,    95,    95,    95,    95,   372,     5,    95,    95,    68,
      69,   450,    95,    12,    13,    14,    15,   456,     4,     4,
       3,    82,   134,   135,   136,   137,   138,   139,   140,    80,
      80,   143,     4,   114,   146,    82,    97,     3,   233,    85,
     479,   152,    41,    42,    80,    95,    93,    46,    47,    95,
      97,    61,    62,    63,    64,    65,    66,    67,    57,    58,
     255,    60,    48,    48,    50,    50,   147,   148,    79,    40,
      41,    82,    95,   154,   155,   443,    48,   445,    50,    71,
     448,    79,    81,    82,    82,   453,    97,     3,    70,   170,
     171,    80,   203,    80,    93,    82,    80,     3,    97,    97,
     332,     4,    89,    38,    39,    80,    93,   188,   189,    44,
      97,    85,   480,   435,   195,   196,   438,   198,    95,    95,
     201,   202,    80,    80,     3,   206,   207,    80,    98,   451,
      80,   212,   454,    95,   215,   457,   217,     3,     3,   270,
     462,   463,     4,    95,   466,   276,    95,   469,    95,     3,
      95,   473,    90,    91,    92,    95,   268,    80,    81,    82,
     272,   273,   274,   275,    43,    44,    45,   248,    95,    95,
      93,    81,    82,     3,    97,    95,   426,    43,    44,    45,
      95,    95,   294,    93,   265,     0,    95,    97,    86,    43,
      44,    45,   310,    72,    73,    74,    75,    76,    77,    78,
     414,    80,    81,    16,   236,   286,    72,    73,    74,    75,
      76,    77,    78,    43,    44,    45,   213,   298,    72,    73,
      74,    75,    76,    77,    78,   243,    82,    83,    -1,    -1,
       3,    -1,   344,    89,    -1,    -1,    -1,    93,     3,    -1,
      -1,    97,    72,    73,    74,    75,    76,    77,    78,    -1,
      51,    52,    53,    54,    55,    56,    -1,   369,    -1,    72,
      73,    74,    75,    76,    77,    78,    82,    83,    -1,   381,
      43,    44,    45,    89,    -1,    35,     3,    93,    43,    44,
      45,    97,    42,    43,    -1,    45,   398,    47,    -1,    16,
      17,    18,    19,   374,    95,    -1,    -1,    -1,   379,    72,
      73,    74,    75,    76,    77,    78,   418,    72,    73,    74,
      75,    76,    77,    78,    41,    -1,    43,    44,    45,    46,
      -1,   433,    -1,   404,    -1,    -1,   407,    -1,    -1,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   449,   419,    -1,
     421,    -1,   423,   424,    80,    81,    82,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,    93,   470,    -1,
      -1,    97,   443,   444,   445,     3,    -1,   448,    -1,    -1,
      -1,   452,   453,     3,   455,    -1,    -1,   458,    16,    17,
      18,    19,    -1,   464,    82,    -1,    16,    17,    18,    19,
      84,    89,    -1,    87,    88,    93,    -1,    91,    -1,    97,
      94,    -1,    -1,    41,     4,    43,    44,    45,    46,    -1,
      10,    41,    -1,    43,    44,    45,    46,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,     4,    42,    -1,    -1,    -1,    -1,    10,    83,    84,
      85,    86,    87,    88,    -1,    -1,    91,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     4,    42,
      -1,    -1,    -1,    -1,    10,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,    85,    86,    87,
      88,    89,    90,    91,    92,    88,    89,    90,    91,    92,
      98,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    98,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    85,    86,    87,    88,    89,
      90,    91,    92,    86,    87,    88,    89,    90,    91,    92,
      87,    88,    89,    90,    91,    92,     6,     7,     8,     9,
      10,    11,    51,    52,    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 17:
#line 177 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 18:
#line 187 "rcparse.y"
{
	    yyval.pacc = NULL;
	  }
    break;
case 19:
#line 191 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  }
    break;
case 20:
#line 212 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  }
    break;
case 21:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL | ACC_ALT)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;
case 22:
#line 229 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;
case 23:
#line 250 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  }
    break;
case 24:
#line 260 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
case 25:
#line 264 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 26:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 27:
#line 276 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  }
    break;
case 28:
#line 280 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  }
    break;
case 29:
#line 285 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  }
    break;
case 30:
#line 289 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  }
    break;
case 31:
#line 293 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  }
    break;
case 32:
#line 297 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  }
    break;
case 33:
#line 306 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 34:
#line 318 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 35:
#line 331 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 36:
#line 348 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 37:
#line 356 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	      style = 0;
	    }
    break;
case 38:
#line 375 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 39:
#line 383 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	      style = 0;
	    }
    break;
case 40:
#line 403 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 41:
#line 413 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 42:
#line 417 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 44:
#line 425 "rcparse.y"
{
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  }
    break;
case 45:
#line 431 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  }
    break;
case 46:
#line 436 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
case 47:
#line 440 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
    break;
case 48:
#line 444 "rcparse.y"
{
	    res_string_to_id (& dialog.class, yyvsp[0].s);
	  }
    break;
case 49:
#line 448 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 50:
#line 461 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 51:
#line 476 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 52:
#line 491 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
	  }
    break;
case 53:
#line 506 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  }
    break;
case 54:
#line 510 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 55:
#line 514 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 518 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  }
    break;
case 58:
#line 526 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  }
    break;
case 59:
#line 537 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 60:
#line 543 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 61:
#line 547 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 62:
#line 553 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 63:
#line 557 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 64:
#line 563 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 65:
#line 567 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 66:
#line 573 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  }
    break;
case 67:
#line 580 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 68:
#line 586 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 69:
#line 590 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    }
    break;
case 70:
#line 596 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 71:
#line 601 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 72:
#line 612 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 73:
#line 621 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 74:
#line 634 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].s, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 75:
#line 644 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    }
    break;
case 76:
#line 650 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 77:
#line 654 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 78:
#line 660 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 79:
#line 664 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 80:
#line 670 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 81:
#line 674 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 82:
#line 680 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 83:
#line 684 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 84:
#line 690 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  }
    break;
case 85:
#line 697 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 86:
#line 703 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 87:
#line 709 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 88:
#line 715 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 89:
#line 720 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 90:
#line 726 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  }
    break;
case 91:
#line 733 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    }
    break;
case 92:
#line 739 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 93:
#line 743 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    }
    break;
case 94:
#line 749 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 95:
#line 753 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 96:
#line 759 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 97:
#line 763 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 98:
#line 769 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 99:
#line 773 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 100:
#line 779 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 101:
#line 783 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    }
    break;
case 102:
#line 789 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 103:
#line 793 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    }
    break;
case 104:
#line 799 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 105:
#line 803 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 106:
#line 809 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 107:
#line 814 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 108:
#line 816 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-14].s, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  }
    break;
case 109:
#line 832 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].s, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 110:
#line 844 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 111:
#line 855 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 112:
#line 866 "rcparse.y"
{
	    yyval.s = NULL;
	  }
    break;
case 113:
#line 870 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 114:
#line 874 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 115:
#line 881 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 116:
#line 885 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
case 117:
#line 894 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 119:
#line 900 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
case 121:
#line 906 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 123:
#line 914 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 124:
#line 926 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 125:
#line 939 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 126:
#line 948 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 127:
#line 958 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 128:
#line 962 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 129:
#line 979 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  }
    break;
case 130:
#line 983 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;
case 131:
#line 987 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 132:
#line 994 "rcparse.y"
{
	    yyval.is = 0;
	  }
    break;
case 133:
#line 998 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 134:
#line 1002 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 135:
#line 1009 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  }
    break;
case 136:
#line 1013 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  }
    break;
case 137:
#line 1017 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  }
    break;
case 138:
#line 1021 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  }
    break;
case 139:
#line 1025 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  }
    break;
case 140:
#line 1029 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  }
    break;
case 141:
#line 1038 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 142:
#line 1048 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 143:
#line 1052 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 144:
#line 1069 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  }
    break;
case 145:
#line 1073 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  }
    break;
case 146:
#line 1077 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  }
    break;
case 147:
#line 1081 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;
case 148:
#line 1085 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 149:
#line 1089 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 150:
#line 1093 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 151:
#line 1098 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  }
    break;
case 152:
#line 1107 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 153:
#line 1119 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 154:
#line 1131 "rcparse.y"
{
	    rcparse_rcdata ();
	  }
    break;
case 155:
#line 1135 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 156:
#line 1143 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  }
    break;
case 157:
#line 1148 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 158:
#line 1155 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 159:
#line 1163 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 160:
#line 1171 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 161:
#line 1180 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 162:
#line 1194 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 165:
#line 1201 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 166:
#line 1208 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 167:
#line 1221 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 168:
#line 1228 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 169:
#line 1240 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 170:
#line 1250 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  }
    break;
case 171:
#line 1256 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 172:
#line 1262 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 173:
#line 1268 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 174:
#line 1273 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 175:
#line 1278 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 176:
#line 1283 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 177:
#line 1288 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 178:
#line 1302 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  }
    break;
case 179:
#line 1306 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  }
    break;
case 180:
#line 1310 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  }
    break;
case 181:
#line 1317 "rcparse.y"
{
	    yyval.verstring = NULL;
	  }
    break;
case 182:
#line 1321 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  }
    break;
case 183:
#line 1328 "rcparse.y"
{
	    yyval.vervar = NULL;
	  }
    break;
case 184:
#line 1332 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  }
    break;
case 185:
#line 1341 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  }
    break;
case 186:
#line 1346 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 187:
#line 1362 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 188:
#line 1366 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 189:
#line 1370 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 190:
#line 1378 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 191:
#line 1383 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 192:
#line 1400 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 193:
#line 1407 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 194:
#line 1413 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 195:
#line 1418 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 196:
#line 1423 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  }
    break;
case 197:
#line 1433 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 198:
#line 1439 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 199:
#line 1450 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 200:
#line 1456 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 201:
#line 1468 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 202:
#line 1473 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  }
    break;
case 203:
#line 1478 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  }
    break;
case 204:
#line 1483 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  }
    break;
case 205:
#line 1488 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  }
    break;
case 206:
#line 1493 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  }
    break;
case 207:
#line 1498 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 208:
#line 1508 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 209:
#line 1512 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 210:
#line 1529 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 211:
#line 1533 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 212:
#line 1537 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 213:
#line 1541 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 214:
#line 1548 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 215:
#line 1552 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  }
    break;
case 216:
#line 1561 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 217:
#line 1565 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 218:
#line 1574 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 219:
#line 1583 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 220:
#line 1592 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 221:
#line 1596 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 222:
#line 1600 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 223:
#line 1605 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 224:
#line 1610 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 225:
#line 1615 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 226:
#line 1620 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 227:
#line 1625 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 228:
#line 1630 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 229:
#line 1635 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 230:
#line 1640 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 231:
#line 1645 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 232:
#line 1656 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 233:
#line 1665 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 234:
#line 1676 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 235:
#line 1680 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 236:
#line 1684 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 237:
#line 1689 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 238:
#line 1694 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 239:
#line 1699 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 240:
#line 1704 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 241:
#line 1709 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 242:
#line 1714 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 243:
#line 1719 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 244:
#line 1724 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1730 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@


1.1.8.2
log
@Regenerate more generated files.
@
text
@d794 1
a794 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d1107 1
a1107 1
#line 315 "/usr/share/bison-1.35/bison.simple"
d1549 1
a1549 1
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
d3206 1
a3206 1
#line 705 "/usr/share/bison-1.35/bison.simple"
@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 3373
/* A Bison parser, made from rcparse.y
   by GNU bison 1.33.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"
#include "safe-ctype.h"

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 58 "rcparse.y"
#ifndef YYSTYPE
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} yystype;
# define YYSTYPE yystype
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		483
#define	YYFLAG		-32768
#define	YYNTBASE	99

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 191)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     5,     9,    13,    17,    21,    25,    29,
      33,    37,    41,    45,    49,    53,    57,    61,    62,    69,
      70,    73,    76,    81,    83,    85,    87,    91,    94,    96,
      98,   100,   102,   104,   106,   111,   116,   117,   131,   132,
     146,   147,   162,   163,   167,   168,   172,   176,   177,   182,
     186,   192,   200,   204,   208,   213,   217,   218,   221,   222,
     226,   227,   231,   232,   236,   237,   241,   242,   246,   247,
     251,   263,   276,   289,   303,   304,   308,   309,   313,   314,
     318,   319,   323,   324,   328,   335,   344,   355,   367,   368,
     372,   373,   377,   378,   382,   383,   387,   388,   392,   393,
     397,   398,   402,   403,   407,   408,   412,   413,   430,   438,
     448,   459,   460,   462,   465,   466,   470,   471,   475,   476,
     480,   481,   485,   490,   495,   499,   506,   507,   510,   515,
     518,   525,   526,   530,   533,   535,   537,   539,   541,   543,
     545,   552,   553,   556,   559,   563,   569,   572,   578,   585,
     593,   603,   608,   615,   616,   619,   620,   622,   624,   626,
     630,   634,   635,   642,   643,   647,   652,   659,   664,   671,
     672,   679,   686,   690,   694,   698,   702,   706,   707,   716,
     724,   725,   731,   732,   736,   738,   740,   742,   745,   748,
     751,   753,   754,   757,   761,   766,   770,   771,   774,   775,
     778,   780,   782,   784,   786,   788,   790,   792,   794,   796,
     798,   801,   805,   810,   812,   816,   817,   819,   822,   824,
     826,   830,   833,   836,   840,   844,   848,   852,   856,   860,
     864,   868,   871,   873,   875,   879,   882,   886,   890,   894,
     898,   902,   906,   910
};
static const short yyrhs[] =
{
      -1,    99,   100,   101,     0,    99,   100,   107,     0,    99,
     100,   108,     0,    99,   100,   109,     0,    99,   100,   148,
       0,    99,   100,   149,     0,    99,   100,   150,     0,    99,
     100,   151,     0,    99,   100,   156,     0,    99,   100,   159,
       0,    99,   100,   160,     0,    99,   100,   165,     0,    99,
     100,   168,     0,    99,   100,   169,     0,    99,   100,    84,
       0,     0,   174,     5,   177,     3,   102,     4,     0,     0,
     102,   103,     0,   104,   188,     0,   104,   188,    95,   105,
       0,    80,     0,   189,     0,   106,     0,   105,    95,   106,
       0,   105,   106,     0,     6,     0,     7,     0,     8,     0,
       9,     0,    10,     0,    11,     0,   174,    12,   179,   181,
       0,   174,    13,   178,   181,     0,     0,   174,    14,   179,
     113,   189,   185,   185,   185,   110,   114,     3,   116,     4,
       0,     0,   174,    15,   179,   113,   189,   185,   185,   185,
     111,   114,     3,   116,     4,     0,     0,   174,    15,   179,
     113,   189,   185,   185,   185,   185,   112,   114,     3,   116,
       4,     0,     0,    16,    96,   186,     0,     0,   114,    17,
      80,     0,   114,    18,   174,     0,     0,   114,    19,   115,
     182,     0,   114,    16,   186,     0,   114,    41,   186,    95,
      80,     0,   114,    41,   186,    95,    80,   185,   185,     0,
     114,    46,   174,     0,   114,    44,   186,     0,   114,    43,
     186,   185,     0,   114,    45,   186,     0,     0,   116,   117,
       0,     0,    20,   118,   139,     0,     0,    21,   119,   139,
       0,     0,    22,   120,   139,     0,     0,    38,   121,   139,
       0,     0,    23,   122,   139,     0,     0,    24,   123,   139,
       0,    10,   140,   186,   185,   142,   185,   185,   185,   185,
     184,   141,     0,    10,   140,   186,   185,   142,   185,   185,
     185,   185,   185,   185,   141,     0,    10,   140,   186,    95,
      80,   142,   185,   185,   185,   185,   184,   141,     0,    10,
     140,   186,    95,    80,   142,   185,   185,   185,   185,   185,
     185,   141,     0,     0,    25,   124,   139,     0,     0,    26,
     125,   139,     0,     0,    27,   126,   139,     0,     0,    28,
     127,   139,     0,     0,    39,   128,   139,     0,    42,   176,
     186,   185,   185,   141,     0,    42,   176,   186,   185,   185,
     185,   185,   141,     0,    42,   176,   186,   185,   185,   185,
     185,   144,   184,   141,     0,    42,   176,   186,   185,   185,
     185,   185,   144,   185,   185,   141,     0,     0,    40,   129,
     139,     0,     0,    29,   130,   139,     0,     0,    30,   131,
     139,     0,     0,    31,   132,   139,     0,     0,    32,   133,
     139,     0,     0,    33,   134,   139,     0,     0,    34,   135,
     139,     0,     0,    35,   136,   139,     0,     0,    36,   137,
     139,     0,     0,    37,    80,    95,   186,    95,   186,    95,
     186,    95,   186,    95,   186,    95,   138,   182,   184,     0,
     140,   186,   185,   185,   185,   185,   141,     0,   140,   186,
     185,   185,   185,   185,   146,   184,   141,     0,   140,   186,
     185,   185,   185,   185,   146,   185,   185,   141,     0,     0,
      80,     0,    80,    95,     0,     0,     3,   161,     4,     0,
       0,    95,   143,   182,     0,     0,    95,   145,   182,     0,
       0,    95,   147,   182,     0,   174,    41,   178,   181,     0,
     174,    42,   178,   181,     0,    43,   186,   185,     0,   174,
      46,   177,     3,   152,     4,     0,     0,   152,   153,     0,
      48,    80,   185,   154,     0,    48,    49,     0,    50,    80,
     154,     3,   152,     4,     0,     0,   154,    95,   155,     0,
     154,   155,     0,    51,     0,    52,     0,    53,     0,    54,
       0,    55,     0,    56,     0,   174,    47,   177,     3,   157,
       4,     0,     0,   157,   158,     0,    48,    80,     0,    48,
      80,   185,     0,    48,    80,   185,   185,   184,     0,    48,
      49,     0,    50,    80,     3,   157,     4,     0,    50,    80,
     185,     3,   157,     4,     0,    50,    80,   185,   185,     3,
     157,     4,     0,    50,    80,   185,   185,   185,   184,     3,
     157,     4,     0,   174,    57,   179,   181,     0,   174,    58,
     177,     3,   161,     4,     0,     0,   162,   163,     0,     0,
     164,     0,    83,     0,   187,     0,   164,    95,    83,     0,
     164,    95,   187,     0,     0,    59,   177,     3,   166,   167,
       4,     0,     0,   167,   186,    80,     0,   167,   186,    95,
      80,     0,   174,   174,   177,     3,   161,     4,     0,   174,
     174,   177,   181,     0,   174,    60,   170,     3,   171,     4,
       0,     0,   170,    61,   186,   185,   185,   185,     0,   170,
      62,   186,   185,   185,   185,     0,   170,    63,   186,     0,
     170,    64,   186,     0,   170,    65,   186,     0,   170,    66,
     186,     0,   170,    67,   186,     0,     0,   171,    68,     3,
      71,     3,   172,     4,     4,     0,   171,    69,     3,    70,
      80,   173,     4,     0,     0,   172,    70,    80,    95,    80,
       0,     0,   173,   185,   185,     0,   189,     0,    81,     0,
      80,     0,    80,    95,     0,    81,    95,     0,   189,    95,
       0,   175,     0,     0,   177,   180,     0,   177,    44,   186,
       0,   177,    43,   186,   185,     0,   177,    45,   186,     0,
       0,   178,   180,     0,     0,   179,   180,     0,    72,     0,
      73,     0,    74,     0,    75,     0,    76,     0,    77,     0,
      78,     0,    80,     0,    81,     0,   183,     0,    79,   183,
       0,   182,    85,   183,     0,   182,    85,    79,   183,     0,
      82,     0,    97,   186,    98,     0,     0,   185,     0,    95,
     186,     0,   187,     0,    82,     0,    97,   187,    98,     0,
      93,   187,     0,    89,   187,     0,   187,    90,   187,     0,
     187,    91,   187,     0,   187,    92,   187,     0,   187,    88,
     187,     0,   187,    89,   187,     0,   187,    87,   187,     0,
     187,    86,   187,     0,   187,    85,   187,     0,    95,   189,
       0,   190,     0,    82,     0,    97,   187,    98,     0,    93,
     187,     0,   190,    90,   187,     0,   190,    91,   187,     0,
     190,    92,   187,     0,   190,    88,   187,     0,   190,    89,
     187,     0,   190,    87,   187,     0,   190,    86,   187,     0,
     190,    85,   187,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   154,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   173,   182,   189,
     194,   214,   220,   231,   253,   262,   267,   272,   278,   283,
     288,   292,   296,   300,   308,   317,   326,   326,   348,   348,
     371,   371,   397,   402,   408,   410,   414,   418,   418,   424,
     428,   434,   447,   451,   455,   459,   465,   467,   477,   477,
     488,   488,   498,   498,   508,   508,   521,   521,   531,   531,
     541,   552,   561,   574,   585,   585,   595,   595,   605,   605,
     615,   615,   625,   625,   638,   643,   649,   655,   661,   661,
     674,   674,   684,   684,   694,   694,   704,   704,   714,   714,
     724,   724,   734,   734,   744,   744,   754,   754,   771,   784,
     795,   806,   811,   815,   821,   826,   834,   834,   840,   840,
     846,   846,   854,   863,   873,   882,   889,   894,   910,   915,
     919,   925,   930,   934,   940,   945,   949,   953,   957,   961,
     969,   976,   981,   997,  1002,  1006,  1010,  1014,  1018,  1022,
    1026,  1035,  1044,  1054,  1054,  1065,  1071,  1077,  1086,  1094,
    1103,  1116,  1116,  1122,  1124,  1128,  1137,  1142,  1150,  1157,
    1164,  1170,  1176,  1181,  1186,  1191,  1196,  1209,  1214,  1218,
    1224,  1229,  1235,  1240,  1248,  1254,  1269,  1274,  1278,  1285,
    1291,  1307,  1315,  1321,  1326,  1331,  1340,  1347,  1357,  1364,
    1375,  1381,  1386,  1391,  1396,  1401,  1406,  1415,  1420,  1436,
    1441,  1445,  1449,  1455,  1460,  1468,  1473,  1481,  1490,  1499,
    1504,  1508,  1513,  1518,  1523,  1528,  1533,  1538,  1543,  1548,
    1553,  1563,  1572,  1583,  1588,  1592,  1597,  1602,  1607,  1612,
    1617,  1622,  1627,  1632
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "newcmd", "accelerator", "acc_entries", "acc_entry", 
  "acc_event", "acc_options", "acc_option", "bitmap", "cursor", "dialog", 
  "@@1", "@@2", "@@3", "exstyle", "styles", "@@4", "controls", "control", 
  "@@5", "@@6", "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", 
  "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "@@25", 
  "control_params", "optstringc", "opt_control_data", "control_styleexpr", 
  "@@26", "icon_styleexpr", "@@27", "control_params_styleexpr", "@@28", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@29", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@30", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", NULL
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   102,
     102,   103,   103,   104,   104,   105,   105,   105,   106,   106,
     106,   106,   106,   106,   107,   108,   110,   109,   111,   109,
     112,   109,   113,   113,   114,   114,   114,   115,   114,   114,
     114,   114,   114,   114,   114,   114,   116,   116,   118,   117,
     119,   117,   120,   117,   121,   117,   122,   117,   123,   117,
     117,   117,   117,   117,   124,   117,   125,   117,   126,   117,
     127,   117,   128,   117,   117,   117,   117,   117,   129,   117,
     130,   117,   131,   117,   132,   117,   133,   117,   134,   117,
     135,   117,   136,   117,   137,   117,   138,   117,   139,   139,
     139,   140,   140,   140,   141,   141,   143,   142,   145,   144,
     147,   146,   148,   149,   150,   151,   152,   152,   153,   153,
     153,   154,   154,   154,   155,   155,   155,   155,   155,   155,
     156,   157,   157,   158,   158,   158,   158,   158,   158,   158,
     158,   159,   160,   162,   161,   163,   163,   164,   164,   164,
     164,   166,   165,   167,   167,   167,   168,   168,   169,   170,
     170,   170,   170,   170,   170,   170,   170,   171,   171,   171,
     172,   172,   173,   173,   174,   174,   175,   175,   175,   176,
     176,   177,   177,   177,   177,   177,   178,   178,   179,   179,
     180,   180,   180,   180,   180,   180,   180,   181,   181,   182,
     182,   182,   182,   183,   183,   184,   184,   185,   186,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   188,   189,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     6,     0,
       2,     2,     4,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     4,     4,     0,    13,     0,    13,
       0,    14,     0,     3,     0,     3,     3,     0,     4,     3,
       5,     7,     3,     3,     4,     3,     0,     2,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     0,     3,
      11,    12,    12,    13,     0,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     6,     8,    10,    11,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     0,    16,     7,     9,
      10,     0,     1,     2,     0,     3,     0,     3,     0,     3,
       0,     3,     4,     4,     3,     6,     0,     2,     4,     2,
       6,     0,     3,     2,     1,     1,     1,     1,     1,     1,
       6,     0,     2,     2,     3,     5,     2,     5,     6,     7,
       9,     4,     6,     0,     2,     0,     1,     1,     1,     3,
       3,     0,     6,     0,     3,     4,     6,     4,     6,     0,
       6,     6,     3,     3,     3,     3,     3,     0,     8,     7,
       0,     5,     0,     3,     1,     1,     1,     2,     2,     2,
       1,     0,     2,     3,     4,     3,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     4,     1,     3,     0,     1,     2,     1,     1,
       3,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     1,     1,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,    17,     0,     0,   191,   185,   233,    16,     0,     0,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,     0,   184,   232,   219,     0,     0,
       0,     0,   218,     0,   235,     0,   191,   198,   196,   198,
     198,   196,   196,   191,   191,   198,   191,   169,   191,     0,
       0,     0,     0,     0,     0,     0,     0,   222,   221,     0,
       0,   124,     0,     0,     0,     0,     0,     0,     0,     0,
     161,     0,     0,     0,   200,   201,   202,   203,   204,   205,
     206,   192,   234,     0,     0,     0,    42,    42,     0,     0,
       0,     0,     0,     0,     0,     0,   243,   242,   241,   239,
     240,   236,   237,   238,   220,   217,   230,   229,   228,   226,
     227,   223,   224,   225,   163,     0,   193,   195,    19,   207,
     208,   199,    34,   197,    35,     0,     0,     0,   122,   123,
     126,   141,   151,   153,   177,     0,     0,     0,     0,     0,
       0,     0,   153,   167,     0,   194,     0,     0,     0,     0,
       0,     0,     0,   155,     0,     0,     0,   172,   173,   174,
     175,   176,     0,   162,     0,    18,    23,    20,     0,    24,
      43,     0,     0,   125,     0,     0,   127,   140,     0,     0,
     142,   152,   157,   154,   156,   158,   168,     0,     0,     0,
       0,   166,   164,     0,     0,    21,     0,     0,   129,     0,
     131,   146,   143,     0,     0,     0,     0,     0,     0,   165,
     231,     0,    36,    38,   131,     0,   144,   141,     0,   159,
     160,     0,     0,   170,   171,    28,    29,    30,    31,    32,
      33,    22,    25,    44,    44,    40,   128,   126,   134,   135,
     136,   137,   138,   139,     0,   133,   215,     0,   141,     0,
     180,   182,     0,    27,     0,     0,    44,     0,   132,   145,
     216,   147,     0,   141,   215,     0,     0,    26,    56,     0,
       0,     0,    47,     0,     0,     0,     0,     0,    56,     0,
     130,   148,     0,     0,     0,     0,   179,     0,     0,    49,
      45,    46,     0,     0,     0,    53,    55,    52,     0,    56,
     149,   141,   178,     0,   183,    37,   111,    58,    60,    62,
      66,    68,    74,    76,    78,    80,    90,    92,    94,    96,
      98,   100,   102,   104,     0,    64,    82,    88,     0,    57,
       0,   213,     0,    48,   209,     0,    54,    39,     0,     0,
       0,   112,     0,   111,   111,   111,   111,   111,   111,   111,
     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       0,   111,   111,   111,   186,     0,   190,     0,     0,   210,
       0,     0,    50,    41,   150,   181,   113,     0,    59,     0,
      61,    63,    67,    69,    75,    77,    79,    81,    91,    93,
      95,    97,    99,   101,   103,   105,     0,    65,    83,    89,
     187,   188,     0,   189,   214,     0,   211,     0,     0,     0,
       0,     0,     0,   212,    51,     0,   116,     0,     0,     0,
     114,     0,     0,     0,     0,     0,   153,    84,     0,     0,
     117,     0,     0,     0,     0,   114,     0,     0,   114,     0,
     115,   118,    85,   215,     0,   215,   120,   108,   215,     0,
       0,   114,   216,   215,   114,   216,     0,   114,   216,     0,
     119,    86,   114,   114,   216,    70,   114,   121,   109,   114,
       0,    87,    72,   114,    71,   110,     0,    73,   106,     0,
     215,   107,     0,     0
};

static const short yydefgoto[] =
{
       1,     2,    10,   146,   167,   168,   231,   232,    11,    12,
      13,   233,   234,   256,   126,   254,   292,   288,   329,   343,
     344,   345,   361,   346,   347,   348,   349,   350,   351,   362,
     363,   352,   353,   354,   355,   356,   357,   358,   359,   479,
     378,   379,   427,   417,   422,   443,   450,   448,   456,    14,
      15,    16,    17,   150,   176,   215,   245,    18,   151,   180,
      19,    20,   152,   153,   183,   184,    21,   114,   144,    22,
      23,    94,   154,   265,   266,    24,   366,   367,    33,    85,
      84,    81,   122,   333,   334,   259,   260,   105,    32,   195,
      25,    26
};

static const short yypact[] =
{
  -32768,    31,   240,   241,-32768,-32768,-32768,-32768,   241,   241,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,    68,-32768,   578,-32768,   241,   241,
     241,   -73,   586,   169,-32768,   388,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   241,
     241,   241,   241,   241,   241,   241,   241,-32768,-32768,   513,
     241,-32768,   241,   241,   241,   241,   241,   241,   241,   241,
  -32768,   241,   241,   241,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   215,   581,   581,   268,   268,   581,   581,
     232,   275,   581,   283,   250,   156,   593,   599,   616,    98,
      98,-32768,-32768,-32768,-32768,-32768,   593,   599,   616,    98,
      98,-32768,-32768,-32768,-32768,   -73,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   -61,   290,   290,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   241,   241,   241,   241,   241,
     241,   241,-32768,-32768,     4,-32768,     5,   241,   -73,   -73,
       9,    92,    32,   309,    10,   -73,   -73,-32768,-32768,-32768,
  -32768,-32768,    54,-32768,   -57,-32768,-32768,-32768,   -20,-32768,
  -32768,   -73,   -73,-32768,    39,    -9,-32768,-32768,    40,    11,
  -32768,-32768,-32768,-32768,    36,   586,-32768,   145,   151,   -73,
     -73,-32768,-32768,    78,   290,    79,   -73,   -73,-32768,   -73,
  -32768,-32768,   -73,    16,   365,   106,   108,   -73,   -73,-32768,
  -32768,   686,-32768,   -73,-32768,    52,   -73,-32768,    17,-32768,
     586,   178,   128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    34,-32768,-32768,-32768,-32768,   314,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   647,-32768,   -73,    95,-32768,    18,
  -32768,-32768,   686,-32768,   150,   378,-32768,   112,-32768,-32768,
  -32768,-32768,   123,-32768,   -73,     6,    29,-32768,-32768,   241,
     129,   281,-32768,   241,   241,   241,   241,   281,-32768,   452,
  -32768,-32768,   135,   200,   213,   143,-32768,   -73,   479,-32768,
  -32768,-32768,   182,    91,   -73,-32768,-32768,-32768,   516,-32768,
  -32768,-32768,-32768,   130,-32768,-32768,   147,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   158,-32768,-32768,-32768,   170,-32768,
      73,-32768,   241,   154,-32768,   160,-32768,-32768,   553,   172,
     168,   161,   241,   147,   147,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
     173,   147,   147,   147,   174,   186,-32768,   241,   187,-32768,
     196,   183,   -73,-32768,-32768,-32768,-32768,   201,-32768,   241,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   241,-32768,-32768,-32768,
  -32768,-32768,   -73,-32768,-32768,    73,-32768,   -73,   293,   202,
     -73,   203,   -73,-32768,-32768,   202,-32768,   -73,   -73,   241,
      22,   -73,   182,   -73,   -73,   205,-32768,-32768,   -73,   -73,
     154,   -73,   -73,   241,   297,    26,   -73,   -73,    27,   208,
  -32768,-32768,-32768,   -73,   -73,   -73,-32768,-32768,   -73,   241,
     182,   251,   -73,   -73,   251,   -73,   182,   251,   -73,   230,
     154,-32768,   251,   251,   -73,-32768,   251,   154,-32768,   251,
     241,-32768,-32768,   251,-32768,-32768,   236,-32768,-32768,   182,
     -11,-32768,   332,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  -220,-32768,-32768,
  -32768,-32768,-32768,-32768,   248,  -222,-32768,  -262,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     289,    30,   159,   -44,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   117,-32768,   163,   140,-32768,  -171,-32768,
  -32768,-32768,  -141,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   -22,-32768,-32768,   486,   -24,
      55,   480,   316,  -304,  -315,  -261,     8,    -3,    -2,-32768,
    -122,-32768
};


#define	YYLAST		708


static const short yytable[] =
{
      31,   162,    48,   283,   148,   149,    34,    35,   163,   165,
     284,   253,   255,   173,   186,   369,   298,    88,    89,   217,
     248,   263,    60,   192,   169,   426,    57,    58,    59,   426,
     426,   482,   267,   286,   279,   147,   181,   338,   193,    61,
     225,   226,   227,   228,   229,   230,   247,    96,    97,    98,
      99,   100,   101,   102,   103,   237,   406,   174,   191,   175,
     106,   107,   108,   109,   110,   111,   112,   113,   115,   116,
     117,   200,   210,    36,   371,   194,   285,   262,   187,   188,
      37,    38,    39,    40,    60,   166,    27,     6,   198,   201,
     413,   203,   282,    28,    86,    87,   177,    29,     8,   261,
      92,    30,     9,   238,   239,   240,   241,   242,   243,    41,
      42,    60,    60,    60,    43,    44,   280,    60,   430,   199,
     202,   441,   446,   145,    60,    45,    46,   281,    47,   252,
     339,   204,   155,   156,   157,   158,   159,   160,   161,   300,
     178,   164,   179,   178,   170,   179,   460,   244,   205,     5,
       6,   185,   467,   268,   206,   331,   171,   172,   209,   142,
     174,     8,   175,   189,   190,     9,   269,   270,   271,   272,
     332,   178,    70,   179,   211,   480,   374,   221,   222,   196,
     197,   250,   451,   178,   454,   179,   335,   457,    67,    68,
      69,   273,   463,   274,   275,   276,   277,   207,   208,    71,
      72,    73,   220,   301,   212,   213,   368,   214,   251,   290,
     216,   218,    71,    72,    73,   223,   224,   302,   118,   481,
     178,   235,   179,   303,   246,   340,   249,   341,    74,    75,
      76,    77,    78,    79,    80,   130,   119,   120,   360,   371,
     372,    74,    75,    76,    77,    78,    79,    80,   375,   291,
     364,   365,     6,   134,   426,   297,   376,   264,    71,    72,
      73,   330,   405,     8,   331,   331,   289,     9,   396,   400,
     293,   294,   295,   296,   287,    71,    72,    73,   131,   332,
     332,   401,   403,     3,   125,   434,   133,    74,    75,    76,
      77,    78,    79,    80,   404,   304,   408,   416,   419,     4,
     433,   440,   336,   449,    74,    75,    76,    77,    78,    79,
      80,   135,   136,   137,   138,   139,   140,   141,    71,    72,
      73,     5,     6,    27,     7,   470,    71,    72,    73,   370,
      28,   478,   483,     8,    29,   127,   342,     9,    30,   377,
      74,    75,    76,    77,    78,    79,    80,    74,    75,    76,
      77,    78,    79,    80,   257,    74,    75,    76,    77,    78,
      79,    80,     5,     6,   402,   238,   239,   240,   241,   242,
     243,   421,     6,   415,     8,    27,   410,   236,     9,     0,
     407,   278,    28,     8,   258,   409,    29,     9,     0,     0,
      30,    27,   182,   411,   269,   270,   271,   272,    28,     0,
       0,   124,    29,     0,   128,   129,    30,     0,   132,   244,
     412,   143,     0,     0,     0,   414,   425,     0,   418,   273,
     420,   274,   275,   276,   277,   423,   424,     0,   428,   429,
     439,   431,   432,     0,     0,     0,   435,   436,     0,   437,
     438,     0,     0,     0,   444,   445,   459,    27,   219,     0,
       0,   452,   453,   455,    28,   299,   458,     0,    29,     0,
     462,   464,    30,   466,     0,     0,   469,   476,   269,   270,
     271,   272,   473,    62,    63,    64,    65,    66,    67,    68,
      69,     0,     0,   305,     0,     0,    82,     0,     0,   306,
       0,     0,     0,   273,     0,   274,   275,   276,   277,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     337,   328,    83,     0,     0,     0,   306,     0,     0,    90,
      91,     0,    93,     0,    95,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   373,   328,     0,
       0,     0,     0,   306,   121,   123,   121,   121,   123,   123,
       0,     0,   121,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   442,   328,     0,   447,    62,    63,
      64,    65,    66,    67,    68,    69,     0,     0,     0,     0,
     461,   104,     0,   465,     0,     0,   468,     0,     0,     0,
       0,   471,   472,     0,     0,   474,     0,     0,   475,     0,
       0,     0,   477,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     397,   398,   399,    74,    75,    76,    77,    78,    79,    80,
       0,   119,   120,    49,    50,    51,    52,    53,    54,    55,
      56,    62,    63,    64,    65,    66,    67,    68,    69,    63,
      64,    65,    66,    67,    68,    69,    64,    65,    66,    67,
      68,    69,   225,   226,   227,   228,   229,   230,   238,   239,
     240,   241,   242,   243,    65,    66,    67,    68,    69
};

static const short yycheck[] =
{
       3,   142,    24,   264,   126,   127,     8,     9,     4,     4,
       4,   231,   234,     4,     4,   330,   278,    41,    42,     3,
       3,     3,    95,    80,   146,     3,    28,    29,    30,     3,
       3,     0,   252,     4,   256,    96,     4,   299,    95,    31,
       6,     7,     8,     9,    10,    11,   217,    49,    50,    51,
      52,    53,    54,    55,    56,     3,   371,    48,     4,    50,
      62,    63,    64,    65,    66,    67,    68,    69,    71,    72,
      73,    80,   194,     5,    85,    95,    70,   248,    68,    69,
      12,    13,    14,    15,    95,    80,    82,    82,    49,    49,
     405,    80,   263,    89,    39,    40,     4,    93,    93,     4,
      45,    97,    97,    51,    52,    53,    54,    55,    56,    41,
      42,    95,    95,    95,    46,    47,     4,    95,   422,    80,
      80,    95,    95,   115,    95,    57,    58,     4,    60,    95,
     301,    95,   135,   136,   137,   138,   139,   140,   141,     4,
      48,   144,    50,    48,   147,    50,   450,    95,     3,    81,
      82,   153,   456,     3,     3,    82,   148,   149,    80,     3,
      48,    93,    50,   155,   156,    97,    16,    17,    18,    19,
      97,    48,     3,    50,    95,   479,     4,    71,    70,   171,
     172,     3,   443,    48,   445,    50,    95,   448,    90,    91,
      92,    41,   453,    43,    44,    45,    46,   189,   190,    43,
      44,    45,   204,     3,   196,   197,   328,   199,    80,    80,
     202,   203,    43,    44,    45,   207,   208,     4,     3,   480,
      48,   213,    50,    80,   216,    95,   218,    80,    72,    73,
      74,    75,    76,    77,    78,     3,    80,    81,    80,    85,
      80,    72,    73,    74,    75,    76,    77,    78,    80,   271,
      80,    81,    82,     3,     3,   277,    95,   249,    43,    44,
      45,    79,    79,    93,    82,    82,   269,    97,    95,    95,
     273,   274,   275,   276,   266,    43,    44,    45,     3,    97,
      97,    95,    95,    43,    16,   426,     3,    72,    73,    74,
      75,    76,    77,    78,    98,   287,    95,    95,    95,    59,
      95,     4,   294,    95,    72,    73,    74,    75,    76,    77,
      78,    61,    62,    63,    64,    65,    66,    67,    43,    44,
      45,    81,    82,    82,    84,    95,    43,    44,    45,   332,
      89,    95,     0,    93,    93,    87,   306,    97,    97,   342,
      72,    73,    74,    75,    76,    77,    78,    72,    73,    74,
      75,    76,    77,    78,   237,    72,    73,    74,    75,    76,
      77,    78,    81,    82,   367,    51,    52,    53,    54,    55,
      56,   415,    82,    80,    93,    82,   379,   214,    97,    -1,
     372,     3,    89,    93,   244,   377,    93,    97,    -1,    -1,
      97,    82,    83,   396,    16,    17,    18,    19,    89,    -1,
      -1,    85,    93,    -1,    88,    89,    97,    -1,    92,    95,
     402,    95,    -1,    -1,    -1,   407,   419,    -1,   410,    41,
     412,    43,    44,    45,    46,   417,   418,    -1,   420,   421,
     433,   423,   424,    -1,    -1,    -1,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   449,    82,    83,    -1,
      -1,   443,   444,   445,    89,     3,   448,    -1,    93,    -1,
     452,   453,    97,   455,    -1,    -1,   458,   470,    16,    17,
      18,    19,   464,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,     4,    -1,    -1,    98,    -1,    -1,    10,
      -1,    -1,    -1,    41,    -1,    43,    44,    45,    46,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       4,    42,    36,    -1,    -1,    -1,    10,    -1,    -1,    43,
      44,    -1,    46,    -1,    48,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,     4,    42,    -1,
      -1,    -1,    -1,    10,    84,    85,    86,    87,    88,    89,
      -1,    -1,    92,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,   435,    42,    -1,   438,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,
     451,    98,    -1,   454,    -1,    -1,   457,    -1,    -1,    -1,
      -1,   462,   463,    -1,    -1,   466,    -1,    -1,   469,    -1,
      -1,    -1,   473,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    85,    86,    87,    88,    89,    90,    91,
      92,    85,    86,    87,    88,    89,    90,    91,    92,    86,
      87,    88,    89,    90,    91,    92,    87,    88,    89,    90,
      91,    92,     6,     7,     8,     9,    10,    11,    51,    52,
      53,    54,    55,    56,    88,    89,    90,    91,    92
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#ifdef __cplusplus
# define YYSTD(x) std::x
#else
# define YYSTD(x) x
#endif

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  ifdef __cplusplus
#   include <cstdlib> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T std::size_t
#  else
#   ifdef __STDC__
#    include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#    define YYSIZE_T size_t
#   endif
#  endif
#  define YYSTACK_ALLOC YYSTD (malloc)
#  define YYSTACK_FREE YYSTD (free)
# endif

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Relocate the TYPE STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Type, Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	yymemcpy ((char *) yyptr, (char *) (Stack),			\
		  yysize * (YYSIZE_T) sizeof (Type));			\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (Type) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# ifdef __cplusplus
#  include <cstddef> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T std::size_t
# else
#  ifdef __STDC__
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  ifdef __cplusplus
#   include <cstdio>  /* INFRINGES ON USER NAME SPACE */
#  else
#   include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYFPRINTF YYSTD (fprintf)
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace. [The following comment makes no
   sense to me.  Could someone clarify it?  --akim] Since this is
   uninitialized, it does not stop multiple parsers from coexisting.
   */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#if ! defined (yyoverflow) && ! defined (yymemcpy)
# if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#  define yymemcpy __builtin_memcpy
# else				/* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
#  if defined (__STDC__) || defined (__cplusplus)
yymemcpy (char *yyto, const char *yyfrom, YYSIZE_T yycount)
#  else
yymemcpy (yyto, yyfrom, yycount)
     char *yyto;
     const char *yyfrom;
     YYSIZE_T yycount;
#  endif
{
  register const char *yyf = yyfrom;
  register char *yyt = yyto;
  register YYSIZE_T yyi = yycount;

  while (yyi-- != 0)
    *yyt++ = *yyf++;
}
# endif
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 341 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# ifdef __cplusplus
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else /* !__cplusplus */
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif /* !__cplusplus */
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (short, yyss);
	YYSTACK_RELOCATE (YYSTYPE, yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (YYLTYPE, yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 17:
#line 175 "rcparse.y"
{
	    rcparse_discard_strings ();
	  }
    break;
case 18:
#line 184 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	  }
    break;
case 19:
#line 191 "rcparse.y"
{
	    yyval.pacc = NULL;
	  }
    break;
case 20:
#line 195 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  }
    break;
case 21:
#line 216 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  }
    break;
case 22:
#line 221 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL | ACC_ALT)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  }
    break;
case 23:
#line 233 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = TOUPPER (ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  }
    break;
case 24:
#line 254 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  }
    break;
case 25:
#line 264 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
case 26:
#line 268 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 27:
#line 273 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 28:
#line 280 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  }
    break;
case 29:
#line 284 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  }
    break;
case 30:
#line 289 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  }
    break;
case 31:
#line 293 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  }
    break;
case 32:
#line 297 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  }
    break;
case 33:
#line 301 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  }
    break;
case 34:
#line 310 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 35:
#line 319 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 36:
#line 329 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    }
    break;
case 37:
#line 345 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  }
    break;
case 38:
#line 350 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    }
    break;
case 39:
#line 368 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  }
    break;
case 40:
#line 373 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	    }
    break;
case 41:
#line 392 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	  }
    break;
case 42:
#line 399 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 43:
#line 403 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 45:
#line 411 "rcparse.y"
{
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  }
    break;
case 46:
#line 415 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  }
    break;
case 47:
#line 419 "rcparse.y"
{ style = dialog.style; }
    break;
case 48:
#line 421 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
case 49:
#line 425 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
    break;
case 50:
#line 429 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	  }
    break;
case 51:
#line 435 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
	      }
	  }
    break;
case 52:
#line 448 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  }
    break;
case 53:
#line 452 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 54:
#line 456 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 55:
#line 460 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  }
    break;
case 57:
#line 468 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  }
    break;
case 58:
#line 479 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 59:
#line 485 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 60:
#line 489 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 61:
#line 495 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 62:
#line 499 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 63:
#line 505 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 64:
#line 509 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 65:
#line 515 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  }
    break;
case 66:
#line 522 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 67:
#line 528 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 68:
#line 532 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    }
    break;
case 69:
#line 538 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 70:
#line 543 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 71:
#line 554 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 72:
#line 563 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 73:
#line 576 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].s, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 74:
#line 586 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    }
    break;
case 75:
#line 592 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 76:
#line 596 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 77:
#line 602 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 78:
#line 606 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 79:
#line 612 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 80:
#line 616 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 81:
#line 622 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 82:
#line 626 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 83:
#line 632 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  }
    break;
case 84:
#line 639 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 85:
#line 645 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 86:
#line 651 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 87:
#line 657 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          }
    break;
case 88:
#line 662 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    }
    break;
case 89:
#line 668 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  }
    break;
case 90:
#line 675 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    }
    break;
case 91:
#line 681 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 92:
#line 685 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    }
    break;
case 93:
#line 691 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 94:
#line 695 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    }
    break;
case 95:
#line 701 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 96:
#line 705 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    }
    break;
case 97:
#line 711 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 98:
#line 715 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    }
    break;
case 99:
#line 721 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 100:
#line 725 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    }
    break;
case 101:
#line 731 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 102:
#line 735 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    }
    break;
case 103:
#line 741 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 104:
#line 745 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    }
    break;
case 105:
#line 751 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  }
    break;
case 106:
#line 756 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 107:
#line 758 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-14].s, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  }
    break;
case 108:
#line 774 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].s, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 109:
#line 786 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  }
    break;
case 110:
#line 797 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  }
    break;
case 111:
#line 808 "rcparse.y"
{
	    yyval.s = NULL;
	  }
    break;
case 112:
#line 812 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 113:
#line 816 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 114:
#line 823 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 115:
#line 827 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
case 116:
#line 836 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 118:
#line 842 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
case 120:
#line 848 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 122:
#line 856 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 123:
#line 865 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 124:
#line 875 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 125:
#line 884 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  }
    break;
case 126:
#line 891 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 127:
#line 895 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 128:
#line 912 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  }
    break;
case 129:
#line 916 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  }
    break;
case 130:
#line 920 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 131:
#line 927 "rcparse.y"
{
	    yyval.is = 0;
	  }
    break;
case 132:
#line 931 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  }
    break;
case 133:
#line 935 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  }
    break;
case 134:
#line 942 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  }
    break;
case 135:
#line 946 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  }
    break;
case 136:
#line 950 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  }
    break;
case 137:
#line 954 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  }
    break;
case 138:
#line 958 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  }
    break;
case 139:
#line 962 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  }
    break;
case 140:
#line 971 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  }
    break;
case 141:
#line 978 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  }
    break;
case 142:
#line 982 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  }
    break;
case 143:
#line 999 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  }
    break;
case 144:
#line 1003 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  }
    break;
case 145:
#line 1007 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  }
    break;
case 146:
#line 1011 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  }
    break;
case 147:
#line 1015 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 148:
#line 1019 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 149:
#line 1023 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  }
    break;
case 150:
#line 1028 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  }
    break;
case 151:
#line 1037 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 152:
#line 1046 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  }
    break;
case 153:
#line 1055 "rcparse.y"
{
	    rcparse_rcdata ();
	  }
    break;
case 154:
#line 1059 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 155:
#line 1067 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  }
    break;
case 156:
#line 1072 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  }
    break;
case 157:
#line 1079 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 158:
#line 1087 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 159:
#line 1095 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 160:
#line 1104 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  }
    break;
case 161:
#line 1118 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 164:
#line 1125 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	  }
    break;
case 165:
#line 1129 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	  }
    break;
case 166:
#line 1139 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  }
    break;
case 167:
#line 1143 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  }
    break;
case 168:
#line 1152 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	  }
    break;
case 169:
#line 1159 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  }
    break;
case 170:
#line 1165 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 171:
#line 1171 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  }
    break;
case 172:
#line 1177 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 173:
#line 1182 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 174:
#line 1187 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 175:
#line 1192 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 176:
#line 1197 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  }
    break;
case 177:
#line 1211 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  }
    break;
case 178:
#line 1215 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  }
    break;
case 179:
#line 1219 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  }
    break;
case 180:
#line 1226 "rcparse.y"
{
	    yyval.verstring = NULL;
	  }
    break;
case 181:
#line 1230 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  }
    break;
case 182:
#line 1237 "rcparse.y"
{
	    yyval.vervar = NULL;
	  }
    break;
case 183:
#line 1241 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  }
    break;
case 184:
#line 1250 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  }
    break;
case 185:
#line 1255 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 186:
#line 1271 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 187:
#line 1275 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 188:
#line 1279 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  }
    break;
case 189:
#line 1287 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
case 190:
#line 1292 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      *s = TOUPPER (*s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  }
    break;
case 191:
#line 1309 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  }
    break;
case 192:
#line 1316 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 193:
#line 1322 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  }
    break;
case 194:
#line 1327 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 195:
#line 1332 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  }
    break;
case 196:
#line 1342 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 197:
#line 1348 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 198:
#line 1359 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  }
    break;
case 199:
#line 1365 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  }
    break;
case 200:
#line 1377 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 201:
#line 1382 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  }
    break;
case 202:
#line 1387 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  }
    break;
case 203:
#line 1392 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  }
    break;
case 204:
#line 1397 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  }
    break;
case 205:
#line 1402 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  }
    break;
case 206:
#line 1407 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  }
    break;
case 207:
#line 1417 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 208:
#line 1421 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  }
    break;
case 209:
#line 1438 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 210:
#line 1442 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 211:
#line 1446 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  }
    break;
case 212:
#line 1450 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  }
    break;
case 213:
#line 1457 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 214:
#line 1461 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  }
    break;
case 215:
#line 1470 "rcparse.y"
{
	    yyval.il = 0;
	  }
    break;
case 216:
#line 1474 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 217:
#line 1483 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 218:
#line 1492 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 219:
#line 1501 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 220:
#line 1505 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 221:
#line 1509 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 222:
#line 1514 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 223:
#line 1519 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 224:
#line 1524 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 225:
#line 1529 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 226:
#line 1534 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 227:
#line 1539 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 228:
#line 1544 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 229:
#line 1549 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 230:
#line 1554 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 231:
#line 1565 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  }
    break;
case 232:
#line 1574 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  }
    break;
case 233:
#line 1585 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  }
    break;
case 234:
#line 1589 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  }
    break;
case 235:
#line 1593 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  }
    break;
case 236:
#line 1598 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 237:
#line 1603 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 238:
#line 1608 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 239:
#line 1613 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 240:
#line 1618 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 241:
#line 1623 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 242:
#line 1628 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
case 243:
#line 1633 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  }
    break;
}

#line 727 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1639 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@


1.1.6.2
log
@Update generated files.
@
text
@d2 1
a2 1
   by GNU bison 1.35.  */
d92 1
a92 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
a188 1
# define YYSTYPE_IS_TRIVIAL 1
d201 1
a201 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)
d245 25
a269 25
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   228,   229,   233,   234,   238,   239,   243,   244,   248,
     249,   253,   265,   278,   291,   305,   306,   310,   311,   315,
     316,   320,   321,   325,   326,   330,   337,   346,   357,   369,
     370,   374,   375,   379,   380,   384,   385,   389,   390,   394,
     395,   399,   400,   404,   405,   409,   410,   414,   415,   432,
     440,   450,   461,   462,   464,   467,   468,   472,   473,   477,
     478,   482,   483,   487,   492,   497,   501,   508,   509,   512,
     517,   520,   527,   528,   532,   535,   537,   539,   541,   543,
     545,   547,   554,   555,   558,   561,   565,   571,   574,   580,
     587,   595,   605,   610,   617,   618,   621,   622,   624,   626,
     628,   632,   636,   637,   644,   645,   649,   654,   661,   666,
     673,   674,   681,   688,   692,   696,   700,   704,   708,   709,
     718,   726,   727,   733,   734,   738,   740,   742,   744,   747,
     750,   753,   755,   756,   759,   763,   768,   772,   773,   776,
     777,   780,   782,   784,   786,   788,   790,   792,   794,   796,
     798,   800,   803,   807,   812,   814,   818,   819,   821,   824,
     826,   828,   832,   835,   838,   842,   846,   850,   854,   858,
     862,   866,   870,   873,   875,   877,   881,   884,   888,   892,
     896,   900,   904,   908,   912
d273 92
a364 92
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   116,   137,     0,     0,    21,
     117,   137,     0,     0,    22,   118,   137,     0,     0,    38,
     119,   137,     0,     0,    23,   120,   137,     0,     0,    24,
     121,   137,     0,    10,   138,   184,   183,   140,   183,   183,
     183,   183,   182,   139,     0,    10,   138,   184,   183,   140,
     183,   183,   183,   183,   183,   183,   139,     0,    10,   138,
     184,    95,    80,   140,   183,   183,   183,   183,   182,   139,
       0,    10,   138,   184,    95,    80,   140,   183,   183,   183,
     183,   183,   183,   139,     0,     0,    25,   122,   137,     0,
       0,    26,   123,   137,     0,     0,    27,   124,   137,     0,
       0,    28,   125,   137,     0,     0,    39,   126,   137,     0,
      42,   174,   184,   183,   183,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   182,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   142,   183,   183,   139,     0,     0,
      40,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   129,   137,     0,     0,    31,   130,   137,     0,     0,
      32,   131,   137,     0,     0,    33,   132,   137,     0,     0,
      34,   133,   137,     0,     0,    35,   134,   137,     0,     0,
      36,   135,   137,     0,     0,    37,    80,    95,   184,    95,
     184,    95,   184,    95,   184,    95,   184,    95,   136,   180,
     182,     0,   138,   184,   183,   183,   183,   183,   139,     0,
     138,   184,   183,   183,   183,   183,   144,   182,   139,     0,
     138,   184,   183,   183,   183,   183,   144,   183,   183,   139,
       0,     0,    80,     0,    80,    95,     0,     0,     3,   159,
       4,     0,     0,    95,   141,   180,     0,     0,    95,   143,
     180,     0,     0,    95,   145,   180,     0,   172,    41,   176,
     179,     0,   172,    42,   176,   179,     0,    43,   184,   183,
       0,   172,    46,   175,     3,   150,     4,     0,     0,   150,
     151,     0,    48,    80,   183,   152,     0,    48,    49,     0,
      50,    80,   152,     3,   150,     4,     0,     0,   152,    95,
     153,     0,   152,   153,     0,    51,     0,    52,     0,    53,
       0,    54,     0,    55,     0,    56,     0,   172,    47,   175,
       3,   155,     4,     0,     0,   155,   156,     0,    48,    80,
       0,    48,    80,   183,     0,    48,    80,   183,   183,   182,
       0,    48,    49,     0,    50,    80,     3,   155,     4,     0,
      50,    80,   183,     3,   155,     4,     0,    50,    80,   183,
     183,     3,   155,     4,     0,    50,    80,   183,   183,   183,
     182,     3,   155,     4,     0,   172,    57,   177,   179,     0,
     172,    58,   175,     3,   159,     4,     0,     0,   160,   161,
       0,     0,   162,     0,    83,     0,   185,     0,   162,    95,
      83,     0,   162,    95,   185,     0,     0,    59,   175,     3,
     164,   165,     4,     0,     0,   165,   184,    80,     0,   165,
     184,    95,    80,     0,   172,   172,   175,     3,   159,     4,
       0,   172,   172,   175,   179,     0,   172,    60,   168,     3,
     169,     4,     0,     0,   168,    61,   184,   183,   183,   183,
       0,   168,    62,   184,   183,   183,   183,     0,   168,    63,
     184,     0,   168,    64,   184,     0,   168,    65,   184,     0,
     168,    66,   184,     0,   168,    67,   184,     0,     0,   169,
      68,     3,    71,     3,   170,     4,     4,     0,   169,    69,
       3,    70,    80,   171,     4,     0,     0,   170,    70,    80,
      95,    80,     0,     0,   171,   183,   183,     0,   187,     0,
      81,     0,    80,     0,    80,    95,     0,    81,    95,     0,
     187,    95,     0,   173,     0,     0,   175,   178,     0,   175,
      44,   184,     0,   175,    43,   184,   183,     0,   175,    45,
     184,     0,     0,   176,   178,     0,     0,   177,   178,     0,
      72,     0,    73,     0,    74,     0,    75,     0,    76,     0,
      77,     0,    78,     0,    80,     0,    81,     0,   181,     0,
      79,   181,     0,   180,    85,   181,     0,   180,    85,    79,
     181,     0,    82,     0,    97,   184,    98,     0,     0,   183,
       0,    95,   184,     0,   185,     0,    82,     0,    97,   185,
      98,     0,    93,   185,     0,    89,   185,     0,   185,    90,
     185,     0,   185,    91,   185,     0,   185,    92,   185,     0,
     185,    88,   185,     0,   185,    89,   185,     0,   185,    87,
     185,     0,   185,    86,   185,     0,   185,    85,   185,     0,
      95,   187,     0,   188,     0,    82,     0,    97,   185,    98,
       0,    93,   185,     0,   188,    90,   185,     0,   188,    91,
     185,     0,   188,    92,   185,     0,   188,    88,   185,     0,
     188,    89,   185,     0,   188,    87,   185,     0,   188,    86,
     185,     0,   188,    85,   185,     0
d374 24
a397 24
     164,   165,   166,   167,   168,   169,   170,   175,   185,   190,
     210,   216,   227,   249,   258,   263,   268,   274,   279,   284,
     288,   292,   296,   304,   316,   328,   328,   354,   354,   381,
     381,   411,   416,   422,   424,   430,   434,   439,   443,   447,
     460,   475,   490,   505,   509,   513,   517,   523,   525,   535,
     535,   546,   546,   556,   556,   566,   566,   579,   579,   589,
     589,   599,   610,   619,   632,   643,   643,   653,   653,   663,
     663,   673,   673,   683,   683,   696,   701,   707,   713,   719,
     719,   732,   732,   742,   742,   752,   752,   762,   762,   772,
     772,   782,   782,   792,   792,   802,   802,   812,   812,   829,
     842,   853,   864,   869,   873,   879,   884,   892,   892,   898,
     898,   904,   904,   912,   924,   937,   946,   956,   961,   977,
     982,   986,   992,   997,  1001,  1007,  1012,  1016,  1020,  1024,
    1028,  1036,  1046,  1051,  1067,  1072,  1076,  1080,  1084,  1088,
    1092,  1096,  1105,  1117,  1130,  1130,  1141,  1147,  1153,  1162,
    1170,  1179,  1192,  1192,  1198,  1200,  1207,  1219,  1227,  1238,
    1248,  1255,  1261,  1267,  1272,  1277,  1282,  1287,  1300,  1305,
    1309,  1315,  1320,  1326,  1331,  1339,  1345,  1360,  1365,  1369,
    1376,  1382,  1398,  1406,  1412,  1417,  1422,  1431,  1438,  1448,
    1455,  1466,  1472,  1477,  1482,  1487,  1492,  1497,  1506,  1511,
    1527,  1532,  1536,  1540,  1546,  1551,  1559,  1564,  1572,  1581,
    1590,  1595,  1599,  1604,  1609,  1614,  1619,  1624,  1629,  1634,
    1639,  1644,  1654,  1663,  1674,  1679,  1683,  1688,  1693,  1698,
    1703,  1708,  1713,  1718,  1723
d423 5
a427 5
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
d429 1
a429 1
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
d432 2
a433 2
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
d438 1
a438 1
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
d446 24
a469 24
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   139,   139,   141,   140,   143,
     142,   145,   144,   146,   147,   148,   149,   150,   150,   151,
     151,   151,   152,   152,   152,   153,   153,   153,   153,   153,
     153,   154,   155,   155,   156,   156,   156,   156,   156,   156,
     156,   156,   157,   158,   160,   159,   161,   161,   162,   162,
     162,   162,   164,   163,   165,   165,   165,   166,   166,   167,
     168,   168,   168,   168,   168,   168,   168,   168,   169,   169,
     169,   170,   170,   171,   171,   172,   172,   173,   173,   173,
     174,   174,   175,   175,   175,   175,   175,   176,   176,   177,
     177,   178,   178,   178,   178,   178,   178,   178,   179,   179,
     180,   180,   180,   180,   181,   181,   182,   182,   183,   184,
     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   186,   187,   188,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188
d475 25
a499 25
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,    11,    12,    12,    13,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     6,     8,    10,    11,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     0,    16,     7,
       9,    10,     0,     1,     2,     0,     3,     0,     3,     0,
       3,     0,     3,     4,     4,     3,     6,     0,     2,     4,
       2,     6,     0,     3,     2,     1,     1,     1,     1,     1,
       1,     6,     0,     2,     2,     3,     5,     2,     5,     6,
       7,     9,     4,     6,     0,     2,     0,     1,     1,     1,
       3,     3,     0,     6,     0,     3,     4,     6,     4,     6,
       0,     6,     6,     3,     3,     3,     3,     3,     0,     8,
       7,     0,     5,     0,     3,     1,     1,     1,     2,     2,
       2,     1,     0,     2,     3,     4,     3,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     4,     1,     3,     0,     1,     2,     1,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     1,     1,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3
d507 49
a555 49
       1,     0,     0,   192,   186,   234,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   185,   233,   220,     0,     0,     0,
       0,   219,     0,   236,     0,   192,   199,   197,   199,   199,
     197,   197,   192,   192,   199,   192,   170,   192,     0,     0,
       0,     0,     0,     0,     0,     0,   223,   222,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,   162,
       0,     0,     0,   201,   202,   203,   204,   205,   206,   207,
     193,   235,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   244,   243,   242,   240,   241,
     237,   238,   239,   221,   218,   231,   230,   229,   227,   228,
     224,   225,   226,   164,     0,   194,   196,    18,   208,   209,
     200,    33,   198,    34,     0,     0,     0,   123,   124,   127,
     142,   152,   154,   178,     0,     0,     0,     0,     0,     0,
       0,   154,   168,     0,   195,     0,     0,     0,     0,     0,
       0,     0,   156,     0,     0,     0,   173,   174,   175,   176,
     177,     0,   163,     0,    17,    22,    19,     0,    23,    42,
       0,     0,   126,     0,     0,   128,   141,     0,     0,   143,
     153,   158,   155,   157,   159,   169,     0,     0,     0,     0,
     167,   165,     0,     0,    20,     0,     0,   130,     0,   132,
     147,   144,     0,     0,     0,     0,     0,     0,   166,   232,
       0,    35,    37,   132,     0,   145,   142,     0,   160,   161,
       0,     0,   171,   172,    27,    28,    29,    30,    31,    32,
      21,    24,    43,    43,    39,   129,   127,   135,   136,   137,
     138,   139,   140,     0,   134,   216,     0,   142,     0,   181,
     183,     0,    26,     0,     0,    43,     0,   133,   146,   217,
     148,     0,   142,   216,     0,     0,    25,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    57,     0,   131,
     149,     0,     0,     0,     0,   180,     0,     0,    47,    44,
      48,    45,     0,   214,     0,    46,   210,     0,     0,    54,
      56,    53,     0,    57,   150,   142,   179,     0,   184,    36,
     112,    59,    61,    63,    67,    69,    75,    77,    79,    81,
      91,    93,    95,    97,    99,   101,   103,   105,     0,    65,
      83,    89,     0,    58,   211,     0,     0,     0,    55,    38,
       0,     0,     0,   113,     0,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,     0,   112,   112,   112,   187,     0,   191,     0,
       0,   215,     0,   212,    49,    40,   151,   182,   114,     0,
      60,     0,    62,    64,    68,    70,    76,    78,    80,    82,
      92,    94,    96,    98,   100,   102,   104,   106,     0,    66,
      84,    90,   188,   189,     0,   190,   213,    50,     0,     0,
       0,     0,     0,    51,     0,   117,     0,     0,     0,   115,
      52,     0,     0,     0,     0,     0,   154,    85,     0,     0,
     118,     0,     0,     0,     0,   115,     0,     0,   115,     0,
     116,   119,    86,   216,     0,   216,   121,   109,   216,     0,
       0,   115,   217,   216,   115,   217,     0,   115,   217,     0,
     120,    87,   115,   115,   217,    71,   115,   122,   110,   115,
       0,    88,    73,   115,    72,   111,     0,    74,   107,     0,
     216,   108,     0,     0
d560 10
a569 9
       1,     9,   145,   166,   167,   230,   231,    10,    11,    12,
     232,   233,   255,   125,   253,   287,   333,   345,   346,   347,
     363,   348,   349,   350,   351,   352,   353,   364,   365,   354,
     355,   356,   357,   358,   359,   360,   361,   479,   380,   381,
     427,   416,   422,   443,   450,   448,   456,    13,    14,    15,
      16,   149,   175,   214,   244,    17,   150,   179,    18,    19,
     151,   152,   182,   183,    20,   113,   143,    21,    22,    93,
     153,   264,   265,    23,   368,   369,    32,    84,    83,    80,
     121,   295,   296,   258,   259,   104,    31,   194,    24,    25
d574 1
a574 1
  -32768,    13,   412,-32768,-32768,-32768,-32768,   412,   412,-32768,
d576 47
a622 47
  -32768,-32768,-32768,   111,-32768,   511,-32768,   412,   412,   412,
     -79,   600,   244,-32768,   562,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   412,   412,
     412,   412,   412,   412,   412,   412,-32768,-32768,   576,   412,
  -32768,   412,   412,   412,   412,   412,   412,   412,   412,-32768,
     412,   412,   412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   256,   603,   603,   297,   297,   603,   603,   280,
     337,   603,   345,   100,   231,   607,   613,   567,   172,   172,
  -32768,-32768,-32768,-32768,-32768,   607,   613,   567,   172,   172,
  -32768,-32768,-32768,-32768,   -79,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -60,    63,    63,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   412,   412,   412,   412,   412,   412,
     412,-32768,-32768,     7,-32768,     5,   412,   -79,   -79,    33,
      34,    35,   254,    51,   -79,   -79,-32768,-32768,-32768,-32768,
  -32768,    36,-32768,    60,-32768,-32768,-32768,   -38,-32768,-32768,
     -79,   -79,-32768,   -39,    11,-32768,-32768,    59,    25,-32768,
  -32768,-32768,-32768,    27,   600,-32768,   127,   144,   -79,   -79,
  -32768,-32768,    74,    63,    87,   -79,   -79,-32768,   -79,-32768,
  -32768,   -79,    12,   294,   118,   128,   -79,   -79,-32768,-32768,
     700,-32768,   -79,-32768,    22,   -79,-32768,    14,-32768,   600,
     194,   121,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      23,-32768,-32768,-32768,-32768,   309,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   661,-32768,   -79,    38,-32768,    16,-32768,
  -32768,   700,-32768,   383,   472,-32768,    42,-32768,-32768,-32768,
  -32768,   124,-32768,   -79,    10,     4,-32768,-32768,   412,   126,
     187,    99,   412,   412,   412,   412,   200,-32768,   480,-32768,
  -32768,   125,   204,   207,   135,-32768,   -79,   510,-32768,-32768,
  -32768,-32768,    49,-32768,   412,   136,-32768,   133,   -79,-32768,
  -32768,-32768,   547,-32768,-32768,-32768,-32768,   134,-32768,-32768,
     152,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   153,-32768,
  -32768,-32768,   374,-32768,-32768,   140,   112,   157,-32768,-32768,
     584,   138,   160,   148,   412,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
     152,   152,   158,   152,   152,   152,   161,   163,-32768,   412,
     165,-32768,    49,-32768,   -79,-32768,-32768,-32768,-32768,   170,
  -32768,   412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   412,-32768,
  -32768,-32768,-32768,-32768,   -79,-32768,-32768,   -79,   123,   183,
     -79,   184,   -79,   -79,   183,-32768,   -79,   -79,   412,    17,
  -32768,   -79,    99,   -79,   -79,   190,-32768,-32768,   -79,   -79,
     136,   -79,   -79,   412,   248,    18,   -79,   -79,    19,   195,
  -32768,-32768,-32768,   -79,   -79,   -79,-32768,-32768,   -79,   412,
      99,   245,   -79,   -79,   245,   -79,    99,   245,   -79,   196,
     136,-32768,   245,   245,   -79,-32768,   245,   136,-32768,   245,
     412,-32768,-32768,   245,-32768,-32768,   201,-32768,-32768,    99,
      64,-32768,   295,-32768
d627 2
a628 2
  -32768,-32768,-32768,-32768,-32768,-32768,  -206,-32768,-32768,-32768,
  -32768,-32768,-32768,   212,   -85,  -259,-32768,-32768,-32768,-32768,
d630 7
a636 6
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   281,    -8,
    -212,  -104,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    78,-32768,   113,    92,-32768,  -204,-32768,-32768,-32768,
    -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,-32768,   350,   139,   175,   475,
     416,  -329,  -257,  -258,    29,    -2,    -1,-32768,  -122,-32768
d640 1
a640 1
#define	YYLAST		717
d645 54
a698 53
      30,   161,    47,   147,   148,   282,    33,    34,   285,   164,
     197,   162,   246,   482,   283,   216,    59,   247,   302,   262,
     426,   426,   426,   168,   252,   236,    56,    57,    58,   224,
     225,   226,   227,   228,   229,   334,   146,   172,   176,   180,
     190,   198,   260,   261,   340,   266,   279,    95,    96,    97,
      98,    99,   100,   101,   102,   185,     2,   193,   281,    60,
     105,   106,   107,   108,   109,   110,   111,   112,   114,   115,
     116,   209,     3,   237,   238,   239,   240,   241,   242,   373,
     284,   173,   177,   174,   178,   165,   177,     5,   178,    26,
     173,   199,   174,   430,     4,     5,    27,     6,     7,    59,
      28,   341,     8,   133,    29,   202,     7,    59,   200,    59,
       8,    59,    59,   441,   446,   406,    35,   243,   251,   186,
     187,   460,   203,    36,    37,    38,    39,   467,   280,   304,
     204,   293,   154,   155,   156,   157,   158,   159,   160,   201,
     191,   163,   376,   144,   169,     5,   294,   205,   254,   336,
     480,   184,    40,    41,   208,   192,     7,    42,    43,    59,
       8,   134,   135,   136,   137,   138,   139,   140,    44,    45,
     278,    46,   177,   177,   178,   178,   170,   171,   292,    87,
      88,   293,   210,   188,   189,   451,   177,   454,   178,   220,
     457,   372,     4,     5,   293,   463,   294,   249,   221,   195,
     196,   250,   219,   414,     7,    26,   289,   305,     8,   294,
     370,   306,    27,    85,    86,   307,    28,   206,   207,    91,
      29,   336,   481,   442,   211,   212,   447,   213,   337,   342,
     215,   217,   343,   362,   141,   222,   223,   374,   371,   461,
     377,   234,   465,   378,   245,   468,   248,    69,   426,   291,
     471,   472,   440,   398,   474,   301,   402,   475,   403,   117,
     405,   477,    66,    67,    68,   408,   288,   290,     4,     5,
     297,   298,   299,   300,    70,    71,    72,   263,   415,   418,
       7,     4,     5,   129,     8,   433,   434,    70,    71,    72,
     449,   470,   335,     7,   286,   483,   478,     8,   126,    70,
      71,    72,   344,    73,    74,    75,    76,    77,    78,    79,
     421,   118,   119,   124,   256,   308,    73,    74,    75,    76,
      77,    78,    79,    70,    71,    72,   235,   338,    73,    74,
      75,    76,    77,    78,    79,   257,    26,   181,     0,     0,
     130,     0,   379,    27,     0,     0,     0,    28,   132,     0,
       0,    29,    73,    74,    75,    76,    77,    78,    79,     0,
     237,   238,   239,   240,   241,   242,     0,   404,     0,    73,
      74,    75,    76,    77,    78,    79,    26,   218,     0,   410,
      70,    71,    72,    27,     0,    82,   267,    28,    70,    71,
      72,    29,    89,    90,     0,    92,   411,    94,     0,   268,
     269,   270,   271,   407,   243,     0,     0,     0,   409,    73,
      74,    75,    76,    77,    78,    79,   425,    73,    74,    75,
      76,    77,    78,    79,   272,     0,   273,   274,   275,   276,
       0,   439,     0,   412,     0,     0,   413,     0,     0,   417,
       0,   419,   420,     0,     0,   423,   424,   459,   428,     0,
     429,     0,   431,   432,   366,   367,     5,   435,   436,     0,
     437,   438,     0,     0,     0,   444,   445,     7,   476,     0,
       0,     8,   452,   453,   455,   277,     0,   458,     0,     0,
       0,   462,   464,   303,   466,     0,     0,   469,   268,   269,
     270,   271,     0,   473,    26,     0,   268,   269,   270,   271,
     123,    27,     0,   127,   128,    28,     0,   131,     0,    29,
     142,     0,     0,   272,   309,   273,   274,   275,   276,     0,
     310,   272,     0,   273,   274,   275,   276,     0,     0,     0,
d700 3
a702 3
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   339,   332,     0,     0,     0,     0,   310,   120,   122,
     120,   120,   122,   122,     0,     0,   120,   311,   312,   313,
d704 12
a715 14
     324,   325,   326,   327,   328,   329,   330,   331,   375,   332,
       0,     0,     0,     0,   310,     0,    48,    49,    50,    51,
      52,    53,    54,    55,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   399,   400,   401,    61,    62,    63,
      64,    65,    66,    67,    68,    64,    65,    66,    67,    68,
      81,    61,    62,    63,    64,    65,    66,    67,    68,     0,
       0,     0,     0,     0,   103,    73,    74,    75,    76,    77,
      78,    79,     0,   118,   119,    61,    62,    63,    64,    65,
      66,    67,    68,    62,    63,    64,    65,    66,    67,    68,
      63,    64,    65,    66,    67,    68,   224,   225,   226,   227,
     228,   229,   237,   238,   239,   240,   241,   242
d720 71
a790 72
       2,   141,    23,   125,   126,   263,     7,     8,     4,     4,
      49,     4,   216,     0,     4,     3,    95,     3,   277,     3,
       3,     3,     3,   145,   230,     3,    27,    28,    29,     6,
       7,     8,     9,    10,    11,   292,    96,     4,     4,     4,
       4,    80,     4,   247,   303,   251,     4,    48,    49,    50,
      51,    52,    53,    54,    55,     4,    43,    95,   262,    30,
      61,    62,    63,    64,    65,    66,    67,    68,    70,    71,
      72,   193,    59,    51,    52,    53,    54,    55,    56,   336,
      70,    48,    48,    50,    50,    80,    48,    82,    50,    82,
      48,    80,    50,   422,    81,    82,    89,    84,    93,    95,
      93,   305,    97,     3,    97,    80,    93,    95,    49,    95,
      97,    95,    95,    95,    95,   372,     5,    95,    95,    68,
      69,   450,    95,    12,    13,    14,    15,   456,     4,     4,
       3,    82,   134,   135,   136,   137,   138,   139,   140,    80,
      80,   143,     4,   114,   146,    82,    97,     3,   233,    85,
     479,   152,    41,    42,    80,    95,    93,    46,    47,    95,
      97,    61,    62,    63,    64,    65,    66,    67,    57,    58,
     255,    60,    48,    48,    50,    50,   147,   148,    79,    40,
      41,    82,    95,   154,   155,   443,    48,   445,    50,    71,
     448,    79,    81,    82,    82,   453,    97,     3,    70,   170,
     171,    80,   203,    80,    93,    82,    80,     3,    97,    97,
     332,     4,    89,    38,    39,    80,    93,   188,   189,    44,
      97,    85,   480,   435,   195,   196,   438,   198,    95,    95,
     201,   202,    80,    80,     3,   206,   207,    80,    98,   451,
      80,   212,   454,    95,   215,   457,   217,     3,     3,   270,
     462,   463,     4,    95,   466,   276,    95,   469,    95,     3,
      95,   473,    90,    91,    92,    95,   268,    80,    81,    82,
     272,   273,   274,   275,    43,    44,    45,   248,    95,    95,
      93,    81,    82,     3,    97,    95,   426,    43,    44,    45,
      95,    95,   294,    93,   265,     0,    95,    97,    86,    43,
      44,    45,   310,    72,    73,    74,    75,    76,    77,    78,
     414,    80,    81,    16,   236,   286,    72,    73,    74,    75,
      76,    77,    78,    43,    44,    45,   213,   298,    72,    73,
      74,    75,    76,    77,    78,   243,    82,    83,    -1,    -1,
       3,    -1,   344,    89,    -1,    -1,    -1,    93,     3,    -1,
      -1,    97,    72,    73,    74,    75,    76,    77,    78,    -1,
      51,    52,    53,    54,    55,    56,    -1,   369,    -1,    72,
      73,    74,    75,    76,    77,    78,    82,    83,    -1,   381,
      43,    44,    45,    89,    -1,    35,     3,    93,    43,    44,
      45,    97,    42,    43,    -1,    45,   398,    47,    -1,    16,
      17,    18,    19,   374,    95,    -1,    -1,    -1,   379,    72,
      73,    74,    75,    76,    77,    78,   418,    72,    73,    74,
      75,    76,    77,    78,    41,    -1,    43,    44,    45,    46,
      -1,   433,    -1,   404,    -1,    -1,   407,    -1,    -1,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   449,   419,    -1,
     421,    -1,   423,   424,    80,    81,    82,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,    93,   470,    -1,
      -1,    97,   443,   444,   445,     3,    -1,   448,    -1,    -1,
      -1,   452,   453,     3,   455,    -1,    -1,   458,    16,    17,
      18,    19,    -1,   464,    82,    -1,    16,    17,    18,    19,
      84,    89,    -1,    87,    88,    93,    -1,    91,    -1,    97,
      94,    -1,    -1,    41,     4,    43,    44,    45,    46,    -1,
      10,    41,    -1,    43,    44,    45,    46,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,     4,    42,    -1,    -1,    -1,    -1,    10,    83,    84,
      85,    86,    87,    88,    -1,    -1,    91,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     4,    42,
      -1,    -1,    -1,    -1,    10,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,    85,    86,    87,
      88,    89,    90,    91,    92,    88,    89,    90,    91,    92,
      98,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    98,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    85,    86,    87,    88,    89,
      90,    91,    92,    86,    87,    88,    89,    90,    91,    92,
      87,    88,    89,    90,    91,    92,     6,     7,     8,     9,
      10,    11,    51,    52,    53,    54,    55,    56
d832 6
d860 8
a867 3
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
d869 2
a870 2
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
a871 6
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d898 1
a898 19
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
d903 1
a903 1
# define YYSTACK_RELOCATE(Stack)					\
d907 2
a908 1
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
d910 1
a910 1
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
d915 1
a915 1
#endif
d925 8
a932 3
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
d1011 6
a1016 2
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
d1024 4
a1027 2
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
d1053 27
d1132 1
a1132 1
#line 315 "/usr/share/bison/bison.simple"
d1142 1
a1142 1
# if defined (__STDC__) || defined (__cplusplus)
d1145 1
a1145 1
# else
d1148 1
a1148 1
# endif
a1321 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d1335 2
a1336 2
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
d1338 1
a1338 1
	YYSTACK_RELOCATE (yyls);
a1343 1
# endif
d1522 1
a1522 1
#line 177 "rcparse.y"
a1523 3
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
d1528 1
a1528 1
#line 187 "rcparse.y"
d1530 1
a1530 1
	    yyval.pacc = NULL;
d1536 6
d1559 2
a1560 2
case 20:
#line 212 "rcparse.y"
d1566 2
a1567 2
case 21:
#line 217 "rcparse.y"
d1577 2
a1578 2
case 22:
#line 229 "rcparse.y"
d1600 2
a1601 2
case 23:
#line 250 "rcparse.y"
a1608 6
case 24:
#line 260 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  }
    break;
d1612 1
a1612 1
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
d1616 1
a1616 1
#line 269 "rcparse.y"
d1618 1
a1618 1
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
d1622 1
a1622 1
#line 276 "rcparse.y"
d1624 1
a1624 1
	    yyval.is = ACC_VIRTKEY;
d1630 1
a1630 2
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
d1634 1
a1634 1
#line 285 "rcparse.y"
d1636 2
a1637 1
	    yyval.is = ACC_NOINVERT;
d1643 1
a1643 1
	    yyval.is = ACC_SHIFT;
d1649 1
a1649 1
	    yyval.is = ACC_CONTROL;
d1655 6
d1664 2
a1665 2
case 33:
#line 306 "rcparse.y"
a1667 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d1670 2
a1671 2
case 34:
#line 318 "rcparse.y"
a1673 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d1676 2
a1677 2
case 35:
#line 331 "rcparse.y"
a1691 1
	      style = 0;
d1694 2
a1695 2
case 36:
#line 348 "rcparse.y"
a1697 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d1700 2
a1701 2
case 37:
#line 356 "rcparse.y"
a1717 1
	      style = 0;
d1720 2
a1721 2
case 38:
#line 375 "rcparse.y"
a1723 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d1726 2
a1727 2
case 39:
#line 383 "rcparse.y"
a1744 1
	      style = 0;
d1747 2
a1748 2
case 40:
#line 403 "rcparse.y"
a1750 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d1753 2
a1754 2
case 41:
#line 413 "rcparse.y"
d1759 2
a1760 2
case 42:
#line 417 "rcparse.y"
d1765 2
a1766 2
case 44:
#line 425 "rcparse.y"
a1767 2
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
d1771 2
a1772 2
case 45:
#line 431 "rcparse.y"
a1776 6
case 46:
#line 436 "rcparse.y"
{
	    dialog.style = style;
	  }
    break;
d1778 2
a1779 4
#line 440 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  }
d1782 1
a1782 1
#line 444 "rcparse.y"
d1784 1
a1784 1
	    res_string_to_id (& dialog.class, yyvsp[0].s);
d1788 1
a1788 1
#line 448 "rcparse.y"
d1790 1
a1790 10
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
d1794 1
a1794 1
#line 461 "rcparse.y"
d1797 2
a1798 11
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
d1802 1
a1802 1
#line 476 "rcparse.y"
a1804 1
	    style |= DS_SETFONT;
a1812 1
		dialog.ex->charset = 1;
d1817 1
a1817 1
#line 491 "rcparse.y"
d1819 1
a1819 12
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
d1823 1
a1823 1
#line 506 "rcparse.y"
d1825 1
a1825 1
	    dialog.menu = yyvsp[0].id;
d1829 1
a1829 1
#line 510 "rcparse.y"
d1831 1
a1831 1
	    sub_res_info.characteristics = yyvsp[0].il;
d1835 1
a1835 7
#line 514 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 518 "rcparse.y"
d1840 2
a1841 2
case 58:
#line 526 "rcparse.y"
d1850 2
a1851 2
case 59:
#line 537 "rcparse.y"
d1858 2
a1859 2
case 60:
#line 543 "rcparse.y"
d1864 2
a1865 2
case 61:
#line 547 "rcparse.y"
d1872 2
a1873 2
case 62:
#line 553 "rcparse.y"
d1878 2
a1879 2
case 63:
#line 557 "rcparse.y"
d1886 2
a1887 2
case 64:
#line 563 "rcparse.y"
d1892 2
a1893 2
case 65:
#line 567 "rcparse.y"
d1900 2
a1901 2
case 66:
#line 573 "rcparse.y"
d1905 1
a1905 1
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
d1909 2
a1910 2
case 67:
#line 580 "rcparse.y"
d1917 2
a1918 2
case 68:
#line 586 "rcparse.y"
d1923 2
a1924 2
case 69:
#line 590 "rcparse.y"
d1931 2
a1932 2
case 70:
#line 596 "rcparse.y"
d1937 2
a1938 2
case 71:
#line 601 "rcparse.y"
d1949 2
a1950 2
case 72:
#line 612 "rcparse.y"
d1959 2
a1960 2
case 73:
#line 621 "rcparse.y"
d1970 1
a1970 1
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
d1973 2
a1974 2
case 74:
#line 634 "rcparse.y"
d1982 1
a1982 1
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
d1985 2
a1986 2
case 75:
#line 644 "rcparse.y"
d1993 2
a1994 2
case 76:
#line 650 "rcparse.y"
d1999 2
a2000 2
case 77:
#line 654 "rcparse.y"
d2007 2
a2008 2
case 78:
#line 660 "rcparse.y"
d2013 2
a2014 2
case 79:
#line 664 "rcparse.y"
d2021 2
a2022 2
case 80:
#line 670 "rcparse.y"
d2027 2
a2028 2
case 81:
#line 674 "rcparse.y"
d2035 2
a2036 2
case 82:
#line 680 "rcparse.y"
d2041 2
a2042 2
case 83:
#line 684 "rcparse.y"
d2049 2
a2050 2
case 84:
#line 690 "rcparse.y"
d2058 2
a2059 2
case 85:
#line 697 "rcparse.y"
d2065 2
a2066 2
case 86:
#line 703 "rcparse.y"
d2072 2
a2073 2
case 87:
#line 709 "rcparse.y"
d2079 2
a2080 2
case 88:
#line 715 "rcparse.y"
d2086 2
a2087 2
case 89:
#line 720 "rcparse.y"
d2094 2
a2095 2
case 90:
#line 726 "rcparse.y"
d2103 2
a2104 2
case 91:
#line 733 "rcparse.y"
d2111 2
a2112 2
case 92:
#line 739 "rcparse.y"
d2117 2
a2118 2
case 93:
#line 743 "rcparse.y"
d2125 2
a2126 2
case 94:
#line 749 "rcparse.y"
d2131 2
a2132 2
case 95:
#line 753 "rcparse.y"
d2139 2
a2140 2
case 96:
#line 759 "rcparse.y"
d2145 2
a2146 2
case 97:
#line 763 "rcparse.y"
d2153 2
a2154 2
case 98:
#line 769 "rcparse.y"
d2159 2
a2160 2
case 99:
#line 773 "rcparse.y"
d2167 2
a2168 2
case 100:
#line 779 "rcparse.y"
d2173 2
a2174 2
case 101:
#line 783 "rcparse.y"
d2181 2
a2182 2
case 102:
#line 789 "rcparse.y"
d2187 2
a2188 2
case 103:
#line 793 "rcparse.y"
d2195 2
a2196 2
case 104:
#line 799 "rcparse.y"
d2201 2
a2202 2
case 105:
#line 803 "rcparse.y"
d2209 2
a2210 2
case 106:
#line 809 "rcparse.y"
d2215 2
a2216 2
case 107:
#line 814 "rcparse.y"
d2219 2
a2220 2
case 108:
#line 816 "rcparse.y"
d2226 2
a2227 2
case 109:
#line 832 "rcparse.y"
d2239 2
a2240 2
case 110:
#line 844 "rcparse.y"
d2251 2
a2252 2
case 111:
#line 855 "rcparse.y"
d2261 2
a2262 2
case 112:
#line 866 "rcparse.y"
d2267 2
a2268 2
case 113:
#line 870 "rcparse.y"
d2273 2
a2274 2
case 114:
#line 874 "rcparse.y"
d2279 2
a2280 2
case 115:
#line 881 "rcparse.y"
d2285 2
a2286 2
case 116:
#line 885 "rcparse.y"
d2291 2
a2292 2
case 117:
#line 894 "rcparse.y"
d2295 2
a2296 2
case 119:
#line 900 "rcparse.y"
d2299 2
a2300 2
case 121:
#line 906 "rcparse.y"
d2303 2
a2304 2
case 123:
#line 914 "rcparse.y"
a2306 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2309 2
a2310 2
case 124:
#line 926 "rcparse.y"
a2312 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2315 2
a2316 2
case 125:
#line 939 "rcparse.y"
d2321 2
a2322 2
case 126:
#line 948 "rcparse.y"
a2324 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2327 2
a2328 2
case 127:
#line 958 "rcparse.y"
d2333 2
a2334 2
case 128:
#line 962 "rcparse.y"
d2349 2
a2350 2
case 129:
#line 979 "rcparse.y"
d2355 2
a2356 2
case 130:
#line 983 "rcparse.y"
d2361 2
a2362 2
case 131:
#line 987 "rcparse.y"
d2367 2
a2368 2
case 132:
#line 994 "rcparse.y"
d2373 2
a2374 2
case 133:
#line 998 "rcparse.y"
d2379 2
a2380 2
case 134:
#line 1002 "rcparse.y"
d2385 2
a2386 2
case 135:
#line 1009 "rcparse.y"
d2391 2
a2392 2
case 136:
#line 1013 "rcparse.y"
d2397 2
a2398 2
case 137:
#line 1017 "rcparse.y"
d2403 2
a2404 2
case 138:
#line 1021 "rcparse.y"
d2409 2
a2410 2
case 139:
#line 1025 "rcparse.y"
d2415 2
a2416 2
case 140:
#line 1029 "rcparse.y"
d2421 2
a2422 2
case 141:
#line 1038 "rcparse.y"
a2424 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2427 2
a2428 2
case 142:
#line 1048 "rcparse.y"
d2433 2
a2434 2
case 143:
#line 1052 "rcparse.y"
d2449 2
a2450 2
case 144:
#line 1069 "rcparse.y"
d2455 2
a2456 2
case 145:
#line 1073 "rcparse.y"
d2461 2
a2462 2
case 146:
#line 1077 "rcparse.y"
d2467 2
a2468 2
case 147:
#line 1081 "rcparse.y"
d2473 2
a2474 2
case 148:
#line 1085 "rcparse.y"
d2479 2
a2480 2
case 149:
#line 1089 "rcparse.y"
d2485 2
a2486 2
case 150:
#line 1093 "rcparse.y"
d2491 2
a2492 2
case 151:
#line 1098 "rcparse.y"
d2497 2
a2498 2
case 152:
#line 1107 "rcparse.y"
a2500 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2503 2
a2504 2
case 153:
#line 1119 "rcparse.y"
a2506 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2509 2
a2510 2
case 154:
#line 1131 "rcparse.y"
d2515 2
a2516 2
case 155:
#line 1135 "rcparse.y"
d2522 2
a2523 2
case 156:
#line 1143 "rcparse.y"
d2529 2
a2530 2
case 157:
#line 1148 "rcparse.y"
d2535 2
a2536 2
case 158:
#line 1155 "rcparse.y"
d2545 2
a2546 2
case 159:
#line 1163 "rcparse.y"
d2555 2
a2556 2
case 160:
#line 1171 "rcparse.y"
d2566 2
a2567 2
case 161:
#line 1180 "rcparse.y"
d2577 2
a2578 2
case 162:
#line 1194 "rcparse.y"
d2581 2
a2582 2
case 165:
#line 1201 "rcparse.y"
a2584 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2587 2
a2588 2
case 166:
#line 1208 "rcparse.y"
a2590 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2593 2
a2594 2
case 167:
#line 1221 "rcparse.y"
a2596 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2599 2
a2600 2
case 168:
#line 1228 "rcparse.y"
a2602 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2605 2
a2606 2
case 169:
#line 1240 "rcparse.y"
a2608 3
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
d2611 2
a2612 2
case 170:
#line 1250 "rcparse.y"
d2619 2
a2620 2
case 171:
#line 1256 "rcparse.y"
d2627 2
a2628 2
case 172:
#line 1262 "rcparse.y"
d2635 2
a2636 2
case 173:
#line 1268 "rcparse.y"
d2642 2
a2643 2
case 174:
#line 1273 "rcparse.y"
d2649 2
a2650 2
case 175:
#line 1278 "rcparse.y"
d2656 2
a2657 2
case 176:
#line 1283 "rcparse.y"
d2663 2
a2664 2
case 177:
#line 1288 "rcparse.y"
d2670 2
a2671 2
case 178:
#line 1302 "rcparse.y"
d2676 2
a2677 2
case 179:
#line 1306 "rcparse.y"
d2682 2
a2683 2
case 180:
#line 1310 "rcparse.y"
d2688 2
a2689 2
case 181:
#line 1317 "rcparse.y"
d2694 2
a2695 2
case 182:
#line 1321 "rcparse.y"
d2700 2
a2701 2
case 183:
#line 1328 "rcparse.y"
d2706 2
a2707 2
case 184:
#line 1332 "rcparse.y"
d2712 2
a2713 2
case 185:
#line 1341 "rcparse.y"
d2719 2
a2720 2
case 186:
#line 1346 "rcparse.y"
d2732 2
a2733 2
case 187:
#line 1362 "rcparse.y"
d2738 2
a2739 2
case 188:
#line 1366 "rcparse.y"
d2744 2
a2745 2
case 189:
#line 1370 "rcparse.y"
d2750 2
a2751 2
case 190:
#line 1378 "rcparse.y"
d2757 2
a2758 2
case 191:
#line 1383 "rcparse.y"
d2770 2
a2771 2
case 192:
#line 1400 "rcparse.y"
d2776 1
a2776 1
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
d2779 2
a2780 2
case 193:
#line 1407 "rcparse.y"
d2787 2
a2788 2
case 194:
#line 1413 "rcparse.y"
d2794 2
a2795 2
case 195:
#line 1418 "rcparse.y"
d2801 2
a2802 2
case 196:
#line 1423 "rcparse.y"
d2808 2
a2809 2
case 197:
#line 1433 "rcparse.y"
d2816 2
a2817 2
case 198:
#line 1439 "rcparse.y"
d2824 2
a2825 2
case 199:
#line 1450 "rcparse.y"
d2829 1
a2829 1
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
d2832 2
a2833 2
case 200:
#line 1456 "rcparse.y"
d2840 2
a2841 2
case 201:
#line 1468 "rcparse.y"
d2847 2
a2848 2
case 202:
#line 1473 "rcparse.y"
d2854 2
a2855 2
case 203:
#line 1478 "rcparse.y"
d2861 2
a2862 2
case 204:
#line 1483 "rcparse.y"
d2868 2
a2869 2
case 205:
#line 1488 "rcparse.y"
d2875 2
a2876 2
case 206:
#line 1493 "rcparse.y"
d2882 2
a2883 2
case 207:
#line 1498 "rcparse.y"
d2889 2
a2890 2
case 208:
#line 1508 "rcparse.y"
d2895 2
a2896 2
case 209:
#line 1512 "rcparse.y"
d2901 2
a2902 2
case 210:
#line 1529 "rcparse.y"
d2907 2
a2908 2
case 211:
#line 1533 "rcparse.y"
d2913 2
a2914 2
case 212:
#line 1537 "rcparse.y"
d2919 2
a2920 2
case 213:
#line 1541 "rcparse.y"
d2925 2
a2926 2
case 214:
#line 1548 "rcparse.y"
d2931 2
a2932 2
case 215:
#line 1552 "rcparse.y"
d2937 2
a2938 2
case 216:
#line 1561 "rcparse.y"
d2943 2
a2944 2
case 217:
#line 1565 "rcparse.y"
d2949 2
a2950 2
case 218:
#line 1574 "rcparse.y"
d2955 2
a2956 2
case 219:
#line 1583 "rcparse.y"
d2961 2
a2962 2
case 220:
#line 1592 "rcparse.y"
d2967 2
a2968 2
case 221:
#line 1596 "rcparse.y"
d2973 2
a2974 2
case 222:
#line 1600 "rcparse.y"
d2980 2
a2981 2
case 223:
#line 1605 "rcparse.y"
d2987 2
a2988 2
case 224:
#line 1610 "rcparse.y"
d2994 2
a2995 2
case 225:
#line 1615 "rcparse.y"
d3001 2
a3002 2
case 226:
#line 1620 "rcparse.y"
d3008 2
a3009 2
case 227:
#line 1625 "rcparse.y"
d3015 2
a3016 2
case 228:
#line 1630 "rcparse.y"
d3022 2
a3023 2
case 229:
#line 1635 "rcparse.y"
d3029 2
a3030 2
case 230:
#line 1640 "rcparse.y"
d3036 2
a3037 2
case 231:
#line 1645 "rcparse.y"
d3043 2
a3044 2
case 232:
#line 1656 "rcparse.y"
d3049 2
a3050 2
case 233:
#line 1665 "rcparse.y"
d3055 2
a3056 2
case 234:
#line 1676 "rcparse.y"
d3061 2
a3062 2
case 235:
#line 1680 "rcparse.y"
d3067 2
a3068 2
case 236:
#line 1684 "rcparse.y"
d3074 2
a3075 2
case 237:
#line 1689 "rcparse.y"
d3081 2
a3082 2
case 238:
#line 1694 "rcparse.y"
d3088 2
a3089 2
case 239:
#line 1699 "rcparse.y"
d3095 2
a3096 2
case 240:
#line 1704 "rcparse.y"
d3102 2
a3103 2
case 241:
#line 1709 "rcparse.y"
d3109 2
a3110 2
case 242:
#line 1714 "rcparse.y"
d3116 2
a3117 2
case 243:
#line 1719 "rcparse.y"
d3123 2
a3124 2
case 244:
#line 1724 "rcparse.y"
d3132 1
a3132 1
#line 705 "/usr/share/bison/bison.simple"
d3363 1
a3363 1
#line 1730 "rcparse.y"
@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 3152

/*  A Bison parser, made from rcparse.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BEG	257
#define	END	258
#define	ACCELERATORS	259
#define	VIRTKEY	260
#define	ASCII	261
#define	NOINVERT	262
#define	SHIFT	263
#define	CONTROL	264
#define	ALT	265
#define	BITMAP	266
#define	CURSOR	267
#define	DIALOG	268
#define	DIALOGEX	269
#define	EXSTYLE	270
#define	CAPTION	271
#define	CLASS	272
#define	STYLE	273
#define	AUTO3STATE	274
#define	AUTOCHECKBOX	275
#define	AUTORADIOBUTTON	276
#define	CHECKBOX	277
#define	COMBOBOX	278
#define	CTEXT	279
#define	DEFPUSHBUTTON	280
#define	EDITTEXT	281
#define	GROUPBOX	282
#define	LISTBOX	283
#define	LTEXT	284
#define	PUSHBOX	285
#define	PUSHBUTTON	286
#define	RADIOBUTTON	287
#define	RTEXT	288
#define	SCROLLBAR	289
#define	STATE3	290
#define	USERBUTTON	291
#define	BEDIT	292
#define	HEDIT	293
#define	IEDIT	294
#define	FONT	295
#define	ICON	296
#define	LANGUAGE	297
#define	CHARACTERISTICS	298
#define	VERSIONK	299
#define	MENU	300
#define	MENUEX	301
#define	MENUITEM	302
#define	SEPARATOR	303
#define	POPUP	304
#define	CHECKED	305
#define	GRAYED	306
#define	HELP	307
#define	INACTIVE	308
#define	MENUBARBREAK	309
#define	MENUBREAK	310
#define	MESSAGETABLE	311
#define	RCDATA	312
#define	STRINGTABLE	313
#define	VERSIONINFO	314
#define	FILEVERSION	315
#define	PRODUCTVERSION	316
#define	FILEFLAGSMASK	317
#define	FILEFLAGS	318
#define	FILEOS	319
#define	FILETYPE	320
#define	FILESUBTYPE	321
#define	BLOCKSTRINGFILEINFO	322
#define	BLOCKVARFILEINFO	323
#define	VALUE	324
#define	BLOCK	325
#define	MOVEABLE	326
#define	FIXED	327
#define	PURE	328
#define	IMPURE	329
#define	PRELOAD	330
#define	LOADONCALL	331
#define	DISCARDABLE	332
#define	NOT	333
#define	QUOTEDSTRING	334
#define	STRING	335
#define	NUMBER	336
#define	SIZEDSTRING	337
#define	IGNORED_TOKEN	338
#define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"

#include <ctype.h>

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 59 "rcparse.y"
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		483
#define	YYFLAG		-32768
#define	YYNTBASE	99

#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 191)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    92,    87,     2,    97,
    98,    90,    88,    95,    89,     2,    91,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    86,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    85,     2,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     5,     9,    13,    17,    21,    25,    29,    33,
    37,    41,    45,    49,    53,    57,    61,    62,    69,    70,
    73,    76,    81,    83,    85,    87,    91,    94,    96,    98,
   100,   102,   104,   106,   111,   116,   117,   131,   132,   146,
   147,   162,   163,   167,   168,   172,   176,   177,   182,   186,
   192,   200,   204,   208,   213,   217,   218,   221,   222,   226,
   227,   231,   232,   236,   237,   241,   242,   246,   247,   251,
   263,   276,   289,   303,   304,   308,   309,   313,   314,   318,
   319,   323,   324,   328,   335,   344,   355,   367,   368,   372,
   373,   377,   378,   382,   383,   387,   388,   392,   393,   397,
   398,   402,   403,   407,   408,   412,   413,   430,   438,   448,
   459,   460,   462,   465,   466,   470,   471,   475,   476,   480,
   481,   485,   490,   495,   499,   506,   507,   510,   515,   518,
   525,   526,   530,   533,   535,   537,   539,   541,   543,   545,
   552,   553,   556,   559,   563,   569,   572,   578,   585,   593,
   603,   608,   615,   616,   619,   620,   622,   624,   626,   630,
   634,   635,   642,   643,   647,   652,   659,   664,   671,   672,
   679,   686,   690,   694,   698,   702,   706,   707,   716,   724,
   725,   731,   732,   736,   738,   740,   742,   745,   748,   751,
   753,   754,   757,   761,   766,   770,   771,   774,   775,   778,
   780,   782,   784,   786,   788,   790,   792,   794,   796,   798,
   801,   805,   810,   812,   816,   817,   819,   822,   824,   826,
   830,   833,   836,   840,   844,   848,   852,   856,   860,   864,
   868,   871,   873,   875,   879,   882,   886,   890,   894,   898,
   902,   906,   910
};

static const short yyrhs[] = {    -1,
    99,   100,   101,     0,    99,   100,   107,     0,    99,   100,
   108,     0,    99,   100,   109,     0,    99,   100,   148,     0,
    99,   100,   149,     0,    99,   100,   150,     0,    99,   100,
   151,     0,    99,   100,   156,     0,    99,   100,   159,     0,
    99,   100,   160,     0,    99,   100,   165,     0,    99,   100,
   168,     0,    99,   100,   169,     0,    99,   100,    84,     0,
     0,   174,     5,   177,     3,   102,     4,     0,     0,   102,
   103,     0,   104,   188,     0,   104,   188,    95,   105,     0,
    80,     0,   189,     0,   106,     0,   105,    95,   106,     0,
   105,   106,     0,     6,     0,     7,     0,     8,     0,     9,
     0,    10,     0,    11,     0,   174,    12,   179,   181,     0,
   174,    13,   178,   181,     0,     0,   174,    14,   179,   113,
   189,   185,   185,   185,   110,   114,     3,   116,     4,     0,
     0,   174,    15,   179,   113,   189,   185,   185,   185,   111,
   114,     3,   116,     4,     0,     0,   174,    15,   179,   113,
   189,   185,   185,   185,   185,   112,   114,     3,   116,     4,
     0,     0,    16,    96,   186,     0,     0,   114,    17,    80,
     0,   114,    18,   174,     0,     0,   114,    19,   115,   182,
     0,   114,    16,   186,     0,   114,    41,   186,    95,    80,
     0,   114,    41,   186,    95,    80,   185,   185,     0,   114,
    46,   174,     0,   114,    44,   186,     0,   114,    43,   186,
   185,     0,   114,    45,   186,     0,     0,   116,   117,     0,
     0,    20,   118,   139,     0,     0,    21,   119,   139,     0,
     0,    22,   120,   139,     0,     0,    38,   121,   139,     0,
     0,    23,   122,   139,     0,     0,    24,   123,   139,     0,
    10,   140,   186,   185,   142,   185,   185,   185,   185,   184,
   141,     0,    10,   140,   186,   185,   142,   185,   185,   185,
   185,   185,   185,   141,     0,    10,   140,   186,    95,    80,
   142,   185,   185,   185,   185,   184,   141,     0,    10,   140,
   186,    95,    80,   142,   185,   185,   185,   185,   185,   185,
   141,     0,     0,    25,   124,   139,     0,     0,    26,   125,
   139,     0,     0,    27,   126,   139,     0,     0,    28,   127,
   139,     0,     0,    39,   128,   139,     0,    42,   176,   186,
   185,   185,   141,     0,    42,   176,   186,   185,   185,   185,
   185,   141,     0,    42,   176,   186,   185,   185,   185,   185,
   144,   184,   141,     0,    42,   176,   186,   185,   185,   185,
   185,   144,   185,   185,   141,     0,     0,    40,   129,   139,
     0,     0,    29,   130,   139,     0,     0,    30,   131,   139,
     0,     0,    31,   132,   139,     0,     0,    32,   133,   139,
     0,     0,    33,   134,   139,     0,     0,    34,   135,   139,
     0,     0,    35,   136,   139,     0,     0,    36,   137,   139,
     0,     0,    37,    80,    95,   186,    95,   186,    95,   186,
    95,   186,    95,   186,    95,   138,   182,   184,     0,   140,
   186,   185,   185,   185,   185,   141,     0,   140,   186,   185,
   185,   185,   185,   146,   184,   141,     0,   140,   186,   185,
   185,   185,   185,   146,   185,   185,   141,     0,     0,    80,
     0,    80,    95,     0,     0,     3,   161,     4,     0,     0,
    95,   143,   182,     0,     0,    95,   145,   182,     0,     0,
    95,   147,   182,     0,   174,    41,   178,   181,     0,   174,
    42,   178,   181,     0,    43,   186,   185,     0,   174,    46,
   177,     3,   152,     4,     0,     0,   152,   153,     0,    48,
    80,   185,   154,     0,    48,    49,     0,    50,    80,   154,
     3,   152,     4,     0,     0,   154,    95,   155,     0,   154,
   155,     0,    51,     0,    52,     0,    53,     0,    54,     0,
    55,     0,    56,     0,   174,    47,   177,     3,   157,     4,
     0,     0,   157,   158,     0,    48,    80,     0,    48,    80,
   185,     0,    48,    80,   185,   185,   184,     0,    48,    49,
     0,    50,    80,     3,   157,     4,     0,    50,    80,   185,
     3,   157,     4,     0,    50,    80,   185,   185,     3,   157,
     4,     0,    50,    80,   185,   185,   185,   184,     3,   157,
     4,     0,   174,    57,   179,   181,     0,   174,    58,   177,
     3,   161,     4,     0,     0,   162,   163,     0,     0,   164,
     0,    83,     0,   187,     0,   164,    95,    83,     0,   164,
    95,   187,     0,     0,    59,   177,     3,   166,   167,     4,
     0,     0,   167,   186,    80,     0,   167,   186,    95,    80,
     0,   174,   174,   177,     3,   161,     4,     0,   174,   174,
   177,   181,     0,   174,    60,   170,     3,   171,     4,     0,
     0,   170,    61,   186,   185,   185,   185,     0,   170,    62,
   186,   185,   185,   185,     0,   170,    63,   186,     0,   170,
    64,   186,     0,   170,    65,   186,     0,   170,    66,   186,
     0,   170,    67,   186,     0,     0,   171,    68,     3,    71,
     3,   172,     4,     4,     0,   171,    69,     3,    70,    80,
   173,     4,     0,     0,   172,    70,    80,    95,    80,     0,
     0,   173,   185,   185,     0,   189,     0,    81,     0,    80,
     0,    80,    95,     0,    81,    95,     0,   189,    95,     0,
   175,     0,     0,   177,   180,     0,   177,    44,   186,     0,
   177,    43,   186,   185,     0,   177,    45,   186,     0,     0,
   178,   180,     0,     0,   179,   180,     0,    72,     0,    73,
     0,    74,     0,    75,     0,    76,     0,    77,     0,    78,
     0,    80,     0,    81,     0,   183,     0,    79,   183,     0,
   182,    85,   183,     0,   182,    85,    79,   183,     0,    82,
     0,    97,   186,    98,     0,     0,   185,     0,    95,   186,
     0,   187,     0,    82,     0,    97,   187,    98,     0,    93,
   187,     0,    89,   187,     0,   187,    90,   187,     0,   187,
    91,   187,     0,   187,    92,   187,     0,   187,    88,   187,
     0,   187,    89,   187,     0,   187,    87,   187,     0,   187,
    86,   187,     0,   187,    85,   187,     0,    95,   189,     0,
   190,     0,    82,     0,    97,   187,    98,     0,    93,   187,
     0,   190,    90,   187,     0,   190,    91,   187,     0,   190,
    92,   187,     0,   190,    88,   187,     0,   190,    89,   187,
     0,   190,    87,   187,     0,   190,    86,   187,     0,   190,
    85,   187,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   155,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   174,   183,   190,   195,
   215,   221,   232,   254,   263,   268,   273,   279,   284,   289,
   293,   297,   301,   309,   318,   327,   345,   349,   368,   372,
   392,   398,   403,   409,   411,   415,   419,   422,   425,   429,
   435,   448,   452,   456,   460,   466,   468,   478,   486,   489,
   496,   499,   506,   509,   516,   522,   529,   532,   539,   542,
   553,   562,   575,   586,   593,   596,   603,   606,   613,   616,
   623,   626,   633,   639,   644,   650,   656,   662,   669,   675,
   682,   685,   692,   695,   702,   705,   712,   715,   722,   725,
   732,   735,   742,   745,   752,   755,   758,   772,   785,   796,
   807,   812,   816,   822,   827,   835,   839,   841,   845,   847,
   851,   855,   864,   874,   883,   890,   895,   911,   916,   920,
   926,   931,   935,   941,   946,   950,   954,   958,   962,   970,
   977,   982,   998,  1003,  1007,  1011,  1015,  1019,  1023,  1027,
  1036,  1045,  1055,  1060,  1066,  1072,  1078,  1087,  1095,  1104,
  1117,  1120,  1123,  1125,  1129,  1138,  1143,  1151,  1158,  1165,
  1171,  1177,  1182,  1187,  1192,  1197,  1210,  1215,  1219,  1225,
  1230,  1236,  1241,  1249,  1255,  1271,  1276,  1280,  1287,  1293,
  1310,  1318,  1324,  1329,  1334,  1343,  1350,  1360,  1367,  1378,
  1384,  1389,  1394,  1399,  1404,  1409,  1418,  1423,  1439,  1444,
  1448,  1452,  1458,  1463,  1471,  1476,  1484,  1493,  1502,  1507,
  1511,  1516,  1521,  1526,  1531,  1536,  1541,  1546,  1551,  1556,
  1566,  1575,  1586,  1591,  1595,  1600,  1605,  1610,  1615,  1620,
  1625,  1630,  1635
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BEG","END",
"ACCELERATORS","VIRTKEY","ASCII","NOINVERT","SHIFT","CONTROL","ALT","BITMAP",
"CURSOR","DIALOG","DIALOGEX","EXSTYLE","CAPTION","CLASS","STYLE","AUTO3STATE",
"AUTOCHECKBOX","AUTORADIOBUTTON","CHECKBOX","COMBOBOX","CTEXT","DEFPUSHBUTTON",
"EDITTEXT","GROUPBOX","LISTBOX","LTEXT","PUSHBOX","PUSHBUTTON","RADIOBUTTON",
"RTEXT","SCROLLBAR","STATE3","USERBUTTON","BEDIT","HEDIT","IEDIT","FONT","ICON",
"LANGUAGE","CHARACTERISTICS","VERSIONK","MENU","MENUEX","MENUITEM","SEPARATOR",
"POPUP","CHECKED","GRAYED","HELP","INACTIVE","MENUBARBREAK","MENUBREAK","MESSAGETABLE",
"RCDATA","STRINGTABLE","VERSIONINFO","FILEVERSION","PRODUCTVERSION","FILEFLAGSMASK",
"FILEFLAGS","FILEOS","FILETYPE","FILESUBTYPE","BLOCKSTRINGFILEINFO","BLOCKVARFILEINFO",
"VALUE","BLOCK","MOVEABLE","FIXED","PURE","IMPURE","PRELOAD","LOADONCALL","DISCARDABLE",
"NOT","QUOTEDSTRING","STRING","NUMBER","SIZEDSTRING","IGNORED_TOKEN","'|'","'^'",
"'&'","'+'","'-'","'*'","'/'","'%'","'~'","NEG","','","'='","'('","')'","input",
"newcmd","accelerator","acc_entries","acc_entry","acc_event","acc_options","acc_option",
"bitmap","cursor","dialog","@@1","@@2","@@3","exstyle","styles","@@4","controls",
"control","@@5","@@6","@@7","@@8","@@9","@@10","@@11","@@12","@@13","@@14","@@15","@@16",
"@@17","@@18","@@19","@@20","@@21","@@22","@@23","@@24","@@25","control_params","optstringc",
"opt_control_data","control_styleexpr","@@26","icon_styleexpr","@@27","control_params_styleexpr",
"@@28","font","icon","language","menu","menuitems","menuitem","menuitem_flags",
"menuitem_flag","menuex","menuexitems","menuexitem","messagetable","rcdata",
"optrcdata_data","@@29","optrcdata_data_int","rcdata_data","stringtable","@@30",
"string_data","user","versioninfo","fixedverinfo","verblocks","vervals","vertrans",
"id","resname","resref","suboptions","memflags_move_discard","memflags_move",
"memflag","file_name","styleexpr","parennumber","optcnumexpr","cnumexpr","numexpr",
"sizednumexpr","cposnumexpr","posnumexpr","sizedposnumexpr", NULL
};
#endif

static const short yyr1[] = {     0,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,   100,   101,   102,   102,
   103,   103,   104,   104,   105,   105,   105,   106,   106,   106,
   106,   106,   106,   107,   108,   110,   109,   111,   109,   112,
   109,   113,   113,   114,   114,   114,   115,   114,   114,   114,
   114,   114,   114,   114,   114,   116,   116,   118,   117,   119,
   117,   120,   117,   121,   117,   122,   117,   123,   117,   117,
   117,   117,   117,   124,   117,   125,   117,   126,   117,   127,
   117,   128,   117,   117,   117,   117,   117,   129,   117,   130,
   117,   131,   117,   132,   117,   133,   117,   134,   117,   135,
   117,   136,   117,   137,   117,   138,   117,   139,   139,   139,
   140,   140,   140,   141,   141,   143,   142,   145,   144,   147,
   146,   148,   149,   150,   151,   152,   152,   153,   153,   153,
   154,   154,   154,   155,   155,   155,   155,   155,   155,   156,
   157,   157,   158,   158,   158,   158,   158,   158,   158,   158,
   159,   160,   162,   161,   163,   163,   164,   164,   164,   164,
   166,   165,   167,   167,   167,   168,   168,   169,   170,   170,
   170,   170,   170,   170,   170,   170,   171,   171,   171,   172,
   172,   173,   173,   174,   174,   175,   175,   175,   176,   176,
   177,   177,   177,   177,   177,   178,   178,   179,   179,   180,
   180,   180,   180,   180,   180,   180,   181,   181,   182,   182,
   182,   182,   183,   183,   184,   184,   185,   186,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190
};

static const short yyr2[] = {     0,
     0,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     0,     6,     0,     2,
     2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
     1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
    14,     0,     3,     0,     3,     3,     0,     4,     3,     5,
     7,     3,     3,     4,     3,     0,     2,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,    11,
    12,    12,    13,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     6,     8,    10,    11,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     0,     3,     0,    16,     7,     9,    10,
     0,     1,     2,     0,     3,     0,     3,     0,     3,     0,
     3,     4,     4,     3,     6,     0,     2,     4,     2,     6,
     0,     3,     2,     1,     1,     1,     1,     1,     1,     6,
     0,     2,     2,     3,     5,     2,     5,     6,     7,     9,
     4,     6,     0,     2,     0,     1,     1,     1,     3,     3,
     0,     6,     0,     3,     4,     6,     4,     6,     0,     6,
     6,     3,     3,     3,     3,     3,     0,     8,     7,     0,
     5,     0,     3,     1,     1,     1,     2,     2,     2,     1,
     0,     2,     3,     4,     3,     0,     2,     0,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     3,     4,     1,     3,     0,     1,     2,     1,     1,     3,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     1,     1,     3,     2,     3,     3,     3,     3,     3,
     3,     3,     3
};

static const short yydefact[] = {     1,
    17,     0,     0,   191,   185,   233,    16,     0,     0,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,     0,   184,   232,   219,     0,     0,     0,
     0,   218,     0,   235,     0,   191,   198,   196,   198,   198,
   196,   196,   191,   191,   198,   191,   169,   191,     0,     0,
     0,     0,     0,     0,     0,     0,   222,   221,     0,     0,
   124,     0,     0,     0,     0,     0,     0,     0,     0,   161,
     0,     0,     0,   200,   201,   202,   203,   204,   205,   206,
   192,   234,     0,     0,     0,    42,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   243,   242,   241,   239,   240,
   236,   237,   238,   220,   217,   230,   229,   228,   226,   227,
   223,   224,   225,   163,     0,   193,   195,    19,   207,   208,
   199,    34,   197,    35,     0,     0,     0,   122,   123,   126,
   141,   151,   153,   177,     0,     0,     0,     0,     0,     0,
     0,   153,   167,     0,   194,     0,     0,     0,     0,     0,
     0,     0,   155,     0,     0,     0,   172,   173,   174,   175,
   176,     0,   162,     0,    18,    23,    20,     0,    24,    43,
     0,     0,   125,     0,     0,   127,   140,     0,     0,   142,
   152,   157,   154,   156,   158,   168,     0,     0,     0,     0,
   166,   164,     0,     0,    21,     0,     0,   129,     0,   131,
   146,   143,     0,     0,     0,     0,     0,     0,   165,   231,
     0,    36,    38,   131,     0,   144,   141,     0,   159,   160,
     0,     0,   170,   171,    28,    29,    30,    31,    32,    33,
    22,    25,    44,    44,    40,   128,   126,   134,   135,   136,
   137,   138,   139,     0,   133,   215,     0,   141,     0,   180,
   182,     0,    27,     0,     0,    44,     0,   132,   145,   216,
   147,     0,   141,   215,     0,     0,    26,    56,     0,     0,
     0,    47,     0,     0,     0,     0,     0,    56,     0,   130,
   148,     0,     0,     0,     0,   179,     0,     0,    49,    45,
    46,     0,     0,     0,    53,    55,    52,     0,    56,   149,
   141,   178,     0,   183,    37,   111,    58,    60,    62,    66,
    68,    74,    76,    78,    80,    90,    92,    94,    96,    98,
   100,   102,   104,     0,    64,    82,    88,     0,    57,     0,
   213,     0,    48,   209,     0,    54,    39,     0,     0,     0,
   112,     0,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,     0,
   111,   111,   111,   186,     0,   190,     0,     0,   210,     0,
     0,    50,    41,   150,   181,   113,     0,    59,     0,    61,
    63,    67,    69,    75,    77,    79,    81,    91,    93,    95,
    97,    99,   101,   103,   105,     0,    65,    83,    89,   187,
   188,     0,   189,   214,     0,   211,     0,     0,     0,     0,
     0,     0,   212,    51,     0,   116,     0,     0,     0,   114,
     0,     0,     0,     0,     0,   153,    84,     0,     0,   117,
     0,     0,     0,     0,   114,     0,     0,   114,     0,   115,
   118,    85,   215,     0,   215,   120,   108,   215,     0,     0,
   114,   216,   215,   114,   216,     0,   114,   216,     0,   119,
    86,   114,   114,   216,    70,   114,   121,   109,   114,     0,
    87,    72,   114,    71,   110,     0,    73,   106,     0,   215,
   107,     0,     0
};

static const short yydefgoto[] = {     1,
     2,    10,   146,   167,   168,   231,   232,    11,    12,    13,
   233,   234,   256,   126,   254,   292,   288,   329,   343,   344,
   345,   361,   346,   347,   348,   349,   350,   351,   362,   363,
   352,   353,   354,   355,   356,   357,   358,   359,   479,   378,
   379,   427,   417,   422,   443,   450,   448,   456,    14,    15,
    16,    17,   150,   176,   215,   245,    18,   151,   180,    19,
    20,   152,   153,   183,   184,    21,   114,   144,    22,    23,
    94,   154,   265,   266,    24,   366,   367,    33,    85,    84,
    81,   122,   333,   334,   259,   260,   105,    32,   195,    25,
    26
};

static const short yypact[] = {-32768,
    31,   240,   241,-32768,-32768,-32768,-32768,   241,   241,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    68,-32768,   578,-32768,   241,   241,   241,
   -73,   586,   169,-32768,   388,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   241,   241,
   241,   241,   241,   241,   241,   241,-32768,-32768,   513,   241,
-32768,   241,   241,   241,   241,   241,   241,   241,   241,-32768,
   241,   241,   241,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   215,   581,   581,   268,   268,   581,   581,   232,
   275,   581,   283,   250,   156,   593,   599,   616,    98,    98,
-32768,-32768,-32768,-32768,-32768,   593,   599,   616,    98,    98,
-32768,-32768,-32768,-32768,   -73,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -61,   290,   290,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   241,   241,   241,   241,   241,   241,
   241,-32768,-32768,     4,-32768,     5,   241,   -73,   -73,     9,
    92,    32,   309,    10,   -73,   -73,-32768,-32768,-32768,-32768,
-32768,    54,-32768,   -57,-32768,-32768,-32768,   -20,-32768,-32768,
   -73,   -73,-32768,    39,    -9,-32768,-32768,    40,    11,-32768,
-32768,-32768,-32768,    36,   586,-32768,   145,   151,   -73,   -73,
-32768,-32768,    78,   290,    79,   -73,   -73,-32768,   -73,-32768,
-32768,   -73,    16,   365,   106,   108,   -73,   -73,-32768,-32768,
   686,-32768,   -73,-32768,    52,   -73,-32768,    17,-32768,   586,
   178,   128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    34,-32768,-32768,-32768,-32768,   314,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   647,-32768,   -73,    95,-32768,    18,-32768,
-32768,   686,-32768,   150,   378,-32768,   112,-32768,-32768,-32768,
-32768,   123,-32768,   -73,     6,    29,-32768,-32768,   241,   129,
   281,-32768,   241,   241,   241,   241,   281,-32768,   452,-32768,
-32768,   135,   200,   213,   143,-32768,   -73,   479,-32768,-32768,
-32768,   182,    91,   -73,-32768,-32768,-32768,   516,-32768,-32768,
-32768,-32768,   130,-32768,-32768,   147,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   158,-32768,-32768,-32768,   170,-32768,    73,
-32768,   241,   154,-32768,   160,-32768,-32768,   553,   172,   168,
   161,   241,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   173,
   147,   147,   147,   174,   186,-32768,   241,   187,-32768,   196,
   183,   -73,-32768,-32768,-32768,-32768,   201,-32768,   241,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   241,-32768,-32768,-32768,-32768,
-32768,   -73,-32768,-32768,    73,-32768,   -73,   293,   202,   -73,
   203,   -73,-32768,-32768,   202,-32768,   -73,   -73,   241,    22,
   -73,   182,   -73,   -73,   205,-32768,-32768,   -73,   -73,   154,
   -73,   -73,   241,   297,    26,   -73,   -73,    27,   208,-32768,
-32768,-32768,   -73,   -73,   -73,-32768,-32768,   -73,   241,   182,
   251,   -73,   -73,   251,   -73,   182,   251,   -73,   230,   154,
-32768,   251,   251,   -73,-32768,   251,   154,-32768,   251,   241,
-32768,-32768,   251,-32768,-32768,   236,-32768,-32768,   182,   -11,
-32768,   332,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -220,-32768,-32768,-32768,
-32768,-32768,-32768,   248,  -222,-32768,  -262,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   289,
    30,   159,   -44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   117,-32768,   163,   140,-32768,  -171,-32768,-32768,
-32768,  -141,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -22,-32768,-32768,   486,   -24,    55,
   480,   316,  -304,  -315,  -261,     8,    -3,    -2,-32768,  -122,
-32768
};


#define	YYLAST		708


static const short yytable[] = {    31,
   162,    48,   283,   148,   149,    34,    35,   163,   165,   284,
   253,   255,   173,   186,   369,   298,    88,    89,   217,   248,
   263,    60,   192,   169,   426,    57,    58,    59,   426,   426,
   482,   267,   286,   279,   147,   181,   338,   193,    61,   225,
   226,   227,   228,   229,   230,   247,    96,    97,    98,    99,
   100,   101,   102,   103,   237,   406,   174,   191,   175,   106,
   107,   108,   109,   110,   111,   112,   113,   115,   116,   117,
   200,   210,    36,   371,   194,   285,   262,   187,   188,    37,
    38,    39,    40,    60,   166,    27,     6,   198,   201,   413,
   203,   282,    28,    86,    87,   177,    29,     8,   261,    92,
    30,     9,   238,   239,   240,   241,   242,   243,    41,    42,
    60,    60,    60,    43,    44,   280,    60,   430,   199,   202,
   441,   446,   145,    60,    45,    46,   281,    47,   252,   339,
   204,   155,   156,   157,   158,   159,   160,   161,   300,   178,
   164,   179,   178,   170,   179,   460,   244,   205,     5,     6,
   185,   467,   268,   206,   331,   171,   172,   209,   142,   174,
     8,   175,   189,   190,     9,   269,   270,   271,   272,   332,
   178,    70,   179,   211,   480,   374,   221,   222,   196,   197,
   250,   451,   178,   454,   179,   335,   457,    67,    68,    69,
   273,   463,   274,   275,   276,   277,   207,   208,    71,    72,
    73,   220,   301,   212,   213,   368,   214,   251,   290,   216,
   218,    71,    72,    73,   223,   224,   302,   118,   481,   178,
   235,   179,   303,   246,   340,   249,   341,    74,    75,    76,
    77,    78,    79,    80,   130,   119,   120,   360,   371,   372,
    74,    75,    76,    77,    78,    79,    80,   375,   291,   364,
   365,     6,   134,   426,   297,   376,   264,    71,    72,    73,
   330,   405,     8,   331,   331,   289,     9,   396,   400,   293,
   294,   295,   296,   287,    71,    72,    73,   131,   332,   332,
   401,   403,     3,   125,   434,   133,    74,    75,    76,    77,
    78,    79,    80,   404,   304,   408,   416,   419,     4,   433,
   440,   336,   449,    74,    75,    76,    77,    78,    79,    80,
   135,   136,   137,   138,   139,   140,   141,    71,    72,    73,
     5,     6,    27,     7,   470,    71,    72,    73,   370,    28,
   478,   483,     8,    29,   127,   342,     9,    30,   377,    74,
    75,    76,    77,    78,    79,    80,    74,    75,    76,    77,
    78,    79,    80,   257,    74,    75,    76,    77,    78,    79,
    80,     5,     6,   402,   238,   239,   240,   241,   242,   243,
   421,     6,   415,     8,    27,   410,   236,     9,     0,   407,
   278,    28,     8,   258,   409,    29,     9,     0,     0,    30,
    27,   182,   411,   269,   270,   271,   272,    28,     0,     0,
   124,    29,     0,   128,   129,    30,     0,   132,   244,   412,
   143,     0,     0,     0,   414,   425,     0,   418,   273,   420,
   274,   275,   276,   277,   423,   424,     0,   428,   429,   439,
   431,   432,     0,     0,     0,   435,   436,     0,   437,   438,
     0,     0,     0,   444,   445,   459,    27,   219,     0,     0,
   452,   453,   455,    28,   299,   458,     0,    29,     0,   462,
   464,    30,   466,     0,     0,   469,   476,   269,   270,   271,
   272,   473,    62,    63,    64,    65,    66,    67,    68,    69,
     0,     0,   305,     0,     0,    82,     0,     0,   306,     0,
     0,     0,   273,     0,   274,   275,   276,   277,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   337,
   328,    83,     0,     0,     0,   306,     0,     0,    90,    91,
     0,    93,     0,    95,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   373,   328,     0,     0,
     0,     0,   306,   121,   123,   121,   121,   123,   123,     0,
     0,   121,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   442,   328,     0,   447,    62,    63,    64,
    65,    66,    67,    68,    69,     0,     0,     0,     0,   461,
   104,     0,   465,     0,     0,   468,     0,     0,     0,     0,
   471,   472,     0,     0,   474,     0,     0,   475,     0,     0,
     0,   477,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,     0,   397,
   398,   399,    74,    75,    76,    77,    78,    79,    80,     0,
   119,   120,    49,    50,    51,    52,    53,    54,    55,    56,
    62,    63,    64,    65,    66,    67,    68,    69,    63,    64,
    65,    66,    67,    68,    69,    64,    65,    66,    67,    68,
    69,   225,   226,   227,   228,   229,   230,   238,   239,   240,
   241,   242,   243,    65,    66,    67,    68,    69
};

static const short yycheck[] = {     3,
   142,    24,   264,   126,   127,     8,     9,     4,     4,     4,
   231,   234,     4,     4,   330,   278,    41,    42,     3,     3,
     3,    95,    80,   146,     3,    28,    29,    30,     3,     3,
     0,   252,     4,   256,    96,     4,   299,    95,    31,     6,
     7,     8,     9,    10,    11,   217,    49,    50,    51,    52,
    53,    54,    55,    56,     3,   371,    48,     4,    50,    62,
    63,    64,    65,    66,    67,    68,    69,    71,    72,    73,
    80,   194,     5,    85,    95,    70,   248,    68,    69,    12,
    13,    14,    15,    95,    80,    82,    82,    49,    49,   405,
    80,   263,    89,    39,    40,     4,    93,    93,     4,    45,
    97,    97,    51,    52,    53,    54,    55,    56,    41,    42,
    95,    95,    95,    46,    47,     4,    95,   422,    80,    80,
    95,    95,   115,    95,    57,    58,     4,    60,    95,   301,
    95,   135,   136,   137,   138,   139,   140,   141,     4,    48,
   144,    50,    48,   147,    50,   450,    95,     3,    81,    82,
   153,   456,     3,     3,    82,   148,   149,    80,     3,    48,
    93,    50,   155,   156,    97,    16,    17,    18,    19,    97,
    48,     3,    50,    95,   479,     4,    71,    70,   171,   172,
     3,   443,    48,   445,    50,    95,   448,    90,    91,    92,
    41,   453,    43,    44,    45,    46,   189,   190,    43,    44,
    45,   204,     3,   196,   197,   328,   199,    80,    80,   202,
   203,    43,    44,    45,   207,   208,     4,     3,   480,    48,
   213,    50,    80,   216,    95,   218,    80,    72,    73,    74,
    75,    76,    77,    78,     3,    80,    81,    80,    85,    80,
    72,    73,    74,    75,    76,    77,    78,    80,   271,    80,
    81,    82,     3,     3,   277,    95,   249,    43,    44,    45,
    79,    79,    93,    82,    82,   269,    97,    95,    95,   273,
   274,   275,   276,   266,    43,    44,    45,     3,    97,    97,
    95,    95,    43,    16,   426,     3,    72,    73,    74,    75,
    76,    77,    78,    98,   287,    95,    95,    95,    59,    95,
     4,   294,    95,    72,    73,    74,    75,    76,    77,    78,
    61,    62,    63,    64,    65,    66,    67,    43,    44,    45,
    81,    82,    82,    84,    95,    43,    44,    45,   332,    89,
    95,     0,    93,    93,    87,   306,    97,    97,   342,    72,
    73,    74,    75,    76,    77,    78,    72,    73,    74,    75,
    76,    77,    78,   237,    72,    73,    74,    75,    76,    77,
    78,    81,    82,   367,    51,    52,    53,    54,    55,    56,
   415,    82,    80,    93,    82,   379,   214,    97,    -1,   372,
     3,    89,    93,   244,   377,    93,    97,    -1,    -1,    97,
    82,    83,   396,    16,    17,    18,    19,    89,    -1,    -1,
    85,    93,    -1,    88,    89,    97,    -1,    92,    95,   402,
    95,    -1,    -1,    -1,   407,   419,    -1,   410,    41,   412,
    43,    44,    45,    46,   417,   418,    -1,   420,   421,   433,
   423,   424,    -1,    -1,    -1,   428,   429,    -1,   431,   432,
    -1,    -1,    -1,   436,   437,   449,    82,    83,    -1,    -1,
   443,   444,   445,    89,     3,   448,    -1,    93,    -1,   452,
   453,    97,   455,    -1,    -1,   458,   470,    16,    17,    18,
    19,   464,    85,    86,    87,    88,    89,    90,    91,    92,
    -1,    -1,     4,    -1,    -1,    98,    -1,    -1,    10,    -1,
    -1,    -1,    41,    -1,    43,    44,    45,    46,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,     4,
    42,    36,    -1,    -1,    -1,    10,    -1,    -1,    43,    44,
    -1,    46,    -1,    48,    -1,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,     4,    42,    -1,    -1,
    -1,    -1,    10,    84,    85,    86,    87,    88,    89,    -1,
    -1,    92,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,   435,    42,    -1,   438,    85,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,   451,
    98,    -1,   454,    -1,    -1,   457,    -1,    -1,    -1,    -1,
   462,   463,    -1,    -1,   466,    -1,    -1,   469,    -1,    -1,
    -1,   473,   344,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
   362,   363,    72,    73,    74,    75,    76,    77,    78,    -1,
    80,    81,    85,    86,    87,    88,    89,    90,    91,    92,
    85,    86,    87,    88,    89,    90,    91,    92,    86,    87,
    88,    89,    90,    91,    92,    87,    88,    89,    90,    91,
    92,     6,     7,     8,     9,    10,    11,    51,    52,    53,
    54,    55,    56,    88,    89,    90,    91,    92
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 17:
#line 176 "rcparse.y"
{
	    rcparse_discard_strings ();
	  ;
    break;}
case 18:
#line 185 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	  ;
    break;}
case 19:
#line 192 "rcparse.y"
{
	    yyval.pacc = NULL;
	  ;
    break;}
case 20:
#line 196 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  ;
    break;}
case 21:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  ;
    break;}
case 22:
#line 222 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL | ACC_ALT)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  ;
    break;}
case 23:
#line 234 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = toupper ((unsigned char) ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  ;
    break;}
case 24:
#line 255 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  ;
    break;}
case 25:
#line 265 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  ;
    break;}
case 26:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 27:
#line 274 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 28:
#line 281 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  ;
    break;}
case 29:
#line 285 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  ;
    break;}
case 30:
#line 290 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  ;
    break;}
case 31:
#line 294 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  ;
    break;}
case 32:
#line 298 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  ;
    break;}
case 33:
#line 302 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  ;
    break;}
case 34:
#line 311 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 35:
#line 320 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 36:
#line 330 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 37:
#line 346 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 38:
#line 351 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 39:
#line 369 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 40:
#line 374 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	    ;
    break;}
case 41:
#line 393 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	  ;
    break;}
case 42:
#line 400 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 43:
#line 404 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 45:
#line 412 "rcparse.y"
{
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  ;
    break;}
case 46:
#line 416 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  ;
    break;}
case 47:
#line 420 "rcparse.y"
{ style = dialog.style; ;
    break;}
case 48:
#line 422 "rcparse.y"
{
	    dialog.style = style;
	  ;
    break;}
case 49:
#line 426 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  ;
    break;}
case 50:
#line 430 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	  ;
    break;}
case 51:
#line 436 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
	      }
	  ;
    break;}
case 52:
#line 449 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  ;
    break;}
case 53:
#line 453 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 54:
#line 457 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 55:
#line 461 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  ;
    break;}
case 57:
#line 469 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  ;
    break;}
case 58:
#line 480 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 59:
#line 486 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 60:
#line 490 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 61:
#line 496 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 62:
#line 500 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 63:
#line 506 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 64:
#line 510 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 65:
#line 516 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  ;
    break;}
case 66:
#line 523 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 67:
#line 529 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 68:
#line 533 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    ;
    break;}
case 69:
#line 539 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 70:
#line 544 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 71:
#line 555 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 72:
#line 564 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  ;
    break;}
case 73:
#line 577 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].s, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  ;
    break;}
case 74:
#line 587 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    ;
    break;}
case 75:
#line 593 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 76:
#line 597 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 77:
#line 603 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 78:
#line 607 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 79:
#line 613 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 80:
#line 617 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 81:
#line 623 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 82:
#line 627 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 83:
#line 633 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  ;
    break;}
case 84:
#line 640 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
    break;}
case 85:
#line 646 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
    break;}
case 86:
#line 652 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
    break;}
case 87:
#line 658 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
    break;}
case 88:
#line 663 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 89:
#line 669 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  ;
    break;}
case 90:
#line 676 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    ;
    break;}
case 91:
#line 682 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 92:
#line 686 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    ;
    break;}
case 93:
#line 692 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 94:
#line 696 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 95:
#line 702 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 96:
#line 706 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 97:
#line 712 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 98:
#line 716 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 99:
#line 722 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 100:
#line 726 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    ;
    break;}
case 101:
#line 732 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 102:
#line 736 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    ;
    break;}
case 103:
#line 742 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 104:
#line 746 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 105:
#line 752 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 106:
#line 757 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 107:
#line 759 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-14].s, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  ;
    break;}
case 108:
#line 775 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].s, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 109:
#line 787 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 110:
#line 798 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 111:
#line 809 "rcparse.y"
{
	    yyval.s = NULL;
	  ;
    break;}
case 112:
#line 813 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 113:
#line 817 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 114:
#line 824 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  ;
    break;}
case 115:
#line 828 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  ;
    break;}
case 116:
#line 837 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 118:
#line 843 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; ;
    break;}
case 120:
#line 849 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; ;
    break;}
case 122:
#line 857 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 123:
#line 866 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 124:
#line 876 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 125:
#line 885 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 126:
#line 892 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 127:
#line 896 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 128:
#line 913 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  ;
    break;}
case 129:
#line 917 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 130:
#line 921 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 131:
#line 928 "rcparse.y"
{
	    yyval.is = 0;
	  ;
    break;}
case 132:
#line 932 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 133:
#line 936 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 134:
#line 943 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  ;
    break;}
case 135:
#line 947 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  ;
    break;}
case 136:
#line 951 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  ;
    break;}
case 137:
#line 955 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  ;
    break;}
case 138:
#line 959 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  ;
    break;}
case 139:
#line 963 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  ;
    break;}
case 140:
#line 972 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 141:
#line 979 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 142:
#line 983 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 143:
#line 1000 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 144:
#line 1004 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  ;
    break;}
case 145:
#line 1008 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  ;
    break;}
case 146:
#line 1012 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  ;
    break;}
case 147:
#line 1016 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 148:
#line 1020 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 149:
#line 1024 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 150:
#line 1029 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  ;
    break;}
case 151:
#line 1038 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 152:
#line 1047 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 153:
#line 1056 "rcparse.y"
{
	    rcparse_rcdata ();
	  ;
    break;}
case 154:
#line 1060 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 155:
#line 1068 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  ;
    break;}
case 156:
#line 1073 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 157:
#line 1080 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 158:
#line 1088 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 159:
#line 1096 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 160:
#line 1105 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 161:
#line 1119 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; ;
    break;}
case 164:
#line 1126 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	  ;
    break;}
case 165:
#line 1130 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	  ;
    break;}
case 166:
#line 1140 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 167:
#line 1144 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 168:
#line 1153 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	  ;
    break;}
case 169:
#line 1160 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  ;
    break;}
case 170:
#line 1166 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 171:
#line 1172 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 172:
#line 1178 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 173:
#line 1183 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 174:
#line 1188 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 175:
#line 1193 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 176:
#line 1198 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 177:
#line 1212 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  ;
    break;}
case 178:
#line 1216 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  ;
    break;}
case 179:
#line 1220 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  ;
    break;}
case 180:
#line 1227 "rcparse.y"
{
	    yyval.verstring = NULL;
	  ;
    break;}
case 181:
#line 1231 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  ;
    break;}
case 182:
#line 1238 "rcparse.y"
{
	    yyval.vervar = NULL;
	  ;
    break;}
case 183:
#line 1242 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  ;
    break;}
case 184:
#line 1251 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  ;
    break;}
case 185:
#line 1256 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      if (islower ((unsigned char) *s))
		*s = toupper ((unsigned char) *s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  ;
    break;}
case 186:
#line 1273 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 187:
#line 1277 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 188:
#line 1281 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 189:
#line 1289 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  ;
    break;}
case 190:
#line 1294 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      if (islower ((unsigned char) *s))
	        *s = toupper ((unsigned char) *s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  ;
    break;}
case 191:
#line 1312 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 192:
#line 1319 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 193:
#line 1325 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 194:
#line 1330 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 195:
#line 1335 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  ;
    break;}
case 196:
#line 1345 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  ;
    break;}
case 197:
#line 1351 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 198:
#line 1362 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 199:
#line 1368 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 200:
#line 1380 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 201:
#line 1385 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 202:
#line 1390 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 203:
#line 1395 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  ;
    break;}
case 204:
#line 1400 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 205:
#line 1405 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  ;
    break;}
case 206:
#line 1410 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 207:
#line 1420 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 208:
#line 1424 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 209:
#line 1441 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 210:
#line 1445 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 211:
#line 1449 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 212:
#line 1453 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 213:
#line 1460 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 214:
#line 1464 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  ;
    break;}
case 215:
#line 1473 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 216:
#line 1477 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 217:
#line 1486 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 218:
#line 1495 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 219:
#line 1504 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 220:
#line 1508 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 221:
#line 1512 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 222:
#line 1517 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 223:
#line 1522 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 224:
#line 1527 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 225:
#line 1532 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 226:
#line 1537 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 227:
#line 1542 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 228:
#line 1547 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 229:
#line 1552 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 230:
#line 1557 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 231:
#line 1568 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 232:
#line 1577 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 233:
#line 1588 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 234:
#line 1592 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 235:
#line 1596 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 236:
#line 1601 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 237:
#line 1606 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 238:
#line 1611 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 239:
#line 1616 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 240:
#line 1621 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 241:
#line 1626 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 242:
#line 1631 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 243:
#line 1636 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1642 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@


1.1.4.2
log
@update generated files
@
text
@d93 1
a93 1
   Copyright 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d767 1
a767 1
#line 3 "/usr/share/bison/bison.simple"
d981 1
a981 1
#line 217 "/usr/share/bison/bison.simple"
d2922 1
a2922 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.2.1
log
@Add generated files.
@
text
@a0 3107

/*  A Bison parser, made from rcparse.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BEG	257
#define	END	258
#define	ACCELERATORS	259
#define	VIRTKEY	260
#define	ASCII	261
#define	NOINVERT	262
#define	SHIFT	263
#define	CONTROL	264
#define	ALT	265
#define	BITMAP	266
#define	CURSOR	267
#define	DIALOG	268
#define	DIALOGEX	269
#define	EXSTYLE	270
#define	CAPTION	271
#define	CLASS	272
#define	STYLE	273
#define	AUTO3STATE	274
#define	AUTOCHECKBOX	275
#define	AUTORADIOBUTTON	276
#define	CHECKBOX	277
#define	COMBOBOX	278
#define	CTEXT	279
#define	DEFPUSHBUTTON	280
#define	EDITTEXT	281
#define	GROUPBOX	282
#define	LISTBOX	283
#define	LTEXT	284
#define	PUSHBOX	285
#define	PUSHBUTTON	286
#define	RADIOBUTTON	287
#define	RTEXT	288
#define	SCROLLBAR	289
#define	STATE3	290
#define	USERBUTTON	291
#define	BEDIT	292
#define	HEDIT	293
#define	IEDIT	294
#define	FONT	295
#define	ICON	296
#define	LANGUAGE	297
#define	CHARACTERISTICS	298
#define	VERSIONK	299
#define	MENU	300
#define	MENUEX	301
#define	MENUITEM	302
#define	SEPARATOR	303
#define	POPUP	304
#define	CHECKED	305
#define	GRAYED	306
#define	HELP	307
#define	INACTIVE	308
#define	MENUBARBREAK	309
#define	MENUBREAK	310
#define	MESSAGETABLE	311
#define	RCDATA	312
#define	STRINGTABLE	313
#define	VERSIONINFO	314
#define	FILEVERSION	315
#define	PRODUCTVERSION	316
#define	FILEFLAGSMASK	317
#define	FILEFLAGS	318
#define	FILEOS	319
#define	FILETYPE	320
#define	FILESUBTYPE	321
#define	BLOCKSTRINGFILEINFO	322
#define	BLOCKVARFILEINFO	323
#define	VALUE	324
#define	BLOCK	325
#define	MOVEABLE	326
#define	FIXED	327
#define	PURE	328
#define	IMPURE	329
#define	PRELOAD	330
#define	LOADONCALL	331
#define	DISCARDABLE	332
#define	NOT	333
#define	QUOTEDSTRING	334
#define	STRING	335
#define	NUMBER	336
#define	SIZEDSTRING	337
#define	IGNORED_TOKEN	338
#define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"

#include <ctype.h>

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 59 "rcparse.y"
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		475
#define	YYFLAG		-32768
#define	YYNTBASE	99

#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    92,    87,     2,    97,
    98,    90,    88,    95,    89,     2,    91,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    86,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    85,     2,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     5,     9,    13,    17,    21,    25,    29,    33,
    37,    41,    45,    49,    53,    57,    61,    62,    69,    70,
    73,    76,    81,    83,    85,    87,    91,    94,    96,    98,
   100,   102,   104,   106,   111,   116,   117,   131,   132,   146,
   147,   162,   163,   167,   168,   172,   176,   177,   182,   186,
   192,   200,   204,   208,   213,   217,   218,   221,   222,   226,
   227,   231,   232,   236,   237,   241,   242,   246,   247,   251,
   263,   276,   289,   303,   304,   308,   309,   313,   314,   318,
   319,   323,   324,   328,   335,   346,   358,   359,   363,   364,
   368,   369,   373,   374,   378,   379,   383,   384,   388,   389,
   393,   394,   398,   399,   403,   404,   421,   429,   439,   450,
   451,   454,   455,   459,   460,   464,   465,   469,   470,   474,
   479,   484,   488,   495,   496,   499,   504,   507,   514,   515,
   519,   522,   524,   526,   528,   530,   532,   534,   541,   542,
   545,   548,   552,   558,   561,   567,   574,   582,   592,   597,
   604,   605,   608,   609,   611,   613,   615,   619,   623,   624,
   631,   632,   636,   641,   648,   653,   660,   661,   668,   675,
   679,   683,   687,   691,   695,   696,   705,   713,   714,   720,
   721,   725,   727,   729,   730,   733,   737,   742,   746,   747,
   750,   751,   754,   756,   758,   760,   762,   764,   766,   768,
   770,   772,   774,   777,   781,   786,   788,   792,   793,   795,
   798,   800,   802,   806,   809,   812,   816,   820,   824,   828,
   832,   836,   840,   844,   847,   849,   851,   855,   858,   862,
   866,   870,   874,   878,   882,   886
};

static const short yyrhs[] = {    -1,
    99,   100,   101,     0,    99,   100,   107,     0,    99,   100,
   108,     0,    99,   100,   109,     0,    99,   100,   148,     0,
    99,   100,   149,     0,    99,   100,   150,     0,    99,   100,
   151,     0,    99,   100,   156,     0,    99,   100,   159,     0,
    99,   100,   160,     0,    99,   100,   165,     0,    99,   100,
   168,     0,    99,   100,   169,     0,    99,   100,    84,     0,
     0,   174,     5,   175,     3,   102,     4,     0,     0,   102,
   103,     0,   104,   186,     0,   104,   186,    95,   105,     0,
    80,     0,   187,     0,   106,     0,   105,    95,   106,     0,
   105,   106,     0,     6,     0,     7,     0,     8,     0,     9,
     0,    10,     0,    11,     0,   174,    12,   177,   179,     0,
   174,    13,   176,   179,     0,     0,   174,    14,   177,   113,
   187,   183,   183,   183,   110,   114,     3,   116,     4,     0,
     0,   174,    15,   177,   113,   187,   183,   183,   183,   111,
   114,     3,   116,     4,     0,     0,   174,    15,   177,   113,
   187,   183,   183,   183,   183,   112,   114,     3,   116,     4,
     0,     0,    16,    96,   184,     0,     0,   114,    17,    80,
     0,   114,    18,   174,     0,     0,   114,    19,   115,   180,
     0,   114,    16,   184,     0,   114,    41,   184,    95,    80,
     0,   114,    41,   184,    95,    80,   183,   183,     0,   114,
    46,   174,     0,   114,    44,   184,     0,   114,    43,   184,
   183,     0,   114,    45,   184,     0,     0,   116,   117,     0,
     0,    20,   118,   139,     0,     0,    21,   119,   139,     0,
     0,    22,   120,   139,     0,     0,    38,   121,   139,     0,
     0,    23,   122,   139,     0,     0,    24,   123,   139,     0,
    10,   140,   184,   183,   142,   183,   183,   183,   183,   182,
   141,     0,    10,   140,   184,   183,   142,   183,   183,   183,
   183,   183,   183,   141,     0,    10,   140,   184,    95,    80,
   142,   183,   183,   183,   183,   182,   141,     0,    10,   140,
   184,    95,    80,   142,   183,   183,   183,   183,   183,   183,
   141,     0,     0,    25,   124,   139,     0,     0,    26,   125,
   139,     0,     0,    27,   126,   139,     0,     0,    28,   127,
   139,     0,     0,    39,   128,   139,     0,    42,   140,   184,
   183,   183,   141,     0,    42,   140,   184,   183,   183,   183,
   183,   144,   182,   141,     0,    42,   140,   184,   183,   183,
   183,   183,   144,   183,   183,   141,     0,     0,    40,   129,
   139,     0,     0,    29,   130,   139,     0,     0,    30,   131,
   139,     0,     0,    31,   132,   139,     0,     0,    32,   133,
   139,     0,     0,    33,   134,   139,     0,     0,    34,   135,
   139,     0,     0,    35,   136,   139,     0,     0,    36,   137,
   139,     0,     0,    37,    80,    95,   184,    95,   184,    95,
   184,    95,   184,    95,   184,    95,   138,   180,   182,     0,
   140,   184,   183,   183,   183,   183,   141,     0,   140,   184,
   183,   183,   183,   183,   146,   182,   141,     0,   140,   184,
   183,   183,   183,   183,   146,   183,   183,   141,     0,     0,
    80,    95,     0,     0,     3,   161,     4,     0,     0,    95,
   143,   180,     0,     0,    95,   145,   180,     0,     0,    95,
   147,   180,     0,   174,    41,   176,   179,     0,   174,    42,
   176,   179,     0,    43,   184,   183,     0,   174,    46,   175,
     3,   152,     4,     0,     0,   152,   153,     0,    48,    80,
   183,   154,     0,    48,    49,     0,    50,    80,   154,     3,
   152,     4,     0,     0,   154,    95,   155,     0,   154,   155,
     0,    51,     0,    52,     0,    53,     0,    54,     0,    55,
     0,    56,     0,   174,    47,   175,     3,   157,     4,     0,
     0,   157,   158,     0,    48,    80,     0,    48,    80,   183,
     0,    48,    80,   183,   183,   182,     0,    48,    49,     0,
    50,    80,     3,   157,     4,     0,    50,    80,   183,     3,
   157,     4,     0,    50,    80,   183,   183,     3,   157,     4,
     0,    50,    80,   183,   183,   183,   182,     3,   157,     4,
     0,   174,    57,   177,   179,     0,   174,    58,   175,     3,
   161,     4,     0,     0,   162,   163,     0,     0,   164,     0,
    83,     0,   185,     0,   164,    95,    83,     0,   164,    95,
   185,     0,     0,    59,   175,     3,   166,   167,     4,     0,
     0,   167,   184,    80,     0,   167,   184,    95,    80,     0,
   174,   174,   175,     3,   161,     4,     0,   174,   174,   175,
   179,     0,   174,    60,   170,     3,   171,     4,     0,     0,
   170,    61,   184,   183,   183,   183,     0,   170,    62,   184,
   183,   183,   183,     0,   170,    63,   184,     0,   170,    64,
   184,     0,   170,    65,   184,     0,   170,    66,   184,     0,
   170,    67,   184,     0,     0,   171,    68,     3,    71,     3,
   172,     4,     4,     0,   171,    69,     3,    70,    80,   173,
     4,     0,     0,   172,    70,    80,    95,    80,     0,     0,
   173,   183,   183,     0,   187,     0,    81,     0,     0,   175,
   178,     0,   175,    44,   184,     0,   175,    43,   184,   183,
     0,   175,    45,   184,     0,     0,   176,   178,     0,     0,
   177,   178,     0,    72,     0,    73,     0,    74,     0,    75,
     0,    76,     0,    77,     0,    78,     0,    80,     0,    81,
     0,   181,     0,    79,   181,     0,   180,    85,   181,     0,
   180,    85,    79,   181,     0,    82,     0,    97,   184,    98,
     0,     0,   183,     0,    95,   184,     0,   185,     0,    82,
     0,    97,   185,    98,     0,    93,   185,     0,    89,   185,
     0,   185,    90,   185,     0,   185,    91,   185,     0,   185,
    92,   185,     0,   185,    88,   185,     0,   185,    89,   185,
     0,   185,    87,   185,     0,   185,    86,   185,     0,   185,
    85,   185,     0,    95,   187,     0,   188,     0,    82,     0,
    97,   185,    98,     0,    93,   185,     0,   188,    90,   185,
     0,   188,    91,   185,     0,   188,    92,   185,     0,   188,
    88,   185,     0,   188,    89,   185,     0,   188,    87,   185,
     0,   188,    86,   185,     0,   188,    85,   185,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   155,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   174,   183,   190,   195,
   215,   221,   232,   254,   263,   268,   273,   279,   284,   289,
   293,   297,   301,   309,   318,   327,   345,   349,   368,   372,
   392,   398,   403,   409,   411,   415,   419,   422,   425,   429,
   435,   448,   452,   456,   460,   466,   468,   478,   486,   489,
   496,   499,   506,   509,   516,   522,   529,   532,   539,   542,
   553,   562,   575,   586,   593,   596,   603,   606,   613,   616,
   623,   626,   633,   639,   650,   662,   672,   679,   685,   692,
   695,   702,   705,   712,   715,   722,   725,   732,   735,   742,
   745,   752,   755,   762,   765,   768,   782,   795,   806,   817,
   822,   828,   833,   841,   845,   847,   851,   853,   857,   861,
   870,   880,   889,   896,   901,   917,   922,   926,   932,   937,
   941,   947,   952,   956,   960,   964,   968,   976,   983,   988,
  1004,  1009,  1013,  1017,  1021,  1025,  1029,  1033,  1042,  1051,
  1061,  1066,  1072,  1078,  1084,  1093,  1101,  1110,  1123,  1126,
  1129,  1131,  1135,  1144,  1149,  1157,  1164,  1171,  1177,  1183,
  1188,  1193,  1198,  1203,  1216,  1221,  1225,  1231,  1236,  1242,
  1247,  1255,  1261,  1278,  1286,  1292,  1297,  1302,  1311,  1318,
  1328,  1335,  1346,  1352,  1357,  1362,  1367,  1372,  1377,  1386,
  1391,  1407,  1412,  1416,  1420,  1426,  1431,  1439,  1444,  1452,
  1461,  1470,  1475,  1479,  1484,  1489,  1494,  1499,  1504,  1509,
  1514,  1519,  1524,  1534,  1543,  1554,  1559,  1563,  1568,  1573,
  1578,  1583,  1588,  1593,  1598,  1603
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BEG","END",
"ACCELERATORS","VIRTKEY","ASCII","NOINVERT","SHIFT","CONTROL","ALT","BITMAP",
"CURSOR","DIALOG","DIALOGEX","EXSTYLE","CAPTION","CLASS","STYLE","AUTO3STATE",
"AUTOCHECKBOX","AUTORADIOBUTTON","CHECKBOX","COMBOBOX","CTEXT","DEFPUSHBUTTON",
"EDITTEXT","GROUPBOX","LISTBOX","LTEXT","PUSHBOX","PUSHBUTTON","RADIOBUTTON",
"RTEXT","SCROLLBAR","STATE3","USERBUTTON","BEDIT","HEDIT","IEDIT","FONT","ICON",
"LANGUAGE","CHARACTERISTICS","VERSIONK","MENU","MENUEX","MENUITEM","SEPARATOR",
"POPUP","CHECKED","GRAYED","HELP","INACTIVE","MENUBARBREAK","MENUBREAK","MESSAGETABLE",
"RCDATA","STRINGTABLE","VERSIONINFO","FILEVERSION","PRODUCTVERSION","FILEFLAGSMASK",
"FILEFLAGS","FILEOS","FILETYPE","FILESUBTYPE","BLOCKSTRINGFILEINFO","BLOCKVARFILEINFO",
"VALUE","BLOCK","MOVEABLE","FIXED","PURE","IMPURE","PRELOAD","LOADONCALL","DISCARDABLE",
"NOT","QUOTEDSTRING","STRING","NUMBER","SIZEDSTRING","IGNORED_TOKEN","'|'","'^'",
"'&'","'+'","'-'","'*'","'/'","'%'","'~'","NEG","','","'='","'('","')'","input",
"newcmd","accelerator","acc_entries","acc_entry","acc_event","acc_options","acc_option",
"bitmap","cursor","dialog","@@1","@@2","@@3","exstyle","styles","@@4","controls",
"control","@@5","@@6","@@7","@@8","@@9","@@10","@@11","@@12","@@13","@@14","@@15","@@16",
"@@17","@@18","@@19","@@20","@@21","@@22","@@23","@@24","@@25","control_params","optstringc",
"opt_control_data","control_styleexpr","@@26","icon_styleexpr","@@27","control_params_styleexpr",
"@@28","font","icon","language","menu","menuitems","menuitem","menuitem_flags",
"menuitem_flag","menuex","menuexitems","menuexitem","messagetable","rcdata",
"optrcdata_data","@@29","optrcdata_data_int","rcdata_data","stringtable","@@30",
"string_data","user","versioninfo","fixedverinfo","verblocks","vervals","vertrans",
"id","suboptions","memflags_move_discard","memflags_move","memflag","file_name",
"styleexpr","parennumber","optcnumexpr","cnumexpr","numexpr","sizednumexpr",
"cposnumexpr","posnumexpr","sizedposnumexpr", NULL
};
#endif

static const short yyr1[] = {     0,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,   100,   101,   102,   102,
   103,   103,   104,   104,   105,   105,   105,   106,   106,   106,
   106,   106,   106,   107,   108,   110,   109,   111,   109,   112,
   109,   113,   113,   114,   114,   114,   115,   114,   114,   114,
   114,   114,   114,   114,   114,   116,   116,   118,   117,   119,
   117,   120,   117,   121,   117,   122,   117,   123,   117,   117,
   117,   117,   117,   124,   117,   125,   117,   126,   117,   127,
   117,   128,   117,   117,   117,   117,   129,   117,   130,   117,
   131,   117,   132,   117,   133,   117,   134,   117,   135,   117,
   136,   117,   137,   117,   138,   117,   139,   139,   139,   140,
   140,   141,   141,   143,   142,   145,   144,   147,   146,   148,
   149,   150,   151,   152,   152,   153,   153,   153,   154,   154,
   154,   155,   155,   155,   155,   155,   155,   156,   157,   157,
   158,   158,   158,   158,   158,   158,   158,   158,   159,   160,
   162,   161,   163,   163,   164,   164,   164,   164,   166,   165,
   167,   167,   167,   168,   168,   169,   170,   170,   170,   170,
   170,   170,   170,   170,   171,   171,   171,   172,   172,   173,
   173,   174,   174,   175,   175,   175,   175,   175,   176,   176,
   177,   177,   178,   178,   178,   178,   178,   178,   178,   179,
   179,   180,   180,   180,   180,   181,   181,   182,   182,   183,
   184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   186,   187,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188
};

static const short yyr2[] = {     0,
     0,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     0,     6,     0,     2,
     2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
     1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
    14,     0,     3,     0,     3,     3,     0,     4,     3,     5,
     7,     3,     3,     4,     3,     0,     2,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,    11,
    12,    12,    13,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     6,    10,    11,     0,     3,     0,     3,
     0,     3,     0,     3,     0,     3,     0,     3,     0,     3,
     0,     3,     0,     3,     0,    16,     7,     9,    10,     0,
     2,     0,     3,     0,     3,     0,     3,     0,     3,     4,
     4,     3,     6,     0,     2,     4,     2,     6,     0,     3,
     2,     1,     1,     1,     1,     1,     1,     6,     0,     2,
     2,     3,     5,     2,     5,     6,     7,     9,     4,     6,
     0,     2,     0,     1,     1,     1,     3,     3,     0,     6,
     0,     3,     4,     6,     4,     6,     0,     6,     6,     3,
     3,     3,     3,     3,     0,     8,     7,     0,     5,     0,
     3,     1,     1,     0,     2,     3,     4,     3,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     3,     4,     1,     3,     0,     1,     2,
     1,     1,     3,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     1,     1,     3,     2,     3,     3,
     3,     3,     3,     3,     3,     3
};

static const short yydefact[] = {     1,
    17,     0,     0,   184,   183,   226,    16,     0,     0,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,     0,   182,   225,   212,     0,     0,     0,
     0,   211,     0,   228,     0,   184,   191,   189,   191,   191,
   189,   189,   184,   184,   191,   184,   167,   184,     0,     0,
     0,     0,     0,     0,     0,     0,   215,   214,     0,     0,
   122,     0,     0,     0,     0,     0,     0,     0,     0,   159,
     0,     0,     0,   193,   194,   195,   196,   197,   198,   199,
   185,   227,     0,     0,     0,    42,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   236,   235,   234,   232,   233,
   229,   230,   231,   213,   210,   223,   222,   221,   219,   220,
   216,   217,   218,   161,     0,   186,   188,    19,   200,   201,
   192,    34,   190,    35,     0,     0,     0,   120,   121,   124,
   139,   149,   151,   175,     0,     0,     0,     0,     0,     0,
     0,   151,   165,     0,   187,     0,     0,     0,     0,     0,
     0,     0,   153,     0,     0,     0,   170,   171,   172,   173,
   174,     0,   160,     0,    18,    23,    20,     0,    24,    43,
     0,     0,   123,     0,     0,   125,   138,     0,     0,   140,
   150,   155,   152,   154,   156,   166,     0,     0,     0,     0,
   164,   162,     0,     0,    21,     0,     0,   127,     0,   129,
   144,   141,     0,     0,     0,     0,     0,     0,   163,   224,
     0,    36,    38,   129,     0,   142,   139,     0,   157,   158,
     0,     0,   168,   169,    28,    29,    30,    31,    32,    33,
    22,    25,    44,    44,    40,   126,   124,   132,   133,   134,
   135,   136,   137,     0,   131,   208,     0,   139,     0,   178,
   180,     0,    27,     0,     0,    44,     0,   130,   143,   209,
   145,     0,   139,   208,     0,     0,    26,    56,     0,     0,
     0,    47,     0,     0,     0,     0,     0,    56,     0,   128,
   146,     0,     0,     0,     0,   177,     0,     0,    49,    45,
    46,     0,     0,     0,    53,    55,    52,     0,    56,   147,
   139,   176,     0,   181,    37,   110,    58,    60,    62,    66,
    68,    74,    76,    78,    80,    89,    91,    93,    95,    97,
    99,   101,   103,     0,    64,    82,    87,   110,    57,     0,
   206,     0,    48,   202,     0,    54,    39,     0,     0,     0,
     0,     0,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,     0,
   110,   110,   110,     0,   203,     0,     0,    50,    41,   148,
   179,   111,     0,    59,     0,    61,    63,    67,    69,    75,
    77,    79,    81,    90,    92,    94,    96,    98,   100,   102,
   104,     0,    65,    83,    88,     0,   207,     0,   204,     0,
     0,     0,     0,     0,     0,   205,    51,     0,   114,     0,
     0,     0,   112,     0,     0,     0,     0,     0,   151,    84,
     0,     0,   115,     0,     0,     0,     0,     0,     0,     0,
   112,     0,   113,   116,   208,     0,   208,   118,   107,   208,
     0,     0,   112,   209,   208,   112,   209,     0,   112,   209,
     0,   117,    85,   112,   112,   209,    70,   112,   119,   108,
   112,     0,    86,    72,   112,    71,   109,     0,    73,   105,
     0,   208,   106,     0,     0
};

static const short yydefgoto[] = {     1,
     2,    10,   146,   167,   168,   231,   232,    11,    12,    13,
   233,   234,   256,   126,   254,   292,   288,   329,   343,   344,
   345,   361,   346,   347,   348,   349,   350,   351,   362,   363,
   352,   353,   354,   355,   356,   357,   358,   359,   471,   374,
   375,   420,   410,   415,   435,   442,   440,   448,    14,    15,
    16,    17,   150,   176,   215,   245,    18,   151,   180,    19,
    20,   152,   153,   183,   184,    21,   114,   144,    22,    23,
    94,   154,   265,   266,    24,    33,    85,    84,    81,   122,
   333,   334,   259,   260,   105,    32,   195,    25,    26
};

static const short yypact[] = {-32768,
    39,   284,   231,-32768,-32768,-32768,-32768,   231,   231,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   233,-32768,   601,-32768,   231,   231,   231,
   -60,   609,    35,-32768,   314,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   231,   231,
   231,   231,   231,   231,   231,   231,-32768,-32768,   577,   231,
-32768,   231,   231,   231,   231,   231,   231,   231,   231,-32768,
   231,   231,   231,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   209,   604,   604,   234,   234,   604,   604,   259,
   273,   604,   319,   169,   113,   616,   152,   386,   -33,   -33,
-32768,-32768,-32768,-32768,-32768,   616,   152,   386,   -33,   -33,
-32768,-32768,-32768,-32768,   -60,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    -1,    99,    99,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   231,   231,   231,   231,   231,   231,
   231,-32768,-32768,     0,-32768,     1,   231,   -60,   -60,    92,
    95,   110,   337,    52,   -60,   -60,-32768,-32768,-32768,-32768,
-32768,   124,-32768,    59,-32768,-32768,-32768,    32,-32768,-32768,
   -60,   -60,-32768,   -36,    51,-32768,-32768,    42,    68,-32768,
-32768,-32768,-32768,    54,   609,-32768,   150,   161,   -60,   -60,
-32768,-32768,    75,    99,    66,   -60,   -60,-32768,   -60,-32768,
-32768,   -60,     5,   527,   107,   136,   -60,   -60,-32768,-32768,
   703,-32768,   -60,-32768,    20,   -60,-32768,     6,-32768,   609,
   212,   137,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    23,-32768,-32768,-32768,-32768,   303,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   664,-32768,   -60,   102,-32768,     7,-32768,
-32768,   703,-32768,   446,   454,-32768,   115,-32768,-32768,-32768,
-32768,   120,-32768,   -60,    15,    10,-32768,-32768,   231,   141,
   123,-32768,   231,   231,   231,   231,   123,-32768,   463,-32768,
-32768,   121,   219,   221,   143,-32768,   -60,   492,-32768,-32768,
-32768,   -57,   131,   -60,-32768,-32768,-32768,   529,-32768,-32768,
-32768,-32768,   133,-32768,-32768,   157,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   177,-32768,-32768,-32768,   157,-32768,    65,
-32768,   231,   171,-32768,   184,-32768,-32768,   566,   125,   185,
   172,   231,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   173,
   157,   157,   157,   231,-32768,   190,    98,   -60,-32768,-32768,
-32768,-32768,   174,-32768,   231,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   231,-32768,-32768,-32768,   -60,-32768,    65,-32768,   -60,
   289,   194,   -60,   197,   -60,-32768,-32768,   194,-32768,   -60,
   -60,   231,     8,   -60,   -57,   -60,   -60,   199,-32768,-32768,
   -60,   -60,   171,   -60,   -60,   231,   291,   201,   -60,   -60,
     9,   202,-32768,-32768,   -60,   -60,   -60,-32768,-32768,   -60,
   231,   -57,   296,   -60,   -60,   296,   -60,   -57,   296,   -60,
   205,   171,-32768,   296,   296,   -60,-32768,   296,   171,-32768,
   296,   231,-32768,-32768,   296,-32768,-32768,   206,-32768,-32768,
   -57,   114,-32768,   321,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -211,-32768,-32768,-32768,
-32768,-32768,-32768,   232,  -219,-32768,  -254,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   298,
  -285,   176,   -85,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    88,-32768,   126,    94,-32768,  -171,-32768,-32768,
-32768,  -141,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -22,   215,    46,   158,   493,   452,
  -325,  -312,  -261,    11,    -3,    -2,-32768,  -110,-32768
};


#define	YYLAST		720


static const short yytable[] = {    31,
   162,    48,   283,   163,   165,    34,    35,   217,   248,   263,
   419,   419,   198,   286,   255,   148,   149,   365,   284,   253,
   342,   330,   237,   298,   331,    57,    58,    59,   225,   226,
   227,   228,   229,   230,    60,   169,   279,    70,   474,   332,
   267,    61,   364,   199,   338,   247,    96,    97,    98,    99,
   100,   101,   102,   103,   399,   186,    67,    68,    69,   106,
   107,   108,   109,   110,   111,   112,   113,   115,   116,   117,
   238,   239,   240,   241,   242,   243,   262,    71,    72,    73,
   166,    27,     6,   210,   285,   406,    88,    89,    28,   423,
   201,   282,    29,     8,   147,   173,    30,     9,   177,    60,
    60,    60,    60,   438,    60,   261,    74,    75,    76,    77,
    78,    79,    80,   181,   244,   142,   452,   252,   280,   187,
   188,   202,   459,   281,   300,   145,   194,   191,   370,   339,
   200,   155,   156,   157,   158,   159,   160,   161,   192,   174,
   164,   175,   178,   170,   179,   472,   331,   203,   204,   178,
   185,   179,   205,   193,   209,    71,    72,    73,   171,   172,
   211,   332,   174,   206,   175,   189,   190,   178,   178,   179,
   179,   134,   178,   443,   179,   446,   398,   221,   449,   331,
     6,   196,   197,   455,    74,    75,    76,    77,    78,    79,
    80,     8,   119,   120,   332,     9,    86,    87,   367,   207,
   208,   220,    92,     5,     6,   222,   212,   213,    60,   214,
   473,   118,   216,   218,   250,     8,   251,   223,   224,     9,
   290,   301,   303,   235,   302,   335,   246,   340,   249,   135,
   136,   137,   138,   139,   140,   141,   341,    36,    64,    65,
    66,    67,    68,    69,    37,    38,    39,    40,   291,   125,
    83,    71,    72,    73,   297,   367,   360,    90,    91,   264,
    93,   130,    95,   368,   371,   289,   372,   392,   401,   293,
   294,   295,   296,    41,    42,   131,   287,   427,    43,    44,
    74,    75,    76,    77,    78,    79,    80,   397,   409,    45,
    46,   412,    47,   426,   433,   434,   441,   304,   419,   462,
   470,    71,    72,    73,   336,    74,    75,    76,    77,    78,
    79,    80,    27,     5,     6,    71,    72,    73,   127,    28,
   475,   133,   414,    29,   257,     8,     3,    30,   366,     9,
    74,    75,    76,    77,    78,    79,    80,   258,   373,   236,
     0,     0,     4,     0,    74,    75,    76,    77,    78,    79,
    80,     0,     0,   238,   239,   240,   241,   242,   243,     0,
   396,    71,    72,    73,     5,     6,     0,     7,   408,     0,
    27,   403,     0,     0,     0,     0,     8,    28,   400,     0,
     9,    29,     0,   402,     0,    30,     0,     0,   404,     0,
    74,    75,    76,    77,    78,    79,    80,   244,    62,    63,
    64,    65,    66,    67,    68,    69,   405,     0,   418,     0,
   407,    82,     0,   411,     0,   413,     0,     0,    27,   182,
   416,   417,   432,   421,   422,    28,   424,   425,     0,    29,
     0,   428,   429,    30,   430,   431,     0,   451,     0,   436,
   437,     0,     0,     0,     0,   444,   445,   447,   268,     0,
   450,     0,     0,     0,   454,   456,   278,   458,   468,     0,
   461,   269,   270,   271,   272,   299,   465,     0,     0,   269,
   270,   271,   272,    65,    66,    67,    68,    69,   269,   270,
   271,   272,     0,     0,     0,     0,   273,     0,   274,   275,
   276,   277,     0,     0,   273,   305,   274,   275,   276,   277,
     0,   306,     0,   273,     0,   274,   275,   276,   277,     0,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   337,   328,     0,     0,   124,     0,   306,   128,
   129,     0,     0,   132,     0,     0,   143,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   369,
   328,     0,     0,     0,     0,   306,   121,   123,   121,   121,
   123,   123,     0,     0,   121,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   439,   328,    27,   219,
     0,     0,     0,     0,     0,    28,     0,     0,   453,    29,
     0,   457,     0,    30,   460,     0,     0,     0,     0,   463,
   464,     0,     0,   466,     0,     0,   467,     0,     0,     0,
   469,   376,   377,   378,   379,   380,   381,   382,   383,   384,
   385,   386,   387,   388,   389,   390,   391,     0,   393,   394,
   395,    62,    63,    64,    65,    66,    67,    68,    69,     0,
     0,     0,     0,     0,   104,    74,    75,    76,    77,    78,
    79,    80,     0,   119,   120,    49,    50,    51,    52,    53,
    54,    55,    56,    62,    63,    64,    65,    66,    67,    68,
    69,    63,    64,    65,    66,    67,    68,    69,   225,   226,
   227,   228,   229,   230,   238,   239,   240,   241,   242,   243
};

static const short yycheck[] = {     3,
   142,    24,   264,     4,     4,     8,     9,     3,     3,     3,
     3,     3,    49,     4,   234,   126,   127,   330,     4,   231,
   306,    79,     3,   278,    82,    28,    29,    30,     6,     7,
     8,     9,    10,    11,    95,   146,   256,     3,     0,    97,
   252,    31,   328,    80,   299,   217,    49,    50,    51,    52,
    53,    54,    55,    56,   367,     4,    90,    91,    92,    62,
    63,    64,    65,    66,    67,    68,    69,    71,    72,    73,
    51,    52,    53,    54,    55,    56,   248,    43,    44,    45,
    80,    82,    82,   194,    70,   398,    41,    42,    89,   415,
    49,   263,    93,    93,    96,     4,    97,    97,     4,    95,
    95,    95,    95,    95,    95,     4,    72,    73,    74,    75,
    76,    77,    78,     4,    95,     3,   442,    95,     4,    68,
    69,    80,   448,     4,     4,   115,    95,     4,     4,   301,
    80,   135,   136,   137,   138,   139,   140,   141,    80,    48,
   144,    50,    48,   147,    50,   471,    82,    80,    95,    48,
   153,    50,     3,    95,    80,    43,    44,    45,   148,   149,
    95,    97,    48,     3,    50,   155,   156,    48,    48,    50,
    50,     3,    48,   435,    50,   437,    79,    71,   440,    82,
    82,   171,   172,   445,    72,    73,    74,    75,    76,    77,
    78,    93,    80,    81,    97,    97,    39,    40,    85,   189,
   190,   204,    45,    81,    82,    70,   196,   197,    95,   199,
   472,     3,   202,   203,     3,    93,    80,   207,   208,    97,
    80,     3,    80,   213,     4,    95,   216,    95,   218,    61,
    62,    63,    64,    65,    66,    67,    80,     5,    87,    88,
    89,    90,    91,    92,    12,    13,    14,    15,   271,    16,
    36,    43,    44,    45,   277,    85,    80,    43,    44,   249,
    46,     3,    48,    80,    80,   269,    95,    95,    95,   273,
   274,   275,   276,    41,    42,     3,   266,   419,    46,    47,
    72,    73,    74,    75,    76,    77,    78,    98,    95,    57,
    58,    95,    60,    95,     4,    95,    95,   287,     3,    95,
    95,    43,    44,    45,   294,    72,    73,    74,    75,    76,
    77,    78,    82,    81,    82,    43,    44,    45,    87,    89,
     0,     3,   408,    93,   237,    93,    43,    97,   332,    97,
    72,    73,    74,    75,    76,    77,    78,   244,   342,   214,
    -1,    -1,    59,    -1,    72,    73,    74,    75,    76,    77,
    78,    -1,    -1,    51,    52,    53,    54,    55,    56,    -1,
   364,    43,    44,    45,    81,    82,    -1,    84,    80,    -1,
    82,   375,    -1,    -1,    -1,    -1,    93,    89,   368,    -1,
    97,    93,    -1,   373,    -1,    97,    -1,    -1,   392,    -1,
    72,    73,    74,    75,    76,    77,    78,    95,    85,    86,
    87,    88,    89,    90,    91,    92,   396,    -1,   412,    -1,
   400,    98,    -1,   403,    -1,   405,    -1,    -1,    82,    83,
   410,   411,   426,   413,   414,    89,   416,   417,    -1,    93,
    -1,   421,   422,    97,   424,   425,    -1,   441,    -1,   429,
   430,    -1,    -1,    -1,    -1,   435,   436,   437,     3,    -1,
   440,    -1,    -1,    -1,   444,   445,     3,   447,   462,    -1,
   450,    16,    17,    18,    19,     3,   456,    -1,    -1,    16,
    17,    18,    19,    88,    89,    90,    91,    92,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,
    45,    46,    -1,    -1,    41,     4,    43,    44,    45,    46,
    -1,    10,    -1,    41,    -1,    43,    44,    45,    46,    -1,
    -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,     4,    42,    -1,    -1,    85,    -1,    10,    88,
    89,    -1,    -1,    92,    -1,    -1,    95,    -1,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,     4,
    42,    -1,    -1,    -1,    -1,    10,    84,    85,    86,    87,
    88,    89,    -1,    -1,    92,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,   431,    42,    82,    83,
    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,   443,    93,
    -1,   446,    -1,    97,   449,    -1,    -1,    -1,    -1,   454,
   455,    -1,    -1,   458,    -1,    -1,   461,    -1,    -1,    -1,
   465,   344,   345,   346,   347,   348,   349,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
   363,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    85,    86,    87,    88,    89,
    90,    91,    92,    85,    86,    87,    88,    89,    90,    91,
    92,    86,    87,    88,    89,    90,    91,    92,     6,     7,
     8,     9,    10,    11,    51,    52,    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 17:
#line 176 "rcparse.y"
{
	    rcparse_discard_strings ();
	  ;
    break;}
case 18:
#line 185 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	  ;
    break;}
case 19:
#line 192 "rcparse.y"
{
	    yyval.pacc = NULL;
	  ;
    break;}
case 20:
#line 196 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  ;
    break;}
case 21:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  ;
    break;}
case 22:
#line 222 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL | ACC_ALT)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  ;
    break;}
case 23:
#line 234 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = toupper ((unsigned char) ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  ;
    break;}
case 24:
#line 255 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  ;
    break;}
case 25:
#line 265 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  ;
    break;}
case 26:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 27:
#line 274 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 28:
#line 281 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  ;
    break;}
case 29:
#line 285 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  ;
    break;}
case 30:
#line 290 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  ;
    break;}
case 31:
#line 294 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  ;
    break;}
case 32:
#line 298 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  ;
    break;}
case 33:
#line 302 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  ;
    break;}
case 34:
#line 311 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 35:
#line 320 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 36:
#line 330 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 37:
#line 346 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 38:
#line 351 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 39:
#line 369 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 40:
#line 374 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	    ;
    break;}
case 41:
#line 393 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	  ;
    break;}
case 42:
#line 400 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 43:
#line 404 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 45:
#line 412 "rcparse.y"
{
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  ;
    break;}
case 46:
#line 416 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  ;
    break;}
case 47:
#line 420 "rcparse.y"
{ style = dialog.style; ;
    break;}
case 48:
#line 422 "rcparse.y"
{
	    dialog.style = style;
	  ;
    break;}
case 49:
#line 426 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  ;
    break;}
case 50:
#line 430 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	  ;
    break;}
case 51:
#line 436 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
	      }
	  ;
    break;}
case 52:
#line 449 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  ;
    break;}
case 53:
#line 453 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 54:
#line 457 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 55:
#line 461 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  ;
    break;}
case 57:
#line 469 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  ;
    break;}
case 58:
#line 480 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 59:
#line 486 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 60:
#line 490 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 61:
#line 496 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 62:
#line 500 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 63:
#line 506 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 64:
#line 510 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 65:
#line 516 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  ;
    break;}
case 66:
#line 523 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 67:
#line 529 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 68:
#line 533 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    ;
    break;}
case 69:
#line 539 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 70:
#line 544 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 71:
#line 555 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 72:
#line 564 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  ;
    break;}
case 73:
#line 577 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].s, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  ;
    break;}
case 74:
#line 587 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    ;
    break;}
case 75:
#line 593 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 76:
#line 597 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 77:
#line 603 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 78:
#line 607 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 79:
#line 613 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 80:
#line 617 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 81:
#line 623 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 82:
#line 627 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 83:
#line 633 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  ;
    break;}
case 84:
#line 640 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-4].s, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, CTL_STATIC,
				 SS_ICON | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 85:
#line 652 "rcparse.y"
{
    	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, CTL_STATIC,
				 style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 86:
#line 664 "rcparse.y"
{
    	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, CTL_STATIC,
				 style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 87:
#line 673 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 88:
#line 679 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  ;
    break;}
case 89:
#line 686 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    ;
    break;}
case 90:
#line 692 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 91:
#line 696 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    ;
    break;}
case 92:
#line 702 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 93:
#line 706 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 94:
#line 712 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 95:
#line 716 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 96:
#line 722 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 97:
#line 726 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 98:
#line 732 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 99:
#line 736 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    ;
    break;}
case 100:
#line 742 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 101:
#line 746 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    ;
    break;}
case 102:
#line 752 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 103:
#line 756 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 104:
#line 762 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 105:
#line 767 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 106:
#line 769 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-14].s, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  ;
    break;}
case 107:
#line 785 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].s, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 108:
#line 797 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 109:
#line 808 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 110:
#line 819 "rcparse.y"
{
	    yyval.s = NULL;
	  ;
    break;}
case 111:
#line 823 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 112:
#line 830 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  ;
    break;}
case 113:
#line 834 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  ;
    break;}
case 114:
#line 843 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 116:
#line 849 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; ;
    break;}
case 118:
#line 855 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; ;
    break;}
case 120:
#line 863 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 121:
#line 872 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 122:
#line 882 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 123:
#line 891 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 124:
#line 898 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 125:
#line 902 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 126:
#line 919 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  ;
    break;}
case 127:
#line 923 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 128:
#line 927 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 129:
#line 934 "rcparse.y"
{
	    yyval.is = 0;
	  ;
    break;}
case 130:
#line 938 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 131:
#line 942 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 132:
#line 949 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  ;
    break;}
case 133:
#line 953 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  ;
    break;}
case 134:
#line 957 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  ;
    break;}
case 135:
#line 961 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  ;
    break;}
case 136:
#line 965 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  ;
    break;}
case 137:
#line 969 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  ;
    break;}
case 138:
#line 978 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 139:
#line 985 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 140:
#line 989 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 141:
#line 1006 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 142:
#line 1010 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  ;
    break;}
case 143:
#line 1014 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  ;
    break;}
case 144:
#line 1018 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  ;
    break;}
case 145:
#line 1022 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 146:
#line 1026 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 147:
#line 1030 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 148:
#line 1035 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  ;
    break;}
case 149:
#line 1044 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 150:
#line 1053 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 151:
#line 1062 "rcparse.y"
{
	    rcparse_rcdata ();
	  ;
    break;}
case 152:
#line 1066 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 153:
#line 1074 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  ;
    break;}
case 154:
#line 1079 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 155:
#line 1086 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 156:
#line 1094 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 157:
#line 1102 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 158:
#line 1111 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 159:
#line 1125 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; ;
    break;}
case 162:
#line 1132 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	  ;
    break;}
case 163:
#line 1136 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	  ;
    break;}
case 164:
#line 1146 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 165:
#line 1150 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 166:
#line 1159 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	  ;
    break;}
case 167:
#line 1166 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  ;
    break;}
case 168:
#line 1172 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 169:
#line 1178 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 170:
#line 1184 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 171:
#line 1189 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 172:
#line 1194 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 173:
#line 1199 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 174:
#line 1204 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 175:
#line 1218 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  ;
    break;}
case 176:
#line 1222 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  ;
    break;}
case 177:
#line 1226 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  ;
    break;}
case 178:
#line 1233 "rcparse.y"
{
	    yyval.verstring = NULL;
	  ;
    break;}
case 179:
#line 1237 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  ;
    break;}
case 180:
#line 1244 "rcparse.y"
{
	    yyval.vervar = NULL;
	  ;
    break;}
case 181:
#line 1248 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  ;
    break;}
case 182:
#line 1257 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  ;
    break;}
case 183:
#line 1262 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      if (islower ((unsigned char) *s))
		*s = toupper ((unsigned char) *s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  ;
    break;}
case 184:
#line 1280 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 185:
#line 1287 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 186:
#line 1293 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 187:
#line 1298 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 188:
#line 1303 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  ;
    break;}
case 189:
#line 1313 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  ;
    break;}
case 190:
#line 1319 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 191:
#line 1330 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 192:
#line 1336 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 193:
#line 1348 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 194:
#line 1353 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 195:
#line 1358 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 196:
#line 1363 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  ;
    break;}
case 197:
#line 1368 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 198:
#line 1373 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  ;
    break;}
case 199:
#line 1378 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 200:
#line 1388 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 201:
#line 1392 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 202:
#line 1409 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 203:
#line 1413 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 204:
#line 1417 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 205:
#line 1421 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 206:
#line 1428 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 207:
#line 1432 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  ;
    break;}
case 208:
#line 1441 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 209:
#line 1445 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 210:
#line 1454 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 211:
#line 1463 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 212:
#line 1472 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 213:
#line 1476 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 214:
#line 1480 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 215:
#line 1485 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 216:
#line 1490 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 217:
#line 1495 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 218:
#line 1500 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 219:
#line 1505 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 220:
#line 1510 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 221:
#line 1515 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 222:
#line 1520 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 223:
#line 1525 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 224:
#line 1536 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 225:
#line 1545 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 226:
#line 1556 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 227:
#line 1560 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 228:
#line 1564 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 229:
#line 1569 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 230:
#line 1574 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 231:
#line 1579 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 232:
#line 1584 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 233:
#line 1589 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 234:
#line 1594 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 235:
#line 1599 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 236:
#line 1604 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1610 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@

