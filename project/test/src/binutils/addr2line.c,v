head	1.44;
access;
symbols
	binutils-2_24-branch:1.44.0.2
	binutils-2_24-branchpoint:1.44
	binutils-2_21_1:1.38
	binutils-2_23_2:1.42
	binutils-2_23_1:1.42
	binutils-2_23:1.42
	binutils-2_23-branch:1.42.0.2
	binutils-2_23-branchpoint:1.42
	binutils-2_22_branch:1.39.0.4
	binutils-2_22:1.39
	binutils-2_22-branch:1.39.0.2
	binutils-2_22-branchpoint:1.39
	binutils-2_21:1.38
	binutils-2_21-branch:1.38.0.2
	binutils-2_21-branchpoint:1.38
	binutils-2_20_1:1.33.2.2
	binutils-2_20:1.33.2.2
	binutils-arc-20081103-branch:1.32.0.10
	binutils-arc-20081103-branchpoint:1.32
	binutils-2_20-branch:1.33.0.2
	binutils-2_20-branchpoint:1.33
	dje-cgen-play1-branch:1.32.0.8
	dje-cgen-play1-branchpoint:1.32
	arc-20081103-branch:1.32.0.6
	arc-20081103-branchpoint:1.32
	binutils-2_19_1:1.32
	binutils-2_19:1.32
	binutils-2_19-branch:1.32.0.4
	binutils-2_19-branchpoint:1.32
	binutils-2_18:1.32
	binutils-2_18-branch:1.32.0.2
	binutils-2_18-branchpoint:1.32
	binutils-csl-coldfire-4_1-32:1.26.2.2
	binutils-csl-sourcerygxx-4_1-32:1.26.2.2
	binutils-csl-innovasic-fido-3_4_4-33:1.26.2.2
	binutils-csl-sourcerygxx-3_4_4-32:1.21.6.1
	binutils-csl-coldfire-4_1-30:1.26.2.2
	binutils-csl-sourcerygxx-4_1-30:1.26.2.2
	binutils-csl-coldfire-4_1-28:1.26.2.2
	binutils-csl-sourcerygxx-4_1-29:1.26.2.2
	binutils-csl-sourcerygxx-4_1-28:1.26.2.2
	binutils-csl-arm-2006q3-27:1.26.2.2
	binutils-csl-sourcerygxx-4_1-27:1.26.2.2
	binutils-csl-arm-2006q3-26:1.26.2.2
	binutils-csl-sourcerygxx-4_1-26:1.26.2.2
	binutils-csl-sourcerygxx-4_1-25:1.26.2.2
	binutils-csl-sourcerygxx-4_1-24:1.26.2.1
	binutils-csl-sourcerygxx-4_1-23:1.26.2.1
	binutils-csl-sourcerygxx-4_1-21:1.26.2.1
	binutils-csl-arm-2006q3-21:1.26.2.1
	binutils-csl-sourcerygxx-4_1-22:1.26.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.26.2.1
	binutils-csl-sourcerygxx-4_1-20:1.26.2.1
	binutils-csl-arm-2006q3-19:1.26.2.1
	binutils-csl-sourcerygxx-4_1-19:1.26.2.1
	binutils-csl-sourcerygxx-4_1-18:1.26.2.1
	binutils-csl-renesas-4_1-9:1.26.2.1
	binutils-csl-sourcerygxx-3_4_4-25:1.21.6.1
	binutils-csl-renesas-4_1-8:1.26
	binutils-csl-renesas-4_1-7:1.26
	binutils-csl-renesas-4_1-6:1.26
	binutils-csl-sourcerygxx-4_1-17:1.26
	binutils-csl-sourcerygxx-4_1-14:1.26
	binutils-csl-sourcerygxx-4_1-15:1.26
	binutils-csl-sourcerygxx-4_1-13:1.26
	binutils-2_17:1.27
	binutils-csl-sourcerygxx-4_1-12:1.26
	binutils-csl-sourcerygxx-3_4_4-21:1.26
	binutils-csl-wrs-linux-3_4_4-24:1.21
	binutils-csl-wrs-linux-3_4_4-23:1.21
	binutils-csl-sourcerygxx-4_1-9:1.26
	binutils-csl-sourcerygxx-4_1-8:1.26
	binutils-csl-sourcerygxx-4_1-7:1.26
	binutils-csl-arm-2006q1-6:1.26
	binutils-csl-sourcerygxx-4_1-6:1.26
	binutils-csl-wrs-linux-3_4_4-22:1.21
	binutils-csl-coldfire-4_1-11:1.26
	binutils-csl-sourcerygxx-3_4_4-19:1.26
	binutils-csl-coldfire-4_1-10:1.26
	binutils-csl-sourcerygxx-4_1-5:1.26
	binutils-csl-sourcerygxx-4_1-4:1.26
	binutils-csl-wrs-linux-3_4_4-21:1.21
	binutils-csl-morpho-4_1-4:1.26
	binutils-csl-sourcerygxx-3_4_4-17:1.26
	binutils-csl-wrs-linux-3_4_4-20:1.21
	binutils-2_17-branch:1.27.0.2
	binutils-2_17-branchpoint:1.27
	binutils-csl-2_17-branch:1.26.0.2
	binutils-csl-2_17-branchpoint:1.26
	binutils-csl-gxxpro-3_4-branch:1.21.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.21
	binutils-2_16_1:1.21
	binutils-csl-arm-2005q1b:1.21
	binutils-2_16:1.21
	binutils-csl-arm-2005q1a:1.21
	binutils-csl-arm-2005q1-branch:1.21.0.4
	binutils-csl-arm-2005q1-branchpoint:1.21
	binutils-2_16-branch:1.21.0.2
	binutils-2_16-branchpoint:1.21
	csl-arm-2004-q3d:1.21
	csl-arm-2004-q3:1.21
	binutils-2_15:1.20
	binutils-2_15-branchpoint:1.20
	csl-arm-2004-q1a:1.20
	csl-arm-2004-q1:1.20
	binutils-2_15-branch:1.20.0.6
	cagney_bfdfile-20040213-branch:1.20.0.4
	cagney_bfdfile-20040213-branchpoint:1.20
	cagney_bigcore-20040122-branch:1.20.0.2
	cagney_bigcore-20040122-branchpoint:1.20
	csl-arm-2003-q4:1.20
	binutils-2_14:1.18
	binutils-2_14-branch:1.18.0.2
	binutils-2_14-branchpoint:1.18
	binutils-2_13_2_1:1.15.2.1
	binutils-2_13_2:1.15.2.1
	binutils-2_13_1:1.15.2.1
	binutils-2_13:1.15
	binutils-2_13-branchpoint:1.15
	binutils-2_13-branch:1.15.0.2
	binutils-2_12_1:1.13
	binutils-2_12:1.13
	binutils-2_12-branch:1.13.0.2
	binutils-2_12-branchpoint:1.13
	cygnus_cvs_20020108_pre:1.12
	binutils-2_11_2:1.8.2.1
	binutils-2_11_1:1.8.2.1
	binutils-2_11:1.8
	x86_64versiong3:1.8
	binutils-2_11-branch:1.8.0.2
	binutils-2_10_1:1.2.2.2
	binutils-2_10:1.2.2.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.44
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.44
date	2013.03.15.16.25.00;	author nickc;	state Exp;
branches;
next	1.43;

1.43
date	2013.01.18.13.14.35;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2012.07.24.21.06.56;	author ccoutant;	state Exp;
branches;
next	1.41;

1.41
date	2012.06.01.01.04.29;	author amodra;	state Exp;
branches;
next	1.40;

1.40
date	2011.10.13.15.33.32;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2011.03.30.16.09.40;	author clm;	state Exp;
branches;
next	1.38;

1.38
date	2010.10.29.12.10.25;	author hjl;	state Exp;
branches;
next	1.37;

1.37
date	2009.12.10.16.12.33;	author gingold;	state Exp;
branches;
next	1.36;

1.36
date	2009.12.09.12.58.23;	author gingold;	state Exp;
branches;
next	1.35;

1.35
date	2009.10.01.06.33.15;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2009.09.10.13.40.44;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2009.09.02.07.22.31;	author amodra;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2007.04.19.10.43.47;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2007.02.17.13.33.53;	author jsm28;	state Exp;
branches;
next	1.28;

1.28
date	2006.08.06.15.49.45;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.05.16.12.01;	author ebotcazou;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.03.19.37.44;	author mmitchel;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2005.09.30.16.37.31;	author mmitchel;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.23.17.45.42;	author fnf;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.08.14.17.38;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.31.14.40.40;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.15.01.19.13;	author amodra;	state Exp;
branches
	1.21.6.1;
next	1.20;

1.20
date	2003.11.07.12.19.34;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.14.12.20.16;	author aj;	state Exp;
branches;
next	1.18;

1.18
date	2002.11.30.08.39.41;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2002.10.07.17.25.08;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.31.09.38.04;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.02.04.21.24;	author amodra;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2002.05.19.16.17.54;	author kazu;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.23.16.12.55;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.18.08.22.30;	author ths;	state Exp;
branches;
next	1.11;

1.11
date	2001.10.02.06.02.12;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.19.05.33.15;	author hjl;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.13.06.43.56;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.21.20.30.04;	author nickc;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.08.12.00.47.48;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.20.18.02.55;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.07.04.34.50;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.04.14.32.29;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.03.14.10.03;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.07.11.20.02.14;	author ian;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.33.2.1
date	2009.09.10.13.42.08;	author nickc;	state Exp;
branches;
next	1.33.2.2;

1.33.2.2
date	2009.10.01.06.42.38;	author amodra;	state Exp;
branches;
next	;

1.26.2.1
date	2006.08.22.15.08.29;	author jsm28;	state Exp;
branches;
next	1.26.2.2;

1.26.2.2
date	2006.10.16.20.21.23;	author nathan;	state Exp;
branches;
next	;

1.21.6.1
date	2005.08.30.19.57.32;	author mmitchel;	state Exp;
branches;
next	;

1.15.2.1
date	2002.09.23.22.13.11;	author drow;	state Exp;
branches;
next	;

1.8.2.1
date	2001.06.07.03.12.27;	author amodra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.04.05.05.36.40;	author amodra;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.04.07.04.39.24;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches;
next	;


desc
@@


1.44
log
@	* addr2line.c (slurp_symtab): If canonicalization reveals that
	there were no ordinary symbols, try loading the dynamic symbols
	instead.
@
text
@/* addr2line.c -- convert addresses to line number and function name
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2009  Free Software Foundation, Inc.
   Contributed by Ulrich Lauther <Ulrich.Lauther@@mchp.siemens.de>

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */


/* Derived from objdump.c and nm.c by Ulrich.Lauther@@mchp.siemens.de

   Usage:
   addr2line [options] addr addr ...
   or
   addr2line [options]

   both forms write results to stdout, the second form reads addresses
   to be converted from stdin.  */

#include "sysdep.h"
#include "bfd.h"
#include "getopt.h"
#include "libiberty.h"
#include "demangle.h"
#include "bucomm.h"
#include "elf-bfd.h"

static bfd_boolean unwind_inlines;	/* -i, unwind inlined functions. */
static bfd_boolean with_addresses;	/* -a, show addresses.  */
static bfd_boolean with_functions;	/* -f, show function names.  */
static bfd_boolean do_demangle;		/* -C, demangle names.  */
static bfd_boolean pretty_print;	/* -p, print on one line.  */
static bfd_boolean base_names;		/* -s, strip directory names.  */

static int naddr;		/* Number of addresses to process.  */
static char **addr;		/* Hex addresses to process.  */

static asymbol **syms;		/* Symbol table.  */

static struct option long_options[] =
{
  {"addresses", no_argument, NULL, 'a'},
  {"basenames", no_argument, NULL, 's'},
  {"demangle", optional_argument, NULL, 'C'},
  {"exe", required_argument, NULL, 'e'},
  {"functions", no_argument, NULL, 'f'},
  {"inlines", no_argument, NULL, 'i'},
  {"pretty-print", no_argument, NULL, 'p'},
  {"section", required_argument, NULL, 'j'},
  {"target", required_argument, NULL, 'b'},
  {"help", no_argument, NULL, 'H'},
  {"version", no_argument, NULL, 'V'},
  {0, no_argument, 0, 0}
};

static void usage (FILE *, int);
static void slurp_symtab (bfd *);
static void find_address_in_section (bfd *, asection *, void *);
static void find_offset_in_section (bfd *, asection *);
static void translate_addresses (bfd *, asection *);

/* Print a usage message to STREAM and exit with STATUS.  */

static void
usage (FILE *stream, int status)
{
  fprintf (stream, _("Usage: %s [option(s)] [addr(s)]\n"), program_name);
  fprintf (stream, _(" Convert addresses into line number/file name pairs.\n"));
  fprintf (stream, _(" If no addresses are specified on the command line, they will be read from stdin\n"));
  fprintf (stream, _(" The options are:\n\
  @@<file>                Read options from <file>\n\
  -a --addresses         Show addresses\n\
  -b --target=<bfdname>  Set the binary file format\n\
  -e --exe=<executable>  Set the input file name (default is a.out)\n\
  -i --inlines           Unwind inlined functions\n\
  -j --section=<name>    Read section-relative offsets instead of addresses\n\
  -p --pretty-print      Make the output easier to read for humans\n\
  -s --basenames         Strip directory names\n\
  -f --functions         Show function names\n\
  -C --demangle[=style]  Demangle function names\n\
  -h --help              Display this information\n\
  -v --version           Display the program's version\n\
\n"));

  list_supported_targets (program_name, stream);
  if (REPORT_BUGS_TO[0] && status == 0)
    fprintf (stream, _("Report bugs to %s\n"), REPORT_BUGS_TO);
  exit (status);
}

/* Read in the symbol table.  */

static void
slurp_symtab (bfd *abfd)
{
  long storage;
  long symcount;
  bfd_boolean dynamic = FALSE;

  if ((bfd_get_file_flags (abfd) & HAS_SYMS) == 0)
    return;

  storage = bfd_get_symtab_upper_bound (abfd);
  if (storage == 0)
    {
      storage = bfd_get_dynamic_symtab_upper_bound (abfd);
      dynamic = TRUE;
    }
  if (storage < 0)
    bfd_fatal (bfd_get_filename (abfd));

  syms = (asymbol **) xmalloc (storage);
  if (dynamic)
    symcount = bfd_canonicalize_dynamic_symtab (abfd, syms);
  else
    symcount = bfd_canonicalize_symtab (abfd, syms);
  if (symcount < 0)
    bfd_fatal (bfd_get_filename (abfd));

  /* If there are no symbols left after canonicalization and
     we have not tried the dynamic symbols then give them a go.  */
  if (symcount == 0
      && ! dynamic
      && (storage = bfd_get_dynamic_symtab_upper_bound (abfd)) > 0)
    {
      free (syms);
      syms = xmalloc (storage);
      symcount = bfd_canonicalize_dynamic_symtab (abfd, syms);
    }
}

/* These global variables are used to pass information between
   translate_addresses and find_address_in_section.  */

static bfd_vma pc;
static const char *filename;
static const char *functionname;
static unsigned int line;
static unsigned int discriminator;
static bfd_boolean found;

/* Look for an address in a section.  This is called via
   bfd_map_over_sections.  */

static void
find_address_in_section (bfd *abfd, asection *section,
			 void *data ATTRIBUTE_UNUSED)
{
  bfd_vma vma;
  bfd_size_type size;

  if (found)
    return;

  if ((bfd_get_section_flags (abfd, section) & SEC_ALLOC) == 0)
    return;

  vma = bfd_get_section_vma (abfd, section);
  if (pc < vma)
    return;

  size = bfd_get_section_size (section);
  if (pc >= vma + size)
    return;

  found = bfd_find_nearest_line_discriminator (abfd, section, syms, pc - vma,
                                               &filename, &functionname,
                                               &line, &discriminator);
}

/* Look for an offset in a section.  This is directly called.  */

static void
find_offset_in_section (bfd *abfd, asection *section)
{
  bfd_size_type size;

  if (found)
    return;

  if ((bfd_get_section_flags (abfd, section) & SEC_ALLOC) == 0)
    return;

  size = bfd_get_section_size (section);
  if (pc >= size)
    return;

  found = bfd_find_nearest_line_discriminator (abfd, section, syms, pc,
                                               &filename, &functionname,
                                               &line, &discriminator);
}

/* Read hexadecimal addresses from stdin, translate into
   file_name:line_number and optionally function name.  */

static void
translate_addresses (bfd *abfd, asection *section)
{
  int read_stdin = (naddr == 0);

  for (;;)
    {
      if (read_stdin)
	{
	  char addr_hex[100];

	  if (fgets (addr_hex, sizeof addr_hex, stdin) == NULL)
	    break;
	  pc = bfd_scan_vma (addr_hex, NULL, 16);
	}
      else
	{
	  if (naddr <= 0)
	    break;
	  --naddr;
	  pc = bfd_scan_vma (*addr++, NULL, 16);
	}

      if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)
	{
	  const struct elf_backend_data *bed = get_elf_backend_data (abfd);
	  bfd_vma sign = (bfd_vma) 1 << (bed->s->arch_size - 1);

	  pc &= (sign << 1) - 1;
	  if (bed->sign_extend_vma)
	    pc = (pc ^ sign) - sign;
	}

      if (with_addresses)
        {
          printf ("0x");
          bfd_printf_vma (abfd, pc);

          if (pretty_print)
            printf (": ");
          else
            printf ("\n");
        }

      found = FALSE;
      if (section)
	find_offset_in_section (abfd, section);
      else
	bfd_map_over_sections (abfd, find_address_in_section, NULL);

      if (! found)
	{
	  if (with_functions)
	    {
	      if (pretty_print)
		printf ("?? ");
	      else
		printf ("??\n");
	    }
	  printf ("??:0\n");
	}
      else
	{
	  while (1)
            {
              if (with_functions)
                {
                  const char *name;
                  char *alloc = NULL;

                  name = functionname;
                  if (name == NULL || *name == '\0')
                    name = "??";
                  else if (do_demangle)
                    {
                      alloc = bfd_demangle (abfd, name, DMGL_ANSI | DMGL_PARAMS);
                      if (alloc != NULL)
                        name = alloc;
                    }

                  printf ("%s", name);
                  if (pretty_print)
		    /* Note for translators:  This printf is used to join the
		       function name just printed above to the line number/
		       file name pair that is about to be printed below.  Eg:

		         foo at 123:bar.c  */
                    printf (_(" at "));
                  else
                    printf ("\n");

                  if (alloc != NULL)
                    free (alloc);
                }

              if (base_names && filename != NULL)
                {
                  char *h;

                  h = strrchr (filename, '/');
                  if (h != NULL)
                    filename = h + 1;
                }

              printf ("%s:", filename ? filename : "??");
	      if (line != 0)
                {
                  if (discriminator != 0)
                    printf ("%u (discriminator %u)\n", line, discriminator);
                  else
                    printf ("%u\n", line);
                }
	      else
		printf ("?\n");
              if (!unwind_inlines)
                found = FALSE;
              else
                found = bfd_find_inliner_info (abfd, &filename, &functionname,
					       &line);
              if (! found)
                break;
              if (pretty_print)
		/* Note for translators: This printf is used to join the
		   line number/file name pair that has just been printed with
		   the line number/file name pair that is going to be printed
		   by the next iteration of the while loop.  Eg:

		     123:bar.c (inlined by) 456:main.c  */
                printf (_(" (inlined by) "));
            }
	}

      /* fflush() is essential for using this command as a server
         child process that reads addresses from a pipe and responds
         with line number information, processing one address at a
         time.  */
      fflush (stdout);
    }
}

/* Process a file.  Returns an exit value for main().  */

static int
process_file (const char *file_name, const char *section_name,
	      const char *target)
{
  bfd *abfd;
  asection *section;
  char **matching;

  if (get_file_size (file_name) < 1)
    return 1;

  abfd = bfd_openr (file_name, target);
  if (abfd == NULL)
    bfd_fatal (file_name);

  /* Decompress sections.  */
  abfd->flags |= BFD_DECOMPRESS;

  if (bfd_check_format (abfd, bfd_archive))
    fatal (_("%s: cannot get addresses from archive"), file_name);

  if (! bfd_check_format_matches (abfd, bfd_object, &matching))
    {
      bfd_nonfatal (bfd_get_filename (abfd));
      if (bfd_get_error () == bfd_error_file_ambiguously_recognized)
	{
	  list_matching_formats (matching);
	  free (matching);
	}
      xexit (1);
    }

  if (section_name != NULL)
    {
      section = bfd_get_section_by_name (abfd, section_name);
      if (section == NULL)
	fatal (_("%s: cannot find section %s"), file_name, section_name);
    }
  else
    section = NULL;

  slurp_symtab (abfd);

  translate_addresses (abfd, section);

  if (syms != NULL)
    {
      free (syms);
      syms = NULL;
    }

  bfd_close (abfd);

  return 0;
}

int
main (int argc, char **argv)
{
  const char *file_name;
  const char *section_name;
  char *target;
  int c;

#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  program_name = *argv;
  xmalloc_set_program_name (program_name);

  expandargv (&argc, &argv);

  bfd_init ();
  set_default_bfd_target ();

  file_name = NULL;
  section_name = NULL;
  target = NULL;
  while ((c = getopt_long (argc, argv, "ab:Ce:sfHhij:pVv", long_options, (int *) 0))
	 != EOF)
    {
      switch (c)
	{
	case 0:
	  break;		/* We've been given a long option.  */
	case 'a':
	  with_addresses = TRUE;
	  break;
	case 'b':
	  target = optarg;
	  break;
	case 'C':
	  do_demangle = TRUE;
	  if (optarg != NULL)
	    {
	      enum demangling_styles style;

	      style = cplus_demangle_name_to_style (optarg);
	      if (style == unknown_demangling)
		fatal (_("unknown demangling style `%s'"),
		       optarg);

	      cplus_demangle_set_style (style);
	    }
	  break;
	case 'e':
	  file_name = optarg;
	  break;
	case 's':
	  base_names = TRUE;
	  break;
	case 'f':
	  with_functions = TRUE;
	  break;
        case 'p':
          pretty_print = TRUE;
          break;
	case 'v':
	case 'V':
	  print_version ("addr2line");
	  break;
	case 'h':
	case 'H':
	  usage (stdout, 0);
	  break;
	case 'i':
	  unwind_inlines = TRUE;
	  break;
	case 'j':
	  section_name = optarg;
	  break;
	default:
	  usage (stderr, 1);
	  break;
	}
    }

  if (file_name == NULL)
    file_name = "a.out";

  addr = argv + optind;
  naddr = argc - optind;

  return process_file (file_name, section_name, target);
}
@


1.43
log
@	PR binutils/15026
	* addr2line.c (translate_addresses): When pretty printing, print
	unknown function names on the same line as unknown symbol names.
@
text
@d133 11
@


1.42
log
@2012-07-24  Teresa Johnson  <tejohnson@@google.com>

bfd/
	* bfd.c (bfd_find_nearest_line_discriminator): New macro.
	* coff-rs6000.c: Init _bfd_find_nearest_line_discriminator.
	* coff64-rs6000.c: Likewise.
	* dwarf2.c (struct line_info): Add discriminator field.
	(add_line_info): Fill in new discriminator field.
	(decode_line_info): Record discriminator information instead
        of ignoring it.
	(lookup_address_in_line_info_table): Return discriminator field if
        requested.
	(comp_unit_find_nearest_line): Add discriminator argument.
	(find_line): Likewise.
	(_bfd_dwarf2_find_nearest_line): Likewise.
	(_bfd_dwarf2_find_line): Likewise.
	* elf-bfd.h (_bfd_elf_find_nearest_line_discriminator): New.
        (_bfd_elf_find_line_discriminator): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): Likewise. Defined.
	* elf.c (_bfd_elf_find_nearest_line): Change to a wrapper
        that invokes _bfd_elf_find_nearest_line_discriminator with correct
        arguments.
	(_bfd_elf_find_nearest_line_discriminator): New.
	(_bfd_elf_find_line): Change to a wrapper
        that invokes _bfd_elf_find_line_discriminator with correct
        arguments.
	(_bfd_elf_find_line_discriminator): New.
	* coffgen.c (coff_find_nearest_line_with_names): Handle
        new discriminator argument.
	* elf32-arm.c (elf32_arm_find_nearest_line): Likewise.
	* elf64-alpha.c (elf64_alpha_find_nearest_line): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_find_nearest_line): Likewise.
	* mach-o.c (bfd_mach_o_find_nearest_line): Likewise.
	* libbfd-in.h (_bfd_dwarf2_find_nearest_line): Add discriminator
        argument.
        (_bfd_dwarf2_find_line): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): New.
	* libbfd.c (_bfd_generic_find_nearest_line_discriminator): New.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Initialize
        _bfd_find_nearest_line_discriminator with
        _bfd_generic_find_nearest_line_discriminator.
        (bfd_target): Add _bfd_find_nearest_line_discriminator.

binutils/
	* addr2line.c (find_address_in_section): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator.
	(find_offset_in_section): Likewise.
	(translate_addresses): Print discriminator if it is non-zero.
	* objdump.c (show_line): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator,
        and keep track of prev_discriminator. Print discriminator
        if it is non-zero.
	(disassemble_data): Initialize prev_discriminator.
	(dump_reloc_set): Invoke bfd_find_nearest_line_discriminator
        to get the discriminator, and keep track of last_discriminator.
        Print discriminator if it is non-zero.
@
text
@d252 6
a257 1
	    printf ("??\n");
@


1.41
log
@	* addr2line.c (translate_addresses): Truncate input addresses to
	arch_size bits.  Avoid undefined shift.  Print '?' for zero line.
@
text
@d142 1
d169 3
a171 2
  found = bfd_find_nearest_line (abfd, section, syms, pc - vma,
				 &filename, &functionname, &line);
d191 3
a193 2
  found = bfd_find_nearest_line (abfd, section, syms, pc,
				 &filename, &functionname, &line);
d300 6
a305 1
		printf ("%u\n", line);
@


1.40
log
@2011-10-13  Nick Clifton  <nickc@@redhat.com>

	Fixes to aid translation:
	* addr2line.c (translate_address): Add comments describing context
	of a couple of printf statements.
	* ar.c (write_archive): Allow translation of error message.
	* bucomm.c (endian_string): Allow translation of strings.
	(display_target_list): Allow translation.
	* coffdump.c (dump_coff_type): Allow translation of output.
	(dump_coff_where): Likewise.
	(dump_coff_symbol): Likewise.
	(dump_coff_scope): Likewise.
	(dump_coff_sfile): Likewise.
	(dump_coff_section): Likewise.
	(coff_dump): Likewise.
	* dlltool (def_version): Allow translation of output.
	(run): Likewise.
	* dllwrap.c (run): Allow translation of output.
	* dwarf.c (print_dwarf_vma): Allow translation of output.
	(process_extended_line_op): Remove spurious translation.
	Add translation for strings that can be translated.
	(decode_location_exression): Allow translation of output.
	(read_and_display_attr_value): Allow translation of output.
	* readelf.c (slurp_rela_relocs): Add translation for error
	messages when failing to get data.
	(slurp_rel_relocs): Likewise.
	(get_32bit_elf_symbols): Likewise.
	(get_64bit_elf_symbols): Likewise.
	(dump_ia64_vms_dynamic_relocs): Replace abbreviation with full
	word.
	(process_relocs): Remove spurious translation.
	(decode_tic6x_unwind_bytecode): Likewise.
	(process_version_section): Improve error messages.
	(process_mips_specific): Likewise.
	(print_gnu_note): Remove spurious translation.
	(print_stapsdt_note): Likewise.
	(get_ia64_vms_note_type): Likewise.
	* sysdump.c (getCHARS): Allow translation.
	(fillup): Allow translation of output.
	(getone): Likewise.
	(must): Likewise.
	(derived_type): Likewise.
	* doc/binutils.doc (addr2line): Extend description of command line
	options.
	* po/binutils.pot: Regenerate.
@
text
@a198 2
  const struct elf_backend_data * bed;

d219 9
a227 5
      if (bfd_get_flavour (abfd) == bfd_target_elf_flavour
	  && (bed = get_elf_backend_data (abfd)) != NULL
	  && bed->sign_extend_vma
	  && (pc & (bfd_vma) 1 << (bed->s->arch_size - 1)))
	pc |= ((bfd_vma) -1) << bed->s->arch_size;
d295 5
a299 1
              printf ("%s:%u\n", filename ? filename : "??", line);
@


1.39
log
@2011-03-30  Catherine Moore  <clm@@codesourcery.com>

	* addr2line.c (translate_addresses): Sign extend the pc
	if sign_extend_vma is enabled.
@
text
@d271 5
d297 2
a298 1
                found = bfd_find_inliner_info (abfd, &filename, &functionname, &line);
d302 6
@


1.38
log
@Add compressed debug section support to binutils and ld.

bfd/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>
	    Cary Coutant  <ccoutant@@google.com>

	* archive.c (bfd_openr_next_archived_file): Copy BFD_COMPRESS
	and BFD_DECOMPRESS.

	* bfd.c (BFD_COMPRESS): New.
	(BFD_DECOMPRESS): Likewise.
	(BFD_FLAGS_SAVED): Likewise.
	(bfd_preserve_save): Replace BFD_IN_MEMORY with BFD_FLAGS_SAVED.

	* compress.c (bfd_uncompress_section_contents): Removed.
	(get_uncompressed_size): New.
	(decompress_contents): Likewise.
	(bfd_compress_section_contents): Likewise.
	(bfd_get_full_section_contents): Likewise.
	(bfd_is_section_compressed): Likewise.
	(bfd_init_section_decompress_status): Likewise.
	(bfd_init_section_compress_status): Likewise.

	* dwarf2.c (dwarf_debug_sections): New.
	(dwarf_debug_section_enum): Likewise.
	(read_section): Remove section_name and compressed_section_name.
	Add dwarf_debug_section_enum.  Try compressed debug section.
	(read_indirect_string): Updated.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Updated.

	* ecoff.c (bfd_debug_section): Add compress_status and
	compressed_size.

	* elf.c (_bfd_elf_make_section_from_shdr): Call
	bfd_is_section_compressed to check if a DWARF debug section is
	compressed.  Call bfd_init_section_compress_status or
	bfd_init_section_decompress_status if needed.

	* elflink.c (elf_link_input_bfd): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.
	* merge.c (_bfd_add_merge_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Allow BFD_COMPRESS and
	BFD_DECOMPRESS.
	(TARGET_LITTLE_SYM): Likewise.

	* libbfd-in.h (dwarf_debug_section): New.
	(dwarf_debug_sections): Likewise.

	* libbfd.c (_bfd_generic_get_section_contents): Issue an error
	when getting contents on compressed/decompressed section.

	* section.c (COMPRESS_SECTION_NONE): New.
	(COMPRESS_SECTION_DONE): Likewise.
	(DECOMPRESS_SECTION_SIZED): Likewise.
	(BFD_FAKE_SECTION): Add compress_status and compressed_size.
	(bfd_malloc_and_get_section): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

binutils/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* addr2line.c (process_file): Set BFD_DECOMPRESS.

	* objcopy.c (do_debug_sections): New.
	(OPTION_COMPRESS_DEBUG_SECTIONS): New.
	(OPTION_DECOMPRESS_DEBUG_SECTIONS): Likewise.
	(copy_options): Add OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.
	(copy_usage): Add --compress-debug-sections and
	--decompress-debug-sections.
	(copy_file): Set BFD_COMPRESS or BFD_DECOMPRESS.
	(copy_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(copy_main): Handle OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.  Check do_debug_sections to
	rename DWARF debug sections.

	* objdump.c (load_specific_debug_section): Replace
	bfd_get_section_contents with bfd_get_full_section_contents.
	Remove bfd_uncompress_section_contents.
	(dump_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(display_file): Set BFD_DECOMPRESS if needed.

	* readelf.c (uncompress_section_contents): Set buffer to NULL
	to indiate decompression failure.
	(load_specific_debug_section): Always call
	uncompress_section_contents.

	* doc/binutils.texi: Document --compress-debug-sections and
	--decompress-debug-sections.

binutils/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/compress.exp: New.
	* binutils-all/dw2-1.S: Likewise.
	* binutils-all/dw2-2.S: Likewise.
	* binutils-all/libdw2-compressed.out: Likewise.
	* binutils-all/libdw2.out: Likewise.

gas/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (compress_debug): Optimize section flags check.

gas/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/dwarf2-1.s: Replace .zdebug_abbrev section with
	.debug_abbrev section.
	* elf/dwarf2-2.3: Likewise.

	* elf/dwarf2-1.d: Pass --compress-debug-sections to assembler.
	Updated.
	* elf/dwarf2-2.d: Likewise.

	* gas/i386/i386.exp: Remove xfail on dw2-compress-2 and
	x86-64-dw2-compress-2.

ld/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_try_open_bfd): Set BFD_DECOMPRESS after
	bfd_openr returns.
	* emultempl/elf32.em (gld${EMULATION_NAME}_try_needed): Likewise.

	* scripttempl/elf.sc: Include compressed DWARF debug sections.

ld/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress.exp: New.
	* ld-elf/compress1.s: Likewise.
	* ld-elf/compress1a.d: Likewise.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d40 1
d199 2
d221 6
@


1.37
log
@2009-12-10  Tristan Gingold  <gingold@@adacore.com>

	* addr2line.c (pretty_print): New variable.
	(long_options): Add an entry for -p/--pretty-print.
	(usage): Document -p/--pretty-print.
	(translate_addresses): Handle pretty_print.  Reindent.
	(main): Handle option -p.
	* doc/binutils.texi (addr2line): Document -p/--pretty-print.
	* NEWS: Mention new feature.
@
text
@d316 3
@


1.36
log
@2009-12-09  Tristan Gingold  <gingold@@adacore.com>

	* addr2line.c (translate_addresses): Display addresses
	if option -a is used.
	(with_addresses): New variable.
	(long_options): Add option '-a'.
	(usage): Add usage for option '-a'.
	(main): Handle option '-a'.
	* doc/binutils.texi (addr2line): Document option '-a'.
	* NEWS: Mention new feature.
@
text
@d45 1
d61 1
d90 1
d222 5
a226 1
          printf ("\n");
d243 46
a288 38
	  do {
	    if (with_functions)
	      {
		const char *name;
		char *alloc = NULL;

		name = functionname;
		if (name == NULL || *name == '\0')
		  name = "??";
		else if (do_demangle)
		  {
		    alloc = bfd_demangle (abfd, name, DMGL_ANSI | DMGL_PARAMS);
		    if (alloc != NULL)
		      name = alloc;
		  }

		printf ("%s\n", name);

		if (alloc != NULL)
		  free (alloc);
	      }

	    if (base_names && filename != NULL)
	      {
		char *h;

		h = strrchr (filename, '/');
		if (h != NULL)
		  filename = h + 1;
	      }

	    printf ("%s:%u\n", filename ? filename : "??", line);
	    if (!unwind_inlines)
	      found = FALSE;
	    else
	      found = bfd_find_inliner_info (abfd, &filename, &functionname, &line);
	  } while (found);

d382 1
a382 1
  while ((c = getopt_long (argc, argv, "ab:Ce:sfHhij:Vv", long_options, (int *) 0))
d418 3
@


1.35
log
@	* addr2line.c (slurp_symtab): Don't use bfd_read_minisymbols.
@
text
@d42 1
d54 1
d83 1
d215 7
d367 1
a367 1
  while ((c = getopt_long (argc, argv, "b:Ce:sfHhij:Vv", long_options, (int *) 0))
d374 3
@


1.34
log
@        Updated soruces in binutils/* to compile cleanly with -Wc++-compat.

        * binutils/addr2line.c (slurp_symtab): Fix casts. Introduce
        variable minisyms to avoid aliasing varning.
        * binutils/ar.c: Add casts. (normalize): Use name del instead of
        delete. (display_target_list,display_info_table): Change loop
        counter variable a to int.
        * binutils/bucomm.c: Add casts.
        * binutils/debug.c: Update function to use new names. (struct
        debug_baseclass): Rename member from virtual to
        is_virtual. (struct debug_type_s,struct debug_field_s,struct
        debug_baseclass_s,struct debug_method_s,struct
        debug_method_variant_s,struct debug_type_s): Rename struct from
        avoid name collision.
        * /binutils/debug.h: Use new struct names.
        * binutils/dwarf.c: Add casts. (free_debug_memory): Change loop
        counter variable a to int.
        * binutils/ieee.c: Add casts. (enum ieee_var_kind): Move to top
        level. (ieee_class_baseclass): Rename parameter virtual to
        is_virtual. (ieee_class_method_var): Rename variable virtual to
        is_virtual.
        * binutils/nm.c: Add casts.
        * binutils/objcopy.c: Add casts. (copy_archive): Rename variable
        delete to del.
        * binutils/objdump.c: Add casts. (dump_dwarf_section): Change loop
        counter variable i to int.
        * binutils/prdbg.c: Add
        casts. (pr_class_baseclass,tg_class_baseclass): Rename parameters
        virtual to is_virtual.
        * binutils/readelf.c: Add casts. (struct
        ia64_unw_table_entry,struct hppa_unw_table_entry): Move to top
        level.
        * binutils/size.c: Add casts.
        * binutils/stabs.c (parse_stab_type, parse_stab_range_type)
        (parse_stab_cpp_abbrev): Rename parameter from typename to
        type_name. (parse_stab_baseclasses): Rename variable virtual to
        is_virtual.
        * binutils/strings.c: Add casts.
        * binutils/wrstabs.c (stab_class_baseclass): Rename parameter
        virtual to is_virtual.
@
text
@d103 1
d105 1
a105 2
  unsigned int size;
  void *minisyms = &syms;
d110 8
a117 3
  symcount = bfd_read_minisymbols (abfd, FALSE, &minisyms, &size);
  if (symcount == 0)
    symcount = bfd_read_minisymbols (abfd, TRUE /* dynamic */, &minisyms, &size);
d119 5
@


1.33
log
@update copyright dates
@
text
@d2 2
a3 2
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
   Free Software Foundation, Inc.
d105 1
d110 1
a110 1
  symcount = bfd_read_minisymbols (abfd, FALSE, (void *) &syms, &size);
d112 1
a112 1
    symcount = bfd_read_minisymbols (abfd, TRUE /* dynamic */, (void *) &syms, &size);
@


1.33.2.1
log
@        Update soruces to compile cleanly with -Wc++-compat:

        * addr2line.c (slurp_symtab): Fix casts. Introduce variable
        minisyms to avoid aliasing varning.
        * ar.c: Add casts.
        (normalize): Use name del instead of delete.
        (display_target_list,display_info_table): Change loop counter
        variable a to int.
        * bucomm.c: Add casts.
        * debug.c: Update function to use new names.
        (struct debug_baseclass): Rename member from virtual to
        is_virtual.
        (struct debug_type_s, struct debug_field_s, struct
        debug_baseclass_s, struct debug_method_s, struct
        debug_method_variant_s, struct debug_type_s): Rename struct from
        avoid name collision.
        * debug.h: Use new struct names.
        * dwarf.c: Add casts.
        (free_debug_memory): Change loop counter variable a to int.
        * ieee.c: Add casts.
        (enum ieee_var_kind): Move to top level.
        (ieee_class_baseclass): Rename parameter virtual to is_virtual.
        (ieee_class_method_var): Rename variable virtual to is_virtual.
        * nm.c: Add casts.
        * objcopy.c: Add casts.
        (copy_archive): Rename variable delete to del.
        * objdump.c: Add casts.
        (dump_dwarf_section): Change loop counter variable i to int.
        * prdbg.c: Add casts.
        (pr_class_baseclass,tg_class_baseclass): Rename parameters virtual
        to is_virtual.
        * readelf.c: Add casts.
        (struct ia64_unw_table_entry,struct hppa_unw_table_entry): Move to
        top level.
        * size.c: Add casts.
        * stabs.c (parse_stab_type, parse_stab_range_type,
        (parse_stab_cpp_abbrev): Rename parameter from typename to
        type_name.
        (parse_stab_baseclasses): Rename variable virtual to is_virtual.
        * strings.c: Add casts.
        * wrstabs.c (stab_class_baseclass): Rename parameter virtual to
        is_virtual.
@
text
@a104 1
  void *minisyms = &syms;
d109 1
a109 1
  symcount = bfd_read_minisymbols (abfd, FALSE, &minisyms, &size);
d111 1
a111 1
    symcount = bfd_read_minisymbols (abfd, TRUE /* dynamic */, &minisyms, &size);
@


1.33.2.2
log
@	* addr2line.c (slurp_symtab): Don't use bfd_read_minisymbols.
@
text
@d2 2
a3 2
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2009  Free Software Foundation, Inc.
a102 1
  long storage;
d104 2
a105 1
  bfd_boolean dynamic = FALSE;
d110 3
a112 8
  storage = bfd_get_symtab_upper_bound (abfd);
  if (storage == 0)
    {
      storage = bfd_get_dynamic_symtab_upper_bound (abfd);
      dynamic = TRUE;
    }
  if (storage < 0)
    bfd_fatal (bfd_get_filename (abfd));
a113 5
  syms = (asymbol **) xmalloc (storage);
  if (dynamic)
    symcount = bfd_canonicalize_dynamic_symtab (abfd, syms);
  else
    symcount = bfd_canonicalize_symtab (abfd, syms);
@


1.32
log
@Change sources over to using GPLv3
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006, 2007
@


1.31
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2, or (at your option)
d20 3
a22 1
   Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.30
log
@	* budemang.c: Delete.
	* budemang.h: Delete.
	* addr2line.c (translate_addresses): Call bfd_demangle rather than
	demangle.
	* nm.c (print_symname): Likewise.
	* objdump.c (objdump_print_symname, dump_symbols): Likewise.
	(dump_bfd): Likewise.
	* prdbg.c (struct pr_handle <demangler>): Add int param.
	(tg_variable, tg_start_function): Adjust demangler calls.
	* Makefile.am: Remove mention of budemang.[ch].  Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d32 1
a32 3
#include "config.h"
#include <string.h>

@


1.29
log
@top level:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac (TOPLEVEL_CONFIGURE_ARGUMENTS): Fix quoting.
	* configure: Regenerate.

bfd:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion): New option.
	* configure: Regenerate.
	* Makefile.am (bfdver.h): Substitute for @@bfd_version_package@@.
	* Makefile.in: Regenerate.
	* version.h (BFD_VERSION_STRING): Define using
	@@bfd_version_package@@.

bfd/doc:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.in: Regenerate.

binutils:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* bucomm.h: Remove include of bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* ar.c (usage): Pass s to list_supported_targets.  Don't print
	empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* cxxfilt.c (usage): Print bug url when giving help.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c ((usage): Likewise. Add STREAM argument.  Adjust
	callers.
	* size.c (usage): Don't print empty REPORT_BUGS_TO.
	* srconv.c (show_usage): Likewise.
	* strings.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.

gas:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* dep-in.sed: Remove bin-bugs.h.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	(DEP_INCLUDES): Likewise.
	($(OBJS)): No longer depend on bin-bugs.h.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove include of bin-bugs.h.

gprof:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion, --with-bugurl): New options.
	* configure: Regenerate.
	* Makefile.am (PKGVERSION, REPORT_BUGS_TO): Define.
	(INCLUDES): Define PKGVERSION and REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	(main): Include PKGVERSION in version output.
	* gprof.h: Remove include of bin-bugs.h.

include:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* bin-bugs.h: Remove.

ld:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.
@
text
@a39 1
#include "budemang.h"
d226 3
a228 2
		    alloc = demangle (abfd, name);
		    name = alloc;
@


1.28
log
@ PR binutils/3001
* addr2line.c (process_file): Change function from void to returning an int.  Return 0 upon success, 1 otherwise.
 (main): Use return value from process_file as the exit value.
* ar.c (ranlib_only):  Change function from void to returning an int.  Return 0 upon success, 1 otherwise.
  (ranlib_touch): Likewise.
  (main): Use return value from ranlib functions as exit value.
* objcopy.c (add_specific_symbol): Set status to 1 if get_file_size fails.
  (copy_file): Likewise.
  (strip_main): Likewise.
  (copy_main): Likewise.
* objdump.c (display_file): Set exit_status to 1 if get_file_size fails.
* size.c (display_file): Set return_code to 1 if get_file_size fails.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006
d94 1
a94 1
  if (status == 0)
@


1.27
log
@	* addr2line.c (long_options): Add new option 'section'.
	(usage): Document new -j/--section option.
	(find_offset_in_section): New function.
	(translate_addresses): Add 'section' parameter.
	If it is non-null, call find_offset_in_section on it.
	(process_file): Add 'section_name' parameter.
	If it is non-null, look for the section in the BFD object.
	Pass the section to translate_addresses.
	(main): Handle new -j option.
	Pass the section name to process_file.
	* doc/binutils.texi (addr2line): Document new -j/--section option.
@
text
@a70 1
static void process_file (const char *, const char *, const char *);
d263 1
a263 1
/* Process a file.  */
d265 1
a265 1
static void
d274 1
a274 1
    return;
d314 2
d405 1
a405 3
  process_file (file_name, section_name, target);

  return 0;
@


1.26
log
@	* addr2line.c (usage): Document @@file.
	* ar.c (usage): Likewise.
	* coffdump (usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c (usage): Likewise.
	* size.c (usage): Likeise.
	* srconv.c (usage): Likewise.
	* strings.c (usage): Likewise.
	* windres.c (usage): Likewise.
	* doc/binutils.texi: Add section on common options.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d59 1
d69 3
a71 2
static void translate_addresses (bfd *);
static void process_file (const char *, const char *);
d85 2
a86 1
  -i --inlines		 Unwind inlined functions\n\
d156 21
d181 1
a181 1
translate_addresses (bfd *abfd)
d204 4
a207 1
      bfd_map_over_sections (abfd, find_address_in_section, NULL);
d267 2
a268 1
process_file (const char *file_name, const char *target)
d271 1
d282 1
a282 1
    fatal (_("%s: can not get addresses from archive"), file_name);
d295 9
d306 1
a306 1
  translate_addresses (abfd);
a316 2
int main (int, char **);

d321 1
d343 1
d345 1
a345 1
  while ((c = getopt_long (argc, argv, "b:Ce:sfHhiVv", long_options, (int *) 0))
d389 3
d404 1
a404 1
  process_file (file_name, target);
@


1.26.2.1
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006
a58 1
  {"section", required_argument, NULL, 'j'},
d68 2
a69 3
static void find_offset_in_section (bfd *, asection *);
static void translate_addresses (bfd *, asection *);
static void process_file (const char *, const char *, const char *);
d83 1
a83 2
  -i --inlines           Unwind inlined functions\n\
  -j --section=<name>    Read section-relative offsets instead of addresses\n\
a152 21
/* Look for an offset in a section.  This is directly called.  */

static void
find_offset_in_section (bfd *abfd, asection *section)
{
  bfd_size_type size;

  if (found)
    return;

  if ((bfd_get_section_flags (abfd, section) & SEC_ALLOC) == 0)
    return;

  size = bfd_get_section_size (section);
  if (pc >= size)
    return;

  found = bfd_find_nearest_line (abfd, section, syms, pc,
				 &filename, &functionname, &line);
}

d157 1
a157 1
translate_addresses (bfd *abfd, asection *section)
d180 1
a180 4
      if (section)
	find_offset_in_section (abfd, section);
      else
	bfd_map_over_sections (abfd, find_address_in_section, NULL);
d240 1
a240 2
process_file (const char *file_name, const char *section_name,
	      const char *target)
a242 1
  asection *section;
d253 1
a253 1
    fatal (_("%s: cannot get addresses from archive"), file_name);
a265 9
  if (section_name != NULL)
    {
      section = bfd_get_section_by_name (abfd, section_name);
      if (section == NULL)
	fatal (_("%s: cannot find section %s"), file_name, section_name);
    }
  else
    section = NULL;

d268 1
a268 1
  translate_addresses (abfd, section);
d279 2
a284 1
  const char *section_name;
a305 1
  section_name = NULL;
d307 1
a307 1
  while ((c = getopt_long (argc, argv, "b:Ce:sfHhij:Vv", long_options, (int *) 0))
a350 3
	case 'j':
	  section_name = optarg;
	  break;
d363 1
a363 1
  process_file (file_name, section_name, target);
@


1.26.2.2
log
@	binutils/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* bucomm.h: Remove bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* nlmconv.c (show_usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* size.c (usage): Likewise.
	* srconv.c (show_usage): Likewise.
	* string.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.
	* readelf (usage): Likewise. Add STREAM argument.  Adjust callers.

	gas/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove bin-bugs.h.

	ld/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* ld.h: Remove bin-bugs.h
	* lexsup.c (help):  Don't print empty REPORT_BUGS_TO.

	gprof/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(PKGVERSION): Define.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	* gprof.h: Remove bin-bugs.h

	include/
	* bin-bugs.h: Remove.
@
text
@d95 1
a95 1
  if (REPORT_BUGS_TO[0] && status == 0)
@


1.25
log
@	* addr2line.c (main): Likewise.
	* ar.c (main): Likewise.
	* coffdump.c (main): Likewise.
	* cxxfilt.c (main): Likewise.
	* dlltool.c (main): Likewise.
	* dllwrap.c (main): Likewise.
	* nlmconv.c (main): Likewise.
	* nm.c (main): Likewise.
	* objcopy.c (main): Likewise.
	* objdump.c (main): Likewise.
	* readelf.c (main): Likewise.
	* size.c (main): Likeiwse.
	* srcconv.c (main): Likewise.
	* strings.c (main): Likewise.
	* sysdump.c (main): Likewise.
	* sysinfo.c (main): Likewise.
	* windres.c (main): Likewise.

	* ldmain.c (main): Use expandargv.

	* gprof.c (main): Use expandargv.

	* as.c (main): Use expandargv.
@
text
@d80 1
@


1.24
log
@Approved by nickc@@redhat.com:

	2005-05-23  Fred Fish  <fnf@@specifixinc.com>
	* addr2line.c (unwind_inlines): New flag for 'i' option.
	(usage): Document '-i' option.
	(long_options): Recognize '--inlines'.
	(translate_addresses): Loop, calling bfd_find_inliner_info as
	necessary and printing multiple output lines.
	(main): Handle 'i' option.
	* doc/binutils.texi (addr2line): Document '-i' option.
	* NEWS: Mention new addr2line '-i' option.
@
text
@d299 2
@


1.23
log
@Update FSF address
@
text
@d42 1
d58 1
d82 1
d189 36
a224 19
	  if (with_functions)
	    {
	      const char *name;
	      char *alloc = NULL;

	      name = functionname;
	      if (name == NULL || *name == '\0')
		name = "??";
	      else if (do_demangle)
		{
		  alloc = demangle (abfd, name);
		  name = alloc;
		}

	      printf ("%s\n", name);

	      if (alloc != NULL)
		free (alloc);
	    }
a225 10
	  if (base_names && filename != NULL)
	    {
	      char *h;

	      h = strrchr (filename, '/');
	      if (h != NULL)
		filename = h + 1;
	    }

	  printf ("%s:%u\n", filename ? filename : "??", line);
d304 1
a304 1
  while ((c = getopt_long (argc, argv, "b:Ce:sfHhVv", long_options, (int *) 0))
d345 3
@


1.22
log
@Add a check for <unistd.h> providing a prototype for getopt() which is compatible
with the one in	include/getopt.h.  If so then define HAVE_DECL_GETOPT.
@
text
@d20 1
a20 1
   Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.21
log
@	* objcopy.c (copy_section): Use bfd_get_section_size instead of
	_raw_size or bfd_get_section_size_before_reloc.  Don't set reloc_done.
	(compare_section_lma): Likewise.
	* addr2line.c (find_address_in_section): Likewise.
	* coffgrok.c (do_sections_p1): Likewise.
	* dlltool.c (scan_drectve_symbols): Likewise.
	* nlmconv.c (main): Likewise.
	(copy_sections): Likewise.
	(powerpc_mangle_relocs): Likewise.
	* objdump.c (disassemble_section): Likewise.
	* prdbg.c (find_address_in_section): Likewise.
	* size.c (berkeley_sum): Likewise.
	* srconv.c (wr_ob): Likewise.
	* strings.c (strings_a_section): Likewise.
@
text
@d32 1
@


1.21.6.1
log
@	* ld/ldmain.c (main): Use expandargv.
	* binutils/addr2line.c (main): Likewise.
	* binutils/ar.c (main): Likewise.
	* binutils/coffdump.c (main): Likewise.
	* binutils/cxxfilt.c (main): Likewise.
	* binutils/dlltool.c (main): Likewise.
	* binutils/dllwrap.c (main): Likewise.
	* binutils/nlmconv.c (main): Likewise.
	* binutils/nm.c (main): Likewise.
	* binutils/objcopy.c (main): Likewise.
	* binutils/objdump.c (main): Likewise.
	* binutils/readelf.c (main): Likewise.
	* binutils/size.c (main): Likeiwse.
	* binutils/srcconv.c (main): Likewise.
	* binutils/strings.c (main): Likewise.
	* binutils/sysdump.c (main): Likewise.
	* binutils/sysinfo.c (main): Likewise.
	* binutils/windres.c (main): Likewise.

	* include/libiberty.h (expandargv): New function.
	* libiberty/argv.c (safe-ctype.h): Include it.
	(ISBLANK): Remove.
	(stdio.h): Include.
	(expandargv): New function.
	* libiberty/Makefile.in: Regenerated.
@
text
@a287 2
  expandargv (&argc, &argv);

@


1.20
log
@Use consistent error messages for missing files.
Detect directories where an ordinary file is expected.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003
d140 1
a140 1
  size = bfd_get_section_size_before_reloc (section);
@


1.19
log
@	* addr2line.c: Convert to ISO C90 prototypes, change PTR, remove
	unneeded (void *) casts.
	* ar.c: Likewise.
	* arlex.l: Likewise.
	* arparse.y: Likewise.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* bucomm.h: Likewise.
	* budbg.h: Likewise.
	* budemang.c: Likewise.
	* budemang.h: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* cxxfilt.c: Likewise.
	* debug.c: Likewise.
	* debug.h: Likewise.
	* deflex.l: Likewise.
	* dlltool.c: Likewise.
	* dlltool.h: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* filemode.c: Likewise.
	* ieee.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmconv.h: Likewise.
	* nlmheader.y: Likewise.
	* nm.c: Likewise.
	* prdbg.c: Likewise.
	* rclex.l: Likewise.
	* rcparse.y: Likewise.
	* rdcoff.c: Likewise.
	* rddbg.c: Likewise.
	* rename.c: Likewise.
	* resbin.c: Likewise.
	* rescoff.c: Likewise.
	* resrc.c: Likewise.
	* size.c: Likewise.
	* srconv.c: Likewise.
	* stabs.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* sysinfo.y: Likewise.
	* syslex.l: Likewise.
	* unwind-ia64.c: Likewise.
	* unwind-ia64.h: Likewise.
	* version.c: Likewise.
	* windres.c: Likewise.
	* windres.h: Likewise.
	* winduni.c: Likewise.
	* wrstabs.c: Likewise.
@
text
@d233 3
@


1.18
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 2
a3 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d62 5
a66 5
static void usage PARAMS ((FILE *, int));
static void slurp_symtab PARAMS ((bfd *));
static void find_address_in_section PARAMS ((bfd *, asection *, PTR));
static void translate_addresses PARAMS ((bfd *));
static void process_file PARAMS ((const char *, const char *));
d71 1
a71 3
usage (stream, status)
     FILE *stream;
     int status;
d95 1
a95 2
slurp_symtab (abfd)
     bfd *abfd;
d103 1
a103 1
  symcount = bfd_read_minisymbols (abfd, FALSE, (PTR) &syms, &size);
d105 1
a105 1
    symcount = bfd_read_minisymbols (abfd, TRUE /* dynamic */, (PTR) &syms, &size);
d124 2
a125 4
find_address_in_section (abfd, section, data)
     bfd *abfd;
     asection *section;
     PTR data ATTRIBUTE_UNUSED;
d152 1
a152 2
translate_addresses (abfd)
     bfd *abfd;
d175 1
a175 1
      bfd_map_over_sections (abfd, find_address_in_section, (PTR) NULL);
d228 1
a228 3
process_file (file_name, target)
     const char *file_name;
     const char *target;
d264 1
a264 1
int main PARAMS ((int, char **));
d267 1
a267 3
main (argc, argv)
     int argc;
     char **argv;
@


1.17
log
@Read in dynamic symbols if no ordinary ones are available.
@
text
@d40 3
a42 3
static boolean with_functions;	/* -f, show function names.  */
static boolean do_demangle;	/* -C, demangle names.  */
static boolean base_names;	/* -s, strip directory names.  */
d105 1
a105 1
  symcount = bfd_read_minisymbols (abfd, false, (PTR) &syms, &size);
d107 1
a107 1
    symcount = bfd_read_minisymbols (abfd, true /* dynamic */, (PTR) &syms, &size);
d120 1
a120 1
static boolean found;
d179 1
a179 1
      found = false;
d310 1
a310 1
	  do_demangle = true;
d327 1
a327 1
	  base_names = true;
d330 1
a330 1
	  with_functions = true;
@


1.16
log
@Rename function arguments to avoid shadowing global symbols of the same name.
@
text
@a98 1
  long storage;
d100 1
d105 3
a107 3
  storage = bfd_get_symtab_upper_bound (abfd);
  if (storage < 0)
    bfd_fatal (bfd_get_filename (abfd));
a108 3
  syms = (asymbol **) xmalloc (storage);

  symcount = bfd_canonicalize_symtab (abfd, syms);
@


1.15
log
@	* budemang.c: New file, "demangle" function.
	* budemang.h: New file.
	* addr2line.c (translate_addresses): Use "demangle".
	* nm.c (print_symname): Likewise.
	* objdump.c (objdump_print_symname): Likewise.
	(dump_symbols): Likewise.  Also, don't use bfd_asymbol_name macro
	here since that obfuscates.
	* rdcoff.c: Don't #include demangle.h.
	* Makefile.am (CFILES): Add budemang.c, emul_aix.c,
	emul_vanilla.c.  Remove emul_$(EMULATION).c.  Sort.
	(HFILES): Add budemang.h.  Sort.
	(nm_new_SOURCES, objdump_SOURCES, addr2line_SOURCES): Add budemang.c.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d236 2
a237 2
process_file (filename, target)
     const char *filename;
d243 1
a243 1
  abfd = bfd_openr (filename, target);
d245 1
a245 1
    bfd_fatal (filename);
d248 1
a248 1
    fatal (_("%s: can not get addresses from archive"), filename);
d281 1
a281 1
  const char *filename;
d300 1
a300 1
  filename = NULL;
d327 1
a327 1
	  filename = optarg;
d349 2
a350 2
  if (filename == NULL)
    filename = "a.out";
d355 1
a355 1
  process_file (filename, target);
@


1.15.2.1
log
@2002-09-23  Daniel Jacobowitz  <drow@@mvista.com>

	Merge from mainline:
	2002-09-11  Nick Clifton  <nickc@@redhat.com>
	* po/tr.po: Updated Turkish translation.

	2002-08-14  Luke Dunstan  <infidel@@users.sourceforge.net>
	* rcparse.y (acc_entry): Don't warn about ALT use with
	non-VIRTKEY.

	2002-08-09  Nick Clifton  <nickc@@redhat.com>
	* po/sv.po: Updated Swedish translation.

	2002-07-31  Nick Clifton  <nickc@@redhat.com>
	* addr2line.c (process_file): Rename parameter 'filename' to
	'file_name' in order to avoid shadowing global symbol of the
	same name.
	(main): Likewise.
@
text
@d236 2
a237 2
process_file (file_name, target)
     const char *file_name;
d243 1
a243 1
  abfd = bfd_openr (file_name, target);
d245 1
a245 1
    bfd_fatal (file_name);
d248 1
a248 1
    fatal (_("%s: can not get addresses from archive"), file_name);
d281 1
a281 1
  const char *file_name;
d300 1
a300 1
  file_name = NULL;
d327 1
a327 1
	  file_name = optarg;
d349 2
a350 2
  if (file_name == NULL)
    file_name = "a.out";
d355 1
a355 1
  process_file (file_name, target);
@


1.14
log
@	* addr2line.c: Fix formatting.
	* ar.c: Likewise.
	* arsup.c: Likewise.
	* arsup.h: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* coffgrok.h: Likewise.
@
text
@d38 1
d195 7
a201 5
	      if (functionname == NULL || *functionname == '\0')
		printf ("??\n");
	      else if (! do_demangle)
		printf ("%s\n", functionname);
	      else
d203 3
a205 1
		  char *res;
d207 4
a210 9
		  res = cplus_demangle (functionname, DMGL_ANSI | DMGL_PARAMS);
		  if (res == NULL)
		    printf ("%s\n", functionname);
		  else
		    {
		      printf ("%s\n", res);
		      free (res);
		    }
		}
@


1.13
log
@Tidy up formatting of --help output.
@
text
@d23 1
a23 1
   Usage: 
d26 1
a26 1
   addr2line [options] 
d317 1
a317 1
	      
d319 1
a319 1
	      if (style == unknown_demangling) 
d322 1
a322 1
	      
d324 1
a324 1
           }
@


1.12
log
@	* addr2line.c (main): Protoype.
	* ar.c (main): Protoype.
	* nm.c (main): Protoype.
	* objcopy.c (main): Protoype.
	* objdump.c (main): Protoype.
	* size.c (main): Protoype.
	* strings.c (main): Protoype.
	* gasp.c (main): Protoype.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d73 13
a85 5
  fprintf (stream, _("\
Usage: %s [-CfsHV] [-b bfdname] [--target=bfdname]\n\
       [-e executable] [--exe=executable] [--demangle[=style]]\n\
       [--basenames] [--functions] [addr addr ...]\n"),
	   program_name);
d302 1
a302 1
  while ((c = getopt_long (argc, argv, "b:Ce:sfHV", long_options, (int *) 0))
d308 1
a308 1
	  break;		/* we've been given a long option */
d335 1
d339 1
@


1.11
log
@	* coffdump.c (PROGRAM_VERSION): Delete.
	(main <'V'>): Call print_version.
	* srconv.c: Likewise.
	* sysdump.c: Likewise.
	* version.c (program_version): Remove.
	(print_version): Use BFD_VERSION_STRING.  Just print the current
	year in copyright message.
	* addr2line.c (program_version): Remove unused declaration.
	* objdump.c (display_target_tables): Use BFD_VERSION_STRING in
	place of BFD_VERSION.
	* Makefile.am (Makefile): Depend on bfd/configure.in
	(cplus-dem.o): Depend on Makefile.
	Run "make dep-am"
	* Makefile.in: Regenerate.
@
text
@d266 2
@


1.10
log
@Locale changes from Bruno Haible  <haible@@clisp.cons.org>.
@
text
@a38 2
extern char *program_version;

@


1.9
log
@Fix typos in ChangeLogs and update copyright notices
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
a30 1
#include <ctype.h>
d279 3
@


1.8
log
@Changed email address of Ulrich Lauther
@
text
@d2 1
a2 1
   Copyright 1997, 98, 99, 2000 Free Software Foundation, Inc.
@


1.8.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.7
log
@2000-08-11  Carlo Wood <carlo@@alinoe.com>

	* addr2line.c (main): Add const to char *.
@
text
@d3 1
a3 1
   Contributed by Ulrich Lauther <Ulrich.Lauther@@zfe.siemens.de>
d21 1
a21 1
/* Derived from objdump.c and nm.c by Ulrich.Lauther@@zfe.siemens.de
@


1.6
log
@Add optional style argument to --demangle switch.
@
text
@d274 1
a274 1
  char *filename;
@


1.5
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d54 1
a54 1
  {"demangle", no_argument, NULL, 'C'},
d78 1
a78 1
       [-e executable] [--exe=executable] [--demangle]\n\
d304 11
@


1.4
log
@Move translated part of bug report string back into .c files so
xgettext can find it.  Regnerate .pot files.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999 Free Software Foundation, Inc.
@


1.3
log
@Move bug report string to one place.
@
text
@d83 1
a83 1
    fprintf (stream, REPORT_BUGS_TO);
@


1.2
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Add variable initializations.  Add casts.
	* objdump.c (disassemble_bytes): Change j to bfd_vma.
	* readelf.c (process_syminfo): Change i to unsigned int.
	(display_debug_info): Change abbrev_number to unsigned long.
	(process_mips_specific): Change fcnt to size_t.
@
text
@d83 1
a83 1
    fprintf (stream, _("Report bugs to bug-gnu-utils@@gnu.org\n"));
@


1.2.2.1
log
@This is a grab-bag of my stuff from the head branch.
Should have done it separately, I know.
- move bug report address to include file
- objcopy --redefine-sym
- update makefile dependencies (but use automake-000227)
- H.J. Lu's fix to readelf.c
@
text
@d83 1
a83 1
    fprintf (stream, _("Report bugs to %s\n"), REPORT_BUGS_TO);
@


1.2.2.2
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d2 1
a2 1
   Copyright 1997, 98, 99, 2000 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d126 1
a126 1
     PTR data;
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

