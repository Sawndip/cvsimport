head	1.22;
access;
symbols
	binutils-2_24-branch:1.22.0.4
	binutils-2_24-branchpoint:1.22
	binutils-2_21_1:1.18
	binutils-2_23_2:1.22
	binutils-2_23_1:1.22
	binutils-2_23:1.22
	binutils-2_23-branch:1.22.0.2
	binutils-2_23-branchpoint:1.22
	binutils-2_22_branch:1.21.0.4
	binutils-2_22:1.21
	binutils-2_22-branch:1.21.0.2
	binutils-2_22-branchpoint:1.21
	binutils-2_21:1.18
	binutils-2_21-branch:1.18.0.14
	binutils-2_21-branchpoint:1.18
	binutils-2_20_1:1.18
	binutils-2_20:1.18
	binutils-arc-20081103-branch:1.18.0.12
	binutils-arc-20081103-branchpoint:1.18
	binutils-2_20-branch:1.18.0.10
	binutils-2_20-branchpoint:1.18
	dje-cgen-play1-branch:1.18.0.8
	dje-cgen-play1-branchpoint:1.18
	arc-20081103-branch:1.18.0.6
	arc-20081103-branchpoint:1.18
	binutils-2_19_1:1.18
	binutils-2_19:1.18
	binutils-2_19-branch:1.18.0.4
	binutils-2_19-branchpoint:1.18
	binutils-2_18:1.18
	binutils-2_18-branch:1.18.0.2
	binutils-2_18-branchpoint:1.18
	binutils-csl-coldfire-4_1-32:1.15.2.1
	binutils-csl-sourcerygxx-4_1-32:1.15.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.15.2.1
	binutils-csl-sourcerygxx-3_4_4-32:1.11.12.1
	binutils-csl-coldfire-4_1-30:1.15.2.1
	binutils-csl-sourcerygxx-4_1-30:1.15.2.1
	binutils-csl-coldfire-4_1-28:1.15.2.1
	binutils-csl-sourcerygxx-4_1-29:1.15.2.1
	binutils-csl-sourcerygxx-4_1-28:1.15.2.1
	binutils-csl-arm-2006q3-27:1.15.2.1
	binutils-csl-sourcerygxx-4_1-27:1.15.2.1
	binutils-csl-arm-2006q3-26:1.15.2.1
	binutils-csl-sourcerygxx-4_1-26:1.15.2.1
	binutils-csl-sourcerygxx-4_1-25:1.15.2.1
	binutils-csl-sourcerygxx-4_1-24:1.15
	binutils-csl-sourcerygxx-4_1-23:1.15
	binutils-csl-sourcerygxx-4_1-21:1.15
	binutils-csl-arm-2006q3-21:1.15
	binutils-csl-sourcerygxx-4_1-22:1.15
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.15
	binutils-csl-sourcerygxx-4_1-20:1.15
	binutils-csl-arm-2006q3-19:1.15
	binutils-csl-sourcerygxx-4_1-19:1.15
	binutils-csl-sourcerygxx-4_1-18:1.15
	binutils-csl-renesas-4_1-9:1.15
	binutils-csl-sourcerygxx-3_4_4-25:1.11.12.1
	binutils-csl-renesas-4_1-8:1.15
	binutils-csl-renesas-4_1-7:1.15
	binutils-csl-renesas-4_1-6:1.15
	binutils-csl-sourcerygxx-4_1-17:1.15
	binutils-csl-sourcerygxx-4_1-14:1.15
	binutils-csl-sourcerygxx-4_1-15:1.15
	binutils-csl-sourcerygxx-4_1-13:1.15
	binutils-2_17:1.15
	binutils-csl-sourcerygxx-4_1-12:1.15
	binutils-csl-sourcerygxx-3_4_4-21:1.15
	binutils-csl-wrs-linux-3_4_4-24:1.11
	binutils-csl-wrs-linux-3_4_4-23:1.11
	binutils-csl-sourcerygxx-4_1-9:1.15
	binutils-csl-sourcerygxx-4_1-8:1.15
	binutils-csl-sourcerygxx-4_1-7:1.15
	binutils-csl-arm-2006q1-6:1.15
	binutils-csl-sourcerygxx-4_1-6:1.15
	binutils-csl-wrs-linux-3_4_4-22:1.11
	binutils-csl-coldfire-4_1-11:1.15
	binutils-csl-sourcerygxx-3_4_4-19:1.15
	binutils-csl-coldfire-4_1-10:1.15
	binutils-csl-sourcerygxx-4_1-5:1.15
	binutils-csl-sourcerygxx-4_1-4:1.15
	binutils-csl-wrs-linux-3_4_4-21:1.11
	binutils-csl-morpho-4_1-4:1.15
	binutils-csl-sourcerygxx-3_4_4-17:1.15
	binutils-csl-wrs-linux-3_4_4-20:1.11
	binutils-2_17-branch:1.15.0.4
	binutils-2_17-branchpoint:1.15
	binutils-csl-2_17-branch:1.15.0.2
	binutils-csl-2_17-branchpoint:1.15
	binutils-csl-gxxpro-3_4-branch:1.11.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.11
	binutils-2_16_1:1.11
	binutils-csl-arm-2005q1b:1.11
	binutils-2_16:1.11
	binutils-csl-arm-2005q1a:1.11
	binutils-csl-arm-2005q1-branch:1.11.0.10
	binutils-csl-arm-2005q1-branchpoint:1.11
	binutils-2_16-branch:1.11.0.8
	binutils-2_16-branchpoint:1.11
	csl-arm-2004-q3d:1.11
	csl-arm-2004-q3:1.11
	binutils-2_15:1.11
	binutils-2_15-branchpoint:1.11
	csl-arm-2004-q1a:1.11
	csl-arm-2004-q1:1.11
	binutils-2_15-branch:1.11.0.6
	cagney_bfdfile-20040213-branch:1.11.0.4
	cagney_bfdfile-20040213-branchpoint:1.11
	cagney_bigcore-20040122-branch:1.11.0.2
	cagney_bigcore-20040122-branchpoint:1.11
	csl-arm-2003-q4:1.11
	binutils-2_14:1.10
	binutils-2_14-branch:1.10.0.4
	binutils-2_14-branchpoint:1.10
	binutils-2_13_2_1:1.10
	binutils-2_13_2:1.10
	binutils-2_13_1:1.10
	binutils-2_13:1.10
	binutils-2_13-branchpoint:1.10
	binutils-2_13-branch:1.10.0.2
	binutils-2_12_1:1.7.2.1
	binutils-2_12:1.7.2.1
	binutils-2_12-branch:1.7.0.2
	binutils-2_12-branchpoint:1.7
	cygnus_cvs_20020108_pre:1.6
	binutils-2_11_2:1.2.2.1
	binutils-2_11_1:1.2.2.1
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.2
	binutils-2_10_1:1.1.1.1.2.1
	binutils-2_10:1.1.1.1.2.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.22
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2011.10.13.15.33.32;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.29.02.06.53;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2011.03.28.15.24.02;	author muller;	state Exp;
branches;
next	1.19;

1.19
date	2011.03.28.11.58.18;	author muller;	state Exp;
branches;
next	1.18;

1.18
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.17.13.33.53;	author jsm28;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.03.19.37.44;	author mmitchel;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2005.09.30.16.37.31;	author mmitchel;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.08.14.17.38;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.29.01.15.21;	author bje;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.14.12.20.16;	author aj;	state Exp;
branches
	1.11.12.1;
next	1.10;

1.10
date	2002.05.25.12.51.38;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.19.16.17.54;	author kazu;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.10.18.47.48;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.23.16.12.55;	author nickc;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.10.02.06.02.11;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.19.05.33.15;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.21.10.02.26;	author aj;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.13.06.43.57;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.07.04.34.50;	author amodra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.15.2.1
date	2006.10.16.20.21.23;	author nathan;	state Exp;
branches;
next	;

1.11.12.1
date	2005.08.30.19.57.32;	author mmitchel;	state Exp;
branches;
next	;

1.7.2.1
date	2002.02.10.18.46.59;	author drow;	state Exp;
branches;
next	;

1.2.2.1
date	2001.06.07.03.12.27;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	2000.04.07.04.39.24;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.22
log
@2011-10-13  Nick Clifton  <nickc@@redhat.com>

	Fixes to aid translation:
	* addr2line.c (translate_address): Add comments describing context
	of a couple of printf statements.
	* ar.c (write_archive): Allow translation of error message.
	* bucomm.c (endian_string): Allow translation of strings.
	(display_target_list): Allow translation.
	* coffdump.c (dump_coff_type): Allow translation of output.
	(dump_coff_where): Likewise.
	(dump_coff_symbol): Likewise.
	(dump_coff_scope): Likewise.
	(dump_coff_sfile): Likewise.
	(dump_coff_section): Likewise.
	(coff_dump): Likewise.
	* dlltool (def_version): Allow translation of output.
	(run): Likewise.
	* dllwrap.c (run): Allow translation of output.
	* dwarf.c (print_dwarf_vma): Allow translation of output.
	(process_extended_line_op): Remove spurious translation.
	Add translation for strings that can be translated.
	(decode_location_exression): Allow translation of output.
	(read_and_display_attr_value): Allow translation of output.
	* readelf.c (slurp_rela_relocs): Add translation for error
	messages when failing to get data.
	(slurp_rel_relocs): Likewise.
	(get_32bit_elf_symbols): Likewise.
	(get_64bit_elf_symbols): Likewise.
	(dump_ia64_vms_dynamic_relocs): Replace abbreviation with full
	word.
	(process_relocs): Remove spurious translation.
	(decode_tic6x_unwind_bytecode): Likewise.
	(process_version_section): Improve error messages.
	(process_mips_specific): Likewise.
	(print_gnu_note): Remove spurious translation.
	(print_stapsdt_note): Likewise.
	(get_ia64_vms_note_type): Likewise.
	* sysdump.c (getCHARS): Allow translation.
	(fillup): Allow translation of output.
	(getone): Likewise.
	(must): Likewise.
	(derived_type): Likewise.
	* doc/binutils.doc (addr2line): Extend description of command line
	options.
	* po/binutils.pot: Regenerate.
@
text
@/* Coff file dumper.
   Copyright 1994, 1995, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007,
   2011 Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or (at
   your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */


/* Written by Steve Chamberlain <sac@@cygnus.com>

   This module reads a type tree generated by coffgrok and prints
   it out so we can test the grokker.  */

#include "sysdep.h"
#include "bfd.h"
#include "bfd_stdint.h"
#include "libiberty.h"
#include "bucomm.h"

#include "coffgrok.h"
#include "getopt.h"

static int atnl;

static void tab (int);
static void nl (void);
static void dump_coff_lines (struct coff_line *);
static void dump_coff_type (struct coff_type *);
static void dump_coff_where (struct coff_where *);
static void dump_coff_visible (struct coff_visible *);
static void dump_coff_scope (struct coff_scope *);
static void dump_coff_sfile (struct coff_sfile *);
static void dump_coff_section (struct coff_section *);
static void show_usage (FILE *, int);
extern int main (int, char **);

static void
tab (int x)
{
  static int indent;
  int i;

  if (atnl)
    {
      if (x < 0)
	{
	  printf (")");
	  indent += x;

	  return;
	}
      else
	{
	  printf ("\n");
	  atnl = 0;
	}
    }

  if (x == -1)
    {
      for (i = 0; i < indent; i++)
	printf ("   ");

      indent += x;
      printf (")");
      return;
    }

  indent += x;

  for (i = 0; i < indent; i++)
    printf ("   ");

  if (x)
    {
      printf ("(");
    }
}

static void
nl (void)
{
  atnl = 1;
}

static void
dump_coff_lines (struct coff_line *p)
{
  int i;
  int online = 0;

  tab (1);
  printf (_("#lines %d "),p->nlines);

  for (i = 0; i < p->nlines; i++)
    {
      printf ("(%d 0x%x)", p->lines[i], p->addresses[i]);

      online++;

      if (online > 6)
	{
	  nl ();
	  tab (0);
	  online = 0;
	}
    }
  nl ();
  tab (-1);
}

static void
dump_coff_type (struct coff_type *p)
{
  tab (1);
  printf (_("size %d "), p->size);

  switch (p->type)
    {
    case coff_secdef_type:
      printf (_("section definition at %x size %x\n"),
	      p->u.asecdef.address,
	      p->u.asecdef.size);
      nl ();
      break;
    case coff_pointer_type:
      printf (_("pointer to"));
      nl ();
      dump_coff_type (p->u.pointer.points_to);
      break;
    case coff_array_type:
      printf (_("array [%d] of"), p->u.array.dim);
      nl ();
      dump_coff_type (p->u.array.array_of);
      break;
    case coff_function_type:
      printf (_("function returning"));
      nl ();
      dump_coff_type (p->u.function.function_returns);
      dump_coff_lines (p->u.function.lines);
      printf (_("arguments"));
      nl ();
      dump_coff_scope (p->u.function.parameters);
      tab (0);
      printf (_("code"));
      nl ();
      dump_coff_scope (p->u.function.code);
      tab(0);
      break;
    case coff_structdef_type:
      printf (_("structure definition"));
      nl ();
      dump_coff_scope (p->u.astructdef.elements);
      break;
    case coff_structref_type:
      if (!p->u.aenumref.ref)
	printf (_("structure ref to UNKNOWN struct"));
      else
	printf (_("structure ref to %s"), p->u.aenumref.ref->name);
      break;
    case coff_enumref_type:
      printf (_("enum ref to %s"), p->u.astructref.ref->name);
      break;
    case coff_enumdef_type:
      printf (_("enum definition"));
      nl ();
      dump_coff_scope (p->u.aenumdef.elements);
      break;
    case coff_basic_type:
      switch (p->u.basic)
	{
	case T_NULL:
	  printf ("NULL");
	  break;
	case T_VOID:
	  printf ("VOID");
	  break;
	case T_CHAR:
	  printf ("CHAR");
	  break;
	case T_SHORT:
	  printf ("SHORT");
	  break;
	case T_INT:
	  printf ("INT ");
	  break;
	case T_LONG:
	  printf ("LONG");
	  break;
	case T_FLOAT:
	  printf ("FLOAT");
	  break;
	case T_DOUBLE:
	  printf ("DOUBLE");
	  break;
	case T_STRUCT:
	  printf ("STRUCT");
	  break;
	case T_UNION:
	  printf ("UNION");
	  break;
	case T_ENUM:
	  printf ("ENUM");
	  break;
	case T_MOE:
	  printf ("MOE ");
	  break;
	case T_UCHAR:
	  printf ("UCHAR");
	  break;
	case T_USHORT:
	  printf ("USHORT");
	  break;
	case T_UINT:
	  printf ("UINT");
	  break;
	case T_ULONG:
	  printf ("ULONG");
	  break;
	case T_LNGDBL:
	  printf ("LNGDBL");
	  break;
	default:
	  abort ();
	}
    }
  nl ();
  tab (-1);
}

static void
dump_coff_where (struct coff_where *p)
{
  tab (1);
  switch (p->where)
    {
    case coff_where_stack:
      printf (_("Stack offset %x"), p->offset);
      break;
    case coff_where_memory:
      printf (_("Memory section %s+%x"), p->section->name, p->offset);
      break;
    case coff_where_register:
      printf (_("Register %d"), p->offset);
      break;
    case coff_where_member_of_struct:
      printf (_("Struct Member offset %x"), p->offset);
      break;
    case coff_where_member_of_enum:
      printf (_("Enum Member offset %x"), p->offset);
      break;
    case coff_where_unknown:
      printf (_("Undefined symbol"));
      break;
    case coff_where_strtag:
      printf ("STRTAG");
    case coff_where_entag:
      printf ("ENTAG");
      break;
    case coff_where_typedef:
      printf ("TYPEDEF");
      break;
    default:
      abort ();
    }
  nl ();
  tab (-1);
}

static void
dump_coff_visible (struct coff_visible *p)
{
  tab (1);
  switch (p->type)
    {
    case coff_vis_ext_def:
      printf ("coff_vis_ext_def");
      break;
    case coff_vis_ext_ref:
      printf ("coff_vis_ext_ref");
      break;
    case coff_vis_int_def:
      printf ("coff_vis_int_def");
      break;
    case coff_vis_common:
      printf ("coff_vis_common");
      break;
    case coff_vis_auto:
      printf ("coff_vis_auto");
      break;
    case coff_vis_autoparam:
      printf ("coff_vis_autoparam");
      break;
    case coff_vis_regparam:
      printf ("coff_vis_regparam");
      break;
    case coff_vis_register:
      printf ("coff_vis_register");
      break;
    case coff_vis_tag:
      printf ("coff_vis_tag");
      break;
    case coff_vis_member_of_struct:
      printf ("coff_vis_member_of_struct");
      break;
    case coff_vis_member_of_enum:
      printf ("coff_vis_member_of_enum");
      break;
    default:
      abort ();
    }
  nl ();
  tab (-1);
}

static void
dump_coff_symbol (struct coff_symbol *p)
{
  tab (1);
  printf (_("List of symbols"));
  nl ();

  while (p)
    {
      tab (1);
      tab (1);
      printf (_("Symbol  %s, tag %d, number %d"), p->name, p->tag, p->number);
      nl ();
      tab (-1);
      tab (1);
      printf (_("Type"));
      nl ();
      dump_coff_type (p->type);
      tab (-1);
      tab (1);
      printf (_("Where"));
      dump_coff_where (p->where);
      tab (-1);
      tab (1);
      printf (_("Visible"));
      dump_coff_visible (p->visible);
      tab (-1);
      p = p->next;
      tab (-1);
    }
  tab (-1);
}

static void
dump_coff_scope (struct coff_scope *p)
{
  if (p)
    {
      tab (1);
      printf ("%s %" BFD_VMA_FMT "x ",
	      _("List of blocks "), (bfd_vma) (uintptr_t) p);

      if (p->sec)
	printf( "  %s %x..%x",  p->sec->name,p->offset, p->offset + p->size -1);

      nl ();
      tab (0);
      printf ("*****************");
      nl ();

      while (p)
	{
	  tab (0);
	  printf (_("vars %d"), p->nvars);
	  nl ();
	  dump_coff_symbol (p->vars_head);
	  printf (_("blocks"));
	  nl ();
	  dump_coff_scope (p->list_head);
	  nl ();
	  p = p->next;
	}

      tab (0);
      printf ("*****************");
      nl ();
      tab (-1);
    }
}

static void
dump_coff_sfile (struct coff_sfile *p)
{
  tab (1);
  printf (_("List of source files"));
  nl ();

  while (p)
    {
      tab (0);
      printf (_("Source file %s"), p->name);
      nl ();
      dump_coff_scope (p->scope);
      p = p->next;
    }
  tab (-1);
}

static void
dump_coff_section (struct coff_section *ptr)
{
  int i;

  tab (1);
  printf (_("section %s %d %d address %x size %x number %d nrelocs %d"),
	  ptr->name, ptr->code, ptr->data, ptr->address,ptr->size,
	  ptr->number, ptr->nrelocs);
  nl ();

  for (i = 0; i < ptr->nrelocs; i++)
    {
      tab (0);
      printf ("(%x %s %x)",
	      ptr->relocs[i].offset,
	      ptr->relocs[i].symbol->name,
	      ptr->relocs[i].addend);
      nl ();
    }

  tab (-1);
}

static void
coff_dump (struct coff_ofile *ptr)
{
  int i;

  printf ("Coff dump");
  nl ();
  printf (_("#sources %d"), ptr->nsources);
  nl ();
  dump_coff_sfile (ptr->source_head);

  for (i = 0; i < ptr->nsections; i++)
    dump_coff_section (ptr->sections + i);
}

char * program_name;

static void
show_usage (FILE *file, int status)
{
  fprintf (file, _("Usage: %s [option(s)] in-file\n"), program_name);
  fprintf (file, _(" Print a human readable interpretation of a COFF object file\n"));
  fprintf (file, _(" The options are:\n\
  @@<file>                Read options from <file>\n\
  -h --help              Display this information\n\
  -v --version           Display the program's version\n\
\n"));

  if (REPORT_BUGS_TO[0] && status == 0)
    fprintf (file, _("Report bugs to %s\n"), REPORT_BUGS_TO);

  exit (status);
}

int
main (int ac, char **av)
{
  bfd *abfd;
  struct coff_ofile *tree;
  char **matching;
  char *input_file = NULL;
  int opt;
  static struct option long_options[] =
    {
      { "help", no_argument, 0, 'h' },
      { "version", no_argument, 0, 'V' },
      { NULL, no_argument, 0, 0 }
    };

#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  program_name = av[0];
  xmalloc_set_program_name (program_name);

  expandargv (&ac, &av);

  while ((opt = getopt_long (ac, av, "HhVv", long_options,
			     (int *) NULL))
	 != EOF)
    {
      switch (opt)
	{
	case 'H':
	case 'h':
	  show_usage (stdout, 0);
	  break;
	case 'v':
	case 'V':
	  print_version ("coffdump");
	  exit (0);
	case 0:
	  break;
	default:
	  show_usage (stderr, 1);
	  break;
	}
    }

  if (optind < ac)
    {
      input_file = av[optind];
    }

  if (!input_file)
    fatal (_("no input file specified"));

  abfd = bfd_openr (input_file, 0);

  if (!abfd)
    bfd_fatal (input_file);

  if (! bfd_check_format_matches (abfd, bfd_object, &matching))
    {
      bfd_nonfatal (input_file);

      if (bfd_get_error () == bfd_error_file_ambiguously_recognized)
	{
	  list_matching_formats (matching);
	  free (matching);
	}
      exit (1);
    }

  tree = coff_grok (abfd);

  coff_dump (tree);
  printf ("\n");

  return 0;
}
@


1.21
log
@	* coffdump.c: Include bfd_stdint.h
@
text
@d130 1
a130 1
  printf ("size %d ", p->size);
d135 1
a135 1
      printf ("section definition at %x size %x\n",
d141 1
a141 1
      printf ("pointer to");
d146 1
a146 1
      printf ("array [%d] of", p->u.array.dim);
d151 1
a151 1
      printf ("function returning");
d155 1
a155 1
      printf ("arguments");
d159 1
a159 1
      printf ("code");
d165 1
a165 1
      printf ("structure definition");
d171 1
a171 1
	printf ("structure ref to UNKNOWN struct");
d173 1
a173 1
	printf ("structure ref to %s", p->u.aenumref.ref->name);
d176 1
a176 1
      printf ("enum ref to %s", p->u.astructref.ref->name);
d179 1
a179 1
      printf ("enum definition");
d252 1
a252 1
      printf ("Stack offset %x", p->offset);
d255 1
a255 1
      printf ("Memory section %s+%x", p->section->name, p->offset);
d258 1
a258 1
      printf ("Register %d", p->offset);
d261 1
a261 1
      printf ("Struct Member offset %x", p->offset);
d264 1
a264 1
      printf ("Enum Member offset %x", p->offset);
d267 1
a267 1
      printf ("Undefined symbol");
d334 1
a334 1
  printf ("List of symbols");
d341 1
a341 1
      printf ("Symbol  %s, tag %d, number %d", p->name, p->tag, p->number);
d345 1
a345 1
      printf ("Type");
d350 1
a350 1
      printf ("Where");
d354 1
a354 1
      printf ("Visible");
d369 2
a370 1
      printf ("List of blocks %" BFD_VMA_FMT "x ",(bfd_vma) (uintptr_t) p);
d383 1
a383 1
	  printf ("vars %d", p->nvars);
d386 1
a386 1
	  printf ("blocks");
d404 1
a404 1
  printf ("List of source files");
d410 1
a410 1
      printf ("Source file %s", p->name);
d424 1
a424 1
  printf ("section %s %d %d address %x size %x number %d nrelocs %d",
d449 1
a449 1
  printf ("#sources %d", ptr->nsources);
@


1.20
log
@	* coffdump.c (coff_dump): Correct spelling error.
	(show_usage): Replace SYSROFF by COFF.
@
text
@d2 2
a3 2
   Copyright 1994, 1995, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
d30 1
@


1.19
log
@	* coffdump.c (dump_coff_scope): Use double typecast for pointer P
	to allow compilation for all targets.
@
text
@d447 1
a447 1
  printf ("#souces %d", ptr->nsources);
d461 1
a461 1
  fprintf (file, _(" Print a human readable interpretation of a SYSROFF object file\n"));
@


1.18
log
@Change sources over to using GPLv3
@
text
@d368 1
a368 1
      printf ("List of blocks %lx ",(unsigned long) p);
@


1.17
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or (at
d19 3
a21 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.16
log
@top level:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac (TOPLEVEL_CONFIGURE_ARGUMENTS): Fix quoting.
	* configure: Regenerate.

bfd:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion): New option.
	* configure: Regenerate.
	* Makefile.am (bfdver.h): Substitute for @@bfd_version_package@@.
	* Makefile.in: Regenerate.
	* version.h (BFD_VERSION_STRING): Define using
	@@bfd_version_package@@.

bfd/doc:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.in: Regenerate.

binutils:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* bucomm.h: Remove include of bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* ar.c (usage): Pass s to list_supported_targets.  Don't print
	empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* cxxfilt.c (usage): Print bug url when giving help.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c ((usage): Likewise. Add STREAM argument.  Adjust
	callers.
	* size.c (usage): Don't print empty REPORT_BUGS_TO.
	* srconv.c (show_usage): Likewise.
	* strings.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.

gas:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* dep-in.sed: Remove bin-bugs.h.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	(DEP_INCLUDES): Likewise.
	($(OBJS)): No longer depend on bin-bugs.h.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove include of bin-bugs.h.

gprof:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion, --with-bugurl): New options.
	* configure: Regenerate.
	* Makefile.am (PKGVERSION, REPORT_BUGS_TO): Define.
	(INCLUDES): Define PKGVERSION and REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	(main): Include PKGVERSION in version output.
	* gprof.h: Remove include of bin-bugs.h.

include:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* bin-bugs.h: Remove.

ld:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.
@
text
@d26 1
d29 1
a31 1
#include "bucomm.h"
@


1.15
log
@	* addr2line.c (usage): Document @@file.
	* ar.c (usage): Likewise.
	* coffdump (usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c (usage): Likewise.
	* size.c (usage): Likeise.
	* srconv.c (usage): Likewise.
	* strings.c (usage): Likewise.
	* windres.c (usage): Likewise.
	* doc/binutils.texi: Add section on common options.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1998, 1999, 2000, 2001, 2002, 2003
d465 1
a465 1
  if (status == 0)
@


1.15.2.1
log
@	binutils/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* bucomm.h: Remove bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* nlmconv.c (show_usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* size.c (usage): Likewise.
	* srconv.c (show_usage): Likewise.
	* string.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.
	* readelf (usage): Likewise. Add STREAM argument.  Adjust callers.

	gas/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove bin-bugs.h.

	ld/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* ld.h: Remove bin-bugs.h
	* lexsup.c (help):  Don't print empty REPORT_BUGS_TO.

	gprof/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(PKGVERSION): Define.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	* gprof.h: Remove bin-bugs.h

	include/
	* bin-bugs.h: Remove.
@
text
@d465 1
a465 1
  if (REPORT_BUGS_TO[0] && status == 0)
@


1.14
log
@	* addr2line.c (main): Likewise.
	* ar.c (main): Likewise.
	* coffdump.c (main): Likewise.
	* cxxfilt.c (main): Likewise.
	* dlltool.c (main): Likewise.
	* dllwrap.c (main): Likewise.
	* nlmconv.c (main): Likewise.
	* nm.c (main): Likewise.
	* objcopy.c (main): Likewise.
	* objdump.c (main): Likewise.
	* readelf.c (main): Likewise.
	* size.c (main): Likeiwse.
	* srcconv.c (main): Likewise.
	* strings.c (main): Likewise.
	* sysdump.c (main): Likewise.
	* sysinfo.c (main): Likewise.
	* windres.c (main): Likewise.

	* ldmain.c (main): Use expandargv.

	* gprof.c (main): Use expandargv.

	* as.c (main): Use expandargv.
@
text
@d460 1
@


1.13
log
@Update FSF address
@
text
@d497 2
@


1.12
log
@* more static'ing.

	* syslex.l (word, number, unit): Remove unused variables.
	* nlmheader.y (keyword_tokens): Make static.
	* coffdump.c (dump_coff_symbol, coff_dump): Make static.
	* coffgrok.c (lofile, last_function_symbol, last_function_type,
	last_struct, last_enum, cur_sfile): Make variables static.
	* sysdump.c (getCHARS, fillup, getBARRAY, getINT, getBITS,
	sysroff_swap_tr_in, sysroff_print_tr_out): Make static.
	* sysinfo.y (writecode, it, code, repeat, oldrepeat, name, rdepth,
	names, pnames): Likewise.
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.11
log
@	* addr2line.c: Convert to ISO C90 prototypes, change PTR, remove
	unneeded (void *) casts.
	* ar.c: Likewise.
	* arlex.l: Likewise.
	* arparse.y: Likewise.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* bucomm.h: Likewise.
	* budbg.h: Likewise.
	* budemang.c: Likewise.
	* budemang.h: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* cxxfilt.c: Likewise.
	* debug.c: Likewise.
	* debug.h: Likewise.
	* deflex.l: Likewise.
	* dlltool.c: Likewise.
	* dlltool.h: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* filemode.c: Likewise.
	* ieee.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmconv.h: Likewise.
	* nlmheader.y: Likewise.
	* nm.c: Likewise.
	* prdbg.c: Likewise.
	* rclex.l: Likewise.
	* rcparse.y: Likewise.
	* rdcoff.c: Likewise.
	* rddbg.c: Likewise.
	* rename.c: Likewise.
	* resbin.c: Likewise.
	* rescoff.c: Likewise.
	* resrc.c: Likewise.
	* size.c: Likewise.
	* srconv.c: Likewise.
	* stabs.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* sysinfo.y: Likewise.
	* syslex.l: Likewise.
	* unwind-ia64.c: Likewise.
	* unwind-ia64.h: Likewise.
	* version.c: Likewise.
	* windres.c: Likewise.
	* windres.h: Likewise.
	* winduni.c: Likewise.
	* wrstabs.c: Likewise.
@
text
@a40 1
extern void dump_coff_symbol (struct coff_symbol *);
a43 1
extern void coff_dump (struct coff_ofile *);
d326 1
a326 1
void
d437 1
a437 1
void
@


1.11.12.1
log
@	* ld/ldmain.c (main): Use expandargv.
	* binutils/addr2line.c (main): Likewise.
	* binutils/ar.c (main): Likewise.
	* binutils/coffdump.c (main): Likewise.
	* binutils/cxxfilt.c (main): Likewise.
	* binutils/dlltool.c (main): Likewise.
	* binutils/dllwrap.c (main): Likewise.
	* binutils/nlmconv.c (main): Likewise.
	* binutils/nm.c (main): Likewise.
	* binutils/objcopy.c (main): Likewise.
	* binutils/objdump.c (main): Likewise.
	* binutils/readelf.c (main): Likewise.
	* binutils/size.c (main): Likeiwse.
	* binutils/srcconv.c (main): Likewise.
	* binutils/strings.c (main): Likewise.
	* binutils/sysdump.c (main): Likewise.
	* binutils/sysinfo.c (main): Likewise.
	* binutils/windres.c (main): Likewise.

	* include/libiberty.h (expandargv): New function.
	* libiberty/argv.c (safe-ctype.h): Include it.
	(ISBLANK): Remove.
	(stdio.h): Include.
	(expandargv): New function.
	* libiberty/Makefile.in: Regenerated.
@
text
@a498 2
  expandargv (&ac, &av);

@


1.10
log
@	* arlex.l: Use #include "" instead of <> for local header files.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmheader.y: Likewise.
	* srconv.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* unwind-ia64.h: Likewise.
	* windres.h: Likewise.
	* winduni.h: Likewise.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1998, 1999, 2000, 2001, 2002
d35 13
a47 13
static void tab PARAMS ((int));
static void nl PARAMS ((void));
static void dump_coff_lines PARAMS ((struct coff_line *));
static void dump_coff_type PARAMS ((struct coff_type *));
static void dump_coff_where PARAMS ((struct coff_where *));
static void dump_coff_visible PARAMS ((struct coff_visible *));
extern void dump_coff_symbol PARAMS ((struct coff_symbol *));
static void dump_coff_scope PARAMS ((struct coff_scope *));
static void dump_coff_sfile PARAMS ((struct coff_sfile *));
static void dump_coff_section PARAMS ((struct coff_section *));
extern void coff_dump PARAMS ((struct coff_ofile *));
static void show_usage PARAMS ((FILE *, int));
extern int main PARAMS ((int, char **));
d50 1
a50 2
tab (x)
     int x;
d93 1
a93 1
nl ()
d99 1
a99 2
dump_coff_lines (p)
     struct coff_line *p;
d125 1
a125 2
dump_coff_type (p)
     struct coff_type *p;
d244 1
a244 2
dump_coff_where (p)
     struct coff_where *p;
d283 1
a283 2
dump_coff_visible (p)
     struct coff_visible *p;
d329 1
a329 2
dump_coff_symbol (p)
     struct coff_symbol *p;
d362 1
a362 2
dump_coff_scope (p)
     struct coff_scope *p;
d398 1
a398 2
dump_coff_sfile (p)
     struct coff_sfile *p;
d416 1
a416 2
dump_coff_section(ptr)
     struct coff_section *ptr;
d440 1
a440 2
coff_dump (ptr)
     struct coff_ofile *ptr;
d457 1
a457 3
show_usage (file, status)
     FILE *file;
     int status;
d473 1
a473 3
main (ac, av)
     int ac;
     char *av[];
@


1.9
log
@	* addr2line.c: Fix formatting.
	* ar.c: Likewise.
	* arsup.c: Likewise.
	* arsup.h: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* coffgrok.h: Likewise.
@
text
@d26 2
a27 2
#include <bfd.h>
#include <libiberty.h>
@


1.8
log
@2002-02-10  Daniel Jacobowitz  <drow@@mvista.com>

	* coffdump.c: Include "getopt.h" after "bucomm.h"
	so that macros are defined correctly.
	* nlmconv.c: Add PARAMS ((const time_t *)) to localtime
	prototype.  Prototype main.
	* nlmheader.y: Add PARAMS ((int)) to strerror prototype.
@
text
@d109 1
a109 1
  for (i = 0; i < p->nlines; i++) 
d136 1
a136 1
      printf ("section definition at %x size %x\n", 
d430 1
a430 1
  printf ("section %s %d %d address %x size %x number %d nrelocs %d", 
d435 1
a435 1
  for (i = 0; i < ptr->nrelocs; i++) 
d437 1
a437 1
      tab (0);    
@


1.7
log
@Tidy up formatting of --help output.
@
text
@a26 1
#include <getopt.h>
d31 1
@


1.7.2.1
log
@2002-02-10  Daniel Jacobowitz  <drow@@mvista.com>

	* coffdump.c: Include "getopt.h" after "bucomm.h"
	so that macros are defined correctly.
	* nlmconv.c: Add PARAMS ((const time_t *)) to localtime
	prototype.  Prototype main.
	* nlmheader.y: Add PARAMS ((int)) to strerror prototype.
@
text
@d27 1
a31 1
#include "getopt.h"
@


1.6
log
@	* coffdump.c (PROGRAM_VERSION): Delete.
	(main <'V'>): Call print_version.
	* srconv.c: Likewise.
	* sysdump.c: Likewise.
	* version.c (program_version): Remove.
	(print_version): Use BFD_VERSION_STRING.  Just print the current
	year in copyright message.
	* addr2line.c (program_version): Remove unused declaration.
	* objdump.c (display_target_tables): Use BFD_VERSION_STRING in
	place of BFD_VERSION.
	* Makefile.am (Makefile): Depend on bfd/configure.in
	(cplus-dem.o): Depend on Makefile.
	Run "make dep-am"
	* Makefile.in: Regenerate.
@
text
@d2 2
a3 1
   Copyright 1994, 1995, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GNU Binutils.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d24 1
a24 2
   it out so we can test the grokker.
*/
a46 1
static void show_help PARAMS ((void));
d51 1
a51 1
int x;
d93 2
a94 1
static void nl ()
d105 4
a108 2
  tab(1);
  printf(_("#lines %d "),p->nlines);
d111 2
a112 1
      printf("(%d 0x%x)", p->lines[i], p->addresses[i]);
d114 1
d117 2
a118 2
	  nl();
	  tab(0);
d122 2
a123 2
  nl();
  tab(-1);
d132 1
d139 1
a139 1
      nl();
a332 1

d340 1
d371 7
a377 3
if (p) {
  tab (1);
  printf ("List of blocks %lx ",(unsigned long) p);
d379 1
a379 9
  if (p->sec) {
    printf( "  %s %x..%x",  p->sec->name,p->offset, p->offset + p->size -1);
  }
  nl ();
  tab (0);
  printf ("*****************");
  nl ();
  while (p)
    {
d381 1
a381 1
      printf ("vars %d", p->nvars);
d383 16
a398 2
      dump_coff_symbol (p->vars_head);
      printf ("blocks");
d400 1
a400 3
      dump_coff_scope (p->list_head);
      nl ();
      p = p->next;
a401 6

  tab (0);
  printf ("*****************");
  nl ();
  tab (-1);
}
d411 1
d425 1
a425 1
struct coff_section *ptr;
d428 6
a433 4
  tab(1);
  printf("section %s %d %d address %x size %x number %d nrelocs %d", 
	 ptr->name, ptr->code, ptr->data, ptr->address,ptr->size, ptr->number, ptr->nrelocs);
  nl();
d437 6
a442 6
      tab(0);    
      printf("(%x %s %x)",
	     ptr->relocs[i].offset,
	     ptr->relocs[i].symbol->name,
	     ptr->relocs[i].addend);
      nl();
a443 1
  tab(-1);
d445 1
d453 1
d459 1
d461 1
a461 1
    dump_coff_section(ptr->sections + i);
a463 2


d471 10
a480 1
  fprintf (file, "Usage: %s [-hV] in-file\n",   program_name);
a483 9
static void
show_help ()
{
  printf (_("%s: Print a human readable interpretation of a SYSROFF object file\n"),
	  program_name);
  show_usage (stdout, 0);
}


d513 1
a513 1
  while ((opt = getopt_long (ac, av, "hV", long_options,
d519 1
d521 3
a523 2
	  show_help ();
	  /*NOTREACHED*/
a526 1
	  /*NOTREACHED*/
d531 1
a531 1
	  /*NOTREACHED*/
d541 2
a542 3
    {
      fatal (_("no input file specified"));
    }
d551 1
d562 3
a564 2
  coff_dump(tree);
  printf("\n");
@


1.5
log
@Locale changes from Bruno Haible  <haible@@clisp.cons.org>.
@
text
@a32 2
#define PROGRAM_VERSION "1.0"

d513 1
a513 1
	  printf (_("GNU %s version %s\n"), program_name, PROGRAM_VERSION);
@


1.4
log
@	* coffgrok.h: Add missing parameter for prototype of coff_grok.

	* sysdump.c: Add missing prototypes.
	* srconv.c: Likewise.
	* unwind-ia64.c: Likewise.
	* coffdump.c: Likewise.

	* sysinfo.y: Print prototypes, include <ansidecl.h>.

	* coffgrok.c: Add missing prototypes, include libiberty.h instead
	of declaring xcalloc.
@
text
@d496 3
@


1.3
log
@Fix typos in ChangeLogs and update copyright notices
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1998, 1999, 2000 Free Software Foundation, Inc.
d36 15
a50 1
static void dump_coff_scope ();
@


1.2
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 95, 98, 99, 2000 Free Software Foundation, Inc.
@


1.2.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1994, 1998, 1999 Free Software Foundation, Inc.
d516 1
a516 3
      fprintf (stderr,_("%s: no input file specified\n"),
	       program_name);
      exit(1);
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.1.2.1
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 95, 98, 99, 2000 Free Software Foundation, Inc.
d516 3
a518 1
      fatal (_("no input file specified"));
@


