head	1.15;
access;
symbols
	binutils-2_24-branch:1.15.0.8
	binutils-2_24-branchpoint:1.15
	binutils-2_21_1:1.14
	binutils-2_23_2:1.15
	binutils-2_23_1:1.15
	binutils-2_23:1.15
	binutils-2_23-branch:1.15.0.6
	binutils-2_23-branchpoint:1.15
	binutils-2_22_branch:1.15.0.4
	binutils-2_22:1.15
	binutils-2_22-branch:1.15.0.2
	binutils-2_22-branchpoint:1.15
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.2
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.13
	binutils-2_20:1.13
	binutils-arc-20081103-branch:1.12.0.8
	binutils-arc-20081103-branchpoint:1.12
	binutils-2_20-branch:1.13.0.2
	binutils-2_20-branchpoint:1.13
	dje-cgen-play1-branch:1.12.0.6
	dje-cgen-play1-branchpoint:1.12
	arc-20081103-branch:1.12.0.4
	arc-20081103-branchpoint:1.12
	binutils-2_19_1:1.12
	binutils-2_19:1.12
	binutils-2_19-branch:1.12.0.2
	binutils-2_19-branchpoint:1.12
	binutils-2_18:1.11
	binutils-2_18-branch:1.11.0.2
	binutils-2_18-branchpoint:1.11
	binutils-csl-coldfire-4_1-32:1.8
	binutils-csl-sourcerygxx-4_1-32:1.8
	binutils-csl-innovasic-fido-3_4_4-33:1.8
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.8
	binutils-csl-sourcerygxx-4_1-30:1.8
	binutils-csl-coldfire-4_1-28:1.8
	binutils-csl-sourcerygxx-4_1-29:1.8
	binutils-csl-sourcerygxx-4_1-28:1.8
	binutils-csl-arm-2006q3-27:1.8
	binutils-csl-sourcerygxx-4_1-27:1.8
	binutils-csl-arm-2006q3-26:1.8
	binutils-csl-sourcerygxx-4_1-26:1.8
	binutils-csl-sourcerygxx-4_1-25:1.8
	binutils-csl-sourcerygxx-4_1-24:1.8
	binutils-csl-sourcerygxx-4_1-23:1.8
	binutils-csl-sourcerygxx-4_1-21:1.8
	binutils-csl-arm-2006q3-21:1.8
	binutils-csl-sourcerygxx-4_1-22:1.8
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.8
	binutils-csl-sourcerygxx-4_1-20:1.8
	binutils-csl-arm-2006q3-19:1.8
	binutils-csl-sourcerygxx-4_1-19:1.8
	binutils-csl-sourcerygxx-4_1-18:1.8
	binutils-csl-renesas-4_1-9:1.8
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.8
	binutils-csl-renesas-4_1-7:1.8
	binutils-csl-renesas-4_1-6:1.8
	binutils-csl-sourcerygxx-4_1-17:1.8
	binutils-csl-sourcerygxx-4_1-14:1.8
	binutils-csl-sourcerygxx-4_1-15:1.8
	binutils-csl-sourcerygxx-4_1-13:1.8
	binutils-2_17:1.8
	binutils-csl-sourcerygxx-4_1-12:1.8
	binutils-csl-sourcerygxx-3_4_4-21:1.8
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.8
	binutils-csl-sourcerygxx-4_1-8:1.8
	binutils-csl-sourcerygxx-4_1-7:1.8
	binutils-csl-arm-2006q1-6:1.8
	binutils-csl-sourcerygxx-4_1-6:1.8
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.8
	binutils-csl-sourcerygxx-3_4_4-19:1.8
	binutils-csl-coldfire-4_1-10:1.8
	binutils-csl-sourcerygxx-4_1-5:1.8
	binutils-csl-sourcerygxx-4_1-4:1.8
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.8
	binutils-csl-sourcerygxx-3_4_4-17:1.8
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.8.0.4
	binutils-2_17-branchpoint:1.8
	binutils-csl-2_17-branch:1.8.0.2
	binutils-csl-2_17-branchpoint:1.8
	binutils-csl-gxxpro-3_4-branch:1.5.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.10
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.8
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.5
	csl-arm-2004-q3:1.5
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	binutils-2_15-branch:1.5.0.6
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	csl-arm-2003-q4:1.5
	binutils-2_14:1.4
	binutils-2_14-branch:1.4.0.2
	binutils-2_14-branchpoint:1.4
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.2
	binutils_latest_snapshot:1.15;
locks; strict;
comment	@ * @;


1.15
date	2010.12.10.08.51.47;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.18.00.42.25;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.02.07.22.32;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.28.06.49.44;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.04.22.24.21;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.16.18.12.17;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.18.14.16.51;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.08.14.17.38;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.00.03.32;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.14.12.20.16;	author aj;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.12.21.10.09;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.30.08.39.41;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.20.18.23.05;	author kazu;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.18.12.45.56;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.15
log
@	* binemul.h (do_ar_emul_append): Declare.
	* binemul.c (any_ok): New function.
	(do_ar_emul_append): Rename from do_ar_emul_default_append.  Make
	global, add check arg.  Adjust callers.
	(ar_emul_default_replace): Tidy.
	* configure.tgt (powerpc-*-aix[5-9]*,rs6000-*-aix[5-9]*): Use
	bin_aix_emulation.
	* emul_aix.c (bin_aix5_emulation, ar_emul_aix_internal): Delete.
	(ar_emul_aix5_append, ar_emul_aix5_replace): Delete.
	(check_aix): New function.
	(ar_emul_aix_append, ar_emul_aix_replace): Rewrite.
@
text
@/* Binutils emulation layer.
   Copyright 2002, 2003, 2005, 2006, 2007, 2008, 2010
   Free Software Foundation, Inc.
   Written by Tom Rix, Red Hat Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "binemul.h"
#include "bfdlink.h"
#include "coff/internal.h"
#include "coff/xcoff.h"
#include "libcoff.h"
#include "libxcoff.h"

/* Default to <bigaf>.  */
/* FIXME: write only variable.  */
static bfd_boolean big_archive = TRUE;

/* Whether to include 32 bit objects.  */
static bfd_boolean X32 = TRUE;

/* Whether to include 64 bit objects.  */
static bfd_boolean X64 = FALSE;

static void
ar_emul_aix_usage (FILE *fp)
{
  AR_EMUL_USAGE_PRINT_OPTION_HEADER (fp);
  /* xgettext:c-format */
  fprintf (fp, _("  [-g]         - 32 bit small archive\n"));
  fprintf (fp, _("  [-X32]       - ignores 64 bit objects\n"));
  fprintf (fp, _("  [-X64]       - ignores 32 bit objects\n"));
  fprintf (fp, _("  [-X32_64]    - accepts 32 and 64 bit objects\n"));
}

static bfd_boolean
check_aix (bfd *try_bfd)
{
  extern const bfd_target rs6000coff_vec;
  extern const bfd_target rs6000coff64_vec;
  extern const bfd_target aix5coff64_vec;

  if (bfd_check_format (try_bfd, bfd_object))
    {
      if (!X32 && try_bfd->xvec == &rs6000coff_vec)
	return FALSE;

      if (!X64 && (try_bfd->xvec == &rs6000coff64_vec
		   || try_bfd->xvec == &aix5coff64_vec))
	return FALSE;
    }
  return TRUE;
}

static bfd_boolean
ar_emul_aix_append (bfd **after_bfd, char *file_name, const char *target,
		    bfd_boolean verbose, bfd_boolean flatten)
{
  bfd *new_bfd;

  new_bfd = bfd_openr (file_name, target);
  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);

  return do_ar_emul_append (after_bfd, new_bfd, verbose, flatten, check_aix);
}

static bfd_boolean
ar_emul_aix_replace (bfd **after_bfd, char *file_name, const char *target,
		     bfd_boolean verbose)
{
  bfd *new_bfd;

  new_bfd = bfd_openr (file_name, target);
  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);

  if (!check_aix (new_bfd))
    return FALSE;

  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, file_name);

  new_bfd->archive_next = *after_bfd;
  *after_bfd = new_bfd;

  return TRUE;
}

static bfd_boolean
ar_emul_aix_parse_arg (char *arg)
{
  if (CONST_STRNEQ (arg, "-X32_64"))
    {
      big_archive = TRUE;
      X32 = TRUE;
      X64 = TRUE;
    }
  else if (CONST_STRNEQ (arg, "-X32"))
    {
      big_archive = TRUE;
      X32 = TRUE;
      X64 = FALSE;
    }
  else if (CONST_STRNEQ (arg, "-X64"))
    {
      big_archive = TRUE;
      X32 = FALSE;
      X64 = TRUE;
    }
  else if (CONST_STRNEQ (arg, "-g"))
    {
      big_archive = FALSE;
      X32 = TRUE;
      X64 = FALSE;
    }
  else
    return FALSE;

  return TRUE;
}

struct bin_emulation_xfer_struct bin_aix_emulation =
{
  ar_emul_aix_usage,
  ar_emul_aix_append,
  ar_emul_aix_replace,
  ar_emul_aix_parse_arg,
};
@


1.14
log
@Add a target argument.

2010-09-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* emul_aix.c (ar_emul_aix_append): Add a target argument
	and ignore it if it is set.
	(ar_emul_aix5_append): Likewise.
	(ar_emul_aix_replace): Likewise.
	(ar_emul_aix5_replace): Likewise.
@
text
@d2 2
a3 1
   Copyright 2002, 2003, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
d31 1
d52 1
a52 6
ar_emul_aix_internal (bfd **       after_bfd,
		      char *       file_name,
		      bfd_boolean  verbose,
		      const char * target_name,
		      bfd_boolean  is_append,
		      bfd_boolean  flatten ATTRIBUTE_UNUSED)
d54 3
a56 2
  bfd *temp;
  bfd *try_bfd;
d58 4
a61 8
  temp = *after_bfd;

  /* Try 64 bit.  */
  try_bfd = bfd_openr (file_name, target_name);

  /* Failed or the object is possibly 32 bit.  */
  if (NULL == try_bfd || ! bfd_check_format (try_bfd, bfd_object))
    try_bfd = bfd_openr (file_name, "aixcoff-rs6000");
d63 3
a65 12
  AR_EMUL_ELEMENT_CHECK (try_bfd, file_name);

  if (bfd_xcoff_is_xcoff64 (try_bfd) && (! X64))
    return FALSE;

  if (bfd_xcoff_is_xcoff32 (try_bfd)
      && bfd_check_format (try_bfd, bfd_object) && (! X32))
    return FALSE;

  if (is_append)
    {
      AR_EMUL_APPEND_PRINT_VERBOSE (verbose, file_name);
a66 8
  else
    {
      AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, file_name);
    }

  *after_bfd = try_bfd;
  (*after_bfd)->archive_next = temp;

a69 1

d74 4
a77 5
  if (target)
    non_fatal (_("target `%s' ignored."), target);
  return ar_emul_aix_internal (after_bfd, file_name, verbose,
			       "aixcoff64-rs6000", TRUE, flatten);
}
d79 1
a79 8
static bfd_boolean
ar_emul_aix5_append (bfd **after_bfd, char *file_name, const char *target,
		     bfd_boolean verbose, bfd_boolean flatten)
{
  if (target)
    non_fatal (_("target `%s' ignored."), target);
  return ar_emul_aix_internal (after_bfd, file_name, verbose,
			       "aix5coff64-rs6000", TRUE, flatten);
d86 12
a97 5
  if (target)
    non_fatal (_("target `%s' ignored."), target);
  return ar_emul_aix_internal (after_bfd, file_name, verbose,
			       "aixcoff64-rs6000", FALSE, FALSE);
}
d99 1
a99 8
static bfd_boolean
ar_emul_aix5_replace (bfd **after_bfd, char *file_name,
		      const char *target, bfd_boolean verbose)
{
  if (target)
    non_fatal (_("target `%s' ignored."), target);
  return ar_emul_aix_internal (after_bfd, file_name, verbose,
			       "aix5coff64-rs6000", FALSE, FALSE);
a141 8

struct bin_emulation_xfer_struct bin_aix5_emulation =
{
  ar_emul_aix_usage,
  ar_emul_aix5_append,
  ar_emul_aix5_replace,
  ar_emul_aix_parse_arg,
};
@


1.13
log
@update copyright dates
@
text
@d95 2
a96 2
ar_emul_aix_append (bfd **after_bfd, char *file_name, bfd_boolean verbose,
                    bfd_boolean flatten)
d98 2
d105 2
a106 2
ar_emul_aix5_append (bfd **after_bfd, char *file_name, bfd_boolean verbose,
                     bfd_boolean flatten)
d108 2
d115 2
a116 1
ar_emul_aix_replace (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d118 2
d125 2
a126 1
ar_emul_aix5_replace (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d128 2
@


1.12
log
@Add support for thin archives.
    * bfd/archive.c (_bfd_find_nested_archive): New function.
    (get_extended_arelt_filename): Add origin parameter.
    (_bfd_generic_read_ar_hdr_mag): Deal with extended name
    combined with a file offset.
    (append_relative_path): New function.
    (_bfd_get_elt_at_filepos): Deal with external members and
    nested archives.
    (bfd_generic_openr_next_archived_file): Thin archives.
    (bfd_generic_archive_p): Recognize new magic string.
    (adjust_relative_path): New function.
    (_bfd_construct_extended_name_table): Construct extended
    names for thin archive members.
    (_bfd_write_archive_contents): Emit new magic string, skip
    copying files for thin archives.
    * bfd/bfd-in.h (bfd_is_thin_archive): New macro.
    * bfd/bfd.c (struct bfd): New fields for thin archives.
    * bfd/libbfd-in.h (struct areltdata): New field for thin archives.
    * bfd/opncls.c (bfd_close): Delete BFDs for nested archives.
    * binutils/ar.c (make_thin_archive): New global flag.
    (map_over_members): Deal with full pathnames in thin archives.
    (usage, main): Add 'T' option for building thin archives.
    (replace_members): Pass thin archive flag to ar_emul_append.
    * binutils/arsup.c (ar_open): Initialize new flag.
    * binutils/binemul.c (ar_emul_append): Add new parameter for
    flattening nested archives.
    (do_ar_emul_default_append): New function.
    (ar_emul_default_append): Factored out recursive code.
    * binutils/binemul.h (ar_emul_default_append): Add new parameter.
    (struct bin_emulation_xfer_struct): New parameter for ar_append.
    * binutils/dlltool.c (gen_lib_file): Initialize thin archive flag.
    * binutils/emul_aix.c (ar_emul_aix_internal): Add new flatten
    parameter, currently unimplemented.
    All callers changed.
    * binutils/objcopy.c (copy_archive): Preserve thin archive flag.
    * binutils/doc/binutils.texi: Update ar documentation.
    * binutils/testsuite/binutils-all/ar.exp: Add thin archive tests.
    * include/aout/ar.h (ARMAGT): New magic string for thin archives.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2006, 2007, 2008 Free Software Foundation, Inc.
@


1.11
log
@Change sources over to using GPLv3
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2006, 2007 Free Software Foundation, Inc.
a37 9
static void ar_emul_aix_usage (FILE *);
static bfd_boolean ar_emul_aix_append (bfd **, char *, bfd_boolean);
static bfd_boolean ar_emul_aix5_append (bfd **, char *, bfd_boolean);
static bfd_boolean ar_emul_aix_replace (bfd **, char *, bfd_boolean);
static bfd_boolean ar_emul_aix5_replace (bfd **, char *, bfd_boolean);
static bfd_boolean ar_emul_aix_parse_arg (char *);
static bfd_boolean ar_emul_aix_internal
  (bfd **, char *, bfd_boolean, const char *, bfd_boolean);

d50 6
a55 2
ar_emul_aix_internal (bfd **after_bfd, char *file_name, bfd_boolean verbose,
		      const char * target_name, bfd_boolean is_append)
d95 2
a96 1
ar_emul_aix_append (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d99 1
a99 1
			       "aixcoff64-rs6000", TRUE);
d103 2
a104 1
ar_emul_aix5_append (bfd **after_bfd, char *file_name, bfd_boolean verbose)
d107 1
a107 1
			       "aix5coff64-rs6000", TRUE);
d114 1
a114 1
			       "aixcoff64-rs6000", FALSE);
d121 1
a121 1
			       "aix5coff64-rs6000", FALSE);
@


1.10
log
@	* emul_aix.c (ar_emul_aix_internal): Rename "next" to "archive_next".
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d19 2
a20 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.9
log
@* bfd-in.h (STRING_AND_COMMA): New macro.  Takes one constant string as its
  argument and emits the string followed by a comma and then the length of
  the string.
  (CONST_STRNEQ): New macro.  Checks to see if a variable string has a constant
  string as its initial characters.
  (CONST_STRNCPY): New macro.  Copies a constant string to the start of a
  variable string.
* bfd-in2.h: Regenerate.
* <remainign files>: Make use of the new macros.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2006 Free Software Foundation, Inc.
d92 1
a92 1
  (*after_bfd)->next = temp;
@


1.8
log
@Fix spelling of Red Hat
@
text
@d2 1
a2 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
d129 1
a129 1
  if (strncmp (arg, "-X32_64", 6) == 0)
d135 1
a135 1
  else if (strncmp (arg, "-X32", 3) == 0)
d141 1
a141 1
  else if (strncmp (arg, "-X64", 3) == 0)
d147 1
a147 1
  else if (strncmp (arg, "-g", 2) == 0)
@


1.7
log
@Update FSF address
@
text
@d3 1
a3 1
   Written by Tom Rix, Redhat.
@


1.6
log
@	* ar.c (mri_mode): Make static.
	* arsup.c (obfd, real_name, outfile): Likewise.
	* binemul.c (ar_emul_create): Remove unused function.
	(ar_emul_default_create): Likewise.
	* binemul.h (ar_emul_create): Remove declaration.
	(ar_emul_default_create): Likewise.
	(struct bin_emulation_xfer_struct): Remove ar_create member.
	* bucomm.c (report): Make static.
	* bucomm.h (report): Remove declaration.
	* cxxfilt.c (mbuffer): Make static.
	(main): Use unsigned ints for some loop control variables.
	* readelf.c: Make many global variables static.
	* size.c (berkeley_format): Make static.
	(long_options): Likewise.
	* emul_aix.c (bin_aix_emulation): Remove ar_emul_default_create
	structure initialiser.
	(bin_aix5_emulation): Likewise.
	* emul_vanilla.c (bin_vanilla_emulation): Likewise.
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.5
log
@	* addr2line.c: Convert to ISO C90 prototypes, change PTR, remove
	unneeded (void *) casts.
	* ar.c: Likewise.
	* arlex.l: Likewise.
	* arparse.y: Likewise.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* bucomm.h: Likewise.
	* budbg.h: Likewise.
	* budemang.c: Likewise.
	* budemang.h: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* cxxfilt.c: Likewise.
	* debug.c: Likewise.
	* debug.h: Likewise.
	* deflex.l: Likewise.
	* dlltool.c: Likewise.
	* dlltool.h: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* filemode.c: Likewise.
	* ieee.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmconv.h: Likewise.
	* nlmheader.y: Likewise.
	* nm.c: Likewise.
	* prdbg.c: Likewise.
	* rclex.l: Likewise.
	* rcparse.y: Likewise.
	* rdcoff.c: Likewise.
	* rddbg.c: Likewise.
	* rename.c: Likewise.
	* resbin.c: Likewise.
	* rescoff.c: Likewise.
	* resrc.c: Likewise.
	* size.c: Likewise.
	* srconv.c: Likewise.
	* stabs.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* sysinfo.y: Likewise.
	* syslex.l: Likewise.
	* unwind-ia64.c: Likewise.
	* unwind-ia64.h: Likewise.
	* version.c: Likewise.
	* windres.c: Likewise.
	* windres.h: Likewise.
	* winduni.c: Likewise.
	* wrstabs.c: Likewise.
@
text
@a163 1
  ar_emul_default_create,
a171 1
  ar_emul_default_create,
@


1.4
log
@	* dlltool.c (mcore_elf_gen_out_file): Replace all occurrences of
	dyn_string_append with dyn_string_append_cstr.

	* emul_aix.c (ar_emul_aix_create): Remove unused function.
@
text
@d2 1
a2 1
   Copyright 2002 Free Software Foundation, Inc.
d37 6
a42 12
static void ar_emul_aix_usage
  PARAMS ((FILE *));
static bfd_boolean ar_emul_aix_append
  PARAMS ((bfd **, char *, bfd_boolean));
static bfd_boolean ar_emul_aix5_append
  PARAMS ((bfd **, char *, bfd_boolean));
static bfd_boolean ar_emul_aix_replace
  PARAMS ((bfd **, char *, bfd_boolean));
static bfd_boolean ar_emul_aix5_replace
  PARAMS ((bfd **, char *, bfd_boolean));
static bfd_boolean ar_emul_aix_parse_arg
  PARAMS ((char *));
d44 1
a44 1
  PARAMS ((bfd **, char *, bfd_boolean, const char *, bfd_boolean));
d47 1
a47 2
ar_emul_aix_usage (fp)
     FILE *fp;
d58 2
a59 6
ar_emul_aix_internal (after_bfd, file_name, verbose, target_name, is_append)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
     const char * target_name;
     bfd_boolean is_append;
d99 1
a99 4
ar_emul_aix_append (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d106 1
a106 4
ar_emul_aix5_append (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d113 1
a113 4
ar_emul_aix_replace (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d120 1
a120 4
ar_emul_aix5_replace (after_bfd, file_name, verbose)
     bfd **after_bfd;
     char *file_name;
     bfd_boolean verbose;
d127 1
a127 2
ar_emul_aix_parse_arg (arg)
     char *arg;
@


1.3
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@a148 19
bfd_boolean
ar_emul_aix_create (abfd_out, archive_file_name, file_name)
     bfd **abfd_out;
     char *archive_file_name;
     char *file_name ATTRIBUTE_UNUSED;
{
  char *target = "aixcoff-rs6000";

  /* Create an empty archive.  */
  *abfd_out = bfd_openw (archive_file_name, target);

  if (*abfd_out == NULL)
    bfd_fatal (archive_file_name);

  /* set to small or big format.  */
  /* not done.  */
  return TRUE;
}

@


1.2
log
@	* debug.c: Fix formatting.
	* debug.h: Likewise.
	* dlltool.c: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* emul_vanilla.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 2002 Free Software Foundation, Inc.
d29 1
a29 1
static boolean big_archive = true;
d32 1
a32 1
static boolean X32 = true;
d35 1
a35 1
static boolean X64 = false;
d37 14
a50 8
static void    ar_emul_aix_usage     PARAMS ((FILE *));
static boolean ar_emul_aix_append    PARAMS ((bfd **, char *, boolean));
static boolean ar_emul_aix5_append   PARAMS ((bfd **, char *, boolean));
static boolean ar_emul_aix_replace   PARAMS ((bfd **, char *, boolean));
static boolean ar_emul_aix5_replace  PARAMS ((bfd **, char *, boolean));
static boolean ar_emul_aix_parse_arg PARAMS ((char *));
static boolean ar_emul_aix_internal  PARAMS ((bfd **, char *, boolean,
					      const char *, boolean));
d64 1
a64 1
static boolean
d68 1
a68 1
     boolean verbose;
d70 1
a70 1
     boolean is_append;
d87 1
a87 1
    return false;
d91 1
a91 1
    return false;
d105 1
a105 1
  return true;
d109 1
a109 1
static boolean
d113 1
a113 1
     boolean verbose;
d116 1
a116 1
			       "aixcoff64-rs6000", true);
d119 1
a119 1
static boolean
d123 1
a123 1
     boolean verbose;
d126 1
a126 1
			       "aix5coff64-rs6000", true);
d129 1
a129 1
static boolean
d133 1
a133 1
     boolean verbose;
d136 1
a136 1
			       "aixcoff64-rs6000", false);
d139 1
a139 1
static boolean
d143 1
a143 1
     boolean verbose;
d146 1
a146 1
			       "aix5coff64-rs6000", false);
d149 1
a149 1
boolean
d165 1
a165 1
  return true;
d168 1
a168 1
static boolean
d174 3
a176 3
      big_archive = true;
      X32 = true;
      X64 = true;
d180 3
a182 3
      big_archive = true;
      X32 = true;
      X64 = false;
d186 3
a188 3
      big_archive = true;
      X32 = false;
      X64 = true;
d192 3
a194 3
      big_archive = false;
      X32 = true;
      X64 = false;
d197 1
a197 1
    return false;
d199 1
a199 1
  return true;
@


1.1
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d83 1
a83 1
  if (bfd_xcoff_is_xcoff32 (try_bfd) 
d143 1
a143 1
boolean 
d196 1
a196 1
struct bin_emulation_xfer_struct bin_aix_emulation = 
d205 1
a205 1
struct bin_emulation_xfer_struct bin_aix5_emulation = 
@

