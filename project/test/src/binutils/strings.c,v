head	1.50;
access;
symbols
	binutils-2_24-branch:1.50.0.2
	binutils-2_24-branchpoint:1.50
	binutils-2_21_1:1.47
	binutils-2_23_2:1.49
	binutils-2_23_1:1.49
	binutils-2_23:1.49
	binutils-2_23-branch:1.49.0.2
	binutils-2_23-branchpoint:1.49
	binutils-2_22_branch:1.48.0.4
	binutils-2_22:1.48
	binutils-2_22-branch:1.48.0.2
	binutils-2_22-branchpoint:1.48
	binutils-2_21:1.47
	binutils-2_21-branch:1.47.0.2
	binutils-2_21-branchpoint:1.47
	binutils-2_20_1:1.45.4.1
	binutils-2_20:1.45.4.1
	binutils-arc-20081103-branch:1.42.0.6
	binutils-arc-20081103-branchpoint:1.42
	binutils-2_20-branch:1.45.0.4
	binutils-2_20-branchpoint:1.45
	dje-cgen-play1-branch:1.45.0.2
	dje-cgen-play1-branchpoint:1.45
	arc-20081103-branch:1.42.0.4
	arc-20081103-branchpoint:1.42
	binutils-2_19_1:1.42
	binutils-2_19:1.42
	binutils-2_19-branch:1.42.0.2
	binutils-2_19-branchpoint:1.42
	binutils-2_18:1.36
	binutils-2_18-branch:1.36.0.2
	binutils-2_18-branchpoint:1.36
	binutils-csl-coldfire-4_1-32:1.31.2.1
	binutils-csl-sourcerygxx-4_1-32:1.31.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.31.2.1
	binutils-csl-sourcerygxx-3_4_4-32:1.26.6.1
	binutils-csl-coldfire-4_1-30:1.31.2.1
	binutils-csl-sourcerygxx-4_1-30:1.31.2.1
	binutils-csl-coldfire-4_1-28:1.31.2.1
	binutils-csl-sourcerygxx-4_1-29:1.31.2.1
	binutils-csl-sourcerygxx-4_1-28:1.31.2.1
	binutils-csl-arm-2006q3-27:1.31.2.1
	binutils-csl-sourcerygxx-4_1-27:1.31.2.1
	binutils-csl-arm-2006q3-26:1.31.2.1
	binutils-csl-sourcerygxx-4_1-26:1.31.2.1
	binutils-csl-sourcerygxx-4_1-25:1.31.2.1
	binutils-csl-sourcerygxx-4_1-24:1.31
	binutils-csl-sourcerygxx-4_1-23:1.31
	binutils-csl-sourcerygxx-4_1-21:1.31
	binutils-csl-arm-2006q3-21:1.31
	binutils-csl-sourcerygxx-4_1-22:1.31
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.31
	binutils-csl-sourcerygxx-4_1-20:1.31
	binutils-csl-arm-2006q3-19:1.31
	binutils-csl-sourcerygxx-4_1-19:1.31
	binutils-csl-sourcerygxx-4_1-18:1.31
	binutils-csl-renesas-4_1-9:1.31
	binutils-csl-sourcerygxx-3_4_4-25:1.26.6.1
	binutils-csl-renesas-4_1-8:1.31
	binutils-csl-renesas-4_1-7:1.31
	binutils-csl-renesas-4_1-6:1.31
	binutils-csl-sourcerygxx-4_1-17:1.31
	binutils-csl-sourcerygxx-4_1-14:1.31
	binutils-csl-sourcerygxx-4_1-15:1.31
	binutils-csl-sourcerygxx-4_1-13:1.31
	binutils-2_17:1.31
	binutils-csl-sourcerygxx-4_1-12:1.31
	binutils-csl-sourcerygxx-3_4_4-21:1.31
	binutils-csl-wrs-linux-3_4_4-24:1.26
	binutils-csl-wrs-linux-3_4_4-23:1.26
	binutils-csl-sourcerygxx-4_1-9:1.31
	binutils-csl-sourcerygxx-4_1-8:1.31
	binutils-csl-sourcerygxx-4_1-7:1.31
	binutils-csl-arm-2006q1-6:1.31
	binutils-csl-sourcerygxx-4_1-6:1.31
	binutils-csl-wrs-linux-3_4_4-22:1.26
	binutils-csl-coldfire-4_1-11:1.31
	binutils-csl-sourcerygxx-3_4_4-19:1.31
	binutils-csl-coldfire-4_1-10:1.31
	binutils-csl-sourcerygxx-4_1-5:1.31
	binutils-csl-sourcerygxx-4_1-4:1.31
	binutils-csl-wrs-linux-3_4_4-21:1.26
	binutils-csl-morpho-4_1-4:1.31
	binutils-csl-sourcerygxx-3_4_4-17:1.31
	binutils-csl-wrs-linux-3_4_4-20:1.26
	binutils-2_17-branch:1.31.0.4
	binutils-2_17-branchpoint:1.31
	binutils-csl-2_17-branch:1.31.0.2
	binutils-csl-2_17-branchpoint:1.31
	binutils-csl-gxxpro-3_4-branch:1.26.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.26
	binutils-2_16_1:1.26
	binutils-csl-arm-2005q1b:1.26
	binutils-2_16:1.26
	binutils-csl-arm-2005q1a:1.26
	binutils-csl-arm-2005q1-branch:1.26.0.4
	binutils-csl-arm-2005q1-branchpoint:1.26
	binutils-2_16-branch:1.26.0.2
	binutils-2_16-branchpoint:1.26
	csl-arm-2004-q3d:1.26
	csl-arm-2004-q3:1.23
	binutils-2_15:1.21
	binutils-2_15-branchpoint:1.21
	csl-arm-2004-q1a:1.22
	csl-arm-2004-q1:1.21
	binutils-2_15-branch:1.21.0.6
	cagney_bfdfile-20040213-branch:1.21.0.4
	cagney_bfdfile-20040213-branchpoint:1.21
	cagney_bigcore-20040122-branch:1.21.0.2
	cagney_bigcore-20040122-branchpoint:1.21
	csl-arm-2003-q4:1.21
	binutils-2_14:1.19
	binutils-2_14-branch:1.19.0.2
	binutils-2_14-branchpoint:1.19
	binutils-2_13_2_1:1.17
	binutils-2_13_2:1.17
	binutils-2_13_1:1.17
	binutils-2_13:1.17
	binutils-2_13-branchpoint:1.17
	binutils-2_13-branch:1.17.0.2
	binutils-2_12_1:1.16
	binutils-2_12:1.16
	binutils-2_12-branch:1.16.0.2
	binutils-2_12-branchpoint:1.16
	cygnus_cvs_20020108_pre:1.15
	binutils-2_11_2:1.7.2.2
	binutils-2_11_1:1.7.2.2
	binutils-2_11:1.7
	x86_64versiong3:1.7
	binutils-2_11-branch:1.7.0.2
	binutils-2_10_1:1.2.2.3
	binutils-2_10:1.2.2.3
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.50
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.50
date	2013.03.06.13.40.51;	author amodra;	state Exp;
branches;
next	1.49;

1.49
date	2012.02.09.04.51.44;	author amodra;	state Exp;
branches;
next	1.48;

1.48
date	2011.03.25.17.09.08;	author nickc;	state Exp;
branches;
next	1.47;

1.47
date	2009.11.11.04.54.32;	author jkratoch;	state Exp;
branches;
next	1.46;

1.46
date	2009.09.10.13.40.44;	author nickc;	state Exp;
branches;
next	1.45;

1.45
date	2009.06.04.08.27.54;	author amodra;	state Exp;
branches
	1.45.4.1;
next	1.44;

1.44
date	2009.04.01.14.57.11;	author nickc;	state Exp;
branches;
next	1.43;

1.43
date	2008.11.26.14.24.35;	author jkratoch;	state Exp;
branches;
next	1.42;

1.42
date	2008.08.25.04.38.13;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2008.04.28.08.30.23;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	2008.02.15.10.20.09;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2008.02.08.20.58.18;	author hjl;	state Exp;
branches;
next	1.38;

1.38
date	2008.01.25.16.18.41;	author nickc;	state Exp;
branches;
next	1.37;

1.37
date	2007.10.24.03.55.46;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2007.07.05.16.54.45;	author nickc;	state Exp;
branches;
next	1.35;

1.35
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2007.02.17.13.33.54;	author jsm28;	state Exp;
branches;
next	1.33;

1.33
date	2006.09.26.16.45.25;	author hjl;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.06.09.49.56;	author nickc;	state Exp;
branches;
next	1.31;

1.31
date	2005.10.03.19.37.44;	author mmitchel;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2005.09.30.16.37.31;	author mmitchel;	state Exp;
branches;
next	1.29;

1.29
date	2005.07.05.11.43.55;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2005.06.03.21.33.49;	author wilson;	state Exp;
branches;
next	1.27;

1.27
date	2005.05.08.14.17.39;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	2004.10.18.14.04.40;	author nickc;	state Exp;
branches
	1.26.6.1;
next	1.25;

1.25
date	2004.10.18.13.44.48;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2004.10.13.14.33.51;	author jakub;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.15.01.19.13;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.14.05.49.59;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2003.11.07.12.19.34;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.14.12.20.17;	author aj;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.23.10.37.34;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2002.11.30.08.39.41;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.25.12.51.38;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.23.16.12.56;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.18.08.22.30;	author ths;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.04.14.38.47;	author ths;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.04.10.11.21;	author jakub;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.24.06.07.52;	author aj;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.19.05.33.17;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.14.11.32.25;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.27.15.42.21;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.13.06.43.58;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.02.18.55.04;	author obrien;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.05.26.13.11.56;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.07.04.34.50;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.04.14.32.29;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.03.14.10.03;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.12.26.18.49.30;	author ian;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.29.10;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.45.4.1
date	2009.09.10.13.42.10;	author nickc;	state Exp;
branches;
next	;

1.31.2.1
date	2006.10.16.20.21.23;	author nathan;	state Exp;
branches;
next	;

1.26.6.1
date	2005.08.30.19.57.32;	author mmitchel;	state Exp;
branches;
next	;

1.7.2.1
date	2001.06.07.03.12.28;	author amodra;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.06.11.10.04.28;	author amodra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.04.05.05.36.41;	author amodra;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.04.07.04.39.25;	author amodra;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2000.05.28.10.57.50;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.10;	author rth;	state Exp;
branches;
next	;


desc
@@


1.50
log
@	* strings.c (get_char): Dispense with buf[].  Instead shift
	chars into big-endian value and byte-swap later if
	little-endian.  Don't EOF check value read from object.
@
text
@/* strings -- print the strings of printable characters in files
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011, 2012
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

/* Usage: strings [options] file...

   Options:
   --all
   -a
   -		Do not scan only the initialized data section of object files.

   --print-file-name
   -f		Print the name of the file before each string.

   --bytes=min-len
   -n min-len
   -min-len	Print graphic char sequences, MIN-LEN or more bytes long,
		that are followed by a NUL or a newline.  Default is 4.

   --radix={o,x,d}
   -t {o,x,d}	Print the offset within the file before each string,
		in octal/hex/decimal.

   -o		Like -to.  (Some other implementations have -o like -to,
		others like -td.  We chose one arbitrarily.)

   --encoding={s,S,b,l,B,L}
   -e {s,S,b,l,B,L}
		Select character encoding: 7-bit-character, 8-bit-character,
		bigendian 16-bit, littleendian 16-bit, bigendian 32-bit,
		littleendian 32-bit.

   --target=BFDNAME
   -T {bfdname}
		Specify a non-default object file format.

   --help
   -h		Print the usage message on the standard output.

   --version
   -V
   -v		Print the program version number.

   Written by Richard Stallman <rms@@gnu.ai.mit.edu>
   and David MacKenzie <djm@@gnu.ai.mit.edu>.  */

#include "sysdep.h"
#include "bfd.h"
#include "getopt.h"
#include "libiberty.h"
#include "safe-ctype.h"
#include "bucomm.h"

#define STRING_ISGRAPHIC(c) \
      (   (c) >= 0 \
       && (c) <= 255 \
       && ((c) == '\t' || ISPRINT (c) || (encoding == 'S' && (c) > 127)))

#ifndef errno
extern int errno;
#endif

/* The BFD section flags that identify an initialized data section.  */
#define DATA_FLAGS (SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS)

/* Radix for printing addresses (must be 8, 10 or 16).  */
static int address_radix;

/* Minimum length of sequence of graphic chars to trigger output.  */
static int string_min;

/* TRUE means print address within file for each string.  */
static bfd_boolean print_addresses;

/* TRUE means print filename for each string.  */
static bfd_boolean print_filenames;

/* TRUE means for object files scan only the data section.  */
static bfd_boolean datasection_only;

/* TRUE if we found an initialized data section in the current file.  */
static bfd_boolean got_a_section;

/* The BFD object file format.  */
static char *target;

/* The character encoding format.  */
static char encoding;
static int encoding_bytes;

static struct option long_options[] =
{
  {"all", no_argument, NULL, 'a'},
  {"print-file-name", no_argument, NULL, 'f'},
  {"bytes", required_argument, NULL, 'n'},
  {"radix", required_argument, NULL, 't'},
  {"encoding", required_argument, NULL, 'e'},
  {"target", required_argument, NULL, 'T'},
  {"help", no_argument, NULL, 'h'},
  {"version", no_argument, NULL, 'v'},
  {NULL, 0, NULL, 0}
};

/* Records the size of a named file so that we
   do not repeatedly run bfd_stat() on it.  */

typedef struct
{
  const char *  filename;
  bfd_size_type filesize;
} filename_and_size_t;

static void strings_a_section (bfd *, asection *, void *);
static bfd_boolean strings_object_file (const char *);
static bfd_boolean strings_file (char *file);
static void print_strings (const char *, FILE *, file_ptr, int, int, char *);
static void usage (FILE *, int);
static long get_char (FILE *, file_ptr *, int *, char **);

int main (int, char **);

int
main (int argc, char **argv)
{
  int optc;
  int exit_status = 0;
  bfd_boolean files_given = FALSE;
  char *s;
  int numeric_opt = 0;

#if defined (HAVE_SETLOCALE)
  setlocale (LC_ALL, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  program_name = argv[0];
  xmalloc_set_program_name (program_name);

  expandargv (&argc, &argv);

  string_min = 4;
  print_addresses = FALSE;
  print_filenames = FALSE;
  datasection_only = TRUE;
  target = NULL;
  encoding = 's';

  while ((optc = getopt_long (argc, argv, "afhHn:ot:e:T:Vv0123456789",
			      long_options, (int *) 0)) != EOF)
    {
      switch (optc)
	{
	case 'a':
	  datasection_only = FALSE;
	  break;

	case 'f':
	  print_filenames = TRUE;
	  break;

	case 'H':
	case 'h':
	  usage (stdout, 0);

	case 'n':
	  string_min = (int) strtoul (optarg, &s, 0);
	  if (s != NULL && *s != 0)
	    fatal (_("invalid integer argument %s"), optarg);
	  break;

	case 'o':
	  print_addresses = TRUE;
	  address_radix = 8;
	  break;

	case 't':
	  print_addresses = TRUE;
	  if (optarg[1] != '\0')
	    usage (stderr, 1);
	  switch (optarg[0])
	    {
	    case 'o':
	      address_radix = 8;
	      break;

	    case 'd':
	      address_radix = 10;
	      break;

	    case 'x':
	      address_radix = 16;
	      break;

	    default:
	      usage (stderr, 1);
	    }
	  break;

	case 'T':
	  target = optarg;
	  break;

	case 'e':
	  if (optarg[1] != '\0')
	    usage (stderr, 1);
	  encoding = optarg[0];
	  break;

	case 'V':
	case 'v':
	  print_version ("strings");
	  break;

	case '?':
	  usage (stderr, 1);

	default:
	  numeric_opt = optind;
	  break;
	}
    }

  if (numeric_opt != 0)
    {
      string_min = (int) strtoul (argv[numeric_opt - 1] + 1, &s, 0);
      if (s != NULL && *s != 0)
	fatal (_("invalid integer argument %s"), argv[numeric_opt - 1] + 1);
    }
  if (string_min < 1)
    fatal (_("invalid minimum string length %d"), string_min);

  switch (encoding)
    {
    case 'S':
    case 's':
      encoding_bytes = 1;
      break;
    case 'b':
    case 'l':
      encoding_bytes = 2;
      break;
    case 'B':
    case 'L':
      encoding_bytes = 4;
      break;
    default:
      usage (stderr, 1);
    }

  bfd_init ();
  set_default_bfd_target ();

  if (optind >= argc)
    {
      datasection_only = FALSE;
      SET_BINARY (fileno (stdin));
      print_strings ("{standard input}", stdin, 0, 0, 0, (char *) NULL);
      files_given = TRUE;
    }
  else
    {
      for (; optind < argc; ++optind)
	{
	  if (strcmp (argv[optind], "-") == 0)
	    datasection_only = FALSE;
	  else
	    {
	      files_given = TRUE;
	      exit_status |= strings_file (argv[optind]) == FALSE;
	    }
	}
    }

  if (!files_given)
    usage (stderr, 1);

  return (exit_status);
}

/* Scan section SECT of the file ABFD, whose printable name is in
   ARG->filename and whose size might be in ARG->filesize.  If it
   contains initialized data set `got_a_section' and print the
   strings in it.

   FIXME: We ought to be able to return error codes/messages for
   certain conditions.  */

static void
strings_a_section (bfd *abfd, asection *sect, void *arg)
{
  filename_and_size_t * filename_and_sizep;
  bfd_size_type *filesizep;
  bfd_size_type sectsize;
  void *mem;
     
  if ((sect->flags & DATA_FLAGS) != DATA_FLAGS)
    return;

  sectsize = bfd_get_section_size (sect);
     
  if (sectsize <= 0)
    return;

  /* Get the size of the file.  This might have been cached for us.  */
  filename_and_sizep = (filename_and_size_t *) arg;
  filesizep = & filename_and_sizep->filesize;

  if (*filesizep == 0)
    {
      struct stat st;
      
      if (bfd_stat (abfd, &st))
	return;

      /* Cache the result so that we do not repeatedly stat this file.  */
      *filesizep = st.st_size;
    }

  /* Compare the size of the section against the size of the file.
     If the section is bigger then the file must be corrupt and
     we should not try dumping it.  */
  if (sectsize >= *filesizep)
    return;

  mem = xmalloc (sectsize);

  if (bfd_get_section_contents (abfd, sect, mem, (file_ptr) 0, sectsize))
    {
      got_a_section = TRUE;

      print_strings (filename_and_sizep->filename, NULL, sect->filepos,
		     0, sectsize, (char *) mem);
    }

  free (mem);
}

/* Scan all of the sections in FILE, and print the strings
   in the initialized data section(s).

   Return TRUE if successful,
   FALSE if not (such as if FILE is not an object file).  */

static bfd_boolean
strings_object_file (const char *file)
{
  filename_and_size_t filename_and_size;
  bfd *abfd;

  abfd = bfd_openr (file, target);

  if (abfd == NULL)
    /* Treat the file as a non-object file.  */
    return FALSE;

  /* This call is mainly for its side effect of reading in the sections.
     We follow the traditional behavior of `strings' in that we don't
     complain if we don't recognize a file to be an object file.  */
  if (!bfd_check_format (abfd, bfd_object))
    {
      bfd_close (abfd);
      return FALSE;
    }

  got_a_section = FALSE;
  filename_and_size.filename = file;
  filename_and_size.filesize = 0;
  bfd_map_over_sections (abfd, strings_a_section, & filename_and_size);

  if (!bfd_close (abfd))
    {
      bfd_nonfatal (file);
      return FALSE;
    }

  return got_a_section;
}

/* Print the strings in FILE.  Return TRUE if ok, FALSE if an error occurs.  */

static bfd_boolean
strings_file (char *file)
{
  struct stat st;

  /* get_file_size does not support non-S_ISREG files.  */

  if (stat (file, &st) < 0)
    {
      if (errno == ENOENT)
	non_fatal (_("'%s': No such file"), file);
      else
	non_fatal (_("Warning: could not locate '%s'.  reason: %s"),
		   file, strerror (errno));
      return FALSE;
    }

  /* If we weren't told to scan the whole file,
     try to open it as an object file and only look at
     initialized data sections.  If that fails, fall back to the
     whole file.  */
  if (!datasection_only || !strings_object_file (file))
    {
      FILE *stream;

      stream = fopen (file, FOPEN_RB);
      if (stream == NULL)
	{
	  fprintf (stderr, "%s: ", program_name);
	  perror (file);
	  return FALSE;
	}

      print_strings (file, stream, (file_ptr) 0, 0, 0, (char *) 0);

      if (fclose (stream) == EOF)
	{
	  fprintf (stderr, "%s: ", program_name);
	  perror (file);
	  return FALSE;
	}
    }

  return TRUE;
}

/* Read the next character, return EOF if none available.
   Assume that STREAM is positioned so that the next byte read
   is at address ADDRESS in the file.

   If STREAM is NULL, do not read from it.
   The caller can supply a buffer of characters
   to be processed before the data in STREAM.
   MAGIC is the address of the buffer and
   MAGICCOUNT is how many characters are in it.  */

static long
get_char (FILE *stream, file_ptr *address, int *magiccount, char **magic)
{
  int c, i;
  long r = 0;

  for (i = 0; i < encoding_bytes; i++)
    {
      if (*magiccount)
	{
	  (*magiccount)--;
	  c = *(*magic)++;
	}
      else
	{
	  if (stream == NULL)
	    return EOF;

	  /* Only use getc_unlocked if we found a declaration for it.
	     Otherwise, libc is not thread safe by default, and we
	     should not use it.  */

#if defined(HAVE_GETC_UNLOCKED) && HAVE_DECL_GETC_UNLOCKED
	  c = getc_unlocked (stream);
#else
	  c = getc (stream);
#endif
	  if (c == EOF)
	    return EOF;
	}

      (*address)++;
      r = (r << 8) | (c & 0xff);
    }

  switch (encoding)
    {
    default:
      break;
    case 'l':
      r = ((r & 0xff) << 8) | ((r & 0xff00) >> 8);
      break;
    case 'L':
      r = (((r & 0xff) << 24) | ((r & 0xff00) << 8)
	   | ((r & 0xff0000) >> 8) | ((r & 0xff000000) >> 24));
      break;
    }

  return r;
}

/* Find the strings in file FILENAME, read from STREAM.
   Assume that STREAM is positioned so that the next byte read
   is at address ADDRESS in the file.
   Stop reading at address STOP_POINT in the file, if nonzero.

   If STREAM is NULL, do not read from it.
   The caller can supply a buffer of characters
   to be processed before the data in STREAM.
   MAGIC is the address of the buffer and
   MAGICCOUNT is how many characters are in it.
   Those characters come at address ADDRESS and the data in STREAM follow.  */

static void
print_strings (const char *filename, FILE *stream, file_ptr address,
	       int stop_point, int magiccount, char *magic)
{
  char *buf = (char *) xmalloc (sizeof (char) * (string_min + 1));

  while (1)
    {
      file_ptr start;
      int i;
      long c;

      /* See if the next `string_min' chars are all graphic chars.  */
    tryline:
      if (stop_point && address >= stop_point)
	break;
      start = address;
      for (i = 0; i < string_min; i++)
	{
	  c = get_char (stream, &address, &magiccount, &magic);
	  if (c == EOF)
	    {
	      free (buf);
	      return;
	    }
	  if (! STRING_ISGRAPHIC (c))
	    /* Found a non-graphic.  Try again starting with next char.  */
	    goto tryline;
	  buf[i] = c;
	}

      /* We found a run of `string_min' graphic characters.  Print up
	 to the next non-graphic character.  */

      if (print_filenames)
	printf ("%s: ", filename);
      if (print_addresses)
	switch (address_radix)
	  {
	  case 8:
#if __STDC_VERSION__ >= 199901L || (defined(__GNUC__) && __GNUC__ >= 2)
	    if (sizeof (start) > sizeof (long))
	      {
#ifndef __MSVCRT__
	        printf ("%7llo ", (unsigned long long) start);
#else
	        printf ("%7I64o ", (unsigned long long) start);
#endif
	      }
	    else
#elif !BFD_HOST_64BIT_LONG
	    if (start != (unsigned long) start)
	      printf ("++%7lo ", (unsigned long) start);
	    else
#endif
	      printf ("%7lo ", (unsigned long) start);
	    break;

	  case 10:
#if __STDC_VERSION__ >= 199901L || (defined(__GNUC__) && __GNUC__ >= 2)
	    if (sizeof (start) > sizeof (long))
	      {
#ifndef __MSVCRT__
	        printf ("%7lld ", (unsigned long long) start);
#else
	        printf ("%7I64d ", (unsigned long long) start);
#endif
	      }
	    else
#elif !BFD_HOST_64BIT_LONG
	    if (start != (unsigned long) start)
	      printf ("++%7ld ", (unsigned long) start);
	    else
#endif
	      printf ("%7ld ", (long) start);
	    break;

	  case 16:
#if __STDC_VERSION__ >= 199901L || (defined(__GNUC__) && __GNUC__ >= 2)
	    if (sizeof (start) > sizeof (long))
	      {
#ifndef __MSVCRT__
	        printf ("%7llx ", (unsigned long long) start);
#else
	        printf ("%7I64x ", (unsigned long long) start);
#endif
	      }
	    else
#elif !BFD_HOST_64BIT_LONG
	    if (start != (unsigned long) start)
	      printf ("%lx%8.8lx ", (unsigned long) (start >> 32),
		      (unsigned long) (start & 0xffffffff));
	    else
#endif
	      printf ("%7lx ", (unsigned long) start);
	    break;
	  }

      buf[i] = '\0';
      fputs (buf, stdout);

      while (1)
	{
	  c = get_char (stream, &address, &magiccount, &magic);
	  if (c == EOF)
	    break;
	  if (! STRING_ISGRAPHIC (c))
	    break;
	  putchar (c);
	}

      putchar ('\n');
    }
  free (buf);
}

static void
usage (FILE *stream, int status)
{
  fprintf (stream, _("Usage: %s [option(s)] [file(s)]\n"), program_name);
  fprintf (stream, _(" Display printable strings in [file(s)] (stdin by default)\n"));
  fprintf (stream, _(" The options are:\n\
  -a - --all                Scan the entire file, not just the data section\n\
  -f --print-file-name      Print the name of the file before each string\n\
  -n --bytes=[number]       Locate & print any NUL-terminated sequence of at\n\
  -<number>                   least [number] characters (default 4).\n\
  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\n\
  -o                        An alias for --radix=o\n\
  -T --target=<BFDNAME>     Specify the binary file format\n\
  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\n\
                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\n\
  @@<file>                   Read options from <file>\n\
  -h --help                 Display this information\n\
  -v -V --version           Print the program's version number\n"));
  list_supported_targets (program_name, stream);
  if (REPORT_BUGS_TO[0] && status == 0)
    fprintf (stream, _("Report bugs to %s\n"), REPORT_BUGS_TO);
  exit (status);
}
@


1.49
log
@	* sysdep.h: Include sys/stat.h here.
	* ar.c: Don't include headers already included by sysdep.h.
	* bucomm.c: Likewise.
	* budbg.h: Likewise.
	* dlltool.h: Likewise.
	* elfedit.c: Likewise.
	* nlmconv.c: Likewise.
	* objcopy.c: Likewise.
	* objdump.c: Likewise.
	* objdump.h: Likewise.
	* readelf.c: Likewise.
	* rename.c: Likewise.
	* resrc.c: Likewise.
	* strings.c: Likewise.
	* windres.c: Likewise.
	* od-macho.c: Ensure #include sysdep.h is first.
	* od-xcoff.c: Likewise.
	* dllwrap.c: Remove alloca pragma handled by sysdep.h, and
	remove duplicate headers.
	* dlltool.c: Likewise and ensure #include sysdep.h is first.
@
text
@d458 1
a458 2
  long r = EOF;
  unsigned char buf[4];
d486 1
a486 1
      buf[i] = c;
d491 1
a491 6
    case 'S':
    case 's':
      r = buf[0];
      break;
    case 'b':
      r = (buf[0] << 8) | buf[1];
d494 1
a494 5
      r = buf[0] | (buf[1] << 8);
      break;
    case 'B':
      r = ((long) buf[0] << 24) | ((long) buf[1] << 16) |
	((long) buf[2] << 8) | buf[3];
d497 2
a498 2
      r = buf[0] | ((long) buf[1] << 8) | ((long) buf[2] << 16) |
	((long) buf[3] << 24);
a501 3
  if (r == EOF)
    return 0;

@


1.48
log
@	* strings.c (print_strings): Plug memory leak.
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011
a67 1
#include <sys/stat.h>
@


1.47
log
@binutils/
	* configure.in: Stop checking for fopen64 and stat64.
	* strings.c (file_off, file_open, statbuf, file_stat): Remove.
	(strings_file): Change file_off to file_ptr, file_open to fopen,
	statbuf to struct stat and file_stat to stat.
	(get_char): Change parameter type file_off * to file_ptr *.
	(print_strings): Change parameter and variable `start' type file_off to
	file_ptr.
	* configure: Regenerate.
	* config.in: Regenerate.
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
d552 4
a555 1
	    return;
d644 1
@


1.46
log
@        Updated soruces in binutils/* to compile cleanly with -Wc++-compat.

        * binutils/addr2line.c (slurp_symtab): Fix casts. Introduce
        variable minisyms to avoid aliasing varning.
        * binutils/ar.c: Add casts. (normalize): Use name del instead of
        delete. (display_target_list,display_info_table): Change loop
        counter variable a to int.
        * binutils/bucomm.c: Add casts.
        * binutils/debug.c: Update function to use new names. (struct
        debug_baseclass): Rename member from virtual to
        is_virtual. (struct debug_type_s,struct debug_field_s,struct
        debug_baseclass_s,struct debug_method_s,struct
        debug_method_variant_s,struct debug_type_s): Rename struct from
        avoid name collision.
        * /binutils/debug.h: Use new struct names.
        * binutils/dwarf.c: Add casts. (free_debug_memory): Change loop
        counter variable a to int.
        * binutils/ieee.c: Add casts. (enum ieee_var_kind): Move to top
        level. (ieee_class_baseclass): Rename parameter virtual to
        is_virtual. (ieee_class_method_var): Rename variable virtual to
        is_virtual.
        * binutils/nm.c: Add casts.
        * binutils/objcopy.c: Add casts. (copy_archive): Rename variable
        delete to del.
        * binutils/objdump.c: Add casts. (dump_dwarf_section): Change loop
        counter variable i to int.
        * binutils/prdbg.c: Add
        casts. (pr_class_baseclass,tg_class_baseclass): Rename parameters
        virtual to is_virtual.
        * binutils/readelf.c: Add casts. (struct
        ia64_unw_table_entry,struct hppa_unw_table_entry): Move to top
        level.
        * binutils/size.c: Add casts.
        * binutils/stabs.c (parse_stab_type, parse_stab_range_type)
        (parse_stab_cpp_abbrev): Rename parameter from typename to
        type_name. (parse_stab_baseclasses): Rename variable virtual to
        is_virtual.
        * binutils/strings.c: Add casts.
        * binutils/wrstabs.c (stab_class_baseclass): Rename parameter
        virtual to is_virtual.
@
text
@a82 15
#ifdef HAVE_FOPEN64
typedef off64_t file_off;
#define file_open(s,m) fopen64(s, m)
#else
typedef off_t file_off;
#define file_open(s,m) fopen(s, m)
#endif
#ifdef HAVE_STAT64
typedef struct stat64 statbuf;
#define file_stat(f,s) stat64(f, s)
#else
typedef struct stat statbuf;
#define file_stat(f,s) stat(f, s)
#endif

d133 1
a133 1
static void print_strings (const char *, FILE *, file_off, int, int, char *);
d135 1
a135 1
static long get_char (FILE *, file_off *, int *, char **);
d402 3
a404 1
  statbuf st;
d406 1
a406 1
  if (file_stat (file, &st) < 0)
d424 1
a424 1
      stream = file_open (file, FOPEN_RB);
d432 1
a432 1
      print_strings (file, stream, (file_off) 0, 0, 0, (char *) 0);
d456 1
a456 1
get_char (FILE *stream, file_off *address, int *magiccount, char **magic)
d532 1
a532 1
print_strings (const char *filename, FILE *stream, file_off address,
d539 1
a539 1
      file_off start;
@


1.45
log
@	* strings.c (main): Delay parsing of decimal digits.
@
text
@d365 1
a365 1
		     0, sectsize, mem);
@


1.45.4.1
log
@        Update soruces to compile cleanly with -Wc++-compat:

        * addr2line.c (slurp_symtab): Fix casts. Introduce variable
        minisyms to avoid aliasing varning.
        * ar.c: Add casts.
        (normalize): Use name del instead of delete.
        (display_target_list,display_info_table): Change loop counter
        variable a to int.
        * bucomm.c: Add casts.
        * debug.c: Update function to use new names.
        (struct debug_baseclass): Rename member from virtual to
        is_virtual.
        (struct debug_type_s, struct debug_field_s, struct
        debug_baseclass_s, struct debug_method_s, struct
        debug_method_variant_s, struct debug_type_s): Rename struct from
        avoid name collision.
        * debug.h: Use new struct names.
        * dwarf.c: Add casts.
        (free_debug_memory): Change loop counter variable a to int.
        * ieee.c: Add casts.
        (enum ieee_var_kind): Move to top level.
        (ieee_class_baseclass): Rename parameter virtual to is_virtual.
        (ieee_class_method_var): Rename variable virtual to is_virtual.
        * nm.c: Add casts.
        * objcopy.c: Add casts.
        (copy_archive): Rename variable delete to del.
        * objdump.c: Add casts.
        (dump_dwarf_section): Change loop counter variable i to int.
        * prdbg.c: Add casts.
        (pr_class_baseclass,tg_class_baseclass): Rename parameters virtual
        to is_virtual.
        * readelf.c: Add casts.
        (struct ia64_unw_table_entry,struct hppa_unw_table_entry): Move to
        top level.
        * size.c: Add casts.
        * stabs.c (parse_stab_type, parse_stab_range_type,
        (parse_stab_cpp_abbrev): Rename parameter from typename to
        type_name.
        (parse_stab_baseclasses): Rename variable virtual to is_virtual.
        * strings.c: Add casts.
        * wrstabs.c (stab_class_baseclass): Rename parameter virtual to
        is_virtual.
@
text
@d365 1
a365 1
		     0, sectsize, (char *) mem);
@


1.44
log
@        PR 9972
        * doc/binutils.texi (strings): Document the -V alias for the
        --version option.
        * strings.c (usage): Likewise.
@
text
@d161 1
d251 1
a251 3
	  string_min = (int) strtoul (argv[optind - 1] + 1, &s, 0);
	  if (s != NULL && *s != 0)
	    fatal (_("invalid integer argument %s"), argv[optind - 1] + 1);
d256 6
@


1.43
log
@	* strings.c (main): New variable `s'.  Have string_min parsing
	call fatal for invalid input strings.
@
text
@d3 2
a4 1
   2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
d57 1
d668 1
a668 1
  -v --version              Print the program's version number\n"));
@


1.42
log
@	* sysdep.h: Include "binary-io.h".
	(O_BINARY): Don't define here.
	* bin2c.c (O_BINARY, O_TEXT, SET_BINARY): Don't define here.
	* strings.c: Likewise.
	(main): Remove #ifdef SET_BINARY.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
@
text
@d158 1
d196 3
a198 1
	  string_min = (int) strtoul (optarg, NULL, 0);
d248 3
a250 1
	  string_min = (int) strtoul (argv[optind - 1] + 1, NULL, 0);
@


1.41
log
@                PR binutils/6449
                * objdump.c (slurp_file): Open the file in binary mode.
                * ar.c: Remove conditional definition of O_BINARY.
                * bin2.c: Likewise.
                * rename.c: Likewise.
                * strings.c: Likewise.
                * sysdep.h: Add conditional definition of O_BINARY.
@
text
@a68 12
/* Some platforms need to put stdin into binary mode, to read
    binary files.  */
#ifdef HAVE_SETMODE
#ifdef _O_BINARY
#define setmode _setmode
#endif
#if O_BINARY
#include <io.h>
#define SET_BINARY(f) do { if (!isatty (f)) setmode (f, O_BINARY); } while (0)
#endif
#endif

a276 1
#ifdef SET_BINARY
a277 1
#endif
@


1.40
log
@        PR binutils/5713
        * strings.c (integer_arg): Delete function.
        (string_min): Initialise to 4.
        (main): Use strtoul to parse integer arguments.
        Move check for an invalid string length to after all the arguments
        have been parsed.
        (usage): Use indentation to indicate that -<n> is a another form
        of the --bytes= command line option.
@
text
@a71 1
#ifndef O_BINARY
a72 1
#define O_BINARY _O_BINARY
a73 3
#else
#define O_BINARY 0
#endif
d77 1
a77 1
#define SET_BINARY(f) do { if (!isatty (f)) setmode (f,O_BINARY); } while (0)
@


1.39
log
@2008-02-08  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/5713
	* strings.c (main): Set string_min to 4 if it is <= 0.
@
text
@a162 1
static int integer_arg (char *s);
d187 1
a187 1
  string_min = -1;
d212 1
a212 3
	  string_min = integer_arg (optarg);
	  if (string_min < 1)
	    fatal (_("invalid number %s"), optarg);
d262 1
a262 4
	  if (string_min < 0)
	    string_min = optc - '0';
	  else
	    string_min = string_min * 10 + optc - '0';
d267 2
a268 2
  if (string_min <= 0)
    string_min = 4;
a662 45
/* Parse string S as an integer, using decimal radix by default,
   but allowing octal and hex numbers as in C.  */

static int
integer_arg (char *s)
{
  int value;
  int radix = 10;
  char *p = s;
  int c;

  if (*p != '0')
    radix = 10;
  else if (*++p == 'x')
    {
      radix = 16;
      p++;
    }
  else
    radix = 8;

  value = 0;
  while (((c = *p++) >= '0' && c <= '9')
	 || (radix == 16 && (c & ~40) >= 'A' && (c & ~40) <= 'Z'))
    {
      value *= radix;
      if (c >= '0' && c <= '9')
	value += c - '0';
      else
	value += (c & ~40) - 'A';
    }

  if (c == 'b')
    value *= 512;
  else if (c == 'B')
    value *= 1024;
  else
    p--;

  if (*p)
    fatal (_("invalid integer argument %s"), s);

  return value;
}

d672 1
a672 1
  -<number>                 least [number] characters (default 4).\n\
@


1.38
log
@Add mingw I64 support for printing long and long long values
@
text
@d273 1
a273 1
  if (string_min < 0)
@


1.37
log
@	* strings.c (print_strings): Don't use %L, use %ll in printf
	format strings.
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
d596 7
a602 1
	      printf ("%7llo ", (unsigned long long) start);
d615 7
a621 1
	      printf ("%7lld ", (unsigned long long) start);
d634 7
a640 1
	      printf ("%7llx ", (unsigned long long) start);
@


1.36
log
@Change sources over to using GPLv3
@
text
@d596 1
a596 1
	      printf ("%7Lo ", (unsigned long long) start);
d598 1
a598 2
#else
# if !BFD_HOST_64BIT_LONG
a601 1
# endif
d609 1
a609 1
	      printf ("%7Ld ", (unsigned long long) start);
d611 1
a611 2
#else
# if !BFD_HOST_64BIT_LONG
a614 1
# endif
d622 1
a622 1
	      printf ("%7Lx ", (unsigned long long) start);
d624 1
a624 2
#else
# if !BFD_HOST_64BIT_LONG
a628 1
# endif
@


1.35
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d7 1
a7 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.34
log
@top level:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac (TOPLEVEL_CONFIGURE_ARGUMENTS): Fix quoting.
	* configure: Regenerate.

bfd:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion): New option.
	* configure: Regenerate.
	* Makefile.am (bfdver.h): Substitute for @@bfd_version_package@@.
	* Makefile.in: Regenerate.
	* version.h (BFD_VERSION_STRING): Define using
	@@bfd_version_package@@.

bfd/doc:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.in: Regenerate.

binutils:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* bucomm.h: Remove include of bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* ar.c (usage): Pass s to list_supported_targets.  Don't print
	empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* cxxfilt.c (usage): Print bug url when giving help.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c ((usage): Likewise. Add STREAM argument.  Adjust
	callers.
	* size.c (usage): Don't print empty REPORT_BUGS_TO.
	* srconv.c (show_usage): Likewise.
	* strings.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.

gas:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* dep-in.sed: Remove bin-bugs.h.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	(DEP_INCLUDES): Likewise.
	($(OBJS)): No longer depend on bin-bugs.h.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove include of bin-bugs.h.

gprof:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion, --with-bugurl): New options.
	* configure: Regenerate.
	* Makefile.am (PKGVERSION, REPORT_BUGS_TO): Define.
	(INCLUDES): Define PKGVERSION and REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	(main): Include PKGVERSION in version output.
	* gprof.h: Remove include of bin-bugs.h.

include:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* bin-bugs.h: Remove.

ld:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.
@
text
@d61 1
a61 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
a62 1
#include <stdio.h>
a63 2
#include <errno.h>
#include "bucomm.h"
d67 1
@


1.33
log
@2006-09-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/3257
	* strings.c (main): Handle "-T format".
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
d725 1
a725 1
  if (status == 0)
@


1.32
log
@PR binutils/2879
* doc/binutils.texi: Document -T shorthand for --target switch.
* strings.c: Update comment to include -T option.
@
text
@d199 1
a199 1
  while ((optc = getopt_long (argc, argv, "afhHn:ot:e:Vv0123456789",
@


1.31
log
@	* addr2line.c (usage): Document @@file.
	* ar.c (usage): Likewise.
	* coffdump (usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c (usage): Likewise.
	* size.c (usage): Likeise.
	* srconv.c (usage): Likewise.
	* strings.c (usage): Likewise.
	* windres.c (usage): Likewise.
	* doc/binutils.texi: Add section on common options.
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d49 1
@


1.31.2.1
log
@	binutils/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* bucomm.h: Remove bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* nlmconv.c (show_usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* size.c (usage): Likewise.
	* srconv.c (show_usage): Likewise.
	* string.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.
	* readelf (usage): Likewise. Add STREAM argument.  Adjust callers.

	gas/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove bin-bugs.h.

	ld/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* ld.h: Remove bin-bugs.h
	* lexsup.c (help):  Don't print empty REPORT_BUGS_TO.

	gprof/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(PKGVERSION): Define.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	* gprof.h: Remove bin-bugs.h

	include/
	* bin-bugs.h: Remove.
@
text
@d724 1
a724 1
  if (REPORT_BUGS_TO[0] && status == 0)
@


1.30
log
@	* addr2line.c (main): Likewise.
	* ar.c (main): Likewise.
	* coffdump.c (main): Likewise.
	* cxxfilt.c (main): Likewise.
	* dlltool.c (main): Likewise.
	* dllwrap.c (main): Likewise.
	* nlmconv.c (main): Likewise.
	* nm.c (main): Likewise.
	* objcopy.c (main): Likewise.
	* objdump.c (main): Likewise.
	* readelf.c (main): Likewise.
	* size.c (main): Likeiwse.
	* srcconv.c (main): Likewise.
	* strings.c (main): Likewise.
	* sysdump.c (main): Likewise.
	* sysinfo.c (main): Likewise.
	* windres.c (main): Likewise.

	* ldmain.c (main): Use expandargv.

	* gprof.c (main): Use expandargv.

	* as.c (main): Use expandargv.
@
text
@d720 1
@


1.29
log
@Add check to avoid corrupt input files whose section sizes are greater than
the size of the input file.
@
text
@d188 3
@


1.28
log
@Patch from Steve Ellcey for hpux build failure.
* configure.in: Check for getc_unlocked prototype.
* configure: Regenerate.
* config.in: Regenerate.
* strings.c (get_char): Only call getc_unlocked if we have seen a
prototype.
@
text
@d3 1
a3 1
   2002, 2003, 2004 Free Software Foundation, Inc.
d154 9
d326 7
a332 3
/* Scan section SECT of the file ABFD, whose printable name is FILE.
   If it contains initialized data,
   set `got_a_section' and print the strings in it.  */
d335 1
a335 1
strings_a_section (bfd *abfd, asection *sect, void *filearg)
d337 23
a359 1
  const char *file = (const char *) filearg;
d361 13
a373 1
  if ((sect->flags & DATA_FLAGS) == DATA_FLAGS)
d375 1
a375 2
      bfd_size_type sz = bfd_get_section_size (sect);
      void *mem = xmalloc (sz);
d377 2
a378 6
      if (bfd_get_section_contents (abfd, sect, mem, (file_ptr) 0, sz))
	{
	  got_a_section = TRUE;
	  print_strings (file, (FILE *) NULL, sect->filepos, 0, sz, mem);
	}
      free (mem);
d380 2
d393 4
a396 1
  bfd *abfd = bfd_openr (file, target);
d412 3
a414 1
  bfd_map_over_sections (abfd, strings_a_section, (void *) file);
@


1.27
log
@Update FSF address
@
text
@d450 6
a455 1
#ifdef HAVE_GETC_UNLOCKED
@


1.26
log
@strings.c (usage): Place radix values for -t option into the correct order.

objcopy.c (add_redefine_syms_file): Change error messages to use
  <filename>:<linenumber>: format for easier parsing by automatic tools.

srconv.c (show_usage): Fix spelling typo.

windres.c (format_from_filename): Suggest the use of -J instead	of -I if the
  file type cannot be determined.
@
text
@d17 2
a18 2
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.26.6.1
log
@	* ld/ldmain.c (main): Use expandargv.
	* binutils/addr2line.c (main): Likewise.
	* binutils/ar.c (main): Likewise.
	* binutils/coffdump.c (main): Likewise.
	* binutils/cxxfilt.c (main): Likewise.
	* binutils/dlltool.c (main): Likewise.
	* binutils/dllwrap.c (main): Likewise.
	* binutils/nlmconv.c (main): Likewise.
	* binutils/nm.c (main): Likewise.
	* binutils/objcopy.c (main): Likewise.
	* binutils/objdump.c (main): Likewise.
	* binutils/readelf.c (main): Likewise.
	* binutils/size.c (main): Likeiwse.
	* binutils/srcconv.c (main): Likewise.
	* binutils/strings.c (main): Likewise.
	* binutils/sysdump.c (main): Likewise.
	* binutils/sysinfo.c (main): Likewise.
	* binutils/windres.c (main): Likewise.

	* include/libiberty.h (expandargv): New function.
	* libiberty/argv.c (safe-ctype.h): Include it.
	(ISBLANK): Remove.
	(stdio.h): Include.
	(expandargv): New function.
	* libiberty/Makefile.in: Regenerated.
@
text
@a178 3

  expandargv (&argc, &argv);

@


1.25
log
@strings.c: Include <sys/stat.h>.
@
text
@d658 1
a658 1
  -t --radix={o,x,d}        Print the location of the string in base 8, 10 or 16\n\
@


1.24
log
@	* strings.c (statbuf): New typedef.
	(file_stat): Define.
	(strings_object_file): Avoid using get_file_size, instead do the
	checks here, using file_stat.
	* configure.in (HAVE_STAT64): New test.
	* configure: Rebuilt.
	* config.in: Rebuilt.
@
text
@d70 1
@


1.23
log
@	* objcopy.c (copy_section): Use bfd_get_section_size instead of
	_raw_size or bfd_get_section_size_before_reloc.  Don't set reloc_done.
	(compare_section_lma): Likewise.
	* addr2line.c (find_address_in_section): Likewise.
	* coffgrok.c (do_sections_p1): Likewise.
	* dlltool.c (scan_drectve_symbols): Likewise.
	* nlmconv.c (main): Likewise.
	(copy_sections): Likewise.
	(powerpc_mangle_relocs): Likewise.
	* objdump.c (disassemble_section): Likewise.
	* prdbg.c (find_address_in_section): Likewise.
	* size.c (berkeley_sum): Likewise.
	* srconv.c (wr_ob): Likewise.
	* strings.c (strings_a_section): Likewise.
@
text
@d107 7
d380 11
a390 2
  if (get_file_size (file) < 1)
    return FALSE;
@


1.22
log
@	* strings.c (print_strings): Cast file_off to unsigned long in
	printf arg list.
@
text
@d320 1
a320 1
      bfd_size_type sz = bfd_get_section_size_before_reloc (sect);
@


1.21
log
@Use consistent error messages for missing files.
Detect directories where an ordinary file is expected.
@
text
@d3 1
a3 1
   2002, 2003 Free Software Foundation, Inc.
d515 1
a515 1
         to the next non-graphic character.  */
d560 2
a561 1
	      printf ("%lx%8.8lx ", start >> 32, start & 0xffffffff);
@


1.20
log
@	* addr2line.c: Convert to ISO C90 prototypes, change PTR, remove
	unneeded (void *) casts.
	* ar.c: Likewise.
	* arlex.l: Likewise.
	* arparse.y: Likewise.
	* arsup.c: Likewise.
	* binemul.c: Likewise.
	* binemul.h: Likewise.
	* bucomm.c: Likewise.
	* bucomm.h: Likewise.
	* budbg.h: Likewise.
	* budemang.c: Likewise.
	* budemang.h: Likewise.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* cxxfilt.c: Likewise.
	* debug.c: Likewise.
	* debug.h: Likewise.
	* deflex.l: Likewise.
	* dlltool.c: Likewise.
	* dlltool.h: Likewise.
	* dllwrap.c: Likewise.
	* emul_aix.c: Likewise.
	* filemode.c: Likewise.
	* ieee.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmconv.h: Likewise.
	* nlmheader.y: Likewise.
	* nm.c: Likewise.
	* prdbg.c: Likewise.
	* rclex.l: Likewise.
	* rcparse.y: Likewise.
	* rdcoff.c: Likewise.
	* rddbg.c: Likewise.
	* rename.c: Likewise.
	* resbin.c: Likewise.
	* rescoff.c: Likewise.
	* resrc.c: Likewise.
	* size.c: Likewise.
	* srconv.c: Likewise.
	* stabs.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* sysinfo.y: Likewise.
	* syslex.l: Likewise.
	* unwind-ia64.c: Likewise.
	* unwind-ia64.h: Likewise.
	* version.c: Likewise.
	* windres.c: Likewise.
	* windres.h: Likewise.
	* winduni.c: Likewise.
	* wrstabs.c: Likewise.
@
text
@d373 3
@


1.19
log
@Add support for 'S' encoding to strings - display 8-bit characters.
@
text
@d3 1
a3 1
   2002 Free Software Foundation, Inc.
d146 7
a152 14
static void strings_a_section
  PARAMS ((bfd *, asection *, PTR));
static bfd_boolean strings_object_file
  PARAMS ((const char *));
static bfd_boolean strings_file
  PARAMS ((char *file));
static int integer_arg
  PARAMS ((char *s));
static void print_strings
  PARAMS ((const char *, FILE *, file_off, int, int, char *));
static void usage
  PARAMS ((FILE *, int));
static long get_char
  PARAMS ((FILE *, file_off *, int *, char **));
d154 1
a154 2
int main
  PARAMS ((int, char **));
d157 1
a157 3
main (argc, argv)
     int argc;
     char **argv;
d314 1
a314 4
strings_a_section (abfd, sect, filearg)
     bfd *abfd;
     asection *sect;
     PTR filearg;
d321 1
a321 1
      PTR mem = xmalloc (sz);
d339 1
a339 2
strings_object_file (file)
     const char *file;
d357 1
a357 1
  bfd_map_over_sections (abfd, strings_a_section, (PTR) file);
d371 1
a371 2
strings_file (file)
     char *file;
d413 1
a413 5
get_char (stream, address, magiccount, magic)
     FILE *stream;
     file_off *address;
     int *magiccount;
     char **magic;
d484 2
a485 7
print_strings (filename, stream, address, stop_point, magiccount, magic)
     const char *filename;
     FILE *stream;
     file_off address;
     int stop_point;
     int magiccount;
     char *magic;
d586 1
a586 2
integer_arg (s)
     char *s;
d628 1
a628 3
usage (stream, status)
     FILE *stream;
     int status;
@


1.18
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d42 5
a46 4
   --encoding={s,b,l,B,L}
   -e {s,b,l,B,L}
		Select character encoding: single-byte, bigendian 16-bit,
		littleendian 16-bit, bigendian 32-bit, littleendian 32-bit
d84 1
a84 1
#define SET_BINARY(f) do { if (!isatty(f)) setmode(f,O_BINARY); } while (0)
d88 4
a91 1
#define isgraphic(c) (ISPRINT (c) || (c) == '\t')
d102 1
a102 1
#define file_open(s,m) fopen64(s,m)
d105 1
a105 1
#define file_open(s,m) fopen(s,m)
d155 1
a155 2
  PARAMS ((const char *filename, FILE *stream, file_off address,
	   int stop_point, int magiccount, char *magic));
d157 1
a157 1
  PARAMS ((FILE *stream, int status));
d159 1
a159 1
  PARAMS ((FILE *stream, file_off *address, int *magiccount, char **magic));
d208 1
a208 3
	    {
	      fatal (_("invalid number %s"), optarg);
	    }
d271 1
d335 1
d358 2
a359 4
    {
      /* Treat the file as a non-object file.  */
      return FALSE;
    }
d464 1
d529 1
a529 1
	  if (c > 255 || c < 0 || !isgraphic (c))
d597 1
a597 1
	  if (c > 255 || c < 0 || !isgraphic (c))
d647 2
a648 3
    {
      fatal (_("invalid integer argument %s"), s);
    }
d667 2
a668 2
  -e --encoding={s,b,l,B,L} Select character size and endianness:\n\
                            s = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\n\
@


1.17
log
@	* arlex.l: Use #include "" instead of <> for local header files.
	* coffdump.c: Likewise.
	* coffgrok.c: Likewise.
	* nlmconv.c: Likewise.
	* nlmheader.y: Likewise.
	* srconv.c: Likewise.
	* strings.c: Likewise.
	* sysdump.c: Likewise.
	* unwind-ia64.h: Likewise.
	* windres.h: Likewise.
	* winduni.h: Likewise.
@
text
@d110 2
a111 2
/* true means print address within file for each string.  */
static boolean print_addresses;
d113 2
a114 2
/* true means print filename for each string.  */
static boolean print_filenames;
d116 2
a117 2
/* true means for object files scan only the data section.  */
static boolean datasection_only;
d119 2
a120 2
/* true if we found an initialized data section in the current file.  */
static boolean got_a_section;
d142 15
a156 10
static void strings_a_section PARAMS ((bfd *, asection *, PTR));
static boolean strings_object_file PARAMS ((const char *));
static boolean strings_file PARAMS ((char *file));
static int integer_arg PARAMS ((char *s));
static void print_strings PARAMS ((const char *filename, FILE *stream,
				  file_off address, int stop_point,
				  int magiccount, char *magic));
static void usage PARAMS ((FILE *stream, int status));
static long get_char PARAMS ((FILE *stream, file_off *address,
			      int *magiccount, char **magic));
d158 2
a159 1
int main PARAMS ((int, char **));
d168 1
a168 1
  boolean files_given = false;
d179 3
a181 3
  print_addresses = false;
  print_filenames = false;
  datasection_only = true;
d191 1
a191 1
	  datasection_only = false;
d195 1
a195 1
	  print_filenames = true;
d211 1
a211 1
	  print_addresses = true;
d216 1
a216 1
	  print_addresses = true;
d290 1
a290 1
      datasection_only = false;
d295 1
a295 1
      files_given = true;
d302 1
a302 1
	    datasection_only = false;
d305 2
a306 2
	      files_given = true;
	      exit_status |= (strings_file (argv[optind]) == false);
d311 1
a311 1
  if (files_given == false)
d335 1
a335 1
	  got_a_section = true;
d345 2
a346 2
   Return true if successful,
   false if not (such as if FILE is not an object file).  */
d348 1
a348 1
static boolean
d357 1
a357 1
      return false;
d363 1
a363 1
  if (bfd_check_format (abfd, bfd_object) == false)
d366 1
a366 1
      return false;
d369 1
a369 1
  got_a_section = false;
d375 1
a375 1
      return false;
d381 1
a381 1
/* Print the strings in FILE.  Return true if ok, false if an error occurs.  */
d383 1
a383 1
static boolean
d400 1
a400 1
	  return false;
d409 1
a409 1
	  return false;
d413 1
a413 1
  return true;
@


1.16
log
@Tidy up formatting of --help output.
@
text
@d64 1
a64 1
#include <getopt.h>
@


1.15
log
@	* addr2line.c (main): Protoype.
	* ar.c (main): Protoype.
	* nm.c (main): Protoype.
	* objcopy.c (main): Protoype.
	* objdump.c (main): Protoype.
	* size.c (main): Protoype.
	* strings.c (main): Protoype.
	* gasp.c (main): Protoype.
@
text
@d2 2
a3 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
d179 1
a179 1
  while ((optc = getopt_long (argc, argv, "afn:ot:e:v0123456789",
d192 1
d242 1
d650 14
a663 5
  fprintf (stream, _("\
Usage: %s [-afov] [-n min-len] [-min-len] [-t {o,x,d}] [-e {s,b,l,B,L}]\n\
       [-] [--all] [--print-file-name] [--bytes=min-len] [--radix={o,x,d}]\n\
       [--target=bfdname] [--encoding {s,b,l,B,L}] [--help] [--version] file...\n"),
	   program_name);
@


1.14
log
@	* config.bfd: Remove trailing blanks.
	* elf32-mips.c (gprel16_with_gp): Remove superfluous casts.
	* strings.c (get_char): Initialize value.
	* config/tc-mips.c (mips_cpreturn_offset): Better comment.
	(load_register): Better error message. Cast away signedness
	mismatches. Add casts needed for varargs.
	(load_address): Replace checks of HAVE_64BIT_ADDRESS with dbl.
	Remove superfluous casts.
	(macro): Cast away signedness mismatches. Remove superfluous casts.
	(s_cpload): Fix wrong comment.
	(s_mips_weakext): Standardize output message.
	(get_number): Likewise.
@
text
@d153 2
@


1.13
log
@	* strings.c: Include config.h before bfd.h.
	(file_off): New type.
	(file_open): Define.
	(print_strings): Use file_off instead of file_ptr.  Print addresses
	which don't fit into long correctly.
	(get_char): Use file_off instead of file_ptr.  Use getc_unlocked if
	available.
	(strings_file): Use file_off instead of file_ptr.  Use file_open.
	* configure.in: Check for getc_unlocked.
	Check for fopen64 and whether _LARGEFILE64_SOURCE needs to
	be defined for it.
	* configure: Rebuilt.
	* config.h.in: Rebuilt.
@
text
@d424 1
a424 1
  long r;
@


1.12
log
@	* nlmconv.c: Fix warnings about unused attributes and function
	prototypes.

	* strings.c: Add prototype for get_char.
@
text
@d59 3
d96 8
d147 1
a147 1
				  file_ptr address, int stop_point,
d150 1
a150 1
static long get_char PARAMS ((FILE *stream, file_ptr *address,
d385 1
a385 4
      stream = fopen (file, "rb");
      /* Not all systems permit "rb", so try "r" if it failed.  */
      if (stream == NULL)
	stream = fopen (file, "r");
d393 1
a393 1
      print_strings (file, stream, (file_ptr) 0, 0, 0, (char *) 0);
d419 1
a419 1
     file_ptr *address;
d438 3
d442 1
d494 1
a494 1
     file_ptr address;
d503 1
a503 1
      file_ptr start;
d532 12
a543 1
	    printf ("%7lo ", (unsigned long) start);
d547 12
a558 1
	    printf ("%7ld ", (long) start);
d562 12
a573 1
	    printf ("%7lx ", (unsigned long) start);
@


1.11
log
@Locale changes from Bruno Haible  <haible@@clisp.cons.org>.
@
text
@d139 2
@


1.10
log
@Add new command line option '--encoding' to strings
@
text
@a61 1
#include <ctype.h>
d65 1
d84 1
a84 8
/* Not all printable characters have ASCII codes (depending upon the
   LOCALE set) but on some older systems it is not safe to test isprint
   without first testing isascii...  */
#if defined isascii && !defined HAVE_LOCALE_H
#define isgraphic(c) (isascii (c) && (isprint (c) || (c) == '\t'))
#else
#define isgraphic(c) (isprint (c) || (c) == '\t')
#endif
d149 1
a149 1
#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
@


1.9
log
@Support printable characters outside of the ASCII range
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
d42 5
d121 4
d131 1
d169 1
d171 1
a171 1
  while ((optc = getopt_long (argc, argv, "afn:ot:v0123456789",
d227 6
d252 17
d403 68
d492 1
a492 1
  char *buf = (char *) xmalloc (string_min + 1);
d498 1
a498 1
      int c;
d507 4
a510 15
	  if (magiccount)
	    {
	      magiccount--;
	      c = *magic++;
	    }
	  else
	    {
	      if (stream == NULL)
		return;
	      c = getc (stream);
	      if (c == EOF)
		return;
	    }
	  address++;
	  if (!isgraphic (c))
d542 4
a545 15
	  if (magiccount)
	    {
	      magiccount--;
	      c = *magic++;
	    }
	  else
	    {
	      if (stream == NULL)
		break;
	      c = getc (stream);
	      if (c == EOF)
		break;
	    }
	  address++;
	  if (! isgraphic (c))
d607 3
a609 3
Usage: %s [-afov] [-n min-len] [-min-len] [-t {o,x,d}] [-]\n\
       [--all] [--print-file-name] [--bytes=min-len] [--radix={o,x,d}]\n\
       [--target=bfdname] [--help] [--version] file...\n"),
@


1.8
log
@Fix typos in ChangeLogs and update copyright notices
@
text
@d79 4
a82 1
#ifdef isascii
d147 1
a147 1
  setlocale (LC_MESSAGES, "");
@


1.7
log
@	* strings.c (isgraphic): Interpret <TAB> as a printable character,
	analogous to <SPACE>.

Approved by:	Nick Clifton <nickc@@cygnus.com>
		<200005222243.PAA14590@@elmo.cygnus.com>
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 99, 2000
@


1.7.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
@


1.7.2.2
log
@Merge from mainline.
@
text
@d79 1
a79 4
/* Not all printable characters have ASCII codes (depending upon the
   LOCALE set) but on some older systems it is not safe to test isprint
   without first testing isascii...  */
#if defined isascii && !defined HAVE_LOCALE_H
d144 1
a144 1
  setlocale (LC_ALL, "");
@


1.6
log
@Eli Zaretskii's DOSish file name patches.
@
text
@d80 1
a80 1
#define isgraphic(c) (isascii (c) && isprint (c))
d82 1
a82 1
#define isgraphic(c) (isprint (c))
@


1.5
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d62 17
d238 3
@


1.4
log
@Move translated part of bug report string back into .c files so
xgettext can find it.  Regnerate .pot files.
@
text
@d2 2
a3 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d160 1
a160 3
	      fprintf (stderr, _("%s: invalid number %s\n"),
		       program_name, optarg);
	      exit (1);
d493 1
a493 2
      fprintf (stderr, _("%s: invalid integer argument %s\n"), program_name, s);
      exit (1);
@


1.3
log
@Move bug report string to one place.
@
text
@d512 1
a512 1
    fprintf (stream, REPORT_BUGS_TO);
@


1.2
log
@	* strings.c (main): Correct handling of numeric argument.
@
text
@d512 1
a512 1
    fprintf (stream, _("Report bugs to bug-gnu-utils@@gnu.org\n"));
@


1.2.2.1
log
@This is a grab-bag of my stuff from the head branch.
Should have done it separately, I know.
- move bug report address to include file
- objcopy --redefine-sym
- update makefile dependencies (but use automake-000227)
- H.J. Lu's fix to readelf.c
@
text
@d512 1
a512 1
    fprintf (stream, _("Report bugs to %s\n"), REPORT_BUGS_TO);
@


1.2.2.2
log
@A mostly cosmetic tidy up of warnings and error message reporting.
@
text
@d2 1
a2 2
   Copyright (C) 1993, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
d159 3
a161 1
	      fatal (_("invalid number %s"), optarg);
d494 2
a495 1
      fatal (_("invalid integer argument %s"), s);
@


1.2.2.3
log
@Eli Zaretskii's DOSish file name patches.
@
text
@a61 17
/* Some platforms need to put stdin into binary mode, to read
    binary files.  */
#ifdef HAVE_SETMODE
#ifndef O_BINARY
#ifdef _O_BINARY
#define O_BINARY _O_BINARY
#define setmode _setmode
#else
#define O_BINARY 0
#endif
#endif
#if O_BINARY
#include <io.h>
#define SET_BINARY(f) do { if (!isatty(f)) setmode(f,O_BINARY); } while (0)
#endif
#endif

a220 3
#ifdef SET_BINARY
      SET_BINARY (fileno (stdin));
#endif
@


1.1
log
@Initial revision
@
text
@d206 1
a206 1
	    string_min = optc;
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

