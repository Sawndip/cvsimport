head	1.9;
access;
symbols
	sid-snapshot-20180601:1.9
	sid-snapshot-20180501:1.9
	sid-snapshot-20180401:1.9
	sid-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	sid-snapshot-20160401:1.9
	sid-snapshot-20160301:1.9
	sid-snapshot-20160201:1.9
	sid-snapshot-20160101:1.9
	sid-snapshot-20151201:1.9
	sid-snapshot-20151101:1.9
	sid-snapshot-20151001:1.9
	sid-snapshot-20150901:1.9
	sid-snapshot-20150801:1.9
	sid-snapshot-20150701:1.9
	sid-snapshot-20150601:1.9
	sid-snapshot-20150501:1.9
	sid-snapshot-20150401:1.9
	sid-snapshot-20150301:1.9
	sid-snapshot-20150201:1.9
	sid-snapshot-20150101:1.9
	sid-snapshot-20141201:1.9
	sid-snapshot-20141101:1.9
	sid-snapshot-20141001:1.9
	sid-snapshot-20140901:1.9
	sid-snapshot-20140801:1.9
	sid-snapshot-20140701:1.9
	sid-snapshot-20140601:1.9
	sid-snapshot-20140501:1.9
	sid-snapshot-20140401:1.9
	sid-snapshot-20140301:1.9
	sid-snapshot-20140201:1.9
	sid-snapshot-20140101:1.9
	sid-snapshot-20131201:1.9
	sid-snapshot-20131101:1.9
	sid-snapshot-20131001:1.9
	binutils-2_24-branch:1.9.0.4
	binutils-2_24-branchpoint:1.9
	sid-snapshot-20130901:1.9
	gdb_7_6_1-2013-08-30-release:1.9
	sid-snapshot-20130801:1.9
	sid-snapshot-20130701:1.9
	sid-snapshot-20130601:1.9
	sid-snapshot-20130501:1.9
	gdb_7_6-2013-04-26-release:1.9
	sid-snapshot-20130401:1.9
	binutils-2_23_2:1.3.4.1
	gdb_7_6-branch:1.9.0.2
	gdb_7_6-2013-03-12-branchpoint:1.9
	sid-snapshot-20130301:1.9
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.5
	gdb_7_5_1-2012-11-29-release:1.3
	binutils-2_23_1:1.3.4.1
	sid-snapshot-20121101:1.5
	binutils-2_23:1.3.4.1
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.4
	gdb_7_5-2012-08-17-release:1.3
	sid-snapshot-20120801:1.4
	binutils-2_23-branch:1.3.0.4
	binutils-2_23-branchpoint:1.3
	gdb_7_5-branch:1.3.0.2
	gdb_7_5-2012-07-18-branchpoint:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.2
	gdb_7_4_1-2012-04-26-release:1.1
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	gdb_7_4-2012-01-24-release:1.1
	sid-snapshot-20120101:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1
	sid-snapshot-20111201:1.1
	binutils_latest_snapshot:1.9;
locks; strict;
comment	@ * @;


1.9
date	2013.02.27.03.00.44;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.25.18.41.06;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2013.02.04.06.04.32;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2012.12.17.16.56.11;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.10.23.57.09;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.01.00.41.35;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.17.15.13.25;	author nickc;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2012.01.31.00.22.52;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.02.03.09.11;	author dj;	state Exp;
branches;
next	;

1.3.4.1
date	2012.09.04.14.01.41;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* rl78-decode.opc (rl78_decode_opcode): Fix typo.
	* rl78-decode.c: Regenerate.
@
text
@#line 1 "rl78-decode.opc"
/* -*- c -*- */
/* Copyright 2012-2013 Free Software Foundation, Inc.
   Contributed by Red Hat.
   Written by DJ Delorie.

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ansidecl.h"
#include "opcode/rl78.h"

static int trace = 0;

typedef struct
{
  RL78_Opcode_Decoded * rl78;
  int (* getbyte)(void *);
  void * ptr;
  unsigned char * op;
} LocalData;

#define ID(x) rl78->id = RLO_##x, rl78->lineno = __LINE__
#define OP(n,t,r,a) (rl78->op[n].type = t, \
		     rl78->op[n].reg = r,	     \
		     rl78->op[n].addend = a )
#define OPX(n,t,r1,r2,a) \
	(rl78->op[n].type = t, \
	rl78->op[n].reg = r1, \
	rl78->op[n].reg2 = r2, \
	rl78->op[n].addend = a )

#define W() rl78->size = RL78_Word

#define AU ATTRIBUTE_UNUSED
#define GETBYTE() (ld->op [ld->rl78->n_bytes++] = ld->getbyte (ld->ptr))
#define B ((unsigned long) GETBYTE())

#define SYNTAX(x) rl78->syntax = x

#define UNSUPPORTED() \
  rl78->syntax = "*unknown*"

#define RB(x) ((x)+RL78_Reg_X)
#define RW(x) ((x)+RL78_Reg_AX)

#define Fz	rl78->flags = RL78_PSW_Z
#define Fza	rl78->flags = RL78_PSW_Z | RL78_PSW_AC
#define Fzc	rl78->flags = RL78_PSW_Z | RL78_PSW_CY
#define Fzac	rl78->flags = RL78_PSW_Z | RL78_PSW_AC | RL78_PSW_CY
#define Fa	rl78->flags = RL78_PSW_AC
#define Fc	rl78->flags = RL78_PSW_CY
#define Fac	rl78->flags = RL78_PSW_AC | RL78_PSW_CY

#define IMMU(bytes)   immediate (bytes, 0, ld)
#define IMMS(bytes)   immediate (bytes, 1, ld)

static int
immediate (int bytes, int sign_extend, LocalData * ld)
{
  unsigned long i = 0;

  switch (bytes)
    {
    case 1:
      i |= B;
      if (sign_extend && (i & 0x80))
	i -= 0x100;
      break;
    case 2:
      i |= B;
      i |= B << 8;
      if (sign_extend && (i & 0x8000))
	i -= 0x10000;
      break;
    case 3:
      i |= B;
      i |= B << 8;
      i |= B << 16;
      if (sign_extend && (i & 0x800000))
	i -= 0x1000000;
      break;
    default:
      fprintf (stderr, "Programmer error: immediate() called with invalid byte count %d\n", bytes);
      abort();
    }
  return i;
}

#define DC(c)		OP (0, RL78_Operand_Immediate, 0, c)
#define DR(r)		OP (0, RL78_Operand_Register, RL78_Reg_##r, 0)
#define DRB(r)		OP (0, RL78_Operand_Register, RB(r), 0)
#define DRW(r)		OP (0, RL78_Operand_Register, RW(r), 0)
#define DM(r,a)		OP (0, RL78_Operand_Indirect, RL78_Reg_##r, a)
#define DM2(r1,r2,a)	OPX (0, RL78_Operand_Indirect, RL78_Reg_##r1, RL78_Reg_##r2, a)
#define DE()		rl78->op[0].use_es = 1
#define DB(b)		set_bit (rl78->op, b)
#define DCY()		DR(PSW); DB(0)
#define DPUSH()		OP (0, RL78_Operand_PreDec, RL78_Reg_SP, 0);

#define SC(c)		OP (1, RL78_Operand_Immediate, 0, c)
#define SR(r)		OP (1, RL78_Operand_Register, RL78_Reg_##r, 0)
#define SRB(r)		OP (1, RL78_Operand_Register, RB(r), 0)
#define SRW(r)		OP (1, RL78_Operand_Register, RW(r), 0)
#define SM(r,a)		OP (1, RL78_Operand_Indirect, RL78_Reg_##r, a)
#define SM2(r1,r2,a)	OPX (1, RL78_Operand_Indirect, RL78_Reg_##r1, RL78_Reg_##r2, a)
#define SE()		rl78->op[1].use_es = 1
#define SB(b)		set_bit (rl78->op+1, b)
#define SCY()		SR(PSW); SB(0)
#define COND(c)		rl78->op[1].condition = RL78_Condition_##c
#define SPOP()		OP (1, RL78_Operand_PostInc, RL78_Reg_SP, 0);

static void
set_bit (RL78_Opcode_Operand *op, int bit)
{
  op->bit_number = bit;
  switch (op->type) {
  case RL78_Operand_Register:
    op->type = RL78_Operand_Bit;
    break;
  case RL78_Operand_Indirect:
    op->type = RL78_Operand_BitIndirect;
    break;
  default:
    break;
  }
}

static int
saddr (int x)
{
  if (x < 0x20)
    return 0xfff00 + x;
  return 0xffe00 + x;
}

static int
sfr (int x)
{
  return 0xfff00 + x;
}

#define SADDR saddr (IMMU (1))
#define SFR sfr (IMMU (1))

int
rl78_decode_opcode (unsigned long pc AU,
		  RL78_Opcode_Decoded * rl78,
		  int (* getbyte)(void *),
		  void * ptr)
{
  LocalData lds, * ld = &lds;
  unsigned char op_buf[20] = {0};
  unsigned char *op = op_buf;
  int op0, op1;

  lds.rl78 = rl78;
  lds.getbyte = getbyte;
  lds.ptr = ptr;
  lds.op = op;

  memset (rl78, 0, sizeof (*rl78));

 start_again:

/* Byte registers, not including A.  */
/* Word registers, not including AX.  */

/*----------------------------------------------------------------------*/
/* ES: prefix								*/

  GETBYTE ();
  switch (op[0] & 0xff)
  {
    case 0x00:
        {
          /** 0000 0000			nop					*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 0000			nop					*/",
                     op[0]);
            }
          SYNTAX("nop");
#line 910 "rl78-decode.opc"
          ID(nop);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x01:
    case 0x03:
    case 0x05:
    case 0x07:
        {
          /** 0000 0rw1			addw	%0, %1				*/
#line 273 "rl78-decode.opc"
          int rw AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 0rw1			addw	%0, %1				*/",
                     op[0]);
              printf ("  rw = 0x%x\n", rw);
            }
          SYNTAX("addw	%0, %1");
#line 273 "rl78-decode.opc"
          ID(add); W(); DR(AX); SRW(rw); Fzac;
        
        }
      break;
    case 0x02:
        {
          /** 0000 0010			addw	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 0010			addw	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("addw	%0, %e!1");
#line 264 "rl78-decode.opc"
          ID(add); W(); DR(AX); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x04:
        {
          /** 0000 0100			addw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 0100			addw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("addw	%0, #%1");
#line 270 "rl78-decode.opc"
          ID(add); W(); DR(AX); SC(IMMU(2)); Fzac;
        
        }
      break;
    case 0x06:
        {
          /** 0000 0110			addw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 0110			addw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("addw	%0, %1");
#line 276 "rl78-decode.opc"
          ID(add); W(); DR(AX); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x08:
        {
          /** 0000 1000			xch	a, x				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1000			xch	a, x				*/",
                     op[0]);
            }
          SYNTAX("xch	a, x");
#line 1233 "rl78-decode.opc"
          ID(xch); DR(A); SR(X);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x09:
        {
          /** 0000 1001			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1001			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 677 "rl78-decode.opc"
          ID(mov); DR(A); SM(B, IMMU(2));
        
        }
      break;
    case 0x0a:
        {
          /** 0000 1010			add	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1010			add	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("add	%0, #%1");
#line 227 "rl78-decode.opc"
          ID(add); DM(None, SADDR); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x0b:
        {
          /** 0000 1011			add	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1011			add	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("add	%0, %1");
#line 221 "rl78-decode.opc"
          ID(add); DR(A); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x0c:
        {
          /** 0000 1100			add	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1100			add	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("add	%0, #%1");
#line 215 "rl78-decode.opc"
          ID(add); DR(A); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x0d:
        {
          /** 0000 1101			add	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1101			add	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("add	%0, %e1");
#line 203 "rl78-decode.opc"
          ID(add); DR(A); SM(HL, 0); Fzac;
        
        }
      break;
    case 0x0e:
        {
          /** 0000 1110			add	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1110			add	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("add	%0, %e1");
#line 209 "rl78-decode.opc"
          ID(add); DR(A); SM(HL, IMMU(1)); Fzac;
          
        }
      break;
    case 0x0f:
        {
          /** 0000 1111			add	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0000 1111			add	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("add	%0, %e!1");
#line 200 "rl78-decode.opc"
          ID(add); DR(A); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x10:
        {
          /** 0001 0000			addw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 0000			addw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("addw	%0, #%1");
#line 279 "rl78-decode.opc"
          ID(add); W(); DR(SP); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x11:
        {
          /** 0001 0001			es:					*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 0001			es:					*/",
                     op[0]);
            }
          SYNTAX("es:");
#line 192 "rl78-decode.opc"
          DE(); SE();
          op ++;
          pc ++;
          goto start_again;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x12:
    case 0x14:
    case 0x16:
        {
          /** 0001 0ra0			movw	%0, %1				*/
#line 858 "rl78-decode.opc"
          int ra AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 0ra0			movw	%0, %1				*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("movw	%0, %1");
#line 858 "rl78-decode.opc"
          ID(mov); W(); DRW(ra); SR(AX);
        
        }
      break;
    case 0x13:
    case 0x15:
    case 0x17:
        {
          /** 0001 0ra1			movw	%0, %1				*/
#line 855 "rl78-decode.opc"
          int ra AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 0ra1			movw	%0, %1				*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("movw	%0, %1");
#line 855 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SRW(ra);
        
        }
      break;
    case 0x18:
        {
          /** 0001 1000			mov	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1000			mov	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, %1");
#line 728 "rl78-decode.opc"
          ID(mov); DM(B, IMMU(2)); SR(A);	
        
        }
      break;
    case 0x19:
        {
          /** 0001 1001			mov	%e0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1001			mov	%e0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, #%1");
#line 725 "rl78-decode.opc"
          ID(mov); DM(B, IMMU(2)); SC(IMMU(1));	
        
        }
      break;
    case 0x1a:
        {
          /** 0001 1010			addc	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1010			addc	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("addc	%0, #%1");
#line 259 "rl78-decode.opc"
          ID(addc); DM(None, SADDR); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x1b:
        {
          /** 0001 1011			addc	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1011			addc	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("addc	%0, %1");
#line 256 "rl78-decode.opc"
          ID(addc); DR(A); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x1c:
        {
          /** 0001 1100			addc	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1100			addc	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("addc	%0, #%1");
#line 247 "rl78-decode.opc"
          ID(addc); DR(A); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x1d:
        {
          /** 0001 1101			addc	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1101			addc	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("addc	%0, %e1");
#line 235 "rl78-decode.opc"
          ID(addc); DR(A); SM(HL, 0); Fzac;
        
        }
      break;
    case 0x1e:
        {
          /** 0001 1110			addc	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1110			addc	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("addc	%0, %e1");
#line 244 "rl78-decode.opc"
          ID(addc); DR(A); SM(HL, IMMU(1)); Fzac;
        
        }
      break;
    case 0x1f:
        {
          /** 0001 1111			addc	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0001 1111			addc	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("addc	%0, %e!1");
#line 232 "rl78-decode.opc"
          ID(addc); DR(A); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x20:
        {
          /** 0010 0000			subw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 0000			subw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("subw	%0, #%1");
#line 1197 "rl78-decode.opc"
          ID(sub); W(); DR(SP); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x27:
        {
          /** 0010 0rw1			subw	%0, %1				*/
#line 1191 "rl78-decode.opc"
          int rw AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 0rw1			subw	%0, %1				*/",
                     op[0]);
              printf ("  rw = 0x%x\n", rw);
            }
          SYNTAX("subw	%0, %1");
#line 1191 "rl78-decode.opc"
          ID(sub); W(); DR(AX); SRW(rw); Fzac;
        
        }
      break;
    case 0x22:
        {
          /** 0010 0010			subw	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 0010			subw	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("subw	%0, %e!1");
#line 1182 "rl78-decode.opc"
          ID(sub); W(); DR(AX); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x24:
        {
          /** 0010 0100			subw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 0100			subw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("subw	%0, #%1");
#line 1188 "rl78-decode.opc"
          ID(sub); W(); DR(AX); SC(IMMU(2)); Fzac;
        
        }
      break;
    case 0x26:
        {
          /** 0010 0110			subw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 0110			subw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("subw	%0, %1");
#line 1194 "rl78-decode.opc"
          ID(sub); W(); DR(AX); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x28:
        {
          /** 0010 1000			mov	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1000			mov	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, %1");
#line 740 "rl78-decode.opc"
          ID(mov); DM(C, IMMU(2)); SR(A);
        
        }
      break;
    case 0x29:
        {
          /** 0010 1001			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1001			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 683 "rl78-decode.opc"
          ID(mov); DR(A); SM(C, IMMU(2));
        
        }
      break;
    case 0x2a:
        {
          /** 0010 1010			sub	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1010			sub	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("sub	%0, #%1");
#line 1145 "rl78-decode.opc"
          ID(sub); DM(None, SADDR); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x2b:
        {
          /** 0010 1011			sub	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1011			sub	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("sub	%0, %1");
#line 1139 "rl78-decode.opc"
          ID(sub); DR(A); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x2c:
        {
          /** 0010 1100			sub	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1100			sub	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("sub	%0, #%1");
#line 1133 "rl78-decode.opc"
          ID(sub); DR(A); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x2d:
        {
          /** 0010 1101			sub	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1101			sub	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("sub	%0, %e1");
#line 1121 "rl78-decode.opc"
          ID(sub); DR(A); SM(HL, 0); Fzac;
        
        }
      break;
    case 0x2e:
        {
          /** 0010 1110			sub	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1110			sub	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("sub	%0, %e1");
#line 1127 "rl78-decode.opc"
          ID(sub); DR(A); SM(HL, IMMU(1)); Fzac;
        
        }
      break;
    case 0x2f:
        {
          /** 0010 1111			sub	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0010 1111			sub	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("sub	%0, %e!1");
#line 1118 "rl78-decode.opc"
          ID(sub); DR(A); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x30:
    case 0x32:
    case 0x34:
    case 0x36:
        {
          /** 0011 0rg0			movw	%0, #%1				*/
#line 852 "rl78-decode.opc"
          int rg AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 0rg0			movw	%0, #%1				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("movw	%0, #%1");
#line 852 "rl78-decode.opc"
          ID(mov); W(); DRW(rg); SC(IMMU(2));
        
        }
      break;
    case 0x31:
        GETBYTE ();
        switch (op[1] & 0x8f)
        {
          case 0x00:
              {
                /** 0011 0001 0bit 0000		btclr	%s1, $%a0			*/
#line 415 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0000		btclr	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("btclr	%s1, $%a0");
#line 415 "rl78-decode.opc"
                ID(branch_cond_clear); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x01:
              {
                /** 0011 0001 0bit 0001		btclr	%1, $%a0			*/
#line 409 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0001		btclr	%1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("btclr	%1, $%a0");
#line 409 "rl78-decode.opc"
                ID(branch_cond_clear); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(T);
              
              }
            break;
          case 0x02:
              {
                /** 0011 0001 0bit 0010		bt	%s1, $%a0			*/
#line 401 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0010		bt	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bt	%s1, $%a0");
#line 401 "rl78-decode.opc"
                ID(branch_cond); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x03:
              {
                /** 0011 0001 0bit 0011		bt	%1, $%a0			*/
#line 395 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0011		bt	%1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bt	%1, $%a0");
#line 395 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(T);
              
              }
            break;
          case 0x04:
              {
                /** 0011 0001 0bit 0100		bf	%s1, $%a0			*/
#line 362 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0100		bf	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bf	%s1, $%a0");
#line 362 "rl78-decode.opc"
                ID(branch_cond); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(F);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x05:
              {
                /** 0011 0001 0bit 0101		bf	%1, $%a0			*/
#line 356 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0bit 0101		bf	%1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bf	%1, $%a0");
#line 356 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(F);
              
              }
            break;
          case 0x07:
              {
                /** 0011 0001 0cnt 0111		shl	%0, %1				*/
#line 1074 "rl78-decode.opc"
                int cnt AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0cnt 0111		shl	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  cnt = 0x%x\n", cnt);
                  }
                SYNTAX("shl	%0, %1");
#line 1074 "rl78-decode.opc"
                ID(shl); DR(C); SC(cnt);
              
              }
            break;
          case 0x08:
              {
                /** 0011 0001 0cnt 1000		shl	%0, %1				*/
#line 1071 "rl78-decode.opc"
                int cnt AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0cnt 1000		shl	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  cnt = 0x%x\n", cnt);
                  }
                SYNTAX("shl	%0, %1");
#line 1071 "rl78-decode.opc"
                ID(shl); DR(B); SC(cnt);
              
              }
            break;
          case 0x09:
              {
                /** 0011 0001 0cnt 1001		shl	%0, %1				*/
#line 1068 "rl78-decode.opc"
                int cnt AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0cnt 1001		shl	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  cnt = 0x%x\n", cnt);
                  }
                SYNTAX("shl	%0, %1");
#line 1068 "rl78-decode.opc"
                ID(shl); DR(A); SC(cnt);
              
              }
            break;
          case 0x0a:
              {
                /** 0011 0001 0cnt 1010		shr	%0, %1				*/
#line 1085 "rl78-decode.opc"
                int cnt AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0cnt 1010		shr	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  cnt = 0x%x\n", cnt);
                  }
                SYNTAX("shr	%0, %1");
#line 1085 "rl78-decode.opc"
                ID(shr); DR(A); SC(cnt);
              
              }
            break;
          case 0x0b:
              {
                /** 0011 0001 0cnt 1011		sar	%0, %1				*/
#line 1032 "rl78-decode.opc"
                int cnt AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 0cnt 1011		sar	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  cnt = 0x%x\n", cnt);
                  }
                SYNTAX("sar	%0, %1");
#line 1032 "rl78-decode.opc"
                ID(sar); DR(A); SC(cnt);
              
              }
            break;
          case 0x0c:
          case 0x8c:
              {
                /** 0011 0001 wcnt 1100		shlw	%0, %1				*/
#line 1080 "rl78-decode.opc"
                int wcnt AU = (op[1] >> 4) & 0x0f;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 wcnt 1100		shlw	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  wcnt = 0x%x\n", wcnt);
                  }
                SYNTAX("shlw	%0, %1");
#line 1080 "rl78-decode.opc"
                ID(shl); W(); DR(BC); SC(wcnt);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x0d:
          case 0x8d:
              {
                /** 0011 0001 wcnt 1101		shlw	%0, %1				*/
#line 1077 "rl78-decode.opc"
                int wcnt AU = (op[1] >> 4) & 0x0f;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 wcnt 1101		shlw	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  wcnt = 0x%x\n", wcnt);
                  }
                SYNTAX("shlw	%0, %1");
#line 1077 "rl78-decode.opc"
                ID(shl); W(); DR(AX); SC(wcnt);
              
              }
            break;
          case 0x0e:
          case 0x8e:
              {
                /** 0011 0001 wcnt 1110		shrw	%0, %1				*/
#line 1088 "rl78-decode.opc"
                int wcnt AU = (op[1] >> 4) & 0x0f;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 wcnt 1110		shrw	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  wcnt = 0x%x\n", wcnt);
                  }
                SYNTAX("shrw	%0, %1");
#line 1088 "rl78-decode.opc"
                ID(shr); W(); DR(AX); SC(wcnt);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x0f:
          case 0x8f:
              {
                /** 0011 0001 wcnt 1111		sarw	%0, %1				*/
#line 1035 "rl78-decode.opc"
                int wcnt AU = (op[1] >> 4) & 0x0f;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 wcnt 1111		sarw	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  wcnt = 0x%x\n", wcnt);
                  }
                SYNTAX("sarw	%0, %1");
#line 1035 "rl78-decode.opc"
                ID(sar); W(); DR(AX); SC(wcnt);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x80:
              {
                /** 0011 0001 1bit 0000		btclr	%s1, $%a0			*/
#line 412 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0000		btclr	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("btclr	%s1, $%a0");
#line 412 "rl78-decode.opc"
                ID(branch_cond_clear); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
              
              }
            break;
          case 0x81:
              {
                /** 0011 0001 1bit 0001		btclr	%e1, $%a0			*/
#line 406 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0001		btclr	%e1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("btclr	%e1, $%a0");
#line 406 "rl78-decode.opc"
                ID(branch_cond_clear); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(T);
              
              }
            break;
          case 0x82:
              {
                /** 0011 0001 1bit 0010		bt	%s1, $%a0			*/
#line 398 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0010		bt	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bt	%s1, $%a0");
#line 398 "rl78-decode.opc"
                ID(branch_cond); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
              
              }
            break;
          case 0x83:
              {
                /** 0011 0001 1bit 0011		bt	%e1, $%a0			*/
#line 392 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0011		bt	%e1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bt	%e1, $%a0");
#line 392 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(T);
              
              }
            break;
          case 0x84:
              {
                /** 0011 0001 1bit 0100		bf	%s1, $%a0			*/
#line 359 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0100		bf	%s1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bf	%s1, $%a0");
#line 359 "rl78-decode.opc"
                ID(branch_cond); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(F);
              
              }
            break;
          case 0x85:
              {
                /** 0011 0001 1bit 0101		bf	%e1, $%a0			*/
#line 353 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0011 0001 1bit 0101		bf	%e1, $%a0			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("bf	%e1, $%a0");
#line 353 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(F);
              
              }
            break;
          default: UNSUPPORTED(); break;
        }
      break;
    case 0x33:
    case 0x35:
    case 0x37:
        {
          /** 0011 0ra1			xchw	%0, %1				*/
#line 1238 "rl78-decode.opc"
          int ra AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 0ra1			xchw	%0, %1				*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("xchw	%0, %1");
#line 1238 "rl78-decode.opc"
          ID(xch); W(); DR(AX); SRW(ra);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x38:
        {
          /** 0011 1000			mov	%e0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1000			mov	%e0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, #%1");
#line 737 "rl78-decode.opc"
          ID(mov); DM(C, IMMU(2)); SC(IMMU(1));	
        
        }
      break;
    case 0x39:
        {
          /** 0011 1001			mov	%e0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1001			mov	%e0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, #%1");
#line 731 "rl78-decode.opc"
          ID(mov); DM(BC, IMMU(2)); SC(IMMU(1));	
        
        }
      break;
    case 0x3a:
        {
          /** 0011 1010			subc	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1010			subc	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("subc	%0, #%1");
#line 1177 "rl78-decode.opc"
          ID(subc); DM(None, SADDR); SC(IMMU(1)); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x3b:
        {
          /** 0011 1011			subc	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1011			subc	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("subc	%0, %1");
#line 1174 "rl78-decode.opc"
          ID(subc); DR(A); SM(None, SADDR); Fzac;
        
        }
      break;
    case 0x3c:
        {
          /** 0011 1100			subc	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1100			subc	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("subc	%0, #%1");
#line 1165 "rl78-decode.opc"
          ID(subc); DR(A); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x3d:
        {
          /** 0011 1101			subc	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1101			subc	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("subc	%0, %e1");
#line 1153 "rl78-decode.opc"
          ID(subc); DR(A); SM(HL, 0); Fzac;
        
        }
      break;
    case 0x3e:
        {
          /** 0011 1110			subc	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1110			subc	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("subc	%0, %e1");
#line 1162 "rl78-decode.opc"
          ID(subc); DR(A); SM(HL, IMMU(1)); Fzac;
        
        }
      break;
    case 0x3f:
        {
          /** 0011 1111			subc	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0011 1111			subc	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("subc	%0, %e!1");
#line 1150 "rl78-decode.opc"
          ID(subc); DR(A); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x40:
        {
          /** 0100 0000			cmp	%e!0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0000			cmp	%e!0, #%1			*/",
                     op[0]);
            }
          SYNTAX("cmp	%e!0, #%1");
#line 479 "rl78-decode.opc"
          ID(cmp); DM(None, IMMU(2)); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x41:
        {
          /** 0100 0001			mov	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0001			mov	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, #%1");
#line 716 "rl78-decode.opc"
          ID(mov); DR(ES); SC(IMMU(1));	
        
        }
      break;
    case 0x42:
        {
          /** 0100 0010			cmpw	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0010			cmpw	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("cmpw	%0, %e!1");
#line 530 "rl78-decode.opc"
          ID(cmp); W(); DR(AX); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x43:
    case 0x45:
    case 0x47:
        {
          /** 0100 0ra1			cmpw	%0, %1				*/
#line 539 "rl78-decode.opc"
          int ra AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0ra1			cmpw	%0, %1				*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("cmpw	%0, %1");
#line 539 "rl78-decode.opc"
          ID(cmp); W(); DR(AX); SRW(ra); Fzac;
        
        }
      break;
    case 0x44:
        {
          /** 0100 0100			cmpw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0100			cmpw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("cmpw	%0, #%1");
#line 536 "rl78-decode.opc"
          ID(cmp); W(); DR(AX); SC(IMMU(2)); Fzac;
        
        }
      break;
    case 0x46:
        {
          /** 0100 0110			cmpw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 0110			cmpw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("cmpw	%0, %1");
#line 542 "rl78-decode.opc"
          ID(cmp); W(); DR(AX); SM(None, SADDR); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x48:
        {
          /** 0100 1000			mov	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1000			mov	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, %1");
#line 734 "rl78-decode.opc"
          ID(mov); DM(BC, IMMU(2)); SR(A);	
        
        }
      break;
    case 0x49:
        {
          /** 0100 1001			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1001			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 680 "rl78-decode.opc"
          ID(mov); DR(A); SM(BC, IMMU(2));
        
        }
      break;
    case 0x4a:
        {
          /** 0100 1010			cmp	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1010			cmp	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, #%1");
#line 482 "rl78-decode.opc"
          ID(cmp); DM(None, SADDR); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x4b:
        {
          /** 0100 1011			cmp	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1011			cmp	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, %1");
#line 509 "rl78-decode.opc"
          ID(cmp); DR(A); SM(None, SADDR); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x4c:
        {
          /** 0100 1100			cmp	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1100			cmp	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, #%1");
#line 500 "rl78-decode.opc"
          ID(cmp); DR(A); SC(IMMU(1)); Fzac;
        
        }
      break;
    case 0x4d:
        {
          /** 0100 1101			cmp	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1101			cmp	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, %e1");
#line 488 "rl78-decode.opc"
          ID(cmp); DR(A); SM(HL, 0); Fzac;
        
        }
      break;
    case 0x4e:
        {
          /** 0100 1110			cmp	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1110			cmp	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, %e1");
#line 497 "rl78-decode.opc"
          ID(cmp); DR(A); SM(HL, IMMU(1)); Fzac;
        
        }
      break;
    case 0x4f:
        {
          /** 0100 1111			cmp	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0100 1111			cmp	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("cmp	%0, %e!1");
#line 485 "rl78-decode.opc"
          ID(cmp); DR(A); SM(None, IMMU(2)); Fzac;
        
        }
      break;
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
        {
          /** 0101 0reg			mov	%0, #%1				*/
#line 668 "rl78-decode.opc"
          int reg AU = op[0] & 0x07;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 0reg			mov	%0, #%1				*/",
                     op[0]);
              printf ("  reg = 0x%x\n", reg);
            }
          SYNTAX("mov	%0, #%1");
#line 668 "rl78-decode.opc"
          ID(mov); DRB(reg); SC(IMMU(1));
        
        }
      break;
    case 0x58:
        {
          /** 0101 1000			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1000			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 870 "rl78-decode.opc"
          ID(mov); W(); DM(B, IMMU(2)); SR(AX);
        
        }
      break;
    case 0x59:
        {
          /** 0101 1001			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1001			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 861 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(B, IMMU(2));
        
        }
      break;
    case 0x5a:
        {
          /** 0101 1010	       		and	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1010	       		and	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("and	%0, #%1");
#line 311 "rl78-decode.opc"
          ID(and); DM(None, SADDR); SC(IMMU(1)); Fz;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x5b:
        {
          /** 0101 1011	       		and	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1011	       		and	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("and	%0, %1");
#line 308 "rl78-decode.opc"
          ID(and); DR(A); SM(None, SADDR); Fz;
        
        }
      break;
    case 0x5c:
        {
          /** 0101 1100	       		and	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1100	       		and	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("and	%0, #%1");
#line 299 "rl78-decode.opc"
          ID(and); DR(A); SC(IMMU(1)); Fz;
        
        }
      break;
    case 0x5d:
        {
          /** 0101 1101			and	%0, %e1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1101			and	%0, %e1			*/",
                     op[0]);
            }
          SYNTAX("and	%0, %e1");
#line 287 "rl78-decode.opc"
          ID(and); DR(A); SM(HL, 0); Fz;
        
        }
      break;
    case 0x5e:
        {
          /** 0101 1110			and	%0, %e1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1110			and	%0, %e1			*/",
                     op[0]);
            }
          SYNTAX("and	%0, %e1");
#line 293 "rl78-decode.opc"
          ID(and); DR(A); SM(HL, IMMU(1)); Fz;
        
        }
      break;
    case 0x5f:
        {
          /** 0101 1111			and	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0101 1111			and	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("and	%0, %e!1");
#line 284 "rl78-decode.opc"
          ID(and); DR(A); SM(None, IMMU(2)); Fz;
        
        }
      break;
    case 0x60:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
        {
          /** 0110 0rba			mov	%0, %1				*/
#line 671 "rl78-decode.opc"
          int rba AU = op[0] & 0x07;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 0rba			mov	%0, %1				*/",
                     op[0]);
              printf ("  rba = 0x%x\n", rba);
            }
          SYNTAX("mov	%0, %1");
#line 671 "rl78-decode.opc"
          ID(mov); DR(A); SRB(rba);
        
        }
      break;
    case 0x61:
        GETBYTE ();
        switch (op[1] & 0xff)
        {
          case 0x00:
          case 0x01:
          case 0x02:
          case 0x03:
          case 0x04:
          case 0x05:
          case 0x06:
          case 0x07:
              {
                /** 0110 0001 0000 0reg		add	%0, %1				*/
#line 224 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0000 0reg		add	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("add	%0, %1");
#line 224 "rl78-decode.opc"
                ID(add); DRB(reg); SR(A); Fzac;
              
              }
            break;
          case 0x08:
          case 0x0a:
          case 0x0b:
          case 0x0c:
          case 0x0d:
          case 0x0e:
          case 0x0f:
              {
                /** 0110 0001 0000 1rba		add	%0, %1				*/
#line 218 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0000 1rba		add	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("add	%0, %1");
#line 218 "rl78-decode.opc"
                ID(add); DR(A); SRB(rba); Fzac;
              
              }
            break;
          case 0x09:
              {
                /** 0110 0001 0000 1001		addw	%0, %e1			*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0000 1001		addw	%0, %e1			*/",
                           op[0], op[1]);
                  }
                SYNTAX("addw	%0, %e1");
#line 267 "rl78-decode.opc"
                ID(add); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
              
              }
            break;
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
              {
                /** 0110 0001 0001 0reg		addc	%0, %1				*/
#line 253 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0001 0reg		addc	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("addc	%0, %1");
#line 253 "rl78-decode.opc"
                ID(addc); DRB(reg); SR(A); Fzac;
              
              }
            break;
          case 0x18:
          case 0x1a:
          case 0x1b:
          case 0x1c:
          case 0x1d:
          case 0x1e:
          case 0x1f:
              {
                /** 0110 0001 0001 1rba		addc	%0, %1				*/
#line 250 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0001 1rba		addc	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("addc	%0, %1");
#line 250 "rl78-decode.opc"
                ID(addc); DR(A); SRB(rba); Fzac;
              
              }
            break;
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
              {
                /** 0110 0001 0010 0reg		sub	%0, %1				*/
#line 1142 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0010 0reg		sub	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("sub	%0, %1");
#line 1142 "rl78-decode.opc"
                ID(sub); DRB(reg); SR(A); Fzac;
              
              }
            break;
          case 0x28:
          case 0x2a:
          case 0x2b:
          case 0x2c:
          case 0x2d:
          case 0x2e:
          case 0x2f:
              {
                /** 0110 0001 0010 1rba		sub	%0, %1				*/
#line 1136 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0010 1rba		sub	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("sub	%0, %1");
#line 1136 "rl78-decode.opc"
                ID(sub); DR(A); SRB(rba); Fzac;
              
              }
            break;
          case 0x29:
              {
                /** 0110 0001 0010 1001		subw	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0010 1001		subw	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("subw	%0, %e1");
#line 1185 "rl78-decode.opc"
                ID(sub); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
              
              }
            break;
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
              {
                /** 0110 0001 0011 0reg		subc	%0, %1				*/
#line 1171 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0011 0reg		subc	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("subc	%0, %1");
#line 1171 "rl78-decode.opc"
                ID(subc); DRB(reg); SR(A); Fzac;
              
              }
            break;
          case 0x38:
          case 0x3a:
          case 0x3b:
          case 0x3c:
          case 0x3d:
          case 0x3e:
          case 0x3f:
              {
                /** 0110 0001 0011 1rba		subc	%0, %1				*/
#line 1168 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0011 1rba		subc	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("subc	%0, %1");
#line 1168 "rl78-decode.opc"
                ID(subc); DR(A); SRB(rba); Fzac;
              
              }
            break;
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
              {
                /** 0110 0001 0100 0reg		cmp	%0, %1				*/
#line 506 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0100 0reg		cmp	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("cmp	%0, %1");
#line 506 "rl78-decode.opc"
                ID(cmp); DRB(reg); SR(A); Fzac;
              
              }
            break;
          case 0x48:
          case 0x4a:
          case 0x4b:
          case 0x4c:
          case 0x4d:
          case 0x4e:
          case 0x4f:
              {
                /** 0110 0001 0100 1rba		cmp	%0, %1				*/
#line 503 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0100 1rba		cmp	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("cmp	%0, %1");
#line 503 "rl78-decode.opc"
                ID(cmp); DR(A); SRB(rba); Fzac;
              
              }
            break;
          case 0x49:
              {
                /** 0110 0001 0100 1001		cmpw	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0100 1001		cmpw	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("cmpw	%0, %e1");
#line 533 "rl78-decode.opc"
                ID(cmp); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
              
              }
            break;
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
              {
                /** 0110 0001 0101 0reg		and	%0, %1				*/
#line 305 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0101 0reg		and	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("and	%0, %1");
#line 305 "rl78-decode.opc"
                ID(and); DRB(reg); SR(A); Fz;
              
              }
            break;
          case 0x58:
          case 0x5a:
          case 0x5b:
          case 0x5c:
          case 0x5d:
          case 0x5e:
          case 0x5f:
              {
                /** 0110 0001 0101 1rba		and	%0, %1				*/
#line 302 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0101 1rba		and	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("and	%0, %1");
#line 302 "rl78-decode.opc"
                ID(and); DR(A); SRB(rba); Fz;
              
              }
            break;
          case 0x59:
              {
                /** 0110 0001 0101 1001		inc	%e0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0101 1001		inc	%e0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("inc	%e0");
#line 583 "rl78-decode.opc"
                ID(add); DM(HL, IMMU(1)); SC(1); Fza;
              
              }
            break;
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
              {
                /** 0110 0001 0110 0reg		or	%0, %1				*/
#line 960 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0110 0reg		or	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("or	%0, %1");
#line 960 "rl78-decode.opc"
                ID(or); DRB(reg); SR(A); Fz;
              
              }
            break;
          case 0x68:
          case 0x6a:
          case 0x6b:
          case 0x6c:
          case 0x6d:
          case 0x6e:
          case 0x6f:
              {
                /** 0110 0001 0110 1rba		or	%0, %1				*/
#line 957 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0110 1rba		or	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("or	%0, %1");
#line 957 "rl78-decode.opc"
                ID(or); DR(A); SRB(rba); Fz;
              
              }
            break;
          case 0x69:
              {
                /** 0110 0001 0110 1001		dec	%e0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0110 1001		dec	%e0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("dec	%e0");
#line 550 "rl78-decode.opc"
                ID(sub); DM(HL, IMMU(1)); SC(1); Fza;
              
              }
            break;
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
              {
                /** 0110 0001 0111 0reg		xor	%0, %1				*/
#line 1264 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0111 0reg		xor	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("xor	%0, %1");
#line 1264 "rl78-decode.opc"
                ID(xor); DRB(reg); SR(A); Fz;
              
              }
            break;
          case 0x78:
          case 0x7a:
          case 0x7b:
          case 0x7c:
          case 0x7d:
          case 0x7e:
          case 0x7f:
              {
                /** 0110 0001 0111 1rba		xor	%0, %1				*/
#line 1261 "rl78-decode.opc"
                int rba AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0111 1rba		xor	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  rba = 0x%x\n", rba);
                  }
                SYNTAX("xor	%0, %1");
#line 1261 "rl78-decode.opc"
                ID(xor); DR(A); SRB(rba); Fz;
              
              }
            break;
          case 0x79:
              {
                /** 0110 0001 0111 1001		incw	%e0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 0111 1001		incw	%e0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("incw	%e0");
#line 597 "rl78-decode.opc"
                ID(add); W(); DM(HL, IMMU(1)); SC(1);
              
              }
            break;
          case 0x80:
          case 0x81:
              {
                /** 0110 0001 1000 000		add	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1000 000		add	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("add	%0, %e1");
#line 206 "rl78-decode.opc"
                ID(add); DR(A); SM2(HL, B, 0); Fzac;
              
              }
            break;
          case 0x82:
              {
                /** 0110 0001 1000 0010		add	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1000 0010		add	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("add	%0, %e1");
#line 212 "rl78-decode.opc"
                ID(add); DR(A); SM2(HL, C, 0); Fzac;
              
              }
            break;
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0xa4:
          case 0xa5:
          case 0xa6:
          case 0xa7:
          case 0xb4:
          case 0xb5:
          case 0xb6:
          case 0xb7:
          case 0xc4:
          case 0xc5:
          case 0xc6:
          case 0xc7:
          case 0xd4:
          case 0xd5:
          case 0xd6:
          case 0xd7:
          case 0xe4:
          case 0xe5:
          case 0xe6:
          case 0xe7:
          case 0xf4:
          case 0xf5:
          case 0xf6:
          case 0xf7:
              {
                /** 0110 0001 1nnn 01mm		callt	[%x0]				*/
#line 432 "rl78-decode.opc"
                int nnn AU = (op[1] >> 4) & 0x07;
#line 432 "rl78-decode.opc"
                int mm AU = op[1] & 0x03;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1nnn 01mm		callt	[%x0]				*/",
                           op[0], op[1]);
                    printf ("  nnn = 0x%x,", nnn);
                    printf ("  mm = 0x%x\n", mm);
                  }
                SYNTAX("callt	[%x0]");
#line 432 "rl78-decode.opc"
                ID(call); DM(None, 0x80 + mm*16 + nnn*2);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x88:
          case 0x8a:
          case 0x8b:
          case 0x8c:
          case 0x8d:
          case 0x8e:
          case 0x8f:
              {
                /** 0110 0001 1000 1reg		xch	%0, %1				*/
#line 1223 "rl78-decode.opc"
                int reg AU = op[1] & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1000 1reg		xch	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  reg = 0x%x\n", reg);
                  }
                SYNTAX("xch	%0, %1");
#line 1223 "rl78-decode.opc"
                /* Note: DECW uses reg == X, so this must follow DECW */
                ID(xch); DR(A); SRB(reg);
              
              }
            break;
          case 0x89:
              {
                /** 0110 0001 1000 1001		decw	%e0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1000 1001		decw	%e0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("decw	%e0");
#line 564 "rl78-decode.opc"
                ID(sub); W(); DM(HL, IMMU(1)); SC(1);
              
              }
            break;
          case 0x90:
              {
                /** 0110 0001 1001 0000		addc	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1001 0000		addc	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("addc	%0, %e1");
#line 238 "rl78-decode.opc"
                ID(addc); DR(A); SM2(HL, B, 0); Fzac;
              
              }
            break;
          case 0x92:
              {
                /** 0110 0001 1001 0010		addc	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1001 0010		addc	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("addc	%0, %e1");
#line 241 "rl78-decode.opc"
                ID(addc); DR(A); SM2(HL, C, 0); Fzac;
              
              }
            break;
          case 0xa0:
          case 0xa1:
              {
                /** 0110 0001 1010 000		sub	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 000		sub	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("sub	%0, %e1");
#line 1124 "rl78-decode.opc"
                ID(sub); DR(A); SM2(HL, B, 0); Fzac;
              
              }
            break;
          case 0xa2:
              {
                /** 0110 0001 1010 0010		sub	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 0010		sub	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("sub	%0, %e1");
#line 1130 "rl78-decode.opc"
                ID(sub); DR(A); SM2(HL, C, 0); Fzac;
              
              }
            break;
          case 0xa8:
              {
                /** 0110 0001 1010 1000	       	xch	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1000	       	xch	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %1");
#line 1227 "rl78-decode.opc"
                ID(xch); DR(A); SM(None, SADDR);
              
              }
            break;
          case 0xa9:
              {
                /** 0110 0001 1010 1001		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1001		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1220 "rl78-decode.opc"
                ID(xch); DR(A); SM2(HL, C, 0);
              
              }
            break;
          case 0xaa:
              {
                /** 0110 0001 1010 1010		xch	%0, %e!1			*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1010		xch	%0, %e!1			*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e!1");
#line 1202 "rl78-decode.opc"
                ID(xch); DR(A); SM(None, IMMU(2));
              
              }
            break;
          case 0xab:
              {
                /** 0110 0001 1010 1011	       	xch	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1011	       	xch	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %1");
#line 1230 "rl78-decode.opc"
                ID(xch); DR(A); SM(None, SFR);
              
              }
            break;
          case 0xac:
              {
                /** 0110 0001 1010 1100		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1100		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1211 "rl78-decode.opc"
                ID(xch); DR(A); SM(HL, 0);
              
              }
            break;
          case 0xad:
              {
                /** 0110 0001 1010 1101		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1101		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1217 "rl78-decode.opc"
                ID(xch); DR(A); SM(HL, IMMU(1));
              
              }
            break;
          case 0xae:
              {
                /** 0110 0001 1010 1110		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1110		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1205 "rl78-decode.opc"
                ID(xch); DR(A); SM(DE, 0);
              
              }
            break;
          case 0xaf:
              {
                /** 0110 0001 1010 1111		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1010 1111		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1208 "rl78-decode.opc"
                ID(xch); DR(A); SM(DE, IMMU(1));
              
              }
            break;
          case 0xb0:
              {
                /** 0110 0001 1011 0000		subc	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1011 0000		subc	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("subc	%0, %e1");
#line 1156 "rl78-decode.opc"
                ID(subc); DR(A); SM2(HL, B, 0); Fzac;
              
              }
            break;
          case 0xb2:
              {
                /** 0110 0001 1011 0010		subc	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1011 0010		subc	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("subc	%0, %e1");
#line 1159 "rl78-decode.opc"
                ID(subc); DR(A); SM2(HL, C, 0); Fzac;
              
              }
            break;
          case 0xb8:
              {
                /** 0110 0001 1011 1000		mov	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1011 1000		mov	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("mov	%0, %1");
#line 722 "rl78-decode.opc"
                ID(mov); DR(ES); SM(None, SADDR);	
              
              }
            break;
          case 0xb9:
              {
                /** 0110 0001 1011 1001		xch	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1011 1001		xch	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xch	%0, %e1");
#line 1214 "rl78-decode.opc"
                ID(xch); DR(A); SM2(HL, B, 0);
              
              }
            break;
          case 0xc0:
              {
                /** 0110 0001 1100 0000		cmp	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 0000		cmp	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("cmp	%0, %e1");
#line 491 "rl78-decode.opc"
                ID(cmp); DR(A); SM2(HL, B, 0); Fzac;
              
              }
            break;
          case 0xc2:
              {
                /** 0110 0001 1100 0010		cmp	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 0010		cmp	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("cmp	%0, %e1");
#line 494 "rl78-decode.opc"
                ID(cmp); DR(A); SM2(HL, C, 0); Fzac;
              
              }
            break;
          case 0xc3:
              {
                /** 0110 0001 1100 0011		bh	$%a0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 0011		bh	$%a0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("bh	$%a0");
#line 339 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SR(None); COND(H);
              
              }
            break;
          case 0xc8:
              {
                /** 0110 0001 1100 1000		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1000		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1093 "rl78-decode.opc"
                ID(skip); COND(C);
              
              }
            break;
          case 0xc9:
              {
                /** 0110 0001 1100 1001		mov	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1001		mov	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("mov	%0, %e1");
#line 659 "rl78-decode.opc"
                ID(mov); DR(A); SM2(HL, B, 0);
              
              }
            break;
          case 0xca:
          case 0xda:
          case 0xea:
          case 0xfa:
              {
                /** 0110 0001 11rg 1010		call	%0				*/
#line 429 "rl78-decode.opc"
                int rg AU = (op[1] >> 4) & 0x03;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 11rg 1010		call	%0				*/",
                           op[0], op[1]);
                    printf ("  rg = 0x%x\n", rg);
                  }
                SYNTAX("call	%0");
#line 429 "rl78-decode.opc"
                ID(call); DRW(rg);
              
              }
            break;
          case 0xcb:
              {
                /** 0110 0001 1100 1011		br	ax				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1011		br	ax				*/",
                           op[0], op[1]);
                  }
                SYNTAX("br	ax");
#line 379 "rl78-decode.opc"
                ID(branch); DR(AX);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xcc:
              {
                /** 0110 0001 1100 1100		brk					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1100		brk					*/",
                           op[0], op[1]);
                  }
                SYNTAX("brk");
#line 387 "rl78-decode.opc"
                ID(break);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xcd:
              {
                /** 0110 0001 1100 1101		pop	%s0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1101		pop	%s0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("pop	%s0");
#line 988 "rl78-decode.opc"
                ID(mov); W(); DR(PSW); SPOP();
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xce:
              {
                /** 0110 0001 1100 1110		movs	%e0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1100 1110		movs	%e0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("movs	%e0, %1");
#line 810 "rl78-decode.opc"
                ID(mov); DM(HL, IMMU(1)); SR(X); Fzc;
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xcf:
          case 0xdf:
          case 0xef:
          case 0xff:
              {
                /** 0110 0001 11rb 1111		sel	rb%1				*/
#line 1040 "rl78-decode.opc"
                int rb AU = (op[1] >> 4) & 0x03;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 11rb 1111		sel	rb%1				*/",
                           op[0], op[1]);
                    printf ("  rb = 0x%x\n", rb);
                  }
                SYNTAX("sel	rb%1");
#line 1040 "rl78-decode.opc"
                ID(sel); SC(rb);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xd0:
              {
                /** 0110 0001 1101 0000		and	%0, %e1			*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 0000		and	%0, %e1			*/",
                           op[0], op[1]);
                  }
                SYNTAX("and	%0, %e1");
#line 290 "rl78-decode.opc"
                ID(and); DR(A); SM2(HL, B, 0); Fz;
              
              }
            break;
          case 0xd2:
              {
                /** 0110 0001 1101 0010		and	%0, %e1			*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 0010		and	%0, %e1			*/",
                           op[0], op[1]);
                  }
                SYNTAX("and	%0, %e1");
#line 296 "rl78-decode.opc"
                ID(and); DR(A); SM2(HL, C, 0); Fz;
              
              }
            break;
          case 0xd3:
              {
                /** 0110 0001 1101 0011		bnh	$%a0				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 0011		bnh	$%a0				*/",
                           op[0], op[1]);
                  }
                SYNTAX("bnh	$%a0");
#line 342 "rl78-decode.opc"
                ID(branch_cond); DC(pc+IMMS(1)+3); SR(None); COND(NH);
              
              }
            break;
          case 0xd8:
              {
                /** 0110 0001 1101 1000		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1000		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1099 "rl78-decode.opc"
                ID(skip); COND(NC);
              
              }
            break;
          case 0xd9:
              {
                /** 0110 0001 1101 1001		mov	%e0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1001		mov	%e0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("mov	%e0, %1");
#line 626 "rl78-decode.opc"
                ID(mov); DM2(HL, B, 0); SR(A);
              
              }
            break;
          case 0xdb:
              {
                /** 0110 0001 1101 1011		ror	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1011		ror	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("ror	%0, %1");
#line 1021 "rl78-decode.opc"
                ID(ror); DR(A); SC(1);
              
              }
            break;
          case 0xdc:
              {
                /** 0110 0001 1101 1100		rolc	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1100		rolc	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("rolc	%0, %1");
#line 1015 "rl78-decode.opc"
                ID(rolc); DR(A); SC(1);
              
              }
            break;
          case 0xdd:
              {
                /** 0110 0001 1101 1101		push	%s1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1101		push	%s1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("push	%s1");
#line 996 "rl78-decode.opc"
                ID(mov); W(); DPUSH(); SR(PSW);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xde:
              {
                /** 0110 0001 1101 1110		cmps	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1101 1110		cmps	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("cmps	%0, %e1");
#line 525 "rl78-decode.opc"
                ID(cmp); DR(X); SM(HL, IMMU(1)); Fzac;
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xe0:
              {
                /** 0110 0001 1110 0000		or	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 0000		or	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("or	%0, %e1");
#line 945 "rl78-decode.opc"
                ID(or); DR(A); SM2(HL, B, 0); Fz;
              
              }
            break;
          case 0xe2:
              {
                /** 0110 0001 1110 0010		or	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 0010		or	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("or	%0, %e1");
#line 951 "rl78-decode.opc"
                ID(or); DR(A); SM2(HL, C, 0); Fz;
              
              }
            break;
          case 0xe3:
              {
                /** 0110 0001 1110 0011		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 0011		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1096 "rl78-decode.opc"
                ID(skip); COND(H);
              
              }
            break;
          case 0xe8:
              {
                /** 0110 0001 1110 1000		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 1000		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1108 "rl78-decode.opc"
                ID(skip); COND(Z);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xe9:
              {
                /** 0110 0001 1110 1001		mov	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 1001		mov	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("mov	%0, %e1");
#line 662 "rl78-decode.opc"
                ID(mov); DR(A); SM2(HL, C, 0);
              
              }
            break;
          case 0xeb:
              {
                /** 0110 0001 1110 1011		rol	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 1011		rol	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("rol	%0, %1");
#line 1012 "rl78-decode.opc"
                ID(rol); DR(A); SC(1);
              
              }
            break;
          case 0xec:
              {
                /** 0110 0001 1110 1100		retb					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 1100		retb					*/",
                           op[0], op[1]);
                  }
                SYNTAX("retb");
#line 1007 "rl78-decode.opc"
                ID(reti);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xed:
              {
                /** 0110 0001 1110 1101		halt					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1110 1101		halt					*/",
                           op[0], op[1]);
                  }
                SYNTAX("halt");
#line 575 "rl78-decode.opc"
                ID(halt);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0xee:
          case 0xfe:
              {
                /** 0110 0001 111r 1110		rolwc	%0, %1				*/
#line 1018 "rl78-decode.opc"
                int r AU = (op[1] >> 4) & 0x01;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 111r 1110		rolwc	%0, %1				*/",
                           op[0], op[1]);
                    printf ("  r = 0x%x\n", r);
                  }
                SYNTAX("rolwc	%0, %1");
#line 1018 "rl78-decode.opc"
                ID(rolc); W(); DRW(r); SC(1);
              
              }
            break;
          case 0xf0:
              {
                /** 0110 0001 1111 0000		xor	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 0000		xor	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xor	%0, %e1");
#line 1249 "rl78-decode.opc"
                ID(xor); DR(A); SM2(HL, B, 0); Fz;
              
              }
            break;
          case 0xf2:
              {
                /** 0110 0001 1111 0010		xor	%0, %e1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 0010		xor	%0, %e1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("xor	%0, %e1");
#line 1255 "rl78-decode.opc"
                ID(xor); DR(A); SM2(HL, C, 0); Fz;
              
              }
            break;
          case 0xf3:
              {
                /** 0110 0001 1111 0011		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 0011		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1102 "rl78-decode.opc"
                ID(skip); COND(NH);
              
              }
            break;
          case 0xf8:
              {
                /** 0110 0001 1111 1000		sk%c1					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 1000		sk%c1					*/",
                           op[0], op[1]);
                  }
                SYNTAX("sk%c1");
#line 1105 "rl78-decode.opc"
                ID(skip); COND(NZ);
              
              }
            break;
          case 0xf9:
              {
                /** 0110 0001 1111 1001		mov	%e0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 1001		mov	%e0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("mov	%e0, %1");
#line 635 "rl78-decode.opc"
                ID(mov); DM2(HL, C, 0); SR(A);
              
              }
            break;
          case 0xfb:
              {
                /** 0110 0001 1111 1011		rorc	%0, %1				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 1011		rorc	%0, %1				*/",
                           op[0], op[1]);
                  }
                SYNTAX("rorc	%0, %1");
#line 1024 "rl78-decode.opc"
                ID(rorc); DR(A); SC(1);
              
              /*----------------------------------------------------------------------*/
              
              /* Note that the branch insns need to be listed before the shift
                 ones, as "shift count of zero" means "branch insn" */
              
              }
            break;
          case 0xfc:
              {
                /** 0110 0001 1111 1100		reti					*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 1100		reti					*/",
                           op[0], op[1]);
                  }
                SYNTAX("reti");
#line 1004 "rl78-decode.opc"
                ID(reti);
              
              }
            break;
          case 0xfd:
              {
                /** 0110 0001 1111 1101	stop						*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0110 0001 1111 1101	stop						*/",
                           op[0], op[1]);
                  }
                SYNTAX("stop");
#line 1113 "rl78-decode.opc"
                ID(stop);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          default: UNSUPPORTED(); break;
        }
      break;
    case 0x68:
        {
          /** 0110 1000			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1000			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 873 "rl78-decode.opc"
          ID(mov); W(); DM(C, IMMU(2)); SR(AX);
        
        }
      break;
    case 0x69:
        {
          /** 0110 1001			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1001			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 864 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(C, IMMU(2));
        
        }
      break;
    case 0x6a:
        {
          /** 0110 1010	       		or	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1010	       		or	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("or	%0, #%1");
#line 966 "rl78-decode.opc"
          ID(or); DM(None, SADDR); SC(IMMU(1)); Fz;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x6b:
        {
          /** 0110 1011	       		or	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1011	       		or	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("or	%0, %1");
#line 963 "rl78-decode.opc"
          ID(or); DR(A); SM(None, SADDR); Fz;
        
        }
      break;
    case 0x6c:
        {
          /** 0110 1100	       		or	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1100	       		or	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("or	%0, #%1");
#line 954 "rl78-decode.opc"
          ID(or); DR(A); SC(IMMU(1)); Fz;
        
        }
      break;
    case 0x6d:
        {
          /** 0110 1101			or	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1101			or	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("or	%0, %e1");
#line 942 "rl78-decode.opc"
          ID(or); DR(A); SM(HL, 0); Fz;
        
        }
      break;
    case 0x6e:
        {
          /** 0110 1110			or	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1110			or	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("or	%0, %e1");
#line 948 "rl78-decode.opc"
          ID(or); DR(A); SM(HL, IMMU(1)); Fz;
        
        }
      break;
    case 0x6f:
        {
          /** 0110 1111			or	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0110 1111			or	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("or	%0, %e!1");
#line 939 "rl78-decode.opc"
          ID(or); DR(A); SM(None, IMMU(2)); Fz;
        
        }
      break;
    case 0x70:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
        {
          /** 0111 0rba			mov	%0, %1				*/
#line 695 "rl78-decode.opc"
          int rba AU = op[0] & 0x07;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 0rba			mov	%0, %1				*/",
                     op[0]);
              printf ("  rba = 0x%x\n", rba);
            }
          SYNTAX("mov	%0, %1");
#line 695 "rl78-decode.opc"
          ID(mov); DRB(rba); SR(A);
        
        }
      break;
    case 0x71:
        GETBYTE ();
        switch (op[1] & 0xff)
        {
          case 0x00:
          case 0x10:
          case 0x20:
          case 0x30:
          case 0x40:
          case 0x50:
          case 0x60:
          case 0x70:
              {
                /** 0111 0001 0bit 0000		set1	%e!0				*/
#line 1045 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0000		set1	%e!0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("set1	%e!0");
#line 1045 "rl78-decode.opc"
                ID(mov); DM(None, IMMU(2)); DB(bit); SC(1);
              
              }
            break;
          case 0x01:
          case 0x11:
          case 0x21:
          case 0x31:
          case 0x41:
          case 0x51:
          case 0x61:
          case 0x71:
              {
                /** 0111 0001 0bit 0001		mov1	%0, cy				*/
#line 802 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0001		mov1	%0, cy				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	%0, cy");
#line 802 "rl78-decode.opc"
                ID(mov); DM(None, SADDR); DB(bit); SCY();
              
              }
            break;
          case 0x02:
          case 0x12:
          case 0x22:
          case 0x32:
          case 0x42:
          case 0x52:
          case 0x62:
          case 0x72:
              {
                /** 0111 0001 0bit 0010		set1	%0				*/
#line 1063 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0010		set1	%0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("set1	%0");
#line 1063 "rl78-decode.opc"
                ID(mov); DM(None, SADDR); DB(bit); SC(1);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x03:
          case 0x13:
          case 0x23:
          case 0x33:
          case 0x43:
          case 0x53:
          case 0x63:
          case 0x73:
              {
                /** 0111 0001 0bit 0011		clr1	%0				*/
#line 455 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0011		clr1	%0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("clr1	%0");
#line 455 "rl78-decode.opc"
                ID(mov); DM(None, SADDR); DB(bit); SC(0);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x04:
          case 0x14:
          case 0x24:
          case 0x34:
          case 0x44:
          case 0x54:
          case 0x64:
          case 0x74:
              {
                /** 0111 0001 0bit 0100		mov1	cy, %1				*/
#line 796 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0100		mov1	cy, %1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	cy, %1");
#line 796 "rl78-decode.opc"
                ID(mov); DCY(); SM(None, SADDR); SB(bit);
              
              }
            break;
          case 0x05:
          case 0x15:
          case 0x25:
          case 0x35:
          case 0x45:
          case 0x55:
          case 0x65:
          case 0x75:
              {
                /** 0111 0001 0bit 0101		and1	cy, %s1				*/
#line 325 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0101		and1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("and1	cy, %s1");
#line 325 "rl78-decode.opc"
                ID(and); DCY(); SM(None, SADDR); SB(bit);
              
              /*----------------------------------------------------------------------*/
              
              /* Note that the branch insns need to be listed before the shift
                 ones, as "shift count of zero" means "branch insn" */
              
              }
            break;
          case 0x06:
          case 0x16:
          case 0x26:
          case 0x36:
          case 0x46:
          case 0x56:
          case 0x66:
          case 0x76:
              {
                /** 0111 0001 0bit 0110		or1	cy, %s1				*/
#line 980 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0110		or1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("or1	cy, %s1");
#line 980 "rl78-decode.opc"
                ID(or); DCY(); SM(None, SADDR); SB(bit);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x07:
          case 0x17:
          case 0x27:
          case 0x37:
          case 0x47:
          case 0x57:
          case 0x67:
          case 0x77:
              {
                /** 0111 0001 0bit 0111		xor1	cy, %s1				*/
#line 1284 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 0111		xor1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("xor1	cy, %s1");
#line 1284 "rl78-decode.opc"
                ID(xor); DCY(); SM(None, SADDR); SB(bit);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x08:
          case 0x18:
          case 0x28:
          case 0x38:
          case 0x48:
          case 0x58:
          case 0x68:
          case 0x78:
              {
                /** 0111 0001 0bit 1000		clr1	%e!0				*/
#line 437 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1000		clr1	%e!0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("clr1	%e!0");
#line 437 "rl78-decode.opc"
                ID(mov); DM(None, IMMU(2)); DB(bit); SC(0);
              
              }
            break;
          case 0x09:
          case 0x19:
          case 0x29:
          case 0x39:
          case 0x49:
          case 0x59:
          case 0x69:
          case 0x79:
              {
                /** 0111 0001 0bit 1001		mov1	%s0, cy				*/
#line 805 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1001		mov1	%s0, cy				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	%s0, cy");
#line 805 "rl78-decode.opc"
                ID(mov); DM(None, SFR); DB(bit); SCY();
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          case 0x0a:
          case 0x1a:
          case 0x2a:
          case 0x3a:
          case 0x4a:
          case 0x5a:
          case 0x6a:
          case 0x7a:
              {
                /** 0111 0001 0bit 1010		set1	%s0				*/
#line 1057 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1010		set1	%s0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("set1	%s0");
#line 1057 "rl78-decode.opc"
                op0 = SFR;
                ID(mov); DM(None, op0); DB(bit); SC(1);
                if (op0 == RL78_SFR_PSW && bit == 7)
                  rl78->syntax = "ei";
              
              }
            break;
          case 0x0b:
          case 0x1b:
          case 0x2b:
          case 0x3b:
          case 0x4b:
          case 0x5b:
          case 0x6b:
          case 0x7b:
              {
                /** 0111 0001 0bit 1011		clr1	%s0				*/
#line 449 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1011		clr1	%s0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("clr1	%s0");
#line 449 "rl78-decode.opc"
                op0 = SFR;
                ID(mov); DM(None, op0); DB(bit); SC(0);
                if (op0 == RL78_SFR_PSW && bit == 7)
                  rl78->syntax = "di";
              
              }
            break;
          case 0x0c:
          case 0x1c:
          case 0x2c:
          case 0x3c:
          case 0x4c:
          case 0x5c:
          case 0x6c:
          case 0x7c:
              {
                /** 0111 0001 0bit 1100		mov1	cy, %s1				*/
#line 799 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1100		mov1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	cy, %s1");
#line 799 "rl78-decode.opc"
                ID(mov); DCY(); SM(None, SFR); SB(bit);
              
              }
            break;
          case 0x0d:
          case 0x1d:
          case 0x2d:
          case 0x3d:
          case 0x4d:
          case 0x5d:
          case 0x6d:
          case 0x7d:
              {
                /** 0111 0001 0bit 1101		and1	cy, %s1				*/
#line 322 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1101		and1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("and1	cy, %s1");
#line 322 "rl78-decode.opc"
                ID(and); DCY(); SM(None, SFR); SB(bit);
              
              }
            break;
          case 0x0e:
          case 0x1e:
          case 0x2e:
          case 0x3e:
          case 0x4e:
          case 0x5e:
          case 0x6e:
          case 0x7e:
              {
                /** 0111 0001 0bit 1110		or1	cy, %s1				*/
#line 977 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1110		or1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("or1	cy, %s1");
#line 977 "rl78-decode.opc"
                ID(or); DCY(); SM(None, SFR); SB(bit);
              
              }
            break;
          case 0x0f:
          case 0x1f:
          case 0x2f:
          case 0x3f:
          case 0x4f:
          case 0x5f:
          case 0x6f:
          case 0x7f:
              {
                /** 0111 0001 0bit 1111		xor1	cy, %s1				*/
#line 1281 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 0bit 1111		xor1	cy, %s1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("xor1	cy, %s1");
#line 1281 "rl78-decode.opc"
                ID(xor); DCY(); SM(None, SFR); SB(bit);
              
              }
            break;
          case 0x80:
              {
                /** 0111 0001 1000 0000		set1	cy				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1000 0000		set1	cy				*/",
                           op[0], op[1]);
                  }
                SYNTAX("set1	cy");
#line 1054 "rl78-decode.opc"
                ID(mov); DCY(); SC(1);
              
              }
            break;
          case 0x81:
          case 0x91:
          case 0xa1:
          case 0xb1:
          case 0xc1:
          case 0xd1:
          case 0xe1:
          case 0xf1:
              {
                /** 0111 0001 1bit 0001		mov1	%e0, cy				*/
#line 784 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0001		mov1	%e0, cy				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	%e0, cy");
#line 784 "rl78-decode.opc"
                ID(mov); DM(HL, 0); DB(bit); SCY();
              
              }
            break;
          case 0x82:
          case 0x92:
          case 0xa2:
          case 0xb2:
          case 0xc2:
          case 0xd2:
          case 0xe2:
          case 0xf2:
              {
                /** 0111 0001 1bit 0010		set1	%e0				*/
#line 1048 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0010		set1	%e0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("set1	%e0");
#line 1048 "rl78-decode.opc"
                ID(mov); DM(HL, 0); DB(bit); SC(1);
              
              }
            break;
          case 0x83:
          case 0x93:
          case 0xa3:
          case 0xb3:
          case 0xc3:
          case 0xd3:
          case 0xe3:
          case 0xf3:
              {
                /** 0111 0001 1bit 0011		clr1	%e0				*/
#line 440 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0011		clr1	%e0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("clr1	%e0");
#line 440 "rl78-decode.opc"
                ID(mov); DM(HL, 0); DB(bit); SC(0);
              
              }
            break;
          case 0x84:
          case 0x94:
          case 0xa4:
          case 0xb4:
          case 0xc4:
          case 0xd4:
          case 0xe4:
          case 0xf4:
              {
                /** 0111 0001 1bit 0100		mov1	cy, %e1				*/
#line 790 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0100		mov1	cy, %e1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	cy, %e1");
#line 790 "rl78-decode.opc"
                ID(mov); DCY(); SM(HL, 0); SB(bit);
              
              }
            break;
          case 0x85:
          case 0x95:
          case 0xa5:
          case 0xb5:
          case 0xc5:
          case 0xd5:
          case 0xe5:
          case 0xf5:
              {
                /** 0111 0001 1bit 0101		and1	cy, %e1			*/
#line 316 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0101		and1	cy, %e1			*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("and1	cy, %e1");
#line 316 "rl78-decode.opc"
                ID(and); DCY(); SM(HL, 0); SB(bit);
              
              }
            break;
          case 0x86:
          case 0x96:
          case 0xa6:
          case 0xb6:
          case 0xc6:
          case 0xd6:
          case 0xe6:
          case 0xf6:
              {
                /** 0111 0001 1bit 0110		or1	cy, %e1				*/
#line 971 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0110		or1	cy, %e1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("or1	cy, %e1");
#line 971 "rl78-decode.opc"
                ID(or); DCY(); SM(HL, 0); SB(bit);
              
              }
            break;
          case 0x87:
          case 0x97:
          case 0xa7:
          case 0xb7:
          case 0xc7:
          case 0xd7:
          case 0xe7:
          case 0xf7:
              {
                /** 0111 0001 1bit 0111		xor1	cy, %e1				*/
#line 1275 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 0111		xor1	cy, %e1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("xor1	cy, %e1");
#line 1275 "rl78-decode.opc"
                ID(xor); DCY(); SM(HL, 0); SB(bit);
              
              }
            break;
          case 0x88:
              {
                /** 0111 0001 1000 1000		clr1	cy				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1000 1000		clr1	cy				*/",
                           op[0], op[1]);
                  }
                SYNTAX("clr1	cy");
#line 446 "rl78-decode.opc"
                ID(mov); DCY(); SC(0);
              
              }
            break;
          case 0x89:
          case 0x99:
          case 0xa9:
          case 0xb9:
          case 0xc9:
          case 0xd9:
          case 0xe9:
          case 0xf9:
              {
                /** 0111 0001 1bit 1001		mov1	%e0, cy				*/
#line 787 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1001		mov1	%e0, cy				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	%e0, cy");
#line 787 "rl78-decode.opc"
                ID(mov); DR(A); DB(bit); SCY();
              
              }
            break;
          case 0x8a:
          case 0x9a:
          case 0xaa:
          case 0xba:
          case 0xca:
          case 0xda:
          case 0xea:
          case 0xfa:
              {
                /** 0111 0001 1bit 1010		set1	%0				*/
#line 1051 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1010		set1	%0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("set1	%0");
#line 1051 "rl78-decode.opc"
                ID(mov); DR(A); DB(bit); SC(1);
              
              }
            break;
          case 0x8b:
          case 0x9b:
          case 0xab:
          case 0xbb:
          case 0xcb:
          case 0xdb:
          case 0xeb:
          case 0xfb:
              {
                /** 0111 0001 1bit 1011		clr1	%0				*/
#line 443 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1011		clr1	%0				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("clr1	%0");
#line 443 "rl78-decode.opc"
                ID(mov); DR(A); DB(bit); SC(0);
              
              }
            break;
          case 0x8c:
          case 0x9c:
          case 0xac:
          case 0xbc:
          case 0xcc:
          case 0xdc:
          case 0xec:
          case 0xfc:
              {
                /** 0111 0001 1bit 1100		mov1	cy, %e1				*/
#line 793 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1100		mov1	cy, %e1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("mov1	cy, %e1");
#line 793 "rl78-decode.opc"
                ID(mov); DCY(); SR(A); SB(bit);
              
              }
            break;
          case 0x8d:
          case 0x9d:
          case 0xad:
          case 0xbd:
          case 0xcd:
          case 0xdd:
          case 0xed:
          case 0xfd:
              {
                /** 0111 0001 1bit 1101		and1	cy, %1				*/
#line 319 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1101		and1	cy, %1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("and1	cy, %1");
#line 319 "rl78-decode.opc"
                ID(and); DCY(); SR(A); SB(bit);
              
              }
            break;
          case 0x8e:
          case 0x9e:
          case 0xae:
          case 0xbe:
          case 0xce:
          case 0xde:
          case 0xee:
          case 0xfe:
              {
                /** 0111 0001 1bit 1110		or1	cy, %1				*/
#line 974 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1110		or1	cy, %1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("or1	cy, %1");
#line 974 "rl78-decode.opc"
                ID(or); DCY(); SR(A); SB(bit);
              
              }
            break;
          case 0x8f:
          case 0x9f:
          case 0xaf:
          case 0xbf:
          case 0xcf:
          case 0xdf:
          case 0xef:
          case 0xff:
              {
                /** 0111 0001 1bit 1111		xor1	cy, %1				*/
#line 1278 "rl78-decode.opc"
                int bit AU = (op[1] >> 4) & 0x07;
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1bit 1111		xor1	cy, %1				*/",
                           op[0], op[1]);
                    printf ("  bit = 0x%x\n", bit);
                  }
                SYNTAX("xor1	cy, %1");
#line 1278 "rl78-decode.opc"
                ID(xor); DCY(); SR(A); SB(bit);
              
              }
            break;
          case 0xc0:
              {
                /** 0111 0001 1100 0000		not1	cy				*/
                if (trace)
                  {
                    printf ("\033[33m%s\033[0m  %02x %02x\n",
                           "/** 0111 0001 1100 0000		not1	cy				*/",
                           op[0], op[1]);
                  }
                SYNTAX("not1	cy");
#line 915 "rl78-decode.opc"
                ID(xor); DCY(); SC(1);
              
              /*----------------------------------------------------------------------*/
              
              }
            break;
          default: UNSUPPORTED(); break;
        }
      break;
    case 0x78:
        {
          /** 0111 1000			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1000			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 876 "rl78-decode.opc"
          ID(mov); W(); DM(BC, IMMU(2)); SR(AX);
        
        }
      break;
    case 0x79:
        {
          /** 0111 1001			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1001			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 867 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(BC, IMMU(2));
        
        }
      break;
    case 0x7a:
        {
          /** 0111 1010	       		xor	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1010	       		xor	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("xor	%0, #%1");
#line 1270 "rl78-decode.opc"
          ID(xor); DM(None, SADDR); SC(IMMU(1)); Fz;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x7b:
        {
          /** 0111 1011	       		xor	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1011	       		xor	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("xor	%0, %1");
#line 1267 "rl78-decode.opc"
          ID(xor); DR(A); SM(None, SADDR); Fz;
        
        }
      break;
    case 0x7c:
        {
          /** 0111 1100	       		xor	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1100	       		xor	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("xor	%0, #%1");
#line 1258 "rl78-decode.opc"
          ID(xor); DR(A); SC(IMMU(1)); Fz;
        
        }
      break;
    case 0x7d:
        {
          /** 0111 1101			xor	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1101			xor	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("xor	%0, %e1");
#line 1246 "rl78-decode.opc"
          ID(xor); DR(A); SM(HL, 0); Fz;
        
        }
      break;
    case 0x7e:
        {
          /** 0111 1110			xor	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1110			xor	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("xor	%0, %e1");
#line 1252 "rl78-decode.opc"
          ID(xor); DR(A); SM(HL, IMMU(1)); Fz;
        
        }
      break;
    case 0x7f:
        {
          /** 0111 1111			xor	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 0111 1111			xor	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("xor	%0, %e!1");
#line 1243 "rl78-decode.opc"
          ID(xor); DR(A); SM(None, IMMU(2)); Fz;
        
        }
      break;
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
        {
          /** 1000 0reg			inc	%0				*/
#line 586 "rl78-decode.opc"
          int reg AU = op[0] & 0x07;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 0reg			inc	%0				*/",
                     op[0]);
              printf ("  reg = 0x%x\n", reg);
            }
          SYNTAX("inc	%0");
#line 586 "rl78-decode.opc"
          ID(add); DRB(reg); SC(1); Fza;
        
        }
      break;
    case 0x88:
        {
          /** 1000 1000			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1000			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 665 "rl78-decode.opc"
          ID(mov); DR(A); SM(SP, IMMU(1));
        
        }
      break;
    case 0x89:
        {
          /** 1000 1001			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1001			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 647 "rl78-decode.opc"
          ID(mov); DR(A); SM(DE, 0);
        
        }
      break;
    case 0x8a:
        {
          /** 1000 1010			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1010			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 650 "rl78-decode.opc"
          ID(mov); DR(A); SM(DE, IMMU(1));
        
        }
      break;
    case 0x8b:
        {
          /** 1000 1011			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1011			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 653 "rl78-decode.opc"
          ID(mov); DR(A); SM(HL, 0);
        
        }
      break;
    case 0x8c:
        {
          /** 1000 1100			mov	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1100			mov	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e1");
#line 656 "rl78-decode.opc"
          ID(mov); DR(A); SM(HL, IMMU(1));
        
        }
      break;
    case 0x8d:
        {
          /** 1000 1101			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1101			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 689 "rl78-decode.opc"
          ID(mov); DR(A); SM(None, SADDR);
        
        }
      break;
    case 0x8e:
        {
          /** 1000 1110			mov	%0, %s1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1110			mov	%0, %s1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %s1");
#line 686 "rl78-decode.opc"
          ID(mov); DR(A); SM(None, SFR);
        
        }
      break;
    case 0x8f:
        {
          /** 1000 1111			mov	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1000 1111			mov	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e!1");
#line 644 "rl78-decode.opc"
          ID(mov); DR(A); SM(None, IMMU(2));
        
        }
      break;
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
        {
          /** 1001 0reg			dec	%0				*/
#line 553 "rl78-decode.opc"
          int reg AU = op[0] & 0x07;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 0reg			dec	%0				*/",
                     op[0]);
              printf ("  reg = 0x%x\n", reg);
            }
          SYNTAX("dec	%0");
#line 553 "rl78-decode.opc"
          ID(sub); DRB(reg); SC(1); Fza;
        
        }
      break;
    case 0x98:
        {
          /** 1001 1000			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1000			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 641 "rl78-decode.opc"
          ID(mov); DM(SP, IMMU(1)); SR(A);
        
        }
      break;
    case 0x99:
        {
          /** 1001 1001			mov	%e0,%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1001			mov	%e0,%1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0,%1");
#line 614 "rl78-decode.opc"
          ID(mov); DM(DE, 0); SR(A);
        
        }
      break;
    case 0x9a:
        {
          /** 1001 1010			mov	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1010			mov	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, %1");
#line 620 "rl78-decode.opc"
          ID(mov); DM(DE, IMMU(1)); SR(A);
        
        }
      break;
    case 0x9b:
        {
          /** 1001 1011			mov	%e0,%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1011			mov	%e0,%1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0,%1");
#line 623 "rl78-decode.opc"
          ID(mov); DM(HL, 0); SR(A);
        
        }
      break;
    case 0x9c:
        {
          /** 1001 1100			mov	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1100			mov	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, %1");
#line 632 "rl78-decode.opc"
          ID(mov); DM(HL, IMMU(1)); SR(A);
        
        }
      break;
    case 0x9d:
        {
          /** 1001 1101			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1101			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 746 "rl78-decode.opc"
          ID(mov); DM(None, SADDR); SR(A);
        
        }
      break;
    case 0x9e:
        {
          /** 1001 1110			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1110			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 779 "rl78-decode.opc"
          ID(mov); DM(None, SFR); SR(A);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0x9f:
        {
          /** 1001 1111			mov	%e!0, %1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1001 1111			mov	%e!0, %1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e!0, %1");
#line 611 "rl78-decode.opc"
          ID(mov); DM(None, IMMU(2)); SR(A);
        
        }
      break;
    case 0xa0:
        {
          /** 1010 0000			inc	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 0000			inc	%e!0				*/",
                     op[0]);
            }
          SYNTAX("inc	%e!0");
#line 580 "rl78-decode.opc"
          ID(add); DM(None, IMMU(2)); SC(1); Fza;
        
        }
      break;
    case 0xa1:
    case 0xa3:
    case 0xa5:
    case 0xa7:
        {
          /** 1010 0rg1			incw	%0				*/
#line 600 "rl78-decode.opc"
          int rg AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 0rg1			incw	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("incw	%0");
#line 600 "rl78-decode.opc"
          ID(add); W(); DRW(rg); SC(1);
        
        }
      break;
    case 0xa2:
        {
          /** 1010 0010			incw	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 0010			incw	%e!0				*/",
                     op[0]);
            }
          SYNTAX("incw	%e!0");
#line 594 "rl78-decode.opc"
          ID(add); W(); DM(None, IMMU(2)); SC(1);
        
        }
      break;
    case 0xa4:
        {
          /** 1010 0100			inc	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 0100			inc	%0				*/",
                     op[0]);
            }
          SYNTAX("inc	%0");
#line 589 "rl78-decode.opc"
          ID(add); DM(None, SADDR); SC(1); Fza;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xa6:
        {
          /** 1010 0110			incw	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 0110			incw	%0				*/",
                     op[0]);
            }
          SYNTAX("incw	%0");
#line 603 "rl78-decode.opc"
          ID(add); W(); DM(None, SADDR); SC(1);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xa8:
        {
          /** 1010 1000			movw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1000			movw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %1");
#line 849 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(SP, IMMU(1));
        
        }
      break;
    case 0xa9:
        {
          /** 1010 1001			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1001			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 837 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(DE, 0);
        
        }
      break;
    case 0xaa:
        {
          /** 1010 1010			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1010			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 840 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(DE, IMMU(1));
        
        }
      break;
    case 0xab:
        {
          /** 1010 1011			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1011			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 843 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(HL, 0);
        
        }
      break;
    case 0xac:
        {
          /** 1010 1100			movw	%0, %e1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1100			movw	%0, %e1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e1");
#line 846 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(HL, IMMU(1));
        
        }
      break;
    case 0xad:
        {
          /** 1010 1101			movw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1101			movw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %1");
#line 879 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(None, SADDR);
        
        }
      break;
    case 0xae:
        {
          /** 1010 1110			movw	%0, %s1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1110			movw	%0, %s1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %s1");
#line 882 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(None, SFR);
        
        }
      break;
    case 0xaf:
        {
          /** 1010 1111			movw	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1010 1111			movw	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %e!1");
#line 833 "rl78-decode.opc"
          ID(mov); W(); DR(AX); SM(None, IMMU(2));
        
        
        }
      break;
    case 0xb0:
        {
          /** 1011 0000			dec	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 0000			dec	%e!0				*/",
                     op[0]);
            }
          SYNTAX("dec	%e!0");
#line 547 "rl78-decode.opc"
          ID(sub); DM(None, IMMU(2)); SC(1); Fza;
        
        }
      break;
    case 0xb1:
    case 0xb3:
    case 0xb5:
    case 0xb7:
        {
          /** 1011 0rg1 			decw	%0				*/
#line 567 "rl78-decode.opc"
          int rg AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 0rg1 			decw	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("decw	%0");
#line 567 "rl78-decode.opc"
          ID(sub); W(); DRW(rg); SC(1);
        
        }
      break;
    case 0xb2:
        {
          /** 1011 0010			decw	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 0010			decw	%e!0				*/",
                     op[0]);
            }
          SYNTAX("decw	%e!0");
#line 561 "rl78-decode.opc"
          ID(sub); W(); DM(None, IMMU(2)); SC(1);
        
        }
      break;
    case 0xb4:
        {
          /** 1011 0100			dec	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 0100			dec	%0				*/",
                     op[0]);
            }
          SYNTAX("dec	%0");
#line 556 "rl78-decode.opc"
          ID(sub); DM(None, SADDR); SC(1); Fza;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xb6:
        {
          /** 1011 0110			decw	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 0110			decw	%0				*/",
                     op[0]);
            }
          SYNTAX("decw	%0");
#line 570 "rl78-decode.opc"
          ID(sub); W(); DM(None, SADDR); SC(1);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xb8:
        {
          /** 1011 1000			movw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1000			movw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %1");
#line 830 "rl78-decode.opc"
          ID(mov); W(); DM(SP, IMMU(1)); SR(AX);
        
        }
      break;
    case 0xb9:
        {
          /** 1011 1001			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1001			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 818 "rl78-decode.opc"
          ID(mov); W(); DM(DE, 0); SR(AX);
        
        }
      break;
    case 0xba:
        {
          /** 1011 1010			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1010			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 821 "rl78-decode.opc"
          ID(mov); W(); DM(DE, IMMU(1)); SR(AX);
        
        }
      break;
    case 0xbb:
        {
          /** 1011 1011			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1011			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 824 "rl78-decode.opc"
          ID(mov); W(); DM(HL, 0); SR(AX);
        
        }
      break;
    case 0xbc:
        {
          /** 1011 1100			movw	%e0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1100			movw	%e0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%e0, %1");
#line 827 "rl78-decode.opc"
          ID(mov); W(); DM(HL, IMMU(1)); SR(AX);
        
        }
      break;
    case 0xbd:
        {
          /** 1011 1101			movw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1101			movw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %1");
#line 894 "rl78-decode.opc"
          ID(mov); W(); DM(None, SADDR); SR(AX);
        
        }
      break;
    case 0xbe:
        {
          /** 1011 1110			movw	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1110			movw	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, %1");
#line 900 "rl78-decode.opc"
          ID(mov); W(); DM(None, SFR); SR(AX);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xbf:
        {
          /** 1011 1111			movw	%e!0, %1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1011 1111			movw	%e!0, %1			*/",
                     op[0]);
            }
          SYNTAX("movw	%e!0, %1");
#line 815 "rl78-decode.opc"
          ID(mov); W(); DM(None, IMMU(2)); SR(AX);
        
        }
      break;
    case 0xc0:
    case 0xc2:
    case 0xc4:
    case 0xc6:
        {
          /** 1100 0rg0			pop	%0				*/
#line 985 "rl78-decode.opc"
          int rg AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 0rg0			pop	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("pop	%0");
#line 985 "rl78-decode.opc"
          ID(mov); W(); DRW(rg); SPOP();
        
        }
      break;
    case 0xc1:
    case 0xc3:
    case 0xc5:
    case 0xc7:
        {
          /** 1100 0rg1			push	%1				*/
#line 993 "rl78-decode.opc"
          int rg AU = (op[0] >> 1) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 0rg1			push	%1				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("push	%1");
#line 993 "rl78-decode.opc"
          ID(mov); W(); DPUSH(); SRW(rg);
        
        }
      break;
    case 0xc8:
        {
          /** 1100 1000			mov	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1000			mov	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, #%1");
#line 638 "rl78-decode.opc"
          ID(mov); DM(SP, IMMU(1)); SC(IMMU(1));
        
        }
      break;
    case 0xc9:
        {
          /** 1100 1001			movw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1001			movw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, #%1");
#line 891 "rl78-decode.opc"
          ID(mov); W(); DM(None, SADDR); SC(IMMU(2));
        
        }
      break;
    case 0xca:
        {
          /** 1100 1010			mov	%e0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1010			mov	%e0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, #%1");
#line 617 "rl78-decode.opc"
          ID(mov); DM(DE, IMMU(1)); SC(IMMU(1));
        
        }
      break;
    case 0xcb:
        {
          /** 1100 1011			movw	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1011			movw	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("movw	%0, #%1");
#line 897 "rl78-decode.opc"
          ID(mov); W(); DM(None, SFR); SC(IMMU(2));
        
        }
      break;
    case 0xcc:
        {
          /** 1100 1100			mov	%e0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1100			mov	%e0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e0, #%1");
#line 629 "rl78-decode.opc"
          ID(mov); DM(HL, IMMU(1)); SC(IMMU(1));
        
        }
      break;
    case 0xcd:
        {
          /** 1100 1101			mov	%0, #%1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1101			mov	%0, #%1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, #%1");
#line 743 "rl78-decode.opc"
          ID(mov); DM(None, SADDR); SC(IMMU(1));
        
        }
      break;
    case 0xce:
        {
          /** 1100 1110			mov	%s0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1110			mov	%s0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%s0, #%1");
#line 749 "rl78-decode.opc"
          op0 = SFR;
          op1 = IMMU(1);
          ID(mov); DM(None, op0); SC(op1);
          if (op0 == 0xffffb)
            switch (op1)
              {
              case 0x01:
        	rl78->syntax = "mulhu"; ID(mulhu);
        	break;
              case 0x02:
        	rl78->syntax = "mulh"; ID(mulh);
        	break;
              case 0x03:
        	rl78->syntax = "divhu"; ID(divhu);
        	break;
              case 0x04:
        	rl78->syntax = "divwu <old-encoding>"; ID(divwu);
        	break;
              case 0x05:
        	rl78->syntax = "machu"; ID(machu);
        	break;
              case 0x06:
        	rl78->syntax = "mach"; ID(mach);
        	break;
              case 0x0b:
        	rl78->syntax = "divwu"; ID(divwu);
        	break;
              }
        
        }
      break;
    case 0xcf:
        {
          /** 1100 1111			mov	%e!0, #%1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1100 1111			mov	%e!0, #%1			*/",
                     op[0]);
            }
          SYNTAX("mov	%e!0, #%1");
#line 608 "rl78-decode.opc"
          ID(mov); DM(None, IMMU(2)); SC(IMMU(1));
        
        }
      break;
    case 0xd0:
    case 0xd1:
    case 0xd2:
    case 0xd3:
        {
          /** 1101 00rg			cmp0	%0				*/
#line 517 "rl78-decode.opc"
          int rg AU = op[0] & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 00rg			cmp0	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("cmp0	%0");
#line 517 "rl78-decode.opc"
          ID(cmp); DRB(rg); SC(0); Fzac;
        
        }
      break;
    case 0xd4:
        {
          /** 1101 0100			cmp0	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 0100			cmp0	%0				*/",
                     op[0]);
            }
          SYNTAX("cmp0	%0");
#line 520 "rl78-decode.opc"
          ID(cmp); DM(None, SADDR); SC(0); Fzac;
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xd5:
        {
          /** 1101 0101			cmp0	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 0101			cmp0	%e!0				*/",
                     op[0]);
            }
          SYNTAX("cmp0	%e!0");
#line 514 "rl78-decode.opc"
          ID(cmp); DM(None, IMMU(2)); SC(0); Fzac;
        
        }
      break;
    case 0xd6:
        {
          /** 1101 0110			mulu	x				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 0110			mulu	x				*/",
                     op[0]);
            }
          SYNTAX("mulu	x");
#line 905 "rl78-decode.opc"
          ID(mulu);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xd7:
        {
          /** 1101 0111			ret					*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 0111			ret					*/",
                     op[0]);
            }
          SYNTAX("ret");
#line 1001 "rl78-decode.opc"
          ID(ret);
        
        }
      break;
    case 0xd8:
        {
          /** 1101 1000			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1000			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 710 "rl78-decode.opc"
          ID(mov); DR(X); SM(None, SADDR);
        
        }
      break;
    case 0xd9:
        {
          /** 1101 1001			mov	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1001			mov	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e!1");
#line 707 "rl78-decode.opc"
          ID(mov); DR(X); SM(None, IMMU(2));
        
        }
      break;
    case 0xda:
    case 0xea:
    case 0xfa:
        {
          /** 11ra 1010			movw	%0, %1				*/
#line 888 "rl78-decode.opc"
          int ra AU = (op[0] >> 4) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 11ra 1010			movw	%0, %1				*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("movw	%0, %1");
#line 888 "rl78-decode.opc"
          ID(mov); W(); DRW(ra); SM(None, SADDR);
        
        }
      break;
    case 0xdb:
    case 0xeb:
    case 0xfb:
        {
          /** 11ra 1011			movw	%0, %e!1			*/
#line 885 "rl78-decode.opc"
          int ra AU = (op[0] >> 4) & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 11ra 1011			movw	%0, %e!1			*/",
                     op[0]);
              printf ("  ra = 0x%x\n", ra);
            }
          SYNTAX("movw	%0, %e!1");
#line 885 "rl78-decode.opc"
          ID(mov); W(); DRW(ra); SM(None, IMMU(2));
        
        }
      break;
    case 0xdc:
        {
          /** 1101 1100			bc	$%a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1100			bc	$%a0				*/",
                     op[0]);
            }
          SYNTAX("bc	$%a0");
#line 333 "rl78-decode.opc"
          ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(C);
        
        }
      break;
    case 0xdd:
        {
          /** 1101 1101			bz	$%a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1101			bz	$%a0				*/",
                     op[0]);
            }
          SYNTAX("bz	$%a0");
#line 345 "rl78-decode.opc"
          ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(Z);
        
        }
      break;
    case 0xde:
        {
          /** 1101 1110			bnc	$%a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1110			bnc	$%a0				*/",
                     op[0]);
            }
          SYNTAX("bnc	$%a0");
#line 336 "rl78-decode.opc"
          ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(NC);
        
        }
      break;
    case 0xdf:
        {
          /** 1101 1111			bnz	$%a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1101 1111			bnz	$%a0				*/",
                     op[0]);
            }
          SYNTAX("bnz	$%a0");
#line 348 "rl78-decode.opc"
          ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(NZ);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xe0:
    case 0xe1:
    case 0xe2:
    case 0xe3:
        {
          /** 1110 00rg			oneb	%0				*/
#line 923 "rl78-decode.opc"
          int rg AU = op[0] & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 00rg			oneb	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("oneb	%0");
#line 923 "rl78-decode.opc"
          ID(mov); DRB(rg); SC(1);
        
        }
      break;
    case 0xe4:
        {
          /** 1110 0100			oneb	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 0100			oneb	%0				*/",
                     op[0]);
            }
          SYNTAX("oneb	%0");
#line 926 "rl78-decode.opc"
          ID(mov); DM(None, SADDR); SC(1);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xe5:
        {
          /** 1110 0101			oneb	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 0101			oneb	%e!0				*/",
                     op[0]);
            }
          SYNTAX("oneb	%e!0");
#line 920 "rl78-decode.opc"
          ID(mov); DM(None, IMMU(2)); SC(1);
        
        }
      break;
    case 0xe6:
        {
          /** 1110 0110			onew	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 0110			onew	%0				*/",
                     op[0]);
            }
          SYNTAX("onew	%0");
#line 931 "rl78-decode.opc"
          ID(mov); DR(AX); SC(1);
        
        }
      break;
    case 0xe7:
        {
          /** 1110 0111			onew	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 0111			onew	%0				*/",
                     op[0]);
            }
          SYNTAX("onew	%0");
#line 934 "rl78-decode.opc"
          ID(mov); DR(BC); SC(1);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xe8:
        {
          /** 1110 1000			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1000			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 698 "rl78-decode.opc"
          ID(mov); DR(B); SM(None, SADDR);
        
        }
      break;
    case 0xe9:
        {
          /** 1110 1001			mov	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1001			mov	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e!1");
#line 692 "rl78-decode.opc"
          ID(mov); DR(B); SM(None, IMMU(2));
        
        }
      break;
    case 0xec:
        {
          /** 1110 1100			br	!%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1100			br	!%!a0				*/",
                     op[0]);
            }
          SYNTAX("br	!%!a0");
#line 367 "rl78-decode.opc"
          ID(branch); DC(IMMU(3));
        
        }
      break;
    case 0xed:
        {
          /** 1110 1101			br	%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1101			br	%!a0				*/",
                     op[0]);
            }
          SYNTAX("br	%!a0");
#line 370 "rl78-decode.opc"
          ID(branch); DC(IMMU(2));
        
        }
      break;
    case 0xee:
        {
          /** 1110 1110			br	$%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1110			br	$%!a0				*/",
                     op[0]);
            }
          SYNTAX("br	$%!a0");
#line 373 "rl78-decode.opc"
          ID(branch); DC(pc+IMMS(2)+3);
        
        }
      break;
    case 0xef:
        {
          /** 1110 1111			br	$%a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1110 1111			br	$%a0				*/",
                     op[0]);
            }
          SYNTAX("br	$%a0");
#line 376 "rl78-decode.opc"
          ID(branch); DC(pc+IMMS(1)+2);
        
        }
      break;
    case 0xf0:
    case 0xf1:
    case 0xf2:
    case 0xf3:
        {
          /** 1111 00rg			clrb	%0				*/
#line 463 "rl78-decode.opc"
          int rg AU = op[0] & 0x03;
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 00rg			clrb	%0				*/",
                     op[0]);
              printf ("  rg = 0x%x\n", rg);
            }
          SYNTAX("clrb	%0");
#line 463 "rl78-decode.opc"
          ID(mov); DRB(rg); SC(0);
        
        }
      break;
    case 0xf4:
        {
          /** 1111 0100			clrb	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 0100			clrb	%0				*/",
                     op[0]);
            }
          SYNTAX("clrb	%0");
#line 466 "rl78-decode.opc"
          ID(mov); DM(None, SADDR); SC(0);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xf5:
        {
          /** 1111 0101			clrb	%e!0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 0101			clrb	%e!0				*/",
                     op[0]);
            }
          SYNTAX("clrb	%e!0");
#line 460 "rl78-decode.opc"
          ID(mov); DM(None, IMMU(2)); SC(0);
        
        }
      break;
    case 0xf6:
        {
          /** 1111 0110			clrw	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 0110			clrw	%0				*/",
                     op[0]);
            }
          SYNTAX("clrw	%0");
#line 471 "rl78-decode.opc"
          ID(mov); DR(AX); SC(0);
        
        }
      break;
    case 0xf7:
        {
          /** 1111 0111			clrw	%0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 0111			clrw	%0				*/",
                     op[0]);
            }
          SYNTAX("clrw	%0");
#line 474 "rl78-decode.opc"
          ID(mov); DR(BC); SC(0);
        
        /*----------------------------------------------------------------------*/
        
        }
      break;
    case 0xf8:
        {
          /** 1111 1000			mov	%0, %1				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1000			mov	%0, %1				*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %1");
#line 704 "rl78-decode.opc"
          ID(mov); DR(C); SM(None, SADDR);
        
        }
      break;
    case 0xf9:
        {
          /** 1111 1001			mov	%0, %e!1			*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1001			mov	%0, %e!1			*/",
                     op[0]);
            }
          SYNTAX("mov	%0, %e!1");
#line 701 "rl78-decode.opc"
          ID(mov); DR(C); SM(None, IMMU(2));
        
        }
      break;
    case 0xfc:
        {
          /** 1111 1100			call	!%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1100			call	!%!a0				*/",
                     op[0]);
            }
          SYNTAX("call	!%!a0");
#line 420 "rl78-decode.opc"
          ID(call); DC(IMMU(3));
        
        }
      break;
    case 0xfd:
        {
          /** 1111 1101			call	%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1101			call	%!a0				*/",
                     op[0]);
            }
          SYNTAX("call	%!a0");
#line 423 "rl78-decode.opc"
          ID(call); DC(IMMU(2));
        
        }
      break;
    case 0xfe:
        {
          /** 1111 1110			call	$%!a0				*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1110			call	$%!a0				*/",
                     op[0]);
            }
          SYNTAX("call	$%!a0");
#line 426 "rl78-decode.opc"
          ID(call); DC(pc+IMMS(2)+3);
        
        }
      break;
    case 0xff:
        {
          /** 1111 1111			brk1					*/
          if (trace)
            {
              printf ("\033[33m%s\033[0m  %02x\n",
                     "/** 1111 1111			brk1					*/",
                     op[0]);
            }
          SYNTAX("brk1");
#line 384 "rl78-decode.opc"
          ID(break);
        
        }
      break;
  }
#line 1289 "rl78-decode.opc"

  return rl78->n_bytes;
}
@


1.8
log
@	* rl78-decode.opc: Fix encoding of DIVWU insn.
	* rl78-decode.c: Regenerate.

	* config/rl78-parse.y: Fix encoding of DIVWU insn.
@
text
@d203 1
a203 1
#line 907 "rl78-decode.opc"
d286 1
a286 1
#line 1230 "rl78-decode.opc"
d442 1
a442 1
#line 855 "rl78-decode.opc"
d452 1
a452 1
#line 855 "rl78-decode.opc"
d462 1
a462 1
#line 852 "rl78-decode.opc"
d472 1
a472 1
#line 852 "rl78-decode.opc"
d609 1
a609 1
#line 1194 "rl78-decode.opc"
d622 1
a622 1
#line 1188 "rl78-decode.opc"
d632 1
a632 1
#line 1188 "rl78-decode.opc"
d647 1
a647 1
#line 1179 "rl78-decode.opc"
d662 1
a662 1
#line 1185 "rl78-decode.opc"
d677 1
a677 1
#line 1191 "rl78-decode.opc"
d722 1
a722 1
#line 1142 "rl78-decode.opc"
d739 1
a739 1
#line 1136 "rl78-decode.opc"
d754 1
a754 1
#line 1130 "rl78-decode.opc"
d769 1
a769 1
#line 1118 "rl78-decode.opc"
d784 1
a784 1
#line 1124 "rl78-decode.opc"
d799 1
a799 1
#line 1115 "rl78-decode.opc"
d810 1
a810 1
#line 849 "rl78-decode.opc"
d820 1
a820 1
#line 849 "rl78-decode.opc"
d946 1
a946 1
#line 1071 "rl78-decode.opc"
d956 1
a956 1
#line 1071 "rl78-decode.opc"
d964 1
a964 1
#line 1068 "rl78-decode.opc"
d974 1
a974 1
#line 1068 "rl78-decode.opc"
d982 1
a982 1
#line 1065 "rl78-decode.opc"
d992 1
a992 1
#line 1065 "rl78-decode.opc"
d1000 1
a1000 1
#line 1082 "rl78-decode.opc"
d1010 1
a1010 1
#line 1082 "rl78-decode.opc"
d1018 1
a1018 1
#line 1029 "rl78-decode.opc"
d1028 1
a1028 1
#line 1029 "rl78-decode.opc"
d1037 1
a1037 1
#line 1077 "rl78-decode.opc"
d1047 1
a1047 1
#line 1077 "rl78-decode.opc"
d1058 1
a1058 1
#line 1074 "rl78-decode.opc"
d1068 1
a1068 1
#line 1074 "rl78-decode.opc"
d1077 1
a1077 1
#line 1085 "rl78-decode.opc"
d1087 1
a1087 1
#line 1085 "rl78-decode.opc"
d1098 1
a1098 1
#line 1032 "rl78-decode.opc"
d1108 1
a1108 1
#line 1032 "rl78-decode.opc"
d1231 1
a1231 1
#line 1235 "rl78-decode.opc"
d1241 1
a1241 1
#line 1235 "rl78-decode.opc"
d1288 1
a1288 1
#line 1174 "rl78-decode.opc"
d1305 1
a1305 1
#line 1171 "rl78-decode.opc"
d1320 1
a1320 1
#line 1162 "rl78-decode.opc"
d1335 1
a1335 1
#line 1150 "rl78-decode.opc"
d1350 1
a1350 1
#line 1159 "rl78-decode.opc"
d1365 1
a1365 1
#line 1147 "rl78-decode.opc"
d1624 1
a1624 1
#line 867 "rl78-decode.opc"
d1639 1
a1639 1
#line 858 "rl78-decode.opc"
d1887 1
a1887 1
#line 1139 "rl78-decode.opc"
d1897 1
a1897 1
#line 1139 "rl78-decode.opc"
d1911 1
a1911 1
#line 1133 "rl78-decode.opc"
d1921 1
a1921 1
#line 1133 "rl78-decode.opc"
d1936 1
a1936 1
#line 1182 "rl78-decode.opc"
d1951 1
a1951 1
#line 1168 "rl78-decode.opc"
d1961 1
a1961 1
#line 1168 "rl78-decode.opc"
d1975 1
a1975 1
#line 1165 "rl78-decode.opc"
d1985 1
a1985 1
#line 1165 "rl78-decode.opc"
d2128 1
a2128 1
#line 957 "rl78-decode.opc"
d2138 1
a2138 1
#line 957 "rl78-decode.opc"
d2152 1
a2152 1
#line 954 "rl78-decode.opc"
d2162 1
a2162 1
#line 954 "rl78-decode.opc"
d2192 1
a2192 1
#line 1261 "rl78-decode.opc"
d2202 1
a2202 1
#line 1261 "rl78-decode.opc"
d2216 1
a2216 1
#line 1258 "rl78-decode.opc"
d2226 1
a2226 1
#line 1258 "rl78-decode.opc"
d2340 1
a2340 1
#line 1220 "rl78-decode.opc"
d2350 1
a2350 1
#line 1220 "rl78-decode.opc"
d2412 1
a2412 1
#line 1121 "rl78-decode.opc"
d2427 1
a2427 1
#line 1127 "rl78-decode.opc"
d2442 1
a2442 1
#line 1224 "rl78-decode.opc"
d2457 1
a2457 1
#line 1217 "rl78-decode.opc"
d2472 1
a2472 1
#line 1199 "rl78-decode.opc"
d2487 1
a2487 1
#line 1227 "rl78-decode.opc"
d2502 1
a2502 1
#line 1208 "rl78-decode.opc"
d2517 1
a2517 1
#line 1214 "rl78-decode.opc"
d2532 1
a2532 1
#line 1202 "rl78-decode.opc"
d2547 1
a2547 1
#line 1205 "rl78-decode.opc"
d2562 1
a2562 1
#line 1153 "rl78-decode.opc"
d2577 1
a2577 1
#line 1156 "rl78-decode.opc"
d2607 1
a2607 1
#line 1211 "rl78-decode.opc"
d2667 1
a2667 1
#line 1090 "rl78-decode.opc"
d2752 1
a2752 1
#line 985 "rl78-decode.opc"
d2769 1
a2769 1
#line 807 "rl78-decode.opc"
d2782 1
a2782 1
#line 1037 "rl78-decode.opc"
d2792 1
a2792 1
#line 1037 "rl78-decode.opc"
d2854 1
a2854 1
#line 1096 "rl78-decode.opc"
d2884 1
a2884 1
#line 1018 "rl78-decode.opc"
d2899 1
a2899 1
#line 1012 "rl78-decode.opc"
d2914 1
a2914 1
#line 993 "rl78-decode.opc"
d2948 1
a2948 1
#line 942 "rl78-decode.opc"
d2963 1
a2963 1
#line 948 "rl78-decode.opc"
d2978 1
a2978 1
#line 1093 "rl78-decode.opc"
d2993 1
a2993 1
#line 1105 "rl78-decode.opc"
d3025 1
a3025 1
#line 1009 "rl78-decode.opc"
d3040 1
a3040 1
#line 1004 "rl78-decode.opc"
d3068 1
a3068 1
#line 1015 "rl78-decode.opc"
d3078 1
a3078 1
#line 1015 "rl78-decode.opc"
d3093 1
a3093 1
#line 1246 "rl78-decode.opc"
d3108 1
a3108 1
#line 1252 "rl78-decode.opc"
d3123 1
a3123 1
#line 1099 "rl78-decode.opc"
d3138 1
a3138 1
#line 1102 "rl78-decode.opc"
d3168 1
a3168 1
#line 1021 "rl78-decode.opc"
d3188 1
a3188 1
#line 1001 "rl78-decode.opc"
d3203 1
a3203 1
#line 1110 "rl78-decode.opc"
d3223 1
a3223 1
#line 870 "rl78-decode.opc"
d3238 1
a3238 1
#line 861 "rl78-decode.opc"
d3253 1
a3253 1
#line 963 "rl78-decode.opc"
d3270 1
a3270 1
#line 960 "rl78-decode.opc"
d3285 1
a3285 1
#line 951 "rl78-decode.opc"
d3300 1
a3300 1
#line 939 "rl78-decode.opc"
d3315 1
a3315 1
#line 945 "rl78-decode.opc"
d3330 1
a3330 1
#line 936 "rl78-decode.opc"
d3373 1
a3373 1
#line 1042 "rl78-decode.opc"
d3383 1
a3383 1
#line 1042 "rl78-decode.opc"
d3398 1
a3398 1
#line 799 "rl78-decode.opc"
d3408 1
a3408 1
#line 799 "rl78-decode.opc"
d3423 1
a3423 1
#line 1060 "rl78-decode.opc"
d3433 1
a3433 1
#line 1060 "rl78-decode.opc"
d3477 1
a3477 1
#line 793 "rl78-decode.opc"
d3487 1
a3487 1
#line 793 "rl78-decode.opc"
d3532 1
a3532 1
#line 977 "rl78-decode.opc"
d3542 1
a3542 1
#line 977 "rl78-decode.opc"
d3559 1
a3559 1
#line 1281 "rl78-decode.opc"
d3569 1
a3569 1
#line 1281 "rl78-decode.opc"
d3611 1
a3611 1
#line 802 "rl78-decode.opc"
d3621 1
a3621 1
#line 802 "rl78-decode.opc"
d3638 1
a3638 1
#line 1054 "rl78-decode.opc"
d3648 1
a3648 1
#line 1054 "rl78-decode.opc"
d3694 1
a3694 1
#line 796 "rl78-decode.opc"
d3704 1
a3704 1
#line 796 "rl78-decode.opc"
d3744 1
a3744 1
#line 974 "rl78-decode.opc"
d3754 1
a3754 1
#line 974 "rl78-decode.opc"
d3769 1
a3769 1
#line 1278 "rl78-decode.opc"
d3779 1
a3779 1
#line 1278 "rl78-decode.opc"
d3794 1
a3794 1
#line 1051 "rl78-decode.opc"
d3809 1
a3809 1
#line 781 "rl78-decode.opc"
d3819 1
a3819 1
#line 781 "rl78-decode.opc"
d3834 1
a3834 1
#line 1045 "rl78-decode.opc"
d3844 1
a3844 1
#line 1045 "rl78-decode.opc"
d3884 1
a3884 1
#line 787 "rl78-decode.opc"
d3894 1
a3894 1
#line 787 "rl78-decode.opc"
d3934 1
a3934 1
#line 968 "rl78-decode.opc"
d3944 1
a3944 1
#line 968 "rl78-decode.opc"
d3959 1
a3959 1
#line 1272 "rl78-decode.opc"
d3969 1
a3969 1
#line 1272 "rl78-decode.opc"
d3999 1
a3999 1
#line 784 "rl78-decode.opc"
d4009 1
a4009 1
#line 784 "rl78-decode.opc"
d4024 1
a4024 1
#line 1048 "rl78-decode.opc"
d4034 1
a4034 1
#line 1048 "rl78-decode.opc"
d4074 1
a4074 1
#line 790 "rl78-decode.opc"
d4084 1
a4084 1
#line 790 "rl78-decode.opc"
d4124 1
a4124 1
#line 971 "rl78-decode.opc"
d4134 1
a4134 1
#line 971 "rl78-decode.opc"
d4149 1
a4149 1
#line 1275 "rl78-decode.opc"
d4159 1
a4159 1
#line 1275 "rl78-decode.opc"
d4174 1
a4174 1
#line 912 "rl78-decode.opc"
d4194 1
a4194 1
#line 873 "rl78-decode.opc"
d4209 1
a4209 1
#line 864 "rl78-decode.opc"
d4224 1
a4224 1
#line 1267 "rl78-decode.opc"
d4241 1
a4241 1
#line 1264 "rl78-decode.opc"
d4256 1
a4256 1
#line 1255 "rl78-decode.opc"
d4271 1
a4271 1
#line 1243 "rl78-decode.opc"
d4286 1
a4286 1
#line 1249 "rl78-decode.opc"
d4301 1
a4301 1
#line 1240 "rl78-decode.opc"
d4576 1
a4576 1
#line 776 "rl78-decode.opc"
d4693 1
a4693 1
#line 846 "rl78-decode.opc"
d4708 1
a4708 1
#line 834 "rl78-decode.opc"
d4723 1
a4723 1
#line 837 "rl78-decode.opc"
d4738 1
a4738 1
#line 840 "rl78-decode.opc"
d4753 1
a4753 1
#line 843 "rl78-decode.opc"
d4768 1
a4768 1
#line 876 "rl78-decode.opc"
d4783 1
a4783 1
#line 879 "rl78-decode.opc"
d4798 1
a4798 1
#line 830 "rl78-decode.opc"
d4899 1
a4899 1
#line 827 "rl78-decode.opc"
d4914 1
a4914 1
#line 815 "rl78-decode.opc"
d4929 1
a4929 1
#line 818 "rl78-decode.opc"
d4944 1
a4944 1
#line 821 "rl78-decode.opc"
d4959 1
a4959 1
#line 824 "rl78-decode.opc"
d4974 1
a4974 1
#line 891 "rl78-decode.opc"
d4989 1
a4989 1
#line 897 "rl78-decode.opc"
d5006 1
a5006 1
#line 812 "rl78-decode.opc"
d5017 1
a5017 1
#line 982 "rl78-decode.opc"
d5027 1
a5027 1
#line 982 "rl78-decode.opc"
d5038 1
a5038 1
#line 990 "rl78-decode.opc"
d5048 1
a5048 1
#line 990 "rl78-decode.opc"
d5078 1
a5078 1
#line 888 "rl78-decode.opc"
d5108 1
a5108 1
#line 894 "rl78-decode.opc"
d5182 2
a5183 1
         }
d5263 1
a5263 1
#line 902 "rl78-decode.opc"
d5280 1
a5280 1
#line 998 "rl78-decode.opc"
d5320 1
a5320 1
#line 885 "rl78-decode.opc"
d5330 1
a5330 1
#line 885 "rl78-decode.opc"
d5340 1
a5340 1
#line 882 "rl78-decode.opc"
d5350 1
a5350 1
#line 882 "rl78-decode.opc"
d5423 1
a5423 1
#line 920 "rl78-decode.opc"
d5433 1
a5433 1
#line 920 "rl78-decode.opc"
d5448 1
a5448 1
#line 923 "rl78-decode.opc"
d5465 1
a5465 1
#line 917 "rl78-decode.opc"
d5480 1
a5480 1
#line 928 "rl78-decode.opc"
d5495 1
a5495 1
#line 931 "rl78-decode.opc"
d5768 1
a5768 1
#line 1286 "rl78-decode.opc"
@


1.7
log
@	* po/POTFILES.in: Regenerate.
	* rl78-decode.c: Regenerate.
	* rx-decode.c: Regenerate.
@
text
@d3 1
a3 1
/* Copyright 2012 Free Software Foundation, Inc.
d5170 1
a5170 1
        	rl78->syntax = "divwu"; ID(divwu);
d5178 3
d5182 1
a5182 2
        
        }
@


1.6
log
@Add copyright notices
@
text
@d203 1
a203 1
#line 886 "rl78-decode.opc"
d216 1
a216 1
#line 252 "rl78-decode.opc"
d226 1
a226 1
#line 252 "rl78-decode.opc"
d241 1
a241 1
#line 243 "rl78-decode.opc"
d256 1
a256 1
#line 249 "rl78-decode.opc"
d271 1
a271 1
#line 255 "rl78-decode.opc"
d286 1
a286 1
#line 1209 "rl78-decode.opc"
d303 1
a303 1
#line 656 "rl78-decode.opc"
d318 1
a318 1
#line 206 "rl78-decode.opc"
d335 1
a335 1
#line 200 "rl78-decode.opc"
d350 1
a350 1
#line 194 "rl78-decode.opc"
d365 1
a365 1
#line 182 "rl78-decode.opc"
d380 1
a380 1
#line 188 "rl78-decode.opc"
d395 1
a395 1
#line 179 "rl78-decode.opc"
d410 1
a410 1
#line 258 "rl78-decode.opc"
d427 1
a427 1
#line 171 "rl78-decode.opc"
d442 1
a442 1
#line 834 "rl78-decode.opc"
d452 1
a452 1
#line 834 "rl78-decode.opc"
d462 1
a462 1
#line 831 "rl78-decode.opc"
d472 1
a472 1
#line 831 "rl78-decode.opc"
d487 1
a487 1
#line 707 "rl78-decode.opc"
d502 1
a502 1
#line 704 "rl78-decode.opc"
d517 1
a517 1
#line 238 "rl78-decode.opc"
d534 1
a534 1
#line 235 "rl78-decode.opc"
d549 1
a549 1
#line 226 "rl78-decode.opc"
d564 1
a564 1
#line 214 "rl78-decode.opc"
d579 1
a579 1
#line 223 "rl78-decode.opc"
d594 1
a594 1
#line 211 "rl78-decode.opc"
d609 1
a609 1
#line 1173 "rl78-decode.opc"
d622 1
a622 1
#line 1167 "rl78-decode.opc"
d632 1
a632 1
#line 1167 "rl78-decode.opc"
d647 1
a647 1
#line 1158 "rl78-decode.opc"
d662 1
a662 1
#line 1164 "rl78-decode.opc"
d677 1
a677 1
#line 1170 "rl78-decode.opc"
d692 1
a692 1
#line 719 "rl78-decode.opc"
d707 1
a707 1
#line 662 "rl78-decode.opc"
d722 1
a722 1
#line 1121 "rl78-decode.opc"
d739 1
a739 1
#line 1115 "rl78-decode.opc"
d754 1
a754 1
#line 1109 "rl78-decode.opc"
d769 1
a769 1
#line 1097 "rl78-decode.opc"
d784 1
a784 1
#line 1103 "rl78-decode.opc"
d799 1
a799 1
#line 1094 "rl78-decode.opc"
d810 1
a810 1
#line 828 "rl78-decode.opc"
d820 1
a820 1
#line 828 "rl78-decode.opc"
d832 1
a832 1
#line 394 "rl78-decode.opc"
d842 1
a842 1
#line 394 "rl78-decode.opc"
d852 1
a852 1
#line 388 "rl78-decode.opc"
d862 1
a862 1
#line 388 "rl78-decode.opc"
d870 1
a870 1
#line 380 "rl78-decode.opc"
d880 1
a880 1
#line 380 "rl78-decode.opc"
d890 1
a890 1
#line 374 "rl78-decode.opc"
d900 1
a900 1
#line 374 "rl78-decode.opc"
d908 1
a908 1
#line 341 "rl78-decode.opc"
d918 1
a918 1
#line 341 "rl78-decode.opc"
d928 1
a928 1
#line 335 "rl78-decode.opc"
d938 1
a938 1
#line 335 "rl78-decode.opc"
d946 1
a946 1
#line 1050 "rl78-decode.opc"
d956 1
a956 1
#line 1050 "rl78-decode.opc"
d964 1
a964 1
#line 1047 "rl78-decode.opc"
d974 1
a974 1
#line 1047 "rl78-decode.opc"
d982 1
a982 1
#line 1044 "rl78-decode.opc"
d992 1
a992 1
#line 1044 "rl78-decode.opc"
d1000 1
a1000 1
#line 1061 "rl78-decode.opc"
d1010 1
a1010 1
#line 1061 "rl78-decode.opc"
d1018 1
a1018 1
#line 1008 "rl78-decode.opc"
d1028 1
a1028 1
#line 1008 "rl78-decode.opc"
d1037 1
a1037 1
#line 1056 "rl78-decode.opc"
d1047 1
a1047 1
#line 1056 "rl78-decode.opc"
d1058 1
a1058 1
#line 1053 "rl78-decode.opc"
d1068 1
a1068 1
#line 1053 "rl78-decode.opc"
d1077 1
a1077 1
#line 1064 "rl78-decode.opc"
d1087 1
a1087 1
#line 1064 "rl78-decode.opc"
d1098 1
a1098 1
#line 1011 "rl78-decode.opc"
d1108 1
a1108 1
#line 1011 "rl78-decode.opc"
d1118 1
a1118 1
#line 391 "rl78-decode.opc"
d1128 1
a1128 1
#line 391 "rl78-decode.opc"
d1136 1
a1136 1
#line 385 "rl78-decode.opc"
d1146 1
a1146 1
#line 385 "rl78-decode.opc"
d1154 1
a1154 1
#line 377 "rl78-decode.opc"
d1164 1
a1164 1
#line 377 "rl78-decode.opc"
d1172 1
a1172 1
#line 371 "rl78-decode.opc"
d1182 1
a1182 1
#line 371 "rl78-decode.opc"
d1190 1
a1190 1
#line 338 "rl78-decode.opc"
d1200 1
a1200 1
#line 338 "rl78-decode.opc"
d1208 1
a1208 1
#line 332 "rl78-decode.opc"
d1218 1
a1218 1
#line 332 "rl78-decode.opc"
d1231 1
a1231 1
#line 1214 "rl78-decode.opc"
d1241 1
a1241 1
#line 1214 "rl78-decode.opc"
d1258 1
a1258 1
#line 716 "rl78-decode.opc"
d1273 1
a1273 1
#line 710 "rl78-decode.opc"
d1288 1
a1288 1
#line 1153 "rl78-decode.opc"
d1305 1
a1305 1
#line 1150 "rl78-decode.opc"
d1320 1
a1320 1
#line 1141 "rl78-decode.opc"
d1335 1
a1335 1
#line 1129 "rl78-decode.opc"
d1350 1
a1350 1
#line 1138 "rl78-decode.opc"
d1365 1
a1365 1
#line 1126 "rl78-decode.opc"
d1380 1
a1380 1
#line 458 "rl78-decode.opc"
d1395 1
a1395 1
#line 695 "rl78-decode.opc"
d1410 1
a1410 1
#line 509 "rl78-decode.opc"
d1420 1
a1420 1
#line 518 "rl78-decode.opc"
d1430 1
a1430 1
#line 518 "rl78-decode.opc"
d1445 1
a1445 1
#line 515 "rl78-decode.opc"
d1460 1
a1460 1
#line 521 "rl78-decode.opc"
d1477 1
a1477 1
#line 713 "rl78-decode.opc"
d1492 1
a1492 1
#line 659 "rl78-decode.opc"
d1507 1
a1507 1
#line 461 "rl78-decode.opc"
d1522 1
a1522 1
#line 488 "rl78-decode.opc"
d1539 1
a1539 1
#line 479 "rl78-decode.opc"
d1554 1
a1554 1
#line 467 "rl78-decode.opc"
d1569 1
a1569 1
#line 476 "rl78-decode.opc"
d1584 1
a1584 1
#line 464 "rl78-decode.opc"
d1599 1
a1599 1
#line 647 "rl78-decode.opc"
d1609 1
a1609 1
#line 647 "rl78-decode.opc"
d1624 1
a1624 1
#line 846 "rl78-decode.opc"
d1639 1
a1639 1
#line 837 "rl78-decode.opc"
d1654 1
a1654 1
#line 290 "rl78-decode.opc"
d1671 1
a1671 1
#line 287 "rl78-decode.opc"
d1686 1
a1686 1
#line 278 "rl78-decode.opc"
d1701 1
a1701 1
#line 266 "rl78-decode.opc"
d1716 1
a1716 1
#line 272 "rl78-decode.opc"
d1731 1
a1731 1
#line 263 "rl78-decode.opc"
d1745 1
a1745 1
#line 650 "rl78-decode.opc"
d1755 1
a1755 1
#line 650 "rl78-decode.opc"
d1774 1
a1774 1
#line 203 "rl78-decode.opc"
d1784 1
a1784 1
#line 203 "rl78-decode.opc"
d1798 1
a1798 1
#line 197 "rl78-decode.opc"
d1808 1
a1808 1
#line 197 "rl78-decode.opc"
d1823 1
a1823 1
#line 246 "rl78-decode.opc"
d1838 1
a1838 1
#line 232 "rl78-decode.opc"
d1848 1
a1848 1
#line 232 "rl78-decode.opc"
d1862 1
a1862 1
#line 229 "rl78-decode.opc"
d1872 1
a1872 1
#line 229 "rl78-decode.opc"
d1887 1
a1887 1
#line 1118 "rl78-decode.opc"
d1897 1
a1897 1
#line 1118 "rl78-decode.opc"
d1911 1
a1911 1
#line 1112 "rl78-decode.opc"
d1921 1
a1921 1
#line 1112 "rl78-decode.opc"
d1936 1
a1936 1
#line 1161 "rl78-decode.opc"
d1951 1
a1951 1
#line 1147 "rl78-decode.opc"
d1961 1
a1961 1
#line 1147 "rl78-decode.opc"
d1975 1
a1975 1
#line 1144 "rl78-decode.opc"
d1985 1
a1985 1
#line 1144 "rl78-decode.opc"
d2000 1
a2000 1
#line 485 "rl78-decode.opc"
d2010 1
a2010 1
#line 485 "rl78-decode.opc"
d2024 1
a2024 1
#line 482 "rl78-decode.opc"
d2034 1
a2034 1
#line 482 "rl78-decode.opc"
d2049 1
a2049 1
#line 512 "rl78-decode.opc"
d2064 1
a2064 1
#line 284 "rl78-decode.opc"
d2074 1
a2074 1
#line 284 "rl78-decode.opc"
d2088 1
a2088 1
#line 281 "rl78-decode.opc"
d2098 1
a2098 1
#line 281 "rl78-decode.opc"
d2113 1
a2113 1
#line 562 "rl78-decode.opc"
d2128 1
a2128 1
#line 936 "rl78-decode.opc"
d2138 1
a2138 1
#line 936 "rl78-decode.opc"
d2152 1
a2152 1
#line 933 "rl78-decode.opc"
d2162 1
a2162 1
#line 933 "rl78-decode.opc"
d2177 1
a2177 1
#line 529 "rl78-decode.opc"
d2192 1
a2192 1
#line 1240 "rl78-decode.opc"
d2202 1
a2202 1
#line 1240 "rl78-decode.opc"
d2216 1
a2216 1
#line 1237 "rl78-decode.opc"
d2226 1
a2226 1
#line 1237 "rl78-decode.opc"
d2241 1
a2241 1
#line 576 "rl78-decode.opc"
d2257 1
a2257 1
#line 185 "rl78-decode.opc"
d2272 1
a2272 1
#line 191 "rl78-decode.opc"
d2311 1
a2311 1
#line 411 "rl78-decode.opc"
d2313 1
a2313 1
#line 411 "rl78-decode.opc"
d2324 1
a2324 1
#line 411 "rl78-decode.opc"
d2340 1
a2340 1
#line 1199 "rl78-decode.opc"
d2350 1
a2350 1
#line 1199 "rl78-decode.opc"
d2366 1
a2366 1
#line 543 "rl78-decode.opc"
d2381 1
a2381 1
#line 217 "rl78-decode.opc"
d2396 1
a2396 1
#line 220 "rl78-decode.opc"
d2412 1
a2412 1
#line 1100 "rl78-decode.opc"
d2427 1
a2427 1
#line 1106 "rl78-decode.opc"
d2442 1
a2442 1
#line 1203 "rl78-decode.opc"
d2457 1
a2457 1
#line 1196 "rl78-decode.opc"
d2472 1
a2472 1
#line 1178 "rl78-decode.opc"
d2487 1
a2487 1
#line 1206 "rl78-decode.opc"
d2502 1
a2502 1
#line 1187 "rl78-decode.opc"
d2517 1
a2517 1
#line 1193 "rl78-decode.opc"
d2532 1
a2532 1
#line 1181 "rl78-decode.opc"
d2547 1
a2547 1
#line 1184 "rl78-decode.opc"
d2562 1
a2562 1
#line 1132 "rl78-decode.opc"
d2577 1
a2577 1
#line 1135 "rl78-decode.opc"
d2592 1
a2592 1
#line 701 "rl78-decode.opc"
d2607 1
a2607 1
#line 1190 "rl78-decode.opc"
d2622 1
a2622 1
#line 470 "rl78-decode.opc"
d2637 1
a2637 1
#line 473 "rl78-decode.opc"
d2652 1
a2652 1
#line 318 "rl78-decode.opc"
d2667 1
a2667 1
#line 1069 "rl78-decode.opc"
d2682 1
a2682 1
#line 638 "rl78-decode.opc"
d2693 1
a2693 1
#line 408 "rl78-decode.opc"
d2703 1
a2703 1
#line 408 "rl78-decode.opc"
d2718 1
a2718 1
#line 358 "rl78-decode.opc"
d2735 1
a2735 1
#line 366 "rl78-decode.opc"
d2752 1
a2752 1
#line 964 "rl78-decode.opc"
d2769 1
a2769 1
#line 786 "rl78-decode.opc"
d2782 1
a2782 1
#line 1016 "rl78-decode.opc"
d2792 1
a2792 1
#line 1016 "rl78-decode.opc"
d2809 1
a2809 1
#line 269 "rl78-decode.opc"
d2824 1
a2824 1
#line 275 "rl78-decode.opc"
d2839 1
a2839 1
#line 321 "rl78-decode.opc"
d2854 1
a2854 1
#line 1075 "rl78-decode.opc"
d2869 1
a2869 1
#line 605 "rl78-decode.opc"
d2884 1
a2884 1
#line 997 "rl78-decode.opc"
d2899 1
a2899 1
#line 991 "rl78-decode.opc"
d2914 1
a2914 1
#line 972 "rl78-decode.opc"
d2931 1
a2931 1
#line 504 "rl78-decode.opc"
d2948 1
a2948 1
#line 921 "rl78-decode.opc"
d2963 1
a2963 1
#line 927 "rl78-decode.opc"
d2978 1
a2978 1
#line 1072 "rl78-decode.opc"
d2993 1
a2993 1
#line 1084 "rl78-decode.opc"
d3010 1
a3010 1
#line 641 "rl78-decode.opc"
d3025 1
a3025 1
#line 988 "rl78-decode.opc"
d3040 1
a3040 1
#line 983 "rl78-decode.opc"
d3057 1
a3057 1
#line 554 "rl78-decode.opc"
d3068 1
a3068 1
#line 994 "rl78-decode.opc"
d3078 1
a3078 1
#line 994 "rl78-decode.opc"
d3093 1
a3093 1
#line 1225 "rl78-decode.opc"
d3108 1
a3108 1
#line 1231 "rl78-decode.opc"
d3123 1
a3123 1
#line 1078 "rl78-decode.opc"
d3138 1
a3138 1
#line 1081 "rl78-decode.opc"
d3153 1
a3153 1
#line 614 "rl78-decode.opc"
d3168 1
a3168 1
#line 1000 "rl78-decode.opc"
d3188 1
a3188 1
#line 980 "rl78-decode.opc"
d3203 1
a3203 1
#line 1089 "rl78-decode.opc"
d3223 1
a3223 1
#line 849 "rl78-decode.opc"
d3238 1
a3238 1
#line 840 "rl78-decode.opc"
d3253 1
a3253 1
#line 942 "rl78-decode.opc"
d3270 1
a3270 1
#line 939 "rl78-decode.opc"
d3285 1
a3285 1
#line 930 "rl78-decode.opc"
d3300 1
a3300 1
#line 918 "rl78-decode.opc"
d3315 1
a3315 1
#line 924 "rl78-decode.opc"
d3330 1
a3330 1
#line 915 "rl78-decode.opc"
d3344 1
a3344 1
#line 674 "rl78-decode.opc"
d3354 1
a3354 1
#line 674 "rl78-decode.opc"
d3373 1
a3373 1
#line 1021 "rl78-decode.opc"
d3383 1
a3383 1
#line 1021 "rl78-decode.opc"
d3398 1
a3398 1
#line 778 "rl78-decode.opc"
d3408 1
a3408 1
#line 778 "rl78-decode.opc"
d3423 1
a3423 1
#line 1039 "rl78-decode.opc"
d3433 1
a3433 1
#line 1039 "rl78-decode.opc"
d3450 1
a3450 1
#line 434 "rl78-decode.opc"
d3460 1
a3460 1
#line 434 "rl78-decode.opc"
d3477 1
a3477 1
#line 772 "rl78-decode.opc"
d3487 1
a3487 1
#line 772 "rl78-decode.opc"
d3502 1
a3502 1
#line 304 "rl78-decode.opc"
d3512 1
a3512 1
#line 304 "rl78-decode.opc"
d3532 1
a3532 1
#line 956 "rl78-decode.opc"
d3542 1
a3542 1
#line 956 "rl78-decode.opc"
d3559 1
a3559 1
#line 1260 "rl78-decode.opc"
d3569 1
a3569 1
#line 1260 "rl78-decode.opc"
d3586 1
a3586 1
#line 416 "rl78-decode.opc"
d3596 1
a3596 1
#line 416 "rl78-decode.opc"
d3611 1
a3611 1
#line 781 "rl78-decode.opc"
d3621 1
a3621 1
#line 781 "rl78-decode.opc"
d3638 1
a3638 1
#line 1033 "rl78-decode.opc"
d3648 1
a3648 1
#line 1033 "rl78-decode.opc"
d3666 1
a3666 1
#line 428 "rl78-decode.opc"
d3676 1
a3676 1
#line 428 "rl78-decode.opc"
d3694 1
a3694 1
#line 775 "rl78-decode.opc"
d3704 1
a3704 1
#line 775 "rl78-decode.opc"
d3719 1
a3719 1
#line 301 "rl78-decode.opc"
d3729 1
a3729 1
#line 301 "rl78-decode.opc"
d3744 1
a3744 1
#line 953 "rl78-decode.opc"
d3754 1
a3754 1
#line 953 "rl78-decode.opc"
d3769 1
a3769 1
#line 1257 "rl78-decode.opc"
d3779 1
a3779 1
#line 1257 "rl78-decode.opc"
d3794 1
a3794 1
#line 1030 "rl78-decode.opc"
d3809 1
a3809 1
#line 760 "rl78-decode.opc"
d3819 1
a3819 1
#line 760 "rl78-decode.opc"
d3834 1
a3834 1
#line 1024 "rl78-decode.opc"
d3844 1
a3844 1
#line 1024 "rl78-decode.opc"
d3859 1
a3859 1
#line 419 "rl78-decode.opc"
d3869 1
a3869 1
#line 419 "rl78-decode.opc"
d3884 1
a3884 1
#line 766 "rl78-decode.opc"
d3894 1
a3894 1
#line 766 "rl78-decode.opc"
d3909 1
a3909 1
#line 295 "rl78-decode.opc"
d3919 1
a3919 1
#line 295 "rl78-decode.opc"
d3934 1
a3934 1
#line 947 "rl78-decode.opc"
d3944 1
a3944 1
#line 947 "rl78-decode.opc"
d3959 1
a3959 1
#line 1251 "rl78-decode.opc"
d3969 1
a3969 1
#line 1251 "rl78-decode.opc"
d3984 1
a3984 1
#line 425 "rl78-decode.opc"
d3999 1
a3999 1
#line 763 "rl78-decode.opc"
d4009 1
a4009 1
#line 763 "rl78-decode.opc"
d4024 1
a4024 1
#line 1027 "rl78-decode.opc"
d4034 1
a4034 1
#line 1027 "rl78-decode.opc"
d4049 1
a4049 1
#line 422 "rl78-decode.opc"
d4059 1
a4059 1
#line 422 "rl78-decode.opc"
d4074 1
a4074 1
#line 769 "rl78-decode.opc"
d4084 1
a4084 1
#line 769 "rl78-decode.opc"
d4099 1
a4099 1
#line 298 "rl78-decode.opc"
d4109 1
a4109 1
#line 298 "rl78-decode.opc"
d4124 1
a4124 1
#line 950 "rl78-decode.opc"
d4134 1
a4134 1
#line 950 "rl78-decode.opc"
d4149 1
a4149 1
#line 1254 "rl78-decode.opc"
d4159 1
a4159 1
#line 1254 "rl78-decode.opc"
d4174 1
a4174 1
#line 891 "rl78-decode.opc"
d4194 1
a4194 1
#line 852 "rl78-decode.opc"
d4209 1
a4209 1
#line 843 "rl78-decode.opc"
d4224 1
a4224 1
#line 1246 "rl78-decode.opc"
d4241 1
a4241 1
#line 1243 "rl78-decode.opc"
d4256 1
a4256 1
#line 1234 "rl78-decode.opc"
d4271 1
a4271 1
#line 1222 "rl78-decode.opc"
d4286 1
a4286 1
#line 1228 "rl78-decode.opc"
d4301 1
a4301 1
#line 1219 "rl78-decode.opc"
d4316 1
a4316 1
#line 565 "rl78-decode.opc"
d4326 1
a4326 1
#line 565 "rl78-decode.opc"
d4341 1
a4341 1
#line 644 "rl78-decode.opc"
d4356 1
a4356 1
#line 626 "rl78-decode.opc"
d4371 1
a4371 1
#line 629 "rl78-decode.opc"
d4386 1
a4386 1
#line 632 "rl78-decode.opc"
d4401 1
a4401 1
#line 635 "rl78-decode.opc"
d4416 1
a4416 1
#line 668 "rl78-decode.opc"
d4431 1
a4431 1
#line 665 "rl78-decode.opc"
d4446 1
a4446 1
#line 623 "rl78-decode.opc"
d4461 1
a4461 1
#line 532 "rl78-decode.opc"
d4471 1
a4471 1
#line 532 "rl78-decode.opc"
d4486 1
a4486 1
#line 620 "rl78-decode.opc"
d4501 1
a4501 1
#line 593 "rl78-decode.opc"
d4516 1
a4516 1
#line 599 "rl78-decode.opc"
d4531 1
a4531 1
#line 602 "rl78-decode.opc"
d4546 1
a4546 1
#line 611 "rl78-decode.opc"
d4561 1
a4561 1
#line 725 "rl78-decode.opc"
d4576 1
a4576 1
#line 755 "rl78-decode.opc"
d4593 1
a4593 1
#line 590 "rl78-decode.opc"
d4608 1
a4608 1
#line 559 "rl78-decode.opc"
d4619 1
a4619 1
#line 579 "rl78-decode.opc"
d4629 1
a4629 1
#line 579 "rl78-decode.opc"
d4644 1
a4644 1
#line 573 "rl78-decode.opc"
d4659 1
a4659 1
#line 568 "rl78-decode.opc"
d4676 1
a4676 1
#line 582 "rl78-decode.opc"
d4693 1
a4693 1
#line 825 "rl78-decode.opc"
d4708 1
a4708 1
#line 813 "rl78-decode.opc"
d4723 1
a4723 1
#line 816 "rl78-decode.opc"
d4738 1
a4738 1
#line 819 "rl78-decode.opc"
d4753 1
a4753 1
#line 822 "rl78-decode.opc"
d4768 1
a4768 1
#line 855 "rl78-decode.opc"
d4783 1
a4783 1
#line 858 "rl78-decode.opc"
d4798 1
a4798 1
#line 809 "rl78-decode.opc"
d4814 1
a4814 1
#line 526 "rl78-decode.opc"
d4825 1
a4825 1
#line 546 "rl78-decode.opc"
d4835 1
a4835 1
#line 546 "rl78-decode.opc"
d4850 1
a4850 1
#line 540 "rl78-decode.opc"
d4865 1
a4865 1
#line 535 "rl78-decode.opc"
d4882 1
a4882 1
#line 549 "rl78-decode.opc"
d4899 1
a4899 1
#line 806 "rl78-decode.opc"
d4914 1
a4914 1
#line 794 "rl78-decode.opc"
d4929 1
a4929 1
#line 797 "rl78-decode.opc"
d4944 1
a4944 1
#line 800 "rl78-decode.opc"
d4959 1
a4959 1
#line 803 "rl78-decode.opc"
d4974 1
a4974 1
#line 870 "rl78-decode.opc"
d4989 1
a4989 1
#line 876 "rl78-decode.opc"
d5006 1
a5006 1
#line 791 "rl78-decode.opc"
d5017 1
a5017 1
#line 961 "rl78-decode.opc"
d5027 1
a5027 1
#line 961 "rl78-decode.opc"
d5038 1
a5038 1
#line 969 "rl78-decode.opc"
d5048 1
a5048 1
#line 969 "rl78-decode.opc"
d5063 1
a5063 1
#line 617 "rl78-decode.opc"
d5078 1
a5078 1
#line 867 "rl78-decode.opc"
d5093 1
a5093 1
#line 596 "rl78-decode.opc"
d5108 1
a5108 1
#line 873 "rl78-decode.opc"
d5123 1
a5123 1
#line 608 "rl78-decode.opc"
d5138 1
a5138 1
#line 722 "rl78-decode.opc"
d5153 1
a5153 1
#line 728 "rl78-decode.opc"
d5192 1
a5192 1
#line 587 "rl78-decode.opc"
d5203 1
a5203 1
#line 496 "rl78-decode.opc"
d5213 1
a5213 1
#line 496 "rl78-decode.opc"
d5228 1
a5228 1
#line 499 "rl78-decode.opc"
d5245 1
a5245 1
#line 493 "rl78-decode.opc"
d5260 1
a5260 1
#line 881 "rl78-decode.opc"
d5277 1
a5277 1
#line 977 "rl78-decode.opc"
d5292 1
a5292 1
#line 689 "rl78-decode.opc"
d5307 1
a5307 1
#line 686 "rl78-decode.opc"
d5317 1
a5317 1
#line 864 "rl78-decode.opc"
d5327 1
a5327 1
#line 864 "rl78-decode.opc"
d5337 1
a5337 1
#line 861 "rl78-decode.opc"
d5347 1
a5347 1
#line 861 "rl78-decode.opc"
d5362 1
a5362 1
#line 312 "rl78-decode.opc"
d5377 1
a5377 1
#line 324 "rl78-decode.opc"
d5392 1
a5392 1
#line 315 "rl78-decode.opc"
d5407 1
a5407 1
#line 327 "rl78-decode.opc"
d5420 1
a5420 1
#line 899 "rl78-decode.opc"
d5430 1
a5430 1
#line 899 "rl78-decode.opc"
d5445 1
a5445 1
#line 902 "rl78-decode.opc"
d5462 1
a5462 1
#line 896 "rl78-decode.opc"
d5477 1
a5477 1
#line 907 "rl78-decode.opc"
d5492 1
a5492 1
#line 910 "rl78-decode.opc"
d5509 1
a5509 1
#line 677 "rl78-decode.opc"
d5524 1
a5524 1
#line 671 "rl78-decode.opc"
d5539 1
a5539 1
#line 346 "rl78-decode.opc"
d5554 1
a5554 1
#line 349 "rl78-decode.opc"
d5569 1
a5569 1
#line 352 "rl78-decode.opc"
d5584 1
a5584 1
#line 355 "rl78-decode.opc"
d5595 1
a5595 1
#line 442 "rl78-decode.opc"
d5605 1
a5605 1
#line 442 "rl78-decode.opc"
d5620 1
a5620 1
#line 445 "rl78-decode.opc"
d5637 1
a5637 1
#line 439 "rl78-decode.opc"
d5652 1
a5652 1
#line 450 "rl78-decode.opc"
d5667 1
a5667 1
#line 453 "rl78-decode.opc"
d5684 1
a5684 1
#line 683 "rl78-decode.opc"
d5699 1
a5699 1
#line 680 "rl78-decode.opc"
d5714 1
a5714 1
#line 399 "rl78-decode.opc"
d5729 1
a5729 1
#line 402 "rl78-decode.opc"
d5744 1
a5744 1
#line 405 "rl78-decode.opc"
d5759 1
a5759 1
#line 363 "rl78-decode.opc"
d5765 1
a5765 1
#line 1265 "rl78-decode.opc"
@


1.5
log
@missed from 2012-08-15 change
@
text
@d3 21
@


1.4
log
@	* h8300-dis.c: Fix printf arg warnings.
	* i960-dis.c: Likewise.
	* mips-dis.c: Likewise.
	* pdp11-dis.c: Likewise.
	* sh-dis.c: Likewise.
	* v850-dis.c: Likewise.
	* configure.in: Formatting.
	* configure: Regenerate.
	* rl78-decode.c: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d212 1
a212 1
          /** 0000 0010			addw	%0, %e1%!1			*/
d216 1
a216 1
                     "/** 0000 0010			addw	%0, %e1%!1			*/",
d219 1
a219 1
          SYNTAX("addw	%0, %e1%!1");
d274 1
a274 1
          /** 0000 1001			mov	%0, %e1%1			*/
d278 1
a278 1
                     "/** 0000 1001			mov	%0, %e1%1			*/",
d281 1
a281 1
          SYNTAX("mov	%0, %e1%1");
d336 1
a336 1
          /** 0000 1101			add	%0, %e1%1			*/
d340 1
a340 1
                     "/** 0000 1101			add	%0, %e1%1			*/",
d343 1
a343 1
          SYNTAX("add	%0, %e1%1");
d351 1
a351 1
          /** 0000 1110			add	%0, %e1%1			*/
d355 1
a355 1
                     "/** 0000 1110			add	%0, %e1%1			*/",
d358 1
a358 1
          SYNTAX("add	%0, %e1%1");
d361 1
a361 1
        
d366 1
a366 1
          /** 0000 1111			add	%0, %e1%!1			*/
d370 1
a370 1
                     "/** 0000 1111			add	%0, %e1%!1			*/",
d373 1
a373 1
          SYNTAX("add	%0, %e1%!1");
d458 1
a458 1
          /** 0001 1000			mov	%e0%0, %1			*/
d462 1
a462 1
                     "/** 0001 1000			mov	%e0%0, %1			*/",
d465 1
a465 1
          SYNTAX("mov	%e0%0, %1");
d473 1
a473 1
          /** 0001 1001			mov	%e0%0, #%1			*/
d477 1
a477 1
                     "/** 0001 1001			mov	%e0%0, #%1			*/",
d480 1
a480 1
          SYNTAX("mov	%e0%0, #%1");
d535 1
a535 1
          /** 0001 1101			addc	%0, %e1%1			*/
d539 1
a539 1
                     "/** 0001 1101			addc	%0, %e1%1			*/",
d542 1
a542 1
          SYNTAX("addc	%0, %e1%1");
d550 1
a550 1
          /** 0001 1110			addc	%0, %e1%1			*/
d554 1
a554 1
                     "/** 0001 1110			addc	%0, %e1%1			*/",
d557 1
a557 1
          SYNTAX("addc	%0, %e1%1");
d565 1
a565 1
          /** 0001 1111			addc	%0, %e1%!1			*/
d569 1
a569 1
                     "/** 0001 1111			addc	%0, %e1%!1			*/",
d572 1
a572 1
          SYNTAX("addc	%0, %e1%!1");
d618 1
a618 1
          /** 0010 0010			subw	%0, %e1%!1			*/
d622 1
a622 1
                     "/** 0010 0010			subw	%0, %e1%!1			*/",
d625 1
a625 1
          SYNTAX("subw	%0, %e1%!1");
d663 1
a663 1
          /** 0010 1000			mov	%e0%0, %1			*/
d667 1
a667 1
                     "/** 0010 1000			mov	%e0%0, %1			*/",
d670 1
a670 1
          SYNTAX("mov	%e0%0, %1");
d678 1
a678 1
          /** 0010 1001			mov	%0, %e1%1			*/
d682 1
a682 1
                     "/** 0010 1001			mov	%0, %e1%1			*/",
d685 1
a685 1
          SYNTAX("mov	%0, %e1%1");
d740 1
a740 1
          /** 0010 1101			sub	%0, %e1%1			*/
d744 1
a744 1
                     "/** 0010 1101			sub	%0, %e1%1			*/",
d747 1
a747 1
          SYNTAX("sub	%0, %e1%1");
d755 1
a755 1
          /** 0010 1110			sub	%0, %e1%1			*/
d759 1
a759 1
                     "/** 0010 1110			sub	%0, %e1%1			*/",
d762 1
a762 1
          SYNTAX("sub	%0, %e1%1");
d770 1
a770 1
          /** 0010 1111			sub	%0, %e1%!1			*/
d774 1
a774 1
                     "/** 0010 1111			sub	%0, %e1%!1			*/",
d777 1
a777 1
          SYNTAX("sub	%0, %e1%!1");
d1114 1
a1114 1
                /** 0011 0001 1bit 0001		btclr	%e1%1, $%a0			*/
d1120 1
a1120 1
                           "/** 0011 0001 1bit 0001		btclr	%e1%1, $%a0			*/",
d1124 1
a1124 1
                SYNTAX("btclr	%e1%1, $%a0");
d1150 1
a1150 1
                /** 0011 0001 1bit 0011		bt	%e1%1, $%a0			*/
d1156 1
a1156 1
                           "/** 0011 0001 1bit 0011		bt	%e1%1, $%a0			*/",
d1160 1
a1160 1
                SYNTAX("bt	%e1%1, $%a0");
d1186 1
a1186 1
                /** 0011 0001 1bit 0101		bf	%e1%1, $%a0			*/
d1192 1
a1192 1
                           "/** 0011 0001 1bit 0101		bf	%e1%1, $%a0			*/",
d1196 1
a1196 1
                SYNTAX("bf	%e1%1, $%a0");
d1229 1
a1229 1
          /** 0011 1000			mov	%e0%0, #%1			*/
d1233 1
a1233 1
                     "/** 0011 1000			mov	%e0%0, #%1			*/",
d1236 1
a1236 1
          SYNTAX("mov	%e0%0, #%1");
d1244 1
a1244 1
          /** 0011 1001			mov	%e0%0, #%1			*/
d1248 1
a1248 1
                     "/** 0011 1001			mov	%e0%0, #%1			*/",
d1251 1
a1251 1
          SYNTAX("mov	%e0%0, #%1");
d1306 1
a1306 1
          /** 0011 1101			subc	%0, %e1%1			*/
d1310 1
a1310 1
                     "/** 0011 1101			subc	%0, %e1%1			*/",
d1313 1
a1313 1
          SYNTAX("subc	%0, %e1%1");
d1321 1
a1321 1
          /** 0011 1110			subc	%0, %e1%1			*/
d1325 1
a1325 1
                     "/** 0011 1110			subc	%0, %e1%1			*/",
d1328 1
a1328 1
          SYNTAX("subc	%0, %e1%1");
d1336 1
a1336 1
          /** 0011 1111			subc	%0, %e1%!1			*/
d1340 1
a1340 1
                     "/** 0011 1111			subc	%0, %e1%!1			*/",
d1343 1
a1343 1
          SYNTAX("subc	%0, %e1%!1");
d1351 1
a1351 1
          /** 0100 0000			cmp	%e0%!0, #%1			*/
d1355 1
a1355 1
                     "/** 0100 0000			cmp	%e0%!0, #%1			*/",
d1358 1
a1358 1
          SYNTAX("cmp	%e0%!0, #%1");
d1381 1
a1381 1
          /** 0100 0010			cmpw	%0, %e1%!1			*/
d1385 1
a1385 1
                     "/** 0100 0010			cmpw	%0, %e1%!1			*/",
d1388 1
a1388 1
          SYNTAX("cmpw	%0, %e1%!1");
d1448 1
a1448 1
          /** 0100 1000			mov	%e0%0, %1			*/
d1452 1
a1452 1
                     "/** 0100 1000			mov	%e0%0, %1			*/",
d1455 1
a1455 1
          SYNTAX("mov	%e0%0, %1");
d1463 1
a1463 1
          /** 0100 1001			mov	%0, %e1%1			*/
d1467 1
a1467 1
                     "/** 0100 1001			mov	%0, %e1%1			*/",
d1470 1
a1470 1
          SYNTAX("mov	%0, %e1%1");
d1525 1
a1525 1
          /** 0100 1101			cmp	%0, %e1%1			*/
d1529 1
a1529 1
                     "/** 0100 1101			cmp	%0, %e1%1			*/",
d1532 1
a1532 1
          SYNTAX("cmp	%0, %e1%1");
d1540 1
a1540 1
          /** 0100 1110			cmp	%0, %e1%1			*/
d1544 1
a1544 1
                     "/** 0100 1110			cmp	%0, %e1%1			*/",
d1547 1
a1547 1
          SYNTAX("cmp	%0, %e1%1");
d1555 1
a1555 1
          /** 0100 1111			cmp	%0, %e1%!1			*/
d1559 1
a1559 1
                     "/** 0100 1111			cmp	%0, %e1%!1			*/",
d1562 1
a1562 1
          SYNTAX("cmp	%0, %e1%!1");
d1595 1
a1595 1
          /** 0101 1000			movw	%e0%0, %1			*/
d1599 1
a1599 1
                     "/** 0101 1000			movw	%e0%0, %1			*/",
d1602 1
a1602 1
          SYNTAX("movw	%e0%0, %1");
d1610 1
a1610 1
          /** 0101 1001			movw	%0, %e1%1			*/
d1614 1
a1614 1
                     "/** 0101 1001			movw	%0, %e1%1			*/",
d1617 1
a1617 1
          SYNTAX("movw	%0, %e1%1");
d1672 1
a1672 1
          /** 0101 1101			and	%0, %e1%1			*/
d1676 1
a1676 1
                     "/** 0101 1101			and	%0, %e1%1			*/",
d1679 1
a1679 1
          SYNTAX("and	%0, %e1%1");
d1687 1
a1687 1
          /** 0101 1110			and	%0, %e1%1			*/
d1691 1
a1691 1
                     "/** 0101 1110			and	%0, %e1%1			*/",
d1694 1
a1694 1
          SYNTAX("and	%0, %e1%1");
d1702 1
a1702 1
          /** 0101 1111			and	%0, %e1%!1			*/
d1706 1
a1706 1
                     "/** 0101 1111			and	%0, %e1%!1			*/",
d1709 1
a1709 1
          SYNTAX("and	%0, %e1%!1");
d1794 1
a1794 1
                /** 0110 0001 0000 1001		addw	%0, %e1%1			*/
d1798 1
a1798 1
                           "/** 0110 0001 0000 1001		addw	%0, %e1%1			*/",
d1801 1
a1801 1
                SYNTAX("addw	%0, %e1%1");
d1907 1
a1907 1
                /** 0110 0001 0010 1001		subw	%0, %e1%1			*/
d1911 1
a1911 1
                           "/** 0110 0001 0010 1001		subw	%0, %e1%1			*/",
d1914 1
a1914 1
                SYNTAX("subw	%0, %e1%1");
d2020 1
a2020 1
                /** 0110 0001 0100 1001		cmpw	%0, %e1%1			*/
d2024 1
a2024 1
                           "/** 0110 0001 0100 1001		cmpw	%0, %e1%1			*/",
d2027 1
a2027 1
                SYNTAX("cmpw	%0, %e1%1");
d2084 1
a2084 1
                /** 0110 0001 0101 1001		inc	%e0%0				*/
d2088 1
a2088 1
                           "/** 0110 0001 0101 1001		inc	%e0%0				*/",
d2091 1
a2091 1
                SYNTAX("inc	%e0%0");
d2148 1
a2148 1
                /** 0110 0001 0110 1001		dec	%e0%0				*/
d2152 1
a2152 1
                           "/** 0110 0001 0110 1001		dec	%e0%0				*/",
d2155 1
a2155 1
                SYNTAX("dec	%e0%0");
d2212 1
a2212 1
                /** 0110 0001 0111 1001		incw	%e0%0				*/
d2216 1
a2216 1
                           "/** 0110 0001 0111 1001		incw	%e0%0				*/",
d2219 1
a2219 1
                SYNTAX("incw	%e0%0");
d2228 1
a2228 1
                /** 0110 0001 1000 000		add	%0, %e1%1			*/
d2232 1
a2232 1
                           "/** 0110 0001 1000 000		add	%0, %e1%1			*/",
d2235 1
a2235 1
                SYNTAX("add	%0, %e1%1");
d2243 1
a2243 1
                /** 0110 0001 1000 0010		add	%0, %e1%1			*/
d2247 1
a2247 1
                           "/** 0110 0001 1000 0010		add	%0, %e1%1			*/",
d2250 1
a2250 1
                SYNTAX("add	%0, %e1%1");
d2337 1
a2337 1
                /** 0110 0001 1000 1001		decw	%e0%0				*/
d2341 1
a2341 1
                           "/** 0110 0001 1000 1001		decw	%e0%0				*/",
d2344 1
a2344 1
                SYNTAX("decw	%e0%0");
d2352 1
a2352 1
                /** 0110 0001 1001 0000		addc	%0, %e1%1			*/
d2356 1
a2356 1
                           "/** 0110 0001 1001 0000		addc	%0, %e1%1			*/",
d2359 1
a2359 1
                SYNTAX("addc	%0, %e1%1");
d2367 1
a2367 1
                /** 0110 0001 1001 0010		addc	%0, %e1%1			*/
d2371 1
a2371 1
                           "/** 0110 0001 1001 0010		addc	%0, %e1%1			*/",
d2374 1
a2374 1
                SYNTAX("addc	%0, %e1%1");
d2383 1
a2383 1
                /** 0110 0001 1010 000		sub	%0, %e1%1			*/
d2387 1
a2387 1
                           "/** 0110 0001 1010 000		sub	%0, %e1%1			*/",
d2390 1
a2390 1
                SYNTAX("sub	%0, %e1%1");
d2398 1
a2398 1
                /** 0110 0001 1010 0010		sub	%0, %e1%1			*/
d2402 1
a2402 1
                           "/** 0110 0001 1010 0010		sub	%0, %e1%1			*/",
d2405 1
a2405 1
                SYNTAX("sub	%0, %e1%1");
d2428 1
a2428 1
                /** 0110 0001 1010 1001		xch	%0, %e1%1			*/
d2432 1
a2432 1
                           "/** 0110 0001 1010 1001		xch	%0, %e1%1			*/",
d2435 1
a2435 1
                SYNTAX("xch	%0, %e1%1");
d2443 1
a2443 1
                /** 0110 0001 1010 1010		xch	%0, %e1%!1			*/
d2447 1
a2447 1
                           "/** 0110 0001 1010 1010		xch	%0, %e1%!1			*/",
d2450 1
a2450 1
                SYNTAX("xch	%0, %e1%!1");
d2473 1
a2473 1
                /** 0110 0001 1010 1100		xch	%0, %e1%1			*/
d2477 1
a2477 1
                           "/** 0110 0001 1010 1100		xch	%0, %e1%1			*/",
d2480 1
a2480 1
                SYNTAX("xch	%0, %e1%1");
d2488 1
a2488 1
                /** 0110 0001 1010 1101		xch	%0, %e1%1			*/
d2492 1
a2492 1
                           "/** 0110 0001 1010 1101		xch	%0, %e1%1			*/",
d2495 1
a2495 1
                SYNTAX("xch	%0, %e1%1");
d2503 1
a2503 1
                /** 0110 0001 1010 1110		xch	%0, %e1%1			*/
d2507 1
a2507 1
                           "/** 0110 0001 1010 1110		xch	%0, %e1%1			*/",
d2510 1
a2510 1
                SYNTAX("xch	%0, %e1%1");
d2518 1
a2518 1
                /** 0110 0001 1010 1111		xch	%0, %e1%1			*/
d2522 1
a2522 1
                           "/** 0110 0001 1010 1111		xch	%0, %e1%1			*/",
d2525 1
a2525 1
                SYNTAX("xch	%0, %e1%1");
d2533 1
a2533 1
                /** 0110 0001 1011 0000		subc	%0, %e1%1			*/
d2537 1
a2537 1
                           "/** 0110 0001 1011 0000		subc	%0, %e1%1			*/",
d2540 1
a2540 1
                SYNTAX("subc	%0, %e1%1");
d2548 1
a2548 1
                /** 0110 0001 1011 0010		subc	%0, %e1%1			*/
d2552 1
a2552 1
                           "/** 0110 0001 1011 0010		subc	%0, %e1%1			*/",
d2555 1
a2555 1
                SYNTAX("subc	%0, %e1%1");
d2578 1
a2578 1
                /** 0110 0001 1011 1001		xch	%0, %e1%1			*/
d2582 1
a2582 1
                           "/** 0110 0001 1011 1001		xch	%0, %e1%1			*/",
d2585 1
a2585 1
                SYNTAX("xch	%0, %e1%1");
d2593 1
a2593 1
                /** 0110 0001 1100 0000		cmp	%0, %e1%1			*/
d2597 1
a2597 1
                           "/** 0110 0001 1100 0000		cmp	%0, %e1%1			*/",
d2600 1
a2600 1
                SYNTAX("cmp	%0, %e1%1");
d2608 1
a2608 1
                /** 0110 0001 1100 0010		cmp	%0, %e1%1			*/
d2612 1
a2612 1
                           "/** 0110 0001 1100 0010		cmp	%0, %e1%1			*/",
d2615 1
a2615 1
                SYNTAX("cmp	%0, %e1%1");
d2653 1
a2653 1
                /** 0110 0001 1100 1001		mov	%0, %e1%1			*/
d2657 1
a2657 1
                           "/** 0110 0001 1100 1001		mov	%0, %e1%1			*/",
d2660 1
a2660 1
                SYNTAX("mov	%0, %e1%1");
d2740 1
a2740 1
                /** 0110 0001 1100 1110		movs	%e0%0, %1			*/
d2744 1
a2744 1
                           "/** 0110 0001 1100 1110		movs	%e0%0, %1			*/",
d2747 1
a2747 1
                SYNTAX("movs	%e0%0, %1");
d2780 1
a2780 1
                /** 0110 0001 1101 0000		and	%0, %e1%1			*/
d2784 1
a2784 1
                           "/** 0110 0001 1101 0000		and	%0, %e1%1			*/",
d2787 1
a2787 1
                SYNTAX("and	%0, %e1%1");
d2795 1
a2795 1
                /** 0110 0001 1101 0010		and	%0, %e1%1			*/
d2799 1
a2799 1
                           "/** 0110 0001 1101 0010		and	%0, %e1%1			*/",
d2802 1
a2802 1
                SYNTAX("and	%0, %e1%1");
d2840 1
a2840 1
                /** 0110 0001 1101 1001		mov	%e0%0, %1			*/
d2844 1
a2844 1
                           "/** 0110 0001 1101 1001		mov	%e0%0, %1			*/",
d2847 1
a2847 1
                SYNTAX("mov	%e0%0, %1");
d2902 1
a2902 1
                /** 0110 0001 1101 1110		cmps	%0, %e1%1			*/
d2906 1
a2906 1
                           "/** 0110 0001 1101 1110		cmps	%0, %e1%1			*/",
d2909 1
a2909 1
                SYNTAX("cmps	%0, %e1%1");
d2919 1
a2919 1
                /** 0110 0001 1110 0000		or	%0, %e1%1			*/
d2923 1
a2923 1
                           "/** 0110 0001 1110 0000		or	%0, %e1%1			*/",
d2926 1
a2926 1
                SYNTAX("or	%0, %e1%1");
d2934 1
a2934 1
                /** 0110 0001 1110 0010		or	%0, %e1%1			*/
d2938 1
a2938 1
                           "/** 0110 0001 1110 0010		or	%0, %e1%1			*/",
d2941 1
a2941 1
                SYNTAX("or	%0, %e1%1");
d2981 1
a2981 1
                /** 0110 0001 1110 1001		mov	%0, %e1%1			*/
d2985 1
a2985 1
                           "/** 0110 0001 1110 1001		mov	%0, %e1%1			*/",
d2988 1
a2988 1
                SYNTAX("mov	%0, %e1%1");
d3064 1
a3064 1
                /** 0110 0001 1111 0000		xor	%0, %e1%1			*/
d3068 1
a3068 1
                           "/** 0110 0001 1111 0000		xor	%0, %e1%1			*/",
d3071 1
a3071 1
                SYNTAX("xor	%0, %e1%1");
d3079 1
a3079 1
                /** 0110 0001 1111 0010		xor	%0, %e1%1			*/
d3083 1
a3083 1
                           "/** 0110 0001 1111 0010		xor	%0, %e1%1			*/",
d3086 1
a3086 1
                SYNTAX("xor	%0, %e1%1");
d3124 1
a3124 1
                /** 0110 0001 1111 1001		mov	%e0%0, %1			*/
d3128 1
a3128 1
                           "/** 0110 0001 1111 1001		mov	%e0%0, %1			*/",
d3131 1
a3131 1
                SYNTAX("mov	%e0%0, %1");
d3174 1
a3174 1
                /** 0110 0001 1111 1101	stop					*/
d3178 1
a3178 1
                           "/** 0110 0001 1111 1101	stop					*/",
d3194 1
a3194 1
          /** 0110 1000			movw	%e0%0, %1			*/
d3198 1
a3198 1
                     "/** 0110 1000			movw	%e0%0, %1			*/",
d3201 1
a3201 1
          SYNTAX("movw	%e0%0, %1");
d3209 1
a3209 1
          /** 0110 1001			movw	%0, %e1%1			*/
d3213 1
a3213 1
                     "/** 0110 1001			movw	%0, %e1%1			*/",
d3216 1
a3216 1
          SYNTAX("movw	%0, %e1%1");
d3271 1
a3271 1
          /** 0110 1101			or	%0, %e1%1			*/
d3275 1
a3275 1
                     "/** 0110 1101			or	%0, %e1%1			*/",
d3278 1
a3278 1
          SYNTAX("or	%0, %e1%1");
d3286 1
a3286 1
          /** 0110 1110			or	%0, %e1%1			*/
d3290 1
a3290 1
                     "/** 0110 1110			or	%0, %e1%1			*/",
d3293 1
a3293 1
          SYNTAX("or	%0, %e1%1");
d3301 1
a3301 1
          /** 0110 1111			or	%0, %e1%!1			*/
d3305 1
a3305 1
                     "/** 0110 1111			or	%0, %e1%!1			*/",
d3308 1
a3308 1
          SYNTAX("or	%0, %e1%!1");
d3351 1
a3351 1
                /** 0111 0001 0bit 0000		set1	%e0%!0				*/
d3357 1
a3357 1
                           "/** 0111 0001 0bit 0000		set1	%e0%!0				*/",
d3361 1
a3361 1
                SYNTAX("set1	%e0%!0");
d3564 1
a3564 1
                /** 0111 0001 0bit 1000		clr1	%e0%!0				*/
d3570 1
a3570 1
                           "/** 0111 0001 0bit 1000		clr1	%e0%!0				*/",
d3574 1
a3574 1
                SYNTAX("clr1	%e0%!0");
d3787 1
a3787 1
                /** 0111 0001 1bit 0001		mov1	%e0%0, cy			*/
d3793 1
a3793 1
                           "/** 0111 0001 1bit 0001		mov1	%e0%0, cy			*/",
d3797 1
a3797 1
                SYNTAX("mov1	%e0%0, cy");
d3812 1
a3812 1
                /** 0111 0001 1bit 0010		set1	%e0%0				*/
d3818 1
a3818 1
                           "/** 0111 0001 1bit 0010		set1	%e0%0				*/",
d3822 1
a3822 1
                SYNTAX("set1	%e0%0");
d3837 1
a3837 1
                /** 0111 0001 1bit 0011		clr1	%e0%0				*/
d3843 1
a3843 1
                           "/** 0111 0001 1bit 0011		clr1	%e0%0				*/",
d3847 1
a3847 1
                SYNTAX("clr1	%e0%0");
d3862 1
a3862 1
                /** 0111 0001 1bit 0100		mov1	cy, %e1%1			*/
d3868 1
a3868 1
                           "/** 0111 0001 1bit 0100		mov1	cy, %e1%1			*/",
d3872 1
a3872 1
                SYNTAX("mov1	cy, %e1%1");
d3887 1
a3887 1
                /** 0111 0001 1bit 0101		and1	cy, %e1%1			*/
d3893 1
a3893 1
                           "/** 0111 0001 1bit 0101		and1	cy, %e1%1			*/",
d3897 1
a3897 1
                SYNTAX("and1	cy, %e1%1");
d3912 1
a3912 1
                /** 0111 0001 1bit 0110		or1	cy, %e1%1			*/
d3918 1
a3918 1
                           "/** 0111 0001 1bit 0110		or1	cy, %e1%1			*/",
d3922 1
a3922 1
                SYNTAX("or1	cy, %e1%1");
d3937 1
a3937 1
                /** 0111 0001 1bit 0111		xor1	cy, %e1%1			*/
d3943 1
a3943 1
                           "/** 0111 0001 1bit 0111		xor1	cy, %e1%1			*/",
d3947 1
a3947 1
                SYNTAX("xor1	cy, %e1%1");
d3977 1
a3977 1
                /** 0111 0001 1bit 1001		mov1	%e0%0, cy			*/
d3983 1
a3983 1
                           "/** 0111 0001 1bit 1001		mov1	%e0%0, cy			*/",
d3987 1
a3987 1
                SYNTAX("mov1	%e0%0, cy");
d4052 1
a4052 1
                /** 0111 0001 1bit 1100		mov1	cy, %e1%1			*/
d4058 1
a4058 1
                           "/** 0111 0001 1bit 1100		mov1	cy, %e1%1			*/",
d4062 1
a4062 1
                SYNTAX("mov1	cy, %e1%1");
d4165 1
a4165 1
          /** 0111 1000			movw	%e0%0, %1			*/
d4169 1
a4169 1
                     "/** 0111 1000			movw	%e0%0, %1			*/",
d4172 1
a4172 1
          SYNTAX("movw	%e0%0, %1");
d4180 1
a4180 1
          /** 0111 1001			movw	%0, %e1%1			*/
d4184 1
a4184 1
                     "/** 0111 1001			movw	%0, %e1%1			*/",
d4187 1
a4187 1
          SYNTAX("movw	%0, %e1%1");
d4242 1
a4242 1
          /** 0111 1101			xor	%0, %e1%1			*/
d4246 1
a4246 1
                     "/** 0111 1101			xor	%0, %e1%1			*/",
d4249 1
a4249 1
          SYNTAX("xor	%0, %e1%1");
d4257 1
a4257 1
          /** 0111 1110			xor	%0, %e1%1			*/
d4261 1
a4261 1
                     "/** 0111 1110			xor	%0, %e1%1			*/",
d4264 1
a4264 1
          SYNTAX("xor	%0, %e1%1");
d4272 1
a4272 1
          /** 0111 1111			xor	%0, %e1%!1			*/
d4276 1
a4276 1
                     "/** 0111 1111			xor	%0, %e1%!1			*/",
d4279 1
a4279 1
          SYNTAX("xor	%0, %e1%!1");
d4312 1
a4312 1
          /** 1000 1000			mov	%0, %e1%1			*/
d4316 1
a4316 1
                     "/** 1000 1000			mov	%0, %e1%1			*/",
d4319 1
a4319 1
          SYNTAX("mov	%0, %e1%1");
d4327 1
a4327 1
          /** 1000 1001			mov	%0, %e1%1			*/
d4331 1
a4331 1
                     "/** 1000 1001			mov	%0, %e1%1			*/",
d4334 1
a4334 1
          SYNTAX("mov	%0, %e1%1");
d4342 1
a4342 1
          /** 1000 1010			mov	%0, %e1%1			*/
d4346 1
a4346 1
                     "/** 1000 1010			mov	%0, %e1%1			*/",
d4349 1
a4349 1
          SYNTAX("mov	%0, %e1%1");
d4357 1
a4357 1
          /** 1000 1011			mov	%0, %e1%1			*/
d4361 1
a4361 1
                     "/** 1000 1011			mov	%0, %e1%1			*/",
d4364 1
a4364 1
          SYNTAX("mov	%0, %e1%1");
d4372 1
a4372 1
          /** 1000 1100			mov	%0, %e1%1			*/
d4376 1
a4376 1
                     "/** 1000 1100			mov	%0, %e1%1			*/",
d4379 1
a4379 1
          SYNTAX("mov	%0, %e1%1");
d4417 1
a4417 1
          /** 1000 1111			mov	%0, %e1%!1			*/
d4421 1
a4421 1
                     "/** 1000 1111			mov	%0, %e1%!1			*/",
d4424 1
a4424 1
          SYNTAX("mov	%0, %e1%!1");
d4472 1
a4472 1
          /** 1001 1001			mov	%e0%0,%1			*/
d4476 1
a4476 1
                     "/** 1001 1001			mov	%e0%0,%1			*/",
d4479 1
a4479 1
          SYNTAX("mov	%e0%0,%1");
d4487 1
a4487 1
          /** 1001 1010			mov	%e0%0, %1			*/
d4491 1
a4491 1
                     "/** 1001 1010			mov	%e0%0, %1			*/",
d4494 1
a4494 1
          SYNTAX("mov	%e0%0, %1");
d4502 1
a4502 1
          /** 1001 1011			mov	%e0%0,%1			*/
d4506 1
a4506 1
                     "/** 1001 1011			mov	%e0%0,%1			*/",
d4509 1
a4509 1
          SYNTAX("mov	%e0%0,%1");
d4517 1
a4517 1
          /** 1001 1100			mov	%e0%0, %1			*/
d4521 1
a4521 1
                     "/** 1001 1100			mov	%e0%0, %1			*/",
d4524 1
a4524 1
          SYNTAX("mov	%e0%0, %1");
d4564 1
a4564 1
          /** 1001 1111			mov	%e0%!0, %1			*/
d4568 1
a4568 1
                     "/** 1001 1111			mov	%e0%!0, %1			*/",
d4571 1
a4571 1
          SYNTAX("mov	%e0%!0, %1");
d4579 1
a4579 1
          /** 1010 0000			inc	%e0%!0				*/
d4583 1
a4583 1
                     "/** 1010 0000			inc	%e0%!0				*/",
d4586 1
a4586 1
          SYNTAX("inc	%e0%!0");
d4615 1
a4615 1
          /** 1010 0010			incw	%e0%!0				*/
d4619 1
a4619 1
                     "/** 1010 0010			incw	%e0%!0				*/",
d4622 1
a4622 1
          SYNTAX("incw	%e0%!0");
d4679 1
a4679 1
          /** 1010 1001			movw	%0, %e1%1			*/
d4683 1
a4683 1
                     "/** 1010 1001			movw	%0, %e1%1			*/",
d4686 1
a4686 1
          SYNTAX("movw	%0, %e1%1");
d4694 1
a4694 1
          /** 1010 1010			movw	%0, %e1%1			*/
d4698 1
a4698 1
                     "/** 1010 1010			movw	%0, %e1%1			*/",
d4701 1
a4701 1
          SYNTAX("movw	%0, %e1%1");
d4709 1
a4709 1
          /** 1010 1011			movw	%0, %e1%1			*/
d4713 1
a4713 1
                     "/** 1010 1011			movw	%0, %e1%1			*/",
d4716 1
a4716 1
          SYNTAX("movw	%0, %e1%1");
d4724 1
a4724 1
          /** 1010 1100			movw	%0, %e1%1			*/
d4728 1
a4728 1
                     "/** 1010 1100			movw	%0, %e1%1			*/",
d4731 1
a4731 1
          SYNTAX("movw	%0, %e1%1");
d4769 1
a4769 1
          /** 1010 1111			movw	%0, %e1%!1			*/
d4773 1
a4773 1
                     "/** 1010 1111			movw	%0, %e1%!1			*/",
d4776 1
a4776 1
          SYNTAX("movw	%0, %e1%!1");
d4785 1
a4785 1
          /** 1011 0000			dec	%e0%!0				*/
d4789 1
a4789 1
                     "/** 1011 0000			dec	%e0%!0				*/",
d4792 1
a4792 1
          SYNTAX("dec	%e0%!0");
d4821 1
a4821 1
          /** 1011 0010			decw	%e0%!0				*/
d4825 1
a4825 1
                     "/** 1011 0010			decw	%e0%!0				*/",
d4828 1
a4828 1
          SYNTAX("decw	%e0%!0");
d4885 1
a4885 1
          /** 1011 1001			movw	%e0%0, %1			*/
d4889 1
a4889 1
                     "/** 1011 1001			movw	%e0%0, %1			*/",
d4892 1
a4892 1
          SYNTAX("movw	%e0%0, %1");
d4900 1
a4900 1
          /** 1011 1010			movw	%e0%0, %1			*/
d4904 1
a4904 1
                     "/** 1011 1010			movw	%e0%0, %1			*/",
d4907 1
a4907 1
          SYNTAX("movw	%e0%0, %1");
d4915 1
a4915 1
          /** 1011 1011			movw	%e0%0, %1			*/
d4919 1
a4919 1
                     "/** 1011 1011			movw	%e0%0, %1			*/",
d4922 1
a4922 1
          SYNTAX("movw	%e0%0, %1");
d4930 1
a4930 1
          /** 1011 1100			movw	%e0%0, %1			*/
d4934 1
a4934 1
                     "/** 1011 1100			movw	%e0%0, %1			*/",
d4937 1
a4937 1
          SYNTAX("movw	%e0%0, %1");
d4977 1
a4977 1
          /** 1011 1111			movw	%e0%!0, %1			*/
d4981 1
a4981 1
                     "/** 1011 1111			movw	%e0%!0, %1			*/",
d4984 1
a4984 1
          SYNTAX("movw	%e0%!0, %1");
d5064 1
a5064 1
          /** 1100 1010			mov	%e0%0, #%1			*/
d5068 1
a5068 1
                     "/** 1100 1010			mov	%e0%0, #%1			*/",
d5071 1
a5071 1
          SYNTAX("mov	%e0%0, #%1");
d5094 1
a5094 1
          /** 1100 1100			mov	%e0%0, #%1			*/
d5098 1
a5098 1
                     "/** 1100 1100			mov	%e0%0, #%1			*/",
d5101 1
a5101 1
          SYNTAX("mov	%e0%0, #%1");
d5163 1
a5163 1
          /** 1100 1111			mov	%e0%!0, #%1			*/
d5167 1
a5167 1
                     "/** 1100 1111			mov	%e0%!0, #%1			*/",
d5170 1
a5170 1
          SYNTAX("mov	%e0%!0, #%1");
d5216 1
a5216 1
          /** 1101 0101			cmp0	%e0%!0				*/
d5220 1
a5220 1
                     "/** 1101 0101			cmp0	%e0%!0				*/",
d5223 1
a5223 1
          SYNTAX("cmp0	%e0%!0");
d5278 1
a5278 1
          /** 1101 1001			mov	%0, %e1%!1			*/
d5282 1
a5282 1
                     "/** 1101 1001			mov	%0, %e1%!1			*/",
d5285 1
a5285 1
          SYNTAX("mov	%0, %e1%!1");
d5315 1
a5315 1
          /** 11ra 1011			movw	%0, %e1%!1			*/
d5321 1
a5321 1
                     "/** 11ra 1011			movw	%0, %e1%!1			*/",
d5325 1
a5325 1
          SYNTAX("movw	%0, %e1%!1");
d5433 1
a5433 1
          /** 1110 0101			oneb	%e0%!0				*/
d5437 1
a5437 1
                     "/** 1110 0101			oneb	%e0%!0				*/",
d5440 1
a5440 1
          SYNTAX("oneb	%e0%!0");
d5495 1
a5495 1
          /** 1110 1001			mov	%0, %e1%!1			*/
d5499 1
a5499 1
                     "/** 1110 1001			mov	%0, %e1%!1			*/",
d5502 1
a5502 1
          SYNTAX("mov	%0, %e1%!1");
d5608 1
a5608 1
          /** 1111 0101			clrb	%e0%!0				*/
d5612 1
a5612 1
                     "/** 1111 0101			clrb	%e0%!0				*/",
d5615 1
a5615 1
          SYNTAX("clrb	%e0%!0");
d5670 1
a5670 1
          /** 1111 1001			mov	%0, %e1%!1			*/
d5674 1
a5674 1
                     "/** 1111 1001			mov	%0, %e1%!1			*/",
d5677 1
a5677 1
          SYNTAX("mov	%0, %e1%!1");
@


1.3
log
@	PR 14072
	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* sysdep.h: Generate an error if included before config.h.
	* alpha-opc.c: Include sysdep.h before any other header file.
	* alpha-dis.c: Likewise.
	* avr-dis.c: Likewise.
	* cgen-opc.c: Likewise.
	* cr16-dis.c: Likewise.
	* cris-dis.c: Likewise.
	* crx-dis.c: Likewise.
	* d10v-dis.c: Likewise.
	* d10v-opc.c: Likewise.
	* d30v-dis.c: Likewise.
	* d30v-opc.c: Likewise.
	* h8500-dis.c: Likewise.
	* i370-dis.c: Likewise.
	* i370-opc.c: Likewise.
	* m10200-dis.c: Likewise.
	* m10300-dis.c: Likewise.
	* micromips-opc.c: Likewise.
	* mips-opc.c: Likewise.
	* mips61-opc.c: Likewise.
	* moxie-dis.c: Likewise.
	* or32-opc.c: Likewise.
	* pj-dis.c: Likewise.
	* ppc-dis.c: Likewise.
	* ppc-opc.c: Likewise.
	* s390-dis.c: Likewise.
	* sh-dis.c: Likewise.
	* sh64-dis.c: Likewise.
	* sparc-dis.c: Likewise.
	* sparc-opc.c: Likewise.
	* spu-dis.c: Likewise.
	* tic30-dis.c: Likewise.
	* tic54x-dis.c: Likewise.
	* tic80-dis.c: Likewise.
	* tic80-opc.c: Likewise.
	* tilegx-dis.c: Likewise.
	* tilepro-dis.c: Likewise.
	* v850-dis.c: Likewise.
	* v850-opc.c: Likewise.
	* vax-dis.c: Likewise.
	* w65-dis.c: Likewise.
	* xgate-dis.c: Likewise.
	* xtensa-dis.c: Likewise.
	* rl78-decode.opc: Likewise.
	* rl78-decode.c: Regenerate.
	* rx-decode.opc: Likewise.
	* rx-decode.c: Regenerate.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* sysdep.h: Generate an error if included before config.h.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* aclocal.m4: Regenerate.
	* bfd-in.h: Generate an error if included before config.h.
	* sysdep.h: Likewise.
	* bfd-in2.h: Regenerate.
	* compress.c: Remove #include "config.h".
	* plugin.c: Likewise.
	* elf32-m68hc1x.c: Include sysdep.h before alloca-conf.h.
	* elf64-hppa.c: Likewise.
	* som.c: Likewise.
	* xsymc.c: Likewise.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* aclocal.m4: Regenerate.
	* Makefile.am: Use wrappers around C files generated by flex.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* itbl-lex-wrapper.c: New file.
	* config/bfin-lex-wrapper.c: New file.
	* cgen.c: Include as.h before setjmp.h.
	* config/tc-dlx.c: Include as.h before any other header.
	* config/tc-h8300.c: Likewise.
	* config/tc-lm32.c: Likewise.
	* config/tc-mep.c: Likewise.
	* config/tc-microblaze.c: Likewise.
	* config/tc-mmix.c: Likewise.
	* config/tc-msp430.c: Likewise.
	* config/tc-or32.c: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-xtensa.c: Likewise.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* unwind-ia64.h: Include config.h.
@
text
@d182 1
a182 1
#line 887 "rl78-decode.opc"
d195 1
a195 1
#line 253 "rl78-decode.opc"
d205 1
a205 1
#line 253 "rl78-decode.opc"
d220 1
a220 1
#line 244 "rl78-decode.opc"
d235 1
a235 1
#line 250 "rl78-decode.opc"
d250 1
a250 1
#line 256 "rl78-decode.opc"
d265 1
a265 1
#line 1210 "rl78-decode.opc"
d282 1
a282 1
#line 657 "rl78-decode.opc"
d297 1
a297 1
#line 207 "rl78-decode.opc"
d314 1
a314 1
#line 201 "rl78-decode.opc"
d329 1
a329 1
#line 195 "rl78-decode.opc"
d344 1
a344 1
#line 183 "rl78-decode.opc"
d359 1
a359 1
#line 189 "rl78-decode.opc"
d374 1
a374 1
#line 180 "rl78-decode.opc"
d389 1
a389 1
#line 259 "rl78-decode.opc"
d406 1
a406 1
#line 172 "rl78-decode.opc"
d421 1
a421 1
#line 835 "rl78-decode.opc"
d431 1
a431 1
#line 835 "rl78-decode.opc"
d441 1
a441 1
#line 832 "rl78-decode.opc"
d451 1
a451 1
#line 832 "rl78-decode.opc"
d466 1
a466 1
#line 708 "rl78-decode.opc"
d481 1
a481 1
#line 705 "rl78-decode.opc"
d496 1
a496 1
#line 239 "rl78-decode.opc"
d513 1
a513 1
#line 236 "rl78-decode.opc"
d528 1
a528 1
#line 227 "rl78-decode.opc"
d543 1
a543 1
#line 215 "rl78-decode.opc"
d558 1
a558 1
#line 224 "rl78-decode.opc"
d573 1
a573 1
#line 212 "rl78-decode.opc"
d588 1
a588 1
#line 1174 "rl78-decode.opc"
d601 1
a601 1
#line 1168 "rl78-decode.opc"
d611 1
a611 1
#line 1168 "rl78-decode.opc"
d626 1
a626 1
#line 1159 "rl78-decode.opc"
d641 1
a641 1
#line 1165 "rl78-decode.opc"
d656 1
a656 1
#line 1171 "rl78-decode.opc"
d671 1
a671 1
#line 720 "rl78-decode.opc"
d686 1
a686 1
#line 663 "rl78-decode.opc"
d701 1
a701 1
#line 1122 "rl78-decode.opc"
d718 1
a718 1
#line 1116 "rl78-decode.opc"
d733 1
a733 1
#line 1110 "rl78-decode.opc"
d748 1
a748 1
#line 1098 "rl78-decode.opc"
d763 1
a763 1
#line 1104 "rl78-decode.opc"
d778 1
a778 1
#line 1095 "rl78-decode.opc"
d789 1
a789 1
#line 829 "rl78-decode.opc"
d799 1
a799 1
#line 829 "rl78-decode.opc"
d811 1
a811 1
#line 395 "rl78-decode.opc"
d821 1
a821 1
#line 395 "rl78-decode.opc"
d831 1
a831 1
#line 389 "rl78-decode.opc"
d841 1
a841 1
#line 389 "rl78-decode.opc"
d849 1
a849 1
#line 381 "rl78-decode.opc"
d859 1
a859 1
#line 381 "rl78-decode.opc"
d869 1
a869 1
#line 375 "rl78-decode.opc"
d879 1
a879 1
#line 375 "rl78-decode.opc"
d887 1
a887 1
#line 342 "rl78-decode.opc"
d897 1
a897 1
#line 342 "rl78-decode.opc"
d907 1
a907 1
#line 336 "rl78-decode.opc"
d917 1
a917 1
#line 336 "rl78-decode.opc"
d925 1
a925 1
#line 1051 "rl78-decode.opc"
d935 1
a935 1
#line 1051 "rl78-decode.opc"
d943 1
a943 1
#line 1048 "rl78-decode.opc"
d953 1
a953 1
#line 1048 "rl78-decode.opc"
d961 1
a961 1
#line 1045 "rl78-decode.opc"
d971 1
a971 1
#line 1045 "rl78-decode.opc"
d979 1
a979 1
#line 1062 "rl78-decode.opc"
d989 1
a989 1
#line 1062 "rl78-decode.opc"
d997 1
a997 1
#line 1009 "rl78-decode.opc"
d1007 1
a1007 1
#line 1009 "rl78-decode.opc"
d1016 1
a1016 1
#line 1057 "rl78-decode.opc"
d1026 1
a1026 1
#line 1057 "rl78-decode.opc"
d1037 1
a1037 1
#line 1054 "rl78-decode.opc"
d1047 1
a1047 1
#line 1054 "rl78-decode.opc"
d1056 1
a1056 1
#line 1065 "rl78-decode.opc"
d1066 1
a1066 1
#line 1065 "rl78-decode.opc"
d1077 1
a1077 1
#line 1012 "rl78-decode.opc"
d1087 1
a1087 1
#line 1012 "rl78-decode.opc"
d1097 1
a1097 1
#line 392 "rl78-decode.opc"
d1107 1
a1107 1
#line 392 "rl78-decode.opc"
d1115 1
a1115 1
#line 386 "rl78-decode.opc"
d1125 1
a1125 1
#line 386 "rl78-decode.opc"
d1133 1
a1133 1
#line 378 "rl78-decode.opc"
d1143 1
a1143 1
#line 378 "rl78-decode.opc"
d1151 1
a1151 1
#line 372 "rl78-decode.opc"
d1161 1
a1161 1
#line 372 "rl78-decode.opc"
d1169 1
a1169 1
#line 339 "rl78-decode.opc"
d1179 1
a1179 1
#line 339 "rl78-decode.opc"
d1187 1
a1187 1
#line 333 "rl78-decode.opc"
d1197 1
a1197 1
#line 333 "rl78-decode.opc"
d1210 1
a1210 1
#line 1215 "rl78-decode.opc"
d1220 1
a1220 1
#line 1215 "rl78-decode.opc"
d1237 1
a1237 1
#line 717 "rl78-decode.opc"
d1252 1
a1252 1
#line 711 "rl78-decode.opc"
d1267 1
a1267 1
#line 1154 "rl78-decode.opc"
d1284 1
a1284 1
#line 1151 "rl78-decode.opc"
d1299 1
a1299 1
#line 1142 "rl78-decode.opc"
d1314 1
a1314 1
#line 1130 "rl78-decode.opc"
d1329 1
a1329 1
#line 1139 "rl78-decode.opc"
d1344 1
a1344 1
#line 1127 "rl78-decode.opc"
d1359 1
a1359 1
#line 459 "rl78-decode.opc"
d1374 1
a1374 1
#line 696 "rl78-decode.opc"
d1389 1
a1389 1
#line 510 "rl78-decode.opc"
d1399 1
a1399 1
#line 519 "rl78-decode.opc"
d1409 1
a1409 1
#line 519 "rl78-decode.opc"
d1424 1
a1424 1
#line 516 "rl78-decode.opc"
d1439 1
a1439 1
#line 522 "rl78-decode.opc"
d1456 1
a1456 1
#line 714 "rl78-decode.opc"
d1471 1
a1471 1
#line 660 "rl78-decode.opc"
d1486 1
a1486 1
#line 462 "rl78-decode.opc"
d1501 1
a1501 1
#line 489 "rl78-decode.opc"
d1518 1
a1518 1
#line 480 "rl78-decode.opc"
d1533 1
a1533 1
#line 468 "rl78-decode.opc"
d1548 1
a1548 1
#line 477 "rl78-decode.opc"
d1563 1
a1563 1
#line 465 "rl78-decode.opc"
d1578 1
a1578 1
#line 648 "rl78-decode.opc"
d1588 1
a1588 1
#line 648 "rl78-decode.opc"
d1603 1
a1603 1
#line 847 "rl78-decode.opc"
d1618 1
a1618 1
#line 838 "rl78-decode.opc"
d1633 1
a1633 1
#line 291 "rl78-decode.opc"
d1650 1
a1650 1
#line 288 "rl78-decode.opc"
d1665 1
a1665 1
#line 279 "rl78-decode.opc"
d1680 1
a1680 1
#line 267 "rl78-decode.opc"
d1695 1
a1695 1
#line 273 "rl78-decode.opc"
d1710 1
a1710 1
#line 264 "rl78-decode.opc"
d1724 1
a1724 1
#line 651 "rl78-decode.opc"
d1734 1
a1734 1
#line 651 "rl78-decode.opc"
d1753 1
a1753 1
#line 204 "rl78-decode.opc"
d1763 1
a1763 1
#line 204 "rl78-decode.opc"
d1777 1
a1777 1
#line 198 "rl78-decode.opc"
d1787 1
a1787 1
#line 198 "rl78-decode.opc"
d1802 1
a1802 1
#line 247 "rl78-decode.opc"
d1817 1
a1817 1
#line 233 "rl78-decode.opc"
d1827 1
a1827 1
#line 233 "rl78-decode.opc"
d1841 1
a1841 1
#line 230 "rl78-decode.opc"
d1851 1
a1851 1
#line 230 "rl78-decode.opc"
d1866 1
a1866 1
#line 1119 "rl78-decode.opc"
d1876 1
a1876 1
#line 1119 "rl78-decode.opc"
d1890 1
a1890 1
#line 1113 "rl78-decode.opc"
d1900 1
a1900 1
#line 1113 "rl78-decode.opc"
d1915 1
a1915 1
#line 1162 "rl78-decode.opc"
d1930 1
a1930 1
#line 1148 "rl78-decode.opc"
d1940 1
a1940 1
#line 1148 "rl78-decode.opc"
d1954 1
a1954 1
#line 1145 "rl78-decode.opc"
d1964 1
a1964 1
#line 1145 "rl78-decode.opc"
d1979 1
a1979 1
#line 486 "rl78-decode.opc"
d1989 1
a1989 1
#line 486 "rl78-decode.opc"
d2003 1
a2003 1
#line 483 "rl78-decode.opc"
d2013 1
a2013 1
#line 483 "rl78-decode.opc"
d2028 1
a2028 1
#line 513 "rl78-decode.opc"
d2043 1
a2043 1
#line 285 "rl78-decode.opc"
d2053 1
a2053 1
#line 285 "rl78-decode.opc"
d2067 1
a2067 1
#line 282 "rl78-decode.opc"
d2077 1
a2077 1
#line 282 "rl78-decode.opc"
d2092 1
a2092 1
#line 563 "rl78-decode.opc"
d2107 1
a2107 1
#line 937 "rl78-decode.opc"
d2117 1
a2117 1
#line 937 "rl78-decode.opc"
d2131 1
a2131 1
#line 934 "rl78-decode.opc"
d2141 1
a2141 1
#line 934 "rl78-decode.opc"
d2156 1
a2156 1
#line 530 "rl78-decode.opc"
d2171 1
a2171 1
#line 1241 "rl78-decode.opc"
d2181 1
a2181 1
#line 1241 "rl78-decode.opc"
d2195 1
a2195 1
#line 1238 "rl78-decode.opc"
d2205 1
a2205 1
#line 1238 "rl78-decode.opc"
d2220 1
a2220 1
#line 577 "rl78-decode.opc"
d2236 1
a2236 1
#line 186 "rl78-decode.opc"
d2251 1
a2251 1
#line 192 "rl78-decode.opc"
d2290 1
a2290 1
#line 412 "rl78-decode.opc"
d2292 1
a2292 1
#line 412 "rl78-decode.opc"
d2303 1
a2303 1
#line 412 "rl78-decode.opc"
d2319 1
a2319 1
#line 1200 "rl78-decode.opc"
d2329 1
a2329 1
#line 1200 "rl78-decode.opc"
d2345 1
a2345 1
#line 544 "rl78-decode.opc"
d2360 1
a2360 1
#line 218 "rl78-decode.opc"
d2375 1
a2375 1
#line 221 "rl78-decode.opc"
d2391 1
a2391 1
#line 1101 "rl78-decode.opc"
d2406 1
a2406 1
#line 1107 "rl78-decode.opc"
d2421 1
a2421 1
#line 1204 "rl78-decode.opc"
d2436 1
a2436 1
#line 1197 "rl78-decode.opc"
d2451 1
a2451 1
#line 1179 "rl78-decode.opc"
d2466 1
a2466 1
#line 1207 "rl78-decode.opc"
d2481 1
a2481 1
#line 1188 "rl78-decode.opc"
d2496 1
a2496 1
#line 1194 "rl78-decode.opc"
d2511 1
a2511 1
#line 1182 "rl78-decode.opc"
d2526 1
a2526 1
#line 1185 "rl78-decode.opc"
d2541 1
a2541 1
#line 1133 "rl78-decode.opc"
d2556 1
a2556 1
#line 1136 "rl78-decode.opc"
d2571 1
a2571 1
#line 702 "rl78-decode.opc"
d2586 1
a2586 1
#line 1191 "rl78-decode.opc"
d2601 1
a2601 1
#line 471 "rl78-decode.opc"
d2616 1
a2616 1
#line 474 "rl78-decode.opc"
d2631 1
a2631 1
#line 319 "rl78-decode.opc"
d2646 1
a2646 1
#line 1070 "rl78-decode.opc"
d2661 1
a2661 1
#line 639 "rl78-decode.opc"
d2672 1
a2672 1
#line 409 "rl78-decode.opc"
d2682 1
a2682 1
#line 409 "rl78-decode.opc"
d2697 1
a2697 1
#line 359 "rl78-decode.opc"
d2714 1
a2714 1
#line 367 "rl78-decode.opc"
d2731 1
a2731 1
#line 965 "rl78-decode.opc"
d2748 1
a2748 1
#line 787 "rl78-decode.opc"
d2761 1
a2761 1
#line 1017 "rl78-decode.opc"
d2771 1
a2771 1
#line 1017 "rl78-decode.opc"
d2788 1
a2788 1
#line 270 "rl78-decode.opc"
d2803 1
a2803 1
#line 276 "rl78-decode.opc"
d2818 1
a2818 1
#line 322 "rl78-decode.opc"
d2833 1
a2833 1
#line 1076 "rl78-decode.opc"
d2848 1
a2848 1
#line 606 "rl78-decode.opc"
d2863 1
a2863 1
#line 998 "rl78-decode.opc"
d2878 1
a2878 1
#line 992 "rl78-decode.opc"
d2893 1
a2893 1
#line 973 "rl78-decode.opc"
d2910 1
a2910 1
#line 505 "rl78-decode.opc"
d2927 1
a2927 1
#line 922 "rl78-decode.opc"
d2942 1
a2942 1
#line 928 "rl78-decode.opc"
d2957 1
a2957 1
#line 1073 "rl78-decode.opc"
d2972 1
a2972 1
#line 1085 "rl78-decode.opc"
d2989 1
a2989 1
#line 642 "rl78-decode.opc"
d3004 1
a3004 1
#line 989 "rl78-decode.opc"
d3019 1
a3019 1
#line 984 "rl78-decode.opc"
d3036 1
a3036 1
#line 555 "rl78-decode.opc"
d3047 1
a3047 1
#line 995 "rl78-decode.opc"
d3057 1
a3057 1
#line 995 "rl78-decode.opc"
d3072 1
a3072 1
#line 1226 "rl78-decode.opc"
d3087 1
a3087 1
#line 1232 "rl78-decode.opc"
d3102 1
a3102 1
#line 1079 "rl78-decode.opc"
d3117 1
a3117 1
#line 1082 "rl78-decode.opc"
d3132 1
a3132 1
#line 615 "rl78-decode.opc"
d3147 1
a3147 1
#line 1001 "rl78-decode.opc"
d3167 1
a3167 1
#line 981 "rl78-decode.opc"
d3182 1
a3182 1
#line 1090 "rl78-decode.opc"
d3202 1
a3202 1
#line 850 "rl78-decode.opc"
d3217 1
a3217 1
#line 841 "rl78-decode.opc"
d3232 1
a3232 1
#line 943 "rl78-decode.opc"
d3249 1
a3249 1
#line 940 "rl78-decode.opc"
d3264 1
a3264 1
#line 931 "rl78-decode.opc"
d3279 1
a3279 1
#line 919 "rl78-decode.opc"
d3294 1
a3294 1
#line 925 "rl78-decode.opc"
d3309 1
a3309 1
#line 916 "rl78-decode.opc"
d3323 1
a3323 1
#line 675 "rl78-decode.opc"
d3333 1
a3333 1
#line 675 "rl78-decode.opc"
d3352 1
a3352 1
#line 1022 "rl78-decode.opc"
d3362 1
a3362 1
#line 1022 "rl78-decode.opc"
d3377 1
a3377 1
#line 779 "rl78-decode.opc"
d3387 1
a3387 1
#line 779 "rl78-decode.opc"
d3402 1
a3402 1
#line 1040 "rl78-decode.opc"
d3412 1
a3412 1
#line 1040 "rl78-decode.opc"
d3429 1
a3429 1
#line 435 "rl78-decode.opc"
d3439 1
a3439 1
#line 435 "rl78-decode.opc"
d3456 1
a3456 1
#line 773 "rl78-decode.opc"
d3466 1
a3466 1
#line 773 "rl78-decode.opc"
d3481 1
a3481 1
#line 305 "rl78-decode.opc"
d3491 1
a3491 1
#line 305 "rl78-decode.opc"
d3511 1
a3511 1
#line 957 "rl78-decode.opc"
d3521 1
a3521 1
#line 957 "rl78-decode.opc"
d3538 1
a3538 1
#line 1261 "rl78-decode.opc"
d3548 1
a3548 1
#line 1261 "rl78-decode.opc"
d3565 1
a3565 1
#line 417 "rl78-decode.opc"
d3575 1
a3575 1
#line 417 "rl78-decode.opc"
d3590 1
a3590 1
#line 782 "rl78-decode.opc"
d3600 1
a3600 1
#line 782 "rl78-decode.opc"
d3617 1
a3617 1
#line 1034 "rl78-decode.opc"
d3627 1
a3627 1
#line 1034 "rl78-decode.opc"
d3645 1
a3645 1
#line 429 "rl78-decode.opc"
d3655 1
a3655 1
#line 429 "rl78-decode.opc"
d3673 1
a3673 1
#line 776 "rl78-decode.opc"
d3683 1
a3683 1
#line 776 "rl78-decode.opc"
d3698 1
a3698 1
#line 302 "rl78-decode.opc"
d3708 1
a3708 1
#line 302 "rl78-decode.opc"
d3723 1
a3723 1
#line 954 "rl78-decode.opc"
d3733 1
a3733 1
#line 954 "rl78-decode.opc"
d3748 1
a3748 1
#line 1258 "rl78-decode.opc"
d3758 1
a3758 1
#line 1258 "rl78-decode.opc"
d3773 1
a3773 1
#line 1031 "rl78-decode.opc"
d3788 1
a3788 1
#line 761 "rl78-decode.opc"
d3798 1
a3798 1
#line 761 "rl78-decode.opc"
d3813 1
a3813 1
#line 1025 "rl78-decode.opc"
d3823 1
a3823 1
#line 1025 "rl78-decode.opc"
d3838 1
a3838 1
#line 420 "rl78-decode.opc"
d3848 1
a3848 1
#line 420 "rl78-decode.opc"
d3863 1
a3863 1
#line 767 "rl78-decode.opc"
d3873 1
a3873 1
#line 767 "rl78-decode.opc"
d3888 1
a3888 1
#line 296 "rl78-decode.opc"
d3898 1
a3898 1
#line 296 "rl78-decode.opc"
d3913 1
a3913 1
#line 948 "rl78-decode.opc"
d3923 1
a3923 1
#line 948 "rl78-decode.opc"
d3938 1
a3938 1
#line 1252 "rl78-decode.opc"
d3948 1
a3948 1
#line 1252 "rl78-decode.opc"
d3963 1
a3963 1
#line 426 "rl78-decode.opc"
d3978 1
a3978 1
#line 764 "rl78-decode.opc"
d3988 1
a3988 1
#line 764 "rl78-decode.opc"
d4003 1
a4003 1
#line 1028 "rl78-decode.opc"
d4013 1
a4013 1
#line 1028 "rl78-decode.opc"
d4028 1
a4028 1
#line 423 "rl78-decode.opc"
d4038 1
a4038 1
#line 423 "rl78-decode.opc"
d4053 1
a4053 1
#line 770 "rl78-decode.opc"
d4063 1
a4063 1
#line 770 "rl78-decode.opc"
d4078 1
a4078 1
#line 299 "rl78-decode.opc"
d4088 1
a4088 1
#line 299 "rl78-decode.opc"
d4103 1
a4103 1
#line 951 "rl78-decode.opc"
d4113 1
a4113 1
#line 951 "rl78-decode.opc"
d4128 1
a4128 1
#line 1255 "rl78-decode.opc"
d4138 1
a4138 1
#line 1255 "rl78-decode.opc"
d4153 1
a4153 1
#line 892 "rl78-decode.opc"
d4173 1
a4173 1
#line 853 "rl78-decode.opc"
d4188 1
a4188 1
#line 844 "rl78-decode.opc"
d4203 1
a4203 1
#line 1247 "rl78-decode.opc"
d4220 1
a4220 1
#line 1244 "rl78-decode.opc"
d4235 1
a4235 1
#line 1235 "rl78-decode.opc"
d4250 1
a4250 1
#line 1223 "rl78-decode.opc"
d4265 1
a4265 1
#line 1229 "rl78-decode.opc"
d4280 1
a4280 1
#line 1220 "rl78-decode.opc"
d4295 1
a4295 1
#line 566 "rl78-decode.opc"
d4305 1
a4305 1
#line 566 "rl78-decode.opc"
d4320 1
a4320 1
#line 645 "rl78-decode.opc"
d4335 1
a4335 1
#line 627 "rl78-decode.opc"
d4350 1
a4350 1
#line 630 "rl78-decode.opc"
d4365 1
a4365 1
#line 633 "rl78-decode.opc"
d4380 1
a4380 1
#line 636 "rl78-decode.opc"
d4395 1
a4395 1
#line 669 "rl78-decode.opc"
d4410 1
a4410 1
#line 666 "rl78-decode.opc"
d4425 1
a4425 1
#line 624 "rl78-decode.opc"
d4440 1
a4440 1
#line 533 "rl78-decode.opc"
d4450 1
a4450 1
#line 533 "rl78-decode.opc"
d4465 1
a4465 1
#line 621 "rl78-decode.opc"
d4480 1
a4480 1
#line 594 "rl78-decode.opc"
d4495 1
a4495 1
#line 600 "rl78-decode.opc"
d4510 1
a4510 1
#line 603 "rl78-decode.opc"
d4525 1
a4525 1
#line 612 "rl78-decode.opc"
d4540 1
a4540 1
#line 726 "rl78-decode.opc"
d4555 1
a4555 1
#line 756 "rl78-decode.opc"
d4572 1
a4572 1
#line 591 "rl78-decode.opc"
d4587 1
a4587 1
#line 560 "rl78-decode.opc"
d4598 1
a4598 1
#line 580 "rl78-decode.opc"
d4608 1
a4608 1
#line 580 "rl78-decode.opc"
d4623 1
a4623 1
#line 574 "rl78-decode.opc"
d4638 1
a4638 1
#line 569 "rl78-decode.opc"
d4655 1
a4655 1
#line 583 "rl78-decode.opc"
d4672 1
a4672 1
#line 826 "rl78-decode.opc"
d4687 1
a4687 1
#line 814 "rl78-decode.opc"
d4702 1
a4702 1
#line 817 "rl78-decode.opc"
d4717 1
a4717 1
#line 820 "rl78-decode.opc"
d4732 1
a4732 1
#line 823 "rl78-decode.opc"
d4747 1
a4747 1
#line 856 "rl78-decode.opc"
d4762 1
a4762 1
#line 859 "rl78-decode.opc"
d4777 1
a4777 1
#line 810 "rl78-decode.opc"
d4793 1
a4793 1
#line 527 "rl78-decode.opc"
d4804 1
a4804 1
#line 547 "rl78-decode.opc"
d4814 1
a4814 1
#line 547 "rl78-decode.opc"
d4829 1
a4829 1
#line 541 "rl78-decode.opc"
d4844 1
a4844 1
#line 536 "rl78-decode.opc"
d4861 1
a4861 1
#line 550 "rl78-decode.opc"
d4878 1
a4878 1
#line 807 "rl78-decode.opc"
d4893 1
a4893 1
#line 795 "rl78-decode.opc"
d4908 1
a4908 1
#line 798 "rl78-decode.opc"
d4923 1
a4923 1
#line 801 "rl78-decode.opc"
d4938 1
a4938 1
#line 804 "rl78-decode.opc"
d4953 1
a4953 1
#line 871 "rl78-decode.opc"
d4968 1
a4968 1
#line 877 "rl78-decode.opc"
d4985 1
a4985 1
#line 792 "rl78-decode.opc"
d4996 1
a4996 1
#line 962 "rl78-decode.opc"
d5006 1
a5006 1
#line 962 "rl78-decode.opc"
d5017 1
a5017 1
#line 970 "rl78-decode.opc"
d5027 1
a5027 1
#line 970 "rl78-decode.opc"
d5042 1
a5042 1
#line 618 "rl78-decode.opc"
d5057 1
a5057 1
#line 868 "rl78-decode.opc"
d5072 1
a5072 1
#line 597 "rl78-decode.opc"
d5087 1
a5087 1
#line 874 "rl78-decode.opc"
d5102 1
a5102 1
#line 609 "rl78-decode.opc"
d5117 1
a5117 1
#line 723 "rl78-decode.opc"
d5132 1
a5132 1
#line 729 "rl78-decode.opc"
d5171 1
a5171 1
#line 588 "rl78-decode.opc"
d5182 1
a5182 1
#line 497 "rl78-decode.opc"
d5192 1
a5192 1
#line 497 "rl78-decode.opc"
d5207 1
a5207 1
#line 500 "rl78-decode.opc"
d5224 1
a5224 1
#line 494 "rl78-decode.opc"
d5239 1
a5239 1
#line 882 "rl78-decode.opc"
d5256 1
a5256 1
#line 978 "rl78-decode.opc"
d5271 1
a5271 1
#line 690 "rl78-decode.opc"
d5286 1
a5286 1
#line 687 "rl78-decode.opc"
d5296 1
a5296 1
#line 865 "rl78-decode.opc"
d5306 1
a5306 1
#line 865 "rl78-decode.opc"
d5316 1
a5316 1
#line 862 "rl78-decode.opc"
d5326 1
a5326 1
#line 862 "rl78-decode.opc"
d5341 1
a5341 1
#line 313 "rl78-decode.opc"
d5356 1
a5356 1
#line 325 "rl78-decode.opc"
d5371 1
a5371 1
#line 316 "rl78-decode.opc"
d5386 1
a5386 1
#line 328 "rl78-decode.opc"
d5399 1
a5399 1
#line 900 "rl78-decode.opc"
d5409 1
a5409 1
#line 900 "rl78-decode.opc"
d5424 1
a5424 1
#line 903 "rl78-decode.opc"
d5441 1
a5441 1
#line 897 "rl78-decode.opc"
d5456 1
a5456 1
#line 908 "rl78-decode.opc"
d5471 1
a5471 1
#line 911 "rl78-decode.opc"
d5488 1
a5488 1
#line 678 "rl78-decode.opc"
d5503 1
a5503 1
#line 672 "rl78-decode.opc"
d5518 1
a5518 1
#line 347 "rl78-decode.opc"
d5533 1
a5533 1
#line 350 "rl78-decode.opc"
d5548 1
a5548 1
#line 353 "rl78-decode.opc"
d5563 1
a5563 1
#line 356 "rl78-decode.opc"
d5574 1
a5574 1
#line 443 "rl78-decode.opc"
d5584 1
a5584 1
#line 443 "rl78-decode.opc"
d5599 1
a5599 1
#line 446 "rl78-decode.opc"
d5616 1
a5616 1
#line 440 "rl78-decode.opc"
d5631 1
a5631 1
#line 451 "rl78-decode.opc"
d5646 1
a5646 1
#line 454 "rl78-decode.opc"
d5663 1
a5663 1
#line 684 "rl78-decode.opc"
d5678 1
a5678 1
#line 681 "rl78-decode.opc"
d5693 1
a5693 1
#line 400 "rl78-decode.opc"
d5708 1
a5708 1
#line 403 "rl78-decode.opc"
d5723 1
a5723 1
#line 406 "rl78-decode.opc"
d5738 1
a5738 1
#line 364 "rl78-decode.opc"
d5744 1
a5744 1
#line 1266 "rl78-decode.opc"
@


1.3.4.1
log
@gas/
	* config/tc-mips.c (ISA_SUPPORTS_DSP_ASE): Also set if microMIPS
	mode.
	(ISA_SUPPORTS_DSPR2_ASE): Likewise.
	(macro_build) <'2'>: Handle microMIPS.
2012-07-31  Maciej W. Rozycki  <macro@@codesourcery.com>
            Chao-Ying Fu  <fu@@mips.com>
            Catherine Moore  <clm@@codesourcery.com>

gas/
	* gas/mips/micromips@@mips32-dsp.d: New test.
	* gas/mips/micromips@@mips32-dspr2.d: New test.
	* gas/mips/mips32-dsp.s: Update padding.
	* gas/mips/mips32-dspr2.s: Likewise.
	* gas/mips/mips.exp: Use run_dump_test_arches to run MIPS32 DSP
	tests.
2012-07-31  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

include/
2012-07-31  Chao-Ying Fu  <fu@@mips.com>
            Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

opcodes/
2012-08-01  Alan Modra  <amodra@@gmail.com>

	* h8300-dis.c: Fix printf arg warnings.
	* i960-dis.c: Likewise.
	* mips-dis.c: Likewise.
	* pdp11-dis.c: Likewise.
	* sh-dis.c: Likewise.
	* v850-dis.c: Likewise.
	* configure.in: Formatting.
	* configure: Regenerate.
	* rl78-decode.c: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d182 1
a182 1
#line 886 "rl78-decode.opc"
d195 1
a195 1
#line 252 "rl78-decode.opc"
d205 1
a205 1
#line 252 "rl78-decode.opc"
d220 1
a220 1
#line 243 "rl78-decode.opc"
d235 1
a235 1
#line 249 "rl78-decode.opc"
d250 1
a250 1
#line 255 "rl78-decode.opc"
d265 1
a265 1
#line 1209 "rl78-decode.opc"
d282 1
a282 1
#line 656 "rl78-decode.opc"
d297 1
a297 1
#line 206 "rl78-decode.opc"
d314 1
a314 1
#line 200 "rl78-decode.opc"
d329 1
a329 1
#line 194 "rl78-decode.opc"
d344 1
a344 1
#line 182 "rl78-decode.opc"
d359 1
a359 1
#line 188 "rl78-decode.opc"
d374 1
a374 1
#line 179 "rl78-decode.opc"
d389 1
a389 1
#line 258 "rl78-decode.opc"
d406 1
a406 1
#line 171 "rl78-decode.opc"
d421 1
a421 1
#line 834 "rl78-decode.opc"
d431 1
a431 1
#line 834 "rl78-decode.opc"
d441 1
a441 1
#line 831 "rl78-decode.opc"
d451 1
a451 1
#line 831 "rl78-decode.opc"
d466 1
a466 1
#line 707 "rl78-decode.opc"
d481 1
a481 1
#line 704 "rl78-decode.opc"
d496 1
a496 1
#line 238 "rl78-decode.opc"
d513 1
a513 1
#line 235 "rl78-decode.opc"
d528 1
a528 1
#line 226 "rl78-decode.opc"
d543 1
a543 1
#line 214 "rl78-decode.opc"
d558 1
a558 1
#line 223 "rl78-decode.opc"
d573 1
a573 1
#line 211 "rl78-decode.opc"
d588 1
a588 1
#line 1173 "rl78-decode.opc"
d601 1
a601 1
#line 1167 "rl78-decode.opc"
d611 1
a611 1
#line 1167 "rl78-decode.opc"
d626 1
a626 1
#line 1158 "rl78-decode.opc"
d641 1
a641 1
#line 1164 "rl78-decode.opc"
d656 1
a656 1
#line 1170 "rl78-decode.opc"
d671 1
a671 1
#line 719 "rl78-decode.opc"
d686 1
a686 1
#line 662 "rl78-decode.opc"
d701 1
a701 1
#line 1121 "rl78-decode.opc"
d718 1
a718 1
#line 1115 "rl78-decode.opc"
d733 1
a733 1
#line 1109 "rl78-decode.opc"
d748 1
a748 1
#line 1097 "rl78-decode.opc"
d763 1
a763 1
#line 1103 "rl78-decode.opc"
d778 1
a778 1
#line 1094 "rl78-decode.opc"
d789 1
a789 1
#line 828 "rl78-decode.opc"
d799 1
a799 1
#line 828 "rl78-decode.opc"
d811 1
a811 1
#line 394 "rl78-decode.opc"
d821 1
a821 1
#line 394 "rl78-decode.opc"
d831 1
a831 1
#line 388 "rl78-decode.opc"
d841 1
a841 1
#line 388 "rl78-decode.opc"
d849 1
a849 1
#line 380 "rl78-decode.opc"
d859 1
a859 1
#line 380 "rl78-decode.opc"
d869 1
a869 1
#line 374 "rl78-decode.opc"
d879 1
a879 1
#line 374 "rl78-decode.opc"
d887 1
a887 1
#line 341 "rl78-decode.opc"
d897 1
a897 1
#line 341 "rl78-decode.opc"
d907 1
a907 1
#line 335 "rl78-decode.opc"
d917 1
a917 1
#line 335 "rl78-decode.opc"
d925 1
a925 1
#line 1050 "rl78-decode.opc"
d935 1
a935 1
#line 1050 "rl78-decode.opc"
d943 1
a943 1
#line 1047 "rl78-decode.opc"
d953 1
a953 1
#line 1047 "rl78-decode.opc"
d961 1
a961 1
#line 1044 "rl78-decode.opc"
d971 1
a971 1
#line 1044 "rl78-decode.opc"
d979 1
a979 1
#line 1061 "rl78-decode.opc"
d989 1
a989 1
#line 1061 "rl78-decode.opc"
d997 1
a997 1
#line 1008 "rl78-decode.opc"
d1007 1
a1007 1
#line 1008 "rl78-decode.opc"
d1016 1
a1016 1
#line 1056 "rl78-decode.opc"
d1026 1
a1026 1
#line 1056 "rl78-decode.opc"
d1037 1
a1037 1
#line 1053 "rl78-decode.opc"
d1047 1
a1047 1
#line 1053 "rl78-decode.opc"
d1056 1
a1056 1
#line 1064 "rl78-decode.opc"
d1066 1
a1066 1
#line 1064 "rl78-decode.opc"
d1077 1
a1077 1
#line 1011 "rl78-decode.opc"
d1087 1
a1087 1
#line 1011 "rl78-decode.opc"
d1097 1
a1097 1
#line 391 "rl78-decode.opc"
d1107 1
a1107 1
#line 391 "rl78-decode.opc"
d1115 1
a1115 1
#line 385 "rl78-decode.opc"
d1125 1
a1125 1
#line 385 "rl78-decode.opc"
d1133 1
a1133 1
#line 377 "rl78-decode.opc"
d1143 1
a1143 1
#line 377 "rl78-decode.opc"
d1151 1
a1151 1
#line 371 "rl78-decode.opc"
d1161 1
a1161 1
#line 371 "rl78-decode.opc"
d1169 1
a1169 1
#line 338 "rl78-decode.opc"
d1179 1
a1179 1
#line 338 "rl78-decode.opc"
d1187 1
a1187 1
#line 332 "rl78-decode.opc"
d1197 1
a1197 1
#line 332 "rl78-decode.opc"
d1210 1
a1210 1
#line 1214 "rl78-decode.opc"
d1220 1
a1220 1
#line 1214 "rl78-decode.opc"
d1237 1
a1237 1
#line 716 "rl78-decode.opc"
d1252 1
a1252 1
#line 710 "rl78-decode.opc"
d1267 1
a1267 1
#line 1153 "rl78-decode.opc"
d1284 1
a1284 1
#line 1150 "rl78-decode.opc"
d1299 1
a1299 1
#line 1141 "rl78-decode.opc"
d1314 1
a1314 1
#line 1129 "rl78-decode.opc"
d1329 1
a1329 1
#line 1138 "rl78-decode.opc"
d1344 1
a1344 1
#line 1126 "rl78-decode.opc"
d1359 1
a1359 1
#line 458 "rl78-decode.opc"
d1374 1
a1374 1
#line 695 "rl78-decode.opc"
d1389 1
a1389 1
#line 509 "rl78-decode.opc"
d1399 1
a1399 1
#line 518 "rl78-decode.opc"
d1409 1
a1409 1
#line 518 "rl78-decode.opc"
d1424 1
a1424 1
#line 515 "rl78-decode.opc"
d1439 1
a1439 1
#line 521 "rl78-decode.opc"
d1456 1
a1456 1
#line 713 "rl78-decode.opc"
d1471 1
a1471 1
#line 659 "rl78-decode.opc"
d1486 1
a1486 1
#line 461 "rl78-decode.opc"
d1501 1
a1501 1
#line 488 "rl78-decode.opc"
d1518 1
a1518 1
#line 479 "rl78-decode.opc"
d1533 1
a1533 1
#line 467 "rl78-decode.opc"
d1548 1
a1548 1
#line 476 "rl78-decode.opc"
d1563 1
a1563 1
#line 464 "rl78-decode.opc"
d1578 1
a1578 1
#line 647 "rl78-decode.opc"
d1588 1
a1588 1
#line 647 "rl78-decode.opc"
d1603 1
a1603 1
#line 846 "rl78-decode.opc"
d1618 1
a1618 1
#line 837 "rl78-decode.opc"
d1633 1
a1633 1
#line 290 "rl78-decode.opc"
d1650 1
a1650 1
#line 287 "rl78-decode.opc"
d1665 1
a1665 1
#line 278 "rl78-decode.opc"
d1680 1
a1680 1
#line 266 "rl78-decode.opc"
d1695 1
a1695 1
#line 272 "rl78-decode.opc"
d1710 1
a1710 1
#line 263 "rl78-decode.opc"
d1724 1
a1724 1
#line 650 "rl78-decode.opc"
d1734 1
a1734 1
#line 650 "rl78-decode.opc"
d1753 1
a1753 1
#line 203 "rl78-decode.opc"
d1763 1
a1763 1
#line 203 "rl78-decode.opc"
d1777 1
a1777 1
#line 197 "rl78-decode.opc"
d1787 1
a1787 1
#line 197 "rl78-decode.opc"
d1802 1
a1802 1
#line 246 "rl78-decode.opc"
d1817 1
a1817 1
#line 232 "rl78-decode.opc"
d1827 1
a1827 1
#line 232 "rl78-decode.opc"
d1841 1
a1841 1
#line 229 "rl78-decode.opc"
d1851 1
a1851 1
#line 229 "rl78-decode.opc"
d1866 1
a1866 1
#line 1118 "rl78-decode.opc"
d1876 1
a1876 1
#line 1118 "rl78-decode.opc"
d1890 1
a1890 1
#line 1112 "rl78-decode.opc"
d1900 1
a1900 1
#line 1112 "rl78-decode.opc"
d1915 1
a1915 1
#line 1161 "rl78-decode.opc"
d1930 1
a1930 1
#line 1147 "rl78-decode.opc"
d1940 1
a1940 1
#line 1147 "rl78-decode.opc"
d1954 1
a1954 1
#line 1144 "rl78-decode.opc"
d1964 1
a1964 1
#line 1144 "rl78-decode.opc"
d1979 1
a1979 1
#line 485 "rl78-decode.opc"
d1989 1
a1989 1
#line 485 "rl78-decode.opc"
d2003 1
a2003 1
#line 482 "rl78-decode.opc"
d2013 1
a2013 1
#line 482 "rl78-decode.opc"
d2028 1
a2028 1
#line 512 "rl78-decode.opc"
d2043 1
a2043 1
#line 284 "rl78-decode.opc"
d2053 1
a2053 1
#line 284 "rl78-decode.opc"
d2067 1
a2067 1
#line 281 "rl78-decode.opc"
d2077 1
a2077 1
#line 281 "rl78-decode.opc"
d2092 1
a2092 1
#line 562 "rl78-decode.opc"
d2107 1
a2107 1
#line 936 "rl78-decode.opc"
d2117 1
a2117 1
#line 936 "rl78-decode.opc"
d2131 1
a2131 1
#line 933 "rl78-decode.opc"
d2141 1
a2141 1
#line 933 "rl78-decode.opc"
d2156 1
a2156 1
#line 529 "rl78-decode.opc"
d2171 1
a2171 1
#line 1240 "rl78-decode.opc"
d2181 1
a2181 1
#line 1240 "rl78-decode.opc"
d2195 1
a2195 1
#line 1237 "rl78-decode.opc"
d2205 1
a2205 1
#line 1237 "rl78-decode.opc"
d2220 1
a2220 1
#line 576 "rl78-decode.opc"
d2236 1
a2236 1
#line 185 "rl78-decode.opc"
d2251 1
a2251 1
#line 191 "rl78-decode.opc"
d2290 1
a2290 1
#line 411 "rl78-decode.opc"
d2292 1
a2292 1
#line 411 "rl78-decode.opc"
d2303 1
a2303 1
#line 411 "rl78-decode.opc"
d2319 1
a2319 1
#line 1199 "rl78-decode.opc"
d2329 1
a2329 1
#line 1199 "rl78-decode.opc"
d2345 1
a2345 1
#line 543 "rl78-decode.opc"
d2360 1
a2360 1
#line 217 "rl78-decode.opc"
d2375 1
a2375 1
#line 220 "rl78-decode.opc"
d2391 1
a2391 1
#line 1100 "rl78-decode.opc"
d2406 1
a2406 1
#line 1106 "rl78-decode.opc"
d2421 1
a2421 1
#line 1203 "rl78-decode.opc"
d2436 1
a2436 1
#line 1196 "rl78-decode.opc"
d2451 1
a2451 1
#line 1178 "rl78-decode.opc"
d2466 1
a2466 1
#line 1206 "rl78-decode.opc"
d2481 1
a2481 1
#line 1187 "rl78-decode.opc"
d2496 1
a2496 1
#line 1193 "rl78-decode.opc"
d2511 1
a2511 1
#line 1181 "rl78-decode.opc"
d2526 1
a2526 1
#line 1184 "rl78-decode.opc"
d2541 1
a2541 1
#line 1132 "rl78-decode.opc"
d2556 1
a2556 1
#line 1135 "rl78-decode.opc"
d2571 1
a2571 1
#line 701 "rl78-decode.opc"
d2586 1
a2586 1
#line 1190 "rl78-decode.opc"
d2601 1
a2601 1
#line 470 "rl78-decode.opc"
d2616 1
a2616 1
#line 473 "rl78-decode.opc"
d2631 1
a2631 1
#line 318 "rl78-decode.opc"
d2646 1
a2646 1
#line 1069 "rl78-decode.opc"
d2661 1
a2661 1
#line 638 "rl78-decode.opc"
d2672 1
a2672 1
#line 408 "rl78-decode.opc"
d2682 1
a2682 1
#line 408 "rl78-decode.opc"
d2697 1
a2697 1
#line 358 "rl78-decode.opc"
d2714 1
a2714 1
#line 366 "rl78-decode.opc"
d2731 1
a2731 1
#line 964 "rl78-decode.opc"
d2748 1
a2748 1
#line 786 "rl78-decode.opc"
d2761 1
a2761 1
#line 1016 "rl78-decode.opc"
d2771 1
a2771 1
#line 1016 "rl78-decode.opc"
d2788 1
a2788 1
#line 269 "rl78-decode.opc"
d2803 1
a2803 1
#line 275 "rl78-decode.opc"
d2818 1
a2818 1
#line 321 "rl78-decode.opc"
d2833 1
a2833 1
#line 1075 "rl78-decode.opc"
d2848 1
a2848 1
#line 605 "rl78-decode.opc"
d2863 1
a2863 1
#line 997 "rl78-decode.opc"
d2878 1
a2878 1
#line 991 "rl78-decode.opc"
d2893 1
a2893 1
#line 972 "rl78-decode.opc"
d2910 1
a2910 1
#line 504 "rl78-decode.opc"
d2927 1
a2927 1
#line 921 "rl78-decode.opc"
d2942 1
a2942 1
#line 927 "rl78-decode.opc"
d2957 1
a2957 1
#line 1072 "rl78-decode.opc"
d2972 1
a2972 1
#line 1084 "rl78-decode.opc"
d2989 1
a2989 1
#line 641 "rl78-decode.opc"
d3004 1
a3004 1
#line 988 "rl78-decode.opc"
d3019 1
a3019 1
#line 983 "rl78-decode.opc"
d3036 1
a3036 1
#line 554 "rl78-decode.opc"
d3047 1
a3047 1
#line 994 "rl78-decode.opc"
d3057 1
a3057 1
#line 994 "rl78-decode.opc"
d3072 1
a3072 1
#line 1225 "rl78-decode.opc"
d3087 1
a3087 1
#line 1231 "rl78-decode.opc"
d3102 1
a3102 1
#line 1078 "rl78-decode.opc"
d3117 1
a3117 1
#line 1081 "rl78-decode.opc"
d3132 1
a3132 1
#line 614 "rl78-decode.opc"
d3147 1
a3147 1
#line 1000 "rl78-decode.opc"
d3167 1
a3167 1
#line 980 "rl78-decode.opc"
d3182 1
a3182 1
#line 1089 "rl78-decode.opc"
d3202 1
a3202 1
#line 849 "rl78-decode.opc"
d3217 1
a3217 1
#line 840 "rl78-decode.opc"
d3232 1
a3232 1
#line 942 "rl78-decode.opc"
d3249 1
a3249 1
#line 939 "rl78-decode.opc"
d3264 1
a3264 1
#line 930 "rl78-decode.opc"
d3279 1
a3279 1
#line 918 "rl78-decode.opc"
d3294 1
a3294 1
#line 924 "rl78-decode.opc"
d3309 1
a3309 1
#line 915 "rl78-decode.opc"
d3323 1
a3323 1
#line 674 "rl78-decode.opc"
d3333 1
a3333 1
#line 674 "rl78-decode.opc"
d3352 1
a3352 1
#line 1021 "rl78-decode.opc"
d3362 1
a3362 1
#line 1021 "rl78-decode.opc"
d3377 1
a3377 1
#line 778 "rl78-decode.opc"
d3387 1
a3387 1
#line 778 "rl78-decode.opc"
d3402 1
a3402 1
#line 1039 "rl78-decode.opc"
d3412 1
a3412 1
#line 1039 "rl78-decode.opc"
d3429 1
a3429 1
#line 434 "rl78-decode.opc"
d3439 1
a3439 1
#line 434 "rl78-decode.opc"
d3456 1
a3456 1
#line 772 "rl78-decode.opc"
d3466 1
a3466 1
#line 772 "rl78-decode.opc"
d3481 1
a3481 1
#line 304 "rl78-decode.opc"
d3491 1
a3491 1
#line 304 "rl78-decode.opc"
d3511 1
a3511 1
#line 956 "rl78-decode.opc"
d3521 1
a3521 1
#line 956 "rl78-decode.opc"
d3538 1
a3538 1
#line 1260 "rl78-decode.opc"
d3548 1
a3548 1
#line 1260 "rl78-decode.opc"
d3565 1
a3565 1
#line 416 "rl78-decode.opc"
d3575 1
a3575 1
#line 416 "rl78-decode.opc"
d3590 1
a3590 1
#line 781 "rl78-decode.opc"
d3600 1
a3600 1
#line 781 "rl78-decode.opc"
d3617 1
a3617 1
#line 1033 "rl78-decode.opc"
d3627 1
a3627 1
#line 1033 "rl78-decode.opc"
d3645 1
a3645 1
#line 428 "rl78-decode.opc"
d3655 1
a3655 1
#line 428 "rl78-decode.opc"
d3673 1
a3673 1
#line 775 "rl78-decode.opc"
d3683 1
a3683 1
#line 775 "rl78-decode.opc"
d3698 1
a3698 1
#line 301 "rl78-decode.opc"
d3708 1
a3708 1
#line 301 "rl78-decode.opc"
d3723 1
a3723 1
#line 953 "rl78-decode.opc"
d3733 1
a3733 1
#line 953 "rl78-decode.opc"
d3748 1
a3748 1
#line 1257 "rl78-decode.opc"
d3758 1
a3758 1
#line 1257 "rl78-decode.opc"
d3773 1
a3773 1
#line 1030 "rl78-decode.opc"
d3788 1
a3788 1
#line 760 "rl78-decode.opc"
d3798 1
a3798 1
#line 760 "rl78-decode.opc"
d3813 1
a3813 1
#line 1024 "rl78-decode.opc"
d3823 1
a3823 1
#line 1024 "rl78-decode.opc"
d3838 1
a3838 1
#line 419 "rl78-decode.opc"
d3848 1
a3848 1
#line 419 "rl78-decode.opc"
d3863 1
a3863 1
#line 766 "rl78-decode.opc"
d3873 1
a3873 1
#line 766 "rl78-decode.opc"
d3888 1
a3888 1
#line 295 "rl78-decode.opc"
d3898 1
a3898 1
#line 295 "rl78-decode.opc"
d3913 1
a3913 1
#line 947 "rl78-decode.opc"
d3923 1
a3923 1
#line 947 "rl78-decode.opc"
d3938 1
a3938 1
#line 1251 "rl78-decode.opc"
d3948 1
a3948 1
#line 1251 "rl78-decode.opc"
d3963 1
a3963 1
#line 425 "rl78-decode.opc"
d3978 1
a3978 1
#line 763 "rl78-decode.opc"
d3988 1
a3988 1
#line 763 "rl78-decode.opc"
d4003 1
a4003 1
#line 1027 "rl78-decode.opc"
d4013 1
a4013 1
#line 1027 "rl78-decode.opc"
d4028 1
a4028 1
#line 422 "rl78-decode.opc"
d4038 1
a4038 1
#line 422 "rl78-decode.opc"
d4053 1
a4053 1
#line 769 "rl78-decode.opc"
d4063 1
a4063 1
#line 769 "rl78-decode.opc"
d4078 1
a4078 1
#line 298 "rl78-decode.opc"
d4088 1
a4088 1
#line 298 "rl78-decode.opc"
d4103 1
a4103 1
#line 950 "rl78-decode.opc"
d4113 1
a4113 1
#line 950 "rl78-decode.opc"
d4128 1
a4128 1
#line 1254 "rl78-decode.opc"
d4138 1
a4138 1
#line 1254 "rl78-decode.opc"
d4153 1
a4153 1
#line 891 "rl78-decode.opc"
d4173 1
a4173 1
#line 852 "rl78-decode.opc"
d4188 1
a4188 1
#line 843 "rl78-decode.opc"
d4203 1
a4203 1
#line 1246 "rl78-decode.opc"
d4220 1
a4220 1
#line 1243 "rl78-decode.opc"
d4235 1
a4235 1
#line 1234 "rl78-decode.opc"
d4250 1
a4250 1
#line 1222 "rl78-decode.opc"
d4265 1
a4265 1
#line 1228 "rl78-decode.opc"
d4280 1
a4280 1
#line 1219 "rl78-decode.opc"
d4295 1
a4295 1
#line 565 "rl78-decode.opc"
d4305 1
a4305 1
#line 565 "rl78-decode.opc"
d4320 1
a4320 1
#line 644 "rl78-decode.opc"
d4335 1
a4335 1
#line 626 "rl78-decode.opc"
d4350 1
a4350 1
#line 629 "rl78-decode.opc"
d4365 1
a4365 1
#line 632 "rl78-decode.opc"
d4380 1
a4380 1
#line 635 "rl78-decode.opc"
d4395 1
a4395 1
#line 668 "rl78-decode.opc"
d4410 1
a4410 1
#line 665 "rl78-decode.opc"
d4425 1
a4425 1
#line 623 "rl78-decode.opc"
d4440 1
a4440 1
#line 532 "rl78-decode.opc"
d4450 1
a4450 1
#line 532 "rl78-decode.opc"
d4465 1
a4465 1
#line 620 "rl78-decode.opc"
d4480 1
a4480 1
#line 593 "rl78-decode.opc"
d4495 1
a4495 1
#line 599 "rl78-decode.opc"
d4510 1
a4510 1
#line 602 "rl78-decode.opc"
d4525 1
a4525 1
#line 611 "rl78-decode.opc"
d4540 1
a4540 1
#line 725 "rl78-decode.opc"
d4555 1
a4555 1
#line 755 "rl78-decode.opc"
d4572 1
a4572 1
#line 590 "rl78-decode.opc"
d4587 1
a4587 1
#line 559 "rl78-decode.opc"
d4598 1
a4598 1
#line 579 "rl78-decode.opc"
d4608 1
a4608 1
#line 579 "rl78-decode.opc"
d4623 1
a4623 1
#line 573 "rl78-decode.opc"
d4638 1
a4638 1
#line 568 "rl78-decode.opc"
d4655 1
a4655 1
#line 582 "rl78-decode.opc"
d4672 1
a4672 1
#line 825 "rl78-decode.opc"
d4687 1
a4687 1
#line 813 "rl78-decode.opc"
d4702 1
a4702 1
#line 816 "rl78-decode.opc"
d4717 1
a4717 1
#line 819 "rl78-decode.opc"
d4732 1
a4732 1
#line 822 "rl78-decode.opc"
d4747 1
a4747 1
#line 855 "rl78-decode.opc"
d4762 1
a4762 1
#line 858 "rl78-decode.opc"
d4777 1
a4777 1
#line 809 "rl78-decode.opc"
d4793 1
a4793 1
#line 526 "rl78-decode.opc"
d4804 1
a4804 1
#line 546 "rl78-decode.opc"
d4814 1
a4814 1
#line 546 "rl78-decode.opc"
d4829 1
a4829 1
#line 540 "rl78-decode.opc"
d4844 1
a4844 1
#line 535 "rl78-decode.opc"
d4861 1
a4861 1
#line 549 "rl78-decode.opc"
d4878 1
a4878 1
#line 806 "rl78-decode.opc"
d4893 1
a4893 1
#line 794 "rl78-decode.opc"
d4908 1
a4908 1
#line 797 "rl78-decode.opc"
d4923 1
a4923 1
#line 800 "rl78-decode.opc"
d4938 1
a4938 1
#line 803 "rl78-decode.opc"
d4953 1
a4953 1
#line 870 "rl78-decode.opc"
d4968 1
a4968 1
#line 876 "rl78-decode.opc"
d4985 1
a4985 1
#line 791 "rl78-decode.opc"
d4996 1
a4996 1
#line 961 "rl78-decode.opc"
d5006 1
a5006 1
#line 961 "rl78-decode.opc"
d5017 1
a5017 1
#line 969 "rl78-decode.opc"
d5027 1
a5027 1
#line 969 "rl78-decode.opc"
d5042 1
a5042 1
#line 617 "rl78-decode.opc"
d5057 1
a5057 1
#line 867 "rl78-decode.opc"
d5072 1
a5072 1
#line 596 "rl78-decode.opc"
d5087 1
a5087 1
#line 873 "rl78-decode.opc"
d5102 1
a5102 1
#line 608 "rl78-decode.opc"
d5117 1
a5117 1
#line 722 "rl78-decode.opc"
d5132 1
a5132 1
#line 728 "rl78-decode.opc"
d5171 1
a5171 1
#line 587 "rl78-decode.opc"
d5182 1
a5182 1
#line 496 "rl78-decode.opc"
d5192 1
a5192 1
#line 496 "rl78-decode.opc"
d5207 1
a5207 1
#line 499 "rl78-decode.opc"
d5224 1
a5224 1
#line 493 "rl78-decode.opc"
d5239 1
a5239 1
#line 881 "rl78-decode.opc"
d5256 1
a5256 1
#line 977 "rl78-decode.opc"
d5271 1
a5271 1
#line 689 "rl78-decode.opc"
d5286 1
a5286 1
#line 686 "rl78-decode.opc"
d5296 1
a5296 1
#line 864 "rl78-decode.opc"
d5306 1
a5306 1
#line 864 "rl78-decode.opc"
d5316 1
a5316 1
#line 861 "rl78-decode.opc"
d5326 1
a5326 1
#line 861 "rl78-decode.opc"
d5341 1
a5341 1
#line 312 "rl78-decode.opc"
d5356 1
a5356 1
#line 324 "rl78-decode.opc"
d5371 1
a5371 1
#line 315 "rl78-decode.opc"
d5386 1
a5386 1
#line 327 "rl78-decode.opc"
d5399 1
a5399 1
#line 899 "rl78-decode.opc"
d5409 1
a5409 1
#line 899 "rl78-decode.opc"
d5424 1
a5424 1
#line 902 "rl78-decode.opc"
d5441 1
a5441 1
#line 896 "rl78-decode.opc"
d5456 1
a5456 1
#line 907 "rl78-decode.opc"
d5471 1
a5471 1
#line 910 "rl78-decode.opc"
d5488 1
a5488 1
#line 677 "rl78-decode.opc"
d5503 1
a5503 1
#line 671 "rl78-decode.opc"
d5518 1
a5518 1
#line 346 "rl78-decode.opc"
d5533 1
a5533 1
#line 349 "rl78-decode.opc"
d5548 1
a5548 1
#line 352 "rl78-decode.opc"
d5563 1
a5563 1
#line 355 "rl78-decode.opc"
d5574 1
a5574 1
#line 442 "rl78-decode.opc"
d5584 1
a5584 1
#line 442 "rl78-decode.opc"
d5599 1
a5599 1
#line 445 "rl78-decode.opc"
d5616 1
a5616 1
#line 439 "rl78-decode.opc"
d5631 1
a5631 1
#line 450 "rl78-decode.opc"
d5646 1
a5646 1
#line 453 "rl78-decode.opc"
d5663 1
a5663 1
#line 683 "rl78-decode.opc"
d5678 1
a5678 1
#line 680 "rl78-decode.opc"
d5693 1
a5693 1
#line 399 "rl78-decode.opc"
d5708 1
a5708 1
#line 402 "rl78-decode.opc"
d5723 1
a5723 1
#line 405 "rl78-decode.opc"
d5738 1
a5738 1
#line 363 "rl78-decode.opc"
d5744 1
a5744 1
#line 1265 "rl78-decode.opc"
@


1.2
log
@* rl78-decode.opc (rl78_decode_opcode): Add NOT1.
* rl78-decode.c: Regenerate.

* config/rl78-parse.y (NOT1): Add.
@
text
@d3 1
a6 2

#include "config.h"
@


1.1
log
@[.]
	* configure.ac (rl78-*-*) New case.
	* configure: Regenerate.

[bfd]
	* Makefile.am (ALL_MACHINES): Add cpu-rl78.lo.
	(ALL_MACHINES_CFILES): Add cpu-rl78.c.
	(BFD32_BACKENDS): Add elf32-rl78.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-rl78.c.
	(Makefile.in): Regenerate.
	* archures.c (bfd_architecture): Define bfd_arch_rl78.
	(bfd_archures_list): Add bfd_rl78_arch.
	* config.bfd: Add rl78-*-elf.
	* configure.in: Add bfd_elf32_rl78_vec.
	* reloc.c (bfd_reloc_code_type): Add BFD_RELOC_RL78_* relocations.
	* targets.c (bfd_target_vector): Add bfd_elf32_rl78_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* cpu-rl78.c: New file.
	* elf32-rl78.c: New file.

[binutils]
	* readelf.c: Include elf/rl78.h
	(guess_is_rela): Handle EM_RL78.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(is_32bit_abs_reloc): Likewise.
	* NEWS: Mention addition of RL78 support.
	* MAINTAINERS: Add myself as RL78 port maintainer.

[gas]
	* Makefile.am (TARGET_CPU_CFILES): Add tc-rl78.c.
	(TARGET_CPU_HFILES): Add rc-rl78.h.
	(EXTRA_DIST): Add rl78-parse.c and rl78-parse.y.
	(rl78-parse.c, rl78-parse.h, rl78-parse.o, rl78-defs.h): New rules.
	* Makefile.in: Regenerate.
	* configure.in: Add rl78 case.
	* configure: Regenerate.
	* configure.tgt: Add rl78 case.
	* config/rl78-defs.h: New file.
	* config/rl78-parse.y: New file.
	* config/tc-rl78.c: New file.
	* config/tc-rl78.h: New file.
	* NEWS: Add Renesas RL78.

	* doc/Makefile.am (c-rl78.texi): New.
	* doc/Makefile.in: Likewise.
	* doc/all.texi: Enable it.
	* doc/as.texi: Add it.

[include]
	* dis-asm.h (print_insn_rl78): Declare.

[include/elf]
	* common.h (EM_RL78, EM_78K0R): New.
	* rl78.h: New.

[include/opcode]
	* rl78.h: New file.

[ld]
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32rl78.c.
	(+eelf32rl78.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add rl78-*-* case.
	* emulparams/elf32rl78.sh: New file.
	* NEWS: Mention addition of Renesas RL78 support.

[opcodes]
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add rl78-decode.c and
	rl78-dis.c.
	(MAINTAINERCLEANFILES): Add rl78-decode.c.
	(rl78-decode.c): New rule, built from rl78-decode.opc and opc2c.
	* Makefile.in: Regenerate.
	* configure.in: Add bfd_rl78_arch case.
	* configure: Regenerate.
	* disassemble.c: Define ARCH_rl78.
	(disassembler): Add ARCH_rl78 case.
	* rl78-decode.c: New file.
	* rl78-decode.opc: New file.
	* rl78-dis.c: New file.
@
text
@d266 1
a266 1
#line 1205 "rl78-decode.opc"
d589 1
a589 1
#line 1169 "rl78-decode.opc"
d602 1
a602 1
#line 1163 "rl78-decode.opc"
d612 1
a612 1
#line 1163 "rl78-decode.opc"
d627 1
a627 1
#line 1154 "rl78-decode.opc"
d642 1
a642 1
#line 1160 "rl78-decode.opc"
d657 1
a657 1
#line 1166 "rl78-decode.opc"
d702 1
a702 1
#line 1117 "rl78-decode.opc"
d719 1
a719 1
#line 1111 "rl78-decode.opc"
d734 1
a734 1
#line 1105 "rl78-decode.opc"
d749 1
a749 1
#line 1093 "rl78-decode.opc"
d764 1
a764 1
#line 1099 "rl78-decode.opc"
d779 1
a779 1
#line 1090 "rl78-decode.opc"
d926 1
a926 1
#line 1046 "rl78-decode.opc"
d936 1
a936 1
#line 1046 "rl78-decode.opc"
d944 1
a944 1
#line 1043 "rl78-decode.opc"
d954 1
a954 1
#line 1043 "rl78-decode.opc"
d962 1
a962 1
#line 1040 "rl78-decode.opc"
d972 1
a972 1
#line 1040 "rl78-decode.opc"
d980 1
a980 1
#line 1057 "rl78-decode.opc"
d990 1
a990 1
#line 1057 "rl78-decode.opc"
d998 1
a998 1
#line 1004 "rl78-decode.opc"
d1008 1
a1008 1
#line 1004 "rl78-decode.opc"
d1017 1
a1017 1
#line 1052 "rl78-decode.opc"
d1027 1
a1027 1
#line 1052 "rl78-decode.opc"
d1038 1
a1038 1
#line 1049 "rl78-decode.opc"
d1048 1
a1048 1
#line 1049 "rl78-decode.opc"
d1057 1
a1057 1
#line 1060 "rl78-decode.opc"
d1067 1
a1067 1
#line 1060 "rl78-decode.opc"
d1078 1
a1078 1
#line 1007 "rl78-decode.opc"
d1088 1
a1088 1
#line 1007 "rl78-decode.opc"
d1211 1
a1211 1
#line 1210 "rl78-decode.opc"
d1221 1
a1221 1
#line 1210 "rl78-decode.opc"
d1268 1
a1268 1
#line 1149 "rl78-decode.opc"
d1285 1
a1285 1
#line 1146 "rl78-decode.opc"
d1300 1
a1300 1
#line 1137 "rl78-decode.opc"
d1315 1
a1315 1
#line 1125 "rl78-decode.opc"
d1330 1
a1330 1
#line 1134 "rl78-decode.opc"
d1345 1
a1345 1
#line 1122 "rl78-decode.opc"
d1867 1
a1867 1
#line 1114 "rl78-decode.opc"
d1877 1
a1877 1
#line 1114 "rl78-decode.opc"
d1891 1
a1891 1
#line 1108 "rl78-decode.opc"
d1901 1
a1901 1
#line 1108 "rl78-decode.opc"
d1916 1
a1916 1
#line 1157 "rl78-decode.opc"
d1931 1
a1931 1
#line 1143 "rl78-decode.opc"
d1941 1
a1941 1
#line 1143 "rl78-decode.opc"
d1955 1
a1955 1
#line 1140 "rl78-decode.opc"
d1965 1
a1965 1
#line 1140 "rl78-decode.opc"
d2108 1
a2108 1
#line 932 "rl78-decode.opc"
d2118 1
a2118 1
#line 932 "rl78-decode.opc"
d2132 1
a2132 1
#line 929 "rl78-decode.opc"
d2142 1
a2142 1
#line 929 "rl78-decode.opc"
d2172 1
a2172 1
#line 1236 "rl78-decode.opc"
d2182 1
a2182 1
#line 1236 "rl78-decode.opc"
d2196 1
a2196 1
#line 1233 "rl78-decode.opc"
d2206 1
a2206 1
#line 1233 "rl78-decode.opc"
d2320 1
a2320 1
#line 1195 "rl78-decode.opc"
d2330 1
a2330 1
#line 1195 "rl78-decode.opc"
d2392 1
a2392 1
#line 1096 "rl78-decode.opc"
d2407 1
a2407 1
#line 1102 "rl78-decode.opc"
d2422 1
a2422 1
#line 1199 "rl78-decode.opc"
d2437 1
a2437 1
#line 1192 "rl78-decode.opc"
d2452 1
a2452 1
#line 1174 "rl78-decode.opc"
d2467 1
a2467 1
#line 1202 "rl78-decode.opc"
d2482 1
a2482 1
#line 1183 "rl78-decode.opc"
d2497 1
a2497 1
#line 1189 "rl78-decode.opc"
d2512 1
a2512 1
#line 1177 "rl78-decode.opc"
d2527 1
a2527 1
#line 1180 "rl78-decode.opc"
d2542 1
a2542 1
#line 1128 "rl78-decode.opc"
d2557 1
a2557 1
#line 1131 "rl78-decode.opc"
d2587 1
a2587 1
#line 1186 "rl78-decode.opc"
d2647 1
a2647 1
#line 1065 "rl78-decode.opc"
d2732 1
a2732 1
#line 960 "rl78-decode.opc"
d2762 1
a2762 1
#line 1012 "rl78-decode.opc"
d2772 1
a2772 1
#line 1012 "rl78-decode.opc"
d2834 1
a2834 1
#line 1071 "rl78-decode.opc"
d2864 1
a2864 1
#line 993 "rl78-decode.opc"
d2879 1
a2879 1
#line 987 "rl78-decode.opc"
d2894 1
a2894 1
#line 968 "rl78-decode.opc"
d2928 1
a2928 1
#line 917 "rl78-decode.opc"
d2943 1
a2943 1
#line 923 "rl78-decode.opc"
d2958 1
a2958 1
#line 1068 "rl78-decode.opc"
d2973 1
a2973 1
#line 1080 "rl78-decode.opc"
d3005 1
a3005 1
#line 984 "rl78-decode.opc"
d3020 1
a3020 1
#line 979 "rl78-decode.opc"
d3048 1
a3048 1
#line 990 "rl78-decode.opc"
d3058 1
a3058 1
#line 990 "rl78-decode.opc"
d3073 1
a3073 1
#line 1221 "rl78-decode.opc"
d3088 1
a3088 1
#line 1227 "rl78-decode.opc"
d3103 1
a3103 1
#line 1074 "rl78-decode.opc"
d3118 1
a3118 1
#line 1077 "rl78-decode.opc"
d3148 1
a3148 1
#line 996 "rl78-decode.opc"
d3168 1
a3168 1
#line 976 "rl78-decode.opc"
d3183 1
a3183 1
#line 1085 "rl78-decode.opc"
d3233 1
a3233 1
#line 938 "rl78-decode.opc"
d3250 1
a3250 1
#line 935 "rl78-decode.opc"
d3265 1
a3265 1
#line 926 "rl78-decode.opc"
d3280 1
a3280 1
#line 914 "rl78-decode.opc"
d3295 1
a3295 1
#line 920 "rl78-decode.opc"
d3310 1
a3310 1
#line 911 "rl78-decode.opc"
d3353 1
a3353 1
#line 1017 "rl78-decode.opc"
d3363 1
a3363 1
#line 1017 "rl78-decode.opc"
d3403 1
a3403 1
#line 1035 "rl78-decode.opc"
d3413 1
a3413 1
#line 1035 "rl78-decode.opc"
d3512 1
a3512 1
#line 952 "rl78-decode.opc"
d3522 1
a3522 1
#line 952 "rl78-decode.opc"
d3539 1
a3539 1
#line 1256 "rl78-decode.opc"
d3549 1
a3549 1
#line 1256 "rl78-decode.opc"
d3618 1
a3618 1
#line 1029 "rl78-decode.opc"
d3628 1
a3628 1
#line 1029 "rl78-decode.opc"
d3724 1
a3724 1
#line 949 "rl78-decode.opc"
d3734 1
a3734 1
#line 949 "rl78-decode.opc"
d3749 1
a3749 1
#line 1253 "rl78-decode.opc"
d3759 1
a3759 1
#line 1253 "rl78-decode.opc"
d3774 1
a3774 1
#line 1026 "rl78-decode.opc"
d3814 1
a3814 1
#line 1020 "rl78-decode.opc"
d3824 1
a3824 1
#line 1020 "rl78-decode.opc"
d3914 1
a3914 1
#line 943 "rl78-decode.opc"
d3924 1
a3924 1
#line 943 "rl78-decode.opc"
d3939 1
a3939 1
#line 1247 "rl78-decode.opc"
d3949 1
a3949 1
#line 1247 "rl78-decode.opc"
d4004 1
a4004 1
#line 1023 "rl78-decode.opc"
d4014 1
a4014 1
#line 1023 "rl78-decode.opc"
d4104 1
a4104 1
#line 946 "rl78-decode.opc"
d4114 1
a4114 1
#line 946 "rl78-decode.opc"
d4129 1
a4129 1
#line 1250 "rl78-decode.opc"
d4139 1
a4139 1
#line 1250 "rl78-decode.opc"
d4144 17
d4204 1
a4204 1
#line 1242 "rl78-decode.opc"
d4221 1
a4221 1
#line 1239 "rl78-decode.opc"
d4236 1
a4236 1
#line 1230 "rl78-decode.opc"
d4251 1
a4251 1
#line 1218 "rl78-decode.opc"
d4266 1
a4266 1
#line 1224 "rl78-decode.opc"
d4281 1
a4281 1
#line 1215 "rl78-decode.opc"
d4997 1
a4997 1
#line 957 "rl78-decode.opc"
d5007 1
a5007 1
#line 957 "rl78-decode.opc"
d5018 1
a5018 1
#line 965 "rl78-decode.opc"
d5028 1
a5028 1
#line 965 "rl78-decode.opc"
d5257 1
a5257 1
#line 973 "rl78-decode.opc"
d5400 1
a5400 1
#line 895 "rl78-decode.opc"
d5410 1
a5410 1
#line 895 "rl78-decode.opc"
d5425 1
a5425 1
#line 898 "rl78-decode.opc"
d5442 1
a5442 1
#line 892 "rl78-decode.opc"
d5457 1
a5457 1
#line 903 "rl78-decode.opc"
d5472 1
a5472 1
#line 906 "rl78-decode.opc"
d5745 1
a5745 1
#line 1261 "rl78-decode.opc"
@

