head	1.15;
access;
symbols
	sid-snapshot-20180601:1.15
	sid-snapshot-20180501:1.15
	sid-snapshot-20180401:1.15
	sid-snapshot-20180301:1.15
	sid-snapshot-20180201:1.15
	sid-snapshot-20180101:1.15
	sid-snapshot-20171201:1.15
	sid-snapshot-20171101:1.15
	sid-snapshot-20171001:1.15
	sid-snapshot-20170901:1.15
	sid-snapshot-20170801:1.15
	sid-snapshot-20170701:1.15
	sid-snapshot-20170601:1.15
	sid-snapshot-20170501:1.15
	sid-snapshot-20170401:1.15
	sid-snapshot-20170301:1.15
	sid-snapshot-20170201:1.15
	sid-snapshot-20170101:1.15
	sid-snapshot-20161201:1.15
	sid-snapshot-20161101:1.15
	sid-snapshot-20160901:1.15
	sid-snapshot-20160801:1.15
	sid-snapshot-20160701:1.15
	sid-snapshot-20160601:1.15
	sid-snapshot-20160501:1.15
	sid-snapshot-20160401:1.15
	sid-snapshot-20160301:1.15
	sid-snapshot-20160201:1.15
	sid-snapshot-20160101:1.15
	sid-snapshot-20151201:1.15
	sid-snapshot-20151101:1.15
	sid-snapshot-20151001:1.15
	sid-snapshot-20150901:1.15
	sid-snapshot-20150801:1.15
	sid-snapshot-20150701:1.15
	sid-snapshot-20150601:1.15
	sid-snapshot-20150501:1.15
	sid-snapshot-20150401:1.15
	sid-snapshot-20150301:1.15
	sid-snapshot-20150201:1.15
	sid-snapshot-20150101:1.15
	sid-snapshot-20141201:1.15
	sid-snapshot-20141101:1.15
	sid-snapshot-20141001:1.15
	sid-snapshot-20140901:1.15
	sid-snapshot-20140801:1.15
	sid-snapshot-20140701:1.15
	sid-snapshot-20140601:1.15
	sid-snapshot-20140501:1.15
	sid-snapshot-20140401:1.15
	sid-snapshot-20140301:1.15
	sid-snapshot-20140201:1.15
	sid-snapshot-20140101:1.15
	sid-snapshot-20131201:1.15
	sid-snapshot-20131101:1.15
	sid-snapshot-20131001:1.14
	binutils-2_24-branch:1.14.0.8
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.13
	sid-snapshot-20130901:1.14
	gdb_7_6_1-2013-08-30-release:1.14
	sid-snapshot-20130801:1.14
	sid-snapshot-20130701:1.14
	sid-snapshot-20130601:1.14
	sid-snapshot-20130501:1.14
	gdb_7_6-2013-04-26-release:1.14
	sid-snapshot-20130401:1.14
	binutils-2_23_2:1.14
	gdb_7_6-branch:1.14.0.6
	gdb_7_6-2013-03-12-branchpoint:1.14
	sid-snapshot-20130301:1.14
	sid-snapshot-20130201:1.14
	sid-snapshot-20130101:1.14
	sid-snapshot-20121201:1.14
	gdb_7_5_1-2012-11-29-release:1.14
	binutils-2_23_1:1.14
	sid-snapshot-20121101:1.14
	binutils-2_23:1.14
	sid-snapshot-20121001:1.14
	sid-snapshot-20120901:1.14
	gdb_7_5-2012-08-17-release:1.14
	sid-snapshot-20120801:1.14
	binutils-2_23-branch:1.14.0.4
	binutils-2_23-branchpoint:1.14
	gdb_7_5-branch:1.14.0.2
	gdb_7_5-2012-07-18-branchpoint:1.14
	sid-snapshot-20120701:1.14
	sid-snapshot-20120601:1.14
	sid-snapshot-20120501:1.14
	binutils-2_22_branch:1.13.0.18
	gdb_7_4_1-2012-04-26-release:1.13
	sid-snapshot-20120401:1.14
	sid-snapshot-20120301:1.14
	sid-snapshot-20120201:1.13
	gdb_7_4-2012-01-24-release:1.13
	sid-snapshot-20120101:1.13
	gdb_7_4-branch:1.13.0.16
	gdb_7_4-2011-12-13-branchpoint:1.13
	sid-snapshot-20111201:1.13
	binutils-2_22:1.13
	sid-snapshot-20111101:1.13
	sid-snapshot-20111001:1.13
	binutils-2_22-branch:1.13.0.14
	binutils-2_22-branchpoint:1.13
	gdb_7_3_1-2011-09-04-release:1.13
	sid-snapshot-20110901:1.13
	sid-snapshot-20110801:1.13
	gdb_7_3-2011-07-26-release:1.13
	sid-snapshot-20110701:1.13
	sid-snapshot-20110601:1.13
	sid-snapshot-20110501:1.13
	gdb_7_3-branch:1.13.0.12
	gdb_7_3-2011-04-01-branchpoint:1.13
	sid-snapshot-20110401:1.13
	sid-snapshot-20110301:1.13
	sid-snapshot-20110201:1.13
	sid-snapshot-20110101:1.13
	binutils-2_21:1.13
	sid-snapshot-20101201:1.13
	binutils-2_21-branch:1.13.0.10
	binutils-2_21-branchpoint:1.13
	sid-snapshot-20101101:1.13
	sid-snapshot-20101001:1.13
	binutils-2_20_1:1.13
	gdb_7_2-2010-09-02-release:1.13
	sid-snapshot-20100901:1.13
	sid-snapshot-20100801:1.13
	gdb_7_2-branch:1.13.0.8
	gdb_7_2-2010-07-07-branchpoint:1.13
	sid-snapshot-20100701:1.13
	sid-snapshot-20100601:1.13
	sid-snapshot-20100501:1.13
	sid-snapshot-20100401:1.13
	gdb_7_1-2010-03-18-release:1.13
	sid-snapshot-20100301:1.13
	gdb_7_1-branch:1.13.0.6
	gdb_7_1-2010-02-18-branchpoint:1.13
	sid-snapshot-20100201:1.13
	sid-snapshot-20100101:1.13
	gdb_7_0_1-2009-12-22-release:1.13
	sid-snapshot-20091201:1.13
	sid-snapshot-20091101:1.13
	binutils-2_20:1.13
	gdb_7_0-2009-10-06-release:1.13
	sid-snapshot-20091001:1.13
	gdb_7_0-branch:1.13.0.4
	gdb_7_0-2009-09-16-branchpoint:1.13
	arc-sim-20090309:1.12
	binutils-arc-20081103-branch:1.12.0.30
	binutils-arc-20081103-branchpoint:1.12
	binutils-2_20-branch:1.13.0.2
	binutils-2_20-branchpoint:1.13
	sid-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	msnyder-checkpoint-072509-branch:1.12.0.28
	msnyder-checkpoint-072509-branchpoint:1.12
	sid-snapshot-20090701:1.12
	dje-cgen-play1-branch:1.12.0.26
	dje-cgen-play1-branchpoint:1.12
	sid-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	sid-snapshot-20090401:1.12
	arc-20081103-branch:1.12.0.24
	arc-20081103-branchpoint:1.12
	arc-insight_6_8-branch:1.12.0.22
	arc-insight_6_8-branchpoint:1.12
	insight_6_8-branch:1.12.0.20
	insight_6_8-branchpoint:1.12
	sid-snapshot-20090301:1.12
	binutils-2_19_1:1.12
	sid-snapshot-20090201:1.12
	sid-snapshot-20090101:1.12
	reverse-20081226-branch:1.12.0.18
	reverse-20081226-branchpoint:1.12
	sid-snapshot-20081201:1.12
	multiprocess-20081120-branch:1.12.0.16
	multiprocess-20081120-branchpoint:1.12
	sid-snapshot-20081101:1.12
	binutils-2_19:1.12
	sid-snapshot-20081001:1.12
	reverse-20080930-branch:1.12.0.14
	reverse-20080930-branchpoint:1.12
	binutils-2_19-branch:1.12.0.12
	binutils-2_19-branchpoint:1.12
	sid-snapshot-20080901:1.12
	sid-snapshot-20080801:1.12
	reverse-20080717-branch:1.12.0.10
	reverse-20080717-branchpoint:1.12
	sid-snapshot-20080701:1.12
	msnyder-reverse-20080609-branch:1.12.0.8
	msnyder-reverse-20080609-branchpoint:1.12
	drow-reverse-20070409-branch:1.11.0.34
	drow-reverse-20070409-branchpoint:1.11
	sid-snapshot-20080601:1.12
	sid-snapshot-20080501:1.12
	sid-snapshot-20080403:1.12
	sid-snapshot-20080401:1.12
	gdb_6_8-2008-03-27-release:1.12
	sid-snapshot-20080301:1.12
	gdb_6_8-branch:1.12.0.6
	gdb_6_8-2008-02-26-branchpoint:1.12
	sid-snapshot-20080201:1.12
	sid-snapshot-20080101:1.12
	sid-snapshot-20071201:1.12
	sid-snapshot-20071101:1.12
	gdb_6_7_1-2007-10-29-release:1.12
	gdb_6_7-2007-10-10-release:1.12
	sid-snapshot-20071001:1.12
	gdb_6_7-branch:1.12.0.4
	gdb_6_7-2007-09-07-branchpoint:1.12
	binutils-2_18:1.12
	binutils-2_18-branch:1.12.0.2
	binutils-2_18-branchpoint:1.12
	insight_6_6-20070208-release:1.11
	binutils-csl-coldfire-4_1-32:1.11
	binutils-csl-sourcerygxx-4_1-32:1.11
	gdb_6_6-2006-12-18-release:1.11
	binutils-csl-innovasic-fido-3_4_4-33:1.11
	binutils-csl-sourcerygxx-3_4_4-32:1.10
	binutils-csl-coldfire-4_1-30:1.11
	binutils-csl-sourcerygxx-4_1-30:1.11
	binutils-csl-coldfire-4_1-28:1.11
	binutils-csl-sourcerygxx-4_1-29:1.11
	binutils-csl-sourcerygxx-4_1-28:1.11
	gdb_6_6-branch:1.11.0.32
	gdb_6_6-2006-11-15-branchpoint:1.11
	binutils-csl-arm-2006q3-27:1.11
	binutils-csl-sourcerygxx-4_1-27:1.11
	binutils-csl-arm-2006q3-26:1.11
	binutils-csl-sourcerygxx-4_1-26:1.11
	binutils-csl-sourcerygxx-4_1-25:1.11
	binutils-csl-sourcerygxx-4_1-24:1.11
	binutils-csl-sourcerygxx-4_1-23:1.11
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.11
	binutils-csl-sourcerygxx-4_1-21:1.11
	binutils-csl-arm-2006q3-21:1.11
	binutils-csl-sourcerygxx-4_1-22:1.11
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.11
	binutils-csl-sourcerygxx-4_1-20:1.11
	binutils-csl-arm-2006q3-19:1.11
	binutils-csl-sourcerygxx-4_1-19:1.11
	binutils-csl-sourcerygxx-4_1-18:1.11
	binutils-csl-renesas-4_1-9:1.11
	gdb-csl-sourcerygxx-3_4_4-25:1.11
	binutils-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.11
	gdb-csl-symbian-6_4_50_20060226-11:1.11
	binutils-csl-renesas-4_1-8:1.11
	binutils-csl-renesas-4_1-7:1.11
	binutils-csl-renesas-4_1-6:1.11
	gdb-csl-sourcerygxx-4_1-17:1.11
	binutils-csl-sourcerygxx-4_1-17:1.11
	gdb-csl-20060226-branch-local-2:1.11
	gdb-csl-sourcerygxx-4_1-14:1.11
	binutils-csl-sourcerygxx-4_1-14:1.11
	binutils-csl-sourcerygxx-4_1-15:1.11
	gdb-csl-sourcerygxx-4_1-13:1.11
	binutils-csl-sourcerygxx-4_1-13:1.11
	binutils-2_17:1.11
	gdb-csl-sourcerygxx-4_1-12:1.11
	binutils-csl-sourcerygxx-4_1-12:1.11
	gdb-csl-sourcerygxx-3_4_4-21:1.11
	binutils-csl-sourcerygxx-3_4_4-21:1.11
	gdb_6_5-20060621-release:1.11
	binutils-csl-wrs-linux-3_4_4-24:1.10
	binutils-csl-wrs-linux-3_4_4-23:1.10
	gdb-csl-sourcerygxx-4_1-9:1.11
	binutils-csl-sourcerygxx-4_1-9:1.11
	gdb-csl-sourcerygxx-4_1-8:1.11
	binutils-csl-sourcerygxx-4_1-8:1.11
	gdb-csl-sourcerygxx-4_1-7:1.11
	binutils-csl-sourcerygxx-4_1-7:1.11
	gdb-csl-arm-2006q1-6:1.11
	binutils-csl-arm-2006q1-6:1.11
	gdb-csl-sourcerygxx-4_1-6:1.11
	binutils-csl-sourcerygxx-4_1-6:1.11
	binutils-csl-wrs-linux-3_4_4-22:1.10
	gdb-csl-symbian-6_4_50_20060226-10:1.11
	gdb-csl-symbian-6_4_50_20060226-9:1.11
	gdb-csl-symbian-6_4_50_20060226-8:1.11
	gdb-csl-coldfire-4_1-11:1.11
	binutils-csl-coldfire-4_1-11:1.11
	gdb-csl-sourcerygxx-3_4_4-19:1.11
	binutils-csl-sourcerygxx-3_4_4-19:1.11
	gdb-csl-coldfire-4_1-10:1.11
	gdb_6_5-branch:1.11.0.30
	gdb_6_5-2006-05-14-branchpoint:1.11
	binutils-csl-coldfire-4_1-10:1.11
	gdb-csl-sourcerygxx-4_1-5:1.11
	binutils-csl-sourcerygxx-4_1-5:1.11
	nickrob-async-20060513-branch:1.11.0.28
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.11
	binutils-csl-sourcerygxx-4_1-4:1.11
	msnyder-reverse-20060502-branch:1.11.0.26
	msnyder-reverse-20060502-branchpoint:1.11
	binutils-csl-wrs-linux-3_4_4-21:1.10
	gdb-csl-morpho-4_1-4:1.11
	binutils-csl-morpho-4_1-4:1.11
	gdb-csl-sourcerygxx-3_4_4-17:1.11
	binutils-csl-sourcerygxx-3_4_4-17:1.11
	binutils-csl-wrs-linux-3_4_4-20:1.10
	readline_5_1-import-branch:1.11.0.24
	readline_5_1-import-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.11
	binutils-2_17-branch:1.11.0.22
	binutils-2_17-branchpoint:1.11
	gdb-csl-symbian-20060226-branch:1.11.0.20
	gdb-csl-symbian-20060226-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.11
	msnyder-reverse-20060331-branch:1.11.0.18
	msnyder-reverse-20060331-branchpoint:1.11
	binutils-csl-2_17-branch:1.11.0.16
	binutils-csl-2_17-branchpoint:1.11
	gdb-csl-available-20060303-branch:1.11.0.14
	gdb-csl-available-20060303-branchpoint:1.11
	gdb-csl-20060226-branch:1.11.0.12
	gdb-csl-20060226-branchpoint:1.11
	gdb_6_4-20051202-release:1.11
	msnyder-fork-checkpoint-branch:1.11.0.10
	msnyder-fork-checkpoint-branchpoint:1.11
	gdb-csl-gxxpro-6_3-branch:1.11.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.11
	gdb_6_4-branch:1.11.0.6
	gdb_6_4-2005-11-01-branchpoint:1.11
	gdb-csl-arm-20051020-branch:1.11.0.4
	gdb-csl-arm-20051020-branchpoint:1.11
	binutils-csl-gxxpro-3_4-branch:1.10.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.10
	binutils-2_16_1:1.10
	msnyder-tracepoint-checkpoint-branch:1.11.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.11
	gdb-csl-arm-20050325-2005-q1b:1.10
	binutils-csl-arm-2005q1b:1.10
	binutils-2_16:1.10
	gdb-csl-arm-20050325-2005-q1a:1.10
	binutils-csl-arm-2005q1a:1.10
	csl-arm-20050325-branch:1.10.0.6
	csl-arm-20050325-branchpoint:1.10
	binutils-csl-arm-2005q1-branch:1.10.0.4
	binutils-csl-arm-2005q1-branchpoint:1.10
	binutils-2_16-branch:1.10.0.2
	binutils-2_16-branchpoint:1.10
	csl-arm-2004-q3d:1.7
	gdb_6_3-20041109-release:1.4
	gdb_6_3-branch:1.4.0.2
	gdb_6_3-20041019-branchpoint:1.4
	csl-arm-2004-q3:1.3
	drow_intercu-merge-20040921:1.3
	drow_intercu-20040221-branch:1.3.0.2
	drow_intercu-merge-20040915:1.3
	jimb-gdb_6_2-e500-branch:1.1.0.6
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	binutils_latest_snapshot:1.15;
locks; strict;
comment	@ * @;


1.15
date	2013.10.10.17.43.37;	author roland;	state Exp;
branches;
next	1.14;

1.14
date	2012.02.27.06.37.39;	author amodra;	state Exp;
branches
	1.14.8.1;
next	1.13;

1.13
date	2009.09.02.07.20.29;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.05.09.49.00;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.07.07.34.27;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.23.13.51.25;	author tomerl;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.29.16.34.35;	author tomerl;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.05.10.59.57;	author tomerl;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.28.10.29.56;	author tomerl;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.27.10.24.39;	author tomerl;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.25.09.45.36;	author tomerl;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.07.14.18.16;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.14.31.39;	author nickc;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.07.27.11.37.12;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.07.17.28.53;	author nickc;	state Exp;
branches;
next	;

1.14.8.1
date	2013.10.10.17.44.18;	author roland;	state Exp;
branches;
next	;

1.3.2.1
date	2004.09.16.17.01.58;	author drow;	state Exp;
branches;
next	;


desc
@@


1.15
log
@opcodes/
	* cr16-opc.c (REG): Cast NAME to 'reg' enum type to suppress
	possible compiler warnings when the union's initializer is
	actually meant for the 'preg' enum typed member.
	* crx-opc.c (REG): Likewise.
@
text
@/* crx-opc.c -- Table of opcodes for the CRX processor.
   Copyright 2004, 2005, 2007, 2012, 2013 Free Software Foundation, Inc.
   Contributed by Tomer Levi NSC, Israel.
   Originally written for GAS 2.12 by Tomer Levi.

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include <stdio.h>
#include "libiberty.h"
#include "symcat.h"
#include "opcode/crx.h"

const inst crx_instruction[] =
{
/* Create an arithmetic instruction - INST[bw].  */
#define  ARITH_BYTE_INST(NAME, OPC) \
  /* opc8 cst4 r */								\
  {NAME, 1, OPC,  24, ARITH_BYTE_INS | CST4MAP, {{cst4,20}, {regr,16}}},	\
  /* opc8 i16 r */								\
  {NAME, 2, (OPC<<4)+0xE, 20, ARITH_BYTE_INS | CST4MAP, {{i16,0}, {regr,16}}},  \
  /* opc8 r r */								\
  {NAME, 1, OPC+0x40, 24, ARITH_BYTE_INS, {{regr,20}, {regr,16}}}

  ARITH_BYTE_INST ("addub", 0x0),
  ARITH_BYTE_INST ("addb",  0x1),
  ARITH_BYTE_INST ("addcb", 0x2),
  ARITH_BYTE_INST ("andb",  0x3),
  ARITH_BYTE_INST ("cmpb",  0x4),
  ARITH_BYTE_INST ("movb",  0x5),
  ARITH_BYTE_INST ("orb",   0x6),
  ARITH_BYTE_INST ("subb",  0x7),
  ARITH_BYTE_INST ("subcb", 0x8),
  ARITH_BYTE_INST ("xorb",  0x9),
  ARITH_BYTE_INST ("mulb",  0xA),

  ARITH_BYTE_INST ("adduw", 0x10),
  ARITH_BYTE_INST ("addw",  0x11),
  ARITH_BYTE_INST ("addcw", 0x12),
  ARITH_BYTE_INST ("andw",  0x13),
  ARITH_BYTE_INST ("cmpw",  0x14),
  ARITH_BYTE_INST ("movw",  0x15),
  ARITH_BYTE_INST ("orw",   0x16),
  ARITH_BYTE_INST ("subw",  0x17),
  ARITH_BYTE_INST ("subcw", 0x18),
  ARITH_BYTE_INST ("xorw",  0x19),
  ARITH_BYTE_INST ("mulw",  0x1A),

/* Create an arithmetic instruction - INST[d].  */
#define  ARITH_INST(NAME, OPC) \
  /* opc8 cst4 r */							    \
  {NAME, 1, OPC,  24, ARITH_INS | CST4MAP, {{cst4,20}, {regr,16}}},	    \
  /* opc8 i16 r */							    \
  {NAME, 2, (OPC<<4)+0xE, 20, ARITH_INS | CST4MAP, {{i16,0},  {regr,16}}},  \
  /* opc8 i32 r */							    \
  {NAME, 3, (OPC<<4)+0xF, 20, ARITH_INS, {{i32,0},  {regr,16}}},	    \
  /* opc8 r r */							    \
  {NAME, 1, OPC+0x40, 24, ARITH_INS, {{regr,20}, {regr,16}}}

  ARITH_INST ("addud", 0x20),
  ARITH_INST ("addd",  0x21),
  ARITH_INST ("addcd", 0x22),
  ARITH_INST ("andd",  0x23),
  ARITH_INST ("cmpd",  0x24),
  ARITH_INST ("movd",  0x25),
  ARITH_INST ("ord",   0x26),
  ARITH_INST ("subd",  0x27),
  ARITH_INST ("subcd", 0x28),
  ARITH_INST ("xord",  0x29),
  ARITH_INST ("muld",  0x2A),

/* Create a shift instruction.  */
#define  SHIFT_INST(NAME, OPRD, OPC1, SHIFT1, OPC2) \
  /* OPRD=ui3 -->> opc9 ui3 r */			      \
  /* OPRD=ui4 -->> opc8 ui4 r */			      \
  /* OPRD=ui5 -->> opc7 ui5 r */			      \
  {NAME, 1, OPC1, SHIFT1, SHIFT_INS, {{OPRD,20}, {regr,16}}}, \
  /* opc8 r r */					      \
  {NAME, 1, OPC2, 24, SHIFT_INS, {{regr,20}, {regr,16}}}

  SHIFT_INST ("sllb", ui3, 0x1F8, 23, 0x4D),
  SHIFT_INST ("srlb", ui3, 0x1F9, 23, 0x4E),
  SHIFT_INST ("srab", ui3, 0x1FA, 23, 0x4F),

  SHIFT_INST ("sllw", ui4, 0xB6,  24, 0x5D),
  SHIFT_INST ("srlw", ui4, 0xB7,  24, 0x5E),
  SHIFT_INST ("sraw", ui4, 0xB8,  24, 0x5F),

  SHIFT_INST ("slld", ui5, 0x78,  25, 0x6D),
  SHIFT_INST ("srld", ui5, 0x79,  25, 0x6E),
  SHIFT_INST ("srad", ui5, 0x7A,  25, 0x6F),

/* Create a conditional branch instruction.  */
#define  BRANCH_INST(NAME, OPC) \
  /* opc4 c4 dispe9 */							\
  {NAME,  1, OPC, 24, BRANCH_INS | RELAXABLE, {{dispe9,16}}},		\
  /* opc4 c4 disps17 */							\
  {NAME,  2, (OPC<<8)+0x7E, 16,	BRANCH_INS | RELAXABLE, {{disps17,0}}}, \
  /* opc4 c4 disps32 */							\
  {NAME,  3, (OPC<<8)+0x7F, 16,	BRANCH_INS | RELAXABLE, {{disps32,0}}}

  BRANCH_INST ("beq", 0x70),
  BRANCH_INST ("bne", 0x71),
  BRANCH_INST ("bcs", 0x72),
  BRANCH_INST ("bcc", 0x73),
  BRANCH_INST ("bhi", 0x74),
  BRANCH_INST ("bls", 0x75),
  BRANCH_INST ("bgt", 0x76),
  BRANCH_INST ("ble", 0x77),
  BRANCH_INST ("bfs", 0x78),
  BRANCH_INST ("bfc", 0x79),
  BRANCH_INST ("blo", 0x7A),
  BRANCH_INST ("bhs", 0x7B),
  BRANCH_INST ("blt", 0x7C),
  BRANCH_INST ("bge", 0x7D),
  BRANCH_INST ("br",  0x7E),

/* Create a 'Branch if Equal to 0' instruction.  */
#define  BRANCH_NEQ_INST(NAME, OPC) \
  /* opc8 dispu5 r */						\
  {NAME,  1, OPC, 24, BRANCH_NEQ_INS, {{regr,16}, {dispu5,20}}}

  BRANCH_NEQ_INST ("beq0b",  0xB0),
  BRANCH_NEQ_INST ("bne0b",  0xB1),
  BRANCH_NEQ_INST ("beq0w",  0xB2),
  BRANCH_NEQ_INST ("bne0w",  0xB3),
  BRANCH_NEQ_INST ("beq0d",  0xB4),
  BRANCH_NEQ_INST ("bne0d",  0xB5),

/* Create instruction with no operands.  */
#define  NO_OP_INST(NAME, OPC) \
  /* opc16 */			    \
  {NAME,  1, OPC, 16, 0, {{0, 0}}}

  NO_OP_INST ("nop",	0x3002),
  NO_OP_INST ("retx",	0x3003),
  NO_OP_INST ("di",	0x3004),
  NO_OP_INST ("ei",	0x3005),
  NO_OP_INST ("wait",	0x3006),
  NO_OP_INST ("eiwait",	0x3007),

/* Create a 'Compare & Branch' instruction.  */
#define  CMPBR_INST(NAME, OPC1, OPC2, C4) \
  /* opc12 r r c4 disps9 */					      \
  {NAME, 2, ((0x300+OPC1)<<12)+C4,  8, CMPBR_INS | FMT_3| RELAXABLE,  \
      {{regr,16}, {regr,12}, {disps9,0}}},			      \
  /* opc12 r r c4 disps25 */					      \
  {NAME, 3, ((0x310+OPC1)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, \
      {{regr,16}, {regr,12}, {disps25,0}}},			      \
  /* opc12 i4cst4 r c4 disps9 */				      \
  {NAME, 2, ((0x300+OPC2)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, \
      {{cst4,16}, {regr,12}, {disps9,0}}},			      \
  /* opc12 i4cst4 r c4 disps25 */				      \
  {NAME, 3, ((0x310+OPC2)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, \
      {{cst4,16}, {regr,12}, {disps25,0}}}

  CMPBR_INST ("cmpbeqb", 0x8, 0xC, 0x0),
  CMPBR_INST ("cmpbneb", 0x8, 0xC, 0x1),
  CMPBR_INST ("cmpbhib", 0x8, 0xC, 0x4),
  CMPBR_INST ("cmpblsb", 0x8, 0xC, 0x5),
  CMPBR_INST ("cmpbgtb", 0x8, 0xC, 0x6),
  CMPBR_INST ("cmpbleb", 0x8, 0xC, 0x7),
  CMPBR_INST ("cmpblob", 0x8, 0xC, 0xA),
  CMPBR_INST ("cmpbhsb", 0x8, 0xC, 0xB),
  CMPBR_INST ("cmpbltb", 0x8, 0xC, 0xC),
  CMPBR_INST ("cmpbgeb", 0x8, 0xC, 0xD),

  CMPBR_INST ("cmpbeqw", 0x9, 0xD, 0x0),
  CMPBR_INST ("cmpbnew", 0x9, 0xD, 0x1),
  CMPBR_INST ("cmpbhiw", 0x9, 0xD, 0x4),
  CMPBR_INST ("cmpblsw", 0x9, 0xD, 0x5),
  CMPBR_INST ("cmpbgtw", 0x9, 0xD, 0x6),
  CMPBR_INST ("cmpblew", 0x9, 0xD, 0x7),
  CMPBR_INST ("cmpblow", 0x9, 0xD, 0xA),
  CMPBR_INST ("cmpbhsw", 0x9, 0xD, 0xB),
  CMPBR_INST ("cmpbltw", 0x9, 0xD, 0xC),
  CMPBR_INST ("cmpbgew", 0x9, 0xD, 0xD),

  CMPBR_INST ("cmpbeqd", 0xA, 0xE, 0x0),
  CMPBR_INST ("cmpbned", 0xA, 0xE, 0x1),
  CMPBR_INST ("cmpbhid", 0xA, 0xE, 0x4),
  CMPBR_INST ("cmpblsd", 0xA, 0xE, 0x5),
  CMPBR_INST ("cmpbgtd", 0xA, 0xE, 0x6),
  CMPBR_INST ("cmpbled", 0xA, 0xE, 0x7),
  CMPBR_INST ("cmpblod", 0xA, 0xE, 0xA),
  CMPBR_INST ("cmpbhsd", 0xA, 0xE, 0xB),
  CMPBR_INST ("cmpbltd", 0xA, 0xE, 0xC),
  CMPBR_INST ("cmpbged", 0xA, 0xE, 0xD),

/* Create an instruction using a single register operand.  */
#define  REG1_INST(NAME, OPC) \
  /* opc8 c4 r */				\
  {NAME,  1, OPC, 20, NO_TYPE_INS, {{regr,16}}}

/* Same as REG1_INST, with additional FLAGS.  */
#define  REG1_FLAG_INST(NAME, OPC, FLAGS) \
  /* opc8 c4 r */					\
  {NAME,  1, OPC, 20, NO_TYPE_INS | FLAGS, {{regr,16}}}

  /* JCond instructions	*/
  REG1_INST ("jeq",  0xBA0),
  REG1_INST ("jne",  0xBA1),
  REG1_INST ("jcs",  0xBA2),
  REG1_INST ("jcc",  0xBA3),
  REG1_INST ("jhi",  0xBA4),
  REG1_INST ("jls",  0xBA5),
  REG1_INST ("jgt",  0xBA6),
  REG1_INST ("jle",  0xBA7),
  REG1_INST ("jfs",  0xBA8),
  REG1_INST ("jfc",  0xBA9),
  REG1_INST ("jlo",  0xBAA),
  REG1_INST ("jhs",  0xBAB),
  REG1_INST ("jlt",  0xBAC),
  REG1_INST ("jge",  0xBAD),
  REG1_INST ("jump", 0xBAE),

  /* SCond instructions */
  REG1_INST ("seq",  0xBB0),
  REG1_INST ("sne",  0xBB1),
  REG1_INST ("scs",  0xBB2),
  REG1_INST ("scc",  0xBB3),
  REG1_INST ("shi",  0xBB4),
  REG1_INST ("sls",  0xBB5),
  REG1_INST ("sgt",  0xBB6),
  REG1_INST ("sle",  0xBB7),
  REG1_INST ("sfs",  0xBB8),
  REG1_INST ("sfc",  0xBB9),
  REG1_INST ("slo",  0xBBA),
  REG1_INST ("shs",  0xBBB),
  REG1_INST ("slt",  0xBBC),
  REG1_INST ("sge",  0xBBD),

/* Create an instruction using two register operands.  */
#define  REG2_INST(NAME, OPC) \
  /* opc24 r r  OR  opc20 c4 r r */			\
  {NAME,  2, 0x300800+OPC,  8, NO_TYPE_INS, {{regr,4}, {regr,0}}}

  /* MULTIPLY INSTRUCTIONS */
  REG2_INST ("macsb",  0x40),
  REG2_INST ("macub",  0x41),
  REG2_INST ("macqb",  0x42),

  REG2_INST ("macsw",  0x50),
  REG2_INST ("macuw",  0x51),
  REG2_INST ("macqw",  0x52),

  REG2_INST ("macsd",  0x60),
  REG2_INST ("macud",  0x61),
  REG2_INST ("macqd",  0x62),

  REG2_INST ("mullsd", 0x65),
  REG2_INST ("mullud", 0x66),

  REG2_INST ("mulsbw", 0x3B),
  REG2_INST ("mulubw", 0x3C),
  REG2_INST ("mulswd", 0x3D),
  REG2_INST ("muluwd", 0x3E),

  /*  SIGNEXTEND STUFF    */
  REG2_INST ("sextbw", 0x30),
  REG2_INST ("sextbd", 0x31),
  REG2_INST ("sextwd", 0x32),
  REG2_INST ("zextbw", 0x34),
  REG2_INST ("zextbd", 0x35),
  REG2_INST ("zextwd", 0x36),

  REG2_INST ("bswap",  0x3F),

  REG2_INST ("maxsb",  0x80),
  REG2_INST ("minsb",  0x81),
  REG2_INST ("maxub",  0x82),
  REG2_INST ("minub",  0x83),
  REG2_INST ("absb",   0x84),
  REG2_INST ("negb",   0x85),
  REG2_INST ("cntl0b", 0x86),
  REG2_INST ("cntl1b", 0x87),
  REG2_INST ("popcntb",0x88),
  REG2_INST ("rotlb",  0x89),
  REG2_INST ("rotrb",  0x8A),
  REG2_INST ("mulqb",  0x8B),
  REG2_INST ("addqb",  0x8C),
  REG2_INST ("subqb",  0x8D),
  REG2_INST ("cntlsb", 0x8E),

  REG2_INST ("maxsw",  0x90),
  REG2_INST ("minsw",  0x91),
  REG2_INST ("maxuw",  0x92),
  REG2_INST ("minuw",  0x93),
  REG2_INST ("absw",   0x94),
  REG2_INST ("negw",   0x95),
  REG2_INST ("cntl0w", 0x96),
  REG2_INST ("cntl1w", 0x97),
  REG2_INST ("popcntw",0x98),
  REG2_INST ("rotlw",  0x99),
  REG2_INST ("rotrw",  0x9A),
  REG2_INST ("mulqw",  0x9B),
  REG2_INST ("addqw",  0x9C),
  REG2_INST ("subqw",  0x9D),
  REG2_INST ("cntlsw", 0x9E),

  REG2_INST ("maxsd",  0xA0),
  REG2_INST ("minsd",  0xA1),
  REG2_INST ("maxud",  0xA2),
  REG2_INST ("minud",  0xA3),
  REG2_INST ("absd",   0xA4),
  REG2_INST ("negd",   0xA5),
  REG2_INST ("cntl0d", 0xA6),
  REG2_INST ("cntl1d", 0xA7),
  REG2_INST ("popcntd",0xA8),
  REG2_INST ("rotld",  0xA9),
  REG2_INST ("rotrd",  0xAA),
  REG2_INST ("mulqd",  0xAB),
  REG2_INST ("addqd",  0xAC),
  REG2_INST ("subqd",  0xAD),
  REG2_INST ("cntlsd", 0xAE),

/* Conditional move instructions */
  REG2_INST ("cmoveqd", 0x70),
  REG2_INST ("cmovned", 0x71),
  REG2_INST ("cmovcsd", 0x72),
  REG2_INST ("cmovccd", 0x73),
  REG2_INST ("cmovhid", 0x74),
  REG2_INST ("cmovlsd", 0x75),
  REG2_INST ("cmovgtd", 0x76),
  REG2_INST ("cmovled", 0x77),
  REG2_INST ("cmovfsd", 0x78),
  REG2_INST ("cmovfcd", 0x79),
  REG2_INST ("cmovlod", 0x7A),
  REG2_INST ("cmovhsd", 0x7B),
  REG2_INST ("cmovltd", 0x7C),
  REG2_INST ("cmovged", 0x7D),

/* Load instructions (from memory to register).  */
#define  LD_REG_INST(NAME, OPC1, OPC2, DISP) \
  /* opc12 r abs16 */							    \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,		    \
      {{abs16,0}, {regr,16}}},						    \
  /* opc12 r abs32 */							    \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,		    \
      {{abs32,0}, {regr,16}}},						    \
  /* opc4 r rbase dispu[bwd]4 */					    \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP | REVERSE_MATCH,		    \
      {{rbase_dispu4,16}, {regr,24}}},					    \
  /* opc4 r rbase disps16 */						    \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE, 20, LD_STOR_INS | FMT_1 | REVERSE_MATCH,  \
      {{rbase_disps16,16}, {regr,24}}},					    \
  /* opc4 r rbase disps32 */						    \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1 | REVERSE_MATCH, \
      {{rbase_disps32,16}, {regr,24}}},					    \
  /* opc12 r rbase ridx scl2 disps6 */					    \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,		    \
      {{rindex_disps6,0}, {regr,16}}},					    \
  /* opc12 r rbase ridx scl2 disps22 */					    \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,		    \
      {{rindex_disps22,0}, {regr,16}}},					    \
  /* opc12 r rbase disps12 */						    \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC | REVERSE_MATCH,		    \
      {{rbase_disps12,12}, {regr,16}}}

  LD_REG_INST ("loadb", 0x0, 0x0, DISPUB4),
  LD_REG_INST ("loadw", 0x1, 0x1, DISPUW4),
  LD_REG_INST ("loadd", 0x2, 0x2, DISPUD4),

/* Store instructions (from Register to Memory).  */
#define  ST_REG_INST(NAME, OPC1, OPC2, DISP) \
  /* opc12 r abs16 */							      \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs16,0}}},	      \
  /* opc12 r abs32 */							      \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs32,0}}},	      \
  /* opc4 r rbase dispu[bwd]4 */					      \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP,				      \
      {{regr,24}, {rbase_dispu4,16}}},					      \
  /* opc4 r rbase disps16 */						      \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE,  20, LD_STOR_INS | FMT_1,	  	      \
      {{regr,24}, {rbase_disps16,16}}},					      \
  /* opc4 r rbase disps32 */						      \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1,		      \
      {{regr,24}, {rbase_disps32,16}}},					      \
  /* opc12 r rbase ridx scl2 disps6 */					      \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS,				      \
      {{regr,16}, {rindex_disps6,0}}},					      \
  /* opc12 r rbase ridx scl2 disps22 */					      \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS, {{regr,16}, {rindex_disps22,0}}},  \
  /* opc12 r rbase disps12 */						      \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC, {{regr,16}, {rbase_disps12,12}}}

/* Store instructions (Immediate to Memory).  */
#define  ST_I_INST(NAME, OPC) \
  /* opc12 ui4 rbase disps12 */						      \
  {NAME,  2, 0x368+OPC,	20, LD_STOR_INS_INC, {{ui4,16}, {rbase_disps12,12}}}, \
  /* opc12 ui4 abs16 */							      \
  {NAME,  2, 0x360+OPC,	20, STOR_IMM_INS, {{ui4,16}, {abs16,0}}},	      \
  /* opc12 ui4 abs32 */							      \
  {NAME,  3, 0x370+OPC,	20, STOR_IMM_INS, {{ui4,16}, {abs32,0}}},	      \
  /* opc12 ui4 rbase disps12 */						      \
  {NAME,  2, 0x364+OPC,	20, STOR_IMM_INS, {{ui4,16}, {rbase_disps12,12}}},    \
  /* opc12 ui4 rbase disps28 */						      \
  {NAME,  3, 0x374+OPC,	20, STOR_IMM_INS, {{ui4,16}, {rbase_disps28,12}}},    \
  /* opc12 ui4 rbase ridx scl2 disps6 */				      \
  {NAME,  2, 0x36C+OPC,	20, STOR_IMM_INS, {{ui4,16}, {rindex_disps6,0}}},     \
  /* opc12 ui4 rbase ridx scl2 disps22 */				      \
  {NAME,  3, 0x37C+OPC,	20, STOR_IMM_INS, {{ui4,16}, {rindex_disps22,0}}}

  ST_REG_INST ("storb", 0x20, 0x4, DISPUB4),
  ST_I_INST ("storb",  0x0),

  ST_REG_INST ("storw", 0x21, 0x5, DISPUW4),
  ST_I_INST ("storw",  0x1),

  ST_REG_INST ("stord", 0x22, 0x6, DISPUD4),
  ST_I_INST ("stord",  0x2),

/* Create a bit instruction.  */
#define  CSTBIT_INST(NAME, OP, OPC1, DIFF, SHIFT, OPC2) \
  /* OP=ui3 -->> opc13 ui3 */						      \
  /* OP=ui4 -->> opc12 ui4 */						      \
  /* OP=ui5 -->> opc11 ui5 */						      \
									      \
  /* opcNN iN abs16 */							      \
  {NAME,  2, OPC1+0*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {abs16,0}}},	      \
  /* opcNN iN abs32 */							      \
  {NAME,  3, OPC1+1*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {abs32,0}}},	      \
  /* opcNN iN rbase */							      \
  {NAME,  1, OPC2,  SHIFT+4,  CSTBIT_INS, {{OP,20}, {rbase,16}}},	      \
  /* opcNN iN rbase disps12 */						      \
  {NAME,  2, OPC1+2*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_disps12,12}}},  \
  /* opcNN iN rbase disps28 */						      \
  {NAME,  3, OPC1+3*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_disps28,12}}},  \
  /* opcNN iN rbase ridx scl2 disps6 */					      \
  {NAME,  2, OPC1+4*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rindex_disps6,0}}},   \
  /* opcNN iN rbase ridx scl2 disps22 */				      \
  {NAME,  3, OPC1+5*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rindex_disps22,0}}}

  CSTBIT_INST ("cbitb", ui3, 0x700, 0x20, 19, 0x1FC),
  CSTBIT_INST ("cbitw", ui4, 0x382, 0x10, 20, 0xBD),
  CSTBIT_INST ("cbitd", ui5, 0x1C3, 0x8,  21, 0x7B),
  {"cbitd",   2, 0x300838,  8, CSTBIT_INS, {{regr,4}, {regr,0}}},
  {"cbitd",   2, 0x18047B,  9, CSTBIT_INS, {{ui5,4}, {regr,0}}},

  CSTBIT_INST ("sbitb", ui3, 0x701, 0x20, 19, 0x1FD),
  CSTBIT_INST ("sbitw", ui4, 0x383, 0x10, 20, 0xBE),
  CSTBIT_INST ("sbitd", ui5, 0x1C4, 0x8,  21, 0x7C),
  {"sbitd",   2, 0x300839,  8, CSTBIT_INS, {{regr,4}, {regr,0}}},
  {"sbitd",   2, 0x18047C,  9, CSTBIT_INS, {{ui5,4}, {regr,0}}},

  CSTBIT_INST ("tbitb", ui3, 0x702, 0x20, 19, 0x1FE),
  CSTBIT_INST ("tbitw", ui4, 0x384, 0x10, 20, 0xBF),
  CSTBIT_INST ("tbitd", ui5, 0x1C5, 0x8,  21, 0x7D),
  {"tbitd",   2, 0x30083A,  8, CSTBIT_INS, {{regr,4}, {regr,0}}},
  {"tbitd",   2, 0x18047D,  9, CSTBIT_INS, {{ui5,4}, {regr,0}}},

/* Instructions including a register list (opcode is represented as a mask).  */
#define  REGLIST_INST(NAME, OPC, FLAG) \
  /* opc12 r mask16 */							    \
  {NAME,  2, OPC, 20, NO_TYPE_INS | REG_LIST | FLAG, {{regr,16}, {ui16,0}}}

  REG1_INST ("getrfid",	0xFF9),
  REG1_INST ("setrfid",	0xFFA),

  REGLIST_INST ("push",	 0x346,	 NO_RPTR),
  REG1_FLAG_INST ("push", 0xFFB, NO_SP),
  REGLIST_INST ("pushx", 0x347,	 NO_RPTR),

  REGLIST_INST ("pop",	 0x324,	 NO_RPTR),
  REG1_FLAG_INST ("pop", 0xFFC,	 NO_SP),
  REGLIST_INST ("popx",	 0x327,	 NO_RPTR),

  REGLIST_INST ("popret", 0x326, NO_RPTR),
  REG1_FLAG_INST ("popret",0xFFD,NO_SP),

  REGLIST_INST ("loadm",  0x324, NO_RPTR),
  REGLIST_INST ("loadma", 0x325, USER_REG),

  REGLIST_INST ("storm",  0x344, NO_RPTR),
  REGLIST_INST ("storma", 0x345, USER_REG),

/* Create a branch instruction.  */
#define  BR_INST(NAME, OPC1, OPC2, INS_TYPE) \
  /* opc12 r disps17 */							  \
  {NAME,  2, OPC1,  20, INS_TYPE | RELAXABLE, {{regr,16}, {disps17,0}}},  \
  /* opc12 r disps32 */							  \
  {NAME,  3, OPC2,  20, INS_TYPE | RELAXABLE, {{regr,16}, {disps32,0}}}

  BR_INST ("bal",   0x307, 0x317, NO_TYPE_INS),

  /* Decrement and Branch instructions.  */
  BR_INST ("dbnzb", 0x304, 0x314, DCR_BRANCH_INS),
  BR_INST ("dbnzw", 0x305, 0x315, DCR_BRANCH_INS),
  BR_INST ("dbnzd", 0x306, 0x316, DCR_BRANCH_INS),

  /* Jump and link instructions.  */
  REG1_INST ("jal",    0xFF8),
  REG2_INST ("jal",    0x37),
  REG2_INST ("jalid",  0x33),

/* Create a CO-processor instruction.  */
  /* esc12 c4 ui16 */
  {"cpi",  2, 0x301,  20, COP_REG_INS, {{ui4,16}, {ui16,0}}},
  /* esc12 c4 ui16 ui16 */
  {"cpi",  3, 0x311,  20, COP_REG_INS, {{ui4,16}, {ui16,0}, {ui16,16}}},

#define  COP_INST(NAME, OPC, TYPE, REG1, REG2) \
  /* opc12 c4 opc8 REG1 REG2 */						      \
  {NAME,  2, 0x301030+OPC,  8, TYPE | FMT_2, {{ui4,16}, {REG1,4}, {REG2,0}}}
/* A reverse form of the above macro.  */
#define  REV_COP_INST(NAME, OPC, TYPE, REG1, REG2) \
  /* opc12 c4 opc8 REG2 REG1 */						      \
  {NAME,  2, 0x301030+OPC,  8, TYPE | FMT_2, {{ui4,16}, {REG1,0}, {REG2,4}}}

  COP_INST	("mtcr",   0, COP_REG_INS,	regr,	  copregr),
  COP_INST	("mfcr",   1, COP_REG_INS,	copregr,  regr),
  COP_INST	("mtcsr",  2, COPS_REG_INS,	regr,	  copsregr),
  COP_INST	("mfcsr",  3, COPS_REG_INS,	copsregr, regr),
  COP_INST	("ldcr",   4, COP_REG_INS,	regr,	  copregr),
  REV_COP_INST	("stcr",   5, COP_REG_INS,	copregr,  regr),
  COP_INST	("ldcsr",  6, COPS_REG_INS,	regr,     copsregr),
  REV_COP_INST	("stcsr",  7, COPS_REG_INS,	copsregr, regr),

/* Create a memory-related CO-processor instruction.  */
#define  COPMEM_INST(NAME, OPC, TYPE) \
  /* opc12 c4 opc12 r mask16 */				  \
  {NAME,  3, 0x3110300+OPC,  4, TYPE | REG_LIST | FMT_5,  \
      {{ui4,16}, {regr,0}, {ui16,16}}}

  COPMEM_INST("loadmcr",  0,  COP_REG_INS),
  COPMEM_INST("stormcr",  1,  COP_REG_INS),
  COPMEM_INST("loadmcsr", 2,  COPS_REG_INS),
  COPMEM_INST("stormcsr", 3,  COPS_REG_INS),

  /* CO-processor extensions.  */
  /* opc12 c4 opc4 ui4 disps9 */
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE,
      {{ui4,8}, {ui4,16}, {disps9,0}}},
  /* opc12 c4 opc4 ui4 disps25 */
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE,
      {{ui4,8}, {ui4,16}, {disps25,0}}},
  /* opc12 c4 opc4 cpdo r r */
  {"cpdop",   2, 0x3010B, 12, COP_REG_INS | FMT_4,
      {{ui4,16}, {ui4,8}, {regr,4}, {regr,0}}},
  /* opc12 c4 opc4 cpdo r r cpdo16 */
  {"cpdop",   3, 0x3110B, 12, COP_REG_INS | FMT_4,
      {{ui4,16}, {ui4,8}, {regr,4}, {regr,0}, {ui16,16}}},
  /* esc16 r procreg */
  {"mtpr",    2, 0x3009,  16, NO_TYPE_INS, {{regr8,8}, {regr8,0}}},
  /* esc16 procreg r */
  {"mfpr",    2, 0x300A,  16, NO_TYPE_INS, {{regr8,8}, {regr8,0}}},

  /* Miscellaneous.  */
  /* opc12 ui4 */
  {"excp",    1, 0xFFF,	20, NO_TYPE_INS, {{ui4,16}}},
  /* opc28 ui4 */
  {"cinv",    2, 0x3010000, 4,	NO_TYPE_INS, {{ui4,0}}},

  /* opc9 ui5 ui5 ui5 r r */
  {"ram", 2, 0x7C,  23, NO_TYPE_INS,
      {{ui5,18}, {ui5,13}, {ui5,8}, {regr,4}, {regr,0}}},
  {"rim", 2, 0x7D,  23, NO_TYPE_INS,
      {{ui5,18}, {ui5,13}, {ui5,8}, {regr,4}, {regr,0}}},

  /* opc9 ui3 r */
  {"rotb",    1, 0x1FB,	23, NO_TYPE_INS, {{ui3,20}, {regr,16}}},
  /* opc8 ui4 r */
  {"rotw",    1, 0xB9,	24, NO_TYPE_INS, {{ui4,20}, {regr,16}}},
  /* opc23 ui5 r */
  {"rotd",    2, 0x180478,  9, NO_TYPE_INS, {{ui5,4}, {regr,0}}},

  {NULL,      0, 0, 0,	0, {{0, 0}}}
};

const int crx_num_opcodes = ARRAY_SIZE (crx_instruction);

/* Macro to build a reg_entry, which have an opcode image :
   For example :
      REG(u4, 0x84, CRX_U_REGTYPE)
   is interpreted as :
      {"u4",  u4, 0x84, CRX_U_REGTYPE}
   The union initializer (second member) always refers to the first
   member of the union, so cast NAME to that type to avoid possible
   compiler warnings when used for non-CRX_R_REGTYPE cases.  */
#define REG(NAME, N, TYPE)    {STRINGX(NAME), {(reg) NAME}, N, TYPE}

const reg_entry crx_regtab[] =
{
/* Build a general purpose register r<N>.  */
#define REG_R(N)    REG(CONCAT2(r,N), N, CRX_R_REGTYPE)

  REG_R(0),  REG_R(1),	REG_R(2),  REG_R(3),
  REG_R(4),  REG_R(5),	REG_R(6),  REG_R(7),
  REG_R(8),  REG_R(9),	REG_R(10), REG_R(11),
  REG_R(12), REG_R(13), REG_R(14), REG_R(15),
  REG(ra, 0xe, CRX_R_REGTYPE),
  REG(sp, 0xf, CRX_R_REGTYPE),

/* Build a user register u<N>.  */
#define REG_U(N)    REG(CONCAT2(u,N), 0x80 + N, CRX_U_REGTYPE)

  REG_U(0),  REG_U(1),  REG_U(2),  REG_U(3),
  REG_U(4),  REG_U(5),  REG_U(6),  REG_U(7),
  REG_U(8),  REG_U(9),  REG_U(10), REG_U(11),
  REG_U(12), REG_U(13), REG_U(14), REG_U(15),
  REG(ura, 0x8e, CRX_U_REGTYPE),
  REG(usp, 0x8f, CRX_U_REGTYPE),

/* Build a configuration register.  */
#define REG_CFG(NAME, N)    REG(NAME, N, CRX_CFG_REGTYPE)

  REG_CFG(hi,	    0x10),
  REG_CFG(lo,	    0x11),
  REG_CFG(uhi,	    0x90),
  REG_CFG(ulo,	    0x91),
  REG_CFG(psr,	    0x12),
  REG_CFG(intbase,  0x13),
  REG_CFG(isp,	    0x14),
  REG_CFG(cfg,	    0x15),
  REG_CFG(cpcfg,    0x16),
  REG_CFG(cen,	    0x17)
};

const int crx_num_regs = ARRAY_SIZE (crx_regtab);

const reg_entry crx_copregtab[] =
{
/* Build a Coprocessor register c<N>.  */
#define REG_C(N)    REG(CONCAT2(c,N), N, CRX_C_REGTYPE)

  REG_C(0),  REG_C(1),	REG_C(2),  REG_C(3),
  REG_C(4),  REG_C(5),	REG_C(6),  REG_C(7),
  REG_C(8),  REG_C(9),	REG_C(10), REG_C(11),
  REG_C(12), REG_C(13), REG_C(14), REG_C(15),

/* Build a Coprocessor Special register cs<N>.  */
#define REG_CS(N)    REG(CONCAT2(cs,N), N, CRX_CS_REGTYPE)

  REG_CS(0),  REG_CS(1),  REG_CS(2),  REG_CS(3),
  REG_CS(4),  REG_CS(5),  REG_CS(6),  REG_CS(7),
  REG_CS(8),  REG_CS(9),  REG_CS(10), REG_CS(11),
  REG_CS(12), REG_CS(13), REG_CS(14), REG_CS(15)
};

const int crx_num_copregs = ARRAY_SIZE (crx_copregtab);

/* CRX operands table.  */
const operand_entry crx_optab[] =
{
  /* Index 0 is dummy, so we can count the instruction's operands.  */
  {0,	nullargs,   0},					/* dummy */
  {4,	arg_ic,	    OP_CST4},				/* cst4 */
  {16,	arg_ic,	    OP_SIGNED},				/* i16 */
  {32,	arg_ic,	    OP_SIGNED},				/* i32 */
  {3,	arg_ic,	    OP_UNSIGNED},			/* ui3 */
  {4,	arg_ic,	    OP_UNSIGNED},		        /* ui4 */
  {5,	arg_ic,	    OP_UNSIGNED},		        /* ui5 */
  {16,	arg_ic,	    OP_UNSIGNED},		        /* ui16 */
  {8,	arg_c,	    OP_EVEN|OP_SHIFT|OP_SIGNED},	/* disps9 */
  {16,	arg_c,	    OP_EVEN|OP_SHIFT|OP_SIGNED},	/* disps17 */
  {24,	arg_c,	    OP_EVEN|OP_SHIFT|OP_SIGNED},	/* disps25 */
  {32,	arg_c,	    OP_EVEN|OP_SHIFT|OP_SIGNED},	/* disps32 */
  {4,	arg_c,	    OP_EVEN|OP_SHIFT_DEC|OP_UNSIGNED},  /* dispu5 */
  {8,	arg_c,	    OP_EVEN|OP_SHIFT|OP_SIGNED|OP_ESC}, /* dispe9 */
  {16,	arg_c,	    OP_UNSIGNED|OP_UPPER_64KB},		/* abs16 */
  {32,	arg_c,	    OP_UNSIGNED},			/* abs32 */
  {4,	arg_rbase,  0},					/* rbase */
  {4,	arg_cr,	    OP_DISPU4},				/* rbase_dispu4 */
  {12,	arg_cr,	    OP_SIGNED},				/* rbase_disps12 */
  {16,	arg_cr,	    OP_SIGNED},				/* rbase_disps16 */
  {28,	arg_cr,	    OP_SIGNED},				/* rbase_disps28 */
  {32,	arg_cr,	    OP_SIGNED},				/* rbase_disps32 */
  {6,	arg_idxr,   OP_SIGNED},				/* rindex_disps6 */
  {22,  arg_idxr,   OP_SIGNED},				/* rindex_disps22 */
  {4,	arg_r,	    0},					/* regr */
  {8,	arg_r,	    0},					/* regr8 */
  {4,	arg_copr,   0},					/* copregr */
  {4,	arg_copsr,  0}					/* copsregr */
};

/* CRX traps/interrupts.  */
const trap_entry crx_traps[] =
{
  {"nmi", 1}, {"svc", 5}, {"dvz", 6}, {"flg", 7},
  {"bpt", 8}, {"und", 10}, {"prv", 11}, {"iberr", 12}
};

const int crx_num_traps = ARRAY_SIZE (crx_traps);

/* cst4 operand mapping:
The value in entry <N> is mapped to the value <N>
      Value		  Binary mapping
    cst4_map[N]	  -->>		N

Example (for N=5):

    cst4_map[5]=-4  -->>	5		*/
const int cst4_map[] =
{
  0, 1, 2, 3, 4, -4, -1, 7, 8, 16, 32, 20, 12, 48
};

const int cst4_maps = ARRAY_SIZE (cst4_map);

/* CRX instructions that don't have arguments.  */
const char* no_op_insn[] =
{
  "di", "ei", "eiwait", "nop", "retx", "wait", NULL
};
@


1.14
log
@gas/
	* config/tc-crx.c: Include bfd_stdint.h.
	(getconstant): Remove irrelevant comment.  Don't fail due to
	sign-extension of int mask.
	(check_range): Rewrite using unsigned arithmetic throughout.
opcodes/
	* crx-dis.c (print_arg): Mask constant to 32 bits.
	* crx-opc.c (cst4_map): Use int array.
include/opcode/
	* crx.h (cst4_map): Update declaration.
@
text
@d2 1
a2 1
   Copyright 2004, 2005, 2007, 2012 Free Software Foundation, Inc.
d546 1
a546 1
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE, 
d549 1
a549 1
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE, 
d552 1
a552 1
  {"cpdop",   2, 0x3010B, 12, COP_REG_INS | FMT_4, 
d555 1
a555 1
  {"cpdop",   3, 0x3110B, 12, COP_REG_INS | FMT_4, 
d569 1
a569 1
  {"ram", 2, 0x7C,  23, NO_TYPE_INS, 
d571 1
a571 1
  {"rim", 2, 0x7D,  23, NO_TYPE_INS, 
d590 5
a594 2
      {"u4",  u4, 0x84, CRX_U_REGTYPE}  */
#define REG(NAME, N, TYPE)    {STRINGX(NAME), {NAME}, N, TYPE}
d715 1
a715 1
const char* no_op_insn[] = 
@


1.14.8.1
log
@opcodes/
	* cr16-opc.c (REG): Cast NAME to 'reg' enum type to suppress
	possible compiler warnings when the union's initializer is
	actually meant for the 'preg' enum typed member.
	* crx-opc.c (REG): Likewise.
@
text
@d2 1
a2 1
   Copyright 2004, 2005, 2007, 2012, 2013 Free Software Foundation, Inc.
d546 1
a546 1
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE,
d549 1
a549 1
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4 | RELAXABLE,
d552 1
a552 1
  {"cpdop",   2, 0x3010B, 12, COP_REG_INS | FMT_4,
d555 1
a555 1
  {"cpdop",   3, 0x3110B, 12, COP_REG_INS | FMT_4,
d569 1
a569 1
  {"ram", 2, 0x7C,  23, NO_TYPE_INS,
d571 1
a571 1
  {"rim", 2, 0x7D,  23, NO_TYPE_INS,
d590 2
a591 5
      {"u4",  u4, 0x84, CRX_U_REGTYPE}
   The union initializer (second member) always refers to the first
   member of the union, so cast NAME to that type to avoid possible
   compiler warnings when used for non-CRX_R_REGTYPE cases.  */
#define REG(NAME, N, TYPE)    {STRINGX(NAME), {(reg) NAME}, N, TYPE}
d712 1
a712 1
const char* no_op_insn[] =
@


1.13
log
@update copyright dates
@
text
@d2 1
a2 1
   Copyright 2004, 2005, 2007 Free Software Foundation, Inc.
d704 1
a704 1
const long cst4_map[] =
@


1.12
log
@Change source files over to GPLv3.
@
text
@d2 1
a2 1
   Copyright 2004, 2007 Free Software Foundation, Inc.
@


1.11
log
@Update the address and phone number of the FSF
@
text
@d2 1
a2 1
   Copyright 2004 Free Software Foundation, Inc.
d6 1
a6 1
   This file is part of GAS, GDB and the GNU binutils.
d8 9
a16 9
   GAS, GDB, and GNU binutils is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2, or (at your
   option) any later version.

   GAS, GDB, and GNU binutils are distributed in the hope that they will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
d20 2
a21 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.10
log
@2004-12-23  Tomer Levi  <Tomer.Levi@@nsc.com>

	* crx-opc.c: Mark 'bcop' instruction as RELAXABLE.
@
text
@d20 1
a20 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.9
log
@2004-11-29  Tomer Levi  <Tomer.Levi@@nsc.com>

	* crx-opc.c (crx_optab): Mark all rbase_disps* operands as signed.
	(no_op_insn): Initialize array with instructions that have no
	operands.
	* crx-dis.c (make_instruction): Get rid of COP_BRANCH_INS operand swapping.
@
text
@d545 1
a545 1
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4, 
d548 1
a548 1
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4, 
@


1.8
log
@2004-11-05  Tomer Levi  <Tomer.Levi@@nsc.com>

* crx-opc.c (crx_optab): Rename 'arg_icr' to 'arg_idxr' for Index register mode.
* crx-dis.c: Likewise.
@
text
@d348 23
a370 23
  /* opc12 r abs16 */								  \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,			  \
      {{abs16,0}, {regr,16}}},							  \
  /* opc12 r abs32 */								  \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,			  \
      {{abs32,0}, {regr,16}}},							  \
  /* opc4 r rbase dispu[bwd]4 */						  \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP | REVERSE_MATCH,			  \
      {{rbase_cst4,16}, {regr,24}}},						  \
  /* opc4 r rbase disps16 */							  \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE, 20, LD_STOR_INS | DISP | FMT_1 | REVERSE_MATCH, \
      {{rbase_disps16,16}, {regr,24}}},						  \
  /* opc4 r rbase disps32 */							  \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1 | REVERSE_MATCH,	  \
      {{rbase_disps32,16}, {regr,24}}},						  \
  /* opc12 r rbase ridx scl2 disps6 */						  \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,			  \
      {{rindex_disps6,0}, {regr,16}}},						  \
  /* opc12 r rbase ridx scl2 disps22 */						  \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH,			  \
      {{rindex_disps22,0}, {regr,16}}},						  \
  /* opc12 r rbase disps12 */							  \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC | REVERSE_MATCH,			  \
d379 19
a397 17
  /* opc12 r abs16 */								  \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs16,0}}},		  \
  /* opc12 r abs32 */								  \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs32,0}}},		  \
  /* opc4 r rbase dispu[bwd]4 */						  \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP, {{regr,24}, {rbase_cst4,16}}},	  \
  /* opc4 r rbase disps16 */							  \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE,  20, LD_STOR_INS | DISP | FMT_1,		  \
      {{regr,24}, {rbase_disps16,16}}},						  \
  /* opc4 r rbase disps32 */							  \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1,			  \
      {{regr,24}, {rbase_disps32,16}}},						  \
  /* opc12 r rbase ridx scl2 disps6 */						  \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS, {{regr,16}, {rindex_disps6,0}}},	  \
  /* opc12 r rbase ridx scl2 disps22 */						  \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS, {{regr,16}, {rindex_disps22,0}}},	  \
  /* opc12 r rbase disps12 */							  \
d546 1
a546 1
      {{ui4,16}, {ui4,8}, {disps9,0}}},
d549 1
a549 1
      {{ui4,16}, {ui4,8}, {disps25,0}}},
d568 4
a571 2
  {"ram", 2, 0x7C,  23, NO_TYPE_INS, {{ui5,18}, {ui5,13}, {ui5,8}, {regr,4}, {regr,0}}},
  {"rim", 2, 0x7D,  23, NO_TYPE_INS, {{ui5,18}, {ui5,13}, {ui5,8}, {regr,4}, {regr,0}}},
d656 28
a683 28
  {0,	nullargs,   0},				      /* dummy */
  {4,	arg_ic,	    OPERAND_CST4},		      /* cst4 */
  {16,	arg_ic,	    OPERAND_SIGNED},		      /* i16 */
  {32,	arg_ic,	    OPERAND_SIGNED},		      /* i32 */
  {3,	arg_ic,	    OPERAND_UNSIGNED},		      /* ui3 */
  {4,	arg_ic,	    OPERAND_UNSIGNED},		      /* ui4 */
  {5,	arg_ic,	    OPERAND_UNSIGNED},		      /* ui5 */
  {16,	arg_ic,	    OPERAND_UNSIGNED},		      /* ui16 */
  {8,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT},      /* disps9 */
  {16,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT},      /* disps17 */
  {24,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT},      /* disps25 */
  {32,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT},      /* disps32 */
  {4,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT_DEC},  /* dispu5 */
  {8,	arg_c,	    OPERAND_EVEN|OPERAND_SHIFT|OPERAND_ESC}, /* dispe9 */
  {16,	arg_c,	    0},				      /* abs16 */
  {32,	arg_c,	    0},				      /* abs32 */
  {4,	arg_rbase,  0},				      /* rbase */
  {4,	arg_cr,	    OPERAND_CST4},		      /* rbase_cst4 */
  {12,	arg_cr,	    0},				      /* rbase_disps12 */
  {16,	arg_cr,	    0},				      /* rbase_disps16 */
  {28,	arg_cr,	    0},				      /* rbase_disps28 */
  {32,	arg_cr,	    0},				      /* rbase_disps32 */
  {6,	arg_idxr,   0},				      /* rindex_disps6 */
  {22,  arg_idxr,   0},				      /* rindex_disps22 */
  {4,	arg_r,	    0},				      /* regr */
  {8,	arg_r,	    0},				      /* regr8 */
  {4,	arg_copr,   0},				      /* copregr */
  {4,	arg_copsr,  0}				      /* copsregr */
d695 9
a703 2
/* cst4 operand mapping.  */
const cst4_entry cst4_map[] =
d705 1
a705 2
  {0,0}, {1,1}, {2,2}, {3,3}, {4,4}, {5,-4}, {6,-1},
  {7,7}, {8,8}, {9,16}, {10,32}, {11,20}, {12,12}, {13,48}
d709 6
@


1.7
log
@2004-10-27  Tomer Levi  <Tomer.Levi@@nsc.com>

* crx-opc.c (REV_COP_INST): New macro, reverse operand order of COP_INST macro.
@
text
@d674 2
a675 2
  {6,	arg_icr,    0},				      /* rindex_disps6 */
  {22,  arg_icr,    0},				      /* rindex_disps22 */
@


1.6
log
@* crx-opc.c (crx_instruction): Update data structure according to the rearrangement done in CRX opcode header file.
(crx_regtab):  Likewise.
(crx_optab):  Likewise.
(crx_instruction): Reorder load/stor instructions, remove unsupported formats.
support new Co-Processor instruction 'cpi'.
@
text
@d516 13
a528 9

  COP_INST ("mtcr",   0, COP_REG_INS,	regr,	  copregr),
  COP_INST ("mfcr",   1, COP_REG_INS,	copregr,  regr),
  COP_INST ("mtcsr",  2, COPS_REG_INS,	regr,	  copsregr),
  COP_INST ("mfcsr",  3, COPS_REG_INS,	copsregr, regr),
  COP_INST ("ldcr",   4, COP_REG_INS,	regr,	  copregr),
  COP_INST ("stcr",   5, COP_REG_INS,	copregr,  regr),
  COP_INST ("ldcsr",  6, COPS_REG_INS,	regr,	  copsregr),
  COP_INST ("stcsr",  7, COPS_REG_INS,	copsregr, regr),
@


1.5
log
@2004-10-21  Tomer Levi  <Tomer.Levi@@nsc.com>

	* crx-opc.c (crx_instruction): Replace i3, i4, i5 with us3, us4, us5 (respectively).
	Remove unsupported 'popa' instruction.
	Reverse operands order in store co-processor instructions.
@
text
@d31 5
a35 5
  /* opc8 cst4 r */							   \
  {NAME, 1, OPC,  24, ARITH_BYTE_INS, {{cst4,20}, {regr,16}}},		   \
  /* opc8 i16 r */							   \
  {NAME, 2, (OPC<<4)+0xE, 20, ARITH_BYTE_INS, {{i16,0},	{regr,16}}},	   \
  /* opc8 r r */							   \
d64 7
a70 7
  /* opc8 cst4 r */						      \
  {NAME, 1, OPC,  24, ARITH_INS, {{cst4,20}, {regr,16}}},	      \
  /* opc8 i16 r */						      \
  {NAME, 2, (OPC<<4)+0xE, 20, ARITH_INS, {{i16,0},   {regr,16}}},     \
  /* opc8 i32 r */						      \
  {NAME, 3, (OPC<<4)+0xF, 20, ARITH_INS, {{i32,0},   {regr,16}}},     \
  /* opc8 r r */						      \
d87 5
a91 5
  /* OPRD=us3 -->> opc9 us3 r */				      \
  /* OPRD=us4 -->> opc8 us4 r */				      \
  /* OPRD=us5 -->> opc7 us5 r */				      \
  {NAME, 1, OPC1, SHIFT1, SHIFT_INS, {{OPRD,20}, {regr,16}}},	      \
  /* opc8 r r */						      \
d94 11
a104 11
  SHIFT_INST ("sllb", us3, 0x1F8, 23, 0x4D),
  SHIFT_INST ("srlb", us3, 0x1F9, 23, 0x4E),
  SHIFT_INST ("srab", us3, 0x1FA, 23, 0x4F),

  SHIFT_INST ("sllw", us4, 0xB6,  24, 0x5D),
  SHIFT_INST ("srlw", us4, 0xB7,  24, 0x5E),
  SHIFT_INST ("sraw", us4, 0xB8,  24, 0x5F),

  SHIFT_INST ("slld", us5, 0x78,  25, 0x6D),
  SHIFT_INST ("srld", us5, 0x79,  25, 0x6E),
  SHIFT_INST ("srad", us5, 0x7A,  25, 0x6F),
d108 6
a113 6
  /* opc4 c4 dispe9 */						    \
  {NAME,  1, OPC, 24, BRANCH_INS | RELAXABLE, {{d9,16}}},	    \
  /* opc4 c4 disps17 */						    \
  {NAME,  2, (OPC<<8)+0x7E, 16,	BRANCH_INS | RELAXABLE, {{d17,0}}}, \
  /* opc4 c4 disps33 */						    \
  {NAME,  3, (OPC<<8)+0x7F, 16,	BRANCH_INS | RELAXABLE, {{d33,0}}}
d134 1
a134 1
  {NAME,  1, OPC, 24, BRANCH_NEQ_INS, {{regr,16}, {d5,20}}}
d145 1
a145 1
  /* opc16 */				\
d157 12
a168 8
  /* opc12 r r c4 disps9 */										\
  {NAME, 2, ((0x300+OPC1)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, {{regr,16}, {regr,12}, {d9,0}}},  \
  /* opc12 r r c4 disps25 */										\
  {NAME, 3, ((0x310+OPC1)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, {{regr,16}, {regr,12}, {d25,0}}}, \
  /* opc12 i4cst4 r c4 disps9 */									\
  {NAME, 2, ((0x300+OPC2)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, {{cst4,16}, {regr,12}, {d9,0}}},  \
  /* opc12 i4cst4 r c4 disps25 */									\
  {NAME, 3, ((0x310+OPC2)<<12)+C4,  8, CMPBR_INS | FMT_3 | RELAXABLE, {{cst4,16}, {regr,12}, {d25,0}}}
d205 7
a211 2
  /* opc8 c4 r */			  \
  {NAME,  1, OPC, 20, 0, {{regr,16}}}
d248 2
a249 2
  /* opc24 r r  OR  opc20 c4 r r */			      \
  {NAME,  2, 0x300800+OPC,  8, 0, {{regr,4}, {regr,0}}}
d348 24
a371 20
  /* opc12 r abs16 */									 \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS | REVERSE_MATCH, {{abs16,0}, {regr,16}}},	 \
  /* opc12 r abs32 */									 \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS | REVERSE_MATCH, {{abs32,0}, {regr,16}}},	 \
  /* opc4 r c4 rbase */									 \
  {NAME,  1, ((0x8+OPC2)<<8),  20, LD_STOR_INS | DISP | FMT_1 | REVERSE_MATCH, {{rbase,20}, {regr,24}}},\
  /* opc4 r rbase dispu[bwd]4 */							 \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP | REVERSE_MATCH, {{rbase_cst4,16}, {regr,24}}},		 \
  /* opc4 r rbase disps16 */								 \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE,  20, LD_STOR_INS | DISP | FMT_1 | REVERSE_MATCH, {{rbase_dispu16,16}, {regr,24}}}, \
  /* opc4 r rbase disps32 */								 \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1 | REVERSE_MATCH, {{rbase_dispu32,16}, {regr,24}}}, \
  /* opc12 r rbase */									 \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC | REVERSE_MATCH, {{rbase,12}, {regr,16}}},		 \
  /* opc12 r rbase disps12 */								 \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC | REVERSE_MATCH, {{rbase_dispu12,12}, {regr,16}}},	 \
  /* opc12 r rbase ridx scl2 disps6 */							 \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH, {{rbase_ridx_scl2_dispu6,0}, {regr,16}}},	 \
  /* opc12 r rbase ridx scl2 disps22 */							 \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS | REVERSE_MATCH, {{rbase_ridx_scl2_dispu22,0}, {regr,16}}}
d379 18
a396 20
  /* opc12 r abs16 */									 \
  {NAME,  2, 0x320+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs16,0}}},			 \
  /* opc12 r abs32 */									 \
  {NAME,  3, 0x330+OPC1,  20, LD_STOR_INS, {{regr,16}, {abs32,0}}},			 \
  /* opc4 r c4 rbase */									 \
  {NAME,  1, ((0x8+OPC2)<<8),  20, LD_STOR_INS | DISP | FMT_1, {{regr,24}, {rbase,20}}},\
  /* opc4 r rbase dispu[bwd]4 */							 \
  {NAME,  1, 0x8+OPC2,  28, LD_STOR_INS | DISP, {{regr,24}, {rbase_cst4,16}}},		 \
  /* opc4 r rbase disps16 */								 \
  {NAME,  2, ((0x8+OPC2)<<8)+0xE,  20, LD_STOR_INS | DISP | FMT_1, {{regr,24}, {rbase_dispu16,16}}}, \
  /* opc4 r rbase disps32 */								 \
  {NAME,  3, ((0x8+OPC2)<<8)+0xF,  20, LD_STOR_INS | FMT_1, {{regr,24}, {rbase_dispu32,16}}}, \
  /* opc12 r rbase */									 \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC, {{regr,16}, {rbase,12}}},		 \
  /* opc12 r rbase disps12 */								 \
  {NAME,  2, 0x328+OPC1,  20, LD_STOR_INS_INC, {{regr,16}, {rbase_dispu12,12}}},	 \
  /* opc12 r rbase ridx scl2 disps6 */							 \
  {NAME,  2, 0x32C+OPC1,  20, LD_STOR_INS, {{regr,16}, {rbase_ridx_scl2_dispu6,0}}},	 \
  /* opc12 r rbase ridx scl2 disps22 */							 \
  {NAME,  3, 0x33C+OPC1,  20, LD_STOR_INS, {{regr,16}, {rbase_ridx_scl2_dispu22,0}}}
d400 14
a413 18
  /* opc12 us4 abs16 */								 	\
  {NAME,  2, 0x360+OPC,	20, STOR_IMM_INS, {{us4,16}, {abs16,0}}},		 	\
  /* opc12 us4 abs32 */								 	\
  {NAME,  3, 0x370+OPC,	20, STOR_IMM_INS, {{us4,16}, {abs32,0}}},		 	\
  /* opc12 us4 c4 rbase */							 	\
  {NAME,  1, 0x368+OPC,	20, LD_STOR_INS_INC, {{us4,16}, {rbase,12}}},		 	\
  /* opc12 us4 rbase disps12 */							 	\
  {NAME,  2, 0x368+OPC,	20, LD_STOR_INS_INC, {{us4,16}, {rbase_dispu12,12}}},	 	\
  /* opc4 us4 c4 rbase */							 	\
  {NAME,  1, 0x364+OPC,	20, STOR_IMM_INS, {{us4,16}, {rbase,12}}},		 	\
  /* opc12 us4 rbase disps12 */							 	\
  {NAME,  2, 0x364+OPC,	20, STOR_IMM_INS, {{us4,16}, {rbase_dispu12,12}}},	 	\
  /* opc12 us4 rbase disps28 */							 	\
  {NAME,  3, 0x374+OPC,	20, STOR_IMM_INS, {{us4,16}, {rbase_dispu28,12}}},	 	\
  /* opc12 us4 rbase ridx scl2 disps6 */					 	\
  {NAME,  2, 0x36C+OPC,	20, STOR_IMM_INS, {{us4,16}, {rbase_ridx_scl2_dispu6,0}}},	\
  /* opc12 us4 rbase ridx scl2 disps22 */					 	\
  {NAME,  3, 0x37C+OPC,	20, STOR_IMM_INS, {{us4,16}, {rbase_ridx_scl2_dispu22,0}}}
d426 22
a447 22
  /* OP=us3 -->> opc13 us3 */								  \
  /* OP=us4 -->> opc12 us4 */								  \
  /* OP=us5 -->> opc11 us5 */								  \
											  \
  /* opcNN iN abs16 */									  \
  {NAME,  2, OPC1+0*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {abs16,0}}},			  \
  /* opcNN iN abs32 */									  \
  {NAME,  3, OPC1+1*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {abs32,0}}},			  \
  /* opcNN iN rbase */									  \
  {NAME,  1, OPC2,  SHIFT+4,  CSTBIT_INS, {{OP,20}, {rbase,16}}},			  \
  /* opcNN iN rbase disps12 */								  \
  {NAME,  2, OPC1+2*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_dispu12,12}}},		  \
  /* opcNN iN rbase disps28 */								  \
  {NAME,  3, OPC1+3*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_dispu28,12}}},		  \
  /* opcNN iN rbase ridx scl2 disps6 */							  \
  {NAME,  2, OPC1+4*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_ridx_scl2_dispu6,0}}},	  \
  /* opcNN iN rbase ridx scl2 disps22 */						  \
  {NAME,  3, OPC1+5*DIFF, SHIFT, CSTBIT_INS, {{OP,16}, {rbase_ridx_scl2_dispu22,0}}}

  CSTBIT_INST ("cbitb", us3, 0x700, 0x20, 19, 0x1FC),
  CSTBIT_INST ("cbitw", us4, 0x382, 0x10, 20, 0xBD),
  CSTBIT_INST ("cbitd", us5, 0x1C3, 0x8,  21, 0x7B),
d449 1
a449 1
  {"cbitd",   2, 0x18047B,  9, CSTBIT_INS, {{us5,4}, {regr,0}}},
d451 3
a453 3
  CSTBIT_INST ("sbitb", us3, 0x701, 0x20, 19, 0x1FD),
  CSTBIT_INST ("sbitw", us4, 0x383, 0x10, 20, 0xBE),
  CSTBIT_INST ("sbitd", us5, 0x1C4, 0x8,  21, 0x7C),
d455 1
a455 1
  {"sbitd",   2, 0x18047C,  9, CSTBIT_INS, {{us5,4}, {regr,0}}},
d457 3
a459 3
  CSTBIT_INST ("tbitb", us3, 0x702, 0x20, 19, 0x1FE),
  CSTBIT_INST ("tbitw", us4, 0x384, 0x10, 20, 0xBF),
  CSTBIT_INST ("tbitd", us5, 0x1C5, 0x8,  21, 0x7D),
d461 1
a461 1
  {"tbitd",   2, 0x18047D,  9, CSTBIT_INS, {{us5,4}, {regr,0}}},
d464 3
a466 3
#define  REGLIST_INST(NAME, OPC) \
  /* opc12 r mask16 */					  \
  {NAME,  2, OPC, 20, REG_LIST, {{regr,16}, {us16,0}}}
d471 7
a477 7
  REGLIST_INST ("push",	 0x346),
  REG1_INST ("push",	 0xFFB),
  REGLIST_INST ("pushx", 0x347),

  REGLIST_INST ("pop",	 0x324),
  REG1_INST ("pop",	 0xFFC),
  REGLIST_INST ("popx",	 0x327),
d479 2
a480 2
  REGLIST_INST ("popret", 0x326),
  REG1_INST ("popret",    0xFFD),
d482 2
a483 2
  REGLIST_INST ("loadm",  0x324),
  REGLIST_INST ("loadma", 0x325),
d485 2
a486 2
  REGLIST_INST ("storm",  0x344),
  REGLIST_INST ("storma", 0x345),
d490 4
a493 4
  /* opc12 r disps17 */						      \
  {NAME,  2, OPC1,  20, INS_TYPE | RELAXABLE, {{regr,16}, {d17,0}}},  \
  /* opc12 r disps33 */						      \
  {NAME,  3, OPC2,  20, INS_TYPE | RELAXABLE, {{regr,16}, {d33,0}}}
d495 1
a495 1
  BR_INST ("bal",   0x307, 0x317, 0),
d508 5
d514 2
a515 2
  /* opc12 c4 opc8 REG1 REG2 */		       \
  {NAME,  2, 0x301030+OPC,  8, TYPE | FMT_2, {{us4,16}, {REG1,4}, {REG2,0}}}
d528 3
a530 2
  /* opc12 c4 opc12 r mask16 */	      \
  {NAME,  3, 0x3110300+OPC,  4, TYPE | REG_LIST | FMT_5, {{us4,16}, {regr,0}, {us16,0}}}
d538 6
a543 4
  /* opc12 c4 opc4 us4 disps9 */
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4, {{us4,16}, {us4,8}, {d9,0}}},
  /* opc12 c4 opc4 us4 disps25 */
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4, {{us4,16}, {us4,8}, {d25,0}}},
d545 2
a546 1
  {"cpdop",   2, 0x3010B, 12, COP_REG_INS | FMT_4, {{us4,16}, {us4,8}, {regr,4}, {regr,0}}},
d548 2
a549 1
  {"cpdop",   3, 0x3110B, 12, COP_REG_INS | FMT_4, {{us4,16}, {us4,8}, {regr,4}, {regr,0}, {us16,0}}},
d551 1
a551 1
  {"mtpr",    2, 0x3009,  16, 0, {{regr8,8}, {regr8,0}}},
d553 1
a553 1
  {"mfpr",    2, 0x300A,  16, 0, {{regr8,8}, {regr8,0}}},
d556 15
a570 15
  /* opc12 us4 */
  {"excp",    1, 0xFFF,	20, 0, {{us4,16}}},
  /* opc28 us4 */
  {"cinv",    2, 0x3010000, 4,	0, {{us4,0}}},

  /* opc9 us5 us5 us5 r r */
  {"ram",     2, 0x7C,	23, 0, {{us5,18}, {us5,13}, {us5,8}, {regr,4}, {regr,0}}},
  {"rim",     2, 0x7D,	23, 0, {{us5,18}, {us5,13}, {us5,8}, {regr,4}, {regr,0}}},

  /* opc9 us3 r */
  {"rotb",    1, 0x1FB,	23, 0, {{us3,20}, {regr,16}}},
  /* opc8 us4 r */
  {"rotw",    1, 0xB9,	24, 0, {{us4,20}, {regr,16}}},
  /* opc23 us5 r */
  {"rotd",    2, 0x180478,  9, 0, {{us5,4}, {regr,0}}},
d609 10
a618 20
  REG_CFG(hi,    0x10),
  REG_CFG(lo,    0x11),
  REG_CFG(uhi,   0x90),
  REG_CFG(ulo,   0x91),
  REG_CFG(psr,   0x12),
  REG_CFG(cfg,   0x15),
  REG_CFG(cpcfg, 0x16),
  REG_CFG(ccfg,	 0x1b),

/* Build a mptr register.  */
#define REG_MPTR(NAME, N)    REG(NAME, N, CRX_MTPR_REGTYPE)

  REG_MPTR(intbase, 0x13),
  REG_MPTR(isp,     0x14),
  REG_MPTR(cen,     0x17),

/* Build a pc register.  */
#define REG_PC(NAME, N)    REG(NAME, N, CRX_PC_REGTYPE)

  REG_PC(pc,  0x0)
d648 28
a675 30
  {0,	nullargs},  /* dummy */
  {4,	arg_ic},    /* cst4 */
  {8,	arg_c},	    /* disps9 */
  {16,	arg_ic},    /* i16 */
  {32,	arg_ic},    /* i32 */
  {3,	arg_ic},    /* us3 */
  {4,	arg_ic},    /* us4 */
  {5,	arg_ic},    /* us5 */
  {16,	arg_ic},    /* us16 */
  {4,	arg_c},	    /* d5 */
  {8,	arg_c},	    /* d9 */
  {16,	arg_c},	    /* d17 */
  {24,	arg_c},	    /* d25 */
  {32,	arg_c},	    /* d33 */
  {16,	arg_c},	    /* abs16 */
  {32,	arg_c},	    /* abs32 */
  {4,	arg_rbase}, /* rbase */
  {4,	arg_cr},    /* rbase_cst4 */
  {8,	arg_cr},    /* rbase_dispu8 */
  {12,	arg_cr},    /* rbase_dispu12 */
  {16,	arg_cr},    /* rbase_dispu16 */
  {28,	arg_cr},    /* rbase_dispu28 */
  {32,	arg_cr},    /* rbase_dispu32 */
  {6,	arg_icr},   /* rbase_ridx_scl2_dispu6 */
  {22,  arg_icr},   /* rbase_ridx_scl2_dispu22 */
  {4,	arg_r},	    /* regr */
  {8,	arg_r},	    /* regr8 */
  {4,	arg_copr},  /* copregr */
  {8,	arg_copr},  /* copregr8 */
  {4,	arg_copsr}  /* copsregr */
@


1.4
log
@Add support for CRX co-processor opcodes
@
text
@d87 3
a89 3
  /* OPRD=i3 -->> opc9 i3 r */					      \
  /* OPRD=i4 -->> opc8 i4 r */					      \
  /* OPRD=i5 -->> opc7 i5 r */					      \
d94 11
a104 11
  SHIFT_INST ("sllb", i3, 0x1F8, 23, 0x4D),
  SHIFT_INST ("srlb", i3, 0x1F9, 23, 0x4E),
  SHIFT_INST ("srab", i3, 0x1FA, 23, 0x4F),

  SHIFT_INST ("sllw", i4, 0xB6,  24, 0x5D),
  SHIFT_INST ("srlw", i4, 0xB7,  24, 0x5E),
  SHIFT_INST ("sraw", i4, 0xB8,  24, 0x5F),

  SHIFT_INST ("slld", i5, 0x78,  25, 0x6D),
  SHIFT_INST ("srld", i5, 0x79,  25, 0x6E),
  SHIFT_INST ("srad", i5, 0x7A,  25, 0x6F),
d389 18
a406 18
  /* opc12 i4 abs16 */								 \
  {NAME,  2, 0x360+OPC,	20, STOR_IMM_INS, {{i4,16}, {abs16,0}}},		 \
  /* opc12 i4 abs32 */								 \
  {NAME,  3, 0x370+OPC,	20, STOR_IMM_INS, {{i4,16}, {abs32,0}}},		 \
  /* opc12 i4 c4 rbase */							 \
  {NAME,  1, 0x368+OPC,	20, LD_STOR_INS_INC, {{i4,16}, {rbase,12}}},		 \
  /* opc12 i4 rbase disps12 */							 \
  {NAME,  2, 0x368+OPC,	20, LD_STOR_INS_INC, {{i4,16}, {rbase_dispu12,12}}},	 \
  /* opc4 i4 c4 rbase */							 \
  {NAME,  1, 0x364+OPC,	20, STOR_IMM_INS, {{i4,16}, {rbase,12}}},		 \
  /* opc12 i4 rbase disps12 */							 \
  {NAME,  2, 0x364+OPC,	20, STOR_IMM_INS, {{i4,16}, {rbase_dispu12,12}}},	 \
  /* opc12 i4 rbase disps28 */							 \
  {NAME,  3, 0x374+OPC,	20, STOR_IMM_INS, {{i4,16}, {rbase_dispu28,12}}},	 \
  /* opc12 i4 rbase ridx scl2 disps6 */						 \
  {NAME,  2, 0x36C+OPC,	20, STOR_IMM_INS, {{i4,16}, {rbase_ridx_scl2_dispu6,0}}},\
  /* opc12 i4 rbase ridx scl2 disps22 */					 \
  {NAME,  3, 0x37C+OPC,	20, STOR_IMM_INS, {{i4,16}, {rbase_ridx_scl2_dispu22,0}}}
d419 3
a421 3
  /* OP=i3 -->> opc13 i3 */								  \
  /* OP=i4 -->> opc12 i4 */								  \
  /* OP=i5 -->> opc11 i5 */								  \
d438 3
a440 3
  CSTBIT_INST ("cbitb", i3, 0x700, 0x20, 19, 0x1FC),
  CSTBIT_INST ("cbitw", i4, 0x382, 0x10, 20, 0xBD),
  CSTBIT_INST ("cbitd", i5, 0x1C3, 0x8,  21, 0x7B),
d442 1
a442 1
  {"cbitd",   2, 0x18047B,  9, CSTBIT_INS, {{i5,4}, {regr,0}}},
d444 3
a446 3
  CSTBIT_INST ("sbitb", i3, 0x701, 0x20, 19, 0x1FD),
  CSTBIT_INST ("sbitw", i4, 0x383, 0x10, 20, 0xBE),
  CSTBIT_INST ("sbitd", i5, 0x1C4, 0x8,  21, 0x7C),
d448 1
a448 1
  {"sbitd",   2, 0x18047C,  9, CSTBIT_INS, {{i5,4}, {regr,0}}},
d450 3
a452 3
  CSTBIT_INST ("tbitb", i3, 0x702, 0x20, 19, 0x1FE),
  CSTBIT_INST ("tbitw", i4, 0x384, 0x10, 20, 0xBF),
  CSTBIT_INST ("tbitd", i5, 0x1C5, 0x8,  21, 0x7D),
d454 1
a454 1
  {"tbitd",   2, 0x18047D,  9, CSTBIT_INS, {{i5,4}, {regr,0}}},
d459 1
a459 1
  {NAME,  2, OPC, 20, REG_LIST, {{regr,16}, {i16,0}}}
a476 1
  REGLIST_INST ("popa",	  0x325),
d503 1
a503 1
  {NAME,  2, 0x301030+OPC,  8, TYPE | FMT_2, {{i4,16}, {REG1,4}, {REG2,0}}}
d510 1
a510 1
  COP_INST ("stcr",   5, COP_REG_INS,	regr,	  copregr),
d512 1
a512 1
  COP_INST ("stcsr",  7, COPS_REG_INS,	regr,	  copsregr),
d517 1
a517 1
  {NAME,  3, 0x3110300+OPC,  4, TYPE | REG_LIST | FMT_5, {{i4,16}, {regr,0}, {i16,0}}}
d525 4
a528 4
  /* opc12 c4 opc4 i4 disps9 */
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4, {{i4,16}, {i4,8}, {d9,0}}},
  /* opc12 c4 opc4 i4 disps25 */
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4, {{i4,16}, {i4,8}, {d25,0}}},
d530 1
a530 1
  {"cpdop",   2, 0x3010B, 12, COP_REG_INS | FMT_4, {{i4,16}, {i4,8}, {regr,4}, {regr,0}}},
d532 1
a532 1
  {"cpdop",   3, 0x3110B, 12, COP_REG_INS | FMT_4, {{i4,16}, {i4,8}, {regr,4}, {regr,0}, {i16,0}}},
d539 15
a553 15
  /* opc12 i4 */
  {"excp",    1, 0xFFF,	20, 0, {{i4,16}}},
  /* opc28 i4 */
  {"cinv",    2, 0x3010000, 4,	0, {{i4,0}}},

  /* opc9 i5 i5 i5 r r */
  {"ram",     2, 0x7C,	23, 0, {{i5,18}, {i5,13}, {i5,8}, {regr,4}, {regr,0}}},
  {"rim",     2, 0x7D,	23, 0, {{i5,18}, {i5,13}, {i5,8}, {regr,4}, {regr,0}}},

  /* opc9 i3 r */
  {"rotb",    1, 0x1FB,	23, 0, {{i3,20}, {regr,16}}},
  /* opc8 i4 r */
  {"rotw",    1, 0xB9,	24, 0, {{i4,20}, {regr,16}}},
  /* opc23 i5 r */
  {"rotd",    2, 0x180478,  9, 0, {{i5,4}, {regr,0}}},
a643 5
  {3,	arg_ic},    /* i3 */
  {4,	arg_ic},    /* i4 */
  {5,	arg_ic},    /* i5 */
  {8,	arg_ic},    /* i8 */
  {12,	arg_ic},    /* i12 */
d646 4
@


1.3
log
@Add LD and GAS testsuites for CRX port.
Fix several crx bugs.
@
text
@d491 1
a491 1
  /* Decrement and Branch instructions */
d496 1
a496 1
  /* Jump and link instructions */
d501 23
a523 3
  /* opc12 c4 opc12 r mask16 */
  {"loadmcr", 3, 0x3110300, 4,	COP_REG_INS | REG_LIST | FMT_5, {{i4,16}, {regr,0}, {i16,0}}},
  {"stormcr", 3, 0x3110301, 4,	COP_REG_INS | REG_LIST | FMT_5, {{i4,16}, {regr,0}, {i16,0}}},
d525 9
a537 14
  /* opc12 c4 opc8 r copreg */
  {"mtcr",    2, 0x301030,  8, COP_REG_INS | FMT_2, {{i4,16}, {regr,4}, {copregr,0}}},
  /* opc12 c4 opc8 copreg r */
  {"mfcr",    2, 0x301031,  8, COP_REG_INS | FMT_2, {{i4,16}, {copregr,4}, {regr,0}}},
  /* opc12 c4 opc8 r copsreg */
  {"mtcsr",   2, 0x301032,  8, COP_REG_INS | FMT_2, {{i4,16}, {regr,4}, {copsregr,0}}},
  /* opc12 c4 opc8 copsreg r */
  {"mfcsr",   2, 0x301033,  8, COP_REG_INS | FMT_2, {{i4,16}, {copsregr,4}, {regr,0}}},

  /* CO-processor extensions */
  /* opc12 c4 opc4 i4 disps9 */
  {"bcop",    2, 0x30107, 12, COP_BRANCH_INS | FMT_4, {{i4,16}, {i4,8}, {d9,0}}},
  /* opc12 c4 opc4 i4 disps25 */
  {"bcop",    3, 0x31107, 12, COP_BRANCH_INS | FMT_4, {{i4,16}, {i4,8}, {d25,0}}},
d539 1
@


1.3.2.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@@


1.2
log
@Add CRX insns: pushx, popx
Add support to GAS for expressions which are the difference of two symbols
@
text
@d475 1
a475 1
  REGLIST_INST ("loadm", 0x324),
d477 1
a477 1
  REGLIST_INST ("popma", 0x325),
d479 1
a479 1
  REGLIST_INST ("storm", 0x344),
a480 1
  REGLIST_INST ("pushma", 0x345),
d514 1
a514 1
  {"mtcsr",   2, 0x301032,  8, COP_REG_INS | FMT_2, {{i4,16}, {regr,4}, {copregr,0}}},
d516 1
a516 1
  {"mfcsr",   2, 0x301033,  8, COP_REG_INS | FMT_2, {{i4,16}, {copregr,4}, {regr,0}}},
@


1.1
log
@Add new port: crx-elf
@
text
@d360 1
a360 1
  LD_REG_INST ("loadb", 0x0, 0x0,   DISPUB4),
d442 1
a442 1
  {"cbitd",   2, 0x18047B,  9, CSTBIT_INS, {{i5,4},	 {regr,0}}},
d448 1
a448 1
  {"sbitd",   2, 0x18047C,  9, CSTBIT_INS, {{i5,4},	 {regr,0}}},
d454 1
a454 1
  {"tbitd",   2, 0x18047D,  9, CSTBIT_INS, {{i5,4},	 {regr,0}}},
d461 2
a462 2
  REG1_INST ("getrfid",	 0xFF9),
  REG1_INST ("setrfid",   0xFFA),
d466 1
d470 1
d475 1
a475 1
  REGLIST_INST ("loadm",	 0x324),
d477 1
a477 1
  REGLIST_INST ("popma",	 0x325),
d479 1
a479 1
  REGLIST_INST ("storm",	 0x344),
d565 1
a565 1
/* Build a user register ur<N>.  */
d612 1
a612 1
/* Build a Coprocessor Special register c<N>.  */
@

