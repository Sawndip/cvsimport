head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	sid-snapshot-20131001:1.6
	binutils-2_24-branch:1.6.0.2
	binutils-2_24-branchpoint:1.6
	sid-snapshot-20130901:1.6
	gdb_7_6_1-2013-08-30-release:1.4
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	gdb_7_6-2013-04-26-release:1.4
	sid-snapshot-20130401:1.4
	gdb_7_6-branch:1.4.0.2
	gdb_7_6-2013-03-12-branchpoint:1.4
	sid-snapshot-20130301:1.1
	binutils_latest_snapshot:1.7;
locks; strict;
comment	@ * @;


1.7
date	2013.10.14.00.42.28;	author sandra;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.10.01.04.42;	author sandra;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.24.20.51.58;	author sandra;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.12.02.41.26;	author sandra;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.12.02.20.08;	author sandra;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.12.01.41.41;	author sandra;	state Exp;
branches;
next	1.1;

1.1
date	2013.02.06.23.22.26;	author sandra;	state Exp;
branches;
next	;


desc
@@


1.7
log
@2013-10-13  Sandra Loosemore  <sandra@@codesourcery.com>

	opcodes/
	* nios2-opc.c (nios2_builtin_reg): Use "sstatus" rather than "ba"
	as the primary name of r30.

	gas/
	* config/tc-nios2.c (nios2_consume_arg): Make the "ba" warning
	also test/refer to "sstatus".  Reformat the warning message.

	gas/testsuite/
	* gas/nios2/warn_nobreak.l: Update text of warning messages.
	* gas/nios2/registers.s: Use "sstatus" rather than "ba"
	as the primary name of r30.
	* gas/nios2/registers.d: Likewise.
@
text
@/* Altera Nios II opcode list.
   Copyright (C) 2012, 2013 Free Software Foundation, Inc.
   Contributed by Nigel Gray (ngray@@altera.com).
   Contributed by Mentor Graphics, Inc.

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this file; see the file COPYING.  If not, write to the
   Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include <stdio.h>
#include "opcode/nios2.h"

/* Register string table */

const struct nios2_reg nios2_builtin_regs[] = {
  /* Standard register names.  */
  {"zero", 0},
  {"at", 1},			/* assembler temporary */
  {"r2", 2},
  {"r3", 3},
  {"r4", 4},
  {"r5", 5},
  {"r6", 6},
  {"r7", 7},
  {"r8", 8},
  {"r9", 9},
  {"r10", 10},
  {"r11", 11},
  {"r12", 12},
  {"r13", 13},
  {"r14", 14},
  {"r15", 15},
  {"r16", 16},
  {"r17", 17},
  {"r18", 18},
  {"r19", 19},
  {"r20", 20},
  {"r21", 21},
  {"r22", 22},
  {"r23", 23},
  {"et", 24},
  {"bt", 25},
  {"gp", 26},			/* global pointer */
  {"sp", 27},			/* stack pointer */
  {"fp", 28},			/* frame pointer */
  {"ea", 29},			/* exception return address */
  {"sstatus", 30},		/* saved processor status */
  {"ra", 31},			/* return address */

  /* Alternative names for special registers.  */
  {"r0", 0},
  {"r1", 1},
  {"r24", 24},
  {"r25", 25},
  {"r26", 26},
  {"r27", 27},
  {"r28", 28},
  {"r29", 29},
  {"r30", 30},
  {"ba", 30},			/* breakpoint return address */
  {"r31", 31},

  /* Control register names.  */
  {"status", 0},
  {"estatus", 1},
  {"bstatus", 2},
  {"ienable", 3},
  {"ipending", 4},
  {"cpuid", 5},
  {"ctl6", 6},
  {"exception", 7},
  {"pteaddr", 8},
  {"tlbacc", 9},
  {"tlbmisc", 10},
  {"eccinj", 11},
  {"badaddr", 12},
  {"config", 13},
  {"mpubase", 14},
  {"mpuacc", 15},
  {"ctl16", 16},
  {"ctl17", 17},
  {"ctl18", 18},
  {"ctl19", 19},
  {"ctl20", 20},
  {"ctl21", 21},
  {"ctl22", 22},
  {"ctl23", 23},
  {"ctl24", 24},
  {"ctl25", 25},
  {"ctl26", 26},
  {"ctl27", 27},
  {"ctl28", 28},
  {"ctl29", 29},
  {"ctl30", 30},
  {"ctl31", 31},

  /* Alternative names for special control registers.  */
  {"ctl0", 0},
  {"ctl1", 1},
  {"ctl2", 2},
  {"ctl3", 3},
  {"ctl4", 4},
  {"ctl5", 5},
  {"ctl7", 7},
  {"ctl8", 8},
  {"ctl9", 9},
  {"ctl10", 10},
  {"ctl11", 11},
  {"ctl12", 12},
  {"ctl13", 13},
  {"ctl14", 14},
  {"ctl15", 15},

  /* Coprocessor register names.  */
  {"c0", 0},
  {"c1", 1},
  {"c2", 2},
  {"c3", 3},
  {"c4", 4},
  {"c5", 5},
  {"c6", 6},
  {"c7", 7},
  {"c8", 8},
  {"c9", 9},
  {"c10", 10},
  {"c11", 11},
  {"c12", 12},
  {"c13", 13},
  {"c14", 14},
  {"c15", 15},
  {"c16", 16},
  {"c17", 17},
  {"c18", 18},
  {"c19", 19},
  {"c20", 20},
  {"c21", 21},
  {"c22", 22},
  {"c23", 23},
  {"c24", 24},
  {"c25", 25},
  {"c26", 26},
  {"c27", 27},
  {"c28", 28},
  {"c29", 29},
  {"c30", 30},
  {"c31", 31},
};

#define NIOS2_NUM_REGS \
       ((sizeof nios2_builtin_regs) / (sizeof (nios2_builtin_regs[0])))
const int nios2_num_builtin_regs = NIOS2_NUM_REGS;

/* This is not const in order to allow for dynamic extensions to the
   built-in instruction set.  */
struct nios2_reg *nios2_regs = (struct nios2_reg *) nios2_builtin_regs;
int nios2_num_regs = NIOS2_NUM_REGS;
#undef NIOS2_NUM_REGS

/* This is the opcode table used by the Nios II GNU as, disassembler
   and GDB.  */
const struct nios2_opcode nios2_builtin_opcodes[] =
{
  /* { name, args, args_test, num_args,
       match, mask, pinfo, overflow_msg } */
  {"add", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_ADD, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"addi", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_ADDI, OP_MASK_IOP, NIOS2_INSN_ADDI, signed_immed16_overflow},
  {"subi", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_ADDI, OP_MASK_IOP, NIOS2_INSN_MACRO, signed_immed16_overflow},
  {"and", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_AND, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"andhi", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_ANDHI, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"andi", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_ANDI, OP_MASK_IOP, NIOS2_INSN_ANDI, unsigned_immed16_overflow},
  {"beq", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BEQ, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"bge", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BGE, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"bgeu", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BGEU, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"bgt", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BLT, OP_MASK_IOP, NIOS2_INSN_MACRO|NIOS2_INSN_CBRANCH,
   branch_target_overflow},
  {"bgtu", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BLTU, OP_MASK_IOP, NIOS2_INSN_MACRO|NIOS2_INSN_CBRANCH,
   branch_target_overflow},
  {"ble", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BGE, OP_MASK_IOP, NIOS2_INSN_MACRO|NIOS2_INSN_CBRANCH,
   branch_target_overflow},
  {"bleu", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BGEU, OP_MASK_IOP, NIOS2_INSN_MACRO|NIOS2_INSN_CBRANCH,
   branch_target_overflow},
  {"blt", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BLT, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"bltu", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BLTU, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"bne", "s,t,o", "s,t,o,E", 3,
   OP_MATCH_BNE, OP_MASK_IOP, NIOS2_INSN_CBRANCH, branch_target_overflow},
  {"br", "o", "o,E", 1,
   OP_MATCH_BR, OP_MASK_IOP, NIOS2_INSN_UBRANCH, branch_target_overflow},
  {"break", "b", "b,E", 1,
   OP_MATCH_BREAK, OP_MASK_BREAK, 0, no_overflow},
  {"bret", "", "E", 0,
   OP_MATCH_BRET, OP_MASK, 0, no_overflow},
  {"flushd", "i(s)", "i(s)E", 2,
   OP_MATCH_FLUSHD, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"flushda", "i(s)", "i(s)E", 2,
   OP_MATCH_FLUSHDA, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"flushi", "s", "s,E", 1,
   OP_MATCH_FLUSHI, OP_MASK_FLUSHI, 0, no_overflow},
  {"flushp", "", "E", 0,
   OP_MATCH_FLUSHP, OP_MASK, 0, no_overflow},
  {"initd", "i(s)", "i(s)E", 2,
   OP_MATCH_INITD, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"initda", "i(s)", "i(s)E", 2,
   OP_MATCH_INITDA, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"initi", "s", "s,E", 1,
   OP_MATCH_INITI, OP_MASK_INITI, 0, no_overflow},
  {"call", "m", "m,E", 1,
   OP_MATCH_CALL, OP_MASK_IOP, NIOS2_INSN_CALL, call_target_overflow},
  {"callr", "s", "s,E", 1,
   OP_MATCH_CALLR, OP_MASK_CALLR, 0, no_overflow},
  {"cmpeq", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPEQ, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmpeqi", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPEQI, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"cmpge", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPGE, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmpgei", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPGEI, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"cmpgeu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPGEU, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmpgeui", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_CMPGEUI, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"cmpgt", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPLT, OP_MASK_ROPX | OP_MASK_ROP, NIOS2_INSN_MACRO, no_overflow},
  {"cmpgti", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPGEI, OP_MASK_IOP, NIOS2_INSN_MACRO, signed_immed16_overflow},
  {"cmpgtu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPLTU, OP_MASK_ROPX | OP_MASK_ROP, NIOS2_INSN_MACRO, no_overflow},
  {"cmpgtui", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_CMPGEUI, OP_MASK_IOP, NIOS2_INSN_MACRO, unsigned_immed16_overflow},
  {"cmple", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPGE, OP_MASK_ROPX | OP_MASK_ROP, NIOS2_INSN_MACRO, no_overflow},
  {"cmplei", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPLTI, OP_MASK_IOP, NIOS2_INSN_MACRO, signed_immed16_overflow},
  {"cmpleu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPGEU, OP_MASK_ROPX | OP_MASK_ROP, NIOS2_INSN_MACRO, no_overflow},
  {"cmpleui", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_CMPLTUI, OP_MASK_IOP, NIOS2_INSN_MACRO, unsigned_immed16_overflow},
  {"cmplt", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPLT, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmplti", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPLTI, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"cmpltu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPLTU, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmpltui", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_CMPLTUI, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"cmpne", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_CMPNE, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"cmpnei", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_CMPNEI, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"div", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_DIV, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"divu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_DIVU, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"jmp", "s", "s,E", 1,
   OP_MATCH_JMP, OP_MASK_JMP, 0, no_overflow},
  {"jmpi", "m", "m,E", 1,
   OP_MATCH_JMPI, OP_MASK_IOP, 0, no_overflow},
  {"ldb", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDB, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldbio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDBIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldbu", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDBU, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldbuio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDBUIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldh", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDH, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldhio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDHIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldhu", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDHU, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldhuio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDHUIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldl", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDL, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldw", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDW, OP_MASK_IOP, 0, address_offset_overflow},
  {"ldwio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_LDWIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"mov", "d,s", "d,s,E", 2,
   OP_MATCH_ADD, OP_MASK_RRT|OP_MASK_ROPX|OP_MASK_ROP, NIOS2_INSN_MACRO_MOV,
   no_overflow},
  {"movhi", "t,u", "t,u,E", 2,
   OP_MATCH_ORHI, OP_MASK_IRS|OP_MASK_IOP, NIOS2_INSN_MACRO_MOVI,
   unsigned_immed16_overflow},
  {"movui", "t,u", "t,u,E", 2,
   OP_MATCH_ORI, OP_MASK_IRS|OP_MASK_IOP, NIOS2_INSN_MACRO_MOVI,
   unsigned_immed16_overflow},
  {"movi", "t,i", "t,i,E", 2,
   OP_MATCH_ADDI, OP_MASK_IRS|OP_MASK_IOP, NIOS2_INSN_MACRO_MOVI,
   signed_immed16_overflow},
  /* movia expands to two instructions so there is no mask or match */
  {"movia", "t,o", "t,o,E", 2,
   OP_MATCH_ORHI, OP_MASK_IOP, NIOS2_INSN_MACRO_MOVIA, no_overflow},
  {"mul", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_MUL, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"muli", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_MULI, OP_MASK_IOP, 0, signed_immed16_overflow},
  {"mulxss", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_MULXSS, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"mulxsu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_MULXSU, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"mulxuu", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_MULXUU, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"nextpc", "d", "d,E", 1,
   OP_MATCH_NEXTPC, OP_MASK_NEXTPC, 0, no_overflow},
  {"nop", "", "E", 0,
   OP_MATCH_ADD, OP_MASK, NIOS2_INSN_MACRO_MOV, no_overflow},
  {"nor", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_NOR, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"or", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_OR, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"orhi", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_ORHI, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"ori", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_ORI, OP_MASK_IOP, NIOS2_INSN_ORI, unsigned_immed16_overflow},
  {"rdctl", "d,c", "d,c,E", 2,
   OP_MATCH_RDCTL, OP_MASK_RDCTL, 0, no_overflow},
  {"rdprs", "t,s,i", "t,s,i,E", 3,
   OP_MATCH_RDPRS, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"ret", "", "E", 0,
   OP_MATCH_RET, OP_MASK, 0, no_overflow},
  {"rol", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_ROL, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"roli", "d,s,j", "d,s,j,E", 3,
   OP_MATCH_ROLI, OP_MASK_ROLI, 0, unsigned_immed5_overflow},
  {"ror", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_ROR, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"sll", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_SLL, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"slli", "d,s,j", "d,s,j,E", 3,
   OP_MATCH_SLLI, OP_MASK_SLLI, 0, unsigned_immed5_overflow},
  {"sra", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_SRA, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"srai", "d,s,j", "d,s,j,E", 3,
   OP_MATCH_SRAI, OP_MASK_SRAI, 0, unsigned_immed5_overflow},
  {"srl", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_SRL, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"srli", "d,s,j", "d,s,j,E", 3,
   OP_MATCH_SRLI, OP_MASK_SRLI, 0, unsigned_immed5_overflow},
  {"stb", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STB, OP_MASK_IOP, 0, address_offset_overflow},
  {"stbio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STBIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"stc", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STC, OP_MASK_IOP, 0, address_offset_overflow},
  {"sth", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STH, OP_MASK_IOP, 0, address_offset_overflow},
  {"sthio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STHIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"stw", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STW, OP_MASK_IOP, 0, address_offset_overflow},
  {"stwio", "t,i(s)", "t,i(s)E", 3,
   OP_MATCH_STWIO, OP_MASK_IOP, 0, address_offset_overflow},
  {"sub", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_SUB, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"sync", "", "E", 0,
   OP_MATCH_SYNC, OP_MASK_SYNC, 0, no_overflow},
  {"trap", "b", "b,E", 1,
   OP_MATCH_TRAP, OP_MASK_TRAP, 0, no_overflow},
  {"eret", "", "E", 0,
   OP_MATCH_ERET, OP_MASK, 0, no_overflow},
  {"custom", "l,d,s,t", "l,d,s,t,E", 4,
   OP_MATCH_CUSTOM, OP_MASK_ROP, 0, custom_opcode_overflow},
  {"wrctl", "c,s", "c,s,E", 2,
   OP_MATCH_WRCTL, OP_MASK_WRCTL, 0, no_overflow},
  {"wrprs", "d,s", "d,s,E", 2,
   OP_MATCH_WRPRS, OP_MASK_RRT|OP_MASK_ROPX|OP_MASK_ROP, 0, no_overflow},
  {"xor", "d,s,t", "d,s,t,E", 3,
   OP_MATCH_XOR, OP_MASK_ROPX | OP_MASK_ROP, 0, no_overflow},
  {"xorhi", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_XORHI, OP_MASK_IOP, 0, unsigned_immed16_overflow},
  {"xori", "t,s,u", "t,s,u,E", 3,
   OP_MATCH_XORI, OP_MASK_IOP, NIOS2_INSN_XORI, unsigned_immed16_overflow}
};

#define NIOS2_NUM_OPCODES \
       ((sizeof nios2_builtin_opcodes) / (sizeof (nios2_builtin_opcodes[0])))
const int bfd_nios2_num_builtin_opcodes = NIOS2_NUM_OPCODES;

/* This is not const to allow for dynamic extensions to the
   built-in instruction set. */
struct nios2_opcode *nios2_opcodes =
  (struct nios2_opcode *) nios2_builtin_opcodes;
int bfd_nios2_num_opcodes = NIOS2_NUM_OPCODES;
#undef NIOS2_NUM_OPCODES
@


1.6
log
@2013-06-09  Sandra Loosemore  <sandra@@codesourcery.com>

	opcodes/
	* nios2-opc.c (nios2_builtin_opcodes): Give "trap" a type-"b"
	argument.

	gas/
	* config/tc-nios2.c (nios2_parse_args):  Allow trap argument to
	omitted.

	gas/testsuite/
	* gas/nios2/trap.s: Add additional test cases for optional
	argument.
	* gas/nios2/trap.d: Likewise.
@
text
@d61 1
a61 1
  {"ba", 30},			/* breakpoint return address */
d74 1
a74 1
  {"sstatus", 30},
@


1.5
log
@2013-04-24  Sandra Loosemore  <sandra@@codesourcery.com>

	gas/
	* config/tc-nios2.c (nios2_control_register_arg_p): Rename
	"fstatus" control register to "eccinj".

	opcodes/
	* nios2-opc.c (nios2_builtin_reg): Rename "fstatus" control register
	to "eccinj".
@
text
@d388 1
a388 1
  {"trap", "", "E", 0,
@


1.4
log
@2013-03-11  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	include/
	* opcode/nios2.h (OPX_WRPRS): New define.
	(OP_MATCH_WRPRS): Likewise.

	opcodes/
	* nios2-opc.c (nios2_builtin_opcodes): Add entry for wrprs.

	gas/
	* config/tc-nios2.c (nios2_assemble_args_ds): New function.
	(nios2_arg_info_structs): Add "d,s" and "d,s,E" entries.

	gas/testsuite/
	* gas/nios2/nios2.exp: Run wrprs.
	* gas/nios2/wrprs.d: New file.
	* gas/nios2/wrprs.s: Likewise.
@
text
@d89 1
a89 1
  {"fstatus", 11},
@


1.3
log
@2013-03-11  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	include/
	* opcode/nios2.h (OP_RDPRS): New define.
	(OP_MATCH_RDPRS): Likewise.

	opcodes/
	* nios2-opc.c (nios2_builtin_opcodes): Add entry for rdprs.

	gas/testsuite/
	* gas/nios2/nios2.exp: Run rdprs.
	* gas/nios2/rdprs.d: New file.
	* gas/nios2/rdprs.s: Likewise.
@
text
@d396 2
@


1.2
log
@2013-03-11  Sebastian Huber <sebastian.huber@@embedded-brains.de>

	opcodes/
	* nios2-opc.c (nios2_builtin_regs): Add sstatus alias for ba register.

	gas/testsuite/
	* gas/nios2/nios2.exp: Run registers.
	* gas/nios2/registers.d: New file.
	* gas/nios2/registers.s: Likewise.
@
text
@d348 2
@


1.1
log
@2013-02-06  Sandra Loosemore  <sandra@@codesourcery.com>
            Andrew Jenner <andrew@@codesourcery.com>

	Based on patches from Altera Corporation.

	bfd/
	* Makefile.am (ALL_MACHINES): Add cpu-nios2.lo.
	(ALL_MACHINES_CFILES): Add cpu-nios2.c.
	(BFD_BACKENDS): Add elf32-nios2.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-nios2.c.
	* Makefile.in: Regenerated.
	* configure.in: Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* configure: Regenerated.
	* config.bfd: Add cases for nios2.
	* archures.c (enum bfd_architecture): Add bfd_arch_nios2.
	(bfd_mach_nios2): Define.
	(bfd_nios2_arch): Declare.
	(bfd_archures_list): Add bfd_nios2_arch.
	* targets.c (bfd_elf32_bignios2_vec): Declare.
	(bfd_elf32_littlenios2_vec): Declare.
	(_bfd_target_vector): Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* elf-bfd.h (enum elf_target_id): Add NIOS2_ELF_DATA.
	* reloc.c (enum bfd_reloc_code_real): Add Nios II relocations.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* cpu-nios2.c: New file.
	* elf32-nios2.c: New file.

	opcodes/
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add nios2-dis.c and
	nios2-opc.c.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_nios2_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_nios2): Define.
	(disassembler): Add case for bfd_arch_nios2.
	* nios2-dis.c: New file.
	* nios2-opc.c: New file.

	include/
	* dis-asm.h (print_insn_big_nios2): Declare.
	(print_insn_little_nios2): Declare.

	include/elf
	* nios2.h: New file.

	include/opcode/
	* nios2.h: New file.

	gas/
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-nios2.c.
	(TARGET_CPU_HFILES): Add config/tc-nios2.h.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-linux*.
	* config/obj-elf.c: Conditionally include elf/nios2.h.
	* config/tc-nios2.c: New file.
	* config/tc-nios2.h: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-nios2.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set NIOSII.
	* doc/as.texinfo (Overview): Add Nios II options.
	(Machine Dependencies): Include c-nios2.texi.
	* doc/c-nios2.texi: New file.
	* NEWS: Note Altera Nios II support.

	gas/testsuite/
	* gas/nios2/add.d: New.
	* gas/nios2/add.s: New.
	* gas/nios2/align_fill.d: New.
	* gas/nios2/align_fill.s: New.
	* gas/nios2/align_text.d: New.
	* gas/nios2/align_text.s: New.
	* gas/nios2/and.d: New.
	* gas/nios2/and.s: New.
	* gas/nios2/branch.d: New.
	* gas/nios2/branch.s: New.
	* gas/nios2/break.d: New.
	* gas/nios2/break.s: New.
	* gas/nios2/bret.d: New.
	* gas/nios2/bret.s: New.
	* gas/nios2/cache.d: New.
	* gas/nios2/cache.s: New.
	* gas/nios2/call26.d: New.
	* gas/nios2/call26.s: New.
	* gas/nios2/call.d: New.
	* gas/nios2/call.s: New.
	* gas/nios2/cmp.d: New.
	* gas/nios2/cmp.s: New.
	* gas/nios2/comments.d: New.
	* gas/nios2/comments.s: New.
	* gas/nios2/complex.d: New.
	* gas/nios2/complex.s: New.
	* gas/nios2/ctl.d: New.
	* gas/nios2/ctl.s: New.
	* gas/nios2/custom.d: New.
	* gas/nios2/custom.s: New.
	* gas/nios2/etbt.d: New.
	* gas/nios2/etbt.s: New.
	* gas/nios2/flushda.d: New.
	* gas/nios2/flushda.s: New.
	* gas/nios2/illegal.l: New.
	* gas/nios2/illegal.s: New.
	* gas/nios2/jmp.d: New.
	* gas/nios2/jmp.s: New.
	* gas/nios2/ldb.d: New.
	* gas/nios2/ldb.s: New.
	* gas/nios2/ldh.d: New.
	* gas/nios2/ldh.s: New.
	* gas/nios2/ldw.d: New.
	* gas/nios2/ldw.s: New.
	* gas/nios2/lineseparator.d: New.
	* gas/nios2/lineseparator.s: New.
	* gas/nios2/mov.d: New.
	* gas/nios2/movia.d: New.
	* gas/nios2/movia.s: New.
	* gas/nios2/movi.d: New.
	* gas/nios2/movi.s: New.
	* gas/nios2/mov.s: New.
	* gas/nios2/mul.d: New.
	* gas/nios2/mul.s: New.
	* gas/nios2/nios2.exp: New.
	* gas/nios2/nor.d: New.
	* gas/nios2/nor.s: New.
	* gas/nios2/or.d: New.
	* gas/nios2/or.s: New.
	* gas/nios2/ret.d: New.
	* gas/nios2/ret.s: New.
	* gas/nios2/rol.d: New.
	* gas/nios2/rol.s: New.
	* gas/nios2/rotate.d: New.
	* gas/nios2/rotate.s: New.
	* gas/nios2/stb.d: New.
	* gas/nios2/stb.s: New.
	* gas/nios2/sth.d: New.
	* gas/nios2/sth.s: New.
	* gas/nios2/stw.d: New.
	* gas/nios2/stw.s: New.
	* gas/nios2/sub.d: New.
	* gas/nios2/sub.s: New.
	* gas/nios2/sync.d: New.
	* gas/nios2/sync.s: New.
	* gas/nios2/trap.d: New.
	* gas/nios2/trap.s: New.
	* gas/nios2/tret.d: New.
	* gas/nios2/tret.s: New.
	* gas/nios2/warn_noat.l: New.
	* gas/nios2/warn_noat.s: New.
	* gas/nios2/warn_nobreak.l: New.
	* gas/nios2/warn_nobreak.s: New.
	* gas/nios2/xor.d: New.
	* gas/nios2/xor.s: New.

	ld/
	* Makefile.am (enios2elf.c): New rule.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-*-*.
	* emulparams/nios2elf.sh: New file.
	* NEWS: Note Altera Nios II support.

	ld/testsuite/
	* ld-nios2/emit-relocs-1a.s: New.
	* ld-nios2/emit-relocs-1b.s: New.
	* ld-nios2/emit-relocs-1.d: New.
	* ld-nios2/emit-relocs-1.ld: New.
	* ld-nios2/gprel.d: New.
	* ld-nios2/gprel.s: New.
	* ld-nios2/hilo16.d: New.
	* ld-nios2/hilo16.s: New.
	* ld-nios2/hilo16_symbol.s: New.
	* ld-nios2/imm5.d: New.
	* ld-nios2/imm5.s: New.
	* ld-nios2/imm5_symbol.s: New.
	* ld-nios2/nios2.exp: New.
	* ld-nios2/pcrel16.d: New.
	* ld-nios2/pcrel16_label.s: New.
	* ld-nios2/pcrel16.s: New.
	* ld-nios2/relax_callr.d: New.
	* ld-nios2/relax_callr.ld: New.
	* ld-nios2/relax_callr.s: New.
	* ld-nios2/relax_cjmp.d: New.
	* ld-nios2/relax_cjmp.s: New.
	* ld-nios2/relax_jmp.ld: New.
	* ld-nios2/relax_section.d: New.
	* ld-nios2/relax_section.s: New.
	* ld-nios2/relax_ujmp.d: New.
	* ld-nios2/relax_ujmp.s: New.
	* ld-nios2/reloc.d: New.
	* ld-nios2/reloc.s: New.
	* ld-nios2/reloc_symbol.s: New.
	* ld-nios2/s16.d: New.
	* ld-nios2/s16.s: New.
	* ld-nios2/s16_symbol.s: New.
	* ld-nios2/u16.d: New.
	* ld-nios2/u16.s: New.
	* ld-nios2/u16_symbol.s: New.
	* ld-elf/indirect.exp: Skip on targets that don't support
	-shared -fPIC.
	* ld-elfcomm/elfcomm.exp: Build with -G0 for nios2.
	* ld-plugin/lto.exp: Skip shared library tests on targets that
	don't support them.  Skip execution tests on non-native targets.

	binutils/
	* readelf.c: Include elf/nios2.h.
	(dump_relocations): Add case for EM_ALTERA_NIOS2.
	(get_nios2_dynamic_type): New.
	(get_dynamic_type): Add case for EM_ALTERA_NIOS2.
	(is_32bit_abs_reloc): Fix EM_ALTERA_NIOS2 case.
	(is_16bit_abs_reloc): Likewise.
	(is_none_reloc): Add EM_ALTERA_NIOS2 and EM_NIOS32 cases.
	* NEWS: Note Altera Nios II support.
	* MAINTAINERS: Add Nios II maintainers.
@
text
@d74 1
@

