head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	binutils-2_24-branch:1.3.0.4
	binutils-2_24-branchpoint:1.3
	sid-snapshot-20130901:1.3
	gdb_7_6_1-2013-08-30-release:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	gdb_7_6-2013-04-26-release:1.3
	sid-snapshot-20130401:1.3
	binutils-2_23_2:1.1.2.2
	gdb_7_6-branch:1.3.0.2
	gdb_7_6-2013-03-12-branchpoint:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	binutils-2_23_1:1.1.2.1
	sid-snapshot-20121101:1.1
	binutils-2_23:1.1.2.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	binutils-2_23-branch:1.1.0.2
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@ * @;


1.3
date	2013.02.28.19.18.40;	author yufeng;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.30.15.43.32;	author yufeng;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.13.14.52.47;	author nickc;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.08.16.09.21.54;	author nickc;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2013.02.12.15.31.35;	author yufeng;	state Exp;
branches;
next	;


desc
@@


1.3
log
@include/opcode/

	* aarch64.h (AARCH64_FEATURE_CRC): New macro.

opcodes/

	* aarch64-tbl.h (QL_I3SAMEW, QL_I3WWX): New macros.
	(aarch64_feature_crc): New static.
	(CRC): New macro.
	(aarch64_opcode_table): Add entries for the crc32b, crc32h, crc32w,
	crc32x, crc32cb, crc32ch, crc32cw and crc32cx instructions.
	* aarch64-asm-2.c: Re-generate.
	* aarch64-dis-2.c: Ditto.
	* aarch64-opc-2.c: Ditto.

gas/

	* config/tc-aarch64.c (aarch64_features): Add the 'crc' option.

gas/testsuite/

	* gas/aarch64/crc32.s: New test.
	* gas/aarch64/crc32.d: Ditto.
@
text
@/* This file is automatically generated by aarch64-gen.  Do not edit!  */
/* Copyright 2012, 2013  Free Software Foundation, Inc.
   Contributed by ARM Ltd.

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; see the file COPYING3. If not,
   see <http://www.gnu.org/licenses/>.  */

#include "sysdep.h"
#include "aarch64-asm.h"


const aarch64_opcode *
aarch64_find_real_opcode (const aarch64_opcode *opcode)
{
  /* Use the index as the key to locate the real opcode.  */
  int key = opcode - aarch64_opcode_table;
  int value;
  switch (key)
    {
    case 3:	/* ngc */
      value = 2;	/* --> sbc.  */
      break;
    case 5:	/* ngcs */
      value = 4;	/* --> sbcs.  */
      break;
    case 8:	/* cmn */
      value = 7;	/* --> adds.  */
      break;
    case 11:	/* cmp */
      value = 10;	/* --> subs.  */
      break;
    case 13:	/* mov */
      value = 12;	/* --> add.  */
      break;
    case 15:	/* cmn */
      value = 14;	/* --> adds.  */
      break;
    case 18:	/* cmp */
      value = 17;	/* --> subs.  */
      break;
    case 21:	/* cmn */
      value = 20;	/* --> adds.  */
      break;
    case 23:	/* neg */
      value = 22;	/* --> sub.  */
      break;
    case 26:	/* negs */
    case 25:	/* cmp */
      value = 24;	/* --> subs.  */
      break;
    case 139:	/* mov */
      value = 138;	/* --> umov.  */
      break;
    case 141:	/* mov */
      value = 140;	/* --> ins.  */
      break;
    case 143:	/* mov */
      value = 142;	/* --> ins.  */
      break;
    case 204:	/* mvn */
      value = 203;	/* --> not.  */
      break;
    case 259:	/* mov */
      value = 258;	/* --> orr.  */
      break;
    case 314:	/* sxtl */
      value = 313;	/* --> sshll.  */
      break;
    case 316:	/* sxtl2 */
      value = 315;	/* --> sshll2.  */
      break;
    case 336:	/* uxtl */
      value = 335;	/* --> ushll.  */
      break;
    case 338:	/* uxtl2 */
      value = 337;	/* --> ushll2.  */
      break;
    case 431:	/* mov */
      value = 430;	/* --> dup.  */
      break;
    case 498:	/* sxtw */
    case 497:	/* sxth */
    case 496:	/* sxtb */
    case 499:	/* asr */
    case 495:	/* sbfx */
    case 494:	/* sbfiz */
      value = 493;	/* --> sbfm.  */
      break;
    case 502:	/* bfxil */
    case 501:	/* bfi */
      value = 500;	/* --> bfm.  */
      break;
    case 507:	/* uxth */
    case 506:	/* uxtb */
    case 509:	/* lsr */
    case 508:	/* lsl */
    case 505:	/* ubfx */
    case 504:	/* ubfiz */
      value = 503;	/* --> ubfm.  */
      break;
    case 527:	/* cset */
    case 526:	/* cinc */
      value = 525;	/* --> csinc.  */
      break;
    case 530:	/* csetm */
    case 529:	/* cinv */
      value = 528;	/* --> csinv.  */
      break;
    case 532:	/* cneg */
      value = 531;	/* --> csneg.  */
      break;
    case 557:	/* lsl */
      value = 556;	/* --> lslv.  */
      break;
    case 559:	/* lsr */
      value = 558;	/* --> lsrv.  */
      break;
    case 561:	/* asr */
      value = 560;	/* --> asrv.  */
      break;
    case 563:	/* ror */
      value = 562;	/* --> rorv.  */
      break;
    case 573:	/* mul */
      value = 572;	/* --> madd.  */
      break;
    case 575:	/* mneg */
      value = 574;	/* --> msub.  */
      break;
    case 577:	/* smull */
      value = 576;	/* --> smaddl.  */
      break;
    case 579:	/* smnegl */
      value = 578;	/* --> smsubl.  */
      break;
    case 582:	/* umull */
      value = 581;	/* --> umaddl.  */
      break;
    case 584:	/* umnegl */
      value = 583;	/* --> umsubl.  */
      break;
    case 595:	/* ror */
      value = 594;	/* --> extr.  */
      break;
    case 695:	/* strb */
      value = 693;	/* --> sturb.  */
      break;
    case 696:	/* ldrb */
      value = 694;	/* --> ldurb.  */
      break;
    case 698:	/* ldrsb */
      value = 697;	/* --> ldursb.  */
      break;
    case 701:	/* str */
      value = 699;	/* --> stur.  */
      break;
    case 702:	/* ldr */
      value = 700;	/* --> ldur.  */
      break;
    case 705:	/* strh */
      value = 703;	/* --> sturh.  */
      break;
    case 706:	/* ldrh */
      value = 704;	/* --> ldurh.  */
      break;
    case 708:	/* ldrsh */
      value = 707;	/* --> ldursh.  */
      break;
    case 711:	/* str */
      value = 709;	/* --> stur.  */
      break;
    case 712:	/* ldr */
      value = 710;	/* --> ldur.  */
      break;
    case 714:	/* ldrsw */
      value = 713;	/* --> ldursw.  */
      break;
    case 716:	/* prfm */
      value = 715;	/* --> prfum.  */
      break;
    case 758:	/* bic */
      value = 757;	/* --> and.  */
      break;
    case 760:	/* mov */
      value = 759;	/* --> orr.  */
      break;
    case 763:	/* tst */
      value = 762;	/* --> ands.  */
      break;
    case 768:	/* uxtw */
    case 767:	/* mov */
      value = 766;	/* --> orr.  */
      break;
    case 770:	/* mvn */
      value = 769;	/* --> orn.  */
      break;
    case 774:	/* tst */
      value = 773;	/* --> ands.  */
      break;
    case 777:	/* mov */
      value = 776;	/* --> movn.  */
      break;
    case 779:	/* mov */
      value = 778;	/* --> movz.  */
      break;
    case 790:	/* sevl */
    case 789:	/* sev */
    case 788:	/* wfi */
    case 787:	/* wfe */
    case 786:	/* yield */
    case 785:	/* nop */
      value = 784;	/* --> hint.  */
      break;
    case 799:	/* tlbi */
    case 798:	/* ic */
    case 797:	/* dc */
    case 796:	/* at */
      value = 795;	/* --> sys.  */
      break;
    default: return NULL;
    }

  return aarch64_opcode_table + value;
}

const char*
aarch64_insert_operand (const aarch64_operand *self,
			   const aarch64_opnd_info *info,
			   aarch64_insn *code, const aarch64_inst *inst)
{
  /* Use the index as the key.  */
  int key = self - aarch64_operands;
  switch (key)
    {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 34:
    case 35:
      return aarch64_ins_regno (self, info, code, inst);
    case 11:
      return aarch64_ins_reg_extended (self, info, code, inst);
    case 12:
      return aarch64_ins_reg_shifted (self, info, code, inst);
    case 17:
      return aarch64_ins_ft (self, info, code, inst);
    case 27:
    case 28:
    case 29:
      return aarch64_ins_reglane (self, info, code, inst);
    case 30:
      return aarch64_ins_reglist (self, info, code, inst);
    case 31:
      return aarch64_ins_ldst_reglist (self, info, code, inst);
    case 32:
      return aarch64_ins_ldst_reglist_r (self, info, code, inst);
    case 33:
      return aarch64_ins_ldst_elemlist (self, info, code, inst);
    case 36:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
      return aarch64_ins_imm (self, info, code, inst);
    case 37:
    case 38:
      return aarch64_ins_advsimd_imm_shift (self, info, code, inst);
    case 39:
    case 40:
    case 41:
      return aarch64_ins_advsimd_imm_modified (self, info, code, inst);
    case 58:
      return aarch64_ins_limm (self, info, code, inst);
    case 59:
      return aarch64_ins_aimm (self, info, code, inst);
    case 60:
      return aarch64_ins_imm_half (self, info, code, inst);
    case 61:
      return aarch64_ins_fbits (self, info, code, inst);
    case 63:
      return aarch64_ins_cond (self, info, code, inst);
    case 69:
    case 75:
      return aarch64_ins_addr_simple (self, info, code, inst);
    case 70:
      return aarch64_ins_addr_regoff (self, info, code, inst);
    case 71:
    case 72:
    case 73:
      return aarch64_ins_addr_simm (self, info, code, inst);
    case 74:
      return aarch64_ins_addr_uimm12 (self, info, code, inst);
    case 76:
      return aarch64_ins_simd_addr_post (self, info, code, inst);
    case 77:
      return aarch64_ins_sysreg (self, info, code, inst);
    case 78:
      return aarch64_ins_pstatefield (self, info, code, inst);
    case 79:
    case 80:
    case 81:
    case 82:
      return aarch64_ins_sysins_op (self, info, code, inst);
    case 83:
    case 84:
      return aarch64_ins_barrier (self, info, code, inst);
    case 85:
      return aarch64_ins_prfop (self, info, code, inst);
    default: assert (0); abort ();
    }
}
@


1.2
log
@include/opcode/

2013-01-30  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* aarch64.h (aarch64_op): Add OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2.

opcodes/

2013-01-30  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* aarch64-tbl.h (aarch64_opcode_table): Flag sshll, sshll2, ushll and
	ushll2 with F_HAS_ALIAS.  Add entries for sxtl, sxtl2, uxtl and uxtl2.
	* aarch64-asm.c (convert_xtl_to_shll): New function.
	(convert_to_real): Handle OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2 by
	calling convert_xtl_to_shll.
	* aarch64-dis.c (convert_shll_to_xtl): New function.
	(convert_to_alias): Handle OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2 by
	calling convert_shll_to_xtl.
	* aarch64-gen.c: Update copyright year.
	* aarch64-asm-2.c: Re-generate.
	* aarch64-dis-2.c: Re-generate.
	* aarch64-opc-2.c: Re-generate.

gas/testsuite/

2013-01-30  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* gas/aarch64/alias.s: Add new tests.
	* gas/aarch64/alias.d: Update.
	* gas/aarch64/no-aliases.d: Update.
@
text
@d137 2
a138 2
    case 565:	/* mul */
      value = 564;	/* --> madd.  */
d140 2
a141 2
    case 567:	/* mneg */
      value = 566;	/* --> msub.  */
d143 2
a144 2
    case 569:	/* smull */
      value = 568;	/* --> smaddl.  */
d146 2
a147 2
    case 571:	/* smnegl */
      value = 570;	/* --> smsubl.  */
d149 2
a150 2
    case 574:	/* umull */
      value = 573;	/* --> umaddl.  */
d152 2
a153 2
    case 576:	/* umnegl */
      value = 575;	/* --> umsubl.  */
d155 2
a156 2
    case 587:	/* ror */
      value = 586;	/* --> extr.  */
d158 2
a159 2
    case 687:	/* strb */
      value = 685;	/* --> sturb.  */
d161 2
a162 2
    case 688:	/* ldrb */
      value = 686;	/* --> ldurb.  */
d164 2
a165 2
    case 690:	/* ldrsb */
      value = 689;	/* --> ldursb.  */
d167 2
a168 2
    case 693:	/* str */
      value = 691;	/* --> stur.  */
d170 2
a171 2
    case 694:	/* ldr */
      value = 692;	/* --> ldur.  */
d173 2
a174 2
    case 697:	/* strh */
      value = 695;	/* --> sturh.  */
d176 2
a177 2
    case 698:	/* ldrh */
      value = 696;	/* --> ldurh.  */
d179 2
a180 2
    case 700:	/* ldrsh */
      value = 699;	/* --> ldursh.  */
d182 2
a183 2
    case 703:	/* str */
      value = 701;	/* --> stur.  */
d185 2
a186 2
    case 704:	/* ldr */
      value = 702;	/* --> ldur.  */
d188 2
a189 2
    case 706:	/* ldrsw */
      value = 705;	/* --> ldursw.  */
d191 2
a192 2
    case 708:	/* prfm */
      value = 707;	/* --> prfum.  */
d194 2
a195 2
    case 750:	/* bic */
      value = 749;	/* --> and.  */
d197 2
a198 2
    case 752:	/* mov */
      value = 751;	/* --> orr.  */
d200 2
a201 2
    case 755:	/* tst */
      value = 754;	/* --> ands.  */
d203 3
a205 3
    case 760:	/* uxtw */
    case 759:	/* mov */
      value = 758;	/* --> orr.  */
d207 2
a208 2
    case 762:	/* mvn */
      value = 761;	/* --> orn.  */
d210 2
a211 2
    case 766:	/* tst */
      value = 765;	/* --> ands.  */
d213 2
a214 2
    case 769:	/* mov */
      value = 768;	/* --> movn.  */
d216 2
a217 2
    case 771:	/* mov */
      value = 770;	/* --> movz.  */
d219 7
a225 7
    case 782:	/* sevl */
    case 781:	/* sev */
    case 780:	/* wfi */
    case 779:	/* wfe */
    case 778:	/* yield */
    case 777:	/* nop */
      value = 776;	/* --> hint.  */
d227 5
a231 5
    case 791:	/* tlbi */
    case 790:	/* ic */
    case 789:	/* dc */
    case 788:	/* at */
      value = 787;	/* --> sys.  */
@


1.1
log
@Add support for 64-bit ARM architecture: AArch64
@
text
@d2 1
a2 1
/* Copyright 2012  Free Software Foundation, Inc.
d79 2
a80 2
    case 427:	/* mov */
      value = 426;	/* --> dup.  */
d82 2
a83 7
    case 494:	/* sxtw */
    case 493:	/* sxth */
    case 492:	/* sxtb */
    case 495:	/* asr */
    case 491:	/* sbfx */
    case 490:	/* sbfiz */
      value = 489;	/* --> sbfm.  */
d85 2
a86 3
    case 498:	/* bfxil */
    case 497:	/* bfi */
      value = 496;	/* --> bfm.  */
d88 2
a89 7
    case 503:	/* uxth */
    case 502:	/* uxtb */
    case 505:	/* lsr */
    case 504:	/* lsl */
    case 501:	/* ubfx */
    case 500:	/* ubfiz */
      value = 499;	/* --> ubfm.  */
d91 2
a92 3
    case 523:	/* cset */
    case 522:	/* cinc */
      value = 521;	/* --> csinc.  */
d94 7
a100 3
    case 526:	/* csetm */
    case 525:	/* cinv */
      value = 524;	/* --> csinv.  */
d102 3
a104 2
    case 528:	/* cneg */
      value = 527;	/* --> csneg.  */
d106 7
a112 2
    case 553:	/* lsl */
      value = 552;	/* --> lslv.  */
d114 3
a116 2
    case 555:	/* lsr */
      value = 554;	/* --> lsrv.  */
d118 3
a120 2
    case 557:	/* asr */
      value = 556;	/* --> asrv.  */
d122 2
a123 2
    case 559:	/* ror */
      value = 558;	/* --> rorv.  */
d125 2
a126 2
    case 561:	/* mul */
      value = 560;	/* --> madd.  */
d128 2
a129 2
    case 563:	/* mneg */
      value = 562;	/* --> msub.  */
d131 2
a132 2
    case 565:	/* smull */
      value = 564;	/* --> smaddl.  */
d134 2
a135 2
    case 567:	/* smnegl */
      value = 566;	/* --> smsubl.  */
d137 2
a138 2
    case 570:	/* umull */
      value = 569;	/* --> umaddl.  */
d140 2
a141 2
    case 572:	/* umnegl */
      value = 571;	/* --> umsubl.  */
d143 2
a144 2
    case 583:	/* ror */
      value = 582;	/* --> extr.  */
d146 2
a147 2
    case 683:	/* strb */
      value = 681;	/* --> sturb.  */
d149 2
a150 2
    case 684:	/* ldrb */
      value = 682;	/* --> ldurb.  */
d152 2
a153 2
    case 686:	/* ldrsb */
      value = 685;	/* --> ldursb.  */
d155 2
a156 2
    case 689:	/* str */
      value = 687;	/* --> stur.  */
d158 2
a159 2
    case 690:	/* ldr */
      value = 688;	/* --> ldur.  */
d161 2
a162 2
    case 693:	/* strh */
      value = 691;	/* --> sturh.  */
d164 2
a165 2
    case 694:	/* ldrh */
      value = 692;	/* --> ldurh.  */
d167 2
a168 2
    case 696:	/* ldrsh */
      value = 695;	/* --> ldursh.  */
d170 2
a171 2
    case 699:	/* str */
      value = 697;	/* --> stur.  */
d173 2
a174 2
    case 700:	/* ldr */
      value = 698;	/* --> ldur.  */
d176 2
a177 2
    case 702:	/* ldrsw */
      value = 701;	/* --> ldursw.  */
d179 2
a180 2
    case 704:	/* prfm */
      value = 703;	/* --> prfum.  */
d182 2
a183 2
    case 746:	/* bic */
      value = 745;	/* --> and.  */
d185 2
a186 2
    case 748:	/* mov */
      value = 747;	/* --> orr.  */
d188 2
a189 2
    case 751:	/* tst */
      value = 750;	/* --> ands.  */
d191 2
a192 3
    case 756:	/* uxtw */
    case 755:	/* mov */
      value = 754;	/* --> orr.  */
d194 2
a195 2
    case 758:	/* mvn */
      value = 757;	/* --> orn.  */
d197 2
a198 2
    case 762:	/* tst */
      value = 761;	/* --> ands.  */
d200 2
a201 2
    case 765:	/* mov */
      value = 764;	/* --> movn.  */
d203 3
a205 2
    case 767:	/* mov */
      value = 766;	/* --> movz.  */
d207 2
a208 7
    case 778:	/* sevl */
    case 777:	/* sev */
    case 776:	/* wfi */
    case 775:	/* wfe */
    case 774:	/* yield */
    case 773:	/* nop */
      value = 772;	/* --> hint.  */
d210 22
a231 5
    case 787:	/* tlbi */
    case 786:	/* ic */
    case 785:	/* dc */
    case 784:	/* at */
      value = 783;	/* --> sys.  */
@


1.1.2.1
log
@Add support for 64-bit ARM architecture: aarch64
@
text
@@


1.1.2.2
log
@include/opcode/

2013-02-12  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* aarch64.h (aarch64_op): Add OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2.

opcodes/

2013-02-12  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* aarch64-tbl.h (aarch64_opcode_table): Flag sshll, sshll2, ushll and
	ushll2 with F_HAS_ALIAS.  Add entries for sxtl, sxtl2, uxtl and uxtl2.
	* aarch64-asm.c (convert_xtl_to_shll): New function.
	(convert_to_real): Handle OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2 by
	calling convert_xtl_to_shll.
	* aarch64-dis.c (convert_shll_to_xtl): New function.
	(convert_to_alias): Handle OP_SXTL, OP_SXTL2, OP_UXTL and OP_UXTL2 by
	calling convert_shll_to_xtl.
	* aarch64-gen.c: Update copyright year.
	* aarch64-asm-2.c: Re-generate.
	* aarch64-dis-2.c: Re-generate.
	* aarch64-opc-2.c: Re-generate.

gas/testsuite/

2013-02-12  Yufeng Zhang  <yufeng.zhang@@arm.com>

	* gas/aarch64/alias.s: Add new tests.
	* gas/aarch64/alias.d: Update.
	* gas/aarch64/no-aliases.d: Update.
@
text
@d2 1
a2 1
/* Copyright 2012, 2013  Free Software Foundation, Inc.
d79 2
a80 2
    case 314:	/* sxtl */
      value = 313;	/* --> sshll.  */
d82 7
a88 2
    case 316:	/* sxtl2 */
      value = 315;	/* --> sshll2.  */
d90 3
a92 2
    case 336:	/* uxtl */
      value = 335;	/* --> ushll.  */
d94 7
a100 2
    case 338:	/* uxtl2 */
      value = 337;	/* --> ushll2.  */
d102 3
a104 2
    case 431:	/* mov */
      value = 430;	/* --> dup.  */
d106 3
a108 7
    case 498:	/* sxtw */
    case 497:	/* sxth */
    case 496:	/* sxtb */
    case 499:	/* asr */
    case 495:	/* sbfx */
    case 494:	/* sbfiz */
      value = 493;	/* --> sbfm.  */
d110 2
a111 3
    case 502:	/* bfxil */
    case 501:	/* bfi */
      value = 500;	/* --> bfm.  */
d113 2
a114 7
    case 507:	/* uxth */
    case 506:	/* uxtb */
    case 509:	/* lsr */
    case 508:	/* lsl */
    case 505:	/* ubfx */
    case 504:	/* ubfiz */
      value = 503;	/* --> ubfm.  */
d116 2
a117 3
    case 527:	/* cset */
    case 526:	/* cinc */
      value = 525;	/* --> csinc.  */
d119 2
a120 3
    case 530:	/* csetm */
    case 529:	/* cinv */
      value = 528;	/* --> csinv.  */
d122 2
a123 2
    case 532:	/* cneg */
      value = 531;	/* --> csneg.  */
d125 2
a126 2
    case 557:	/* lsl */
      value = 556;	/* --> lslv.  */
d128 2
a129 2
    case 559:	/* lsr */
      value = 558;	/* --> lsrv.  */
d131 2
a132 2
    case 561:	/* asr */
      value = 560;	/* --> asrv.  */
d134 2
a135 2
    case 563:	/* ror */
      value = 562;	/* --> rorv.  */
d137 2
a138 2
    case 565:	/* mul */
      value = 564;	/* --> madd.  */
d140 2
a141 2
    case 567:	/* mneg */
      value = 566;	/* --> msub.  */
d143 2
a144 2
    case 569:	/* smull */
      value = 568;	/* --> smaddl.  */
d146 2
a147 2
    case 571:	/* smnegl */
      value = 570;	/* --> smsubl.  */
d149 2
a150 2
    case 574:	/* umull */
      value = 573;	/* --> umaddl.  */
d152 2
a153 2
    case 576:	/* umnegl */
      value = 575;	/* --> umsubl.  */
d155 2
a156 2
    case 587:	/* ror */
      value = 586;	/* --> extr.  */
d158 2
a159 2
    case 687:	/* strb */
      value = 685;	/* --> sturb.  */
d161 2
a162 2
    case 688:	/* ldrb */
      value = 686;	/* --> ldurb.  */
d164 2
a165 2
    case 690:	/* ldrsb */
      value = 689;	/* --> ldursb.  */
d167 2
a168 2
    case 693:	/* str */
      value = 691;	/* --> stur.  */
d170 2
a171 2
    case 694:	/* ldr */
      value = 692;	/* --> ldur.  */
d173 2
a174 2
    case 697:	/* strh */
      value = 695;	/* --> sturh.  */
d176 2
a177 2
    case 698:	/* ldrh */
      value = 696;	/* --> ldurh.  */
d179 2
a180 2
    case 700:	/* ldrsh */
      value = 699;	/* --> ldursh.  */
d182 2
a183 2
    case 703:	/* str */
      value = 701;	/* --> stur.  */
d185 2
a186 2
    case 704:	/* ldr */
      value = 702;	/* --> ldur.  */
d188 2
a189 2
    case 706:	/* ldrsw */
      value = 705;	/* --> ldursw.  */
d191 3
a193 2
    case 708:	/* prfm */
      value = 707;	/* --> prfum.  */
d195 2
a196 2
    case 750:	/* bic */
      value = 749;	/* --> and.  */
d198 2
a199 2
    case 752:	/* mov */
      value = 751;	/* --> orr.  */
d201 2
a202 2
    case 755:	/* tst */
      value = 754;	/* --> ands.  */
d204 2
a205 3
    case 760:	/* uxtw */
    case 759:	/* mov */
      value = 758;	/* --> orr.  */
d207 7
a213 2
    case 762:	/* mvn */
      value = 761;	/* --> orn.  */
d215 5
a219 22
    case 766:	/* tst */
      value = 765;	/* --> ands.  */
      break;
    case 769:	/* mov */
      value = 768;	/* --> movn.  */
      break;
    case 771:	/* mov */
      value = 770;	/* --> movz.  */
      break;
    case 782:	/* sevl */
    case 781:	/* sev */
    case 780:	/* wfi */
    case 779:	/* wfe */
    case 778:	/* yield */
    case 777:	/* nop */
      value = 776;	/* --> hint.  */
      break;
    case 791:	/* tlbi */
    case 790:	/* ic */
    case 789:	/* dc */
    case 788:	/* at */
      value = 787;	/* --> sys.  */
@


