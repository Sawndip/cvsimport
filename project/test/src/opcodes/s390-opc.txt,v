head	1.43;
access;
symbols
	sid-snapshot-20180601:1.43
	sid-snapshot-20180501:1.43
	sid-snapshot-20180401:1.43
	sid-snapshot-20180301:1.43
	sid-snapshot-20180201:1.43
	sid-snapshot-20180101:1.43
	sid-snapshot-20171201:1.43
	sid-snapshot-20171101:1.43
	sid-snapshot-20171001:1.43
	sid-snapshot-20170901:1.43
	sid-snapshot-20170801:1.43
	sid-snapshot-20170701:1.43
	sid-snapshot-20170601:1.43
	sid-snapshot-20170501:1.43
	sid-snapshot-20170401:1.43
	sid-snapshot-20170301:1.43
	sid-snapshot-20170201:1.43
	sid-snapshot-20170101:1.43
	sid-snapshot-20161201:1.43
	sid-snapshot-20161101:1.43
	sid-snapshot-20160901:1.43
	sid-snapshot-20160801:1.43
	sid-snapshot-20160701:1.43
	sid-snapshot-20160601:1.43
	sid-snapshot-20160501:1.43
	sid-snapshot-20160401:1.43
	sid-snapshot-20160301:1.43
	sid-snapshot-20160201:1.43
	sid-snapshot-20160101:1.43
	sid-snapshot-20151201:1.43
	sid-snapshot-20151101:1.43
	sid-snapshot-20151001:1.43
	sid-snapshot-20150901:1.43
	sid-snapshot-20150801:1.43
	sid-snapshot-20150701:1.43
	sid-snapshot-20150601:1.43
	sid-snapshot-20150501:1.43
	sid-snapshot-20150401:1.43
	sid-snapshot-20150301:1.43
	sid-snapshot-20150201:1.43
	sid-snapshot-20150101:1.43
	sid-snapshot-20141201:1.43
	sid-snapshot-20141101:1.43
	sid-snapshot-20141001:1.43
	sid-snapshot-20140901:1.43
	sid-snapshot-20140801:1.43
	sid-snapshot-20140701:1.43
	sid-snapshot-20140601:1.43
	sid-snapshot-20140501:1.43
	sid-snapshot-20140401:1.43
	sid-snapshot-20140301:1.43
	sid-snapshot-20140201:1.43
	sid-snapshot-20140101:1.43
	sid-snapshot-20131201:1.43
	sid-snapshot-20131101:1.43
	sid-snapshot-20131001:1.43
	binutils-2_24-branch:1.43.0.2
	binutils-2_24-branchpoint:1.43
	binutils-2_21_1:1.32
	sid-snapshot-20130901:1.41
	gdb_7_6_1-2013-08-30-release:1.39
	sid-snapshot-20130801:1.41
	sid-snapshot-20130701:1.40
	sid-snapshot-20130601:1.40
	sid-snapshot-20130501:1.39
	gdb_7_6-2013-04-26-release:1.39
	sid-snapshot-20130401:1.39
	binutils-2_23_2:1.36
	gdb_7_6-branch:1.39.0.2
	gdb_7_6-2013-03-12-branchpoint:1.39
	sid-snapshot-20130301:1.39
	sid-snapshot-20130201:1.39
	sid-snapshot-20130101:1.39
	sid-snapshot-20121201:1.39
	gdb_7_5_1-2012-11-29-release:1.36
	binutils-2_23_1:1.36
	sid-snapshot-20121101:1.38
	binutils-2_23:1.36
	sid-snapshot-20121001:1.36
	sid-snapshot-20120901:1.36
	gdb_7_5-2012-08-17-release:1.36
	sid-snapshot-20120801:1.36
	binutils-2_23-branch:1.36.0.4
	binutils-2_23-branchpoint:1.36
	gdb_7_5-branch:1.36.0.2
	gdb_7_5-2012-07-18-branchpoint:1.36
	sid-snapshot-20120701:1.36
	sid-snapshot-20120601:1.36
	sid-snapshot-20120501:1.36
	binutils-2_22_branch:1.34.0.4
	gdb_7_4_1-2012-04-26-release:1.35
	sid-snapshot-20120401:1.36
	sid-snapshot-20120301:1.35
	sid-snapshot-20120201:1.35
	gdb_7_4-2012-01-24-release:1.35
	sid-snapshot-20120101:1.35
	gdb_7_4-branch:1.35.0.2
	gdb_7_4-2011-12-13-branchpoint:1.35
	sid-snapshot-20111201:1.35
	binutils-2_22:1.34
	sid-snapshot-20111101:1.35
	sid-snapshot-20111001:1.34
	binutils-2_22-branch:1.34.0.2
	binutils-2_22-branchpoint:1.34
	gdb_7_3_1-2011-09-04-release:1.32
	sid-snapshot-20110901:1.34
	sid-snapshot-20110801:1.34
	gdb_7_3-2011-07-26-release:1.32
	sid-snapshot-20110701:1.34
	sid-snapshot-20110601:1.34
	sid-snapshot-20110501:1.32
	gdb_7_3-branch:1.32.0.4
	gdb_7_3-2011-04-01-branchpoint:1.32
	sid-snapshot-20110401:1.32
	sid-snapshot-20110301:1.32
	sid-snapshot-20110201:1.32
	sid-snapshot-20110101:1.32
	binutils-2_21:1.32
	sid-snapshot-20101201:1.32
	binutils-2_21-branch:1.32.0.2
	binutils-2_21-branchpoint:1.32
	sid-snapshot-20101101:1.32
	sid-snapshot-20101001:1.30
	binutils-2_20_1:1.28
	gdb_7_2-2010-09-02-release:1.28
	sid-snapshot-20100901:1.28
	sid-snapshot-20100801:1.28
	gdb_7_2-branch:1.28.0.8
	gdb_7_2-2010-07-07-branchpoint:1.28
	sid-snapshot-20100701:1.28
	sid-snapshot-20100601:1.28
	sid-snapshot-20100501:1.28
	sid-snapshot-20100401:1.28
	gdb_7_1-2010-03-18-release:1.28
	sid-snapshot-20100301:1.28
	gdb_7_1-branch:1.28.0.6
	gdb_7_1-2010-02-18-branchpoint:1.28
	sid-snapshot-20100201:1.28
	sid-snapshot-20100101:1.28
	gdb_7_0_1-2009-12-22-release:1.28
	sid-snapshot-20091201:1.28
	sid-snapshot-20091101:1.28
	binutils-2_20:1.28
	gdb_7_0-2009-10-06-release:1.28
	sid-snapshot-20091001:1.28
	gdb_7_0-branch:1.28.0.4
	gdb_7_0-2009-09-16-branchpoint:1.28
	arc-sim-20090309:1.19
	binutils-arc-20081103-branch:1.25.0.10
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.28.0.2
	binutils-2_20-branchpoint:1.28
	sid-snapshot-20090901:1.27
	sid-snapshot-20090801:1.27
	msnyder-checkpoint-072509-branch:1.27.0.4
	msnyder-checkpoint-072509-branchpoint:1.27
	sid-snapshot-20090701:1.27
	dje-cgen-play1-branch:1.27.0.2
	dje-cgen-play1-branchpoint:1.27
	sid-snapshot-20090601:1.26
	sid-snapshot-20090501:1.26
	sid-snapshot-20090401:1.26
	arc-20081103-branch:1.25.0.8
	arc-20081103-branchpoint:1.25
	arc-insight_6_8-branch:1.19.0.6
	arc-insight_6_8-branchpoint:1.19
	insight_6_8-branch:1.19.0.4
	insight_6_8-branchpoint:1.19
	sid-snapshot-20090301:1.26
	binutils-2_19_1:1.23
	sid-snapshot-20090201:1.26
	sid-snapshot-20090101:1.26
	reverse-20081226-branch:1.25.0.6
	reverse-20081226-branchpoint:1.25
	sid-snapshot-20081201:1.25
	multiprocess-20081120-branch:1.25.0.4
	multiprocess-20081120-branchpoint:1.25
	sid-snapshot-20081101:1.25
	binutils-2_19:1.23
	sid-snapshot-20081001:1.25
	reverse-20080930-branch:1.25.0.2
	reverse-20080930-branchpoint:1.25
	binutils-2_19-branch:1.23.0.2
	binutils-2_19-branchpoint:1.23
	sid-snapshot-20080901:1.23
	sid-snapshot-20080801:1.22
	reverse-20080717-branch:1.22.0.4
	reverse-20080717-branchpoint:1.22
	sid-snapshot-20080701:1.22
	msnyder-reverse-20080609-branch:1.22.0.2
	msnyder-reverse-20080609-branchpoint:1.22
	drow-reverse-20070409-branch:1.16.0.2
	drow-reverse-20070409-branchpoint:1.16
	sid-snapshot-20080601:1.22
	sid-snapshot-20080501:1.22
	sid-snapshot-20080403:1.21
	sid-snapshot-20080401:1.21
	gdb_6_8-2008-03-27-release:1.19
	sid-snapshot-20080301:1.19
	gdb_6_8-branch:1.19.0.2
	gdb_6_8-2008-02-26-branchpoint:1.19
	sid-snapshot-20080201:1.19
	sid-snapshot-20080101:1.19
	sid-snapshot-20071201:1.19
	sid-snapshot-20071101:1.18
	gdb_6_7_1-2007-10-29-release:1.18
	gdb_6_7-2007-10-10-release:1.18
	sid-snapshot-20071001:1.18
	gdb_6_7-branch:1.18.0.2
	gdb_6_7-2007-09-07-branchpoint:1.18
	binutils-2_18:1.17
	binutils-2_18-branch:1.17.0.2
	binutils-2_18-branchpoint:1.17
	insight_6_6-20070208-release:1.12
	binutils-csl-coldfire-4_1-32:1.12
	binutils-csl-sourcerygxx-4_1-32:1.12
	gdb_6_6-2006-12-18-release:1.12
	binutils-csl-innovasic-fido-3_4_4-33:1.12
	binutils-csl-sourcerygxx-3_4_4-32:1.10
	binutils-csl-coldfire-4_1-30:1.12
	binutils-csl-sourcerygxx-4_1-30:1.12
	binutils-csl-coldfire-4_1-28:1.12
	binutils-csl-sourcerygxx-4_1-29:1.12
	binutils-csl-sourcerygxx-4_1-28:1.12
	gdb_6_6-branch:1.12.0.30
	gdb_6_6-2006-11-15-branchpoint:1.12
	binutils-csl-arm-2006q3-27:1.12
	binutils-csl-sourcerygxx-4_1-27:1.12
	binutils-csl-arm-2006q3-26:1.12
	binutils-csl-sourcerygxx-4_1-26:1.12
	binutils-csl-sourcerygxx-4_1-25:1.12
	binutils-csl-sourcerygxx-4_1-24:1.12
	binutils-csl-sourcerygxx-4_1-23:1.12
	insight_6_5-20061003-release:1.12
	gdb-csl-symbian-6_4_50_20060226-12:1.12
	binutils-csl-sourcerygxx-4_1-21:1.12
	binutils-csl-arm-2006q3-21:1.12
	binutils-csl-sourcerygxx-4_1-22:1.12
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.12
	binutils-csl-sourcerygxx-4_1-20:1.12
	binutils-csl-arm-2006q3-19:1.12
	binutils-csl-sourcerygxx-4_1-19:1.12
	binutils-csl-sourcerygxx-4_1-18:1.12
	binutils-csl-renesas-4_1-9:1.12
	gdb-csl-sourcerygxx-3_4_4-25:1.12
	binutils-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.12
	gdb-csl-symbian-6_4_50_20060226-11:1.12
	binutils-csl-renesas-4_1-8:1.12
	binutils-csl-renesas-4_1-7:1.12
	binutils-csl-renesas-4_1-6:1.12
	gdb-csl-sourcerygxx-4_1-17:1.12
	binutils-csl-sourcerygxx-4_1-17:1.12
	gdb-csl-20060226-branch-local-2:1.12
	gdb-csl-sourcerygxx-4_1-14:1.12
	binutils-csl-sourcerygxx-4_1-14:1.12
	binutils-csl-sourcerygxx-4_1-15:1.12
	gdb-csl-sourcerygxx-4_1-13:1.12
	binutils-csl-sourcerygxx-4_1-13:1.12
	binutils-2_17:1.12
	gdb-csl-sourcerygxx-4_1-12:1.12
	binutils-csl-sourcerygxx-4_1-12:1.12
	gdb-csl-sourcerygxx-3_4_4-21:1.12
	binutils-csl-sourcerygxx-3_4_4-21:1.12
	gdb_6_5-20060621-release:1.12
	binutils-csl-wrs-linux-3_4_4-24:1.10
	binutils-csl-wrs-linux-3_4_4-23:1.10
	gdb-csl-sourcerygxx-4_1-9:1.12
	binutils-csl-sourcerygxx-4_1-9:1.12
	gdb-csl-sourcerygxx-4_1-8:1.12
	binutils-csl-sourcerygxx-4_1-8:1.12
	gdb-csl-sourcerygxx-4_1-7:1.12
	binutils-csl-sourcerygxx-4_1-7:1.12
	gdb-csl-arm-2006q1-6:1.12
	binutils-csl-arm-2006q1-6:1.12
	gdb-csl-sourcerygxx-4_1-6:1.12
	binutils-csl-sourcerygxx-4_1-6:1.12
	binutils-csl-wrs-linux-3_4_4-22:1.10
	gdb-csl-symbian-6_4_50_20060226-10:1.12
	gdb-csl-symbian-6_4_50_20060226-9:1.12
	gdb-csl-symbian-6_4_50_20060226-8:1.12
	gdb-csl-coldfire-4_1-11:1.12
	binutils-csl-coldfire-4_1-11:1.12
	gdb-csl-sourcerygxx-3_4_4-19:1.12
	binutils-csl-sourcerygxx-3_4_4-19:1.12
	gdb-csl-coldfire-4_1-10:1.12
	gdb_6_5-branch:1.12.0.28
	gdb_6_5-2006-05-14-branchpoint:1.12
	binutils-csl-coldfire-4_1-10:1.12
	gdb-csl-sourcerygxx-4_1-5:1.12
	binutils-csl-sourcerygxx-4_1-5:1.12
	nickrob-async-20060513-branch:1.12.0.26
	nickrob-async-20060513-branchpoint:1.12
	gdb-csl-sourcerygxx-4_1-4:1.12
	binutils-csl-sourcerygxx-4_1-4:1.12
	msnyder-reverse-20060502-branch:1.12.0.24
	msnyder-reverse-20060502-branchpoint:1.12
	binutils-csl-wrs-linux-3_4_4-21:1.10
	gdb-csl-morpho-4_1-4:1.12
	binutils-csl-morpho-4_1-4:1.12
	gdb-csl-sourcerygxx-3_4_4-17:1.12
	binutils-csl-sourcerygxx-3_4_4-17:1.12
	binutils-csl-wrs-linux-3_4_4-20:1.10
	readline_5_1-import-branch:1.12.0.22
	readline_5_1-import-branchpoint:1.12
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.12
	binutils-2_17-branch:1.12.0.20
	binutils-2_17-branchpoint:1.12
	gdb-csl-symbian-20060226-branch:1.12.0.18
	gdb-csl-symbian-20060226-branchpoint:1.12
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.12
	msnyder-reverse-20060331-branch:1.12.0.16
	msnyder-reverse-20060331-branchpoint:1.12
	binutils-csl-2_17-branch:1.12.0.14
	binutils-csl-2_17-branchpoint:1.12
	gdb-csl-available-20060303-branch:1.12.0.12
	gdb-csl-available-20060303-branchpoint:1.12
	gdb-csl-20060226-branch:1.12.0.10
	gdb-csl-20060226-branchpoint:1.12
	gdb_6_4-20051202-release:1.12
	msnyder-fork-checkpoint-branch:1.12.0.8
	msnyder-fork-checkpoint-branchpoint:1.12
	gdb-csl-gxxpro-6_3-branch:1.12.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.12
	gdb_6_4-branch:1.12.0.4
	gdb_6_4-2005-11-01-branchpoint:1.12
	gdb-csl-arm-20051020-branch:1.12.0.2
	gdb-csl-arm-20051020-branchpoint:1.12
	binutils-csl-gxxpro-3_4-branch:1.10.0.10
	binutils-csl-gxxpro-3_4-branchpoint:1.10
	binutils-2_16_1:1.10
	msnyder-tracepoint-checkpoint-branch:1.10.0.8
	msnyder-tracepoint-checkpoint-branchpoint:1.10
	gdb-csl-arm-20050325-2005-q1b:1.10
	binutils-csl-arm-2005q1b:1.10
	binutils-2_16:1.10
	gdb-csl-arm-20050325-2005-q1a:1.10
	binutils-csl-arm-2005q1a:1.10
	csl-arm-20050325-branch:1.10.0.6
	csl-arm-20050325-branchpoint:1.10
	binutils-csl-arm-2005q1-branch:1.10.0.4
	binutils-csl-arm-2005q1-branchpoint:1.10
	binutils-2_16-branch:1.10.0.2
	binutils-2_16-branchpoint:1.10
	csl-arm-2004-q3d:1.9
	gdb_6_3-20041109-release:1.9
	gdb_6_3-branch:1.9.0.4
	gdb_6_3-20041019-branchpoint:1.9
	csl-arm-2004-q3:1.9
	drow_intercu-merge-20040921:1.9
	drow_intercu-merge-20040915:1.9
	jimb-gdb_6_2-e500-branch:1.9.0.6
	jimb-gdb_6_2-e500-branchpoint:1.9
	gdb_6_2-20040730-release:1.9
	gdb_6_2-branch:1.9.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.9
	gdb_6_1_1-20040616-release:1.8
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	gdb_6_1-2004-04-05-release:1.8
	drow_intercu-merge-20040402:1.8
	drow_intercu-merge-20040327:1.8
	ezannoni_pie-20040323-branch:1.8.0.20
	ezannoni_pie-20040323-branchpoint:1.8
	cagney_tramp-20040321-mergepoint:1.8
	cagney_tramp-20040309-branch:1.8.0.18
	cagney_tramp-20040309-branchpoint:1.8
	gdb_6_1-branch:1.8.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	drow_intercu-20040221-branch:1.8.0.14
	drow_intercu-20040221-branchpoint:1.8
	binutils-2_15-branch:1.8.0.12
	cagney_bfdfile-20040213-branch:1.8.0.10
	cagney_bfdfile-20040213-branchpoint:1.8
	drow-cplus-merge-20040208:1.8
	carlton_dictionary-20040126-merge:1.8
	cagney_bigcore-20040122-branch:1.8.0.8
	cagney_bigcore-20040122-branchpoint:1.8
	drow-cplus-merge-20040113:1.8
	csl-arm-2003-q4:1.8
	drow-cplus-merge-20031224:1.8
	drow-cplus-merge-20031220:1.8
	carlton_dictionary-20031215-merge:1.8
	drow-cplus-merge-20031214:1.8
	carlton-dictionary-20031111-merge:1.8
	gdb_6_0-2003-10-04-release:1.7
	kettenis_sparc-20030918-branch:1.8.0.6
	kettenis_sparc-20030918-branchpoint:1.8
	carlton_dictionary-20030917-merge:1.8
	ezannoni_pie-20030916-branchpoint:1.8
	ezannoni_pie-20030916-branch:1.8.0.4
	cagney_x86i386-20030821-branch:1.8.0.2
	cagney_x86i386-20030821-branchpoint:1.8
	carlton_dictionary-20030805-merge:1.8
	carlton_dictionary-20030627-merge:1.7
	gdb_6_0-branch:1.7.0.24
	gdb_6_0-2003-06-23-branchpoint:1.7
	jimb-ppc64-linux-20030613-branch:1.7.0.22
	jimb-ppc64-linux-20030613-branchpoint:1.7
	binutils-2_14:1.7
	cagney_convert-20030606-branch:1.7.0.20
	cagney_convert-20030606-branchpoint:1.7
	cagney_writestrings-20030508-branch:1.7.0.18
	cagney_writestrings-20030508-branchpoint:1.7
	jimb-ppc64-linux-20030528-branch:1.7.0.16
	jimb-ppc64-linux-20030528-branchpoint:1.7
	carlton_dictionary-20030523-merge:1.7
	cagney_fileio-20030521-branch:1.7.0.14
	cagney_fileio-20030521-branchpoint:1.7
	kettenis_i386newframe-20030517-mergepoint:1.7
	jimb-ppc64-linux-20030509-branch:1.7.0.12
	jimb-ppc64-linux-20030509-branchpoint:1.7
	kettenis_i386newframe-20030504-mergepoint:1.7
	carlton_dictionary-20030430-merge:1.7
	binutils-2_14-branch:1.7.0.10
	binutils-2_14-branchpoint:1.7
	kettenis_i386newframe-20030419-branch:1.7.0.8
	kettenis_i386newframe-20030419-branchpoint:1.7
	carlton_dictionary-20030416-merge:1.7
	cagney_frameaddr-20030409-mergepoint:1.7
	kettenis_i386newframe-20030406-branch:1.7.0.6
	kettenis_i386newframe-20030406-branchpoint:1.7
	cagney_frameaddr-20030403-branchpoint:1.7
	cagney_frameaddr-20030403-branch:1.7.0.4
	cagney_framebase-20030330-mergepoint:1.7
	cagney_framebase-20030326-branch:1.7.0.2
	cagney_framebase-20030326-branchpoint:1.7
	cagney_lazyid-20030317-branch:1.6.0.36
	cagney_lazyid-20030317-branchpoint:1.6
	kettenis-i386newframe-20030316-mergepoint:1.6
	offbyone-20030313-branch:1.6.0.34
	offbyone-20030313-branchpoint:1.6
	kettenis-i386newframe-20030308-branch:1.6.0.32
	kettenis-i386newframe-20030308-branchpoint:1.6
	carlton_dictionary-20030305-merge:1.6
	cagney_offbyone-20030303-branch:1.6.0.30
	cagney_offbyone-20030303-branchpoint:1.6
	carlton_dictionary-20030207-merge:1.6
	interps-20030202-branch:1.6.0.28
	interps-20030202-branchpoint:1.6
	cagney-unwind-20030108-branch:1.6.0.26
	cagney-unwind-20030108-branchpoint:1.6
	binutils-2_13_2_1:1.6
	binutils-2_13_2:1.6
	carlton_dictionary-20021223-merge:1.6
	gdb_5_3-2002-12-12-release:1.6
	carlton_dictionary-20021115-merge:1.6
	binutils-2_13_1:1.6
	kseitz_interps-20021105-merge:1.6
	kseitz_interps-20021103-merge:1.6
	drow-cplus-merge-20021020:1.6
	drow-cplus-merge-20021025:1.6
	carlton_dictionary-20021025-merge:1.6
	carlton_dictionary-20021011-merge:1.6
	drow-cplus-branch:1.6.0.24
	drow-cplus-branchpoint:1.6
	kseitz_interps-20020930-merge:1.6
	carlton_dictionary-20020927-merge:1.6
	carlton_dictionary-branch:1.6.0.22
	carlton_dictionary-20020920-branchpoint:1.6
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.20
	gdb_5_3-branch:1.6.0.18
	gdb_5_3-2002-09-04-branchpoint:1.6
	kseitz_interps-20020829-merge:1.6
	cagney_sysregs-20020825-branch:1.6.0.16
	cagney_sysregs-20020825-branchpoint:1.6
	readline_4_3-import-branch:1.6.0.14
	readline_4_3-import-branchpoint:1.6
	binutils-2_13:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	binutils-2_13-branchpoint:1.6
	binutils-2_13-branch:1.6.0.12
	kseitz_interps-20020528-branch:1.6.0.10
	kseitz_interps-20020528-branchpoint:1.6
	cagney_regbuf-20020515-branch:1.6.0.8
	cagney_regbuf-20020515-branchpoint:1.6
	binutils-2_12_1:1.6
	jimb-macro-020506-branch:1.6.0.6
	jimb-macro-020506-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	binutils-2_12:1.6
	gdb_5_2-branch:1.6.0.4
	gdb_5_2-2002-03-03-branchpoint:1.6
	binutils-2_12-branch:1.6.0.2
	binutils-2_12-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.4
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.2
	gdb_5_1-2001-07-29-branchpoint:1.4
	x86_64versiong3:1.1
	binutils_latest_snapshot:1.43;
locks; strict;
comment	@# @;


1.43
date	2013.09.17.09.02.36;	author rsandifo;	state Exp;
branches;
next	1.42;

1.42
date	2013.09.02.11.42.38;	author krebbel;	state Exp;
branches;
next	1.41;

1.41
date	2013.07.05.09.45.44;	author krebbel;	state Exp;
branches;
next	1.40;

1.40
date	2013.05.24.17.13.49;	author rsandifo;	state Exp;
branches;
next	1.39;

1.39
date	2012.11.20.11.58.30;	author krebbel;	state Exp;
branches;
next	1.38;

1.38
date	2012.10.26.09.41.55;	author krebbel;	state Exp;
branches;
next	1.37;

1.37
date	2012.10.04.08.47.36;	author krebbel;	state Exp;
branches;
next	1.36;

1.36
date	2012.03.08.17.22.18;	author krebbel;	state Exp;
branches;
next	1.35;

1.35
date	2011.10.21.12.50.29;	author krebbel;	state Exp;
branches;
next	1.34;

1.34
date	2011.05.24.16.13.31;	author krebbel;	state Exp;
branches;
next	1.33;

1.33
date	2011.05.24.13.33.57;	author krebbel;	state Exp;
branches;
next	1.32;

1.32
date	2010.10.28.07.37.45;	author krebbel;	state Exp;
branches;
next	1.31;

1.31
date	2010.10.11.11.56.53;	author krebbel;	state Exp;
branches;
next	1.30;

1.30
date	2010.09.27.13.36.48;	author krebbel;	state Exp;
branches;
next	1.29;

1.29
date	2010.09.27.13.33.00;	author krebbel;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.02.07.20.30;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2009.06.19.10.55.42;	author sky;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.30.10.00.47;	author sky;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.30.08.49.54;	author krebbel;	state Exp;
branches;
next	1.24;

1.24
date	2008.09.26.13.44.33;	author krebbel;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.15.12.10.21;	author krebbel;	state Exp;
branches;
next	1.22;

1.22
date	2008.04.10.08.59.46;	author krebbel;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.19.10.29.18;	author krebbel;	state Exp;
branches;
next	1.20;

1.20
date	2008.03.06.12.01.13;	author krebbel;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.27.15.33.28;	author krebbel;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.21.15.54.30;	author krebbel;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.24.14.49.47;	author sky;	state Exp;
branches;
next	1.16;

1.16
date	2007.03.06.13.19.07;	author sky;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.22.21.01.58;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.19.17.42.17;	author sky;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.19.17.29.37;	author sky;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.19.15.05.10;	author sky;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.12.18.03.03;	author sky;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.03.11.49.50;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.01.13.56.11;	author sky;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.01.14.47.58;	author sky;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	2003.03.21.13.28.09;	author sky;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.18.15.41.33;	author nickc;	state Exp;
branches
	1.6.22.1
	1.6.24.1;
next	1.5;

1.5
date	2001.08.23.06.38.56;	author aj;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.12.11.50.53;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.16.18.42.26;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.13.22.58.37;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.10.00.55.48;	author nickc;	state Exp;
branches;
next	;

1.8.14.1
date	2004.09.16.17.02.02;	author drow;	state Exp;
branches;
next	;

1.6.22.1
date	2003.04.16.19.57.07;	author carlton;	state Exp;
branches;
next	1.6.22.2;

1.6.22.2
date	2003.08.05.17.13.31;	author carlton;	state Exp;
branches;
next	;

1.6.24.1
date	2003.12.14.20.28.10;	author drow;	state Exp;
branches;
next	;


desc
@@


1.43
log
@opcodes/
	* s390-opc.txt (clih): Make the immediate unsigned.

gas/testsuite/
	* gas/s390/zarch-z196.s, gas/s390/zarch-z196.d: Test CLIH with
	4000000000.
@
text
@#  S/390 opcodes list. Use s390-mkopc to convert it into the opcode table.
#  Copyright 2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009
#  Free Software Foundation, Inc.
#  Contributed by Martin Schwidefsky (schwidefsky@@de.ibm.com).
5a a RX_RRRD "add" g5 esa,zarch
6a ad RX_FRRD "add normalized (long)" g5 esa,zarch
2a adr RR_FF "add normalized (long)" g5 esa,zarch
7a ae RX_FRRD "add normalized (short)" g5 esa,zarch
3a aer RR_FF "add normalized (short)" g5 esa,zarch
4a ah RX_RRRD "add halfword" g5 esa,zarch
5e al RX_RRRD "add logical" g5 esa,zarch
1e alr RR_RR "add logical" g5 esa,zarch
fa ap SS_LLRDRD "add decimal" g5 esa,zarch
1a ar RR_RR "add" g5 esa,zarch
7e au RX_FRRD "add unnormalized (short)" g5 esa,zarch
3e aur RR_FF "add unnormalized (short)" g5 esa,zarch
6e aw RX_FRRD "add unnormalized (long)" g5 esa,zarch
2e awr RR_FF "add unnormalized (long)" g5 esa,zarch
36 axr RR_FEFE "add normalized" g5 esa,zarch
b240 bakr RRE_RR "branch and stack" g5 esa,zarch
45 bal RX_RRRD "branch and link" g5 esa,zarch
05 balr RR_RR "branch and link" g5 esa,zarch
4d bas RX_RRRD "branch and save" g5 esa,zarch
0d basr RR_RR "branch and save" g5 esa,zarch
0c bassm RR_RR "branch and save and set mode" g5 esa,zarch
47 bc RX_URRD "branch on condition" g5 esa,zarch
07 bcr RR_UR "branch on condition" g5 esa,zarch
46 bct RX_RRRD "branch on count" g5 esa,zarch
06 bctr RR_RR "branch on count" g5 esa,zarch
b258 bsg RRE_RR "branch in subspace group" g5 esa,zarch
0b bsm RR_RR "branch and set mode" g5 esa,zarch
86 bxh RS_RRRD "branch on index high" g5 esa,zarch
87 bxle RS_RRRD "branch on index low or equal" g5 esa,zarch
59 c RX_RRRD "compare" g5 esa,zarch
69 cd RX_FRRD "compare (long)" g5 esa,zarch
29 cdr RR_FF "compare (long)" g5 esa,zarch
bb cds RS_RERERD "compare double and swap" g5 esa,zarch
79 ce RX_FRRD "compare (short)" g5 esa,zarch
39 cer RR_FF "compare (short)" g5 esa,zarch
b21a cfc S_RD "compare and form codeword" g5 esa,zarch
49 ch RX_RRRD "compare halfword" g5 esa,zarch
55 cl RX_RRRD "compare logical" g5 esa,zarch
d5 clc SS_L0RDRD "compare logical" g5 esa,zarch
0f clcl RR_RR "compare logical long" g5 esa,zarch
95 cli SI_URD "compare logical" g5 esa,zarch
bd clm RS_RURD "compare logical characters under mask" g5 esa,zarch
15 clr RR_RR "compare logical" g5 esa,zarch
b25d clst RRE_RR "compare logical string" g5 esa,zarch
f9 cp SS_LLRDRD "compare decimal" g5 esa,zarch
b24d cpya RRE_AA "copy access" g5 esa,zarch
19 cr RR_RR "compare" g5 esa,zarch
ba cs RS_RRRD "compare and swap" g5 esa,zarch
b230 csch S_00 "clear subchannel" g5 esa,zarch
b257 cuse RRE_RERE "compare until substring equal" g5 esa,zarch
b250 csp RRE_RR "compare and swap and purge" g5 esa,zarch
4f cvb RX_RRRD "convert to binary" g5 esa,zarch
4e cvd RX_RRRD "convert to decimal" g5 esa,zarch
5d d RX_RERRD "divide" g5 esa,zarch
6d dd RX_FRRD "divide (long)" g5 esa,zarch
2d ddr RR_FF "divide (long)" g5 esa,zarch
7d de RX_FRRD "divide (short)" g5 esa,zarch
3d der RR_FF "divide (short)" g5 esa,zarch
83 diag RS_RRRD "diagnose" g5 esa,zarch
fd dp SS_LLRDRD "divide decimal" g5 esa,zarch
1d dr RR_RER "divide" g5 esa,zarch
b22d dxr RRE_FEFE "divide (ext.)" g5 esa,zarch
b24f ear RRE_RA "extract access" g5 esa,zarch
de ed SS_L0RDRD "edit" g5 esa,zarch
df edmk SS_L0RDRD "edit and mark" g5 esa,zarch
b226 epar RRE_R0 "extract primary ASN" g5 esa,zarch
b249 ereg RRE_RR "extract stacked registers" g5 esa,zarch
b227 esar RRE_R0 "extract secondary ASN" g5 esa,zarch
b24a esta RRE_RR "extract stacked state" g5 esa,zarch
44 ex RX_RRRD "execute" g5 esa,zarch
24 hdr RR_FF "halve (long)" g5 esa,zarch
34 her RR_FF "halve (short)" g5 esa,zarch
b231 hsch S_00 "halt subchannel" g5 esa,zarch
b224 iac RRE_R0 "insert address space control" g5 esa,zarch
43 ic RX_RRRD "insert character" g5 esa,zarch
bf icm RS_RURD "insert characters under mask" g5 esa,zarch
b20b ipk S_00 "insert PSW key" g5 esa,zarch
b222 ipm RRE_R0 "insert program mask" g5 esa,zarch
b221 ipte RRE_RR "invalidate page table entry" g5 esa,zarch
b229 iske RRE_RR "insert storage key extended" g5 esa,zarch
b223 ivsk RRE_RR "insert virtual storage key" g5 esa,zarch
58 l RX_RRRD "load" g5 esa,zarch
41 la RX_RRRD "load address" g5 esa,zarch
51 lae RX_RRRD "load address extended" g5 esa,zarch
9a lam RS_AARD "load access multiple" g5 esa,zarch
e500 lasp SSE_RDRD "load address space parameters" g5 esa,zarch
23 lcdr RR_FF "load complement (long)" g5 esa,zarch
33 lcer RR_FF "load complement (short)" g5 esa,zarch
13 lcr RR_RR "load complement" g5 esa,zarch
b7 lctl RS_CCRD "load control" g5 esa,zarch
68 ld RX_FRRD "load (long)" g5 esa,zarch
28 ldr RR_FF "load (long)" g5 esa,zarch
78 le RX_FRRD "load (short)" g5 esa,zarch
38 ler RR_FF "load (short)" g5 esa,zarch
48 lh RX_RRRD "load halfword" g5 esa,zarch
98 lm RS_RRRD "load multiple" g5 esa,zarch
21 lndr RR_FF "load negative (long)" g5 esa,zarch
31 lner RR_FF "load negative (short)" g5 esa,zarch
11 lnr RR_RR "load negative" g5 esa,zarch
20 lpdr RR_FF "load positive (long)" g5 esa,zarch
30 lper RR_FF "load positive (short)" g5 esa,zarch
10 lpr RR_RR "load positive" g5 esa,zarch
82 lpsw S_RD "load PSW" g5 esa,zarch
18 lr RR_RR "load" g5 esa,zarch
b1 lra RX_RRRD "load real address" g5 esa,zarch
25 ldxr RR_FFE "load rounded (ext. to long)" g5 esa,zarch
25 lrdr RR_FFE "load rounded (ext. to long)" g5 esa,zarch
35 ledr RR_FF "load rounded (long to short)" g5 esa,zarch
35 lrer RR_FF "load rounded (long to short)" g5 esa,zarch
22 ltdr RR_FF "load and test (long)" g5 esa,zarch
32 lter RR_FF "load and test (short)" g5 esa,zarch
12 ltr RR_RR "load and test" g5 esa,zarch
b24b lura RRE_RR "load using real address" g5 esa,zarch
5c m RX_RERRD "multiply" g5 esa,zarch
af mc SI_URD "monitor call" g5 esa,zarch
6c md RX_FRRD "multiply (long)" g5 esa,zarch
2c mdr RR_FF "multiply (long)" g5 esa,zarch
7c mde RX_FRRD "multiply (short to long)" g5 esa,zarch
7c me RX_FRRD "multiply (short to long)" g5 esa,zarch
3c mder RR_FF "multiply short to long hfp" g5 esa,zarch
3c mer RR_FF "multiply (short to long)" g5 esa,zarch
4c mh RX_RRRD "multiply halfword" g5 esa,zarch
fc mp SS_LLRDRD "multiply decimal" g5 esa,zarch
1c mr RR_RER "multiply" g5 esa,zarch
b232 msch S_RD "modify subchannel" g5 esa,zarch
b247 msta RRE_R0 "modify stacked state" g5 esa,zarch
d2 mvc SS_L0RDRD "move" g5 esa,zarch
e50f mvcdk SSE_RDRD "move with destination key" g5 esa,zarch
e8 mvcin SS_L0RDRD "move inverse" g5 esa,zarch
d9 mvck SS_RRRDRD "move with key" g5 esa,zarch
0e mvcl RR_RR "move long" g5 esa,zarch
da mvcp SS_RRRDRD "move to primary" g5 esa,zarch
db mvcs SS_RRRDRD "move to secondary" g5 esa,zarch
e50e mvcsk SSE_RDRD "move with source key" g5 esa,zarch
92 mvi SI_URD "move" g5 esa,zarch
d1 mvn SS_L0RDRD "move numerics" g5 esa,zarch
f1 mvo SS_LLRDRD "move with offset" g5 esa,zarch
b254 mvpg RRE_RR "move page" g5 esa,zarch
b255 mvst RRE_RR "move string" g5 esa,zarch
d3 mvz SS_L0RDRD "move zones" g5 esa,zarch
67 mxd RX_FERRD "multiply (long to ext.)" g5 esa,zarch
27 mxdr RR_FEF "multiply (long to ext.)" g5 esa,zarch
26 mxr RR_FEFE "multiply (ext.)" g5 esa,zarch
54 n RX_RRRD "AND" g5 esa,zarch
d4 nc SS_L0RDRD "AND" g5 esa,zarch
94 ni SI_URD "AND" g5 esa,zarch
14 nr RR_RR "AND" g5 esa,zarch
56 o RX_RRRD "OR" g5 esa,zarch
d6 oc SS_L0RDRD "OR" g5 esa,zarch
96 oi SI_URD "OR" g5 esa,zarch
16 or RR_RR "OR" g5 esa,zarch
f2 pack SS_LLRDRD "pack" g5 esa,zarch
b248 palb RRE_00 "purge ALB" g5 esa,zarch
b218 pc S_RD "program call" g5 esa,zarch
0101 pr E "program return" g5 esa,zarch
b228 pt RRE_RR "program transfer" g5 esa,zarch
b20d ptlb S_00 "purge TLB" g5 esa,zarch
b23b rchp S_00 "reset channel path" g5 esa,zarch
b22a rrbe RRE_RR "reset reference bit extended" g5 esa,zarch
b238 rsch S_00 "resume subchannel" g5 esa,zarch
5b s RX_RRRD "subtract" g5 esa,zarch
b219 sac S_RD "set address space control" g5 esa,zarch
b279 sacf S_RD "set address space control fast" g5 esa,zarch
b237 sal S_00 "set address limit" g5 esa,zarch
b24e sar RRE_AR "set access" g5 esa,zarch
b23c schm S_00 "set channel monitor" g5 esa,zarch
b204 sck S_RD "set clock" g5 esa,zarch
b206 sckc S_RD "set clock comparator" g5 esa,zarch
6b sd RX_FRRD "subtract normalized (long)" g5 esa,zarch
2b sdr RR_FF "subtract normalized (long)" g5 esa,zarch
7b se RX_FRRD "subtract normalized (short)" g5 esa,zarch
3b ser RR_FF "subtract normalized (short)" g5 esa,zarch
4b sh RX_RRRD "subtract halfword" g5 esa,zarch
b214 sie S_RD "start interpretive execution" g5 esa,zarch
ae sigp RS_RRRD "signal processor" g5 esa,zarch
5f sl RX_RRRD "subtract logical" g5 esa,zarch
8b sla RS_R0RD "shift left single" g5 esa,zarch
8f slda RS_RE0RD "shift left double (long)" g5 esa,zarch
8d sldl RS_RE0RD "shift left double logical (long)" g5 esa,zarch
89 sll RS_R0RD "shift left single logical" g5 esa,zarch
1f slr RR_RR "subtract logical" g5 esa,zarch
fb sp SS_LLRDRD "subtract decimal" g5 esa,zarch
b20a spka S_RD "set PSW key from address" g5 esa,zarch
04 spm RR_R0 "set program mask" g5 esa,zarch
b208 spt S_RD "set CPU timer" g5 esa,zarch
b210 spx S_RD "set prefix" g5 esa,zarch
b244 sqdr RRE_FF "square root (long)" g5 esa,zarch
b245 sqer RRE_FF "square root (short)" g5 esa,zarch
1b sr RR_RR "subtract" g5 esa,zarch
8a sra RS_R0RD "shift right single" g5 esa,zarch
8e srda RS_RE0RD "shift right double (long)" g5 esa,zarch
8c srdl RS_RE0RD "shift right double logical (long)" g5 esa,zarch
88 srl RS_R0RD "shift right single logical" g5 esa,zarch
f0 srp SS_LIRDRD "shift and round decimal" g5 esa,zarch
b25e srst RRE_RR "search string" g5 esa,zarch
b225 ssar RRE_R0 "set secondary ASN" g5 esa,zarch
b233 ssch S_RD "start subchannel" g5 esa,zarch
b22b sske RRE_RR "set storage key extended" g5 esa,zarch
80 ssm S_RD "set system mask" g5 esa,zarch
50 st RX_RRRD "store" g5 esa,zarch
9b stam RS_AARD "store access multiple" g5 esa,zarch
b212 stap S_RD "store CPU address" g5 esa,zarch
42 stc RX_RRRD "store character" g5 esa,zarch
b205 stck S_RD "store clock" g5 esa,zarch
b207 stckc S_RD "store clock comparator" g5 esa,zarch
be stcm RS_RURD "store characters under mask" g5 esa,zarch
b23a stcps S_RD "store channel path status" g5 esa,zarch
b239 stcrw S_RD "store channel report word" g5 esa,zarch
b6 stctl RS_CCRD "store control" g5 esa,zarch
60 std RX_FRRD "store (long)" g5 esa,zarch
70 ste RX_FRRD "store (short)" g5 esa,zarch
40 sth RX_RRRD "store halfword" g5 esa,zarch
b202 stidp S_RD "store CPU id" g5 esa,zarch
90 stm RS_RRRD "store multiple" g5 esa,zarch
ac stnsm SI_URD "store then AND system mask" g5 esa,zarch
ad stosm SI_URD "store then OR system mask" g5 esa,zarch
b209 stpt S_RD "store CPU timer" g5 esa,zarch
b211 stpx S_RD "store prefix" g5 esa,zarch
b234 stsch S_RD "store subchannel" g5 esa,zarch
b246 stura RRE_RR "store using real address" g5 esa,zarch
7f su RX_FRRD "subtract unnormalized (short)" g5 esa,zarch
3f sur RR_FF "subtract unnormalized (short)" g5 esa,zarch
0a svc RR_U0 "supervisor call" g5 esa,zarch
6f sw RX_FRRD "subtract unnormalized (long)" g5 esa,zarch
2f swr RR_FF "subtract unnormalized (long)" g5 esa,zarch
37 sxr RR_FEFE "subtract normalized (ext.)" g5 esa,zarch
b24c tar RRE_AR "test access" g5 esa,zarch
b22c tb RRE_0R "test block" g5 esa,zarch
91 tm SI_URD "test under mask" g5 esa,zarch
b236 tpi S_RD "test pending interruption" g5 esa,zarch
e501 tprot SSE_RDRD "test protection" g5 esa,zarch
dc tr SS_L0RDRD "translate" g5 esa,zarch
99 trace RS_RRRD "trace" g5 esa,zarch
dd trt SS_L0RDRD "translate and test" g5 esa,zarch
93 ts S_RD "test and set" g5 esa,zarch
b235 tsch S_RD "test subchannel" g5 esa,zarch
f3 unpk SS_LLRDRD "unpack" g5 esa,zarch
0102 upt E "update tree" g5 esa,zarch
57 x RX_RRRD "exclusive OR" g5 esa,zarch
d7 xc SS_L0RDRD "exclusive OR" g5 esa,zarch
97 xi SI_URD "exclusive OR" g5 esa,zarch
17 xr RR_RR "exclusive OR" g5 esa,zarch
f8 zap SS_LLRDRD "zero and add" g5 esa,zarch
a70a ahi RI_RI "add halfword immediate" g5 esa,zarch
84 brxh RSI_RRP "branch relative on index high" g5 esa,zarch
85 brxle RSI_RRP "branch relative on index low or equal" g5 esa,zarch
a705 bras RI_RP "branch relative and save" g5 esa,zarch
a704 brc RI_UP "branch relative on condition" g5 esa,zarch
a706 brct RI_RP "branch relative on count" g5 esa,zarch
b241 cksm RRE_RR "checksum" g5 esa,zarch
a70e chi RI_RI "compare halfword immediate" g5 esa,zarch
a9 clcle RS_RRRD "compare logical long extended" g5 esa,zarch
a708 lhi RI_RI "load halfword immediate" g5 esa,zarch
a8 mvcle RS_RERERD "move long extended" g5 esa,zarch
a70c mhi RI_RI "multiply halfword immediate" g5 esa,zarch
b252 msr RRE_RR "multiply single" g5 esa,zarch
71 ms RX_RRRD "multiply single" g5 esa,zarch
a700 tmlh RI_RU "test under mask low high" g5 esa,zarch
a700 tmh RI_RU "test under mask high" g5 esa,zarch
a701 tmll RI_RU "test under mask low low" g5 esa,zarch
a701 tml RI_RU "test under mask low" g5 esa,zarch
0700 nopr RR_0R_OPT "no operation" g5 esa,zarch
0700 b*8r RR_0R "conditional branch" g5 esa,zarch
07f0 br RR_0R "unconditional branch" g5 esa,zarch
4700 nop RX_0RRD_OPT "no operation" g5 esa,zarch
4700 b*8 RX_0RRD "conditional branch" g5 esa,zarch
47f0 b RX_0RRD "unconditional branch" g5 esa,zarch
a704 j*8 RI_0P "conditional jump" g5 esa,zarch
a7f4 j RI_0P "unconditional jump" g5 esa,zarch
b34a axbr RRE_FEFE "add extended bfp" g5 esa,zarch
b31a adbr RRE_FF "add long bfp" g5 esa,zarch
ed000000001a adb RXE_FRRD "add long bfp" g5 esa,zarch
b30a aebr RRE_FF "add short bfp" g5 esa,zarch
ed000000000a aeb RXE_FRRD "add short bfp" g5 esa,zarch
b349 cxbr RRE_FEFE "compare extended bfp" g5 esa,zarch
b319 cdbr RRE_FF "compare long bfp" g5 esa,zarch
ed0000000019 cdb RXE_FRRD "compare long bfp" g5 esa,zarch
b309 cebr RRE_FF "compare short bfp" g5 esa,zarch
ed0000000009 ceb RXE_FRRD "compare short bfp" g5 esa,zarch
b348 kxbr RRE_FF "compare and signal extended bfp" g5 esa,zarch
b318 kdbr RRE_FF "compare and signal long bfp" g5 esa,zarch
ed0000000018 kdb RXE_FRRD "compare and signal long bfp" g5 esa,zarch
b308 kebr RRE_FF "compare and signal short bfp" g5 esa,zarch
ed0000000008 keb RXE_FRRD "compare and signal short bfp" g5 esa,zarch
b396 cxfbr RRE_FER "convert from fixed 32 to extended bfp" g5 esa,zarch
b395 cdfbr RRE_FR "convert from fixed 32 to long bfp" g5 esa,zarch
b394 cefbr RRE_FR "convert from fixed 32 to short bfp" g5 esa,zarch
b39a cfxbr RRF_U0RFE "convert to fixed extended bfp to 32" g5 esa,zarch
b399 cfdbr RRF_U0RF "convert to fixed long bfp to 32" g5 esa,zarch
b398 cfebr RRF_U0RF "convert to fixed short bfp to 32" g5 esa,zarch
b34d dxbr RRE_FEFE "divide extended bfp" g5 esa,zarch
b31d ddbr RRE_FF "divide long bfp" g5 esa,zarch
ed000000001d ddb RXE_FRRD "divide long bfp" g5 esa,zarch
b30d debr RRE_FF "divide short bfp" g5 esa,zarch
ed000000000d deb RXE_FRRD "divide short bfp" g5 esa,zarch
b35b didbr RRF_FUFF "divide to integer long bfp" g5 esa,zarch
b353 diebr RRF_FUFF "divide to integer short bfp" g5 esa,zarch
b38c efpc RRE_RR_OPT "extract fpc" g5 esa,zarch
b342 ltxbr RRE_FEFE "load and test extended bfp" g5 esa,zarch
b312 ltdbr RRE_FF "load and test long bfp" g5 esa,zarch
b302 ltebr RRE_FF "load and test short bfp" g5 esa,zarch
b343 lcxbr RRE_FEFE "load complement extended bfp" g5 esa,zarch
b313 lcdbr RRE_FF "load complement long bfp" g5 esa,zarch
b303 lcebr RRE_FF "load complement short bfp" g5 esa,zarch
b347 fixbr RRF_U0FEFE "load fp integer extended bfp" g5 esa,zarch
b35f fidbr RRF_U0FF "load fp integer long bfp" g5 esa,zarch
b357 fiebr RRF_U0FF "load fp integer short bfp" g5 esa,zarch
b29d lfpc S_RD "load fpc" g5 esa,zarch
b305 lxdbr RRE_FEF "load lengthened long to extended bfp" g5 esa,zarch
ed0000000005 lxdb RXE_FERRD "load lengthened long to extended bfp" g5 esa,zarch
b306 lxebr RRE_FEF "load lengthened short to extended bfp" g5 esa,zarch
ed0000000006 lxeb RXE_FERRD "load lengthened short to extended bfp" g5 esa,zarch
b304 ldebr RRE_FF "load lengthened short to long bfp" g5 esa,zarch
ed0000000004 ldeb RXE_FRRD "load lengthened short to long bfp" g5 esa,zarch
b341 lnxbr RRE_FEFE "load negative extended bfp" g5 esa,zarch
b311 lndbr RRE_FF "load negative long bfp" g5 esa,zarch
b301 lnebr RRE_FF "load negative short bfp" g5 esa,zarch
b340 lpxbr RRE_FEFE "load positive extended bfp" g5 esa,zarch
b310 lpdbr RRE_FF "load positive long bfp" g5 esa,zarch
b300 lpebr RRE_FF "load positive short bfp" g5 esa,zarch
b345 ldxbr RRE_FEFE "load rounded extended to long bfp" g5 esa,zarch
b346 lexbr RRE_FEFE "load rounded extended to short bfp" g5 esa,zarch
b344 ledbr RRE_FF "load rounded long to short bfp" g5 esa,zarch
b34c mxbr RRE_FEFE "multiply extended bfp" g5 esa,zarch
b31c mdbr RRE_FF "multiply long bfp" g5 esa,zarch
ed000000001c mdb RXE_FRRD "multiply long bfp" g5 esa,zarch
b307 mxdbr RRE_FEF "multiply long to extended bfp" g5 esa,zarch
ed0000000007 mxdb RXE_FERRD "multiply long to extended bfp" g5 esa,zarch
b317 meebr RRE_FF "multiply short bfp" g5 esa,zarch
ed0000000017 meeb RXE_FRRD "multiply short bfp" g5 esa,zarch
b30c mdebr RRE_FF "multiply short to long bfp" g5 esa,zarch
ed000000000c mdeb RXE_FRRD "multiply short to long bfp" g5 esa,zarch
b31e madbr RRF_F0FF "multiply and add long bfp" g5 esa,zarch
ed000000001e madb RXF_FRRDF "multiply and add long bfp" g5 esa,zarch
b30e maebr RRF_F0FF "multiply and add short bfp" g5 esa,zarch
ed000000000e maeb RXF_FRRDF "multiply and add short bfp" g5 esa,zarch
b31f msdbr RRF_F0FF "multiply and subtract long bfp" g5 esa,zarch
ed000000001f msdb RXF_FRRDF "multiply and subtract long bfp" g5 esa,zarch
b30f msebr RRF_F0FF "multiply and subtract short bfp" g5 esa,zarch
ed000000000f mseb RXF_FRRDF "multiply and subtract short bfp" g5 esa,zarch
b384 sfpc RRE_RR_OPT "set fpc" g5 esa,zarch
b299 srnm S_RD "set rounding mode" g5 esa,zarch
b316 sqxbr RRE_FEFE "square root extended bfp" g5 esa,zarch
b315 sqdbr RRE_FF "square root long bfp" g5 esa,zarch
ed0000000015 sqdb RXE_FRRD "square root long bfp" g5 esa,zarch
b314 sqebr RRE_FF "square root short bfp" g5 esa,zarch
ed0000000014 sqeb RXE_FRRD "square root short bfp" g5 esa,zarch
b29c stfpc S_RD "store fpc" g5 esa,zarch
b34b sxbr RRE_FEFE "subtract extended bfp" g5 esa,zarch
b31b sdbr RRE_FF "subtract long bfp" g5 esa,zarch
ed000000001b sdb RXE_FRRD "subtract long bfp" g5 esa,zarch
b30b sebr RRE_FF "subtract short bfp" g5 esa,zarch
ed000000000b seb RXE_FRRD "subtract short bfp" g5 esa,zarch
ed0000000012 tcxb RXE_FERRD "test data class extended bfp" g5 esa,zarch
ed0000000011 tcdb RXE_FRRD "test data class long bfp" g5 esa,zarch
ed0000000010 tceb RXE_FRRD "test data class short bfp" g5 esa,zarch
b274 siga S_RD "signal adapter" g5 esa,zarch
b2a6 cuutf RRE_RERE "convert unicode to utf-8" g5 esa,zarch
b2a7 cutfu RRE_RR "convert utf-8 to unicode" g5 esa,zarch
ee plo SS_RRRDRD2 "perform locked operation" g5 esa,zarch
b25a bsa RRE_RR "branch and set authority" g5 esa,zarch
b277 rp S_RD "resume program" g5 esa,zarch
0107 sckpf E "set clock programmable field" g5 esa,zarch
b27d stsi S_RD "store system information" g5 esa,zarch
01ff trap2 E "trap" g5 esa,zarch
b2ff trap4 S_RD "trap4" g5 esa,zarch
b278 stcke S_RD "store clock extended" g5 esa,zarch
b2a5 tre RRE_RER "translate extended" g5 esa,zarch
eb000000008e mvclu RSE_RERERD "move long unicode" g5 esa,zarch
e9 pka SS_L2RDRD "pack ascii" g5 esa,zarch
e1 pku SS_L2RDRD "pack unicode" g5 esa,zarch
b993 troo RRE_RER "translate one to one" g5 esa,zarch
b992 trot RRE_RER "translate one to two" g5 esa,zarch
b991 trto RRE_RER "translate two to one" g5 esa,zarch
b990 trtt RRE_RER "translate two to two" g5 esa,zarch
ea unpka SS_L0RDRD "unpack ascii" g5 esa,zarch
e2 unpku SS_L0RDRD "unpack unicode" g5 esa,zarch
b358 thder RRE_FF "convert short bfp to long hfp" g5 esa,zarch
b359 thdr RRE_FF "convert long bfp to long hfp" g5 esa,zarch
b350 tbedr RRF_U0FF "convert long hfp to short bfp" g5 esa,zarch
b351 tbdr RRF_U0FF "convert long hfp to long bfp" g5 esa,zarch
b374 lzer RRE_F0 "load short zero" g5 esa,zarch
b375 lzdr RRE_F0 "load long zero" g5 esa,zarch
b376 lzxr RRE_FE0 "load extended zero" g5 esa,zarch
# Here are the new esame instructions:
b946 bctgr RRE_RR "branch on count 64" z900 zarch
b900 lpgr RRE_RR "load positive 64" z900 zarch
b910 lpgfr RRE_RR "load positive 64<32" z900 zarch
b901 lngr RRE_RR "load negative 64" z900 zarch
b911 lngfr RRE_RR "load negative 64<32" z900 zarch
b902 ltgr RRE_RR "load and test 64" z900 zarch
b912 ltgfr RRE_RR "load and test 64<32" z900 zarch
b903 lcgr RRE_RR "load complement 64" z900 zarch
b913 lcgfr RRE_RR "load complement 64<32" z900 zarch
b980 ngr RRE_RR "and 64" z900 zarch
b921 clgr RRE_RR "compare logical 64" z900 zarch
b931 clgfr RRE_RR "compare logical 64<32" z900 zarch
b981 ogr RRE_RR "or 64" z900 zarch
b982 xgr RRE_RR "exclusive or 64" z900 zarch
b904 lgr RRE_RR "load 64" z900 zarch
b914 lgfr RRE_RR "load 64<32" z900 zarch
b920 cgr RRE_RR "compare 64" z900 zarch
b930 cgfr RRE_RR "compare 64<32" z900 zarch
b908 agr RRE_RR "add 64" z900 zarch
b918 agfr RRE_RR "add 64<32" z900 zarch
b909 sgr RRE_RR "subtract 64" z900 zarch
b919 sgfr RRE_RR "subtract 64<32" z900 zarch
b90a algr RRE_RR "add logical 64" z900 zarch
b91a algfr RRE_RR "add logical 64<32" z900 zarch
b90b slgr RRE_RR "subtract logical 64" z900 zarch
b91b slgfr RRE_RR "subtract logical 64<32" z900 zarch
e30000000046 bctg RXE_RRRD "branch on count 64" z900 zarch
e3000000002e cvdg RXE_RRRD "convert to decimal 64" z900 zarch
e3000000000e cvbg RXE_RRRD "convert to binary 64" z900 zarch
e30000000024 stg RXE_RRRD "store 64" z900 zarch
e30000000080 ng RXE_RRRD "and 64" z900 zarch
e30000000021 clg RXE_RRRD "compare logical 64" z900 zarch
e30000000031 clgf RXE_RRRD "compare logical 64<32" z900 zarch
e30000000081 og RXE_RRRD "or 64" z900 zarch
e30000000082 xg RXE_RRRD "exclusive or 64" z900 zarch
e30000000004 lg RXE_RRRD "load 64" z900 zarch
e30000000014 lgf RXE_RRRD "load 64<32" z900 zarch
e30000000015 lgh RXE_RRRD "load halfword 64" z900 zarch
e30000000020 cg RXE_RRRD "compare 64" z900 zarch
e30000000030 cgf RXE_RRRD "compare 64<32" z900 zarch
e30000000008 ag RXE_RRRD "add 64" z900 zarch
e30000000018 agf RXE_RRRD "add 64<32" z900 zarch
e30000000009 sg RXE_RRRD "subtract 64" z900 zarch
e30000000019 sgf RXE_RRRD "subtract 64<32" z900 zarch
e3000000000a alg RXE_RRRD "add logical 64" z900 zarch
e3000000001a algf RXE_RRRD "add logical 64<32" z900 zarch
e3000000000b slg RXE_RRRD "subtract logical 64" z900 zarch
e3000000001b slgf RXE_RRRD "subtract logical 64<32" z900 zarch
e3000000000c msg RXE_RRRD "multiply single 64" z900 zarch
e3000000001c msgf RXE_RRRD "multiply single 64<32" z900 zarch
ec0000000044 brxhg RIE_RRP "branch relative on index high 64" z900 zarch
ec0000000045 brxlg RIE_RRP "branch relative on index low or equal 64" z900 zarch
eb0000000044 bxhg RSE_RRRD "branch on index high 64" z900 zarch
eb0000000045 bxleg RSE_RRRD "branch on index low or equal 64" z900 zarch
eb000000000c srlg RSE_RRRD "shift right single logical 64" z900 zarch
eb000000000d sllg RSE_RRRD "shift left single logical 64" z900 zarch
eb000000000a srag RSE_RRRD "shift right single 64" z900 zarch
eb000000000b slag RSE_RRRD "shift left single 64" z900 zarch
eb0000000024 stmg RSE_RRRD "store multiple 64" z900 zarch
eb0000000026 stmh RSE_RRRD "store multiple high" z900 zarch
eb0000000004 lmg RSE_RRRD "load multiple 64" z900 zarch
eb0000000096 lmh RSE_RRRD "load multiple high" z900 zarch
ef lmd SS_RRRDRD3 "load multiple disjoint" z900 zarch
eb000000000f tracg RSE_RRRD "trace 64" z900 zarch
e30000000003 lrag RXE_RRRD "load real address 64" z900 zarch
e502 strag SSE_RDRD "store read address" z900 zarch
eb0000000025 stctg RSE_CCRD "store control 64" z900 zarch
eb000000002f lctlg RSE_CCRD "load control 64" z900 zarch
eb0000000030 csg RSE_RRRD "compare and swap 64" z900 zarch
eb000000003e cdsg RSE_RERERD "compare double and swap 64" z900 zarch
eb0000000020 clmh RSE_RURD "compare logical characters under mask high" z900 zarch
eb000000002c stcmh RSE_RURD "store characters under mask high" z900 zarch
eb0000000080 icmh RSE_RURD "insert characters under mask high" z900 zarch
a702 tmhh RI_RU "test under mask high high" z900 zarch
a703 tmhl RI_RU "test under mask high low" z900 zarch
c004 brcl RIL_UP "branch relative on condition long" z900 esa,zarch
c004 jg*8 RIL_0P "conditional jump long" z900 esa,zarch
c0f4 jg RIL_0P "unconditional jump long" z900 esa,zarch
c005 brasl RIL_RP "branch relative and save long" z900 esa,zarch
a707 brctg RI_RP "branch relative on count 64" z900 zarch
a709 lghi RI_RI "load halfword immediate 64" z900 zarch
a70b aghi RI_RI "add halfword immediate 64" z900 zarch
a70d mghi RI_RI "multiply halfword immediate 64" z900 zarch
a70f cghi RI_RI "compare halfword immediate 64" z900 zarch
b925 sturg RRE_RR "store using real address 64" z900 zarch
b90e eregg RRE_RR "extract stacked registers 64" z900 zarch
b905 lurag RRE_RR "load using real address 64" z900 zarch
b90c msgr RRE_RR "multiply single 64" z900 zarch
b91c msgfr RRE_RR "multiply single 64<32" z900 zarch
b3a4 cegbr RRE_FR "convert from fixed 64 to short bfp" z900 zarch
b3a5 cdgbr RRE_FR "convert from fixed 64 to long bfp" z900 zarch
b3a6 cxgbr RRE_FER "convert from fixed 64 to extended bfp" z900 zarch
b3a8 cgebr RRF_U0RF "convert to fixed short bfd to 64" z900 zarch
b3a9 cgdbr RRF_U0RF "convert to fixed long bfp to 64" z900 zarch
b3aa cgxbr RRF_U0RFE "convert to fixed extended bfp to 64" z900 zarch
b3c4 cegr RRE_FR "convert from fixed 64 to short hfp" z900 zarch
b3c5 cdgr RRE_FR "convert from fixed 64 to long hfp" z900 zarch
b3c6 cxgr RRE_FER "convert from fixed 64 to extended hfp" z900 zarch
b3c8 cger RRF_U0RF "convert to fixed short hfp to 64" z900 zarch
b3c9 cgdr RRF_U0RF "convert to fixed long hfp to 64" z900 zarch
b3ca cgxr RRF_U0RFE "convert to fixed extended hfp to 64" z900 zarch
010b tam E "test addressing mode" z900 esa,zarch
010c sam24 E "set addressing mode 24" z900 esa,zarch
010d sam31 E "set addressing mode 31" z900 esa,zarch
010e sam64 E "set addressing mode 64" z900 zarch
a500 iihh RI_RU "insert immediate high high" z900 zarch
a501 iihl RI_RU "insert immediate high low" z900 zarch
a502 iilh RI_RU "insert immediate low high" z900 zarch
a503 iill RI_RU "insert immediate low low" z900 zarch
a504 nihh RI_RU "and immediate high high" z900 zarch
a505 nihl RI_RU "and immediate high low" z900 zarch
a506 nilh RI_RU "and immediate low high" z900 zarch
a507 nill RI_RU "and immediate low low" z900 zarch
a508 oihh RI_RU "or immediate high high" z900 zarch
a509 oihl RI_RU "or immediate high low" z900 zarch
a50a oilh RI_RU "or immediate low high" z900 zarch
a50b oill RI_RU "or immediate low low" z900 zarch
a50c llihh RI_RU "load logical immediate high high" z900 zarch
a50d llihl RI_RU "load logical immediate high low" z900 zarch
a50e llilh RI_RU "load logical immediate low high" z900 zarch
a50f llill RI_RU "load logical immediate low low" z900 zarch
b2b1 stfl S_RD "store facility list" z900 esa,zarch
b2b2 lpswe S_RD "load psw extended" z900 zarch
b90d dsgr RRE_RER "divide single 64" z900 zarch
b90f lrvgr RRE_RR "load reversed 64" z900 zarch
b916 llgfr RRE_RR "load logical 64<32" z900 zarch
b917 llgtr RRE_RR "load logical thirty one bits" z900 zarch
b91d dsgfr RRE_RER "divide single 64<32" z900 zarch
b91f lrvr RRE_RR "load reversed 32" z900 esa,zarch
b986 mlgr RRE_RER "multiply logical 64" z900 zarch
b987 dlgr RRE_RER "divide logical 64" z900 zarch
b988 alcgr RRE_RR "add logical with carry 64" z900 zarch
b989 slbgr RRE_RR "subtract logical with borrow 64" z900 zarch
b98d epsw RRE_RR "extract psw" z900 esa,zarch
b996 mlr RRE_RER "multiply logical 32" z900 esa,zarch
b997 dlr RRE_RER "divide logical 32" z900 esa,zarch
b998 alcr RRE_RR "add logical with carry 32" z900 esa,zarch
b999 slbr RRE_RR "subtract logical with borrow 32" z900 esa,zarch
b99d esea RRE_R0 "extract and set extended authority" z900 zarch
c000 larl RIL_RP "load address relative long" z900 esa,zarch
e3000000000d dsg RXE_RERRD "divide single 64" z900 zarch
e3000000000f lrvg RXE_RRRD "load reversed 64" z900 zarch
e30000000016 llgf RXE_RRRD "load logical 64<32" z900 zarch
e30000000017 llgt RXE_RRRD "load logical thirty one bits" z900 zarch
e3000000001d dsgf RXE_RERRD "divide single 64<32" z900 zarch
e3000000001e lrv RXE_RRRD "load reversed 32" z900 esa,zarch
e3000000001f lrvh RXE_RRRD "load reversed 16" z900 esa,zarch
e3000000002f strvg RXE_RRRD "store reversed 64" z900 zarch
e3000000003e strv RXE_RRRD "store reversed 32" z900 esa,zarch
e3000000003f strvh RXE_RRRD "store reversed 64" z900 esa,zarch
e30000000086 mlg RXE_RERRD "multiply logical 64" z900 zarch
e30000000087 dlg RXE_RERRD "divide logical 64" z900 zarch
e30000000088 alcg RXE_RRRD "add logical with carry 64" z900 zarch
e30000000089 slbg RXE_RRRD "subtract logical with borrow 64" z900 zarch
e3000000008e stpq RXE_RRRD "store pair to quadword" z900 zarch
e3000000008f lpq RXE_RERRD "load pair from quadword" z900 zarch
e30000000096 ml RXE_RERRD "multiply logical 32" z900 esa,zarch
e30000000097 dl RXE_RERRD "divide logical 32" z900 esa,zarch
e30000000098 alc RXE_RRRD "add logical with carry 32" z900 esa,zarch
e30000000099 slb RXE_RRRD "subtract logical with borrow 32" z900 esa,zarch
e30000000090 llgc RXE_RRRD "load logical character" z900 zarch
e30000000091 llgh RXE_RRRD "load logical halfword" z900 zarch
eb000000001c rllg RSE_RRRD "rotate left single logical 64" z900 zarch
eb000000001d rll RSE_RRRD "rotate left single logical 32" z900 esa,zarch
b369 cxr RRE_FEFE "compare extended hfp" g5 esa,zarch
b3b6 cxfr RRE_FER "convert from fixed 32 to extended hfp" g5 esa,zarch
b3b5 cdfr RRE_FR "convert from fixed 32 to long hfp" g5 esa,zarch
b3b4 cefr RRE_FR "convert from fixed 32 to short hfp" g5 esa,zarch
b3ba cfxr RRF_U0RFE "convert to fixed extended hfp to 32" g5 esa,zarch
b3b9 cfdr RRF_U0RF "convert to fixed long hfp to 32" g5 esa,zarch
b3b8 cfer RRF_U0RF "convert to fixed short hfp to 32" g5 esa,zarch
b362 ltxr RRE_FEFE "load and test extended hfp" g5 esa,zarch
b363 lcxr RRE_FEFE "load complement extended hfp" g5 esa,zarch
b367 fixr RRE_FEFE "load fp integer extended hfp" g5 esa,zarch
b37f fidr RRE_FF "load fp integer long hfp" g5 esa,zarch
b377 fier RRE_FF "load fp integer short hfp" g5 esa,zarch
b325 lxdr RRE_FEF "load lengthened long to extended hfp" g5 esa,zarch
ed0000000025 lxd RXE_FERRD "load lengthened long to extended hfp" g5 esa,zarch
b326 lxer RRE_FEF "load lengthened short to extended hfp" g5 esa,zarch
ed0000000026 lxe RXE_FERRD "load lengthened short to extended hfp" g5 esa,zarch
b324 lder RRE_FF "load lengthened short to long hfp" g5 esa,zarch
ed0000000024 lde RXE_FRRD "load lengthened short to long hfp" g5 esa,zarch
b361 lnxr RRE_FEFE "load negative extended hfp" g5 esa,zarch
b360 lpxr RRE_FEFE "load positive extended hfp" g5 esa,zarch
b366 lexr RRE_FFE "load rounded extended to short hfp" g5 esa,zarch
b337 meer RRE_FF "multiply short hfp" g5 esa,zarch
ed0000000037 mee RXE_FRRD "multiply short hfp" g5 esa,zarch
b336 sqxr RRE_FEFE "square root extended hfp" g5 esa,zarch
ed0000000034 sqe RXE_FRRD "square root short hfp" g5 esa,zarch
ed0000000035 sqd RXE_FRRD "square root long hfp" g5 esa,zarch
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
eb00000000c0 tp RSL_R0RD "test decimal" g5 esa,zarch
b365 lxr RRE_FEFE "load extended fp" g5 esa,zarch
b22e pgin RRE_RR "page in" g5 esa,zarch
b22f pgout RRE_RR "page out" g5 esa,zarch
b276 xsch S_00 "cancel subchannel" g5 esa,zarch
# New long displacement instructions on z990
e3000000005a ay RXY_RRRD "add with long offset" z990 zarch
e3000000007a ahy RXY_RRRD "add halfword with long offset" z990 zarch
e3000000005e aly RXY_RRRD "add logical with long offset" z990 zarch
eb0000000054 niy SIY_URD "and immediate with long offset" z990 zarch
e30000000054 ny RXY_RRRD "and with long offset" z990 zarch
e30000000059 cy RXY_RRRD "compare with long offset" z990 zarch
eb0000000014 csy RSY_RRRD "compare and swap with long offset" z990 zarch
eb0000000031 cdsy RSY_RERERD "compare double and swap with long offset" z990 zarch
e30000000079 chy RXY_RRRD "compare halfword with long offset" z990 zarch
e30000000055 cly RXY_RRRD "compare logical with long offset" z990 zarch
eb0000000055 cliy SIY_URD "compare logical immediate with long offset" z990 zarch
eb0000000021 clmy RSY_RURD "compare logical characters under mask with long offset" z990 zarch
e30000000006 cvby RXY_RRRD "convert to binary with long offset" z990 zarch
e30000000026 cvdy RXY_RRRD "convert to decimal with long offset" z990 zarch
eb0000000057 xiy SIY_URD "exclusive or immediate with long offset" z990 zarch
e30000000057 xy RXY_RRRD "exclusive or with long offset" z990 zarch
e30000000073 icy RXY_RRRD "insert character with long offset" z990 zarch
eb0000000081 icmy RSY_RURD "insert characters with long offset" z990 zarch
ed0000000065 ldy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000064 ley RXY_FRRD "load (short) with long offset" z990 zarch
e30000000058 ly RXY_RRRD "load with long offset" z990 zarch
eb000000009a lamy RSY_AARD "load access multiple" z990 zarch
e30000000071 lay RXY_RRRD "load address with long offset" z990 zarch
e30000000076 lb RXY_RRRD "load byte with long offset" z990 zarch
e30000000077 lgb RXY_RRRD "load byte with long offset 64" z990 zarch
e30000000078 lhy RXY_RRRD "load halfword with long offset" z990 zarch
eb0000000098 lmy RSY_RRRD "load multiple with long offset" z990 zarch
e30000000013 lray RXY_RRRD "load real address with long offset" z990 zarch
eb0000000052 mviy SIY_URD "move immediate with long offset" z990 zarch
e30000000051 msy RXY_RRRD "multiply single with long offset" z990 zarch
eb0000000056 oiy SIY_URD "or immediate with long offset" z990 zarch
e30000000056 oy RXY_RRRD "or with long offset" z990 zarch
ed0000000067 stdy RXY_FRRD "store (long) with long offset" z990 zarch
ed0000000066 stey RXY_FRRD "store (short) with long offset" z990 zarch
e30000000050 sty RXY_RRRD "store with long offset" z990 zarch
eb000000009b stamy RSY_AARD "store access multiple with long offset" z990 zarch
e30000000072 stcy RXY_RRRD "store character with long offset" z990 zarch
eb000000002d stcmy RSY_RURD "store characters under mask with long offset" z990 zarch
e30000000070 sthy RXY_RRRD "store halfword with long offset" z990 zarch
eb0000000090 stmy RSY_RRRD "store multiple with long offset" z990 zarch
e3000000005b sy RXY_RRRD "subtract with long offset" z990 zarch
e3000000007b shy RXY_RRRD "subtract halfword with long offset" z990 zarch
e3000000005f sly RXY_RRRD "subtract logical with long offset" z990 zarch
eb0000000051 tmy SIY_URD "test under mask with long offset" z990 zarch
# 'old' instructions extended to long displacement
# these instructions are entered into the opcode table twice.
e30000000003 lrag RXY_RRRD "load real address with long offset 64" z990 zarch
e30000000004 lg RXY_RRRD "	 load 64" z990 zarch
e30000000008 ag RXY_RRRD "add with long offset 64" z990 zarch
e30000000009 sg RXY_RRRD "subtract with long offset 64" z990 zarch
e3000000000a alg RXY_RRRD "add logical with long offset 64" z990 zarch
e3000000000b slg RXY_RRRD "subtract logical with long offset 64" z990 zarch
e3000000000c msg RXY_RRRD "multiply single with long offset 64" z990 zarch
e3000000000d dsg RXY_RERRD "divide single 64" z990 zarch
e3000000000e cvbg RXY_RRRD "convert to binary with long offset 64" z990 zarch
e3000000000f lrvg RXY_RRRD "load reversed 64" z990 zarch
e30000000014 lgf RXY_RRRD "load 64<32" z990 zarch
e30000000015 lgh RXY_RRRD "load halfword 64" z990 zarch
e30000000016 llgf RXY_RRRD "load logical 64<32" z990 zarch
e30000000017 llgt RXY_RRRD "load logical thirty one bits" z990 zarch
e30000000018 agf RXY_RRRD "add with long offset 64<32" z990 zarch
e30000000019 sgf RXY_RRRD "subtract with long offset 64<32" z990 zarch
e3000000001a algf RXY_RRRD "add logical with long offset 64<32" z990 zarch
e3000000001b slgf RXY_RRRD "subtract logical with long offset 64<32" z990 zarch
e3000000001c msgf RXY_RRRD "multiply single with long offset 64<32" z990 zarch
e3000000001d dsgf RXY_RERRD "divide single 64<32" z990 zarch
e3000000001e lrv RXY_RRRD "load reversed 32" z990 esa,zarch
e3000000001f lrvh RXY_RRRD "load reversed 16" z990 esa,zarch
e30000000020 cg RXY_RRRD "compare with long offset 64" z990 zarch
e30000000021 clg RXY_RRRD "compare logical with long offset 64" z990 zarch
e30000000024 stg RXY_RRRD "store with long offset 64" z990 zarch
e3000000002e cvdg RXY_RRRD "convert to decimal with long offset 64" z990 zarch
e3000000002f strvg RXY_RRRD "store reversed 64" z990 zarch
e30000000030 cgf RXY_RRRD "compare with long offset 64<32" z990 zarch
e30000000031 clgf RXY_RRRD "compare logical with long offset 64<32" z990 zarch
e3000000003e strv RXY_RRRD "store reversed 32" z990 esa,zarch
e3000000003f strvh RXY_RRRD "store reversed 64" z990 zarch
e30000000046 bctg RXY_RRRD "branch on count 64" z990 zarch
e30000000080 ng RXY_RRRD "and with long offset 64" z990 zarch
e30000000081 og RXY_RRRD "or with long offset 64" z990 zarch
e30000000082 xg RXY_RRRD "exclusive or with long offset 64" z990 zarch
e30000000086 mlg RXY_RERRD "multiply logical 64" z990 zarch
e30000000087 dlg RXY_RERRD "divide logical 64" z990 zarch
e30000000088 alcg RXY_RRRD "add logical with carry 64" z990 zarch
e30000000089 slbg RXY_RRRD "subtract logical with borrow 64" z990 zarch
e3000000008e stpq RXY_RRRD "store pair to quadword" z990 zarch
e3000000008f lpq RXY_RERRD "load pair from quadword" z990 zarch
e30000000090 llgc RXY_RRRD "load logical character" z990 zarch
e30000000091 llgh RXY_RRRD "load logical halfword" z990 zarch
e30000000096 ml RXY_RERRD "multiply logical 32" z990 esa,zarch
e30000000097 dl RXY_RERRD "divide logical 32" z990 esa,zarch
e30000000098 alc RXY_RRRD "add logical with carry 32" z990 esa,zarch
e30000000099 slb RXY_RRRD "subtract logical with borrow 32" z990 esa,zarch
eb0000000004 lmg RSY_RRRD "load multiple with long offset 64" z990 zarch
eb000000000a srag RSY_RRRD "shift right single 64" z990 zarch
eb000000000b slag RSY_RRRD "shift left single 64" z990 zarch
eb000000000c srlg RSY_RRRD "shift right single logical 64" z990 zarch
eb000000000d sllg RSY_RRRD "shift left single logical 64" z990 zarch
eb000000000f tracg RSY_RRRD "trace 64" z990 zarch
eb000000001c rllg RSY_RRRD "rotate left single logical 64" z990 zarch
eb000000001d rll RSY_RRRD "rotate left single logical 32" z990 esa,zarch
eb0000000020 clmh RSY_RURD "compare logical characters under mask high with long offset" z990 zarch
eb0000000024 stmg RSY_RRRD "store multiple with long offset 64" z990 zarch
eb0000000025 stctg RSY_CCRD "store control 64" z990 zarch
eb0000000026 stmh RSY_RRRD "store multiple high" z990 zarch
eb000000002c stcmh RSY_RURD "store characters under mask high with long offset" z990 zarch
eb000000002f lctlg RSY_CCRD "load control 64" z990 zarch
eb0000000030 csg RSY_RRRD "compare and swap with long offset 64" z990 zarch
eb000000003e cdsg RSY_RERERD "compare double and swap with long offset 64" z990 zarch
eb0000000044 bxhg RSY_RRRD "branch on index high 64" z990 zarch
eb0000000045 bxleg RSY_RRRD "branch on index low or equal 64" z990 zarch
eb0000000080 icmh RSY_RURD "insert characters under mask high with long offset" z990 zarch
eb000000008e mvclu RSY_RERERD "move long unicode" z990 esa,zarch
eb000000008f clclu RSY_RRRD "compare logical long unicode with long offset" z990 esa,zarch
eb0000000096 lmh RSY_RRRD "load multiple high" z990 zarch
# new z990 instructions
b98a cspg RRE_RR "compare and swap and purge" z990 zarch
b98e idte RRF_R0RR "invalidate dat table entry" z990 zarch
b33e madr RRF_F0FF "multiply and add long hfp" z990 esa,zarch
ed000000003e mad RXF_FRRDF "multiply and add long hfp" z990 esa,zarch
b32e maer RRF_F0FF "multiply and add short hfp" z990 esa,zarch
ed000000002e mae RXF_FRRDF "multiply and add short hfp" z990 esa,zarch
b33f msdr RRF_F0FF "multiply and subtract long hfp" z990 esa,zarch
ed000000003f msd RXF_FRRDF "multiply and subtract long hfp" z990 esa,zarch
b32f mser RRF_F0FF "mutliply and subtract short hfp" z990 esa,zarch
ed000000002f mse RXF_FRRDF "multiply and subttract short hfp" z990 esa,zarch
b92e km RRE_RR "cipher message" z990 esa,zarch
b92f kmc RRE_RR "cipher message with chaining" z990 esa,zarch
b93e kimd RRE_RR "compute intermediate message digest" z990 esa,zarch
b93f klmd RRE_RR "compute last message digest" z990 esa,zarch
b91e kmac RRE_RR "compute message authentication code" z990 esa,zarch
b99a epair RRE_R0 "extract primary ASN and instance" z990 esa,zarch
b99b esair RRE_R0 "extract secondary ASN and instance" z990 esa,zarch
b99e pti RRE_RR "program transfer with instance" z990 esa,zarch
b99f ssair RRE_R0 "set secondary ASN with instance" z990 esa,zarch

# z9-109 extended immediate instructions
c209 afi RIL_RI "add immediate 32" z9-109 zarch
c208 agfi RIL_RI "add immediate 64<32" z9-109 zarch
c20b alfi RIL_RU "add logical immediate 32" z9-109 zarch
c20a algfi RIL_RU "add logical immediate 64<32" z9-109 zarch
c00a nihf RIL_RU "and immediate high" z9-109 zarch
c00b nilf RIL_RU "and immediate low" z9-109 zarch
c20d cfi RIL_RI "compare immediate 32" z9-109 zarch
c20c cgfi RIL_RI "compare immediate 64<32" z9-109 zarch
c20f clfi RIL_RU "compare logical immediate 32" z9-109 zarch
c20e clgfi RIL_RU "compare logical immediate 64<32" z9-109 zarch
c006 xihf RIL_RU "exclusive or immediate high" z9-109 zarch
c007 xilf RIL_RU "exclusive or immediate low" z9-109 zarch
c008 iihf RIL_RU "insert immediate high" z9-109 zarch
c009 iilf RIL_RU "insert immediate low" z9-109 zarch
# z9-109 misc instruction
b983 flogr RRE_RER "find leftmost one" z9-109 zarch
e30000000012 lt RXY_RRRD "load and test 32" z9-109 zarch
e30000000002 ltg RXY_RRRD "load and test 64" z9-109 zarch
b926 lbr RRE_RR "load byte 32" z9-109 zarch
b906 lgbr RRE_RR "load byte 64" z9-109 zarch
b927 lhr RRE_RR "load halfword 32" z9-109 zarch
b907 lghr RRE_RR "load halfword 64" z9-109 zarch
c001 lgfi RIL_RI "load immediate 64<32" z9-109 zarch
e30000000094 llc RXY_RRRD "load logical character 32" z9-109 zarch
b994 llcr RRE_RR "load logical character 32" z9-109 zarch
b984 llgcr RRE_RR "load logical character 64" z9-109 zarch
e30000000095 llh RXY_RRRD "load logical halfword 32" z9-109 zarch
b995 llhr RRE_RR "load logical halfword 32" z9-109 zarch
b985 llghr RRE_RR "load logical halfword 64" z9-109 zarch
c00e llihf RIL_RU "load logical immediate high" z9-109 zarch
c00f llilf RIL_RU "load logical immediate low" z9-109 zarch
c00c oihf RIL_RU "or immediate high" z9-109 zarch
c00d oilf RIL_RU "or immediate low" z9-109 zarch
c205 slfi RIL_RU "subtract logical immediate 32" z9-109 zarch
c204 slgfi RIL_RU "subtract logical immediate 64<32" z9-109 zarch
0104 ptff E "perform timing facility function" z9-109 zarch
# z9-109 store facility list extended
b2b0 stfle S_RD "store facility list extended" z9-109 zarch
# z9-109 store clock fast
b27c stckf S_RD "store clock fast" z9-109 zarch
# z9-109 move with optional specifications instruction
c800 mvcos SSF_RRDRD "move with optional specifications" z9-109 zarch
# z9-109 load page-table-entry address instruction
b9aa lptea RRF_RURR2 "load page-table-entry address" z9-109 zarch
# z9-109 conditional sske facility, sske instruction entered twice
b22b sske RRF_M0RR "set storage key extended" z9-109 zarch
# z9-109 etf2-enhancement facility, instructions entered twice
b993 troo RRF_M0RERE "translate one to one" z9-109 esa,zarch
b992 trot RRF_M0RERE "translate one to two" z9-109 esa,zarch
b991 trto RRF_M0RERE "translate two to one" z9-109 esa,zarch
b990 trtt RRF_M0RERE "translate two to two" z9-109 esa,zarch
# z9-109 etf3-enhancement facility, some instructions entered twice
b9b1 cu24 RRF_M0RERE "convert utf-16 to utf-32" z9-109 zarch
b2a6 cu21 RRF_M0RERE "convert utf-16 to utf-8" z9-109 zarch
b2a6 cuutf RRF_M0RERE "convert unicode to utf-8" z9-109 zarch
b9b3 cu42 RRE_RERE "convert utf-32 to utf-16" z9-109 zarch
b9b2 cu41 RRE_RERE "convert utf-32 to utf-8" z9-109 zarch
b2a7 cu12 RRF_M0RERE "convert utf-8 to utf-16" z9-109 zarch
b2a7 cutfu RRF_M0RERE "convert utf-8 to unicode" z9-109 zarch
b9b0 cu14 RRF_M0RERE "convert utf-8 to utf-32" z9-109 zarch
b9be srstu RRE_RR "search string unicode" z9-109 zarch
d0 trtr SS_L0RDRD "tranlate and test reverse" z9-109 zarch
# z9-109 unnormalized hfp multiply & multiply and add
b33b myr RRF_FE0FF "multiply unnormalized long hfp" z9-109 zarch
b33d myhr RRF_F0FF "multiply unnormalized long hfp high" z9-109 zarch
b339 mylr RRF_F0FF "multiply unnormalized long hfp low" z9-109 zarch
ed000000003b my RXF_FRRDFE "multiply unnormalized long hfp" z9-109 zarch
ed000000003d myh RXF_FRRDF "multiply unnormalized long hfp high" z9-109 zarch
ed0000000039 myl RXF_FRRDF "multiply unnormalized long hfp low" z9-109 zarch
b33a mayr RRF_F0FF "multiply and add unnormalized long hfp" z9-109 zarch
b33c mayhr RRF_F0FF "multiply and add unnormalized long hfp high" z9-109 zarch
b338 maylr RRF_F0FF "multiply and add unnormalized long hfp low" z9-109 zarch
ed000000003a may RXF_FRRDF "multiply and add unnormalized long hfp" z9-109 zarch
ed000000003c mayh RXF_FRRDF "multiply and add unnormalized long hfp high" z9-109 zarch
ed0000000038 mayl RXF_FRRDF "multiply and add unnormalized long hfp low" z9-109 zarch
b370 lpdfr RRE_FF "load positive no cc" z9-ec zarch
b371 lndfr RRE_FF "load negative no cc" z9-ec zarch
b372 cpsdr RRF_F0FF2 "copy sign" z9-ec zarch
b373 lcdfr RRE_FF "load complement no cc" z9-ec zarch
b3c1 ldgr RRE_FR "load fpr from gr" z9-ec zarch
b3cd lgdr RRE_RF "load gr from fpr" z9-ec zarch
b3d2 adtr RRR_F0FF "add long dfp" z9-ec zarch
b3da axtr RRR_FE0FEFE "add extended dfp" z9-ec zarch
b3e4 cdtr RRE_FF "compare long dfp" z9-ec zarch
b3ec cxtr RRE_FEFE "compare extended dfp" z9-ec zarch
b3e0 kdtr RRE_FF "compare and signal long dfp" z9-ec zarch
b3e8 kxtr RRE_FF "compare and signal extended dfp" z9-ec zarch
b3f4 cedtr RRE_FF "compare exponent long dfp" z9-ec zarch
b3fc cextr RRE_FEFE "compare exponent extended dfp" z9-ec zarch
b3f1 cdgtr RRE_FR "convert from fixed long dfp" z9-ec zarch
b3f9 cxgtr RRE_FER "convert from fixed extended dfp" z9-ec zarch
b3f3 cdstr RRE_FR "convert from signed bcd long dfp" z9-ec zarch
b3fb cxstr RRE_FR "convert from signed bcd extended dfp" z9-ec zarch
b3f2 cdutr RRE_FR "convert from unsigned bcd to long dfp" z9-ec zarch
b3fa cxutr RRE_FER "convert from unsigned bcd to extended dfp" z9-ec zarch
b3e1 cgdtr RRF_U0RF "convert from long dfp to fixed" z9-ec zarch
b3e9 cgxtr RRF_U0RFE "convert from extended dfp to fixed" z9-ec zarch
b3e3 csdtr RRE_RF "convert from long dfp to signed bcd" z9-ec zarch
b3eb csxtr RRE_RFE "convert from extended dfp to signed bcd" z9-ec zarch
b3e2 cudtr RRE_RF "convert from long dfp to unsigned bcd" z9-ec zarch
b3ea cuxtr RRE_RFE "convert from extended dfp to unsigned bcd" z9-ec zarch
b3d1 ddtr RRR_F0FF "divide long dfp" z9-ec zarch
b3d9 dxtr RRR_FE0FEFE "divide extended dfp" z9-ec zarch
b3e5 eedtr RRE_RF "extract biased exponent from long dfp" z9-ec zarch
b3ed eextr RRE_RFE "extract biased exponent from extended dfp" z9-ec zarch
b3e7 esdtr RRE_RF "extract significance from long dfp" z9-ec zarch
b3ef esxtr RRE_RFE "extract significance from extended dfp" z9-ec zarch
b3f6 iedtr RRF_F0FR "insert biased exponent long dfp" z9-ec zarch
b3fe iextr RRF_FE0FER "insert biased exponent extended dfp" z9-ec zarch
b3d6 ltdtr RRE_FF "load and test long dfp" z9-ec zarch
b3de ltxtr RRE_FEFE "load and test extended dfp" z9-ec zarch
b3d7 fidtr RRF_UUFF "load fp integer long dfp" z9-ec zarch
b3df fixtr RRF_UUFEFE "load fp integer extended dfp" z9-ec zarch
b2bd lfas S_RD "load fpd and signal" z9-ec zarch
b3d4 ldetr RRF_0UFF "load lengthened long dfp" z9-ec zarch
b3dc lxdtr RRF_0UFEF "load lengthened extended dfp" z9-ec zarch
b3d5 ledtr RRF_UUFF "load rounded long dfp" z9-ec zarch
b3dd ldxtr RRF_UUFFE "load rounded extended dfp" z9-ec zarch
b3d0 mdtr RRR_F0FF "multiply long dfp" z9-ec zarch
b3d8 mxtr RRR_FE0FEFE "multiply extended dfp" z9-ec zarch
b3f5 qadtr RRF_FUFF "Quantize long dfp" z9-ec zarch
b3fd qaxtr RRF_FEUFEFE "Quantize extended dfp" z9-ec zarch
b3f7 rrdtr RRF_FFRU "Reround long dfp" z9-ec zarch
b3ff rrxtr RRF_FEFERU "Reround extended dfp" z9-ec zarch
b2b9 srnmt S_RD "set rounding mode dfp" z9-ec zarch
b385 sfasr RRE_R0 "set fpc and signal" z9-ec zarch
ed0000000040 sldt RXF_FRRDF "shift coefficient left long dfp" z9-ec zarch
ed0000000048 slxt RXF_FERRDFE "shift coefficient left extended dfp" z9-ec zarch
ed0000000041 srdt RXF_FRRDF "shift coefficient right long dfp" z9-ec zarch
ed0000000049 srxt RXF_FERRDFE "shift coefficient right extended dfp" z9-ec zarch
b3d3 sdtr RRR_F0FF "subtract long dfp" z9-ec zarch
b3db sxtr RRR_FE0FEFE "subtract extended dfp" z9-ec zarch
ed0000000050 tdcet RXE_FRRD "test data class short dfp" z9-ec zarch
ed0000000054 tdcdt RXE_FRRD "test data class long dfp" z9-ec zarch
ed0000000058 tdcxt RXE_FERRD "test data class extended dfp" z9-ec zarch
ed0000000051 tdget RXE_FRRD "test data group short dfp" z9-ec zarch
ed0000000055 tdgdt RXE_FRRD "test data group long dfp" z9-ec zarch
ed0000000059 tdgxt RXE_FERRD "test data group extended dfp" z9-ec zarch
010a pfpo E "perform floating point operation" z9-ec zarch
c801 ectg SSF_RRDRD "extract cpu time" z9-ec zarch
c802 csst SSF_RRDRD "compare and swap and store" z9-ec zarch

# The new instructions of the System z10 Enterprise Class
eb000000006a asi SIY_IRD "add immediate (32<8)" z10 zarch
eb000000007a agsi SIY_IRD "add immediate (64<8)" z10 zarch
eb000000006e alsi SIY_IRD "add logical with signed immediate (32<8)" z10 zarch
eb000000007e algsi SIY_IRD "add logical with signed immediate (64<8)" z10 zarch
c60d crl RIL_RP "compare relative long (32)" z10 zarch
c608 cgrl RIL_RP "compare relative long (64)" z10 zarch
c60c cgfrl RIL_RP "compare relative long (64<32)" z10 zarch
ec00000000f6 crb$32 RRS_RRRD0 "compare and branch (32)" z10 zarch
ec00000000f6 crb RRS_RRRDU "compare and branch (32)" z10 zarch
ec00000000e4 cgrb$32 RRS_RRRD0 "compare and branch (64)" z10 zarch
ec00000000e4 cgrb RRS_RRRDU "compare and branch (64)" z10 zarch
ec0000000076 crj$32 RIE_RRP "compare and branch relative (32)" z10 zarch
ec0000000076 crj RIE_RRPU "compare and branch relative (32)" z10 zarch
ec0000000064 cgrj$32 RIE_RRP0 "compare and branch relative (64)" z10 zarch
ec0000000064 cgrj RIE_RRPU "compare and branch relative (64)" z10 zarch
ec00000000fe cib$12 RIS_R0RDI "compare immediate and branch (32<8)" z10 zarch
ec00000000fe cib RIS_RURDI "compare immediate and branch (32<8)" z10 zarch
ec00000000fc cgib$12 RIS_R0RDI "compare immediate and branch (64<8)" z10 zarch
ec00000000fc cgib RIS_RURDI "compare immediate and branch (64<8)" z10 zarch
ec000000007e cij$12 RIE_R0PI "compare immediate and branch relative (32<8)" z10 zarch
ec000000007e cij RIE_RUPI "compare immediate and branch relative (32<8)" z10 zarch
ec000000007c cgij$12 RIE_R0PI "compare immediate and branch relative (64<8)" z10 zarch
ec000000007c cgij RIE_RUPI "compare immediate and branch relative (64<8)" z10 zarch
b97200000000 crt$16 RRF_00RR "compare and trap" z10 zarch
b972 crt RRF_U0RR "compare and trap" z10 zarch
b96000000000 cgrt$16 RRF_00RR "compare and trap 64" z10 zarch
b960 cgrt RRF_U0RR "compare and trap 64" z10 zarch
ec0000000072 cit$32 RIE_R0I0 "compare immediate and trap (32<16)" z10 zarch
ec0000000072 cit RIE_R0IU "compare immediate and trap (32<16)" z10 zarch
ec0000000070 cgit$32 RIE_R0I0 "compare immediate and trap (64<16)" z10 zarch
ec0000000070 cgit RIE_R0IU "compare immediate and trap (64<16)" z10 zarch
e30000000034 cgh RXY_RRRD "compare halfword (64<16)" z10 zarch
e554 chhsi SIL_RDI "compare halfword immediate (16<16)" z10 zarch
e55c chsi SIL_RDI "compare halfword immediate (32<16)" z10 zarch
e558 cghsi SIL_RDI "compare halfword immediate (64<16)" z10 zarch
c605 chrl RIL_RP "compare halfword relative long (32<8)" z10 zarch
c604 cghrl RIL_RP "compare halfword relative long (64<8)" z10 zarch
e555 clhhsi SIL_RDU "compare logical immediate (16<16)" z10 zarch
e55d clfhsi SIL_RDU "compare logical immediate (32<16)" z10 zarch
e559 clghsi SIL_RDU "compare logical immediate (64<16)" z10 zarch
c60f clrl RIL_RP "compare logical relative long (32)" z10 zarch
c60a clgrl RIL_RP "compare logical relative long (64)" z10 zarch
c60e clgfrl RIL_RP "compare logical relative long (64<32)" z10 zarch
c607 clhrl RIL_RP "compare logical relative long (32<16)" z10 zarch
c606 clghrl RIL_RP "compare logical relative long (64<16)" z10 zarch
ec00000000f7 clrb$32 RRS_RRRD0 "compare logical and branch (32)" z10 zarch
ec00000000f7 clrb RRS_RRRDU "compare logical and branch (32)" z10 zarch
ec00000000e5 clgrb$32 RRS_RRRD0 "compare logical and branch (64)" z10 zarch
ec00000000e5 clgrb RRS_RRRDU "compare logical and branch (64)" z10 zarch
ec0000000077 clrj$32 RIE_RRP "compare logical and branch relative (32)" z10 zarch
ec0000000077 clrj RIE_RRPU "compare logical and branch relative (32)" z10 zarch
ec0000000065 clgrj$32 RIE_RRP "compare logical and branch relative (64)" z10 zarch
ec0000000065 clgrj RIE_RRPU "compare logical and branch relative (64)" z10 zarch
ec00000000ff clib$12 RIS_R0RDU "compare logical immediate and branch (32<8)" z10 zarch
ec00000000ff clib RIS_RURDU "compare logical immediate and branch (32<8)" z10 zarch
ec00000000fd clgib$12 RIS_R0RDU "compare logical immediate and branch (64<8)" z10 zarch
ec00000000fd clgib RIS_RURDU "compare logical immediate and branch (64<8)" z10 zarch
ec000000007f clij$12 RIE_R0PU "compare logical immediate and branch relative (32<8)" z10 zarch
ec000000007f clij RIE_RUPU "compare logical immediate and branch relative (32<8)" z10 zarch
ec000000007d clgij$12 RIE_R0PU "compare logical immediate and branch relative (64<8)" z10 zarch
ec000000007d clgij RIE_RUPU "compare logical immediate and branch relative (64<8)" z10 zarch
b97300000000 clrt$16 RRF_00RR "compare logical and trap (32)" z10 zarch
b973 clrt RRF_U0RR "compare logical and trap (32)" z10 zarch
b96100000000 clgrt$16 RRF_00RR "compare logical and trap (64)" z10 zarch
b961 clgrt RRF_U0RR "compare logical and trap (64)" z10 zarch
ec0000000073 clfit$32 RIE_R0U0 "compare logical and trap (32<16)" z10 zarch
ec0000000073 clfit RIE_R0UU "compare logical and trap (32<16)" z10 zarch
ec0000000071 clgit$32 RIE_R0U0 "compare logical and trap (64<16)" z10 zarch
ec0000000071 clgit RIE_R0UU "compare logical and trap (64<16)" z10 zarch
eb000000004c ecag RSY_RRRD "extract cache attribute" z10 zarch
c40d lrl RIL_RP "load relative long (32)" z10 zarch
c408 lgrl RIL_RP "load relative long (64)" z10 zarch
c40c lgfrl RIL_RP "load relative long (64<32)" z10 zarch
e30000000075 laey RXY_RRRD "load address extended" z10 zarch
e30000000032 ltgf RXY_RRRD "load and test (64<32)" z10 zarch
c405 lhrl RIL_RP "load halfword relative long (32<16)" z10 zarch
c404 lghrl RIL_RP "load halfword relative long (64<16)" z10 zarch
c40e llgfrl RIL_RP "load logical relative long (64<32)" z10 zarch
c402 llhrl RIL_RP "load logical halfword relative long (32<16)" z10 zarch
c406 llghrl RIL_RP "load logical halfword relative long (64<16)" z10 zarch
e544 mvhhi SIL_RDI "move (16<16)" z10 zarch
e54c mvhi SIL_RDI "move (32<16)" z10 zarch
e548 mvghi SIL_RDI "move (64<16)" z10 zarch
e3000000005c mfy RXY_RERRD "multiply" z10 zarch
e3000000007c mhy RXY_RRRD "multiply halfword" z10 zarch
c201 msfi RIL_RI "multiply single immediate (32)" z10 zarch
c200 msgfi RIL_RI "multiply single immediate (64)" z10 zarch
e30000000036 pfd RXY_URRD "prefetch data" z10 zarch
c602 pfdrl RIL_UP "prefetch data relative long" z10 zarch
ec0000000054 rnsbg RIE_RRUUU "rotate then and selected bits" z10 zarch
ec0000000057 rxsbg RIE_RRUUU "rotate then exclusive or selected bits" z10 zarch
ec0000000056 rosbg RIE_RRUUU "rotate then or selected bits" z10 zarch
ec0000000055 risbg RIE_RRUUU "rotate then insert selected bits" z10 zarch
c40f strl RIL_RP "store relative long (32)" z10 zarch
c40b stgrl RIL_RP "store relative long (64)" z10 zarch
c407 sthrl RIL_RP "store halfword relative long" z10 zarch
c600 exrl RIL_RP "execute relative long" z10 zarch
af00 mc SI_URD "monitor call" z10 zarch
b9a2 ptf RRE_R0 "perform topology function" z10 zarch
b9af pfmf RRE_RR "perform frame management function" z10 zarch
b9bf trte RRF_M0RER "translate and test extended" z10 zarch
b9bd trtre RRF_M0RER "translate and test reverse extended" z10 zarch
b2ed ecpga RRE_RR "extract coprocessor-group address" z10 zarch
b2e4 ecctr RRE_RR "extract cpu counter" z10 zarch
b2e5 epctr RRE_RR "extract peripheral counter" z10 zarch
b284 lcctl S_RD "load cpu-counter-set controls" z10 zarch
b285 lpctl S_RD "load peripheral-counter-set controls" z10 zarch
b287 lsctl S_RD "load sampling controls" z10 zarch
b28e qctri S_RD "query counter information" z10 zarch
b286 qsi S_RD "query sampling information" z10 zarch
b2e0 scctr RRE_RR "set cpu counter" z10 zarch
b2e1 spctr RRE_RR "set peripheral counter" z10 zarch
b280 lpp S_RD "load program parameter" z10 zarch
b928 pckmo RRE_00 "perform cryptographic key management operation" z10 zarch

# The new instructions of the IBM zEnterprise z196
b9c8 ahhhr RRF_R0RR2 "add high high" z196 zarch
b9d8 ahhlr RRF_R0RR2 "add high low" z196 zarch
cc08 aih RIL_RI "add immediate high" z196 zarch
b9ca alhhhr RRF_R0RR2 "add logical high high" z196 zarch
b9da alhhlr RRF_R0RR2 "add logical high low" z196 zarch
cc0a alsih RIL_RI "add logical with signed immediate high with cc" z196 zarch
cc0b alsihn RIL_RI "add logical with signed immediate high no cc" z196 zarch
cc06 brcth RIL_RP "branch relative on count high" z196 zarch
b9cd chhr RRE_RR "compare high high" z196 zarch
b9dd chlr RRE_RR "compare high low" z196 zarch
e300000000cd chf RXY_RRRD "compare high" z196 zarch
cc0d cih RIL_RI "compare immediate high" z196 zarch
b9cf clhhr RRE_RR "compare logical high high" z196 zarch
b9df clhlr RRE_RR "compare logical high low" z196 zarch
e300000000cf clhf RXY_RRRD "compare logical high" z196 zarch
cc0f clih RIL_RU "compare logical immediate" z196 zarch
e300000000c0 lbh RXY_RRRD "load byte high" z196 zarch
e300000000c4 lhh RXY_RRRD "load halfword high" z196 zarch
e300000000ca lfh RXY_RRRD "load high" z196 zarch
e300000000c2 llch RXY_RRRD "load logical character high" z196 zarch
e300000000c6 llhh RXY_RRRD "load logical halfword high" z196 zarch
ec000000005d risbhg RIE_RRUUU "rotate then insert selected bits high" z196 zarch
ec0000000051 risblg RIE_RRUUU "rotate then insert selected bits low" z196 zarch
e300000000c3 stch RXY_RRRD "store character high" z196 zarch
e300000000c7 sthh RXY_RRRD "store halfword high" z196 zarch
e300000000cb stfh RXY_RRRD "store high" z196 zarch
b9c9 shhhr RRF_R0RR2 "subtract high high" z196 zarch
b9d9 shhlr RRF_R0RR2 "subtract high low" z196 zarch
b9cb slhhhr RRF_R0RR2 "subtract logical high high" z196 zarch
b9db slhhlr RRF_R0RR2 "subtract logical high low" z196 zarch
eb00000000f8 laa RSY_RRRD "load and add 32 bit" z196 zarch
eb00000000e8 laag RSY_RRRD "load and add 64 bit" z196 zarch
eb00000000fa laal RSY_RRRD "load and add logical 32 bit" z196 zarch
eb00000000ea laalg RSY_RRRD "load and add logical 64 bit" z196 zarch
eb00000000f4 lan RSY_RRRD "load and and 32 bit" z196 zarch
eb00000000e4 lang RSY_RRRD "load and and 64 bit" z196 zarch
eb00000000f7 lax RSY_RRRD "load and exclusive or 32 bit" z196 zarch
eb00000000e7 laxg RSY_RRRD "load and exclusive or 64 bit" z196 zarch
eb00000000f6 lao RSY_RRRD "load and or 32 bit" z196 zarch
eb00000000e6 laog RSY_RRRD "load and or 64 bit" z196 zarch
c804 lpd SSF_RERDRD2 "load pair disjoint 32 bit" z196 zarch
c805 lpdg SSF_RERDRD2 "load pair disjoint 64 bit" z196 zarch
b9f2 locr RRF_U0RR "load on condition 32 bit" z196 zarch
b9f200000000 locr*16 RRF_00RR "load on condition 32 bit" z196 zarch
b9e2 locgr RRF_U0RR "load on condition 64  bit" z196 zarch
b9e200000000 locgr*16 RRF_00RR "load on condition 64  bit" z196 zarch
eb00000000f2 loc RSY_RURD2 "load on condition 32 bit" z196 zarch
eb00000000f2 loc*12 RSY_R0RD "load on condition 32 bit" z196 zarch
eb00000000e2 locg RSY_RURD2 "load on condition 64 bit" z196 zarch
eb00000000e2 locg*12 RSY_R0RD "load on condition 64 bit" z196 zarch
eb00000000f3 stoc RSY_RURD2 "store on condition 32 bit" z196 zarch
eb00000000f3 stoc*12 RSY_R0RD "store on condition 32 bit" z196 zarch
eb00000000e3 stocg RSY_RURD2 "store on condition 64 bit" z196 zarch
eb00000000e3 stocg*12 RSY_R0RD "store on condition 64 bit" z196 zarch
b9f8 ark RRF_R0RR2 "add 3 operands 32 bit" z196 zarch
b9e8 agrk RRF_R0RR2 "add 3 operands 64 bit" z196 zarch
ec00000000d8 ahik RIE_RRI0 "add immediate 3 operands 32 bit" z196 zarch
ec00000000d9 aghik RIE_RRI0 "add immediate 3 operands 64 bit" z196 zarch
b9fa alrk RRF_R0RR2 "add logical 3 operands 32 bit" z196 zarch
b9ea algrk RRF_R0RR2 "add logical 3 operands 64 bit" z196 zarch
ec00000000da alhsik RIE_RRI0 "add logical immediate 3 operands 32 bit" z196 zarch
ec00000000db alghsik RIE_RRI0 "add logical immediate 3 operands 64 bit" z196 zarch
b9f4 nrk RRF_R0RR2 "and 3 operands 32 bit" z196 zarch
b9e4 ngrk RRF_R0RR2 "and 3 operands 64 bit" z196 zarch
b9f7 xrk RRF_R0RR2 "xor 3 operands 32 bit" z196 zarch
b9e7 xgrk RRF_R0RR2 "xor 3 operands 64 bit" z196 zarch
b9f6 ork RRF_R0RR2 "or 3 operands 32 bit" z196 zarch
b9e6 ogrk RRF_R0RR2 "or 3 operands 64 bit" z196 zarch
eb00000000dd slak RSY_RRRD "shift left single 3 operands 32 bit" z196 zarch
eb00000000df sllk RSY_RRRD "shift left single logical 3 operands 32 bit" z196 zarch
eb00000000dc srak RSY_RRRD "shift right single 3 operands 32 bit" z196 zarch
eb00000000de srlk RSY_RRRD "shift right single logical 3 operands 32 bit" z196 zarch
b9f9 srk RRF_R0RR2 "subtract 3 operands 32 bit" z196 zarch
b9e9 sgrk RRF_R0RR2 "subtract 3 operands 64 bit" z196 zarch
b9fb slrk RRF_R0RR2 "subtract logical 3 operands 32 bit" z196 zarch
b9eb slgrk RRF_R0RR2 "subtract logical 3 operands 64 bit" z196 zarch
b9e1 popcnt RRE_RR "population count" z196 zarch
b9ae rrbm RRE_RR "reset reference bits multiple" z196 zarch
b394 cefbra RRF_UUFR "convert from 32 bit fixed to short bfp with rounding mode" z196 zarch
b395 cdfbra RRF_UUFR "convert from 32 bit fixed to long bfp with rounding mode" z196 zarch
b396 cxfbra RRF_UUFER "convert from 32 bit fixed to extended bfp with rounding mode" z196 zarch
b3a4 cegbra RRF_UUFR "convert from 64 bit fixed to short bfp with rounding mode" z196 zarch
b3a5 cdgbra RRF_UUFR "convert from 64 bit fixed to long bfp with rounding mode" z196 zarch
b3a6 cxgbra RRF_UUFER "convert from 64 bit fixed to extended bfp with rounding mode" z196 zarch
b390 celfbr RRF_UUFR "convert from 32 bit logical fixed to short bfp with rounding mode" z196 zarch
b391 cdlfbr RRF_UUFR "convert from 32 bit logical fixed to long bfp with rounding mode" z196 zarch
b392 cxlfbr RRF_UUFER "convert from 32 bit logical fixed to extended bfp with rounding mode" z196 zarch
b3a0 celgbr RRF_UUFR "convert from 64 bit logical fixed to short bfp with rounding mode" z196 zarch
b3a1 cdlgbr RRF_UUFR "convert from 64 bit logical fixed to long bfp with rounding mode" z196 zarch
b3a2 cxlgbr RRF_UUFER "convert from 64 bit logical fixed to extended bfp with rounding mode" z196 zarch
b398 cfebra RRF_UURF "convert to 32 bit fixed from short bfp with rounding mode" z196 zarch
b399 cfdbra RRF_UURF "convert to 32 bit fixed from long bfp with rounding mode" z196 zarch
b39a cfxbra RRF_UURFE "convert to 32 bit fixed from extended bfp with rounding mode" z196 zarch
b3a8 cgebra RRF_UURF "convert to 64 bit fixed from short bfp with rounding mode" z196 zarch
b3a9 cgdbra RRF_UURF "convert to 64 bit fixed from long bfp with rounding mode" z196 zarch
b3aa cgxbra RRF_UURFE "convert to 64 bit fixed from extended bfp with rounding mode" z196 zarch
b39c clfebr RRF_UURF "convert to 32 bit fixed logical from short bfp with rounding mode" z196 zarch
b39d clfdbr RRF_UURF "convert to 32 bit fixed logical from long bfp with rounding mode" z196 zarch
b39e clfxbr RRF_UURFE "convert to 32 bit fixed logical from extended bfp with rounding mode" z196 zarch
b3ac clgebr RRF_UURF "convert to 64 bit fixed logical from short bfp with rounding mode" z196 zarch
b3ad clgdbr RRF_UURF "convert to 64 bit fixed logical from long bfp with rounding mode" z196 zarch
b3ae clgxbr RRF_UURFE "convert to 64 bit fixed logical from extended bfp with rounding mode" z196 zarch
b357 fiebra RRF_UUFF "load fp integer short bfp with inexact suppression" z196 zarch
b35f fidbra RRF_UUFF "load fp integer long bfp with inexact suppression" z196 zarch
b347 fixbra RRF_UUFEFE "load fp integer extended bfp with inexact suppression" z196 zarch
b344 ledbra RRF_UUFF "load rounded short/long bfp to short/long bfp with rounding mode" z196 zarch
b345 ldxbra RRF_UUFEFE "load rounded long/extended bfp to long/extended bfp with rounding mode" z196 zarch
b346 lexbra RRF_UUFEFE "load rounded short/extended bfp to short/extended bfp with rounding mode" z196 zarch
b3d2 adtra RRF_FUFF2 "add long dfp with rounding mode" z196 zarch
b3da axtra RRF_FEUFEFE2 "add extended dfp with rounding mode" z196 zarch
b3f1 cdgtra RRF_UUFR "convert from fixed long dfp with rounding mode" z196 zarch
b951 cdftr RRF_UUFR "convert from 32 bit fixed to long dfp with rounding mode" z196 zarch
b959 cxftr RRF_UUFER "convert from 32 bit fixed to extended dfp with rounding mode" z196 zarch
b3f9 cxgtra RRF_UUFER "convert from fixed extended dfp with rounding mode" z196 zarch
b952 cdlgtr RRF_UUFR "convert from 64 bit fixed logical to long dfp with rounding mode" z196 zarch
b95a cxlgtr RRF_UUFER "convert from 64 bit fixed logical to extended dfp with rounding mode" z196 zarch
b953 cdlftr RRF_UUFR "convert from 32 bit fixed logical to long dfp with rounding mode" z196 zarch
b95b cxlftr RRF_UUFR "convert from 32 bit fixed logical to extended dfp with rounding mode" z196 zarch
b3e1 cgdtra RRF_UURF "convert to 64 bit fixed from long dfp with rounding mode" z196 zarch
b3e9 cgxtra RRF_UURFE "convert to 64 bit fixed from extended dfp with rounding mode" z196 zarch
b941 cfdtr RRF_UURF "convert to 32 bit fixed from long dfp source with rounding mode" z196 zarch
b949 cfxtr RRF_UURF "convert to 32 bit fixed from extended dfp source with rounding mode" z196 zarch
b942 clgdtr RRF_UURF "convert to 64 bit fixed logical from long dfp with rounding mode" z196 zarch
b94a clgxtr RRF_UURFE "convert to 64 bit fixed logical from extended dfp with rounding mode" z196 zarch
b943 clfdtr RRF_UURF "convert to 32 bit fixed logical from long dfp with rounding mode" z196 zarch
b94b clfxtr RRF_UURFE "convert to 32 bit fixed logical from extended dfp with rounding mode" z196 zarch
b3d1 ddtra RRF_FUFF2 "divide long dfp with rounding mode" z196 zarch
b3d9 dxtra RRF_FEUFEFE2 "divide extended dfp with rounding mode" z196 zarch
b3d0 mdtra RRF_FUFF2 "multiply long dfp with rounding mode" z196 zarch
b3d8 mxtra RRF_FEUFEFE2 "multiply extended dfp with rounding mode" z196 zarch
b3d3 sdtra RRF_FUFF2 "subtract long dfp with rounding mode" z196 zarch
b3db sxtra RRF_FEUFEFE2 "subtract extended dfp with rounding mode" z196 zarch
b2b8 srnmb S_RD "set 3 bit bfp rounding mode" z196 zarch
b92a kmf RRE_RR "cipher message with CFB" z196 zarch
b92b kmo RRE_RR "cipher message with OFB" z196 zarch
b92c pcc RRE_00 "perform cryptographic computation" z196 zarch
b92d kmctr RRF_R0RR2 "cipher message with counter" z196 zarch

# The new instructions of the IBM zEnterprise EC12
b2ec etnd RRE_R0 "extract transaction nesting depth" zEC12 zarch
e30000000025 ntstg RXY_RRRD "nontransactional store" zEC12 zarch
b2fc tabort S_RD "transaction abort" zEC12 zarch
e560 tbegin SIL_RDU "transaction begin" zEC12 zarch
e561 tbeginc SIL_RDU "constrained transaction begin" zEC12 zarch
b2f8 tend S_00 "transaction end" zEC12 zarch
c7 bpp SMI_U0RDP "branch prediction preload" zEC12 zarch
c5 bprp MII_UPP "branch prediction relative preload" zEC12 zarch
b2e8 ppa RRF_U0RR "perform processor assist" zEC12 zarch
b2fa niai IE_UU "next instruction access intent" zEC12 zarch
b98f crdte RRF_RMRR "compare and replace DAT table entry" zEC12 zarch
e3000000009f lat RXY_RRRD "load and trap 32 bit" zEC12 zarch
e30000000085 lgat RXY_RRRD "load and trap 64 bit" zEC12 zarch
e300000000c8 lfhat RXY_RRRD "load high and trap" zEC12 zarch
e3000000009d llgfat RXY_RRRD "load logical and trap 32>64" zEC12 zarch
e3000000009c llgtat RXY_RRRD "load logical thirty one bits and trap 31>64" zEC12 zarch
eb0000000023 clt RSY_RURD "compare logical and trap 32 bit reg-mem" zEC12 zarch
eb0000000023 clt$12 RSY_R0RD "compare logical and trap 32 bit reg-mem" zEC12 zarch
eb000000002b clgt RSY_RURD "compare logical and trap 64 bit reg-mem" zEC12 zarch
eb000000002b clgt$12 RSY_R0RD "compare logical and trap 64 bit reg-mem" zEC12 zarch
ec0000000059 risbgn RIE_RRUUU "rotate then insert selected bits nocc" zEC12 zarch
ed00000000aa cdzt RSL_LRDFU "convert from zoned long" zEC12 zarch
ed00000000ab cxzt RSL_LRDFEU "convert from zoned extended" zEC12 zarch
ed00000000a8 czdt RSL_LRDFU "convert to zoned long" zEC12 zarch
ed00000000a9 czxt RSL_LRDFEU "convert to zoned extended" zEC12 zarch
@


1.42
log
@2013-09-02  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.txt: Fix description for fiebra, fidbra, and fixbra.
	For the load fp integer instructions only the suppression flag was
	new with z196 version.
@
text
@d998 1
a998 1
cc0f clih RIL_RI "compare logical immediate" z196 zarch
@


1.41
log
@2013-07-05  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>
opcodes/
	    * s390-opc.c (J12_12, J24_24): New macros.
	    (INSTR_MII_UPI): Rename to INSTR_MII_UPP.
	    (MASK_MII_UPI): Rename to MASK_MII_UPP.
	    * s390-opc.txt: Rename MII_UPI to MII_UPP for bprp instruction.

include/elf/
	    * s390.h: Add new relocs R_390_PC12DBL, R_390_PLT12DBL,
	    R_390_PC24DBL, and R_390_PLT24DBL.

gas/testsuite/
	    * gas/s390/zarch-zEC12.s: Change bprp second operand and add
	    variants requiring relocations.
	    * gas/s390/zarch-zEC12.d: Likewise.

gas/
	    * config/tc-s390.c (md_gather_operands, md_apply_fix): Support new
	    relocs.
bfd/
	    * elf32-s390.c: Add new relocation definitions R_390_PC12DBL,
	    R_390_PLT12DBL, R_390_PC24DBL, and R_390_PLT24DBL.
	    (elf_s390_reloc_type_lookup, elf_s390_check_relocs)
	    (elf_s390_gc_sweep_hook, elf_s390_relocate_section): Support new
	    relocations.
	    * elf64-s390.c: See elf32-s390.c
	    * bfd-in2.h: Add new relocs to enum bfd_reloc_code_real.
	    * libbfd.h: Add new reloc strings.
@
text
@d1085 3
a1087 3
b357 fiebra RRF_UUFF "load fp integer short bfp with rounding mode" z196 zarch
b35f fidbra RRF_UUFF "load fp integer long bfp with rounding mode" z196 zarch
b347 fixbra RRF_UUFEFE "load fp integer extended bfp with rounding mode" z196 zarch
@


1.40
log
@opcodes/
	* s390-opc.txt (flogr): Require a register pair destination.

gas/testsuite/
	* gas/s390/zarch-z9-109-err.s, gas/s390/zarch-z9-109-err.l: New test.
	* gas/s390/s390.exp: Run it.
@
text
@d1129 1
a1129 1
c5 bprp MII_UPI "branch prediction relative preload" zEC12 zarch
@


1.39
log
@2012-11-20  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.txt: Fix srstu and strag opcodes.

2012-11-20  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/zarch-z9-109.d: Fix srstu opcode.
	* gas/s390/zarch-z900.d: Replace lasp with strag.
@
text
@d739 1
a739 1
b983 flogr RRE_RR "find leftmost one" z9-109 zarch
@


1.38
log
@2012-10-26  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c: Accept empty lines in s390-opc.txt.
	* s390-opc.c: Add M_20OPT field. New instruction formats RRF_RURR2 and RRF_RMRR.
	* s390-opc.txt: Add new instructions.  New instruction type for lptea.

2012-10-26  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/testsuite/gas/s390/zarch-z10.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z10.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-z196.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z196.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-z9-109.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z990.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z990.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-zEC12.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-zEC12.s: Refreshed.
@
text
@d455 1
a455 1
e50000000002 strag SSE_RDRD "store read address" z900 zarch
d784 1
a784 1
b9eb srstu RRE_RR "search string unicode" z9-109 zarch
@


1.37
log
@2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (s390_parse_cpu): Add new option zEC12.
	* doc/as.texinfo: Document new option zEC12.
	* doc/c-s390.texi: Likewise.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/s390.exp: Run zEC12 tests.
	* gas/s390/zarch-zEC12.d: New file.
	* gas/s390/zarch-zEC12.s: New file.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c: Support new option zEC12.
	* s390-opc.c: Add new instruction formats.
	* s390-opc.txt: Add new instructions for zEC12.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390.h (s390_opcode_cpu_val): Add S390_OPCODE_ZEC12.
@
text
@d718 5
d767 1
a767 1
b9aa lptea RRF_RURR "load page-table-entry address" z9-109 zarch
d865 1
d980 3
d1004 1
a1004 1
ec000000005D risbhg RIE_RRUUU "rotate then insert selected bits high" z196 zarch
d1116 6
d1130 1
d1132 1
@


1.36
log
@2012-03-08  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.txt: Set instruction type of pku to SS_L2RDRD.

2012-03-08  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: Move length field to the second operand.
	* gas/s390/esa-g5.s: Likewise.
@
text
@d1020 8
a1027 8
eb00000000f2 loc RSY_RDRM "load on condition 32 bit" z196 zarch
eb00000000f2 loc*12 RSY_RDR0 "load on condition 32 bit" z196 zarch
eb00000000e2 locg RSY_RDRM "load on condition 64 bit" z196 zarch
eb00000000e2 locg*12 RSY_RDR0 "load on condition 64 bit" z196 zarch
eb00000000f3 stoc RSY_RDRM "store on condition 32 bit" z196 zarch
eb00000000f3 stoc*12 RSY_RDR0 "store on condition 32 bit" z196 zarch
eb00000000e3 stocg RSY_RDRM "store on condition 64 bit" z196 zarch
eb00000000e3 stocg*12 RSY_RDR0 "store on condition 64 bit" z196 zarch
d1107 23
@


1.35
log
@2011-10-21  Jan Glauber  <jang@@linux.vnet.ibm.com>

	* s390-opc.txt: Add CPUMF instructions.

2011-10-21  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/zarch-z10.d: Add CPUMF instructions.
	* gas/s390/zarch-z10.s: Likewise.
@
text
@d375 1
a375 1
e1 pku SS_L0RDRD "pack unicode" g5 esa,zarch
@


1.34
log
@2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * config/tc-s390.c (md_gather_operands): Fix check for floating
	    register pair operands.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * opcode/s390.h: Replace S390_OPERAND_REG_EVEN with
	    S390_OPERAND_REG_PAIR.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * s390-opc.c: Replace S390_OPERAND_REG_EVEN with
	    S390_OPERAND_REG_PAIR.  Fix INSTR_RRF_0UFEF instruction type.
	    * s390-opc.txt: Fix cxr instruction type.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * gas/s390/esa-g5.d: Fix fp register pair operands.
	    * gas/s390/esa-g5.s: Likewise.
	    * gas/s390/zarch-z196.d: Likewise.
	    * gas/s390/zarch-z196.s: Likewise.
	    * gas/s390/zarch-z9-109.d: Likewise.
	    * gas/s390/zarch-z9-109.s: Likewise.
	    * gas/s390/zarch-z9-ec.d: Likewise.
	    * gas/s390/zarch-z9-ec.s: Likewise.
@
text
@d963 11
@


1.33
log
@2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (md_gather_operands): Emit an error for odd
	numbered registers used as register pair operand.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* opcode/s390.h: Add S390_OPCODE_REG_EVEN flag.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c: Add new instruction types marking register pair
	operands.
	* s390-opc.txt: Match instructions having register pair operands
	to the new instruction types.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: Fix register pair operands.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/esa-z9-109.d: Likewise.
	* gas/s390/esa-z9-109.s: Likewise.
	* gas/s390/zarch-z196.d: Likewise.
	* gas/s390/zarch-z196.s: Likewise.
	* gas/s390/zarch-z9-109.d: Likewise.
	* gas/s390/zarch-z9-109.s: Likewise.
	* gas/s390/zarch-z900.d: Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z990.d: Likewise.
	* gas/s390/zarch-z990.s: Likewise.
@
text
@d554 1
a554 1
b369 cxr RRE_FF "compare extended hfp" g5 esa,zarch
@


1.32
log
@2010-10-28  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (md_begin): Only add to hash table if cpu and
	mode mask fit.

2010-10-28  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.txt: cfxr, cfdr and cfer z900 -> g5.
@
text
@d19 1
a19 1
36 axr RR_FF "add normalized" g5 esa,zarch
d37 1
a37 1
bb cds RS_RRRD "compare double and swap" g5 esa,zarch
d54 1
a54 1
b257 cuse RRE_RR "compare until substring equal" g5 esa,zarch
d58 1
a58 1
5d d RX_RRRD "divide" g5 esa,zarch
d65 2
a66 2
1d dr RR_RR "divide" g5 esa,zarch
b22d dxr RRE_FF "divide (ext.)" g5 esa,zarch
d110 2
a111 2
25 ldxr RR_FF "load rounded (ext. to long)" g5 esa,zarch
25 lrdr RR_FF "load rounded (ext. to long)" g5 esa,zarch
d118 1
a118 1
5c m RX_RRRD "multiply" g5 esa,zarch
d128 1
a128 1
1c mr RR_RR "multiply" g5 esa,zarch
d145 3
a147 3
67 mxd RX_FRRD "multiply (long to ext.)" g5 esa,zarch
27 mxdr RR_FF "multiply (long to ext.)" g5 esa,zarch
26 mxr RR_FF "multiply (ext.)" g5 esa,zarch
d182 2
a183 2
8f slda RS_R0RD "shift left double (long)" g5 esa,zarch
8d sldl RS_R0RD "shift left double logical (long)" g5 esa,zarch
d195 2
a196 2
8e srda RS_R0RD "shift right double (long)" g5 esa,zarch
8c srdl RS_R0RD "shift right double logical (long)" g5 esa,zarch
d230 1
a230 1
37 sxr RR_FF "subtract normalized (ext.)" g5 esa,zarch
d258 1
a258 1
a8 mvcle RS_RRRD "move long extended" g5 esa,zarch
d274 1
a274 1
b34a axbr RRE_FF "add extended bfp" g5 esa,zarch
d279 1
a279 1
b349 cxbr RRE_FF "compare extended bfp" g5 esa,zarch
d289 1
a289 1
b396 cxfbr RRE_FR "convert from fixed 32 to extended bfp" g5 esa,zarch
d292 1
a292 1
b39a cfxbr RRF_U0RF "convert to fixed extended bfp to 32" g5 esa,zarch
d295 1
a295 1
b34d dxbr RRE_FF "divide extended bfp" g5 esa,zarch
d303 1
a303 1
b342 ltxbr RRE_FF "load and test extended bfp" g5 esa,zarch
d306 1
a306 1
b343 lcxbr RRE_FF "load complement extended bfp" g5 esa,zarch
d309 1
a309 1
b347 fixbr RRF_U0FF "load fp integer extended bfp" g5 esa,zarch
d313 4
a316 4
b305 lxdbr RRE_FF "load lengthened long to extended bfp" g5 esa,zarch
ed0000000005 lxdb RXE_FRRD "load lengthened long to extended bfp" g5 esa,zarch
b306 lxebr RRE_FF "load lengthened short to extended bfp" g5 esa,zarch
ed0000000006 lxeb RXE_FRRD "load lengthened short to extended bfp" g5 esa,zarch
d319 1
a319 1
b341 lnxbr RRE_FF "load negative extended bfp" g5 esa,zarch
d322 1
a322 1
b340 lpxbr RRE_FF "load positive extended bfp" g5 esa,zarch
d325 2
a326 2
b345 ldxbr RRE_FF "load rounded extended to long bfp" g5 esa,zarch
b346 lexbr RRE_FF "load rounded extended to short bfp" g5 esa,zarch
d328 1
a328 1
b34c mxbr RRE_FF "multiply extended bfp" g5 esa,zarch
d331 2
a332 2
b307 mxdbr RRE_FF "multiply long to extended bfp" g5 esa,zarch
ed0000000007 mxdb RXE_FRRD "multiply long to extended bfp" g5 esa,zarch
d347 1
a347 1
b316 sqxbr RRE_FF "square root extended bfp" g5 esa,zarch
d353 1
a353 1
b34b sxbr RRE_FF "subtract extended bfp" g5 esa,zarch
d358 1
a358 1
ed0000000012 tcxb RXE_FRRD "test data class extended bfp" g5 esa,zarch
d362 1
a362 1
b2a6 cuutf RRE_RR "convert unicode to utf-8" g5 esa,zarch
d372 2
a373 2
b2a5 tre RRE_RR "translate extended" g5 esa,zarch
eb000000008e mvclu RSE_RRRD "move long unicode" g5 esa,zarch
d376 4
a379 4
b993 troo RRE_RR "translate one to one" g5 esa,zarch
b992 trot RRE_RR "translate one to two" g5 esa,zarch
b991 trto RRE_RR "translate two to one" g5 esa,zarch
b990 trtt RRE_RR "translate two to two" g5 esa,zarch
d388 1
a388 1
b376 lzxr RRE_F0 "load extended zero" g5 esa,zarch
d459 1
a459 1
eb000000003e cdsg RSE_RRRD "compare double and swap 64" z900 zarch
d481 1
a481 1
b3a6 cxgbr RRE_FR "convert from fixed 64 to extended bfp" z900 zarch
d484 1
a484 1
b3aa cgxbr RRF_U0RF "convert to fixed extended bfp to 64" z900 zarch
d487 1
a487 1
b3c6 cxgr RRE_FR "convert from fixed 64 to extended hfp" z900 zarch
d490 1
a490 1
b3ca cgxr RRF_U0RF "convert to fixed extended hfp to 64" z900 zarch
d513 1
a513 1
b90d dsgr RRE_RR "divide single 64" z900 zarch
d517 1
a517 1
b91d dsgfr RRE_RR "divide single 64<32" z900 zarch
d519 2
a520 2
b986 mlgr RRE_RR "multiply logical 64" z900 zarch
b987 dlgr RRE_RR "divide logical 64" z900 zarch
d524 2
a525 2
b996 mlr RRE_RR "multiply logical 32" z900 esa,zarch
b997 dlr RRE_RR "divide logical 32" z900 esa,zarch
d530 1
a530 1
e3000000000d dsg RXE_RRRD "divide single 64" z900 zarch
d534 1
a534 1
e3000000001d dsgf RXE_RRRD "divide single 64<32" z900 zarch
d540 2
a541 2
e30000000086 mlg RXE_RRRD "multiply logical 64" z900 zarch
e30000000087 dlg RXE_RRRD "divide logical 64" z900 zarch
d545 3
a547 3
e3000000008f lpq RXE_RRRD "load pair from quadword" z900 zarch
e30000000096 ml RXE_RRRD "multiply logical 32" z900 esa,zarch
e30000000097 dl RXE_RRRD "divide logical 32" z900 esa,zarch
d555 1
a555 1
b3b6 cxfr RRE_FR "convert from fixed 32 to extended hfp" g5 esa,zarch
d558 1
a558 1
b3ba cfxr RRF_U0RF "convert to fixed extended hfp to 32" g5 esa,zarch
d561 3
a563 3
b362 ltxr RRE_FF "load and test extended hfp" g5 esa,zarch
b363 lcxr RRE_FF "load complement extended hfp" g5 esa,zarch
b367 fixr RRE_FF "load fp integer extended hfp" g5 esa,zarch
d566 4
a569 4
b325 lxdr RRE_FF "load lengthened long to extended hfp" g5 esa,zarch
ed0000000025 lxd RXE_FRRD "load lengthened long to extended hfp" g5 esa,zarch
b326 lxer RRE_FF "load lengthened short to extended hfp" g5 esa,zarch
ed0000000026 lxe RXE_FRRD "load lengthened short to extended hfp" g5 esa,zarch
d572 3
a574 3
b361 lnxr RRE_FF "load negative long hfp" g5 esa,zarch
b360 lpxr RRE_FF "load positive long hfp" g5 esa,zarch
b366 lexr RRE_FF "load rounded extended to short hfp" g5 esa,zarch
d577 1
a577 1
b336 sqxr RRE_FF "square root extended hfp" g5 esa,zarch
d582 1
a582 1
b365 lxr RRE_FF "load extended fp" g5 esa,zarch
d594 1
a594 1
eb0000000031 cdsy RSY_RRRD "compare double and swap with long offset" z990 zarch
d640 1
a640 1
e3000000000d dsg RXY_RRRD "divide single 64" z990 zarch
d652 1
a652 1
e3000000001d dsgf RXY_RRRD "divide single 64<32" z990 zarch
d668 2
a669 2
e30000000086 mlg RXY_RRRD "multiply logical 64" z990 zarch
e30000000087 dlg RXY_RRRD "divide logical 64" z990 zarch
d673 1
a673 1
e3000000008f lpq RXY_RRRD "load pair from quadword" z990 zarch
d676 2
a677 2
e30000000096 ml RXY_RRRD "multiply logical 32" z990 esa,zarch
e30000000097 dl RXY_RRRD "divide logical 32" z990 esa,zarch
d695 1
a695 1
eb000000003e cdsg RSY_RRRD "compare double and swap with long offset 64" z990 zarch
d699 1
a699 1
eb000000008e mvclu RSY_RRRD "move long unicode" z990 esa,zarch
d766 4
a769 4
b993 troo RRF_M0RR "translate one to one" z9-109 esa,zarch
b992 trot RRF_M0RR "translate one to two" z9-109 esa,zarch
b991 trto RRF_M0RR "translate two to one" z9-109 esa,zarch
b990 trtt RRF_M0RR "translate two to two" z9-109 esa,zarch
d771 8
a778 8
b9b1 cu24 RRF_M0RR "convert utf-16 to utf-32" z9-109 zarch
b2a6 cu21 RRF_M0RR "convert utf-16 to utf-8" z9-109 zarch
b2a6 cuutf RRF_M0RR "convert unicode to utf-8" z9-109 zarch
b9b3 cu42 RRE_RR "convert utf-32 to utf-16" z9-109 zarch
b9b2 cu41 RRE_RR "convert utf-32 to utf-8" z9-109 zarch
b2a7 cu12 RRF_M0RR "convert utf-8 to utf-16" z9-109 zarch
b2a7 cutfu RRF_M0RR "convert utf-8 to unicode" z9-109 zarch
b9b0 cu14 RRF_M0RR "convert utf-8 to utf-32" z9-109 zarch
d782 1
a782 1
b33b myr RRF_F0FF "multiply unnormalized long hfp" z9-109 zarch
d785 1
a785 1
ed000000003b my RXF_FRRDF "multiply unnormalized long hfp" z9-109 zarch
d801 1
a801 1
b3da axtr RRR_F0FF "add extended dfp" z9-ec zarch
d803 1
a803 1
b3ec cxtr RRE_FF "compare extended dfp" z9-ec zarch
d807 1
a807 1
b3fc cextr RRE_FF "compare exponent extended dfp" z9-ec zarch
d809 1
a809 1
b3f9 cxgtr RRE_FR "convert from fixed extended dfp" z9-ec zarch
d813 1
a813 1
b3fa cxutr RRE_FR "convert from unsigned bcd to extended dfp" z9-ec zarch
d815 1
a815 1
b3e9 cgxtr RRF_U0RF "convert from extended dfp to fixed" z9-ec zarch
d817 1
a817 1
b3eb csxtr RRE_RF "convert from extended dfp to signed bcd" z9-ec zarch
d819 1
a819 1
b3ea cuxtr RRE_RF "convert from extended dfp to unsigned bcd" z9-ec zarch
d821 1
a821 1
b3d9 dxtr RRR_F0FF "divide extended dfp" z9-ec zarch
d823 1
a823 1
b3ed eextr RRE_RF "extract biased exponent from extended dfp" z9-ec zarch
d825 1
a825 1
b3ef esxtr RRE_RF "extract significance from extended dfp" z9-ec zarch
d827 1
a827 1
b3fe iextr RRF_F0FR "insert biased exponent extended dfp" z9-ec zarch
d829 1
a829 1
b3de ltxtr RRE_FF "load and test extended dfp" z9-ec zarch
d831 1
a831 1
b3df fixtr RRF_UUFF "load fp integer extended dfp" z9-ec zarch
d834 1
a834 1
b3dc lxdtr RRF_0UFF "load lengthened extended dfp" z9-ec zarch
d836 1
a836 1
b3dd ldxtr RRF_UUFF "load rounded extended dfp" z9-ec zarch
d838 1
a838 1
b3d8 mxtr RRR_F0FF "multiply extended dfp" z9-ec zarch
d840 1
a840 1
b3fd qaxtr RRF_FUFF "Quantize extended dfp" z9-ec zarch
d842 1
a842 1
b3ff rrxtr RRF_FFRU "Reround extended dfp" z9-ec zarch
d846 1
a846 1
ed0000000048 slxt RXF_FRRDF "shift coefficient left extended dfp" z9-ec zarch
d848 1
a848 1
ed0000000049 srxt RXF_FRRDF "shift coefficient right extended dfp" z9-ec zarch
d850 1
a850 1
b3db sxtr RRR_F0FF "subtract extended dfp" z9-ec zarch
d853 1
a853 1
ed0000000058 tdcxt RXE_FRRD "test data class extended dfp" z9-ec zarch
d856 1
a856 1
ed0000000059 tdgxt RXE_FRRD "test data group extended dfp" z9-ec zarch
d944 1
a944 1
e3000000005c mfy RXY_RRRD "multiply" z10 zarch
d961 2
a962 2
b9bf trte RRF_M0RR "translate and test extended" z10 zarch
b9bd trtre RRF_M0RR "translate and test reverse extended" z10 zarch
d1003 2
a1004 2
c804 lpd SSF_RRDRD2 "load pair disjoint 32 bit" z196 zarch
c805 lpdg SSF_RRDRD2 "load pair disjoint 64 bit" z196 zarch
d1043 1
a1043 1
b396 cxfbra RRF_UUFR "convert from 32 bit fixed to extended bfp with rounding mode" z196 zarch
d1046 1
a1046 1
b3a6 cxgbra RRF_UUFR "convert from 64 bit fixed to extended bfp with rounding mode" z196 zarch
d1049 1
a1049 1
b392 cxlfbr RRF_UUFR "convert from 32 bit logical fixed to extended bfp with rounding mode" z196 zarch
d1052 1
a1052 1
b3a2 cxlgbr RRF_UUFR "convert from 64 bit logical fixed to extended bfp with rounding mode" z196 zarch
d1055 1
a1055 1
b39a cfxbra RRF_UURF "convert to 32 bit fixed from extended bfp with rounding mode" z196 zarch
d1058 1
a1058 1
b3aa cgxbra RRF_UURF "convert to 64 bit fixed from extended bfp with rounding mode" z196 zarch
d1061 1
a1061 1
b39e clfxbr RRF_UURF "convert to 32 bit fixed logical from extended bfp with rounding mode" z196 zarch
d1064 1
a1064 1
b3ae clgxbr RRF_UURF "convert to 64 bit fixed logical from extended bfp with rounding mode" z196 zarch
d1067 1
a1067 1
b347 fixbra RRF_UUFF "load fp integer extended bfp with rounding mode" z196 zarch
d1069 2
a1070 2
b345 ldxbra RRF_UUFF "load rounded long/extended bfp to long/extended bfp with rounding mode" z196 zarch
b346 lexbra RRF_UUFF "load rounded short/extended bfp to short/extended bfp with rounding mode" z196 zarch
d1072 1
a1072 1
b3da axtra RRF_FUFF2 "add extended dfp with rounding mode" z196 zarch
d1075 2
a1076 2
b959 cxftr RRF_UUFR "convert from 32 bit fixed to extended dfp with rounding mode" z196 zarch
b3f9 cxgtra RRF_UUFR "convert from fixed extended dfp with rounding mode" z196 zarch
d1078 1
a1078 1
b95a cxlgtr RRF_UUFR "convert from 64 bit fixed logical to extended dfp with rounding mode" z196 zarch
d1082 1
a1082 1
b3e9 cgxtra RRF_UURF "convert to 64 bit fixed from extended dfp with rounding mode" z196 zarch
d1086 1
a1086 1
b94a clgxtr RRF_UURF "convert to 64 bit fixed logical from extended dfp with rounding mode" z196 zarch
d1088 1
a1088 1
b94b clfxtr RRF_UURF "convert to 32 bit fixed logical from extended dfp with rounding mode" z196 zarch
d1090 1
a1090 1
b3d9 dxtra RRF_FUFF2 "divide extended dfp with rounding mode" z196 zarch
d1092 1
a1092 1
b3d8 mxtra RRF_FUFF2 "multiply extended dfp with rounding mode" z196 zarch
d1094 1
a1094 1
b3db sxtra RRF_FUFF2 "subtract extended dfp with rounding mode" z196 zarch
@


1.31
log
@2010-10-11  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c: Make the instruction masks for the load/store on
	condition instructions to cover the condition code mask as well.
	* s390-opc.txt: lgoc -> locg and stgoc -> stocg.

2010-10-11  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/zarch-z196.d: Adjust the load/store on condition
	instructions.
	* gas/s390/zarch-z196.s: Likewise.
@
text
@d558 3
a560 3
b3ba cfxr RRF_U0RF "convert to fixed extended hfp to 32" z900 esa,zarch
b3b9 cfdr RRF_U0RF "convert to fixed long hfp to 32" z900 esa,zarch
b3b8 cfer RRF_U0RF "convert to fixed short hfp to 32" z900 esa,zarch
@


1.30
log
@2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c (enum s390_opcde_cpu_val): Add S390_OPCODE_Z196.
	(main): Recognize the new CPU string.
	* s390-opc.c: Add new instruction formats and masks.
	* s390-opc.txt: Add new z196 instructions.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* opcode/s390.h: Add S390_OPCODE_Z196 to enum s390_opcode_cpu_val.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c: (md_parse_option): New option -march=z196.
	* doc/c-s390.texi: Document new option.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/s390.exp: Run the zarch-z196 test.
	* gas/s390/zarch-z196.d: Add new instructions.
	* gas/s390/zarch-z196.s: Likewise.
	* gas/s390/zarch-z9-109.d: Likewise.
	* gas/s390/zarch-z9-109.s: Likewise.
@
text
@d1011 2
a1012 2
eb00000000e2 lgoc RSY_RDRM "load on condition 64 bit" z196 zarch
eb00000000e2 lgoc*12 RSY_RDR0 "load on condition 64 bit" z196 zarch
d1015 2
a1016 2
eb00000000e3 stgoc RSY_RDRM "store on condition 64 bit" z196 zarch
eb00000000e3 stgoc*12 RSY_RDR0 "store on condition 64 bit" z196 zarch
@


1.29
log
@2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-dis.c (print_insn_s390): Pick instruction with most
	specific mask.
	* s390-opc.c: Add unused bits to the insn mask.
	* s390-opc.txt: Reorder some instructions to prefer more recent
	versions.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: Adjust serveral instructions.
	* gas/s390/esa-reloc.d: Likewise.
	* gas/s390/esa-z990.d: Likewise.
	* gas/s390/zarch-reloc.d: Likewise.
	* gas/s390/zarch-z10.d: Likewise.
	* gas/s390/zarch-z9-ec.d: Likewise.
	* gas/s390/zarch-z900.d: Likewise.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* ld-s390/tlsbin.dd: bcr 0,%r7 -> nopr %r7.
	* ld-s390/tlsbin_64.dd: Likewise.
	* ld-s390/tlspic.dd: Likewise.
	* ld-s390/tlspic_64.dd: Likewise.
@
text
@d422 1
a422 1
e30000000031 clgf RXE_RRRD "comparee logical 64<32" z900 zarch
d779 2
d963 133
@


1.28
log
@update copyright dates
@
text
@d110 1
d112 1
a113 2
25 ldxr RR_FF "load rounded (ext. to long)" g5 esa,zarch
35 ledr RR_FF "load rounded (long to short)" g5 esa,zarch
d122 1
d124 1
a124 1
7c mde RX_FRRD "multiply (short to long)" g5 esa,zarch
a125 1
3c mder RR_FF "multiply short to long hfp" g5 esa,zarch
d262 1
d264 1
a370 2
a700 tmlh RI_RU "test under mask low high" g5 esa,zarch
a701 tmll RI_RU "test under mask low low" g5 esa,zarch
@


1.27
log
@        * s390-opc.c (INSTR_RR_0R_OPT, INSTR_RX_0RRD_OPT, MASK_RR_0R_OPT,
        MASK_RX_0RRD_OPT): New instruction formats with optional arguments.
        * s390-opc.txt (nopr, nop): Use new instruction format.
@
text
@d2 2
a3 1
#  Copyright 2000, 2001, 2003, 2004 Free Software Foundation, Inc.
@


1.26
log
@2008-12-30  Martin Schwidefsky  <schwidefskyy@@de.ibm.com>

	* s390-opc.txt: Add ptff instruction.
@
text
@d263 1
a263 1
0700 nopr RR_0R "no operation" g5 esa,zarch
d266 1
a266 1
4700 nop RX_0RRD "no operation" g5 esa,zarch
@


1.25
log
@2008-09-30  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.txt (stdy, stey): Fix description
@
text
@d753 1
@


1.24
log
@2008-09-26  Florian Krohm  <fkrohm@@us.ibm.com>

	* s390-opc.txt (thder, thdr): Change RRE_RR to RRE_FF.
	(cfxr, cfdr, cfer, clclu): Add esa flag.
	(sqd): Instruction added.
	(qadtr, qaxtr): Change RRF_FFFU to RRF_FUFF.
	* s390-opc.c: (INSTR_RRF_FFFU, MASK_RRF_FFFU): Removed.

2008-09-26  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/esa-g5.d: Adjust according to the s390-opc changes.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/esa-z990.d: Likewise.
	* gas/s390/esa-z990.s: Likewise.
	* gas/s390/zarch-z900.d: Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z990.d: Likewise.
	* gas/s390/zarch-z990.s: Likewise.
@
text
@d618 2
a619 2
ed0000000067 stdy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000066 stey RXY_FRRD "load (short) with long offset" z990 zarch
@


1.23
log
@2008-08-15  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c (INSTR_RRF_FFRU, MASK_RRF_FFRU): New instruction format.
	* s390-opc.txt (lxr, rrdtr, rrxtr): Fix instruction format.

2008-08-15  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: lxr operands are floating point.
	* gas/s390/esa-g5.s: Likewise.
	* gas/testsuite/gas/s390/zarch-z9-ec.d: rrdtr, rrxtr third
	operands is gpr.
	* gas/testsuite/gas/s390/zarch-z9-ec.s: Likewise.
@
text
@d381 2
a382 2
b358 thder RRE_RR "convert short bfp to long hfp" g5 esa,zarch
b359 thdr RRE_RR "convert long bfp to long hfp" g5 esa,zarch
d557 3
a559 3
b3ba cfxr RRF_U0RF "convert to fixed extended hfp to 32" z900 zarch
b3b9 cfdr RRF_U0RF "convert to fixed long hfp to 32" z900 zarch
b3b8 cfer RRF_U0RF "convert to fixed short hfp to 32" z900 zarch
d578 1
d699 1
a699 1
eb000000008f clclu RSY_RRRD "compare logical long unicode with long offset" z990 zarch
d835 2
a836 2
b3f5 qadtr RRF_FFFU "Quantize long dfp" z9-ec zarch
b3fd qaxtr RRF_FFFU "Quantize extended dfp" z9-ec zarch
@


1.22
log
@2008-04-10  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* s390-mkopc.c (s390_cond_ext_format): Add back the mnemonic
	extensions for conditional jumps (o, p, m, nz, z, nm, np, no).
	(s390_crb_extensions): New extensions table.
	(insertExpandedMnemonic): Handle '$' tag.
	* s390-opc.txt: Remove conditional jump variants which can now
	be expanded automatically.
	Replace '*' tag with '$' in the compare and branch instructions.

2008-04-10  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z10.d: Map the compare and branch variants
	with odd condition code mask to version with an even mask.
@
text
@d580 1
a580 1
b365 lxr RRE_RR "load extended hfp" g5 esa,zarch
d836 2
a837 2
b3f7 rrdtr RRF_FFFU "Reround long dfp" z9-ec zarch
b3ff rrxtr RRF_FFFU "Reround extended dfp" z9-ec zarch
@


1.21
log
@2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-mkopc.c (s390_opcode_cpu_val): S390_OPCODE_Z10 added.
	(s390_cond_extensions): Reduced extensions to the compare related.
	(main): z10 cpu type option added.
	(expandConditionalJump): Renamed to ...
	(insertExpandedMnemonic): ... this.

	* opcodes/s390-opc.c: Re-group the operand format makros.
	(INSTR_RIE_RRPU, INSTR_RIE_RRP0, INSTR_RIE_RUPI,
	INSTR_RIE_R0PI, INSTR_RIE_RUPU, INSTR_RIE_R0PU, INSTR_RIE_R0IU,
	INSTR_RIE_R0I0, INSTR_RIE_R0UU, INSTR_RIE_R0U0,
	INSTR_RIE_RRUUU, INSTR_RIS_RURDI, INSTR_RIS_R0RDI, INSTR_RIS_RURDU,
	INSTR_RIS_R0RDU, INSTR_RRF_U0RR, INSTR_RRF_00RR, INSTR_RRS_RRRDU,
	INSTR_RRS_RRRD0, INSTR_RXY_URRD, INSTR_SIY_IRD, INSTR_SIL_RDI,
	INSTR_SIL_RDU): New instruction formats added.
	(MASK_RIE_RRPU, MASK_RIE_RRP0, MASK_RIE_RUPI, MASK_RIE_R0PI,
	MASK_RIE_RUPU, MASK_RIE_R0PU, MASK_RIE_R0IU, MASK_RIE_R0I0,
	MASK_RIE_R0UU, MASK_RIE_R0U0, MASK_RIE_RRUUU, MASK_RIS_RURDI,
	MASK_RIS_R0RDI, MASK_RIS_RURDU, MASK_RIS_R0RDU, MASK_RRF_U0RR,
	MASK_RRF_00RR, MASK_RRS_RRRDU, MASK_RRS_RRRD0, MASK_RXY_URRD,
	MASK_SIY_IRD, MASK_SIL_RDI, MASK_SIL_RDU): New instruction format
	masks added.
	(s390_opformats): New formats added "ris", "rrs", "sil".
	* opcodes/s390-opc.txt: Add the conditional jumps with the
	extensions removed from automatic expansion in s390-mkopc.c manually.
	(asi - trtre): Add new System z10 EC instructions.
	* include/opcode/s390.h (s390_opcode_cpu_val): S390_OPCODE_Z10 added.

2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* config/tc-s390.c (md_parse_option): z10 option added.

2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z10.d: New file.
	* gas/s390/zarch-z10.s: New file.
	* gas/s390/s390.exp: Run the z10 testcases.
@
text
@a264 8
0710 bor RR_0R "branch on overflow / if ones" g5 esa,zarch
0720 bpr RR_0R "branch on plus" g5 esa,zarch
0740 bmr RR_0R "branch on minus / if mixed" g5 esa,zarch
0770 bnzr RR_0R "branch on not zero / if not zeros" g5 esa,zarch
0780 bzr RR_0R "branch on zero / if zeros" g5 esa,zarch
07b0 bnmr RR_0R "branch on not minus / if not mixed" g5 esa,zarch
07d0 bnpr RR_0R "branch on not plus" g5 esa,zarch
07e0 bnor RR_0R "branch on not overflow / if not ones" g5 esa,zarch
a267 8
4710 bo RX_0RRD "branch on overflow / if ones" g5 esa,zarch
4720 bp RX_0RRD "branch on plus" g5 esa,zarch
4740 bm RX_0RRD "branch on minus / if mixed" g5 esa,zarch
4770 bnz RX_0RRD "branch on not zero / if not zeros" g5 esa,zarch
4780 bz RX_0RRD "branch on zero / if zeros" g5 esa,zarch
47b0 bnm RX_0RRD "branch on not minus / if not mixed" g5 esa,zarch
47d0 bnp RX_0RRD "branch on not plus" g5 esa,zarch
47e0 bno RX_0RRD "branch on not overflow / if not ones" g5 esa,zarch
a269 8
a714 jo RI_0P "jump on overflow / if ones" g5 esa,zarch
a724 jp RI_0P "jump on plus" g5 esa,zarch
a744 jm RI_0P "jump on minus / if mixed" g5 esa,zarch
a774 jnz RI_0P "jump on not zero / if not zeros" g5 esa,zarch
a784 jz RI_0P "jump on zero / if zeros" g5 esa,zarch
a7b4 jnm RI_0P "jump on not minus / if not mixed" g5 esa,zarch
a7d4 jnp RI_0P "jump on not plus" g5 esa,zarch
a7e4 jno RI_0P "jump on not overflow / if not ones" g5 esa,zarch
a465 8
c014 jgo RIL_0P "jump long on overflow / if ones" z900 esa,zarch
c024 jgp RIL_0P "jump long on plus" z900 esa,zarch
c044 jgm RIL_0P "jump long on minus / if mixed" z900 esa,zarch
c074 jgnz RIL_0P "jump long on not zero / if not zeros" z900 esa,zarch
c084 jgz RIL_0P "jump long on zero / if zeros" z900 esa,zarch
c0b4 jgnm RIL_0P "jump long on not minus / if not mixed" z900 esa,zarch
c0d4 jgnp RIL_0P "jump long on not plus" z900 esa,zarch
c0e4 jgno RIL_0P "jump long on not overflow / if not ones" z900 esa,zarch
d855 1
d863 1
a863 1
ec00000000f6 crb*32 RRS_RRRD0 "compare and branch (32)" z10 zarch
d865 1
a865 1
ec00000000e4 cgrb*32 RRS_RRRD0 "compare and branch (64)" z10 zarch
d867 1
a867 1
ec0000000076 crj*32 RIE_RRP "compare and branch relative (32)" z10 zarch
d869 1
a869 1
ec0000000064 cgrj*32 RIE_RRP0 "compare and branch relative (64)" z10 zarch
d871 1
a871 1
ec00000000fe cib*12 RIS_R0RDI "compare immediate and branch (32<8)" z10 zarch
d873 1
a873 1
ec00000000fc cgib*12 RIS_R0RDI "compare immediate and branch (64<8)" z10 zarch
d875 1
a875 1
ec000000007e cij*12 RIE_R0PI "compare immediate and branch relative (32<8)" z10 zarch
d877 1
a877 1
ec000000007c cgij*12 RIE_R0PI "compare immediate and branch relative (64<8)" z10 zarch
d879 1
a879 1
b97200000000 crt*16 RRF_00RR "compare and trap" z10 zarch
d881 1
a881 1
b96000000000 cgrt*16 RRF_00RR "compare and trap 64" z10 zarch
d883 1
a883 1
ec0000000072 cit*32 RIE_R0I0 "compare immediate and trap (32<16)" z10 zarch
d885 1
a885 1
ec0000000070 cgit*32 RIE_R0I0 "compare immediate and trap (64<16)" z10 zarch
d901 1
a901 1
ec00000000f7 clrb*32 RRS_RRRD0 "compare logical and branch (32)" z10 zarch
d903 1
a903 1
ec00000000e5 clgrb*32 RRS_RRRD0 "compare logical and branch (64)" z10 zarch
d905 1
a905 1
ec0000000077 clrj*32 RIE_RRP "compare logical and branch relative (32)" z10 zarch
d907 1
a907 1
ec0000000065 clgrj*32 RIE_RRP "compare logical and branch relative (64)" z10 zarch
d909 1
a909 1
ec00000000ff clib*12 RIS_R0RDU "compare logical immediate and branch (32<8)" z10 zarch
d911 1
a911 1
ec00000000fd clgib*12 RIS_R0RDU "compare logical immediate and branch (64<8)" z10 zarch
d913 1
a913 1
ec000000007f clij*12 RIE_R0PU "compare logical immediate and branch relative (32<8)" z10 zarch
d915 1
a915 1
ec000000007d clgij*12 RIE_R0PU "compare logical immediate and branch relative (64<8)" z10 zarch
d917 1
a917 1
b97300000000 clrt*16 RRF_00RR "compare logical and trap (32)" z10 zarch
d919 1
a919 1
b96100000000 clgrt*16 RRF_00RR "compare logical and trap (64)" z10 zarch
d921 1
a921 1
ec0000000073 clfit*32 RIE_R0U0 "compare logical and trap (32<16)" z10 zarch
d923 1
a923 1
ec0000000071 clgit*32 RIE_R0U0 "compare logical and trap (64<16)" z10 zarch
@


1.20
log
@2008-03-06  Florian Krohm  <fkrohm@@us.ibm.com>

	* s390-opc.c (INSTR_RSL_R0RD): Fix operands.
	* s390-opc.txt (cmpsc): Duplicate entry removed.
	(dxr, sqdr, sqer, cxfbr, cdfbr, cefbr, lzer, lzdr, lzxr,
	cegbr, cdgbr, cxgbr, cegr, cdgr, cxgr, cxfr, cdfr, cefr, fixr, fidr,
	fier, cu42, cu41): Fix operand format.

2008-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/esa-g5.d (cdfbr, cdfr, cefbr, cefr, cxfbr, cxfr,
	dxr, fidr, fier, fixr, lzdr, lzer, lzxr, sqdr, sqer, tp): Fix
	operand format.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/zarch-z900.d (cdgbr, cdgr, cegbr, cegr, cxgbr,
	cxgr): Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z9-109.d (cu41, cu42): Remove mask operand.
	* gas/s390/zarch-z9-109.s: Likewise.
@
text
@d265 8
d276 8
d286 8
d490 8
d887 102
@


1.19
log
@2007-11-27  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* s390-opc.txt ("tcet", "tcdt", "tcxt", "tget", "tgdt",
	"tgxt"): Removed.
	("tdcet", "tdcdt", "tdcxt", "tdget", "tdgdt", "tdgxt"): Added.
@
text
@a47 1
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
d65 1
a65 1
b22d dxr RRE_F0 "divide (ext.)" g5 esa,zarch
d190 2
a191 2
b244 sqdr RRE_F0 "square root (long)" g5 esa,zarch
b245 sqer RRE_F0 "square root (short)" g5 esa,zarch
d286 3
a288 3
b396 cxfbr RRE_RF "convert from fixed 32 to extended bfp" g5 esa,zarch
b395 cdfbr RRE_RF "convert from fixed 32 to long bfp" g5 esa,zarch
b394 cefbr RRE_RF "convert from fixed 32 to short bfp" g5 esa,zarch
d385 3
a387 3
b374 lzer RRE_R0 "load short zero" g5 esa,zarch
b375 lzdr RRE_R0 "load long zero" g5 esa,zarch
b376 lzxr RRE_R0 "load extended zero" g5 esa,zarch
d478 3
a480 3
b3a4 cegbr RRE_RR "convert from fixed 64 to short bfp" z900 zarch
b3a5 cdgbr RRE_RR "convert from fixed 64 to long bfp" z900 zarch
b3a6 cxgbr RRE_RR "convert from fixed 64 to extended bfp" z900 zarch
d484 3
a486 3
b3c4 cegr RRE_RR "convert from fixed 64 to short hfp" z900 zarch
b3c5 cdgr RRE_RR "convert from fixed 64 to long hfp" z900 zarch
b3c6 cxgr RRE_RR "convert from fixed 64 to extended hfp" z900 zarch
d554 3
a556 3
b3b6 cxfr RRE_RF "convert from fixed 32 to extended hfp" g5 esa,zarch
b3b5 cdfr RRE_RF "convert from fixed 32 to long hfp" g5 esa,zarch
b3b4 cefr RRE_RF "convert from fixed 32 to short hfp" g5 esa,zarch
d562 3
a564 3
b367 fixr RRF_U0FF "load fp integer extended hfp" g5 esa,zarch
b37f fidr RRF_U0FF "load fp integer long hfp" g5 esa,zarch
b377 fier RRF_U0FF "load fp integer short hfp" g5 esa,zarch
d771 2
a772 2
b9b3 cu42 RRF_M0RR "convert utf-32 to utf-16" z9-109 zarch
b9b2 cu41 RRF_M0RR "convert utf-32 to utf-8" z9-109 zarch
@


1.18
log
@2007-08-21  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* s390-mkopc.c (struct s390_cond_ext_format): New global struct.
	(s390_cond_ext_format): New global variable.
	(expandConditionalJump): New function.
	(main): Invoke expandConditionalJump for mnemonics containing '*'.
	* s390-opc.txt: Replace mnemonics with conditional
	mask extensions with instructions using the newly introduced '*' tag.
@
text
@d847 6
a852 6
ed0000000050 tcet RXE_FRRD "test data class short dfp" z9-ec zarch
ed0000000054 tcdt RXE_FRRD "test data class long dfp" z9-ec zarch
ed0000000058 tcxt RXE_FRRD "test data class extended dfp" z9-ec zarch
ed0000000051 tget RXE_FRRD "test data group short dfp" z9-ec zarch
ed0000000055 tgdt RXE_FRRD "test data group long dfp" z9-ec zarch
ed0000000059 tgxt RXE_FRRD "test data group extended dfp" z9-ec zarch
@


1.17
log
@2007-04-24  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-opc.c (MASK_SSF_RRDRD): Fourth nybble belongs to the
	opcode.
	* opcodes/s390-opc.txt (pfpo, ectg, csst): New z9-ec instructions added.


2007-04-24  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z9-ec.d: Add pfpo, ectg and csst.
	* gas/s390/zarch-z9-ec.s: Likewise.
@
text
@d265 1
a265 20
0710 bor RR_0R "branch on overflow / if ones" g5 esa,zarch
0720 bhr RR_0R "branch on high" g5 esa,zarch
0720 bpr RR_0R "branch on plus" g5 esa,zarch
0730 bnler RR_0R "branch on not low or equal" g5 esa,zarch
0740 blr RR_0R "branch on low" g5 esa,zarch
0740 bmr RR_0R "branch on minus / if mixed" g5 esa,zarch
0750 bnher RR_0R "branch on not high or equal" g5 esa,zarch
0760 blhr RR_0R "branch on low or high" g5 esa,zarch
0770 bner RR_0R "branch on not equal" g5 esa,zarch
0770 bnzr RR_0R "branch on not zero / if not zeros" g5 esa,zarch
0780 ber RR_0R "branch on equal" g5 esa,zarch
0780 bzr RR_0R "branch on zero / if zeros" g5 esa,zarch
0790 bnlhr RR_0R "branch on not low or high" g5 esa,zarch
07a0 bher RR_0R "branch on high or equal" g5 esa,zarch
07b0 bnlr RR_0R "branch on not low" g5 esa,zarch
07b0 bnmr RR_0R "branch on not minus / if not mixed" g5 esa,zarch
07c0 bler RR_0R "brach on low or equal" g5 esa,zarch
07d0 bnhr RR_0R "branch on not high" g5 esa,zarch
07d0 bnpr RR_0R "branch on not plus" g5 esa,zarch
07e0 bnor RR_0R "branch on not overflow / if not ones" g5 esa,zarch
d268 1
a268 20
4710 bo RX_0RRD "branch on overflow / if ones" g5 esa,zarch
4720 bh RX_0RRD "branch on high" g5 esa,zarch
4720 bp RX_0RRD "branch on plus" g5 esa,zarch
4730 bnle RX_0RRD "branch on not low or equal" g5 esa,zarch
4740 bl RX_0RRD "branch on low" g5 esa,zarch
4740 bm RX_0RRD "branch on minus / if mixed" g5 esa,zarch
4750 bnhe RX_0RRD "branch on not high or equal" g5 esa,zarch
4760 blh RX_0RRD "branch on low or high" g5 esa,zarch
4770 bne RX_0RRD "branch on not equal" g5 esa,zarch
4770 bnz RX_0RRD "branch on not zero / if not zeros" g5 esa,zarch
4780 be RX_0RRD "branch on equal" g5 esa,zarch
4780 bz RX_0RRD "branch on zero / if zeros" g5 esa,zarch
4790 bnlh RX_0RRD "branch on not low or high" g5 esa,zarch
47a0 bhe RX_0RRD "branch on high or equal" g5 esa,zarch
47b0 bnl RX_0RRD "branch on not low" g5 esa,zarch
47b0 bnm RX_0RRD "branch on not minus / if not mixed" g5 esa,zarch
47c0 ble RX_0RRD "branch on low or equal" g5 esa,zarch
47d0 bnh RX_0RRD "branch on not high" g5 esa,zarch
47d0 bnp RX_0RRD "branch on not plus" g5 esa,zarch
47e0 bno RX_0RRD "branch on not overflow / if not ones" g5 esa,zarch
d270 2
a271 21
a714 jo RI_0P "jump on overflow / if ones" g5 esa,zarch
a724 jh RI_0P "jump on A high" g5 esa,zarch
a724 jp RI_0P "jump on plus" g5 esa,zarch
a734 jnle RI_0P "jump on not low or equal" g5 esa,zarch
a744 jl RI_0P "jump on A low" g5 esa,zarch
a744 jm RI_0P "jump on minus / if mixed" g5 esa,zarch
a754 jnhe RI_0P "jump on not high or equal" g5 esa,zarch
a764 jlh RI_0P "jump on low or high" g5 esa,zarch
a774 jne RI_0P "jump on A not equal B" g5 esa,zarch
a774 jnz RI_0P "jump on not zero / if not zeros" g5 esa,zarch
a784 je RI_0P "jump on A equal B" g5 esa,zarch
a784 jz RI_0P "jump on zero / if zeros" g5 esa,zarch
a794 jnlh RI_0P "jump on not low or high" g5 esa,zarch
a7a4 jhe RI_0P "jump on high or equal" g5 esa,zarch
a7b4 jnl RI_0P "jump on A not low" g5 esa,zarch
a7b4 jnm RI_0P "jump on not minus / if not mixed" g5 esa,zarch
a7c4 jle RI_0P "jump on low or equal" g5 esa,zarch
a7d4 jnh RI_0P "jump on A not high" g5 esa,zarch
a7d4 jnp RI_0P "jump on not plus" g5 esa,zarch
a7e4 jno RI_0P "jump on not overflow / if not ones" g5 esa,zarch
a7f4 j RI_0P "jump" g5 esa,zarch
d466 2
a467 21
c014 jgo RIL_0P "jump long on overflow / if ones" z900 esa,zarch
c024 jgh RIL_0P "jump long on high" z900 esa,zarch
c024 jgp RIL_0P "jump long on plus" z900 esa,zarch
c034 jgnle RIL_0P "jump long on not low or equal" z900 esa,zarch
c044 jgl RIL_0P "jump long on low" z900 esa,zarch
c044 jgm RIL_0P "jump long on minus / if mixed" z900 esa,zarch
c054 jgnhe RIL_0P "jump long on not high or equal" z900 esa,zarch
c064 jglh RIL_0P "jump long on low or high" z900 esa,zarch
c074 jgne RIL_0P "jump long on not equal" z900 esa,zarch
c074 jgnz RIL_0P "jump long on not zero / if not zeros" z900 esa,zarch
c084 jge RIL_0P "jump long on equal" z900 esa,zarch
c084 jgz RIL_0P "jump long on zero / if zeros" z900 esa,zarch
c094 jgnlh RIL_0P "jump long on not low or high" z900 esa,zarch
c0a4 jghe RIL_0P "jump long on high or equal" z900 esa,zarch
c0b4 jgnl RIL_0P "jump long on not low" z900 esa,zarch
c0b4 jgnm RIL_0P "jump long on not minus / if not mixed" z900 esa,zarch
c0c4 jgle RIL_0P "jump long on low or equal" z900 esa,zarch
c0d4 jgnh RIL_0P "jump long on not high" z900 esa,zarch
c0d4 jgnp RIL_0P "jump long on not plus" z900 esa,zarch
c0e4 jgno RIL_0P "jump long on not overflow / if not ones" z900 esa,zarch
c0f4 jg RIL_0P "jump long" z900 esa,zarch
@


1.16
log
@2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-opc.c (INSTR_RRE_FR, INSTR_RRF_F0FF2, INSTR_RRF_F0FR,
	INSTR_RRF_UUFF, INSTR_RRF_0UFF, INSTR_RRF_FFFU,	INSTR_RRR_F0FF): New
	instruction formats added.
	(MASK_RRE_FR, MASK_RRF_F0FF2, MASK_RRF_F0FR, MASK_RRF_UUFF,
	MASK_RRF_0UFF, MASK_RRF_FFFU, MASK_RRR_F0FF): New instruction format
	masks added.
	* opcodes/s390-opc.txt (lpdfr - tgxt): Decimal floating point
	instructions added.
	* opcodes/s390-mkopc.c (s390_opcode_cpu_val): S390_OPCODE_Z9_EC added.
	(main): z9-ec cpu type option added.
	* include/opcode/s390.h (s390_opcode_cpu_val): S390_OPCODE_Z9_EC added.

2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* config/tc-s390.c (md_parse_option): z9-ec option added.

2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z9-ec.d: New file.
	* gas/s390/zarch-z9-ec.s: New file.
	* gas/s390/s390.exp: Run the z9-ec testcases.
@
text
@d929 3
@


1.15
log
@* s390-opc.c (INSTR_SS_L2RDRD): New.
(MASK_SS_L2RDRD): New.
* s390-opc.txt (pka): Use it.

* gas/s390/esa-g5.s: Adjust for corrected PKA syntax.
* gas/s390/esa-g5.d: Adjust for corrected PKA syntax.
@
text
@d866 63
@


1.14
log
@2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

        * s390-opc.c (INSTR_RRF_U0FR, MASK_RRF_U0FR): Removed.
	(INSTR_RRF_U0RF, MASK_RRF_U0RF): Added.
	* s390-opc.txt (cfxbr, cfdbr, cfebr, cgebr, cgdbr, cgxbr, cger, cgdr,
	cgxr, cfxr, cfdr, cfer): Instruction type set to INSTR_RRF_U0RF.

2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

        * gas/s390/esa-g5.d (cfxbr, cfebr, cfdbr): Exchanged floating
	point and fixed point operands.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/zarch-z900.d (cfdr, cfer, cfxr, cgdbr, cgebr, cgxbr,
	cgdr, cger, cgxr): Likewise.
	* gas/s390/zarch-z900.s: Likewise.
@
text
@d431 1
a431 1
e9 pka SS_L0RDRD "pack ascii" g5 esa,zarch
@


1.13
log
@2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* s390-opc.txt ("efpc", "sfpc"): Set to RRE_RR_OPT instruction type.
	* s390-opc.c (s390_operands): Add RO_28 as optional gpr.
	(INSTR_RRE_RR_OPT, MASK_RRE_RR_OPT): New instruction type for efpc
	and sfpc.
@
text
@d347 3
a349 3
b39a cfxbr RRF_U0FR "convert to fixed extended bfp to 32" g5 esa,zarch
b399 cfdbr RRF_U0FR "convert to fixed long bfp to 32" g5 esa,zarch
b398 cfebr RRF_U0FR "convert to fixed short bfp to 32" g5 esa,zarch
d558 3
a560 3
b3a8 cgebr RRF_U0FR "convert to fixed short bfd to 64" z900 zarch
b3a9 cgdbr RRF_U0FR "convert to fixed long bfp to 64" z900 zarch
b3aa cgxbr RRF_U0FR "convert to fixed extended bfp to 64" z900 zarch
d564 3
a566 3
b3c8 cger RRF_U0FR "convert to fixed short hfp to 64" z900 zarch
b3c9 cgdr RRF_U0FR "convert to fixed long hfp to 64" z900 zarch
b3ca cgxr RRF_U0FR "convert to fixed extended hfp to 64" z900 zarch
d634 3
a636 3
b3ba cfxr RRF_U0FR "convert to fixed extended hfp to 32" z900 zarch
b3b9 cfdr RRF_U0FR "convert to fixed long hfp to 32" z900 zarch
b3b8 cfer RRF_U0FR "convert to fixed short hfp to 32" z900 zarch
@


1.12
log
@	* s390-opc.txt: Add unnormalized hfp multiply and multiply-and-add
	instructions.
@
text
@d357 1
a357 1
b38c efpc RRE_RR "extract fpc" g5 esa,zarch
d400 1
a400 1
b384 sfpc RRE_RR "set fpc" g5 esa,zarch
@


1.11
log
@	* s390-dis.c (print_insn_s390): Print unsigned operands with %u.
	* s390-mkopc.c (s390_opcode_cpu_val): Add support for cpu type z9-109.
	(main): Likewise.
	* s390-opc.c (I32_16, U32_16, M_16): Add defines 32 bit immediates
	and 4 bit optional masks.
	(INSTR_RIL_RI, INSTR_RIL_RU, INSTR_RRF_M0RR, INSTR_RSE_CCRD,
	INSTR_RSY_CCRD, INSTR_SSF_RRDRD): Add new instruction formats.
	(MASK_RIL_RI, MASK_RIL_RU, MASK_RRF_M0RR, MASK_RSE_CCRD,
	MASK_RSY_CCRD, MASK_SSF_RRDRD): Likewise.
	(s390_opformats): Likewise.
	* s390-opc.txt: Add new instructions for cpu type z9-109.
@
text
@d853 13
@


1.10
log
@update copyright dates
@
text
@d467 1
a467 1
b909 sgr RRE_RR "subtract 64" z900 zarch zarch
d513 2
a514 2
eb0000000025 stctg RSE_RRRD "store control 64" z900 zarch
eb000000002f lctlg RSE_RRRD "load control 64" z900 zarch
a650 1
35 ledr RR_FF "load rounded long to short hfp" g5 esa,zarch
d765 1
a765 1
eb0000000025 stctg RSY_RRRD "store control 64" z990 zarch
d768 1
a768 1
eb000000002f lctlg RSY_RRRD "load control 64" z990 zarch
d783 1
a783 1
ed000000002e mae RXF_FRRDF "multiply and add shoft hfp" z990 esa,zarch
d793 60
@


1.9
log
@        * s390-opc.txt: Correct architecture mask for some opcodes.
	lrv, lrvh, strv, ml, dl, alc, slb rll and mvclu are available
	in the esa mode as well.
@
text
@d2 1
a2 1
#  Copyright 2000, 2001 Free Software Foundation, Inc.
@


1.8
log
@        * s390-dis.c (s390_extract_operand): Add support for long displacements.
        * s390-mkopc.c (s390_opcode_cpu_val): Add support for cpu type z990.
        * s390-opc.c (D20_20): Add define for 20 bit displacements.
        (INSTR_RRF_R0RR, INSTR_RSL_R0RD, INSTR_RSY_RRRD, INSTR_RSY_RURD,
        INSTR_RSY_AARD, INSTR_RXY_RRRD, INSTR_RXY_FRRD, INSTR_SIY_URD): Add
        new instruction formats.
        (MASK_RRF_R0RR, MASK_RSL_R0RD, MASK_RSY_RRRD, MASK_RSY_RURD,
        MASK_RSY_AARD, MASK_RXY_RRRD, MASK_RXY_FRRD, MASK_SIY_URD): Likewise.
        (s390_opformats): Likewise.
        * s390-opc.txt: Add new instructions for cpu type z990. Add missing
        hfp instructions. Add missing instructions pgin, pgout and xsch.
@
text
@d729 2
a730 2
e3000000001e lrv RXY_RRRD "load reversed 32" z990 zarch
e3000000001f lrvh RXY_RRRD "load reversed 16" z990 zarch
d738 1
a738 1
e3000000003e strv RXY_RRRD "store reversed 32" z990 zarch
d752 4
a755 4
e30000000096 ml RXY_RRRD "multiply logical 32" z990 zarch
e30000000097 dl RXY_RRRD "divide logical 32" z990 zarch
e30000000098 alc RXY_RRRD "add logical with carry 32" z990 zarch
e30000000099 slb RXY_RRRD "subtract logical with borrow 32" z990 zarch
d763 1
a763 1
eb000000001d rll RSY_RRRD "rotate left single logical 32" z990 zarch
d775 1
a775 1
eb000000008e mvclu RSY_RRRD "move long unicode" z990 zarch
@


1.8.14.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d729 2
a730 2
e3000000001e lrv RXY_RRRD "load reversed 32" z990 esa,zarch
e3000000001f lrvh RXY_RRRD "load reversed 16" z990 esa,zarch
d738 1
a738 1
e3000000003e strv RXY_RRRD "store reversed 32" z990 esa,zarch
d752 4
a755 4
e30000000096 ml RXY_RRRD "multiply logical 32" z990 esa,zarch
e30000000097 dl RXY_RRRD "divide logical 32" z990 esa,zarch
e30000000098 alc RXY_RRRD "add logical with carry 32" z990 esa,zarch
e30000000099 slb RXY_RRRD "subtract logical with borrow 32" z990 esa,zarch
d763 1
a763 1
eb000000001d rll RSY_RRRD "rotate left single logical 32" z990 esa,zarch
d775 1
a775 1
eb000000008e mvclu RSY_RRRD "move long unicode" z990 esa,zarch
@


1.7
log
@	* s390-dis.c (init_disasm): Rename S390_OPCODE_ESAME to
	S390_OPCODE_ZARCH.
	(print_insn_s390): Use new modes field of s390_opcodes.
	* s390-mkopc.c (ARCHBITS_ESAONLY, ARCHBITS_ESA, ARCHBITS_ESAME): Remove.
	(s390_opcode_mode_val, s390_opcode_cpu_val): New enums.
	(struct op_struct): Remove archbits. Add mode_bits and min_cpu.
	(insertOpcode): Replace archbits by min_cpu and mode_bits.
	(dumpTable): Write mode_bits and min_cpu instead of archbits.
	(main): Adapt to new format in s390-opcode.txt.
	* s390-opc.c (s390_opformats): Replace archbits by min_cpu and
	mode_bits.
	* s390-opc.txt: Replace archbits by min_cpu and mode_bits.
@
text
@d112 2
d123 1
d125 1
d630 164
@


1.6
log
@s390 assembler improvements and testsuite
@
text
@d4 438
a441 419
5a a RX_RRRD "add" esa
6a ad RX_FRRD "add normalized (long)" esa
2a adr RR_FF "add normalized (long)" esa
7a ae RX_FRRD "add normalized (short)" esa
3a aer RR_FF "add normalized (short)" esa
4a ah RX_RRRD "add halfword" esa
5e al RX_RRRD "add logical" esa
1e alr RR_RR "add logical" esa
fa ap SS_LLRDRD "add decimal" esa
1a ar RR_RR "add" esa
7e au RX_FRRD "add unnormalized (short)" esa
3e aur RR_FF "add unnormalized (short)" esa
6e aw RX_FRRD "add unnormalized (long)" esa
2e awr RR_FF "add unnormalized (long)" esa
36 axr RR_FF "add normalized" esa
b240 bakr RRE_RR "branch and stack" esa
45 bal RX_RRRD "branch and link" esa
05 balr RR_RR "branch and link" esa
4d bas RX_RRRD "branch and save" esa
0d basr RR_RR "branch and save" esa
0c bassm RR_RR "branch and save and set mode" esa
47 bc RX_URRD "branch on condition" esa
07 bcr RR_UR "branch on condition" esa
46 bct RX_RRRD "branch on count" esa
06 bctr RR_RR "branch on count" esa
b258 bsg RRE_RR "branch in subspace group" esa
0b bsm RR_RR "branch and set mode" esa
86 bxh RS_RRRD "branch on index high" esa
87 bxle RS_RRRD "branch on index low or equal" esa
59 c RX_RRRD "compare" esa
69 cd RX_FRRD "compare (long)" esa
29 cdr RR_FF "compare (long)" esa
bb cds RS_RRRD "compare double and swap" esa
79 ce RX_FRRD "compare (short)" esa
39 cer RR_FF "compare (short)" esa
b21a cfc S_RD "compare and form codeword" esa
49 ch RX_RRRD "compare halfword" esa
55 cl RX_RRRD "compare logical" esa
d5 clc SS_L0RDRD "compare logical" esa
0f clcl RR_RR "compare logical long" esa
95 cli SI_URD "compare logical" esa
bd clm RS_RURD "compare logical characters under mask" esa
15 clr RR_RR "compare logical" esa
b25d clst RRE_RR "compare logical string" esa
b263 cmpsc RRE_RR "compression call" esa
f9 cp SS_LLRDRD "compare decimal" esa
b24d cpya RRE_AA "copy access" esa
19 cr RR_RR "compare" esa
ba cs RS_RRRD "compare and swap" esa
b230 csch S_00 "clear subchannel" esa
b257 cuse RRE_RR "compare until substring equal" esa
b250 csp RRE_RR "compare and swap and purge" esa
4f cvb RX_RRRD "convert to binary" esa
4e cvd RX_RRRD "convert to decimal" esa
5d d RX_RRRD "divide" esa
6d dd RX_FRRD "divide (long)" esa
2d ddr RR_FF "divide (long)" esa
7d de RX_FRRD "divide (short)" esa
3d der RR_FF "divide (short)" esa
83 diag RS_RRRD "diagnose" esa
fd dp SS_LLRDRD "divide decimal" esa
1d dr RR_RR "divide" esa
b22d dxr RRE_F0 "divide (ext.)" esa
b24f ear RRE_RA "extract access" esa
de ed SS_L0RDRD "edit" esa
df edmk SS_L0RDRD "edit and mark" esa
b226 epar RRE_R0 "extract primary ASN" esa
b249 ereg RRE_RR "extract stacked registers" esa
b227 esar RRE_R0 "extract secondary ASN" esa
b24a esta RRE_RR "extract stacked state" esa
44 ex RX_RRRD "execute" esa
24 hdr RR_FF "halve (long)" esa
34 her RR_FF "halve (short)" esa
b231 hsch S_00 "halt subchannel" esa
b224 iac RRE_R0 "insert address space control" esa
43 ic RX_RRRD "insert character" esa
bf icm RS_RURD "insert characters under mask" esa
b20b ipk S_00 "insert PSW key" esa
b222 ipm RRE_R0 "insert program mask" esa
b221 ipte RRE_RR "invalidate page table entry" esa
b229 iske RRE_RR "insert storage key extended" esa
b223 ivsk RRE_RR "insert virtual storage key" esa
58 l RX_RRRD "load" esa
41 la RX_RRRD "load address" esa
51 lae RX_RRRD "load address extended" esa
9a lam RS_AARD "load access multiple" esa
e500 lasp SSE_RDRD "load address space parameters" esa
23 lcdr RR_FF "load complement (long)" esa
33 lcer RR_FF "load complement (short)" esa
13 lcr RR_RR "load complement" esa
b7 lctl RS_CCRD "load control" esa
68 ld RX_FRRD "load (long)" esa
28 ldr RR_FF "load (long)" esa
78 le RX_FRRD "load (short)" esa
38 ler RR_FF "load (short)" esa
48 lh RX_RRRD "load halfword" esa
98 lm RS_RRRD "load multiple" esa
21 lndr RR_FF "load negative (long)" esa
31 lner RR_FF "load negative (short)" esa
11 lnr RR_RR "load negative" esa
20 lpdr RR_FF "load positive (long)" esa
30 lper RR_FF "load positive (short)" esa
10 lpr RR_RR "load positive" esa
82 lpsw S_RD "load PSW" esa
18 lr RR_RR "load" esa
b1 lra RX_RRRD "load real address" esa
25 lrdr RR_FF "load rounded (ext. to long)" esa
35 lrer RR_FF "load rounded (long to short)" esa
22 ltdr RR_FF "load and test (long)" esa
32 lter RR_FF "load and test (short)" esa
12 ltr RR_RR "load and test" esa
b24b lura RRE_RR "load using real address" esa
5c m RX_RRRD "multiply" esa
af mc SI_URD "monitor call" esa
6c md RX_FRRD "multiply (long)" esa
2c mdr RR_FF "multiply (long)" esa
7c me RX_FRRD "multiply (short to long)" esa
3c mer RR_FF "multiply (short to long)" esa
4c mh RX_RRRD "multiply halfword" esa
fc mp SS_LLRDRD "multiply decimal" esa
1c mr RR_RR "multiply" esa
b232 msch S_RD "modify subchannel" esa
b247 msta RRE_R0 "modify stacked state" esa
d2 mvc SS_L0RDRD "move" esa
e50f mvcdk SSE_RDRD "move with destination key" esa
e8 mvcin SS_L0RDRD "move inverse" esa
d9 mvck SS_RRRDRD "move with key" esa
0e mvcl RR_RR "move long" esa
da mvcp SS_RRRDRD "move to primary" esa
db mvcs SS_RRRDRD "move to secondary" esa
e50e mvcsk SSE_RDRD "move with source key" esa
92 mvi SI_URD "move" esa
d1 mvn SS_L0RDRD "move numerics" esa
f1 mvo SS_LLRDRD "move with offset" esa
b254 mvpg RRE_RR "move page" esa
b255 mvst RRE_RR "move string" esa
d3 mvz SS_L0RDRD "move zones" esa
67 mxd RX_FRRD "multiply (long to ext.)" esa
27 mxdr RR_FF "multiply (long to ext.)" esa
26 mxr RR_FF "multiply (ext.)" esa
54 n RX_RRRD "AND" esa
d4 nc SS_L0RDRD "AND" esa
94 ni SI_URD "AND" esa
14 nr RR_RR "AND" esa
56 o RX_RRRD "OR" esa
d6 oc SS_L0RDRD "OR" esa
96 oi SI_URD "OR" esa
16 or RR_RR "OR" esa
f2 pack SS_LLRDRD "pack" esa
b248 palb RRE_00 "purge ALB" esa
b218 pc S_RD "program call" esa
0101 pr E "program return" esa
b228 pt RRE_RR "program transfer" esa
b20d ptlb S_00 "purge TLB" esa
b23b rchp S_00 "reset channel path" esa
b22a rrbe RRE_RR "reset reference bit extended" esa
b238 rsch S_00 "resume subchannel" esa
5b s RX_RRRD "subtract" esa
b219 sac S_RD "set address space control" esa
b279 sacf S_RD "set address space control fast" esa
b237 sal S_00 "set address limit" esa
b24e sar RRE_AR "set access" esa
b23c schm S_00 "set channel monitor" esa
b204 sck S_RD "set clock" esa
b206 sckc S_RD "set clock comparator" esa
6b sd RX_FRRD "subtract normalized (long)" esa
2b sdr RR_FF "subtract normalized (long)" esa
7b se RX_FRRD "subtract normalized (short)" esa
3b ser RR_FF "subtract normalized (short)" esa
4b sh RX_RRRD "subtract halfword" esa
b214 sie S_RD "start interpretive execution" esa
ae sigp RS_RRRD "signal processor" esa
5f sl RX_RRRD "subtract logical" esa
8b sla RS_R0RD "shift left single" esa
8f slda RS_R0RD "shift left double (long)" esa
8d sldl RS_R0RD "shift left double logical (long)" esa
89 sll RS_R0RD "shift left single logical" esa
1f slr RR_RR "subtract logical" esa
fb sp SS_LLRDRD "subtract decimal" esa
b20a spka S_RD "set PSW key from address" esa
04 spm RR_R0 "set program mask" esa
b208 spt S_RD "set CPU timer" esa
b210 spx S_RD "set prefix" esa
b244 sqdr RRE_F0 "square root (long)" esa
b245 sqer RRE_F0 "square root (short)" esa
1b sr RR_RR "subtract" esa
8a sra RS_R0RD "shift right single" esa
8e srda RS_R0RD "shift right double (long)" esa
8c srdl RS_R0RD "shift right double logical (long)" esa
88 srl RS_R0RD "shift right single logical" esa
f0 srp SS_LIRDRD "shift and round decimal" esa
b25e srst RRE_RR "search string" esa
b225 ssar RRE_R0 "set secondary ASN" esa
b233 ssch S_RD "start subchannel" esa
b22b sske RRE_RR "set storage key extended" esa
80 ssm S_RD "set system mask" esa
50 st RX_RRRD "store" esa
9b stam RS_AARD "store access multiple" esa
b212 stap S_RD "store CPU address" esa
42 stc RX_RRRD "store character" esa
b205 stck S_RD "store clock" esa
b207 stckc S_RD "store clock comparator" esa
be stcm RS_RURD "store characters under mask" esa
b23a stcps S_RD "store channel path status" esa
b239 stcrw S_RD "store channel report word" esa
b6 stctl RS_CCRD "store control" esa
60 std RX_FRRD "store (long)" esa
70 ste RX_FRRD "store (short)" esa
40 sth RX_RRRD "store halfword" esa
b202 stidp S_RD "store CPU id" esa
90 stm RS_RRRD "store multiple" esa
ac stnsm SI_URD "store then AND system mask" esa
ad stosm SI_URD "store then OR system mask" esa
b209 stpt S_RD "store CPU timer" esa
b211 stpx S_RD "store prefix" esa
b234 stsch S_RD "store subchannel" esa
b246 stura RRE_RR "store using real address" esa
7f su RX_FRRD "subtract unnormalized (short)" esa
3f sur RR_FF "subtract unnormalized (short)" esa
0a svc RR_U0 "supervisor call" esa
6f sw RX_FRRD "subtract unnormalized (long)" esa
2f swr RR_FF "subtract unnormalized (long)" esa
37 sxr RR_FF "subtract normalized (ext.)" esa
b24c tar RRE_AR "test access" esa
b22c tb RRE_0R "test block" esa
91 tm SI_URD "test under mask" esa
b236 tpi S_RD "test pending interruption" esa
e501 tprot SSE_RDRD "test protection" esa
dc tr SS_L0RDRD "translate" esa
99 trace RS_RRRD "trace" esa
dd trt SS_L0RDRD "translate and test" esa
93 ts S_RD "test and set" esa
b235 tsch S_RD "test subchannel" esa
f3 unpk SS_LLRDRD "unpack" esa
0102 upt E "update tree" esa
57 x RX_RRRD "exclusive OR" esa
d7 xc SS_L0RDRD "exclusive OR" esa
97 xi SI_URD "exclusive OR" esa
17 xr RR_RR "exclusive OR" esa
f8 zap SS_LLRDRD "zero and add" esa
a70a ahi RI_RI "add halfword immediate" esa
84 brxh RSI_RRP "branch relative on index high" esa
85 brxle RSI_RRP "branch relative on index low or equal" esa
a705 bras RI_RP "branch relative and save" esa
a704 brc RI_UP "branch relative on condition" esa
a706 brct RI_RP "branch relative on count" esa
b241 cksm RRE_RR "checksum" esa
a70e chi RI_RI "compare halfword immediate" esa
a9 clcle RS_RRRD "compare logical long extended" esa
a708 lhi RI_RI "load halfword immediate" esa
a8 mvcle RS_RRRD "move long extended" esa
a70c mhi RI_RI "multiply halfword immediate" esa
b252 msr RRE_RR "multiply single" esa
71 ms RX_RRRD "multiply single" esa
a700 tmh RI_RU "test under mask high" esa
a701 tml RI_RU "test under mask low" esa
0700 nopr RR_0R "no operation" esa
0710 bor RR_0R "branch on overflow / if ones" esa
0720 bhr RR_0R "branch on high" esa
0720 bpr RR_0R "branch on plus" esa
0730 bnler RR_0R "branch on not low or equal" esa
0740 blr RR_0R "branch on low" esa
0740 bmr RR_0R "branch on minus / if mixed" esa
0750 bnher RR_0R "branch on not high or equal" esa
0760 blhr RR_0R "branch on low or high" esa
0770 bner RR_0R "branch on not equal" esa
0770 bnzr RR_0R "branch on not zero / if not zeros" esa
0780 ber RR_0R "branch on equal" esa
0780 bzr RR_0R "branch on zero / if zeros" esa
0790 bnlhr RR_0R "branch on not low or high" esa
07a0 bher RR_0R "branch on high or equal" esa
07b0 bnlr RR_0R "branch on not low" esa
07b0 bnmr RR_0R "branch on not minus / if not mixed" esa
07c0 bler RR_0R "brach on low or equal" esa
07d0 bnhr RR_0R "branch on not high" esa
07d0 bnpr RR_0R "branch on not plus" esa
07e0 bnor RR_0R "branch on not overflow / if not ones" esa
07f0 br RR_0R "unconditional branch" esa
4700 nop RX_0RRD "no operation" esa
4710 bo RX_0RRD "branch on overflow / if ones" esa
4720 bh RX_0RRD "branch on high" esa
4720 bp RX_0RRD "branch on plus" esa
4730 bnle RX_0RRD "branch on not low or equal" esa
4740 bl RX_0RRD "branch on low" esa
4740 bm RX_0RRD "branch on minus / if mixed" esa
4750 bnhe RX_0RRD "branch on not high or equal" esa
4760 blh RX_0RRD "branch on low or high" esa
4770 bne RX_0RRD "branch on not equal" esa
4770 bnz RX_0RRD "branch on not zero / if not zeros" esa
4780 be RX_0RRD "branch on equal" esa
4780 bz RX_0RRD "branch on zero / if zeros" esa
4790 bnlh RX_0RRD "branch on not low or high" esa
47a0 bhe RX_0RRD "branch on high or equal" esa
47b0 bnl RX_0RRD "branch on not low" esa
47b0 bnm RX_0RRD "branch on not minus / if not mixed" esa
47c0 ble RX_0RRD "branch on low or equal" esa
47d0 bnh RX_0RRD "branch on not high" esa
47d0 bnp RX_0RRD "branch on not plus" esa
47e0 bno RX_0RRD "branch on not overflow / if not ones" esa
47f0 b RX_0RRD "unconditional branch" esa
a714 jo RI_0P "jump on overflow / if ones" esa
a724 jh RI_0P "jump on A high" esa
a724 jp RI_0P "jump on plus" esa
a734 jnle RI_0P "jump on not low or equal" esa
a744 jl RI_0P "jump on A low" esa
a744 jm RI_0P "jump on minus / if mixed" esa
a754 jnhe RI_0P "jump on not high or equal" esa
a764 jlh RI_0P "jump on low or high" esa
a774 jne RI_0P "jump on A not equal B" esa
a774 jnz RI_0P "jump on not zero / if not zeros" esa
a784 je RI_0P "jump on A equal B" esa
a784 jz RI_0P "jump on zero / if zeros" esa
a794 jnlh RI_0P "jump on not low or high" esa
a7a4 jhe RI_0P "jump on high or equal" esa
a7b4 jnl RI_0P "jump on A not low" esa
a7b4 jnm RI_0P "jump on not minus / if not mixed" esa
a7c4 jle RI_0P "jump on low or equal" esa
a7d4 jnh RI_0P "jump on A not high" esa
a7d4 jnp RI_0P "jump on not plus" esa
a7e4 jno RI_0P "jump on not overflow / if not ones" esa
a7f4 j RI_0P "jump" esa
b34a axbr RRE_FF "add extended bfp" esa
b31a adbr RRE_FF "add long bfp" esa
ed000000001a adb RXE_FRRD "add long bfp" esa
b30a aebr RRE_FF "add short bfp" esa
ed000000000a aeb RXE_FRRD "add short bfp" esa
b349 cxbr RRE_FF "compare extended bfp" esa
b319 cdbr RRE_FF "compare long bfp" esa
ed0000000019 cdb RXE_FRRD "compare long bfp" esa
b309 cebr RRE_FF "compare short bfp" esa
ed0000000009 ceb RXE_FRRD "compare short bfp" esa
b348 kxbr RRE_FF "compare and signal extended bfp" esa
b318 kdbr RRE_FF "compare and signal long bfp" esa
ed0000000018 kdb RXE_FRRD "compare and signal long bfp" esa
b308 kebr RRE_FF "compare and signal short bfp" esa
ed0000000008 keb RXE_FRRD "compare and signal short bfp" esa
b396 cxfbr RRE_RF "convert from fixed 32 to extended bfp" esa
b395 cdfbr RRE_RF "convert from fixed 32 to long bfp" esa
b394 cefbr RRE_RF "convert from fixed 32 to short bfp" esa
b39a cfxbr RRF_U0FR "convert to fixed extended bfp to 32" esa
b399 cfdbr RRF_U0FR "convert to fixed long bfp to 32" esa
b398 cfebr RRF_U0FR "convert to fixed short bfp to 32" esa
b34d dxbr RRE_FF "divide extended bfp" esa
b31d ddbr RRE_FF "divide long bfp" esa
ed000000001d ddb RXE_FRRD "divide long bfp" esa
b30d debr RRE_FF "divide short bfp" esa
ed000000000d deb RXE_FRRD "divide short bfp" esa
b35b didbr RRF_FUFF "divide to integer long bfp" esa
b353 diebr RRF_FUFF "divide to integer short bfp" esa
b38c efpc RRE_RR "extract fpc" esa
b342 ltxbr RRE_FF "load and test extended bfp" esa
b312 ltdbr RRE_FF "load and test long bfp" esa
b302 ltebr RRE_FF "load and test short bfp" esa
b343 lcxbr RRE_FF "load complement extended bfp" esa
b313 lcdbr RRE_FF "load complement long bfp" esa
b303 lcebr RRE_FF "load complement short bfp" esa
b347 fixbr RRF_U0FF "load fp integer extended bfp" esa
b35f fidbr RRF_U0FF "load fp integer long bfp" esa
b357 fiebr RRF_U0FF "load fp integer short bfp" esa
b29d lfpc S_RD "load fpc" esa
b305 lxdbr RRE_FF "load lengthened long to extended bfp" esa
ed0000000005 lxdb RXE_FRRD "load lengthened long to extended bfp" esa
b306 lxebr RRE_FF "load lengthened short to extended bfp" esa
ed0000000006 lxeb RXE_FRRD "load lengthened short to extended bfp" esa
b304 ldebr RRE_FF "load lengthened short to long bfp" esa
ed0000000004 ldeb RXE_FRRD "load lengthened short to long bfp" esa
b341 lnxbr RRE_FF "load negative extended bfp" esa
b311 lndbr RRE_FF "load negative long bfp" esa
b301 lnebr RRE_FF "load negative short bfp" esa
b340 lpxbr RRE_FF "load positive extended bfp" esa
b310 lpdbr RRE_FF "load positive long bfp" esa
b300 lpebr RRE_FF "load positive short bfp" esa
b345 ldxbr RRE_FF "load rounded extended to long bfp" esa
b346 lexbr RRE_FF "load rounded extended to short bfp" esa
b344 ledbr RRE_FF "load rounded long to short bfp" esa
b34c mxbr RRE_FF "multiply extended bfp" esa
b31c mdbr RRE_FF "multiply long bfp" esa
ed000000001c mdb RXE_FRRD "multiply long bfp" esa
b307 mxdbr RRE_FF "multiply long to extended bfp" esa
ed0000000007 mxdb RXE_FRRD "multiply long to extended bfp" esa
b317 meebr RRE_FF "multiply short bfp" esa
ed0000000017 meeb RXE_FRRD "multiply short bfp" esa
b30c mdebr RRE_FF "multiply short to long bfp" esa
ed000000000c mdeb RXE_FRRD "multiply short to long bfp" esa
b31e madbr RRF_F0FF "multiply and add long bfp" esa
ed000000001e madb RXF_FRRDF "multiply and add long bfp" esa
b30e maebr RRF_F0FF "multiply and add short bfp" esa
ed000000000e maeb RXF_FRRDF "multiply and add short bfp" esa
b31f msdbr RRF_F0FF "multiply and subtract long bfp" esa
ed000000001f msdb RXF_FRRDF "multiply and subtract long bfp" esa
b30f msebr RRF_F0FF "multiply and subtract short bfp" esa
ed000000000f mseb RXF_FRRDF "multiply and subtract short bfp" esa
b384 sfpc RRE_RR "set fpc" esa
b299 srnm S_RD "set rounding mode" esa
b316 sqxbr RRE_FF "square root extended bfp" esa
b315 sqdbr RRE_FF "square root long bfp" esa
ed0000000015 sqdb RXE_FRRD "square root long bfp" esa
b314 sqebr RRE_FF "square root short bfp" esa
ed0000000014 sqeb RXE_FRRD "square root short bfp" esa
b29c stfpc S_RD "store fpc" esa
b34b sxbr RRE_FF "subtract extended bfp" esa
b31b sdbr RRE_FF "subtract long bfp" esa
ed000000001b sdb RXE_FRRD "subtract long bfp" esa
b30b sebr RRE_FF "subtract short bfp" esa
ed000000000b seb RXE_FRRD "subtract short bfp" esa
ed0000000012 tcxb RXE_FRRD "test data class extended bfp" esa
ed0000000011 tcdb RXE_FRRD "test data class long bfp" esa
ed0000000010 tceb RXE_FRRD "test data class short bfp" esa
b274 siga S_RD "signal adapter" esa
# are the following instructions confidential ??
b2a6 cuutf RRE_RR "convert unicode to utf-8" esa
b2a7 cutfu RRE_RR "convert utf-8 to unicode" esa
ee plo SS_RRRDRD2 "perform locked operation" esa
b25a bsa RRE_RR "branch and set authority" esa
b277 rp S_RD "resume program" esa
0107 sckpf E "set clock programmable field" esa
b27d stsi S_RD "store system information" esa
01ff trap2 E "trap" esa
b2ff trap4 S_RD "trap4" esa
d443 183
a625 203
b946 bctgr RRE_RR "branch on count 64" esame
b900 lpgr RRE_RR "load positive 64" esame
b910 lpgfr RRE_RR "load positive 64<32" esame
b901 lngr RRE_RR "load negative 64" esame
b911 lngfr RRE_RR "load negative 64<32" esame
b902 ltgr RRE_RR "load and test 64" esame
b912 ltgfr RRE_RR "load and test 64<32" esame
b903 lcgr RRE_RR "load complement 64" esame
b913 lcgfr RRE_RR "load complement 64<32" esame
b980 ngr RRE_RR "and 64" esame
b921 clgr RRE_RR "compare logical 64" esame
b931 clgfr RRE_RR "compare logical 64<32" esame
b981 ogr RRE_RR "or 64" esame
b982 xgr RRE_RR "exclusive or 64" esame
b904 lgr RRE_RR "load 64" esame
b914 lgfr RRE_RR "load 64<32" esame
b920 cgr RRE_RR "compare 64" esame
b930 cgfr RRE_RR "compare 64<32" esame
b908 agr RRE_RR "add 64" esame
b918 agfr RRE_RR "add 64<32" esame
b909 sgr RRE_RR "subtract 64" esame
b919 sgfr RRE_RR "subtract 64<32" esame
b90a algr RRE_RR "add logical 64" esame
b91a algfr RRE_RR "add logical 64<32" esame
b90b slgr RRE_RR "subtract logical 64" esame
b91b slgfr RRE_RR "subtract logical 64<32" esame
e30000000046 bctg RXE_RRRD "branch on count 64" esame
e3000000002e cvdg RXE_RRRD "convert to decimal 64" esame
e3000000000e cvbg RXE_RRRD "convert to binary 64" esame
e30000000024 stg RXE_RRRD "store 64" esame
e30000000080 ng RXE_RRRD "and 64" esame
e30000000021 clg RXE_RRRD "compare logical 64" esame
e30000000031 clgf RXE_RRRD "comparee logical 64<32" esame
e30000000081 og RXE_RRRD "or 64" esame
e30000000082 xg RXE_RRRD "exclusive or 64" esame
e30000000004 lg RXE_RRRD "load 64" esame
e30000000014 lgf RXE_RRRD "load 64<32" esame
e30000000015 lgh RXE_RRRD "load halfword 64" esame
e30000000020 cg RXE_RRRD "compare 64" esame
e30000000030 cgf RXE_RRRD "compare 64<32" esame
e30000000008 ag RXE_RRRD "add 64" esame
e30000000018 agf RXE_RRRD "add 64<32" esame
e30000000009 sg RXE_RRRD "subtract 64" esame
e30000000019 sgf RXE_RRRD "subtract 64<32" esame
e3000000000a alg RXE_RRRD "add logical 64" esame
e3000000001a algf RXE_RRRD "add logical 64<32" esame
e3000000000b slg RXE_RRRD "subtract logical 64" esame
e3000000001b slgf RXE_RRRD "subtract logical 64<32" esame
e3000000000c msg RXE_RRRD "multiply single 64" esame
e3000000001c msgf RXE_RRRD "multiply single 64<32" esame
ec0000000044 brxhg RIE_RRP "branch relative on index high 64" esame
ec0000000045 brxlg RIE_RRP "branch relative on index low or equal 64" esame
eb0000000044 bxhg RSE_RRRD "branch on index high 64" esame
eb0000000045 bxleg RSE_RRRD "branch on index low or equal 64" esame
eb000000000c srlg RSE_RRRD "shift right single logical 64" esame
eb000000000d sllg RSE_RRRD "shift left single logical 64" esame
eb000000000a srag RSE_RRRD "shift right single 64" esame
eb000000000b slag RSE_RRRD "shift left single 64" esame
eb0000000024 stmg RSE_RRRD "store multiple 64" esame
eb0000000026 stmh RSE_RRRD "store multiple high" esame
eb0000000004 lmg RSE_RRRD "load multiple 64" esame
eb0000000096 lmh RSE_RRRD "load multiple high" esame
ef lmd SS_RRRDRD3 "load multiple disjoint" esame
eb000000000f tracg RSE_RRRD "trace 64" esame
e30000000003 lrag RXE_RRRD "load real address 64" esame
e50000000002 strag SSE_RDRD "store read address" esame
eb0000000025 stctg RSE_RRRD "store control 64" esame
eb000000002f lctlg RSE_RRRD "load control 64" esame
eb0000000030 csg RSE_RRRD "compare and swap 64" esame
eb000000003e cdsg RSE_RRRD "compare double and swap 64" esame
eb0000000020 clmh RSE_RURD "compare logical characters under mask high" esame
eb000000002c stcmh RSE_RURD "store characters under mask high" esame
eb0000000080 icmh RSE_RURD "insert characters under mask high" esame
a700 tmlh RI_RU "test under mask low high" esame
a702 tmhh RI_RU "test under mask high high" esame
a701 tmll RI_RU "test under mask low low" esame
a703 tmhl RI_RU "test under mask high low" esame
c004 brcl RIL_UP "branch relative on condition long" esame
c014 jgo RIL_0P "jump long on overflow / if ones" esame
c024 jgh RIL_0P "jump long on high" esame
c024 jgp RIL_0P "jump long on plus" esame
c034 jgnle RIL_0P "jump long on not low or equal" esame
c044 jgl RIL_0P "jump long on low" esame
c044 jgm RIL_0P "jump long on minus / if mixed" esame
c054 jgnhe RIL_0P "jump long on not high or equal" esame
c064 jglh RIL_0P "jump long on low or high" esame
c074 jgne RIL_0P "jump long on not equal" esame
c074 jgnz RIL_0P "jump long on not zero / if not zeros" esame
c084 jge RIL_0P "jump long on equal" esame
c084 jgz RIL_0P "jump long on zero / if zeros" esame
c094 jgnlh RIL_0P "jump long on not low or high" esame
c0a4 jghe RIL_0P "jump long on high or equal" esame
c0b4 jgnl RIL_0P "jump long on not low" esame
c0b4 jgnm RIL_0P "jump long on not minus / if not mixed" esame
c0c4 jgle RIL_0P "jump long on low or equal" esame
c0d4 jgnh RIL_0P "jump long on not high" esame
c0d4 jgnp RIL_0P "jump long on not plus" esame
c0e4 jgno RIL_0P "jump long on not overflow / if not ones" esame
c0f4 jg RIL_0P "jump long" esame
c005 brasl RIL_RP "branch relative and save long" esame
a707 brctg RI_RP "branch relative on count 64" esame
a709 lghi RI_RI "load halfword immediate 64" esame
a70b aghi RI_RI "add halfword immediate 64" esame
a70d mghi RI_RI "multiply halfword immediate 64" esame
a70f cghi RI_RI "compare halfword immediate 64" esame
b925 sturg RRE_RR "store using real address 64" esame
b90e eregg RRE_RR "extract stacked registers 64" esame
b905 lurag RRE_RR "load using real address 64" esame
b90c msgr RRE_RR "multiply single 64" esame
b91c msgfr RRE_RR "multiply single 64<32" esame
b3a4 cegbr RRE_RR "convert from fixed 64 to short bfp" esame
b3a5 cdgbr RRE_RR "convert from fixed 64 to long bfp" esame
b3a6 cxgbr RRE_RR "convert from fixed 64 to extended bfp" esame
b3a8 cgebr RRF_U0FR "convert to fixed short bfd to 64" esame
b3a9 cgdbr RRF_U0FR "convert to fixed long bfp to 64" esame
b3aa cgxbr RRF_U0FR "convert to fixed extended bfp to 64" esame
b3c4 cegr RRE_RR "convert from fixed 64 to short hfp" esame
b3c5 cdgr RRE_RR "convert from fixed 64 to long hfp" esame
b3c6 cxgr RRE_RR "convert from fixed 64 to extended hfp" esame
b3c8 cger RRF_U0FR "convert to fixed short hfp to 64" esame
b3c9 cgdr RRF_U0FR "convert to fixed long hfp to 64" esame
b3ca cgxr RRF_U0FR "convert to fixed extended hfp to 64" esame
010b tam E "test addressing mode" esame
010c sam24 E "set addressing mode 24" esame
010d sam31 E "set addressing mode 31" esame
010e sam64 E "set addressing mode 64" esame
a500 iihh RI_RU "insert immediate high high" esame
a501 iihl RI_RU "insert immediate high low" esame
a502 iilh RI_RU "insert immediate low high" esame
a503 iill RI_RU "insert immediate low low" esame
a504 nihh RI_RU "and immediate high high" esame
a505 nihl RI_RU "and immediate high low" esame
a506 nilh RI_RU "and immediate low high" esame
a507 nill RI_RU "and immediate low low" esame
a508 oihh RI_RU "or immediate high high" esame
a509 oihl RI_RU "or immediate high low" esame
a50a oilh RI_RU "or immediate low high" esame
a50b oill RI_RU "or immediate low low" esame
a50c llihh RI_RU "load logical immediate high high" esame
a50d llihl RI_RU "load logical immediate high low" esame
a50e llilh RI_RU "load logical immediate low high" esame
a50f llill RI_RU "load logical immediate low low" esame
b2b1 stfl S_RD "store facility list" esame
b2b2 lpswe S_RD "load psw extended" esame
b90d dsgr RRE_RR "divide single 64" esame
b90f lrvgr RRE_RR "load reversed 64" esame
b916 llgfr RRE_RR "load logical 64<32" esame
b917 llgtr RRE_RR "load logical thirty one bits" esame
b91d dsgfr RRE_RR "divide single 64<32" esame
b91f lrvr RRE_RR "load reversed 32" esame
b986 mlgr RRE_RR "multiply logical 64" esame
b987 dlgr RRE_RR "divide logical 64" esame
b988 alcgr RRE_RR "add logical with carry 64" esame
b989 slbgr RRE_RR "subtract logical with borrow 64" esame
b98d epsw RRE_RR "extract psw" esame
b996 mlr RRE_RR "multiply logical 32" esame
b997 dlr RRE_RR "divide logical 32" esame
b998 alcr RRE_RR "add logical with carry 32" esame
b999 slbr RRE_RR "subtract logical with borrow 32" esame
b99d esea RRE_R0 "extract and set extended authority" esame
c000 larl RIL_RP "load address relative long" esame
e3000000000d dsg RXE_RRRD "divide single 64" esame
e3000000000f lrvg RXE_RRRD "load reversed 64" esame
e30000000016 llgf RXE_RRRD "load logical 64<32" esame
e30000000017 llgt RXE_RRRD "load logical thirty one bits" esame
e3000000001d dsgf RXE_RRRD "divide single 64<32" esame
e3000000001e lrv RXE_RRRD "load reversed 32" esame
e3000000001f lrvh RXE_RRRD "load reversed 16" esame
e3000000002f strvg RXE_RRRD "store reversed 64" esame
e3000000003e strv RXE_RRRD "store reversed 32" esame
e3000000003f strvh RXE_RRRD "store reversed 64" esame
e30000000086 mlg RXE_RRRD "multiply logical 64" esame
e30000000087 dlg RXE_RRRD "divide logical 64" esame
e30000000088 alcg RXE_RRRD "add logical with carry 64" esame
e30000000089 slbg RXE_RRRD "subtract logical with borrow 64" esame
e3000000008e stpq RXE_RRRD "store pair to quadword" esame
e3000000008f lpq RXE_RRRD "load pair from quadword" esame
e30000000096 ml RXE_RRRD "multiply logical 32" esame
e30000000097 dl RXE_RRRD "divide logical 32" esame
e30000000098 alc RXE_RRRD "add logical with carry 32" esame
e30000000099 slb RXE_RRRD "subtract logical with borrow 32" esame
e30000000090 llgc RXE_RRRD "load logical character" esame
e30000000091 llgh RXE_RRRD "load logical halfword" esame
eb000000001c rllg RSE_RRRD "rotate left single logical 64" esame
eb000000001d rll RSE_RRRD "rotate left single logical 32" esame
b278 stcke S_RD "store clock extended" esame
b2a5 tre RRE_RR "translate extended" esame
eb000000008e mvclu RSE_RRRD "move long unicode" esame
e9 pka SS_L0RDRD "pack ascii" esame
e1 pku SS_L0RDRD "pack unicode" esame
b993 troo RRE_RR "translate one to one" esame
b992 trot RRE_RR "translate one to two" esame
b991 trto RRE_RR "translate two to one" esame
b990 trtt RRE_RR "translate two to two" esame
ea unpka SS_L0RDRD "unpack ascii" esame
e2 unpku SS_L0RDRD "unpack unicode" esame
b358 thder RRE_RR "convert short bfp to long hfp" esame
b359 thdr RRE_RR "convert long bfp to long hfp" esame
b350 tbedr RRF_U0FF "convert long hfp to short bfp" esame
b351 tbdr RRF_U0FF "convert long hfp to long bfp" esame
b374 lzer RRE_R0 "load short zero" esame
b375 lzdr RRE_R0 "load long zero" esame
b376 lzxr RRE_R0 "load extended zero" esame
@


1.6.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d4 419
a422 442
5a a RX_RRRD "add" g5 esa,zarch
6a ad RX_FRRD "add normalized (long)" g5 esa,zarch
2a adr RR_FF "add normalized (long)" g5 esa,zarch
7a ae RX_FRRD "add normalized (short)" g5 esa,zarch
3a aer RR_FF "add normalized (short)" g5 esa,zarch
4a ah RX_RRRD "add halfword" g5 esa,zarch
5e al RX_RRRD "add logical" g5 esa,zarch
1e alr RR_RR "add logical" g5 esa,zarch
fa ap SS_LLRDRD "add decimal" g5 esa,zarch
1a ar RR_RR "add" g5 esa,zarch
7e au RX_FRRD "add unnormalized (short)" g5 esa,zarch
3e aur RR_FF "add unnormalized (short)" g5 esa,zarch
6e aw RX_FRRD "add unnormalized (long)" g5 esa,zarch
2e awr RR_FF "add unnormalized (long)" g5 esa,zarch
36 axr RR_FF "add normalized" g5 esa,zarch
b240 bakr RRE_RR "branch and stack" g5 esa,zarch
45 bal RX_RRRD "branch and link" g5 esa,zarch
05 balr RR_RR "branch and link" g5 esa,zarch
4d bas RX_RRRD "branch and save" g5 esa,zarch
0d basr RR_RR "branch and save" g5 esa,zarch
0c bassm RR_RR "branch and save and set mode" g5 esa,zarch
47 bc RX_URRD "branch on condition" g5 esa,zarch
07 bcr RR_UR "branch on condition" g5 esa,zarch
46 bct RX_RRRD "branch on count" g5 esa,zarch
06 bctr RR_RR "branch on count" g5 esa,zarch
b258 bsg RRE_RR "branch in subspace group" g5 esa,zarch
0b bsm RR_RR "branch and set mode" g5 esa,zarch
86 bxh RS_RRRD "branch on index high" g5 esa,zarch
87 bxle RS_RRRD "branch on index low or equal" g5 esa,zarch
59 c RX_RRRD "compare" g5 esa,zarch
69 cd RX_FRRD "compare (long)" g5 esa,zarch
29 cdr RR_FF "compare (long)" g5 esa,zarch
bb cds RS_RRRD "compare double and swap" g5 esa,zarch
79 ce RX_FRRD "compare (short)" g5 esa,zarch
39 cer RR_FF "compare (short)" g5 esa,zarch
b21a cfc S_RD "compare and form codeword" g5 esa,zarch
49 ch RX_RRRD "compare halfword" g5 esa,zarch
55 cl RX_RRRD "compare logical" g5 esa,zarch
d5 clc SS_L0RDRD "compare logical" g5 esa,zarch
0f clcl RR_RR "compare logical long" g5 esa,zarch
95 cli SI_URD "compare logical" g5 esa,zarch
bd clm RS_RURD "compare logical characters under mask" g5 esa,zarch
15 clr RR_RR "compare logical" g5 esa,zarch
b25d clst RRE_RR "compare logical string" g5 esa,zarch
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
f9 cp SS_LLRDRD "compare decimal" g5 esa,zarch
b24d cpya RRE_AA "copy access" g5 esa,zarch
19 cr RR_RR "compare" g5 esa,zarch
ba cs RS_RRRD "compare and swap" g5 esa,zarch
b230 csch S_00 "clear subchannel" g5 esa,zarch
b257 cuse RRE_RR "compare until substring equal" g5 esa,zarch
b250 csp RRE_RR "compare and swap and purge" g5 esa,zarch
4f cvb RX_RRRD "convert to binary" g5 esa,zarch
4e cvd RX_RRRD "convert to decimal" g5 esa,zarch
5d d RX_RRRD "divide" g5 esa,zarch
6d dd RX_FRRD "divide (long)" g5 esa,zarch
2d ddr RR_FF "divide (long)" g5 esa,zarch
7d de RX_FRRD "divide (short)" g5 esa,zarch
3d der RR_FF "divide (short)" g5 esa,zarch
83 diag RS_RRRD "diagnose" g5 esa,zarch
fd dp SS_LLRDRD "divide decimal" g5 esa,zarch
1d dr RR_RR "divide" g5 esa,zarch
b22d dxr RRE_F0 "divide (ext.)" g5 esa,zarch
b24f ear RRE_RA "extract access" g5 esa,zarch
de ed SS_L0RDRD "edit" g5 esa,zarch
df edmk SS_L0RDRD "edit and mark" g5 esa,zarch
b226 epar RRE_R0 "extract primary ASN" g5 esa,zarch
b249 ereg RRE_RR "extract stacked registers" g5 esa,zarch
b227 esar RRE_R0 "extract secondary ASN" g5 esa,zarch
b24a esta RRE_RR "extract stacked state" g5 esa,zarch
44 ex RX_RRRD "execute" g5 esa,zarch
24 hdr RR_FF "halve (long)" g5 esa,zarch
34 her RR_FF "halve (short)" g5 esa,zarch
b231 hsch S_00 "halt subchannel" g5 esa,zarch
b224 iac RRE_R0 "insert address space control" g5 esa,zarch
43 ic RX_RRRD "insert character" g5 esa,zarch
bf icm RS_RURD "insert characters under mask" g5 esa,zarch
b20b ipk S_00 "insert PSW key" g5 esa,zarch
b222 ipm RRE_R0 "insert program mask" g5 esa,zarch
b221 ipte RRE_RR "invalidate page table entry" g5 esa,zarch
b229 iske RRE_RR "insert storage key extended" g5 esa,zarch
b223 ivsk RRE_RR "insert virtual storage key" g5 esa,zarch
58 l RX_RRRD "load" g5 esa,zarch
41 la RX_RRRD "load address" g5 esa,zarch
51 lae RX_RRRD "load address extended" g5 esa,zarch
9a lam RS_AARD "load access multiple" g5 esa,zarch
e500 lasp SSE_RDRD "load address space parameters" g5 esa,zarch
23 lcdr RR_FF "load complement (long)" g5 esa,zarch
33 lcer RR_FF "load complement (short)" g5 esa,zarch
13 lcr RR_RR "load complement" g5 esa,zarch
b7 lctl RS_CCRD "load control" g5 esa,zarch
68 ld RX_FRRD "load (long)" g5 esa,zarch
28 ldr RR_FF "load (long)" g5 esa,zarch
78 le RX_FRRD "load (short)" g5 esa,zarch
38 ler RR_FF "load (short)" g5 esa,zarch
48 lh RX_RRRD "load halfword" g5 esa,zarch
98 lm RS_RRRD "load multiple" g5 esa,zarch
21 lndr RR_FF "load negative (long)" g5 esa,zarch
31 lner RR_FF "load negative (short)" g5 esa,zarch
11 lnr RR_RR "load negative" g5 esa,zarch
20 lpdr RR_FF "load positive (long)" g5 esa,zarch
30 lper RR_FF "load positive (short)" g5 esa,zarch
10 lpr RR_RR "load positive" g5 esa,zarch
82 lpsw S_RD "load PSW" g5 esa,zarch
18 lr RR_RR "load" g5 esa,zarch
b1 lra RX_RRRD "load real address" g5 esa,zarch
25 lrdr RR_FF "load rounded (ext. to long)" g5 esa,zarch
35 lrer RR_FF "load rounded (long to short)" g5 esa,zarch
25 ldxr RR_FF "load rounded (ext. to long)" g5 esa,zarch
35 ledr RR_FF "load rounded (long to short)" g5 esa,zarch
22 ltdr RR_FF "load and test (long)" g5 esa,zarch
32 lter RR_FF "load and test (short)" g5 esa,zarch
12 ltr RR_RR "load and test" g5 esa,zarch
b24b lura RRE_RR "load using real address" g5 esa,zarch
5c m RX_RRRD "multiply" g5 esa,zarch
af mc SI_URD "monitor call" g5 esa,zarch
6c md RX_FRRD "multiply (long)" g5 esa,zarch
2c mdr RR_FF "multiply (long)" g5 esa,zarch
7c me RX_FRRD "multiply (short to long)" g5 esa,zarch
7c mde RX_FRRD "multiply (short to long)" g5 esa,zarch
3c mer RR_FF "multiply (short to long)" g5 esa,zarch
3c mder RR_FF "multiply short to long hfp" g5 esa,zarch
4c mh RX_RRRD "multiply halfword" g5 esa,zarch
fc mp SS_LLRDRD "multiply decimal" g5 esa,zarch
1c mr RR_RR "multiply" g5 esa,zarch
b232 msch S_RD "modify subchannel" g5 esa,zarch
b247 msta RRE_R0 "modify stacked state" g5 esa,zarch
d2 mvc SS_L0RDRD "move" g5 esa,zarch
e50f mvcdk SSE_RDRD "move with destination key" g5 esa,zarch
e8 mvcin SS_L0RDRD "move inverse" g5 esa,zarch
d9 mvck SS_RRRDRD "move with key" g5 esa,zarch
0e mvcl RR_RR "move long" g5 esa,zarch
da mvcp SS_RRRDRD "move to primary" g5 esa,zarch
db mvcs SS_RRRDRD "move to secondary" g5 esa,zarch
e50e mvcsk SSE_RDRD "move with source key" g5 esa,zarch
92 mvi SI_URD "move" g5 esa,zarch
d1 mvn SS_L0RDRD "move numerics" g5 esa,zarch
f1 mvo SS_LLRDRD "move with offset" g5 esa,zarch
b254 mvpg RRE_RR "move page" g5 esa,zarch
b255 mvst RRE_RR "move string" g5 esa,zarch
d3 mvz SS_L0RDRD "move zones" g5 esa,zarch
67 mxd RX_FRRD "multiply (long to ext.)" g5 esa,zarch
27 mxdr RR_FF "multiply (long to ext.)" g5 esa,zarch
26 mxr RR_FF "multiply (ext.)" g5 esa,zarch
54 n RX_RRRD "AND" g5 esa,zarch
d4 nc SS_L0RDRD "AND" g5 esa,zarch
94 ni SI_URD "AND" g5 esa,zarch
14 nr RR_RR "AND" g5 esa,zarch
56 o RX_RRRD "OR" g5 esa,zarch
d6 oc SS_L0RDRD "OR" g5 esa,zarch
96 oi SI_URD "OR" g5 esa,zarch
16 or RR_RR "OR" g5 esa,zarch
f2 pack SS_LLRDRD "pack" g5 esa,zarch
b248 palb RRE_00 "purge ALB" g5 esa,zarch
b218 pc S_RD "program call" g5 esa,zarch
0101 pr E "program return" g5 esa,zarch
b228 pt RRE_RR "program transfer" g5 esa,zarch
b20d ptlb S_00 "purge TLB" g5 esa,zarch
b23b rchp S_00 "reset channel path" g5 esa,zarch
b22a rrbe RRE_RR "reset reference bit extended" g5 esa,zarch
b238 rsch S_00 "resume subchannel" g5 esa,zarch
5b s RX_RRRD "subtract" g5 esa,zarch
b219 sac S_RD "set address space control" g5 esa,zarch
b279 sacf S_RD "set address space control fast" g5 esa,zarch
b237 sal S_00 "set address limit" g5 esa,zarch
b24e sar RRE_AR "set access" g5 esa,zarch
b23c schm S_00 "set channel monitor" g5 esa,zarch
b204 sck S_RD "set clock" g5 esa,zarch
b206 sckc S_RD "set clock comparator" g5 esa,zarch
6b sd RX_FRRD "subtract normalized (long)" g5 esa,zarch
2b sdr RR_FF "subtract normalized (long)" g5 esa,zarch
7b se RX_FRRD "subtract normalized (short)" g5 esa,zarch
3b ser RR_FF "subtract normalized (short)" g5 esa,zarch
4b sh RX_RRRD "subtract halfword" g5 esa,zarch
b214 sie S_RD "start interpretive execution" g5 esa,zarch
ae sigp RS_RRRD "signal processor" g5 esa,zarch
5f sl RX_RRRD "subtract logical" g5 esa,zarch
8b sla RS_R0RD "shift left single" g5 esa,zarch
8f slda RS_R0RD "shift left double (long)" g5 esa,zarch
8d sldl RS_R0RD "shift left double logical (long)" g5 esa,zarch
89 sll RS_R0RD "shift left single logical" g5 esa,zarch
1f slr RR_RR "subtract logical" g5 esa,zarch
fb sp SS_LLRDRD "subtract decimal" g5 esa,zarch
b20a spka S_RD "set PSW key from address" g5 esa,zarch
04 spm RR_R0 "set program mask" g5 esa,zarch
b208 spt S_RD "set CPU timer" g5 esa,zarch
b210 spx S_RD "set prefix" g5 esa,zarch
b244 sqdr RRE_F0 "square root (long)" g5 esa,zarch
b245 sqer RRE_F0 "square root (short)" g5 esa,zarch
1b sr RR_RR "subtract" g5 esa,zarch
8a sra RS_R0RD "shift right single" g5 esa,zarch
8e srda RS_R0RD "shift right double (long)" g5 esa,zarch
8c srdl RS_R0RD "shift right double logical (long)" g5 esa,zarch
88 srl RS_R0RD "shift right single logical" g5 esa,zarch
f0 srp SS_LIRDRD "shift and round decimal" g5 esa,zarch
b25e srst RRE_RR "search string" g5 esa,zarch
b225 ssar RRE_R0 "set secondary ASN" g5 esa,zarch
b233 ssch S_RD "start subchannel" g5 esa,zarch
b22b sske RRE_RR "set storage key extended" g5 esa,zarch
80 ssm S_RD "set system mask" g5 esa,zarch
50 st RX_RRRD "store" g5 esa,zarch
9b stam RS_AARD "store access multiple" g5 esa,zarch
b212 stap S_RD "store CPU address" g5 esa,zarch
42 stc RX_RRRD "store character" g5 esa,zarch
b205 stck S_RD "store clock" g5 esa,zarch
b207 stckc S_RD "store clock comparator" g5 esa,zarch
be stcm RS_RURD "store characters under mask" g5 esa,zarch
b23a stcps S_RD "store channel path status" g5 esa,zarch
b239 stcrw S_RD "store channel report word" g5 esa,zarch
b6 stctl RS_CCRD "store control" g5 esa,zarch
60 std RX_FRRD "store (long)" g5 esa,zarch
70 ste RX_FRRD "store (short)" g5 esa,zarch
40 sth RX_RRRD "store halfword" g5 esa,zarch
b202 stidp S_RD "store CPU id" g5 esa,zarch
90 stm RS_RRRD "store multiple" g5 esa,zarch
ac stnsm SI_URD "store then AND system mask" g5 esa,zarch
ad stosm SI_URD "store then OR system mask" g5 esa,zarch
b209 stpt S_RD "store CPU timer" g5 esa,zarch
b211 stpx S_RD "store prefix" g5 esa,zarch
b234 stsch S_RD "store subchannel" g5 esa,zarch
b246 stura RRE_RR "store using real address" g5 esa,zarch
7f su RX_FRRD "subtract unnormalized (short)" g5 esa,zarch
3f sur RR_FF "subtract unnormalized (short)" g5 esa,zarch
0a svc RR_U0 "supervisor call" g5 esa,zarch
6f sw RX_FRRD "subtract unnormalized (long)" g5 esa,zarch
2f swr RR_FF "subtract unnormalized (long)" g5 esa,zarch
37 sxr RR_FF "subtract normalized (ext.)" g5 esa,zarch
b24c tar RRE_AR "test access" g5 esa,zarch
b22c tb RRE_0R "test block" g5 esa,zarch
91 tm SI_URD "test under mask" g5 esa,zarch
b236 tpi S_RD "test pending interruption" g5 esa,zarch
e501 tprot SSE_RDRD "test protection" g5 esa,zarch
dc tr SS_L0RDRD "translate" g5 esa,zarch
99 trace RS_RRRD "trace" g5 esa,zarch
dd trt SS_L0RDRD "translate and test" g5 esa,zarch
93 ts S_RD "test and set" g5 esa,zarch
b235 tsch S_RD "test subchannel" g5 esa,zarch
f3 unpk SS_LLRDRD "unpack" g5 esa,zarch
0102 upt E "update tree" g5 esa,zarch
57 x RX_RRRD "exclusive OR" g5 esa,zarch
d7 xc SS_L0RDRD "exclusive OR" g5 esa,zarch
97 xi SI_URD "exclusive OR" g5 esa,zarch
17 xr RR_RR "exclusive OR" g5 esa,zarch
f8 zap SS_LLRDRD "zero and add" g5 esa,zarch
a70a ahi RI_RI "add halfword immediate" g5 esa,zarch
84 brxh RSI_RRP "branch relative on index high" g5 esa,zarch
85 brxle RSI_RRP "branch relative on index low or equal" g5 esa,zarch
a705 bras RI_RP "branch relative and save" g5 esa,zarch
a704 brc RI_UP "branch relative on condition" g5 esa,zarch
a706 brct RI_RP "branch relative on count" g5 esa,zarch
b241 cksm RRE_RR "checksum" g5 esa,zarch
a70e chi RI_RI "compare halfword immediate" g5 esa,zarch
a9 clcle RS_RRRD "compare logical long extended" g5 esa,zarch
a708 lhi RI_RI "load halfword immediate" g5 esa,zarch
a8 mvcle RS_RRRD "move long extended" g5 esa,zarch
a70c mhi RI_RI "multiply halfword immediate" g5 esa,zarch
b252 msr RRE_RR "multiply single" g5 esa,zarch
71 ms RX_RRRD "multiply single" g5 esa,zarch
a700 tmh RI_RU "test under mask high" g5 esa,zarch
a701 tml RI_RU "test under mask low" g5 esa,zarch
0700 nopr RR_0R "no operation" g5 esa,zarch
0710 bor RR_0R "branch on overflow / if ones" g5 esa,zarch
0720 bhr RR_0R "branch on high" g5 esa,zarch
0720 bpr RR_0R "branch on plus" g5 esa,zarch
0730 bnler RR_0R "branch on not low or equal" g5 esa,zarch
0740 blr RR_0R "branch on low" g5 esa,zarch
0740 bmr RR_0R "branch on minus / if mixed" g5 esa,zarch
0750 bnher RR_0R "branch on not high or equal" g5 esa,zarch
0760 blhr RR_0R "branch on low or high" g5 esa,zarch
0770 bner RR_0R "branch on not equal" g5 esa,zarch
0770 bnzr RR_0R "branch on not zero / if not zeros" g5 esa,zarch
0780 ber RR_0R "branch on equal" g5 esa,zarch
0780 bzr RR_0R "branch on zero / if zeros" g5 esa,zarch
0790 bnlhr RR_0R "branch on not low or high" g5 esa,zarch
07a0 bher RR_0R "branch on high or equal" g5 esa,zarch
07b0 bnlr RR_0R "branch on not low" g5 esa,zarch
07b0 bnmr RR_0R "branch on not minus / if not mixed" g5 esa,zarch
07c0 bler RR_0R "brach on low or equal" g5 esa,zarch
07d0 bnhr RR_0R "branch on not high" g5 esa,zarch
07d0 bnpr RR_0R "branch on not plus" g5 esa,zarch
07e0 bnor RR_0R "branch on not overflow / if not ones" g5 esa,zarch
07f0 br RR_0R "unconditional branch" g5 esa,zarch
4700 nop RX_0RRD "no operation" g5 esa,zarch
4710 bo RX_0RRD "branch on overflow / if ones" g5 esa,zarch
4720 bh RX_0RRD "branch on high" g5 esa,zarch
4720 bp RX_0RRD "branch on plus" g5 esa,zarch
4730 bnle RX_0RRD "branch on not low or equal" g5 esa,zarch
4740 bl RX_0RRD "branch on low" g5 esa,zarch
4740 bm RX_0RRD "branch on minus / if mixed" g5 esa,zarch
4750 bnhe RX_0RRD "branch on not high or equal" g5 esa,zarch
4760 blh RX_0RRD "branch on low or high" g5 esa,zarch
4770 bne RX_0RRD "branch on not equal" g5 esa,zarch
4770 bnz RX_0RRD "branch on not zero / if not zeros" g5 esa,zarch
4780 be RX_0RRD "branch on equal" g5 esa,zarch
4780 bz RX_0RRD "branch on zero / if zeros" g5 esa,zarch
4790 bnlh RX_0RRD "branch on not low or high" g5 esa,zarch
47a0 bhe RX_0RRD "branch on high or equal" g5 esa,zarch
47b0 bnl RX_0RRD "branch on not low" g5 esa,zarch
47b0 bnm RX_0RRD "branch on not minus / if not mixed" g5 esa,zarch
47c0 ble RX_0RRD "branch on low or equal" g5 esa,zarch
47d0 bnh RX_0RRD "branch on not high" g5 esa,zarch
47d0 bnp RX_0RRD "branch on not plus" g5 esa,zarch
47e0 bno RX_0RRD "branch on not overflow / if not ones" g5 esa,zarch
47f0 b RX_0RRD "unconditional branch" g5 esa,zarch
a714 jo RI_0P "jump on overflow / if ones" g5 esa,zarch
a724 jh RI_0P "jump on A high" g5 esa,zarch
a724 jp RI_0P "jump on plus" g5 esa,zarch
a734 jnle RI_0P "jump on not low or equal" g5 esa,zarch
a744 jl RI_0P "jump on A low" g5 esa,zarch
a744 jm RI_0P "jump on minus / if mixed" g5 esa,zarch
a754 jnhe RI_0P "jump on not high or equal" g5 esa,zarch
a764 jlh RI_0P "jump on low or high" g5 esa,zarch
a774 jne RI_0P "jump on A not equal B" g5 esa,zarch
a774 jnz RI_0P "jump on not zero / if not zeros" g5 esa,zarch
a784 je RI_0P "jump on A equal B" g5 esa,zarch
a784 jz RI_0P "jump on zero / if zeros" g5 esa,zarch
a794 jnlh RI_0P "jump on not low or high" g5 esa,zarch
a7a4 jhe RI_0P "jump on high or equal" g5 esa,zarch
a7b4 jnl RI_0P "jump on A not low" g5 esa,zarch
a7b4 jnm RI_0P "jump on not minus / if not mixed" g5 esa,zarch
a7c4 jle RI_0P "jump on low or equal" g5 esa,zarch
a7d4 jnh RI_0P "jump on A not high" g5 esa,zarch
a7d4 jnp RI_0P "jump on not plus" g5 esa,zarch
a7e4 jno RI_0P "jump on not overflow / if not ones" g5 esa,zarch
a7f4 j RI_0P "jump" g5 esa,zarch
b34a axbr RRE_FF "add extended bfp" g5 esa,zarch
b31a adbr RRE_FF "add long bfp" g5 esa,zarch
ed000000001a adb RXE_FRRD "add long bfp" g5 esa,zarch
b30a aebr RRE_FF "add short bfp" g5 esa,zarch
ed000000000a aeb RXE_FRRD "add short bfp" g5 esa,zarch
b349 cxbr RRE_FF "compare extended bfp" g5 esa,zarch
b319 cdbr RRE_FF "compare long bfp" g5 esa,zarch
ed0000000019 cdb RXE_FRRD "compare long bfp" g5 esa,zarch
b309 cebr RRE_FF "compare short bfp" g5 esa,zarch
ed0000000009 ceb RXE_FRRD "compare short bfp" g5 esa,zarch
b348 kxbr RRE_FF "compare and signal extended bfp" g5 esa,zarch
b318 kdbr RRE_FF "compare and signal long bfp" g5 esa,zarch
ed0000000018 kdb RXE_FRRD "compare and signal long bfp" g5 esa,zarch
b308 kebr RRE_FF "compare and signal short bfp" g5 esa,zarch
ed0000000008 keb RXE_FRRD "compare and signal short bfp" g5 esa,zarch
b396 cxfbr RRE_RF "convert from fixed 32 to extended bfp" g5 esa,zarch
b395 cdfbr RRE_RF "convert from fixed 32 to long bfp" g5 esa,zarch
b394 cefbr RRE_RF "convert from fixed 32 to short bfp" g5 esa,zarch
b39a cfxbr RRF_U0FR "convert to fixed extended bfp to 32" g5 esa,zarch
b399 cfdbr RRF_U0FR "convert to fixed long bfp to 32" g5 esa,zarch
b398 cfebr RRF_U0FR "convert to fixed short bfp to 32" g5 esa,zarch
b34d dxbr RRE_FF "divide extended bfp" g5 esa,zarch
b31d ddbr RRE_FF "divide long bfp" g5 esa,zarch
ed000000001d ddb RXE_FRRD "divide long bfp" g5 esa,zarch
b30d debr RRE_FF "divide short bfp" g5 esa,zarch
ed000000000d deb RXE_FRRD "divide short bfp" g5 esa,zarch
b35b didbr RRF_FUFF "divide to integer long bfp" g5 esa,zarch
b353 diebr RRF_FUFF "divide to integer short bfp" g5 esa,zarch
b38c efpc RRE_RR "extract fpc" g5 esa,zarch
b342 ltxbr RRE_FF "load and test extended bfp" g5 esa,zarch
b312 ltdbr RRE_FF "load and test long bfp" g5 esa,zarch
b302 ltebr RRE_FF "load and test short bfp" g5 esa,zarch
b343 lcxbr RRE_FF "load complement extended bfp" g5 esa,zarch
b313 lcdbr RRE_FF "load complement long bfp" g5 esa,zarch
b303 lcebr RRE_FF "load complement short bfp" g5 esa,zarch
b347 fixbr RRF_U0FF "load fp integer extended bfp" g5 esa,zarch
b35f fidbr RRF_U0FF "load fp integer long bfp" g5 esa,zarch
b357 fiebr RRF_U0FF "load fp integer short bfp" g5 esa,zarch
b29d lfpc S_RD "load fpc" g5 esa,zarch
b305 lxdbr RRE_FF "load lengthened long to extended bfp" g5 esa,zarch
ed0000000005 lxdb RXE_FRRD "load lengthened long to extended bfp" g5 esa,zarch
b306 lxebr RRE_FF "load lengthened short to extended bfp" g5 esa,zarch
ed0000000006 lxeb RXE_FRRD "load lengthened short to extended bfp" g5 esa,zarch
b304 ldebr RRE_FF "load lengthened short to long bfp" g5 esa,zarch
ed0000000004 ldeb RXE_FRRD "load lengthened short to long bfp" g5 esa,zarch
b341 lnxbr RRE_FF "load negative extended bfp" g5 esa,zarch
b311 lndbr RRE_FF "load negative long bfp" g5 esa,zarch
b301 lnebr RRE_FF "load negative short bfp" g5 esa,zarch
b340 lpxbr RRE_FF "load positive extended bfp" g5 esa,zarch
b310 lpdbr RRE_FF "load positive long bfp" g5 esa,zarch
b300 lpebr RRE_FF "load positive short bfp" g5 esa,zarch
b345 ldxbr RRE_FF "load rounded extended to long bfp" g5 esa,zarch
b346 lexbr RRE_FF "load rounded extended to short bfp" g5 esa,zarch
b344 ledbr RRE_FF "load rounded long to short bfp" g5 esa,zarch
b34c mxbr RRE_FF "multiply extended bfp" g5 esa,zarch
b31c mdbr RRE_FF "multiply long bfp" g5 esa,zarch
ed000000001c mdb RXE_FRRD "multiply long bfp" g5 esa,zarch
b307 mxdbr RRE_FF "multiply long to extended bfp" g5 esa,zarch
ed0000000007 mxdb RXE_FRRD "multiply long to extended bfp" g5 esa,zarch
b317 meebr RRE_FF "multiply short bfp" g5 esa,zarch
ed0000000017 meeb RXE_FRRD "multiply short bfp" g5 esa,zarch
b30c mdebr RRE_FF "multiply short to long bfp" g5 esa,zarch
ed000000000c mdeb RXE_FRRD "multiply short to long bfp" g5 esa,zarch
b31e madbr RRF_F0FF "multiply and add long bfp" g5 esa,zarch
ed000000001e madb RXF_FRRDF "multiply and add long bfp" g5 esa,zarch
b30e maebr RRF_F0FF "multiply and add short bfp" g5 esa,zarch
ed000000000e maeb RXF_FRRDF "multiply and add short bfp" g5 esa,zarch
b31f msdbr RRF_F0FF "multiply and subtract long bfp" g5 esa,zarch
ed000000001f msdb RXF_FRRDF "multiply and subtract long bfp" g5 esa,zarch
b30f msebr RRF_F0FF "multiply and subtract short bfp" g5 esa,zarch
ed000000000f mseb RXF_FRRDF "multiply and subtract short bfp" g5 esa,zarch
b384 sfpc RRE_RR "set fpc" g5 esa,zarch
b299 srnm S_RD "set rounding mode" g5 esa,zarch
b316 sqxbr RRE_FF "square root extended bfp" g5 esa,zarch
b315 sqdbr RRE_FF "square root long bfp" g5 esa,zarch
ed0000000015 sqdb RXE_FRRD "square root long bfp" g5 esa,zarch
b314 sqebr RRE_FF "square root short bfp" g5 esa,zarch
ed0000000014 sqeb RXE_FRRD "square root short bfp" g5 esa,zarch
b29c stfpc S_RD "store fpc" g5 esa,zarch
b34b sxbr RRE_FF "subtract extended bfp" g5 esa,zarch
b31b sdbr RRE_FF "subtract long bfp" g5 esa,zarch
ed000000001b sdb RXE_FRRD "subtract long bfp" g5 esa,zarch
b30b sebr RRE_FF "subtract short bfp" g5 esa,zarch
ed000000000b seb RXE_FRRD "subtract short bfp" g5 esa,zarch
ed0000000012 tcxb RXE_FRRD "test data class extended bfp" g5 esa,zarch
ed0000000011 tcdb RXE_FRRD "test data class long bfp" g5 esa,zarch
ed0000000010 tceb RXE_FRRD "test data class short bfp" g5 esa,zarch
b274 siga S_RD "signal adapter" g5 esa,zarch
b2a6 cuutf RRE_RR "convert unicode to utf-8" g5 esa,zarch
b2a7 cutfu RRE_RR "convert utf-8 to unicode" g5 esa,zarch
ee plo SS_RRRDRD2 "perform locked operation" g5 esa,zarch
b25a bsa RRE_RR "branch and set authority" g5 esa,zarch
b277 rp S_RD "resume program" g5 esa,zarch
0107 sckpf E "set clock programmable field" g5 esa,zarch
b27d stsi S_RD "store system information" g5 esa,zarch
01ff trap2 E "trap" g5 esa,zarch
b2ff trap4 S_RD "trap4" g5 esa,zarch
a700 tmlh RI_RU "test under mask low high" g5 esa,zarch
a701 tmll RI_RU "test under mask low low" g5 esa,zarch
b278 stcke S_RD "store clock extended" g5 esa,zarch
b2a5 tre RRE_RR "translate extended" g5 esa,zarch
eb000000008e mvclu RSE_RRRD "move long unicode" g5 esa,zarch
e9 pka SS_L0RDRD "pack ascii" g5 esa,zarch
e1 pku SS_L0RDRD "pack unicode" g5 esa,zarch
b993 troo RRE_RR "translate one to one" g5 esa,zarch
b992 trot RRE_RR "translate one to two" g5 esa,zarch
b991 trto RRE_RR "translate two to one" g5 esa,zarch
b990 trtt RRE_RR "translate two to two" g5 esa,zarch
ea unpka SS_L0RDRD "unpack ascii" g5 esa,zarch
e2 unpku SS_L0RDRD "unpack unicode" g5 esa,zarch
b358 thder RRE_RR "convert short bfp to long hfp" g5 esa,zarch
b359 thdr RRE_RR "convert long bfp to long hfp" g5 esa,zarch
b350 tbedr RRF_U0FF "convert long hfp to short bfp" g5 esa,zarch
b351 tbdr RRF_U0FF "convert long hfp to long bfp" g5 esa,zarch
b374 lzer RRE_R0 "load short zero" g5 esa,zarch
b375 lzdr RRE_R0 "load long zero" g5 esa,zarch
b376 lzxr RRE_R0 "load extended zero" g5 esa,zarch
d424 203
a626 347
b946 bctgr RRE_RR "branch on count 64" z900 zarch
b900 lpgr RRE_RR "load positive 64" z900 zarch
b910 lpgfr RRE_RR "load positive 64<32" z900 zarch
b901 lngr RRE_RR "load negative 64" z900 zarch
b911 lngfr RRE_RR "load negative 64<32" z900 zarch
b902 ltgr RRE_RR "load and test 64" z900 zarch
b912 ltgfr RRE_RR "load and test 64<32" z900 zarch
b903 lcgr RRE_RR "load complement 64" z900 zarch
b913 lcgfr RRE_RR "load complement 64<32" z900 zarch
b980 ngr RRE_RR "and 64" z900 zarch
b921 clgr RRE_RR "compare logical 64" z900 zarch
b931 clgfr RRE_RR "compare logical 64<32" z900 zarch
b981 ogr RRE_RR "or 64" z900 zarch
b982 xgr RRE_RR "exclusive or 64" z900 zarch
b904 lgr RRE_RR "load 64" z900 zarch
b914 lgfr RRE_RR "load 64<32" z900 zarch
b920 cgr RRE_RR "compare 64" z900 zarch
b930 cgfr RRE_RR "compare 64<32" z900 zarch
b908 agr RRE_RR "add 64" z900 zarch
b918 agfr RRE_RR "add 64<32" z900 zarch
b909 sgr RRE_RR "subtract 64" z900 zarch zarch
b919 sgfr RRE_RR "subtract 64<32" z900 zarch
b90a algr RRE_RR "add logical 64" z900 zarch
b91a algfr RRE_RR "add logical 64<32" z900 zarch
b90b slgr RRE_RR "subtract logical 64" z900 zarch
b91b slgfr RRE_RR "subtract logical 64<32" z900 zarch
e30000000046 bctg RXE_RRRD "branch on count 64" z900 zarch
e3000000002e cvdg RXE_RRRD "convert to decimal 64" z900 zarch
e3000000000e cvbg RXE_RRRD "convert to binary 64" z900 zarch
e30000000024 stg RXE_RRRD "store 64" z900 zarch
e30000000080 ng RXE_RRRD "and 64" z900 zarch
e30000000021 clg RXE_RRRD "compare logical 64" z900 zarch
e30000000031 clgf RXE_RRRD "comparee logical 64<32" z900 zarch
e30000000081 og RXE_RRRD "or 64" z900 zarch
e30000000082 xg RXE_RRRD "exclusive or 64" z900 zarch
e30000000004 lg RXE_RRRD "load 64" z900 zarch
e30000000014 lgf RXE_RRRD "load 64<32" z900 zarch
e30000000015 lgh RXE_RRRD "load halfword 64" z900 zarch
e30000000020 cg RXE_RRRD "compare 64" z900 zarch
e30000000030 cgf RXE_RRRD "compare 64<32" z900 zarch
e30000000008 ag RXE_RRRD "add 64" z900 zarch
e30000000018 agf RXE_RRRD "add 64<32" z900 zarch
e30000000009 sg RXE_RRRD "subtract 64" z900 zarch
e30000000019 sgf RXE_RRRD "subtract 64<32" z900 zarch
e3000000000a alg RXE_RRRD "add logical 64" z900 zarch
e3000000001a algf RXE_RRRD "add logical 64<32" z900 zarch
e3000000000b slg RXE_RRRD "subtract logical 64" z900 zarch
e3000000001b slgf RXE_RRRD "subtract logical 64<32" z900 zarch
e3000000000c msg RXE_RRRD "multiply single 64" z900 zarch
e3000000001c msgf RXE_RRRD "multiply single 64<32" z900 zarch
ec0000000044 brxhg RIE_RRP "branch relative on index high 64" z900 zarch
ec0000000045 brxlg RIE_RRP "branch relative on index low or equal 64" z900 zarch
eb0000000044 bxhg RSE_RRRD "branch on index high 64" z900 zarch
eb0000000045 bxleg RSE_RRRD "branch on index low or equal 64" z900 zarch
eb000000000c srlg RSE_RRRD "shift right single logical 64" z900 zarch
eb000000000d sllg RSE_RRRD "shift left single logical 64" z900 zarch
eb000000000a srag RSE_RRRD "shift right single 64" z900 zarch
eb000000000b slag RSE_RRRD "shift left single 64" z900 zarch
eb0000000024 stmg RSE_RRRD "store multiple 64" z900 zarch
eb0000000026 stmh RSE_RRRD "store multiple high" z900 zarch
eb0000000004 lmg RSE_RRRD "load multiple 64" z900 zarch
eb0000000096 lmh RSE_RRRD "load multiple high" z900 zarch
ef lmd SS_RRRDRD3 "load multiple disjoint" z900 zarch
eb000000000f tracg RSE_RRRD "trace 64" z900 zarch
e30000000003 lrag RXE_RRRD "load real address 64" z900 zarch
e50000000002 strag SSE_RDRD "store read address" z900 zarch
eb0000000025 stctg RSE_RRRD "store control 64" z900 zarch
eb000000002f lctlg RSE_RRRD "load control 64" z900 zarch
eb0000000030 csg RSE_RRRD "compare and swap 64" z900 zarch
eb000000003e cdsg RSE_RRRD "compare double and swap 64" z900 zarch
eb0000000020 clmh RSE_RURD "compare logical characters under mask high" z900 zarch
eb000000002c stcmh RSE_RURD "store characters under mask high" z900 zarch
eb0000000080 icmh RSE_RURD "insert characters under mask high" z900 zarch
a702 tmhh RI_RU "test under mask high high" z900 zarch
a703 tmhl RI_RU "test under mask high low" z900 zarch
c004 brcl RIL_UP "branch relative on condition long" z900 esa,zarch
c014 jgo RIL_0P "jump long on overflow / if ones" z900 esa,zarch
c024 jgh RIL_0P "jump long on high" z900 esa,zarch
c024 jgp RIL_0P "jump long on plus" z900 esa,zarch
c034 jgnle RIL_0P "jump long on not low or equal" z900 esa,zarch
c044 jgl RIL_0P "jump long on low" z900 esa,zarch
c044 jgm RIL_0P "jump long on minus / if mixed" z900 esa,zarch
c054 jgnhe RIL_0P "jump long on not high or equal" z900 esa,zarch
c064 jglh RIL_0P "jump long on low or high" z900 esa,zarch
c074 jgne RIL_0P "jump long on not equal" z900 esa,zarch
c074 jgnz RIL_0P "jump long on not zero / if not zeros" z900 esa,zarch
c084 jge RIL_0P "jump long on equal" z900 esa,zarch
c084 jgz RIL_0P "jump long on zero / if zeros" z900 esa,zarch
c094 jgnlh RIL_0P "jump long on not low or high" z900 esa,zarch
c0a4 jghe RIL_0P "jump long on high or equal" z900 esa,zarch
c0b4 jgnl RIL_0P "jump long on not low" z900 esa,zarch
c0b4 jgnm RIL_0P "jump long on not minus / if not mixed" z900 esa,zarch
c0c4 jgle RIL_0P "jump long on low or equal" z900 esa,zarch
c0d4 jgnh RIL_0P "jump long on not high" z900 esa,zarch
c0d4 jgnp RIL_0P "jump long on not plus" z900 esa,zarch
c0e4 jgno RIL_0P "jump long on not overflow / if not ones" z900 esa,zarch
c0f4 jg RIL_0P "jump long" z900 esa,zarch
c005 brasl RIL_RP "branch relative and save long" z900 esa,zarch
a707 brctg RI_RP "branch relative on count 64" z900 zarch
a709 lghi RI_RI "load halfword immediate 64" z900 zarch
a70b aghi RI_RI "add halfword immediate 64" z900 zarch
a70d mghi RI_RI "multiply halfword immediate 64" z900 zarch
a70f cghi RI_RI "compare halfword immediate 64" z900 zarch
b925 sturg RRE_RR "store using real address 64" z900 zarch
b90e eregg RRE_RR "extract stacked registers 64" z900 zarch
b905 lurag RRE_RR "load using real address 64" z900 zarch
b90c msgr RRE_RR "multiply single 64" z900 zarch
b91c msgfr RRE_RR "multiply single 64<32" z900 zarch
b3a4 cegbr RRE_RR "convert from fixed 64 to short bfp" z900 zarch
b3a5 cdgbr RRE_RR "convert from fixed 64 to long bfp" z900 zarch
b3a6 cxgbr RRE_RR "convert from fixed 64 to extended bfp" z900 zarch
b3a8 cgebr RRF_U0FR "convert to fixed short bfd to 64" z900 zarch
b3a9 cgdbr RRF_U0FR "convert to fixed long bfp to 64" z900 zarch
b3aa cgxbr RRF_U0FR "convert to fixed extended bfp to 64" z900 zarch
b3c4 cegr RRE_RR "convert from fixed 64 to short hfp" z900 zarch
b3c5 cdgr RRE_RR "convert from fixed 64 to long hfp" z900 zarch
b3c6 cxgr RRE_RR "convert from fixed 64 to extended hfp" z900 zarch
b3c8 cger RRF_U0FR "convert to fixed short hfp to 64" z900 zarch
b3c9 cgdr RRF_U0FR "convert to fixed long hfp to 64" z900 zarch
b3ca cgxr RRF_U0FR "convert to fixed extended hfp to 64" z900 zarch
010b tam E "test addressing mode" z900 esa,zarch
010c sam24 E "set addressing mode 24" z900 esa,zarch
010d sam31 E "set addressing mode 31" z900 esa,zarch
010e sam64 E "set addressing mode 64" z900 zarch
a500 iihh RI_RU "insert immediate high high" z900 zarch
a501 iihl RI_RU "insert immediate high low" z900 zarch
a502 iilh RI_RU "insert immediate low high" z900 zarch
a503 iill RI_RU "insert immediate low low" z900 zarch
a504 nihh RI_RU "and immediate high high" z900 zarch
a505 nihl RI_RU "and immediate high low" z900 zarch
a506 nilh RI_RU "and immediate low high" z900 zarch
a507 nill RI_RU "and immediate low low" z900 zarch
a508 oihh RI_RU "or immediate high high" z900 zarch
a509 oihl RI_RU "or immediate high low" z900 zarch
a50a oilh RI_RU "or immediate low high" z900 zarch
a50b oill RI_RU "or immediate low low" z900 zarch
a50c llihh RI_RU "load logical immediate high high" z900 zarch
a50d llihl RI_RU "load logical immediate high low" z900 zarch
a50e llilh RI_RU "load logical immediate low high" z900 zarch
a50f llill RI_RU "load logical immediate low low" z900 zarch
b2b1 stfl S_RD "store facility list" z900 esa,zarch
b2b2 lpswe S_RD "load psw extended" z900 zarch
b90d dsgr RRE_RR "divide single 64" z900 zarch
b90f lrvgr RRE_RR "load reversed 64" z900 zarch
b916 llgfr RRE_RR "load logical 64<32" z900 zarch
b917 llgtr RRE_RR "load logical thirty one bits" z900 zarch
b91d dsgfr RRE_RR "divide single 64<32" z900 zarch
b91f lrvr RRE_RR "load reversed 32" z900 esa,zarch
b986 mlgr RRE_RR "multiply logical 64" z900 zarch
b987 dlgr RRE_RR "divide logical 64" z900 zarch
b988 alcgr RRE_RR "add logical with carry 64" z900 zarch
b989 slbgr RRE_RR "subtract logical with borrow 64" z900 zarch
b98d epsw RRE_RR "extract psw" z900 esa,zarch
b996 mlr RRE_RR "multiply logical 32" z900 esa,zarch
b997 dlr RRE_RR "divide logical 32" z900 esa,zarch
b998 alcr RRE_RR "add logical with carry 32" z900 esa,zarch
b999 slbr RRE_RR "subtract logical with borrow 32" z900 esa,zarch
b99d esea RRE_R0 "extract and set extended authority" z900 zarch
c000 larl RIL_RP "load address relative long" z900 esa,zarch
e3000000000d dsg RXE_RRRD "divide single 64" z900 zarch
e3000000000f lrvg RXE_RRRD "load reversed 64" z900 zarch
e30000000016 llgf RXE_RRRD "load logical 64<32" z900 zarch
e30000000017 llgt RXE_RRRD "load logical thirty one bits" z900 zarch
e3000000001d dsgf RXE_RRRD "divide single 64<32" z900 zarch
e3000000001e lrv RXE_RRRD "load reversed 32" z900 esa,zarch
e3000000001f lrvh RXE_RRRD "load reversed 16" z900 esa,zarch
e3000000002f strvg RXE_RRRD "store reversed 64" z900 zarch
e3000000003e strv RXE_RRRD "store reversed 32" z900 esa,zarch
e3000000003f strvh RXE_RRRD "store reversed 64" z900 esa,zarch
e30000000086 mlg RXE_RRRD "multiply logical 64" z900 zarch
e30000000087 dlg RXE_RRRD "divide logical 64" z900 zarch
e30000000088 alcg RXE_RRRD "add logical with carry 64" z900 zarch
e30000000089 slbg RXE_RRRD "subtract logical with borrow 64" z900 zarch
e3000000008e stpq RXE_RRRD "store pair to quadword" z900 zarch
e3000000008f lpq RXE_RRRD "load pair from quadword" z900 zarch
e30000000096 ml RXE_RRRD "multiply logical 32" z900 esa,zarch
e30000000097 dl RXE_RRRD "divide logical 32" z900 esa,zarch
e30000000098 alc RXE_RRRD "add logical with carry 32" z900 esa,zarch
e30000000099 slb RXE_RRRD "subtract logical with borrow 32" z900 esa,zarch
e30000000090 llgc RXE_RRRD "load logical character" z900 zarch
e30000000091 llgh RXE_RRRD "load logical halfword" z900 zarch
eb000000001c rllg RSE_RRRD "rotate left single logical 64" z900 zarch
eb000000001d rll RSE_RRRD "rotate left single logical 32" z900 esa,zarch
b369 cxr RRE_FF "compare extended hfp" g5 esa,zarch
b3b6 cxfr RRE_RF "convert from fixed 32 to extended hfp" g5 esa,zarch
b3b5 cdfr RRE_RF "convert from fixed 32 to long hfp" g5 esa,zarch
b3b4 cefr RRE_RF "convert from fixed 32 to short hfp" g5 esa,zarch
b3ba cfxr RRF_U0FR "convert to fixed extended hfp to 32" z900 zarch
b3b9 cfdr RRF_U0FR "convert to fixed long hfp to 32" z900 zarch
b3b8 cfer RRF_U0FR "convert to fixed short hfp to 32" z900 zarch
b362 ltxr RRE_FF "load and test extended hfp" g5 esa,zarch
b363 lcxr RRE_FF "load complement extended hfp" g5 esa,zarch
b367 fixr RRF_U0FF "load fp integer extended hfp" g5 esa,zarch
b37f fidr RRF_U0FF "load fp integer long hfp" g5 esa,zarch
b377 fier RRF_U0FF "load fp integer short hfp" g5 esa,zarch
b325 lxdr RRE_FF "load lengthened long to extended hfp" g5 esa,zarch
ed0000000025 lxd RXE_FRRD "load lengthened long to extended hfp" g5 esa,zarch
b326 lxer RRE_FF "load lengthened short to extended hfp" g5 esa,zarch
ed0000000026 lxe RXE_FRRD "load lengthened short to extended hfp" g5 esa,zarch
b324 lder RRE_FF "load lengthened short to long hfp" g5 esa,zarch
ed0000000024 lde RXE_FRRD "load lengthened short to long hfp" g5 esa,zarch
b361 lnxr RRE_FF "load negative long hfp" g5 esa,zarch
b360 lpxr RRE_FF "load positive long hfp" g5 esa,zarch
b366 lexr RRE_FF "load rounded extended to short hfp" g5 esa,zarch
35 ledr RR_FF "load rounded long to short hfp" g5 esa,zarch
b337 meer RRE_FF "multiply short hfp" g5 esa,zarch
ed0000000037 mee RXE_FRRD "multiply short hfp" g5 esa,zarch
b336 sqxr RRE_FF "square root extended hfp" g5 esa,zarch
ed0000000034 sqe RXE_FRRD "square root short hfp" g5 esa,zarch
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
eb00000000c0 tp RSL_R0RD "test decimal" g5 esa,zarch
b365 lxr RRE_RR "load extended hfp" g5 esa,zarch
b22e pgin RRE_RR "page in" g5 esa,zarch
b22f pgout RRE_RR "page out" g5 esa,zarch
b276 xsch S_00 "cancel subchannel" g5 esa,zarch
# New long displacement instructions on z990
e3000000005a ay RXY_RRRD "add with long offset" z990 zarch
e3000000007a ahy RXY_RRRD "add halfword with long offset" z990 zarch
e3000000005e aly RXY_RRRD "add logical with long offset" z990 zarch
eb0000000054 niy SIY_URD "and immediate with long offset" z990 zarch
e30000000054 ny RXY_RRRD "and with long offset" z990 zarch
e30000000059 cy RXY_RRRD "compare with long offset" z990 zarch
eb0000000014 csy RSY_RRRD "compare and swap with long offset" z990 zarch
eb0000000031 cdsy RSY_RRRD "compare double and swap with long offset" z990 zarch
e30000000079 chy RXY_RRRD "compare halfword with long offset" z990 zarch
e30000000055 cly RXY_RRRD "compare logical with long offset" z990 zarch
eb0000000055 cliy SIY_URD "compare logical immediate with long offset" z990 zarch
eb0000000021 clmy RSY_RURD "compare logical characters under mask with long offset" z990 zarch
e30000000006 cvby RXY_RRRD "convert to binary with long offset" z990 zarch
e30000000026 cvdy RXY_RRRD "convert to decimal with long offset" z990 zarch
eb0000000057 xiy SIY_URD "exclusive or immediate with long offset" z990 zarch
e30000000057 xy RXY_RRRD "exclusive or with long offset" z990 zarch
e30000000073 icy RXY_RRRD "insert character with long offset" z990 zarch
eb0000000081 icmy RSY_RURD "insert characters with long offset" z990 zarch
ed0000000065 ldy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000064 ley RXY_FRRD "load (short) with long offset" z990 zarch
e30000000058 ly RXY_RRRD "load with long offset" z990 zarch
eb000000009a lamy RSY_AARD "load access multiple" z990 zarch
e30000000071 lay RXY_RRRD "load address with long offset" z990 zarch
e30000000076 lb RXY_RRRD "load byte with long offset" z990 zarch
e30000000077 lgb RXY_RRRD "load byte with long offset 64" z990 zarch
e30000000078 lhy RXY_RRRD "load halfword with long offset" z990 zarch
eb0000000098 lmy RSY_RRRD "load multiple with long offset" z990 zarch
e30000000013 lray RXY_RRRD "load real address with long offset" z990 zarch
eb0000000052 mviy SIY_URD "move immediate with long offset" z990 zarch
e30000000051 msy RXY_RRRD "multiply single with long offset" z990 zarch
eb0000000056 oiy SIY_URD "or immediate with long offset" z990 zarch
e30000000056 oy RXY_RRRD "or with long offset" z990 zarch
ed0000000067 stdy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000066 stey RXY_FRRD "load (short) with long offset" z990 zarch
e30000000050 sty RXY_RRRD "store with long offset" z990 zarch
eb000000009b stamy RSY_AARD "store access multiple with long offset" z990 zarch
e30000000072 stcy RXY_RRRD "store character with long offset" z990 zarch
eb000000002d stcmy RSY_RURD "store characters under mask with long offset" z990 zarch
e30000000070 sthy RXY_RRRD "store halfword with long offset" z990 zarch
eb0000000090 stmy RSY_RRRD "store multiple with long offset" z990 zarch
e3000000005b sy RXY_RRRD "subtract with long offset" z990 zarch
e3000000007b shy RXY_RRRD "subtract halfword with long offset" z990 zarch
e3000000005f sly RXY_RRRD "subtract logical with long offset" z990 zarch
eb0000000051 tmy SIY_URD "test under mask with long offset" z990 zarch
# 'old' instructions extended to long displacement
# these instructions are entered into the opcode table twice.
e30000000003 lrag RXY_RRRD "load real address with long offset 64" z990 zarch
e30000000004 lg RXY_RRRD "	 load 64" z990 zarch
e30000000008 ag RXY_RRRD "add with long offset 64" z990 zarch
e30000000009 sg RXY_RRRD "subtract with long offset 64" z990 zarch
e3000000000a alg RXY_RRRD "add logical with long offset 64" z990 zarch
e3000000000b slg RXY_RRRD "subtract logical with long offset 64" z990 zarch
e3000000000c msg RXY_RRRD "multiply single with long offset 64" z990 zarch
e3000000000d dsg RXY_RRRD "divide single 64" z990 zarch
e3000000000e cvbg RXY_RRRD "convert to binary with long offset 64" z990 zarch
e3000000000f lrvg RXY_RRRD "load reversed 64" z990 zarch
e30000000014 lgf RXY_RRRD "load 64<32" z990 zarch
e30000000015 lgh RXY_RRRD "load halfword 64" z990 zarch
e30000000016 llgf RXY_RRRD "load logical 64<32" z990 zarch
e30000000017 llgt RXY_RRRD "load logical thirty one bits" z990 zarch
e30000000018 agf RXY_RRRD "add with long offset 64<32" z990 zarch
e30000000019 sgf RXY_RRRD "subtract with long offset 64<32" z990 zarch
e3000000001a algf RXY_RRRD "add logical with long offset 64<32" z990 zarch
e3000000001b slgf RXY_RRRD "subtract logical with long offset 64<32" z990 zarch
e3000000001c msgf RXY_RRRD "multiply single with long offset 64<32" z990 zarch
e3000000001d dsgf RXY_RRRD "divide single 64<32" z990 zarch
e3000000001e lrv RXY_RRRD "load reversed 32" z990 zarch
e3000000001f lrvh RXY_RRRD "load reversed 16" z990 zarch
e30000000020 cg RXY_RRRD "compare with long offset 64" z990 zarch
e30000000021 clg RXY_RRRD "compare logical with long offset 64" z990 zarch
e30000000024 stg RXY_RRRD "store with long offset 64" z990 zarch
e3000000002e cvdg RXY_RRRD "convert to decimal with long offset 64" z990 zarch
e3000000002f strvg RXY_RRRD "store reversed 64" z990 zarch
e30000000030 cgf RXY_RRRD "compare with long offset 64<32" z990 zarch
e30000000031 clgf RXY_RRRD "compare logical with long offset 64<32" z990 zarch
e3000000003e strv RXY_RRRD "store reversed 32" z990 zarch
e3000000003f strvh RXY_RRRD "store reversed 64" z990 zarch
e30000000046 bctg RXY_RRRD "branch on count 64" z990 zarch
e30000000080 ng RXY_RRRD "and with long offset 64" z990 zarch
e30000000081 og RXY_RRRD "or with long offset 64" z990 zarch
e30000000082 xg RXY_RRRD "exclusive or with long offset 64" z990 zarch
e30000000086 mlg RXY_RRRD "multiply logical 64" z990 zarch
e30000000087 dlg RXY_RRRD "divide logical 64" z990 zarch
e30000000088 alcg RXY_RRRD "add logical with carry 64" z990 zarch
e30000000089 slbg RXY_RRRD "subtract logical with borrow 64" z990 zarch
e3000000008e stpq RXY_RRRD "store pair to quadword" z990 zarch
e3000000008f lpq RXY_RRRD "load pair from quadword" z990 zarch
e30000000090 llgc RXY_RRRD "load logical character" z990 zarch
e30000000091 llgh RXY_RRRD "load logical halfword" z990 zarch
e30000000096 ml RXY_RRRD "multiply logical 32" z990 zarch
e30000000097 dl RXY_RRRD "divide logical 32" z990 zarch
e30000000098 alc RXY_RRRD "add logical with carry 32" z990 zarch
e30000000099 slb RXY_RRRD "subtract logical with borrow 32" z990 zarch
eb0000000004 lmg RSY_RRRD "load multiple with long offset 64" z990 zarch
eb000000000a srag RSY_RRRD "shift right single 64" z990 zarch
eb000000000b slag RSY_RRRD "shift left single 64" z990 zarch
eb000000000c srlg RSY_RRRD "shift right single logical 64" z990 zarch
eb000000000d sllg RSY_RRRD "shift left single logical 64" z990 zarch
eb000000000f tracg RSY_RRRD "trace 64" z990 zarch
eb000000001c rllg RSY_RRRD "rotate left single logical 64" z990 zarch
eb000000001d rll RSY_RRRD "rotate left single logical 32" z990 zarch
eb0000000020 clmh RSY_RURD "compare logical characters under mask high with long offset" z990 zarch
eb0000000024 stmg RSY_RRRD "store multiple with long offset 64" z990 zarch
eb0000000025 stctg RSY_RRRD "store control 64" z990 zarch
eb0000000026 stmh RSY_RRRD "store multiple high" z990 zarch
eb000000002c stcmh RSY_RURD "store characters under mask high with long offset" z990 zarch
eb000000002f lctlg RSY_RRRD "load control 64" z990 zarch
eb0000000030 csg RSY_RRRD "compare and swap with long offset 64" z990 zarch
eb000000003e cdsg RSY_RRRD "compare double and swap with long offset 64" z990 zarch
eb0000000044 bxhg RSY_RRRD "branch on index high 64" z990 zarch
eb0000000045 bxleg RSY_RRRD "branch on index low or equal 64" z990 zarch
eb0000000080 icmh RSY_RURD "insert characters under mask high with long offset" z990 zarch
eb000000008e mvclu RSY_RRRD "move long unicode" z990 zarch
eb000000008f clclu RSY_RRRD "compare logical long unicode with long offset" z990 zarch
eb0000000096 lmh RSY_RRRD "load multiple high" z990 zarch
# new z990 instructions
b98a cspg RRE_RR "compare and swap and purge" z990 zarch
b98e idte RRF_R0RR "invalidate dat table entry" z990 zarch
b33e madr RRF_F0FF "multiply and add long hfp" z990 esa,zarch
ed000000003e mad RXF_FRRDF "multiply and add long hfp" z990 esa,zarch
b32e maer RRF_F0FF "multiply and add short hfp" z990 esa,zarch
ed000000002e mae RXF_FRRDF "multiply and add shoft hfp" z990 esa,zarch
b33f msdr RRF_F0FF "multiply and subtract long hfp" z990 esa,zarch
ed000000003f msd RXF_FRRDF "multiply and subtract long hfp" z990 esa,zarch
b32f mser RRF_F0FF "mutliply and subtract short hfp" z990 esa,zarch
ed000000002f mse RXF_FRRDF "multiply and subttract short hfp" z990 esa,zarch
b92e km RRE_RR "cipher message" z990 esa,zarch
b92f kmc RRE_RR "cipher message with chaining" z990 esa,zarch
b93e kimd RRE_RR "compute intermediate message digest" z990 esa,zarch
b93f klmd RRE_RR "compute last message digest" z990 esa,zarch
b91e kmac RRE_RR "compute message authentication code" z990 esa,zarch
@


1.6.22.1
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d4 419
a422 438
5a a RX_RRRD "add" g5 esa,zarch
6a ad RX_FRRD "add normalized (long)" g5 esa,zarch
2a adr RR_FF "add normalized (long)" g5 esa,zarch
7a ae RX_FRRD "add normalized (short)" g5 esa,zarch
3a aer RR_FF "add normalized (short)" g5 esa,zarch
4a ah RX_RRRD "add halfword" g5 esa,zarch
5e al RX_RRRD "add logical" g5 esa,zarch
1e alr RR_RR "add logical" g5 esa,zarch
fa ap SS_LLRDRD "add decimal" g5 esa,zarch
1a ar RR_RR "add" g5 esa,zarch
7e au RX_FRRD "add unnormalized (short)" g5 esa,zarch
3e aur RR_FF "add unnormalized (short)" g5 esa,zarch
6e aw RX_FRRD "add unnormalized (long)" g5 esa,zarch
2e awr RR_FF "add unnormalized (long)" g5 esa,zarch
36 axr RR_FF "add normalized" g5 esa,zarch
b240 bakr RRE_RR "branch and stack" g5 esa,zarch
45 bal RX_RRRD "branch and link" g5 esa,zarch
05 balr RR_RR "branch and link" g5 esa,zarch
4d bas RX_RRRD "branch and save" g5 esa,zarch
0d basr RR_RR "branch and save" g5 esa,zarch
0c bassm RR_RR "branch and save and set mode" g5 esa,zarch
47 bc RX_URRD "branch on condition" g5 esa,zarch
07 bcr RR_UR "branch on condition" g5 esa,zarch
46 bct RX_RRRD "branch on count" g5 esa,zarch
06 bctr RR_RR "branch on count" g5 esa,zarch
b258 bsg RRE_RR "branch in subspace group" g5 esa,zarch
0b bsm RR_RR "branch and set mode" g5 esa,zarch
86 bxh RS_RRRD "branch on index high" g5 esa,zarch
87 bxle RS_RRRD "branch on index low or equal" g5 esa,zarch
59 c RX_RRRD "compare" g5 esa,zarch
69 cd RX_FRRD "compare (long)" g5 esa,zarch
29 cdr RR_FF "compare (long)" g5 esa,zarch
bb cds RS_RRRD "compare double and swap" g5 esa,zarch
79 ce RX_FRRD "compare (short)" g5 esa,zarch
39 cer RR_FF "compare (short)" g5 esa,zarch
b21a cfc S_RD "compare and form codeword" g5 esa,zarch
49 ch RX_RRRD "compare halfword" g5 esa,zarch
55 cl RX_RRRD "compare logical" g5 esa,zarch
d5 clc SS_L0RDRD "compare logical" g5 esa,zarch
0f clcl RR_RR "compare logical long" g5 esa,zarch
95 cli SI_URD "compare logical" g5 esa,zarch
bd clm RS_RURD "compare logical characters under mask" g5 esa,zarch
15 clr RR_RR "compare logical" g5 esa,zarch
b25d clst RRE_RR "compare logical string" g5 esa,zarch
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
f9 cp SS_LLRDRD "compare decimal" g5 esa,zarch
b24d cpya RRE_AA "copy access" g5 esa,zarch
19 cr RR_RR "compare" g5 esa,zarch
ba cs RS_RRRD "compare and swap" g5 esa,zarch
b230 csch S_00 "clear subchannel" g5 esa,zarch
b257 cuse RRE_RR "compare until substring equal" g5 esa,zarch
b250 csp RRE_RR "compare and swap and purge" g5 esa,zarch
4f cvb RX_RRRD "convert to binary" g5 esa,zarch
4e cvd RX_RRRD "convert to decimal" g5 esa,zarch
5d d RX_RRRD "divide" g5 esa,zarch
6d dd RX_FRRD "divide (long)" g5 esa,zarch
2d ddr RR_FF "divide (long)" g5 esa,zarch
7d de RX_FRRD "divide (short)" g5 esa,zarch
3d der RR_FF "divide (short)" g5 esa,zarch
83 diag RS_RRRD "diagnose" g5 esa,zarch
fd dp SS_LLRDRD "divide decimal" g5 esa,zarch
1d dr RR_RR "divide" g5 esa,zarch
b22d dxr RRE_F0 "divide (ext.)" g5 esa,zarch
b24f ear RRE_RA "extract access" g5 esa,zarch
de ed SS_L0RDRD "edit" g5 esa,zarch
df edmk SS_L0RDRD "edit and mark" g5 esa,zarch
b226 epar RRE_R0 "extract primary ASN" g5 esa,zarch
b249 ereg RRE_RR "extract stacked registers" g5 esa,zarch
b227 esar RRE_R0 "extract secondary ASN" g5 esa,zarch
b24a esta RRE_RR "extract stacked state" g5 esa,zarch
44 ex RX_RRRD "execute" g5 esa,zarch
24 hdr RR_FF "halve (long)" g5 esa,zarch
34 her RR_FF "halve (short)" g5 esa,zarch
b231 hsch S_00 "halt subchannel" g5 esa,zarch
b224 iac RRE_R0 "insert address space control" g5 esa,zarch
43 ic RX_RRRD "insert character" g5 esa,zarch
bf icm RS_RURD "insert characters under mask" g5 esa,zarch
b20b ipk S_00 "insert PSW key" g5 esa,zarch
b222 ipm RRE_R0 "insert program mask" g5 esa,zarch
b221 ipte RRE_RR "invalidate page table entry" g5 esa,zarch
b229 iske RRE_RR "insert storage key extended" g5 esa,zarch
b223 ivsk RRE_RR "insert virtual storage key" g5 esa,zarch
58 l RX_RRRD "load" g5 esa,zarch
41 la RX_RRRD "load address" g5 esa,zarch
51 lae RX_RRRD "load address extended" g5 esa,zarch
9a lam RS_AARD "load access multiple" g5 esa,zarch
e500 lasp SSE_RDRD "load address space parameters" g5 esa,zarch
23 lcdr RR_FF "load complement (long)" g5 esa,zarch
33 lcer RR_FF "load complement (short)" g5 esa,zarch
13 lcr RR_RR "load complement" g5 esa,zarch
b7 lctl RS_CCRD "load control" g5 esa,zarch
68 ld RX_FRRD "load (long)" g5 esa,zarch
28 ldr RR_FF "load (long)" g5 esa,zarch
78 le RX_FRRD "load (short)" g5 esa,zarch
38 ler RR_FF "load (short)" g5 esa,zarch
48 lh RX_RRRD "load halfword" g5 esa,zarch
98 lm RS_RRRD "load multiple" g5 esa,zarch
21 lndr RR_FF "load negative (long)" g5 esa,zarch
31 lner RR_FF "load negative (short)" g5 esa,zarch
11 lnr RR_RR "load negative" g5 esa,zarch
20 lpdr RR_FF "load positive (long)" g5 esa,zarch
30 lper RR_FF "load positive (short)" g5 esa,zarch
10 lpr RR_RR "load positive" g5 esa,zarch
82 lpsw S_RD "load PSW" g5 esa,zarch
18 lr RR_RR "load" g5 esa,zarch
b1 lra RX_RRRD "load real address" g5 esa,zarch
25 lrdr RR_FF "load rounded (ext. to long)" g5 esa,zarch
35 lrer RR_FF "load rounded (long to short)" g5 esa,zarch
22 ltdr RR_FF "load and test (long)" g5 esa,zarch
32 lter RR_FF "load and test (short)" g5 esa,zarch
12 ltr RR_RR "load and test" g5 esa,zarch
b24b lura RRE_RR "load using real address" g5 esa,zarch
5c m RX_RRRD "multiply" g5 esa,zarch
af mc SI_URD "monitor call" g5 esa,zarch
6c md RX_FRRD "multiply (long)" g5 esa,zarch
2c mdr RR_FF "multiply (long)" g5 esa,zarch
7c me RX_FRRD "multiply (short to long)" g5 esa,zarch
3c mer RR_FF "multiply (short to long)" g5 esa,zarch
4c mh RX_RRRD "multiply halfword" g5 esa,zarch
fc mp SS_LLRDRD "multiply decimal" g5 esa,zarch
1c mr RR_RR "multiply" g5 esa,zarch
b232 msch S_RD "modify subchannel" g5 esa,zarch
b247 msta RRE_R0 "modify stacked state" g5 esa,zarch
d2 mvc SS_L0RDRD "move" g5 esa,zarch
e50f mvcdk SSE_RDRD "move with destination key" g5 esa,zarch
e8 mvcin SS_L0RDRD "move inverse" g5 esa,zarch
d9 mvck SS_RRRDRD "move with key" g5 esa,zarch
0e mvcl RR_RR "move long" g5 esa,zarch
da mvcp SS_RRRDRD "move to primary" g5 esa,zarch
db mvcs SS_RRRDRD "move to secondary" g5 esa,zarch
e50e mvcsk SSE_RDRD "move with source key" g5 esa,zarch
92 mvi SI_URD "move" g5 esa,zarch
d1 mvn SS_L0RDRD "move numerics" g5 esa,zarch
f1 mvo SS_LLRDRD "move with offset" g5 esa,zarch
b254 mvpg RRE_RR "move page" g5 esa,zarch
b255 mvst RRE_RR "move string" g5 esa,zarch
d3 mvz SS_L0RDRD "move zones" g5 esa,zarch
67 mxd RX_FRRD "multiply (long to ext.)" g5 esa,zarch
27 mxdr RR_FF "multiply (long to ext.)" g5 esa,zarch
26 mxr RR_FF "multiply (ext.)" g5 esa,zarch
54 n RX_RRRD "AND" g5 esa,zarch
d4 nc SS_L0RDRD "AND" g5 esa,zarch
94 ni SI_URD "AND" g5 esa,zarch
14 nr RR_RR "AND" g5 esa,zarch
56 o RX_RRRD "OR" g5 esa,zarch
d6 oc SS_L0RDRD "OR" g5 esa,zarch
96 oi SI_URD "OR" g5 esa,zarch
16 or RR_RR "OR" g5 esa,zarch
f2 pack SS_LLRDRD "pack" g5 esa,zarch
b248 palb RRE_00 "purge ALB" g5 esa,zarch
b218 pc S_RD "program call" g5 esa,zarch
0101 pr E "program return" g5 esa,zarch
b228 pt RRE_RR "program transfer" g5 esa,zarch
b20d ptlb S_00 "purge TLB" g5 esa,zarch
b23b rchp S_00 "reset channel path" g5 esa,zarch
b22a rrbe RRE_RR "reset reference bit extended" g5 esa,zarch
b238 rsch S_00 "resume subchannel" g5 esa,zarch
5b s RX_RRRD "subtract" g5 esa,zarch
b219 sac S_RD "set address space control" g5 esa,zarch
b279 sacf S_RD "set address space control fast" g5 esa,zarch
b237 sal S_00 "set address limit" g5 esa,zarch
b24e sar RRE_AR "set access" g5 esa,zarch
b23c schm S_00 "set channel monitor" g5 esa,zarch
b204 sck S_RD "set clock" g5 esa,zarch
b206 sckc S_RD "set clock comparator" g5 esa,zarch
6b sd RX_FRRD "subtract normalized (long)" g5 esa,zarch
2b sdr RR_FF "subtract normalized (long)" g5 esa,zarch
7b se RX_FRRD "subtract normalized (short)" g5 esa,zarch
3b ser RR_FF "subtract normalized (short)" g5 esa,zarch
4b sh RX_RRRD "subtract halfword" g5 esa,zarch
b214 sie S_RD "start interpretive execution" g5 esa,zarch
ae sigp RS_RRRD "signal processor" g5 esa,zarch
5f sl RX_RRRD "subtract logical" g5 esa,zarch
8b sla RS_R0RD "shift left single" g5 esa,zarch
8f slda RS_R0RD "shift left double (long)" g5 esa,zarch
8d sldl RS_R0RD "shift left double logical (long)" g5 esa,zarch
89 sll RS_R0RD "shift left single logical" g5 esa,zarch
1f slr RR_RR "subtract logical" g5 esa,zarch
fb sp SS_LLRDRD "subtract decimal" g5 esa,zarch
b20a spka S_RD "set PSW key from address" g5 esa,zarch
04 spm RR_R0 "set program mask" g5 esa,zarch
b208 spt S_RD "set CPU timer" g5 esa,zarch
b210 spx S_RD "set prefix" g5 esa,zarch
b244 sqdr RRE_F0 "square root (long)" g5 esa,zarch
b245 sqer RRE_F0 "square root (short)" g5 esa,zarch
1b sr RR_RR "subtract" g5 esa,zarch
8a sra RS_R0RD "shift right single" g5 esa,zarch
8e srda RS_R0RD "shift right double (long)" g5 esa,zarch
8c srdl RS_R0RD "shift right double logical (long)" g5 esa,zarch
88 srl RS_R0RD "shift right single logical" g5 esa,zarch
f0 srp SS_LIRDRD "shift and round decimal" g5 esa,zarch
b25e srst RRE_RR "search string" g5 esa,zarch
b225 ssar RRE_R0 "set secondary ASN" g5 esa,zarch
b233 ssch S_RD "start subchannel" g5 esa,zarch
b22b sske RRE_RR "set storage key extended" g5 esa,zarch
80 ssm S_RD "set system mask" g5 esa,zarch
50 st RX_RRRD "store" g5 esa,zarch
9b stam RS_AARD "store access multiple" g5 esa,zarch
b212 stap S_RD "store CPU address" g5 esa,zarch
42 stc RX_RRRD "store character" g5 esa,zarch
b205 stck S_RD "store clock" g5 esa,zarch
b207 stckc S_RD "store clock comparator" g5 esa,zarch
be stcm RS_RURD "store characters under mask" g5 esa,zarch
b23a stcps S_RD "store channel path status" g5 esa,zarch
b239 stcrw S_RD "store channel report word" g5 esa,zarch
b6 stctl RS_CCRD "store control" g5 esa,zarch
60 std RX_FRRD "store (long)" g5 esa,zarch
70 ste RX_FRRD "store (short)" g5 esa,zarch
40 sth RX_RRRD "store halfword" g5 esa,zarch
b202 stidp S_RD "store CPU id" g5 esa,zarch
90 stm RS_RRRD "store multiple" g5 esa,zarch
ac stnsm SI_URD "store then AND system mask" g5 esa,zarch
ad stosm SI_URD "store then OR system mask" g5 esa,zarch
b209 stpt S_RD "store CPU timer" g5 esa,zarch
b211 stpx S_RD "store prefix" g5 esa,zarch
b234 stsch S_RD "store subchannel" g5 esa,zarch
b246 stura RRE_RR "store using real address" g5 esa,zarch
7f su RX_FRRD "subtract unnormalized (short)" g5 esa,zarch
3f sur RR_FF "subtract unnormalized (short)" g5 esa,zarch
0a svc RR_U0 "supervisor call" g5 esa,zarch
6f sw RX_FRRD "subtract unnormalized (long)" g5 esa,zarch
2f swr RR_FF "subtract unnormalized (long)" g5 esa,zarch
37 sxr RR_FF "subtract normalized (ext.)" g5 esa,zarch
b24c tar RRE_AR "test access" g5 esa,zarch
b22c tb RRE_0R "test block" g5 esa,zarch
91 tm SI_URD "test under mask" g5 esa,zarch
b236 tpi S_RD "test pending interruption" g5 esa,zarch
e501 tprot SSE_RDRD "test protection" g5 esa,zarch
dc tr SS_L0RDRD "translate" g5 esa,zarch
99 trace RS_RRRD "trace" g5 esa,zarch
dd trt SS_L0RDRD "translate and test" g5 esa,zarch
93 ts S_RD "test and set" g5 esa,zarch
b235 tsch S_RD "test subchannel" g5 esa,zarch
f3 unpk SS_LLRDRD "unpack" g5 esa,zarch
0102 upt E "update tree" g5 esa,zarch
57 x RX_RRRD "exclusive OR" g5 esa,zarch
d7 xc SS_L0RDRD "exclusive OR" g5 esa,zarch
97 xi SI_URD "exclusive OR" g5 esa,zarch
17 xr RR_RR "exclusive OR" g5 esa,zarch
f8 zap SS_LLRDRD "zero and add" g5 esa,zarch
a70a ahi RI_RI "add halfword immediate" g5 esa,zarch
84 brxh RSI_RRP "branch relative on index high" g5 esa,zarch
85 brxle RSI_RRP "branch relative on index low or equal" g5 esa,zarch
a705 bras RI_RP "branch relative and save" g5 esa,zarch
a704 brc RI_UP "branch relative on condition" g5 esa,zarch
a706 brct RI_RP "branch relative on count" g5 esa,zarch
b241 cksm RRE_RR "checksum" g5 esa,zarch
a70e chi RI_RI "compare halfword immediate" g5 esa,zarch
a9 clcle RS_RRRD "compare logical long extended" g5 esa,zarch
a708 lhi RI_RI "load halfword immediate" g5 esa,zarch
a8 mvcle RS_RRRD "move long extended" g5 esa,zarch
a70c mhi RI_RI "multiply halfword immediate" g5 esa,zarch
b252 msr RRE_RR "multiply single" g5 esa,zarch
71 ms RX_RRRD "multiply single" g5 esa,zarch
a700 tmh RI_RU "test under mask high" g5 esa,zarch
a701 tml RI_RU "test under mask low" g5 esa,zarch
0700 nopr RR_0R "no operation" g5 esa,zarch
0710 bor RR_0R "branch on overflow / if ones" g5 esa,zarch
0720 bhr RR_0R "branch on high" g5 esa,zarch
0720 bpr RR_0R "branch on plus" g5 esa,zarch
0730 bnler RR_0R "branch on not low or equal" g5 esa,zarch
0740 blr RR_0R "branch on low" g5 esa,zarch
0740 bmr RR_0R "branch on minus / if mixed" g5 esa,zarch
0750 bnher RR_0R "branch on not high or equal" g5 esa,zarch
0760 blhr RR_0R "branch on low or high" g5 esa,zarch
0770 bner RR_0R "branch on not equal" g5 esa,zarch
0770 bnzr RR_0R "branch on not zero / if not zeros" g5 esa,zarch
0780 ber RR_0R "branch on equal" g5 esa,zarch
0780 bzr RR_0R "branch on zero / if zeros" g5 esa,zarch
0790 bnlhr RR_0R "branch on not low or high" g5 esa,zarch
07a0 bher RR_0R "branch on high or equal" g5 esa,zarch
07b0 bnlr RR_0R "branch on not low" g5 esa,zarch
07b0 bnmr RR_0R "branch on not minus / if not mixed" g5 esa,zarch
07c0 bler RR_0R "brach on low or equal" g5 esa,zarch
07d0 bnhr RR_0R "branch on not high" g5 esa,zarch
07d0 bnpr RR_0R "branch on not plus" g5 esa,zarch
07e0 bnor RR_0R "branch on not overflow / if not ones" g5 esa,zarch
07f0 br RR_0R "unconditional branch" g5 esa,zarch
4700 nop RX_0RRD "no operation" g5 esa,zarch
4710 bo RX_0RRD "branch on overflow / if ones" g5 esa,zarch
4720 bh RX_0RRD "branch on high" g5 esa,zarch
4720 bp RX_0RRD "branch on plus" g5 esa,zarch
4730 bnle RX_0RRD "branch on not low or equal" g5 esa,zarch
4740 bl RX_0RRD "branch on low" g5 esa,zarch
4740 bm RX_0RRD "branch on minus / if mixed" g5 esa,zarch
4750 bnhe RX_0RRD "branch on not high or equal" g5 esa,zarch
4760 blh RX_0RRD "branch on low or high" g5 esa,zarch
4770 bne RX_0RRD "branch on not equal" g5 esa,zarch
4770 bnz RX_0RRD "branch on not zero / if not zeros" g5 esa,zarch
4780 be RX_0RRD "branch on equal" g5 esa,zarch
4780 bz RX_0RRD "branch on zero / if zeros" g5 esa,zarch
4790 bnlh RX_0RRD "branch on not low or high" g5 esa,zarch
47a0 bhe RX_0RRD "branch on high or equal" g5 esa,zarch
47b0 bnl RX_0RRD "branch on not low" g5 esa,zarch
47b0 bnm RX_0RRD "branch on not minus / if not mixed" g5 esa,zarch
47c0 ble RX_0RRD "branch on low or equal" g5 esa,zarch
47d0 bnh RX_0RRD "branch on not high" g5 esa,zarch
47d0 bnp RX_0RRD "branch on not plus" g5 esa,zarch
47e0 bno RX_0RRD "branch on not overflow / if not ones" g5 esa,zarch
47f0 b RX_0RRD "unconditional branch" g5 esa,zarch
a714 jo RI_0P "jump on overflow / if ones" g5 esa,zarch
a724 jh RI_0P "jump on A high" g5 esa,zarch
a724 jp RI_0P "jump on plus" g5 esa,zarch
a734 jnle RI_0P "jump on not low or equal" g5 esa,zarch
a744 jl RI_0P "jump on A low" g5 esa,zarch
a744 jm RI_0P "jump on minus / if mixed" g5 esa,zarch
a754 jnhe RI_0P "jump on not high or equal" g5 esa,zarch
a764 jlh RI_0P "jump on low or high" g5 esa,zarch
a774 jne RI_0P "jump on A not equal B" g5 esa,zarch
a774 jnz RI_0P "jump on not zero / if not zeros" g5 esa,zarch
a784 je RI_0P "jump on A equal B" g5 esa,zarch
a784 jz RI_0P "jump on zero / if zeros" g5 esa,zarch
a794 jnlh RI_0P "jump on not low or high" g5 esa,zarch
a7a4 jhe RI_0P "jump on high or equal" g5 esa,zarch
a7b4 jnl RI_0P "jump on A not low" g5 esa,zarch
a7b4 jnm RI_0P "jump on not minus / if not mixed" g5 esa,zarch
a7c4 jle RI_0P "jump on low or equal" g5 esa,zarch
a7d4 jnh RI_0P "jump on A not high" g5 esa,zarch
a7d4 jnp RI_0P "jump on not plus" g5 esa,zarch
a7e4 jno RI_0P "jump on not overflow / if not ones" g5 esa,zarch
a7f4 j RI_0P "jump" g5 esa,zarch
b34a axbr RRE_FF "add extended bfp" g5 esa,zarch
b31a adbr RRE_FF "add long bfp" g5 esa,zarch
ed000000001a adb RXE_FRRD "add long bfp" g5 esa,zarch
b30a aebr RRE_FF "add short bfp" g5 esa,zarch
ed000000000a aeb RXE_FRRD "add short bfp" g5 esa,zarch
b349 cxbr RRE_FF "compare extended bfp" g5 esa,zarch
b319 cdbr RRE_FF "compare long bfp" g5 esa,zarch
ed0000000019 cdb RXE_FRRD "compare long bfp" g5 esa,zarch
b309 cebr RRE_FF "compare short bfp" g5 esa,zarch
ed0000000009 ceb RXE_FRRD "compare short bfp" g5 esa,zarch
b348 kxbr RRE_FF "compare and signal extended bfp" g5 esa,zarch
b318 kdbr RRE_FF "compare and signal long bfp" g5 esa,zarch
ed0000000018 kdb RXE_FRRD "compare and signal long bfp" g5 esa,zarch
b308 kebr RRE_FF "compare and signal short bfp" g5 esa,zarch
ed0000000008 keb RXE_FRRD "compare and signal short bfp" g5 esa,zarch
b396 cxfbr RRE_RF "convert from fixed 32 to extended bfp" g5 esa,zarch
b395 cdfbr RRE_RF "convert from fixed 32 to long bfp" g5 esa,zarch
b394 cefbr RRE_RF "convert from fixed 32 to short bfp" g5 esa,zarch
b39a cfxbr RRF_U0FR "convert to fixed extended bfp to 32" g5 esa,zarch
b399 cfdbr RRF_U0FR "convert to fixed long bfp to 32" g5 esa,zarch
b398 cfebr RRF_U0FR "convert to fixed short bfp to 32" g5 esa,zarch
b34d dxbr RRE_FF "divide extended bfp" g5 esa,zarch
b31d ddbr RRE_FF "divide long bfp" g5 esa,zarch
ed000000001d ddb RXE_FRRD "divide long bfp" g5 esa,zarch
b30d debr RRE_FF "divide short bfp" g5 esa,zarch
ed000000000d deb RXE_FRRD "divide short bfp" g5 esa,zarch
b35b didbr RRF_FUFF "divide to integer long bfp" g5 esa,zarch
b353 diebr RRF_FUFF "divide to integer short bfp" g5 esa,zarch
b38c efpc RRE_RR "extract fpc" g5 esa,zarch
b342 ltxbr RRE_FF "load and test extended bfp" g5 esa,zarch
b312 ltdbr RRE_FF "load and test long bfp" g5 esa,zarch
b302 ltebr RRE_FF "load and test short bfp" g5 esa,zarch
b343 lcxbr RRE_FF "load complement extended bfp" g5 esa,zarch
b313 lcdbr RRE_FF "load complement long bfp" g5 esa,zarch
b303 lcebr RRE_FF "load complement short bfp" g5 esa,zarch
b347 fixbr RRF_U0FF "load fp integer extended bfp" g5 esa,zarch
b35f fidbr RRF_U0FF "load fp integer long bfp" g5 esa,zarch
b357 fiebr RRF_U0FF "load fp integer short bfp" g5 esa,zarch
b29d lfpc S_RD "load fpc" g5 esa,zarch
b305 lxdbr RRE_FF "load lengthened long to extended bfp" g5 esa,zarch
ed0000000005 lxdb RXE_FRRD "load lengthened long to extended bfp" g5 esa,zarch
b306 lxebr RRE_FF "load lengthened short to extended bfp" g5 esa,zarch
ed0000000006 lxeb RXE_FRRD "load lengthened short to extended bfp" g5 esa,zarch
b304 ldebr RRE_FF "load lengthened short to long bfp" g5 esa,zarch
ed0000000004 ldeb RXE_FRRD "load lengthened short to long bfp" g5 esa,zarch
b341 lnxbr RRE_FF "load negative extended bfp" g5 esa,zarch
b311 lndbr RRE_FF "load negative long bfp" g5 esa,zarch
b301 lnebr RRE_FF "load negative short bfp" g5 esa,zarch
b340 lpxbr RRE_FF "load positive extended bfp" g5 esa,zarch
b310 lpdbr RRE_FF "load positive long bfp" g5 esa,zarch
b300 lpebr RRE_FF "load positive short bfp" g5 esa,zarch
b345 ldxbr RRE_FF "load rounded extended to long bfp" g5 esa,zarch
b346 lexbr RRE_FF "load rounded extended to short bfp" g5 esa,zarch
b344 ledbr RRE_FF "load rounded long to short bfp" g5 esa,zarch
b34c mxbr RRE_FF "multiply extended bfp" g5 esa,zarch
b31c mdbr RRE_FF "multiply long bfp" g5 esa,zarch
ed000000001c mdb RXE_FRRD "multiply long bfp" g5 esa,zarch
b307 mxdbr RRE_FF "multiply long to extended bfp" g5 esa,zarch
ed0000000007 mxdb RXE_FRRD "multiply long to extended bfp" g5 esa,zarch
b317 meebr RRE_FF "multiply short bfp" g5 esa,zarch
ed0000000017 meeb RXE_FRRD "multiply short bfp" g5 esa,zarch
b30c mdebr RRE_FF "multiply short to long bfp" g5 esa,zarch
ed000000000c mdeb RXE_FRRD "multiply short to long bfp" g5 esa,zarch
b31e madbr RRF_F0FF "multiply and add long bfp" g5 esa,zarch
ed000000001e madb RXF_FRRDF "multiply and add long bfp" g5 esa,zarch
b30e maebr RRF_F0FF "multiply and add short bfp" g5 esa,zarch
ed000000000e maeb RXF_FRRDF "multiply and add short bfp" g5 esa,zarch
b31f msdbr RRF_F0FF "multiply and subtract long bfp" g5 esa,zarch
ed000000001f msdb RXF_FRRDF "multiply and subtract long bfp" g5 esa,zarch
b30f msebr RRF_F0FF "multiply and subtract short bfp" g5 esa,zarch
ed000000000f mseb RXF_FRRDF "multiply and subtract short bfp" g5 esa,zarch
b384 sfpc RRE_RR "set fpc" g5 esa,zarch
b299 srnm S_RD "set rounding mode" g5 esa,zarch
b316 sqxbr RRE_FF "square root extended bfp" g5 esa,zarch
b315 sqdbr RRE_FF "square root long bfp" g5 esa,zarch
ed0000000015 sqdb RXE_FRRD "square root long bfp" g5 esa,zarch
b314 sqebr RRE_FF "square root short bfp" g5 esa,zarch
ed0000000014 sqeb RXE_FRRD "square root short bfp" g5 esa,zarch
b29c stfpc S_RD "store fpc" g5 esa,zarch
b34b sxbr RRE_FF "subtract extended bfp" g5 esa,zarch
b31b sdbr RRE_FF "subtract long bfp" g5 esa,zarch
ed000000001b sdb RXE_FRRD "subtract long bfp" g5 esa,zarch
b30b sebr RRE_FF "subtract short bfp" g5 esa,zarch
ed000000000b seb RXE_FRRD "subtract short bfp" g5 esa,zarch
ed0000000012 tcxb RXE_FRRD "test data class extended bfp" g5 esa,zarch
ed0000000011 tcdb RXE_FRRD "test data class long bfp" g5 esa,zarch
ed0000000010 tceb RXE_FRRD "test data class short bfp" g5 esa,zarch
b274 siga S_RD "signal adapter" g5 esa,zarch
b2a6 cuutf RRE_RR "convert unicode to utf-8" g5 esa,zarch
b2a7 cutfu RRE_RR "convert utf-8 to unicode" g5 esa,zarch
ee plo SS_RRRDRD2 "perform locked operation" g5 esa,zarch
b25a bsa RRE_RR "branch and set authority" g5 esa,zarch
b277 rp S_RD "resume program" g5 esa,zarch
0107 sckpf E "set clock programmable field" g5 esa,zarch
b27d stsi S_RD "store system information" g5 esa,zarch
01ff trap2 E "trap" g5 esa,zarch
b2ff trap4 S_RD "trap4" g5 esa,zarch
a700 tmlh RI_RU "test under mask low high" g5 esa,zarch
a701 tmll RI_RU "test under mask low low" g5 esa,zarch
b278 stcke S_RD "store clock extended" g5 esa,zarch
b2a5 tre RRE_RR "translate extended" g5 esa,zarch
eb000000008e mvclu RSE_RRRD "move long unicode" g5 esa,zarch
e9 pka SS_L0RDRD "pack ascii" g5 esa,zarch
e1 pku SS_L0RDRD "pack unicode" g5 esa,zarch
b993 troo RRE_RR "translate one to one" g5 esa,zarch
b992 trot RRE_RR "translate one to two" g5 esa,zarch
b991 trto RRE_RR "translate two to one" g5 esa,zarch
b990 trtt RRE_RR "translate two to two" g5 esa,zarch
ea unpka SS_L0RDRD "unpack ascii" g5 esa,zarch
e2 unpku SS_L0RDRD "unpack unicode" g5 esa,zarch
b358 thder RRE_RR "convert short bfp to long hfp" g5 esa,zarch
b359 thdr RRE_RR "convert long bfp to long hfp" g5 esa,zarch
b350 tbedr RRF_U0FF "convert long hfp to short bfp" g5 esa,zarch
b351 tbdr RRF_U0FF "convert long hfp to long bfp" g5 esa,zarch
b374 lzer RRE_R0 "load short zero" g5 esa,zarch
b375 lzdr RRE_R0 "load long zero" g5 esa,zarch
b376 lzxr RRE_R0 "load extended zero" g5 esa,zarch
d424 203
a626 183
b946 bctgr RRE_RR "branch on count 64" z900 zarch
b900 lpgr RRE_RR "load positive 64" z900 zarch
b910 lpgfr RRE_RR "load positive 64<32" z900 zarch
b901 lngr RRE_RR "load negative 64" z900 zarch
b911 lngfr RRE_RR "load negative 64<32" z900 zarch
b902 ltgr RRE_RR "load and test 64" z900 zarch
b912 ltgfr RRE_RR "load and test 64<32" z900 zarch
b903 lcgr RRE_RR "load complement 64" z900 zarch
b913 lcgfr RRE_RR "load complement 64<32" z900 zarch
b980 ngr RRE_RR "and 64" z900 zarch
b921 clgr RRE_RR "compare logical 64" z900 zarch
b931 clgfr RRE_RR "compare logical 64<32" z900 zarch
b981 ogr RRE_RR "or 64" z900 zarch
b982 xgr RRE_RR "exclusive or 64" z900 zarch
b904 lgr RRE_RR "load 64" z900 zarch
b914 lgfr RRE_RR "load 64<32" z900 zarch
b920 cgr RRE_RR "compare 64" z900 zarch
b930 cgfr RRE_RR "compare 64<32" z900 zarch
b908 agr RRE_RR "add 64" z900 zarch
b918 agfr RRE_RR "add 64<32" z900 zarch
b909 sgr RRE_RR "subtract 64" z900 zarch zarch
b919 sgfr RRE_RR "subtract 64<32" z900 zarch
b90a algr RRE_RR "add logical 64" z900 zarch
b91a algfr RRE_RR "add logical 64<32" z900 zarch
b90b slgr RRE_RR "subtract logical 64" z900 zarch
b91b slgfr RRE_RR "subtract logical 64<32" z900 zarch
e30000000046 bctg RXE_RRRD "branch on count 64" z900 zarch
e3000000002e cvdg RXE_RRRD "convert to decimal 64" z900 zarch
e3000000000e cvbg RXE_RRRD "convert to binary 64" z900 zarch
e30000000024 stg RXE_RRRD "store 64" z900 zarch
e30000000080 ng RXE_RRRD "and 64" z900 zarch
e30000000021 clg RXE_RRRD "compare logical 64" z900 zarch
e30000000031 clgf RXE_RRRD "comparee logical 64<32" z900 zarch
e30000000081 og RXE_RRRD "or 64" z900 zarch
e30000000082 xg RXE_RRRD "exclusive or 64" z900 zarch
e30000000004 lg RXE_RRRD "load 64" z900 zarch
e30000000014 lgf RXE_RRRD "load 64<32" z900 zarch
e30000000015 lgh RXE_RRRD "load halfword 64" z900 zarch
e30000000020 cg RXE_RRRD "compare 64" z900 zarch
e30000000030 cgf RXE_RRRD "compare 64<32" z900 zarch
e30000000008 ag RXE_RRRD "add 64" z900 zarch
e30000000018 agf RXE_RRRD "add 64<32" z900 zarch
e30000000009 sg RXE_RRRD "subtract 64" z900 zarch
e30000000019 sgf RXE_RRRD "subtract 64<32" z900 zarch
e3000000000a alg RXE_RRRD "add logical 64" z900 zarch
e3000000001a algf RXE_RRRD "add logical 64<32" z900 zarch
e3000000000b slg RXE_RRRD "subtract logical 64" z900 zarch
e3000000001b slgf RXE_RRRD "subtract logical 64<32" z900 zarch
e3000000000c msg RXE_RRRD "multiply single 64" z900 zarch
e3000000001c msgf RXE_RRRD "multiply single 64<32" z900 zarch
ec0000000044 brxhg RIE_RRP "branch relative on index high 64" z900 zarch
ec0000000045 brxlg RIE_RRP "branch relative on index low or equal 64" z900 zarch
eb0000000044 bxhg RSE_RRRD "branch on index high 64" z900 zarch
eb0000000045 bxleg RSE_RRRD "branch on index low or equal 64" z900 zarch
eb000000000c srlg RSE_RRRD "shift right single logical 64" z900 zarch
eb000000000d sllg RSE_RRRD "shift left single logical 64" z900 zarch
eb000000000a srag RSE_RRRD "shift right single 64" z900 zarch
eb000000000b slag RSE_RRRD "shift left single 64" z900 zarch
eb0000000024 stmg RSE_RRRD "store multiple 64" z900 zarch
eb0000000026 stmh RSE_RRRD "store multiple high" z900 zarch
eb0000000004 lmg RSE_RRRD "load multiple 64" z900 zarch
eb0000000096 lmh RSE_RRRD "load multiple high" z900 zarch
ef lmd SS_RRRDRD3 "load multiple disjoint" z900 zarch
eb000000000f tracg RSE_RRRD "trace 64" z900 zarch
e30000000003 lrag RXE_RRRD "load real address 64" z900 zarch
e50000000002 strag SSE_RDRD "store read address" z900 zarch
eb0000000025 stctg RSE_RRRD "store control 64" z900 zarch
eb000000002f lctlg RSE_RRRD "load control 64" z900 zarch
eb0000000030 csg RSE_RRRD "compare and swap 64" z900 zarch
eb000000003e cdsg RSE_RRRD "compare double and swap 64" z900 zarch
eb0000000020 clmh RSE_RURD "compare logical characters under mask high" z900 zarch
eb000000002c stcmh RSE_RURD "store characters under mask high" z900 zarch
eb0000000080 icmh RSE_RURD "insert characters under mask high" z900 zarch
a702 tmhh RI_RU "test under mask high high" z900 zarch
a703 tmhl RI_RU "test under mask high low" z900 zarch
c004 brcl RIL_UP "branch relative on condition long" z900 esa,zarch
c014 jgo RIL_0P "jump long on overflow / if ones" z900 esa,zarch
c024 jgh RIL_0P "jump long on high" z900 esa,zarch
c024 jgp RIL_0P "jump long on plus" z900 esa,zarch
c034 jgnle RIL_0P "jump long on not low or equal" z900 esa,zarch
c044 jgl RIL_0P "jump long on low" z900 esa,zarch
c044 jgm RIL_0P "jump long on minus / if mixed" z900 esa,zarch
c054 jgnhe RIL_0P "jump long on not high or equal" z900 esa,zarch
c064 jglh RIL_0P "jump long on low or high" z900 esa,zarch
c074 jgne RIL_0P "jump long on not equal" z900 esa,zarch
c074 jgnz RIL_0P "jump long on not zero / if not zeros" z900 esa,zarch
c084 jge RIL_0P "jump long on equal" z900 esa,zarch
c084 jgz RIL_0P "jump long on zero / if zeros" z900 esa,zarch
c094 jgnlh RIL_0P "jump long on not low or high" z900 esa,zarch
c0a4 jghe RIL_0P "jump long on high or equal" z900 esa,zarch
c0b4 jgnl RIL_0P "jump long on not low" z900 esa,zarch
c0b4 jgnm RIL_0P "jump long on not minus / if not mixed" z900 esa,zarch
c0c4 jgle RIL_0P "jump long on low or equal" z900 esa,zarch
c0d4 jgnh RIL_0P "jump long on not high" z900 esa,zarch
c0d4 jgnp RIL_0P "jump long on not plus" z900 esa,zarch
c0e4 jgno RIL_0P "jump long on not overflow / if not ones" z900 esa,zarch
c0f4 jg RIL_0P "jump long" z900 esa,zarch
c005 brasl RIL_RP "branch relative and save long" z900 esa,zarch
a707 brctg RI_RP "branch relative on count 64" z900 zarch
a709 lghi RI_RI "load halfword immediate 64" z900 zarch
a70b aghi RI_RI "add halfword immediate 64" z900 zarch
a70d mghi RI_RI "multiply halfword immediate 64" z900 zarch
a70f cghi RI_RI "compare halfword immediate 64" z900 zarch
b925 sturg RRE_RR "store using real address 64" z900 zarch
b90e eregg RRE_RR "extract stacked registers 64" z900 zarch
b905 lurag RRE_RR "load using real address 64" z900 zarch
b90c msgr RRE_RR "multiply single 64" z900 zarch
b91c msgfr RRE_RR "multiply single 64<32" z900 zarch
b3a4 cegbr RRE_RR "convert from fixed 64 to short bfp" z900 zarch
b3a5 cdgbr RRE_RR "convert from fixed 64 to long bfp" z900 zarch
b3a6 cxgbr RRE_RR "convert from fixed 64 to extended bfp" z900 zarch
b3a8 cgebr RRF_U0FR "convert to fixed short bfd to 64" z900 zarch
b3a9 cgdbr RRF_U0FR "convert to fixed long bfp to 64" z900 zarch
b3aa cgxbr RRF_U0FR "convert to fixed extended bfp to 64" z900 zarch
b3c4 cegr RRE_RR "convert from fixed 64 to short hfp" z900 zarch
b3c5 cdgr RRE_RR "convert from fixed 64 to long hfp" z900 zarch
b3c6 cxgr RRE_RR "convert from fixed 64 to extended hfp" z900 zarch
b3c8 cger RRF_U0FR "convert to fixed short hfp to 64" z900 zarch
b3c9 cgdr RRF_U0FR "convert to fixed long hfp to 64" z900 zarch
b3ca cgxr RRF_U0FR "convert to fixed extended hfp to 64" z900 zarch
010b tam E "test addressing mode" z900 esa,zarch
010c sam24 E "set addressing mode 24" z900 esa,zarch
010d sam31 E "set addressing mode 31" z900 esa,zarch
010e sam64 E "set addressing mode 64" z900 zarch
a500 iihh RI_RU "insert immediate high high" z900 zarch
a501 iihl RI_RU "insert immediate high low" z900 zarch
a502 iilh RI_RU "insert immediate low high" z900 zarch
a503 iill RI_RU "insert immediate low low" z900 zarch
a504 nihh RI_RU "and immediate high high" z900 zarch
a505 nihl RI_RU "and immediate high low" z900 zarch
a506 nilh RI_RU "and immediate low high" z900 zarch
a507 nill RI_RU "and immediate low low" z900 zarch
a508 oihh RI_RU "or immediate high high" z900 zarch
a509 oihl RI_RU "or immediate high low" z900 zarch
a50a oilh RI_RU "or immediate low high" z900 zarch
a50b oill RI_RU "or immediate low low" z900 zarch
a50c llihh RI_RU "load logical immediate high high" z900 zarch
a50d llihl RI_RU "load logical immediate high low" z900 zarch
a50e llilh RI_RU "load logical immediate low high" z900 zarch
a50f llill RI_RU "load logical immediate low low" z900 zarch
b2b1 stfl S_RD "store facility list" z900 esa,zarch
b2b2 lpswe S_RD "load psw extended" z900 zarch
b90d dsgr RRE_RR "divide single 64" z900 zarch
b90f lrvgr RRE_RR "load reversed 64" z900 zarch
b916 llgfr RRE_RR "load logical 64<32" z900 zarch
b917 llgtr RRE_RR "load logical thirty one bits" z900 zarch
b91d dsgfr RRE_RR "divide single 64<32" z900 zarch
b91f lrvr RRE_RR "load reversed 32" z900 esa,zarch
b986 mlgr RRE_RR "multiply logical 64" z900 zarch
b987 dlgr RRE_RR "divide logical 64" z900 zarch
b988 alcgr RRE_RR "add logical with carry 64" z900 zarch
b989 slbgr RRE_RR "subtract logical with borrow 64" z900 zarch
b98d epsw RRE_RR "extract psw" z900 esa,zarch
b996 mlr RRE_RR "multiply logical 32" z900 esa,zarch
b997 dlr RRE_RR "divide logical 32" z900 esa,zarch
b998 alcr RRE_RR "add logical with carry 32" z900 esa,zarch
b999 slbr RRE_RR "subtract logical with borrow 32" z900 esa,zarch
b99d esea RRE_R0 "extract and set extended authority" z900 zarch
c000 larl RIL_RP "load address relative long" z900 esa,zarch
e3000000000d dsg RXE_RRRD "divide single 64" z900 zarch
e3000000000f lrvg RXE_RRRD "load reversed 64" z900 zarch
e30000000016 llgf RXE_RRRD "load logical 64<32" z900 zarch
e30000000017 llgt RXE_RRRD "load logical thirty one bits" z900 zarch
e3000000001d dsgf RXE_RRRD "divide single 64<32" z900 zarch
e3000000001e lrv RXE_RRRD "load reversed 32" z900 esa,zarch
e3000000001f lrvh RXE_RRRD "load reversed 16" z900 esa,zarch
e3000000002f strvg RXE_RRRD "store reversed 64" z900 zarch
e3000000003e strv RXE_RRRD "store reversed 32" z900 esa,zarch
e3000000003f strvh RXE_RRRD "store reversed 64" z900 esa,zarch
e30000000086 mlg RXE_RRRD "multiply logical 64" z900 zarch
e30000000087 dlg RXE_RRRD "divide logical 64" z900 zarch
e30000000088 alcg RXE_RRRD "add logical with carry 64" z900 zarch
e30000000089 slbg RXE_RRRD "subtract logical with borrow 64" z900 zarch
e3000000008e stpq RXE_RRRD "store pair to quadword" z900 zarch
e3000000008f lpq RXE_RRRD "load pair from quadword" z900 zarch
e30000000096 ml RXE_RRRD "multiply logical 32" z900 esa,zarch
e30000000097 dl RXE_RRRD "divide logical 32" z900 esa,zarch
e30000000098 alc RXE_RRRD "add logical with carry 32" z900 esa,zarch
e30000000099 slb RXE_RRRD "subtract logical with borrow 32" z900 esa,zarch
e30000000090 llgc RXE_RRRD "load logical character" z900 zarch
e30000000091 llgh RXE_RRRD "load logical halfword" z900 zarch
eb000000001c rllg RSE_RRRD "rotate left single logical 64" z900 zarch
eb000000001d rll RSE_RRRD "rotate left single logical 32" z900 esa,zarch
@


1.6.22.2
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a111 2
25 ldxr RR_FF "load rounded (ext. to long)" g5 esa,zarch
35 ledr RR_FF "load rounded (long to short)" g5 esa,zarch
a120 1
7c mde RX_FRRD "multiply (short to long)" g5 esa,zarch
a121 1
3c mder RR_FF "multiply short to long hfp" g5 esa,zarch
a625 164
b369 cxr RRE_FF "compare extended hfp" g5 esa,zarch
b3b6 cxfr RRE_RF "convert from fixed 32 to extended hfp" g5 esa,zarch
b3b5 cdfr RRE_RF "convert from fixed 32 to long hfp" g5 esa,zarch
b3b4 cefr RRE_RF "convert from fixed 32 to short hfp" g5 esa,zarch
b3ba cfxr RRF_U0FR "convert to fixed extended hfp to 32" z900 zarch
b3b9 cfdr RRF_U0FR "convert to fixed long hfp to 32" z900 zarch
b3b8 cfer RRF_U0FR "convert to fixed short hfp to 32" z900 zarch
b362 ltxr RRE_FF "load and test extended hfp" g5 esa,zarch
b363 lcxr RRE_FF "load complement extended hfp" g5 esa,zarch
b367 fixr RRF_U0FF "load fp integer extended hfp" g5 esa,zarch
b37f fidr RRF_U0FF "load fp integer long hfp" g5 esa,zarch
b377 fier RRF_U0FF "load fp integer short hfp" g5 esa,zarch
b325 lxdr RRE_FF "load lengthened long to extended hfp" g5 esa,zarch
ed0000000025 lxd RXE_FRRD "load lengthened long to extended hfp" g5 esa,zarch
b326 lxer RRE_FF "load lengthened short to extended hfp" g5 esa,zarch
ed0000000026 lxe RXE_FRRD "load lengthened short to extended hfp" g5 esa,zarch
b324 lder RRE_FF "load lengthened short to long hfp" g5 esa,zarch
ed0000000024 lde RXE_FRRD "load lengthened short to long hfp" g5 esa,zarch
b361 lnxr RRE_FF "load negative long hfp" g5 esa,zarch
b360 lpxr RRE_FF "load positive long hfp" g5 esa,zarch
b366 lexr RRE_FF "load rounded extended to short hfp" g5 esa,zarch
35 ledr RR_FF "load rounded long to short hfp" g5 esa,zarch
b337 meer RRE_FF "multiply short hfp" g5 esa,zarch
ed0000000037 mee RXE_FRRD "multiply short hfp" g5 esa,zarch
b336 sqxr RRE_FF "square root extended hfp" g5 esa,zarch
ed0000000034 sqe RXE_FRRD "square root short hfp" g5 esa,zarch
b263 cmpsc RRE_RR "compression call" g5 esa,zarch
eb00000000c0 tp RSL_R0RD "test decimal" g5 esa,zarch
b365 lxr RRE_RR "load extended hfp" g5 esa,zarch
b22e pgin RRE_RR "page in" g5 esa,zarch
b22f pgout RRE_RR "page out" g5 esa,zarch
b276 xsch S_00 "cancel subchannel" g5 esa,zarch
# New long displacement instructions on z990
e3000000005a ay RXY_RRRD "add with long offset" z990 zarch
e3000000007a ahy RXY_RRRD "add halfword with long offset" z990 zarch
e3000000005e aly RXY_RRRD "add logical with long offset" z990 zarch
eb0000000054 niy SIY_URD "and immediate with long offset" z990 zarch
e30000000054 ny RXY_RRRD "and with long offset" z990 zarch
e30000000059 cy RXY_RRRD "compare with long offset" z990 zarch
eb0000000014 csy RSY_RRRD "compare and swap with long offset" z990 zarch
eb0000000031 cdsy RSY_RRRD "compare double and swap with long offset" z990 zarch
e30000000079 chy RXY_RRRD "compare halfword with long offset" z990 zarch
e30000000055 cly RXY_RRRD "compare logical with long offset" z990 zarch
eb0000000055 cliy SIY_URD "compare logical immediate with long offset" z990 zarch
eb0000000021 clmy RSY_RURD "compare logical characters under mask with long offset" z990 zarch
e30000000006 cvby RXY_RRRD "convert to binary with long offset" z990 zarch
e30000000026 cvdy RXY_RRRD "convert to decimal with long offset" z990 zarch
eb0000000057 xiy SIY_URD "exclusive or immediate with long offset" z990 zarch
e30000000057 xy RXY_RRRD "exclusive or with long offset" z990 zarch
e30000000073 icy RXY_RRRD "insert character with long offset" z990 zarch
eb0000000081 icmy RSY_RURD "insert characters with long offset" z990 zarch
ed0000000065 ldy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000064 ley RXY_FRRD "load (short) with long offset" z990 zarch
e30000000058 ly RXY_RRRD "load with long offset" z990 zarch
eb000000009a lamy RSY_AARD "load access multiple" z990 zarch
e30000000071 lay RXY_RRRD "load address with long offset" z990 zarch
e30000000076 lb RXY_RRRD "load byte with long offset" z990 zarch
e30000000077 lgb RXY_RRRD "load byte with long offset 64" z990 zarch
e30000000078 lhy RXY_RRRD "load halfword with long offset" z990 zarch
eb0000000098 lmy RSY_RRRD "load multiple with long offset" z990 zarch
e30000000013 lray RXY_RRRD "load real address with long offset" z990 zarch
eb0000000052 mviy SIY_URD "move immediate with long offset" z990 zarch
e30000000051 msy RXY_RRRD "multiply single with long offset" z990 zarch
eb0000000056 oiy SIY_URD "or immediate with long offset" z990 zarch
e30000000056 oy RXY_RRRD "or with long offset" z990 zarch
ed0000000067 stdy RXY_FRRD "load (long) with long offset" z990 zarch
ed0000000066 stey RXY_FRRD "load (short) with long offset" z990 zarch
e30000000050 sty RXY_RRRD "store with long offset" z990 zarch
eb000000009b stamy RSY_AARD "store access multiple with long offset" z990 zarch
e30000000072 stcy RXY_RRRD "store character with long offset" z990 zarch
eb000000002d stcmy RSY_RURD "store characters under mask with long offset" z990 zarch
e30000000070 sthy RXY_RRRD "store halfword with long offset" z990 zarch
eb0000000090 stmy RSY_RRRD "store multiple with long offset" z990 zarch
e3000000005b sy RXY_RRRD "subtract with long offset" z990 zarch
e3000000007b shy RXY_RRRD "subtract halfword with long offset" z990 zarch
e3000000005f sly RXY_RRRD "subtract logical with long offset" z990 zarch
eb0000000051 tmy SIY_URD "test under mask with long offset" z990 zarch
# 'old' instructions extended to long displacement
# these instructions are entered into the opcode table twice.
e30000000003 lrag RXY_RRRD "load real address with long offset 64" z990 zarch
e30000000004 lg RXY_RRRD "	 load 64" z990 zarch
e30000000008 ag RXY_RRRD "add with long offset 64" z990 zarch
e30000000009 sg RXY_RRRD "subtract with long offset 64" z990 zarch
e3000000000a alg RXY_RRRD "add logical with long offset 64" z990 zarch
e3000000000b slg RXY_RRRD "subtract logical with long offset 64" z990 zarch
e3000000000c msg RXY_RRRD "multiply single with long offset 64" z990 zarch
e3000000000d dsg RXY_RRRD "divide single 64" z990 zarch
e3000000000e cvbg RXY_RRRD "convert to binary with long offset 64" z990 zarch
e3000000000f lrvg RXY_RRRD "load reversed 64" z990 zarch
e30000000014 lgf RXY_RRRD "load 64<32" z990 zarch
e30000000015 lgh RXY_RRRD "load halfword 64" z990 zarch
e30000000016 llgf RXY_RRRD "load logical 64<32" z990 zarch
e30000000017 llgt RXY_RRRD "load logical thirty one bits" z990 zarch
e30000000018 agf RXY_RRRD "add with long offset 64<32" z990 zarch
e30000000019 sgf RXY_RRRD "subtract with long offset 64<32" z990 zarch
e3000000001a algf RXY_RRRD "add logical with long offset 64<32" z990 zarch
e3000000001b slgf RXY_RRRD "subtract logical with long offset 64<32" z990 zarch
e3000000001c msgf RXY_RRRD "multiply single with long offset 64<32" z990 zarch
e3000000001d dsgf RXY_RRRD "divide single 64<32" z990 zarch
e3000000001e lrv RXY_RRRD "load reversed 32" z990 zarch
e3000000001f lrvh RXY_RRRD "load reversed 16" z990 zarch
e30000000020 cg RXY_RRRD "compare with long offset 64" z990 zarch
e30000000021 clg RXY_RRRD "compare logical with long offset 64" z990 zarch
e30000000024 stg RXY_RRRD "store with long offset 64" z990 zarch
e3000000002e cvdg RXY_RRRD "convert to decimal with long offset 64" z990 zarch
e3000000002f strvg RXY_RRRD "store reversed 64" z990 zarch
e30000000030 cgf RXY_RRRD "compare with long offset 64<32" z990 zarch
e30000000031 clgf RXY_RRRD "compare logical with long offset 64<32" z990 zarch
e3000000003e strv RXY_RRRD "store reversed 32" z990 zarch
e3000000003f strvh RXY_RRRD "store reversed 64" z990 zarch
e30000000046 bctg RXY_RRRD "branch on count 64" z990 zarch
e30000000080 ng RXY_RRRD "and with long offset 64" z990 zarch
e30000000081 og RXY_RRRD "or with long offset 64" z990 zarch
e30000000082 xg RXY_RRRD "exclusive or with long offset 64" z990 zarch
e30000000086 mlg RXY_RRRD "multiply logical 64" z990 zarch
e30000000087 dlg RXY_RRRD "divide logical 64" z990 zarch
e30000000088 alcg RXY_RRRD "add logical with carry 64" z990 zarch
e30000000089 slbg RXY_RRRD "subtract logical with borrow 64" z990 zarch
e3000000008e stpq RXY_RRRD "store pair to quadword" z990 zarch
e3000000008f lpq RXY_RRRD "load pair from quadword" z990 zarch
e30000000090 llgc RXY_RRRD "load logical character" z990 zarch
e30000000091 llgh RXY_RRRD "load logical halfword" z990 zarch
e30000000096 ml RXY_RRRD "multiply logical 32" z990 zarch
e30000000097 dl RXY_RRRD "divide logical 32" z990 zarch
e30000000098 alc RXY_RRRD "add logical with carry 32" z990 zarch
e30000000099 slb RXY_RRRD "subtract logical with borrow 32" z990 zarch
eb0000000004 lmg RSY_RRRD "load multiple with long offset 64" z990 zarch
eb000000000a srag RSY_RRRD "shift right single 64" z990 zarch
eb000000000b slag RSY_RRRD "shift left single 64" z990 zarch
eb000000000c srlg RSY_RRRD "shift right single logical 64" z990 zarch
eb000000000d sllg RSY_RRRD "shift left single logical 64" z990 zarch
eb000000000f tracg RSY_RRRD "trace 64" z990 zarch
eb000000001c rllg RSY_RRRD "rotate left single logical 64" z990 zarch
eb000000001d rll RSY_RRRD "rotate left single logical 32" z990 zarch
eb0000000020 clmh RSY_RURD "compare logical characters under mask high with long offset" z990 zarch
eb0000000024 stmg RSY_RRRD "store multiple with long offset 64" z990 zarch
eb0000000025 stctg RSY_RRRD "store control 64" z990 zarch
eb0000000026 stmh RSY_RRRD "store multiple high" z990 zarch
eb000000002c stcmh RSY_RURD "store characters under mask high with long offset" z990 zarch
eb000000002f lctlg RSY_RRRD "load control 64" z990 zarch
eb0000000030 csg RSY_RRRD "compare and swap with long offset 64" z990 zarch
eb000000003e cdsg RSY_RRRD "compare double and swap with long offset 64" z990 zarch
eb0000000044 bxhg RSY_RRRD "branch on index high 64" z990 zarch
eb0000000045 bxleg RSY_RRRD "branch on index low or equal 64" z990 zarch
eb0000000080 icmh RSY_RURD "insert characters under mask high with long offset" z990 zarch
eb000000008e mvclu RSY_RRRD "move long unicode" z990 zarch
eb000000008f clclu RSY_RRRD "compare logical long unicode with long offset" z990 zarch
eb0000000096 lmh RSY_RRRD "load multiple high" z990 zarch
# new z990 instructions
b98a cspg RRE_RR "compare and swap and purge" z990 zarch
b98e idte RRF_R0RR "invalidate dat table entry" z990 zarch
b33e madr RRF_F0FF "multiply and add long hfp" z990 esa,zarch
ed000000003e mad RXF_FRRDF "multiply and add long hfp" z990 esa,zarch
b32e maer RRF_F0FF "multiply and add short hfp" z990 esa,zarch
ed000000002e mae RXF_FRRDF "multiply and add shoft hfp" z990 esa,zarch
b33f msdr RRF_F0FF "multiply and subtract long hfp" z990 esa,zarch
ed000000003f msd RXF_FRRDF "multiply and subtract long hfp" z990 esa,zarch
b32f mser RRF_F0FF "mutliply and subtract short hfp" z990 esa,zarch
ed000000002f mse RXF_FRRDF "multiply and subttract short hfp" z990 esa,zarch
b92e km RRE_RR "cipher message" z990 esa,zarch
b92f kmc RRE_RR "cipher message with chaining" z990 esa,zarch
b93e kimd RRE_RR "compute intermediate message digest" z990 esa,zarch
b93f klmd RRE_RR "compute last message digest" z990 esa,zarch
b91e kmac RRE_RR "compute message authentication code" z990 esa,zarch
@


1.5
log
@	* opcodes/s390-opc.c: Add "low or high" and "not low or high"
	branch instructions for gcc 3.0.
	* opcodes/s390-opc.txt: Likewise.
@
text
@d4 63
a66 63
5a a RX "add" esa
6a ad RX_D "add normalized (long)" esa
2a adr RR_D "add normalized (long)" esa
7a ae RX_E "add normalized (short)" esa
3a aer RR_E "add normalized (short)" esa
4a ah RX "add halfword" esa
5e al RX "add logical" esa
1e alr RR "add logical" esa
fa ap SS_LL "add decimal" esa
1a ar RR "add" esa
7e au RX_E "add unnormalized (short)" esa
3e aur RR_E "add unnormalized (short)" esa
6e aw RX_D "add unnormalized (long)" esa
2e awr RR_D "add unnormalized (long)" esa
36 axr RR "add normalized" esa
b240 bakr RRE "branch and stack" esa
45 bal RX "branch and link" esa
05 balr RR "branch and link" esa
4d bas RX "branch and save" esa
0d basr RR "branch and save" esa
0c bassm RR "branch and save and set mode" esa
47 bc RX_M "branch on condition" esa
07 bcr RR_M "branch on condition" esa
46 bct RX "branch on count" esa
06 bctr RR "branch on count" esa
b258 bsg RRE "branch in subspace group" esa
0b bsm RR "branch and set mode" esa
86 bxh RS "branch on index high" esa
87 bxle RS "branch on index low or equal" esa
59 c RX "compare" esa
69 cd RX_D "compare (long)" esa
29 cdr RR_D "compare (long)" esa
bb cds RS "compare double and swap" esa
79 ce RX_E "compare (short)" esa
39 cer RR_E "compare (short)" esa
b21a cfc S "compare and form codeword" esa
49 ch RX "compare halfword" esa
55 cl RX "compare logical" esa
d5 clc SS_L "compare logical" esa
0f clcl RR "compare logical long" esa
95 cli SI "compare logical" esa
bd clm RS_M "compare logical characters under mask" esa
15 clr RR "compare logical" esa
b25d clst RRE "compare logical string" esa
b263 cmpsc RRE "compression call" esa
f9 cp SS_LL "compare decimal" esa
b24d cpya RRE_A "copy access" esa
19 cr RR "compare" esa
ba cs RS "compare and swap" esa
b230 csch S_O "clear subchannel" esa
b257 cuse RRE "compare until substring equal" esa
b250 csp RRE "compare and swap and purge" esa
4f cvb RX "convert to binary" esa
4e cvd RX "convert to decimal" esa
5d d RX "divide" esa
6d dd RX_D "divide (long)" esa
2d ddr RR_D "divide (long)" esa
7d de RX_E "divide (short)" esa
3d der RR_E "divide (short)" esa
83 diag RS "diagnose" esa
fd dp SS_LL "divide decimal" esa
1d dr RR "divide" esa
b22d dxr RRE_X "divide (ext.)" esa
d68 87
a154 87
de ed SS_L "edit" esa
df edmk SS_L "edit and mark" esa
b226 epar RRE_R "extract primary ASN" esa
b249 ereg RRE "extract stacked registers" esa
b227 esar RRE_R "extract secondary ASN" esa
b24a esta RRE "extract stacked state" esa
44 ex RX "execute" esa
24 hdr RR_D "halve (long)" esa
34 her RR_E "halve (short)" esa
b231 hsch S_O "halt subchannel" esa
b224 iac RRE_R "insert address space control" esa
43 ic RX "insert character" esa
bf icm RS_M "insert characters under mask" esa
b20b ipk S_O "insert PSW key" esa
b222 ipm RRE_R "insert program mask" esa
b221 ipte RRE "invalidate page table entry" esa
b229 iske RRE "insert storage key extended" esa
b223 ivsk RRE "insert virtual storage key" esa
58 l RX "load" esa
41 la RX "load address" esa
51 lae RX "load address extended" esa
9a lam RS_A "load access multiple" esa
e500 lasp SSE "load address space parameters" esa
23 lcdr RR_D "load complement (long)" esa
33 lcer RR_E "load complement (short)" esa
13 lcr RR "load complement" esa
b7 lctl RS_C "load control" esa
68 ld RX_D "load (long)" esa
28 ldr RR_D "load (long)" esa
78 le RX_E "load (short)" esa
38 ler RR_E "load (short)" esa
48 lh RX "load halfword" esa
98 lm RS "load multiple" esa
21 lndr RR_D "load negative (long)" esa
31 lner RR_E "load negative (short)" esa
11 lnr RR "load negative" esa
20 lpdr RR_D "load positive (long)" esa
30 lper RR_E "load positive (short)" esa
10 lpr RR "load positive" esa
82 lpsw S "load PSW" esa
18 lr RR "load" esa
b1 lra RX "load real address" esa
25 lrdr RR_XD "load rounded (ext. to long)" esa
35 lrer RR_DE "load rounded (long to short)" esa
22 ltdr RR_D "load and test (long)" esa
32 lter RR_E "load and test (short)" esa
12 ltr RR "load and test" esa
b24b lura RRE "load using real address" esa
5c m RX "multiply" esa
af mc SI "monitor call" esa
6c md RX_D "multiply (long)" esa
2c mdr RR_D "multiply (long)" esa
7c me RX_ED "multiply (short to long)" esa
3c mer RR_ED "multiply (short to long)" esa
4c mh RX "multiply halfword" esa
fc mp SS_LL "multiply decimal" esa
1c mr RR "multiply" esa
b232 msch S "modify subchannel" esa
b247 msta RRE_R "modify stacked state" esa
d2 mvc SS_L "move" esa
e50f mvcdk SSE "move with destination key" esa
e8 mvcin SS_L "move inverse" esa
d9 mvck SS_RR "move with key" esa
0e mvcl RR "move long" esa
da mvcp SS_RR "move to primary" esa
db mvcs SS_RR "move to secondary" esa
e50e mvcsk SSE "move with source key" esa
92 mvi SI "move" esa
d1 mvn SS_L "move numerics" esa
f1 mvo SS_LL "move with offset" esa
b254 mvpg RRE "move page" esa
b255 mvst RRE "move string" esa
d3 mvz SS_L "move zones" esa
67 mxd RX_DX "multiply (long to ext.)" esa
27 mxdr RR_DX "multiply (long to ext.)" esa
26 mxr RR_X "multiply (ext.)" esa
54 n RX "AND" esa
d4 nc SS_L "AND" esa
94 ni SI "AND" esa
14 nr RR "AND" esa
56 o RX "OR" esa
d6 oc SS_L "OR" esa
96 oi SI "OR" esa
16 or RR "OR" esa
f2 pack SS_LL "pack" esa
b248 palb RRE_O "purge ALB" esa
b218 pc S "program call" esa
d156 9
a164 9
b228 pt RRE "program transfer" esa
b20d ptlb S_O "purge TLB" esa
b23b rchp S_O "reset channel path" esa
b22a rrbe RRE "reset reference bit extended" esa
b238 rsch S_O "resume subchannel" esa
5b s RX "subtract" esa
b219 sac S "set address space control" esa
b279 sacf S "set address space control fast" esa
b237 sal S_O "set address limit" esa
d166 61
a226 61
b23c schm S_O "set channel monitor" esa
b204 sck S "set clock" esa
b206 sckc S "set clock comparator" esa
6b sd RX_D "subtract normalized (long)" esa
2b sdr RR_D "subtract normalized (long)" esa
7b se RX_E "subtract normalized (short)" esa
3b ser RR_E "subtract normalized (short)" esa
4b sh RX "subtract halfword" esa
b214 sie S "start interpretive execution" esa
ae sigp RS "signal processor" esa
5f sl RX "subtract logical" esa
8b sla RS_S "shift left single" esa
8f slda RS_D "shift left double (long)" esa
8d sldl RS_D "shift left double logical (long)" esa
89 sll RS_S "shift left single logical" esa
1f slr RR "subtract logical" esa
fb sp SS_LL "subtract decimal" esa
b20a spka S "set PSW key from address" esa
04 spm RR_R "set program mask" esa
b208 spt S "set CPU timer" esa
b210 spx S "set prefix" esa
b244 sqdr RRE_D "square root (long)" esa
b245 sqer RRE_E "square root (short)" esa
1b sr RR "subtract" esa
8a sra RS_S "shift right single" esa
8e srda RS_D "shift right double (long)" esa
8c srdl RS_D "shift right double logical (long)" esa
88 srl RS_S "shift right single logical" esa
f0 srp SS_LI "shift and round decimal" esa
b25e srst RRE "search string" esa
b225 ssar RRE_R "set secondary ASN" esa
b233 ssch S "start subchannel" esa
b22b sske RRE "set storage key extended" esa
80 ssm S "set system mask" esa
50 st RX "store" esa
9b stam RS_A "store access multiple" esa
b212 stap S "store CPU address" esa
42 stc RX "store character" esa
b205 stck S "store clock" esa
b207 stckc S "store clock comparator" esa
be stcm RS_M "store characters under mask" esa
b23a stcps S "store channel path status" esa
b239 stcrw S "store channel report word" esa
b6 stctl RS_C "store control" esa
60 std RX_D "store (long)" esa
70 ste RX_E "store (short)" esa
40 sth RX "store halfword" esa
b202 stidp S "store CPU id" esa
90 stm RS "store multiple" esa
ac stnsm SI "store then AND system mask" esa
ad stosm SI "store then OR system mask" esa
b209 stpt S "store CPU timer" esa
b211 stpx S "store prefix" esa
b234 stsch S "store subchannel" esa
b246 stura RRE "store using real address" esa
7f su RX_E "subtract unnormalized (short)" esa
3f sur RR_E "subtract unnormalized (short)" esa
0a svc RR_I "supervisor call" esa
6f sw RX_D "subtract unnormalized (long)" esa
2f swr RR_D "subtract unnormalized (long)" esa
37 sxr RR_X "subtract normalized (ext.)" esa
d228 10
a237 10
b22c tb RRE_R2 "test block" esa
91 tm SI "test under mask" esa
b236 tpi S "test pending interruption" esa
e501 tprot SSE "test protection" esa
dc tr SS_L "translate" esa
99 trace RS "trace" esa
dd trt SS_L "translate and test" esa
93 ts S "test and set" esa
b235 tsch S "test subchannel" esa
f3 unpk SS_LL "unpack" esa
d239 174
a412 174
57 x RX "exclusive OR" esa
d7 xc SS_L "exclusive OR" esa
97 xi SI "exclusive OR" esa
17 xr RR "exclusive OR" esa
f8 zap SS_LL "zero and add" esa
a70a ahi RI "add halfword immediate" esa
84 brxh RSI_A "branch relative on index high" esa
85 brxle RSI_A "branch relative on index low or equal" esa
a705 bras RI_A "branch relative and save" esa
a704 brc RI_MA "branch relative on condition" esa
a706 brct RI_A "branch relative on count" esa
b241 cksm RRE "checksum" esa
a70e chi RI "compare halfword immediate" esa
a9 clcle RS "compare logical long extended" esa
a708 lhi RI "load halfword immediate" esa
a8 mvcle RS "move long extended" esa
a70c mhi RI "multiply halfword immediate" esa
b252 msr RRE "multiply single" esa
71 ms RX "multiply single" esa
a700 tmh RI_U "test under mask high" esa
a701 tml RI_U "test under mask low" esa
0700 nopr RR_B "no operation" esa
0710 bor RR_B "branch on overflow / if ones" esa
0720 bhr RR_B "branch on high" esa
0720 bpr RR_B "branch on plus" esa
0730 bnler RR_B "branch on not low or equal" esa
0740 blr RR_B "branch on low" esa
0740 bmr RR_B "branch on minus / if mixed" esa
0750 bnher RR_B "branch on not high or equal" esa
0760 blhr RR_B "branch on low or high" esa
0770 bner RR_B "branch on not equal" esa
0770 bnzr RR_B "branch on not zero / if not zeros" esa
0780 ber RR_B "branch on equal" esa
0780 bzr RR_B "branch on zero / if zeros" esa
0790 bnlhr RR_B "branch on not low or high" esa
07a0 bher RR_B "branch on high or equal" esa
07b0 bnlr RR_B "branch on not low" esa
07b0 bnmr RR_B "branch on not minus / if not mixed" esa
07c0 bler RR_B "brach on low or equal" esa
07d0 bnhr RR_B "branch on not high" esa
07d0 bnpr RR_B "branch on not plus" esa
07e0 bnor RR_B "branch on not overflow / if not ones" esa
07f0 br RR_B "unconditional branch" esa
4700 nop RX_B "no operation" esa
4710 bo RX_B "branch on overflow / if ones" esa
4720 bh RX_B "branch on high" esa
4720 bp RX_B "branch on plus" esa
4730 bnle RX_B "branch on not low or equal" esa
4740 bl RX_B "branch on low" esa
4740 bm RX_B "branch on minus / if mixed" esa
4750 bnhe RX_B "branch on not high or equal" esa
4760 blh RX_B "branch on low or high" esa
4770 bne RX_B "branch on not equal" esa
4770 bnz RX_B "branch on not zero / if not zeros" esa
4780 be RX_B "branch on equal" esa
4780 bz RX_B "branch on zero / if zeros" esa
4790 bnlh RX_B "branch on not low or high" esa
47a0 bhe RX_B "branch on high or equal" esa
47b0 bnl RX_B "branch on not low" esa
47b0 bnm RX_B "branch on not minus / if not mixed" esa
47c0 ble RX_B "branch on low or equal" esa
47d0 bnh RX_B "branch on not high" esa
47d0 bnp RX_B "branch on not plus" esa
47e0 bno RX_B "branch on not overflow / if not ones" esa
47f0 b RX_B "unconditional branch" esa
a714 jo RI_B "jump on overflow / if ones" esa
a724 jh RI_B "jump on A high" esa
a724 jp RI_B "jump on plus" esa
a734 jnle RI_B "jump on not low or equal" esa
a744 jl RI_B "jump on A low" esa
a744 jm RI_B "jump on minus / if mixed" esa
a754 jnhe RI_B "jump on not high or equal" esa
a764 jlh RI_B "jump on low or high" esa
a774 jne RI_B "jump on A not equal B" esa
a774 jnz RI_B "jump on not zero / if not zeros" esa
a784 je RI_B "jump on A equal B" esa
a784 jz RI_B "jump on zero / if zeros" esa
a794 jnlh RI_B "jump on not low or high" esa
a7a4 jhe RI_B "jump on high or equal" esa
a7b4 jnl RI_B "jump on A not low" esa
a7b4 jnm RI_B "jump on not minus / if not mixed" esa
a7c4 jle RI_B "jump on low or equal" esa
a7d4 jnh RI_B "jump on A not high" esa
a7d4 jnp RI_B "jump on not plus" esa
a7e4 jno RI_B "jump on not overflow / if not ones" esa
a7f4 j RI_B "jump" esa
b34a axbr RRE_F "add extended bfp" esa
b31a adbr RRE_F "add long bfp" esa
ed000000001a adb RXE_F "add long bfp" esa
b30a aebr RRE_F "add short bfp" esa
ed000000000a aeb RXE_F "add short bfp" esa
b349 cxbr RRE_F "compare extended bfp" esa
b319 cdbr RRE_F "compare long bfp" esa
ed0000000019 cdb RXE_F "compare long bfp" esa
b309 cebr RRE_F "compare short bfp" esa
ed0000000009 ceb RXE_F "compare short bfp" esa
b348 kxbr RRE_F "compare and signal extended bfp" esa
b318 kdbr RRE_F "compare and signal long bfp" esa
ed0000000018 kdb RXE_F "compare and signal long bfp" esa
b308 kebr RRE_F "compare and signal short bfp" esa
ed0000000008 keb RXE_F "compare and signal short bfp" esa
b396 cxfbr RRE_F "convert from fixed 32 to extended bfp" esa
b395 cdfbr RRE_F "convert from fixed 32 to long bfp" esa
b394 cefbr RRE_F "convert from fixed 32 to short bfp" esa
b39a cfxbr RRF_M "convert to fixed extended bfp to 32" esa
b399 cfdbr RRF_M "convert to fixed long bfp to 32" esa
b398 cfebr RRF_M "convert to fixed short bfp to 32" esa
b34d dxbr RRE_F "divide extended bfp" esa
b31d ddbr RRE_F "divide long bfp" esa
ed000000001d ddb RXE_F "divide long bfp" esa
b30d debr RRE_F "divide short bfp" esa
ed000000000d deb RXE_F "divide short bfp" esa
b35b didbr RRF_RM "divide to integer long bfp" esa
b353 diebr RRF_RM "divide to integer short bfp" esa
b38c efpc RRE "extract fpc" esa
b342 ltxbr RRE_F "load and test extended bfp" esa
b312 ltdbr RRE_F "load and test long bfp" esa
b302 ltebr RRE_F "load and test short bfp" esa
b343 lcxbr RRE_F "load complement extended bfp" esa
b313 lcdbr RRE_F "load complement long bfp" esa
b303 lcebr RRE_F "load complement short bfp" esa
b347 fixbr RRF_M "load fp integer extended bfp" esa
b35f fidbr RRF_M "load fp integer long bfp" esa
b357 fiebr RRF_M "load fp integer short bfp" esa
b29d lfpc S "load fpc" esa
b305 lxdbr RRE_F "load lengthened long to extended bfp" esa
ed0000000005 lxdb RXE_F "load lengthened long to extended bfp" esa
b306 lxebr RRE_F "load lengthened short to extended bfp" esa
ed0000000006 lxeb RXE_F "load lengthened short to extended bfp" esa
b304 ldebr RRE_F "load lengthened short to long bfp" esa
ed0000000004 ldeb RXE_F "load lengthened short to long bfp" esa
b341 lnxbr RRE_F "load negative extended bfp" esa
b311 lndbr RRE_F "load negative long bfp" esa
b301 lnebr RRE_F "load negative short bfp" esa
b340 lpxbr RRE_F "load positive extended bfp" esa
b310 lpdbr RRE_F "load positive long bfp" esa
b300 lpebr RRE_F "load positive short bfp" esa
b345 ldxbr RRE_F "load rounded extended to long bfp" esa
b346 lexbr RRE_F "load rounded extended to short bfp" esa
b344 ledbr RRE_F "load rounded long to short bfp" esa
b34c mxbr RRE_F "multiply extended bfp" esa
b31c mdbr RRE_F "multiply long bfp" esa
ed000000001c mdb RXE_F "multiply long bfp" esa
b307 mxdbr RRE_F "multiply long to extended bfp" esa
ed0000000007 mxdb RXE_F "multiply long to extended bfp" esa
b317 meebr RRE_F "multiply short bfp" esa
ed0000000017 meeb RXE_F "multiply short bfp" esa
b30c mdebr RRE_F "multiply short to long bfp" esa
ed000000000c mdeb RXE_F "multiply short to long bfp" esa
b31e madbr RRF_R "multiply and add long bfp" esa
ed000000001e madb RXF "multiply and add long bfp" esa
b30e maebr RRF_R "multiply and add short bfp" esa
ed000000000e maeb RXF "multiply and add short bfp" esa
b31f msdbr RRF_R "multiply and subtract long bfp" esa
ed000000001f msdb RXF "multiply and subtract long bfp" esa
b30f msebr RRF_R "multiply and subtract short bfp" esa
ed000000000f mseb RXF "multiply and subtract short bfp" esa
b384 sfpc RRE "set fpc" esa
b299 srnm S "set rounding mode" esa
b316 sqxbr RRE_F "square root extended bfp" esa
b315 sqdbr RRE_F "square root long bfp" esa
ed0000000015 sqdb RXE_F "square root long bfp" esa
b314 sqebr RRE_F "square root short bfp" esa
ed0000000014 sqeb RXE_F "square root short bfp" esa
b29c stfpc S "store fpc" esa
b34b sxbr RRE_F "subtract extended bfp" esa
b31b sdbr RRE_F "subtract long bfp" esa
ed000000001b sdb RXE_F "subtract long bfp" esa
b30b sebr RRE_F "subtract short bfp" esa
ed000000000b seb RXE_F "subtract short bfp" esa
ed0000000012 tcxb RXE_F "test data class extended bfp" esa
ed0000000011 tcdb RXE_F "test data class long bfp" esa
ed0000000010 tceb RXE_F "test data class short bfp" esa
b274 siga S "signal adapter" esa
d414 5
a418 5
b2a6 cuutf RRE "convert unicode to utf-8" esa
b2a7 cutfu RRE "convert utf-8 to unicode" esa
ee plo SS_PLO "perform locked operation" esa
b25a bsa RRE "branch and set authority" esa
b277 rp S "resume program" esa
d420 1
a420 1
b27d stsi S "store system information" esa
d422 1
a422 1
b2ff trap4 S "trap4" esa
d424 122
a545 122
b946 bctgr RRE "branch on count 64" esame
b900 lpgr RRE "load positive 64" esame
b910 lpgfr RRE "load positive 64<32" esame
b901 lngr RRE "load negative 64" esame
b911 lngfr RRE "load negative 64<32" esame
b902 ltgr RRE "load and test 64" esame
b912 ltgfr RRE "load and test 64<32" esame
b903 lcgr RRE "load complement 64" esame
b913 lcgfr RRE "load complement 64<32" esame
b980 ngr RRE "and 64" esame
b921 clgr RRE "compare logical 64" esame
b931 clgfr RRE "compare logical 64<32" esame
b981 ogr RRE "or 64" esame
b982 xgr RRE "exclusive or 64" esame
b904 lgr RRE "load 64" esame
b914 lgfr RRE "load 64<32" esame
b920 cgr RRE "compare 64" esame
b930 cgfr RRE "compare 64<32" esame
b908 agr RRE "add 64" esame
b918 agfr RRE "add 64<32" esame
b909 sgr RRE "subtract 64" esame
b919 sgfr RRE "subtract 64<32" esame
b90a algr RRE "add logical 64" esame
b91a algfr RRE "add logical 64<32" esame
b90b slgr RRE "subtract logical 64" esame
b91b slgfr RRE "subtract logical 64<32" esame
e30000000046 bctg RXE "branch on count 64" esame
e3000000002e cvdg RXE "convert to decimal 64" esame
e3000000000e cvbg RXE "convert to binary 64" esame
e30000000024 stg RXE "store 64" esame
e30000000080 ng RXE "and 64" esame
e30000000021 clg RXE "compare logical 64" esame
e30000000031 clgf RXE "comparee logical 64<32" esame
e30000000081 og RXE "or 64" esame
e30000000082 xg RXE "exclusive or 64" esame
e30000000004 lg RXE "load 64" esame
e30000000014 lgf RXE "load 64<32" esame
e30000000015 lgh RXE "load halfword 64" esame
e30000000020 cg RXE "compare 64" esame
e30000000030 cgf RXE "compare 64<32" esame
e30000000008 ag RXE "add 64" esame
e30000000018 agf RXE "add 64<32" esame
e30000000009 sg RXE "subtract 64" esame
e30000000019 sgf RXE "subtract 64<32" esame
e3000000000a alg RXE "add logical 64" esame
e3000000001a algf RXE "add logical 64<32" esame
e3000000000b slg RXE "subtract logical 64" esame
e3000000001b slgf RXE "subtract logical 64<32" esame
e3000000000c msg RXE "multiply single 64" esame
e3000000001c msgf RXE "multiply single 64<32" esame
ec0000000044 brxhg RIE_A "branch relative on index high 64" esame
ec0000000045 brxlg RIE_A "branch relative on index low or equal 64" esame
eb0000000044 bxhg RSE_R "branch on index high 64" esame
eb0000000045 bxleg RSE_R "branch on index low or equal 64" esame
eb000000000c srlg RSE_R "shift right single logical 64" esame
eb000000000d sllg RSE_R "shift left single logical 64" esame
eb000000000a srag RSE_R "shift right single 64" esame
eb000000000b slag RSE_R "shift left single 64" esame
eb0000000024 stmg RSE_R "store multiple 64" esame
eb0000000026 stmh RSE_R "store multiple high" esame
eb0000000004 lmg RSE_R "load multiple 64" esame
eb0000000096 lmh RSE_R "load multiple high" esame
ef lmd SS_LMD "load multiple disjoint" esame
eb000000000f tracg RSE_R "trace 64" esame
e30000000003 lrag RXE "load real address 64" esame
e50000000002 strag SSE "store read address" esame
eb0000000025 stctg RSE_R "store control 64" esame
eb000000002f lctlg RSE_R "load control 64" esame
eb0000000030 csg RSE_R "compare and swap 64" esame
eb000000003e cdsg RSE_R "compare double and swap 64" esame
eb0000000020 clmh RSE_M "compare logical characters under mask high" esame
eb000000002c stcmh RSE_M "store characters under mask high" esame
eb0000000080 icmh RSE_M "insert characters under mask high" esame
a700 tmlh RI_U "test under mask low high" esame
a702 tmhh RI_U "test under mask high high" esame
a701 tmll RI_U "test under mask low low" esame
a703 tmhl RI_U "test under mask high low" esame
c004 brcl RIL_MA "branch relative on condition long" esame
c014 jgo RIL_B "jump long on overflow / if ones" esame
c024 jgh RIL_B "jump long on high" esame
c024 jgp RIL_B "jump long on plus" esame
c034 jgnle RIL_B "jump long on not low or equal" esame
c044 jgl RIL_B "jump long on low" esame
c044 jgm RIL_B "jump long on minus / if mixed" esame
c054 jgnhe RIL_B "jump long on not high or equal" esame
c064 jglh RIL_B "jump long on low or high" esame
c074 jgne RIL_B "jump long on not equal" esame
c074 jgnz RIL_B "jump long on not zero / if not zeros" esame
c084 jge RIL_B "jump long on equal" esame
c084 jgz RIL_B "jump long on zero / if zeros" esame
c094 jgnlh RIL_B "jump long on not low or high" esame
c0a4 jghe RIL_B "jump long on high or equal" esame
c0b4 jgnl RIL_B "jump long on not low" esame
c0b4 jgnm RIL_B "jump long on not minus / if not mixed" esame
c0c4 jgle RIL_B "jump long on low or equal" esame
c0d4 jgnh RIL_B "jump long on not high" esame
c0d4 jgnp RIL_B "jump long on not plus" esame
c0e4 jgno RIL_B "jump long on not overflow / if not ones" esame
c0f4 jg RIL_B "jump long" esame
c005 brasl RIL_A "branch relative and save long" esame
a707 brctg RI_A "branch relative on count 64" esame
a709 lghi RI "load halfword immediate 64" esame
a70b aghi RI "add halfword immediate 64" esame
a70d mghi RI "multiply halfword immediate 64" esame
a70f cghi RI "compare halfword immediate 64" esame
b925 sturg RRE "store using real address 64" esame
b90e eregg RRE "extract stacked registers 64" esame
b905 lurag RRE "load using real address 64" esame
b90c msgr RRE "multiply single 64" esame
b91c msgfr RRE "multiply single 64<32" esame
b3a4 cegbr RRE "convert from fixed 64 to short bfp" esame
b3a5 cdgbr RRE "convert from fixed 64 to long bfp" esame
b3a6 cxgbr RRE "convert from fixed 64 to extended bfp" esame
b3a8 cgebr RRF_M "convert to fixed short bfd to 64" esame
b3a9 cgdbr RRF_M "convert to fixed long bfp to 64" esame
b3aa cgxbr RRF_M "convert to fixed extended bfp to 64" esame
b3c4 cegr RRE "convert from fixed 64 to short hfp" esame
b3c5 cdgr RRE "convert from fixed 64 to long hfp" esame
b3c6 cxgr RRE "convert from fixed 64 to extended hfp" esame
b3c8 cger RRF_F "convert to fixed short hfp to 64" esame
b3c9 cgdr RRF_F "convert to fixed long hfp to 64" esame
b3ca cgxr RRF_F "convert to fixed extended hfp to 64" esame
d550 77
a626 77
a500 iihh RI_U "insert immediate high high" esame
a501 iihl RI_U "insert immediate high low" esame
a502 iilh RI_U "insert immediate low high" esame
a503 iill RI_U "insert immediate low low" esame
a504 nihh RI_U "and immediate high high" esame
a505 nihl RI_U "and immediate high low" esame
a506 nilh RI_U "and immediate low high" esame
a507 nill RI_U "and immediate low low" esame
a508 oihh RI_U "or immediate high high" esame
a509 oihl RI_U "or immediate high low" esame
a50a oilh RI_U "or immediate low high" esame
a50b oill RI_U "or immediate low low" esame
a50c llihh RI_U "load logical immediate high high" esame
a50d llihl RI_U "load logical immediate high low" esame
a50e llilh RI_U "load logical immediate low high" esame
a50f llill RI_U "load logical immediate low low" esame
b2b1 stfl S "store facility list" esame
b2b2 lpswe S "load psw extended" esame
b90d dsgr RRE "divide single 64" esame
b90f lrvgr RRE "load reversed 64" esame
b916 llgfr RRE "load logical 64<32" esame
b917 llgtr RRE "load logical thirty one bits" esame
b91d dsgfr RRE "divide single 64<32" esame
b91f lrvr RRE "load reversed 32" esame
b986 mlgr RRE "multiply logical 64" esame
b987 dlgr RRE "divide logical 64" esame
b988 alcgr RRE "add logical with carry 64" esame
b989 slbgr RRE "subtract logical with borrow 64" esame
b98d epsw RRE "extract psw" esame
b996 mlr RRE "multiply logical 32" esame
b997 dlr RRE "divide logical 32" esame
b998 alcr RRE "add logical with carry 32" esame
b999 slbr RRE "subtract logical with borrow 32" esame
b99d esea RRE_R "extract and set extended authority" esame
c000 larl RIL_A "load address relative long" esame
e3000000000d dsg RXE "divide single 64" esame
e3000000000f lrvg RXE "load reversed 64" esame
e30000000016 llgf RXE "load logical 64<32" esame
e30000000017 llgt RXE "load logical thirty one bits" esame
e3000000001d dsgf RXE "divide single 64<32" esame
e3000000001e lrv RXE "load reversed 32" esame
e3000000001f lrvh RXE "load reversed 16" esame
e3000000002f strvg RXE "store reversed 64" esame
e3000000003e strv RXE "store reversed 32" esame
e3000000003f strvh RXE "store reversed 64" esame
e30000000086 mlg RXE "multiply logical 64" esame
e30000000087 dlg RXE "divide logical 64" esame
e30000000088 alcg RXE "add logical with carry 64" esame
e30000000089 slbg RXE "subtract logical with borrow 64" esame
e3000000008e stpq RXE "store pair to quadword" esame
e3000000008f lpq RXE "load pair from quadword" esame
e30000000096 ml RXE "multiply logical 32" esame
e30000000097 dl RXE "divide logical 32" esame
e30000000098 alc RXE "add logical with carry 32" esame
e30000000099 slb RXE "subtract logical with borrow 32" esame
e30000000090 llgc RXE "load logical character" esame
e30000000091 llgh RXE "load logical halfword" esame
eb000000001c rllg RSE_R "rotate left single logical 64" esame
eb000000001d rll RSE_R "rotate left single logical 32" esame
b278 stcke S "store clock extended" esame
b2a5 tre RRE "translate extended" esame
eb000000008e mvclu RSE_R "move long unicode" esame
e9 pka SS_L "pack ascii" esame
e1 pku SS_L "pack unicode" esame
b993 troo RRE "translate one to one" esame
b992 trot RRE "translate one to two" esame
b991 trto RRE "translate two to one" esame
b990 trtt RRE "translate two to two" esame
ea unpka SS_L "unpack ascii" esame
e2 unpku SS_L "unpack unicode" esame
b358 thder RRE "convert short bfp to long hfp" esame
b359 thdr RRE "convert long bfp to long hfp" esame
b350 tbedr RRF_M "convert long hfp to short bfp" esame
b351 tbdr RRF_M "convert long hfp to long bfp" esame
b374 lzer RRE_R "load short zero" esame
b375 lzdr RRE_R "load long zero" esame
b376 lzxr RRE_R "load extended zero" esame
@


1.4
log
@Add lgh instruction.
@
text
@d268 1
d273 1
d290 1
d295 1
d311 1
d316 1
d509 1
d514 1
@


1.3
log
@Add new opcodes
@
text
@d455 1
@


1.2
log
@Fix typos in ChangeLogs; fix dates in copyright notices
@
text
@d602 16
@


1.1
log
@Add s390 support
@
text
@d2 1
a2 1
#  Copyright (C) 2000, 2001 Free Software Foundation, Inc.
@

