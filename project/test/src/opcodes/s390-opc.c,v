head	1.33;
access;
symbols
	sid-snapshot-20180601:1.33
	sid-snapshot-20180501:1.33
	sid-snapshot-20180401:1.33
	sid-snapshot-20180301:1.33
	sid-snapshot-20180201:1.33
	sid-snapshot-20180101:1.33
	sid-snapshot-20171201:1.33
	sid-snapshot-20171101:1.33
	sid-snapshot-20171001:1.33
	sid-snapshot-20170901:1.33
	sid-snapshot-20170801:1.33
	sid-snapshot-20170701:1.33
	sid-snapshot-20170601:1.33
	sid-snapshot-20170501:1.33
	sid-snapshot-20170401:1.33
	sid-snapshot-20170301:1.33
	sid-snapshot-20170201:1.33
	sid-snapshot-20170101:1.33
	sid-snapshot-20161201:1.33
	sid-snapshot-20161101:1.33
	sid-snapshot-20160901:1.33
	sid-snapshot-20160801:1.33
	sid-snapshot-20160701:1.33
	sid-snapshot-20160601:1.33
	sid-snapshot-20160501:1.33
	sid-snapshot-20160401:1.33
	sid-snapshot-20160301:1.33
	sid-snapshot-20160201:1.33
	sid-snapshot-20160101:1.33
	sid-snapshot-20151201:1.33
	sid-snapshot-20151101:1.33
	sid-snapshot-20151001:1.33
	sid-snapshot-20150901:1.33
	sid-snapshot-20150801:1.33
	sid-snapshot-20150701:1.33
	sid-snapshot-20150601:1.33
	sid-snapshot-20150501:1.33
	sid-snapshot-20150401:1.33
	sid-snapshot-20150301:1.33
	sid-snapshot-20150201:1.33
	sid-snapshot-20150101:1.33
	sid-snapshot-20141201:1.33
	sid-snapshot-20141101:1.33
	sid-snapshot-20141001:1.33
	sid-snapshot-20140901:1.33
	sid-snapshot-20140801:1.33
	sid-snapshot-20140701:1.33
	sid-snapshot-20140601:1.33
	sid-snapshot-20140501:1.33
	sid-snapshot-20140401:1.33
	sid-snapshot-20140301:1.33
	sid-snapshot-20140201:1.33
	sid-snapshot-20140101:1.33
	sid-snapshot-20131201:1.33
	sid-snapshot-20131101:1.33
	sid-snapshot-20131001:1.33
	binutils-2_24-branch:1.33.0.2
	binutils-2_24-branchpoint:1.33
	binutils-2_21_1:1.27
	sid-snapshot-20130901:1.33
	gdb_7_6_1-2013-08-30-release:1.31
	sid-snapshot-20130801:1.33
	sid-snapshot-20130701:1.32
	sid-snapshot-20130601:1.32
	sid-snapshot-20130501:1.31
	gdb_7_6-2013-04-26-release:1.31
	sid-snapshot-20130401:1.31
	binutils-2_23_2:1.29
	gdb_7_6-branch:1.31.0.2
	gdb_7_6-2013-03-12-branchpoint:1.31
	sid-snapshot-20130301:1.31
	sid-snapshot-20130201:1.31
	sid-snapshot-20130101:1.31
	sid-snapshot-20121201:1.31
	gdb_7_5_1-2012-11-29-release:1.29
	binutils-2_23_1:1.29
	sid-snapshot-20121101:1.31
	binutils-2_23:1.29
	sid-snapshot-20121001:1.29
	sid-snapshot-20120901:1.29
	gdb_7_5-2012-08-17-release:1.29
	sid-snapshot-20120801:1.29
	binutils-2_23-branch:1.29.0.10
	binutils-2_23-branchpoint:1.29
	gdb_7_5-branch:1.29.0.8
	gdb_7_5-2012-07-18-branchpoint:1.29
	sid-snapshot-20120701:1.29
	sid-snapshot-20120601:1.29
	sid-snapshot-20120501:1.29
	binutils-2_22_branch:1.29.0.6
	gdb_7_4_1-2012-04-26-release:1.29
	sid-snapshot-20120401:1.29
	sid-snapshot-20120301:1.29
	sid-snapshot-20120201:1.29
	gdb_7_4-2012-01-24-release:1.29
	sid-snapshot-20120101:1.29
	gdb_7_4-branch:1.29.0.4
	gdb_7_4-2011-12-13-branchpoint:1.29
	sid-snapshot-20111201:1.29
	binutils-2_22:1.29
	sid-snapshot-20111101:1.29
	sid-snapshot-20111001:1.29
	binutils-2_22-branch:1.29.0.2
	binutils-2_22-branchpoint:1.29
	gdb_7_3_1-2011-09-04-release:1.27
	sid-snapshot-20110901:1.29
	sid-snapshot-20110801:1.29
	gdb_7_3-2011-07-26-release:1.27
	sid-snapshot-20110701:1.29
	sid-snapshot-20110601:1.29
	sid-snapshot-20110501:1.27
	gdb_7_3-branch:1.27.0.4
	gdb_7_3-2011-04-01-branchpoint:1.27
	sid-snapshot-20110401:1.27
	sid-snapshot-20110301:1.27
	sid-snapshot-20110201:1.27
	sid-snapshot-20110101:1.27
	binutils-2_21:1.27
	sid-snapshot-20101201:1.27
	binutils-2_21-branch:1.27.0.2
	binutils-2_21-branchpoint:1.27
	sid-snapshot-20101101:1.27
	sid-snapshot-20101001:1.26
	binutils-2_20_1:1.24
	gdb_7_2-2010-09-02-release:1.24
	sid-snapshot-20100901:1.24
	sid-snapshot-20100801:1.24
	gdb_7_2-branch:1.24.0.8
	gdb_7_2-2010-07-07-branchpoint:1.24
	sid-snapshot-20100701:1.24
	sid-snapshot-20100601:1.24
	sid-snapshot-20100501:1.24
	sid-snapshot-20100401:1.24
	gdb_7_1-2010-03-18-release:1.24
	sid-snapshot-20100301:1.24
	gdb_7_1-branch:1.24.0.6
	gdb_7_1-2010-02-18-branchpoint:1.24
	sid-snapshot-20100201:1.24
	sid-snapshot-20100101:1.24
	gdb_7_0_1-2009-12-22-release:1.24
	sid-snapshot-20091201:1.24
	sid-snapshot-20091101:1.24
	binutils-2_20:1.24
	gdb_7_0-2009-10-06-release:1.24
	sid-snapshot-20091001:1.24
	gdb_7_0-branch:1.24.0.4
	gdb_7_0-2009-09-16-branchpoint:1.24
	arc-sim-20090309:1.17
	binutils-arc-20081103-branch:1.22.0.10
	binutils-arc-20081103-branchpoint:1.22
	binutils-2_20-branch:1.24.0.2
	binutils-2_20-branchpoint:1.24
	sid-snapshot-20090901:1.23
	sid-snapshot-20090801:1.23
	msnyder-checkpoint-072509-branch:1.23.0.4
	msnyder-checkpoint-072509-branchpoint:1.23
	sid-snapshot-20090701:1.23
	dje-cgen-play1-branch:1.23.0.2
	dje-cgen-play1-branchpoint:1.23
	sid-snapshot-20090601:1.22
	sid-snapshot-20090501:1.22
	sid-snapshot-20090401:1.22
	arc-20081103-branch:1.22.0.8
	arc-20081103-branchpoint:1.22
	arc-insight_6_8-branch:1.17.0.10
	arc-insight_6_8-branchpoint:1.17
	insight_6_8-branch:1.17.0.8
	insight_6_8-branchpoint:1.17
	sid-snapshot-20090301:1.22
	binutils-2_19_1:1.21
	sid-snapshot-20090201:1.22
	sid-snapshot-20090101:1.22
	reverse-20081226-branch:1.22.0.6
	reverse-20081226-branchpoint:1.22
	sid-snapshot-20081201:1.22
	multiprocess-20081120-branch:1.22.0.4
	multiprocess-20081120-branchpoint:1.22
	sid-snapshot-20081101:1.22
	binutils-2_19:1.21
	sid-snapshot-20081001:1.22
	reverse-20080930-branch:1.22.0.2
	reverse-20080930-branchpoint:1.22
	binutils-2_19-branch:1.21.0.2
	binutils-2_19-branchpoint:1.21
	sid-snapshot-20080901:1.21
	sid-snapshot-20080801:1.20
	reverse-20080717-branch:1.20.0.4
	reverse-20080717-branchpoint:1.20
	sid-snapshot-20080701:1.20
	msnyder-reverse-20080609-branch:1.20.0.2
	msnyder-reverse-20080609-branchpoint:1.20
	drow-reverse-20070409-branch:1.15.0.2
	drow-reverse-20070409-branchpoint:1.15
	sid-snapshot-20080601:1.20
	sid-snapshot-20080501:1.19
	sid-snapshot-20080403:1.19
	sid-snapshot-20080401:1.19
	gdb_6_8-2008-03-27-release:1.17
	sid-snapshot-20080301:1.17
	gdb_6_8-branch:1.17.0.6
	gdb_6_8-2008-02-26-branchpoint:1.17
	sid-snapshot-20080201:1.17
	sid-snapshot-20080101:1.17
	sid-snapshot-20071201:1.17
	sid-snapshot-20071101:1.17
	gdb_6_7_1-2007-10-29-release:1.17
	gdb_6_7-2007-10-10-release:1.17
	sid-snapshot-20071001:1.17
	gdb_6_7-branch:1.17.0.4
	gdb_6_7-2007-09-07-branchpoint:1.17
	binutils-2_18:1.17
	binutils-2_18-branch:1.17.0.2
	binutils-2_18-branchpoint:1.17
	insight_6_6-20070208-release:1.11
	binutils-csl-coldfire-4_1-32:1.11
	binutils-csl-sourcerygxx-4_1-32:1.11
	gdb_6_6-2006-12-18-release:1.11
	binutils-csl-innovasic-fido-3_4_4-33:1.11
	binutils-csl-sourcerygxx-3_4_4-32:1.9
	binutils-csl-coldfire-4_1-30:1.11
	binutils-csl-sourcerygxx-4_1-30:1.11
	binutils-csl-coldfire-4_1-28:1.11
	binutils-csl-sourcerygxx-4_1-29:1.11
	binutils-csl-sourcerygxx-4_1-28:1.11
	gdb_6_6-branch:1.11.0.30
	gdb_6_6-2006-11-15-branchpoint:1.11
	binutils-csl-arm-2006q3-27:1.11
	binutils-csl-sourcerygxx-4_1-27:1.11
	binutils-csl-arm-2006q3-26:1.11
	binutils-csl-sourcerygxx-4_1-26:1.11
	binutils-csl-sourcerygxx-4_1-25:1.11
	binutils-csl-sourcerygxx-4_1-24:1.11
	binutils-csl-sourcerygxx-4_1-23:1.11
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.11
	binutils-csl-sourcerygxx-4_1-21:1.11
	binutils-csl-arm-2006q3-21:1.11
	binutils-csl-sourcerygxx-4_1-22:1.11
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.11
	binutils-csl-sourcerygxx-4_1-20:1.11
	binutils-csl-arm-2006q3-19:1.11
	binutils-csl-sourcerygxx-4_1-19:1.11
	binutils-csl-sourcerygxx-4_1-18:1.11
	binutils-csl-renesas-4_1-9:1.11
	gdb-csl-sourcerygxx-3_4_4-25:1.11
	binutils-csl-sourcerygxx-3_4_4-25:1.9
	nickrob-async-20060828-mergepoint:1.11
	gdb-csl-symbian-6_4_50_20060226-11:1.11
	binutils-csl-renesas-4_1-8:1.11
	binutils-csl-renesas-4_1-7:1.11
	binutils-csl-renesas-4_1-6:1.11
	gdb-csl-sourcerygxx-4_1-17:1.11
	binutils-csl-sourcerygxx-4_1-17:1.11
	gdb-csl-20060226-branch-local-2:1.11
	gdb-csl-sourcerygxx-4_1-14:1.11
	binutils-csl-sourcerygxx-4_1-14:1.11
	binutils-csl-sourcerygxx-4_1-15:1.11
	gdb-csl-sourcerygxx-4_1-13:1.11
	binutils-csl-sourcerygxx-4_1-13:1.11
	binutils-2_17:1.11
	gdb-csl-sourcerygxx-4_1-12:1.11
	binutils-csl-sourcerygxx-4_1-12:1.11
	gdb-csl-sourcerygxx-3_4_4-21:1.11
	binutils-csl-sourcerygxx-3_4_4-21:1.11
	gdb_6_5-20060621-release:1.11
	binutils-csl-wrs-linux-3_4_4-24:1.9
	binutils-csl-wrs-linux-3_4_4-23:1.9
	gdb-csl-sourcerygxx-4_1-9:1.11
	binutils-csl-sourcerygxx-4_1-9:1.11
	gdb-csl-sourcerygxx-4_1-8:1.11
	binutils-csl-sourcerygxx-4_1-8:1.11
	gdb-csl-sourcerygxx-4_1-7:1.11
	binutils-csl-sourcerygxx-4_1-7:1.11
	gdb-csl-arm-2006q1-6:1.11
	binutils-csl-arm-2006q1-6:1.11
	gdb-csl-sourcerygxx-4_1-6:1.11
	binutils-csl-sourcerygxx-4_1-6:1.11
	binutils-csl-wrs-linux-3_4_4-22:1.9
	gdb-csl-symbian-6_4_50_20060226-10:1.11
	gdb-csl-symbian-6_4_50_20060226-9:1.11
	gdb-csl-symbian-6_4_50_20060226-8:1.11
	gdb-csl-coldfire-4_1-11:1.11
	binutils-csl-coldfire-4_1-11:1.11
	gdb-csl-sourcerygxx-3_4_4-19:1.11
	binutils-csl-sourcerygxx-3_4_4-19:1.11
	gdb-csl-coldfire-4_1-10:1.11
	gdb_6_5-branch:1.11.0.28
	gdb_6_5-2006-05-14-branchpoint:1.11
	binutils-csl-coldfire-4_1-10:1.11
	gdb-csl-sourcerygxx-4_1-5:1.11
	binutils-csl-sourcerygxx-4_1-5:1.11
	nickrob-async-20060513-branch:1.11.0.26
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.11
	binutils-csl-sourcerygxx-4_1-4:1.11
	msnyder-reverse-20060502-branch:1.11.0.24
	msnyder-reverse-20060502-branchpoint:1.11
	binutils-csl-wrs-linux-3_4_4-21:1.9
	gdb-csl-morpho-4_1-4:1.11
	binutils-csl-morpho-4_1-4:1.11
	gdb-csl-sourcerygxx-3_4_4-17:1.11
	binutils-csl-sourcerygxx-3_4_4-17:1.11
	binutils-csl-wrs-linux-3_4_4-20:1.9
	readline_5_1-import-branch:1.11.0.22
	readline_5_1-import-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.11
	binutils-2_17-branch:1.11.0.20
	binutils-2_17-branchpoint:1.11
	gdb-csl-symbian-20060226-branch:1.11.0.18
	gdb-csl-symbian-20060226-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.11
	msnyder-reverse-20060331-branch:1.11.0.16
	msnyder-reverse-20060331-branchpoint:1.11
	binutils-csl-2_17-branch:1.11.0.14
	binutils-csl-2_17-branchpoint:1.11
	gdb-csl-available-20060303-branch:1.11.0.12
	gdb-csl-available-20060303-branchpoint:1.11
	gdb-csl-20060226-branch:1.11.0.10
	gdb-csl-20060226-branchpoint:1.11
	gdb_6_4-20051202-release:1.11
	msnyder-fork-checkpoint-branch:1.11.0.8
	msnyder-fork-checkpoint-branchpoint:1.11
	gdb-csl-gxxpro-6_3-branch:1.11.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.11
	gdb_6_4-branch:1.11.0.4
	gdb_6_4-2005-11-01-branchpoint:1.11
	gdb-csl-arm-20051020-branch:1.11.0.2
	gdb-csl-arm-20051020-branchpoint:1.11
	binutils-csl-gxxpro-3_4-branch:1.9.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.9
	binutils-2_16_1:1.9
	msnyder-tracepoint-checkpoint-branch:1.10.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.10
	gdb-csl-arm-20050325-2005-q1b:1.9
	binutils-csl-arm-2005q1b:1.9
	binutils-2_16:1.9
	gdb-csl-arm-20050325-2005-q1a:1.9
	binutils-csl-arm-2005q1a:1.9
	csl-arm-20050325-branch:1.9.0.6
	csl-arm-20050325-branchpoint:1.9
	binutils-csl-arm-2005q1-branch:1.9.0.4
	binutils-csl-arm-2005q1-branchpoint:1.9
	binutils-2_16-branch:1.9.0.2
	binutils-2_16-branchpoint:1.9
	csl-arm-2004-q3d:1.8
	gdb_6_3-20041109-release:1.8
	gdb_6_3-branch:1.8.0.24
	gdb_6_3-20041019-branchpoint:1.8
	csl-arm-2004-q3:1.8
	drow_intercu-merge-20040921:1.8
	drow_intercu-merge-20040915:1.8
	jimb-gdb_6_2-e500-branch:1.8.0.26
	jimb-gdb_6_2-e500-branchpoint:1.8
	gdb_6_2-20040730-release:1.8
	gdb_6_2-branch:1.8.0.22
	gdb_6_2-2004-07-10-gmt-branchpoint:1.8
	gdb_6_1_1-20040616-release:1.8
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	gdb_6_1-2004-04-05-release:1.8
	drow_intercu-merge-20040402:1.8
	drow_intercu-merge-20040327:1.8
	ezannoni_pie-20040323-branch:1.8.0.20
	ezannoni_pie-20040323-branchpoint:1.8
	cagney_tramp-20040321-mergepoint:1.8
	cagney_tramp-20040309-branch:1.8.0.18
	cagney_tramp-20040309-branchpoint:1.8
	gdb_6_1-branch:1.8.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	drow_intercu-20040221-branch:1.8.0.14
	drow_intercu-20040221-branchpoint:1.8
	binutils-2_15-branch:1.8.0.12
	cagney_bfdfile-20040213-branch:1.8.0.10
	cagney_bfdfile-20040213-branchpoint:1.8
	drow-cplus-merge-20040208:1.8
	carlton_dictionary-20040126-merge:1.8
	cagney_bigcore-20040122-branch:1.8.0.8
	cagney_bigcore-20040122-branchpoint:1.8
	drow-cplus-merge-20040113:1.8
	csl-arm-2003-q4:1.8
	drow-cplus-merge-20031224:1.8
	drow-cplus-merge-20031220:1.8
	carlton_dictionary-20031215-merge:1.8
	drow-cplus-merge-20031214:1.8
	carlton-dictionary-20031111-merge:1.8
	gdb_6_0-2003-10-04-release:1.7
	kettenis_sparc-20030918-branch:1.8.0.6
	kettenis_sparc-20030918-branchpoint:1.8
	carlton_dictionary-20030917-merge:1.8
	ezannoni_pie-20030916-branchpoint:1.8
	ezannoni_pie-20030916-branch:1.8.0.4
	cagney_x86i386-20030821-branch:1.8.0.2
	cagney_x86i386-20030821-branchpoint:1.8
	carlton_dictionary-20030805-merge:1.8
	carlton_dictionary-20030627-merge:1.7
	gdb_6_0-branch:1.7.0.24
	gdb_6_0-2003-06-23-branchpoint:1.7
	jimb-ppc64-linux-20030613-branch:1.7.0.22
	jimb-ppc64-linux-20030613-branchpoint:1.7
	binutils-2_14:1.7
	cagney_convert-20030606-branch:1.7.0.20
	cagney_convert-20030606-branchpoint:1.7
	cagney_writestrings-20030508-branch:1.7.0.18
	cagney_writestrings-20030508-branchpoint:1.7
	jimb-ppc64-linux-20030528-branch:1.7.0.16
	jimb-ppc64-linux-20030528-branchpoint:1.7
	carlton_dictionary-20030523-merge:1.7
	cagney_fileio-20030521-branch:1.7.0.14
	cagney_fileio-20030521-branchpoint:1.7
	kettenis_i386newframe-20030517-mergepoint:1.7
	jimb-ppc64-linux-20030509-branch:1.7.0.12
	jimb-ppc64-linux-20030509-branchpoint:1.7
	kettenis_i386newframe-20030504-mergepoint:1.7
	carlton_dictionary-20030430-merge:1.7
	binutils-2_14-branch:1.7.0.10
	binutils-2_14-branchpoint:1.7
	kettenis_i386newframe-20030419-branch:1.7.0.8
	kettenis_i386newframe-20030419-branchpoint:1.7
	carlton_dictionary-20030416-merge:1.7
	cagney_frameaddr-20030409-mergepoint:1.7
	kettenis_i386newframe-20030406-branch:1.7.0.6
	kettenis_i386newframe-20030406-branchpoint:1.7
	cagney_frameaddr-20030403-branchpoint:1.7
	cagney_frameaddr-20030403-branch:1.7.0.4
	cagney_framebase-20030330-mergepoint:1.7
	cagney_framebase-20030326-branch:1.7.0.2
	cagney_framebase-20030326-branchpoint:1.7
	cagney_lazyid-20030317-branch:1.6.0.36
	cagney_lazyid-20030317-branchpoint:1.6
	kettenis-i386newframe-20030316-mergepoint:1.6
	offbyone-20030313-branch:1.6.0.34
	offbyone-20030313-branchpoint:1.6
	kettenis-i386newframe-20030308-branch:1.6.0.32
	kettenis-i386newframe-20030308-branchpoint:1.6
	carlton_dictionary-20030305-merge:1.6
	cagney_offbyone-20030303-branch:1.6.0.30
	cagney_offbyone-20030303-branchpoint:1.6
	carlton_dictionary-20030207-merge:1.6
	interps-20030202-branch:1.6.0.28
	interps-20030202-branchpoint:1.6
	cagney-unwind-20030108-branch:1.6.0.26
	cagney-unwind-20030108-branchpoint:1.6
	binutils-2_13_2_1:1.6
	binutils-2_13_2:1.6
	carlton_dictionary-20021223-merge:1.6
	gdb_5_3-2002-12-12-release:1.6
	carlton_dictionary-20021115-merge:1.6
	binutils-2_13_1:1.6
	kseitz_interps-20021105-merge:1.6
	kseitz_interps-20021103-merge:1.6
	drow-cplus-merge-20021020:1.6
	drow-cplus-merge-20021025:1.6
	carlton_dictionary-20021025-merge:1.6
	carlton_dictionary-20021011-merge:1.6
	drow-cplus-branch:1.6.0.24
	drow-cplus-branchpoint:1.6
	kseitz_interps-20020930-merge:1.6
	carlton_dictionary-20020927-merge:1.6
	carlton_dictionary-branch:1.6.0.22
	carlton_dictionary-20020920-branchpoint:1.6
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.20
	gdb_5_3-branch:1.6.0.18
	gdb_5_3-2002-09-04-branchpoint:1.6
	kseitz_interps-20020829-merge:1.6
	cagney_sysregs-20020825-branch:1.6.0.16
	cagney_sysregs-20020825-branchpoint:1.6
	readline_4_3-import-branch:1.6.0.14
	readline_4_3-import-branchpoint:1.6
	binutils-2_13:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	binutils-2_13-branchpoint:1.6
	binutils-2_13-branch:1.6.0.12
	kseitz_interps-20020528-branch:1.6.0.10
	kseitz_interps-20020528-branchpoint:1.6
	cagney_regbuf-20020515-branch:1.6.0.8
	cagney_regbuf-20020515-branchpoint:1.6
	binutils-2_12_1:1.6
	jimb-macro-020506-branch:1.6.0.6
	jimb-macro-020506-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	binutils-2_12:1.6
	gdb_5_2-branch:1.6.0.4
	gdb_5_2-2002-03-03-branchpoint:1.6
	binutils-2_12-branch:1.6.0.2
	binutils-2_12-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.4
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.2
	gdb_5_1-2001-07-29-branchpoint:1.4
	x86_64versiong3:1.1
	binutils_latest_snapshot:1.33;
locks; strict;
comment	@ * @;


1.33
date	2013.07.05.09.45.44;	author krebbel;	state Exp;
branches;
next	1.32;

1.32
date	2013.05.23.15.48.47;	author krebbel;	state Exp;
branches;
next	1.31;

1.31
date	2012.10.26.09.41.55;	author krebbel;	state Exp;
branches;
next	1.30;

1.30
date	2012.10.04.08.47.36;	author krebbel;	state Exp;
branches;
next	1.29;

1.29
date	2011.05.24.16.13.31;	author krebbel;	state Exp;
branches;
next	1.28;

1.28
date	2011.05.24.13.33.57;	author krebbel;	state Exp;
branches;
next	1.27;

1.27
date	2010.10.11.11.56.53;	author krebbel;	state Exp;
branches;
next	1.26;

1.26
date	2010.09.27.13.36.48;	author krebbel;	state Exp;
branches;
next	1.25;

1.25
date	2010.09.27.13.33.00;	author krebbel;	state Exp;
branches;
next	1.24;

1.24
date	2009.09.02.07.20.30;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.19.10.55.41;	author sky;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.26.13.44.33;	author krebbel;	state Exp;
branches;
next	1.21;

1.21
date	2008.08.15.12.10.21;	author krebbel;	state Exp;
branches;
next	1.20;

1.20
date	2008.05.27.12.52.44;	author sky;	state Exp;
branches;
next	1.19;

1.19
date	2008.03.19.10.29.17;	author krebbel;	state Exp;
branches;
next	1.18;

1.18
date	2008.03.06.12.01.13;	author krebbel;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.05.09.49.02;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.24.14.49.47;	author sky;	state Exp;
branches;
next	1.15;

1.15
date	2007.03.06.13.19.07;	author sky;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.22.21.01.58;	author dj;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.19.17.42.17;	author sky;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.19.17.29.37;	author sky;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.12.18.03.03;	author sky;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.07.07.34.31;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.03.11.49.50;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.01.14.47.58;	author sky;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.21.13.28.09;	author sky;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.18.15.41.33;	author nickc;	state Exp;
branches
	1.6.22.1
	1.6.24.1;
next	1.5;

1.5
date	2001.08.23.06.38.56;	author aj;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.12.11.50.53;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.16.18.42.26;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.13.22.58.37;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.10.00.55.48;	author nickc;	state Exp;
branches;
next	;

1.6.22.1
date	2003.04.16.19.57.06;	author carlton;	state Exp;
branches;
next	1.6.22.2;

1.6.22.2
date	2003.08.05.17.13.31;	author carlton;	state Exp;
branches;
next	;

1.6.24.1
date	2003.12.14.20.28.10;	author drow;	state Exp;
branches;
next	;


desc
@@


1.33
log
@2013-07-05  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>
opcodes/
	    * s390-opc.c (J12_12, J24_24): New macros.
	    (INSTR_MII_UPI): Rename to INSTR_MII_UPP.
	    (MASK_MII_UPI): Rename to MASK_MII_UPP.
	    * s390-opc.txt: Rename MII_UPI to MII_UPP for bprp instruction.

include/elf/
	    * s390.h: Add new relocs R_390_PC12DBL, R_390_PLT12DBL,
	    R_390_PC24DBL, and R_390_PLT24DBL.

gas/testsuite/
	    * gas/s390/zarch-zEC12.s: Change bprp second operand and add
	    variants requiring relocations.
	    * gas/s390/zarch-zEC12.d: Likewise.

gas/
	    * config/tc-s390.c (md_gather_operands, md_apply_fix): Support new
	    relocs.
bfd/
	    * elf32-s390.c: Add new relocation definitions R_390_PC12DBL,
	    R_390_PLT12DBL, R_390_PC24DBL, and R_390_PLT24DBL.
	    (elf_s390_reloc_type_lookup, elf_s390_check_relocs)
	    (elf_s390_gc_sweep_hook, elf_s390_relocate_section): Support new
	    relocations.
	    * elf64-s390.c: See elf32-s390.c
	    * bfd-in2.h: Add new relocs to enum bfd_reloc_code_real.
	    * libbfd.h: Add new reloc strings.
@
text
@/* s390-opc.c -- S390 opcode list
   Copyright 2000, 2001, 2003, 2005, 2007, 2008, 2009
   Free Software Foundation, Inc.
   Contributed by Martin Schwidefsky (schwidefsky@@de.ibm.com).

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this file; see the file COPYING.  If not, write to the
   Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include <stdio.h>
#include "ansidecl.h"
#include "opcode/s390.h"

/* This file holds the S390 opcode table.  The opcode table
   includes almost all of the extended instruction mnemonics.  This
   permits the disassembler to use them, and simplifies the assembler
   logic, at the cost of increasing the table size.  The table is
   strictly constant data, so the compiler should be able to put it in
   the .text section.

   This file also holds the operand table.  All knowledge about
   inserting operands into instructions and vice-versa is kept in this
   file.  */

/* The operands table.
   The fields are bits, shift, insert, extract, flags.  */

const struct s390_operand s390_operands[] =
{
#define UNUSED 0
  { 0, 0, 0 },                    /* Indicates the end of the operand list */

/* General purpose register operands.  */

#define R_8    1                  /* GPR starting at position 8 */
  { 4, 8, S390_OPERAND_GPR },
#define R_12   2                  /* GPR starting at position 12 */
  { 4, 12, S390_OPERAND_GPR },
#define RO_12  3                 /* optional GPR starting at position 12 */
  { 4, 12, S390_OPERAND_GPR | S390_OPERAND_OPTIONAL },
#define R_16   4                  /* GPR starting at position 16 */
  { 4, 16, S390_OPERAND_GPR },
#define R_20   5                  /* GPR starting at position 20 */
  { 4, 20, S390_OPERAND_GPR },
#define R_24   6                  /* GPR starting at position 24 */
  { 4, 24, S390_OPERAND_GPR },
#define R_28   7                  /* GPR starting at position 28 */
  { 4, 28, S390_OPERAND_GPR },
#define RO_28  8                  /* optional GPR starting at position 28 */
  { 4, 28, (S390_OPERAND_GPR | S390_OPERAND_OPTIONAL) },
#define R_32   9                  /* GPR starting at position 32 */
  { 4, 32, S390_OPERAND_GPR },

/* General purpose register pair operands.  */

#define RE_8    10                  /* GPR starting at position 8 */
  { 4, 8, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_12   11                  /* GPR starting at position 12 */
  { 4, 12, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_16   12                  /* GPR starting at position 16 */
  { 4, 16, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_20   13                  /* GPR starting at position 20 */
  { 4, 20, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_24   14                  /* GPR starting at position 24 */
  { 4, 24, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_28   15                  /* GPR starting at position 28 */
  { 4, 28, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },
#define RE_32   16                  /* GPR starting at position 32 */
  { 4, 32, S390_OPERAND_GPR | S390_OPERAND_REG_PAIR },


/* Floating point register operands.  */

#define F_8    17                 /* FPR starting at position 8 */
  { 4, 8, S390_OPERAND_FPR },
#define F_12   18                 /* FPR starting at position 12 */
  { 4, 12, S390_OPERAND_FPR },
#define F_16   19                 /* FPR starting at position 16 */
  { 4, 16, S390_OPERAND_FPR },
#define F_20   20                 /* FPR starting at position 16 */
  { 4, 16, S390_OPERAND_FPR },
#define F_24   21                 /* FPR starting at position 24 */
  { 4, 24, S390_OPERAND_FPR },
#define F_28   22                 /* FPR starting at position 28 */
  { 4, 28, S390_OPERAND_FPR },
#define F_32   23                 /* FPR starting at position 32 */
  { 4, 32, S390_OPERAND_FPR },

/* Floating point register pair operands.  */

#define FE_8    24                 /* FPR starting at position 8 */
  { 4, 8, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_12   25                 /* FPR starting at position 12 */
  { 4, 12, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_16   26                 /* FPR starting at position 16 */
  { 4, 16, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_20   27                 /* FPR starting at position 16 */
  { 4, 16, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_24   28                 /* FPR starting at position 24 */
  { 4, 24, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_28   29                 /* FPR starting at position 28 */
  { 4, 28, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },
#define FE_32   30                 /* FPR starting at position 32 */
  { 4, 32, S390_OPERAND_FPR | S390_OPERAND_REG_PAIR },


/* Access register operands.  */

#define A_8    31                 /* Access reg. starting at position 8 */
  { 4, 8, S390_OPERAND_AR },
#define A_12   32                 /* Access reg. starting at position 12 */
  { 4, 12, S390_OPERAND_AR },
#define A_24   33                 /* Access reg. starting at position 24 */
  { 4, 24, S390_OPERAND_AR },
#define A_28   34                 /* Access reg. starting at position 28 */
  { 4, 28, S390_OPERAND_AR },

/* Control register operands.  */

#define C_8    35                 /* Control reg. starting at position 8 */
  { 4, 8, S390_OPERAND_CR },
#define C_12   36                 /* Control reg. starting at position 12 */
  { 4, 12, S390_OPERAND_CR },

/* Base register operands.  */

#define B_16   37                 /* Base register starting at position 16 */
  { 4, 16, S390_OPERAND_BASE | S390_OPERAND_GPR },
#define B_32   38                 /* Base register starting at position 32 */
  { 4, 32, S390_OPERAND_BASE | S390_OPERAND_GPR },

#define X_12   39                 /* Index register starting at position 12 */
  { 4, 12, S390_OPERAND_INDEX | S390_OPERAND_GPR },

/* Address displacement operands.  */

#define D_20   40                 /* Displacement starting at position 20 */
  { 12, 20, S390_OPERAND_DISP },
#define DO_20  41                 /* optional Displ. starting at position 20 */
  { 12, 20, S390_OPERAND_DISP | S390_OPERAND_OPTIONAL },
#define D_36   42                 /* Displacement starting at position 36 */
  { 12, 36, S390_OPERAND_DISP },
#define D20_20 43		  /* 20 bit displacement starting at 20 */
  { 20, 20, S390_OPERAND_DISP | S390_OPERAND_SIGNED },

/* Length operands.  */

#define L4_8   44                 /* 4 bit length starting at position 8 */
  { 4, 8, S390_OPERAND_LENGTH },
#define L4_12  45                 /* 4 bit length starting at position 12 */
  { 4, 12, S390_OPERAND_LENGTH },
#define L8_8   46                 /* 8 bit length starting at position 8 */
  { 8, 8, S390_OPERAND_LENGTH },

/* Signed immediate operands.  */

#define I8_8   47		  /* 8 bit signed value starting at 8 */
  { 8, 8, S390_OPERAND_SIGNED },
#define I8_32  48		  /* 8 bit signed value starting at 32 */
  { 8, 32, S390_OPERAND_SIGNED },
#define I12_12 49		  /* 12 bit signed value starting at 12 */
  { 12, 12, S390_OPERAND_SIGNED },
#define I16_16 50                 /* 16 bit signed value starting at 16 */
  { 16, 16, S390_OPERAND_SIGNED },
#define I16_32 51                 /* 16 bit signed value starting at 32 */
  { 16, 32, S390_OPERAND_SIGNED },
#define I24_24 52		  /* 24 bit signed value starting at 24 */
  { 24, 24, S390_OPERAND_SIGNED },
#define I32_16 53		  /* 32 bit signed value starting at 16 */
  { 32, 16, S390_OPERAND_SIGNED },

/* Unsigned immediate operands.  */

#define U4_8   54                 /* 4 bit unsigned value starting at 8 */
  { 4, 8, 0 },
#define U4_12  55                 /* 4 bit unsigned value starting at 12 */
  { 4, 12, 0 },
#define U4_16  56                 /* 4 bit unsigned value starting at 16 */
  { 4, 16, 0 },
#define U4_20  57                 /* 4 bit unsigned value starting at 20 */
  { 4, 20, 0 },
#define U4_24  58                 /* 4 bit unsigned value starting at 24 */
  { 4, 24, 0 },
#define U4_28  59                 /* 4 bit unsigned value starting at 28 */
  { 4, 28, 0 },
#define U4_32  60                 /* 4 bit unsigned value starting at 32 */
  { 4, 32, 0 },
#define U4_36  61                 /* 4 bit unsigned value starting at 36 */
  { 4, 36, 0 },
#define U8_8   62                 /* 8 bit unsigned value starting at 8 */
  { 8, 8, 0 },
#define U8_16  63                 /* 8 bit unsigned value starting at 16 */
  { 8, 16, 0 },
#define U8_24  64                 /* 8 bit unsigned value starting at 24 */
  { 8, 24, 0 },
#define U8_32  65                 /* 8 bit unsigned value starting at 32 */
  { 8, 32, 0 },
#define U16_16 66                 /* 16 bit unsigned value starting at 16 */
  { 16, 16, 0 },
#define U16_32 67		  /* 16 bit unsigned value starting at 32 */
  { 16, 32, 0 },
#define U32_16 68		  /* 32 bit unsigned value starting at 16 */
  { 32, 16, 0 },

/* PC-relative address operands.  */

#define J12_12 69                 /* 12 bit PC relative offset at 12 */
  { 12, 12, S390_OPERAND_PCREL },
#define J16_16 70                 /* 16 bit PC relative offset at 16 */
  { 16, 16, S390_OPERAND_PCREL },
#define J16_32 71                 /* 16 bit PC relative offset at 32 */
  { 16, 32, S390_OPERAND_PCREL },
#define J24_24 72                 /* 24 bit PC relative offset at 24 */
  { 24, 24, S390_OPERAND_PCREL },
#define J32_16 73                 /* 32 bit PC relative offset at 16 */
  { 32, 16, S390_OPERAND_PCREL },


/* Conditional mask operands.  */

#define M_16OPT   74              /* 4 bit optional mask starting at 16 */
  { 4, 16, S390_OPERAND_OPTIONAL },
#define M_20OPT   75              /* 4 bit optional mask starting at 20 */
  { 4, 20, S390_OPERAND_OPTIONAL },

};


/* Macros used to form opcodes.  */

/* 8/16/48 bit opcodes.  */
#define OP8(x) { x, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define OP16(x) { x >> 8, x & 255, 0x00, 0x00, 0x00, 0x00 }
#define OP48(x) { x >> 40, (x >> 32) & 255, (x >> 24) & 255, \
                  (x >> 16) & 255, (x >> 8) & 255, x & 255}

/* The new format of the INSTR_x_y and MASK_x_y defines is based
   on the following rules:
   1) the middle part of the definition (x in INSTR_x_y) is the official
      names of the instruction format that you can find in the principals
      of operation.
   2) the last part of the definition (y in INSTR_x_y) gives you an idea
      which operands the binary represenation of the instruction has.
      The meanings of the letters in y are:
      a - access register
      c - control register
      d - displacement, 12 bit
      f - floating pointer register
      fe - fpr extended operand, a valid floating pointer register pair
      i - signed integer, 4, 8, 16 or 32 bit
      l - length, 4 or 8 bit
      p - pc relative
      r - general purpose register
      ro - optional register operand
      re - gpr extended operand, a valid general purpose register pair
      u - unsigned integer, 4, 8, 16 or 32 bit
      m - mode field, 4 bit
      0 - operand skipped.
      The order of the letters reflects the layout of the format in
      storage and not the order of the paramaters of the instructions.
      The use of the letters is not a 100% match with the PoP but it is
      quite close.

      For example the instruction "mvo" is defined in the PoP as follows:
      
      MVO  D1(L1,B1),D2(L2,B2)   [SS]

      --------------------------------------
      | 'F1' | L1 | L2 | B1 | D1 | B2 | D2 |
      --------------------------------------
       0      8    12   16   20   32   36

      The instruction format is: INSTR_SS_LLRDRD / MASK_SS_LLRDRD.  */

#define INSTR_E          2, { 0,0,0,0,0,0 }                    /* e.g. pr    */
#define INSTR_IE_UU      4, { U4_24,U4_28,0,0,0,0 }            /* e.g. niai  */
#define INSTR_MII_UPP    6, { U4_8,J12_12,J24_24 }             /* e.g. bprp  */
#define INSTR_RIE_RRP    6, { R_8,R_12,J16_16,0,0,0 }          /* e.g. brxhg */
#define INSTR_RIE_RRPU   6, { R_8,R_12,U4_32,J16_16,0,0 }      /* e.g. crj   */
#define INSTR_RIE_RRP0   6, { R_8,R_12,J16_16,0,0,0 }          /* e.g. crjne */
#define INSTR_RIE_RRI0   6, { R_8,R_12,I16_16,0,0,0 }          /* e.g. ahik  */
#define INSTR_RIE_RUPI   6, { R_8,I8_32,U4_12,J16_16,0,0 }     /* e.g. cij   */
#define INSTR_RIE_R0PI   6, { R_8,I8_32,J16_16,0,0,0 }         /* e.g. cijne */
#define INSTR_RIE_RUPU   6, { R_8,U8_32,U4_12,J16_16,0,0 }     /* e.g. clij  */
#define INSTR_RIE_R0PU   6, { R_8,U8_32,J16_16,0,0,0 }         /* e.g. clijne */
#define INSTR_RIE_R0IU   6, { R_8,I16_16,U4_32,0,0,0 }         /* e.g. cit   */
#define INSTR_RIE_R0I0   6, { R_8,I16_16,0,0,0,0 }             /* e.g. citne */
#define INSTR_RIE_R0UU   6, { R_8,U16_16,U4_32,0,0,0 }         /* e.g. clfit */
#define INSTR_RIE_R0U0   6, { R_8,U16_16,0,0,0,0 }             /* e.g. clfitne */
#define INSTR_RIE_RRUUU  6, { R_8,R_12,U8_16,U8_24,U8_32,0 }   /* e.g. rnsbg */
#define INSTR_RIL_0P     6, { J32_16,0,0,0,0 }                 /* e.g. jg    */
#define INSTR_RIL_RP     6, { R_8,J32_16,0,0,0,0 }             /* e.g. brasl */
#define INSTR_RIL_UP     6, { U4_8,J32_16,0,0,0,0 }            /* e.g. brcl  */
#define INSTR_RIL_RI     6, { R_8,I32_16,0,0,0,0 }             /* e.g. afi   */
#define INSTR_RIL_RU     6, { R_8,U32_16,0,0,0,0 }             /* e.g. alfi  */
#define INSTR_RI_0P      4, { J16_16,0,0,0,0,0 }               /* e.g. j     */
#define INSTR_RI_RI      4, { R_8,I16_16,0,0,0,0 }             /* e.g. ahi   */
#define INSTR_RI_RP      4, { R_8,J16_16,0,0,0,0 }             /* e.g. brct  */
#define INSTR_RI_RU      4, { R_8,U16_16,0,0,0,0 }             /* e.g. tml   */
#define INSTR_RI_UP      4, { U4_8,J16_16,0,0,0,0 }            /* e.g. brc   */
#define INSTR_RIS_RURDI  6, { R_8,I8_32,U4_12,D_20,B_16,0 }    /* e.g. cib   */
#define INSTR_RIS_R0RDI  6, { R_8,I8_32,D_20,B_16,0,0 }        /* e.g. cibne */
#define INSTR_RIS_RURDU  6, { R_8,U8_32,U4_12,D_20,B_16,0 }    /* e.g. clib  */
#define INSTR_RIS_R0RDU  6, { R_8,U8_32,D_20,B_16,0,0 }        /* e.g. clibne*/
#define INSTR_RRE_00     4, { 0,0,0,0,0,0 }                    /* e.g. palb  */
#define INSTR_RRE_0R     4, { R_28,0,0,0,0,0 }                 /* e.g. tb    */
#define INSTR_RRE_AA     4, { A_24,A_28,0,0,0,0 }              /* e.g. cpya  */
#define INSTR_RRE_AR     4, { A_24,R_28,0,0,0,0 }              /* e.g. sar   */
#define INSTR_RRE_F0     4, { F_24,0,0,0,0,0 }                 /* e.g. sqer  */
#define INSTR_RRE_FE0    4, { FE_24,0,0,0,0,0 }                /* e.g. lzxr  */
#define INSTR_RRE_FF     4, { F_24,F_28,0,0,0,0 }              /* e.g. debr  */
#define INSTR_RRE_FEF    4, { FE_24,F_28,0,0,0,0 }             /* e.g. lxdbr */
#define INSTR_RRE_FFE    4, { F_24,FE_28,0,0,0,0 }             /* e.g. lexr  */
#define INSTR_RRE_FEFE   4, { FE_24,FE_28,0,0,0,0 }            /* e.g. dxr   */
#define INSTR_RRE_R0     4, { R_24,0,0,0,0,0 }                 /* e.g. ipm   */
#define INSTR_RRE_RA     4, { R_24,A_28,0,0,0,0 }              /* e.g. ear   */
#define INSTR_RRE_RF     4, { R_24,F_28,0,0,0,0 }              /* e.g. cefbr */
#define INSTR_RRE_RFE    4, { R_24,FE_28,0,0,0,0 }             /* e.g. csxtr */
#define INSTR_RRE_RR     4, { R_24,R_28,0,0,0,0 }              /* e.g. lura  */
#define INSTR_RRE_RER    4, { RE_24,R_28,0,0,0,0 }             /* e.g. tre   */
#define INSTR_RRE_RERE   4, { RE_24,RE_28,0,0,0,0 }            /* e.g. cuse  */
#define INSTR_RRE_FR     4, { F_24,R_28,0,0,0,0 }              /* e.g. ldgr  */
#define INSTR_RRE_FER    4, { FE_24,R_28,0,0,0,0 }             /* e.g. cxfbr */
/* Actually efpc and sfpc do not take an optional operand.
   This is just a workaround for existing code e.g. glibc.  */
#define INSTR_RRE_RR_OPT 4, { R_24,RO_28,0,0,0,0 }             /* efpc, sfpc */
#define INSTR_RRF_F0FF   4, { F_16,F_24,F_28,0,0,0 }           /* e.g. madbr */
#define INSTR_RRF_FE0FF  4, { F_16,F_24,F_28,0,0,0 }           /* e.g. myr */
#define INSTR_RRF_F0FF2  4, { F_24,F_16,F_28,0,0,0 }           /* e.g. cpsdr */
#define INSTR_RRF_F0FR   4, { F_24,F_16,R_28,0,0,0 }           /* e.g. iedtr */
#define INSTR_RRF_FE0FER 4, { FE_24,FE_16,R_28,0,0,0 }         /* e.g. iextr */
#define INSTR_RRF_FUFF   4, { F_24,F_16,F_28,U4_20,0,0 }       /* e.g. didbr */
#define INSTR_RRF_FEUFEFE 4, { FE_24,FE_16,FE_28,U4_20,0,0 }   /* e.g. qaxtr */
#define INSTR_RRF_FUFF2  4, { F_24,F_28,F_16,U4_20,0,0 }       /* e.g. adtra */
#define INSTR_RRF_FEUFEFE2 4, { FE_24,FE_28,FE_16,U4_20,0,0 }  /* e.g. axtra */
#define INSTR_RRF_RURR   4, { R_24,R_28,R_16,U4_20,0,0 }       /* e.g. .insn */
#define INSTR_RRF_RURR2  4, { R_24,R_16,R_28,U4_20,0,0 }       /* e.g. lptea */
#define INSTR_RRF_R0RR   4, { R_24,R_16,R_28,0,0,0 }           /* e.g. idte  */
#define INSTR_RRF_R0RR2  4, { R_24,R_28,R_16,0,0,0 }           /* e.g. ark   */
#define INSTR_RRF_RMRR   4, { R_24,R_16,R_28,M_20OPT,0,0 }     /* e.g. crdte */
#define INSTR_RRF_U0FF   4, { F_24,U4_16,F_28,0,0,0 }          /* e.g. fixr  */
#define INSTR_RRF_U0FEFE 4, { FE_24,U4_16,FE_28,0,0,0 }        /* e.g. fixbr */
#define INSTR_RRF_U0RF   4, { R_24,U4_16,F_28,0,0,0 }          /* e.g. cfebr */
#define INSTR_RRF_U0RFE  4, { R_24,U4_16,FE_28,0,0,0 }         /* e.g. cfxbr */
#define INSTR_RRF_UUFF   4, { F_24,U4_16,F_28,U4_20,0,0 }      /* e.g. fidtr */
#define INSTR_RRF_UUFFE  4, { F_24,U4_16,FE_28,U4_20,0,0 }     /* e.g. ldxtr */
#define INSTR_RRF_UUFEFE 4, { FE_24,U4_16,FE_28,U4_20,0,0 }    /* e.g. fixtr */
#define INSTR_RRF_0UFF   4, { F_24,F_28,U4_20,0,0,0 }          /* e.g. ldetr */
#define INSTR_RRF_0UFEF  4, { FE_24,F_28,U4_20,0,0,0 }         /* e.g. lxdtr */
#define INSTR_RRF_FFRU   4, { F_24,F_16,R_28,U4_20,0,0 }       /* e.g. rrdtr */
#define INSTR_RRF_FEFERU 4, { FE_24,FE_16,R_28,U4_20,0,0 }     /* e.g. rrxtr */
#define INSTR_RRF_M0RR   4, { R_24,R_28,M_16OPT,0,0,0 }        /* e.g. sske  */
#define INSTR_RRF_M0RER  4, { RE_24,R_28,M_16OPT,0,0,0 }       /* e.g. trte  */
#define INSTR_RRF_M0RERE 4, { RE_24,RE_28,M_16OPT,0,0,0 }      /* e.g. troo  */
#define INSTR_RRF_U0RR   4, { R_24,R_28,U4_16,0,0,0 }          /* e.g. clrt  */
#define INSTR_RRF_00RR   4, { R_24,R_28,0,0,0,0 }              /* e.g. clrtne */
#define INSTR_RRF_UUFR   4, { F_24,U4_16,R_28,U4_20,0,0 }      /* e.g. cdgtra */
#define INSTR_RRF_UUFER  4, { FE_24,U4_16,R_28,U4_20,0,0 }     /* e.g. cxfbra */
#define INSTR_RRF_UURF   4, { R_24,U4_16,F_28,U4_20,0,0 }      /* e.g. cgdtra */
#define INSTR_RRF_UURFE  4, { R_24,U4_16,FE_28,U4_20,0,0 }     /* e.g. cfxbra */
#define INSTR_RR_0R      2, { R_12, 0,0,0,0,0 }                /* e.g. br    */
#define INSTR_RR_0R_OPT  2, { RO_12, 0,0,0,0,0 }               /* e.g. nopr  */
#define INSTR_RR_FF      2, { F_8,F_12,0,0,0,0 }               /* e.g. adr   */
#define INSTR_RR_FEF     2, { FE_8,F_12,0,0,0,0 }              /* e.g. mxdr  */
#define INSTR_RR_FFE     2, { F_8,FE_12,0,0,0,0 }              /* e.g. ldxr  */
#define INSTR_RR_FEFE    2, { FE_8,FE_12,0,0,0,0 }             /* e.g. axr   */
#define INSTR_RR_R0      2, { R_8, 0,0,0,0,0 }                 /* e.g. spm   */
#define INSTR_RR_RR      2, { R_8,R_12,0,0,0,0 }               /* e.g. lr    */
#define INSTR_RR_RER     2, { RE_8,R_12,0,0,0,0 }              /* e.g. dr    */
#define INSTR_RR_U0      2, { U8_8, 0,0,0,0,0 }                /* e.g. svc   */
#define INSTR_RR_UR      2, { U4_8,R_12,0,0,0,0 }              /* e.g. bcr   */
#define INSTR_RRR_F0FF   4, { F_24,F_28,F_16,0,0,0 }           /* e.g. ddtr  */
#define INSTR_RRR_FE0FEFE 4, { FE_24,FE_28,FE_16,0,0,0 }       /* e.g. axtr  */
#define INSTR_RRS_RRRDU  6, { R_8,R_12,U4_32,D_20,B_16 }       /* e.g. crb   */
#define INSTR_RRS_RRRD0  6, { R_8,R_12,D_20,B_16,0 }           /* e.g. crbne */
#define INSTR_RSE_RRRD   6, { R_8,R_12,D_20,B_16,0,0 }         /* e.g. lmh   */
#define INSTR_RSE_RERERD 6, { RE_8,RE_12,D_20,B_16,0,0 }       /* e.g. mvclu */
#define INSTR_RSE_CCRD   6, { C_8,C_12,D_20,B_16,0,0 }         /* e.g. lmh   */
#define INSTR_RSE_RURD   6, { R_8,U4_12,D_20,B_16,0,0 }        /* e.g. icmh  */
#define INSTR_RSL_R0RD   6, { D_20,L4_8,B_16,0,0,0 }           /* e.g. tp    */
#define INSTR_RSL_LRDFU  6, { F_32,D_20,L8_8,B_16,U4_36,0 }    /* e.g. cdzt  */
#define INSTR_RSL_LRDFEU 6, { FE_32,D_20,L8_8,B_16,U4_36,0 }   /* e.g. cxzt  */
#define INSTR_RSI_RRP    4, { R_8,R_12,J16_16,0,0,0 }          /* e.g. brxh  */
#define INSTR_RSY_RRRD   6, { R_8,R_12,D20_20,B_16,0,0 }       /* e.g. stmy  */
#define INSTR_RSY_RERERD 6, { RE_8,RE_12,D20_20,B_16,0,0 }     /* e.g. cdsy  */
#define INSTR_RSY_RURD   6, { R_8,U4_12,D20_20,B_16,0,0 }      /* e.g. icmh  */
#define INSTR_RSY_RURD2  6, { R_8,D20_20,B_16,U4_12,0,0 }      /* e.g. loc   */
#define INSTR_RSY_R0RD   6, { R_8,D20_20,B_16,0,0,0 }          /* e.g. locgt */
#define INSTR_RSY_AARD   6, { A_8,A_12,D20_20,B_16,0,0 }       /* e.g. lamy  */
#define INSTR_RSY_CCRD   6, { C_8,C_12,D20_20,B_16,0,0 }       /* e.g. stctg */
#define INSTR_RS_AARD    4, { A_8,A_12,D_20,B_16,0,0 }         /* e.g. lam   */
#define INSTR_RS_CCRD    4, { C_8,C_12,D_20,B_16,0,0 }         /* e.g. lctl  */
#define INSTR_RS_R0RD    4, { R_8,D_20,B_16,0,0,0 }            /* e.g. sll   */
#define INSTR_RS_RE0RD   4, { RE_8,D_20,B_16,0,0,0 }           /* e.g. slda  */
#define INSTR_RS_RRRD    4, { R_8,R_12,D_20,B_16,0,0 }         /* e.g. cs    */
#define INSTR_RS_RERERD  4, { RE_8,RE_12,D_20,B_16,0,0 }       /* e.g. cds   */
#define INSTR_RS_RURD    4, { R_8,U4_12,D_20,B_16,0,0 }        /* e.g. icm   */
#define INSTR_RXE_FRRD   6, { F_8,D_20,X_12,B_16,0,0 }         /* e.g. axbr  */
#define INSTR_RXE_FERRD  6, { FE_8,D_20,X_12,B_16,0,0 }        /* e.g. lxdb  */
#define INSTR_RXE_RRRD   6, { R_8,D_20,X_12,B_16,0,0 }         /* e.g. lg    */
#define INSTR_RXE_RERRD  6, { RE_8,D_20,X_12,B_16,0,0 }        /* e.g. dsg   */
#define INSTR_RXF_FRRDF  6, { F_32,F_8,D_20,X_12,B_16,0 }      /* e.g. madb  */
#define INSTR_RXF_FRRDFE 6, { FE_32,F_8,D_20,X_12,B_16,0 }     /* e.g. my    */
#define INSTR_RXF_FERRDFE 6, { FE_32,FE_8,D_20,X_12,B_16,0 }   /* e.g. slxt  */
#define INSTR_RXF_RRRDR  6, { R_32,R_8,D_20,X_12,B_16,0 }      /* e.g. .insn */
#define INSTR_RXY_RRRD   6, { R_8,D20_20,X_12,B_16,0,0 }       /* e.g. ly    */
#define INSTR_RXY_RERRD  6, { RE_8,D20_20,X_12,B_16,0,0 }      /* e.g. dsg   */
#define INSTR_RXY_FRRD   6, { F_8,D20_20,X_12,B_16,0,0 }       /* e.g. ley   */
#define INSTR_RXY_URRD   6, { U4_8,D20_20,X_12,B_16,0,0 }      /* e.g. pfd   */
#define INSTR_RX_0RRD    4, { D_20,X_12,B_16,0,0,0 }           /* e.g. be    */
#define INSTR_RX_0RRD_OPT 4, { DO_20,X_12,B_16,0,0,0 }         /* e.g. nop   */
#define INSTR_RX_FRRD    4, { F_8,D_20,X_12,B_16,0,0 }         /* e.g. ae    */
#define INSTR_RX_FERRD   4, { FE_8,D_20,X_12,B_16,0,0 }        /* e.g. mxd   */
#define INSTR_RX_RRRD    4, { R_8,D_20,X_12,B_16,0,0 }         /* e.g. l     */
#define INSTR_RX_RERRD   4, { RE_8,D_20,X_12,B_16,0,0 }        /* e.g. d     */
#define INSTR_RX_URRD    4, { U4_8,D_20,X_12,B_16,0,0 }        /* e.g. bc    */
#define INSTR_SI_URD     4, { D_20,B_16,U8_8,0,0,0 }           /* e.g. cli   */
#define INSTR_SIY_URD    6, { D20_20,B_16,U8_8,0,0,0 }         /* e.g. tmy   */
#define INSTR_SIY_IRD    6, { D20_20,B_16,I8_8,0,0,0 }         /* e.g. asi   */
#define INSTR_SIL_RDI    6, { D_20,B_16,I16_32,0,0,0 }         /* e.g. chhsi */
#define INSTR_SIL_RDU    6, { D_20,B_16,U16_32,0,0,0 }         /* e.g. clfhsi */
#define INSTR_SMI_U0RDP  6, { U4_8,J16_32,D_20,B_16,0,0 }      /* e.g. bpp */
#define INSTR_SSE_RDRD   6, { D_20,B_16,D_36,B_32,0,0 }        /* e.g. mvsdk */
#define INSTR_SS_L0RDRD  6, { D_20,L8_8,B_16,D_36,B_32,0     } /* e.g. mvc   */
#define INSTR_SS_L2RDRD  6, { D_20,B_16,D_36,L8_8,B_32,0     } /* e.g. pka   */
#define INSTR_SS_LIRDRD  6, { D_20,L4_8,B_16,D_36,B_32,U4_12 } /* e.g. srp   */
#define INSTR_SS_LLRDRD  6, { D_20,L4_8,B_16,D_36,L4_12,B_32 } /* e.g. pack  */
#define INSTR_SS_RRRDRD  6, { D_20,R_8,B_16,D_36,B_32,R_12 }   /* e.g. mvck  */
#define INSTR_SS_RRRDRD2 6, { R_8,D_20,B_16,R_12,D_36,B_32 }   /* e.g. plo   */
#define INSTR_SS_RRRDRD3 6, { R_8,R_12,D_20,B_16,D_36,B_32 }   /* e.g. lmd   */
#define INSTR_SSF_RRDRD  6, { D_20,B_16,D_36,B_32,R_8,0 }      /* e.g. mvcos */
#define INSTR_SSF_RRDRD2 6, { R_8,D_20,B_16,D_36,B_32,0 }
#define INSTR_SSF_RERDRD2 6, { RE_8,D_20,B_16,D_36,B_32,0 }    /* e.g. lpd   */
#define INSTR_S_00       4, { 0,0,0,0,0,0 }                    /* e.g. hsch  */
#define INSTR_S_RD       4, { D_20,B_16,0,0,0,0 }              /* e.g. lpsw  */

#define MASK_E           { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_IE_UU       { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_MII_UPP     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIE_RRP     { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIE_RRPU    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIE_RRP0    { 0xff, 0x00, 0x00, 0x00, 0xf0, 0xff }
#define MASK_RIE_RRI0    { 0xff, 0x00, 0x00, 0x00, 0xf0, 0xff }
#define MASK_RIE_RUPI    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIE_R0PI    { 0xff, 0x00, 0x00, 0x00, 0xf0, 0xff }
#define MASK_RIE_RUPU    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIE_R0PU    { 0xff, 0x00, 0x00, 0x00, 0xf0, 0xff }
#define MASK_RIE_R0IU    { 0xff, 0x0f, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RIE_R0I0    { 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff }
#define MASK_RIE_R0UU    { 0xff, 0x0f, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RIE_R0U0    { 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff }
#define MASK_RIE_RRUUU   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIL_0P      { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_RP      { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_UP      { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_RI      { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_RU      { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_0P       { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_RI       { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_RP       { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_RU       { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_UP       { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIS_RURDI   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIS_R0RDI   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIS_RURDU   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIS_R0RDU   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0xff }
#define MASK_RRE_00      { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 }
#define MASK_RRE_0R      { 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00 }
#define MASK_RRE_AA      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_AR      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_F0      { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_FE0     { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_FF      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_FEF     { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_FFE     { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_FEFE    { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_R0      { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_RA      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RF      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RFE     { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RR      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RER     { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RERE    { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_FR      { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_FER     { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RR_OPT  { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRF_F0FF    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_FE0FF   { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_F0FF2   { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_F0FR    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_FE0FER  { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_FUFF    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_FEUFEFE { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_FUFF2   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_FEUFEFE2 { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_RURR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_RURR2   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_R0RR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_R0RR2   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_RMRR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0FF    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0FEFE  { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0RF    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0RFE   { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_UUFF    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_UUFFE   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_UUFEFE  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_0UFF    { 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00 }
#define MASK_RRF_0UFEF   { 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00 }
#define MASK_RRF_FFRU    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_FEFERU  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_M0RR    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_M0RER   { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_M0RERE  { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0RR    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_00RR    { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRF_UUFR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_UUFER   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_UURF    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_UURFE   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_0R       { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_0R_OPT   { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_FF       { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_FEF      { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_FFE      { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_FEFE     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_R0       { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_RR       { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_RER      { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_U0       { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_UR       { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRR_F0FF    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRR_FE0FEFE { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRS_RRRDU   { 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RRS_RRRD0   { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSE_RRRD    { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSE_RERERD  { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSE_CCRD    { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSE_RURD    { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSL_R0RD    { 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff }
#define MASK_RSL_LRDFU   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSL_LRDFEU  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSI_RRP     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_AARD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_CCRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_R0RD     { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_RE0RD    { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_RRRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_RERERD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_RURD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RSY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RERERD  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RURD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RURD2   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_R0RD    { 0xff, 0x0f, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_AARD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_CCRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXE_FRRD    { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RXE_FERRD   { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RXE_RRRD    { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RXE_RERRD   { 0xff, 0x00, 0x00, 0x00, 0xff, 0xff }
#define MASK_RXF_FRRDF   { 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RXF_FRRDFE  { 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RXF_FERRDFE { 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RXF_RRRDR   { 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff }
#define MASK_RXY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXY_RERRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXY_FRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXY_URRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RX_0RRD     { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_0RRD_OPT { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_FRRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_FERRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_RRRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_RERRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_URRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SI_URD      { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SIY_URD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_SIY_IRD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_SIL_RDI     { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SIL_RDU     { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SMI_U0RDP   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SSE_RDRD    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_L0RDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_L2RDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_LIRDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_LLRDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_RRRDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_RRRDRD2  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_RRRDRD3  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SSF_RRDRD   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SSF_RRDRD2  { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SSF_RERDRD2 { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_S_00        { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 }
#define MASK_S_RD        { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }


/* The opcode formats table (blueprints for .insn pseudo mnemonic).  */

const struct s390_opcode s390_opformats[] =
  {
  { "e",	OP8(0x00LL),	MASK_E,		INSTR_E,	3, 0 },
  { "ri",	OP8(0x00LL),	MASK_RI_RI,	INSTR_RI_RI,	3, 0 },
  { "rie",	OP8(0x00LL),	MASK_RIE_RRP,	INSTR_RIE_RRP,	3, 0 },
  { "ril",	OP8(0x00LL),	MASK_RIL_RP,	INSTR_RIL_RP,	3, 0 },
  { "rilu",	OP8(0x00LL),	MASK_RIL_RU,	INSTR_RIL_RU,	3, 0 },
  { "ris",	OP8(0x00LL),	MASK_RIS_RURDI,	INSTR_RIS_RURDI,3, 6 },
  { "rr",	OP8(0x00LL),	MASK_RR_RR,	INSTR_RR_RR,	3, 0 },
  { "rre",	OP8(0x00LL),	MASK_RRE_RR,	INSTR_RRE_RR,	3, 0 },
  { "rrf",	OP8(0x00LL),	MASK_RRF_RURR,	INSTR_RRF_RURR,	3, 0 },
  { "rrs",	OP8(0x00LL),	MASK_RRS_RRRDU,	INSTR_RRS_RRRDU,3, 6 },
  { "rs",	OP8(0x00LL),	MASK_RS_RRRD,	INSTR_RS_RRRD,	3, 0 },
  { "rse",	OP8(0x00LL),	MASK_RSE_RRRD,	INSTR_RSE_RRRD,	3, 0 },
  { "rsi",	OP8(0x00LL),	MASK_RSI_RRP,	INSTR_RSI_RRP,	3, 0 },
  { "rsy",	OP8(0x00LL),	MASK_RSY_RRRD,	INSTR_RSY_RRRD,	3, 3 },
  { "rx",	OP8(0x00LL),	MASK_RX_RRRD,	INSTR_RX_RRRD,	3, 0 },
  { "rxe",	OP8(0x00LL),	MASK_RXE_RRRD,	INSTR_RXE_RRRD,	3, 0 },
  { "rxf",	OP8(0x00LL),	MASK_RXF_RRRDR,	INSTR_RXF_RRRDR,3, 0 },
  { "rxy",	OP8(0x00LL),	MASK_RXY_RRRD,	INSTR_RXY_RRRD,	3, 3 },
  { "s",	OP8(0x00LL),	MASK_S_RD,	INSTR_S_RD,	3, 0 },
  { "si",	OP8(0x00LL),	MASK_SI_URD,	INSTR_SI_URD,	3, 0 },
  { "siy",	OP8(0x00LL),	MASK_SIY_URD,	INSTR_SIY_URD,	3, 3 },
  { "sil",	OP8(0x00LL),    MASK_SIL_RDI,   INSTR_SIL_RDI,  3, 6 },
  { "ss",	OP8(0x00LL),	MASK_SS_RRRDRD,	INSTR_SS_RRRDRD,3, 0 },
  { "sse",	OP8(0x00LL),	MASK_SSE_RDRD,	INSTR_SSE_RDRD,	3, 0 },
  { "ssf",	OP8(0x00LL),	MASK_SSF_RRDRD,	INSTR_SSF_RRDRD,3, 0 },
};

const int s390_num_opformats =
  sizeof (s390_opformats) / sizeof (s390_opformats[0]);

#include "s390-opc.tab"
@


1.32
log
@2013-05-23  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c: Fix length operand in RSL_LRDFU and RSL_LRDFEU
	instruction format.

2013-05-23  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/zarch-zEC12.d: Adjust length operands for cdzt, cxzt,
	czdt, and czxt.
	* gas/s390/zarch-zEC12.d: Likewise.
@
text
@d220 1
a220 1
#define J12_12 69                 /* PC relative offset at 12 */
d222 1
a222 1
#define J16_16 70                 /* PC relative offset at 16 */
d224 1
a224 1
#define J16_32 71                 /* PC relative offset at 16 */
d226 3
a228 1
#define J32_16 72                 /* PC relative offset at 16 */
d231 1
d234 1
a234 1
#define M_16OPT   73              /* 4 bit optional mask starting at 16 */
d236 1
a236 1
#define M_20OPT   74              /* 4 bit optional mask starting at 20 */
d290 1
a290 1
#define INSTR_MII_UPI    6, { U4_8,J12_12,I24_24 }             /* e.g. bprp  */
d452 1
a452 1
#define MASK_MII_UPI     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
@


1.31
log
@2012-10-26  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c: Accept empty lines in s390-opc.txt.
	* s390-opc.c: Add M_20OPT field. New instruction formats RRF_RURR2 and RRF_RMRR.
	* s390-opc.txt: Add new instructions.  New instruction type for lptea.

2012-10-26  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/testsuite/gas/s390/zarch-z10.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z10.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-z196.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z196.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-z9-109.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z990.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-z990.s: Refreshed.
	* gas/testsuite/gas/s390/zarch-zEC12.d: Refreshed.
	* gas/testsuite/gas/s390/zarch-zEC12.s: Refreshed.
@
text
@d391 2
a392 2
#define INSTR_RSL_LRDFU  6, { F_32,D_20,L4_8,B_16,U4_36,0 }    /* e.g. cdzt  */
#define INSTR_RSL_LRDFEU 6, { FE_32,D_20,L4_8,B_16,U4_36,0 }   /* e.g. cxzt  */
@


1.30
log
@2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (s390_parse_cpu): Add new option zEC12.
	* doc/as.texinfo: Document new option zEC12.
	* doc/c-s390.texi: Likewise.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/s390.exp: Run zEC12 tests.
	* gas/s390/zarch-zEC12.d: New file.
	* gas/s390/zarch-zEC12.s: New file.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c: Support new option zEC12.
	* s390-opc.c: Add new instruction formats.
	* s390-opc.txt: Add new instructions for zEC12.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390.h (s390_opcode_cpu_val): Add S390_OPCODE_ZEC12.
@
text
@d233 2
d347 1
d350 1
d507 1
d510 1
@


1.29
log
@2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * config/tc-s390.c (md_gather_operands): Fix check for floating
	    register pair operands.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * opcode/s390.h: Replace S390_OPERAND_REG_EVEN with
	    S390_OPERAND_REG_PAIR.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * s390-opc.c: Replace S390_OPERAND_REG_EVEN with
	    S390_OPERAND_REG_PAIR.  Fix INSTR_RRF_0UFEF instruction type.
	    * s390-opc.txt: Fix cxr instruction type.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	    * gas/s390/esa-g5.d: Fix fp register pair operands.
	    * gas/s390/esa-g5.s: Likewise.
	    * gas/s390/zarch-z196.d: Likewise.
	    * gas/s390/zarch-z196.s: Likewise.
	    * gas/s390/zarch-z9-109.d: Likewise.
	    * gas/s390/zarch-z9-109.s: Likewise.
	    * gas/s390/zarch-z9-ec.d: Likewise.
	    * gas/s390/zarch-z9-ec.s: Likewise.
@
text
@d174 3
a176 1
#define I16_16 49                 /* 16 bit signed value starting at 16 */
d178 1
a178 1
#define I16_32 50                 /* 16 bit signed value starting at 32 */
d180 3
a182 1
#define I32_16 51		  /* 32 bit signed value starting at 16 */
d187 1
a187 1
#define U4_8   52                 /* 4 bit unsigned value starting at 8 */
d189 1
a189 1
#define U4_12  53                 /* 4 bit unsigned value starting at 12 */
d191 1
a191 1
#define U4_16  54                 /* 4 bit unsigned value starting at 16 */
d193 1
a193 1
#define U4_20  55                 /* 4 bit unsigned value starting at 20 */
d195 5
a199 1
#define U4_32  56                 /* 4 bit unsigned value starting at 32 */
d201 3
a203 1
#define U8_8   57                 /* 8 bit unsigned value starting at 8 */
d205 1
a205 1
#define U8_16  58                 /* 8 bit unsigned value starting at 16 */
d207 1
a207 1
#define U8_24  59                 /* 8 bit unsigned value starting at 24 */
d209 1
a209 1
#define U8_32  60                 /* 8 bit unsigned value starting at 32 */
d211 1
a211 1
#define U16_16 61                 /* 16 bit unsigned value starting at 16 */
d213 1
a213 1
#define U16_32 62		  /* 16 bit unsigned value starting at 32 */
d215 1
a215 1
#define U32_16 63		  /* 32 bit unsigned value starting at 16 */
d220 3
a222 1
#define J16_16 64                 /* PC relative jump offset at 16 */
d224 3
a226 1
#define J32_16 65                 /* PC relative long offset at 16 */
d231 1
a231 1
#define M_16OPT   66              /* 4 bit optional mask starting at 16 */
d257 1
a257 1
      fe - even numbered floating point register operand
d263 1
a263 1
      re - even numbered register operand
d284 2
d387 2
d393 2
d396 1
a396 3
#define INSTR_RSY_CCRD   6, { C_8,C_12,D20_20,B_16,0,0 }       /* e.g. lamy  */
#define INSTR_RSY_RDRM   6, { R_8,D20_20,B_16,U4_12,0,0 }      /* e.g. loc   */
#define INSTR_RSY_RDR0   6, { R_8,D20_20,B_16,0,0,0 }          /* e.g. loc   */
d428 1
d444 2
d545 2
d558 2
a561 2
#define MASK_RSY_RDRM    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RDR0    { 0xff, 0x0f, 0x00, 0x00, 0x00, 0xff }
d586 1
@


1.28
log
@2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (md_gather_operands): Emit an error for odd
	numbered registers used as register pair operand.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* opcode/s390.h: Add S390_OPCODE_REG_EVEN flag.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c: Add new instruction types marking register pair
	operands.
	* s390-opc.txt: Match instructions having register pair operands
	to the new instruction types.

2011-05-24  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: Fix register pair operands.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/esa-z9-109.d: Likewise.
	* gas/s390/esa-z9-109.s: Likewise.
	* gas/s390/zarch-z196.d: Likewise.
	* gas/s390/zarch-z196.s: Likewise.
	* gas/s390/zarch-z9-109.d: Likewise.
	* gas/s390/zarch-z9-109.s: Likewise.
	* gas/s390/zarch-z900.d: Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z990.d: Likewise.
	* gas/s390/zarch-z990.s: Likewise.
@
text
@d70 1
a70 1
  { 4, 8, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d72 1
a72 1
  { 4, 12, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d74 1
a74 1
  { 4, 16, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d76 1
a76 1
  { 4, 20, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d78 1
a78 1
  { 4, 24, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d80 1
a80 1
  { 4, 28, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d82 1
a82 1
  { 4, 32, S390_OPERAND_GPR | S390_OPERAND_REG_EVEN },
d105 1
a105 1
  { 4, 8, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d107 1
a107 1
  { 4, 12, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d109 1
a109 1
  { 4, 16, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d111 1
a111 1
  { 4, 16, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d113 1
a113 1
  { 4, 24, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d115 1
a115 1
  { 4, 28, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d117 1
a117 1
  { 4, 32, S390_OPERAND_FPR | S390_OPERAND_REG_EVEN },
d339 1
a339 1
#define INSTR_RRF_0UFEF  4, { F_24,FE_28,U4_20,0,0,0 }         /* e.g. lxdtr */
@


1.27
log
@2010-10-11  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c: Make the instruction masks for the load/store on
	condition instructions to cover the condition code mask as well.
	* s390-opc.txt: lgoc -> locg and stgoc -> stocg.

2010-10-11  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/zarch-z196.d: Adjust the load/store on condition
	instructions.
	* gas/s390/zarch-z196.s: Likewise.
@
text
@d53 1
a53 1
  { 4, 12, S390_OPERAND_GPR|S390_OPERAND_OPTIONAL },
d67 18
d87 1
a87 1
#define F_8    10                 /* FPR starting at position 8 */
d89 1
a89 1
#define F_12   11                 /* FPR starting at position 12 */
d91 1
a91 1
#define F_16   12                 /* FPR starting at position 16 */
d93 1
a93 1
#define F_20   13                 /* FPR starting at position 16 */
d95 1
a95 1
#define F_24   14                 /* FPR starting at position 24 */
d97 1
a97 1
#define F_28   15                 /* FPR starting at position 28 */
d99 1
a99 1
#define F_32   16                 /* FPR starting at position 32 */
d102 18
d122 1
a122 1
#define A_8    17                 /* Access reg. starting at position 8 */
d124 1
a124 1
#define A_12   18                 /* Access reg. starting at position 12 */
d126 1
a126 1
#define A_24   19                 /* Access reg. starting at position 24 */
d128 1
a128 1
#define A_28   20                 /* Access reg. starting at position 28 */
d133 1
a133 1
#define C_8    21                 /* Control reg. starting at position 8 */
d135 1
a135 1
#define C_12   22                 /* Control reg. starting at position 12 */
d140 4
a143 4
#define B_16   23                 /* Base register starting at position 16 */
  { 4, 16, S390_OPERAND_BASE|S390_OPERAND_GPR },
#define B_32   24                 /* Base register starting at position 32 */
  { 4, 32, S390_OPERAND_BASE|S390_OPERAND_GPR },
d145 2
a146 2
#define X_12   25                 /* Index register starting at position 12 */
  { 4, 12, S390_OPERAND_INDEX|S390_OPERAND_GPR },
d150 1
a150 1
#define D_20   26                 /* Displacement starting at position 20 */
d152 3
a154 3
#define DO_20  27                 /* optional Displ. starting at position 20 */
  { 12, 20, S390_OPERAND_DISP|S390_OPERAND_OPTIONAL },
#define D_36   28                 /* Displacement starting at position 36 */
d156 2
a157 2
#define D20_20 29		  /* 20 bit displacement starting at 20 */
  { 20, 20, S390_OPERAND_DISP|S390_OPERAND_SIGNED },
d161 1
a161 1
#define L4_8   30                 /* 4 bit length starting at position 8 */
d163 1
a163 1
#define L4_12  31                 /* 4 bit length starting at position 12 */
d165 1
a165 1
#define L8_8   32                 /* 8 bit length starting at position 8 */
d170 1
a170 1
#define I8_8   33		  /* 8 bit signed value starting at 8 */
d172 1
a172 1
#define I8_32  34		  /* 8 bit signed value starting at 32 */
d174 1
a174 1
#define I16_16 35                 /* 16 bit signed value starting at 16 */
d176 1
a176 1
#define I16_32 36                 /* 16 bit signed value starting at 32 */
d178 1
a178 1
#define I32_16 37		  /* 32 bit signed value starting at 16 */
d183 1
a183 1
#define U4_8   38                 /* 4 bit unsigned value starting at 8 */
d185 1
a185 1
#define U4_12  39                 /* 4 bit unsigned value starting at 12 */
d187 1
a187 1
#define U4_16  40                 /* 4 bit unsigned value starting at 16 */
d189 1
a189 1
#define U4_20  41                 /* 4 bit unsigned value starting at 20 */
d191 1
a191 1
#define U4_32  42                 /* 4 bit unsigned value starting at 32 */
d193 1
a193 1
#define U8_8   43                 /* 8 bit unsigned value starting at 8 */
d195 1
a195 1
#define U8_16  44                 /* 8 bit unsigned value starting at 16 */
d197 1
a197 1
#define U8_24  45                 /* 8 bit unsigned value starting at 24 */
d199 1
a199 1
#define U8_32  46                 /* 8 bit unsigned value starting at 32 */
d201 1
a201 1
#define U16_16 47                 /* 16 bit unsigned value starting at 16 */
d203 1
a203 1
#define U16_32 48		  /* 16 bit unsigned value starting at 32 */
d205 1
a205 1
#define U32_16 49		  /* 32 bit unsigned value starting at 16 */
d210 1
a210 1
#define J16_16 50                 /* PC relative jump offset at 16 */
d212 1
a212 1
#define J32_16 51                 /* PC relative long offset at 16 */
d217 1
a217 1
#define M_16OPT   52              /* 4 bit optional mask starting at 16 */
d243 1
d248 2
d302 1
d304 3
d310 1
d312 2
d315 1
d320 1
d323 1
d325 1
d327 1
d332 1
d334 1
d336 2
d339 1
d341 1
d343 2
d348 1
d350 1
d354 3
d359 1
d363 1
d367 1
d373 1
d382 1
d384 1
d387 1
d389 1
d391 2
d395 1
d401 1
d403 1
d419 2
a420 1
#define INSTR_SSF_RRDRD2 6, { R_8,D_20,B_16,D_36,B_32,0 }      /* e.g. lpd   */
d457 1
d459 3
d465 1
d467 2
d470 1
d473 1
d476 1
d478 1
d480 1
d485 1
d487 1
d489 2
d492 1
d494 1
d496 2
d501 1
d503 1
d507 3
d512 1
d516 1
d520 1
d528 1
d530 1
d533 1
d540 1
d542 1
d544 2
d548 1
d554 1
d556 1
d573 1
@


1.26
log
@2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c (enum s390_opcde_cpu_val): Add S390_OPCODE_Z196.
	(main): Recognize the new CPU string.
	* s390-opc.c: Add new instruction formats and masks.
	* s390-opc.txt: Add new z196 instructions.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* opcode/s390.h: Add S390_OPCODE_Z196 to enum s390_opcode_cpu_val.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c: (md_parse_option): New option -march=z196.
	* doc/c-s390.texi: Document new option.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/s390.exp: Run the zarch-z196 test.
	* gas/s390/zarch-z196.d: Add new instructions.
	* gas/s390/zarch-z196.s: Likewise.
	* gas/s390/zarch-z9-109.d: Likewise.
	* gas/s390/zarch-z9-109.s: Likewise.
@
text
@d429 1
a429 1
#define MASK_RSY_RDR0    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
@


1.25
log
@2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-dis.c (print_insn_s390): Pick instruction with most
	specific mask.
	* s390-opc.c: Add unused bits to the insn mask.
	* s390-opc.txt: Reorder some instructions to prefer more recent
	versions.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: Adjust serveral instructions.
	* gas/s390/esa-reloc.d: Likewise.
	* gas/s390/esa-z990.d: Likewise.
	* gas/s390/zarch-reloc.d: Likewise.
	* gas/s390/zarch-z10.d: Likewise.
	* gas/s390/zarch-z9-ec.d: Likewise.
	* gas/s390/zarch-z900.d: Likewise.

2010-09-27  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* ld-s390/tlsbin.dd: bcr 0,%r7 -> nopr %r7.
	* ld-s390/tlsbin_64.dd: Likewise.
	* ld-s390/tlspic.dd: Likewise.
	* ld-s390/tlspic_64.dd: Likewise.
@
text
@d181 1
a181 1
#define M_16   52                 /* 4 bit optional mask starting at 16 */
d234 1
d276 1
d279 1
d285 1
a285 1
#define INSTR_RRF_M0RR   4, { R_24,R_28,M_16,0,0,0 }           /* e.g. sske  */
d288 2
d309 2
d342 1
d350 1
d390 1
d393 1
d402 2
d428 2
d456 1
@


1.24
log
@update copyright dates
@
text
@d401 4
a404 4
#define MASK_RSE_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSE_CCRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSE_RURD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSL_R0RD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
d415 4
a418 4
#define MASK_RXE_FRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXE_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXF_FRRDF   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXF_RRRDR   { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
@


1.23
log
@        * s390-opc.c (INSTR_RR_0R_OPT, INSTR_RX_0RRD_OPT, MASK_RR_0R_OPT,
        MASK_RX_0RRD_OPT): New instruction formats with optional arguments.
        * s390-opc.txt (nopr, nop): Use new instruction format.
@
text
@d2 2
a3 1
   Copyright 2000, 2001, 2003, 2007 Free Software Foundation, Inc.
@


1.22
log
@2008-09-26  Florian Krohm  <fkrohm@@us.ibm.com>

	* s390-opc.txt (thder, thdr): Change RRE_RR to RRE_FF.
	(cfxr, cfdr, cfer, clclu): Add esa flag.
	(sqd): Instruction added.
	(qadtr, qaxtr): Change RRF_FFFU to RRF_FUFF.
	* s390-opc.c: (INSTR_RRF_FFFU, MASK_RRF_FFFU): Removed.

2008-09-26  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/esa-g5.d: Adjust according to the s390-opc changes.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/esa-z990.d: Likewise.
	* gas/s390/esa-z990.s: Likewise.
	* gas/s390/zarch-z900.d: Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z990.d: Likewise.
	* gas/s390/zarch-z990.s: Likewise.
@
text
@d51 3
a53 1
#define R_16   3                  /* GPR starting at position 16 */
d55 1
a55 1
#define R_20   4                  /* GPR starting at position 20 */
d57 1
a57 1
#define R_24   5                  /* GPR starting at position 24 */
d59 1
a59 1
#define R_28   6                  /* GPR starting at position 28 */
d61 1
a61 1
#define RO_28  7                  /* optional GPR starting at position 28 */
d63 1
a63 1
#define R_32   8                  /* GPR starting at position 32 */
d68 1
a68 1
#define F_8    9                  /* FPR starting at position 8 */
d70 1
a70 1
#define F_12   10                 /* FPR starting at position 12 */
d72 1
a72 1
#define F_16   11                 /* FPR starting at position 16 */
d74 1
a74 1
#define F_20   12                 /* FPR starting at position 16 */
d76 1
a76 1
#define F_24   13                 /* FPR starting at position 24 */
d78 1
a78 1
#define F_28   14                 /* FPR starting at position 28 */
d80 1
a80 1
#define F_32   15                 /* FPR starting at position 32 */
d85 1
a85 1
#define A_8    16                 /* Access reg. starting at position 8 */
d87 1
a87 1
#define A_12   17                 /* Access reg. starting at position 12 */
d89 1
a89 1
#define A_24   18                 /* Access reg. starting at position 24 */
d91 1
a91 1
#define A_28   19                 /* Access reg. starting at position 28 */
d96 1
a96 1
#define C_8    20                 /* Control reg. starting at position 8 */
d98 1
a98 1
#define C_12   21                 /* Control reg. starting at position 12 */
d103 1
a103 1
#define B_16   22                 /* Base register starting at position 16 */
d105 1
a105 1
#define B_32   23                 /* Base register starting at position 32 */
d108 1
a108 1
#define X_12   24                 /* Index register starting at position 12 */
d113 1
a113 1
#define D_20   25                 /* Displacement starting at position 20 */
d115 3
a117 1
#define D_36   26                 /* Displacement starting at position 36 */
d119 1
a119 1
#define D20_20 27		  /* 20 bit displacement starting at 20 */
d124 1
a124 1
#define L4_8   28                 /* 4 bit length starting at position 8 */
d126 1
a126 1
#define L4_12  29                 /* 4 bit length starting at position 12 */
d128 1
a128 1
#define L8_8   30                 /* 8 bit length starting at position 8 */
d133 1
a133 1
#define I8_8   31		  /* 8 bit signed value starting at 8 */
d135 1
a135 1
#define I8_32  32		  /* 8 bit signed value starting at 32 */
d137 1
a137 1
#define I16_16 33                 /* 16 bit signed value starting at 16 */
d139 1
a139 1
#define I16_32 34                 /* 16 bit signed value starting at 32 */
d141 1
a141 1
#define I32_16 35		  /* 32 bit signed value starting at 16 */
d146 1
a146 1
#define U4_8   36                 /* 4 bit unsigned value starting at 8 */
d148 1
a148 1
#define U4_12  37                 /* 4 bit unsigned value starting at 12 */
d150 1
a150 1
#define U4_16  38                 /* 4 bit unsigned value starting at 16 */
d152 1
a152 1
#define U4_20  39                 /* 4 bit unsigned value starting at 20 */
d154 1
a154 1
#define U4_32  40                 /* 4 bit unsigned value starting at 32 */
d156 1
a156 1
#define U8_8   41                 /* 8 bit unsigned value starting at 8 */
d158 1
a158 1
#define U8_16  42                 /* 8 bit unsigned value starting at 16 */
d160 1
a160 1
#define U8_24  43                 /* 8 bit unsigned value starting at 24 */
d162 1
a162 1
#define U8_32  44                 /* 8 bit unsigned value starting at 32 */
d164 1
a164 1
#define U16_16 45                 /* 16 bit unsigned value starting at 16 */
d166 1
a166 1
#define U16_32 46		  /* 16 bit unsigned value starting at 32 */
d168 1
a168 1
#define U32_16 47		  /* 32 bit unsigned value starting at 16 */
d173 1
a173 1
#define J16_16 48                 /* PC relative jump offset at 16 */
d175 1
a175 1
#define J32_16 49                 /* PC relative long offset at 16 */
d180 1
a180 1
#define M_16   50                 /* 4 bit optional mask starting at 16 */
d285 1
d316 1
d391 1
d422 1
@


1.21
log
@2008-08-15  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-opc.c (INSTR_RRF_FFRU, MASK_RRF_FFRU): New instruction format.
	* s390-opc.txt (lxr, rrdtr, rrxtr): Fix instruction format.

2008-08-15  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/esa-g5.d: lxr operands are floating point.
	* gas/s390/esa-g5.s: Likewise.
	* gas/testsuite/gas/s390/zarch-z9-ec.d: rrdtr, rrxtr third
	operands is gpr.
	* gas/testsuite/gas/s390/zarch-z9-ec.s: Likewise.
@
text
@a275 1
#define INSTR_RRF_FFFU   4, { F_24,F_16,F_28,U4_20,0,0 }       /* e.g. qadtr */
a379 1
#define MASK_RRF_FFFU    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
@


1.20
log
@2008-05-27  Martin Schwidefsky  <schwidefsky@@de.ibm.com>

	* s390-opc.c (INSTR_RRF_R0RR): Fix RRF_R0RR operand format.

2008-05-27  Martin Schwidefsky  <schwidefsky@@de.ibm.com>

	* gas/s390/zarch-z990.d (idte): Fix operand format.
@
text
@d277 1
d382 1
@


1.19
log
@2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-mkopc.c (s390_opcode_cpu_val): S390_OPCODE_Z10 added.
	(s390_cond_extensions): Reduced extensions to the compare related.
	(main): z10 cpu type option added.
	(expandConditionalJump): Renamed to ...
	(insertExpandedMnemonic): ... this.

	* opcodes/s390-opc.c: Re-group the operand format makros.
	(INSTR_RIE_RRPU, INSTR_RIE_RRP0, INSTR_RIE_RUPI,
	INSTR_RIE_R0PI, INSTR_RIE_RUPU, INSTR_RIE_R0PU, INSTR_RIE_R0IU,
	INSTR_RIE_R0I0, INSTR_RIE_R0UU, INSTR_RIE_R0U0,
	INSTR_RIE_RRUUU, INSTR_RIS_RURDI, INSTR_RIS_R0RDI, INSTR_RIS_RURDU,
	INSTR_RIS_R0RDU, INSTR_RRF_U0RR, INSTR_RRF_00RR, INSTR_RRS_RRRDU,
	INSTR_RRS_RRRD0, INSTR_RXY_URRD, INSTR_SIY_IRD, INSTR_SIL_RDI,
	INSTR_SIL_RDU): New instruction formats added.
	(MASK_RIE_RRPU, MASK_RIE_RRP0, MASK_RIE_RUPI, MASK_RIE_R0PI,
	MASK_RIE_RUPU, MASK_RIE_R0PU, MASK_RIE_R0IU, MASK_RIE_R0I0,
	MASK_RIE_R0UU, MASK_RIE_R0U0, MASK_RIE_RRUUU, MASK_RIS_RURDI,
	MASK_RIS_R0RDI, MASK_RIS_RURDU, MASK_RIS_R0RDU, MASK_RRF_U0RR,
	MASK_RRF_00RR, MASK_RRS_RRRDU, MASK_RRS_RRRD0, MASK_RXY_URRD,
	MASK_SIY_IRD, MASK_SIL_RDI, MASK_SIL_RDU): New instruction format
	masks added.
	(s390_opformats): New formats added "ris", "rrs", "sil".
	* opcodes/s390-opc.txt: Add the conditional jumps with the
	extensions removed from automatic expansion in s390-mkopc.c manually.
	(asi - trtre): Add new System z10 EC instructions.
	* include/opcode/s390.h (s390_opcode_cpu_val): S390_OPCODE_Z10 added.

2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* config/tc-s390.c (md_parse_option): z10 option added.

2008-03-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z10.d: New file.
	* gas/s390/zarch-z10.s: New file.
	* gas/s390/s390.exp: Run the z10 testcases.
@
text
@d271 1
a271 1
#define INSTR_RRF_R0RR   4, { R_24,R_28,R_16,0,0,0 }           /* e.g. idte  */
@


1.18
log
@2008-03-06  Florian Krohm  <fkrohm@@us.ibm.com>

	* s390-opc.c (INSTR_RSL_R0RD): Fix operands.
	* s390-opc.txt (cmpsc): Duplicate entry removed.
	(dxr, sqdr, sqer, cxfbr, cdfbr, cefbr, lzer, lzdr, lzxr,
	cegbr, cdgbr, cxgbr, cegr, cdgr, cxgr, cxfr, cdfr, cefr, fixr, fidr,
	fier, cu42, cu41): Fix operand format.

2008-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/esa-g5.d (cdfbr, cdfr, cefbr, cefr, cxfbr, cxfr,
	dxr, fidr, fier, fixr, lzdr, lzer, lzxr, sqdr, sqer, tp): Fix
	operand format.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/zarch-z900.d (cdgbr, cdgr, cegbr, cegr, cxgbr,
	cxgr): Likewise.
	* gas/s390/zarch-z900.s: Likewise.
	* gas/s390/zarch-z9-109.d (cu41, cu42): Remove mask operand.
	* gas/s390/zarch-z9-109.s: Likewise.
@
text
@d45 2
d59 3
a61 1
#define R_32   7                  /* GPR starting at position 32 */
d64 3
a66 1
#define F_8    8                  /* FPR starting at position 8 */
d68 1
a68 1
#define F_12   9                  /* FPR starting at position 12 */
d70 1
a70 1
#define F_16   10                 /* FPR starting at position 16 */
d72 1
a72 1
#define F_20   11                 /* FPR starting at position 16 */
d74 1
a74 1
#define F_24   12                 /* FPR starting at position 24 */
d76 1
a76 1
#define F_28   13                 /* FPR starting at position 28 */
d78 1
a78 1
#define F_32   14                 /* FPR starting at position 32 */
d81 3
a83 1
#define A_8    15                 /* Access reg. starting at position 8 */
d85 1
a85 1
#define A_12   16                 /* Access reg. starting at position 12 */
d87 1
a87 1
#define A_24   17                 /* Access reg. starting at position 24 */
d89 1
a89 1
#define A_28   18                 /* Access reg. starting at position 28 */
d92 3
a94 1
#define C_8    19                 /* Control reg. starting at position 8 */
d96 1
a96 1
#define C_12   20                 /* Control reg. starting at position 12 */
d99 3
a101 1
#define B_16   21                 /* Base register starting at position 16 */
d103 1
a103 1
#define B_32   22                 /* Base register starting at position 32 */
d106 1
a106 1
#define X_12   23                 /* Index register starting at position 12 */
d109 3
a111 1
#define D_20   24                 /* Displacement starting at position 20 */
d113 1
a113 1
#define D_36   25                 /* Displacement starting at position 36 */
d115 1
a115 1
#define D20_20 26		  /* 20 bit displacement starting at 20 */
d118 3
a120 1
#define L4_8   27                 /* 4 bit length starting at position 8 */
d122 1
a122 1
#define L4_12  28                 /* 4 bit length starting at position 12 */
d124 1
a124 1
#define L8_8   29                 /* 8 bit length starting at position 8 */
d127 16
a142 1
#define U4_8   30                 /* 4 bit unsigned value starting at 8 */
d144 1
a144 1
#define U4_12  31                 /* 4 bit unsigned value starting at 12 */
d146 1
a146 1
#define U4_16  32                 /* 4 bit unsigned value starting at 16 */
d148 1
a148 1
#define U4_20  33                 /* 4 bit unsigned value starting at 20 */
d150 3
a152 1
#define U8_8   34                 /* 8 bit unsigned value starting at 8 */
d154 1
a154 1
#define U8_16  35                 /* 8 bit unsigned value starting at 16 */
d156 5
a160 3
#define I16_16 36                 /* 16 bit signed value starting at 16 */
  { 16, 16, S390_OPERAND_SIGNED },
#define U16_16 37                 /* 16 bit unsigned value starting at 16 */
d162 8
a169 1
#define J16_16 38                 /* PC relative jump offset at 16 */
d171 1
a171 1
#define J32_16 39                 /* PC relative long offset at 16 */
d173 4
a176 5
#define I32_16 40		  /* 32 bit signed value starting at 16 */
  { 32, 16, S390_OPERAND_SIGNED },
#define U32_16 41		  /* 32 bit unsigned value starting at 16 */
  { 32, 16, 0 },
#define M_16   42                 /* 4 bit optional mask starting at 16 */
a177 2
#define RO_28  43                 /* optional GPR starting at position 28 */
  { 4, 28, (S390_OPERAND_GPR | S390_OPERAND_OPTIONAL) }
d227 11
d248 4
d278 2
d287 2
d309 1
d316 3
d327 1
a329 1
#define INSTR_SSF_RRDRD  6, { D_20,B_16,D_36,B_32,R_8,0 }      /* e.g. mvcos */
d333 11
d354 4
d382 2
d391 2
d413 1
d420 3
d431 1
d434 1
a434 1
#define MASK_SSF_RRDRD   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
d445 1
d449 1
d461 1
@


1.17
log
@Change source files over to GPLv3.
@
text
@d234 1
a234 1
#define INSTR_RSL_R0RD   6, { R_8,D_20,B_16,0,0,0 }            /* e.g. tp    */
@


1.16
log
@2007-04-24  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-opc.c (MASK_SSF_RRDRD): Fourth nybble belongs to the
	opcode.
	* opcodes/s390-opc.txt (pfpo, ectg, csst): New z9-ec instructions added.


2007-04-24  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z9-ec.d: Add pfpo, ectg and csst.
	* gas/s390/zarch-z9-ec.s: Likewise.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GDB, GAS, and the GNU binutils.
d7 1
a7 1
   This program is free software; you can redistribute it and/or modify
d9 2
a10 2
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
d12 4
a15 4
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
d18 3
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */
@


1.15
log
@2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* opcodes/s390-opc.c (INSTR_RRE_FR, INSTR_RRF_F0FF2, INSTR_RRF_F0FR,
	INSTR_RRF_UUFF, INSTR_RRF_0UFF, INSTR_RRF_FFFU,	INSTR_RRR_F0FF): New
	instruction formats added.
	(MASK_RRE_FR, MASK_RRF_F0FF2, MASK_RRF_F0FR, MASK_RRF_UUFF,
	MASK_RRF_0UFF, MASK_RRF_FFFU, MASK_RRR_F0FF): New instruction format
	masks added.
	* opcodes/s390-opc.txt (lpdfr - tgxt): Decimal floating point
	instructions added.
	* opcodes/s390-mkopc.c (s390_opcode_cpu_val): S390_OPCODE_Z9_EC added.
	(main): z9-ec cpu type option added.
	* include/opcode/s390.h (s390_opcode_cpu_val): S390_OPCODE_Z9_EC added.

2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* config/tc-s390.c (md_parse_option): z9-ec option added.

2007-03-06  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* gas/s390/zarch-z9-ec.d: New file.
	* gas/s390/zarch-z9-ec.s: New file.
	* gas/s390/s390.exp: Run the z9-ec testcases.
@
text
@d348 1
a348 1
#define MASK_SSF_RRDRD   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
@


1.14
log
@* s390-opc.c (INSTR_SS_L2RDRD): New.
(MASK_SS_L2RDRD): New.
* s390-opc.txt (pka): Use it.

* gas/s390/esa-g5.s: Adjust for corrected PKA syntax.
* gas/s390/esa-g5.d: Adjust for corrected PKA syntax.
@
text
@d208 1
d213 2
d220 3
d230 1
d291 1
d294 2
d301 3
d311 1
@


1.13
log
@2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

        * s390-opc.c (INSTR_RRF_U0FR, MASK_RRF_U0FR): Removed.
	(INSTR_RRF_U0RF, MASK_RRF_U0RF): Added.
	* s390-opc.txt (cfxbr, cfdbr, cfebr, cgebr, cgdbr, cgxbr, cger, cgdr,
	cgxr, cfxr, cfdr, cfer): Instruction type set to INSTR_RRF_U0RF.

2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

        * gas/s390/esa-g5.d (cfxbr, cfebr, cfdbr): Exchanged floating
	point and fixed point operands.
	* gas/s390/esa-g5.s: Likewise.
	* gas/s390/zarch-z900.d (cfdr, cfer, cfxr, cgdbr, cgebr, cgxbr,
	cgdr, cger, cgxr): Likewise.
	* gas/s390/zarch-z900.s: Likewise.
@
text
@d252 1
d326 1
@


1.12
log
@2007-02-19  Andreas Krebbel  <krebbel1@@de.ibm.com>

	* s390-opc.txt ("efpc", "sfpc"): Set to RRE_RR_OPT instruction type.
	* s390-opc.c (s390_operands): Add RO_28 as optional gpr.
	(INSTR_RRE_RR_OPT, MASK_RRE_RR_OPT): New instruction type for efpc
	and sfpc.
@
text
@d215 2
a216 3
#define INSTR_RRF_U0FF   4, { F_24,U4_16,F_28,0,0,0 }          /* e.g. cfxbr */
#define INSTR_RRF_U0FR   4, { F_24,U4_16,R_28,0,0,0 }          /* e.g. cfebr */
#define INSTR_RRF_U0FR   4, { F_24,U4_16,R_28,0,0,0 }          /* e.g. cfxbr */
d289 1
a289 2
#define MASK_RRF_U0FR    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
#define MASK_RRF_U0FR    { 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00 }
@


1.11
log
@	* s390-dis.c (print_insn_s390): Print unsigned operands with %u.
	* s390-mkopc.c (s390_opcode_cpu_val): Add support for cpu type z9-109.
	(main): Likewise.
	* s390-opc.c (I32_16, U32_16, M_16): Add defines 32 bit immediates
	and 4 bit optional masks.
	(INSTR_RIL_RI, INSTR_RIL_RU, INSTR_RRF_M0RR, INSTR_RSE_CCRD,
	INSTR_RSY_CCRD, INSTR_SSF_RRDRD): Add new instruction formats.
	(MASK_RIL_RI, MASK_RIL_RU, MASK_RRF_M0RR, MASK_RSE_CCRD,
	MASK_RSY_CCRD, MASK_SSF_RRDRD): Likewise.
	(s390_opformats): Likewise.
	* s390-opc.txt: Add new instructions for cpu type z9-109.
@
text
@d136 4
a139 1
  { 4, 16, S390_OPERAND_OPTIONAL }
d208 3
d284 1
@


1.10
log
@Update the address and phone number of the FSF
@
text
@d130 7
a136 1
  { 32, 16, S390_OPERAND_PCREL }
d160 1
a160 1
      i - signed integer, 4 or 8 bit
d164 2
a165 1
      u - unsigned integer, 4 or 8 bit
d188 2
d212 1
d220 1
d227 1
d254 1
d261 2
d285 1
d293 1
d305 1
d327 1
d337 1
d354 1
@


1.9
log
@update copyright dates
@
text
@d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.8
log
@        * s390-dis.c (s390_extract_operand): Add support for long displacements.
        * s390-mkopc.c (s390_opcode_cpu_val): Add support for cpu type z990.
        * s390-opc.c (D20_20): Add define for 20 bit displacements.
        (INSTR_RRF_R0RR, INSTR_RSL_R0RD, INSTR_RSY_RRRD, INSTR_RSY_RURD,
        INSTR_RSY_AARD, INSTR_RXY_RRRD, INSTR_RXY_FRRD, INSTR_SIY_URD): Add
        new instruction formats.
        (MASK_RRF_R0RR, MASK_RSL_R0RD, MASK_RSY_RRRD, MASK_RSY_RURD,
        MASK_RSY_AARD, MASK_RXY_RRRD, MASK_RXY_FRRD, MASK_SIY_URD): Likewise.
        (s390_opformats): Likewise.
        * s390-opc.txt: Add new instructions for cpu type z990. Add missing
        hfp instructions. Add missing instructions pgin, pgout and xsch.
@
text
@d2 1
a2 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
@


1.7
log
@	* s390-dis.c (init_disasm): Rename S390_OPCODE_ESAME to
	S390_OPCODE_ZARCH.
	(print_insn_s390): Use new modes field of s390_opcodes.
	* s390-mkopc.c (ARCHBITS_ESAONLY, ARCHBITS_ESA, ARCHBITS_ESAME): Remove.
	(s390_opcode_mode_val, s390_opcode_cpu_val): New enums.
	(struct op_struct): Remove archbits. Add mode_bits and min_cpu.
	(insertOpcode): Replace archbits by min_cpu and mode_bits.
	(dumpTable): Write mode_bits and min_cpu instead of archbits.
	(main): Adapt to new format in s390-opcode.txt.
	* s390-opc.c (s390_opformats): Replace archbits by min_cpu and
	mode_bits.
	* s390-opc.txt: Replace archbits by min_cpu and mode_bits.
@
text
@d101 2
d104 1
a104 1
#define L4_8   26                 /* 4 bit length starting at position 8 */
d106 1
a106 1
#define L4_12  27                 /* 4 bit length starting at position 12 */
d108 1
a108 1
#define L8_8   28                 /* 8 bit length starting at position 8 */
d111 1
a111 1
#define U4_8   29                 /* 4 bit unsigned value starting at 8 */
d113 1
a113 1
#define U4_12  30                 /* 4 bit unsigned value starting at 12 */
d115 1
a115 1
#define U4_16  31                 /* 4 bit unsigned value starting at 16 */
d117 1
a117 1
#define U4_20  32                 /* 4 bit unsigned value starting at 20 */
d119 1
a119 1
#define U8_8   33                 /* 8 bit unsigned value starting at 8 */
d121 1
a121 1
#define U8_16  34                 /* 8 bit unsigned value starting at 16 */
d123 1
a123 1
#define I16_16 35                 /* 16 bit signed value starting at 16 */
d125 1
a125 1
#define U16_16 36                 /* 16 bit unsigned value starting at 16 */
d127 1
a127 1
#define J16_16 37                 /* PC relative jump offset at 16 */
d129 1
a129 1
#define J32_16 38                 /* PC relative long offset at 16 */
d199 1
d211 1
d213 3
d225 2
d232 1
d266 1
d278 1
d285 3
d292 2
d299 1
d324 1
d328 1
d331 1
@


1.6
log
@s390 assembler improvements and testsuite
@
text
@d296 17
a312 17
  { "e",	OP8(0x00LL),	MASK_E,		INSTR_E,	3 },
  { "ri",	OP8(0x00LL),	MASK_RI_RI,	INSTR_RI_RI,	3 },
  { "rie",	OP8(0x00LL),	MASK_RIE_RRP,	INSTR_RIE_RRP,	3 },
  { "ril",	OP8(0x00LL),	MASK_RIL_RP,	INSTR_RIL_RP,	3 },
  { "rr",	OP8(0x00LL),	MASK_RR_RR,	INSTR_RR_RR,	3 },
  { "rre",	OP8(0x00LL),	MASK_RRE_RR,	INSTR_RRE_RR,	3 },
  { "rrf",	OP8(0x00LL),	MASK_RRF_RURR,	INSTR_RRF_RURR,	3 },
  { "rs",	OP8(0x00LL),	MASK_RS_RRRD,	INSTR_RS_RRRD,	3 },
  { "rse",	OP8(0x00LL),	MASK_RSE_RRRD,	INSTR_RSE_RRRD,	3 },
  { "rsi",	OP8(0x00LL),	MASK_RSI_RRP,	INSTR_RSI_RRP,	3 },
  { "rx",	OP8(0x00LL),	MASK_RX_RRRD,	INSTR_RX_RRRD,	3 },
  { "rxe",	OP8(0x00LL),	MASK_RXE_RRRD,	INSTR_RXE_RRRD,	3 },
  { "rxf",	OP8(0x00LL),	MASK_RXF_RRRDR,	INSTR_RXF_RRRDR,3 },
  { "s",	OP8(0x00LL),	MASK_S_RD,	INSTR_S_RD,	3 },
  { "si",	OP8(0x00LL),	MASK_SI_URD,	INSTR_SI_URD,	3 },
  { "ss",	OP8(0x00LL),	MASK_SS_RRRDRD,	INSTR_SS_RRRDRD,3 },
  { "sse",	OP8(0x00LL),	MASK_SSE_RDRD,	INSTR_SSE_RDRD,	3 },
@


1.6.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a100 2
#define D20_20 26		  /* 20 bit displacement starting at 20 */
  { 20, 20, S390_OPERAND_DISP|S390_OPERAND_SIGNED },
d102 1
a102 1
#define L4_8   27                 /* 4 bit length starting at position 8 */
d104 1
a104 1
#define L4_12  28                 /* 4 bit length starting at position 12 */
d106 1
a106 1
#define L8_8   29                 /* 8 bit length starting at position 8 */
d109 1
a109 1
#define U4_8   30                 /* 4 bit unsigned value starting at 8 */
d111 1
a111 1
#define U4_12  31                 /* 4 bit unsigned value starting at 12 */
d113 1
a113 1
#define U4_16  32                 /* 4 bit unsigned value starting at 16 */
d115 1
a115 1
#define U4_20  33                 /* 4 bit unsigned value starting at 20 */
d117 1
a117 1
#define U8_8   34                 /* 8 bit unsigned value starting at 8 */
d119 1
a119 1
#define U8_16  35                 /* 8 bit unsigned value starting at 16 */
d121 1
a121 1
#define I16_16 36                 /* 16 bit signed value starting at 16 */
d123 1
a123 1
#define U16_16 37                 /* 16 bit unsigned value starting at 16 */
d125 1
a125 1
#define J16_16 38                 /* PC relative jump offset at 16 */
d127 1
a127 1
#define J32_16 39                 /* PC relative long offset at 16 */
a196 1
#define INSTR_RRF_R0RR   4, { R_24,R_28,R_16,0,0,0 }           /* e.g. idte  */
a207 1
#define INSTR_RSL_R0RD   6, { R_8,D_20,B_16,0,0,0 }            /* e.g. tp    */
a208 3
#define INSTR_RSY_RRRD   6, { R_8,R_12,D20_20,B_16,0,0 }       /* e.g. stmy  */
#define INSTR_RSY_RURD   6, { R_8,U4_12,D20_20,B_16,0,0 }      /* e.g. icmh  */
#define INSTR_RSY_AARD   6, { A_8,A_12,D20_20,B_16,0,0 }       /* e.g. lamy  */
a217 2
#define INSTR_RXY_RRRD   6, { R_8,D20_20,X_12,B_16,0,0 }       /* e.g. ly    */
#define INSTR_RXY_FRRD   6, { F_8,D20_20,X_12,B_16,0,0 }       /* e.g. ley   */
a222 1
#define INSTR_SIY_URD    6, { D20_20,B_16,U8_8,0,0,0 }         /* e.g. tmy   */
a255 1
#define MASK_RRF_R0RR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
a266 1
#define MASK_RSL_R0RD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a272 3
#define MASK_RSY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RURD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_AARD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a276 2
#define MASK_RXY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXY_FRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a281 1
#define MASK_SIY_URD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
d296 17
a312 20
  { "e",	OP8(0x00LL),	MASK_E,		INSTR_E,	3, 0 },
  { "ri",	OP8(0x00LL),	MASK_RI_RI,	INSTR_RI_RI,	3, 0 },
  { "rie",	OP8(0x00LL),	MASK_RIE_RRP,	INSTR_RIE_RRP,	3, 0 },
  { "ril",	OP8(0x00LL),	MASK_RIL_RP,	INSTR_RIL_RP,	3, 0 },
  { "rr",	OP8(0x00LL),	MASK_RR_RR,	INSTR_RR_RR,	3, 0 },
  { "rre",	OP8(0x00LL),	MASK_RRE_RR,	INSTR_RRE_RR,	3, 0 },
  { "rrf",	OP8(0x00LL),	MASK_RRF_RURR,	INSTR_RRF_RURR,	3, 0 },
  { "rs",	OP8(0x00LL),	MASK_RS_RRRD,	INSTR_RS_RRRD,	3, 0 },
  { "rse",	OP8(0x00LL),	MASK_RSE_RRRD,	INSTR_RSE_RRRD,	3, 0 },
  { "rsi",	OP8(0x00LL),	MASK_RSI_RRP,	INSTR_RSI_RRP,	3, 0 },
  { "rsy",	OP8(0x00LL),	MASK_RSY_RRRD,	INSTR_RSY_RRRD,	3, 3 },
  { "rx",	OP8(0x00LL),	MASK_RX_RRRD,	INSTR_RX_RRRD,	3, 0 },
  { "rxe",	OP8(0x00LL),	MASK_RXE_RRRD,	INSTR_RXE_RRRD,	3, 0 },
  { "rxf",	OP8(0x00LL),	MASK_RXF_RRRDR,	INSTR_RXF_RRRDR,3, 0 },
  { "rxy",	OP8(0x00LL),	MASK_RXY_RRRD,	INSTR_RXY_RRRD,	3, 3 },
  { "s",	OP8(0x00LL),	MASK_S_RD,	INSTR_S_RD,	3, 0 },
  { "si",	OP8(0x00LL),	MASK_SI_URD,	INSTR_SI_URD,	3, 0 },
  { "siy",	OP8(0x00LL),	MASK_SIY_URD,	INSTR_SIY_URD,	3, 3 },
  { "ss",	OP8(0x00LL),	MASK_SS_RRRDRD,	INSTR_SS_RRRDRD,3, 0 },
  { "sse",	OP8(0x00LL),	MASK_SSE_RDRD,	INSTR_SSE_RDRD,	3, 0 },
@


1.6.22.1
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d296 17
a312 17
  { "e",	OP8(0x00LL),	MASK_E,		INSTR_E,	3, 0 },
  { "ri",	OP8(0x00LL),	MASK_RI_RI,	INSTR_RI_RI,	3, 0 },
  { "rie",	OP8(0x00LL),	MASK_RIE_RRP,	INSTR_RIE_RRP,	3, 0 },
  { "ril",	OP8(0x00LL),	MASK_RIL_RP,	INSTR_RIL_RP,	3, 0 },
  { "rr",	OP8(0x00LL),	MASK_RR_RR,	INSTR_RR_RR,	3, 0 },
  { "rre",	OP8(0x00LL),	MASK_RRE_RR,	INSTR_RRE_RR,	3, 0 },
  { "rrf",	OP8(0x00LL),	MASK_RRF_RURR,	INSTR_RRF_RURR,	3, 0 },
  { "rs",	OP8(0x00LL),	MASK_RS_RRRD,	INSTR_RS_RRRD,	3, 0 },
  { "rse",	OP8(0x00LL),	MASK_RSE_RRRD,	INSTR_RSE_RRRD,	3, 0 },
  { "rsi",	OP8(0x00LL),	MASK_RSI_RRP,	INSTR_RSI_RRP,	3, 0 },
  { "rx",	OP8(0x00LL),	MASK_RX_RRRD,	INSTR_RX_RRRD,	3, 0 },
  { "rxe",	OP8(0x00LL),	MASK_RXE_RRRD,	INSTR_RXE_RRRD,	3, 0 },
  { "rxf",	OP8(0x00LL),	MASK_RXF_RRRDR,	INSTR_RXF_RRRDR,3, 0 },
  { "s",	OP8(0x00LL),	MASK_S_RD,	INSTR_S_RD,	3, 0 },
  { "si",	OP8(0x00LL),	MASK_SI_URD,	INSTR_SI_URD,	3, 0 },
  { "ss",	OP8(0x00LL),	MASK_SS_RRRDRD,	INSTR_SS_RRRDRD,3, 0 },
  { "sse",	OP8(0x00LL),	MASK_SSE_RDRD,	INSTR_SSE_RDRD,	3, 0 },
@


1.6.22.2
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a100 2
#define D20_20 26		  /* 20 bit displacement starting at 20 */
  { 20, 20, S390_OPERAND_DISP|S390_OPERAND_SIGNED },
d102 1
a102 1
#define L4_8   27                 /* 4 bit length starting at position 8 */
d104 1
a104 1
#define L4_12  28                 /* 4 bit length starting at position 12 */
d106 1
a106 1
#define L8_8   29                 /* 8 bit length starting at position 8 */
d109 1
a109 1
#define U4_8   30                 /* 4 bit unsigned value starting at 8 */
d111 1
a111 1
#define U4_12  31                 /* 4 bit unsigned value starting at 12 */
d113 1
a113 1
#define U4_16  32                 /* 4 bit unsigned value starting at 16 */
d115 1
a115 1
#define U4_20  33                 /* 4 bit unsigned value starting at 20 */
d117 1
a117 1
#define U8_8   34                 /* 8 bit unsigned value starting at 8 */
d119 1
a119 1
#define U8_16  35                 /* 8 bit unsigned value starting at 16 */
d121 1
a121 1
#define I16_16 36                 /* 16 bit signed value starting at 16 */
d123 1
a123 1
#define U16_16 37                 /* 16 bit unsigned value starting at 16 */
d125 1
a125 1
#define J16_16 38                 /* PC relative jump offset at 16 */
d127 1
a127 1
#define J32_16 39                 /* PC relative long offset at 16 */
a196 1
#define INSTR_RRF_R0RR   4, { R_24,R_28,R_16,0,0,0 }           /* e.g. idte  */
a207 1
#define INSTR_RSL_R0RD   6, { R_8,D_20,B_16,0,0,0 }            /* e.g. tp    */
a208 3
#define INSTR_RSY_RRRD   6, { R_8,R_12,D20_20,B_16,0,0 }       /* e.g. stmy  */
#define INSTR_RSY_RURD   6, { R_8,U4_12,D20_20,B_16,0,0 }      /* e.g. icmh  */
#define INSTR_RSY_AARD   6, { A_8,A_12,D20_20,B_16,0,0 }       /* e.g. lamy  */
a217 2
#define INSTR_RXY_RRRD   6, { R_8,D20_20,X_12,B_16,0,0 }       /* e.g. ly    */
#define INSTR_RXY_FRRD   6, { F_8,D20_20,X_12,B_16,0,0 }       /* e.g. ley   */
a222 1
#define INSTR_SIY_URD    6, { D20_20,B_16,U8_8,0,0,0 }         /* e.g. tmy   */
a255 1
#define MASK_RRF_R0RR    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
a266 1
#define MASK_RSL_R0RD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a272 3
#define MASK_RSY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_RURD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSY_AARD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a276 2
#define MASK_RXY_RRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXY_FRRD    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a281 1
#define MASK_SIY_URD     { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
a305 1
  { "rsy",	OP8(0x00LL),	MASK_RSY_RRRD,	INSTR_RSY_RRRD,	3, 3 },
a308 1
  { "rxy",	OP8(0x00LL),	MASK_RXY_RRRD,	INSTR_RXY_RRRD,	3, 3 },
a310 1
  { "siy",	OP8(0x00LL),	MASK_SIY_URD,	INSTR_SIY_URD,	3, 3 },
@


1.5
log
@	* opcodes/s390-opc.c: Add "low or high" and "not low or high"
	branch instructions for gcc 3.0.
	* opcodes/s390-opc.txt: Likewise.
@
text
@d134 1
a134 1
/* 8/16/48 bit opcodes */
d140 151
a290 67
#define INSTR_E      2, { 0,0,0,0,0,0 }                  /* e.g. pr   */
#define INSTR_RR     2, { R_8,R_12,0,0,0,0 }             /* e.g. lr   */
#define INSTR_RR_M   2, { U4_8,R_12,0,0,0,0 }            /* e.g. bcr  */
#define INSTR_RR_B   2, { R_12, 0,0,0,0,0 }              /* e.g. br   */
#define INSTR_RR_I   2, { U8_8, 0,0,0,0,0 }              /* e.g. svc  */
#define INSTR_RR_R   2, { R_8, 0,0,0,0,0 }               /* e.g. spm  */
#define INSTR_RR_E   2, { R_8,R_12,0,0,0,0 }             /* e.g. aer  */
#define INSTR_RR_D   2, { F_8,F_12,0,0,0,0 }             /* e.g. adr  */
#define INSTR_RR_X   2, { R_8,R_12,0,0,0,0 }             /* e.g. mxr  */
#define INSTR_RR_ED  2, { F_8,F_12,0,0,0,0 }             /* e.g. mer  */
#define INSTR_RR_DE  2, { F_8,F_12,0,0,0,0 }             /* e.g. lrer */
#define INSTR_RR_DX  2, { F_8,F_12,0,0,0,0 }             /* e.g. mxdr */
#define INSTR_RR_XD  2, { F_8,F_12,0,0,0,0 }             /* e.g. lrdr */
#define INSTR_RRE    4, { R_24,R_28,0,0,0,0 }            /* e.g. lura */
#define INSTR_RRE_A  4, { A_24,A_28,0,0,0,0 }            /* e.g. cpya */
#define INSTR_RRE_F  4, { F_24,F_28,0,0,0,0 }            /* e.g. debr */
#define INSTR_RRE_O  4, { 0,0,0,0,0,0 }                  /* e.g. palb */
#define INSTR_RRE_R  4, { R_24,0,0,0,0,0 }               /* e.g. ipm  */
#define INSTR_RRE_R2 4, { R_28,0,0,0,0,0 }               /* e.g. tb   */
#define INSTR_RRE_E  4, { F_24,0,0,0,0,0 }               /* e.g. sqer */
#define INSTR_RRE_D  4, { F_24,0,0,0,0,0 }               /* e.g. sqdr */
#define INSTR_RRE_X  4, { F_24,0,0,0,0,0 }               /* e.g. dxr  */
#define INSTR_RRE_AR 4, { A_24,R_28,0,0,0,0 }            /* e.g. sar  */
#define INSTR_RRE_RA 4, { R_24,A_28,0,0,0,0 }            /* e.g. ear  */
#define INSTR_RRF_M  4, { R_24,U4_16,R_28,0,0,0 }        /* e.g. cfxbr*/
#define INSTR_RRF_RM 4, { R_24,R_16,R_28,U4_20,0,0 }     /* e.g. didbr*/
#define INSTR_RRF_R  4, { R_16,R_24,R_28,0,0,0 }         /* e.g. madbr*/
#define INSTR_RRF_F  4, { F_16,F_24,F_28,0,0,0 }         /* e.g. madbr*/
#define INSTR_RS     4, { R_8,R_12,D_20,B_16,0,0 }       /* e.g. cs   */
#define INSTR_RS_A   4, { A_8,A_12,D_20,B_16,0,0 }       /* e.g. lam  */
#define INSTR_RS_C   4, { C_8,C_12,D_20,B_16,0,0 }       /* e.g. lctl */
#define INSTR_RS_M   4, { R_8,U4_12,D_20,B_16,0,0 }      /* e.g. icm  */
#define INSTR_RS_S   4, { R_8,D_20,B_16,0,0,0 }          /* e.g. sll  */
#define INSTR_RS_D   4, { R_8,D_20,B_16,0,0,0 }          /* e.g. sldl */
#define INSTR_RX     4, { R_8,D_20,X_12,B_16,0,0 }       /* e.g. l    */
#define INSTR_RX_M   4, { U4_8,D_20,X_12,B_16,0,0 }      /* e.g. bc   */
#define INSTR_RX_B   4, { D_20,X_12,B_16,0,0,0 }         /* e.g. b    */
#define INSTR_RX_E   4, { F_8,D_20,X_12,B_16,0,0 }       /* e.g. ae   */
#define INSTR_RX_D   4, { F_8,D_20,X_12,B_16,0,0 }       /* e.g. ad   */
#define INSTR_RX_ED  4, { F_8,D_20,X_12,B_16,0,0 }       /* e.g. me   */
#define INSTR_RX_DX  4, { F_8,D_20,X_12,B_16,0,0 }       /* e.g. mxd  */
#define INSTR_RXE    6, { R_8,D_20,X_12,B_16,0,0 }       /* e.g. agr  */
#define INSTR_RXE_F  6, { F_8,D_20,X_12,B_16,0,0 }       /* e.g. axbr */
#define INSTR_RXF    6, { F_32,D_20,X_12,B_16,F_8,0 }    /* e.g. madb */
#define INSTR_S      4, { D_20,B_16,0,0,0,0 }            /* e.g. lpsw */
#define INSTR_S_O    4, { 0,0,0,0,0,0 }                  /* e.g. hsch */
#define INSTR_SI     4, { D_20,B_16,U8_8,0,0,0 }         /* e.g. cli  */
#define INSTR_SS_RR  6, { D_20,R_8,B_16,D_36,B_32,R_12 } /* e.g. mvck */
#define INSTR_SS_LL  6, { D_20,L4_8,B_16,D_36,L4_12,B_32 } /* e.g. pack */
#define INSTR_SS_LI  6, { D_20,L4_8,B_16,D_36,B_32,U4_12 } /* e.g. srp  */
#define INSTR_SS_L   6, { D_20,L8_8,B_16,D_36,B_32,0 }   /* e.g. mvc  */
#define INSTR_SS_LMD 6, { R_8,R_12,D_20,B_16,D_36,B_32 } /* e.g. lmd  */
#define INSTR_SS_PLO 6, { R_8,D_20,B_16,R_12,D_36,B_32 } /* e.g. plo  */
#define INSTR_SSE    6, { D_20,B_16,D_36,B_32,0,0 }      /* e.g. mvsdk */
#define INSTR_RI     4, { R_8,I16_16,0,0,0,0 }           /* e.g. ahi  */
#define INSTR_RI_U   4, { R_8,U16_16,0,0,0,0 }           /* e.g. tml  */
#define INSTR_RI_A   4, { R_8,J16_16,0,0,0,0 }           /* e.g. brct */
#define INSTR_RI_MA  4, { U4_8,J16_16,0,0,0 }            /* e.g. brc  */
#define INSTR_RI_B   4, { J16_16,0,0,0,0 }               /* e.g. j    */
#define INSTR_RSI_A  4, { R_8,R_12,J16_16,0,0,0 }        /* e.g. brxh */
#define INSTR_RSE    6, { R_8,D_20,B_16,R_12,0,0 }       /* e.g. lmg  */
#define INSTR_RSE_M  6, { R_8,U4_12,D_20,B_16,0,0 }      /* e.g. icmh */
#define INSTR_RSE_R  6, { R_8,R_12,D_20,B_16,0,0 }       /* e.g. lmh  */
#define INSTR_RIE_A  6, { R_8,J16_16,R_12,0,0,0 }        /* e.g. brxhg */
#define INSTR_RIL_A  6, { R_8,J32_16,0,0,0,0 }           /* e.g. brasl */
#define INSTR_RIL_B  6, { J32_16,0,0,0,0,0 }             /* e.g. jg   */
#define INSTR_RIL_MA 6, { R_8,J32_16,0,0,0,0 }           /* e.g. brcl */
d292 1
a292 70
#define MASK_E      { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_M   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_B   { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_I   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_R   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_E   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_D   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_X   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_ED  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_DE  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_DX  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RR_XD  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRE    { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_A  { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_F  { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_O  { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 }
#define MASK_RRE_R  { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_R2 { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_E  { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_D  { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_X  { 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00 }
#define MASK_RRE_AR { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRE_RA { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 }
#define MASK_RRF_M  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_RM { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_R  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RRF_F  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_A   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_C   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_M   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_S   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RS_D   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_M   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_B   { 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_E   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_D   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_ED  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RX_DX  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RXE    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXE_F  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RXF    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_S      { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_S_O    { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 }
#define MASK_SI     { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_RR  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_LL  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_LI  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_L   { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_LMD { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SS_PLO { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_SSE    { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI     { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_U   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_A   { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_MA  { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RI_B   { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RSI_A  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RSE    { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSE_M  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RSE_R  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIE_A  { 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }
#define MASK_RIL_A  { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_B  { 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_M  { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }
#define MASK_RIL_MA { 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00 }

/* The opcode formats table (blueprints for .insn pseudo mnemonic). */
d297 16
a312 65
  { "ri",	OP8(0x00LL),	MASK_RI,	INSTR_RI,	3 },
  { "ri_a",	OP8(0x00LL),	MASK_RI_A,	INSTR_RI_A,	3 },
  { "ri_b",	OP8(0x00LL),	MASK_RI_B,	INSTR_RI_B,	3 },
  { "ri_ma",	OP8(0x00LL),	MASK_RI_MA,	INSTR_RI_MA,	3 },
  { "ri_u",	OP8(0x00LL),	MASK_RI_U,	INSTR_RI_U,	3 },
  { "rie_a",	OP8(0x00LL),	MASK_RIE_A,	INSTR_RIE_A,	3 },
  { "ril_a",	OP8(0x00LL),	MASK_RIL_A,	INSTR_RIL_A,	3 },
  { "ril_b",	OP8(0x00LL),	MASK_RIL_B,	INSTR_RIL_B,	3 },
  { "ril_ma",	OP8(0x00LL),	MASK_RIL_MA,	INSTR_RIL_MA,	3 },
  { "rr",	OP8(0x00LL),	MASK_RR,	INSTR_RR,	3 },
  { "rr_b",	OP8(0x00LL),	MASK_RR_B,	INSTR_RR_B,	3 },
  { "rr_d",	OP8(0x00LL),	MASK_RR_D,	INSTR_RR_D,	3 },
  { "rr_de",	OP8(0x00LL),	MASK_RR_DE,	INSTR_RR_DE,	3 },
  { "rr_dx",	OP8(0x00LL),	MASK_RR_DX,	INSTR_RR_DX,	3 },
  { "rr_e",	OP8(0x00LL),	MASK_RR_E,	INSTR_RR_E,	3 },
  { "rr_ed",	OP8(0x00LL),	MASK_RR_ED,	INSTR_RR_ED,	3 },
  { "rr_i",	OP8(0x00LL),	MASK_RR_I,	INSTR_RR_I,	3 },
  { "rr_m",	OP8(0x00LL),	MASK_RR_M,	INSTR_RR_M,	3 },
  { "rr_r",	OP8(0x00LL),	MASK_RR_R,	INSTR_RR_R,	3 },
  { "rr_x",	OP8(0x00LL),	MASK_RR_X,	INSTR_RR_X,	3 },
  { "rr_xd",	OP8(0x00LL),	MASK_RR_XD,	INSTR_RR_XD,	3 },
  { "rre",	OP8(0x00LL),	MASK_RRE,	INSTR_RRE,	3 },
  { "rre_a",	OP8(0x00LL),	MASK_RRE_A,	INSTR_RRE_A,	3 },
  { "rre_ar",	OP8(0x00LL),	MASK_RRE_AR,	INSTR_RRE_AR,	3 },
  { "rre_d",	OP8(0x00LL),	MASK_RRE_D,	INSTR_RRE_D,	3 },
  { "rre_e",	OP8(0x00LL),	MASK_RRE_E,	INSTR_RRE_E,	3 },
  { "rre_f",	OP8(0x00LL),	MASK_RRE_F,	INSTR_RRE_F,	3 },
  { "rre_o",	OP8(0x00LL),	MASK_RRE_O,	INSTR_RRE_O,	3 },
  { "rre_r",	OP8(0x00LL),	MASK_RRE_R,	INSTR_RRE_R,	3 },
  { "rre_r2",	OP8(0x00LL),	MASK_RRE_R2,	INSTR_RRE_R2,	3 },
  { "rre_ra",	OP8(0x00LL),	MASK_RRE_RA,	INSTR_RRE_RA,	3 },
  { "rre_x",	OP8(0x00LL),	MASK_RRE_X,	INSTR_RRE_X,	3 },
  { "rrf_f",	OP8(0x00LL),	MASK_RRF_F,	INSTR_RRF_F,	3 },
  { "rrf_m",	OP8(0x00LL),	MASK_RRF_M,	INSTR_RRF_M,	3 },
  { "rrf_r",	OP8(0x00LL),	MASK_RRF_R,	INSTR_RRF_R,	3 },
  { "rrf_rm",	OP8(0x00LL),	MASK_RRF_RM,	INSTR_RRF_RM,	3 },
  { "rs",	OP8(0x00LL),	MASK_RS,	INSTR_RS,	3 },
  { "rs_a",	OP8(0x00LL),	MASK_RS_A,	INSTR_RS_A,	3 },
  { "rs_c",	OP8(0x00LL),	MASK_RS_C,	INSTR_RS_C,	3 },
  { "rs_d",	OP8(0x00LL),	MASK_RS_D,	INSTR_RS_D,	3 },
  { "rs_m",	OP8(0x00LL),	MASK_RS_M,	INSTR_RS_M,	3 },
  { "rs_s",	OP8(0x00LL),	MASK_RS_S,	INSTR_RS_S,	3 },
  { "rse",	OP8(0x00LL),	MASK_RSE,	INSTR_RSE,	3 },
  { "rse_m",	OP8(0x00LL),	MASK_RSE_M,	INSTR_RSE_M,	3 },
  { "rse_r",	OP8(0x00LL),	MASK_RSE_R,	INSTR_RSE_R,	3 },
  { "rsi_a",	OP8(0x00LL),	MASK_RSI_A,	INSTR_RSI_A,	3 },
  { "rx",	OP8(0x00LL),	MASK_RX,	INSTR_RX,	3 },
  { "rx_b",	OP8(0x00LL),	MASK_RX_B,	INSTR_RX_B,	3 },
  { "rx_d",	OP8(0x00LL),	MASK_RX_D,	INSTR_RX_D,	3 },
  { "rx_dx",	OP8(0x00LL),	MASK_RX_DX,	INSTR_RX_DX,	3 },
  { "rx_e",	OP8(0x00LL),	MASK_RX_E,	INSTR_RX_E,	3 },
  { "rx_ed",	OP8(0x00LL),	MASK_RX_ED,	INSTR_RX_ED,	3 },
  { "rx_m",	OP8(0x00LL),	MASK_RX_M,	INSTR_RX_M,	3 },
  { "rxe",	OP8(0x00LL),	MASK_RXE,	INSTR_RXE,	3 },
  { "rxe_f",	OP8(0x00LL),	MASK_RXE_F,	INSTR_RXE_F,	3 },
  { "rxf",	OP8(0x00LL),	MASK_RXF,	INSTR_RXF,	3 },
  { "s",	OP8(0x00LL),	MASK_S,		INSTR_S,	3 },
  { "si",	OP8(0x00LL),	MASK_SI,	INSTR_SI,	3 },
  { "ss_l",	OP8(0x00LL),	MASK_SS_L,	INSTR_SS_L,	3 },
  { "ss_li",	OP8(0x00LL),	MASK_SS_LI,	INSTR_SS_LI,	3 },
  { "ss_ll",	OP8(0x00LL),	MASK_SS_LL,	INSTR_SS_LL,	3 },
  { "ss_lmd",	OP8(0x00LL),	MASK_SS_LMD,	INSTR_SS_LMD,	3 },
  { "ss_plo",	OP8(0x00LL),	MASK_SS_PLO,	INSTR_SS_PLO,	3 },
  { "ss_rr",	OP8(0x00LL),	MASK_SS_RR,	INSTR_SS_RR,	3 },
  { "sse",	OP8(0x00LL),	MASK_SSE,	INSTR_SSE,	3 },
d318 1
a318 642
/* The opcode table.

   The format of the opcode table is:

   NAME	     OPCODE	MASK	OPERANDS

   NAME is the name of the instruction.
   OPCODE is the instruction opcode.
   MASK is the opcode mask; this is used to tell the disassembler
     which bits in the actual opcode must match OPCODE.
   OPERANDS is the list of operands.

   The disassembler reads the table in order and prints the first
   instruction which matches. */

const struct s390_opcode s390_opcodes[] =
  {
  { "dp",    OP8(0xfdLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "mp",    OP8(0xfcLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "sp",    OP8(0xfbLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "ap",    OP8(0xfaLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "cp",    OP8(0xf9LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "zap",   OP8(0xf8LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "unpk",  OP8(0xf3LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "pack",  OP8(0xf2LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "mvo",   OP8(0xf1LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "srp",   OP8(0xf0LL), MASK_SS_LI, INSTR_SS_LI, 3},
  { "lmd",   OP8(0xefLL), MASK_SS_LMD, INSTR_SS_LMD, 2},
  { "plo",   OP8(0xeeLL), MASK_SS_PLO, INSTR_SS_PLO, 3},
  { "msdb",  OP48(0xed000000001fLL), MASK_RXF,   INSTR_RXF,   3},
  { "madb",  OP48(0xed000000001eLL), MASK_RXF,   INSTR_RXF,   3},
  { "ddb",   OP48(0xed000000001dLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mdb",   OP48(0xed000000001cLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sdb",   OP48(0xed000000001bLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "adb",   OP48(0xed000000001aLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "cdb",   OP48(0xed0000000019LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "kdb",   OP48(0xed0000000018LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "meeb",  OP48(0xed0000000017LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sqdb",  OP48(0xed0000000015LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sqeb",  OP48(0xed0000000014LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tcxb",  OP48(0xed0000000012LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tcdb",  OP48(0xed0000000011LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tceb",  OP48(0xed0000000010LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mseb",  OP48(0xed000000000fLL), MASK_RXF,   INSTR_RXF,   3},
  { "maeb",  OP48(0xed000000000eLL), MASK_RXF,   INSTR_RXF,   3},
  { "deb",   OP48(0xed000000000dLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mdeb",  OP48(0xed000000000cLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "seb",   OP48(0xed000000000bLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "aeb",   OP48(0xed000000000aLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "ceb",   OP48(0xed0000000009LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "keb",   OP48(0xed0000000008LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mxdb",  OP48(0xed0000000007LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "lxeb",  OP48(0xed0000000006LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "lxdb",  OP48(0xed0000000005LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "ldeb",  OP48(0xed0000000004LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "brxlg", OP48(0xec0000000045LL), MASK_RIE_A, INSTR_RIE_A, 2},
  { "brxhg", OP48(0xec0000000044LL), MASK_RIE_A, INSTR_RIE_A, 2},
  { "lmh",   OP48(0xeb0000000096LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "mvclu", OP48(0xeb000000008eLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "icmh",  OP48(0xeb0000000080LL), MASK_RSE_M, INSTR_RSE_M, 2},
  { "bxleg", OP48(0xeb0000000045LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "bxhg",  OP48(0xeb0000000044LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "cdsg",  OP48(0xeb000000003eLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "csg",   OP48(0xeb0000000030LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "lctlg", OP48(0xeb000000002fLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "stcmh", OP48(0xeb000000002cLL), MASK_RSE_M, INSTR_RSE_M, 2},
  { "stmh",  OP48(0xeb0000000026LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "stctg", OP48(0xeb0000000025LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "stmg",  OP48(0xeb0000000024LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "clmh",  OP48(0xeb0000000020LL), MASK_RSE_M, INSTR_RSE_M, 2},
  { "rll",   OP48(0xeb000000001dLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "rllg",  OP48(0xeb000000001cLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "tracg", OP48(0xeb000000000fLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "sllg",  OP48(0xeb000000000dLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "srlg",  OP48(0xeb000000000cLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "slag",  OP48(0xeb000000000bLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "srag",  OP48(0xeb000000000aLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "lmg",   OP48(0xeb0000000004LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "unpka", OP8(0xeaLL),            MASK_SS_L, INSTR_SS_L, 2},
  { "pka",   OP8(0xe9LL),            MASK_SS_L, INSTR_SS_L, 2},
  { "mvcin", OP8(0xe8LL),            MASK_SS_L, INSTR_SS_L, 3},
  { "mvcdk", OP16(0xe50fLL),         MASK_SSE, INSTR_SSE, 3},
  { "mvcsk", OP16(0xe50eLL),         MASK_SSE, INSTR_SSE, 3},
  { "tprot", OP16(0xe501LL),         MASK_SSE, INSTR_SSE, 3},
  { "strag", OP48(0xe50000000002LL), MASK_SSE, INSTR_SSE, 2},
  { "lasp",  OP16(0xe500LL),         MASK_SSE, INSTR_SSE, 3},
  { "slb",   OP48(0xe30000000099LL), MASK_RXE, INSTR_RXE, 2},
  { "alc",   OP48(0xe30000000098LL), MASK_RXE, INSTR_RXE, 2},
  { "dl",    OP48(0xe30000000097LL), MASK_RXE, INSTR_RXE, 2},
  { "ml",    OP48(0xe30000000096LL), MASK_RXE, INSTR_RXE, 2},
  { "llgh",  OP48(0xe30000000091LL), MASK_RXE, INSTR_RXE, 2},
  { "llgc",  OP48(0xe30000000090LL), MASK_RXE, INSTR_RXE, 2},
  { "lpq",   OP48(0xe3000000008fLL), MASK_RXE, INSTR_RXE, 2},
  { "stpq",  OP48(0xe3000000008eLL), MASK_RXE, INSTR_RXE, 2},
  { "slbg",  OP48(0xe30000000089LL), MASK_RXE, INSTR_RXE, 2},
  { "alcg",  OP48(0xe30000000088LL), MASK_RXE, INSTR_RXE, 2},
  { "dlg",   OP48(0xe30000000087LL), MASK_RXE, INSTR_RXE, 2},
  { "mlg",   OP48(0xe30000000086LL), MASK_RXE, INSTR_RXE, 2},
  { "xg",    OP48(0xe30000000082LL), MASK_RXE, INSTR_RXE, 2},
  { "og",    OP48(0xe30000000081LL), MASK_RXE, INSTR_RXE, 2},
  { "ng",    OP48(0xe30000000080LL), MASK_RXE, INSTR_RXE, 2},
  { "bctg",  OP48(0xe30000000046LL), MASK_RXE, INSTR_RXE, 2},
  { "strvh", OP48(0xe3000000003fLL), MASK_RXE, INSTR_RXE, 2},
  { "strv",  OP48(0xe3000000003eLL), MASK_RXE, INSTR_RXE, 2},
  { "clgf",  OP48(0xe30000000031LL), MASK_RXE, INSTR_RXE, 2},
  { "cgf",   OP48(0xe30000000030LL), MASK_RXE, INSTR_RXE, 2},
  { "strvg", OP48(0xe3000000002fLL), MASK_RXE, INSTR_RXE, 2},
  { "cvdg",  OP48(0xe3000000002eLL), MASK_RXE, INSTR_RXE, 2},
  { "stg",   OP48(0xe30000000024LL), MASK_RXE, INSTR_RXE, 2},
  { "clg",   OP48(0xe30000000021LL), MASK_RXE, INSTR_RXE, 2},
  { "cg",    OP48(0xe30000000020LL), MASK_RXE, INSTR_RXE, 2},
  { "lrvh",  OP48(0xe3000000001fLL), MASK_RXE, INSTR_RXE, 2},
  { "lrv",   OP48(0xe3000000001eLL), MASK_RXE, INSTR_RXE, 2},
  { "dsgf",  OP48(0xe3000000001dLL), MASK_RXE, INSTR_RXE, 2},
  { "msgf",  OP48(0xe3000000001cLL), MASK_RXE, INSTR_RXE, 2},
  { "slgf",  OP48(0xe3000000001bLL), MASK_RXE, INSTR_RXE, 2},
  { "algf",  OP48(0xe3000000001aLL), MASK_RXE, INSTR_RXE, 2},
  { "sgf",   OP48(0xe30000000019LL), MASK_RXE, INSTR_RXE, 2},
  { "agf",   OP48(0xe30000000018LL), MASK_RXE, INSTR_RXE, 2},
  { "llgt",  OP48(0xe30000000017LL), MASK_RXE, INSTR_RXE, 2},
  { "llgf",  OP48(0xe30000000016LL), MASK_RXE, INSTR_RXE, 2},
  { "lgh",   OP48(0xe30000000015LL), MASK_RXE, INSTR_RXE, 2},
  { "lgf",   OP48(0xe30000000014LL), MASK_RXE, INSTR_RXE, 2},
  { "lrvg",  OP48(0xe3000000000fLL), MASK_RXE, INSTR_RXE, 2},
  { "cvbg",  OP48(0xe3000000000eLL), MASK_RXE, INSTR_RXE, 2},
  { "dsg",   OP48(0xe3000000000dLL), MASK_RXE, INSTR_RXE, 2},
  { "msg",   OP48(0xe3000000000cLL), MASK_RXE, INSTR_RXE, 2},
  { "slg",   OP48(0xe3000000000bLL), MASK_RXE, INSTR_RXE, 2},
  { "alg",   OP48(0xe3000000000aLL), MASK_RXE, INSTR_RXE, 2},
  { "sg",    OP48(0xe30000000009LL), MASK_RXE, INSTR_RXE, 2},
  { "ag",    OP48(0xe30000000008LL), MASK_RXE, INSTR_RXE, 2},
  { "lg",    OP48(0xe30000000004LL), MASK_RXE, INSTR_RXE, 2},
  { "lrag",  OP48(0xe30000000003LL), MASK_RXE, INSTR_RXE, 2},
  { "unpku", OP8(0xe2LL), MASK_SS_L, INSTR_SS_L, 2},
  { "pku",   OP8(0xe1LL), MASK_SS_L, INSTR_SS_L, 2},
  { "edmk",  OP8(0xdfLL), MASK_SS_L, INSTR_SS_L, 3},
  { "ed",    OP8(0xdeLL), MASK_SS_L, INSTR_SS_L, 3},
  { "trt",   OP8(0xddLL), MASK_SS_L, INSTR_SS_L, 3},
  { "tr",    OP8(0xdcLL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvcs",  OP8(0xdbLL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "mvcp",  OP8(0xdaLL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "mvck",  OP8(0xd9LL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "xc",    OP8(0xd7LL), MASK_SS_L, INSTR_SS_L, 3},
  { "oc",    OP8(0xd6LL), MASK_SS_L, INSTR_SS_L, 3},
  { "clc",   OP8(0xd5LL), MASK_SS_L, INSTR_SS_L, 3},
  { "nc",    OP8(0xd4LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvz",   OP8(0xd3LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvc",   OP8(0xd2LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvn",   OP8(0xd1LL), MASK_SS_L, INSTR_SS_L, 3},
  { "jg",    OP16(0xc0f4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgno",  OP16(0xc0e4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnh",  OP16(0xc0d4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnp",  OP16(0xc0d4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgle",  OP16(0xc0c4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnl",  OP16(0xc0b4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnm",  OP16(0xc0b4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jghe",  OP16(0xc0a4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnlh", OP16(0xc094LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jge",   OP16(0xc084LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgz",   OP16(0xc084LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgne",  OP16(0xc074LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnz",  OP16(0xc074LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jglh",  OP16(0xc064LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnhe", OP16(0xc054LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgl",   OP16(0xc044LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgm",   OP16(0xc044LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnle", OP16(0xc034LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgh",   OP16(0xc024LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgp",   OP16(0xc024LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgo",   OP16(0xc014LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "brasl", OP16(0xc005LL), MASK_RIL_A, INSTR_RIL_A, 2},
  { "brcl",  OP16(0xc004LL), MASK_RIL_MA, INSTR_RIL_MA, 2},
  { "larl",  OP16(0xc000LL), MASK_RIL_A, INSTR_RIL_A, 2},
  { "icm",   OP8(0xbfLL),    MASK_RS_M, INSTR_RS_M, 3},
  { "stcm",  OP8(0xbeLL),    MASK_RS_M, INSTR_RS_M, 3},
  { "clm",   OP8(0xbdLL),    MASK_RS_M, INSTR_RS_M, 3},
  { "cds",   OP8(0xbbLL),    MASK_RS,  INSTR_RS, 3},
  { "cs",    OP8(0xbaLL),    MASK_RS,  INSTR_RS, 3},
  { "esea",  OP16(0xb99dLL), MASK_RRE_R, INSTR_RRE_R, 2},
  { "slbr",  OP16(0xb999LL), MASK_RRE, INSTR_RRE, 2},
  { "alcr",  OP16(0xb998LL), MASK_RRE, INSTR_RRE, 2},
  { "dlr",   OP16(0xb997LL), MASK_RRE, INSTR_RRE, 2},
  { "mlr",   OP16(0xb996LL), MASK_RRE, INSTR_RRE, 2},
  { "epsw",  OP16(0xb98dLL), MASK_RRE, INSTR_RRE, 2},
  { "slbgr", OP16(0xb989LL), MASK_RRE, INSTR_RRE, 2},
  { "alcgr", OP16(0xb988LL), MASK_RRE, INSTR_RRE, 2},
  { "dlgr",  OP16(0xb987LL), MASK_RRE, INSTR_RRE, 2},
  { "mlgr",  OP16(0xb986LL), MASK_RRE, INSTR_RRE, 2},
  { "troo",  OP16(0xb993LL), MASK_RRE, INSTR_RRE, 2},
  { "trot",  OP16(0xb992LL), MASK_RRE, INSTR_RRE, 2},
  { "trto",  OP16(0xb991LL), MASK_RRE, INSTR_RRE, 2},
  { "trtt",  OP16(0xb990LL), MASK_RRE, INSTR_RRE, 2},
  { "xgr",   OP16(0xb982LL), MASK_RRE, INSTR_RRE, 2},
  { "ogr",   OP16(0xb981LL), MASK_RRE, INSTR_RRE, 2},
  { "ngr",   OP16(0xb980LL), MASK_RRE, INSTR_RRE, 2},
  { "bctgr", OP16(0xb946LL), MASK_RRE, INSTR_RRE, 2},
  { "clgfr", OP16(0xb931LL), MASK_RRE, INSTR_RRE, 2},
  { "cgfr",  OP16(0xb930LL), MASK_RRE, INSTR_RRE, 2},
  { "sturg", OP16(0xb925LL), MASK_RRE, INSTR_RRE, 2},
  { "clgr",  OP16(0xb921LL), MASK_RRE, INSTR_RRE, 2},
  { "cgr",   OP16(0xb920LL), MASK_RRE, INSTR_RRE, 2},
  { "lrvr",  OP16(0xb91fLL), MASK_RRE, INSTR_RRE, 2},
  { "dsgfr", OP16(0xb91dLL), MASK_RRE, INSTR_RRE, 2},
  { "msgfr", OP16(0xb91cLL), MASK_RRE, INSTR_RRE, 2},
  { "slgfr", OP16(0xb91bLL), MASK_RRE, INSTR_RRE, 2},
  { "algfr", OP16(0xb91aLL), MASK_RRE, INSTR_RRE, 2},
  { "sgfr",  OP16(0xb919LL), MASK_RRE, INSTR_RRE, 2},
  { "agfr",  OP16(0xb918LL), MASK_RRE, INSTR_RRE, 2},
  { "llgtr", OP16(0xb917LL), MASK_RRE, INSTR_RRE, 2},
  { "llgfr", OP16(0xb916LL), MASK_RRE, INSTR_RRE, 2},
  { "lgfr",  OP16(0xb914LL), MASK_RRE, INSTR_RRE, 2},
  { "lcgfr", OP16(0xb913LL), MASK_RRE, INSTR_RRE, 2},
  { "ltgfr", OP16(0xb912LL), MASK_RRE, INSTR_RRE, 2},
  { "lngfr", OP16(0xb911LL), MASK_RRE, INSTR_RRE, 2},
  { "lpgfr", OP16(0xb910LL), MASK_RRE, INSTR_RRE, 2},
  { "lrvgr", OP16(0xb90fLL), MASK_RRE, INSTR_RRE, 2},
  { "eregg", OP16(0xb90eLL), MASK_RRE, INSTR_RRE, 2},
  { "dsgr",  OP16(0xb90dLL), MASK_RRE, INSTR_RRE, 2},
  { "msgr",  OP16(0xb90cLL), MASK_RRE, INSTR_RRE, 2},
  { "slgr",  OP16(0xb90bLL), MASK_RRE, INSTR_RRE, 2},
  { "algr",  OP16(0xb90aLL), MASK_RRE, INSTR_RRE, 2},
  { "sgr",   OP16(0xb909LL), MASK_RRE, INSTR_RRE, 2},
  { "agr",   OP16(0xb908LL), MASK_RRE, INSTR_RRE, 2},
  { "lurag", OP16(0xb905LL), MASK_RRE, INSTR_RRE, 2},
  { "lgr",   OP16(0xb904LL), MASK_RRE, INSTR_RRE, 2},
  { "lcgr",  OP16(0xb903LL), MASK_RRE, INSTR_RRE, 2},
  { "ltgr",  OP16(0xb902LL), MASK_RRE, INSTR_RRE, 2},
  { "lngr",  OP16(0xb901LL), MASK_RRE, INSTR_RRE, 2},
  { "lpgr",  OP16(0xb900LL), MASK_RRE, INSTR_RRE, 2},
  { "lctl",  OP8(0xb7LL),    MASK_RS_C, INSTR_RS_C, 3},
  { "stctl", OP8(0xb6LL),    MASK_RS_C, INSTR_RS_C, 3},
  { "cgxr",  OP16(0xb3caLL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cgdr",  OP16(0xb3c9LL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cger",  OP16(0xb3c8LL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cxgr",  OP16(0xb3c6LL), MASK_RRE, INSTR_RRE, 2},
  { "cdgr",  OP16(0xb3c5LL), MASK_RRE, INSTR_RRE, 2},
  { "cegr",  OP16(0xb3c4LL), MASK_RRE, INSTR_RRE, 2},
  { "cgxbr", OP16(0xb3aaLL), MASK_RRF_M, INSTR_RRF_M, 2},
  { "cgdbr", OP16(0xb3a9LL), MASK_RRF_M, INSTR_RRF_M, 2},
  { "cgebr", OP16(0xb3a8LL), MASK_RRF_M, INSTR_RRF_M, 2},
  { "cxgbr", OP16(0xb3a6LL), MASK_RRE, INSTR_RRE, 2},
  { "cdgbr", OP16(0xb3a5LL), MASK_RRE, INSTR_RRE, 2},
  { "cegbr", OP16(0xb3a4LL), MASK_RRE, INSTR_RRE, 2},
  { "cfxbr", OP16(0xb39aLL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "cfdbr", OP16(0xb399LL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "cfebr", OP16(0xb398LL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "cxfbr", OP16(0xb396LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cdfbr", OP16(0xb395LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cefbr", OP16(0xb394LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "efpc",  OP16(0xb38cLL), MASK_RRE, INSTR_RRE, 3},
  { "sfpc",  OP16(0xb384LL), MASK_RRE, INSTR_RRE, 3},
  { "lzxr",  OP16(0xb376LL), MASK_RRE_R, INSTR_RRE_R, 2},
  { "lzdr",  OP16(0xb375LL), MASK_RRE_R, INSTR_RRE_R, 2},
  { "lzer",  OP16(0xb374LL), MASK_RRE_R, INSTR_RRE_R, 2},
  { "fidbr", OP16(0xb35fLL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "didbr", OP16(0xb35bLL), MASK_RRF_RM, INSTR_RRF_RM, 3},
  { "thdr",  OP16(0xb359LL), MASK_RRE, INSTR_RRE, 2},
  { "thder", OP16(0xb358LL), MASK_RRE, INSTR_RRE, 2},
  { "fiebr", OP16(0xb357LL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "diebr", OP16(0xb353LL), MASK_RRF_RM, INSTR_RRF_RM, 3},
  { "tbdr",  OP16(0xb351LL), MASK_RRF_M, INSTR_RRF_M, 2},
  { "tbedr", OP16(0xb350LL), MASK_RRF_M, INSTR_RRF_M, 2},
  { "dxbr",  OP16(0xb34dLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mxbr",  OP16(0xb34cLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sxbr",  OP16(0xb34bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "axbr",  OP16(0xb34aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cxbr",  OP16(0xb349LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kxbr",  OP16(0xb348LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "fixbr", OP16(0xb347LL), MASK_RRF_M, INSTR_RRF_M, 3},
  { "lexbr", OP16(0xb346LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ldxbr", OP16(0xb345LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ledbr", OP16(0xb344LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lcxbr", OP16(0xb343LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ltxbr", OP16(0xb342LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lnxbr", OP16(0xb341LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lpxbr", OP16(0xb340LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "msdbr", OP16(0xb31fLL), MASK_RRF_R, INSTR_RRF_R, 3},
  { "madbr", OP16(0xb31eLL), MASK_RRF_R, INSTR_RRF_R, 3},
  { "ddbr",  OP16(0xb31dLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mdbr",  OP16(0xb31cLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sdbr",  OP16(0xb31bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "adbr",  OP16(0xb31aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cdbr",  OP16(0xb319LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kdbr",  OP16(0xb318LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "meebr", OP16(0xb317LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sqxbr", OP16(0xb316LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sqdbr", OP16(0xb315LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sqebr", OP16(0xb314LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lcdbr", OP16(0xb313LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ltdbr", OP16(0xb312LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lndbr", OP16(0xb311LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lpdbr", OP16(0xb310LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "msebr", OP16(0xb30fLL), MASK_RRF_R, INSTR_RRF_R, 3},
  { "maebr", OP16(0xb30eLL), MASK_RRF_R, INSTR_RRF_R, 3},
  { "debr",  OP16(0xb30dLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mdebr", OP16(0xb30cLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sebr",  OP16(0xb30bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "aebr",  OP16(0xb30aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cebr",  OP16(0xb309LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kebr",  OP16(0xb308LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mxdbr", OP16(0xb307LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lxebr", OP16(0xb306LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lxdbr", OP16(0xb305LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ldebr", OP16(0xb304LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lcebr", OP16(0xb303LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "ltebr", OP16(0xb302LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lnebr", OP16(0xb301LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "lpebr", OP16(0xb300LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "trap4", OP16(0xb2ffLL), MASK_S, INSTR_S, 3},
  { "lpswe", OP16(0xb2b2LL), MASK_S, INSTR_S, 2},
  { "stfl",  OP16(0xb2b1LL), MASK_S, INSTR_S, 2},
  { "cutfu", OP16(0xb2a7LL), MASK_RRE, INSTR_RRE, 3},
  { "cuutf", OP16(0xb2a6LL), MASK_RRE, INSTR_RRE, 3},
  { "tre",   OP16(0xb2a5LL), MASK_RRE, INSTR_RRE, 2},
  { "lfpc",  OP16(0xb29dLL), MASK_S, INSTR_S, 3},
  { "stfpc", OP16(0xb29cLL), MASK_S, INSTR_S, 3},
  { "srnm",  OP16(0xb299LL), MASK_S, INSTR_S, 3},
  { "stsi",  OP16(0xb27dLL), MASK_S, INSTR_S, 3},
  { "sacf",  OP16(0xb279LL), MASK_S, INSTR_S, 3},
  { "stcke", OP16(0xb278LL), MASK_S, INSTR_S, 2},
  { "rp",    OP16(0xb277LL), MASK_S, INSTR_S, 3},
  { "siga",  OP16(0xb274LL), MASK_S, INSTR_S, 3},
  { "cmpsc", OP16(0xb263LL), MASK_RRE, INSTR_RRE, 3},
  { "srst",  OP16(0xb25eLL), MASK_RRE, INSTR_RRE, 3},
  { "clst",  OP16(0xb25dLL), MASK_RRE, INSTR_RRE, 3},
  { "bsa",   OP16(0xb25aLL), MASK_RRE, INSTR_RRE, 3},
  { "bsg",   OP16(0xb258LL), MASK_RRE, INSTR_RRE, 3},
  { "cuse",  OP16(0xb257LL), MASK_RRE, INSTR_RRE, 3},
  { "mvst",  OP16(0xb255LL), MASK_RRE, INSTR_RRE, 3},
  { "mvpg",  OP16(0xb254LL), MASK_RRE, INSTR_RRE, 3},
  { "msr",   OP16(0xb252LL), MASK_RRE, INSTR_RRE, 3},
  { "csp",   OP16(0xb250LL), MASK_RRE, INSTR_RRE, 3},
  { "ear",   OP16(0xb24fLL), MASK_RRE_RA, INSTR_RRE_RA, 3},
  { "sar",   OP16(0xb24eLL), MASK_RRE_AR, INSTR_RRE_AR, 3},
  { "cpya",  OP16(0xb24dLL), MASK_RRE_A, INSTR_RRE_A, 3},
  { "tar",   OP16(0xb24cLL), MASK_RRE_AR, INSTR_RRE_AR, 3},
  { "lura",  OP16(0xb24bLL), MASK_RRE, INSTR_RRE, 3},
  { "esta",  OP16(0xb24aLL), MASK_RRE, INSTR_RRE, 3},
  { "ereg",  OP16(0xb249LL), MASK_RRE, INSTR_RRE, 3},
  { "palb",  OP16(0xb248LL), MASK_RRE_O, INSTR_RRE_O, 3},
  { "msta",  OP16(0xb247LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "stura", OP16(0xb246LL), MASK_RRE, INSTR_RRE, 3},
  { "sqer",  OP16(0xb245LL), MASK_RRE_E, INSTR_RRE_E, 3},
  { "sqdr",  OP16(0xb244LL), MASK_RRE_D, INSTR_RRE_D, 3},
  { "cksm",  OP16(0xb241LL), MASK_RRE, INSTR_RRE, 3},
  { "bakr",  OP16(0xb240LL), MASK_RRE, INSTR_RRE, 3},
  { "schm",  OP16(0xb23cLL), MASK_S_O, INSTR_S_O, 3},
  { "rchp",  OP16(0xb23bLL), MASK_S_O, INSTR_S_O, 3},
  { "stcps", OP16(0xb23aLL), MASK_S, INSTR_S, 3},
  { "stcrw", OP16(0xb239LL), MASK_S, INSTR_S, 3},
  { "rsch",  OP16(0xb238LL), MASK_S_O, INSTR_S_O, 3},
  { "sal",   OP16(0xb237LL), MASK_S_O, INSTR_S_O, 3},
  { "tpi",   OP16(0xb236LL), MASK_S, INSTR_S, 3},
  { "tsch",  OP16(0xb235LL), MASK_S, INSTR_S, 3},
  { "stsch", OP16(0xb234LL), MASK_S, INSTR_S, 3},
  { "ssch",  OP16(0xb233LL), MASK_S, INSTR_S, 3},
  { "msch",  OP16(0xb232LL), MASK_S, INSTR_S, 3},
  { "hsch",  OP16(0xb231LL), MASK_S_O, INSTR_S_O, 3},
  { "csch",  OP16(0xb230LL), MASK_S_O, INSTR_S_O, 3},
  { "dxr",   OP16(0xb22dLL), MASK_RRE_X, INSTR_RRE_X, 3},
  { "tb",    OP16(0xb22cLL), MASK_RRE_R2, INSTR_RRE_R2, 3},
  { "sske",  OP16(0xb22bLL), MASK_RRE, INSTR_RRE, 3},
  { "rrbe",  OP16(0xb22aLL), MASK_RRE, INSTR_RRE, 3},
  { "iske",  OP16(0xb229LL), MASK_RRE, INSTR_RRE, 3},
  { "pt",    OP16(0xb228LL), MASK_RRE, INSTR_RRE, 3},
  { "esar",  OP16(0xb227LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "epar",  OP16(0xb226LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ssar",  OP16(0xb225LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "iac",   OP16(0xb224LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ivsk",  OP16(0xb223LL), MASK_RRE, INSTR_RRE, 3},
  { "ipm",   OP16(0xb222LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ipte",  OP16(0xb221LL), MASK_RRE, INSTR_RRE, 3},
  { "cfc",   OP16(0xb21aLL), MASK_S, INSTR_S, 3},
  { "sac",   OP16(0xb219LL), MASK_S, INSTR_S, 3},
  { "pc",    OP16(0xb218LL), MASK_S, INSTR_S, 3},
  { "sie",   OP16(0xb214LL), MASK_S, INSTR_S, 3},
  { "stap",  OP16(0xb212LL), MASK_S, INSTR_S, 3},
  { "stpx",  OP16(0xb211LL), MASK_S, INSTR_S, 3},
  { "spx",   OP16(0xb210LL), MASK_S, INSTR_S, 3},
  { "ptlb",  OP16(0xb20dLL), MASK_S_O, INSTR_S_O, 3},
  { "ipk",   OP16(0xb20bLL), MASK_S_O, INSTR_S_O, 3},
  { "spka",  OP16(0xb20aLL), MASK_S, INSTR_S, 3},
  { "stpt",  OP16(0xb209LL), MASK_S, INSTR_S, 3},
  { "spt",   OP16(0xb208LL), MASK_S, INSTR_S, 3},
  { "stckc", OP16(0xb207LL), MASK_S, INSTR_S, 3},
  { "sckc",  OP16(0xb206LL), MASK_S, INSTR_S, 3},
  { "stck",  OP16(0xb205LL), MASK_S, INSTR_S, 3},
  { "sck",   OP16(0xb204LL), MASK_S, INSTR_S, 3},
  { "stidp", OP16(0xb202LL), MASK_S, INSTR_S, 3},
  { "lra",   OP8(0xb1LL),    MASK_RX, INSTR_RX, 3},
  { "mc",    OP8(0xafLL),    MASK_SI, INSTR_SI, 3},
  { "sigp",  OP8(0xaeLL),    MASK_RS, INSTR_RS, 3},
  { "stosm", OP8(0xadLL),    MASK_SI, INSTR_SI, 3},
  { "stnsm", OP8(0xacLL),    MASK_SI, INSTR_SI, 3},
  { "clcle", OP8(0xa9LL),    MASK_RS, INSTR_RS, 3},
  { "mvcle", OP8(0xa8LL),    MASK_RS, INSTR_RS, 3},
  { "j",     OP16(0xa7f4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jno",   OP16(0xa7e4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnh",   OP16(0xa7d4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnp",   OP16(0xa7d4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jle",   OP16(0xa7c4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnl",   OP16(0xa7b4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnm",   OP16(0xa7b4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jhe",   OP16(0xa7a4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnlh",  OP16(0xa794LL), MASK_RI_B, INSTR_RI_B, 3},
  { "je",    OP16(0xa784LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jz",    OP16(0xa784LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jne",   OP16(0xa774LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnz",   OP16(0xa774LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jlh",   OP16(0xa764LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnhe",  OP16(0xa754LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jl",    OP16(0xa744LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jm",    OP16(0xa744LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnle",  OP16(0xa734LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jh",    OP16(0xa724LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jp",    OP16(0xa724LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jo",    OP16(0xa714LL), MASK_RI_B, INSTR_RI_B, 3},
  { "cghi",  OP16(0xa70fLL), MASK_RI, INSTR_RI, 2},
  { "chi",   OP16(0xa70eLL), MASK_RI, INSTR_RI, 3},
  { "mghi",  OP16(0xa70dLL), MASK_RI, INSTR_RI, 2},
  { "mhi",   OP16(0xa70cLL), MASK_RI, INSTR_RI, 3},
  { "aghi",  OP16(0xa70bLL), MASK_RI, INSTR_RI, 2},
  { "ahi",   OP16(0xa70aLL), MASK_RI, INSTR_RI, 3},
  { "lghi",  OP16(0xa709LL), MASK_RI, INSTR_RI, 2},
  { "lhi",   OP16(0xa708LL), MASK_RI, INSTR_RI, 3},
  { "brctg", OP16(0xa707LL), MASK_RI_A, INSTR_RI_A, 2},
  { "brct",  OP16(0xa706LL), MASK_RI_A, INSTR_RI_A, 3},
  { "bras",  OP16(0xa705LL), MASK_RI_A, INSTR_RI_A, 3},
  { "brc",   OP16(0xa704LL), MASK_RI_MA, INSTR_RI_MA, 3},
  { "tmhl",  OP16(0xa703LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tmhh",  OP16(0xa702LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tml",   OP16(0xa701LL), MASK_RI_U, INSTR_RI_U, 3},
  { "tmll",  OP16(0xa701LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tmh",   OP16(0xa700LL), MASK_RI_U, INSTR_RI_U, 3},
  { "tmlh",  OP16(0xa700LL), MASK_RI_U, INSTR_RI_U, 2},
  { "llill", OP16(0xa50fLL), MASK_RI_U, INSTR_RI_U, 2},
  { "llilh", OP16(0xa50eLL), MASK_RI_U, INSTR_RI_U, 2},
  { "llihl", OP16(0xa50dLL), MASK_RI_U, INSTR_RI_U, 2},
  { "llihh", OP16(0xa50cLL), MASK_RI_U, INSTR_RI_U, 2},
  { "oill",  OP16(0xa50bLL), MASK_RI_U, INSTR_RI_U, 2},
  { "oilh",  OP16(0xa50aLL), MASK_RI_U, INSTR_RI_U, 2},
  { "oihl",  OP16(0xa509LL), MASK_RI_U, INSTR_RI_U, 2},
  { "oihh",  OP16(0xa508LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nill",  OP16(0xa507LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nilh",  OP16(0xa506LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nihl",  OP16(0xa505LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nihh",  OP16(0xa504LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iill",  OP16(0xa503LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iilh",  OP16(0xa502LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iihl",  OP16(0xa501LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iihh",  OP16(0xa500LL), MASK_RI_U, INSTR_RI_U, 2},
  { "stam",  OP8(0x9bLL), MASK_RS_A, INSTR_RS_A, 3},
  { "lam",   OP8(0x9aLL), MASK_RS_A, INSTR_RS_A, 3},
  { "trace", OP8(0x99LL), MASK_RS, INSTR_RS, 3},
  { "lm",    OP8(0x98LL), MASK_RS, INSTR_RS, 3},
  { "xi",    OP8(0x97LL), MASK_SI, INSTR_SI, 3},
  { "oi",    OP8(0x96LL), MASK_SI, INSTR_SI, 3},
  { "cli",   OP8(0x95LL), MASK_SI, INSTR_SI, 3},
  { "ni",    OP8(0x94LL), MASK_SI, INSTR_SI, 3},
  { "ts",    OP8(0x93LL), MASK_S, INSTR_S, 3},
  { "mvi",   OP8(0x92LL), MASK_SI, INSTR_SI, 3},
  { "tm",    OP8(0x91LL), MASK_SI, INSTR_SI, 3},
  { "stm",   OP8(0x90LL), MASK_RS, INSTR_RS, 3},
  { "slda",  OP8(0x8fLL), MASK_RS_D, INSTR_RS_D, 3},
  { "srda",  OP8(0x8eLL), MASK_RS_D, INSTR_RS_D, 3},
  { "sldl",  OP8(0x8dLL), MASK_RS_D, INSTR_RS_D, 3},
  { "srdl",  OP8(0x8cLL), MASK_RS_D, INSTR_RS_D, 3},
  { "sla",   OP8(0x8bLL), MASK_RS_S, INSTR_RS_S, 3},
  { "sra",   OP8(0x8aLL), MASK_RS_S, INSTR_RS_S, 3},
  { "sll",   OP8(0x89LL), MASK_RS_S, INSTR_RS_S, 3},
  { "srl",   OP8(0x88LL), MASK_RS_S, INSTR_RS_S, 3},
  { "bxle",  OP8(0x87LL), MASK_RS, INSTR_RS, 3},
  { "bxh",   OP8(0x86LL), MASK_RS, INSTR_RS, 3},
  { "brxle", OP8(0x85LL), MASK_RSI_A, INSTR_RSI_A, 3},
  { "brxh",  OP8(0x84LL), MASK_RSI_A, INSTR_RSI_A, 3},
  { "diag",  OP8(0x83LL), MASK_RS, INSTR_RS, 3},
  { "lpsw",  OP8(0x82LL), MASK_S, INSTR_S, 3},
  { "ssm",   OP8(0x80LL), MASK_S, INSTR_S, 3},
  { "su",    OP8(0x7fLL), MASK_RX_E, INSTR_RX_E, 3},
  { "au",    OP8(0x7eLL), MASK_RX_E, INSTR_RX_E, 3},
  { "de",    OP8(0x7dLL), MASK_RX_E, INSTR_RX_E, 3},
  { "me",    OP8(0x7cLL), MASK_RX_ED, INSTR_RX_ED, 3},
  { "se",    OP8(0x7bLL), MASK_RX_E, INSTR_RX_E, 3},
  { "ae",    OP8(0x7aLL), MASK_RX_E, INSTR_RX_E, 3},
  { "ce",    OP8(0x79LL), MASK_RX_E, INSTR_RX_E, 3},
  { "le",    OP8(0x78LL), MASK_RX_E, INSTR_RX_E, 3},
  { "ms",    OP8(0x71LL), MASK_RX,   INSTR_RX,   3},
  { "ste",   OP8(0x70LL), MASK_RX_E, INSTR_RX_E, 3},
  { "sw",    OP8(0x6fLL), MASK_RX_D, INSTR_RX_D, 3},
  { "aw",    OP8(0x6eLL), MASK_RX_D, INSTR_RX_D, 3},
  { "dd",    OP8(0x6dLL), MASK_RX_D, INSTR_RX_D, 3},
  { "md",    OP8(0x6cLL), MASK_RX_D, INSTR_RX_D, 3},
  { "sd",    OP8(0x6bLL), MASK_RX_D, INSTR_RX_D, 3},
  { "ad",    OP8(0x6aLL), MASK_RX_D, INSTR_RX_D, 3},
  { "cd",    OP8(0x69LL), MASK_RX_D, INSTR_RX_D, 3},
  { "ld",    OP8(0x68LL), MASK_RX_D, INSTR_RX_D, 3},
  { "mxd",   OP8(0x67LL), MASK_RX_DX, INSTR_RX_DX, 3},
  { "std",   OP8(0x60LL), MASK_RX_D, INSTR_RX_D, 3},
  { "sl",    OP8(0x5fLL), MASK_RX, INSTR_RX, 3},
  { "al",    OP8(0x5eLL), MASK_RX, INSTR_RX, 3},
  { "d",     OP8(0x5dLL), MASK_RX, INSTR_RX, 3},
  { "m",     OP8(0x5cLL), MASK_RX, INSTR_RX, 3},
  { "s",     OP8(0x5bLL), MASK_RX, INSTR_RX, 3},
  { "a",     OP8(0x5aLL), MASK_RX, INSTR_RX, 3},
  { "c",     OP8(0x59LL), MASK_RX, INSTR_RX, 3},
  { "l",     OP8(0x58LL), MASK_RX, INSTR_RX, 3},
  { "x",     OP8(0x57LL), MASK_RX, INSTR_RX, 3},
  { "o",     OP8(0x56LL), MASK_RX, INSTR_RX, 3},
  { "cl",    OP8(0x55LL), MASK_RX, INSTR_RX, 3},
  { "n",     OP8(0x54LL), MASK_RX, INSTR_RX, 3},
  { "lae",   OP8(0x51LL), MASK_RX, INSTR_RX, 3},
  { "st",    OP8(0x50LL), MASK_RX, INSTR_RX, 3},
  { "cvb",   OP8(0x4fLL), MASK_RX, INSTR_RX, 3},
  { "cvd",   OP8(0x4eLL), MASK_RX, INSTR_RX, 3},
  { "bas",   OP8(0x4dLL), MASK_RX, INSTR_RX, 3},
  { "mh",    OP8(0x4cLL), MASK_RX, INSTR_RX, 3},
  { "sh",    OP8(0x4bLL), MASK_RX, INSTR_RX, 3},
  { "ah",    OP8(0x4aLL), MASK_RX, INSTR_RX, 3},
  { "ch",    OP8(0x49LL), MASK_RX, INSTR_RX, 3},
  { "lh",    OP8(0x48LL), MASK_RX, INSTR_RX, 3},
  { "b",     OP16(0x47f0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bno",   OP16(0x47e0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnh",   OP16(0x47d0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnp",   OP16(0x47d0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "ble",   OP16(0x47c0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnl",   OP16(0x47b0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnm",   OP16(0x47b0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bhe",   OP16(0x47a0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnlh",  OP16(0x4790LL), MASK_RX_B, INSTR_RX_B, 3},
  { "be",    OP16(0x4780LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bz",    OP16(0x4780LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bne",   OP16(0x4770LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnz",   OP16(0x4770LL), MASK_RX_B, INSTR_RX_B, 3},
  { "blh",   OP16(0x4760LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnhe",  OP16(0x4750LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bl",    OP16(0x4740LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bm",    OP16(0x4740LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnle",  OP16(0x4730LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bh",    OP16(0x4720LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bp",    OP16(0x4720LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bo",    OP16(0x4710LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bc",    OP8(0x47LL),    MASK_RX_M, INSTR_RX_M, 3},
  { "nop",   OP16(0x4700LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bct",   OP8(0x46LL), MASK_RX, INSTR_RX, 3},
  { "bal",   OP8(0x45LL), MASK_RX, INSTR_RX, 3},
  { "ex",    OP8(0x44LL), MASK_RX, INSTR_RX, 3},
  { "ic",    OP8(0x43LL), MASK_RX, INSTR_RX, 3},
  { "stc",   OP8(0x42LL), MASK_RX, INSTR_RX, 3},
  { "la",    OP8(0x41LL), MASK_RX, INSTR_RX, 3},
  { "sth",   OP8(0x40LL), MASK_RX, INSTR_RX, 3},
  { "sur",   OP8(0x3fLL), MASK_RR_E, INSTR_RR_E, 3},
  { "aur",   OP8(0x3eLL), MASK_RR_E, INSTR_RR_E, 3},
  { "der",   OP8(0x3dLL), MASK_RR_E, INSTR_RR_E, 3},
  { "mer",   OP8(0x3cLL), MASK_RR_ED, INSTR_RR_ED, 3},
  { "ser",   OP8(0x3bLL), MASK_RR_E, INSTR_RR_E, 3},
  { "aer",   OP8(0x3aLL), MASK_RR_E, INSTR_RR_E, 3},
  { "cer",   OP8(0x39LL), MASK_RR_E, INSTR_RR_E, 3},
  { "ler",   OP8(0x38LL), MASK_RR_E, INSTR_RR_E, 3},
  { "sxr",   OP8(0x37LL), MASK_RR_X, INSTR_RR_X, 3},
  { "axr",   OP8(0x36LL), MASK_RR, INSTR_RR, 3},
  { "lrer",  OP8(0x35LL), MASK_RR_DE, INSTR_RR_DE, 3},
  { "her",   OP8(0x34LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lcer",  OP8(0x33LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lter",  OP8(0x32LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lner",  OP8(0x31LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lper",  OP8(0x30LL), MASK_RR_E, INSTR_RR_E, 3},
  { "swr",   OP8(0x2fLL), MASK_RR_D, INSTR_RR_D, 3},
  { "awr",   OP8(0x2eLL), MASK_RR_D, INSTR_RR_D, 3},
  { "ddr",   OP8(0x2dLL), MASK_RR_D, INSTR_RR_D, 3},
  { "mdr",   OP8(0x2cLL), MASK_RR_D, INSTR_RR_D, 3},
  { "sdr",   OP8(0x2bLL), MASK_RR_D, INSTR_RR_D, 3},
  { "adr",   OP8(0x2aLL), MASK_RR_D, INSTR_RR_D, 3},
  { "cdr",   OP8(0x29LL), MASK_RR_D, INSTR_RR_D, 3},
  { "ldr",   OP8(0x28LL), MASK_RR_D, INSTR_RR_D, 3},
  { "mxdr",  OP8(0x27LL), MASK_RR_DX, INSTR_RR_DX, 3},
  { "mxr",   OP8(0x26LL), MASK_RR_X, INSTR_RR_X, 3},
  { "lrdr",  OP8(0x25LL), MASK_RR_XD, INSTR_RR_XD, 3},
  { "hdr",   OP8(0x24LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lcdr",  OP8(0x23LL), MASK_RR_D, INSTR_RR_D, 3},
  { "ltdr",  OP8(0x22LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lndr",  OP8(0x21LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lpdr",  OP8(0x20LL), MASK_RR_D, INSTR_RR_D, 3},
  { "slr",   OP8(0x1fLL), MASK_RR, INSTR_RR, 3},
  { "alr",   OP8(0x1eLL), MASK_RR, INSTR_RR, 3},
  { "dr",    OP8(0x1dLL), MASK_RR, INSTR_RR, 3},
  { "mr",    OP8(0x1cLL), MASK_RR, INSTR_RR, 3},
  { "sr",    OP8(0x1bLL), MASK_RR, INSTR_RR, 3},
  { "ar",    OP8(0x1aLL), MASK_RR, INSTR_RR, 3},
  { "cr",    OP8(0x19LL), MASK_RR, INSTR_RR, 3},
  { "lr",    OP8(0x18LL), MASK_RR, INSTR_RR, 3},
  { "xr",    OP8(0x17LL), MASK_RR, INSTR_RR, 3},
  { "or",    OP8(0x16LL), MASK_RR, INSTR_RR, 3},
  { "clr",   OP8(0x15LL), MASK_RR, INSTR_RR, 3},
  { "nr",    OP8(0x14LL), MASK_RR, INSTR_RR, 3},
  { "lcr",   OP8(0x13LL), MASK_RR, INSTR_RR, 3},
  { "ltr",   OP8(0x12LL), MASK_RR, INSTR_RR, 3},
  { "lnr",   OP8(0x11LL), MASK_RR, INSTR_RR, 3},
  { "lpr",   OP8(0x10LL), MASK_RR, INSTR_RR, 3},
  { "clcl",  OP8(0x0fLL), MASK_RR, INSTR_RR, 3},
  { "mvcl",  OP8(0x0eLL), MASK_RR, INSTR_RR, 3},
  { "basr",  OP8(0x0dLL), MASK_RR, INSTR_RR, 3},
  { "bassm", OP8(0x0cLL), MASK_RR, INSTR_RR, 3},
  { "bsm",   OP8(0x0bLL), MASK_RR, INSTR_RR, 3},
  { "svc",   OP8(0x0aLL), MASK_RR_I, INSTR_RR_I, 3},
  { "br",    OP16(0x07f0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnor",  OP16(0x07e0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnhr",  OP16(0x07d0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnpr",  OP16(0x07d0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bler",  OP16(0x07c0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnlr",  OP16(0x07b0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnmr",  OP16(0x07b0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bher",  OP16(0x07a0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnlhr", OP16(0x0790LL), MASK_RR_B, INSTR_RR_B, 3},
  { "ber",   OP16(0x0780LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bzr",   OP16(0x0780LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bner",  OP16(0x0770LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnzr",  OP16(0x0770LL), MASK_RR_B, INSTR_RR_B, 3},
  { "blhr",  OP16(0x0760LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnher", OP16(0x0750LL), MASK_RR_B, INSTR_RR_B, 3},
  { "blr",   OP16(0x0740LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bmr",   OP16(0x0740LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnler", OP16(0x0730LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bhr",   OP16(0x0720LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bpr",   OP16(0x0720LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bor",   OP16(0x0710LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bcr",   OP8(0x07LL),    MASK_RR_M, INSTR_RR_M, 3},
  { "nopr",  OP16(0x0700LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bctr",  OP8(0x06LL),    MASK_RR,   INSTR_RR,   3},
  { "balr",  OP8(0x05LL),    MASK_RR,   INSTR_RR,   3},
  { "spm",   OP8(0x04LL),    MASK_RR_R, INSTR_RR_R, 3},
  { "trap2", OP16(0x01ffLL), MASK_E, INSTR_E, 3},
  { "sam64", OP16(0x010eLL), MASK_E, INSTR_E, 2},
  { "sam31", OP16(0x010dLL), MASK_E, INSTR_E, 2},
  { "sam24", OP16(0x010cLL), MASK_E, INSTR_E, 2},
  { "tam",   OP16(0x010bLL), MASK_E, INSTR_E, 2},
  { "sckpf", OP16(0x0107LL), MASK_E, INSTR_E, 3},
  { "upt",   OP16(0x0102LL), MASK_E, INSTR_E, 3},
  { "pr",    OP16(0x0101LL), MASK_E, INSTR_E, 3}
};

const int s390_num_opcodes =
  sizeof (s390_opcodes) / sizeof (s390_opcodes[0]);
@


1.4
log
@Add lgh instruction.
@
text
@d48 1
a48 1
  { 4, 12, S390_OPERAND_GPR },    
d50 1
a50 1
  { 4, 16, S390_OPERAND_GPR },    
d52 1
a52 1
  { 4, 20, S390_OPERAND_GPR },    
d54 1
a54 1
  { 4, 24, S390_OPERAND_GPR },    
d56 1
a56 1
  { 4, 28, S390_OPERAND_GPR },    
d90 1
a90 1
  { 4, 16, S390_OPERAND_BASE|S390_OPERAND_GPR },   
d92 1
a92 1
  { 4, 32, S390_OPERAND_BASE|S390_OPERAND_GPR },   
d95 1
a95 1
  { 4, 12, S390_OPERAND_INDEX|S390_OPERAND_GPR },                   
d98 1
a98 1
  { 12, 20, S390_OPERAND_DISP },  
d100 1
a100 1
  { 12, 36, S390_OPERAND_DISP },  
d103 1
a103 1
  { 4, 8, S390_OPERAND_LENGTH },                         
d107 1
a107 1
  { 8, 8, S390_OPERAND_LENGTH },                    
d118 1
a118 1
  { 8, 8, 0 },                    
d124 1
a124 1
  { 16, 16, 0 },                  
d126 1
a126 1
  { 16, 16, S390_OPERAND_PCREL },  
d207 1
a207 1
 
d276 1
a276 1
 
d509 1
d514 1
d756 1
d761 1
d880 1
d885 1
d964 1
d969 1
a993 3



@


1.3
log
@Add new opcodes
@
text
@d473 1
@


1.2
log
@Fix typos in ChangeLogs; fix dates in copyright notices
@
text
@d136 3
a138 3
#define OP16(x) { x>>8, x&255, 0x00, 0x00, 0x00, 0x00 }
#define OP48(x) { x>>40, (x>>32)&255, (x>>24)&255, \
                  (x>>16)&255, (x>>8)&255, x&255}
d279 2
a280 1
const struct s390_opcode s390_opformats[] = {
d367 40
a406 39
const struct s390_opcode s390_opcodes[] = {
  { "dp", OP8(0xfdLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "mp", OP8(0xfcLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "sp", OP8(0xfbLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "ap", OP8(0xfaLL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "cp", OP8(0xf9LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "zap", OP8(0xf8LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "unpk", OP8(0xf3LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "pack", OP8(0xf2LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "mvo", OP8(0xf1LL), MASK_SS_LL, INSTR_SS_LL, 3},
  { "srp", OP8(0xf0LL), MASK_SS_LI, INSTR_SS_LI, 3},
  { "lmd", OP8(0xefLL), MASK_SS_LMD, INSTR_SS_LMD, 2},
  { "plo", OP8(0xeeLL), MASK_SS_PLO, INSTR_SS_PLO, 3},
  { "msdb", OP48(0xed000000001fLL), MASK_RXF, INSTR_RXF, 3},
  { "madb", OP48(0xed000000001eLL), MASK_RXF, INSTR_RXF, 3},
  { "ddb", OP48(0xed000000001dLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mdb", OP48(0xed000000001cLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sdb", OP48(0xed000000001bLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "adb", OP48(0xed000000001aLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "cdb", OP48(0xed0000000019LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "kdb", OP48(0xed0000000018LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "meeb", OP48(0xed0000000017LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sqdb", OP48(0xed0000000015LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "sqeb", OP48(0xed0000000014LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tcxb", OP48(0xed0000000012LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tcdb", OP48(0xed0000000011LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "tceb", OP48(0xed0000000010LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mseb", OP48(0xed000000000fLL), MASK_RXF, INSTR_RXF, 3},
  { "maeb", OP48(0xed000000000eLL), MASK_RXF, INSTR_RXF, 3},
  { "deb", OP48(0xed000000000dLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mdeb", OP48(0xed000000000cLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "seb", OP48(0xed000000000bLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "aeb", OP48(0xed000000000aLL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "ceb", OP48(0xed0000000009LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "keb", OP48(0xed0000000008LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "mxdb", OP48(0xed0000000007LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "lxeb", OP48(0xed0000000006LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "lxdb", OP48(0xed0000000005LL), MASK_RXE_F, INSTR_RXE_F, 3},
  { "ldeb", OP48(0xed0000000004LL), MASK_RXE_F, INSTR_RXE_F, 3},
d409 3
a411 2
  { "lmh", OP48(0xeb0000000096LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "icmh", OP48(0xeb0000000080LL), MASK_RSE_M, INSTR_RSE_M, 2},
d413 3
a415 3
  { "bxhg", OP48(0xeb0000000044LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "cdsg", OP48(0xeb000000003eLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "csg", OP48(0xeb0000000030LL), MASK_RSE_R, INSTR_RSE_R, 2},
d418 1
a418 1
  { "stmh", OP48(0xeb0000000026LL), MASK_RSE_R, INSTR_RSE_R, 2},
d420 4
a423 4
  { "stmg", OP48(0xeb0000000024LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "clmh", OP48(0xeb0000000020LL), MASK_RSE_M, INSTR_RSE_M, 2},
  { "rll", OP48(0xeb000000001dLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "rllg", OP48(0xeb000000001cLL), MASK_RSE_R, INSTR_RSE_R, 2},
d425 11
a435 9
  { "sllg", OP48(0xeb000000000dLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "srlg", OP48(0xeb000000000cLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "slag", OP48(0xeb000000000bLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "srag", OP48(0xeb000000000aLL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "lmg", OP48(0xeb0000000004LL), MASK_RSE_R, INSTR_RSE_R, 2},
  { "mvcin", OP8(0xe8LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvcdk", OP16(0xe50fLL), MASK_SSE, INSTR_SSE, 3},
  { "mvcsk", OP16(0xe50eLL), MASK_SSE, INSTR_SSE, 3},
  { "tprot", OP16(0xe501LL), MASK_SSE, INSTR_SSE, 3},
d437 17
a453 17
  { "lasp", OP16(0xe500LL), MASK_SSE, INSTR_SSE, 3},
  { "slb", OP48(0xe30000000099LL), MASK_RXE, INSTR_RXE, 2},
  { "alc", OP48(0xe30000000098LL), MASK_RXE, INSTR_RXE, 2},
  { "dl", OP48(0xe30000000097LL), MASK_RXE, INSTR_RXE, 2},
  { "ml", OP48(0xe30000000096LL), MASK_RXE, INSTR_RXE, 2},
  { "llgh", OP48(0xe30000000091LL), MASK_RXE, INSTR_RXE, 2},
  { "llgc", OP48(0xe30000000090LL), MASK_RXE, INSTR_RXE, 2},
  { "lpq", OP48(0xe3000000008fLL), MASK_RXE, INSTR_RXE, 2},
  { "stpq", OP48(0xe3000000008eLL), MASK_RXE, INSTR_RXE, 2},
  { "slbg", OP48(0xe30000000089LL), MASK_RXE, INSTR_RXE, 2},
  { "alcg", OP48(0xe30000000088LL), MASK_RXE, INSTR_RXE, 2},
  { "dlg", OP48(0xe30000000087LL), MASK_RXE, INSTR_RXE, 2},
  { "mlg", OP48(0xe30000000086LL), MASK_RXE, INSTR_RXE, 2},
  { "xg", OP48(0xe30000000082LL), MASK_RXE, INSTR_RXE, 2},
  { "og", OP48(0xe30000000081LL), MASK_RXE, INSTR_RXE, 2},
  { "ng", OP48(0xe30000000080LL), MASK_RXE, INSTR_RXE, 2},
  { "bctg", OP48(0xe30000000046LL), MASK_RXE, INSTR_RXE, 2},
d455 3
a457 3
  { "strv", OP48(0xe3000000003eLL), MASK_RXE, INSTR_RXE, 2},
  { "clgf", OP48(0xe30000000031LL), MASK_RXE, INSTR_RXE, 2},
  { "cgf", OP48(0xe30000000030LL), MASK_RXE, INSTR_RXE, 2},
d459 53
a511 51
  { "cvdg", OP48(0xe3000000002eLL), MASK_RXE, INSTR_RXE, 2},
  { "stg", OP48(0xe30000000024LL), MASK_RXE, INSTR_RXE, 2},
  { "clg", OP48(0xe30000000021LL), MASK_RXE, INSTR_RXE, 2},
  { "cg", OP48(0xe30000000020LL), MASK_RXE, INSTR_RXE, 2},
  { "lrvh", OP48(0xe3000000001fLL), MASK_RXE, INSTR_RXE, 2},
  { "lrv", OP48(0xe3000000001eLL), MASK_RXE, INSTR_RXE, 2},
  { "dsgf", OP48(0xe3000000001dLL), MASK_RXE, INSTR_RXE, 2},
  { "msgf", OP48(0xe3000000001cLL), MASK_RXE, INSTR_RXE, 2},
  { "slgf", OP48(0xe3000000001bLL), MASK_RXE, INSTR_RXE, 2},
  { "algf", OP48(0xe3000000001aLL), MASK_RXE, INSTR_RXE, 2},
  { "sgf", OP48(0xe30000000019LL), MASK_RXE, INSTR_RXE, 2},
  { "agf", OP48(0xe30000000018LL), MASK_RXE, INSTR_RXE, 2},
  { "llgt", OP48(0xe30000000017LL), MASK_RXE, INSTR_RXE, 2},
  { "llgf", OP48(0xe30000000016LL), MASK_RXE, INSTR_RXE, 2},
  { "lgf", OP48(0xe30000000014LL), MASK_RXE, INSTR_RXE, 2},
  { "lrvg", OP48(0xe3000000000fLL), MASK_RXE, INSTR_RXE, 2},
  { "cvbg", OP48(0xe3000000000eLL), MASK_RXE, INSTR_RXE, 2},
  { "dsg", OP48(0xe3000000000dLL), MASK_RXE, INSTR_RXE, 2},
  { "msg", OP48(0xe3000000000cLL), MASK_RXE, INSTR_RXE, 2},
  { "slg", OP48(0xe3000000000bLL), MASK_RXE, INSTR_RXE, 2},
  { "alg", OP48(0xe3000000000aLL), MASK_RXE, INSTR_RXE, 2},
  { "sg", OP48(0xe30000000009LL), MASK_RXE, INSTR_RXE, 2},
  { "ag", OP48(0xe30000000008LL), MASK_RXE, INSTR_RXE, 2},
  { "lg", OP48(0xe30000000004LL), MASK_RXE, INSTR_RXE, 2},
  { "lrag", OP48(0xe30000000003LL), MASK_RXE, INSTR_RXE, 2},
  { "edmk", OP8(0xdfLL), MASK_SS_L, INSTR_SS_L, 3},
  { "ed", OP8(0xdeLL), MASK_SS_L, INSTR_SS_L, 3},
  { "trt", OP8(0xddLL), MASK_SS_L, INSTR_SS_L, 3},
  { "tr", OP8(0xdcLL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvcs", OP8(0xdbLL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "mvcp", OP8(0xdaLL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "mvck", OP8(0xd9LL), MASK_SS_RR, INSTR_SS_RR, 3},
  { "xc", OP8(0xd7LL), MASK_SS_L, INSTR_SS_L, 3},
  { "oc", OP8(0xd6LL), MASK_SS_L, INSTR_SS_L, 3},
  { "clc", OP8(0xd5LL), MASK_SS_L, INSTR_SS_L, 3},
  { "nc", OP8(0xd4LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvz", OP8(0xd3LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvc", OP8(0xd2LL), MASK_SS_L, INSTR_SS_L, 3},
  { "mvn", OP8(0xd1LL), MASK_SS_L, INSTR_SS_L, 3},
  { "jg", OP16(0xc0f4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgno", OP16(0xc0e4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnh", OP16(0xc0d4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnp", OP16(0xc0d4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgle", OP16(0xc0c4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnl", OP16(0xc0b4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnm", OP16(0xc0b4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jghe", OP16(0xc0a4LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jge", OP16(0xc084LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgz", OP16(0xc084LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgne", OP16(0xc074LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgnz", OP16(0xc074LL), MASK_RIL_B, INSTR_RIL_B, 2},
d513 2
a514 2
  { "jgl", OP16(0xc044LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgm", OP16(0xc044LL), MASK_RIL_B, INSTR_RIL_B, 2},
d516 3
a518 3
  { "jgh", OP16(0xc024LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgp", OP16(0xc024LL), MASK_RIL_B, INSTR_RIL_B, 2},
  { "jgo", OP16(0xc014LL), MASK_RIL_B, INSTR_RIL_B, 2},
d520 13
a532 13
  { "brcl", OP16(0xc004LL), MASK_RIL_MA, INSTR_RIL_MA, 2},
  { "larl", OP16(0xc000LL), MASK_RIL_A, INSTR_RIL_A, 2},
  { "icm", OP8(0xbfLL), MASK_RS_M, INSTR_RS_M, 3},
  { "stcm", OP8(0xbeLL), MASK_RS_M, INSTR_RS_M, 3},
  { "clm", OP8(0xbdLL), MASK_RS_M, INSTR_RS_M, 3},
  { "cds", OP8(0xbbLL), MASK_RS, INSTR_RS, 3},
  { "cs", OP8(0xbaLL), MASK_RS, INSTR_RS, 3},
  { "esea", OP16(0xb99dLL), MASK_RRE_R, INSTR_RRE_R, 2},
  { "slbr", OP16(0xb999LL), MASK_RRE, INSTR_RRE, 2},
  { "alcr", OP16(0xb998LL), MASK_RRE, INSTR_RRE, 2},
  { "dlr", OP16(0xb997LL), MASK_RRE, INSTR_RRE, 2},
  { "mlr", OP16(0xb996LL), MASK_RRE, INSTR_RRE, 2},
  { "epsw", OP16(0xb98dLL), MASK_RRE, INSTR_RRE, 2},
d535 9
a543 5
  { "dlgr", OP16(0xb987LL), MASK_RRE, INSTR_RRE, 2},
  { "mlgr", OP16(0xb986LL), MASK_RRE, INSTR_RRE, 2},
  { "xgr", OP16(0xb982LL), MASK_RRE, INSTR_RRE, 2},
  { "ogr", OP16(0xb981LL), MASK_RRE, INSTR_RRE, 2},
  { "ngr", OP16(0xb980LL), MASK_RRE, INSTR_RRE, 2},
d546 1
a546 1
  { "cgfr", OP16(0xb930LL), MASK_RRE, INSTR_RRE, 2},
d548 3
a550 3
  { "clgr", OP16(0xb921LL), MASK_RRE, INSTR_RRE, 2},
  { "cgr", OP16(0xb920LL), MASK_RRE, INSTR_RRE, 2},
  { "lrvr", OP16(0xb91fLL), MASK_RRE, INSTR_RRE, 2},
d555 2
a556 2
  { "sgfr", OP16(0xb919LL), MASK_RRE, INSTR_RRE, 2},
  { "agfr", OP16(0xb918LL), MASK_RRE, INSTR_RRE, 2},
d559 1
a559 1
  { "lgfr", OP16(0xb914LL), MASK_RRE, INSTR_RRE, 2},
d566 6
a571 6
  { "dsgr", OP16(0xb90dLL), MASK_RRE, INSTR_RRE, 2},
  { "msgr", OP16(0xb90cLL), MASK_RRE, INSTR_RRE, 2},
  { "slgr", OP16(0xb90bLL), MASK_RRE, INSTR_RRE, 2},
  { "algr", OP16(0xb90aLL), MASK_RRE, INSTR_RRE, 2},
  { "sgr", OP16(0xb909LL), MASK_RRE, INSTR_RRE, 2},
  { "agr", OP16(0xb908LL), MASK_RRE, INSTR_RRE, 2},
d573 13
a585 13
  { "lgr", OP16(0xb904LL), MASK_RRE, INSTR_RRE, 2},
  { "lcgr", OP16(0xb903LL), MASK_RRE, INSTR_RRE, 2},
  { "ltgr", OP16(0xb902LL), MASK_RRE, INSTR_RRE, 2},
  { "lngr", OP16(0xb901LL), MASK_RRE, INSTR_RRE, 2},
  { "lpgr", OP16(0xb900LL), MASK_RRE, INSTR_RRE, 2},
  { "lctl", OP8(0xb7LL), MASK_RS_C, INSTR_RS_C, 3},
  { "stctl", OP8(0xb6LL), MASK_RS_C, INSTR_RS_C, 3},
  { "cgxr", OP16(0xb3caLL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cgdr", OP16(0xb3c9LL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cger", OP16(0xb3c8LL), MASK_RRF_F, INSTR_RRF_F, 2},
  { "cxgr", OP16(0xb3c6LL), MASK_RRE, INSTR_RRE, 2},
  { "cdgr", OP16(0xb3c5LL), MASK_RRE, INSTR_RRE, 2},
  { "cegr", OP16(0xb3c4LL), MASK_RRE, INSTR_RRE, 2},
d598 5
a602 2
  { "efpc", OP16(0xb38cLL), MASK_RRE, INSTR_RRE, 3},
  { "sfpc", OP16(0xb384LL), MASK_RRE, INSTR_RRE, 3},
d605 2
d609 8
a616 6
  { "dxbr", OP16(0xb34dLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mxbr", OP16(0xb34cLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sxbr", OP16(0xb34bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "axbr", OP16(0xb34aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cxbr", OP16(0xb349LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kxbr", OP16(0xb348LL), MASK_RRE_F, INSTR_RRE_F, 3},
d627 6
a632 6
  { "ddbr", OP16(0xb31dLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "mdbr", OP16(0xb31cLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "sdbr", OP16(0xb31bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "adbr", OP16(0xb31aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cdbr", OP16(0xb319LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kdbr", OP16(0xb318LL), MASK_RRE_F, INSTR_RRE_F, 3},
d643 1
a643 1
  { "debr", OP16(0xb30dLL), MASK_RRE_F, INSTR_RRE_F, 3},
d645 4
a648 4
  { "sebr", OP16(0xb30bLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "aebr", OP16(0xb30aLL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "cebr", OP16(0xb309LL), MASK_RRE_F, INSTR_RRE_F, 3},
  { "kebr", OP16(0xb308LL), MASK_RRE_F, INSTR_RRE_F, 3},
d659 1
a659 1
  { "stfl", OP16(0xb2b1LL), MASK_S, INSTR_S, 2},
d662 2
a663 2
  { "tre", OP16(0xb2a5LL), MASK_RRE, INSTR_RRE, 2},
  { "lfpc", OP16(0xb29dLL), MASK_S, INSTR_S, 3},
d665 3
a667 3
  { "srnm", OP16(0xb299LL), MASK_S, INSTR_S, 3},
  { "stsi", OP16(0xb27dLL), MASK_S, INSTR_S, 3},
  { "sacf", OP16(0xb279LL), MASK_S, INSTR_S, 3},
d669 2
a670 2
  { "rp", OP16(0xb277LL), MASK_S, INSTR_S, 3},
  { "siga", OP16(0xb274LL), MASK_S, INSTR_S, 3},
d672 18
a689 18
  { "srst", OP16(0xb25eLL), MASK_RRE, INSTR_RRE, 3},
  { "clst", OP16(0xb25dLL), MASK_RRE, INSTR_RRE, 3},
  { "bsa", OP16(0xb25aLL), MASK_RRE, INSTR_RRE, 3},
  { "bsg", OP16(0xb258LL), MASK_RRE, INSTR_RRE, 3},
  { "cuse", OP16(0xb257LL), MASK_RRE, INSTR_RRE, 3},
  { "mvst", OP16(0xb255LL), MASK_RRE, INSTR_RRE, 3},
  { "mvpg", OP16(0xb254LL), MASK_RRE, INSTR_RRE, 3},
  { "msr", OP16(0xb252LL), MASK_RRE, INSTR_RRE, 3},
  { "csp", OP16(0xb250LL), MASK_RRE, INSTR_RRE, 3},
  { "ear", OP16(0xb24fLL), MASK_RRE_RA, INSTR_RRE_RA, 3},
  { "sar", OP16(0xb24eLL), MASK_RRE_AR, INSTR_RRE_AR, 3},
  { "cpya", OP16(0xb24dLL), MASK_RRE_A, INSTR_RRE_A, 3},
  { "tar", OP16(0xb24cLL), MASK_RRE_AR, INSTR_RRE_AR, 3},
  { "lura", OP16(0xb24bLL), MASK_RRE, INSTR_RRE, 3},
  { "esta", OP16(0xb24aLL), MASK_RRE, INSTR_RRE, 3},
  { "ereg", OP16(0xb249LL), MASK_RRE, INSTR_RRE, 3},
  { "palb", OP16(0xb248LL), MASK_RRE_O, INSTR_RRE_O, 3},
  { "msta", OP16(0xb247LL), MASK_RRE_R, INSTR_RRE_R, 3},
d691 6
a696 6
  { "sqer", OP16(0xb245LL), MASK_RRE_E, INSTR_RRE_E, 3},
  { "sqdr", OP16(0xb244LL), MASK_RRE_D, INSTR_RRE_D, 3},
  { "cksm", OP16(0xb241LL), MASK_RRE, INSTR_RRE, 3},
  { "bakr", OP16(0xb240LL), MASK_RRE, INSTR_RRE, 3},
  { "schm", OP16(0xb23cLL), MASK_S_O, INSTR_S_O, 3},
  { "rchp", OP16(0xb23bLL), MASK_S_O, INSTR_S_O, 3},
d699 4
a702 4
  { "rsch", OP16(0xb238LL), MASK_S_O, INSTR_S_O, 3},
  { "sal", OP16(0xb237LL), MASK_S_O, INSTR_S_O, 3},
  { "tpi", OP16(0xb236LL), MASK_S, INSTR_S, 3},
  { "tsch", OP16(0xb235LL), MASK_S, INSTR_S, 3},
d704 29
a732 29
  { "ssch", OP16(0xb233LL), MASK_S, INSTR_S, 3},
  { "msch", OP16(0xb232LL), MASK_S, INSTR_S, 3},
  { "hsch", OP16(0xb231LL), MASK_S_O, INSTR_S_O, 3},
  { "csch", OP16(0xb230LL), MASK_S_O, INSTR_S_O, 3},
  { "dxr", OP16(0xb22dLL), MASK_RRE_X, INSTR_RRE_X, 3},
  { "tb", OP16(0xb22cLL), MASK_RRE_R2, INSTR_RRE_R2, 3},
  { "sske", OP16(0xb22bLL), MASK_RRE, INSTR_RRE, 3},
  { "rrbe", OP16(0xb22aLL), MASK_RRE, INSTR_RRE, 3},
  { "iske", OP16(0xb229LL), MASK_RRE, INSTR_RRE, 3},
  { "pt", OP16(0xb228LL), MASK_RRE, INSTR_RRE, 3},
  { "esar", OP16(0xb227LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "epar", OP16(0xb226LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ssar", OP16(0xb225LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "iac", OP16(0xb224LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ivsk", OP16(0xb223LL), MASK_RRE, INSTR_RRE, 3},
  { "ipm", OP16(0xb222LL), MASK_RRE_R, INSTR_RRE_R, 3},
  { "ipte", OP16(0xb221LL), MASK_RRE, INSTR_RRE, 3},
  { "cfc", OP16(0xb21aLL), MASK_S, INSTR_S, 3},
  { "sac", OP16(0xb219LL), MASK_S, INSTR_S, 3},
  { "pc", OP16(0xb218LL), MASK_S, INSTR_S, 3},
  { "sie", OP16(0xb214LL), MASK_S, INSTR_S, 3},
  { "stap", OP16(0xb212LL), MASK_S, INSTR_S, 3},
  { "stpx", OP16(0xb211LL), MASK_S, INSTR_S, 3},
  { "spx", OP16(0xb210LL), MASK_S, INSTR_S, 3},
  { "ptlb", OP16(0xb20dLL), MASK_S_O, INSTR_S_O, 3},
  { "ipk", OP16(0xb20bLL), MASK_S_O, INSTR_S_O, 3},
  { "spka", OP16(0xb20aLL), MASK_S, INSTR_S, 3},
  { "stpt", OP16(0xb209LL), MASK_S, INSTR_S, 3},
  { "spt", OP16(0xb208LL), MASK_S, INSTR_S, 3},
d734 3
a736 3
  { "sckc", OP16(0xb206LL), MASK_S, INSTR_S, 3},
  { "stck", OP16(0xb205LL), MASK_S, INSTR_S, 3},
  { "sck", OP16(0xb204LL), MASK_S, INSTR_S, 3},
d738 34
a771 34
  { "lra", OP8(0xb1LL), MASK_RX, INSTR_RX, 3},
  { "mc", OP8(0xafLL), MASK_SI, INSTR_SI, 3},
  { "sigp", OP8(0xaeLL), MASK_RS, INSTR_RS, 3},
  { "stosm", OP8(0xadLL), MASK_SI, INSTR_SI, 3},
  { "stnsm", OP8(0xacLL), MASK_SI, INSTR_SI, 3},
  { "clcle", OP8(0xa9LL), MASK_RS, INSTR_RS, 3},
  { "mvcle", OP8(0xa8LL), MASK_RS, INSTR_RS, 3},
  { "j", OP16(0xa7f4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jno", OP16(0xa7e4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnh", OP16(0xa7d4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnp", OP16(0xa7d4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jle", OP16(0xa7c4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnl", OP16(0xa7b4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnm", OP16(0xa7b4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jhe", OP16(0xa7a4LL), MASK_RI_B, INSTR_RI_B, 3},
  { "je", OP16(0xa784LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jz", OP16(0xa784LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jne", OP16(0xa774LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnz", OP16(0xa774LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnhe", OP16(0xa754LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jl", OP16(0xa744LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jm", OP16(0xa744LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jnle", OP16(0xa734LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jh", OP16(0xa724LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jp", OP16(0xa724LL), MASK_RI_B, INSTR_RI_B, 3},
  { "jo", OP16(0xa714LL), MASK_RI_B, INSTR_RI_B, 3},
  { "cghi", OP16(0xa70fLL), MASK_RI, INSTR_RI, 2},
  { "chi", OP16(0xa70eLL), MASK_RI, INSTR_RI, 3},
  { "mghi", OP16(0xa70dLL), MASK_RI, INSTR_RI, 2},
  { "mhi", OP16(0xa70cLL), MASK_RI, INSTR_RI, 3},
  { "aghi", OP16(0xa70bLL), MASK_RI, INSTR_RI, 2},
  { "ahi", OP16(0xa70aLL), MASK_RI, INSTR_RI, 3},
  { "lghi", OP16(0xa709LL), MASK_RI, INSTR_RI, 2},
  { "lhi", OP16(0xa708LL), MASK_RI, INSTR_RI, 3},
d773 9
a781 9
  { "brct", OP16(0xa706LL), MASK_RI_A, INSTR_RI_A, 3},
  { "bras", OP16(0xa705LL), MASK_RI_A, INSTR_RI_A, 3},
  { "brc", OP16(0xa704LL), MASK_RI_MA, INSTR_RI_MA, 3},
  { "tmhl", OP16(0xa703LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tmhh", OP16(0xa702LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tml", OP16(0xa701LL), MASK_RI_U, INSTR_RI_U, 3},
  { "tmll", OP16(0xa701LL), MASK_RI_U, INSTR_RI_U, 2},
  { "tmh", OP16(0xa700LL), MASK_RI_U, INSTR_RI_U, 3},
  { "tmlh", OP16(0xa700LL), MASK_RI_U, INSTR_RI_U, 2},
d786 14
a799 14
  { "oill", OP16(0xa50bLL), MASK_RI_U, INSTR_RI_U, 2},
  { "oilh", OP16(0xa50aLL), MASK_RI_U, INSTR_RI_U, 2},
  { "oihl", OP16(0xa509LL), MASK_RI_U, INSTR_RI_U, 2},
  { "oihh", OP16(0xa508LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nill", OP16(0xa507LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nilh", OP16(0xa506LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nihl", OP16(0xa505LL), MASK_RI_U, INSTR_RI_U, 2},
  { "nihh", OP16(0xa504LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iill", OP16(0xa503LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iilh", OP16(0xa502LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iihl", OP16(0xa501LL), MASK_RI_U, INSTR_RI_U, 2},
  { "iihh", OP16(0xa500LL), MASK_RI_U, INSTR_RI_U, 2},
  { "stam", OP8(0x9bLL), MASK_RS_A, INSTR_RS_A, 3},
  { "lam", OP8(0x9aLL), MASK_RS_A, INSTR_RS_A, 3},
d801 19
a819 19
  { "lm", OP8(0x98LL), MASK_RS, INSTR_RS, 3},
  { "xi", OP8(0x97LL), MASK_SI, INSTR_SI, 3},
  { "oi", OP8(0x96LL), MASK_SI, INSTR_SI, 3},
  { "cli", OP8(0x95LL), MASK_SI, INSTR_SI, 3},
  { "ni", OP8(0x94LL), MASK_SI, INSTR_SI, 3},
  { "ts", OP8(0x93LL), MASK_S, INSTR_S, 3},
  { "mvi", OP8(0x92LL), MASK_SI, INSTR_SI, 3},
  { "tm", OP8(0x91LL), MASK_SI, INSTR_SI, 3},
  { "stm", OP8(0x90LL), MASK_RS, INSTR_RS, 3},
  { "slda", OP8(0x8fLL), MASK_RS_D, INSTR_RS_D, 3},
  { "srda", OP8(0x8eLL), MASK_RS_D, INSTR_RS_D, 3},
  { "sldl", OP8(0x8dLL), MASK_RS_D, INSTR_RS_D, 3},
  { "srdl", OP8(0x8cLL), MASK_RS_D, INSTR_RS_D, 3},
  { "sla", OP8(0x8bLL), MASK_RS_S, INSTR_RS_S, 3},
  { "sra", OP8(0x8aLL), MASK_RS_S, INSTR_RS_S, 3},
  { "sll", OP8(0x89LL), MASK_RS_S, INSTR_RS_S, 3},
  { "srl", OP8(0x88LL), MASK_RS_S, INSTR_RS_S, 3},
  { "bxle", OP8(0x87LL), MASK_RS, INSTR_RS, 3},
  { "bxh", OP8(0x86LL), MASK_RS, INSTR_RS, 3},
d821 125
a945 125
  { "brxh", OP8(0x84LL), MASK_RSI_A, INSTR_RSI_A, 3},
  { "diag", OP8(0x83LL), MASK_RS, INSTR_RS, 3},
  { "lpsw", OP8(0x82LL), MASK_S, INSTR_S, 3},
  { "ssm", OP8(0x80LL), MASK_S, INSTR_S, 3},
  { "su", OP8(0x7fLL), MASK_RX_E, INSTR_RX_E, 3},
  { "au", OP8(0x7eLL), MASK_RX_E, INSTR_RX_E, 3},
  { "de", OP8(0x7dLL), MASK_RX_E, INSTR_RX_E, 3},
  { "me", OP8(0x7cLL), MASK_RX_ED, INSTR_RX_ED, 3},
  { "se", OP8(0x7bLL), MASK_RX_E, INSTR_RX_E, 3},
  { "ae", OP8(0x7aLL), MASK_RX_E, INSTR_RX_E, 3},
  { "ce", OP8(0x79LL), MASK_RX_E, INSTR_RX_E, 3},
  { "le", OP8(0x78LL), MASK_RX_E, INSTR_RX_E, 3},
  { "ms", OP8(0x71LL), MASK_RX, INSTR_RX, 3},
  { "ste", OP8(0x70LL), MASK_RX_E, INSTR_RX_E, 3},
  { "sw", OP8(0x6fLL), MASK_RX_D, INSTR_RX_D, 3},
  { "aw", OP8(0x6eLL), MASK_RX_D, INSTR_RX_D, 3},
  { "dd", OP8(0x6dLL), MASK_RX_D, INSTR_RX_D, 3},
  { "md", OP8(0x6cLL), MASK_RX_D, INSTR_RX_D, 3},
  { "sd", OP8(0x6bLL), MASK_RX_D, INSTR_RX_D, 3},
  { "ad", OP8(0x6aLL), MASK_RX_D, INSTR_RX_D, 3},
  { "cd", OP8(0x69LL), MASK_RX_D, INSTR_RX_D, 3},
  { "ld", OP8(0x68LL), MASK_RX_D, INSTR_RX_D, 3},
  { "mxd", OP8(0x67LL), MASK_RX_DX, INSTR_RX_DX, 3},
  { "std", OP8(0x60LL), MASK_RX_D, INSTR_RX_D, 3},
  { "sl", OP8(0x5fLL), MASK_RX, INSTR_RX, 3},
  { "al", OP8(0x5eLL), MASK_RX, INSTR_RX, 3},
  { "d", OP8(0x5dLL), MASK_RX, INSTR_RX, 3},
  { "m", OP8(0x5cLL), MASK_RX, INSTR_RX, 3},
  { "s", OP8(0x5bLL), MASK_RX, INSTR_RX, 3},
  { "a", OP8(0x5aLL), MASK_RX, INSTR_RX, 3},
  { "c", OP8(0x59LL), MASK_RX, INSTR_RX, 3},
  { "l", OP8(0x58LL), MASK_RX, INSTR_RX, 3},
  { "x", OP8(0x57LL), MASK_RX, INSTR_RX, 3},
  { "o", OP8(0x56LL), MASK_RX, INSTR_RX, 3},
  { "cl", OP8(0x55LL), MASK_RX, INSTR_RX, 3},
  { "n", OP8(0x54LL), MASK_RX, INSTR_RX, 3},
  { "lae", OP8(0x51LL), MASK_RX, INSTR_RX, 3},
  { "st", OP8(0x50LL), MASK_RX, INSTR_RX, 3},
  { "cvb", OP8(0x4fLL), MASK_RX, INSTR_RX, 3},
  { "cvd", OP8(0x4eLL), MASK_RX, INSTR_RX, 3},
  { "bas", OP8(0x4dLL), MASK_RX, INSTR_RX, 3},
  { "mh", OP8(0x4cLL), MASK_RX, INSTR_RX, 3},
  { "sh", OP8(0x4bLL), MASK_RX, INSTR_RX, 3},
  { "ah", OP8(0x4aLL), MASK_RX, INSTR_RX, 3},
  { "ch", OP8(0x49LL), MASK_RX, INSTR_RX, 3},
  { "lh", OP8(0x48LL), MASK_RX, INSTR_RX, 3},
  { "b", OP16(0x47f0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bno", OP16(0x47e0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnh", OP16(0x47d0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnp", OP16(0x47d0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "ble", OP16(0x47c0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnl", OP16(0x47b0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnm", OP16(0x47b0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bhe", OP16(0x47a0LL), MASK_RX_B, INSTR_RX_B, 3},
  { "be", OP16(0x4780LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bz", OP16(0x4780LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bne", OP16(0x4770LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnz", OP16(0x4770LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnhe", OP16(0x4750LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bl", OP16(0x4740LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bm", OP16(0x4740LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bnle", OP16(0x4730LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bh", OP16(0x4720LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bp", OP16(0x4720LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bo", OP16(0x4710LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bc", OP8(0x47LL), MASK_RX_M, INSTR_RX_M, 3},
  { "nop", OP16(0x4700LL), MASK_RX_B, INSTR_RX_B, 3},
  { "bct", OP8(0x46LL), MASK_RX, INSTR_RX, 3},
  { "bal", OP8(0x45LL), MASK_RX, INSTR_RX, 3},
  { "ex", OP8(0x44LL), MASK_RX, INSTR_RX, 3},
  { "ic", OP8(0x43LL), MASK_RX, INSTR_RX, 3},
  { "stc", OP8(0x42LL), MASK_RX, INSTR_RX, 3},
  { "la", OP8(0x41LL), MASK_RX, INSTR_RX, 3},
  { "sth", OP8(0x40LL), MASK_RX, INSTR_RX, 3},
  { "sur", OP8(0x3fLL), MASK_RR_E, INSTR_RR_E, 3},
  { "aur", OP8(0x3eLL), MASK_RR_E, INSTR_RR_E, 3},
  { "der", OP8(0x3dLL), MASK_RR_E, INSTR_RR_E, 3},
  { "mer", OP8(0x3cLL), MASK_RR_ED, INSTR_RR_ED, 3},
  { "ser", OP8(0x3bLL), MASK_RR_E, INSTR_RR_E, 3},
  { "aer", OP8(0x3aLL), MASK_RR_E, INSTR_RR_E, 3},
  { "cer", OP8(0x39LL), MASK_RR_E, INSTR_RR_E, 3},
  { "ler", OP8(0x38LL), MASK_RR_E, INSTR_RR_E, 3},
  { "sxr", OP8(0x37LL), MASK_RR_X, INSTR_RR_X, 3},
  { "axr", OP8(0x36LL), MASK_RR, INSTR_RR, 3},
  { "lrer", OP8(0x35LL), MASK_RR_DE, INSTR_RR_DE, 3},
  { "her", OP8(0x34LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lcer", OP8(0x33LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lter", OP8(0x32LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lner", OP8(0x31LL), MASK_RR_E, INSTR_RR_E, 3},
  { "lper", OP8(0x30LL), MASK_RR_E, INSTR_RR_E, 3},
  { "swr", OP8(0x2fLL), MASK_RR_D, INSTR_RR_D, 3},
  { "awr", OP8(0x2eLL), MASK_RR_D, INSTR_RR_D, 3},
  { "ddr", OP8(0x2dLL), MASK_RR_D, INSTR_RR_D, 3},
  { "mdr", OP8(0x2cLL), MASK_RR_D, INSTR_RR_D, 3},
  { "sdr", OP8(0x2bLL), MASK_RR_D, INSTR_RR_D, 3},
  { "adr", OP8(0x2aLL), MASK_RR_D, INSTR_RR_D, 3},
  { "cdr", OP8(0x29LL), MASK_RR_D, INSTR_RR_D, 3},
  { "ldr", OP8(0x28LL), MASK_RR_D, INSTR_RR_D, 3},
  { "mxdr", OP8(0x27LL), MASK_RR_DX, INSTR_RR_DX, 3},
  { "mxr", OP8(0x26LL), MASK_RR_X, INSTR_RR_X, 3},
  { "lrdr", OP8(0x25LL), MASK_RR_XD, INSTR_RR_XD, 3},
  { "hdr", OP8(0x24LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lcdr", OP8(0x23LL), MASK_RR_D, INSTR_RR_D, 3},
  { "ltdr", OP8(0x22LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lndr", OP8(0x21LL), MASK_RR_D, INSTR_RR_D, 3},
  { "lpdr", OP8(0x20LL), MASK_RR_D, INSTR_RR_D, 3},
  { "slr", OP8(0x1fLL), MASK_RR, INSTR_RR, 3},
  { "alr", OP8(0x1eLL), MASK_RR, INSTR_RR, 3},
  { "dr", OP8(0x1dLL), MASK_RR, INSTR_RR, 3},
  { "mr", OP8(0x1cLL), MASK_RR, INSTR_RR, 3},
  { "sr", OP8(0x1bLL), MASK_RR, INSTR_RR, 3},
  { "ar", OP8(0x1aLL), MASK_RR, INSTR_RR, 3},
  { "cr", OP8(0x19LL), MASK_RR, INSTR_RR, 3},
  { "lr", OP8(0x18LL), MASK_RR, INSTR_RR, 3},
  { "xr", OP8(0x17LL), MASK_RR, INSTR_RR, 3},
  { "or", OP8(0x16LL), MASK_RR, INSTR_RR, 3},
  { "clr", OP8(0x15LL), MASK_RR, INSTR_RR, 3},
  { "nr", OP8(0x14LL), MASK_RR, INSTR_RR, 3},
  { "lcr", OP8(0x13LL), MASK_RR, INSTR_RR, 3},
  { "ltr", OP8(0x12LL), MASK_RR, INSTR_RR, 3},
  { "lnr", OP8(0x11LL), MASK_RR, INSTR_RR, 3},
  { "lpr", OP8(0x10LL), MASK_RR, INSTR_RR, 3},
  { "clcl", OP8(0x0fLL), MASK_RR, INSTR_RR, 3},
  { "mvcl", OP8(0x0eLL), MASK_RR, INSTR_RR, 3},
  { "basr", OP8(0x0dLL), MASK_RR, INSTR_RR, 3},
d947 14
a960 14
  { "bsm", OP8(0x0bLL), MASK_RR, INSTR_RR, 3},
  { "svc", OP8(0x0aLL), MASK_RR_I, INSTR_RR_I, 3},
  { "br", OP16(0x07f0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnor", OP16(0x07e0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnhr", OP16(0x07d0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnpr", OP16(0x07d0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bler", OP16(0x07c0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnlr", OP16(0x07b0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnmr", OP16(0x07b0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bher", OP16(0x07a0LL), MASK_RR_B, INSTR_RR_B, 3},
  { "ber", OP16(0x0780LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bzr", OP16(0x0780LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bner", OP16(0x0770LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bnzr", OP16(0x0770LL), MASK_RR_B, INSTR_RR_B, 3},
d962 2
a963 2
  { "blr", OP16(0x0740LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bmr", OP16(0x0740LL), MASK_RR_B, INSTR_RR_B, 3},
d965 8
a972 8
  { "bhr", OP16(0x0720LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bpr", OP16(0x0720LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bor", OP16(0x0710LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bcr", OP8(0x07LL), MASK_RR_M, INSTR_RR_M, 3},
  { "nopr", OP16(0x0700LL), MASK_RR_B, INSTR_RR_B, 3},
  { "bctr", OP8(0x06LL), MASK_RR, INSTR_RR, 3},
  { "balr", OP8(0x05LL), MASK_RR, INSTR_RR, 3},
  { "spm", OP8(0x04LL), MASK_RR_R, INSTR_RR_R, 3},
d977 1
a977 1
  { "tam", OP16(0x010bLL), MASK_E, INSTR_E, 2},
d979 2
a980 2
  { "upt", OP16(0x0102LL), MASK_E, INSTR_E, 3},
  { "pr", OP16(0x0101LL), MASK_E, INSTR_E, 3}
@


1.1
log
@Add s390 support
@
text
@d2 1
a2 1
   Copyright (C) 2000, 2001 Free Software Foundation, Inc.
@

