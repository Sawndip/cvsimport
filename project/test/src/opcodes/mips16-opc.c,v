head	1.28;
access;
symbols
	sid-snapshot-20180601:1.28
	sid-snapshot-20180501:1.28
	sid-snapshot-20180401:1.28
	sid-snapshot-20180301:1.28
	sid-snapshot-20180201:1.28
	sid-snapshot-20180101:1.28
	sid-snapshot-20171201:1.28
	sid-snapshot-20171101:1.28
	sid-snapshot-20171001:1.28
	sid-snapshot-20170901:1.28
	sid-snapshot-20170801:1.28
	sid-snapshot-20170701:1.28
	sid-snapshot-20170601:1.28
	sid-snapshot-20170501:1.28
	sid-snapshot-20170401:1.28
	sid-snapshot-20170301:1.28
	sid-snapshot-20170201:1.28
	sid-snapshot-20170101:1.28
	sid-snapshot-20161201:1.28
	sid-snapshot-20161101:1.28
	sid-snapshot-20160901:1.28
	sid-snapshot-20160801:1.28
	sid-snapshot-20160701:1.28
	sid-snapshot-20160601:1.28
	sid-snapshot-20160501:1.28
	sid-snapshot-20160401:1.28
	sid-snapshot-20160301:1.28
	sid-snapshot-20160201:1.28
	sid-snapshot-20160101:1.28
	sid-snapshot-20151201:1.28
	sid-snapshot-20151101:1.28
	sid-snapshot-20151001:1.28
	sid-snapshot-20150901:1.28
	sid-snapshot-20150801:1.28
	sid-snapshot-20150701:1.28
	sid-snapshot-20150601:1.28
	sid-snapshot-20150501:1.28
	sid-snapshot-20150401:1.28
	sid-snapshot-20150301:1.28
	sid-snapshot-20150201:1.28
	sid-snapshot-20150101:1.28
	sid-snapshot-20141201:1.28
	sid-snapshot-20141101:1.28
	sid-snapshot-20141001:1.28
	sid-snapshot-20140901:1.28
	sid-snapshot-20140801:1.28
	sid-snapshot-20140701:1.28
	sid-snapshot-20140601:1.28
	sid-snapshot-20140501:1.28
	sid-snapshot-20140401:1.28
	sid-snapshot-20140301:1.28
	sid-snapshot-20140201:1.28
	sid-snapshot-20140101:1.28
	sid-snapshot-20131201:1.28
	sid-snapshot-20131101:1.28
	sid-snapshot-20131001:1.28
	binutils-2_24-branch:1.28.0.2
	binutils-2_24-branchpoint:1.28
	binutils-2_21_1:1.15
	sid-snapshot-20130901:1.28
	gdb_7_6_1-2013-08-30-release:1.18
	sid-snapshot-20130801:1.23
	sid-snapshot-20130701:1.18
	sid-snapshot-20130601:1.18
	sid-snapshot-20130501:1.18
	gdb_7_6-2013-04-26-release:1.18
	sid-snapshot-20130401:1.18
	binutils-2_23_2:1.18
	gdb_7_6-branch:1.18.0.6
	gdb_7_6-2013-03-12-branchpoint:1.18
	sid-snapshot-20130301:1.18
	sid-snapshot-20130201:1.18
	sid-snapshot-20130101:1.18
	sid-snapshot-20121201:1.18
	gdb_7_5_1-2012-11-29-release:1.18
	binutils-2_23_1:1.18
	sid-snapshot-20121101:1.18
	binutils-2_23:1.18
	sid-snapshot-20121001:1.18
	sid-snapshot-20120901:1.18
	gdb_7_5-2012-08-17-release:1.18
	sid-snapshot-20120801:1.18
	binutils-2_23-branch:1.18.0.4
	binutils-2_23-branchpoint:1.18
	gdb_7_5-branch:1.18.0.2
	gdb_7_5-2012-07-18-branchpoint:1.18
	sid-snapshot-20120701:1.18
	sid-snapshot-20120601:1.18
	sid-snapshot-20120501:1.17
	binutils-2_22_branch:1.17.0.6
	gdb_7_4_1-2012-04-26-release:1.17
	sid-snapshot-20120401:1.17
	sid-snapshot-20120301:1.17
	sid-snapshot-20120201:1.17
	gdb_7_4-2012-01-24-release:1.17
	sid-snapshot-20120101:1.17
	gdb_7_4-branch:1.17.0.4
	gdb_7_4-2011-12-13-branchpoint:1.17
	sid-snapshot-20111201:1.17
	binutils-2_22:1.17
	sid-snapshot-20111101:1.17
	sid-snapshot-20111001:1.17
	binutils-2_22-branch:1.17.0.2
	binutils-2_22-branchpoint:1.17
	gdb_7_3_1-2011-09-04-release:1.15
	sid-snapshot-20110901:1.17
	sid-snapshot-20110801:1.17
	gdb_7_3-2011-07-26-release:1.15
	sid-snapshot-20110701:1.16
	sid-snapshot-20110601:1.15
	sid-snapshot-20110501:1.15
	gdb_7_3-branch:1.15.0.6
	gdb_7_3-2011-04-01-branchpoint:1.15
	sid-snapshot-20110401:1.15
	sid-snapshot-20110301:1.15
	sid-snapshot-20110201:1.15
	sid-snapshot-20110101:1.15
	binutils-2_21:1.15
	sid-snapshot-20101201:1.15
	binutils-2_21-branch:1.15.0.4
	binutils-2_21-branchpoint:1.15
	sid-snapshot-20101101:1.15
	sid-snapshot-20101001:1.15
	binutils-2_20_1:1.14
	gdb_7_2-2010-09-02-release:1.15
	sid-snapshot-20100901:1.15
	sid-snapshot-20100801:1.15
	gdb_7_2-branch:1.15.0.2
	gdb_7_2-2010-07-07-branchpoint:1.15
	sid-snapshot-20100701:1.14
	sid-snapshot-20100601:1.14
	sid-snapshot-20100501:1.14
	sid-snapshot-20100401:1.14
	gdb_7_1-2010-03-18-release:1.14
	sid-snapshot-20100301:1.14
	gdb_7_1-branch:1.14.0.6
	gdb_7_1-2010-02-18-branchpoint:1.14
	sid-snapshot-20100201:1.14
	sid-snapshot-20100101:1.14
	gdb_7_0_1-2009-12-22-release:1.14
	sid-snapshot-20091201:1.14
	sid-snapshot-20091101:1.14
	binutils-2_20:1.14
	gdb_7_0-2009-10-06-release:1.14
	sid-snapshot-20091001:1.14
	gdb_7_0-branch:1.14.0.4
	gdb_7_0-2009-09-16-branchpoint:1.14
	arc-sim-20090309:1.13
	binutils-arc-20081103-branch:1.13.0.30
	binutils-arc-20081103-branchpoint:1.13
	binutils-2_20-branch:1.14.0.2
	binutils-2_20-branchpoint:1.14
	sid-snapshot-20090901:1.13
	sid-snapshot-20090801:1.13
	msnyder-checkpoint-072509-branch:1.13.0.28
	msnyder-checkpoint-072509-branchpoint:1.13
	sid-snapshot-20090701:1.13
	dje-cgen-play1-branch:1.13.0.26
	dje-cgen-play1-branchpoint:1.13
	sid-snapshot-20090601:1.13
	sid-snapshot-20090501:1.13
	sid-snapshot-20090401:1.13
	arc-20081103-branch:1.13.0.24
	arc-20081103-branchpoint:1.13
	arc-insight_6_8-branch:1.13.0.22
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.20
	insight_6_8-branchpoint:1.13
	sid-snapshot-20090301:1.13
	binutils-2_19_1:1.13
	sid-snapshot-20090201:1.13
	sid-snapshot-20090101:1.13
	reverse-20081226-branch:1.13.0.18
	reverse-20081226-branchpoint:1.13
	sid-snapshot-20081201:1.13
	multiprocess-20081120-branch:1.13.0.16
	multiprocess-20081120-branchpoint:1.13
	sid-snapshot-20081101:1.13
	binutils-2_19:1.13
	sid-snapshot-20081001:1.13
	reverse-20080930-branch:1.13.0.14
	reverse-20080930-branchpoint:1.13
	binutils-2_19-branch:1.13.0.12
	binutils-2_19-branchpoint:1.13
	sid-snapshot-20080901:1.13
	sid-snapshot-20080801:1.13
	reverse-20080717-branch:1.13.0.10
	reverse-20080717-branchpoint:1.13
	sid-snapshot-20080701:1.13
	msnyder-reverse-20080609-branch:1.13.0.8
	msnyder-reverse-20080609-branchpoint:1.13
	drow-reverse-20070409-branch:1.12.0.6
	drow-reverse-20070409-branchpoint:1.12
	sid-snapshot-20080601:1.13
	sid-snapshot-20080501:1.13
	sid-snapshot-20080403:1.13
	sid-snapshot-20080401:1.13
	gdb_6_8-2008-03-27-release:1.13
	sid-snapshot-20080301:1.13
	gdb_6_8-branch:1.13.0.6
	gdb_6_8-2008-02-26-branchpoint:1.13
	sid-snapshot-20080201:1.13
	sid-snapshot-20080101:1.13
	sid-snapshot-20071201:1.13
	sid-snapshot-20071101:1.13
	gdb_6_7_1-2007-10-29-release:1.13
	gdb_6_7-2007-10-10-release:1.13
	sid-snapshot-20071001:1.13
	gdb_6_7-branch:1.13.0.4
	gdb_6_7-2007-09-07-branchpoint:1.13
	binutils-2_18:1.13
	binutils-2_18-branch:1.13.0.2
	binutils-2_18-branchpoint:1.13
	insight_6_6-20070208-release:1.12
	binutils-csl-coldfire-4_1-32:1.10
	binutils-csl-sourcerygxx-4_1-32:1.10
	gdb_6_6-2006-12-18-release:1.12
	binutils-csl-innovasic-fido-3_4_4-33:1.10
	binutils-csl-sourcerygxx-3_4_4-32:1.6
	binutils-csl-coldfire-4_1-30:1.10
	binutils-csl-sourcerygxx-4_1-30:1.10
	binutils-csl-coldfire-4_1-28:1.10
	binutils-csl-sourcerygxx-4_1-29:1.10
	binutils-csl-sourcerygxx-4_1-28:1.10
	gdb_6_6-branch:1.12.0.4
	gdb_6_6-2006-11-15-branchpoint:1.12
	binutils-csl-arm-2006q3-27:1.10
	binutils-csl-sourcerygxx-4_1-27:1.10
	binutils-csl-arm-2006q3-26:1.10
	binutils-csl-sourcerygxx-4_1-26:1.10
	binutils-csl-sourcerygxx-4_1-25:1.10
	binutils-csl-sourcerygxx-4_1-24:1.10
	binutils-csl-sourcerygxx-4_1-23:1.10
	insight_6_5-20061003-release:1.12
	gdb-csl-symbian-6_4_50_20060226-12:1.10
	binutils-csl-sourcerygxx-4_1-21:1.10
	binutils-csl-arm-2006q3-21:1.10
	binutils-csl-sourcerygxx-4_1-22:1.10
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.10
	binutils-csl-sourcerygxx-4_1-20:1.10
	binutils-csl-arm-2006q3-19:1.10
	binutils-csl-sourcerygxx-4_1-19:1.10
	binutils-csl-sourcerygxx-4_1-18:1.10
	binutils-csl-renesas-4_1-9:1.10
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	binutils-csl-sourcerygxx-3_4_4-25:1.6
	nickrob-async-20060828-mergepoint:1.12
	gdb-csl-symbian-6_4_50_20060226-11:1.10
	binutils-csl-renesas-4_1-8:1.10
	binutils-csl-renesas-4_1-7:1.10
	binutils-csl-renesas-4_1-6:1.10
	gdb-csl-sourcerygxx-4_1-17:1.10
	binutils-csl-sourcerygxx-4_1-17:1.10
	gdb-csl-20060226-branch-local-2:1.10
	gdb-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-15:1.10
	gdb-csl-sourcerygxx-4_1-13:1.10
	binutils-csl-sourcerygxx-4_1-13:1.10
	binutils-2_17:1.10
	gdb-csl-sourcerygxx-4_1-12:1.10
	binutils-csl-sourcerygxx-4_1-12:1.10
	gdb-csl-sourcerygxx-3_4_4-21:1.10
	binutils-csl-sourcerygxx-3_4_4-21:1.10
	gdb_6_5-20060621-release:1.12
	binutils-csl-wrs-linux-3_4_4-24:1.6
	binutils-csl-wrs-linux-3_4_4-23:1.6
	gdb-csl-sourcerygxx-4_1-9:1.10
	binutils-csl-sourcerygxx-4_1-9:1.10
	gdb-csl-sourcerygxx-4_1-8:1.10
	binutils-csl-sourcerygxx-4_1-8:1.10
	gdb-csl-sourcerygxx-4_1-7:1.10
	binutils-csl-sourcerygxx-4_1-7:1.10
	gdb-csl-arm-2006q1-6:1.10
	binutils-csl-arm-2006q1-6:1.10
	gdb-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-wrs-linux-3_4_4-22:1.6
	gdb-csl-symbian-6_4_50_20060226-10:1.10
	gdb-csl-symbian-6_4_50_20060226-9:1.10
	gdb-csl-symbian-6_4_50_20060226-8:1.10
	gdb-csl-coldfire-4_1-11:1.10
	binutils-csl-coldfire-4_1-11:1.10
	gdb-csl-sourcerygxx-3_4_4-19:1.10
	binutils-csl-sourcerygxx-3_4_4-19:1.10
	gdb-csl-coldfire-4_1-10:1.10
	gdb_6_5-branch:1.12.0.2
	gdb_6_5-2006-05-14-branchpoint:1.12
	binutils-csl-coldfire-4_1-10:1.10
	gdb-csl-sourcerygxx-4_1-5:1.10
	binutils-csl-sourcerygxx-4_1-5:1.10
	nickrob-async-20060513-branch:1.11.0.2
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.10
	binutils-csl-sourcerygxx-4_1-4:1.10
	msnyder-reverse-20060502-branch:1.10.0.20
	msnyder-reverse-20060502-branchpoint:1.10
	binutils-csl-wrs-linux-3_4_4-21:1.6
	gdb-csl-morpho-4_1-4:1.10
	binutils-csl-morpho-4_1-4:1.10
	gdb-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-wrs-linux-3_4_4-20:1.6
	readline_5_1-import-branch:1.10.0.18
	readline_5_1-import-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.10
	binutils-2_17-branch:1.10.0.16
	binutils-2_17-branchpoint:1.10
	gdb-csl-symbian-20060226-branch:1.10.0.14
	gdb-csl-symbian-20060226-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.10
	msnyder-reverse-20060331-branch:1.10.0.12
	msnyder-reverse-20060331-branchpoint:1.10
	binutils-csl-2_17-branch:1.10.0.10
	binutils-csl-2_17-branchpoint:1.10
	gdb-csl-available-20060303-branch:1.10.0.8
	gdb-csl-available-20060303-branchpoint:1.10
	gdb-csl-20060226-branch:1.10.0.6
	gdb-csl-20060226-branchpoint:1.10
	gdb_6_4-20051202-release:1.9
	msnyder-fork-checkpoint-branch:1.10.0.4
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.2
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.9.0.4
	gdb_6_4-2005-11-01-branchpoint:1.9
	gdb-csl-arm-20051020-branch:1.9.0.2
	gdb-csl-arm-20051020-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.6.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.6
	binutils-2_16_1:1.6
	msnyder-tracepoint-checkpoint-branch:1.7.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.7
	gdb-csl-arm-20050325-2005-q1b:1.6
	binutils-csl-arm-2005q1b:1.6
	binutils-2_16:1.6
	gdb-csl-arm-20050325-2005-q1a:1.6
	binutils-csl-arm-2005q1a:1.6
	csl-arm-20050325-branch:1.6.0.6
	csl-arm-20050325-branchpoint:1.6
	binutils-csl-arm-2005q1-branch:1.6.0.4
	binutils-csl-arm-2005q1-branchpoint:1.6
	binutils-2_16-branch:1.6.0.2
	binutils-2_16-branchpoint:1.6
	csl-arm-2004-q3d:1.4
	gdb_6_3-20041109-release:1.4
	gdb_6_3-branch:1.4.0.90
	gdb_6_3-20041019-branchpoint:1.4
	csl-arm-2004-q3:1.4
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.92
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.88
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	binutils-2_15:1.4
	binutils-2_15-branchpoint:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.86
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.84
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.82
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.80
	drow_intercu-20040221-branchpoint:1.4
	binutils-2_15-branch:1.4.0.78
	cagney_bfdfile-20040213-branch:1.4.0.76
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.74
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	csl-arm-2003-q4:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.72
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.70
	cagney_x86i386-20030821-branch:1.4.0.68
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.66
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.64
	jimb-ppc64-linux-20030613-branchpoint:1.4
	binutils-2_14:1.4
	cagney_convert-20030606-branch:1.4.0.62
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.60
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.58
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.56
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.54
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	binutils-2_14-branch:1.4.0.52
	binutils-2_14-branchpoint:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.50
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.48
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.46
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.44
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.42
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.40
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.38
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.36
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030202-branch:1.4.0.34
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.32
	cagney-unwind-20030108-branchpoint:1.4
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.4
	carlton_dictionary-20021115-merge:1.4
	binutils-2_13_1:1.4
	kseitz_interps-20021105-merge:1.4
	kseitz_interps-20021103-merge:1.4
	drow-cplus-merge-20021020:1.4
	drow-cplus-merge-20021025:1.4
	carlton_dictionary-20021025-merge:1.4
	carlton_dictionary-20021011-merge:1.4
	drow-cplus-branch:1.4.0.30
	drow-cplus-branchpoint:1.4
	kseitz_interps-20020930-merge:1.4
	carlton_dictionary-20020927-merge:1.4
	carlton_dictionary-branch:1.4.0.28
	carlton_dictionary-20020920-branchpoint:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.26
	gdb_5_3-branch:1.4.0.24
	gdb_5_3-2002-09-04-branchpoint:1.4
	kseitz_interps-20020829-merge:1.4
	cagney_sysregs-20020825-branch:1.4.0.22
	cagney_sysregs-20020825-branchpoint:1.4
	readline_4_3-import-branch:1.4.0.20
	readline_4_3-import-branchpoint:1.4
	binutils-2_13:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.18
	kseitz_interps-20020528-branch:1.4.0.16
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.14
	cagney_regbuf-20020515-branchpoint:1.4
	binutils-2_12_1:1.4
	jimb-macro-020506-branch:1.4.0.12
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	binutils-2_12:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	binutils-2_12-branch:1.4.0.8
	binutils-2_12-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.4
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.2
	gdb_5_1-2001-07-29-branchpoint:1.4
	binutils-2_11_2:1.3.2.1
	binutils-2_11_1:1.3.2.1
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	insight-precleanup-2001-01-01:1.3
	binutils-2_10_1:1.1.1.1.2.1
	binutils-2_10:1.1.1.1.2.1
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.28
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2013.08.19.18.56.59;	author rsandifo;	state Exp;
branches;
next	1.27;

1.27
date	2013.08.03.10.49.47;	author rsandifo;	state Exp;
branches;
next	1.26;

1.26
date	2013.08.01.20.55.24;	author rsandifo;	state Exp;
branches;
next	1.25;

1.25
date	2013.08.01.20.40.23;	author rsandifo;	state Exp;
branches;
next	1.24;

1.24
date	2013.08.01.20.35.11;	author rsandifo;	state Exp;
branches;
next	1.23;

1.23
date	2013.07.14.14.25.57;	author rsandifo;	state Exp;
branches;
next	1.22;

1.22
date	2013.07.14.13.36.50;	author rsandifo;	state Exp;
branches;
next	1.21;

1.21
date	2013.07.14.13.11.02;	author rsandifo;	state Exp;
branches;
next	1.20;

1.20
date	2013.07.07.10.27.32;	author rsandifo;	state Exp;
branches;
next	1.19;

1.19
date	2013.07.07.09.50.42;	author rsandifo;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.17.15.13.25;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.24.14.04.51;	author rsandifo;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.29.20.42.48;	author rsandifo;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.06.00.02.46;	author macro;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.02.07.20.30;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.05.09.49.02;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.14.15.35.22;	author ths;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.04.10.47.05;	author ths;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.14.02.25.39;	author ths;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.23.11.06.10;	author davidu;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.16.17.01.12;	author davidu;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.07.07.34.30;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.03.11.49.50;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.19.23.31.15;	author fnf;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.13.22.58.37;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.01.20.06.36;	author nickc;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.04.14.04.16.58;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.59;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2001.06.07.03.18.36;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.59;	author rth;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	2000.05.06.14.49.26;	author pb;	state Exp;
branches;
next	;


desc
@@


1.28
log
@include/opcode/
	* mips.h (OP_OPTIONAL_REG): New mips_operand_type.
	(mips_optional_operand_p): New function.

opcodes/
	* mips-formats.h (OPTIONAL_REG, OPTIONAL_MAPPED_REG): New macros.
	* micromips-opc.c (decode_micromips_operand): Use OPTIONAL_REG
	and OPTIONAL_MAPPED_REG.
	* mips-opc.c (decode_mips_operand): Likewise.
	* mips16-opc.c (decode_mips16_operand): Likewise.
	* mips-dis.c (print_insn_arg): Handle OP_OPTIONAL_REG.

gas/
	* config/tc-mips.c (operand_reg_mask, match_operand): Handle
	OP_OPTIONAL_REG.
	(mips_ip, mips16_ip): Use mips_optional_operand_p to check
	for optional operands.
@
text
@/* mips16-opc.c.  Mips16 opcode table.
   Copyright 1996, 1997, 1998, 2000, 2005, 2006, 2007, 2012
   Free Software Foundation, Inc.
   Contributed by Ian Lance Taylor, Cygnus Support

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this file; see the file COPYING.  If not, write to the
   Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include <stdio.h>
#include "opcode/mips.h"
#include "mips-formats.h"

static unsigned char reg_0_map[] = { 0 };
static unsigned char reg_29_map[] = { 29 };
static unsigned char reg_31_map[] = { 31 };
static unsigned char reg_m16_map[] = { 16, 17, 2, 3, 4, 5, 6, 7 };
static unsigned char reg32r_map[] = {
  0, 8, 16, 24,
  1, 9, 17, 25,
  2, 10, 18, 26,
  3, 11, 19, 27,
  4, 12, 20, 28,
  5, 13, 21, 29,
  6, 14, 22, 30,
  7, 15, 23, 31
};

/* Return the meaning of operand character TYPE, or null if it isn't
   recognized.  If the operand is affected by the EXTEND instruction,
   EXTENDED_P selects between the extended and unextended forms.
   The extended forms all have an lsb of 0.  */

const struct mips_operand *
decode_mips16_operand (char type, bfd_boolean extended_p)
{
  switch (type)
    {
    case '0': MAPPED_REG (0, 0, GP, reg_0_map);

    case 'L': SPECIAL (6, 5, ENTRY_EXIT_LIST);
    case 'M': SPECIAL (7, 0, SAVE_RESTORE_LIST);
    case 'P': SPECIAL (0, 0, PC);
    case 'R': MAPPED_REG (0, 0, GP, reg_31_map);
    case 'S': MAPPED_REG (0, 0, GP, reg_29_map);
    case 'X': REG (5, 0, GP);
    case 'Y': MAPPED_REG (5, 3, GP, reg32r_map);
    case 'Z': MAPPED_REG (3, 0, GP, reg_m16_map);

    case 'a': JUMP (26, 0, 2);
    case 'e': UINT (11, 0);
    case 'i': JALX (26, 0, 2);
    case 'l': SPECIAL (6, 5, ENTRY_EXIT_LIST);
    case 'm': SPECIAL (7, 0, SAVE_RESTORE_LIST);
    case 'v': OPTIONAL_MAPPED_REG (3, 8, GP, reg_m16_map);
    case 'w': OPTIONAL_MAPPED_REG (3, 5, GP, reg_m16_map);
    case 'x': MAPPED_REG (3, 8, GP, reg_m16_map);
    case 'y': MAPPED_REG (3, 5, GP, reg_m16_map);
    case 'z': MAPPED_REG (3, 2, GP, reg_m16_map);
    }

  if (extended_p)
    switch (type)
      {
      case '<': UINT (5, 0);
      case '>': UINT (5, 0);
      case '[': UINT (6, 0);
      case ']': UINT (6, 0);

      case '4': SINT (15, 0);
      case '5': SINT (16, 0);
      case '6': SINT (16, 0);
      case '8': SINT (16, 0);

      case 'A': PCREL (16, 0, TRUE, 0, 2, FALSE, FALSE);
      case 'B': PCREL (16, 0, TRUE, 0, 3, FALSE, FALSE);
      case 'C': SINT (16, 0);
      case 'D': SINT (16, 0);
      case 'E': PCREL (16, 0, TRUE, 0, 2, FALSE, FALSE);
      case 'H': SINT (16, 0);
      case 'K': SINT (16, 0);
      case 'U': UINT (16, 0);
      case 'V': SINT (16, 0);
      case 'W': SINT (16, 0);

      case 'j': SINT (16, 0);
      case 'k': SINT (16, 0);
      case 'p': BRANCH (16, 0, 1);
      case 'q': BRANCH (16, 0, 1);
      }
  else
    switch (type)
      {
      case '<': INT_ADJ (3, 2, 8, 0, FALSE);
      case '>': INT_ADJ (3, 8, 8, 0, FALSE);
      case '[': INT_ADJ (3, 2, 8, 0, FALSE);
      case ']': INT_ADJ (3, 8, 8, 0, FALSE);

      case '4': SINT (4, 0);
      case '5': UINT (5, 0);
      case '6': UINT (6, 5);
      case '8': UINT (8, 0);

      case 'A': PCREL (8, 0, FALSE, 2, 2, FALSE, FALSE);
      case 'B': PCREL (5, 0, FALSE, 3, 3, FALSE, FALSE);
      case 'C': INT_ADJ (8, 0, 255, 3, FALSE);	/* (0 .. 255) << 3 */
      case 'D': INT_ADJ (5, 0, 31, 3, FALSE);	/* (0 .. 31) << 3 */
      case 'E': PCREL (5, 0, FALSE, 2, 2, FALSE, FALSE);
      case 'H': INT_ADJ (5, 0, 31, 1, FALSE);	/* (0 .. 31) << 1 */
      case 'K': INT_ADJ (8, 0, 127, 3, FALSE);	/* (-128 .. 127) << 3 */
      case 'U': UINT (8, 0);
      case 'V': INT_ADJ (8, 0, 255, 2, FALSE);	/* (0 .. 255) << 2 */
      case 'W': INT_ADJ (5, 0, 31, 2, FALSE);	/* (0 .. 31) << 2 */

      case 'j': SINT (5, 0);
      case 'k': SINT (8, 0);
      case 'p': BRANCH (8, 0, 1);
      case 'q': BRANCH (11, 0, 1);
      }
  return 0;
}

/* This is the opcodes table for the mips16 processor.  The format of
   this table is intentionally identical to the one in mips-opc.c.
   However, the special letters that appear in the argument string are
   different, and the table uses some different flags.  */

/* Use some short hand macros to keep down the length of the lines in
   the opcodes table.  */

#define UBD     INSN_UNCOND_BRANCH_DELAY

#define WR_1	INSN_WRITE_1
#define WR_2	INSN_WRITE_2
#define RD_1	INSN_READ_1
#define RD_2	INSN_READ_2
#define RD_3	INSN_READ_3
#define RD_4	INSN_READ_4
#define MOD_1	(WR_1|RD_1)
#define MOD_2	(WR_2|RD_2)

#define RD_T	INSN_READ_GPR_24
#define WR_T	INSN_WRITE_GPR_24
#define WR_31	INSN_WRITE_GPR_31

#define WR_HI	INSN_WRITE_HI
#define WR_LO	INSN_WRITE_LO
#define RD_HI	INSN_READ_HI
#define RD_LO	INSN_READ_LO

#define NODS	INSN_NO_DELAY_SLOT
#define TRAP	INSN_NO_DELAY_SLOT

#define RD_16	INSN2_READ_GPR_16
#define RD_SP	INSN2_READ_SP
#define WR_SP	INSN2_WRITE_SP
#define MOD_SP	(RD_SP|WR_SP)
#define RD_31	INSN2_READ_GPR_31
#define RD_PC	INSN2_READ_PC
#define UBR	INSN2_UNCOND_BRANCH
#define CBR	INSN2_COND_BRANCH

#define I1	INSN_ISA1
#define I3	INSN_ISA3
#define I32	INSN_ISA32
#define I64	INSN_ISA64
#define T3	INSN_3900

const struct mips_opcode mips16_opcodes[] =
{
/* name,    args,	match,	mask,		pinfo,	         	pinfo2, membership */
{"nop",	    "",		0x6500, 0xffff,		0,			RD_16,		I1,	0,	0 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
{"abs",	    "x,w",	0, (int) M_ABS,		INSN_MACRO,		0,		I1,	0,	0 },
{"addiu",   "y,x,4",	0x4000, 0xf810,		WR_1|RD_2,		0,		I1,	0,	0 },
{"addiu",   "x,k",	0x4800, 0xf800,		MOD_1,			0,		I1,	0,	0 },
{"addiu",   "S,K",	0x6300, 0xff00,		0,			MOD_SP,		I1,	0,	0 },
{"addiu",   "S,S,K",	0x6300, 0xff00,		0,			MOD_SP,		I1,	0,	0 },
{"addiu",   "x,P,V",	0x0800, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
{"addiu",   "x,S,V",	0x0000, 0xf800,		WR_1,			RD_SP,		I1,	0,	0 },
{"addu",    "z,v,y",	0xe001, 0xf803,		WR_1|RD_2|RD_3,		0,		I1,	0,	0 },
{"addu",    "y,x,4",	0x4000, 0xf810,		WR_1|RD_2,		0,		I1,	0,	0 },
{"addu",    "x,k",	0x4800, 0xf800,		MOD_1,			0,		I1,	0,	0 },
{"addu",    "S,K",	0x6300, 0xff00,		0,			MOD_SP,		I1,	0,	0 },
{"addu",    "S,S,K",	0x6300, 0xff00,		0,			MOD_SP,		I1,	0,	0 },
{"addu",    "x,P,V",	0x0800, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
{"addu",    "x,S,V",	0x0000, 0xf800,		WR_1,			RD_SP,		I1,	0,	0 },
{"and",	    "x,y",	0xe80c, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"b",	    "q",	0x1000, 0xf800,		0,			UBR,		I1,	0,	0 },
{"beq",	    "x,y,p",	0, (int) M_BEQ,		INSN_MACRO,		0,		I1,	0,	0 },
{"beq",     "x,I,p",	0, (int) M_BEQ_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"beqz",    "x,p",	0x2000, 0xf800,		RD_1,			CBR,		I1,	0,	0 },
{"bge",	    "x,y,p",	0, (int) M_BGE,		INSN_MACRO,		0,		I1,	0,	0 },
{"bge",     "x,I,p",	0, (int) M_BGE_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bgeu",    "x,y,p",	0, (int) M_BGEU,	INSN_MACRO,		0,		I1,	0,	0 },
{"bgeu",    "x,I,p",	0, (int) M_BGEU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bgt",	    "x,y,p",	0, (int) M_BGT,		INSN_MACRO,		0,		I1,	0,	0 },
{"bgt",     "x,I,p",	0, (int) M_BGT_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bgtu",    "x,y,p",	0, (int) M_BGTU,	INSN_MACRO,		0,		I1,	0,	0 },
{"bgtu",    "x,I,p",	0, (int) M_BGTU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"ble",	    "x,y,p",	0, (int) M_BLE,		INSN_MACRO,		0,		I1,	0,	0 },
{"ble",     "x,I,p",	0, (int) M_BLE_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bleu",    "x,y,p",	0, (int) M_BLEU,	INSN_MACRO,		0,		I1,	0,	0 },
{"bleu",    "x,I,p",	0, (int) M_BLEU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"blt",	    "x,y,p",	0, (int) M_BLT,		INSN_MACRO,		0,		I1,	0,	0 },
{"blt",     "x,I,p",	0, (int) M_BLT_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bltu",    "x,y,p",	0, (int) M_BLTU,	INSN_MACRO,		0,		I1,	0,	0 },
{"bltu",    "x,I,p",	0, (int) M_BLTU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bne",	    "x,y,p",	0, (int) M_BNE,		INSN_MACRO,		0,		I1,	0,	0 },
{"bne",     "x,I,p",	0, (int) M_BNE_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"bnez",    "x,p",	0x2800, 0xf800,		RD_1,			CBR,		I1,	0,	0 },
{"break",   "6",	0xe805, 0xf81f,		TRAP,			0,		I1,	0,	0 },
{"bteqz",   "p",	0x6000, 0xff00,		RD_T,			CBR,		I1,	0,	0 },
{"btnez",   "p",	0x6100, 0xff00,		RD_T,			CBR,		I1,	0,	0 },
{"cmpi",    "x,U",	0x7000, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"cmp",	    "x,y",	0xe80a, 0xf81f,		RD_1|RD_2|WR_T,		0,		I1,	0,	0 },
{"cmp",     "x,U",	0x7000, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"dla",	    "y,E",	0xfe00, 0xff00,		WR_1, 			RD_PC,		I3,	0,	0 },
{"daddiu",  "y,x,4",	0x4010, 0xf810,		WR_1|RD_2, 		0,		I3,	0,	0 },
{"daddiu",  "y,j",	0xfd00, 0xff00,		MOD_1,			0,		I3,	0,	0 },
{"daddiu",  "S,K",	0xfb00, 0xff00,		0,	 		MOD_SP,		I3,	0,	0 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00,		0,	 		MOD_SP,		I3,	0,	0 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00,		WR_1,	 		RD_PC,		I3,	0,	0 },
{"daddiu",  "y,S,W",	0xff00, 0xff00,		WR_1,			RD_SP,		I3,	0,	0 },
{"daddu",   "z,v,y",	0xe000, 0xf803,		WR_1|RD_2|RD_3, 	0,		I3,	0,	0 },
{"daddu",   "y,x,4",	0x4010, 0xf810,		WR_1|RD_2, 		0,		I3,	0,	0 },
{"daddu",   "y,j",	0xfd00, 0xff00,		MOD_1,			0,		I3,	0,	0 },
{"daddu",   "S,K",	0xfb00, 0xff00,		0,	 		MOD_SP,		I3,	0,	0 },
{"daddu",   "S,S,K",	0xfb00, 0xff00,		0,	 		MOD_SP,		I3,	0,	0 },
{"daddu",   "y,P,W",	0xfe00, 0xff00,		WR_1,	 		RD_PC,		I3,	0,	0 },
{"daddu",   "y,S,W",	0xff00, 0xff00,		WR_1,			RD_SP,		I3,	0,	0 },
{"ddiv",    "0,x,y",	0xe81e, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO,	0,		I3,	0,	0 },
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"ddivu",   "0,x,y",	0xe81f, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"div",     "0,x,y",	0xe81a, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"div",     "z,v,y",	0, (int) M_DIV_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"divu",    "0,x,y",	0xe81b, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"divu",    "z,v,y",	0, (int) M_DIVU_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"dmul",    "z,v,y",	0, (int) M_DMUL,	INSN_MACRO, 		0,		I3,	0,	0 },
{"dmult",   "x,y",	0xe81c, 0xf81f, 	RD_1|RD_2|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"dmultu",  "x,y",	0xe81d, 0xf81f, 	RD_1|RD_2|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"drem",    "0,x,y",	0xe81e, 0xf81f, 	RD_2|RD_3|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"drem",    "z,v,y",	0, (int) M_DREM_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"dremu",   "0,x,y",	0xe81f, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"dremu",   "z,v,y",	0, (int) M_DREMU_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"dsllv",   "y,x",	0xe814, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsll",    "x,w,[",	0x3001, 0xf803,		WR_1|RD_2, 		0,		I3,	0,	0 },
{"dsll",    "y,x",	0xe814, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsrav",   "y,x",	0xe817, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsra",    "y,]",	0xe813, 0xf81f,		MOD_1,			0,		I3,	0,	0 },
{"dsra",    "y,x",	0xe817, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsrlv",   "y,x",	0xe816, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsrl",    "y,]",	0xe808, 0xf81f,		MOD_1,			0,		I3,	0,	0 },
{"dsrl",    "y,x",	0xe816, 0xf81f,		MOD_1|RD_2, 	0,		I3,	0,	0 },
{"dsubu",   "z,v,y",	0xe002, 0xf803,		WR_1|RD_2|RD_3, 	0,		I3,	0,	0 },
{"dsubu",   "y,x,I",	0, (int) M_DSUBU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"dsubu",   "y,I",	0, (int) M_DSUBU_I_2,	INSN_MACRO, 		0,		I1,	0,	0 },
{"exit",    "L",	0xed09, 0xff1f,		TRAP,			0,		I1,	0,	0 },
{"exit",    "L",	0xee09, 0xff1f,		TRAP,			0,		I1,	0,	0 },
{"exit",    "",		0xef09, 0xffff,		TRAP,			0,		I1,	0,	0 },
{"exit",    "L",	0xef09, 0xff1f,		TRAP,			0,		I1,	0,	0 },
{"entry",   "",		0xe809, 0xffff,		TRAP,			0,		I1,	0,	0 },
{"entry",   "l",	0xe809, 0xf81f,		TRAP,			0,		I1,	0,	0 },
{"extend",  "e",	0xf000, 0xf800,		0,			0,		I1,	0,	0 },
{"jalr",    "x",	0xe840, 0xf8ff,		RD_1|WR_31|UBD,		0,		I1,	0,	0 },
{"jalr",    "R,x",	0xe840, 0xf8ff,		RD_2|WR_31|UBD,		0,		I1,	0,	0 },
{"jal",     "x",	0xe840, 0xf8ff,		RD_1|WR_31|UBD,		0,		I1,	0,	0 },
{"jal",     "R,x",	0xe840, 0xf8ff,		RD_2|WR_31|UBD,		0,		I1,	0,	0 },
{"jal",	    "a",	0x1800, 0xfc00,		WR_31|UBD,		0,		I1,	0,	0 },
{"jalx",    "i",	0x1c00, 0xfc00,		WR_31|UBD,		0,		I1,	0,	0 },
{"jr",	    "x",	0xe800, 0xf8ff,		RD_1|UBD,		0,		I1,	0,	0 },
{"jr",	    "R",	0xe820, 0xffff,		UBD,			RD_31,		I1,	0,	0 },
{"j",	    "x",	0xe800, 0xf8ff,		RD_1|UBD,		0,		I1,	0,	0 },
{"j",	    "R",	0xe820, 0xffff,		UBD,			RD_31,		I1,	0,	0 },
/* MIPS16e compact branches.  We keep them near the ordinary branches
   so that we easily find them when converting a normal branch to a
   compact one.  */
{"jalrc",   "x",	0xe8c0, 0xf8ff,		RD_1|WR_31|NODS,	UBR,		I32,	0,	0 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff,		RD_2|WR_31|NODS,	UBR,		I32,	0,	0 },
{"jrc",	    "x",	0xe880, 0xf8ff,		RD_1|NODS,		UBR,		I32,	0,	0 },
{"jrc",	    "R",	0xe8a0, 0xffff,		NODS,			RD_31|UBR,	I32,	0,	0 },
{"lb",	    "y,5(x)",	0x8000, 0xf800,		WR_1|RD_3,		0,		I1,	0,	0 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800,		WR_1|RD_3,		0,		I1,	0,	0 },
{"ld",	    "y,D(x)",	0x3800, 0xf800,		WR_1|RD_3, 		0,		I3,	0,	0 },
{"ld",	    "y,B",	0xfc00, 0xff00,		WR_1,	 		RD_PC,		I3,	0,	0 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00,		WR_1,	 		RD_PC,		I3,	0,	0 },
{"ld",	    "y,D(S)",	0xf800, 0xff00,		WR_1,			RD_SP,		I3,	0,	0 },
{"lh",	    "y,H(x)",	0x8800, 0xf800,		WR_1|RD_3,		0,		I1,	0,	0 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800,		WR_1|RD_3,		0,		I1,	0,	0 },
{"li",	    "x,U",	0x6800, 0xf800,		WR_1,			0,		I1,	0,	0 },
{"lw",	    "y,W(x)",	0x9800, 0xf800,		WR_1|RD_3,		0,		I1,	0,	0 },
{"lw",	    "x,A",	0xb000, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
{"lw",	    "x,V(S)",	0x9000, 0xf800,		WR_1,			RD_SP,		I1,	0,	0 },
{"lwu",     "y,W(x)",	0xb800, 0xf800,		WR_1|RD_3, 		0,		I3,	0,	0 },
{"mfhi",    "x",	0xe810, 0xf8ff,		WR_1|RD_HI,		0,		I1,	0,	0 },
{"mflo",    "x",	0xe812, 0xf8ff,		WR_1|RD_LO,		0,		I1,	0,	0 },
{"move",    "y,X",	0x6700, 0xff00,		WR_1|RD_2, 		0,		I1,	0,	0 },
{"move",    "Y,Z",	0x6500, 0xff00,		WR_1|RD_2,		0,		I1,	0,	0 },
{"mul",     "z,v,y",	0, (int) M_MUL, 	INSN_MACRO,		0,		I1,	0,	0 },
{"mult",    "x,y",	0xe818, 0xf81f,		RD_1|RD_2|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"multu",   "x,y",	0xe819, 0xf81f,		RD_1|RD_2|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"neg",	    "x,w",	0xe80b, 0xf81f,		WR_1|RD_2,		0,		I1,	0,	0 },
{"not",	    "x,w",	0xe80f, 0xf81f,		WR_1|RD_2,		0,		I1,	0,	0 },
{"or",	    "x,y",	0xe80d, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"rem",     "0,x,y",	0xe81a, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"rem",     "z,v,y",	0, (int) M_REM_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"remu",    "0,x,y",	0xe81b, 0xf81f,		RD_2|RD_3|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"remu",    "z,v,y",	0, (int) M_REMU_3,	INSN_MACRO,		0,		I1,	0,	0 },
{"sb",	    "y,5(x)",	0xc000, 0xf800,		RD_1|RD_3,		0,		I1,	0,	0 },
{"sd",	    "y,D(x)",	0x7800, 0xf800,		RD_1|RD_3, 		0,		I3,	0,	0 },
{"sd",	    "y,D(S)",	0xf900, 0xff00,		RD_1, 			RD_PC,		I3,	0,	0 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00,		0,			RD_31|RD_PC,	I1,	0,	0 },
{"sh",	    "y,H(x)",	0xc800, 0xf800,		RD_1|RD_3,		0,		I1,	0,	0 },
{"sllv",    "y,x",	0xe804, 0xf81f,		MOD_1|RD_2, 	0,		I1,	0,	0 },
{"sll",	    "x,w,<",	0x3000, 0xf803,		WR_1|RD_2,		0,		I1,	0,	0 },
{"sll",     "y,x",	0xe804, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"slti",    "x,8",	0x5000, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"slt",	    "x,y",	0xe802, 0xf81f,		RD_1|RD_2|WR_T,		0,		I1,	0,	0 },
{"slt",     "x,8",	0x5000, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"sltiu",   "x,8",	0x5800, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"sltu",    "x,y",	0xe803, 0xf81f,		RD_1|RD_2|WR_T,		0,		I1,	0,	0 },
{"sltu",    "x,8",	0x5800, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
{"srav",    "y,x",	0xe807, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"sra",	    "x,w,<",	0x3003, 0xf803,		WR_1|RD_2,		0,		I1,	0,	0 },
{"sra",     "y,x",	0xe807, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"srlv",    "y,x",	0xe806, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"srl",	    "x,w,<",	0x3002, 0xf803,		WR_1|RD_2,		0,		I1,	0,	0 },
{"srl",     "y,x",	0xe806, 0xf81f,		MOD_1|RD_2,		0,		I1,	0,	0 },
{"subu",    "z,v,y",	0xe003, 0xf803,		WR_1|RD_2|RD_3,		0,		I1,	0,	0 },
{"subu",    "y,x,I",	0, (int) M_SUBU_I,	INSN_MACRO,		0,		I1,	0,	0 },
{"subu",    "x,I",	0, (int) M_SUBU_I_2,	INSN_MACRO,		0,		I1,	0,	0 },
{"sw",	    "y,W(x)",	0xd800, 0xf800,		RD_1|RD_3,		0,		I1,	0,	0 },
{"sw",	    "x,V(S)",	0xd000, 0xf800,		RD_1,			RD_SP,		I1,	0,	0 },
{"sw",	    "R,V(S)",	0x6200, 0xff00,		0,			RD_31|RD_SP,	I1,	0,	0 },
{"xor",	    "x,y",	0xe80e, 0xf81f,		MOD_1|RD_2, 	0,		I1,	0,	0 },
  /* MIPS16e additions */
{"restore", "M",	0x6400, 0xff80,		WR_31|NODS,		MOD_SP,		I32,	0,	0 },
{"save",    "m",	0x6480, 0xff80,		NODS,			RD_31|MOD_SP,	I32,	0,	0 },
{"sdbbp",   "6",	0xe801, 0xf81f,		TRAP,			0,		I32,	0,	0 },
{"seb",	    "x",	0xe891, 0xf8ff,		MOD_1,			0,		I32,	0,	0 },
{"seh",	    "x",	0xe8b1, 0xf8ff,		MOD_1,			0,		I32,	0,	0 },
{"sew",	    "x",	0xe8d1, 0xf8ff,		MOD_1,			0,		I64,	0,	0 },
{"zeb",	    "x",	0xe811, 0xf8ff,		MOD_1,			0,		I32,	0,	0 },
{"zeh",	    "x",	0xe831, 0xf8ff,		MOD_1,			0,		I32,	0,	0 },
{"zew",	    "x",	0xe851, 0xf8ff,		MOD_1,			0,		I64,	0,	0 },
};

const int bfd_mips16_num_opcodes =
  ((sizeof mips16_opcodes) / (sizeof (mips16_opcodes[0])));
@


1.27
log
@include/opcode/
	* mips.h (mips_pcrel_operand): Inherit from mips_int_operand.
	(mips_int_operand_min, mips_int_operand_max): New functions.
	(mips_decode_pcrel_operand): Use mips_decode_int_operand.

opcodes/
	* mips-formats.h (PCREL): Reorder parameters and update the definition
	to match new mips_pcrel_operand layout.
	(JUMP, JALX, BRANCH): Update accordingly.
	* mips16-opc.c (decode_mips16_operand): Likewise.

gas/
	* config/tc-mips.c (match_int_operand): Use mips_int_operand_min
	and mips_int_operand_max.
	(mips16_immed_operand, mips16_immed_operands, MIPS16_NUM_IMMED):
	Delete.
	(mips16_immed_operand, mips16_immed_in_range_p): New functions.
	(mips16_immed, mips16_extended_frag): Use them.  Use mips_int_operand
	instead of mips16_immed_operand.
@
text
@d69 2
a70 2
    case 'v': MAPPED_REG (3, 8, GP, reg_m16_map);
    case 'w': MAPPED_REG (3, 5, GP, reg_m16_map);
@


1.26
log
@include/opcode/
	* mips.h (mips_decode_reg_operand): New function.
	(INSN_WRITE_SHIFT, INSN_WRITE_1, INSN_WRITE_2, INSN_WRITE_ALL)
	(INSN_READ_SHIFT, INSN_READ_1, INSN_READ_2, INSN_READ_3, INSN_READ_4)
	(INSN_READ_ALL, INSN_READ_GPR_24, INSN_WRITE_GPR_24, INSN_UDI):
	New macros.
	(INSN_WRITE_GPR_D, INSN_WRITE_GPR_T, INSN_WRITE_FPR_D)
	(INSN_WRITE_FPR_S, INSN_WRITE_FPR_T, INSN_READ_GPR_S, INSN_READ_GPR_T)
	(INSN_READ_FPR_S, INSN_READ_FPR_T, INSN_READ_FPR_R, INSN_WRITE_GPR_S)
	(INSN2_WRITE_GPR_Z, INSN2_WRITE_FPR_Z, INSN2_READ_GPR_Z)
	(INSN2_READ_FPR_Z, INSN2_READ_GPR_D, INSN2_READ_FPR_D)
	(INSN2_WRITE_GPR_MB, INSN2_READ_GPR_MC, INSN2_MOD_GPR_MD)
	(INSN2_READ_GPR_ME, INSN2_MOD_GPR_MF, INSN2_READ_GPR_MG)
	(INSN2_READ_GPR_MJ, INSN2_WRITE_GPR_MJ, INSN2_READ_GPR_MP)
	(INSN2_WRITE_GPR_MP, INSN2_READ_GPR_MQ, INSN2_READ_GP)
	(INSN2_WRITE_GPR_MH, INSN2_READ_GPR_MMN): Delete.  Renumber other
	macros to cover the gaps.
	(INSN2_MOD_SP): Replace with...
	(INSN2_WRITE_SP, INSN2_READ_SP): ...these new macros.
	(MIPS16_INSN_WRITE_X, MIPS16_INSN_WRITE_Y, MIPS16_INSN_WRITE_Z)
	(MIPS16_INSN_WRITE_T, MIPS16_INSN_WRITE_31, MIPS16_INSN_WRITE_GPR_Y)
	(MIPS16_INSN_READ_X, MIPS16_INSN_READ_Y, MIPS16_INSN_READ_Z)
	(MIPS16_INSN_READ_T, MIPS16_INSN_READ_SP, MIPS16_INSN_READ_GPR_X):
	Delete.

opcodes/
	* mips-opc.c (WR_1, WR_2, RD_1, RD_2, RD_3, RD_4, MOD_1, MOD_2, UDI):
	New macros.
	(WR_d, WR_t, WR_D, WR_T, WR_S, RD_s, RD_b, RD_t, RD_S, RD_T, RD_R)
	(WR_z, WR_Z, RD_z, RD_Z, RD_d): Delete.
	(mips_builtin_opcodes): Use the new position-based read-write flags
	instead of field-based ones.  Use UDI for "udi..." instructions.
	* mips16-opc.c (WR_1, WR_2, RD_1, RD_2, RD_3, RD_4, MOD_1, MOD_2):
	New macros.
	(WR_x, WR_y, WR_z, WR_Y, RD_x, RD_y, RD_Z, RD_X): Delete.
	(RD_T, WR_T, WR_31): Redefine using generic INSN_* flags.
	(WR_SP, RD_16): New macros.
	(RD_SP): Redefine as an INSN2_* flag.
	(MOD_SP): Redefine in terms of RD_SP and WR_SP.
	(mips16_opcodes): Use the new position-based read-write flags
	instead of field-based ones.  Use RD_16 for "nop".  Move RD_SP to
	pinfo2 field.
	* micromips-opc.c (WR_1, WR_2, RD_1, RD_2, RD_3, RD_4, MOD_1, MOD_2):
	New macros.
	(WR_mb, RD_mc, RD_md, WR_md, RD_me, RD_mf, WR_mf, RD_mg, WR_mh, RD_mj)
	(WR_mj, RD_ml, RD_mmn, RD_mp, WR_mp, RD_mq, RD_gp, WR_d, WR_t, WR_D)
	(WR_T, WR_S, RD_s, RD_b, RD_t, RD_T, RD_S, RD_R, RD_D): Delete.
	(RD_sp, WR_sp): Redefine to INSN2_READ_SP and INSN2_WRITE_SP.
	(micromips_opcodes): Use the new position-based read-write flags
	instead of field-based ones.
	* mips-dis.c (print_insn_arg): Use mips_decode_reg_operand.
	(print_insn_mips, print_insn_micromips): Use INSN_WRITE_1 instead
	of field-based flags.

gas/
	* config/tc-mips.c (MAX_OPERANDS): New macro.
	(mips_operand_array): New structure.
	(mips_operands, mips16_operands, micromips_operands): New arrays.
	(micromips_to_32_reg_b_map, micromips_to_32_reg_c_map)
	(micromips_to_32_reg_e_map, micromips_to_32_reg_f_map)
	(micromips_to_32_reg_g_map, micromips_to_32_reg_l_map)
	(micromips_to_32_reg_q_map): Delete.
	(insn_operands, insn_opno, insn_extract_operand): New functions.
	(validate_mips_insn): Take a mips_operand_array as argument and
	use it to build up a list of operands.  Extend to handle INSN_MACRO
	and MIPS16.
	(validate_mips16_insn): New function.
	(validate_micromips_insn): Take a mips_operand_array as argument.
	Handle INSN_MACRO.
	(md_begin): Initialize mips_operands, mips16_operands and
	micromips_operands.  Call validate_mips_insn and
	validate_micromips_insn for macro instructions too.
	Call validate_mips16_insn for MIPS16 instructions.
	(insn_read_mask, insn_write_mask, operand_reg_mask, insn_reg_mask):
	New functions.
	(gpr_read_mask, gpr_write_mask, fpr_read_mask, fpr_write_mask): Use
	them.  Handle INSN_UDI.
	(get_append_method): Use gpr_read_mask.
@
text
@d89 2
a90 2
      case 'A': PCREL (16, 0, 2, 0, TRUE, FALSE, FALSE);
      case 'B': PCREL (16, 0, 3, 0, TRUE, FALSE, FALSE);
d93 1
a93 1
      case 'E': PCREL (16, 0, 2, 0, TRUE, FALSE, FALSE);
d118 2
a119 2
      case 'A': PCREL (8, 0, 2, 2, FALSE, FALSE, FALSE);
      case 'B': PCREL (5, 0, 3, 3, FALSE, FALSE, FALSE);
d122 1
a122 1
      case 'E': PCREL (5, 0, 2, 2, FALSE, FALSE, FALSE);
@


1.25
log
@include/opcode/
	* mips.h (MIPS16_INSN_WRITE_SP, MIPS16_INSN_READ_31)
	(MIPS16_INSN_READ_PC, MIPS16_INSN_UNCOND_BRANCH)
	(MIPS16_INSN_COND_BRANCH): Delete.

opcodes/
	* mips16-opc.c (UBR, CBR, RD_31, RD_PC): Redefine as INSN2_* flags.
	(WR_SP): Replace with...
	(MOD_SP): ...this.
	(mips16_opcodes): Update accordingly.
	* mips-dis.c (print_insn_mips16): Likewise.

gas/
	* config/tc-mips.c (compact_branch_p, uncond_branch_p): Use the same
	flags for MIPS16 and non-MIPS16 instructions.
	(gpr_mod_mask): Move the INSN2_MOD_SP case outside the micromips block.
	(gpr_read_mask): Use INSN2_READ_GPR_31 for MIPS16 instructions too.
	(gpr_write_mask): Remove MIPS16_INSN_WRITE_SP handling.
	(can_swap_branch_p, get_append_method): Use the same flags for MIPS16
	and non-MIPS16 instructions.  Fix formatting.
@
text
@d147 12
a158 13
#define WR_x	MIPS16_INSN_WRITE_X
#define WR_y	MIPS16_INSN_WRITE_Y
#define WR_z	MIPS16_INSN_WRITE_Z
#define WR_T	MIPS16_INSN_WRITE_T
#define WR_31	MIPS16_INSN_WRITE_31
#define WR_Y	MIPS16_INSN_WRITE_GPR_Y

#define RD_x	MIPS16_INSN_READ_X
#define RD_y	MIPS16_INSN_READ_Y
#define RD_Z	MIPS16_INSN_READ_Z
#define RD_T	MIPS16_INSN_READ_T
#define RD_SP	MIPS16_INSN_READ_SP
#define RD_X	MIPS16_INSN_READ_GPR_X
d168 4
a171 1
#define MOD_SP	INSN2_MOD_SP
d186 2
a187 2
{"nop",	    "",		0x6500, 0xffff,		RD_Z,			0,		I1,	0,	0 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800,		WR_x,			RD_PC,		I1,	0,	0 },
d189 2
a190 2
{"addiu",   "y,x,4",	0x4000, 0xf810,		WR_y|RD_x,		0,		I1,	0,	0 },
{"addiu",   "x,k",	0x4800, 0xf800,		WR_x|RD_x,		0,		I1,	0,	0 },
d193 5
a197 5
{"addiu",   "x,P,V",	0x0800, 0xf800,		WR_x,			RD_PC,		I1,	0,	0 },
{"addiu",   "x,S,V",	0x0000, 0xf800,		WR_x|RD_SP,		0,		I1,	0,	0 },
{"addu",    "z,v,y",	0xe001, 0xf803,		WR_z|RD_x|RD_y,		0,		I1,	0,	0 },
{"addu",    "y,x,4",	0x4000, 0xf810,		WR_y|RD_x,		0,		I1,	0,	0 },
{"addu",    "x,k",	0x4800, 0xf800,		WR_x|RD_x,		0,		I1,	0,	0 },
d200 3
a202 3
{"addu",    "x,P,V",	0x0800, 0xf800,		WR_x,			RD_PC,		I1,	0,	0 },
{"addu",    "x,S,V",	0x0000, 0xf800,		WR_x|RD_SP,		0,		I1,	0,	0 },
{"and",	    "x,y",	0xe80c, 0xf81f,		WR_x|RD_x|RD_y,		0,		I1,	0,	0 },
d206 1
a206 1
{"beqz",    "x,p",	0x2000, 0xf800,		RD_x,			CBR,		I1,	0,	0 },
d225 1
a225 1
{"bnez",    "x,p",	0x2800, 0xf800,		RD_x,			CBR,		I1,	0,	0 },
d229 6
a234 6
{"cmpi",    "x,U",	0x7000, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"cmp",	    "x,y",	0xe80a, 0xf81f,		WR_T|RD_x|RD_y,		0,		I1,	0,	0 },
{"cmp",     "x,U",	0x7000, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"dla",	    "y,E",	0xfe00, 0xff00,		WR_y, 			RD_PC,		I3,	0,	0 },
{"daddiu",  "y,x,4",	0x4010, 0xf810,		WR_y|RD_x, 		0,		I3,	0,	0 },
{"daddiu",  "y,j",	0xfd00, 0xff00,		WR_y|RD_y, 		0,		I3,	0,	0 },
d237 5
a241 5
{"daddiu",  "y,P,W",	0xfe00, 0xff00,		WR_y,	 		RD_PC,		I3,	0,	0 },
{"daddiu",  "y,S,W",	0xff00, 0xff00,		WR_y|RD_SP, 		0,		I3,	0,	0 },
{"daddu",   "z,v,y",	0xe000, 0xf803,		WR_z|RD_x|RD_y, 	0,		I3,	0,	0 },
{"daddu",   "y,x,4",	0x4010, 0xf810,		WR_y|RD_x, 		0,		I3,	0,	0 },
{"daddu",   "y,j",	0xfd00, 0xff00,		WR_y|RD_y, 		0,		I3,	0,	0 },
d244 3
a246 3
{"daddu",   "y,P,W",	0xfe00, 0xff00,		WR_y,	 		RD_PC,		I3,	0,	0 },
{"daddu",   "y,S,W",	0xff00, 0xff00,		WR_y|RD_SP, 		0,		I3,	0,	0 },
{"ddiv",    "0,x,y",	0xe81e, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I3,	0,	0 },
d248 1
a248 1
{"ddivu",   "0,x,y",	0xe81f, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO, 	0,		I3,	0,	0 },
d250 1
a250 1
{"div",     "0,x,y",	0xe81a, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
d252 1
a252 1
{"divu",    "0,x,y",	0xe81b, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
d255 3
a257 3
{"dmult",   "x,y",	0xe81c, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"dmultu",  "x,y",	0xe81d, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,		I3,	0,	0 },
{"drem",    "0,x,y",	0xe81e, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,		I3,	0,	0 },
d259 1
a259 1
{"dremu",   "0,x,y",	0xe81f, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO, 	0,		I3,	0,	0 },
d261 10
a270 10
{"dsllv",   "y,x",	0xe814, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsll",    "x,w,[",	0x3001, 0xf803,		WR_x|RD_y, 		0,		I3,	0,	0 },
{"dsll",    "y,x",	0xe814, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsrav",   "y,x",	0xe817, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsra",    "y,]",	0xe813, 0xf81f,		WR_y|RD_y, 		0,		I3,	0,	0 },
{"dsra",    "y,x",	0xe817, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsrlv",   "y,x",	0xe816, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsrl",    "y,]",	0xe808, 0xf81f,		WR_y|RD_y, 		0,		I3,	0,	0 },
{"dsrl",    "y,x",	0xe816, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I3,	0,	0 },
{"dsubu",   "z,v,y",	0xe002, 0xf803,		WR_z|RD_x|RD_y, 	0,		I3,	0,	0 },
d280 7
a286 7
{"jalr",    "x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,		I1,	0,	0 },
{"jalr",    "R,x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,		I1,	0,	0 },
{"jal",     "x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,		I1,	0,	0 },
{"jal",     "R,x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,		I1,	0,	0 },
{"jal",	    "a",	0x1800, 0xfc00,		UBD|WR_31,		0,		I1,	0,	0 },
{"jalx",    "i",	0x1c00, 0xfc00,		UBD|WR_31,		0,		I1,	0,	0 },
{"jr",	    "x",	0xe800, 0xf8ff,		UBD|RD_x,		0,		I1,	0,	0 },
d288 1
a288 1
{"j",	    "x",	0xe800, 0xf8ff,		UBD|RD_x,		0,		I1,	0,	0 },
d293 22
a314 22
{"jalrc",   "x",	0xe8c0, 0xf8ff,		WR_31|RD_x|NODS,	UBR,		I32,	0,	0 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff,		WR_31|RD_x|NODS,	UBR,		I32,	0,	0 },
{"jrc",	    "x",	0xe880, 0xf8ff,		RD_x|NODS,		UBR,		I32,	0,	0 },
{"jrc",	    "R",	0xe8a0, 0xffff,		NODS,			UBR|RD_31,	I32,	0,	0 },
{"lb",	    "y,5(x)",	0x8000, 0xf800,		WR_y|RD_x,		0,		I1,	0,	0 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800,		WR_y|RD_x,		0,		I1,	0,	0 },
{"ld",	    "y,D(x)",	0x3800, 0xf800,		WR_y|RD_x, 		0,		I3,	0,	0 },
{"ld",	    "y,B",	0xfc00, 0xff00,		WR_y,	 		RD_PC,		I3,	0,	0 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00,		WR_y,	 		RD_PC,		I3,	0,	0 },
{"ld",	    "y,D(S)",	0xf800, 0xff00,		WR_y|RD_SP, 		0,		I3,	0,	0 },
{"lh",	    "y,H(x)",	0x8800, 0xf800,		WR_y|RD_x,		0,		I1,	0,	0 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800,		WR_y|RD_x,		0,		I1,	0,	0 },
{"li",	    "x,U",	0x6800, 0xf800,		WR_x,			0,		I1,	0,	0 },
{"lw",	    "y,W(x)",	0x9800, 0xf800,		WR_y|RD_x,		0,		I1,	0,	0 },
{"lw",	    "x,A",	0xb000, 0xf800,		WR_x,			RD_PC,		I1,	0,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800,		WR_x,			RD_PC,		I1,	0,	0 },
{"lw",	    "x,V(S)",	0x9000, 0xf800,		WR_x|RD_SP,		0,		I1,	0,	0 },
{"lwu",     "y,W(x)",	0xb800, 0xf800,		WR_y|RD_x, 		0,		I3,	0,	0 },
{"mfhi",    "x",	0xe810, 0xf8ff,		WR_x|RD_HI,		0,		I1,	0,	0 },
{"mflo",    "x",	0xe812, 0xf8ff,		WR_x|RD_LO,		0,		I1,	0,	0 },
{"move",    "y,X",	0x6700, 0xff00,		WR_y|RD_X, 		0,		I1,	0,	0 },
{"move",    "Y,Z",	0x6500, 0xff00,		WR_Y|RD_Z,		0,		I1,	0,	0 },
d316 6
a321 6
{"mult",    "x,y",	0xe818, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"multu",   "x,y",	0xe819, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
{"neg",	    "x,w",	0xe80b, 0xf81f,		WR_x|RD_y,		0,		I1,	0,	0 },
{"not",	    "x,w",	0xe80f, 0xf81f,		WR_x|RD_y,		0,		I1,	0,	0 },
{"or",	    "x,y",	0xe80d, 0xf81f,		WR_x|RD_x|RD_y,		0,		I1,	0,	0 },
{"rem",     "0,x,y",	0xe81a, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
d323 1
a323 1
{"remu",    "0,x,y",	0xe81b, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,		I1,	0,	0 },
d325 21
a345 21
{"sb",	    "y,5(x)",	0xc000, 0xf800,		RD_y|RD_x,		0,		I1,	0,	0 },
{"sd",	    "y,D(x)",	0x7800, 0xf800,		RD_y|RD_x, 		0,		I3,	0,	0 },
{"sd",	    "y,D(S)",	0xf900, 0xff00,		RD_y, 			RD_PC,		I3,	0,	0 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00,		0,			RD_PC|RD_31,	I1,	0,	0 },
{"sh",	    "y,H(x)",	0xc800, 0xf800,		RD_y|RD_x,		0,		I1,	0,	0 },
{"sllv",    "y,x",	0xe804, 0xf81f,		WR_y|RD_y|RD_x, 	0,		I1,	0,	0 },
{"sll",	    "x,w,<",	0x3000, 0xf803,		WR_x|RD_y,		0,		I1,	0,	0 },
{"sll",     "y,x",	0xe804, 0xf81f,		WR_y|RD_y|RD_x,		0,		I1,	0,	0 },
{"slti",    "x,8",	0x5000, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"slt",	    "x,y",	0xe802, 0xf81f,		WR_T|RD_x|RD_y,		0,		I1,	0,	0 },
{"slt",     "x,8",	0x5000, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"sltiu",   "x,8",	0x5800, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"sltu",    "x,y",	0xe803, 0xf81f,		WR_T|RD_x|RD_y,		0,		I1,	0,	0 },
{"sltu",    "x,8",	0x5800, 0xf800,		WR_T|RD_x,		0,		I1,	0,	0 },
{"srav",    "y,x",	0xe807, 0xf81f,		WR_y|RD_y|RD_x,		0,		I1,	0,	0 },
{"sra",	    "x,w,<",	0x3003, 0xf803,		WR_x|RD_y,		0,		I1,	0,	0 },
{"sra",     "y,x",	0xe807, 0xf81f,		WR_y|RD_y|RD_x,		0,		I1,	0,	0 },
{"srlv",    "y,x",	0xe806, 0xf81f,		WR_y|RD_y|RD_x,		0,		I1,	0,	0 },
{"srl",	    "x,w,<",	0x3002, 0xf803,		WR_x|RD_y,		0,		I1,	0,	0 },
{"srl",     "y,x",	0xe806, 0xf81f,		WR_y|RD_y|RD_x,		0,		I1,	0,	0 },
{"subu",    "z,v,y",	0xe003, 0xf803,		WR_z|RD_x|RD_y,		0,		I1,	0,	0 },
d348 4
a351 4
{"sw",	    "y,W(x)",	0xd800, 0xf800,		RD_y|RD_x,		0,		I1,	0,	0 },
{"sw",	    "x,V(S)",	0xd000, 0xf800,		RD_x|RD_SP,		0,		I1,	0,	0 },
{"sw",	    "R,V(S)",	0x6200, 0xff00,		RD_SP,			RD_31,		I1,	0,	0 },
{"xor",	    "x,y",	0xe80e, 0xf81f,		WR_x|RD_x|RD_y, 	0,		I1,	0,	0 },
d354 1
a354 1
{"save",    "m",	0x6480, 0xff80,		NODS,			MOD_SP|RD_31,	I32,	0,	0 },
d356 6
a361 6
{"seb",	    "x",	0xe891, 0xf8ff,		WR_x|RD_x,		0,		I32,	0,	0 },
{"seh",	    "x",	0xe8b1, 0xf8ff,		WR_x|RD_x,		0,		I32,	0,	0 },
{"sew",	    "x",	0xe8d1, 0xf8ff,		WR_x|RD_x,		0,		I64,	0,	0 },
{"zeb",	    "x",	0xe811, 0xf8ff,		WR_x|RD_x,		0,		I32,	0,	0 },
{"zeh",	    "x",	0xe831, 0xf8ff,		WR_x|RD_x,		0,		I32,	0,	0 },
{"zew",	    "x",	0xe851, 0xf8ff,		WR_x|RD_x,		0,		I64,	0,	0 },
@


1.24
log
@opcodes/
	* mips16-opc.c (mips16_opcodes): Reformat.
@
text
@a145 2
#define UBR	MIPS16_INSN_UNCOND_BRANCH
#define CBR	MIPS16_INSN_COND_BRANCH
a150 1
#define WR_SP	MIPS16_INSN_WRITE_SP
a158 2
#define RD_31	MIPS16_INSN_READ_31
#define RD_PC	MIPS16_INSN_READ_PC
d169 6
d185 1
a185 1
{"la",	    "x,A",	0x0800, 0xf800,		WR_x|RD_PC,		0,		I1,	0,	0 },
d189 3
a191 3
{"addiu",   "S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,		I1,	0,	0 },
{"addiu",   "S,S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,		I1,	0,	0 },
{"addiu",   "x,P,V",	0x0800, 0xf800,		WR_x|RD_PC,		0,		I1,	0,	0 },
d196 3
a198 3
{"addu",    "S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,		I1,	0,	0 },
{"addu",    "S,S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,		I1,	0,	0 },
{"addu",    "x,P,V",	0x0800, 0xf800,		WR_x|RD_PC,		0,		I1,	0,	0 },
d201 1
a201 1
{"b",	    "q",	0x1000, 0xf800,		UBR,			0,		I1,	0,	0 },
d204 1
a204 1
{"beqz",    "x,p",	0x2000, 0xf800,		CBR|RD_x,		0,		I1,	0,	0 },
d223 1
a223 1
{"bnez",    "x,p",	0x2800, 0xf800,		CBR|RD_x,		0,		I1,	0,	0 },
d225 2
a226 2
{"bteqz",   "p",	0x6000, 0xff00,		CBR|RD_T,		0,		I1,	0,	0 },
{"btnez",   "p",	0x6100, 0xff00,		CBR|RD_T,		0,		I1,	0,	0 },
d230 1
a230 1
{"dla",	    "y,E",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,		I3,	0,	0 },
d233 3
a235 3
{"daddiu",  "S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,		I3,	0,	0 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,		I3,	0,	0 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,		I3,	0,	0 },
d240 3
a242 3
{"daddu",   "S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,		I3,	0,	0 },
{"daddu",   "S,S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,		I3,	0,	0 },
{"daddu",   "y,P,W",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,		I3,	0,	0 },
d285 1
a285 1
{"jr",	    "R",	0xe820, 0xffff,		UBD|RD_31,		0,		I1,	0,	0 },
d287 1
a287 1
{"j",	    "R",	0xe820, 0xffff,		UBD|RD_31,		0,		I1,	0,	0 },
d291 4
a294 4
{"jalrc",   "x",	0xe8c0, 0xf8ff,		UBR|WR_31|RD_x|NODS,	0,		I32,	0,	0 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff,		UBR|WR_31|RD_x|NODS,	0,		I32,	0,	0 },
{"jrc",	    "x",	0xe880, 0xf8ff,		UBR|RD_x|NODS,		0,		I32,	0,	0 },
{"jrc",	    "R",	0xe8a0, 0xffff,		UBR|RD_31|NODS,		0,		I32,	0,	0 },
d298 2
a299 2
{"ld",	    "y,B",	0xfc00, 0xff00,		WR_y|RD_PC, 		0,		I3,	0,	0 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00,		WR_y|RD_PC, 		0,		I3,	0,	0 },
d305 2
a306 2
{"lw",	    "x,A",	0xb000, 0xf800,		WR_x|RD_PC,		0,		I1,	0,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800,		WR_x|RD_PC,		0,		I1,	0,	0 },
d325 2
a326 2
{"sd",	    "y,D(S)",	0xf900, 0xff00,		RD_y|RD_PC, 		0,		I3,	0,	0 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00,		RD_31|RD_PC,		0,		I1,	0,	0 },
d348 1
a348 1
{"sw",	    "R,V(S)",	0x6200, 0xff00,		RD_31|RD_SP,		0,		I1,	0,	0 },
d351 2
a352 2
{"restore", "M",	0x6400, 0xff80,		WR_31|RD_SP|WR_SP|NODS,	0,		I32,	0,	0 },
{"save",    "m",	0x6480, 0xff80,		RD_31|RD_SP|WR_SP|NODS,	0,		I32,	0,	0 },
@


1.23
log
@opcodes/
	* Makefile.am (mips-opc.lo, micromips-opc.lo, mips16-opc.lo): Remove
	special rules.
	* Makefile.in: Regenerate.
	* mips-opc.c, micromips-opc.c, mips16-opc.c: Explicitly initialize
	all fields.  Reformat.
@
text
@d183 104
a286 104
{"nop",	    "",		0x6500, 0xffff,		RD_Z,			0,	I1,	0,	0 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800,		WR_x|RD_PC,		0,	I1,	0,	0 },
{"abs",	    "x,w",	0, (int) M_ABS,		INSN_MACRO,		0,	I1,	0,	0 },
{"addiu",   "y,x,4",	0x4000, 0xf810,		WR_y|RD_x,		0,	I1,	0,	0 },
{"addiu",   "x,k",	0x4800, 0xf800,		WR_x|RD_x,		0,	I1,	0,	0 },
{"addiu",   "S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,	I1,	0,	0 },
{"addiu",   "S,S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,	I1,	0,	0 },
{"addiu",   "x,P,V",	0x0800, 0xf800,		WR_x|RD_PC,		0,	I1,	0,	0 },
{"addiu",   "x,S,V",	0x0000, 0xf800,		WR_x|RD_SP,		0,	I1,	0,	0 },
{"addu",    "z,v,y",	0xe001, 0xf803,		WR_z|RD_x|RD_y,		0,	I1,	0,	0 },
{"addu",    "y,x,4",	0x4000, 0xf810,		WR_y|RD_x,		0,	I1,	0,	0 },
{"addu",    "x,k",	0x4800, 0xf800,		WR_x|RD_x,		0,	I1,	0,	0 },
{"addu",    "S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,	I1,	0,	0 },
{"addu",    "S,S,K",	0x6300, 0xff00,		WR_SP|RD_SP,		0,	I1,	0,	0 },
{"addu",    "x,P,V",	0x0800, 0xf800,		WR_x|RD_PC,		0,	I1,	0,	0 },
{"addu",    "x,S,V",	0x0000, 0xf800,		WR_x|RD_SP,		0,	I1,	0,	0 },
{"and",	    "x,y",	0xe80c, 0xf81f,		WR_x|RD_x|RD_y,		0,	I1,	0,	0 },
{"b",	    "q",	0x1000, 0xf800,		UBR,			0,	I1,	0,	0 },
{"beq",	    "x,y,p",	0, (int) M_BEQ,		INSN_MACRO,		0,	I1,	0,	0 },
{"beq",     "x,I,p",	0, (int) M_BEQ_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"beqz",    "x,p",	0x2000, 0xf800,		CBR|RD_x,		0,	I1,	0,	0 },
{"bge",	    "x,y,p",	0, (int) M_BGE,		INSN_MACRO,		0,	I1,	0,	0 },
{"bge",     "x,I,p",	0, (int) M_BGE_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bgeu",    "x,y,p",	0, (int) M_BGEU,	INSN_MACRO,		0,	I1,	0,	0 },
{"bgeu",    "x,I,p",	0, (int) M_BGEU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bgt",	    "x,y,p",	0, (int) M_BGT,		INSN_MACRO,		0,	I1,	0,	0 },
{"bgt",     "x,I,p",	0, (int) M_BGT_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bgtu",    "x,y,p",	0, (int) M_BGTU,	INSN_MACRO,		0,	I1,	0,	0 },
{"bgtu",    "x,I,p",	0, (int) M_BGTU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"ble",	    "x,y,p",	0, (int) M_BLE,		INSN_MACRO,		0,	I1,	0,	0 },
{"ble",     "x,I,p",	0, (int) M_BLE_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bleu",    "x,y,p",	0, (int) M_BLEU,	INSN_MACRO,		0,	I1,	0,	0 },
{"bleu",    "x,I,p",	0, (int) M_BLEU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"blt",	    "x,y,p",	0, (int) M_BLT,		INSN_MACRO,		0,	I1,	0,	0 },
{"blt",     "x,I,p",	0, (int) M_BLT_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bltu",    "x,y,p",	0, (int) M_BLTU,	INSN_MACRO,		0,	I1,	0,	0 },
{"bltu",    "x,I,p",	0, (int) M_BLTU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bne",	    "x,y,p",	0, (int) M_BNE,		INSN_MACRO,		0,	I1,	0,	0 },
{"bne",     "x,I,p",	0, (int) M_BNE_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"bnez",    "x,p",	0x2800, 0xf800,		CBR|RD_x,		0,	I1,	0,	0 },
{"break",   "6",	0xe805, 0xf81f,		TRAP,			0,	I1,	0,	0 },
{"bteqz",   "p",	0x6000, 0xff00,		CBR|RD_T,		0,	I1,	0,	0 },
{"btnez",   "p",	0x6100, 0xff00,		CBR|RD_T,		0,	I1,	0,	0 },
{"cmpi",    "x,U",	0x7000, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"cmp",	    "x,y",	0xe80a, 0xf81f,		WR_T|RD_x|RD_y,		0,	I1,	0,	0 },
{"cmp",     "x,U",	0x7000, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"dla",	    "y,E",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,	I3,	0,	0 },
{"daddiu",  "y,x,4",	0x4010, 0xf810,		WR_y|RD_x, 		0,	I3,	0,	0 },
{"daddiu",  "y,j",	0xfd00, 0xff00,		WR_y|RD_y, 		0,	I3,	0,	0 },
{"daddiu",  "S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,	I3,	0,	0 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,	I3,	0,	0 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,	I3,	0,	0 },
{"daddiu",  "y,S,W",	0xff00, 0xff00,		WR_y|RD_SP, 		0,	I3,	0,	0 },
{"daddu",   "z,v,y",	0xe000, 0xf803,		WR_z|RD_x|RD_y, 	0,	I3,	0,	0 },
{"daddu",   "y,x,4",	0x4010, 0xf810,		WR_y|RD_x, 		0,	I3,	0,	0 },
{"daddu",   "y,j",	0xfd00, 0xff00,		WR_y|RD_y, 		0,	I3,	0,	0 },
{"daddu",   "S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,	I3,	0,	0 },
{"daddu",   "S,S,K",	0xfb00, 0xff00,		WR_SP|RD_SP, 		0,	I3,	0,	0 },
{"daddu",   "y,P,W",	0xfe00, 0xff00,		WR_y|RD_PC, 		0,	I3,	0,	0 },
{"daddu",   "y,S,W",	0xff00, 0xff00,		WR_y|RD_SP, 		0,	I3,	0,	0 },
{"ddiv",    "0,x,y",	0xe81e, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I3,	0,	0 },
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"ddivu",   "0,x,y",	0xe81f, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO, 	0,	I3,	0,	0 },
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"div",     "0,x,y",	0xe81a, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"div",     "z,v,y",	0, (int) M_DIV_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"divu",    "0,x,y",	0xe81b, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"divu",    "z,v,y",	0, (int) M_DIVU_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"dmul",    "z,v,y",	0, (int) M_DMUL,	INSN_MACRO, 		0,	I3,	0,	0 },
{"dmult",   "x,y",	0xe81c, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,	I3,	0,	0 },
{"dmultu",  "x,y",	0xe81d, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,	I3,	0,	0 },
{"drem",    "0,x,y",	0xe81e, 0xf81f, 	RD_x|RD_y|WR_HI|WR_LO, 	0,	I3,	0,	0 },
{"drem",    "z,v,y",	0, (int) M_DREM_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"dremu",   "0,x,y",	0xe81f, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO, 	0,	I3,	0,	0 },
{"dremu",   "z,v,y",	0, (int) M_DREMU_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"dsllv",   "y,x",	0xe814, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsll",    "x,w,[",	0x3001, 0xf803,		WR_x|RD_y, 		0,	I3,	0,	0 },
{"dsll",    "y,x",	0xe814, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsrav",   "y,x",	0xe817, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsra",    "y,]",	0xe813, 0xf81f,		WR_y|RD_y, 		0,	I3,	0,	0 },
{"dsra",    "y,x",	0xe817, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsrlv",   "y,x",	0xe816, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsrl",    "y,]",	0xe808, 0xf81f,		WR_y|RD_y, 		0,	I3,	0,	0 },
{"dsrl",    "y,x",	0xe816, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I3,	0,	0 },
{"dsubu",   "z,v,y",	0xe002, 0xf803,		WR_z|RD_x|RD_y, 	0,	I3,	0,	0 },
{"dsubu",   "y,x,I",	0, (int) M_DSUBU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"dsubu",   "y,I",	0, (int) M_DSUBU_I_2,	INSN_MACRO, 		0,	I1,	0,	0 },
{"exit",    "L",	0xed09, 0xff1f,		TRAP,			0,	I1,	0,	0 },
{"exit",    "L",	0xee09, 0xff1f,		TRAP,			0,	I1,	0,	0 },
{"exit",    "",		0xef09, 0xffff,		TRAP,			0,	I1,	0,	0 },
{"exit",    "L",	0xef09, 0xff1f,		TRAP,			0,	I1,	0,	0 },
{"entry",   "",		0xe809, 0xffff,		TRAP,			0,	I1,	0,	0 },
{"entry",   "l",	0xe809, 0xf81f,		TRAP,			0,	I1,	0,	0 },
{"extend",  "e",	0xf000, 0xf800,		0,			0,	I1,	0,	0 },
{"jalr",    "x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,	I1,	0,	0 },
{"jalr",    "R,x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,	I1,	0,	0 },
{"jal",     "x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,	I1,	0,	0 },
{"jal",     "R,x",	0xe840, 0xf8ff,		UBD|WR_31|RD_x,		0,	I1,	0,	0 },
{"jal",	    "a",	0x1800, 0xfc00,		UBD|WR_31,		0,	I1,	0,	0 },
{"jalx",    "i",	0x1c00, 0xfc00,		UBD|WR_31,		0,	I1,	0,	0 },
{"jr",	    "x",	0xe800, 0xf8ff,		UBD|RD_x,		0,	I1,	0,	0 },
{"jr",	    "R",	0xe820, 0xffff,		UBD|RD_31,		0,	I1,	0,	0 },
{"j",	    "x",	0xe800, 0xf8ff,		UBD|RD_x,		0,	I1,	0,	0 },
{"j",	    "R",	0xe820, 0xffff,		UBD|RD_31,		0,	I1,	0,	0 },
d290 59
a348 59
{"jalrc",   "x",	0xe8c0, 0xf8ff,		UBR|WR_31|RD_x|NODS,	0,	I32,	0,	0 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff,		UBR|WR_31|RD_x|NODS,	0,	I32,	0,	0 },
{"jrc",	    "x",	0xe880, 0xf8ff,		UBR|RD_x|NODS,		0,	I32,	0,	0 },
{"jrc",	    "R",	0xe8a0, 0xffff,		UBR|RD_31|NODS,		0,	I32,	0,	0 },
{"lb",	    "y,5(x)",	0x8000, 0xf800,		WR_y|RD_x,		0,	I1,	0,	0 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800,		WR_y|RD_x,		0,	I1,	0,	0 },
{"ld",	    "y,D(x)",	0x3800, 0xf800,		WR_y|RD_x, 		0,	I3,	0,	0 },
{"ld",	    "y,B",	0xfc00, 0xff00,		WR_y|RD_PC, 		0,	I3,	0,	0 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00,		WR_y|RD_PC, 		0,	I3,	0,	0 },
{"ld",	    "y,D(S)",	0xf800, 0xff00,		WR_y|RD_SP, 		0,	I3,	0,	0 },
{"lh",	    "y,H(x)",	0x8800, 0xf800,		WR_y|RD_x,		0,	I1,	0,	0 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800,		WR_y|RD_x,		0,	I1,	0,	0 },
{"li",	    "x,U",	0x6800, 0xf800,		WR_x,			0,	I1,	0,	0 },
{"lw",	    "y,W(x)",	0x9800, 0xf800,		WR_y|RD_x,		0,	I1,	0,	0 },
{"lw",	    "x,A",	0xb000, 0xf800,		WR_x|RD_PC,		0,	I1,	0,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800,		WR_x|RD_PC,		0,	I1,	0,	0 },
{"lw",	    "x,V(S)",	0x9000, 0xf800,		WR_x|RD_SP,		0,	I1,	0,	0 },
{"lwu",     "y,W(x)",	0xb800, 0xf800,		WR_y|RD_x, 		0,	I3,	0,	0 },
{"mfhi",    "x",	0xe810, 0xf8ff,		WR_x|RD_HI,		0,	I1,	0,	0 },
{"mflo",    "x",	0xe812, 0xf8ff,		WR_x|RD_LO,		0,	I1,	0,	0 },
{"move",    "y,X",	0x6700, 0xff00,		WR_y|RD_X, 		0,	I1,	0,	0 },
{"move",    "Y,Z",	0x6500, 0xff00,		WR_Y|RD_Z,		0,	I1,	0,	0 },
{"mul",     "z,v,y",	0, (int) M_MUL, 	INSN_MACRO,		0,	I1,	0,	0 },
{"mult",    "x,y",	0xe818, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"multu",   "x,y",	0xe819, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"neg",	    "x,w",	0xe80b, 0xf81f,		WR_x|RD_y,		0,	I1,	0,	0 },
{"not",	    "x,w",	0xe80f, 0xf81f,		WR_x|RD_y,		0,	I1,	0,	0 },
{"or",	    "x,y",	0xe80d, 0xf81f,		WR_x|RD_x|RD_y,		0,	I1,	0,	0 },
{"rem",     "0,x,y",	0xe81a, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"rem",     "z,v,y",	0, (int) M_REM_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"remu",    "0,x,y",	0xe81b, 0xf81f,		RD_x|RD_y|WR_HI|WR_LO,	0,	I1,	0,	0 },
{"remu",    "z,v,y",	0, (int) M_REMU_3,	INSN_MACRO,		0,	I1,	0,	0 },
{"sb",	    "y,5(x)",	0xc000, 0xf800,		RD_y|RD_x,		0,	I1,	0,	0 },
{"sd",	    "y,D(x)",	0x7800, 0xf800,		RD_y|RD_x, 		0,	I3,	0,	0 },
{"sd",	    "y,D(S)",	0xf900, 0xff00,		RD_y|RD_PC, 		0,	I3,	0,	0 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00,		RD_31|RD_PC,		0,	I1,	0,	0 },
{"sh",	    "y,H(x)",	0xc800, 0xf800,		RD_y|RD_x,		0,	I1,	0,	0 },
{"sllv",    "y,x",	0xe804, 0xf81f,		WR_y|RD_y|RD_x, 	0,	I1,	0,	0 },
{"sll",	    "x,w,<",	0x3000, 0xf803,		WR_x|RD_y,		0,	I1,	0,	0 },
{"sll",     "y,x",	0xe804, 0xf81f,		WR_y|RD_y|RD_x,		0,	I1,	0,	0 },
{"slti",    "x,8",	0x5000, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"slt",	    "x,y",	0xe802, 0xf81f,		WR_T|RD_x|RD_y,		0,	I1,	0,	0 },
{"slt",     "x,8",	0x5000, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"sltiu",   "x,8",	0x5800, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"sltu",    "x,y",	0xe803, 0xf81f,		WR_T|RD_x|RD_y,		0,	I1,	0,	0 },
{"sltu",    "x,8",	0x5800, 0xf800,		WR_T|RD_x,		0,	I1,	0,	0 },
{"srav",    "y,x",	0xe807, 0xf81f,		WR_y|RD_y|RD_x,		0,	I1,	0,	0 },
{"sra",	    "x,w,<",	0x3003, 0xf803,		WR_x|RD_y,		0,	I1,	0,	0 },
{"sra",     "y,x",	0xe807, 0xf81f,		WR_y|RD_y|RD_x,		0,	I1,	0,	0 },
{"srlv",    "y,x",	0xe806, 0xf81f,		WR_y|RD_y|RD_x,		0,	I1,	0,	0 },
{"srl",	    "x,w,<",	0x3002, 0xf803,		WR_x|RD_y,		0,	I1,	0,	0 },
{"srl",     "y,x",	0xe806, 0xf81f,		WR_y|RD_y|RD_x,		0,	I1,	0,	0 },
{"subu",    "z,v,y",	0xe003, 0xf803,		WR_z|RD_x|RD_y,		0,	I1,	0,	0 },
{"subu",    "y,x,I",	0, (int) M_SUBU_I,	INSN_MACRO,		0,	I1,	0,	0 },
{"subu",    "x,I",	0, (int) M_SUBU_I_2,	INSN_MACRO,		0,	I1,	0,	0 },
{"sw",	    "y,W(x)",	0xd800, 0xf800,		RD_y|RD_x,		0,	I1,	0,	0 },
{"sw",	    "x,V(S)",	0xd000, 0xf800,		RD_x|RD_SP,		0,	I1,	0,	0 },
{"sw",	    "R,V(S)",	0x6200, 0xff00,		RD_31|RD_SP,		0,	I1,	0,	0 },
{"xor",	    "x,y",	0xe80e, 0xf81f,		WR_x|RD_x|RD_y, 	0,	I1,	0,	0 },
d350 9
a358 9
{"restore", "M",	0x6400, 0xff80,		WR_31|RD_SP|WR_SP|NODS,	0,	I32,	0,	0 },
{"save",    "m",	0x6480, 0xff80,		RD_31|RD_SP|WR_SP|NODS,	0,	I32,	0,	0 },
{"sdbbp",   "6",	0xe801, 0xf81f,		TRAP,			0,	I32,	0,	0 },
{"seb",	    "x",	0xe891, 0xf8ff,		WR_x|RD_x,		0,      I32,	0,	0 },
{"seh",	    "x",	0xe8b1, 0xf8ff,		WR_x|RD_x,		0,      I32,	0,	0 },
{"sew",	    "x",	0xe8d1, 0xf8ff,		WR_x|RD_x,		0,      I64,	0,	0 },
{"zeb",	    "x",	0xe811, 0xf8ff,		WR_x|RD_x,		0,      I32,	0,	0 },
{"zeh",	    "x",	0xe831, 0xf8ff,		WR_x|RD_x,		0,      I32,	0,	0 },
{"zew",	    "x",	0xe851, 0xf8ff,		WR_x|RD_x,		0,      I64,	0,	0 },
@


1.22
log
@include/opcode/
	* mips.h (mips_operand_type): Add OP_ENTRY_EXIT_LIST and
	OP_SAVE_RESTORE_LIST.
	(decode_mips16_operand): Declare.

opcodes/
	* mips16-opc.c: Include mips-formats.h.
	(reg_0_map, reg_29_map, reg_31_map, reg_m16_map, reg32r_map): New
	static arrays.
	(decode_mips16_operand): New function.
	* mips-dis.c (mips16_to_32_reg_map, mips16_reg_names): Delete.
	(print_insn_arg): Handle OP_ENTRY_EXIT list.
	Abort for OP_SAVE_RESTORE_LIST.
	(print_mips16_insn_arg): Change interface.  Use mips_operand
	structures.  Delete GET_OP_S.  Move GET_OP definition to...
	(print_insn_mips16): ...here.  Call init_print_arg_state.
	Update the call to print_mips16_insn_arg.
@
text
@d182 105
a286 105
/* name,    args,	match,	mask,	pinfo,         	pinfo2, membership */
{"nop",	    "",		0x6500, 0xffff, RD_Z,		0,	I1 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800, WR_x|RD_PC,	0,	I1 },
{"abs",	    "x,w",	0, (int) M_ABS, INSN_MACRO,	0,	I1 },
{"addiu",   "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0,	I1 },
{"addiu",   "x,k",	0x4800, 0xf800, WR_x|RD_x,	0,	I1 },
{"addiu",   "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	I1 },
{"addiu",   "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	I1 },
{"addiu",   "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0,	I1 },
{"addiu",   "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0,	I1 },
{"addu",    "z,v,y",	0xe001, 0xf803, WR_z|RD_x|RD_y,	0,	I1 },
{"addu",    "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0,	I1 },
{"addu",    "x,k",	0x4800, 0xf800, WR_x|RD_x,	0,	I1 },
{"addu",    "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	I1 },
{"addu",    "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	I1 },
{"addu",    "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0,	I1 },
{"addu",    "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0,	I1 },
{"and",	    "x,y",	0xe80c, 0xf81f, WR_x|RD_x|RD_y,	0,	I1 },
{"b",	    "q",	0x1000, 0xf800, UBR,		0,	I1 },
{"beq",	    "x,y,p",	0, (int) M_BEQ, INSN_MACRO,	0,	I1 },
{"beq",     "x,I,p",	0, (int) M_BEQ_I, INSN_MACRO,	0,	I1 },
{"beqz",    "x,p",	0x2000, 0xf800, CBR|RD_x,	0,	I1 },
{"bge",	    "x,y,p",	0, (int) M_BGE, INSN_MACRO,	0,	I1 },
{"bge",     "x,I,p",	0, (int) M_BGE_I, INSN_MACRO,	0,	I1 },
{"bgeu",    "x,y,p",	0, (int) M_BGEU, INSN_MACRO,	0,	I1 },
{"bgeu",    "x,I,p",	0, (int) M_BGEU_I, INSN_MACRO,	0,	I1 },
{"bgt",	    "x,y,p",	0, (int) M_BGT, INSN_MACRO,	0,	I1 },
{"bgt",     "x,I,p",	0, (int) M_BGT_I, INSN_MACRO,	0,	I1 },
{"bgtu",    "x,y,p",	0, (int) M_BGTU, INSN_MACRO,	0,	I1 },
{"bgtu",    "x,I,p",	0, (int) M_BGTU_I, INSN_MACRO,	0,	I1 },
{"ble",	    "x,y,p",	0, (int) M_BLE, INSN_MACRO,	0,	I1 },
{"ble",     "x,I,p",	0, (int) M_BLE_I, INSN_MACRO,	0,	I1 },
{"bleu",    "x,y,p",	0, (int) M_BLEU, INSN_MACRO,	0,	I1 },
{"bleu",    "x,I,p",	0, (int) M_BLEU_I, INSN_MACRO,	0,	I1 },
{"blt",	    "x,y,p",	0, (int) M_BLT, INSN_MACRO,	0,	I1 },
{"blt",     "x,I,p",	0, (int) M_BLT_I, INSN_MACRO,	0,	I1 },
{"bltu",    "x,y,p",	0, (int) M_BLTU, INSN_MACRO,	0,	I1 },
{"bltu",    "x,I,p",	0, (int) M_BLTU_I, INSN_MACRO,	0,	I1 },
{"bne",	    "x,y,p",	0, (int) M_BNE, INSN_MACRO,	0,	I1 },
{"bne",     "x,I,p",	0, (int) M_BNE_I, INSN_MACRO,	0,	I1 },
{"bnez",    "x,p",	0x2800, 0xf800, CBR|RD_x,	0,	I1 },
{"break",   "6",	0xe805, 0xf81f, TRAP,		0,	I1 },
{"bteqz",   "p",	0x6000, 0xff00, CBR|RD_T,	0,	I1 },
{"btnez",   "p",	0x6100, 0xff00, CBR|RD_T,	0,	I1 },
{"cmpi",    "x,U",	0x7000, 0xf800, WR_T|RD_x,	0,	I1 },
{"cmp",	    "x,y",	0xe80a, 0xf81f, WR_T|RD_x|RD_y,	0,	I1 },
{"cmp",     "x,U",	0x7000, 0xf800, WR_T|RD_x,	0,	I1 },
{"dla",	    "y,E",	0xfe00, 0xff00, WR_y|RD_PC, 	0,	I3 },
{"daddiu",  "y,x,4",	0x4010, 0xf810, WR_y|RD_x, 	0,	I3 },
{"daddiu",  "y,j",	0xfd00, 0xff00, WR_y|RD_y, 	0,	I3 },
{"daddiu",  "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	0,	I3 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	0,	I3 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, 	0,	I3 },
{"daddiu",  "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, 	0,	I3 },
{"daddu",   "z,v,y",	0xe000, 0xf803, WR_z|RD_x|RD_y, 0,	I3 },
{"daddu",   "y,x,4",	0x4010, 0xf810, WR_y|RD_x, 	0,	I3 },
{"daddu",   "y,j",	0xfd00, 0xff00, WR_y|RD_y, 	0,	I3 },
{"daddu",   "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	0,	I3 },
{"daddu",   "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	0,	I3 },
{"daddu",   "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, 	0,	I3 },
{"daddu",   "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, 	0,	I3 },
{"ddiv",    "0,x,y",	0xe81e, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 	0,	I3 },
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3, INSN_MACRO,	0,	I1 },
{"ddivu",   "0,x,y",	0xe81f, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 0,	I3 },
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3, INSN_MACRO,	0,	I1 },
{"div",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"div",     "z,v,y",	0, (int) M_DIV_3, INSN_MACRO,	0,	I1 },
{"divu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"divu",    "z,v,y",	0, (int) M_DIVU_3, INSN_MACRO,	0,	I1 },
{"dmul",    "z,v,y",	0, (int) M_DMUL, INSN_MACRO, 	0,	I3 },
{"dmult",   "x,y",	0xe81c, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 0,	I3 },
{"dmultu",  "x,y",	0xe81d, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 0,	I3 },
{"drem",    "0,x,y",	0xe81e, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 0,	I3 },
{"drem",    "z,v,y",	0, (int) M_DREM_3, INSN_MACRO,	0,	I1 },
{"dremu",   "0,x,y",	0xe81f, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, 0,	I3 },
{"dremu",   "z,v,y",	0, (int) M_DREMU_3, INSN_MACRO,	0,	I1 },
{"dsllv",   "y,x",	0xe814, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsll",    "x,w,[",	0x3001, 0xf803, WR_x|RD_y, 	0,	I3 },
{"dsll",    "y,x",	0xe814, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsrav",   "y,x",	0xe817, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsra",    "y,]",	0xe813, 0xf81f, WR_y|RD_y, 	0,	I3 },
{"dsra",    "y,x",	0xe817, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsrlv",   "y,x",	0xe816, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsrl",    "y,]",	0xe808, 0xf81f, WR_y|RD_y, 	0,	I3 },
{"dsrl",    "y,x",	0xe816, 0xf81f, WR_y|RD_y|RD_x, 0,	I3 },
{"dsubu",   "z,v,y",	0xe002, 0xf803, WR_z|RD_x|RD_y, 0,	I3 },
{"dsubu",   "y,x,I",	0, (int) M_DSUBU_I, INSN_MACRO,	0,	I1 },
{"dsubu",   "y,I",	0, (int) M_DSUBU_I_2, INSN_MACRO, 0,	I1 },
{"exit",    "L",	0xed09, 0xff1f, TRAP,		0,	I1 },
{"exit",    "L",	0xee09, 0xff1f, TRAP,		0,	I1 },
{"exit",    "",		0xef09, 0xffff, TRAP,		0,	I1 },
{"exit",    "L",	0xef09, 0xff1f, TRAP,		0,	I1 },
{"entry",   "",		0xe809, 0xffff, TRAP,		0,	I1 },
{"entry",   "l",	0xe809, 0xf81f, TRAP,		0,	I1 },
{"extend",  "e",	0xf000, 0xf800, 0,		0,	I1 },
{"jalr",    "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	I1 },
{"jalr",    "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	I1 },
{"jal",     "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	I1 },
{"jal",     "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	I1 },
{"jal",	    "a",	0x1800, 0xfc00, UBD|WR_31,	0,	I1 },
{"jalx",    "i",	0x1c00, 0xfc00, UBD|WR_31,	0,	I1 },
{"jr",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0,	I1 },
{"jr",	    "R",	0xe820, 0xffff, UBD|RD_31,	0,	I1 },
{"j",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0,	I1 },
{"j",	    "R",	0xe820, 0xffff, UBD|RD_31,	0,	I1 },
d290 59
a348 59
{"jalrc",   "x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|NODS, 0,	I32 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|NODS, 0,	I32 },
{"jrc",	    "x",	0xe880, 0xf8ff, UBR|RD_x|NODS,	0,	I32 },
{"jrc",	    "R",	0xe8a0, 0xffff, UBR|RD_31|NODS,	0,	I32 },
{"lb",	    "y,5(x)",	0x8000, 0xf800, WR_y|RD_x,	0,	I1 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800, WR_y|RD_x,	0,	I1 },
{"ld",	    "y,D(x)",	0x3800, 0xf800, WR_y|RD_x, 	0,	I3 },
{"ld",	    "y,B",	0xfc00, 0xff00, WR_y|RD_PC, 	0,	I3 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00, WR_y|RD_PC, 	0,	I3 },
{"ld",	    "y,D(S)",	0xf800, 0xff00, WR_y|RD_SP, 	0,	I3 },
{"lh",	    "y,H(x)",	0x8800, 0xf800, WR_y|RD_x,	0,	I1 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800, WR_y|RD_x,	0,	I1 },
{"li",	    "x,U",	0x6800, 0xf800, WR_x,		0,	I1 },
{"lw",	    "y,W(x)",	0x9800, 0xf800, WR_y|RD_x,	0,	I1 },
{"lw",	    "x,A",	0xb000, 0xf800, WR_x|RD_PC,	0,	I1 },
{"lw",	    "x,V(P)",	0xb000, 0xf800, WR_x|RD_PC,	0,	I1 },
{"lw",	    "x,V(S)",	0x9000, 0xf800, WR_x|RD_SP,	0,	I1 },
{"lwu",     "y,W(x)",	0xb800, 0xf800, WR_y|RD_x, 	0,	I3 },
{"mfhi",    "x",	0xe810, 0xf8ff, WR_x|RD_HI,	0,	I1 },
{"mflo",    "x",	0xe812, 0xf8ff, WR_x|RD_LO,	0,	I1 },
{"move",    "y,X",	0x6700, 0xff00, WR_y|RD_X, 	0,	I1 },
{"move",    "Y,Z",	0x6500, 0xff00, WR_Y|RD_Z,	0,	I1 },
{"mul",     "z,v,y",	0, (int) M_MUL, INSN_MACRO,	0,	I1 },
{"mult",    "x,y",	0xe818, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"multu",   "x,y",	0xe819, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"neg",	    "x,w",	0xe80b, 0xf81f, WR_x|RD_y,	0,	I1 },
{"not",	    "x,w",	0xe80f, 0xf81f, WR_x|RD_y,	0,	I1 },
{"or",	    "x,y",	0xe80d, 0xf81f, WR_x|RD_x|RD_y,	0,	I1 },
{"rem",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"rem",     "z,v,y",	0, (int) M_REM_3, INSN_MACRO,	0,	I1 },
{"remu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	I1 },
{"remu",    "z,v,y",	0, (int) M_REMU_3, INSN_MACRO,	0,	I1 },
{"sb",	    "y,5(x)",	0xc000, 0xf800, RD_y|RD_x,	0,	I1 },
{"sd",	    "y,D(x)",	0x7800, 0xf800, RD_y|RD_x, 	0,	I3 },
{"sd",	    "y,D(S)",	0xf900, 0xff00, RD_y|RD_PC, 	0,	I3 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00, RD_31|RD_PC,	0,	I1 },
{"sh",	    "y,H(x)",	0xc800, 0xf800, RD_y|RD_x,	0,	I1 },
{"sllv",    "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x, 0,	I1 },
{"sll",	    "x,w,<",	0x3000, 0xf803, WR_x|RD_y,	0,	I1 },
{"sll",     "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x,	0,	I1 },
{"slti",    "x,8",	0x5000, 0xf800, WR_T|RD_x,	0,	I1 },
{"slt",	    "x,y",	0xe802, 0xf81f, WR_T|RD_x|RD_y,	0,	I1 },
{"slt",     "x,8",	0x5000, 0xf800, WR_T|RD_x,	0,	I1 },
{"sltiu",   "x,8",	0x5800, 0xf800, WR_T|RD_x,	0,	I1 },
{"sltu",    "x,y",	0xe803, 0xf81f, WR_T|RD_x|RD_y,	0,	I1 },
{"sltu",    "x,8",	0x5800, 0xf800, WR_T|RD_x,	0,	I1 },
{"srav",    "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0,	I1 },
{"sra",	    "x,w,<",	0x3003, 0xf803, WR_x|RD_y,	0,	I1 },
{"sra",     "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0,	I1 },
{"srlv",    "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0,	I1 },
{"srl",	    "x,w,<",	0x3002, 0xf803, WR_x|RD_y,	0,	I1 },
{"srl",     "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0,	I1 },
{"subu",    "z,v,y",	0xe003, 0xf803, WR_z|RD_x|RD_y,	0,	I1 },
{"subu",    "y,x,I",	0, (int) M_SUBU_I, INSN_MACRO,	0,	I1 },
{"subu",    "x,I",	0, (int) M_SUBU_I_2, INSN_MACRO,0,	I1 },
{"sw",	    "y,W(x)",	0xd800, 0xf800, RD_y|RD_x,	0,	I1 },
{"sw",	    "x,V(S)",	0xd000, 0xf800, RD_x|RD_SP,	0,	I1 },
{"sw",	    "R,V(S)",	0x6200, 0xff00, RD_31|RD_SP,	0,	I1 },
{"xor",	    "x,y",	0xe80e, 0xf81f, WR_x|RD_x|RD_y, 0,	I1 },
d350 9
a358 9
{"restore", "M",	0x6400, 0xff80, WR_31|RD_SP|WR_SP|NODS,	0, I32 },
{"save",    "m",	0x6480, 0xff80, RD_31|RD_SP|WR_SP|NODS,	0, I32 },
{"sdbbp",   "6",	0xe801, 0xf81f, TRAP,		0,	I32 },
{"seb",	    "x",	0xe891, 0xf8ff, WR_x|RD_x,	0,      I32 },
{"seh",	    "x",	0xe8b1, 0xf8ff, WR_x|RD_x,	0,      I32 },
{"sew",	    "x",	0xe8d1, 0xf8ff, WR_x|RD_x,	0,      I64 },
{"zeb",	    "x",	0xe811, 0xf8ff, WR_x|RD_x,	0,      I32 },
{"zeh",	    "x",	0xe831, 0xf8ff, WR_x|RD_x,	0,      I32 },
{"zew",	    "x",	0xe851, 0xf8ff, WR_x|RD_x,	0,      I64 },
@


1.21
log
@include/opcode/
	* mips.h: Document MIPS16 "I" opcode.

opcodes/
	* mips16-opc.c (mips16_opcodes): Use "I" for immediate operands
	in macros.

gas/
	* config/tc-mips.c (mips16_ip): Handle "I".
@
text
@d26 110
@


1.20
log
@opcodes/
	* mips16-opc.c: Add entries for argumentless "entry" and "exit"
	instructions.

gas/testsuite/
	* gas/mips/mips16.d, gas/mips/mips16-64.d: Remove trailing whitespace
	from ENTRY and EXIT lines.
@
text
@d92 1
a92 1
{"beq",     "x,U,p",	0, (int) M_BEQ_I, INSN_MACRO,	0,	I1 },
d95 1
a95 1
{"bge",     "x,8,p",	0, (int) M_BGE_I, INSN_MACRO,	0,	I1 },
d97 1
a97 1
{"bgeu",    "x,8,p",	0, (int) M_BGEU_I, INSN_MACRO,	0,	I1 },
d99 1
a99 1
{"bgt",     "x,8,p",	0, (int) M_BGT_I, INSN_MACRO,	0,	I1 },
d101 1
a101 1
{"bgtu",    "x,8,p",	0, (int) M_BGTU_I, INSN_MACRO,	0,	I1 },
d103 1
a103 1
{"ble",     "x,8,p",	0, (int) M_BLE_I, INSN_MACRO,	0,	I1 },
d105 1
a105 1
{"bleu",    "x,8,p",	0, (int) M_BLEU_I, INSN_MACRO,	0,	I1 },
d107 1
a107 1
{"blt",     "x,8,p",	0, (int) M_BLT_I, INSN_MACRO,	0,	I1 },
d109 1
a109 1
{"bltu",    "x,8,p",	0, (int) M_BLTU_I, INSN_MACRO,	0,	I1 },
d111 1
a111 1
{"bne",     "x,U,p",	0, (int) M_BNE_I, INSN_MACRO,	0,	I1 },
d158 2
a159 2
{"dsubu",   "y,x,4",	0, (int) M_DSUBU_I, INSN_MACRO,	0,	I1 },
{"dsubu",   "y,j",	0, (int) M_DSUBU_I_2, INSN_MACRO, 0,	I1 },
d233 2
a234 2
{"subu",    "y,x,4",	0, (int) M_SUBU_I, INSN_MACRO,	0,	I1 },
{"subu",    "x,k",	0, (int) M_SUBU_I_2, INSN_MACRO,0,	I1 },
@


1.19
log
@include/opcode/
	* mips.h: Document "+i".

opcodes/
	* mips-opc.c (mips_builtin_opcodes): Use "+i" rather than "a" for
	"jalx".
	* mips16-opc.c (mips16_opcodes): Likewise.
	* micromips-opc.c (micromips_opcodes): Likewise.
	* mips-dis.c (print_insn_args, print_mips16_insn_arg)
	(print_insn_mips16): Handle "+i".
	(print_insn_micromips): Likewise.  Conditionally preserve the
	ISA bit for "a" but not for "+i".

gas/
	* config/tc-mips.c (validate_mips_insn, validate_micromips_insn):
	(mips_ip, mips16_ip): Handle "+i".
@
text
@d162 1
d164 1
@


1.18
log
@	PR 14072
	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* sysdep.h: Generate an error if included before config.h.
	* alpha-opc.c: Include sysdep.h before any other header file.
	* alpha-dis.c: Likewise.
	* avr-dis.c: Likewise.
	* cgen-opc.c: Likewise.
	* cr16-dis.c: Likewise.
	* cris-dis.c: Likewise.
	* crx-dis.c: Likewise.
	* d10v-dis.c: Likewise.
	* d10v-opc.c: Likewise.
	* d30v-dis.c: Likewise.
	* d30v-opc.c: Likewise.
	* h8500-dis.c: Likewise.
	* i370-dis.c: Likewise.
	* i370-opc.c: Likewise.
	* m10200-dis.c: Likewise.
	* m10300-dis.c: Likewise.
	* micromips-opc.c: Likewise.
	* mips-opc.c: Likewise.
	* mips61-opc.c: Likewise.
	* moxie-dis.c: Likewise.
	* or32-opc.c: Likewise.
	* pj-dis.c: Likewise.
	* ppc-dis.c: Likewise.
	* ppc-opc.c: Likewise.
	* s390-dis.c: Likewise.
	* sh-dis.c: Likewise.
	* sh64-dis.c: Likewise.
	* sparc-dis.c: Likewise.
	* sparc-opc.c: Likewise.
	* spu-dis.c: Likewise.
	* tic30-dis.c: Likewise.
	* tic54x-dis.c: Likewise.
	* tic80-dis.c: Likewise.
	* tic80-opc.c: Likewise.
	* tilegx-dis.c: Likewise.
	* tilepro-dis.c: Likewise.
	* v850-dis.c: Likewise.
	* v850-opc.c: Likewise.
	* vax-dis.c: Likewise.
	* w65-dis.c: Likewise.
	* xgate-dis.c: Likewise.
	* xtensa-dis.c: Likewise.
	* rl78-decode.opc: Likewise.
	* rl78-decode.c: Regenerate.
	* rx-decode.opc: Likewise.
	* rx-decode.c: Regenerate.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* sysdep.h: Generate an error if included before config.h.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* aclocal.m4: Regenerate.
	* bfd-in.h: Generate an error if included before config.h.
	* sysdep.h: Likewise.
	* bfd-in2.h: Regenerate.
	* compress.c: Remove #include "config.h".
	* plugin.c: Likewise.
	* elf32-m68hc1x.c: Include sysdep.h before alloca-conf.h.
	* elf64-hppa.c: Likewise.
	* som.c: Likewise.
	* xsymc.c: Likewise.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* aclocal.m4: Regenerate.
	* Makefile.am: Use wrappers around C files generated by flex.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* itbl-lex-wrapper.c: New file.
	* config/bfin-lex-wrapper.c: New file.
	* cgen.c: Include as.h before setjmp.h.
	* config/tc-dlx.c: Include as.h before any other header.
	* config/tc-h8300.c: Likewise.
	* config/tc-lm32.c: Likewise.
	* config/tc-mep.c: Likewise.
	* config/tc-microblaze.c: Likewise.
	* config/tc-mmix.c: Likewise.
	* config/tc-msp430.c: Likewise.
	* config/tc-or32.c: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-xtensa.c: Likewise.

	* configure.in: Add check that sysdep.h has been included before
	any system header files.
	* configure: Regenerate.
	* config.in: Regenerate.
	* unwind-ia64.h: Include config.h.
@
text
@d170 1
a170 1
{"jalx",    "a",	0x1c00, 0xfc00, UBD|WR_31,	0,	I1 },
@


1.17
log
@include/opcode/
2011-07-24  Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (INSN_TRAP): Rename to...
	(INSN_NO_DELAY_SLOT): ... this.
	(INSN_SYNC): Remove macro.

gas/
2011-07-24  Maciej W. Rozycki  <macro@@codesourcery.com>

	* config/tc-mips.c (can_swap_branch_p): Adjust for the rename of
	INSN_TRAP to INSN_NO_DELAY_SLOT.  Remove the check for INSN_SYNC
	as well as explicit checks for ERET and DERET when scheduling
	branch delay slots.

opcodes/
2011-07-24  Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips-opc.c (NODS): New macro.
	(TRAP): Adjust for the rename of INSN_TRAP to INSN_NO_DELAY_SLOT.
	(DSP_VOLA): Likewise.
	(mips_builtin_opcodes): Add NODS annotation to "deret" and
	"eret". Replace INSN_SYNC with NODS throughout.  Use NODS in
	place of TRAP for "wait", "waiti" and "yield".
	* mips16-opc.c (NODS): New macro.
	(TRAP): Adjust for the rename of INSN_TRAP to INSN_NO_DELAY_SLOT.
	(mips16_opcodes):  Use NODS in place of TRAP for "jalrc", "jrc",
	"restore" and "save".
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000, 2005, 2006, 2007
d23 1
a24 1
#include "sysdep.h"
@


1.16
log
@gas/
	* config/tc-mips.c (find_altered_mips16_opcode): New function.
	(append_insn): Use it.

opcodes/
	* mips16-opc.c (jalrc, jrc): Move earlier in file.
@
text
@d61 2
a62 1
#define TRAP	INSN_TRAP
d178 4
a181 4
{"jalrc",   "x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|TRAP, 0,     I32 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|TRAP, 0,     I32 },
{"jrc",     "x",	0xe880, 0xf8ff, UBR|RD_x|TRAP,	0,      I32 },
{"jrc",     "R",	0xe8a0, 0xffff, UBR|RD_31|TRAP,	0,      I32 },
d238 2
a239 2
{"restore", "M",	0x6400, 0xff80, WR_31|RD_SP|WR_SP|TRAP,	0,	I32 },
{"save",    "m",	0x6480, 0xff80, RD_31|RD_SP|WR_SP|TRAP,	0,	I32 },
@


1.15
log
@	gas/
	* config/tc-mips.c (nops_for_insn_or_target): Replace
	MIPS16_INSN_BRANCH with MIPS16_INSN_UNCOND_BRANCH and
	MIPS16_INSN_COND_BRANCH.

	include/opcode/
	* mips.h (MIPS16_INSN_UNCOND_BRANCH): New macro.
	(MIPS16_INSN_BRANCH): Rename to...
	(MIPS16_INSN_COND_BRANCH): ... this.

	opcodes/
	* mips-dis.c (print_mips16_insn_arg): Remove branch instruction
	type and delay slot determination.
	(print_insn_mips16): Extend branch instruction type and delay
	slot determination to cover all instructions.
	* mips16-opc.c (BR): Remove macro.
	(UBR, CBR): New macros.
	(mips16_opcodes): Update branch annotation for "b", "beqz",
	"bnez", "bteqz" and "btnez".  Add branch annotation for "jalrc"
	and "jrc".
@
text
@d174 7
a236 4
{"jalrc",   "x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|TRAP, 0,     I32 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff, UBR|WR_31|RD_x|TRAP, 0,     I32 },
{"jrc",     "x",	0xe880, 0xf8ff, UBR|RD_x|TRAP,	0,      I32 },
{"jrc",     "R",	0xe8a0, 0xffff, UBR|RD_31|TRAP,	0,      I32 },
@


1.14
log
@update copyright dates
@
text
@d36 2
a37 1
#define BR      MIPS16_INSN_BRANCH
d89 1
a89 1
{"b",	    "q",	0x1000, 0xf800, BR,		0,	I1 },
d92 1
a92 1
{"beqz",    "x,p",	0x2000, 0xf800, BR|RD_x,	0,	I1 },
d111 1
a111 1
{"bnez",    "x,p",	0x2800, 0xf800, BR|RD_x,	0,	I1 },
d113 2
a114 2
{"bteqz",   "p",	0x6000, 0xff00, BR|RD_T,	0,	I1 },
{"btnez",   "p",	0x6100, 0xff00, BR|RD_T,	0,	I1 },
d230 4
a233 4
{"jalrc",   "x",	0xe8c0, 0xf8ff, WR_31|RD_x|TRAP, 0,     I32 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff, WR_31|RD_x|TRAP, 0,     I32 },
{"jrc",     "x",	0xe880, 0xf8ff, RD_x|TRAP,	0,      I32 },
{"jrc",     "R",	0xe8a0, 0xffff, RD_31|TRAP,	0,      I32 },
@


1.13
log
@Change source files over to GPLv3.
@
text
@d2 2
a3 1
   Copyright 1996, 1997, 1998, 2000, 2005, 2007 Free Software Foundation, Inc.
@


1.12
log
@	[ gas/ChangeLog ]
	* config/tc-mips.c (macro_build): Test for currently active
	mips16 option.
	(mips16_ip): Reject invalid opcodes.

	[ opcodes/ChangeLog ]
	* mips16-opc.c (I1, I32, I64): New shortcut defines.
	(mips16_opcodes): Change membership of instructions to their
	lowest baseline ISA.

	[ gas/testsuite/ChangeLog ]
	* gas/mips/mips.exp: Run new tests.
	* gas/mips/mips16e.s, gas/mips/mips16e.d, gas/mips/mips16e-64.s,
	gas/mips/mips16e-64.d, gas/mips/mips16e-64.l: New tests.
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000, 2005 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GDB, GAS, and the GNU binutils.
d7 14
a20 14
GDB, GAS, and the GNU binutils are free software; you can redistribute
them and/or modify them under the terms of the GNU General Public
License as published by the Free Software Foundation; either version
1, or (at your option) any later version.

GDB, GAS, and the GNU binutils are distributed in the hope that they
will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this file; see the file COPYING.  If not, write to the Free
Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
02110-1301, USA.  */
@


1.11
log
@[ gas/testsuite/ChangeLog ]
2006-05-04  Thiemo Seufer  <ths@@mips.com>
            Nigel Stephens  <nigel@@mips.com>

        * gas/mips/mips.exp: Run mips32-dsp tests only for mips32r2.
        * gas/mips/set-arch.d: Adjust according to opcode table changes.

[ include/opcode/ChangeLog ]
2006-05-04  Thiemo Seufer  <ths@@mips.com>
            Nigel Stephens  <nigel@@mips.com>
            David Ung  <davidu@@mips.com>

        * mips.h: Add INSN_SMARTMIPS define.

[ opcodes/ChangeLog ]
2006-05-04  Thiemo Seufer  <ths@@mips.com>
            Nigel Stephens  <nigel@@mips.com>
            David Ung  <davidu@@mips.com>

        * mips-dis.c (mips_arch_choices): Add smartmips instruction
        decoding to MIPS32 and MIPS32R2.  Limit DSP decoding to release
        2 ISAs.  Add MIPS3D decoding to MIPS32R2.  Add MT decoding to
        MIPS64R2.
        * mips-opc.c: fix random typos in comments.
        (INSN_SMARTMIPS): New defines.
        (mips_builtin_opcodes): Add paired single support for MIPS32R2.
        Move bc3f, bc3fl, bc3t, bc3tl downwards.  Move flushi, flushd,
        flushid, wb upwards.  Move cfc3, ctc3 downwards.  Rework the
        FP_S and FP_D flags to denote single and double register
        accesses separately.  Move dmfc3, dmtc3, mfc3, mtc3 downwards.
        Allow jr.hb and jalr.hb for release 1 ISAs.  Allow luxc1, suxc1
        for MIPS32R2.  Add SmartMIPS instructions.  Add two-argument
        variants of bc2f, bc2fl, bc2t, bc2tl.  Add mfhc2, mthc2 to
        release 2 ISAs.
        * mips16-opc.c (mips16_opcodes): Add sdbbp instruction.
@
text
@d61 1
d63 3
a65 2

#define T3      INSN_3900
d70 46
a115 46
{"nop",	    "",		0x6500, 0xffff, RD_Z,		0,	0 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800, WR_x|RD_PC,	0,	0 },
{"abs",	    "x,w",	0, (int) M_ABS, INSN_MACRO,	0,	0 },
{"addiu",   "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0,	0 },
{"addiu",   "x,k",	0x4800, 0xf800, WR_x|RD_x,	0,	0 },
{"addiu",   "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	0 },
{"addiu",   "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	0 },
{"addiu",   "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0,	0 },
{"addiu",   "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0,	0 },
{"addu",    "z,v,y",	0xe001, 0xf803, WR_z|RD_x|RD_y,	0,	0 },
{"addu",    "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0,	0 },
{"addu",    "x,k",	0x4800, 0xf800, WR_x|RD_x,	0,	0 },
{"addu",    "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	0 },
{"addu",    "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0,	0 },
{"addu",    "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0,	0 },
{"addu",    "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0,	0 },
{"and",	    "x,y",	0xe80c, 0xf81f, WR_x|RD_x|RD_y,	0,	0 },
{"b",	    "q",	0x1000, 0xf800, BR,		0,	0 },
{"beq",	    "x,y,p",	0, (int) M_BEQ, INSN_MACRO,	0,	0 },
{"beq",     "x,U,p",	0, (int) M_BEQ_I, INSN_MACRO,	0,	0 },
{"beqz",    "x,p",	0x2000, 0xf800, BR|RD_x,	0,	0 },
{"bge",	    "x,y,p",	0, (int) M_BGE, INSN_MACRO,	0,	0 },
{"bge",     "x,8,p",	0, (int) M_BGE_I, INSN_MACRO,	0,	0 },
{"bgeu",    "x,y,p",	0, (int) M_BGEU, INSN_MACRO,	0,	0 },
{"bgeu",    "x,8,p",	0, (int) M_BGEU_I, INSN_MACRO,	0,	0 },
{"bgt",	    "x,y,p",	0, (int) M_BGT, INSN_MACRO,	0,	0 },
{"bgt",     "x,8,p",	0, (int) M_BGT_I, INSN_MACRO,	0,	0 },
{"bgtu",    "x,y,p",	0, (int) M_BGTU, INSN_MACRO,	0,	0 },
{"bgtu",    "x,8,p",	0, (int) M_BGTU_I, INSN_MACRO,	0,	0 },
{"ble",	    "x,y,p",	0, (int) M_BLE, INSN_MACRO,	0,	0 },
{"ble",     "x,8,p",	0, (int) M_BLE_I, INSN_MACRO,	0,	0 },
{"bleu",    "x,y,p",	0, (int) M_BLEU, INSN_MACRO,	0,	0 },
{"bleu",    "x,8,p",	0, (int) M_BLEU_I, INSN_MACRO,	0,	0 },
{"blt",	    "x,y,p",	0, (int) M_BLT, INSN_MACRO,	0,	0 },
{"blt",     "x,8,p",	0, (int) M_BLT_I, INSN_MACRO,	0,	0 },
{"bltu",    "x,y,p",	0, (int) M_BLTU, INSN_MACRO,	0,	0 },
{"bltu",    "x,8,p",	0, (int) M_BLTU_I, INSN_MACRO,	0,	0 },
{"bne",	    "x,y,p",	0, (int) M_BNE, INSN_MACRO,	0,	0 },
{"bne",     "x,U,p",	0, (int) M_BNE_I, INSN_MACRO,	0,	0 },
{"bnez",    "x,p",	0x2800, 0xf800, BR|RD_x,	0,	0 },
{"break",   "6",	0xe805, 0xf81f, TRAP,		0,	0 },
{"bteqz",   "p",	0x6000, 0xff00, BR|RD_T,	0,	0 },
{"btnez",   "p",	0x6100, 0xff00, BR|RD_T,	0,	0 },
{"cmpi",    "x,U",	0x7000, 0xf800, WR_T|RD_x,	0,	0 },
{"cmp",	    "x,y",	0xe80a, 0xf81f, WR_T|RD_x|RD_y,	0,	0 },
{"cmp",     "x,U",	0x7000, 0xf800, WR_T|RD_x,	0,	0 },
d131 1
a131 1
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3, INSN_MACRO,	0,	0 },
d133 5
a137 5
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3, INSN_MACRO,	0,	0 },
{"div",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"div",     "z,v,y",	0, (int) M_DIV_3, INSN_MACRO,	0,	0 },
{"divu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"divu",    "z,v,y",	0, (int) M_DIVU_3, INSN_MACRO,	0,	0 },
d142 1
a142 1
{"drem",    "z,v,y",	0, (int) M_DREM_3, INSN_MACRO,	0,	0 },
d144 1
a144 1
{"dremu",   "z,v,y",	0, (int) M_DREMU_3, INSN_MACRO,	0,	0 },
d155 19
a173 19
{"dsubu",   "y,x,4",	0, (int) M_DSUBU_I, INSN_MACRO,	0,	0 },
{"dsubu",   "y,j",	0, (int) M_DSUBU_I_2, INSN_MACRO, 0,	0 },
{"exit",    "L",	0xed09, 0xff1f, TRAP,		0,	0 },
{"exit",    "L",	0xee09, 0xff1f, TRAP,		0,	0 },
{"exit",    "L",	0xef09, 0xff1f, TRAP,		0,	0 },
{"entry",   "l",	0xe809, 0xf81f, TRAP,		0,	0 },
{"extend",  "e",	0xf000, 0xf800, 0,		0,	0 },
{"jalr",    "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	0 },
{"jalr",    "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	0 },
{"jal",     "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	0 },
{"jal",     "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0,	0 },
{"jal",	    "a",	0x1800, 0xfc00, UBD|WR_31,	0,	0 },
{"jalx",    "a",	0x1c00, 0xfc00, UBD|WR_31,	0,	0 },
{"jr",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0,	0 },
{"jr",	    "R",	0xe820, 0xffff, UBD|RD_31,	0,	0 },
{"j",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0,	0 },
{"j",	    "R",	0xe820, 0xffff, UBD|RD_31,	0,	0 },
{"lb",	    "y,5(x)",	0x8000, 0xf800, WR_y|RD_x,	0,	0 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800, WR_y|RD_x,	0,	0 },
d178 7
a184 7
{"lh",	    "y,H(x)",	0x8800, 0xf800, WR_y|RD_x,	0,	0 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800, WR_y|RD_x,	0,	0 },
{"li",	    "x,U",	0x6800, 0xf800, WR_x,		0,	0 },
{"lw",	    "y,W(x)",	0x9800, 0xf800, WR_y|RD_x,	0,	0 },
{"lw",	    "x,A",	0xb000, 0xf800, WR_x|RD_PC,	0,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800, WR_x|RD_PC,	0,	0 },
{"lw",	    "x,V(S)",	0x9000, 0xf800, WR_x|RD_SP,	0,	0 },
d186 15
a200 15
{"mfhi",    "x",	0xe810, 0xf8ff, WR_x|RD_HI,	0,	0 },
{"mflo",    "x",	0xe812, 0xf8ff, WR_x|RD_LO,	0,	0 },
{"move",    "y,X",	0x6700, 0xff00, WR_y|RD_X, 	0,	0 },
{"move",    "Y,Z",	0x6500, 0xff00, WR_Y|RD_Z,	0,	0 },
{"mul",     "z,v,y",	0, (int) M_MUL, INSN_MACRO,	0,	0 },
{"mult",    "x,y",	0xe818, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"multu",   "x,y",	0xe819, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"neg",	    "x,w",	0xe80b, 0xf81f, WR_x|RD_y,	0,	0 },
{"not",	    "x,w",	0xe80f, 0xf81f, WR_x|RD_y,	0,	0 },
{"or",	    "x,y",	0xe80d, 0xf81f, WR_x|RD_x|RD_y,	0,	0 },
{"rem",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"rem",     "z,v,y",	0, (int) M_REM_3, INSN_MACRO,	0,	0 },
{"remu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0,	0 },
{"remu",    "z,v,y",	0, (int) M_REMU_3, INSN_MACRO,	0,	0 },
{"sb",	    "y,5(x)",	0xc000, 0xf800, RD_y|RD_x,	0,	0 },
d203 24
a226 24
{"sd",	    "R,C(S)",	0xfa00, 0xff00, RD_31|RD_PC,	0,	0 },
{"sh",	    "y,H(x)",	0xc800, 0xf800, RD_y|RD_x,	0,	0 },
{"sllv",    "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x, 0,	0 },
{"sll",	    "x,w,<",	0x3000, 0xf803, WR_x|RD_y,	0,	0 },
{"sll",     "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x,	0,	0 },
{"slti",    "x,8",	0x5000, 0xf800, WR_T|RD_x,	0,	0 },
{"slt",	    "x,y",	0xe802, 0xf81f, WR_T|RD_x|RD_y,	0,	0 },
{"slt",     "x,8",	0x5000, 0xf800, WR_T|RD_x,	0,	0 },
{"sltiu",   "x,8",	0x5800, 0xf800, WR_T|RD_x,	0,	0 },
{"sltu",    "x,y",	0xe803, 0xf81f, WR_T|RD_x|RD_y,	0,	0 },
{"sltu",    "x,8",	0x5800, 0xf800, WR_T|RD_x,	0,	0 },
{"srav",    "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0,	0 },
{"sra",	    "x,w,<",	0x3003, 0xf803, WR_x|RD_y,	0,	0 },
{"sra",     "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0,	0 },
{"srlv",    "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0,	0 },
{"srl",	    "x,w,<",	0x3002, 0xf803, WR_x|RD_y,	0,	0 },
{"srl",     "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0,	0 },
{"subu",    "z,v,y",	0xe003, 0xf803, WR_z|RD_x|RD_y,	0,	0 },
{"subu",    "y,x,4",	0, (int) M_SUBU_I, INSN_MACRO,	0,	0 },
{"subu",    "x,k",	0, (int) M_SUBU_I_2, INSN_MACRO,0,	0 },
{"sw",	    "y,W(x)",	0xd800, 0xf800, RD_y|RD_x,	0,	0 },
{"sw",	    "x,V(S)",	0xd000, 0xf800, RD_x|RD_SP,	0,	0 },
{"sw",	    "R,V(S)",	0x6200, 0xff00, RD_31|RD_SP,	0,	0 },
{"xor",	    "x,y",	0xe80e, 0xf81f, WR_x|RD_x|RD_y, 0,	0 },
d228 13
a240 13
{"jalrc",   "x",	0xe8c0, 0xf8ff, WR_31|RD_x|TRAP, 0,     0 },
{"jalrc",   "R,x",	0xe8c0, 0xf8ff, WR_31|RD_x|TRAP, 0,     0 },
{"jrc",     "x",	0xe880, 0xf8ff, RD_x|TRAP,	0,      0 },
{"jrc",     "R",	0xe8a0, 0xffff, RD_31|TRAP,	0,      0 },
{"restore", "M",	0x6400, 0xff80, WR_31|RD_SP|WR_SP|TRAP,	0,	0 },
{"save",    "m",	0x6480, 0xff80, RD_31|RD_SP|WR_SP|TRAP,	0,	0 },
{"sdbbp",   "6",	0xe801, 0xf81f, TRAP,		0,	0 },
{"seb",	    "x",	0xe891, 0xf8ff, WR_x|RD_x,	0,      0 },
{"seh",	    "x",	0xe8b1, 0xf8ff, WR_x|RD_x,	0,      0 },
{"sew",	    "x",	0xe8d1, 0xf8ff, WR_x|RD_x,	0,      I3 },
{"zeb",	    "x",	0xe811, 0xf8ff, WR_x|RD_x,	0,      0 },
{"zeh",	    "x",	0xe831, 0xf8ff, WR_x|RD_x,	0,      0 },
{"zew",	    "x",	0xe851, 0xf8ff, WR_x|RD_x,	0,      I3 },
@


1.10
log
@        * mips.h: Assign 'm'/'M' codes to MIPS16e save/restore
        instructions.  Define MIPS16_ALL_ARGS and MIPS16_ALL_STATICS for
        save/restore encoding of the args field.

        * mips16-opc.c: Add MIPS16e save/restore opcodes.
        * mips-dis.c (print_mips16_insn_arg): Handle printing of 'm'/'M'
        codes for save/restore.

        * config/tc-mips.c (mips16_ip): Add handling of 'm' and 'M' codes
        for the MIPS16e save/restore instructions.

        * gas/mips/mips.exp: Run new save/restore tests.
        * gas/testsuite/gas/mips/mips16e-save.s: New test for generating
        different styles of save/restore instructions.
        * gas/testsuite/gas/mips/mips16e-save.d: New.
@
text
@d67 1
d232 1
@


1.9
log
@* mips16-opc.c (mips16_opcodes): Add the MIPS16e jalrc/jrc
instructions to the table.
@
text
@d229 2
@


1.8
log
@* mips16-opc.c (mips16_opcodes): Add the following MIPS16e
instructions to the table; seb/seh/sew/zeb/zeh/zew.
@
text
@d225 4
@


1.7
log
@Update the address and phone number of the FSF
@
text
@d224 7
@


1.6
log
@update copyright dates
@
text
@d19 2
a20 2
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
@


1.5
log
@	2005-01-19  Fred Fish  <fnf@@specifixinc.com>
	* mips-dis.c (no_aliases): New disassembly option flag.
	(set_default_mips_dis_options): Init no_aliases to zero.
	(parse_mips_dis_option): Handle no-aliases option.
	(print_insn_mips): Ignore table entries that are aliases
	if no_aliases is set.
	(print_insn_mips16): Ditto.
	* mips-opc.c (mips_builtin_opcodes): Add initializer column for
	new pinfo2 member and add INSN_ALIAS initializers as needed.  Also
	move WR_MACC and RD_MACC initializers from pinfo to pinfo2.
	* mips16-opc.c (mips16_opcodes): Ditto.
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000 Free Software Foundation, Inc.
@


1.4
log
@Fix typos in ChangeLogs; fix dates in copyright notices
@
text
@d67 157
a223 157
{"nop",	    "",		0x6500, 0xffff, RD_Z,		0 }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800, WR_x|RD_PC,	0 },
{"abs",	    "x,w",	0, (int) M_ABS, INSN_MACRO,	0 },
{"addiu",   "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0 },
{"addiu",   "x,k",	0x4800, 0xf800, WR_x|RD_x,	0 },
{"addiu",   "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0 },
{"addiu",   "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0 },
{"addiu",   "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0 },
{"addiu",   "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0 },
{"addu",    "z,v,y",	0xe001, 0xf803, WR_z|RD_x|RD_y,	0 },
{"addu",    "y,x,4",	0x4000, 0xf810, WR_y|RD_x,	0 },
{"addu",    "x,k",	0x4800, 0xf800, WR_x|RD_x,	0 },
{"addu",    "S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0 },
{"addu",    "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP,	0 },
{"addu",    "x,P,V",	0x0800, 0xf800, WR_x|RD_PC,	0 },
{"addu",    "x,S,V",	0x0000, 0xf800, WR_x|RD_SP,	0 },
{"and",	    "x,y",	0xe80c, 0xf81f, WR_x|RD_x|RD_y,	0 },
{"b",	    "q",	0x1000, 0xf800, BR,		0 },
{"beq",	    "x,y,p",	0, (int) M_BEQ, INSN_MACRO,	0 },
{"beq",     "x,U,p",	0, (int) M_BEQ_I, INSN_MACRO,	0 },
{"beqz",    "x,p",	0x2000, 0xf800, BR|RD_x,	0 },
{"bge",	    "x,y,p",	0, (int) M_BGE, INSN_MACRO,	0 },
{"bge",     "x,8,p",	0, (int) M_BGE_I, INSN_MACRO,	0 },
{"bgeu",    "x,y,p",	0, (int) M_BGEU, INSN_MACRO,	0 },
{"bgeu",    "x,8,p",	0, (int) M_BGEU_I, INSN_MACRO,	0 },
{"bgt",	    "x,y,p",	0, (int) M_BGT, INSN_MACRO,	0 },
{"bgt",     "x,8,p",	0, (int) M_BGT_I, INSN_MACRO,	0 },
{"bgtu",    "x,y,p",	0, (int) M_BGTU, INSN_MACRO,	0 },
{"bgtu",    "x,8,p",	0, (int) M_BGTU_I, INSN_MACRO,	0 },
{"ble",	    "x,y,p",	0, (int) M_BLE, INSN_MACRO,	0 },
{"ble",     "x,8,p",	0, (int) M_BLE_I, INSN_MACRO,	0 },
{"bleu",    "x,y,p",	0, (int) M_BLEU, INSN_MACRO,	0 },
{"bleu",    "x,8,p",	0, (int) M_BLEU_I, INSN_MACRO,	0 },
{"blt",	    "x,y,p",	0, (int) M_BLT, INSN_MACRO,	0 },
{"blt",     "x,8,p",	0, (int) M_BLT_I, INSN_MACRO,	0 },
{"bltu",    "x,y,p",	0, (int) M_BLTU, INSN_MACRO,	0 },
{"bltu",    "x,8,p",	0, (int) M_BLTU_I, INSN_MACRO,	0 },
{"bne",	    "x,y,p",	0, (int) M_BNE, INSN_MACRO,	0 },
{"bne",     "x,U,p",	0, (int) M_BNE_I, INSN_MACRO,	0 },
{"bnez",    "x,p",	0x2800, 0xf800, BR|RD_x,	0 },
{"break",   "6",	0xe805, 0xf81f, TRAP,		0 },
{"bteqz",   "p",	0x6000, 0xff00, BR|RD_T,	0 },
{"btnez",   "p",	0x6100, 0xff00, BR|RD_T,	0 },
{"cmpi",    "x,U",	0x7000, 0xf800, WR_T|RD_x,	0 },
{"cmp",	    "x,y",	0xe80a, 0xf81f, WR_T|RD_x|RD_y,	0 },
{"cmp",     "x,U",	0x7000, 0xf800, WR_T|RD_x,	0 },
{"dla",	    "y,E",	0xfe00, 0xff00, WR_y|RD_PC, 	I3 },
{"daddiu",  "y,x,4",	0x4010, 0xf810, WR_y|RD_x, 	I3 },
{"daddiu",  "y,j",	0xfd00, 0xff00, WR_y|RD_y, 	I3 },
{"daddiu",  "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	I3 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	I3 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, 	I3 },
{"daddiu",  "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, 	I3 },
{"daddu",   "z,v,y",	0xe000, 0xf803, WR_z|RD_x|RD_y, I3 },
{"daddu",   "y,x,4",	0x4010, 0xf810, WR_y|RD_x, 	I3 },
{"daddu",   "y,j",	0xfd00, 0xff00, WR_y|RD_y, 	I3 },
{"daddu",   "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	I3 },
{"daddu",   "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, 	I3 },
{"daddu",   "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, 	I3 },
{"daddu",   "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, 	I3 },
{"ddiv",    "0,x,y",	0xe81e, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3, INSN_MACRO,	0 },
{"ddivu",   "0,x,y",	0xe81f, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3, INSN_MACRO,	0 },
{"div",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"div",     "z,v,y",	0, (int) M_DIV_3, INSN_MACRO,	0 },
{"divu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"divu",    "z,v,y",	0, (int) M_DIVU_3, INSN_MACRO,	0 },
{"dmul",    "z,v,y",	0, (int) M_DMUL, INSN_MACRO, 	I3 },
{"dmult",   "x,y",	0xe81c, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"dmultu",  "x,y",	0xe81d, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"drem",    "0,x,y",	0xe81e, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"drem",    "z,v,y",	0, (int) M_DREM_3, INSN_MACRO,	0 },
{"dremu",   "0,x,y",	0xe81f, 0xf81f, RD_x|RD_y|WR_HI|WR_LO, I3 },
{"dremu",   "z,v,y",	0, (int) M_DREMU_3, INSN_MACRO,	0 },
{"dsllv",   "y,x",	0xe814, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsll",    "x,w,[",	0x3001, 0xf803, WR_x|RD_y, 	I3 },
{"dsll",    "y,x",	0xe814, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsrav",   "y,x",	0xe817, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsra",    "y,]",	0xe813, 0xf81f, WR_y|RD_y, 	I3 },
{"dsra",    "y,x",	0xe817, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsrlv",   "y,x",	0xe816, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsrl",    "y,]",	0xe808, 0xf81f, WR_y|RD_y, 	I3 },
{"dsrl",    "y,x",	0xe816, 0xf81f, WR_y|RD_y|RD_x, I3 },
{"dsubu",   "z,v,y",	0xe002, 0xf803, WR_z|RD_x|RD_y, I3 },
{"dsubu",   "y,x,4",	0, (int) M_DSUBU_I, INSN_MACRO,	0 },
{"dsubu",   "y,j",	0, (int) M_DSUBU_I_2, INSN_MACRO, 0 },
{"exit",    "L",	0xed09, 0xff1f, TRAP,		0 },
{"exit",    "L",	0xee09, 0xff1f, TRAP,		0 },
{"exit",    "L",	0xef09, 0xff1f, TRAP,		0 },
{"entry",   "l",	0xe809, 0xf81f, TRAP,		0 },
{"extend",  "e",	0xf000, 0xf800, 0,		0 },
{"jalr",    "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0 },
{"jalr",    "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0 },
{"jal",     "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0 },
{"jal",     "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x,	0 },
{"jal",	    "a",	0x1800, 0xfc00, UBD|WR_31,	0 },
{"jalx",    "a",	0x1c00, 0xfc00, UBD|WR_31,	0 },
{"jr",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0 },
{"jr",	    "R",	0xe820, 0xffff, UBD|RD_31,	0 },
{"j",	    "x",	0xe800, 0xf8ff, UBD|RD_x,	0 },
{"j",	    "R",	0xe820, 0xffff, UBD|RD_31,	0 },
{"lb",	    "y,5(x)",	0x8000, 0xf800, WR_y|RD_x,	0 },
{"lbu",	    "y,5(x)",	0xa000, 0xf800, WR_y|RD_x,	0 },
{"ld",	    "y,D(x)",	0x3800, 0xf800, WR_y|RD_x, 	I3 },
{"ld",	    "y,B",	0xfc00, 0xff00, WR_y|RD_PC, 	I3 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00, WR_y|RD_PC, 	I3 },
{"ld",	    "y,D(S)",	0xf800, 0xff00, WR_y|RD_SP, 	I3 },
{"lh",	    "y,H(x)",	0x8800, 0xf800, WR_y|RD_x,	0 },
{"lhu",	    "y,H(x)",	0xa800, 0xf800, WR_y|RD_x,	0 },
{"li",	    "x,U",	0x6800, 0xf800, WR_x,		0 },
{"lw",	    "y,W(x)",	0x9800, 0xf800, WR_y|RD_x,	0 },
{"lw",	    "x,A",	0xb000, 0xf800, WR_x|RD_PC,	0 },
{"lw",	    "x,V(P)",	0xb000, 0xf800, WR_x|RD_PC,	0 },
{"lw",	    "x,V(S)",	0x9000, 0xf800, WR_x|RD_SP,	0 },
{"lwu",     "y,W(x)",	0xb800, 0xf800, WR_y|RD_x, 	I3 },
{"mfhi",    "x",	0xe810, 0xf8ff, WR_x|RD_HI,	0 },
{"mflo",    "x",	0xe812, 0xf8ff, WR_x|RD_LO,	0 },
{"move",    "y,X",	0x6700, 0xff00, WR_y|RD_X, 	0 },
{"move",    "Y,Z",	0x6500, 0xff00, WR_Y|RD_Z,	0 },
{"mul",     "z,v,y",	0, (int) M_MUL, INSN_MACRO,	0 },
{"mult",    "x,y",	0xe818, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"multu",   "x,y",	0xe819, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"neg",	    "x,w",	0xe80b, 0xf81f, WR_x|RD_y,	0 },
{"not",	    "x,w",	0xe80f, 0xf81f, WR_x|RD_y,	0 },
{"or",	    "x,y",	0xe80d, 0xf81f, WR_x|RD_x|RD_y,	0 },
{"rem",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"rem",     "z,v,y",	0, (int) M_REM_3, INSN_MACRO,	0 },
{"remu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO,	0 },
{"remu",    "z,v,y",	0, (int) M_REMU_3, INSN_MACRO,	0 },
{"sb",	    "y,5(x)",	0xc000, 0xf800, RD_y|RD_x,	0 },
{"sd",	    "y,D(x)",	0x7800, 0xf800, RD_y|RD_x, 	I3 },
{"sd",	    "y,D(S)",	0xf900, 0xff00, RD_y|RD_PC, 	I3 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00, RD_31|RD_PC,	0 },
{"sh",	    "y,H(x)",	0xc800, 0xf800, RD_y|RD_x,	0 },
{"sllv",    "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x, 0 },
{"sll",	    "x,w,<",	0x3000, 0xf803, WR_x|RD_y,	0 },
{"sll",     "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x,	0 },
{"slti",    "x,8",	0x5000, 0xf800, WR_T|RD_x,	0 },
{"slt",	    "x,y",	0xe802, 0xf81f, WR_T|RD_x|RD_y,	0 },
{"slt",     "x,8",	0x5000, 0xf800, WR_T|RD_x,	0 },
{"sltiu",   "x,8",	0x5800, 0xf800, WR_T|RD_x,	0 },
{"sltu",    "x,y",	0xe803, 0xf81f, WR_T|RD_x|RD_y,	0 },
{"sltu",    "x,8",	0x5800, 0xf800, WR_T|RD_x,	0 },
{"srav",    "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0 },
{"sra",	    "x,w,<",	0x3003, 0xf803, WR_x|RD_y,	0 },
{"sra",     "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x,	0 },
{"srlv",    "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0 },
{"srl",	    "x,w,<",	0x3002, 0xf803, WR_x|RD_y,	0 },
{"srl",     "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x,	0 },
{"subu",    "z,v,y",	0xe003, 0xf803, WR_z|RD_x|RD_y,	0 },
{"subu",    "y,x,4",	0, (int) M_SUBU_I, INSN_MACRO,	0 },
{"subu",    "x,k",	0, (int) M_SUBU_I_2, INSN_MACRO,0 },
{"sw",	    "y,W(x)",	0xd800, 0xf800, RD_y|RD_x,	0 },
{"sw",	    "x,V(S)",	0xd000, 0xf800, RD_x|RD_SP,	0 },
{"sw",	    "R,V(S)",	0x6200, 0xff00, RD_31|RD_SP,	0 },
{"xor",	    "x,y",	0xe80e, 0xf81f, WR_x|RD_x|RD_y, 0 },
@


1.3
log
@Add initialiser for membership field
@
text
@d2 1
a2 1
   Copyright 1996, 1997 Free Software Foundation, Inc.
@


1.3.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000 Free Software Foundation, Inc.
@


1.2
log
@More portability patches.  Include sysdep.h everywhere.
@
text
@d65 55
a119 54
const struct mips_opcode mips16_opcodes[] = {
{"nop",	    "",		0x6500, 0xffff, RD_Z }, /* move $0,$Z */
{"la",	    "x,A",	0x0800, 0xf800, WR_x|RD_PC },
{"abs",	    "x,w",	0, (int) M_ABS, INSN_MACRO },
{"addiu",   "y,x,4",	0x4000, 0xf810, WR_y|RD_x },
{"addiu",   "x,k",	0x4800, 0xf800, WR_x|RD_x },
{"addiu",   "S,K",	0x6300, 0xff00, WR_SP|RD_SP },
{"addiu",   "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP },
{"addiu",   "x,P,V",	0x0800, 0xf800, WR_x|RD_PC },
{"addiu",   "x,S,V",	0x0000, 0xf800, WR_x|RD_SP },
{"addu",    "z,v,y",	0xe001, 0xf803, WR_z|RD_x|RD_y },
{"addu",    "y,x,4",	0x4000, 0xf810, WR_y|RD_x },
{"addu",    "x,k",	0x4800, 0xf800, WR_x|RD_x },
{"addu",    "S,K",	0x6300, 0xff00, WR_SP|RD_SP },
{"addu",    "S,S,K",	0x6300, 0xff00, WR_SP|RD_SP },
{"addu",    "x,P,V",	0x0800, 0xf800, WR_x|RD_PC },
{"addu",    "x,S,V",	0x0000, 0xf800, WR_x|RD_SP },
{"and",	    "x,y",	0xe80c, 0xf81f, WR_x|RD_x|RD_y },
{"b",	    "q",	0x1000, 0xf800, BR},
{"beq",	    "x,y,p",	0, (int) M_BEQ, INSN_MACRO },
{"beq",     "x,U,p",	0, (int) M_BEQ_I, INSN_MACRO },
{"beqz",    "x,p",	0x2000, 0xf800, BR|RD_x },
{"bge",	    "x,y,p",	0, (int) M_BGE, INSN_MACRO },
{"bge",     "x,8,p",	0, (int) M_BGE_I, INSN_MACRO },
{"bgeu",    "x,y,p",	0, (int) M_BGEU, INSN_MACRO },
{"bgeu",    "x,8,p",	0, (int) M_BGEU_I, INSN_MACRO },
{"bgt",	    "x,y,p",	0, (int) M_BGT, INSN_MACRO },
{"bgt",     "x,8,p",	0, (int) M_BGT_I, INSN_MACRO },
{"bgtu",    "x,y,p",	0, (int) M_BGTU, INSN_MACRO },
{"bgtu",    "x,8,p",	0, (int) M_BGTU_I, INSN_MACRO },
{"ble",	    "x,y,p",	0, (int) M_BLE, INSN_MACRO },
{"ble",     "x,8,p",	0, (int) M_BLE_I, INSN_MACRO },
{"bleu",    "x,y,p",	0, (int) M_BLEU, INSN_MACRO },
{"bleu",    "x,8,p",	0, (int) M_BLEU_I, INSN_MACRO },
{"blt",	    "x,y,p",	0, (int) M_BLT, INSN_MACRO },
{"blt",     "x,8,p",	0, (int) M_BLT_I, INSN_MACRO },
{"bltu",    "x,y,p",	0, (int) M_BLTU, INSN_MACRO },
{"bltu",    "x,8,p",	0, (int) M_BLTU_I, INSN_MACRO },
{"bne",	    "x,y,p",	0, (int) M_BNE, INSN_MACRO },
{"bne",     "x,U,p",	0, (int) M_BNE_I, INSN_MACRO },
{"bnez",    "x,p",	0x2800, 0xf800, BR|RD_x },
{"break",   "6",	0xe805, 0xf81f, TRAP },
{"bteqz",   "p",	0x6000, 0xff00, BR|RD_T },
{"btnez",   "p",	0x6100, 0xff00, BR|RD_T },
{"cmpi",    "x,U",	0x7000, 0xf800, WR_T|RD_x },
{"cmp",	    "x,y",	0xe80a, 0xf81f, WR_T|RD_x|RD_y },
{"cmp",     "x,U",	0x7000, 0xf800, WR_T|RD_x },
{"dla",	    "y,E",	0xfe00, 0xff00, WR_y|RD_PC, I3 },
{"daddiu",  "y,x,4",	0x4010, 0xf810, WR_y|RD_x, I3 },
{"daddiu",  "y,j",	0xfd00, 0xff00, WR_y|RD_y, I3 },
{"daddiu",  "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, I3 },
{"daddiu",  "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, I3 },
{"daddiu",  "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, I3 },
{"daddiu",  "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, I3 },
d121 6
a126 6
{"daddu",   "y,x,4",	0x4010, 0xf810, WR_y|RD_x, I3 },
{"daddu",   "y,j",	0xfd00, 0xff00, WR_y|RD_y, I3 },
{"daddu",   "S,K",	0xfb00, 0xff00, WR_SP|RD_SP, I3 },
{"daddu",   "S,S,K",	0xfb00, 0xff00, WR_SP|RD_SP, I3 },
{"daddu",   "y,P,W",	0xfe00, 0xff00, WR_y|RD_PC, I3 },
{"daddu",   "y,S,W",	0xff00, 0xff00, WR_y|RD_SP, I3 },
d128 1
a128 1
{"ddiv",    "z,v,y",	0, (int) M_DDIV_3, INSN_MACRO },
d130 6
a135 6
{"ddivu",   "z,v,y",	0, (int) M_DDIVU_3, INSN_MACRO },
{"div",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"div",     "z,v,y",	0, (int) M_DIV_3, INSN_MACRO },
{"divu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"divu",    "z,v,y",	0, (int) M_DIVU_3, INSN_MACRO },
{"dmul",    "z,v,y",	0, (int) M_DMUL, INSN_MACRO, I3 },
d139 1
a139 1
{"drem",    "z,v,y",	0, (int) M_DREM_3, INSN_MACRO },
d141 1
a141 1
{"dremu",   "z,v,y",	0, (int) M_DREMU_3, INSN_MACRO },
d143 1
a143 1
{"dsll",    "x,w,[",	0x3001, 0xf803, WR_x|RD_y, I3 },
d146 1
a146 1
{"dsra",    "y,]",	0xe813, 0xf81f, WR_y|RD_y, I3 },
d149 1
a149 1
{"dsrl",    "y,]",	0xe808, 0xf81f, WR_y|RD_y, I3 },
d152 72
a223 72
{"dsubu",   "y,x,4",	0, (int) M_DSUBU_I, INSN_MACRO },
{"dsubu",   "y,j",	0, (int) M_DSUBU_I_2, INSN_MACRO },
{"exit",    "L",	0xed09, 0xff1f, TRAP },
{"exit",    "L",	0xee09, 0xff1f, TRAP },
{"exit",    "L",	0xef09, 0xff1f, TRAP },
{"entry",   "l",	0xe809, 0xf81f, TRAP },
{"extend",  "e",	0xf000, 0xf800, 0 },
{"jalr",    "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x },
{"jalr",    "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x },
{"jal",     "x",	0xe840, 0xf8ff, UBD|WR_31|RD_x },
{"jal",     "R,x",	0xe840, 0xf8ff, UBD|WR_31|RD_x },
{"jal",	    "a",	0x1800, 0xfc00, UBD|WR_31 },
{"jalx",    "a",	0x1c00, 0xfc00, UBD|WR_31 },
{"jr",	    "x",	0xe800, 0xf8ff, UBD|RD_x },
{"jr",	    "R",	0xe820, 0xffff, UBD|RD_31 },
{"j",	    "x",	0xe800, 0xf8ff, UBD|RD_x },
{"j",	    "R",	0xe820, 0xffff, UBD|RD_31 },
{"lb",	    "y,5(x)",	0x8000, 0xf800, WR_y|RD_x },
{"lbu",	    "y,5(x)",	0xa000, 0xf800, WR_y|RD_x },
{"ld",	    "y,D(x)",	0x3800, 0xf800, WR_y|RD_x, I3 },
{"ld",	    "y,B",	0xfc00, 0xff00, WR_y|RD_PC, I3 },
{"ld",	    "y,D(P)",	0xfc00, 0xff00, WR_y|RD_PC, I3 },
{"ld",	    "y,D(S)",	0xf800, 0xff00, WR_y|RD_SP, I3 },
{"lh",	    "y,H(x)",	0x8800, 0xf800, WR_y|RD_x },
{"lhu",	    "y,H(x)",	0xa800, 0xf800, WR_y|RD_x },
{"li",	    "x,U",	0x6800, 0xf800, WR_x },
{"lw",	    "y,W(x)",	0x9800, 0xf800, WR_y|RD_x },
{"lw",	    "x,A",	0xb000, 0xf800, WR_x|RD_PC },
{"lw",	    "x,V(P)",	0xb000, 0xf800, WR_x|RD_PC },
{"lw",	    "x,V(S)",	0x9000, 0xf800, WR_x|RD_SP },
{"lwu",     "y,W(x)",	0xb800, 0xf800, WR_y|RD_x, I3 },
{"mfhi",    "x",	0xe810, 0xf8ff, WR_x|RD_HI },
{"mflo",    "x",	0xe812, 0xf8ff, WR_x|RD_LO },
{"move",    "y,X",	0x6700, 0xff00, WR_y|RD_X },
{"move",    "Y,Z",	0x6500, 0xff00, WR_Y|RD_Z },
{"mul",     "z,v,y",	0, (int) M_MUL, INSN_MACRO },
{"mult",    "x,y",	0xe818, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"multu",   "x,y",	0xe819, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"neg",	    "x,w",	0xe80b, 0xf81f, WR_x|RD_y },
{"not",	    "x,w",	0xe80f, 0xf81f, WR_x|RD_y },
{"or",	    "x,y",	0xe80d, 0xf81f, WR_x|RD_x|RD_y },
{"rem",     "0,x,y",	0xe81a, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"rem",     "z,v,y",	0, (int) M_REM_3, INSN_MACRO },
{"remu",    "0,x,y",	0xe81b, 0xf81f, RD_x|RD_y|WR_HI|WR_LO },
{"remu",    "z,v,y",	0, (int) M_REMU_3, INSN_MACRO },
{"sb",	    "y,5(x)",	0xc000, 0xf800, RD_y|RD_x },
{"sd",	    "y,D(x)",	0x7800, 0xf800, RD_y|RD_x, I3 },
{"sd",	    "y,D(S)",	0xf900, 0xff00, RD_y|RD_PC, I3 },
{"sd",	    "R,C(S)",	0xfa00, 0xff00, RD_31|RD_PC },
{"sh",	    "y,H(x)",	0xc800, 0xf800, RD_y|RD_x },
{"sllv",    "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x },
{"sll",	    "x,w,<",	0x3000, 0xf803, WR_x|RD_y },
{"sll",     "y,x",	0xe804, 0xf81f, WR_y|RD_y|RD_x },
{"slti",    "x,8",	0x5000, 0xf800, WR_T|RD_x },
{"slt",	    "x,y",	0xe802, 0xf81f, WR_T|RD_x|RD_y },
{"slt",     "x,8",	0x5000, 0xf800, WR_T|RD_x },
{"sltiu",   "x,8",	0x5800, 0xf800, WR_T|RD_x },
{"sltu",    "x,y",	0xe803, 0xf81f, WR_T|RD_x|RD_y },
{"sltu",    "x,8",	0x5800, 0xf800, WR_T|RD_x },
{"srav",    "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x },
{"sra",	    "x,w,<",	0x3003, 0xf803, WR_x|RD_y },
{"sra",     "y,x",	0xe807, 0xf81f, WR_y|RD_y|RD_x },
{"srlv",    "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x },
{"srl",	    "x,w,<",	0x3002, 0xf803, WR_x|RD_y },
{"srl",     "y,x",	0xe806, 0xf81f, WR_y|RD_y|RD_x },
{"subu",    "z,v,y",	0xe003, 0xf803, WR_z|RD_x|RD_y },
{"subu",    "y,x,4",	0, (int) M_SUBU_I, INSN_MACRO },
{"subu",    "x,k",	0, (int) M_SUBU_I_2, INSN_MACRO },
{"sw",	    "y,W(x)",	0xd800, 0xf800, RD_y|RD_x },
{"sw",	    "x,V(S)",	0xd000, 0xf800, RD_x|RD_SP },
{"sw",	    "R,V(S)",	0x6200, 0xff00, RD_31|RD_SP },
{"xor",	    "x,y",	0xe80e, 0xf81f, WR_x|RD_x|RD_y },
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
#include "ansidecl.h"
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.1.2.1
log
@2000-04-13  Michael Sokolov  <msokolov@@ivan.Harhan.ORG>

	* a29k-dis.c, alpha-dis.c, alpha-opc.c, arc-dis.c, arc-opc.c,
	avr-dis.c, d10v-dis.c, d10v-opc.c, d30v-dis.c, d30v-opc.c,
	disassemble.c, h8300-dis.c, h8500-dis.c, hppa-dis.c, i370-dis.c,
	i370-opc.c, i960-dis.c, m10200-dis.c, m10200-opc.c, m10300-dis.c,
	m10300-opc.c, m68k-dis.c, m68k-opc.c, m88k-dis.c, mcore-dis.c,
	mips-dis.c, mips-opc.c, mips16-opc.c, pj-dis.c, pj-opc.c, ppc-dis.c,
	ppc-opc.c, sh-dis.c, sparc-dis.c, sparc-opc.c, tic80-dis.c,
	tic80-opc.c, v850-dis.c, v850-opc.c, vax-dis.c, w65-dis.c, z8k-dis.c,
	z8kgen.c: Everyone includes sysdep.h. Remove ansidecl.h as sysdep.h
	includes it.
@
text
@d23 1
a23 1
#include "sysdep.h"
@


