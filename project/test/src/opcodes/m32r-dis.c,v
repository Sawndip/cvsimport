head	1.30;
access;
symbols
	sid-snapshot-20180601:1.30
	sid-snapshot-20180501:1.30
	sid-snapshot-20180401:1.30
	sid-snapshot-20180301:1.30
	sid-snapshot-20180201:1.30
	sid-snapshot-20180101:1.30
	sid-snapshot-20171201:1.30
	sid-snapshot-20171101:1.30
	sid-snapshot-20171001:1.30
	sid-snapshot-20170901:1.30
	sid-snapshot-20170801:1.30
	sid-snapshot-20170701:1.30
	sid-snapshot-20170601:1.30
	sid-snapshot-20170501:1.30
	sid-snapshot-20170401:1.30
	sid-snapshot-20170301:1.30
	sid-snapshot-20170201:1.30
	sid-snapshot-20170101:1.30
	sid-snapshot-20161201:1.30
	sid-snapshot-20161101:1.30
	sid-snapshot-20160901:1.30
	sid-snapshot-20160801:1.30
	sid-snapshot-20160701:1.30
	sid-snapshot-20160601:1.30
	sid-snapshot-20160501:1.30
	sid-snapshot-20160401:1.30
	sid-snapshot-20160301:1.30
	sid-snapshot-20160201:1.30
	sid-snapshot-20160101:1.30
	sid-snapshot-20151201:1.30
	sid-snapshot-20151101:1.30
	sid-snapshot-20151001:1.30
	sid-snapshot-20150901:1.30
	sid-snapshot-20150801:1.30
	sid-snapshot-20150701:1.30
	sid-snapshot-20150601:1.30
	sid-snapshot-20150501:1.30
	sid-snapshot-20150401:1.30
	sid-snapshot-20150301:1.30
	sid-snapshot-20150201:1.30
	sid-snapshot-20150101:1.30
	sid-snapshot-20141201:1.30
	sid-snapshot-20141101:1.30
	sid-snapshot-20141001:1.30
	sid-snapshot-20140901:1.30
	sid-snapshot-20140801:1.30
	sid-snapshot-20140701:1.30
	sid-snapshot-20140601:1.30
	sid-snapshot-20140501:1.30
	sid-snapshot-20140401:1.30
	sid-snapshot-20140301:1.30
	sid-snapshot-20140201:1.30
	sid-snapshot-20140101:1.30
	sid-snapshot-20131201:1.30
	sid-snapshot-20131101:1.30
	sid-snapshot-20131001:1.30
	binutils-2_24-branch:1.30.0.22
	binutils-2_24-branchpoint:1.30
	binutils-2_21_1:1.30
	sid-snapshot-20130901:1.30
	gdb_7_6_1-2013-08-30-release:1.30
	sid-snapshot-20130801:1.30
	sid-snapshot-20130701:1.30
	sid-snapshot-20130601:1.30
	sid-snapshot-20130501:1.30
	gdb_7_6-2013-04-26-release:1.30
	sid-snapshot-20130401:1.30
	binutils-2_23_2:1.30
	gdb_7_6-branch:1.30.0.20
	gdb_7_6-2013-03-12-branchpoint:1.30
	sid-snapshot-20130301:1.30
	sid-snapshot-20130201:1.30
	sid-snapshot-20130101:1.30
	sid-snapshot-20121201:1.30
	gdb_7_5_1-2012-11-29-release:1.30
	binutils-2_23_1:1.30
	sid-snapshot-20121101:1.30
	binutils-2_23:1.30
	sid-snapshot-20121001:1.30
	sid-snapshot-20120901:1.30
	gdb_7_5-2012-08-17-release:1.30
	sid-snapshot-20120801:1.30
	binutils-2_23-branch:1.30.0.18
	binutils-2_23-branchpoint:1.30
	gdb_7_5-branch:1.30.0.16
	gdb_7_5-2012-07-18-branchpoint:1.30
	sid-snapshot-20120701:1.30
	sid-snapshot-20120601:1.30
	sid-snapshot-20120501:1.30
	binutils-2_22_branch:1.30.0.14
	gdb_7_4_1-2012-04-26-release:1.30
	sid-snapshot-20120401:1.30
	sid-snapshot-20120301:1.30
	sid-snapshot-20120201:1.30
	gdb_7_4-2012-01-24-release:1.30
	sid-snapshot-20120101:1.30
	gdb_7_4-branch:1.30.0.12
	gdb_7_4-2011-12-13-branchpoint:1.30
	sid-snapshot-20111201:1.30
	binutils-2_22:1.30
	sid-snapshot-20111101:1.30
	sid-snapshot-20111001:1.30
	binutils-2_22-branch:1.30.0.10
	binutils-2_22-branchpoint:1.30
	gdb_7_3_1-2011-09-04-release:1.30
	sid-snapshot-20110901:1.30
	sid-snapshot-20110801:1.30
	gdb_7_3-2011-07-26-release:1.30
	sid-snapshot-20110701:1.30
	sid-snapshot-20110601:1.30
	sid-snapshot-20110501:1.30
	gdb_7_3-branch:1.30.0.8
	gdb_7_3-2011-04-01-branchpoint:1.30
	sid-snapshot-20110401:1.30
	sid-snapshot-20110301:1.30
	sid-snapshot-20110201:1.30
	sid-snapshot-20110101:1.30
	binutils-2_21:1.30
	sid-snapshot-20101201:1.30
	binutils-2_21-branch:1.30.0.6
	binutils-2_21-branchpoint:1.30
	sid-snapshot-20101101:1.30
	sid-snapshot-20101001:1.30
	binutils-2_20_1:1.28
	gdb_7_2-2010-09-02-release:1.30
	sid-snapshot-20100901:1.30
	sid-snapshot-20100801:1.30
	gdb_7_2-branch:1.30.0.4
	gdb_7_2-2010-07-07-branchpoint:1.30
	sid-snapshot-20100701:1.30
	sid-snapshot-20100601:1.30
	sid-snapshot-20100501:1.30
	sid-snapshot-20100401:1.30
	gdb_7_1-2010-03-18-release:1.30
	sid-snapshot-20100301:1.30
	gdb_7_1-branch:1.30.0.2
	gdb_7_1-2010-02-18-branchpoint:1.30
	sid-snapshot-20100201:1.29
	sid-snapshot-20100101:1.28
	gdb_7_0_1-2009-12-22-release:1.28
	sid-snapshot-20091201:1.28
	sid-snapshot-20091101:1.28
	binutils-2_20:1.28
	gdb_7_0-2009-10-06-release:1.28
	sid-snapshot-20091001:1.28
	gdb_7_0-branch:1.28.0.8
	gdb_7_0-2009-09-16-branchpoint:1.28
	arc-sim-20090309:1.27
	binutils-arc-20081103-branch:1.27.0.26
	binutils-arc-20081103-branchpoint:1.27
	binutils-2_20-branch:1.28.0.6
	binutils-2_20-branchpoint:1.28
	sid-snapshot-20090901:1.28
	sid-snapshot-20090801:1.28
	msnyder-checkpoint-072509-branch:1.28.0.4
	msnyder-checkpoint-072509-branchpoint:1.28
	sid-snapshot-20090701:1.28
	dje-cgen-play1-branch:1.28.0.2
	dje-cgen-play1-branchpoint:1.28
	sid-snapshot-20090601:1.28
	sid-snapshot-20090501:1.28
	sid-snapshot-20090401:1.28
	arc-20081103-branch:1.27.0.24
	arc-20081103-branchpoint:1.27
	arc-insight_6_8-branch:1.27.0.22
	arc-insight_6_8-branchpoint:1.27
	insight_6_8-branch:1.27.0.20
	insight_6_8-branchpoint:1.27
	sid-snapshot-20090301:1.28
	binutils-2_19_1:1.27
	sid-snapshot-20090201:1.28
	sid-snapshot-20090101:1.27
	reverse-20081226-branch:1.27.0.18
	reverse-20081226-branchpoint:1.27
	sid-snapshot-20081201:1.27
	multiprocess-20081120-branch:1.27.0.16
	multiprocess-20081120-branchpoint:1.27
	sid-snapshot-20081101:1.27
	binutils-2_19:1.27
	sid-snapshot-20081001:1.27
	reverse-20080930-branch:1.27.0.14
	reverse-20080930-branchpoint:1.27
	binutils-2_19-branch:1.27.0.12
	binutils-2_19-branchpoint:1.27
	sid-snapshot-20080901:1.27
	sid-snapshot-20080801:1.27
	reverse-20080717-branch:1.27.0.10
	reverse-20080717-branchpoint:1.27
	sid-snapshot-20080701:1.27
	msnyder-reverse-20080609-branch:1.27.0.8
	msnyder-reverse-20080609-branchpoint:1.27
	drow-reverse-20070409-branch:1.26.0.2
	drow-reverse-20070409-branchpoint:1.26
	sid-snapshot-20080601:1.27
	sid-snapshot-20080501:1.27
	sid-snapshot-20080403:1.27
	sid-snapshot-20080401:1.27
	gdb_6_8-2008-03-27-release:1.27
	sid-snapshot-20080301:1.27
	gdb_6_8-branch:1.27.0.6
	gdb_6_8-2008-02-26-branchpoint:1.27
	sid-snapshot-20080201:1.27
	sid-snapshot-20080101:1.27
	sid-snapshot-20071201:1.27
	sid-snapshot-20071101:1.27
	gdb_6_7_1-2007-10-29-release:1.27
	gdb_6_7-2007-10-10-release:1.27
	sid-snapshot-20071001:1.27
	gdb_6_7-branch:1.27.0.4
	gdb_6_7-2007-09-07-branchpoint:1.27
	binutils-2_18:1.27
	binutils-2_18-branch:1.27.0.2
	binutils-2_18-branchpoint:1.27
	insight_6_6-20070208-release:1.25
	binutils-csl-coldfire-4_1-32:1.25
	binutils-csl-sourcerygxx-4_1-32:1.25
	gdb_6_6-2006-12-18-release:1.25
	binutils-csl-innovasic-fido-3_4_4-33:1.25
	binutils-csl-sourcerygxx-3_4_4-32:1.22
	binutils-csl-coldfire-4_1-30:1.25
	binutils-csl-sourcerygxx-4_1-30:1.25
	binutils-csl-coldfire-4_1-28:1.25
	binutils-csl-sourcerygxx-4_1-29:1.25
	binutils-csl-sourcerygxx-4_1-28:1.25
	gdb_6_6-branch:1.25.0.28
	gdb_6_6-2006-11-15-branchpoint:1.25
	binutils-csl-arm-2006q3-27:1.25
	binutils-csl-sourcerygxx-4_1-27:1.25
	binutils-csl-arm-2006q3-26:1.25
	binutils-csl-sourcerygxx-4_1-26:1.25
	binutils-csl-sourcerygxx-4_1-25:1.25
	binutils-csl-sourcerygxx-4_1-24:1.25
	binutils-csl-sourcerygxx-4_1-23:1.25
	insight_6_5-20061003-release:1.25
	gdb-csl-symbian-6_4_50_20060226-12:1.25
	binutils-csl-sourcerygxx-4_1-21:1.25
	binutils-csl-arm-2006q3-21:1.25
	binutils-csl-sourcerygxx-4_1-22:1.25
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.25
	binutils-csl-sourcerygxx-4_1-20:1.25
	binutils-csl-arm-2006q3-19:1.25
	binutils-csl-sourcerygxx-4_1-19:1.25
	binutils-csl-sourcerygxx-4_1-18:1.25
	binutils-csl-renesas-4_1-9:1.25
	gdb-csl-sourcerygxx-3_4_4-25:1.25
	binutils-csl-sourcerygxx-3_4_4-25:1.22
	nickrob-async-20060828-mergepoint:1.25
	gdb-csl-symbian-6_4_50_20060226-11:1.25
	binutils-csl-renesas-4_1-8:1.25
	binutils-csl-renesas-4_1-7:1.25
	binutils-csl-renesas-4_1-6:1.25
	gdb-csl-sourcerygxx-4_1-17:1.25
	binutils-csl-sourcerygxx-4_1-17:1.25
	gdb-csl-20060226-branch-local-2:1.25
	gdb-csl-sourcerygxx-4_1-14:1.25
	binutils-csl-sourcerygxx-4_1-14:1.25
	binutils-csl-sourcerygxx-4_1-15:1.25
	gdb-csl-sourcerygxx-4_1-13:1.25
	binutils-csl-sourcerygxx-4_1-13:1.25
	binutils-2_17:1.25
	gdb-csl-sourcerygxx-4_1-12:1.25
	binutils-csl-sourcerygxx-4_1-12:1.25
	gdb-csl-sourcerygxx-3_4_4-21:1.25
	binutils-csl-sourcerygxx-3_4_4-21:1.25
	gdb_6_5-20060621-release:1.25
	binutils-csl-wrs-linux-3_4_4-24:1.22
	binutils-csl-wrs-linux-3_4_4-23:1.22
	gdb-csl-sourcerygxx-4_1-9:1.25
	binutils-csl-sourcerygxx-4_1-9:1.25
	gdb-csl-sourcerygxx-4_1-8:1.25
	binutils-csl-sourcerygxx-4_1-8:1.25
	gdb-csl-sourcerygxx-4_1-7:1.25
	binutils-csl-sourcerygxx-4_1-7:1.25
	gdb-csl-arm-2006q1-6:1.25
	binutils-csl-arm-2006q1-6:1.25
	gdb-csl-sourcerygxx-4_1-6:1.25
	binutils-csl-sourcerygxx-4_1-6:1.25
	binutils-csl-wrs-linux-3_4_4-22:1.22
	gdb-csl-symbian-6_4_50_20060226-10:1.25
	gdb-csl-symbian-6_4_50_20060226-9:1.25
	gdb-csl-symbian-6_4_50_20060226-8:1.25
	gdb-csl-coldfire-4_1-11:1.25
	binutils-csl-coldfire-4_1-11:1.25
	gdb-csl-sourcerygxx-3_4_4-19:1.25
	binutils-csl-sourcerygxx-3_4_4-19:1.25
	gdb-csl-coldfire-4_1-10:1.25
	gdb_6_5-branch:1.25.0.26
	gdb_6_5-2006-05-14-branchpoint:1.25
	binutils-csl-coldfire-4_1-10:1.25
	gdb-csl-sourcerygxx-4_1-5:1.25
	binutils-csl-sourcerygxx-4_1-5:1.25
	nickrob-async-20060513-branch:1.25.0.24
	nickrob-async-20060513-branchpoint:1.25
	gdb-csl-sourcerygxx-4_1-4:1.25
	binutils-csl-sourcerygxx-4_1-4:1.25
	msnyder-reverse-20060502-branch:1.25.0.22
	msnyder-reverse-20060502-branchpoint:1.25
	binutils-csl-wrs-linux-3_4_4-21:1.22
	gdb-csl-morpho-4_1-4:1.25
	binutils-csl-morpho-4_1-4:1.25
	gdb-csl-sourcerygxx-3_4_4-17:1.25
	binutils-csl-sourcerygxx-3_4_4-17:1.25
	binutils-csl-wrs-linux-3_4_4-20:1.22
	readline_5_1-import-branch:1.25.0.20
	readline_5_1-import-branchpoint:1.25
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.25
	binutils-2_17-branch:1.25.0.18
	binutils-2_17-branchpoint:1.25
	gdb-csl-symbian-20060226-branch:1.25.0.16
	gdb-csl-symbian-20060226-branchpoint:1.25
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.25
	msnyder-reverse-20060331-branch:1.25.0.14
	msnyder-reverse-20060331-branchpoint:1.25
	binutils-csl-2_17-branch:1.25.0.12
	binutils-csl-2_17-branchpoint:1.25
	gdb-csl-available-20060303-branch:1.25.0.10
	gdb-csl-available-20060303-branchpoint:1.25
	gdb-csl-20060226-branch:1.25.0.8
	gdb-csl-20060226-branchpoint:1.25
	gdb_6_4-20051202-release:1.25
	msnyder-fork-checkpoint-branch:1.25.0.6
	msnyder-fork-checkpoint-branchpoint:1.25
	gdb-csl-gxxpro-6_3-branch:1.25.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.25
	gdb_6_4-branch:1.25.0.2
	gdb_6_4-2005-11-01-branchpoint:1.25
	gdb-csl-arm-20051020-branch:1.24.0.2
	gdb-csl-arm-20051020-branchpoint:1.24
	binutils-csl-gxxpro-3_4-branch:1.22.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.22
	binutils-2_16_1:1.22
	msnyder-tracepoint-checkpoint-branch:1.23.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.23
	gdb-csl-arm-20050325-2005-q1b:1.22
	binutils-csl-arm-2005q1b:1.22
	binutils-2_16:1.22
	gdb-csl-arm-20050325-2005-q1a:1.22
	binutils-csl-arm-2005q1a:1.22
	csl-arm-20050325-branch:1.22.0.6
	csl-arm-20050325-branchpoint:1.22
	binutils-csl-arm-2005q1-branch:1.22.0.4
	binutils-csl-arm-2005q1-branchpoint:1.22
	binutils-2_16-branch:1.22.0.2
	binutils-2_16-branchpoint:1.22
	csl-arm-2004-q3d:1.20
	gdb_6_3-20041109-release:1.20
	gdb_6_3-branch:1.20.0.16
	gdb_6_3-20041019-branchpoint:1.20
	csl-arm-2004-q3:1.20
	drow_intercu-merge-20040921:1.20
	drow_intercu-merge-20040915:1.20
	jimb-gdb_6_2-e500-branch:1.20.0.18
	jimb-gdb_6_2-e500-branchpoint:1.20
	gdb_6_2-20040730-release:1.20
	gdb_6_2-branch:1.20.0.14
	gdb_6_2-2004-07-10-gmt-branchpoint:1.20
	gdb_6_1_1-20040616-release:1.20
	binutils-2_15:1.20
	binutils-2_15-branchpoint:1.20
	csl-arm-2004-q1a:1.20
	csl-arm-2004-q1:1.20
	gdb_6_1-2004-04-05-release:1.20
	drow_intercu-merge-20040402:1.20
	drow_intercu-merge-20040327:1.20
	ezannoni_pie-20040323-branch:1.20.0.12
	ezannoni_pie-20040323-branchpoint:1.20
	cagney_tramp-20040321-mergepoint:1.20
	cagney_tramp-20040309-branch:1.20.0.10
	cagney_tramp-20040309-branchpoint:1.20
	gdb_6_1-branch:1.20.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.20
	drow_intercu-20040221-branch:1.20.0.6
	drow_intercu-20040221-branchpoint:1.20
	binutils-2_15-branch:1.20.0.4
	cagney_bfdfile-20040213-branch:1.20.0.2
	cagney_bfdfile-20040213-branchpoint:1.20
	drow-cplus-merge-20040208:1.19
	carlton_dictionary-20040126-merge:1.19
	cagney_bigcore-20040122-branch:1.19.0.2
	cagney_bigcore-20040122-branchpoint:1.19
	drow-cplus-merge-20040113:1.19
	csl-arm-2003-q4:1.19
	drow-cplus-merge-20031224:1.19
	drow-cplus-merge-20031220:1.19
	carlton_dictionary-20031215-merge:1.19
	drow-cplus-merge-20031214:1.19
	carlton-dictionary-20031111-merge:1.18
	gdb_6_0-2003-10-04-release:1.17
	kettenis_sparc-20030918-branch:1.18.0.6
	kettenis_sparc-20030918-branchpoint:1.18
	carlton_dictionary-20030917-merge:1.18
	ezannoni_pie-20030916-branchpoint:1.18
	ezannoni_pie-20030916-branch:1.18.0.4
	cagney_x86i386-20030821-branch:1.18.0.2
	cagney_x86i386-20030821-branchpoint:1.18
	carlton_dictionary-20030805-merge:1.17
	carlton_dictionary-20030627-merge:1.17
	gdb_6_0-branch:1.17.0.36
	gdb_6_0-2003-06-23-branchpoint:1.17
	jimb-ppc64-linux-20030613-branch:1.17.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.17
	binutils-2_14:1.17
	cagney_convert-20030606-branch:1.17.0.32
	cagney_convert-20030606-branchpoint:1.17
	cagney_writestrings-20030508-branch:1.17.0.30
	cagney_writestrings-20030508-branchpoint:1.17
	jimb-ppc64-linux-20030528-branch:1.17.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.17
	carlton_dictionary-20030523-merge:1.17
	cagney_fileio-20030521-branch:1.17.0.26
	cagney_fileio-20030521-branchpoint:1.17
	kettenis_i386newframe-20030517-mergepoint:1.17
	jimb-ppc64-linux-20030509-branch:1.17.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.17
	kettenis_i386newframe-20030504-mergepoint:1.17
	carlton_dictionary-20030430-merge:1.17
	binutils-2_14-branch:1.17.0.22
	binutils-2_14-branchpoint:1.17
	kettenis_i386newframe-20030419-branch:1.17.0.20
	kettenis_i386newframe-20030419-branchpoint:1.17
	carlton_dictionary-20030416-merge:1.17
	cagney_frameaddr-20030409-mergepoint:1.17
	kettenis_i386newframe-20030406-branch:1.17.0.18
	kettenis_i386newframe-20030406-branchpoint:1.17
	cagney_frameaddr-20030403-branchpoint:1.17
	cagney_frameaddr-20030403-branch:1.17.0.16
	cagney_framebase-20030330-mergepoint:1.17
	cagney_framebase-20030326-branch:1.17.0.14
	cagney_framebase-20030326-branchpoint:1.17
	cagney_lazyid-20030317-branch:1.17.0.12
	cagney_lazyid-20030317-branchpoint:1.17
	kettenis-i386newframe-20030316-mergepoint:1.17
	offbyone-20030313-branch:1.17.0.10
	offbyone-20030313-branchpoint:1.17
	kettenis-i386newframe-20030308-branch:1.17.0.8
	kettenis-i386newframe-20030308-branchpoint:1.17
	carlton_dictionary-20030305-merge:1.17
	cagney_offbyone-20030303-branch:1.17.0.6
	cagney_offbyone-20030303-branchpoint:1.17
	carlton_dictionary-20030207-merge:1.17
	interps-20030202-branch:1.17.0.4
	interps-20030202-branchpoint:1.17
	cagney-unwind-20030108-branch:1.17.0.2
	cagney-unwind-20030108-branchpoint:1.17
	binutils-2_13_2_1:1.16
	binutils-2_13_2:1.16
	carlton_dictionary-20021223-merge:1.17
	gdb_5_3-2002-12-12-release:1.16
	carlton_dictionary-20021115-merge:1.16
	binutils-2_13_1:1.16
	kseitz_interps-20021105-merge:1.16
	kseitz_interps-20021103-merge:1.16
	drow-cplus-merge-20021020:1.16
	drow-cplus-merge-20021025:1.16
	carlton_dictionary-20021025-merge:1.16
	carlton_dictionary-20021011-merge:1.16
	drow-cplus-branch:1.16.0.16
	drow-cplus-branchpoint:1.16
	kseitz_interps-20020930-merge:1.16
	carlton_dictionary-20020927-merge:1.16
	carlton_dictionary-branch:1.16.0.14
	carlton_dictionary-20020920-branchpoint:1.16
	sid-20020905-branchpoint:1.16
	sid-20020905-branch:1.16.0.12
	gdb_5_3-branch:1.16.0.10
	gdb_5_3-2002-09-04-branchpoint:1.16
	kseitz_interps-20020829-merge:1.16
	cagney_sysregs-20020825-branch:1.16.0.8
	cagney_sysregs-20020825-branchpoint:1.16
	readline_4_3-import-branch:1.16.0.6
	readline_4_3-import-branchpoint:1.16
	binutils-2_13:1.16
	gdb_5_2_1-2002-07-23-release:1.15
	binutils-2_13-branchpoint:1.16
	binutils-2_13-branch:1.16.0.4
	kseitz_interps-20020528-branch:1.16.0.2
	kseitz_interps-20020528-branchpoint:1.16
	cagney_regbuf-20020515-branch:1.15.0.8
	cagney_regbuf-20020515-branchpoint:1.15
	binutils-2_12_1:1.15
	jimb-macro-020506-branch:1.15.0.6
	jimb-macro-020506-branchpoint:1.15
	gdb_5_2-2002-04-29-release:1.15
	binutils-2_12:1.15
	gdb_5_2-branch:1.15.0.4
	gdb_5_2-2002-03-03-branchpoint:1.15
	binutils-2_12-branch:1.15.0.2
	binutils-2_12-branchpoint:1.15
	gdb_5_1_1-2002-01-24-release:1.10
	gdb_5_1_0_1-2002-01-03-release:1.10
	cygnus_cvs_20020108_pre:1.14
	gdb_5_1_0_1-2002-01-03-branch:1.10.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.10
	gdb_5_1-2001-11-21-release:1.10
	gdb_s390-2001-09-26-branch:1.10.0.4
	gdb_s390-2001-09-26-branchpoint:1.10
	gdb_5_1-2001-07-29-branch:1.10.0.2
	gdb_5_1-2001-07-29-branchpoint:1.10
	binutils-2_11_2:1.6.2.1
	binutils-2_11_1:1.6.2.1
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	insight-precleanup-2001-01-01:1.6
	binutils-2_10_1:1.4
	binutils-2_10:1.4
	gdb-premipsmulti-2000-06-06-branch:1.4.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.4
	gdb_5_0-2000-05-19-release:1.4
	gdb_4_18_2-2000-05-18-release:1.4
	gdb_4_95_1-2000-05-11-snapshot:1.4
	gdb_4_95_0-2000-04-27-snapshot:1.4
	gdb_5_0-2000-04-10-branch:1.4.0.4
	gdb_5_0-2000-04-10-branchpoint:1.4
	binutils-2_10-branch:1.4.0.2
	binutils-2_10-branchpoint:1.4
	binutils_latest_snapshot:1.30
	repo-unification-2000-02-06:1.3
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2010.02.12.04.42.28;	author devans;	state Exp;
branches;
next	1.29;

1.29
date	2010.01.02.18.50.59;	author devans;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.20.07.22.30;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.05.09.49.02;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.08.11.14.19;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.28.19.49.22;	author brolley;	state Exp;
branches;
next	1.24;

1.24
date	2005.07.01.11.16.32;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.07.07.34.29;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2005.02.23.16.04.39;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.15.12.52.03;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.13.03.21.49;	author bje;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.03.17.38.48;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.09.00.39.21;	author meissner;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.02.21.58.19;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.15.20.54.49;	author nickc;	state Exp;
branches
	1.16.14.1
	1.16.16.1;
next	1.15;

1.15
date	2002.01.22.21.45.35;	author graydon;	state Exp;
branches
	1.15.8.1;
next	1.14;

1.14
date	2001.11.14.19.48.54;	author brolley;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.09.08.54.58;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.20.15.28.25;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.12.20.16.29;	author rth;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.04.17.45.19;	author fche;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.20.20.56.34;	author patrickm;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.13.22.58.36;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.05.15.55.01;	author brolley;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.09.23.20.59;	author nickc;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.08.28.18.17.54;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.24.16.19.36;	author aph;	state Exp;
branches;
next	1.3;

1.3
date	99.10.05.00.05.52;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	99.08.29.21.16.25;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.59;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.16.14.1
date	2002.12.23.19.39.36;	author carlton;	state Exp;
branches;
next	1.16.14.2;

1.16.14.2
date	2003.09.17.21.29.00;	author carlton;	state Exp;
branches;
next	1.16.14.3;

1.16.14.3
date	2003.12.16.00.01.15;	author carlton;	state Exp;
branches;
next	;

1.16.16.1
date	2003.12.14.20.28.07;	author drow;	state Exp;
branches;
next	;

1.15.8.1
date	2002.06.15.16.43.20;	author cagney;	state Exp;
branches;
next	;

1.6.2.1
date	2001.06.07.03.18.35;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.59;	author rth;	state Exp;
branches;
next	;


desc
@@


1.30
log
@	* cgen-dis.in (print_normal): Delete CGEN_PRINT_NORMAL.
	(print_address): Delete CGEN_PRINT_ADDRESS.
	* fr30-dis.c, * frv-dis.c, * ip2k-dis.c, * iq2000-dis.c,
	* lm32-dis.c, * m32c-dis.c, * m32r-desc.c, * m32r-desc.h,
	* m32r-dis.c, * mep-dis.c, * mt-dis.c, * openrisc-dis.c,
	* xc16x-dis.c, * xstormy16-dis.c: Regenerate.
@
text
@/* Disassembler interface for targets using CGEN. -*- C -*-
   CGEN: Cpu tools GENerator

   THIS FILE IS MACHINE GENERATED WITH CGEN.
   - the resultant file is machine generated, cgen-dis.in isn't

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007,
   2008, 2010  Free Software Foundation, Inc.

   This file is part of libopcodes.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */

/* ??? Eventually more and more of this stuff can go to cpu-independent files.
   Keep that in mind.  */

#include "sysdep.h"
#include <stdio.h>
#include "ansidecl.h"
#include "dis-asm.h"
#include "bfd.h"
#include "symcat.h"
#include "libiberty.h"
#include "m32r-desc.h"
#include "m32r-opc.h"
#include "opintl.h"

/* Default text to print if an instruction isn't recognized.  */
#define UNKNOWN_INSN_MSG _("*unknown*")

static void print_normal
  (CGEN_CPU_DESC, void *, long, unsigned int, bfd_vma, int);
static void print_address
  (CGEN_CPU_DESC, void *, bfd_vma, unsigned int, bfd_vma, int) ATTRIBUTE_UNUSED;
static void print_keyword
  (CGEN_CPU_DESC, void *, CGEN_KEYWORD *, long, unsigned int) ATTRIBUTE_UNUSED;
static void print_insn_normal
  (CGEN_CPU_DESC, void *, const CGEN_INSN *, CGEN_FIELDS *, bfd_vma, int);
static int print_insn
  (CGEN_CPU_DESC, bfd_vma,  disassemble_info *, bfd_byte *, unsigned);
static int default_print_insn
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *) ATTRIBUTE_UNUSED;
static int read_insn
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *, bfd_byte *, int, CGEN_EXTRACT_INFO *,
   unsigned long *);

/* -- disassembler routines inserted here.  */

/* -- dis.c */

/* Print signed operands with '#' prefixes.  */

static void
print_signed_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			       void * dis_info,
			       long value,
			       unsigned int attrs ATTRIBUTE_UNUSED,
			       bfd_vma pc ATTRIBUTE_UNUSED,
			       int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "%ld", value);
}

/* Print unsigned operands with '#' prefixes.  */

static void
print_unsigned_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
				 void * dis_info,
				 long value,
				 unsigned int attrs ATTRIBUTE_UNUSED,
				 bfd_vma pc ATTRIBUTE_UNUSED,
				 int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "0x%lx", value);
}

/* Handle '#' prefixes as operands.  */

static void
print_hash (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	    void * dis_info,
	    long value ATTRIBUTE_UNUSED,
	    unsigned int attrs ATTRIBUTE_UNUSED,
	    bfd_vma pc ATTRIBUTE_UNUSED,
	    int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
}

#undef  CGEN_PRINT_INSN
#define CGEN_PRINT_INSN my_print_insn

static int
my_print_insn (CGEN_CPU_DESC cd,
	       bfd_vma pc,
	       disassemble_info *info)
{
  bfd_byte buffer[CGEN_MAX_INSN_SIZE];
  bfd_byte *buf = buffer;
  int status;
  int buflen = (pc & 3) == 0 ? 4 : 2;
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  bfd_byte *x;

  /* Read the base part of the insn.  */

  status = (*info->read_memory_func) (pc - ((!big_p && (pc & 3) != 0) ? 2 : 0),
				      buf, buflen, info);
  if (status != 0)
    {
      (*info->memory_error_func) (status, pc, info);
      return -1;
    }

  /* 32 bit insn?  */
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
    return print_insn (cd, pc, info, buf, buflen);

  /* Print the first insn.  */
  if ((pc & 3) == 0)
    {
      buf += (big_p ? 0 : 2);
      if (print_insn (cd, pc, info, buf, 2) == 0)
	(*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);
      buf += (big_p ? 2 : -2);
    }

  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
    {
      /* Parallel.  */
      (*info->fprintf_func) (info->stream, " || ");
      *x &= 0x7f;
    }
  else
    (*info->fprintf_func) (info->stream, " -> ");

  /* The "& 3" is to pass a consistent address.
     Parallel insns arguably both begin on the word boundary.
     Also, branch insns are calculated relative to the word boundary.  */
  if (print_insn (cd, pc & ~ (bfd_vma) 3, info, buf, 2) == 0)
    (*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);

  return (pc & 3) ? 2 : 4;
}

/* -- */

void m32r_cgen_print_operand
  (CGEN_CPU_DESC, int, PTR, CGEN_FIELDS *, void const *, bfd_vma, int);

/* Main entry point for printing operands.
   XINFO is a `void *' and not a `disassemble_info *' to not put a requirement
   of dis-asm.h on cgen.h.

   This function is basically just a big switch statement.  Earlier versions
   used tables to look up the function to use, but
   - if the table contains both assembler and disassembler functions then
     the disassembler contains much of the assembler and vice-versa,
   - there's a lot of inlining possibilities as things grow,
   - using a switch statement avoids the function call overhead.

   This function could be moved into `print_insn_normal', but keeping it
   separate makes clear the interface between `print_insn_normal' and each of
   the handlers.  */

void
m32r_cgen_print_operand (CGEN_CPU_DESC cd,
			   int opindex,
			   void * xinfo,
			   CGEN_FIELDS *fields,
			   void const *attrs ATTRIBUTE_UNUSED,
			   bfd_vma pc,
			   int length)
{
  disassemble_info *info = (disassemble_info *) xinfo;

  switch (opindex)
    {
    case M32R_OPERAND_ACC :
      print_keyword (cd, info, & m32r_cgen_opval_h_accums, fields->f_acc, 0);
      break;
    case M32R_OPERAND_ACCD :
      print_keyword (cd, info, & m32r_cgen_opval_h_accums, fields->f_accd, 0);
      break;
    case M32R_OPERAND_ACCS :
      print_keyword (cd, info, & m32r_cgen_opval_h_accums, fields->f_accs, 0);
      break;
    case M32R_OPERAND_DCR :
      print_keyword (cd, info, & m32r_cgen_opval_cr_names, fields->f_r1, 0);
      break;
    case M32R_OPERAND_DISP16 :
      print_address (cd, info, fields->f_disp16, 0|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), pc, length);
      break;
    case M32R_OPERAND_DISP24 :
      print_address (cd, info, fields->f_disp24, 0|(1<<CGEN_OPERAND_RELAX)|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), pc, length);
      break;
    case M32R_OPERAND_DISP8 :
      print_address (cd, info, fields->f_disp8, 0|(1<<CGEN_OPERAND_RELAX)|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), pc, length);
      break;
    case M32R_OPERAND_DR :
      print_keyword (cd, info, & m32r_cgen_opval_gr_names, fields->f_r1, 0);
      break;
    case M32R_OPERAND_HASH :
      print_hash (cd, info, 0, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
      break;
    case M32R_OPERAND_HI16 :
      print_normal (cd, info, fields->f_hi16, 0|(1<<CGEN_OPERAND_SIGN_OPT), pc, length);
      break;
    case M32R_OPERAND_IMM1 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_imm1, 0, pc, length);
      break;
    case M32R_OPERAND_SCR :
      print_keyword (cd, info, & m32r_cgen_opval_cr_names, fields->f_r2, 0);
      break;
    case M32R_OPERAND_SIMM16 :
      print_signed_with_hash_prefix (cd, info, fields->f_simm16, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
      break;
    case M32R_OPERAND_SIMM8 :
      print_signed_with_hash_prefix (cd, info, fields->f_simm8, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
      break;
    case M32R_OPERAND_SLO16 :
      print_normal (cd, info, fields->f_simm16, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
      break;
    case M32R_OPERAND_SR :
      print_keyword (cd, info, & m32r_cgen_opval_gr_names, fields->f_r2, 0);
      break;
    case M32R_OPERAND_SRC1 :
      print_keyword (cd, info, & m32r_cgen_opval_gr_names, fields->f_r1, 0);
      break;
    case M32R_OPERAND_SRC2 :
      print_keyword (cd, info, & m32r_cgen_opval_gr_names, fields->f_r2, 0);
      break;
    case M32R_OPERAND_UIMM16 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_uimm16, 0, pc, length);
      break;
    case M32R_OPERAND_UIMM24 :
      print_address (cd, info, fields->f_uimm24, 0|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_ABS_ADDR), pc, length);
      break;
    case M32R_OPERAND_UIMM3 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_uimm3, 0, pc, length);
      break;
    case M32R_OPERAND_UIMM4 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_uimm4, 0, pc, length);
      break;
    case M32R_OPERAND_UIMM5 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_uimm5, 0, pc, length);
      break;
    case M32R_OPERAND_UIMM8 :
      print_unsigned_with_hash_prefix (cd, info, fields->f_uimm8, 0, pc, length);
      break;
    case M32R_OPERAND_ULO16 :
      print_normal (cd, info, fields->f_uimm16, 0, pc, length);
      break;

    default :
      /* xgettext:c-format */
      fprintf (stderr, _("Unrecognized field %d while printing insn.\n"),
	       opindex);
    abort ();
  }
}

cgen_print_fn * const m32r_cgen_print_handlers[] = 
{
  print_insn_normal,
};


void
m32r_cgen_init_dis (CGEN_CPU_DESC cd)
{
  m32r_cgen_init_opcode_table (cd);
  m32r_cgen_init_ibld_table (cd);
  cd->print_handlers = & m32r_cgen_print_handlers[0];
  cd->print_operand = m32r_cgen_print_operand;
}


/* Default print handler.  */

static void
print_normal (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	      void *dis_info,
	      long value,
	      unsigned int attrs,
	      bfd_vma pc ATTRIBUTE_UNUSED,
	      int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  /* Print the operand as directed by the attributes.  */
  if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SEM_ONLY))
    ; /* nothing to do */
  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SIGNED))
    (*info->fprintf_func) (info->stream, "%ld", value);
  else
    (*info->fprintf_func) (info->stream, "0x%lx", value);
}

/* Default address handler.  */

static void
print_address (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       bfd_vma value,
	       unsigned int attrs,
	       bfd_vma pc ATTRIBUTE_UNUSED,
	       int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  /* Print the operand as directed by the attributes.  */
  if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SEM_ONLY))
    ; /* Nothing to do.  */
  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_PCREL_ADDR))
    (*info->print_address_func) (value, info);
  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_ABS_ADDR))
    (*info->print_address_func) (value, info);
  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SIGNED))
    (*info->fprintf_func) (info->stream, "%ld", (long) value);
  else
    (*info->fprintf_func) (info->stream, "0x%lx", (long) value);
}

/* Keyword print handler.  */

static void
print_keyword (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       CGEN_KEYWORD *keyword_table,
	       long value,
	       unsigned int attrs ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;
  const CGEN_KEYWORD_ENTRY *ke;

  ke = cgen_keyword_lookup_value (keyword_table, value);
  if (ke != NULL)
    (*info->fprintf_func) (info->stream, "%s", ke->name);
  else
    (*info->fprintf_func) (info->stream, "???");
}

/* Default insn printer.

   DIS_INFO is defined as `void *' so the disassembler needn't know anything
   about disassemble_info.  */

static void
print_insn_normal (CGEN_CPU_DESC cd,
		   void *dis_info,
		   const CGEN_INSN *insn,
		   CGEN_FIELDS *fields,
		   bfd_vma pc,
		   int length)
{
  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
  disassemble_info *info = (disassemble_info *) dis_info;
  const CGEN_SYNTAX_CHAR_TYPE *syn;

  CGEN_INIT_PRINT (cd);

  for (syn = CGEN_SYNTAX_STRING (syntax); *syn; ++syn)
    {
      if (CGEN_SYNTAX_MNEMONIC_P (*syn))
	{
	  (*info->fprintf_func) (info->stream, "%s", CGEN_INSN_MNEMONIC (insn));
	  continue;
	}
      if (CGEN_SYNTAX_CHAR_P (*syn))
	{
	  (*info->fprintf_func) (info->stream, "%c", CGEN_SYNTAX_CHAR (*syn));
	  continue;
	}

      /* We have an operand.  */
      m32r_cgen_print_operand (cd, CGEN_SYNTAX_FIELD (*syn), info,
				 fields, CGEN_INSN_ATTRS (insn), pc, length);
    }
}

/* Subroutine of print_insn. Reads an insn into the given buffers and updates
   the extract info.
   Returns 0 if all is well, non-zero otherwise.  */

static int
read_insn (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	   bfd_vma pc,
	   disassemble_info *info,
	   bfd_byte *buf,
	   int buflen,
	   CGEN_EXTRACT_INFO *ex_info,
	   unsigned long *insn_value)
{
  int status = (*info->read_memory_func) (pc, buf, buflen, info);

  if (status != 0)
    {
      (*info->memory_error_func) (status, pc, info);
      return -1;
    }

  ex_info->dis_info = info;
  ex_info->valid = (1 << buflen) - 1;
  ex_info->insn_bytes = buf;

  *insn_value = bfd_get_bits (buf, buflen * 8, info->endian == BFD_ENDIAN_BIG);
  return 0;
}

/* Utility to print an insn.
   BUF is the base part of the insn, target byte order, BUFLEN bytes long.
   The result is the size of the insn in bytes or zero for an unknown insn
   or -1 if an error occurs fetching data (memory_error_func will have
   been called).  */

static int
print_insn (CGEN_CPU_DESC cd,
	    bfd_vma pc,
	    disassemble_info *info,
	    bfd_byte *buf,
	    unsigned int buflen)
{
  CGEN_INSN_INT insn_value;
  const CGEN_INSN_LIST *insn_list;
  CGEN_EXTRACT_INFO ex_info;
  int basesize;

  /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */
  basesize = cd->base_insn_bitsize < buflen * 8 ?
                                     cd->base_insn_bitsize : buflen * 8;
  insn_value = cgen_get_insn_value (cd, buf, basesize);


  /* Fill in ex_info fields like read_insn would.  Don't actually call
     read_insn, since the incoming buffer is already read (and possibly
     modified a la m32r).  */
  ex_info.valid = (1 << buflen) - 1;
  ex_info.dis_info = info;
  ex_info.insn_bytes = buf;

  /* The instructions are stored in hash lists.
     Pick the first one and keep trying until we find the right one.  */

  insn_list = CGEN_DIS_LOOKUP_INSN (cd, (char *) buf, insn_value);
  while (insn_list != NULL)
    {
      const CGEN_INSN *insn = insn_list->insn;
      CGEN_FIELDS fields;
      int length;
      unsigned long insn_value_cropped;

#ifdef CGEN_VALIDATE_INSN_SUPPORTED 
      /* Not needed as insn shouldn't be in hash lists if not supported.  */
      /* Supported by this cpu?  */
      if (! m32r_cgen_insn_supported (cd, insn))
        {
          insn_list = CGEN_DIS_NEXT_INSN (insn_list);
	  continue;
        }
#endif

      /* Basic bit mask must be correct.  */
      /* ??? May wish to allow target to defer this check until the extract
	 handler.  */

      /* Base size may exceed this instruction's size.  Extract the
         relevant part from the buffer. */
      if ((unsigned) (CGEN_INSN_BITSIZE (insn) / 8) < buflen &&
	  (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
	insn_value_cropped = bfd_get_bits (buf, CGEN_INSN_BITSIZE (insn), 
					   info->endian == BFD_ENDIAN_BIG);
      else
	insn_value_cropped = insn_value;

      if ((insn_value_cropped & CGEN_INSN_BASE_MASK (insn))
	  == CGEN_INSN_BASE_VALUE (insn))
	{
	  /* Printing is handled in two passes.  The first pass parses the
	     machine insn and extracts the fields.  The second pass prints
	     them.  */

	  /* Make sure the entire insn is loaded into insn_value, if it
	     can fit.  */
	  if (((unsigned) CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize) &&
	      (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
	    {
	      unsigned long full_insn_value;
	      int rc = read_insn (cd, pc, info, buf,
				  CGEN_INSN_BITSIZE (insn) / 8,
				  & ex_info, & full_insn_value);
	      if (rc != 0)
		return rc;
	      length = CGEN_EXTRACT_FN (cd, insn)
		(cd, insn, &ex_info, full_insn_value, &fields, pc);
	    }
	  else
	    length = CGEN_EXTRACT_FN (cd, insn)
	      (cd, insn, &ex_info, insn_value_cropped, &fields, pc);

	  /* Length < 0 -> error.  */
	  if (length < 0)
	    return length;
	  if (length > 0)
	    {
	      CGEN_PRINT_FN (cd, insn) (cd, info, insn, &fields, pc, length);
	      /* Length is in bits, result is in bytes.  */
	      return length / 8;
	    }
	}

      insn_list = CGEN_DIS_NEXT_INSN (insn_list);
    }

  return 0;
}

/* Default value for CGEN_PRINT_INSN.
   The result is the size of the insn in bytes or zero for an unknown insn
   or -1 if an error occured fetching bytes.  */

#ifndef CGEN_PRINT_INSN
#define CGEN_PRINT_INSN default_print_insn
#endif

static int
default_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)
{
  bfd_byte buf[CGEN_MAX_INSN_SIZE];
  int buflen;
  int status;

  /* Attempt to read the base part of the insn.  */
  buflen = cd->base_insn_bitsize / 8;
  status = (*info->read_memory_func) (pc, buf, buflen, info);

  /* Try again with the minimum part, if min < base.  */
  if (status != 0 && (cd->min_insn_bitsize < cd->base_insn_bitsize))
    {
      buflen = cd->min_insn_bitsize / 8;
      status = (*info->read_memory_func) (pc, buf, buflen, info);
    }

  if (status != 0)
    {
      (*info->memory_error_func) (status, pc, info);
      return -1;
    }

  return print_insn (cd, pc, info, buf, buflen);
}

/* Main entry point.
   Print one instruction from PC on INFO->STREAM.
   Return the size of the instruction (in bytes).  */

typedef struct cpu_desc_list
{
  struct cpu_desc_list *next;
  CGEN_BITSET *isa;
  int mach;
  int endian;
  CGEN_CPU_DESC cd;
} cpu_desc_list;

int
print_insn_m32r (bfd_vma pc, disassemble_info *info)
{
  static cpu_desc_list *cd_list = 0;
  cpu_desc_list *cl = 0;
  static CGEN_CPU_DESC cd = 0;
  static CGEN_BITSET *prev_isa;
  static int prev_mach;
  static int prev_endian;
  int length;
  CGEN_BITSET *isa;
  int mach;
  int endian = (info->endian == BFD_ENDIAN_BIG
		? CGEN_ENDIAN_BIG
		: CGEN_ENDIAN_LITTLE);
  enum bfd_architecture arch;

  /* ??? gdb will set mach but leave the architecture as "unknown" */
#ifndef CGEN_BFD_ARCH
#define CGEN_BFD_ARCH bfd_arch_m32r
#endif
  arch = info->arch;
  if (arch == bfd_arch_unknown)
    arch = CGEN_BFD_ARCH;
   
  /* There's no standard way to compute the machine or isa number
     so we leave it to the target.  */
#ifdef CGEN_COMPUTE_MACH
  mach = CGEN_COMPUTE_MACH (info);
#else
  mach = info->mach;
#endif

#ifdef CGEN_COMPUTE_ISA
  {
    static CGEN_BITSET *permanent_isa;

    if (!permanent_isa)
      permanent_isa = cgen_bitset_create (MAX_ISAS);
    isa = permanent_isa;
    cgen_bitset_clear (isa);
    cgen_bitset_add (isa, CGEN_COMPUTE_ISA (info));
  }
#else
  isa = info->insn_sets;
#endif

  /* If we've switched cpu's, try to find a handle we've used before */
  if (cd
      && (cgen_bitset_compare (isa, prev_isa) != 0
	  || mach != prev_mach
	  || endian != prev_endian))
    {
      cd = 0;
      for (cl = cd_list; cl; cl = cl->next)
	{
	  if (cgen_bitset_compare (cl->isa, isa) == 0 &&
	      cl->mach == mach &&
	      cl->endian == endian)
	    {
	      cd = cl->cd;
 	      prev_isa = cd->isas;
	      break;
	    }
	}
    } 

  /* If we haven't initialized yet, initialize the opcode table.  */
  if (! cd)
    {
      const bfd_arch_info_type *arch_type = bfd_lookup_arch (arch, mach);
      const char *mach_name;

      if (!arch_type)
	abort ();
      mach_name = arch_type->printable_name;

      prev_isa = cgen_bitset_copy (isa);
      prev_mach = mach;
      prev_endian = endian;
      cd = m32r_cgen_cpu_open (CGEN_CPU_OPEN_ISAS, prev_isa,
				 CGEN_CPU_OPEN_BFDMACH, mach_name,
				 CGEN_CPU_OPEN_ENDIAN, prev_endian,
				 CGEN_CPU_OPEN_END);
      if (!cd)
	abort ();

      /* Save this away for future reference.  */
      cl = xmalloc (sizeof (struct cpu_desc_list));
      cl->cd = cd;
      cl->isa = prev_isa;
      cl->mach = mach;
      cl->endian = endian;
      cl->next = cd_list;
      cd_list = cl;

      m32r_cgen_init_dis (cd);
    }

  /* We try to have as much common code as possible.
     But at this point some targets need to take over.  */
  /* ??? Some targets may need a hook elsewhere.  Try to avoid this,
     but if not possible try to move this hook elsewhere rather than
     have two hooks.  */
  length = CGEN_PRINT_INSN (cd, pc, info);
  if (length > 0)
    return length;
  if (length < 0)
    return -1;

  (*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);
  return cd->default_insn_bitsize / 8;
}
@


1.29
log
@	* cgen-asm.in: Update copyright year.
	* cgen-dis.in: Update copyright year.
	* cgen-ibld.in: Update copyright year.
	* fr30-asm.c, * fr30-desc.c, * fr30-desc.h, * fr30-dis.c,
	* fr30-ibld.c, * fr30-opc.c, * fr30-opc.h, * frv-asm.c, * frv-desc.c,
	* frv-desc.h, * frv-dis.c, * frv-ibld.c, * frv-opc.c, * frv-opc.h,
	* ip2k-asm.c, * ip2k-desc.c, * ip2k-desc.h, * ip2k-dis.c,
	* ip2k-ibld.c, * ip2k-opc.c, * ip2k-opc.h, * iq2000-asm.c,
	* iq2000-desc.c, * iq2000-desc.h, * iq2000-dis.c, * iq2000-ibld.c,
	* iq2000-opc.c, * iq2000-opc.h, * lm32-asm.c, * lm32-desc.c,
	* lm32-desc.h, * lm32-dis.c, * lm32-ibld.c, * lm32-opc.c, * lm32-opc.h,
	* lm32-opinst.c, * m32c-asm.c, * m32c-desc.c, * m32c-desc.h,
	* m32c-dis.c, * m32c-ibld.c, * m32c-opc.c, * m32c-opc.h, * m32r-asm.c,
	* m32r-desc.c, * m32r-desc.h, * m32r-dis.c, * m32r-ibld.c,
	* m32r-opc.c, * m32r-opc.h, * m32r-opinst.c, * mep-asm.c, * mep-desc.c,
	* mep-desc.h, * mep-dis.c, * mep-ibld.c, * mep-opc.c, * mep-opc.h,
	* mt-asm.c, * mt-desc.c, * mt-desc.h, * mt-dis.c, * mt-ibld.c,
	* mt-opc.c, * mt-opc.h, * openrisc-asm.c, * openrisc-desc.c,
	* openrisc-desc.h, * openrisc-dis.c, * openrisc-ibld.c,
	* openrisc-opc.c, * openrisc-opc.h, * xc16x-asm.c, * xc16x-desc.c,
	* xc16x-desc.h, * xc16x-dis.c, * xc16x-ibld.c, * xc16x-opc.c,
	* xc16x-opc.h, * xstormy16-asm.c, * xstormy16-desc.c,
	* xstormy16-desc.h, * xstormy16-dis.c, * xstormy16-ibld.c,
	* xstormy16-opc.c, * xstormy16-opc.h: Regenerate.
@
text
@a61 1
/* Immediate values are prefixed with '#'.  */
d63 31
a93 7
#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length)	\
  do								\
    {								\
      if (CGEN_BOOL_ATTR ((attrs), CGEN_OPERAND_HASH_PREFIX))	\
	(*info->fprintf_func) (info->stream, "#");		\
    }								\
  while (0)
d232 1
a232 1
      print_normal (cd, info, fields->f_imm1, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d238 1
a238 1
      print_normal (cd, info, fields->f_simm16, 0|(1<<CGEN_OPERAND_SIGNED)|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d241 1
a241 1
      print_normal (cd, info, fields->f_simm8, 0|(1<<CGEN_OPERAND_SIGNED)|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d256 1
a256 1
      print_normal (cd, info, fields->f_uimm16, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d259 1
a259 1
      print_address (cd, info, fields->f_uimm24, 0|(1<<CGEN_OPERAND_HASH_PREFIX)|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_ABS_ADDR), pc, length);
d262 1
a262 1
      print_normal (cd, info, fields->f_uimm3, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d265 1
a265 1
      print_normal (cd, info, fields->f_uimm4, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d268 1
a268 1
      print_normal (cd, info, fields->f_uimm5, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
d271 1
a271 1
      print_normal (cd, info, fields->f_uimm8, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
a312 4
#ifdef CGEN_PRINT_NORMAL
  CGEN_PRINT_NORMAL (cd, info, value, attrs, pc, length);
#endif

a333 4
#ifdef CGEN_PRINT_ADDRESS
  CGEN_PRINT_ADDRESS (cd, info, value, attrs, pc, length);
#endif

@


1.28
log
@Regenerate for copyright date update.
@
text
@d8 1
a8 1
   2008  Free Software Foundation, Inc.
@


1.27
log
@Change source files over to GPLv3.
@
text
@d7 2
a8 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
@


1.26
log
@Regenerate.
@
text
@d7 1
a7 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005
d10 1
a10 1
   This file is part of the GNU Binutils and GDB, the GNU debugger.
d12 1
a12 1
   This program is free software; you can redistribute it and/or modify
d14 1
a14 1
   the Free Software Foundation; either version 2, or (at your option)
d17 4
a20 4
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
@


1.25
log
@2005-10-28  Dave Brolley  <brolley@@redhat.com>

        * All CGEN-generated sources: Regenerate.

        Contribute the following changes:
        2005-09-19  Dave Brolley  <brolley@@redhat.com>

        * disassemble.c (disassemble_init_for_target): Add 'break' to case for
        bfd_arch_tic4x. Use cgen_bitset_create and cgen_bitset_set for
        bfd_arch_m32c case.

        2005-02-16  Dave Brolley  <brolley@@redhat.com>

        * cgen-dis.in: Rename CGEN_ISA_MASK to CGEN_BITSET. Rename
        cgen_isa_mask_* to cgen_bitset_*.
        * cgen-opc.c: Likewise.

        2003-11-28  Richard Sandiford  <rsandifo@@redhat.com>

        * cgen-dis.in (print_insn_@@arch@@): Fix comparison with cached isas.
        * *-dis.c: Regenerate.

        2003-06-05  DJ Delorie  <dj@@redhat.com>

        * cgen-dis.in (print_insn_@@arch@@): Copy prev_isas, don't assign
        it, as it may point to a reused buffer. Set prev_isas when we
        change cpus.

        2002-12-13  Dave Brolley  <brolley@@redhat.com>

        * cgen-opc.c (cgen_isa_mask_create): New support function for
        CGEN_ISA_MASK.
        (cgen_isa_mask_init): Ditto.
        (cgen_isa_mask_clear): Ditto.
        (cgen_isa_mask_add): Ditto.
        (cgen_isa_mask_set): Ditto.
        (cgen_isa_supported): Ditto.
        (cgen_isa_mask_compare): Ditto.
        (cgen_isa_mask_intersection): Ditto.
        (cgen_isa_mask_copy): Ditto.
        (cgen_isa_mask_combine): Ditto.
        * cgen-dis.in (libiberty.h): #include it.
        (isas): Renamed from 'isa' and now (CGEN_ISA_MASK *).
        (print_insn_@@arch@@): Use CGEN_ISA_MASK and support functions.
        * Makefile.am (CGENDEPS): Add utils-cgen.scm and attrs.scm.
        * Makefile.in: Regenerated.
@
text
@d68 1
a68 1
        (*info->fprintf_func) (info->stream, "#");		\
d105 1
a105 1
                                      buf, buflen, info);
@


1.24
log
@Update function declarations to ISO C90 formatting
@
text
@d7 1
a7 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005
d567 1
a567 1
  int isa;
d579 1
a579 1
  static int prev_isa;
d583 2
a584 1
  int isa,mach;
d607 9
a615 1
  isa = CGEN_COMPUTE_ISA (info);
d622 1
a622 1
      && (isa != prev_isa
d629 1
a629 1
	  if (cl->isa == isa &&
d634 1
d650 1
a650 1
      prev_isa = isa;
d663 1
a663 1
      cl->isa = isa;
@


1.23
log
@Update the address and phone number of the FSF
@
text
@d4 2
a5 2
THIS FILE IS MACHINE GENERATED WITH CGEN.
- the resultant file is machine generated, cgen-dis.in isn't
d7 2
a8 2
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005
Free Software Foundation, Inc.
d10 1
a10 1
This file is part of the GNU Binutils and GDB, the GNU debugger.
d12 13
a24 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
d59 1
a59 1
/* -- disassembler routines inserted here */
a61 3
static void print_hash PARAMS ((CGEN_CPU_DESC, PTR, long, unsigned, bfd_vma, int));
static int my_print_insn PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *));

d75 6
a80 7
print_hash (cd, dis_info, value, attrs, pc, length)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     long value ATTRIBUTE_UNUSED;
     unsigned int attrs ATTRIBUTE_UNUSED;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d83 1
d91 3
a93 4
my_print_insn (cd, pc, info)
     CGEN_CPU_DESC cd;
     bfd_vma pc;
     disassemble_info *info;
d148 1
a148 2
  PARAMS ((CGEN_CPU_DESC, int, PTR, CGEN_FIELDS *,
           void const *, bfd_vma, int));
d166 7
a172 8
m32r_cgen_print_operand (cd, opindex, xinfo, fields, attrs, pc, length)
     CGEN_CPU_DESC cd;
     int opindex;
     PTR xinfo;
     CGEN_FIELDS *fields;
     void const *attrs ATTRIBUTE_UNUSED;
     bfd_vma pc;
     int length;
d174 1
a174 1
 disassemble_info *info = (disassemble_info *) xinfo;
d269 1
a269 2
m32r_cgen_init_dis (cd)
     CGEN_CPU_DESC cd;
d321 1
a321 1
    ; /* nothing to do */
d403 1
d508 1
a508 1
	  /* length < 0 -> error */
d514 1
a514 1
	      /* length is in bits, result is in bytes */
d564 2
a565 1
typedef struct cpu_desc_list {
d650 1
a650 1
      /* save this away for future reference */
@


1.22
log
@Fix compile time warnings generated by gcc 4.0
@
text
@d24 1
a24 1
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.21
log
@Fix compile time warning messages
@
text
@d52 1
a52 1
  (CGEN_CPU_DESC, bfd_vma,  disassemble_info *, char *, unsigned);
d56 1
a56 1
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *, char *, int, CGEN_EXTRACT_INFO *,
d99 2
a100 2
  char buffer[CGEN_MAX_INSN_SIZE];
  char *buf = buffer;
d104 1
a104 1
  char *x;
d404 1
a404 1
	   char *buf,
d434 1
a434 1
	    char *buf,
d458 1
a458 1
  insn_list = CGEN_DIS_LOOKUP_INSN (cd, buf, insn_value);
d542 1
a542 1
  char buf[CGEN_MAX_INSN_SIZE];
@


1.20
log
@	* m32r-dis.c: Regenerate.
@
text
@d7 1
a7 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002
d46 1
a46 1
  (CGEN_CPU_DESC, void *, bfd_vma, unsigned int, bfd_vma, int);
d48 1
a48 1
  (CGEN_CPU_DESC, void *, CGEN_KEYWORD *, long, unsigned int);
d54 1
a54 1
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *);
@


1.19
log
@Add support for the M32R2 processor.
@
text
@d108 2
a109 1
  status = (*info->read_memory_func) (pc, buf, buflen, info);
a121 1
  buf += (big_p ? 0 : 2);
d124 1
d127 1
a128 1
  buf += (big_p ? 2 : -2);
@


1.18
log
@regenerate cgen files after prototype fix
@
text
@d103 2
d116 2
a117 1
  if ((pc & 3) == 0 && (buf[0] & 0x80) != 0)
d121 1
a125 1
      buf += 2;
d127 1
d129 2
a130 1
  if (buf[0] & 0x80)
d134 1
a134 1
      buf[0] &= 0x7f;
d243 3
d251 3
@


1.17
log
@	* cgen-dis.in: Include libiberty.h.
	* fr30-desc.c: Regenerate.
	* fr30-dis.c: Regenerate.
	* frv-desc.c: Regenerate.
	* frv-dis.c: Regenerate.
	* ip2k-asm.c: Regenerate.
	* ip2k-desc.c: Regenerate.
	* ip2k-dis.c: Regenerate.
	* ip2k-opc.c: Regenerate.
	* ip2k-opc.h: Regenerate.
	* m32r-desc.c: Regenerate.
	* m32r-dis.c: Regenerate.
	* openrisc-desc.c: Regenerate.
	* openrisc-dis.c: Regenerate.
	* xstormy16-asm.c: Regenerate.
	* xstormy16-desc.c: Regenerate.
	* xstormy16-dis.c: Regenerate.
@
text
@d44 1
a44 1
     PARAMS ((CGEN_CPU_DESC, PTR, long, unsigned int, bfd_vma, int));
d46 1
a46 1
     PARAMS ((CGEN_CPU_DESC, PTR, bfd_vma, unsigned int, bfd_vma, int));
d48 1
a48 1
     PARAMS ((CGEN_CPU_DESC, PTR, CGEN_KEYWORD *, long, unsigned int));
d50 1
a50 2
     PARAMS ((CGEN_CPU_DESC, PTR, const CGEN_INSN *, CGEN_FIELDS *,
	      bfd_vma, int));
d52 1
a52 1
     PARAMS ((CGEN_CPU_DESC, bfd_vma,  disassemble_info *, char *, unsigned));
d54 1
a54 1
     PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *));
d56 2
a57 2
     PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *, char *, int,
	      CGEN_EXTRACT_INFO *, unsigned long *));
d276 6
a281 7
print_normal (cd, dis_info, value, attrs, pc, length)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     long value;
     unsigned int attrs;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d301 6
a306 7
print_address (cd, dis_info, value, attrs, pc, length)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     bfd_vma value;
     unsigned int attrs;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d330 5
a334 6
print_keyword (cd, dis_info, keyword_table, value, attrs)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     CGEN_KEYWORD *keyword_table;
     long value;
     unsigned int attrs ATTRIBUTE_UNUSED;
d348 1
a348 1
   DIS_INFO is defined as `PTR' so the disassembler needn't know anything
d352 6
a357 7
print_insn_normal (cd, dis_info, insn, fields, pc, length)
     CGEN_CPU_DESC cd;
     PTR dis_info;
     const CGEN_INSN *insn;
     CGEN_FIELDS *fields;
     bfd_vma pc;
     int length;
d389 7
a395 8
read_insn (cd, pc, info, buf, buflen, ex_info, insn_value)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     bfd_vma pc;
     disassemble_info *info;
     char *buf;
     int buflen;
     CGEN_EXTRACT_INFO *ex_info;
     unsigned long *insn_value;
d419 5
a423 6
print_insn (cd, pc, info, buf, buflen)
     CGEN_CPU_DESC cd;
     bfd_vma pc;
     disassemble_info *info;
     char *buf;
     unsigned int buflen;
d528 1
a528 4
default_print_insn (cd, pc, info)
     CGEN_CPU_DESC cd;
     bfd_vma pc;
     disassemble_info *info;
d567 1
a567 3
print_insn_m32r (pc, info)
     bfd_vma pc;
     disassemble_info *info;
@


1.16
log
@Regernate cgen built files.
@
text
@d7 2
a8 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d35 1
@


1.16.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d7 1
a7 2
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002
Free Software Foundation, Inc.
a33 1
#include "libiberty.h"
d42 1
a42 1
  (CGEN_CPU_DESC, void *, long, unsigned int, bfd_vma, int);
d44 1
a44 1
  (CGEN_CPU_DESC, void *, bfd_vma, unsigned int, bfd_vma, int);
d46 1
a46 1
  (CGEN_CPU_DESC, void *, CGEN_KEYWORD *, long, unsigned int);
d48 2
a49 1
  (CGEN_CPU_DESC, void *, const CGEN_INSN *, CGEN_FIELDS *, bfd_vma, int);
d51 1
a51 1
  (CGEN_CPU_DESC, bfd_vma,  disassemble_info *, char *, unsigned);
d53 1
a53 1
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *);
d55 2
a56 2
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *, char *, int, CGEN_EXTRACT_INFO *,
   unsigned long *);
a101 2
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  char *x;
d113 1
a113 2
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
a116 1
  buf += (big_p ? 0 : 2);
d121 1
a122 1
  buf += (big_p ? 2 : -2);
d124 1
a124 2
  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
d128 1
a128 1
      *x &= 0x7f;
a236 3
    case M32R_OPERAND_UIMM3 :
      print_normal (cd, info, fields->f_uimm3, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
      break;
a242 3
    case M32R_OPERAND_UIMM8 :
      print_normal (cd, info, fields->f_uimm8, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
      break;
d275 7
a281 6
print_normal (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	      void *dis_info,
	      long value,
	      unsigned int attrs,
	      bfd_vma pc ATTRIBUTE_UNUSED,
	      int length ATTRIBUTE_UNUSED)
d301 7
a307 6
print_address (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       bfd_vma value,
	       unsigned int attrs,
	       bfd_vma pc ATTRIBUTE_UNUSED,
	       int length ATTRIBUTE_UNUSED)
d331 6
a336 5
print_keyword (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       CGEN_KEYWORD *keyword_table,
	       long value,
	       unsigned int attrs ATTRIBUTE_UNUSED)
d350 1
a350 1
   DIS_INFO is defined as `void *' so the disassembler needn't know anything
d354 7
a360 6
print_insn_normal (CGEN_CPU_DESC cd,
		   void *dis_info,
		   const CGEN_INSN *insn,
		   CGEN_FIELDS *fields,
		   bfd_vma pc,
		   int length)
d392 8
a399 7
read_insn (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	   bfd_vma pc,
	   disassemble_info *info,
	   char *buf,
	   int buflen,
	   CGEN_EXTRACT_INFO *ex_info,
	   unsigned long *insn_value)
d423 6
a428 5
print_insn (CGEN_CPU_DESC cd,
	    bfd_vma pc,
	    disassemble_info *info,
	    char *buf,
	    unsigned int buflen)
d533 4
a536 1
default_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)
d575 3
a577 1
print_insn_m32r (bfd_vma pc, disassemble_info *info)
@


1.16.14.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d7 1
a7 2
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002
Free Software Foundation, Inc.
a33 1
#include "libiberty.h"
@


1.16.14.2
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d44 1
a44 1
  (CGEN_CPU_DESC, void *, long, unsigned int, bfd_vma, int);
d46 1
a46 1
  (CGEN_CPU_DESC, void *, bfd_vma, unsigned int, bfd_vma, int);
d48 1
a48 1
  (CGEN_CPU_DESC, void *, CGEN_KEYWORD *, long, unsigned int);
d50 2
a51 1
  (CGEN_CPU_DESC, void *, const CGEN_INSN *, CGEN_FIELDS *, bfd_vma, int);
d53 1
a53 1
  (CGEN_CPU_DESC, bfd_vma,  disassemble_info *, char *, unsigned);
d55 1
a55 1
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *);
d57 2
a58 2
  (CGEN_CPU_DESC, bfd_vma, disassemble_info *, char *, int, CGEN_EXTRACT_INFO *,
   unsigned long *);
d277 7
a283 6
print_normal (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	      void *dis_info,
	      long value,
	      unsigned int attrs,
	      bfd_vma pc ATTRIBUTE_UNUSED,
	      int length ATTRIBUTE_UNUSED)
d303 7
a309 6
print_address (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       bfd_vma value,
	       unsigned int attrs,
	       bfd_vma pc ATTRIBUTE_UNUSED,
	       int length ATTRIBUTE_UNUSED)
d333 6
a338 5
print_keyword (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	       void *dis_info,
	       CGEN_KEYWORD *keyword_table,
	       long value,
	       unsigned int attrs ATTRIBUTE_UNUSED)
d352 1
a352 1
   DIS_INFO is defined as `void *' so the disassembler needn't know anything
d356 7
a362 6
print_insn_normal (CGEN_CPU_DESC cd,
		   void *dis_info,
		   const CGEN_INSN *insn,
		   CGEN_FIELDS *fields,
		   bfd_vma pc,
		   int length)
d394 8
a401 7
read_insn (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	   bfd_vma pc,
	   disassemble_info *info,
	   char *buf,
	   int buflen,
	   CGEN_EXTRACT_INFO *ex_info,
	   unsigned long *insn_value)
d425 6
a430 5
print_insn (CGEN_CPU_DESC cd,
	    bfd_vma pc,
	    disassemble_info *info,
	    char *buf,
	    unsigned int buflen)
d535 4
a538 1
default_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)
d577 3
a579 1
print_insn_m32r (bfd_vma pc, disassemble_info *info)
@


1.16.14.3
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@a102 2
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  char *x;
d114 1
a114 2
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
a117 1
  buf += (big_p ? 0 : 2);
d122 1
a123 1
  buf += (big_p ? 2 : -2);
d125 1
a125 2
  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
d129 1
a129 1
      *x &= 0x7f;
a237 3
    case M32R_OPERAND_UIMM3 :
      print_normal (cd, info, fields->f_uimm3, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
      break;
a242 3
      break;
    case M32R_OPERAND_UIMM8 :
      print_normal (cd, info, fields->f_uimm8, 0|(1<<CGEN_OPERAND_HASH_PREFIX), pc, length);
@


1.15
log
@[ include/opcode/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* cgen.h (CGEN_MAYBE_MULTI_IFLD): New structure.
	(CGEN_OPERAND): Add CGEN_MAYBE_MULTI_IFLD field.

[ opcodes/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* fr30-asm.c: Regenerate.
	* fr30-desc.c: Likewise.
	* fr30-desc.h: Likewise.
	* fr30-dis.c: Likewise.
	* fr30-ibld.c: Likewise.
	* fr30-opc.c: Likewise.
	* fr30-opc.h: Likewise.
	* m32r-asm.c: Likewise.
	* m32r-desc.c: Likewise.
	* m32r-desc.h: Likewise.
	* m32r-dis.c: Likewise.
	* m32r-ibld.c: Likewise.
	* m32r-opc.c: Likewise.
	* m32r-opc.h: Likewise.
	* m32r-opinst.c: Likewise.
	* openrisc-asm.c: Likewise.
	* openrisc-desc.c: Likewise.
	* openrisc-desc.h: Likewise.
	* openrisc-dis.c: Likewise.
	* openrisc-ibld.c: Likewise.
	* openrisc-opc.c: Likewise.
	* openrisc-opc.h: Likewise.
	* xstormy16-desc.c: Likewise.

[ cgen/ChangeLog ]

2002-01-22  Graydon Hoare  <graydon@@redhat.com>

	* desc-cpu.scm (ifld-number-cache): Add.
	(ifld-number): Add.
	(gen-maybe-multi-ifld-of-op): Add.
	(gen-maybe-multi-ifld): Add.
	(gen-multi-ifield-nodes): Add.
	(cgen-desc.c): Add call to gen-multi-ifield-nodes.
@
text
@d566 8
d579 2
d611 1
a611 1
  isa = 0;
d614 1
a614 1
  /* If we've switched cpu's, close the current table and open a new one.  */
a619 1
      m32r_cgen_cpu_close (cd);
d621 11
a631 1
    }
d652 10
@


1.15.8.1
log
@merge from trunk
@
text
@a565 8
typedef struct cpu_desc_list {
  struct cpu_desc_list *next;
  int isa;
  int mach;
  int endian;
  CGEN_CPU_DESC cd;
} cpu_desc_list;

a570 2
  static cpu_desc_list *cd_list = 0;
  cpu_desc_list *cl = 0;
d601 1
a601 1
  isa = info->insn_sets;
d604 1
a604 1
  /* If we've switched cpu's, try to find a handle we've used before */
d610 1
d612 1
a612 11
      for (cl = cd_list; cl; cl = cl->next)
	{
	  if (cl->isa == isa &&
	      cl->mach == mach &&
	      cl->endian == endian)
	    {
	      cd = cl->cd;
	      break;
	    }
	}
    } 
a632 10

      /* save this away for future reference */
      cl = xmalloc (sizeof (struct cpu_desc_list));
      cl->cd = cd;
      cl->isa = isa;
      cl->mach = mach;
      cl->endian = endian;
      cl->next = cd_list;
      cd_list = cl;

@


1.14
log
@2001-11-14  Dave Brolley  <brolley@@redhat.com>

	* m32r-dis.c: Regenerated.
	* fr30-dis.c: Regenerated.
@
text
@d78 1
a78 1
     CGEN_CPU_DESC cd;
d80 4
a83 4
     long value;
     unsigned int attrs;
     bfd_vma pc;
     int length;
d161 1
a161 2
   the handlers.
*/
@


1.13
log
@Fix compile time warnings in cgen-generated files
@
text
@d434 1
d437 4
a440 1
  insn_value = cgen_get_insn_value (cd, buf, buflen * 8);
@


1.12
log
@Fix compile time warnings
@
text
@d51 2
a52 4
     PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *, char *, int));
static void print_hash
     PARAMS ((CGEN_CPU_DESC, PTR, long, unsigned, bfd_vma, int));
static int my_print_insn
a53 2
void m32r_cgen_print_operand
     PARAMS ((CGEN_CPU_DESC, int, PTR, CGEN_FIELDS *, void const *, bfd_vma, int));
d61 2
d66 7
a72 5
#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length) \
do { \
  if (CGEN_BOOL_ATTR ((attrs), CGEN_OPERAND_HASH_PREFIX)) \
    (*info->fprintf_func) (info->stream, "#"); \
} while (0)
d78 1
a78 1
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
d80 4
a83 4
     long value ATTRIBUTE_UNUSED;
     unsigned int attrs ATTRIBUTE_UNUSED;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d89 1
a89 1
#undef CGEN_PRINT_INSN
d144 4
a276 3
#ifdef CGEN_PRINT_NORMAL
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
#else
a277 1
#endif
a280 1
#ifdef CGEN_PRINT_NORMAL
a282 4
#else
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
#endif
a302 3
#ifdef CGEN_PRINT_NORMAL
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
#else
a303 1
#endif
a306 4
#ifdef CGEN_PRINT_NORMAL
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
#else
a308 1
#endif
d391 1
d429 1
a429 1
     int buflen;
d457 1
a457 1
      /* not needed as insn shouldn't be in hash lists if not supported */
d472 2
a473 2
      if ((CGEN_INSN_BITSIZE (insn) / 8) < buflen
	  && (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
d488 2
a489 2
	  if ((unsigned) CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize
	      && ((unsigned) CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
d527 1
a527 3

static int default_print_insn
     PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *));
a557 1
#endif
@


1.11
log
@        * cgen-ibld.in (extract_normal): Match type of VALUE and MASK
        to *VALUEP.  Regenerate all cgen files.
@
text
@d50 5
a54 3
static int print_insn PARAMS ((CGEN_CPU_DESC, bfd_vma,
			       disassemble_info *, char *, int));
static int default_print_insn
d56 5
d78 1
a78 1
     CGEN_CPU_DESC cd;
d80 4
a83 4
     long value;
     unsigned int attrs;
     bfd_vma pc;
     int length;
d166 1
a166 1
     void const *attrs;
d274 1
a274 1
     CGEN_CPU_DESC cd;
d282 2
a283 2
     bfd_vma pc;
     int length;
d309 1
a309 1
     CGEN_CPU_DESC cd;
d317 2
a318 2
     bfd_vma pc;
     int length;
d407 1
a407 1
     CGEN_CPU_DESC cd;
d485 2
a486 2
      if ((CGEN_INSN_BITSIZE (insn) / 8) < buflen &&
	  (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
d501 2
a502 2
	  if (CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize &&
	      (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
d540 3
a542 1
#endif
d573 1
@


1.10
log
@* m32r disasm bug fix

2001-05-04  Frank Ch. Eigler  <fche@@redhat.com>

	* m32r-dis.c, -asm.c, -ibld.c: Regenerated with disassembler fixes.

2001-05-04  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-dis.in (print_insn): Remove call to read_insn.  Instead,
	assume incoming buffer already has the base insn loaded.  Handle
	case of smaller-than-base instructions for variable-length case.
@
text
@d437 1
a437 1
  unsigned long insn_value;
d442 1
a442 1
  insn_value = bfd_get_bits (buf, buflen * 8, info->endian == BFD_ENDIAN_BIG);
d508 1
a508 1
	      (cd, insn, &ex_info, insn_value, &fields, pc);
d542 1
d545 10
a554 1
  /* Read the base part of the insn.  */
a555 1
  status = (*info->read_memory_func) (pc, buf, cd->base_insn_bitsize / 8, info);
d562 1
a562 1
  return print_insn (cd, pc, info, buf, cd->base_insn_bitsize / 8);
@


1.9
log
@  Add support for cgen machine determination.

        * cgen-dis.in (print_insn_@@arch@@): Add support for target machine
        determination via CGEN_COMPUTE_MACH.
        * fr30-desc.c: Regenerate.
        * fr30-dis.c: Regenerate.
        * fr30-opc.h: Regenerate.
        * m32r-desc.c: Regenerate.
        * m32r-dis.c: Regenerate.
        * m32r-opc.h: Regenerate.
        * m32r-opinst.c: Regenerate.
@
text
@d441 9
a449 3
  int rc = read_insn (cd, pc, info, buf, buflen, & ex_info, & insn_value);
  if (rc != 0)
    return rc;
d460 1
d475 11
a485 1
      if ((insn_value & CGEN_INSN_BASE_MASK (insn))
@


1.8
log
@Fix typos in ChangeLogs; fix dates in copyright notices
@
text
@d566 2
a567 2
      
  /* There's no standard way to compute the isa number (e.g. for arm thumb)
d569 6
a579 2

  mach = info->mach;
@


1.7
log
@2001-03-05  Dave Brolley  <brolley@@redhat.co

        * opcodes/fr30-asm.c: Regenerate.
        * opcodes/fr30-desc.c: Regenerate.
        * opcodes/fr30-desc.h: Regenerate.
        * opcodes/fr30-dis.c: Regenerate.
        * opcodes/fr30-ibld.c: Regenerate.
        * opcodes/fr30-opc.c: Regenerate.
        * opcodes/fr30-opc.h: Regenerate.
        * opcodes/m32r-asm.c: Regenerate.
        * opcodes/m32r-desc.c: Regenerate.
        * opcodes/m32r-desc.h: Regenerate.
        * opcodes/m32r-dis.c: Regenerate.
        * opcodes/m32r-ibld.c: Regenerate.
        * opcodes/m32r-opc.c: Regenerate.
        * opcodes/m32r-opc.h: Regenerate.
        * opcodes/m32r-opinst.c: Regenerate.
@
text
@d7 1
a7 1
Copyright (C) 1996, 1997, 1998, 1999, 2001 Free Software Foundation, Inc.
@


1.6
log
@Prevent re-read of instruction from wrong address.
@
text
@d7 1
a7 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d71 1
a71 1
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
d73 4
a76 4
     long value ATTRIBUTE_UNUSED;
     unsigned int attrs ATTRIBUTE_UNUSED;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d159 1
a159 1
     void const *attrs ATTRIBUTE_UNUSED;
d266 3
d270 1
d274 4
d280 1
d301 3
d305 1
d309 4
d315 1
d372 1
a372 1
  const unsigned char *syn;
d400 1
a400 1
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
d419 1
a419 15
  switch (buflen)
    {
    case 1:
      *insn_value = buf[0];
      break;
    case 2:
      *insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb16 (buf) : bfd_getl16 (buf);
      break;
    case 4:
      *insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb32 (buf) : bfd_getl32 (buf);
      break;
    default:
      abort ();
    }

d440 1
a440 1
#if 0
a443 4
#else
  ex_info.dis_info = info;
  ex_info.valid = (1 << buflen) - 1;
  ex_info.insn_bytes = buf;
a444 15
  switch (buflen)
    {
    case 1:
      insn_value = buf[0];
      break;
    case 2:
      insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb16 (buf) : bfd_getl16 (buf);
      break;
    case 4:
      insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb32 (buf) : bfd_getl32 (buf);
      break;
    default:
      abort ();
    }
#endif
d477 2
a478 2
	  if ((unsigned) CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize &&
	      (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
d492 1
d516 1
a537 1
#endif
@


1.6.2.1
log
@Update copyright notices.
@
text
@d7 1
a7 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
@


1.5
log
@2000-08-28  Dave Brolley  <brolley@@redhat.com>

	* cgen-ibld.in (cgen_put_insn_int_value): New function.
	(insert_normal): Allow for non-zero word_offset with CGEN_INT_INSN_P.
	(insert_insn_normal): Use cgen_put_insn_int_value with CGEN_INT_INSN_P.
	(extract_normal): Allow for non-zero word_offset with CGEN_INT_INSN_P.
	* cgen-dis.in (read_insn): New static function.
	(print_insn): Use read_insn to read the insn into the buffer and set
	up for disassembly.
	(print_insn): in CGEN_INT_INSN_P, make sure that the entire insn is
	in the buffer.
	* fr30-asm.c: Regenerated.
	* fr30-desc.c: Regenerated.
	* fr30-desc.h Regenerated.
	* fr30-dis.c: Regenerated.
	* fr30-ibld.c: Regenerated.
	* fr30-opc.c: Regenerated.
	* fr30-opc.h Regenerated.
	* m32r-asm.c: Regenerated.
	* m32r-desc.c: Regenerated.
	* m32r-desc.h Regenerated.
	* m32r-dis.c: Regenerated.
	* m32r-ibld.c: Regenerated.
	* m32r-opc.c: Regenerated.
@
text
@d71 1
a71 1
     CGEN_CPU_DESC cd;
d73 4
a76 4
     long value;
     unsigned int attrs;
     bfd_vma pc;
     int length;
d159 1
a159 1
     void const *attrs;
a265 3
#ifdef CGEN_PRINT_NORMAL
     CGEN_CPU_DESC cd;
#else
a266 1
#endif
a269 4
#ifdef CGEN_PRINT_NORMAL
     bfd_vma pc;
     int length;
#else
a271 1
#endif
a291 3
#ifdef CGEN_PRINT_NORMAL
     CGEN_CPU_DESC cd;
#else
a292 1
#endif
a295 4
#ifdef CGEN_PRINT_NORMAL
     bfd_vma pc;
     int length;
#else
a297 1
#endif
d382 1
a382 1
     CGEN_CPU_DESC cd;
d436 1
a436 1

d440 4
d445 15
d490 4
a493 3
#if CGEN_INT_INSN_P
	  /* Make sure the entire insn is loaded into insn_value.  */
	  if (CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize)
d505 2
a506 4
#endif

	  length = CGEN_EXTRACT_FN (cd, insn)
	    (cd, insn, &ex_info, insn_value, &fields, pc);
a529 1
#endif
d551 1
@


1.4
log
@2000-02-23  Andrew Haley  <aph@@cygnus.com>

        * m32r-asm.c, m32r-desc.c, m32r-desc.h, m32r-dis.c,
        m32r-ibld.c,m32r-opc.h: Rebuild.
@
text
@d266 1
d268 3
d274 1
d277 4
d301 1
d303 3
d309 1
d312 4
d340 1
a340 1
     CGEN_CPU_DESC cd;
d344 1
a344 1
     unsigned int attrs;
d395 3
a397 6
/* Utility to print an insn.
   BUF is the base part of the insn, target byte order, BUFLEN bytes long.
   The result is the size of the insn in bytes or zero for an unknown insn
   or -1 if an error occurs fetching data (memory_error_func will have
   been called).  */

d399 1
a399 1
print_insn (cd, pc, info, buf, buflen)
d405 2
d408 6
a413 3
  unsigned long insn_value;
  const CGEN_INSN_LIST *insn_list;
  CGEN_EXTRACT_INFO ex_info;
d415 3
a417 3
  ex_info.dis_info = info;
  ex_info.valid = (1 << (cd->base_insn_bitsize / 8)) - 1;
  ex_info.insn_bytes = buf;
d422 1
a422 1
      insn_value = buf[0];
d425 1
a425 1
      insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb16 (buf) : bfd_getl16 (buf);
d428 1
a428 1
      insn_value = info->endian == BFD_ENDIAN_BIG ? bfd_getb32 (buf) : bfd_getl32 (buf);
d434 25
d489 16
d563 3
a565 1
  static prev_isa,prev_mach,prev_endian;
@


1.3
log
@	* fr30-asm.c,fr30-desc.h: Rebuild.
	* m32r-asm.c,m32r-desc.c,m32r-desc.h: Rebuild.  Add m32rx support.
	* m32r-dis.c,m32r-ibld.c,m32r-opc.c,m32r-opc.h,m32r-opinst.c: Ditto.
@
text
@d424 2
a425 1
#if 0 /* not needed as insn shouldn't be in hash lists if not supported */
d428 4
a431 1
	continue;
@


1.2
log
@	* fr30-asm.c,fr30-desc.h,fr30-dis.c,fr30-ibld.c,fr30-opc.c: Rebuild.
	* m32r-asm.c,m32r-desc.h,m32r-dis.c,m32r-ibld.c,m32r-opc.c: Rebuild.
	* m32r-opinst.c: Rebuild.
@
text
@d167 9
d196 3
@


1.1
log
@Initial revision
@
text
@d183 1
a183 1
      print_hash (cd, info, fields->f_nil, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

