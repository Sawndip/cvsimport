head	1.20;
access;
symbols
	binutils-2_24-branch:1.20.0.4
	binutils-2_24-branchpoint:1.20
	binutils-2_21_1:1.19
	binutils-2_23_2:1.20
	binutils-2_23_1:1.20
	binutils-2_23:1.20
	binutils-2_23-branch:1.20.0.2
	binutils-2_23-branchpoint:1.20
	binutils-2_22_branch:1.19.0.6
	binutils-2_22:1.19
	binutils-2_22-branch:1.19.0.4
	binutils-2_22-branchpoint:1.19
	binutils-2_21:1.19
	binutils-2_21-branch:1.19.0.2
	binutils-2_21-branchpoint:1.19
	binutils-2_20_1:1.18.2.1
	binutils-2_20:1.18.2.1
	binutils-arc-20081103-branch:1.17.0.10
	binutils-arc-20081103-branchpoint:1.17
	binutils-2_20-branch:1.18.0.2
	binutils-2_20-branchpoint:1.18
	dje-cgen-play1-branch:1.17.0.8
	dje-cgen-play1-branchpoint:1.17
	arc-20081103-branch:1.17.0.6
	arc-20081103-branchpoint:1.17
	binutils-2_19_1:1.17
	binutils-2_19:1.17
	binutils-2_19-branch:1.17.0.4
	binutils-2_19-branchpoint:1.17
	binutils-2_18:1.17
	binutils-2_18-branch:1.17.0.2
	binutils-2_18-branchpoint:1.17
	binutils-csl-coldfire-4_1-32:1.15
	binutils-csl-sourcerygxx-4_1-32:1.15
	binutils-csl-innovasic-fido-3_4_4-33:1.15
	binutils-csl-sourcerygxx-3_4_4-32:1.11
	binutils-csl-coldfire-4_1-30:1.15
	binutils-csl-sourcerygxx-4_1-30:1.15
	binutils-csl-coldfire-4_1-28:1.15
	binutils-csl-sourcerygxx-4_1-29:1.15
	binutils-csl-sourcerygxx-4_1-28:1.15
	binutils-csl-arm-2006q3-27:1.15
	binutils-csl-sourcerygxx-4_1-27:1.15
	binutils-csl-arm-2006q3-26:1.15
	binutils-csl-sourcerygxx-4_1-26:1.15
	binutils-csl-sourcerygxx-4_1-25:1.15
	binutils-csl-sourcerygxx-4_1-24:1.15
	binutils-csl-sourcerygxx-4_1-23:1.15
	binutils-csl-sourcerygxx-4_1-21:1.15
	binutils-csl-arm-2006q3-21:1.15
	binutils-csl-sourcerygxx-4_1-22:1.15
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.15
	binutils-csl-sourcerygxx-4_1-20:1.15
	binutils-csl-arm-2006q3-19:1.15
	binutils-csl-sourcerygxx-4_1-19:1.15
	binutils-csl-sourcerygxx-4_1-18:1.15
	binutils-csl-renesas-4_1-9:1.15
	binutils-csl-sourcerygxx-3_4_4-25:1.11
	binutils-csl-renesas-4_1-8:1.15
	binutils-csl-renesas-4_1-7:1.15
	binutils-csl-renesas-4_1-6:1.15
	binutils-csl-sourcerygxx-4_1-17:1.15
	binutils-csl-sourcerygxx-4_1-14:1.15
	binutils-csl-sourcerygxx-4_1-15:1.15
	binutils-csl-sourcerygxx-4_1-13:1.15
	binutils-2_17:1.15
	binutils-csl-sourcerygxx-4_1-12:1.15
	binutils-csl-sourcerygxx-3_4_4-21:1.15
	binutils-csl-wrs-linux-3_4_4-24:1.11
	binutils-csl-wrs-linux-3_4_4-23:1.11
	binutils-csl-sourcerygxx-4_1-9:1.15
	binutils-csl-sourcerygxx-4_1-8:1.15
	binutils-csl-sourcerygxx-4_1-7:1.15
	binutils-csl-arm-2006q1-6:1.15
	binutils-csl-sourcerygxx-4_1-6:1.15
	binutils-csl-wrs-linux-3_4_4-22:1.11
	binutils-csl-coldfire-4_1-11:1.15
	binutils-csl-sourcerygxx-3_4_4-19:1.15
	binutils-csl-coldfire-4_1-10:1.15
	binutils-csl-sourcerygxx-4_1-5:1.15
	binutils-csl-sourcerygxx-4_1-4:1.15
	binutils-csl-wrs-linux-3_4_4-21:1.11
	binutils-csl-morpho-4_1-4:1.15
	binutils-csl-sourcerygxx-3_4_4-17:1.15
	binutils-csl-wrs-linux-3_4_4-20:1.11
	binutils-2_17-branch:1.15.0.4
	binutils-2_17-branchpoint:1.15
	binutils-csl-2_17-branch:1.15.0.2
	binutils-csl-2_17-branchpoint:1.15
	binutils-csl-gxxpro-3_4-branch:1.11.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.11
	binutils-2_16_1:1.11
	binutils-csl-arm-2005q1b:1.11
	binutils-2_16:1.11
	binutils-csl-arm-2005q1a:1.11
	binutils-csl-arm-2005q1-branch:1.11.0.4
	binutils-csl-arm-2005q1-branchpoint:1.11
	binutils-2_16-branch:1.11.0.2
	binutils-2_16-branchpoint:1.11
	csl-arm-2004-q3d:1.10
	csl-arm-2004-q3:1.10
	binutils-2_15:1.9
	binutils-2_15-branchpoint:1.9
	csl-arm-2004-q1a:1.9
	csl-arm-2004-q1:1.9
	binutils-2_15-branch:1.9.0.6
	cagney_bfdfile-20040213-branch:1.9.0.4
	cagney_bfdfile-20040213-branchpoint:1.9
	cagney_bigcore-20040122-branch:1.9.0.2
	cagney_bigcore-20040122-branchpoint:1.9
	csl-arm-2003-q4:1.9
	binutils-2_14:1.7
	binutils-2_14-branch:1.7.0.2
	binutils-2_14-branchpoint:1.7
	binutils-2_13_2_1:1.6
	binutils-2_13_2:1.6
	binutils-2_13_1:1.6
	binutils-2_13:1.6
	binutils-2_13-branchpoint:1.6
	binutils-2_13-branch:1.6.0.2
	binutils-2_12_1:1.5
	binutils-2_12:1.5
	binutils-2_12-branch:1.5.0.2
	binutils-2_12-branchpoint:1.5
	cygnus_cvs_20020108_pre:1.5
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.20
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2012.06.07.12.47.23;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.11.15.27.33;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.02.07.24.19;	author amodra;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2007.07.03.11.01.03;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.07.11.27.57;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.06.06.50.29;	author jbeulich;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.05.09.12.46;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.03.12.02.46;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.25.06.43.45;	author jbeulich;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.03.01.29.53;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.13.19.53.51;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.24.17.52.33;	author kazu;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.27.12.45.17;	author kazu;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.02.15.42.08;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.18.12.53.30;	author kazu;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.08.23.24.22;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.07.01.18.45;	author kazu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.09.12.20.57.14;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.26.14.47.33;	author twall;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.41;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.18.2.1
date	2009.09.11.15.28.43;	author nickc;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.07.03.15.25;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.41;	author rth;	state Exp;
branches;
next	;


desc
@@


1.20
log
@	PR gas/14201
	* sb.h (sb_max_power_two): Delete.
	(struct sb): Delete "item" and "pot".  Make "len" a size_t.  Add "max".
	(sb_element): Delete.
	(sb_add_char, sb_add_buffer, sb_skip_comma, sb_skip_write): Update
	prototypes.
	* sb.c (string_count, free_list): Delete.
	(sb_build, sb_kill, sb_check): Rewrite.
	(scrub_from_sb, sb_add_char, sb_add_string, sb_add_buffer,
	sb_skip_white, sb_skip_comma): Replace assorted int params,
	vars and return types with size_t.
	* input-scrub.c: Likewise.
	* macro.c: Likewise.
	* macro.h: Likewise.
	* as.c: Likewise.
	* as.h: Likewise.
	* input-file.h: Likewise.
	* input-file.c: Likewise.
	* read.c: Likewise.
	* app.c: ..or ptrdiff_t.
	* input-file.c (input_file_get): Use ferror.
	(input_file_give_next_buffer): Use input_file_get.
@
text
@/* macro.h - header file for macro support for gas
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003, 2004, 2005, 2006,
   2007, 2012 Free Software Foundation, Inc.

   Written by Steve and Judy Chamberlain of Cygnus Support,
      sac@@cygnus.com

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#ifndef MACRO_H

#define MACRO_H

/* Structures used to store macros.

   Each macro knows its name and included text.  It gets built with a
   list of formal arguments, and also keeps a hash table which points
   into the list to speed up formal search.  Each formal knows its
   name and its default value.  Each time the macro is expanded, the
   formals get the actual values attached to them.  */

enum formal_type
  {
    FORMAL_OPTIONAL,
    FORMAL_REQUIRED,
    FORMAL_VARARG
  };

/* Describe the formal arguments to a macro.  */

typedef struct formal_struct {
  struct formal_struct *next;	/* Next formal in list.  */
  sb name;			/* Name of the formal.  */
  sb def;			/* The default value.  */
  sb actual;			/* The actual argument (changed on each expansion).  */
  int index;			/* The index of the formal 0..formal_count - 1.  */
  enum formal_type type;	/* The kind of the formal.  */
} formal_entry;

/* Other values found in the index field of a formal_entry.  */
#define QUAL_INDEX (-1)
#define NARG_INDEX (-2)
#define LOCAL_INDEX (-3)

/* Describe the macro.  */

typedef struct macro_struct
{
  sb sub;				/* Substitution text.  */
  int formal_count;			/* Number of formal args.  */
  formal_entry *formals;		/* Pointer to list of formal_structs.  */
  struct hash_control *formal_hash;	/* Hash table of formals.  */
  const char *name;			/* Macro name.  */
  char *file;				/* File the macro was defined in.  */
  unsigned int line;			/* Line number of definition.  */
} macro_entry;

/* Whether any macros have been defined.  */

extern int macro_defined;

/* The macro nesting level.  */

extern int macro_nest;

/* The macro hash table.  */

extern struct hash_control *macro_hash;

extern int buffer_and_nest (const char *, const char *, sb *,
			    size_t (*) (sb *));
extern void macro_init (int, int, int,
			size_t (*) (const char *, size_t, sb *, offsetT *));
extern void macro_set_alternate (int);
extern void macro_mri_mode (int);
extern const char *define_macro (size_t, sb *, sb *, size_t (*) (sb *),
				 char *, unsigned int, const char **);
extern int check_macro (const char *, sb *, const char **, macro_entry **);
extern void delete_macro (const char *);
extern const char *expand_irp (int, size_t, sb *, sb *, size_t (*) (sb *));

#endif
@


1.19
log
@        * po/bfd.pot: Updated by the Translation project.
        * po/binutils.pot: Updated by the Translation project.
        * po/gold.pot: Updated by the Translation project.
        * po/gold.pot: Updated by the Translation project.
        * po/gprof.pot: Updated by the Translation project.
        * po/sv.po: Updated Swedish translation.
        * po/ld.pot: Updated by the Translation project.
        * po/fi.po: Updated Finnish translation.
        * po/ld.pot: Updated by the Translation project.
        * po/fi.po: Updated Finnish translation.

        Updated sources to compile cleanly with -Wc++-compat:
        * basic_blocks.c: Add casts.
        * cg_dfn.c: Add cast.
        * corefile.c: Add casts.
        * gmon_io.c: Add casts.
        * hist.c: Add cast.
        * source.c: Add cast.
        * sym_ids.c (struct match): Moved to top level.

        Updated soruces in ld/* to compile cleanly with -Wc++-compat:
        * ld.h (enum endian_enum,enum symbolic_enum,enum dynamic_list_enum): Move to top level.
        * ldcref.c: Add casts.
        * ldctor.c: Add casts.
        * ldexp.c
        * ldexp.h (enum node_tree_enum,enum phase_enum): Move to top level.
        * ldlang.c: Add casts. (lang_insert_orphan): Use enum name instead of integer.
        * ldlang.h (enum statement_enum): Move to top level.
        * ldmain.c: Add casts.
        * ldwrite.c: Add casts.
        * lexsup.c: Add casts. (enum control_enum): Move to top level.
        * mri.c: Add casts. (mri_draw_tree): Use enum name instead of integer.

        Updated sources to compile cleanly with -Wc++-compat:
        * basic_blocks.c: Add casts.
        * cg_dfn.c: Add cast.
        * corefile.c: Add casts.
        * gmon_io.c: Add casts.
        * hist.c: Add cast.
        * source.c: Add cast.
        * sym_ids.c (struct match): Moved to top level.

        * as.c (main): Call dwarf2_init.
        * config/obj-elf.c (struct group_list): New field.
        (build_group_lists): Use hash lookup.
        (free_section_idx): New function.
        (elf_frob_file): Adjust.
        * dwarf2dbg.c (all_segs_hash, last_seg_ptr): New variables.
        (get_line_subseg): Adjust.
        (dwarf2_init): New function.
        * dwarf2dbg.h (dwarf2_init): New declaration.
@
text
@d3 1
a3 1
   2007 Free Software Foundation, Inc.
d85 4
a88 3
extern int buffer_and_nest (const char *, const char *, sb *, int (*) (sb *));
extern void macro_init
  (int, int, int, int (*) (const char *, int, sb *, int *));
d91 2
a92 2
extern const char *define_macro
  (int, sb *, sb *, int (*) (sb *), char *, unsigned int, const char **);
d95 1
a95 1
extern const char *expand_irp (int, int, sb *, sb *, int (*) (sb *));
@


1.18
log
@update copyright dates
@
text
@d37 7
d52 1
a52 6
  enum formal_type
    {
      FORMAL_OPTIONAL,
      FORMAL_REQUIRED,
      FORMAL_VARARG
    } type;			/* The kind of the formal.  */
@


1.18.2.1
log
@        * po/bfd.pot: Updated by the Translation project.
        * po/binutils.pot: Updated by the Translation project.
        * po/gold.pot: Updated by the Translation project.
        * po/gold.pot: Updated by the Translation project.
        * po/gprof.pot: Updated by the Translation project.
        * po/sv.po: Updated Swedish translation.
        * po/ld.pot: Updated by the Translation project.
        * po/fi.po: Updated Finnish translation.
        * po/ld.pot: Updated by the Translation project.
        * po/fi.po: Updated Finnish translation.

        Updated sources to compile cleanly with -Wc++-compat:
        * basic_blocks.c: Add casts.
        * cg_dfn.c: Add cast.
        * corefile.c: Add casts.
        * gmon_io.c: Add casts.
        * hist.c: Add cast.
        * source.c: Add cast.
        * sym_ids.c (struct match): Moved to top level.

        Updated soruces in ld/* to compile cleanly with -Wc++-compat:
        * ld.h (enum endian_enum,enum symbolic_enum,enum dynamic_list_enum): Move to top level.
        * ldcref.c: Add casts.
        * ldctor.c: Add casts.
        * ldexp.c
        * ldexp.h (enum node_tree_enum,enum phase_enum): Move to top level.
        * ldlang.c: Add casts. (lang_insert_orphan): Use enum name instead of integer.
        * ldlang.h (enum statement_enum): Move to top level.
        * ldmain.c: Add casts.
        * ldwrite.c: Add casts.
        * lexsup.c: Add casts. (enum control_enum): Move to top level.
        * mri.c: Add casts. (mri_draw_tree): Use enum name instead of integer.

        Updated sources to compile cleanly with -Wc++-compat:
        * basic_blocks.c: Add casts.
        * cg_dfn.c: Add cast.
        * corefile.c: Add casts.
        * gmon_io.c: Add casts.
        * hist.c: Add cast.
        * source.c: Add cast.
        * sym_ids.c (struct match): Moved to top level.
@
text
@a36 7
enum formal_type
  {
    FORMAL_OPTIONAL,
    FORMAL_REQUIRED,
    FORMAL_VARARG
  };

d45 6
a50 1
  enum formal_type type;	/* The kind of the formal.  */
@


1.17
log
@Switch to GPLv3
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003, 2004, 2006,
@


1.16
log
@remove some duplicate #include's.
@
text
@d2 2
a3 2
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003, 2004, 2006
   Free Software Foundation, Inc.
d12 1
a12 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.15
log
@gas/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* macro.c (new_formal, del_formal): New.
	(do_formals): Use new_formal. Check for and parse qualifier. Warn if
	required argument has default value. Stop looking for more formal
	when there was a vararg one.
	(macro_expand_body): Use new_formal and del_formal.
	(macro_expand): Likewise. Initialize local variable err. Don't
	return immediately when encountering an error. Warn when keyword
	argument already had a value assigned. Eliminate duplicate clearing
	of argument value. When current positional argument matches parameter
	of vararg type, assign to it all the remaining arguments. Issue error
	when required parameter does not have value.
	(free_macro): Use del_formal.
	(expand_irp): Initialize formal type. Free buffers associated with
	formal prior to returning.
	* macro.h (struct formal_struct): Add new field 'type' with new
	enumeration type 'formal_type'.
	* doc/as.texinfo: Document macro parameter qualifiers.
	* NEWS: Mention new functionality.

gas/testsuite/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* gas/macros/badarg.s: Add check for bad qualifier specification.
	* gas/macros/badarg.l: Adjust.
	* gas/macros/vararg.[sd]: New.
	* gas/macros/macros.exp: Run new test.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003, 2004
a28 3
#include "ansidecl.h"
#include "sb.h"

@


1.14
log
@Update the address and phone number of the FSF
@
text
@d48 6
@


1.13
log
@* config/obj-ecoff.c (ecoff_frob_file_before_fix): Fix invocations of bfd_section_list... macros.
* config/tc-mmix.c (mmix_frob_file): Likewise.
* config/tc-xtensa.c (xtensa_remove_section): Likewise.
	(xtensa_insert_section): Likewise.

* macro.c (macro_hash): Remove static.
* macro.h (macro_hash): Provide an external declaration.
@
text
@d22 2
a23 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.12
log
@gas/
2005-04-25  Jan Beulich  <jbeulich@@novell.com>

	* macro.c (macro_expand_body): Replace locals indicator parameters
	with actual macro_entry. New local variables macro_line and err.
	Don't return when encountering an error, just record the fact.
	Detect local symbol name colliding with parameter. Track line number
	inside of macro expansion.
	(do_formals): Move local variable name to wider scope. Check
	parameter of the same name doesn't already exist. In MRI mode, also
	check it doesn't collide with the argument count pseudo-parameter).
	(define_macro): Add file and line number parameters. Remove local
	variable namestr. New local variable error. Initialize macro_entry
	members file, line, and name. Don't return when encountering an
	error, just record the fact. Use %s in some diagnostics for read.c
	to insert the macro name. Free macro_entry on error.
	(macro_expand): Pass macro_entry to macro_epand_body. Don't return
	when encountering an error, just record the fact.
	(expand_irp): Don't return when encountering an error, just record
	the fact.
	* macro.h (macro_struct): New members name, file, and line.
	(define_macro): Add file and line number parameters.
	* read.c (s_macro): Pass file and line to define_macro. Tag warning
	regarding pseudo-op redefinition with the file/line that macro
	definition started at.

gas/testsuite/
2005-04-25  Jan Beulich  <jbeulich@@novell.com>

	* gas/macros/badarg.s: Add tests for collisions between/among macro
	parameters and local symbols.
	* gas/macros/badarg.l: Adjust.
@
text
@d76 4
@


1.11
log
@update copyright dates
@
text
@d63 3
d82 1
a82 1
  (int, sb *, sb *, int (*) (sb *), const char **);
@


1.10
log
@Add and handle new --alternate command line option.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2002
@


1.9
log
@	* listing.c: Convert to ISO-C.
	* listing.h: Likewise.
	* macro.c: Likewise.
	* macro.h: Likewise.
@
text
@d76 1
@


1.8
log
@	* ChangeLog: Fix typos.
	* ChangeLog-9295: Likewise.
	* as.c: Fix comment typos.
	* as.h: Likewise.
	* atof-generic.c: Likewise.
	* bit_fix.h: Likewise.
	* frags.h: Likewise.
	* hash.c: Likewise.
	* input-file.c: Likewise.
	* input-scrub.c: Likewise.
	* itbl-ops.c: Likewise.
	* itbl-parse.y: Likewise.
	* listing.c: Likewise.
	* macro.h: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* sb.h: Likewise.
	* symbols.c: Likewise.
	* symbols.h: Likewise.
@
text
@d73 1
a73 2
extern int buffer_and_nest
  PARAMS ((const char *, const char *, sb *, int (*) PARAMS ((sb *))));
d75 2
a76 3
  PARAMS ((int, int, int, int (*) PARAMS ((const char *, int, sb *, int *))));
extern void macro_mri_mode
  PARAMS ((int));
d78 4
a81 7
  PARAMS ((int, sb *, sb *, int (*) PARAMS ((sb *)), const char **));
extern int check_macro
  PARAMS ((const char *, sb *, const char **, macro_entry **));
extern void delete_macro
  PARAMS ((const char *));
extern const char *expand_irp
  PARAMS ((int, int, sb *, sb *, int (*) PARAMS ((sb *))));
@


1.7
log
@Remove GASP.
@
text
@d38 1
a38 1
   formals get the actual values attatched to them.  */
@


1.6
log
@	* app.c: Fix formatting.
	* as.c: Likewise.
	* ehopt.c: Likewise.
	* expr.c: Likewise.
	* input-file.c: Likewise.
	* listing.c: Likewise.
	* macro.h: Likewise.
	* stabs.c: Likewise.
	* symbols.c: Likewise.
@
text
@d1 2
a2 2
/* macro.h - header file for macro support for gas and gasp
   Copyright 1994, 1995, 1996, 1997, 1998, 2000
d40 1
a40 1
/* describe the formal arguments to a macro */
d43 5
a47 5
  struct formal_struct *next;	/* next formal in list */
  sb name;			/* name of the formal */
  sb def;			/* the default value */
  sb actual;			/* the actual argument (changed on each expansion) */
  int index;			/* the index of the formal 0..formal_count-1 */
d55 1
a55 1
/* describe the macro.  */
d57 6
a62 5
typedef struct macro_struct {
  sb sub;			/* substitution text.  */
  int formal_count;		/* number of formal args.  */
  formal_entry *formals;	/* pointer to list of formal_structs */
  struct hash_control *formal_hash; /* hash table of formals.  */
d76 3
a78 3
  PARAMS ((int alternate, int mri, int strip_at,
	   int (*) PARAMS ((const char *, int, sb *, int *))));
extern void macro_mri_mode PARAMS ((int));
d80 5
a84 5
  PARAMS ((int idx, sb *in, sb *label, int (*get_line) PARAMS ((sb *)),
	   const char **namep));
extern int check_macro PARAMS ((const char *, sb *, int, const char **,
				macro_entry **));
extern void delete_macro PARAMS ((const char *));
d86 1
a86 1
  PARAMS ((int, int, sb *, sb *, int (*) PARAMS ((sb *)), int));
@


1.5
log
@Fix copyright notices
@
text
@d82 1
a82 1
                                macro_entry **));
@


1.4
log
@2000-11-06  Kazu Hirata  <kazu@@hxi.com>

	* as.c: Fix formatting.
	* dwarf2dbg.c: Likewise.
	* itbl-ops.c: Likewise.
	* listing.c: Likewise.
	* macro.h: Likewise.
	* messages.c: Likewise.
	* read.c: Likewise.
	* subsegs.c: Likewise.
	* subsegs.h: Likewise.
	* write.c: Likewise.
@
text
@d2 2
a3 1
   Copyright (C) 1994, 95, 96, 97, 98, 2000 Free Software Foundation, Inc.
@


1.4.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1994, 1995, 1996, 1997, 1998, 2000
   Free Software Foundation, Inc.
@


1.3
log
@2000-09-12  Kazu Hirata  <kazu@@hxi.com>

	* as.h: Fix formatting.
	* asintl.h: Likewise.
	* bit_fix.h: Likewise.
	* dwarf2dbg.h: Likewise.
	* expr.h: Likewise.
	* flonum.h: Likewise.
	* frags.h: Likewise.
	* itbl-ops.h: Likewise.
	* macro.h: Likewise.
	* read.h: Likewise.
	* sb.h: Likewise.
	* struc-symbol.h: Likewise.
	* subsegs.h: Likewise.
	* symbols.h: Likewise.
	* tc.h: Likewise.
	* write.h: Likewise.
@
text
@d41 7
a47 9
typedef struct formal_struct
  {
    struct formal_struct *next;	/* next formal in list */
    sb name;			/* name of the formal */
    sb def;			/* the default value */
    sb actual;			/* the actual argument (changed on each expansion) */
    int index;			/* the index of the formal 0..formal_count-1 */
  }
formal_entry;
d56 6
a61 8
typedef struct macro_struct
  {
    sb sub;			/* substitution text.  */
    int formal_count;		/* number of formal args.  */
    formal_entry *formals;	/* pointer to list of formal_structs */
    struct hash_control *formal_hash; /* hash table of formals.  */
  }
macro_entry;
@


1.2
log
@Add macro handling extensions and line substitution support.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 95, 96, 97, 1998 Free Software Foundation, Inc.
d22 1
a22 1
   02111-1307, USA. */
d31 1
a31 1
/* Structures used to store macros. 
d37 1
a37 1
   formals get the actual values attatched to them. */
d56 1
a56 1
/* describe the macro. */
d60 2
a61 2
    sb sub;			/* substitution text. */
    int formal_count;		/* number of formal args. */
d63 1
a63 1
    struct hash_control *formal_hash; /* hash table of formals. */
d84 1
a84 1
extern int check_macro PARAMS ((const char *, sb *, int, const char **, 
@


1.1
log
@Initial revision
@
text
@d31 36
d84 2
a85 1
extern int check_macro PARAMS ((const char *, sb *, int, const char **));
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

