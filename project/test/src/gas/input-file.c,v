head	1.30;
access;
symbols
	binutils-2_24-branch:1.30.0.2
	binutils-2_24-branchpoint:1.30
	binutils-2_21_1:1.27.4.1
	binutils-2_23_2:1.29
	binutils-2_23_1:1.29
	binutils-2_23:1.29
	binutils-2_23-branch:1.29.0.2
	binutils-2_23-branchpoint:1.29
	binutils-2_22_branch:1.28.0.4
	binutils-2_22:1.28
	binutils-2_22-branch:1.28.0.2
	binutils-2_22-branchpoint:1.28
	binutils-2_21:1.27.4.1
	binutils-2_21-branch:1.27.0.4
	binutils-2_21-branchpoint:1.27
	binutils-2_20_1:1.27
	binutils-2_20:1.27
	binutils-arc-20081103-branch:1.25.0.8
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.27.0.2
	binutils-2_20-branchpoint:1.27
	dje-cgen-play1-branch:1.26.0.2
	dje-cgen-play1-branchpoint:1.26
	arc-20081103-branch:1.25.0.6
	arc-20081103-branchpoint:1.25
	binutils-2_19_1:1.25
	binutils-2_19:1.25
	binutils-2_19-branch:1.25.0.4
	binutils-2_19-branchpoint:1.25
	binutils-2_18:1.25
	binutils-2_18-branch:1.25.0.2
	binutils-2_18-branchpoint:1.25
	binutils-csl-coldfire-4_1-32:1.20
	binutils-csl-sourcerygxx-4_1-32:1.20
	binutils-csl-innovasic-fido-3_4_4-33:1.20
	binutils-csl-sourcerygxx-3_4_4-32:1.17
	binutils-csl-coldfire-4_1-30:1.20
	binutils-csl-sourcerygxx-4_1-30:1.20
	binutils-csl-coldfire-4_1-28:1.20
	binutils-csl-sourcerygxx-4_1-29:1.20
	binutils-csl-sourcerygxx-4_1-28:1.20
	binutils-csl-arm-2006q3-27:1.20
	binutils-csl-sourcerygxx-4_1-27:1.20
	binutils-csl-arm-2006q3-26:1.20
	binutils-csl-sourcerygxx-4_1-26:1.20
	binutils-csl-sourcerygxx-4_1-25:1.20
	binutils-csl-sourcerygxx-4_1-24:1.20
	binutils-csl-sourcerygxx-4_1-23:1.20
	binutils-csl-sourcerygxx-4_1-21:1.20
	binutils-csl-arm-2006q3-21:1.20
	binutils-csl-sourcerygxx-4_1-22:1.20
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.20
	binutils-csl-sourcerygxx-4_1-20:1.20
	binutils-csl-arm-2006q3-19:1.20
	binutils-csl-sourcerygxx-4_1-19:1.20
	binutils-csl-sourcerygxx-4_1-18:1.20
	binutils-csl-renesas-4_1-9:1.20
	binutils-csl-sourcerygxx-3_4_4-25:1.17
	binutils-csl-renesas-4_1-8:1.20
	binutils-csl-renesas-4_1-7:1.20
	binutils-csl-renesas-4_1-6:1.20
	binutils-csl-sourcerygxx-4_1-17:1.20
	binutils-csl-sourcerygxx-4_1-14:1.20
	binutils-csl-sourcerygxx-4_1-15:1.20
	binutils-csl-sourcerygxx-4_1-13:1.20
	binutils-2_17:1.20
	binutils-csl-sourcerygxx-4_1-12:1.20
	binutils-csl-sourcerygxx-3_4_4-21:1.20
	binutils-csl-wrs-linux-3_4_4-24:1.17
	binutils-csl-wrs-linux-3_4_4-23:1.17
	binutils-csl-sourcerygxx-4_1-9:1.20
	binutils-csl-sourcerygxx-4_1-8:1.20
	binutils-csl-sourcerygxx-4_1-7:1.20
	binutils-csl-arm-2006q1-6:1.20
	binutils-csl-sourcerygxx-4_1-6:1.20
	binutils-csl-wrs-linux-3_4_4-22:1.17
	binutils-csl-coldfire-4_1-11:1.20
	binutils-csl-sourcerygxx-3_4_4-19:1.20
	binutils-csl-coldfire-4_1-10:1.20
	binutils-csl-sourcerygxx-4_1-5:1.20
	binutils-csl-sourcerygxx-4_1-4:1.20
	binutils-csl-wrs-linux-3_4_4-21:1.17
	binutils-csl-morpho-4_1-4:1.20
	binutils-csl-sourcerygxx-3_4_4-17:1.20
	binutils-csl-wrs-linux-3_4_4-20:1.17
	binutils-2_17-branch:1.20.0.4
	binutils-2_17-branchpoint:1.20
	binutils-csl-2_17-branch:1.20.0.2
	binutils-csl-2_17-branchpoint:1.20
	binutils-csl-gxxpro-3_4-branch:1.17.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.17
	binutils-2_16_1:1.17
	binutils-csl-arm-2005q1b:1.17
	binutils-2_16:1.17
	binutils-csl-arm-2005q1a:1.17
	binutils-csl-arm-2005q1-branch:1.17.0.4
	binutils-csl-arm-2005q1-branchpoint:1.17
	binutils-2_16-branch:1.17.0.2
	binutils-2_16-branchpoint:1.17
	csl-arm-2004-q3d:1.15
	csl-arm-2004-q3:1.15
	binutils-2_15:1.15
	binutils-2_15-branchpoint:1.15
	csl-arm-2004-q1a:1.15
	csl-arm-2004-q1:1.15
	binutils-2_15-branch:1.15.0.6
	cagney_bfdfile-20040213-branch:1.15.0.4
	cagney_bfdfile-20040213-branchpoint:1.15
	cagney_bigcore-20040122-branch:1.15.0.2
	cagney_bigcore-20040122-branchpoint:1.15
	csl-arm-2003-q4:1.15
	binutils-2_14:1.10
	binutils-2_14-branch:1.10.0.4
	binutils-2_14-branchpoint:1.10
	binutils-2_13_2_1:1.10
	binutils-2_13_2:1.10
	binutils-2_13_1:1.10
	binutils-2_13:1.10
	binutils-2_13-branchpoint:1.10
	binutils-2_13-branch:1.10.0.2
	binutils-2_12_1:1.9
	binutils-2_12:1.9
	binutils-2_12-branch:1.9.0.2
	binutils-2_12-branchpoint:1.9
	cygnus_cvs_20020108_pre:1.9
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.30
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2013.01.10.19.51.54;	author hjl;	state Exp;
branches;
next	1.29;

1.29
date	2012.06.07.12.47.23;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2010.11.17.11.15.21;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.02.07.24.19;	author amodra;	state Exp;
branches
	1.27.4.1;
next	1.26;

1.26
date	2009.06.22.17.56.00;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2007.07.03.11.01.03;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2007.01.12.03.14.01;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2006.09.13.10.15.59;	author jbeulich;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.12.23.57.26;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.07.11.27.57;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.11.01.25.20;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.05.09.12.45;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.29.00.22.26;	author bje;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.03.01.29.53;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.21.03.03.02;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.19.15.23.41;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.18.18.03.08;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.24.03.37.58;	author kazu;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.07.12.19.34;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.27.12.45.17;	author kazu;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.18.12.53.30;	author kazu;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.11.07.17.47;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.26.20.32.17;	author jjohnstn;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.01.01.44.25;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.10.09.45.50;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.08.23.24.22;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.06.21.55.46;	author kazu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.09.09.20.23.15;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	99.06.03.00.24.13;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.40;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.27.4.1
date	2010.11.19.11.30.02;	author nickc;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.07.03.15.24;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.40;	author rth;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Remove trailing white spaces on gas

	* app.c: Remove trailing white spaces.
	* as.c: Likewise.
	* as.h: Likewise.
	* cond.c: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.h: Likewise.
	* ecoff.c: Likewise.
	* input-file.c: Likewise.
	* itbl-lex.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* subsegs.c: Likewise.
	* symbols.c: Likewise.
	* write.c: Likewise.
	* config/tc-i386.c: Likewise.
	* doc/Makefile.am: Likewise.
	* doc/Makefile.in: Likewise.
	* doc/c-aarch64.texi: Likewise.
	* doc/c-alpha.texi: Likewise.
	* doc/c-arc.texi: Likewise.
	* doc/c-arm.texi: Likewise.
	* doc/c-avr.texi: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/c-cr16.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-d30v.texi: Likewise.
	* doc/c-h8300.texi: Likewise.
	* doc/c-hppa.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i386.texi: Likewise.
	* doc/c-i860.texi: Likewise.
	* doc/c-m32c.texi: Likewise.
	* doc/c-m32r.texi: Likewise.
	* doc/c-m68hc11.texi: Likewise.
	* doc/c-m68k.texi: Likewise.
	* doc/c-microblaze.texi: Likewise.
	* doc/c-mips.texi: Likewise.
	* doc/c-msp430.texi: Likewise.
	* doc/c-mt.texi: Likewise.
	* doc/c-s390.texi: Likewise.
	* doc/c-score.texi: Likewise.
	* doc/c-sh.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-tic6x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-xc16x.texi: Likewise.
	* doc/c-xgate.texi: Likewise.
	* doc/c-xtensa.texi: Likewise.
	* doc/c-z80.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@/* input_file.c - Deal with Input Files -
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000, 2001,
   2002, 2003, 2005, 2006, 2007, 2009, 2012
   Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

/* Confines all details of reading source bytes to this module.
   All O/S specific crocks should live here.
   What we lose in "efficiency" we gain in modularity.
   Note we don't need to #include the "as.h" file. No common coupling!  */

#include "as.h"
#include "input-file.h"
#include "safe-ctype.h"

/* This variable is non-zero if the file currently being read should be
   preprocessed by app.  It is zero if the file can be read straight in.  */
int preprocess = 0;

/* This code opens a file, then delivers BUFFER_SIZE character
   chunks of the file on demand.
   BUFFER_SIZE is supposed to be a number chosen for speed.
   The caller only asks once what BUFFER_SIZE is, and asks before
   the nature of the input files (if any) is known.  */

#define BUFFER_SIZE (32 * 1024)

/* We use static data: the data area is not sharable.  */

static FILE *f_in;
static char *file_name;

/* Struct for saving the state of this module for file includes.  */
struct saved_file
  {
    FILE * f_in;
    char * file_name;
    int    preprocess;
    char * app_save;
  };

/* These hooks accommodate most operating systems.  */

void
input_file_begin (void)
{
  f_in = (FILE *) 0;
}

void
input_file_end (void)
{
}

/* Return BUFFER_SIZE.  */
size_t
input_file_buffer_size (void)
{
  return (BUFFER_SIZE);
}

/* Push the state of our input, returning a pointer to saved info that
   can be restored with input_file_pop ().  */

char *
input_file_push (void)
{
  register struct saved_file *saved;

  saved = (struct saved_file *) xmalloc (sizeof *saved);

  saved->f_in = f_in;
  saved->file_name = file_name;
  saved->preprocess = preprocess;
  if (preprocess)
    saved->app_save = app_push ();

  /* Initialize for new file.  */
  input_file_begin ();

  return (char *) saved;
}

void
input_file_pop (char *arg)
{
  register struct saved_file *saved = (struct saved_file *) arg;

  input_file_end ();		/* Close out old file.  */

  f_in = saved->f_in;
  file_name = saved->file_name;
  preprocess = saved->preprocess;
  if (preprocess)
    app_pop (saved->app_save);

  free (arg);
}

void
input_file_open (char *filename, /* "" means use stdin. Must not be 0.  */
		 int pre)
{
  int c;
  char buf[80];

  preprocess = pre;

  gas_assert (filename != 0);	/* Filename may not be NULL.  */
  if (filename[0])
    {
      f_in = fopen (filename, FOPEN_RT);
      file_name = filename;
    }
  else
    {
      /* Use stdin for the input file.  */
      f_in = stdin;
      /* For error messages.  */
      file_name = _("{standard input}");
    }

  if (f_in == NULL)
    {
      as_bad (_("can't open %s for reading: %s"),
	      file_name, xstrerror (errno));
      return;
    }

  c = getc (f_in);

  if (ferror (f_in))
    {
      as_bad (_("can't read from %s: %s"),
	      file_name, xstrerror (errno));

      fclose (f_in);
      f_in = NULL;
      return;
    }

  /* Check for an empty input file.  */
  if (feof (f_in))
    {
      fclose (f_in);
      f_in = NULL;
      return;
    }
  gas_assert (c != EOF);

  if (c == '#')
    {
      /* Begins with comment, may not want to preprocess.  */
      c = getc (f_in);
      if (c == 'N')
	{
	  if (fgets (buf, sizeof (buf), f_in)
	      && !strncmp (buf, "O_APP", 5) && ISSPACE (buf[5]))
	    preprocess = 0;
	  if (!strchr (buf, '\n'))
	    ungetc ('#', f_in);	/* It was longer.  */
	  else
	    ungetc ('\n', f_in);
	}
      else if (c == 'A')
	{
	  if (fgets (buf, sizeof (buf), f_in)
	      && !strncmp (buf, "PP", 2) && ISSPACE (buf[2]))
	    preprocess = 1;
	  if (!strchr (buf, '\n'))
	    ungetc ('#', f_in);
	  else
	    ungetc ('\n', f_in);
	}
      else if (c == '\n')
	ungetc ('\n', f_in);
      else
	ungetc ('#', f_in);
    }
  else
    ungetc (c, f_in);
}

/* Close input file.  */

void
input_file_close (void)
{
  /* Don't close a null file pointer.  */
  if (f_in != NULL)
    fclose (f_in);

  f_in = 0;
}

/* This function is passed to do_scrub_chars.  */

static size_t
input_file_get (char *buf, size_t buflen)
{
  size_t size;

  if (feof (f_in))
    return 0;

  size = fread (buf, sizeof (char), buflen, f_in);
  if (ferror (f_in))
    as_bad (_("can't read from %s: %s"), file_name, xstrerror (errno));
  return size;
}

/* Read a buffer from the input file.  */

char *
input_file_give_next_buffer (char *where /* Where to place 1st character of new buffer.  */)
{
  char *return_value;		/* -> Last char of what we read, + 1.  */
  size_t size;

  if (f_in == (FILE *) 0)
    return 0;
  /* fflush (stdin); could be done here if you want to synchronise
     stdin and stdout, for the case where our input file is stdin.
     Since the assembler shouldn't do any output to stdout, we
     don't bother to synch output and input.  */
  if (preprocess)
    size = do_scrub_chars (input_file_get, where, BUFFER_SIZE);
  else
    size = input_file_get (where, BUFFER_SIZE);

  if (size)
    return_value = where + size;
  else
    {
      if (fclose (f_in))
	as_warn (_("can't close %s: %s"), file_name, xstrerror (errno));

      f_in = (FILE *) 0;
      return_value = 0;
    }

  return return_value;
}
@


1.29
log
@	PR gas/14201
	* sb.h (sb_max_power_two): Delete.
	(struct sb): Delete "item" and "pot".  Make "len" a size_t.  Add "max".
	(sb_element): Delete.
	(sb_add_char, sb_add_buffer, sb_skip_comma, sb_skip_write): Update
	prototypes.
	* sb.c (string_count, free_list): Delete.
	(sb_build, sb_kill, sb_check): Rewrite.
	(scrub_from_sb, sb_add_char, sb_add_string, sb_add_buffer,
	sb_skip_white, sb_skip_comma): Replace assorted int params,
	vars and return types with size_t.
	* input-scrub.c: Likewise.
	* macro.c: Likewise.
	* macro.h: Likewise.
	* as.c: Likewise.
	* as.h: Likewise.
	* input-file.h: Likewise.
	* input-file.c: Likewise.
	* read.c: Likewise.
	* app.c: ..or ptrdiff_t.
	* input-file.c (input_file_get): Use ferror.
	(input_file_give_next_buffer): Use input_file_get.
@
text
@d221 1
a221 1
  
@


1.28
log
@	* input-file.c (input_file_open): Check for empty input files.
	(input_file_get): Check for end of file before reading any more
	data.
	(input_file_give_next_buffer): Likewise.
@
text
@d3 1
a3 1
   2002, 2003, 2005, 2006, 2007, 2009
a31 2
static int input_file_get (char *, int);

d72 1
a72 1
unsigned int
d214 2
a215 2
static int
input_file_get (char *buf, int buflen)
d217 1
a217 1
  int size;
d223 2
a224 5
  if (size < 0)
    {
      as_bad (_("can't read from %s: %s"), file_name, xstrerror (errno));
      size = 0;
    }
d234 1
a234 1
  int size;
d245 1
a245 6
    {
      if (feof (f_in))
	size = 0;
      else
	size = fread (where, sizeof (char), BUFFER_SIZE, f_in);
    }
a246 5
  if (size < 0)
    {
      as_bad (_("can't read from %s: %s"), file_name, xstrerror (errno));
      size = 0;
    }
@


1.27
log
@update copyright dates
@
text
@d160 9
d221 3
d239 1
a239 1
  register int size;
d250 7
a256 1
    size = fread (where, sizeof (char), BUFFER_SIZE, f_in);
@


1.27.4.1
log
@	* input-file.c (input_file_open): Check for empty input files.
	(input_file_get): Check for end of file before reading any more
	data.
	(input_file_give_next_buffer): Likewise.
@
text
@a159 9
  /* Check for an empty input file.  */
  if (feof (f_in))
    {
      fclose (f_in);
      f_in = NULL;
      return;
    }
  gas_assert (c != EOF);

a211 3
  if (feof (f_in))
    return 0;
  
d227 1
a227 1
  int size;
d238 1
a238 7
    {
      if (feof (f_in))
	size = 0;
      else
	size = fread (where, sizeof (char), BUFFER_SIZE, f_in);
    }

@


1.26
log
@        * gas/app, gas/as.c, gas/as.h, gas/atof-generic.c, gas/cgen.c,
        gas/config/atof-ieee.c, gas/config/obj-aout.c,
        gas/config/obj-coff.c, gas/config/obj-ecoff.c,
        gas/config/obj-elf.c, gas/config/obj-som.c, gas/config/tc-alpha.c,
        gas/config/tc-arc.c, gas/config/tc-arm.c, gas/config/tc-cr16.c,
        gas/config/tc-cris.c, gas/config/tc-crx.c, gas/config/tc-d30v.c,
        gas/config/tc-dlx.c, gas/config/tc-hppa.c, gas/config/tc-i370.c,
        gas/config/tc-i386-intel.c, gas/config/tc-i386.c,
        gas/config/tc-i860.c, gas/config/tc-i960.c, gas/config/tc-ia64.c,
        gas/config/tc-iq2000.c, gas/config/tc-m32c.c,
        gas/config/tc-m32r.c, gas/config/tc-m68hc11.c,
        gas/config/tc-m68k.c, gas/config/tc-maxq.c, gas/config/tc-mcore.c,
        gas/config/tc-mep.c, gas/config/tc-mips.c, gas/config/tc-mmix.c,
        gas/config/tc-mn10300.c, gas/config/tc-moxie.c,
        gas/config/tc-ns32k.c, gas/config/tc-pj.c, gas/config/tc-ppc.c,
        gas/config/tc-s390.c, gas/config/tc-score.c,
        gas/config/tc-score7.c, gas/config/tc-sh.c, gas/config/tc-sparc.c,
        gas/config/tc-spu.c, gas/config/tc-tic30.c, gas/config/tc-vax.c,
        gas/config/tc-xtensa.c, gas/config/xtensa-relax.c,
        gas/dw2gencfi.c, gas/dwarf2dbg.c, gas/ehopt.c, gas/expr.c,
        gas/frags.c, gas/input-file.c, gas/read.c, gas/sb.c,
        gas/subsegs.c, gas/symbols.c, gas/write.c: Change the name of the
        gas macro `assert' to `gas_assert'.
@
text
@d3 1
a3 1
   2002, 2003, 2005, 2006, 2007
@


1.25
log
@Switch to GPLv3
@
text
@d127 1
a127 1
  assert (filename != 0);	/* Filename may not be NULL.  */
@


1.24
log
@	* input-file.c (input_file_open): Check fgets return.
@
text
@d3 1
a3 1
   2002, 2003, 2005, 2006
d10 1
a10 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.23
log
@2006-09-13  Jan Beulich  <jbeulich@@novell.com>

	* input-file.c (input_file_give_next_buffer): Demote as_bad to
	as_warn.
@
text
@d166 2
a167 2
	  fgets (buf, 80, f_in);
	  if (!strncmp (buf, "O_APP", 5) && ISSPACE (buf[5]))
d176 2
a177 2
	  fgets (buf, 80, f_in);
	  if (!strncmp (buf, "PP", 2) && ISSPACE (buf[2]))
@


1.22
log
@	* input-file.c (input_file_open): Replace as_perror with as_bad
	so that gas exits with error on file errors.  Correct error
	message.
	(input_file_get, input_file_give_next_buffer): Likewise.
@
text
@d249 1
a249 1
	as_bad (_("can't close %s: %s"), file_name, xstrerror (errno));
@


1.21
log
@remove some duplicate #include's.
@
text
@d143 2
a144 2
      bfd_set_error (bfd_error_system_call);
      as_perror (_("Can't open %s for reading"), file_name);
d152 2
a153 2
      bfd_set_error (bfd_error_system_call);
      as_perror (_("Can't open %s for reading"), file_name);
d215 1
a215 2
      bfd_set_error (bfd_error_system_call);
      as_perror (_("Can't read from %s"), file_name);
d241 1
a241 2
      bfd_set_error (bfd_error_system_call);
      as_perror (_("Can't read from %s"), file_name);
d249 2
a250 4
	{
	  bfd_set_error (bfd_error_system_call);
	  as_perror (_("Can't close %s"), file_name);
	}
@


1.20
log
@	* README-vms: Delete.
	* config-gas.com: Delete.
	* makefile.vms: Delete.
	* vmsconf.sh: Delete.
	* config/atof-tahoe.c: Delete.
	* config/m88k-opcode.h: Delete.
	* config/obj-bout.c: Delete.
	* config/obj-bout.h: Delete.
	* config/obj-hp300.c: Delete.
	* config/obj-hp300.h: Delete.
	* config/tc-a29k.c: Delete.
	* config/tc-a29k.h: Delete.
	* config/tc-h8500.c: Delete.
	* config/tc-h8500.h: Delete.
	* config/tc-m88k.c: Delete.
	* config/tc-m88k.h: Delete.
	* config/tc-tahoe.c: Delete.
	* config/tc-tahoe.h: Delete.
	* config/tc-tic80.c: Delete.
	* config/tc-tic80.h: Delete.
	* config/tc-w65.c: Delete.
	* config/tc-w65.h: Delete.
	* config/te-aux.h: Delete.
	* config/te-delt88.h: Delete.
	* config/te-delta.h: Delete.
	* config/te-dpx2.h: Delete.
	* config/te-hp300.h: Delete.
	* config/te-ic960.h: Delete.
	* config/vms-a-conf.h: Delete.
	* doc/c-a29k.texi: Delete.
	* doc/c-h8500.texi: Delete.
	* doc/c-m88k.texi: Delete.
	* README: Remove obsolete examples, and list of supported targets.
	* Makefile.am: Remove a29k, h8500, m88k, tahoe, tic80, w65,
	bout and hp300 support.
	(DEP_FLAGS): Don't define BFD_ASSEMBLER.
	* configure.in: Remove --enable-bfd-assembler, need_bfd,
	primary_bfd_gas.
	* configure.tgt: Remove a29k, h8300-coff, h8500-*, i960 non-elf,
	m68k non bfd, m88k, or32-coff, tic80-*, vax non-bfd, w65k-*, *-nindy.
	* as.c: Remove all non-BFD_ASSEMBLER code, support for above targets.
	* as.h: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.c: Likewise.
	* ehopt.c: Likewise.
	* input-file.c: Likewise.
	* listing.c: Likewise.
	* literal.c: Likewise.
	* messages.c: Likewise.
	* obj.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* stabs.c: Likewise.
	* struc-symbol.h: Likewise.
	* subsegs.c: Likewise.
	* subsegs.h: Likewise.
	* symbols.c: Likewise.
	* symbols.h: Likewise.
	* tc.h: Likewise.
	* write.c: Likewise.
	* write.h: Likewise.
	* config/aout_gnu.h: Likewise.
	* config/obj-aout.c: Likewise.
	* config/obj-aout.h: Likewise.
	* config/obj-coff.c: Likewise.
	* config/obj-coff.h: Likewise.
	* config/obj-evax.h: Likewise.
	* config/obj-ieee.h: Likewise.
	* config/tc-arm.c: Likewise.
	* config/tc-arm.h: Likewise.
	* config/tc-avr.c: Likewise.
	* config/tc-avr.h: Likewise.
	* config/tc-crx.h: Likewise.
	* config/tc-d10v.h: Likewise.
	* config/tc-d30v.h: Likewise.
	* config/tc-dlx.h: Likewise.
	* config/tc-fr30.h: Likewise.
	* config/tc-frv.h: Likewise.
	* config/tc-h8300.c: Likewise.
	* config/tc-h8300.h: Likewise.
	* config/tc-hppa.h: Likewise.
	* config/tc-i370.h: Likewise.
	* config/tc-i386.c: Likewise.
	* config/tc-i386.h: Likewise.
	* config/tc-i860.h: Likewise.
	* config/tc-i960.c: Likewise.
	* config/tc-i960.h: Likewise.
	* config/tc-ip2k.h: Likewise.
	* config/tc-iq2000.h: Likewise.
	* config/tc-m32c.h: Likewise.
	* config/tc-m32r.h: Likewise.
	* config/tc-m68hc11.h: Likewise.
	* config/tc-m68k.c: Likewise.
	* config/tc-m68k.h: Likewise.
	* config/tc-maxq.c: Likewise.
	* config/tc-maxq.h: Likewise.
	* config/tc-mcore.c: Likewise.
	* config/tc-mcore.h: Likewise.
	* config/tc-mn10200.h: Likewise.
	* config/tc-mn10300.c: Likewise.
	* config/tc-mn10300.h: Likewise.
	* config/tc-ms1.h: Likewise.
	* config/tc-msp430.c: Likewise.
	* config/tc-msp430.h: Likewise.
	* config/tc-ns32k.c: Likewise.
	* config/tc-ns32k.h: Likewise.
	* config/tc-openrisc.h: Likewise.
	* config/tc-or32.c: Likewise.
	* config/tc-or32.h: Likewise.
	* config/tc-ppc.c: Likewise.
	* config/tc-ppc.h: Likewise.
	* config/tc-s390.h: Likewise.
	* config/tc-sh.c: Likewise.
	* config/tc-sh.h: Likewise.
	* config/tc-sparc.c: Likewise.
	* config/tc-tic30.c: Likewise.
	* config/tc-tic30.h: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic4x.h: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-tic54x.h: Likewise.
	* config/tc-v850.h: Likewise.
	* config/tc-vax.c: Likewise.
	* config/tc-vax.h: Likewise.
	* config/tc-xstormy16.h: Likewise.
	* config/tc-xtensa.h: Likewise.
	* config/tc-z8k.c: Likewise.
	* config/tc-z8k.h: Likewise.
	* config/vms-a-conf.h
	* doc/Makefile.am: Likewise.
	* doc/all.texi: Likewise.
	* doc/as.texinfo: Likewise.
	* doc/Makefile.in: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* config.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d3 1
a3 1
   2002, 2003, 2005
a27 3
#include <stdio.h>
#include <string.h>
#include <errno.h>
@


1.19
log
@Update the address and phone number of the FSF
@
text
@a145 1
#ifdef BFD_ASSEMBLER
a146 1
#endif
a154 1
#ifdef BFD_ASSEMBLER
a155 1
#endif
a217 1
#ifdef BFD_ASSEMBLER
a218 1
#endif
a244 1
#ifdef BFD_ASSEMBLER
a245 1
#endif
a254 1
#ifdef BFD_ASSEMBLER
a255 1
#endif
@


1.18
log
@	* Makefile.am (GAS_CFILES): Remove bignum-copy.c.
	(GENERIC_OBJS): Likewise, remove bignum-copy.o.
	(bignum-copy.o): Remove.
	* Makefile.in: Regenerate.
	* makefile.vms (OBJS): Remove bignum-copy.obj.
	* symbols.h (local_symbol_make): Remove declaration.
	(verify_symbol_chain_2): Likewise.
	* symbols.c (local_symbol_make): Make static.
	(max_indent_level): Likewise.
	(verify_symbol_chain_2): Remove.
	* macro.c (macro_hash): Make static.
	* messages.c (fprint_value): Remove.
	* read.h (get_absolute_expr): Remove.
	(emit_leb128_expr): Likewise.
	(do_s_func): Likewise.
	* read.c (do_s_func): Make static.
	(emit_leb128_expr): Likewise.
	(get_absolute_expr): Likewise.
	* as.h (as_howmuch): Remove declaration.
	(fprint_value): Likewise.
	* as.c (myname): Make static.
	* input-scrub.c (as_howmuch): Remove.
	(as_1_char): Likewise.
	* input-file.h (input_file_is_open): Remove.
	* input-file.c (input_file_is_open): Likewise.
	* expr.h (expr_build_unary): Remove declaration.
	(expr_build_binary): Likewise.
	* expr.c (expr_build_unary): Remove.
	(expr_build_binary): Likewise.
	* hash.h (hash_replace): Remove declaration.
	(hash_delete): Likewise.
	* hash.c (hash_replace): Remove.
	(hash_delete): Likewise.
	* bignum-copy.c (bignum_copy): Move from here ..
	* config/tc-vax.c (bignum_copy): .. to here.
	* bignum.h (LOG_TO_BASE_2_OF_10): Remove.
	(bignum_copy): Remove extern declaration.
	* sb.h (string_count): Remove extern declaration.
	(sb_build, sb_add_buffer, sb_print, sb_print_at): Likewise.
	(sb_name): Likewise.
	* sb.c (dsize): Replace preprocessor macro with static int.
	(string_count): Make static.
	(sb_build, sb_add_buffer, sb_print, sb_print_at): Likewise.
	(sb_name): Likewise.
	* config/obj-coff.c (dim_index): Make static.
	* config/tc-i386.c (GOT_symbol): Likewise.
	(output_invalid_buf): Likewise.
	* doc/internals.texi (Warning and error messages): Remove the
	prototype for fprint_value.
@
text
@d20 2
a21 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.17
log
@update copyright dates
@
text
@a82 6
int
input_file_is_open (void)
{
  return f_in != (FILE *) 0;
}

@


1.16
log
@	* input-file.c (input_file_open): Rearrange to avoid warning.
@
text
@d3 1
a3 1
   2003, 2005
@


1.15
log
@Fix calls to as_perror() so that the errno system message will be printed.
Fix as_perror() so that errno is not corrupted.
@
text
@d2 2
a3 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000, 2001, 2003
d150 10
a159 2
  if (f_in)
    c = getc (f_in);
d161 1
a161 1
  if (f_in == NULL || ferror (f_in))
d168 2
a169 5
      if (f_in)
	{
	  fclose (f_in);
	  f_in = NULL;
	}
@


1.14
log
@(input_file_open): Remove call to stat().  Add a check for getc() failing, and
catch the case where the failure is due to an attempt to read a directory.
@
text
@d154 4
a157 12
      switch (errno)
	{
	case ENOENT:
	  as_bad (_("%s: no such file"), filename);
	  break;
	case EISDIR:
	  as_bad (_("%s: is a directory"), filename);
	  break;
	default:
          as_bad (_("can't open %s for reading"), file_name);
          as_perror ("%s", file_name);
        }
d222 3
d251 3
d262 6
a267 1
	as_perror (_("Can't close %s"), file_name);
@


1.13
log
@	* hash.c: Convert to ISO-C.
	* hash.h: Likewise.
	* input-file.c: Likewise.
	* input-file.h: Likewise.
	* input-scrub.c: Likewise.
	* itbl-ops.c: Likewise.
	* itbl-ops.h: Likewise.
@
text
@d29 1
a29 1
#include <sys/stat.h>
a137 13
      struct stat statbuf;

      if (stat (filename, &statbuf) < 0)
	{
	  as_bad (_("%s: No such file"), filename);
	  return;
	}
      else if (! S_ISREG (statbuf.st_mode))
	{
	  as_bad (_("'%s' is not an ordinary file"), filename);
	  return;
	}

d149 4
a152 1
  if (f_in == (FILE *) 0)
d154 18
a171 2
      as_bad (_("can't open %s for reading"), file_name);
      as_perror ("%s", file_name);
a174 1
  c = getc (f_in);
@


1.12
log
@Use consistent error messages for missing files.
Detect directories where an ordinary file is expected.
@
text
@d34 1
a34 1
static int input_file_get PARAMS ((char *, int));
d65 1
a65 1
input_file_begin ()
d71 1
a71 1
input_file_end ()
d77 1
a77 1
input_file_buffer_size ()
d83 1
a83 1
input_file_is_open ()
d92 1
a92 1
input_file_push ()
d111 1
a111 2
input_file_pop (arg)
     char *arg;
d127 2
a128 3
input_file_open (filename, pre)
     char *filename;		/* "" means use stdin. Must not be 0.  */
     int pre;
d206 1
a206 1
input_file_close ()
d218 1
a218 3
input_file_get (buf, buflen)
     char *buf;
     int buflen;
d234 1
a234 2
input_file_give_next_buffer (where)
     char *where;		/* Where to place 1st character of new buffer.  */
@


1.11
log
@	* ChangeLog: Fix typos.
	* ChangeLog-9295: Likewise.
	* as.c: Fix comment typos.
	* as.h: Likewise.
	* atof-generic.c: Likewise.
	* bit_fix.h: Likewise.
	* frags.h: Likewise.
	* hash.c: Likewise.
	* input-file.c: Likewise.
	* input-scrub.c: Likewise.
	* itbl-ops.c: Likewise.
	* itbl-parse.y: Likewise.
	* listing.c: Likewise.
	* macro.h: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* sb.h: Likewise.
	* symbols.c: Likewise.
	* symbols.h: Likewise.
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000, 2001
d29 1
d139 14
a152 1
    {				/* We have a file name. Suck it and see.  */
d157 2
a158 1
    {				/* use stdin for the input file.  */
d160 2
a161 1
      file_name = _("{standard input}");	/* For error messages.  */
d163 1
@


1.10
log
@	* app.c: Fix formatting.
	* as.c: Likewise.
	* ehopt.c: Likewise.
	* expr.c: Likewise.
	* input-file.c: Likewise.
	* listing.c: Likewise.
	* macro.h: Likewise.
	* stabs.c: Likewise.
	* symbols.c: Likewise.
@
text
@d61 1
a61 1
/* These hooks accomodate most operating systems.  */
@


1.9
log
@Use ISSPACE instead of isspace
@
text
@d160 9
a168 9
        {
          fgets (buf, 80, f_in);
          if (!strncmp (buf, "O_APP", 5) && ISSPACE (buf[5]))
            preprocess = 0;
          if (!strchr (buf, '\n'))
            ungetc ('#', f_in);	/* It was longer.  */
          else
            ungetc ('\n', f_in);
        }
d170 9
a178 9
        {
          fgets (buf, 80, f_in);
          if (!strncmp (buf, "PP", 2) && ISSPACE (buf[2]))
            preprocess = 1;
          if (!strchr (buf, '\n'))
            ungetc ('#', f_in);
          else
            ungetc ('\n', f_in);
        }
d180 1
a180 1
        ungetc ('\n', f_in);
d182 1
a182 1
        ungetc ('#', f_in);
@


1.8
log
@
2001-09-26  Jeff Johnston  <jjohnstn@@redhat.com>

        * input-file.c (input_file_open): When reading the
        first line looking for #NO_APP, prepare for the possibility
        of finding #APP instead.  Also fix algorithm to allow
        white-space to follow either #NO_APP or #APP directives.
@
text
@a28 1

d31 1
d162 1
a162 1
          if (!strncmp (buf, "O_APP", 5) && isspace (buf[5]))
d172 1
a172 1
          if (!strncmp (buf, "PP", 2) && isspace (buf[2]))
@


1.7
log
@	* read.c: Standardize error/warning messages - don't capitalise, no
	final period or newline, don't say "ignored" or "zero assumed" for
	as_bad messages.  In some cases, change the wording to that used
	elsewhere for similar messages.
	* app.c, as.c, atof-generic.c, cgen.c, cond.c, depend.c, dwarf2dbg.c,
	  ecoff.c, expr.c, frags.c, input-file.c, input-scrub.c, listing.c,
	  output-file.c, stabs.c, subsegs.c, symbols.c, write.c: Likewise.
	* ecoff.c (ecoff_directive_end): Test for missing name by
	comparing input line pointers rather than reading string.
	(ecoff_directive_ent): Likewise.
	* read.c (s_set): Likewise.
	(s_align): Report a warning rather than an error for
	alignment too large.
	(s_comm): Check for missing symbol name.
	(s_lcomm_internal): Likewise.
	(s_lsym): Likewise.
	(s_globl): Use is_end_of_line instead of looking for '\n'.
	(s_lcomm_internal): Likewise.
	(ignore_rest_of_line): Report a warning rather than an error.
@
text
@d160 19
a178 9
	{
	  fgets (buf, 80, f_in);
	  if (!strcmp (buf, "O_APP\n"))
	    preprocess = 0;
	  if (!strchr (buf, '\n'))
	    ungetc ('#', f_in);	/* It was longer.  */
	  else
	    ungetc ('\n', f_in);
	}
d180 1
a180 1
	ungetc ('\n', f_in);
d182 1
a182 1
	ungetc ('#', f_in);
@


1.6
log
@Use FOPEN_.. macros in calls to fopen().
@
text
@d149 1
a149 1
      as_bad (_("Can't open %s for reading."), file_name);
@


1.5
log
@Fix copyright notices
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000
d22 4
a25 6
/*
 * Confines all details of reading source bytes to this module.
 * All O/S specific crocks should live here.
 * What we lose in "efficiency" we gain in modularity.
 * Note we don't need to #include the "as.h" file. No common coupling!
 */
d36 1
a36 2
   preprocessed by app.  It is zero if the file can be read straight in.
   */
d39 5
a43 7
/*
 * This code opens a file, then delivers BUFFER_SIZE character
 * chunks of the file on demand.
 * BUFFER_SIZE is supposed to be a number chosen for speed.
 * The caller only asks once what BUFFER_SIZE is, and asks before
 * the nature of the input files (if any) is known.
 */
d47 1
a47 3
/*
 * We use static data: the data area is not sharable.
 */
d53 7
a59 6
struct saved_file {
  FILE *f_in;
  char *file_name;
  int preprocess;
  char *app_save;
};
d89 1
d103 2
a104 1
  input_file_begin ();		/* Initialize for new file */
d115 1
a115 1
  input_file_end ();		/* Close out old file */
d139 1
a139 1
      f_in = fopen (filename, "r");
d156 2
a157 1
    {				/* Begins with comment, may not want to preprocess */
d165 1
a165 1
	    ungetc ('#', f_in);	/* It was longer */
d179 1
d183 1
d185 2
a186 3
    {
      fclose (f_in);
    }				/* don't close a null file pointer */
d219 4
a222 6
  /*
   * fflush (stdin); could be done here if you want to synchronise
   * stdin and stdout, for the case where our input file is stdin.
   * Since the assembler shouldn't do any output to stdout, we
   * don't bother to synch output and input.
   */
d241 2
a242 1
  return (return_value);
@


1.4
log
@2000-11-06  Kazu Hirata  <kazu@@hxi.com>

	* input-file.c: Fix formatting.
	* input-file.h: Likewise.
	* input-scrub.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1987, 90, 91, 92, 93, 94, 95, 98, 99, 2000
@


1.4.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000
@


1.3
log
@2000-09-09  Kazu Hirata  <kazu@@hxi.com>

	* input-file.c: Fix formatting.
	* itbl-ops.c: Likewise.
	* messages.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1987, 90, 91, 92, 93, 94, 95, 98, 1999
d60 6
a65 7
struct saved_file
  {
    FILE *f_in;
    char *file_name;
    int preprocess;
    char *app_save;
  };
d190 1
a190 1
}				/* input_file_close() */
a246 2

/* end of input-file.c */
@


1.2
log
@	* app.c (input_buffer): New static variable.
	(app_push): Save saved_input in allocated buffer.
	(app_pop): Restored saved_input.
	(do_scrub_chars): Change get parameter to take char * and int as
	arguments.  Change GET macro to pass input_buffer to get
	function.  Don't save input into allocated buffer.
	* as.h (do_scrub_chars): Update declaration.
	* input-file.c (input_file_get): Change to take char * and int.
	Read data into passed in buffer.  Remove static buffer.
	* read.c (scrub_from_string): Change to take char * and int.  Copy
	data into passed in buffer.
@
text
@d68 1
a68 1
/* These hooks accomodate most operating systems. */
d70 1
a70 1
void 
d76 1
a76 1
void 
d81 2
a82 2
/* Return BUFFER_SIZE. */
unsigned int 
d88 1
a88 1
int 
d133 1
a133 1
     char *filename;		/* "" means use stdin. Must not be 0. */
d141 1
a141 1
  assert (filename != 0);	/* Filename may not be NULL. */
d143 1
a143 1
    {				/* We have a file name. Suck it and see. */
d148 1
a148 1
    {				/* use stdin for the input file. */
d150 1
a150 1
      file_name = _("{standard input}");	/* For error messages. */
d183 1
a183 1
void 
d215 1
a215 1
     char *where;		/* Where to place 1st character of new buffer. */
d217 1
a217 1
  char *return_value;		/* -> Last char of what we read, + 1. */
@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
   Copyright (C) 1987, 1990, 1991, 1992, 1998 Free Software Foundation, Inc.
d18 3
a20 2
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d35 1
a35 1
static int input_file_get PARAMS ((char **));
d196 3
a198 2
input_file_get (from)
     char **from;
a199 1
  static char buf[BUFFER_SIZE];
d202 1
a202 1
  size = fread (buf, sizeof (char), sizeof buf, f_in);
a207 1
  *from = buf;
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

