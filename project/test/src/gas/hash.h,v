head	1.16;
access;
symbols
	binutils-2_24-branch:1.16.0.2
	binutils-2_24-branchpoint:1.16
	binutils-2_21_1:1.15
	binutils-2_23_2:1.15.10.1
	binutils-2_23_1:1.15
	binutils-2_23:1.15
	binutils-2_23-branch:1.15.0.10
	binutils-2_23-branchpoint:1.15
	binutils-2_22_branch:1.15.0.8
	binutils-2_22:1.15
	binutils-2_22-branch:1.15.0.6
	binutils-2_22-branchpoint:1.15
	binutils-2_21:1.15
	binutils-2_21-branch:1.15.0.4
	binutils-2_21-branchpoint:1.15
	binutils-2_20_1:1.15
	binutils-2_20:1.15
	binutils-arc-20081103-branch:1.14.0.8
	binutils-arc-20081103-branchpoint:1.14
	binutils-2_20-branch:1.15.0.2
	binutils-2_20-branchpoint:1.15
	dje-cgen-play1-branch:1.14.0.6
	dje-cgen-play1-branchpoint:1.14
	arc-20081103-branch:1.14.0.4
	arc-20081103-branchpoint:1.14
	binutils-2_19_1:1.14
	binutils-2_19:1.14
	binutils-2_19-branch:1.14.0.2
	binutils-2_19-branchpoint:1.14
	binutils-2_18:1.13
	binutils-2_18-branch:1.13.0.2
	binutils-2_18-branchpoint:1.13
	binutils-csl-coldfire-4_1-32:1.12
	binutils-csl-sourcerygxx-4_1-32:1.12
	binutils-csl-innovasic-fido-3_4_4-33:1.12
	binutils-csl-sourcerygxx-3_4_4-32:1.6
	binutils-csl-coldfire-4_1-30:1.12
	binutils-csl-sourcerygxx-4_1-30:1.12
	binutils-csl-coldfire-4_1-28:1.12
	binutils-csl-sourcerygxx-4_1-29:1.12
	binutils-csl-sourcerygxx-4_1-28:1.12
	binutils-csl-arm-2006q3-27:1.12
	binutils-csl-sourcerygxx-4_1-27:1.12
	binutils-csl-arm-2006q3-26:1.12
	binutils-csl-sourcerygxx-4_1-26:1.12
	binutils-csl-sourcerygxx-4_1-25:1.12
	binutils-csl-sourcerygxx-4_1-24:1.12
	binutils-csl-sourcerygxx-4_1-23:1.12
	binutils-csl-sourcerygxx-4_1-21:1.12
	binutils-csl-arm-2006q3-21:1.12
	binutils-csl-sourcerygxx-4_1-22:1.12
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.12
	binutils-csl-sourcerygxx-4_1-20:1.12
	binutils-csl-arm-2006q3-19:1.12
	binutils-csl-sourcerygxx-4_1-19:1.12
	binutils-csl-sourcerygxx-4_1-18:1.12
	binutils-csl-renesas-4_1-9:1.12
	binutils-csl-sourcerygxx-3_4_4-25:1.6
	binutils-csl-renesas-4_1-8:1.12
	binutils-csl-renesas-4_1-7:1.12
	binutils-csl-renesas-4_1-6:1.12
	binutils-csl-sourcerygxx-4_1-17:1.12
	binutils-csl-sourcerygxx-4_1-14:1.12
	binutils-csl-sourcerygxx-4_1-15:1.12
	binutils-csl-sourcerygxx-4_1-13:1.12
	binutils-2_17:1.12
	binutils-csl-sourcerygxx-4_1-12:1.12
	binutils-csl-sourcerygxx-3_4_4-21:1.12
	binutils-csl-wrs-linux-3_4_4-24:1.6.4.1
	binutils-csl-wrs-linux-3_4_4-23:1.6.4.1
	binutils-csl-sourcerygxx-4_1-9:1.12
	binutils-csl-sourcerygxx-4_1-8:1.12
	binutils-csl-sourcerygxx-4_1-7:1.12
	binutils-csl-arm-2006q1-6:1.12
	binutils-csl-sourcerygxx-4_1-6:1.12
	binutils-csl-wrs-linux-3_4_4-22:1.6.4.1
	binutils-csl-coldfire-4_1-11:1.12
	binutils-csl-sourcerygxx-3_4_4-19:1.12
	binutils-csl-coldfire-4_1-10:1.12
	binutils-csl-sourcerygxx-4_1-5:1.12
	binutils-csl-sourcerygxx-4_1-4:1.12
	binutils-csl-wrs-linux-3_4_4-21:1.6.4.1
	binutils-csl-morpho-4_1-4:1.12
	binutils-csl-sourcerygxx-3_4_4-17:1.12
	binutils-csl-wrs-linux-3_4_4-20:1.6.4.1
	binutils-2_17-branch:1.12.0.4
	binutils-2_17-branchpoint:1.12
	binutils-csl-2_17-branch:1.12.0.2
	binutils-csl-2_17-branchpoint:1.12
	binutils-csl-gxxpro-3_4-branch:1.6.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.6
	binutils-2_16_1:1.6
	binutils-csl-arm-2005q1b:1.6.4.1
	binutils-2_16:1.6
	binutils-csl-arm-2005q1a:1.6
	binutils-csl-arm-2005q1-branch:1.6.0.4
	binutils-csl-arm-2005q1-branchpoint:1.6
	binutils-2_16-branch:1.6.0.2
	binutils-2_16-branchpoint:1.6
	csl-arm-2004-q3d:1.5
	csl-arm-2004-q3:1.5
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	binutils-2_15-branch:1.5.0.6
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	csl-arm-2003-q4:1.5
	binutils-2_14:1.4
	binutils-2_14-branch:1.4.0.6
	binutils-2_14-branchpoint:1.4
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	binutils-2_13_1:1.4
	binutils-2_13:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.4
	binutils-2_12_1:1.4
	binutils-2_12:1.4
	binutils-2_12-branch:1.4.0.2
	binutils-2_12-branchpoint:1.4
	cygnus_cvs_20020108_pre:1.4
	binutils-2_11_2:1.3.4.1
	binutils-2_11_1:1.3.4.1
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.4
	binutils-2_10_1:1.3
	binutils-2_10:1.3
	binutils-2_10-branch:1.3.0.2
	binutils-2_10-branchpoint:1.3
	binutils_latest_snapshot:1.16
	repo-unification-2000-02-06:1.3
	binu_ss_19990721:1.3
	binu_ss_19990602:1.2
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2013.01.10.17.11.17;	author roland;	state Exp;
branches;
next	1.15;

1.15
date	2009.09.02.07.24.19;	author amodra;	state Exp;
branches
	1.15.10.1;
next	1.14;

1.14
date	2008.08.11.07.40.22;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.03.11.01.03;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.18.05.40.07;	author zack;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.05.09.12.45;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.29.16.56.12;	author hjl;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.00.22.26;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.14.09.00.35;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.12.08.42.38;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.03.01.29.53;	author amodra;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2003.11.24.03.37.58;	author kazu;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.08.23.24.22;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	99.06.02.23.22.49;	author ian;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.05.17.03.21.43;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.40;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.15.10.1
date	2013.01.10.17.13.05;	author roland;	state Exp;
branches;
next	;

1.6.4.1
date	2005.04.26.05.31.40;	author zack;	state Exp;
branches;
next	;

1.3.4.1
date	2001.06.07.03.15.24;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.40;	author rth;	state Exp;
branches;
next	;


desc
@@


1.16
log
@gas/
	* hash.c (hash_new_sized): Make it global.
	* hash.h: Declare it.
	* macro.c (define_macro): Use hash_new_sized instead of hash_new,
	pass a small size.
@
text
@/* hash.h -- header file for gas hash table routines
   Copyright 1987, 1992, 1993, 1995, 1999, 2003, 2005, 2007, 2008, 2013
   Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#ifndef HASH_H
#define HASH_H

struct hash_control;

/* Set the size of the hash table used.  */

void set_gas_hash_table_size (unsigned long);

/* Create a hash table.  This return a control block.  */

extern struct hash_control *hash_new (void);
extern struct hash_control *hash_new_sized (unsigned long);

/* Delete a hash table, freeing all allocated memory.  */

extern void hash_die (struct hash_control *);

/* Insert an entry into a hash table.  This returns NULL on success.
   On error, it returns a printable string indicating the error.  It
   is considered to be an error if the entry already exists in the
   hash table.  */

extern const char *hash_insert (struct hash_control *,
				const char *key, void *value);

/* Insert or replace an entry in a hash table.  This returns NULL on
   success.  On error, it returns a printable string indicating the
   error.  If an entry already exists, its value is replaced.  */

extern const char *hash_jam (struct hash_control *,
			     const char *key, void *value);

/* Replace an existing entry in a hash table.  This returns the old
   value stored for the entry.  If the entry is not found in the hash
   table, this does nothing and returns NULL.  */

extern void *hash_replace (struct hash_control *, const char *key,
			 void *value);

/* Find an entry in a hash table, returning its value.  Returns NULL
   if the entry is not found.  */

extern void *hash_find (struct hash_control *, const char *key);

/* As hash_find, but KEY is of length LEN and is not guaranteed to be
   NUL-terminated.  */

extern void *hash_find_n (struct hash_control *, const char *key, size_t len);

/* Delete an entry from a hash table.  This returns the value stored
   for that entry, or NULL if there is no such entry.  */

extern void *hash_delete (struct hash_control *, const char *key, int);

/* Traverse a hash table.  Call the function on every entry in the
   hash table.  */

extern void hash_traverse (struct hash_control *,
			   void (*pfn) (const char *key, void *value));

/* Print hash table statistics on the specified file.  NAME is the
   name of the hash table, used for printing a header.  */

extern void hash_print_statistics (FILE *, const char *name,
				   struct hash_control *);

#endif /* HASH_H */
@


1.15
log
@update copyright dates
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999, 2003, 2005, 2007, 2008
d34 1
@


1.15.10.1
log
@gas/
	* hash.c (hash_new_sized): Make it global.
	* hash.h: Declare it.
	* macro.c (define_macro): Use hash_new_sized instead of hash_new,
	pass a small size.
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999, 2003, 2005, 2007, 2008, 2013
a33 1
extern struct hash_control *hash_new_sized (unsigned long);
@


1.14
log
@	PR 6575
	* hash.c: Expand PTR to void *.
	(hash_delete): Add "freeme" parameter.  Call obstack_free.
	* hash.h: Expand PTR to void *.
	(hash_delete): Update prototype.
	* macro.c (macro_expand_body): hash_delete LOCALs from formal_hash.
	* config/tc-tic54x.c (tic54x_remove_local_label): Update hash_delete
	call.
	(subsym_substitute): Likewise.
	* doc/internals.texi (hash_delete): Update.
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999, 2003, 2007, 2008
@


1.13
log
@Switch to GPLv3
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999, 2003, 2007
d45 1
a45 1
				const char *key, PTR value);
d52 1
a52 1
			     const char *key, PTR value);
d58 2
a59 2
extern PTR hash_replace (struct hash_control *, const char *key,
			 PTR value);
d64 1
a64 1
extern PTR hash_find (struct hash_control *, const char *key);
d69 1
a69 1
extern PTR hash_find_n (struct hash_control *, const char *key, size_t len);
d74 1
a74 1
extern PTR hash_delete (struct hash_control *, const char *key);
d80 1
a80 1
			   void (*pfn) (const char *key, PTR value));
@


1.12
log
@include/elf:
	* arm.h: Import complete list of official relocation names
	and numbers from AAELF.  Define FAKE_RELOCs for old names.
	Remove a few old names no longer used anywhere.

bfd:
	* elf32-arm.c: Wherever possible, use official reloc names
	from AAELF.
	(elf32_arm_howto_table, elf32_arm_tls_gd32_howto)
	(elf32_arm_tls_ldo32_howto, elf32_arm_tls_ldm32_howto)
	(elf32_arm_tls_le32_howto, elf32_arm_tls_ie32_howto)
	(elf32_arm_vtinherit_howto, elf32_arm_vtentry_howto)
	(elf32_arm_pc11_howto, elf32_arm_thm_pc9_howto, elf32_arm_got_prel)
	(elf32_arm_r_howto): Replace with elf32_arm_howto_table_1,
	elf32_arm_howto_table_2, and elf32_arm_howto_table_3.
	Add many new relocations from AAELF.
	(elf32_arm_howto_from_type): Update to match.
	(elf32_arm_reloc_map): Add entries for R_ARM_THM_JUMP24,
	R_ARM_THM_JUMP11, R_ARM_THM_JUMP19, R_ARM_THM_JUMP8,
	R_ARM_THM_JUMP6, R_ARM_GNU_VTINHERIT, and R_ARM_GNU_VTENTRY.
	(elf32_arm_reloc_type_lookup): Use elf32_arm_howto_from_type.
	(elf32_arm_final_link_relocate): Add support for
	R_ARM_THM_JUMP24, R_ARM_THM_JUMP19, R_ARM_THM_JUMP6.  Remove
	case entries redundant with default.

	* reloc.c: Reorganize ARM relocations.  Add Thumb
	assembler-internal relocations BFD_RELOC_ARM_T32_OFFSET_U8,
	BFD_RELOC_ARM_T32_OFFSET_IMM, BFD_RELOC_ARM_T32_IMMEDIATE.
	Add visible relocations BFD_RELOC_THUMB_PCREL_BRANCH7,
	BFD_RELOC_THUMB_BRANCH20, BFD_RELOC_THUMB_BRANCH25.
	Delete unused relocations BFD_RELOC_ARM_GOT12, BFD_RELOC_ARM_COPY.
	* bfd-in2.h, libbfd.h: Regenerate.

opcodes:
	* arm-dis.c (thumb_opcodes): Add disassembly for V6T2 16-bit
	instructions.  Adjust disassembly of some opcodes to match
	unified syntax.
	(thumb32_opcodes): New table.
	(print_insn_thumb): Rename print_insn_thumb16; don't handle
	two-halfword branches here.
	(print_insn_thumb32): New function.
	(print_insn): Choose among print_insn_arm, print_insn_thumb16,
	and print_insn_thumb32.  Be consistent about order of
	halfwords when printing 32-bit instructions.

gas:
	* hash.c (hash_lookup): Add len parameter.  All callers changed.
	(hash_find_n): New interface.
	* hash.h: Prototype hash_find_n.
	* sb.c: Include as.h.
	(scrub_from_sb, sb_to_scrub, scrub_position): New statics.
	(sb_scrub_and_add_sb): New interface.
	* sb.h: Prototype sb_scrub_and_add_sb.
	* input-scrub.c (input_scrub_include_sb): Use sb_scrub_and_add_sb.

	* config/tc-arm.h (TC_FORCE_RELOCATION_LOCAL): Remove
	reference to BFD_RELOC_ARM_GOT12 which is never generated.
	* config/tc-arm.c: Rewrite, adding Thumb-2 support.

gas/testsuite:
	* gas/arm/arm.exp: Convert all existing "gas_test" tests to
	"run_dump_test" tests.  Run more tests unconditionally.  Run new tests.
	* gas/arm/arch4t.s, gas/arm/arch6zk.s, gas/arm/arm3.s, gas/arm/arm6.s
	* gas/arm/arm7dm.s, gas/arm/bignum1.s, gas/arm/float.s
	* gas/arm/immed.s, gas/arm/iwmmxt.s, gas/arm/offset.s, gas/arm/thumb.s:
	Adjust to work as a dump test.
	* gas/arm/arch4t.d, gas/arm/arch6zk.d, gas/arm/arm3.d, gas/arm/arm6.d
	* gas/arm/arm7dm.d, gas/arm/bignum1.d, gas/arm/float.d
	* gas/arm/immed.d, gas/arm/iwmmxt.d, gas/arm/offset.d, gas/arm/thumb.d:
	New files.

	* gas/arm/armv1-bad.l, gas/arm/armv1-bad.s: Remove tests for
	diagnostics that don't happen in the first pass anymore.

	* gas/arm/iwmmxt-bad.l, gas/arm/r15-bad.l, gas/arm/req.l
	* gas/arm/vfp-bad.l:
	Update expected diagnostics.
	* gas/arm/pic.d: Update expected reloc name.
	* gas/arm/thumbv6.d: CPY no longer appears in disassembly.
	* gas/arm/r15-bad.s: Avoid two-argument mul.
	* gas/arm/req.s: Adjust comments.
	* gas/arm/maverick.d, gas/arm/maverick.s: Avoid inappropriate
	use of PC.

	* gas/arm/macro-1.d, gas/arm/macro1.s
	* gas/arm/t16-bad.l, gas/arm/t16-bad.s
	* gas/arm/tcompat.d, gas/arm/tcompat.s
	* gas/arm/tcompat2.d, gas/arm/tcompat2.s
	* gas/arm/thumb32.d, gas/arm/thumb32.s
	New test pair.

ld/testsuite:
	* ld-arm/mixed-app.d: Adjust expected disassembly a little.
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999, 2003
d9 1
a9 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.11
log
@Update the address and phone number of the FSF
@
text
@d66 5
@


1.10
log
@2005-04-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* hash.c: Undo the last change.
	* hash.h: Likewise.
@
text
@d19 2
a20 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.9
log
@	* Makefile.am (GAS_CFILES): Remove bignum-copy.c.
	(GENERIC_OBJS): Likewise, remove bignum-copy.o.
	(bignum-copy.o): Remove.
	* Makefile.in: Regenerate.
	* makefile.vms (OBJS): Remove bignum-copy.obj.
	* symbols.h (local_symbol_make): Remove declaration.
	(verify_symbol_chain_2): Likewise.
	* symbols.c (local_symbol_make): Make static.
	(max_indent_level): Likewise.
	(verify_symbol_chain_2): Remove.
	* macro.c (macro_hash): Make static.
	* messages.c (fprint_value): Remove.
	* read.h (get_absolute_expr): Remove.
	(emit_leb128_expr): Likewise.
	(do_s_func): Likewise.
	* read.c (do_s_func): Make static.
	(emit_leb128_expr): Likewise.
	(get_absolute_expr): Likewise.
	* as.h (as_howmuch): Remove declaration.
	(fprint_value): Likewise.
	* as.c (myname): Make static.
	* input-scrub.c (as_howmuch): Remove.
	(as_1_char): Likewise.
	* input-file.h (input_file_is_open): Remove.
	* input-file.c (input_file_is_open): Likewise.
	* expr.h (expr_build_unary): Remove declaration.
	(expr_build_binary): Likewise.
	* expr.c (expr_build_unary): Remove.
	(expr_build_binary): Likewise.
	* hash.h (hash_replace): Remove declaration.
	(hash_delete): Likewise.
	* hash.c (hash_replace): Remove.
	(hash_delete): Likewise.
	* bignum-copy.c (bignum_copy): Move from here ..
	* config/tc-vax.c (bignum_copy): .. to here.
	* bignum.h (LOG_TO_BASE_2_OF_10): Remove.
	(bignum_copy): Remove extern declaration.
	* sb.h (string_count): Remove extern declaration.
	(sb_build, sb_add_buffer, sb_print, sb_print_at): Likewise.
	(sb_name): Likewise.
	* sb.c (dsize): Replace preprocessor macro with static int.
	(string_count): Make static.
	(sb_build, sb_add_buffer, sb_print, sb_print_at): Likewise.
	(sb_name): Likewise.
	* config/obj-coff.c (dim_index): Make static.
	* config/tc-i386.c (GOT_symbol): Likewise.
	(output_invalid_buf): Likewise.
	* doc/internals.texi (Warning and error messages): Remove the
	prototype for fprint_value.
@
text
@d54 7
d66 5
@


1.8
log
@* as.c (main): Move parse_args before symbol_begin and frag_init so that the
  hash table size can be set before it is used.
* hash.c: Use an unsigned long type for the size of the hash tables.
* hash.h (set_gas_hash_table_size): Update the prototype.
@
text
@a53 7
/* Replace an existing entry in a hash table.  This returns the old
   value stored for the entry.  If the entry is not found in the hash
   table, this does nothing and returns NULL.  */

extern PTR hash_replace (struct hash_control *, const char *key,
			 PTR value);

a58 5
/* Delete an entry from a hash table.  This returns the value stored
   for that entry, or NULL if there is no such entry.  */

extern PTR hash_delete (struct hash_control *, const char *key);

@


1.7
log
@* hash.c (DEFAULT_SIZE): Delete.  Replace with:
  (gas_hash_table_size): New static variable.
  (set_gas_hash_table_size): New function:  Records a requested size for the hash tables.
  (get_gas_hash_table_size): New function: Return a prime number near the requested size of the hash table.
  (hash_new): Use get_gas_hash_table_size.
* hash.h: Add a prototype for set_gas_hash_table_size.
* as.c (show_usage): Add description of new switches: --hash-size and --reduce-memory-overheads.
  (option_values): Add OPTION_HASH_TABLE_SIZE and OPTION_REDUCE_MEMORY_OVERHEADS.
  (std_longpopts): Add entries for the new options.
  (parse_args): Handle the new options.
* Makefile.am: Add a dependency of as.c on hash.h.
* Makefile.in: Regenerate.
* doc/as.texinfo: Document the new switches.
* NEWS: Mention the new switches.
@
text
@d29 1
a29 1
void set_gas_hash_table_size (unsigned int);
@


1.6
log
@update copyright dates
@
text
@d27 4
@


1.6.4.1
log
@	Thumb32 assembler.

	* include/elf/arm.h: Import full set of relocation names from
	latest AAELF.  Make the primary name of all relocations be the one
	AAELF specifies.  Provide aliases under the traditional names.
	Kill FIRST_INVALID_RELOC_* and LAST_INVALID_RELOC_*.
	* bfd/reloc.c: Reorganize ARM relocations.  Remove ARM relocations
	that are never generated.  Document more of the relocations.  Add
	relocations for Thumb32.
	* bfd/libbfd.h, bfd/bfd-in2.h: Regenerate.
	* bfd/elf32-arm.c: Reorganize howto tables.  Implement Thumb32
	relocations.
	* ld/testsuite/ld-arm/mixed-app.d: Adjust expectations for
	renamed relocations.

	* gas/hash.c (hash_find_n): New interface.
	* gas/hash.h: Prototype it.

	* gas/config/tc-arm.c: Rewrite and reorganize.  Implement 32-bit
	Thumb instructions.
	* gas/testsuite/gas/arm: Convert all "gas_test" style tests to
	"run_dump_test" style tests, for more thorough testing.  Make
	adjustments to expectations where necessary.
	* gas/testsuite/gas/arm/t16-bad.s, gas/testsuite/gas/arm/tcompat.s
	* gas/testsuite/gas/arm/tcompat2.s, gas/testsuite/gas/arm/thumb32.s:
	New test cases.

	* opcodes/arm-dis.c: Add support for Thumb32 instructions and
	16-bit V6T2 instructions.
@
text
@a61 5
/* As hash_find, but KEY is of length LEN and is not guaranteed to be
   NUL-terminated.  */

extern PTR hash_find_n (struct hash_control *, const char *key, size_t len);

@


1.5
log
@	* hash.c: Convert to ISO-C.
	* hash.h: Likewise.
	* input-file.c: Likewise.
	* input-file.h: Likewise.
	* input-scrub.c: Likewise.
	* itbl-ops.c: Likewise.
	* itbl-ops.h: Likewise.
@
text
@d2 2
a3 1
   Copyright 1987, 1992, 1993, 1995, 1999 Free Software Foundation, Inc.
@


1.4
log
@Fix copyright notices
@
text
@d28 1
a28 1
extern struct hash_control *hash_new PARAMS ((void));
d32 1
a32 1
extern void hash_die PARAMS ((struct hash_control *));
d39 2
a40 2
extern const char *hash_insert PARAMS ((struct hash_control *,
					const char *key, PTR value));
d46 2
a47 2
extern const char *hash_jam PARAMS ((struct hash_control *,
				     const char *key, PTR value));
d53 2
a54 2
extern PTR hash_replace PARAMS ((struct hash_control *, const char *key,
				 PTR value));
d59 1
a59 1
extern PTR hash_find PARAMS ((struct hash_control *, const char *key));
d64 1
a64 1
extern PTR hash_delete PARAMS ((struct hash_control *, const char *key));
d69 2
a70 2
extern void hash_traverse PARAMS ((struct hash_control *,
				   void (*pfn) (const char *key, PTR value)));
d75 2
a76 2
extern void hash_print_statistics PARAMS ((FILE *, const char *name,
					   struct hash_control *));
@


1.3
log
@	* hash.h: Neaten.  Declare hash_traverse.
	* hash.c: Complete rewrite based on BFD hashing code.
@
text
@d2 1
a2 1
   Copyright (C) 1987, 92, 93, 95, 1999 Free Software Foundation, Inc.
@


1.3.4.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1987, 1992, 1993, 1995, 1999 Free Software Foundation, Inc.
@


1.2
log
@/
Move bitfield overflow checks to after the md_apply_fix call in
fixup_segment so that md_apply_fix has a chance to modify value.
Handle 8 and 16-bit pcrel relocs for i386.
Prototypes and other minor code cleanups.
@
text
@d1 2
a2 2
/* hash.h - for hash.c
   Copyright (C) 1987, 1992 Free Software Foundation, Inc.
d17 3
a19 2
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d21 2
a22 2
#ifndef hashH
#define hashH
d26 1
a26 19
/* returns control block */
struct hash_control *hash_new PARAMS ((void));
void hash_die PARAMS ((struct hash_control *));
/* returns previous value */
PTR hash_delete PARAMS ((struct hash_control *, const char *str));
/* returns previous value */
PTR hash_replace PARAMS ((struct hash_control *, const char *str, PTR val));
/* returns error string or null */
const char *hash_insert PARAMS ((struct hash_control *, const char *str,
				 PTR val));
/* returns value */
PTR hash_find PARAMS ((struct hash_control *, const char *str));
/* returns error text or null (internal) */
const char *hash_jam PARAMS ((struct hash_control *, const char *str,
			      PTR val));

void hash_print_statistics PARAMS ((FILE *, const char *,
				    struct hash_control *));
#endif /* #ifdef hashH */
d28 51
a78 1
/* end of hash.h */
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
/* end of hash.c */
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

