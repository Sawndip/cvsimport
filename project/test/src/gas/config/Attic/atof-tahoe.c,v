head	1.6;
access;
symbols
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-csl-gxxpro-3_4-branch:1.5.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.4
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.2
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.4
	csl-arm-2004-q3:1.4
	binutils-2_15:1.4
	binutils-2_15-branchpoint:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	binutils-2_15-branch:1.4.0.6
	cagney_bfdfile-20040213-branch:1.4.0.4
	cagney_bfdfile-20040213-branchpoint:1.4
	cagney_bigcore-20040122-branch:1.4.0.2
	cagney_bigcore-20040122-branchpoint:1.4
	csl-arm-2003-q4:1.4
	binutils-2_14:1.3
	binutils-2_14-branch:1.3.0.6
	binutils-2_14-branchpoint:1.3
	binutils-2_13_2_1:1.3
	binutils-2_13_2:1.3
	binutils-2_13_1:1.3
	binutils-2_13:1.3
	binutils-2_13-branchpoint:1.3
	binutils-2_13-branch:1.3.0.4
	binutils-2_12_1:1.3
	binutils-2_12:1.3
	binutils-2_12-branch:1.3.0.2
	binutils-2_12-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	binutils-2_11_2:1.2.2.1
	binutils-2_11_1:1.2.2.1
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.5
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2005.08.11.01.25.23;	author amodra;	state dead;
branches;
next	1.5;

1.5
date	2005.03.03.11.47.48;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.22.15.32.28;	author kazu;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.08.23.24.22;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.07.19.54.34;	author kazu;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.28.41;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.03.07.28.41;	author rth;	state Exp;
branches;
next	;

1.2.2.1
date	2001.06.07.03.15.26;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* README-vms: Delete.
	* config-gas.com: Delete.
	* makefile.vms: Delete.
	* vmsconf.sh: Delete.
	* config/atof-tahoe.c: Delete.
	* config/m88k-opcode.h: Delete.
	* config/obj-bout.c: Delete.
	* config/obj-bout.h: Delete.
	* config/obj-hp300.c: Delete.
	* config/obj-hp300.h: Delete.
	* config/tc-a29k.c: Delete.
	* config/tc-a29k.h: Delete.
	* config/tc-h8500.c: Delete.
	* config/tc-h8500.h: Delete.
	* config/tc-m88k.c: Delete.
	* config/tc-m88k.h: Delete.
	* config/tc-tahoe.c: Delete.
	* config/tc-tahoe.h: Delete.
	* config/tc-tic80.c: Delete.
	* config/tc-tic80.h: Delete.
	* config/tc-w65.c: Delete.
	* config/tc-w65.h: Delete.
	* config/te-aux.h: Delete.
	* config/te-delt88.h: Delete.
	* config/te-delta.h: Delete.
	* config/te-dpx2.h: Delete.
	* config/te-hp300.h: Delete.
	* config/te-ic960.h: Delete.
	* config/vms-a-conf.h: Delete.
	* doc/c-a29k.texi: Delete.
	* doc/c-h8500.texi: Delete.
	* doc/c-m88k.texi: Delete.
	* README: Remove obsolete examples, and list of supported targets.
	* Makefile.am: Remove a29k, h8500, m88k, tahoe, tic80, w65,
	bout and hp300 support.
	(DEP_FLAGS): Don't define BFD_ASSEMBLER.
	* configure.in: Remove --enable-bfd-assembler, need_bfd,
	primary_bfd_gas.
	* configure.tgt: Remove a29k, h8300-coff, h8500-*, i960 non-elf,
	m68k non bfd, m88k, or32-coff, tic80-*, vax non-bfd, w65k-*, *-nindy.
	* as.c: Remove all non-BFD_ASSEMBLER code, support for above targets.
	* as.h: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.c: Likewise.
	* ehopt.c: Likewise.
	* input-file.c: Likewise.
	* listing.c: Likewise.
	* literal.c: Likewise.
	* messages.c: Likewise.
	* obj.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* stabs.c: Likewise.
	* struc-symbol.h: Likewise.
	* subsegs.c: Likewise.
	* subsegs.h: Likewise.
	* symbols.c: Likewise.
	* symbols.h: Likewise.
	* tc.h: Likewise.
	* write.c: Likewise.
	* write.h: Likewise.
	* config/aout_gnu.h: Likewise.
	* config/obj-aout.c: Likewise.
	* config/obj-aout.h: Likewise.
	* config/obj-coff.c: Likewise.
	* config/obj-coff.h: Likewise.
	* config/obj-evax.h: Likewise.
	* config/obj-ieee.h: Likewise.
	* config/tc-arm.c: Likewise.
	* config/tc-arm.h: Likewise.
	* config/tc-avr.c: Likewise.
	* config/tc-avr.h: Likewise.
	* config/tc-crx.h: Likewise.
	* config/tc-d10v.h: Likewise.
	* config/tc-d30v.h: Likewise.
	* config/tc-dlx.h: Likewise.
	* config/tc-fr30.h: Likewise.
	* config/tc-frv.h: Likewise.
	* config/tc-h8300.c: Likewise.
	* config/tc-h8300.h: Likewise.
	* config/tc-hppa.h: Likewise.
	* config/tc-i370.h: Likewise.
	* config/tc-i386.c: Likewise.
	* config/tc-i386.h: Likewise.
	* config/tc-i860.h: Likewise.
	* config/tc-i960.c: Likewise.
	* config/tc-i960.h: Likewise.
	* config/tc-ip2k.h: Likewise.
	* config/tc-iq2000.h: Likewise.
	* config/tc-m32c.h: Likewise.
	* config/tc-m32r.h: Likewise.
	* config/tc-m68hc11.h: Likewise.
	* config/tc-m68k.c: Likewise.
	* config/tc-m68k.h: Likewise.
	* config/tc-maxq.c: Likewise.
	* config/tc-maxq.h: Likewise.
	* config/tc-mcore.c: Likewise.
	* config/tc-mcore.h: Likewise.
	* config/tc-mn10200.h: Likewise.
	* config/tc-mn10300.c: Likewise.
	* config/tc-mn10300.h: Likewise.
	* config/tc-ms1.h: Likewise.
	* config/tc-msp430.c: Likewise.
	* config/tc-msp430.h: Likewise.
	* config/tc-ns32k.c: Likewise.
	* config/tc-ns32k.h: Likewise.
	* config/tc-openrisc.h: Likewise.
	* config/tc-or32.c: Likewise.
	* config/tc-or32.h: Likewise.
	* config/tc-ppc.c: Likewise.
	* config/tc-ppc.h: Likewise.
	* config/tc-s390.h: Likewise.
	* config/tc-sh.c: Likewise.
	* config/tc-sh.h: Likewise.
	* config/tc-sparc.c: Likewise.
	* config/tc-tic30.c: Likewise.
	* config/tc-tic30.h: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic4x.h: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-tic54x.h: Likewise.
	* config/tc-v850.h: Likewise.
	* config/tc-vax.c: Likewise.
	* config/tc-vax.h: Likewise.
	* config/tc-xstormy16.h: Likewise.
	* config/tc-xtensa.h: Likewise.
	* config/tc-z8k.c: Likewise.
	* config/tc-z8k.h: Likewise.
	* config/vms-a-conf.h
	* doc/Makefile.am: Likewise.
	* doc/all.texi: Likewise.
	* doc/as.texinfo: Likewise.
	* doc/Makefile.in: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* config.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@/* atof_tahoe.c - turn a string into a Tahoe floating point number
   Copyright 1987, 1993, 2000, 2003 Free Software Foundation, Inc.

/* This is really a simplified version of atof_vax.c. I glommed it wholesale
   and then shaved it down. I don't even know how it works. (Don't you find
   my honesty refreshing?  Devon E Bowen <bowen@@cs.buffalo.edu>

   I don't allow uppercase letters in the precision descriptors.
   i.e. 'f' and 'd' are allowed but 'F' and 'D' aren't.  */

#include "as.h"

/* Precision in LittleNums.  */
#define MAX_PRECISION (4)
#define D_PRECISION (4)
#define F_PRECISION (2)

/* Precision in chars.  */
#define D_PRECISION_CHARS (8)
#define F_PRECISION_CHARS (4)

/* Length in LittleNums of guard bits.  */
#define GUARD (2)

static const long int mask[] =
{
  0x00000000,
  0x00000001,
  0x00000003,
  0x00000007,
  0x0000000f,
  0x0000001f,
  0x0000003f,
  0x0000007f,
  0x000000ff,
  0x000001ff,
  0x000003ff,
  0x000007ff,
  0x00000fff,
  0x00001fff,
  0x00003fff,
  0x00007fff,
  0x0000ffff,
  0x0001ffff,
  0x0003ffff,
  0x0007ffff,
  0x000fffff,
  0x001fffff,
  0x003fffff,
  0x007fffff,
  0x00ffffff,
  0x01ffffff,
  0x03ffffff,
  0x07ffffff,
  0x0fffffff,
  0x1fffffff,
  0x3fffffff,
  0x7fffffff,
  0xffffffff
};

/* Shared between flonum_gen2tahoe and next_bits.  */
static int bits_left_in_littlenum;
static LITTLENUM_TYPE *littlenum_pointer;
static LITTLENUM_TYPE *littlenum_end;

#if __STDC__ == 1

int flonum_gen2tahoe (int format_letter, FLONUM_TYPE * f,
		      LITTLENUM_TYPE * words);

#else /* not __STDC__  */

int flonum_gen2tahoe ();

#endif /* not __STDC__  */

static int
next_bits (number_of_bits)
     int number_of_bits;
{
  int return_value;

  if (littlenum_pointer < littlenum_end)
    return 0;
  if (number_of_bits >= bits_left_in_littlenum)
    {
      return_value = mask[bits_left_in_littlenum] & *littlenum_pointer;
      number_of_bits -= bits_left_in_littlenum;
      return_value <<= number_of_bits;
      bits_left_in_littlenum = LITTLENUM_NUMBER_OF_BITS - number_of_bits;
      littlenum_pointer--;
      if (littlenum_pointer >= littlenum_end)
	return_value |= ((*littlenum_pointer) >> (bits_left_in_littlenum)) &
	  mask[number_of_bits];
    }
  else
    {
      bits_left_in_littlenum -= number_of_bits;
      return_value = mask[number_of_bits] &
	((*littlenum_pointer) >> bits_left_in_littlenum);
    }
  return return_value;
}

static void
make_invalid_floating_point_number (words)
     LITTLENUM_TYPE *words;
{
  /* Floating Reserved Operand Code.  */
  *words = 0x8000;
}

static int			/* 0 means letter is OK.  */
what_kind_of_float (letter, precisionP, exponent_bitsP)
     /* In: lowercase please. What kind of float?  */
     char letter;

     /* Number of 16-bit words in the float.  */
     int *precisionP;

     /* Number of exponent bits.  */
     long int *exponent_bitsP;
{
  int retval;			/* 0: OK.  */

  retval = 0;
  switch (letter)
    {
    case 'f':
      *precisionP = F_PRECISION;
      *exponent_bitsP = 8;
      break;

    case 'd':
      *precisionP = D_PRECISION;
      *exponent_bitsP = 8;
      break;

    default:
      retval = 69;
      break;
    }
  return (retval);
}

/* Warning: This returns 16-bit LITTLENUMs, because that is what the
   VAX thinks in.  It is up to the caller to figure out any alignment
   problems and to conspire for the bytes/word to be emitted in the
   right order. Bigendians beware!  */

char *				/* Return pointer past text consumed.  */
atof_tahoe (str, what_kind, words)
     char *str;			/* Text to convert to binary.  */
     char what_kind;		/* 'd', 'f', 'g', 'h' */
     LITTLENUM_TYPE *words;	/* Build the binary here.  */
{
  FLONUM_TYPE f;
  LITTLENUM_TYPE bits[MAX_PRECISION + MAX_PRECISION + GUARD];
  /* Extra bits for zeroed low-order bits.  */
  /* The 1st MAX_PRECISION are zeroed, the last contain flonum bits.  */
  char *return_value;
  int precision;		/* Number of 16-bit words in the format.  */
  long int exponent_bits;

  return_value = str;
  f.low = bits + MAX_PRECISION;
  f.high = NULL;
  f.leader = NULL;
  f.exponent = NULL;
  f.sign = '\0';

  if (what_kind_of_float (what_kind, &precision, &exponent_bits))
    {
      /* We lost.  */
      return_value = NULL;
      make_invalid_floating_point_number (words);
    }
  if (return_value)
    {
      memset (bits, '\0', sizeof (LITTLENUM_TYPE) * MAX_PRECISION);

      /* Use more LittleNums than seems necessary:
	 the highest flonum may have 15 leading 0 bits, so could be
	 useless.  */
      f.high = f.low + precision - 1 + GUARD;

      if (atof_generic (&return_value, ".", "eE", &f))
	{
	  make_invalid_floating_point_number (words);
	  /* We lost.  */
	  return_value = NULL;
	}
      else
	{
	  if (flonum_gen2tahoe (what_kind, &f, words))
	    return_value = NULL;
	}
    }
  return return_value;
}

/* In: a flonum, a Tahoe floating point format.
   Out: a Tahoe floating-point bit pattern.  */

int				/* 0: OK.  */
flonum_gen2tahoe (format_letter, f, words)
     char format_letter;	/* One of 'd' 'f'.  */
     FLONUM_TYPE *f;
     LITTLENUM_TYPE *words;	/* Deliver answer here.  */
{
  LITTLENUM_TYPE *lp;
  int precision;
  long int exponent_bits;
  int return_value;		/* 0 == OK.  */

  return_value =
    what_kind_of_float (format_letter, &precision, &exponent_bits);
  if (return_value != 0)
    {
      make_invalid_floating_point_number (words);
    }
  else
    {
      if (f->low > f->leader)
	{
	  /* 0.0e0 seen.  */
	  memset (words, '\0', sizeof (LITTLENUM_TYPE) * precision);
	}
      else
	{
	  long int exponent_1;
	  long int exponent_2;
	  long int exponent_3;
	  long int exponent_4;
	  int exponent_skippage;
	  LITTLENUM_TYPE word1;

	  /* JF: Deal with new Nan, +Inf and -Inf codes.  */
	  if (f->sign != '-' && f->sign != '+')
	    {
	      make_invalid_floating_point_number (words);
	      return return_value;
	    }
	  /* All tahoe floating_point formats have:
	     Bit 15 is sign bit.
	     Bits 14:n are excess-whatever exponent.
	     Bits n-1:0 (if any) are most significant bits of fraction.
	     Bits 15:0 of the next word are the next most significant bits.
	     And so on for each other word.

	     So we need: number of bits of exponent, number of bits of
	     mantissa.  */

	  bits_left_in_littlenum = LITTLENUM_NUMBER_OF_BITS;
	  littlenum_pointer = f->leader;
	  littlenum_end = f->low;

	  /* Seek (and forget) 1st significant bit.  */
	  for (exponent_skippage = 0;
	       !next_bits (1);
	       exponent_skippage++)
	    ;

	  exponent_1 = f->exponent + f->leader + 1 - f->low;

	  /* Radix LITTLENUM_RADIX, point just higher than f -> leader.  */
	  exponent_2 = exponent_1 * LITTLENUM_NUMBER_OF_BITS;

	  /* Radix 2.  */
	  exponent_3 = exponent_2 - exponent_skippage;

	  /* Forget leading zeros, forget 1st bit.  */
	  exponent_4 = exponent_3 + (1 << (exponent_bits - 1));

	  /* Offset exponent.  */

	  if (exponent_4 & ~mask[exponent_bits])
	    {
	      /* Exponent overflow. Lose immediately.  */

	      make_invalid_floating_point_number (words);

	      /* We leave return_value alone: admit we read the
	        number, but return a floating exception because we
	        can't encode the number.  */
	    }
	  else
	    {
	      lp = words;

	      /* Word 1.  Sign, exponent and perhaps high bits.  */
	      /* Assume 2's complement integers.  */
	      word1 = ((exponent_4 & mask[exponent_bits])
		       << (15 - exponent_bits))
		| ((f->sign == '+') ? 0 : 0x8000)
		| next_bits (15 - exponent_bits);
	      *lp++ = word1;

	      /* The rest of the words are just mantissa bits.  */
	      for (; lp < words + precision; lp++)
		*lp = next_bits (LITTLENUM_NUMBER_OF_BITS);

	      if (next_bits (1))
		{
		  /* Since the NEXT bit is a 1, round UP the mantissa.
		     The cunning design of these hidden-1 floats permits
		     us to let the mantissa overflow into the exponent, and
		     it 'does the right thing'. However, we lose if the
		     highest-order bit of the lowest-order word flips.
		     Is that clear?  */

		  unsigned long int carry;

		  /* #if (sizeof(carry)) < ((sizeof(bits[0]) *
		     BITS_PER_CHAR) + 2) Please allow at least 1 more
		     bit in carry than is in a LITTLENUM.  We need
		     that extra bit to hold a carry during a LITTLENUM
		     carry propagation. Another extra bit (kept 0)
		     will assure us that we don't get a sticky sign
		     bit after shifting right, and that permits us to
		     propagate the carry without any masking of bits.
		     #endif  */
		  for (carry = 1, lp--;
		       carry && (lp >= words);
		       lp--)
		    {
		      carry = *lp + carry;
		      *lp = carry;
		      carry >>= LITTLENUM_NUMBER_OF_BITS;
		    }

		  if ((word1 ^ *words)
		      & (1 << (LITTLENUM_NUMBER_OF_BITS - 1)))
		    {
		      make_invalid_floating_point_number (words);
		      /* We leave return_value alone: admit we read
			 the number, but return a floating exception
			 because we can't encode the number.  */
		    }
		}		/* if (we needed to round up)  */
	    }			/* if (exponent overflow)  */
	}			/* if (0.0e0)  */
    }				/* if (float_type was OK)  */
  return return_value;
}

/* In:	input_line_pointer -> the 1st character of a floating-point
 *		number.
 *	1 letter denoting the type of statement that wants a
 *		binary floating point number returned.
 *	Address of where to build floating point literal.
 *		Assumed to be 'big enough'.
 *	Address of where to return size of literal (in chars).
 *
 * Out:	Input_line_pointer -> of next char after floating number.
 *	Error message, or 0.
 *	Floating point literal.
 *	Number of chars we used for the literal.  */

char *
md_atof (what_statement_type, literalP, sizeP)
     char what_statement_type;
     char *literalP;
     int *sizeP;
{
  LITTLENUM_TYPE words[MAX_PRECISION];
  register char kind_of_float;
  register int number_of_chars;
  register LITTLENUM_TYPE *littlenum_pointer;

  switch (what_statement_type)
    {
    case 'f':			/* .ffloat  */
    case 'd':			/* .dfloat  */
      kind_of_float = what_statement_type;
      break;

    default:
      kind_of_float = 0;
      break;
    }

  if (kind_of_float)
    {
      register LITTLENUM_TYPE *limit;

      input_line_pointer = atof_tahoe (input_line_pointer,
				       kind_of_float,
				       words);
      /* The atof_tahoe() builds up 16-bit numbers.
	 Since the assembler may not be running on
	 a different-endian machine, be very careful about
	 converting words to chars.  */
      number_of_chars = (kind_of_float == 'f' ? F_PRECISION_CHARS :
			 (kind_of_float == 'd' ? D_PRECISION_CHARS : 0));
      know (number_of_chars <= MAX_PRECISION * sizeof (LITTLENUM_TYPE));
      limit = words + (number_of_chars / sizeof (LITTLENUM_TYPE));
      for (littlenum_pointer = words;
	   littlenum_pointer < limit;
	   littlenum_pointer++)
	{
	  md_number_to_chars (literalP, *littlenum_pointer,
			      sizeof (LITTLENUM_TYPE));
	  literalP += sizeof (LITTLENUM_TYPE);
	}
    }
  else
    {
      number_of_chars = 0;
    }

  *sizeP = number_of_chars;
  return kind_of_float ? 0 : _("Bad call to md_atof()");
}
@


1.5
log
@update copyright dates
@
text
@@


1.4
log
@	* config/atof-tahoe.c: Fix comment typos.
	* config/m68k-parse.y: Likewise.
	* config/obj-aout.c: Likewise.
	* config/obj-bout.c: Likewise.
	* config/obj-vms.c: Likewise.
	* config/tc-tahoe.c: Likewise.
	* config/tc-tic30.c: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-v850.c: Likewise.
	* config/tc-vax.c: Likewise.
	* config/te-delt88.h: Likewise.
	* config/te-delta.h: Likewise.
	* config/te-generic.h: Likewise.
	* config/te-macos.h: Likewise.
	* config/te-ppcnw.h: Likewise.
	* config/te-psos.h: Likewise.
	* config/te-sun3.h: Likewise.
	* config/te-tmips.h: Likewise.
	* config/xtensa-relax.c: Likewise.
@
text
@d2 1
a2 1
   Copyright 1987, 1993, 2000 Free Software Foundation, Inc.
@


1.3
log
@Fix copyright notices
@
text
@d8 1
a8 1
   I don't allow uppercase letters in the precision descrpitors.
@


1.2
log
@2000-08-05  Kazu Hirata  <kazu@@hxi.com>

	* config/atof-ieee.c: Fix formatting.
	* config/atof-tahoe.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1987, 1998 Free Software Foundation, Inc.  */
@


1.2.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1987, 1993, 2000 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@a0 1

d2 1
a2 2
   Copyright (C) 1987, 1998 Free Software Foundation, Inc.
   */
d6 1
a6 1
   my honesty refreshing?  bowen@@cs.Buffalo.EDU (Devon E Bowen)
d8 2
a9 2
   I don't allow uppercase letters in the precision descrpitors. Ie 'f' and
   'd' are allowed but 'F' and 'D' aren't */
d13 1
a13 1
/* Precision in LittleNums. */
d18 1
a18 1
/* Precision in chars. */
d22 1
a22 1
/* Length in LittleNums of guard bits. */
d62 1
a62 2

/* Shared between flonum_gen2tahoe and next_bits */
d69 2
a70 1
int flonum_gen2tahoe (int format_letter, FLONUM_TYPE * f, LITTLENUM_TYPE * words);
d72 1
a72 1
#else /* not __STDC__ */
d76 1
a76 2
#endif /* not __STDC__ */

d103 1
a103 1
  return (return_value);
d110 2
a111 1
  *words = 0x8000;		/* Floating Reserved Operand Code */
d114 1
a114 1
static int			/* 0 means letter is OK. */
d116 8
a123 3
     char letter;		/* In: lowercase please. What kind of float? */
     int *precisionP;		/* Number of 16-bit words in the float. */
     long int *exponent_bitsP;	/* Number of exponent bits. */
d125 1
a125 1
  int retval;			/* 0: OK. */
d147 4
a150 8
/***********************************************************************\
*									*
*	Warning: this returns 16-bit LITTLENUMs, because that is	*
*	what the VAX thinks in. It is up to the caller to figure	*
*	out any alignment problems and to conspire for the bytes/word	*
*	to be emitted in the right order. Bigendians beware!		*
*									*
\***********************************************************************/
d152 1
a152 1
char *				/* Return pointer past text consumed. */
d154 1
a154 1
     char *str;			/* Text to convert to binary. */
d156 1
a156 1
     LITTLENUM_TYPE *words;	/* Build the binary here. */
d160 2
a161 3
  /* Extra bits for zeroed low-order bits. */
  /* The 1st MAX_PRECISION are zeroed, */
  /* the last contain flonum bits. */
d163 1
a163 1
  int precision;		/* Number of 16-bit words in the format. */
d175 2
a176 1
      return_value = NULL;	/* We lost. */
d183 3
a185 3
      /* Use more LittleNums than seems */
      /* necessary: the highest flonum may have */
      /* 15 leading 0 bits, so could be useless. */
d191 2
a192 1
	  return_value = NULL;	/* we lost */
d197 1
a197 3
	    {
	      return_value = NULL;
	    }
d200 1
a200 1
  return (return_value);
d203 2
a204 4
/*
 * In: a flonum, a Tahoe floating point format.
 * Out: a Tahoe floating-point bit pattern.
 */
d206 1
a206 1
int				/* 0: OK. */
d208 1
a208 1
     char format_letter;	/* One of 'd' 'f'. */
d210 1
a210 1
     LITTLENUM_TYPE *words;	/* Deliver answer here. */
d215 1
a215 1
  int return_value;		/* 0 == OK. */
d217 2
a218 1
  return_value = what_kind_of_float (format_letter, &precision, &exponent_bits);
d227 1
a227 1
	  /* 0.0e0 seen. */
d239 1
a239 1
	  /* JF: Deal with new Nan, +Inf and -Inf codes */
d245 9
a253 11
	  /*
	   * All tahoe floating_point formats have:
	   * Bit 15 is sign bit.
	   * Bits 14:n are excess-whatever exponent.
	   * Bits n-1:0 (if any) are most significant bits of fraction.
	   * Bits 15:0 of the next word are the next most significant bits.
	   * And so on for each other word.
	   *
	   * So we need: number of bits of exponent, number of bits of
	   * mantissa.
	   */
d258 2
a259 1
	  /* Seek (and forget) 1st significant bit */
d263 2
a264 2
	    {
	    }
d266 2
a267 1
	  /* Radix LITTLENUM_RADIX, point just higher than f -> leader. */
d269 2
a270 1
	  /* Radix 2. */
d272 2
a273 1
	  /* Forget leading zeros, forget 1st bit. */
d275 2
a276 1
	  /* Offset exponent. */
d280 1
a280 3
	      /*
	       * Exponent overflow. Lose immediately.
	       */
d284 3
a286 5
	      /*
	       * We leave return_value alone: admit we read the
	       * number, but return a floating exception
	       * because we can't encode the number.
	       */
d292 4
a295 3
	      /* Word 1. Sign, exponent and perhaps high bits. */
	      /* Assume 2's complement integers. */
	      word1 = ((exponent_4 & mask[exponent_bits]) << (15 - exponent_bits))
d300 1
a300 1
	      /* The rest of the words are just mantissa bits. */
d302 1
a302 3
		{
		  *lp = next_bits (LITTLENUM_NUMBER_OF_BITS);
		}
d306 6
a311 8
		  /*
		   * Since the NEXT bit is a 1, round UP the mantissa.
		   * The cunning design of these hidden-1 floats permits
		   * us to let the mantissa overflow into the exponent, and
		   * it 'does the right thing'. However, we lose if the
		   * highest-order bit of the lowest-order word flips.
		   * Is that clear?
		   */
d315 9
a323 9
		  /*
		    #if (sizeof(carry)) < ((sizeof(bits[0]) * BITS_PER_CHAR) + 2)
		    Please allow at least 1 more bit in carry than is in a LITTLENUM.
		    We need that extra bit to hold a carry during a LITTLENUM carry
		    propagation. Another extra bit (kept 0) will assure us that we
		    don't get a sticky sign bit after shifting right, and that
		    permits us to propagate the carry without any masking of bits.
		    #endif
		    */
d333 2
a334 1
		  if ((word1 ^ *words) & (1 << (LITTLENUM_NUMBER_OF_BITS - 1)))
d337 3
a339 5
		      /*
		       * We leave return_value alone: admit we read the
		       * number, but return a floating exception
		       * because we can't encode the number.
		       */
d341 5
a345 5
		}		/* if (we needed to round up) */
	    }			/* if (exponent overflow) */
	}			/* if (0.0e0) */
    }				/* if (float_type was OK) */
  return (return_value);
d348 1
a348 4
/*
 *		md_atof()
 *
 * In:	input_line_pointer -> the 1st character of a floating-point
d359 1
a359 2
 *	Number of chars we used for the literal.
 */
d374 2
a375 2
    case 'f':			/* .ffloat */
    case 'd':			/* .dfloat */
d382 1
a382 1
    };
d391 4
a394 6
      /*
       * The atof_tahoe() builds up 16-bit numbers.
       * Since the assembler may not be running on
       * a different-endian machine, be very careful about
       * converting words to chars.
       */
d406 1
a406 1
	};
d411 1
a411 1
    };
a415 2

/* atof_tahoe.c */
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

