head	1.10;
access;
symbols
	binutils-2_24-branch:1.10.0.12
	binutils-2_24-branchpoint:1.10
	binutils-2_21_1:1.10
	binutils-2_23_2:1.10
	binutils-2_23_1:1.10
	binutils-2_23:1.10
	binutils-2_23-branch:1.10.0.10
	binutils-2_23-branchpoint:1.10
	binutils-2_22_branch:1.10.0.8
	binutils-2_22:1.10
	binutils-2_22-branch:1.10.0.6
	binutils-2_22-branchpoint:1.10
	binutils-2_21:1.10
	binutils-2_21-branch:1.10.0.4
	binutils-2_21-branchpoint:1.10
	binutils-2_20_1:1.10
	binutils-2_20:1.10
	binutils-arc-20081103-branch:1.8.0.8
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.10.0.2
	binutils-2_20-branchpoint:1.10
	dje-cgen-play1-branch:1.8.0.6
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.8.0.4
	arc-20081103-branchpoint:1.8
	binutils-2_19_1:1.8
	binutils-2_19:1.8
	binutils-2_19-branch:1.8.0.2
	binutils-2_19-branchpoint:1.8
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.2
	binutils-2_18-branchpoint:1.7
	binutils_latest_snapshot:1.10;
locks; strict;
comment	@ * @;


1.10
date	2009.09.02.07.24.20;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.24.19.51.27;	author tsmigiel;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.12.23.39.31;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.03.11.01.05;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.05.00.28.04;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.29.02.10.09;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.11.03.10.11;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.23.00.42.26;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.12.06.23.52;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.06.49.21;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.10
log
@update copyright dates
@
text
@/* spu.h -- Assembler for spu

   Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#ifndef TC_SPU
#define TC_SPU 1

#include "opcode/spu.h"

#define TARGET_FORMAT "elf32-spu"
#define TARGET_ARCH bfd_arch_spu
#define TARGET_NAME "elf32-spu"

#define TARGET_BYTES_BIG_ENDIAN 1

struct tc_fix_info {
  unsigned short arg_format;
  unsigned short insn_tag;
};

/* fixS will have a member named tc_fix_data of this type.  */
#define TC_FIX_TYPE struct tc_fix_info
#define TC_INIT_FIX_DATA(FIXP) \
  do						\
    {						\
      (FIXP)->tc_fix_data.arg_format = 0;	\
      (FIXP)->tc_fix_data.insn_tag = 0;		\
    }						\
  while (0)

/* Don't reduce function symbols to section symbols, and don't adjust
   references to PPU symbols.  */
#define tc_fix_adjustable(FIXP) \
  (!(S_IS_FUNCTION ((FIXP)->fx_addsy)			\
     || (FIXP)->fx_r_type == BFD_RELOC_SPU_PPU32	\
     || (FIXP)->fx_r_type == BFD_RELOC_SPU_PPU64	\
     || (FIXP)->fx_r_type == BFD_RELOC_SPU_ADD_PIC))

/* Keep relocs on calls.  Branches to function symbols are tail or
   sibling calls.  */
#define TC_FORCE_RELOCATION(FIXP) \
  ((FIXP)->tc_fix_data.insn_tag == M_BRSL		\
   || (FIXP)->tc_fix_data.insn_tag == M_BRASL		\
   || (((FIXP)->tc_fix_data.insn_tag == M_BR		\
	|| (FIXP)->tc_fix_data.insn_tag == M_BRA)	\
       && (FIXP)->fx_addsy != NULL			\
       && S_IS_FUNCTION ((FIXP)->fx_addsy))		\
   || (FIXP)->fx_r_type == BFD_RELOC_SPU_PPU32		\
   || (FIXP)->fx_r_type == BFD_RELOC_SPU_PPU64		\
   || (FIXP)->fx_r_type == BFD_RELOC_SPU_ADD_PIC	\
   || generic_force_reloc (FIXP))

/* Values passed to md_apply_fix don't include symbol values.  */
#define MD_APPLY_SYM_VALUE(FIX) 0

/* The spu uses pseudo-ops with no leading period.  */
#define NO_PSEUDO_DOT 1

/* Don't warn on word overflow; it happens on %hi relocs.  */
#undef WARN_SIGNED_OVERFLOW_WORD

#define DIFF_EXPR_OK

#define WORKING_DOT_WORD

#define md_number_to_chars number_to_chars_bigendian

#define md_convert_frag(b,s,f)		{as_fatal (_("spu convert_frag\n"));}

/* We don't need to do anything special for undefined symbols.  */
#define md_undefined_symbol(s) 0

extern symbolS *section_symbol (asection *);
#define md_operand(e) \
  do {								\
    if (strncasecmp (input_line_pointer, "@@ppu", 4) == 0)	\
      {								\
	e->X_op = O_symbol;					\
	if (abs_section_sym == NULL)				\
	  abs_section_sym = section_symbol (absolute_section);	\
	e->X_add_symbol = abs_section_sym;			\
	e->X_add_number = 0;					\
      }								\
  } while (0)

/* Fill in rs_align_code fragments.  */
extern void spu_handle_align (fragS *);
#define HANDLE_ALIGN(frag)  spu_handle_align (frag)

#define MAX_MEM_FOR_RS_ALIGN_CODE  (7 + 8)

#endif /* TC_SPU */
@


1.9
log
@include/elf/
        * spu.h (R_SPU_ADD_PIC): New.
bfd/
        * reloc.c (BFD_RELOC_SPU_ADD_PIC): Define.
        * bfd-in2.h: Regenerate.
        * libbfd.h: Regenerate.
        * elf32-spu.c (elf_howto_table): Add entries SPU_ADD_PIC.
        (spu_elf_bfd_to_reloc_type): Handle SPU_ADD_PIC.
        (spu_elf_relocate_section): Patch instructions marked by SPU_ADD_PIC.
gas/
        * config/tc-spu.c (md_apply_fix): Handle SPU_ADD_PIC.
        * config/tc-spu.h (tc_fix_adjustable): Don't adjust for SPU_ADD_PIC.
        (TC_FORCE_RELOCATION): Emit relocs for SPU_ADD_PIC.
ld/testsuite/
        * ld-spu/pic.d: New.
        * ld-spu/pic.s: New.
        * ld-spu/picdef.s: New.
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
@


1.8
log
@Banish PARAMS and PTR.  Convert to ISO C.
Delete unnecessary forward declarations.
@
text
@d53 2
a54 1
     || (FIXP)->fx_r_type == BFD_RELOC_SPU_PPU64))
d67 1
@


1.7
log
@Switch to GPLv3
@
text
@d3 1
a3 1
   Copyright 2006, 2007 Free Software Foundation, Inc.
d102 1
a102 1
extern void spu_handle_align PARAMS ((fragS *));
@


1.6
log
@	* config/tc-spu.c (spu_cons): Use deferred_expression.  Handle
	number@@ppu.
	(tc_gen_reloc): Abort if neither addsy or subsy is set.
	(md_apply_fix): Don't attempt to resolve SPU_PPU relocs.
	* config/tc-spu.h (md_operand): Handle @@ppu without sym.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.5
log
@	* config/tc-spu.h: Wrap in #ifndef/#endif.  Delete coff macros.
@
text
@d88 12
a99 2
/* We have no special operand handling.  */
#define md_operand(e)
@


1.4
log
@include/elf/
	* spu.h (R_SPU_PPU32, R_SPU_PPU64): Define.
bfd/
	* reloc.c (BFD_RELOC_SPU_PPU32, BFD_RELOC_SPU_PPU64): Define.
	* elf-bfd.h (struct elf_backend_data): Change return type of
	elf_backend_relocate_section to int.
	* elf32-spu.c (elf_howto_table): Add howtos for R_SPU_PPU32 and
	R_SPU_PPU64.
	(spu_elf_bfd_to_reloc_type): Convert new relocs.
	(spu_elf_count_relocs): New function.
	(elf_backend_count_relocs): Define.
	(spu_elf_relocate_section): Arrange to emit R_SPU_PPU32 and
	R_SPU_PPU64 relocs.
	* elflink.c (elf_link_input_bfd): Emit relocs if relocate_section
	returns 2.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
gas/
	* config/tc-spu.c (md_pseudo_table): Add int, long, quad.  Call
	spu_cons for word.
	(md_assemble): Tidy use of insn.flag.
	(get_imm): Likewise.  Handle uppercase input too.
	(spu_cons): New function.
	* config/tc-spu.h (tc_fix_adjustable): Don't adjust SPU_PPU relocs.
	(TC_FORCE_RELOCATION): Don't resolve them either.
binutils/
	* embedspu.sh (find_prog): Prefer prog in same dir as embedspu
	over one found on the users path.
	(main): Generate .reloc for each R_SPU_PPU* reloc.
@
text
@d22 2
a23 1
#define TC_SPU
a26 1
#ifdef OBJ_ELF
a29 1
#endif
a32 15
#ifndef TARGET_NAME
#define TARGET_NAME "coff-spu"
#endif

#ifndef TARGET_ARCH
#define TARGET_ARCH bfd_arch_spu
#endif

#define COFF_MAGIC SPU_MAGIC
#define BFD_ARCH bfd_arch_spu

#define NEED_FX_R_TYPE
#define TC_KEEP_FX_OFFSET
/* #define TC_CONS_RELOC RELOC_32 */

a76 1
#ifdef OBJ_ELF
a77 1
#endif
d97 1
a97 18
#ifdef SPUCOFF

/* Whether a reloc should be output.  */
#define TC_COUNT_RELOC(fixp) ((fixp)->fx_addsy != NULL || (fixp)->fx_subsy != NULL)

/* Get the BFD reloc type to use for a gas fixS structure.  */
#define TC_COFF_FIX2RTYPE(fixp) tc_coff_fix2rtype (fixp)

/* No special hook needed for symbols.  */
#define tc_coff_symbol_emit_hook(s)

/* Align sections to a four byte boundary.  */
#ifndef max
#define max(a,b)	(((a) > (b)) ? (a) : (b))
#endif
#define SUB_SEGMENT_ALIGN(SEG)	max (section_alignment[(int) (SEG)], 4)

#endif /* SPUCOFF */
@


1.3
log
@	* config/tc-spu.c: Don't include opcode/spu.h.
	(md_assemble): Set tc_fix_data.insn_tag and arg_format.
	(md_apply_fix): Adjust.
	* config/tc-spu.h: Include opcode/spu.h.
	(struct tc_fix_info): New.
	(TC_FIX_TYPE, TC_INIT_FIX_DATA): Adjust.
	(TC_FORCE_RELOCATION): Define.
@
text
@d64 6
a69 2
/* Don't reduce function symbols to section symbols.  */
#define tc_fix_adjustable(FIXP) (!S_IS_FUNCTION ((FIXP)->fx_addsy))
d80 2
@


1.2
log
@	* config/tc-spu.h (TC_RELOC_RTSYM_LOC_FIXUP): Delete.
	* config/tc-m32r.h (TC_RELOC_RTSYM_LOC_FIXUP): Delete.
	* config/tc-mn10300.h (TC_RELOC_RTSYM_LOC_FIXUP): Delete.
	(TC_FORCE_RELOCATION): Define.
	(TC_FORCE_RELOCATION_LOCAL): Define.
	* config/tc-mn10300.c (mn10300_fix_adjustable): Adjust.
@
text
@d24 2
d49 14
a62 3
/* If defined, fixS will have a member named tc_fix_data of this type.  */
#define TC_FIX_TYPE int
#define TC_INIT_FIX_DATA(FIXP) ((FIXP)->tc_fix_data = 0)
d67 11
@


1.1
log
@New Cell SPU port.
@
text
@d3 1
a3 1
   Copyright 2006 Free Software Foundation, Inc.
a56 12
/* This expression evaluates to false if the relocation is for a local 
   object for which we still want to do the relocation at runtime.
   True if we are willing to perform this relocation while building
   the .o file.  This is only used for pcrel relocations.  */

#define TC_RELOC_RTSYM_LOC_FIXUP(FIX)				\
  ((FIX)->fx_addsy == NULL					\
   || (! S_IS_EXTERNAL ((FIX)->fx_addsy)			\
       && ! S_IS_WEAK ((FIX)->fx_addsy)				\
       && S_IS_DEFINED ((FIX)->fx_addsy)			\
       && ! S_IS_COMMON ((FIX)->fx_addsy)))

@

