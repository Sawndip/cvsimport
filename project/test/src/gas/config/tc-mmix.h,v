head	1.15;
access;
symbols
	binutils-2_24-branch:1.15.0.2
	binutils-2_24-branchpoint:1.15
	binutils-2_21_1:1.14
	binutils-2_23_2:1.14.10.1
	binutils-2_23_1:1.14.10.1
	binutils-2_23:1.14.10.1
	binutils-2_23-branch:1.14.0.10
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.8
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.6
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.4
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.14
	binutils-2_20:1.14
	binutils-arc-20081103-branch:1.13.0.6
	binutils-arc-20081103-branchpoint:1.13
	binutils-2_20-branch:1.14.0.2
	binutils-2_20-branchpoint:1.14
	dje-cgen-play1-branch:1.13.0.4
	dje-cgen-play1-branchpoint:1.13
	arc-20081103-branch:1.13.0.2
	arc-20081103-branchpoint:1.13
	binutils-2_19_1:1.12
	binutils-2_19:1.12
	binutils-2_19-branch:1.12.0.4
	binutils-2_19-branchpoint:1.12
	binutils-2_18:1.12
	binutils-2_18-branch:1.12.0.2
	binutils-2_18-branchpoint:1.12
	binutils-csl-coldfire-4_1-32:1.10
	binutils-csl-sourcerygxx-4_1-32:1.10
	binutils-csl-innovasic-fido-3_4_4-33:1.10
	binutils-csl-sourcerygxx-3_4_4-32:1.7
	binutils-csl-coldfire-4_1-30:1.10
	binutils-csl-sourcerygxx-4_1-30:1.10
	binutils-csl-coldfire-4_1-28:1.10
	binutils-csl-sourcerygxx-4_1-29:1.10
	binutils-csl-sourcerygxx-4_1-28:1.10
	binutils-csl-arm-2006q3-27:1.10
	binutils-csl-sourcerygxx-4_1-27:1.10
	binutils-csl-arm-2006q3-26:1.10
	binutils-csl-sourcerygxx-4_1-26:1.10
	binutils-csl-sourcerygxx-4_1-25:1.10
	binutils-csl-sourcerygxx-4_1-24:1.10
	binutils-csl-sourcerygxx-4_1-23:1.10
	binutils-csl-sourcerygxx-4_1-21:1.10
	binutils-csl-arm-2006q3-21:1.10
	binutils-csl-sourcerygxx-4_1-22:1.10
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.10
	binutils-csl-sourcerygxx-4_1-20:1.10
	binutils-csl-arm-2006q3-19:1.10
	binutils-csl-sourcerygxx-4_1-19:1.10
	binutils-csl-sourcerygxx-4_1-18:1.10
	binutils-csl-renesas-4_1-9:1.10
	binutils-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-renesas-4_1-8:1.10
	binutils-csl-renesas-4_1-7:1.10
	binutils-csl-renesas-4_1-6:1.10
	binutils-csl-sourcerygxx-4_1-17:1.10
	binutils-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-15:1.10
	binutils-csl-sourcerygxx-4_1-13:1.10
	binutils-2_17:1.10
	binutils-csl-sourcerygxx-4_1-12:1.10
	binutils-csl-sourcerygxx-3_4_4-21:1.10
	binutils-csl-wrs-linux-3_4_4-24:1.7
	binutils-csl-wrs-linux-3_4_4-23:1.7
	binutils-csl-sourcerygxx-4_1-9:1.10
	binutils-csl-sourcerygxx-4_1-8:1.10
	binutils-csl-sourcerygxx-4_1-7:1.10
	binutils-csl-arm-2006q1-6:1.10
	binutils-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-wrs-linux-3_4_4-22:1.7
	binutils-csl-coldfire-4_1-11:1.10
	binutils-csl-sourcerygxx-3_4_4-19:1.10
	binutils-csl-coldfire-4_1-10:1.10
	binutils-csl-sourcerygxx-4_1-5:1.10
	binutils-csl-sourcerygxx-4_1-4:1.10
	binutils-csl-wrs-linux-3_4_4-21:1.7
	binutils-csl-morpho-4_1-4:1.10
	binutils-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-wrs-linux-3_4_4-20:1.7
	binutils-2_17-branch:1.10.0.4
	binutils-2_17-branchpoint:1.10
	binutils-csl-2_17-branch:1.10.0.2
	binutils-csl-2_17-branchpoint:1.10
	binutils-csl-gxxpro-3_4-branch:1.7.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.7
	binutils-2_16_1:1.7
	binutils-csl-arm-2005q1b:1.7
	binutils-2_16:1.7
	binutils-csl-arm-2005q1a:1.7
	binutils-csl-arm-2005q1-branch:1.7.0.10
	binutils-csl-arm-2005q1-branchpoint:1.7
	binutils-2_16-branch:1.7.0.8
	binutils-2_16-branchpoint:1.7
	csl-arm-2004-q3d:1.7
	csl-arm-2004-q3:1.7
	binutils-2_15:1.7
	binutils-2_15-branchpoint:1.7
	csl-arm-2004-q1a:1.7
	csl-arm-2004-q1:1.7
	binutils-2_15-branch:1.7.0.6
	cagney_bfdfile-20040213-branch:1.7.0.4
	cagney_bfdfile-20040213-branchpoint:1.7
	cagney_bigcore-20040122-branch:1.7.0.2
	cagney_bigcore-20040122-branchpoint:1.7
	csl-arm-2003-q4:1.7
	binutils-2_14:1.6
	binutils-2_14-branch:1.6.0.2
	binutils-2_14-branchpoint:1.6
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	binutils-2_13_1:1.4
	binutils-2_13:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.2
	binutils-2_12_1:1.3
	binutils-2_12:1.3
	binutils-2_12-branch:1.3.0.2
	binutils-2_12-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.2
	binutils_latest_snapshot:1.15;
locks; strict;
comment	@ * @;


1.15
date	2012.09.01.18.10.50;	author hp;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.02.07.24.20;	author amodra;	state Exp;
branches
	1.14.10.1;
next	1.13;

1.13
date	2008.10.07.14.21.59;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.03.11.01.04;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2007.02.17.23.13.48;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.11.11.16.16;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.05.09.13.01;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.25.11.50.53;	author hp;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.18.15.53.40;	author hp;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.23.05.21.09;	author hp;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.05.00.01.18;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.09.00.33.09;	author kazu;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.01.08.09.45;	author hp;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.15.21.28.57;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.30.15.20.06;	author nickc;	state Exp;
branches;
next	;

1.14.10.1
date	2012.09.10.10.05.03;	author hp;	state Exp;
branches;
next	;


desc
@@


1.15
log
@	PR gas/14521
	* config/tc-mmix.h (tc_frob_file_before_fix): Renumber sections
	after call to mmix_frob_file.
@
text
@/* tc-mmix.h -- Header file for tc-mmix.c.
   Copyright (C) 2001, 2002, 2003, 2005, 2007, 2008
   Free Software Foundation, Inc.
   Written by Hans-Peter Nilsson (hp@@bitrange.com).

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#define TC_MMIX

/* See gas/doc/internals.texi for explanation of these macros.  */
#define TARGET_FORMAT "elf64-mmix"
#define TARGET_ARCH bfd_arch_mmix
#define TARGET_BYTES_BIG_ENDIAN 1

extern const char mmix_comment_chars[];
#define tc_comment_chars mmix_comment_chars

extern const char mmix_symbol_chars[];
#define tc_symbol_chars mmix_symbol_chars

extern const char mmix_exp_chars[];
#define EXP_CHARS mmix_exp_chars

extern const char mmix_flt_chars[];
#define FLT_CHARS mmix_flt_chars

/* "@@" is a synonym for ".".  */
#define LEX_AT (LEX_BEGIN_NAME)

extern int mmix_label_without_colon_this_line (void);
#define LABELS_WITHOUT_COLONS mmix_label_without_colon_this_line ()

extern int mmix_next_semicolon_is_eoln;
#define TC_EOL_IN_INSN(p) (*(p) == ';' && ! mmix_next_semicolon_is_eoln)

/* This is one direction we can get mmixal compatibility.  */
extern void mmix_handle_mmixal (void);
#define md_start_line_hook mmix_handle_mmixal

extern void mmix_md_begin (void);
#define md_begin mmix_md_begin

extern void mmix_md_end (void);
#define md_end mmix_md_end

extern int mmix_current_location \
  (void (*fn) (expressionS *), expressionS *);
extern int mmix_parse_predefined_name (char *, expressionS *);

extern char *mmix_current_prefix;

/* A bit ugly, since we "know" that there's a static function
   current_location that does what we want.  We also strip off a leading
   ':' in another ugly way.

   The [DVWIOUZX]_Handler symbols are provided when-used.  */

extern int mmix_gnu_syntax;
#define md_parse_name(name, exp, mode, cpos)			\
 (! mmix_gnu_syntax						\
  && (name[0] == '@@'						\
      ? (! is_part_of_name (name[1])				\
	 && mmix_current_location (current_location, exp))	\
      : ((name[0] == ':' || ISUPPER (name[0]))			\
	 && mmix_parse_predefined_name (name, exp))))

extern char *mmix_prefix_name (char *);

/* We implement when *creating* a symbol, we also need to strip a ':' or
   prepend a prefix.  */
#define tc_canonicalize_symbol_name(x) \
 (mmix_current_prefix == NULL && (x)[0] != ':' ? (x) : mmix_prefix_name (x))

#define md_undefined_symbol(x) NULL

extern void mmix_fb_label (expressionS *);

/* Since integer_constant is local to expr.c, we have to make this a
   macro.  FIXME: Do it cleaner.  */
#define md_operand(exp)							\
  do									\
    {									\
      if (input_line_pointer[0] == '#')					\
	{								\
	  input_line_pointer++;						\
	  integer_constant (16, (exp));					\
	}								\
      else if (input_line_pointer[0] == '&'				\
	       && input_line_pointer[1] != '&')				\
	as_bad (_("`&' serial number operator is not supported"));	\
      else								\
	mmix_fb_label (exp);						\
    }									\
  while (0)

/* Gas dislikes the 2ADD, 8ADD etc. insns, so we have to assemble them in
   the error-recovery loop.  Hopefully there are no significant
   differences.  Also, space on a line isn't gracefully handled.  */
extern int mmix_assemble_return_nonzero (char *);
#define tc_unrecognized_line(c)						\
 ((c) == ' '								\
  || (((c) == '1' || (c) == '2' || (c) == '4' || (c) == '8')		\
      && mmix_assemble_return_nonzero (input_line_pointer - 1)))

#define md_number_to_chars number_to_chars_bigendian

#define WORKING_DOT_WORD

extern const struct relax_type mmix_relax_table[];
#define TC_GENERIC_RELAX_TABLE mmix_relax_table

/* We use the relax table for everything except the GREG frags and PUSHJ.  */
extern long mmix_md_relax_frag (segT, fragS *, long);
#define md_relax_frag mmix_md_relax_frag

#define tc_fix_adjustable(FIX)					\
 (((FIX)->fx_addsy == NULL					\
   || S_GET_SEGMENT ((FIX)->fx_addsy) != reg_section)		\
  && (FIX)->fx_r_type != BFD_RELOC_VTABLE_INHERIT		\
  && (FIX)->fx_r_type != BFD_RELOC_VTABLE_ENTRY			\
  && (FIX)->fx_r_type != BFD_RELOC_MMIX_LOCAL)

/* Adjust symbols which are registers.  */
#define tc_adjust_symtab() mmix_adjust_symtab ()
extern void mmix_adjust_symtab (void);

/* Here's where we make all symbols global, when so requested.
   We must avoid doing that for expression symbols or section symbols,
   though.  */
extern int mmix_globalize_symbols;
#define tc_frob_symbol(sym, punt)				\
  do								\
    {								\
      if (S_GET_SEGMENT (sym) == reg_section)			\
	{							\
	  if (S_GET_NAME (sym)[0] != '$'			\
	      && S_GET_VALUE (sym) < 256)			\
	    {							\
	      if (mmix_globalize_symbols)			\
		S_SET_EXTERNAL (sym);				\
	      else						\
		symbol_mark_used_in_reloc (sym);		\
	    }							\
	}							\
      else if (mmix_globalize_symbols				\
	       && ! symbol_section_p (sym)			\
	       && sym != section_symbol (absolute_section)	\
	       && ! S_IS_LOCAL (sym))				\
	S_SET_EXTERNAL (sym);					\
    }								\
  while (0)

/* No shared lib support, so we don't need to ensure externally
   visible symbols can be overridden.  */
#define EXTERN_FORCE_RELOC 0

/* When relaxing, we need to emit various relocs we otherwise wouldn't.  */
#define TC_FORCE_RELOCATION(fix) mmix_force_relocation (fix)
extern int mmix_force_relocation (struct fix *);

/* Call md_pcrel_from_section(), not md_pcrel_from().  */
#define MD_PCREL_FROM_SECTION(FIX, SEC) md_pcrel_from_section (FIX, SEC)
extern long md_pcrel_from_section (struct fix *, segT);

#define md_section_align(seg, size) (size)

#define LISTING_HEADER "GAS for MMIX"

/* The default of 4 means Bcc expansion looks like it's missing a line.  */
#define LISTING_LHS_CONT_LINES 5

extern fragS *mmix_opcode_frag;
#define TC_FRAG_TYPE fragS *
#define TC_FRAG_INIT(frag) (frag)->tc_frag_data = mmix_opcode_frag

/* We need to associate each section symbol with a list of GREGs defined
   for that section/segment and sorted on offset, between the point where
   all symbols have been evaluated and all frags mapped, and when the
   fixups are done and relocs are output.  Similarly for each unknown
   symbol.  */
extern void mmix_frob_file (void);
#define tc_frob_file_before_fix()					\
  do									\
    {									\
      int i = 0;							\
									\
      /* It's likely mmix_frob_file changed (removed) sections, so make	\
	 sure sections are correctly numbered as per renumber_sections,	\
	 (static to write.c where this macro is called).  */		\
      mmix_frob_file ();						\
      bfd_map_over_sections (stdoutput, renumber_sections, &i);		\
    }									\
  while (0)

/* Used by mmix_frob_file.  Hangs on section symbols and unknown symbols.  */
struct mmix_symbol_gregs;
#define TC_SYMFIELD_TYPE struct mmix_symbol_gregs *

/* Used by relaxation, counting maximum needed PUSHJ stubs for a section.  */
struct mmix_segment_info_type
 {
   /* We only need to keep track of the last stubbable frag because
      there's no less hackish way to keep track of different relaxation
      rounds.  */
   fragS *last_stubfrag;
   bfd_size_type nstubs;
 };
#define TC_SEGMENT_INFO_TYPE struct mmix_segment_info_type

extern void mmix_md_elf_section_change_hook (void);
#define md_elf_section_change_hook mmix_md_elf_section_change_hook

extern void mmix_md_do_align (int, char *, int, int);
#define md_do_align(n, fill, len, max, label) \
 mmix_md_do_align (n, fill, len, max)

/* Each insn is a tetrabyte (4 bytes) long, but if there are BYTE
   sequences sprinkled in, we can get unaligned DWARF2 offsets, so let's
   explicitly say one byte.  */
#define DWARF2_LINE_MIN_INSN_LENGTH 1

/* This target is buggy, and sets fix size too large.  */
#define TC_FX_SIZE_SLACK(FIX) 6

/* MMIX has global register symbols.  */
#define TC_GLOBAL_REGISTER_SYMBOL_OK
@


1.14
log
@update copyright dates
@
text
@d197 12
a208 1
#define tc_frob_file_before_fix mmix_frob_file
@


1.14.10.1
log
@	PR gas/14521
	* config/tc-mmix.h (tc_frob_file_before_fix): Renumber sections
	after call to mmix_frob_file.
@
text
@d197 1
a197 12
#define tc_frob_file_before_fix()					\
  do									\
    {									\
      int i = 0;							\
									\
      /* It's likely mmix_frob_file changed (removed) sections, so make	\
	 sure sections are correctly numbered as per renumber_sections,	\
	 (static to write.c where this macro is called).  */		\
      mmix_frob_file ();						\
      bfd_map_over_sections (stdoutput, renumber_sections, &i);		\
    }									\
  while (0)
@


1.13
log
@2008-10-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* read.c (pseudo_set): Don't allow global register symbol only
	if TC_GLOBAL_REGISTER_SYMBOL_OK is undefined.
	* symbols.c (S_SET_EXTERNAL): Likewise.

	* config/tc-mmix.h (TC_GLOBAL_REGISTER_SYMBOL_OK): Defined.

	* doc/internals.texi: Document TC_GLOBAL_REGISTER_SYMBOL_OK.
@
text
@d2 2
a3 1
   Copyright (C) 2001, 2002, 2003, 2005, 2007 Free Software Foundation, Inc.
@


1.12
log
@Switch to GPLv3
@
text
@d227 3
@


1.11
log
@	* write.c (TC_FX_SIZE_SLACK): Define.
	(write_relocs): Reinstate check for fixup within frag.
	* config/tc-bfin.h (TC_FX_SIZE_SLACK): Define.
	* config/tc-h8300.h (TC_FX_SIZE_SLACK): Define.
	* config/tc-mmix.h (TC_FX_SIZE_SLACK): Define.
	* config/tc-sh.h (TC_FX_SIZE_SLACK): Define.
	* config/tc-xstormy16.h (TC_FX_SIZE_SLACK): Define.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.
d9 1
a9 1
   the Free Software Foundation; either version 2, or (at your option)
@


1.10
log
@This adjusts equate handling by
- allowing true forward references (which will always assume the referenced
  symbols have at the point of use) through the new .eqv pseudo-op and the
  new == operator
- disallowing changing .equiv-generated equates (so that the protection this
  provides is both forward and backward)
- snapshotting equates when their value gets changed so that previous uses
  don't get affected by the new value.
- allowing expressions in places where absolute expressions (or register
  names) are needed which were not completely resolvable at the point of
  their definition but which are fully resolvable at the point of use

In addition it fixes PR/288.
@
text
@d224 3
@


1.9
log
@Update the address and phone number of the FSF
@
text
@d73 1
a73 1
#define md_parse_name(name, exp, cpos)				\
@


1.8
log
@	* config/tc-mmix.c, config/tc-mmix.h: Convert to ISO C90.
@
text
@d19 2
a20 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.7
log
@	Generate BFD_RELOC_MMIX_PUSHJ_STUBBABLE for PUSHJ when possible.
	* doc/c-mmix.texi (MMIX-Opts): Document --no-pushj-stubs and
	--no-stubs.
	* config/tc-mmix.c: Include limits.h.  Expand on mmix_relax_table
	comment.
	(expand_op, mmix_next_semicolon_is_eoln): Fix head comment.
	(pushj_stubs): New variable.
	(OPTION_NOPUSHJSTUBS, STATE_PUSHJSTUB, PUSHJSTUB_MIN)
	(PUSHJSTUB_MAX): New macros.
	(md_longopts): New options "--no-pushj-stubs" and synonym
	"--no-stubs".
	(mmix_relax_table): Handle new entry for STATE_PUSHJSTUB.
	(md_parse_option): Handle OPTION_NOPUSHJSTUBS.
	(md_estimate_size_before_relax): Modify STATE_PUSHJ state for
	PUSHJ stub relaxation.
	(md_convert_frag): Handle STATE_PUSHJSTUB.
	(md_apply_fix3): Handle BFD_RELOC_MMIX_PUSHJ_STUBBABLE.
	(tc_gen_reloc): Ditto.
	(mmix_md_relax_frag): Handle PUSHJ stub relaxation.
	* config/tc-mmix.h (TC_SEGMENT_INFO_TYPE): Define.
	(struct mmix_segment_info_type): New.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
d44 1
a44 1
extern int mmix_label_without_colon_this_line PARAMS ((void));
d51 1
a51 1
extern void mmix_handle_mmixal PARAMS ((void));
d54 1
a54 1
extern void mmix_md_begin PARAMS ((void));
d57 1
a57 1
extern void mmix_md_end PARAMS ((void));
d61 2
a62 2
  PARAMS ((void (*fn) (expressionS *), expressionS *));
extern int mmix_parse_predefined_name PARAMS ((char *, expressionS *));
d81 1
a81 1
extern char *mmix_prefix_name PARAMS ((char *));
d90 1
a90 1
extern void mmix_fb_label PARAMS ((expressionS *));
d113 1
a113 1
extern int mmix_assemble_return_nonzero PARAMS ((char *));
d127 1
a127 1
extern long mmix_md_relax_frag PARAMS ((segT, fragS *, long));
d139 1
a139 1
extern void mmix_adjust_symtab PARAMS ((void));
d173 1
a173 1
extern int mmix_force_relocation PARAMS ((struct fix *));
d177 1
a177 1
extern long md_pcrel_from_section PARAMS ((struct fix *, segT));
d195 1
a195 1
extern void mmix_frob_file PARAMS ((void));
d213 1
a213 1
extern void mmix_md_elf_section_change_hook PARAMS ((void));
d216 1
a216 1
extern void mmix_md_do_align PARAMS ((int, char *, int, int));
@


1.6
log
@	* config/tc-mmix.h (tc_frob_file_before_adjust): Don't declare.
	(tc_frob_file_before_adjust): Don't define.
	* config/tc-mmix.c (mmix_frob_local_reloc): Remove unused
	function.
	(mmix_frob_file_before_adjust): Remove ineffective function.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002 Free Software Foundation, Inc.
d126 1
a126 1
/* We use the relax table for everything except the GREG frags.  */
d201 11
@


1.5
log
@gas reloc rewrite.
@
text
@a201 3
extern void mmix_frob_file_before_adjust PARAMS ((void));
#define tc_frob_file_before_adjust mmix_frob_file_before_adjust

@


1.4
log
@	* config/tc-mmix.c: Fix formatting.
	* config/tc-mmix.h: Likewise.
@
text
@d130 6
a135 6
#define tc_fix_adjustable(X)					\
 ((! (X)->fx_addsy						\
   || (! S_IS_WEAK ((X)->fx_addsy)				\
       && S_GET_SEGMENT ((X)->fx_addsy) != reg_section))	\
  && (X)->fx_r_type != BFD_RELOC_VTABLE_INHERIT			\
  && (X)->fx_r_type != BFD_RELOC_VTABLE_ENTRY)
d141 1
a141 6
/* Avoid outputting GAS register section symbols.  This happens when the
   assembly had errors, and will propagate to an assert in BFD.  FIXME:
   It seems the symbol output when-errors is a bug in GAS.  Fix that
   some time.  See also tc_gen_reloc.

   Here's where we make all symbols global, when so requested.
d148 15
a162 12
      if (S_GET_SEGMENT (sym) == reg_section			\
	  || (symp) == section_symbol (absolute_section))	\
	(punt) = 1;						\
								\
      if (mmix_globalize_symbols				\
	  && ! symbol_section_p (sym)				\
	  && symp != section_symbol (absolute_section)		\
	  && (! S_IS_LOCAL (sym)				\
	      || S_GET_SEGMENT (sym) == reg_section)		\
	  && (S_GET_SEGMENT (sym) != reg_section		\
	      || (S_GET_NAME (sym)[0] != '$'			\
		  && S_GET_VALUE (sym) < 256)))			\
d167 4
d176 1
a176 1
#define MD_PCREL_FROM_SECTION(FIXP, SEC) md_pcrel_from_section (FIXP, SEC)
d196 1
a196 1
#define tc_frob_file mmix_frob_file
@


1.3
log
@	Support on-demand global register allocation by passing on
	base-plus-offset relocs to the linker.
	* config/tc-mmix.c: Tweak and fix typos in comments.
 	(allocate_undefined_gregs_in_linker): New variable.
	(OPTION_LINKER_ALLOCATED_GREGS): New option macro.
	(md_longopts): Add --linker-allocated-gregs.
	(md_parse_option) <case 'x'>: Imply --linker-allocated-gregs.
	<case OPTION_LINKER_ALLOCATED_GREGS>: New.
	(md_show_usage): Update text for -x.  Add text for
	--linker-allocated-gregs.
	(tc_gen_reloc): Derive default value for addend from val and
	baddsy.  Use addsec and bfd_is_abs_section in more places.  Don't
	emit error for BFD_RELOC_MMIX_BASE_PLUS_OFFSET without suitable
	GREG if allocate_undefined_gregs_in_linker.
	* doc/as.texinfo (Overview) <Target MMIX options>: Add
	--linker-allocated-gregs.
	* doc/c-mmix.texi (MMIX-Opts): Add blurb about
	--linker-allocated-gregs.  Mention that it's implied by -x.
	(MMIX-Pseudos) <GREG>: Mention when and how a GREG can be omitted.
	(MMIX-mmixal): Clarify dated comparison and location of MMIXware.

	* config/tc-mmix.h (md_parse_name): Use ISUPPER, not isupper.
@
text
@d20 1
a20 1
   02111-1307, USA. */
d95 1
a95 2
 do {									\
  if (input_line_pointer[0] == '#')					\
d97 10
a106 2
      input_line_pointer++;						\
      integer_constant (16, (exp));					\
d108 1
a108 7
  else if (input_line_pointer[0] == '&'					\
	   && input_line_pointer[1] != '&')				\
    as_bad (_("`&' serial number operator is not supported"));	\
  else									\
    mmix_fb_label (exp);						\
 } while (0)

d113 1
a113 1
extern int mmix_assemble_return_nonzero PARAMS ((char  *));
d150 18
a167 16
#define tc_frob_symbol(sym, punt)			\
 do {							\
  if (S_GET_SEGMENT (sym) == reg_section		\
      || (symp) == section_symbol (absolute_section))	\
    (punt) = 1;						\
							\
  if (mmix_globalize_symbols				\
      && ! symbol_section_p (sym)			\
      && symp != section_symbol (absolute_section)	\
      && (! S_IS_LOCAL (sym)				\
	  || S_GET_SEGMENT (sym) == reg_section)	\
      && (S_GET_SEGMENT (sym) != reg_section		\
	  || (S_GET_NAME (sym)[0] != '$'		\
	      && S_GET_VALUE (sym) < 256)))		\
    S_SET_EXTERNAL (sym);				\
 } while (0)
@


1.2
log
@Update all uses of md_apply_fix to use md_apply_fix3.  Make it a void function.
@
text
@d2 1
a2 1
   Copyright (C) 2001 Free Software Foundation, Inc.
d78 1
a78 1
      : ((name[0] == ':' || isupper (name[0]))			\
@


1.1
log
@Add MMIX support
@
text
@a173 4
#define MD_APPLY_FIX3

#define TC_HANDLES_FX_DONE

@

