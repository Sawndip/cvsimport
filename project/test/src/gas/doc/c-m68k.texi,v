head	1.14;
access;
symbols
	binutils-2_24-branch:1.14.0.2
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.12
	binutils-2_23_2:1.13
	binutils-2_23_1:1.13
	binutils-2_23:1.13
	binutils-2_23-branch:1.13.0.6
	binutils-2_23-branchpoint:1.13
	binutils-2_22_branch:1.13.0.4
	binutils-2_22:1.13
	binutils-2_22-branch:1.13.0.2
	binutils-2_22-branchpoint:1.13
	binutils-2_21:1.12
	binutils-2_21-branch:1.12.0.2
	binutils-2_21-branchpoint:1.12
	binutils-2_20_1:1.11
	binutils-2_20:1.11
	binutils-arc-20081103-branch:1.10.0.10
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.11.0.2
	binutils-2_20-branchpoint:1.11
	dje-cgen-play1-branch:1.10.0.8
	dje-cgen-play1-branchpoint:1.10
	arc-20081103-branch:1.10.0.6
	arc-20081103-branchpoint:1.10
	binutils-2_19_1:1.10
	binutils-2_19:1.10
	binutils-2_19-branch:1.10.0.4
	binutils-2_19-branchpoint:1.10
	binutils-2_18:1.10
	binutils-2_18-branch:1.10.0.2
	binutils-2_18-branchpoint:1.10
	binutils-csl-coldfire-4_1-32:1.8
	binutils-csl-sourcerygxx-4_1-32:1.8
	binutils-csl-innovasic-fido-3_4_4-33:1.8
	binutils-csl-sourcerygxx-3_4_4-32:1.7
	binutils-csl-coldfire-4_1-30:1.8
	binutils-csl-sourcerygxx-4_1-30:1.8
	binutils-csl-coldfire-4_1-28:1.8
	binutils-csl-sourcerygxx-4_1-29:1.8
	binutils-csl-sourcerygxx-4_1-28:1.8
	binutils-csl-arm-2006q3-27:1.8
	binutils-csl-sourcerygxx-4_1-27:1.8
	binutils-csl-arm-2006q3-26:1.8
	binutils-csl-sourcerygxx-4_1-26:1.8
	binutils-csl-sourcerygxx-4_1-25:1.8
	binutils-csl-sourcerygxx-4_1-24:1.8
	binutils-csl-sourcerygxx-4_1-23:1.8
	binutils-csl-sourcerygxx-4_1-21:1.8
	binutils-csl-arm-2006q3-21:1.8
	binutils-csl-sourcerygxx-4_1-22:1.8
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.8
	binutils-csl-sourcerygxx-4_1-20:1.8
	binutils-csl-arm-2006q3-19:1.8
	binutils-csl-sourcerygxx-4_1-19:1.8
	binutils-csl-sourcerygxx-4_1-18:1.8
	binutils-csl-renesas-4_1-9:1.8
	binutils-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-renesas-4_1-8:1.8
	binutils-csl-renesas-4_1-7:1.8
	binutils-csl-renesas-4_1-6:1.8
	binutils-csl-sourcerygxx-4_1-17:1.8
	binutils-csl-sourcerygxx-4_1-14:1.8
	binutils-csl-sourcerygxx-4_1-15:1.8
	binutils-csl-sourcerygxx-4_1-13:1.8
	binutils-2_17:1.8
	binutils-csl-sourcerygxx-4_1-12:1.8
	binutils-csl-sourcerygxx-3_4_4-21:1.8
	binutils-csl-wrs-linux-3_4_4-24:1.7
	binutils-csl-wrs-linux-3_4_4-23:1.7
	binutils-csl-sourcerygxx-4_1-9:1.8
	binutils-csl-sourcerygxx-4_1-8:1.8
	binutils-csl-sourcerygxx-4_1-7:1.8
	binutils-csl-arm-2006q1-6:1.8
	binutils-csl-sourcerygxx-4_1-6:1.8
	binutils-csl-wrs-linux-3_4_4-22:1.7
	binutils-csl-coldfire-4_1-11:1.8
	binutils-csl-sourcerygxx-3_4_4-19:1.8
	binutils-csl-coldfire-4_1-10:1.8
	binutils-csl-sourcerygxx-4_1-5:1.8
	binutils-csl-sourcerygxx-4_1-4:1.8
	binutils-csl-wrs-linux-3_4_4-21:1.7
	binutils-csl-morpho-4_1-4:1.8
	binutils-csl-sourcerygxx-3_4_4-17:1.8
	binutils-csl-wrs-linux-3_4_4-20:1.7
	binutils-2_17-branch:1.8.0.4
	binutils-2_17-branchpoint:1.8
	binutils-csl-2_17-branch:1.8.0.2
	binutils-csl-2_17-branchpoint:1.8
	binutils-csl-gxxpro-3_4-branch:1.7.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.7
	binutils-2_16_1:1.7
	binutils-csl-arm-2005q1b:1.7
	binutils-2_16:1.7
	binutils-csl-arm-2005q1a:1.7
	binutils-csl-arm-2005q1-branch:1.7.0.4
	binutils-csl-arm-2005q1-branchpoint:1.7
	binutils-2_16-branch:1.7.0.2
	binutils-2_16-branchpoint:1.7
	csl-arm-2004-q3d:1.6
	csl-arm-2004-q3:1.6
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	binutils-2_15-branch:1.5.0.6
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	csl-arm-2003-q4:1.5
	binutils-2_14:1.4
	binutils-2_14-branch:1.4.0.6
	binutils-2_14-branchpoint:1.4
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	binutils-2_13_1:1.4
	binutils-2_13:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.4
	binutils-2_12_1:1.4
	binutils-2_12:1.4
	binutils-2_12-branch:1.4.0.2
	binutils-2_12-branchpoint:1.4
	cygnus_cvs_20020108_pre:1.4
	binutils-2_11_2:1.3.2.1
	binutils-2_11_1:1.3.2.1
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.14
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2013.01.10.19.51.55;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.18.13.37.39;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.21.10.49.41;	author schwab;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.02.07.24.21;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.23.07.51.26;	author nathan;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.24.13.49.49;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.07.19.01.10;	author nathan;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.03.01.29.54;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.05.14.33.14;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.21.13.28.59;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.08.23.24.26;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.01.16.57.01;	author nickc;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.07.31.22.08.14;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.45;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2001.06.07.03.15.36;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.45;	author rth;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove trailing white spaces on gas

	* app.c: Remove trailing white spaces.
	* as.c: Likewise.
	* as.h: Likewise.
	* cond.c: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.h: Likewise.
	* ecoff.c: Likewise.
	* input-file.c: Likewise.
	* itbl-lex.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* subsegs.c: Likewise.
	* symbols.c: Likewise.
	* write.c: Likewise.
	* config/tc-i386.c: Likewise.
	* doc/Makefile.am: Likewise.
	* doc/Makefile.in: Likewise.
	* doc/c-aarch64.texi: Likewise.
	* doc/c-alpha.texi: Likewise.
	* doc/c-arc.texi: Likewise.
	* doc/c-arm.texi: Likewise.
	* doc/c-avr.texi: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/c-cr16.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-d30v.texi: Likewise.
	* doc/c-h8300.texi: Likewise.
	* doc/c-hppa.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i386.texi: Likewise.
	* doc/c-i860.texi: Likewise.
	* doc/c-m32c.texi: Likewise.
	* doc/c-m32r.texi: Likewise.
	* doc/c-m68hc11.texi: Likewise.
	* doc/c-m68k.texi: Likewise.
	* doc/c-microblaze.texi: Likewise.
	* doc/c-mips.texi: Likewise.
	* doc/c-msp430.texi: Likewise.
	* doc/c-mt.texi: Likewise.
	* doc/c-s390.texi: Likewise.
	* doc/c-score.texi: Likewise.
	* doc/c-sh.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-tic6x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-xc16x.texi: Likewise.
	* doc/c-xgate.texi: Likewise.
	* doc/c-xtensa.texi: Likewise.
	* doc/c-z80.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003,
@@c 2004, 2006, 2007, 2011 Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@ifset GENERIC
@@page
@@node M68K-Dependent
@@chapter M680x0 Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter M680x0 Dependent Features
@@end ifclear

@@cindex M680x0 support
@@menu
* M68K-Opts::                   M680x0 Options
* M68K-Syntax::                 Syntax
* M68K-Moto-Syntax::            Motorola Syntax
* M68K-Float::                  Floating Point
* M68K-Directives::             680x0 Machine Directives
* M68K-opcodes::                Opcodes
@@end menu

@@node M68K-Opts
@@section M680x0 Options

@@cindex options, M680x0
@@cindex M680x0 options
The Motorola 680x0 version of @@code{@@value{AS}} has a few machine
dependent options:

@@table @@samp

@@cindex @@samp{-march=} command line option, M680x0
@@item -march=@@var{architecture}
This option specifies a target architecture.  The following
architectures are recognized:
@@code{68000},
@@code{68010},
@@code{68020},
@@code{68030},
@@code{68040},
@@code{68060},
@@code{cpu32},
@@code{isaa},
@@code{isaaplus},
@@code{isab},
@@code{isac} and
@@code{cfv4e}.


@@cindex @@samp{-mcpu=} command line option, M680x0
@@item -mcpu=@@var{cpu}
This option specifies a target cpu.  When used in conjunction with the
@@option{-march} option, the cpu must be within the specified
architecture.  Also, the generic features of the architecture are used
for instruction generation, rather than those of the specific chip.

@@cindex @@samp{-m[no-]68851} command line option, M680x0
@@cindex @@samp{-m[no-]68881} command line option, M680x0
@@cindex @@samp{-m[no-]div} command line option, M680x0
@@cindex @@samp{-m[no-]usp} command line option, M680x0
@@cindex @@samp{-m[no-]float} command line option, M680x0
@@cindex @@samp{-m[no-]mac} command line option, M680x0
@@cindex @@samp{-m[no-]emac} command line option, M680x0
@@item -m[no-]68851
@@itemx -m[no-]68881
@@itemx -m[no-]div
@@itemx -m[no-]usp
@@itemx -m[no-]float
@@itemx -m[no-]mac
@@itemx -m[no-]emac

Enable or disable various architecture specific features.  If a chip
or architecture by default supports an option (for instance
@@option{-march=isaaplus} includes the @@option{-mdiv} option),
explicitly disabling the option will override the default.

@@cindex @@samp{-l} option, M680x0
@@item -l
You can use the @@samp{-l} option to shorten the size of references to undefined
symbols.  If you do not use the @@samp{-l} option, references to undefined
symbols are wide enough for a full @@code{long} (32 bits).  (Since
@@code{@@value{AS}} cannot know where these symbols end up, @@code{@@value{AS}} can
only allocate space for the linker to fill in later.  Since @@code{@@value{AS}}
does not know how far away these symbols are, it allocates as much space as it
can.)  If you use this option, the references are only one word wide (16 bits).
This may be useful if you want the object file to be as small as possible, and
you know that the relevant symbols are always less than 17 bits away.

@@cindex @@samp{--register-prefix-optional} option, M680x0
@@item --register-prefix-optional
For some configurations, especially those where the compiler normally
does not prepend an underscore to the names of user variables, the
assembler requires a @@samp{%} before any use of a register name.  This
is intended to let the assembler distinguish between C variables and
functions named @@samp{a0} through @@samp{a7}, and so on.  The @@samp{%} is
always accepted, but is not required for certain configurations, notably
@@samp{sun3}.  The @@samp{--register-prefix-optional} option may be used
to permit omitting the @@samp{%} even for configurations for which it is
normally required.  If this is done, it will generally be impossible to
refer to C variables and functions with the same names as register
names.

@@cindex @@samp{--bitwise-or} option, M680x0
@@item --bitwise-or
Normally the character @@samp{|} is treated as a comment character, which
means that it can not be used in expressions.  The @@samp{--bitwise-or}
option turns @@samp{|} into a normal character.  In this mode, you must
either use C style comments, or start comments with a @@samp{#} character
at the beginning of a line.

@@cindex @@samp{--base-size-default-16}
@@cindex @@samp{--base-size-default-32}
@@item --base-size-default-16  --base-size-default-32
If you use an addressing mode with a base register without specifying
the size, @@code{@@value{AS}} will normally use the full 32 bit value.
For example, the addressing mode @@samp{%a0@@@@(%d0)} is equivalent to
@@samp{%a0@@@@(%d0:l)}.  You may use the @@samp{--base-size-default-16}
option to tell @@code{@@value{AS}} to default to using the 16 bit value.
In this case, @@samp{%a0@@@@(%d0)} is equivalent to @@samp{%a0@@@@(%d0:w)}.
You may use the @@samp{--base-size-default-32} option to restore the
default behaviour.

@@cindex @@samp{--disp-size-default-16}
@@cindex @@samp{--disp-size-default-32}
@@item --disp-size-default-16  --disp-size-default-32
If you use an addressing mode with a displacement, and the value of the
displacement is not known, @@code{@@value{AS}} will normally assume that
the value is 32 bits.  For example, if the symbol @@samp{disp} has not
been defined, @@code{@@value{AS}} will assemble the addressing mode
@@samp{%a0@@@@(disp,%d0)} as though @@samp{disp} is a 32 bit value.  You may
use the @@samp{--disp-size-default-16} option to tell @@code{@@value{AS}}
to instead assume that the displacement is 16 bits.  In this case,
@@code{@@value{AS}} will assemble @@samp{%a0@@@@(disp,%d0)} as though
@@samp{disp} is a 16 bit value.  You may use the
@@samp{--disp-size-default-32} option to restore the default behaviour.

@@cindex @@samp{--pcrel}
@@item --pcrel
Always keep branches PC-relative.  In the M680x0 architecture all branches
are defined as PC-relative.  However, on some processors they are limited
to word displacements maximum.  When @@code{@@value{AS}} needs a long branch
that is not available, it normally emits an absolute jump instead.  This
option disables this substitution.  When this option is given and no long
branches are available, only word branches will be emitted.  An error
message will be generated if a word branch cannot reach its target.  This
option has no effect on 68020 and other processors that have long branches.
@@pxref{M68K-Branch,,Branch Improvement}.

@@cindex @@samp{-m68000} and related options
@@cindex architecture options, M680x0
@@cindex M680x0 architecture options
@@item -m68000
@@code{@@value{AS}} can assemble code for several different members of the
Motorola 680x0 family.  The default depends upon how @@code{@@value{AS}}
was configured when it was built; normally, the default is to assemble
code for the 68020 microprocessor.  The following options may be used to
change the default.  These options control which instructions and
addressing modes are permitted.  The members of the 680x0 family are
very similar.  For detailed information about the differences, see the
Motorola manuals.

@@table @@samp
@@item -m68000
@@itemx -m68ec000
@@itemx -m68hc000
@@itemx -m68hc001
@@itemx -m68008
@@itemx -m68302
@@itemx -m68306
@@itemx -m68307
@@itemx -m68322
@@itemx -m68356
Assemble for the 68000. @@samp{-m68008}, @@samp{-m68302}, and so on are synonyms
for @@samp{-m68000}, since the chips are the same from the point of view
of the assembler.

@@item -m68010
Assemble for the 68010.

@@item -m68020
@@itemx -m68ec020
Assemble for the 68020.  This is normally the default.

@@item -m68030
@@itemx -m68ec030
Assemble for the 68030.

@@item -m68040
@@itemx -m68ec040
Assemble for the 68040.

@@item -m68060
@@itemx -m68ec060
Assemble for the 68060.

@@item -mcpu32
@@itemx -m68330
@@itemx -m68331
@@itemx -m68332
@@itemx -m68333
@@itemx -m68334
@@itemx -m68336
@@itemx -m68340
@@itemx -m68341
@@itemx -m68349
@@itemx -m68360
Assemble for the CPU32 family of chips.

@@item -m5200
@@itemx -m5202
@@itemx -m5204
@@itemx -m5206
@@itemx -m5206e
@@itemx -m521x
@@itemx -m5249
@@itemx -m528x
@@itemx -m5307
@@itemx -m5407
@@itemx -m547x
@@itemx -m548x
@@itemx -mcfv4
@@itemx -mcfv4e
Assemble for the ColdFire family of chips.

@@item -m68881
@@itemx -m68882
Assemble 68881 floating point instructions.  This is the default for the
68020, 68030, and the CPU32.  The 68040 and 68060 always support
floating point instructions.

@@item -mno-68881
Do not assemble 68881 floating point instructions.  This is the default
for 68000 and the 68010.  The 68040 and 68060 always support floating
point instructions, even if this option is used.

@@item -m68851
Assemble 68851 MMU instructions.  This is the default for the 68020,
68030, and 68060.  The 68040 accepts a somewhat different set of MMU
instructions; @@samp{-m68851} and @@samp{-m68040} should not be used
together.

@@item -mno-68851
Do not assemble 68851 MMU instructions.  This is the default for the
68000, 68010, and the CPU32.  The 68040 accepts a somewhat different set
of MMU instructions.
@@end table
@@end table

@@node M68K-Syntax
@@section Syntax

@@cindex @@sc{mit}
This syntax for the Motorola 680x0 was developed at @@sc{mit}.

@@cindex M680x0 syntax
@@cindex syntax, M680x0
@@cindex M680x0 size modifiers
@@cindex size modifiers, M680x0
The 680x0 version of @@code{@@value{AS}} uses instructions names and
syntax compatible with the Sun assembler.  Intervening periods are
ignored; for example, @@samp{movl} is equivalent to @@samp{mov.l}.

In the following table @@var{apc} stands for any of the address registers
(@@samp{%a0} through @@samp{%a7}), the program counter (@@samp{%pc}), the
zero-address relative to the program counter (@@samp{%zpc}), a suppressed
address register (@@samp{%za0} through @@samp{%za7}), or it may be omitted
entirely.  The use of @@var{size} means one of @@samp{w} or @@samp{l}, and
it may be omitted, along with the leading colon, unless a scale is also
specified.  The use of @@var{scale} means one of @@samp{1}, @@samp{2},
@@samp{4}, or @@samp{8}, and it may always be omitted along with the
leading colon.

@@cindex M680x0 addressing modes
@@cindex addressing modes, M680x0
The following addressing modes are understood:
@@table @@dfn
@@item Immediate
@@samp{#@@var{number}}

@@item Data Register
@@samp{%d0} through @@samp{%d7}

@@item Address Register
@@samp{%a0} through @@samp{%a7}@@*
@@samp{%a7} is also known as @@samp{%sp}, i.e., the Stack Pointer.  @@code{%a6}
is also known as @@samp{%fp}, the Frame Pointer.

@@item Address Register Indirect
@@samp{%a0@@@@} through @@samp{%a7@@@@}

@@item Address Register Postincrement
@@samp{%a0@@@@+} through @@samp{%a7@@@@+}

@@item Address Register Predecrement
@@samp{%a0@@@@-} through @@samp{%a7@@@@-}

@@item Indirect Plus Offset
@@samp{@@var{apc}@@@@(@@var{number})}

@@item Index
@@samp{@@var{apc}@@@@(@@var{number},@@var{register}:@@var{size}:@@var{scale})}

The @@var{number} may be omitted.

@@item Postindex
@@samp{@@var{apc}@@@@(@@var{number})@@@@(@@var{onumber},@@var{register}:@@var{size}:@@var{scale})}

The @@var{onumber} or the @@var{register}, but not both, may be omitted.

@@item Preindex
@@samp{@@var{apc}@@@@(@@var{number},@@var{register}:@@var{size}:@@var{scale})@@@@(@@var{onumber})}

The @@var{number} may be omitted.  Omitting the @@var{register} produces
the Postindex addressing mode.

@@item Absolute
@@samp{@@var{symbol}}, or @@samp{@@var{digits}}, optionally followed by
@@samp{:b}, @@samp{:w}, or @@samp{:l}.
@@end table

@@node M68K-Moto-Syntax
@@section Motorola Syntax

@@cindex Motorola syntax for the 680x0
@@cindex alternate syntax for the 680x0

The standard Motorola syntax for this chip differs from the syntax
already discussed (@@pxref{M68K-Syntax,,Syntax}).  @@code{@@value{AS}} can
accept Motorola syntax for operands, even if @@sc{mit} syntax is used for
other operands in the same instruction.  The two kinds of syntax are
fully compatible.

In the following table @@var{apc} stands for any of the address registers
(@@samp{%a0} through @@samp{%a7}), the program counter (@@samp{%pc}), the
zero-address relative to the program counter (@@samp{%zpc}), or a
suppressed address register (@@samp{%za0} through @@samp{%za7}).  The use
of @@var{size} means one of @@samp{w} or @@samp{l}, and it may always be
omitted along with the leading dot.  The use of @@var{scale} means one of
@@samp{1}, @@samp{2}, @@samp{4}, or @@samp{8}, and it may always be omitted
along with the leading asterisk.

The following additional addressing modes are understood:

@@table @@dfn
@@item Address Register Indirect
@@samp{(%a0)} through @@samp{(%a7)}@@*
@@samp{%a7} is also known as @@samp{%sp}, i.e., the Stack Pointer.  @@code{%a6}
is also known as @@samp{%fp}, the Frame Pointer.

@@item Address Register Postincrement
@@samp{(%a0)+} through @@samp{(%a7)+}

@@item Address Register Predecrement
@@samp{-(%a0)} through @@samp{-(%a7)}

@@item Indirect Plus Offset
@@samp{@@var{number}(@@var{%a0})} through @@samp{@@var{number}(@@var{%a7})},
or @@samp{@@var{number}(@@var{%pc})}.

The @@var{number} may also appear within the parentheses, as in
@@samp{(@@var{number},@@var{%a0})}.  When used with the @@var{pc}, the
@@var{number} may be omitted (with an address register, omitting the
@@var{number} produces Address Register Indirect mode).

@@item Index
@@samp{@@var{number}(@@var{apc},@@var{register}.@@var{size}*@@var{scale})}

The @@var{number} may be omitted, or it may appear within the
parentheses.  The @@var{apc} may be omitted.  The @@var{register} and the
@@var{apc} may appear in either order.  If both @@var{apc} and
@@var{register} are address registers, and the @@var{size} and @@var{scale}
are omitted, then the first register is taken as the base register, and
the second as the index register.

@@item Postindex
@@samp{([@@var{number},@@var{apc}],@@var{register}.@@var{size}*@@var{scale},@@var{onumber})}

The @@var{onumber}, or the @@var{register}, or both, may be omitted.
Either the @@var{number} or the @@var{apc} may be omitted, but not both.

@@item Preindex
@@samp{([@@var{number},@@var{apc},@@var{register}.@@var{size}*@@var{scale}],@@var{onumber})}

The @@var{number}, or the @@var{apc}, or the @@var{register}, or any two of
them, may be omitted.  The @@var{onumber} may be omitted.  The
@@var{register} and the @@var{apc} may appear in either order.  If both
@@var{apc} and @@var{register} are address registers, and the @@var{size}
and @@var{scale} are omitted, then the first register is taken as the
base register, and the second as the index register.
@@end table

@@node M68K-Float
@@section Floating Point

@@cindex floating point, M680x0
@@cindex M680x0 floating point
Packed decimal (P) format floating literals are not supported.
Feel free to add the code!

The floating point formats generated by directives are these.

@@table @@code
@@cindex @@code{float} directive, M680x0
@@item .float
@@code{Single} precision floating point constants.

@@cindex @@code{double} directive, M680x0
@@item .double
@@code{Double} precision floating point constants.

@@cindex @@code{extend} directive M680x0
@@cindex @@code{ldouble} directive M680x0
@@item .extend
@@itemx .ldouble
@@code{Extended} precision (@@code{long double}) floating point constants.
@@end table

@@node M68K-Directives
@@section 680x0 Machine Directives

@@cindex M680x0 directives
@@cindex directives, M680x0
In order to be compatible with the Sun assembler the 680x0 assembler
understands the following directives.

@@table @@code
@@cindex @@code{data1} directive, M680x0
@@item .data1
This directive is identical to a @@code{.data 1} directive.

@@cindex @@code{data2} directive, M680x0
@@item .data2
This directive is identical to a @@code{.data 2} directive.

@@cindex @@code{even} directive, M680x0
@@item .even
This directive is a special case of the @@code{.align} directive; it
aligns the output to an even byte boundary.

@@cindex @@code{skip} directive, M680x0
@@item .skip
This directive is identical to a @@code{.space} directive.

@@cindex @@code{arch} directive, M680x0
@@item .arch @@var{name}
Select the target architecture and extension features.  Valid values
for @@var{name} are the same as for the @@option{-march} command line
option.  This directive cannot be specified after
any instructions have been assembled.  If it is given multiple times,
or in conjunction with the @@option{-march} option, all uses must be for
the same architecture and extension set.

@@cindex @@code{cpu} directive, M680x0
@@item .cpu @@var{name}
Select the target cpu.  Valid valuse
for @@var{name} are the same as for the @@option{-mcpu} command line
option.  This directive cannot be specified after
any instructions have been assembled.  If it is given multiple times,
or in conjunction with the @@option{-mopt} option, all uses must be for
the same cpu.

@@end table

@@need 2000
@@node M68K-opcodes
@@section Opcodes

@@cindex M680x0 opcodes
@@cindex opcodes, M680x0
@@cindex instruction set, M680x0
@@c doc@@cygnus.com: I don't see any point in the following
@@c                   paragraph.  Bugs are bugs; how does saying this
@@c                   help anyone?
@@ignore
Danger:  Several bugs have been found in the opcode table (and
fixed).  More bugs may exist.  Be careful when using obscure
instructions.
@@end ignore

@@menu
* M68K-Branch::                 Branch Improvement
* M68K-Chars::                  Special Characters
@@end menu

@@node M68K-Branch
@@subsection Branch Improvement

@@cindex pseudo-opcodes, M680x0
@@cindex M680x0 pseudo-opcodes
@@cindex branch improvement, M680x0
@@cindex M680x0 branch improvement
Certain pseudo opcodes are permitted for branch instructions.
They expand to the shortest branch instruction that reach the
target.  Generally these mnemonics are made by substituting @@samp{j} for
@@samp{b} at the start of a Motorola mnemonic.

The following table summarizes the pseudo-operations.  A @@code{*} flags
cases that are more fully described after the table:

@@smallexample
          Displacement
          +------------------------------------------------------------
          |                68020           68000/10, not PC-relative OK
Pseudo-Op |BYTE    WORD    LONG            ABSOLUTE LONG JUMP    **
          +------------------------------------------------------------
     jbsr |bsrs    bsrw    bsrl            jsr
      jra |bras    braw    bral            jmp
*     jXX |bXXs    bXXw    bXXl            bNXs;jmp
*    dbXX | N/A    dbXXw   dbXX;bras;bral  dbXX;bras;jmp
     fjXX | N/A    fbXXw   fbXXl            N/A

XX: condition
NX: negative of condition XX

@@end smallexample
@@center @@code{*}---see full description below
@@center @@code{**}---this expansion mode is disallowed by @@samp{--pcrel}

@@table @@code
@@item jbsr
@@itemx jra
These are the simplest jump pseudo-operations; they always map to one
particular machine instruction, depending on the displacement to the
branch target.  This instruction will be a byte or word branch is that
is sufficient.  Otherwise, a long branch will be emitted if available.
If no long branches are available and the @@samp{--pcrel} option is not
given, an absolute long jump will be emitted instead.  If no long
branches are available, the @@samp{--pcrel} option is given, and a word
branch cannot reach the target, an error message is generated.

In addition to standard branch operands, @@code{@@value{AS}} allows these
pseudo-operations to have all operands that are allowed for jsr and jmp,
substituting these instructions if the operand given is not valid for a
branch instruction.

@@item j@@var{XX}
Here, @@samp{j@@var{XX}} stands for an entire family of pseudo-operations,
where @@var{XX} is a conditional branch or condition-code test.  The full
list of pseudo-ops in this family is:
@@smallexample
 jhi   jls   jcc   jcs   jne   jeq   jvc
 jvs   jpl   jmi   jge   jlt   jgt   jle
@@end smallexample

Usually, each of these pseudo-operations expands to a single branch
instruction.  However, if a word branch is not sufficient, no long branches
are available, and the @@samp{--pcrel} option is not given, @@code{@@value{AS}}
issues a longer code fragment in terms of @@var{NX}, the opposite condition
to @@var{XX}.  For example, under these conditions:
@@smallexample
    j@@var{XX} foo
@@end smallexample
gives
@@smallexample
     b@@var{NX}s oof
     jmp foo
 oof:
@@end smallexample

@@item db@@var{XX}
The full family of pseudo-operations covered here is
@@smallexample
 dbhi   dbls   dbcc   dbcs   dbne   dbeq   dbvc
 dbvs   dbpl   dbmi   dbge   dblt   dbgt   dble
 dbf    dbra   dbt
@@end smallexample

Motorola @@samp{db@@var{XX}} instructions allow word displacements only.  When
a word displacement is sufficient, each of these pseudo-operations expands
to the corresponding Motorola instruction.  When a word displacement is not
sufficient and long branches are available, when the source reads
@@samp{db@@var{XX} foo}, @@code{@@value{AS}} emits
@@smallexample
     db@@var{XX} oo1
     bras oo2
 oo1:bral foo
 oo2:
@@end smallexample

If, however, long branches are not available and the @@samp{--pcrel} option is
not given, @@code{@@value{AS}} emits
@@smallexample
     db@@var{XX} oo1
     bras oo2
 oo1:jmp foo
 oo2:
@@end smallexample

@@item fj@@var{XX}
This family includes
@@smallexample
 fjne   fjeq   fjge   fjlt   fjgt   fjle   fjf
 fjt    fjgl   fjgle  fjnge  fjngl  fjngle fjngt
 fjnle  fjnlt  fjoge  fjogl  fjogt  fjole  fjolt
 fjor   fjseq  fjsf   fjsne  fjst   fjueq  fjuge
 fjugt  fjule  fjult  fjun
@@end smallexample

Each of these pseudo-operations always expands to a single Motorola
coprocessor branch instruction, word or long.  All Motorola coprocessor
branch instructions allow both word and long displacements.

@@end table

@@node M68K-Chars
@@subsection Special Characters

@@cindex special characters, M680x0

@@cindex M680x0 line comment character
@@cindex line comment character, M680x0
@@cindex comments, M680x0
Line comments are introduced by the @@samp{|} character appearing
anywhere on a line, unless the @@option{--bitwise-or} command line option
has been specified.

An asterisk (@@samp{*}) as the first character on a line marks the
start of a line comment as well.

@@cindex M680x0 immediate character
@@cindex immediate character, M680x0

A hash character (@@samp{#}) as the first character on a line also
marks the start of a line comment, but in this case it could also be a
logical line number directive (@@pxref{Comments}) or a preprocessor
control command (@@pxref{Preprocessing}).  If the hash character
appears elsewhere on a line it is used to introduce an immediate
value.  (This is for compatibility with Sun's assembler).

@@cindex M680x0 line separator
@@cindex line separator, M680x0

Multiple statements on the same line can appear if they are separated
by the @@samp{;} character.
@


1.13
log
@	PR gas/12390
	* doc/all.texi: Add NS32K
	* doc/as.texinfo: Remove target specific details of which
	characters act as comment initiators and statement separators into
	individual target specific files.
	* doc/c-alpha.texi (Alpha-Chars): Document special behaviour of
	the hash character at the start of a line.
	* doc/c-arm.texi (ARM-Chars): Likewise.
	* doc/c-avr.texi (AVR-Chars): Likewise.
	* doc/c-d10v.texi (D10V-Chars): Likewise.
	* doc/c-d30v.texi (D30V-Chars):	Likewise.
	* doc/c-mmix.texi (MMIX-Chars): Likewise.
	* doc/c-s390.texi (s390 characters): Likewise.
	* doc/c-sh.texi (SH-Chars): Likewise.
	* doc/c-sh64.texi (SH64-Chars): Likewise.
	* doc/c-sparc.texi (SPARC-Chars): Likewise.
	* doc/c-tic6x.texi (TIC6X Syntax): Likewise.
	* doc/c-xtensa.texi (Xtensa Syntax): Likewise.
	* doc/c-z80.texi (Z80-Chars): Likewise.
	* doc/c-z8k.texi (Z8000-Chars): Likewise.
	* doc/c-pdp11.texi (PDP11-Syntax): Document line separator character.
	* doc/c-arc.texi (ARC-Chars): Fill in this subsection.
	* doc/c-bfin.texi (Blackfin Syntax): Document line comment and
	line separator characters.
	* doc/c-cr16.texi (CR16 Syntax): Likewise.
	* doc/c-i386.texi (i386-Chars): Likewise.
	* doc/c-i860.texi (i860-Chars):	Likewise.
	* doc/c-i960.texi (i960-Chars):	Likewise.
	* doc/c-ip2k.texi (IP2K-Chars):	Likewise.
	* doc/c-lm32.texi (LM32-Chars):	likewise.
	* doc/c-m32c.texi (M32C-Chars): Likewise.
	* doc/c-m68hc11.texi (M68HC11-syntax): Likewise.
	* doc/c-m68k.texi (M68K-Chars): Likewise.
	* doc/c-microblaze.texi (MicroBlaze-Chars): Likewise.
	* doc/c-msp430.texi (MSP430-Chars): Likewise.
	* doc/c-mt.texi (MT-Chars): Likewise.
	* doc/c-ns32k.texi (NS32K-Chars): Likewise.
	* doc/c-pj.texi (PJ-Chars): Likewise.
	* doc/c-ppc.texi (PowerPC-Chars): Likewise.
	* doc/c-rx.texi (RX-Chars): Likewise.
	* doc/c-score.texi (SCORE-Chars): Likewise.
	* doc/c-tic54x.texi (TIC54X-Chars): Likewise.
	* doc/c-v850.texi (V850-Chars): Likewise.
	* doc/c-vax.texi (VAX-Chars): Likewise.
	* doc/c-xc16x.texi (xc16x-Chars): Likewise.
@
text
@d116 1
a116 1
@@item --base-size-default-16  --base-size-default-32 
d349 1
a349 1
@@samp{(%a0)} through @@samp{(%a7)}@@* 
d618 1
a618 1
has been specified. 
@


1.12
log
@* doc/as.texinfo (Overview): Use @@itemx for grouped @@table
items.
* doc/c-alpha.texi (Alpha Options): Likewise.
* doc/c-arm.texi (ARM Directives): Likewise.
* doc/c-bfin.texi (Blackfin Options): Likewise.
* doc/c-d10v.texi (D10V-Opts): Likewise.
* doc/c-i386.texi (i386-Options): Likewise.
* doc/c-ia64.texi (IA-64 Options): Likewise.
* doc/c-m68k.texi (M68K-Opts): Likewise.
* doc/c-tic54x.texi (TIC54X-Directives): Likewise.
* doc/internals.texi (Symbols): Likewise.
@
text
@d2 1
a2 1
@@c 2004, 2006, 2007 Free Software Foundation, Inc.
d612 1
a612 2
@@cindex M680x0 immediate character
@@cindex immediate character, M680x0
d616 19
a634 5
The immediate character is @@samp{#} for Sun compatibility.  The
line-comment character is @@samp{|} (unless the @@samp{--bitwise-or}
option is used).  If a @@samp{#} appears at the beginning of a line, it
is treated as a comment unless it looks like @@samp{# line file}, in
which case it is treated normally.
d636 2
@


1.11
log
@update copyright dates
@
text
@d68 6
a73 6
@@item -m[no-]68881
@@item -m[no-]div
@@item -m[no-]usp
@@item -m[no-]float
@@item -m[no-]mac
@@item -m[no-]emac
d213 13
a225 13
@@item -m5202
@@item -m5204
@@item -m5206
@@item -m5206e
@@item -m521x
@@item -m5249
@@item -m528x
@@item -m5307
@@item -m5407
@@item -m547x
@@item -m548x
@@item -mcfv4
@@item -mcfv4e
@


1.10
log
@	gas/testsuite/
	* gas/m68k/br-isaa.s: New.
	* gas/m68k/br-isaa.d: New.
	* gas/m68k/br-isab.s: New.
	* gas/m68k/br-isab.d: New.
	* gas/m68k/br-isac.s: New.
	* gas/m68k/br-isac.d: New.
	* gas/m68k/all.exp: Adjust.

	gas/
	* config/tc-m68k.c (mcf54455_ctrl): New.
	(HAVE_LONG_DISP, HAVE_LONG_CALL, HAVE_LONG_COND): New.
	(m68k_archs): Add isac.
	(m68k_cpus): Add 54455 family.
	(m68k_ip): Split Bg into Bb, Bs, Bg.
	(m68k_elf_final_processing): Add ISA_C.
	* doc/c-m68k.texi (M680x0 Options): Add isac.

	include/opcode/
	* m68k.h (mcfisa_c): New.
	(mcfusp, mcf_mask): Adjust.

	bfd/
	* archures.c (bfd_mach_mcf_isa_c, bfd_mach_mcf_isa_c_mac,
	bfd_mach_mcf_isa_c_emac): New.
	* elf32-m68k.c (ISAC_PLT_ENTRY_SIZE, elf_isac_plt0_entry,
	elf_isac_plt_entry, elf_isac_plt_info): New.
	(elf32_m68k_object_p): Add ISA_C.
	(elf32_m68k_print_private_bfd_data): Print ISA_C.
	(elf32_m68k_get_plt_info): Detect ISA_C.
	* cpu-m68k.c (arch_info): Add ISAC.
	(m68k_arch_features): Likewise,
	(bfd_m68k_compatible): ISAs B & C are not compatible.

	opcodes/
	* m68k-opc.c: Mark mcfisa_c instructions.
@
text
@d2 1
a2 1
@@c 2004 Free Software Foundation, Inc.
@


1.9
log
@Fix spelling typos
@
text
@d48 2
a49 1
@@code{isab} and
@


1.8
log
@	* bfd/archures.c (bfd_mach_mcf5200, bfd_mach_mcf5206e,
	bfd_mach_mcf5307, bfd_mach_mcf5407, bfd_mach_mcf528x,
	bfd_mach_mcfv4e, bfd_mach_mcf521x, bfd_mach_mcf5249,
	bfd_mach_mcf547x, bfd_mach_mcf548x): Remove.
	(bfd_mach_mcf_isa_a, bfd_mach_mcf_isa_a_div,
	bfd_mach_mcf_isa_a_div_mac, bfd_mach_mcf_isa_a_div_emac,
	bfd_mach_mcf_isa_aplus, bfd_mach_mcf_isa_aplus_mac,
	bfd_mach_mcf_isa_aplus_emac, bfd_mach_mcf_isa_aplus_usp,
	bfd_mach_mcf_isa_aplus_usp_mac, bfd_mach_mcf_isa_aplus_usp_emac,
	bfd_mach_mcf_isa_b, bfd_mach_mcf_isa_b_mac, bfd_mach_mcf_isa_b_emac,
	bfd_mach_mcf_isa_b_usp_float, bfd_mach_mcf_isa_b_usp_float_mac,
	bfd_mach_mcf_isa_b_usp_float_emac): New.
	(bfd_default_scan): Update coldfire mapping.
	* bfd/bfd-in.h (bfd_m68k_mach_to_features,
	bfd_m68k_features_to_mach): Declare.
	* bfd/bfd-in2.h: Rebuilt.
	* bfd/cpu-m68k.c (arch_info_struct): Add new coldfire machines,
	adjust legacy names.
	(m68k_arch_features): New.
	(bfd_m68k_mach_to_features,
	bfd_m68k_features_to_mach): Define.
	* bfd/elf32-m68k.c (elf32_m68k_object_p): New.
	(elf32_m68k_merge_private_bfd_data): Merge the CF EF flags.
	(elf32_m68k_print_private_bfd_data): Print the CF EF flags.
	(elf_backend_object_p): Define.
	* bfd/ieee.c (ieee_write_processor): Update coldfire machines.
	* bfd/libbfd.h: Rebuilt.

	* gas/config/tc-m68k.c (mcf5208_control_regs, mcf5213_control_regs,
	mcf5329_control_regs): New.
	(not_current_architecture, selected_arch, selected_cpu): New.
	(m68k_archs, m68k_extensions): New.
	(archs): Renamed to ...
	(m68k_cpus): ... here.  Adjust.
	(n_arches): Remove.
	(md_pseudo_table): Add arch and cpu directives.
	(find_cf_chip, m68k_ip): Adjust table scanning.
	(no_68851, no_68881): Remove.
	(md_assemble): Lazily initialize.
	(select_control_regs): Adjust cpu names. Add 5208, 5213, 5329.
	(md_init_after_args): Move functionality to m68k_init_arch.
	(mri_chip): Adjust table scanning.
	(md_parse_option): Reimplement 'm' processing to add -march & -mcpu
	options with saner parsing.
	(m68k_lookup_cpu, m68k_set_arch, m68k_set_cpu, m68k_set_extension,
	m68k_init_arch): New.
	(s_m68k_cpu, s_m68k_arch): New.
	(md_show_usage): Adjust.
	(m68k_elf_final_processing): Set CF EF flags.
	* gas/config/tc-m68k.h (m68k_init_after_args): Remove.
	(tc_init_after_args): Remove.
	* gas/doc/c-m68k.texi (M68K-Opts): Document -march, -mcpu options.
	(M68k-Directives): Document .arch and .cpu directives.

	* gas/testsuite/gas/m68k/all.exp: Add arch-cpu-1 test.
	* gas/testsuite/gas/m68k/arch-cpu-1.[sd]: New.

	* include/elf/m68k.h (EF_CPU32, EF_M68000, EF_CFV4E): Rename to ...
	(EF_M68K_CPU32, EF_M68K_M68000, EF_M68K_CFV4E): ... here.
	(EF_M68K_ISA_MASK, EF_M68K_ISA_A, EF_M68K_M68K_ISA_A_PLUS,
	EF_M68K_ISA_B, EF_M68K_HW_DIV, EF_M68K_MAC_MASK, EF_M68K_MAC,
	EF_M68K_EMAC, EF_M68K_USP, EF_M68K_FLOAT): New.

	* include/opcode/m68k.h (m68008, m68ec030, m68882): Remove.
	(m68k_mask): New.
	(cpu_m68k, cpu_cf): New.
	(mcf5200, mcf5206e, mcf521x, mcf5249, mcf528x, mcf5307, mcf5407,
	mcf5470, mcf5480): Rename to cpu_<foo>. Add m680x0 variants.

	* opcodes/m68k-dis.c (print_insn_m68k): Use
	bfd_m68k_mach_to_features.

	* binutils/readelf.c (get_machine_flags): Add logic for EF_M68K flags.
@
text
@d287 1
a287 1
@@samp{%a7} is also known as @@samp{%sp}, i.e. the Stack Pointer.  @@code{%a6}
d349 1
a349 1
@@samp{%a7} is also known as @@samp{%sp}, i.e. the Stack Pointer.  @@code{%a6}
d448 1
a448 1
Select the target architecture and extension features.  Valid valuse
d452 1
a452 1
or in conjuction with the @@option{-march} option, all uses must be for
d461 1
a461 1
or in conjuction with the @@option{-mopt} option, all uses must be for
@


1.7
log
@update copyright dates
@
text
@d35 44
d445 19
@


1.6
log
@Add support for 521x,5249,547x,548x.
@
text
@d1 2
a2 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003, 2004
@@c Free Software Foundation, Inc.
@


1.5
log
@Add ColfFire v4 support
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003
d172 2
d177 2
@


1.4
log
@Fix copyright notices
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000
d168 9
@


1.3
log
@(@@cindex @@samp{--pcrel}): Rewrite option description.
@
text
@d1 2
a2 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
@


1.3.2.1
log
@Update copyright notices.
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000
@@c Free Software Foundation, Inc.
@


1.2
log
@Add --pcrel option to m68k port
@
text
@d30 3
a32 1
dependent options.
d35 1
d47 1
d61 1
d70 1
d82 1
d95 10
a104 5
Always generate PC relative branches.  Actually what this option really
does is to prevent PC relative branches from being turned into absolute
jumps.  If this cannot be done (because the specific architecture does
not have a suitable PC relative branch instruction), the assembler will
generate an error message.
d109 1
d191 1
d427 9
a435 9
          +-------------------------------------------------
          |                68020   68000/10
Pseudo-Op |BYTE    WORD    LONG    LONG      non-PC relative
          +-------------------------------------------------
     jbsr |bsrs    bsr     bsrl    jsr       jsr
      jra |bras    bra     bral    jmp       jmp
*     jXX |bXXs    bXX     bXXl    bNXs;jmpl bNXs;jmp
*    dbXX |dbXX    dbXX        dbXX; bra; jmpl
*    fjXX |fbXXw   fbXXw   fbXXl             fbNXw;jmp
d442 1
d449 11
a459 1
branch target.
d470 5
a474 4
For the cases of non-PC relative displacements and long displacements on
the 68000 or 68010, @@code{@@value{AS}} issues a longer code fragment in terms of
@@var{NX}, the opposite condition to @@var{XX}.  For example, for the
non-PC relative case:
d493 4
a496 1
Other than for word and byte displacements, when the source reads
d500 11
a510 2
     bra oo2
 oo1:jmpl foo
d524 3
a526 7
For branch targets that are not PC relative, @@code{@@value{AS}} emits
@@smallexample
     fb@@var{NX} oof
     jmp foo
 oof:
@@end smallexample
when it encounters @@samp{fj@@var{XX} foo}.
@


1.1
log
@Initial revision
@
text
@d87 7
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

