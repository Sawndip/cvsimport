head	1.274;
access;
symbols
	binutils-2_24-branch:1.273.0.2
	binutils-2_24-branchpoint:1.273
	binutils-2_21_1:1.225.2.2
	binutils-2_23_2:1.253.2.1
	binutils-2_23_1:1.253.2.1
	binutils-2_23:1.253.2.1
	binutils-2_23-branch:1.253.0.2
	binutils-2_23-branchpoint:1.253
	binutils-2_22_branch:1.241.0.4
	binutils-2_22:1.241
	binutils-2_22-branch:1.241.0.2
	binutils-2_22-branchpoint:1.241
	binutils-2_21:1.225
	binutils-2_21-branch:1.225.0.2
	binutils-2_21-branchpoint:1.225
	binutils-2_20_1:1.208.2.3
	binutils-2_20:1.208.2.2
	binutils-arc-20081103-branch:1.189.0.4
	binutils-arc-20081103-branchpoint:1.189
	binutils-2_20-branch:1.208.0.2
	binutils-2_20-branchpoint:1.208
	dje-cgen-play1-branch:1.204.0.2
	dje-cgen-play1-branchpoint:1.204
	arc-20081103-branch:1.189.0.2
	arc-20081103-branchpoint:1.189
	binutils-2_19_1:1.183.2.1
	binutils-2_19:1.183.2.1
	binutils-2_19-branch:1.183.0.2
	binutils-2_19-branchpoint:1.183
	binutils-2_18:1.166.2.1
	binutils-2_18-branch:1.166.0.2
	binutils-2_18-branchpoint:1.166
	binutils-csl-coldfire-4_1-32:1.141.2.3
	binutils-csl-sourcerygxx-4_1-32:1.141.2.3
	binutils-csl-innovasic-fido-3_4_4-33:1.141.2.3
	binutils-csl-sourcerygxx-3_4_4-32:1.117
	binutils-csl-coldfire-4_1-30:1.141.2.3
	binutils-csl-sourcerygxx-4_1-30:1.141.2.3
	binutils-csl-coldfire-4_1-28:1.141.2.3
	binutils-csl-sourcerygxx-4_1-29:1.141.2.3
	binutils-csl-sourcerygxx-4_1-28:1.141.2.3
	binutils-csl-arm-2006q3-27:1.141.2.3
	binutils-csl-sourcerygxx-4_1-27:1.141.2.3
	binutils-csl-arm-2006q3-26:1.141.2.3
	binutils-csl-sourcerygxx-4_1-26:1.141.2.3
	binutils-csl-sourcerygxx-4_1-25:1.141.2.3
	binutils-csl-sourcerygxx-4_1-24:1.141.2.3
	binutils-csl-sourcerygxx-4_1-23:1.141.2.3
	binutils-csl-sourcerygxx-4_1-21:1.141.2.3
	binutils-csl-arm-2006q3-21:1.141.2.3
	binutils-csl-sourcerygxx-4_1-22:1.141.2.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.141.2.3
	binutils-csl-sourcerygxx-4_1-20:1.141.2.3
	binutils-csl-arm-2006q3-19:1.141.2.3
	binutils-csl-sourcerygxx-4_1-19:1.141.2.3
	binutils-csl-sourcerygxx-4_1-18:1.141.2.3
	binutils-csl-renesas-4_1-9:1.141.2.3
	binutils-csl-sourcerygxx-3_4_4-25:1.117
	binutils-csl-renesas-4_1-8:1.141.2.2
	binutils-csl-renesas-4_1-7:1.141.2.2
	binutils-csl-renesas-4_1-6:1.141.2.2
	binutils-csl-sourcerygxx-4_1-17:1.141.2.2
	binutils-csl-sourcerygxx-4_1-14:1.141.2.2
	binutils-csl-sourcerygxx-4_1-15:1.141.2.2
	binutils-csl-sourcerygxx-4_1-13:1.141.2.2
	binutils-2_17:1.141.4.1
	binutils-csl-sourcerygxx-4_1-12:1.141.2.2
	binutils-csl-sourcerygxx-3_4_4-21:1.141.2.2
	binutils-csl-wrs-linux-3_4_4-24:1.117
	binutils-csl-wrs-linux-3_4_4-23:1.117
	binutils-csl-sourcerygxx-4_1-9:1.141.2.2
	binutils-csl-sourcerygxx-4_1-8:1.141.2.2
	binutils-csl-sourcerygxx-4_1-7:1.141.2.2
	binutils-csl-arm-2006q1-6:1.141.2.2
	binutils-csl-sourcerygxx-4_1-6:1.141.2.2
	binutils-csl-wrs-linux-3_4_4-22:1.117
	binutils-csl-coldfire-4_1-11:1.141.2.2
	binutils-csl-sourcerygxx-3_4_4-19:1.141.2.2
	binutils-csl-coldfire-4_1-10:1.141.2.2
	binutils-csl-sourcerygxx-4_1-5:1.141.2.2
	binutils-csl-sourcerygxx-4_1-4:1.141.2.1
	binutils-csl-wrs-linux-3_4_4-21:1.117
	binutils-csl-morpho-4_1-4:1.141.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.141
	binutils-csl-wrs-linux-3_4_4-20:1.117
	binutils-2_17-branch:1.141.0.4
	binutils-2_17-branchpoint:1.141
	binutils-csl-2_17-branch:1.141.0.2
	binutils-csl-2_17-branchpoint:1.141
	binutils-csl-gxxpro-3_4-branch:1.117.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.117
	binutils-2_16_1:1.117
	binutils-csl-arm-2005q1b:1.117
	binutils-2_16:1.117
	binutils-csl-arm-2005q1a:1.117
	binutils-csl-arm-2005q1-branch:1.117.0.4
	binutils-csl-arm-2005q1-branchpoint:1.117
	binutils-2_16-branch:1.117.0.2
	binutils-2_16-branchpoint:1.117
	csl-arm-2004-q3d:1.109
	csl-arm-2004-q3:1.105
	binutils-2_15:1.96
	binutils-2_15-branchpoint:1.96
	csl-arm-2004-q1a:1.99
	csl-arm-2004-q1:1.97
	binutils-2_15-branch:1.96.0.6
	cagney_bfdfile-20040213-branch:1.96.0.4
	cagney_bfdfile-20040213-branchpoint:1.96
	cagney_bigcore-20040122-branch:1.96.0.2
	cagney_bigcore-20040122-branchpoint:1.96
	csl-arm-2003-q4:1.94
	binutils-2_14:1.81
	binutils-2_14-branch:1.81.0.2
	binutils-2_14-branchpoint:1.81
	binutils-2_13_2_1:1.66.2.1
	binutils-2_13_2:1.66.2.1
	binutils-2_13_1:1.66
	binutils-2_13:1.66
	binutils-2_13-branchpoint:1.66
	binutils-2_13-branch:1.66.0.2
	binutils-2_12_1:1.55.2.4
	binutils-2_12:1.55.2.4
	binutils-2_12-branch:1.55.0.2
	binutils-2_12-branchpoint:1.55
	cygnus_cvs_20020108_pre:1.50
	binutils-2_11_2:1.32.2.2
	binutils-2_11_1:1.32.2.2
	binutils-2_11:1.32
	x86_64versiong3:1.34
	binutils-2_11-branch:1.32.0.2
	binutils-2_10_1:1.9.2.2
	binutils-2_10:1.9.2.2
	binutils-2_10-branch:1.9.0.2
	binutils-2_10-branchpoint:1.9
	binutils_latest_snapshot:1.274
	repo-unification-2000-02-06:1.7
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.274
date	2013.10.14.18.50.54;	author chaoyingfu;	state Exp;
branches;
next	1.273;

1.273
date	2013.07.19.16.25.54;	author yufeng;	state Exp;
branches;
next	1.272;

1.272
date	2013.07.12.15.58.14;	author macro;	state Exp;
branches;
next	1.271;

1.271
date	2013.06.26.12.15.43;	author macro;	state Exp;
branches;
next	1.270;

1.270
date	2013.06.25.18.02.33;	author macro;	state Exp;
branches;
next	1.269;

1.269
date	2013.06.22.16.44.14;	author rsandifo;	state Exp;
branches;
next	1.268;

1.268
date	2013.06.22.16.18.44;	author rsandifo;	state Exp;
branches;
next	1.267;

1.267
date	2013.06.10.18.15.47;	author macro;	state Exp;
branches;
next	1.266;

1.266
date	2013.04.29.13.38.58;	author nickc;	state Exp;
branches;
next	1.265;

1.265
date	2013.04.03.02.48.37;	author amodra;	state Exp;
branches;
next	1.264;

1.264
date	2013.02.06.23.22.14;	author sandra;	state Exp;
branches;
next	1.263;

1.263
date	2013.01.11.02.25.33;	author bergner;	state Exp;
branches;
next	1.262;

1.262
date	2013.01.10.09.49.09;	author nickc;	state Exp;
branches;
next	1.261;

1.261
date	2012.11.09.17.00.44;	author nickc;	state Exp;
branches;
next	1.260;

1.260
date	2012.10.30.12.44.54;	author nickc;	state Exp;
branches;
next	1.259;

1.259
date	2012.10.18.06.46.51;	author ktietz;	state Exp;
branches;
next	1.258;

1.258
date	2012.10.12.18.03.09;	author bergner;	state Exp;
branches;
next	1.257;

1.257
date	2012.10.04.08.47.31;	author krebbel;	state Exp;
branches;
next	1.256;

1.256
date	2012.09.05.18.19.55;	author jwlemke;	state Exp;
branches;
next	1.255;

1.255
date	2012.08.20.13.57.05;	author hjl;	state Exp;
branches;
next	1.254;

1.254
date	2012.08.13.14.52.45;	author nickc;	state Exp;
branches;
next	1.253;

1.253
date	2012.05.29.16.32.10;	author roland;	state Exp;
branches
	1.253.2.1;
next	1.252;

1.252
date	2012.05.28.14.20.13;	author nickc;	state Exp;
branches;
next	1.251;

1.251
date	2012.05.15.12.55.39;	author nickc;	state Exp;
branches;
next	1.250;

1.250
date	2012.05.03.13.12.00;	author nickc;	state Exp;
branches;
next	1.249;

1.249
date	2012.03.15.11.19.13;	author tschwinge;	state Exp;
branches;
next	1.248;

1.248
date	2012.03.14.17.51.16;	author hjl;	state Exp;
branches;
next	1.247;

1.247
date	2012.03.13.16.59.55;	author roland;	state Exp;
branches;
next	1.246;

1.246
date	2012.03.09.23.39.04;	author amodra;	state Exp;
branches;
next	1.245;

1.245
date	2012.02.25.19.51.33;	author walt;	state Exp;
branches;
next	1.244;

1.244
date	2011.11.02.03.09.06;	author dj;	state Exp;
branches;
next	1.243;

1.243
date	2011.10.26.12.14.17;	author amylaar;	state Exp;
branches;
next	1.242;

1.242
date	2011.10.25.11.18.08;	author nickc;	state Exp;
branches;
next	1.241;

1.241
date	2011.08.19.14.48.40;	author nickc;	state Exp;
branches;
next	1.240;

1.240
date	2011.08.09.15.20.02;	author macro;	state Exp;
branches;
next	1.239;

1.239
date	2011.07.28.16.35.46;	author nickc;	state Exp;
branches;
next	1.238;

1.238
date	2011.07.24.14.20.09;	author rsandifo;	state Exp;
branches;
next	1.237;

1.237
date	2011.07.03.13.37.08;	author tschwinge;	state Exp;
branches;
next	1.236;

1.236
date	2011.06.13.15.18.48;	author nickc;	state Exp;
branches;
next	1.235;

1.235
date	2011.03.16.12.58.26;	author hjl;	state Exp;
branches;
next	1.234;

1.234
date	2011.02.10.12.29.23;	author amodra;	state Exp;
branches;
next	1.233;

1.233
date	2011.02.10.11.59.12;	author amodra;	state Exp;
branches;
next	1.232;

1.232
date	2011.02.03.23.20.26;	author bernds;	state Exp;
branches;
next	1.231;

1.231
date	2011.01.18.13.37.39;	author nickc;	state Exp;
branches;
next	1.230;

1.230
date	2010.12.31.00.33.34;	author hjl;	state Exp;
branches;
next	1.229;

1.229
date	2010.11.24.22.20.02;	author vapier;	state Exp;
branches;
next	1.228;

1.228
date	2010.11.23.19.19.38;	author sterling;	state Exp;
branches;
next	1.227;

1.227
date	2010.11.23.15.27.36;	author hjl;	state Exp;
branches;
next	1.226;

1.226
date	2010.11.22.22.11.52;	author jsm28;	state Exp;
branches;
next	1.225;

1.225
date	2010.11.02.14.36.36;	author jsm28;	state Exp;
branches
	1.225.2.1;
next	1.224;

1.224
date	2010.10.29.00.15.53;	author jsm28;	state Exp;
branches;
next	1.223;

1.223
date	2010.10.28.11.40.26;	author amodra;	state Exp;
branches;
next	1.222;

1.222
date	2010.08.17.20.03.40;	author roland;	state Exp;
branches;
next	1.221;

1.221
date	2010.08.09.18.08.18;	author ccoutant;	state Exp;
branches;
next	1.220;

1.220
date	2010.06.21.10.49.41;	author schwab;	state Exp;
branches;
next	1.219;

1.219
date	2010.06.08.10.30.55;	author nickc;	state Exp;
branches;
next	1.218;

1.218
date	2010.05.18.03.31.04;	author hjl;	state Exp;
branches;
next	1.217;

1.217
date	2010.03.25.21.12.28;	author jsm28;	state Exp;
branches;
next	1.216;

1.216
date	2010.03.10.03.57.00;	author jiez;	state Exp;
branches;
next	1.215;

1.215
date	2010.01.27.22.01.37;	author davek;	state Exp;
branches;
next	1.214;

1.214
date	2009.10.29.00.19.19;	author amodra;	state Exp;
branches;
next	1.213;

1.213
date	2009.10.26.10.10.37;	author nickc;	state Exp;
branches;
next	1.212;

1.212
date	2009.10.25.02.11.13;	author macro;	state Exp;
branches;
next	1.211;

1.211
date	2009.10.02.11.33.50;	author jakub;	state Exp;
branches;
next	1.210;

1.210
date	2009.09.29.14.17.09;	author nickc;	state Exp;
branches;
next	1.209;

1.209
date	2009.09.05.15.00.07;	author jiez;	state Exp;
branches;
next	1.208;

1.208
date	2009.09.04.02.31.44;	author jiez;	state Exp;
branches
	1.208.2.1;
next	1.207;

1.207
date	2009.08.06.17.38.02;	author nickc;	state Exp;
branches;
next	1.206;

1.206
date	2009.07.23.13.00.27;	author nickc;	state Exp;
branches;
next	1.205;

1.205
date	2009.07.01.16.36.28;	author nickc;	state Exp;
branches;
next	1.204;

1.204
date	2009.06.20.02.52.08;	author amodra;	state Exp;
branches;
next	1.203;

1.203
date	2009.05.19.16.08.06;	author davek;	state Exp;
branches;
next	1.202;

1.202
date	2009.05.17.20.09.02;	author ktietz;	state Exp;
branches;
next	1.201;

1.201
date	2009.04.30.15.47.12;	author nickc;	state Exp;
branches;
next	1.200;

1.200
date	2009.04.24.18.31.28;	author ccoutant;	state Exp;
branches;
next	1.199;

1.199
date	2009.03.27.08.26.18;	author nickc;	state Exp;
branches;
next	1.198;

1.198
date	2009.03.03.10.04.58;	author gingold;	state Exp;
branches;
next	1.197;

1.197
date	2009.03.02.10.33.07;	author nickc;	state Exp;
branches;
next	1.196;

1.196
date	2009.02.23.10.10.25;	author sky;	state Exp;
branches;
next	1.195;

1.195
date	2008.12.23.19.10.21;	author nickc;	state Exp;
branches;
next	1.194;

1.194
date	2008.12.23.09.01.47;	author nickc;	state Exp;
branches;
next	1.193;

1.193
date	2008.12.04.10.29.15;	author bje;	state Exp;
branches;
next	1.192;

1.192
date	2008.12.04.08.53.39;	author nickc;	state Exp;
branches;
next	1.191;

1.191
date	2008.12.03.14.50.58;	author nickc;	state Exp;
branches;
next	1.190;

1.190
date	2008.11.19.16.22.47;	author nickc;	state Exp;
branches;
next	1.189;

1.189
date	2008.10.09.18.12.29;	author bwilson;	state Exp;
branches;
next	1.188;

1.188
date	2008.10.09.18.10.44;	author bwilson;	state Exp;
branches;
next	1.187;

1.187
date	2008.10.09.18.08.10;	author bwilson;	state Exp;
branches;
next	1.186;

1.186
date	2008.10.09.15.12.56;	author nickc;	state Exp;
branches;
next	1.185;

1.185
date	2008.10.06.17.31.39;	author bwilson;	state Exp;
branches;
next	1.184;

1.184
date	2008.09.24.23.21.04;	author rth;	state Exp;
branches;
next	1.183;

1.183
date	2008.08.13.02.50.41;	author bje;	state Exp;
branches
	1.183.2.1;
next	1.182;

1.182
date	2008.08.06.15.42.15;	author dj;	state Exp;
branches;
next	1.181;

1.181
date	2008.08.02.04.38.50;	author bergner;	state Exp;
branches;
next	1.180;

1.180
date	2008.07.26.13.10.47;	author amodra;	state Exp;
branches;
next	1.179;

1.179
date	2008.07.18.22.25.07;	author dj;	state Exp;
branches;
next	1.178;

1.178
date	2008.04.10.12.45.18;	author nickc;	state Exp;
branches;
next	1.177;

1.177
date	2008.01.22.19.16.44;	author hjl;	state Exp;
branches;
next	1.176;

1.176
date	2007.11.17.13.38.56;	author ths;	state Exp;
branches;
next	1.175;

1.175
date	2007.10.30.14.23.22;	author nickc;	state Exp;
branches;
next	1.174;

1.174
date	2007.10.27.17.45.53;	author hjl;	state Exp;
branches;
next	1.173;

1.173
date	2007.10.16.18.33.09;	author bwilson;	state Exp;
branches;
next	1.172;

1.172
date	2007.10.12.16.28.02;	author nickc;	state Exp;
branches;
next	1.171;

1.171
date	2007.10.12.14.00.31;	author drow;	state Exp;
branches;
next	1.170;

1.170
date	2007.10.11.10.37.30;	author nickc;	state Exp;
branches;
next	1.169;

1.169
date	2007.10.08.15.29.40;	author nickc;	state Exp;
branches;
next	1.168;

1.168
date	2007.10.04.17.05.37;	author nickc;	state Exp;
branches;
next	1.167;

1.167
date	2007.08.24.21.49.55;	author jsm28;	state Exp;
branches;
next	1.166;

1.166
date	2007.06.29.14.09.30;	author nickc;	state Exp;
branches
	1.166.2.1;
next	1.165;

1.165
date	2007.05.22.09.16.35;	author nickc;	state Exp;
branches;
next	1.164;

1.164
date	2007.05.17.17.27.26;	author hjl;	state Exp;
branches;
next	1.163;

1.163
date	2007.04.02.14.25.27;	author rsandifo;	state Exp;
branches;
next	1.162;

1.162
date	2007.03.28.09.08.53;	author rsandifo;	state Exp;
branches;
next	1.161;

1.161
date	2007.03.26.12.23.48;	author amodra;	state Exp;
branches;
next	1.160;

1.160
date	2007.03.22.21.18.31;	author jsm28;	state Exp;
branches;
next	1.159;

1.159
date	2007.03.15.14.17.18;	author hjl;	state Exp;
branches;
next	1.158;

1.158
date	2007.03.07.22.50.00;	author jsm28;	state Exp;
branches;
next	1.157;

1.157
date	2007.02.20.13.28.52;	author ths;	state Exp;
branches;
next	1.156;

1.156
date	2007.01.30.14.44.36;	author nickc;	state Exp;
branches;
next	1.155;

1.155
date	2006.11.03.07.29.37;	author jakub;	state Exp;
branches;
next	1.154;

1.154
date	2006.09.25.16.26.03;	author bwilson;	state Exp;
branches;
next	1.153;

1.153
date	2006.09.20.21.25.10;	author bwilson;	state Exp;
branches;
next	1.152;

1.152
date	2006.09.08.16.25.46;	author nickc;	state Exp;
branches;
next	1.151;

1.151
date	2006.07.24.13.49.49;	author nickc;	state Exp;
branches;
next	1.150;

1.150
date	2006.07.06.10.34.02;	author nickc;	state Exp;
branches;
next	1.149;

1.149
date	2006.06.24.18.25.10;	author hjl;	state Exp;
branches;
next	1.148;

1.148
date	2006.06.16.15.46.11;	author hjl;	state Exp;
branches;
next	1.147;

1.147
date	2006.06.01.14.54.25;	author denisc;	state Exp;
branches;
next	1.146;

1.146
date	2006.05.24.07.36.10;	author nickc;	state Exp;
branches;
next	1.145;

1.145
date	2006.05.11.16.11.29;	author carlos;	state Exp;
branches;
next	1.144;

1.144
date	2006.05.08.15.57.05;	author ths;	state Exp;
branches;
next	1.143;

1.143
date	2006.05.02.14.20.46;	author drow;	state Exp;
branches;
next	1.142;

1.142
date	2006.04.16.18.15.55;	author mmitchel;	state Exp;
branches;
next	1.141;

1.141
date	2006.03.17.00.45.13;	author bje;	state Exp;
branches
	1.141.2.1
	1.141.4.1;
next	1.140;

1.140
date	2006.02.27.23.07.06;	author jakub;	state Exp;
branches;
next	1.139;

1.139
date	2005.11.26.20.03.53;	author arnoldm;	state Exp;
branches;
next	1.138;

1.138
date	2005.11.07.18.07.12;	author mmitchel;	state Exp;
branches;
next	1.137;

1.137
date	2005.10.25.17.40.18;	author nickc;	state Exp;
branches;
next	1.136;

1.136
date	2005.10.24.17.51.42;	author aoliva;	state Exp;
branches;
next	1.135;

1.135
date	2005.10.18.07.47.01;	author nickc;	state Exp;
branches;
next	1.134;

1.134
date	2005.10.14.08.24.48;	author nickc;	state Exp;
branches;
next	1.133;

1.133
date	2005.10.11.11.16.16;	author nickc;	state Exp;
branches;
next	1.132;

1.132
date	2005.10.10.15.32.44;	author nickc;	state Exp;
branches;
next	1.131;

1.131
date	2005.10.03.09.41.06;	author nickc;	state Exp;
branches;
next	1.130;

1.130
date	2005.09.30.15.05.07;	author clm;	state Exp;
branches;
next	1.129;

1.129
date	2005.09.20.18.24.48;	author rth;	state Exp;
branches;
next	1.128;

1.128
date	2005.09.08.18.05.14;	author chaoyingfu;	state Exp;
branches;
next	1.127;

1.127
date	2005.09.07.19.22.41;	author rth;	state Exp;
branches;
next	1.126;

1.126
date	2005.09.07.11.41.24;	author rth;	state Exp;
branches;
next	1.125;

1.125
date	2005.09.06.18.53.03;	author chaoyingfu;	state Exp;
branches;
next	1.124;

1.124
date	2005.08.11.01.25.29;	author amodra;	state Exp;
branches;
next	1.123;

1.123
date	2005.07.14.22.52.09;	author jimb;	state Exp;
branches;
next	1.122;

1.122
date	2005.05.06.06.50.29;	author jbeulich;	state Exp;
branches;
next	1.121;

1.121
date	2005.05.06.06.38.10;	author jbeulich;	state Exp;
branches;
next	1.120;

1.120
date	2005.04.12.08.42.41;	author nickc;	state Exp;
branches;
next	1.119;

1.119
date	2005.04.11.12.46.36;	author jbeulich;	state Exp;
branches;
next	1.118;

1.118
date	2005.03.28.22.34.17;	author hjl;	state Exp;
branches;
next	1.117;

1.117
date	2005.03.08.13.59.23;	author jbeulich;	state Exp;
branches;
next	1.116;

1.116
date	2005.03.03.01.29.53;	author amodra;	state Exp;
branches;
next	1.115;

1.115
date	2005.02.17.23.22.03;	author hjl;	state Exp;
branches;
next	1.114;

1.114
date	2005.02.11.21.01.18;	author hjl;	state Exp;
branches;
next	1.113;

1.113
date	2005.02.11.06.29.08;	author hjl;	state Exp;
branches;
next	1.112;

1.112
date	2004.11.22.13.05.27;	author hp;	state Exp;
branches;
next	1.111;

1.111
date	2004.11.08.08.12.46;	author nickc;	state Exp;
branches;
next	1.110;

1.110
date	2004.11.04.21.52.55;	author bwilson;	state Exp;
branches;
next	1.109;

1.109
date	2004.11.04.15.54.44;	author drow;	state Exp;
branches;
next	1.108;

1.108
date	2004.11.04.15.00.37;	author hp;	state Exp;
branches;
next	1.107;

1.107
date	2004.10.11.16.39.34;	author bwilson;	state Exp;
branches;
next	1.106;

1.106
date	2004.10.08.00.22.11;	author bwilson;	state Exp;
branches;
next	1.105;

1.105
date	2004.09.08.20.52.49;	author pbrook;	state Exp;
branches;
next	1.104;

1.104
date	2004.08.17.12.19.57;	author nickc;	state Exp;
branches;
next	1.103;

1.103
date	2004.08.13.19.53.51;	author nickc;	state Exp;
branches;
next	1.102;

1.102
date	2004.07.26.03.34.35;	author drow;	state Exp;
branches;
next	1.101;

1.101
date	2004.07.03.16.07.50;	author cgf;	state Exp;
branches;
next	1.100;

1.100
date	2004.05.11.15.53.47;	author nickc;	state Exp;
branches;
next	1.99;

1.99
date	2004.04.23.04.50.53;	author cgd;	state Exp;
branches;
next	1.98;

1.98
date	2004.04.13.17.56.13;	author bwilson;	state Exp;
branches;
next	1.97;

1.97
date	2004.03.23.23.05.52;	author pbrook;	state Exp;
branches;
next	1.96;

1.96
date	2004.01.09.02.34.04;	author ian;	state Exp;
branches;
next	1.95;

1.95
date	2004.01.05.22.19.33;	author macro;	state Exp;
branches;
next	1.94;

1.94
date	2003.12.10.12.11.26;	author pbrook;	state Exp;
branches;
next	1.93;

1.93
date	2003.10.15.14.16.29;	author amodra;	state Exp;
branches;
next	1.92;

1.92
date	2003.10.08.14.37.20;	author nickc;	state Exp;
branches;
next	1.91;

1.91
date	2003.09.30.16.17.13;	author cgd;	state Exp;
branches;
next	1.90;

1.90
date	2003.09.07.12.28.09;	author nickc;	state Exp;
branches;
next	1.89;

1.89
date	2003.08.29.20.32.56;	author jakub;	state Exp;
branches;
next	1.88;

1.88
date	2003.08.29.20.20.18;	author jakub;	state Exp;
branches;
next	1.87;

1.87
date	2003.07.28.20.06.27;	author ro;	state Exp;
branches;
next	1.86;

1.86
date	2003.06.12.14.32.19;	author tromey;	state Exp;
branches;
next	1.85;

1.85
date	2003.06.11.23.16.57;	author rth;	state Exp;
branches;
next	1.84;

1.84
date	2003.06.10.06.46.34;	author hjl;	state Exp;
branches;
next	1.83;

1.83
date	2003.06.08.10.06.17;	author rth;	state Exp;
branches;
next	1.82;

1.82
date	2003.05.20.07.58.07;	author amodra;	state Exp;
branches;
next	1.81;

1.81
date	2003.04.23.21.09.03;	author amylaar;	state Exp;
branches;
next	1.80;

1.80
date	2003.04.22.16.20.49;	author nickc;	state Exp;
branches;
next	1.79;

1.79
date	2003.04.15.08.51.53;	author nickc;	state Exp;
branches;
next	1.78;

1.78
date	2003.04.01.15.50.30;	author nickc;	state Exp;
branches;
next	1.77;

1.77
date	2003.03.24.15.43.15;	author nickc;	state Exp;
branches;
next	1.76;

1.76
date	2003.02.21.10.35.07;	author nickc;	state Exp;
branches;
next	1.75;

1.75
date	2003.01.17.22.29.53;	author ciceron;	state Exp;
branches;
next	1.74;

1.74
date	2002.12.31.07.29.27;	author cgd;	state Exp;
branches;
next	1.73;

1.73
date	2002.12.30.19.25.07;	author nickc;	state Exp;
branches;
next	1.72;

1.72
date	2002.12.19.05.47.44;	author amodra;	state Exp;
branches;
next	1.71;

1.71
date	2002.12.01.10.20.06;	author ciceron;	state Exp;
branches;
next	1.70;

1.70
date	2002.08.22.20.10.53;	author nickc;	state Exp;
branches;
next	1.69;

1.69
date	2002.07.22.19.04.28;	author denisc;	state Exp;
branches;
next	1.68;

1.68
date	2002.07.19.11.35.06;	author nickc;	state Exp;
branches;
next	1.67;

1.67
date	2002.07.19.07.52.39;	author nickc;	state Exp;
branches;
next	1.66;

1.66
date	2002.06.14.14.08.53;	author drow;	state Exp;
branches
	1.66.2.1;
next	1.65;

1.65
date	2002.06.07.23.07.19;	author ths;	state Exp;
branches;
next	1.64;

1.64
date	2002.05.31.01.17.15;	author cgd;	state Exp;
branches;
next	1.63;

1.63
date	2002.05.23.10.45.12;	author nickc;	state Exp;
branches;
next	1.62;

1.62
date	2002.03.16.03.09.15;	author cgd;	state Exp;
branches;
next	1.61;

1.61
date	2002.03.08.04.21.51;	author drow;	state Exp;
branches;
next	1.60;

1.60
date	2002.02.26.12.04.30;	author nickc;	state Exp;
branches;
next	1.59;

1.59
date	2002.02.25.10.34.25;	author nickc;	state Exp;
branches;
next	1.58;

1.58
date	2002.02.16.11.01.58;	author nickc;	state Exp;
branches;
next	1.57;

1.57
date	2002.02.15.11.24.30;	author bje;	state Exp;
branches;
next	1.56;

1.56
date	2002.02.10.23.25.17;	author rth;	state Exp;
branches;
next	1.55;

1.55
date	2002.02.09.03.12.24;	author hp;	state Exp;
branches
	1.55.2.1;
next	1.54;

1.54
date	2002.02.08.06.32.22;	author aoliva;	state Exp;
branches;
next	1.53;

1.53
date	2002.02.01.08.09.47;	author hp;	state Exp;
branches;
next	1.52;

1.52
date	2002.01.21.00.20.58;	author hp;	state Exp;
branches;
next	1.51;

1.51
date	2002.01.18.17.01.54;	author rearnsha;	state Exp;
branches;
next	1.50;

1.50
date	2001.11.09.20.24.02;	author ciceron;	state Exp;
branches;
next	1.49;

1.49
date	2001.10.30.15.20.07;	author nickc;	state Exp;
branches;
next	1.48;

1.48
date	2001.10.17.19.16.16;	author cgd;	state Exp;
branches;
next	1.47;

1.47
date	2001.10.13.01.59.08;	author mrg;	state Exp;
branches;
next	1.46;

1.46
date	2001.10.05.16.36.55;	author jakub;	state Exp;
branches;
next	1.45;

1.45
date	2001.10.02.09.18.42;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2001.09.19.07.55.23;	author nickc;	state Exp;
branches;
next	1.43;

1.43
date	2001.07.10.10.11.35;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.09.08.19.18;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2001.07.05.00.22.29;	author bje;	state Exp;
branches;
next	1.40;

1.40
date	2001.06.12.15.56.04;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2001.06.11.20.40.36;	author hjl;	state Exp;
branches;
next	1.38;

1.38
date	2001.03.27.04.51.28;	author bje;	state Exp;
branches;
next	1.37;

1.37
date	2001.03.25.20.32.29;	author nickc;	state Exp;
branches;
next	1.36;

1.36
date	2001.03.23.19.35.02;	author nickc;	state Exp;
branches;
next	1.35;

1.35
date	2001.03.08.23.24.26;	author nickc;	state Exp;
branches;
next	1.34;

1.34
date	2001.02.21.19.43.36;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2001.02.18.23.33.03;	author nickc;	state Exp;
branches;
next	1.32;

1.32
date	2001.01.13.22.39.55;	author pb;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2001.01.11.21.20.17;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	2001.01.07.15.11.26;	author pb;	state Exp;
branches;
next	1.29;

1.29
date	2001.01.06.11.06.26;	author aj;	state Exp;
branches;
next	1.28;

1.28
date	2000.12.02.01.10.32;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2000.12.02.00.52.55;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	2000.12.01.21.35.36;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2000.11.13.21.23.34;	author hjl;	state Exp;
branches;
next	1.24;

1.24
date	2000.11.08.00.24.23;	author hjl;	state Exp;
branches;
next	1.23;

1.23
date	2000.11.06.20.26.51;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2000.10.25.19.15.34;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2000.10.17.20.08.37;	author cchavva;	state Exp;
branches;
next	1.20;

1.20
date	2000.09.14.01.47.35;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2000.08.05.18.41.46;	author ian;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.04.20.47.06;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2000.08.04.20.39.01;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2000.08.01.01.57.46;	author jle;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.20.13.52.29;	author twall;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.19.01.22.40;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.29.18.48.26;	author pb;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.29.18.18.42;	author pb;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.24.23.57.30;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.09.20.25.17;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.23.13.52.21;	author amodra;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2000.02.08.14.13.57;	author twall;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.10.22.22.56;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.03.18.34.24;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	99.10.11.04.07.10;	author geoffk;	state Exp;
branches;
next	1.4;

1.4
date	99.09.04.17.29.22;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	99.09.01.09.28.07;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.08.08.16.53.30;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.44;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.253.2.1
date	2012.08.16.09.21.44;	author nickc;	state Exp;
branches;
next	;

1.225.2.1
date	2011.03.18.12.01.50;	author amodra;	state Exp;
branches;
next	1.225.2.2;

1.225.2.2
date	2011.03.19.00.27.26;	author amodra;	state Exp;
branches;
next	;

1.208.2.1
date	2009.09.05.15.00.54;	author jiez;	state Exp;
branches;
next	1.208.2.2;

1.208.2.2
date	2009.10.06.10.59.08;	author gingold;	state Exp;
branches;
next	1.208.2.3;

1.208.2.3
date	2010.01.27.22.08.23;	author davek;	state Exp;
branches;
next	;

1.183.2.1
date	2008.09.25.21.55.51;	author rth;	state Exp;
branches;
next	1.183.2.2;

1.183.2.2
date	2009.03.02.13.43.14;	author amodra;	state Exp;
branches;
next	;

1.166.2.1
date	2007.08.24.21.56.45;	author jsm28;	state Exp;
branches;
next	;

1.141.2.1
date	2006.04.29.00.33.35;	author mmitchel;	state Exp;
branches;
next	1.141.2.2;

1.141.2.2
date	2006.05.11.15.17.42;	author carlos;	state Exp;
branches;
next	1.141.2.3;

1.141.2.3
date	2006.08.22.15.08.37;	author jsm28;	state Exp;
branches;
next	;

1.141.4.1
date	2006.05.02.14.19.03;	author drow;	state Exp;
branches;
next	;

1.66.2.1
date	2002.12.19.05.49.19;	author amodra;	state Exp;
branches;
next	;

1.55.2.1
date	2002.02.10.23.38.12;	author rth;	state Exp;
branches;
next	1.55.2.2;

1.55.2.2
date	2002.02.15.21.57.13;	author bje;	state Exp;
branches;
next	1.55.2.3;

1.55.2.3
date	2002.02.16.11.02.34;	author nickc;	state Exp;
branches;
next	1.55.2.4;

1.55.2.4
date	2002.03.08.04.20.52;	author drow;	state Exp;
branches;
next	;

1.32.2.1
date	2001.06.07.03.15.36;	author amodra;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2001.06.12.15.57.25;	author nickc;	state Exp;
branches;
next	;

1.9.2.1
date	2000.05.29.13.41.15;	author pb;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2000.05.29.18.49.25;	author pb;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.44;	author rth;	state Exp;
branches;
next	;


desc
@@


1.274
log
@2013-10-14  Richard Sandiford  <rdsandiford@@googlemail.com>
	    Chao-ying Fu  <Chao-ying.Fu@@imgtec.com>

	* config/tc-mips.c (options): Add OPTION_MSA and OPTION_NO_MSA.
	(md_longopts): Add mmsa and mno-msa.
	(mips_ases): Add msa.
	(RTYPE_MASK): Update.
	(RTYPE_MSA): New define.
	(OT_REG_ELEMENT): Replace with...
	(OT_INTEGER_INDEX, OT_REG_INDEX): ...these new operand types.
	(mips_operand_token): Replace reg_element with index.
	(mips_parse_argument_token): Treat vector indices as separate tokens.
	Handle register indices.
	(md_begin): Add MSA register names.
	(operand_reg_mask): Handle cases for OP_IMM_INDEX and OP_REG_INDEX.
	(convert_reg_type): Handle cases for OP_REG_MSA and OP_REG_MSA_CTRL.
	(match_mdmx_imm_reg_operand): Update accordingly.
	(match_imm_index_operand): New function.
	(match_reg_index_operand): New function.
	(match_operand): Handle cases for OP_IMM_INDEX and OP_REG_INDEX.
	(md_convert_frag): Convert bz.b/h/w/d, bnz.b/h/w/d, bz.v bnz.v.
	(md_show_usage): Print -mmsa and -mno-msa.
	* doc/as.texinfo: Document -mmsa and -mno-msa.
	* doc/c-mips.texi: Document -mmsa and -mno-msa.
	Document .set msa and .set nomsa.
@
text
@\input texinfo @@c                               -*-Texinfo-*-
@@c  Copyright 1991-2013 Free Software Foundation, Inc.
@@c UPDATE!!  On future updates--
@@c   (1)   check for new machine-dep cmdline options in
@@c         md_parse_option definitions in config/tc-*.c
@@c   (2)   for platform-specific directives, examine md_pseudo_op
@@c         in config/tc-*.c
@@c   (3)   for object-format specific directives, examine obj_pseudo_op
@@c         in config/obj-*.c
@@c   (4)   portable directives in potable[] in read.c
@@c %**start of header
@@setfilename as.info
@@c ---config---
@@macro gcctabopt{body}
@@code{\body\}
@@end macro
@@c defaults, config file may override:
@@set have-stabs
@@c ---
@@c man begin NAME
@@c ---
@@include asconfig.texi
@@include bfdver.texi
@@c ---
@@c man end
@@c ---
@@c common OR combinations of conditions
@@ifset COFF
@@set COFF-ELF
@@end ifset
@@ifset ELF
@@set COFF-ELF
@@end ifset
@@ifset AOUT
@@set aout-bout
@@end ifset
@@ifset ARM/Thumb
@@set ARM
@@end ifset
@@ifset Blackfin
@@set Blackfin
@@end ifset
@@ifset BOUT
@@set aout-bout
@@end ifset
@@ifset H8/300
@@set H8
@@end ifset
@@ifset SH
@@set H8
@@end ifset
@@ifset HPPA
@@set abnormal-separator
@@end ifset
@@c ------------
@@ifset GENERIC
@@settitle Using @@value{AS}
@@end ifset
@@ifclear GENERIC
@@settitle Using @@value{AS} (@@value{TARGET})
@@end ifclear
@@setchapternewpage odd
@@c %**end of header

@@c @@smallbook
@@c @@set SMALL
@@c WARE! Some of the machine-dependent sections contain tables of machine
@@c instructions.  Except in multi-column format, these tables look silly.
@@c Unfortunately, Texinfo doesn't have a general-purpose multi-col format, so
@@c the multi-col format is faked within @@example sections.
@@c
@@c Again unfortunately, the natural size that fits on a page, for these tables,
@@c is different depending on whether or not smallbook is turned on.
@@c This matters, because of order: text flow switches columns at each page
@@c break.
@@c
@@c The format faked in this source works reasonably well for smallbook,
@@c not well for the default large-page format.  This manual expects that if you
@@c turn on @@smallbook, you will also uncomment the "@@set SMALL" to enable the
@@c tables in question.  You can turn on one without the other at your
@@c discretion, of course.
@@ifinfo
@@set SMALL
@@c the insn tables look just as silly in info files regardless of smallbook,
@@c might as well show 'em anyways.
@@end ifinfo

@@ifnottex
@@dircategory Software development
@@direntry
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
@@end direntry
@@end ifnottex

@@finalout
@@syncodeindex ky cp

@@copying
This file documents the GNU Assembler "@@value{AS}".

@@c man begin COPYRIGHT
Copyright @@copyright{} 1991-2013 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@@c man end
@@end copying

@@titlepage
@@title Using @@value{AS}
@@subtitle The @@sc{gnu} Assembler
@@ifclear GENERIC
@@subtitle for the @@value{TARGET} family
@@end ifclear
@@ifset VERSION_PACKAGE
@@sp 1
@@subtitle @@value{VERSION_PACKAGE}
@@end ifset
@@sp 1
@@subtitle Version @@value{VERSION}
@@sp 1
@@sp 13
The Free Software Foundation Inc.@@: thanks The Nice Computer
Company of Australia for loaning Dean Elsner to write the
first (Vax) version of @@command{as} for Project @@sc{gnu}.
The proprietors, management and staff of TNCCA thank FSF for
distracting the boss while they got some work
done.
@@sp 3
@@author Dean Elsner, Jay Fenlason & friends
@@page
@@tex
{\parskip=0pt
\hfill {\it Using {\tt @@value{AS}}}\par
\hfill Edited by Cygnus Support\par
}
%"boxit" macro for figures:
%Modified from Knuth's ``boxit'' macro from TeXbook (answer to exercise 21.3)
\gdef\boxit#1#2{\vbox{\hrule\hbox{\vrule\kern3pt
     \vbox{\parindent=0pt\parskip=0pt\hsize=#1\kern3pt\strut\hfil
#2\hfil\strut\kern3pt}\kern3pt\vrule}\hrule}}%box with visible outline
\gdef\ibox#1#2{\hbox to #1{#2\hfil}\kern8pt}% invisible box
@@end tex

@@vskip 0pt plus 1filll
Copyright @@copyright{} 1991-2013 Free Software Foundation, Inc.

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@@end titlepage
@@contents

@@ifnottex
@@node Top
@@top Using @@value{AS}

This file is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}}
@@ifset VERSION_PACKAGE
@@value{VERSION_PACKAGE}
@@end ifset
version @@value{VERSION}.
@@ifclear GENERIC
This version of the file describes @@command{@@value{AS}} configured to generate
code for @@value{TARGET} architectures.
@@end ifclear

This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@@menu
* Overview::                    Overview
* Invoking::                    Command-Line Options
* Syntax::                      Syntax
* Sections::                    Sections and Relocation
* Symbols::                     Symbols
* Expressions::                 Expressions
* Pseudo Ops::                  Assembler Directives
@@ifset ELF
* Object Attributes::           Object Attributes
@@end ifset
* Machine Dependencies::        Machine Dependent Features
* Reporting Bugs::              Reporting Bugs
* Acknowledgements::            Who Did What
* GNU Free Documentation License::  GNU Free Documentation License
* AS Index::                    AS Index
@@end menu
@@end ifnottex

@@node Overview
@@chapter Overview
@@iftex
This manual is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}}.
@@ifclear GENERIC
This version of the manual describes @@command{@@value{AS}} configured to generate
code for @@value{TARGET} architectures.
@@end ifclear
@@end iftex

@@cindex invocation summary
@@cindex option summary
@@cindex summary of options
Here is a brief summary of how to invoke @@command{@@value{AS}}.  For details,
see @@ref{Invoking,,Command-Line Options}.

@@c man title AS the portable GNU assembler.

@@ignore
@@c man begin SEEALSO
gcc(1), ld(1), and the Info entries for @@file{binutils} and @@file{ld}.
@@c man end
@@end ignore

@@c We don't use deffn and friends for the following because they seem
@@c to be limited to one line for the header.
@@smallexample
@@c man begin SYNOPSIS
@@value{AS} [@@b{-a}[@@b{cdghlns}][=@@var{file}]] [@@b{--alternate}] [@@b{-D}]
 [@@b{--compress-debug-sections}]  [@@b{--nocompress-debug-sections}]
 [@@b{--debug-prefix-map} @@var{old}=@@var{new}]
 [@@b{--defsym} @@var{sym}=@@var{val}] [@@b{-f}] [@@b{-g}] [@@b{--gstabs}]
 [@@b{--gstabs+}] [@@b{--gdwarf-2}] [@@b{--gdwarf-sections}]
 [@@b{--help}] [@@b{-I} @@var{dir}] [@@b{-J}]
 [@@b{-K}] [@@b{-L}] [@@b{--listing-lhs-width}=@@var{NUM}]
 [@@b{--listing-lhs-width2}=@@var{NUM}] [@@b{--listing-rhs-width}=@@var{NUM}]
 [@@b{--listing-cont-lines}=@@var{NUM}] [@@b{--keep-locals}] [@@b{-o}
 @@var{objfile}] [@@b{-R}] [@@b{--reduce-memory-overheads}] [@@b{--statistics}]
 [@@b{-v}] [@@b{-version}] [@@b{--version}] [@@b{-W}] [@@b{--warn}]
 [@@b{--fatal-warnings}] [@@b{-w}] [@@b{-x}] [@@b{-Z}] [@@b{@@@@@@var{FILE}}]
 [@@b{--size-check=[error|warning]}]
 [@@b{--target-help}] [@@var{target-options}]
 [@@b{--}|@@var{files} @@dots{}]
@@c
@@c Target dependent options are listed below.  Keep the list sorted.
@@c Add an empty line for separation.
@@ifset AARCH64

@@emph{Target AArch64 options:}
   [@@b{-EB}|@@b{-EL}]
   [@@b{-mabi}=@@var{ABI}]
@@end ifset
@@ifset ALPHA

@@emph{Target Alpha options:}
   [@@b{-m@@var{cpu}}]
   [@@b{-mdebug} | @@b{-no-mdebug}]
   [@@b{-replace} | @@b{-noreplace}]
   [@@b{-relax}] [@@b{-g}] [@@b{-G@@var{size}}]
   [@@b{-F}] [@@b{-32addr}]
@@end ifset
@@ifset ARC

@@emph{Target ARC options:}
   [@@b{-marc[5|6|7|8]}]
   [@@b{-EB}|@@b{-EL}]
@@end ifset
@@ifset ARM

@@emph{Target ARM options:}
@@c Don't document the deprecated options
   [@@b{-mcpu}=@@var{processor}[+@@var{extension}@@dots{}]]
   [@@b{-march}=@@var{architecture}[+@@var{extension}@@dots{}]]
   [@@b{-mfpu}=@@var{floating-point-format}]
   [@@b{-mfloat-abi}=@@var{abi}]
   [@@b{-meabi}=@@var{ver}]
   [@@b{-mthumb}]
   [@@b{-EB}|@@b{-EL}]
   [@@b{-mapcs-32}|@@b{-mapcs-26}|@@b{-mapcs-float}|
    @@b{-mapcs-reentrant}]
   [@@b{-mthumb-interwork}] [@@b{-k}]
@@end ifset
@@ifset Blackfin

@@emph{Target Blackfin options:}
   [@@b{-mcpu}=@@var{processor}[-@@var{sirevision}]]
   [@@b{-mfdpic}]
   [@@b{-mno-fdpic}]
   [@@b{-mnopic}]
@@end ifset
@@ifset CRIS

@@emph{Target CRIS options:}
   [@@b{--underscore} | @@b{--no-underscore}]
   [@@b{--pic}] [@@b{-N}]
   [@@b{--emulation=criself} | @@b{--emulation=crisaout}]
   [@@b{--march=v0_v10} | @@b{--march=v10} | @@b{--march=v32} | @@b{--march=common_v10_v32}]
@@c Deprecated -- deliberately not documented.
@@c [@@b{-h}] [@@b{-H}]
@@end ifset
@@ifset D10V

@@emph{Target D10V options:}
   [@@b{-O}]
@@end ifset
@@ifset D30V

@@emph{Target D30V options:}
   [@@b{-O}|@@b{-n}|@@b{-N}]
@@end ifset
@@ifset EPIPHANY

@@emph{Target EPIPHANY options:}
   [@@b{-mepiphany}|@@b{-mepiphany16}]
@@end ifset
@@ifset H8

@@emph{Target H8/300 options:}
   [-h-tick-hex]
@@end ifset
@@ifset HPPA
@@c HPPA has no machine-dependent assembler options (yet).
@@end ifset
@@ifset I80386

@@emph{Target i386 options:}
   [@@b{--32}|@@b{--x32}|@@b{--64}] [@@b{-n}]
   [@@b{-march}=@@var{CPU}[+@@var{EXTENSION}@@dots{}]] [@@b{-mtune}=@@var{CPU}]
@@end ifset
@@ifset I960

@@emph{Target i960 options:}
@@c see md_parse_option in tc-i960.c
   [@@b{-ACA}|@@b{-ACA_A}|@@b{-ACB}|@@b{-ACC}|@@b{-AKA}|@@b{-AKB}|
    @@b{-AKC}|@@b{-AMC}]
   [@@b{-b}] [@@b{-no-relax}]
@@end ifset
@@ifset IA64

@@emph{Target IA-64 options:}
   [@@b{-mconstant-gp}|@@b{-mauto-pic}]
   [@@b{-milp32}|@@b{-milp64}|@@b{-mlp64}|@@b{-mp64}]
   [@@b{-mle}|@@b{mbe}]
   [@@b{-mtune=itanium1}|@@b{-mtune=itanium2}]
   [@@b{-munwind-check=warning}|@@b{-munwind-check=error}]
   [@@b{-mhint.b=ok}|@@b{-mhint.b=warning}|@@b{-mhint.b=error}]
   [@@b{-x}|@@b{-xexplicit}] [@@b{-xauto}] [@@b{-xdebug}]
@@end ifset
@@ifset IP2K

@@emph{Target IP2K options:}
   [@@b{-mip2022}|@@b{-mip2022ext}]
@@end ifset
@@ifset M32C

@@emph{Target M32C options:}
   [@@b{-m32c}|@@b{-m16c}] [-relax] [-h-tick-hex]
@@end ifset
@@ifset M32R

@@emph{Target M32R options:}
   [@@b{--m32rx}|@@b{--[no-]warn-explicit-parallel-conflicts}|
   @@b{--W[n]p}]
@@end ifset
@@ifset M680X0

@@emph{Target M680X0 options:}
   [@@b{-l}] [@@b{-m68000}|@@b{-m68010}|@@b{-m68020}|@@dots{}]
@@end ifset
@@ifset M68HC11

@@emph{Target M68HC11 options:}
   [@@b{-m68hc11}|@@b{-m68hc12}|@@b{-m68hcs12}|@@b{-mm9s12x}|@@b{-mm9s12xg}]
   [@@b{-mshort}|@@b{-mlong}]
   [@@b{-mshort-double}|@@b{-mlong-double}]
   [@@b{--force-long-branches}] [@@b{--short-branches}]
   [@@b{--strict-direct-mode}] [@@b{--print-insn-syntax}]
   [@@b{--print-opcodes}] [@@b{--generate-example}]
@@end ifset
@@ifset MCORE

@@emph{Target MCORE options:}
   [@@b{-jsri2bsr}] [@@b{-sifilter}] [@@b{-relax}]
   [@@b{-mcpu=[210|340]}]
@@end ifset
@@ifset METAG

@@emph{Target Meta options:}
   [@@b{-mcpu=@@var{cpu}}] [@@b{-mfpu=@@var{cpu}}] [@@b{-mdsp=@@var{cpu}}]
@@end ifset
@@ifset MICROBLAZE
@@emph{Target MICROBLAZE options:}
@@c MicroBlaze has no machine-dependent assembler options.
@@end ifset
@@ifset MIPS

@@emph{Target MIPS options:}
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-O}[@@var{optimization level}]]
   [@@b{-g}[@@var{debug level}]] [@@b{-G} @@var{num}] [@@b{-KPIC}] [@@b{-call_shared}]
   [@@b{-non_shared}] [@@b{-xgot} [@@b{-mvxworks-pic}]
   [@@b{-mabi}=@@var{ABI}] [@@b{-32}] [@@b{-n32}] [@@b{-64}] [@@b{-mfp32}] [@@b{-mgp32}]
   [@@b{-march}=@@var{CPU}] [@@b{-mtune}=@@var{CPU}] [@@b{-mips1}] [@@b{-mips2}]
   [@@b{-mips3}] [@@b{-mips4}] [@@b{-mips5}] [@@b{-mips32}] [@@b{-mips32r2}]
   [@@b{-mips64}] [@@b{-mips64r2}]
   [@@b{-construct-floats}] [@@b{-no-construct-floats}]
   [@@b{-mnan=@@var{encoding}}]
   [@@b{-trap}] [@@b{-no-break}] [@@b{-break}] [@@b{-no-trap}]
   [@@b{-mips16}] [@@b{-no-mips16}]
   [@@b{-mmicromips}] [@@b{-mno-micromips}]
   [@@b{-msmartmips}] [@@b{-mno-smartmips}]
   [@@b{-mips3d}] [@@b{-no-mips3d}]
   [@@b{-mdmx}] [@@b{-no-mdmx}]
   [@@b{-mdsp}] [@@b{-mno-dsp}]
   [@@b{-mdspr2}] [@@b{-mno-dspr2}]
   [@@b{-mmsa}] [@@b{-mno-msa}]
   [@@b{-mmt}] [@@b{-mno-mt}]
   [@@b{-mmcu}] [@@b{-mno-mcu}]
   [@@b{-minsn32}] [@@b{-mno-insn32}]
   [@@b{-mfix7000}] [@@b{-mno-fix7000}]
   [@@b{-mfix-vr4120}] [@@b{-mno-fix-vr4120}]
   [@@b{-mfix-vr4130}] [@@b{-mno-fix-vr4130}]
   [@@b{-mdebug}] [@@b{-no-mdebug}]
   [@@b{-mpdr}] [@@b{-mno-pdr}]
@@end ifset
@@ifset MMIX

@@emph{Target MMIX options:}
   [@@b{--fixed-special-register-names}] [@@b{--globalize-symbols}]
   [@@b{--gnu-syntax}] [@@b{--relax}] [@@b{--no-predefined-symbols}]
   [@@b{--no-expand}] [@@b{--no-merge-gregs}] [@@b{-x}]
   [@@b{--linker-allocated-gregs}]
@@end ifset
@@ifset NIOSII

@@emph{Target Nios II options:}
   [@@b{-relax-all}] [@@b{-relax-section}] [@@b{-no-relax}]
   [@@b{-EB}] [@@b{-EL}]
@@end ifset
@@ifset PDP11

@@emph{Target PDP11 options:}
   [@@b{-mpic}|@@b{-mno-pic}] [@@b{-mall}] [@@b{-mno-extensions}]
   [@@b{-m}@@var{extension}|@@b{-mno-}@@var{extension}]
   [@@b{-m}@@var{cpu}] [@@b{-m}@@var{machine}]
@@end ifset
@@ifset PJ

@@emph{Target picoJava options:}
   [@@b{-mb}|@@b{-me}]
@@end ifset
@@ifset PPC

@@emph{Target PowerPC options:}
   [@@b{-a32}|@@b{-a64}]
   [@@b{-mpwrx}|@@b{-mpwr2}|@@b{-mpwr}|@@b{-m601}|@@b{-mppc}|@@b{-mppc32}|@@b{-m603}|@@b{-m604}|@@b{-m403}|@@b{-m405}|
    @@b{-m440}|@@b{-m464}|@@b{-m476}|@@b{-m7400}|@@b{-m7410}|@@b{-m7450}|@@b{-m7455}|@@b{-m750cl}|@@b{-mppc64}|
    @@b{-m620}|@@b{-me500}|@@b{-e500x2}|@@b{-me500mc}|@@b{-me500mc64}|@@b{-me5500}|@@b{-me6500}|@@b{-mppc64bridge}|
    @@b{-mbooke}|@@b{-mpower4}|@@b{-mpwr4}|@@b{-mpower5}|@@b{-mpwr5}|@@b{-mpwr5x}|@@b{-mpower6}|@@b{-mpwr6}|
    @@b{-mpower7}|@@b{-mpwr7}|@@b{-mpower8}|@@b{-mpwr8}|@@b{-ma2}|@@b{-mcell}|@@b{-mspe}|@@b{-mtitan}|@@b{-me300}|@@b{-mcom}]
   [@@b{-many}] [@@b{-maltivec}|@@b{-mvsx}|@@b{-mhtm}|@@b{-mvle}]
   [@@b{-mregnames}|@@b{-mno-regnames}]
   [@@b{-mrelocatable}|@@b{-mrelocatable-lib}|@@b{-K PIC}] [@@b{-memb}]
   [@@b{-mlittle}|@@b{-mlittle-endian}|@@b{-le}|@@b{-mbig}|@@b{-mbig-endian}|@@b{-be}]
   [@@b{-msolaris}|@@b{-mno-solaris}]
   [@@b{-nops=@@var{count}}]
@@end ifset
@@ifset RX

@@emph{Target RX options:}
   [@@b{-mlittle-endian}|@@b{-mbig-endian}]
   [@@b{-m32bit-doubles}|@@b{-m64bit-doubles}]
   [@@b{-muse-conventional-section-names}]
   [@@b{-msmall-data-limit}]
   [@@b{-mpid}]
   [@@b{-mrelax}]
   [@@b{-mint-register=@@var{number}}]
   [@@b{-mgcc-abi}|@@b{-mrx-abi}]
@@end ifset
@@ifset S390

@@emph{Target s390 options:}
   [@@b{-m31}|@@b{-m64}] [@@b{-mesa}|@@b{-mzarch}] [@@b{-march}=@@var{CPU}]
   [@@b{-mregnames}|@@b{-mno-regnames}]
   [@@b{-mwarn-areg-zero}]
@@end ifset
@@ifset SCORE

@@emph{Target SCORE options:}
   [@@b{-EB}][@@b{-EL}][@@b{-FIXDD}][@@b{-NWARN}]
   [@@b{-SCORE5}][@@b{-SCORE5U}][@@b{-SCORE7}][@@b{-SCORE3}]
   [@@b{-march=score7}][@@b{-march=score3}]
   [@@b{-USE_R1}][@@b{-KPIC}][@@b{-O0}][@@b{-G} @@var{num}][@@b{-V}]
@@end ifset
@@ifset SPARC

@@emph{Target SPARC options:}
@@c The order here is important.  See c-sparc.texi.
   [@@b{-Av6}|@@b{-Av7}|@@b{-Av8}|@@b{-Asparclet}|@@b{-Asparclite}
    @@b{-Av8plus}|@@b{-Av8plusa}|@@b{-Av9}|@@b{-Av9a}]
   [@@b{-xarch=v8plus}|@@b{-xarch=v8plusa}] [@@b{-bump}]
   [@@b{-32}|@@b{-64}]
@@end ifset
@@ifset TIC54X

@@emph{Target TIC54X options:}
 [@@b{-mcpu=54[123589]}|@@b{-mcpu=54[56]lp}] [@@b{-mfar-mode}|@@b{-mf}]
 [@@b{-merrors-to-file} @@var{<filename>}|@@b{-me} @@var{<filename>}]
@@end ifset

@@ifset TIC6X

@@emph{Target TIC6X options:}
   [@@b{-march=@@var{arch}}] [@@b{-mbig-endian}|@@b{-mlittle-endian}]
   [@@b{-mdsbt}|@@b{-mno-dsbt}] [@@b{-mpid=no}|@@b{-mpid=near}|@@b{-mpid=far}]
   [@@b{-mpic}|@@b{-mno-pic}]
@@end ifset
@@ifset TILEGX

@@emph{Target TILE-Gx options:}
   [@@b{-m32}|@@b{-m64}][@@b{-EB}][@@b{-EL}]
@@end ifset
@@ifset TILEPRO
@@c TILEPro has no machine-dependent assembler options
@@end ifset

@@ifset XTENSA

@@emph{Target Xtensa options:}
 [@@b{--[no-]text-section-literals}] [@@b{--[no-]absolute-literals}]
 [@@b{--[no-]target-align}] [@@b{--[no-]longcalls}]
 [@@b{--[no-]transform}]
 [@@b{--rename-section} @@var{oldname}=@@var{newname}]
@@end ifset

@@ifset Z80

@@emph{Target Z80 options:}
  [@@b{-z80}] [@@b{-r800}]
  [@@b{ -ignore-undocumented-instructions}] [@@b{-Wnud}]
  [@@b{ -ignore-unportable-instructions}] [@@b{-Wnup}]
  [@@b{ -warn-undocumented-instructions}] [@@b{-Wud}]
  [@@b{ -warn-unportable-instructions}] [@@b{-Wup}]
  [@@b{ -forbid-undocumented-instructions}] [@@b{-Fud}]
  [@@b{ -forbid-unportable-instructions}] [@@b{-Fup}]
@@end ifset

@@ifset Z8000
@@c Z8000 has no machine-dependent assembler options
@@end ifset

@@c man end
@@end smallexample

@@c man begin OPTIONS

@@table @@gcctabopt
@@include at-file.texi

@@item -a[cdghlmns]
Turn on listings, in any of a variety of ways:

@@table @@gcctabopt
@@item -ac
omit false conditionals

@@item -ad
omit debugging directives

@@item -ag
include general information, like @@value{AS} version and options passed

@@item -ah
include high-level source

@@item -al
include assembly

@@item -am
include macro expansions

@@item -an
omit forms processing

@@item -as
include symbols

@@item =file
set the name of the listing file
@@end table

You may combine these options; for example, use @@samp{-aln} for assembly
listing without forms processing.  The @@samp{=file} option, if used, must be
the last one.  By itself, @@samp{-a} defaults to @@samp{-ahls}.

@@item --alternate
Begin in alternate macro mode.
@@ifclear man
@@xref{Altmacro,,@@code{.altmacro}}.
@@end ifclear

@@item --compress-debug-sections
Compress DWARF debug sections using zlib.  The debug sections are renamed
to begin with @@samp{.zdebug}, and the resulting object file may not be
compatible with older linkers and object file utilities.

@@item --nocompress-debug-sections
Do not compress DWARF debug sections.  This is the default.

@@item -D
Ignored.  This option is accepted for script compatibility with calls to
other assemblers.

@@item --debug-prefix-map @@var{old}=@@var{new}
When assembling files in directory @@file{@@var{old}}, record debugging
information describing them as in @@file{@@var{new}} instead.

@@item --defsym @@var{sym}=@@var{value}
Define the symbol @@var{sym} to be @@var{value} before assembling the input file.
@@var{value} must be an integer constant.  As in C, a leading @@samp{0x}
indicates a hexadecimal value, and a leading @@samp{0} indicates an octal
value.  The value of the symbol can be overridden inside a source file via the
use of a @@code{.set} pseudo-op.

@@item -f
``fast''---skip whitespace and comment preprocessing (assume source is
compiler output).

@@item -g
@@itemx --gen-debug
Generate debugging information for each assembler source line using whichever
debug format is preferred by the target.  This currently means either STABS,
ECOFF or DWARF2.

@@item --gstabs
Generate stabs debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.

@@item --gstabs+
Generate stabs debugging information for each assembler line, with GNU
extensions that probably only gdb can handle, and that could make other
debuggers crash or refuse to read your program.  This
may help debugging assembler code.  Currently the only GNU extension is
the location of the current working directory at assembling time.

@@item --gdwarf-2
Generate DWARF2 debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.  Note---this
option is only supported by some targets, not all of them.

@@item --gdwarf-sections
Instead of creating a .debug_line section, create a series of
.debug_line.@@var{foo} sections where @@var{foo} is the name of the
corresponding code section.  For example a code section called @@var{.text.func}
will have its dwarf line number information placed into a section called
@@var{.debug_line.text.func}.  If the code section is just called @@var{.text}
then debug line section will still be called just @@var{.debug_line} without any
suffix.

@@item --size-check=error
@@itemx --size-check=warning
Issue an error or warning for invalid ELF .size directive.

@@item --help
Print a summary of the command line options and exit.

@@item --target-help
Print a summary of all target specific options and exit.

@@item -I @@var{dir}
Add directory @@var{dir} to the search list for @@code{.include} directives.

@@item -J
Don't warn about signed overflow.

@@item -K
@@ifclear DIFF-TBL-KLUGE
This option is accepted but has no effect on the @@value{TARGET} family.
@@end ifclear
@@ifset DIFF-TBL-KLUGE
Issue warnings when difference tables altered for long displacements.
@@end ifset

@@item -L
@@itemx --keep-locals
Keep (in the symbol table) local symbols.  These symbols start with
system-specific local label prefixes, typically @@samp{.L} for ELF systems
or @@samp{L} for traditional a.out systems.
@@ifclear man
@@xref{Symbol Names}.
@@end ifclear

@@item --listing-lhs-width=@@var{number}
Set the maximum width, in words, of the output data column for an assembler
listing to @@var{number}.

@@item --listing-lhs-width2=@@var{number}
Set the maximum width, in words, of the output data column for continuation
lines in an assembler listing to @@var{number}.

@@item --listing-rhs-width=@@var{number}
Set the maximum width of an input source line, as displayed in a listing, to
@@var{number} bytes.

@@item --listing-cont-lines=@@var{number}
Set the maximum number of lines printed in a listing for a single line of input
to @@var{number} + 1.

@@item -o @@var{objfile}
Name the object-file output from @@command{@@value{AS}} @@var{objfile}.

@@item -R
Fold the data section into the text section.

@@kindex --hash-size=@@var{number}
Set the default size of GAS's hash tables to a prime number close to
@@var{number}.  Increasing this value can reduce the length of time it takes the
assembler to perform its tasks, at the expense of increasing the assembler's
memory requirements.  Similarly reducing this value can reduce the memory
requirements at the expense of speed.

@@item --reduce-memory-overheads
This option reduces GAS's memory requirements, at the expense of making the
assembly processes slower.  Currently this switch is a synonym for
@@samp{--hash-size=4051}, but in the future it may have other effects as well.

@@item --statistics
Print the maximum space (in bytes) and total time (in seconds) used by
assembly.

@@item --strip-local-absolute
Remove local absolute symbols from the outgoing symbol table.

@@item -v
@@itemx -version
Print the @@command{as} version.

@@item --version
Print the @@command{as} version and exit.

@@item -W
@@itemx --no-warn
Suppress warning messages.

@@item --fatal-warnings
Treat warnings as errors.

@@item --warn
Don't suppress warning messages or treat them as errors.

@@item -w
Ignored.

@@item -x
Ignored.

@@item -Z
Generate an object file even after errors.

@@item -- | @@var{files} @@dots{}
Standard input, or source files to assemble.

@@end table
@@c man end

@@ifset AARCH64

@@ifclear man
@@xref{AArch64 Options}, for the options available when @@value{AS} is configured
for the 64-bit mode of the ARM Architecture (AArch64).
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for the
64-bit mode of the ARM Architecture (AArch64).
@@c man end
@@c man begin INCLUDE
@@include c-aarch64.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@ifset ALPHA

@@ifclear man
@@xref{Alpha Options}, for the options available when @@value{AS} is configured
for an Alpha processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for an Alpha
processor.
@@c man end
@@c man begin INCLUDE
@@include c-alpha.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS
@@ifset ARC
The following options are available when @@value{AS} is configured for
an ARC processor.

@@table @@gcctabopt
@@item -marc[5|6|7|8]
This option selects the core processor variant.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
@@end table
@@end ifset

@@ifset ARM
The following options are available when @@value{AS} is configured for the ARM
processor family.

@@table @@gcctabopt
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots{}]
Specify which ARM processor variant is the target.
@@item -march=@@var{architecture}[+@@var{extension}@@dots{}]
Specify which ARM architecture variant is used by the target.
@@item -mfpu=@@var{floating-point-format}
Select which Floating Point architecture is the target.
@@item -mfloat-abi=@@var{abi}
Select which floating point ABI is in use.
@@item -mthumb
Enable Thumb only instruction decoding.
@@item -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant
Select which procedure calling convention is in use.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
@@item -mthumb-interwork
Specify that the code has been generated with interworking between Thumb and
ARM code in mind.
@@item -k
Specify that PIC code has been generated.
@@end table
@@end ifset
@@c man end

@@ifset Blackfin

@@ifclear man
@@xref{Blackfin Options}, for the options available when @@value{AS} is
configured for the Blackfin processor family.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for
the Blackfin processor family.
@@c man end
@@c man begin INCLUDE
@@include c-bfin.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS
@@ifset CRIS
See the info pages for documentation of the CRIS-specific options.
@@end ifset

@@ifset D10V
The following options are available when @@value{AS} is configured for
a D10V processor.
@@table @@gcctabopt
@@cindex D10V optimization
@@cindex optimization, D10V
@@item -O
Optimize output by parallelizing instructions.
@@end table
@@end ifset

@@ifset D30V
The following options are available when @@value{AS} is configured for a D30V
processor.
@@table @@gcctabopt
@@cindex D30V optimization
@@cindex optimization, D30V
@@item -O
Optimize output by parallelizing instructions.

@@cindex D30V nops
@@item -n
Warn when nops are generated.

@@cindex D30V nops after 32-bit multiply
@@item -N
Warn when a nop after a 32-bit multiply instruction is generated.
@@end table
@@end ifset
@@c man end

@@ifset EPIPHANY
The following options are available when @@value{AS} is configured for the
Adapteva EPIPHANY series.

@@ifclear man
@@xref{Epiphany Options}, for the options available when @@value{AS} is
configured for an Epiphany processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for
an Epiphany processor.
@@c man end
@@c man begin INCLUDE
@@include c-epiphany.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@ifset H8300

@@ifclear man
@@xref{H8/300 Options}, for the options available when @@value{AS} is configured
for an H8/300 processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for an H8/300
processor.
@@c man end
@@c man begin INCLUDE
@@include c-h8300.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@ifset I80386

@@ifclear man
@@xref{i386-Options}, for the options available when @@value{AS} is
configured for an i386 processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for
an i386 processor.
@@c man end
@@c man begin INCLUDE
@@include c-i386.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS
@@ifset I960
The following options are available when @@value{AS} is configured for the
Intel 80960 processor.

@@table @@gcctabopt
@@item -ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB | -AKC | -AMC
Specify which variant of the 960 architecture is the target.

@@item -b
Add code to collect statistics about branches taken.

@@item -no-relax
Do not alter compare-and-branch instructions for long displacements;
error if necessary.

@@end table
@@end ifset

@@ifset IP2K
The following options are available when @@value{AS} is configured for the
Ubicom IP2K series.

@@table @@gcctabopt

@@item -mip2022ext
Specifies that the extended IP2022 instructions are allowed.

@@item -mip2022
Restores the default behaviour, which restricts the permitted instructions to
just the basic IP2022 ones.

@@end table
@@end ifset

@@ifset M32C
The following options are available when @@value{AS} is configured for the
Renesas M32C and M16C processors.

@@table @@gcctabopt

@@item -m32c
Assemble M32C instructions.

@@item -m16c
Assemble M16C instructions (the default).

@@item -relax
Enable support for link-time relaxations.

@@item -h-tick-hex
Support H'00 style hex constants in addition to 0x00 style.

@@end table
@@end ifset

@@ifset M32R
The following options are available when @@value{AS} is configured for the
Renesas M32R (formerly Mitsubishi M32R) series.

@@table @@gcctabopt

@@item --m32rx
Specify which processor in the M32R family is the target.  The default
is normally the M32R, but this option changes it to the M32RX.

@@item --warn-explicit-parallel-conflicts or --Wp
Produce warning messages when questionable parallel constructs are
encountered.

@@item --no-warn-explicit-parallel-conflicts or --Wnp
Do not produce warning messages when questionable parallel constructs are
encountered.

@@end table
@@end ifset

@@ifset M680X0
The following options are available when @@value{AS} is configured for the
Motorola 68000 series.

@@table @@gcctabopt

@@item -l
Shorten references to undefined symbols, to one word instead of two.

@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030
@@itemx | -m68040 | -m68060 | -m68302 | -m68331 | -m68332
@@itemx | -m68333 | -m68340 | -mcpu32 | -m5200
Specify what processor in the 68000 family is the target.  The default
is normally the 68020, but this can be changed at configuration time.

@@item -m68881 | -m68882 | -mno-68881 | -mno-68882
The target machine does (or does not) have a floating-point coprocessor.
The default is to assume a coprocessor for 68020, 68030, and cpu32.  Although
the basic 68000 is not compatible with the 68881, a combination of the
two can be specified, since it's possible to do emulation of the
coprocessor instructions with the main processor.

@@item -m68851 | -mno-68851
The target machine does (or does not) have a memory-management
unit coprocessor.  The default is to assume an MMU for 68020 and up.

@@end table
@@end ifset

@@ifset NIOSII

@@ifclear man
@@xref{Nios II Options}, for the options available when @@value{AS} is configured
for an Altera Nios II processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for an
Altera Nios II processor.
@@c man end
@@c man begin INCLUDE
@@include c-nios2.texi
@@c ended inside the included file
@@end ifset
@@end ifset

@@ifset PDP11

For details about the PDP-11 machine dependent features options,
see @@ref{PDP-11-Options}.

@@table @@gcctabopt
@@item -mpic | -mno-pic
Generate position-independent (or position-dependent) code.  The
default is @@option{-mpic}.

@@item -mall
@@itemx -mall-extensions
Enable all instruction set extensions.  This is the default.

@@item -mno-extensions
Disable all instruction set extensions.

@@item -m@@var{extension} | -mno-@@var{extension}
Enable (or disable) a particular instruction set extension.

@@item -m@@var{cpu}
Enable the instruction set extensions supported by a particular CPU, and
disable all other extensions.

@@item -m@@var{machine}
Enable the instruction set extensions supported by a particular machine
model, and disable all other extensions.
@@end table

@@end ifset

@@ifset PJ
The following options are available when @@value{AS} is configured for
a picoJava processor.

@@table @@gcctabopt

@@cindex PJ endianness
@@cindex endianness, PJ
@@cindex big endian output, PJ
@@item -mb
Generate ``big endian'' format output.

@@cindex little endian output, PJ
@@item -ml
Generate ``little endian'' format output.

@@end table
@@end ifset

@@ifset M68HC11
The following options are available when @@value{AS} is configured for the
Motorola 68HC11 or 68HC12 series.

@@table @@gcctabopt

@@item -m68hc11 | -m68hc12 | -m68hcs12 | -mm9s12x | -mm9s12xg
Specify what processor is the target.  The default is
defined by the configuration option when building the assembler.

@@item --xgate-ramoffset
Instruct the linker to offset RAM addresses from S12X address space into
XGATE address space.

@@item -mshort
Specify to use the 16-bit integer ABI.

@@item -mlong
Specify to use the 32-bit integer ABI.

@@item -mshort-double
Specify to use the 32-bit double ABI.

@@item -mlong-double
Specify to use the 64-bit double ABI.

@@item --force-long-branches
Relative branches are turned into absolute ones. This concerns
conditional branches, unconditional branches and branches to a
sub routine.

@@item -S | --short-branches
Do not turn relative branches into absolute ones
when the offset is out of range.

@@item --strict-direct-mode
Do not turn the direct addressing mode into extended addressing mode
when the instruction does not support direct addressing mode.

@@item --print-insn-syntax
Print the syntax of instruction in case of error.

@@item --print-opcodes
Print the list of instructions with syntax and then exit.

@@item --generate-example
Print an example of instruction for each possible instruction and then exit.
This option is only useful for testing @@command{@@value{AS}}.

@@end table
@@end ifset

@@ifset SPARC
The following options are available when @@command{@@value{AS}} is configured
for the SPARC architecture:

@@table @@gcctabopt
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
@@itemx -Av8plus | -Av8plusa | -Av9 | -Av9a
Explicitly select a variant of the SPARC architecture.

@@samp{-Av8plus} and @@samp{-Av8plusa} select a 32 bit environment.
@@samp{-Av9} and @@samp{-Av9a} select a 64 bit environment.

@@samp{-Av8plusa} and @@samp{-Av9a} enable the SPARC V9 instruction set with
UltraSPARC extensions.

@@item -xarch=v8plus | -xarch=v8plusa
For compatibility with the Solaris v9 assembler.  These options are
equivalent to -Av8plus and -Av8plusa, respectively.

@@item -bump
Warn when the assembler switches to another architecture.
@@end table
@@end ifset

@@ifset TIC54X
The following options are available when @@value{AS} is configured for the 'c54x
architecture.

@@table @@gcctabopt
@@item -mfar-mode
Enable extended addressing mode.  All addresses and relocations will assume
extended addressing (usually 23 bits).
@@item -mcpu=@@var{CPU_VERSION}
Sets the CPU version being compiled for.
@@item -merrors-to-file @@var{FILENAME}
Redirect error output to a file, for broken systems which don't support such
behaviour in the shell.
@@end table
@@end ifset

@@ifset MIPS
The following options are available when @@value{AS} is configured for
a MIPS processor.

@@table @@gcctabopt
@@item -G @@var{num}
This option sets the largest size of an object that can be referenced
implicitly with the @@code{gp} register.  It is only accepted for targets that
use ECOFF format, such as a DECstation running Ultrix.  The default value is 8.

@@cindex MIPS endianness
@@cindex endianness, MIPS
@@cindex big endian output, MIPS
@@item -EB
Generate ``big endian'' format output.

@@cindex little endian output, MIPS
@@item -EL
Generate ``little endian'' format output.

@@cindex MIPS ISA
@@item -mips1
@@itemx -mips2
@@itemx -mips3
@@itemx -mips4
@@itemx -mips5
@@itemx -mips32
@@itemx -mips32r2
@@itemx -mips64
@@itemx -mips64r2
Generate code for a particular MIPS Instruction Set Architecture level.
@@samp{-mips1} is an alias for @@samp{-march=r3000}, @@samp{-mips2} is an
alias for @@samp{-march=r6000}, @@samp{-mips3} is an alias for
@@samp{-march=r4000} and @@samp{-mips4} is an alias for @@samp{-march=r8000}.
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, @@samp{-mips64}, and
@@samp{-mips64r2} correspond to generic MIPS V, MIPS32, MIPS32 Release 2,
MIPS64, and MIPS64 Release 2 ISA processors, respectively.

@@item -march=@@var{cpu}
Generate code for a particular MIPS CPU.

@@item -mtune=@@var{cpu}
Schedule and tune for a particular MIPS CPU.

@@item -mfix7000
@@itemx -mno-fix7000
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.

@@item -mdebug
@@itemx -no-mdebug
Cause stabs-style debugging output to go into an ECOFF-style .mdebug
section instead of the standard ELF .stabs sections.

@@item -mpdr
@@itemx -mno-pdr
Control generation of @@code{.pdr} sections.

@@item -mgp32
@@itemx -mfp32
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.  @@samp{-mgp32} controls the size of general-purpose registers
and @@samp{-mfp32} controls the size of floating-point registers.

@@item -mips16
@@itemx -no-mips16
Generate code for the MIPS 16 processor.  This is equivalent to putting
@@code{.set mips16} at the start of the assembly file.  @@samp{-no-mips16}
turns off this option.

@@item -mmicromips
@@itemx -mno-micromips
Generate code for the microMIPS processor.  This is equivalent to putting
@@code{.set micromips} at the start of the assembly file.  @@samp{-mno-micromips}
turns off this option.  This is equivalent to putting @@code{.set nomicromips}
at the start of the assembly file.

@@item -msmartmips
@@itemx -mno-smartmips
Enables the SmartMIPS extension to the MIPS32 instruction set. This is
equivalent to putting @@code{.set smartmips} at the start of the assembly file.
@@samp{-mno-smartmips} turns off this option.

@@item -mips3d
@@itemx -no-mips3d
Generate code for the MIPS-3D Application Specific Extension.
This tells the assembler to accept MIPS-3D instructions.
@@samp{-no-mips3d} turns off this option.

@@item -mdmx
@@itemx -no-mdmx
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
@@samp{-no-mdmx} turns off this option.

@@item -mdsp
@@itemx -mno-dsp
Generate code for the DSP Release 1 Application Specific Extension.
This tells the assembler to accept DSP Release 1 instructions.
@@samp{-mno-dsp} turns off this option.

@@item -mdspr2
@@itemx -mno-dspr2
Generate code for the DSP Release 2 Application Specific Extension.
This option implies -mdsp.
This tells the assembler to accept DSP Release 2 instructions.
@@samp{-mno-dspr2} turns off this option.

@@item -mmsa
@@itemx -mno-msa
Generate code for the MIPS SIMD Architecture Extension.
This tells the assembler to accept MSA instructions.
@@samp{-mno-msa} turns off this option.

@@item -mmt
@@itemx -mno-mt
Generate code for the MT Application Specific Extension.
This tells the assembler to accept MT instructions.
@@samp{-mno-mt} turns off this option.

@@item -mmcu
@@itemx -mno-mcu
Generate code for the MCU Application Specific Extension.
This tells the assembler to accept MCU instructions.
@@samp{-mno-mcu} turns off this option.

@@item -minsn32
@@itemx -mno-insn32
Only use 32-bit instruction encodings when generating code for the
microMIPS processor.  This option inhibits the use of any 16-bit
instructions.  This is equivalent to putting @@code{.set insn32} at
the start of the assembly file.  @@samp{-mno-insn32} turns off this
option.  This is equivalent to putting @@code{.set noinsn32} at the
start of the assembly file.  By default @@samp{-mno-insn32} is
selected, allowing all instructions to be used.

@@item --construct-floats
@@itemx --no-construct-floats
The @@samp{--no-construct-floats} option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  By default @@samp{--construct-floats} is
selected, allowing construction of these floating point constants.

@@item --relax-branch
@@itemx --no-relax-branch
The @@samp{--relax-branch} option enables the relaxation of out-of-range
branches.  By default @@samp{--no-relax-branch} is selected, causing any
out-of-range branches to produce an error.

@@item -mnan=@@var{encoding}
Select between the IEEE 754-2008 (@@option{-mnan=2008}) or the legacy
(@@option{-mnan=legacy}) NaN encoding format.  The latter is the default.

@@cindex emulation
@@item --emulation=@@var{name}
This option was formerly used to switch between ELF and ECOFF output
on targets like IRIX 5 that supported both.  MIPS ECOFF support was
removed in GAS 2.24, so the option now serves little purpose.
It is retained for backwards compatibility.

The available configuration names are: @@samp{mipself}, @@samp{mipslelf} and
@@samp{mipsbelf}.  Choosing @@samp{mipself} now has no effect, since the output
is always ELF.  @@samp{mipslelf} and @@samp{mipsbelf} select little- and
big-endian output respectively, but @@samp{-EL} and @@samp{-EB} are now the
preferred options instead.

@@item -nocpp
@@command{@@value{AS}} ignores this option.  It is accepted for compatibility with
the native tools.

@@item --trap
@@itemx --no-trap
@@itemx --break
@@itemx --no-break
Control how to deal with multiplication overflow and division by zero.
@@samp{--trap} or @@samp{--no-break} (which are synonyms) take a trap exception
(and only work for Instruction Set Architecture level 2 and higher);
@@samp{--break} or @@samp{--no-trap} (also synonyms, and the default) take a
break exception.

@@item -n
When this option is used, @@command{@@value{AS}} will issue a warning every
time it generates a nop instruction from a macro.
@@end table
@@end ifset

@@ifset MCORE
The following options are available when @@value{AS} is configured for
an MCore processor.

@@table @@gcctabopt
@@item -jsri2bsr
@@itemx -nojsri2bsr
Enable or disable the JSRI to BSR transformation.  By default this is enabled.
The command line option @@samp{-nojsri2bsr} can be used to disable it.

@@item -sifilter
@@itemx -nosifilter
Enable or disable the silicon filter behaviour.  By default this is disabled.
The default can be overridden by the @@samp{-sifilter} command line option.

@@item -relax
Alter jump instructions for long displacements.

@@item -mcpu=[210|340]
Select the cpu type on the target hardware.  This controls which instructions
can be assembled.

@@item -EB
Assemble for a big endian target.

@@item -EL
Assemble for a little endian target.

@@end table
@@end ifset
@@c man end

@@ifset METAG

@@ifclear man
@@xref{Meta Options}, for the options available when @@value{AS} is configured
for a Meta processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for a
Meta processor.
@@c man end
@@c man begin INCLUDE
@@include c-metag.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS
@@ifset MMIX
See the info pages for documentation of the MMIX-specific options.
@@end ifset

@@c man end
@@ifset PPC

@@ifclear man
@@xref{PowerPC-Opts}, for the options available when @@value{AS} is configured
for a PowerPC processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for a
PowerPC processor.
@@c man end
@@c man begin INCLUDE
@@include c-ppc.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS
@@ifset RX
See the info pages for documentation of the RX-specific options.
@@end ifset

@@ifset S390
The following options are available when @@value{AS} is configured for the s390
processor family.

@@table @@gcctabopt
@@item -m31
@@itemx -m64
Select the word size, either 31/32 bits or 64 bits.
@@item -mesa
@@item -mzarch
Select the architecture mode, either the Enterprise System
Architecture (esa) or the z/Architecture mode (zarch).
@@item -march=@@var{processor}
Specify which s390 processor variant is the target, @@samp{g6}, @@samp{g6},
@@samp{z900}, @@samp{z990}, @@samp{z9-109}, @@samp{z9-ec}, @@samp{z10},
@@samp{z196}, or @@samp{zEC12}.
@@item -mregnames
@@itemx -mno-regnames
Allow or disallow symbolic names for registers.
@@item -mwarn-areg-zero
Warn whenever the operand for a base or index register has been specified
but evaluates to zero.
@@end table
@@end ifset
@@c man end

@@ifset TIC6X

@@ifclear man
@@xref{TIC6X Options}, for the options available when @@value{AS} is configured
for a TMS320C6000 processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for a
TMS320C6000 processor.
@@c man end
@@c man begin INCLUDE
@@include c-tic6x.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@ifset TILEGX

@@ifclear man
@@xref{TILE-Gx Options}, for the options available when @@value{AS} is configured
for a TILE-Gx processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for a TILE-Gx
processor.
@@c man end
@@c man begin INCLUDE
@@include c-tilegx.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@ifset XTENSA

@@ifclear man
@@xref{Xtensa Options}, for the options available when @@value{AS} is configured
for an Xtensa processor.
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for an
Xtensa processor.
@@c man end
@@c man begin INCLUDE
@@include c-xtensa.texi
@@c ended inside the included file
@@end ifset

@@end ifset

@@c man begin OPTIONS

@@ifset Z80
The following options are available when @@value{AS} is configured for
a Z80 family processor.
@@table @@gcctabopt
@@item -z80
Assemble for Z80 processor.
@@item -r800
Assemble for R800 processor.
@@item  -ignore-undocumented-instructions
@@itemx -Wnud
Assemble undocumented Z80 instructions that also work on R800 without warning.
@@item  -ignore-unportable-instructions
@@itemx -Wnup
Assemble all undocumented Z80 instructions without warning.
@@item  -warn-undocumented-instructions
@@itemx -Wud
Issue a warning for undocumented Z80 instructions that also work on R800.
@@item  -warn-unportable-instructions
@@itemx -Wup
Issue a warning for undocumented Z80 instructions that do not work on R800.
@@item  -forbid-undocumented-instructions
@@itemx -Fud
Treat all undocumented instructions as errors.
@@item  -forbid-unportable-instructions
@@itemx -Fup
Treat undocumented Z80 instructions that do not work on R800 as errors.
@@end table
@@end ifset

@@c man end

@@menu
* Manual::                      Structure of this Manual
* GNU Assembler::               The GNU Assembler
* Object Formats::              Object File Formats
* Command Line::                Command Line
* Input Files::                 Input Files
* Object::                      Output (Object) File
* Errors::                      Error and Warning Messages
@@end menu

@@node Manual
@@section Structure of this Manual

@@cindex manual, structure and purpose
This manual is intended to describe what you need to know to use
@@sc{gnu} @@command{@@value{AS}}.  We cover the syntax expected in source files, including
notation for symbols, constants, and expressions; the directives that
@@command{@@value{AS}} understands; and of course how to invoke @@command{@@value{AS}}.

@@ifclear GENERIC
We also cover special features in the @@value{TARGET}
configuration of @@command{@@value{AS}}, including assembler directives.
@@end ifclear
@@ifset GENERIC
This manual also describes some of the machine-dependent features of
various flavors of the assembler.
@@end ifset

@@cindex machine instructions (not covered)
On the other hand, this manual is @@emph{not} intended as an introduction
to programming in assembly language---let alone programming in general!
In a similar vein, we make no attempt to introduce the machine
architecture; we do @@emph{not} describe the instruction set, standard
mnemonics, registers or addressing modes that are standard to a
particular architecture.
@@ifset GENERIC
You may want to consult the manufacturer's
machine architecture manual for this information.
@@end ifset
@@ifclear GENERIC
@@ifset H8/300
For information on the H8/300 machine instruction set, see @@cite{H8/300
Series Programming Manual}.  For the H8/300H, see @@cite{H8/300H Series
Programming Manual} (Renesas).
@@end ifset
@@ifset SH
For information on the Renesas (formerly Hitachi) / SuperH SH machine instruction set,
see @@cite{SH-Microcomputer User's Manual} (Renesas) or
@@cite{SH-4 32-bit CPU Core Architecture} (SuperH) and
@@cite{SuperH (SH) 64-Bit RISC Series} (SuperH).
@@end ifset
@@ifset Z8000
For information on the Z8000 machine instruction set, see @@cite{Z8000 CPU Technical Manual}
@@end ifset
@@end ifclear

@@c I think this is premature---doc@@cygnus.com, 17jan1991
@@ignore
Throughout this manual, we assume that you are running @@dfn{GNU},
the portable operating system from the @@dfn{Free Software
Foundation, Inc.}.  This restricts our attention to certain kinds of
computer (in particular, the kinds of computers that @@sc{gnu} can run on);
once this assumption is granted examples and definitions need less
qualification.

@@command{@@value{AS}} is part of a team of programs that turn a high-level
human-readable series of instructions into a low-level
computer-readable series of instructions.  Different versions of
@@command{@@value{AS}} are used for different kinds of computer.
@@end ignore

@@c There used to be a section "Terminology" here, which defined
@@c "contents", "byte", "word", and "long".  Defining "word" to any
@@c particular size is confusing when the .word directive may generate 16
@@c bits on one machine and 32 bits on another; in general, for the user
@@c version of this manual, none of these terms seem essential to define.
@@c They were used very little even in the former draft of the manual;
@@c this draft makes an effort to avoid them (except in names of
@@c directives).

@@node GNU Assembler
@@section The GNU Assembler

@@c man begin DESCRIPTION

@@sc{gnu} @@command{as} is really a family of assemblers.
@@ifclear GENERIC
This manual describes @@command{@@value{AS}}, a member of that family which is
configured for the @@value{TARGET} architectures.
@@end ifclear
If you use (or have used) the @@sc{gnu} assembler on one architecture, you
should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
@@dfn{pseudo-ops}) and assembler syntax.@@refill

@@cindex purpose of @@sc{gnu} assembler
@@command{@@value{AS}} is primarily intended to assemble the output of the
@@sc{gnu} C compiler @@code{@@value{GCC}} for use by the linker
@@code{@@value{LD}}.  Nevertheless, we've tried to make @@command{@@value{AS}}
assemble correctly everything that other assemblers for the same
machine would assemble.
@@ifset VAX
Any exceptions are documented explicitly (@@pxref{Machine Dependencies}).
@@end ifset
@@ifset M680X0
@@c This remark should appear in generic version of manual; assumption
@@c here is that generic version sets M680x0.
This doesn't mean @@command{@@value{AS}} always uses the same syntax as another
assembler for the same architecture; for example, we know of several
incompatible versions of 680x0 assembly language syntax.
@@end ifset

@@c man end

Unlike older assemblers, @@command{@@value{AS}} is designed to assemble a source
program in one pass of the source file.  This has a subtle impact on the
@@kbd{.org} directive (@@pxref{Org,,@@code{.org}}).

@@node Object Formats
@@section Object File Formats

@@cindex object file format
The @@sc{gnu} assembler can be configured to produce several alternative
object file formats.  For the most part, this does not affect how you
write assembly language programs; but directives for debugging symbols
are typically different in different file formats.  @@xref{Symbol
Attributes,,Symbol Attributes}.
@@ifclear GENERIC
@@ifclear MULTI-OBJ
For the @@value{TARGET} target, @@command{@@value{AS}} is configured to produce
@@value{OBJ-NAME} format object files.
@@end ifclear
@@c The following should exhaust all configs that set MULTI-OBJ, ideally
@@ifset I960
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
@@code{b.out} or COFF format object files.
@@end ifset
@@ifset HPPA
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
SOM or ELF format object files.
@@end ifset
@@end ifclear

@@node Command Line
@@section Command Line

@@cindex command line conventions

After the program name @@command{@@value{AS}}, the command line may contain
options and file names.  Options may appear in any order, and may be
before, after, or between file names.  The order of file names is
significant.

@@cindex standard input, as input file
@@kindex --
@@file{--} (two hyphens) by itself names the standard input file
explicitly, as one of the files for @@command{@@value{AS}} to assemble.

@@cindex options, command line
Except for @@samp{--} any command line argument that begins with a
hyphen (@@samp{-}) is an option.  Each option changes the behavior of
@@command{@@value{AS}}.  No option changes the way another option works.  An
option is a @@samp{-} followed by one or more letters; the case of
the letter is important.   All options are optional.

Some options expect exactly one file name to follow them.  The file
name may either immediately follow the option's letter (compatible
with older assemblers) or it may be the next command argument (@@sc{gnu}
standard).  These two command lines are equivalent:

@@smallexample
@@value{AS} -o my-object-file.o mumble.s
@@value{AS} -omy-object-file.o mumble.s
@@end smallexample

@@node Input Files
@@section Input Files

@@cindex input
@@cindex source program
@@cindex files, input
We use the phrase @@dfn{source program}, abbreviated @@dfn{source}, to
describe the program input to one run of @@command{@@value{AS}}.  The program may
be in one or more files; how the source is partitioned into files
doesn't change the meaning of the source.

@@c I added "con" prefix to "catenation" just to prove I can overcome my
@@c APL training...   doc@@cygnus.com
The source program is a concatenation of the text in all the files, in the
order specified.

@@c man begin DESCRIPTION
Each time you run @@command{@@value{AS}} it assembles exactly one source
program.  The source program is made up of one or more files.
(The standard input is also a file.)

You give @@command{@@value{AS}} a command line that has zero or more input file
names.  The input files are read (from left file name to right).  A
command line argument (in any position) that has no special meaning
is taken to be an input file name.

If you give @@command{@@value{AS}} no file names it attempts to read one input file
from the @@command{@@value{AS}} standard input, which is normally your terminal.  You
may have to type @@key{ctl-D} to tell @@command{@@value{AS}} there is no more program
to assemble.

Use @@samp{--} if you need to explicitly name the standard input file
in your command line.

If the source is empty, @@command{@@value{AS}} produces a small, empty object
file.

@@c man end

@@subheading Filenames and Line-numbers

@@cindex input file linenumbers
@@cindex line numbers, in input files
There are two ways of locating a line in the input file (or files) and
either may be used in reporting error messages.  One way refers to a line
number in a physical file; the other refers to a line number in a
``logical'' file.  @@xref{Errors, ,Error and Warning Messages}.

@@dfn{Physical files} are those files named in the command line given
to @@command{@@value{AS}}.

@@dfn{Logical files} are simply names declared explicitly by assembler
directives; they bear no relation to physical files.  Logical file names help
error messages reflect the original source file, when @@command{@@value{AS}} source
is itself synthesized from other files.  @@command{@@value{AS}} understands the
@@samp{#} directives emitted by the @@code{@@value{GCC}} preprocessor.  See also
@@ref{File,,@@code{.file}}.

@@node Object
@@section Output (Object) File

@@cindex object file
@@cindex output file
@@kindex a.out
@@kindex .o
Every time you run @@command{@@value{AS}} it produces an output file, which is
your assembly language program translated into numbers.  This file
is the object file.  Its default name is
@@ifclear BOUT
@@code{a.out}.
@@end ifclear
@@ifset BOUT
@@ifset GENERIC
@@code{a.out}, or
@@end ifset
@@code{b.out} when @@command{@@value{AS}} is configured for the Intel 80960.
@@end ifset
You can give it another name by using the @@option{-o} option.  Conventionally,
object file names end with @@file{.o}.  The default name is used for historical
reasons: older assemblers were capable of assembling self-contained programs
directly into a runnable program.  (For some formats, this isn't currently
possible, but it can be done for the @@code{a.out} format.)

@@cindex linker
@@kindex ld
The object file is meant for input to the linker @@code{@@value{LD}}.  It contains
assembled program code, information to help @@code{@@value{LD}} integrate
the assembled program into a runnable file, and (optionally) symbolic
information for the debugger.

@@c link above to some info file(s) like the description of a.out.
@@c don't forget to describe @@sc{gnu} info as well as Unix lossage.

@@node Errors
@@section Error and Warning Messages

@@c man begin DESCRIPTION

@@cindex error messages
@@cindex warning messages
@@cindex messages from assembler
@@command{@@value{AS}} may write warnings and error messages to the standard error
file (usually your terminal).  This should not happen when  a compiler
runs @@command{@@value{AS}} automatically.  Warnings report an assumption made so
that @@command{@@value{AS}} could keep assembling a flawed program; errors report a
grave problem that stops the assembly.

@@c man end

@@cindex format of warning messages
Warning messages have the format

@@smallexample
file_name:@@b{NNN}:Warning Message Text
@@end smallexample

@@noindent
@@cindex line numbers, in warnings/errors
(where @@b{NNN} is a line number).  If a logical file name has been given
(@@pxref{File,,@@code{.file}}) it is used for the filename, otherwise the name of
the current input file is used.  If a logical line number was given
@@ifset GENERIC
(@@pxref{Line,,@@code{.line}})
@@end ifset
then it is used to calculate the number printed,
otherwise the actual line in the current source file is printed.  The
message text is intended to be self explanatory (in the grand Unix
tradition).

@@cindex format of error messages
Error messages have the format
@@smallexample
file_name:@@b{NNN}:FATAL:Error Message Text
@@end smallexample
The file name and line number are derived as for warning
messages.  The actual message text may be rather less explanatory
because many of them aren't supposed to happen.

@@node Invoking
@@chapter Command-Line Options

@@cindex options, all versions of assembler
This chapter describes command-line options available in @@emph{all}
versions of the @@sc{gnu} assembler; see @@ref{Machine Dependencies},
for options specific
@@ifclear GENERIC
to the @@value{TARGET} target.
@@end ifclear
@@ifset GENERIC
to particular machine architectures.
@@end ifset

@@c man begin DESCRIPTION

If you are invoking @@command{@@value{AS}} via the @@sc{gnu} C compiler,
you can use the @@samp{-Wa} option to pass arguments through to the assembler.
The assembler arguments must be separated from each other (and the @@samp{-Wa})
by commas.  For example:

@@smallexample
gcc -c -g -O -Wa,-alh,-L file.c
@@end smallexample

@@noindent
This passes two options to the assembler: @@samp{-alh} (emit a listing to
standard output with high-level and assembly source) and @@samp{-L} (retain
local symbols in the symbol table).

Usually you do not need to use this @@samp{-Wa} mechanism, since many compiler
command-line options are automatically passed to the assembler by the compiler.
(You can call the @@sc{gnu} compiler driver with the @@samp{-v} option to see
precisely what options it passes to each compilation pass, including the
assembler.)

@@c man end

@@menu
* a::             -a[cdghlns] enable listings
* alternate::     --alternate enable alternate macro syntax
* D::             -D for compatibility
* f::             -f to work faster
* I::             -I for .include search path
@@ifclear DIFF-TBL-KLUGE
* K::             -K for compatibility
@@end ifclear
@@ifset DIFF-TBL-KLUGE
* K::             -K for difference tables
@@end ifset

* L::             -L to retain local symbols
* listing::       --listing-XXX to configure listing output
* M::		  -M or --mri to assemble in MRI compatibility mode
* MD::            --MD for dependency tracking
* o::             -o to name the object file
* R::             -R to join data and text sections
* statistics::    --statistics to see statistics about assembly
* traditional-format:: --traditional-format for compatible output
* v::             -v to announce version
* W::             -W, --no-warn, --warn, --fatal-warnings to control warnings
* Z::             -Z to make object file even after errors
@@end menu

@@node a
@@section Enable Listings: @@option{-a[cdghlns]}

@@kindex -a
@@kindex -ac
@@kindex -ad
@@kindex -ag
@@kindex -ah
@@kindex -al
@@kindex -an
@@kindex -as
@@cindex listings, enabling
@@cindex assembly listings, enabling

These options enable listing output from the assembler.  By itself,
@@samp{-a} requests high-level, assembly, and symbols listing.
You can use other letters to select specific options for the list:
@@samp{-ah} requests a high-level language listing,
@@samp{-al} requests an output-program assembly listing, and
@@samp{-as} requests a symbol table listing.
High-level listings require that a compiler debugging option like
@@samp{-g} be used, and that assembly listings (@@samp{-al}) be requested
also.

Use the @@samp{-ag} option to print a first section with general assembly
information, like @@value{AS} version, switches passed, or time stamp.

Use the @@samp{-ac} option to omit false conditionals from a listing.  Any lines
which are not assembled because of a false @@code{.if} (or @@code{.ifdef}, or any
other conditional), or a true @@code{.if} followed by an @@code{.else}, will be
omitted from the listing.

Use the @@samp{-ad} option to omit debugging directives from the
listing.

Once you have specified one of these options, you can further control
listing output and its appearance using the directives @@code{.list},
@@code{.nolist}, @@code{.psize}, @@code{.eject}, @@code{.title}, and
@@code{.sbttl}.
The @@samp{-an} option turns off all forms processing.
If you do not request listing output with one of the @@samp{-a} options, the
listing-control directives have no effect.

The letters after @@samp{-a} may be combined into one option,
@@emph{e.g.}, @@samp{-aln}.

Note if the assembler source is coming from the standard input (e.g.,
because it
is being created by @@code{@@value{GCC}} and the @@samp{-pipe} command line switch
is being used) then the listing will not contain any comments or preprocessor
directives.  This is because the listing code buffers input source lines from
stdin only after they have been preprocessed by the assembler.  This reduces
memory usage and makes the code more efficient.

@@node alternate
@@section @@option{--alternate}

@@kindex --alternate
Begin in alternate macro mode, see @@ref{Altmacro,,@@code{.altmacro}}.

@@node D
@@section @@option{-D}

@@kindex -D
This option has no effect whatsoever, but it is accepted to make it more
likely that scripts written for other assemblers also work with
@@command{@@value{AS}}.

@@node f
@@section Work Faster: @@option{-f}

@@kindex -f
@@cindex trusted compiler
@@cindex faster processing (@@option{-f})
@@samp{-f} should only be used when assembling programs written by a
(trusted) compiler.  @@samp{-f} stops the assembler from doing whitespace
and comment preprocessing on
the input file(s) before assembling them.  @@xref{Preprocessing,
,Preprocessing}.

@@quotation
@@emph{Warning:} if you use @@samp{-f} when the files actually need to be
preprocessed (if they contain comments, for example), @@command{@@value{AS}} does
not work correctly.
@@end quotation

@@node I
@@section @@code{.include} Search Path: @@option{-I} @@var{path}

@@kindex -I @@var{path}
@@cindex paths for @@code{.include}
@@cindex search path for @@code{.include}
@@cindex @@code{include} directive search path
Use this option to add a @@var{path} to the list of directories
@@command{@@value{AS}} searches for files specified in @@code{.include}
directives (@@pxref{Include,,@@code{.include}}).  You may use @@option{-I} as
many times as necessary to include a variety of paths.  The current
working directory is always searched first; after that, @@command{@@value{AS}}
searches any @@samp{-I} directories in the same order as they were
specified (left to right) on the command line.

@@node K
@@section Difference Tables: @@option{-K}

@@kindex -K
@@ifclear DIFF-TBL-KLUGE
On the @@value{TARGET} family, this option is allowed, but has no effect.  It is
permitted for compatibility with the @@sc{gnu} assembler on other platforms,
where it can be used to warn when the assembler alters the machine code
generated for @@samp{.word} directives in difference tables.  The @@value{TARGET}
family does not have the addressing limitations that sometimes lead to this
alteration on other platforms.
@@end ifclear

@@ifset DIFF-TBL-KLUGE
@@cindex difference tables, warning
@@cindex warning for altered difference tables
@@command{@@value{AS}} sometimes alters the code emitted for directives of the
form @@samp{.word @@var{sym1}-@@var{sym2}}.  @@xref{Word,,@@code{.word}}.
You can use the @@samp{-K} option if you want a warning issued when this
is done.
@@end ifset

@@node L
@@section Include Local Symbols: @@option{-L}

@@kindex -L
@@cindex local symbols, retaining in output
Symbols beginning with system-specific local label prefixes, typically
@@samp{.L} for ELF systems or @@samp{L} for traditional a.out systems, are
called @@dfn{local symbols}.  @@xref{Symbol Names}.  Normally you do not see
such symbols when debugging, because they are intended for the use of
programs (like compilers) that compose assembler programs, not for your
notice.  Normally both @@command{@@value{AS}} and @@code{@@value{LD}} discard
such symbols, so you do not normally debug with them.

This option tells @@command{@@value{AS}} to retain those local symbols
in the object file.  Usually if you do this you also tell the linker
@@code{@@value{LD}} to preserve those symbols.

@@node listing
@@section Configuring listing output: @@option{--listing}

The listing feature of the assembler can be enabled via the command line switch
@@samp{-a} (@@pxref{a}).  This feature combines the input source file(s) with a
hex dump of the corresponding locations in the output object file, and displays
them as a listing file.  The format of this listing can be controlled by
directives inside the assembler source (i.e., @@code{.list} (@@pxref{List}),
@@code{.title} (@@pxref{Title}), @@code{.sbttl} (@@pxref{Sbttl}),
@@code{.psize} (@@pxref{Psize}), and
@@code{.eject} (@@pxref{Eject}) and also by the following switches:

@@table @@gcctabopt
@@item --listing-lhs-width=@@samp{number}
@@kindex --listing-lhs-width
@@cindex Width of first line disassembly output
Sets the maximum width, in words, of the first line of the hex byte dump.  This
dump appears on the left hand side of the listing output.

@@item --listing-lhs-width2=@@samp{number}
@@kindex --listing-lhs-width2
@@cindex Width of continuation lines of disassembly output
Sets the maximum width, in words, of any further lines of the hex byte dump for
a given input source line.  If this value is not specified, it defaults to being
the same as the value specified for @@samp{--listing-lhs-width}.  If neither
switch is used the default is to one.

@@item --listing-rhs-width=@@samp{number}
@@kindex --listing-rhs-width
@@cindex Width of source line output
Sets the maximum width, in characters, of the source line that is displayed
alongside the hex dump.  The default value for this parameter is 100.  The
source line is displayed on the right hand side of the listing output.

@@item --listing-cont-lines=@@samp{number}
@@kindex --listing-cont-lines
@@cindex Maximum number of continuation lines
Sets the maximum number of continuation lines of hex dump that will be
displayed for a given single line of source input.  The default value is 4.
@@end table

@@node M
@@section Assemble in MRI Compatibility Mode: @@option{-M}

@@kindex -M
@@cindex MRI compatibility mode
The @@option{-M} or @@option{--mri} option selects MRI compatibility mode.  This
changes the syntax and pseudo-op handling of @@command{@@value{AS}} to make it
compatible with the @@code{ASM68K} or the @@code{ASM960} (depending upon the
configured target) assembler from Microtec Research.  The exact nature of the
MRI syntax will not be documented here; see the MRI manuals for more
information.  Note in particular that the handling of macros and macro
arguments is somewhat different.  The purpose of this option is to permit
assembling existing MRI assembler code using @@command{@@value{AS}}.

The MRI compatibility is not complete.  Certain operations of the MRI assembler
depend upon its object file format, and can not be supported using other object
file formats.  Supporting these would require enhancing each object file format
individually.  These are:

@@itemize @@bullet
@@item global symbols in common section

The m68k MRI assembler supports common sections which are merged by the linker.
Other object file formats do not support this.  @@command{@@value{AS}} handles
common sections by treating them as a single common symbol.  It permits local
symbols to be defined within a common section, but it can not support global
symbols, since it has no way to describe them.

@@item complex relocations

The MRI assemblers support relocations against a negated section address, and
relocations which combine the start addresses of two or more sections.  These
are not support by other object file formats.

@@item @@code{END} pseudo-op specifying start address

The MRI @@code{END} pseudo-op permits the specification of a start address.
This is not supported by other object file formats.  The start address may
instead be specified using the @@option{-e} option to the linker, or in a linker
script.

@@item @@code{IDNT}, @@code{.ident} and @@code{NAME} pseudo-ops

The MRI @@code{IDNT}, @@code{.ident} and @@code{NAME} pseudo-ops assign a module
name to the output file.  This is not supported by other object file formats.

@@item @@code{ORG} pseudo-op

The m68k MRI @@code{ORG} pseudo-op begins an absolute section at a given
address.  This differs from the usual @@command{@@value{AS}} @@code{.org} pseudo-op,
which changes the location within the current section.  Absolute sections are
not supported by other object file formats.  The address of a section may be
assigned within a linker script.
@@end itemize

There are some other features of the MRI assembler which are not supported by
@@command{@@value{AS}}, typically either because they are difficult or because they
seem of little consequence.  Some of these may be supported in future releases.

@@itemize @@bullet

@@item EBCDIC strings

EBCDIC strings are not supported.

@@item packed binary coded decimal

Packed binary coded decimal is not supported.  This means that the @@code{DC.P}
and @@code{DCB.P} pseudo-ops are not supported.

@@item @@code{FEQU} pseudo-op

The m68k @@code{FEQU} pseudo-op is not supported.

@@item @@code{NOOBJ} pseudo-op

The m68k @@code{NOOBJ} pseudo-op is not supported.

@@item @@code{OPT} branch control options

The m68k @@code{OPT} branch control options---@@code{B}, @@code{BRS}, @@code{BRB},
@@code{BRL}, and @@code{BRW}---are ignored.  @@command{@@value{AS}} automatically
relaxes all branches, whether forward or backward, to an appropriate size, so
these options serve no purpose.

@@item @@code{OPT} list control options

The following m68k @@code{OPT} list control options are ignored: @@code{C},
@@code{CEX}, @@code{CL}, @@code{CRE}, @@code{E}, @@code{G}, @@code{I}, @@code{M},
@@code{MEX}, @@code{MC}, @@code{MD}, @@code{X}.

@@item other @@code{OPT} options

The following m68k @@code{OPT} options are ignored: @@code{NEST}, @@code{O},
@@code{OLD}, @@code{OP}, @@code{P}, @@code{PCO}, @@code{PCR}, @@code{PCS}, @@code{R}.

@@item @@code{OPT} @@code{D} option is default

The m68k @@code{OPT} @@code{D} option is the default, unlike the MRI assembler.
@@code{OPT NOD} may be used to turn it off.

@@item @@code{XREF} pseudo-op.

The m68k @@code{XREF} pseudo-op is ignored.

@@item @@code{.debug} pseudo-op

The i960 @@code{.debug} pseudo-op is not supported.

@@item @@code{.extended} pseudo-op

The i960 @@code{.extended} pseudo-op is not supported.

@@item @@code{.list} pseudo-op.

The various options of the i960 @@code{.list} pseudo-op are not supported.

@@item @@code{.optimize} pseudo-op

The i960 @@code{.optimize} pseudo-op is not supported.

@@item @@code{.output} pseudo-op

The i960 @@code{.output} pseudo-op is not supported.

@@item @@code{.setreal} pseudo-op

The i960 @@code{.setreal} pseudo-op is not supported.

@@end itemize

@@node MD
@@section Dependency Tracking: @@option{--MD}

@@kindex --MD
@@cindex dependency tracking
@@cindex make rules

@@command{@@value{AS}} can generate a dependency file for the file it creates.  This
file consists of a single rule suitable for @@code{make} describing the
dependencies of the main source file.

The rule is written to the file named in its argument.

This feature is used in the automatic updating of makefiles.

@@node o
@@section Name the Object File: @@option{-o}

@@kindex -o
@@cindex naming object file
@@cindex object file name
There is always one object file output when you run @@command{@@value{AS}}.  By
default it has the name
@@ifset GENERIC
@@ifset I960
@@file{a.out} (or @@file{b.out}, for Intel 960 targets only).
@@end ifset
@@ifclear I960
@@file{a.out}.
@@end ifclear
@@end ifset
@@ifclear GENERIC
@@ifset I960
@@file{b.out}.
@@end ifset
@@ifclear I960
@@file{a.out}.
@@end ifclear
@@end ifclear
You use this option (which takes exactly one filename) to give the
object file a different name.

Whatever the object file is called, @@command{@@value{AS}} overwrites any
existing file of the same name.

@@node R
@@section Join Data and Text Sections: @@option{-R}

@@kindex -R
@@cindex data and text sections, joining
@@cindex text and data sections, joining
@@cindex joining text and data sections
@@cindex merging text and data sections
@@option{-R} tells @@command{@@value{AS}} to write the object file as if all
data-section data lives in the text section.  This is only done at
the very last moment:  your binary data are the same, but data
section parts are relocated differently.  The data section part of
your object file is zero bytes long because all its bytes are
appended to the text section.  (@@xref{Sections,,Sections and Relocation}.)

When you specify @@option{-R} it would be possible to generate shorter
address displacements (because we do not have to cross between text and
data section).  We refrain from doing this simply for compatibility with
older versions of @@command{@@value{AS}}.  In future, @@option{-R} may work this way.

@@ifset COFF-ELF
When @@command{@@value{AS}} is configured for COFF or ELF output,
this option is only useful if you use sections named @@samp{.text} and
@@samp{.data}.
@@end ifset

@@ifset HPPA
@@option{-R} is not supported for any of the HPPA targets.  Using
@@option{-R} generates a warning from @@command{@@value{AS}}.
@@end ifset

@@node statistics
@@section Display Assembly Statistics: @@option{--statistics}

@@kindex --statistics
@@cindex statistics, about assembly
@@cindex time, total for assembly
@@cindex space used, maximum for assembly
Use @@samp{--statistics} to display two statistics about the resources used by
@@command{@@value{AS}}: the maximum amount of space allocated during the assembly
(in bytes), and the total execution time taken for the assembly (in @@sc{cpu}
seconds).

@@node traditional-format
@@section Compatible Output: @@option{--traditional-format}

@@kindex --traditional-format
For some targets, the output of @@command{@@value{AS}} is different in some ways
from the output of some existing assembler.  This switch requests
@@command{@@value{AS}} to use the traditional format instead.

For example, it disables the exception frame optimizations which
@@command{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.

@@node v
@@section Announce Version: @@option{-v}

@@kindex -v
@@kindex -version
@@cindex assembler version
@@cindex version of assembler
You can find out what version of as is running by including the
option @@samp{-v} (which you can also spell as @@samp{-version}) on the
command line.

@@node W
@@section Control Warnings: @@option{-W}, @@option{--warn}, @@option{--no-warn}, @@option{--fatal-warnings}

@@command{@@value{AS}} should never give a warning or error message when
assembling compiler output.  But programs written by people often
cause @@command{@@value{AS}} to give a warning that a particular assumption was
made.  All such warnings are directed to the standard error file.

@@kindex -W
@@kindex --no-warn
@@cindex suppressing warnings
@@cindex warnings, suppressing
If you use the @@option{-W} and @@option{--no-warn} options, no warnings are issued.
This only affects the warning messages: it does not change any particular of
how @@command{@@value{AS}} assembles your file.  Errors, which stop the assembly,
are still reported.

@@kindex --fatal-warnings
@@cindex errors, caused by warnings
@@cindex warnings, causing error
If you use the @@option{--fatal-warnings} option, @@command{@@value{AS}} considers
files that generate warnings to be in error.

@@kindex --warn
@@cindex warnings, switching on
You can switch these options off again by specifying @@option{--warn}, which
causes warnings to be output as usual.

@@node Z
@@section Generate Object File in Spite of Errors: @@option{-Z}
@@cindex object file, after errors
@@cindex errors, continuing after
After an error message, @@command{@@value{AS}} normally produces no output.  If for
some reason you are interested in object file output even after
@@command{@@value{AS}} gives an error message on your program, use the @@samp{-Z}
option.  If there are any errors, @@command{@@value{AS}} continues anyways, and
writes an object file after a final warning message of the form @@samp{@@var{n}
errors, @@var{m} warnings, generating bad object file.}

@@node Syntax
@@chapter Syntax

@@cindex machine-independent syntax
@@cindex syntax, machine-independent
This chapter describes the machine-independent syntax allowed in a
source file.  @@command{@@value{AS}} syntax is similar to what many other
assemblers use; it is inspired by the BSD 4.2
@@ifclear VAX
assembler.
@@end ifclear
@@ifset VAX
assembler, except that @@command{@@value{AS}} does not assemble Vax bit-fields.
@@end ifset

@@menu
* Preprocessing::               Preprocessing
* Whitespace::                  Whitespace
* Comments::                    Comments
* Symbol Intro::                Symbols
* Statements::                  Statements
* Constants::                   Constants
@@end menu

@@node Preprocessing
@@section Preprocessing

@@cindex preprocessing
The @@command{@@value{AS}} internal preprocessor:
@@itemize @@bullet
@@cindex whitespace, removed by preprocessor
@@item
adjusts and removes extra whitespace.  It leaves one space or tab before
the keywords on a line, and turns any other whitespace on the line into
a single space.

@@cindex comments, removed by preprocessor
@@item
removes all comments, replacing them with a single space, or an
appropriate number of newlines.

@@cindex constants, converted by preprocessor
@@item
converts character constants into the appropriate numeric values.
@@end itemize

It does not do macro processing, include file handling, or
anything else you may get from your C compiler's preprocessor.  You can
do include file processing with the @@code{.include} directive
(@@pxref{Include,,@@code{.include}}).  You can use the @@sc{gnu} C compiler driver
to get other ``CPP'' style preprocessing by giving the input file a
@@samp{.S} suffix.  @@xref{Overall Options, ,Options Controlling the Kind of
Output, gcc.info, Using GNU CC}.

Excess whitespace, comments, and character constants
cannot be used in the portions of the input text that are not
preprocessed.

@@cindex turning preprocessing on and off
@@cindex preprocessing, turning on and off
@@kindex #NO_APP
@@kindex #APP
If the first line of an input file is @@code{#NO_APP} or if you use the
@@samp{-f} option, whitespace and comments are not removed from the input file.
Within an input file, you can ask for whitespace and comment removal in
specific portions of the by putting a line that says @@code{#APP} before the
text that may contain whitespace or comments, and putting a line that says
@@code{#NO_APP} after this text.  This feature is mainly intend to support
@@code{asm} statements in compilers whose output is otherwise free of comments
and whitespace.

@@node Whitespace
@@section Whitespace

@@cindex whitespace
@@dfn{Whitespace} is one or more blanks or tabs, in any order.
Whitespace is used to separate symbols, and to make programs neater for
people to read.  Unless within character constants
(@@pxref{Characters,,Character Constants}), any whitespace means the same
as exactly one space.

@@node Comments
@@section Comments

@@cindex comments
There are two ways of rendering comments to @@command{@@value{AS}}.  In both
cases the comment is equivalent to one space.

Anything from @@samp{/*} through the next @@samp{*/} is a comment.
This means you may not nest these comments.

@@smallexample
/*
  The only way to include a newline ('\n') in a comment
  is to use this sort of comment.
*/

/* This sort of comment does not nest. */
@@end smallexample

@@cindex line comment character
Anything from a @@dfn{line comment} character up to the next newline is
considered a comment and is ignored.  The line comment character is target
specific, and some targets multiple comment characters.  Some targets also have
line comment characters that only work if they are the first character on a
line.  Some targets use a sequence of two characters to introduce a line
comment.  Some targets can also change their line comment characters depending
upon command line options that have been used.  For more details see the
@@emph{Syntax} section in the documentation for individual targets.

If the line comment character is the hash sign (@@samp{#}) then it still has the
special ability to enable and disable preprocessing (@@pxref{Preprocessing}) and
to specify logical line numbers:

@@kindex #
@@cindex lines starting with @@code{#}
@@cindex logical line numbers
To be compatible with past assemblers, lines that begin with @@samp{#} have a
special interpretation.  Following the @@samp{#} should be an absolute
expression (@@pxref{Expressions}): the logical line number of the @@emph{next}
line.  Then a string (@@pxref{Strings, ,Strings}) is allowed: if present it is a
new logical file name.  The rest of the line, if any, should be whitespace.

If the first non-whitespace characters on the line are not numeric,
the line is ignored.  (Just like a comment.)

@@smallexample
                          # This is an ordinary comment.
# 42-6 "new_file_name"    # New logical file name
                          # This is logical line # 36.
@@end smallexample
This feature is deprecated, and may disappear from future versions
of @@command{@@value{AS}}.

@@node Symbol Intro
@@section Symbols

@@cindex characters used in symbols
@@ifclear SPECIAL-SYMS
A @@dfn{symbol} is one or more characters chosen from the set of all
letters (both upper and lower case), digits and the three characters
@@samp{_.$}.
@@end ifclear
@@ifset SPECIAL-SYMS
@@ifclear GENERIC
@@ifset H8
A @@dfn{symbol} is one or more characters chosen from the set of all
letters (both upper and lower case), digits and the three characters
@@samp{._$}.  (Save that, on the H8/300 only, you may not use @@samp{$} in
symbol names.)
@@end ifset
@@end ifclear
@@end ifset
@@ifset GENERIC
On most machines, you can also use @@code{$} in symbol names; exceptions
are noted in @@ref{Machine Dependencies}.
@@end ifset
No symbol may begin with a digit.  Case is significant.
There is no length limit: all characters are significant.  Multibyte characters
are supported.  Symbols are delimited by characters not in that set, or by the
beginning of a file (since the source program must end with a newline, the end
of a file is not a possible symbol delimiter).  @@xref{Symbols}.
@@cindex length of symbols

@@node Statements
@@section Statements

@@cindex statements, structure of
@@cindex line separator character
@@cindex statement separator character

A @@dfn{statement} ends at a newline character (@@samp{\n}) or a
@@dfn{line separator character}.  The line separator character is target
specific and described in the @@emph{Syntax} section of each
target's documentation.  Not all targets support a line separator character.
The newline or line separator character is considered to be part of the
preceding statement.  Newlines and separators within character constants are an
exception: they do not end statements.

@@cindex newline, required at file end
@@cindex EOF, newline must precede
It is an error to end any statement with end-of-file:  the last
character of any input file should be a newline.@@refill

An empty statement is allowed, and may include whitespace.  It is ignored.

@@cindex instructions and directives
@@cindex directives and instructions
@@c "key symbol" is not used elsewhere in the document; seems pedantic to
@@c @@defn{} it in that case, as was done previously...  doc@@cygnus.com,
@@c 13feb91.
A statement begins with zero or more labels, optionally followed by a
key symbol which determines what kind of statement it is.  The key
symbol determines the syntax of the rest of the statement.  If the
symbol begins with a dot @@samp{.} then the statement is an assembler
directive: typically valid for any computer.  If the symbol begins with
a letter the statement is an assembly language @@dfn{instruction}: it
assembles into a machine language instruction.
@@ifset GENERIC
Different versions of @@command{@@value{AS}} for different computers
recognize different instructions.  In fact, the same symbol may
represent a different instruction in a different computer's assembly
language.@@refill
@@end ifset

@@cindex @@code{:} (label)
@@cindex label (@@code{:})
A label is a symbol immediately followed by a colon (@@code{:}).
Whitespace before a label or after a colon is permitted, but you may not
have whitespace between a label's symbol and its colon. @@xref{Labels}.

@@ifset HPPA
For HPPA targets, labels need not be immediately followed by a colon, but
the definition of a label must begin in column zero.  This also implies that
only one label may be defined on each line.
@@end ifset

@@smallexample
label:     .directive    followed by something
another_label:           # This is an empty statement.
           instruction   operand_1, operand_2, @@dots{}
@@end smallexample

@@node Constants
@@section Constants

@@cindex constants
A constant is a number, written so that its value is known by
inspection, without knowing any context.  Like this:
@@smallexample
@@group
.byte  74, 0112, 092, 0x4A, 0X4a, 'J, '\J # All the same value.
.ascii "Ring the bell\7"                  # A string constant.
.octa  0x123456789abcdef0123456789ABCDEF0 # A bignum.
.float 0f-314159265358979323846264338327\
95028841971.693993751E-40                 # - pi, a flonum.
@@end group
@@end smallexample

@@menu
* Characters::                  Character Constants
* Numbers::                     Number Constants
@@end menu

@@node Characters
@@subsection Character Constants

@@cindex character constants
@@cindex constants, character
There are two kinds of character constants.  A @@dfn{character} stands
for one character in one byte and its value may be used in
numeric expressions.  String constants (properly called string
@@emph{literals}) are potentially many bytes and their values may not be
used in arithmetic expressions.

@@menu
* Strings::                     Strings
* Chars::                       Characters
@@end menu

@@node Strings
@@subsubsection Strings

@@cindex string constants
@@cindex constants, string
A @@dfn{string} is written between double-quotes.  It may contain
double-quotes or null characters.  The way to get special characters
into a string is to @@dfn{escape} these characters: precede them with
a backslash @@samp{\} character.  For example @@samp{\\} represents
one backslash:  the first @@code{\} is an escape which tells
@@command{@@value{AS}} to interpret the second character literally as a backslash
(which prevents @@command{@@value{AS}} from recognizing the second @@code{\} as an
escape character).  The complete list of escapes follows.

@@cindex escape codes, character
@@cindex character escape codes
@@table @@kbd
@@c      @@item \a
@@c      Mnemonic for ACKnowledge; for ASCII this is octal code 007.
@@c
@@cindex @@code{\b} (backspace character)
@@cindex backspace (@@code{\b})
@@item \b
Mnemonic for backspace; for ASCII this is octal code 010.

@@c      @@item \e
@@c      Mnemonic for EOText; for ASCII this is octal code 004.
@@c
@@cindex @@code{\f} (formfeed character)
@@cindex formfeed (@@code{\f})
@@item \f
Mnemonic for FormFeed; for ASCII this is octal code 014.

@@cindex @@code{\n} (newline character)
@@cindex newline (@@code{\n})
@@item \n
Mnemonic for newline; for ASCII this is octal code 012.

@@c      @@item \p
@@c      Mnemonic for prefix; for ASCII this is octal code 033, usually known as @@code{escape}.
@@c
@@cindex @@code{\r} (carriage return character)
@@cindex carriage return (@@code{\r})
@@item \r
Mnemonic for carriage-Return; for ASCII this is octal code 015.

@@c      @@item \s
@@c      Mnemonic for space; for ASCII this is octal code 040.  Included for compliance with
@@c      other assemblers.
@@c
@@cindex @@code{\t} (tab)
@@cindex tab (@@code{\t})
@@item \t
Mnemonic for horizontal Tab; for ASCII this is octal code 011.

@@c      @@item \v
@@c      Mnemonic for Vertical tab; for ASCII this is octal code 013.
@@c      @@item \x @@var{digit} @@var{digit} @@var{digit}
@@c      A hexadecimal character code.  The numeric code is 3 hexadecimal digits.
@@c
@@cindex @@code{\@@var{ddd}} (octal character code)
@@cindex octal character code (@@code{\@@var{ddd}})
@@item \ @@var{digit} @@var{digit} @@var{digit}
An octal character code.  The numeric code is 3 octal digits.
For compatibility with other Unix systems, 8 and 9 are accepted as digits:
for example, @@code{\008} has the value 010, and @@code{\009} the value 011.

@@cindex @@code{\@@var{xd...}} (hex character code)
@@cindex hex character code (@@code{\@@var{xd...}})
@@item \@@code{x} @@var{hex-digits...}
A hex character code.  All trailing hex digits are combined.  Either upper or
lower case @@code{x} works.

@@cindex @@code{\\} (@@samp{\} character)
@@cindex backslash (@@code{\\})
@@item \\
Represents one @@samp{\} character.

@@c      @@item \'
@@c      Represents one @@samp{'} (accent acute) character.
@@c      This is needed in single character literals
@@c      (@@xref{Characters,,Character Constants}.) to represent
@@c      a @@samp{'}.
@@c
@@cindex @@code{\"} (doublequote character)
@@cindex doublequote (@@code{\"})
@@item \"
Represents one @@samp{"} character.  Needed in strings to represent
this character, because an unescaped @@samp{"} would end the string.

@@item \ @@var{anything-else}
Any other character when escaped by @@kbd{\} gives a warning, but
assembles as if the @@samp{\} was not present.  The idea is that if
you used an escape sequence you clearly didn't want the literal
interpretation of the following character.  However @@command{@@value{AS}} has no
other interpretation, so @@command{@@value{AS}} knows it is giving you the wrong
code and warns you of the fact.
@@end table

Which characters are escapable, and what those escapes represent,
varies widely among assemblers.  The current set is what we think
the BSD 4.2 assembler recognizes, and is a subset of what most C
compilers recognize.  If you are in doubt, do not use an escape
sequence.

@@node Chars
@@subsubsection Characters

@@cindex single character constant
@@cindex character, single
@@cindex constant, single character
A single character may be written as a single quote immediately
followed by that character.  The same escapes apply to characters as
to strings.  So if you want to write the character backslash, you
must write @@kbd{'\\} where the first @@code{\} escapes the second
@@code{\}.  As you can see, the quote is an acute accent, not a
grave accent.  A newline
@@ifclear GENERIC
@@ifclear abnormal-separator
(or semicolon @@samp{;})
@@end ifclear
@@ifset abnormal-separator
@@ifset H8
(or dollar sign @@samp{$}, for the H8/300; or semicolon @@samp{;} for the
Renesas SH)
@@end ifset
@@end ifset
@@end ifclear
immediately following an acute accent is taken as a literal character
and does not count as the end of a statement.  The value of a character
constant in a numeric expression is the machine's byte-wide code for
that character.  @@command{@@value{AS}} assumes your character code is ASCII:
@@kbd{'A} means 65, @@kbd{'B} means 66, and so on. @@refill

@@node Numbers
@@subsection Number Constants

@@cindex constants, number
@@cindex number constants
@@command{@@value{AS}} distinguishes three kinds of numbers according to how they
are stored in the target machine.  @@emph{Integers} are numbers that
would fit into an @@code{int} in the C language.  @@emph{Bignums} are
integers, but they are stored in more than 32 bits.  @@emph{Flonums}
are floating point numbers, described below.

@@menu
* Integers::                    Integers
* Bignums::                     Bignums
* Flonums::                     Flonums
@@ifclear GENERIC
@@ifset I960
* Bit Fields::                  Bit Fields
@@end ifset
@@end ifclear
@@end menu

@@node Integers
@@subsubsection Integers
@@cindex integers
@@cindex constants, integer

@@cindex binary integers
@@cindex integers, binary
A binary integer is @@samp{0b} or @@samp{0B} followed by zero or more of
the binary digits @@samp{01}.

@@cindex octal integers
@@cindex integers, octal
An octal integer is @@samp{0} followed by zero or more of the octal
digits (@@samp{01234567}).

@@cindex decimal integers
@@cindex integers, decimal
A decimal integer starts with a non-zero digit followed by zero or
more digits (@@samp{0123456789}).

@@cindex hexadecimal integers
@@cindex integers, hexadecimal
A hexadecimal integer is @@samp{0x} or @@samp{0X} followed by one or
more hexadecimal digits chosen from @@samp{0123456789abcdefABCDEF}.

Integers have the usual values.  To denote a negative integer, use
the prefix operator @@samp{-} discussed under expressions
(@@pxref{Prefix Ops,,Prefix Operators}).

@@node Bignums
@@subsubsection Bignums

@@cindex bignums
@@cindex constants, bignum
A @@dfn{bignum} has the same syntax and semantics as an integer
except that the number (or its negative) takes more than 32 bits to
represent in binary.  The distinction is made because in some places
integers are permitted while bignums are not.

@@node Flonums
@@subsubsection Flonums
@@cindex flonums
@@cindex floating point numbers
@@cindex constants, floating point

@@cindex precision, floating point
A @@dfn{flonum} represents a floating point number.  The translation is
indirect: a decimal floating point number from the text is converted by
@@command{@@value{AS}} to a generic binary floating point number of more than
sufficient precision.  This generic floating point number is converted
to a particular computer's floating point format (or formats) by a
portion of @@command{@@value{AS}} specialized to that computer.

A flonum is written by writing (in order)
@@itemize @@bullet
@@item
The digit @@samp{0}.
@@ifset HPPA
(@@samp{0} is optional on the HPPA.)
@@end ifset

@@item
A letter, to tell @@command{@@value{AS}} the rest of the number is a flonum.
@@ifset GENERIC
@@kbd{e} is recommended.  Case is not important.
@@ignore
@@c FIXME: verify if flonum syntax really this vague for most cases
(Any otherwise illegal letter works here, but that might be changed.  Vax BSD
4.2 assembler seems to allow any of @@samp{defghDEFGH}.)
@@end ignore

On the H8/300, Renesas / SuperH SH,
and AMD 29K architectures, the letter must be
one of the letters @@samp{DFPRSX} (in upper or lower case).

On the ARC, the letter must be one of the letters @@samp{DFRS}
(in upper or lower case).

On the Intel 960 architecture, the letter must be
one of the letters @@samp{DFT} (in upper or lower case).

On the HPPA architecture, the letter must be @@samp{E} (upper case only).
@@end ifset
@@ifclear GENERIC
@@ifset ARC
One of the letters @@samp{DFRS} (in upper or lower case).
@@end ifset
@@ifset H8
One of the letters @@samp{DFPRSX} (in upper or lower case).
@@end ifset
@@ifset HPPA
The letter @@samp{E} (upper case only).
@@end ifset
@@ifset I960
One of the letters @@samp{DFT} (in upper or lower case).
@@end ifset
@@end ifclear

@@item
An optional sign: either @@samp{+} or @@samp{-}.

@@item
An optional @@dfn{integer part}: zero or more decimal digits.

@@item
An optional @@dfn{fractional part}: @@samp{.} followed by zero
or more decimal digits.

@@item
An optional exponent, consisting of:

@@itemize @@bullet
@@item
An @@samp{E} or @@samp{e}.
@@c I can't find a config where "EXP_CHARS" is other than 'eE', but in
@@c principle this can perfectly well be different on different targets.
@@item
Optional sign: either @@samp{+} or @@samp{-}.
@@item
One or more decimal digits.
@@end itemize

@@end itemize

At least one of the integer part or the fractional part must be
present.  The floating point number has the usual base-10 value.

@@command{@@value{AS}} does all processing using integers.  Flonums are computed
independently of any floating point hardware in the computer running
@@command{@@value{AS}}.

@@ifclear GENERIC
@@ifset I960
@@c Bit fields are written as a general facility but are also controlled
@@c by a conditional-compilation flag---which is as of now (21mar91)
@@c turned on only by the i960 config of GAS.
@@node Bit Fields
@@subsubsection Bit Fields

@@cindex bit fields
@@cindex constants, bit field
You can also define numeric constants as @@dfn{bit fields}.
Specify two numbers separated by a colon---
@@example
@@var{mask}:@@var{value}
@@end example
@@noindent
@@command{@@value{AS}} applies a bitwise @@sc{and} between @@var{mask} and
@@var{value}.

The resulting number is then packed
@@ifset GENERIC
@@c this conditional paren in case bit fields turned on elsewhere than 960
(in host-dependent byte order)
@@end ifset
into a field whose width depends on which assembler directive has the
bit-field as its argument.  Overflow (a result from the bitwise and
requiring more binary digits to represent) is not an error; instead,
more constants are generated, of the specified width, beginning with the
least significant digits.@@refill

The directives @@code{.byte}, @@code{.hword}, @@code{.int}, @@code{.long},
@@code{.short}, and @@code{.word} accept bit-field arguments.
@@end ifset
@@end ifclear

@@node Sections
@@chapter Sections and Relocation
@@cindex sections
@@cindex relocation

@@menu
* Secs Background::             Background
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
* Sub-Sections::                Sub-Sections
* bss::                         bss Section
@@end menu

@@node Secs Background
@@section Background

Roughly, a section is a range of addresses, with no gaps; all data
``in'' those addresses is treated the same for some particular purpose.
For example there may be a ``read only'' section.

@@cindex linker, and assembler
@@cindex assembler, and linker
The linker @@code{@@value{LD}} reads many object files (partial programs) and
combines their contents to form a runnable program.  When @@command{@@value{AS}}
emits an object file, the partial program is assumed to start at address 0.
@@code{@@value{LD}} assigns the final addresses for the partial program, so that
different partial programs do not overlap.  This is actually an
oversimplification, but it suffices to explain how @@command{@@value{AS}} uses
sections.

@@code{@@value{LD}} moves blocks of bytes of your program to their run-time
addresses.  These blocks slide to their run-time addresses as rigid
units; their length does not change and neither does the order of bytes
within them.  Such a rigid unit is called a @@emph{section}.  Assigning
run-time addresses to sections is called @@dfn{relocation}.  It includes
the task of adjusting mentions of object-file addresses so they refer to
the proper run-time addresses.
@@ifset H8
For the H8/300, and for the Renesas / SuperH SH,
@@command{@@value{AS}} pads sections if needed to
ensure they end on a word (sixteen bit) boundary.
@@end ifset

@@cindex standard assembler sections
An object file written by @@command{@@value{AS}} has at least three sections, any
of which may be empty.  These are named @@dfn{text}, @@dfn{data} and
@@dfn{bss} sections.

@@ifset COFF-ELF
@@ifset GENERIC
When it generates COFF or ELF output,
@@end ifset
@@command{@@value{AS}} can also generate whatever other named sections you specify
using the @@samp{.section} directive (@@pxref{Section,,@@code{.section}}).
If you do not use any directives that place output in the @@samp{.text}
or @@samp{.data} sections, these sections still exist, but are empty.
@@end ifset

@@ifset HPPA
@@ifset GENERIC
When @@command{@@value{AS}} generates SOM or ELF output for the HPPA,
@@end ifset
@@command{@@value{AS}} can also generate whatever other named sections you
specify using the @@samp{.space} and @@samp{.subspace} directives.  See
@@cite{HP9000 Series 800 Assembly Language Reference Manual}
(HP 92432-90001) for details on the @@samp{.space} and @@samp{.subspace}
assembler directives.

@@ifset SOM
Additionally, @@command{@@value{AS}} uses different names for the standard
text, data, and bss sections when generating SOM output.  Program text
is placed into the @@samp{$CODE$} section, data into @@samp{$DATA$}, and
BSS into @@samp{$BSS$}.
@@end ifset
@@end ifset

Within the object file, the text section starts at address @@code{0}, the
data section follows, and the bss section follows the data section.

@@ifset HPPA
When generating either SOM or ELF output files on the HPPA, the text
section starts at address @@code{0}, the data section at address
@@code{0x4000000}, and the bss section follows the data section.
@@end ifset

To let @@code{@@value{LD}} know which data changes when the sections are
relocated, and how to change that data, @@command{@@value{AS}} also writes to the
object file details of the relocation needed.  To perform relocation
@@code{@@value{LD}} must know, each time an address in the object
file is mentioned:
@@itemize @@bullet
@@item
Where in the object file is the beginning of this reference to
an address?
@@item
How long (in bytes) is this reference?
@@item
Which section does the address refer to?  What is the numeric value of
@@display
(@@var{address}) @@minus{} (@@var{start-address of section})?
@@end display
@@item
Is the reference to an address ``Program-Counter relative''?
@@end itemize

@@cindex addresses, format of
@@cindex section-relative addressing
In fact, every address @@command{@@value{AS}} ever uses is expressed as
@@display
(@@var{section}) + (@@var{offset into section})
@@end display
@@noindent
Further, most expressions @@command{@@value{AS}} computes have this section-relative
nature.
@@ifset SOM
(For some object formats, such as SOM for the HPPA, some expressions are
symbol-relative instead.)
@@end ifset

In this manual we use the notation @@{@@var{secname} @@var{N}@@} to mean ``offset
@@var{N} into section @@var{secname}.''

Apart from text, data and bss sections you need to know about the
@@dfn{absolute} section.  When @@code{@@value{LD}} mixes partial programs,
addresses in the absolute section remain unchanged.  For example, address
@@code{@@{absolute 0@@}} is ``relocated'' to run-time address 0 by
@@code{@@value{LD}}.  Although the linker never arranges two partial programs'
data sections with overlapping addresses after linking, @@emph{by definition}
their absolute sections must overlap.  Address @@code{@@{absolute@@ 239@@}} in one
part of a program is always the same address when the program is running as
address @@code{@@{absolute@@ 239@@}} in any other part of the program.

The idea of sections is extended to the @@dfn{undefined} section.  Any
address whose section is unknown at assembly time is by definition
rendered @@{undefined @@var{U}@@}---where @@var{U} is filled in later.
Since numbers are always defined, the only way to generate an undefined
address is to mention an undefined symbol.  A reference to a named
common block would be such a symbol: its value is unknown at assembly
time so it has section @@emph{undefined}.

By analogy the word @@emph{section} is used to describe groups of sections in
the linked program.  @@code{@@value{LD}} puts all partial programs' text
sections in contiguous addresses in the linked program.  It is
customary to refer to the @@emph{text section} of a program, meaning all
the addresses of all partial programs' text sections.  Likewise for
data and bss sections.

Some sections are manipulated by @@code{@@value{LD}}; others are invented for
use of @@command{@@value{AS}} and have no meaning except during assembly.

@@node Ld Sections
@@section Linker Sections
@@code{@@value{LD}} deals with just four kinds of sections, summarized below.

@@table @@strong

@@ifset COFF-ELF
@@cindex named sections
@@cindex sections, named
@@item named sections
@@end ifset
@@ifset aout-bout
@@cindex text section
@@cindex data section
@@itemx text section
@@itemx data section
@@end ifset
These sections hold your program.  @@command{@@value{AS}} and @@code{@@value{LD}} treat them as
separate but equal sections.  Anything you can say of one section is
true of another.
@@c @@ifset aout-bout
When the program is running, however, it is
customary for the text section to be unalterable.  The
text section is often shared among processes: it contains
instructions, constants and the like.  The data section of a running
program is usually alterable: for example, C variables would be stored
in the data section.
@@c @@end ifset

@@cindex bss section
@@item bss section
This section contains zeroed bytes when your program begins running.  It
is used to hold uninitialized variables or common storage.  The length of
each partial program's bss section is important, but because it starts
out containing zeroed bytes there is no need to store explicit zero
bytes in the object file.  The bss section was invented to eliminate
those explicit zeros from object files.

@@cindex absolute section
@@item absolute section
Address 0 of this section is always ``relocated'' to runtime address 0.
This is useful if you want to refer to an address that @@code{@@value{LD}} must
not change when relocating.  In this sense we speak of absolute
addresses being ``unrelocatable'': they do not change during relocation.

@@cindex undefined section
@@item undefined section
This ``section'' is a catch-all for address references to objects not in
the preceding sections.
@@c FIXME: ref to some other doc on obj-file formats could go here.
@@end table

@@cindex relocation example
An idealized example of three relocatable sections follows.
@@ifset COFF-ELF
The example uses the traditional section names @@samp{.text} and @@samp{.data}.
@@end ifset
Memory addresses are on the horizontal axis.

@@c TEXI2ROFF-KILL
@@ifnottex
@@c END TEXI2ROFF-KILL
@@smallexample
                      +-----+----+--+
partial program # 1:  |ttttt|dddd|00|
                      +-----+----+--+

                      text   data bss
                      seg.   seg. seg.

                      +---+---+---+
partial program # 2:  |TTT|DDD|000|
                      +---+---+---+

                      +--+---+-----+--+----+---+-----+~~
linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|
                      +--+---+-----+--+----+---+-----+~~

    addresses:        0 @@dots{}
@@end smallexample
@@c TEXI2ROFF-KILL
@@end ifnottex
@@need 5000
@@tex
\bigskip
\line{\it Partial program \#1: \hfil}
\line{\ibox{2.5cm}{\tt text}\ibox{2cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{2.5cm}{\tt ttttt}\boxit{2cm}{\tt dddd}\boxit{1cm}{\tt 00}\hfil}

\line{\it Partial program \#2: \hfil}
\line{\ibox{1cm}{\tt text}\ibox{1.5cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{1cm}{\tt TTT}\boxit{1.5cm}{\tt DDDD}\boxit{1cm}{\tt 000}\hfil}

\line{\it linked program: \hfil}
\line{\ibox{.5cm}{}\ibox{1cm}{\tt text}\ibox{2.5cm}{}\ibox{.75cm}{}\ibox{2cm}{\tt data}\ibox{1.5cm}{}\ibox{2cm}{\tt bss}\hfil}
\line{\boxit{.5cm}{}\boxit{1cm}{\tt TTT}\boxit{2.5cm}{\tt
ttttt}\boxit{.75cm}{}\boxit{2cm}{\tt dddd}\boxit{1.5cm}{\tt
DDDD}\boxit{2cm}{\tt 00000}\ \dots\hfil}

\line{\it addresses: \hfil}
\line{0\dots\hfil}

@@end tex
@@c END TEXI2ROFF-KILL

@@node As Sections
@@section Assembler Internal Sections

@@cindex internal assembler sections
@@cindex sections in messages, internal
These sections are meant only for the internal use of @@command{@@value{AS}}.  They
have no meaning at run-time.  You do not really need to know about these
sections for most purposes; but they can be mentioned in @@command{@@value{AS}}
warning messages, so it might be helpful to have an idea of their
meanings to @@command{@@value{AS}}.  These sections are used to permit the
value of every expression in your assembly language program to be a
section-relative address.

@@table @@b
@@cindex assembler internal logic error
@@item ASSEMBLER-INTERNAL-LOGIC-ERROR!
An internal assembler logic error has been found.  This means there is a
bug in the assembler.

@@cindex expr (internal section)
@@item expr section
The assembler stores complex expression internally as combinations of
symbols.  When it needs to represent an expression as a symbol, it puts
it in the expr section.
@@c FIXME item debug
@@c FIXME item transfer[t] vector preload
@@c FIXME item transfer[t] vector postload
@@c FIXME item register
@@end table

@@node Sub-Sections
@@section Sub-Sections

@@cindex numbered subsections
@@cindex grouping data
@@ifset aout-bout
Assembled bytes
@@ifset COFF-ELF
conventionally
@@end ifset
fall into two sections: text and data.
@@end ifset
You may have separate groups of
@@ifset GENERIC
data in named sections
@@end ifset
@@ifclear GENERIC
@@ifclear aout-bout
data in named sections
@@end ifclear
@@ifset aout-bout
text or data
@@end ifset
@@end ifclear
that you want to end up near to each other in the object file, even though they
are not contiguous in the assembler source.  @@command{@@value{AS}} allows you to
use @@dfn{subsections} for this purpose.  Within each section, there can be
numbered subsections with values from 0 to 8192.  Objects assembled into the
same subsection go into the object file together with other objects in the same
subsection.  For example, a compiler might want to store constants in the text
section, but might not want to have them interspersed with the program being
assembled.  In this case, the compiler could issue a @@samp{.text 0} before each
section of code being output, and a @@samp{.text 1} before each group of
constants being output.

Subsections are optional.  If you do not use subsections, everything
goes in subsection number zero.

@@ifset GENERIC
Each subsection is zero-padded up to a multiple of four bytes.
(Subsections may be padded a different amount on different flavors
of @@command{@@value{AS}}.)
@@end ifset
@@ifclear GENERIC
@@ifset H8
On the H8/300 platform, each subsection is zero-padded to a word
boundary (two bytes).
The same is true on the Renesas SH.
@@end ifset
@@ifset I960
@@c FIXME section padding (alignment)?
@@c Rich Pixley says padding here depends on target obj code format; that
@@c doesn't seem particularly useful to say without further elaboration,
@@c so for now I say nothing about it.  If this is a generic BFD issue,
@@c these paragraphs might need to vanish from this manual, and be
@@c discussed in BFD chapter of binutils (or some such).
@@end ifset
@@end ifclear

Subsections appear in your object file in numeric order, lowest numbered
to highest.  (All this to be compatible with other people's assemblers.)
The object file contains no representation of subsections; @@code{@@value{LD}} and
other programs that manipulate object files see no trace of them.
They just see all your text subsections as a text section, and all your
data subsections as a data section.

To specify which subsection you want subsequent statements assembled
into, use a numeric argument to specify it, in a @@samp{.text
@@var{expression}} or a @@samp{.data @@var{expression}} statement.
@@ifset COFF
@@ifset GENERIC
When generating COFF output, you
@@end ifset
@@ifclear GENERIC
You
@@end ifclear
can also use an extra subsection
argument with arbitrary named sections: @@samp{.section @@var{name},
@@var{expression}}.
@@end ifset
@@ifset ELF
@@ifset GENERIC
When generating ELF output, you
@@end ifset
@@ifclear GENERIC
You
@@end ifclear
can also use the @@code{.subsection} directive (@@pxref{SubSection})
to specify a subsection: @@samp{.subsection @@var{expression}}.
@@end ifset
@@var{Expression} should be an absolute expression
(@@pxref{Expressions}).  If you just say @@samp{.text} then @@samp{.text 0}
is assumed.  Likewise @@samp{.data} means @@samp{.data 0}.  Assembly
begins in @@code{text 0}.  For instance:
@@smallexample
.text 0     # The default subsection is text 0 anyway.
.ascii "This lives in the first text subsection. *"
.text 1
.ascii "But this lives in the second text subsection."
.data 0
.ascii "This lives in the data section,"
.ascii "in the first data subsection."
.text 0
.ascii "This lives in the first text section,"
.ascii "immediately following the asterisk (*)."
@@end smallexample

Each section has a @@dfn{location counter} incremented by one for every byte
assembled into that section.  Because subsections are merely a convenience
restricted to @@command{@@value{AS}} there is no concept of a subsection location
counter.  There is no way to directly manipulate a location counter---but the
@@code{.align} directive changes it, and any label definition captures its
current value.  The location counter of the section where statements are being
assembled is said to be the @@dfn{active} location counter.

@@node bss
@@section bss Section

@@cindex bss section
@@cindex common variable storage
The bss section is used for local common variable storage.
You may allocate address space in the bss section, but you may
not dictate data to load into it before your program executes.  When
your program starts running, all the contents of the bss
section are zeroed bytes.

The @@code{.lcomm} pseudo-op defines a symbol in the bss section; see
@@ref{Lcomm,,@@code{.lcomm}}.

The @@code{.comm} pseudo-op may be used to declare a common symbol, which is
another form of uninitialized symbol; see @@ref{Comm,,@@code{.comm}}.

@@ifset GENERIC
When assembling for a target which supports multiple sections, such as ELF or
COFF, you may switch into the @@code{.bss} section and define symbols as usual;
see @@ref{Section,,@@code{.section}}.  You may only assemble zero values into the
section.  Typically the section will only contain symbol definitions and
@@code{.skip} directives (@@pxref{Skip,,@@code{.skip}}).
@@end ifset

@@node Symbols
@@chapter Symbols

@@cindex symbols
Symbols are a central concept: the programmer uses symbols to name
things, the linker uses symbols to link, and the debugger uses symbols
to debug.

@@quotation
@@cindex debuggers, and symbol order
@@emph{Warning:} @@command{@@value{AS}} does not place symbols in the object file in
the same order they were declared.  This may break some debuggers.
@@end quotation

@@menu
* Labels::                      Labels
* Setting Symbols::             Giving Symbols Other Values
* Symbol Names::                Symbol Names
* Dot::                         The Special Dot Symbol
* Symbol Attributes::           Symbol Attributes
@@end menu

@@node Labels
@@section Labels

@@cindex labels
A @@dfn{label} is written as a symbol immediately followed by a colon
@@samp{:}.  The symbol then represents the current value of the
active location counter, and is, for example, a suitable instruction
operand.  You are warned if you use the same symbol to represent two
different locations: the first definition overrides any other
definitions.

@@ifset HPPA
On the HPPA, the usual form for a label need not be immediately followed by a
colon, but instead must start in column zero.  Only one label may be defined on
a single line.  To work around this, the HPPA version of @@command{@@value{AS}} also
provides a special directive @@code{.label} for defining labels more flexibly.
@@end ifset

@@node Setting Symbols
@@section Giving Symbols Other Values

@@cindex assigning values to symbols
@@cindex symbol values, assigning
A symbol can be given an arbitrary value by writing a symbol, followed
by an equals sign @@samp{=}, followed by an expression
(@@pxref{Expressions}).  This is equivalent to using the @@code{.set}
directive.  @@xref{Set,,@@code{.set}}.  In the same way, using a double
equals sign @@samp{=}@@samp{=} here represents an equivalent of the
@@code{.eqv} directive.  @@xref{Eqv,,@@code{.eqv}}.

@@ifset Blackfin
Blackfin does not support symbol assignment with @@samp{=}.
@@end ifset

@@node Symbol Names
@@section Symbol Names

@@cindex symbol names
@@cindex names, symbol
@@ifclear SPECIAL-SYMS
Symbol names begin with a letter or with one of @@samp{._}.  On most
machines, you can also use @@code{$} in symbol names; exceptions are
noted in @@ref{Machine Dependencies}.  That character may be followed by any
string of digits, letters, dollar signs (unless otherwise noted for a
particular target machine), and underscores.
@@end ifclear
@@ifset SPECIAL-SYMS
@@ifset H8
Symbol names begin with a letter or with one of @@samp{._}.  On the
Renesas SH you can also use @@code{$} in symbol names.  That
character may be followed by any string of digits, letters, dollar signs (save
on the H8/300), and underscores.
@@end ifset
@@end ifset

Case of letters is significant: @@code{foo} is a different symbol name
than @@code{Foo}.

Multibyte characters are supported.  To generate a symbol name containing
multibyte characters enclose it within double quotes and use escape codes. cf
@@xref{Strings}.  Generating a multibyte symbol name from a label is not
currently supported.

Each symbol has exactly one name.  Each name in an assembly language program
refers to exactly one symbol.  You may use that symbol name any number of times
in a program.

@@subheading Local Symbol Names

@@cindex local symbol names
@@cindex symbol names, local
A local symbol is any symbol beginning with certain local label prefixes.
By default, the local label prefix is @@samp{.L} for ELF systems or
@@samp{L} for traditional a.out systems, but each target may have its own
set of local label prefixes.
@@ifset HPPA
On the HPPA local symbols begin with @@samp{L$}.
@@end ifset

Local symbols are defined and used within the assembler, but they are
normally not saved in object files.  Thus, they are not visible when debugging.
You may use the @@samp{-L} option (@@pxref{L, ,Include Local Symbols:
@@option{-L}}) to retain the local symbols in the object files.

@@subheading Local Labels

@@cindex local labels
@@cindex temporary symbol names
@@cindex symbol names, temporary
Local labels help compilers and programmers use names temporarily.
They create symbols which are guaranteed to be unique over the entire scope of
the input source code and which can be referred to by a simple notation.
To define a local label, write a label of the form @@samp{@@b{N}:} (where @@b{N}
represents any positive integer).  To refer to the most recent previous
definition of that label write @@samp{@@b{N}b}, using the same number as when
you defined the label.  To refer to the next definition of a local label, write
@@samp{@@b{N}f}---the @@samp{b} stands for ``backwards'' and the @@samp{f} stands
for ``forwards''.

There is no restriction on how you can use these labels, and you can reuse them
too.  So that it is possible to repeatedly define the same local label (using
the same number @@samp{@@b{N}}), although you can only refer to the most recently
defined local label of that number (for a backwards reference) or the next
definition of a specific local label for a forward reference.  It is also worth
noting that the first 10 local labels (@@samp{@@b{0:}}@@dots{}@@samp{@@b{9:}}) are
implemented in a slightly more efficient manner than the others.

Here is an example:

@@smallexample
1:        branch 1f
2:        branch 1b
1:        branch 2f
2:        branch 1b
@@end smallexample

Which is the equivalent of:

@@smallexample
label_1:  branch label_3
label_2:  branch label_1
label_3:  branch label_4
label_4:  branch label_3
@@end smallexample

Local label names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler uses them.
The symbol names are stored in the symbol table, appear in error messages, and
are optionally emitted to the object file.  The names are constructed using
these parts:

@@table @@code
@@item @@emph{local label prefix}
All local symbols begin with the system-specific local label prefix.
Normally both @@command{@@value{AS}} and @@code{@@value{LD}} forget symbols
that start with the local label prefix.  These labels are
used for symbols you are never intended to see.  If you use the
@@samp{-L} option then @@command{@@value{AS}} retains these symbols in the
object file. If you also instruct @@code{@@value{LD}} to retain these symbols,
you may use them in debugging.

@@item @@var{number}
This is the number that was used in the local label definition.  So if the
label is written @@samp{55:} then the number is @@samp{55}.

@@item @@kbd{C-B}
This unusual character is included so you do not accidentally invent a symbol
of the same name.  The character has ASCII value of @@samp{\002} (control-B).

@@item @@emph{ordinal number}
This is a serial number to keep the labels distinct.  The first definition of
@@samp{0:} gets the number @@samp{1}.  The 15th definition of @@samp{0:} gets the
number @@samp{15}, and so on.  Likewise the first definition of @@samp{1:} gets
the number @@samp{1} and its 15th definition gets @@samp{15} as well.
@@end table

So for example, the first @@code{1:} may be named @@code{.L1@@kbd{C-B}1}, and
the 44th @@code{3:} may be named @@code{.L3@@kbd{C-B}44}.

@@subheading Dollar Local Labels
@@cindex dollar local symbols

@@code{@@value{AS}} also supports an even more local form of local labels called
dollar labels.  These labels go out of scope (i.e., they become undefined) as
soon as a non-local label is defined.  Thus they remain valid for only a small
region of the input source code.  Normal local labels, by contrast, remain in
scope for the entire file, or until they are redefined by another occurrence of
the same local label.

Dollar labels are defined in exactly the same way as ordinary local labels,
except that they have a dollar sign suffix to their numeric value, e.g.,
@@samp{@@b{55$:}}.

They can also be distinguished from ordinary local labels by their transformed
names which use ASCII character @@samp{\001} (control-A) as the magic character
to distinguish them from ordinary labels.  For example, the fifth definition of
@@samp{6$} may be named @@samp{.L6@@kbd{C-A}5}.

@@node Dot
@@section The Special Dot Symbol

@@cindex dot (symbol)
@@cindex @@code{.} (symbol)
@@cindex current address
@@cindex location counter
The special symbol @@samp{.} refers to the current address that
@@command{@@value{AS}} is assembling into.  Thus, the expression @@samp{melvin:
.long .} defines @@code{melvin} to contain its own address.
Assigning a value to @@code{.} is treated the same as a @@code{.org}
directive.
@@ifclear no-space-dir
Thus, the expression @@samp{.=.+4} is the same as saying
@@samp{.space 4}.
@@end ifclear

@@node Symbol Attributes
@@section Symbol Attributes

@@cindex symbol attributes
@@cindex attributes, symbol
Every symbol has, as well as its name, the attributes ``Value'' and
``Type''.  Depending on output format, symbols can also have auxiliary
attributes.
@@ifset INTERNALS
The detailed definitions are in @@file{a.out.h}.
@@end ifset

If you use a symbol without defining it, @@command{@@value{AS}} assumes zero for
all these attributes, and probably won't warn you.  This makes the
symbol an externally defined symbol, which is generally what you
would want.

@@menu
* Symbol Value::                Value
* Symbol Type::                 Type
@@ifset aout-bout
@@ifset GENERIC
* a.out Symbols::               Symbol Attributes: @@code{a.out}
@@end ifset
@@ifclear GENERIC
@@ifclear BOUT
* a.out Symbols::               Symbol Attributes: @@code{a.out}
@@end ifclear
@@ifset BOUT
* a.out Symbols::               Symbol Attributes: @@code{a.out}, @@code{b.out}
@@end ifset
@@end ifclear
@@end ifset
@@ifset COFF
* COFF Symbols::                Symbol Attributes for COFF
@@end ifset
@@ifset SOM
* SOM Symbols::                Symbol Attributes for SOM
@@end ifset
@@end menu

@@node Symbol Value
@@subsection Value

@@cindex value of a symbol
@@cindex symbol value
The value of a symbol is (usually) 32 bits.  For a symbol which labels a
location in the text, data, bss or absolute sections the value is the
number of addresses from the start of that section to the label.
Naturally for text, data and bss sections the value of a symbol changes
as @@code{@@value{LD}} changes section base addresses during linking.  Absolute
symbols' values do not change during linking: that is why they are
called absolute.

The value of an undefined symbol is treated in a special way.  If it is
0 then the symbol is not defined in this assembler source file, and
@@code{@@value{LD}} tries to determine its value from other files linked into the
same program.  You make this kind of symbol simply by mentioning a symbol
name without defining it.  A non-zero value represents a @@code{.comm}
common declaration.  The value is how much common storage to reserve, in
bytes (addresses).  The symbol refers to the first address of the
allocated storage.

@@node Symbol Type
@@subsection Type

@@cindex type of a symbol
@@cindex symbol type
The type attribute of a symbol contains relocation (section)
information, any flag settings indicating that a symbol is external, and
(optionally), other information for linkers and debuggers.  The exact
format depends on the object-code output format in use.

@@ifset aout-bout
@@ifclear GENERIC
@@ifset BOUT
@@c The following avoids a "widow" subsection title.  @@group would be
@@c better if it were available outside examples.
@@need 1000
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}, @@code{b.out}

@@cindex @@code{b.out} symbol attributes
@@cindex symbol attributes, @@code{b.out}
These symbol attributes appear only when @@command{@@value{AS}} is configured for
one of the Berkeley-descended object output formats---@@code{a.out} or
@@code{b.out}.

@@end ifset
@@ifclear BOUT
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}

@@cindex @@code{a.out} symbol attributes
@@cindex symbol attributes, @@code{a.out}

@@end ifclear
@@end ifclear
@@ifset GENERIC
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}

@@cindex @@code{a.out} symbol attributes
@@cindex symbol attributes, @@code{a.out}

@@end ifset
@@menu
* Symbol Desc::                 Descriptor
* Symbol Other::                Other
@@end menu

@@node Symbol Desc
@@subsubsection Descriptor

@@cindex descriptor, of @@code{a.out} symbol
This is an arbitrary 16-bit value.  You may establish a symbol's
descriptor value by using a @@code{.desc} statement
(@@pxref{Desc,,@@code{.desc}}).  A descriptor value means nothing to
@@command{@@value{AS}}.

@@node Symbol Other
@@subsubsection Other

@@cindex other attribute, of @@code{a.out} symbol
This is an arbitrary 8-bit value.  It means nothing to @@command{@@value{AS}}.
@@end ifset

@@ifset COFF
@@node COFF Symbols
@@subsection Symbol Attributes for COFF

@@cindex COFF symbol attributes
@@cindex symbol attributes, COFF

The COFF format supports a multitude of auxiliary symbol attributes;
like the primary symbol attributes, they are set between @@code{.def} and
@@code{.endef} directives.

@@subsubsection Primary Attributes

@@cindex primary attributes, COFF symbols
The symbol name is set with @@code{.def}; the value and type,
respectively, with @@code{.val} and @@code{.type}.

@@subsubsection Auxiliary Attributes

@@cindex auxiliary attributes, COFF symbols
The @@command{@@value{AS}} directives @@code{.dim}, @@code{.line}, @@code{.scl},
@@code{.size}, @@code{.tag}, and @@code{.weak} can generate auxiliary symbol
table information for COFF.
@@end ifset

@@ifset SOM
@@node SOM Symbols
@@subsection Symbol Attributes for SOM

@@cindex SOM symbol attributes
@@cindex symbol attributes, SOM

The SOM format for the HPPA supports a multitude of symbol attributes set with
the @@code{.EXPORT} and @@code{.IMPORT} directives.

The attributes are described in @@cite{HP9000 Series 800 Assembly
Language Reference Manual} (HP 92432-90001) under the @@code{IMPORT} and
@@code{EXPORT} assembler directive documentation.
@@end ifset

@@node Expressions
@@chapter Expressions

@@cindex expressions
@@cindex addresses
@@cindex numeric values
An @@dfn{expression} specifies an address or numeric value.
Whitespace may precede and/or follow an expression.

The result of an expression must be an absolute number, or else an offset into
a particular section.  If an expression is not absolute, and there is not
enough information when @@command{@@value{AS}} sees the expression to know its
section, a second pass over the source program might be necessary to interpret
the expression---but the second pass is currently not implemented.
@@command{@@value{AS}} aborts with an error message in this situation.

@@menu
* Empty Exprs::                 Empty Expressions
* Integer Exprs::               Integer Expressions
@@end menu

@@node Empty Exprs
@@section Empty Expressions

@@cindex empty expressions
@@cindex expressions, empty
An empty expression has no value: it is just whitespace or null.
Wherever an absolute expression is required, you may omit the
expression, and @@command{@@value{AS}} assumes a value of (absolute) 0.  This
is compatible with other assemblers.

@@node Integer Exprs
@@section Integer Expressions

@@cindex integer expressions
@@cindex expressions, integer
An @@dfn{integer expression} is one or more @@emph{arguments} delimited
by @@emph{operators}.

@@menu
* Arguments::                   Arguments
* Operators::                   Operators
* Prefix Ops::                  Prefix Operators
* Infix Ops::                   Infix Operators
@@end menu

@@node Arguments
@@subsection Arguments

@@cindex expression arguments
@@cindex arguments in expressions
@@cindex operands in expressions
@@cindex arithmetic operands
@@dfn{Arguments} are symbols, numbers or subexpressions.  In other
contexts arguments are sometimes called ``arithmetic operands''.  In
this manual, to avoid confusing them with the ``instruction operands'' of
the machine language, we use the term ``argument'' to refer to parts of
expressions only, reserving the word ``operand'' to refer only to machine
instruction operands.

Symbols are evaluated to yield @@{@@var{section} @@var{NNN}@@} where
@@var{section} is one of text, data, bss, absolute,
or undefined.  @@var{NNN} is a signed, 2's complement 32 bit
integer.

Numbers are usually integers.

A number can be a flonum or bignum.  In this case, you are warned
that only the low order 32 bits are used, and @@command{@@value{AS}} pretends
these 32 bits are an integer.  You may write integer-manipulating
instructions that act on exotic constants, compatible with other
assemblers.

@@cindex subexpressions
Subexpressions are a left parenthesis @@samp{(} followed by an integer
expression, followed by a right parenthesis @@samp{)}; or a prefix
operator followed by an argument.

@@node Operators
@@subsection Operators

@@cindex operators, in expressions
@@cindex arithmetic functions
@@cindex functions, in expressions
@@dfn{Operators} are arithmetic functions, like @@code{+} or @@code{%}.  Prefix
operators are followed by an argument.  Infix operators appear
between their arguments.  Operators may be preceded and/or followed by
whitespace.

@@node Prefix Ops
@@subsection Prefix Operator

@@cindex prefix operators
@@command{@@value{AS}} has the following @@dfn{prefix operators}.  They each take
one argument, which must be absolute.

@@c the tex/end tex stuff surrounding this small table is meant to make
@@c it align, on the printed page, with the similar table in the next
@@c section (which is inside an enumerate).
@@tex
\global\advance\leftskip by \itemindent
@@end tex

@@table @@code
@@item -
@@dfn{Negation}.  Two's complement negation.
@@item ~
@@dfn{Complementation}.  Bitwise not.
@@end table

@@tex
\global\advance\leftskip by -\itemindent
@@end tex

@@node Infix Ops
@@subsection Infix Operators

@@cindex infix operators
@@cindex operators, permitted arguments
@@dfn{Infix operators} take two arguments, one on either side.  Operators
have precedence, but operations with equal precedence are performed left
to right.  Apart from @@code{+} or @@option{-}, both arguments must be
absolute, and the result is absolute.

@@enumerate
@@cindex operator precedence
@@cindex precedence of operators

@@item
Highest Precedence

@@table @@code
@@item *
@@dfn{Multiplication}.

@@item /
@@dfn{Division}.  Truncation is the same as the C operator @@samp{/}

@@item %
@@dfn{Remainder}.

@@item <<
@@dfn{Shift Left}.  Same as the C operator @@samp{<<}.

@@item >>
@@dfn{Shift Right}.  Same as the C operator @@samp{>>}.
@@end table

@@item
Intermediate precedence

@@table @@code
@@item |

@@dfn{Bitwise Inclusive Or}.

@@item &
@@dfn{Bitwise And}.

@@item ^
@@dfn{Bitwise Exclusive Or}.

@@item !
@@dfn{Bitwise Or Not}.
@@end table

@@item
Low Precedence

@@table @@code
@@cindex addition, permitted arguments
@@cindex plus, permitted arguments
@@cindex arguments for addition
@@item +
@@dfn{Addition}.  If either argument is absolute, the result has the section of
the other argument.  You may not add together arguments from different
sections.

@@cindex subtraction, permitted arguments
@@cindex minus, permitted arguments
@@cindex arguments for subtraction
@@item -
@@dfn{Subtraction}.  If the right argument is absolute, the
result has the section of the left argument.
If both arguments are in the same section, the result is absolute.
You may not subtract arguments from different sections.
@@c FIXME is there still something useful to say about undefined - undefined ?

@@cindex comparison expressions
@@cindex expressions, comparison
@@item  ==
@@dfn{Is Equal To}
@@item <>
@@itemx !=
@@dfn{Is Not Equal To}
@@item <
@@dfn{Is Less Than}
@@item >
@@dfn{Is Greater Than}
@@item >=
@@dfn{Is Greater Than Or Equal To}
@@item <=
@@dfn{Is Less Than Or Equal To}

The comparison operators can be used as infix operators.  A true results has a
value of -1 whereas a false result has a value of 0.   Note, these operators
perform signed comparisons.
@@end table

@@item Lowest Precedence

@@table @@code
@@item &&
@@dfn{Logical And}.

@@item ||
@@dfn{Logical Or}.

These two logical operations can be used to combine the results of sub
expressions.  Note, unlike the comparison operators a true result returns a
value of 1 but a false results does still return 0.  Also note that the logical
or operator has a slightly lower precedence than logical and.

@@end table
@@end enumerate

In short, it's only meaningful to add or subtract the @@emph{offsets} in an
address; you can only have a defined section in one of the two arguments.

@@node Pseudo Ops
@@chapter Assembler Directives

@@cindex directives, machine independent
@@cindex pseudo-ops, machine independent
@@cindex machine independent directives
All assembler directives have names that begin with a period (@@samp{.}).
The rest of the name is letters, usually in lower case.

This chapter discusses directives that are available regardless of the
target machine configuration for the @@sc{gnu} assembler.
@@ifset GENERIC
Some machine configurations provide additional directives.
@@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset machine-directives
@@xref{Machine Dependencies}, for additional directives.
@@end ifset
@@end ifclear

@@menu
* Abort::                       @@code{.abort}
@@ifset COFF
* ABORT (COFF)::                @@code{.ABORT}
@@end ifset

* Align::                       @@code{.align @@var{abs-expr} , @@var{abs-expr}}
* Altmacro::                    @@code{.altmacro}
* Ascii::                       @@code{.ascii "@@var{string}"}@@dots{}
* Asciz::                       @@code{.asciz "@@var{string}"}@@dots{}
* Balign::                      @@code{.balign @@var{abs-expr} , @@var{abs-expr}}
* Bundle directives::           @@code{.bundle_align_mode @@var{abs-expr}}, @@code{.bundle_lock}, @@code{.bundle_unlock}
* Byte::                        @@code{.byte @@var{expressions}}
* CFI directives::		@@code{.cfi_startproc [simple]}, @@code{.cfi_endproc}, etc.
* Comm::                        @@code{.comm @@var{symbol} , @@var{length} }
* Data::                        @@code{.data @@var{subsection}}
@@ifset COFF
* Def::                         @@code{.def @@var{name}}
@@end ifset
@@ifset aout-bout
* Desc::                        @@code{.desc @@var{symbol}, @@var{abs-expression}}
@@end ifset
@@ifset COFF
* Dim::                         @@code{.dim}
@@end ifset

* Double::                      @@code{.double @@var{flonums}}
* Eject::                       @@code{.eject}
* Else::                        @@code{.else}
* Elseif::                      @@code{.elseif}
* End::				@@code{.end}
@@ifset COFF
* Endef::                       @@code{.endef}
@@end ifset

* Endfunc::                     @@code{.endfunc}
* Endif::                       @@code{.endif}
* Equ::                         @@code{.equ @@var{symbol}, @@var{expression}}
* Equiv::                       @@code{.equiv @@var{symbol}, @@var{expression}}
* Eqv::                         @@code{.eqv @@var{symbol}, @@var{expression}}
* Err::				@@code{.err}
* Error::			@@code{.error @@var{string}}
* Exitm::			@@code{.exitm}
* Extern::                      @@code{.extern}
* Fail::			@@code{.fail}
* File::                        @@code{.file}
* Fill::                        @@code{.fill @@var{repeat} , @@var{size} , @@var{value}}
* Float::                       @@code{.float @@var{flonums}}
* Func::                        @@code{.func}
* Global::                      @@code{.global @@var{symbol}}, @@code{.globl @@var{symbol}}
@@ifset ELF
* Gnu_attribute::               @@code{.gnu_attribute @@var{tag},@@var{value}}
* Hidden::                      @@code{.hidden @@var{names}}
@@end ifset

* hword::                       @@code{.hword @@var{expressions}}
* Ident::                       @@code{.ident}
* If::                          @@code{.if @@var{absolute expression}}
* Incbin::                      @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}
* Include::                     @@code{.include "@@var{file}"}
* Int::                         @@code{.int @@var{expressions}}
@@ifset ELF
* Internal::                    @@code{.internal @@var{names}}
@@end ifset

* Irp::				@@code{.irp @@var{symbol},@@var{values}}@@dots{}
* Irpc::			@@code{.irpc @@var{symbol},@@var{values}}@@dots{}
* Lcomm::                       @@code{.lcomm @@var{symbol} , @@var{length}}
* Lflags::                      @@code{.lflags}
@@ifclear no-line-dir
* Line::                        @@code{.line @@var{line-number}}
@@end ifclear

* Linkonce::			@@code{.linkonce [@@var{type}]}
* List::                        @@code{.list}
* Ln::                          @@code{.ln @@var{line-number}}
* Loc::                         @@code{.loc @@var{fileno} @@var{lineno}}
* Loc_mark_labels::             @@code{.loc_mark_labels @@var{enable}}
@@ifset ELF
* Local::                       @@code{.local @@var{names}}
@@end ifset

* Long::                        @@code{.long @@var{expressions}}
@@ignore
* Lsym::                        @@code{.lsym @@var{symbol}, @@var{expression}}
@@end ignore

* Macro::			@@code{.macro @@var{name} @@var{args}}@@dots{}
* MRI::				@@code{.mri @@var{val}}
* Noaltmacro::                  @@code{.noaltmacro}
* Nolist::                      @@code{.nolist}
* Octa::                        @@code{.octa @@var{bignums}}
* Offset::			@@code{.offset @@var{loc}}
* Org::                         @@code{.org @@var{new-lc}, @@var{fill}}
* P2align::                     @@code{.p2align @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}
@@ifset ELF
* PopSection::                  @@code{.popsection}
* Previous::                    @@code{.previous}
@@end ifset

* Print::			@@code{.print @@var{string}}
@@ifset ELF
* Protected::                   @@code{.protected @@var{names}}
@@end ifset

* Psize::                       @@code{.psize @@var{lines}, @@var{columns}}
* Purgem::			@@code{.purgem @@var{name}}
@@ifset ELF
* PushSection::                 @@code{.pushsection @@var{name}}
@@end ifset

* Quad::                        @@code{.quad @@var{bignums}}
* Reloc::			@@code{.reloc @@var{offset}, @@var{reloc_name}[, @@var{expression}]}
* Rept::			@@code{.rept @@var{count}}
* Sbttl::                       @@code{.sbttl "@@var{subheading}"}
@@ifset COFF
* Scl::                         @@code{.scl @@var{class}}
@@end ifset
@@ifset COFF-ELF
* Section::                     @@code{.section @@var{name}[, @@var{flags}]}
@@end ifset

* Set::                         @@code{.set @@var{symbol}, @@var{expression}}
* Short::                       @@code{.short @@var{expressions}}
* Single::                      @@code{.single @@var{flonums}}
@@ifset COFF-ELF
* Size::                        @@code{.size [@@var{name} , @@var{expression}]}
@@end ifset
@@ifclear no-space-dir
* Skip::                        @@code{.skip @@var{size} , @@var{fill}}
@@end ifclear

* Sleb128::			@@code{.sleb128 @@var{expressions}}
@@ifclear no-space-dir
* Space::                       @@code{.space @@var{size} , @@var{fill}}
@@end ifclear
@@ifset have-stabs
* Stab::                        @@code{.stabd, .stabn, .stabs}
@@end ifset

* String::                      @@code{.string "@@var{str}"}, @@code{.string8 "@@var{str}"}, @@code{.string16 "@@var{str}"}, @@code{.string32 "@@var{str}"}, @@code{.string64 "@@var{str}"}
* Struct::			@@code{.struct @@var{expression}}
@@ifset ELF
* SubSection::                  @@code{.subsection}
* Symver::                      @@code{.symver @@var{name},@@var{name2@@@@nodename}}
@@end ifset

@@ifset COFF
* Tag::                         @@code{.tag @@var{structname}}
@@end ifset

* Text::                        @@code{.text @@var{subsection}}
* Title::                       @@code{.title "@@var{heading}"}
@@ifset COFF-ELF
* Type::                        @@code{.type <@@var{int} | @@var{name} , @@var{type description}>}
@@end ifset

* Uleb128::                     @@code{.uleb128 @@var{expressions}}
@@ifset COFF
* Val::                         @@code{.val @@var{addr}}
@@end ifset

@@ifset ELF
* Version::                     @@code{.version "@@var{string}"}
* VTableEntry::                 @@code{.vtable_entry @@var{table}, @@var{offset}}
* VTableInherit::               @@code{.vtable_inherit @@var{child}, @@var{parent}}
@@end ifset

* Warning::			@@code{.warning @@var{string}}
* Weak::                        @@code{.weak @@var{names}}
* Weakref::                     @@code{.weakref @@var{alias}, @@var{symbol}}
* Word::                        @@code{.word @@var{expressions}}
* Deprecated::                  Deprecated Directives
@@end menu

@@node Abort
@@section @@code{.abort}

@@cindex @@code{abort} directive
@@cindex stopping the assembly
This directive stops the assembly immediately.  It is for
compatibility with other assemblers.  The original idea was that the
assembly language source would be piped into the assembler.  If the sender
of the source quit, it could use this directive tells @@command{@@value{AS}} to
quit also.  One day @@code{.abort} will not be supported.

@@ifset COFF
@@node ABORT (COFF)
@@section @@code{.ABORT} (COFF)

@@cindex @@code{ABORT} directive
When producing COFF output, @@command{@@value{AS}} accepts this directive as a
synonym for @@samp{.abort}.

@@ifset BOUT
When producing @@code{b.out} output, @@command{@@value{AS}} accepts this directive,
but ignores it.
@@end ifset
@@end ifset

@@node Align
@@section @@code{.align @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter
@@cindex @@code{align} directive
Pad the location counter (in the current subsection) to a particular storage
boundary.  The first expression (which must be absolute) is the alignment
required, as described below.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

The way the required alignment is specified varies from system to system.
For the arc, hppa, i386 using ELF, i860, iq2000, m68k, or32,
s390, sparc, tic4x, tic80 and xtensa, the first expression is the
alignment request in bytes.  For example @@samp{.align 8} advances
the location counter until it is a multiple of 8.  If the location counter
is already a multiple of 8, no change is needed.  For the tic54x, the
first expression is the alignment request in words.

For other systems, including ppc, i386 using a.out format, arm and
strongarm, it is the
number of low-order zero bits the location counter must have after
advancement.  For example @@samp{.align 3} advances the location
counter until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

This inconsistency is due to the different behaviors of the various
native assemblers for these systems which GAS must emulate.
GAS also provides @@code{.balign} and @@code{.p2align} directives,
described later, which have a consistent behavior across all
architectures (but are specific to GAS).

@@node Altmacro
@@section @@code{.altmacro}
Enable alternate macro mode, enabling:

@@ftable @@code
@@item LOCAL @@var{name} [ , @@dots{} ]
One additional directive, @@code{LOCAL}, is available.  It is used to
generate a string replacement for each of the @@var{name} arguments, and
replace any instances of @@var{name} in each macro expansion.  The
replacement string is unique in the assembly, and different for each
separate macro expansion.  @@code{LOCAL} allows you to write macros that
define symbols, without fear of conflict between separate macro expansions.

@@item String delimiters
You can write strings delimited in these other ways besides
@@code{"@@var{string}"}:

@@table @@code
@@item '@@var{string}'
You can delimit strings with single-quote characters.

@@item <@@var{string}>
You can delimit strings with matching angle brackets.
@@end table

@@item single-character string escape
To include any single character literally in a string (even if the
character would otherwise have some special meaning), you can prefix the
character with @@samp{!} (an exclamation mark).  For example, you can
write @@samp{<4.3 !> 5.4!!>} to get the literal text @@samp{4.3 > 5.4!}.

@@item Expression results as strings
You can write @@samp{%@@var{expr}} to evaluate the expression @@var{expr}
and use the result as a string.
@@end ftable

@@node Ascii
@@section @@code{.ascii "@@var{string}"}@@dots{}

@@cindex @@code{ascii} directive
@@cindex string literals
@@code{.ascii} expects zero or more string literals (@@pxref{Strings})
separated by commas.  It assembles each string (with no automatic
trailing zero byte) into consecutive addresses.

@@node Asciz
@@section @@code{.asciz "@@var{string}"}@@dots{}

@@cindex @@code{asciz} directive
@@cindex zero-terminated strings
@@cindex null-terminated strings
@@code{.asciz} is just like @@code{.ascii}, but each string is followed by
a zero byte.  The ``z'' in @@samp{.asciz} stands for ``zero''.

@@node Balign
@@section @@code{.balign[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter given number of bytes
@@cindex @@code{balign} directive
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment request in bytes.  For example @@samp{.balign 8} advances
the location counter until it is a multiple of 8.  If the location counter
is already a multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@@cindex @@code{balignw} directive
@@cindex @@code{balignl} directive
The @@code{.balignw} and @@code{.balignl} directives are variants of the
@@code{.balign} directive.  The @@code{.balignw} directive treats the fill
pattern as a two byte word value.  The @@code{.balignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.balignw
4,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@@node Bundle directives
@@section @@code{.bundle_align_mode @@var{abs-expr}}
@@cindex @@code{bundle_align_mode} directive
@@cindex bundle
@@cindex instruction bundle
@@cindex aligned instruction bundle
@@code{.bundle_align_mode} enables or disables @@dfn{aligned instruction
bundle} mode.  In this mode, sequences of adjacent instructions are grouped
into fixed-sized @@dfn{bundles}.  If the argument is zero, this mode is
disabled (which is the default state).  If the argument it not zero, it
gives the size of an instruction bundle as a power of two (as for the
@@code{.p2align} directive, @@pxref{P2align}).

For some targets, it's an ABI requirement that no instruction may span a
certain aligned boundary.  A @@dfn{bundle} is simply a sequence of
instructions that starts on an aligned boundary.  For example, if
@@var{abs-expr} is @@code{5} then the bundle size is 32, so each aligned
chunk of 32 bytes is a bundle.  When aligned instruction bundle mode is in
effect, no single instruction may span a boundary between bundles.  If an
instruction would start too close to the end of a bundle for the length of
that particular instruction to fit within the bundle, then the space at the
end of that bundle is filled with no-op instructions so the instruction
starts in the next bundle.  As a corollary, it's an error if any single
instruction's encoding is longer than the bundle size.

@@section @@code{.bundle_lock} and @@code{.bundle_unlock}
@@cindex @@code{bundle_lock} directive
@@cindex @@code{bundle_unlock} directive
The @@code{.bundle_lock} and directive @@code{.bundle_unlock} directives
allow explicit control over instruction bundle padding.  These directives
are only valid when @@code{.bundle_align_mode} has been used to enable
aligned instruction bundle mode.  It's an error if they appear when
@@code{.bundle_align_mode} has not been used at all, or when the last
directive was @@w{@@code{.bundle_align_mode 0}}.

@@cindex bundle-locked
For some targets, it's an ABI requirement that certain instructions may
appear only as part of specified permissible sequences of multiple
instructions, all within the same bundle.  A pair of @@code{.bundle_lock}
and @@code{.bundle_unlock} directives define a @@dfn{bundle-locked}
instruction sequence.  For purposes of aligned instruction bundle mode, a
sequence starting with @@code{.bundle_lock} and ending with
@@code{.bundle_unlock} is treated as a single instruction.  That is, the
entire sequence must fit into a single bundle and may not span a bundle
boundary.  If necessary, no-op instructions will be inserted before the
first instruction of the sequence so that the whole sequence starts on an
aligned bundle boundary.  It's an error if the sequence is longer than the
bundle size.

For convenience when using @@code{.bundle_lock} and @@code{.bundle_unlock}
inside assembler macros (@@pxref{Macro}), bundle-locked sequences may be
nested.  That is, a second @@code{.bundle_lock} directive before the next
@@code{.bundle_unlock} directive has no effect except that it must be
matched by another closing @@code{.bundle_unlock} so that there is the
same number of @@code{.bundle_lock} and @@code{.bundle_unlock} directives.

@@node Byte
@@section @@code{.byte @@var{expressions}}

@@cindex @@code{byte} directive
@@cindex integers, one byte
@@code{.byte} expects zero or more expressions, separated by commas.
Each expression is assembled into the next byte.

@@node CFI directives
@@section @@code{.cfi_sections @@var{section_list}}
@@cindex @@code{cfi_sections} directive
@@code{.cfi_sections} may be used to specify whether CFI directives
should emit @@code{.eh_frame} section and/or @@code{.debug_frame} section.
If @@var{section_list} is @@code{.eh_frame}, @@code{.eh_frame} is emitted,
if @@var{section_list} is @@code{.debug_frame}, @@code{.debug_frame} is emitted.
To emit both use @@code{.eh_frame, .debug_frame}.  The default if this
directive is not used is @@code{.cfi_sections .eh_frame}.

@@section @@code{.cfi_startproc [simple]}
@@cindex @@code{cfi_startproc} directive
@@code{.cfi_startproc} is used at the beginning of each function that
should have an entry in @@code{.eh_frame}. It initializes some internal
data structures. Don't forget to close the function by
@@code{.cfi_endproc}.

Unless @@code{.cfi_startproc} is used along with parameter @@code{simple}
it also emits some architecture dependent initial CFI instructions.

@@section @@code{.cfi_endproc}
@@cindex @@code{cfi_endproc} directive
@@code{.cfi_endproc} is used at the end of a function where it closes its
unwind entry previously opened by
@@code{.cfi_startproc}, and emits it to @@code{.eh_frame}.

@@section @@code{.cfi_personality @@var{encoding} [, @@var{exp}]}
@@code{.cfi_personality} defines personality routine and its encoding.
@@var{encoding} must be a constant determining how the personality
should be encoded.  If it is 255 (@@code{DW_EH_PE_omit}), second
argument is not present, otherwise second argument should be
a constant or a symbol name.  When using indirect encodings,
the symbol provided should be the location where personality
can be loaded from, not the personality routine itself.
The default after @@code{.cfi_startproc} is @@code{.cfi_personality 0xff},
no personality routine.

@@section @@code{.cfi_lsda @@var{encoding} [, @@var{exp}]}
@@code{.cfi_lsda} defines LSDA and its encoding.
@@var{encoding} must be a constant determining how the LSDA
should be encoded.  If it is 255 (@@code{DW_EH_PE_omit}), second
argument is not present, otherwise second argument should be a constant
or a symbol name.  The default after @@code{.cfi_startproc} is @@code{.cfi_lsda 0xff},
no LSDA.

@@section @@code{.cfi_def_cfa @@var{register}, @@var{offset}}
@@code{.cfi_def_cfa} defines a rule for computing CFA as: @@i{take
address from @@var{register} and add @@var{offset} to it}.

@@section @@code{.cfi_def_cfa_register @@var{register}}
@@code{.cfi_def_cfa_register} modifies a rule for computing CFA. From
now on @@var{register} will be used instead of the old one. Offset
remains the same.

@@section @@code{.cfi_def_cfa_offset @@var{offset}}
@@code{.cfi_def_cfa_offset} modifies a rule for computing CFA. Register
remains the same, but @@var{offset} is new. Note that it is the
absolute offset that will be added to a defined register to compute
CFA address.

@@section @@code{.cfi_adjust_cfa_offset @@var{offset}}
Same as @@code{.cfi_def_cfa_offset} but @@var{offset} is a relative
value that is added/substracted from the previous offset.

@@section @@code{.cfi_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
CFA.

@@section @@code{.cfi_rel_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
the current CFA register.  This is transformed to @@code{.cfi_offset}
using the known displacement of the CFA register from the CFA.
This is often easier to use, because the number will match the
code it's annotating.

@@section @@code{.cfi_register @@var{register1}, @@var{register2}}
Previous value of @@var{register1} is saved in register @@var{register2}.

@@section @@code{.cfi_restore @@var{register}}
@@code{.cfi_restore} says that the rule for @@var{register} is now the
same as it was at the beginning of the function, after all initial
instruction added by @@code{.cfi_startproc} were executed.

@@section @@code{.cfi_undefined @@var{register}}
From now on the previous value of @@var{register} can't be restored anymore.

@@section @@code{.cfi_same_value @@var{register}}
Current value of @@var{register} is the same like in the previous frame,
i.e. no restoration needed.

@@section @@code{.cfi_remember_state},
First save all current rules for all registers by @@code{.cfi_remember_state},
then totally screw them up by subsequent @@code{.cfi_*} directives and when
everything is hopelessly bad, use @@code{.cfi_restore_state} to restore
the previous saved state.

@@section @@code{.cfi_return_column @@var{register}}
Change return column @@var{register}, i.e. the return address is either
directly in @@var{register} or can be accessed by rules for @@var{register}.

@@section @@code{.cfi_signal_frame}
Mark current function as signal trampoline.

@@section @@code{.cfi_window_save}
SPARC register window has been saved.

@@section @@code{.cfi_escape} @@var{expression}[, @@dots{}]
Allows the user to add arbitrary bytes to the unwind info.  One
might use this to add OS-specific CFI opcodes, or generic CFI
opcodes that GAS does not yet support.

@@section @@code{.cfi_val_encoded_addr @@var{register}, @@var{encoding}, @@var{label}}
The current value of @@var{register} is @@var{label}.  The value of @@var{label}
will be encoded in the output file according to @@var{encoding}; see the
description of @@code{.cfi_personality} for details on this encoding.

The usefulness of equating a register to a fixed label is probably
limited to the return address register.  Here, it can be useful to
mark a code segment that has only one return address which is reached
by a direct branch and no copy of the return address exists in memory
or another register.

@@node Comm
@@section @@code{.comm @@var{symbol} , @@var{length} }

@@cindex @@code{comm} directive
@@cindex symbol, common
@@code{.comm} declares a common symbol named @@var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If @@code{@@value{LD}} does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @@var{length} bytes of uninitialized memory.  @@var{length} must be an
absolute expression.  If @@code{@@value{LD}} sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

@@ifset COFF-ELF
When using ELF or (as a GNU extension) PE, the @@code{.comm} directive takes
an optional third argument.  This is the desired alignment of the symbol,
specified for ELF as a byte boundary (for example, an alignment of 16 means
that the least significant 4 bits of the address should be zero), and for PE
as a power of two (for example, an alignment of 5 means aligned to a 32-byte
boundary).  The alignment must be an absolute expression, and it must be a
power of two.  If @@code{@@value{LD}} allocates uninitialized memory for the
common symbol, it will use the alignment when placing the symbol.  If no
alignment is specified, @@command{@@value{AS}} will set the alignment to the
largest power of two less than or equal to the size of the symbol, up to a
maximum of 16 on ELF, or the default section alignment of 4 on PE@@footnote{This
is not the same as the executable image file alignment controlled by @@code{@@value{LD}}'s
@@samp{--section-alignment} option; image file sections in PE are aligned to
multiples of 4096, which is far too large an alignment for ordinary variables.
It is rather the default alignment for (non-debug) sections within object
(@@samp{*.o}) files, which are less strictly aligned.}.
@@end ifset

@@ifset HPPA
The syntax for @@code{.comm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .comm, @@var{length}}; @@var{symbol} is optional.
@@end ifset

@@node Data
@@section @@code{.data @@var{subsection}}

@@cindex @@code{data} directive
@@code{.data} tells @@command{@@value{AS}} to assemble the following statements onto the
end of the data subsection numbered @@var{subsection} (which is an
absolute expression).  If @@var{subsection} is omitted, it defaults
to zero.

@@ifset COFF
@@node Def
@@section @@code{.def @@var{name}}

@@cindex @@code{def} directive
@@cindex COFF symbols, debugging
@@cindex debugging COFF symbols
Begin defining debugging information for a symbol @@var{name}; the
definition extends until the @@code{.endef} directive is encountered.
@@ifset BOUT

This directive is only observed when @@command{@@value{AS}} is configured for COFF
format output; when producing @@code{b.out}, @@samp{.def} is recognized,
but ignored.
@@end ifset
@@end ifset

@@ifset aout-bout
@@node Desc
@@section @@code{.desc @@var{symbol}, @@var{abs-expression}}

@@cindex @@code{desc} directive
@@cindex COFF symbol descriptor
@@cindex symbol descriptor, COFF
This directive sets the descriptor of the symbol (@@pxref{Symbol Attributes})
to the low 16 bits of an absolute expression.

@@ifset COFF
The @@samp{.desc} directive is not available when @@command{@@value{AS}} is
configured for COFF output; it is only for @@code{a.out} or @@code{b.out}
object format.  For the sake of compatibility, @@command{@@value{AS}} accepts
it, but produces no output, when configured for COFF.
@@end ifset
@@end ifset

@@ifset COFF
@@node Dim
@@section @@code{.dim}

@@cindex @@code{dim} directive
@@cindex COFF auxiliary symbol information
@@cindex auxiliary symbol information, COFF
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.
@@ifset BOUT

@@samp{.dim} is only meaningful when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@node Double
@@section @@code{.double @@var{flonums}}

@@cindex @@code{double} directive
@@cindex floating point numbers (double)
@@code{.double} expects zero or more flonums, separated by commas.  It
assembles floating point numbers.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family @@samp{.double} emits 64-bit floating-point numbers
in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@node Eject
@@section @@code{.eject}

@@cindex @@code{eject} directive
@@cindex new page, in listings
@@cindex page, in listings
@@cindex listing control: new page
Force a page break at this point, when generating assembly listings.

@@node Else
@@section @@code{.else}

@@cindex @@code{else} directive
@@code{.else} is part of the @@command{@@value{AS}} support for conditional
assembly; see @@ref{If,,@@code{.if}}.  It marks the beginning of a section
of code to be assembled if the condition for the preceding @@code{.if}
was false.

@@node Elseif
@@section @@code{.elseif}

@@cindex @@code{elseif} directive
@@code{.elseif} is part of the @@command{@@value{AS}} support for conditional
assembly; see @@ref{If,,@@code{.if}}.  It is shorthand for beginning a new
@@code{.if} block that would otherwise fill the entire @@code{.else} section.

@@node End
@@section @@code{.end}

@@cindex @@code{end} directive
@@code{.end} marks the end of the assembly file.  @@command{@@value{AS}} does not
process anything in the file past the @@code{.end} directive.

@@ifset COFF
@@node Endef
@@section @@code{.endef}

@@cindex @@code{endef} directive
This directive flags the end of a symbol definition begun with
@@code{.def}.
@@ifset BOUT

@@samp{.endef} is only meaningful when generating COFF format output; if
@@command{@@value{AS}} is configured to generate @@code{b.out}, it accepts this
directive but ignores it.
@@end ifset
@@end ifset

@@node Endfunc
@@section @@code{.endfunc}
@@cindex @@code{endfunc} directive
@@code{.endfunc} marks the end of a function specified with @@code{.func}.

@@node Endif
@@section @@code{.endif}

@@cindex @@code{endif} directive
@@code{.endif} is part of the @@command{@@value{AS}} support for conditional assembly;
it marks the end of a block of code that is only assembled
conditionally.  @@xref{If,,@@code{.if}}.

@@node Equ
@@section @@code{.equ @@var{symbol}, @@var{expression}}

@@cindex @@code{equ} directive
@@cindex assigning values to symbols
@@cindex symbols, assigning values to
This directive sets the value of @@var{symbol} to @@var{expression}.
It is synonymous with @@samp{.set}; see @@ref{Set,,@@code{.set}}.

@@ifset HPPA
The syntax for @@code{equ} on the HPPA is
@@samp{@@var{symbol} .equ @@var{expression}}.
@@end ifset

@@ifset Z80
The syntax for @@code{equ} on the Z80 is
@@samp{@@var{symbol} equ @@var{expression}}.
On the Z80 it is an eror if @@var{symbol} is already defined,
but the symbol is not protected from later redefinition.
Compare @@ref{Equiv}.
@@end ifset

@@node Equiv
@@section @@code{.equiv @@var{symbol}, @@var{expression}}
@@cindex @@code{equiv} directive
The @@code{.equiv} directive is like @@code{.equ} and @@code{.set}, except that
the assembler will signal an error if @@var{symbol} is already defined.  Note a
symbol which has been referenced but not actually defined is considered to be
undefined.

Except for the contents of the error message, this is roughly equivalent to
@@smallexample
.ifdef SYM
.err
.endif
.equ SYM,VAL
@@end smallexample
plus it protects the symbol from later redefinition.

@@node Eqv
@@section @@code{.eqv @@var{symbol}, @@var{expression}}
@@cindex @@code{eqv} directive
The @@code{.eqv} directive is like @@code{.equiv}, but no attempt is made to
evaluate the expression or any part of it immediately.  Instead each time
the resulting symbol is used in an expression, a snapshot of its current
value is taken.

@@node Err
@@section @@code{.err}
@@cindex @@code{err} directive
If @@command{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@option{-Z} option was used, it will not generate an
object file.  This can be used to signal an error in conditionally compiled code.

@@node Error
@@section @@code{.error "@@var{string}"}
@@cindex error directive

Similarly to @@code{.err}, this directive emits an error, but you can specify a
string that will be emitted as the error message.  If you don't specify the
message, it defaults to @@code{".error directive invoked in source file"}.
@@xref{Errors, ,Error and Warning Messages}.

@@smallexample
 .error "This code has not been assembled and tested."
@@end smallexample

@@node Exitm
@@section @@code{.exitm}
Exit early from the current macro definition.  @@xref{Macro}.

@@node Extern
@@section @@code{.extern}

@@cindex @@code{extern} directive
@@code{.extern} is accepted in the source program---for compatibility
with other assemblers---but it is ignored.  @@command{@@value{AS}} treats
all undefined symbols as external.

@@node Fail
@@section @@code{.fail @@var{expression}}

@@cindex @@code{fail} directive
Generates an error or a warning.  If the value of the @@var{expression} is 500
or more, @@command{@@value{AS}} will print a warning message.  If the value is less
than 500, @@command{@@value{AS}} will print an error message.  The message will
include the value of @@var{expression}.  This can occasionally be useful inside
complex nested macros or conditional assembly.

@@node File
@@section @@code{.file}
@@cindex @@code{file} directive

@@ifclear no-file-dir
There are two different versions of the @@code{.file} directive.  Targets
that support DWARF2 line number information use the DWARF2 version of
@@code{.file}.  Other targets use the default version.

@@subheading Default Version

@@cindex logical file name
@@cindex file name, logical
This version of the @@code{.file} directive tells @@command{@@value{AS}} that we
are about to start a new logical file.  The syntax is:

@@smallexample
.file @@var{string}
@@end smallexample

@@var{string} is the new file name.  In general, the filename is
recognized whether or not it is surrounded by quotes @@samp{"}; but if you wish
to specify an empty file name, you must give the quotes--@@code{""}.  This
statement may go away in future: it is only recognized to be compatible with
old @@command{@@value{AS}} programs.

@@subheading DWARF2 Version
@@end ifclear

When emitting DWARF2 line number information, @@code{.file} assigns filenames
to the @@code{.debug_line} file name table.  The syntax is:

@@smallexample
.file @@var{fileno} @@var{filename}
@@end smallexample

The @@var{fileno} operand should be a unique positive integer to use as the
index of the entry in the table.  The @@var{filename} operand is a C string
literal.

The detail of filename indices is exposed to the user because the filename
table is shared with the @@code{.debug_info} section of the DWARF2 debugging
information, and thus the user must know the exact indices that table
entries will have.

@@node Fill
@@section @@code{.fill @@var{repeat} , @@var{size} , @@var{value}}

@@cindex @@code{fill} directive
@@cindex writing patterns in memory
@@cindex patterns, writing in memory
@@var{repeat}, @@var{size} and @@var{value} are absolute expressions.
This emits @@var{repeat} copies of @@var{size} bytes.  @@var{Repeat}
may be zero or more.  @@var{Size} may be zero or more, but if it is
more than 8, then it is deemed to have the value 8, compatible with
other people's assemblers.  The contents of each @@var{repeat} bytes
is taken from an 8-byte number.  The highest order 4 bytes are
zero.  The lowest order 4 bytes are @@var{value} rendered in the
byte-order of an integer on the computer @@command{@@value{AS}} is assembling for.
Each @@var{size} bytes in a repetition is taken from the lowest order
@@var{size} bytes of this number.  Again, this bizarre behavior is
compatible with other people's assemblers.

@@var{size} and @@var{value} are optional.
If the second comma and @@var{value} are absent, @@var{value} is
assumed zero.  If the first comma and following tokens are absent,
@@var{size} is assumed to be 1.

@@node Float
@@section @@code{.float @@var{flonums}}

@@cindex floating point numbers (single)
@@cindex @@code{float} directive
This directive assembles zero or more flonums, separated by commas.  It
has the same effect as @@code{.single}.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.
@@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family, @@code{.float} emits 32-bit floating point numbers
in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@node Func
@@section @@code{.func @@var{name}[,@@var{label}]}
@@cindex @@code{func} directive
@@code{.func} emits debugging information to denote function @@var{name}, and
is ignored unless the file is assembled with debugging enabled.
Only @@samp{--gstabs[+]} is currently supported.
@@var{label} is the entry point of the function and if omitted @@var{name}
prepended with the @@samp{leading char} is used.
@@samp{leading char} is usually @@code{_} or nothing, depending on the target.
All functions are currently defined to have @@code{void} return type.
The function must be terminated with @@code{.endfunc}.

@@node Global
@@section @@code{.global @@var{symbol}}, @@code{.globl @@var{symbol}}

@@cindex @@code{global} directive
@@cindex symbol, making visible to linker
@@code{.global} makes the symbol visible to @@code{@@value{LD}}.  If you define
@@var{symbol} in your partial program, its value is made available to
other partial programs that are linked with it.  Otherwise,
@@var{symbol} takes its attributes from a symbol of the same name
from another file linked into the same program.

Both spellings (@@samp{.globl} and @@samp{.global}) are accepted, for
compatibility with other assemblers.

@@ifset HPPA
On the HPPA, @@code{.global} is not always enough to make it accessible to other
partial programs.  You may need the HPPA-only @@code{.EXPORT} directive as well.
@@xref{HPPA Directives, ,HPPA Assembler Directives}.
@@end ifset

@@ifset ELF
@@node Gnu_attribute
@@section @@code{.gnu_attribute @@var{tag},@@var{value}}
Record a @@sc{gnu} object attribute for this file.  @@xref{Object Attributes}.

@@node Hidden
@@section @@code{.hidden @@var{names}}

@@cindex @@code{hidden} directive
@@cindex visibility
This is one of the ELF visibility directives.  The other two are
@@code{.internal} (@@pxref{Internal,,@@code{.internal}}) and
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{hidden} which means that the symbols are not visible to other components.
Such symbols are always considered to be @@code{protected} as well.
@@end ifset

@@node hword
@@section @@code{.hword @@var{expressions}}

@@cindex @@code{hword} directive
@@cindex integers, 16-bit
@@cindex numbers, 16-bit
@@cindex sixteen bit integers
This expects zero or more @@var{expressions}, and emits
a 16 bit number for each.

@@ifset GENERIC
This directive is a synonym for @@samp{.short}; depending on the target
architecture, it may also be a synonym for @@samp{.word}.
@@end ifset
@@ifclear GENERIC
@@ifset W32
This directive is a synonym for @@samp{.short}.
@@end ifset
@@ifset W16
This directive is a synonym for both @@samp{.short} and @@samp{.word}.
@@end ifset
@@end ifclear

@@node Ident
@@section @@code{.ident}

@@cindex @@code{ident} directive

This directive is used by some assemblers to place tags in object files.  The
behavior of this directive varies depending on the target.  When using the
a.out object file format, @@command{@@value{AS}} simply accepts the directive for
source-file compatibility with existing assemblers, but does not emit anything
for it.  When using COFF, comments are emitted to the @@code{.comment} or
@@code{.rdata} section, depending on the target.  When using ELF, comments are
emitted to the @@code{.comment} section.

@@node If
@@section @@code{.if @@var{absolute expression}}

@@cindex conditional assembly
@@cindex @@code{if} directive
@@code{.if} marks the beginning of a section of code which is only
considered part of the source program being assembled if the argument
(which must be an @@var{absolute expression}) is non-zero.  The end of
the conditional section of code must be marked by @@code{.endif}
(@@pxref{Endif,,@@code{.endif}}); optionally, you may include code for the
alternative condition, flagged by @@code{.else} (@@pxref{Else,,@@code{.else}}).
If you have several conditions to check, @@code{.elseif} may be used to avoid
nesting blocks if/else within each subsequent @@code{.else} block.

The following variants of @@code{.if} are also supported:
@@table @@code
@@cindex @@code{ifdef} directive
@@item .ifdef @@var{symbol}
Assembles the following section of code if the specified @@var{symbol}
has been defined.  Note a symbol which has been referenced but not yet defined
is considered to be undefined.

@@cindex @@code{ifb} directive
@@item .ifb @@var{text}
Assembles the following section of code if the operand is blank (empty).

@@cindex @@code{ifc} directive
@@item .ifc @@var{string1},@@var{string2}
Assembles the following section of code if the two strings are the same.  The
strings may be optionally quoted with single quotes.  If they are not quoted,
the first string stops at the first comma, and the second string stops at the
end of the line.  Strings which contain whitespace should be quoted.  The
string comparison is case sensitive.

@@cindex @@code{ifeq} directive
@@item .ifeq @@var{absolute expression}
Assembles the following section of code if the argument is zero.

@@cindex @@code{ifeqs} directive
@@item .ifeqs @@var{string1},@@var{string2}
Another form of @@code{.ifc}.  The strings must be quoted using double quotes.

@@cindex @@code{ifge} directive
@@item .ifge @@var{absolute expression}
Assembles the following section of code if the argument is greater than or
equal to zero.

@@cindex @@code{ifgt} directive
@@item .ifgt @@var{absolute expression}
Assembles the following section of code if the argument is greater than zero.

@@cindex @@code{ifle} directive
@@item .ifle @@var{absolute expression}
Assembles the following section of code if the argument is less than or equal
to zero.

@@cindex @@code{iflt} directive
@@item .iflt @@var{absolute expression}
Assembles the following section of code if the argument is less than zero.

@@cindex @@code{ifnb} directive
@@item .ifnb @@var{text}
Like @@code{.ifb}, but the sense of the test is reversed: this assembles the
following section of code if the operand is non-blank (non-empty).

@@cindex @@code{ifnc} directive
@@item .ifnc @@var{string1},@@var{string2}.
Like @@code{.ifc}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.

@@cindex @@code{ifndef} directive
@@cindex @@code{ifnotdef} directive
@@item .ifndef @@var{symbol}
@@itemx .ifnotdef @@var{symbol}
Assembles the following section of code if the specified @@var{symbol}
has not been defined.  Both spelling variants are equivalent.  Note a symbol
which has been referenced but not yet defined is considered to be undefined.

@@cindex @@code{ifne} directive
@@item .ifne @@var{absolute expression}
Assembles the following section of code if the argument is not equal to zero
(in other words, this is equivalent to @@code{.if}).

@@cindex @@code{ifnes} directive
@@item .ifnes @@var{string1},@@var{string2}
Like @@code{.ifeqs}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.
@@end table

@@node Incbin
@@section @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}

@@cindex @@code{incbin} directive
@@cindex binary files, including
The @@code{incbin} directive includes @@var{file} verbatim at the current
location. You can control the search paths used with the @@samp{-I} command-line
option (@@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @@var{file}.

The @@var{skip} argument skips a number of bytes from the start of the
@@var{file}.  The @@var{count} argument indicates the maximum number of bytes to
read.  Note that the data is not aligned in any way, so it is the user's
responsibility to make sure that proper alignment is provided both before and
after the @@code{incbin} directive.

@@node Include
@@section @@code{.include "@@var{file}"}

@@cindex @@code{include} directive
@@cindex supporting files, including
@@cindex files, including
This directive provides a way to include supporting files at specified
points in your source program.  The code from @@var{file} is assembled as
if it followed the point of the @@code{.include}; when the end of the
included file is reached, assembly of the original file continues.  You
can control the search paths used with the @@samp{-I} command-line option
(@@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @@var{file}.

@@node Int
@@section @@code{.int @@var{expressions}}

@@cindex @@code{int} directive
@@cindex integers, 32-bit
Expect zero or more @@var{expressions}, of any section, separated by commas.
For each expression, emit a number that, at run time, is the value of that
expression.  The byte order and bit size of the number depends on what kind
of target the assembly is for.

@@ifclear GENERIC
@@ifset H8
On most forms of the H8/300, @@code{.int} emits 16-bit
integers.  On the H8/300H and the Renesas SH, however, @@code{.int} emits
32-bit integers.
@@end ifset
@@end ifclear

@@ifset ELF
@@node Internal
@@section @@code{.internal @@var{names}}

@@cindex @@code{internal} directive
@@cindex visibility
This is one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden,,@@code{.hidden}}) and
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{internal} which means that the symbols are considered to be @@code{hidden}
(i.e., not visible to other components), and that some extra, processor specific
processing must also be performed upon the  symbols as well.
@@end ifset

@@node Irp
@@section @@code{.irp @@var{symbol},@@var{values}}@@dots{}

@@cindex @@code{irp} directive
Evaluate a sequence of statements assigning different values to @@var{symbol}.
The sequence of statements starts at the @@code{.irp} directive, and is
terminated by an @@code{.endr} directive.  For each @@var{value}, @@var{symbol} is
set to @@var{value}, and the sequence of statements is assembled.  If no
@@var{value} is listed, the sequence of statements is assembled once, with
@@var{symbol} set to the null string.  To refer to @@var{symbol} within the
sequence of statements, use @@var{\symbol}.

For example, assembling

@@example
        .irp    param,1,2,3
        move    d\param,sp@@@@-
        .endr
@@end example

is equivalent to assembling

@@example
        move    d1,sp@@@@-
        move    d2,sp@@@@-
        move    d3,sp@@@@-
@@end example

For some caveats with the spelling of @@var{symbol}, see also @@ref{Macro}.

@@node Irpc
@@section @@code{.irpc @@var{symbol},@@var{values}}@@dots{}

@@cindex @@code{irpc} directive
Evaluate a sequence of statements assigning different values to @@var{symbol}.
The sequence of statements starts at the @@code{.irpc} directive, and is
terminated by an @@code{.endr} directive.  For each character in @@var{value},
@@var{symbol} is set to the character, and the sequence of statements is
assembled.  If no @@var{value} is listed, the sequence of statements is
assembled once, with @@var{symbol} set to the null string.  To refer to
@@var{symbol} within the sequence of statements, use @@var{\symbol}.

For example, assembling

@@example
        .irpc    param,123
        move    d\param,sp@@@@-
        .endr
@@end example

is equivalent to assembling

@@example
        move    d1,sp@@@@-
        move    d2,sp@@@@-
        move    d3,sp@@@@-
@@end example

For some caveats with the spelling of @@var{symbol}, see also the discussion
at @@xref{Macro}.

@@node Lcomm
@@section @@code{.lcomm @@var{symbol} , @@var{length}}

@@cindex @@code{lcomm} directive
@@cindex local common symbols
@@cindex symbols, local common
Reserve @@var{length} (an absolute expression) bytes for a local common
denoted by @@var{symbol}.  The section and value of @@var{symbol} are
those of the new local common.  The addresses are allocated in the bss
section, so that at run-time the bytes start off zeroed.  @@var{Symbol}
is not declared global (@@pxref{Global,,@@code{.global}}), so is normally
not visible to @@code{@@value{LD}}.

@@ifset GENERIC
Some targets permit a third argument to be used with @@code{.lcomm}.  This
argument specifies the desired alignment of the symbol in the bss section.
@@end ifset

@@ifset HPPA
The syntax for @@code{.lcomm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .lcomm, @@var{length}}; @@var{symbol} is optional.
@@end ifset

@@node Lflags
@@section @@code{.lflags}

@@cindex @@code{lflags} directive (ignored)
@@command{@@value{AS}} accepts this directive, for compatibility with other
assemblers, but ignores it.

@@ifclear no-line-dir
@@node Line
@@section @@code{.line @@var{line-number}}

@@cindex @@code{line} directive
@@cindex logical line number
@@ifset aout-bout
Change the logical line number.  @@var{line-number} must be an absolute
expression.  The next line has that logical line number.  Therefore any other
statements on the current line (after a statement separator character) are
reported as on logical line number @@var{line-number} @@minus{} 1.  One day
@@command{@@value{AS}} will no longer support this directive: it is recognized only
for compatibility with existing assembler programs.
@@end ifset

Even though this is a directive associated with the @@code{a.out} or
@@code{b.out} object-code formats, @@command{@@value{AS}} still recognizes it
when producing COFF output, and treats @@samp{.line} as though it
were the COFF @@samp{.ln} @@emph{if} it is found outside a
@@code{.def}/@@code{.endef} pair.

Inside a @@code{.def}, @@samp{.line} is, instead, one of the directives
used by compilers to generate auxiliary symbol information for
debugging.
@@end ifclear

@@node Linkonce
@@section @@code{.linkonce [@@var{type}]}
@@cindex COMDAT
@@cindex @@code{linkonce} directive
@@cindex common sections
Mark the current section so that the linker only includes a single copy of it.
This may be used to include the same section in several different object files,
but ensure that the linker will only include it once in the final output file.
The @@code{.linkonce} pseudo-op must be used for each instance of the section.
Duplicate sections are detected based on the section name, so it should be
unique.

This directive is only supported by a few object file formats; as of this
writing, the only object file format which supports it is the Portable
Executable format used on Windows NT.

The @@var{type} argument is optional.  If specified, it must be one of the
following strings.  For example:
@@smallexample
.linkonce same_size
@@end smallexample
Not all types may be supported on all object file formats.

@@table @@code
@@item discard
Silently discard duplicate sections.  This is the default.

@@item one_only
Warn if there are duplicate sections, but still keep only one copy.

@@item same_size
Warn if any of the duplicates have different sizes.

@@item same_contents
Warn if any of the duplicates do not have exactly the same contents.
@@end table

@@node List
@@section @@code{.list}

@@cindex @@code{list} directive
@@cindex listing control, turning on
Control (in conjunction with the @@code{.nolist} directive) whether or
not assembly listings are generated.  These two directives maintain an
internal counter (which is zero initially).   @@code{.list} increments the
counter, and @@code{.nolist} decrements it.  Assembly listings are
generated whenever the counter is greater than zero.

By default, listings are disabled.  When you enable them (with the
@@samp{-a} command line option; @@pxref{Invoking,,Command-Line Options}),
the initial value of the listing counter is one.

@@node Ln
@@section @@code{.ln @@var{line-number}}

@@cindex @@code{ln} directive
@@ifclear no-line-dir
@@samp{.ln} is a synonym for @@samp{.line}.
@@end ifclear
@@ifset no-line-dir
Tell @@command{@@value{AS}} to change the logical line number.  @@var{line-number}
must be an absolute expression.  The next line has that logical
line number, so any other statements on the current line (after a
statement separator character @@code{;}) are reported as on logical
line number @@var{line-number} @@minus{} 1.
@@ifset BOUT

This directive is accepted, but ignored, when @@command{@@value{AS}} is
configured for @@code{b.out}; its effect is only associated with COFF
output format.
@@end ifset
@@end ifset

@@node Loc
@@section @@code{.loc @@var{fileno} @@var{lineno} [@@var{column}] [@@var{options}]}
@@cindex @@code{loc} directive
When emitting DWARF2 line number information,
the @@code{.loc} directive will add a row to the @@code{.debug_line} line
number matrix corresponding to the immediately following assembly
instruction.  The @@var{fileno}, @@var{lineno}, and optional @@var{column}
arguments will be applied to the @@code{.debug_line} state machine before
the row is added.

The @@var{options} are a sequence of the following tokens in any order:

@@table @@code
@@item basic_block
This option will set the @@code{basic_block} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item prologue_end
This option will set the @@code{prologue_end} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item epilogue_begin
This option will set the @@code{epilogue_begin} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item is_stmt @@var{value}
This option will set the @@code{is_stmt} register in the
@@code{.debug_line} state machine to @@code{value}, which must be
either 0 or 1.

@@item isa @@var{value}
This directive will set the @@code{isa} register in the @@code{.debug_line}
state machine to @@var{value}, which must be an unsigned integer.

@@item discriminator @@var{value}
This directive will set the @@code{discriminator} register in the @@code{.debug_line}
state machine to @@var{value}, which must be an unsigned integer.

@@end table

@@node Loc_mark_labels
@@section @@code{.loc_mark_labels @@var{enable}}
@@cindex @@code{loc_mark_labels} directive
When emitting DWARF2 line number information,
the @@code{.loc_mark_labels} directive makes the assembler emit an entry
to the @@code{.debug_line} line number matrix with the @@code{basic_block}
register in the state machine set whenever a code label is seen.
The @@var{enable} argument should be either 1 or 0, to enable or disable
this function respectively.

@@ifset ELF
@@node Local
@@section @@code{.local @@var{names}}

@@cindex @@code{local} directive
This directive, which is available for ELF targets, marks each symbol in
the comma-separated list of @@code{names} as a local symbol so that it
will not be externally visible.  If the symbols do not already exist,
they will be created.

For targets where the @@code{.lcomm} directive (@@pxref{Lcomm}) does not
accept an alignment argument, which is the case for most ELF targets,
the @@code{.local} directive can be used in combination with @@code{.comm}
(@@pxref{Comm}) to define aligned local common data.
@@end ifset

@@node Long
@@section @@code{.long @@var{expressions}}

@@cindex @@code{long} directive
@@code{.long} is the same as @@samp{.int}.  @@xref{Int,,@@code{.int}}.

@@ignore
@@c no one seems to know what this is for or whether this description is
@@c what it really ought to do
@@node Lsym
@@section @@code{.lsym @@var{symbol}, @@var{expression}}

@@cindex @@code{lsym} directive
@@cindex symbol, not referenced in assembly
@@code{.lsym} creates a new symbol named @@var{symbol}, but does not put it in
the hash table, ensuring it cannot be referenced by name during the
rest of the assembly.  This sets the attributes of the symbol to be
the same as the expression value:
@@smallexample
@@var{other} = @@var{descriptor} = 0
@@var{type} = @@r{(section of @@var{expression})}
@@var{value} = @@var{expression}
@@end smallexample
@@noindent
The new symbol is not flagged as external.
@@end ignore

@@node Macro
@@section @@code{.macro}

@@cindex macros
The commands @@code{.macro} and @@code{.endm} allow you to define macros that
generate assembly output.  For example, this definition specifies a macro
@@code{sum} that puts a sequence of numbers into memory:

@@example
        .macro  sum from=0, to=5
        .long   \from
        .if     \to-\from
        sum     "(\from+1)",\to
        .endif
        .endm
@@end example

@@noindent
With that definition, @@samp{SUM 0,5} is equivalent to this assembly input:

@@example
        .long   0
        .long   1
        .long   2
        .long   3
        .long   4
        .long   5
@@end example

@@ftable @@code
@@item .macro @@var{macname}
@@itemx .macro @@var{macname} @@var{macargs} @@dots{}
@@cindex @@code{macro} directive
Begin the definition of a macro called @@var{macname}.  If your macro
definition requires arguments, specify their names after the macro name,
separated by commas or spaces.  You can qualify the macro argument to
indicate whether all invocations must specify a non-blank value (through
@@samp{:@@code{req}}), or whether it takes all of the remaining arguments
(through @@samp{:@@code{vararg}}).  You can supply a default value for any
macro argument by following the name with @@samp{=@@var{deflt}}.  You
cannot define two macros with the same @@var{macname} unless it has been
subject to the @@code{.purgem} directive (@@pxref{Purgem}) between the two
definitions.  For example, these are all valid @@code{.macro} statements:

@@table @@code
@@item .macro comm
Begin the definition of a macro called @@code{comm}, which takes no
arguments.

@@item  .macro plus1 p, p1
@@itemx .macro plus1 p p1
Either statement begins the definition of a macro called @@code{plus1},
which takes two arguments; within the macro definition, write
@@samp{\p} or @@samp{\p1} to evaluate the arguments.

@@item .macro reserve_str p1=0 p2
Begin the definition of a macro called @@code{reserve_str}, with two
arguments.  The first argument has a default value, but not the second.
After the definition is complete, you can call the macro either as
@@samp{reserve_str @@var{a},@@var{b}} (with @@samp{\p1} evaluating to
@@var{a} and @@samp{\p2} evaluating to @@var{b}), or as @@samp{reserve_str
,@@var{b}} (with @@samp{\p1} evaluating as the default, in this case
@@samp{0}, and @@samp{\p2} evaluating to @@var{b}).

@@item .macro m p1:req, p2=0, p3:vararg
Begin the definition of a macro called @@code{m}, with at least three
arguments.  The first argument must always have a value specified, but
not the second, which instead has a default value. The third formal
will get assigned all remaining arguments specified at invocation time.

When you call a macro, you can specify the argument values either by
position, or by keyword.  For example, @@samp{sum 9,17} is equivalent to
@@samp{sum to=17, from=9}.

@@end table

Note that since each of the @@var{macargs} can be an identifier exactly
as any other one permitted by the target architecture, there may be
occasional problems if the target hand-crafts special meanings to certain
characters when they occur in a special position.  For example, if the colon
(@@code{:}) is generally permitted to be part of a symbol name, but the
architecture specific code special-cases it when occurring as the final
character of a symbol (to denote a label), then the macro parameter
replacement code will have no way of knowing that and consider the whole
construct (including the colon) an identifier, and check only this
identifier for being the subject to parameter substitution.  So for example
this macro definition:

@@example
	.macro label l
\l:
	.endm
@@end example

might not work as expected.  Invoking @@samp{label foo} might not create a label
called @@samp{foo} but instead just insert the text @@samp{\l:} into the
assembler source, probably generating an error about an unrecognised
identifier.

Similarly problems might occur with the period character (@@samp{.})
which is often allowed inside opcode names (and hence identifier names).  So
for example constructing a macro to build an opcode from a base name and a
length specifier like this:

@@example
	.macro opcode base length
        \base.\length
	.endm
@@end example

and invoking it as @@samp{opcode store l} will not create a @@samp{store.l}
instruction but instead generate some kind of error as the assembler tries to
interpret the text @@samp{\base.\length}.

There are several possible ways around this problem:

@@table @@code
@@item Insert white space
If it is possible to use white space characters then this is the simplest
solution.  eg:

@@example
	.macro label l
\l :
	.endm
@@end example

@@item Use @@samp{\()}
The string @@samp{\()} can be used to separate the end of a macro argument from
the following text.  eg:

@@example
	.macro opcode base length
        \base\().\length
	.endm
@@end example

@@item Use the alternate macro syntax mode
In the alternative macro syntax mode the ampersand character (@@samp{&}) can be
used as a separator.  eg:

@@example
	.altmacro
	.macro label l
l&:
	.endm
@@end example
@@end table

Note: this problem of correctly identifying string parameters to pseudo ops
also applies to the identifiers used in @@code{.irp} (@@pxref{Irp})
and @@code{.irpc} (@@pxref{Irpc}) as well.

@@item .endm
@@cindex @@code{endm} directive
Mark the end of a macro definition.

@@item .exitm
@@cindex @@code{exitm} directive
Exit early from the current macro definition.

@@cindex number of macros executed
@@cindex macros, count executed
@@item \@@@@
@@command{@@value{AS}} maintains a counter of how many macros it has
executed in this pseudo-variable; you can copy that number to your
output with @@samp{\@@@@}, but @@emph{only within a macro definition}.

@@item LOCAL @@var{name} [ , @@dots{} ]
@@emph{Warning: @@code{LOCAL} is only available if you select ``alternate
macro syntax'' with @@samp{--alternate} or @@code{.altmacro}.}
@@xref{Altmacro,,@@code{.altmacro}}.
@@end ftable

@@node MRI
@@section @@code{.mri @@var{val}}

@@cindex @@code{mri} directive
@@cindex MRI mode, temporarily
If @@var{val} is non-zero, this tells @@command{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@command{@@value{AS}} to exit MRI mode.  This change
affects code assembled until the next @@code{.mri} directive, or until the end
of the file.  @@xref{M, MRI mode, MRI mode}.

@@node Noaltmacro
@@section @@code{.noaltmacro}
Disable alternate macro mode.  @@xref{Altmacro}.

@@node Nolist
@@section @@code{.nolist}

@@cindex @@code{nolist} directive
@@cindex listing control, turning off
Control (in conjunction with the @@code{.list} directive) whether or
not assembly listings are generated.  These two directives maintain an
internal counter (which is zero initially).   @@code{.list} increments the
counter, and @@code{.nolist} decrements it.  Assembly listings are
generated whenever the counter is greater than zero.

@@node Octa
@@section @@code{.octa @@var{bignums}}

@@c FIXME: double size emitted for "octa" on i960, others?  Or warn?
@@cindex @@code{octa} directive
@@cindex integer, 16-byte
@@cindex sixteen byte integer
This directive expects zero or more bignums, separated by commas.  For each
bignum, it emits a 16-byte integer.

The term ``octa'' comes from contexts in which a ``word'' is two bytes;
hence @@emph{octa}-word for 16 bytes.

@@node Offset
@@section @@code{.offset @@var{loc}}

@@cindex @@code{offset} directive
Set the location counter to @@var{loc} in the absolute section.  @@var{loc} must
be an absolute expression.  This directive may be useful for defining
symbols with absolute values.  Do not confuse it with the @@code{.org}
directive.

@@node Org
@@section @@code{.org @@var{new-lc} , @@var{fill}}

@@cindex @@code{org} directive
@@cindex location counter, advancing
@@cindex advancing location counter
@@cindex current address, advancing
Advance the location counter of the current section to
@@var{new-lc}.  @@var{new-lc} is either an absolute expression or an
expression with the same section as the current subsection.  That is,
you can't use @@code{.org} to cross sections: if @@var{new-lc} has the
wrong section, the @@code{.org} directive is ignored.  To be compatible
with former assemblers, if the section of @@var{new-lc} is absolute,
@@command{@@value{AS}} issues a warning, then pretends the section of @@var{new-lc}
is the same as the current subsection.

@@code{.org} may only increase the location counter, or leave it
unchanged; you cannot use @@code{.org} to move the location counter
backwards.

@@c double negative used below "not undefined" because this is a specific
@@c reference to "undefined" (as SEG_UNKNOWN is called in this manual)
@@c section. doc@@cygnus.com 18feb91
Because @@command{@@value{AS}} tries to assemble programs in one pass, @@var{new-lc}
may not be undefined.  If you really detest this restriction we eagerly await
a chance to share your improved assembler.

Beware that the origin is relative to the start of the section, not
to the start of the subsection.  This is compatible with other
people's assemblers.

When the location counter (of the current subsection) is advanced, the
intervening bytes are filled with @@var{fill} which should be an
absolute expression.  If the comma and @@var{fill} are omitted,
@@var{fill} defaults to zero.

@@node P2align
@@section @@code{.p2align[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter given a power of two
@@cindex @@code{p2align} directive
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
number of low-order zero bits the location counter must have after
advancement.  For example @@samp{.p2align 3} advances the location
counter until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@@cindex @@code{p2alignw} directive
@@cindex @@code{p2alignl} directive
The @@code{.p2alignw} and @@code{.p2alignl} directives are variants of the
@@code{.p2align} directive.  The @@code{.p2alignw} directive treats the fill
pattern as a two byte word value.  The @@code{.p2alignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.p2alignw
2,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@@ifset ELF
@@node PopSection
@@section @@code{.popsection}

@@cindex @@code{popsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}),
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.previous}
(@@pxref{Previous}).

This directive replaces the current section (and subsection) with the top
section (and subsection) on the section stack.  This section is popped off the
stack.
@@end ifset

@@ifset ELF
@@node Previous
@@section @@code{.previous}

@@cindex @@code{previous} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}),
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.popsection}
(@@pxref{PopSection}).

This directive swaps the current section (and subsection) with most recently
referenced section/subsection pair prior to this one.  Multiple
@@code{.previous} directives in a row will flip between two sections (and their
subsections).  For example:

@@smallexample
.section A
 .subsection 1
  .word 0x1234
 .subsection 2
  .word 0x5678
.previous
 .word 0x9abc
@@end smallexample

Will place 0x1234 and 0x9abc into subsection 1 and 0x5678 into subsection 2 of
section A.  Whilst:

@@smallexample
.section A
.subsection 1
  # Now in section A subsection 1
  .word 0x1234
.section B
.subsection 0
  # Now in section B subsection 0
  .word 0x5678
.subsection 1
  # Now in section B subsection 1
  .word 0x9abc
.previous
  # Now in section B subsection 0
  .word 0xdef0
@@end smallexample

Will place 0x1234 into section A, 0x5678 and 0xdef0 into subsection 0 of
section B and 0x9abc into subsection 1 of section B.

In terms of the section stack, this directive swaps the current section with
the top section on the section stack.
@@end ifset

@@node Print
@@section @@code{.print @@var{string}}

@@cindex @@code{print} directive
@@command{@@value{AS}} will print @@var{string} on the standard output during
assembly.  You must put @@var{string} in double quotes.

@@ifset ELF
@@node Protected
@@section @@code{.protected @@var{names}}

@@cindex @@code{protected} directive
@@cindex visibility
This is one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden}) and @@code{.internal} (@@pxref{Internal}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{protected} which means that any references to the symbols from within the
components that defines them must be resolved to the definition in that
component, even if a definition in another component would normally preempt
this.
@@end ifset

@@node Psize
@@section @@code{.psize @@var{lines} , @@var{columns}}

@@cindex @@code{psize} directive
@@cindex listing control: paper size
@@cindex paper size, for listings
Use this directive to declare the number of lines---and, optionally, the
number of columns---to use for each page, when generating listings.

If you do not use @@code{.psize}, listings use a default line-count
of 60.  You may omit the comma and @@var{columns} specification; the
default width is 200 columns.

@@command{@@value{AS}} generates formfeeds whenever the specified number of
lines is exceeded (or whenever you explicitly request one, using
@@code{.eject}).

If you specify @@var{lines} as @@code{0}, no formfeeds are generated save
those explicitly specified with @@code{.eject}.

@@node Purgem
@@section @@code{.purgem @@var{name}}

@@cindex @@code{purgem} directive
Undefine the macro @@var{name}, so that later uses of the string will not be
expanded.  @@xref{Macro}.

@@ifset ELF
@@node PushSection
@@section @@code{.pushsection @@var{name} [, @@var{subsection}] [, "@@var{flags}"[, @@@@@@var{type}[,@@var{arguments}]]]}

@@cindex @@code{pushsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}),
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous}
(@@pxref{Previous}).

This directive pushes the current section (and subsection) onto the
top of the section stack, and then replaces the current section and
subsection with @@code{name} and @@code{subsection}. The optional
@@code{flags}, @@code{type} and @@code{arguments} are treated the same
as in the @@code{.section} (@@pxref{Section}) directive.
@@end ifset

@@node Quad
@@section @@code{.quad @@var{bignums}}

@@cindex @@code{quad} directive
@@code{.quad} expects zero or more bignums, separated by commas.  For
each bignum, it emits
@@ifclear bignum-16
an 8-byte integer.  If the bignum won't fit in 8 bytes, it prints a
warning message; and just takes the lowest order 8 bytes of the bignum.
@@cindex eight-byte integer
@@cindex integer, 8-byte

The term ``quad'' comes from contexts in which a ``word'' is two bytes;
hence @@emph{quad}-word for 8 bytes.
@@end ifclear
@@ifset bignum-16
a 16-byte integer.  If the bignum won't fit in 16 bytes, it prints a
warning message; and just takes the lowest order 16 bytes of the bignum.
@@cindex sixteen-byte integer
@@cindex integer, 16-byte
@@end ifset

@@node Reloc
@@section @@code{.reloc @@var{offset}, @@var{reloc_name}[, @@var{expression}]}

@@cindex @@code{reloc} directive
Generate a relocation at @@var{offset} of type @@var{reloc_name} with value
@@var{expression}.  If @@var{offset} is a number, the relocation is generated in
the current section.  If @@var{offset} is an expression that resolves to a
symbol plus offset, the relocation is generated in the given symbol's section.
@@var{expression}, if present, must resolve to a symbol plus addend or to an
absolute value, but note that not all targets support an addend.  e.g. ELF REL
targets such as i386 store an addend in the section contents rather than in the
relocation.  This low level interface does not support addends stored in the
section.

@@node Rept
@@section @@code{.rept @@var{count}}

@@cindex @@code{rept} directive
Repeat the sequence of lines between the @@code{.rept} directive and the next
@@code{.endr} directive @@var{count} times.

For example, assembling

@@example
        .rept   3
        .long   0
        .endr
@@end example

is equivalent to assembling

@@example
        .long   0
        .long   0
        .long   0
@@end example

@@node Sbttl
@@section @@code{.sbttl "@@var{subheading}"}

@@cindex @@code{sbttl} directive
@@cindex subtitles for listings
@@cindex listing control: subtitle
Use @@var{subheading} as the title (third line, immediately after the
title line) when generating assembly listings.

This directive affects subsequent pages, as well as the current page if
it appears within ten lines of the top of a page.

@@ifset COFF
@@node Scl
@@section @@code{.scl @@var{class}}

@@cindex @@code{scl} directive
@@cindex symbol storage class (COFF)
@@cindex COFF symbol storage class
Set the storage-class value for a symbol.  This directive may only be
used inside a @@code{.def}/@@code{.endef} pair.  Storage class may flag
whether a symbol is static or external, or it may record further
symbolic debugging information.
@@ifset BOUT

The @@samp{.scl} directive is primarily associated with COFF output; when
configured to generate @@code{b.out} output format, @@command{@@value{AS}}
accepts this directive but ignores it.
@@end ifset
@@end ifset

@@ifset COFF-ELF
@@node Section
@@section @@code{.section @@var{name}}

@@cindex named section
Use the @@code{.section} directive to assemble the following code into a section
named @@var{name}.

This directive is only supported for targets that actually support arbitrarily
named sections; on @@code{a.out} targets, for example, it is not accepted, even
with a standard @@code{a.out} section name.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{section} directive (COFF version)
For COFF targets, the @@code{.section} directive is used in one of the following
ways:

@@smallexample
.section @@var{name}[, "@@var{flags}"]
.section @@var{name}[, @@var{subsection}]
@@end smallexample

If the optional argument is quoted, it is taken as flags to use for the
section.  Each flag is a single character.  The following flags are recognized:
@@table @@code
@@item b
bss section (uninitialized data)
@@item n
section is not loaded
@@item w
writable section
@@item d
data section
@@item e
exclude section from linking
@@item r
read-only section
@@item x
executable section
@@item s
shared section (meaningful for PE targets)
@@item a
ignored.  (For compatibility with the ELF version)
@@item y
section is not readable (meaningful for PE targets)
@@item 0-9
single-digit power-of-two section alignment (GNU extension)
@@end table

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to be
loaded and writable.  Note the @@code{n} and @@code{w} flags remove attributes
from the section, rather than adding them, so if they are used on their own it
will be as if no flags had been specified at all.

If the optional argument to the @@code{.section} directive is not quoted, it is
taken as a subsection number (@@pxref{Sub-Sections}).
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.subsection} (@@pxref{SubSection}), @@code{.pushsection}
(@@pxref{PushSection}), @@code{.popsection} (@@pxref{PopSection}), and
@@code{.previous} (@@pxref{Previous}).

@@cindex @@code{section} directive (ELF version)
For ELF targets, the @@code{.section} directive is used like this:

@@smallexample
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}[,@@var{flag_specific_arguments}]]]
@@end smallexample

The optional @@var{flags} argument is a quoted string which may contain any
combination of the following characters:
@@table @@code
@@item a
section is allocatable
@@item e
section is excluded from executable and shared library.
@@item w
section is writable
@@item x
section is executable
@@item M
section is mergeable
@@item S
section contains zero terminated strings
@@item G
section is a member of a section group
@@item T
section is used for thread-local-storage
@@item ?
section is a member of the previously-current section's group, if any
@@end table

The optional @@var{type} argument may contain one of the following constants:
@@table @@code
@@item @@@@progbits
section contains data
@@item @@@@nobits
section does not contain data (i.e., section only occupies space)
@@item @@@@note
section contains data which is used by things other than the program
@@item @@@@init_array
section contains an array of pointers to init functions
@@item @@@@fini_array
section contains an array of pointers to finish functions
@@item @@@@preinit_array
section contains an array of pointers to pre-init functions
@@end table

Many targets only support the first three section types.

Note on targets where the @@code{@@@@} character is the start of a comment (eg
ARM) then another character is used instead.  For example the ARM port uses the
@@code{%} character.

If @@var{flags} contains the @@code{M} symbol then the @@var{type} argument must
be specified as well as an extra argument---@@var{entsize}---like this:

@@smallexample
.section @@var{name} , "@@var{flags}"M, @@@@@@var{type}, @@var{entsize}
@@end smallexample

Sections with the @@code{M} flag but not @@code{S} flag must contain fixed size
constants, each @@var{entsize} octets long. Sections with both @@code{M} and
@@code{S} must contain zero terminated strings where each character is
@@var{entsize} bytes long. The linker may remove duplicates within sections with
the same name, same entity size and same flags.  @@var{entsize} must be an
absolute expression.  For sections with both @@code{M} and @@code{S}, a string
which is a suffix of a larger string is considered a duplicate.  Thus
@@code{"def"} will be merged with @@code{"abcdef"};  A reference to the first
@@code{"def"} will be changed to a reference to @@code{"abcdef"+3}.

If @@var{flags} contains the @@code{G} symbol then the @@var{type} argument must
be present along with an additional field like this:

@@smallexample
.section @@var{name} , "@@var{flags}"G, @@@@@@var{type}, @@var{GroupName}[, @@var{linkage}]
@@end smallexample

The @@var{GroupName} field specifies the name of the section group to which this
particular section belongs.  The optional linkage field can contain:
@@table @@code
@@item comdat
indicates that only one copy of this section should be retained
@@item .gnu.linkonce
an alias for comdat
@@end table

Note: if both the @@var{M} and @@var{G} flags are present then the fields for
the Merge flag should come first, like this:

@@smallexample
.section @@var{name} , "@@var{flags}"MG, @@@@@@var{type}, @@var{entsize}, @@var{GroupName}[, @@var{linkage}]
@@end smallexample

If @@var{flags} contains the @@code{?} symbol then it may not also contain the
@@code{G} symbol and the @@var{GroupName} or @@var{linkage} fields should not be
present.  Instead, @@code{?} says to consider the section that's current before
this directive.  If that section used @@code{G}, then the new section will use
@@code{G} with those same @@var{GroupName} and @@var{linkage} fields implicitly.
If not, then the @@code{?} symbol has no effect.

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to have
none of the above flags: it will not be allocated in memory, nor writable, nor
executable.  The section will contain data.

For ELF targets, the assembler supports another type of @@code{.section}
directive for compatibility with the Solaris assembler:

@@smallexample
.section "@@var{name}"[, @@var{flags}...]
@@end smallexample

Note that the section name is quoted.  There may be a sequence of comma
separated flags:
@@table @@code
@@item #alloc
section is allocatable
@@item #write
section is writable
@@item #execinstr
section is executable
@@item #exclude
section is excluded from executable and shared library.
@@item #tls
section is used for thread local storage
@@end table

This directive replaces the current section and subsection.  See the
contents of the gas testsuite directory @@code{gas/testsuite/gas/elf} for
some examples of how this directive and the other section stack directives
work.
@@end ifset
@@end ifset

@@node Set
@@section @@code{.set @@var{symbol}, @@var{expression}}

@@cindex @@code{set} directive
@@cindex symbol value, setting
Set the value of @@var{symbol} to @@var{expression}.  This
changes @@var{symbol}'s value and type to conform to
@@var{expression}.  If @@var{symbol} was flagged as external, it remains
flagged (@@pxref{Symbol Attributes}).

You may @@code{.set} a symbol many times in the same assembly.

If you @@code{.set} a global symbol, the value stored in the object
file is the last value stored into it.

@@ifset Z80
On Z80 @@code{set} is a real instruction, use
@@samp{@@var{symbol} defl @@var{expression}} instead.
@@end ifset

@@node Short
@@section @@code{.short @@var{expressions}}

@@cindex @@code{short} directive
@@ifset GENERIC
@@code{.short} is normally the same as @@samp{.word}.
@@xref{Word,,@@code{.word}}.

In some configurations, however, @@code{.short} and @@code{.word} generate
numbers of different lengths.  @@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset W16
@@code{.short} is the same as @@samp{.word}.  @@xref{Word,,@@code{.word}}.
@@end ifset
@@ifset W32
This expects zero or more @@var{expressions}, and emits
a 16 bit number for each.
@@end ifset
@@end ifclear

@@node Single
@@section @@code{.single @@var{flonums}}

@@cindex @@code{single} directive
@@cindex floating point numbers (single)
This directive assembles zero or more flonums, separated by commas.  It
has the same effect as @@code{.float}.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family, @@code{.single} emits 32-bit floating point
numbers in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@ifset COFF-ELF
@@node Size
@@section @@code{.size}

This directive is used to set the size associated with a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{size} directive (COFF version)
For COFF targets, the @@code{.size} directive is only permitted inside
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.size @@var{expression}
@@end smallexample

@@ifset BOUT
@@samp{.size} is only meaningful when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex @@code{size} directive (ELF version)
For ELF targets, the @@code{.size} directive is used like this:

@@smallexample
.size @@var{name} , @@var{expression}
@@end smallexample

This directive sets the size associated with a symbol @@var{name}.
The size in bytes is computed from @@var{expression} which can make use of label
arithmetic.  This directive is typically used to set the size of function
symbols.
@@end ifset
@@end ifset

@@ifclear no-space-dir
@@node Skip
@@section @@code{.skip @@var{size} , @@var{fill}}

@@cindex @@code{skip} directive
@@cindex filling memory
This directive emits @@var{size} bytes, each of value @@var{fill}.  Both
@@var{size} and @@var{fill} are absolute expressions.  If the comma and
@@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same as
@@samp{.space}.
@@end ifclear

@@node Sleb128
@@section @@code{.sleb128 @@var{expressions}}

@@cindex @@code{sleb128} directive
@@var{sleb128} stands for ``signed little endian base 128.''  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Uleb128, ,@@code{.uleb128}}.

@@ifclear no-space-dir
@@node Space
@@section @@code{.space @@var{size} , @@var{fill}}

@@cindex @@code{space} directive
@@cindex filling memory
This directive emits @@var{size} bytes, each of value @@var{fill}.  Both
@@var{size} and @@var{fill} are absolute expressions.  If the comma
and @@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same
as @@samp{.skip}.

@@ifset HPPA
@@quotation
@@emph{Warning:} @@code{.space} has a completely different meaning for HPPA
targets; use @@code{.block} as a substitute.  See @@cite{HP9000 Series 800
Assembly Language Reference Manual} (HP 92432-90001) for the meaning of the
@@code{.space} directive.  @@xref{HPPA Directives,,HPPA Assembler Directives},
for a summary.
@@end quotation
@@end ifset
@@end ifclear

@@ifset have-stabs
@@node Stab
@@section @@code{.stabd, .stabn, .stabs}

@@cindex symbolic debuggers, information for
@@cindex @@code{stab@@var{x}} directives
There are three directives that begin @@samp{.stab}.
All emit symbols (@@pxref{Symbols}), for use by symbolic debuggers.
The symbols are not entered in the @@command{@@value{AS}} hash table: they
cannot be referenced elsewhere in the source file.
Up to five fields are required:

@@table @@var
@@item string
This is the symbol's name.  It may contain any character except
@@samp{\000}, so is more general than ordinary symbol names.  Some
debuggers used to code arbitrarily complex structures into symbol names
using this field.

@@item type
An absolute expression.  The symbol's type is set to the low 8 bits of
this expression.  Any bit pattern is permitted, but @@code{@@value{LD}}
and debuggers choke on silly bit patterns.

@@item other
An absolute expression.  The symbol's ``other'' attribute is set to the
low 8 bits of this expression.

@@item desc
An absolute expression.  The symbol's descriptor is set to the low 16
bits of this expression.

@@item value
An absolute expression which becomes the symbol's value.
@@end table

If a warning is detected while reading a @@code{.stabd}, @@code{.stabn},
or @@code{.stabs} statement, the symbol has probably already been created;
you get a half-formed symbol in your object file.  This is
compatible with earlier assemblers!

@@table @@code
@@cindex @@code{stabd} directive
@@item .stabd @@var{type} , @@var{other} , @@var{desc}

The ``name'' of the symbol generated is not even an empty string.
It is a null pointer, for compatibility.  Older assemblers used a
null pointer so they didn't waste space in object files with empty
strings.

The symbol's value is set to the location counter,
relocatably.  When your program is linked, the value of this symbol
is the address of the location counter when the @@code{.stabd} was
assembled.

@@cindex @@code{stabn} directive
@@item .stabn @@var{type} , @@var{other} , @@var{desc} , @@var{value}
The name of the symbol is set to the empty string @@code{""}.

@@cindex @@code{stabs} directive
@@item .stabs @@var{string} ,  @@var{type} , @@var{other} , @@var{desc} , @@var{value}
All five fields are specified.
@@end table
@@end ifset
@@c end     have-stabs

@@node String
@@section @@code{.string} "@@var{str}", @@code{.string8} "@@var{str}", @@code{.string16}
"@@var{str}", @@code{.string32} "@@var{str}", @@code{.string64} "@@var{str}"

@@cindex string, copying to object file
@@cindex string8, copying to object file
@@cindex string16, copying to object file
@@cindex string32, copying to object file
@@cindex string64, copying to object file
@@cindex @@code{string} directive
@@cindex @@code{string8} directive
@@cindex @@code{string16} directive
@@cindex @@code{string32} directive
@@cindex @@code{string64} directive

Copy the characters in @@var{str} to the object file.  You may specify more than
one string to copy, separated by commas.  Unless otherwise specified for a
particular machine, the assembler marks the end of each string with a 0 byte.
You can use any of the escape sequences described in @@ref{Strings,,Strings}.

The variants @@code{string16}, @@code{string32} and @@code{string64} differ from
the @@code{string} pseudo opcode in that each 8-bit character from @@var{str} is
copied and expanded to 16, 32 or 64 bits respectively.  The expanded characters
are stored in target endianness byte order.

Example:
@@smallexample
	.string32 "BYE"
expands to:
	.string   "B\0\0\0Y\0\0\0E\0\0\0"  /* On little endian targets.  */
	.string   "\0\0\0B\0\0\0Y\0\0\0E"  /* On big endian targets.  */
@@end smallexample


@@node Struct
@@section @@code{.struct @@var{expression}}

@@cindex @@code{struct} directive
Switch to the absolute section, and set the section offset to @@var{expression},
which must be an absolute expression.  You might use this as follows:
@@smallexample
        .struct 0
field1:
        .struct field1 + 4
field2:
        .struct field2 + 4
field3:
@@end smallexample
This would define the symbol @@code{field1} to have the value 0, the symbol
@@code{field2} to have the value 4, and the symbol @@code{field3} to have the
value 8.  Assembly would be left in the absolute section, and you would need to
use a @@code{.section} directive of some sort to change to some other section
before further assembly.

@@ifset ELF
@@node SubSection
@@section @@code{.subsection @@var{name}}

@@cindex @@code{subsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.pushsection} (@@pxref{PushSection}),
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous}
(@@pxref{Previous}).

This directive replaces the current subsection with @@code{name}.  The current
section is not changed.  The replaced subsection is put onto the section stack
in place of the then current top of stack subsection.
@@end ifset

@@ifset ELF
@@node Symver
@@section @@code{.symver}
@@cindex @@code{symver} directive
@@cindex symbol versioning
@@cindex versions of symbols
Use the @@code{.symver} directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be bound
into an application itself so as to override a versioned symbol from a
shared library.

For ELF targets, the @@code{.symver} directive can be used like this:
@@smallexample
.symver @@var{name}, @@var{name2@@@@nodename}
@@end smallexample
If the symbol @@var{name} is defined within the file
being assembled, the @@code{.symver} directive effectively creates a symbol
alias with the name @@var{name2@@@@nodename}, and in fact the main reason that we
just don't try and create a regular alias is that the @@var{@@@@} character isn't
permitted in symbol names.  The @@var{name2} part of the name is the actual name
of the symbol by which it will be externally referenced.  The name @@var{name}
itself is merely a name of convenience that is used so that it is possible to
have definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The @@var{nodename} portion of the alias should be
the name of a node specified in the version script supplied to the linker when
building a shared library.  If you are attempting to override a versioned
symbol from a shared library, then @@var{nodename} should correspond to the
nodename of the symbol you are trying to override.

If the symbol @@var{name} is not defined within the file being assembled, all
references to @@var{name} will be changed to @@var{name2@@@@nodename}.  If no
reference to @@var{name} is made, @@var{name2@@@@nodename} will be removed from the
symbol table.

Another usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@nodename}
@@end smallexample
In this case, the symbol @@var{name} must exist and be defined within
the file being assembled. It is similar to @@var{name2@@@@nodename}. The
difference is @@var{name2@@@@@@@@nodename} will also be used to resolve
references to @@var{name2} by the linker.

The third usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@@@@@nodename}
@@end smallexample
When @@var{name} is not defined within the
file being assembled, it is treated as @@var{name2@@@@nodename}. When
@@var{name} is defined within the file being assembled, the symbol
name, @@var{name}, will be changed to @@var{name2@@@@@@@@nodename}.
@@end ifset

@@ifset COFF
@@node Tag
@@section @@code{.tag @@var{structname}}

@@cindex COFF structure debugging
@@cindex structure debugging, COFF
@@cindex @@code{tag} directive
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.  Tags are used to link structure
definitions in the symbol table with instances of those structures.
@@ifset BOUT

@@samp{.tag} is only used when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@node Text
@@section @@code{.text @@var{subsection}}

@@cindex @@code{text} directive
Tells @@command{@@value{AS}} to assemble the following statements onto the end of
the text subsection numbered @@var{subsection}, which is an absolute
expression.  If @@var{subsection} is omitted, subsection number zero
is used.

@@node Title
@@section @@code{.title "@@var{heading}"}

@@cindex @@code{title} directive
@@cindex listing control: title line
Use @@var{heading} as the title (second line, immediately after the
source file name and pagenumber) when generating assembly listings.

This directive affects subsequent pages, as well as the current page if
it appears within ten lines of the top of a page.

@@ifset COFF-ELF
@@node Type
@@section @@code{.type}

This directive is used to set the type of a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex COFF symbol type
@@cindex symbol type, COFF
@@cindex @@code{type} directive (COFF version)
For COFF targets, this directive is permitted only within
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.type @@var{int}
@@end smallexample

This records the integer @@var{int} as the type attribute of a symbol table
entry.

@@ifset BOUT
@@samp{.type} is associated only with COFF format output; when
@@command{@@value{AS}} is configured for @@code{b.out} output, it accepts this
directive but ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex ELF symbol type
@@cindex symbol type, ELF
@@cindex @@code{type} directive (ELF version)
For ELF targets, the @@code{.type} directive is used like this:

@@smallexample
.type @@var{name} , @@var{type description}
@@end smallexample

This sets the type of symbol @@var{name} to be either a
function symbol or an object symbol.  There are five different syntaxes
supported for the @@var{type description} field, in order to provide
compatibility with various other assemblers.

Because some of the characters used in these syntaxes (such as @@samp{@@@@} and
@@samp{#}) are comment characters for some architectures, some of the syntaxes
below do not work on all architectures.  The first variant will be accepted by
the GNU assembler on all architectures so that variant should be used for
maximum portability, if you do not need to assemble your code with other
assemblers.

The syntaxes supported are:

@@smallexample
  .type <name> STT_<TYPE_IN_UPPER_CASE>
  .type <name>,#<type>
  .type <name>,@@@@<type>
  .type <name>,%<type>
  .type <name>,"<type>"
@@end smallexample

The types supported are:

@@table @@gcctabopt
@@item STT_FUNC
@@itemx function
Mark the symbol as being a function name.

@@item STT_GNU_IFUNC
@@itemx gnu_indirect_function
Mark the symbol as an indirect function when evaluated during reloc
processing.  (This is only supported on assemblers targeting GNU systems).

@@item STT_OBJECT
@@itemx object
Mark the symbol as being a data object.

@@item STT_TLS
@@itemx tls_object
Mark the symbol as being a thead-local data object.

@@item STT_COMMON
@@itemx common
Mark the symbol as being a common data object.

@@item STT_NOTYPE
@@itemx notype
Does not mark the symbol in any way.  It is supported just for completeness.

@@item gnu_unique_object
Marks the symbol as being a globally unique data object.  The dynamic linker
will make sure that in the entire process there is just one symbol with this
name and type in use.  (This is only supported on assemblers targeting GNU
systems).

@@end table

Note: Some targets support extra types in addition to those listed above.

@@end ifset
@@end ifset

@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}

@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128, ,@@code{.sleb128}}.

@@ifset COFF
@@node Val
@@section @@code{.val @@var{addr}}

@@cindex @@code{val} directive
@@cindex COFF value attribute
@@cindex value attribute, COFF
This directive, permitted only within @@code{.def}/@@code{.endef} pairs,
records the address @@var{addr} as the value attribute of a symbol table
entry.
@@ifset BOUT

@@samp{.val} is used only for COFF output; when @@command{@@value{AS}} is
configured for @@code{b.out}, it accepts this directive but ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@node Version
@@section @@code{.version "@@var{string}"}

@@cindex @@code{version} directive
This directive creates a @@code{.note} section and places into it an ELF
formatted note of type NT_VERSION.  The note's name is set to @@code{string}.
@@end ifset

@@ifset ELF
@@node VTableEntry
@@section @@code{.vtable_entry @@var{table}, @@var{offset}}

@@cindex @@code{vtable_entry} directive
This directive finds or creates a symbol @@code{table} and creates a
@@code{VTABLE_ENTRY} relocation for it with an addend of @@code{offset}.

@@node VTableInherit
@@section @@code{.vtable_inherit @@var{child}, @@var{parent}}

@@cindex @@code{vtable_inherit} directive
This directive finds the symbol @@code{child} and finds or creates the symbol
@@code{parent} and then creates a @@code{VTABLE_INHERIT} relocation for the
parent whose addend is the value of the child symbol.  As a special case the
parent name of @@code{0} is treated as referring to the @@code{*ABS*} section.
@@end ifset

@@node Warning
@@section @@code{.warning "@@var{string}"}
@@cindex warning directive
Similar to the directive @@code{.error}
(@@pxref{Error,,@@code{.error "@@var{string}"}}), but just emits a warning.

@@node Weak
@@section @@code{.weak @@var{names}}

@@cindex @@code{weak} directive
This directive sets the weak attribute on the comma separated list of symbol
@@code{names}.  If the symbols do not already exist, they will be created.

On COFF targets other than PE, weak symbols are a GNU extension.  This
directive sets the weak attribute on the comma separated list of symbol
@@code{names}.  If the symbols do not already exist, they will be created.

On the PE target, weak symbols are supported natively as weak aliases.
When a weak symbol is created that is not an alias, GAS creates an
alternate symbol to hold the default value.

@@node Weakref
@@section @@code{.weakref @@var{alias}, @@var{target}}

@@cindex @@code{weakref} directive
This directive creates an alias to the target symbol that enables the symbol to
be referenced with weak-symbol semantics, but without actually making it weak.
If direct references or definitions of the symbol are present, then the symbol
will not be weak, but if all references to it are through weak references, the
symbol will be marked as weak in the symbol table.

The effect is equivalent to moving all references to the alias to a separate
assembly source file, renaming the alias to the symbol in it, declaring the
symbol as weak there, and running a reloadable link to merge the object files
resulting from the assembly of the new source file and the old source file that
had the references to the alias removed.

The alias itself never makes to the symbol table, and is entirely handled
within the assembler.

@@node Word
@@section @@code{.word @@var{expressions}}

@@cindex @@code{word} directive
This directive expects zero or more @@var{expressions}, of any section,
separated by commas.
@@ifclear GENERIC
@@ifset W32
For each expression, @@command{@@value{AS}} emits a 32-bit number.
@@end ifset
@@ifset W16
For each expression, @@command{@@value{AS}} emits a 16-bit number.
@@end ifset
@@end ifclear
@@ifset GENERIC

The size of the number emitted, and its byte order,
depend on what target computer the assembly is for.
@@end ifset

@@c on amd29k, i960, sparc the "special treatment to support compilers" doesn't
@@c happen---32-bit addressability, period; no long/short jumps.
@@ifset DIFF-TBL-KLUGE
@@cindex difference tables altered
@@cindex altered difference tables
@@quotation
@@emph{Warning: Special Treatment to support Compilers}
@@end quotation

@@ifset GENERIC
Machines with a 32-bit address space, but that do less than 32-bit
addressing, require the following special treatment.  If the machine of
interest to you does 32-bit addressing (or doesn't require it;
@@pxref{Machine Dependencies}), you can ignore this issue.

@@end ifset
In order to assemble compiler output into something that works,
@@command{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
Directives of the form @@samp{.word sym1-sym2} are often emitted by
compilers as part of jump tables.  Therefore, when @@command{@@value{AS}} assembles a
directive of the form @@samp{.word sym1-sym2}, and the difference between
@@code{sym1} and @@code{sym2} does not fit in 16 bits, @@command{@@value{AS}}
creates a @@dfn{secondary jump table}, immediately before the next label.
This secondary jump table is preceded by a short-jump to the
first byte after the secondary table.  This short-jump prevents the flow
of control from accidentally falling into the new table.  Inside the
table is a long-jump to @@code{sym2}.  The original @@samp{.word}
contains @@code{sym1} minus the address of the long-jump to
@@code{sym2}.

If there were several occurrences of @@samp{.word sym1-sym2} before the
secondary jump table, all of them are adjusted.  If there was a
@@samp{.word sym3-sym4}, that also did not fit in sixteen bits, a
long-jump to @@code{sym4} is included in the secondary jump table,
and the @@code{.word} directives are adjusted to contain @@code{sym3}
minus the address of the long-jump to @@code{sym4}; and so on, for as many
entries in the original jump table as necessary.

@@ifset INTERNALS
@@emph{This feature may be disabled by compiling @@command{@@value{AS}} with the
@@samp{-DWORKING_DOT_WORD} option.} This feature is likely to confuse
assembly language programmers.
@@end ifset
@@end ifset
@@c end     DIFF-TBL-KLUGE

@@node Deprecated
@@section Deprecated Directives

@@cindex deprecated directives
@@cindex obsolescent directives
One day these directives won't work.
They are included for compatibility with older assemblers.
@@table @@t
@@item .abort
@@item .line
@@end table

@@ifset ELF
@@node Object Attributes
@@chapter Object Attributes
@@cindex object attributes

@@command{@@value{AS}} assembles source files written for a specific architecture
into object files for that architecture.  But not all object files are alike.
Many architectures support incompatible variations.  For instance, floating
point arguments might be passed in floating point registers if the object file
requires hardware floating point support---or floating point arguments might be
passed in integer registers if the object file supports processors with no
hardware floating point unit.  Or, if two objects are built for different
generations of the same architecture, the combination may require the
newer generation at run-time.

This information is useful during and after linking.  At link time,
@@command{@@value{LD}} can warn about incompatible object files.  After link
time, tools like @@command{gdb} can use it to process the linked file
correctly.

Compatibility information is recorded as a series of object attributes.  Each
attribute has a @@dfn{vendor}, @@dfn{tag}, and @@dfn{value}.  The vendor is a
string, and indicates who sets the meaning of the tag.  The tag is an integer,
and indicates what property the attribute describes.  The value may be a string
or an integer, and indicates how the property affects this object.  Missing
attributes are the same as attributes with a zero value or empty string value.

Object attributes were developed as part of the ABI for the ARM Architecture.
The file format is documented in @@cite{ELF for the ARM Architecture}.

@@menu
* GNU Object Attributes::               @@sc{gnu} Object Attributes
* Defining New Object Attributes::      Defining New Object Attributes
@@end menu

@@node GNU Object Attributes
@@section @@sc{gnu} Object Attributes

The @@code{.gnu_attribute} directive records an object attribute
with vendor @@samp{gnu}.

Except for @@samp{Tag_compatibility}, which has both an integer and a string for
its value, @@sc{gnu} attributes have a string value if the tag number is odd and
an integer value if the tag number is even.  The second bit (@@code{@@var{tag} &
2} is set for architecture-independent attributes and clear for
architecture-dependent ones.

@@subsection Common @@sc{gnu} attributes

These attributes are valid on all architectures.

@@table @@r
@@item Tag_compatibility (32)
The compatibility attribute takes an integer flag value and a vendor name.  If
the flag value is 0, the file is compatible with other toolchains.  If it is 1,
then the file is only compatible with the named toolchain.  If it is greater
than 1, the file can only be processed by other toolchains under some private
arrangement indicated by the flag value and the vendor name.
@@end table

@@subsection MIPS Attributes

@@table @@r
@@item Tag_GNU_MIPS_ABI_FP (4)
The floating-point ABI used by this object file.  The value will be:

@@itemize @@bullet
@@item
0 for files not affected by the floating-point ABI.
@@item
1 for files using the hardware floating-point with a standard double-precision
FPU.
@@item
2 for files using the hardware floating-point ABI with a single-precision FPU.
@@item
3 for files using the software floating-point ABI.
@@item
4 for files using the hardware floating-point ABI with 64-bit wide
double-precision floating-point registers and 32-bit wide general
purpose registers.
@@end itemize
@@end table

@@subsection PowerPC Attributes

@@table @@r
@@item Tag_GNU_Power_ABI_FP (4)
The floating-point ABI used by this object file.  The value will be:

@@itemize @@bullet
@@item
0 for files not affected by the floating-point ABI.
@@item
1 for files using double-precision hardware floating-point ABI.
@@item
2 for files using the software floating-point ABI.
@@item
3 for files using single-precision hardware floating-point ABI.
@@end itemize

@@item Tag_GNU_Power_ABI_Vector (8)
The vector ABI used by this object file.  The value will be:

@@itemize @@bullet
@@item
0 for files not affected by the vector ABI.
@@item
1 for files using general purpose registers to pass vectors.
@@item
2 for files using AltiVec registers to pass vectors.
@@item
3 for files using SPE registers to pass vectors.
@@end itemize
@@end table

@@node Defining New Object Attributes
@@section Defining New Object Attributes

If you want to define a new @@sc{gnu} object attribute, here are the places you
will need to modify.  New attributes should be discussed on the @@samp{binutils}
mailing list.

@@itemize @@bullet
@@item
This manual, which is the official register of attributes.
@@item
The header for your architecture @@file{include/elf}, to define the tag.
@@item
The @@file{bfd} support file for your architecture, to merge the attribute
and issue any appropriate link warnings.
@@item
Test cases in @@file{ld/testsuite} for merging and link warnings.
@@item
@@file{binutils/readelf.c} to display your attribute.
@@item
GCC, if you want the compiler to mark the attribute automatically.
@@end itemize

@@end ifset

@@ifset GENERIC
@@node Machine Dependencies
@@chapter Machine Dependent Features

@@cindex machine dependencies
The machine instruction sets are (almost by definition) different on
each machine where @@command{@@value{AS}} runs.  Floating point representations
vary as well, and @@command{@@value{AS}} often supports a few additional
directives or command-line options for compatibility with other
assemblers on a particular platform.  Finally, some versions of
@@command{@@value{AS}} support special pseudo-instructions for branch
optimization.

This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

@@menu
@@ifset AARCH64
* AArch64-Dependent::		AArch64 Dependent Features
@@end ifset
@@ifset ALPHA
* Alpha-Dependent::		Alpha Dependent Features
@@end ifset
@@ifset ARC
* ARC-Dependent::               ARC Dependent Features
@@end ifset
@@ifset ARM
* ARM-Dependent::               ARM Dependent Features
@@end ifset
@@ifset AVR
* AVR-Dependent::               AVR Dependent Features
@@end ifset
@@ifset Blackfin
* Blackfin-Dependent::		Blackfin Dependent Features
@@end ifset
@@ifset CR16
* CR16-Dependent::              CR16 Dependent Features
@@end ifset
@@ifset CRIS
* CRIS-Dependent::              CRIS Dependent Features
@@end ifset
@@ifset D10V
* D10V-Dependent::              D10V Dependent Features
@@end ifset
@@ifset D30V
* D30V-Dependent::              D30V Dependent Features
@@end ifset
@@ifset EPIPHANY
* Epiphany-Dependent::          EPIPHANY Dependent Features
@@end ifset
@@ifset H8/300
* H8/300-Dependent::            Renesas H8/300 Dependent Features
@@end ifset
@@ifset HPPA
* HPPA-Dependent::              HPPA Dependent Features
@@end ifset
@@ifset I370
* ESA/390-Dependent::           IBM ESA/390 Dependent Features
@@end ifset
@@ifset I80386
* i386-Dependent::              Intel 80386 and AMD x86-64 Dependent Features
@@end ifset
@@ifset I860
* i860-Dependent::              Intel 80860 Dependent Features
@@end ifset
@@ifset I960
* i960-Dependent::              Intel 80960 Dependent Features
@@end ifset
@@ifset IA64
* IA-64-Dependent::             Intel IA-64 Dependent Features
@@end ifset
@@ifset IP2K
* IP2K-Dependent::              IP2K Dependent Features
@@end ifset
@@ifset LM32
* LM32-Dependent::              LM32 Dependent Features
@@end ifset
@@ifset M32C
* M32C-Dependent::              M32C Dependent Features
@@end ifset
@@ifset M32R
* M32R-Dependent::              M32R Dependent Features
@@end ifset
@@ifset M680X0
* M68K-Dependent::              M680x0 Dependent Features
@@end ifset
@@ifset M68HC11
* M68HC11-Dependent::           M68HC11 and 68HC12 Dependent Features
@@end ifset
@@ifset METAG
* Meta-Dependent ::             Meta Dependent Features
@@end ifset
@@ifset MICROBLAZE
* MicroBlaze-Dependent::	MICROBLAZE Dependent Features
@@end ifset
@@ifset MIPS
* MIPS-Dependent::              MIPS Dependent Features
@@end ifset
@@ifset MMIX
* MMIX-Dependent::              MMIX Dependent Features
@@end ifset
@@ifset MSP430
* MSP430-Dependent::		MSP430 Dependent Features
@@end ifset
@@ifset NIOSII
* NiosII-Dependent::            Altera Nios II Dependent Features
@@end ifset
@@ifset NS32K
* NS32K-Dependent::		NS32K Dependent Features
@@end ifset
@@ifset SH
* SH-Dependent::                Renesas / SuperH SH Dependent Features
* SH64-Dependent::              SuperH SH64 Dependent Features
@@end ifset
@@ifset PDP11
* PDP-11-Dependent::            PDP-11 Dependent Features
@@end ifset
@@ifset PJ
* PJ-Dependent::                picoJava Dependent Features
@@end ifset
@@ifset PPC
* PPC-Dependent::               PowerPC Dependent Features
@@end ifset
@@ifset RL78
* RL78-Dependent::              RL78 Dependent Features
@@end ifset
@@ifset RX
* RX-Dependent::                RX Dependent Features
@@end ifset
@@ifset S390
* S/390-Dependent::             IBM S/390 Dependent Features
@@end ifset
@@ifset SCORE
* SCORE-Dependent::             SCORE Dependent Features
@@end ifset
@@ifset SPARC
* Sparc-Dependent::             SPARC Dependent Features
@@end ifset
@@ifset TIC54X
* TIC54X-Dependent::            TI TMS320C54x Dependent Features
@@end ifset
@@ifset TIC6X
* TIC6X-Dependent ::            TI TMS320C6x Dependent Features
@@end ifset
@@ifset TILEGX
* TILE-Gx-Dependent ::          Tilera TILE-Gx Dependent Features
@@end ifset
@@ifset TILEPRO
* TILEPro-Dependent ::          Tilera TILEPro Dependent Features
@@end ifset
@@ifset V850
* V850-Dependent::              V850 Dependent Features
@@end ifset
@@ifset XGATE
* XGATE-Dependent::             XGATE Features
@@end ifset
@@ifset XSTORMY16
* XSTORMY16-Dependent::         XStormy16 Dependent Features
@@end ifset
@@ifset XTENSA
* Xtensa-Dependent::            Xtensa Dependent Features
@@end ifset
@@ifset Z80
* Z80-Dependent::               Z80 Dependent Features
@@end ifset
@@ifset Z8000
* Z8000-Dependent::             Z8000 Dependent Features
@@end ifset
@@ifset VAX
* Vax-Dependent::               VAX Dependent Features
@@end ifset
@@end menu

@@lowersections
@@end ifset

@@c The following major nodes are *sections* in the GENERIC version, *chapters*
@@c in single-cpu versions.  This is mainly achieved by @@lowersections.  There is a
@@c peculiarity: to preserve cross-references, there must be a node called
@@c "Machine Dependencies".  Hence the conditional nodenames in each
@@c major node below.  Node defaulting in makeinfo requires adjacency of
@@c node and sectioning commands; hence the repetition of @@chapter BLAH
@@c in both conditional blocks.

@@ifset AARCH64
@@include c-aarch64.texi
@@end ifset

@@ifset ALPHA
@@include c-alpha.texi
@@end ifset

@@ifset ARC
@@include c-arc.texi
@@end ifset

@@ifset ARM
@@include c-arm.texi
@@end ifset

@@ifset AVR
@@include c-avr.texi
@@end ifset

@@ifset Blackfin
@@include c-bfin.texi
@@end ifset

@@ifset CR16
@@include c-cr16.texi
@@end ifset

@@ifset CRIS
@@include c-cris.texi
@@end ifset

@@ifset Renesas-all
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter Machine Dependent Features

The machine instruction sets are different on each Renesas chip family,
and there are also some syntax differences among the families.  This
chapter describes the specific @@command{@@value{AS}} features for each
family.

@@menu
* H8/300-Dependent::            Renesas H8/300 Dependent Features
* SH-Dependent::                Renesas SH Dependent Features
@@end menu
@@lowersections
@@end ifclear
@@end ifset

@@ifset D10V
@@include c-d10v.texi
@@end ifset

@@ifset D30V
@@include c-d30v.texi
@@end ifset

@@ifset EPIPHANY
@@include c-epiphany.texi
@@end ifset

@@ifset H8/300
@@include c-h8300.texi
@@end ifset

@@ifset HPPA
@@include c-hppa.texi
@@end ifset

@@ifset I370
@@include c-i370.texi
@@end ifset

@@ifset I80386
@@include c-i386.texi
@@end ifset

@@ifset I860
@@include c-i860.texi
@@end ifset

@@ifset I960
@@include c-i960.texi
@@end ifset

@@ifset IA64
@@include c-ia64.texi
@@end ifset

@@ifset IP2K
@@include c-ip2k.texi
@@end ifset

@@ifset LM32
@@include c-lm32.texi
@@end ifset

@@ifset M32C
@@include c-m32c.texi
@@end ifset

@@ifset M32R
@@include c-m32r.texi
@@end ifset

@@ifset M680X0
@@include c-m68k.texi
@@end ifset

@@ifset M68HC11
@@include c-m68hc11.texi
@@end ifset

@@ifset METAG
@@include c-metag.texi
@@end ifset

@@ifset MICROBLAZE
@@include c-microblaze.texi
@@end ifset

@@ifset MIPS
@@include c-mips.texi
@@end ifset

@@ifset MMIX
@@include c-mmix.texi
@@end ifset

@@ifset MSP430
@@include c-msp430.texi
@@end ifset

@@ifset NIOSII
@@include c-nios2.texi
@@end ifset

@@ifset NS32K
@@include c-ns32k.texi
@@end ifset

@@ifset PDP11
@@include c-pdp11.texi
@@end ifset

@@ifset PJ
@@include c-pj.texi
@@end ifset

@@ifset PPC
@@include c-ppc.texi
@@end ifset

@@ifset RL78
@@include c-rl78.texi
@@end ifset

@@ifset RX
@@include c-rx.texi
@@end ifset

@@ifset S390
@@include c-s390.texi
@@end ifset

@@ifset SCORE
@@include c-score.texi
@@end ifset

@@ifset SH
@@include c-sh.texi
@@include c-sh64.texi
@@end ifset

@@ifset SPARC
@@include c-sparc.texi
@@end ifset

@@ifset TIC54X
@@include c-tic54x.texi
@@end ifset

@@ifset TIC6X
@@include c-tic6x.texi
@@end ifset

@@ifset TILEGX
@@include c-tilegx.texi
@@end ifset

@@ifset TILEPRO
@@include c-tilepro.texi
@@end ifset

@@ifset Z80
@@include c-z80.texi
@@end ifset

@@ifset Z8000
@@include c-z8k.texi
@@end ifset

@@ifset VAX
@@include c-vax.texi
@@end ifset

@@ifset V850
@@include c-v850.texi
@@end ifset

@@ifset XGATE
@@include c-xgate.texi
@@end ifset

@@ifset XSTORMY16
@@include c-xstormy16.texi
@@end ifset

@@ifset XTENSA
@@include c-xtensa.texi
@@end ifset

@@ifset GENERIC
@@c reverse effect of @@down at top of generic Machine-Dep chapter
@@raisesections
@@end ifset

@@node Reporting Bugs
@@chapter Reporting Bugs
@@cindex bugs in assembler
@@cindex reporting bugs in assembler

Your bug reports play an essential role in making @@command{@@value{AS}} reliable.

Reporting a bug may help you by bringing a solution to your problem, or it may
not.  But in any case the principal function of a bug report is to help the
entire community by making the next version of @@command{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@command{@@value{AS}}.

In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

@@menu
* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs
@@end menu

@@node Bug Criteria
@@section Have You Found a Bug?
@@cindex bug criteria

If you are not sure whether you have found a bug, here are some guidelines:

@@itemize @@bullet
@@cindex fatal signal
@@cindex assembler crash
@@cindex crash of assembler
@@item
If the assembler gets a fatal signal, for any input whatever, that is a
@@command{@@value{AS}} bug.  Reliable assemblers never crash.

@@cindex error on valid input
@@item
If @@command{@@value{AS}} produces an error message for valid input, that is a bug.

@@cindex invalid input
@@item
If @@command{@@value{AS}} does not produce an error message for invalid input, that
is a bug.  However, you should note that your idea of ``invalid input'' might
be our idea of ``an extension'' or ``support for traditional practice''.

@@item
If you are an experienced user of assemblers, your suggestions for improvement
of @@command{@@value{AS}} are welcome in any case.
@@end itemize

@@node Bug Reporting
@@section How to Report Bugs
@@cindex bug reports
@@cindex assembler bugs, reporting

A number of companies and individuals offer support for @@sc{gnu} products.  If
you obtained @@command{@@value{AS}} from a support organization, we recommend you
contact that organization first.

You can find contact information for many support companies and
individuals in the file @@file{etc/SERVICE} in the @@sc{gnu} Emacs
distribution.

@@ifset BUGURL
In any event, we also recommend that you send bug reports for @@command{@@value{AS}}
to @@value{BUGURL}.
@@end ifset

The fundamental principle of reporting bugs usefully is this:
@@strong{report all the facts}.  If you are not sure whether to state a
fact or leave it out, state it!

Often people omit facts because they think they know what causes the problem
and assume that some details do not matter.  Thus, you might assume that the
name of a symbol you use in an example does not matter.  Well, probably it does
not, but one cannot be sure.  Perhaps the bug is a stray memory reference which
happens to fetch from the location where that name is stored in memory;
perhaps, if the name were different, the contents of that location would fool
the assembler into doing the right thing despite the bug.  Play it safe and
give a specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix the bug if
it is new to us.  Therefore, always write your bug reports on the assumption
that the bug has not been reported previously.

Sometimes people give a few sketchy facts and ask, ``Does this ring a
bell?''  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.
You might as well expedite matters by sending them to begin with.

To enable us to fix the bug, you should include all these things:

@@itemize @@bullet
@@item
The version of @@command{@@value{AS}}.  @@command{@@value{AS}} announces it if you start
it with the @@samp{--version} argument.

Without this, we will not know whether there is any point in looking for
the bug in the current version of @@command{@@value{AS}}.

@@item
Any patches you may have applied to the @@command{@@value{AS}} source.

@@item
The type of machine you are using, and the operating system name and
version number.

@@item
What compiler (and its version) was used to compile @@command{@@value{AS}}---e.g.
``@@code{gcc-2.7}''.

@@item
The command arguments you gave the assembler to assemble your example and
observe the bug.  To guarantee you will not omit something important, list them
all.  A copy of the Makefile (or the output from make) is sufficient.

If we were to try to guess the arguments, we would probably guess wrong
and then we might not encounter the bug.

@@item
A complete input file that will reproduce the bug.  If the bug is observed when
the assembler is invoked via a compiler, send the assembler source, not the
high level language source.  Most compilers will produce the assembler source
when run with the @@samp{-S} option.  If you are using @@code{@@value{GCC}}, use
the options @@samp{-v --save-temps}; this will save the assembler source in a
file with an extension of @@file{.s}, and also show you exactly how
@@command{@@value{AS}} is being run.

@@item
A description of what behavior you observe that you believe is
incorrect.  For example, ``It gets a fatal signal.''

Of course, if the bug is that @@command{@@value{AS}} gets a fatal signal, then we
will certainly notice it.  But if the bug is incorrect output, we might not
notice unless it is glaringly wrong.  You might as well not give us a chance to
make a mistake.

Even if the problem you experience is a fatal signal, you should still say so
explicitly.  Suppose something strange is going on, such as, your copy of
@@command{@@value{AS}} is out of sync, or you have encountered a bug in the C
library on your system.  (This has happened!)  Your copy might crash and ours
would not.  If you told us to expect a crash, then when ours fails to crash, we
would know that the bug was not happening for us.  If you had not told us to
expect a crash, then we would not be able to draw any conclusion from our
observations.

@@item
If you wish to suggest changes to the @@command{@@value{AS}} source, send us context
diffs, as generated by @@code{diff} with the @@samp{-u}, @@samp{-c}, or @@samp{-p}
option.  Always send diffs from the old file to the new file.  If you even
discuss something in the @@command{@@value{AS}} source, refer to it by context, not
by line number.

The line numbers in our development sources will not match those in your
sources.  Your line numbers would convey no useful information to us.
@@end itemize

Here are some things that are not necessary:

@@itemize @@bullet
@@item
A description of the envelope of the bug.

Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.

This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
We recommend that you save your time for something else.

Of course, if you can find a simpler example to report @@emph{instead}
of the original one, that is a convenience for us.  Errors in the
output will be easier to spot, running under the debugger will take
less time, and so on.

However, simplification is not vital; if you do not want to do this,
report the bug anyway and send us the entire test case you used.

@@item
A patch for the bug.

A patch for the bug does help us if it is a good one.  But do not omit
the necessary information, such as the test case, on the assumption that
a patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.

Sometimes with a program as complicated as @@command{@@value{AS}} it is very hard to
construct an example that will make the program follow a certain path through
the code.  If you do not send us the example, we will not be able to construct
one, so we will not be able to verify that the bug is fixed.

And if we cannot understand what bug you are trying to fix, or why your
patch should be an improvement, we will not install it.  A test case will
help us to understand.

@@item
A guess about what the bug is or what it depends on.

Such guesses are usually wrong.  Even we cannot guess right about such
things without first using the debugger to find the facts.
@@end itemize

@@node Acknowledgements
@@chapter Acknowledgements

If you have contributed to GAS and your name isn't listed here,
it is not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently
@@c (October 2012),
the maintainer is Nick Clifton (email address @@code{nickc@@@@redhat.com}).

Dean Elsner wrote the original @@sc{gnu} assembler for the VAX.@@footnote{Any
more details?}

Jay Fenlason maintained GAS for a while, adding support for GDB-specific debug
information and the 68k series machines, most of the preprocessing pass, and
extensive changes in @@file{messages.c}, @@file{input-file.c}, @@file{write.c}.

K. Richard Pixley maintained GAS for a while, adding various enhancements and
many bug fixes, including merging support for several processors, breaking GAS
up to handle multiple object file format back ends (including heavy rewrite,
testing, an integration of the coff and b.out back ends), adding configuration
including heavy testing and verification of cross assemblers and file splits
and renaming, converted GAS to strictly ANSI C including full prototypes, added
support for m680[34]0 and cpu32, did considerable work on i960 including a COFF
port (including considerable amounts of reverse engineering), a SPARC opcode
file rewrite, DECstation, rs6000, and hp300hpux host ports, updated ``know''
assertions and made them work, much other reorganization, cleanup, and lint.

Ken Raeburn wrote the high-level BFD interface code to replace most of the code
in format-specific I/O modules.

The original VMS support was contributed by David L. Kashtan.  Eric Youngdale
has done much work with it since.

The Intel 80386 machine description was written by Eliot Dresselhaus.

Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

The Motorola 88k machine description was contributed by Devon Bowen of Buffalo
University and Torbjorn Granlund of the Swedish Institute of Computer Science.

Keith Knowles at the Open Software Foundation wrote the original MIPS back end
(@@file{tc-mips.c}, @@file{tc-mips.h}), and contributed Rose format support
(which hasn't been merged in yet).  Ralph Campbell worked with the MIPS code to
support a.out format.

Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k,
tc-h8300), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back end to
use BFD for some low-level operations, for use with the H8/300 and AMD 29k
targets.

John Gilmore built the AMD 29000 support, added @@code{.include} support, and
simplified the configuration of which versions accept which directives.  He
updated the 68k machine description so that Motorola's opcodes always produced
fixed-size instructions (e.g., @@code{jsr}), while synthetic instructions
remained shrinkable (@@code{jbsr}).  John fixed many bugs, including true tested
cross-compilation support, and one bug in relaxation that took a week and
required the proverbial one-bit fix.

Ian Lance Taylor of Cygnus Support merged the Motorola and MIT syntax for the
68k, completed support for some COFF targets (68k, i386 SVR3, and SCO Unix),
added support for MIPS ECOFF and ELF targets, wrote the initial RS/6000 and
PowerPC assembler, and made a few other minor patches.

Steve Chamberlain made GAS able to generate listings.

Hewlett-Packard contributed support for the HP9000/300.

Jeff Law wrote GAS and BFD support for the native HPPA object format (SOM)
along with a fairly extensive HPPA testsuite (for both SOM and ELF object
formats).  This work was supported by both the Center for Software Science at
the University of Utah and Cygnus Support.

Support for ELF format files has been worked on by Mark Eichin of Cygnus
Support (original, incomplete implementation for SPARC), Pete Hoogenboom and
Jeff Law at the University of Utah (HPPA mainly), Michael Meissner of the Open
Software Foundation (i386 mainly), and Ken Raeburn of Cygnus Support (sparc,
and some initial 64-bit support).

Linas Vepstas added GAS support for the ESA/390 ``IBM 370'' architecture.

Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote GAS and BFD
support for openVMS/Alpha.

Timothy Wall, Michael Hayes, and Greg Smart contributed to the various tic*
flavors.

David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from Tensilica,
Inc.@@: added support for Xtensa processors.

Several engineers at Cygnus Support have also provided many small bug fixes and
configuration enhancements.

Jon Beniston added support for the Lattice Mico32 architecture.

Many others have contributed large or small bugfixes and enhancements.  If
you have contributed significant work and are not mentioned on this list, and
want to be, let us know.  Some of the history has been lost; we are not
intentionally leaving anyone out.

@@node GNU Free Documentation License
@@appendix GNU Free Documentation License
@@include fdl.texi

@@node AS Index
@@unnumbered AS Index

@@printindex cp

@@bye
@@c Local Variables:
@@c fill-column: 79
@@c End:
@


1.273
log
@[AArch64, ILP32] Retire -milp32 and -mlp64; use -mabi=ilp32 and -mabi=lp64.

gas/

	* config/tc-aarch64.c (enum aarch64_abi_type): New enumeration tag.
	(AARCH64_ABI_LP64, AARCH64_ABI_ILP32): New enumerators.
	(aarch64_abi): New variable.
	(ilp32_p): Change to be a macro.
	(aarch64_opts): Remove the support for option -milp32 and -mlp64.
	(struct aarch64_option_abi_value_table): New struct.
	(aarch64_abis): New table.
	(aarch64_parse_abi): New function.
	(aarch64_long_opts): Add entry for -mabi=.
	* doc/as.texinfo (Target AArch64 options): Document -mabi.
	* doc/c-aarch64.texi: Likewise.

gas/testsuite/

	* gas/aarch64/ilp32-basic.d (#as): Update to use -mabi=ilp32
@
text
@d415 1
d1333 6
@


1.272
log
@	include/elf/
	* mips.h (EF_MIPS_NAN2008): New macro.

	bfd/
	* elfxx-mips.c (_bfd_mips_elf_merge_private_bfd_data): Handle
	EF_MIPS_NAN2008.
	(_bfd_mips_elf_print_private_bfd_data): Likewise.

	binutils/
	* readelf.c (get_machine_flags): Handle EF_MIPS_NAN2008.

	gas/
	* config/tc-mips.c (mips_flag_nan2008): New variable.
	(options): Add OPTION_NAN enum value.
	(md_longopts): Handle it.
	(md_parse_option): Likewise.
	(s_nan): New function.
	(mips_elf_final_processing): Handle EF_MIPS_NAN2008.
	(md_show_usage): Add -mnan.

	* doc/as.texinfo (Overview): Add -mnan.
	* doc/c-mips.texi (MIPS Opts): Document -mnan.
	(MIPS NaN Encodings): New node.  Document .nan directive.
	(MIPS-Dependent): List the new node.

	gas/testsuite/
	* gas/mips/nan-2008-1.d: New test.
	* gas/mips/nan-2008-2.d: New test.
	* gas/mips/nan-2008-3.d: New test.
	* gas/mips/nan-2008-4.d: New test.
	* gas/mips/nan-legacy-1.d: New test.
	* gas/mips/nan-legacy-2.d: New test.
	* gas/mips/nan-legacy-3.d: New test.
	* gas/mips/nan-legacy-4.d: New test.
	* gas/mips/nan-legacy-5.d: New test.
	* gas/mips/nan-error-1.l: New list test.
	* gas/mips/nan-error-2.l: New list test.
	* gas/mips/nan-2008-override.s: New test source.
	* gas/mips/nan-2008.s: New test source.
	* gas/mips/nan-legacy-override.s: New test source.
	* gas/mips/nan-legacy.s: New test source.
	* gas/mips/nan-error-1.s: New test source.
	* gas/mips/nan-error-2.s: New test source.
	* gas/mips/mips.exp: Run the new tests.

	ld/testsuite/
	* ld-mips-elf/nan-2008.d: New test.
	* ld-mips-elf/nan-legacy.d: New test.
	* ld-mips-elf/nan-mixed-1.d: New test.
	* ld-mips-elf/nan-mixed-2.d: New test.
	* ld-mips-elf/nan-2008.s: New test source.
	* ld-mips-elf/nan-legacy.s: New test source.
@
text
@d251 1
@


1.271
log
@	* doc/as.texinfo (Overview): Remove @@samp from MIPS ISA names.
	* doc/c-mips.texi (MIPS Options): Remove @@sc from MIPS ISA names.
	Replace @@sc{mips16} with literal `MIPS16'.
	(MIPS ISA): Replace @@sc{mips3} with literal `MIPS III'.
@
text
@d405 1
d1367 4
@


1.270
log
@	bfd/
	* elfxx-mips.h (_bfd_mips_elf_insn32): New prototype.
	* elfxx-mips.c (mips_elf_link_hash_table): Add insn32 member.
	(STUB_MOVE32_MICROMIPS, STUB_JALR32_MICROMIPS): New macros.
	(MICROMIPS_INSN32_FUNCTION_STUB_NORMAL_SIZE): Likewise.
	(MICROMIPS_INSN32_FUNCTION_STUB_BIG_SIZE): Likewise.
	(micromips_insn32_o32_exec_plt0_entry): New variable.
	(micromips_insn32_o32_exec_plt_entry): Likewise.
	(_bfd_mips_elf_adjust_dynamic_symbol): Handle insn32 mode.
	(mips_elf_estimate_stub_size): Likewise.
	(_bfd_mips_elf_size_dynamic_sections): Likewise.
	(_bfd_mips_elf_finish_dynamic_symbol): Likewise.
	(mips_finish_exec_plt): Likewise.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips_elf_insn32): New function.
	(_bfd_mips_elf_get_synthetic_symtab): Handle insn32 PLT.

	gas/
	* config/tc-mips.c (mips_set_options): Add insn32 member.
	(mips_opts): Initialize it.
	(NOP_INSN, NOP_INSN_SIZE): Handle insn32 mode.
	(options): Add OPTION_INSN32 and OPTION_NO_INSN32 enum values.
	(md_longopts): Add "minsn32" and "mno-insn32" options.
	(is_size_valid): Handle insn32 mode.
	(md_assemble): Pass instruction string down to macro.
	(brk_fmt): Add second dimension and insn32 mode initializers.
	(mfhl_fmt): Likewise.
	(BRK_FMT, MFHL_FMT): Handle insn32 mode.
	(macro_build) <'c'>: Handle microMIPS 32-bit BREAK encoding.
	(macro_build_jalr, move_register): Handle insn32 mode.
	(macro_build_branch_rs): Likewise.
	(macro): Handle insn32 mode.
	<M_JRADDIUSP>, <M_JRC>, <M_MOVEP>: New cases.
	(mips_ip): Handle insn32 mode.
	(md_parse_option): Handle OPTION_INSN32 and OPTION_NO_INSN32.
	(s_mipsset): Handle "insn32" and "noinsn32" pseudo-ops.
	(mips_handle_align): Handle insn32 mode.
	(md_show_usage): Add -minsn32 and -mno-insn32.

	* doc/as.texinfo (Target MIPS options): Add -minsn32 and
	-mno-insn32 options.
	(-minsn32, -mno-insn32): New options.
	* doc/c-mips.texi (MIPS Opts): Add -minsn32 and -mno-insn32
	options.
	(MIPS assembly options): New node.  Document .set insn32 and
	.set noinsn32.
	(MIPS-Dependent): List the new node.

	gas/testsuite/
	* gas/mips/micromips-insn32.d: New test.
	* gas/mips/micromips-noinsn32.d: Likewise.
	* gas/mips/micromips.l: Rename to...
	* gas/mips/micromips-warn.l: ... this.
	* gas/mips/micromips.d: Update accordingly.
	* gas/mips/micromips-trap.d: Likewise.
	* gas/mips/micromips.l: New list test.
	* gas/mips/micromips.s: Add conditionals.
	* gas/mips/mips.exp: Run the new tests.

	include/opcode/
	* mips.h: Add M_JRADDIUSP, M_JRC and M_MOVEP anonymous enum
	values.

	ld/
	* emultempl/mipself.em (insn32): New variable.
	(mips_create_output_section_statements): Handle insn32 mode.
	(PARSE_AND_LIST_PROLOGUE): New macro.
	(PARSE_AND_LIST_LONGOPTS): Likewise.
	(PARSE_AND_LIST_OPTIONS): Likewise.

	* gen-doc.texi: Set MIPS.
	* ld.texinfo: Likewise.
	(Options specific to MIPS targets): New section.
	(ld and MIPS family): New node.
	(Top, Machine Dependent): List the new node.

	opcodes/
	* micromips-opc.c (micromips_opcodes): Add "jraddiusp", "jrc"
	and "movep" macros.
@
text
@d1256 2
a1257 5
@@samp{-mips64r2}
correspond to generic
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, @@samp{MIPS64},
and @@samp{MIPS64 Release 2}
ISA processors, respectively.
@


1.269
log
@	* configure.ac (mips*-*-bsd*, mips*-*-ultrix*, mips*-*-osf*)
	(mips*-*-ecoff*, mips*-*-pe*, mips*-*-irix* [v4 and earlier])
	(mips*-*-lnews*, mips*-*-riscos*): Add gas and ld to noconfigdirs.
	* configure: Regenerate.

gas/
	* NEWS: Note removal of ECOFF support.
	* doc/as.texinfo (--emulation): Update for the removal of MIPS ECOFF.
	* Makefile.am (TARG_ENV_HFILES): Remove config/te-lnews.h.
	(MULTI_CFILES): Remove config/e-mipsecoff.c.
	* Makefile.in: Regenerate.
	* configure.in: Remove MIPS ECOFF references.
	(mips-sony-bsd*, mips-*-bsd*, mips-*-lnews*-ecoff, mips-*-*-ecoff):
	Delete cases.
	(mips-*-irix5*-*, mips*-*-linux*-*, mips*-*-freebsd*)
	(mips*-*-kfreebsd*-gnu, mips-*-*-elf): Fold into...
	(mips-*-*): ...this single case.
	(mipsbecoff, mipslecoff, mipsecoff): Remove emulations.  Expect
	MIPS emulations to be e-mipself*.
	* configure: Regenerate.
	* configure.tgt (mips-sony-bsd*, mips-*-ultrix*, mips-*-osf*)
	(mips-*-ecoff*, mips-*-pe*, mips-*-irix*, ips-*-lnews*, mips-*-riscos*)
	(mips-*-sysv*): Remove coff and ecoff cases.
	* as.c (mipsbecoff, mipslecoff, mipsecoff): Remove.
	* ecoff.c: Remove reference to MIPS ECOFF.
	* config/e-mipsecoff.c, config/te-lnews.h: Delete files.
	* config/tc-mips.c (ECOFF_LITTLE_FORMAT): Delete.
	(RDATA_SECTION_NAME, mips_target_form): Remove COFF and ECOFF cases.
	(mips_hi_fixup): Tweak comment.
	(append_insn): Require a howto.
	(mips_after_parse_args): Remove OBJ_MAYBE_ECOFF code.

gas/testsuite/
	* gas/all/gas.exp: Remove reference to mips-ecoff.
	* gas/mips/branch-misc-1.d, gas/mips/branch-misc-2.d,
	gas/mips/branch-misc-2-64.d, gas/mips/branch-misc-2pic.d,
	gas/mips/branch-misc-2pic-64.d, gas/mips/branch-swap.d: Remove
	skips for mips-*-ecoff.

ld/
	* NEWS: Document the removal of MIPS ECOFF targets.
	* ld.texinfo (--gpsize=@@var{value}): Use MIPS ELF rather than
	MIPS ECOFF as an example of a target that supports small data.
	* ldmain.c (g_switch_value): Likewise.
	* configure.tgt (mips*-*-pe, mips*-dec-ultrix*, mips*-dec-osf*)
	(mips*-sgi-irix* [v4 and earlier], mips*el-*-ecoff*, mips*-*-ecoff*)
	(mips*-*-bsd*, mips*-*-lnews*): Remove cases.
	* Makefile.am (ALL_EMULATION_SOURCES): Remove emipsbig.c, emipsbsd.c,
	emipsidt.c, emipsidtl.c, emipslit.c, emipslnews.c and emipspe.c.
	(emipsbig.c, emipsbsd.c, emipsidt.c, emipsidtl.c, emipslit.c)
	(emipslnews.c, emipspe.c): Delete rules.
	* Makefile.in: Regenerate.
	* emulparams/mipsbig.sh, emulparams/mipsbsd.sh, emulparams/mipsidt.sh,
	emulparams/mipsidtl.sh, emulparams/mipslit.sh, emulparams/mipslnews.sh,
	emulparams/mipspe.sh, emultempl/mipsecoff.em: Delete.
	* emultempl/m68kcoff.em: Update comment to say that MIPS ECOFF support
	has now been removed.
	* emultempl/pe.em: Remove TARGET_IS_mipspe checks.
@
text
@d415 1
d1345 10
@


1.268
log
@gas/
	* doc/as.texinfo: Use MIPS rather than @@sc{mips} throughout.
	Use "CPU" instead of "cpu".
	* doc/c-mips.texi: Likewise.
	(MIPS Opts): Rename to MIPS Options.
	(MIPS option stack): Rename to MIPS Option Stack.
	(MIPS ASE instruction generation overrides): Rename to
	MIPS ASE Instruction Generation Overrides (for now).
	(MIPS floating-point): Rename to MIPS Floating-Point.
@
text
@d1360 10
a1369 22
This option causes @@command{@@value{AS}} to emulate @@command{@@value{AS}} configured
for some other target, in all respects, including output format (choosing
between ELF and ECOFF only), handling of pseudo-opcodes which may generate
debugging information or store symbol table information, and default
endianness.  The available configuration names are: @@samp{mipsecoff},
@@samp{mipself}, @@samp{mipslecoff}, @@samp{mipsbecoff}, @@samp{mipslelf},
@@samp{mipsbelf}.  The first two do not alter the default endianness from that
of the primary target for which the assembler was configured; the others change
the default to little- or big-endian as indicated by the @@samp{b} or @@samp{l}
in the name.  Using @@samp{-EB} or @@samp{-EL} will override the endianness
selection in any case.

This option is currently supported only when the primary target
@@command{@@value{AS}} is configured for is a MIPS ELF or ECOFF target.
Furthermore, the primary target or others specified with
@@samp{--enable-targets=@@dots{}} at configuration time must include support for
the other format, if both are to be available.  For example, the Irix 5
configuration includes support for both.

Eventually, this option will support more configurations, with more
fine-grained control over the assembler's behavior, and will be supported for
more processors.
@


1.267
log
@	gas/
	* config/tc-mips.c (append_insn): Don't do branch relaxation for
	MIPS-3D instructions either.
	(md_convert_frag): Update the COPx branch mask accordingly.

	* config/tc-mips.c (md_show_usage): Document --[no-]relax-branch
	option.
	* doc/as.texinfo (Overview): Add --relax-branch and
	--no-relax-branch.
	* doc/c-mips.texi (MIPS Opts): Document --relax-branch and
	--no-relax-branch.

	gas/testsuite/
	* gas/mips/relax-bc1any.l: New test.
	* gas/mips/relax-bc1any.s: New test source.
	* gas/mips/mips.exp: Run the new test.
@
text
@d1222 1
a1222 1
a @@sc{mips} processor.
d1250 1
a1250 1
Generate code for a particular @@sc{mips} Instruction Set Architecture level.
d1261 2
a1262 2
@@item -march=@@var{CPU}
Generate code for a particular @@sc{mips} cpu.
d1265 1
a1265 1
Schedule and tune for a particular @@sc{mips} cpu.
d1373 1
a1373 1
@@command{@@value{AS}} is configured for is a @@sc{mips} ELF or ECOFF target.
@


1.266
log
@	* elflink.c (_bfd_elf_gc_mark_extra_sections): Remove mark from
	fragmented .debug_line sections associated with unmarked code
	sections.

	* dwarf.c (read_debug_line_header): New function.  Reads in a
	header in a .debug_line section.
	(display_debug_lines_raw): Use new function.  Handle fragmentary
	.debug_line sections.
	(display_debug_lines_decoded): Likewise.
	* readelf.c (process_section_headers): Handle fragmenatry
	.debug_line sections.
	(display_debug_section): Likewise.

	* as.c (Options): Add -gdwarf-sections.
	(parse_args): Likewise.
	* as.h (flag_dwarf_sections): Declare.
	* dwarf2dbg.c (emit_fixed_inc_line_addr): Skip section changes.
	(process_entries): When -gdwarf-sections is enabled generate
	fragmentary .debug_line sections.
	(out_debug_line): Set the section for the .debug_line section end
	symbol.
	* doc/as.texinfo: Document -gdwarf-sections.
	* NEWS: Mention -gdwarf-sections.

	* gas/elf/dwarf2-3.d: Fix expected readelf output.

	* scripttempl/DWARF.sc: Add support for .debug_line.* and
	.debug_line_end.
@
text
@d1352 6
@


1.265
log
@	* doc/as.texinfo: Add support to generate man options for h8300.
	* doc/c-h8300.texi: Likewise.
@
text
@d2 1
a2 3
@@c  Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
@@c  Free Software Foundation, Inc.
d103 1
a103 3
Copyright @@copyright{} 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
Inc.
d152 1
a152 3
Copyright @@copyright{} 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
Inc.
d233 2
a234 1
 [@@b{--gstabs+}] [@@b{--gdwarf-2}] [@@b{--help}] [@@b{-I} @@var{dir}] [@@b{-J}]
d646 9
@


1.264
log
@2013-02-06  Sandra Loosemore  <sandra@@codesourcery.com>
            Andrew Jenner <andrew@@codesourcery.com>

	Based on patches from Altera Corporation.

	bfd/
	* Makefile.am (ALL_MACHINES): Add cpu-nios2.lo.
	(ALL_MACHINES_CFILES): Add cpu-nios2.c.
	(BFD_BACKENDS): Add elf32-nios2.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-nios2.c.
	* Makefile.in: Regenerated.
	* configure.in: Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* configure: Regenerated.
	* config.bfd: Add cases for nios2.
	* archures.c (enum bfd_architecture): Add bfd_arch_nios2.
	(bfd_mach_nios2): Define.
	(bfd_nios2_arch): Declare.
	(bfd_archures_list): Add bfd_nios2_arch.
	* targets.c (bfd_elf32_bignios2_vec): Declare.
	(bfd_elf32_littlenios2_vec): Declare.
	(_bfd_target_vector): Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* elf-bfd.h (enum elf_target_id): Add NIOS2_ELF_DATA.
	* reloc.c (enum bfd_reloc_code_real): Add Nios II relocations.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* cpu-nios2.c: New file.
	* elf32-nios2.c: New file.

	opcodes/
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add nios2-dis.c and
	nios2-opc.c.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_nios2_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_nios2): Define.
	(disassembler): Add case for bfd_arch_nios2.
	* nios2-dis.c: New file.
	* nios2-opc.c: New file.

	include/
	* dis-asm.h (print_insn_big_nios2): Declare.
	(print_insn_little_nios2): Declare.

	include/elf
	* nios2.h: New file.

	include/opcode/
	* nios2.h: New file.

	gas/
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-nios2.c.
	(TARGET_CPU_HFILES): Add config/tc-nios2.h.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-linux*.
	* config/obj-elf.c: Conditionally include elf/nios2.h.
	* config/tc-nios2.c: New file.
	* config/tc-nios2.h: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-nios2.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set NIOSII.
	* doc/as.texinfo (Overview): Add Nios II options.
	(Machine Dependencies): Include c-nios2.texi.
	* doc/c-nios2.texi: New file.
	* NEWS: Note Altera Nios II support.

	gas/testsuite/
	* gas/nios2/add.d: New.
	* gas/nios2/add.s: New.
	* gas/nios2/align_fill.d: New.
	* gas/nios2/align_fill.s: New.
	* gas/nios2/align_text.d: New.
	* gas/nios2/align_text.s: New.
	* gas/nios2/and.d: New.
	* gas/nios2/and.s: New.
	* gas/nios2/branch.d: New.
	* gas/nios2/branch.s: New.
	* gas/nios2/break.d: New.
	* gas/nios2/break.s: New.
	* gas/nios2/bret.d: New.
	* gas/nios2/bret.s: New.
	* gas/nios2/cache.d: New.
	* gas/nios2/cache.s: New.
	* gas/nios2/call26.d: New.
	* gas/nios2/call26.s: New.
	* gas/nios2/call.d: New.
	* gas/nios2/call.s: New.
	* gas/nios2/cmp.d: New.
	* gas/nios2/cmp.s: New.
	* gas/nios2/comments.d: New.
	* gas/nios2/comments.s: New.
	* gas/nios2/complex.d: New.
	* gas/nios2/complex.s: New.
	* gas/nios2/ctl.d: New.
	* gas/nios2/ctl.s: New.
	* gas/nios2/custom.d: New.
	* gas/nios2/custom.s: New.
	* gas/nios2/etbt.d: New.
	* gas/nios2/etbt.s: New.
	* gas/nios2/flushda.d: New.
	* gas/nios2/flushda.s: New.
	* gas/nios2/illegal.l: New.
	* gas/nios2/illegal.s: New.
	* gas/nios2/jmp.d: New.
	* gas/nios2/jmp.s: New.
	* gas/nios2/ldb.d: New.
	* gas/nios2/ldb.s: New.
	* gas/nios2/ldh.d: New.
	* gas/nios2/ldh.s: New.
	* gas/nios2/ldw.d: New.
	* gas/nios2/ldw.s: New.
	* gas/nios2/lineseparator.d: New.
	* gas/nios2/lineseparator.s: New.
	* gas/nios2/mov.d: New.
	* gas/nios2/movia.d: New.
	* gas/nios2/movia.s: New.
	* gas/nios2/movi.d: New.
	* gas/nios2/movi.s: New.
	* gas/nios2/mov.s: New.
	* gas/nios2/mul.d: New.
	* gas/nios2/mul.s: New.
	* gas/nios2/nios2.exp: New.
	* gas/nios2/nor.d: New.
	* gas/nios2/nor.s: New.
	* gas/nios2/or.d: New.
	* gas/nios2/or.s: New.
	* gas/nios2/ret.d: New.
	* gas/nios2/ret.s: New.
	* gas/nios2/rol.d: New.
	* gas/nios2/rol.s: New.
	* gas/nios2/rotate.d: New.
	* gas/nios2/rotate.s: New.
	* gas/nios2/stb.d: New.
	* gas/nios2/stb.s: New.
	* gas/nios2/sth.d: New.
	* gas/nios2/sth.s: New.
	* gas/nios2/stw.d: New.
	* gas/nios2/stw.s: New.
	* gas/nios2/sub.d: New.
	* gas/nios2/sub.s: New.
	* gas/nios2/sync.d: New.
	* gas/nios2/sync.s: New.
	* gas/nios2/trap.d: New.
	* gas/nios2/trap.s: New.
	* gas/nios2/tret.d: New.
	* gas/nios2/tret.s: New.
	* gas/nios2/warn_noat.l: New.
	* gas/nios2/warn_noat.s: New.
	* gas/nios2/warn_nobreak.l: New.
	* gas/nios2/warn_nobreak.s: New.
	* gas/nios2/xor.d: New.
	* gas/nios2/xor.s: New.

	ld/
	* Makefile.am (enios2elf.c): New rule.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-*-*.
	* emulparams/nios2elf.sh: New file.
	* NEWS: Note Altera Nios II support.

	ld/testsuite/
	* ld-nios2/emit-relocs-1a.s: New.
	* ld-nios2/emit-relocs-1b.s: New.
	* ld-nios2/emit-relocs-1.d: New.
	* ld-nios2/emit-relocs-1.ld: New.
	* ld-nios2/gprel.d: New.
	* ld-nios2/gprel.s: New.
	* ld-nios2/hilo16.d: New.
	* ld-nios2/hilo16.s: New.
	* ld-nios2/hilo16_symbol.s: New.
	* ld-nios2/imm5.d: New.
	* ld-nios2/imm5.s: New.
	* ld-nios2/imm5_symbol.s: New.
	* ld-nios2/nios2.exp: New.
	* ld-nios2/pcrel16.d: New.
	* ld-nios2/pcrel16_label.s: New.
	* ld-nios2/pcrel16.s: New.
	* ld-nios2/relax_callr.d: New.
	* ld-nios2/relax_callr.ld: New.
	* ld-nios2/relax_callr.s: New.
	* ld-nios2/relax_cjmp.d: New.
	* ld-nios2/relax_cjmp.s: New.
	* ld-nios2/relax_jmp.ld: New.
	* ld-nios2/relax_section.d: New.
	* ld-nios2/relax_section.s: New.
	* ld-nios2/relax_ujmp.d: New.
	* ld-nios2/relax_ujmp.s: New.
	* ld-nios2/reloc.d: New.
	* ld-nios2/reloc.s: New.
	* ld-nios2/reloc_symbol.s: New.
	* ld-nios2/s16.d: New.
	* ld-nios2/s16.s: New.
	* ld-nios2/s16_symbol.s: New.
	* ld-nios2/u16.d: New.
	* ld-nios2/u16.s: New.
	* ld-nios2/u16_symbol.s: New.
	* ld-elf/indirect.exp: Skip on targets that don't support
	-shared -fPIC.
	* ld-elfcomm/elfcomm.exp: Build with -G0 for nios2.
	* ld-plugin/lto.exp: Skip shared library tests on targets that
	don't support them.  Skip execution tests on non-native targets.

	binutils/
	* readelf.c: Include elf/nios2.h.
	(dump_relocations): Add case for EM_ALTERA_NIOS2.
	(get_nios2_dynamic_type): New.
	(get_dynamic_type): Add case for EM_ALTERA_NIOS2.
	(is_32bit_abs_reloc): Fix EM_ALTERA_NIOS2 case.
	(is_16bit_abs_reloc): Likewise.
	(is_none_reloc): Add EM_ALTERA_NIOS2 and EM_NIOS32 cases.
	* NEWS: Note Altera Nios II support.
	* MAINTAINERS: Add Nios II maintainers.
@
text
@d912 19
@


1.263
log
@include/opcode/
	* ppc.h (PPC_OPCODE_POWER8): New define.
	(PPC_OPCODE_HTM): Likewise.

opcodes/
	* ppc-dis.c (ppc_opts): Add "power8", "pwr8" and "htm" entries.
	* ppc-opc.c (HTM_R, HTM_SI, XRTRB_MASK, XRTRARB_MASK, XRTLRARB_MASK,
	XRTARARB_MASK, XRTBFRARB_MASK, XRCL, POWER8, PPCHTM): New defines.
	(SH6): Update.
	<"tabort.", "tabortdc.", "tabortdci.", "tabortwc.",
	"tabortwci.", "tbegin.", "tcheck", "tend.", "trechkpt.",
	"treclaim.", "tsr.">: Add POWER8 HTM opcodes.
	<"tendall.", "tresume.", "tsuspend.">: Add POWER8 HTM extended opcodes.

gas/
	* doc/as.texinfo (Target PowerPC): Document -mpower8 and -mhtm.
	* doc/c-ppc.texi (PowerPC-Opts):  Likewise.
	* config/tc-ppc.c (md_show_usage): Likewise.
	(ppc_handle_align): Handle power8's group ending nop.

gas/testsuite/
	* gas/ppc/htm.d: New test.
	* gas/ppc/htm.s: Likewise.
	* gas/ppc/power8.d: Likewise.
	* gas/ppc/power8.s: Likewise.
	* gas/ppc/ppc.exp: Run them.
@
text
@d434 6
d1037 18
d7086 3
d7300 4
@


1.262
log
@	* common.h: Fix case of "Meta".
	* metag.h: New file.

	* dis-asm.h (print_insn_metag): New declaration.

	* metag.h: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* disassemble.c: Add Meta support.
	* metag-dis.c: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* archures.c (bfd_mach_metag): New.
	* bfd-in2.h: Regenerate.
	* config.bfd: Add Meta.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* cpu-metag.c: New file.
	* elf-bfd.h: Add Meta.
	* elf32-metag.c: New file.
	* elf32-metag.h: New file.
	* libbfd.h: Regenerate.
	* reloc.c: Add Meta relocations.
	* targets.c: Add Meta.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* config/tc-metag.c: New file.
	* config/tc-metag.h: New file.
	* configure.tgt: Add Meta.
	* doc/Makefile.am: Add Meta.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi: Add Meta.
	* doc/as.texiinfo: Document Meta options.
	* doc/c-metag.texi: New file.

	* gas/metag/labelarithmetic.d: New file.
	* gas/metag/labelarithmetic.s: New file.
	* gas/metag/metacore12.d: New file.
	* gas/metag/metacore12.s: New file.
	* gas/metag/metacore21-invalid.l: New file.
	* gas/metag/metacore21-invalid.s: New file.
	* gas/metag/metacore21.d: New file.
	* gas/metag/metacore21.s: New file.
	* gas/metag/metacore21ext.d: New file.
	* gas/metag/metacore21ext.s: New file.
	* gas/metag/metadsp21-invalid.l: New file.
	* gas/metag/metadsp21-invalid.s: New file.
	* gas/metag/metadsp21.d: New file.
	* gas/metag/metadsp21.s: New file.
	* gas/metag/metadsp21ext.d: New file.
	* gas/metag/metadsp21ext.s: New file.
	* gas/metag/metafpu21.d: New file.
	* gas/metag/metafpu21.s: New file.
	* gas/metag/metafpu21ext.d: New file.
	* gas/metag/metafpu21ext.s: New file.
	* gas/metag/metag.exp: New file.
	* gas/metag/tls.d: New file.
	* gas/metag/tls.s: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure.tgt: Add Meta.
	* emulparams/elf32metag.sh: New file.
	* emultempl/metagelf.em: New file.

	* ld-elf/merge.d: Mark Meta as xfail.
	* ld-gc/start.d: Skip this test on Meta.
	* ld-gc/personality.d: Skip this test on Meta.
	* ld-metag/external.s: New file.
	* ld-metag/metag.exp: New file.
	* ld-metag/pcrel.d: New file.
	* ld-metag/pcrel.s: New file.
	* ld-metag/shared.d: New file.
	* ld-metag/shared.r: New file.
	* ld-metag/shared.s: New file.
	* ld-metag/stub.d: New file.
	* ld-metag/stub.s: New file.
	* ld-metag/stub_pic_app.d: New file.
	* ld-metag/stub_pic_app.r: New file.
	* ld-metag/stub_pic_app.s: New file.
	* ld-metag/stub_pic_shared.d: New file.
	* ld-metag/stub_pic_shared.s: New file.
	* ld-metag/stub_shared.d: New file.
	* ld-metag/stub_shared.r: New file.
	* ld-metag/stub_shared.s: New file.

	* binutils/readelf.c: (guess_is_rela): Add EM_METAG.
	(dump_relocations): Add EM_METAG.
	(get_machine_name): Correct case for Meta.
	(is_32bit_abs_reloc): Add support for Meta ADDR32 reloc.
	(is_none_reloc): Add support for Meta NONE reloc.
@
text
@d454 2
a455 2
    @@b{-mpower7}|@@b{-mpwr7}|@@b{-ma2}|@@b{-mcell}|@@b{-mspe}|@@b{-mtitan}|@@b{-me300}|@@b{-mvle}|@@b{-mcom}]
   [@@b{-many}] [@@b{-maltivec}|@@b{-mvsx}]
@


1.261
log
@2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* elf32-rx.c (describe_flags): New function.  Returns a buffer
	containing a description of the E_FLAG_RX_... values set.
	(rx_elf_merge_private_bfd_data): Use it.
	(rx_elf_print_private_bfd_data): Likewise.
	(elf32_rx_machine): Skip EF_RX_CPU_RX check.
	(elf32_rx_special_sections): Define.
	(elf_backend_special_sections): Define.

2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* readelf.c (get_machine_flags): Add support for E_FLAG_RX_ABI.

2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* config/obj-elf.c (obj_elf_change_section): Allow init array
	sections to have the SHF_EXECINSTR attribute for the RX target.
	* config/tc-rx.c (elf_flags): Initialise with E_FLAG_RX_ABI.
	(enum options): Add OPTION_USES_GCC_ABI and OPTION_USES_RX_ABI.
	(md_longopts): Add -mgcc-abi and -mrx-abi.
	(md_parse_option): Add support for OPTION_USES_GCC_ABI and
	OPTION_USES_RX_ABI.
	* doc/as.texinfo (RX Options): Add mention of remaining RX
	options.
	* doc/c-rx.texi: Document -mgcc-abi and -mrx-abi.

2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* rx.h (EF_RX_CPU_RX): Add comment.
	(E_FLAG_RX_ABI): Define.

2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* emultempl/rxelf.em (no_flag_mismatch_warnings): Initialise to
	true.
	(PARSE_AND_LIST_LONGOPTS): Add flag-mismatch-warnings.
	(PARSE_AND_LIST_ARG_CASES): Add support for
	--flag-mismatch-warnings.
@
text
@d390 5
d1380 1
d1382 20
d7047 3
d7253 4
@


1.260
log
@
bfd:
        * elf32-arm.c (elf32_arm_print_private_bfd_data): Recognise and
        display the new ARM hard-float/soft-float ABI flags for EABI_VER5
        (elf32_arm_post_process_headers): Add the hard-float/soft-float
        ABI flag as appropriate for ET_DYN/ET_EXEC in EABI_VER5.

binutils:
        * readelf.c (decode_ARM_machine_flags): Recognise and display the
        new ARM hard-float/soft-float ABI flags for EABI_VER5. Split out
        the code for EABI_VER4 and EABI_VER5 to allow this.

elfcpp:
        * arm.h: New enum for EABI soft- and hard-float flags.

gold:
        * gold.cc (Target_arm::do_adjust_elf_header): Add the
        hard-float/soft-float ABI flag as appropriate for ET_DYN/ET_EXEC
        in EABI_VER5.

include:
        * elf/arm.h (EF_ARM_ABI_FLOAT_SOFT): New define.
        (EF_ARM_ABI_FLOAT_HARD): Likewise.

ld/testsuite:
        * ld-arm/eabi-hard-float.s: New test source.
        * ld-arm/eabi-soft-float.s: New test source.
        * ld-arm/eabi-hard-float.d: New test.
        * ld-arm/eabi-soft-float.d: New test.
        * ld-arm/eabi-soft-float-ABI4.d: New test.
        * ld-arm/eabi-soft-float-r.d: New test.
        * ld-arm/arm-elf.xp: Use the new tests.

binutils:
	PR binutils/14779
	* configure.in: Add checks for wchar.h and mbstate_t.
	* config.in: Regenerate.
	* configure: Regenerate.
	* readelf.c: Conditionally include wchar.h.
	(print_symbol): Conditionally use mbstate_t.
@
text
@d462 6
@


1.259
log
@        * doc/as.texinfo: Add missing documentation about section flag
        exclude.
@
text
@a460 1
   [@@b{-m32bit-ints}|@@b{-m16bit-ints}]
d7534 2
a7535 2
@@c (January 1994),
the maintainer is Ken Raeburn (email address @@code{raeburn@@@@cygnus.com}).
@


1.258
log
@gas/
	* doc/as.texinfo (-mpwr4, -mpwr7): Fix option name typos.
@
text
@d5956 2
@


1.257
log
@2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* config/tc-s390.c (s390_parse_cpu): Add new option zEC12.
	* doc/as.texinfo: Document new option zEC12.
	* doc/c-s390.texi: Likewise.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* gas/s390/s390.exp: Run zEC12 tests.
	* gas/s390/zarch-zEC12.d: New file.
	* gas/s390/zarch-zEC12.s: New file.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390-mkopc.c: Support new option zEC12.
	* s390-opc.c: Add new instruction formats.
	* s390-opc.txt: Add new instructions for zEC12.

2012-10-04  Andreas Krebbel  <Andreas.Krebbel@@de.ibm.com>

	* s390.h (s390_opcode_cpu_val): Add S390_OPCODE_ZEC12.
@
text
@d448 2
a449 2
    @@b{-mbooke}|@@b{-mpower4}|@@b{-mpr4}|@@b{-mpower5}|@@b{-mpwr5}|@@b{-mpwr5x}|@@b{-mpower6}|@@b{-mpwr6}|
    @@b{-mpower7}|@@b{-mpw7}|@@b{-ma2}|@@b{-mcell}|@@b{-mspe}|@@b{-mtitan}|@@b{-me300}|@@b{-mvle}|@@b{-mcom}]
@


1.256
log
@        * doc/as.texinfo: Document -mvle.
Missed with the original port commit.
Committed as obvious / trivial.
@
text
@d1414 2
a1415 1
@@samp{z900}, @@samp{z990}, @@samp{z9-109}, @@samp{z9-ec}, or @@samp{z10}.
@


1.255
log
@Replace --n32 with --x32

	* doc/as.texinfo: Replace --n32 with --x32.
@
text
@d449 1
a449 1
    @@b{-mpower7}|@@b{-mpw7}|@@b{-ma2}|@@b{-mcell}|@@b{-mspe}|@@b{-mtitan}|@@b{-me300}|@@b{-mcom}]
@


1.254
log
@Add support for 64-bit ARM architecture: AArch64
@
text
@d331 1
a331 1
   [@@b{--32}|@@b{--n32}|@@b{--64}] [@@b{-n}]
@


1.253
log
@gas/
	* read.c [HANDLE_BUNDLE] (bundle_lock_depth): New variable.
	(read_a_source_file) [HANDLE_BUNDLE]: Reset it.
	[HANDLE_BUNDLE] (s_bundle_lock, s_bundle_unlock): Allow nested
	pairs.

gas/testsuite/
	* gas/i386/bundle-bad.s: Remove nested .bundle_lock case.
	* gas/i386/bundle-bad.l: Remove expected error line.
	* gas/i386/bundle-lock.s: Add nested .bundle_lock case.
	* gas/i386/bundle-lock.d: Update expectations.
@
text
@d252 5
d741 19
d6941 3
d7102 4
@


1.253.2.1
log
@Add support for 64-bit ARM architecture: aarch64
@
text
@a251 5
@@ifset AARCH64

@@emph{Target AArch64 options:}
   [@@b{-EB}|@@b{-EL}]
@@end ifset
a735 19
@@ifset AARCH64

@@ifclear man
@@xref{AArch64 Options}, for the options available when @@value{AS} is configured
for the 64-bit mode of the ARM Architecture (AArch64).
@@end ifclear

@@ifset man
@@c man begin OPTIONS
The following options are available when @@value{AS} is configured for the
64-bit mode of the ARM Architecture (AArch64).
@@c man end
@@c man begin INCLUDE
@@include c-aarch64.texi
@@c ended inside the included file
@@end ifset

@@end ifset

a6916 3
@@ifset AARCH64
* AArch64-Dependent::		AArch64 Dependent Features
@@end ifset
a7074 4
@@ifset AARCH64
@@include c-aarch64.texi
@@end ifset

@


1.252
log
@	* read.c (read_symbol_name): New function.  Reads a symbol names.
	Allows escape codes in names.
	(s_comm_internal): Use read_symbol_name.
	(s_globl, s_lsym, s_set, s_weakref): Likewise.
	* doc/as.texinfo: Document support for multibyte characters in
	symbol names.

	* gas/elf/syms.s: New test - checks the generation of multibyte
	symbol names.
	* gas/elf/syms.d: New file - expected readelf output.
	* gas/elf/elf.exp: Add syms.

	* readelf.c (print_symbol): Display multibyte characters in symbol
	names.
	(process_section_headers): Use print_symbol.

	* ld-ifunc/ifunc-13a-i386.s: Fix use of .global directive.
	* ld-ifunc/ifunc-15a-i385.s: Likewise.
@
text
@d4354 6
a4359 3
Bundle-locked sequences do not nest.  It's an error if two
@@code{.bundle_lock} directives appear without an intervening
@@code{.bundle_unlock} directive.
@


1.251
log
@	* config/tc-m68hc11.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Tweak target flags to match other tools. (i.e. -m m68hc11).
	* doc/as.texinfo: Mention new options.
	* doc/c-m68hc11.texi: Document new options.
	* NEWS: Mention new support.

	* archures.c: Add bfd_arch_m9s12x and bfd_arch_m9s12xg.
	* config.bfd: Likewise.
	* cpu-m9s12x.c: New.
	* cpu-m9s12xg.c: New.
	* elf32-m68hc12.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Fix carry bug in IMM16 (IMM8 low/high) relocate.
	* Makefile.am (ALL_MACHINES): Add cpu-m9s12x and cpu-m9s12xg.
	(ALL_MACHINES_CFILES): Likewise.
	* reloc.c: Add S12X relocs.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* gas/m68hc11/insns9s12x.s: New
	* gas/m68hc11/insns9s12x.d: New
	* gas/m68hc11/hexprefix.s: New
	* gas/m68hc11/hexprefix.d: New
	* gas/m68hc11/9s12x-exg-sex-tfr.s: New
	* gas/m68hc11/9s12x-exg-sex-tfr.d: New
	* gas/m68hc11/insns9s12xg.s: New
	* gas/m68hc11/insns9s12xg.d: New
	* gas/m68hc11/9s12x-mov.s: New
	* gas/m68hc11/9s12x-mov.d: New
	* gas/m68hc11/m68hc11.exp: Updated
	* gas/m68hc11/*.d: Brought in line with changed objdump output.
	* gas/all/gas.exp: XFAIL all hc11/12 targets for redef2,3.
	* gas/elf/elf.exp: XFAIL all hc11/12 targets for redef.
	* gas/elf/dwarf2-1.d: Skip for hc11/12 targets.
	* gas/elf/dwarf2-2.d: Likewise.

	* ld-m68hc11/xgate-link.s: New.
	* ld-m68hc11/xgate-link.d: New.
	* ld-m68hc11/xgate-offset.s: New.
	* ld-m68hc11/xgate-offset.d: New.
	* ld-m68hc11/xgate1.s: New.
	* ld-m68hc11/xgate1.d: New.
	* ld-m68hc11/xgate2.s: New.
	* ld-m68hc11/m68hc11.exp: Updated.
	* ld-m68hc11/*.d: Brought in line with changed objdump output.
	* ld-gc/gc.exp: Update CFLAGS for m68hc11.
	* ld-plugin/plugin.exp: Likewise.
	* ld-srec/srec.exp: XFAIL for m68hc11 and m68hc12.

	* configure.in: Add S12X and XGATE co-processor support to m68hc11
	target.
	* disassemble.c: Likewise.
	* configure: Regenerate.
	* m68hc11-dis.c: Make objdump output more consistent, use hex
	instead of decimal and use 0x prefix for hex.
	* m68hc11-opc.c: Add S12X and XGATE opcodes.
	* dis-asm.h (print_insn_m9s12x): Prototype.
	(print_insn_m9s12xg): Prototype.

	* m68hc11.h (R_M68HC12_16B, R_M68HC12_PCREL_9, R_M68HC12_PCREL_10)
	R_M68HC12_HI8XG, R_M68HC12_LO8XG): New relocations.
	(E_M68HC11_XGATE_RAMOFFSET): Define.

	* m68hc11.h: Add XGate definitions.
	(struct m68hc11_opcode): Add xg_mask field.
@
text
@d2488 4
a2491 4
There is no length limit: all characters are significant.  Symbols are
delimited by characters not in that set, or by the beginning of a file
(since the source program must end with a newline, the end of a file is
not a possible symbol delimiter).  @@xref{Symbols}.
d3417 5
@


1.250
log
@Add support for Motorola XGATE embedded CPU
@
text
@d372 1
a372 1
   [@@b{-m68hc11}|@@b{-m68hc12}|@@b{-m68hcs12}]
d1053 1
a1053 1
@@item -m68hc11 | -m68hc12 | -m68hcs12
d1057 4
d1090 1
a1090 1
print the list of instructions with syntax and then exit.
d1093 1
a1093 1
print an example of instruction for each possible instruction and then exit.
@


1.249
log
@gas/
	* doc/as.texinfo (Bundle directives): Fix typo.
@
text
@d7032 3
d7262 4
@


1.248
log
@Replace @@defn with @@dfn

2012-03-14  Ryan Mansfield  <rmansfield@@qnx.com>

	* doc/as.texinfo (Bundle directives): Replace @@defn with @@dfn.
@
text
@d4305 1
a4305 1
disabled (which is the dfault state).  If the argument it not zero, it
@


1.247
log
@gas/
2012-03-12  Roland McGrath  <mcgrathr@@google.com>

	* config/tc-arm.c (arm_frag_max_var): New function.
	* config/tc-arm.h: Declare it.
	(md_frag_max_var): New macro.

	* config/tc-i386.c (i386_frag_max_var): New function.
	* config/tc-i386.h: Declare it.
	(md_frag_max_var): New macro.

	* doc/as.texinfo (Bundle directives): New node.
	(Pseudo Ops): Add it to the menu.
	* NEWS: Mention new feature.
	* read.c [md_frag_max_var] (HANDLE_BUNDLE): New macro.
	[HANDLE_BUNDLE] (bundle_align_p2): New variable.
	[HANDLE_BUNDLE] (bundle_lock_frchain, bundle_lock_frag): New variables.
	[HANDLE_BUNDLE] (start_bundle, pending_bundle_size, finish_bundle):
	New functions.
	(assemble_one): New function if [HANDLE_BUNDLE], #define directly
	to md_assembly if not.
	(read_a_source_file): Call assemble_one in place of md_assemble.
	(read_a_source_file) [HANDLE_BUNDLE]: Check for unterminated
	.bundle_lock at end of processing.
	[HANDLE_BUNDLE] (s_bundle_align_mode, s_bundle_lock, s_bundle_unlock):
	New functions.
	[HANDLE_BUNDLE] (potable): Add their entries.
	* read.h: Declare new functions.

gas/testsuite/
2012-03-12  Roland McGrath  <mcgrathr@@google.com>

	* gas/i386/bundle-bad.s: New file.
	* gas/i386/bundle-bad.d: New file.
	* gas/i386/bundle-bad.l: New file.
	* gas/i386/i386.exp: Run it.

	* gas/arm/bundle.s: New file.
	* gas/arm/bundle.d: New file.
	* gas/arm/bundle-lock.s: New file.
	* gas/arm/bundle-lock.d: New file.

	* gas/i386/bundle.s: New file.
	* gas/i386/bundle.d: New file.
	* gas/i386/x86-64-bundle.s: New file.
	* gas/i386/x86-64-bundle.d: New file.
	* gas/i386/bundle-lock.s: New file.
	* gas/i386/bundle-lock.d: New file.
	* gas/i386/i386.exp: Run them.
@
text
@d4302 1
a4302 1
@@code{.bundle_align_mode} enables or disables @@defn{aligned instruction
d4304 2
a4305 2
into fixed-sized @@defn{bundles}.  If the argument is zero, this mode is
disabled (which is the default state).  If the argument it not zero, it
d4310 1
a4310 1
certain aligned boundary.  A @@defn{bundle} is simply a sequence of
d4335 1
a4335 1
and @@code{.bundle_unlock} directives define a @@defn{bundle-locked}
@


1.246
log
@include/opcode/
	* ppc.h: Add PPC_OPCODE_ALTIVEC2, PPC_OPCODE_E6500, PPC_OPCODE_TMR.
opcodes/
	* ppc-dis.c (ppc_opts): Add entries for "e5500" and "e6500".
	* ppc-opc.c (insert_ls, TMR, ESYNC, XSYNCLE_MASK): New.
	(PPCVEC2, PPCTMR, E6500): New short names.
	(powerpc_opcodes): Add vabsdub, vabsduh, vabsduw, dni, mvidsplt,
	mviwsplt, icblq., mftmr, mttmr, dcblq., miso, lvexbx, lvexhx,
	lvexwx, stvexbx, stvexhx, stvexwx, lvepx, lvepxl, stvepx, stvepxl,
	lvtrx, lvtrxl, lvtlx, lvtlxl, stvfrx, stvfrxl, stvflx, stvflxl,
	lvswx, lvswxl, stvswx, stvswxl, lvsm mnemonics. Accept LS, ESYNC
	optional operands on sync instruction for E6500 target.
bfd/
	* archures.c: Add bfd_mach_ppc_e5500 and bfd_mach_ppc_e6500.
	* bfd-in2.h: Regenerate.
	* cpu-powerpc.c (bfd_powerpc_archs): Add entryies for
	bfd_mach_ppc_e5500 and bfd_mach_ppc_e6500.
gas/
	* config/tc-ppc.c (md_show_usage): Document -me5500 and -me6500.
	(ppc_handle_align): Add termination nop opcode for e500mc family.
	* doc/as.texinfo: Document options -me5500 and -me6500.
	* doc/c-ppc.texi: Likewise.
gas/testsuite/
	* gas/ppc/e500mc64_nop.s: New test case for e500mc family
	termination nops.
	* gas/ppc/e500mc64_nop.d: Likewise.
	* gas/ppc/e5500_nop.s: Likewise.
	* gas/ppc/e5500_nop.d: Likewise.
	* gas/ppc/e6500_nop.s: Likewise.
	* gas/ppc/e6500_nop.d: Likewise.
	* gas/ppc/e6500.s: New.
	* gas/ppc/e6500.d: Likewise.
	* gas/ppc/ppc.exp: Run e6500, e500mc64_nop, e5500_nop, and e6500_nop.
@
text
@d3973 1
d4296 53
d5578 1
a5578 1
directive. 
@


1.245
log
@Add big-endian support for tilegx.

bfd/
	* config.bfd (tilegx-*-*): rename little endian vector; add big
	endian vector.
	(tilegxbe-*-*): New case.
	* configure.in (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): New vector.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): New vector.
	* configure: Regenerate.
	* elf32-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* elf64-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* targets.c (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): Declare.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): Declare.
	(_bfd_target_vector): Add / rename above vectors.

binutils/testsuite/
	* binutils-all/objdump.exp (cpus_expected): Add tilegx.

gas/
	* tc-tilegx.c (tilegx_target_format): Handle big endian.
	(OPTION_EB): Define.
	(OPTION_EL): Define.
	(md_longopts): Add entries for "EB" and "EL".
	(md_parse_option): Handle OPTION_EB and OPTION_EL.
	(md_show_usage): Add -EB and -EL.
	(md_number_to_chars): New.
	* tc-tilegx.h (TARGET_BYTES_BIG_ENDIAN): Guard definition with
	ifndef.
	(md_number_to_chars): Delete.
	* configure.tgt (tilegx*be): Handle.
	* doc/as.texinfo [TILE-Gx]: Document -EB and -EL.
	* doc/c-tilegx.texi: Ditto.

ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx_be.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx_be.c.
	(eelf32tilegx_be.c): Add rule to build this file.
	(eelf64tilegx_be.c): Ditto.
	* Makefile.in: Regenerate.
	* configure.tgt (tilegx-*-*): Support big endian.
	(tilegxbe-*-*): New.
	* emulparams/elf32tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf32tilegx_be.sh: New.
	* emulparams/elf64tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf64tilegx_be.sh: New.

ld/testsuite/
	* ld-tilegx/reloc-be.d: New.
	* ld-tilegx/reloc-le.d: New.
	* ld-tilegx/reloc.d: Delete.
	* ld-tilegx/tilegx.exp: Test big and little endian.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
d442 2
a443 2
    @@b{-m620}|@@b{-me500}|@@b{-e500x2}|@@b{-me500mc}|@@b{-me500mc64}|@@b{-mppc64bridge}|@@b{-mbooke}|
    @@b{-mpower4}|@@b{-mpr4}|@@b{-mpower5}|@@b{-mpwr5}|@@b{-mpwr5x}|@@b{-mpower6}|@@b{-mpwr6}|
@


1.244
log
@[.]
	* configure.ac (rl78-*-*) New case.
	* configure: Regenerate.

[bfd]
	* Makefile.am (ALL_MACHINES): Add cpu-rl78.lo.
	(ALL_MACHINES_CFILES): Add cpu-rl78.c.
	(BFD32_BACKENDS): Add elf32-rl78.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-rl78.c.
	(Makefile.in): Regenerate.
	* archures.c (bfd_architecture): Define bfd_arch_rl78.
	(bfd_archures_list): Add bfd_rl78_arch.
	* config.bfd: Add rl78-*-elf.
	* configure.in: Add bfd_elf32_rl78_vec.
	* reloc.c (bfd_reloc_code_type): Add BFD_RELOC_RL78_* relocations.
	* targets.c (bfd_target_vector): Add bfd_elf32_rl78_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* cpu-rl78.c: New file.
	* elf32-rl78.c: New file.

[binutils]
	* readelf.c: Include elf/rl78.h
	(guess_is_rela): Handle EM_RL78.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(is_32bit_abs_reloc): Likewise.
	* NEWS: Mention addition of RL78 support.
	* MAINTAINERS: Add myself as RL78 port maintainer.

[gas]
	* Makefile.am (TARGET_CPU_CFILES): Add tc-rl78.c.
	(TARGET_CPU_HFILES): Add rc-rl78.h.
	(EXTRA_DIST): Add rl78-parse.c and rl78-parse.y.
	(rl78-parse.c, rl78-parse.h, rl78-parse.o, rl78-defs.h): New rules.
	* Makefile.in: Regenerate.
	* configure.in: Add rl78 case.
	* configure: Regenerate.
	* configure.tgt: Add rl78 case.
	* config/rl78-defs.h: New file.
	* config/rl78-parse.y: New file.
	* config/tc-rl78.c: New file.
	* config/tc-rl78.h: New file.
	* NEWS: Add Renesas RL78.

	* doc/Makefile.am (c-rl78.texi): New.
	* doc/Makefile.in: Likewise.
	* doc/all.texi: Enable it.
	* doc/as.texi: Add it.

[include]
	* dis-asm.h (print_insn_rl78): Declare.

[include/elf]
	* common.h (EM_RL78, EM_78K0R): New.
	* rl78.h: New.

[include/opcode]
	* rl78.h: New file.

[ld]
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32rl78.c.
	(+eelf32rl78.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add rl78-*-* case.
	* emulparams/elf32rl78.sh: New file.
	* NEWS: Mention addition of Renesas RL78 support.

[opcodes]
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add rl78-decode.c and
	rl78-dis.c.
	(MAINTAINERCLEANFILES): Add rl78-decode.c.
	(rl78-decode.c): New rule, built from rl78-decode.opc and opc2c.
	* Makefile.in: Regenerate.
	* configure.in: Add bfd_rl78_arch case.
	* configure: Regenerate.
	* disassemble.c: Define ARCH_rl78.
	(disassembler): Add ARCH_rl78 case.
	* rl78-decode.c: New file.
	* rl78-decode.opc: New file.
	* rl78-dis.c: New file.
@
text
@d500 1
a500 1
   [@@b{-m32}|@@b{-m64}]
@


1.243
log
@gas:
        * doc/as.texinfo [EPIPHANY]: Include c-epiphany.texi to avoid
        duplication.
opcodes:
        * disassemble.c (ARCH_epiphany): Move into alphasorted spot.
@
text
@d6948 3
d7148 4
@


1.242
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-epiphany.lo .
	(ALL_MACHINES_CFILES): Add cpu-epiphany.c .
	(BFD32_BACKENDS): Add elf32-epiphany.lo .
	(BFD32_BACKENDS_CFILES): Add elf32-epiphany.c .
	* Makefile.in, bfd-in2.h, configure, libbfd.h: Regenerate.
	* archures.c (bfd_arch_epiphany): Add.
	(bfd_mach_epiphany16, bfd_mach_epiphany32): Define.
	(bfd_epiphany_arch): Declare.
	(bfd_archures_list): Add &bfd_epiphany_arch.
	* config.bfd (epiphany-*-elf): New target case.
	* configure.in (bfd_elf32_epiphany_vec): New target vector case.
	* reloc.c (BFD_RELOC_EPIPHANY_SIMM8): New relocation.
	(BFD_RELOC_EPIPHANY_SIMM24, BFD_RELOC_EPIPHANY_HIGH): Likewise.
	(BFD_RELOC_EPIPHANY_LOW, BFD_RELOC_EPIPHANY_SIMM11): Likewise.
	(BFD_RELOC_EPIPHANY_IMM11, BFD_RELOC_EPIPHANY_IMM8): Likewise.
	* targets.c (bfd_elf32_epiphany_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_epiphany_vec.
	* po/SRC-POTFILES.in, po/bfd.pot: Regenerate.
	* cpu-epiphany.c, elf32-epiphany.c: New files.
binutils:
	* readelf.c (include "elf/epiphany.h")
	(guess_is_rela, dump_relocation): Handle EM_ADAPTEVA_EPIPHANY.
	(get_machine_name, is_32bit_abs_reloc, is_32bit_pcrel_reloc): Likewise.
	(is_16bit_abs_reloc, is_none_reloc): Likewise.
	* po/binutils.pot: Regenerate.
cpu:
	* cpu/epiphany.cpu, cpu/epiphany.opc: New files.
gas:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* config/tc-epiphany.c, config/tc-epiphany.h: New files.
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-epiphany.c .
	(TARGET_CPU_HFILES): Add config/tc-epiphany.h .
	* Makefile.in, configure, doc/Makefile.in, po/POTFILES.in: Regenerate.
	* configure.in: Also set using_cgen for epiphany.
	* configure.tgt: Handle epiphany.
	* doc/Makefile.am (CPU_DOCS): Add c-epiphany.texi .
	* doc/all.texi: Set EPIPHANY.
	* doc/as.texinfo: Add EPIPHANY-specific text.
	* doc/c-epiphany.texi: New file.
	* po/gas.pot: Regenerate.
gas/testsuite:
	* gas/epiphany: New directory.
include:
	* dis-asm.h (print_insn_epiphany): Declare.
	* elf/epiphany.h: New file.
	* elf/common.h (EM_ADAPTEVA_EPIPHANY): Define.
ld:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32epiphany.c .
	(eelf32epiphany.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle epiphany-*-elf.
	* po/ld.pot: Regenerate.
	* testsuite/ld-srec/srec.exp: xfail epiphany.
	* emulparams/elf32epiphany.sh: New file.
opcodes:
	* Makefile.am (HFILES): Add epiphany-desc.h and epiphany-opc.h .
	(TARGET_LIBOPCODES_CFILES): Add  epiphany-asm.c, epiphany-desc.c,
	epiphany-dis.c, epiphany-ibld.c and epiphany-opc.c .
	(CLEANFILES): Add stamp-epiphany.
	(EPIPHANY_DEPS): Set.  Make CGEN-generated Epiphany files depend on it.
	(stamp-epiphany): New rule.
	* Makefile.in, configure, po/POTFILES.in, po/opcodes.pot: Regenerate.
	* configure.in: Handle bfd_epiphany_arch.
	* disassemble.c (ARCH_epiphany): Define.
	(disassembler): Handle bfd_arch_epiphany.
	* epiphany-asm.c, epiphany-desc.c, epiphany-desc.h: New files.
	* epiphany-dis.c, epiphany-ibld.c, epiphany-opc.c: Likewise.
	* epiphany-opc.h: Likewise.
@
text
@d855 4
a858 1
@@table @@gcctabopt
d860 9
a868 6
@@item -mepiphany
Specifies that the both 32 and 16 bit instructions are allowed.  This is the
default behavior.

@@item -mepiphany16
Restricts the permitted instructions to just the 16 bit set.
a869 1
@@end table
@


1.241
log
@	* doc/as.texinfo: Include c-xstormy16.texi.
@
text
@d310 5
d851 16
d6873 3
d7052 4
@


1.240
log
@	gas/
	* config/tc-mips.c (mips_set_options): Add ase_mcu.
	(mips_opts): Initialise ase_mcu to -1.
	(ISA_SUPPORTS_MCU_ASE): New macro.
	(MIPS_CPU_ASE_MCU): Likewise.
	(is_opcode_valid): Handle MCU.
	(macro_build, macro): Likewise.
	(validate_mips_insn, validate_micromips_insn): Likewise.
	(mips_ip): Likewise.
	(options): Add OPTION_MCU and OPTION_NO_MCU.
	(md_longopts): Add mmcu and mno-mcu.
	(md_parse_option): Handle OPTION_MCU and OPTION_NO_MCU.
	(mips_after_parse_args): Handle MCU.
	(s_mipsset): Likewise.
	(md_show_usage): Handle MCU options.

	* doc/as.texinfo: Document -mmcu and -mno-mcu options.
	* doc/c-mips.texi: Likewise, and document ".set mcu" and
	".set nomcu" directives.

	gas/testsuite/
	* gas/mips/micromips@@mcu.d: New test.
	* gas/mips/mcu.d: Likewise.
	* gas/mips/mcu.s: New test source.
	* gas/mips/mips.exp: Run the new tests.

	include/opcode/
	* mips.h (OP_MASK_3BITPOS, OP_SH_3BITPOS): New macros.
	(OP_MASK_OFFSET12, OP_SH_OFFSET12): Redefine.
	(INSN_ASE_MASK): Add the MCU bit.
	(INSN_MCU): New macro.
	(M_ACLR_AB, M_ACLR_OB, M_ASET_AB, M_ASET_OB): New enum values.
	(MICROMIPSOP_MASK_3BITPOS, MICROMIPSOP_SH_3BITPOS): New macros.

	opcodes/
	* mips-dis.c (mips_arch_choices): Enable MCU for "mips32r2"
	and "mips64r2".
	(print_insn_args, print_insn_micromips): Handle MCU.
	* micromips-opc.c (MC): New macro.
	(micromips_opcodes): Add "aclr", "aset" and "iret".
	* mips-opc.c (MC): New macro.
	(mips_builtin_opcodes): Add "aclr", "aset" and "iret".
@
text
@d6946 3
d7165 4
@


1.239
log
@	* dwarf2dbg.c (out_debug_line): Ignore non-normal segments, with a
	warning.
	* doc/as.texinfo (Offset): Document .offset directive.

	testsuite/
	* gas/elf/warn-2.s: New.
@
text
@d404 1
d1227 6
@


1.238
log
@bfd/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Ilie Garbacea  <ilie@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>
            Catherine Moore  <clm@@codesourcery.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* archures.c (bfd_mach_mips_micromips): New macro.
	* cpu-mips.c (I_micromips): New enum value.
	(arch_info_struct): Add bfd_mach_mips_micromips.
	* elfxx-mips.h (_bfd_mips_elf_is_target_special_symbol): New
	prototype.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips16_elf_reloc_unshuffle): Rename to...
	(_bfd_mips_elf_reloc_unshuffle): ... this.  Handle microMIPS
	ASE.
	(_bfd_mips16_elf_reloc_shuffle): Rename to...
	(_bfd_mips_elf_reloc_shuffle): ... this.  Handle microMIPS ASE.
	(gprel16_reloc_p): Handle microMIPS ASE.
	(literal_reloc_p): New function.
	* elf32-mips.c (elf_micromips_howto_table_rel): New variable.
	(_bfd_mips_elf32_gprel16_reloc): Handle microMIPS ASE.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(mips_elf_gprel32_reloc): Update comment.
	(micromips_reloc_map): New variable.
	(bfd_elf32_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(mips_elf32_rtype_to_howto): Likewise.
	(mips_info_to_howto_rel): Likewise.
	(bfd_elf32_bfd_is_target_special_symbol): Define.
	(bfd_elf32_bfd_relax_section): Likewise.
	* elf64-mips.c (micromips_elf64_howto_table_rel): New variable.
	(micromips_elf64_howto_table_rela): Likewise.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(micromips_reloc_map): Likewise.
	(bfd_elf64_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(bfd_elf64_bfd_reloc_name_lookup): Likewise.
	(mips_elf64_rtype_to_howto): Likewise.
	(bfd_elf64_bfd_is_target_special_symbol): Define.
	* elfn32-mips.c (elf_micromips_howto_table_rel): New variable.
	(elf_micromips_howto_table_rela): Likewise.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(micromips_reloc_map): Likewise.
	(bfd_elf32_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(bfd_elf32_bfd_reloc_name_lookup): Likewise.
	(mips_elf_n32_rtype_to_howto): Likewise.
	(bfd_elf32_bfd_is_target_special_symbol): Define.
	* elfxx-mips.c (LA25_LUI_MICROMIPS_1): New macro.
	(LA25_LUI_MICROMIPS_2): Likewise.
	(LA25_J_MICROMIPS_1, LA25_J_MICROMIPS_2): Likewise.
	(LA25_ADDIU_MICROMIPS_1, LA25_ADDIU_MICROMIPS_2): Likewise.
	(TLS_RELOC_P): Handle microMIPS ASE.
	(mips_elf_create_stub_symbol): Adjust value of stub symbol if
	target is a microMIPS function.
	(micromips_reloc_p): New function.
	(micromips_reloc_shuffle_p): Likewise.
	(got16_reloc_p, call16_reloc_p): Handle microMIPS ASE.
	(got_disp_reloc_p, got_page_reloc_p): New functions.
	(got_ofst_reloc_p): Likewise.
	(got_hi16_reloc_p, got_lo16_reloc_p): Likewise.
	(call_hi16_reloc_p, call_lo16_reloc_p): Likewise.
	(hi16_reloc_p, lo16_reloc_p, jal_reloc_p): Handle microMIPS ASE.
	(micromips_branch_reloc_p): New function.
	(tls_gd_reloc_p, tls_ldm_reloc_p): Likewise.
	(tls_gottprel_reloc_p): Likewise.
	(_bfd_mips16_elf_reloc_unshuffle): Rename to...
	(_bfd_mips_elf_reloc_unshuffle): ... this.  Handle microMIPS
	ASE.
	(_bfd_mips16_elf_reloc_shuffle): Rename to...
	(_bfd_mips_elf_reloc_shuffle): ... this.  Handle microMIPS ASE.
	(_bfd_mips_elf_lo16_reloc): Handle microMIPS ASE.
	(mips_tls_got_index, mips_elf_got_page): Likewise.
	(mips_elf_create_local_got_entry): Likewise.
	(mips_elf_relocation_needs_la25_stub): Likewise.
	(mips_elf_calculate_relocation): Likewise.
	(mips_elf_perform_relocation): Likewise.
	(_bfd_mips_elf_symbol_processing): Likewise.
	(_bfd_mips_elf_add_symbol_hook): Likewise.
	(_bfd_mips_elf_link_output_symbol_hook): Likewise.
	(mips_elf_add_lo16_rel_addend): Likewise.
	(_bfd_mips_elf_check_relocs): Likewise.
	(mips_elf_adjust_addend): Likewise.
	(_bfd_mips_elf_relocate_section): Likewise.
	(mips_elf_create_la25_stub): Likewise.
	(_bfd_mips_vxworks_finish_dynamic_symbol): Likewise.
	(_bfd_mips_elf_gc_sweep_hook): Likewise.
	(_bfd_mips_elf_is_target_special_symbol): New function.
	(mips_elf_relax_delete_bytes): Likewise.
	(opcode_descriptor): New structure.
	(RA): New macro.
	(OP32_SREG, OP32_TREG, OP16_VALID_REG): Likewise.
	(b_insns_32, bc_insn_32, bz_insn_32, bzal_insn_32): New variables.
	(beq_insn_32): Likewise.
	(b_insn_16, bz_insn_16): New variables.
	(BZC32_REG_FIELD): New macro.
	(bz_rs_insns_32, bz_rt_insns_32): New variables.
	(bzc_insns_32, bz_insns_16):Likewise.
	(BZ16_REG, BZ16_REG_FIELD): New macros.
	(jal_insn_32_bd16, jal_insn_32_bd32): New variables.
	(jal_x_insn_32_bd32): Likewise.
	(j_insn_32, jalr_insn_32): Likewise.
	(ds_insns_32_bd16, ds_insns_32_bd32): Likewise.
	(jalr_insn_16_bd16, jalr_insn_16_bd32, jr_insn_16): Likewise.
	(JR16_REG): New macro.
	(ds_insns_16_bd16): New variable.
	(lui_insn): Likewise.
	(addiu_insn, addiupc_insn): Likewise.
	(ADDIUPC_REG_FIELD): New macro.
	(MOVE32_RD, MOVE32_RS): Likewise.
	(MOVE16_RD_FIELD, MOVE16_RS_FIELD): Likewise.
	(move_insns_32, move_insns_16): New variables.
	(nop_insn_32, nop_insn_16): Likewise.
	(MATCH): New macro.
	(find_match): New function.
	(check_br16_dslot, check_br32_dslot): Likewise.
	(check_br16, check_br32): Likewise.
	(IS_BITSIZE): New macro.
	(check_4byte_branch): New function.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips_elf_merge_private_bfd_data): Disallow linking MIPS16
	and microMIPS modules together.
	(_bfd_mips_elf_print_private_bfd_data):	Handle microMIPS ASE.
	* reloc.c (BFD_RELOC_MICROMIPS_7_PCREL_S1): New relocation.
	(BFD_RELOC_MICROMIPS_10_PCREL_S1): Likewise.
	(BFD_RELOC_MICROMIPS_16_PCREL_S1): Likewise.
	(BFD_RELOC_MICROMIPS_GPREL16): Likewise.
	(BFD_RELOC_MICROMIPS_JMP, BFD_RELOC_MICROMIPS_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_HI16_S): Likewise.
	(BFD_RELOC_MICROMIPS_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_LITERAL): Likewise.
	(BFD_RELOC_MICROMIPS_GOT16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL16): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_SUB): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_PAGE): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_OFST): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_DISP): Likewise.
	(BFD_RELOC_MICROMIPS_HIGHEST): Likewise.
	(BFD_RELOC_MICROMIPS_HIGHER): Likewise.
	(BFD_RELOC_MICROMIPS_SCN_DISP): Likewise.
	(BFD_RELOC_MICROMIPS_JALR): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_GD): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_LDM): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_GOTTPREL): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_TPREL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_TPREL_LO16): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

binutils/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* readelf.c (get_machine_flags): Handle microMIPS ASE.
	(get_mips_symbol_other): Likewise.

gas/
2011-02-25  Maciej W. Rozycki  <macro@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* config/tc-mips.h (mips_segment_info): Add one bit for
	microMIPS.
	(TC_LABEL_IS_LOCAL): New macro.
	(mips_label_is_local): New prototype.
	* config/tc-mips.c (S0, S7): New macros.
	(emit_branch_likely_macro): New variable.
	(mips_set_options): Add micromips.
	(mips_opts): Initialise micromips to -1.
	(file_ase_micromips): New variable.
	(CPU_HAS_MICROMIPS): New macro.
	(hilo_interlocks): Set for microMIPS too.
	(gpr_interlocks): Likewise.
	(cop_interlocks): Likewise.
	(cop_mem_interlocks): Likewise.
	(HAVE_CODE_COMPRESSION): New macro.
	(micromips_op_hash): New variable.
	(micromips_nop16_insn, micromips_nop32_insn): New variables.
	(NOP_INSN): Handle microMIPS ASE.
	(mips32_to_micromips_reg_b_map): New macro.
	(mips32_to_micromips_reg_c_map): Likewise.
	(mips32_to_micromips_reg_d_map): Likewise.
	(mips32_to_micromips_reg_e_map): Likewise.
	(mips32_to_micromips_reg_f_map): Likewise.
	(mips32_to_micromips_reg_g_map): Likewise.
	(mips32_to_micromips_reg_l_map): Likewise.
	(mips32_to_micromips_reg_n_map): Likewise.
	(mips32_to_micromips_reg_h_map): New variable.
	(mips32_to_micromips_reg_m_map): Likewise.
	(mips32_to_micromips_reg_q_map): Likewise.
	(micromips_to_32_reg_h_map): New variable.
	(micromips_to_32_reg_i_map): Likewise.
	(micromips_to_32_reg_m_map): Likewise.
	(micromips_to_32_reg_q_map): Likewise.
	(micromips_to_32_reg_b_map): New macro.
	(micromips_to_32_reg_c_map): Likewise.
	(micromips_to_32_reg_d_map): Likewise.
	(micromips_to_32_reg_e_map): Likewise.
	(micromips_to_32_reg_f_map): Likewise.
	(micromips_to_32_reg_g_map): Likewise.
	(micromips_to_32_reg_l_map): Likewise.
	(micromips_to_32_reg_n_map): Likewise.
	(micromips_imm_b_map, micromips_imm_c_map): New macros.
	(RELAX_DELAY_SLOT_16BIT): New macro.
	(RELAX_DELAY_SLOT_SIZE_FIRST): Likewise.
	(RELAX_DELAY_SLOT_SIZE_SECOND): Likewise.
	(RELAX_MICROMIPS_ENCODE, RELAX_MICROMIPS_P): New macros.
	(RELAX_MICROMIPS_TYPE, RELAX_MICROMIPS_AT): Likewise.
	(RELAX_MICROMIPS_U16BIT, RELAX_MICROMIPS_UNCOND): Likewise.
	(RELAX_MICROMIPS_COMPACT, RELAX_MICROMIPS_LINK): Likewise.
	(RELAX_MICROMIPS_RELAX32, RELAX_MICROMIPS_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_MARK_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_CLEAR_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_TOOFAR32): Likewise.
	(RELAX_MICROMIPS_MARK_TOOFAR32): Likewise.
	(RELAX_MICROMIPS_CLEAR_TOOFAR32): Likewise.
	(INSERT_OPERAND, EXTRACT_OPERAND): Handle microMIPS ASE.
	(mips_macro_warning): Add delay_slot_16bit_p, delay_slot_32bit_p,
	fsize and insns.
	(mips_mark_labels): New function.
	(mips16_small, mips16_ext): Remove variables, replacing with...
	(forced_insn_size): ... this.
	(append_insn, mips16_ip): Update accordingly.
	(micromips_insn_length): New function.
	(insn_length): Return the length of microMIPS instructions.
	(mips_record_mips16_mode): Rename to...
	(mips_record_compressed_mode): ... this.  Handle microMIPS ASE.
	(install_insn): Handle microMIPS ASE.
	(reglist_lookup): New function.
	(is_size_valid, is_delay_slot_valid): Likewise.
	(md_begin): Handle microMIPS ASE.
	(md_assemble): Likewise.  Update for append_insn interface change.
	(micromips_reloc_p): New function.
	(got16_reloc_p): Handle microMIPS ASE.
	(hi16_reloc_p): Likewise.
	(lo16_reloc_p): Likewise.
	(jmp_reloc_p): New function.
	(jalr_reloc_p): Likewise.
	(matching_lo_reloc): Handle microMIPS ASE.
	(insn_uses_reg, reg_needs_delay): Likewise.
	(mips_move_labels): Likewise.
	(mips16_mark_labels): Rename to...
	(mips_compressed_mark_labels): ... this.  Handle microMIPS ASE.
	(gpr_mod_mask): New function.
	(gpr_read_mask, gpr_write_mask): Handle microMIPS ASE.
	(fpr_read_mask, fpr_write_mask): Likewise.
	(insns_between, nops_for_vr4130, nops_for_insn): Likewise.
	(fix_loongson2f_nop, fix_loongson2f_jump): Likewise.
	(MICROMIPS_LABEL_CHAR): New macro.
	(micromips_target_label, micromips_target_name): New variables.
	(micromips_label_name, micromips_label_expr): New functions.
	(micromips_label_inc, micromips_add_label): Likewise.
	(mips_label_is_local): Likewise.
	(micromips_map_reloc): Likewise.
	(can_swap_branch_p): Handle microMIPS ASE.
	(append_insn): Add expansionp argument.  Handle microMIPS ASE.
	(start_noreorder, end_noreorder): Handle microMIPS ASE.
	(macro_start, macro_warning, macro_end): Likewise.
	(brk_fmt, cop12_fmt, jalr_fmt, lui_fmt): New variables.
	(mem12_fmt, mfhl_fmt, shft_fmt, trap_fmt): Likewise.
	(BRK_FMT, COP12_FMT, JALR_FMT, LUI_FMT): New macros.
	(MEM12_FMT, MFHL_FMT, SHFT_FMT, TRAP_FMT): Likewise.
	(macro_build): Handle microMIPS ASE.  Update for append_insn
	interface change.
	(mips16_macro_build): Update for append_insn interface change.
	(macro_build_jalr): Handle microMIPS ASE.
	(macro_build_lui): Likewise.  Simplify.
	(load_register): Handle microMIPS ASE.
	(load_address): Likewise.
	(move_register): Likewise.
	(macro_build_branch_likely): New function.
	(macro_build_branch_ccl): Likewise.
	(macro_build_branch_rs): Likewise.
	(macro_build_branch_rsrt): Likewise.
	(macro): Handle microMIPS ASE.
	(validate_micromips_insn): New function.
	(expr_const_in_range): Likewise.
	(mips_ip): Handle microMIPS ASE.
	(options): Add OPTION_MICROMIPS and OPTION_NO_MICROMIPS.
	(md_longopts): Add mmicromips and mno-micromips.
	(md_parse_option): Handle OPTION_MICROMIPS and
	OPTION_NO_MICROMIPS.
	(mips_after_parse_args): Handle microMIPS ASE.
	(md_pcrel_from): Handle microMIPS relocations.
	(mips_force_relocation): Likewise.
	(md_apply_fix): Likewise.
	(mips_align): Handle microMIPS ASE.
	(s_mipsset): Likewise.
	(s_cpload, s_cpsetup, s_cpreturn): Use relocation wrappers.
	(s_dtprel_internal): Likewise.
	(s_gpword, s_gpdword): Likewise.
	(s_insn): Handle microMIPS ASE.
	(s_mips_stab): Likewise.
	(relaxed_micromips_32bit_branch_length): New function.
	(relaxed_micromips_16bit_branch_length): New function.
	(md_estimate_size_before_relax): Handle microMIPS ASE.
	(mips_fix_adjustable): Likewise.
	(tc_gen_reloc): Handle microMIPS relocations.
	(mips_relax_frag): Handle microMIPS ASE.
	(md_convert_frag): Likewise.
	(mips_frob_file_after_relocs): Likewise.
	(mips_elf_final_processing): Likewise.
	(mips_nop_opcode): Likewise.
	(mips_handle_align): Likewise.
	(md_show_usage): Handle microMIPS options.
	* symbols.c (TC_LABEL_IS_LOCAL): New macro.
	(S_IS_LOCAL): Add a TC_LABEL_IS_LOCAL check.

	* doc/as.texinfo (Target MIPS options): Add -mmicromips and
	-mno-micromips.
	(-mmicromips, -mno-micromips): New options.
	* doc/c-mips.texi (-mmicromips, -mno-micromips): New options.
	(MIPS ISA): Document .set micromips and .set nomicromips.
	(MIPS insn): Update for microMIPS support.

gas/testsuite/
2011-02-25  Maciej W. Rozycki  <macro@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* gas/mips/micromips.d: New test.
	* gas/mips/micromips-branch-delay.d: Likewise.
	* gas/mips/micromips-branch-relax.d: Likewise.
	* gas/mips/micromips-branch-relax-pic.d: Likewise.
	* gas/mips/micromips-size-1.d: Likewise.
	* gas/mips/micromips-trap.d: Likewise.
	* gas/mips/micromips.l: New stderr output.
	* gas/mips/micromips-branch-delay.l: Likewise.
	* gas/mips/micromips-branch-relax.l: Likewise.
	* gas/mips/micromips-branch-relax-pic.l: Likewise.
	* gas/mips/micromips-size-0.l: New list test.
	* gas/mips/micromips-size-1.l: New stderr output.
	* gas/mips/micromips.s: New test source.
	* gas/mips/micromips-branch-delay.s: Likewise.
	* gas/mips/micromips-branch-relax.s: Likewise.
	* gas/mips/micromips-size-0.s: Likewise.
	* gas/mips/micromips-size-1.s: Likewise.
	* gas/mips/mips.exp: Run the new tests.

	* gas/mips/dli.s: Use .p2align.
	* gas/mips/elf_ase_micromips.d: New test.
	* gas/mips/elf_ase_micromips-2.d: Likewise.
	* gas/mips/micromips@@abs.d: Likewise.
	* gas/mips/micromips@@add.d: Likewise.
	* gas/mips/micromips@@alnv_ps-swap.d: Likewise.
	* gas/mips/micromips@@and.d: Likewise.
	* gas/mips/micromips@@beq.d: Likewise.
	* gas/mips/micromips@@bge.d: Likewise.
	* gas/mips/micromips@@bgeu.d: Likewise.
	* gas/mips/micromips@@blt.d: Likewise.
	* gas/mips/micromips@@bltu.d: Likewise.
	* gas/mips/micromips@@branch-likely.d: Likewise.
	* gas/mips/micromips@@branch-misc-1.d: Likewise.
	* gas/mips/micromips@@branch-misc-2-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-2.d: Likewise.
	* gas/mips/micromips@@branch-misc-2pic-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-2pic.d: Likewise.
	* gas/mips/micromips@@branch-misc-4-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-4.d: Likewise.
	* gas/mips/micromips@@branch-self.d: Likewise.
	* gas/mips/micromips@@cache.d: Likewise.
	* gas/mips/micromips@@daddi.d: Likewise.
	* gas/mips/micromips@@dli.d: Likewise.
	* gas/mips/micromips@@elf-jal.d: Likewise.
	* gas/mips/micromips@@elf-rel2.d: Likewise.
	* gas/mips/micromips@@elfel-rel2.d: Likewise.
	* gas/mips/micromips@@elf-rel4.d: Likewise.
	* gas/mips/micromips@@jal-svr4pic.d: Likewise.
	* gas/mips/micromips@@jal-svr4pic-noreorder.d: Likewise.
	* gas/mips/micromips@@lb-svr4pic-ilocks.d: Likewise.
	* gas/mips/micromips@@li.d: Likewise.
	* gas/mips/micromips@@loc-swap-dis.d: Likewise.
	* gas/mips/micromips@@loc-swap.d: Likewise.
	* gas/mips/micromips@@mips1-fp.d: Likewise.
	* gas/mips/micromips@@mips32-cp2.d: Likewise.
	* gas/mips/micromips@@mips32-imm.d: Likewise.
	* gas/mips/micromips@@mips32-sf32.d: Likewise.
	* gas/mips/micromips@@mips32.d: Likewise.
	* gas/mips/micromips@@mips32r2-cp2.d: Likewise.
	* gas/mips/micromips@@mips32r2-fp32.d: Likewise.
	* gas/mips/micromips@@mips32r2-sync.d: Likewise.
	* gas/mips/micromips@@mips32r2.d: Likewise.
	* gas/mips/micromips@@mips4-branch-likely.d: Likewise.
	* gas/mips/micromips@@mips4-fp.d: Likewise.
	* gas/mips/micromips@@mips4.d: Likewise.
	* gas/mips/micromips@@mips5.d: Likewise.
	* gas/mips/micromips@@mips64-cp2.d: Likewise.
	* gas/mips/micromips@@mips64.d: Likewise.
	* gas/mips/micromips@@mips64r2.d: Likewise.
	* gas/mips/micromips@@pref.d: Likewise.
	* gas/mips/micromips@@relax-at.d: Likewise.
	* gas/mips/micromips@@relax.d: Likewise.
	* gas/mips/micromips@@rol-hw.d: Likewise.
	* gas/mips/micromips@@uld2-eb.d: Likewise.
	* gas/mips/micromips@@uld2-el.d: Likewise.
	* gas/mips/micromips@@ulh2-eb.d: Likewise.
	* gas/mips/micromips@@ulh2-el.d: Likewise.
	* gas/mips/micromips@@ulw2-eb-ilocks.d: Likewise.
	* gas/mips/micromips@@ulw2-el-ilocks.d: Likewise.
	* gas/mips/cache.d: Likewise.
	* gas/mips/daddi.d: Likewise.
	* gas/mips/mips32-imm.d: Likewise.
	* gas/mips/pref.d: Likewise.
	* gas/mips/elf-rel27.d: Handle microMIPS ASE.
	* gas/mips/l_d.d: Likewise.
	* gas/mips/l_d-n32.d: Likewise.
	* gas/mips/l_d-n64.d: Likewise.
	* gas/mips/ld.d: Likewise.
	* gas/mips/ld-n32.d: Likewise.
	* gas/mips/ld-n64.d: Likewise.
	* gas/mips/s_d.d: Likewise.
	* gas/mips/s_d-n32.d: Likewise.
	* gas/mips/s_d-n64.d: Likewise.
	* gas/mips/sd.d: Likewise.
	* gas/mips/sd-n32.d: Likewise.
	* gas/mips/sd-n64.d: Likewise.
	* gas/mips/mips32.d: Update immediates.
	* gas/mips/micromips@@mips32-cp2.s: New test source.
	* gas/mips/micromips@@mips32-imm.s: Likewise.
	* gas/mips/micromips@@mips32r2-cp2.s: Likewise.
	* gas/mips/micromips@@mips64-cp2.s: Likewise.
	* gas/mips/cache.s: Likewise.
	* gas/mips/daddi.s: Likewise.
	* gas/mips/mips32-imm.s: Likewise.
	* gas/mips/elf-rel4.s: Handle microMIPS ASE.
	* gas/mips/lb-pic.s: Likewise.
	* gas/mips/ld.s: Likewise.
	* gas/mips/mips32.s: Likewise.
	* gas/mips/mips.exp: Add the micromips arch.  Exclude mips16e
	from micromips.  Run mips32-imm.

	* gas/mips/jal-mask-11.d: New test.
	* gas/mips/jal-mask-12.d: Likewise.
	* gas/mips/micromips@@jal-mask-11.d: Likewise.
	* gas/mips/jal-mask-1.s: Source for the new tests.
	* gas/mips/jal-mask-21.d: New test.
	* gas/mips/jal-mask-22.d: Likewise.
	* gas/mips/micromips@@jal-mask-12.d: Likewise.
	* gas/mips/jal-mask-2.s: Source for the new tests.
	* gas/mips/mips.exp: Run the new tests.

	* gas/mips/mips16-e.d: Add --special-syms to `objdump'.
	* gas/mips/tmips16-e.d: Likewise.
	* gas/mips/mipsel16-e.d: Likewise.
	* gas/mips/tmipsel16-e.d: Likewise.

	* gas/mips/and.s: Adjust padding.
	* gas/mips/beq.s: Likewise.
	* gas/mips/bge.s: Likewise.
	* gas/mips/bgeu.s: Likewise.
	* gas/mips/blt.s: Likewise.
	* gas/mips/bltu.s: Likewise.
	* gas/mips/branch-misc-2.s: Likewise.
	* gas/mips/jal.s: Likewise.
	* gas/mips/li.s: Likewise.
	* gas/mips/mips4.s: Likewise.
	* gas/mips/mips4-fp.s: Likewise.
	* gas/mips/relax.s: Likewise.
	* gas/mips/and.d: Update accordingly.
	* gas/mips/elf-jal.d: Likewise.
	* gas/mips/jal.d: Likewise.
	* gas/mips/li.d: Likewise.
	* gas/mips/relax-at.d: Likewise.
	* gas/mips/relax.d: Likewise.

include/elf/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (R_MICROMIPS_min): New relocations.
	(R_MICROMIPS_26_S1): Likewise.
	(R_MICROMIPS_HI16, R_MICROMIPS_LO16): Likewise.
	(R_MICROMIPS_GPREL16, R_MICROMIPS_LITERAL): Likewise.
	(R_MICROMIPS_GOT16, R_MICROMIPS_PC7_S1): Likewise.
	(R_MICROMIPS_PC10_S1, R_MICROMIPS_PC16_S1): Likewise.
	(R_MICROMIPS_CALL16, R_MICROMIPS_GOT_DISP): Likewise.
	(R_MICROMIPS_GOT_PAGE, R_MICROMIPS_GOT_OFST): Likewise.
	(R_MICROMIPS_GOT_HI16, R_MICROMIPS_GOT_LO16): Likewise.
	(R_MICROMIPS_SUB, R_MICROMIPS_HIGHER): Likewise.
	(R_MICROMIPS_HIGHEST, R_MICROMIPS_CALL_HI16): Likewise.
	(R_MICROMIPS_CALL_LO16, R_MICROMIPS_SCN_DISP): Likewise.
	(R_MICROMIPS_JALR, R_MICROMIPS_HI0_LO16): Likewise.
	(R_MICROMIPS_TLS_GD, R_MICROMIPS_TLS_LDM): Likewise.
	(R_MICROMIPS_TLS_DTPREL_HI, R_MICROMIPS_TLS_DTPREL_LO): Likewise.
	(R_MICROMIPS_TLS_GOTTPREL): Likewise.
	(R_MICROMIPS_TLS_TPREL_HI16): Likewise.
	(R_MICROMIPS_TLS_TPREL_LO16): Likewise.
	(R_MICROMIPS_GPREL7_S2, R_MICROMIPS_PC23_S2): Likewise.
	(R_MICROMIPS_max): Likewise.
	(EF_MIPS_ARCH_ASE_MICROMIPS): New macro.
	(STO_MIPS_ISA, STO_MIPS_FLAGS): Likewise.
	(ELF_ST_IS_MIPS_PLT, ELF_ST_SET_MIPS_PLT): Likewise.
	(STO_MICROMIPS): Likewise.
	(ELF_ST_IS_MICROMIPS, ELF_ST_SET_MICROMIPS): Likewise.
	(ELF_ST_IS_COMPRESSED): Likewise.
	(STO_MIPS_PLT, STO_MIPS_PIC): Rework.
	(ELF_ST_IS_MIPS_PIC, ELF_ST_SET_MIPS_PIC): Likewise.
	(STO_MIPS16, ELF_ST_IS_MIPS16, ELF_ST_SET_MIPS16): Likewise.

include/opcode/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (OP_MASK_EXTLSB, OP_SH_EXTLSB): New macros.
	(OP_MASK_STYPE, OP_SH_STYPE): Likewise.
	(OP_MASK_CODE10, OP_SH_CODE10): Likewise.
	(OP_MASK_TRAP, OP_SH_TRAP): Likewise.
	(OP_MASK_OFFSET12, OP_SH_OFFSET12): Likewise.
	(OP_MASK_OFFSET10, OP_SH_OFFSET10): Likewise.
	(OP_MASK_RS3, OP_SH_RS3): Likewise.
	(OP_MASK_MB, OP_SH_MB, OP_MASK_MC, OP_SH_MC): Likewise.
	(OP_MASK_MD, OP_SH_MD, OP_MASK_ME, OP_SH_ME): Likewise.
	(OP_MASK_MF, OP_SH_MF, OP_MASK_MG, OP_SH_MG): Likewise.
	(OP_MASK_MJ, OP_SH_MJ, OP_MASK_ML, OP_SH_ML): Likewise.
	(OP_MASK_MP, OP_SH_MP, OP_MASK_MQ, OP_SH_MQ): Likewise.
	(OP_MASK_IMMA, OP_SH_IMMA, OP_MASK_IMMB, OP_SH_IMMB): Likewise.
	(OP_MASK_IMMC, OP_SH_IMMC, OP_MASK_IMMF, OP_SH_IMMF): Likewise.
	(OP_MASK_IMMG, OP_SH_IMMG, OP_MASK_IMMH, OP_SH_IMMH): Likewise.
	(OP_MASK_IMMI, OP_SH_IMMI, OP_MASK_IMMJ, OP_SH_IMMJ): Likewise.
	(OP_MASK_IMML, OP_SH_IMML, OP_MASK_IMMM, OP_SH_IMMM): Likewise.
	(OP_MASK_IMMN, OP_SH_IMMN, OP_MASK_IMMO, OP_SH_IMMO): Likewise.
	(OP_MASK_IMMP, OP_SH_IMMP, OP_MASK_IMMQ, OP_SH_IMMQ): Likewise.
	(OP_MASK_IMMU, OP_SH_IMMU, OP_MASK_IMMW, OP_SH_IMMW): Likewise.
	(OP_MASK_IMMX, OP_SH_IMMX, OP_MASK_IMMY, OP_SH_IMMY): Likewise.
	(INSN_WRITE_GPR_S): New macro.
	(INSN2_BRANCH_DELAY_16BIT, INSN2_BRANCH_DELAY_32BIT): Likewise.
	(INSN2_READ_FPR_D): Likewise.
	(INSN2_MOD_GPR_MB, INSN2_MOD_GPR_MC): Likewise.
	(INSN2_MOD_GPR_MD, INSN2_MOD_GPR_ME): Likewise.
	(INSN2_MOD_GPR_MF, INSN2_MOD_GPR_MG): Likewise.
	(INSN2_MOD_GPR_MJ, INSN2_MOD_GPR_MP): Likewise.
	(INSN2_MOD_GPR_MQ, INSN2_MOD_SP): Likewise.
	(INSN2_READ_GPR_31, INSN2_READ_GP, INSN2_READ_PC): Likewise.
	(INSN2_UNCOND_BRANCH, INSN2_COND_BRANCH): Likewise.
	(INSN2_MOD_GPR_MHI, INSN2_MOD_GPR_MM, INSN2_MOD_GPR_MN): Likewise.
	(CPU_MICROMIPS): New macro.
	(M_BC1FL, M_BC1TL, M_BC2FL, M_BC2TL): New enum values.
	(M_BEQL, M_BGEZ, M_BGEZL, M_BGEZALL, M_BGTZ, M_BGTZL): Likewise.
	(M_BLEZ, M_BLEZL, M_BLTZ, M_BLTZL, M_BLTZALL, M_BNEL): Likewise.
	(M_CACHE_OB, M_JALS_1, M_JALS_2, M_JALS_A): Likewise.
	(M_LDC2_OB, M_LDL_OB, M_LDM_AB, M_LDM_OB): Likewise.
	(M_LDP_AB, M_LDP_OB, M_LDR_OB, M_LL_OB, M_LLD_OB): Likewise.
	(M_LWC2_OB, M_LWL_OB, M_LWM_AB, M_LWM_OB): Likewise.
	(M_LWP_AB, M_LWP_OB, M_LWR_OB): Likewise.
	(M_LWU_OB, M_PREF_OB, M_SC_OB, M_SCD_OB): Likewise.
	(M_SDC2_OB, M_SDL_OB, M_SDM_AB, M_SDM_OB): Likewise.
	(M_SDP_AB, M_SDP_OB, M_SDR_OB): Likewise.
	(M_SWC2_OB, M_SWL_OB, M_SWM_AB, M_SWM_OB): Likewise.
	(M_SWP_AB, M_SWP_OB, M_SWR_OB): Likewise.
	(MICROMIPSOP_MASK_MAJOR, MICROMIPSOP_SH_MAJOR): New macros.
	(MICROMIPSOP_MASK_IMMEDIATE, MICROMIPSOP_SH_IMMEDIATE): Likewise.
	(MICROMIPSOP_MASK_DELTA, MICROMIPSOP_SH_DELTA): Likewise.
	(MICROMIPSOP_MASK_CODE10, MICROMIPSOP_SH_CODE10): Likewise.
	(MICROMIPSOP_MASK_TRAP, MICROMIPSOP_SH_TRAP): Likewise.
	(MICROMIPSOP_MASK_SHAMT, MICROMIPSOP_SH_SHAMT): Likewise.
	(MICROMIPSOP_MASK_TARGET, MICROMIPSOP_SH_TARGET): Likewise.
	(MICROMIPSOP_MASK_EXTLSB, MICROMIPSOP_SH_EXTLSB): Likewise.
	(MICROMIPSOP_MASK_EXTMSBD, MICROMIPSOP_SH_EXTMSBD): Likewise.
	(MICROMIPSOP_MASK_INSMSB, MICROMIPSOP_SH_INSMSB): Likewise.
	(MICROMIPSOP_MASK_CODE, MICROMIPSOP_SH_CODE): Likewise.
	(MICROMIPSOP_MASK_CODE2, MICROMIPSOP_SH_CODE2): Likewise.
	(MICROMIPSOP_MASK_CACHE, MICROMIPSOP_SH_CACHE): Likewise.
	(MICROMIPSOP_MASK_SEL, MICROMIPSOP_SH_SEL): Likewise.
	(MICROMIPSOP_MASK_OFFSET12, MICROMIPSOP_SH_OFFSET12): Likewise.
	(MICROMIPSOP_MASK_3BITPOS, MICROMIPSOP_SH_3BITPOS): Likewise.
	(MICROMIPSOP_MASK_STYPE, MICROMIPSOP_SH_STYPE): Likewise.
	(MICROMIPSOP_MASK_OFFSET10, MICROMIPSOP_SH_OFFSET10): Likewise.
	(MICROMIPSOP_MASK_RS, MICROMIPSOP_SH_RS): Likewise.
	(MICROMIPSOP_MASK_RT, MICROMIPSOP_SH_RT): Likewise.
	(MICROMIPSOP_MASK_RD, MICROMIPSOP_SH_RD): Likewise.
	(MICROMIPSOP_MASK_FS, MICROMIPSOP_SH_FS): Likewise.
	(MICROMIPSOP_MASK_FT, MICROMIPSOP_SH_FT): Likewise.
	(MICROMIPSOP_MASK_FD, MICROMIPSOP_SH_FD): Likewise.
	(MICROMIPSOP_MASK_FR, MICROMIPSOP_SH_FR): Likewise.
	(MICROMIPSOP_MASK_RS3, MICROMIPSOP_SH_RS3): Likewise.
	(MICROMIPSOP_MASK_PREFX, MICROMIPSOP_SH_PREFX): Likewise.
	(MICROMIPSOP_MASK_BCC, MICROMIPSOP_SH_BCC): Likewise.
	(MICROMIPSOP_MASK_CCC, MICROMIPSOP_SH_CCC): Likewise.
	(MICROMIPSOP_MASK_COPZ, MICROMIPSOP_SH_COPZ): Likewise.
	(MICROMIPSOP_MASK_MB, MICROMIPSOP_SH_MB): Likewise.
	(MICROMIPSOP_MASK_MC, MICROMIPSOP_SH_MC): Likewise.
	(MICROMIPSOP_MASK_MD, MICROMIPSOP_SH_MD): Likewise.
	(MICROMIPSOP_MASK_ME, MICROMIPSOP_SH_ME): Likewise.
	(MICROMIPSOP_MASK_MF, MICROMIPSOP_SH_MF): Likewise.
	(MICROMIPSOP_MASK_MG, MICROMIPSOP_SH_MG): Likewise.
	(MICROMIPSOP_MASK_MH, MICROMIPSOP_SH_MH): Likewise.
	(MICROMIPSOP_MASK_MI, MICROMIPSOP_SH_MI): Likewise.
	(MICROMIPSOP_MASK_MJ, MICROMIPSOP_SH_MJ): Likewise.
	(MICROMIPSOP_MASK_ML, MICROMIPSOP_SH_ML): Likewise.
	(MICROMIPSOP_MASK_MM, MICROMIPSOP_SH_MM): Likewise.
	(MICROMIPSOP_MASK_MN, MICROMIPSOP_SH_MN): Likewise.
	(MICROMIPSOP_MASK_MP, MICROMIPSOP_SH_MP): Likewise.
	(MICROMIPSOP_MASK_MQ, MICROMIPSOP_SH_MQ): Likewise.
	(MICROMIPSOP_MASK_IMMA, MICROMIPSOP_SH_IMMA): Likewise.
	(MICROMIPSOP_MASK_IMMB, MICROMIPSOP_SH_IMMB): Likewise.
	(MICROMIPSOP_MASK_IMMC, MICROMIPSOP_SH_IMMC): Likewise.
	(MICROMIPSOP_MASK_IMMD, MICROMIPSOP_SH_IMMD): Likewise.
	(MICROMIPSOP_MASK_IMME, MICROMIPSOP_SH_IMME): Likewise.
	(MICROMIPSOP_MASK_IMMF, MICROMIPSOP_SH_IMMF): Likewise.
	(MICROMIPSOP_MASK_IMMG, MICROMIPSOP_SH_IMMG): Likewise.
	(MICROMIPSOP_MASK_IMMH, MICROMIPSOP_SH_IMMH): Likewise.
	(MICROMIPSOP_MASK_IMMI, MICROMIPSOP_SH_IMMI): Likewise.
	(MICROMIPSOP_MASK_IMMJ, MICROMIPSOP_SH_IMMJ): Likewise.
	(MICROMIPSOP_MASK_IMML, MICROMIPSOP_SH_IMML): Likewise.
	(MICROMIPSOP_MASK_IMMM, MICROMIPSOP_SH_IMMM): Likewise.
	(MICROMIPSOP_MASK_IMMN, MICROMIPSOP_SH_IMMN): Likewise.
	(MICROMIPSOP_MASK_IMMO, MICROMIPSOP_SH_IMMO): Likewise.
	(MICROMIPSOP_MASK_IMMP, MICROMIPSOP_SH_IMMP): Likewise.
	(MICROMIPSOP_MASK_IMMQ, MICROMIPSOP_SH_IMMQ): Likewise.
	(MICROMIPSOP_MASK_IMMU, MICROMIPSOP_SH_IMMU): Likewise.
	(MICROMIPSOP_MASK_IMMW, MICROMIPSOP_SH_IMMW): Likewise.
	(MICROMIPSOP_MASK_IMMX, MICROMIPSOP_SH_IMMX): Likewise.
	(MICROMIPSOP_MASK_IMMY, MICROMIPSOP_SH_IMMY): Likewise.
	(MICROMIPSOP_MASK_CODE, MICROMIPSOP_SH_CODE): Likewise.
	(MICROMIPSOP_MASK_CODE2, MICROMIPSOP_SH_CODE2): Likewise.
	(MICROMIPSOP_MASK_CACHE, MICROMIPSOP_SH_CACHE): Likewise.
	(MICROMIPSOP_MASK_CODE20, MICROMIPSOP_SH_CODE20): Likewise.
	(MICROMIPSOP_MASK_PERFREG, MICROMIPSOP_SH_PERFREG): Likewise.
	(MICROMIPSOP_MASK_CODE19, MICROMIPSOP_SH_CODE19): Likewise.
	(MICROMIPSOP_MASK_ALN, MICROMIPSOP_SH_ALN): Likewise.
	(MICROMIPSOP_MASK_VECBYTE, MICROMIPSOP_SH_VECBYTE): Likewise.
	(MICROMIPSOP_MASK_VECALIGN, MICROMIPSOP_SH_VECALIGN): Likewise.
	(MICROMIPSOP_MASK_DSPACC, MICROMIPSOP_SH_DSPACC): Likewise.
	(MICROMIPSOP_MASK_DSPACC_S, MICROMIPSOP_SH_DSPACC_S): Likewise.
	(MICROMIPSOP_MASK_DSPSFT, MICROMIPSOP_SH_DSPSFT): Likewise.
	(MICROMIPSOP_MASK_DSPSFT_7, MICROMIPSOP_SH_DSPSFT_7): Likewise.
	(MICROMIPSOP_MASK_SA3, MICROMIPSOP_SH_SA3): Likewise.
	(MICROMIPSOP_MASK_SA4, MICROMIPSOP_SH_SA4): Likewise.
	(MICROMIPSOP_MASK_IMM8, MICROMIPSOP_SH_IMM8): Likewise.
	(MICROMIPSOP_MASK_IMM10, MICROMIPSOP_SH_IMM10): Likewise.
	(MICROMIPSOP_MASK_WRDSP, MICROMIPSOP_SH_WRDSP): Likewise.
	(MICROMIPSOP_MASK_RDDSP, MICROMIPSOP_SH_RDDSP): Likewise.
	(MICROMIPSOP_MASK_BP, MICROMIPSOP_SH_BP): Likewise.
	(MICROMIPSOP_MASK_MT_U, MICROMIPSOP_SH_MT_U): Likewise.
	(MICROMIPSOP_MASK_MT_H, MICROMIPSOP_SH_MT_H): Likewise.
	(MICROMIPSOP_MASK_MTACC_T, MICROMIPSOP_SH_MTACC_T): Likewise.
	(MICROMIPSOP_MASK_MTACC_D, MICROMIPSOP_SH_MTACC_D): Likewise.
	(MICROMIPSOP_MASK_BBITIND, MICROMIPSOP_SH_BBITIND): Likewise.
	(MICROMIPSOP_MASK_CINSPOS, MICROMIPSOP_SH_CINSPOS): Likewise.
	(MICROMIPSOP_MASK_CINSLM1, MICROMIPSOP_SH_CINSLM1): Likewise.
	(MICROMIPSOP_MASK_SEQI, MICROMIPSOP_SH_SEQI): Likewise.
	(micromips_opcodes): New declaration.
	(bfd_micromips_num_opcodes): Likewise.

ld/testsuite/
2011-02-25  Catherine Moore  <clm@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* lib/ld-lib.exp (run_dump_test): Support distinct assembler
	flags for the same source named multiple times.
	* ld-mips-elf/jalx-1.s: New test source.
	* ld-mips-elf/jalx-1.d: New test output.
	* ld-mips-elf/jalx-1.ld: New test linker script.
	* ld-mips-elf/jalx-2-main.s: New test source.
	* ld-mips-elf/jalx-2-ex.s: Likewise.
	* ld-mips-elf/jalx-2-printf.s: Likewise.
	* ld-mips-elf/jalx-2.dd: New test output.
	* ld-mips-elf/jalx-2.ld: New test linker script.
	* ld-mips-elf/mips16-and-micromips.d: New test.
	* ld-mips-elf/mips-elf.exp: Run the new tests

opcodes/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* micromips-opc.c: New file.
	* mips-dis.c (micromips_to_32_reg_b_map): New array.
	(micromips_to_32_reg_c_map, micromips_to_32_reg_d_map): Likewise.
	(micromips_to_32_reg_e_map, micromips_to_32_reg_f_map): Likewise.
	(micromips_to_32_reg_g_map, micromips_to_32_reg_l_map): Likewise.
	(micromips_to_32_reg_q_map): Likewise.
	(micromips_imm_b_map, micromips_imm_c_map): Likewise.
	(micromips_ase): New variable.
	(is_micromips): New function.
	(set_default_mips_dis_options): Handle microMIPS ASE.
	(print_insn_micromips): New function.
	(is_compressed_mode_p): Likewise.
	(_print_insn_mips): Handle microMIPS instructions.
	* Makefile.am (CFILES): Add micromips-opc.c.
	* configure.in (bfd_mips_arch): Add micromips-opc.lo.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

	* mips-dis.c (micromips_to_32_reg_h_map): New variable.
	(micromips_to_32_reg_i_map): Likewise.
	(micromips_to_32_reg_m_map): Likewise.
	(micromips_to_32_reg_n_map): New macro.
@
text
@d4020 1
d5484 9
@


1.237
log
@ELFOSABI_GNU

	bfd/
	* elf.c (_bfd_elf_set_osabi): Use ELFOSABI_GNU name instead of
	ELFOSABI_LINUX alias.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf64-hppa.c: Likewise.

	binutils/
	* elfedit.c (osabis): Use ELFOSABI_GNU name instead of ELFOSABI_LINUX
	alias and ELFOSABI_HURD.  Add GNU alias.
	* readelf.c (get_osabi_name, get_symbol_binding, get_symbol_type):
	Likewise.
	* doc/binutils.texi <elfedit>: Update accordingly.

	elfcpp/
	* elfcpp.h (ELFOSABI): Add ELFOSABI_GNU with value of ELFOSABI_LINUX,
	keep ELFOSABI_LINUX as an alias.  Remove ELFOSABI_HURD.

	gas/
	* config/obj-elf.c (obj_elf_type): Use ELFOSABI_GNU name instead of
	ELFOSABI_LINUX alias.
	* config/tc-ia64.c: Likewise.

	include/elf/
	* common.h (ELFOSABI_GNU): Define, replaces...
	(ELFOSABI_LINUX): ... this, kept as an alias.
	(ELFOSABI_HURD): Remove.

	ld/testsuite/
	* ld-ifunc/ifunc.exp: Update for changed output.
	* ld-unique/unique.exp: Likewise.
@
text
@d397 1
d1182 7
@


1.236
log
@    * Makefile.am (ALL_MACHINES): Add cpu-tilegx.lo and cpu-tilepro.lo.
    (ALL_MACHINE_CFILES): Add cpu-tilegx.c and cpu-tilepro.c.
    (BFD32_BACKENDS): Add elf32-tilegx.lo, elf32-tilepro.lo,
    and elfxx-tilegx.lo.
    (BFD32_BACKENDS_CFILES): Add elf32-tilegx.c elf32-tilepro.c, and
    elfxx-tilegx.c.
    (BFD64_BACKENDS): Add elf64-tilegx.lo.
    (BFD64_BACKENDS_CFILES): Add elf64-tilegx.c.
    * Makefile.in: Regenerate.
    * arctures.c (bfd_architecture): Define bfd_arch_tilepro,
    bfd_arch_tilegx, bfd_mach_tilepro, bfd_mach_tilegx.
    (bfd_arch_info): Add bfd_tilegx_arch, bfd_tilepro_arch.
    (bfd_archures_list): Add bfd_tilegx_arch, bfd_tilepro_arch.
    bfd-in2.h: Regenerate.
    * config.bfd: Handle tilegx-*-* and tilepro-*-*.
    * configure.in: Handle bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * configure: Regenerate.
    * elf-bfd.h (enum elf_target_id): Define TILEGX_ELF_DATA and
    TILEPRO_ELF_DATA.
    * libbfd.h: Regenerate.
    * reloc.c: Add BFD_RELOC_TILEPRO_{COPY, GLOB_DAT, JMP_SLOT,
    RELATIVE, BROFF_X1, JOFFLONG_X1, JOFFLONG_X1_PLT, IMM8_X0,
    IMM8_Y0, IMM8_X1, IMM8_Y1, DEST_IMM8_X1, MT_IMM15_X1, MF_IMM15_X1,
    IMM16_X0, IMM16_X1, IMM16_X0_LO, IMM16_X1_LO, IMM16_X0_HI,
    IMM16_X1_HI, IMM16_X0_HA, IMM16_X1_HA, IMM16_X0_PCREL,
    IMM16_X1_PCREL, IMM16_X0_LO_PCREL, IMM16_X1_LO_PCREL,
    IMM16_X0_HI_PCREL, IMM16_X1_HI_PCREL, IMM16_X0_HA_PCREL,
    IMM16_X1_HA_PCREL, IMM16_X0_GOT, IMM16_X1_GOT, IMM16_X0_GOT_LO,
    IMM16_X1_GOT_LO, IMM16_X0_GOT_HI, IMM16_X1_GOT_HI,
    IMM16_X0_GOT_HA, IMM16_X1_GOT_HA, MMSTART_X0, MMEND_X0,
    MMSTART_X1, MMEND_X1, SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1,
    IMM16_X0_TLS_GD, IMM16_X1_TLS_GD, IMM16_X0_TLS_GD_LO,
    IMM16_X1_TLS_GD_LO, IMM16_X0_TLS_GD_HI, IMM16_X1_TLS_GD_HI,
    IMM16_X0_TLS_GD_HA, IMM16_X1_TLS_GD_HA, IMM16_X0_TLS_IE,
    IMM16_X1_TLS_IE, IMM16_X0_TLS_IE_LO, IMM16_X1_TLS_IE_LO,
    IMM16_X0_TLS_IE_HI, IMM16_X1_TLS_IE_HI, IMM16_X0_TLS_IE_HA,
    IMM16_X1_TLS_IE_HA, TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    Add BFD_RELOC_TILEGX_{HW0, HW1, HW2, HW3, HW0_LAST, HW1_LAST,
    HW2_LAST, COPY, GLOB_DAT, JMP_SLOT, RELATIVE, BROFF_X1,
    JUMPOFF_X1, JUMPOFF_X1_PLT, IMM8_X0, IMM8_Y0, IMM8_X1, IMM8_Y1,
    DEST_IMM8_X1, MT_IMM14_X1, MF_IMM14_X1, MMSTART_X0, MMEND_X0,
    SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1, IMM16_X0_HW0,
    IMM16_X1_HW0, IMM16_X0_HW1, IMM16_X1_HW1, IMM16_X0_HW2,
    IMM16_X1_HW2, IMM16_X0_HW3, IMM16_X1_HW3, IMM16_X0_HW0_LAST,
    IMM16_X1_HW0_LAST, IMM16_X0_HW1_LAST, IMM16_X1_HW1_LAST,
    IMM16_X0_HW2_LAST, IMM16_X1_HW2_LAST, IMM16_X0_HW0_PCREL,
    IMM16_X1_HW0_PCREL, IMM16_X0_HW1_PCREL, IMM16_X1_HW1_PCREL,
    IMM16_X0_HW2_PCREL, IMM16_X1_HW2_PCREL, IMM16_X0_HW3_PCREL,
    IMM16_X1_HW3_PCREL, IMM16_X0_HW0_LAST_PCREL,
    IMM16_X1_HW0_LAST_PCREL, IMM16_X0_HW1_LAST_PCREL,
    IMM16_X1_HW1_LAST_PCREL, IMM16_X0_HW2_LAST_PCREL,
    IMM16_X1_HW2_LAST_PCREL, IMM16_X0_HW0_GOT, IMM16_X1_HW0_GOT,
    IMM16_X0_HW1_GOT, IMM16_X1_HW1_GOT, IMM16_X0_HW2_GOT,
    IMM16_X1_HW2_GOT, IMM16_X0_HW3_GOT, IMM16_X1_HW3_GOT,
    IMM16_X0_HW0_LAST_GOT, IMM16_X1_HW0_LAST_GOT,
    IMM16_X0_HW1_LAST_GOT, IMM16_X1_HW1_LAST_GOT,
    IMM16_X0_HW2_LAST_GOT, IMM16_X1_HW2_LAST_GOT, IMM16_X0_HW0_TLS_GD,
    IMM16_X1_HW0_TLS_GD, IMM16_X0_HW1_TLS_GD, IMM16_X1_HW1_TLS_GD,
    IMM16_X0_HW2_TLS_GD, IMM16_X1_HW2_TLS_GD, IMM16_X0_HW3_TLS_GD,
    IMM16_X1_HW3_TLS_GD, IMM16_X0_HW0_LAST_TLS_GD,
    IMM16_X1_HW0_LAST_TLS_GD, IMM16_X0_HW1_LAST_TLS_GD,
    IMM16_X1_HW1_LAST_TLS_GD, IMM16_X0_HW2_LAST_TLS_GD,
    IMM16_X1_HW2_LAST_TLS_GD, IMM16_X0_HW0_TLS_IE,
    IMM16_X1_HW0_TLS_IE, IMM16_X0_HW1_TLS_IE, IMM16_X1_HW1_TLS_IE,
    IMM16_X0_HW2_TLS_IE, IMM16_X1_HW2_TLS_IE, IMM16_X0_HW3_TLS_IE,
    IMM16_X1_HW3_TLS_IE, IMM16_X0_HW0_LAST_TLS_IE,
    IMM16_X1_HW0_LAST_TLS_IE, IMM16_X0_HW1_LAST_TLS_IE,
    IMM16_X1_HW1_LAST_TLS_IE, IMM16_X0_HW2_LAST_TLS_IE,
    IMM16_X1_HW2_LAST_TLS_IE, TLS_DTPMOD64, TLS_DTPOFF64, TLS_TPOFF64,
    TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    * targets.c (bfd_elf32_tilegx_vec): Declare.
    (bfd_elf32_tilepro_vec): Declare.
    (bfd_elf64_tilegx_vec): Declare.
    (bfd_target_vector): Add bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * cpu-tilegx.c: New file.
    * cpu-tilepro.c: New file.
    * elf32-tilepro.h: New file.
    * elf32-tilepro.c: New file.
    * elf32-tilegx.c: New file.
    * elf32-tilegx.h: New file.
    * elf64-tilegx.c: New file.
    * elf64-tilegx.h: New file.
    * elfxx-tilegx.c: New file.
    * elfxx-tilegx.h: New file.

	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tilegx.c and
	config/tc-tilepro.c.
	(TARGET_CPU_HFILES): Add config/tc-tilegx.h and
	config/tc-tilepro.h.
	* Makefile.in: Regenerate.
	* configure.tgt (tilepro-*-*): New.
	(tilegx-*-*): Likewise.
	* config/tc-tilegx.c: New file.
	* config/tc-tilegx.h: Likewise.
	* config/tc-tilepro.h: Likewise.
	* config/tc-tilepro.c: Likewise.
	* doc/Makefile.am (CPU_DOCS): Add c-tilegx.texi and
	c-tilepro.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TILEGX): Define.
	(TILEPRO): Define.
	* doc/as.texinfo: Add Tile-Gx and TILEPro documentation.  Include
	c-tilegx.texi and c-tilepro.texi.
	* doc/c-tilegx.texi: New.
	* doc/c-tilepro.texi: New.

        * gas/tilepro/t_constants.s: New file.
	* gas/tilepro/t_constants.d: Likewise.
	* gas/tilepro/t_insns.s: Likewise.
	* gas/tilepro/tilepro.exp: Likewise.
	* gas/tilepro/t_insns.d: Likewise.
	* gas/tilegx/tilegx.exp: Likewise.
	* gas/tilegx/t_insns.d: Likewise.
	* gas/tilegx/t_insns.s: Likewise.

	* dis-asm.h (print_insn_tilegx): Declare.
	(print_insn_tilepro): Likewise.

	* tilegx.h: New file.
	* tilepro.h: New file.

	* common.h: Add EM_TILEGX.
	* tilegx.h: New file.
	* tilepro.h: New file.

	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx.c and
	eelf32tilepro.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx.c.
	(eelf32tilegx.c): New target.
	(eelf32tilepro.c): Likewise.
	(eelf64tilegx.c): Likewise.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle tilegx-*-* and tilepro-*-*.
	* emulparams/elf32tilegx.sh: New file.
	* emulparams/elf64tilegx.sh: New file.
	* emulparams/elf32tilepro.sh: New file.

	* ld-elf/eh5.d: Don't run on tile*.
	* ld-srec/srec.exp: xfail on tile*.
	* ld-tilegx/external.s: New file.
	* ld-tilegx/reloc.d: New file.
	* ld-tilegx/reloc.s: New file.
	* ld-tilegx/tilegx.exp: New file.
	* ld-tilepro/external.s: New file.
	* ld-tilepro/reloc.d: New file.
	* ld-tilepro/reloc.s: New file.
	* ld-tilepro/tilepro.exp: New file.

	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tilegx-dis.c,
	tilegx-opc.c, tilepro-dis.c, and tilepro-opc.c.
	* Makefile.in: Regenerate.
	* configure.in: Handle bfd_tilegx_arch and bfd_tilepro_arch.
	* configure: Regenerate.
	* disassemble.c (disassembler): Add ARCH_tilegx and ARCH_tilepro.
	* po/POTFILES.in: Regenerate.
	* tilegx-dis.c: New file.
	* tilegx-opc.c: New file.
	* tilepro-dis.c: New file.
	* tilepro-opc.c: New file.
@
text
@d6441 1
a6441 1
processing.  (This is only supported on Linux targeted assemblers).
d6462 2
a6463 1
name and type in use.  (This is only supported on Linux targeted assemblers).
@


1.235
log
@Add --size-check=[error|warning].

gas/

2011-03-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* as.c (show_usage): Add --size-check=.
	(parse_args): Add and handle OPTION_SIZE_CHECK.

	* as.h (flag_size_check): New.

	* config/obj-elf.c (elf_frob_symbol): Use as_bad to report
	bad .size directive only for --size-check=error.

	* doc/as.texinfo: Document --size-check=.

gas/testsuite/

2011-03-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/bad-size.d: New.
	* gas/i386/bad-size.s: Likewise.
	* gas/i386/bad-size.warn: Likewise.

	* gas/i386/i386.exp: Run bad-size for ELF targets.
@
text
@d490 8
d1375 19
d6911 6
d7112 8
@


1.234
log
@	* doc/as.texinfo (Overview): Add missing markup around Blackfin
	and PowerPC options.
@
text
@d246 1
d615 4
@


1.233
log
@	* config/tc-ppc.c (md_show_usage): Remove -l and -b.  Add -K PIC.
	* doc/as.texinfo: Refer to and include c-ppc.texi for PowerPC options.
	(Overview <Target PowerPC options>): Add a number of missing options.
	* doc/c-ppc.texi: Likewise.  Add markup for use in manpage generation.
@
text
@d774 1
d795 1
d1293 1
d1313 1
@


1.232
log
@	gas/
	* doc/as.texinfo (Target TIC6X options): Don't mention "-matomic".
	* doc/c-tic6x.texi (TIC6X Directives): Don't mention ".atomic".
	(TIC6X Options): Don't mention "-matomic".
	* config/tc-tic6x.c (OPTION_MATOMIC, OPTION_MNO_ATOMIC): Delete.
	(md_longopts): Remove corresponding entries.
	(md_parse_option): Don't handle them.
	(md_show_usage): Don't document them.
	(tic6x_atomic): Delete variable.
	(tic6x_update_features): Always copy tic6x_arch_enable to
	tic6x_features.
	(tic6x_arch_enable): Remove references to TIC6X_INSN_ATOMIC.
	(s_tic6x_atomic, s_tic6x_noatomic): Remove functions.
	(md_pseudo_table): Remove ".atomic" and ".noatomic".

	gas/testsuite/
	* gas/tic6x/dir-junk.l: Remove tests for .atomic and .noatomic.
	* gas/tic6x/dir-junk.s: Likewise.
	* gas/tic6x/insns-c674x-bad.d: Remove test.
	* gas/tic6x/insns-c674x-bad.l: Likewise.
	* gas/tic6x/insns-atomic.d: Remove "-matomic" switch.

	include/opcode/
	* tic6x-opcode-table.h (cmtl, ll, sl): Available on C64XP.
	* tic6x.h (TIC6X_INSN_ATOMIC): Remove.
@
text
@d431 7
a437 3
   [@@b{-mpwrx}|@@b{-mpwr2}|@@b{-mpwr}|@@b{-m601}|@@b{-mppc}|@@b{-mppc32}|@@b{-m603}|@@b{-m604}|
    @@b{-m403}|@@b{-m405}|@@b{-mppc64}|@@b{-m620}|@@b{-mppc64bridge}|@@b{-mbooke}]
   [@@b{-mcom}|@@b{-many}|@@b{-maltivec}|@@b{-mvsx}] [@@b{-memb}]
d439 2
a440 2
   [@@b{-mrelocatable}|@@b{-mrelocatable-lib}]
   [@@b{-mlittle}|@@b{-mlittle-endian}|@@b{-mbig}|@@b{-mbig-endian}]
d442 1
d1291 19
@


1.231
log
@	PR gas/12390
	* doc/all.texi: Add NS32K
	* doc/as.texinfo: Remove target specific details of which
	characters act as comment initiators and statement separators into
	individual target specific files.
	* doc/c-alpha.texi (Alpha-Chars): Document special behaviour of
	the hash character at the start of a line.
	* doc/c-arm.texi (ARM-Chars): Likewise.
	* doc/c-avr.texi (AVR-Chars): Likewise.
	* doc/c-d10v.texi (D10V-Chars): Likewise.
	* doc/c-d30v.texi (D30V-Chars):	Likewise.
	* doc/c-mmix.texi (MMIX-Chars): Likewise.
	* doc/c-s390.texi (s390 characters): Likewise.
	* doc/c-sh.texi (SH-Chars): Likewise.
	* doc/c-sh64.texi (SH64-Chars): Likewise.
	* doc/c-sparc.texi (SPARC-Chars): Likewise.
	* doc/c-tic6x.texi (TIC6X Syntax): Likewise.
	* doc/c-xtensa.texi (Xtensa Syntax): Likewise.
	* doc/c-z80.texi (Z80-Chars): Likewise.
	* doc/c-z8k.texi (Z8000-Chars): Likewise.
	* doc/c-pdp11.texi (PDP11-Syntax): Document line separator character.
	* doc/c-arc.texi (ARC-Chars): Fill in this subsection.
	* doc/c-bfin.texi (Blackfin Syntax): Document line comment and
	line separator characters.
	* doc/c-cr16.texi (CR16 Syntax): Likewise.
	* doc/c-i386.texi (i386-Chars): Likewise.
	* doc/c-i860.texi (i860-Chars):	Likewise.
	* doc/c-i960.texi (i960-Chars):	Likewise.
	* doc/c-ip2k.texi (IP2K-Chars):	Likewise.
	* doc/c-lm32.texi (LM32-Chars):	likewise.
	* doc/c-m32c.texi (M32C-Chars): Likewise.
	* doc/c-m68hc11.texi (M68HC11-syntax): Likewise.
	* doc/c-m68k.texi (M68K-Chars): Likewise.
	* doc/c-microblaze.texi (MicroBlaze-Chars): Likewise.
	* doc/c-msp430.texi (MSP430-Chars): Likewise.
	* doc/c-mt.texi (MT-Chars): Likewise.
	* doc/c-ns32k.texi (NS32K-Chars): Likewise.
	* doc/c-pj.texi (PJ-Chars): Likewise.
	* doc/c-ppc.texi (PowerPC-Chars): Likewise.
	* doc/c-rx.texi (RX-Chars): Likewise.
	* doc/c-score.texi (SCORE-Chars): Likewise.
	* doc/c-tic54x.texi (TIC54X-Chars): Likewise.
	* doc/c-v850.texi (V850-Chars): Likewise.
	* doc/c-vax.texi (VAX-Chars): Likewise.
	* doc/c-xc16x.texi (xc16x-Chars): Likewise.
@
text
@d480 3
a482 3
   [@@b{-march=@@var{arch}}] [@@b{-matomic}|@@b{-mno-atomic}]
   [@@b{-mbig-endian}|@@b{-mlittle-endian}] [@@b{-mdsbt}|@@b{-mno-dsbt}]
   [@@b{-mpid=no}|@@b{-mpid=near}|@@b{-mpid=far}] [@@b{-mpic}|@@b{-mno-pic}]
@


1.230
log
@Add x86-64 ILP32 support.

bfd/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* archures.c (bfd_mach_x64_32): New.
	(bfd_mach_x64_32_intel_syntax): Likewise.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf32_x86_64_vec for
	i[3-7]86-*-linux-*.
	(targ_selvecs): Add bfd_elf32_x86_64_vec for x86_64-*-linux-*.

	* configure.in: Support bfd_elf32_x86_64_vec.
	* configure: Regenerated.

	* cpu-i386.c (bfd_x64_32_arch_intel_syntax): New.
	(bfd_x64_32_arch): Likewise.

	* elf-bfd.h (elf_append_rela): New prototype.
	(elf_append_rel): Likewise.
	(elf64_r_info): Likewise.
	(elf32_r_info): Likewise.
	(elf64_r_sym): Likewise.
	(elf32_r_sym): Likewise.

	* elf64-x86-64.c (ABI_64_P): New.
	(elf_x86_64_info_to_howto): Replace ELF64_R_TYPE with
	ELF32_R_TYPE.  Replace ELF64_ST_TYPE with ELF_ST_TYPE.
	(elf_x86_64_check_tls_transition):Likewise.
	(elf_x86_64_check_relocs): Likewise.
	(elf_x86_64_gc_mark_hook):Likewise.
	(elf_x86_64_gc_sweep_hook): Likewise.
	(elf_x86_64_relocate_section): Likewise.
	(elf_x86_64_reloc_type_class): Likewise.
	(ELF_DYNAMIC_INTERPRETER): Renamed to ...
	(ELF64_DYNAMIC_INTERPRETER): This.
	(ELF32_DYNAMIC_INTERPRETER): New.
	(elf_x86_64_link_hash_table): Add r_info, r_sym, swap_reloca_out,
	dynamic_interpreter and dynamic_interpreter_size.
	(elf_x86_64_get_local_sym_hash): Replace ELF64_R_SYM with
	htab->r_sym.  Replace ELF64_R_INFO with htab->r_info.
	(elf_x86_64_get_local_sym_hash): Likewise.
	(elf_x86_64_check_tls_transition):Likewise.
	(elf_x86_64_check_relocs): Likewise.
	(elf_x86_64_gc_mark_hook):Likewise.
	(elf_x86_64_gc_sweep_hook): Likewise.
	(elf_x86_64_relocate_section): Likewise.
	(elf_x86_64_finish_dynamic_symbol): Likewise.
	(elf_x86_64_finish_local_dynamic_symbol): Likewise.
	(elf_x86_64_link_hash_table_create): Initialize r_info, r_sym,
	swap_reloca_out, dynamic_interpreter and dynamic_interpreter_size.
	(elf_x86_64_check_relocs): Check ABI_64_P when requesting for
	PIC.
	(elf_x86_64_relocate_section): Likewise.
	(elf64_x86_64_adjust_dynamic_symbol): Replace sizeof
	(Elf64_External_Rela) with bed->s->sizeof_rela.
	(elf64_x86_64_allocate_dynrelocs): Likewise.
	(elf64_x86_64_size_dynamic_sections): Likewise.
	(elf64_x86_64_finish_dynamic_symbol): Likewise.
	(elf64_x86_64_append_rela): Removed.
	(elf32_x86_64_elf_object_p): New.
	Add bfd_elf32_x86_64_vec.

	* elf64-x86-64.c (elf64_x86_64_xxx): Renamed to ...
	(elf_x86_64_xxx): This.

	* elflink.c (bfd_elf_final_link): Check ELF file class on error.
	(elf_append_rela): New.
	(elf_append_rel): Likewise.
	(elf64_r_info): Likewise.
	(elf32_r_info): Likewise.
	(elf64_r_sym): Likewise.
	(elf32_r_sym): Likewise.

	* targets.c (bfd_elf32_x86_64_vec): New.
	(_bfd_target_vector): Add bfd_elf32_x86_64_vec.

gas/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (x86_elf_abi): New.
	(i386_mach): Return bfd_mach_x64_32 for ILP32.
	(OPTION_N32): Likewise.
	(md_longopts): Add "n32" for ELF.
	(md_parse_option): Handle OPTION_N32.
	(md_show_usage): Add --n32.
	(i386_target_format): Update and check x86_elf_abi.

	* config/tc-i386.h (ELF_TARGET_FORMAT32): New.

	* doc/as.texinfo: Document --n32.
	* doc/c-i386.texi: Likewise.

gas/testsuite/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/ilp32/lns/ilp32.exp: New.
	* gas/i386/ilp32/lns/lns-common-1.d: Likewise.
	* gas/i386/ilp32/lns/lns-duplicate.d: Likewise.

	* gas/i386/ilp32/cfi/cfi-common-1.d: New.
	* gas/i386/ilp32/cfi/cfi-common-2.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-3.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-4.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-5.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-6.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-7.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-x86_64.d: Likewise.
	* gas/i386/ilp32/cfi/ilp32.exp: Likewise.
	* gas/i386/ilp32/elf/ehopt0.d: Likewise.
	* gas/i386/ilp32/elf/equ-reloc.d: Likewise.
	* gas/i386/ilp32/elf/file.d: Likewise.
	* gas/i386/ilp32/elf/group0a.d: Likewise.
	* gas/i386/ilp32/elf/group0b.d: Likewise.
	* gas/i386/ilp32/elf/group1a.d: Likewise.
	* gas/i386/ilp32/elf/group1b.d: Likewise.
	* gas/i386/ilp32/elf/ifunc-1.d: Likewise.
	* gas/i386/ilp32/elf/ilp32.exp: Likewise.
	* gas/i386/ilp32/elf/redef.d: Likewise.
	* gas/i386/ilp32/elf/section0.d: Likewise.
	* gas/i386/ilp32/elf/section1.d: Likewise.
	* gas/i386/ilp32/elf/section3.d: Likewise.
	* gas/i386/ilp32/elf/section4.d: Likewise.
	* gas/i386/ilp32/elf/section6.d: Likewise.
	* gas/i386/ilp32/elf/section7.d: Likewise.
	* gas/i386/ilp32/elf/struct.d: Likewise.
	* gas/i386/ilp32/elf/symtab.d: Likewise.
	* gas/i386/ilp32/elf/symver.d: Likewise.

	* gas/i386/ilp32/ilp32.exp: New.
	* gas/i386/ilp32/immed64.d: Likewise.
	* gas/i386/ilp32/mixed-mode-reloc64.d: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
	* gas/i386/ilp32/rex.d: Likewise.
	* gas/i386/ilp32/rexw.d: Likewise.
	* gas/i386/ilp32/svme64.d: Likewise.
	* gas/i386/ilp32/x86-64-addr32.d: Likewise.
	* gas/i386/ilp32/x86-64-addr32-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-aes.d: Likewise.
	* gas/i386/ilp32/x86-64-aes-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-amdfam10.d: Likewise.
	* gas/i386/ilp32/x86-64-arch-1.d: Likewise.
	* gas/i386/ilp32/x86-64-arch-2.d: Likewise.
	* gas/i386/ilp32/x86-64-avx.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-swap.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-swap-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-branch.d: Likewise.
	* gas/i386/ilp32/x86-64-cbw.d: Likewise.
	* gas/i386/ilp32/x86-64-cbw-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-clmul.d: Likewise.
	* gas/i386/ilp32/x86-64-clmul-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-crc32.d: Likewise.
	* gas/i386/ilp32/x86-64-crc32-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-crx.d: Likewise.
	* gas/i386/ilp32/x86-64-crx-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64.d: Likewise.
	* gas/i386/ilp32/x86-64-disp.d: Likewise.
	* gas/i386/ilp32/x86-64-disp-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-drx.d: Likewise.
	* gas/i386/ilp32/x86-64-drx-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-ept.d: Likewise.
	* gas/i386/ilp32/x86-64-ept-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-fma4.d: Likewise.
	* gas/i386/ilp32/x86-64-fma.d: Likewise.
	* gas/i386/ilp32/x86-64-fma-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-gidt.d: Likewise.
	* gas/i386/ilp32/x86-64-ifunc.d: Likewise.
	* gas/i386/ilp32/x86-64-intel64.d: Likewise.
	* gas/i386/ilp32/x86-64-io.d: Likewise.
	* gas/i386/ilp32/x86-64-io-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-io-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-localpic.d: Likewise.
	* gas/i386/ilp32/x86-64-mem.d: Likewise.
	* gas/i386/ilp32/x86-64-mem-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-movbe.d: Likewise.
	* gas/i386/ilp32/x86-64-movbe-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-core2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-nocona.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-pentium.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-3.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4-core2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-5.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-5-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode-inval.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode-inval-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-opts.d: Likewise.
	* gas/i386/ilp32/x86-64-opts-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.d: Likewise.
	* gas/i386/ilp32/x86-64-reg.d: Likewise.
	* gas/i386/ilp32/x86-64-reg-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-rep.d: Likewise.
	* gas/i386/ilp32/x86-64-rep-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-rip.d: Likewise.
	* gas/i386/ilp32/x86-64-rip-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sib.d: Likewise.
	* gas/i386/ilp32/x86-64-sib-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-simd.d: Likewise.
	* gas/i386/ilp32/x86-64-simd-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-simd-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx-opts.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx-opts-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse3.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_1.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_1-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_2.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_2-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check-none.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check-warn.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-noavx.d: Likewise.
	* gas/i386/ilp32/x86-64-ssse3.d: Likewise.
	* gas/i386/ilp32/x86-64-stack.d: Likewise.
	* gas/i386/ilp32/x86-64-stack-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-stack-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-unwind.d: Likewise.
	* gas/i386/ilp32/x86-64-vmx.d: Likewise.
	* gas/i386/ilp32/x86-64-xsave.d: Likewise.
	* gas/i386/ilp32/x86-64-xsave-intel.d: Likewise.

ld/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* emulparams/elf32_x86_64.sh: New.

	* configure.tgt (targ64_extra_emuls): Add elf32_x86_64 for
	i[3-7]86-*-linux-*.
	(targ_extra_libpath): Likewise.
	(targ_extra_emuls): Add elf32_x86_64 for x86_64-*-linux-*.
	(targ_extra_libpath): Likewise.

	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf32_x86_64.c.
	(eelf32_x86_64.c): New.
	* Makefile.in: Regenerated.

opcodes/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (print_insn): Support bfd_mach_x64_32 and
	bfd_mach_x64_32_intel_syntax.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
d106 2
a107 1
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d157 2
a158 1
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d2241 1
a2241 1
* Preprocessing::              Preprocessing
d2326 12
a2337 92
Anything from the @@dfn{line comment} character to the next newline
is considered a comment and is ignored.  The line comment character is
@@ifset ARC
@@samp{;} on the ARC;
@@end ifset
@@ifset ARM
@@samp{@@@@} on the ARM;
@@end ifset
@@ifset H8/300
@@samp{;} for the H8/300 family;
@@end ifset
@@ifset HPPA
@@samp{;} for the HPPA;
@@end ifset
@@ifset I80386
@@samp{#} on the i386 and x86-64;
@@end ifset
@@ifset I960
@@samp{#} on the i960;
@@end ifset
@@ifset PDP11
@@samp{;} for the PDP-11;
@@end ifset
@@ifset PJ
@@samp{;} for picoJava;
@@end ifset
@@ifset PPC
@@samp{#} for Motorola PowerPC;
@@end ifset
@@ifset S390
@@samp{#} for IBM S/390;
@@end ifset
@@ifset SCORE
@@samp{#} for the Sunplus SCORE;
@@end ifset
@@ifset SH
@@samp{!} for the Renesas / SuperH SH;
@@end ifset
@@ifset SPARC
@@samp{!} on the SPARC;
@@end ifset
@@ifset IP2K
@@samp{#} on the ip2k;
@@end ifset
@@ifset M32C
@@samp{#} on the m32c;
@@end ifset
@@ifset M32R
@@samp{#} on the m32r;
@@end ifset
@@ifset M680X0
@@samp{|} on the 680x0;
@@end ifset
@@ifset M68HC11
@@samp{#} on the 68HC11 and 68HC12;
@@end ifset
@@ifset RX
@@samp{#} on the RX;
@@end ifset
@@ifset TIC6X
@@samp{;} on the TMS320C6X;
@@end ifset
@@ifset VAX
@@samp{#} on the Vax;
@@end ifset
@@ifset Z80
@@samp{;} for the Z80;
@@end ifset
@@ifset Z8000
@@samp{!} for the Z8000;
@@end ifset
@@ifset V850
@@samp{#} on the V850;
@@end ifset
@@ifset XTENSA
@@samp{#} for Xtensa systems;
@@end ifset
see @@ref{Machine Dependencies}.  @@refill
@@c FIXME What about i860?

@@ifset GENERIC
On some machines there are two different line comment characters.  One
character only begins a comment if it is the first non-whitespace character on
a line, while the other always begins a comment.
@@end ifset

@@ifset V850
The V850 assembler also supports a double dash as starting a comment that
extends to the end of the line.

@@samp{--};
@@end ifset
d2395 7
a2401 29
@@ifclear GENERIC
@@ifclear abnormal-separator
A @@dfn{statement} ends at a newline character (@@samp{\n}) or at a
semicolon (@@samp{;}).  The newline or semicolon is considered part of
the preceding statement.  Newlines and semicolons within character
constants are an exception: they do not end statements.
@@end ifclear
@@ifset abnormal-separator
@@ifset HPPA
A @@dfn{statement} ends at a newline character (@@samp{\n}) or an exclamation
point (@@samp{!}).  The newline or exclamation point is considered part of the
preceding statement.  Newlines and exclamation points within character
constants are an exception: they do not end statements.
@@end ifset
@@ifset H8
A @@dfn{statement} ends at a newline character (@@samp{\n}); or (for the
H8/300) a dollar sign (@@samp{$}); or (for the Renesas-SH) a semicolon
(@@samp{;}).  The newline or separator character is considered part of
the preceding statement.  Newlines and separators within character
constants are an exception: they do not end statements.
@@end ifset
@@end ifset
@@end ifclear
@@ifset GENERIC
A @@dfn{statement} ends at a newline character (@@samp{\n}) or line
separator character.  (The line separator is usually @@samp{;}, unless this
conflicts with the comment character; see @@ref{Machine Dependencies}.)  The
newline or separator character is considered part of the preceding
statement.  Newlines and separators within character constants are an
a2402 1
@@end ifset
d6817 3
@


1.229
log
@gas: bfin: convert to new doc style

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d318 1
a318 1
   [@@b{--32}|@@b{--64}] [@@b{-n}]
@


1.228
log
@2010-11-23  Sterling Augustine  <sterling@@tensilica.com>

	* doc/as.texinfo: Refer to and include c-xtensa.texi for Xtensa
	options.  Move Xtensa options to proper alphabetical location.
	* doc/c-xtensa.texi: Add markup for use in manpage generation.
@
text
@d769 8
d779 5
a784 10
@@table @@gcctabopt
@@item -mcpu=@@var{processor}@@r{[}-@@var{sirevision}@@r{]}
This option specifies the target processor.  The optional @@var{sirevision}
is not used in assembler.
@@item -mfdpic
Assemble for the FDPIC ABI.
@@item -mno-fdpic
@@itemx -mnopic
Disable -mfdpic.
@@end table
@


1.227
log
@Refer to and include c-i386.texi for i386 options.

2010-11-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* doc/as.texinfo: Refer to and include c-i386.texi for i386
	options.

	* doc/c-i386.texi: Add markup for use in manpage generation.
@
text
@d483 9
a506 1
@@ifset XTENSA
a507 6
@@emph{Target Xtensa options:}
 [@@b{--[no-]text-section-literals}] [@@b{--[no-]absolute-literals}]
 [@@b{--[no-]target-align}] [@@b{--[no-]longcalls}]
 [@@b{--[no-]transform}]
 [@@b{--rename-section} @@var{oldname}=@@var{newname}]
@@end ifset
d1329 8
d1338 7
a1344 3
@@ifset XTENSA
The following options are available when @@value{AS} is configured for
an Xtensa processor.
a1345 34
@@table @@gcctabopt
@@item --text-section-literals | --no-text-section-literals
With @@option{--text-@@-section-@@-literals}, literal pools are interspersed
in the text section.  The default is
@@option{--no-@@-text-@@-section-@@-literals}, which places literals in a
separate section in the output file.  These options only affect literals
referenced via PC-relative @@code{L32R} instructions; literals for
absolute mode @@code{L32R} instructions are handled separately.

@@item --absolute-literals | --no-absolute-literals
Indicate to the assembler whether @@code{L32R} instructions use absolute
or PC-relative addressing.  The default is to assume absolute addressing
if the Xtensa processor includes the absolute @@code{L32R} addressing
option.  Otherwise, only the PC-relative @@code{L32R} mode can be used.

@@item --target-align | --no-target-align
Enable or disable automatic alignment to reduce branch penalties at the
expense of some code density.  The default is @@option{--target-@@-align}.

@@item --longcalls | --no-longcalls
Enable or disable transformation of call instructions to allow calls
across a greater range of addresses.  The default is
@@option{--no-@@-longcalls}.

@@item --transform | --no-transform
Enable or disable all assembler transformations of Xtensa instructions.
The default is @@option{--transform};
@@option{--no-transform} should be used only in the rare cases when the
instructions must be exactly as specified in the assembly source.

@@item --rename-section @@var{oldname}=@@var{newname}
When generating output sections, rename the @@var{oldname} section to
@@var{newname}.
@@end table
d1348 2
@


1.226
log
@	* doc/as.texinfo: Refer to or include c-alpha.texi for Alpha
	options.  Refer to or include c-tic6x.texi for C6X options instead
	of duplicating documentation here.
	* doc/c-alpha.texi, doc/c-tic6x.texi: Add markup for use in
	manpage generation.
@
text
@d815 20
d836 1
@


1.225
log
@bfd:
	* elf32-tic6x.c (elf32_tic6x_obj_attrs_arg_type): Except for
	Tag_ABI_compatibility, treat odd tags as strings and even ones as
	integers.
	(elf32_tic6x_obj_attrs_order, elf32_tic6x_tag_to_array_alignment,
	elf32_tic6x_array_alignment_to_tag): New.
	(elf32_tic6x_merge_attributes): Handle more attributes.  Set type
	for merged attributes.
	(elf_backend_obj_attrs_order): Define.

binutils:
	* readelf.c (display_tic6x_attribute): Handle more attributes.

gas:
	* config/tc-tic6x.c (OPTION_MPID, OPTION_MPIC, OPTION_MNO_PIC):
	New enum values.
	(md_longopts): Add options mpid, mpic and mno-pic.
	(tic6x_pid_type, tic6x_pid, tic6x_pic, tic6x_pid_type_table,
	tic6x_pid_types, tic6x_use_pid): New.
	(md_parse_option): Handle new options.
	(md_show_usage): Output help text for new options.
	(tic6x_set_attributes): Set PID and PIC attributes.
	* doc/as.texinfo: Document -mpid=, -mpic and -mno-pic.
	* doc/c-tic6x.texi (TIC6X Options): Likewise.

gas/testsuite:
	* gas/tic6x/attr-array-directive-1.d,
	gas/tic6x/attr-array-directive-1.s,
	gas/tic6x/attr-array-directive-2.d,
	gas/tic6x/attr-array-directive-2.s,
	gas/tic6x/attr-array-directive-3.d,
	gas/tic6x/attr-array-directive-3.s,
	gas/tic6x/attr-array-directive-4.d,
	gas/tic6x/attr-array-directive-4.s,
	gas/tic6x/attr-conformance-directive-1.d,
	gas/tic6x/attr-conformance-directive-1.s,
	gas/tic6x/attr-conformance-directive-2.d,
	gas/tic6x/attr-conformance-directive-2.s,
	gas/tic6x/attr-pic-directive-1.d,
	gas/tic6x/attr-pic-directive-1.s,
	gas/tic6x/attr-pic-directive-2.d,
	gas/tic6x/attr-pic-directive-2.s,
	gas/tic6x/attr-pic-opts-mno-pic.d, gas/tic6x/attr-pic-opts-mpic.d,
	gas/tic6x/attr-pid-directive-1.d,
	gas/tic6x/attr-pid-directive-1.s,
	gas/tic6x/attr-pid-directive-2.d,
	gas/tic6x/attr-pid-directive-2.s,
	gas/tic6x/attr-pid-opts-mpid-far.d,
	gas/tic6x/attr-pid-opts-mpid-near.d,
	gas/tic6x/attr-pid-opts-mpid-no.d,
	gas/tic6x/attr-stack-directive-1.d,
	gas/tic6x/attr-stack-directive-1.s,
	gas/tic6x/attr-stack-directive-2.d,
	gas/tic6x/attr-stack-directive-2.s,
	gas/tic6x/attr-wchar-directive-1.d,
	gas/tic6x/attr-wchar-directive-1.s,
	gas/tic6x/attr-wchar-directive-2.d,
	gas/tic6x/attr-wchar-directive-2.s: New tests.

include/elf:
	* tic6x-attrs.h (Tag_ABI_wchar_t, Tag_ABI_stack_align_needed,
	Tag_ABI_stack_align_preserved, Tag_ABI_PID, Tag_ABI_PIC,
	Tag_ABI_array_object_alignment,
	Tag_ABI_array_object_align_expected, Tag_ABI_conformance): Define.

ld/testsuite:
	* ld-tic6x/attr-array-16-16.d, ld-tic6x/attr-array-16-4.d,
	ld-tic6x/attr-array-16-416.d, ld-tic6x/attr-array-16-48.d,
	ld-tic6x/attr-array-16-8.d, ld-tic6x/attr-array-16-816.d,
	ld-tic6x/attr-array-16.s, ld-tic6x/attr-array-4-16.d,
	ld-tic6x/attr-array-4-4.d, ld-tic6x/attr-array-4-416.d,
	ld-tic6x/attr-array-4-48.d, ld-tic6x/attr-array-4-8.d,
	ld-tic6x/attr-array-4-816.d, ld-tic6x/attr-array-4.s,
	ld-tic6x/attr-array-416-16.d, ld-tic6x/attr-array-416-4.d,
	ld-tic6x/attr-array-416-416.d, ld-tic6x/attr-array-416-48.d,
	ld-tic6x/attr-array-416-8.d, ld-tic6x/attr-array-416-816.d,
	ld-tic6x/attr-array-416.s, ld-tic6x/attr-array-48-16.d,
	ld-tic6x/attr-array-48-4.d, ld-tic6x/attr-array-48-416.d,
	ld-tic6x/attr-array-48-48.d, ld-tic6x/attr-array-48-8.d,
	ld-tic6x/attr-array-48-816.d, ld-tic6x/attr-array-48.s,
	ld-tic6x/attr-array-8-16.d, ld-tic6x/attr-array-8-4.d,
	ld-tic6x/attr-array-8-416.d, ld-tic6x/attr-array-8-48.d,
	ld-tic6x/attr-array-8-8.d, ld-tic6x/attr-array-8-816.d,
	ld-tic6x/attr-array-8.s, ld-tic6x/attr-array-816-16.d,
	ld-tic6x/attr-array-816-4.d, ld-tic6x/attr-array-816-416.d,
	ld-tic6x/attr-array-816-48.d, ld-tic6x/attr-array-816-8.d,
	ld-tic6x/attr-array-816-816.d, ld-tic6x/attr-array-816.s,
	ld-tic6x/attr-conformance-10-10.d,
	ld-tic6x/attr-conformance-10-11.d,
	ld-tic6x/attr-conformance-10-none.d,
	ld-tic6x/attr-conformance-10.s, ld-tic6x/attr-conformance-11-10.d,
	ld-tic6x/attr-conformance-11-11.d,
	ld-tic6x/attr-conformance-11-none.d,
	ld-tic6x/attr-conformance-11.s,
	ld-tic6x/attr-conformance-none-10.d,
	ld-tic6x/attr-conformance-none-11.d,
	ld-tic6x/attr-conformance-none-none.d,
	ld-tic6x/attr-conformance-none.s, ld-tic6x/attr-pic-0.s,
	ld-tic6x/attr-pic-00.d, ld-tic6x/attr-pic-01.d,
	ld-tic6x/attr-pic-1.s, ld-tic6x/attr-pic-10.d,
	ld-tic6x/attr-pic-11.d, ld-tic6x/attr-pid-0.s,
	ld-tic6x/attr-pid-00.d, ld-tic6x/attr-pid-01.d,
	ld-tic6x/attr-pid-02.d, ld-tic6x/attr-pid-1.s,
	ld-tic6x/attr-pid-10.d, ld-tic6x/attr-pid-11.d,
	ld-tic6x/attr-pid-12.d, ld-tic6x/attr-pid-2.s,
	ld-tic6x/attr-pid-20.d, ld-tic6x/attr-pid-21.d,
	ld-tic6x/attr-pid-22.d, ld-tic6x/attr-stack-16-16.d,
	ld-tic6x/attr-stack-16-8.d, ld-tic6x/attr-stack-16-816.d,
	ld-tic6x/attr-stack-16.s, ld-tic6x/attr-stack-8-16.d,
	ld-tic6x/attr-stack-8-8.d, ld-tic6x/attr-stack-8-816.d,
	ld-tic6x/attr-stack-8.s, ld-tic6x/attr-stack-816-16.d,
	ld-tic6x/attr-stack-816-8.d, ld-tic6x/attr-stack-816-816.d,
	ld-tic6x/attr-stack-816.s, ld-tic6x/attr-wchar-0.s,
	ld-tic6x/attr-wchar-00.d, ld-tic6x/attr-wchar-01.d,
	ld-tic6x/attr-wchar-02.d, ld-tic6x/attr-wchar-1.s,
	ld-tic6x/attr-wchar-10.d, ld-tic6x/attr-wchar-11.d,
	ld-tic6x/attr-wchar-12.d, ld-tic6x/attr-wchar-2.s,
	ld-tic6x/attr-wchar-20.d, ld-tic6x/attr-wchar-21.d,
	ld-tic6x/attr-wchar-22.d: New tests.
@
text
@d705 20
d726 1
d1285 1
d1288 8
d1298 5
a1302 58

@@table @@gcctabopt
@@item -march=@@var{arch}
Enable (only) instructions from architecture @@var{arch}.  By default,
all instructions are permitted.

The following values of @@var{arch} are accepted: @@code{c62x},
@@code{c64x}, @@code{c64x+}, @@code{c67x}, @@code{c67x+}, @@code{c674x}.

@@item -matomic
@@itemx -mno-atomic
Enable or disable the optional C64x+ atomic operation instructions.
By default, they are enabled if no @@option{-march} option is given, or
if an architecture is specified with @@option{-march} that implies
these instructions are present (currently, there are no such
architectures); they are disabled if an architecture is specified with
@@option{-march} on which the instructions are optional or not
present.  This option overrides such a default from the architecture,
independent of the order in which the @@option{-march} or
@@option{-matomic} or @@option{-mno-atomic} options are passed.

@@item -mdsbt
@@itemx -mno-dsbt
The @@option{-mdsbt} option causes the assembler to generate the
@@code{Tag_ABI_DSBT} attribute with a value of 1, indicating that the
code is using DSBT addressing.  The @@option{-mno-dsbt} option, the
default, causes the tag to have a value of 0, indicating that the code
does not use DSBT addressing.  The linker will emit a warning if
objects of different type (DSBT and non-DSBT) are linked together.

@@item -mpid=no
@@itemx -mpid=near
@@itemx -mpid=far
The @@option{-mpid=} option causes the assembler to generate the
@@code{Tag_ABI_PID} attribute with a value indicating the form of data
addressing used by the code.  @@option{-mpid=no}, the default,
indicates position-dependent data addressing, @@option{-mpid=near}
indicates position-independent addressing with GOT accesses using near
DP addressing, and @@option{-mpid=far} indicates position-independent
addressing with GOT accesses using far DP addressing.  The linker will
emit a warning if objects built with different settings of this option
are linked together.

@@item -mpic
@@itemx -mno-pic
The @@option{-mpic} option causes the assembler to generate the
@@code{Tag_ABI_PIC} attribute with a value of 1, indicating that the
code is using position-independent code addressing,  The
@@code{-mno-pic} option, the default, causes the tag to have a value of
0, indicating position-dependent code addressing.  The linker will
emit a warning if objects of different type (position-dependent and
position-independent) are linked together.

@@item -mbig-endian
@@itemx -mlittle-endian
Generate code for the specified endianness.  The default is
little-endian.
@@end table
d1306 1
@


1.225.2.1
log
@	* config/obj-elf.c (elf_frob_symbol): Report S_SET_SIZE symbol
	on .size expression errors rather than symbols in the size expression.

	Backport 2011-03-16  H.J. Lu  <hongjiu.lu@@intel.com>
	* as.c (show_usage): Add --size-check=.
	(parse_args): Add and handle OPTION_SIZE_CHECK.
	* as.h (flag_size_check): New.
	* config/obj-elf.c (elf_frob_symbol): Use as_bad to report
	bad .size directive only for --size-check=error.
	* doc/as.texinfo: Document --size-check=.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
d106 1
a106 2
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
Inc.
d156 1
a156 2
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
Inc.
a243 1
 [@@b{--size-check=[error|warning]}]
a604 4
@@item --size-check=error
@@itemx --size-check=warning
Issue an error or warning for invalid ELF .size directive.

@


1.225.2.2
log
@	* config/tc-ppc.c (md_show_usage): Remove -l and -b.  Add -K PIC.
	* doc/as.texinfo (Overview <Target PowerPC options>): Add a number
	of missing options.
	* doc/c-ppc.texi: Likewise.
@
text
@d432 3
a434 7
   [@@b{-a32}|@@b{-a64}]
   [@@b{-mpwrx}|@@b{-mpwr2}|@@b{-mpwr}|@@b{-m601}|@@b{-mppc}|@@b{-mppc32}|@@b{-m603}|@@b{-m604}|@@b{-m403}|@@b{-m405}|
    @@b{-m440}|@@b{-m464}|@@b{-m476}|@@b{-m7400}|@@b{-m7410}|@@b{-m7450}|@@b{-m7455}|@@b{-m750cl}|@@b{-mppc64}|
    @@b{-m620}|@@b{-me500}|@@b{-e500x2}|@@b{-me500mc}|@@b{-me500mc64}|@@b{-mppc64bridge}|@@b{-mbooke}|
    @@b{-mpower4}|@@b{-mpr4}|@@b{-mpower5}|@@b{-mpwr5}|@@b{-mpwr5x}|@@b{-mpower6}|@@b{-mpwr6}|
    @@b{-mpower7}|@@b{-mpw7}|@@b{-ma2}|@@b{-mcell}|@@b{-mspe}|@@b{-mtitan}|@@b{-me300}|@@b{-mcom}]
   [@@b{-many}] [@@b{-maltivec}|@@b{-mvsx}]
d436 2
a437 2
   [@@b{-mrelocatable}|@@b{-mrelocatable-lib}|@@b{-K PIC}] [@@b{-memb}]
   [@@b{-mlittle}|@@b{-mlittle-endian}|@@b{-le}|@@b{-mbig}|@@b{-mbig-endian}|@@b{-be}]
a438 1
   [@@b{-nops=@@var{count}}]
@


1.224
log
@bfd:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* elf32-tic6x.c (elf32_tic6x_merge_attributes): Check for mismatch
	of DSBT attributes.

binutils:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* readelf.c (display_tic6x_attribute): Handle Tag_ABI_DSBT.

gas:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* config/tc-tic6x.c (OPTION_MDSBT, OPTION_MNO_DSBT): New enum
	values.
	(md_longopts): Add mdsbt and mno-dsbt.
	(tic6x_dsbt): New static variable.
	(md_parse_option): Handle OPTION_MDSBT and OPTION_MNO_DSBT.
	(md_show_usage): Output help text for -mdsbt and -mno-dsbt.
	(TAG): Add comma at the end.
	(tic6x_set_attributes): Set Tag_ABI_DSBT.
	* doc/as.texinfo: Document -mdsbt and -mno-dsbt.
	* doc/c-tic6x.texi (TIC6X Options): Likewise.
	(TIC6X Directives): Mention Tag_ABI_DSBT.

gas/testsuite:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* gas/tic6x/attr-dsbt-directive-1.d,
	gas/tic6x/attr-dsbt-directive-1.s,
	gas/tic6x/attr-dsbt-directive-2.d,
	gas/tic6x/attr-dsbt-directive-2.s,
	gas/tic6x/attr-dsbt-opts-mdsbt.d,
	gas/tic6x/attr-dsbt-opts-mno-dsbt.d: New tests.

include/elf:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* tic6x-attrs.h (Tag_ABI_DSBT): New.

ld/testsuite:
2010-10-29  Bernd Schmidt  <bernds@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ld-tic6x/attr-dsbt-0.s, ld-tic6x/attr-dsbt-00.d,
	ld-tic6x/attr-dsbt-01.d, ld-tic6x/attr-dsbt-1.s,
	ld-tic6x/attr-dsbt-10.d, ld-tic6x/attr-dsbt-11.d: New tests.
@
text
@d480 1
d1298 23
@


1.223
log
@Add directory section for info document.
@
text
@d479 1
a479 1
   [@@b{-mbig-endian}|@@b{-mlittle-endian}]
d1288 9
@


1.222
log
@Add "?" pseudo-flag to ELF .section/.pushsection directives.
@
text
@d90 3
a92 3
@@ifinfo
@@format
START-INFO-DIR-ENTRY
d95 2
a96 3
END-INFO-DIR-ENTRY
@@end format
@@end ifinfo
@


1.221
log
@	* as.c (show_usage): Don't list --compress-debug-sections if zlib not
	installed.
	(main): Warn if --compress-debug-sections requested and zlib not
	installed.
	* doc/as.texinfo: Add --compress-debug-sections,
	--nocompress-debug-sections.
@
text
@d11 1
a11 1
@@c         in config/obj-*.c       
d73 1
a73 1
@@c 
d78 1
a78 1
@@c 
d83 1
a83 1
@@c discretion, of course. 
d249 1
a249 1
@@c Add an empty line for separation. 
d420 1
a420 1
   [@@b{-m}@@var{cpu}] [@@b{-m}@@var{machine}]  
d472 1
a472 1
 [@@b{-mcpu=54[123589]}|@@b{-mcpu=54[56]lp}] [@@b{-mfar-mode}|@@b{-mf}] 
d862 1
a862 1
encountered. 
d865 2
a866 2
Do not produce warning messages when questionable parallel constructs are 
encountered. 
d964 1
a964 1
Specify to use the 32-bit integer ABI.  
d967 1
a967 1
Specify to use the 32-bit double ABI.  
d970 1
a970 1
Specify to use the 64-bit double ABI.  
d1024 1
a1024 1
architecture. 
d1345 1
a1345 1
@@item  -ignore-undocumented-instructions 
d1348 1
a1348 1
@@item  -ignore-unportable-instructions 
d1351 1
a1351 1
@@item  -warn-undocumented-instructions 
d1354 1
a1354 1
@@item  -warn-unportable-instructions 
d1356 2
a1357 2
Issue a warning for undocumented Z80 instructions that do not work on R800.  
@@item  -forbid-undocumented-instructions 
d1360 1
a1360 1
@@item  -forbid-unportable-instructions 
d1617 1
a1617 1
@@code{a.out}, or 
d2466 1
a2466 1
A @@dfn{statement} ends at a newline character (@@samp{\n}) or an exclamation 
d2522 1
a2522 1
For HPPA targets, labels need not be immediately followed by a colon, but 
d3477 1
a3477 1
label is written @@samp{55:} then the number is @@samp{55}. 
d3485 1
a3485 1
@@samp{0:} gets the number @@samp{1}.  The 15th definition of @@samp{0:} gets the 
d3691 1
a3691 1
The attributes are described in @@cite{HP9000 Series 800 Assembly 
d3993 1
a3993 1
* Func::                        @@code{.func}  
d4221 1
a4221 1
and use the result as a string.  
d4303 1
a4303 1
Unless @@code{.cfi_startproc} is used along with parameter @@code{simple} 
d4305 1
a4305 1
 
d4332 1
a4332 1
@@code{.cfi_def_cfa} defines a rule for computing CFA as: @@i{take 
d4352 1
a4352 1
CFA. 
d4365 2
a4366 2
@@code{.cfi_restore} says that the rule for @@var{register} is now the 
same as it was at the beginning of the function, after all initial 
d4373 1
a4373 1
Current value of @@var{register} is the same like in the previous frame, 
d4376 4
a4379 4
@@section @@code{.cfi_remember_state}, 
First save all current rules for all registers by @@code{.cfi_remember_state}, 
then totally screw them up by subsequent @@code{.cfi_*} directives and when 
everything is hopelessly bad, use @@code{.cfi_restore_state} to restore 
d4383 1
a4383 1
Change return column @@var{register}, i.e. the return address is either 
d4424 1
a4424 1
an optional third argument.  This is the desired alignment of the symbol, 
d4428 1
a4428 1
boundary).  The alignment must be an absolute expression, and it must be a 
d4430 1
a4430 1
common symbol, it will use the alignment when placing the symbol.  If no 
d4597 1
a4597 1
The syntax for @@code{equ} on the HPPA is 
d4602 2
a4603 2
The syntax for @@code{equ} on the Z80 is 
@@samp{@@var{symbol} equ @@var{expression}}. 
d4605 1
a4605 1
but the symbol is not protected from later redefinition. 
d4617 1
a4617 1
Except for the contents of the error message, this is roughly equivalent to 
d4806 1
a4806 1
@@code{.internal} (@@pxref{Internal,,@@code{.internal}}) and 
d4812 1
a4812 1
Such symbols are always considered to be @@code{protected} as well. 
d4995 1
a4995 1
@@code{.hidden} (@@pxref{Hidden,,@@code{.hidden}}) and 
d5222 1
a5222 1
@@code{.debug_line} state machine to @@code{value}, which must be 
d5438 1
a5438 1
also applies to the identifiers used in @@code{.irp} (@@pxref{Irp}) 
d5580 2
a5581 2
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.previous} 
d5586 1
a5586 1
stack. 
d5663 1
a5663 1
this. 
d5700 2
a5701 2
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
d5871 1
a5871 1
@@code{.subsection} (@@pxref{SubSection}), @@code{.pushsection} 
d5901 2
d5967 7
d6130 1
a6130 1
@@var{sleb128} stands for ``signed little endian base 128.''  This is a 
d6224 1
a6224 1
"@@var{str}", @@code{.string32} "@@var{str}", @@code{.string64} "@@var{str}" 
d6242 1
a6242 1
The variants @@code{string16}, @@code{string32} and @@code{string64} differ from 
d6283 2
a6284 2
@@code{.section} (@@pxref{Section}), @@code{.pushsection} (@@pxref{PushSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
d6500 1
a6500 1
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
d6561 1
a6561 1
On COFF targets other than PE, weak symbols are a GNU extension.  This 
d6566 1
a6566 1
When a weak symbol is created that is not an alias, GAS creates an 
d7067 1
a7067 1
@@ifset MICROBLAZE 
d7362 2
a7363 2
maintainer, and we'll correct the situation.  Currently 
@@c (January 1994), 
@


1.220
log
@* doc/as.texinfo (Overview): Use @@itemx for grouped @@table
items.
* doc/c-alpha.texi (Alpha Options): Likewise.
* doc/c-arm.texi (ARM Directives): Likewise.
* doc/c-bfin.texi (Blackfin Options): Likewise.
* doc/c-d10v.texi (D10V-Opts): Likewise.
* doc/c-i386.texi (i386-Options): Likewise.
* doc/c-ia64.texi (IA-64 Options): Likewise.
* doc/c-m68k.texi (M68K-Opts): Likewise.
* doc/c-tic54x.texi (TIC54X-Directives): Likewise.
* doc/internals.texi (Symbols): Likewise.
@
text
@d235 1
d556 8
@


1.219
log
@etc/ChangeLog

        * standards.texi: Relicense under GFDL v1.3.
        * fdl.texi: Replace with v1.3 text.

gas/ChangeLog

        * doc/as.texinfo: Replace abbreviated 20th century year numbers
        with full versions.

gprof/ChangeLog

        * gprof.texi: Replace abbreviated 20th century year numbers with
        full versions.

ld/ChangeLog

        * fdl.texi: Replace with v1.3 text.
        * ld.texinfo: Replace abbreviated 20th century year numbers with
        full versions.
        * ldint.texinfo: Likewise.
        Relicense under GFDL v1.3.  Replace text of v1.1 FDL with an
        include of the fdl.texi file.
@
text
@d746 2
a747 1
@@item -mno-fdpic/-mnopic
@


1.218
log
@Implement generic SHF_EXCLUDE.

bfd/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* elf.c (_bfd_elf_make_section_from_shdr): Handle SHF_EXCLUDE
	(elf_fake_sections): Likewise.

	* elf32-i370.c (i370_elf_section_from_shdr): Don't handle
	SHF_EXCLUDE here.
	* elf32-ppc.c (ppc_elf_fake_sections): Likewise.

binutils/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* readelf.c (get_elf_section_flags): Treat SHF_EXCLUDE as a
	generic flag.

binutils/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* binutils-all/objcopy.exp: Run exclude-1a and exclude-1b for
	ELF targets.

	* binutils-all/exclude-1.s: New.
	* binutils-all/exclude-1a.d: Likewise.
	* binutils-all/exclude-1b.d: Likewise.

gas/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* obj-elf.c (obj_elf_change_section): Handle SHF_EXCLUDE.
	(obj_elf_parse_section_letters): Likewise.
	(obj_elf_section_word): Likewise.

	* config/tc-ppc.c (ppc_section_letter): Removed.
	(ppc_section_word): Likewise.
	* config/tc-ppc.h (ppc_section_letter): Likewise.
	(ppc_section_word): Likewise.
	(md_elf_section_letter): Likewise.
	(md_elf_section_word): Likewise.

	* doc/as.texinfo: Document `e' and `#exclude'.

gas/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* gas/elf/elf.exp: Run section8.

	* gas/elf/section8.d: New.
	* gas/elf/section8.s: Likewise.

include/elf/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* common.h (SHF_EXCLUDE): New.

	* i370.h (SHF_EXCLUDE): Removed.
	* or32.h (SHF_EXCLUDE): Likewise.
	* ppc.h (SHF_EXCLUDE): Likewise.
	* sparc.h (SHF_EXCLUDE): Likewise.

ld/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* ld-elf/exclude3.s: New.
	* ld-elf/exclude3a.d: Likewise.
	* ld-elf/exclude3b.d: Likewise.
	* ld-elf/exclude3c.d: Likewise.
@
text
@d106 2
a107 2
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002,
2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d156 2
a157 2
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002,
2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.217
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-tic6x.lo.
	(ALL_MACHINES_CFILES): Add cpu-tic6x.c.
	(BFD32_BACKENDS): Add elf32-tic6x.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-tic6x.c.
	* Makefile.in: Regenerate.
	* archures.c (bfd_arch_tic6x, bfd_tic6x_arch): New.
	(bfd_archures_list): Update.
	* config.bfd (tic6x-*-elf): New.
	* configure.in (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec):
	New.
	* configure: Regenerate.
	* cpu-tic6x.c, elf32-tic6x.c: New.
	* reloc.c (BFD_RELOC_C6000_PCR_S21, BFD_RELOC_C6000_PCR_S12,
	BFD_RELOC_C6000_PCR_S10, BFD_RELOC_C6000_PCR_S7,
	BFD_RELOC_C6000_ABS_S16, BFD_RELOC_C6000_ABS_L16,
	BFD_RELOC_C6000_ABS_H16, BFD_RELOC_C6000_SBR_U15_B,
	BFD_RELOC_C6000_SBR_U15_H, BFD_RELOC_C6000_SBR_U15_W,
	BFD_RELOC_C6000_SBR_S16, BFD_RELOC_C6000_SBR_L16_B,
	BFD_RELOC_C6000_SBR_L16_H, BFD_RELOC_C6000_SBR_L16_W,
	BFD_RELOC_C6000_SBR_H16_B, BFD_RELOC_C6000_SBR_H16_H,
	BFD_RELOC_C6000_SBR_H16_W, BFD_RELOC_C6000_SBR_GOT_U15_W,
	BFD_RELOC_C6000_SBR_GOT_L16_W, BFD_RELOC_C6000_SBR_GOT_H16_W,
	BFD_RELOC_C6000_DSBT_INDEX, BFD_RELOC_C6000_PREL31,
	BFD_RELOC_C6000_COPY, BFD_RELOC_C6000_ALIGN,
	BFD_RELOC_C6000_FPHEAD, BFD_RELOC_C6000_NOCMP): New.
	* targets.c (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec): New.
	(_bfd_target_vector): Update.
	* bfd-in2.h, libbfd.h: Regenerate.

binutils:
	* MAINTAINERS: Add self as TI C6X maintainer.
	* NEWS: Add news entry for TI C6X support.
	* readelf.c: Include elf/tic6x.h.
	(guess_is_rela): Handle EM_TI_C6000.
	(dump_relocations): Likewise.
	(get_tic6x_dynamic_type): New.
	(get_dynamic_type): Call it.
	(get_machine_flags): Handle EF_C6000_REL.
	(get_osabi_name): Handle machine-specific values only for relevant
	machines.  Handle C6X values.
	(get_tic6x_segment_type): New.
	(get_segment_type): Call it.
	(get_tic6x_section_type_name): New.
	(get_section_type_name): Call it.
	(is_32bit_abs_reloc, is_16bit_abs_reloc, is_none_reloc): Handle
	EM_TI_C6000.

gas:
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tic6x.c.
	(TARGET_CPU_HFILES): Add config/tc-tic6x.h.
	* Makefile.in: Regenerate.
	* NEWS: Add news entry for TI C6X support.
	* app.c (do_scrub_chars): Handle "||^" for TI C6X.  Handle
	TC_PREDICATE_START_CHAR and TC_PREDICATE_END_CHAR.  Keep spaces in
	operands if TC_KEEP_OPERAND_SPACES.
	* configure.tgt (tic6x-*-*): New.
	* config/tc-ia64.h (TC_PREDICATE_START_CHAR,
	TC_PREDICATE_END_CHAR): Define.
	* config/tc-tic6x.c, config/tc-tic6x.h: New.
	* doc/Makefile.am (CPU_DOCS): Add c-tic6x.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TIC6X): Define.
	* doc/as.texinfo: Add TI C6X documentation.  Include c-tic6x.texi.
	* doc/c-tic6x.texi: New.

gas/testsuite:
	* gas/tic6x: New directory and testcases.

include:
	* dis-asm.h (print_insn_tic6x): Declare.

include/elf:
	* common.h (ELFOSABI_C6000_ELFABI, ELFOSABI_C6000_LINUX): Define.
	* tic6x.h: New.

include/opcode:
	* tic6x-control-registers.h, tic6x-insn-formats.h,
	tic6x-opcode-table.h, tic6x.h: New.

ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_tic6x_be.o and
	eelf32_tic6x_le.o.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): New.
	* NEWS: Add news entry for TI C6X support.
	* configure.tgt (tic6x-*-*): New.
	* emulparams/elf32_tic6x_be.sh, emulparams/elf32_tic6x_le.sh: New.

ld/testsuite:
	* ld-elf/flags1.d, ld-elf/merge.d: XFAIL for tic6x-*-*.
	* ld-elf/sec-to-seg.exp: Set B_test_same_seg to 0 for tic6x-*-*.
	* ld-tic6x: New directory and testcases.

opcodes:
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tic6x-dis.c.
	* Makefile.in: Regenerate.
	* configure.in (bfd_tic6x_arch): New.
	* configure: Regenerate.
	* disassemble.c (ARCH_tic6x): Define if ARCH_all.
	(disassembler): Handle TI C6X.
	* tic6x-dis.c: New.
@
text
@d5877 2
d5976 2
@


1.216
log
@	* doc/as.texinfo: Add Blackfin options.
	* doc/c-bfin.texi: Document -mfdpic, -mno-fdpic and -mnopic.
	* config/tc-bfin.c (md_show_usage): Show usage for all
	Blackfin specific options.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
d107 1
a107 1
2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d157 1
a157 1
2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d475 7
d1255 32
d2357 3
d6907 3
d7101 4
@


1.215
log
@gas/ChangeLog:

	* NEWS: Mention new feature.
	* config/obj-coff.c (obj_coff_section): Accept digits and use
	to override default section alignment power if specified.
	* doc/as.texinfo (.section directive): Update documentation.

gas/testsuite/ChangeLog:

	* gas/pe/section-align-1.s: New test source file.
	* gas/pe/section-align-1.d: Likewise control script.
	* gas/pe/section-align-2.s: Likewise ...
	* gas/pe/section-align-2.d: ... and likewise.
	* gas/pe/pe.exp: Invoke new testcases.
@
text
@d42 3
d279 8
d729 15
@


1.214
log
@	* doc/as.texinfo (Set): Delete incorrect HPPA para.
@
text
@d5771 2
@


1.213
log
@        * doc/as.texinfo: Add mention of RX port and inclusion of RX
        documentation.
@
text
@a5929 5
@@ifset HPPA
The syntax for @@code{set} on the HPPA is
@@samp{@@var{symbol} .set @@var{expression}}.
@@end ifset

@


1.212
log
@	* doc/as.texinfo (Overview): Move -mfix7000/-mno-fix7000 to
	match the order elsewhere.  Add -mfix-vr4120/-mno-fix-vr4120 and
	-mfix-vr4130/-mno-fix-vr4130.
	* doc/c-mips.texi (MIPS Opts): Correct -no-mfix-vr4120 to
	-mno-fix-vr4120 and -no-mfix-vr4130 to -mno-fix-vr4130.
@
text
@d1194 4
d2289 3
d6827 3
d7008 4
@


1.211
log
@	* dw2gencfi.c: Include dwarf2dbg.h.
	(DWARF2_FORMAT): Define if not defined.
	(dot_cfi_sections): New function.
	(cfi_pseudo_table): Handle .cfi_sections.
	(CFI_EMIT_eh_frame, CFI_EMIT_debug_frame): Define.
	(cfi_sections): New variable.
	(output_cie, output_fde, select_cie_for_fde): Add eh_frame
	argument, add supporting for outputting .debug_frame
	section.
	(cfi_change_reg_numbers): New function or macro.
	(cfi_finish): Only emit .eh_frame if
	cfi_sections & CFI_EMIT_eh_frame.  Emit .debug_frame if
	cfi_sections & CFI_EMIT_debug_frame.
	* config/tc-ppc.h (md_reg_eh_frame_to_debug_frame): Define.
	* doc/as.texinfo (CFI directives): Document .cfi_sections.
@
text
@a381 1
   [@@b{-mfix7000}] [@@b{-mno-fix7000}]
d389 3
@


1.210
log
@bfd
        * Makefile.am (ALL_MACHINES): Add cpu-rx.lo.
        (ALL_MACHINES_CFILES): Add cpu-rx.c.
        (BFD32_BACKENDS): Add elf32-rx.lo.
        (BFD32_BACKENDS_CFILES): Add elf32-rx.c.
        * archures.c (bfd_architecture): Add bfd_arch_rx and bfd_mach_rx.
        Export bfd_rx_arch.
        (bfd_archures_list): Add bfd_rx_arch.
        * config.bfd: Add entry for rx-*-elf.
        * configure.in: Add entries for bfd_elf32_rx_le_vec and
        bfd_elf32_rx_be_vec.
        * reloc.c: Add RX relocations.
        * targets.c: Add RX target vectors.
        * Makefile.in: Regenerate.
        * bfd-in2.h: Regenerate.
        * configure: Regenerate.
        * libbfd.h: Regenerate.
        * cpu-rx.c: New file.
        * elf32-rx.c: New file.

binutils
        * readelf.c: Add support for RX target.
        * MAINTAINERS: Add DJ and NickC as maintainers for RX.

gas
        * Makefile.am: Add RX target.
        * configure.in: Likewise.
        * configure.tgt: Likewise.
        * read.c (do_repeat_with_expander): New function.
        * read.h: Provide a prototype for do_repeat_with_expander.
        * doc/Makefile.am: Add RX target documentation.
        * doc/all.texi: Likewise.
        * doc/as.texinfo: Likewise.
        * Makefile.in: Regenerate.
        * NEWS: Mention support for RX architecture.
        * configure: Regenerate.
        * doc/Makefile.in: Regenerate.
        * config/rx-defs.h: New file.
        * config/rx-parse.y: New file.
        * config/tc-rx.h: New file.
        * config/tc-rx.c: New file.
        * doc/c-rx.texi: New file.

gas/testsuite
        * gas/rx: New directory.
        * gas/rx/*: New set of test cases.
        * gas/elf/section2.e-rx: New expected output file.
        * gas/all/gas.exp: Add support for RX target.
        * gas/elf/elf.exp: Likewise.
        * gas/lns/lns.exp: Likewise.
        * gas/macros/macros.exp: Likewise.

include
        * dis-asm.h: Add prototype for print_insn_rx.

include/elf
        * rx.h: New file.

include/opcode
        * rx.h: New file.

ld
        * Makefile.am: Add rules to build RX emulation.
        * configure.tgt: Likewise.
        * NEWS: Mention support for RX architecture.
        * Makefile.in: Regenerate.
        * emulparams/elf32rx.sh: New file.
        * emultempl/rxelf.em: New file.

opcodes
        * Makefile.am: Add RX files.
        * configure.in: Add support for RX target.
        * disassemble.c: Likewise.
        * Makefile.in: Regenerate.
        * configure: Regenerate.
        * opc2c.c: New file.
        * rx-decode.c: New file.
        * rx-decode.opc: New file.
        * rx-dis.c: New file.
@
text
@d4200 9
@


1.209
log
@	gas/
	* doc/as.texinfo: Document that Blackfin GAS does not
	accept SYMBOL = VALUE.

	ld/testsuite/
	* ld-elf/sec64k.exp: Use ".set" instead of "=" for bfin-*-*.
@
text
@d424 7
@


1.208
log
@	* doc/all.texi: Replace BFIN with Blackfin.
	* doc/as.texinfo: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/asconfig.texi: Likewise.

	* doc/c-bfin.texi: Update -mcpu= option with bf512, bf514,
	bf516 and bf518.
@
text
@d3275 4
@


1.208.2.1
log
@	gas/
	* doc/as.texinfo: Document that Blackfin GAS does not
	accept SYMBOL = VALUE.

	ld/testsuite/
	* ld-elf/sec64k.exp: Use ".set" instead of "=" for bfin-*-*.
@
text
@a3274 4
@@ifset Blackfin
Blackfin does not support symbol assignment with @@samp{=}.
@@end ifset

@


1.208.2.2
log
@2009-10-06  Jakub Jelinek  <jakub@@redhat.com>

	* dw2gencfi.c: Include dwarf2dbg.h.
	(DWARF2_FORMAT): Define if not defined.
	(dot_cfi_sections): New function.
	(cfi_pseudo_table): Handle .cfi_sections.
	(CFI_EMIT_eh_frame, CFI_EMIT_debug_frame): Define.
	(cfi_sections): New variable.
	(output_cie, output_fde, select_cie_for_fde): Add eh_frame
	argument, add supporting for outputting .debug_frame
	section.
	(cfi_change_reg_numbers): New function or macro.
	(cfi_finish): Only emit .eh_frame if
	cfi_sections & CFI_EMIT_eh_frame.  Emit .debug_frame if
	cfi_sections & CFI_EMIT_debug_frame.
	* config/tc-ppc.h (md_reg_eh_frame_to_debug_frame): Define.
	* doc/as.texinfo (CFI directives): Document .cfi_sections.
@
text
@a4199 9
@@section @@code{.cfi_sections @@var{section_list}}
@@cindex @@code{cfi_sections} directive
@@code{.cfi_sections} may be used to specify whether CFI directives
should emit @@code{.eh_frame} section and/or @@code{.debug_frame} section.
If @@var{section_list} is @@code{.eh_frame}, @@code{.eh_frame} is emitted,
if @@var{section_list} is @@code{.debug_frame}, @@code{.debug_frame} is emitted.
To emit both use @@code{.eh_frame, .debug_frame}.  The default if this
directive is not used is @@code{.cfi_sections .eh_frame}.

@


1.208.2.3
log
@Backported (actually more-or-less simultaneously applied) from trunk:

gas/ChangeLog:

	* NEWS: Mention new feature.
	* config/obj-coff.c (obj_coff_section): Accept digits and use
	to override default section alignment power if specified.
	* doc/as.texinfo (.section directive): Update documentation.

gas/testsuite/ChangeLog:

	* gas/pe/section-align-1.s: New test source file.
	* gas/pe/section-align-1.d: Likewise control script.
	* gas/pe/section-align-2.s: Likewise ...
	* gas/pe/section-align-2.d: ... and likewise.
	* gas/pe/pe.exp: Invoke new testcases.
@
text
@a5754 2
@@item 0-9
single-digit power-of-two section alignment (GNU extension)
@


1.207
log
@        Add support for Xilinx MicroBlaze processor.

        * bfd/Makefile.am: Add cpu-microblaze.{lo,c}, elf32-microblaze.{lo,c}.
        * bfd/Makefile.in: Same.
        * bfd/archures.c: Add bfd_arch_microblaze.
        * bfd/bfd-in2.h: Regenerate.
        * bfd/config.bfd: Add microblaze target.
        * bfd/configure: Add bfd_elf32_microblaze_vec target.
        * bfd/configure.in: Same.
        * bfd/cpu-microblaze.c: New.
        * bfd/elf32-microblaze.c: New.
        * bfd/libbfd-in.h: Add prototype _bfd_dwarf2_fixup_section_debug_loc().
        * bfd/libbfd.h: Regenerate.
        * bfd/reloc.c: Add MICROBLAZE relocations.
        * bfd/section.c: Add struct relax_table and relax_count to section.
        * bfd/targets.c: Add bfd_elf32_microblaze_vec.
        * binutils/MAINTAINERS: Add self as maintainer.
        * binutils/readelf.c: Include elf/microblaze.h, add EM_MICROBLAZE &
        EM_MICROBLAZE_OLD to guess_is_rela(), dump_relocations(),
        get_machine_name().
        * config.sub: Add microblaze target.
        * configure: Same.
        * configure.ac: Same.
        * gas/Makefile.am: add microblaze to CPU_TYPES, config/tc-microblaze.c to
        TARGET_CPU_CFILES, config/tc-microblaze.h to TARGET_CPU_HFILES, add
        DEP_microblaze_elf target.
        * gas/Makefile.in: Same.
        * gas/config/tc-microblaze.c: Add MicroBlaze assembler.
        * gas/config/tc-microblaze.h: Add header for tc-microblaze.c.
        * gas/configure: Add microblaze target.
        * gas/configure.in: Same.
        * gas/configure.tgt: Same.
        * gas/doc/Makefile.am: Add c-microblaze.texi to CPU_DOCS.
        * gas/doc/Makefile.in: Same.
        * gas/doc/all.texi: Set MICROBLAZE.
        * gas/doc/as.texinfo: Add MicroBlaze doc links.
        * gas/doc/c-microblaze.texi: New MicroBlaze docs.
        * include/dis-asm.h: Decl print_insn_microblaze().
        * include/elf/common.h: Define EM_MICROBLAZE & EM_MICROBLAZE_OLD.
        * include/elf/microblaze.h: New reloc definitions.
        * ld/Makefile.am: Add eelf32mb_linux.o, eelf32microblaze.o to
        ALL_EMULATIONS, targets.
        * ld/Makefile.in: Same.
        * ld/configure.tgt: Add microblaze*-linux*, microblaze* targets.
        * ld/emulparams/elf32mb_linux.sh: New.
        * ld/emulparams/elf32microblaze.sh. New.
        * ld/scripttempl/elfmicroblaze.sc: New.
        * opcodes/Makefile.am: Add microblaze-opc.h to HFILES, microblaze-dis.c to
        CFILES, microblaze-dis.lo to ALL_MACHINES, targets.
        * opcodes/Makefile.in: Same.
        * opcodes/configure: Add bfd_microblaze_arch target.
        * opcodes/configure.in: Same.
        * opcodes/disassemble.c: Define ARCH_microblaze, return
        print_insn_microblaze().
        * opcodes/microblaze-dis.c: New MicroBlaze disassembler.
        * opcodes/microblaze-opc.h: New MicroBlaze opcode definitions.
        * opcodes/microblaze-opcm.h: New MicroBlaze opcode types.
@
text
@d6719 2
a6720 2
@@ifset BFIN
* BFIN-Dependent::		BFIN Dependent Features
d6854 1
a6854 1
@@ifset BFIN
@


1.206
log
@        * config/obj-elf.c (obj_elf_type): Add code to support a type of
        gnu_unique_object.
        * doc/as.texinfo: Document new feature of .type directive.
        * NEWS: Mention support for gnu_unique_object symbol type.

        * common.h (STB_GNU_UNIQUE): Define.

        * NEWS: Mention the linker's support for symbols with a binding of
        STB_GNU_UNIQUE.

        * gas/elf/type.s: Add unique global symbol definition.
        * gas/elf/type.e: Add expected readelf output for global unique
        symbol.

        * elfcpp.h (enum STB): Add STB_GNU_UNIQUE.

        * readelf.c (get_symbol_binding): For Linux targeted files return
        UNIQUE for symbols with the STB_GNU_UNIQUE binding.
        * doc/binutils.texi: Document the meaning of the 'u' symbol
        binding in the output of nm and objdump --syms.

        * elf-bfd.h (struct elf_link_hash_entry): Add unique_global field.
        * elf.c (swap_out_syms): Set binding to STB_GNU_UNIQUE for symbols
        with the BSF_GNU_UNIQUE flag bit set.
        * elfcode.h (elf_slurp_symbol_table): Set the BSF_GNU_UNIQUE flag
        for symbols with STB_GNU_UNIQUE binding.
        * elflink.c (_bfd_elf_merge_symbol): Set unique_global for symbols
        with the STB_GNU_UNIQUE binding.
        (elf_link_add_object_symbols): Set the BSF_GNU_UNIQUE flag for
        symbols with STB_GNU_UNIQUE binding.  Set STB_GNU_UNIQUE for
        symbols with the unique_global field set.
        (elf_link_output_extsym): Set unique_global field for symbols with
        the STB_GNU_UNIQUE binding.
        * syms.c (struct bfd_symbol): Define BSF_GNU_UNIQUE flag bit.
        (bfd_print_symbol_vandf): Print a 'u' character for BSF_GNU_UNIQUE
        symbols.
        (bfd_decode_symclass): Return a 'u' character for BSF_GNU_UNIQUE
        symbols.
        * bfd-in2.h: Regenerate.
@
text
@d366 4
d6773 3
d6944 4
@


1.205
log
@        PR 10168
        * config/tc-arm.c (do_t_pkhtb): Swap Rm and Rn when encoding as
        PKHBT.
        * gas/arm/thumb32.d: Fix expected disassembly of PKHTB insn.
@
text
@d6363 5
@


1.204
log
@	PR 10302
	* doc/as.texinfo (Section <ELF "M,S" flag>): Clarify tail merge.
@
text
@d308 1
a308 1
   [@@b{-march}=@@var{CPU}[+@@var{EXTENSION}@@dots{}]] [@@b{-mtune}=@@var{CPU}] 
@


1.203
log
@==> bfd/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* cofflink.c (process_embedded_commands):  Ignore "-aligncomm".

==> gas/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* config/obj-coff.c (obj_coff_common_parse):  New function.
	(obj_coff_comm):  Likewise.
	(coff_pseudo_table):  Override default ".comm" definition on PE.
	* doc/as.texinfo:  Document new feature.

==> gas/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* gas/pe/:  New directory for PE format-specific tests.
	* gas/pe/aligncomm-a.d:  New test pattern file.
	* gas/pe/aligncomm-a.s:  New test source file.
	* gas/pe/aligncomm-b.d:  New test pattern file.
	* gas/pe/aligncomm-b.s:  New test source file.
	* gas/pe/aligncomm-c.d:  New test pattern file.
	* gas/pe/aligncomm-c.s:  New test source file.
	* gas/pe/aligncomm-d.d:  New test pattern file.
	* gas/pe/aligncomm-d.s:  New test source file.
	* gas/pe/pe.exp:  New test control script.
	* lib/gas-defs.exp (is_pecoff_format):  New function.

==> ld/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* deffile.h (def_file_aligncomm):  Add new struct definition.
	(def_file):  Add new def_file_aligncomm member.
	* deffilep.y (%token):  Add new ALIGNCOMM token.
	(command):  Add production rule for ALIGNCOMM.
	(def_file_free):  Free any chained def_file_aligncomm structs.
	(diropts[]):  Add entry for '-aligncomm' .drectve command.
	(def_aligncomm):  New grammar function.
	* ld.texinfo:  Document new feature.
	* pe-dll.c (process_def_file):  Rename from this ...
	(process_def_file_and_drectve):  ... to this, updating all callers,
	and process any aligncomms chained to the def file after scanning
	all .drectve sections.
	(generate_edata):  Updated to match.
	(pe_dll_build_sections):  Likewise.

==> ld/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* ld-pe/aligncomm-1.c:  New test source file.
	* ld-pe/aligncomm-2.c:  Likewise.
	* ld-pe/aligncomm-3.c:  Likewise.
	* ld-pe/aligncomm-4.c:  Likewise.
	* ld-pe/aligncomm.d:  New test pattern file.

	* ld-pe/direct.exp:  Deleted, and content moved into ...
	* ld-pe/pe-run.exp:  ... New common file for all PE run tests.

	* ld-pe/vers-script.exp:  Deleted, and content merged into ...
	* ld-pe/pe-compile.exp:  ... New common file for PE tests needing
	a compiler, adding aligned common tests.

	* ld-pe/pe.exp:  Update header comment.
@
text
@d5822 4
a5825 1
absolute expression.
@


1.202
log
@2009-05-17  Kai Tietz  <kai.tietz@@onevision.com>

        * config/obj-coff.c (obj_coff_section): Add 'y' as
        specifier for SEC_COFF_NOREAD section flag.
        * doc/as.texinfo: Add documentation about .section flag 'y'.
@
text
@d4311 10
a4320 8
@@ifset ELF
When using ELF, the @@code{.comm} directive takes an optional third argument.
This is the desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of the
address should be zero).  The alignment must be an absolute expression, and it
must be a power of two.  If @@code{@@value{LD}} allocates uninitialized memory
for the common symbol, it will use the alignment when placing the symbol.  If
no alignment is specified, @@command{@@value{AS}} will set the alignment to the
d4322 6
a4327 1
maximum of 16.
@


1.201
log
@include/elf
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * common.h (STT_GNU_IFUNC): Define.

elfcpp
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * (enum STT): Add STT_GNU_IFUNC.

gas
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * config/obj-elf.c (obj_elf_type): Add support for a
        gnu_indirect_function type.
        * config/tc-i386.c (tc_i386_fix_adjustable): Do not adjust fixups
        against indirect function symbols.
        * doc/as.texinfo (.type): Document the support for the
        gnu_indirect_function symbol type.
        * NEWS: Mention the new feature.

gas/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * gas/elf/elf.exp: Extend type test to include an ifunc symbol.
        Provide an alternative test for targets which do not support ifunc
        symbols.
        (type.s): Add entry for an ifunc symbol.
        (type.e): Add ifunc entry to expected symbol dump.
        (section2.e-armelf): Add  entry for ifunc symbol.
        (type-noifunc.s): New file.
        (type-noifunc.e): New file.

bfd/
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs
        section pointer.
        (struct elf_obj_data): Add has_ifunc_symbols boolean.
        * elf.c (swap_out_syms): Convert BSF_GNU_INDIRECT_FUNCTION flags
        into a STT_GNU_IFUNC symbol type.
        (_bfd_elf_is_function_type): Accept STT_GNU_IFUNC as a function
        type.
        (_bfd_elf_set_osabi): Set the osasbi field to ELFOSABI_LINUX if
        the binary contains ifunc symbols.
        * elfcode.h (elf_slurp_symbol_table): Translate the STT_GNU_IFUNC
        symbol type into a BSF_GNU_INDIRECT_FUNCTION flag.
        * elf32-i386.c (is_indirect_function): New function.
        (elf_i386_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf_i386_relocate_section): Emit a reloc against an ifunc symbol
        if necessary.
        (elf_i386_add_symbol_hook): New function. Set the
        has_ifunc_symbols field of the elf_obj_data structure if an ifunc
        symbol is encountered.
        (elf_backend_post_process_headers): Define.
        (elf_backend_add_symbol_hook): Define.
        (elf_i386_post_process_headers): Rename to
        elf_i388_fbsd_post_process_headers.
        * elf64-x86_64.c (IS_X86_64_PCREL_TYPE): New macro.
        (is_indirect_function): New function.
        (elf64_x86_64_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf64_x86_64_relocate_section): Emit a reloc against an ifunc
        symbol if necessary.
        (elf_i386_add_symbol_hook): Set the has_ifunc_symbols field of the
        elf_obj_data structure if an ifunc symbol is encountered.
        (elf_backend_post_process_headers): Define.
        * elflink.c (_bfd_elf_adjust_dynamic_symbol): Always create a PLT
        if we have ifunc symbols to handle.
        (get_ifunc_reloc_section_name): New function.  Computes the name
        for an ifunc section.
        (_bfd_elf_make_ifunc_reloc_section): New function.  Creates a
        section to hold ifunc relocs.
        * syms.c (BSF_GNU_INDIRECT_FUNCTION): Define.
        (bfd_print_symbol_vandf): Handle ifunc symbols.
        (bfd_decode_symclass): Likewise.
        * bfd-in2.h: Regenerate.

binutils
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * readelf.c (dump_relocations): Display a relocation against an
        ifunc symbol as if it were a function invocation.
        (get_symbol_type): Handle STT_GNU_IFUNC.

ld
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * NEWS: Mention support for IFUNC symbols.

ld/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * ld-ifunc: New directory.
        * ld-ifunc/ifunc.exp: New file: Run the IFUNC tests.
        * ld-ifunc/prog.c: New file.
        * ld-ifunc/lib.c: New file.
@
text
@d5729 2
@


1.200
log
@	* NEWS: Add item about discriminator support.
	* dwarf2dbg.h (struct dwarf2_line_info): Add discriminator field.
	* dwarf2dbg.c (current): Add discriminator field.
	(dwarf2_where): Copy discriminator value.
	(dwarf2_consume_line_info): Set discriminator to 0.
	(dwarf2_directive_loc): Process discriminator sub-op.
	(out_leb128): New function.
	(process_entries): Output DW_LNE_set_discriminator.
	* doc/as.texinfo: Add discriminator operand to .loc directive.
	* testsuite/gas/lns/lns-common-1.d: Add test for discriminator.
	* testsuite/gas/lns/lns-common-1.s: Likewise.
@
text
@d6330 5
@


1.199
log
@Remove merge markers
@
text
@d5111 4
@


1.198
log
@2009-03-03  Tristan Gingold  <gingold@@adacore.com>
	    Eric Botcazou  <ebotcazou@@adacore.com>
	    Douglas B Rupp  <rupp@@gnat.com>

	* doc/as.texinfo (Overview): Mention -replace/-noreplace options
	for Alpha.
	* doc/c-alpha.texi (Alpha Options): Document -replace/-noreplace.
	* config/tc-alpha.h (TC_VALIDATE_FIX_SUB): Define to 1 (evax).
	(OBJ_SYMFIELD_TYPE): Remove.
	(tc_canonicalize_symbol_name): Define to evax_shorten_name.
	(TC_IMPLICIT_LCOMM_ALIGNMENT): For alignment to 3 on evax.
	(tc_frob_file_before_fix): Do not defined on evax.
	* config/tc-alpha.c: Always includes dwarf2dbg.h.
	Include vms.h if OBJ_EVAX.
	(struct alpha_fixup): Add xtrasym and procsym (evax only).
	(enum alpha_macro_arg): Remove trailing comma.
	(md_longopts): Add replace and noreplace arguments (evax only).
	(alpha_evax_proc_hash): New variable.
	(alpha_link_section): Make it global.
	(alpha_ctors_section, alpha_dtors_section): Removed.
	(alpha_ctors_symbol, alpha_dtors_symbol): Ditto.
	(alpha_lit8_section): Ifndef'ed on evax.
	(alpha_lit8_symbol): Ditto.
	(alpha_prologue_label): New variable.
	(alpha_linkage_symbol): New variable (evax only).
	(alpha_flag_replace): Ditto.
	(struct alpha_evax_procs): Add handler and handler_data field.
	(alpha_evax_proc): Now of type pointer.
	(alpha_linkage_fixup_root, alpha_linkage_fixup_tail): New variables.
	(struct alpha_reloc_tag): Add sym and psym fields (evax only).
	(get_alpha_reloc_tag): Initialize sym and psym fields (evax only).
	(alpha_adjust_relocs): Ifndef'ed on evax.
	(load_expression): Add opname argument.
	Implement LDA/BSR optimization for evax.
	(emit_lda): Adjust for new prototype of load_expression.
	(emit_ir_load): Ditto. Do not nothing for GP if ..lk symbols.
	(emit_loadstore): Likewise.
	(emit_ldXu): Likewise.
	(emit_stX): Likewise.
	(emit_jsrjmp): Likewise.  Implement LDA/BSR optimization for evax.
	(emit_ldgp): Avoid warning in evax case.
	(add_to_link_pool): Make it static.  Return symbolic expression rather
	than number expression for the offset.
	(s_alpha_text): Create .text symbol for evax if not already created.
	(s_alpha_comm): Do not create specific section for common symbol.
	Fill common area with zeros for evax.
	(s_alpha_prologue): Create alpha_prologue_label.
	(s_alpha_section_name): New function (evax).
	(s_alpha_section_word): Likewise.
	(section_name): New static variabke moved out from ...
	(s_alpha_section): ... here.  Create new sections on demand.
	(s_alpha_literals): New function (evax).
	(s_alpha_ent): Create alpha_evax_proc instance and insert it in the
	alpha_evax_proc_hash table.
	(s_alpha_handler): New function (evax).
	(s_alpha_frame): Adjust for new type of alpha_evax_proc.
	(s_alpha_prologue): New function (evax).
	(s_alpha_pdesc): Adjust for new type of alpha_evax_proc and new
	handling of procedures with hash table.
	Add support for condition handlers.
	(s_alpha_linkage): Create linkage_fixup instance and chain it.
	(s_alpha_fp_save): Adjust for new type of alpha_evax_proc.
	(s_alpha_mask): Likewise.
	(s_alpha_fmask): Likewise.
	(s_alpha_end): Clear alpha_evax_proc.
	(s_alpha_align): Increase max_alignment to 16.
	(alpha_print_token): Call print_expr_1 instead of print_expr.
	(md_pseudo_table): Add "section", "literals", "handler" and
	"handler_data" (evax).  Do not ignore "prologue" on evax.
	Fix indentation.
	(md_begin): Create hash table for alpha_evax_proc_hash.
	(md_parse_option): Handle OPTION_REPLACE and OPTION_NOREPLACE.
	(md_show_usage): Mention -replace/-noreplace for evax.
	(md_apply_fix): Handle evax relocs (_NOP, _LDA, _BSR and _BOH).
	(alpha_force_relocation): Likewise.
	(alpha_fix_adjustable): Likewise. Add BFD_RELOC_16 case.
	(tc_gen_reloc): Likewise.  Add BFD_RELOC_ALPHA_LINKAGE for evax.
	(emit_insn): New cases for evax specific relocs.
	(assemble_insn): Fix indentation.
	Take care of -MDISP in operand table.
	* config/obj-evax.h (struct alpha_linkage_fixups): New struct.
	(OBJ_SYMFIELD_TYPE): New macro.
	(obj_symbol_new_hook): Define.
	(obj_frob_symbol, obj_frob_file_before_adjust): Ditto.
	(obj_frob_file_before_fix): Ditto.
	(PDSC_S_M_HANDLER_VALID): New macro.
	(PDSC_S_M_HANDLER_DATA_VALID): Ditto.
	(TC_IMPLICIT_LCOMM_ALIGNMENT): Remove.
	Add prototypes for functions declared in obj-evax.c
	* config/obj-evax.c: Include subsegs.h, struc-symbol.h, safe-ctype.h.
	(s_evax_weak): Convert to ansi-C.
	(evax_symbol_new_hook): New function.
	(evax_frob_symbol): Ditto.
	(evax_frob_file_before_adjust): Ditto.
	(evax_frob_file_before_fix): Ditto.
	(evax_shorten_name): Ditto.
	(crc32): Ditto.
	(encode_32): Ditto.
	(encode_16): Ditto.
	(decode_16): Ditto.
	(shorten_identifier): Ditto.
	(is_truncated_identifier): Ditto.
	* dwarf2dbg.c (out_debug_info): Do not append trailing slash on	VMS.
	* as.c (close_output_file): Remove #ifndef OBJ_VMS.
	(main): Ditto.
@
text
@d2245 3
a2247 1
<<<<<<< as.texinfo
a2250 5
=======
@@ifset S390
@@samp{#} for IBM S/390;
@@end ifset
>>>>>>> 1.196
d6765 3
a6767 1
<<<<<<< as.texinfo
a6770 5
=======
@@ifset S390
* S/390-Dependent::             IBM S/390 Dependent Features
@@end ifset
>>>>>>> 1.196
d6939 4
a6942 1
<<<<<<< as.texinfo
a6946 6
=======
@@ifset S390
@@include c-s390.texi
@@end ifset

>>>>>>> 1.196
@


1.197
log
@Add support for Score7 architecture.
@
text
@d251 1
@


1.196
log
@	* doc/all.texi: Set S390.
	* doc/as.texinfo: Add S390 support and pull in c-s390.texi.
	* doc/Makefile.am (CPU_DOCS): Add c-s390.texi.
	* doc/Makefile.in: Likewise.
	* doc/c-s390.texi: New.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
d104 1
a104 1
2006, 2007, 2008 Free Software Foundation, Inc.
d154 1
a154 1
2006, 2007, 2008 Free Software Foundation, Inc.
d426 8
d2244 5
d2252 1
d6767 5
d6775 1
d6944 6
d6954 1
@


1.195
log
@Add LM32 port.
@
text
@d419 7
d1172 24
d2236 3
d6753 3
d6924 4
@


1.194
log
@Remove STT_IFUNC support.
@
text
@d6682 3
d6839 4
d7222 2
@


1.193
log
@opcodes/
	* ppc-dis.c (powerpc_init_dialect): Do not set PPC_OPCODE_BOOKE
	for -Mbooke.
	(print_ppc_disassembler_options): Update usage.
	* ppc-opc.c (DE, DES, DEO, DE_MASK): Remove.
	(BOOKE64): Remove.
	(PPCCHLK64): Likewise.
	(powerpc_opcodes): Remove all BOOKE64 instructions.

gas/
	* config/tc-ppc.c (parse_cpu): Remove booke64 support. Update
	usage strings.
	(ppc_setup_opcodes): Likewise, remove booke64 support.
	* doc/c-ppc.texi (PowerPC-Opts): Remove -mbooke32 and -mbooke64.
	* doc/as.texinfo (Overview): Likewise.

binutils/
	* doc/binutils.texi (objdump): Update booke documentation.
	* NEWS: Document user-visible changes to command line options.
@
text
@a6295 8
@@item STT_IFUNC
@@itemx indirect_function
Mark the symbol as an indirect function.  This has the same semantics as
STT_FUNC except when the symbol is referenced by a relocation.  In this case
the symbol's value is not used in the relocation but instead the symbol is
invoked as a function taking no arguments and the return value is used in the
relocation.  This also means that processing of the relocation must be delayed
until run-time.  (This is only supported on some targets).
@


1.192
log
@* doc/as.texinfo (Type): Reword description of STT_IFUNC type.
@
text
@d412 1
a412 2
    @@b{-m403}|@@b{-m405}|@@b{-mppc64}|@@b{-m620}|@@b{-mppc64bridge}|@@b{-mbooke}|
    @@b{-mbooke32}|@@b{-mbooke64}]
@


1.191
log
@include/elf/
            * common.h (STT_IFUNC): Define.
elfcpp/
            * elfcpp.h (enum STT): Add STT_IFUNC.
bfd/
            * syms.c (struct bfd_symbol): Add new flag BSF_INDIRECT_FUNCTION.
            Remove redundant flag BFD_FORT_COMM_DEFAULT_VALUE.  Renumber flags
            to remove gaps.
            (bfd_print_symbol_vandf): Return 'i' for BSF_INDIRECT_FUNCTION.
            (bfd_decode_symclass): Likewise.
            * elf.c (swap_out_syms): Translate BSF_INDIRECT_FUNCTION into
            STT_IFUNC.
            (elf_find_function): Treat STT_IFUNC in the same way as STT_FUNC.
            (_bfd_elf_is_function_type): Likewise.
            * elf32-arm.c (arm_elf_find_function): Likewise.
            (elf32_arm_adjust_dynamic_symbol): Likewise.
            (elf32_arm_swap_symbol_in): Likewise.
            (elf32_arm_additional_program_headers): Likewise.
            * elf32-i386.c (is_indirect_symbol): New function.
            (elf_i386_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf_i386_relocate_section): Likewise.
            * elf64-x86-64.c (is_indirect_symbol): New function.
            (elf64_x86_64_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf64_x86_64_relocate_section): Likewise.
            * elfcode.h (elf_slurp_symbol_table): Translate STT_IFUNC into
            BSF_INDIRECT_FUNCTION.
            * elflink.c (_bfd_elf_adjust_dynamic_reloc_section): Add support
            for STT_IFUNC symbols.
            (get_ifunc_reloc_section_name): New function.
            (_bfd_elf_make_ifunc_reloc_section): New function.
            * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs field.
            * bfd-in2.h: Regenerate.
gas/
            * config/obj-elf.c (obj_elf_type): Add support for STT_IFUNC type.
            * doc/as.texinfo: Document new feature.
            * NEWS: Mention new feature.
gas/testsuite/
            * gas/elf/type.s: Add test of STT_IFUNC symbol type.
            * gas/elf/type.e: Update expected disassembly.
            * gas/elf/elf.exp: Update grep of symbol types.
ld/
            * NEWS: Mention new feature.
            * pe-dll.c (process_def_file): Replace use of redundant
            BFD_FORT_COMM_DEFAULT_VALUE with 0.
            * scripttempl/elf.sc: Add .rel.ifunc.dyn and .rela.ifunc.dyn
            sections.
ld/testsuite/
            * ld-mips-elf/reloc-1-n32.d: Updated expected output for reloc
            descriptions.
            * ld-mips-elf/reloc-1-n64.d: Likewise.
            * ld-i386/ifunc.d: New test.
            * ld-i386/ifunc.s: Source file for the new test.
            * ld-i386/i386.exp: Run the new test.
@
text
@d6299 6
a6304 2
Mark the symbol as an indirect function when evaluated during reloc
processing.  (This is only supported on Linux targeted assemblers).
@


1.190
log
@Change documentation license to FDL v1.3
@
text
@d6270 1
a6270 1
  .type <name>,%>type>
d6292 9
@


1.189
log
@	* doc/as.texinfo (Pseudo Ops): Swap order of Comm and CFI menu entries.
	(Altmacro, Comm, Loc, Loc_mark_labels, List, MRI, PopSection, Sleb128):
	Moved into alphabetical order.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006, 2007
d104 1
a104 1
2006, 2007 Free Software Foundation, Inc.
d107 1
a107 1
under the terms of the GNU Free Documentation License, Version 1.1
d154 1
a154 1
2006, 2007 Free Software Foundation, Inc.
d157 1
a157 1
      under the terms of the GNU Free Documentation License, Version 1.1
d7216 2
@


1.188
log
@	* doc/as.texinfo (Dot): Expand no-space-dir conditional to include
	a complete sentence.
	(Pseudo Ops): Put conditionals around Skip and Space menu entries.
	(Line): Remove conditional declaration of Ln node and section here.
	Put aout-bout description inside the no-line-dir conditional.
	(Skip, Space): Use a separate conditional for each node.
@
text
@d3811 1
a3812 3

* CFI directives::		@@code{.cfi_startproc [simple]}, @@code{.cfi_endproc}, etc.

d4041 36
a4138 31
@@node Comm
@@section @@code{.comm @@var{symbol} , @@var{length} }

@@cindex @@code{comm} directive
@@cindex symbol, common
@@code{.comm} declares a common symbol named @@var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If @@code{@@value{LD}} does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @@var{length} bytes of uninitialized memory.  @@var{length} must be an
absolute expression.  If @@code{@@value{LD}} sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

@@ifset ELF
When using ELF, the @@code{.comm} directive takes an optional third argument.
This is the desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of the
address should be zero).  The alignment must be an absolute expression, and it
must be a power of two.  If @@code{@@value{LD}} allocates uninitialized memory
for the common symbol, it will use the alignment when placing the symbol.  If
no alignment is specified, @@command{@@value{AS}} will set the alignment to the
largest power of two less than or equal to the size of the symbol, up to a
maximum of 16.
@@end ifset

@@ifset HPPA
The syntax for @@code{.comm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .comm, @@var{length}}; @@var{symbol} is optional.
@@end ifset

d4252 2
a4253 9
@@node Loc
@@section @@code{.loc @@var{fileno} @@var{lineno} [@@var{column}] [@@var{options}]}
@@cindex @@code{loc} directive
When emitting DWARF2 line number information,
the @@code{.loc} directive will add a row to the @@code{.debug_line} line
number matrix corresponding to the immediately following assembly
instruction.  The @@var{fileno}, @@var{lineno}, and optional @@var{column}
arguments will be applied to the @@code{.debug_line} state machine before
the row is added.
d4255 10
a4264 1
The @@var{options} are a sequence of the following tokens in any order:
d4266 11
a4276 4
@@table @@code
@@item basic_block
This option will set the @@code{basic_block} register in the
@@code{.debug_line} state machine to @@code{true}.
d4278 4
a4281 28
@@item prologue_end
This option will set the @@code{prologue_end} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item epilogue_begin
This option will set the @@code{epilogue_begin} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item is_stmt @@var{value}
This option will set the @@code{is_stmt} register in the
@@code{.debug_line} state machine to @@code{value}, which must be 
either 0 or 1.

@@item isa @@var{value}
This directive will set the @@code{isa} register in the @@code{.debug_line}
state machine to @@var{value}, which must be an unsigned integer.

@@end table

@@node Loc_mark_labels
@@section @@code{.loc_mark_labels @@var{enable}}
@@cindex @@code{loc_mark_labels} directive
When emitting DWARF2 line number information,
the @@code{.loc_mark_labels} directive makes the assembler emit an entry
to the @@code{.debug_line} line number matrix with the @@code{basic_block}
register in the state machine set whenever a code label is seen.
The @@var{enable} argument should be either 1 or 0, to enable or disable
this function respectively.
d4996 15
d5032 35
a5066 2
@@node MRI
@@section @@code{.mri @@var{val}}
d5068 9
a5076 6
@@cindex @@code{mri} directive
@@cindex MRI mode, temporarily
If @@var{val} is non-zero, this tells @@command{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@command{@@value{AS}} to exit MRI mode.  This change
affects code assembled until the next @@code{.mri} directive, or until the end
of the file.  @@xref{M, MRI mode, MRI mode}.
a5093 15
@@node List
@@section @@code{.list}

@@cindex @@code{list} directive
@@cindex listing control, turning on
Control (in conjunction with the @@code{.nolist} directive) whether or
not assembly listings are generated.  These two directives maintain an
internal counter (which is zero initially).   @@code{.list} increments the
counter, and @@code{.nolist} decrements it.  Assembly listings are
generated whenever the counter is greater than zero.

By default, listings are disabled.  When you enable them (with the
@@samp{-a} command line option; @@pxref{Invoking,,Command-Line Options}),
the initial value of the listing counter is one.

d5295 2
a5296 3
@@node Altmacro
@@section @@code{.altmacro}
Enable alternate macro mode, enabling:
d5298 6
a5303 31
@@ftable @@code
@@item LOCAL @@var{name} [ , @@dots{} ]
One additional directive, @@code{LOCAL}, is available.  It is used to
generate a string replacement for each of the @@var{name} arguments, and
replace any instances of @@var{name} in each macro expansion.  The
replacement string is unique in the assembly, and different for each
separate macro expansion.  @@code{LOCAL} allows you to write macros that
define symbols, without fear of conflict between separate macro expansions.

@@item String delimiters
You can write strings delimited in these other ways besides
@@code{"@@var{string}"}:

@@table @@code
@@item '@@var{string}'
You can delimit strings with single-quote characters.

@@item <@@var{string}>
You can delimit strings with matching angle brackets.
@@end table

@@item single-character string escape
To include any single character literally in a string (even if the
character would otherwise have some special meaning), you can prefix the
character with @@samp{!} (an exclamation mark).  For example, you can
write @@samp{<4.3 !> 5.4!!>} to get the literal text @@samp{4.3 > 5.4!}.

@@item Expression results as strings
You can write @@samp{%@@var{expr}} to evaluate the expression @@var{expr}
and use the result as a string.  
@@end ftable
d5407 16
a5474 16
@@ifset ELF
@@node PopSection
@@section @@code{.popsection}

@@cindex @@code{popsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive replaces the current section (and subsection) with the top
section (and subsection) on the section stack.  This section is popped off the
stack. 
@@end ifset

a5931 8
@@node Sleb128
@@section @@code{.sleb128 @@var{expressions}}

@@cindex @@code{sleb128} directive
@@var{sleb128} stands for ``signed little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Uleb128, ,@@code{.uleb128}}.

d5944 8
@


1.187
log
@	* doc/as.texinfo (Pseudo Ops): Remove no-file-dir conditional around
	menu entry for File; remove version-specific .file operands from menu
	description.  Replace "LNS directives" menu entry with new entries
	for "Loc" and "Loc_mark_labels".
	(LNS directives): Split into separate nodes for each directive.
	(Loc): New node for .loc directive.  Mention that this directive
	is for DWARF2 and add a missing article.
	(Loc_mark_labels): Likewise for .loc_mark_labels.
	(File): Change this node to describe both the default version and
	the DWARF2 version of .file.  Move the no-file-dir conditional to
	include only the default version.
@
text
@d3376 1
a3376 1
directive.  Thus, the expression @@samp{.=.+4} is the same as saying
d3378 1
d3927 3
a3930 1
* Skip::                        @@code{.skip @@var{size} , @@var{fill}}
d3932 1
d3934 1
a4949 7
@@end ifclear
@@ifset no-line-dir
@@node Ln
@@section @@code{.ln @@var{line-number}}

@@cindex @@code{ln} directive
@@end ifset
a4957 1

a4959 1
@@ifclear no-line-dir
d5952 1
d5954 1
@


1.186
log
@        PR 6944
        * doc/as.texinfo (Dollar Local Labels): Correct description of
        dollar local labels to show that the colon suffix is still
        needed.
@
text
@d3844 1
a3844 4
@@ifclear no-file-dir
* File::                        @@code{.file @@var{string}}
@@end ifclear

d3875 2
a3876 2

* LNS directives::              @@code{.file}, @@code{.loc}, etc.
d4244 1
a4244 13
@@node LNS directives
@@section @@code{.file @@var{fileno} @@var{filename}}
@@cindex @@code{file} directive
When emitting dwarf2 line number information @@code{.file} assigns filenames
to the @@code{.debug_line} file name table.  The @@var{fileno} operand should
be a unique positive integer to use as the index of the entry in the table.
The @@var{filename} operand is a C string literal.

The detail of filename indices is exposed to the user because the filename
table is shared with the @@code{.debug_info} section of the dwarf2 debugging
information, and thus the user must know the exact indices that table
entries will have.

d4247 2
a4248 1
The @@code{.loc} directive will add row to the @@code{.debug_line} line
d4280 1
d4283 2
a4284 1
The @@code{.loc_mark_labels} directive makes the assembler emit an entry
d4520 4
d4525 5
a4529 2
@@node File
@@section @@code{.file @@var{string}}
a4530 1
@@cindex @@code{file} directive
d4533 8
a4540 2
@@code{.file} tells @@command{@@value{AS}} that we are about to start a new logical
file.  @@var{string} is the new file name.  In general, the filename is
d4545 2
d4549 16
@


1.185
log
@	* doc/as.texinfo (Local): New description of ELF .local directive.
@
text
@d3357 2
a3358 2
except that instead of being terminated by a colon, they are terminated by a
dollar sign, e.g., @@samp{@@b{55$}}.
@


1.184
log
@include/
	* elf/dwarf2.h (DW_OP_GNU_encoded_addr): New.
binutils/
	* dwarf.c (size_of_encoded_value, get_encoded_value): Move up.
	(decode_location_expression): Add section parameter.  Handle
	DW_OP_GNU_encoded_addr.
	(read_and_display_attr_value): Update decode_location_expression call.
	(display_debug_loc, display_debug_frames): Likewise.
gas/
        * dw2gencfi.c (DWARF2_ADDR_SIZE): Provide default.
        (struct cfi_insn_data): Add ea member.
        (CFI_val_encoded_addr, dot_cfi_val_encoded_addr): New.
        (output_cfi_insn): Handle CFI_val_encoded_addr.
        (select_cie_for_fde): Don't match CFI_val_encoded_addr.
        * doc/as.texinfo (.cfi_val_encoded_addr): Document.
@
text
@d3880 3
d5025 16
@


1.183
log
@	* doc/as.texinfo (Align): Document the PowerPC behaviour.
@
text
@d4233 11
@


1.183.2.1
log
@include/
        * elf/dwarf2.h (DW_OP_GNU_encoded_addr): New.
binutils/
        * dwarf.c (size_of_encoded_value, get_encoded_value): Move up.
        (decode_location_expression): Add section parameter.  Handle
        DW_OP_GNU_encoded_addr.
        (read_and_display_attr_value): Update decode_location_expression call.
        (display_debug_loc, display_debug_frames): Likewise.
gas/
        * dw2gencfi.c (DWARF2_ADDR_SIZE): Provide default.
        (struct cfi_insn_data): Add ea member.
        (CFI_val_encoded_addr, dot_cfi_val_encoded_addr): New.
        (output_cfi_insn): Handle CFI_val_encoded_addr.
        (select_cie_for_fde): Don't match CFI_val_encoded_addr.
        * doc/as.texinfo (.cfi_val_encoded_addr): Document.
@
text
@a4232 11
@@section @@code{.cfi_val_encoded_addr @@var{register}, @@var{encoding}, @@var{label}}
The current value of @@var{register} is @@var{label}.  The value of @@var{label}
will be encoded in the output file according to @@var{encoding}; see the
description of @@code{.cfi_personality} for details on this encoding.

The usefulness of equating a register to a fixed label is probably
limited to the return address register.  Here, it can be useful to
mark a code segment that has only one return address which is reached
by a direct branch and no copy of the return address exists in memory
or another register.

@


1.183.2.2
log
@backport 2008-12-04  Ben Elliston  <bje@@au.ibm.com>
@
text
@d412 2
a413 1
    @@b{-m403}|@@b{-m405}|@@b{-mppc64}|@@b{-m620}|@@b{-mppc64bridge}|@@b{-mbooke}]
@


1.182
log
@* NEWS: Mention these changes.

* config/tc-h8300.h (H_TICK_HEX): Define.
* config/tc-h8300.c (OPTION_H_TICK_HEX): New.
(md_longopts): Add "-h-tick-hex".
(md_parse_option): Support it.
* doc/c-h8300.texi (H8/300 Options): Document it.
* doc/as.texinfo (Overview): Likewise.

* config/tc-sh.h (H_TICK_HEX): Define.
* config/tc-sh.c (OPTION_H_TICK_HEX): New.
(md_longopts): Add "-h-tick-hex".
(md_parse_option): Support it.
* doc/c-sh.texi (SH Options): Document it.
* doc/c-sh64.texi (SH64 Options): Document it.
* doc/as.texinfo (Overview): Likewise.
@
text
@d4025 1
a4025 1
For other systems, including the i386 using a.out format, and the arm and
@


1.181
log
@gas/
	* config/tc-ppc.c (parse_cpu): Rename altivec_or_spe to retain_flags.
	Handle -mvsx and -mpower7.
	(md_show_usage): Document -mpower7 and -mvsx.
	* doc/as.texinfo (Target PowerPC): Document -mvsx.
	* doc/c-ppc.texi (PowerPC-Opts): Document -mvsx and -mpower7.

gas/testsuite/
	* gas/ppc/power7.d: New.
	* gas/ppc/power7.s: Likewise.
	* gas/ppc/ppc.exp: Run power7 test.

include/opcode/
	* ppc.h (PPC_OPCODE_VSX, PPC_OPERAND_VSR): New.

opcodes/
	* ppc-dis.c (powerpc_init_dialect): Handle power7 and vsx options.
	(print_insn_powerpc): Prepend 'vs' when printing VSX registers.
	(print_ppc_disassembler_options): Document -Mpower7 and -Mvsx.
	* ppc-opc.c (insert_xt6): New static function.
	(extract_xt6): Likewise.
	(insert_xa6): Likewise.
	(extract_xa6: Likewise.
	(insert_xb6): Likewise.
	(extract_xb6): Likewise.
	(insert_xb6s): Likewise.
	(extract_xb6s): Likewise.
	(XS6, XT6, XA6, XB6, XB6S, DM, XX3, XX3DM, XX1_MASK, XX3_MASK,
	XX3DM_MASK, PPCVSX): New.
	(powerpc_opcodes): Add opcodes "lxvd2x", "lxvd2ux", "stxvd2x",
	"stxvd2ux", "xxmrghd", "xxmrgld", "xxpermdi", "xvmovdp", "xvcpsgndp".
@
text
@d296 3
a298 1
@@c Renesas family chips have no machine-dependent assembler options
@


1.180
log
@Support PowerPC single-precision float.
@
text
@d412 1
a412 1
   [@@b{-mcom}|@@b{-many}|@@b{-maltivec}] [@@b{-memb}]
@


1.179
log
@* config/tc-m32c.h (H_TICK_HEX): Define.
* config/tc-m32c.c (OPTION_H_TICK_HEX): Define.
(md_longopts): Add support for it.
(md_parse_option): Likewise.
* doc/as.texinfo (Overview): Add new m32c options.
* doc/c-m32c.texi (M32C-Modifiers): Likewise

* as.h: (enable_h_tick_hex): New.
* app.c (enable_h_tick_hex): New.
(LEX_IS_H): New.
(do_scrub_begin): Mark 'H' and 'h' as special if enable_h_tick_hex.
(do_scrub_chars): If enable_h_tick_hex and 'h', check for H'00
style hex constants and convert the input stream to 0x00 style.
(do_scrub_chars): If a 'X style character constant is found after
a symbol character (like you're or X'00), warn the user.
@
text
@d6516 1
a6516 1
1 for files using the hardware floating-point ABI.
d6519 2
@


1.178
log
@        * listing.c: Add -ag listing flag to show general information in
        listings such as gas version, passed options, and time stamp.
        (listing_general_info): New function.
        (print_options): New function.
        (print_single_option): New function.
        (print_timestamp): New function.
        (MAX_DATELEN): Define.
        (listing_print): Add call to listing_general_info.
        * listing.h (LISTING_GENERAL): Define.
        (listing_print): Add new parameter.
        * as.c (show_usage): Print new switch.
        (parse_args): Parse new switch.
        (main): Pass command line on to listing_print.
        * NEWS: Mention this new feature.
        * doc/as.texinfo: Document the new sub-option.

        * gas/all/gas.exp: Check the performance of the -ag command line
        switch.
@
text
@d334 1
a334 1
   [@@b{-m32c}|@@b{-m16c}]
d768 6
@


1.177
log
@gas/

2008-01-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (XXX_PREFIX): Moved from tc-i386.h.
	(XXX_MNEM_SUFFIX): Likewise.
	(END_OF_INSN): Likewise.
	(templates): Likewise.
	(modrm_byte): Likewise.
	(rex_byte): Likewise.
	(DREX_XXX): Likewise.
	(drex_byte): Likewise.
	(sib_byte): Likewise.
	(processor_type): Likewise.
	(arch_entry): Likewise.
	(cpu_sub_arch_name): Remove const.
	(cpu_arch): Add .vmx and .smx.
	(set_cpu_arch): Append cpu_sub_arch_name.
	(md_parse_option): Support -march=CPU[,+EXTENSION...].
	(md_show_usage): Updated.

	* config/tc-i386.h (XXX_PREFIX): Moved to tc-i386.c.
	(XXX_MNEM_SUFFIX): Likewise.
	(END_OF_INSN): Likewise.
	(templates): Likewise.
	(modrm_byte): Likewise.
	(rex_byte): Likewise.
	(DREX_XXX): Likewise.
	(drex_byte): Likewise.
	(sib_byte): Likewise.
	(processor_type): Likewise.
	(arch_entry): Likewise.

	* doc/as.texinfo: Update i386 -march option.

	* doc/c-i386.texi: Update -march= for ISA.

gas/testsuite/

2008-01-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/arch-10-1.l: New.
	* gas/i386/arch-10-1.s: Likewise.
	* gas/i386/arch-10-2.l: Likewise.
	* gas/i386/arch-10-2.s: Likewise.
	* gas/i386/arch-10-3.l: Likewise.
	* gas/i386/arch-10-3.s: Likewise.
	* gas/i386/arch-10-4.l: Likewise.
	* gas/i386/arch-10-4.s: Likewise.
	* gas/i386/arch-10.d: Likewise.
	* gas/i386/arch-10.s: Likewise.

	* gas/i386/i386.exp: Run arch-10, arch-10-1, arch-10-2,
	arch-10-3 and arch-10-4.

	* gas/i386/nops-2.s: Use movsbl instead of cmove.
	* gas/i386/nops-2-i386.d: Updated.
	* gas/i386/nops-2-merom.d: Likewise.
	* gas/i386/nops-2.d: Likewise.
	* gas/i386/x86-64-nops-2.d: Likewise.

opcodes/

2008-01-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-gen.c (cpu_flag_init): Add CPU_VMX_FLAGS and
	CPU_SMX_FLAGS.
	* i386-init.h: Regenerated.
@
text
@d231 1
a231 1
@@value{AS} [@@b{-a}[@@b{cdhlns}][=@@var{file}]] [@@b{--alternate}] [@@b{-D}]
d465 1
a465 1
@@item -a[cdhlmns]
d475 3
d1582 1
a1582 1
* a::             -a[cdhlns] enable listings
d1608 1
a1608 1
@@section Enable Listings: @@option{-a[cdhlns]}
d1613 1
d1631 3
@


1.176
log
@	[ld/testsuite/ChangeLog]
	* ld-mips-elf/attr-gnu-4-14.d, ld-mips-elf/attr-gnu-4-41.d:
	Adjust warning message for -mfp64 flag.
	* ld-mips-elf/attr-gnu-4-5.s, ld-mips-elf/attr-gnu-4-04.d,
	ld-mips-elf/attr-gnu-4-51.d, ld-mips-elf/attr-gnu-4-05.d,
	ld-mips-elf/attr-gnu-4-15.d, ld-mips-elf/attr-gnu-4-24.d,
	ld-mips-elf/attr-gnu-4-25.d, ld-mips-elf/attr-gnu-4-34.d,
	ld-mips-elf/attr-gnu-4-35.d, ld-mips-elf/attr-gnu-4-42.d,
	ld-mips-elf/attr-gnu-4-43.d, ld-mips-elf/attr-gnu-4-44.d,
	ld-mips-elf/attr-gnu-4-45.d, ld-mips-elf/attr-gnu-4-40.d,
	ld-mips-elf/attr-gnu-4-14.d: New testcases files.
	* ld-mips-elf/mips-elf.exp: Run new testcases.

	[binutils/ChangeLog]
	* readelf.c (display_mips_gnu_attribute): Recognize -mips32r2 -mfp64
	objects.

	[include/ChangeLog]
	* elf/mips.h (Tag_GNU_MIPS_ABI_FP): Mention -mips32r2 -mfp64 variant
	in comment.

	[bfd/ChangeLog]
	* elfxx-mips.c (mips_elf_merge_obj_attributes): Handle -mips32r2
	-mfp64 attribute.

	[gas/ChangeLog]
	* doc/as.texinfo: Document the new attribute value.
@
text
@d305 1
a305 1
   [@@b{-march}=@@var{CPU}] [@@b{-mtune}=@@var{CPU}] 
@


1.175
log
@* doc/as.texinfo (Section): Replace "subsegment" with subsection".
@
text
@d6486 4
@


1.174
log
@gas/

2007-10-27  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5221
	* config/obj-elf.c (obj_elf_section): Handle optional
	parameters for .pushsection.

	* doc/as.texinfo: Document optional parameters for
	.pushsection.

gas/testsuite/

2007-10-27  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5221
	* gas/elf/elf.exp: Run section7.

	* gas/elf/section7.d: New.
	* gas/elf/section7.s: Likewise.
@
text
@d5601 1
a5601 1
.section @@var{name}[, @@var{subsegment}]
d5632 1
a5632 1
taken as a subsegment number (@@pxref{Sub-Sections}).
@


1.173
log
@	* doc/as.texinfo (Overview): Add Xtensa --rename-section option.
@
text
@d5471 1
a5471 1
@@section @@code{.pushsection @@var{name} , @@var{subsection}}
d5482 3
a5484 1
subsection with @@code{name} and @@code{subsection}.
@


1.172
log
@* config/tc-avr.c (mcu_types): Add new devices: AT90PWM2B, AT90PWM3B.
* doc/c-avr.texi: Document new devices.
@
text
@d1188 4
@


1.171
log
@	* doc/as.texinfo (Object Attributes): New chapter.
	(Pseudo Ops): Document .gnu_attribute.
	(LNS directives): Correct .loc_mark_labels documentation.
@
text
@d3898 1
a3898 1
* Section::                     @@code{.section @@var{name}}
@


1.170
log
@* doc/as.texinfo (Type): Fix typo: STT_FUNC not STT_FUNCTION.
@
text
@d192 3
d3834 1
d4261 3
a4263 3
@@section @@code{.loc_mark_blocks @@var{enable}}
@@cindex @@code{loc_mark_blocks} directive
The @@code{.loc_mark_blocks} directive makes the assembler emit an entry
d4589 4
d6404 134
@


1.169
log
@* doc/as.texinfo (Previous): Clarify explanation of the behaviour of this
  pseudo-op and add a couple of examples.
@
text
@d6194 8
a6201 2
  .type <name> STT_FUNCTION
  .type <name> STT_OBJECT
d6203 17
a6219 2
  .type <name>,#function
  .type <name>,#object
d6221 1
a6221 2
  .type <name>,@@@@function
  .type <name>,@@@@object
a6222 6
  .type <name>,%function
  .type <name>,%object
  
  .type <name>,"function"
  .type <name>,"object"
@@end smallexample
@


1.168
log
@* read.c (potable): Add string8, string16, string32 and string64. Add bit size for stringer function.
 (stringer_append_char): New.
 (stringer): Use stringer_append_char().
* config/obj-coff.c (obj_coff_ident): Add bit size for stringer function.
* config/obj-elf.c (obj_elf_ident): Likewise.
* config/tc-alpha.c (s_alpha_stringer): Likewise.
* config/tc-dlx.c (dlx_pseudo_table): Likewise.
* config/tc-hppa.c (pa_stringer): Likewise.
* config/tc-ia64.c (md_pseudo_table, pseudo_opcode): Likewise.
* config/tc-m68hc11.c (md_pseudo_table): Likewise.
* config/tc-mcore.c (md_pseudo_table): Likewise.
* config/tc-mips.c (mips_pseudo_table): Likewise.
* config/tc-spu.c (md_pseudo_table): Likewise.
* config/tc-s390.c (md_pseudo_table): Likewise. Replace '2' by '1'.
* doc/as.texinfo (ABORT): Fix identing.
  (String): Document new string8, string16, string32, string64 functions.
* NEWS: Mention the new feature.

* testsuite/gas/all/gas.exp: Include new test "strings".
* testsuite/gas/all/string.s: New
* testsuite/gas/all/string.d: New.
@
text
@d5349 1
a5349 1
referenced section (and subsection) prior to this one.  Multiple
d5351 34
a5384 1
subsections).
@


1.167
log
@2007-08-24  Joseph Myers  <joseph@@codesourcery.com>
            Paul Brook  <paul@@codesourcery.com>

	* remap.c: New.
	* as.h (remap_debug_filename, add_debug_prefix_map): Declare.
	* as.c (show_usage): Document --debug-prefix-map option.
	(parse_args): Handle --debug-prefix-map.
	* dwarf2dbg.c (out_file_list, out_debug_info): Remap debug paths.
	* stabs.c (stabs_generate_asm_file): Remap debug paths.
	* Makefile.am (GAS_CFILES): Add remap.c
	(GENERIC_OBJS): Add remap.o.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/as.texinfo (--debug-prefix-map): Document.
@
text
@d3779 1
a3779 1
* ABORT (COFF)::                       @@code{.ABORT}
d3911 1
a3911 1
* String::                      @@code{.string "@@var{str}"}
d5935 2
a5936 1
@@section @@code{.string} "@@var{str}"
d5939 4
d5944 4
d5954 14
@


1.166
log
@New port: National Semiconductor's CR16
@
text
@d229 1
d505 4
@


1.166.2.1
log
@2007-08-24  Joseph Myers  <joseph@@codesourcery.com>
            Paul Brook  <paul@@codesourcery.com>

	* remap.c: New.
	* as.h (remap_debug_filename, add_debug_prefix_map): Declare.
	* as.c (show_usage): Document --debug-prefix-map option.
	(parse_args): Handle --debug-prefix-map.
	* dwarf2dbg.c (out_file_list, out_debug_info): Remap debug paths.
	* stabs.c (stabs_generate_asm_file): Remap debug paths.
	* Makefile.am (GAS_CFILES): Add remap.c
	(GENERIC_OBJS): Add remap.o.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/as.texinfo (--debug-prefix-map): Document.
@
text
@a228 1
 [@@b{--debug-prefix-map} @@var{old}=@@var{new}]
a503 4
@@item --debug-prefix-map @@var{old}=@@var{new}
When assembling files in directory @@file{@@var{old}}, record debugging
information describing them as in @@file{@@var{new}} instead.

@


1.165
log
@Use @@copying around copyright notices
@
text
@d6354 3
d6478 4
@


1.164
log
@2007-05-17  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4517
	2003-06-05  Michal Ludvig  <mludvig@@suse.cz>
	* as.texinfo: Document new directives: .cfi_restore,
	.cfi_undefined, .cfi_same_value, .cfi_return_column,
	.cfi_remember_state and .cfi_restore_state.

2007-05-17  H.J. Lu  <hongjiu.lu@@intel.com>

	2003-06-05  Michal Ludvig  <mludvig@@suse.cz>
	* testsuite/gas/cfi/cfi-x86_64.s: Test new directives
	and different writings of registers and numbers.
	* testsuite/gas/cfi/cfi-x86_64.d: Updated pattern to
	match the above change.
@
text
@d99 1
a99 1
@@ifinfo
d103 1
a103 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002,
d114 1
a114 9

@@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@@end ignore
@@end ifinfo
@


1.163
log
@gas/
	* doc/as.texinfo: Add -mvxworks-pic to the list of MIPS options.
	* doc/c-mips.texi (-KPIC, -mvxworks-pic): Document.
	* config/tc-mips.c (md_show_usage): Mention -mvxworks-pic.
@
text
@d3793 1
a3793 1
* CFI directives::		@@code{.cfi_startproc}, @@code{.cfi_endproc}, etc.
d4112 1
a4112 1
@@section @@code{.cfi_startproc}
d4116 1
a4116 2
data structures and emits architecture dependent initial CFI instructions.
Don't forget to close the function by 
d4119 3
d4177 25
@


1.162
log
@bfd/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/bfd.texinfo: Put the contents after the title page rather
	than at the end of the document.

binutils/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/binutils.texi: Put the contents after the title page rather
	than at the end of the document.

gas/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/as.texinfo: Put the contents after the title page rather
	than at the end of the document.

gprof/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* gprof.texi: Put the contents after the title page rather
	than at the end of the document.

ld/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* ld.texinfo: Put the contents after the title page rather
	than at the end of the document.
@
text
@d372 1
a372 1
   [@@b{-non_shared}] [@@b{-xgot}]
@


1.161
log
@	* doc/as.texinfo (Reloc): Document.
	* read.c (potable): Add "reloc".
	(s_reloc): New function.
	* write.c (reloc_list): New global var.
	(resolve_reloc_expr_symbols): New function.
	(write_object_file): Call it.
	(write_relocs): Process reloc_list.
	* write.h (struct reloc_list): New.
	(reloc_list): Declare.
@
text
@d172 1
a6908 1
@@contents
@


1.160
log
@bfd:
	* Makefile.am (bfdver.h): Only set VERSION_PACKAGE in bfdver.texi
	if nonempty.
	* configure.in (REPORT_BUGS_TO): Do not use "URL:" prefix.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

binutils:
	* doc/binutils.texi: Include VERSION_PACKAGE when reporting
	version.

gas:
	* doc/as.texinfo: Include VERSION_PACKAGE when reporting version.

gprof:
	* Makefile.am (TEXI2POD): Include $(AM_MAKEINFOFLAGS).
	(AM_MAKEINFOFLAGS, TEXI2DVI): Define with -I ../bfd/doc.
	* Makefile.in: Regenerate.
	* gprof.texi: Include bfdver.texi.  Report both VERSION_PACKAGE
	and VERSION.

ld:
	* ld.texinfo: Include VERSION_PACKAGE when reporting version.
@
text
@d3889 1
d5437 14
@


1.159
log
@bfd/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (bfdver.h): Substitute report_bugs_to.  Also
	create doc/bfdver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): New option.
	* configure: Regenerated.

	* version.h (REPORT_BUGS_TO): New.

binutils/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* bucomm.c: Don't include bfdver.h.
	* objdump.c: Likewise.
	* version.c: Likewise.

	* bucomm.h: Include bfdver.h.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (binutils_TEXINFOS): Removed.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(config.texi): Removed.
	(MOSTLYCLEANFILES): Remove config.texi.
	* doc/Makefile.in: Regenerated.

	* doc/binutils.texi: Include bfdver.texi instead of
	config.texi.

gas/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (as_TEXINFOS): Remove gasver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(gasver.texi): Removed.
	(MOSTLYCLEANFILES): Remove gasver.texi.
	(as.1): Don't depend on gasver.texi.
	* doc/Makefile.in: Regenerated.

	* doc/as.texi: Include bfdver.texi instead of gasver.texi.

gprof/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

ld/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld_TEXINFOS): Remove ldver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	(ldver.texi): Likewise.
	(ld.1): Don't depend on ldver.texi.
	(MOSTLYCLEANFILES): Remove ldver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* lexsup.c: Include bfdver.h.

	* ld.texinfo: Include bfdver.texi instead of ldver.texi.
@
text
@d130 4
d177 5
a181 2
This file is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}} version
@@value{VERSION}.
@


1.158
log
@binutils:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (config.texi): Define BUGURL.
	* doc/binutils.texi: Use BUGURL.  Remove text about large files
	and uuencoding.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

gas:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (gasver.texi): Define BUGURL.
	* doc/as.texinfo: Use BUGURL.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

ld:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* Makefile.am (ldver.texi): Define BUGURL.
	* ld.texinfo: Use BUGURL.
	* Makefile.in, configure: Regenerate.
@
text
@d25 1
a25 1
@@include gasver.texi
@


1.157
log
@	[ gas/ChangeLog ]
	* config/tc-mips.c (mips_set_options, mips_opts, file_ase_dspr2,
	ISA_SUPPORTS_DSPR2_ASE, MIPS_CPU_ASE_DSPR2): Add DSP R2 ASE support.
	(macro_build): Add case '2'.
	(macro): Expand M_BALIGN to nop, packrl.ph or balign.
	(validate_mips_insn): Add support for balign instruction.
	(mips_ip): Handle DSP R2 instructions. Support balign instruction.
	(OPTION_DSPR2, OPTION_NO_DSPR2, OPTION_COMPAT_ARCH_BASE,
	md_parse_option, mips_after_parse_args): Add -mdspr2 and -mno-dspr2
	command line options.
	(s_mipsset): Add support for .set dspr2 and .set nodspr2 directives.
	(md_show_usage): Add -mdspr2 and -mno-dspr2 help output.
	* doc/c-mips.texi, doc/as.texinfo: Document -mdspr2, -mno-dspr2,
	.set dspr2, .set nodspr2.

	[ gas/testsuite/ChangeLog ]
	* gas/mips/mips32-dspr2.s, gas/mips/mips32-dspr2.d: New test for
	DSP R2.
	* gas/mips/mips.exp: Run new test.

	[ include/opcode/Changelog ]
	* mips.h (OP_SH_BP, OP_MASK_BP): Add support for balign instruction.
	(INSN_DSPR2): Add flag for DSP R2 instructions.
	(M_BALIGN): New macro.

	[ opcodes/ChangeLog ]
	* mips-dis.c (mips_arch_choices): Add DSP R2 support.
	(print_insn_args): Add support for balign instruction.
	* mips-opc.c (D33): New shortcut for DSP R2 instructions.
	(mips_builtin_opcodes): Add DSP R2 instructions.

	[ sim/mips/ChangeLog ]
	* Makefile.in (IGEN_INCLUDE): Add dsp2.igen.
	* configure.ac (mips*-sde-elf*, mipsisa32r2*-*-*, mipsisa64r2*-*-*):
	Add dsp2 to sim_igen_machine.
	* configure: Regenerate.
	* dsp.igen (do_ph_op): Add MUL support when op = 2.
	(do_ph_mulq): New function to support mulq_rs.ph and mulq_s.ph.
	(mulq_rs.ph): Use do_ph_mulq.
	(MFHI, MFLO, MTHI, MTLO): Move these instructions to mips.igen.
	* mips.igen: Add dsp2 model and include dsp2.igen.
	(MFHI, MFLO, MTHI, MTLO): Extend these instructions for
	for *mips32r2, *mips64r2, *dsp.
	(MADD, MADDU, MSUB, MSUBU, MULT, MULTU): Extend these instructions
	for *mips32r2, *mips64r2, *dsp2.
	* dsp2.igen: New file for MIPS DSP REV 2 ASE.

	[ sim/testsuite/sim/mips/ChangeLog ]
	* basic.exp: Run the dsp2 test.
	* utils-dsp.inc (dspckacc_astio, dspck_tsimm): New macro.
	* mips32-dsp2.s: New test.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005, 2006
d103 2
a104 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002, 2006 Free Software Foundation, Inc.
d157 2
a158 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002, 2006 Free Software Foundation, Inc.
d6639 1
d6641 2
a6642 1
to @@samp{bug-binutils@@@@gnu.org}.
@


1.156
log
@* as.c (main): Mark symbols created via the --defsym command line
  option as volatile so that they can be overridden later on by a
  .set directive.  This maintains compatibility with the behaviour
  of earlier versions of the assembler.
* doc/as.texinfo (--defsym): Document that the defined symbol's
  value can be overridden via a .set directive.
@
text
@d375 1
d1040 2
a1041 2
Generate code for the DSP Application Specific Extension.
This tells the assembler to accept DSP instructions.
d1044 7
@


1.155
log
@	* dw2gencfi.c (struct fde_entry): Add per_encoding, lsda_encoding,
	personality and lsda.
	(struct cie_entry): Add per_encoding, lsda_encoding and personality.
	(alloc_fde_entry): Initialize per_encoding and lsda_encoding.
	(cfi_pseudo_table): Handle .cfi_personality and .cfi_lsda.
	(dot_cfi_personality, dot_cfi_lsda, encoding_size): New functions.
	(output_cie): Output personality including its encoding and LSDA encoding.
	(output_fde): Output LSDA.
	(select_cie_for_fde): Don't share CIE if personality, its encoding or
	LSDA encoding are different.  Copy the 3 fields from fde_entry to
	cie_entry.
	* doc/as.texinfo (.cfi_personality, .cfi_lsda): Document.

	* gas/cfi/cfi-common-6.d: New test.
	* gas/cfi/cfi-common-6.s: New.
	* gas/cfi/cfi.exp: Add cfi-common-6 test.
@
text
@d504 3
a506 1
indicates a hexadecimal value, and a leading @@samp{0} indicates an octal value.
@


1.154
log
@        * doc/as.texinfo (Overview): Revise description of --keep-locals.
        Add xref to "Symbol Names".
        (L): Refer to "local symbols" instead of "local labels".  Move
        definition to "Symbol Names" section; add xref to that section.
        (Symbol Names): Use "Local Symbol Names" section to define local
        symbols.  Add "Local Labels" heading for description of temporary
        forward/backward labels, and refer to those as "local labels".
@
text
@d4105 19
@


1.153
log
@        * doc/as.texinfo: Fix cross reference usage, typos and grammar.
        (Overview): Skip cross reference in man page.
@
text
@d554 6
a559 3
Keep (in the symbol table) local symbols.  On traditional a.out systems
these start with @@samp{L}, but different systems have different local
label prefixes.
d1567 1
a1567 1
* L::             -L to retain local labels
d1700 1
a1700 1
@@section Include Local Labels: @@option{-L}
d1703 8
a1710 7
@@cindex local labels, retaining in output
Labels beginning with @@samp{L} (upper case only) are called @@dfn{local
labels}. @@xref{Symbol Names}.  Normally you do not see such labels when
debugging, because they are intended for the use of programs (like
compilers) that compose assembler programs, not for your notice.
Normally both @@command{@@value{AS}} and @@code{@@value{LD}} discard such labels, so you do not
normally debug with them.
d1712 1
a1712 1
This option tells @@command{@@value{AS}} to retain those @@samp{L@@dots{}} symbols
d1714 1
a1714 7
@@code{@@value{LD}} to preserve symbols whose names begin with @@samp{L}.

By default, a local label is any label beginning with @@samp{L}, but each
target is allowed to redefine the local label prefix.
@@ifset HPPA
On the HPPA local labels begin with @@samp{L$}.
@@end ifset
d3219 16
d3237 1
a3237 1
Local symbols help compilers and programmers use names temporarily.
d3240 1
a3240 1
To define a local symbol, write a label of the form @@samp{@@b{N}:} (where @@b{N}
d3242 1
a3242 1
definition of that symbol write @@samp{@@b{N}b}, using the same number as when
d3273 1
a3273 1
Local symbol names are only a notational device.  They are immediately
d3280 4
a3283 3
@@item L
All local labels begin with @@samp{L}. Normally both @@command{@@value{AS}} and
@@code{@@value{LD}} forget symbols that start with @@samp{L}. These labels are
d3304 2
a3305 2
So for example, the first @@code{1:} is named @@code{L1@@kbd{C-B}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-B}44}.
d3324 1
a3324 1
@@samp{6$} is named @@samp{L6@@kbd{C-A}5}.
@


1.152
log
@PR gas/3129
* doc/as.texinfo (Macro): Improve documentation about separating macro arguments from following text.
@
text
@d212 1
a212 1
@@pxref{Invoking,,Command-Line Options}.
d492 4
a495 1
Begin in alternate macro mode, see @@ref{Altmacro,,@@code{.altmacro}}.
d1518 2
a1519 1
versions of the @@sc{gnu} assembler; @@pxref{Machine Dependencies}, for options specific
d1619 2
a1620 1
Note if the assembler source is coming from the standard input (eg because it
d1690 2
a1691 2
@@command{@@value{AS}} sometimes alters the code emitted for directives of the form
@@samp{.word @@var{sym1}-@@var{sym2}}; @@pxref{Word,,@@code{.word}}.
d1724 5
a1728 3
them as a listing file.  The format of this listing can be controlled by pseudo
ops inside the assembler source (@@pxref{List} @@pxref{Title} @@pxref{Sbttl}
@@pxref{Psize} @@pxref{Eject}) and also by the following switches:
d2090 1
a2090 1
@@samp{.S} suffix.  @@xref{Overall Options,, Options Controlling the Kind of
d2227 1
a2227 1
line.  Then a string (@@pxref{Strings,, Strings}) is allowed: if present it is a
d2302 2
a2303 2
separator character.  (The line separator is usually @@samp{;}, unless
this conflicts with the comment character; @@pxref{Machine Dependencies}.)  The
d3087 2
a3088 2
@@var{Expression} should be an absolute expression.
(@@xref{Expressions}.)  If you just say @@samp{.text} then @@samp{.text 0}
d3127 1
a3127 1
another form of uninitialized symbol; see @@xref{Comm,,@@code{.comm}}.
d3198 2
a3199 2
string of digits, letters, dollar signs (unless otherwise noted in
@@ref{Machine Dependencies}), and underscores.
d3230 1
a3230 1
@@samp{@@b{N}f}--- The @@samp{b} stands for``backwards'' and the @@samp{f} stands
d3261 3
a3263 3
The symbol names stored in the symbol table, appearing in error messages and
optionally emitted to the object file.  The names are constructed using these
parts:
d3296 2
a3297 2
dollar labels.  These labels go out of scope (ie they become undefined) as soon
as a non-local label is defined.  Thus they remain valid for only a small
d3304 1
a3304 1
dollar sign.  eg @@samp{@@b{55$}}.
d3307 3
a3309 3
name which uses ASCII character @@samp{\001} (control-A) as the magic character
to distinguish them from ordinary labels.  Thus the 5th definition of @@samp{6$}
is named @@samp{L6@@kbd{C-A}5}.
d3740 1
a3740 1
@@xref{Machine Dependencies} for additional directives.
d4280 1
a4280 1
assembly; @@pxref{If,,@@code{.if}}.  It marks the beginning of a section
d4289 1
a4289 1
assembly; @@pxref{If,,@@code{.if}}.  It is shorthand for beginning a new
d4334 1
a4334 1
It is synonymous with @@samp{.set}; @@pxref{Set,,@@code{.set}}.
d4345 2
a4346 2
but the symbol is not protected from later redefinition, 
compare @@xref{Equiv}.
d4502 1
a4502 1
@@xref{HPPA Directives,, HPPA Assembler Directives}.
d4739 1
a4739 2
For some caveats with the spelling of @@var{symbol}, see also the discussion
at @@xref{Macro}.
d4924 1
a4924 1
@@code{.long} is the same as @@samp{.int}, @@pxref{Int,,@@code{.int}}.
d4988 1
a4988 1
subject to the @@code{.purgem} directive (@@xref{Purgem}.) between the two
d5096 3
a5098 3
Note - this problem of correctly identifying string parameters to pseudo ops
also applies to the identifiers used in @@code{.irp} (@@xref{Irp}.) 
and @@code{.irpc} (@@xref{Irpc}.) as well.
d5159 1
a5159 1
Disable alternate macro mode.  @@ref{Altmacro}
d5556 1
a5556 1
be specified as well as an extra argument - @@var{entsize} - like this:
d5585 1
a5585 1
Note - if both the @@var{M} and @@var{G} flags are present then the fields for
d5658 1
a5658 1
numbers of different lengths; @@pxref{Machine Dependencies}.
d5741 1
a5741 1
symbolic debugging format.  @@xref{Uleb128,@@code{.uleb128}}.
d6069 1
a6069 1
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.
d6112 1
a6112 1
parent name of @@code{0} is treated as referring the @@code{*ABS*} section.
@


1.151
log
@Fix spelling typos
@
text
@d4990 1
a4990 1
@@item .macro plus1 p, p1
a5003 1
@@end table
d5015 2
d5020 1
a5020 1
characters when they occur in a special position.  For example, if colon
d5022 1
a5022 1
architecture specific code special-cases it when occuring as the final
d5026 55
a5080 6
identifier for being the subject to parameter substitution.  In this
example, besides the potential of just separating identifier and colon
by white space, using alternate macro syntax (@@xref{Altmacro}.) and
ampersand (@@code{&}) as the character to separate literal text from macro
parameters (or macro parameters from one another) would provide a way to
achieve the same effect:
d5088 1
d5090 3
a5092 2
This applies identically to the identifiers used in @@code{.irp} (@@xref{Irp}.)
and @@code{.irpc} (@@xref{Irpc}.).
@


1.150
log
@PR binutils/2877
* doc/as.texi: Fix spelling typo: branchs => branches.
* doc/c-m68hc11.texi: Likewise.
* config/tc-m68hc11.c: Likewise.
  Support old spelling of command line switch for backwards compatibility.
@
text
@d133 1
a133 1
The Free Software Foundation Inc.  thanks The Nice Computer
d1184 1
a1184 1
Issue a warning for undocumented Z80 instructions that do notwork on R800.  
d1190 1
a1190 1
Treat undocumented Z80 intructions that do notwork on R800 as errors.
d2681 1
a2681 1
specify two numbers separated by a colon---
d3279 1
a3279 1
the number @@samp{1} and its 15th defintion gets @@samp{15} as well.
d3301 1
a3301 1
to distinguish them from ordinary labels.  Thus the 5th defintion of @@samp{6$}
d4081 1
a4081 1
@@code{.cfi_startproc}. and emits it to @@code{.eh_frame}.
d4132 1
a4132 1
The detail of filename indicies is exposed to the user because the filename
d4134 1
a4134 1
information, and thus the user must know the exact indicies that table
d5082 1
a5082 1
You can delimit strings with single-quote charaters.
d6054 1
a6054 1
parent name of @@code{0} is treated as refering the @@code{*ABS*} section.
d6610 1
a6610 1
@@command{@@value{AS}} is out of synch, or you have encountered a bug in the C
d6763 1
a6763 1
Inc. added support for Xtensa processors.
@


1.149
log
@2006-06-24  H.J. Lu  <hongjiu.lu@@intel.com>

	* doc/as.texinfo (Org): Remove space.
	(P2align): Add "@@var{abs-expr},".
@
text
@d347 1
a347 1
   [@@b{--force-long-branchs}] [@@b{--short-branchs}]
d871 1
a871 1
@@item --force-long-branchs
d876 2
a877 2
@@item -S | --short-branchs
Do not turn relative branchs into absolute ones
@


1.148
log
@2006-06-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.h (processor_type): New.
	(arch_entry): Add type.

	* config/tc-i386.c (cpu_arch_tune): New.
	(cpu_arch_tune_flags): Likewise.
	(cpu_arch_isa_flags): Likewise.
	(cpu_arch): Updated.
	(set_cpu_arch): Also update cpu_arch_isa_flags.
	(md_assemble): Update cpu_arch_isa_flags.
	(OPTION_MARCH): New.
	(OPTION_MTUNE): Likewise.
	(md_longopts): Add -march= and -mtune=.
	(md_parse_option): Support -march= and -mtune=.
	(md_show_usage): Add -march=CPU/-mtune=CPU.
	(i386_target_format): Also update cpu_arch_isa_flags,
	cpu_arch_tune and cpu_arch_tune_flags.

	* doc/as.texinfo: Add -march=CPU/-mtune=CPU.

	* doc/c-i386.texi: Document -march=CPU/-mtune=CPU.
@
text
@d3829 2
a3830 2
* Org::                         @@code{.org @@var{new-lc} , @@var{fill}}
* P2align::                     @@code{.p2align @@var{abs-expr} , @@var{abs-expr}}
@


1.147
log
@	* doc/c-avr.texi: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-avr.texi
	* doc/all.texi: Set AVR
	* doc/as.texinfo: Include c-avr.texi
@
text
@d299 1
@


1.146
log
@Add support for AVR6 family
@
text
@d6201 3
d6320 4
@


1.145
log
@
bfd/doc/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* bfd.texinfo: Rename "Index" to "BFD Index"

gas/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* doc/as.texinfo: Rename "Index" to "AS Index",
	and "ABORT" to "ABORT (COFF)".

ld/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* ld.texinfo: Rename "Index" to "LD Index"
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004, 2005
d103 1
a103 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.
d156 1
a156 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.
d194 1
a194 1
* AS Index::                AS Index
d5974 1
a5974 1
compatibility with various other assemblers.  
@


1.144
log
@	[ gas/ChangeLog ]
	* config/tc-mips.c (mips_set_options): Add ase_smartmips flag.
	(mips_opts): Likewise.
	(file_ase_smartmips): New variable.
	(ISA_HAS_ROR): SmartMIPS implements rotate instructions.
	(macro_build): Handle SmartMIPS instructions.
	(mips_ip): Likewise.
	(md_longopts): Add argument handling for smartmips.
	(md_parse_options, mips_after_parse_args): Likewise.
	(s_mipsset): Add .set smartmips support.
	(md_show_usage): Document -msmartmips/-mno-smartmips.
	* doc/as.texinfo: Document -msmartmips/-mno-smartmips and
	.set smartmips.
	* doc/c-mips.texi: Likewise.

	[ gas/testsuite/ChangeLog ]
	* gas/mips/smartmips.s, gas/mips/smartmips.d: New smartmips test.
	* gas/mips/mips.exp: Run smartmips test.
@
text
@d194 1
a194 1
* Index::                       Index
d3739 1
a3739 1
* ABORT::                       @@code{.ABORT}
d3917 2
a3918 2
@@node ABORT
@@section @@code{.ABORT}
d6767 2
a6768 2
@@node Index
@@unnumbered Index
@


1.143
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d370 1
d1010 6
@


1.142
log
@	* doc/as.texinfo: Mention that some .type syntaxes are not
	supported on all architectures.
@
text
@d454 1
a454 1
@@include @@value{top_srcdir}/../libiberty/at-file.texi
@


1.141
log
@	PR gas/2446
	* doc/as.texinfo (Ident): Document this directive more thoroughly.
@
text
@d5967 10
a5976 1
compatibility with various other assemblers.  The syntaxes supported are:
d5979 3
a5992 3
  
  .type <name> STT_FUNCTION
  .type <name> STT_OBJECT
@


1.141.4.1
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d454 1
a454 1
@@include at-file.texi
@


1.141.2.1
log
@	* doc/as.texinfo: Mention that some .type syntaxes are not
	supported on all architectures.
@
text
@d5967 1
a5967 9
compatibility with various other assemblers.  

Because some of the characters used in these syntaxes (such as @@samp{@@@@} and
@@samp{#}) are comment characters for some architectures, some of the syntaxes
below do not work on all architectures.  The first variant will be accepted by
the assembler on all architectures, so that syntax should be used if you
require maximum portability.

The syntaxes supported are:
@


1.141.2.2
log
@
2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* bfd/doc/bfd.texinfo: Rename "Index" to "BFD Index"
	* ld/ld.texinfo: Rename "Index" to "LD Index"
	* gas/doc/as.texinfo: Rename "Index" to "AS Index"
	Rename "ABORT" to "ABORT (COFF)"
@
text
@d194 1
a194 1
* AS Index::                AS Index
d3732 1
a3732 1
* ABORT (COFF)::                       @@code{.ABORT}
d3910 2
a3911 2
@@node ABORT (COFF)
@@section @@code{.ABORT} (COFF)
d6759 2
a6760 2
@@node AS Index
@@unnumbered AS Index
@


1.141.2.3
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d454 1
a454 1
@@include at-file.texi
@


1.140
log
@bfd/
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Handle S flag.
	(_bfd_elf_write_section_eh_frame): Likewise.
gas/
	* dw2gencfi.c (struct fde_entry, struct cie_entry): Add signal_frame
	field.
	(CFI_signal_frame): Define.
	(cfi_pseudo_table): Add .cfi_signal_frame.
	(dot_cfi): Handle CFI_signal_frame.
	(output_cie): Handle cie->signal_frame.
	(select_cie_for_fde): Don't share CIE if signal_frame flag is
	different.  Copy signal_frame from FDE to newly created CIE.
	* doc/as.texinfo: Document .cfi_signal_frame.
@
text
@d4533 8
a4540 4
This directive is used by some assemblers to place tags in object files.
@@command{@@value{AS}} simply accepts the directive for source-file
compatibility with such assemblers, but does not actually emit anything
for it.
@


1.139
log
@gas/ acinclude.m4 aclocal.m4 app.c app.o as.c as.h as.h.cvs asintl.h as-new as.o atof-generic.c atof-generic.o atof-ieee.o autom4te.cache bignum.h bit_fix.h cgen.c cgen.h ChangeLog ChangeLog-0001 ChangeLog-0203 ChangeLog.~1.2755.~ ChangeLog-9295 ChangeLog-9697 ChangeLog-9899 cond.c cond.o config config.cache config.h config.in config.log config.status configure configure.in configure.tgt CONTRIBUTORS COPYING CVS debug.c DEP2 DEPDIR depend.c depend.o dep-in.sed DEPOBJ dep.sed DEPTC doc dw2gencfi.c dw2gencfi.h dw2gencfi.o dwarf2dbg.c dwarf2dbg.h dwarf2dbg.o ecoff.c ecoff.h ecoff.o ehopt.c ehopt.o emul.h emul-target.h expr.c expr.c.cvs expr.h expr.o flonum-copy.c flonum-copy.o flonum.h flonum-konst.c flonum-konst.o flonum-mult.c flonum-mult.o frags.c frags.h frags.o gdbinit.in hash.c hash.h hash.o input-file.c input-file.h input-file.o input-scrub.c input-scrub.o itbl-cpu.h itbl-lex.h itbl-lex.l itbl-ops.c itbl-ops.h itbl-parse.y libtool listing.c listing.h listing.o literal.c literal.o long.s macro.c macro.c.bak macro.h macro.o MAINTAINERS Makefile Makefile.am Makefile.in messages.c messages.o NEWS obj-coff.o obj-format.h obj.h output-file.c output-file.h output-file.o po read.c read.h README read.o sb.c sb.h sb.o site.bak site.exp stabs.c stabs.o stamp-h1 stamp-h.in struc-symbol.h subsegs.c subsegs.h subsegs.o symbols.c symbols.h symbols.o targ-cpu.h targ-env.h tc.h tc-z80.o testsuite write.c write.h write.o config/tc-z80.c (z80_start_line_hook): issue an error when redefining a symbol with equ acinclude.m4 aclocal.m4 app.c app.o as.c as.h as.h.cvs asintl.h as-new as.o atof-generic.c atof-generic.o atof-ieee.o autom4te.cache bignum.h bit_fix.h cgen.c cgen.h ChangeLog ChangeLog-0001 ChangeLog-0203 ChangeLog.~1.2755.~ ChangeLog-9295 ChangeLog-9697 ChangeLog-9899 cond.c cond.o config config.cache config.h config.in config.log config.status configure configure.in configure.tgt CONTRIBUTORS COPYING CVS debug.c DEP2 DEPDIR depend.c depend.o dep-in.sed DEPOBJ dep.sed DEPTC doc dw2gencfi.c dw2gencfi.h dw2gencfi.o dwarf2dbg.c dwarf2dbg.h dwarf2dbg.o ecoff.c ecoff.h ecoff.o ehopt.c ehopt.o emul.h emul-target.h expr.c expr.c.cvs expr.h expr.o flonum-copy.c flonum-copy.o flonum.h flonum-konst.c flonum-konst.o flonum-mult.c flonum-mult.o frags.c frags.h frags.o gdbinit.in hash.c hash.h hash.o input-file.c input-file.h input-file.o input-scrub.c input-scrub.o itbl-cpu.h itbl-lex.h itbl-lex.l itbl-ops.c itbl-ops.h itbl-parse.y libtool listing.c listing.h listing.o literal.c literal.o long.s macro.c macro.c.bak macro.h macro.o MAINTAINERS Makefile Makefile.am Makefile.in messages.c messages.o NEWS obj-coff.o obj-format.h obj.h output-file.c output-file.h output-file.o po read.c read.h README read.o sb.c sb.h sb.o site.bak site.exp stabs.c stabs.o stamp-h1 stamp-h.in struc-symbol.h subsegs.c subsegs.h subsegs.o symbols.c symbols.h symbols.o targ-cpu.h targ-env.h tc.h tc-z80.o testsuite write.c write.h write.o doc/as.texinfo(equ<z80>): mention difference with .equiv acinclude.m4 aclocal.m4 app.c app.o as.c as.h as.h.cvs asintl.h as-new as.o atof-generic.c atof-generic.o atof-ieee.o autom4te.cache bignum.h bit_fix.h cgen.c cgen.h ChangeLog ChangeLog-0001 ChangeLog-0203 ChangeLog.~1.2755.~ ChangeLog-9295 ChangeLog-9697 ChangeLog-9899 cond.c cond.o config config.cache config.h config.in config.log config.status configure configure.in configure.tgt CONTRIBUTORS COPYING CVS debug.c DEP2 DEPDIR depend.c depend.o dep-in.sed DEPOBJ dep.sed DEPTC doc dw2gencfi.c dw2gencfi.h dw2gencfi.o dwarf2dbg.c dwarf2dbg.h dwarf2dbg.o ecoff.c ecoff.h ecoff.o ehopt.c ehopt.o emul.h emul-target.h expr.c expr.c.cvs expr.h expr.o flonum-copy.c flonum-copy.o flonum.h flonum-konst.c flonum-konst.o flonum-mult.c flonum-mult.o frags.c frags.h frags.o gdbinit.in hash.c hash.h hash.o input-file.c input-file.h input-file.o input-scrub.c input-scrub.o itbl-cpu.h itbl-lex.h itbl-lex.l itbl-ops.c itbl-ops.h itbl-parse.y libtool listing.c listing.h listing.o literal.c literal.o long.s macro.c macro.c.bak macro.h macro.o MAINTAINERS Makefile Makefile.am Makefile.in messages.c messages.o NEWS obj-coff.o obj-format.h obj.h output-file.c output-file.h output-file.o po read.c read.h README read.o sb.c sb.h sb.o site.bak site.exp stabs.c stabs.o stamp-h1 stamp-h.in struc-symbol.h subsegs.c subsegs.h subsegs.o symbols.c symbols.h symbols.o targ-cpu.h targ-env.h tc.h tc-z80.o testsuite write.c write.h write.o doc/as.texinfo(err): fix typo acinclude.m4 aclocal.m4 app.c app.o as.c as.h as.h.cvs asintl.h as-new as.o atof-generic.c atof-generic.o atof-ieee.o autom4te.cache bignum.h bit_fix.h cgen.c cgen.h ChangeLog ChangeLog-0001 ChangeLog-0203 ChangeLog.~1.2755.~ ChangeLog-9295 ChangeLog-9697 ChangeLog-9899 cond.c cond.o config config.cache config.h config.in config.log config.status configure configure.in configure.tgt CONTRIBUTORS COPYING CVS debug.c DEP2 DEPDIR depend.c depend.o dep-in.sed DEPOBJ dep.sed DEPTC doc dw2gencfi.c dw2gencfi.h dw2gencfi.o dwarf2dbg.c dwarf2dbg.h dwarf2dbg.o ecoff.c ecoff.h ecoff.o ehopt.c ehopt.o emul.h emul-target.h expr.c expr.c.cvs expr.h expr.o flonum-copy.c flonum-copy.o flonum.h flonum-konst.c flonum-konst.o flonum-mult.c flonum-mult.o frags.c frags.h frags.o gdbinit.in hash.c hash.h hash.o input-file.c input-file.h input-file.o input-scrub.c input-scrub.o itbl-cpu.h itbl-lex.h itbl-lex.l itbl-ops.c itbl-ops.h itbl-parse.y libtool listing.c listing.h listing.o literal.c literal.o long.s macro.c macro.c.bak macro.h macro.o MAINTAINERS Makefile Makefile.am Makefile.in messages.c messages.o NEWS obj-coff.o obj-format.h obj.h output-file.c output-file.h output-file.o po read.c read.h README read.o sb.c sb.h sb.o site.bak site.exp stabs.c stabs.o stamp-h1 stamp-h.in struc-symbol.h subsegs.c subsegs.h subsegs.o symbols.c symbols.h symbols.o targ-cpu.h targ-env.h tc.h tc-z80.o testsuite write.c write.h write.o doc/c-z80.texi(equ): redefining a symbol with equ is no longer allowed
@
text
@d4105 3
@


1.138
log
@	* doc/Makefile.am (asconfig.texi): Set top_srcdir.
	* doc/Makefile.in: Regenerated.
	* doc/as.texinfo: Document "@@FILE".
@
text
@d4327 1
d4361 1
a4361 1
object file.  This can be used to signal error an conditionally compiled code.
@


1.137
log
@Add support for the Z80 processor family
@
text
@d234 3
a236 2
 [@@b{--fatal-warnings}] [@@b{-w}] [@@b{-x}] [@@b{-Z}] [@@b{--target-help}]
 [@@var{target-options}] [@@b{--}|@@var{files} @@dots{}]
d454 2
@


1.136
log
@gas/ChangeLog:
* read.c (potable): Add weakref.
(s_weakref): New.
* read.h (s_weakref): Declare.
* struc-symbol.h (struct symbol): Add sy_weakrefr and sy_weakrefd.
* symbols.c (colon): Clear weakrefr.
(symbol_find_exact): Rename to, and reimplement in terms of...
(symbol_find_exact_noref): ... new function.
(symbol_find): Likewise...
(symbol_find_noref): ... ditto.
(resolve_symbol_value): Resolve weakrefr without setting their
values.
(S_SET_WEAK): Call hook.
(S_GET_VALUE): Follow weakref link.
(S_SET_VALUE): Clear weakrefr.
(S_IS_WEAK): Follow weakref link.
(S_IS_WEAKREFR, S_SET_WEAKREFR, S_CLEAR_WEAKREFR): New.
(S_IS_WEAKREFD, S_SET_WEAKREFD, S_CLEAR_WEAKREFD): New.
(symbol_set_value_expression, symbol_set_frag): Clear weakrefr.
(symbol_mark_used): Follow weakref link.
(print_symbol_value_1): Print weak, weakrefr and weakrefd.
* symbols.h (symbol_find_noref, symbol_find_exact_noref): Declare.
(S_IS_WEAKREFR, S_SET_WEAKREFR, S_CLEAR_WEAKREFR): Declare.
(S_IS_WEAKREFD, S_SET_WEAKREFD, S_CLEAR_WEAKREFD): Declare.
* write.c (adust_reloc_syms): Follow weakref link.  Do not
complain if target is undefined.
(write_object_file): Likewise.  Remove weakrefr symbols.  Drop
unreferenced weakrefd symbols.
* config/obj-coff.c (obj_frob_symbol): Do not force WEAKREFD
symbols EXTERNAL.
(pecoff_obj_set_weak_hook, pecoff_obj_clear_weak_hook): New.
* config/obj-coff.h (obj_set_weak_hook, obj_clear_weak_hook): Define.
* doc/as.texinfo: Document weakref.
* doc/internals.texi: Document new struct members, internal
functions and hooks.
gas/testsuite/ChangeLog:
* gas/all/weakref1.s, gas/all/weakref1.d: New test.
* gas/all/weakref1g.d, gas/all/weakref1l.d: New tests.
* gas/all/weakref1u.d, gas/all/weakref1w.d: New tests.
* gas/all/weakref2.s, gas/all/weakref3.s: New tests.
* gas/all/gas.exp: Run new tests.
@
text
@d423 13
d1154 29
d2175 3
d4320 7
d5567 5
d6256 3
d6413 4
@


1.135
log
@* doc/as.texinfo (.loc) Fix placement of '@@end table'.
@
text
@d3845 1
d5993 19
@


1.134
log
@* doc/as.texinfo (Section): Add missing ']' to .section example.
@
text
@d4109 2
a4118 2
@@end table

@


1.133
log
@This adjusts equate handling by
- allowing true forward references (which will always assume the referenced
  symbols have at the point of use) through the new .eqv pseudo-op and the
  new == operator
- disallowing changing .equiv-generated equates (so that the protection this
  provides is both forward and backward)
- snapshotting equates when their value gets changed so that previous uses
  don't get affected by the new value.
- allowing expressions in places where absolute expressions (or register
  names) are needed which were not completely resolvable at the point of
  their definition but which are fully resolvable at the point of use

In addition it fixes PR/288.
@
text
@d5381 1
a5381 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}[,@@var{flag_specific_arguments}]]
@


1.132
log
@* expr.c (operator): Allow "!=" as a synonym for "<>".
* doc/as.texinfo (Infix Op): Mention "!=".
@
text
@d3122 3
a3124 1
directive.  @@xref{Set,,@@code{.set}}.
d3721 1
d4289 9
@


1.131
log
@(Infix Ops):  '<' and '>' are not shift operators.
@
text
@d3622 1
@


1.130
log
@	* Makefile.am: Bfin support.
	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* configure: Regenerated.
	* configure.in: Bfin support.
	* configure.tgt: Bfin support.
	* config/bfin-aux.h: New file.
	* config/bfin-defs.h: New file.
	* config/bfin-lex.l: New file.
	* config/bfin-parse.y: New file.
	* config/tc-bfin.c: New file.
	* config/tc-bfin.h: New file.
	* doc/Makefile.am: Recognize c-bfin.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Bfin support.
	* doc/as.texinfo: Likewise.
	* doc/c-bfin.texi: Document bfin-specific syntax and
	directives.
@
text
@d3570 1
a3570 2
@@item <
@@itemx <<
d3573 1
a3573 2
@@item >
@@itemx >>
d3625 1
a3625 1
@@itemx >
d3627 1
a3627 1
@@itemx >=
d3629 1
a3629 1
@@itemx <=
@


1.129
log
@        * dwarf2dbg.c (struct line_entry): Replace frag and frag_ofs
        with label.
        (dwarf2_loc_mark_labels): New.
        (dwarf2_gen_line_info_1): Split out of ...
        (dwarf2_gen_line_info): ... here.  Create the temp symbol here.
        (dwarf2_emit_label): New.
        (dwarf2_directive_loc_mark_labels): New.
        (out_set_addr): Take a symbol instead of frag+ofs.
        (relax_inc_line_addr): Likewise.
        (emit_inc_line_addr): Assert delta non-negative.
        (process_entries): Remove dead code.  Update to work with temp
        symbols instead of frag+ofs.
        * dwarf2dbg.h (dwarf2_directive_loc_mark_labels): Declare.
        (dwarf2_emit_label, dwarf2_loc_mark_labels): Declare.
        * config/obj-elf.c (elf_pseudo_tab): Add loc_mark_labels.
        * config/obj-elf.h (obj_frob_label): New.
        * config/tc-alpha.c (alpha_define_label): Call dwarf2_emit_label.
        * config/tc-arm.c, config/tc-hppa.c, config/tc-m68k.c,
        config/tc-mips.c, config/tc-ppc.c, config/tc-sh.c, config/tc-xtensa.c:
        Similarly in the respective tc_frob_label implementation functions.
        * config/tc-i386.c (md_pseudo_table): Move file and loc to
        non-elf section; add loc_mark_labels.
        * config/tc-ia64.c (struct label_fix): Add dw2_mark_labels.
        (ia64_flush_insns): Check for marked labels; emit line entry if so.
        (emit_one_bundle): Similarly.
        (ia64_frob_label): Record marked labels.
        * config/tc-m68hc11.h (tc_frob_label): Remove.
        * config/tc-ms1.c (md_pseudo_table): Remove file and loc.
        * config/tc-sh.h (tc_frob_label): Pass sym to sh_frob_label.
        * config/tc-sh64.h (tc_frob_label): Likewise.
        * doc/as.texinfo (LNS directives): Docuement .loc_mark_blocks.
@
text
@d6086 3
d6199 4
@


1.128
log
@* doc/as.texinfo: Document -mdsp and -mno-dsp options.
* doc/c-mips.texi: Likewise, and document ".set dsp" and ".set nodsp"
directives.
@
text
@d4106 9
@


1.127
log
@        * dwarf2dbg.c (dwarf2_where): Set line->isa.
        (dwarf2_set_isa): New.
        (dwarf2_directive_loc): Rearrange to allow all options on one line.
        * dwarf2dbg.h (dwarf2_set_isa): Declare.
        * doc/as.texinfo: Update .loc documentation.

        * gas/lns/lns-common-1.d: Don't match header or special opcode numbers.
        * gas/lns/lns-common-1.s: Update for syntax change.
        * gas/lns/lns-diag-1.[sl]: Likewise.
@
text
@d371 1
d1005 6
@


1.126
log
@        * dwarf2dbg.c: Include safe-ctype.h.
        (DWARF2_LINE_OPCODE_BASE): Bump to 13.
        (current): Initialize.
        (dwarf2_emit_insn): Clear DWARF2_FLAG_BASIC_BLOCK,
        DWARF2_FLAG_PROLOGUE_END, DWARF2_FLAG_EPILOGUE_BEGIN.
        (dwarf2_directive_file): Cope with invalid filename.
        (dwarf2_directive_loc): Add handling for basic_block, prologue_end,
        epilogue_begin, is_stmt, isa.
        (emit_inc_line_addr): Move line_delta == 0, addr_delta == 0 special
        case down lower.
        (process_entries): Handle isa, DWARF2_FLAG_PROLOGUE_END,
        and DWARF2_FLAG_EPILOGUE_BEGIN.
        (out_debug_line): Emit sizes for DW_LNS_set_prologue_end,
        DW_LNS_set_epilogue_begin, DW_LNS_set_isa.
        * dwarf2dbg.h (DWARF2_FLAG_IS_STMT): Rename from DWARF2_FLAG_BEGIN_STMT.        (DWARF2_FLAG_BASIC_BLOCK): Rename from DWARF2_FLAG_BEGIN_BLOCK.
        (DWARF2_FLAG_PROLOGUE_END, DWARF2_FLAG_EPILOGUE_BEGIN): New.
        (struct dwarf2_line_info): Add isa member.
        * doc/as.texinfo (LNS directives): New node.
@
text
@d4068 1
a4068 1
@@section @@code{.loc @@var{fileno} @@var{lineno} [@@var{column}]}
d4076 5
a4080 2
@@section @@code{.loc basic_block}
This directive will set the @@code{basic_block} register in the
d4083 2
a4084 2
@@section @@code{.loc prologue_end}
This directive will set the @@code{prologue_end} register in the
d4087 2
a4088 2
@@section @@code{.loc epilogue_begin}
This directive will set the @@code{epilogue_begin} register in the
d4091 2
a4092 2
@@section @@code{.loc is_stmt @@var{value}}
This directive will set the @@code{epilogue_begin} register in the
d4096 1
a4096 1
@@section @@code{.loc isa @@var{value}}
d4099 1
@


1.125
log
@* config/tc-mips.c (mips_set_options): Add ase_mt for MT instructions.
(mips_opts): Add -1 to initialize ase_mt.
(file_ase_mt): New variable for -mmt.
(CPU_HAS_MT): New define.
(validate_mips_insn): Add supports for +t, +T, !, $, *, &, g operand
formats.
(mips_ip): Check ase_mt to enable MT instructions.
Handle !, $, *, &, +T, +t, g operand formats.
For "mftc1", "mfthc1", "cftc1", "mttc1", "mtthc1", "cttc1", we allow
odd float registers.
(OPTION_MT, OPTION_NO_MT): New define.
(OPTION_COMPAT_ARCH_BASE): Change because of inserting MT define.
(md_parse_option): Parse OPTION_MT and OPTION_NO_MT.
(mips_after_parse_args): Set ase_mt based on CPU.
(s_mipsset): Handle ".set mt" and ".set nomt".
(mips_elf_final_processing): Remind of adding new flag for MT ASE.
(md_show_usage): Show usage of -mmt and -mno-mt.
* doc/as.texinfo: Document -mmt and -mno-mt options.
* doc/c-mips.texi: Likewise, and document ".set mt" and ".set nomt"
directives.
@
text
@a3747 1
* Ln::                          @@code{.ln @@var{line-number}}
d3750 4
d4055 42
@


1.124
log
@	* README-vms: Delete.
	* config-gas.com: Delete.
	* makefile.vms: Delete.
	* vmsconf.sh: Delete.
	* config/atof-tahoe.c: Delete.
	* config/m88k-opcode.h: Delete.
	* config/obj-bout.c: Delete.
	* config/obj-bout.h: Delete.
	* config/obj-hp300.c: Delete.
	* config/obj-hp300.h: Delete.
	* config/tc-a29k.c: Delete.
	* config/tc-a29k.h: Delete.
	* config/tc-h8500.c: Delete.
	* config/tc-h8500.h: Delete.
	* config/tc-m88k.c: Delete.
	* config/tc-m88k.h: Delete.
	* config/tc-tahoe.c: Delete.
	* config/tc-tahoe.h: Delete.
	* config/tc-tic80.c: Delete.
	* config/tc-tic80.h: Delete.
	* config/tc-w65.c: Delete.
	* config/tc-w65.h: Delete.
	* config/te-aux.h: Delete.
	* config/te-delt88.h: Delete.
	* config/te-delta.h: Delete.
	* config/te-dpx2.h: Delete.
	* config/te-hp300.h: Delete.
	* config/te-ic960.h: Delete.
	* config/vms-a-conf.h: Delete.
	* doc/c-a29k.texi: Delete.
	* doc/c-h8500.texi: Delete.
	* doc/c-m88k.texi: Delete.
	* README: Remove obsolete examples, and list of supported targets.
	* Makefile.am: Remove a29k, h8500, m88k, tahoe, tic80, w65,
	bout and hp300 support.
	(DEP_FLAGS): Don't define BFD_ASSEMBLER.
	* configure.in: Remove --enable-bfd-assembler, need_bfd,
	primary_bfd_gas.
	* configure.tgt: Remove a29k, h8300-coff, h8500-*, i960 non-elf,
	m68k non bfd, m88k, or32-coff, tic80-*, vax non-bfd, w65k-*, *-nindy.
	* as.c: Remove all non-BFD_ASSEMBLER code, support for above targets.
	* as.h: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.c: Likewise.
	* ehopt.c: Likewise.
	* input-file.c: Likewise.
	* listing.c: Likewise.
	* literal.c: Likewise.
	* messages.c: Likewise.
	* obj.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* stabs.c: Likewise.
	* struc-symbol.h: Likewise.
	* subsegs.c: Likewise.
	* subsegs.h: Likewise.
	* symbols.c: Likewise.
	* symbols.h: Likewise.
	* tc.h: Likewise.
	* write.c: Likewise.
	* write.h: Likewise.
	* config/aout_gnu.h: Likewise.
	* config/obj-aout.c: Likewise.
	* config/obj-aout.h: Likewise.
	* config/obj-coff.c: Likewise.
	* config/obj-coff.h: Likewise.
	* config/obj-evax.h: Likewise.
	* config/obj-ieee.h: Likewise.
	* config/tc-arm.c: Likewise.
	* config/tc-arm.h: Likewise.
	* config/tc-avr.c: Likewise.
	* config/tc-avr.h: Likewise.
	* config/tc-crx.h: Likewise.
	* config/tc-d10v.h: Likewise.
	* config/tc-d30v.h: Likewise.
	* config/tc-dlx.h: Likewise.
	* config/tc-fr30.h: Likewise.
	* config/tc-frv.h: Likewise.
	* config/tc-h8300.c: Likewise.
	* config/tc-h8300.h: Likewise.
	* config/tc-hppa.h: Likewise.
	* config/tc-i370.h: Likewise.
	* config/tc-i386.c: Likewise.
	* config/tc-i386.h: Likewise.
	* config/tc-i860.h: Likewise.
	* config/tc-i960.c: Likewise.
	* config/tc-i960.h: Likewise.
	* config/tc-ip2k.h: Likewise.
	* config/tc-iq2000.h: Likewise.
	* config/tc-m32c.h: Likewise.
	* config/tc-m32r.h: Likewise.
	* config/tc-m68hc11.h: Likewise.
	* config/tc-m68k.c: Likewise.
	* config/tc-m68k.h: Likewise.
	* config/tc-maxq.c: Likewise.
	* config/tc-maxq.h: Likewise.
	* config/tc-mcore.c: Likewise.
	* config/tc-mcore.h: Likewise.
	* config/tc-mn10200.h: Likewise.
	* config/tc-mn10300.c: Likewise.
	* config/tc-mn10300.h: Likewise.
	* config/tc-ms1.h: Likewise.
	* config/tc-msp430.c: Likewise.
	* config/tc-msp430.h: Likewise.
	* config/tc-ns32k.c: Likewise.
	* config/tc-ns32k.h: Likewise.
	* config/tc-openrisc.h: Likewise.
	* config/tc-or32.c: Likewise.
	* config/tc-or32.h: Likewise.
	* config/tc-ppc.c: Likewise.
	* config/tc-ppc.h: Likewise.
	* config/tc-s390.h: Likewise.
	* config/tc-sh.c: Likewise.
	* config/tc-sh.h: Likewise.
	* config/tc-sparc.c: Likewise.
	* config/tc-tic30.c: Likewise.
	* config/tc-tic30.h: Likewise.
	* config/tc-tic4x.c: Likewise.
	* config/tc-tic4x.h: Likewise.
	* config/tc-tic54x.c: Likewise.
	* config/tc-tic54x.h: Likewise.
	* config/tc-v850.h: Likewise.
	* config/tc-vax.c: Likewise.
	* config/tc-vax.h: Likewise.
	* config/tc-xstormy16.h: Likewise.
	* config/tc-xtensa.h: Likewise.
	* config/tc-z8k.c: Likewise.
	* config/tc-z8k.h: Likewise.
	* config/vms-a-conf.h
	* doc/Makefile.am: Likewise.
	* doc/all.texi: Likewise.
	* doc/as.texinfo: Likewise.
	* doc/Makefile.in: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* config.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d371 1
d1004 6
@


1.123
log
@ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* configure.in: Add cases for Renesas m32c.
	* configure: Regenerated.

bfd/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for m32c-*-elf (Renesas m32c and m16c).
	* Makefile.am (ALL_MACHINES): Add cpu-m32c.lo.
	(ALL_MACHINES_CFILES): Add cpu-m32c.c.
	(BFD32_BACKENDS): Add elf32-m32c.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-m32c.c.
	(cpu-m32c.lo, elf32-m32c.lo): New rules, generated by 'make dep-am'.
	* Makefile.in: Regenerated.
	* archures.c (bfd_arch_m32c, bfd_mach_m16c, bfd_mach_m32c): New
	arch and mach codes.
	(bfd_m32c_arch): New arch info object.
	(bfd_archures_list): List bfd_m32c_arch.
	* bfd-in2.h: Regenerated.
	* config.bfd: Add case for the m32c.
	* configure.in: Add case for the m32c.
	* configure: Regenerated.
	* cpu-m32c.c, elf32-m32c.c: New files.
	* libbfd.h: Regenerated.
	* targets.c (bfd_elf32_m32c_vec): Declare.
	(_bfd_target_vector): List bfd_elf32_m32c_vec.

binutils/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* readelf.c: #include "elf/m32c.h"
	(guess_is_rela, dump_relocations, get_machine_name): Add cases for
	EM_M32C.
	* Makefile.am (readelf.o): Update dependencies.
	* Makefile.in: Regenerated.

cpu/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* m32c.cpu, m32c.opc: Machine description for the Renesas M32C.

gas/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C.
	* Makefile.am (CPU_TYPES): List m32c.
	(TARGET_CPU_CFILES): List config/tc-m32c.c.
	(TARGET_CPU_HFILES): List config/tc-m32c.h.
	* configure.in: Add case for m32c.
	* configure.tgt: Add cases for m32c and m32c-*-elf.
	* configure: Regenerated.
	* config/tc-m32c.c, config/tc-m32c.h: New files.
	* doc/Makefile.am (CPU_DOCS): Add c-m32c.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set M32C.
	* doc/as.texinfo: Add text for the M32C-specific options and line
	comment characters, and refer to c-m32c.texi.
	* doc/c-m32c.texi: New file.

include/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* dis-asm.h (print_insn_m32c): New declaration.

include/elf/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for Renesas M32C and M16C.
	* common.h (EM_M32C): New machine number.
	* m32c.h: New file.

ld/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* Makefile.am (ALL_EMULATIONS): Add eelf32m32c.o.
	(eelf32m32c.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for m32c-*-elf.
	* emulparams/elf32m32c.sh: New file.

opcodes/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c: New.
	* m32c-desc.h, m32c-opc.h: New.
	* Makefile.am (HFILES): List m32c-desc.h and m32c-opc.h.
	(CFILES): List m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c,
	m32c-opc.c.
	(ALL_MACHINES): List m32c-asm.lo, m32c-desc.lo, m32c-dis.lo,
	m32c-ibld.lo, m32c-opc.lo.
	(CLEANFILES): List stamp-m32c.
	(M32C_DEPS): List stamp-m32c, if CGEN_MAINT.
	(CGEN_CPUS): Add m32c.
	(m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c)
	(m32c-desc.h, m32c-opc.h): Depend on M32C_DEPS.
	(m32c_opc_h): New variable.
	(stamp-m32c, m32c-asm.lo, m32c-desc.lo, m32c-dis.lo, m32c-ibld.lo)
	(m32c-opc.lo): New rules.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_m32c_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_m32c): New.
	[ARCH_m32c]: #include "m32c-desc.h".
	(disassembler) [ARCH_m32c]: Add case for bfd_arch_m32c.
	(disassemble_init_for_target) [ARCH_m32c]: Same.

	* cgen-ops.h, cgen-types.h: New files.
	* Makefile.am (HFILES): List them.
	* Makefile.in: Regenerated.
@
text
@a47 3
@@ifset H8/500
@@set H8
@@end ifset
a238 3
@@ifset A29K
@@c am29k has no machine-dependent assembler options
@@end ifset
a1173 4
@@ifset H8/500
For information on the H8/500 machine instruction set, see @@cite{H8/500
Series Programming Manual} (Renesas M21T001).
@@end ifset
a1262 4
@@ifset A29K
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
@@code{a.out} or COFF format object files.
@@end ifset
a1428 8
@@ifclear GENERIC
@@ifclear A29K
(@@pxref{Line,,@@code{.line}})
@@end ifclear
@@ifset A29K
(@@pxref{Ln,,@@code{.ln}})
@@end ifset
@@end ifclear
a2067 3
@@ifset A29K
@@samp{;} for the AMD 29K family;
@@end ifset
a2076 3
@@ifset H8/500
@@samp{!} for the H8/500 family;
@@end ifset
a2115 3
@@ifset M880X0
@@samp{;} on the M880x0;
@@end ifset
a2207 6
@@ifset A29K
A @@dfn{statement} ends at a newline character (@@samp{\n}) or an ``at''
sign (@@samp{@@@@}).  The newline or at sign is considered part of the
preceding statement.  Newlines and at signs within character constants
are an exception: they do not end statements.
@@end ifset
d2216 1
a2216 3
H8/300) a dollar sign (@@samp{$}); or (for the
Renesas-SH or the
H8/500) a semicolon
a2434 3
@@ifset A29K
(or at sign @@samp{@@@@})
@@end ifset
d2437 1
a2437 1
Renesas SH or H8/500)
d2540 1
a2540 2
On the H8/300, H8/500,
Renesas / SuperH SH,
a2552 3
@@ifset A29K
One of the letters @@samp{DFPRSX} (in upper or lower case).
@@end ifset
d2673 1
a2673 2
For the H8/300 and H8/500,
and for the Renesas / SuperH SH,
d2965 1
a2965 1
On the H8/300 and H8/500 platforms, each subsection is zero-padded to a word
a2976 4
@@ifset A29K
On the AMD 29K family, no particular padding is added to section or
subsection sizes; @@value{AS} forces no alignment on this platform.
@@end ifset
a3121 5
@@ifset A29K
For the AMD 29K family, @@samp{?} is also allowed in the
body of a symbol name, though not at its beginning.
@@end ifset

d3125 1
a3125 1
Renesas SH or the H8/500, you can also use @@code{$} in symbol names.  That
a3246 5
@@ifset no-space-dir
@@ifset A29K
@@samp{.block 4}.
@@end ifset
@@end ifset
d3879 1
a3879 1
For the a29k, arc, hppa, i386 using ELF, i860, iq2000, m68k, m88k, or32,
a4270 4
@@ifset A29K
In some configurations of @@command{@@value{AS}}, @@code{.file} has already been
removed to avoid conflicts with other assemblers.  @@xref{Machine Dependencies}.
@@end ifset
d4526 1
a4526 1
On the H8/500 and most forms of the H8/300, @@code{.int} emits 16-bit
a4661 6
@@ifset GENERIC
@@ifset A29K
@@emph{Warning:} In the AMD29K configuration of @@value{AS}, this command is
not available; use the synonym @@code{.ln} in that context.
@@end ifset
@@end ifset
a5556 15
@@ifset A29K
@@ifclear GENERIC
@@node Space
@@section @@code{.space}
@@cindex @@code{space} directive
@@end ifclear
On the AMD 29K, this directive is ignored; it is accepted for
compatibility with other AMD 29K assemblers.

@@quotation
@@emph{Warning:} In most versions of the @@sc{gnu} assembler, the directive
@@code{.space} has the effect of @@code{.block}  @@xref{Machine Dependencies}.
@@end quotation
@@end ifset

a6004 3
@@ifset A29K
* AMD29K-Dependent::            AMD 29K Dependent Features
@@end ifset
a6025 3
@@ifset H8/500
* H8/500-Dependent::            Renesas H8/500 Dependent Features
@@end ifset
a6058 3
@@ifset M880X0
* M88K-Dependent::		M880x0 Dependent Features
@@end ifset
a6111 4
@@ifset A29K
@@include c-a29k.texi
@@end ifset

a6139 1
* H8/500-Dependent::            Renesas H8/500 Dependent Features
a6157 4
@@ifset H8/500
@@include c-h8500.texi
@@end ifset

a6201 4
@@ifset M880X0
@@include c-m88k.texi
@@end ifset

d6511 2
a6512 2
Support for the Zilog Z8k and Renesas H8/300 and H8/500 processors (tc-z8k,
tc-h8300, tc-h8500), and IEEE 695 object file format (obj-ieee), was written by
@


1.122
log
@gas/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* macro.c (new_formal, del_formal): New.
	(do_formals): Use new_formal. Check for and parse qualifier. Warn if
	required argument has default value. Stop looking for more formal
	when there was a vararg one.
	(macro_expand_body): Use new_formal and del_formal.
	(macro_expand): Likewise. Initialize local variable err. Don't
	return immediately when encountering an error. Warn when keyword
	argument already had a value assigned. Eliminate duplicate clearing
	of argument value. When current positional argument matches parameter
	of vararg type, assign to it all the remaining arguments. Issue error
	when required parameter does not have value.
	(free_macro): Use del_formal.
	(expand_irp): Initialize formal type. Free buffers associated with
	formal prior to returning.
	* macro.h (struct formal_struct): Add new field 'type' with new
	enumeration type 'formal_type'.
	* doc/as.texinfo: Document macro parameter qualifiers.
	* NEWS: Mention new functionality.

gas/testsuite/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* gas/macros/badarg.s: Add check for bad qualifier specification.
	* gas/macros/badarg.l: Adjust.
	* gas/macros/vararg.[sd]: New.
	* gas/macros/macros.exp: Run new test.
@
text
@d329 5
d720 15
d2132 3
d6139 3
d6290 4
@


1.121
log
@gas/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* cond.c (s_ifb): New.
	* read.c (potable): Add s_ifb as handler for .ifb and .ifnb.
	* read.h (s_ifb): Prototype.
	* doc/as.texinfo: Document .ifb and .ifnb.

gas/testsuite/
2005-05-06  Jan Beulich  <jbeulich@@novell.com>

	* gas/all/cond.s: Also test .ifb/.ifnb.
	* gas/all/cond.d: Adjust.
@
text
@d4869 4
a4872 1
separated by commas or spaces.  You can supply a default value for any
d4899 6
@


1.120
log
@* hash.c (DEFAULT_SIZE): Delete.  Replace with:
  (gas_hash_table_size): New static variable.
  (set_gas_hash_table_size): New function:  Records a requested size for the hash tables.
  (get_gas_hash_table_size): New function: Return a prime number near the requested size of the hash table.
  (hash_new): Use get_gas_hash_table_size.
* hash.h: Add a prototype for set_gas_hash_table_size.
* as.c (show_usage): Add description of new switches: --hash-size and --reduce-memory-overheads.
  (option_values): Add OPTION_HASH_TABLE_SIZE and OPTION_REDUCE_MEMORY_OVERHEADS.
  (std_longpopts): Add entries for the new options.
  (parse_args): Handle the new options.
* Makefile.am: Add a dependency of as.c on hash.h.
* Makefile.in: Regenerate.
* doc/as.texinfo: Document the new switches.
* NEWS: Mention the new switches.
@
text
@d4459 4
d4497 5
@


1.119
log
@gas/
2005-04-11  Jan Beulich  <jbeulich@@novell.com>

	* NEWS: Mention these changes and their effects.
	* macro.c (get_token): Use is_name_beginner/is_part_of_name/
	is_name_ender.
	(check_macro): Likewise.
	(buffer_and_nest): Likewise. Permit multiple labels. Don't discard
	labels together with the closing pseudo-op.
	(macro_expand_body): Adjust comment. Range-check input before use.
	Adjust mis-spelled diagnostic. Use is_name_beginner.
	* read.c (try_macro): New.
	(read_a_source_file): New static variable last_eol. Don't list
	macro expansion lines more than once. Call try_macro.
	(s_macro): Set section of line_label to absolute instead of undefined.
	* doc/as.texinfo: Add information on the caveats of these changes.

gas/testsuite/
2005-04-11  Jan Beulich  <jbeulich@@novell.com>

	* gas/macros/dot.[ls]: New.
	* gas/macros/macros.exp: Run new test.
@
text
@d230 9
a238 8
 [@@b{--defsym} @@var{sym}=@@var{val}] [@@b{-f}] [@@b{-g}] [@@b{--gstabs}] [@@b{--gstabs+}]
 [@@b{--gdwarf-2}] [@@b{--help}] [@@b{-I} @@var{dir}] [@@b{-J}] [@@b{-K}] [@@b{-L}]
 [@@b{--listing-lhs-width}=@@var{NUM}] [@@b{--listing-lhs-width2}=@@var{NUM}]
 [@@b{--listing-rhs-width}=@@var{NUM}] [@@b{--listing-cont-lines}=@@var{NUM}]
 [@@b{--keep-locals}] [@@b{-o} @@var{objfile}] [@@b{-R}] [@@b{--statistics}] [@@b{-v}]
 [@@b{-version}] [@@b{--version}] [@@b{-W}] [@@b{--warn}] [@@b{--fatal-warnings}] 
 [@@b{-w}] [@@b{-x}] [@@b{-Z}] [@@b{--target-help}] [@@var{target-options}] 
 [@@b{--}|@@var{files} @@dots{}]
d558 12
@


1.118
log
@gas/

2005-03-28  David Mosberger  <davidm@@hpl.hp.com>
	    H.J. Lu  <hongjiu.lu@@intel.com>

	PR 803
	NEWS: Mention "-mtune=[itanium1|itanium2]".

	* config/tc-ia64.c (md): Add tune.
	(md_parse_option): Accepted "-mtune=[itanium1|itanium2]".
	(md_show_usage): Add "-mtune=[itanium1|itanium2]".
	(extra_goodness): Prefer M- and I-unit NOPs for itanium2. F and
	B unit NOPs are discouraged for McKinley-derived cores.
	(md_begin): Don't hardcode the "extra_goodness()" function in
	the comment...
	(ia64_init): Set md.tune to itanium2.

	* doc/as.texinfo: Add -mtune=[itanium1|itanium2]".
	* doc/c-ia64.texi: Likewise.

gas/testsuite/

2005-03-28  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 803
	* gas/ia64/dv-imply.d: Pass -mtune=itanium1 to as.
	* gas/ia64/dv-mutex.d : Likewise.
	* gas/ia64/dv-safe.d: Likewise.
	* gas/ia64/dv-srlz.d.nop: Likewise.
	* gas/ia64/ldxmov-1.d: Likewise.
	* gas/ia64/opc-b.d: Likewise.
	* gas/ia64/opc-f.d: Likewise.
	* gas/ia64/opc-i.d: Likewise.
	* gas/ia64/opc-m.d: Likewise.
	* gas/ia64/operand-or.d: Likewise.
	* gas/ia64/pcrel.d: Likewise.
	* gas/ia64/pseudo.d: Likewise.
	* gas/ia64/tls.d: Likewise.

ld/testsuite/

2005-03-28  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 803
	* ld-ia64/ia64.exp: Pass -mtune=itanium1 to as.
@
text
@d4597 3
d4628 3
d4878 26
@


1.117
log
@gas/
2004-03-08  Jan Beulich  <jbeulich@@novell.com>

	* doc/as.texinfo: Add sentence to indicate redefining a macro is an
	error, and point to .purgem documentation if someone really needs
	re-definitions.
	* NEWS: Mention macro redefinition is now an error.
@
text
@d318 1
@


1.116
log
@update copyright dates
@
text
@d4841 4
a4844 2
macro argument by following the name with @@samp{=@@var{deflt}}.  For
example, these are all valid @@code{.macro} statements:
@


1.115
log
@gas/

2005-02-17  H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Mention "-mhint.b=[ok|warning|error]".

	* config/tc-ia64.c (md): Add hint_b.
	(emit_one_bundle): Handle md.hint_b for "hint".
	(md_parse_option): Accepted "-mhint.b=[ok|warning|error]".
	(md_show_usage): Add "-mhint.b=[ok|warning|error]".
	(ia64_init): Set md.hint_b to error.
	(md_assemble): Handle md.hint_b for "hint.b".

	* doc/as.texinfo: Add "-mhint.b=[ok|warning|error]".
	* doc/c-ia64.texi: Likewise.

gas/testsuite/

2005-02-17  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/ia64/hint.b-err.l: New file.
	* gas/ia64/hint.b-err.s: Likewise.
	* gas/ia64/hint.b-warn.l: Likewise.
	* gas/ia64/hint.b-warn.s: Likewise.

	* gas/ia64/ia64.exp: Run hint.b-err and hint.b-warn.

	* gas/ia64/opc-b.d: Pass -mhint.b=ok to as.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004
@


1.114
log
@gas/

2005-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Mention "-munwind-check=[warning|error]".

	* config/tc-ia64.c (md): Add unwind_check.
	(unwind_diagnostic): New.
	(in_procedure): Call unwind_diagnostic when a directive isn't
	in procedure.
	(in_prologue): Call unwind_diagnostic when a directive isn't in
	prologue.
	(in_body): Call unwind_diagnostic when a directive isn't in
	body region.
	(dot_endp): Set md.unwind_check to error before calling
	in_procedure and restore it after. When the name is missing or
	couldn't be found, use the one from the last .proc if
	md.unwind_check isn't error. Warn if md.unwind_check is
	warning.
	(md_parse_option): Handle "-munwind-check=[warning|error]".
	(md_show_usage): Add "-munwind-check=[warning|error]".
	(ia64_init): Set md.unwind_check to warning.

	* doc/as.texinfo: Add "-munwind-check=[none|warning|error]".
	* doc/c-ia64.texi: Likewise.

gas/testcase

2005-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/ia64/ia64.exp: Pass -munwind-check=error for unwind-err
	and proc.
@
text
@d319 1
@


1.113
log
@2005-02-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* doc/all.texi: Add IA64.
	* doc/as.texinfo: Likewise.

	* doc/c-ia64.texi: Fix typos.
@
text
@d318 1
@


1.112
log
@	* read.c (potable): Add "error" and "warning".
	(s_errwarn): New function.
	* read.h (s_errwarn): Declare.
	* doc/as.texinfo (Error, Warning): Document .error and .warning.
@
text
@d6042 3
@


1.111
log
@Fix support for PECOFF weak symbols
@
text
@d3729 1
d3846 1
d4245 13
d5883 6
@


1.110
log
@	* config/tc-xtensa.c: Remove XTENSA_SECTION_RENAME ifdefs.
	(add_section_rename): Delete.  Inlined into...
	(build_section_rename): ...here.  Use xstrdup instead of strdup.
	(xtensa_section_rename): Drop "const" from argument and return types.
	(md_show_usage): Indent to match show_usage().
	* config/tc-xtensa.h: Remove XTENSA_SECTION_RENAME ifdefs.
	(tc_canonicalize_section_name): Define.
	(md_elf_section_rename): Remove unused macro.
	* doc/as.texinfo (Overview): Document Xtensa --rename-section option.
	* doc/c-xtensa.texi (Xtensa Options): Likewise.
	(Frame Directive): Delete.
@
text
@d5875 2
a5876 2
Weak symbols are supported in COFF as a GNU extension.  This directive
sets the weak attribute on the comma separated list of symbol
d5879 3
a5881 14
@@smallexample
@@code{.weak @@var{name} [ < = | == > @@var{alternate}] [, ...]}
@@end smallexample

On the PE target, weak aliases are supported natively.  Weak aliases
(usually called "weak externals" in PE) are created when an alternate
name is specified.  When a weak symbol is linked and the symbol is not
defined, the weak symbol becomes an alias for the alternate symbol.  If
one equal sign is used, the linker searches for defined symbols within
other objects and libraries.  This is the usual mode, historically
called "lazy externals."  Otherwise, when two equal signs are used,
the linker searches for defined symbols only within other objects.

Non-alias weak symbols are supported on PE as a GNU extension.
@


1.109
log
@./
	* configure.in (arm-*-oabi*, thumb-*-oabi*): Remove.
	* configure: Regenerated.
bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace
	elfarm-nabi with elf32-arm.  Remove elfarm-oabi.
	(elf32-arm.lo): Replace elfarm-nabi.lo rule.  Remove elf32-arm.h
	dependency.
	* config.bfd: Move arm-*-oabi* and thumb-*-oabi* from obsolete list
	to a new removed list.  Remove normal configuration stanzas.
	* configure.in: (bfd_elf32_bigarm_vec, bfd_elf32_bigarm_symbian_vec)
	(bfd_elf32_littlearm_symbian_vec, bfd_elf32_littlearm_vec): Replace
	elfarm-nabi.lo with elf32-arm.lo.
	(bfd_elf32_bigarm_oabi_vec, bfd_elf32_littlearm_oabi_vec): Remove.
	* elf32-arm.c: Renamed from elfarm-nabi.c.  Inline elf32-arm.h.
	* elf32-arm.h: Remove.
	* elfarm-oabi.c: Remove.
	* targets.c (_bfd_target_vector): Remove bfd_elf32_bigarm_oabi_vec
	and bfd_elf32_littlearm_oabi_vec.
	* aclocal.m4, Makefile.in, configure, doc/Makefile.in: Regenerated.
gas/
	* configure.in: Remove arm-*-oabi and thumb-*-oabi.
	* config/tc-arm.c (target_oabi): Delete.
	(md_apply_fix3, elf32_arm_target_format): Remove target_oabi checks.
	(arm_opts): Remove moabi.
	* doc/as.texinfo (Overview): Remove documentation of -moabi.
	* doc/c-arm.texi (ARM Options): Likewise.
	* configure: Regenerated.
ld/
	* Makefile.am (ALL_EMULATIONS): Remove earmelf_oabi.o.
	(earmelf_oabi.c): Remove rule.
	* configure.tgt: Remove arm-*-oabi and thumb-*-oabi.
	* emulparams/armelf_oabi.sh, emultempl/armelf_oabi.em: Delete files.
	* Makefile.in: Regenerated.
@
text
@d427 1
@


1.108
log
@	* configure.in (crisv32): Recognize.  AC_DEFINE_UNQUOTED
	DEFAULT_CRIS_ARCH.  Handle crisv32-*-linux-gnu* like
	cris-*-linux-gnu* and crisv32-*-* like cris-*-*.
	* configure: Regenerate.
	* config/tc-cris.c (enum cris_archs): New.
	(cris_mach, cris_arch_from_string, s_cris_arch, get_sup_reg)
	(cris_insn_ver_valid_for_arch): New functions.
	(DEFAULT_CRIS_ARCH): New macro, default to cris_any_v0_v10.
	(cris_arch): New variable.
	(md_pseudo_table): New pseudo .arch.
	(err_for_dangerous_mul_placement): Initialize according to
	DEFAULT_CRIS_ARCH.
	(STATE_COND_BRANCH): Renamed from STATE_CONDITIONAL_BRANCH.
	All users changed.
	(STATE_COND_BRANCH_V32, STATE_COND_BRANCH_COMMON)
	(STATE_ABS_BRANCH_V32, STATE_LAPC, BRANCH_BF_V32, BRANCH_BB_V32)
	(BRANCH_WF_V32, BRANCH_WB_V32): New.
	(BRANCH_BF, BRANCH_BB, BRANCH_WF, BRANCH_WB): Don't undef after
	use in md_cris_relax_table.
	(md_cris_relax_table): Add entries for STATE_COND_BRANCH_V32,
	STATE_COND_BRANCH_COMMON, STATE_ABS_BRANCH_V32, STATE_LAPC.
	Update and improve head comment.
	(OPTION_PIC): Define in terms of previous option, OPTION_US.
	(OPTION_MULBUG_ABORT_ON, OPTION_MULBUG_ABORT_OFF): Similar.
	(OPTION_ARCH): New.
	(md_longopts): New option --march=...
	(cris_any_v0_v10_long_jump_size, crisv32_long_jump_size): New
	macros.
	(md_long_jump_size): Initialize in terms of DEFAULT_CRIS_ARCH.
	(HANDLE_RELAXABLE): New macro.
	(md_estimate_size_before_relax): Use HANDLE_RELAXABLE for common
	cases.  Check for weak symbols and assume not relaxable.  Handle
	STATE_COND_BRANCH_V32, STATE_COND_BRANCH_COMMON,
	STATE_ABS_BRANCH_V32, STATE_LAPC.  Use new variable symbolP, not
	fragP->fr_symbol.
	(md_convert_frag): Handle STATE_COND_BRANCH_V32,
	STATE_COND_BRANCH_COMMON, STATE_ABS_BRANCH_V32, STATE_LAPC.
	(cris_create_short_jump): Adjust for CRISv32.
	(md_create_long_jump): Ditto.  Emit error for common_v10_v32.
	(md_begin): Define symbols "..asm.arch.cris.v32",
	"..asm.arch.cris.v10", "..asm.arch.cris.common_v10_v32" and
	"..asm.arch.cris.any_v0_v10".  Use cris_insn_ver_valid_for_arch
	when entering opcode table entry points.
	(md_assemble): Adjust branch handling for CRISv32.  Handle LAPC
	relaxation.  In fix_new_exp call for main insn, pass 1 for pcrel
	parameter for 8, 16 and 32-bit pc-relative insns and LAPC.
	(cris_process_instruction): Initialize out_insnp->insn_type to
	CRIS_INSN_NONE, not CRIS_INSN_NORMAL.
	<case ']', '[', 'A', 'd', 'Q', 'N', 'n', 'Y', 'U', 'u', 'T'>: New
	cases.
	<case 'm'>: Check that modified_char == '.'.
	<invalid operands>: Consume the rest of the line.
	When operands don't match, skip over subsequent insns with
	non-matching version specifier but same mnemonic.
	<immediate constant, case SIZE_SPEC_REG>: Immediate operands for
	special registers in CRISv32 are always 32 bit long.
	<immediate constant, case SIZE_FIELD_SIGNED, SIZE_FIELD_UNSIGNED>:
	New cases.
	(get_gen_reg): Only recognize "PC" when followed by "+]" for v32
	and compatible.  Recognize "ACR" for v32, unless followed by "+".
	(get_spec_reg): Consider cris_arch when looking up register.
	(get_autoinc_prefix_or_indir_op): Don't recognize assignment for
	v32 or compatible.
	(get_3op_or_dip_prefix_op): Check for ']' after seeing '[rN+'.
	(cris_get_expression): Restore input_line_pointer if failing "early".
	(get_flags): Consider cris_arch and recognize flags accordingly.
	(branch_disp): Adjust for CRISv32.
	(gen_cond_branch_32): Similar.  Emit error for common_v10_v32.
	(cris_number_to_imm): Use as_bad_where, not as_bad.  Remove
	related FIXME.  Don't insist on BFD_RELOC_32_PCREL fixup to be
	resolved.  Don't enter zeros in object file for
	BFD_RELOC_32_PCREL.
	<case BFD_RELOC_CRIS_LAPCQ_OFFSET, BFD_RELOC_CRIS_SIGNED_16>
	<case BFD_RELOC_CRIS_SIGNED_8>: New case.
	(md_parse_option): Break out "return 1".
	<OPTION_ARCH> New case.
	(tc_gen_reloc): <case BFD_RELOC_CRIS_LAPCQ_OFFSET>
	<case BFD_RELOC_CRIS_SIGNED_16, BFD_RELOC_CRIS_SIGNED_8>
	<case BFD_RELOC_CRIS_UNSIGNED_8, BFD_RELOC_CRIS_UNSIGNED_16>
	<case BFD_RELOC_32_PCREL>: New cases.
	Addends for non-zero fx_pcrel are too in fx_offset.
	(md_show_usage): Show --march=<arch>.
	(md_apply_fix3): Adjust val for BFD_RELOC_CRIS_LAPCQ_OFFSET.
	(md_pcrel_from): BFD_RELOC_CRIS_LAPCQ_OFFSET is PC-relative too.
	(s_syntax) <struct syntaxes>: Properly constify member operand.
	* config/tc-cris.h (TARGET_MACH): Define.
	(cris_mach): Declare.
	* doc/as.texinfo (Overview) <CRIS>: Add --march=...
	* doc/c-cris.texi (CRIS-Symbols): New node for built-in symbols.
	(CRIS-Opts): Document --march=...
	(CRIS-Pseudos): Document .arch.
@
text
@d271 1
a271 1
   [@@b{-mthumb-interwork}] [@@b{-moabi}] [@@b{-k}]
d618 1
a618 1
@@item -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant | -moabi
@


1.107
log
@        * doc/as.texinfo (VTableEntry, VTableInherit): Add "directive" to index
        entries.
        (Acknowledgements): Use "GAS" instead of AS variable.
@
text
@d279 1
@


1.106
log
@bfd ChangeLog

	* elf32-xtensa.c (elf32xtensa_size_opt): New global variable.
	(xtensa_default_isa): Global variable moved here from xtensa-isa.c.
	(elf32xtensa_no_literal_movement): New global variable.
	(elf_howto_table): Add entries for new relocations.
	(elf_xtensa_reloc_type_lookup): Handle new relocations.
	(property_table_compare): When addresses are equal, compare sizes and
	various property flags.
	(property_table_matches): New.
	(xtensa_read_table_entries): Extend to read new property tables.  Add
	output_addr parameter to indicate that output addresses should be used.
	Use bfd_get_section_limit.
	(elf_xtensa_find_property_entry): New.
	(elf_xtensa_in_literal_pool): Use elf_xtensa_find_property_entry.
	(elf_xtensa_check_relocs): Handle new relocations.
	(elf_xtensa_do_reloc): Use bfd_get_section_limit.  Handle new
	relocations.  Use new xtensa-isa.h functions.
	(build_encoding_error_message): Remove encode_result parameter.  Add
	new target_address parameter used to detect alignment errors.
	(elf_xtensa_relocate_section): Use bfd_get_section_limit.  Clean up
	error handling.  Use new is_operand_relocation function.
	(elf_xtensa_combine_prop_entries, elf_xtensa_merge_private_bfd_data):
	Use underbar macro for error messages.  Formatting.
	(get_const16_opcode): New.
	(get_l32r_opcode): Add a separate flag for initialization.
	(get_relocation_opnd): Operand number is no longer explicit in the
	relocation.  Change to decode the opcode and analyze its operands.
	(get_relocation_slot): New.
	(get_relocation_opcode): Add bfd parameter.  Use bfd_get_section_limit.
	Use new xtensa-isa.h functions to handle multislot instructions.
	(is_l32r_relocation): Add bfd parameter.  Use is_operand_relocation.
	(get_asm_simplify_size, is_alt_relocation, is_operand_relocation,
	insn_decode_len, insn_decode_opcode, check_branch_target_aligned,
	check_loop_aligned, check_branch_target_aligned_address, narrowable,
	widenable, narrow_instruction, widen_instruction, op_single_fmt_table,
	get_single_format, init_op_single_format_table): New.
	(elf_xtensa_do_asm_simplify): Add error_message parameter and use it
	instead of calling _bfd_error_handler.  Use new xtensa-isa.h functions.
	(contract_asm_expansion): Add error_message parameter and pass it to
	elf_xtensa_do_asm_simplify.  Replace use of R_XTENSA_OP0 relocation
	with R_XTENSA_SLOT0_OP.
	(get_expanded_call_opcode): Extend to handle either L32R or CONST16
	instructions.  Use new xtensa-isa.h functions.
	(r_reloc struct): Add new virtual_offset field.
	(r_reloc_init): Add contents and content_length parameters.  Set
	virtual_offset field to zero.  Add contents to target_offset field for
	partial_inplace relocations.
	(r_reloc_is_defined): Check for null.
	(print_r_reloc): New debug function.
	(source_reloc struct): Replace xtensa_operand field with pair of the
	opcode and the operand position.  Add is_abs_literal field.
	(init_source_reloc): Specify operand by opcode/position pair.  Set
	is_abs_literal field.
	(source_reloc_compare): When target_offsets are equal, compare other
	fields to make sorting predictable.
	(literal_value struct): Add is_abs_literal field.
	(value_map_hash_table struct): Add has_last_loc and last_loc fields.
	(init_literal_value): New.
	(is_same_value): Replace with ...
	(literal_value_equal): ... this function.  Add comparisons of
	virtual_offset and is_abs_literal fields.
	(value_map_hash_table_init): Use bfd_zmalloc.  Check for allocation
	failure.  Initialize has_last_loc field.
	(value_map_hash_table_delete): New.
	(hash_literal_value): Rename to ...
	(literal_value_hash): ... this.  Include is_abs_literal flag and
	virtual_offset field in the hash value.
	(get_cached_value): Rename to ...
	(value_map_get_cached_value): ... this.  Update calls to
	literal_value_hash and literal_value_equal.
	(add_value_map): Check for allocation failure.  Update calls to
	value_map_get_cached_value and literal_value_hash.
	(text_action, text_action_list, text_action_t): New types.
	(find_fill_action, compute_removed_action_diff, adjust_fill_action,
	text_action_add, text_action_add_literal, offset_with_removed_text,
	offset_with_removed_text_before_fill, find_insn_action,
	print_action_list, print_removed_literals): New.
	(offset_with_removed_literals): Delete.
	(xtensa_relax_info struct): Add is_relaxable_asm_section, action_list,
	fix_array, fix_array_count, allocated_relocs, relocs_count, and
	allocated_relocs_count fields.
	(init_xtensa_relax_info): Initialize new fields.
	(reloc_bfd_fix struct): Add new translated field.
	(reloc_bfd_fix_init): Add translated parameter and use it to set the
	translated field.
	(fix_compare, cache_fix_array): New.
	(get_bfd_fix): Remove fix_list parameter and get all relax_info for the
	section via get_xtensa_relax_info.  Use cache_fix_array to set up
	sorted fix_array and use bsearch instead of linear search.
	(section_cache_t): New struct.
	(init_section_cache, section_cache_section, clear_section_cache): New.
	(ebb_t, ebb_target_enum, proposed_action, ebb_constraint): New types.
	(init_ebb_constraint, free_ebb_constraint, init_ebb, extend_ebb_bounds,
	extend_ebb_bounds_forward, extend_ebb_bounds_backward,
	insn_block_decodable_len, ebb_propose_action, ebb_add_proposed_action):
	New.
	(retrieve_contents): Use bfd_get_section_limit.
	(elf_xtensa_relax_section): Add relocations_analyzed flag.  Update call
	to compute_removed_literals.  Free value_map_hash_table when no longer
	needed.
	(analyze_relocations): Check is_relaxable_asm_section flag.  Call
	compute_text_actions for all sections.
	(find_relaxable_sections): Mark sections as relaxable if they contain
	ASM_EXPAND relocations that can be optimized.  Adjust r_reloc_init
	call.  Increment relax_info src_count field only for appropriate
	relocation types.  Remove is_literal_section check.
	(collect_source_relocs): Use bfd_get_section_limit.  Adjust calls to
	r_reloc_init and find_associated_l32r_irel.  Check
	is_relaxable_asm_section flag.  Handle L32R instructions with absolute
	literals.  Pass is_abs_literal flag to init_source_reloc.
	(is_resolvable_asm_expansion): Use bfd_get_section_limit.  Check for
	CONST16 instructions.  Adjust calls to r_reloc_init and
	pcrel_reloc_fits.  Handle weak symbols conservatively.
	(find_associated_l32r_irel): Add bfd parameter and pass it to
	is_l32r_relocation.
	(compute_text_actions, compute_ebb_proposed_actions,
	compute_ebb_actions, check_section_ebb_pcrels_fit,
	check_section_ebb_reduces, text_action_add_proposed,
	compute_fill_extra_space): New.
	(remove_literals): Replace with ...
	(compute_removed_literals): ... this function.  Call
	init_section_cache.  Use bfd_get_section_limit.  Sort internal_relocs.
	Call xtensa_read_table_entries to get the property table.  Skip
	relocations other than R_XTENSA_32 and R_XTENSA_PLT.  Use new
	is_removable_literal, remove_dead_literal, and
	identify_literal_placement functions.
	(get_irel_at_offset): Rewrite to use bsearch on sorted relocations
	instead of linear search.
	(is_removable_literal, remove_dead_literal,
	identify_literal_placement): New.
	(relocations_reach): Update check for literal not referenced by any
	PC-relative relocations.  Adjust call to pcrel_reloc_fits.
	(coalesce_shared_literal, move_shared_literal): New.
	(relax_section): Use bfd_get_section_limit.  Call
	translate_section_fixes.  Update calls to r_reloc_init and
	offset_with_removed_text.  Check new is_relaxable_asm_section flag.
	Add call to pin_internal_relocs.  Add special handling for
	R_XTENSA_ASM_SIMPLIFY and R_XTENSA_DIFF* relocs.  Use virtual_offset
	info to calculate new addend_displacement variable.  Replace code for
	deleting literals with more general code to perform the actions
	determined by the action_list for the section.
	(translate_section_fixes, translate_reloc_bfd_fix): New.
	(translate_reloc): Check new is_relaxable_asm_section flag.  Call
	find_removed_literal only if is_operand_relocation.  Update call to
	offset_with_removed_text.  Use new target_offset and removed_bytes
	variables.
	(move_literal): New.
	(relax_property_section):  Use bfd_get_section_limit.  Set new
	is_full_prop_section flag and handle new property tables.  Update calls
	to r_reloc_init and offset_with_removed_text.  Check
	is_relaxable_asm_section flag.  Handle expansion of zero-sized
	unreachable entries, with use of offset_with_removed_text_before_fill.
	For relocatable links, combine entries only for literal tables.
	(relax_section_symbols): Check is_relaxable_asm_section flag.  Update
	calls to offset_with_removed_text.  Translate st_size field for
	function symbols.
	(do_fix_for_relocatable_link): Change to return bfd_boolean to indicate
	failure.  Add contents parameter.  Update call to get_bfd_fix.  Update
	call to r_reloc_init.  Call _bfd_error_handler and return FALSE for
	R_XTENSA_ASM_EXPAND relocs.
	(do_fix_for_final_link): Add input_bfd and contents parameters.  Update
	call to get_bfd_fix.  Include offset from contents for partial_inplace
	relocations.
	(is_reloc_sym_weak): New.
	(pcrel_reloc_fits): Use new xtensa-isa.h functions.
	(prop_sec_len): New.
	(xtensa_is_property_section): Handle new property sections.
	(is_literal_section): Delete.
	(internal_reloc_compare): When r_offset matches, compare r_info and
	r_addend to make sorting predictable.
	(internal_reloc_matches): New.
	(xtensa_get_property_section_name): Handle new property sections.
	(xtensa_get_property_predef_flags): New.
	(xtensa_callback_required_dependence): Use bfd_get_section_limit.
	Update calls to xtensa_isa_init, is_l32r_relocation, and r_reloc_init.
	* xtensa-isa.c (xtensa_default_isa): Moved to elf32-xtensa.c.
	(xtisa_errno, xtisa_error_msg): New variables.
	(xtensa_isa_errno, xtensa_isa_error_msg): New.
	(xtensa_insnbuf_alloc): Add error handling.
	(xtensa_insnbuf_to_chars): Add num_chars parameter.  Update to
	use xtensa_format_decode.  Add error handling.
	(xtensa_insnbuf_from_chars): Add num_chars parameter.  Decode the
	instruction length to find the number of bytes to copy.
	(xtensa_isa_init): Add error handling.  Replace calls to
	xtensa_load_isa and xtensa_extend_isa with code to initialize lookup
	tables in the xtensa_modules structure.
	(xtensa_check_isa_config, xtensa_add_isa, xtensa_load_isa,
	xtensa_extend_isa): Delete.
	(xtensa_isa_free): Change to only free lookup tables.
	(opname_lookup_compare): Replace with ...
	(xtensa_isa_name_compare): ... this function.  Use strcasecmp.
	(xtensa_insn_maxlength): Rename to ...
	(xtensa_isa_maxlength): ... this.
	(xtensa_insn_length): Delete.
	(xtensa_insn_length_from_first_byte): Replace with ...
	(xtensa_isa_length_from_chars): ... this function.
	(xtensa_num_opcodes): Rename to ...
	(xtensa_isa_num_opcodes): ... this.
	(xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_regfiles, xtensa_isa_num_stages,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot): New functions.
	(xtensa_opcode_lookup): Add error handling.
	(xtensa_decode_insn): Replace with ...
	(xtensa_opcode_decode): ... this function, with new format and
	slot parameters.  Add error handling.
	(xtensa_encode_insn): Replace with ...
	(xtensa_opcode_encode): ... this function, which does the encoding via
	one of the entries in the "encode_fns" array.  Add error handling.
	(xtensa_opcode_name): Add error handling.
	(xtensa_opcode_is_branch, xtensa_opcode_is_jump, xtensa_opcode_is_loop,
	xtensa_opcode_is_call): New.
	(xtensa_num_operands): Replace with ...
	(xtensa_opcode_num_operands): ... this function.  Add error handling.
	(xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible): New.
	(xtensa_get_operand, xtensa_operand_kind): Delete.
	(xtensa_operand_inout): Add error handling and special-case for
	"sout" operands.
	(xtensa_operand_get_field, xtensa_operand_set_field): Rewritten to
	operate on one slot of an instruction.  Added error handling.
	(xtensa_operand_encode): Handle default operands with no encoding
	functions.  Check for success by comparing against decoded value.
	Add error handling.
	(xtensa_operand_decode): Handle default operands.  Return decoded value
	through argument pointer.  Add error handling.
	(xtensa_operand_is_register, xtensa_operand_regfile,
	xtensa_operand_num_regs, xtensa_operand_is_known_reg): New.
	(xtensa_operand_isPCRelative): Rename to ...
	(xtensa_operand_is_PCrelative): ... this.  Add error handling.
	(xtensa_operand_do_reloc, xtensa_operand_undo_reloc): Return value
	through argument pointer.  Add error handling.
	(xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New.
	* xtensa-modules.c: Rewrite to use new data structures.
	* reloc.c (BFD_RELOC_XTENSA_DIFF8, BFD_RELOC_XTENSA_DIFF16,
	BFD_RELOC_XTENSA_DIFF32, BFD_RELOC_XTENSA_SLOT0_OP,
	BFD_RELOC_XTENSA_SLOT1_OP, BFD_RELOC_XTENSA_SLOT2_OP,
	BFD_RELOC_XTENSA_SLOT3_OP, BFD_RELOC_XTENSA_SLOT4_OP,
	BFD_RELOC_XTENSA_SLOT5_OP, BFD_RELOC_XTENSA_SLOT6_OP,
	BFD_RELOC_XTENSA_SLOT7_OP, BFD_RELOC_XTENSA_SLOT8_OP,
	BFD_RELOC_XTENSA_SLOT9_OP, BFD_RELOC_XTENSA_SLOT10_OP,
	BFD_RELOC_XTENSA_SLOT11_OP, BFD_RELOC_XTENSA_SLOT12_OP,
	BFD_RELOC_XTENSA_SLOT13_OP, BFD_RELOC_XTENSA_SLOT14_OP,
	BFD_RELOC_XTENSA_SLOT0_ALT, BFD_RELOC_XTENSA_SLOT1_ALT,
	BFD_RELOC_XTENSA_SLOT2_ALT, BFD_RELOC_XTENSA_SLOT3_ALT,
	BFD_RELOC_XTENSA_SLOT4_ALT, BFD_RELOC_XTENSA_SLOT5_ALT,
	BFD_RELOC_XTENSA_SLOT6_ALT, BFD_RELOC_XTENSA_SLOT7_ALT,
	BFD_RELOC_XTENSA_SLOT8_ALT, BFD_RELOC_XTENSA_SLOT9_ALT,
	BFD_RELOC_XTENSA_SLOT10_ALT, BFD_RELOC_XTENSA_SLOT11_ALT,
	BFD_RELOC_XTENSA_SLOT12_ALT, BFD_RELOC_XTENSA_SLOT13_ALT,
	BFD_RELOC_XTENSA_SLOT14_ALT): Add new relocations.
	* Makefile.am (xtensa-isa.lo, xtensa-modules.lo): Update dependencies.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Likewise.
	* libbfd.h: Likewise.

gas ChangeLog

	* config/tc-xtensa.c (absolute_literals_supported): New global flag.
	(UNREACHABLE_MAX_WIDTH): Define.
	(XTENSA_FETCH_WIDTH): Delete.
	(cur_vinsn, xtensa_fetch_width, xt_saved_debug_type, past_xtensa_end,
	prefer_const16, prefer_l32r): New global variables.
	(LIT4_SECTION_NAME): Define.
	(lit4_state struct): Add lit4_seg_name and lit4_seg fields.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.
	(frag_flags struct): New.
	(xtensa_block_info struct): Move from tc-xtensa.h.  Add flags field.
	(subseg_map struct): Add cur_total_freq and cur_target_freq fields.
	(bitfield, bit_is_set, set_bit, clear_bit): Define.
	(MAX_FORMATS): Define.
	(op_placement_info struct, op_placement_table): New.
	(O_pltrel, O_hi16, O_lo16): Define.
	(directiveE enum): Rename directive_generics to directive_transform.
	Delete directive_relax.  Add directive_schedule,
	directive_absolute_literals, and directive_last_directive.
	(directive_info): Rename "generics" to "transform".  Delete "relax".
	Add "schedule" and "absolute-literals".
	(directive_state): Adjust entries to match changes in directive_info.
	(xtensa_relax_statesE, RELAX_IMMED_MAXSTEPS): Move to tc-xtensa.h.
	(xtensa_const16_opcode, xtensa_movi_opcode, xtensa_movi_n_opcode,
	xtensa_l32r_opcode, xtensa_nop_opcode, xtensa_rsr_lcount_opcode): New.
	(xtensa_j_opcode, xtensa_rsr_opcode): Delete.
	(align_only_targets, software_a0_b_retw_interlock,
	software_avoid_b_j_loop_end, maybe_has_b_j_loop_end,
	software_avoid_short_loop, software_avoid_close_loop_end,
	software_avoid_all_short_loops, specific_opcode): Delete.
	(warn_unaligned_branch_targets): New.
	(workaround_a0_b_retw, workaround_b_j_loop_end, workaround_short_loop,
	workaround_close_loop_end, workaround_all_short_loops): Default FALSE.
	(option_[no_]link_relax, option_[no_]transform,
	option_[no_]absolute_literals, option_warn_unaligned_targets,
	option_prefer_l32r, option_prefer_const16, option_target_hardware):
	New enum values.
	(option_[no_]align_only_targets, option_literal_section_name,
	option_text_section_name, option_data_section_name,
	option_bss_section_name, option_eb, option_el): Delete.
	(md_longopts): Add entries for: [no-]transform, [no-]absolute-literals,
	warn-unaligned-targets, prefer-l32r, prefer-const16, [no-]link-relax,
	and target-hardware.  Delete entries for [no-]target-align-only,
	literal-section-name, text-section-name, data-section-name, and
	bss-section-name.
	(md_parse_option): Handle new options and remove old ones.  Accept but
	ignore [no-]density options.  Warn for [no-]generics and [no-]relax
	and treat them as [no-]transform.
	(md_show_usage): Add new options and remove old ones.
	(xtensa_setup_hw_workarounds): New.
	(md_pseudo_table): Change "word" entry to use xtensa_elf_cons.  Add
	"long", "short", "loc" and "frequency" entries.
	(use_generics): Rename to ...
	(use_transform): ... this function.  Add past_xtensa_end check.
	(use_longcalls): Add past_xtensa_end check.
	(code_density_available, can_relax): Delete.
	(do_align_targets): New.
	(get_directive): Accept dashes in directive names.  Warn about
	[no-]generics and [no-]relax directives and treat them as
	[no-]transform.
	(xtensa_begin_directive): Call md_flush_pending_output only for some
	directives.  Check for directives inside instruction bundles.  Warn
	about deprecated ".begin literal" usage.  Warn and ignore [no-]density
	directives.  Handle new directives.  Check generating_literals flag
	for literal_prefix.
	(xtensa_end_directive): Check for directives inside instruction
	bundles.  Warn and ignore [no-]density directives.  Handle new
	directives.  Call xtensa_set_frag_assembly_state.
	(xtensa_loc_directive_seen, xtensa_dwarf2_directive_loc,
	xtensa_dwarf2_emit_insn): New.
	(xtensa_literal_position): Call md_flush_pending_output.  Do not check
	use_literal_section flag.
	(xtensa_literal_pseudo): Call md_flush_pending_output.  Handle absolute
	literals.  Use xtensa_elf_cons to parse the expression.
	(xtensa_literal_prefix): Do not check use_literal_section.  Support
	".lit4" sections for absolute literals.  Change prefix convention to
	replace ".text" (or ".t" in a linkonce section).  No need to call
	subseg_set.
	(xtensa_frequency_pseudo, xtensa_elf_cons, xtensa_elf_suffix): New.
	(expression_end): Handle closing braces and colons.
	(PLT_SUFFIX, plt_suffix): Delete.
	(expression_maybe_register): Use new xtensa-isa.h functions.  Use
	xtensa_elf_suffix instead of checking for plt suffix, and handle O_lo16
	and O_hi16 expressions as well.
	(tokenize_arguments): Handle closing braces and colons.
	(parse_arguments): Use new xtensa-isa.h functions.  Handle "invisible"
	operands and paired register syntax.
	(get_invisible_operands): New.
	(xg_translate_sysreg_op): Handle new Xtensa LX RSR/WSR/XSR syntax.  Use
	new xtensa-isa.h functions.
	(xtensa_translate_old_userreg_ops, xtensa_translate_zero_immed): New.
	(xg_translate_idioms): Check if inside bundle.  Use use_transform.
	Handle new Xtensa LX RSR/WSR/XSR syntax.  Remove code to widen density
	instructions.  Use xtensa_translate_zero_immed.
	(operand_is_immed, operand_is_pcrel_label): Delete.
	(get_relaxable_immed): Use new xtensa-isa.h functions.
	(get_opcode_from_buf): Add slot parameter.  Use new xtensa-isa.h
	functions.
	(xtensa_print_insn_table, print_vliw_insn): New.
	(is_direct_call_opcode): Use new xtensa-isa.h functions.
	(is_call_opcode, is_loop_opcode, is_conditional_branch_opcode,
	is_branch_or_jump_opcode): Delete.
	(is_movi_opcode, decode_reloc, encode_reloc, encode_alt_reloc): New.
	(opnum_to_reloc, reloc_to_opnum): Delete.
	(xtensa_insnbuf_set_operand, xtensa_insnbuf_get_operand): Use new
	xtensa-isa.h functions.  Operate on one slot of an instruction.
	(xtensa_insnbuf_set_immediate_field, is_negatable_branch,
	xg_get_insn_size): Delete.
	(xg_get_build_instr_size): Use xg_get_single_size.
	(xg_is_narrow_insn, xg_is_single_relaxable_insn): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_get_max_narrow_insn_size): Delete.
	(xg_get_max_insn_widen_size, xg_get_max_insn_widen_literal_size,
	xg_is_relaxable_insn): Update calls to xg_build_widen_table.  Use
	xg_get_single_size.
	(xg_build_to_insn): Record the loc field.  Handle OP_OPERAND_HI16U and
	OP_OPERAND_LOW16U.  Check xg_valid_literal_expression.
	(xg_expand_to_stack, xg_expand_narrow): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_immeds_fit): Use new xtensa-isa.h functions.  Update call to
	xg_check_operand.
	(xg_symbolic_immeds_fit): Likewise.  Also handle O_lo16 and O_hi16, and
	treat weak symbols conservatively.
	(xg_check_operand): Use new xtensa-isa.h functions.
	(is_dnrange): Delete.
	(xg_assembly_relax): Inline previous calls to tinsn_copy.
	(xg_finish_frag): Specify separate relax states for the frag and slot0.
	(is_branch_jmp_to_next, xg_add_branch_and_loop_targets): Use new
	xtensa-isa.h functions.
	(xg_instruction_matches_option_term, xg_instruction_matches_or_options,
	xg_instruction_matches_options): New.
	(xg_instruction_matches_rule): Handle O_register expressions.  Call
	xg_instruction_matches_options.
	(transition_rule_cmp): New.
	(xg_instruction_match): Update call to xg_build_simplify_table.
	(xg_build_token_insn): Record loc fields.
	(xg_simplify_insn): Check is_specific_opcode field and
	density_supported flag.
	(xg_expand_assembly_insn): Skip checking code_density_available.  Use
	new xtensa-isa.h functions.  Call use_transform instead of can_relax.
	(xg_assemble_literal): Add error handling for O_big.  Call
	record_alignment.  Handle O_pltrel.
	(xg_valid_literal_expression): New.
	(xg_assemble_literal_space): Add slot parameter.  Remove call to
	set_expr_symbol_offset.  Add call to record_alignment.  Update call to
	xg_finish_frag.
	(xg_emit_insn): Delete.
	(xg_emit_insn_to_buf): Add format parameter.  Update calls to
	xg_add_opcode_fix and xtensa_insnbuf_to_chars.
	(xg_add_opcode_fix): Change opcode parameter to tinsn and add format
	and slot parameters.  Handle new "alternate" relocations for absolute
	literals and CONST16 instructions.  Check for bad uses of O_lo16 and
	O_hi16.  Use new xtensa-isa.h functions.
	(xg_assemble_tokens): Delete.
	(is_register_writer): Use new xtensa-isa.h functions.
	(is_bad_loopend_opcode): Check for xtensa_rsr_lcount_opcode instead of
	old-style RSR from LCOUNT.
	(next_frag_opcode): Delete.
	(next_frag_opcode_is_loop, next_frag_format_size, frag_format_size,
	update_next_frag_state): New.
	(update_next_frag_nop_state): Delete.
	(next_frag_pre_opcode_bytes): Use next_frag_opcode_is_loop.
	(xtensa_mark_literal_pool_location): Check use_literal_section flag and
	the state of the absolute-literals directive.  Add calls to
	record_alignment and xtensa_set_frag_assembly_state.  Call
	xtensa_switch_to_non_abs_literal_fragment instead of
	xtensa_switch_to_literal_fragment.
	(build_nop): New.
	(assemble_nop): Use build_nop.  Update call to xtensa_insnbuf_to_chars.
	(get_expanded_loop_offset): Change check for undefined opcode to an
	assertion.
	(xtensa_set_frag_assembly_state, relaxable_section,
	xtensa_find_unmarked_state_frags, xtensa_find_unaligned_branch_targets,
	xtensa_find_unaligned_loops, xg_apply_tentative_value): New.
	(md_begin): Update call to xtensa_isa_init.  Initialize linkrelax to 1.
	Set lit4_seg_name.  Call xg_init_vinsn.  Initialize new global opcodes.
	Call init_op_placement_info_table and xtensa_set_frag_assembly_state.
	(xtensa_init_fix_data): New.
	(xtensa_frob_label): Reset label symbol to the current frag.  Check
	do_align_targets and generating_literals flag.  Propagate frequency
	info to new alignment frag.  Call xtensa_set_frag_assembly_state.
	(xtensa_unrecognized_line): New.
	(xtensa_flush_pending_output): Check if inside a bundle.  Add a call
	to xtensa_set_frag_assembly_state.
	(error_reset_cur_vinsn): New.
	(md_assemble): Remove check for literal frag.  Remove call to
	istack_init.  Call use_transform instead of use_generics.  Parse
	explicit instruction format specifiers.  Move code for
	a0_b_retw_interlock workaround to xg_assemble_vliw_tokens.  Call
	error_reset_cur_vinsn on errors.  Add call to get_invisible_operands.
	Add dwarf2_where call.  Remote automatic alignment for ENTRY
	instructions.  Move call to xtensa_clear_insn_labels to the end.
	Rearrange to handle bundles.
	(xtensa_cons_fix_new): Delete.
	(xtensa_handle_align): New.
	(xtensa_frag_init): Call xtensa_set_frag_assembly_state.  Remove
	assignment to is_no_density field.
	(md_pcrel_from): Use new xtensa-isa.h functions.  Use decode_reloc
	instead of reloc_to_opnum.  Handle "alternate" relocations.
	(xtensa_force_relocation, xtensa_check_inside_bundle,
	xtensa_elf_section_change_hook): New.
	(xtensa_symbol_new_hook): Delete.
	(xtensa_fix_adjustable): Check for difference of symbols with an
	offset.  Check for external and weak symbols.
	(md_apply_fix3): Remove cases for XTENSA_OP{0,1,2} relocs.
	(md_estimate_size_before_relax): Return expansion for the first slot.
	(tc_gen_reloc): Handle difference of symbols by producing
	XTENSA_DIFF{8,16,32} relocs and by writing the value of the difference
	into the output.  Handle new XTENSA_SLOT*_OP relocs by storing the
	tentative values into the output when linkrelax is set.
	(XTENSA_PROP_SEC_NAME): Define.
	(xtensa_post_relax_hook): Call xtensa_find_unmarked_state_frags.
	Create literal tables only if using literal sections.  Create new
	property tables instead of old instruction tables.  Check for unaligned
	branch targets and loops.
	(finish_vinsn, find_vinsn_conflicts, check_t1_t2_reads_and_writes,
	new_resource_table, clear_resource_table, resize_resource_table,
	resources_available, reserve_resources, release_resources,
	opcode_funcUnit_use_unit, opcode_funcUnit_use_stage,
	resources_conflict, xg_find_narrowest_format, relaxation_requirements,
	bundle_single_op, emit_single_op, xg_assemble_vliw_tokens): New.
	(xtensa_end): Call xtensa_flush_pending_output.  Set past_xtensa_end
	flag.  Update checks for workaround options.  Call
	xtensa_mark_narrow_branches and xtensa_mark_zcl_first_insns.
	(xtensa_cleanup_align_frags): Add special case for branch targets.
	Check for and mark unreachable frags.
	(xtensa_fix_target_frags): Remove use of align_only_targets flag.
	Use RELAX_LOOP_END_BYTES in special case for negatable branch at the
	end of a zero-overhead loop body.
	(frag_can_negate_branch): Handle instructions with multiple slots.
	Use new xtensa-isa.h functions
	(xtensa_mark_narrow_branches, is_narrow_branch_guaranteed_in_range,
	xtensa_mark_zcl_first_insns): New.
	(xtensa_fix_a0_b_retw_frags, xtensa_fix_b_j_loop_end_frags): Error if
	transformations are disabled.
	(next_instrs_are_b_retw): Use new xtensa-isa.h functions.  Handle
	multislot instructions.
	(xtensa_fix_close_loop_end_frags, xtensa_fix_short_loop_frags):
	Likewise.  Also error if transformations are disabled.
	(unrelaxed_frag_max_size): New.
	(unrelaxed_frag_min_insn_count, unrelax_frag_has_b_j): Use new
	xtensa-isa.h functions.
	(xtensa_sanity_check, is_empty_loop, is_local_forward_loop): Use
	xtensa_opcode_is_loop instead of is_loop_opcode.
	(get_text_align_power): Replace as_fatal with assertion.
	(get_text_align_fill_size): Iterate instead of using modulus when
	use_nops is false.
	(get_noop_aligned_address): Assert that this is for a machine-dependent
	RELAX_ALIGN_NEXT_OPCODE frag.  Use next_frag_opcode_is_loop,
	xg_get_single_size, and frag_format_size.
	(get_widen_aligned_address): Rename to ...
	(get_aligned_diff): ... this function.  Add max_diff parameter.
	Remove handling of rs_align/rs_align_code frags.  Use
	next_frag_format_size, get_text_align_power, get_text_align_fill_size,
	next_frag_opcode_is_loop, and xg_get_single_size.  Compute max_diff
	and pass it back to caller.
	(xtensa_relax_frag): Use relax_frag_loop_align.  Add code for new
	RELAX_SLOTS, RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN,
	RELAX_FILL_NOP, and RELAX_UNREACHABLE frag types.  Check relax_seen.
	(relax_frag_text_align): Rename to ...
	(relax_frag_loop_align): ... this function.  Assume loops can only be
	in the first slot of an instruction.
	(relax_frag_add_nop): Use assemble_nop instead of constructing an OR
	instruction.  Remove call to frag_wane.
	(relax_frag_narrow): Rename to ...
	(relax_frag_for_align): ... this function.  Extend to handle
	RELAX_FILL_NOP and RELAX_UNREACHABLE, as well as RELAX_SLOTS with
	RELAX_NARROW for the first slot.
	(find_address_of_next_align_frag, bytes_to_stretch): New.
	(future_alignment_required): Use find_address_of_next_align_frag and
	bytes_to_stretch.  Look ahead to subsequent frags to make smarter
	alignment decisions.
	(relax_frag_immed): Add format, slot, and estimate_only parameters.
	Check if transformations are enabled for b_j_loop_end workaround.
	Use new xtensa-isa.h functions and handle multislot instructions.
	Update call to xg_assembly_relax.
	(md_convert_frag): Handle new RELAX_SLOTS, RELAX_UNREACHABLE,
	RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN, and RELAX_FILL_NOP
	frag types.
	(convert_frag_narrow): Add segP, format and slot parameters.  Call
	convert_frag_immed for branch instructions.  Adjust calls to
	tinsn_from_chars, tinsn_immed_from_frag, and xg_emit_insn_to_buf.  Use
	xg_get_single_size and xg_get_single_format.
	(convert_frag_fill_nop): New.
	(convert_frag_immed): Add format and slot parameters.  Handle multislot
	instructions and use new xtensa-isa.h functions.  Update calls to
	tinsn_immed_from_frag and xg_assembly_relax.  Check if transformations
	enabled for b_j_loop_end workaround.  Use build_nop instead of
	assemble_nop.  Check is_specific_opcode flag.  Check for unreachable
	frags.  Use xg_get_single_size.  Handle O_pltrel.
	(fix_new_exp_in_seg): Remove check for old plt flag.
	(convert_frag_immed_finish_loop): Update calls to tinsn_from_chars and
	xtensa_insnbuf_to_chars.  Call tinsn_immed_from_frag.  Change check
	for loop opcode to an assertion.  Mark all frags up to the end of the
	loop as not transformable.
	(get_last_insn_flags, set_last_insn_flags): Use get_subseg_info.
	(get_subseg_info): New.
	(xtensa_move_literals): Call xtensa_set_frag_assembly_state.  Add null
	check for dest_seg.
	(xtensa_switch_to_literal_fragment): Rewrite to handle absolute
	literals and use xtensa_switch_to_non_abs_literal_fragment otherwise.
	(xtensa_switch_to_non_abs_literal_fragment): New.
	(cache_literal_section): Add is_code parameter and pass it through to
	retrieve_literal_seg.
	(retrieve_literal_seg): Add is_code parameter and use it to set the
	flags on the literal section.  Handle case where head parameter is 0.
	(get_frag_is_no_transform, set_frag_is_specific_opcode,
	set_frag_is_no_transform): New.
	(xtensa_create_property_segments): Add end_property_function parameter
	and pass it through to add_xt_block_frags.  Call bfd_get_section_flags
	and skip SEC_DEBUGGING and !SEC_ALLOC sections.
	(xtensa_create_xproperty_segments, section_has_xproperty): New.
	(add_xt_block_frags): Add end_property_function parameter and call it
	if it is non-zero.  Call xtensa_frag_flags_init.
	(xtensa_frag_flags_is_empty, xtensa_frag_flags_init,
	get_frag_property_flags, frag_flags_to_number,
	xtensa_frag_flags_combinable, xt_block_aligned_size,
	xtensa_xt_block_combine, add_xt_prop_frags,
	init_op_placement_info_table, opcode_fits_format_slot,
	xg_get_single_size, xg_get_single_format): New.
	(istack_push): Inline call to tinsn_copy.
	(tinsn_copy): Delete.
	(tinsn_has_invalid_symbolic_operands): Handle O_hi16 and O_lo16 and
	CONST16 opcodes.  Handle O_big, O_illegal, and O_absent.
	(tinsn_has_complex_operands): Handle O_hi16 and O_lo16.
	(tinsn_to_insnbuf): Use xg_get_single_format and new xtensa-isa.h
	functions.  Handle invisible operands.
	(tinsn_to_slotbuf): New.
	(tinsn_check_arguments): Use new xtensa-isa.h functions.
	(tinsn_from_chars): Add slot parameter.  Rewrite using xg_init_vinsn,
	vinsn_from_chars, and xg_free_vinsn.
	(tinsn_from_insnbuf): New.
	(tinsn_immed_from_frag): Add slot parameter and handle multislot
	instructions.  Handle symbol differences.
	(get_num_stack_text_bytes): Use xg_get_single_size.
	(xg_init_vinsn, xg_clear_vinsn, vinsn_has_specific_opcodes,
	xg_free_vinsn, vinsn_to_insnbuf, vinsn_from_chars, expr_is_register,
	get_expr_register, set_expr_symbol_offset_diff): New.
	* config/tc-xtensa.h (MAX_SLOTS): Define.
	(xtensa_relax_statesE): Move from tc-xtensa.c. Add
	RELAX_CHECK_ALIGN_NEXT_OPCODE, RELAX_MAYBE_DESIRE_ALIGN, RELAX_SLOTS,
	RELAX_FILL_NOP, RELAX_UNREACHABLE, RELAX_MAYBE_UNREACHABLE, and
	RELAX_NONE types.
	(RELAX_IMMED_MAXSTEPS): Move from tc-xtensa.c.
	(xtensa_frag_type struct): Add is_assembly_state_set,
	use_absolute_literals, relax_seen, is_unreachable, is_specific_opcode,
	is_align, is_text_align, alignment, and is_first_loop_insn fields.
	Replace is_generics and is_relax fields by is_no_transform field.
	Delete is_text and is_longcalls fields.  Change text_expansion and
	literal_expansion to arrays of MAX_SLOTS entries.  Add arrays of
	per-slot information: literal_frags, slot_subtypes, slot_symbols,
	slot_sub_symbols, and slot_offsets.  Add fr_prev field.
	(xtensa_fix_data struct): New.
	(xtensa_symfield_type struct): Delete plt field.
	(xtensa_block_info struct): Move definition to tc-xtensa.h.  Add
	forward declaration here.
	(xt_section_type enum): Delete xt_insn_sec.  Add xt_prop_sec.
	(XTENSA_SECTION_RENAME): Undefine.
	(TC_FIX_TYPE, TC_INIT_FIX_DATA, TC_FORCE_RELOCATION, NO_PSEUDO_DOT,
	tc_unrecognized_line, md_do_align, md_elf_section_change_hook,
	HANDLE_ALIGN, TC_LINKRELAX_FIXUP, SUB_SEGMENT_ALIGN): Define.
	(TC_CONS_FIX_NEW, tc_symbol_new_hook): Delete.
	(unit_num_copies_func, opcode_num_units_func,
	opcode_funcUnit_use_unit_func, opcode_funcUnit_use_stage_func): New.
	(resource_table struct): New.
	* config/xtensa-istack.h (MAX_INSN_ARGS): Increase from 6 to 10.
	(TInsn struct): Add keep_wide, loc, fixup, record_fix, subtype,
	literal_space, symbol, sub_symbol, offset, and literal_frag fields.
	(tinsn_copy): Delete prototype.
	(vliw_insn struct): New.
	* config/xtensa-relax.c (insn_pattern_struct): Add options field.
	(widen_spec_list): Add option conditions for density and boolean
	instructions.  Add expansions using CONST16 and conditions for using
	CONST16 vs. L32R.  Use new Xtensa LX RSR/WSR syntax.  Add entries for
	predicted branches.
	(simplify_spec_list): Add option conditions for density instructions.
	Add entry for NOP instruction.
	(append_transition): Add cmp function pointer parameter and use it to
	insert the new entry in order.
	(operand_function_LOW16U, operand_function_HI16U): New.
	(xg_has_userdef_op_fn, xg_apply_userdef_op_fn): Handle
	OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(enter_opname, split_string): Use xstrdup instead of strdup.
	(init_insn_pattern): Initialize new options field.
	(clear_req_or_option_list, clear_req_option_list,
	clone_req_or_option_list, clone_req_option_list, parse_option_cond):
	New.
	(parse_insn_pattern): Parse option conditions.
	(transition_applies): New.
	(build_transition): Use new xtensa-isa.h functions.  Fix incorrectly
	swapped last arguments in calls to append_constant_value_condition.
	Call clone_req_option_list.  Add warning about invalid opcode.
	Handle LOW16U and HI16U function names.
	(build_transition_table): Add cmp parameter and use it in calls to
	append_transition.  Use new xtensa-isa.h functions.  Check
	transition_applies before adding entries.
	(xg_build_widen_table, xg_build_simplify_table): Add cmp parameter and
	pass it through to build_transition_table.
	* config/xtensa-relax.h (ReqOrOptionList, ReqOrOption, ReqOptionList,
	ReqOption, transition_cmp_fn): New types.
	(OpType enum): Add OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(transition_rule struct): Add options field.
	* doc/as.texinfo (Overview): Update Xtensa options.
	* doc/c-xtensa.texi (Xtensa Options): Delete --[no-]density,
	--[no-]relax, and --[no-]generics options.  Update descriptions of
	--text-section-literals and --[no-]longcalls.  Add
	--[no-]absolute-literals and --[no-]transform.
	(Xtensa Syntax): Add description of syntax for FLIX instructions.
	Remove use of "generic" and "specific" terminology for opcodes.
	(Xtensa Registers): Generalize the syntax description to include
	user-defined register files.
	(Xtensa Automatic Alignment): Update.
	(Xtensa Branch Relaxation): Mention limitation of unconditional jumps.
	(Xtensa Call Relaxation): Linker can now remove most of the overhead.
	(Xtensa Directives): Remove confusing rules about precedence.
	(Density Directive, Relax Directive): Delete.
	(Schedule Directive): New.
	(Generics Directive): Rename to ...
	(Transform Directive): ... this node.
	(Literal Directive): Update for absolute literals.  Missing
	literal_position directive is now an error.
	(Literal Position Directive): Update for absolute literals.
	(Freeregs Directive): Delete.
	(Absolute Literals Directive): New.
	(Frame Directive): Minor editing.
	* Makefile.am (DEPTC_xtensa_elf, DEPOBJ_xtensa_elf, DEP_xtensa_elf):
	Update dependencies.
	* Makefile.in: Regenerate.

gas/testsuite ChangeLog

	* gas/xtensa/all.exp: Adjust expected error message for j_too_far.
	Change entry_align test to expect an error.
	* gas/xtensa/entry_misalign2.s: Use no-transform instead of
	no-generics directives.

include ChangeLog

	* xtensa-config.h (XSHAL_USE_ABSOLUTE_LITERALS,
	XCHAL_HAVE_PREDICTED_BRANCHES, XCHAL_INST_FETCH_WIDTH): New.
	(XCHAL_EXTRA_SA_SIZE, XCHAL_EXTRA_SA_ALIGN): Delete.
	* xtensa-isa-internal.h (ISA_INTERFACE_VERSION): Delete.
	(config_sturct struct): Delete.
	(XTENSA_OPERAND_IS_REGISTER, XTENSA_OPERAND_IS_PCRELATIVE,
	XTENSA_OPERAND_IS_INVISIBLE, XTENSA_OPERAND_IS_UNKNOWN,
	XTENSA_OPCODE_IS_BRANCH, XTENSA_OPCODE_IS_JUMP,
	XTENSA_OPCODE_IS_LOOP, XTENSA_OPCODE_IS_CALL,
	XTENSA_STATE_IS_EXPORTED, XTENSA_INTERFACE_HAS_SIDE_EFFECT): Define.
	(xtensa_format_encode_fn, xtensa_get_slot_fn, xtensa_set_slot_fn): New.
	(xtensa_insn_decode_fn): Rename to ...
	(xtensa_opcode_decode_fn): ... this.
	(xtensa_immed_decode_fn, xtensa_immed_encode_fn, xtensa_do_reloc_fn,
	xtensa_undo_reloc_fn): Update.
	(xtensa_encoding_template_fn): Delete.
	(xtensa_opcode_encode_fn, xtensa_format_decode_fn,
	xtensa_length_decode_fn): New.
	(xtensa_format_internal, xtensa_slot_internal): New types.
	(xtensa_operand_internal): Delete operand_kind, inout, isPCRelative,
	get_field, and set_field fields.  Add name, field_id, regfile,
	num_regs, and flags fields.
	(xtensa_arg_internal): New type.
	(xtensa_iclass_internal): Change operands field to array of
	xtensa_arg_internal.  Add num_stateOperands, stateOperands,
	num_interfaceOperands, and interfaceOperands fields.
	(xtensa_opcode_internal): Delete length, template, and iclass fields.
	Add iclass_id, flags, encode_fns, num_funcUnit_uses, and funcUnit_uses.
	(opname_lookup_entry): Delete.
	(xtensa_regfile_internal, xtensa_interface_internal,
	xtensa_funcUnit_internal, xtensa_state_internal,
	xtensa_sysreg_internal, xtensa_lookup_entry): New.
	(xtensa_isa_internal): Replace opcode_table field with opcodes field.
	Change type of opname_lookup_table.  Delete num_modules,
	module_opcode_base, module_decode_fn, config, and has_density fields.
	Add num_formats, formats, format_decode_fn, length_decode_fn,
	num_slots, slots, num_fields, num_operands, operands, num_iclasses,
	iclasses, num_regfiles, regfiles, num_states, states,
	state_lookup_table, num_sysregs, sysregs, sysreg_lookup_table,
	max_sysreg_num, sysreg_table, num_interfaces, interfaces,
	interface_lookup_table, num_funcUnits, funcUnits and
	funcUnit_lookup_table fields.
	(xtensa_isa_module, xtensa_isa_modules): Delete.
	(xtensa_isa_name_compare): New prototype.
	(xtisa_errno, xtisa_error_msg): New.
	* xtensa-isa.h (XTENSA_ISA_VERSION): Define.
	(xtensa_isa): Change type.
	(xtensa_operand): Delete.
	(xtensa_format, xtensa_regfile, xtensa_state, xtensa_sysreg,
	xtensa_interface, xtensa_funcUnit, xtensa_isa_status,
	xtensa_funcUnit_use): New types.
	(libisa_module_specifier): Delete.
	(xtensa_isa_errno, xtensa_isa_error_msg): New prototypes.
	(xtensa_insnbuf_free, xtensa_insnbuf_to_chars,
	xtensa_insnbuf_from_chars): Update prototypes.
	(xtensa_load_isa, xtensa_extend_isa, xtensa_default_isa,
	xtensa_insn_maxlength, xtensa_num_opcodes, xtensa_decode_insn,
	xtensa_encode_insn, xtensa_insn_length,
	xtensa_insn_length_from_first_byte, xtensa_num_operands,
	xtensa_operand_kind, xtensa_encode_result,
	xtensa_operand_isPCRelative): Delete.
	(xtensa_isa_init, xtensa_operand_inout, xtensa_operand_get_field,
	xtensa_operand_set_field, xtensa_operand_encode,
	xtensa_operand_decode, xtensa_operand_do_reloc,
	xtensa_operand_undo_reloc): Update prototypes.
	(xtensa_isa_maxlength, xtensa_isa_length_from_chars,
	xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_opcodes, xtensa_isa_num_regfiles, xtensa_isa_num_states,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot, xtensa_opcode_decode,
	xtensa_opcode_encode, xtensa_opcode_is_branch, xtensa_opcode_is_jump,
	xtensa_opcode_is_loop, xtensa_opcode_is_call,
	xtensa_opcode_num_operands, xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible, xtensa_operand_is_register,
	xtensa_operand_regfile, xtensa_operand_num_regs,
	xtensa_operand_is_known_reg, xtensa_operand_is_PCrelative,
	xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New prototypes.
	* elf/xtensa.h (R_XTENSA_DIFF8, R_XTENSA_DIFF16, R_XTENSA_DIFF32,
	R_XTENSA_SLOT*_OP, R_XTENSA_SLOT*_ALT): New relocations.
	(XTENSA_PROP_SEC_NAME): Define.
	(property_table_entry): Add flags field.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.

ld ChangeLog

	* ld.texinfo (Xtensa): Describe new linker relaxation to optimize
	assembler-generated longcall sequences.  Describe new --size-opt
	option.
	* emulparams/elf32xtensa.sh (OTHER_SECTIONS): Add .xt.prop section.
	* emultempl/xtensaelf.em (remove_section,
	replace_insn_sec_with_prop_sec, replace_instruction_table_sections,
	elf_xtensa_after_open): New.
	(OPTION_OPT_SIZEOPT, OPTION_LITERAL_MOVEMENT,
	OPTION_NO_LITERAL_MOVEMENT): Define.
	(elf32xtensa_size_opt, elf32xtensa_no_literal_movement): New globals.
	(PARSE_AND_LIST_LONGOPTS): Add size-opt and [no-]literal-movement.
	(PARSE_AND_LIST_OPTIONS): Add --size-opt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_OPT_SIZEOPT,
	OPTION_LITERAL_MOVEMENT, and OPTION_NO_LITERAL_MOVEMENT.
	(LDEMUL_AFTER_OPEN): Set to elf_xtensa_after_open.
	* scripttempl/elfxtensa.sc: Update with changes from elf.sc.
	* Makefile.am (eelf32xtensa.c): Update dependencies.
	* Makefile.in: Regenerate.

ld/testsuite ChangeLog

	* ld-xtensa/lcall1.s: Use .literal directive.
	* ld-xtensa/lcall2.s: Align function entry.
	* ld-xtensa/coalesce2.s: Likewise.

opcodes ChangeLog

	* xtensa-dis.c (state_names): Delete.
	(fetch_data): Use xtensa_isa_maxlength.
	(print_xtensa_operand): Replace operand parameter with opcode/operand
	pair.  Remove print_sr_name parameter.  Use new xtensa-isa.h functions.
	(print_insn_xtensa): Use new xtensa-isa.h functions.  Handle multislot
	instruction bundles.  Use xmalloc instead of malloc.
@
text
@d5852 1
a5852 1
@@cindex @@code{vtable_entry}
d5859 1
a5859 1
@@cindex @@code{vtable_inherit}
d6464 1
a6464 1
If you have contributed to @@command{@@value{AS}} and your name isn't listed here,
d6525 1
a6525 1
Steve Chamberlain made @@command{@@value{AS}} able to generate listings.
@


1.105
log
@	* config/obj-elf.c (obj_elf_section_type): Handle init_array,
	fini_array and preinit_array section types.
	* config/tc-ia64.c (ia64_elf_section_type): Remove init_array
	and fini_array.
	* doc/as.texinfo: Document extra section types.
@
text
@d423 1
a423 2
 [@@b{--[no-]density}] [@@b{--[no-]relax}] [@@b{--[no-]generics}]
 [@@b{--[no-]text-section-literals}]
d425 1
a1063 17
@@item --density | --no-density
Enable or disable use of instructions from the Xtensa code density
option.  This is enabled by default when the Xtensa processor supports
the code density option.

@@item --relax | --no-relax
Enable or disable instruction relaxation.  This is enabled by default.
Note: In the current implementation, these options also control whether
assembler optimizations are performed, making these options equivalent
to @@option{--generics} and @@option{--no-generics}.

@@item --generics | --no-generics
Enable or disable all assembler transformations of Xtensa instructions.
The default is @@option{--generics};
@@option{--no-generics} should be used only in the rare cases when the
instructions must be exactly as specified in the assembly source.

d1068 9
a1076 1
separate section in the output file.
d1086 6
@


1.104
log
@Add support for a -g switch to GAS
@
text
@d5294 6
d5302 2
@


1.103
log
@Add and handle new --alternate command line option.
@
text
@d230 2
a231 2
 [@@b{--defsym} @@var{sym}=@@var{val}] [@@b{-f}] [@@b{--gstabs}] [@@b{--gstabs+}]
 [@@b{--gdwarf2}] [@@b{--help}] [@@b{-I} @@var{dir}] [@@b{-J}] [@@b{-K}] [@@b{-L}]
d482 6
d499 1
a499 1
@@item --gdwarf2
@


1.102
log
@	* doc/as.texinfo (Section, PushSection): Correct documentation
	for ELF.
@
text
@d229 3
a231 3
@@value{AS} [@@b{-a}[@@b{cdhlns}][=@@var{file}]] [@@b{-D}] [@@b{--defsym} @@var{sym}=@@var{val}]
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gstabs+}] [@@b{--gdwarf2}] [@@b{--help}]
 [@@b{-I} @@var{dir}] [@@b{-J}] [@@b{-K}] [@@b{-L}]
d466 3
d1463 1
d1536 6
d3690 1
d3767 1
a4861 1
@@ignore
d4864 7
a4870 2
macro syntax'' with @@samp{-a} or @@samp{--alternate}.}  @@xref{Alternate,,
Alternate macro syntax}.
d4872 4
a4875 1
Generate a string replacement for each of the @@var{name} arguments, and
d4880 22
a4901 1
@@end ignore
d4904 4
@


1.101
log
@2004-07-04  Aaron W. LaFramboise <aaron98wiridge9@@aaronwl.com>

* bfd/cofflink.c (_bfd_coff_generic_relocate_section): Resolve PE weak
externals properly.
* src/gas/config/obj-coff.c (obj_coff_weak): New .weak syntax for PE weak
externals.
* binutils/doc/binutils.texi (nm): Clarify weak symbol description.
* gas/config/tc-i386.c (tc_gen_reloc): Use addend for weak symbols in TE_PE.
* gas/doc/as.texinfo (Weak): Document PE weak symbols.
* ld/ld.texinfo (WIN32): Document PE weak symbols.
@
text
@d5059 3
a5061 3
This directive is a synonym for @@code{.section}.  It pushes the current section
(and subsection) onto the top of the section stack, and then replaces the
current section and subsection with @@code{name} and @@code{subsection}.
d5312 4
a5315 4
This directive replaces the current section and subsection.  The replaced
section and subsection are pushed onto the section stack.  See the contents of
the gas testsuite directory @@code{gas/testsuite/gas/elf} for some examples of
how this directive and the other section stack directives work.
@


1.100
log
@Apply H.J.'s patch to fix label arithmetic when multiple same-name sections are involved
@
text
@d3403 2
a3404 2
@@code{.size}, and @@code{.tag} can generate auxiliary symbol table
information for COFF.
a3825 1
* Weak::                        @@code{.weak @@var{names}}
d3828 1
a5810 1
@@ifset ELF
d5817 19
a5835 1
@@end ifset
@


1.99
log
@2004-04-22  Chris Demetriou  <cgd@@broadcom.com>

        * config/tc-mips.c (md_longopts): Remove -membedded-pic option.
        (OPTION_MEMBEDDED_PIC): Remove.
        (OPTION_TRAP, OPTION_BREAK, OPTION_EB, OPTION_EL)
        (OPTION_FP32, OPTION_GP32, OPTION_CONSTRUCT_FLOATS)
        (OPTION_NO_CONSTRUCT_FLOATS, OPTIONS_FP64, OPTION_GP64)
        (OPTION_RELAX_BRANCH, OPTION_NO_RELAX_BRANCH)
        (OPTION_ELF_BASE): Renumber.
        (md_parse_option): Remove OPTION_MEMBEDDED_PIC handling.
        (md_show_usage): Remove mention of -membedded-pic.
        * doc/as.texinfo: Remove mention of -membedded-pic.
@
text
@d5214 1
a5214 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}[, @@@@@@var{entsize}]]]
d5230 4
d5242 2
d5250 36
a5285 6
If @@var{flags} contains @@code{M} flag, @@var{type} argument must be specified
as well as @@var{entsize} argument. Sections with @@code{M} flag but not
@@code{S} flag must contain fixed size constants, each @@var{entsize} octets
long. Sections with both @@code{M} and @@code{S} must contain zero terminated
strings where each character is @@var{entsize} bytes long. The linker may remove
duplicates within sections with the same name, same entity size and same flags. 
d5308 2
@


1.98
log
@	* doc/as.texinfo (Sub-Sections): Conditionalize COFF-specific use
	of .section directive; add a reference to the ELF .subsection
	directive.
@
text
@d356 1
a356 1
   [@@b{-non_shared}] [@@b{-xgot}] [@@b{--membedded-pic}]
@


1.97
log
@	* bfd/elf32-arm.h (arm_print_private_bfd_data): Add EABI v3.
	* binutils/readelf.c (decode_ARM_machine_flags): Add EABI v3.
	* gas/config/tc-arm.c (meabi_flags): New variable.
	(arm_parse_eabi): New function.
	(md_begin): Set flags for EABI v3.
	(arm_eabis): Add.
	(arm_long_opts): Add meabi.
	* include/elf/arm.h (EF_ERM_BE8, EF_ARM_LE8, EF_ARM_EABI_VER3): Add.
	* doc/as.texinf <ARM>: Document -meabi.
	* doc/c-arm.texi: Ditto.
@
text
@d2986 1
a2986 1
@@ifset COFF-ELF
d2988 1
a2988 1
When generating COFF or ELF output, you
d2997 10
d4347 1
a4347 1
This one of the ELF visibility directives.  The other two are
d4523 1
a4523 1
This one of the ELF visibility directives.  The other two are
d5010 1
a5010 1
This one of the ELF visibility directives.  The other two are
@


1.96
log
@	* config/tc-mips.c (warn_nops): Remove static variable.
	(macro): Remove test of warn_nops.
	(md_shortops): Remove 'n'.
	(md_parse_option): Remove 'n' case.
	(md_show_usage): Remove -n.
	* doc/as.texinfo (Overview): Remove MIPS -n option.
	* doc/c-mips.texi (MIPS Opts): Remove mention -n.
	* NEWS: Mention removal of MIPS -n option.
@
text
@d266 1
@


1.95
log
@* doc/as.texinfo: Let texi2pod parse asconfig.texi and
gasver.texi.  Remove duplicate symbol definitions for texi2pod.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003
d353 1
a353 1
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-n}] [@@b{-O}[@@var{optimization level}]]
@


1.94
log
@	* config/tc-arm.c (FPU_MAVERICK): Define.
	(FPU_ARCH_MAVERICK): Define.
	(arm_float_abi): Define.
	(mfloat_abi_opt): New variable.
	(md_begin): Use them.
	(arm_opts): Add msoft-float and mhard-float.
	(arm_cpus): Use FPU_ARCH_MAVERICK.
	(arm_fpus): Add maverick.
	(arm_float_abis): Add.
	(arm_parse_float_abi): New function.
	(arm_long_options): Add mfloat-abi.
	* doc/as.texinfo: Document -mfloat-abi=.
	* doc/c-arm.text: Ditto. Menution -fpu=maverick.
@
text
@d22 2
a26 39
@@c man begin NAME
@@ifset man
@@c Configure for the generation of man pages
@@set AS as
@@set TARGET TARGET
@@set GENERIC
@@set A29K
@@set ALPHA
@@set ARC
@@set ARM
@@set CRIS
@@set D10V
@@set D30V
@@set H8/300
@@set H8/500
@@set HPPA
@@set I370
@@set I80386
@@set I860
@@set I960
@@set IA-64
@@set IP2K
@@set M32R
@@set M68HC11
@@set M680X0
@@set M880X0
@@set MCORE
@@set MIPS
@@set MMIX
@@set PDP11
@@set PJ
@@set PPC
@@set SH
@@set SPARC
@@set TIC54X
@@set V850
@@set VAX
@@set XTENSA
@@end ifset
d28 1
@


1.93
log
@	* doc/as.texinfo (Align): Correct list of byte targets.
@
text
@d300 2
a301 1
   [@@b{-mfpu}=@@var{floating-point-fromat}]
d639 2
@


1.92
log
@* as.c (use_gnu_debug_info_extensions) : New variable.
 (parse_args) : Accept new --gstabs+ option, and set `use_gnu_debug_info_extensions'.
 (show_usage) : Document --gstabs+ option.
* as.h (use_gnu_debug_info_extensions) : New extern declaration.
* stabs.c (stabs_generate_asm_file) : If `use_gnu_debug_info_extensions' is set
  add the compilation directory to the stabs debug info.
* doc/as.texinfo : Document --gstabs+ option.
* NEWS: Mention new feature.
@
text
@d3904 2
a3905 3
For the a29k, hppa, m68k, m88k, w65, sparc, Xtensa, and Renesas / SuperH SH,
and i386 using ELF format,
the first expression is the
d3908 2
a3909 1
is already a multiple of 8, no change is needed.
@


1.91
log
@[ bfd/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* archures.c (bfd_mach_mipsisa64r2): New define.
	* bfd-in2.h: Regenerate.
	* aoutx.h (NAME(aout,machine_type)): Handle bfd_mach_mipsisa64r2.
	* cpu-mips.c (I_mipsisa64r2): New enum value.
	(arch_info_struct): Add entry for I_mipsisa64r2.
	* elfxx-mips.c (_bfd_elf_mips_mach)
	(_bfd_mips_elf_print_private_bfd_data): Handle E_MIPS_ARCH_64R2.
	(mips_set_isa_flags): Add bfd_mach_mipsisa64r2 case.
	(mips_mach_extensions): Add entry for bfd_mach_mipsisa64r2.

[ binutils/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* readelf.c (get_machine_flags): Handle E_MIPS_ARCH_64R2.

[ gas/Changelog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* configure.in (mipsisa64r2, mipsisa64r2el, mipsisa64r2*): New CPUs.
	* configure: Regenerate.
	* config/tc-mips.c (imm2_expr): New variable.
	(md_assemble, mips16_ip): Initialize imm2_expr.
	(ISA_HAS_64BIT_REGS, ISA_HAS_DROR, ISA_HAS_ROR): Add ISA_MIPS64R2.
	(macro_build): Handle +A, +B, +C, +E, +F, +G, and +H format operands.
	(macro): Handle M_DEXT and M_DINS.
	(validate_mips_insn): Handle +E, +F, +G, +H, and +I format operands.
	(mips_ip): Likewise.
	(OPTION_MIPS64R2): New define.
	(md_longopts): New entry for -mips64r2 (OPTION_MIPS64R2).
	OPTION_ASE_BASE): Increase to compensate for OPTION_MIPS64R2.
	(md_parse_option): Handle OPTION_MIPS64R2.
	(s_mipsset): Handle setting "mips64r2" ISA.
	(mips_cpu_info_table): Add mips64r2.
	(md_show_usage): Document -mips64r2 option.
	* doc/as.texinfo: Docuemnt -mips64r2 option.
	* doc/c-mips.texi: Likewise.

[ gas/testsuite/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* gas/mips/cp0-names-mips64r2.d: New file.
	* gas/mips/cp0sel-names-mips64r2.d: New file.
	* gas/mips/elf_arch_mips64r2.d: New file.
	* gas/mips/hwr-names-mips64r2.d: New file.
	* gas/mips/mips32r2-ill-fp64.l: New file.
	* gas/mips/mips32r2-ill-fp64.s: New file.
	* gas/mips/mips64r2-ill.l: New file.
	* gas/mips/mips64r2-ill.s: New file.
	* gas/mips/mips64r2.d: New file.
	* gas/mips/mips64r2.s: New file.
	* gas/mips/mips.exp: Define "mips64r2" arch, and run new tests.

[ include/elf/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips.h (E_MIPS_ARCH_64R2): New define.

[ include/opcode/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips.h: Document +E, +F, +G, +H, and +I operand types.
	Update documentation of I, +B and +C operand types.
	(INSN_ISA64R2, ISA_MIPS64R2, CPU_MIPS64R2): New defines.
	(M_DEXT, M_DINS): New enum values.

[ ld/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* ldmain.c (get_emulation): Ignore "-mips64r2".

[ ld/testsuite/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* ld-mips-elf/mips-elf-flags.exp: Add tests for combinations
	with MIPS64r2.

[ opcodes/ChangeLog ]
2003-09-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips-dis.c (mips_arch_choices): Add entry for "mips64r2"
	(print_insn_args): Add handing for +E, +F, +G, and +H.
	* mips-opc.c (I65): New define for MIPS64r2.
	(mips_builtin_opcodes): Add "dext", "dextm", "dextu", "dins",
	"dinsm", "dinsu", "drotl", "drotr", "drotr32", "drotrv", "dsbh",
	and "dshd" for MIPS64r2.  Adjust "dror", "dror32", and "drorv" to
	be supported on MIPS64r2.
@
text
@d266 2
a267 2
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gdwarf2}] [@@b{--help}] [@@b{-I} @@var{dir}] 
 [@@b{-J}] [@@b{-K}] [@@b{-L}]
d517 7
d4336 1
a4336 1
Only @@samp{--gstabs} is currently supported.
@


1.90
log
@Fix description of comment character for PPC.
@
text
@d394 1
a394 1
   [@@b{-mips64}]
d930 1
d935 2
a936 1
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, and @@samp{-mips64}
d938 3
a940 3
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, and
@@samp{MIPS64} ISA processors,
respectively.
@


1.89
log
@s/.cfi_gnu_window_save/.cfi_window_save/g
@
text
@d2093 1
a2093 1
@@samp{;} for Motorola PowerPC;
@


1.88
log
@	* dw2gencfi.c (cfi_pseudo_table): Add cfi_gnu_window_save.
	(dot_cfi, output_cfi_insn): Handle DW_CFA_GNU_window_save.
	(output_cie): Don't use DW_EH_PE_pcrel if neither DIFF_EXPR_OK
	nor tc_cfi_emit_pcrel_expr are defined.
	(output_fde): Use tc_cfi_emit_pcrel_expr if available and
	DIFF_EXPR_OK is not defined.
	* config/tc-sparc.h (TARGET_USE_CFIPOP): Define.
	(tc_cfi_frame_initial_instructions, tc_regname_to_dw2regnum,
	tc_cfi_emit_pcrel_expr): Define.
	(sparc_cfi_frame_initial_instructions, sparc_regname_to_dw2regnum,
	sparc_cfi_emit_pcrel_expr): New prototypes.
	(sparc_cie_data_alignment): New decl.
	(DWARF2_DEFAULT_RETURN_COLUMN, DWARF2_CIE_DATA_ALIGNMENT): Define.
	* config/tc-sparc.c: Include dw2gencfi.h.
	(sparc_cie_data_alignment): New variable.
	(md_begin): Initialize it.
	(sparc_cfi_frame_initial_instructions): New function.
	(sparc_regname_to_dw2regnum): Likewise.
	(sparc_cfi_emit_pcrel_expr): Likewise.
	* doc/as.texinfo: Document .cfi_gnu_window_save.

	* config/tc-sparc.c (s_common): Cast last argument to long and
	change format string to shut up warning.
testsuite/
	* gas/cfi/cfi-sparc-1.s: New test.
	* gas/cfi/cfi-sparc-1.d: New test.
	* gas/cfi/cfi-sparc64-1.s: New test.
	* gas/cfi/cfi-sparc64-1.d: New test.
	* gas/cfi/cfi.exp: Run them.
@
text
@d4053 1
a4053 1
@@section @@code{.cfi_gnu_window_save}
@


1.87
log
@	* config/tc-mips.c (mips_flag_pdr): Define.
	(md_begin) [OBJ_ELF]: Use it to control .pdr creation.
	(s_mips_end) [OBJ_ELF]: Likewise.
	(md_longopts) [OBJ_ELF]: Define OPTION_PDR, OPTION_NO_PDR.
	(md_parse_option) [OBJ_ELF]: Handle them.
	(md_show_usage) [OBJ_ELF]: Document -mpdr, -mno-pdr.

	* doc/c-mips.texi (MIPS Opts): Document -mpdr, -mno-pdr.
	* doc/as.texinfo (Overview) [MIPS]: Likewise.
@
text
@d4053 3
@


1.86
log
@	* doc/as.texinfo (Comm): Added @@node.  Moved before CFI
	directives node.
@
text
@d402 1
d955 4
@


1.85
log
@        * dw2gencfi.c (struct cfi_escape_data): New.
        (cfi_add_CFA_nop): Remove.
        (CFI_escape, dot_cfi_escape): New.
        (dot_cfi): Remove nop.
        (cfi_pseudo_table): Remove nop; add escape.
        (output_cfi_insn): Likewise.
        (select_cie_for_fde): Stop on escape.
        * dw2gencfi.h (cfi_add_CFA_nop): Remove.
        * read.c, read.h (do_parse_cons_expression): New.
        * doc/as.texinfo (.cfi_escape): New.

        * gas/cfi/cfi-common-3.[ds]: New.
        * gas/cfi/cfi.exp: Run it.
@
text
@d3 1
a3 1
@@c  2001, 2002
d3972 31
a4051 28

@@cindex @@code{comm} directive
@@cindex symbol, common
@@code{.comm} declares a common symbol named @@var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If @@code{@@value{LD}} does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @@var{length} bytes of uninitialized memory.  @@var{length} must be an
absolute expression.  If @@code{@@value{LD}} sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

@@ifset ELF
When using ELF, the @@code{.comm} directive takes an optional third argument.
This is the desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of the
address should be zero).  The alignment must be an absolute expression, and it
must be a power of two.  If @@code{@@value{LD}} allocates uninitialized memory
for the common symbol, it will use the alignment when placing the symbol.  If
no alignment is specified, @@command{@@value{AS}} will set the alignment to the
largest power of two less than or equal to the size of the symbol, up to a
maximum of 16.
@@end ifset

@@ifset HPPA
The syntax for @@code{.comm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .comm, @@var{length}}; @@var{symbol} is optional.
@@end ifset
@


1.84
log
@2003-06-09  H.J. Lu <hongjiu.lu@@intel.com>

	* NEWS: Updated for the new -n option for the i386 assembler.

	* config/tc-i386.c (optimize_align_code): New.
	(md_shortopts): Add 'n'.
	(md_parse_option): Handle 'n'.
	(md_show_usage): Add '-n'.

	* config/tc-i386.h (optimize_align_code): Declared.
	(md_do_align): Optimize code alignment only if optimize_align_code
	is not 0.

	* doc/as.texinfo: Add the new -n option.

	* doc/c-i386.texi: Document the new -n option.
@
text
@d3694 1
a3694 7
* CFI directives::		@@code{.cfi_startproc}
				@@code{.cfi_endproc}
				@@code{.cfi_def_cfa @@var{register}, @@var{offset}}
				@@code{.cfi_def_cfa_register @@var{register}}
				@@code{.cfi_def_cfa_offset @@var{offset}}
				@@code{.cfi_adjust_cfa_offset @@var{offset}}
				@@code{.cfi_offset @@var{register}, @@var{offset}}
d4017 4
a4020 2
@@node Comm
@@section @@code{.comm @@var{symbol} , @@var{length} }
@


1.83
log
@        * doc/as.texinfo: Document .cfi_rel_offset.
@
text
@d335 1
a335 1
   [@@b{--32}|@@b{--64}]
@


1.82
log
@	* dw2gencfi.c, dw2gencfi.h: New files.
	* config/tc-i386.c (tc_x86_cfi_init): New function.
	* config/tc-i386.h (TARGET_USE_CFIPOP, tc_cfi_init): New defines.
	* as.c (parse_args): Set verbose flag on --verbose.
	(main): Call tc_cfi_init()/cfi_finish().
	* as.h (verbose): New external variable.
	* read.c (pobegin): Insert CFI pops to the list.
	* symbols.c (local_symbol_make): Make symbol external.
	* symbols.h (local_symbol_make): New prototype.
	* Makefile.am: Add dw2gencfi.[ch] files.  Run "make dep-am".
	* Makefile.in: Regenerate.
	* doc/as.texinfo: Added node "CFI directives" with description of
	all implemented .cfi_* directives.
	* doc/Makefile.in: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@a3700 1
				@@code{.cfi_verbose [1|0]}
d4016 6
a4021 3
@@section @@code{.cfi_verbose [1|0]}
Switch on/off verbosity of the CFI machinery. @@value{AS} will print
lots of useful messages to standard output if you use this directive.
@


1.81
log
@bfd:
        * archures.c (enum bfd_architecture): Amend comment to refer to SuperH.
        * cpu-sh.c: Likewise.
        * elf32-sh.c: Likewise.
        * reloc.c (bfd_reloc_code_real): Likewise.
        * elf32-sh64-com.c: Change comment to refer to SuperH.
        * elf32-sh64.c: Likewise.
        * elf64-sh64.c: Likewise.
        * bfd-in2.h (enum bfd_architecture): Regenerate.
binutils:
        * readelf.c (get_machine_name) <EM_SH>: Amend return value
        to refer to SuperH.
gas:
        * config/tc-sh.c: Amend comment to refer to SuperH.
        * config/tc-sh.h: Likewise.
        (LISTING_HEADER): Amend to refer to SuperH.
        * config/tc-sh64.c: Change comment to refer to SuperH.
        * config/tc-sh64.h (LISTING_HEADER): Change to refer to SuperH.
        * doc/as.texinfo [SH, GENERIC]: Amend / Change to refer to SuperH.
        * doc/c-sh.texi: Amend to refer to SuperH.
        Add SuperH architecture documentation references.
        * doc/c-sh64.texi: Change to refer to SuperH.
include/elf:
        * common.h (EM_SH): Amend comment to refer to SuperH.
ld/testsuite:
        * ld-sh/sh64/crange3-cmpct.rd (Machine): Change to refer to SuperH.
        * ld-sh/sh64/crange3-media.rd (Machine): Likewise.
@
text
@d3693 10
d3978 42
@


1.80
log
@Replace references to Mitsubishi M32R with references to Renesas M32R.
@
text
@d1159 4
a1162 2
For information on the Renesas (formerly Hitachi) SH machine instruction set,
see @@cite{SH-Microcomputer User's Manual} (Renesas).
d2091 1
a2091 1
@@samp{!} for the Renesas SH;
d2547 1
a2547 1
Renesas SH,
d2684 1
a2684 1
and for the Renesas SH,
d3887 2
a3888 2
For the a29k, hppa, m68k, m88k, w65, sparc, Xtensa, and Renesas SH, and i386 using ELF
format,
d5897 2
a5898 2
* SH-Dependent::                Renesas SH Dependent Features
* SH64-Dependent::              Renesas SH64 Dependent Features
@


1.79
log
@Replace occurrances of 'Hitachi' with 'Renesas'.
@
text
@d714 1
a714 1
Mitsubishi M32R series.
@


1.78
log
@Add Xtensa port
@
text
@d327 1
a327 1
@@c Hitachi family chips have no machine-dependent assembler options
d1151 2
a1152 2
Series Programming Manual} (Hitachi ADE--602--025).  For the H8/300H,
see @@cite{H8/300H Series Programming Manual} (Hitachi).
d1156 1
a1156 1
Series Programming Manual} (Hitachi M21T001).
d1159 2
a1160 2
For information on the Hitachi SH machine instruction set, see
@@cite{SH-Microcomputer User's Manual} (Hitachi Micro Systems, Inc.).
d2089 1
a2089 1
@@samp{!} for the Hitachi SH;
d2216 1
a2216 1
Hitachi-SH or the
d2441 1
a2441 2
Hitachi SH or
H8/500)
d2545 1
a2545 1
Hitachi SH,
d2682 1
a2682 1
and for the Hitachi SH,
d2976 1
a2976 1
The same is true on the Hitachi SH.
d3133 3
a3135 4
Hitachi SH or the
H8/500, you can also use @@code{$} in symbol names.  That character may
be followed by any string of digits, letters, dollar signs (save on the
H8/300), and underscores.
d3885 1
a3885 1
For the a29k, hppa, m68k, m88k, w65, sparc, Xtensa, and Hitachi SH, and i386 using ELF
d4462 1
a4462 1
integers.  On the H8/300H and the Hitachi SH, however, @@code{.int} emits
d5850 1
a5850 1
* H8/300-Dependent::            Hitachi H8/300 Dependent Features
d5853 1
a5853 1
* H8/500-Dependent::            Hitachi H8/500 Dependent Features
d5895 2
a5896 2
* SH-Dependent::                Hitachi SH Dependent Features
* SH64-Dependent::              Hitachi SH64 Dependent Features
d5958 1
a5958 1
@@ifset Hitachi-all
d5963 1
a5963 1
The machine instruction sets are different on each Hitachi chip family,
d5969 3
a5971 3
* H8/300-Dependent::            Hitachi H8/300 Dependent Features
* H8/500-Dependent::            Hitachi H8/500 Dependent Features
* SH-Dependent::                Hitachi SH Dependent Features
d6346 1
a6346 1
Support for the Zilog Z8k and Hitachi H8/300 and H8/500 processors (tc-z8k,
@


1.77
log
@Rename the all occurances of C54X to TIC54X.
@
text
@d62 1
d453 7
d1068 39
d2118 3
d3887 1
a3887 1
For the a29k, hppa, m68k, m88k, w65, sparc, and Hitachi SH, and i386 using ELF
d5918 3
d6092 4
d6389 3
@


1.76
log
@Applied Bob Wilson's documentation fixes.
@
text
@d59 1
a59 1
@@set C54X
@


1.75
log
@	* config/tc-m68hc11.c (md_show_usage): Update usage.
	(md_parse_option): Recognize -m68hcs12.
	(m68hc11_elf_final_processing): Set EF_M68HCS12_MACH flag to identify
	HCS12.
	* doc/as.texinfo (Overview): Document new option -m68hcs12.
@
text
@d65 6
d148 1
a148 1
section entitled "GNU Free Documentation License".
d201 1
a201 1
      section entitled "GNU Free Documentation License".
d218 1
a218 1
section entitled "GNU Free Documentation License".
d510 1
a510 1
may help debugging assembler code, if the debugger can handle it.  Note - this
d1194 1
a1194 1
On the @@value{TARGET}, @@command{@@value{AS}} is configured to produce
d1397 1
a1397 1
to the @@value{TARGET}.
d1405 1
a1405 1
If you are invoking @@command{@@value{AS}} via the @@sc{gnu} C compiler (version 2),
d1528 1
a1528 1
@@section @@code{.include} search path: @@option{-I} @@var{path}
d1757 1
a1757 1
@@section Dependency tracking: @@option{--MD}
d1821 2
a1822 2
@@ifset COFF
When @@command{@@value{AS}} is configured for COFF output,
d1845 1
a1845 1
@@section Compatible output: @@option{--traditional-format}
d1874 2
a1875 2
@@kindex @@samp{-W}
@@kindex @@samp{--no-warn}
d1883 1
a1883 1
@@kindex @@samp{--fatal-warnings}
d1889 1
a1889 1
@@kindex @@samp{--warn}
d1955 1
a1955 1
to get other ``CPP'' style preprocessing, by giving the input file a
d2643 1
a2643 1
@@ifset COFF
d2645 1
a2645 1
When it generates COFF output,
d2751 1
a2751 1
@@ifset COFF
d2764 2
a2765 2
true another.
@@ifset aout-bout
d2772 1
a2772 1
@@end ifset
d2799 1
a2799 1
@@ifset COFF
d2805 1
a2805 1
@@ifinfo
d2826 1
a2826 1
@@end ifinfo
d2829 1
a2829 1

d2887 1
a2887 1
@@ifset COFF
d2953 1
a2953 1
@@ifset COFF
d2955 1
a2955 1
When generating COFF output, you
d3736 3
a3738 1
* Section::                     @@code{.section @@var{name}, @@var{subsection}}
d3744 1
d3746 2
d3768 1
d3770 2
d4247 2
a4248 2
@@cindex @@code{.hidden} directive
@@cindex Visibility
d4423 2
a4424 2
@@cindex @@code{.internal} directive
@@cindex Visibility
d4432 1
a4432 1
(ie not visible to other components), and that some extra, processor specific
d4867 1
a4867 1
@@cindex @@code{.previous} directive
d4887 1
a4887 1
@@cindex @@code{.popsection} directive
d4910 2
a4911 2
@@cindex @@code{.protected} directive
@@cindex Visibility
d4954 1
a4954 1
@@cindex @@code{.pushsection} directive
d5042 1
d5044 1
a5044 1
@@section @@code{.section @@var{name}} (COFF version)
a5045 1
@@cindex @@code{section} directive
d5054 7
d5098 1
d5100 5
a5105 5
@@section @@code{.section @@var{name}} (ELF version)

@@cindex @@code{section} directive
@@cindex named section
@@ifset ELF
a5110 1
@@end ifset
d5112 1
d5180 2
d5242 1
d5244 13
a5256 1
@@section @@code{.size} (COFF version)
d5258 3
a5260 4
@@cindex @@code{size} directive
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.
d5267 1
d5269 5
a5273 2
@@section @@code{.size @@var{name} , @@var{expression}} (ELF version)
@@cindex @@code{size} directive
d5275 8
a5282 1
This directive is used to set the size associated with a symbol @@var{name}.
d5286 2
d5445 1
a5445 1
@@cindex @@code{.subsection} directive
d5552 1
d5554 9
a5562 1
@@section @@code{.type @@var{int}} (COFF version)
d5566 10
a5575 3
@@cindex @@code{type} directive
This directive, permitted only within @@code{.def}/@@code{.endef} pairs,
records the integer @@var{int} as the type attribute of a symbol table entry.
d5582 1
d5584 5
a5588 1
@@section @@code{.type @@var{name} , @@var{type description}} (ELF version)
d5592 8
a5599 2
@@cindex @@code{type} directive
This directive is used to set the type of symbol @@var{name} to be either a
d5620 2
d5652 1
a5652 1
@@cindex @@code{.version}
d5661 1
a5661 1
@@cindex @@code{.vtable_entry}
d5668 1
a5668 1
@@cindex @@code{.vtable_inherit}
d5679 1
a5679 1
@@cindex @@code{.weak}
d6065 1
a6065 1
@@section Have you found a bug?
d6094 1
a6094 1
@@section How to report bugs
d6128 3
a6130 3
bell?''  Those bug reports are useless, and we urge everyone to
@@emph{refuse to respond to them} except to chide the sender to report
bugs properly.
d6300 1
a6300 1
fixed-size instructions (e.g. @@code{jsr}), while synthetic instructions
d6325 1
a6325 1
Linas Vepstas added GAS support for the ESA/390 "IBM 370" architecture.
d6341 1
a6341 362
@@node GNU Free Documentation License
@@chapter GNU Free Documentation License

                GNU Free Documentation License
                
                   Version 1.1, March 2000

 Copyright (C) 2000  Free Software Foundation, Inc.
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to
   it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
   preserve the section's title, and preserve in the section all the
   substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements"
   or to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@@smallexample
    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1
    or any later version published by the Free Software Foundation;
    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
@@end smallexample

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@


1.74
log
@[ bfd/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* aoutx.h (NAME(aout,machine_type)): Add bfd_mach_mipsisa32r2 case.
	* archures.c (bfd_mach_mipsisa32r2): New define.
	* bfd-in2.h: Regenerate.
	* cpu-mips.c (I_mipsisa32r2): New enum value.
	(arch_info_struct): Add entry for I_mipsisa32r2.
	* elfxx-mips.c (elf_mips_isa, _bfd_elf_mips_mach)
	(_bfd_mips_elf_print_private_bfd_data): Handle E_MIPS_ARCH_32R2.
	(_bfd_mips_elf_final_write_processing): Add
	bfd_mach_mipsisa32r2 case.
	(_bfd_mips_elf_merge_private_bfd_data): Handle merging of
	binaries marked as using MIPS32 Release 2.

[ binutils/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* doc/binutils.texi (objdump): Note MIPS HWR (Hardware Register)
	changes in MIPS -M options.

[ gas/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* configure.in: Recognize mipsisa32r2, mipsisa32r2el, and
	CPU variants.
	* configure: Regenerate.
	* config/tc-mips.c (ISA_HAS_DROR, ISA_HAS_ROR): New defines.
	(macro_build): Handle "K" operand.
	(macro2): Use ISA_HAS_DROR and ISA_HAS_ROR in the places where
	CPU_HAS_DROR and CPU_HAS_ROR are currently used.
	(mips_ip): New variable "lastpos", and implement "+A", "+B",
	and "+C" operands for MIPS32 Release 2 ins/ext instructions.
	Implement "K" operand for MIPS32 Release 2 rdhwr instruction.
	(validate_mips_insn): Implement "+" as a way to extend the
	allowed operands, and implement "K", "+A", "+B", and "+C"
	operands.
	(OPTION_MIPS32R2): New define.
	(md_longopts): Add entry for OPTION_MIPS32R2.
	(OPTION_ELF_BASE): Adjust to accomodate OPTIONS_MIPS32R2.
	(md_parse_option): Handle OPTION_MIPS32R2.
	(s_mipsset): Reimplement handling of ".set mipsN" options
	and add support for ".set mips32r2".
	(mips_cpu_info_table): Add entry for "mips32r2" (MIPS32 Release 2).
	(md_show_usage): Document "-mips32r2" option.
	* doc/as.texinfo: Document "-mips32r2" option.
	* doc/c-mips.texi: Likewise.

[ gas/testsuite/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* gas/mips/cp0-names-mips32r2.d: New test.
	* gas/mips/hwr-names-mips32r2.d: New test.
	* gas/mips/hwr-names-numeric.d: New test.
	* gas/mips/hwr-names.s: New test source file.
	* gas/mips/mips32r2.d: New test.
	* gas/mips/mips32r2.s: New test source file.
	* gas/mips/mips32r2-ill.l: New test.
	* gas/mips/mips32r2-ill.s: New test source file.
	* gas/mips/mips.exp: Add mips32r2 architecture data array
	entry.  Run new tests mentioned above.

[ include/elf/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips.h (E_MIPS_ARCH_32R2): New define.

[ include/opcode/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips.h: Document "+" as the start of two-character operand
	type names, and add new "K", "+A", "+B", and "+C" operand types.
	(OP_MASK_INSMSB, OP_SH_INSMSB, OP_MASK_EXTMSB)
	(OP_SH_EXTMSB, INSN_ISA32R2, ISA_MIPS32R2, CPU_MIPS32R2): New
	defines.

[ opcodes/ChangeLog ]
2002-12-30  Chris Demetriou  <cgd@@broadcom.com>

	* mips-dis.c (mips_cp0_names_mips3264r2, mips_hwr_names_numeric)
	(mips_hwr_names_mips3264r2): New arrays.
	(mips_arch_choice): New "hwr_names" member.
	(mips_arch_choices): Adjust for structure change, and add a new
	entry for "mips32r2" ISA.
	(mips_hwr_names): New variable.
	(set_default_mips_dis_options): Set mips_hwr_names.
	(parse_mips_dis_option): New "hwr-names" option which sets
	mips_hwr_names, and adjust "reg-names=ARCH" to set mips_hwr_names.
	(print_insn_arg): Change return type to "int"
	and use that to indicate number of characters consumed.
	Add support for "+" operand extension character, "+A", "+B",
	"+C", and "K" operands.
	(print_insn_mips): Adjust for changes to print_insn_arg.
	(print_mips_disassembler_options): Adjust for "hwr-names"
	addition and "reg-names" change.
	* mips-opc (I33): New define (shorthand for INSN_ISA32R2).
	(mips_builtin_opcodes): Note that "nop" and "ssnop" are special
	forms of "sll".  Add new MIPS32 Release 2 instructions: ehb,
	di, ei, ext, ins, jr.hb, jalr.hb, mfhc1, mfhc2, mthc1, mthc2,
	rdhwr, rdpgpr, seb, seh, synci, wrpgpr, wsbh.
	Note that hardware rotate instructions (ror, rorv) can be
	used on MIPS32 Release 2, and add the official mnemonics
	for them (rotr, rotrv) and the similar "rotl" mnemonic for
	left-rotate.
@
text
@d365 1
a365 1
   [@@b{-m68hc11}|@@b{-m68hc12}]
d804 1
a804 1
@@item -m68hc11 | -m68hc12
@


1.73
log
@Add support for msp430.
@
text
@d386 2
a387 1
   [@@b{-mips3}] [@@b{-mips4}] [@@b{-mips5}] [@@b{-mips32}] [@@b{-mips64}]
d913 1
d919 4
a922 2
@@samp{-mips5}, @@samp{-mips32}, and @@samp{-mips64} correspond to generic
@@samp{MIPS V}, @@samp{MIPS32}, and @@samp{MIPS64} ISA processors,
@


1.72
log
@	* doc/as.texinfo (Invoking): Typo fix.
	* config/tc-tic54x.c (encode_operand): Comment typo fix.
@
text
@d5761 3
d5910 4
@


1.71
log
@	* config/tc-m68hc11.c (elf_flags): Set default ABI to gcc default
	(32-bit int, 64-bit double).
	(md_longopts): New options -mshort, -mlong, -mshort-double and
	-mlong-double to control the ABI.
	(md_show_usage): Update.
	(md_parse_option): Handle new options.
	* doc/as.texinfo (Overview): Document new options for HC11/HC12.
@
text
@d1406 1
a1406 1
standard output with with high-level and assembly source) and @@samp{-L} (retain
@


1.70
log
@Note that if '@@' is a comment character then another symbol is used to prefix
the section's type.
@
text
@d366 2
d806 12
@


1.69
log
@	* doc/c-ip2k.texi: The company name Scenix changed to Ubicom.
	* doc/as.texi: Likewise.
@
text
@d5102 4
@


1.68
log
@Make .ifdef treat a referenced but not yet defined symbol as if it were
undefined, in exactly the same way as .equiv.
@
text
@d681 1
a681 1
Scenix IP2K series.
@


1.67
log
@Add IP2k GAS and OPCODES support.
@
text
@d244 1
a244 1
@@pxref{Invoking,,Comand-Line Options}.
d689 1
a689 1
Restores the default behaviour, which restricts the permited instructions to
d1583 1
a1583 1
a given inut source line.  If this value is not specified, it defaults to being
d4077 3
a4079 1
the assembler will signal an error if @@var{symbol} is already defined.
d4278 2
a4279 1
has been defined.
d4325 2
a4326 1
has not been defined.  Both spelling variants are equivalent.
@


1.66
log
@2002-06-14  H.J. Lu  <hjl@@gnu.org>
            Daniel Jacobowitz  <drow@@mvista.com>

        * dwarf2dbg.h (dwarf2_directive_file): Return char *.
        * dwarf2dbg.c (dwarf2_directive_file): Return filename.
        * config/tc-mips.c (s_mips_file): Call s_app_file_string
        and new_logical_line for the first .file directive.
        * read.c (s_app_file_string): New function.
        (s_app_file): Call it.
        * read.h (s_app_file_string): Add declaration.

2002-06-14  Daniel Jacobowitz  <drow@@mvista.com>

        * configure.in: Remove MIPS_STABS_ELF.
        * configure: Regenerated.
        * config.in: Regenerated.
        * config/obj-elf.h (ECOFF_DEBUGGING): Define to mips_flag_mdebug
        for MIPS targets.
        * config/tc-mips.c (mips_pseudo_table): Remove #ifdef around
        ".extern".
        (pdr_seg): Declare unconditionally.
        (md_begin): Always generate .pdr unless ECOFF_DEBUGGING or not ELF.
        (s_mips_end): Likewise.  Generate stabs function markers.
        (s_mips_ent): Generate stabs function markers.
        (s_mips_frame): Always generate .pdr unless ECOFF_DEBUGGING or not
        ELF.
        (s_mips_mask): Likewise.
        (mips_flag_mdebug): New.
        (md_longopts): Add "mdebug" and "no-mdebug".
        (md_parse_options): Add OPTION_MDEBUG and OPTION_NO_MDEBUG.
        (mips_after_parse_args): Set mips_flag_mdebug.
        * doc/as.texinfo: Add "-mdebug" and "-no-mdebug" for MIPS.

2002-06-14  Daniel Jacobowitz  <drow@@mvista.com>

        * gas/mips/lineno.d: Use --gstabs.
        * gas/mips/mips.exp (lineno.s): Remove XFAIL.
@
text
@d46 1
d346 5
d679 16
d2023 3
d5718 3
d5857 4
@


1.66.2.1
log
@	* doc/as.texinfo (Invoking): Typo fix.
	* config/tc-tic54x.c (encode_operand): Comment typo fix.
@
text
@d1370 1
a1370 1
standard output with high-level and assembly source) and @@samp{-L} (retain
@


1.65
log
@	* doc/as.texinfo: Update MIPS documentation.
@
text
@d385 1
d895 5
@


1.64
log
@[ gas/ChangeLog ]
2002-05-30  Chris G. Demetriou  <cgd@@broadcom.com>
            Ed Satterthwaite  <ehs@@broadcom.com>

	* config/tc-mips.c (mips_set_options): New "ase_mdmx" member.
	(mips_opts): Initialize "ase_mdmx" member.
	(file_ase_mdmx): New variable.
	(CPU_HAS_MDMX): New macro.
	(md_begin): Initialize mips_opts.ase_mdmx and file_ase_mdmx
	based on command line options and configuration defaults.
	(macro_build): Note in comment that use of MDMX in macros is
	not currently allowed.
	(validate_mips_insn): Add support for the "O", "Q", "X", "Y", and
	"Z" MDMX operand types.
	(mips_ip): Accept MDMX instructions if mips_opts.ase_mdmx is set,
	and add support for the "O", "Q", "X", "Y", and "Z" MDMX operand
	types.
	(OPTION_MDMX, OPTION_NO_MDMX, md_longopts, md_parse_option):
	Add support for "-mdmx" and "-no-mdmx" options.
	(OPTION_ELF_BASE): Move to accomodate new options.
	(s_mipsset): Support ".set mdmx" and ".set nomdmx".
	(mips_elf_final_processing): Set MDMX ASE ELF header flag if
	file_ase_mdmx was set.
	* doc/as.texinfo: Document -mdmx and -no-mdmx options.
	* doc/c-mips.texi: Likewise, and document ".set mdmx" and ".set
	nomdmx" directives.

[ gas/testsuite/ChangeLog ]
2002-05-30  Chris G. Demetriou  <cgd@@broadcom.com>

	* gas/mips/mips64-mdmx.s: New file.
	* gas/mips/mips64-mdmx.d: Likewise.
	* gas/mips/mips.exp: Run new "mips64-mdmx" test.

[ include/opcode/ChangeLog ]
2002-05-30  Chris G. Demetriou  <cgd@@broadcom.com>

	* mips.h (OP_SH_ALN, OP_MASK_ALN, OP_SH_VSEL, OP_MASK_VSEL)
	(MDMX_FMTSEL_IMM_QH, MDMX_FMTSEL_IMM_OB, MDMX_FMTSEL_VEC_QH)
	(MDMX_FMTSEL_VEC_OB, INSN_READ_MDMX_ACC, INSN_WRITE_MDMX_ACC)
	(INSN_MDMX): New constants, for MDMX support.
	(opcode character list): Add "O", "Q", "X", "Y", and "Z" for MDMX.

[ opcodes/ChangeLog ]
2002-05-30  Chris G. Demetriou  <cgd@@broadcom.com>
            Ed Satterthwaite  <ehs@@broadcom.com>

	* mips-dis.c (print_insn_arg): Add support for 'O', 'Q', 'X', 'Y',
	and 'Z' formats, for MDMX.
        (mips_isa_type): Add MDMX instructions to the ISA
	bit mask for bfd_mach_mipsisa64.
	* mips-opc.c: Add support for MDMX instructions.
	(MX): New definition.

	* mips-dis.c: Update copyright years to include 2002.
@
text
@d373 10
a382 4
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-G} @@var{num}] [@@b{-mcpu}=@@var{CPU} ]
   [@@b{-mips1}] [@@b{-mips2}] [@@b{-mips3}] [@@b{-mips4}] [@@b{-mips5}]
   [@@b{-mips32}] [@@b{-mips64}]
   [@@b{-m4650}] [@@b{-no-m4650}]
a384 2
   [@@b{--trap}] [@@b{--break}] [@@b{-n}]
   [@@b{--emulation}=@@var{name} ]
d850 1
a850 1
a MIPS processor.
d873 1
d876 31
a906 14
Generate code for a particular MIPS Instruction Set Architecture level.
@@samp{-mips1} corresponds to the @@sc{r2000} and @@sc{r3000} processors,
@@samp{-mips2} to the @@sc{r6000} processor, and @@samp{-mips3} to the @@sc{r4000}
processor.
@@samp{-mips5}, @@samp{-mips32}, and @@samp{-mips64} correspond
to generic @@sc{MIPS V}, @@sc{MIPS32}, and @@sc{MIPS64} ISA
processors, respectively.

@@item -m4650
@@itemx -no-m4650
Generate code for the MIPS @@sc{r4650} chip.  This tells the assembler to accept
the @@samp{mad} and @@samp{madu} instruction, and to not schedule @@samp{nop}
instructions around accesses to the @@samp{HI} and @@samp{LO} registers.
@@samp{-no-m4650} turns off this option.
d920 7
a926 4
@@item -mcpu=@@var{CPU}
Generate code for a particular MIPS cpu.  It is exactly equivalent to
@@samp{-m@@var{cpu}}, except that there are more value of @@var{cpu}
understood.
d943 1
a943 1
@@command{@@value{AS}} is configured for is a MIPS ELF or ECOFF target.
a956 1
@@need 900
@


1.63
log
@Silently ignore an 'a' flag in a COFF .section directive.
@
text
@d378 1
d891 6
@


1.62
log
@[ gas/ChangeLog ]
2002-03-15  Chris G. Demetriou  <cgd@@broadcom.com>

	* config/tc-mips.c (mips_set_options): New "ase_mips3d" member.
	(mips_opts): Initialize "ase_mips3d" member.
	(file_ase_mips3d): New variable.
	(CPU_HAS_MIPS3D): New macro.
	(md_begin): Initialize mips_opts.ase_mips3d and file_ase_mips3d
	based on command line options and configuration defaults.
	(macro_build, mips_ip): Accept MIPS-3D instructions if
	mips_opts.ase_mips3d is set.
	(OPTION_MIPS3D, OPTION_NO_MIPS3D, md_longopts, md_parse_option):
	Add support for "-mips3d" and "-no-mips3d" options.
	(OPTION_ELF_BASE): Move to accomodate new options.
	(s_mipsset): Support ".set mips3d" and ".set nomips3d".
	(mips_elf_final_processing): Add a comment indicating that a
	MIPS-3D ASE ELF header flag should be set, when one exists.
	* doc/as.texinfo: Document -mips3d and -no-mips3d options.
	* doc/c-mips.texi: Likewise, and document ".set mips3d" and ".set
	nomips3d" directives.

[ gas/testsuite/ChangeLog ]
2002-03-15  Chris G. Demetriou  <cgd@@broadcom.com>

	* gas/mips/mips64-mips3d.s: New file.
	* gas/mips/mips64-mips3d.d: Likewise.
	* gas/mips/mips.exp: Run new "mips64-mips3d" test.

[ include/opcode/ChangeLog ]
2002-03-15  Chris G. Demetriou  <cgd@@broadcom.com>

	* mips.h (INSN_MIPS3D): New definition used to mark MIPS-3D
	instructions.
	(OPCODE_IS_MEMBER): Adjust comments to indicate that ASE bit masks
	may be passed along with the ISA bitmask.

[ opcodes/ChangeLog ]
2002-03-15  Chris G. Demetriou  <cgd@@broadcom.com>

	* mips-dis.c (mips_isa_type): Add MIPS3D instructions to the ISA
	bit masks for bfd_mach_mips_sb1 and bfd_mach_mipsisa64.  Add
	comments for bfd_mach_mipsisa32 and bfd_mach_mipsisa64 that
	indicate that they should dissassemble all applicable
	MIPS-specified ASEs.
	* mips-opc.c: Add support for MIPS-3D instructions.
	(M3D): New definition.

	* mips-opc.c: Update copyright years.
@
text
@d4981 2
@


1.61
log
@2002-03-07  Daniel Jacobowitz  <drow@@mvista.com>

        * doc/as.texinfo: Wrap @@menu in @@ifnottex, not @@ifinfo.
@
text
@d377 1
d884 6
@


1.60
log
@Fix typo
@
text
@d198 1
a198 1
@@ifinfo
d227 1
a227 1
@@end ifinfo
@


1.59
log
@Add documentation of IA64 port
@
text
@d337 1
a337 1
@@ifset M32R
d345 1
d349 1
a349 1
    @@b{--W[n]p}]
@


1.58
log
@Fix typo: MMIX used instead of CRIS.
@
text
@d45 1
d339 7
d5778 4
@


1.57
log
@	* doc/as.texinfo: Add duplicate directory entry so that "info gas"
	works as expected.
@
text
@d5608 1
a5608 1
@@ifset MMIX
@


1.56
log
@        * doc/c-alpha.texi: New file.
        * doc/Makefile.am (CPU_DOCS): Add it.
        * doc/all.texi, doc/as.texinfo: Add hooks for Alpha.
@
text
@d121 1
@


1.55
log
@	* doc/c-cris.texi: New.
	* doc/all.texi: @@set CRIS.
	* doc/as.texinfo: Ditto.  Add CRIS gas manpage option overview.
	Include c-cris.texi.
	* doc/Makefile.am (CPU_DOCS): Add c-cris.texi
	* doc/Makefile.in: Regenerate.
@
text
@d32 1
d270 8
d5598 3
d5696 8
a5705 4
@@end ifset

@@ifset A29K
@@include c-a29k.texi
@


1.55.2.1
log
@        * doc/c-alpha.texi: New file.
        * doc/Makefile.am (CPU_DOCS): Add it.
        * doc/all.texi, doc/as.texinfo: Add hooks for Alpha.
@
text
@a31 1
@@set ALPHA
a268 8
@@ifset ALPHA

@@emph{Target Alpha options:}
   [@@b{-m@@var{cpu}}]
   [@@b{-mdebug} | @@b{-no-mdebug}]
   [@@b{-relax}] [@@b{-g}] [@@b{-G@@var{size}}]
   [@@b{-F}] [@@b{-32addr}]
@@end ifset
a5588 3
@@ifset ALPHA
* Alpha-Dependent::		Alpha Dependent Features
@@end ifset
d5684 4
a5689 8
@@end ifset

@@ifset ALPHA
@@include c-alpha.texi
@@end ifset

@@ifset ARC
@@include c-arc.texi
@


1.55.2.2
log
@* import from trunk.

	* doc/as.texinfo: Add duplicate directory entry so that "info gas"
	works as expected.
@
text
@a120 1
* Gas: (as).                    The GNU assembler.
@


1.55.2.3
log
@Fix typo: MMIX used instead of CRIS.
@
text
@d5608 1
a5608 1
@@ifset CRIS
@


1.55.2.4
log
@2002-03-07  Daniel Jacobowitz  <drow@@mvista.com>

        * doc/as.texinfo: Wrap @@menu in @@ifnottex, not @@ifinfo.
@
text
@d197 1
a197 1
@@ifnottex
d226 1
a226 1
@@end ifnottex
@


1.54
log
@Contribute sh64-elf.
2002-02-08  Alexandre Oliva  <aoliva@@redhat.com>
	    Stephen Clarke <Stephen.Clarke@@st.com>
* doc/c-sh64.texi: Fix citation of SH64 architecture manual.
2002-01-31  Alexandre Oliva  <aoliva@@redhat.com>
* config/tc-sh.c (md_relax_table): Added default sizes for
non-PC-relative UNDEF_MOVI, and relaxation sequences for
MOVI_16, MOVI_32 and MOVI_48.
* config/tc-sh64.c (shmedia_md_apply_fix3): Fix warning.
(shmedia_md_convert_frag): Handle non-PC-relative UNDEF_MOVI
and MOVI_16.
(shmedia_md_estimate_size_before_relax): Remove redundant
blocks.	 Set fragP->fr_var even if relaxation type unchanged.
Retain UNDEF_MOVI until expression decays to number.
2002-01-24  Alexandre Oliva  <aoliva@@redhat.com>
* config/tc-sh64.c (shmedia_init_reloc): Handle new SHmedia PIC
relocation types.  Take fixP->fx_addnumber into account too.
(shmedia_md_apply_fix): Likewise.
(shmedia_md_convert_frag): Likewise.
(shmedia_build_Mytes): Likewise.
(sh64_consume_datalabel): Complain about nested datalabel.
Support PIC relocs.  Call sh_parse_name.
* config/tc-sh64.h (TC_RELOC_RTSYM_LOC_FIXUP): Extend definition
in tc-sh.h to SHmedia reloc types.
* config/tc-sh.c (SH64PCRELPLT, MOVI_PLT, MOVI_GOTOFF,
MOVI_GOTPC): New relaxation constants.
(md_relax_table): Introduce relaxation directives for PIC-related
constants.
(sh_PIC_related_p): Handle datalabel.
(sh_check_fixup): Choose SH5 PIC relocations.
(sh_cons_fix_new): Added BDF_RELOC_64.
(md_apply_fix3, sh_parse_name): Handle GOTPLT.
2002-01-18  Alexandre Oliva  <aoliva@@redhat.com>
* config/tc-sh64.c (sh64_max_mem_for_rs_align_code): If the
current ISA is SHmedia, get 7 bytes.
2001-11-28  Nick Clifton  <nickc@@cambridge.redhat.com>
* config/tc-sh.c (md_apply_fix3): Treat shmedia_md_apply_fix3 as a
void function.
* config/tc-sh64.c (shmedia_apply_fix): Rename to
shmedia_apply_fix3 and make void.
2001-05-17  Alexandre Oliva  <aoliva@@redhat.com>
* config/tc-sh64.c (s_sh64_abi): Remove unused arguments passed to
as_bad.
2001-04-12  Alexandre Oliva  <aoliva@@redhat.com>
* config/tc-sh64.h (md_parse_name): Take &c as argument.
2001-03-14  DJ Delorie	<dj@@redhat.com>
* doc/Makefile.am (CPU_DOCS): Added c-sh64.texi
* doc/Makefile.in(CPU_DOCS): Ditto.
* doc/c-sh64.texi: New file.
* doc/as.texinfo: Add SH64 support.
2001-03-13  DJ Delorie	<dj@@redhat.com>
* config/tc-sh64.c (shmedia_get_operands): Rename A_RESV_Fx to
A_REUSE_PREV so that its purpose is more obvious.
(shmedia_build_Mytes): Ditto.
2001-03-07  DJ Delorie	<dj@@redhat.com>
* config/tc-sh64.c (sh64_vtable_entry): New, strip datalabels
before processing.
(sh64_vtable_inherit): Ditto.
(strip_datalabels): New, strip "datalabel" from given line.
* config/tc-sh.c (md_pseudo_table): Add sh64-specific vtable
pseudos.
2001-03-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_assemble): Move dwarf2_emit_insn
call ...
(shmedia_build_Mytes): ... to here.
2001-03-06  DJ Delorie	<dj@@redhat.com>
* config/tc-sh.c: Remove sh64-specific uaquad now that there
is a generic one.
2001-01-21  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.h (DWARF2_LINE_MIN_INSN_LENGTH): Override.
* config/tc-sh64.c (shmedia_md_assemble): Offset recorded insn
address by one in call to dwarf2_emit_insn.
2001-01-13  Hans-Peter Nilsson	<hpn@@cygnus.com>
Implement ".abi" pseudo and correct .cranges descriptors.  Correct
alignment handling broken by imported changes.
* config/tc-sh64.h (HANDLE_ALIGN): Override definition in tc-sh.h.
(sh64_handle_align): Declare.
(MAX_MEM_FOR_RS_ALIGN_CODE): Override definition in tc-sh.h.
(sh64_max_mem_for_rs_align_code): Declare.
(enum sh64_isa_values): Moved here from tc-sh64.c.
(md_do_align): Define.
(sh64_do_align): Declare.
(struct sh64_tc_frag_data): New.
(TC_FRAG_TYPE): Change to struct sh64_tc_frag_data.  Users
changed.
(TC_FRAG_INIT): Change to set new datatype.
(struct sh64_segment_info_type): Rename member
last_flushed_location to last_contents_mark.  All users changed.
(md_elf_section_change_hook, TC_CONS_FIX_NEW): Do not define.
(shmedia_elf_new_section, sh64_tc_cons_fix_new): Do not prototype.
* config/tc-sh.c (md_pseudo_table): Add ".abi".
(sh_elf_cons) [HAVE_SH64]: Call sh64_update_contents_mark instead
of unsetting seen_insn.
(md_assemble) [HAVE_SH64] <before new SHcompact sequence>: Also
call sh64_update_contents_mark.
(sh_handle_align): Remove HAVE_SH64-conditioned code.
* config/tc-sh64.c (sh64_isa_mode): Correct type from boolean to
enum sh64_isa_values.
(sh64_set_contents_type): Drop segT parameter.	All callers changed.
(emitting_crange): Boolean guard moved to file scope from function
scope in sh64_set_contents_type.
(s_sh64_abi): New.
(sh64_update_contents_mark): New; most split out from
sh64_flush_pending_output.
(shmedia_md_end): Call sh64_update_contents_mark.  Set
sh64_isa_mode to sh64_isa_sh5_guard unless sh64_isa_unspecified.
(sh64_do_align): New function.
(sh64_max_mem_for_rs_align_code): New function.
(sh64_handle_align): Rename from shmedia_do_align.  Make
non-static.  Add head comment.	Emit zero bytes for n bytes modulo
four.  Change return-type to void.
(shmedia_elf_new_section): Remove.
(shmedia_md_assemble): Call sh64_update_contents_mark.
(s_sh64_mode): Ditto.  Do not call md_flush_pending_output.  Make
new frag.  Call sh64_update_contents_mark after making the new
frag.
(sh64_flush_pending_output): Just call sh64_update_contents_mark
and sh_flush_pending_output.
(sh64_flag_output): Also call md_flush_pending_output, but add
condition on not emitting_crange.
(sh64_tc_cons_fix_new): Remove.
2001-01-12  Nick Clifton  <nickc@@redhat.com>
* config/tc-sh64.c (shmedia_do_align): Fix to work with new
alignment handling scheme imported from sourceware.
2001-01-12  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.h (TARGET_FORMAT): Define.
(sh64_target_format): Prototype.
* config/tc-sh64.c (sh64_target_mach): New function.
2001-01-07  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_end): When equating a symbol, use
zero_address_frag instead of copying the frag of the symbol.
(shmedia_frob_file_before_adjust): Ditto.
(shmedia_md_apply_fix) <case BFD_RELOC_SH_IMM_MEDLOW16>: Cast mask
to valueT to remove signedness.
(shmedia_md_convert_frag): Add parameter final.	 Rename parameter
headers to output_bfd.	Do not evaluate symbols if final is false;
do emit fixups.
(shmedia_md_estimate_size_before_relax) <case C (MOVI_IMM_32,
UNDEF_MOVI) et al>: If symbol cannot be modified to be PC-relative
to the current frag, call shmedia_md_convert_frag to emit fixups
and make frag_wane neutralize the frag.	 Update comments.
* config/tc-sh.c (md_convert_frag): Change caller of
shmedia_md_convert_frag.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.h: Tweak comments and correct formatting.
* config/tc-sh64.c: Ditto.
(shmedia_md_convert_frag) <PT/PTA/PTB 32, 48 and 64 bit
expansion, MOVI pcrel expansion>: Fix thinko calculating offset
for the no-relocation case.
(shmedia_check_limits): Fix range check being off-by-one for PTA.
* config/tc-sh.c: Ditto.  Add proper comments to #ifdef/#ifndef
wrappers.
(SH64PCREL16_F): Increment for proper max-PTA handling.	 Update
comment.
(SH64PCREL16_M, MOVI_16_M): Correct range thinko.
(SH64PCREL48_M, MOVI_48_M): Similar; don't count in length of
expansion.
(SH64PCREL32_M, MOVI_32_M): Ditto; handle overflowing expression.
Correct comment.
2001-01-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_apply_fix) <second switch, case
BFD_RELOC_SH_PT_16>: Set lowest bit in field to be relocated to 1.
(shmedia_md_convert_frag) <case C (SH64PCREL16_32, SH64PCREL16) et
al>: Set lowest bit of field to relocate to 1 and rest to empty,
if reloc is emitted.
2000-12-31  Hans-Peter Nilsson	<hpn@@cygnus.com>
New options plus bugfixes.
* config/tc-sh.c (md_longopts): New options "-no-expand" and
"-expand-pt32".
(md_parse_option): Handle new options.
(md_show_usage): Add blurb for new options.
* config/tc-sh64.c (SHMEDIA_BFD_RELOC_PT): New macro.
(sh64_expand, sh64_pt32): New variables.
(shmedia_init_reloc): Handle BFD_RELOC_SH_PT_16.
(shmedia_md_apply_fix): Hold original fixP->fx_r_type in
orig_fx_r_type.	 Change SHMEDIA_BFD_RELOC_PT into
BFD_RELOC_SH_PT_16.  Handle BFD_RELOC_SH_PT_16 as pc-relative.
<resolved previously-pc-relative relocs>: Handle
SHMEDIA_BFD_RELOC_PT and BFD_RELOC_SH_PT_16.
(shmedia_md_convert_frag) <case C (SH64PCREL16PT_64, SH64PCREL16),
case C (SH64PCREL16PT_32, SH64PCREL16)>: Modify to PTB if operand
points to SHcompact code.
<case C (SH64PCREL16_32, SH64PCREL16), case C (SH64PCREL16_64,
SH64PCREL16)>: Check that ISA of what operand points at and
PTA/PTB matches, or emit error.
(shmedia_check_limits): Handle BFD_RELOC_SH_PT_16 and
SHMEDIA_BFD_RELOC_PT.
(shmedia_immediate_op): If pcrel, emit fixup also for constant
operand.
(shmedia_build_Mytes) <case A_IMMS16>: Also check sh64_expand in
condition for MOVI expansion.
<case A_PCIMMS16BY4>: Handle expansion to 32 bits only, if
sh64_pt32.  Emit only a BFD_RELOC_SH_PT_16 fixup if not
sh64_expand.
<case A_PCIMMS16BY4_PT>: Likewise, but emit a SHMEDIA_BFD_RELOC_PT
fixup.
(sh64_target_format): Error-check setting of sh64_pt32 and
sh64_expand.  Fix typo in check for sh64_shcompact_const_crange.
(shmedia_md_pcrel_from_section): Handle BFD_RELOC_SH_PT_16 and
SHMEDIA_BFD_RELOC_PT as coming from SHmedia code.
2000-12-31  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c: Improve comments.
(shmedia_md_convert_frag): Remove inactive is_pt_variant code.	Do
not say the linker will check correctness of PTA/PTB expansion.
(shmedia_md_end): Make non-static.
* config/tc-sh64.h (md_end): Define to shmedia_md_end.	Add
prototype.
* config/tc-sh.c (sh_finalize): Remove.
* config/tc-sh.h (md_end): Do not define.
Remove prototype for sh_finalize.
2000-12-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_frob_section_type): Use a struct
sh64_section_data container when storing section type in tdata
field in elf_section_data.
* config/tc-sh.c (sh_elf_final_processing): Change from EF_SH64 to
EF_SH5.
* Makefile.am: Update dependencies.
* Makefile.in: Regenerate.
2000-12-22  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_assemble): Don't protect
dwarf2_emit_insn call with test on debug_type.
2000-12-19  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (sh64_set_contents_type): Make contents-type
CRT_SH5_ISA32 sticky for 64-bit.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
Generate .crange sections when switching ISA mode or emitting
constants in same section as code.
* config/tc-sh64.c: Reformat structure definitions.
(sh64_end_of_assembly, sh64_mix, sh64_shcompact_const_crange): New
variables.
(sh64_set_contents_type): Rename from sh64_init_section.  Rewrite
to emit a .cranges descriptor when contents type changes.  Only
emit error if changing contents type and -no-mix is in effect.
(sh64_emit_crange, sh64_flush_last_crange, sh64_flag_output,
sh64_flush_pending_output, sh64_tc_cons_fix_new): New functions.
(shmedia_md_end): Set sh64_end_of_assembly.  Pass
sh64_flush_last_crange over sections.
When checking main symbol of datalabel symbol, check for
STO_SH5_ISA32, not ISA type of section in definition.
(shmedia_frob_file_before_adjust): Check main symbol for
STO_SH5_ISA32; don't check ISA type of section in definition.
(shmedia_frob_section_type): Adjust for .cranges; set section flag
to SHF_SH5_ISA32_MIXED or SHF_SH5_ISA32 according to whether
.cranges entries have been output.
(shmedia_elf_new_section): Just call md_flush_pending_output.
(shmedia_md_assemble): Do not emit a BFD_RELOC_SH_SHMEDIA_CODE
fix.  Do not set tc_segment_info_data.in_code for section.  Call
sh64_set_contents_type for SHmedia code.
(s_sh64_mode): Do not call sh64_init_section or set seen_insn to
false.	Call md_flush_pending_output.
(sh64_target_format): Check that -no-mix and
-shcompact-const-crange are used in sane combination with other
options.
(shmedia_md_pcrel_from_section): Check type of fix for how to
adjust pc-relative.
(sh64_consume_datalabel): Check symbol for having STO_SH5_ISA32,
not ISA type of section in definition.
* config/tc-sh64.h (struct sh64_segment_info_type): Rewrite to
hold contents-type state.
(md_flush_pending_output): Redefine to sh64_flush_pending_output.
(sh64_flush_pending_output): Declare.
(TC_CONS_FIX_NEW): Define to sh64_tc_cons_fix_new.
(sh64_tc_cons_fix_new): Declare.
* config/tc-sh.c (sh_elf_cons) [HAVE_SH64]: Unset seen_insn and
call sh64_flag_output.
(md_assemble) [HAVE_SH64]: Do not emit BFD_RELOC_SH_CODE.  Just
call sh64_set_contents_type to mark SHcompact code and set
seen_insn.
(md_longopts): New options "-no-mix" and
"-shcompact-const-crange".
(md_parse_option): Handle new options.
(md_show_usage): Add blurb for new options.
(md_number_to_chars) [HAVE_SH64]: Call sh64_flag_output.
2000-12-15  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c: Delete investigated and obsolete fixme:s.
(sh64_last_insn_frag): New.
(shmedia_md_convert_frag): Use tc_frag_data field of incoming frag
to get frag for insn opcode for generating fixups; do not assume it
is the same frag.
(shmedia_build_Mytes): Set sh64_last_insn_frag after growing frag
for new insn.
* config/tc-sh64.h (ELF_TC_SPECIAL_SECTIONS): Define for .cranges
section.
(TC_FRAG_TYPE): Define as fragS *.
(TC_FRAG_INIT): Define to set tc_frag_data to sh64_last_insn_frag.
(sh64_last_insn_frag): Declare.
(sh64_consume_datalabel): Fix typo; check for seginfo != NULL,
not == NULL before dereferencing.
2000-12-12  Hans-Peter Nilsson	<hpn@@cygnus.com>
Get rid of BFD section flag and EF_SH64_ABI64.
* config/tc-sh64.c (shmedia_frob_section_type): Use
elf_section_data (sec)->tdata, not a specific BFD section flag, to
communicate the section as containing SHmedia code.  Describe why.
* config/tc-sh.c (sh_elf_final_processing): Tweak comment.  Set
EF_SH64 regardless of ABI.
* config/tc-sh64.c (shmedia_md_apply_fix): Decapitalize "invalid"
in error message.  Handle resolved expressions for
BFD_RELOC_SH_IMMS10, BFD_RELOC_SH_IMMS10BY2,
BFD_RELOC_SH_IMMS10BY4 and BFD_RELOC_64.
(shmedia_check_limits): Handle BFD_RELOC_64.
(sh64_adjust_symtab): Do not decrement the GAS symbol value for
a STO_SH5_ISA32 symbol, only the BFD value.
2000-12-11  Ben Elliston  <bje@@redhat.com>
* config/tc-sh64.c: Call dwarf2_emit_insn, not the defunct
dwarf2_generate_asm_lineno.
2000-12-11  Hans-Peter Nilsson	<hpn@@cygnus.com>
Handle PC-relative MOVI expansions with assembler relaxation.
Generate PC-relative relocs from 16-bit PC-relative expressions.
* config/tc-sh64.c (SHMEDIA_MD_PCREL_FROM_FIX): Break out from...
(shmedia_md_pcrel_from_section): ...here.
(shmedia_md_apply_fix): Handle fixups for 16-bit operands that has
turned completely resolved.  Adjust relocation type for 16-bit
immediate operands that has turned PC-relative.	 Adjust back for
MD_PCREL_FROM_SECTION being applied twice.
(shmedia_md_convert_frag): Always emit reloc for expression with
global or weak symbol.	Handle relaxation result for PC-relative
expressions.
(shmedia_md_estimate_size_before_relax): An expression with a weak
or global symbol can not be relaxed.  Break out tests for
relaxable symbol into variable sym_relaxable.
<cases C (MOVI_IMM_64, UNDEF_MOVI) and C (MOVI_IMM_32,
UNDEF_MOVI)>: Break out any PC-relative expression and change
relaxation type.
(shmedia_build_Mytes): CSE &operands->operands[j] into variable
opjp.
<case A_IMMS16>: Fix typo for initial minor relaxation type of
MOVI expansion.	 If X_op_symbol of the immediate expression is
set, make an expression symbol for the argument to frag_var.
* config/tc-sh.c (MOVI_IMM_32_PCREL, MOVI_IMM_64_PCREL): New
relaxations.
(END): Adjust for new relaxations.
(md_relax_table): Add entries for new relaxations.
2000-12-07  Ben Elliston  <bje@@redhat.com>
* config/tc-sh64.c (shmedia_parse_reg): Initialize variable len.
2000-12-07  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_convert_frag): Correct all MOVI and
SHORI operand offsets in PT/PTA/PTB expansions.
2000-12-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
Implement DataLabel semantics.
* config/tc-sh.c (sh_frob_file) [HAVE_SH64]: Call
shmedia_frob_file_before_adjust.
* config/tc-sh64.c [! OBJ_ELF]: Emit #error.
(DATALABEL_SUFFIX): Define.
(shmedia_md_end) <before adjusting STO_SH5_ISA32 symbols>: Walk
symbol list to update "datalabel" symbols to their main symbol
counterparts.
(shmedia_frob_file_before_adjust): New.
(sh64_adjust_symtab): For remaining datalabel symbols, set to
undefined and set STT_DATALABEL.
(sh64_frob_label): Initialize TC symbol field.
(sh64_consume_datalabel): Actually implement semantics.	 New
parameter operandf, call it instead of expression.
(sh64_exclude_symbol): New.
* config/tc-sh64.h (md_parse_name): Pass on the function operand
to sh64_consume_datalabel.
(tc_symbol_new_hook): Define to tc_frob_symbol.
(TC_SYMFIELD_TYPE): Define to symbolS *.
(tc_frob_symbol): Define to call sh64_exclude_symbol.
2000-12-01  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_init_reloc): Tweak comment for default
case.
(shmedia_md_assemble): Call dwarf2_generate_asm_lineno if
generating dwarf2 debug information.
2000-11-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (sh64_target_format): Use elf64-sh64l and
elf64-sh64 for the 64-bit ABI.
* config/tc-sh.c (md_show_usage): Tweak usage output for -abi=*
option.
2000-11-29  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh.c: Remove conditionalizing on HAVE_SH64 for
case-insensitivity.
2000-11-27  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c: Tweak comments, formatting and error messages.
(enum sh64_abi_values): New type.
(enum sh64_isa_values): New type.
(sh64_isa_mode): Replace shmedia_mode.	All referers changed.
(seen_shcompact_mode, seen_shmedia_mode): Delete.
(sh64_abi): Replace shmedia_64.
(shmedia_md_convert_frag) <C (MOVI_IMM_64, MOVI_64),
C (MOVI_IMM_32, MOVI_32)>: Correct register number handling.
(s_sh64_mode): Check validity for this target.
(sh64_target_format): Initialize defaults for ISA and ABI.
Fallback to old object format if no SH64 ISA or ABI has been
specified.
* config/tc-sh.c (md_parse_option): Check combinations for errors.
(sh_elf_final_processing): Change to have EF_SH64_ABI64 for 64-bit
ABI and EF_SH64 for 32-bit ABI, if SH64 options are specified.
* config/tc-sh64.h: Fix typo in comment.
2000-11-25  Hans-Peter Nilsson	<hpn@@cygnus.com>
* config/tc-sh64.c (shmedia_md_estimate_size_before_relax)
<PT fixups for absolute values>: Size will be longest, not
shortest.
(shmedia_md_convert_frag): Disable PTB-warning machinery.  Correct
all MOVI and SHORI operand offsets in PT/PTA/PTB expansions.
* config/tc-sh.c (parse_reg) [HAVE_SH64]: Add local variables l0
and l1 to hold lowercase of two first characters.  Change all
remaining TO_LOWER to tolower.
* config/tc-sh64.c (TO_LOWER): Delete.
(shmedia_find_cooked_opcode): Use tolower, not TO_LOWER.
(md_parse_name): Define.
(sh64_consume_datalabel): Declare.
(DOLLAR_DOT): Define.
* config/tc-sh64.c (shmedia_parse_exp): New.
(sh64_consume_datalabel): New; just ignoring datalabel semantics.
(shmedia_parse_reg): Remove const from src
parameter.
(shmedia_get_operands): Ditto for args parameter and ptr variable.
(shmedia_md_assemble): Ditto for op_end variable.
(shmedia_get_operand): Ditto for ptr parameter and src variable.
Use shmedia_parse_exp, not parse_exp.
* config/tc-sh64.c (shmedia_parse_reg): Add shmedia_arg_type
parameter.  All callers changed.
(shmedia_get_operand): Add shmedia_arg_type parameter.	All
callers changed.
(shmedia_parse_reg): Put first two character in local variables.
Use tolower, not TO_LOWER.  If no register is found and argtype
indicates a control register, scan shmedia_creg_table
case-insensitive.
2000-11-24  Hans-Peter Nilsson	<hpn@@cygnus.com>
* Makefile.am (CPU_TYPES): Add sh64.
(TARGET_CPU_CFILES): Add config/tc-sh64.c.
(TARGET_CPU_HFILES): Add config/tc-sh64.h.
Regenerate dependencies.
* Makefile.in: Regenerate.
* configure.in: Add support for sh64-*-elf*.
* configure: Regenerate.
* config/tc-sh64.h: New.
* config/tc-sh64.c: New.
* config/tc-sh.c (md_pseudo_table) [HAVE_SH64]: New pseudos
.mode, .isa and .uaquad.
[HAVE_SH64] (SH64PCREL16_32, SH64PCREL16_64, SH64PCREL16PT_32,
SH64PCREL16PT_64, MOVI_IMM_32, MOVI_IMM_64): Define.
[HAVE_SH64] (END): Define as 10.
[HAVE_SH64] (UNDEF_SH64PCREL, SH64PCREL16, SH64PCREL32,
SH64PCREL48, SH64PCREL64, UNDEF_MOVI, MOVI_16, MOVI_32, MOVI_48,
MOVI_64): Define.
[HAVE_SH64] (SH64PCREL16_F, SH64PCREL16_M, SH64PCREL16_LENGTH,
SH64PCREL32_F, SH64PCREL32_M, SH64PCREL32_LENGTH, SH64PCREL48_F,
SH64PCREL48_M, SH64PCREL48_LENGTH, SH64PCREL64_LENGTH,
MOVI_16_LENGTH, MOVI_32_LENGTH, MOVI_48_LENGTH, MOVI_64_LENGTH):
Define.
(md_relax_table) [HAVE_SH64]: Provide relaxations for SHmedia.
(md_begin) [HAVE_SH64]: Call shmedia_md_begin.
(parse_reg) [HAVE_SH64]: Parse register names case-insensitive.
(md_assemble) [HAVE_SH64]: Call shmedia_md_assemble if assembling
SHmedia instructions.  Handle state-change after switching to
SHcompact.
(md_longopts) [HAVE_SH64]: New options --isa=* and --abi=*.
(md_parse_option) [HAVE_SH64]: Parse new options.
(md_show_usage) [HAVE_SH64]: Show usage of new options.
(md_convert_frag) [HAVE_SH64] <default>: Call
shmedia_md_convert_frag instead of abort.
(sh_force_relocation) [HAVE_SH64]: Also force relocation for
BFD_RELOC_SH_SHMEDIA_CODE.
(sh_elf_final_processing) [HAVE_SH64]: Set flags identifying
SHcompact or SHmedia code.
(md_apply_fix) [HAVE_SH64] <default>: Return result from calling
shmedia_md_apply_fix instead of abort.
(md_estimate_size_before_relax) [HAVE_SH64] <default>: Return
result from calling shmedia_md_estimate_size_before_relax instead
of calling abort.
(sh_do_align) [HAVE_SH64]: If shmedia_mode, let shmedia_do_align
do the work.
(tc_gen_reloc) [HAVE_SH64]: For unrecognized relocs, call
shmedia_init_reloc and do nothing more if it returns non-zero.
(sh_finalize) [HAVE_SH64]: Call shmedia_md_end.
* po/POTFILES.in: Regenerate.
* po/gas.pot: Regenerate.
@
text
@d34 1
d288 9
d595 4
d5595 3
d5694 4
@


1.53
log
@	Support on-demand global register allocation by passing on
	base-plus-offset relocs to the linker.
	* config/tc-mmix.c: Tweak and fix typos in comments.
 	(allocate_undefined_gregs_in_linker): New variable.
	(OPTION_LINKER_ALLOCATED_GREGS): New option macro.
	(md_longopts): Add --linker-allocated-gregs.
	(md_parse_option) <case 'x'>: Imply --linker-allocated-gregs.
	<case OPTION_LINKER_ALLOCATED_GREGS>: New.
	(md_show_usage): Update text for -x.  Add text for
	--linker-allocated-gregs.
	(tc_gen_reloc): Derive default value for addend from val and
	baddsy.  Use addsec and bfd_is_abs_section in more places.  Don't
	emit error for BFD_RELOC_MMIX_BASE_PLUS_OFFSET without suitable
	GREG if allocate_undefined_gregs_in_linker.
	* doc/as.texinfo (Overview) <Target MMIX options>: Add
	--linker-allocated-gregs.
	* doc/c-mmix.texi (MMIX-Opts): Add blurb about
	--linker-allocated-gregs.  Mention that it's implied by -x.
	(MMIX-Pseudos) <GREG>: Mention when and how a GREG can be omitted.
	(MMIX-mmixal): Clarify dated comparison and location of MMIXware.

	* config/tc-mmix.h (md_parse_name): Use ISUPPER, not isupper.
@
text
@d5628 1
d5776 1
@


1.52
log
@	* doc/as.texinfo (Overview) <Target ARM options>: Add missing {}
	to @@dots call.
	<Detailed description, ARM options>: Ditto.
	* doc/c-arm.texi (ARM Options): Ditto.
@
text
@d3 1
a3 1
@@c  2001
d130 1
a130 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d183 1
a183 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d357 1
@


1.51
log
@* NEWS: Mention new ARM command-line options and VFP support.

* config/tc-arm.c (ARM_CEXT_XSCALE): Replaces ARM_EXT_XSCALE.  All
uses changed.
(ARM_CEXT_MAVERICK): Similarly.
(ARM_ANY): Now means any core instruction.
(CPU_DEFAULT): Default to ARM_ANY.
(uses_apcs_26, atcps, support_interwork, uses_apcs_float)
(pic_code): Declare for all object types.  Make type int.
(legacy_cpu, legacy_fpu, mcpu_cpu_opt, mcpu_fpu_opt, march_cpu_opt)
(march_fpu_opt, mfpu_opt): Declare.
(md_longopts): Tidy up conditional definitions.
(arm_opts, arm_cpus, arm_archs, arm_fpus, arm_extensions)
(arm_long_opts): New tables.
(arm_parse_cpu, arm_parse_arch, arm_parse_fpu): New functions.
(arm_parse_extension): New function.
(md_parse_option): Rewrite using new table-driven system.
(md_show_usage): Use new table-driven system.
(md_begin): Calculate cpu_variant from command line option data.
* doc/as.texinfo (ARM ISA options): Docuement new ARM-specific
command-line options.
* doc/c-arm.texi: Likewise.

Testsuite:
* gas/arm/vfp1.d: Use new command-line options.
* gas/arm/vfp1xD.d: Likewise.
* gas/arm/arm.exp (vfp-bad): Likewise.
* gas/arm/maverick.d: Likewise.
@
text
@d278 2
a279 2
   [@@b{-mcpu}=@@var{processor}[+@@var{extension}@@dots]]
   [@@b{-march}=@@var{architecture}[+@@var{extension}@@dots]]
d564 1
a564 1
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots]
d566 1
a566 1
@@item -march=@@var{architecture}[+@@var{extension}@@dots]
@


1.50
log
@	* doc/Makefile.am (POD2MAN): Use 'GNU Development Tools' for
	the page man title.
	* doc/Makefile.in: Rebuild.
	* doc/as.texinfo: Do not put man SEEALSO in document;
	Use @@command for commands, @@option for options; Reorganize usage
	to clearly identify target specific options.
@
text
@d277 5
a281 12
   [@@b{-m[arm]1}|@@b{-m[arm]2}|@@b{-m[arm]250}|@@b{-m[arm]3}|
    @@b{-m[arm]6}|@@b{-m[arm]60}|@@b{-m[arm]600}|@@b{-m[arm]610}|
    @@b{-m[arm]620}|@@b{-m[arm]7[t][[d]m[i]][fe]}|@@b{-m[arm]70}|
    @@b{-m[arm]700}|@@b{-m[arm]710[c]}|@@b{-m[arm]7100}|
    @@b{-m[arm]7500}|@@b{-m[arm]8}|@@b{-m[arm]810}|@@b{-m[arm]9}|
    @@b{-m[arm]920}|@@b{-m[arm]920t}|@@b{-m[arm]9tdmi}|
    @@b{-mstrongarm}|@@b{-mstrongarm110}|@@b{-mstrongarm1100}]
   [@@b{-m[arm]v2}|@@b{-m[arm]v2a}|@@b{-m[arm]v3}|@@b{-m[arm]v3m}|
    @@b{-m[arm]v4}|@@b{-m[arm]v4t}|@@b{-m[arm]v5}|@@b{-[arm]v5t}|
    @@b{-[arm]v5te}]
   [@@b{-mthumb}|@@b{-mall}]
   [@@b{-mfpa10}|@@b{-mfpa11}|@@b{-mfpe-old}|@@b{-mno-fpu}]
d564 1
a564 1
@@item -m[arm][1|2|3|6|7|8|9][...] 
d566 1
a566 1
@@item -m[arm]v[2|2a|3|3m|4|4t|5|5t]
d568 1
a568 3
@@item -mthumb | -mall
Enable or disable Thumb only instruction decoding.
@@item -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu
d570 2
@


1.49
log
@Add MMIX support
@
text
@d16 3
d162 1
a162 1
first (Vax) version of @@code{as} for Project @@sc{gnu}.
d198 1
a198 1
This file is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}} version
d201 1
a201 1
This version of the file describes @@code{@@value{AS}} configured to generate
d228 1
a228 1
This manual is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}}.
d230 1
a230 1
This version of the manual describes @@code{@@value{AS}} configured to generate
d238 1
a238 1
Here is a brief summary of how to invoke @@code{@@value{AS}}.  For details,
d243 1
d247 1
d253 12
a264 8
@@value{AS} [ -a[cdhlns][=file] ] [ -D ]  [ --defsym @@var{sym}=@@var{val} ]
 [ -f ] [ --gstabs ] [ --gdwarf2 ] [ --help ] [ -I @@var{dir} ] 
 [ -J ] [ -K ] [ -L ]
 [ --listing--lhs-width=NUM ][ --listing-lhs-width2=NUM ]
 [ --listing-rhs-width=NUM ][ --listing-cont-lines=NUM ]
 [ --keep-locals ] [ -o @@var{objfile} ] [ -R ] [ --statistics ] [ -v ]
 [ -version ] [ --version ] [ -W ] [ --warn ] [ --fatal-warnings ] 
 [ -w ] [ -x ] [ -Z ] [ --target-help ]
d269 4
a272 2
 [ -marc[5|6|7|8] ]
 [ -EB | -EL ]
d275 18
a292 16
 [ -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 |
   -m[arm]6 | -m[arm]60 | -m[arm]600 | -m[arm]610 |
   -m[arm]620 | -m[arm]7[t][[d]m[i]][fe] | -m[arm]70 |
   -m[arm]700 | -m[arm]710[c] | -m[arm]7100 |
   -m[arm]7500 | -m[arm]8 | -m[arm]810 | -m[arm]9 |
   -m[arm]920 | -m[arm]920t | -m[arm]9tdmi |
   -mstrongarm | -mstrongarm110 | -mstrongarm1100 ]
 [ -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m |
   -m[arm]v4 | -m[arm]v4t | -m[arm]v5 | -[arm]v5t |
   -[arm]v5te ]
 [ -mthumb | -mall ]
 [ -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu ]
 [ -EB | -EL ]
 [ -mapcs-32 | -mapcs-26 | -mapcs-float |
   -mapcs-reentrant ]
 [ -mthumb-interwork ] [ -moabi ] [ -k ]
d295 3
a297 1
 [ -O ]
d300 3
a302 1
 [ -O | -n | -N ]
d310 4
a313 26
@@ifset PJ
 [ -mb | -me ]
@@end ifset
@@ifset PPC
 [ -mpwrx | -mpwr2 | -mpwr | -m601 | -mppc | -mppc32 | -m603 | -m604 |
   -m403 | -m405 | -mppc64 | -m620 | -mppc64bridge | -mbooke |
   -mbooke32 | -mbooke64 ]
 [ -mcom | -many | -maltivec ] [ -memb ]
 [ -mregnames | -mno-regnames ]
 [ -mrelocatable | -mrelocatable-lib ]
 [ -mlittle | -mlittle-endian | -mbig, -mbig-endian ]
 [ -msolaris | -mno-solaris ]
@@end ifset
@@ifset SPARC
@@c The order here is important.  See c-sparc.texi.
 [ -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
   -Av8plus | -Av8plusa | -Av9 | -Av9a ]
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ]
 [ -32 | -64 ]
@@end ifset
@@ifset TIC54X
 [ -mcpu=54[123589] | -mcpu=54[56]lp ] [ -mfar-mode | -mf ] 
 [ -merrors-to-file <filename> | -me <filename> ]
@@end ifset
@@ifset Z8000
@@c Z8000 has no machine-dependent assembler options
d316 2
d319 3
a321 3
 [ -ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB |
   -AKC | -AMC ]
 [ -b ] [ -no-relax ]
d324 4
a327 2
 [ --m32rx | --[no-]warn-explicit-parallel-conflicts |
   --W[n]p ]
d330 11
a340 1
 [ -l ] [ -m68000 | -m68010 | -m68020 | ... ]
d343 4
a346 8
 [ -jsri2bsr ] [ -sifilter ] [ -relax ]
 [ -mcpu=[210|340] ]
@@end ifset
@@ifset M68HC11
 [ -m68hc11 | -m68hc12 ]
 [ --force-long-branchs ] [ --short-branchs ]
 [ --strict-direct-mode ] [ --print-insn-syntax ]
 [ --print-opcodes ] [ --generate-example ]
d349 8
a356 6
 [ -nocpp ] [ -EL ] [ -EB ] [ -G @@var{num} ] [ -mcpu=@@var{CPU} ]
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -mips4 ] [ -mips5 ]
 [ -mips32 ] [ -mips64 ]
 [ -m4650 ] [ -no-m4650 ]
 [ --trap ] [ --break ] [ -n ]
 [ --emulation=@@var{name} ]
d359 47
a405 3
 [ --fixed-special-register-names ] [ --globalize-symbols ]
 [ --gnu-syntax ] [ --relax ] [ --no-predefined-symbols ]
 [ --no-expand ] [ --no-merge-gregs ] [ -x ]
a406 1
 [ -- | @@var{files} @@dots{} ]
d412 1
a412 1
@@table @@code
d416 1
a416 1
@@table @@code
d511 1
a511 1
Name the object-file output from @@code{@@value{AS}} @@var{objfile}.
d525 1
a525 1
Print the @@code{as} version.
d528 1
a528 1
Print the @@code{as} version and exit.
d558 1
a558 1
@@table @@code
d570 1
a570 1
@@table @@code
d594 1
a594 1
@@table @@code
d605 1
a605 1
@@table @@code
d625 1
a625 1
@@table @@code
d643 1
a643 1
@@table @@code
d664 1
a664 1
@@table @@code
d694 1
a694 1
@@table @@code
d697 1
a697 1
default is @@code{-mpic}.
d724 1
a724 1
@@table @@code
d743 1
a743 1
@@table @@code
d770 1
a770 1
This option is only useful for testing @@code{@@value{AS}}.
d776 1
a776 1
The following options are available when @@code{@@value{AS}} is configured
d779 1
a779 1
@@table @@code
d803 1
a803 1
@@table @@code
d819 1
a819 1
@@table @@code
d864 1
a864 1
This option causes @@code{@@value{AS}} to emulate @@code{@@value{AS}} configured
d877 1
a877 1
@@code{@@value{AS}} is configured for is a MIPS ELF or ECOFF target.
d888 1
a888 1
@@code{@@value{AS}} ignores this option.  It is accepted for compatibility with
d903 1
a903 1
When this option is used, @@code{@@value{AS}} will issue a warning every
d912 1
a912 1
@@table @@code
d960 1
a960 1
@@sc{gnu} @@code{@@value{AS}}.  We cover the syntax expected in source files, including
d962 1
a962 1
@@code{@@value{AS}} understands; and of course how to invoke @@code{@@value{AS}}.
d966 1
a966 1
configuration of @@code{@@value{AS}}, including assembler directives.
d1012 1
a1012 1
@@code{@@value{AS}} is part of a team of programs that turn a high-level
d1015 1
a1015 1
@@code{@@value{AS}} are used for different kinds of computer.
d1032 1
a1032 1
@@sc{gnu} @@code{as} is really a family of assemblers.
d1034 1
a1034 1
This manual describes @@code{@@value{AS}}, a member of that family which is
d1044 1
a1044 1
@@code{@@value{AS}} is primarily intended to assemble the output of the
d1046 1
a1046 1
@@code{@@value{LD}}.  Nevertheless, we've tried to make @@code{@@value{AS}}
d1055 1
a1055 1
This doesn't mean @@code{@@value{AS}} always uses the same syntax as another
d1062 1
a1062 1
Unlike older assemblers, @@code{@@value{AS}} is designed to assemble a source
d1077 1
a1077 1
On the @@value{TARGET}, @@code{@@value{AS}} is configured to produce
d1082 1
a1082 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1086 1
a1086 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1090 1
a1090 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1100 1
a1100 1
After the program name @@code{@@value{AS}}, the command line may contain
d1108 1
a1108 1
explicitly, as one of the files for @@code{@@value{AS}} to assemble.
d1113 1
a1113 1
@@code{@@value{AS}}.  No option changes the way another option works.  An
d1134 1
a1134 1
describe the program input to one run of @@code{@@value{AS}}.  The program may
d1144 1
a1144 1
Each time you run @@code{@@value{AS}} it assembles exactly one source
d1148 1
a1148 1
You give @@code{@@value{AS}} a command line that has zero or more input file
d1153 3
a1155 3
If you give @@code{@@value{AS}} no file names it attempts to read one input file
from the @@code{@@value{AS}} standard input, which is normally your terminal.  You
may have to type @@key{ctl-D} to tell @@code{@@value{AS}} there is no more program
d1161 1
a1161 1
If the source is empty, @@code{@@value{AS}} produces a small, empty object
d1176 1
a1176 1
to @@code{@@value{AS}}.
d1180 2
a1181 2
error messages reflect the original source file, when @@code{@@value{AS}} source
is itself synthesized from other files.  @@code{@@value{AS}} understands the
d1192 1
a1192 1
Every time you run @@code{@@value{AS}} it produces an output file, which is
d1202 1
a1202 1
@@code{b.out} when @@code{@@value{AS}} is configured for the Intel 80960.
d1204 1
a1204 1
You can give it another name by using the @@code{-o} option.  Conventionally,
d1228 1
a1228 1
@@code{@@value{AS}} may write warnings and error messages to the standard error
d1230 2
a1231 2
runs @@code{@@value{AS}} automatically.  Warnings report an assumption made so
that @@code{@@value{AS}} could keep assembling a flawed program; errors report a
d1288 1
a1288 1
If you are invoking @@code{@@value{AS}} via the @@sc{gnu} C compiler (version 2),
d1336 1
a1336 1
@@section Enable Listings: @@code{-a[cdhlns]}
d1385 1
a1385 1
@@section @@code{-D}
d1390 1
a1390 1
@@code{@@value{AS}}.
d1393 1
a1393 1
@@section Work Faster: @@code{-f}
d1397 1
a1397 1
@@cindex faster processing (@@code{-f})
d1406 1
a1406 1
preprocessed (if they contain comments, for example), @@code{@@value{AS}} does
d1411 1
a1411 1
@@section @@code{.include} search path: @@code{-I} @@var{path}
d1418 2
a1419 2
@@code{@@value{AS}} searches for files specified in @@code{.include}
directives (@@pxref{Include,,@@code{.include}}).  You may use @@code{-I} as
d1421 1
a1421 1
working directory is always searched first; after that, @@code{@@value{AS}}
d1426 1
a1426 1
@@section Difference Tables: @@code{-K}
d1441 1
a1441 1
@@code{@@value{AS}} sometimes alters the code emitted for directives of the form
d1448 1
a1448 1
@@section Include Local Labels: @@code{-L}
d1456 1
a1456 1
Normally both @@code{@@value{AS}} and @@code{@@value{LD}} discard such labels, so you do not
d1459 1
a1459 1
This option tells @@code{@@value{AS}} to retain those @@samp{L@@dots{}} symbols
d1470 1
a1470 1
@@section Configuring listing output: @@code{--listing}
d1479 1
a1479 1
@@table @@code
d1509 1
a1509 1
@@section Assemble in MRI Compatibility Mode: @@code{-M}
d1513 2
a1514 2
The @@code{-M} or @@code{--mri} option selects MRI compatibility mode.  This
changes the syntax and pseudo-op handling of @@code{@@value{AS}} to make it
d1520 1
a1520 1
assembling existing MRI assembler code using @@code{@@value{AS}}.
d1531 1
a1531 1
Other object file formats do not support this.  @@code{@@value{AS}} handles
d1546 1
a1546 1
instead be specified using the @@code{-e} option to the linker, or in a linker
d1557 1
a1557 1
address.  This differs from the usual @@code{@@value{AS}} @@code{.org} pseudo-op,
d1564 1
a1564 1
@@code{@@value{AS}}, typically either because they are difficult or because they
d1589 1
a1589 1
@@code{BRL}, and @@code{BRW}---are ignored.  @@code{@@value{AS}} automatically
d1640 1
a1640 1
@@section Dependency tracking: @@code{--MD}
d1646 1
a1646 1
@@code{@@value{AS}} can generate a dependency file for the file it creates.  This
d1655 1
a1655 1
@@section Name the Object File: @@code{-o}
d1660 1
a1660 1
There is always one object file output when you run @@code{@@value{AS}}.  By
d1681 1
a1681 1
Whatever the object file is called, @@code{@@value{AS}} overwrites any
d1685 1
a1685 1
@@section Join Data and Text Sections: @@code{-R}
d1692 1
a1692 1
@@code{-R} tells @@code{@@value{AS}} to write the object file as if all
d1699 1
a1699 1
When you specify @@code{-R} it would be possible to generate shorter
d1702 1
a1702 1
older versions of @@code{@@value{AS}}.  In future, @@code{-R} may work this way.
d1705 1
a1705 1
When @@code{@@value{AS}} is configured for COFF output,
d1711 2
a1712 2
@@code{-R} is not supported for any of the HPPA targets.  Using
@@code{-R} generates a warning from @@code{@@value{AS}}.
d1716 1
a1716 1
@@section Display Assembly Statistics: @@code{--statistics}
d1723 1
a1723 1
@@code{@@value{AS}}: the maximum amount of space allocated during the assembly
d1728 1
a1728 1
@@section Compatible output: @@code{--traditional-format}
d1731 1
a1731 1
For some targets, the output of @@code{@@value{AS}} is different in some ways
d1733 1
a1733 1
@@code{@@value{AS}} to use the traditional format instead.
d1736 1
a1736 1
@@code{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.
d1739 1
a1739 1
@@section Announce Version: @@code{-v}
d1750 1
a1750 1
@@section Control Warnings: @@code{-W}, @@code{--warn}, @@code{--no-warn}, @@code{--fatal-warnings}
d1752 1
a1752 1
@@code{@@value{AS}} should never give a warning or error message when
d1754 1
a1754 1
cause @@code{@@value{AS}} to give a warning that a particular assumption was
d1761 1
a1761 1
If you use the @@code{-W} and @@code{--no-warn} options, no warnings are issued.
d1763 1
a1763 1
how @@code{@@value{AS}} assembles your file.  Errors, which stop the assembly,
d1769 1
a1769 1
If you use the @@code{--fatal-warnings} option, @@code{@@value{AS}} considers
d1774 1
a1774 1
You can switch these options off again by specifying @@code{--warn}, which
d1778 1
a1778 1
@@section Generate Object File in Spite of Errors: @@code{-Z}
d1781 1
a1781 1
After an error message, @@code{@@value{AS}} normally produces no output.  If for
d1783 2
a1784 2
@@code{@@value{AS}} gives an error message on your program, use the @@samp{-Z}
option.  If there are any errors, @@code{@@value{AS}} continues anyways, and
d1794 1
a1794 1
source file.  @@code{@@value{AS}} syntax is similar to what many other
d1800 1
a1800 1
assembler, except that @@code{@@value{AS}} does not assemble Vax bit-fields.
d1816 1
a1816 1
The @@code{@@value{AS}} internal preprocessor:
d1873 1
a1873 1
There are two ways of rendering comments to @@code{@@value{AS}}.  In both
d1985 1
a1985 1
of @@code{@@value{AS}}.
d2083 1
a2083 1
Different versions of @@code{@@value{AS}} for different computers
d2154 2
a2155 2
@@code{@@value{AS}} to interpret the second character literally as a backslash
(which prevents @@code{@@value{AS}} from recognizing the second @@code{\} as an
d2238 2
a2239 2
interpretation of the following character.  However @@code{@@value{AS}} has no
other interpretation, so @@code{@@value{AS}} knows it is giving you the wrong
d2279 1
a2279 1
that character.  @@code{@@value{AS}} assumes your character code is ASCII:
d2287 1
a2287 1
@@code{@@value{AS}} distinguishes three kinds of numbers according to how they
d2352 1
a2352 1
@@code{@@value{AS}} to a generic binary floating point number of more than
d2355 1
a2355 1
portion of @@code{@@value{AS}} specialized to that computer.
d2366 1
a2366 1
A letter, to tell @@code{@@value{AS}} the rest of the number is a flonum.
d2435 1
a2435 1
@@code{@@value{AS}} does all processing using integers.  Flonums are computed
d2437 1
a2437 1
@@code{@@value{AS}}.
d2455 1
a2455 1
@@code{@@value{AS}} applies a bitwise @@sc{and} between @@var{mask} and
d2497 1
a2497 1
combines their contents to form a runnable program.  When @@code{@@value{AS}}
d2501 1
a2501 1
oversimplification, but it suffices to explain how @@code{@@value{AS}} uses
d2514 1
a2514 1
@@code{@@value{AS}} pads sections if needed to
d2519 1
a2519 1
An object file written by @@code{@@value{AS}} has at least three sections, any
d2527 1
a2527 1
@@code{@@value{AS}} can also generate whatever other named sections you specify
d2535 1
a2535 1
When @@code{@@value{AS}} generates SOM or ELF output for the HPPA,
d2537 1
a2537 1
@@code{@@value{AS}} can also generate whatever other named sections you
d2544 1
a2544 1
Additionally, @@code{@@value{AS}} uses different names for the standard
d2561 1
a2561 1
relocated, and how to change that data, @@code{@@value{AS}} also writes to the
d2582 1
a2582 1
In fact, every address @@code{@@value{AS}} ever uses is expressed as
d2587 1
a2587 1
Further, most expressions @@code{@@value{AS}} computes have this section-relative
d2623 1
a2623 1
use of @@code{@@value{AS}} and have no meaning except during assembly.
d2642 1
a2642 1
These sections hold your program.  @@code{@@value{AS}} and @@code{@@value{LD}} treat them as
d2735 1
a2735 1
These sections are meant only for the internal use of @@code{@@value{AS}}.  They
d2737 1
a2737 1
sections for most purposes; but they can be mentioned in @@code{@@value{AS}}
d2739 1
a2739 1
meanings to @@code{@@value{AS}}.  These sections are used to permit the
d2785 1
a2785 1
are not contiguous in the assembler source.  @@code{@@value{AS}} allows you to
d2801 1
a2801 1
of @@code{@@value{AS}}.)
d2863 1
a2863 1
restricted to @@code{@@value{AS}} there is no concept of a subsection location
d2904 1
a2904 1
@@emph{Warning:} @@code{@@value{AS}} does not place symbols in the object file in
d2930 1
a2930 1
a single line.  To work around this, the HPPA version of @@code{@@value{AS}} also
d3028 1
a3028 1
All local labels begin with @@samp{L}. Normally both @@code{@@value{AS}} and
d3031 1
a3031 1
@@samp{-L} option then @@code{@@value{AS}} retains these symbols in the
d3080 1
a3080 1
@@code{@@value{AS}} is assembling into.  Thus, the expression @@samp{melvin:
d3105 1
a3105 1
If you use a symbol without defining it, @@code{@@value{AS}} assumes zero for
d3177 1
a3177 1
These symbol attributes appear only when @@code{@@value{AS}} is configured for
d3211 1
a3211 1
@@code{@@value{AS}}.
d3217 1
a3217 1
This is an arbitrary 8-bit value.  It means nothing to @@code{@@value{AS}}.
d3240 1
a3240 1
The @@code{@@value{AS}} directives @@code{.dim}, @@code{.line}, @@code{.scl},
d3271 1
a3271 1
enough information when @@code{@@value{AS}} sees the expression to know its
d3274 1
a3274 1
@@code{@@value{AS}} aborts with an error message in this situation.
d3288 1
a3288 1
expression, and @@code{@@value{AS}} assumes a value of (absolute) 0.  This
d3328 1
a3328 1
that only the low order 32 bits are used, and @@code{@@value{AS}} pretends
d3353 1
a3353 1
@@code{@@value{AS}} has the following @@dfn{prefix operators}.  They each take
d3381 1
a3381 1
to right.  Apart from @@code{+} or @@code{-}, both arguments must be
d3668 1
a3668 1
of the source quit, it could use this directive tells @@code{@@value{AS}} to
d3676 1
a3676 1
When producing COFF output, @@code{@@value{AS}} accepts this directive as a
d3680 1
a3680 1
When producing @@code{b.out} output, @@code{@@value{AS}} accepts this directive,
d3812 1
a3812 1
no alignment is specified, @@code{@@value{AS}} will set the alignment to the
d3826 1
a3826 1
@@code{.data} tells @@code{@@value{AS}} to assemble the following statements onto the
d3842 1
a3842 1
This directive is only observed when @@code{@@value{AS}} is configured for COFF
d3859 1
a3859 1
The @@samp{.desc} directive is not available when @@code{@@value{AS}} is
d3861 1
a3861 1
object format.  For the sake of compatibility, @@code{@@value{AS}} accepts
d3879 1
a3879 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d3893 1
a3893 1
@@code{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
d3915 1
a3915 1
@@code{.else} is part of the @@code{@@value{AS}} support for conditional
d3924 1
a3924 1
@@code{.elseif} is part of the @@code{@@value{AS}} support for conditional
d3932 1
a3932 1
@@code{.end} marks the end of the assembly file.  @@code{@@value{AS}} does not
d3945 1
a3945 1
@@code{@@value{AS}} is configured to generate @@code{b.out}, it accepts this
d3959 1
a3959 1
@@code{.endif} is part of the @@code{@@value{AS}} support for conditional assembly;
d3994 2
a3995 2
If @@code{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@code{-Z} option was used, it will not generate an
d4007 1
a4007 1
with other assemblers---but it is ignored.  @@code{@@value{AS}} treats
d4015 2
a4016 2
or more, @@code{@@value{AS}} will print a warning message.  If the value is less
than 500, @@code{@@value{AS}} will print an error message.  The message will
d4027 1
a4027 1
@@code{.file} tells @@code{@@value{AS}} that we are about to start a new logical
d4032 1
a4032 1
old @@code{@@value{AS}} programs.
d4034 1
a4034 1
In some configurations of @@code{@@value{AS}}, @@code{.file} has already been
d4052 1
a4052 1
byte-order of an integer on the computer @@code{@@value{AS}} is assembling for.
d4071 1
a4071 1
@@code{@@value{AS}} is configured.
d4157 1
a4157 1
@@code{@@value{AS}} simply accepts the directive for source-file
d4387 1
a4387 1
@@code{@@value{AS}} accepts this directive, for compatibility with other
d4408 1
a4408 1
@@code{@@value{AS}} will no longer support this directive: it is recognized only
d4421 1
a4421 1
@@code{b.out} object-code formats, @@code{@@value{AS}} still recognizes it
d4476 1
a4476 1
Tell @@code{@@value{AS}} to change the logical line number.  @@var{line-number}
d4483 1
a4483 1
This directive is accepted, but ignored, when @@code{@@value{AS}} is
d4494 2
a4495 2
If @@var{val} is non-zero, this tells @@code{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@code{@@value{AS}} to exit MRI mode.  This change
d4616 1
a4616 1
@@code{@@value{AS}} maintains a counter of how many macros it has
d4671 1
a4671 1
@@code{@@value{AS}} issues a warning, then pretends the section of @@var{new-lc}
d4681 1
a4681 1
Because @@code{@@value{AS}} tries to assemble programs in one pass, @@var{new-lc}
d4771 1
a4771 1
@@code{@@value{AS}} will print @@var{string} on the standard output during
d4804 1
a4804 1
@@code{@@value{AS}} generates formfeeds whenever the specified number of
d4905 1
a4905 1
configured to generate @@code{b.out} output format, @@code{@@value{AS}}
d5085 1
a5085 1
@@code{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
d5104 1
a5104 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d5179 1
a5179 1
The symbols are not entered in the @@code{@@value{AS}} hash table: they
d5354 1
a5354 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d5363 1
a5363 1
Tells @@code{@@value{AS}} to assemble the following statements onto the end of
d5390 1
a5390 1
@@code{@@value{AS}} is configured for @@code{b.out} output, it accepts this
d5441 1
a5441 1
@@samp{.val} is used only for COFF output; when @@code{@@value{AS}} is
d5490 1
a5490 1
For each expression, @@code{@@value{AS}} emits a 32-bit number.
d5493 1
a5493 1
For each expression, @@code{@@value{AS}} emits a 16-bit number.
d5519 1
a5519 1
@@code{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
d5521 1
a5521 1
compilers as part of jump tables.  Therefore, when @@code{@@value{AS}} assembles a
d5523 1
a5523 1
@@code{sym1} and @@code{sym2} does not fit in 16 bits, @@code{@@value{AS}}
d5541 1
a5541 1
@@emph{This feature may be disabled by compiling @@code{@@value{AS}} with the
d5566 2
a5567 2
each machine where @@code{@@value{AS}} runs.  Floating point representations
vary as well, and @@code{@@value{AS}} often supports a few additional
d5570 1
a5570 1
@@code{@@value{AS}} support special pseudo-instructions for branch
d5691 1
a5691 1
chapter describes the specific @@code{@@value{AS}} features for each
d5813 1
a5813 1
Your bug reports play an essential role in making @@code{@@value{AS}} reliable.
d5817 2
a5818 2
entire community by making the next version of @@code{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@code{@@value{AS}}.
d5840 1
a5840 1
@@code{@@value{AS}} bug.  Reliable assemblers never crash.
d5844 1
a5844 1
If @@code{@@value{AS}} produces an error message for valid input, that is a bug.
d5848 1
a5848 1
If @@code{@@value{AS}} does not produce an error message for invalid input, that
d5854 1
a5854 1
of @@code{@@value{AS}} are welcome in any case.
d5863 1
a5863 1
you obtained @@code{@@value{AS}} from a support organization, we recommend you
d5870 1
a5870 1
In any event, we also recommend that you send bug reports for @@code{@@value{AS}}
d5900 1
a5900 1
The version of @@code{@@value{AS}}.  @@code{@@value{AS}} announces it if you start
d5904 1
a5904 1
the bug in the current version of @@code{@@value{AS}}.
d5907 1
a5907 1
Any patches you may have applied to the @@code{@@value{AS}} source.
d5914 1
a5914 1
What compiler (and its version) was used to compile @@code{@@value{AS}}---e.g.
d5932 1
a5932 1
@@code{@@value{AS}} is being run.
d5938 1
a5938 1
Of course, if the bug is that @@code{@@value{AS}} gets a fatal signal, then we
d5945 1
a5945 1
@@code{@@value{AS}} is out of synch, or you have encountered a bug in the C
d5953 1
a5953 1
If you wish to suggest changes to the @@code{@@value{AS}} source, send us context
d5956 1
a5956 1
discuss something in the @@code{@@value{AS}} source, refer to it by context, not
d5994 1
a5994 1
Sometimes with a program as complicated as @@code{@@value{AS}} it is very hard to
d6013 1
a6013 1
If you have contributed to @@code{@@value{AS}} and your name isn't listed here,
d6074 1
a6074 1
Steve Chamberlain made @@code{@@value{AS}} able to generate listings.
@


1.48
log
@2001-10-17  Chris Demetriou  <cgd@@broadcom.com>

	* doc/as.texinfo (MIPS ISA options):  Added accidentally
	omitted "-mips64" option to list of options.
@
text
@d46 1
d351 5
d889 4
d5579 3
d5707 4
@


1.47
log
@[gas/ChangeLog]
	* config/tc-ppc.c (md_parse_option): New -m7410, -m7450 and -m7455
	flags, equivalent to -m7400.  New -maltivec to enable AltiVec
	instructions.  New -mbook64 and -mbooke/-mbooke32 flags to enable
	64-bit and 32-bit BookE support, respectively.  Change -m403 and
	-m405 to set PPC403 option.
	(md_show_usage): Adjust for new options.
	* doc/all.texi: Set PPC.
	* doc/as.texinfo: Add PPC support and pull in c-ppc.texi.
	* doc/c-ppc.texi: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-ppc.texi.
	* doc/Makefile.in: Regenerate.

[gas/testsuite/ChangeLog]
	* gas/ppc/booke.s: New test for Motorola BookE.
	* gas/ppc/booke.d: New file.
	* gas/ppc/ppc.exp: Test booke.s.

[include/opcode/ChangeLog]
	* ppc.h (PPC_OPCODE_BOOKE, PPC_OPCODE_403): New opcode flags for
	BookE and PowerPC403 instructions.

[opcodes/ChangeLog]
	* ppc-opc.c (insert_de, extract_de, insert_des, extract_des): New
	instruction field instruction/extraction functions for new BookE
	DE form instructions.
	(CT): New macro for CT field in an X form instruction.
	(DE, DES, DEO, DE_MASK): New macros for DE/DES fields in DE form
	instructions.
	(PPC64): Don't include PPC_OPCODE_PPC.
	(403): New opcode macro for PPC403 processors.
	(BOOKE): New opcode macro for BookE processors.
	(bce, bcel, bcea, bcela, bclre, bclrel: New BookE instructions.
	(bcctre, bcctrel, be, bel, bea, bela, icbt, icbte, lwzxe): Likewise.
	(dcbste, lwzuxe, luxe, dcbfe, lbzxe, lwarxe, lbzuxe): Likewise.
	(stwcxe, stwxe, stxe, stwuxe, stuxe, stbxe, dcbtste, stbuxe): Likewise.
	(mfapidi, dcbte, lhzxe, lhzuxe, lhaxe, lhauxe, subfe64): Likewise.
	(subfeo64, adde64, addeo64, sthxe, sthuxe, subfze64): Likewise.
	(subfzeo64, addze64, addzeo64, dcbie, subfme64, subfmeo64): Likewise.
	(addme64, addmeo64, stdcxe., mcrxr64, lwbrxe, lfsxe, lfsuxe): Likewise.
	(lfdxe, lfduxe, stwbrxe, stfsxe, stfsuxe, stfdxe, dcbae): Likewise.
	(stfduxe, tlbivax, tlbivaxe, lhbrxe, ldxe, lduxe, tlbsx): Likewise.
	(tlbsxe, sthbrxe, stdxe, stduxe, icbie, stfiwxe, dcbze, lbze): Likewise.
	(lbzue, ldue, lhze, lhzue, lhae, lhaue, lwze, lwzue): Likewise.
	(stbe, stbue, sthe, sthue, stwe, stwue, lfse, lfsue, lfde): Likewise.
	(lfdue, stde, stdue, stfse, stfsue, stfde, stfdue): Likewise.

	* ppc-dis.c (print_insn_big_powerpc, print_insn_little_powerpc): Look
	for a disassembler option of `booke', `booke32' or `booke64' to enable
	BookE support in the disassembler.
@
text
@d785 1
@


1.46
log
@	* doc/as.texinfo: Document M and S ELF section flags.

	* emultempl/elf32.em (gld_*_list_options): Include -z combreloc and
	-z nocombreloc in usage.
@
text
@d48 1
d295 10
d1860 3
d5577 3
d5705 4
@


1.45
log
@	* doc/as.texinfo (listing): Fix typo.
@
text
@d4899 1
a4899 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}]]
d4911 4
d4924 7
@


1.44
log
@Improve documentation on local labels and add documenation about dollar labels.
@
text
@d1398 1
a1398 1
@@section Configuringh listing output: @@code{--listing}
@


1.43
log
@Fix grammatical errors
@
text
@d2910 39
a2948 20
There are ten local symbol names, which are re-used throughout the
program.  You may refer to them using the names @@samp{0} @@samp{1}
@@dots{} @@samp{9}.  To define a local symbol, write a label of the form
@@samp{@@b{N}:} (where @@b{N} represents any digit).  To refer to the most
recent previous definition of that symbol write @@samp{@@b{N}b}, using the
same digit as when you defined the label.  To refer to the next
definition of a local label, write @@samp{@@b{N}f}---where @@b{N} gives you
a choice of 10 forward references.  The @@samp{b} stands for
``backwards'' and the @@samp{f} stands for ``forwards''.

Local symbols are not emitted by the current @@sc{gnu} C compiler.

There is no restriction on how you can use these labels, but
remember that at any point in the assembly you can refer to at most
10 prior local labels and to at most 10 forward local labels.

Local symbol names are only a notation device.  They are immediately
transformed into more conventional symbol names before the assembler
uses them.  The symbol names stored in the symbol table, appearing in
error messages and optionally emitted to the object file have these
d2960 7
a2966 9
@@item @@var{digit}
If the label is written @@samp{0:} then the digit is @@samp{0}.
If the label is written @@samp{1:} then the digit is @@samp{1}.
And so on up through @@samp{9:}.

@@item @@kbd{C-A}
This unusual character is included so you do not accidentally invent
a symbol of the same name.  The character has ASCII value
@@samp{\001}.
d2969 4
a2972 4
This is a serial number to keep the labels distinct.  The first
@@samp{0:} gets the number @@samp{1}; The 15th @@samp{0:} gets the
number @@samp{15}; @@emph{etc.}.  Likewise for the other labels @@samp{1:}
through @@samp{9:}.
d2975 21
a2995 2
For instance, the first @@code{1:} is named @@code{L1@@kbd{C-A}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-A}44}.
@


1.42
log
@Add .incbin pseudo op
@
text
@d4140 3
a4142 2
read. Note that the data from is not aligned in any way, make sure to proper
alignment is provided before and after the @@code{incbin} directive.
@


1.41
log
@2001-07-05  Ben Elliston  <bje@@redhat.com>

	* doc/c-m88k.texi: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-m88k.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi: Set M880X0.
	* doc/as.texinfo: Hook in m88k-dependent documentation.
@
text
@d3455 1
d4127 15
@


1.40
log
@Document use of comparison operators as infix operators
@
text
@d43 1
d1864 3
d1877 1
a1877 1
@@c FIXME What about m88k, i860?
d5484 3
d5604 4
@


1.39
log
@2001-06-11  H.J. Lu  <hjl@@gnu.org>

	* NEWS: Updated for the new -n option for the MIPS assembler.

	* config/tc-mips.c (md_show_usage): Add -n.

	* doc/as.texinfo: Document the new -n option.
	* doc/c-mips.texi: Likewise.
	* doc/as.1: Regenerated.
@
text
@d3314 1
a3314 1
Lowest Precedence
d3334 35
@


1.38
log
@* as.texinfo (Fill): Replace "result" with "repeat".
@
text
@d335 1
a335 1
 [ --trap ] [ --break ]
d832 4
@


1.37
log
@Automate generate on man pages
@
text
@d3890 1
a3890 1
@@var{result}, @@var{size} and @@var{value} are absolute expressions.
@


1.36
log
@Document --listing-XXX command line switches.
Explain why listings behave differently when -pipe is used.
@
text
@d22 32
d123 1
d126 8
a133 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
d235 6
d244 1
d246 2
a247 1
 [ -f ] [ --gstabs ] [ --gdwarf2 ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -K ] [ -L ]
d261 6
a266 4
 [ -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 | -m[arm]6 | -m[arm]60 |
   -m[arm]600 | -m[arm]610 | -m[arm]620 | -m[arm]7[t][[d]m[i]][fe] | -m[arm]70 |
   -m[arm]700 | -m[arm]710[c] | -m[arm]7100 | -m[arm]7500 | -m[arm]8 |
   -m[arm]810 | -m[arm]9 | -m[arm]920 | -m[arm]920t | -m[arm]9tdmi |
d268 3
a270 2
 [ -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m | -m[arm]v4 | -m[arm]v4t |
   -m[arm]v5 | -[arm]v5t | -[arm]v5te ]
d274 3
a276 4
 [ -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant ]
 [ -mthumb-interwork ]
 [ -moabi ]
 [ -k ]
d297 2
a298 1
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ] [ -32 | -64 ]
d309 2
a310 1
 [ -ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB | -AKC | -AMC ]
d314 2
a315 1
 [ --m32rx | --[no-]warn-explicit-parallel-conflicts | --W[n]p ]
d326 3
a328 2
 [ --force-long-branchs ] [ --short-branchs ] [ --strict-direct-mode ]
 [ --print-insn-syntax ] [ --print-opcodes ] [ --generate-example ]
d339 1
d342 2
d601 3
a603 2
@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030 | -m68040 | -m68060
@@itemx | -m68302 | -m68331 | -m68332 | -m68333 | -m68340 | -mcpu32 | -m5200
d866 2
d953 2
d983 2
d1022 1
d1066 1
d1087 2
d1146 2
d1157 2
d1209 2
d1230 2
@


1.35
log
@Fix copyright notices
@
text
@d205 2
d374 16
d1175 1
d1229 7
d1320 39
@


1.34
log
@Note that some flags to the COFF version of .section remove attributes rather
than setting them.
@
text
@d2 2
a3 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 2000, 2001
@


1.33
log
@Add PDP-11 support
@
text
@d4643 3
a4645 1
loaded and writable.
@


1.32
log
@2001-01-13  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: Fix spelling and cross-references.

	* doc/c-arm.texi: Fix typos.  Say that `;' is a line separator
	character for all systems, not just GNU/Linux.  Make it explicit
	that `-k' doesn't affect code generation, just ELF flags.
@
text
@d549 31
d1701 3
d5308 3
d5427 4
@


1.32.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
@@c  Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c  2001
@


1.32.2.2
log
@Document use of comparison operators in expressions
@
text
@d3140 1
a3140 1
Low Precedence
a3159 35

@@cindex comparison expressions
@@cindex expressions, comparison
@@item  ==
@@dfn{Is Equal To}
@@item <>
@@dfn{Is Not Equal To}
@@item <
@@dfn{Is Less Than}
@@itemx >
@@dfn{Is Greater Than}
@@itemx >=
@@dfn{Is Greater Than Or Equal To}
@@itemx <=
@@dfn{Is Less Than Or Equal To}

The comparison operators can be used as infix operators.  A true results has a
value of -1 whereas a false result has a value of 0.   Note, these operators
perform signed comparisons.
@@end table

@@item Lowest Precedence

@@table @@code
@@item &&
@@dfn{Logical And}.

@@item ||
@@dfn{Logical Or}.

These two logical operations can be used to combine the results of sub
expressions.  Note, unlike the comparison operators a true result returns a
value of 1 but a false results does still return 0.  Also note that the logical
or operator has a slightly lower precedence than logical and.

@


1.31
log
@Updated ARC assembler from arccores.com
@
text
@d2 1
a2 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 2000
d90 1
a90 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d141 1
a141 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d221 1
a221 1
   -m[arm]v5 | -[arm]v5t ]
d439 1
a439 1
Select which Floating Point architcture is the target.
d745 1
a745 1
The default can be overidden by the @@samp{-sifilter} command line option.
d1033 1
a1033 1
@@cindex error messsages
d2403 1
a2403 1
is used to hold unitialized variables or common storage.  The length of
d3794 2
a3795 1
@@pxref{Internal,,@@code{.internal}} and @@pxref{Protected,,@@code{.protected}}
d3952 2
a3953 1
@@pxref{Hidden,,@@code{.hidden}} and @@pxref{Protected,,@@code{.protected}}
d4396 3
a4398 2
@@pxref{Section}, @@xref{SubSection}, @@pxref{PushSection}, and
@@pxref{PopSection}.
d4416 3
a4418 2
@@pxref{Section}, @@xref{SubSection}, @@pxref{PushSection}, and
@@pxref{Previous}.
d4439 1
a4439 1
@@pxref{Hidden} and @@pxref{Internal}
d4483 3
a4485 2
@@pxref{Section}, @@xref{SubSection}, @@pxref{PopSection}, and
@@pxref{Previous}.
d4487 1
a4487 1
This directive is a synonym for @@code{.section}.  It psuhes the current section
d4622 3
a4624 2
@@xref{SubSection}, @@pxref{PushSection}@@pxref{PopSection}, and
@@pxref{Previous}.
d4634 1
a4634 1
combintion of the following characters:
d4920 3
a4922 2
@@pxref{Section}, @@xref{PushSection}, @@pxref{PopSection}, and
@@pxref{Previous}.
d4971 1
a4971 1
the file being assembled. It is similiar to @@var{name2@@@@nodename}. The
d5045 1
a5045 1
function symbol or an ojbect symbol.  There are five different syntaxes
d5047 1
a5047 1
comptability with various other assemblers.  The syntaxes supported are:
d5114 1
a5114 1
parent whoes addend is the value of the child symbol.  As a special case the
d5123 1
a5123 1
This directive sets the weak attribute on the comma seperated list of symbol
d5164 1
a5164 1
@@code{@@value{AS}} occasionlly does strange things to @@samp{.word} directives.
@


1.30
log
@Update address for bug reports.
@
text
@d211 2
a212 1
 [ -mbig-endian | -mlittle-endian ]
d420 4
a423 11

@@cindex ARC endianness
@@cindex endianness, ARC
@@cindex big endian output, ARC
@@item -mbig-endian
Generate ``big endian'' format output.

@@cindex little endian output, ARC
@@item -mlittle-endian
Generate ``little endian'' format output.

d5299 1
a5299 74
@@ifset GENERIC
@@page
@@node ARC-Dependent
@@chapter ARC Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter ARC Dependent Features
@@end ifclear

@@cindex ARC support
@@menu
* ARC-Opts::                    Options
* ARC-Float::                   Floating Point
* ARC-Directives::              Sparc Machine Directives
@@end menu

@@node ARC-Opts
@@section Options

@@cindex options for ARC
@@cindex ARC options
@@cindex architectures, ARC
@@cindex ARC architectures
The ARC chip family includes several successive levels (or other
variants) of chip, using the same core instruction set, but including
a few additional instructions at each level.

By default, @@code{@@value{AS}} assumes the core instruction set (ARC
base).  The @@code{.cpu} pseudo-op is intended to be used to select
the variant.

@@table @@code
@@cindex @@code{-mbig-endian} option (ARC)
@@cindex @@code{-mlittle-endian} option (ARC)
@@cindex ARC big-endian output
@@cindex ARC little-endian output
@@cindex big-endian output, ARC
@@cindex little-endian output, ARC
@@item -mbig-endian
@@itemx -mlittle-endian
Any @@sc{arc} configuration of @@code{@@value{AS}} can select big-endian or
little-endian output at run time (unlike most other @@sc{gnu} development
tools, which must be configured for one or the other).  Use
@@samp{-mbig-endian} to select big-endian output, and @@samp{-mlittle-endian}
for little-endian.
@@end table

@@node ARC-Float
@@section Floating Point

@@cindex floating point, ARC (@@sc{ieee})
@@cindex ARC floating point (@@sc{ieee})
The ARC cpu family currently does not have hardware floating point
support.  Software floating point support is provided by @@code{GCC}
and uses @@sc{ieee} floating-point numbers.

@@node ARC-Directives
@@section ARC Machine Directives

@@cindex ARC machine directives
@@cindex machine directives, ARC
The ARC version of @@code{@@value{AS}} supports the following additional
machine directives:

@@table @@code
@@item .cpu
@@cindex @@code{cpu} directive, SPARC
This must be followed by the desired cpu.
The ARC is intended to be customizable, @@code{.cpu} is used to
select the desired variant [though currently there are none].

@@end table

@


1.29
log
@2001-01-06  Jan Hubicka <jh@@suse.cz>, Andreas Jaeger  <aj@@suse.de>

	* doc/as.texinfo: Document '#' as comment character for i386 and
	x86_64. Add AMD x86-64 into menu of machine dependent information.

	* doc/c-i386.texi: Document x86_64 extensions.
@
text
@d5560 1
a5560 1
to @@samp{bug-gnu-utils@@@@gnu.org}.
@


1.28
log
@Add MIPS SB1 machine
@
text
@d1670 3
d1704 1
a1704 1
@@c FIXME What about i386, m88k, i860?
d5250 1
a5250 1
* i386-Dependent::              Intel 80386 Dependent Features
@


1.27
log
@Add MIPS V and MIPS 64 machine numbers
@
text
@d692 3
a694 2
Generate code for a particular MIPS cpu.  This has little effect on the
assembler, but it is passed by @@code{@@value{GCC}}.
@


1.26
log
@Add MIPS32 as a seperate MIPS architecture
@
text
@d279 2
a280 1
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -mips4 ] [ -mips32 ]
d678 5
a682 2
@@samp{-mips2} to the @@sc{r6000} processor, @@samp{-mips3} to the @@sc{r4000}
processor, @@samp{-mips32} to a generic @@sc{MIPS32} processor.
@


1.25
log
@2000-11-13  H.J. Lu  <hjl@@gnu.org>

	* config/obj-elf.c (elf_frob_symbol): Support
	".symver name,name2@@@@@@nodename".
	(elf_frob_file_before_adjust): Likewise.

	* doc/as.texinfo: Updated for ".symver name,name2@@@@@@nodename"
	and ".symver name,name2@@@@@@nodename".
	Fix a typo.
@
text
@d279 2
a280 1
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -m4650 ] [ -no-m4650 ] [ -mips32 ] [ -no-mips32 ]
d673 2
d677 2
a678 2
@@samp{-mips2} to the @@sc{r6000} processor, and @@samp{-mips3} to the @@sc{r4000}
processor.
a685 6

@@item -mips32
@@itemx -no-mips32
Generate code for the @@sc{MIPS32} architecture. This tells the assembler to
accept ISA level 2 instructions and MIPS32 extensions including some @@sc{r4000}
instructions.
@


1.24
log
@2000-11-07  H.J. Lu  <hjl@@gnu.org>

	* doc/as.texinfo (.symver): Updated for versioned symbol
	reference.

	* obj.h (format_ops): Add the frob_file_before_adjust field.

	* config/obj-aout.c (aout_format_ops): Set the
	frob_file_before_adjust field to 0.
	* config/obj-coff.c (coff_format_ops): Likewise.
	* config/obj-ecoff.c (ecoff_format_ops): Likewise.

	* config/obj-elf.c (obj_elf_symver): Allow duplicated version
	name.
	(elf_frob_file_before_adjust): New function to remove unneeded
	versioned symbols from the symbol table.
	(elf_format_ops): Set the frob_file_before_adjust field to
	elf_frob_file_before_adjust.

	* config/obj-elf.h (obj_frob_file_before_adjust): Defined if
	not defined.

	* config/obj-multi.h (obj_frob_file_before_adjust): Defined.
@
text
@d4936 1
a4936 1
For ELF targets, the @@code{.symver} directive is used like this:
d4941 1
a4941 1
being assembled, the @@code{.versym} directive effectively creates a symbol
d4959 18
@


1.23
log
@Add GNU Free Documentation License
@
text
@d4940 2
a4941 2
In this case, the symbol @@var{name} must exist and be defined within the file
being assembled.  The @@code{.versym} directive effectively creates a symbol
d4954 5
@


1.22
log
@Add --gdwarf2 support to ARM toolchain
@
text
@d92 6
a97 3
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
a105 7
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
d143 6
a148 8
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.
a149 2
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
d162 5
d178 1
d5765 363
@


1.21
log
@Added new option --target-help.
@
text
@d341 2
a342 1
may help debugging assembler code, if the debugger can handle it.
@


1.20
log
@Add support for the MIPS32
@
text
@d208 1
a208 1
 [ -w ] [ -x ] [ -Z ]
d345 3
@


1.19
log
@Restore seemingly extraneous whitespace.  It is required by older
versions of texinfo, including the one on sourceware.cygnus.com.
@
text
@d281 1
a281 1
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -m4650 ] [ -no-m4650 ]
d681 6
@


1.18
log
@Remove extraneous whotespace
@
text
@d3184 1
d3201 1
d3210 1
d3222 1
d3230 1
d3239 1
d3247 1
d3255 1
d3266 1
d3271 1
d3277 1
d3285 1
d3296 1
d3303 1
d3307 1
d3315 1
d3322 1
@


1.17
log
@Update to include descriptions of .popsection, .previous, .pushsection,
.subsection, .version, .vtable_entry, .vtable_inherit and .weak.
@
text
@a3301 2
@@end ifset
@@ifset ELF
a3303 2
@@end ifset
@@ifset ELF
a3309 1

a4394 1

a4460 1

d4711 1
a4712 1

a4882 1

a4895 1

a4897 1

d5044 1
a5044 1
@@end ifset 
@


1.16
log
@2000-07-31  Jason Eckhardt  <jle@@cygnus.com>

        * doc/c-i860.texi: New file.
        * doc/Makefile.am (CPU_DOCS): Add c-i860.texi.
        * doc/Makefile.in: Regenerate.
        * doc/all.texi: Add I860 as relevant architecture.
        * doc/as.texinfo: Include i860 dependent file c-i860.texi.
@
text
@a3183 1

a3199 1

a3207 1

a3218 1

d3223 3
d3231 3
a3240 1

a3247 1

a3249 1

d3254 4
d3259 3
d3264 3
a3273 1

d3277 1
a3277 4
@@ifset COFF
* Size::                        @@code{.size}
@@end ifset

a3283 1

d3287 1
a3292 1

d3295 2
a3297 1
* Type::                        @@code{.type @@var{int}}
d3301 8
a3308 1
* Visibility::                  @@code{.internal @@var{name}, .hidden @@var{name}, .protected @@var{name}}
a3309 2

* Uleb128::                     @@code{.uleb128 @@var{expressions}}
d3314 1
d3768 15
d3925 16
d4368 35
d4410 17
d4454 16
d4547 1
a4547 1
@@section @@code{.section @@var{name}}
a4557 1
@@ifset COFF
d4560 1
d4591 11
a4603 1
@@ifset ELF
d4605 1
d4607 1
a4607 1
.section @@var{name}[, "@@var{flags}"[, @@@@@@var{type}]]
d4609 1
d4636 1
d4640 1
d4651 5
a4655 1
@@end ifset
a4715 1
@@ifset COFF
d4717 2
a4718 1
@@section @@code{.size}
a4719 1
@@cindex @@code{size} directive
d4723 1
a4724 1

d4729 8
a4736 1
@@end ifset
d4890 18
a4979 1
@@ifset COFF
d4981 1
a4981 1
@@section @@code{.type @@var{int}}
d4988 1
a4989 1

d4994 35
a5028 1
@@end ifset
d5047 3
a5049 2
@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}
d5051 4
a5054 4
@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.
d5057 2
a5058 22
@@node Visibility
@@section @@code{.internal}, @@code{.hidden}, @@code{.protected}
@@cindex @@code{internal} directive
@@cindex @@code{hidden} directive
@@cindex @@code{protected} directive
@@cindex symbol visibility

These directives can be used to set the visibility of a specified symbol.  By
default a symbol's visibility is set by its binding (local, global or weak),
but these directives can be used to override that.

A visibility of @@code{protected} means that any references to the symbol from
within the component that defines the symbol must be resolved to the definition
in that component, even if a definition in another component would normally
preempt this.

A visibility of @@code{hidden} means that the symbol is not visible to other 
components.  Such a symbol is always considered to be protected as well.

A visibility of @@code{internal} is the same as a visibility of @@code{hidden},
except that some extra, processor specific processing must also be performed
upon the symbol. 
d5060 13
a5072 1
For ELF targets, the directives are used like this:
d5074 3
a5076 5
@@smallexample
.internal @@var{name}
.hidden @@var{name}
.protected @@var{name}
@@end smallexample
d5078 3
@


1.15
log
@TI C54x target.
@
text
@d5030 3
d5212 4
@


1.14
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d252 4
d630 16
d5054 3
d5247 4
d5553 3
@


1.13
log
@2000-05-29  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: (Local Labels): Delete misplaced mention of ARM.
@
text
@d270 5
d566 36
d1658 3
d5019 3
d5198 4
@


1.12
log
@2000-05-29  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: Update copyright dates.
	* NEWS: Mention ARM ELF support.
@
text
@a1196 3
@@ifset ARM
@@samp{;} for the ARM family;
@@end ifset
@


1.11
log
@Document behaviour of .align 0 for ARM targets.
Remove incomplete v5e code from tc-arm.c
@
text
@d90 1
a90 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.
d145 1
a145 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.
@


1.10
log
@Add 'avr' to Makefile.am
Add M32R docs to as.texinfo
@
text
@d3299 2
a3300 1
For other systems, including the i386 using a.out format, it is the
@


1.9
log
@Add IBM 370 support.
@
text
@d260 3
d268 1
d493 20
a560 1

d685 9
d4971 3
d5147 3
@


1.9.2.1
log
@2000-05-29  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: Update copyright dates.
	* NEWS: Mention ARM ELF support.
@
text
@d90 1
a90 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d145 1
a145 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
@


1.9.2.2
log
@2000-04-24  Nick Clifton  <nickc@@cygnus.com>

	* doc/c-arm.texi (ARM Directives): Document behaviour of .align 0.
	* doc/as.texinfo (Align): Include arm and strongarm in list of
	targets that have the second form of the behaviour of the .align
	directive.

2000-05-29  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: (Local Labels): Delete misplaced mention of ARM.
@
text
@d1165 3
d3267 1
a3267 2
For other systems, including the i386 using a.out format, and the arm and
strongarm, it is the
@


1.8
log
@New elseif directive has been added.
@
text
@d2 1
a2 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 1998
d4930 3
d5100 4
d5434 2
@


1.7
log
@fixup ARM documentation
@
text
@d3112 1
d3470 8
d3706 2
@


1.6
log
@ELF visibility patch from Martin Loewis
@
text
@d1558 3
@


1.5
log
@* as.c (show_usage): Document new options.
(parse_args): Add --no-warn, --warn, --fatal-warnings,
which become 'W', OPTION_WARN, and OPTION_WARN_FATAL.
(parse_args): Parse the new options.
(main): If there were warnings, and --fatal-warnings
was specified, print an error.
* as.h: New variable, flag_fatal_warnings, for new option.
@
text
@d3198 3
d4761 34
@


1.4
log
@1999-09-04  Steve Chamberlain  <sac@@pobox.com>

	* config/tc-pj.c: New file, supports picoJava in ELF.
	* config/tc-pj.h: Ditto.
	* configure.in (pjl*, pj*): New targets.
	* Makefile.am: Rebuild dependencies.
	(CPU_TYPES): Add pj.
	(TARGET_CPU_CFILES): Add config/tc-pj.c.
	(TARGET_CPU_HFILES): Add config/tc-pj.h.
	* doc/c-pj.texi: New file.
	* doc/as.texinfo: Add some PJ specifics.
	* doc/all.texi: Add PJ to the list of all architectures, sort them
	all alphabetically.
	* doc/Makefile.in (CPU_DOCS): Add c-pj.texi.
	* configure, Makefile.in, doc/Makefile.in: Rebuild.
@
text
@d207 2
a208 1
 [ -version ] [ --version ] [ -W ] [ -w ] [ -x ] [ -Z ]
d374 1
d377 6
d1035 1
a1035 1
* W::             -W to suppress warnings
d1411 1
a1411 1
@@section Suppress Warnings: @@code{-W}
a1412 3
@@kindex -W
@@cindex suppressing warnings
@@cindex warnings, suppressing
d1417 20
a1436 4
If you use this option, no warnings are issued.  This option only
affects the warning messages: it does not change any particular of how
@@code{@@value{AS}} assembles your file.  Errors, which stop the assembly, are
still reported.
@


1.3
log
@Document new command line switches.
@
text
@d242 3
d510 20
d1549 3
d4873 3
d5044 4
@


1.2
log
@	* doc/as.texinfo (Section): Document 's' flag for COFF version.

1999-08-08  Mumit Khan  <khan@@xraylith.wisc.edu>

	* config/obj-coff.c (obj_coff_section): Handle 's' (shared)
	section flag.
@
text
@d205 1
a205 1
 [ -f ] [ --gstabs ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -K ] [ -L ]
d215 7
a221 2
 [ -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 | -m[arm]6 | -m[arm]7[t][[d]m[i]] ]
 [ -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m | -m[arm]v4 | -m[arm]v4t ]
d225 4
a228 1
 [ -mapcs-32 | -mapcs-26 ]
d322 4
d410 4
a413 2
@@item -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 | -m[arm]6 | -m[arm]7[t][[d]m] | -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m | -m[arm]v4 | -m[arm]v4t 
Specify which variant of the ARM architecture is the target.
d418 1
a418 1
@@item -mapcs-32 | -mapcs-26
d422 5
@


1.1
log
@Initial revision
@
text
@d4294 2
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

