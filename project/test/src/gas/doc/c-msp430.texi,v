head	1.10;
access;
symbols
	binutils-2_24-branch:1.10.0.2
	binutils-2_24-branchpoint:1.10
	binutils-2_21_1:1.4
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.6
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.4
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.2
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.4
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.3.0.14
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.4.0.2
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.3.0.12
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.10
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.8
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.6
	binutils-2_18-branchpoint:1.3
	binutils-csl-coldfire-4_1-32:1.3
	binutils-csl-sourcerygxx-4_1-32:1.3
	binutils-csl-innovasic-fido-3_4_4-33:1.3
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.3
	binutils-csl-sourcerygxx-4_1-30:1.3
	binutils-csl-coldfire-4_1-28:1.3
	binutils-csl-sourcerygxx-4_1-29:1.3
	binutils-csl-sourcerygxx-4_1-28:1.3
	binutils-csl-arm-2006q3-27:1.3
	binutils-csl-sourcerygxx-4_1-27:1.3
	binutils-csl-arm-2006q3-26:1.3
	binutils-csl-sourcerygxx-4_1-26:1.3
	binutils-csl-sourcerygxx-4_1-25:1.3
	binutils-csl-sourcerygxx-4_1-24:1.3
	binutils-csl-sourcerygxx-4_1-23:1.3
	binutils-csl-sourcerygxx-4_1-21:1.3
	binutils-csl-arm-2006q3-21:1.3
	binutils-csl-sourcerygxx-4_1-22:1.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.3
	binutils-csl-sourcerygxx-4_1-20:1.3
	binutils-csl-arm-2006q3-19:1.3
	binutils-csl-sourcerygxx-4_1-19:1.3
	binutils-csl-sourcerygxx-4_1-18:1.3
	binutils-csl-renesas-4_1-9:1.3
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.3
	binutils-csl-renesas-4_1-7:1.3
	binutils-csl-renesas-4_1-6:1.3
	binutils-csl-sourcerygxx-4_1-17:1.3
	binutils-csl-sourcerygxx-4_1-14:1.3
	binutils-csl-sourcerygxx-4_1-15:1.3
	binutils-csl-sourcerygxx-4_1-13:1.3
	binutils-2_17:1.3
	binutils-csl-sourcerygxx-4_1-12:1.3
	binutils-csl-sourcerygxx-3_4_4-21:1.3
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.3
	binutils-csl-sourcerygxx-4_1-8:1.3
	binutils-csl-sourcerygxx-4_1-7:1.3
	binutils-csl-arm-2006q1-6:1.3
	binutils-csl-sourcerygxx-4_1-6:1.3
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.3
	binutils-csl-sourcerygxx-3_4_4-19:1.3
	binutils-csl-coldfire-4_1-10:1.3
	binutils-csl-sourcerygxx-4_1-5:1.3
	binutils-csl-sourcerygxx-4_1-4:1.3
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.3
	binutils-csl-sourcerygxx-3_4_4-17:1.3
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.3.0.4
	binutils-2_17-branchpoint:1.3
	binutils-csl-2_17-branch:1.3.0.2
	binutils-csl-2_17-branchpoint:1.3
	binutils-csl-gxxpro-3_4-branch:1.2.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.4
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.2
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	binutils-2_15-branch:1.1.0.8
	cagney_bfdfile-20040213-branch:1.1.0.6
	cagney_bfdfile-20040213-branchpoint:1.1
	cagney_bigcore-20040122-branch:1.1.0.4
	cagney_bigcore-20040122-branchpoint:1.1
	csl-arm-2003-q4:1.1
	binutils-2_14:1.1
	binutils-2_14-branch:1.1.0.2
	binutils-2_14-branchpoint:1.1
	binutils_latest_snapshot:1.10;
locks; strict;
comment	@# @;


1.10
date	2013.09.18.07.50.34;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.16.16.47.14;	author jbglaw;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.16.13.19.40;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.02.21.06.13;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.10.19.51.55;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.18.13.37.39;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.02.07.24.21;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.12.11.54.23;	author diwil;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.25.12.54.09;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.30.19.25.07;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* config/tc-msp430.c (OPTION_MOVE_DATA): Define.
	(move_data): New variable.
	(md_parse_option): Parse -md.
	(msp430_section): New function.  Catch references to the .bss or
	.data sections and generate a special symbol for use by the libcrt
	library.
	(md_pseudo_table): Intercept .section directives.
	(md_longopt): Add -md
	(md_show_usage): Likewise.
	(msp430_operands): Generate a warning message if a NOP is inserted
	into the instruction stream.
	* doc/c-msp430.texi (node MSP430 Options): Document -md option.
@
text
@@@c Copyright 2002-2013 Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@ifset GENERIC
@@page
@@node MSP430-Dependent
@@chapter MSP 430 Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter MSP 430 Dependent Features
@@end ifclear

@@cindex MSP 430 support
@@cindex 430 support
@@menu
* MSP430 Options::              Options
* MSP430 Syntax::               Syntax
* MSP430 Floating Point::       Floating Point
* MSP430 Directives::           MSP 430 Machine Directives
* MSP430 Opcodes::              Opcodes
* MSP430 Profiling Capability::	Profiling Capability
@@end menu

@@node MSP430 Options
@@section Options
@@cindex MSP 430 options (none)
@@cindex options for MSP430 (none)
@@table @@code

@@item -mmcu
selects the mpu arch.  If the architecture is 430Xv2 then this also
enables NOP generation unless the @@option{-mN} is also specified.

@@item -mcpu
selects the cpu architecture.  If the architecture is 430Xv2 then this
also enables NOP generation unless the @@option{-mN} is also
specified.

@@item -mP
enables polymorph instructions handler.

@@item -mQ
enables relaxation at assembly time. DANGEROUS!

@@item -ml
indicates that the input uses the large code model.

@@item -mN
disables the generation of a NOP instruction following any instruction
that might change the interrupts enabled/disabled state.  For the
430Xv2 architecture the instructions: @@code{EINT}, @@code{DINT},
@@code{BIC #8, SR}, @@code{BIS #8, SR} and @@code{MOV.W <>, SR} must be
followed by a NOP instruction in order to ensure the correct
processing of interrupts.  By default generation of the NOP
instruction happens automatically, but this command line option
disables this behaviour.  It is then up to the programmer to ensure
that interrupts are enabled and disabled correctly.

@@item -md
mark the object file as one that requires data to copied from ROM to
RAM at execution startup.  Disabled by default.

@@end table

@@node MSP430 Syntax
@@section Syntax
@@menu
* MSP430-Macros::		Macros
* MSP430-Chars::                Special Characters
* MSP430-Regs::                 Register Names
* MSP430-Ext::			Assembler Extensions
@@end menu

@@node MSP430-Macros
@@subsection Macros

@@cindex Macros, MSP 430
@@cindex MSP 430 macros
The macro syntax used on the MSP 430 is like that described in the MSP
430 Family Assembler Specification.  Normal @@code{@@value{AS}}
macros should still work.

Additional built-in macros are:

@@table @@code

@@item llo(exp)
Extracts least significant word from 32-bit expression 'exp'.

@@item lhi(exp)
Extracts most significant word from 32-bit expression 'exp'.

@@item hlo(exp)
Extracts 3rd word from 64-bit expression 'exp'.

@@item 	hhi(exp)
Extracts 4rd word from 64-bit expression 'exp'.

@@end table

They normally being used as an immediate source operand.
@@smallexample
    mov	#llo(1), r10	;	== mov	#1, r10
    mov	#lhi(1), r10	;	== mov	#0, r10
@@end smallexample

@@node MSP430-Chars
@@subsection Special Characters

@@cindex line comment character, MSP 430
@@cindex MSP 430 line comment character
A semicolon (@@samp{;}) appearing anywhere on a line starts a comment
that extends to the end of that line.

If a @@samp{#} appears as the first character of a line then the whole
line is treated as a comment, but it can also be a logical line number
directive (@@pxref{Comments}) or a preprocessor control command
(@@pxref{Preprocessing}).

@@cindex line separator, MSP 430
@@cindex statement separator, MSP 430
@@cindex MSP 430 line separator
Multiple statements can appear on the same line provided that they are
separated by the @@samp{@@{} character.

@@cindex identifiers, MSP 430
@@cindex MSP 430 identifiers
The character @@samp{$} in jump instructions indicates current location and
implemented only for TI syntax compatibility.

@@node MSP430-Regs
@@subsection Register Names

@@cindex MSP 430 register names
@@cindex register names, MSP 430
General-purpose registers are represented by predefined symbols of the
form @@samp{r@@var{N}} (for global registers), where @@var{N} represents
a number between @@code{0} and @@code{15}.  The leading
letters may be in either upper or lower case; for example, @@samp{r13}
and @@samp{R7} are both valid register names.

@@cindex special purpose registers, MSP 430
Register names @@samp{PC}, @@samp{SP} and @@samp{SR} cannot be used as register names
and will be treated as variables. Use @@samp{r0}, @@samp{r1}, and @@samp{r2} instead.


@@node MSP430-Ext
@@subsection Assembler Extensions
@@cindex MSP430 Assembler Extensions

@@table @@code

@@item @@@@rN
As destination operand being treated as @@samp{0(rn)}

@@item 0(rN)
As source operand being treated as @@samp{@@@@rn}

@@item jCOND +N
Skips next N bytes followed by jump instruction and equivalent to
@@samp{jCOND $+N+2}

@@end table

Also, there are some instructions, which cannot be found in other assemblers.
These are branch instructions, which has different opcodes upon jump distance.
They all got PC relative addressing mode.

@@table @@code
@@item	beq label
A polymorph instruction which is @@samp{jeq label} in case if jump distance
within allowed range for cpu's jump instruction. If not, this unrolls into
a sequence of
@@smallexample
  jne $+6
  br  label
@@end smallexample

@@item bne label
A polymorph instruction which is @@samp{jne label} or @@samp{jeq +4; br label}

@@item blt label
A polymorph instruction which is @@samp{jl label} or @@samp{jge +4; br label}

@@item bltn label
A polymorph instruction which is @@samp{jn label} or @@samp{jn +2; jmp +4; br label}

@@item bltu label
A polymorph instruction which is @@samp{jlo label} or @@samp{jhs +2; br label}

@@item bge label
A polymorph instruction which is @@samp{jge label} or @@samp{jl +4; br label}

@@item bgeu label
A polymorph instruction which is @@samp{jhs label} or @@samp{jlo +4; br label}

@@item bgt label
A polymorph instruction which is @@samp{jeq +2; jge label} or @@samp{jeq +6; jl  +4; br label}

@@item bgtu label
A polymorph instruction which is @@samp{jeq +2; jhs label} or @@samp{jeq +6; jlo +4; br label}

@@item bleu label
A polymorph instruction which is @@samp{jeq label; jlo label} or @@samp{jeq +2; jhs +4; br label}

@@item ble label
A polymorph instruction which is @@samp{jeq label; jl  label} or @@samp{jeq +2; jge +4; br label}

@@item jump label
A polymorph instruction which is @@samp{jmp label} or @@samp{br label}
@@end table


@@node MSP430 Floating Point
@@section Floating Point

@@cindex floating point, MSP 430 (@@sc{ieee})
@@cindex MSP 430 floating point (@@sc{ieee})
The MSP 430 family uses @@sc{ieee} 32-bit floating-point numbers.

@@node MSP430 Directives
@@section MSP 430 Machine Directives

@@cindex machine directives, MSP 430
@@cindex MSP 430 machine directives
@@table @@code
@@cindex @@code{file} directive, MSP 430
@@item .file
This directive is ignored; it is accepted for compatibility with other
MSP 430 assemblers.

@@quotation
@@emph{Warning:} in other versions of the @@sc{gnu} assembler, @@code{.file} is
used for the directive called @@code{.app-file} in the MSP 430 support.
@@end quotation

@@cindex @@code{line} directive, MSP 430
@@item .line
This directive is ignored; it is accepted for compatibility with other
MSP 430 assemblers.

@@cindex @@code{arch} directive, MSP 430
@@item .arch
Sets the target microcontroller in the same way as the @@option{-mmcu}
command line option.

@@cindex @@code{cpu} directive, MSP 430
@@item .cpu
Sets the target architecture in the same way as the @@option{-mcpu}
command line option.

@@cindex @@code{profiler} directive, MSP 430
@@item .profiler
This directive instructs assembler to add new profile entry to the object file.

@@end table

@@node MSP430 Opcodes
@@section Opcodes

@@cindex MSP 430 opcodes
@@cindex opcodes for MSP 430
@@code{@@value{AS}} implements all the standard MSP 430 opcodes.  No
additional pseudo-instructions are needed on this family.

For information on the 430 machine instruction set, see @@cite{MSP430
User's Manual, document slau049d}, Texas Instrument, Inc.

@@node MSP430 Profiling Capability
@@section Profiling Capability

@@cindex MSP 430 profiling capability
@@cindex profiling capability for MSP 430
It is a performance hit to use gcc's profiling approach for this tiny target.
Even more -- jtag hardware facility does not perform any profiling functions.
However we've got gdb's built-in simulator where we can do anything.

We define new section @@samp{.profiler} which holds all profiling information.
We define new pseudo operation @@samp{.profiler} which will instruct assembler to
add new profile entry to the object file. Profile should take place at the
present address.

Pseudo operation format:

@@samp{.profiler flags,function_to_profile [, cycle_corrector, extra]}


where:

@@table @@code

@@table @@code

@@samp{flags} is a combination of the following characters:

@@item  s
function entry
@@item  x
function exit
@@item  i
function is in init section
@@item  f
function is in fini section
@@item  l
library call
@@item  c
libc standard call
@@item  d
stack value demand
@@item  I
interrupt service routine
@@item  P
prologue start
@@item  p
prologue end
@@item  E
epilogue start
@@item  e
epilogue end
@@item  j
long jump / sjlj unwind
@@item  a
an arbitrary code fragment
@@item t
extra parameter saved (a constant value like frame size)
@@end table

@@item function_to_profile
a function address
@@item cycle_corrector
a value which should be added to the cycle counter, zero if omitted.
@@item extra
any extra parameter, zero if omitted.

@@end table

For example:
@@smallexample
.global fxx
.type fxx,@@@@function
fxx:
.LFrameOffset_fxx=0x08
.profiler "scdP", fxx     ; function entry.
			  ; we also demand stack value to be saved
  push r11
  push r10
  push r9
  push r8
.profiler "cdpt",fxx,0, .LFrameOffset_fxx  ; check stack value at this point
					  ; (this is a prologue end)
					  ; note, that spare var filled with
					  ; the farme size
  mov r15,r8
...
.profiler cdE,fxx         ; check stack
  pop r8
  pop r9
  pop r10
  pop r11
.profiler xcde,fxx,3      ; exit adds 3 to the cycle counter
  ret                     ; cause 'ret' insn takes 3 cycles
@@end smallexample
@


1.9
log
@	* doc/c-msp430.texi: Fix typo.
also:	* ChangeLog: Fix entry.
@
text
@d60 4
@


1.8
log
@	* config/tc-msp430.c: Make -mmcu recognise more part numbers.
	Add -mcpu command to specify core type.
	* doc/c-msp430.c: Update documentation.
	* gas/msp430/opcodes.s: Use correct value for .arch pseudo.
	* gas/msp430/msp430x.d: Use correct value for -mcpu option.
@
text
@d35 1
a35 1
@@ietm -mcpu
@


1.7
log
@	* archures.c: Add some more MSP430 machine numbers.
	* config.bfd (msp430): Define targ_selvecs.
	* configure.in: Add bfd_elf32_msp430_ti_vec.
	* cpu-msp430.c: Add some more MSP430 machine numbers.
	* elf32-msp430.c Add support for MSP430X relocations.
	Add support for TI compiler generated relocations.
	Add support for sym_diff relocations.
	Add support for relaxing out of range short branches into long
	branches.
	Add support for MSP430 attribute section.
	* reloc.c: Add MSP430X relocations.
	* targets.c: Add bfd_elf32_msp430_ti_vec.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.

	* readelf.c: Add support for MSP430X architecture.

	* readelf.exp: Expect -wi test to fail for the MSP430.

	* config/tc-msp430.c: Add support for the MSP430X architecture.
	Add code to insert a NOP instruction after any instruction that
	might change the interrupt state.
	Add support for the LARGE memory model.
	Add code to initialise the .MSP430.attributes section.
	* config/tc-msp430.h: Add support for the MSP430X architecture.
	* doc/c-msp430.texi: Document the new -mL and -mN command line
	options.
	* NEWS: Mention support for the MSP430X architecture.

	* gas/all/gas.exp: Skip the DIFF1 test for the MSP430.
	Expect the FORWARD test to pass for the MSP430.
	Skip the REDEF tests for the MSP430.
	Expect the 930509A test to fail for the MSP430.
	* gas/all/sleb128-4.d: Skip for the MSP430.
	* gas/elf/elf.exp: Set target_machine to msp430 for the MSP430.
	Skip the EHOPT0 test for the MSP430.
	Skip the REDEF and EQU-RELOC tests for the MSP430.
	* gas/elf/section2.e-msp430: New file.
	* gas/lns/lns-big-delta.d: Remove expectation of 20-bit
	addresses.
	* gas/lns/lns.exp: Use alternate LNS COMMON test for the MSP430.
	* gas/msp430/msp430x.s: New test.
	* gas/msp430/msp430x.d: Expected disassembly.
	* gas/msp430/msp430.exp: Run new test.
	* gas/msp430/opcode.d: Update expected disassembly.

	* msp430.h: Add MSP430X relocs.
	Add some more MSP430 machine numbers.
	Add values used by .MSP430.attributes section.

	* msp430.h: Add patterns for MSP430X instructions.

	* Makefile.am: Add emsp430X.c
	* Makefine.in: Regenerate.
	* configure.tgt (msp430): Add msp430X emulation.
	* ldmain.c (multiple_definition): Only disable relaxation if it
	was enabled by the user.
	* ldmain.h (RELAXATION_ENABLED_BY_USER): New macro.
	* emulparams/msp430all.sh: Add support for MSP430X.
	* emultempl/generic.em: (before_parse): Enable relaxation for the
	MSP430.
	* scripttempl/msp430.sc: Reorganize sections.  Add .rodata
	section.
	* scripttempl/msp430_3.sc: Likewise.
	* NEWS: Mention support for MSP430X.

	* ld-elf/flags1.d: Expect this test to pass on the MSP430.
	* ld-elf/init-fini-arrays.d: Expect this test to fail on the
	MSP430.
	* ld-elf/merge.d: Expect this test to pass on the MSP430.
	* ld-elf/sec64k.exp: Skip these tests for the MSP430.
	* ld-gc/pr13683.d: Expect this test to fail on the MSP430.
	* ld-srec/srec.exp: Expect these tests to fail on the MSP430.
	* ld-undefined/undefined.exp: Expect the UNDEFINED LINE test to
	fail on the MSP430.

	* msp430-dis.c: Add support for MSP430X instructions.
@
text
@d31 9
a39 2
@@item -m
select the mpu arch. Currently has no effect.
d52 7
a58 7
MSP430x5xx series the instructions: @@code{EINT}, @@code{DINT}, @@code{BIC
#8, SR}, @@code{BIS #8, SR} and @@code{MOV.W <>, SR} must be followed by
a NOP instruction in order to ensure the correct processing of
interrupts.  By default generation of the NOP instruction happens
automatically, but this command line option disables this behaviour.
It is then up to the programmer to ensure that interrupts are enabled
and disabled correctly.
d239 1
a239 1
@@cindex @@code{sect} directive, MSP 430
d241 7
a247 2
Currently this directive is ignored; it is accepted for compatibility with other
MSP 430 assemblers.
@


1.6
log
@Remove trailing white spaces on gas

	* app.c: Remove trailing white spaces.
	* as.c: Likewise.
	* as.h: Likewise.
	* cond.c: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.h: Likewise.
	* ecoff.c: Likewise.
	* input-file.c: Likewise.
	* itbl-lex.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* subsegs.c: Likewise.
	* symbols.c: Likewise.
	* write.c: Likewise.
	* config/tc-i386.c: Likewise.
	* doc/Makefile.am: Likewise.
	* doc/Makefile.in: Likewise.
	* doc/c-aarch64.texi: Likewise.
	* doc/c-alpha.texi: Likewise.
	* doc/c-arc.texi: Likewise.
	* doc/c-arm.texi: Likewise.
	* doc/c-avr.texi: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/c-cr16.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-d30v.texi: Likewise.
	* doc/c-h8300.texi: Likewise.
	* doc/c-hppa.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i386.texi: Likewise.
	* doc/c-i860.texi: Likewise.
	* doc/c-m32c.texi: Likewise.
	* doc/c-m32r.texi: Likewise.
	* doc/c-m68hc11.texi: Likewise.
	* doc/c-m68k.texi: Likewise.
	* doc/c-microblaze.texi: Likewise.
	* doc/c-mips.texi: Likewise.
	* doc/c-msp430.texi: Likewise.
	* doc/c-mt.texi: Likewise.
	* doc/c-s390.texi: Likewise.
	* doc/c-score.texi: Likewise.
	* doc/c-sh.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-tic6x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-xc16x.texi: Likewise.
	* doc/c-xgate.texi: Likewise.
	* doc/c-xtensa.texi: Likewise.
	* doc/c-z80.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@d1 1
a1 1
@@c Copyright 2002, 2004, 2005, 2011 Free Software Foundation, Inc.
d39 14
@


1.5
log
@	PR gas/12390
	* doc/all.texi: Add NS32K
	* doc/as.texinfo: Remove target specific details of which
	characters act as comment initiators and statement separators into
	individual target specific files.
	* doc/c-alpha.texi (Alpha-Chars): Document special behaviour of
	the hash character at the start of a line.
	* doc/c-arm.texi (ARM-Chars): Likewise.
	* doc/c-avr.texi (AVR-Chars): Likewise.
	* doc/c-d10v.texi (D10V-Chars): Likewise.
	* doc/c-d30v.texi (D30V-Chars):	Likewise.
	* doc/c-mmix.texi (MMIX-Chars): Likewise.
	* doc/c-s390.texi (s390 characters): Likewise.
	* doc/c-sh.texi (SH-Chars): Likewise.
	* doc/c-sh64.texi (SH64-Chars): Likewise.
	* doc/c-sparc.texi (SPARC-Chars): Likewise.
	* doc/c-tic6x.texi (TIC6X Syntax): Likewise.
	* doc/c-xtensa.texi (Xtensa Syntax): Likewise.
	* doc/c-z80.texi (Z80-Chars): Likewise.
	* doc/c-z8k.texi (Z8000-Chars): Likewise.
	* doc/c-pdp11.texi (PDP11-Syntax): Document line separator character.
	* doc/c-arc.texi (ARC-Chars): Fill in this subsection.
	* doc/c-bfin.texi (Blackfin Syntax): Document line comment and
	line separator characters.
	* doc/c-cr16.texi (CR16 Syntax): Likewise.
	* doc/c-i386.texi (i386-Chars): Likewise.
	* doc/c-i860.texi (i860-Chars):	Likewise.
	* doc/c-i960.texi (i960-Chars):	Likewise.
	* doc/c-ip2k.texi (IP2K-Chars):	Likewise.
	* doc/c-lm32.texi (LM32-Chars):	likewise.
	* doc/c-m32c.texi (M32C-Chars): Likewise.
	* doc/c-m68hc11.texi (M68HC11-syntax): Likewise.
	* doc/c-m68k.texi (M68K-Chars): Likewise.
	* doc/c-microblaze.texi (MicroBlaze-Chars): Likewise.
	* doc/c-msp430.texi (MSP430-Chars): Likewise.
	* doc/c-mt.texi (MT-Chars): Likewise.
	* doc/c-ns32k.texi (NS32K-Chars): Likewise.
	* doc/c-pj.texi (PJ-Chars): Likewise.
	* doc/c-ppc.texi (PowerPC-Chars): Likewise.
	* doc/c-rx.texi (RX-Chars): Likewise.
	* doc/c-score.texi (SCORE-Chars): Likewise.
	* doc/c-tic54x.texi (TIC54X-Chars): Likewise.
	* doc/c-v850.texi (V850-Chars): Likewise.
	* doc/c-vax.texi (VAX-Chars): Likewise.
	* doc/c-xc16x.texi (xc16x-Chars): Likewise.
@
text
@d33 1
a33 1
@@item -mP 
d36 1
a36 1
@@item -mQ 
d63 1
a63 1
@@item llo(exp) 
d72 1
a72 1
@@item 	hhi(exp) 
d79 1
a79 1
    mov	#llo(1), r10	;	== mov	#1, r10	
d82 1
a82 1
	
d104 1
a104 1
The character @@samp{$} in jump instructions indicates current location and 
d267 1
a267 1
@@item  s 
d269 1
a269 1
@@item  x  
d271 1
a271 1
@@item  i  
d273 1
a273 1
@@item  f  
d275 1
a275 1
@@item  l  
d277 1
a277 1
@@item  c  
d279 1
a279 1
@@item  d  
d281 1
a281 1
@@item  I  
d283 1
a283 1
@@item  P  
d285 1
a285 1
@@item  p  
d287 1
a287 1
@@item  E  
d289 1
a289 1
@@item  e  
d291 1
a291 1
@@item  j  
d293 1
a293 1
@@item  a  
d299 1
a299 1
@@item function_to_profile 
d301 1
a301 1
@@item cycle_corrector  
d303 1
a303 1
@@item extra  
d322 1
a322 1
					  ; note, that spare var filled with 
@


1.4
log
@update copyright dates
@
text
@d1 1
a1 1
@@c Copyright 2002, 2004, 2005 Free Software Foundation, Inc.
d88 13
a100 1
@@samp{;} is the line comment character.
@


1.3
log
@2005-08-12  Dmitry Diky <diwil@@spec.ru>
	* config/tc-msp430.c (msp430_enable_relax): New flag.
	(msp430_enable_polys): Likewise.
	(OPTION_RELAX): New option.
	(OPTION_POLYMORPHS): Likewise.
	(md_longopts): New long options.
	(md_show_usage): Updated.
	(md_parse_option): Add new options handler.
	(msp430_operands): Add check if polymorph insns are enabled.
	(msp430_force_relocation_local): New function.
	(md_apply_fix): Now delete relocs according to new flags combination.
	(msp430_relax_frag): Convert long branches to short branches only if
	flag msp430_enable_relax is set.
	* config/tc-msp430.h (TC_FORCE_RELOCATION_LOCAL): Defined.
	(msp430_force_relocation_local): Likewise.
	* doc/c-msp430.texi: Describe new options.
@
text
@d1 1
a1 1
@@c Copyright 2002, 2004 Free Software Foundation, Inc.
@


1.2
log
@Apply Dmitry Diky's patches to add relaxation to msp430.
@
text
@d29 11
a39 2
@@code{@@value{AS}} has only -m flag which selects the mpu arch. Currently has 
no effect.
d226 1
a226 1
User's Manual, document slau049b}, Texas Instrument, Inc.
@


1.1
log
@Add support for msp430.
@
text
@d1 1
a1 1
@@c Copyright 2002 Free Software Foundation, Inc.
d22 1
d120 48
d202 4
d218 95
@

