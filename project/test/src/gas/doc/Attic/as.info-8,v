head	1.1;
access;
symbols
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.2
	binutils-2_13_2:1.1.8.2
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.2
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.2
	binutils-2_10:1.1.2.2
	binutils_latest_snapshot:1.1.2.2
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2000.05.29.14.08.53;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1;
next	;

1.1.2.1
date	2000.05.29.14.08.53;	author pb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.05.31.12.27.13;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.40.58;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.01.21;	author drow;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.05.11.20.00.52;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.47;	author drow;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.12.20.21.33.25;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.12;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file as.info-8 was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 1503
This is as.info, produced by makeinfo version 4.3 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: MIPS ISA,  Next: MIPS autoextend,  Prev: MIPS Stabs,  Up: MIPS-Dependent

Directives to override the ISA level
------------------------------------

   GNU `as' supports an additional directive to change the MIPS
Instruction Set Architecture level on the fly: `.set mipsN'.  N should
be a number from 0 to 5, or 32, 32r2, or 64.  The values other than 0
make the assembler accept instructions for the corresponding ISA level,
from that point on in the assembly.  `.set mipsN' affects not only
which instructions are permitted, but also how certain macros are
expanded.  `.set mips0' restores the ISA level to its original level:
either the level you selected with command line options, or the default
for your configuration.  You can use this feature to permit specific
R4000 instructions while assembling in 32 bit mode.  Use this directive
with care!

   The directive `.set mips16' puts the assembler into MIPS 16 mode, in
which it will assemble instructions for the MIPS 16 processor.  Use
`.set nomips16' to return to normal 32 bit mode.

   Traditional MIPS assemblers do not support this directive.


File: as.info,  Node: MIPS autoextend,  Next: MIPS insn,  Prev: MIPS ISA,  Up: MIPS-Dependent

Directives for extending MIPS 16 bit instructions
-------------------------------------------------

   By default, MIPS 16 instructions are automatically extended to 32
bits when necessary.  The directive `.set noautoextend' will turn this
off.  When `.set noautoextend' is in effect, any 32 bit instruction
must be explicitly extended with the `.e' modifier (e.g., `li.e
$4,1000').  The directive `.set autoextend' may be used to once again
automatically extend instructions when necessary.

   This directive is only meaningful when in MIPS 16 mode.  Traditional
MIPS assemblers do not support this directive.


File: as.info,  Node: MIPS insn,  Next: MIPS option stack,  Prev: MIPS autoextend,  Up: MIPS-Dependent

Directive to mark data as an instruction
----------------------------------------

   The `.insn' directive tells `as' that the following data is actually
instructions.  This makes a difference in MIPS 16 mode: when loading
the address of a label which precedes instructions, `as' automatically
adds 1 to the value, so that jumping to the loaded address will do the
right thing.


File: as.info,  Node: MIPS option stack,  Next: MIPS ASE instruction generation overrides,  Prev: MIPS insn,  Up: MIPS-Dependent

Directives to save and restore options
--------------------------------------

   The directives `.set push' and `.set pop' may be used to save and
restore the current settings for all the options which are controlled
by `.set'.  The `.set push' directive saves the current settings on a
stack.  The `.set pop' directive pops the stack and restores the
settings.

   These directives can be useful inside an macro which must change an
option such as the ISA level or instruction reordering but does not want
to change the state of the code which invoked the macro.

   Traditional MIPS assemblers do not support these directives.


File: as.info,  Node: MIPS ASE instruction generation overrides,  Prev: MIPS option stack,  Up: MIPS-Dependent

Directives to control generation of MIPS ASE instructions
---------------------------------------------------------

   The directive `.set mips3d' makes the assembler accept instructions
from the MIPS-3D Application Specific Extension from that point on in
the assembly.  The `.set nomips3d' directive prevents MIPS-3D
instructions from being accepted.

   The directive `.set mdmx' makes the assembler accept instructions
from the MDMX Application Specific Extension from that point on in the
assembly.  The `.set nomdmx' directive prevents MDMX instructions from
being accepted.

   Traditional MIPS assemblers do not support these directives.


File: as.info,  Node: MMIX-Dependent,  Next: MSP430-Dependent,  Prev: MIPS-Dependent,  Up: Machine Dependencies

MMIX Dependent Features
=======================

* Menu:

* MMIX-Opts::              Command-line Options
* MMIX-Expand::            Instruction expansion
* MMIX-Syntax::            Syntax
* MMIX-mmixal::		   Differences to `mmixal' syntax and semantics


File: as.info,  Node: MMIX-Opts,  Next: MMIX-Expand,  Up: MMIX-Dependent

Command-line Options
--------------------

   The MMIX version of `as' has some machine-dependent options.

   When `--fixed-special-register-names' is specified, only the register
names specified in *Note MMIX-Regs:: are recognized in the instructions
`PUT' and `GET'.

   You can use the `--globalize-symbols' to make all symbols global.
This option is useful when splitting up a `mmixal' program into several
files.

   The `--gnu-syntax' turns off most syntax compatibility with
`mmixal'.  Its usability is currently doubtful.

   The `--relax' option is not fully supported, but will eventually make
the object file prepared for linker relaxation.

   If you want to avoid inadvertently calling a predefined symbol and
would rather get an error, for example when using `as' with a compiler
or other machine-generated code, specify `--no-predefined-syms'.  This
turns off built-in predefined definitions of all such symbols,
including rounding-mode symbols, segment symbols, `BIT' symbols, and
`TRAP' symbols used in `mmix' "system calls".  It also turns off
predefined special-register names, except when used in `PUT' and `GET'
instructions.

   By default, some instructions are expanded to fit the size of the
operand or an external symbol (*note MMIX-Expand::).  By passing
`--no-expand', no such expansion will be done, instead causing errors
at link time if the operand does not fit.

   The `mmixal' documentation (*note mmixsite::) specifies that global
registers allocated with the `GREG' directive (*note MMIX-greg::) and
initialized to the same non-zero value, will refer to the same global
register.  This isn't strictly enforceable in `as' since the final
addresses aren't known until link-time, but it will do an effort unless
the `--no-merge-gregs' option is specified.  (Register merging isn't
yet implemented in `ld'.)

   `as' will warn every time it expands an instruction to fit an
operand unless the option `-x' is specified.  It is believed that this
behaviour is more useful than just mimicking `mmixal''s behaviour, in
which instructions are only expanded if the `-x' option is specified,
and assembly fails otherwise, when an instruction needs to be expanded.
It needs to be kept in mind that `mmixal' is both an assembler and
linker, while `as' will expand instructions that at link stage can be
contracted.  (Though linker relaxation isn't yet implemented in `ld'.)
The option `-x' also imples `--linker-allocated-gregs'.

   Usually a two-operand-expression (*note GREG-base::) without a
matching `GREG' directive is treated as an error by `as'.  When the
option `--linker-allocated-gregs' is in effect, they are instead passed
through to the linker, which will allocate as many global registers as
is needed.


File: as.info,  Node: MMIX-Expand,  Next: MMIX-Syntax,  Prev: MMIX-Opts,  Up: MMIX-Dependent

Instruction expansion
---------------------

   When `as' encounters an instruction with an operand that is either
not known or does not fit the operand size of the instruction, `as'
(and `ld') will expand the instruction into a sequence of instructions
semantically equivalent to the operand fitting the instruction.
Expansion will take place for the following instructions:

`GETA'
     Expands to a sequence of four instructions: `SETL', `INCML',
     `INCMH' and `INCH'.  The operand must be a multiple of four.

Conditional branches
     A branch instruction is turned into a branch with the complemented
     condition and prediction bit over five instructions; four
     instructions setting `$255' to the operand value, which like with
     `GETA' must be a multiple of four, and a final `GO $255,$255,0'.

`PUSHJ'
     Similar to expansion for conditional branches; four instructions
     set `$255' to the operand value, followed by a `PUSHGO
     $255,$255,0'.

`JMP'
     Similar to conditional branches and `PUSHJ'.  The final instruction
     is `GO $255,$255,0'.

   The linker `ld' is expected to shrink these expansions for code
assembled with `--relax' (though not currently implemented).


File: as.info,  Node: MMIX-Syntax,  Next: MMIX-mmixal,  Prev: MMIX-Expand,  Up: MMIX-Dependent

Syntax
------

   The assembly syntax is supposed to be upward compatible with that
described in Sections 1.3 and 1.4 of `The Art of Computer Programming,
Volume 1'.  Draft versions of those chapters as well as other MMIX
information is located at
<http://www-cs-faculty.stanford.edu/~knuth/mmix-news.html>.  Most code
examples from the mmixal package located there should work unmodified
when assembled and linked as single files, with a few noteworthy
exceptions (*note MMIX-mmixal::).

   Before an instruction is emitted, the current location is aligned to
the next four-byte boundary.  If a label is defined at the beginning of
the line, its value will be the aligned value.

   In addition to the traditional hex-prefix `0x', a hexadecimal number
can also be specified by the prefix character `#'.

   After all operands to an MMIX instruction or directive have been
specified, the rest of the line is ignored, treated as a comment.

* Menu:

* MMIX-Chars::		        Special Characters
* MMIX-Symbols::		Symbols
* MMIX-Regs::			Register Names
* MMIX-Pseudos::		Assembler Directives


File: as.info,  Node: MMIX-Chars,  Next: MMIX-Symbols,  Up: MMIX-Syntax

Special Characters
..................

   The characters `*' and `#' are line comment characters; each start a
comment at the beginning of a line, but only at the beginning of a
line.  A `#' prefixes a hexadecimal number if found elsewhere on a line.

   Two other characters, `%' and `!', each start a comment anywhere on
the line.  Thus you can't use the `modulus' and `not' operators in
expressions normally associated with these two characters.

   A `;' is a line separator, treated as a new-line, so separate
instructions can be specified on a single line.


File: as.info,  Node: MMIX-Symbols,  Next: MMIX-Regs,  Prev: MMIX-Chars,  Up: MMIX-Syntax

Symbols
.......

   The character `:' is permitted in identifiers.  There are two
exceptions to it being treated as any other symbol character: if a
symbol begins with `:', it means that the symbol is in the global
namespace and that the current prefix should not be prepended to that
symbol (*note MMIX-prefix::).  The `:' is then not considered part of
the symbol.  For a symbol in the label position (first on a line), a `:'
at the end of a symbol is silently stripped off.  A label is permitted,
but not required, to be followed by a `:', as with many other assembly
formats.

   The character `@@' in an expression, is a synonym for `.', the
current location.

   In addition to the common forward and backward local symbol formats
(*note Symbol Names::), they can be specified with upper-case `B' and
`F', as in `8B' and `9F'.  A local label defined for the current
position is written with a `H' appended to the number:
     3H LDB $0,$1,2
   This and traditional local-label formats cannot be mixed: a label
must be defined and referred to using the same format.

   There's a minor caveat: just as for the ordinary local symbols, the
local symbols are translated into ordinary symbols using control
characters are to hide the ordinal number of the symbol.
Unfortunately, these symbols are not translated back in error messages.
Thus you may see confusing error messages when local symbols are used.
Control characters `\003' (control-C) and `\004' (control-D) are used
for the MMIX-specific local-symbol syntax.

   The symbol `Main' is handled specially; it is always global.

   By defining the symbols `__.MMIX.start..text' and
`__.MMIX.start..data', the address of respectively the `.text' and
`.data' segments of the final program can be defined, though when
linking more than one object file, the code or data in the object file
containing the symbol is not guaranteed to be start at that position;
just the final executable.  *Note MMIX-loc::.


File: as.info,  Node: MMIX-Regs,  Next: MMIX-Pseudos,  Prev: MMIX-Symbols,  Up: MMIX-Syntax

Register names
..............

   Local and global registers are specified as `$0' to `$255'.  The
recognized special register names are `rJ', `rA', `rB', `rC', `rD',
`rE', `rF', `rG', `rH', `rI', `rK', `rL', `rM', `rN', `rO', `rP', `rQ',
`rR', `rS', `rT', `rU', `rV', `rW', `rX', `rY', `rZ', `rBB', `rTT',
`rWW', `rXX', `rYY' and `rZZ'.  A leading `:' is optional for special
register names.

   Local and global symbols can be equated to register names and used in
place of ordinary registers.

   Similarly for special registers, local and global symbols can be
used.  Also, symbols equated from numbers and constant expressions are
allowed in place of a special register, except when either of the
options `--no-predefined-syms' and `--fixed-special-register-names' are
specified.  Then only the special register names above are allowed for
the instructions having a special register operand; `GET' and `PUT'.


File: as.info,  Node: MMIX-Pseudos,  Prev: MMIX-Regs,  Up: MMIX-Syntax

Assembler Directives
....................

`LOC'
     The `LOC' directive sets the current location to the value of the
     operand field, which may include changing sections.  If the
     operand is a constant, the section is set to either `.data' if the
     value is `0x2000000000000000' or larger, else it is set to `.text'.
     Within a section, the current location may only be changed to
     monotonically higher addresses.  A LOC expression must be a
     previously defined symbol or a "pure" constant.

     An example, which sets the label PREV to the current location, and
     updates the current location to eight bytes forward:
          prev LOC @@+8

     When a LOC has a constant as its operand, a symbol
     `__.MMIX.start..text' or `__.MMIX.start..data' is defined
     depending on the address as mentioned above.  Each such symbol is
     interpreted as special by the linker, locating the section at that
     address.  Note that if multiple files are linked, the first object
     file with that section will be mapped to that address (not
     necessarily the file with the LOC definition).

`LOCAL'
     Example:
           LOCAL external_symbol
           LOCAL 42
           .local asymbol

     This directive-operation generates a link-time assertion that the
     operand does not correspond to a global register.  The operand is
     an expression that at link-time resolves to a register symbol or a
     number.  A number is treated as the register having that number.
     There is one restriction on the use of this directive: the
     pseudo-directive must be placed in a section with contents, code
     or data.

`IS'
     The `IS' directive:
          asymbol IS an_expression
     sets the symbol `asymbol' to `an_expression'.  A symbol may not be
     set more than once using this directive.  Local labels may be set
     using this directive, for example:
          5H IS @@+4

`GREG'
     This directive reserves a global register, gives it an initial
     value and optionally gives it a symbolic name.  Some examples:

          areg GREG
          breg GREG data_value
               GREG data_buffer
               .greg creg, another_data_value

     The symbolic register name can be used in place of a (non-special)
     register.  If a value isn't provided, it defaults to zero.  Unless
     the option `--no-merge-gregs' is specified, non-zero registers
     allocated with this directive may be eliminated by `as'; another
     register with the same value used in its place.  Any of the
     instructions `CSWAP', `GO', `LDA', `LDBU', `LDB', `LDHT', `LDOU',
     `LDO', `LDSF', `LDTU', `LDT', `LDUNC', `LDVTS', `LDWU', `LDW',
     `PREGO', `PRELD', `PREST', `PUSHGO', `STBU', `STB', `STCO', `STHT',
     `STOU', `STSF', `STTU', `STT', `STUNC', `SYNCD', `SYNCID', can
     have a value nearby an initial value in place of its second and
     third operands.  Here, "nearby" is defined as within the range
     0...255 from the initial value of such an allocated register.

          buffer1 BYTE 0,0,0,0,0
          buffer2 BYTE 0,0,0,0,0
           ...
           GREG buffer1
           LDOU $42,buffer2
     In the example above, the `Y' field of the `LDOUI' instruction
     (LDOU with a constant Z) will be replaced with the global register
     allocated for `buffer1', and the `Z' field will have the value 5,
     the offset from `buffer1' to `buffer2'.  The result is equivalent
     to this code:
          buffer1 BYTE 0,0,0,0,0
          buffer2 BYTE 0,0,0,0,0
           ...
          tmpreg GREG buffer1
           LDOU $42,tmpreg,(buffer2-buffer1)

     Global registers allocated with this directive are allocated in
     order higher-to-lower within a file.  Other than that, the exact
     order of register allocation and elimination is undefined.  For
     example, the order is undefined when more than one file with such
     directives are linked together.  With the options `-x' and
     `--linker-allocated-gregs', `GREG' directives for two-operand
     cases like the one mentioned above can be omitted.  Sufficient
     global registers will then be allocated by the linker.

`BYTE'
     The `BYTE' directive takes a series of operands separated by a
     comma.  If an operand is a string (*note Strings::), each
     character of that string is emitted as a byte.  Other operands
     must be constant expressions without forward references, in the
     range 0...255.  If you need operands having expressions with
     forward references, use `.byte' (*note Byte::).  An operand can be
     omitted, defaulting to a zero value.

`WYDE'
`TETRA'
`OCTA'
     The directives `WYDE', `TETRA' and `OCTA' emit constants of two,
     four and eight bytes size respectively.  Before anything else
     happens for the directive, the current location is aligned to the
     respective constant-size bondary.  If a label is defined at the
     beginning of the line, its value will be that after the alignment.
     A single operand can be omitted, defaulting to a zero value
     emitted for the directive.  Operands can be expressed as strings
     (*note Strings::), in which case each character in the string is
     emitted as a separate constant of the size indicated by the
     directive.

`PREFIX'
     The `PREFIX' directive sets a symbol name prefix to be prepended to
     all symbols (except local symbols, *note MMIX-Symbols::), that are
     not prefixed with `:', until the next `PREFIX' directive.  Such
     prefixes accumulate.  For example,
           PREFIX a
           PREFIX b
          c IS 0
     defines a symbol `abc' with the value 0.

`BSPEC'
`ESPEC'
     A pair of `BSPEC' and `ESPEC' directives delimit a section of
     special contents (without specified semantics).  Example:
           BSPEC 42
           TETRA 1,2,3
           ESPEC
     The single operand to `BSPEC' must be number in the range 0...255.
     The `BSPEC' number 80 is used by the GNU binutils implementation.


File: as.info,  Node: MMIX-mmixal,  Prev: MMIX-Syntax,  Up: MMIX-Dependent

Differences to `mmixal'
-----------------------

   The binutils `as' and `ld' combination has a few differences in
function compared to `mmixal' (*note mmixsite::).

   The replacement of a symbol with a GREG-allocated register (*note
GREG-base::) is not handled the exactly same way in `as' as in
`mmixal'.  This is apparent in the `mmixal' example file `inout.mms',
where different registers with different offsets, eventually yielding
the same address, are used in the first instruction.  This type of
difference should however not affect the function of any program unless
it has specific assumptions about the allocated register number.

   Line numbers (in the `mmo' object format) are currently not
supported.

   Expression operator precedence is not that of mmixal: operator
precedence is that of the C programming language.  It's recommended to
use parentheses to explicitly specify wanted operator precedence
whenever more than one type of operators are used.

   The serialize unary operator `&', the fractional division operator
`//', the logical not operator `!' and the modulus operator `%' are not
available.

   Symbols are not global by default, unless the option
`--globalize-symbols' is passed.  Use the `.global' directive to
globalize symbols (*note Global::).

   Operand syntax is a bit stricter with `as' than `mmixal'.  For
example, you can't say `addu 1,2,3', instead you must write `addu
$1,$2,3'.

   You can't LOC to a lower address than those already visited (i.e.
"backwards").

   A LOC directive must come before any emitted code.

   Predefined symbols are visible as file-local symbols after use.  (In
the ELF file, that is--the linked mmo file has no notion of a file-local
symbol.)

   Some mapping of constant expressions to sections in LOC expressions
is attempted, but that functionality is easily confused and should be
avoided unless compatibility with `mmixal' is required.  A LOC
expression to `0x2000000000000000' or higher, maps to the `.data'
section and lower addresses map to the `.text' section (*note
MMIX-loc::).

   The code and data areas are each contiguous.  Sparse programs with
far-away LOC directives will take up the same amount of space as a
contiguous program with zeros filled in the gaps between the LOC
directives.  If you need sparse programs, you might try and get the
wanted effect with a linker script and splitting up the code parts into
sections (*note Section::).  Assembly code for this, to be compatible
with `mmixal', would look something like:
      .if 0
      LOC away_expression
      .else
      .section away,"ax"
      .fi
   `as' will not execute the LOC directive and `mmixal' ignores the
lines with `.'.  This construct can be used generally to help
compatibility.

   Symbols can't be defined twice-not even to the same value.

   Instruction mnemonics are recognized case-insensitive, though the
`IS' and `GREG' pseudo-operations must be specified in upper-case
characters.

   There's no unicode support.

   The following is a list of programs in `mmix.tar.gz', available at
<http://www-cs-faculty.stanford.edu/~knuth/mmix-news.html>, last
checked with the version dated 2001-08-25 (md5sum
c393470cfc86fac040487d22d2bf0172) that assemble with `mmixal' but do
not assemble with `as':

`silly.mms'
     LOC to a previous address.

`sim.mms'
     Redefines symbol `Done'.

`test.mms'
     Uses the serial operator `&'.


File: as.info,  Node: MSP430-Dependent,  Next: SH-Dependent,  Prev: MMIX-Dependent,  Up: Machine Dependencies

MSP 430 Dependent Features
==========================

* Menu:

* MSP430 Options::              Options
* MSP430 Syntax::               Syntax
* MSP430 Floating Point::       Floating Point
* MSP430 Directives::           MSP 430 Machine Directives
* MSP430 Opcodes::              Opcodes


File: as.info,  Node: MSP430 Options,  Next: MSP430 Syntax,  Up: MSP430-Dependent

Options
-------

   `as' has only -m flag which selects the mpu arch. Currently has no
effect.


File: as.info,  Node: MSP430 Syntax,  Next: MSP430 Floating Point,  Prev: MSP430 Options,  Up: MSP430-Dependent

Syntax
------

* Menu:

* MSP430-Macros::		Macros
* MSP430-Chars::                Special Characters
* MSP430-Regs::                 Register Names
* MSP430-Ext::			Assembler Extensions


File: as.info,  Node: MSP430-Macros,  Next: MSP430-Chars,  Up: MSP430 Syntax

Macros
......

   The macro syntax used on the MSP 430 is like that described in the
MSP 430 Family Assembler Specification.  Normal `as' macros should
still work.

   Additional built-in macros are:

`llo(exp)'
     Extracts least significant word from 32-bit expression 'exp'.

`lhi(exp)'
     Extracts most significant word from 32-bit expression 'exp'.

`hlo(exp)'
     Extracts 3rd word from 64-bit expression 'exp'.

`hhi(exp)'
     Extracts 4rd word from 64-bit expression 'exp'.

   They normally being used as an immediate source operand.
         mov	#llo(1), r10	;	== mov	#1, r10
         mov	#lhi(1), r10	;	== mov	#0, r10


File: as.info,  Node: MSP430-Chars,  Next: MSP430-Regs,  Prev: MSP430-Macros,  Up: MSP430 Syntax

Special Characters
..................

   `;' is the line comment character.

   The character `$' in jump instructions indicates current location and
implemented only for TI syntax compatibility.


File: as.info,  Node: MSP430-Regs,  Next: MSP430-Ext,  Prev: MSP430-Chars,  Up: MSP430 Syntax

Register Names
..............

   General-purpose registers are represented by predefined symbols of
the form `rN' (for global registers), where N represents a number
between `0' and `15'.  The leading letters may be in either upper or
lower case; for example, `r13' and `R7' are both valid register names.

   Register names `PC', `SP' and `SR' cannot be used as register names
and will be treated as variables. Use `r0', `r1', and `r2' instead.


File: as.info,  Node: MSP430-Ext,  Prev: MSP430-Regs,  Up: MSP430 Syntax

Assembler Extensions
....................

`@@rN'
     As destination operand being treated as `0(rn)'

`0(rN)'
     As source operand being treated as `@@rn'

`jCOND +N'
     Skips next N bytes followed by jump instruction and equivalent to
     `jCOND $+N+2'


File: as.info,  Node: MSP430 Floating Point,  Next: MSP430 Directives,  Prev: MSP430 Syntax,  Up: MSP430-Dependent

Floating Point
--------------

   The MSP 430 family uses IEEE 32-bit floating-point numbers.


File: as.info,  Node: MSP430 Directives,  Next: MSP430 Opcodes,  Prev: MSP430 Floating Point,  Up: MSP430-Dependent

MSP 430 Machine Directives
--------------------------

`.file'
     This directive is ignored; it is accepted for compatibility with
     other MSP 430 assemblers.

          _Warning:_ in other versions of the GNU assembler, `.file' is
          used for the directive called `.app-file' in the MSP 430
          support.

`.line'
     This directive is ignored; it is accepted for compatibility with
     other MSP 430 assemblers.

`.arch'
     Currently this directive is ignored; it is accepted for
     compatibility with other MSP 430 assemblers.


File: as.info,  Node: MSP430 Opcodes,  Prev: MSP430 Directives,  Up: MSP430-Dependent

Opcodes
-------

   `as' implements all the standard MSP 430 opcodes.  No additional
pseudo-instructions are needed on this family.

   For information on the 430 machine instruction set, see `MSP430
User's Manual, document slau049b', Texas Instrument, Inc.


File: as.info,  Node: PDP-11-Dependent,  Next: PJ-Dependent,  Prev: SH64-Dependent,  Up: Machine Dependencies

PDP-11 Dependent Features
=========================

* Menu:

* PDP-11-Options::		Options
* PDP-11-Pseudos::		Assembler Directives
* PDP-11-Syntax::		DEC Syntax versus BSD Syntax
* PDP-11-Mnemonics::		Instruction Naming
* PDP-11-Synthetic::		Synthetic Instructions


File: as.info,  Node: PDP-11-Options,  Next: PDP-11-Pseudos,  Up: PDP-11-Dependent

Options
-------

   The PDP-11 version of `as' has a rich set of machine dependent
options.

Code Generation Options
.......................

`-mpic | -mno-pic'
     Generate position-independent (or position-dependent) code.

     The default is to generate position-independent code.

Instruction Set Extension Options
.................................

   These options enables or disables the use of extensions over the base
line instruction set as introduced by the first PDP-11 CPU: the KA11.
Most options come in two variants: a `-m'EXTENSION that enables
EXTENSION, and a `-mno-'EXTENSION that disables EXTENSION.

   The default is to enable all extensions.

`-mall | -mall-extensions'
     Enable all instruction set extensions.

`-mno-extensions'
     Disable all instruction set extensions.

`-mcis | -mno-cis'
     Enable (or disable) the use of the commercial instruction set,
     which consists of these instructions: `ADDNI', `ADDN', `ADDPI',
     `ADDP', `ASHNI', `ASHN', `ASHPI', `ASHP', `CMPCI', `CMPC',
     `CMPNI', `CMPN', `CMPPI', `CMPP', `CVTLNI', `CVTLN', `CVTLPI',
     `CVTLP', `CVTNLI', `CVTNL', `CVTNPI', `CVTNP', `CVTPLI', `CVTPL',
     `CVTPNI', `CVTPN', `DIVPI', `DIVP', `L2DR', `L3DR', `LOCCI',
     `LOCC', `MATCI', `MATC', `MOVCI', `MOVC', `MOVRCI', `MOVRC',
     `MOVTCI', `MOVTC', `MULPI', `MULP', `SCANCI', `SCANC', `SKPCI',
     `SKPC', `SPANCI', `SPANC', `SUBNI', `SUBN', `SUBPI', and `SUBP'.

`-mcsm | -mno-csm'
     Enable (or disable) the use of the `CSM' instruction.

`-meis | -mno-eis'
     Enable (or disable) the use of the extended instruction set, which
     consists of these instructions: `ASHC', `ASH', `DIV', `MARK',
     `MUL', `RTT', `SOB' `SXT', and `XOR'.

`-mfis | -mkev11'
`-mno-fis | -mno-kev11'
     Enable (or disable) the use of the KEV11 floating-point
     instructions: `FADD', `FDIV', `FMUL', and `FSUB'.

`-mfpp | -mfpu | -mfp-11'
`-mno-fpp | -mno-fpu | -mno-fp-11'
     Enable (or disable) the use of FP-11 floating-point instructions:
     `ABSF', `ADDF', `CFCC', `CLRF', `CMPF', `DIVF', `LDCFF', `LDCIF',
     `LDEXP', `LDF', `LDFPS', `MODF', `MULF', `NEGF', `SETD', `SETF',
     `SETI', `SETL', `STCFF', `STCFI', `STEXP', `STF', `STFPS', `STST',
     `SUBF', and `TSTF'.

`-mlimited-eis | -mno-limited-eis'
     Enable (or disable) the use of the limited extended instruction
     set: `MARK', `RTT', `SOB', `SXT', and `XOR'.

     The -mno-limited-eis options also implies -mno-eis.

`-mmfpt | -mno-mfpt'
     Enable (or disable) the use of the `MFPT' instruction.

`-mmultiproc | -mno-multiproc'
     Enable (or disable) the use of multiprocessor instructions:
     `TSTSET' and `WRTLCK'.

`-mmxps | -mno-mxps'
     Enable (or disable) the use of the `MFPS' and `MTPS' instructions.

`-mspl | -mno-spl'
     Enable (or disable) the use of the `SPL' instruction.

     Enable (or disable) the use of the microcode instructions: `LDUB',
     `MED', and `XFC'.

CPU Model Options
.................

   These options enable the instruction set extensions supported by a
particular CPU, and disables all other extensions.

`-mka11'
     KA11 CPU.  Base line instruction set only.

`-mkb11'
     KB11 CPU.  Enable extended instruction set and `SPL'.

`-mkd11a'
     KD11-A CPU.  Enable limited extended instruction set.

`-mkd11b'
     KD11-B CPU.  Base line instruction set only.

`-mkd11d'
     KD11-D CPU.  Base line instruction set only.

`-mkd11e'
     KD11-E CPU.  Enable extended instruction set, `MFPS', and `MTPS'.

`-mkd11f | -mkd11h | -mkd11q'
     KD11-F, KD11-H, or KD11-Q CPU.  Enable limited extended
     instruction set, `MFPS', and `MTPS'.

`-mkd11k'
     KD11-K CPU.  Enable extended instruction set, `LDUB', `MED',
     `MFPS', `MFPT', `MTPS', and `XFC'.

`-mkd11z'
     KD11-Z CPU.  Enable extended instruction set, `CSM', `MFPS',
     `MFPT', `MTPS', and `SPL'.

`-mf11'
     F11 CPU.  Enable extended instruction set, `MFPS', `MFPT', and
     `MTPS'.

`-mj11'
     J11 CPU.  Enable extended instruction set, `CSM', `MFPS', `MFPT',
     `MTPS', `SPL', `TSTSET', and `WRTLCK'.

`-mt11'
     T11 CPU.  Enable limited extended instruction set, `MFPS', and
     `MTPS'.

Machine Model Options
.....................

   These options enable the instruction set extensions supported by a
particular machine model, and disables all other extensions.

`-m11/03'
     Same as `-mkd11f'.

`-m11/04'
     Same as `-mkd11d'.

`-m11/05 | -m11/10'
     Same as `-mkd11b'.

`-m11/15 | -m11/20'
     Same as `-mka11'.

`-m11/21'
     Same as `-mt11'.

`-m11/23 | -m11/24'
     Same as `-mf11'.

`-m11/34'
     Same as `-mkd11e'.

`-m11/34a'
     Ame as `-mkd11e' `-mfpp'.

`-m11/35 | -m11/40'
     Same as `-mkd11a'.

`-m11/44'
     Same as `-mkd11z'.

`-m11/45 | -m11/50 | -m11/55 | -m11/70'
     Same as `-mkb11'.

`-m11/53 | -m11/73 | -m11/83 | -m11/84 | -m11/93 | -m11/94'
     Same as `-mj11'.

`-m11/60'
     Same as `-mkd11k'.


File: as.info,  Node: PDP-11-Pseudos,  Next: PDP-11-Syntax,  Prev: PDP-11-Options,  Up: PDP-11-Dependent

Assembler Directives
--------------------

   The PDP-11 version of `as' has a few machine dependent assembler
directives.

`.bss'
     Switch to the `bss' section.

`.even'
     Align the location counter to an even number.


File: as.info,  Node: PDP-11-Syntax,  Next: PDP-11-Mnemonics,  Prev: PDP-11-Pseudos,  Up: PDP-11-Dependent

PDP-11 Assembly Language Syntax
-------------------------------

   `as' supports both DEC syntax and BSD syntax.  The only difference
is that in DEC syntax, a `#' character is used to denote an immediate
constants, while in BSD syntax the character for this purpose is `$'.

   eneral-purpose registers are named `r0' through `r7'.  Mnemonic
alternatives for `r6' and `r7' are `sp' and `pc', respectively.

   Floating-point registers are named `ac0' through `ac3', or
alternatively `fr0' through `fr3'.

   Comments are started with a `#' or a `/' character, and extend to
the end of the line.  (FIXME: clash with immediates?)


File: as.info,  Node: PDP-11-Mnemonics,  Next: PDP-11-Synthetic,  Prev: PDP-11-Syntax,  Up: PDP-11-Dependent

Instruction Naming
------------------

   Some instructions have alternative names.

`BCC'
     `BHIS'

`BCS'
     `BLO'

`L2DR'
     `L2D'

`L3DR'
     `L3D'

`SYS'
     `TRAP'


File: as.info,  Node: PDP-11-Synthetic,  Prev: PDP-11-Mnemonics,  Up: PDP-11-Dependent

Synthetic Instructions
----------------------

   The `JBR' and `J'CC synthetic instructions are not supported yet.


File: as.info,  Node: PJ-Dependent,  Next: PPC-Dependent,  Prev: PDP-11-Dependent,  Up: Machine Dependencies

picoJava Dependent Features
===========================

* Menu:

* PJ Options::              Options


File: as.info,  Node: PJ Options,  Up: PJ-Dependent

Options
-------

   `as' has two additional command-line options for the picoJava
architecture.
`-ml'
     This option selects little endian data output.

`-mb'
     This option selects big endian data output.


File: as.info,  Node: PPC-Dependent,  Next: Sparc-Dependent,  Prev: PJ-Dependent,  Up: Machine Dependencies

PowerPC Dependent Features
==========================

* Menu:

* PowerPC-Opts::                Options


File: as.info,  Node: PowerPC-Opts,  Up: PPC-Dependent

Options
-------

   The PowerPC chip family includes several successive levels, using
the same core instruction set, but including a few additional
instructions at each level.  There are exceptions to this however.  For
details on what instructions each variant supports, please see the
chip's architecture reference manual.

   The following table lists all available PowerPC options.

`-mpwrx | -mpwr2'
     Generate code for POWER/2 (RIOS2).

`-mpwr'
     Generate code for POWER (RIOS1)

`-m601'
     Generate code for PowerPC 601.

`-mppc, -mppc32, -m603, -m604'
     Generate code for PowerPC 603/604.

`-m403, -m405'
     Generate code for PowerPC 403/405.

`-m7400, -m7410, -m7450, -m7455'
     Generate code for PowerPC 7400/7410/7450/7455.

`-mppc64, -m620'
     Generate code for PowerPC 620/625/630.

`-mppc64bridge'
     Generate code for PowerPC 64, including bridge insns.

`-mbooke64'
     Generate code for 64-bit BookE.

`-mbooke, mbooke32'
     Generate code for 32-bit BookE.

`-maltivec'
     Generate code for processors with AltiVec instructions.

`-mpower4'
     Generate code for Power4 architecture.

`-mcom'
     Generate code Power/PowerPC common instructions.

`-many'
     Generate code for any architecture (PWR/PWRX/PPC).

`-mregnames'
     Allow symbolic names for registers.

`-mno-regnames'
     Do not allow symbolic names for registers.

`-mrelocatable'
     Support for GCC's -mrelocatble option.

`-mrelocatable-lib'
     Support for GCC's -mrelocatble-lib option.

`-memb'
     Set PPC_EMB bit in ELF flags.

`-mlittle, -mlittle-endian'
     Generate code for a little endian machine.

`-mbig, -mbig-endian'
     Generate code for a big endian machine.

`-msolaris'
     Generate code for Solaris.

`-mno-solaris'
     Do not generate code for Solaris.


File: as.info,  Node: SH-Dependent,  Next: SH64-Dependent,  Prev: MSP430-Dependent,  Up: Machine Dependencies

Renesas / SuperH SH Dependent Features
======================================

* Menu:

* SH Options::              Options
* SH Syntax::               Syntax
* SH Floating Point::       Floating Point
* SH Directives::           SH Machine Directives
* SH Opcodes::              Opcodes


File: as.info,  Node: SH Options,  Next: SH Syntax,  Up: SH-Dependent

Options
-------

   `as' has following command-line options for the Renesas (formerly
Hitachi) / SuperH SH family.

`-little'
     Generate little endian code.

`-big'
     Generate big endian code.

`-relax'
     Alter jump instructions for long displacements.

`-small'
     Align sections to 4 byte boundaries, not 16.

`-dsp'
     Enable sh-dsp insns, and disable sh3e / sh4 insns.


File: as.info,  Node: SH Syntax,  Next: SH Floating Point,  Prev: SH Options,  Up: SH-Dependent

Syntax
------

* Menu:

* SH-Chars::                Special Characters
* SH-Regs::                 Register Names
* SH-Addressing::           Addressing Modes


File: as.info,  Node: SH-Chars,  Next: SH-Regs,  Up: SH Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH-Regs,  Next: SH-Addressing,  Prev: SH-Chars,  Up: SH Syntax

Register Names
..............

   You can use the predefined symbols `r0', `r1', `r2', `r3', `r4',
`r5', `r6', `r7', `r8', `r9', `r10', `r11', `r12', `r13', `r14', and
`r15' to refer to the SH registers.

   The SH also has these control registers:

`pr'
     procedure register (holds return address)

`pc'
     program counter

`mach'
`macl'
     high and low multiply accumulator registers

`sr'
     status register

`gbr'
     global base register

`vbr'
     vector base register (for interrupt vectors)


File: as.info,  Node: SH-Addressing,  Prev: SH-Regs,  Up: SH Syntax

Addressing Modes
................

   `as' understands the following addressing modes for the SH.  `RN' in
the following refers to any of the numbered registers, but _not_ the
control registers.

`RN'
     Register direct

`@@RN'
     Register indirect

`@@-RN'
     Register indirect with pre-decrement

`@@RN+'
     Register indirect with post-increment

`@@(DISP, RN)'
     Register indirect with displacement

`@@(R0, RN)'
     Register indexed

`@@(DISP, GBR)'
     `GBR' offset

`@@(R0, GBR)'
     GBR indexed

`ADDR'
`@@(DISP, PC)'
     PC relative address (for branch or for addressing memory).  The
     `as' implementation allows you to use the simpler form ADDR
     anywhere a PC relative address is called for; the alternate form
     is supported for compatibility with other assemblers.

`#IMM'
     Immediate data


File: as.info,  Node: SH Floating Point,  Next: SH Directives,  Prev: SH Syntax,  Up: SH-Dependent

Floating Point
--------------

   The SH family has no hardware floating point, but the `.float'
directive generates IEEE floating-point numbers for compatibility with
other development tools.


File: as.info,  Node: SH Directives,  Next: SH Opcodes,  Prev: SH Floating Point,  Up: SH-Dependent

SH Machine Directives
---------------------

`uaword'
`ualong'
     `as' will issue a warning when a misaligned `.word' or `.long'
     directive is used.  You may use `.uaword' or `.ualong' to indicate
     that the value is intentionally misaligned.


File: as.info,  Node: SH Opcodes,  Prev: SH Directives,  Up: SH-Dependent

Opcodes
-------

   For detailed information on the SH machine instruction set, see
`SH-Microcomputer User's Manual' (Renesas) or `SH-4 32-bit CPU Core
Architecture' (SuperH) and `SuperH (SH) 64-Bit RISC Series' (SuperH).

   `as' implements all the standard SH opcodes.  No additional
pseudo-instructions are needed on this family.  Note, however, that
because `as' supports a simpler form of PC-relative addressing, you may
simply write (for example)

     mov.l  bar,r0

where other assemblers might require an explicit displacement to `bar'
from the program counter:

     mov.l  @@(DISP, PC)

   Here is a summary of SH opcodes:

     Legend:
     Rn        a numbered register
     Rm        another numbered register
     #imm      immediate data
     disp      displacement
     disp8     8-bit displacement
     disp12    12-bit displacement
     
     add #imm,Rn                    lds.l @@Rn+,PR
     add Rm,Rn                      mac.w @@Rm+,@@Rn+
     addc Rm,Rn                     mov #imm,Rn
     addv Rm,Rn                     mov Rm,Rn
     and #imm,R0                    mov.b Rm,@@(R0,Rn)
     and Rm,Rn                      mov.b Rm,@@-Rn
     and.b #imm,@@(R0,GBR)           mov.b Rm,@@Rn
     bf disp8                       mov.b @@(disp,Rm),R0
     bra disp12                     mov.b @@(disp,GBR),R0
     bsr disp12                     mov.b @@(R0,Rm),Rn
     bt disp8                       mov.b @@Rm+,Rn
     clrmac                         mov.b @@Rm,Rn
     clrt                           mov.b R0,@@(disp,Rm)
     cmp/eq #imm,R0                 mov.b R0,@@(disp,GBR)
     cmp/eq Rm,Rn                   mov.l Rm,@@(disp,Rn)
     cmp/ge Rm,Rn                   mov.l Rm,@@(R0,Rn)
     cmp/gt Rm,Rn                   mov.l Rm,@@-Rn
     cmp/hi Rm,Rn                   mov.l Rm,@@Rn
     cmp/hs Rm,Rn                   mov.l @@(disp,Rn),Rm
     cmp/pl Rn                      mov.l @@(disp,GBR),R0
     cmp/pz Rn                      mov.l @@(disp,PC),Rn
     cmp/str Rm,Rn                  mov.l @@(R0,Rm),Rn
     div0s Rm,Rn                    mov.l @@Rm+,Rn
     div0u                          mov.l @@Rm,Rn
     div1 Rm,Rn                     mov.l R0,@@(disp,GBR)
     exts.b Rm,Rn                   mov.w Rm,@@(R0,Rn)
     exts.w Rm,Rn                   mov.w Rm,@@-Rn
     extu.b Rm,Rn                   mov.w Rm,@@Rn
     extu.w Rm,Rn                   mov.w @@(disp,Rm),R0
     jmp @@Rn                        mov.w @@(disp,GBR),R0
     jsr @@Rn                        mov.w @@(disp,PC),Rn
     ldc Rn,GBR                     mov.w @@(R0,Rm),Rn
     ldc Rn,SR                      mov.w @@Rm+,Rn
     ldc Rn,VBR                     mov.w @@Rm,Rn
     ldc.l @@Rn+,GBR                 mov.w R0,@@(disp,Rm)
     ldc.l @@Rn+,SR                  mov.w R0,@@(disp,GBR)
     ldc.l @@Rn+,VBR                 mova @@(disp,PC),R0
     lds Rn,MACH                    movt Rn
     lds Rn,MACL                    muls Rm,Rn
     lds Rn,PR                      mulu Rm,Rn
     lds.l @@Rn+,MACH                neg Rm,Rn
     lds.l @@Rn+,MACL                negc Rm,Rn
     
     nop                            stc VBR,Rn
     not Rm,Rn                      stc.l GBR,@@-Rn
     or #imm,R0                     stc.l SR,@@-Rn
     or Rm,Rn                       stc.l VBR,@@-Rn
     or.b #imm,@@(R0,GBR)            sts MACH,Rn
     rotcl Rn                       sts MACL,Rn
     rotcr Rn                       sts PR,Rn
     rotl Rn                        sts.l MACH,@@-Rn
     rotr Rn                        sts.l MACL,@@-Rn
     rte                            sts.l PR,@@-Rn
     rts                            sub Rm,Rn
     sett                           subc Rm,Rn
     shal Rn                        subv Rm,Rn
     shar Rn                        swap.b Rm,Rn
     shll Rn                        swap.w Rm,Rn
     shll16 Rn                      tas.b @@Rn
     shll2 Rn                       trapa #imm
     shll8 Rn                       tst #imm,R0
     shlr Rn                        tst Rm,Rn
     shlr16 Rn                      tst.b #imm,@@(R0,GBR)
     shlr2 Rn                       xor #imm,R0
     shlr8 Rn                       xor Rm,Rn
     sleep                          xor.b #imm,@@(R0,GBR)
     stc GBR,Rn                     xtrct Rm,Rn
     stc SR,Rn


File: as.info,  Node: SH64-Dependent,  Next: PDP-11-Dependent,  Prev: SH-Dependent,  Up: Machine Dependencies

SuperH SH64 Dependent Features
==============================

* Menu:

* SH64 Options::              Options
* SH64 Syntax::               Syntax
* SH64 Directives::           SH64 Machine Directives
* SH64 Opcodes::              Opcodes


File: as.info,  Node: SH64 Options,  Next: SH64 Syntax,  Up: SH64-Dependent

Options
-------

`-isa=shmedia | -isa=shcompact'
     Specify the default instruction set.  `SHmedia' specifies the
     32-bit opcodes, and `SHcompact' specifies the 16-bit opcodes
     compatible with previous SH families.  The default depends on the
     ABI selected; the default for the 64-bit ABI is SHmedia, and the
     default for the 32-bit ABI is SHcompact.  If neither the ABI nor
     the ISA is specified, the default is 32-bit SHcompact.

     Note that the `.mode' pseudo-op is not permitted if the ISA is not
     specified on the command line.

`-abi=32 | -abi=64'
     Specify the default ABI.  If the ISA is specified and the ABI is
     not, the default ABI depends on the ISA, with SHmedia defaulting
     to 64-bit and SHcompact defaulting to 32-bit.

     Note that the `.abi' pseudo-op is not permitted if the ABI is not
     specified on the command line.  When the ABI is specified on the
     command line, any `.abi' pseudo-ops in the source must match it.

`-shcompact-const-crange'
     Emit code-range descriptors for constants in SHcompact code
     sections.

`-no-mix'
     Disallow SHmedia code in the same section as constants and
     SHcompact code.

`-no-expand'
     Do not expand MOVI, PT, PTA or PTB instructions.

`-expand-pt32'
     With -abi=64, expand PT, PTA and PTB instructions to 32 bits only.


File: as.info,  Node: SH64 Syntax,  Next: SH64 Directives,  Prev: SH64 Options,  Up: SH64-Dependent

Syntax
------

* Menu:

* SH64-Chars::                Special Characters
* SH64-Regs::                 Register Names
* SH64-Addressing::           Addressing Modes


File: as.info,  Node: SH64-Chars,  Next: SH64-Regs,  Up: SH64 Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH64-Regs,  Next: SH64-Addressing,  Prev: SH64-Chars,  Up: SH64 Syntax

Register Names
..............

   You can use the predefined symbols `r0' through `r63' to refer to
the SH64 general registers, `cr0' through `cr63' for control registers,
`tr0' through `tr7' for target address registers, `fr0' through `fr63'
for single-precision floating point registers, `dr0' through `dr62'
(even numbered registers only) for double-precision floating point
registers, `fv0' through `fv60' (multiples of four only) for
single-precision floating point vectors, `fp0' through `fp62' (even
numbered registers only) for single-precision floating point pairs,
`mtrx0' through `mtrx48' (multiples of 16 only) for 4x4 matrices of
single-precision floating point registers, `pc' for the program
counter, and `fpscr' for the floating point status and control register.

   You can also refer to the control registers by the mnemonics `sr',
`ssr', `pssr', `intevt', `expevt', `pexpevt', `tra', `spc', `pspc',
`resvec', `vbr', `tea', `dcr', `kcr0', `kcr1', `ctc', and `usr'.


File: as.info,  Node: SH64-Addressing,  Prev: SH64-Regs,  Up: SH64 Syntax

Addressing Modes
................

   SH64 operands consist of either a register or immediate value.  The
immediate value can be a constant or label reference (or portion of a
label reference), as in this example:

     	movi	4,r2
     	pt	function, tr4
     	movi	(function >> 16) & 65535,r0
     	shori	function & 65535, r0
     	ld.l	r0,4,r0

   Instruction label references can reference labels in either SHmedia
or SHcompact.  To differentiate between the two, labels in SHmedia
sections will always have the least significant bit set (i.e. they will
be odd), which SHcompact labels will have the least significant bit
reset (i.e. they will be even).  If you need to reference the actual
address of a label, you can use the `datalabel' modifier, as in this
example:

     	.long	function
     	.long	datalabel function

   In that example, the first longword may or may not have the least
significant bit set depending on whether the label is an SHmedia label
or an SHcompact label.  The second longword will be the actual address
of the label, regardless of what type of label it is.


File: as.info,  Node: SH64 Directives,  Next: SH64 Opcodes,  Prev: SH64 Syntax,  Up: SH64-Dependent

SH64 Machine Directives
-----------------------

   In addition to the SH directives, the SH64 provides the following
directives:

`.mode [shmedia|shcompact]'
`.isa [shmedia|shcompact]'
     Specify the ISA for the following instructions (the two directives
     are equivalent).  Note that programs such as `objdump' rely on
     symbolic labels to determine when such mode switches occur (by
     checking the least significant bit of the label's address), so
     such mode/isa changes should always be followed by a label (in
     practice, this is true anyway).  Note that you cannot use these
     directives if you didn't specify an ISA on the command line.

`.abi [32|64]'
     Specify the ABI for the following instructions.  Note that you
     cannot use this directive unless you specified an ABI on the
     command line, and the ABIs specified must match.

`.uaquad'
     Like .uaword and .ualong, this allows you to specify an
     intenionally unaligned quadword (64 bit word).

@


1.1.8.1
log
@Add generated files.
@
text
@a0 1438
This is as.info, produced by makeinfo version 4.2 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: MMIX-mmixal,  Prev: MMIX-Syntax,  Up: MMIX-Dependent

Differences to `mmixal'
-----------------------

   The binutils `as' and `ld' combination has a few differences in
function compared to `mmixal' (*note mmixsite::).

   The replacement of a symbol with a GREG-allocated register (*note
GREG-base::) is not handled the exactly same way in `as' as in
`mmixal'.  This is apparent in the `mmixal' example file `inout.mms',
where different registers with different offsets, eventually yielding
the same address, are used in the first instruction.  This type of
difference should however not affect the function of any program unless
it has specific assumptions about the allocated register number.

   Line numbers (in the `mmo' object format) are currently not
supported.

   Expression operator precedence is not that of mmixal: operator
precedence is that of the C programming language.  It's recommended to
use parentheses to explicitly specify wanted operator precedence
whenever more than one type of operators are used.

   The serialize unary operator `&', the fractional division operator
`//', the logical not operator `!' and the modulus operator `%' are not
available.

   Symbols are not global by default, unless the option
`--globalize-symbols' is passed.  Use the `.global' directive to
globalize symbols (*note Global::).

   Operand syntax is a bit stricter with `as' than `mmixal'.  For
example, you can't say `addu 1,2,3', instead you must write `addu
$1,$2,3'.

   You can't LOC to a lower address than those already visited (i.e.
"backwards").

   A LOC directive must come before any emitted code.

   Predefined symbols are visible as file-local symbols after use.  (In
the ELF file, that is--the linked mmo file has no notion of a file-local
symbol.)

   Some mapping of constant expressions to sections in LOC expressions
is attempted, but that functionality is easily confused and should be
avoided unless compatibility with `mmixal' is required.  A LOC
expression to `0x2000000000000000' or higher, maps to the `.data'
section and lower addresses map to the `.text' section (*note
MMIX-loc::).

   The code and data areas are each contiguous.  Sparse programs with
far-away LOC directives will take up the same amount of space as a
contiguous program with zeros filled in the gaps between the LOC
directives.  If you need sparse programs, you might try and get the
wanted effect with a linker script and splitting up the code parts into
sections (*note Section::).  Assembly code for this, to be compatible
with `mmixal', would look something like:
      .if 0
      LOC away_expression
      .else
      .section away,"ax"
      .fi
   `as' will not execute the LOC directive and `mmixal' ignores the
lines with `.'.  This construct can be used generally to help
compatibility.

   Symbols can't be defined twice-not even to the same value.

   Instruction mnemonics are recognized case-insensitive, though the
`IS' and `GREG' pseudo-operations must be specified in upper-case
characters.

   There's no unicode support.

   The following is a list of programs in `mmix.tar.gz', available at
<http://www-cs-faculty.stanford.edu/~knuth/mmix-news.html>, last
checked with the version dated 2001-08-25 (md5sum
c393470cfc86fac040487d22d2bf0172) that assemble with `mmixal' but do
not assemble with `as':

`silly.mms'
     LOC to a previous address.

`sim.mms'
     Redefines symbol `Done'.

`test.mms'
     Uses the serial operator `&'.


File: as.info,  Node: PDP-11-Dependent,  Next: PJ-Dependent,  Prev: SH64-Dependent,  Up: Machine Dependencies

PDP-11 Dependent Features
=========================

* Menu:

* PDP-11-Options::		Options
* PDP-11-Pseudos::		Assembler Directives
* PDP-11-Syntax::		DEC Syntax versus BSD Syntax
* PDP-11-Mnemonics::		Instruction Naming
* PDP-11-Synthetic::		Synthetic Instructions


File: as.info,  Node: PDP-11-Options,  Next: PDP-11-Pseudos,  Up: PDP-11-Dependent

Options
-------

   The PDP-11 version of `as' has a rich set of machine dependent
options.

Code Generation Options
.......................

`-mpic | -mno-pic'
     Generate position-independent (or position-dependent) code.

     The default is to generate position-independent code.

Instruction Set Extention Options
.................................

   These options enables or disables the use of extensions over the base
line instruction set as introduced by the first PDP-11 CPU: the KA11.
Most options come in two variants: a `-m'EXTENSION that enables
EXTENSION, and a `-mno-'EXTENSION that disables EXTENSION.

   The default is to enable all extensions.

`-mall | -mall-extensions'
     Enable all instruction set extensions.

`-mno-extensions'
     Disable all instruction set extensions.

`-mcis | -mno-cis'
     Enable (or disable) the use of the commersial instruction set,
     which consists of these instructions: `ADDNI', `ADDN', `ADDPI',
     `ADDP', `ASHNI', `ASHN', `ASHPI', `ASHP', `CMPCI', `CMPC',
     `CMPNI', `CMPN', `CMPPI', `CMPP', `CVTLNI', `CVTLN', `CVTLPI',
     `CVTLP', `CVTNLI', `CVTNL', `CVTNPI', `CVTNP', `CVTPLI', `CVTPL',
     `CVTPNI', `CVTPN', `DIVPI', `DIVP', `L2DR', `L3DR', `LOCCI',
     `LOCC', `MATCI', `MATC', `MOVCI', `MOVC', `MOVRCI', `MOVRC',
     `MOVTCI', `MOVTC', `MULPI', `MULP', `SCANCI', `SCANC', `SKPCI',
     `SKPC', `SPANCI', `SPANC', `SUBNI', `SUBN', `SUBPI', and `SUBP'.

`-mcsm | -mno-csm'
     Enable (or disable) the use of the `CSM' instruction.

`-meis | -mno-eis'
     Enable (or disable) the use of the extended instruction set, which
     consists of these instructions: `ASHC', `ASH', `DIV', `MARK',
     `MUL', `RTT', `SOB' `SXT', and `XOR'.

`-mfis | -mkev11'
`-mno-fis | -mno-kev11'
     Enable (or diasble) the use of the KEV11 floating-point
     instructions: `FADD', `FDIV', `FMUL', and `FSUB'.

`-mfpp | -mfpu | -mfp-11'
`-mno-fpp | -mno-fpu | -mno-fp-11'
     Enable (or disable) the use of FP-11 floating-point instructions:
     `ABSF', `ADDF', `CFCC', `CLRF', `CMPF', `DIVF', `LDCFF', `LDCIF',
     `LDEXP', `LDF', `LDFPS', `MODF', `MULF', `NEGF', `SETD', `SETF',
     `SETI', `SETL', `STCFF', `STCFI', `STEXP', `STF', `STFPS', `STST',
     `SUBF', and `TSTF'.

`-mlimited-eis | -mno-limited-eis'
     Enable (or disable) the use of the limited extended instruction
     set: `MARK', `RTT', `SOB', `SXT', and `XOR'.

     The -mno-limited-eis options also implies -mno-eis.

`-mmfpt | -mno-mfpt'
     Enable (or disable) the use of the `MFPT' instruction.

`-mmultiproc | -mno-multiproc'
     Enable (or disable) the use of multiprocessor instructions:
     `TSTSET' and `WRTLCK'.

`-mmxps | -mno-mxps'
     Enable (or disable) the use of the `MFPS' and `MTPS' instructions.

`-mspl | -mno-spl'
     Enable (or disable) the use of the `SPL' instruction.

     Enable (or disable) the use of the microcode instructions: `LDUB',
     `MED', and `XFC'.

CPU Model Options
.................

   These options enable the instruction set extensions supported by a
particular CPU, and disables all other extensions.

`-mka11'
     KA11 CPU.  Base line instruction set only.

`-mkb11'
     KB11 CPU.  Enable extended instruction set and `SPL'.

`-mkd11a'
     KD11-A CPU.  Enable limited extended instruction set.

`-mkd11b'
     KD11-B CPU.  Base line instruction set only.

`-mkd11d'
     KD11-D CPU.  Base line instruction set only.

`-mkd11e'
     KD11-E CPU.  Enable extended instruction set, `MFPS', and `MTPS'.

`-mkd11f | -mkd11h | -mkd11q'
     KD11-F, KD11-H, or KD11-Q CPU.  Enable limited extended
     instruction set, `MFPS', and `MTPS'.

`-mkd11k'
     KD11-K CPU.  Enable extended instruction set, `LDUB', `MED',
     `MFPS', `MFPT', `MTPS', and `XFC'.

`-mkd11z'
     KD11-Z CPU.  Enable extended instruction set, `CSM', `MFPS',
     `MFPT', `MTPS', and `SPL'.

`-mf11'
     F11 CPU.  Enable extended instruction set, `MFPS', `MFPT', and
     `MTPS'.

`-mj11'
     J11 CPU.  Enable extended instruction set, `CSM', `MFPS', `MFPT',
     `MTPS', `SPL', `TSTSET', and `WRTLCK'.

`-mt11'
     T11 CPU.  Enable limited extended instruction set, `MFPS', and
     `MTPS'.

Machine Model Options
.....................

   These options enable the instruction set extensions supported by a
particular machine model, and disables all other extensions.

`-m11/03'
     Same as `-mkd11f'.

`-m11/04'
     Same as `-mkd11d'.

`-m11/05 | -m11/10'
     Same as `-mkd11b'.

`-m11/15 | -m11/20'
     Same as `-mka11'.

`-m11/21'
     Same as `-mt11'.

`-m11/23 | -m11/24'
     Same as `-mf11'.

`-m11/34'
     Same as `-mkd11e'.

`-m11/34a'
     Ame as `-mkd11e' `-mfpp'.

`-m11/35 | -m11/40'
     Same as `-mkd11a'.

`-m11/44'
     Same as `-mkd11z'.

`-m11/45 | -m11/50 | -m11/55 | -m11/70'
     Same as `-mkb11'.

`-m11/53 | -m11/73 | -m11/83 | -m11/84 | -m11/93 | -m11/94'
     Same as `-mj11'.

`-m11/60'
     Same as `-mkd11k'.


File: as.info,  Node: PDP-11-Pseudos,  Next: PDP-11-Syntax,  Prev: PDP-11-Options,  Up: PDP-11-Dependent

Assembler Directives
--------------------

   The PDP-11 version of `as' has a few machine dependent assembler
directives.

`.bss'
     Switch to the `bss' section.

`.even'
     Align the location counter to an even number.


File: as.info,  Node: PDP-11-Syntax,  Next: PDP-11-Mnemonics,  Prev: PDP-11-Pseudos,  Up: PDP-11-Dependent

PDP-11 Assembly Language Syntax
-------------------------------

   `as' supports both DEC syntax and BSD syntax.  The only difference
is that in DEC syntax, a `#' character is used to denote an immediate
constants, while in BSD syntax the character for this purpose is `$'.

   eneral-purpose registers are named `r0' through `r7'.  Mnemonic
alternatives for `r6' and `r7' are `sp' and `pc', respectively.

   Floating-point registers are named `ac0' through `ac3', or
alternatively `fr0' through `fr3'.

   Comments are started with a `#' or a `/' character, and extend to
the end of the line.  (FIXME: clash with immediates?)


File: as.info,  Node: PDP-11-Mnemonics,  Next: PDP-11-Synthetic,  Prev: PDP-11-Syntax,  Up: PDP-11-Dependent

Instruction Naming
------------------

   Some instructions have alternative names.

`BCC'
     `BHIS'

`BCS'
     `BLO'

`L2DR'
     `L2D'

`L3DR'
     `L3D'

`SYS'
     `TRAP'


File: as.info,  Node: PDP-11-Synthetic,  Prev: PDP-11-Mnemonics,  Up: PDP-11-Dependent

Synthetic Instructions
----------------------

   The `JBR' and `J'CC synthetic instructions are not supported yet.


File: as.info,  Node: PJ-Dependent,  Next: PPC-Dependent,  Prev: PDP-11-Dependent,  Up: Machine Dependencies

picoJava Dependent Features
===========================

* Menu:

* PJ Options::              Options


File: as.info,  Node: PJ Options,  Up: PJ-Dependent

Options
-------

   `as' has two addiitional command-line options for the picoJava
architecture.
`-ml'
     This option selects little endian data output.

`-mb'
     This option selects big endian data output.


File: as.info,  Node: PPC-Dependent,  Next: Sparc-Dependent,  Prev: PJ-Dependent,  Up: Machine Dependencies

PowerPC Dependent Features
==========================

* Menu:

* PowerPC-Opts::                Options


File: as.info,  Node: PowerPC-Opts,  Up: PPC-Dependent

Options
-------

   The PowerPC chip family includes several successive levels, using
the same core instruction set, but including a few additional
instructions at each level.  There are exceptions to this however.  For
details on what instructions each variant supports, please see the
chip's architecture reference manual.

   The following table lists all available PowerPC options.

`-mpwrx | -mpwr2'
     Generate code for POWER/2 (RIOS2).

`-mpwr'
     Generate code for POWER (RIOS1)

`-m601'
     Generate code for PowerPC 601.

`-mppc, -mppc32, -m603, -m604'
     Generate code for PowerPC 603/604.

`-m403, -m405'
     Generate code for PowerPC 403/405.

`-m7400, -m7410, -m7450, -m7455'
     Generate code for PowerPC 7400/7410/7450/7455.

`-mppc64, -m620'
     Generate code for PowerPC 620/625/630.

`-mppc64bridge'
     Generate code for PowerPC 64, including bridge insns.

`-mbooke64'
     Generate code for 64-bit BookE.

`-mbooke, mbooke32'
     Generate code for 32-bit BookE.

`-maltivec'
     Generate code for processors with AltiVec instructions.

`-mpower4'
     Generate code for Power4 architecture.

`-mcom'
     Generate code Power/PowerPC common instructions.

`-many'
     Generate code for any architecture (PWR/PWRX/PPC).

`-mregnames'
     Allow symbolic names for registers.

`-mno-regnames'
     Do not allow symbolic names for registers.

`-mrelocatable'
     Support for GCC's -mrelocatble option.

`-mrelocatable-lib'
     Support for GCC's -mrelocatble-lib option.

`-memb'
     Set PPC_EMB bit in ELF flags.

`-mlittle, -mlittle-endian'
     Generate code for a little endian machine.

`-mbig, -mbig-endian'
     Generate code for a big endian machine.

`-msolaris'
     Generate code for Solaris.

`-mno-solaris'
     Do not generate code for Solaris.


File: as.info,  Node: SH-Dependent,  Next: SH64-Dependent,  Prev: MMIX-Dependent,  Up: Machine Dependencies

Hitachi SH Dependent Features
=============================

* Menu:

* SH Options::              Options
* SH Syntax::               Syntax
* SH Floating Point::       Floating Point
* SH Directives::           SH Machine Directives
* SH Opcodes::              Opcodes


File: as.info,  Node: SH Options,  Next: SH Syntax,  Up: SH-Dependent

Options
-------

   `as' has following command-line options for the Hitachi SH family.

`-little'
     Generate little endian code.

`-big'
     Generate big endian code.

`-relax'
     Alter jump instructions for long displacements.

`-small'
     Align sections to 4 byte boundaries, not 16.

`-dsp'
     Enable sh-dsp insns, and disable sh3e / sh4 insns.


File: as.info,  Node: SH Syntax,  Next: SH Floating Point,  Prev: SH Options,  Up: SH-Dependent

Syntax
------

* Menu:

* SH-Chars::                Special Characters
* SH-Regs::                 Register Names
* SH-Addressing::           Addressing Modes


File: as.info,  Node: SH-Chars,  Next: SH-Regs,  Up: SH Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH-Regs,  Next: SH-Addressing,  Prev: SH-Chars,  Up: SH Syntax

Register Names
..............

   You can use the predefined symbols `r0', `r1', `r2', `r3', `r4',
`r5', `r6', `r7', `r8', `r9', `r10', `r11', `r12', `r13', `r14', and
`r15' to refer to the SH registers.

   The SH also has these control registers:

`pr'
     procedure register (holds return address)

`pc'
     program counter

`mach'
`macl'
     high and low multiply accumulator registers

`sr'
     status register

`gbr'
     global base register

`vbr'
     vector base register (for interrupt vectors)


File: as.info,  Node: SH-Addressing,  Prev: SH-Regs,  Up: SH Syntax

Addressing Modes
................

   `as' understands the following addressing modes for the SH.  `RN' in
the following refers to any of the numbered registers, but _not_ the
control registers.

`RN'
     Register direct

`@@RN'
     Register indirect

`@@-RN'
     Register indirect with pre-decrement

`@@RN+'
     Register indirect with post-increment

`@@(DISP, RN)'
     Register indirect with displacement

`@@(R0, RN)'
     Register indexed

`@@(DISP, GBR)'
     `GBR' offset

`@@(R0, GBR)'
     GBR indexed

`ADDR'
`@@(DISP, PC)'
     PC relative address (for branch or for addressing memory).  The
     `as' implementation allows you to use the simpler form ADDR
     anywhere a PC relative address is called for; the alternate form
     is supported for compatibility with other assemblers.

`#IMM'
     Immediate data


File: as.info,  Node: SH Floating Point,  Next: SH Directives,  Prev: SH Syntax,  Up: SH-Dependent

Floating Point
--------------

   The SH family has no hardware floating point, but the `.float'
directive generates IEEE floating-point numbers for compatibility with
other development tools.


File: as.info,  Node: SH Directives,  Next: SH Opcodes,  Prev: SH Floating Point,  Up: SH-Dependent

SH Machine Directives
---------------------

`uaword'
`ualong'
     `as' will issue a warning when a misaligned `.word' or `.long'
     directive is used.  You may use `.uaword' or `.ualong' to indicate
     that the value is intentionally misaligned.


File: as.info,  Node: SH Opcodes,  Prev: SH Directives,  Up: SH-Dependent

Opcodes
-------

   For detailed information on the SH machine instruction set, see
`SH-Microcomputer User's Manual' (Hitachi Micro Systems, Inc.).

   `as' implements all the standard SH opcodes.  No additional
pseudo-instructions are needed on this family.  Note, however, that
because `as' supports a simpler form of PC-relative addressing, you may
simply write (for example)

     mov.l  bar,r0

where other assemblers might require an explicit displacement to `bar'
from the program counter:

     mov.l  @@(DISP, PC)

   Here is a summary of SH opcodes:

     Legend:
     Rn        a numbered register
     Rm        another numbered register
     #imm      immediate data
     disp      displacement
     disp8     8-bit displacement
     disp12    12-bit displacement
     
     add #imm,Rn                    lds.l @@Rn+,PR
     add Rm,Rn                      mac.w @@Rm+,@@Rn+
     addc Rm,Rn                     mov #imm,Rn
     addv Rm,Rn                     mov Rm,Rn
     and #imm,R0                    mov.b Rm,@@(R0,Rn)
     and Rm,Rn                      mov.b Rm,@@-Rn
     and.b #imm,@@(R0,GBR)           mov.b Rm,@@Rn
     bf disp8                       mov.b @@(disp,Rm),R0
     bra disp12                     mov.b @@(disp,GBR),R0
     bsr disp12                     mov.b @@(R0,Rm),Rn
     bt disp8                       mov.b @@Rm+,Rn
     clrmac                         mov.b @@Rm,Rn
     clrt                           mov.b R0,@@(disp,Rm)
     cmp/eq #imm,R0                 mov.b R0,@@(disp,GBR)
     cmp/eq Rm,Rn                   mov.l Rm,@@(disp,Rn)
     cmp/ge Rm,Rn                   mov.l Rm,@@(R0,Rn)
     cmp/gt Rm,Rn                   mov.l Rm,@@-Rn
     cmp/hi Rm,Rn                   mov.l Rm,@@Rn
     cmp/hs Rm,Rn                   mov.l @@(disp,Rn),Rm
     cmp/pl Rn                      mov.l @@(disp,GBR),R0
     cmp/pz Rn                      mov.l @@(disp,PC),Rn
     cmp/str Rm,Rn                  mov.l @@(R0,Rm),Rn
     div0s Rm,Rn                    mov.l @@Rm+,Rn
     div0u                          mov.l @@Rm,Rn
     div1 Rm,Rn                     mov.l R0,@@(disp,GBR)
     exts.b Rm,Rn                   mov.w Rm,@@(R0,Rn)
     exts.w Rm,Rn                   mov.w Rm,@@-Rn
     extu.b Rm,Rn                   mov.w Rm,@@Rn
     extu.w Rm,Rn                   mov.w @@(disp,Rm),R0
     jmp @@Rn                        mov.w @@(disp,GBR),R0
     jsr @@Rn                        mov.w @@(disp,PC),Rn
     ldc Rn,GBR                     mov.w @@(R0,Rm),Rn
     ldc Rn,SR                      mov.w @@Rm+,Rn
     ldc Rn,VBR                     mov.w @@Rm,Rn
     ldc.l @@Rn+,GBR                 mov.w R0,@@(disp,Rm)
     ldc.l @@Rn+,SR                  mov.w R0,@@(disp,GBR)
     ldc.l @@Rn+,VBR                 mova @@(disp,PC),R0
     lds Rn,MACH                    movt Rn
     lds Rn,MACL                    muls Rm,Rn
     lds Rn,PR                      mulu Rm,Rn
     lds.l @@Rn+,MACH                neg Rm,Rn
     lds.l @@Rn+,MACL                negc Rm,Rn
     
     nop                            stc VBR,Rn
     not Rm,Rn                      stc.l GBR,@@-Rn
     or #imm,R0                     stc.l SR,@@-Rn
     or Rm,Rn                       stc.l VBR,@@-Rn
     or.b #imm,@@(R0,GBR)            sts MACH,Rn
     rotcl Rn                       sts MACL,Rn
     rotcr Rn                       sts PR,Rn
     rotl Rn                        sts.l MACH,@@-Rn
     rotr Rn                        sts.l MACL,@@-Rn
     rte                            sts.l PR,@@-Rn
     rts                            sub Rm,Rn
     sett                           subc Rm,Rn
     shal Rn                        subv Rm,Rn
     shar Rn                        swap.b Rm,Rn
     shll Rn                        swap.w Rm,Rn
     shll16 Rn                      tas.b @@Rn
     shll2 Rn                       trapa #imm
     shll8 Rn                       tst #imm,R0
     shlr Rn                        tst Rm,Rn
     shlr16 Rn                      tst.b #imm,@@(R0,GBR)
     shlr2 Rn                       xor #imm,R0
     shlr8 Rn                       xor Rm,Rn
     sleep                          xor.b #imm,@@(R0,GBR)
     stc GBR,Rn                     xtrct Rm,Rn
     stc SR,Rn


File: as.info,  Node: SH64-Dependent,  Next: PDP-11-Dependent,  Prev: SH-Dependent,  Up: Machine Dependencies

Hitachi SH64 Dependent Features
===============================

* Menu:

* SH64 Options::              Options
* SH64 Syntax::               Syntax
* SH64 Directives::           SH64 Machine Directives
* SH64 Opcodes::              Opcodes


File: as.info,  Node: SH64 Options,  Next: SH64 Syntax,  Up: SH64-Dependent

Options
-------

`-isa=shmedia | -isa=shcompact'
     Specify the default instruction set.  `SHmedia' specifies the
     32-bit opcodes, and `SHcompact' specifies the 16-bit opcodes
     compatible with previous SH families.  The default depends on the
     ABI selected; the default for the 64-bit ABI is SHmedia, and the
     default for the 32-bit ABI is SHcompact.  If neither the ABI nor
     the ISA is specified, the default is 32-bit SHcompact.

     Note that the `.mode' pseudo-op is not permitted if the ISA is not
     specified on the command line.

`-abi=32 | -abi=64'
     Specify the default ABI.  If the ISA is specified and the ABI is
     not, the default ABI depends on the ISA, with SHmedia defaulting
     to 64-bit and SHcompact defaulting to 32-bit.

     Note that the `.abi' pseudo-op is not permitted if the ABI is not
     specified on the command line.  When the ABI is specified on the
     command line, any `.abi' pseudo-ops in the source must match it.

`-shcompact-const-crange'
     Emit code-range descriptors for constants in SHcompact code
     sections.

`-no-mix'
     Disallow SHmedia code in the same section as constants and
     SHcompact code.

`-no-expand'
     Do not expand MOVI, PT, PTA or PTB instructions.

`-expand-pt32'
     With -abi=64, expand PT, PTA and PTB instructions to 32 bits only.


File: as.info,  Node: SH64 Syntax,  Next: SH64 Directives,  Prev: SH64 Options,  Up: SH64-Dependent

Syntax
------

* Menu:

* SH64-Chars::                Special Characters
* SH64-Regs::                 Register Names
* SH64-Addressing::           Addressing Modes


File: as.info,  Node: SH64-Chars,  Next: SH64-Regs,  Up: SH64 Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH64-Regs,  Next: SH64-Addressing,  Prev: SH64-Chars,  Up: SH64 Syntax

Register Names
..............

   You can use the predefined symbols `r0' through `r63' to refer to
the SH64 general registers, `cr0' through `cr63' for control registers,
`tr0' through `tr7' for target address registers, `fr0' through `fr63'
for single-precision floating point registers, `dr0' through `dr62'
(even numbered registers only) for double-precision floating point
registers, `fv0' through `fv60' (multiples of four only) for
single-precision floating point vectors, `fp0' through `fp62' (even
numbered registers only) for single-precision floating point pairs,
`mtrx0' through `mtrx48' (multiples of 16 only) for 4x4 matrices of
single-precision floating point registers, `pc' for the program
counter, and `fpscr' for the floating point status and control register.

   You can also refer to the control registers by the mnemonics `sr',
`ssr', `pssr', `intevt', `expevt', `pexpevt', `tra', `spc', `pspc',
`resvec', `vbr', `tea', `dcr', `kcr0', `kcr1', `ctc', and `usr'.


File: as.info,  Node: SH64-Addressing,  Prev: SH64-Regs,  Up: SH64 Syntax

Addressing Modes
................

   SH64 operands consist of either a register or immediate value.  The
immediate value can be a constant or label reference (or portion of a
label reference), as in this example:

     	movi	4,r2
     	pt	function, tr4
     	movi	(function >> 16) & 65535,r0
     	shori	function & 65535, r0
     	ld.l	r0,4,r0

   Instruction label references can reference labels in either SHmedia
or SHcompact.  To differentiate between the two, labels in SHmedia
sections will always have the least significant bit set (i.e. they will
be odd), which SHcompact labels will have the least significant bit
reset (i.e. they will be even).  If you need to reference the actual
address of a label, you can use the `datalabel' modifier, as in this
example:

     	.long	function
     	.long	datalabel function

   In that example, the first longword may or may not have the least
significant bit set depending on whether the label is an SHmedia label
or an SHcompact label.  The second longword will be the actual address
of the label, regardless of what type of lable it is.


File: as.info,  Node: SH64 Directives,  Next: SH64 Opcodes,  Prev: SH64 Syntax,  Up: SH64-Dependent

SH64 Machine Directives
-----------------------

   In addition to the SH directives, the SH64 provides the following
directives:

`.mode [shmedia|shcompact]'
`.isa [shmedia|shcompact]'
     Specify the ISA for the following instructions (the two directives
     are equivalent).  Note that programs such as `objdump' rely on
     symbolic labels to determine when such mode switches occur (by
     checking the least significant bit of the label's address), so
     such mode/isa changes should always be followed by a label (in
     practice, this is true anyway).  Note that you cannot use these
     directives if you didn't specify an ISA on the command line.

`.abi [32|64]'
     Specify the ABI for the following instructions.  Note that you
     cannot use this directive unless you specified an ABI on the
     command line, and the ABIs specified must match.

`.uaquad'
     Like .uaword and .ualong, this allows you to specify an
     intenionally unaligned quadword (64 bit word).


File: as.info,  Node: SH64 Opcodes,  Prev: SH64 Directives,  Up: SH64-Dependent

Opcodes
-------

   For detailed information on the SH64 machine instruction set, see
`SuperH 64 bit RISC Series Architecture Manual' (SuperH, Inc.).

   `as' implements all the standard SH64 opcodes.  In addition, the
following pseudo-opcodes may be expanded into one or more alternate
opcodes:

`movi'
     If the value doesn't fit into a standard `movi' opcode, `as' will
     replace the `movi' with a sequence of `movi' and `shori' opcodes.

`pt'
     This expands to a sequence of `movi' and `shori' opcode, followed
     by a `ptrel' opcode, or to a `pta' or `ptb' opcode, depending on
     the label referenced.


File: as.info,  Node: Sparc-Dependent,  Next: V850-Dependent,  Prev: PPC-Dependent,  Up: Machine Dependencies

SPARC Dependent Features
========================

* Menu:

* Sparc-Opts::                  Options
* Sparc-Aligned-Data::		Option to enforce aligned data
* Sparc-Float::                 Floating Point
* Sparc-Directives::            Sparc Machine Directives


File: as.info,  Node: Sparc-Opts,  Next: Sparc-Aligned-Data,  Up: Sparc-Dependent

Options
-------

   The SPARC chip family includes several successive levels, using the
same core instruction set, but including a few additional instructions
at each level.  There are exceptions to this however.  For details on
what instructions each variant supports, please see the chip's
architecture reference manual.

   By default, `as' assumes the core instruction set (SPARC v6), but
"bumps" the architecture level as needed: it switches to successively
higher architectures as it encounters instructions that only exist in
the higher levels.

   If not configured for SPARC v9 (`sparc64-*-*') GAS will not bump
passed sparclite by default, an option must be passed to enable the v9
instructions.

   GAS treats sparclite as being compatible with v8, unless an
architecture is explicitly requested.  SPARC v9 is always incompatible
with sparclite.

`-Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite'
`-Av8plus | -Av8plusa | -Av9 | -Av9a'
     Use one of the `-A' options to select one of the SPARC
     architectures explicitly.  If you select an architecture
     explicitly, `as' reports a fatal error if it encounters an
     instruction or feature requiring an incompatible or higher level.

     `-Av8plus' and `-Av8plusa' select a 32 bit environment.

     `-Av9' and `-Av9a' select a 64 bit environment and are not
     available unless GAS is explicitly configured with 64 bit
     environment support.

     `-Av8plusa' and `-Av9a' enable the SPARC V9 instruction set with
     UltraSPARC extensions.

`-xarch=v8plus | -xarch=v8plusa'
     For compatibility with the Solaris v9 assembler.  These options are
     equivalent to -Av8plus and -Av8plusa, respectively.

`-bump'
     Warn whenever it is necessary to switch to another level.  If an
     architecture level is explicitly requested, GAS will not issue
     warnings until that level is reached, and will then bump the level
     as required (except between incompatible levels).

`-32 | -64'
     Select the word size, either 32 bits or 64 bits.  These options
     are only available with the ELF object file format, and require
     that the necessary BFD support has been included.


File: as.info,  Node: Sparc-Aligned-Data,  Next: Sparc-Float,  Prev: Sparc-Opts,  Up: Sparc-Dependent

Enforcing aligned data
----------------------

   SPARC GAS normally permits data to be misaligned.  For example, it
permits the `.long' pseudo-op to be used on a byte boundary.  However,
the native SunOS and Solaris assemblers issue an error when they see
misaligned data.

   You can use the `--enforce-aligned-data' option to make SPARC GAS
also issue an error about misaligned data, just as the SunOS and Solaris
assemblers do.

   The `--enforce-aligned-data' option is not the default because gcc
issues misaligned data pseudo-ops when it initializes certain packed
data structures (structures defined using the `packed' attribute).  You
may have to assemble with GAS in order to initialize packed data
structures in your own code.


File: as.info,  Node: Sparc-Float,  Next: Sparc-Directives,  Prev: Sparc-Aligned-Data,  Up: Sparc-Dependent

Floating Point
--------------

   The Sparc uses IEEE floating-point numbers.


File: as.info,  Node: Sparc-Directives,  Prev: Sparc-Float,  Up: Sparc-Dependent

Sparc Machine Directives
------------------------

   The Sparc version of `as' supports the following additional machine
directives:

`.align'
     This must be followed by the desired alignment in bytes.

`.common'
     This must be followed by a symbol name, a positive number, and
     `"bss"'.  This behaves somewhat like `.comm', but the syntax is
     different.

`.half'
     This is functionally identical to `.short'.

`.nword'
     On the Sparc, the `.nword' directive produces native word sized
     value, ie. if assembling with -32 it is equivalent to `.word', if
     assembling with -64 it is equivalent to `.xword'.

`.proc'
     This directive is ignored.  Any text following it on the same line
     is also ignored.

`.register'
     This directive declares use of a global application or system
     register.  It must be followed by a register name %g2, %g3, %g6 or
     %g7, comma and the symbol name for that register.  If symbol name
     is `#scratch', it is a scratch register, if it is `#ignore', it
     just surpresses any errors about using undeclared global register,
     but does not emit any information about it into the object file.
     This can be useful e.g. if you save the register before use and
     restore it after.

`.reserve'
     This must be followed by a symbol name, a positive number, and
     `"bss"'.  This behaves somewhat like `.lcomm', but the syntax is
     different.

`.seg'
     This must be followed by `"text"', `"data"', or `"data1"'.  It
     behaves like `.text', `.data', or `.data 1'.

`.skip'
     This is functionally identical to the `.space' directive.

`.word'
     On the Sparc, the `.word' directive produces 32 bit values,
     instead of the 16 bit values it produces on many other machines.

`.xword'
     On the Sparc V9 processor, the `.xword' directive produces 64 bit
     values.


File: as.info,  Node: Z8000-Dependent,  Next: Vax-Dependent,  Prev: V850-Dependent,  Up: Machine Dependencies

Z8000 Dependent Features
========================

   The Z8000 as supports both members of the Z8000 family: the
unsegmented Z8002, with 16 bit addresses, and the segmented Z8001 with
24 bit addresses.

   When the assembler is in unsegmented mode (specified with the
`unsegm' directive), an address takes up one word (16 bit) sized
register.  When the assembler is in segmented mode (specified with the
`segm' directive), a 24-bit address takes up a long (32 bit) register.
*Note Assembler Directives for the Z8000: Z8000 Directives, for a list
of other Z8000 specific assembler directives.

* Menu:

* Z8000 Options::               No special command-line options for Z8000
* Z8000 Syntax::                Assembler syntax for the Z8000
* Z8000 Directives::            Special directives for the Z8000
* Z8000 Opcodes::               Opcodes


File: as.info,  Node: Z8000 Options,  Next: Z8000 Syntax,  Up: Z8000-Dependent

Options
-------

   `as' has no additional command-line options for the Zilog Z8000
family.


File: as.info,  Node: Z8000 Syntax,  Next: Z8000 Directives,  Prev: Z8000 Options,  Up: Z8000-Dependent

Syntax
------

* Menu:

* Z8000-Chars::                Special Characters
* Z8000-Regs::                 Register Names
* Z8000-Addressing::           Addressing Modes


File: as.info,  Node: Z8000-Chars,  Next: Z8000-Regs,  Up: Z8000 Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.


File: as.info,  Node: Z8000-Regs,  Next: Z8000-Addressing,  Prev: Z8000-Chars,  Up: Z8000 Syntax

Register Names
..............

   The Z8000 has sixteen 16 bit registers, numbered 0 to 15.  You can
refer to different sized groups of registers by register number, with
the prefix `r' for 16 bit registers, `rr' for 32 bit registers and `rq'
for 64 bit registers.  You can also refer to the contents of the first
eight (of the sixteen 16 bit registers) by bytes.  They are named `rNh'
and `rNl'.

_byte registers_
     r0l r0h r1h r1l r2h r2l r3h r3l
     r4h r4l r5h r5l r6h r6l r7h r7l
     
_word registers_
     r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
     
_long word registers_
     rr0 rr2 rr4 rr6 rr8 rr10 rr12 rr14
     
_quad word registers_
     rq0 rq4 rq8 rq12


File: as.info,  Node: Z8000-Addressing,  Prev: Z8000-Regs,  Up: Z8000 Syntax

Addressing Modes
................

   as understands the following addressing modes for the Z8000:

`rN'
     Register direct

`@@rN'
     Indirect register

`ADDR'
     Direct: the 16 bit or 24 bit address (depending on whether the
     assembler is in segmented or unsegmented mode) of the operand is
     in the instruction.

`address(rN)'
     Indexed: the 16 or 24 bit address is added to the 16 bit register
     to produce the final address in memory of the operand.

`rN(#IMM)'
     Base Address: the 16 or 24 bit register is added to the 16 bit sign
     extended immediate displacement to produce the final address in
     memory of the operand.

`rN(rM)'
     Base Index: the 16 or 24 bit register rN is added to the sign
     extended 16 bit index register rM to produce the final address in
     memory of the operand.

`#XX'
     Immediate data XX.


File: as.info,  Node: Z8000 Directives,  Next: Z8000 Opcodes,  Prev: Z8000 Syntax,  Up: Z8000-Dependent

Assembler Directives for the Z8000
----------------------------------

   The Z8000 port of as includes these additional assembler directives,
for compatibility with other Z8000 assemblers.  As shown, these do not
begin with `.' (unlike the ordinary as directives).

`segm'
     Generates code for the segmented Z8001.

`unsegm'
     Generates code for the unsegmented Z8002.

`name'
     Synonym for `.file'

`global'
     Synonym for `.global'

`wval'
     Synonym for `.word'

`lval'
     Synonym for `.long'

`bval'
     Synonym for `.byte'

`sval'
     Assemble a string.  `sval' expects one string literal, delimited by
     single quotes.  It assembles each byte of the string into
     consecutive addresses.  You can use the escape sequence `%XX'
     (where XX represents a two-digit hexadecimal number) to represent
     the character whose ASCII value is XX.  Use this feature to
     describe single quote and other characters that may not appear in
     string literals as themselves.  For example, the C statement
     `char *a = "he said \"it's 50% off\"";' is represented in Z8000
     assembly language (shown with the assembler output in hex at the
     left) as

          68652073    sval    'he said %22it%27s 50%25 off%22%00'
          61696420
          22697427
          73203530
          25206F66
          662200

`rsect'
     synonym for `.section'

`block'
     synonym for `.space'

`even'
     special case of `.align'; aligns output to even byte boundary.


File: as.info,  Node: Z8000 Opcodes,  Prev: Z8000 Directives,  Up: Z8000-Dependent

Opcodes
-------

   For detailed information on the Z8000 machine instruction set, see
`Z8000 Technical Manual'.

   The following table summarizes the opcodes and their arguments:

                 rs   16 bit source register
                 rd   16 bit destination register
                 rbs   8 bit source register
                 rbd   8 bit destination register
                 rrs   32 bit source register
                 rrd   32 bit destination register
                 rqs   64 bit source register
                 rqd   64 bit destination register
                 addr 16/24 bit address
                 imm  immediate data
     
     adc rd,rs               clrb addr               cpsir @@rd,@@rs,rr,cc
     adcb rbd,rbs            clrb addr(rd)           cpsirb @@rd,@@rs,rr,cc
     add rd,@@rs              clrb rbd                dab rbd
     add rd,addr             com @@rd                 dbjnz rbd,disp7
     add rd,addr(rs)         com addr                dec @@rd,imm4m1
     add rd,imm16            com addr(rd)            dec addr(rd),imm4m1
     add rd,rs               com rd                  dec addr,imm4m1
     addb rbd,@@rs            comb @@rd                dec rd,imm4m1
     addb rbd,addr           comb addr               decb @@rd,imm4m1
     addb rbd,addr(rs)       comb addr(rd)           decb addr(rd),imm4m1
     addb rbd,imm8           comb rbd                decb addr,imm4m1
     addb rbd,rbs            comflg flags            decb rbd,imm4m1
     addl rrd,@@rs            cp @@rd,imm16            di i2
     addl rrd,addr           cp addr(rd),imm16       div rrd,@@rs
     addl rrd,addr(rs)       cp addr,imm16           div rrd,addr
     addl rrd,imm32          cp rd,@@rs               div rrd,addr(rs)
     addl rrd,rrs            cp rd,addr              div rrd,imm16
     and rd,@@rs              cp rd,addr(rs)          div rrd,rs
     and rd,addr             cp rd,imm16             divl rqd,@@rs
     and rd,addr(rs)         cp rd,rs                divl rqd,addr
     and rd,imm16            cpb @@rd,imm8            divl rqd,addr(rs)
     and rd,rs               cpb addr(rd),imm8       divl rqd,imm32
     andb rbd,@@rs            cpb addr,imm8           divl rqd,rrs
     andb rbd,addr           cpb rbd,@@rs             djnz rd,disp7
     andb rbd,addr(rs)       cpb rbd,addr            ei i2
     andb rbd,imm8           cpb rbd,addr(rs)        ex rd,@@rs
     andb rbd,rbs            cpb rbd,imm8            ex rd,addr
     bit @@rd,imm4            cpb rbd,rbs             ex rd,addr(rs)
     bit addr(rd),imm4       cpd rd,@@rs,rr,cc        ex rd,rs
     bit addr,imm4           cpdb rbd,@@rs,rr,cc      exb rbd,@@rs
     bit rd,imm4             cpdr rd,@@rs,rr,cc       exb rbd,addr
     bit rd,rs               cpdrb rbd,@@rs,rr,cc     exb rbd,addr(rs)
     bitb @@rd,imm4           cpi rd,@@rs,rr,cc        exb rbd,rbs
     bitb addr(rd),imm4      cpib rbd,@@rs,rr,cc      ext0e imm8
     bitb addr,imm4          cpir rd,@@rs,rr,cc       ext0f imm8
     bitb rbd,imm4           cpirb rbd,@@rs,rr,cc     ext8e imm8
     bitb rbd,rs             cpl rrd,@@rs             ext8f imm8
     bpt                     cpl rrd,addr            exts rrd
     call @@rd                cpl rrd,addr(rs)        extsb rd
     call addr               cpl rrd,imm32           extsl rqd
     call addr(rd)           cpl rrd,rrs             halt
     calr disp12             cpsd @@rd,@@rs,rr,cc      in rd,@@rs
     clr @@rd                 cpsdb @@rd,@@rs,rr,cc     in rd,imm16
     clr addr                cpsdr @@rd,@@rs,rr,cc     inb rbd,@@rs
     clr addr(rd)            cpsdrb @@rd,@@rs,rr,cc    inb rbd,imm16
     clr rd                  cpsi @@rd,@@rs,rr,cc      inc @@rd,imm4m1
     clrb @@rd                cpsib @@rd,@@rs,rr,cc     inc addr(rd),imm4m1
     inc addr,imm4m1         ldb rbd,rs(rx)          mult rrd,addr(rs)
     inc rd,imm4m1           ldb rd(imm16),rbs       mult rrd,imm16
     incb @@rd,imm4m1         ldb rd(rx),rbs          mult rrd,rs
     incb addr(rd),imm4m1    ldctl ctrl,rs           multl rqd,@@rs
     incb addr,imm4m1        ldctl rd,ctrl           multl rqd,addr
     incb rbd,imm4m1         ldd @@rs,@@rd,rr          multl rqd,addr(rs)
     ind @@rd,@@rs,ra          lddb @@rs,@@rd,rr         multl rqd,imm32
     indb @@rd,@@rs,rba        lddr @@rs,@@rd,rr         multl rqd,rrs
     inib @@rd,@@rs,ra         lddrb @@rs,@@rd,rr        neg @@rd
     inibr @@rd,@@rs,ra        ldi @@rd,@@rs,rr          neg addr
     iret                    ldib @@rd,@@rs,rr         neg addr(rd)
     jp cc,@@rd               ldir @@rd,@@rs,rr         neg rd
     jp cc,addr              ldirb @@rd,@@rs,rr        negb @@rd
     jp cc,addr(rd)          ldk rd,imm4             negb addr
     jr cc,disp8             ldl @@rd,rrs             negb addr(rd)
     ld @@rd,imm16            ldl addr(rd),rrs        negb rbd
     ld @@rd,rs               ldl addr,rrs            nop
     ld addr(rd),imm16       ldl rd(imm16),rrs       or rd,@@rs
     ld addr(rd),rs          ldl rd(rx),rrs          or rd,addr
     ld addr,imm16           ldl rrd,@@rs             or rd,addr(rs)
     ld addr,rs              ldl rrd,addr            or rd,imm16
     ld rd(imm16),rs         ldl rrd,addr(rs)        or rd,rs
     ld rd(rx),rs            ldl rrd,imm32           orb rbd,@@rs
     ld rd,@@rs               ldl rrd,rrs             orb rbd,addr
     ld rd,addr              ldl rrd,rs(imm16)       orb rbd,addr(rs)
     ld rd,addr(rs)          ldl rrd,rs(rx)          orb rbd,imm8
     ld rd,imm16             ldm @@rd,rs,n            orb rbd,rbs
     ld rd,rs                ldm addr(rd),rs,n       out @@rd,rs
     ld rd,rs(imm16)         ldm addr,rs,n           out imm16,rs
     ld rd,rs(rx)            ldm rd,@@rs,n            outb @@rd,rbs
     lda rd,addr             ldm rd,addr(rs),n       outb imm16,rbs
     lda rd,addr(rs)         ldm rd,addr,n           outd @@rd,@@rs,ra
     lda rd,rs(imm16)        ldps @@rs                outdb @@rd,@@rs,rba
     lda rd,rs(rx)           ldps addr               outib @@rd,@@rs,ra
     ldar rd,disp16          ldps addr(rs)           outibr @@rd,@@rs,ra
     ldb @@rd,imm8            ldr disp16,rs           pop @@rd,@@rs
     ldb @@rd,rbs             ldr rd,disp16           pop addr(rd),@@rs
     ldb addr(rd),imm8       ldrb disp16,rbs         pop addr,@@rs
     ldb addr(rd),rbs        ldrb rbd,disp16         pop rd,@@rs
     ldb addr,imm8           ldrl disp16,rrs         popl @@rd,@@rs
     ldb addr,rbs            ldrl rrd,disp16         popl addr(rd),@@rs
     ldb rbd,@@rs             mbit                    popl addr,@@rs
     ldb rbd,addr            mreq rd                 popl rrd,@@rs
     ldb rbd,addr(rs)        mres                    push @@rd,@@rs
     ldb rbd,imm8            mset                    push @@rd,addr
     ldb rbd,rbs             mult rrd,@@rs            push @@rd,addr(rs)
     ldb rbd,rs(imm16)       mult rrd,addr           push @@rd,imm16
     push @@rd,rs             set addr,imm4           subl rrd,imm32
     pushl @@rd,@@rs           set rd,imm4             subl rrd,rrs
     pushl @@rd,addr          set rd,rs               tcc cc,rd
     pushl @@rd,addr(rs)      setb @@rd,imm4           tccb cc,rbd
     pushl @@rd,rrs           setb addr(rd),imm4      test @@rd
     res @@rd,imm4            setb addr,imm4          test addr
     res addr(rd),imm4       setb rbd,imm4           test addr(rd)
     res addr,imm4           setb rbd,rs             test rd
     res rd,imm4             setflg imm4             testb @@rd
     res rd,rs               sinb rbd,imm16          testb addr
     resb @@rd,imm4           sinb rd,imm16           testb addr(rd)
     resb addr(rd),imm4      sind @@rd,@@rs,ra         testb rbd
     resb addr,imm4          sindb @@rd,@@rs,rba       testl @@rd
     resb rbd,imm4           sinib @@rd,@@rs,ra        testl addr
     resb rbd,rs             sinibr @@rd,@@rs,ra       testl addr(rd)
     resflg imm4             sla rd,imm8             testl rrd
     ret cc                  slab rbd,imm8           trdb @@rd,@@rs,rba
     rl rd,imm1or2           slal rrd,imm8           trdrb @@rd,@@rs,rba
     rlb rbd,imm1or2         sll rd,imm8             trib @@rd,@@rs,rbr
     rlc rd,imm1or2          sllb rbd,imm8           trirb @@rd,@@rs,rbr
     rlcb rbd,imm1or2        slll rrd,imm8           trtdrb @@ra,@@rb,rbr
     rldb rbb,rba            sout imm16,rs           trtib @@ra,@@rb,rr
     rr rd,imm1or2           soutb imm16,rbs         trtirb @@ra,@@rb,rbr
     rrb rbd,imm1or2         soutd @@rd,@@rs,ra        trtrb @@ra,@@rb,rbr
     rrc rd,imm1or2          soutdb @@rd,@@rs,rba      tset @@rd
     rrcb rbd,imm1or2        soutib @@rd,@@rs,ra       tset addr
     rrdb rbb,rba            soutibr @@rd,@@rs,ra      tset addr(rd)
     rsvd36                  sra rd,imm8             tset rd
     rsvd38                  srab rbd,imm8           tsetb @@rd
     rsvd78                  sral rrd,imm8           tsetb addr
     rsvd7e                  srl rd,imm8             tsetb addr(rd)
     rsvd9d                  srlb rbd,imm8           tsetb rbd
     rsvd9f                  srll rrd,imm8           xor rd,@@rs
     rsvdb9                  sub rd,@@rs              xor rd,addr
     rsvdbf                  sub rd,addr             xor rd,addr(rs)
     sbc rd,rs               sub rd,addr(rs)         xor rd,imm16
     sbcb rbd,rbs            sub rd,imm16            xor rd,rs
     sc imm8                 sub rd,rs               xorb rbd,@@rs
     sda rd,rs               subb rbd,@@rs            xorb rbd,addr
     sdab rbd,rs             subb rbd,addr           xorb rbd,addr(rs)
     sdal rrd,rs             subb rbd,addr(rs)       xorb rbd,imm8
     sdl rd,rs               subb rbd,imm8           xorb rbd,rbs
     sdlb rbd,rs             subb rbd,rbs            xorb rbd,rbs
     sdll rrd,rs             subl rrd,@@rs
     set @@rd,imm4            subl rrd,addr
     set addr(rd),imm4       subl rrd,addr(rs)


File: as.info,  Node: Vax-Dependent,  Prev: Z8000-Dependent,  Up: Machine Dependencies

VAX Dependent Features
======================

* Menu:

* VAX-Opts::                    VAX Command-Line Options
* VAX-float::                   VAX Floating Point
* VAX-directives::              Vax Machine Directives
* VAX-opcodes::                 VAX Opcodes
* VAX-branch::                  VAX Branch Improvement
* VAX-operands::                VAX Operands
* VAX-no::                      Not Supported on VAX

@


1.1.8.2
log
@Commit generated files for 2.13.2.
@
text
@d1 1
a1 1
This is as.info, produced by makeinfo version 4.3 from as.texinfo.
@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 1475
This is as.info, produced by makeinfo version 4.0f from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: PDP-11-Dependent,  Next: PJ-Dependent,  Prev: SH64-Dependent,  Up: Machine Dependencies

PDP-11 Dependent Features
=========================

* Menu:

* PDP-11-Options::		Options
* PDP-11-Pseudos::		Assembler Directives
* PDP-11-Syntax::		DEC Syntax versus BSD Syntax
* PDP-11-Mnemonics::		Instruction Naming
* PDP-11-Synthetic::		Synthetic Instructions


File: as.info,  Node: PDP-11-Options,  Next: PDP-11-Pseudos,  Up: PDP-11-Dependent

Options
-------

   The PDP-11 version of `as' has a rich set of machine dependent
options.

Code Generation Options
.......................

`-mpic | -mno-pic'
     Generate position-independent (or position-dependent) code.

     The default is to generate position-independent code.

Instruction Set Extention Options
.................................

   These options enables or disables the use of extensions over the base
line instruction set as introduced by the first PDP-11 CPU: the KA11.
Most options come in two variants: a `-m'EXTENSION that enables
EXTENSION, and a `-mno-'EXTENSION that disables EXTENSION.

   The default is to enable all extensions.

`-mall | -mall-extensions'
     Enable all instruction set extensions.

`-mno-extensions'
     Disable all instruction set extensions.

`-mcis | -mno-cis'
     Enable (or disable) the use of the commersial instruction set,
     which consists of these instructions: `ADDNI', `ADDN', `ADDPI',
     `ADDP', `ASHNI', `ASHN', `ASHPI', `ASHP', `CMPCI', `CMPC',
     `CMPNI', `CMPN', `CMPPI', `CMPP', `CVTLNI', `CVTLN', `CVTLPI',
     `CVTLP', `CVTNLI', `CVTNL', `CVTNPI', `CVTNP', `CVTPLI', `CVTPL',
     `CVTPNI', `CVTPN', `DIVPI', `DIVP', `L2DR', `L3DR', `LOCCI',
     `LOCC', `MATCI', `MATC', `MOVCI', `MOVC', `MOVRCI', `MOVRC',
     `MOVTCI', `MOVTC', `MULPI', `MULP', `SCANCI', `SCANC', `SKPCI',
     `SKPC', `SPANCI', `SPANC', `SUBNI', `SUBN', `SUBPI', and `SUBP'.

`-mcsm | -mno-csm'
     Enable (or disable) the use of the `CSM' instruction.

`-meis | -mno-eis'
     Enable (or disable) the use of the extended instruction set, which
     consists of these instructions: `ASHC', `ASH', `DIV', `MARK',
     `MUL', `RTT', `SOB' `SXT', and `XOR'.

`-mfis | -mkev11'
`-mno-fis | -mno-kev11'
     Enable (or diasble) the use of the KEV11 floating-point
     instructions: `FADD', `FDIV', `FMUL', and `FSUB'.

`-mfpp | -mfpu | -mfp-11'
`-mno-fpp | -mno-fpu | -mno-fp-11'
     Enable (or disable) the use of FP-11 floating-point instructions:
     `ABSF', `ADDF', `CFCC', `CLRF', `CMPF', `DIVF', `LDCFF', `LDCIF',
     `LDEXP', `LDF', `LDFPS', `MODF', `MULF', `NEGF', `SETD', `SETF',
     `SETI', `SETL', `STCFF', `STCFI', `STEXP', `STF', `STFPS', `STST',
     `SUBF', and `TSTF'.

`-mlimited-eis | -mno-limited-eis'
     Enable (or disable) the use of the limited extended instruction
     set: `MARK', `RTT', `SOB', `SXT', and `XOR'.

     The -mno-limited-eis options also implies -mno-eis.

`-mmfpt | -mno-mfpt'
     Enable (or disable) the use of the `MFPT' instruction.

`-mmultiproc | -mno-multiproc'
     Enable (or disable) the use of multiprocessor instructions:
     `TSTSET' and `WRTLCK'.

`-mmxps | -mno-mxps'
     Enable (or disable) the use of the `MFPS' and `MTPS' instructions.

`-mspl | -mno-spl'
     Enable (or disable) the use of the `SPL' instruction.

     Enable (or disable) the use of the microcode instructions: `LDUB',
     `MED', and `XFC'.

CPU Model Options
.................

   These options enable the instruction set extensions supported by a
particular CPU, and disables all other extensions.

`-mka11'
     KA11 CPU.  Base line instruction set only.

`-mkb11'
     KB11 CPU.  Enable extended instruction set and `SPL'.

`-mkd11a'
     KD11-A CPU.  Enable limited extended instruction set.

`-mkd11b'
     KD11-B CPU.  Base line instruction set only.

`-mkd11d'
     KD11-D CPU.  Base line instruction set only.

`-mkd11e'
     KD11-E CPU.  Enable extended instruction set, `MFPS', and `MTPS'.

`-mkd11f | -mkd11h | -mkd11q'
     KD11-F, KD11-H, or KD11-Q CPU.  Enable limited extended
     instruction set, `MFPS', and `MTPS'.

`-mkd11k'
     KD11-K CPU.  Enable extended instruction set, `LDUB', `MED',
     `MFPS', `MFPT', `MTPS', and `XFC'.

`-mkd11z'
     KD11-Z CPU.  Enable extended instruction set, `CSM', `MFPS',
     `MFPT', `MTPS', and `SPL'.

`-mf11'
     F11 CPU.  Enable extended instruction set, `MFPS', `MFPT', and
     `MTPS'.

`-mj11'
     J11 CPU.  Enable extended instruction set, `CSM', `MFPS', `MFPT',
     `MTPS', `SPL', `TSTSET', and `WRTLCK'.

`-mt11'
     T11 CPU.  Enable limited extended instruction set, `MFPS', and
     `MTPS'.

Machine Model Options
.....................

   These options enable the instruction set extensions supported by a
particular machine model, and disables all other extensions.

`-m11/03'
     Same as `-mkd11f'.

`-m11/04'
     Same as `-mkd11d'.

`-m11/05 | -m11/10'
     Same as `-mkd11b'.

`-m11/15 | -m11/20'
     Same as `-mka11'.

`-m11/21'
     Same as `-mt11'.

`-m11/23 | -m11/24'
     Same as `-mf11'.

`-m11/34'
     Same as `-mkd11e'.

`-m11/34a'
     Ame as `-mkd11e' `-mfpp'.

`-m11/35 | -m11/40'
     Same as `-mkd11a'.

`-m11/44'
     Same as `-mkd11z'.

`-m11/45 | -m11/50 | -m11/55 | -m11/70'
     Same as `-mkb11'.

`-m11/53 | -m11/73 | -m11/83 | -m11/84 | -m11/93 | -m11/94'
     Same as `-mj11'.

`-m11/60'
     Same as `-mkd11k'.


File: as.info,  Node: PDP-11-Pseudos,  Next: PDP-11-Syntax,  Prev: PDP-11-Options,  Up: PDP-11-Dependent

Assembler Directives
--------------------

   The PDP-11 version of `as' has a few machine dependent assembler
directives.

`.bss'
     Switch to the `bss' section.

`.even'
     Align the location counter to an even number.


File: as.info,  Node: PDP-11-Syntax,  Next: PDP-11-Mnemonics,  Prev: PDP-11-Pseudos,  Up: PDP-11-Dependent

PDP-11 Assembly Language Syntax
-------------------------------

   `as' supports both DEC syntax and BSD syntax.  The only difference
is that in DEC syntax, a `#' character is used to denote an immediate
constants, while in BSD syntax the character for this purpose is `$'.

   eneral-purpose registers are named `r0' through `r7'.  Mnemonic
alternatives for `r6' and `r7' are `sp' and `pc', respectively.

   Floating-point registers are named `ac0' through `ac3', or
alternatively `fr0' through `fr3'.

   Comments are started with a `#' or a `/' character, and extend to
the end of the line.  (FIXME: clash with immediates?)


File: as.info,  Node: PDP-11-Mnemonics,  Next: PDP-11-Synthetic,  Prev: PDP-11-Syntax,  Up: PDP-11-Dependent

Instruction Naming
------------------

   Some instructions have alternative names.

`BCC'
     `BHIS'

`BCS'
     `BLO'

`L2DR'
     `L2D'

`L3DR'
     `L3D'

`SYS'
     `TRAP'


File: as.info,  Node: PDP-11-Synthetic,  Prev: PDP-11-Mnemonics,  Up: PDP-11-Dependent

Synthetic Instructions
----------------------

   The `JBR' and `J'CC synthetic instructions are not supported yet.


File: as.info,  Node: PJ-Dependent,  Next: PPC-Dependent,  Prev: PDP-11-Dependent,  Up: Machine Dependencies

picoJava Dependent Features
===========================

* Menu:

* PJ Options::              Options


File: as.info,  Node: PJ Options,  Up: PJ-Dependent

Options
-------

   `as' has two addiitional command-line options for the picoJava
architecture.
`-ml'
     This option selects little endian data output.

`-mb'
     This option selects big endian data output.


File: as.info,  Node: PPC-Dependent,  Next: Sparc-Dependent,  Prev: PJ-Dependent,  Up: Machine Dependencies

PowerPC Dependent Features
==========================

* Menu:

* PowerPC-Opts::                Options


File: as.info,  Node: PowerPC-Opts,  Up: PPC-Dependent

Options
-------

   The PowerPC chip family includes several successive levels, using
the same core instruction set, but including a few additional
instructions at each level.  There are exceptions to this however.  For
details on what instructions each variant supports, please see the
chip's architecture reference manual.

   The following table lists all available PowerPC options.

`-mpwrx | -mpwr2'
     Generate code for POWER/2 (RIOS2).

`-mpwr'
     Generate code for POWER (RIOS1)

`-m601'
     Generate code for PowerPC 601.

`-mppc, -mppc32, -m603, -m604'
     Generate code for PowerPC 603/604.

`-m403, -m405'
     Generate code for PowerPC 403/405.

`-m7400, -m7410, -m7450, -m7455'
     Generate code for PowerPC 7400/7410/7450/7455.

`-mppc64, -m620'
     Generate code for PowerPC 620/625/630.

`-mppc64bridge'
     Generate code for PowerPC 64, including bridge insns.

`-mbooke64'
     Generate code for 64-bit BookE.

`-mbooke, mbooke32'
     Generate code for 32-bit BookE.

`-maltivec'
     Generate code for processors with AltiVec instructions.

`-mpower4'
     Generate code for Power4 architecture.

`-mcom'
     Generate code Power/PowerPC common instructions.

`-many'
     Generate code for any architecture (PWR/PWRX/PPC).

`-mregnames'
     Allow symbolic names for registers.

`-mno-regnames'
     Do not allow symbolic names for registers.

`-mrelocatable'
     Support for GCC's -mrelocatble option.

`-mrelocatable-lib'
     Support for GCC's -mrelocatble-lib option.

`-memb'
     Set PPC_EMB bit in ELF flags.

`-mlittle, -mlittle-endian'
     Generate code for a little endian machine.

`-mbig, -mbig-endian'
     Generate code for a big endian machine.

`-msolaris'
     Generate code for Solaris.

`-mno-solaris'
     Do not generate code for Solaris.


File: as.info,  Node: SH-Dependent,  Next: SH64-Dependent,  Prev: MMIX-Dependent,  Up: Machine Dependencies

Hitachi SH Dependent Features
=============================

* Menu:

* SH Options::              Options
* SH Syntax::               Syntax
* SH Floating Point::       Floating Point
* SH Directives::           SH Machine Directives
* SH Opcodes::              Opcodes


File: as.info,  Node: SH Options,  Next: SH Syntax,  Up: SH-Dependent

Options
-------

   `as' has following command-line options for the Hitachi SH family.

`-little'
     Generate little endian code.

`-big'
     Generate big endian code.

`-relax'
     Alter jump instructions for long displacements.

`-small'
     Align sections to 4 byte boundaries, not 16.

`-dsp'
     Enable sh-dsp insns, and disable sh3e / sh4 insns.


File: as.info,  Node: SH Syntax,  Next: SH Floating Point,  Prev: SH Options,  Up: SH-Dependent

Syntax
------

* Menu:

* SH-Chars::                Special Characters
* SH-Regs::                 Register Names
* SH-Addressing::           Addressing Modes


File: as.info,  Node: SH-Chars,  Next: SH-Regs,  Up: SH Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH-Regs,  Next: SH-Addressing,  Prev: SH-Chars,  Up: SH Syntax

Register Names
..............

   You can use the predefined symbols `r0', `r1', `r2', `r3', `r4',
`r5', `r6', `r7', `r8', `r9', `r10', `r11', `r12', `r13', `r14', and
`r15' to refer to the SH registers.

   The SH also has these control registers:

`pr'
     procedure register (holds return address)

`pc'
     program counter

`mach'
`macl'
     high and low multiply accumulator registers

`sr'
     status register

`gbr'
     global base register

`vbr'
     vector base register (for interrupt vectors)


File: as.info,  Node: SH-Addressing,  Prev: SH-Regs,  Up: SH Syntax

Addressing Modes
................

   `as' understands the following addressing modes for the SH.  `RN' in
the following refers to any of the numbered registers, but _not_ the
control registers.

`RN'
     Register direct

`@@RN'
     Register indirect

`@@-RN'
     Register indirect with pre-decrement

`@@RN+'
     Register indirect with post-increment

`@@(DISP, RN)'
     Register indirect with displacement

`@@(R0, RN)'
     Register indexed

`@@(DISP, GBR)'
     `GBR' offset

`@@(R0, GBR)'
     GBR indexed

`ADDR'
`@@(DISP, PC)'
     PC relative address (for branch or for addressing memory).  The
     `as' implementation allows you to use the simpler form ADDR
     anywhere a PC relative address is called for; the alternate form
     is supported for compatibility with other assemblers.

`#IMM'
     Immediate data


File: as.info,  Node: SH Floating Point,  Next: SH Directives,  Prev: SH Syntax,  Up: SH-Dependent

Floating Point
--------------

   The SH family has no hardware floating point, but the `.float'
directive generates IEEE floating-point numbers for compatibility with
other development tools.


File: as.info,  Node: SH Directives,  Next: SH Opcodes,  Prev: SH Floating Point,  Up: SH-Dependent

SH Machine Directives
---------------------

`uaword'
`ualong'
     `as' will issue a warning when a misaligned `.word' or `.long'
     directive is used.  You may use `.uaword' or `.ualong' to indicate
     that the value is intentionally misaligned.


File: as.info,  Node: SH Opcodes,  Prev: SH Directives,  Up: SH-Dependent

Opcodes
-------

   For detailed information on the SH machine instruction set, see
`SH-Microcomputer User's Manual' (Hitachi Micro Systems, Inc.).

   `as' implements all the standard SH opcodes.  No additional
pseudo-instructions are needed on this family.  Note, however, that
because `as' supports a simpler form of PC-relative addressing, you may
simply write (for example)

     mov.l  bar,r0

where other assemblers might require an explicit displacement to `bar'
from the program counter:

     mov.l  @@(DISP, PC)

   Here is a summary of SH opcodes:

     Legend:
     Rn        a numbered register
     Rm        another numbered register
     #imm      immediate data
     disp      displacement
     disp8     8-bit displacement
     disp12    12-bit displacement
     
     add #imm,Rn                    lds.l @@Rn+,PR
     add Rm,Rn                      mac.w @@Rm+,@@Rn+
     addc Rm,Rn                     mov #imm,Rn
     addv Rm,Rn                     mov Rm,Rn
     and #imm,R0                    mov.b Rm,@@(R0,Rn)
     and Rm,Rn                      mov.b Rm,@@-Rn
     and.b #imm,@@(R0,GBR)           mov.b Rm,@@Rn
     bf disp8                       mov.b @@(disp,Rm),R0
     bra disp12                     mov.b @@(disp,GBR),R0
     bsr disp12                     mov.b @@(R0,Rm),Rn
     bt disp8                       mov.b @@Rm+,Rn
     clrmac                         mov.b @@Rm,Rn
     clrt                           mov.b R0,@@(disp,Rm)
     cmp/eq #imm,R0                 mov.b R0,@@(disp,GBR)
     cmp/eq Rm,Rn                   mov.l Rm,@@(disp,Rn)
     cmp/ge Rm,Rn                   mov.l Rm,@@(R0,Rn)
     cmp/gt Rm,Rn                   mov.l Rm,@@-Rn
     cmp/hi Rm,Rn                   mov.l Rm,@@Rn
     cmp/hs Rm,Rn                   mov.l @@(disp,Rn),Rm
     cmp/pl Rn                      mov.l @@(disp,GBR),R0
     cmp/pz Rn                      mov.l @@(disp,PC),Rn
     cmp/str Rm,Rn                  mov.l @@(R0,Rm),Rn
     div0s Rm,Rn                    mov.l @@Rm+,Rn
     div0u                          mov.l @@Rm,Rn
     div1 Rm,Rn                     mov.l R0,@@(disp,GBR)
     exts.b Rm,Rn                   mov.w Rm,@@(R0,Rn)
     exts.w Rm,Rn                   mov.w Rm,@@-Rn
     extu.b Rm,Rn                   mov.w Rm,@@Rn
     extu.w Rm,Rn                   mov.w @@(disp,Rm),R0
     jmp @@Rn                        mov.w @@(disp,GBR),R0
     jsr @@Rn                        mov.w @@(disp,PC),Rn
     ldc Rn,GBR                     mov.w @@(R0,Rm),Rn
     ldc Rn,SR                      mov.w @@Rm+,Rn
     ldc Rn,VBR                     mov.w @@Rm,Rn
     ldc.l @@Rn+,GBR                 mov.w R0,@@(disp,Rm)
     ldc.l @@Rn+,SR                  mov.w R0,@@(disp,GBR)
     ldc.l @@Rn+,VBR                 mova @@(disp,PC),R0
     lds Rn,MACH                    movt Rn
     lds Rn,MACL                    muls Rm,Rn
     lds Rn,PR                      mulu Rm,Rn
     lds.l @@Rn+,MACH                neg Rm,Rn
     lds.l @@Rn+,MACL                negc Rm,Rn
     
     nop                            stc VBR,Rn
     not Rm,Rn                      stc.l GBR,@@-Rn
     or #imm,R0                     stc.l SR,@@-Rn
     or Rm,Rn                       stc.l VBR,@@-Rn
     or.b #imm,@@(R0,GBR)            sts MACH,Rn
     rotcl Rn                       sts MACL,Rn
     rotcr Rn                       sts PR,Rn
     rotl Rn                        sts.l MACH,@@-Rn
     rotr Rn                        sts.l MACL,@@-Rn
     rte                            sts.l PR,@@-Rn
     rts                            sub Rm,Rn
     sett                           subc Rm,Rn
     shal Rn                        subv Rm,Rn
     shar Rn                        swap.b Rm,Rn
     shll Rn                        swap.w Rm,Rn
     shll16 Rn                      tas.b @@Rn
     shll2 Rn                       trapa #imm
     shll8 Rn                       tst #imm,R0
     shlr Rn                        tst Rm,Rn
     shlr16 Rn                      tst.b #imm,@@(R0,GBR)
     shlr2 Rn                       xor #imm,R0
     shlr8 Rn                       xor Rm,Rn
     sleep                          xor.b #imm,@@(R0,GBR)
     stc GBR,Rn                     xtrct Rm,Rn
     stc SR,Rn


File: as.info,  Node: SH64-Dependent,  Next: PDP-11-Dependent,  Prev: SH-Dependent,  Up: Machine Dependencies

Hitachi SH64 Dependent Features
===============================

* Menu:

* SH64 Options::              Options
* SH64 Syntax::               Syntax
* SH64 Directives::           SH64 Machine Directives
* SH64 Opcodes::              Opcodes


File: as.info,  Node: SH64 Options,  Next: SH64 Syntax,  Up: SH64-Dependent

Options
-------

`-isa=shmedia | -isa=shcompact'
     Specify the default instruction set.  `SHmedia' specifies the
     32-bit opcodes, and `SHcompact' specifies the 16-bit opcodes
     compatible with previous SH families.  The default depends on the
     ABI selected; the default for the 64-bit ABI is SHmedia, and the
     default for the 32-bit ABI is SHcompact.  If neither the ABI nor
     the ISA is specified, the default is 32-bit SHcompact.

     Note that the `.mode' pseudo-op is not permitted if the ISA is not
     specified on the command line.

`-abi=32 | -abi=64'
     Specify the default ABI.  If the ISA is specified and the ABI is
     not, the default ABI depends on the ISA, with SHmedia defaulting
     to 64-bit and SHcompact defaulting to 32-bit.

     Note that the `.abi' pseudo-op is not permitted if the ABI is not
     specified on the command line.  When the ABI is specified on the
     command line, any `.abi' pseudo-ops in the source must match it.

`-shcompact-const-crange'
     Emit code-range descriptors for constants in SHcompact code
     sections.

`-no-mix'
     Disallow SHmedia code in the same section as constants and
     SHcompact code.

`-no-expand'
     Do not expand MOVI, PT, PTA or PTB instructions.

`-expand-pt32'
     With -abi=64, expand PT, PTA and PTB instructions to 32 bits only.


File: as.info,  Node: SH64 Syntax,  Next: SH64 Directives,  Prev: SH64 Options,  Up: SH64-Dependent

Syntax
------

* Menu:

* SH64-Chars::                Special Characters
* SH64-Regs::                 Register Names
* SH64-Addressing::           Addressing Modes


File: as.info,  Node: SH64-Chars,  Next: SH64-Regs,  Up: SH64 Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.

   Since `$' has no special meaning, you may use it in symbol names.


File: as.info,  Node: SH64-Regs,  Next: SH64-Addressing,  Prev: SH64-Chars,  Up: SH64 Syntax

Register Names
..............

   You can use the predefined symbols `r0' through `r63' to refer to
the SH64 general registers, `cr0' through `cr63' for control registers,
`tr0' through `tr7' for target address registers, `fr0' through `fr63'
for single-precision floating point registers, `dr0' through `dr62'
(even numbered registers only) for double-precision floating point
registers, `fv0' through `fv60' (multiples of four only) for
single-precision floating point vectors, `fp0' through `fp62' (even
numbered registers only) for single-precision floating point pairs,
`mtrx0' through `mtrx48' (multiples of 16 only) for 4x4 matrices of
single-precision floating point registers, `pc' for the program
counter, and `fpscr' for the floating point status and control register.

   You can also refer to the control registers by the mnemonics `sr',
`ssr', `pssr', `intevt', `expevt', `pexpevt', `tra', `spc', `pspc',
`resvec', `vbr', `tea', `dcr', `kcr0', `kcr1', `ctc', and `usr'.


File: as.info,  Node: SH64-Addressing,  Prev: SH64-Regs,  Up: SH64 Syntax

Addressing Modes
................

   SH64 operands consist of either a register or immediate value.  The
immediate value can be a constant or label reference (or portion of a
label reference), as in this example:

     	movi	4,r2
     	pt	function, tr4
     	movi	(function >> 16) & 65535,r0
     	shori	function & 65535, r0
     	ld.l	r0,4,r0

   Instruction label references can reference labels in either SHmedia
or SHcompact.  To differentiate between the two, labels in SHmedia
sections will always have the least significant bit set (i.e. they will
be odd), which SHcompact labels will have the least significant bit
reset (i.e. they will be even).  If you need to reference the actual
address of a label, you can use the `datalabel' modifier, as in this
example:

     	.long	function
     	.long	datalabel function

   In that example, the first longword may or may not have the least
significant bit set depending on whether the label is an SHmedia label
or an SHcompact label.  The second longword will be the actual address
of the label, regardless of what type of lable it is.


File: as.info,  Node: SH64 Directives,  Next: SH64 Opcodes,  Prev: SH64 Syntax,  Up: SH64-Dependent

SH64 Machine Directives
-----------------------

   In addition to the SH directives, the SH64 provides the following
directives:

`.mode [shmedia|shcompact]'
`.isa [shmedia|shcompact]'
     Specify the ISA for the following instructions (the two directives
     are equivalent).  Note that programs such as `objdump' rely on
     symbolic labels to determine when such mode switches occur (by
     checking the least significant bit of the label's address), so
     such mode/isa changes should always be followed by a label (in
     practice, this is true anyway).  Note that you cannot use these
     directives if you didn't specify an ISA on the command line.

`.abi [32|64]'
     Specify the ABI for the following instructions.  Note that you
     cannot use this directive unless you specified an ABI on the
     command line, and the ABIs specified must match.

`.uaquad'
     Like .uaword and .ualong, this allows you to specify an
     intenionally unaligned quadword (64 bit word).


File: as.info,  Node: SH64 Opcodes,  Prev: SH64 Directives,  Up: SH64-Dependent

Opcodes
-------

   For detailed information on the SH64 machine instruction set, see
`SuperH 64 bit RISC Series Architecture Manual' (SuperH, Inc.).

   `as' implements all the standard SH64 opcodes.  In addition, the
following pseudo-opcodes may be expanded into one or more alternate
opcodes:

`movi'
     If the value doesn't fit into a standard `movi' opcode, `as' will
     replace the `movi' with a sequence of `movi' and `shori' opcodes.

`pt'
     This expands to a sequence of `movi' and `shori' opcode, followed
     by a `ptrel' opcode, or to a `pta' or `ptb' opcode, depending on
     the label referenced.


File: as.info,  Node: Sparc-Dependent,  Next: V850-Dependent,  Prev: PPC-Dependent,  Up: Machine Dependencies

SPARC Dependent Features
========================

* Menu:

* Sparc-Opts::                  Options
* Sparc-Aligned-Data::		Option to enforce aligned data
* Sparc-Float::                 Floating Point
* Sparc-Directives::            Sparc Machine Directives


File: as.info,  Node: Sparc-Opts,  Next: Sparc-Aligned-Data,  Up: Sparc-Dependent

Options
-------

   The SPARC chip family includes several successive levels, using the
same core instruction set, but including a few additional instructions
at each level.  There are exceptions to this however.  For details on
what instructions each variant supports, please see the chip's
architecture reference manual.

   By default, `as' assumes the core instruction set (SPARC v6), but
"bumps" the architecture level as needed: it switches to successively
higher architectures as it encounters instructions that only exist in
the higher levels.

   If not configured for SPARC v9 (`sparc64-*-*') GAS will not bump
passed sparclite by default, an option must be passed to enable the v9
instructions.

   GAS treats sparclite as being compatible with v8, unless an
architecture is explicitly requested.  SPARC v9 is always incompatible
with sparclite.

`-Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite'
`-Av8plus | -Av8plusa | -Av9 | -Av9a'
     Use one of the `-A' options to select one of the SPARC
     architectures explicitly.  If you select an architecture
     explicitly, `as' reports a fatal error if it encounters an
     instruction or feature requiring an incompatible or higher level.

     `-Av8plus' and `-Av8plusa' select a 32 bit environment.

     `-Av9' and `-Av9a' select a 64 bit environment and are not
     available unless GAS is explicitly configured with 64 bit
     environment support.

     `-Av8plusa' and `-Av9a' enable the SPARC V9 instruction set with
     UltraSPARC extensions.

`-xarch=v8plus | -xarch=v8plusa'
     For compatibility with the Solaris v9 assembler.  These options are
     equivalent to -Av8plus and -Av8plusa, respectively.

`-bump'
     Warn whenever it is necessary to switch to another level.  If an
     architecture level is explicitly requested, GAS will not issue
     warnings until that level is reached, and will then bump the level
     as required (except between incompatible levels).

`-32 | -64'
     Select the word size, either 32 bits or 64 bits.  These options
     are only available with the ELF object file format, and require
     that the necessary BFD support has been included.


File: as.info,  Node: Sparc-Aligned-Data,  Next: Sparc-Float,  Prev: Sparc-Opts,  Up: Sparc-Dependent

Enforcing aligned data
----------------------

   SPARC GAS normally permits data to be misaligned.  For example, it
permits the `.long' pseudo-op to be used on a byte boundary.  However,
the native SunOS and Solaris assemblers issue an error when they see
misaligned data.

   You can use the `--enforce-aligned-data' option to make SPARC GAS
also issue an error about misaligned data, just as the SunOS and Solaris
assemblers do.

   The `--enforce-aligned-data' option is not the default because gcc
issues misaligned data pseudo-ops when it initializes certain packed
data structures (structures defined using the `packed' attribute).  You
may have to assemble with GAS in order to initialize packed data
structures in your own code.


File: as.info,  Node: Sparc-Float,  Next: Sparc-Directives,  Prev: Sparc-Aligned-Data,  Up: Sparc-Dependent

Floating Point
--------------

   The Sparc uses IEEE floating-point numbers.


File: as.info,  Node: Sparc-Directives,  Prev: Sparc-Float,  Up: Sparc-Dependent

Sparc Machine Directives
------------------------

   The Sparc version of `as' supports the following additional machine
directives:

`.align'
     This must be followed by the desired alignment in bytes.

`.common'
     This must be followed by a symbol name, a positive number, and
     `"bss"'.  This behaves somewhat like `.comm', but the syntax is
     different.

`.half'
     This is functionally identical to `.short'.

`.nword'
     On the Sparc, the `.nword' directive produces native word sized
     value, ie. if assembling with -32 it is equivalent to `.word', if
     assembling with -64 it is equivalent to `.xword'.

`.proc'
     This directive is ignored.  Any text following it on the same line
     is also ignored.

`.register'
     This directive declares use of a global application or system
     register.  It must be followed by a register name %g2, %g3, %g6 or
     %g7, comma and the symbol name for that register.  If symbol name
     is `#scratch', it is a scratch register, if it is `#ignore', it
     just surpresses any errors about using undeclared global register,
     but does not emit any information about it into the object file.
     This can be useful e.g. if you save the register before use and
     restore it after.

`.reserve'
     This must be followed by a symbol name, a positive number, and
     `"bss"'.  This behaves somewhat like `.lcomm', but the syntax is
     different.

`.seg'
     This must be followed by `"text"', `"data"', or `"data1"'.  It
     behaves like `.text', `.data', or `.data 1'.

`.skip'
     This is functionally identical to the `.space' directive.

`.word'
     On the Sparc, the `.word' directive produces 32 bit values,
     instead of the 16 bit values it produces on many other machines.

`.xword'
     On the Sparc V9 processor, the `.xword' directive produces 64 bit
     values.


File: as.info,  Node: Z8000-Dependent,  Next: Vax-Dependent,  Prev: V850-Dependent,  Up: Machine Dependencies

Z8000 Dependent Features
========================

   The Z8000 as supports both members of the Z8000 family: the
unsegmented Z8002, with 16 bit addresses, and the segmented Z8001 with
24 bit addresses.

   When the assembler is in unsegmented mode (specified with the
`unsegm' directive), an address takes up one word (16 bit) sized
register.  When the assembler is in segmented mode (specified with the
`segm' directive), a 24-bit address takes up a long (32 bit) register.
*Note Assembler Directives for the Z8000: Z8000 Directives, for a list
of other Z8000 specific assembler directives.

* Menu:

* Z8000 Options::               No special command-line options for Z8000
* Z8000 Syntax::                Assembler syntax for the Z8000
* Z8000 Directives::            Special directives for the Z8000
* Z8000 Opcodes::               Opcodes


File: as.info,  Node: Z8000 Options,  Next: Z8000 Syntax,  Up: Z8000-Dependent

Options
-------

   `as' has no additional command-line options for the Zilog Z8000
family.


File: as.info,  Node: Z8000 Syntax,  Next: Z8000 Directives,  Prev: Z8000 Options,  Up: Z8000-Dependent

Syntax
------

* Menu:

* Z8000-Chars::                Special Characters
* Z8000-Regs::                 Register Names
* Z8000-Addressing::           Addressing Modes


File: as.info,  Node: Z8000-Chars,  Next: Z8000-Regs,  Up: Z8000 Syntax

Special Characters
..................

   `!' is the line comment character.

   You can use `;' instead of a newline to separate statements.


File: as.info,  Node: Z8000-Regs,  Next: Z8000-Addressing,  Prev: Z8000-Chars,  Up: Z8000 Syntax

Register Names
..............

   The Z8000 has sixteen 16 bit registers, numbered 0 to 15.  You can
refer to different sized groups of registers by register number, with
the prefix `r' for 16 bit registers, `rr' for 32 bit registers and `rq'
for 64 bit registers.  You can also refer to the contents of the first
eight (of the sixteen 16 bit registers) by bytes.  They are named `rNh'
and `rNl'.

_byte registers_
     r0l r0h r1h r1l r2h r2l r3h r3l
     r4h r4l r5h r5l r6h r6l r7h r7l
     
_word registers_
     r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
     
_long word registers_
     rr0 rr2 rr4 rr6 rr8 rr10 rr12 rr14
     
_quad word registers_
     rq0 rq4 rq8 rq12


File: as.info,  Node: Z8000-Addressing,  Prev: Z8000-Regs,  Up: Z8000 Syntax

Addressing Modes
................

   as understands the following addressing modes for the Z8000:

`rN'
     Register direct

`@@rN'
     Indirect register

`ADDR'
     Direct: the 16 bit or 24 bit address (depending on whether the
     assembler is in segmented or unsegmented mode) of the operand is
     in the instruction.

`address(rN)'
     Indexed: the 16 or 24 bit address is added to the 16 bit register
     to produce the final address in memory of the operand.

`rN(#IMM)'
     Base Address: the 16 or 24 bit register is added to the 16 bit sign
     extended immediate displacement to produce the final address in
     memory of the operand.

`rN(rM)'
     Base Index: the 16 or 24 bit register rN is added to the sign
     extended 16 bit index register rM to produce the final address in
     memory of the operand.

`#XX'
     Immediate data XX.


File: as.info,  Node: Z8000 Directives,  Next: Z8000 Opcodes,  Prev: Z8000 Syntax,  Up: Z8000-Dependent

Assembler Directives for the Z8000
----------------------------------

   The Z8000 port of as includes these additional assembler directives,
for compatibility with other Z8000 assemblers.  As shown, these do not
begin with `.' (unlike the ordinary as directives).

`segm'
     Generates code for the segmented Z8001.

`unsegm'
     Generates code for the unsegmented Z8002.

`name'
     Synonym for `.file'

`global'
     Synonym for `.global'

`wval'
     Synonym for `.word'

`lval'
     Synonym for `.long'

`bval'
     Synonym for `.byte'

`sval'
     Assemble a string.  `sval' expects one string literal, delimited by
     single quotes.  It assembles each byte of the string into
     consecutive addresses.  You can use the escape sequence `%XX'
     (where XX represents a two-digit hexadecimal number) to represent
     the character whose ASCII value is XX.  Use this feature to
     describe single quote and other characters that may not appear in
     string literals as themselves.  For example, the C statement
     `char *a = "he said \"it's 50% off\"";' is represented in Z8000
     assembly language (shown with the assembler output in hex at the
     left) as

          68652073    sval    'he said %22it%27s 50%25 off%22%00'
          61696420
          22697427
          73203530
          25206F66
          662200

`rsect'
     synonym for `.section'

`block'
     synonym for `.space'

`even'
     special case of `.align'; aligns output to even byte boundary.


File: as.info,  Node: Z8000 Opcodes,  Prev: Z8000 Directives,  Up: Z8000-Dependent

Opcodes
-------

   For detailed information on the Z8000 machine instruction set, see
`Z8000 Technical Manual'.

   The following table summarizes the opcodes and their arguments:

                 rs   16 bit source register
                 rd   16 bit destination register
                 rbs   8 bit source register
                 rbd   8 bit destination register
                 rrs   32 bit source register
                 rrd   32 bit destination register
                 rqs   64 bit source register
                 rqd   64 bit destination register
                 addr 16/24 bit address
                 imm  immediate data
     
     adc rd,rs               clrb addr               cpsir @@rd,@@rs,rr,cc
     adcb rbd,rbs            clrb addr(rd)           cpsirb @@rd,@@rs,rr,cc
     add rd,@@rs              clrb rbd                dab rbd
     add rd,addr             com @@rd                 dbjnz rbd,disp7
     add rd,addr(rs)         com addr                dec @@rd,imm4m1
     add rd,imm16            com addr(rd)            dec addr(rd),imm4m1
     add rd,rs               com rd                  dec addr,imm4m1
     addb rbd,@@rs            comb @@rd                dec rd,imm4m1
     addb rbd,addr           comb addr               decb @@rd,imm4m1
     addb rbd,addr(rs)       comb addr(rd)           decb addr(rd),imm4m1
     addb rbd,imm8           comb rbd                decb addr,imm4m1
     addb rbd,rbs            comflg flags            decb rbd,imm4m1
     addl rrd,@@rs            cp @@rd,imm16            di i2
     addl rrd,addr           cp addr(rd),imm16       div rrd,@@rs
     addl rrd,addr(rs)       cp addr,imm16           div rrd,addr
     addl rrd,imm32          cp rd,@@rs               div rrd,addr(rs)
     addl rrd,rrs            cp rd,addr              div rrd,imm16
     and rd,@@rs              cp rd,addr(rs)          div rrd,rs
     and rd,addr             cp rd,imm16             divl rqd,@@rs
     and rd,addr(rs)         cp rd,rs                divl rqd,addr
     and rd,imm16            cpb @@rd,imm8            divl rqd,addr(rs)
     and rd,rs               cpb addr(rd),imm8       divl rqd,imm32
     andb rbd,@@rs            cpb addr,imm8           divl rqd,rrs
     andb rbd,addr           cpb rbd,@@rs             djnz rd,disp7
     andb rbd,addr(rs)       cpb rbd,addr            ei i2
     andb rbd,imm8           cpb rbd,addr(rs)        ex rd,@@rs
     andb rbd,rbs            cpb rbd,imm8            ex rd,addr
     bit @@rd,imm4            cpb rbd,rbs             ex rd,addr(rs)
     bit addr(rd),imm4       cpd rd,@@rs,rr,cc        ex rd,rs
     bit addr,imm4           cpdb rbd,@@rs,rr,cc      exb rbd,@@rs
     bit rd,imm4             cpdr rd,@@rs,rr,cc       exb rbd,addr
     bit rd,rs               cpdrb rbd,@@rs,rr,cc     exb rbd,addr(rs)
     bitb @@rd,imm4           cpi rd,@@rs,rr,cc        exb rbd,rbs
     bitb addr(rd),imm4      cpib rbd,@@rs,rr,cc      ext0e imm8
     bitb addr,imm4          cpir rd,@@rs,rr,cc       ext0f imm8
     bitb rbd,imm4           cpirb rbd,@@rs,rr,cc     ext8e imm8
     bitb rbd,rs             cpl rrd,@@rs             ext8f imm8
     bpt                     cpl rrd,addr            exts rrd
     call @@rd                cpl rrd,addr(rs)        extsb rd
     call addr               cpl rrd,imm32           extsl rqd
     call addr(rd)           cpl rrd,rrs             halt
     calr disp12             cpsd @@rd,@@rs,rr,cc      in rd,@@rs
     clr @@rd                 cpsdb @@rd,@@rs,rr,cc     in rd,imm16
     clr addr                cpsdr @@rd,@@rs,rr,cc     inb rbd,@@rs
     clr addr(rd)            cpsdrb @@rd,@@rs,rr,cc    inb rbd,imm16
     clr rd                  cpsi @@rd,@@rs,rr,cc      inc @@rd,imm4m1
     clrb @@rd                cpsib @@rd,@@rs,rr,cc     inc addr(rd),imm4m1
     inc addr,imm4m1         ldb rbd,rs(rx)          mult rrd,addr(rs)
     inc rd,imm4m1           ldb rd(imm16),rbs       mult rrd,imm16
     incb @@rd,imm4m1         ldb rd(rx),rbs          mult rrd,rs
     incb addr(rd),imm4m1    ldctl ctrl,rs           multl rqd,@@rs
     incb addr,imm4m1        ldctl rd,ctrl           multl rqd,addr
     incb rbd,imm4m1         ldd @@rs,@@rd,rr          multl rqd,addr(rs)
     ind @@rd,@@rs,ra          lddb @@rs,@@rd,rr         multl rqd,imm32
     indb @@rd,@@rs,rba        lddr @@rs,@@rd,rr         multl rqd,rrs
     inib @@rd,@@rs,ra         lddrb @@rs,@@rd,rr        neg @@rd
     inibr @@rd,@@rs,ra        ldi @@rd,@@rs,rr          neg addr
     iret                    ldib @@rd,@@rs,rr         neg addr(rd)
     jp cc,@@rd               ldir @@rd,@@rs,rr         neg rd
     jp cc,addr              ldirb @@rd,@@rs,rr        negb @@rd
     jp cc,addr(rd)          ldk rd,imm4             negb addr
     jr cc,disp8             ldl @@rd,rrs             negb addr(rd)
     ld @@rd,imm16            ldl addr(rd),rrs        negb rbd
     ld @@rd,rs               ldl addr,rrs            nop
     ld addr(rd),imm16       ldl rd(imm16),rrs       or rd,@@rs
     ld addr(rd),rs          ldl rd(rx),rrs          or rd,addr
     ld addr,imm16           ldl rrd,@@rs             or rd,addr(rs)
     ld addr,rs              ldl rrd,addr            or rd,imm16
     ld rd(imm16),rs         ldl rrd,addr(rs)        or rd,rs
     ld rd(rx),rs            ldl rrd,imm32           orb rbd,@@rs
     ld rd,@@rs               ldl rrd,rrs             orb rbd,addr
     ld rd,addr              ldl rrd,rs(imm16)       orb rbd,addr(rs)
     ld rd,addr(rs)          ldl rrd,rs(rx)          orb rbd,imm8
     ld rd,imm16             ldm @@rd,rs,n            orb rbd,rbs
     ld rd,rs                ldm addr(rd),rs,n       out @@rd,rs
     ld rd,rs(imm16)         ldm addr,rs,n           out imm16,rs
     ld rd,rs(rx)            ldm rd,@@rs,n            outb @@rd,rbs
     lda rd,addr             ldm rd,addr(rs),n       outb imm16,rbs
     lda rd,addr(rs)         ldm rd,addr,n           outd @@rd,@@rs,ra
     lda rd,rs(imm16)        ldps @@rs                outdb @@rd,@@rs,rba
     lda rd,rs(rx)           ldps addr               outib @@rd,@@rs,ra
     ldar rd,disp16          ldps addr(rs)           outibr @@rd,@@rs,ra
     ldb @@rd,imm8            ldr disp16,rs           pop @@rd,@@rs
     ldb @@rd,rbs             ldr rd,disp16           pop addr(rd),@@rs
     ldb addr(rd),imm8       ldrb disp16,rbs         pop addr,@@rs
     ldb addr(rd),rbs        ldrb rbd,disp16         pop rd,@@rs
     ldb addr,imm8           ldrl disp16,rrs         popl @@rd,@@rs
     ldb addr,rbs            ldrl rrd,disp16         popl addr(rd),@@rs
     ldb rbd,@@rs             mbit                    popl addr,@@rs
     ldb rbd,addr            mreq rd                 popl rrd,@@rs
     ldb rbd,addr(rs)        mres                    push @@rd,@@rs
     ldb rbd,imm8            mset                    push @@rd,addr
     ldb rbd,rbs             mult rrd,@@rs            push @@rd,addr(rs)
     ldb rbd,rs(imm16)       mult rrd,addr           push @@rd,imm16
     push @@rd,rs             set addr,imm4           subl rrd,imm32
     pushl @@rd,@@rs           set rd,imm4             subl rrd,rrs
     pushl @@rd,addr          set rd,rs               tcc cc,rd
     pushl @@rd,addr(rs)      setb @@rd,imm4           tccb cc,rbd
     pushl @@rd,rrs           setb addr(rd),imm4      test @@rd
     res @@rd,imm4            setb addr,imm4          test addr
     res addr(rd),imm4       setb rbd,imm4           test addr(rd)
     res addr,imm4           setb rbd,rs             test rd
     res rd,imm4             setflg imm4             testb @@rd
     res rd,rs               sinb rbd,imm16          testb addr
     resb @@rd,imm4           sinb rd,imm16           testb addr(rd)
     resb addr(rd),imm4      sind @@rd,@@rs,ra         testb rbd
     resb addr,imm4          sindb @@rd,@@rs,rba       testl @@rd
     resb rbd,imm4           sinib @@rd,@@rs,ra        testl addr
     resb rbd,rs             sinibr @@rd,@@rs,ra       testl addr(rd)
     resflg imm4             sla rd,imm8             testl rrd
     ret cc                  slab rbd,imm8           trdb @@rd,@@rs,rba
     rl rd,imm1or2           slal rrd,imm8           trdrb @@rd,@@rs,rba
     rlb rbd,imm1or2         sll rd,imm8             trib @@rd,@@rs,rbr
     rlc rd,imm1or2          sllb rbd,imm8           trirb @@rd,@@rs,rbr
     rlcb rbd,imm1or2        slll rrd,imm8           trtdrb @@ra,@@rb,rbr
     rldb rbb,rba            sout imm16,rs           trtib @@ra,@@rb,rr
     rr rd,imm1or2           soutb imm16,rbs         trtirb @@ra,@@rb,rbr
     rrb rbd,imm1or2         soutd @@rd,@@rs,ra        trtrb @@ra,@@rb,rbr
     rrc rd,imm1or2          soutdb @@rd,@@rs,rba      tset @@rd
     rrcb rbd,imm1or2        soutib @@rd,@@rs,ra       tset addr
     rrdb rbb,rba            soutibr @@rd,@@rs,ra      tset addr(rd)
     rsvd36                  sra rd,imm8             tset rd
     rsvd38                  srab rbd,imm8           tsetb @@rd
     rsvd78                  sral rrd,imm8           tsetb addr
     rsvd7e                  srl rd,imm8             tsetb addr(rd)
     rsvd9d                  srlb rbd,imm8           tsetb rbd
     rsvd9f                  srll rrd,imm8           xor rd,@@rs
     rsvdb9                  sub rd,@@rs              xor rd,addr
     rsvdbf                  sub rd,addr             xor rd,addr(rs)
     sbc rd,rs               sub rd,addr(rs)         xor rd,imm16
     sbcb rbd,rbs            sub rd,imm16            xor rd,rs
     sc imm8                 sub rd,rs               xorb rbd,@@rs
     sda rd,rs               subb rbd,@@rs            xorb rbd,addr
     sdab rbd,rs             subb rbd,addr           xorb rbd,addr(rs)
     sdal rrd,rs             subb rbd,addr(rs)       xorb rbd,imm8
     sdl rd,rs               subb rbd,imm8           xorb rbd,rbs
     sdlb rbd,rs             subb rbd,rbs            xorb rbd,rbs
     sdll rrd,rs             subl rrd,@@rs
     set @@rd,imm4            subl rrd,addr
     set addr(rd),imm4       subl rrd,addr(rs)


File: as.info,  Node: Vax-Dependent,  Prev: Z8000-Dependent,  Up: Machine Dependencies

VAX Dependent Features
======================

* Menu:

* VAX-Opts::                    VAX Command-Line Options
* VAX-float::                   VAX Floating Point
* VAX-directives::              Vax Machine Directives
* VAX-opcodes::                 VAX Opcodes
* VAX-branch::                  VAX Branch Improvement
* VAX-operands::                VAX Operands
* VAX-no::                      Not Supported on VAX


File: as.info,  Node: VAX-Opts,  Next: VAX-float,  Up: Vax-Dependent

VAX Command-Line Options
------------------------

   The Vax version of `as' accepts any of the following options, gives
a warning message that the option was ignored and proceeds.  These
options are for compatibility with scripts designed for other people's
assemblers.

``-D' (Debug)'
``-S' (Symbol Table)'
``-T' (Token Trace)'
     These are obsolete options used to debug old assemblers.

``-d' (Displacement size for JUMPs)'
     This option expects a number following the `-d'.  Like options
     that expect filenames, the number may immediately follow the `-d'
     (old standard) or constitute the whole of the command line
     argument that follows `-d' (GNU standard).

``-V' (Virtualize Interpass Temporary File)'
     Some other assemblers use a temporary file.  This option commanded
     them to keep the information in active memory rather than in a
     disk file.  `as' always does this, so this option is redundant.

``-J' (JUMPify Longer Branches)'
     Many 32-bit computers permit a variety of branch instructions to
     do the same job.  Some of these instructions are short (and fast)
     but have a limited range; others are long (and slow) but can
     branch anywhere in virtual memory.  Often there are 3 flavors of
     branch: short, medium and long.  Some other assemblers would emit
     short and medium branches, unless told by this option to emit
     short and long branches.

``-t' (Temporary File Directory)'
     Some other assemblers may use a temporary file, and this option
     takes a filename being the directory to site the temporary file.
     Since `as' does not use a temporary disk file, this option makes
     no difference.  `-t' needs exactly one filename.

   The Vax version of the assembler accepts additional options when
compiled for VMS:

`-h N'
     External symbol or section (used for global variables) names are
     not case sensitive on VAX/VMS and always mapped to upper case.
     This is contrary to the C language definition which explicitly
     distinguishes upper and lower case.  To implement a standard
     conforming C compiler, names must be changed (mapped) to preserve
     the case information.  The default mapping is to convert all lower
     case characters to uppercase and adding an underscore followed by
     a 6 digit hex value, representing a 24 digit binary value.  The
     one digits in the binary value represent which characters are
     uppercase in the original symbol name.

     The `-h N' option determines how we map names.  This takes several
     values.  No `-h' switch at all allows case hacking as described
     above.  A value of zero (`-h0') implies names should be upper
     case, and inhibits the case hack.  A value of 2 (`-h2') implies
     names should be all lower case, with no case hack.  A value of 3
     (`-h3') implies that case should be preserved.  The value 1 is
     unused.  The `-H' option directs `as' to display every mapped
     symbol during assembly.

     Symbols whose names include a dollar sign `$' are exceptions to the
     general name mapping.  These symbols are normally only used to
     reference VMS library names.  Such symbols are always mapped to
     upper case.

`-+'
     The `-+' option causes `as' to truncate any symbol name larger
     than 31 characters.  The `-+' option also prevents some code
     following the `_main' symbol normally added to make the object
     file compatible with Vax-11 "C".

`-1'
     This option is ignored for backward compatibility with `as'
     version 1.x.

`-H'
     The `-H' option causes `as' to print every symbol which was
     changed by case mapping.


File: as.info,  Node: VAX-float,  Next: VAX-directives,  Prev: VAX-Opts,  Up: Vax-Dependent

VAX Floating Point
------------------

   Conversion of flonums to floating point is correct, and compatible
with previous assemblers.  Rounding is towards zero if the remainder is
exactly half the least significant bit.

   `D', `F', `G' and `H' floating point formats are understood.

   Immediate floating literals (_e.g._ `S`$6.9') are rendered
correctly.  Again, rounding is towards zero in the boundary case.

   The `.float' directive produces `f' format numbers.  The `.double'
directive produces `d' format numbers.


File: as.info,  Node: VAX-directives,  Next: VAX-opcodes,  Prev: VAX-float,  Up: Vax-Dependent

Vax Machine Directives
----------------------

   The Vax version of the assembler supports four directives for
generating Vax floating point constants.  They are described in the
table below.

`.dfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax `d' format 64-bit floating point constants.

`.ffloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax `f' format 32-bit floating point constants.

`.gfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax `g' format 64-bit floating point constants.

`.hfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax `h' format 128-bit floating point constants.

@


1.1.6.2
log
@Update generated files.
@
text
@d1 1
a1 1
This is as.info, produced by makeinfo version 4.1 from as.texinfo.
@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 619
This is as.info, produced by makeinfo version 4.0 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free
Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1
     or any later version published by the Free Software Foundation;
   with no Invariant Sections, with no Front-Cover Texts, and with no
    Back-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License".


File: as.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

How to report bugs
==================

   A number of companies and individuals offer support for GNU
products.  If you obtained `as' from a support organization, we
recommend you contact that organization first.

   You can find contact information for many support companies and
individuals in the file `etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for `as'
to `bug-binutils@@gnu.org'.

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug
is a stray memory reference which happens to fetch from the location
where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the assembler into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  Those bug reports are useless, and we urge everyone to _refuse
to respond to them_ except to chide the sender to report bugs properly.

   To enable us to fix the bug, you should include all these things:

   * The version of `as'.  `as' announces it if you start it with the
     `--version' argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of `as'.

   * Any patches you may have applied to the `as' source.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile `as'--e.g.
     "`gcc-2.7'".

   * The command arguments you gave the assembler to assemble your
     example and observe the bug.  To guarantee you will not omit
     something important, list them all.  A copy of the Makefile (or
     the output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file that will reproduce the bug.  If the bug is
     observed when the assembler is invoked via a compiler, send the
     assembler source, not the high level language source.  Most
     compilers will produce the assembler source when run with the `-S'
     option.  If you are using `gcc', use the options `-v
     --save-temps'; this will save the assembler source in a file with
     an extension of `.s', and also show you exactly how `as' is being
     run.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that `as' gets a fatal signal, then we
     will certainly notice it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.  You might as well
     not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of `as' is out of synch, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and ours would not.  If you told
     us to expect a crash, then when ours fails to crash, we would know
     that the bug was not happening for us.  If you had not told us to
     expect a crash, then we would not be able to draw any conclusion
     from our observations.

   * If you wish to suggest changes to the `as' source, send us context
     diffs, as generated by `diff' with the `-u', `-c', or `-p' option.
     Always send diffs from the old file to the new file.  If you even
     discuss something in the `as' source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_
     of the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as `as' it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify
     that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


File: as.info,  Node: Acknowledgements,  Next: GNU Free Documentation License,  Prev: Reporting Bugs,  Up: Top

Acknowledgements
****************

   If you have contributed to `as' and your name isn't listed here, it
is not meant as a slight.  We just don't know about it.  Send mail to
the maintainer, and we'll correct the situation.  Currently the
maintainer is Ken Raeburn (email address `raeburn@@cygnus.com').

   Dean Elsner wrote the original GNU assembler for the VAX.(1)

   Jay Fenlason maintained GAS for a while, adding support for
GDB-specific debug information and the 68k series machines, most of the
preprocessing pass, and extensive changes in `messages.c',
`input-file.c', `write.c'.

   K. Richard Pixley maintained GAS for a while, adding various
enhancements and many bug fixes, including merging support for several
processors, breaking GAS up to handle multiple object file format back
ends (including heavy rewrite, testing, an integration of the coff and
b.out back ends), adding configuration including heavy testing and
verification of cross assemblers and file splits and renaming,
converted GAS to strictly ANSI C including full prototypes, added
support for m680[34]0 and cpu32, did considerable work on i960
including a COFF port (including considerable amounts of reverse
engineering), a SPARC opcode file rewrite, DECstation, rs6000, and
hp300hpux host ports, updated "know" assertions and made them work,
much other reorganization, cleanup, and lint.

   Ken Raeburn wrote the high-level BFD interface code to replace most
of the code in format-specific I/O modules.

   The original VMS support was contributed by David L. Kashtan.  Eric
Youngdale has done much work with it since.

   The Intel 80386 machine description was written by Eliot Dresselhaus.

   Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

   The Motorola 88k machine description was contributed by Devon Bowen
of Buffalo University and Torbjorn Granlund of the Swedish Institute of
Computer Science.

   Keith Knowles at the Open Software Foundation wrote the original
MIPS back end (`tc-mips.c', `tc-mips.h'), and contributed Rose format
support (which hasn't been merged in yet).  Ralph Campbell worked with
the MIPS code to support a.out format.

   Support for the Zilog Z8k and Hitachi H8/300 and H8/500 processors
(tc-z8k, tc-h8300, tc-h8500), and IEEE 695 object file format
(obj-ieee), was written by Steve Chamberlain of Cygnus Support.  Steve
also modified the COFF back end to use BFD for some low-level
operations, for use with the H8/300 and AMD 29k targets.

   John Gilmore built the AMD 29000 support, added `.include' support,
and simplified the configuration of which versions accept which
directives.  He updated the 68k machine description so that Motorola's
opcodes always produced fixed-size instructions (e.g. `jsr'), while
synthetic instructions remained shrinkable (`jbsr').  John fixed many
bugs, including true tested cross-compilation support, and one bug in
relaxation that took a week and required the proverbial one-bit fix.

   Ian Lance Taylor of Cygnus Support merged the Motorola and MIT
syntax for the 68k, completed support for some COFF targets (68k, i386
SVR3, and SCO Unix), added support for MIPS ECOFF and ELF targets,
wrote the initial RS/6000 and PowerPC assembler, and made a few other
minor patches.

   Steve Chamberlain made `as' able to generate listings.

   Hewlett-Packard contributed support for the HP9000/300.

   Jeff Law wrote GAS and BFD support for the native HPPA object format
(SOM) along with a fairly extensive HPPA testsuite (for both SOM and
ELF object formats).  This work was supported by both the Center for
Software Science at the University of Utah and Cygnus Support.

   Support for ELF format files has been worked on by Mark Eichin of
Cygnus Support (original, incomplete implementation for SPARC), Pete
Hoogenboom and Jeff Law at the University of Utah (HPPA mainly),
Michael Meissner of the Open Software Foundation (i386 mainly), and Ken
Raeburn of Cygnus Support (sparc, and some initial 64-bit support).

   Linas Vepstas added GAS support for the ESA/390 "IBM 370"
architecture.

   Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote
GAS and BFD support for openVMS/Alpha.

   Timothy Wall, Michael Hayes, and Greg Smart contributed to the
various tic* flavors.

   Several engineers at Cygnus Support have also provided many small
bug fixes and configuration enhancements.

   Many others have contributed large or small bugfixes and
enhancements.  If you have contributed significant work and are not
mentioned on this list, and want to be, let us know.  Some of the
history has been lost; we are not intentionally leaving anyone out.

   ---------- Footnotes ----------

   (1) Any more details?


File: as.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Acknowledgements,  Up: Top

GNU Free Documentation License
******************************

   GNU Free Documentation License

   Version 1.1, March 2000

   Copyright (C) 2000  Free Software Foundation, Inc.    59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA

   Everyone is permitted to copy and distribute verbatim copies  of
this license document, but changing it is not allowed.

   0. PREAMBLE

   The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get credit
for their work, while not being considered responsible for
modifications made by others.

   This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft license
designed for free software.

   We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals; it
can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

   1. APPLICABILITY AND DEFINITIONS

   This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

   A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

   A "Secondary Section" is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding them.

   The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

   The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

   A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the general
public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input to
text formatters.  A copy made in an otherwise Transparent file format
whose markup has been designed to thwart or discourage subsequent
modification by readers is not Transparent.  A copy that is not
"Transparent" is called "Opaque".

   Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML or
XML using a publicly available DTD, and standard-conforming simple HTML
designed for human modification.  Opaque formats include PostScript,
PDF, proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated
HTML produced by some word processors for output purposes only.

   The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

   2. VERBATIM COPYING

   You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

   You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

   3. COPYING IN QUANTITY

   If you publish printed copies of the Document numbering more than
100, and the Document's license notice requires Cover Texts, you must
enclose the copies in covers that carry, clearly and legibly, all these
Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts
on the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present the
full title with all words of the title equally prominent and visible.
You may add other material on the covers in addition.  Copying with
changes limited to the covers, as long as they preserve the title of
the Document and satisfy these conditions, can be treated as verbatim
copying in other respects.

   If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

   If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

   It is requested, but not required, that you contact the authors of
the Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.

   4. MODIFICATIONS

   You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release the
Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy of
it.  In addition, you must do these things in the Modified Version:

   A. Use in the Title Page (and on the covers, if any) a title distinct
  from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.  B. List on
the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).  C.
State on the Title page the name of the publisher of the    Modified
Version, as the publisher.  D. Preserve all the copyright notices of
the Document.  E. Add an appropriate copyright notice for your
modifications    adjacent to the other copyright notices.  F. Include,
immediately after the copyright notices, a license notice    giving the
public permission to use the Modified Version under the    terms of
this License, in the form shown in the Addendum below.  G. Preserve in
that license notice the full lists of Invariant Sections    and
required Cover Texts given in the Document's license notice.  H.
Include an unaltered copy of this License.  I. Preserve the section
entitled "History", and its title, and add to    it an item stating at
least the title, year, new authors, and    publisher of the Modified
Version as given on the Title Page.  If    there is no section entitled
"History" in the Document, create one    stating the title, year,
authors, and publisher of the Document as    given on its Title Page,
then add an item describing the Modified    Version as stated in the
previous sentence.  J. Preserve the network location, if any, given in
the Document for    public access to a Transparent copy of the
Document, and likewise    the network locations given in the Document
for previous versions    it was based on.  These may be placed in the
"History" section.     You may omit a network location for a work that
was published at    least four years before the Document itself, or if
the original    publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgements
and/or dedications given therein.  L. Preserve all the Invariant
Sections of the Document,    unaltered in their text and in their
titles.  Section numbers    or the equivalent are not considered part
of the section titles.  M. Delete any section entitled "Endorsements".
Such a section    may not be included in the Modified Version.  N. Do
not retitle any existing section as "Endorsements"    or to conflict in
title with any Invariant Section.

   If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

   You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties-for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

   You may add a passage of up to five words as a Front-Cover Text, and
a passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or through
arrangements made by) any one entity.  If the Document already includes
a cover text for the same cover, previously added by you or by
arrangement made by the same entity you are acting on behalf of, you
may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

   The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

   5. COMBINING DOCUMENTS

   You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

   The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of Invariant
Sections in the license notice of the combined work.

   In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."

   6. COLLECTIONS OF DOCUMENTS

   You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy that
is included in the collection, provided that you follow the rules of
this License for verbatim copying of each of the documents in all other
respects.

   You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.

   7. AGGREGATION WITH INDEPENDENT WORKS

   A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version of
the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they are
not themselves derivative works of the Document.

   If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.  Otherwise
they must appear on covers around the whole aggregate.

   8. TRANSLATION

   Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the original
English version of this License.  In case of a disagreement between the
translation and the original English version of this License, the
original English version will prevail.

   9. TERMINATION

   You may not copy, modify, sublicense, or distribute the Document
except as expressly provided for under this License.  Any other attempt
to copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such parties
remain in full compliance.

   10. FUTURE REVISIONS OF THIS LICENSE

   The Free Software Foundation may publish new, revised versions of
the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

   Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.

   ADDENDUM: How to use this License for your documents

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.1
         or any later version published by the Free Software Foundation;
         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

@


1.1.2.1
log
@Add generated files.
@
text
@a0 1038
This is as.info, produced by makeinfo version 4.0 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free
Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: as.info,  Node: Index,  Prev: Acknowledgements,  Up: Top

Index
*****

* Menu:

* #:                                     Comments.
* #APP:                                  Preprocessing.
* #NO_APP:                               Preprocessing.
* $ in symbol names <1>:                 SH-Chars.
* $ in symbol names <2>:                 H8/500-Chars.
* $ in symbol names <3>:                 D30V-Chars.
* $ in symbol names:                     D10V-Chars.
* -+ option, VAX/VMS:                    VAX-Opts.
* --:                                    Command Line.
* --base-size-default-16:                M68K-Opts.
* --base-size-default-32:                M68K-Opts.
* --bitwise-or option, M680x0:           M68K-Opts.
* --disp-size-default-16:                M68K-Opts.
* --disp-size-default-32:                M68K-Opts.
* --enforce-aligned-data:                Sparc-Aligned-Data.
* --fatal-warnings:                      W.
* --MD:                                  MD.
* --no-warn:                             W.
* --register-prefix-optional option, M680x0: M68K-Opts.
* --statistics:                          statistics.
* --traditional-format:                  traditional-format.
* --warn:                                W.
* -1 option, VAX/VMS:                    VAX-Opts.
* -a:                                    a.
* -A options, i960:                      Options-i960.
* -ac:                                   a.
* -ad:                                   a.
* -ah:                                   a.
* -al:                                   a.
* -an:                                   a.
* -as:                                   a.
* -Asparclet:                            Sparc-Opts.
* -Asparclite:                           Sparc-Opts.
* -Av6:                                  Sparc-Opts.
* -Av8:                                  Sparc-Opts.
* -Av9:                                  Sparc-Opts.
* -Av9a:                                 Sparc-Opts.
* -b option, i960:                       Options-i960.
* -D:                                    D.
* -D, ignored on VAX:                    VAX-Opts.
* -d, VAX option:                        VAX-Opts.
* -EB command line option, ARM:          ARM Options.
* -EB option (MIPS):                     MIPS Opts.
* -EL command line option, ARM:          ARM Options.
* -EL option (MIPS):                     MIPS Opts.
* -f:                                    f.
* -G option (MIPS):                      MIPS Opts.
* -H option, VAX/VMS:                    VAX-Opts.
* -h option, VAX/VMS:                    VAX-Opts.
* -I PATH:                               I.
* -J, ignored on VAX:                    VAX-Opts.
* -K:                                    K.
* -k command line option, ARM:           ARM Options.
* -L:                                    L.
* -l option, M680x0:                     M68K-Opts.
* -M:                                    M.
* -m68000 and related options:           M68K-Opts.
* -mall command line option, ARM:        ARM Options.
* -mapcs command line option, ARM:       ARM Options.
* -marm command line option, ARM:        ARM Options.
* -marmv command line option, ARM:       ARM Options.
* -mbig-endian option (ARC):             ARC-Opts.
* -mfpa command line option, ARM:        ARM Options.
* -mfpe-old command line option, ARM:    ARM Options.
* -mlittle-endian option (ARC):          ARC-Opts.
* -mno-fpu command line option, ARM:     ARM Options.
* -mthumb command line option, ARM:      ARM Options.
* -mthumb-interwork command line option, ARM: ARM Options.
* -mv850 command line option, V850:      V850 Options.
* -mv850any command line option, V850:   V850 Options.
* -mv850e command line option, V850:     V850 Options.
* -no-relax option, i960:                Options-i960.
* -nocpp ignored (MIPS):                 MIPS Opts.
* -o:                                    o.
* -R:                                    R.
* -S, ignored on VAX:                    VAX-Opts.
* -t, ignored on VAX:                    VAX-Opts.
* -T, ignored on VAX:                    VAX-Opts.
* -v:                                    v.
* -V, redundant on VAX:                  VAX-Opts.
* -version:                              v.
* -W:                                    W.
* -wsigned_overflow command line option, V850: V850 Options.
* -wunsigned_overflow command line option, V850: V850 Options.
* . (symbol):                            Dot.
* .insn:                                 MIPS insn.
* .ltorg directive, ARM:                 ARM Directives.
* .o:                                    Object.
* .param on HPPA:                        HPPA Directives.
* .pool directive, ARM:                  ARM Directives.
* .set autoextend:                       MIPS autoextend.
* .set mipsN:                            MIPS ISA.
* .set noautoextend:                     MIPS autoextend.
* .set pop:                              MIPS option stack.
* .set push:                             MIPS option stack.
* .v850 directive, V850:                 V850 Directives.
* .v850e directive, V850:                V850 Directives.
* 16-bit code, i386:                     i386-16bit.
* 29K support:                           AMD29K-Dependent.
* 3DNow!, i386:                          i386-SIMD.
* : (label):                             Statements.
* @@word modifier, D10V:                  D10V-Word.
* \" (doublequote character):            Strings.
* \\ (\ character):                      Strings.
* \b (backspace character):              Strings.
* \DDD (octal character code):           Strings.
* \f (formfeed character):               Strings.
* \n (newline character):                Strings.
* \r (carriage return character):        Strings.
* \t (tab):                              Strings.
* \XD... (hex character code):           Strings.
* a.out:                                 Object.
* a.out symbol attributes:               a.out Symbols.
* ABORT directive:                       ABORT.
* abort directive:                       Abort.
* absolute section:                      Ld Sections.
* addition, permitted arguments:         Infix Ops.
* addresses:                             Expressions.
* addresses, format of:                  Secs Background.
* addressing modes, D10V:                D10V-Addressing.
* addressing modes, D30V:                D30V-Addressing.
* addressing modes, H8/300:              H8/300-Addressing.
* addressing modes, H8/500:              H8/500-Addressing.
* addressing modes, M680x0:              M68K-Syntax.
* addressing modes, SH:                  SH-Addressing.
* addressing modes, Z8000:               Z8000-Addressing.
* ADR reg,<label> pseudo op, ARM:        ARM Opcodes.
* ADRL reg,<label> pseudo op, ARM:       ARM Opcodes.
* advancing location counter:            Org.
* align directive:                       Align.
* align directive, SPARC:                Sparc-Directives.
* altered difference tables:             Word.
* alternate syntax for the 680x0:        M68K-Moto-Syntax.
* AMD 29K floating point (IEEE):         AMD29K Floating Point.
* AMD 29K identifiers:                   AMD29K-Chars.
* AMD 29K line comment character:        AMD29K-Chars.
* AMD 29K machine directives:            AMD29K Directives.
* AMD 29K macros:                        AMD29K-Macros.
* AMD 29K opcodes:                       AMD29K Opcodes.
* AMD 29K options (none):                AMD29K Options.
* AMD 29K protected registers:           AMD29K-Regs.
* AMD 29K register names:                AMD29K-Regs.
* AMD 29K special purpose registers:     AMD29K-Regs.
* AMD 29K support:                       AMD29K-Dependent.
* ARC architectures:                     ARC-Opts.
* ARC big-endian output:                 ARC-Opts.
* ARC endianness:                        Overview.
* ARC floating point (IEEE):             ARC-Float.
* ARC little-endian output:              ARC-Opts.
* ARC machine directives:                ARC-Directives.
* ARC options:                           ARC-Opts.
* ARC support:                           ARC-Dependent.
* architecture options, i960:            Options-i960.
* architecture options, M680x0:          M68K-Opts.
* architectures, ARC:                    ARC-Opts.
* architectures, SPARC:                  Sparc-Opts.
* arguments for addition:                Infix Ops.
* arguments for subtraction:             Infix Ops.
* arguments in expressions:              Arguments.
* arithmetic functions:                  Operators.
* arithmetic operands:                   Arguments.
* arm directive, ARM:                    ARM Directives.
* ARM floating point (IEEE):             ARM Floating Point.
* ARM identifiers:                       ARM-Chars.
* ARM immediate character:               ARM-Chars.
* ARM line comment character:            ARM-Chars.
* ARM line separator:                    ARM-Chars.
* ARM machine directives:                ARM Directives.
* ARM opcodes:                           ARM Opcodes.
* ARM options (none):                    ARM Options.
* ARM register names:                    ARM-Regs.
* ARM support:                           ARM-Dependent.
* ascii directive:                       Ascii.
* asciz directive:                       Asciz.
* assembler bugs, reporting:             Bug Reporting.
* assembler crash:                       Bug Criteria.
* assembler internal logic error:        As Sections.
* assembler version:                     v.
* assembler, and linker:                 Secs Background.
* assembly listings, enabling:           a.
* assigning values to symbols <1>:       Equ.
* assigning values to symbols:           Setting Symbols.
* attributes, symbol:                    Symbol Attributes.
* auxiliary attributes, COFF symbols:    COFF Symbols.
* auxiliary symbol information, COFF:    Dim.
* Av7:                                   Sparc-Opts.
* backslash (\\):                        Strings.
* backspace (\b):                        Strings.
* balign directive:                      Balign.
* balignl directive:                     Balign.
* balignw directive:                     Balign.
* big endian output, ARC:                Overview.
* big endian output, MIPS:               Overview.
* big endian output, PJ:                 Overview.
* big-endian output, ARC:                ARC-Opts.
* big-endian output, MIPS:               MIPS Opts.
* bignums:                               Bignums.
* binary integers:                       Integers.
* bitfields, not supported on VAX:       VAX-no.
* block:                                 Z8000 Directives.
* block directive, AMD 29K:              AMD29K Directives.
* branch improvement, M680x0:            M68K-Branch.
* branch improvement, VAX:               VAX-branch.
* branch recording, i960:                Options-i960.
* branch statistics table, i960:         Options-i960.
* bss directive, i960:                   Directives-i960.
* bss section <1>:                       bss.
* bss section:                           Ld Sections.
* bug criteria:                          Bug Criteria.
* bug reports:                           Bug Reporting.
* bugs in assembler:                     Reporting Bugs.
* bus lock prefixes, i386:               i386-Prefixes.
* bval:                                  Z8000 Directives.
* byte directive:                        Byte.
* call instructions, i386:               i386-Mnemonics.
* callj, i960 pseudo-opcode:             callj-i960.
* carriage return (\r):                  Strings.
* character constants:                   Characters.
* character escape codes:                Strings.
* character, single:                     Chars.
* characters used in symbols:            Symbol Intro.
* code directive, ARM:                   ARM Directives.
* code16 directive, i386:                i386-16bit.
* code16gcc directive, i386:             i386-16bit.
* code32 directive, i386:                i386-16bit.
* COFF auxiliary symbol information:     Dim.
* COFF structure debugging:              Tag.
* COFF symbol attributes:                COFF Symbols.
* COFF symbol descriptor:                Desc.
* COFF symbol storage class:             Scl.
* COFF symbol type:                      Type.
* COFF symbols, debugging:               Def.
* COFF value attribute:                  Val.
* COMDAT:                                Linkonce.
* comm directive:                        Comm.
* command line conventions:              Command Line.
* command line options, V850:            V850 Options.
* command-line options ignored, VAX:     VAX-Opts.
* comments:                              Comments.
* comments, M680x0:                      M68K-Chars.
* comments, removed by preprocessor:     Preprocessing.
* common directive, SPARC:               Sparc-Directives.
* common sections:                       Linkonce.
* common variable storage:               bss.
* compare and jump expansions, i960:     Compare-and-branch-i960.
* compare/branch instructions, i960:     Compare-and-branch-i960.
* conditional assembly:                  If.
* constant, single character:            Chars.
* constants:                             Constants.
* constants, bignum:                     Bignums.
* constants, character:                  Characters.
* constants, converted by preprocessor:  Preprocessing.
* constants, floating point:             Flonums.
* constants, integer:                    Integers.
* constants, number:                     Numbers.
* constants, string:                     Strings.
* conversion instructions, i386:         i386-Mnemonics.
* coprocessor wait, i386:                i386-Prefixes.
* cpu directive, SPARC:                  ARC-Directives.
* cputype directive, AMD 29K:            AMD29K Directives.
* crash of assembler:                    Bug Criteria.
* ctbp register, V850:                   V850-Regs.
* ctoff pseudo-op, V850:                 V850 Opcodes.
* ctpc register, V850:                   V850-Regs.
* ctpsw register, V850:                  V850-Regs.
* current address:                       Dot.
* current address, advancing:            Org.
* D10V @@word modifier:                   D10V-Word.
* D10V addressing modes:                 D10V-Addressing.
* D10V floating point:                   D10V-Float.
* D10V line comment character:           D10V-Chars.
* D10V opcode summary:                   D10V-Opcodes.
* D10V optimization:                     Overview.
* D10V options:                          D10V-Opts.
* D10V registers:                        D10V-Regs.
* D10V size modifiers:                   D10V-Size.
* D10V sub-instruction ordering:         D10V-Chars.
* D10V sub-instructions:                 D10V-Subs.
* D10V support:                          D10V-Dependent.
* D10V syntax:                           D10V-Syntax.
* D30V addressing modes:                 D30V-Addressing.
* D30V floating point:                   D30V-Float.
* D30V Guarded Execution:                D30V-Guarded.
* D30V line comment character:           D30V-Chars.
* D30V nops:                             Overview.
* D30V nops after 32-bit multiply:       Overview.
* D30V opcode summary:                   D30V-Opcodes.
* D30V optimization:                     Overview.
* D30V options:                          D30V-Opts.
* D30V registers:                        D30V-Regs.
* D30V size modifiers:                   D30V-Size.
* D30V sub-instruction ordering:         D30V-Chars.
* D30V sub-instructions:                 D30V-Subs.
* D30V support:                          D30V-Dependent.
* D30V syntax:                           D30V-Syntax.
* data alignment on SPARC:               Sparc-Aligned-Data.
* data and text sections, joining:       R.
* data directive:                        Data.
* data section:                          Ld Sections.
* data1 directive, M680x0:               M68K-Directives.
* data2 directive, M680x0:               M68K-Directives.
* dbpc register, V850:                   V850-Regs.
* dbpsw register, V850:                  V850-Regs.
* debuggers, and symbol order:           Symbols.
* debugging COFF symbols:                Def.
* decimal integers:                      Integers.
* def directive:                         Def.
* dependency tracking:                   MD.
* deprecated directives:                 Deprecated.
* desc directive:                        Desc.
* descriptor, of a.out symbol:           Symbol Desc.
* dfloat directive, VAX:                 VAX-directives.
* difference tables altered:             Word.
* difference tables, warning:            K.
* dim directive:                         Dim.
* directives and instructions:           Statements.
* directives, M680x0:                    M68K-Directives.
* directives, machine independent:       Pseudo Ops.
* directives, Z8000:                     Z8000 Directives.
* displacement sizing character, VAX:    VAX-operands.
* dot (symbol):                          Dot.
* double directive:                      Double.
* double directive, i386:                i386-Float.
* double directive, M680x0:              M68K-Float.
* double directive, VAX:                 VAX-float.
* doublequote (\"):                      Strings.
* ECOFF sections:                        MIPS Object.
* ecr register, V850:                    V850-Regs.
* eight-byte integer:                    Quad.
* eipc register, V850:                   V850-Regs.
* eipsw register, V850:                  V850-Regs.
* eject directive:                       Eject.
* else directive:                        Else.
* elseif directive:                      Elseif.
* empty expressions:                     Empty Exprs.
* emulation:                             Overview.
* end directive:                         End.
* endef directive:                       Endef.
* endfunc directive:                     Endfunc.
* endianness, ARC:                       Overview.
* endianness, MIPS:                      Overview.
* endianness, PJ:                        Overview.
* endif directive:                       Endif.
* endm directive:                        Macro.
* EOF, newline must precede:             Statements.
* ep register, V850:                     V850-Regs.
* equ directive:                         Equ.
* equiv directive:                       Equiv.
* err directive:                         Err.
* error messsages:                       Errors.
* error on valid input:                  Bug Criteria.
* errors, caused by warnings:            W.
* errors, continuing after:              Z.
* ESA/390 floating point (IEEE):         ESA/390 Floating Point.
* ESA/390 support:                       ESA/390-Dependent.
* ESA/390 Syntax:                        ESA/390 Options.
* ESA/390-only directives:               ESA/390 Directives.
* escape codes, character:               Strings.
* even:                                  Z8000 Directives.
* even directive, M680x0:                M68K-Directives.
* exitm directive:                       Macro.
* expr (internal section):               As Sections.
* expression arguments:                  Arguments.
* expressions:                           Expressions.
* expressions, empty:                    Empty Exprs.
* expressions, integer:                  Integer Exprs.
* extend directive M680x0:               M68K-Float.
* extended directive, i960:              Directives-i960.
* extern directive:                      Extern.
* fail directive:                        Fail.
* faster processing (-f):                f.
* fatal signal:                          Bug Criteria.
* fepc register, V850:                   V850-Regs.
* fepsw register, V850:                  V850-Regs.
* ffloat directive, VAX:                 VAX-directives.
* file directive:                        File.
* file directive, AMD 29K:               AMD29K Directives.
* file name, logical:                    File.
* files, including:                      Include.
* files, input:                          Input Files.
* fill directive:                        Fill.
* filling memory <1>:                    Space.
* filling memory:                        Skip.
* float directive:                       Float.
* float directive, i386:                 i386-Float.
* float directive, M680x0:               M68K-Float.
* float directive, VAX:                  VAX-float.
* floating point numbers:                Flonums.
* floating point numbers (double):       Double.
* floating point numbers (single) <1>:   Single.
* floating point numbers (single):       Float.
* floating point, AMD 29K (IEEE):        AMD29K Floating Point.
* floating point, ARC (IEEE):            ARC-Float.
* floating point, ARM (IEEE):            ARM Floating Point.
* floating point, D10V:                  D10V-Float.
* floating point, D30V:                  D30V-Float.
* floating point, ESA/390 (IEEE):        ESA/390 Floating Point.
* floating point, H8/300 (IEEE):         H8/300 Floating Point.
* floating point, H8/500 (IEEE):         H8/500 Floating Point.
* floating point, HPPA (IEEE):           HPPA Floating Point.
* floating point, i386:                  i386-Float.
* floating point, i960 (IEEE):           Floating Point-i960.
* floating point, M680x0:                M68K-Float.
* floating point, SH (IEEE):             SH Floating Point.
* floating point, SPARC (IEEE):          Sparc-Float.
* floating point, V850 (IEEE):           V850 Floating Point.
* floating point, VAX:                   VAX-float.
* flonums:                               Flonums.
* force_thumb directive, ARM:            ARM Directives.
* format of error messages:              Errors.
* format of warning messages:            Errors.
* formfeed (\f):                         Strings.
* func directive:                        Func.
* functions, in expressions:             Operators.
* gbr960, i960 postprocessor:            Options-i960.
* gfloat directive, VAX:                 VAX-directives.
* global:                                Z8000 Directives.
* global directive:                      Global.
* gp register, MIPS:                     MIPS Object.
* gp register, V850:                     V850-Regs.
* grouping data:                         Sub-Sections.
* H8/300 addressing modes:               H8/300-Addressing.
* H8/300 floating point (IEEE):          H8/300 Floating Point.
* H8/300 line comment character:         H8/300-Chars.
* H8/300 line separator:                 H8/300-Chars.
* H8/300 machine directives (none):      H8/300 Directives.
* H8/300 opcode summary:                 H8/300 Opcodes.
* H8/300 options (none):                 H8/300 Options.
* H8/300 registers:                      H8/300-Regs.
* H8/300 size suffixes:                  H8/300 Opcodes.
* H8/300 support:                        H8/300-Dependent.
* H8/300H, assembling for:               H8/300 Directives.
* H8/500 addressing modes:               H8/500-Addressing.
* H8/500 floating point (IEEE):          H8/500 Floating Point.
* H8/500 line comment character:         H8/500-Chars.
* H8/500 line separator:                 H8/500-Chars.
* H8/500 machine directives (none):      H8/500 Directives.
* H8/500 opcode summary:                 H8/500 Opcodes.
* H8/500 options (none):                 H8/500 Options.
* H8/500 registers:                      H8/500-Regs.
* H8/500 support:                        H8/500-Dependent.
* half directive, SPARC:                 Sparc-Directives.
* hex character code (\XD...):           Strings.
* hexadecimal integers:                  Integers.
* hfloat directive, VAX:                 VAX-directives.
* hi pseudo-op, V850:                    V850 Opcodes.
* hi0 pseudo-op, V850:                   V850 Opcodes.
* hidden directive:                      Visibility.
* hilo pseudo-op, V850:                  V850 Opcodes.
* HPPA directives not supported:         HPPA Directives.
* HPPA floating point (IEEE):            HPPA Floating Point.
* HPPA Syntax:                           HPPA Options.
* HPPA-only directives:                  HPPA Directives.
* hword directive:                       hword.
* i370 support:                          ESA/390-Dependent.
* i386 16-bit code:                      i386-16bit.
* i386 conversion instructions:          i386-Mnemonics.
* i386 floating point:                   i386-Float.
* i386 immediate operands:               i386-Syntax.
* i386 instruction naming:               i386-Mnemonics.
* i386 instruction prefixes:             i386-Prefixes.
* i386 jump optimization:                i386-jumps.
* i386 jump, call, return:               i386-Syntax.
* i386 jump/call operands:               i386-Syntax.
* i386 memory references:                i386-Memory.
* i386 mul, imul instructions:           i386-Notes.
* i386 options (none):                   i386-Options.
* i386 register operands:                i386-Syntax.
* i386 registers:                        i386-Regs.
* i386 sections:                         i386-Syntax.
* i386 size suffixes:                    i386-Syntax.
* i386 source, destination operands:     i386-Syntax.
* i386 support:                          i386-Dependent.
* i386 syntax compatibility:             i386-Syntax.
* i80306 support:                        i386-Dependent.
* i960 architecture options:             Options-i960.
* i960 branch recording:                 Options-i960.
* i960 callj pseudo-opcode:              callj-i960.
* i960 compare and jump expansions:      Compare-and-branch-i960.
* i960 compare/branch instructions:      Compare-and-branch-i960.
* i960 floating point (IEEE):            Floating Point-i960.
* i960 machine directives:               Directives-i960.
* i960 opcodes:                          Opcodes for i960.
* i960 options:                          Options-i960.
* i960 support:                          i960-Dependent.
* ident directive:                       Ident.
* identifiers, AMD 29K:                  AMD29K-Chars.
* identifiers, ARM:                      ARM-Chars.
* if directive:                          If.
* ifc directive:                         If.
* ifdef directive:                       If.
* ifeq directive:                        If.
* ifeqs directive:                       If.
* ifge directive:                        If.
* ifgt directive:                        If.
* ifle directive:                        If.
* iflt directive:                        If.
* ifnc directive:                        If.
* ifndef directive:                      If.
* ifne directive:                        If.
* ifnes directive:                       If.
* ifnotdef directive:                    If.
* immediate character, ARM:              ARM-Chars.
* immediate character, M680x0:           M68K-Chars.
* immediate character, VAX:              VAX-operands.
* immediate operands, i386:              i386-Syntax.
* imul instruction, i386:                i386-Notes.
* include directive:                     Include.
* include directive search path:         I.
* indirect character, VAX:               VAX-operands.
* infix operators:                       Infix Ops.
* inhibiting interrupts, i386:           i386-Prefixes.
* input:                                 Input Files.
* input file linenumbers:                Input Files.
* instruction naming, i386:              i386-Mnemonics.
* instruction prefixes, i386:            i386-Prefixes.
* instruction set, M680x0:               M68K-opcodes.
* instruction summary, D10V:             D10V-Opcodes.
* instruction summary, D30V:             D30V-Opcodes.
* instruction summary, H8/300:           H8/300 Opcodes.
* instruction summary, H8/500:           H8/500 Opcodes.
* instruction summary, SH:               SH Opcodes.
* instruction summary, Z8000:            Z8000 Opcodes.
* instructions and directives:           Statements.
* int directive:                         Int.
* int directive, H8/300:                 H8/300 Directives.
* int directive, H8/500:                 H8/500 Directives.
* int directive, i386:                   i386-Float.
* integer expressions:                   Integer Exprs.
* integer, 16-byte:                      Octa.
* integer, 8-byte:                       Quad.
* integers:                              Integers.
* integers, 16-bit:                      hword.
* integers, 32-bit:                      Int.
* integers, binary:                      Integers.
* integers, decimal:                     Integers.
* integers, hexadecimal:                 Integers.
* integers, octal:                       Integers.
* integers, one byte:                    Byte.
* internal assembler sections:           As Sections.
* internal directive:                    Visibility.
* invalid input:                         Bug Criteria.
* invocation summary:                    Overview.
* irp directive:                         Irp.
* irpc directive:                        Irpc.
* joining text and data sections:        R.
* jump instructions, i386:               i386-Mnemonics.
* jump optimization, i386:               i386-jumps.
* jump/call operands, i386:              i386-Syntax.
* label (:):                             Statements.
* labels:                                Labels.
* lcomm directive:                       Lcomm.
* ld:                                    Object.
* ldouble directive M680x0:              M68K-Float.
* LDR reg,=<label> pseudo op, ARM:       ARM Opcodes.
* leafproc directive, i960:              Directives-i960.
* length of symbols:                     Symbol Intro.
* lflags directive (ignored):            Lflags.
* line comment character:                Comments.
* line comment character, AMD 29K:       AMD29K-Chars.
* line comment character, ARM:           ARM-Chars.
* line comment character, D10V:          D10V-Chars.
* line comment character, D30V:          D30V-Chars.
* line comment character, H8/300:        H8/300-Chars.
* line comment character, H8/500:        H8/500-Chars.
* line comment character, M680x0:        M68K-Chars.
* line comment character, SH:            SH-Chars.
* line comment character, V850:          V850-Chars.
* line comment character, Z8000:         Z8000-Chars.
* line directive:                        Line.
* line directive, AMD 29K:               AMD29K Directives.
* line numbers, in input files:          Input Files.
* line numbers, in warnings/errors:      Errors.
* line separator character:              Statements.
* line separator, ARM:                   ARM-Chars.
* line separator, H8/300:                H8/300-Chars.
* line separator, H8/500:                H8/500-Chars.
* line separator, SH:                    SH-Chars.
* line separator, Z8000:                 Z8000-Chars.
* lines starting with #:                 Comments.
* linker:                                Object.
* linker, and assembler:                 Secs Background.
* linkonce directive:                    Linkonce.
* list directive:                        List.
* listing control, turning off:          Nolist.
* listing control, turning on:           List.
* listing control: new page:             Eject.
* listing control: paper size:           Psize.
* listing control: subtitle:             Sbttl.
* listing control: title line:           Title.
* listings, enabling:                    a.
* little endian output, ARC:             Overview.
* little endian output, MIPS:            Overview.
* little endian output, PJ:              Overview.
* little-endian output, ARC:             ARC-Opts.
* little-endian output, MIPS:            MIPS Opts.
* ln directive:                          Ln.
* lo pseudo-op, V850:                    V850 Opcodes.
* local common symbols:                  Lcomm.
* local labels, retaining in output:     L.
* local symbol names:                    Symbol Names.
* location counter:                      Dot.
* location counter, advancing:           Org.
* logical file name:                     File.
* logical line number:                   Line.
* logical line numbers:                  Comments.
* long directive:                        Long.
* long directive, i386:                  i386-Float.
* lp register, V850:                     V850-Regs.
* lval:                                  Z8000 Directives.
* M680x0 addressing modes:               M68K-Syntax.
* M680x0 architecture options:           M68K-Opts.
* M680x0 branch improvement:             M68K-Branch.
* M680x0 directives:                     M68K-Directives.
* M680x0 floating point:                 M68K-Float.
* M680x0 immediate character:            M68K-Chars.
* M680x0 line comment character:         M68K-Chars.
* M680x0 opcodes:                        M68K-opcodes.
* M680x0 options:                        M68K-Opts.
* M680x0 pseudo-opcodes:                 M68K-Branch.
* M680x0 size modifiers:                 M68K-Syntax.
* M680x0 support:                        M68K-Dependent.
* M680x0 syntax:                         M68K-Syntax.
* machine dependencies:                  Machine Dependencies.
* machine directives, AMD 29K:           AMD29K Directives.
* machine directives, ARC:               ARC-Directives.
* machine directives, ARM:               ARM Directives.
* machine directives, H8/300 (none):     H8/300 Directives.
* machine directives, H8/500 (none):     H8/500 Directives.
* machine directives, i960:              Directives-i960.
* machine directives, SH:                SH Directives.
* machine directives, SPARC:             Sparc-Directives.
* machine directives, V850:              V850 Directives.
* machine directives, VAX:               VAX-directives.
* machine independent directives:        Pseudo Ops.
* machine instructions (not covered):    Manual.
* machine-independent syntax:            Syntax.
* macro directive:                       Macro.
* macros:                                Macro.
* Macros, AMD 29K:                       AMD29K-Macros.
* macros, count executed:                Macro.
* make rules:                            MD.
* manual, structure and purpose:         Manual.
* memory references, i386:               i386-Memory.
* merging text and data sections:        R.
* messages from assembler:               Errors.
* minus, permitted arguments:            Infix Ops.
* MIPS architecture options:             MIPS Opts.
* MIPS big-endian output:                MIPS Opts.
* MIPS debugging directives:             MIPS Stabs.
* MIPS ECOFF sections:                   MIPS Object.
* MIPS endianness:                       Overview.
* MIPS ISA:                              Overview.
* MIPS ISA override:                     MIPS ISA.
* MIPS little-endian output:             MIPS Opts.
* MIPS option stack:                     MIPS option stack.
* MIPS processor:                        MIPS-Dependent.
* MIT:                                   M68K-Syntax.
* MMX, i386:                             i386-SIMD.
* mnemonic suffixes, i386:               i386-Syntax.
* mnemonics for opcodes, VAX:            VAX-opcodes.
* mnemonics, D10V:                       D10V-Opcodes.
* mnemonics, D30V:                       D30V-Opcodes.
* mnemonics, H8/300:                     H8/300 Opcodes.
* mnemonics, H8/500:                     H8/500 Opcodes.
* mnemonics, SH:                         SH Opcodes.
* mnemonics, Z8000:                      Z8000 Opcodes.
* Motorola syntax for the 680x0:         M68K-Moto-Syntax.
* MRI compatibility mode:                M.
* mri directive:                         MRI.
* MRI mode, temporarily:                 MRI.
* mul instruction, i386:                 i386-Notes.
* name:                                  Z8000 Directives.
* named section:                         Section.
* named sections:                        Ld Sections.
* names, symbol:                         Symbol Names.
* naming object file:                    o.
* new page, in listings:                 Eject.
* newline (\n):                          Strings.
* newline, required at file end:         Statements.
* nolist directive:                      Nolist.
* NOP pseudo op, ARM:                    ARM Opcodes.
* null-terminated strings:               Asciz.
* number constants:                      Numbers.
* number of macros executed:             Macro.
* numbered subsections:                  Sub-Sections.
* numbers, 16-bit:                       hword.
* numeric values:                        Expressions.
* nword directive, SPARC:                Sparc-Directives.
* object file:                           Object.
* object file format:                    Object Formats.
* object file name:                      o.
* object file, after errors:             Z.
* obsolescent directives:                Deprecated.
* octa directive:                        Octa.
* octal character code (\DDD):           Strings.
* octal integers:                        Integers.
* offset directive, V850:                V850 Directives.
* opcode mnemonics, VAX:                 VAX-opcodes.
* opcode summary, D10V:                  D10V-Opcodes.
* opcode summary, D30V:                  D30V-Opcodes.
* opcode summary, H8/300:                H8/300 Opcodes.
* opcode summary, H8/500:                H8/500 Opcodes.
* opcode summary, SH:                    SH Opcodes.
* opcode summary, Z8000:                 Z8000 Opcodes.
* opcodes for AMD 29K:                   AMD29K Opcodes.
* opcodes for ARM:                       ARM Opcodes.
* opcodes for V850:                      V850 Opcodes.
* opcodes, i960:                         Opcodes for i960.
* opcodes, M680x0:                       M68K-opcodes.
* operand delimiters, i386:              i386-Syntax.
* operand notation, VAX:                 VAX-operands.
* operands in expressions:               Arguments.
* operator precedence:                   Infix Ops.
* operators, in expressions:             Operators.
* operators, permitted arguments:        Infix Ops.
* optimization, D10V:                    Overview.
* optimization, D30V:                    Overview.
* option summary:                        Overview.
* options for AMD29K (none):             AMD29K Options.
* options for ARC:                       ARC-Opts.
* options for ARM (none):                ARM Options.
* options for i386 (none):               i386-Options.
* options for SPARC:                     Sparc-Opts.
* options for V850 (none):               V850 Options.
* options for VAX/VMS:                   VAX-Opts.
* options, all versions of assembler:    Invoking.
* options, command line:                 Command Line.
* options, D10V:                         D10V-Opts.
* options, D30V:                         D30V-Opts.
* options, H8/300 (none):                H8/300 Options.
* options, H8/500 (none):                H8/500 Options.
* options, i960:                         Options-i960.
* options, M680x0:                       M68K-Opts.
* options, PJ:                           PJ Options.
* options, SH (none):                    SH Options.
* options, Z8000:                        Z8000 Options.
* org directive:                         Org.
* other attribute, of a.out symbol:      Symbol Other.
* output file:                           Object.
* p2align directive:                     P2align.
* p2alignl directive:                    P2align.
* p2alignw directive:                    P2align.
* padding the location counter:          Align.
* padding the location counter given a power of two: P2align.
* padding the location counter given number of bytes: Balign.
* page, in listings:                     Eject.
* paper size, for listings:              Psize.
* paths for .include:                    I.
* patterns, writing in memory:           Fill.
* PIC code generation for ARM:           ARM Options.
* PJ endianness:                         Overview.
* PJ options:                            PJ Options.
* PJ support:                            PJ-Dependent.
* plus, permitted arguments:             Infix Ops.
* precedence of operators:               Infix Ops.
* precision, floating point:             Flonums.
* prefix operators:                      Prefix Ops.
* prefixes, i386:                        i386-Prefixes.
* preprocessing:                         Preprocessing.
* preprocessing, turning on and off:     Preprocessing.
* primary attributes, COFF symbols:      COFF Symbols.
* print directive:                       Print.
* proc directive, SPARC:                 Sparc-Directives.
* protected directive:                   Visibility.
* protected registers, AMD 29K:          AMD29K-Regs.
* pseudo-opcodes, M680x0:                M68K-Branch.
* pseudo-ops for branch, VAX:            VAX-branch.
* pseudo-ops, machine independent:       Pseudo Ops.
* psize directive:                       Psize.
* psw register, V850:                    V850-Regs.
* purgem directive:                      Purgem.
* purpose of GNU assembler:              GNU Assembler.
* quad directive:                        Quad.
* quad directive, i386:                  i386-Float.
* real-mode code, i386:                  i386-16bit.
* register directive, SPARC:             Sparc-Directives.
* register names, AMD 29K:               AMD29K-Regs.
* register names, ARM:                   ARM-Regs.
* register names, H8/300:                H8/300-Regs.
* register names, V850:                  V850-Regs.
* register names, VAX:                   VAX-operands.
* register operands, i386:               i386-Syntax.
* registers, D10V:                       D10V-Regs.
* registers, D30V:                       D30V-Regs.
* registers, H8/500:                     H8/500-Regs.
* registers, i386:                       i386-Regs.
* registers, SH:                         SH-Regs.
* registers, Z8000:                      Z8000-Regs.
* relocation:                            Sections.
* relocation example:                    Ld Sections.
* repeat prefixes, i386:                 i386-Prefixes.
* reporting bugs in assembler:           Reporting Bugs.
* rept directive:                        Rept.
* req directive, ARM:                    ARM Directives.
* reserve directive, SPARC:              Sparc-Directives.
* return instructions, i386:             i386-Syntax.
* rsect:                                 Z8000 Directives.
* sbttl directive:                       Sbttl.
* scl directive:                         Scl.
* sdaoff pseudo-op, V850:                V850 Opcodes.
* search path for .include:              I.
* sect directive, AMD 29K:               AMD29K Directives.
* section directive:                     Section.
* section directive, V850:               V850 Directives.
* section override prefixes, i386:       i386-Prefixes.
* section-relative addressing:           Secs Background.
* sections:                              Sections.
* sections in messages, internal:        As Sections.
* sections, i386:                        i386-Syntax.
* sections, named:                       Ld Sections.
* seg directive, SPARC:                  Sparc-Directives.
* segm:                                  Z8000 Directives.
* set directive:                         Set.
* SH addressing modes:                   SH-Addressing.
* SH floating point (IEEE):              SH Floating Point.
* SH line comment character:             SH-Chars.
* SH line separator:                     SH-Chars.
* SH machine directives:                 SH Directives.
* SH opcode summary:                     SH Opcodes.
* SH options (none):                     SH Options.
* SH registers:                          SH-Regs.
* SH support:                            SH-Dependent.
* short directive:                       Short.
* SIMD, i386:                            i386-SIMD.
* single character constant:             Chars.
* single directive:                      Single.
* single directive, i386:                i386-Float.
* sixteen bit integers:                  hword.
* sixteen byte integer:                  Octa.
* size directive:                        Size.
* size modifiers, D10V:                  D10V-Size.
* size modifiers, D30V:                  D30V-Size.
* size modifiers, M680x0:                M68K-Syntax.
* size prefixes, i386:                   i386-Prefixes.
* size suffixes, H8/300:                 H8/300 Opcodes.
* sizes operands, i386:                  i386-Syntax.
* skip directive:                        Skip.
* skip directive, M680x0:                M68K-Directives.
* skip directive, SPARC:                 Sparc-Directives.
* sleb128 directive:                     Sleb128.
* small objects, MIPS ECOFF:             MIPS Object.
* SOM symbol attributes:                 SOM Symbols.
* source program:                        Input Files.
* source, destination operands; i386:    i386-Syntax.
* sp register, V850:                     V850-Regs.
* space directive:                       Space.
* space used, maximum for assembly:      statistics.
* SPARC architectures:                   Sparc-Opts.
* SPARC data alignment:                  Sparc-Aligned-Data.
* SPARC floating point (IEEE):           Sparc-Float.
* SPARC machine directives:              Sparc-Directives.
* SPARC options:                         Sparc-Opts.
* SPARC support:                         Sparc-Dependent.
* special characters, M680x0:            M68K-Chars.
* special purpose registers, AMD 29K:    AMD29K-Regs.
* stabd directive:                       Stab.
* stabn directive:                       Stab.
* stabs directive:                       Stab.
* stabX directives:                      Stab.
* standard assembler sections:           Secs Background.
* standard input, as input file:         Command Line.
* statement separator character:         Statements.
* statement separator, ARM:              ARM-Chars.
* statement separator, H8/300:           H8/300-Chars.
* statement separator, H8/500:           H8/500-Chars.
* statement separator, SH:               SH-Chars.
* statement separator, Z8000:            Z8000-Chars.
* statements, structure of:              Statements.
* statistics, about assembly:            statistics.
* stopping the assembly:                 Abort.
* string constants:                      Strings.
* string directive:                      String.
* string directive on HPPA:              HPPA Directives.
* string literals:                       Ascii.
* string, copying to object file:        String.
* struct directive:                      Struct.
* structure debugging, COFF:             Tag.
* sub-instruction ordering, D10V:        D10V-Chars.
* sub-instruction ordering, D30V:        D30V-Chars.
* sub-instructions, D10V:                D10V-Subs.
* sub-instructions, D30V:                D30V-Subs.
* subexpressions:                        Arguments.
* subtitles for listings:                Sbttl.
* subtraction, permitted arguments:      Infix Ops.
* summary of options:                    Overview.
* support:                               HPPA-Dependent.
* supporting files, including:           Include.
* suppressing warnings:                  W.
* sval:                                  Z8000 Directives.
* symbol attributes:                     Symbol Attributes.
* symbol attributes, a.out:              a.out Symbols.
* symbol attributes, COFF:               COFF Symbols.
* symbol attributes, SOM:                SOM Symbols.
* symbol descriptor, COFF:               Desc.
* symbol names:                          Symbol Names.
* symbol names, $ in <1>:                SH-Chars.
* symbol names, $ in <2>:                H8/500-Chars.
* symbol names, $ in <3>:                D30V-Chars.
* symbol names, $ in:                    D10V-Chars.
* symbol names, local:                   Symbol Names.
* symbol names, temporary:               Symbol Names.
* symbol storage class (COFF):           Scl.
* symbol type:                           Symbol Type.
* symbol type, COFF:                     Type.
* symbol value:                          Symbol Value.
* symbol value, setting:                 Set.
* symbol values, assigning:              Setting Symbols.
* symbol versioning:                     Symver.
* symbol visibility:                     Visibility.
* symbol, common:                        Comm.
* symbol, making visible to linker:      Global.
* symbolic debuggers, information for:   Stab.
* symbols:                               Symbols.
* symbols with uppercase, VAX/VMS:       VAX-Opts.
* symbols, assigning values to:          Equ.
* symbols, local common:                 Lcomm.
* symver directive:                      Symver.
* syntax compatibility, i386:            i386-Syntax.
* syntax, D10V:                          D10V-Syntax.
* syntax, D30V:                          D30V-Syntax.
* syntax, M680x0:                        M68K-Syntax.
* syntax, machine-independent:           Syntax.
* sysproc directive, i960:               Directives-i960.
* tab (\t):                              Strings.
* tag directive:                         Tag.
* tdaoff pseudo-op, V850:                V850 Opcodes.
* temporary symbol names:                Symbol Names.
* text and data sections, joining:       R.
* text directive:                        Text.
* text section:                          Ld Sections.
* tfloat directive, i386:                i386-Float.
* thumb directive, ARM:                  ARM Directives.
* Thumb support:                         ARM-Dependent.
* thumb_func directive, ARM:             ARM Directives.
* thumb_set directive, ARM:              ARM Directives.
* time, total for assembly:              statistics.
* title directive:                       Title.
* tp register, V850:                     V850-Regs.
* trusted compiler:                      f.
* turning preprocessing on and off:      Preprocessing.
* type directive:                        Type.
* type of a symbol:                      Symbol Type.
* ualong directive, SH:                  SH Directives.
* uaword directive, SH:                  SH Directives.
* uleb128 directive:                     Uleb128.
* undefined section:                     Ld Sections.
* unsegm:                                Z8000 Directives.
* use directive, AMD 29K:                AMD29K Directives.
* V850 command line options:             V850 Options.
* V850 floating point (IEEE):            V850 Floating Point.
* V850 line comment character:           V850-Chars.
* V850 machine directives:               V850 Directives.
* V850 opcodes:                          V850 Opcodes.
* V850 options (none):                   V850 Options.
* V850 register names:                   V850-Regs.
* V850 support:                          V850-Dependent.
* val directive:                         Val.
* value attribute, COFF:                 Val.
* value of a symbol:                     Symbol Value.
* VAX bitfields not supported:           VAX-no.
* VAX branch improvement:                VAX-branch.
* VAX command-line options ignored:      VAX-Opts.
* VAX displacement sizing character:     VAX-operands.
* VAX floating point:                    VAX-float.
* VAX immediate character:               VAX-operands.
* VAX indirect character:                VAX-operands.
* VAX machine directives:                VAX-directives.
* VAX opcode mnemonics:                  VAX-opcodes.
* VAX operand notation:                  VAX-operands.
* VAX register names:                    VAX-operands.
* VAX support:                           Vax-Dependent.
* Vax-11 C compatibility:                VAX-Opts.
* VAX/VMS options:                       VAX-Opts.
* version of assembler:                  v.
* versions of symbols:                   Symver.
* VMS (VAX) options:                     VAX-Opts.
* warning for altered difference tables: K.
* warning messages:                      Errors.
* warnings, causing error:               W.
* warnings, suppressing:                 W.
* warnings, switching on:                W.
* whitespace:                            Whitespace.
* whitespace, removed by preprocessor:   Preprocessing.
* wide floating point directives, VAX:   VAX-directives.
* word directive:                        Word.
* word directive, H8/300:                H8/300 Directives.
* word directive, H8/500:                H8/500 Directives.
* word directive, i386:                  i386-Float.
* word directive, SPARC:                 Sparc-Directives.
* writing patterns in memory:            Fill.
* wval:                                  Z8000 Directives.
* xword directive, SPARC:                Sparc-Directives.
* Z800 addressing modes:                 Z8000-Addressing.
* Z8000 directives:                      Z8000 Directives.
* Z8000 line comment character:          Z8000-Chars.
* Z8000 line separator:                  Z8000-Chars.
* Z8000 opcode summary:                  Z8000 Opcodes.
* Z8000 options:                         Z8000 Options.
* Z8000 registers:                       Z8000-Regs.
* Z8000 support:                         Z8000-Dependent.
* zdaoff pseudo-op, V850:                V850 Opcodes.
* zero register, V850:                   V850-Regs.
* zero-terminated strings:               Asciz.


@


1.1.2.2
log
@Update generated files.
@
text
@a91 2
* -mapcs-float command line option, ARM: ARM Options.
* -mapcs-reentrant command line option, ARM: ARM Options.
a98 1
* -moabi command line option, ARM:       ARM Options.
a162 1
* align directive, ARM:                  ARM Directives.
@


