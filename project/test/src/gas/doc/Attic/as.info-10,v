head	1.1;
access;
symbols
	binutils-2_14:1.1.6.1
	binutils-2_14-branch:1.1.0.6
	binutils-2_13_2_1:1.1.4.2
	binutils-2_13_2:1.1.4.2
	binutils-2_13_1:1.1.4.1
	binutils-2_13:1.1.4.1
	binutils-2_13-branch:1.1.0.4
	binutils-2_12_1:1.1.2.2
	binutils-2_12:1.1.2.1
	binutils-2_12-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2002.03.08.17.01.21;	author drow;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.08.17.01.21;	author drow;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.05.11.20.00.52;	author drow;	state Exp;
branches;
next	;

1.1.4.1
date	2002.08.05.20.43.47;	author drow;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.12.20.21.33.25;	author drow;	state Exp;
branches;
next	;

1.1.6.1
date	2003.04.27.20.36.10;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file as.info-10 was initially added on branch binutils-2_12-branch.
@
text
@@


1.1.6.1
log
@Add generated files on 2.14 branch.
@
text
@a0 1397
This is as.info, produced by makeinfo version 4.3 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: VAX-branch,  Next: VAX-operands,  Prev: VAX-opcodes,  Up: Vax-Dependent

VAX Branch Improvement
----------------------

   Certain pseudo opcodes are permitted.  They are for branch
instructions.  They expand to the shortest branch instruction that
reaches the target.  Generally these mnemonics are made by substituting
`j' for `b' at the start of a DEC mnemonic.  This feature is included
both for compatibility and to help compilers.  If you do not need this
feature, avoid these opcodes.  Here are the mnemonics, and the code
they can expand into.

`jbsb'
     `Jsb' is already an instruction mnemonic, so we chose `jbsb'.
    (byte displacement)
          `bsbb ...'

    (word displacement)
          `bsbw ...'

    (long displacement)
          `jsb ...'

`jbr'
`jr'
     Unconditional branch.
    (byte displacement)
          `brb ...'

    (word displacement)
          `brw ...'

    (long displacement)
          `jmp ...'

`jCOND'
     COND may be any one of the conditional branches `neq', `nequ',
     `eql', `eqlu', `gtr', `geq', `lss', `gtru', `lequ', `vc', `vs',
     `gequ', `cc', `lssu', `cs'.  COND may also be one of the bit tests
     `bs', `bc', `bss', `bcs', `bsc', `bcc', `bssi', `bcci', `lbs',
     `lbc'.  NOTCOND is the opposite condition to COND.
    (byte displacement)
          `bCOND ...'

    (word displacement)
          `bNOTCOND foo ; brw ... ; foo:'

    (long displacement)
          `bNOTCOND foo ; jmp ... ; foo:'

`jacbX'
     X may be one of `b d f g h l w'.
    (word displacement)
          `OPCODE ...'

    (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp ... ;
               bar:

`jaobYYY'
     YYY may be one of `lss leq'.

`jsobZZZ'
     ZZZ may be one of `geq gtr'.
    (byte displacement)
          `OPCODE ...'

    (word displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: brw DESTINATION ;
               bar:

    (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp DESTINATION ;
               bar:

`aobleq'
`aoblss'
`sobgeq'
`sobgtr'

    (byte displacement)
          `OPCODE ...'

    (word displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: brw DESTINATION ;
               bar:

    (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp DESTINATION ;
               bar:


File: as.info,  Node: VAX-operands,  Next: VAX-no,  Prev: VAX-branch,  Up: Vax-Dependent

VAX Operands
------------

   The immediate character is `$' for Unix compatibility, not `#' as
DEC writes it.

   The indirect character is `*' for Unix compatibility, not `@@' as DEC
writes it.

   The displacement sizing character is ``' (an accent grave) for Unix
compatibility, not `^' as DEC writes it.  The letter preceding ``' may
have either case.  `G' is not understood, but all other letters (`b i l
s w') are understood.

   Register names understood are `r0 r1 r2 ... r15 ap fp sp pc'.  Upper
and lower case letters are equivalent.

   For instance
     tstb *w`$4(r5)

   Any expression is permitted in an operand.  Operands are comma
separated.


File: as.info,  Node: VAX-no,  Prev: VAX-operands,  Up: Vax-Dependent

Not Supported on VAX
--------------------

   Vax bit fields can not be assembled with `as'.  Someone can add the
required code if they really need it.


File: as.info,  Node: V850-Dependent,  Next: Xtensa-Dependent,  Prev: TIC54X-Dependent,  Up: Machine Dependencies

v850 Dependent Features
=======================

* Menu:

* V850 Options::              Options
* V850 Syntax::               Syntax
* V850 Floating Point::       Floating Point
* V850 Directives::           V850 Machine Directives
* V850 Opcodes::              Opcodes


File: as.info,  Node: V850 Options,  Next: V850 Syntax,  Up: V850-Dependent

Options
-------

   `as' supports the following additional command-line options for the
V850 processor family:

`-wsigned_overflow'
     Causes warnings to be produced when signed immediate values
     overflow the space available for then within their opcodes.  By
     default this option is disabled as it is possible to receive
     spurious warnings due to using exact bit patterns as immediate
     constants.

`-wunsigned_overflow'
     Causes warnings to be produced when unsigned immediate values
     overflow the space available for then within their opcodes.  By
     default this option is disabled as it is possible to receive
     spurious warnings due to using exact bit patterns as immediate
     constants.

`-mv850'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

`-mv850e'
     Specifies that the assembled code should be marked as being
     targeted at the V850E processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

`-mv850any'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor but support instructions that are
     specific to the extended variants of the process.  This allows the
     production of binaries that contain target specific code, but
     which are also intended to be used in a generic fashion.  For
     example libgcc.a contains generic routines used by the code
     produced by GCC for all versions of the v850 architecture,
     together with support routines only used by the V850E architecture.

`-mrelax'
     Enables relaxation.  This allows the .longcall and .longjump pseudo
     ops to be used in the assembler source code.  These ops label
     sections of code which are either a long function call or a long
     branch.  The assembler will then flag these sections of code and
     the linker will attempt to relax them.


File: as.info,  Node: V850 Syntax,  Next: V850 Floating Point,  Prev: V850 Options,  Up: V850-Dependent

Syntax
------

* Menu:

* V850-Chars::                Special Characters
* V850-Regs::                 Register Names


File: as.info,  Node: V850-Chars,  Next: V850-Regs,  Up: V850 Syntax

Special Characters
..................

   `#' is the line comment character.


File: as.info,  Node: V850-Regs,  Prev: V850-Chars,  Up: V850 Syntax

Register Names
..............

   `as' supports the following names for registers:
`general register 0'
     r0, zero

`general register 1'
     r1

`general register 2'
     r2, hp

`general register 3'
     r3, sp

`general register 4'
     r4, gp

`general register 5'
     r5, tp

`general register 6'
     r6

`general register 7'
     r7

`general register 8'
     r8

`general register 9'
     r9

`general register 10'
     r10

`general register 11'
     r11

`general register 12'
     r12

`general register 13'
     r13

`general register 14'
     r14

`general register 15'
     r15

`general register 16'
     r16

`general register 17'
     r17

`general register 18'
     r18

`general register 19'
     r19

`general register 20'
     r20

`general register 21'
     r21

`general register 22'
     r22

`general register 23'
     r23

`general register 24'
     r24

`general register 25'
     r25

`general register 26'
     r26

`general register 27'
     r27

`general register 28'
     r28

`general register 29'
     r29

`general register 30'
     r30, ep

`general register 31'
     r31, lp

`system register 0'
     eipc

`system register 1'
     eipsw

`system register 2'
     fepc

`system register 3'
     fepsw

`system register 4'
     ecr

`system register 5'
     psw

`system register 16'
     ctpc

`system register 17'
     ctpsw

`system register 18'
     dbpc

`system register 19'
     dbpsw

`system register 20'
     ctbp


File: as.info,  Node: V850 Floating Point,  Next: V850 Directives,  Prev: V850 Syntax,  Up: V850-Dependent

Floating Point
--------------

   The V850 family uses IEEE floating-point numbers.


File: as.info,  Node: V850 Directives,  Next: V850 Opcodes,  Prev: V850 Floating Point,  Up: V850-Dependent

V850 Machine Directives
-----------------------

`.offset <EXPRESSION>'
     Moves the offset into the current section to the specified amount.

`.section "name", <type>'
     This is an extension to the standard .section directive.  It sets
     the current section to be <type> and creates an alias for this
     section called "name".

`.v850'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

`.v850e'
     Specifies that the assembled code should be marked as being
     targeted at the V850E processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.


File: as.info,  Node: V850 Opcodes,  Prev: V850 Directives,  Up: V850-Dependent

Opcodes
-------

   `as' implements all the standard V850 opcodes.

   `as' also implements the following pseudo ops:

`hi0()'
     Computes the higher 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     `mulhi hi0(here - there), r5, r6'

     computes the difference between the address of labels 'here' and
     'there', takes the upper 16 bits of this difference, shifts it
     down 16 bits and then mutliplies it by the lower 16 bits in
     register 5, putting the result into register 6.

`lo()'
     Computes the lower 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     `addi lo(here - there), r5, r6'

     computes the difference between the address of labels 'here' and
     'there', takes the lower 16 bits of this difference and adds it to
     register 5, putting the result into register 6.

`hi()'
     Computes the higher 16 bits of the given expression and then adds
     the value of the most significant bit of the lower 16 bits of the
     expression and stores the result into the immediate operand field
     of the given instruction.  For example the following code can be
     used to compute the address of the label 'here' and store it into
     register 6:

     `movhi hi(here), r0, r6'     `movea lo(here), r6, r6'

     The reason for this special behaviour is that movea performs a sign
     extension on its immediate operand.  So for example if the address
     of 'here' was 0xFFFFFFFF then without the special behaviour of the
     hi() pseudo-op the movhi instruction would put 0xFFFF0000 into r6,
     then the movea instruction would takes its immediate operand,
     0xFFFF, sign extend it to 32 bits, 0xFFFFFFFF, and then add it
     into r6 giving 0xFFFEFFFF which is wrong (the fifth nibble is E).
     With the hi() pseudo op adding in the top bit of the lo() pseudo
     op, the movhi instruction actually stores 0 into r6 (0xFFFF + 1 =
     0x0000), so that the movea instruction stores 0xFFFFFFFF into r6 -
     the right value.

`hilo()'
     Computes the 32 bit value of the given expression and stores it
     into the immediate operand field of the given instruction (which
     must be a mov instruction).  For example:

     `mov hilo(here), r6'

     computes the absolute address of label 'here' and puts the result
     into register 6.

`sdaoff()'
     Computes the offset of the named variable from the start of the
     Small Data Area (whoes address is held in register 4, the GP
     register) and stores the result as a 16 bit signed value in the
     immediate operand field of the given instruction.  For example:

     `ld.w sdaoff(_a_variable)[gp],r6'

     loads the contents of the location pointed to by the label
     '_a_variable' into register 6, provided that the label is located
     somewhere within +/- 32K of the address held in the GP register.
     [Note the linker assumes that the GP register contains a fixed
     address set to the address of the label called '__gp'.  This can
     either be set up automatically by the linker, or specifically set
     by using the `--defsym __gp=<value>' command line option].

`tdaoff()'
     Computes the offset of the named variable from the start of the
     Tiny Data Area (whoes address is held in register 30, the EP
     register) and stores the result as a 4,5, 7 or 8 bit unsigned
     value in the immediate operand field of the given instruction.
     For example:

     `sld.w tdaoff(_a_variable)[ep],r6'

     loads the contents of the location pointed to by the label
     '_a_variable' into register 6, provided that the label is located
     somewhere within +256 bytes of the address held in the EP
     register.  [Note the linker assumes that the EP register contains
     a fixed address set to the address of the label called '__ep'.
     This can either be set up automatically by the linker, or
     specifically set by using the `--defsym __ep=<value>' command line
     option].

`zdaoff()'
     Computes the offset of the named variable from address 0 and
     stores the result as a 16 bit signed value in the immediate
     operand field of the given instruction.  For example:

     `movea zdaoff(_a_variable),zero,r6'

     puts the address of the label '_a_variable' into register 6,
     assuming that the label is somewhere within the first 32K of
     memory.  (Strictly speaking it also possible to access the last
     32K of memory as well, as the offsets are signed).

`ctoff()'
     Computes the offset of the named variable from the start of the
     Call Table Area (whoes address is helg in system register 20, the
     CTBP register) and stores the result a 6 or 16 bit unsigned value
     in the immediate field of then given instruction or piece of data.
     For example:

     `callt ctoff(table_func1)'

     will put the call the function whoes address is held in the call
     table at the location labeled 'table_func1'.

`.longcall `name''
     Indicates that the following sequence of instructions is a long
     call to function `name'.  The linker will attempt to shorten this
     call sequence if `name' is within a 22bit offset of the call.  Only
     valid if the `-mrelax' command line switch has been enabled.

`.longjump `name''
     Indicates that the following sequence of instructions is a long
     jump to label `name'.  The linker will attempt to shorten this code
     sequence if `name' is within a 22bit offset of the jump.  Only
     valid if the `-mrelax' command line switch has been enabled.

   For information on the V850 instruction set, see `V850 Family
32-/16-Bit single-Chip Microcontroller Architecture Manual' from NEC.
Ltd.


File: as.info,  Node: Xtensa-Dependent,  Next: Z8000-Dependent,  Prev: V850-Dependent,  Up: Machine Dependencies

Xtensa Dependent Features
=========================

   This chapter covers features of the GNU assembler that are specific
to the Xtensa architecture.  For details about the Xtensa instruction
set, please consult the `Xtensa Instruction Set Architecture (ISA)
Reference Manual'.

* Menu:

* Xtensa Options::              Command-line Options.
* Xtensa Syntax::               Assembler Syntax for Xtensa Processors.
* Xtensa Optimizations::        Assembler Optimizations.
* Xtensa Relaxation::           Other Automatic Transformations.
* Xtensa Directives::           Directives for Xtensa Processors.


File: as.info,  Node: Xtensa Options,  Next: Xtensa Syntax,  Up: Xtensa-Dependent

Command Line Options
--------------------

   The Xtensa version of the GNU assembler supports these special
options:

`--density | --no-density'
     Enable or disable use of the Xtensa code density option (16-bit
     instructions).  *Note Using Density Instructions: Density
     Instructions.  If the processor is configured with the density
     option, this is enabled by default; otherwise, it is always
     disabled.

`--relax | --no-relax'
     Enable or disable relaxation of instructions with immediate
     operands that are outside the legal range for the instructions.
     *Note Xtensa Relaxation: Xtensa Relaxation.  The default is
     `--relax' and this default should almost always be used.  If
     relaxation is disabled with `--no-relax', instruction operands
     that are out of range will cause errors.  Note: In the current
     implementation, these options also control whether assembler
     optimizations are performed, making these options equivalent to
     `--generics' and `--no-generics'.

`--generics | --no-generics'
     Enable or disable all assembler transformations of Xtensa
     instructions, including both relaxation and optimization.  The
     default is `--generics'; `--no-generics' should only be used in
     the rare cases when the instructions must be exactly as specified
     in the assembly source.  As with `--no-relax', using
     `--no-generics' causes out of range instruction operands to be
     errors.

`--text-section-literals | --no-text-section-literals'
     Control the treatment of literal pools.  The default is
     `--no-text-section-literals', which places literals in a separate
     section in the output file.  This allows the literal pool to be
     placed in a data RAM/ROM, and it also allows the linker to combine
     literal pools from separate object files to remove redundant
     literals and improve code size.  With `--text-section-literals',
     the literals are interspersed in the text section in order to keep
     them as close as possible to their references.  This may be
     necessary for large assembly files.

`--target-align | --no-target-align'
     Enable or disable automatic alignment to reduce branch penalties
     at some expense in code size.  *Note Automatic Instruction
     Alignment: Xtensa Automatic Alignment.  This optimization is
     enabled by default.  Note that the assembler will always align
     instructions like `LOOP' that have fixed alignment requirements.

`--longcalls | --no-longcalls'
     Enable or disable transformation of call instructions to allow
     calls across a greater range of addresses.  *Note Function Call
     Relaxation: Xtensa Call Relaxation.  This option should be used
     when call targets can potentially be out of range, but it degrades
     both code size and performance.  The default is `--no-longcalls'.


File: as.info,  Node: Xtensa Syntax,  Next: Xtensa Optimizations,  Prev: Xtensa Options,  Up: Xtensa-Dependent

Assembler Syntax
----------------

   Block comments are delimited by `/*' and `*/'.  End of line comments
may be introduced with either `#' or `//'.

   Instructions consist of a leading opcode or macro name followed by
whitespace and an optional comma-separated list of operands:

     OPCODE [OPERAND,...]

   Instructions must be separated by a newline or semicolon.

* Menu:

* Xtensa Opcodes::              Opcode Naming Conventions.
* Xtensa Registers::            Register Naming.


File: as.info,  Node: Xtensa Opcodes,  Next: Xtensa Registers,  Up: Xtensa Syntax

Opcode Names
............

   See the `Xtensa Instruction Set Architecture (ISA) Reference Manual'
for a complete list of opcodes and descriptions of their semantics.

   The Xtensa assembler distinguishes between "generic" and "specific"
opcodes.  Specific opcodes correspond directly to Xtensa machine
instructions.  Prefixing an opcode with an underscore character (`_')
identifies it as a specific opcode.  Opcodes without a leading
underscore are generic, which means the assembler is required to
preserve their semantics but may not translate them directly to the
specific opcodes with the same names.  Instead, the assembler may
optimize a generic opcode and select a better instruction to use in its
place (*note Xtensa Optimizations: Xtensa Optimizations.), or the
assembler may relax the instruction to handle operands that are out of
range for the corresponding specific opcode (*note Xtensa Relaxation:
Xtensa Relaxation.).

   Only use specific opcodes when it is essential to select the exact
machine instructions produced by the assembler.  Using specific opcodes
unnecessarily only makes the code less efficient, by disabling
assembler optimization, and less flexible, by disabling relaxation.

   Note that this special handling of underscore prefixes only applies
to Xtensa opcodes, not to either built-in macros or user-defined macros.
When an underscore prefix is used with a macro (e.g., `_NOP'), it
refers to a different macro.  The assembler generally provides built-in
macros both with and without the underscore prefix, where the underscore
versions behave as if the underscore carries through to the instructions
in the macros.  For example, `_NOP' expands to `_OR a1,a1,a1'.

   The underscore prefix only applies to individual instructions, not to
series of instructions.  For example, if a series of instructions have
underscore prefixes, the assembler will not transform the individual
instructions, but it may insert other instructions between them (e.g.,
to align a `LOOP' instruction).  To prevent the assembler from
modifying a series of instructions as a whole, use the `no-generics'
directive.  *Note generics: Generics Directive.


File: as.info,  Node: Xtensa Registers,  Prev: Xtensa Opcodes,  Up: Xtensa Syntax

Register Names
..............

   An initial `$' character is optional in all register names.  General
purpose registers are named `a0'...`a15'.  Additional registers may be
added by processor configuration options.  In particular, the MAC16
option adds a MR register bank.  Its registers are named `m0'...`m3'.

   As a special feature, `sp' is also supported as a synonym for `a1'.


File: as.info,  Node: Xtensa Optimizations,  Next: Xtensa Relaxation,  Prev: Xtensa Syntax,  Up: Xtensa-Dependent

Xtensa Optimizations
--------------------

   The optimizations currently supported by `as' are generation of
density instructions where appropriate and automatic branch target
alignment.

* Menu:

* Density Instructions::        Using Density Instructions.
* Xtensa Automatic Alignment::  Automatic Instruction Alignment.


File: as.info,  Node: Density Instructions,  Next: Xtensa Automatic Alignment,  Up: Xtensa Optimizations

Using Density Instructions
..........................

   The Xtensa instruction set has a code density option that provides
16-bit versions of some of the most commonly used opcodes.  Use of these
opcodes can significantly reduce code size.  When possible, the
assembler automatically translates generic instructions from the core
Xtensa instruction set into equivalent instructions from the Xtensa code
density option.  This translation can be disabled by using specific
opcodes (*note Opcode Names: Xtensa Opcodes.), by using the
`--no-density' command-line option (*note Command Line Options: Xtensa
Options.), or by using the `no-density' directive (*note density:
Density Directive.).

   It is a good idea _not_ to use the density instuctions directly.
The assembler will automatically select dense instructions where
possible.  If you later need to avoid using the code density option, you
can disable it in the assembler without having to modify the code.


File: as.info,  Node: Xtensa Automatic Alignment,  Prev: Density Instructions,  Up: Xtensa Optimizations

Automatic Instruction Alignment
...............................

   The Xtensa assembler will automatically align certain instructions,
both to optimize performance and to satisfy architectural requirements.

   When the `--target-align' command-line option is enabled (*note
Command Line Options: Xtensa Options.), the assembler attempts to widen
density instructions preceding a branch target so that the target
instruction does not cross a 4-byte boundary.  Similarly, the assembler
also attempts to align each instruction following a call instruction.
If there are not enough preceding safe density instructions to align a
target, no widening will be performed.  This alignment has the
potential to reduce branch penalties at some expense in code size.  The
assembler will not attempt to align labels with the prefixes `.Ln' and
`.LM', since these labels are used for debugging information and are
not typically branch targets.

   The `LOOP' family of instructions must be aligned on either a 1 or 2
mod 4 byte boundary.  The assembler knows about this restriction and
inserts the minimal number of 2 or 3 byte no-op instructions to satisfy
it.  When no-op instructions are added, any label immediately preceding
the original loop will be moved in order to refer to the loop
instruction, not the newly generated no-op instruction.

   Similarly, the `ENTRY' instruction must be aligned on a 0 mod 4 byte
boundary.  The assembler satisfies this requirement by inserting zero
bytes when required.  In addition, labels immediately preceding the
`ENTRY' instruction will be moved to the newly aligned instruction
location.


File: as.info,  Node: Xtensa Relaxation,  Next: Xtensa Directives,  Prev: Xtensa Optimizations,  Up: Xtensa-Dependent

Xtensa Relaxation
-----------------

   When an instruction operand is outside the range allowed for that
particular instruction field, `as' can transform the code to use a
functionally-equivalent instruction or sequence of instructions.  This
process is known as "relaxation".  This is typically done for branch
instructions because the distance of the branch targets is not known
until assembly-time.  The Xtensa assembler offers branch relaxation and
also extends this concept to function calls, `MOVI' instructions and
other instructions with immediate fields.

* Menu:

* Xtensa Branch Relaxation::        Relaxation of Branches.
* Xtensa Call Relaxation::          Relaxation of Function Calls.
* Xtensa Immediate Relaxation::     Relaxation of other Immediate Fields.


File: as.info,  Node: Xtensa Branch Relaxation,  Next: Xtensa Call Relaxation,  Up: Xtensa Relaxation

Conditional Branch Relaxation
.............................

   When the target of a branch is too far away from the branch itself,
i.e., when the offset from the branch to the target is too large to fit
in the immediate field of the branch instruction, it may be necessary to
replace the branch with a branch around a jump.  For example,

         beqz    a2, L

   may result in:

         bnez.n  a2, M
         j L
     M:

   (The `BNEZ.N' instruction would be used in this example only if the
density option is available.  Otherwise, `BNEZ' would be used.)


File: as.info,  Node: Xtensa Call Relaxation,  Next: Xtensa Immediate Relaxation,  Prev: Xtensa Branch Relaxation,  Up: Xtensa Relaxation

Function Call Relaxation
........................

   Function calls may require relaxation because the Xtensa immediate
call instructions (`CALL0', `CALL4', `CALL8' and `CALL12') provide a
PC-relative offset of only 512 Kbytes in either direction.  For larger
programs, it may be necessary to use indirect calls (`CALLX0',
`CALLX4', `CALLX8' and `CALLX12') where the target address is specified
in a register.  The Xtensa assembler can automatically relax immediate
call instructions into indirect call instructions.  This relaxation is
done by loading the address of the called function into the callee's
return address register and then using a `CALLX' instruction.  So, for
example:

         call8 func

   might be relaxed to:

         .literal .L1, func
         l32r    a8, .L1
         callx8  a8

   Because the addresses of targets of function calls are not generally
known until link-time, the assembler must assume the worst and relax all
the calls to functions in other source files, not just those that really
will be out of range.  The linker can recognize calls that were
unnecessarily relaxed, but it can only partially remove the overhead
introduced by the assembler.

   Call relaxation has a negative effect on both code size and
performance, so this relaxation is disabled by default.  If a program
is too large and some of the calls are out of range, function call
relaxation can be enabled using the `--longcalls' command-line option
or the `longcalls' directive (*note longcalls: Longcalls Directive.).


File: as.info,  Node: Xtensa Immediate Relaxation,  Prev: Xtensa Call Relaxation,  Up: Xtensa Relaxation

Other Immediate Field Relaxation
................................

   The `MOVI' machine instruction can only materialize values in the
range from -2048 to 2047.  Values outside this range are best
materalized with `L32R' instructions.  Thus:

         movi a0, 100000

   is assembled into the following machine code:

         .literal .L1, 100000
         l32r a0, .L1

   The `L8UI' machine instruction can only be used with immediate
offsets in the range from 0 to 255. The `L16SI' and `L16UI' machine
instructions can only be used with offsets from 0 to 510.  The `L32I'
machine instruction can only be used with offsets from 0 to 1020.  A
load offset outside these ranges can be materalized with an `L32R'
instruction if the destination register of the load is different than
the source address register.  For example:

         l32i a1, a0, 2040

   is translated to:

         .literal .L1, 2040
         l32r a1, .L1
         addi a1, a0, a1
         l32i a1, a1, 0

If the load destination and source address register are the same, an
out-of-range offset causes an error.

   The Xtensa `ADDI' instruction only allows immediate operands in the
range from -128 to 127.  There are a number of alternate instruction
sequences for the generic `ADDI' operation.  First, if the immediate is
0, the `ADDI' will be turned into a `MOV.N' instruction (or the
equivalent `OR' instruction if the code density option is not
available).  If the `ADDI' immediate is outside of the range -128 to
127, but inside the range -32896 to 32639, an `ADDMI' instruction or
`ADDMI'/`ADDI' sequence will be used.  Finally, if the immediate is
outside of this range and a free register is available, an `L32R'/`ADD'
sequence will be used with a literal allocated from the literal pool.

   For example:

         addi    a5, a6, 0
         addi    a5, a6, 512
         addi    a5, a6, 513
         addi    a5, a6, 50000

   is assembled into the following:

         .literal .L1, 50000
         mov.n   a5, a6
         addmi   a5, a6, 0x200
         addmi   a5, a6, 0x200
         addi    a5, a5, 1
         l32r    a5, .L1
         add     a5, a6, a5


File: as.info,  Node: Xtensa Directives,  Prev: Xtensa Relaxation,  Up: Xtensa-Dependent

Directives
----------

   The Xtensa assember supports a region-based directive syntax:

         .begin DIRECTIVE [OPTIONS]
         ...
         .end DIRECTIVE

   All the Xtensa-specific directives that apply to a region of code use
this syntax.

   The directive applies to code between the `.begin' and the `.end'.
The state of the option after the `.end' reverts to what it was before
the `.begin'.  A nested `.begin'/`.end' region can further change the
state of the directive without having to be aware of its outer state.
For example, consider:

         .begin no-density
     L:  add a0, a1, a2
         .begin density
     M:  add a0, a1, a2
         .end density
     N:  add a0, a1, a2
         .end no-density

   The generic `ADD' opcodes at `L' and `N' in the outer `no-density'
region both result in `ADD' machine instructions, but the assembler
selects an `ADD.N' instruction for the generic `ADD' at `M' in the
inner `density' region.

   The advantage of this style is that it works well inside macros
which can preserve the context of their callers.

   When command-line options and assembler directives are used at the
same time and conflict, the one that overrides a default behavior takes
precedence over one that is the same as the default.  For example, if
the code density option is available, the default is to select density
instructions whenever possible.  So, if the above is assembled with the
`--no-density' flag, which overrides the default, all the generic `ADD'
instructions result in `ADD' machine instructions.  If assembled with
the `--density' flag, which is already the default, the `no-density'
directive takes precedence and only one of the generic `ADD'
instructions is optimized to be a `ADD.N' machine instruction.  An
underscore prefix identifying a specific opcode always takes precedence
over directives and command-line flags.

   The following directives are available:

* Menu:

* Density Directive::          Disable Use of Density Instructions.
* Relax Directive::            Disable Assembler Relaxation.
* Longcalls Directive::        Use Indirect Calls for Greater Range.
* Generics Directive::         Disable All Assembler Transformations.
* Literal Directive::          Intermix Literals with Instructions.
* Literal Position Directive:: Specify Inline Literal Pool Locations.
* Literal Prefix Directive::   Specify Literal Section Name Prefix.
* Freeregs Directive::         List Registers Available for Assembler Use.
* Frame Directive::            Describe a stack frame.


File: as.info,  Node: Density Directive,  Next: Relax Directive,  Up: Xtensa Directives

density
.......

   The `density' and `no-density' directives enable or disable
optimization of generic instructions into density instructions within
the region.  *Note Using Density Instructions: Density Instructions.

         .begin [no-]density
         .end [no-]density

   This optimization is enabled by default unless the Xtensa
configuration does not support the code density option or the
`--no-density' command-line option was specified.


File: as.info,  Node: Relax Directive,  Next: Longcalls Directive,  Prev: Density Directive,  Up: Xtensa Directives

relax
.....

   The `relax' directive enables or disables relaxation within the
region.  *Note Xtensa Relaxation: Xtensa Relaxation.  Note: In the
current implementation, these directives also control whether assembler
optimizations are performed, making them equivalent to the `generics'
and `no-generics' directives.

         .begin [no-]relax
         .end [no-]relax

   Relaxation is enabled by default unless the `--no-relax'
command-line option was specified.


File: as.info,  Node: Longcalls Directive,  Next: Generics Directive,  Prev: Relax Directive,  Up: Xtensa Directives

longcalls
.........

   The `longcalls' directive enables or disables function call
relaxation.  *Note Function Call Relaxation: Xtensa Call Relaxation.

         .begin [no-]longcalls
         .end [no-]longcalls

   Call relaxation is disabled by default unless the `--longcalls'
command-line option is specified.


File: as.info,  Node: Generics Directive,  Next: Literal Directive,  Prev: Longcalls Directive,  Up: Xtensa Directives

generics
........

   This directive enables or disables all assembler transformation,
including relaxation (*note Xtensa Relaxation: Xtensa Relaxation.) and
optimization (*note Xtensa Optimizations: Xtensa Optimizations.).

         .begin [no-]generics
         .end [no-]generics

   Disabling generics is roughly equivalent to adding an underscore
prefix to every opcode within the region, so that every opcode is
treated as a specific opcode.  *Note Opcode Names: Xtensa Opcodes.  In
the current implementation of `as', built-in macros are also disabled
within a `no-generics' region.


File: as.info,  Node: Literal Directive,  Next: Literal Position Directive,  Prev: Generics Directive,  Up: Xtensa Directives

literal
.......

   The `.literal' directive is used to define literal pool data, i.e.,
read-only 32-bit data accessed via `L32R' instructions.

         .literal LABEL, VALUE[, VALUE...]

   This directive is similar to the standard `.word' directive, except
that the actual location of the literal data is determined by the
assembler and linker, not by the position of the `.literal' directive.
Using this directive gives the assembler freedom to locate the literal
data in the most appropriate place and possibly to combine identical
literals.  For example, the code:

         entry sp, 40
         .literal .L1, sym
         l32r    a4, .L1

   can be used to load a pointer to the symbol `sym' into register
`a4'.  The value of `sym' will not be placed between the `ENTRY' and
`L32R' instructions; instead, the assembler puts the data in a literal
pool.

   By default literal pools are placed in a separate section; however,
when using the `--text-section-literals' option (*note Command Line
Options: Xtensa Options.), the literal pools are placed in the current
section.  These text section literal pools are created automatically
before `ENTRY' instructions and manually after `.literal_position'
directives (*note literal_position: Literal Position Directive.).  If
there are no preceding `ENTRY' instructions or `.literal_position'
directives, the assembler will print a warning and place the literal
pool at the beginning of the current section.  In such cases, explicit
`.literal_position' directives should be used to place the literal
pools.


File: as.info,  Node: Literal Position Directive,  Next: Literal Prefix Directive,  Prev: Literal Directive,  Up: Xtensa Directives

literal_position
................

   When using `--text-section-literals' to place literals inline in the
section being assembled, the `.literal_position' directive can be used
to mark a potential location for a literal pool.

         .literal_position

   The `.literal_position' directive is ignored when the
`--text-section-literals' option is not used.

   The assembler will automatically place text section literal pools
before `ENTRY' instructions, so the `.literal_position' directive is
only needed to specify some other location for a literal pool.  You may
need to add an explicit jump instruction to skip over an inline literal
pool.

   For example, an interrupt vector does not begin with an `ENTRY'
instruction so the assembler will be unable to automatically find a good
place to put a literal pool.  Moreover, the code for the interrupt
vector must be at a specific starting address, so the literal pool
cannot come before the start of the code.  The literal pool for the
vector must be explicitly positioned in the middle of the vector (before
any uses of the literals, of course).  The `.literal_position'
directive can be used to do this.  In the following code, the literal
for `M' will automatically be aligned correctly and is placed after the
unconditional jump.

         .global M
     code_start:
         j continue
         .literal_position
         .align 4
     continue:
         movi    a4, M


File: as.info,  Node: Literal Prefix Directive,  Next: Freeregs Directive,  Prev: Literal Position Directive,  Up: Xtensa Directives

literal_prefix
..............

   The `literal_prefix' directive allows you to specify different
sections to hold literals from different portions of an assembly file.
With this directive, a single assembly file can be used to generate code
into multiple sections, including literals generated by the assembler.

         .begin literal_prefix [NAME]
         .end literal_prefix

   For the code inside the delimited region, the assembler puts
literals in the section `NAME.literal'. If this section does not yet
exist, the assembler creates it.  The NAME parameter is optional. If
NAME is not specified, the literal prefix is set to the "default" for
the file.  This default is usually `.literal' but can be changed with
the `--rename-section' command-line argument.


File: as.info,  Node: Freeregs Directive,  Next: Frame Directive,  Prev: Literal Prefix Directive,  Up: Xtensa Directives

freeregs
........

   This directive tells the assembler that the given registers are
unused in the region.

         .begin freeregs RI[,RI...]
         .end freeregs

   This allows the assembler to use these registers for relaxations or
optimizations.  (They are actually only for relaxations at present, but
the possibility of optimizations exists in the future.)

   Nested `freeregs' directives can be used to add additional registers
to the list of those available to the assembler.  For example:

         .begin freeregs a3, a4
         .begin freeregs a5

   has the effect of declaring `a3', `a4', and `a5' all free.


File: as.info,  Node: Frame Directive,  Prev: Freeregs Directive,  Up: Xtensa Directives

frame
.....

   This directive tells the assembler to emit information to allow the
debugger to locate a function's stack frame.  The syntax is:

         .frame REG, SIZE

   where REG is the register used to hold the frame pointer (usually
the same as the stack pointer) and SIZE is the size in bytes of the
stack frame.  The `.frame' directive is typically placed immediately
after the `ENTRY' instruction for a function.

   In almost all circumstances, this information just duplicates the
information given in the function's `ENTRY' instruction; however, there
are two cases where this is not true:

  1. The size of the stack frame is too big to fit in the immediate
     field of the `ENTRY' instruction.

  2. The frame pointer is different than the stack pointer, as with
     functions that call `alloca'.


File: as.info,  Node: Reporting Bugs,  Next: Acknowledgements,  Prev: Machine Dependencies,  Up: Top

Reporting Bugs
**************

   Your bug reports play an essential role in making `as' reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of `as' work
better.  Bug reports are your contribution to the maintenance of `as'.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs


File: as.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs

Have You Found a Bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the assembler gets a fatal signal, for any input whatever, that
     is a `as' bug.  Reliable assemblers never crash.

   * If `as' produces an error message for valid input, that is a bug.

   * If `as' does not produce an error message for invalid input, that
     is a bug.  However, you should note that your idea of "invalid
     input" might be our idea of "an extension" or "support for
     traditional practice".

   * If you are an experienced user of assemblers, your suggestions for
     improvement of `as' are welcome in any case.


File: as.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

How to Report Bugs
==================

   A number of companies and individuals offer support for GNU
products.  If you obtained `as' from a support organization, we
recommend you contact that organization first.

   You can find contact information for many support companies and
individuals in the file `etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for `as'
to `bug-binutils@@gnu.org'.

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug
is a stray memory reference which happens to fetch from the location
where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the assembler into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   To enable us to fix the bug, you should include all these things:

   * The version of `as'.  `as' announces it if you start it with the
     `--version' argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of `as'.

   * Any patches you may have applied to the `as' source.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile `as'--e.g.
     "`gcc-2.7'".

   * The command arguments you gave the assembler to assemble your
     example and observe the bug.  To guarantee you will not omit
     something important, list them all.  A copy of the Makefile (or
     the output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file that will reproduce the bug.  If the bug is
     observed when the assembler is invoked via a compiler, send the
     assembler source, not the high level language source.  Most
     compilers will produce the assembler source when run with the `-S'
     option.  If you are using `gcc', use the options `-v
     --save-temps'; this will save the assembler source in a file with
     an extension of `.s', and also show you exactly how `as' is being
     run.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that `as' gets a fatal signal, then we
     will certainly notice it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.  You might as well
     not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of `as' is out of synch, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and ours would not.  If you told
     us to expect a crash, then when ours fails to crash, we would know
     that the bug was not happening for us.  If you had not told us to
     expect a crash, then we would not be able to draw any conclusion
     from our observations.

   * If you wish to suggest changes to the `as' source, send us context
     diffs, as generated by `diff' with the `-u', `-c', or `-p' option.
     Always send diffs from the old file to the new file.  If you even
     discuss something in the `as' source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_
     of the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as `as' it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify
     that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.

@


1.1.4.1
log
@Add generated files.
@
text
@a0 369
This is as.info, produced by makeinfo version 4.2 from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Acknowledgements,  Up: Top

GNU Free Documentation License
******************************

   GNU Free Documentation License

   Version 1.1, March 2000

   Copyright (C) 2000  Free Software Foundation, Inc.    59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA

   Everyone is permitted to copy and distribute verbatim copies  of
this license document, but changing it is not allowed.

   0. PREAMBLE

   The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get credit
for their work, while not being considered responsible for
modifications made by others.

   This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft license
designed for free software.

   We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals; it
can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

   1. APPLICABILITY AND DEFINITIONS

   This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

   A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

   A "Secondary Section" is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding them.

   The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

   The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

   A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the general
public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input to
text formatters.  A copy made in an otherwise Transparent file format
whose markup has been designed to thwart or discourage subsequent
modification by readers is not Transparent.  A copy that is not
"Transparent" is called "Opaque".

   Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML or
XML using a publicly available DTD, and standard-conforming simple HTML
designed for human modification.  Opaque formats include PostScript,
PDF, proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated
HTML produced by some word processors for output purposes only.

   The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

   2. VERBATIM COPYING

   You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

   You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

   3. COPYING IN QUANTITY

   If you publish printed copies of the Document numbering more than
100, and the Document's license notice requires Cover Texts, you must
enclose the copies in covers that carry, clearly and legibly, all these
Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts
on the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present the
full title with all words of the title equally prominent and visible.
You may add other material on the covers in addition.  Copying with
changes limited to the covers, as long as they preserve the title of
the Document and satisfy these conditions, can be treated as verbatim
copying in other respects.

   If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

   If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

   It is requested, but not required, that you contact the authors of
the Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.

   4. MODIFICATIONS

   You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release the
Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy of
it.  In addition, you must do these things in the Modified Version:

   A. Use in the Title Page (and on the covers, if any) a title distinct
  from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.  B. List on
the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).  C.
State on the Title page the name of the publisher of the    Modified
Version, as the publisher.  D. Preserve all the copyright notices of
the Document.  E. Add an appropriate copyright notice for your
modifications    adjacent to the other copyright notices.  F. Include,
immediately after the copyright notices, a license notice    giving the
public permission to use the Modified Version under the    terms of
this License, in the form shown in the Addendum below.  G. Preserve in
that license notice the full lists of Invariant Sections    and
required Cover Texts given in the Document's license notice.  H.
Include an unaltered copy of this License.  I. Preserve the section
entitled "History", and its title, and add to    it an item stating at
least the title, year, new authors, and    publisher of the Modified
Version as given on the Title Page.  If    there is no section entitled
"History" in the Document, create one    stating the title, year,
authors, and publisher of the Document as    given on its Title Page,
then add an item describing the Modified    Version as stated in the
previous sentence.  J. Preserve the network location, if any, given in
the Document for    public access to a Transparent copy of the
Document, and likewise    the network locations given in the Document
for previous versions    it was based on.  These may be placed in the
"History" section.     You may omit a network location for a work that
was published at    least four years before the Document itself, or if
the original    publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgements
and/or dedications given therein.  L. Preserve all the Invariant
Sections of the Document,    unaltered in their text and in their
titles.  Section numbers    or the equivalent are not considered part
of the section titles.  M. Delete any section entitled "Endorsements".
Such a section    may not be included in the Modified Version.  N. Do
not retitle any existing section as "Endorsements"    or to conflict in
title with any Invariant Section.

   If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

   You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties-for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

   You may add a passage of up to five words as a Front-Cover Text, and
a passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or through
arrangements made by) any one entity.  If the Document already includes
a cover text for the same cover, previously added by you or by
arrangement made by the same entity you are acting on behalf of, you
may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

   The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

   5. COMBINING DOCUMENTS

   You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

   The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of Invariant
Sections in the license notice of the combined work.

   In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."

   6. COLLECTIONS OF DOCUMENTS

   You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy that
is included in the collection, provided that you follow the rules of
this License for verbatim copying of each of the documents in all other
respects.

   You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.

   7. AGGREGATION WITH INDEPENDENT WORKS

   A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version of
the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they are
not themselves derivative works of the Document.

   If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.  Otherwise
they must appear on covers around the whole aggregate.

   8. TRANSLATION

   Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the original
English version of this License.  In case of a disagreement between the
translation and the original English version of this License, the
original English version will prevail.

   9. TERMINATION

   You may not copy, modify, sublicense, or distribute the Document
except as expressly provided for under this License.  Any other attempt
to copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such parties
remain in full compliance.

   10. FUTURE REVISIONS OF THIS LICENSE

   The Free Software Foundation may publish new, revised versions of
the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

   Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.

   ADDENDUM: How to use this License for your documents

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.1
         or any later version published by the Free Software Foundation;
         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

@


1.1.4.2
log
@Commit generated files for 2.13.2.
@
text
@d1 1
a1 1
This is as.info, produced by makeinfo version 4.3 from as.texinfo.
@


1.1.2.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 1454
This is as.info, produced by makeinfo version 4.0f from as.texinfo.

START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY

   This file documents the GNU Assembler "as".

   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: as.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
*****

* Menu:

* #:                                     Comments.
* #APP:                                  Preprocessing.
* #NO_APP:                               Preprocessing.
* $ in symbol names <1>:                 SH64-Chars.
* $ in symbol names <2>:                 SH-Chars.
* $ in symbol names <3>:                 H8/500-Chars.
* $ in symbol names <4>:                 D30V-Chars.
* $ in symbol names:                     D10V-Chars.
* -+ option, VAX/VMS:                    VAX-Opts.
* --:                                    Command Line.
* --32 option, i386:                     i386-Options.
* --32 option, x86-64:                   i386-Options.
* --64 option, i386:                     i386-Options.
* --64 option, x86-64:                   i386-Options.
* --base-size-default-16:                M68K-Opts.
* --base-size-default-32:                M68K-Opts.
* --bitwise-or option, M680x0:           M68K-Opts.
* --disp-size-default-16:                M68K-Opts.
* --disp-size-default-32:                M68K-Opts.
* --emulation=crisaout command line option, CRIS: CRIS-Opts.
* --emulation=criself command line option, CRIS: CRIS-Opts.
* --enforce-aligned-data:                Sparc-Aligned-Data.
* --fatal-warnings:                      W.
* --fixed-special-register-names command line option, MMIX: MMIX-Opts.
* --force-long-branchs:                  M68HC11-Opts.
* --generate-example:                    M68HC11-Opts.
* --globalize-symbols command line option, MMIX: MMIX-Opts.
* --gnu-syntax command line option, MMIX: MMIX-Opts.
* --linker-allocated-gregs command line option, MMIX: MMIX-Opts.
* --listing-cont-lines:                  listing.
* --listing-lhs-width:                   listing.
* --listing-lhs-width2:                  listing.
* --listing-rhs-width:                   listing.
* --MD:                                  MD.
* --no-expand command line option, MMIX: MMIX-Opts.
* --no-merge-gregs command line option, MMIX: MMIX-Opts.
* --no-predefined-syms command line option, MMIX: MMIX-Opts.
* --no-underscore command line option, CRIS: CRIS-Opts.
* --no-warn:                             W.
* --pcrel:                               M68K-Opts.
* --pic command line option, CRIS:       CRIS-Opts.
* --print-insn-syntax:                   M68HC11-Opts.
* --print-opcodes:                       M68HC11-Opts.
* --register-prefix-optional option, M680x0: M68K-Opts.
* --relax command line option, MMIX:     MMIX-Opts.
* --short-branchs:                       M68HC11-Opts.
* --statistics:                          statistics.
* --strict-direct-mode:                  M68HC11-Opts.
* --traditional-format:                  traditional-format.
* --underscore command line option, CRIS: CRIS-Opts.
* --warn:                                W.
* -1 option, VAX/VMS:                    VAX-Opts.
* -32addr command line option, Alpha:    Alpha Options.
* -a:                                    a.
* -A options, i960:                      Options-i960.
* -ac:                                   a.
* -ad:                                   a.
* -ah:                                   a.
* -al:                                   a.
* -an:                                   a.
* -as:                                   a.
* -Asparclet:                            Sparc-Opts.
* -Asparclite:                           Sparc-Opts.
* -Av6:                                  Sparc-Opts.
* -Av8:                                  Sparc-Opts.
* -Av9:                                  Sparc-Opts.
* -Av9a:                                 Sparc-Opts.
* -b option, i960:                       Options-i960.
* -big:                                  SH Options.
* -construct-floats:                     MIPS Opts.
* -D:                                    D.
* -D, ignored on VAX:                    VAX-Opts.
* -d, VAX option:                        VAX-Opts.
* -dsp:                                  SH Options.
* -EB command line option, ARC:          ARC Options.
* -EB command line option, ARM:          ARM Options.
* -EB option (MIPS):                     MIPS Opts.
* -EL command line option, ARC:          ARC Options.
* -EL command line option, ARM:          ARM Options.
* -EL option (MIPS):                     MIPS Opts.
* -f:                                    f.
* -F command line option, Alpha:         Alpha Options.
* -G command line option, Alpha:         Alpha Options.
* -g command line option, Alpha:         Alpha Options.
* -G option (MIPS):                      MIPS Opts.
* -H option, VAX/VMS:                    VAX-Opts.
* -h option, VAX/VMS:                    VAX-Opts.
* -I PATH:                               I.
* -J, ignored on VAX:                    VAX-Opts.
* -K:                                    K.
* -k command line option, ARM:           ARM Options.
* -L:                                    L.
* -l option, M680x0:                     M68K-Opts.
* -little:                               SH Options.
* -M:                                    M.
* -m11/03:                               PDP-11-Options.
* -m11/04:                               PDP-11-Options.
* -m11/05:                               PDP-11-Options.
* -m11/10:                               PDP-11-Options.
* -m11/15:                               PDP-11-Options.
* -m11/20:                               PDP-11-Options.
* -m11/21:                               PDP-11-Options.
* -m11/23:                               PDP-11-Options.
* -m11/24:                               PDP-11-Options.
* -m11/34:                               PDP-11-Options.
* -m11/34a:                              PDP-11-Options.
* -m11/35:                               PDP-11-Options.
* -m11/40:                               PDP-11-Options.
* -m11/44:                               PDP-11-Options.
* -m11/45:                               PDP-11-Options.
* -m11/50:                               PDP-11-Options.
* -m11/53:                               PDP-11-Options.
* -m11/55:                               PDP-11-Options.
* -m11/60:                               PDP-11-Options.
* -m11/70:                               PDP-11-Options.
* -m11/73:                               PDP-11-Options.
* -m11/83:                               PDP-11-Options.
* -m11/84:                               PDP-11-Options.
* -m11/93:                               PDP-11-Options.
* -m11/94:                               PDP-11-Options.
* -m32r option, M32R:                    M32R-Opts.
* -m32rx option, M32RX:                  M32R-Opts.
* -m68000 and related options:           M68K-Opts.
* -m68hc11:                              M68HC11-Opts.
* -m68hc12:                              M68HC11-Opts.
* -mall:                                 PDP-11-Options.
* -mall-extensions:                      PDP-11-Options.
* -mapcs command line option, ARM:       ARM Options.
* -mapcs-float command line option, ARM: ARM Options.
* -mapcs-reentrant command line option, ARM: ARM Options.
* -marc[5|6|7|8] command line option, ARC: ARC Options.
* -march= command line option, ARM:      ARM Options.
* -matpcs command line option, ARM:      ARM Options.
* -mcis:                                 PDP-11-Options.
* -mCPU command line option, Alpha:      Alpha Options.
* -mcpu= command line option, ARM:       ARM Options.
* -mcsm:                                 PDP-11-Options.
* -mdebug command line option, Alpha:    Alpha Options.
* -meis:                                 PDP-11-Options.
* -mf11:                                 PDP-11-Options.
* -mfis:                                 PDP-11-Options.
* -mfp-11:                               PDP-11-Options.
* -mfpp:                                 PDP-11-Options.
* -mfpu:                                 PDP-11-Options.
* -mfpu= command line option, ARM:       ARM Options.
* -mj11:                                 PDP-11-Options.
* -mka11:                                PDP-11-Options.
* -mkb11:                                PDP-11-Options.
* -mkd11a:                               PDP-11-Options.
* -mkd11b:                               PDP-11-Options.
* -mkd11d:                               PDP-11-Options.
* -mkd11e:                               PDP-11-Options.
* -mkd11f:                               PDP-11-Options.
* -mkd11h:                               PDP-11-Options.
* -mkd11k:                               PDP-11-Options.
* -mkd11q:                               PDP-11-Options.
* -mkd11z:                               PDP-11-Options.
* -mkev11:                               PDP-11-Options.
* -mlimited-eis:                         PDP-11-Options.
* -mmfpt:                                PDP-11-Options.
* -mmicrocode:                           PDP-11-Options.
* -mmutiproc:                            PDP-11-Options.
* -mmxps:                                PDP-11-Options.
* -mno-cis:                              PDP-11-Options.
* -mno-csm:                              PDP-11-Options.
* -mno-eis:                              PDP-11-Options.
* -mno-extensions:                       PDP-11-Options.
* -mno-fis:                              PDP-11-Options.
* -mno-fp-11:                            PDP-11-Options.
* -mno-fpp:                              PDP-11-Options.
* -mno-fpu:                              PDP-11-Options.
* -mno-kev11:                            PDP-11-Options.
* -mno-limited-eis:                      PDP-11-Options.
* -mno-mfpt:                             PDP-11-Options.
* -mno-microcode:                        PDP-11-Options.
* -mno-mutiproc:                         PDP-11-Options.
* -mno-mxps:                             PDP-11-Options.
* -mno-pic:                              PDP-11-Options.
* -mno-spl:                              PDP-11-Options.
* -moabi command line option, ARM:       ARM Options.
* -mpic:                                 PDP-11-Options.
* -mspl:                                 PDP-11-Options.
* -mt11:                                 PDP-11-Options.
* -mthumb command line option, ARM:      ARM Options.
* -mthumb-interwork command line option, ARM: ARM Options.
* -mv850 command line option, V850:      V850 Options.
* -mv850any command line option, V850:   V850 Options.
* -mv850e command line option, V850:     V850 Options.
* -N command line option, CRIS:          CRIS-Opts.
* -no-construct-floats:                  MIPS Opts.
* -no-mdebug command line option, Alpha: Alpha Options.
* -no-relax option, i960:                Options-i960.
* -no-warn-explicit-parallel-conflicts option, M32RX: M32R-Opts.
* -nocpp ignored (MIPS):                 MIPS Opts.
* -o:                                    o.
* -R:                                    R.
* -relax:                                SH Options.
* -relax command line option, Alpha:     Alpha Options.
* -S, ignored on VAX:                    VAX-Opts.
* -small:                                SH Options.
* -t, ignored on VAX:                    VAX-Opts.
* -T, ignored on VAX:                    VAX-Opts.
* -v:                                    v.
* -V, redundant on VAX:                  VAX-Opts.
* -version:                              v.
* -W:                                    W.
* -warn-explicit-parallel-conflicts option, M32RX: M32R-Opts.
* -Wnp option, M32RX:                    M32R-Opts.
* -Wp option, M32RX:                     M32R-Opts.
* -wsigned_overflow command line option, V850: V850 Options.
* -wunsigned_overflow command line option, V850: V850 Options.
* -x command line option, MMIX:          MMIX-Opts.
* . (symbol):                            Dot.
* .hidden directive:                     Hidden.
* .insn:                                 MIPS insn.
* .internal directive:                   Internal.
* .ltorg directive, ARM:                 ARM Directives.
* .o:                                    Object.
* .param on HPPA:                        HPPA Directives.
* .pool directive, ARM:                  ARM Directives.
* .popsection directive:                 PopSection.
* .previous directive:                   Previous.
* .protected directive:                  Protected.
* .pushsection directive:                PushSection.
* .set autoextend:                       MIPS autoextend.
* .set mipsN:                            MIPS ISA.
* .set noautoextend:                     MIPS autoextend.
* .set pop:                              MIPS option stack.
* .set push:                             MIPS option stack.
* .subsection directive:                 SubSection.
* .v850 directive, V850:                 V850 Directives.
* .v850e directive, V850:                V850 Directives.
* .version:                              Version.
* .vtable_entry:                         VTableEntry.
* .vtable_inherit:                       VTableInherit.
* .weak:                                 Weak.
* 16-bit code, i386:                     i386-16bit.
* 29K support:                           AMD29K-Dependent.
* 2byte directive, ARC:                  ARC Directives.
* 3byte directive, ARC:                  ARC Directives.
* 3DNow!, i386:                          i386-SIMD.
* 3DNow!, x86-64:                        i386-SIMD.
* 4byte directive, ARC:                  ARC Directives.
* : (label):                             Statements.
* @@word modifier, D10V:                  D10V-Word.
* \" (doublequote character):            Strings.
* \\ (\ character):                      Strings.
* \b (backspace character):              Strings.
* \DDD (octal character code):           Strings.
* \f (formfeed character):               Strings.
* \n (newline character):                Strings.
* \r (carriage return character):        Strings.
* \t (tab):                              Strings.
* \XD... (hex character code):           Strings.
* a.out:                                 Object.
* a.out symbol attributes:               a.out Symbols.
* ABI options, SH64:                     SH64 Options.
* ABORT directive:                       ABORT.
* abort directive:                       Abort.
* absolute section:                      Ld Sections.
* addition, permitted arguments:         Infix Ops.
* addresses:                             Expressions.
* addresses, format of:                  Secs Background.
* addressing modes, D10V:                D10V-Addressing.
* addressing modes, D30V:                D30V-Addressing.
* addressing modes, H8/300:              H8/300-Addressing.
* addressing modes, H8/500:              H8/500-Addressing.
* addressing modes, M680x0:              M68K-Syntax.
* addressing modes, M68HC11:             M68HC11-Syntax.
* addressing modes, SH:                  SH-Addressing.
* addressing modes, SH64:                SH64-Addressing.
* addressing modes, Z8000:               Z8000-Addressing.
* ADR reg,<label> pseudo op, ARM:        ARM Opcodes.
* ADRL reg,<label> pseudo op, ARM:       ARM Opcodes.
* advancing location counter:            Org.
* align directive:                       Align.
* align directive, ARM:                  ARM Directives.
* align directive, M88K:                 M88K Directives.
* align directive, SPARC:                Sparc-Directives.
* Alpha floating point (IEEE):           Alpha Floating Point.
* Alpha line comment character:          Alpha-Chars.
* Alpha line separator:                  Alpha-Chars.
* Alpha notes:                           Alpha Notes.
* Alpha options:                         Alpha Options.
* Alpha registers:                       Alpha-Regs.
* Alpha relocations:                     Alpha-Relocs.
* Alpha support:                         Alpha-Dependent.
* Alpha Syntax:                          Alpha Options.
* Alpha-only directives:                 Alpha Directives.
* altered difference tables:             Word.
* alternate syntax for the 680x0:        M68K-Moto-Syntax.
* AMD 29K floating point (IEEE):         AMD29K Floating Point.
* AMD 29K identifiers:                   AMD29K-Chars.
* AMD 29K line comment character:        AMD29K-Chars.
* AMD 29K machine directives:            AMD29K Directives.
* AMD 29K macros:                        AMD29K-Macros.
* AMD 29K opcodes:                       AMD29K Opcodes.
* AMD 29K options (none):                AMD29K Options.
* AMD 29K protected registers:           AMD29K-Regs.
* AMD 29K register names:                AMD29K-Regs.
* AMD 29K special purpose registers:     AMD29K-Regs.
* AMD 29K support:                       AMD29K-Dependent.
* ARC floating point (IEEE):             ARC Floating Point.
* ARC machine directives:                ARC Directives.
* ARC opcodes:                           ARC Opcodes.
* ARC options (none):                    ARC Options.
* ARC register names:                    ARC-Regs.
* ARC special characters:                ARC-Chars.
* ARC support:                           ARC-Dependent.
* arc5 arc5, ARC:                        ARC Options.
* arc6 arc6, ARC:                        ARC Options.
* arc7 arc7, ARC:                        ARC Options.
* arc8 arc8, ARC:                        ARC Options.
* arch directive, i386:                  i386-Arch.
* arch directive, x86-64:                i386-Arch.
* architecture options, i960:            Options-i960.
* architecture options, M32R:            M32R-Opts.
* architecture options, M32RX:           M32R-Opts.
* architecture options, M680x0:          M68K-Opts.
* architectures, PowerPC:                PowerPC-Opts.
* architectures, SPARC:                  Sparc-Opts.
* arguments for addition:                Infix Ops.
* arguments for subtraction:             Infix Ops.
* arguments in expressions:              Arguments.
* arithmetic functions:                  Operators.
* arithmetic operands:                   Arguments.
* arm directive, ARM:                    ARM Directives.
* ARM floating point (IEEE):             ARM Floating Point.
* ARM identifiers:                       ARM-Chars.
* ARM immediate character:               ARM-Chars.
* ARM line comment character:            ARM-Chars.
* ARM line separator:                    ARM-Chars.
* ARM machine directives:                ARM Directives.
* ARM opcodes:                           ARM Opcodes.
* ARM options (none):                    ARM Options.
* ARM register names:                    ARM-Regs.
* ARM support:                           ARM-Dependent.
* ascii directive:                       Ascii.
* asciz directive:                       Asciz.
* assembler bugs, reporting:             Bug Reporting.
* assembler crash:                       Bug Criteria.
* assembler directive .dword, CRIS:      CRIS-Pseudos.
* assembler directive .syntax, CRIS:     CRIS-Pseudos.
* assembler directive BSPEC, MMIX:       MMIX-Pseudos.
* assembler directive BYTE, MMIX:        MMIX-Pseudos.
* assembler directive ESPEC, MMIX:       MMIX-Pseudos.
* assembler directive GREG, MMIX:        MMIX-Pseudos.
* assembler directive IS, MMIX:          MMIX-Pseudos.
* assembler directive LOC, MMIX:         MMIX-Pseudos.
* assembler directive LOCAL, MMIX:       MMIX-Pseudos.
* assembler directive OCTA, MMIX:        MMIX-Pseudos.
* assembler directive PREFIX, MMIX:      MMIX-Pseudos.
* assembler directive TETRA, MMIX:       MMIX-Pseudos.
* assembler directive WYDE, MMIX:        MMIX-Pseudos.
* assembler directives, CRIS:            CRIS-Pseudos.
* assembler directives, MMIX:            MMIX-Pseudos.
* assembler internal logic error:        As Sections.
* assembler version:                     v.
* assembler, and linker:                 Secs Background.
* assembly listings, enabling:           a.
* assigning values to symbols <1>:       Equ.
* assigning values to symbols:           Setting Symbols.
* atmp directive, i860:                  Directives-i860.
* att_syntax pseudo op, i386:            i386-Syntax.
* att_syntax pseudo op, x86-64:          i386-Syntax.
* attributes, symbol:                    Symbol Attributes.
* auxiliary attributes, COFF symbols:    COFF Symbols.
* auxiliary symbol information, COFF:    Dim.
* Av7:                                   Sparc-Opts.
* backslash (\\):                        Strings.
* backspace (\b):                        Strings.
* balign directive:                      Balign.
* balignl directive:                     Balign.
* balignw directive:                     Balign.
* big endian output, MIPS:               Overview.
* big endian output, PJ:                 Overview.
* big-endian output, MIPS:               MIPS Opts.
* bignums:                               Bignums.
* binary files, including:               Incbin.
* binary integers:                       Integers.
* bitfields, not supported on VAX:       VAX-no.
* block:                                 Z8000 Directives.
* block directive, AMD 29K:              AMD29K Directives.
* branch improvement, M680x0:            M68K-Branch.
* branch improvement, M68HC11:           M68HC11-Branch.
* branch improvement, VAX:               VAX-branch.
* branch recording, i960:                Options-i960.
* branch statistics table, i960:         Options-i960.
* BSD syntax:                            PDP-11-Syntax.
* bss directive, i960:                   Directives-i960.
* bss directive, M88K:                   M88K Directives.
* bss section <1>:                       bss.
* bss section:                           Ld Sections.
* bug criteria:                          Bug Criteria.
* bug reports:                           Bug Reporting.
* bugs in assembler:                     Reporting Bugs.
* bus lock prefixes, i386:               i386-Prefixes.
* bval:                                  Z8000 Directives.
* byte directive:                        Byte.
* call instructions, i386:               i386-Mnemonics.
* call instructions, x86-64:             i386-Mnemonics.
* callj, i960 pseudo-opcode:             callj-i960.
* carriage return (\r):                  Strings.
* character constants:                   Characters.
* character escape codes:                Strings.
* character, single:                     Chars.
* characters used in symbols:            Symbol Intro.
* code directive, ARM:                   ARM Directives.
* code16 directive, i386:                i386-16bit.
* code16gcc directive, i386:             i386-16bit.
* code32 directive, i386:                i386-16bit.
* code64 directive, i386:                i386-16bit.
* code64 directive, x86-64:              i386-16bit.
* COFF auxiliary symbol information:     Dim.
* COFF structure debugging:              Tag.
* COFF symbol attributes:                COFF Symbols.
* COFF symbol descriptor:                Desc.
* COFF symbol storage class:             Scl.
* COFF symbol type:                      Type.
* COFF symbols, debugging:               Def.
* COFF value attribute:                  Val.
* COMDAT:                                Linkonce.
* comm directive:                        Comm.
* command line conventions:              Command Line.
* command line options, V850:            V850 Options.
* command-line options ignored, VAX:     VAX-Opts.
* comments:                              Comments.
* comments, M680x0:                      M68K-Chars.
* comments, removed by preprocessor:     Preprocessing.
* common directive, SPARC:               Sparc-Directives.
* common sections:                       Linkonce.
* common variable storage:               bss.
* compare and jump expansions, i960:     Compare-and-branch-i960.
* compare/branch instructions, i960:     Compare-and-branch-i960.
* comparison expressions:                Infix Ops.
* conditional assembly:                  If.
* constant, single character:            Chars.
* constants:                             Constants.
* constants, bignum:                     Bignums.
* constants, character:                  Characters.
* constants, converted by preprocessor:  Preprocessing.
* constants, floating point:             Flonums.
* constants, integer:                    Integers.
* constants, number:                     Numbers.
* constants, string:                     Strings.
* conversion instructions, i386:         i386-Mnemonics.
* conversion instructions, x86-64:       i386-Mnemonics.
* coprocessor wait, i386:                i386-Prefixes.
* cputype directive, AMD 29K:            AMD29K Directives.
* crash of assembler:                    Bug Criteria.
* CRIS --emulation=crisaout command line option: CRIS-Opts.
* CRIS --emulation=criself command line option: CRIS-Opts.
* CRIS --no-underscore command line option: CRIS-Opts.
* CRIS --pic command line option:        CRIS-Opts.
* CRIS --underscore command line option: CRIS-Opts.
* CRIS -N command line option:           CRIS-Opts.
* CRIS assembler directive .dword:       CRIS-Pseudos.
* CRIS assembler directive .syntax:      CRIS-Pseudos.
* CRIS assembler directives:             CRIS-Pseudos.
* CRIS instruction expansion:            CRIS-Expand.
* CRIS line comment characters:          CRIS-Chars.
* CRIS options:                          CRIS-Opts.
* CRIS position-independent code:        CRIS-Opts.
* CRIS pseudo-op .dword:                 CRIS-Pseudos.
* CRIS pseudo-op .syntax:                CRIS-Pseudos.
* CRIS pseudo-ops:                       CRIS-Pseudos.
* CRIS register names:                   CRIS-Regs.
* CRIS support:                          CRIS-Dependent.
* CRIS symbols in position-independent code: CRIS-Pic.
* ctbp register, V850:                   V850-Regs.
* ctoff pseudo-op, V850:                 V850 Opcodes.
* ctpc register, V850:                   V850-Regs.
* ctpsw register, V850:                  V850-Regs.
* current address:                       Dot.
* current address, advancing:            Org.
* D10V @@word modifier:                   D10V-Word.
* D10V addressing modes:                 D10V-Addressing.
* D10V floating point:                   D10V-Float.
* D10V line comment character:           D10V-Chars.
* D10V opcode summary:                   D10V-Opcodes.
* D10V optimization:                     Overview.
* D10V options:                          D10V-Opts.
* D10V registers:                        D10V-Regs.
* D10V size modifiers:                   D10V-Size.
* D10V sub-instruction ordering:         D10V-Chars.
* D10V sub-instructions:                 D10V-Subs.
* D10V support:                          D10V-Dependent.
* D10V syntax:                           D10V-Syntax.
* D30V addressing modes:                 D30V-Addressing.
* D30V floating point:                   D30V-Float.
* D30V Guarded Execution:                D30V-Guarded.
* D30V line comment character:           D30V-Chars.
* D30V nops:                             Overview.
* D30V nops after 32-bit multiply:       Overview.
* D30V opcode summary:                   D30V-Opcodes.
* D30V optimization:                     Overview.
* D30V options:                          D30V-Opts.
* D30V registers:                        D30V-Regs.
* D30V size modifiers:                   D30V-Size.
* D30V sub-instruction ordering:         D30V-Chars.
* D30V sub-instructions:                 D30V-Subs.
* D30V support:                          D30V-Dependent.
* D30V syntax:                           D30V-Syntax.
* data alignment on SPARC:               Sparc-Aligned-Data.
* data and text sections, joining:       R.
* data directive:                        Data.
* data section:                          Ld Sections.
* data1 directive, M680x0:               M68K-Directives.
* data2 directive, M680x0:               M68K-Directives.
* datalabel, SH64:                       SH64-Addressing.
* dbpc register, V850:                   V850-Regs.
* dbpsw register, V850:                  V850-Regs.
* debuggers, and symbol order:           Symbols.
* debugging COFF symbols:                Def.
* DEC syntax:                            PDP-11-Syntax.
* decimal integers:                      Integers.
* def directive:                         Def.
* def directive, M88K:                   M88K Directives.
* dependency tracking:                   MD.
* deprecated directives:                 Deprecated.
* desc directive:                        Desc.
* descriptor, of a.out symbol:           Symbol Desc.
* dfloat directive, M88K:                M88K Directives.
* dfloat directive, VAX:                 VAX-directives.
* difference tables altered:             Word.
* difference tables, warning:            K.
* differences, mmixal:                   MMIX-mmixal.
* dim directive:                         Dim.
* directives and instructions:           Statements.
* directives, M680x0:                    M68K-Directives.
* directives, machine independent:       Pseudo Ops.
* directives, Z8000:                     Z8000 Directives.
* displacement sizing character, VAX:    VAX-operands.
* dollar local symbols:                  Symbol Names.
* dot (symbol):                          Dot.
* double directive:                      Double.
* double directive, i386:                i386-Float.
* double directive, M680x0:              M68K-Float.
* double directive, M68HC11:             M68HC11-Float.
* double directive, VAX:                 VAX-float.
* double directive, x86-64:              i386-Float.
* doublequote (\"):                      Strings.
* dual directive, i860:                  Directives-i860.
* ECOFF sections:                        MIPS Object.
* ecr register, V850:                    V850-Regs.
* eight-byte integer:                    Quad.
* eipc register, V850:                   V850-Regs.
* eipsw register, V850:                  V850-Regs.
* eject directive:                       Eject.
* ELF symbol type:                       Type.
* else directive:                        Else.
* elseif directive:                      Elseif.
* empty expressions:                     Empty Exprs.
* emulation:                             Overview.
* end directive:                         End.
* enddual directive, i860:               Directives-i860.
* endef directive:                       Endef.
* endfunc directive:                     Endfunc.
* endianness, MIPS:                      Overview.
* endianness, PJ:                        Overview.
* endif directive:                       Endif.
* endm directive:                        Macro.
* EOF, newline must precede:             Statements.
* ep register, V850:                     V850-Regs.
* equ directive:                         Equ.
* equiv directive:                       Equiv.
* err directive:                         Err.
* error messages:                        Errors.
* error on valid input:                  Bug Criteria.
* errors, caused by warnings:            W.
* errors, continuing after:              Z.
* ESA/390 floating point (IEEE):         ESA/390 Floating Point.
* ESA/390 support:                       ESA/390-Dependent.
* ESA/390 Syntax:                        ESA/390 Options.
* ESA/390-only directives:               ESA/390 Directives.
* escape codes, character:               Strings.
* even:                                  Z8000 Directives.
* even directive, M680x0:                M68K-Directives.
* exitm directive:                       Macro.
* expr (internal section):               As Sections.
* expression arguments:                  Arguments.
* expressions:                           Expressions.
* expressions, comparison:               Infix Ops.
* expressions, empty:                    Empty Exprs.
* expressions, integer:                  Integer Exprs.
* extAuxRegister directive, ARC:         ARC Directives.
* extCondCode directive, ARC:            ARC Directives.
* extCoreRegister directive, ARC:        ARC Directives.
* extend directive M680x0:               M68K-Float.
* extend directive M68HC11:              M68HC11-Float.
* extended directive, i960:              Directives-i960.
* extern directive:                      Extern.
* extInstruction directive, ARC:         ARC Directives.
* fail directive:                        Fail.
* faster processing (-f):                f.
* fatal signal:                          Bug Criteria.
* fepc register, V850:                   V850-Regs.
* fepsw register, V850:                  V850-Regs.
* ffloat directive, M88K:                M88K Directives.
* ffloat directive, VAX:                 VAX-directives.
* file directive:                        File.
* file directive, AMD 29K:               AMD29K Directives.
* file name, logical:                    File.
* files, including:                      Include.
* files, input:                          Input Files.
* fill directive:                        Fill.
* filling memory <1>:                    Space.
* filling memory:                        Skip.
* float directive:                       Float.
* float directive, i386:                 i386-Float.
* float directive, M680x0:               M68K-Float.
* float directive, M68HC11:              M68HC11-Float.
* float directive, VAX:                  VAX-float.
* float directive, x86-64:               i386-Float.
* floating point numbers:                Flonums.
* floating point numbers (double):       Double.
* floating point numbers (single) <1>:   Single.
* floating point numbers (single):       Float.
* floating point, Alpha (IEEE):          Alpha Floating Point.
* floating point, AMD 29K (IEEE):        AMD29K Floating Point.
* floating point, ARC (IEEE):            ARC Floating Point.
* floating point, ARM (IEEE):            ARM Floating Point.
* floating point, D10V:                  D10V-Float.
* floating point, D30V:                  D30V-Float.
* floating point, ESA/390 (IEEE):        ESA/390 Floating Point.
* floating point, H8/300 (IEEE):         H8/300 Floating Point.
* floating point, H8/500 (IEEE):         H8/500 Floating Point.
* floating point, HPPA (IEEE):           HPPA Floating Point.
* floating point, i386:                  i386-Float.
* floating point, i960 (IEEE):           Floating Point-i960.
* floating point, M680x0:                M68K-Float.
* floating point, M68HC11:               M68HC11-Float.
* floating point, SH (IEEE):             SH Floating Point.
* floating point, SPARC (IEEE):          Sparc-Float.
* floating point, V850 (IEEE):           V850 Floating Point.
* floating point, VAX:                   VAX-float.
* floating point, x86-64:                i386-Float.
* flonums:                               Flonums.
* force_thumb directive, ARM:            ARM Directives.
* format of error messages:              Errors.
* format of warning messages:            Errors.
* formfeed (\f):                         Strings.
* func directive:                        Func.
* functions, in expressions:             Operators.
* gbr960, i960 postprocessor:            Options-i960.
* gfloat directive, VAX:                 VAX-directives.
* global:                                Z8000 Directives.
* global directive:                      Global.
* gp register, MIPS:                     MIPS Object.
* gp register, V850:                     V850-Regs.
* grouping data:                         Sub-Sections.
* H8/300 addressing modes:               H8/300-Addressing.
* H8/300 floating point (IEEE):          H8/300 Floating Point.
* H8/300 line comment character:         H8/300-Chars.
* H8/300 line separator:                 H8/300-Chars.
* H8/300 machine directives (none):      H8/300 Directives.
* H8/300 opcode summary:                 H8/300 Opcodes.
* H8/300 options (none):                 H8/300 Options.
* H8/300 registers:                      H8/300-Regs.
* H8/300 size suffixes:                  H8/300 Opcodes.
* H8/300 support:                        H8/300-Dependent.
* H8/300H, assembling for:               H8/300 Directives.
* H8/500 addressing modes:               H8/500-Addressing.
* H8/500 floating point (IEEE):          H8/500 Floating Point.
* H8/500 line comment character:         H8/500-Chars.
* H8/500 line separator:                 H8/500-Chars.
* H8/500 machine directives (none):      H8/500 Directives.
* H8/500 opcode summary:                 H8/500 Opcodes.
* H8/500 options (none):                 H8/500 Options.
* H8/500 registers:                      H8/500-Regs.
* H8/500 support:                        H8/500-Dependent.
* half directive, ARC:                   ARC Directives.
* half directive, M88K:                  M88K Directives.
* half directive, SPARC:                 Sparc-Directives.
* hex character code (\XD...):           Strings.
* hexadecimal integers:                  Integers.
* hfloat directive, VAX:                 VAX-directives.
* hi pseudo-op, V850:                    V850 Opcodes.
* hi0 pseudo-op, V850:                   V850 Opcodes.
* hilo pseudo-op, V850:                  V850 Opcodes.
* HPPA directives not supported:         HPPA Directives.
* HPPA floating point (IEEE):            HPPA Floating Point.
* HPPA Syntax:                           HPPA Options.
* HPPA-only directives:                  HPPA Directives.
* hword directive:                       hword.
* i370 support:                          ESA/390-Dependent.
* i386 16-bit code:                      i386-16bit.
* i386 arch directive:                   i386-Arch.
* i386 att_syntax pseudo op:             i386-Syntax.
* i386 conversion instructions:          i386-Mnemonics.
* i386 floating point:                   i386-Float.
* i386 immediate operands:               i386-Syntax.
* i386 instruction naming:               i386-Mnemonics.
* i386 instruction prefixes:             i386-Prefixes.
* i386 intel_syntax pseudo op:           i386-Syntax.
* i386 jump optimization:                i386-Jumps.
* i386 jump, call, return:               i386-Syntax.
* i386 jump/call operands:               i386-Syntax.
* i386 memory references:                i386-Memory.
* i386 mul, imul instructions:           i386-Notes.
* i386 options:                          i386-Options.
* i386 register operands:                i386-Syntax.
* i386 registers:                        i386-Regs.
* i386 sections:                         i386-Syntax.
* i386 size suffixes:                    i386-Syntax.
* i386 source, destination operands:     i386-Syntax.
* i386 support:                          i386-Dependent.
* i386 syntax compatibility:             i386-Syntax.
* i80306 support:                        i386-Dependent.
* i860 machine directives:               Directives-i860.
* i860 opcodes:                          Opcodes for i860.
* i860 support:                          i860-Dependent.
* i960 architecture options:             Options-i960.
* i960 branch recording:                 Options-i960.
* i960 callj pseudo-opcode:              callj-i960.
* i960 compare and jump expansions:      Compare-and-branch-i960.
* i960 compare/branch instructions:      Compare-and-branch-i960.
* i960 floating point (IEEE):            Floating Point-i960.
* i960 machine directives:               Directives-i960.
* i960 opcodes:                          Opcodes for i960.
* i960 options:                          Options-i960.
* i960 support:                          i960-Dependent.
* ident directive:                       Ident.
* identifiers, AMD 29K:                  AMD29K-Chars.
* identifiers, ARM:                      ARM-Chars.
* if directive:                          If.
* ifc directive:                         If.
* ifdef directive:                       If.
* ifeq directive:                        If.
* ifeqs directive:                       If.
* ifge directive:                        If.
* ifgt directive:                        If.
* ifle directive:                        If.
* iflt directive:                        If.
* ifnc directive:                        If.
* ifndef directive:                      If.
* ifne directive:                        If.
* ifnes directive:                       If.
* ifnotdef directive:                    If.
* immediate character, ARM:              ARM-Chars.
* immediate character, M680x0:           M68K-Chars.
* immediate character, VAX:              VAX-operands.
* immediate operands, i386:              i386-Syntax.
* immediate operands, x86-64:            i386-Syntax.
* imul instruction, i386:                i386-Notes.
* imul instruction, x86-64:              i386-Notes.
* incbin directive:                      Incbin.
* include directive:                     Include.
* include directive search path:         I.
* indirect character, VAX:               VAX-operands.
* infix operators:                       Infix Ops.
* inhibiting interrupts, i386:           i386-Prefixes.
* input:                                 Input Files.
* input file linenumbers:                Input Files.
* instruction expansion, CRIS:           CRIS-Expand.
* instruction expansion, MMIX:           MMIX-Expand.
* instruction naming, i386:              i386-Mnemonics.
* instruction naming, x86-64:            i386-Mnemonics.
* instruction prefixes, i386:            i386-Prefixes.
* instruction set, M680x0:               M68K-opcodes.
* instruction set, M68HC11:              M68HC11-opcodes.
* instruction summary, D10V:             D10V-Opcodes.
* instruction summary, D30V:             D30V-Opcodes.
* instruction summary, H8/300:           H8/300 Opcodes.
* instruction summary, H8/500:           H8/500 Opcodes.
* instruction summary, SH:               SH Opcodes.
* instruction summary, SH64:             SH64 Opcodes.
* instruction summary, Z8000:            Z8000 Opcodes.
* instructions and directives:           Statements.
* int directive:                         Int.
* int directive, H8/300:                 H8/300 Directives.
* int directive, H8/500:                 H8/500 Directives.
* int directive, i386:                   i386-Float.
* int directive, x86-64:                 i386-Float.
* integer expressions:                   Integer Exprs.
* integer, 16-byte:                      Octa.
* integer, 8-byte:                       Quad.
* integers:                              Integers.
* integers, 16-bit:                      hword.
* integers, 32-bit:                      Int.
* integers, binary:                      Integers.
* integers, decimal:                     Integers.
* integers, hexadecimal:                 Integers.
* integers, octal:                       Integers.
* integers, one byte:                    Byte.
* intel_syntax pseudo op, i386:          i386-Syntax.
* intel_syntax pseudo op, x86-64:        i386-Syntax.
* internal assembler sections:           As Sections.
* invalid input:                         Bug Criteria.
* invocation summary:                    Overview.
* irp directive:                         Irp.
* irpc directive:                        Irpc.
* ISA options, SH64:                     SH64 Options.
* joining text and data sections:        R.
* jump instructions, i386:               i386-Mnemonics.
* jump instructions, x86-64:             i386-Mnemonics.
* jump optimization, i386:               i386-Jumps.
* jump optimization, x86-64:             i386-Jumps.
* jump/call operands, i386:              i386-Syntax.
* jump/call operands, x86-64:            i386-Syntax.
* label (:):                             Statements.
* labels:                                Labels.
* lcomm directive:                       Lcomm.
* ld:                                    Object.
* ldouble directive M680x0:              M68K-Float.
* ldouble directive M68HC11:             M68HC11-Float.
* LDR reg,=<label> pseudo op, ARM:       ARM Opcodes.
* leafproc directive, i960:              Directives-i960.
* length of symbols:                     Symbol Intro.
* lflags directive (ignored):            Lflags.
* line comment character:                Comments.
* line comment character, Alpha:         Alpha-Chars.
* line comment character, AMD 29K:       AMD29K-Chars.
* line comment character, ARM:           ARM-Chars.
* line comment character, D10V:          D10V-Chars.
* line comment character, D30V:          D30V-Chars.
* line comment character, H8/300:        H8/300-Chars.
* line comment character, H8/500:        H8/500-Chars.
* line comment character, M680x0:        M68K-Chars.
* line comment character, SH:            SH-Chars.
* line comment character, SH64:          SH64-Chars.
* line comment character, V850:          V850-Chars.
* line comment character, Z8000:         Z8000-Chars.
* line comment characters, CRIS:         CRIS-Chars.
* line comment characters, MMIX:         MMIX-Chars.
* line directive:                        Line.
* line directive, AMD 29K:               AMD29K Directives.
* line numbers, in input files:          Input Files.
* line numbers, in warnings/errors:      Errors.
* line separator character:              Statements.
* line separator, Alpha:                 Alpha-Chars.
* line separator, ARM:                   ARM-Chars.
* line separator, H8/300:                H8/300-Chars.
* line separator, H8/500:                H8/500-Chars.
* line separator, SH:                    SH-Chars.
* line separator, SH64:                  SH64-Chars.
* line separator, Z8000:                 Z8000-Chars.
* lines starting with #:                 Comments.
* linker:                                Object.
* linker, and assembler:                 Secs Background.
* linkonce directive:                    Linkonce.
* list directive:                        List.
* listing control, turning off:          Nolist.
* listing control, turning on:           List.
* listing control: new page:             Eject.
* listing control: paper size:           Psize.
* listing control: subtitle:             Sbttl.
* listing control: title line:           Title.
* listings, enabling:                    a.
* little endian output, MIPS:            Overview.
* little endian output, PJ:              Overview.
* little-endian output, MIPS:            MIPS Opts.
* ln directive:                          Ln.
* lo pseudo-op, V850:                    V850 Opcodes.
* local common symbols:                  Lcomm.
* local labels, retaining in output:     L.
* local symbol names:                    Symbol Names.
* location counter:                      Dot.
* location counter, advancing:           Org.
* logical file name:                     File.
* logical line number:                   Line.
* logical line numbers:                  Comments.
* long directive:                        Long.
* long directive, ARC:                   ARC Directives.
* long directive, i386:                  i386-Float.
* long directive, x86-64:                i386-Float.
* lp register, V850:                     V850-Regs.
* lval:                                  Z8000 Directives.
* M32R architecture options:             M32R-Opts.
* M32R options:                          M32R-Opts.
* M32R support:                          M32R-Dependent.
* M32R warnings:                         M32R-Warnings.
* M680x0 addressing modes:               M68K-Syntax.
* M680x0 architecture options:           M68K-Opts.
* M680x0 branch improvement:             M68K-Branch.
* M680x0 directives:                     M68K-Directives.
* M680x0 floating point:                 M68K-Float.
* M680x0 immediate character:            M68K-Chars.
* M680x0 line comment character:         M68K-Chars.
* M680x0 opcodes:                        M68K-opcodes.
* M680x0 options:                        M68K-Opts.
* M680x0 pseudo-opcodes:                 M68K-Branch.
* M680x0 size modifiers:                 M68K-Syntax.
* M680x0 support:                        M68K-Dependent.
* M680x0 syntax:                         M68K-Syntax.
* M68HC11 addressing modes:              M68HC11-Syntax.
* M68HC11 and M68HC12 support:           M68HC11-Dependent.
* M68HC11 branch improvement:            M68HC11-Branch.
* M68HC11 floating point:                M68HC11-Float.
* M68HC11 opcodes:                       M68HC11-opcodes.
* M68HC11 options:                       M68HC11-Opts.
* M68HC11 pseudo-opcodes:                M68HC11-Branch.
* M68HC11 syntax:                        M68HC11-Syntax.
* M88K support:                          M88K-Dependent.
* machine dependencies:                  Machine Dependencies.
* machine directives, AMD 29K:           AMD29K Directives.
* machine directives, ARC:               ARC Directives.
* machine directives, ARM:               ARM Directives.
* machine directives, H8/300 (none):     H8/300 Directives.
* machine directives, H8/500 (none):     H8/500 Directives.
* machine directives, i860:              Directives-i860.
* machine directives, i960:              Directives-i960.
* machine directives, SH:                SH Directives.
* machine directives, SH64:              SH64 Directives.
* machine directives, SPARC:             Sparc-Directives.
* machine directives, V850:              V850 Directives.
* machine directives, VAX:               VAX-directives.
* machine independent directives:        Pseudo Ops.
* machine instructions (not covered):    Manual.
* machine-independent syntax:            Syntax.
* macro directive:                       Macro.
* macros:                                Macro.
* Macros, AMD 29K:                       AMD29K-Macros.
* macros, count executed:                Macro.
* make rules:                            MD.
* manual, structure and purpose:         Manual.
* Maximum number of continuation lines:  listing.
* memory references, i386:               i386-Memory.
* memory references, x86-64:             i386-Memory.
* merging text and data sections:        R.
* messages from assembler:               Errors.
* minus, permitted arguments:            Infix Ops.
* MIPS architecture options:             MIPS Opts.
* MIPS big-endian output:                MIPS Opts.
* MIPS debugging directives:             MIPS Stabs.
* MIPS ECOFF sections:                   MIPS Object.
* MIPS endianness:                       Overview.
* MIPS ISA:                              Overview.
* MIPS ISA override:                     MIPS ISA.
* MIPS little-endian output:             MIPS Opts.
* MIPS option stack:                     MIPS option stack.
* MIPS processor:                        MIPS-Dependent.
* MIT:                                   M68K-Syntax.
* MMIX assembler directive BSPEC:        MMIX-Pseudos.
* MMIX assembler directive BYTE:         MMIX-Pseudos.
* MMIX assembler directive ESPEC:        MMIX-Pseudos.
* MMIX assembler directive GREG:         MMIX-Pseudos.
* MMIX assembler directive IS:           MMIX-Pseudos.
* MMIX assembler directive LOC:          MMIX-Pseudos.
* MMIX assembler directive LOCAL:        MMIX-Pseudos.
* MMIX assembler directive OCTA:         MMIX-Pseudos.
* MMIX assembler directive PREFIX:       MMIX-Pseudos.
* MMIX assembler directive TETRA:        MMIX-Pseudos.
* MMIX assembler directive WYDE:         MMIX-Pseudos.
* MMIX assembler directives:             MMIX-Pseudos.
* MMIX line comment characters:          MMIX-Chars.
* MMIX options:                          MMIX-Opts.
* MMIX pseudo-op BSPEC:                  MMIX-Pseudos.
* MMIX pseudo-op BYTE:                   MMIX-Pseudos.
* MMIX pseudo-op ESPEC:                  MMIX-Pseudos.
* MMIX pseudo-op GREG:                   MMIX-Pseudos.
* MMIX pseudo-op IS:                     MMIX-Pseudos.
* MMIX pseudo-op LOC:                    MMIX-Pseudos.
* MMIX pseudo-op LOCAL:                  MMIX-Pseudos.
* MMIX pseudo-op OCTA:                   MMIX-Pseudos.
* MMIX pseudo-op PREFIX:                 MMIX-Pseudos.
* MMIX pseudo-op TETRA:                  MMIX-Pseudos.
* MMIX pseudo-op WYDE:                   MMIX-Pseudos.
* MMIX pseudo-ops:                       MMIX-Pseudos.
* MMIX register names:                   MMIX-Regs.
* MMIX support:                          MMIX-Dependent.
* mmixal differences:                    MMIX-mmixal.
* MMX, i386:                             i386-SIMD.
* MMX, x86-64:                           i386-SIMD.
* mnemonic suffixes, i386:               i386-Syntax.
* mnemonic suffixes, x86-64:             i386-Syntax.
* mnemonics for opcodes, VAX:            VAX-opcodes.
* mnemonics, D10V:                       D10V-Opcodes.
* mnemonics, D30V:                       D30V-Opcodes.
* mnemonics, H8/300:                     H8/300 Opcodes.
* mnemonics, H8/500:                     H8/500 Opcodes.
* mnemonics, SH:                         SH Opcodes.
* mnemonics, SH64:                       SH64 Opcodes.
* mnemonics, Z8000:                      Z8000 Opcodes.
* Motorola syntax for the 680x0:         M68K-Moto-Syntax.
* MRI compatibility mode:                M.
* mri directive:                         MRI.
* MRI mode, temporarily:                 MRI.
* mul instruction, i386:                 i386-Notes.
* mul instruction, x86-64:               i386-Notes.
* name:                                  Z8000 Directives.
* named section:                         Section.
* named sections:                        Ld Sections.
* names, symbol:                         Symbol Names.
* naming object file:                    o.
* new page, in listings:                 Eject.
* newline (\n):                          Strings.
* newline, required at file end:         Statements.
* nolist directive:                      Nolist.
* NOP pseudo op, ARM:                    ARM Opcodes.
* notes for Alpha:                       Alpha Notes.
* null-terminated strings:               Asciz.
* number constants:                      Numbers.
* number of macros executed:             Macro.
* numbered subsections:                  Sub-Sections.
* numbers, 16-bit:                       hword.
* numeric values:                        Expressions.
* nword directive, SPARC:                Sparc-Directives.
* object file:                           Object.
* object file format:                    Object Formats.
* object file name:                      o.
* object file, after errors:             Z.
* obsolescent directives:                Deprecated.
* octa directive:                        Octa.
* octal character code (\DDD):           Strings.
* octal integers:                        Integers.
* offset directive, V850:                V850 Directives.
* opcode mnemonics, VAX:                 VAX-opcodes.
* opcode summary, D10V:                  D10V-Opcodes.
* opcode summary, D30V:                  D30V-Opcodes.
* opcode summary, H8/300:                H8/300 Opcodes.
* opcode summary, H8/500:                H8/500 Opcodes.
* opcode summary, SH:                    SH Opcodes.
* opcode summary, SH64:                  SH64 Opcodes.
* opcode summary, Z8000:                 Z8000 Opcodes.
* opcodes for AMD 29K:                   AMD29K Opcodes.
* opcodes for ARC:                       ARC Opcodes.
* opcodes for ARM:                       ARM Opcodes.
* opcodes for V850:                      V850 Opcodes.
* opcodes, i860:                         Opcodes for i860.
* opcodes, i960:                         Opcodes for i960.
* opcodes, M680x0:                       M68K-opcodes.
* opcodes, M68HC11:                      M68HC11-opcodes.
* operand delimiters, i386:              i386-Syntax.
* operand delimiters, x86-64:            i386-Syntax.
* operand notation, VAX:                 VAX-operands.
* operands in expressions:               Arguments.
* operator precedence:                   Infix Ops.
* operators, in expressions:             Operators.
* operators, permitted arguments:        Infix Ops.
* optimization, D10V:                    Overview.
* optimization, D30V:                    Overview.
* option directive, ARC:                 ARC Directives.
* option summary:                        Overview.
* options for Alpha:                     Alpha Options.
* options for AMD29K (none):             AMD29K Options.
* options for ARC (none):                ARC Options.
* options for ARM (none):                ARM Options.
* options for i386:                      i386-Options.
* options for PDP-11:                    PDP-11-Options.
* options for PowerPC:                   PowerPC-Opts.
* options for SPARC:                     Sparc-Opts.
* options for V850 (none):               V850 Options.
* options for VAX/VMS:                   VAX-Opts.
* options for x86-64:                    i386-Options.
* options, all versions of assembler:    Invoking.
* options, command line:                 Command Line.
* options, CRIS:                         CRIS-Opts.
* options, D10V:                         D10V-Opts.
* options, D30V:                         D30V-Opts.
* options, H8/300 (none):                H8/300 Options.
* options, H8/500 (none):                H8/500 Options.
* options, i960:                         Options-i960.
* options, M32R:                         M32R-Opts.
* options, M680x0:                       M68K-Opts.
* options, M68HC11:                      M68HC11-Opts.
* options, MMIX:                         MMIX-Opts.
* options, PJ:                           PJ Options.
* options, SH:                           SH Options.
* options, SH64:                         SH64 Options.
* options, Z8000:                        Z8000 Options.
* org directive:                         Org.
* other attribute, of a.out symbol:      Symbol Other.
* output file:                           Object.
* p2align directive:                     P2align.
* p2alignl directive:                    P2align.
* p2alignw directive:                    P2align.
* padding the location counter:          Align.
* padding the location counter given a power of two: P2align.
* padding the location counter given number of bytes: Balign.
* page, in listings:                     Eject.
* paper size, for listings:              Psize.
* paths for .include:                    I.
* patterns, writing in memory:           Fill.
* PDP-11 comments:                       PDP-11-Syntax.
* PDP-11 floating-point register syntax: PDP-11-Syntax.
* PDP-11 general-purpose register syntax: PDP-11-Syntax.
* PDP-11 instruction naming:             PDP-11-Mnemonics.
* PDP-11 support:                        PDP-11-Dependent.
* PDP-11 syntax:                         PDP-11-Syntax.
* PIC code generation for ARM:           ARM Options.
* PJ endianness:                         Overview.
* PJ options:                            PJ Options.
* PJ support:                            PJ-Dependent.
* plus, permitted arguments:             Infix Ops.
* Position-independent code, CRIS:       CRIS-Opts.
* Position-independent code, symbols in, CRIS: CRIS-Pic.
* PowerPC architectures:                 PowerPC-Opts.
* PowerPC options:                       PowerPC-Opts.
* PowerPC support:                       PPC-Dependent.
* precedence of operators:               Infix Ops.
* precision, floating point:             Flonums.
* prefix operators:                      Prefix Ops.
* prefixes, i386:                        i386-Prefixes.
* preprocessing:                         Preprocessing.
* preprocessing, turning on and off:     Preprocessing.
* primary attributes, COFF symbols:      COFF Symbols.
* print directive:                       Print.
* proc directive, SPARC:                 Sparc-Directives.
* protected registers, AMD 29K:          AMD29K-Regs.
* pseudo-op .dword, CRIS:                CRIS-Pseudos.
* pseudo-op .syntax, CRIS:               CRIS-Pseudos.
* pseudo-op BSPEC, MMIX:                 MMIX-Pseudos.
* pseudo-op BYTE, MMIX:                  MMIX-Pseudos.
* pseudo-op ESPEC, MMIX:                 MMIX-Pseudos.
* pseudo-op GREG, MMIX:                  MMIX-Pseudos.
* pseudo-op IS, MMIX:                    MMIX-Pseudos.
* pseudo-op LOC, MMIX:                   MMIX-Pseudos.
* pseudo-op LOCAL, MMIX:                 MMIX-Pseudos.
* pseudo-op OCTA, MMIX:                  MMIX-Pseudos.
* pseudo-op PREFIX, MMIX:                MMIX-Pseudos.
* pseudo-op TETRA, MMIX:                 MMIX-Pseudos.
* pseudo-op WYDE, MMIX:                  MMIX-Pseudos.
* pseudo-opcodes, M680x0:                M68K-Branch.
* pseudo-opcodes, M68HC11:               M68HC11-Branch.
* pseudo-ops for branch, VAX:            VAX-branch.
* pseudo-ops, CRIS:                      CRIS-Pseudos.
* pseudo-ops, machine independent:       Pseudo Ops.
* pseudo-ops, MMIX:                      MMIX-Pseudos.
* psize directive:                       Psize.
* psw register, V850:                    V850-Regs.
* purgem directive:                      Purgem.
* purpose of GNU assembler:              GNU Assembler.
* quad directive:                        Quad.
* quad directive, i386:                  i386-Float.
* quad directive, x86-64:                i386-Float.
* real-mode code, i386:                  i386-16bit.
* register directive, SPARC:             Sparc-Directives.
* register names, Alpha:                 Alpha-Regs.
* register names, AMD 29K:               AMD29K-Regs.
* register names, ARC:                   ARC-Regs.
* register names, ARM:                   ARM-Regs.
* register names, CRIS:                  CRIS-Regs.
* register names, H8/300:                H8/300-Regs.
* register names, MMIX:                  MMIX-Regs.
* register names, V850:                  V850-Regs.
* register names, VAX:                   VAX-operands.
* register operands, i386:               i386-Syntax.
* register operands, x86-64:             i386-Syntax.
* registers, D10V:                       D10V-Regs.
* registers, D30V:                       D30V-Regs.
* registers, H8/500:                     H8/500-Regs.
* registers, i386:                       i386-Regs.
* registers, SH:                         SH-Regs.
* registers, SH64:                       SH64-Regs.
* registers, x86-64:                     i386-Regs.
* registers, Z8000:                      Z8000-Regs.
* relocation:                            Sections.
* relocation example:                    Ld Sections.
* relocations, Alpha:                    Alpha-Relocs.
* repeat prefixes, i386:                 i386-Prefixes.
* reporting bugs in assembler:           Reporting Bugs.
* rept directive:                        Rept.
* req directive, ARM:                    ARM Directives.
* reserve directive, SPARC:              Sparc-Directives.
* return instructions, i386:             i386-Syntax.
* return instructions, x86-64:           i386-Syntax.
* REX prefixes, i386:                    i386-Prefixes.
* rsect:                                 Z8000 Directives.
* sbttl directive:                       Sbttl.
* scl directive:                         Scl.
* sdaoff pseudo-op, V850:                V850 Opcodes.
* search path for .include:              I.
* sect directive, AMD 29K:               AMD29K Directives.
* section directive:                     Section.
* section directive, V850:               V850 Directives.
* section override prefixes, i386:       i386-Prefixes.
* Section Stack <1>:                     SubSection.
* Section Stack <2>:                     Section.
* Section Stack <3>:                     PushSection.
* Section Stack <4>:                     PopSection.
* Section Stack:                         Previous.
* section-relative addressing:           Secs Background.
* sections:                              Sections.
* sections in messages, internal:        As Sections.
* sections, i386:                        i386-Syntax.
* sections, named:                       Ld Sections.
* sections, x86-64:                      i386-Syntax.
* seg directive, SPARC:                  Sparc-Directives.
* segm:                                  Z8000 Directives.
* set directive:                         Set.
* set directive, M88K:                   M88K Directives.
* SH addressing modes:                   SH-Addressing.
* SH floating point (IEEE):              SH Floating Point.
* SH line comment character:             SH-Chars.
* SH line separator:                     SH-Chars.
* SH machine directives:                 SH Directives.
* SH opcode summary:                     SH Opcodes.
* SH options:                            SH Options.
* SH registers:                          SH-Regs.
* SH support:                            SH-Dependent.
* SH64 ABI options:                      SH64 Options.
* SH64 addressing modes:                 SH64-Addressing.
* SH64 ISA options:                      SH64 Options.
* SH64 line comment character:           SH64-Chars.
* SH64 line separator:                   SH64-Chars.
* SH64 machine directives:               SH64 Directives.
* SH64 opcode summary:                   SH64 Opcodes.
* SH64 options:                          SH64 Options.
* SH64 registers:                        SH64-Regs.
* SH64 support:                          SH64-Dependent.
* short directive:                       Short.
* short directive, ARC:                  ARC Directives.
* SIMD, i386:                            i386-SIMD.
* SIMD, x86-64:                          i386-SIMD.
* single character constant:             Chars.
* single directive:                      Single.
* single directive, i386:                i386-Float.
* single directive, x86-64:              i386-Float.
* sixteen bit integers:                  hword.
* sixteen byte integer:                  Octa.
* size directive:                        Size.
* size modifiers, D10V:                  D10V-Size.
* size modifiers, D30V:                  D30V-Size.
* size modifiers, M680x0:                M68K-Syntax.
* size prefixes, i386:                   i386-Prefixes.
* size suffixes, H8/300:                 H8/300 Opcodes.
* sizes operands, i386:                  i386-Syntax.
* sizes operands, x86-64:                i386-Syntax.
* skip directive:                        Skip.
* skip directive, M680x0:                M68K-Directives.
* skip directive, SPARC:                 Sparc-Directives.
* sleb128 directive:                     Sleb128.
* small objects, MIPS ECOFF:             MIPS Object.
* SOM symbol attributes:                 SOM Symbols.
* source program:                        Input Files.
* source, destination operands; i386:    i386-Syntax.
* source, destination operands; x86-64:  i386-Syntax.
* sp register, V850:                     V850-Regs.
* space directive:                       Space.
* space used, maximum for assembly:      statistics.
* SPARC architectures:                   Sparc-Opts.
* SPARC data alignment:                  Sparc-Aligned-Data.
* SPARC floating point (IEEE):           Sparc-Float.
* SPARC machine directives:              Sparc-Directives.
* SPARC options:                         Sparc-Opts.
* SPARC support:                         Sparc-Dependent.
* special characters, ARC:               ARC-Chars.
* special characters, M680x0:            M68K-Chars.
* special purpose registers, AMD 29K:    AMD29K-Regs.
* stabd directive:                       Stab.
* stabn directive:                       Stab.
* stabs directive:                       Stab.
* stabX directives:                      Stab.
* standard assembler sections:           Secs Background.
* standard input, as input file:         Command Line.
* statement separator character:         Statements.
* statement separator, Alpha:            Alpha-Chars.
* statement separator, ARM:              ARM-Chars.
* statement separator, H8/300:           H8/300-Chars.
* statement separator, H8/500:           H8/500-Chars.
* statement separator, SH:               SH-Chars.
* statement separator, SH64:             SH64-Chars.
* statement separator, Z8000:            Z8000-Chars.
* statements, structure of:              Statements.
* statistics, about assembly:            statistics.
* stopping the assembly:                 Abort.
* string constants:                      Strings.
* string directive:                      String.
* string directive on HPPA:              HPPA Directives.
* string directive, M88K:                M88K Directives.
* string literals:                       Ascii.
* string, copying to object file:        String.
* struct directive:                      Struct.
* structure debugging, COFF:             Tag.
* sub-instruction ordering, D10V:        D10V-Chars.
* sub-instruction ordering, D30V:        D30V-Chars.
* sub-instructions, D10V:                D10V-Subs.
* sub-instructions, D30V:                D30V-Subs.
* subexpressions:                        Arguments.
* subtitles for listings:                Sbttl.
* subtraction, permitted arguments:      Infix Ops.
* summary of options:                    Overview.
* support:                               HPPA-Dependent.
* supporting files, including:           Include.
* suppressing warnings:                  W.
* sval:                                  Z8000 Directives.
* symbol attributes:                     Symbol Attributes.
* symbol attributes, a.out:              a.out Symbols.
* symbol attributes, COFF:               COFF Symbols.
* symbol attributes, SOM:                SOM Symbols.
* symbol descriptor, COFF:               Desc.
* symbol names:                          Symbol Names.
* symbol names, $ in <1>:                SH64-Chars.
* symbol names, $ in <2>:                SH-Chars.
* symbol names, $ in <3>:                H8/500-Chars.
* symbol names, $ in <4>:                D30V-Chars.
* symbol names, $ in:                    D10V-Chars.
* symbol names, local:                   Symbol Names.
* symbol names, temporary:               Symbol Names.
* symbol storage class (COFF):           Scl.
* symbol type:                           Symbol Type.
* symbol type, COFF:                     Type.
* symbol type, ELF:                      Type.
* symbol value:                          Symbol Value.
* symbol value, setting:                 Set.
* symbol values, assigning:              Setting Symbols.
* symbol versioning:                     Symver.
* symbol, common:                        Comm.
* symbol, making visible to linker:      Global.
* symbolic debuggers, information for:   Stab.
* symbols:                               Symbols.
* Symbols in position-independent code, CRIS: CRIS-Pic.
* symbols with uppercase, VAX/VMS:       VAX-Opts.
* symbols, assigning values to:          Equ.
* symbols, local common:                 Lcomm.
* symver directive:                      Symver.
* syntax compatibility, i386:            i386-Syntax.
* syntax compatibility, x86-64:          i386-Syntax.
* syntax, D10V:                          D10V-Syntax.
* syntax, D30V:                          D30V-Syntax.
* syntax, M680x0:                        M68K-Syntax.
* syntax, M68HC11:                       M68HC11-Syntax.
* syntax, machine-independent:           Syntax.
* sysproc directive, i960:               Directives-i960.
* tab (\t):                              Strings.
* tag directive:                         Tag.
* tdaoff pseudo-op, V850:                V850 Opcodes.
* temporary symbol names:                Symbol Names.
* text and data sections, joining:       R.
* text directive:                        Text.
* text section:                          Ld Sections.
* tfloat directive, i386:                i386-Float.
* tfloat directive, x86-64:              i386-Float.
* thumb directive, ARM:                  ARM Directives.
* Thumb support:                         ARM-Dependent.
* thumb_func directive, ARM:             ARM Directives.
* thumb_set directive, ARM:              ARM Directives.
* time, total for assembly:              statistics.
* title directive:                       Title.
* tp register, V850:                     V850-Regs.
* trusted compiler:                      f.
* turning preprocessing on and off:      Preprocessing.
* type directive:                        Type.
* type of a symbol:                      Symbol Type.
* ualong directive, SH:                  SH Directives.
* uaword directive, SH:                  SH Directives.
* uleb128 directive:                     Uleb128.
* undefined section:                     Ld Sections.
* unsegm:                                Z8000 Directives.
* use directive, AMD 29K:                AMD29K Directives.
* V850 command line options:             V850 Options.
* V850 floating point (IEEE):            V850 Floating Point.
* V850 line comment character:           V850-Chars.
* V850 machine directives:               V850 Directives.
* V850 opcodes:                          V850 Opcodes.
* V850 options (none):                   V850 Options.
* V850 register names:                   V850-Regs.
* V850 support:                          V850-Dependent.
* val directive:                         Val.
* value attribute, COFF:                 Val.
* value of a symbol:                     Symbol Value.
* VAX bitfields not supported:           VAX-no.
* VAX branch improvement:                VAX-branch.
* VAX command-line options ignored:      VAX-Opts.
* VAX displacement sizing character:     VAX-operands.
* VAX floating point:                    VAX-float.
* VAX immediate character:               VAX-operands.
* VAX indirect character:                VAX-operands.
* VAX machine directives:                VAX-directives.
* VAX opcode mnemonics:                  VAX-opcodes.
* VAX operand notation:                  VAX-operands.
* VAX register names:                    VAX-operands.
* VAX support:                           Vax-Dependent.
* Vax-11 C compatibility:                VAX-Opts.
* VAX/VMS options:                       VAX-Opts.
* version of assembler:                  v.
* versions of symbols:                   Symver.
* Visibility <1>:                        Protected.
* Visibility <2>:                        Internal.
* Visibility:                            Hidden.
* VMS (VAX) options:                     VAX-Opts.
* warning for altered difference tables: K.
* warning messages:                      Errors.
* warnings, causing error:               W.
* warnings, M32R:                        M32R-Warnings.
* warnings, suppressing:                 W.
* warnings, switching on:                W.
* whitespace:                            Whitespace.
* whitespace, removed by preprocessor:   Preprocessing.
* wide floating point directives, VAX:   VAX-directives.
* Width of continuation lines of disassembly output: listing.
* Width of first line disassembly output: listing.
* Width of source line output:           listing.
* word directive:                        Word.
* word directive, ARC:                   ARC Directives.
* word directive, H8/300:                H8/300 Directives.
* word directive, H8/500:                H8/500 Directives.
* word directive, i386:                  i386-Float.
* word directive, M88K:                  M88K Directives.
* word directive, SPARC:                 Sparc-Directives.
* word directive, x86-64:                i386-Float.
* writing patterns in memory:            Fill.
* wval:                                  Z8000 Directives.
* x86-64 arch directive:                 i386-Arch.
* x86-64 att_syntax pseudo op:           i386-Syntax.
* x86-64 conversion instructions:        i386-Mnemonics.
* x86-64 floating point:                 i386-Float.
* x86-64 immediate operands:             i386-Syntax.
* x86-64 instruction naming:             i386-Mnemonics.
* x86-64 intel_syntax pseudo op:         i386-Syntax.
* x86-64 jump optimization:              i386-Jumps.
* x86-64 jump, call, return:             i386-Syntax.
* x86-64 jump/call operands:             i386-Syntax.
* x86-64 memory references:              i386-Memory.
* x86-64 options:                        i386-Options.
* x86-64 register operands:              i386-Syntax.
* x86-64 registers:                      i386-Regs.
* x86-64 sections:                       i386-Syntax.
* x86-64 size suffixes:                  i386-Syntax.
* x86-64 source, destination operands:   i386-Syntax.
* x86-64 support:                        i386-Dependent.
* x86-64 syntax compatibility:           i386-Syntax.
* xword directive, SPARC:                Sparc-Directives.
* Z800 addressing modes:                 Z8000-Addressing.
* Z8000 directives:                      Z8000 Directives.
* Z8000 line comment character:          Z8000-Chars.
* Z8000 line separator:                  Z8000-Chars.
* Z8000 opcode summary:                  Z8000 Opcodes.
* Z8000 options:                         Z8000 Options.
* Z8000 registers:                       Z8000-Regs.
* Z8000 support:                         Z8000-Dependent.
* zdaoff pseudo-op, V850:                V850 Opcodes.
* zero register, V850:                   V850-Regs.
* zero-terminated strings:               Asciz.


@


1.1.2.2
log
@Update generated files.
@
text
@d1 1
a1 1
This is as.info, produced by makeinfo version 4.1 from as.texinfo.
@


