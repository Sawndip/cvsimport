head	1.93;
access;
symbols
	binutils-2_24-branch:1.93.0.2
	binutils-2_24-branchpoint:1.93
	binutils-2_21_1:1.81
	binutils-2_23_2:1.88.2.2
	binutils-2_23_1:1.88.2.1
	binutils-2_23:1.88.2.1
	binutils-2_23-branch:1.88.0.2
	binutils-2_23-branchpoint:1.88
	binutils-2_22_branch:1.85.2.1.0.2
	binutils-2_22:1.85.2.1
	binutils-2_22-branch:1.85.0.2
	binutils-2_22-branchpoint:1.85
	binutils-2_21:1.81
	binutils-2_21-branch:1.81.0.2
	binutils-2_21-branchpoint:1.81
	binutils-2_20_1:1.61
	binutils-2_20:1.61
	binutils-arc-20081103-branch:1.52.0.6
	binutils-arc-20081103-branchpoint:1.52
	binutils-2_20-branch:1.61.0.2
	binutils-2_20-branchpoint:1.61
	dje-cgen-play1-branch:1.57.0.2
	dje-cgen-play1-branchpoint:1.57
	arc-20081103-branch:1.52.0.4
	arc-20081103-branchpoint:1.52
	binutils-2_19_1:1.52
	binutils-2_19:1.52
	binutils-2_19-branch:1.52.0.2
	binutils-2_19-branchpoint:1.52
	binutils-2_18:1.45.2.1
	binutils-2_18-branch:1.45.0.2
	binutils-2_18-branchpoint:1.45
	binutils-csl-coldfire-4_1-32:1.37.2.7
	binutils-csl-sourcerygxx-4_1-32:1.37.2.7
	binutils-csl-innovasic-fido-3_4_4-33:1.37.2.7
	binutils-csl-sourcerygxx-3_4_4-32:1.33
	binutils-csl-coldfire-4_1-30:1.37.2.6
	binutils-csl-sourcerygxx-4_1-30:1.37.2.6
	binutils-csl-coldfire-4_1-28:1.37.2.6
	binutils-csl-sourcerygxx-4_1-29:1.37.2.6
	binutils-csl-sourcerygxx-4_1-28:1.37.2.6
	binutils-csl-arm-2006q3-27:1.37.2.6
	binutils-csl-sourcerygxx-4_1-27:1.37.2.6
	binutils-csl-arm-2006q3-26:1.37.2.6
	binutils-csl-sourcerygxx-4_1-26:1.37.2.6
	binutils-csl-sourcerygxx-4_1-25:1.37.2.6
	binutils-csl-sourcerygxx-4_1-24:1.37.2.5
	binutils-csl-sourcerygxx-4_1-23:1.37.2.5
	binutils-csl-sourcerygxx-4_1-21:1.37.2.5
	binutils-csl-arm-2006q3-21:1.37.2.5
	binutils-csl-sourcerygxx-4_1-22:1.37.2.5
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.37.2.5
	binutils-csl-sourcerygxx-4_1-20:1.37.2.4
	binutils-csl-arm-2006q3-19:1.37.2.4
	binutils-csl-sourcerygxx-4_1-19:1.37.2.4
	binutils-csl-sourcerygxx-4_1-18:1.37.2.3
	binutils-csl-renesas-4_1-9:1.37.2.3
	binutils-csl-sourcerygxx-3_4_4-25:1.33
	binutils-csl-renesas-4_1-8:1.37.2.3
	binutils-csl-renesas-4_1-7:1.37.2.2
	binutils-csl-renesas-4_1-6:1.37.2.2
	binutils-csl-sourcerygxx-4_1-17:1.37.2.2
	binutils-csl-sourcerygxx-4_1-14:1.37.2.2
	binutils-csl-sourcerygxx-4_1-15:1.37.2.2
	binutils-csl-sourcerygxx-4_1-13:1.37.2.2
	binutils-2_17:1.37
	binutils-csl-sourcerygxx-4_1-12:1.37.2.2
	binutils-csl-sourcerygxx-3_4_4-21:1.37.2.2
	binutils-csl-wrs-linux-3_4_4-24:1.33
	binutils-csl-wrs-linux-3_4_4-23:1.33
	binutils-csl-sourcerygxx-4_1-9:1.37.2.2
	binutils-csl-sourcerygxx-4_1-8:1.37.2.2
	binutils-csl-sourcerygxx-4_1-7:1.37.2.2
	binutils-csl-arm-2006q1-6:1.37.2.2
	binutils-csl-sourcerygxx-4_1-6:1.37.2.2
	binutils-csl-wrs-linux-3_4_4-22:1.33
	binutils-csl-coldfire-4_1-11:1.37.2.2
	binutils-csl-sourcerygxx-3_4_4-19:1.37.2.2
	binutils-csl-coldfire-4_1-10:1.37.2.2
	binutils-csl-sourcerygxx-4_1-5:1.37.2.2
	binutils-csl-sourcerygxx-4_1-4:1.37.2.2
	binutils-csl-wrs-linux-3_4_4-21:1.33
	binutils-csl-morpho-4_1-4:1.37
	binutils-csl-sourcerygxx-3_4_4-17:1.37
	binutils-csl-wrs-linux-3_4_4-20:1.33
	binutils-2_17-branch:1.37.0.4
	binutils-2_17-branchpoint:1.37
	binutils-csl-2_17-branch:1.37.0.2
	binutils-csl-2_17-branchpoint:1.37
	binutils-csl-gxxpro-3_4-branch:1.33.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.33
	binutils-2_16_1:1.33
	binutils-csl-arm-2005q1b:1.33
	binutils-2_16:1.33
	binutils-csl-arm-2005q1a:1.33
	binutils-csl-arm-2005q1-branch:1.33.0.4
	binutils-csl-arm-2005q1-branchpoint:1.33
	binutils-2_16-branch:1.33.0.2
	binutils-2_16-branchpoint:1.33
	csl-arm-2004-q3d:1.32
	csl-arm-2004-q3:1.29
	binutils-2_15:1.26
	binutils-2_15-branchpoint:1.26
	csl-arm-2004-q1a:1.27
	csl-arm-2004-q1:1.27
	binutils-2_15-branch:1.26.0.6
	cagney_bfdfile-20040213-branch:1.26.0.4
	cagney_bfdfile-20040213-branchpoint:1.26
	cagney_bigcore-20040122-branch:1.26.0.2
	cagney_bigcore-20040122-branchpoint:1.26
	csl-arm-2003-q4:1.26
	binutils-2_14:1.18
	binutils-2_14-branch:1.18.0.2
	binutils-2_14-branchpoint:1.18
	binutils-2_13_2_1:1.15
	binutils-2_13_2:1.15
	binutils-2_13_1:1.15
	binutils-2_13:1.15
	binutils-2_13-branchpoint:1.15
	binutils-2_13-branch:1.15.0.4
	binutils-2_12_1:1.15
	binutils-2_12:1.15
	binutils-2_12-branch:1.15.0.2
	binutils-2_12-branchpoint:1.15
	cygnus_cvs_20020108_pre:1.12
	binutils-2_11_2:1.10.2.1
	binutils-2_11_1:1.10.2.1
	binutils-2_11:1.10
	x86_64versiong3:1.10
	binutils-2_11-branch:1.10.0.2
	binutils-2_10_1:1.5.2.1
	binutils-2_10:1.5.2.1
	binutils-2_10-branch:1.5.0.2
	binutils-2_10-branchpoint:1.5
	binutils_latest_snapshot:1.93
	repo-unification-2000-02-06:1.5
	binu_ss_19990721:1.3
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.93
date	2013.03.14.16.17.45;	author schwab;	state Exp;
branches;
next	1.92;

1.92
date	2013.03.14.10.00.46;	author nickc;	state Exp;
branches;
next	1.91;

1.91
date	2013.02.25.02.53.41;	author xguo;	state Exp;
branches;
next	1.90;

1.90
date	2013.01.10.19.51.55;	author hjl;	state Exp;
branches;
next	1.89;

1.89
date	2012.08.24.07.50.32;	author mgretton;	state Exp;
branches;
next	1.88;

1.88
date	2012.03.29.10.28.40;	author mgretton;	state Exp;
branches
	1.88.2.1;
next	1.87;

1.87
date	2011.11.07.16.20.48;	author mgretton;	state Exp;
branches;
next	1.86;

1.86
date	2011.11.02.11.13.58;	author nickc;	state Exp;
branches;
next	1.85;

1.85
date	2011.05.31.14.12.54;	author pbrook;	state Exp;
branches
	1.85.2.1;
next	1.84;

1.84
date	2011.01.18.14.10.43;	author nickc;	state Exp;
branches;
next	1.83;

1.83
date	2011.01.18.13.37.39;	author nickc;	state Exp;
branches;
next	1.82;

1.82
date	2011.01.10.08.40.17;	author nathan;	state Exp;
branches;
next	1.81;

1.81
date	2010.09.23.15.52.18;	author mgretton;	state Exp;
branches;
next	1.80;

1.80
date	2010.09.23.15.37.44;	author mgretton;	state Exp;
branches;
next	1.79;

1.79
date	2010.09.23.15.31.33;	author mgretton;	state Exp;
branches;
next	1.78;

1.78
date	2010.09.23.15.26.21;	author mgretton;	state Exp;
branches;
next	1.77;

1.77
date	2010.09.23.15.18.17;	author mgretton;	state Exp;
branches;
next	1.76;

1.76
date	2010.09.23.15.11.56;	author mgretton;	state Exp;
branches;
next	1.75;

1.75
date	2010.09.14.09.16.21;	author jiez;	state Exp;
branches;
next	1.74;

1.74
date	2010.09.09.12.08.13;	author mgretton;	state Exp;
branches;
next	1.73;

1.73
date	2010.08.20.20.53.28;	author macro;	state Exp;
branches;
next	1.72;

1.72
date	2010.06.21.10.49.41;	author schwab;	state Exp;
branches;
next	1.71;

1.71
date	2010.04.15.10.56.37;	author mgretton;	state Exp;
branches;
next	1.70;

1.70
date	2010.03.18.15.34.47;	author drow;	state Exp;
branches;
next	1.69;

1.69
date	2010.03.18.11.22.45;	author nickc;	state Exp;
branches;
next	1.68;

1.68
date	2010.02.18.10.56.27;	author mgretton;	state Exp;
branches;
next	1.67;

1.67
date	2009.12.28.18.27.42;	author dgutson;	state Exp;
branches;
next	1.66;

1.66
date	2009.11.17.16.31.50;	author pbrook;	state Exp;
branches;
next	1.65;

1.65
date	2009.11.02.13.44.03;	author pbrook;	state Exp;
branches;
next	1.64;

1.64
date	2009.10.29.15.37.53;	author pbrook;	state Exp;
branches;
next	1.63;

1.63
date	2009.10.07.13.46.55;	author nathan;	state Exp;
branches;
next	1.62;

1.62
date	2009.09.07.16.34.39;	author dgutson;	state Exp;
branches;
next	1.61;

1.61
date	2009.09.02.07.24.21;	author amodra;	state Exp;
branches;
next	1.60;

1.60
date	2009.07.30.08.54.49;	author nickc;	state Exp;
branches;
next	1.59;

1.59
date	2009.07.15.15.08.55;	author nickc;	state Exp;
branches;
next	1.58;

1.58
date	2009.07.09.07.52.35;	author nickc;	state Exp;
branches;
next	1.57;

1.57
date	2009.06.22.14.40.27;	author nickc;	state Exp;
branches;
next	1.56;

1.56
date	2009.04.02.09.43.56;	author nickc;	state Exp;
branches;
next	1.55;

1.55
date	2009.01.29.07.08.12;	author nathan;	state Exp;
branches;
next	1.54;

1.54
date	2009.01.23.17.46.21;	author nathan;	state Exp;
branches;
next	1.53;

1.53
date	2009.01.16.10.26.48;	author ams;	state Exp;
branches;
next	1.52;

1.52
date	2008.08.26.16.02.59;	author mmitchel;	state Exp;
branches;
next	1.51;

1.51
date	2008.05.21.08.20.17;	author nickc;	state Exp;
branches;
next	1.50;

1.50
date	2008.04.15.14.25.30;	author nickc;	state Exp;
branches;
next	1.49;

1.49
date	2008.03.09.15.20.31;	author pbrook;	state Exp;
branches;
next	1.48;

1.48
date	2008.03.09.13.23.29;	author pbrook;	state Exp;
branches;
next	1.47;

1.47
date	2008.02.20.15.17.56;	author pbrook;	state Exp;
branches;
next	1.46;

1.46
date	2007.08.23.02.05.58;	author bje;	state Exp;
branches;
next	1.45;

1.45
date	2007.03.26.14.39.35;	author jules;	state Exp;
branches
	1.45.2.1;
next	1.44;

1.44
date	2006.12.13.16.06.39;	author pbrook;	state Exp;
branches;
next	1.43;

1.43
date	2006.11.29.17.53.39;	author pbrook;	state Exp;
branches;
next	1.42;

1.42
date	2006.10.31.20.16.33;	author pbrook;	state Exp;
branches;
next	1.41;

1.41
date	2006.09.16.16.24.28;	author pbrook;	state Exp;
branches;
next	1.40;

1.40
date	2006.07.24.13.49.49;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.21.14.20.25;	author shinwell;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.11.15.17.34;	author pbrook;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.10.17.20.30;	author pbrook;	state Exp;
branches
	1.37.2.1;
next	1.36;

1.36
date	2006.02.24.15.36.35;	author pbrook;	state Exp;
branches;
next	1.35;

1.35
date	2005.10.08.17.07.16;	author pbrook;	state Exp;
branches;
next	1.34;

1.34
date	2005.09.27.13.23.38;	author pbrook;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.03.01.29.53;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2004.11.04.15.54.45;	author drow;	state Exp;
branches;
next	1.31;

1.31
date	2004.10.12.14.17.07;	author pbrook;	state Exp;
branches;
next	1.30;

1.30
date	2004.10.05.13.51.39;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	2004.09.30.16.21.45;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2004.09.01.16.34.29;	author rearnsha;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.23.23.05.52;	author pbrook;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.29.16.43.37;	author pbrook;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.23.18.48.02;	author pbrook;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.18.05.45.13;	author mmitchel;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.10.12.11.26;	author pbrook;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.06.01.25.29;	author mmitchel;	state Exp;
branches;
next	1.21;

1.21
date	2003.11.13.14.19.01;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.06.15.30.04;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.06.11.58.58;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.25.20.55.59;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.19.01.11.31;	author kazu;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.30.10.56.04;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.21.00.20.58;	author hp;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.19.12.48.32;	author rearnsha;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.18.17.01.54;	author rearnsha;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.08.19.03.27;	author aldyh;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.08.23.24.26;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.13.22.39.55;	author pb;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2000.11.25.00.21.38;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.14.09.02.45;	author schwab;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.25.17.59.22;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.24.23.57.30;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.10.22.22.56;	author nickc;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.09.09.16.09.52;	author schwab;	state Exp;
branches;
next	1.3;

1.3
date	99.07.08.01.49.09;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.07.05.07.38.59;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.44;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.88.2.1
date	2012.08.28.10.50.42;	author mgretton;	state Exp;
branches;
next	1.88.2.2;

1.88.2.2
date	2013.02.25.11.38.20;	author xguo;	state Exp;
branches;
next	;

1.85.2.1
date	2011.11.07.16.25.18;	author mgretton;	state Exp;
branches;
next	;

1.45.2.1
date	2007.08.23.02.43.36;	author bje;	state Exp;
branches;
next	;

1.37.2.1
date	2006.05.03.14.30.24;	author pbrook;	state Exp;
branches;
next	1.37.2.2;

1.37.2.2
date	2006.05.03.16.13.43;	author jules;	state Exp;
branches;
next	1.37.2.3;

1.37.2.3
date	2006.08.15.10.50.40;	author shinwell;	state Exp;
branches;
next	1.37.2.4;

1.37.2.4
date	2006.09.08.22.36.13;	author pbrook;	state Exp;
branches;
next	1.37.2.5;

1.37.2.5
date	2006.09.14.22.33.48;	author pbrook;	state Exp;
branches;
next	1.37.2.6;

1.37.2.6
date	2006.10.26.19.44.34;	author pbrook;	state Exp;
branches;
next	1.37.2.7;

1.37.2.7
date	2006.12.13.16.07.33;	author pbrook;	state Exp;
branches;
next	;

1.10.2.1
date	2001.06.07.03.15.36;	author amodra;	state Exp;
branches;
next	;

1.5.2.1
date	2000.05.29.18.49.26;	author pb;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.44;	author rth;	state Exp;
branches;
next	;


desc
@@


1.93
log
@* doc/c-arc.texi (ARC Directives): Revert last change and use
@@itemize instead of @@table.
* doc/c-arm.texi (ARM-Instruction-Set): Likewise.
@
text
@@@c Copyright 1996-2013 Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.

@@ifset GENERIC
@@page
@@node ARM-Dependent
@@chapter ARM Dependent Features
@@end ifset

@@ifclear GENERIC
@@node Machine Dependencies
@@chapter ARM Dependent Features
@@end ifclear

@@cindex ARM support
@@cindex Thumb support
@@menu
* ARM Options::              Options
* ARM Syntax::               Syntax
* ARM Floating Point::       Floating Point
* ARM Directives::           ARM Machine Directives
* ARM Opcodes::              Opcodes
* ARM Mapping Symbols::      Mapping Symbols
* ARM Unwinding Tutorial::   Unwinding
@@end menu

@@node ARM Options
@@section Options
@@cindex ARM options (none)
@@cindex options for ARM (none)

@@table @@code

@@cindex @@code{-mcpu=} command line option, ARM
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots{}]
This option specifies the target processor.  The assembler will issue an
error message if an attempt is made to assemble an instruction which
will not execute on the target processor.  The following processor names are
recognized:
@@code{arm1},
@@code{arm2},
@@code{arm250},
@@code{arm3},
@@code{arm6},
@@code{arm60},
@@code{arm600},
@@code{arm610},
@@code{arm620},
@@code{arm7},
@@code{arm7m},
@@code{arm7d},
@@code{arm7dm},
@@code{arm7di},
@@code{arm7dmi},
@@code{arm70},
@@code{arm700},
@@code{arm700i},
@@code{arm710},
@@code{arm710t},
@@code{arm720},
@@code{arm720t},
@@code{arm740t},
@@code{arm710c},
@@code{arm7100},
@@code{arm7500},
@@code{arm7500fe},
@@code{arm7t},
@@code{arm7tdmi},
@@code{arm7tdmi-s},
@@code{arm8},
@@code{arm810},
@@code{strongarm},
@@code{strongarm1},
@@code{strongarm110},
@@code{strongarm1100},
@@code{strongarm1110},
@@code{arm9},
@@code{arm920},
@@code{arm920t},
@@code{arm922t},
@@code{arm940t},
@@code{arm9tdmi},
@@code{fa526} (Faraday FA526 processor),
@@code{fa626} (Faraday FA626 processor),
@@code{arm9e},
@@code{arm926e},
@@code{arm926ej-s},
@@code{arm946e-r0},
@@code{arm946e},
@@code{arm946e-s},
@@code{arm966e-r0},
@@code{arm966e},
@@code{arm966e-s},
@@code{arm968e-s},
@@code{arm10t},
@@code{arm10tdmi},
@@code{arm10e},
@@code{arm1020},
@@code{arm1020t},
@@code{arm1020e},
@@code{arm1022e},
@@code{arm1026ej-s},
@@code{fa606te} (Faraday FA606TE processor),
@@code{fa616te} (Faraday FA616TE processor),
@@code{fa626te} (Faraday FA626TE processor),
@@code{fmp626} (Faraday FMP626 processor),
@@code{fa726te} (Faraday FA726TE processor),
@@code{arm1136j-s},
@@code{arm1136jf-s},
@@code{arm1156t2-s},
@@code{arm1156t2f-s},
@@code{arm1176jz-s},
@@code{arm1176jzf-s},
@@code{mpcore},
@@code{mpcorenovfp},
@@code{cortex-a5},
@@code{cortex-a7},
@@code{cortex-a8},
@@code{cortex-a9},
@@code{cortex-a15},
@@code{cortex-r4},
@@code{cortex-r4f},
@@code{cortex-r5},
@@code{cortex-r7},
@@code{cortex-m4},
@@code{cortex-m3},
@@code{cortex-m1},
@@code{cortex-m0},
@@code{cortex-m0plus},
@@code{ep9312} (ARM920 with Cirrus Maverick coprocessor),
@@code{i80200} (Intel XScale processor)
@@code{iwmmxt} (Intel(r) XScale processor with Wireless MMX(tm) technology coprocessor)
and
@@code{xscale}.
The special name @@code{all} may be used to allow the
assembler to accept instructions valid for any ARM processor.

In addition to the basic instruction set, the assembler can be told to
accept various extension mnemonics that extend the processor using the
co-processor instruction space.  For example, @@code{-mcpu=arm920+maverick}
is equivalent to specifying @@code{-mcpu=ep9312}.

Multiple extensions may be specified, separated by a @@code{+}.  The
extensions should be specified in ascending alphabetical order.

Some extensions may be restricted to particular architectures; this is
documented in the list of extensions below.

Extension mnemonics may also be removed from those the assembler accepts.
This is done be prepending @@code{no} to the option that adds the extension.
Extensions that are removed should be listed after all extensions which have
been added, again in ascending alphabetical order.  For example,
@@code{-mcpu=ep9312+nomaverick} is equivalent to specifying @@code{-mcpu=arm920}.


The following extensions are currently supported:
@@code{crypto} (Cryptography Extensions for v8-A architecture, implies @@code{fp+simd}),
@@code{fp} (Floating Point Extensions for v8-A architecture),
@@code{idiv} (Integer Divide Extensions for v7-A and v7-R architectures),
@@code{iwmmxt},
@@code{iwmmxt2},
@@code{maverick},
@@code{mp} (Multiprocessing Extensions for v7-A and v7-R architectures),
@@code{os} (Operating System for v6M architecture),
@@code{sec} (Security Extensions for v6K and v7-A architectures),
@@code{simd} (Advanced SIMD Extensions for v8-A architecture, implies @@code{fp}),
@@code{virt} (Virtualization Extensions for v7-A architecture, implies
@@code{idiv}),
and
@@code{xscale}.

@@cindex @@code{-march=} command line option, ARM
@@item -march=@@var{architecture}[+@@var{extension}@@dots{}]
This option specifies the target architecture.  The assembler will issue
an error message if an attempt is made to assemble an instruction which
will not execute on the target architecture.  The following architecture
names are recognized:
@@code{armv1},
@@code{armv2},
@@code{armv2a},
@@code{armv2s},
@@code{armv3},
@@code{armv3m},
@@code{armv4},
@@code{armv4xm},
@@code{armv4t},
@@code{armv4txm},
@@code{armv5},
@@code{armv5t},
@@code{armv5txm},
@@code{armv5te},
@@code{armv5texp},
@@code{armv6},
@@code{armv6j},
@@code{armv6k},
@@code{armv6z},
@@code{armv6zk},
@@code{armv6-m},
@@code{armv6s-m},
@@code{armv7},
@@code{armv7-a},
@@code{armv7-r},
@@code{armv7-m},
@@code{armv7e-m},
@@code{armv8-a},
@@code{iwmmxt}
and
@@code{xscale}.
If both @@code{-mcpu} and
@@code{-march} are specified, the assembler will use
the setting for @@code{-mcpu}.

The architecture option can be extended with the same instruction set
extension options as the @@code{-mcpu} option.

@@cindex @@code{-mfpu=} command line option, ARM
@@item -mfpu=@@var{floating-point-format}

This option specifies the floating point format to assemble for.  The
assembler will issue an error message if an attempt is made to assemble
an instruction which will not execute on the target floating point unit.
The following format options are recognized:
@@code{softfpa},
@@code{fpe},
@@code{fpe2},
@@code{fpe3},
@@code{fpa},
@@code{fpa10},
@@code{fpa11},
@@code{arm7500fe},
@@code{softvfp},
@@code{softvfp+vfp},
@@code{vfp},
@@code{vfp10},
@@code{vfp10-r0},
@@code{vfp9},
@@code{vfpxd},
@@code{vfpv2},
@@code{vfpv3},
@@code{vfpv3-fp16},
@@code{vfpv3-d16},
@@code{vfpv3-d16-fp16},
@@code{vfpv3xd},
@@code{vfpv3xd-d16},
@@code{vfpv4},
@@code{vfpv4-d16},
@@code{fpv4-sp-d16},
@@code{fp-armv8},
@@code{arm1020t},
@@code{arm1020e},
@@code{arm1136jf-s},
@@code{maverick},
@@code{neon},
@@code{neon-vfpv4},
@@code{neon-fp-armv8},
and
@@code{crypto-neon-fp-armv8}.

In addition to determining which instructions are assembled, this option
also affects the way in which the @@code{.double} assembler directive behaves
when assembling little-endian code.

The default is dependent on the processor selected.  For Architecture 5 or
later, the default is to assembler for VFP instructions; for earlier
architectures the default is to assemble for FPA instructions.

@@cindex @@code{-mthumb} command line option, ARM
@@item -mthumb
This option specifies that the assembler should start assembling Thumb
instructions; that is, it should behave as though the file starts with a
@@code{.code 16} directive.

@@cindex @@code{-mthumb-interwork} command line option, ARM
@@item -mthumb-interwork
This option specifies that the output generated by the assembler should
be marked as supporting interworking.

@@cindex @@code{-mimplicit-it} command line option, ARM
@@item -mimplicit-it=never
@@itemx -mimplicit-it=always
@@itemx -mimplicit-it=arm
@@itemx -mimplicit-it=thumb
The @@code{-mimplicit-it} option controls the behavior of the assembler when
conditional instructions are not enclosed in IT blocks.
There are four possible behaviors.
If @@code{never} is specified, such constructs cause a warning in ARM
code and an error in Thumb-2 code.
If @@code{always} is specified, such constructs are accepted in both
ARM and Thumb-2 code, where the IT instruction is added implicitly.
If @@code{arm} is specified, such constructs are accepted in ARM code
and cause an error in Thumb-2 code.
If @@code{thumb} is specified, such constructs cause a warning in ARM
code and are accepted in Thumb-2 code.  If you omit this option, the
behavior is equivalent to @@code{-mimplicit-it=arm}.

@@cindex @@code{-mapcs-26} command line option, ARM
@@cindex @@code{-mapcs-32} command line option, ARM
@@item -mapcs-26
@@itemx -mapcs-32
These options specify that the output generated by the assembler should
be marked as supporting the indicated version of the Arm Procedure.
Calling Standard.

@@cindex @@code{-matpcs} command line option, ARM
@@item -matpcs
This option specifies that the output generated by the assembler should
be marked as supporting the Arm/Thumb Procedure Calling Standard.  If
enabled this option will cause the assembler to create an empty
debugging section in the object file called .arm.atpcs.  Debuggers can
use this to determine the ABI being used by.

@@cindex @@code{-mapcs-float} command line option, ARM
@@item -mapcs-float
This indicates the floating point variant of the APCS should be
used.  In this variant floating point arguments are passed in FP
registers rather than integer registers.

@@cindex @@code{-mapcs-reentrant} command line option, ARM
@@item -mapcs-reentrant
This indicates that the reentrant variant of the APCS should be used.
This variant supports position independent code.

@@cindex @@code{-mfloat-abi=} command line option, ARM
@@item -mfloat-abi=@@var{abi}
This option specifies that the output generated by the assembler should be
marked as using specified floating point ABI.
The following values are recognized:
@@code{soft},
@@code{softfp}
and
@@code{hard}.

@@cindex @@code{-eabi=} command line option, ARM
@@item -meabi=@@var{ver}
This option specifies which EABI version the produced object files should
conform to.
The following values are recognized:
@@code{gnu},
@@code{4}
and
@@code{5}.

@@cindex @@code{-EB} command line option, ARM
@@item -EB
This option specifies that the output generated by the assembler should
be marked as being encoded for a big-endian processor.

@@cindex @@code{-EL} command line option, ARM
@@item -EL
This option specifies that the output generated by the assembler should
be marked as being encoded for a little-endian processor.

@@cindex @@code{-k} command line option, ARM
@@cindex PIC code generation for ARM
@@item -k
This option specifies that the output of the assembler should be marked
as position-independent code (PIC).

@@cindex @@code{--fix-v4bx} command line option, ARM
@@item --fix-v4bx
Allow @@code{BX} instructions in ARMv4 code.  This is intended for use with
the linker option of the same name.

@@cindex @@code{-mwarn-deprecated} command line option, ARM
@@item -mwarn-deprecated
@@itemx -mno-warn-deprecated
Enable or disable warnings about using deprecated options or
features.  The default is to warn.

@@end table


@@node ARM Syntax
@@section Syntax
@@menu
* ARM-Instruction-Set::      Instruction Set
* ARM-Chars::                Special Characters
* ARM-Regs::                 Register Names
* ARM-Relocations::	     Relocations
* ARM-Neon-Alignment::	     NEON Alignment Specifiers
@@end menu

@@node ARM-Instruction-Set
@@subsection Instruction Set Syntax
Two slightly different syntaxes are support for ARM and THUMB
instructions.  The default, @@code{divided}, uses the old style where
ARM and THUMB instructions had their own, separate syntaxes.  The new,
@@code{unified} syntax, which can be selected via the @@code{.syntax}
directive, and has the following main features:

@@itemize @@bullet
@@item
Immediate operands do not require a @@code{#} prefix.

@@item
The @@code{IT} instruction may appear, and if it does it is validated
against subsequent conditional affixes.  In ARM mode it does not
generate machine code, in THUMB mode it does.

@@item
For ARM instructions the conditional affixes always appear at the end
of the instruction.  For THUMB instructions conditional affixes can be
used, but only inside the scope of an @@code{IT} instruction.

@@item
All of the instructions new to the V6T2 architecture (and later) are
available.  (Only a few such instructions can be written in the
@@code{divided} syntax).

@@item
The @@code{.N} and @@code{.W} suffixes are recognized and honored.

@@item
All instructions set the flags if and only if they have an @@code{s}
affix.
@@end itemize

@@node ARM-Chars
@@subsection Special Characters

@@cindex line comment character, ARM
@@cindex ARM line comment character
The presence of a @@samp{@@@@} anywhere on a line indicates the start of
a comment that extends to the end of that line.

If a @@samp{#} appears as the first character of a line then the whole
line is treated as a comment, but in this case the line could also be
a logical line number directive (@@pxref{Comments}) or a preprocessor
control command (@@pxref{Preprocessing}).

@@cindex line separator, ARM
@@cindex statement separator, ARM
@@cindex ARM line separator
The @@samp{;} character can be used instead of a newline to separate
statements.

@@cindex immediate character, ARM
@@cindex ARM immediate character
Either @@samp{#} or @@samp{$} can be used to indicate immediate operands.

@@cindex identifiers, ARM
@@cindex ARM identifiers
*TODO* Explain about /data modifier on symbols.

@@node ARM-Regs
@@subsection Register Names

@@cindex ARM register names
@@cindex register names, ARM
*TODO* Explain about ARM register naming, and the predefined names.

@@node ARM-Relocations
@@subsection ARM relocation generation

@@cindex data relocations, ARM
@@cindex ARM data relocations
Specific data relocations can be generated by putting the relocation name
in parentheses after the symbol name.  For example:

@@smallexample
        .word foo(TARGET1)
@@end smallexample

This will generate an @@samp{R_ARM_TARGET1} relocation against the symbol
@@var{foo}.
The following relocations are supported:
@@code{GOT},
@@code{GOTOFF},
@@code{TARGET1},
@@code{TARGET2},
@@code{SBREL},
@@code{TLSGD},
@@code{TLSLDM},
@@code{TLSLDO},
@@code{TLSDESC},
@@code{TLSCALL},
@@code{GOTTPOFF},
@@code{GOT_PREL}
and
@@code{TPOFF}.

For compatibility with older toolchains the assembler also accepts
@@code{(PLT)} after branch targets.  On legacy targets this will
generate the deprecated @@samp{R_ARM_PLT32} relocation.  On EABI
targets it will encode either the @@samp{R_ARM_CALL} or
@@samp{R_ARM_JUMP24} relocation, as appropriate.

@@cindex MOVW and MOVT relocations, ARM
Relocations for @@samp{MOVW} and @@samp{MOVT} instructions can be generated
by prefixing the value with @@samp{#:lower16:} and @@samp{#:upper16}
respectively.  For example to load the 32-bit address of foo into r0:

@@smallexample
        MOVW r0, #:lower16:foo
        MOVT r0, #:upper16:foo
@@end smallexample

@@node ARM-Neon-Alignment
@@subsection NEON Alignment Specifiers

@@cindex alignment for NEON instructions
Some NEON load/store instructions allow an optional address
alignment qualifier.
The ARM documentation specifies that this is indicated by
@@samp{@@@@ @@var{align}}. However GAS already interprets
the @@samp{@@@@} character as a "line comment" start,
so @@samp{: @@var{align}} is used instead.  For example:

@@smallexample
        vld1.8 @@{q0@@}, [r0, :128]
@@end smallexample

@@node ARM Floating Point
@@section Floating Point

@@cindex floating point, ARM (@@sc{ieee})
@@cindex ARM floating point (@@sc{ieee})
The ARM family uses @@sc{ieee} floating-point numbers.

@@node ARM Directives
@@section ARM Machine Directives

@@cindex machine directives, ARM
@@cindex ARM machine directives
@@table @@code

@@c AAAAAAAAAAAAAAAAAAAAAAAAA

@@cindex @@code{.2byte} directive, ARM
@@cindex @@code{.4byte} directive, ARM
@@cindex @@code{.8byte} directive, ARM
@@item .2byte @@var{expression} [, @@var{expression}]*
@@itemx .4byte @@var{expression} [, @@var{expression}]*
@@itemx .8byte @@var{expression} [, @@var{expression}]*
These directives write 2, 4 or 8 byte values to the output section.

@@cindex @@code{.align} directive, ARM
@@item .align @@var{expression} [, @@var{expression}]
This is the generic @@var{.align} directive.  For the ARM however if the
first argument is zero (ie no alignment is needed) the assembler will
behave as if the argument had been 2 (ie pad to the next four byte
boundary).  This is for compatibility with ARM's own assembler.

@@cindex @@code{.arch} directive, ARM
@@item .arch @@var{name}
Select the target architecture.  Valid values for @@var{name} are the same as
for the @@option{-march} commandline option.

Specifying @@code{.arch} clears any previously selected architecture
extensions.

@@cindex @@code{.arch_extension} directive, ARM
@@item .arch_extension @@var{name}
Add or remove an architecture extension to the target architecture.  Valid
values for @@var{name} are the same as those accepted as architectural
extensions by the @@option{-mcpu} commandline option.

@@code{.arch_extension} may be used multiple times to add or remove extensions
incrementally to the architecture being compiled for.

@@cindex @@code{.arm} directive, ARM
@@item .arm
This performs the same action as @@var{.code 32}.

@@anchor{arm_pad}
@@cindex @@code{.pad} directive, ARM
@@item .pad #@@var{count}
Generate unwinder annotations for a stack adjustment of @@var{count} bytes.
A positive value indicates the function prologue allocated stack space by
decrementing the stack pointer.

@@c BBBBBBBBBBBBBBBBBBBBBBBBBB

@@cindex @@code{.bss} directive, ARM
@@item .bss
This directive switches to the @@code{.bss} section.

@@c CCCCCCCCCCCCCCCCCCCCCCCCCC

@@cindex @@code{.cantunwind} directive, ARM
@@item .cantunwind
Prevents unwinding through the current function.  No personality routine
or exception table data is required or permitted.

@@cindex @@code{.code} directive, ARM
@@item .code @@code{[16|32]}
This directive selects the instruction set being generated. The value 16
selects Thumb, with the value 32 selecting ARM.

@@cindex @@code{.cpu} directive, ARM
@@item .cpu @@var{name}
Select the target processor.  Valid values for @@var{name} are the same as
for the @@option{-mcpu} commandline option.

Specifying @@code{.cpu} clears any previously selected architecture
extensions.

@@c DDDDDDDDDDDDDDDDDDDDDDDDDD

@@cindex @@code{.dn} and @@code{.qn} directives, ARM
@@item @@var{name} .dn @@var{register name} [@@var{.type}] [[@@var{index}]]
@@itemx @@var{name} .qn @@var{register name} [@@var{.type}] [[@@var{index}]]

The @@code{dn} and @@code{qn} directives are used to create typed
and/or indexed register aliases for use in Advanced SIMD Extension
(Neon) instructions.  The former should be used to create aliases
of double-precision registers, and the latter to create aliases of
quad-precision registers.

If these directives are used to create typed aliases, those aliases can
be used in Neon instructions instead of writing types after the mnemonic
or after each operand.  For example:

@@smallexample
        x .dn d2.f32
        y .dn d3.f32
        z .dn d4.f32[1]
        vmul x,y,z
@@end smallexample

This is equivalent to writing the following:

@@smallexample
        vmul.f32 d2,d3,d4[1]
@@end smallexample

Aliases created using @@code{dn} or @@code{qn} can be destroyed using
@@code{unreq}.

@@c EEEEEEEEEEEEEEEEEEEEEEEEEE

@@cindex @@code{.eabi_attribute} directive, ARM
@@item .eabi_attribute @@var{tag}, @@var{value}
Set the EABI object attribute @@var{tag} to @@var{value}.

The @@var{tag} is either an attribute number, or one of the following:
@@code{Tag_CPU_raw_name}, @@code{Tag_CPU_name}, @@code{Tag_CPU_arch},
@@code{Tag_CPU_arch_profile}, @@code{Tag_ARM_ISA_use},
@@code{Tag_THUMB_ISA_use}, @@code{Tag_FP_arch}, @@code{Tag_WMMX_arch},
@@code{Tag_Advanced_SIMD_arch}, @@code{Tag_PCS_config},
@@code{Tag_ABI_PCS_R9_use}, @@code{Tag_ABI_PCS_RW_data},
@@code{Tag_ABI_PCS_RO_data}, @@code{Tag_ABI_PCS_GOT_use},
@@code{Tag_ABI_PCS_wchar_t}, @@code{Tag_ABI_FP_rounding},
@@code{Tag_ABI_FP_denormal}, @@code{Tag_ABI_FP_exceptions},
@@code{Tag_ABI_FP_user_exceptions}, @@code{Tag_ABI_FP_number_model},
@@code{Tag_ABI_align_needed}, @@code{Tag_ABI_align_preserved},
@@code{Tag_ABI_enum_size}, @@code{Tag_ABI_HardFP_use},
@@code{Tag_ABI_VFP_args}, @@code{Tag_ABI_WMMX_args},
@@code{Tag_ABI_optimization_goals}, @@code{Tag_ABI_FP_optimization_goals},
@@code{Tag_compatibility}, @@code{Tag_CPU_unaligned_access},
@@code{Tag_FP_HP_extension}, @@code{Tag_ABI_FP_16bit_format},
@@code{Tag_MPextension_use}, @@code{Tag_DIV_use},
@@code{Tag_nodefaults}, @@code{Tag_also_compatible_with},
@@code{Tag_conformance}, @@code{Tag_T2EE_use},
@@code{Tag_Virtualization_use}

The @@var{value} is either a @@code{number}, @@code{"string"}, or
@@code{number, "string"} depending on the tag.

Note - the following legacy values are also accepted by @@var{tag}:
@@code{Tag_VFP_arch}, @@code{Tag_ABI_align8_needed},
@@code{Tag_ABI_align8_preserved}, @@code{Tag_VFP_HP_extension},

@@cindex @@code{.even} directive, ARM
@@item .even
This directive aligns to an even-numbered address.

@@cindex @@code{.extend} directive, ARM
@@cindex @@code{.ldouble} directive, ARM
@@item .extend  @@var{expression} [, @@var{expression}]*
@@itemx .ldouble  @@var{expression} [, @@var{expression}]*
These directives write 12byte long double floating-point values to the
output section.  These are not compatible with current ARM processors
or ABIs.

@@c FFFFFFFFFFFFFFFFFFFFFFFFFF

@@anchor{arm_fnend}
@@cindex @@code{.fnend} directive, ARM
@@item .fnend
Marks the end of a function with an unwind table entry.  The unwind index
table entry is created when this directive is processed.

If no personality routine has been specified then standard personality
routine 0 or 1 will be used, depending on the number of unwind opcodes
required.

@@anchor{arm_fnstart}
@@cindex @@code{.fnstart} directive, ARM
@@item .fnstart
Marks the start of a function with an unwind table entry.

@@cindex @@code{.force_thumb} directive, ARM
@@item .force_thumb
This directive forces the selection of Thumb instructions, even if the
target processor does not support those instructions

@@cindex @@code{.fpu} directive, ARM
@@item .fpu @@var{name}
Select the floating-point unit to assemble for.  Valid values for @@var{name}
are the same as for the @@option{-mfpu} commandline option.

@@c GGGGGGGGGGGGGGGGGGGGGGGGGG
@@c HHHHHHHHHHHHHHHHHHHHHHHHHH

@@cindex @@code{.handlerdata} directive, ARM
@@item .handlerdata
Marks the end of the current function, and the start of the exception table
entry for that function.  Anything between this directive and the
@@code{.fnend} directive will be added to the exception table entry.

Must be preceded by a @@code{.personality} or @@code{.personalityindex}
directive.

@@c IIIIIIIIIIIIIIIIIIIIIIIIII

@@cindex @@code{.inst} directive, ARM
@@item .inst @@var{opcode} [ , @@dots{} ]
@@itemx .inst.n @@var{opcode} [ , @@dots{} ]
@@itemx .inst.w @@var{opcode} [ , @@dots{} ]
Generates the instruction corresponding to the numerical value @@var{opcode}.
@@code{.inst.n} and @@code{.inst.w} allow the Thumb instruction size to be
specified explicitly, overriding the normal encoding rules.

@@c JJJJJJJJJJJJJJJJJJJJJJJJJJ
@@c KKKKKKKKKKKKKKKKKKKKKKKKKK
@@c LLLLLLLLLLLLLLLLLLLLLLLLLL

@@item .ldouble  @@var{expression} [, @@var{expression}]*
See @@code{.extend}.

@@cindex @@code{.ltorg} directive, ARM
@@item .ltorg
This directive causes the current contents of the literal pool to be
dumped into the current section (which is assumed to be the .text
section) at the current location (aligned to a word boundary).
@@code{GAS} maintains a separate literal pool for each section and each
sub-section.  The @@code{.ltorg} directive will only affect the literal
pool of the current section and sub-section.  At the end of assembly
all remaining, un-empty literal pools will automatically be dumped.

Note - older versions of @@code{GAS} would dump the current literal
pool any time a section change occurred.  This is no longer done, since
it prevents accurate control of the placement of literal pools.

@@c MMMMMMMMMMMMMMMMMMMMMMMMMM

@@cindex @@code{.movsp} directive, ARM
@@item .movsp @@var{reg} [, #@@var{offset}]
Tell the unwinder that @@var{reg} contains an offset from the current
stack pointer.  If @@var{offset} is not specified then it is assumed to be
zero.

@@c NNNNNNNNNNNNNNNNNNNNNNNNNN
@@c OOOOOOOOOOOOOOOOOOOOOOOOOO

@@cindex @@code{.object_arch} directive, ARM
@@item .object_arch @@var{name}
Override the architecture recorded in the EABI object attribute section.
Valid values for @@var{name} are the same as for the @@code{.arch} directive.
Typically this is useful when code uses runtime detection of CPU features.

@@c PPPPPPPPPPPPPPPPPPPPPPPPPP

@@cindex @@code{.packed} directive, ARM
@@item .packed  @@var{expression} [, @@var{expression}]*
This directive writes 12-byte packed floating-point values to the
output section.  These are not compatible with current ARM processors
or ABIs.

@@cindex @@code{.pad} directive, ARM
@@item .pad #@@var{count}
Generate unwinder annotations for a stack adjustment of @@var{count} bytes.
A positive value indicates the function prologue allocated stack space by
decrementing the stack pointer.

@@cindex @@code{.personality} directive, ARM
@@item .personality @@var{name}
Sets the personality routine for the current function to @@var{name}.

@@cindex @@code{.personalityindex} directive, ARM
@@item .personalityindex @@var{index}
Sets the personality routine for the current function to the EABI standard
routine number @@var{index}

@@cindex @@code{.pool} directive, ARM
@@item .pool
This is a synonym for .ltorg.

@@c QQQQQQQQQQQQQQQQQQQQQQQQQQ
@@c RRRRRRRRRRRRRRRRRRRRRRRRRR

@@cindex @@code{.req} directive, ARM
@@item @@var{name} .req @@var{register name}
This creates an alias for @@var{register name} called @@var{name}.  For
example:

@@smallexample
        foo .req r0
@@end smallexample

@@c SSSSSSSSSSSSSSSSSSSSSSSSSS

@@anchor{arm_save}
@@cindex @@code{.save} directive, ARM
@@item .save @@var{reglist}
Generate unwinder annotations to restore the registers in @@var{reglist}.
The format of @@var{reglist} is the same as the corresponding store-multiple
instruction.

@@smallexample
@@exdent @@emph{core registers}
  .save @@{r4, r5, r6, lr@@}
  stmfd sp!, @@{r4, r5, r6, lr@@}
@@exdent @@emph{FPA registers}
  .save f4, 2
  sfmfd f4, 2, [sp]!
@@exdent @@emph{VFP registers}
  .save @@{d8, d9, d10@@}
  fstmdx sp!, @@{d8, d9, d10@@}
@@exdent @@emph{iWMMXt registers}
  .save @@{wr10, wr11@@}
  wstrd wr11, [sp, #-8]!
  wstrd wr10, [sp, #-8]!
or
  .save wr11
  wstrd wr11, [sp, #-8]!
  .save wr10
  wstrd wr10, [sp, #-8]!
@@end smallexample

@@anchor{arm_setfp}
@@cindex @@code{.setfp} directive, ARM
@@item .setfp @@var{fpreg}, @@var{spreg} [, #@@var{offset}]
Make all unwinder annotations relative to a frame pointer.  Without this
the unwinder will use offsets from the stack pointer.

The syntax of this directive is the same as the @@code{add} or @@code{mov}
instruction used to set the frame pointer.  @@var{spreg} must be either
@@code{sp} or mentioned in a previous @@code{.movsp} directive.

@@smallexample
.movsp ip
mov ip, sp
@@dots{}
.setfp fp, ip, #4
add fp, ip, #4
@@end smallexample

@@cindex @@code{.secrel32} directive, ARM
@@item .secrel32 @@var{expression} [, @@var{expression}]*
This directive emits relocations that evaluate to the section-relative
offset of each expression's symbol.  This directive is only supported
for PE targets.

@@cindex @@code{.syntax} directive, ARM
@@item .syntax [@@code{unified} | @@code{divided}]
This directive sets the Instruction Set Syntax as described in the
@@ref{ARM-Instruction-Set} section.

@@c TTTTTTTTTTTTTTTTTTTTTTTTTT

@@cindex @@code{.thumb} directive, ARM
@@item .thumb
This performs the same action as @@var{.code 16}.

@@cindex @@code{.thumb_func} directive, ARM
@@item .thumb_func
This directive specifies that the following symbol is the name of a
Thumb encoded function.  This information is necessary in order to allow
the assembler and linker to generate correct code for interworking
between Arm and Thumb instructions and should be used even if
interworking is not going to be performed.  The presence of this
directive also implies @@code{.thumb}

This directive is not neccessary when generating EABI objects.  On these
targets the encoding is implicit when generating Thumb code.

@@cindex @@code{.thumb_set} directive, ARM
@@item .thumb_set
This performs the equivalent of a @@code{.set} directive in that it
creates a symbol which is an alias for another symbol (possibly not yet
defined).  This directive also has the added property in that it marks
the aliased symbol as being a thumb function entry point, in the same
way that the @@code{.thumb_func} directive does.

@@cindex @@code{.tlsdescseq} directive, ARM
@@item .tlsdescseq @@var{tls-variable}
This directive is used to annotate parts of an inlined TLS descriptor
trampoline.  Normally the trampoline is provided by the linker, and
this directive is not needed.

@@c UUUUUUUUUUUUUUUUUUUUUUUUUU

@@cindex @@code{.unreq} directive, ARM
@@item .unreq @@var{alias-name}
This undefines a register alias which was previously defined using the
@@code{req}, @@code{dn} or @@code{qn} directives.  For example:

@@smallexample
        foo .req r0
        .unreq foo
@@end smallexample

An error occurs if the name is undefined.  Note - this pseudo op can
be used to delete builtin in register name aliases (eg 'r0').  This
should only be done if it is really necessary.

@@cindex @@code{.unwind_raw} directive, ARM
@@item .unwind_raw @@var{offset}, @@var{byte1}, @@dots{}
Insert one of more arbitary unwind opcode bytes, which are known to adjust
the stack pointer by @@var{offset} bytes.

For example @@code{.unwind_raw 4, 0xb1, 0x01} is equivalent to
@@code{.save @@{r0@@}}

@@c VVVVVVVVVVVVVVVVVVVVVVVVVV

@@cindex @@code{.vsave} directive, ARM
@@item .vsave @@var{vfp-reglist}
Generate unwinder annotations to restore the VFP registers in @@var{vfp-reglist}
using FLDMD.  Also works for VFPv3 registers
that are to be restored using VLDM.
The format of @@var{vfp-reglist} is the same as the corresponding store-multiple
instruction.

@@smallexample
@@exdent @@emph{VFP registers}
  .vsave @@{d8, d9, d10@@}
  fstmdd sp!, @@{d8, d9, d10@@}
@@exdent @@emph{VFPv3 registers}
  .vsave @@{d15, d16, d17@@}
  vstm sp!, @@{d15, d16, d17@@}
@@end smallexample

Since FLDMX and FSTMX are now deprecated, this directive should be
used in favour of @@code{.save} for saving VFP registers for ARMv6 and above.

@@c WWWWWWWWWWWWWWWWWWWWWWWWWW
@@c XXXXXXXXXXXXXXXXXXXXXXXXXX
@@c YYYYYYYYYYYYYYYYYYYYYYYYYY
@@c ZZZZZZZZZZZZZZZZZZZZZZZZZZ

@@end table

@@node ARM Opcodes
@@section Opcodes

@@cindex ARM opcodes
@@cindex opcodes for ARM
@@code{@@value{AS}} implements all the standard ARM opcodes.  It also
implements several pseudo opcodes, including several synthetic load
instructions.

@@table @@code

@@cindex @@code{NOP} pseudo op, ARM
@@item NOP
@@smallexample
  nop
@@end smallexample

This pseudo op will always evaluate to a legal ARM instruction that does
nothing.  Currently it will evaluate to MOV r0, r0.

@@cindex @@code{LDR reg,=<label>} pseudo op, ARM
@@item LDR
@@smallexample
  ldr <register> , = <expression>
@@end smallexample

If expression evaluates to a numeric constant then a MOV or MVN
instruction will be used in place of the LDR instruction, if the
constant can be generated by either of these instructions.  Otherwise
the constant will be placed into the nearest literal pool (if it not
already there) and a PC relative LDR instruction will be generated.

@@cindex @@code{ADR reg,<label>} pseudo op, ARM
@@item ADR
@@smallexample
  adr <register> <label>
@@end smallexample

This instruction will load the address of @@var{label} into the indicated
register.  The instruction will evaluate to a PC relative ADD or SUB
instruction depending upon where the label is located.  If the label is
out of range, or if it is not defined in the same file (and section) as
the ADR instruction, then an error will be generated.  This instruction
will not make use of the literal pool.

@@cindex @@code{ADRL reg,<label>} pseudo op, ARM
@@item ADRL
@@smallexample
  adrl <register> <label>
@@end smallexample

This instruction will load the address of @@var{label} into the indicated
register.  The instruction will evaluate to one or two PC relative ADD
or SUB instructions depending upon where the label is located.  If a
second instruction is not needed a NOP instruction will be generated in
its place, so that this instruction is always 8 bytes long.

If the label is out of range, or if it is not defined in the same file
(and section) as the ADRL instruction, then an error will be generated.
This instruction will not make use of the literal pool.

@@end table

For information on the ARM or Thumb instruction sets, see @@cite{ARM
Software Development Toolkit Reference Manual}, Advanced RISC Machines
Ltd.

@@node ARM Mapping Symbols
@@section Mapping Symbols

The ARM ELF specification requires that special symbols be inserted
into object files to mark certain features:

@@table @@code

@@cindex @@code{$a}
@@item $a
At the start of a region of code containing ARM instructions.

@@cindex @@code{$t}
@@item $t
At the start of a region of code containing THUMB instructions.

@@cindex @@code{$d}
@@item $d
At the start of a region of data.

@@end table

The assembler will automatically insert these symbols for you - there
is no need to code them yourself.  Support for tagging symbols ($b,
$f, $p and $m) which is also mentioned in the current ARM ELF
specification is not implemented.  This is because they have been
dropped from the new EABI and so tools cannot rely upon their
presence.

@@node ARM Unwinding Tutorial
@@section Unwinding

The ABI for the ARM Architecture specifies a standard format for
exception unwind information.  This information is used when an
exception is thrown to determine where control should be transferred.
In particular, the unwind information is used to determine which
function called the function that threw the exception, and which
function called that one, and so forth.  This information is also used
to restore the values of callee-saved registers in the function
catching the exception.

If you are writing functions in assembly code, and those functions
call other functions that throw exceptions, you must use assembly
pseudo ops to ensure that appropriate exception unwind information is
generated.  Otherwise, if one of the functions called by your assembly
code throws an exception, the run-time library will be unable to
unwind the stack through your assembly code and your program will not
behave correctly.

To illustrate the use of these pseudo ops, we will examine the code
that G++ generates for the following C++ input:

@@verbatim
void callee (int *);

int
caller ()
{
  int i;
  callee (&i);
  return i;
}
@@end verbatim

This example does not show how to throw or catch an exception from
assembly code.  That is a much more complex operation and should
always be done in a high-level language, such as C++, that directly
supports exceptions.

The code generated by one particular version of G++ when compiling the
example above is:

@@verbatim
_Z6callerv:
	.fnstart
.LFB2:
	@@ Function supports interworking.
	@@ args = 0, pretend = 0, frame = 8
	@@ frame_needed = 1, uses_anonymous_args = 0
	stmfd	sp!, {fp, lr}
	.save {fp, lr}
.LCFI0:
	.setfp fp, sp, #4
	add	fp, sp, #4
.LCFI1:
	.pad #8
	sub	sp, sp, #8
.LCFI2:
	sub	r3, fp, #8
	mov	r0, r3
	bl	_Z6calleePi
	ldr	r3, [fp, #-8]
	mov	r0, r3
	sub	sp, fp, #4
	ldmfd	sp!, {fp, lr}
	bx	lr
.LFE2:
	.fnend
@@end verbatim

Of course, the sequence of instructions varies based on the options
you pass to GCC and on the version of GCC in use.  The exact
instructions are not important since we are focusing on the pseudo ops
that are used to generate unwind information.

An important assumption made by the unwinder is that the stack frame
does not change during the body of the function.  In particular, since
we assume that the assembly code does not itself throw an exception,
the only point where an exception can be thrown is from a call, such
as the @@code{bl} instruction above.  At each call site, the same saved
registers (including @@code{lr}, which indicates the return address)
must be located in the same locations relative to the frame pointer.

The @@code{.fnstart} (@@pxref{arm_fnstart,,.fnstart pseudo op}) pseudo
op appears immediately before the first instruction of the function
while the @@code{.fnend} (@@pxref{arm_fnend,,.fnend pseudo op}) pseudo
op appears immediately after the last instruction of the function.
These pseudo ops specify the range of the function.

Only the order of the other pseudos ops (e.g., @@code{.setfp} or
@@code{.pad}) matters; their exact locations are irrelevant.  In the
example above, the compiler emits the pseudo ops with particular
instructions.  That makes it easier to understand the code, but it is
not required for correctness.  It would work just as well to emit all
of the pseudo ops other than @@code{.fnend} in the same order, but
immediately after @@code{.fnstart}.

The @@code{.save} (@@pxref{arm_save,,.save pseudo op}) pseudo op
indicates registers that have been saved to the stack so that they can
be restored before the function returns.  The argument to the
@@code{.save} pseudo op is a list of registers to save.  If a register
is ``callee-saved'' (as specified by the ABI) and is modified by the
function you are writing, then your code must save the value before it
is modified and restore the original value before the function
returns.  If an exception is thrown, the run-time library restores the
values of these registers from their locations on the stack before
returning control to the exception handler.  (Of course, if an
exception is not thrown, the function that contains the @@code{.save}
pseudo op restores these registers in the function epilogue, as is
done with the @@code{ldmfd} instruction above.)

You do not have to save callee-saved registers at the very beginning
of the function and you do not need to use the @@code{.save} pseudo op
immediately following the point at which the registers are saved.
However, if you modify a callee-saved register, you must save it on
the stack before modifying it and before calling any functions which
might throw an exception.  And, you must use the @@code{.save} pseudo
op to indicate that you have done so.

The @@code{.pad} (@@pxref{arm_pad,,.pad}) pseudo op indicates a
modification of the stack pointer that does not save any registers.
The argument is the number of bytes (in decimal) that are subtracted
from the stack pointer.  (On ARM CPUs, the stack grows downwards, so
subtracting from the stack pointer increases the size of the stack.)

The @@code{.setfp} (@@pxref{arm_setfp,,.setfp pseudo op}) pseudo op
indicates the register that contains the frame pointer.  The first
argument is the register that is set, which is typically @@code{fp}.
The second argument indicates the register from which the frame
pointer takes its value.  The third argument, if present, is the value
(in decimal) added to the register specified by the second argument to
compute the value of the frame pointer.  You should not modify the
frame pointer in the body of the function.

If you do not use a frame pointer, then you should not use the
@@code{.setfp} pseudo op.  If you do not use a frame pointer, then you
should avoid modifying the stack pointer outside of the function
prologue.  Otherwise, the run-time library will be unable to find
saved registers when it is unwinding the stack.

The pseudo ops described above are sufficient for writing assembly
code that calls functions which may throw exceptions.  If you need to
know more about the object-file format used to represent unwind
information, you may consult the @@cite{Exception Handling ABI for the
ARM Architecture} available from @@uref{http://infocenter.arm.com}.
@


1.92
log
@	PR gas/15212
	* doc/c-arc.texi (ARC Directives): Use @@code instead of @@bullte
	for table format.
	* doc/c-arm.texi (ARM-Instruction-Set): Likewise.  Also add text
	to the @@item directives.
	(ARM-Neon-Alignment): Move to correct place in the document.
	* doc/c-cr16.texi (CR16 Operand Qualifiers): Fix up table
	formatting.
	* doc/c-tic54x.texi (TIC54X-Subsyms): Correct use of
	@@smallexample.
@
text
@d392 2
a393 2
@@table @@code
@@item 1
d396 1
a396 1
@@item 2
d401 1
a401 1
@@item 3
d406 1
a406 1
@@item 4
d411 1
a411 1
@@item 5
d414 1
a414 1
@@item 6
d417 1
a417 1
@@end table
@


1.91
log
@2013-02-25  Terry Guo  <terry.guo@@arm.com>

	* config/tc-arm.c (arm_cpus): Add cortex-r7 entry.
	* doc/c-arm.texi: Add cortex-r7 and missing cortex-r5 to
	list of accepted CPUs.
@
text
@d1 1
a1 2
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
@@c 2006, 2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.
d392 2
a393 2
@@table @@bullet
@@item
d396 1
a396 1
@@item
d401 1
a401 1
@@item
d406 1
a406 1
@@item
d411 1
a411 1
@@item
d414 1
a414 1
@@item
a452 22
@@node ARM-Neon-Alignment
@@subsection NEON Alignment Specifiers

@@cindex alignment for NEON instructions
Some NEON load/store instructions allow an optional address
alignment qualifier.
The ARM documentation specifies that this is indicated by
@@samp{@@@@ @@var{align}}. However GAS already interprets
the @@samp{@@@@} character as a "line comment" start,
so @@samp{: @@var{align}} is used instead.  For example:

@@smallexample
        vld1.8 @@{q0@@}, [r0, :128]
@@end smallexample

@@node ARM Floating Point
@@section Floating Point

@@cindex floating point, ARM (@@sc{ieee})
@@cindex ARM floating point (@@sc{ieee})
The ARM family uses @@sc{ieee} floating-point numbers.

d499 22
@


1.90
log
@Remove trailing white spaces on gas

	* app.c: Remove trailing white spaces.
	* as.c: Likewise.
	* as.h: Likewise.
	* cond.c: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.h: Likewise.
	* ecoff.c: Likewise.
	* input-file.c: Likewise.
	* itbl-lex.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* subsegs.c: Likewise.
	* symbols.c: Likewise.
	* write.c: Likewise.
	* config/tc-i386.c: Likewise.
	* doc/Makefile.am: Likewise.
	* doc/Makefile.in: Likewise.
	* doc/c-aarch64.texi: Likewise.
	* doc/c-alpha.texi: Likewise.
	* doc/c-arc.texi: Likewise.
	* doc/c-arm.texi: Likewise.
	* doc/c-avr.texi: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/c-cr16.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-d30v.texi: Likewise.
	* doc/c-h8300.texi: Likewise.
	* doc/c-hppa.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i386.texi: Likewise.
	* doc/c-i860.texi: Likewise.
	* doc/c-m32c.texi: Likewise.
	* doc/c-m32r.texi: Likewise.
	* doc/c-m68hc11.texi: Likewise.
	* doc/c-m68k.texi: Likewise.
	* doc/c-microblaze.texi: Likewise.
	* doc/c-mips.texi: Likewise.
	* doc/c-msp430.texi: Likewise.
	* doc/c-mt.texi: Likewise.
	* doc/c-s390.texi: Likewise.
	* doc/c-score.texi: Likewise.
	* doc/c-sh.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-tic6x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-xc16x.texi: Likewise.
	* doc/c-xgate.texi: Likewise.
	* doc/c-xtensa.texi: Likewise.
	* doc/c-z80.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@d125 2
@


1.89
log
@	* bfd/elf32-arm.c (v8): New array.
	(tag_cpu_arch_combine): Add support for ARMv8 attributes.
	(elf32_arm_merge_eabi_attributes): Likewise.
	(VFP_VERSION_COUNT): New define.
	* binutils/readelf.c (arm_attr_tag_CPU_arch): Update for ARMv8.
	(arm_attr_tag_FP_arch): Likewise.
	(arm_attr_tag_Advanced_SIMD_arch): Likewise.
	* gas/config/tc-arm.h (arm_ext_v8): New variable.
	(fpu_vfp_ext_armv8): Likewise.
	(fpu_neon_ext_armv8): Likewise.
	(fpu_crypto_ext_armv8): Likewise.
	(arm_archs): Add armv8-a.
	(arm_extensions): Add crypto, fp, and simd.
	(arm_fpus): Add fp-armv8, neon-fp-armv8, crypto-neon-fp-armv8.
	(cpu_arch_ver): Add support for ARMv8.
	(aeabi_set_public_sttributes): Likewise.
	* gas/doc/c-arm.texi (ARM Options): Document new architecture and
	extension options for ARMv8.
	* gas/testsuite/gas/arm/attr-march-all.d: Update for change in expected
	output.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv4-d16.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv4.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv8-a+crypto.d: New testcase.
	* gas/testsuite/gas/arm/attr-march-armv8-a+fp.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv8-a+simd.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv8-a.d: Likewise.
	* include/elf/arm.h (TAG_CPU_ARCH_V8): New define.
	(MAX_TAG_CPU_ARCH): Update.
	* include/opcode/arm.h (ARM_EXT_V8): New define.
	(FPU_VFP_EXT_ARMV8): Likewise.
	(FPU_NEON_EXT_ARMV8): Likewise.
	(FPU_CRYPTO_EXT_ARMV8): Likewise.
	(ARM_AEXT_V8A): Likewise.
	(FPU_VFP_ARMV8): Likwise.
	(FPU_NEON_ARMV8): Likewise.
	(FPU_CRYPTO_ARMV8): Likewise.
	(FPU_ARCH_VFP_ARMV8): Likewise.
	(FPU_ARCH_NEON_VFP_ARMV8): Likewise.
	(FPU_ARCH_CRYPTO_NEON_VFP_ARMV8): Likewise.
	(ARM_ARCH_V8A): Likwise.
	(ARM_ARCH_V8A_FP): Likewise.
	(ARM_ARCH_V8A_SIMD): Likewise.
	(ARM_ARCH_V8A_CRYPTO): Likewise.
	* ld/testsuite/ld-arm/arm-elf.exp: Add new testcases.
	* ld/testsuite/ld-arm/attr-merge-vfp-3.d: Update for change in expected
	output.
	* ld/testsuite/ld-arm/attr-merge-vfp-3r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-4.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-4r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-5.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-5r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-7.d: New testcase.
	* ld/testsuite/ld-arm/attr-merge-vfp-7r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-armv8-hard.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-armv8.s: Likewise.
@
text
@d41 1
a41 1
recognized: 
d134 1
a134 1
@@code{xscale}.  
d138 2
a139 2
In addition to the basic instruction set, the assembler can be told to 
accept various extension mnemonics that extend the processor using the 
d141 1
a141 1
is equivalent to specifying @@code{-mcpu=ep9312}.  
d143 1
a143 1
Multiple extensions may be specified, separated by a @@code{+}.  The 
d146 1
a146 1
Some extensions may be restricted to particular architectures; this is 
d149 4
a152 4
Extension mnemonics may also be removed from those the assembler accepts.  
This is done be prepending @@code{no} to the option that adds the extension.  
Extensions that are removed should be listed after all extensions which have 
been added, again in ascending alphabetical order.  For example, 
d167 1
a167 1
@@code{virt} (Virtualization Extensions for v7-A architecture, implies 
d176 2
a177 2
will not execute on the target architecture.  The following architecture 
names are recognized: 
d221 1
a221 1
an instruction which will not execute on the target floating point unit.  
d263 2
a264 2
The default is dependent on the processor selected.  For Architecture 5 or 
later, the default is to assembler for VFP instructions; for earlier 
d270 1
a270 1
instructions; that is, it should behave as though the file starts with a 
d306 1
a306 1
This option specifies that the output generated by the assembler should 
d549 1
a549 1
Specifying @@code{.arch} clears any previously selected architecture 
d554 2
a555 2
Add or remove an architecture extension to the target architecture.  Valid 
values for @@var{name} are the same as those accepted as architectural 
d595 1
a595 1
Specifying @@code{.cpu} clears any previously selected architecture 
d661 1
a661 1
@@code{Tag_VFP_arch}, @@code{Tag_ABI_align8_needed}, 
d953 1
a953 1
instructions. 
d967 1
a967 1
@@item LDR 
d992 1
a992 1
@@item ADRL 
d1068 2
a1069 2
int 
caller () 
d1073 1
a1073 1
  return i; 
d1130 1
a1130 1
These pseudo ops specify the range of the function.  
@


1.88
log
@2012-03-29  Terry Guo  <terry.guo@@arm.com>

	* gas/config/tc-arm.c (arm_cpus): Add cortex-m0plus.
	* gas/doc/c-arm.texi (ARM Options): Document -mcpu=cortex-m0plus.
@
text
@d157 3
a159 1
@@code{idiv}, (Integer Divide Extensions for v7-A and v7-R architectures),
d166 1
d205 1
d248 1
d254 2
d257 1
a257 1
@@code{neon-vfpv4}.
@


1.88.2.1
log
@	Apply mainline patches

bfd/:
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* elf32-arm.c (v8): New array.
	(tag_cpu_arch_combine): Add support for ARMv8 attributes.
	(elf32_arm_merge_eabi_attributes): Likewise.
	(VFP_VERSION_COUNT): New define.

gas/:
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (ARM_ENC_TAB): Add sha1h and sha2op entries.
	(do_sha1h): New function.
	(do_sha1su1): Likewise.
	(do_sha256su0): Likewise.
	(insns): Add 2 operand SHA instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add sha3op entry.
	(do_crypto_3op_1): New function.
	(do_sha1c): Likewise.
	(do_sha1p): Likewise.
	(do_sha1m): Likewise.
	(do_sha1su0): Likewise.
	(do_sha256h): Likewise.
	(do_sha256h2): Likewise.
	(do_sha256su1): Likewise.
	(insns): Add SHA 3 operand instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (neon_type_mask): Add P64 type.
	(type_chk_of_el_type): Handle P64 type.
	(el_type_of_type_chk): Likewise.
	(do_neon_vmull): Handle VMULL.P64.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add aes entry.
	(neon_type_mask): Add N_UNT.
	(neon_check_type): Don't always decay typed to untyped sizes.
	(do_crypto_2op_1): New function.
	(do_aese): Likewise.
	(do_aesd): Likewise.
	(do_aesmc.8): Likewise.
	(do_aesimc.8): Likewise.
	(insns): Add AES instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (el_type_type_check): Add handling for 16-bit
	floating point types.
	(do_neon_cvttb_2): New function.
	(do_neon_cvttb_1): Likewise.
	(do_neon_cvtb): Refactor to use do_neon_cvttb_1.
	(do_neon_cvtt): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add vrint entries.
	(neon_cvt_mode): Add neon_cvt_mode_r.
	(do_vrint_1): New function.
	(do_vrint_x): Likewise.
	(do_vrint_z): Likewise.
	(do_vrint_r): Likewise.
	(do_vrint_a): Likewise.
	(do_vrint_n): Likewise.
	(do_vrint_p): Likewise.
	(do_vrint_m): Likewise.
	(insns): Add VRINT instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add vcvta entry.
	(neon_cvt_mode): New enumeration.
	(do_vfp_nsyn_cvt_fpv8): New function.
	(do_neon_cvt_1): Add support for new conversions.
	(do_neon_cvtr): Use neon_cvt_mode enumerator.
	(do_neon_cvt): Likewise.
	(do_neon_cvta): New function.
	(do_neon_cvtn): Likewise.
	(do_neon_cvtp): Likewise.
	(do_neon_cvtm): Likewise.
	(insns): Add new VCVT instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm>
	* config/tc-arm.c (CVT_FLAVOUR_VAR): New define.
	(CVT_VAR): New helper define.
	(neon_cvt_flavour): New enumeration, function renamed...
	(get_neon_cvt_flavour): ...to this.
	(do_vfp_nsyn_cvt): Update to use new neon_cvt_flavour.
	(do_vfp_nsyn_cvtz): Likewise.
	(do_neon_cvt_1): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add vmaxnm, vminnm entries.
	(vfp_or_neon_is_neon_bits): Add NEON_CHECK_ARCH8 enumerator.
	(vfp_or_neon_is_neon): Add check for SIMD for ARMv8.
	(do_maxnm): New function.
	(insns): Add vmaxnm, vminnm entries.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (NEON_ENC_TAB): Add entries for VSEL.
	(NEON_ENC_FPV8_): New define.
	(do_vfp_nsyn_fpv8): New function.
	(do_vsel): Likewise.
	(insns): Add VSEL instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (do_rm_rn): New function.
	(do_strlex): Likewise.
	(do_t_strlex): Likewise.
	(insns): Add support for LDRA/STRL instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (do_t_bkpt_hlt1): New function.
	(do_t_hlt): New function.
	(do_t_bkpt): Use do_t_bkpt_hlt1.
	(insns): Add HLT.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (insns): Add DCPS instruction.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (T16_32_TAB): Add _sevl.
	(insns): Add SEVL.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (asm_barrier_opt): Add arch field.
	(mark_feature_used): New function.
	(parse_barrier): Check specified option is valid for the
	specified architecture.
	(UL_BARRIER): New macro.
	(barrier_opt_names): Update for new barrier options.

	2012-08-24  Matthew Gretton-Dann <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (do_setend): Warn on deprecated SETEND.
	(do_t_setend): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (do_t_it): Fully initialise now_it.
	(new_automatic_it_block): Likewise.
	(handle_it_block): Record whether current instruction is
	conditionally executed.
	* config/tc-arm.c (depr_insn_mask): New structure.
	(depr_it_insns): New variable.
	(it_fsm_post_encode): Warn on deprecated uses.
	* config/tc-arm.h (current_it): Add new fields.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (deprecated_coproc_regs_s): New structure.
	(deprecated_coproc_regs): New variable.
	(deprecated_coproc_reg_count): Likewise.
	(do_co_reg): Error on obsolete & warn on deprecated registers.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.c (check_obsolete): New function.
	(do_rd_rm_rn): Check swp{b} for obsoletion.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* config/tc-arm.h (arm_ext_v8): New variable.
	(fpu_vfp_ext_armv8): Likewise.
	(fpu_neon_ext_armv8): Likewise.
	(fpu_crypto_ext_armv8): Likewise.
	(arm_archs): Add armv8-a.
	(arm_extensions): Add crypto, fp, and simd.
	(arm_fpus): Add fp-armv8, neon-fp-armv8, crypto-neon-fp-armv8.
	(cpu_arch_ver): Add support for ARMv8.
	(aeabi_set_public_sttributes): Likewise.
	* doc/c-arm.texi (ARM Options): Document new architecture and
	extension options for ARMv8.

gas/testsuite/:
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+crypto.s: Update testcase.
	* gas/arm/armv8-a+crypto.d: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+crypto.d: Update testcase.
	* gas/arm/armv8-a+crypto.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+crypto.d: Update testcase.
	* gas/arm/armv8-a+crypto.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+crypto.d: New testcase.
	* gas/arm/armv8-a+crypto.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+fp.d: Update testcase.
	* gas/arm/armv8-a+fp.s: Likewise.
	* gas/arm/half-prec-vfpv3.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+fpv5.d: Update testcase.
	* gas/arm/armv8-a+fpv5.s: Likewise.
	* gas/arm/armv8-a+simdv3.d: Likewise.
	* gas/arm/armv8-a+simdv3.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+fp.d: Update testcase.
	* gas/arm/armv8-a+fp.s: Likewise.
	* gas/arm/armv8-a+simd.d: Likewise.
	* gas/arm/armv8-a+simd.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/testsuite/gas/armv8-a+fp.d: Update testcase.
	* gas/testsuite/gas/armv8-a+fp.s: Likewise.
	* gas/testsuite/gas/armv8-a+simd.d: New testcase.
	* gas/testsuite/gas/armv8-a+simd.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a+fp.d: New testcase.
	* gas/arm/armv8-a+fp.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-bad.l: Update testcase.
	* gas/arm/armv8-a-bad.s: Likewise.
	* gas/arm/armv8-a.d: Likewise.
	* gas/arm/armv8-a.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-bad.l: Update for HLT.
	* gas/arm/armv8-a-bad.s: Likewise.
	* gas/arm/armv8-a.d: Likewise.
	* gas/arm/armv8-a.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a.d: Update.
	* gas/arm/armv8-a.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a.s: New testcase.
	* gas/arm/armv8-a.d: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-barrier.s: New testcase.
	* gas/arm/armv8-a-barrier-arm.d: Likewise.
	* gas/arm/armv8-a-barrier-thumb.d: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-bad.l: Update
	* gas/arm/armv8-a-bad.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-it-bad.d: New testcase.
	* gas/arm/armv8-a-it-bad.l: Likewise.
	* gas/arm/armv8-a-it-bad.s: Likewise.
	* gas/arm/ldr-t-bad.s: Update testcase.
	* gas/arm/ldr-t.d: Likewise.
	* gas/arm/ldr-t.s: Likewise.
	* gas/arm/neon-cond-bad-inc.s: Likewise.
	* gas/arm/sp-pc-validations-bad-t: Likewise.
	* gas/arm/vfp-fma-inc.s: Likewise.
	* gas/arm/vfp-neon-syntax-inc.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-bad.l: Update testcase.
	* gas/arm/armv8-a-bad.s: Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/armv8-a-bad.d: New testcase.
	* gas/arm/armv8-a-bad.l: Likewise.
	* gas/arm/armv8-a-bad.s: Likewise.
	* gas/arm/depr-swp.l: Update for change in expected output.
	* gas/arm/depr-swp.s: Add additional test.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/arm/attr-march-all.d: Update for change in expected
	output.
	* gas/arm/attr-mfpu-vfpv4-d16.d: Likewise.
	* gas/arm/attr-mfpu-vfpv4.d: Likewise.
	* gas/arm/attr-march-armv8-a+crypto.d: New testcase.
	* gas/arm/attr-march-armv8-a+fp.d: Likewise.
	* gas/arm/attr-march-armv8-a+simd.d: Likewise.
	* gas/arm/attr-march-armv8-a.d: Likewise.

include/:
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* opcode/arm.h (ARM_CPU_IS_ANY): New define.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* elf/arm.h (TAG_CPU_ARCH_V8): New define.
	(MAX_TAG_CPU_ARCH): Update.
	* opcode/arm.h (ARM_EXT_V8): New define.
	(FPU_VFP_EXT_ARMV8): Likewise.
	(FPU_NEON_EXT_ARMV8): Likewise.
	(FPU_CRYPTO_EXT_ARMV8): Likewise.
	(ARM_AEXT_V8A): Likewise.
	(FPU_VFP_ARMV8): Likwise.
	(FPU_NEON_ARMV8): Likewise.
	(FPU_CRYPTO_ARMV8): Likewise.
	(FPU_ARCH_VFP_ARMV8): Likewise.
	(FPU_ARCH_NEON_VFP_ARMV8): Likewise.
	(FPU_ARCH_CRYPTO_NEON_VFP_ARMV8): Likewise.
	(ARM_ARCH_V8A): Likwise.
	(ARM_ARCH_V8A_FP): Likewise.
	(ARM_ARCH_V8A_SIMD): Likewise.
	(ARM_ARCH_V8A_CRYPTO): Likewise.

ld/testsuite/:
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* ld-arm/arm-elf.exp: Add new testcases.
	* ld-arm/attr-merge-vfp-3.d: Update for change in expected
	output.
	* ld-arm/attr-merge-vfp-3r.d: Likewise.
	* ld-arm/attr-merge-vfp-4.d: Likewise.
	* ld-arm/attr-merge-vfp-4r.d: Likewise.
	* ld-arm/attr-merge-vfp-5.d: Likewise.
	* ld-arm/attr-merge-vfp-5r.d: Likewise.
	* ld-arm/attr-merge-vfp-7.d: New testcase.
	* ld-arm/attr-merge-vfp-7r.d: Likewise.
	* ld-arm/attr-merge-vfp-armv8-hard.s: Likewise.
	* ld-arm/attr-merge-vfp-armv8.s: Likewise.

opcodes/
	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (neon_opcodes): Add 2 operand sha instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (neon_opcodes): Add SHA 3-operand instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (neon_opcodes): Handle VMULL.P64.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (neon_opcodes): Add support for AES instructions.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (coprocessor_opcodes): Add support for HP/DP
	conversions.

	2012-08-24  Matthew  Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (coprocessor_opcodes): Add VRINT.
	(neon_opcodes): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (coprocessor_opcodes): Add support for new VCVT
	variants.
	(neon_opcodes): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (coprocessor_opcodes): Add VMAXNM/VMINNM.
	(neon_opcodes): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (coprocessor_opcodes): Add VSEL.
	(print_insn_coprocessor): Add new %<>c bitfield format
	specifier.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (arm_opcodes): Add LDRA/STRL instructions.
	(thumb32_opcodes): Likewise.
	(print_arm_insn): Add support for %<>T formatter.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (arm_opcodes): Add HLT.
	(thumb_opcodes): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (thumb32_opcodes): Add DCPS instruction.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (arm_opcodes): Add SEVL.
	(thumb_opcodes): Likewise.
	(thumb32_opcodes): Likewise.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* arm-dis.c (data_barrier_option): New function.
	(print_insn_arm): Use data_barrier_option.
	(print_insn_thumb32): Use data_barrier_option.

	2012-08-24  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com
	* arm-dis.c (COND_UNCOND): New constant.
	(print_insn_coprocessor): Add support for %u format specifier.
	(print_insn_neon): Likewise.
@
text
@d157 1
a157 3
@@code{crypto} (Cryptography Extensions for v8-A architecture, implies @@code{fp+simd}),
@@code{fp} (Floating Point Extensions for v8-A architecture),
@@code{idiv} (Integer Divide Extensions for v7-A and v7-R architectures),
a163 1
@@code{simd} (Advanced SIMD Extensions for v8-A architecture, implies @@code{fp}),
a201 1
@@code{armv8-a},
a243 1
@@code{fp-armv8},
a248 2
@@code{neon-vfpv4},
@@code{neon-fp-armv8},
d250 1
a250 1
@@code{crypto-neon-fp-armv8}.
@


1.88.2.2
log
@	Apply mainline patches
	2013-02-25  Terry Guo  <terry.guo@@arm.com>
	* config/tc-arm.c (arm_cpus): Add cortex-r7 entry.
	* doc/c-arm.texi: Add cortex-r7 and missing cortex-r5 to
	list of accepted CPUs.
@
text
@a124 2
@@code{cortex-r5},
@@code{cortex-r7},
@


1.87
log
@	* gas/config/tc-arm.c (arm_cpus): Add cortex-a7 entry.
	* gas/doc/c-arm.texi (ARM Options): Add cortex-a7 to list of accepted
	CPUs.
@
text
@d129 1
@


1.86
log
@	* config/tc-arm.c (md_begin): Remove ARM_PLT32 reloc associated
	with the (PLT) instruction suffix when operating in eabi mode.
	* doc/c-arm.texi (ARM_Relocations): Extend description of (PLT)
	suffix.

	* gas/arm/pic.d: Update expected output.
@
text
@d119 1
@


1.85
log
@2011-05-31  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_cpus): Add Cortex-R5.
	(arm_extensions): Allow idiv on ARMv7-R.
	* doc/c-arm.text: Update idiv extension restrictions.

	gas/testsuite/
	* gas/arm/arm-idiv-bad.d: New test.
	* gas/arm/arm-idiv-bad.s: New test.
	* gas/arm/arm-idiv-bad.l: New test.
	* gas/arm/arm-idiv.d: New test.
	* gas/arm/arm-idiv.s: New test.

	include/
	* opcode/arm.h (ARM_ARCH_V7R_IDIV): Define.
@
text
@d496 4
a499 2
@@code{(PLT)} after branch targets.  This will generate the deprecated
@@samp{R_ARM_PLT32} relocation.
@


1.85.2.1
log
@	Apply mainline patches
	2011-11-07  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gas/config/tc-arm.c (arm_cpus): Add cortex-a7 entry.
	* gas/doc/c-arm.texi (ARM Options): Add cortex-a7 to list of accepted
	CPUs.
@
text
@a118 1
@@code{cortex-a7},
@


1.84
log
@	* config/tc-arm.c (arm_cpus): Add Faraday ARMv5TE compatible
	cores: fa606te, fa616te, fmp626.  Modify the VFP of fa626te.
	* doc/c-arm.texi (ARM Options): Add -mcpu={fa606te, fa616te,
	fmp626} options.
@
text
@d155 1
a155 1
@@code{idiv}, (Integer Divide Extensions for v7-A architecture),
@


1.83
log
@	PR gas/12390
	* doc/all.texi: Add NS32K
	* doc/as.texinfo: Remove target specific details of which
	characters act as comment initiators and statement separators into
	individual target specific files.
	* doc/c-alpha.texi (Alpha-Chars): Document special behaviour of
	the hash character at the start of a line.
	* doc/c-arm.texi (ARM-Chars): Likewise.
	* doc/c-avr.texi (AVR-Chars): Likewise.
	* doc/c-d10v.texi (D10V-Chars): Likewise.
	* doc/c-d30v.texi (D30V-Chars):	Likewise.
	* doc/c-mmix.texi (MMIX-Chars): Likewise.
	* doc/c-s390.texi (s390 characters): Likewise.
	* doc/c-sh.texi (SH-Chars): Likewise.
	* doc/c-sh64.texi (SH64-Chars): Likewise.
	* doc/c-sparc.texi (SPARC-Chars): Likewise.
	* doc/c-tic6x.texi (TIC6X Syntax): Likewise.
	* doc/c-xtensa.texi (Xtensa Syntax): Likewise.
	* doc/c-z80.texi (Z80-Chars): Likewise.
	* doc/c-z8k.texi (Z8000-Chars): Likewise.
	* doc/c-pdp11.texi (PDP11-Syntax): Document line separator character.
	* doc/c-arc.texi (ARC-Chars): Fill in this subsection.
	* doc/c-bfin.texi (Blackfin Syntax): Document line comment and
	line separator characters.
	* doc/c-cr16.texi (CR16 Syntax): Likewise.
	* doc/c-i386.texi (i386-Chars): Likewise.
	* doc/c-i860.texi (i860-Chars):	Likewise.
	* doc/c-i960.texi (i960-Chars):	Likewise.
	* doc/c-ip2k.texi (IP2K-Chars):	Likewise.
	* doc/c-lm32.texi (LM32-Chars):	likewise.
	* doc/c-m32c.texi (M32C-Chars): Likewise.
	* doc/c-m68hc11.texi (M68HC11-syntax): Likewise.
	* doc/c-m68k.texi (M68K-Chars): Likewise.
	* doc/c-microblaze.texi (MicroBlaze-Chars): Likewise.
	* doc/c-msp430.texi (MSP430-Chars): Likewise.
	* doc/c-mt.texi (MT-Chars): Likewise.
	* doc/c-ns32k.texi (NS32K-Chars): Likewise.
	* doc/c-pj.texi (PJ-Chars): Likewise.
	* doc/c-ppc.texi (PowerPC-Chars): Likewise.
	* doc/c-rx.texi (RX-Chars): Likewise.
	* doc/c-score.texi (SCORE-Chars): Likewise.
	* doc/c-tic54x.texi (TIC54X-Chars): Likewise.
	* doc/c-v850.texi (V850-Chars): Likewise.
	* doc/c-vax.texi (VAX-Chars): Likewise.
	* doc/c-xc16x.texi (xc16x-Chars): Likewise.
@
text
@d105 2
d108 1
@


1.82
log
@	bfd/
	* reloc.c (BFD_RELOC_ARM_TLS_GOTDESC, BFD_RELOC_ARM_TLS_CALL,
	BFD_RELOC_ARM_THM_TLS_CALL, BFD_RELOC_ARM_TLS_DESCSEQ,
	BFD_RELOC_ARM_THM_TLS_DESCSEQ, BFD_RELOC_ARM_TLS_DESC): New
	relocations.
	* libbfd.h: Rebuilt.
	* bfd-in2.h: Rebuilt.
	* elf32-arm.c (elf32_arm_howto_table_1): Add new relocations.
	(elf32_arm_reloc_map): Likewise.
	(tls_trampoline, dl_tlsdesc_lazy_trampoline): New PLT templates.
	(elf32_arm_stub_long_branch_any_tls_pic,
	elf32_arm_stub_long_branch_v4t_thumb_tls_pic): New stub templates.
	(DEF_STUBS): Add new stubs.
	(struct_elf_arm_obj_data): Add local_tlsdesc_gotent field.
	(elf32_arm_local_tlsdesc_gotent): New.
	(GOT_TLS_GDESC): New mask.
	(GOT_TLS_GD_ANY): Define.
	(struct elf32_arm_link_hash_entry): Add tlsdesc_got field.
	(elf32_arm_compute_jump_table_size): New.
	(struct elf32_arm_link_hash_table): Add next_tls_desc_index,
	num_tls_desc, dt_tlsdesc_plt, dt_tlsdesc_got, tls_trampoline,
	sgotplt_jump_table_size fields.
	(elf32_arm_link_hash_newfunc): Initialize tlsdesc_got field.
	(elf32_arm_link_hash_table_create): Initialize new fields.
	(arm_type_of_stub): Check TLS desc relocs too.
	(elf32_arm_stub_name): TLS desc relocs can be shared.
	(elf32_arm_tls_transition): Determine relaxation.
	(arm_stub_required_alignment): Add tls stubs.
	(elf32_arm_size_stubs): Likewise.
	(elf32_arm_tls_relax): Perform TLS relaxing.
	(elf32_arm_final_link_relocate): Process TLS DESC relocations.
	(IS_ARM_TLS_GNU_RELOC): New.
	(IS_ARM_TLS_RELOC): Use it.
	(elf32_arm_relocate_section): Perform TLS relaxing.
	(elf32_arm_check_relocs): Anticipate TLS relaxing, process tls
	desc relocations.
	(allocate_dynrelocs): Allocate tls desc relcoations.
	(elf32_arm_output_arch_local_syms): Emit tls trampoline mapping
	symbols.
	(elf32_arm_size_dynamic_sections): Allocate tls trampolines and
	got slots.
	(elf32_arm_always_size_sections): New. Create _TLS_MODULE_BASE
	symbol.
	(elf32_arm_finish_dynamic_symbol): Adjust.
	(arm_put_trampoline): New.
	(elf32_arm_finish_dynamic_sections): Emit new dynamic tags and tls
	trampolines.
	(elf_backend_always_size_sections): Define.

	include/elf/
	* arm.h (R_ARM_TLS_DESC, R_ARM_TLS_GOTDESC, R_ARM_TLS_CALL,
	R_ARM_TLS_DESCSEQ, T_ARM_THM_TLS_CALL, R_ARM_THM_TLS_DESCSEQ): New
	relocations.

	gas/
	* doc/c-arm.texi: Document TLSDESC and TLSCALL relocations, and
	.tlsdescseq directive.
	* config/tc-arm.c (arm_typed_reg_parse): Check for potential reloc
	following a symbol.
	(s_arm_tls_descseq): New directive.
	(md_pseudo_table): Add it.
	(encode_branch): Allow TLS_CALL relocs too.
	(do_t_blx, do_t_branch23): Use encode_branch.
	(reloc_names): Add tlsdesc and tlscall.
	(md_apply_fix): Process tls desc relocations.
	(tc_gen_reloc): Likewise.
	(arm_fix_adjustable): Likewise.

	gas/testsuite/
	* gas/arm/tls.s: Add tlsdesc tests.
	* gas/arm/tls.d: Adjust.

	ld/testsuite/
	* ld-arm/arm-elf.exp: Added tests for new TLS handling
	relocations.
	* ld-arm/tls-descrelax-be32.d: New.
	* ld-arm/tls-descrelax-be32.s: New.
	* ld-arm/tls-descrelax-be8.d: New.
	* ld-arm/tls-descrelax-be8.s: New.
	* ld-arm/tls-descrelax-v7.d: New.
	* ld-arm/tls-descrelax-v7.s: New.
	* ld-arm/tls-descrelax.d: New.
	* ld-arm/tls-descrelax.s: New.
	* ld-arm/tls-descseq.d: New.
	* ld-arm/tls-descseq.r: New.
	* ld-arm/tls-descseq.s: New.
	* ld-arm/tls-gdesc-got.d: New.
	* ld-arm/tls-gdesc-got.s: New.
	* ld-arm/tls-gdesc-nlazy.g: New.
	* ld-arm/tls-gdesc-nlazy.s: New.
	* ld-arm/tls-gdesc.d: New.
	* ld-arm/tls-gdesc.r: New.
	* ld-arm/tls-gdesc.s: New.
	* ld-arm/tls-gdierelax.d: New.
	* ld-arm/tls-gdierelax.s: New.
	* ld-arm/tls-gdierelax2.d: New.
	* ld-arm/tls-gdierelax2.s: New.
	* ld-arm/tls-gdlerelax.d: New.
	* ld-arm/tls-gdlerelax.s: New.
	* ld-arm/tls-lib-loc.d: New.
	* ld-arm/tls-lib-loc.r: New.
	* ld-arm/tls-lib-loc.s: New.
	* ld-arm/tls-longplt-lib.d: New.
	* ld-arm/tls-longplt-lib.s: New.
	* ld-arm/tls-longplt.d: New.
	* ld-arm/tls-longplt.s: New.
	* ld-arm/tls-mixed.r: New.
	* ld-arm/tls-mixed.s: New.
	* ld-arm/tls-thumb1.d: New.
	* ld-arm/tls-thumb1.s: New.
	* ld-arm/arm-elf.exp: New.
@
text
@d2 1
a2 1
@@c 2006, 2007, 2008, 2009  Free Software Foundation, Inc.
d411 7
a417 3
The presence of a @@samp{@@@@} on a line indicates the start of a comment
that extends to the end of the current line.  If a @@samp{#} appears as
the first character of a line, the whole line is treated as a comment.
@


1.81
log
@	* bfd/bfd-in2.h (BFD_RELOC_ARM_HVC): New enum value.
	* gas/config/tc-arm.c (arm_ext_virt): New variable.
	(arm_reg_type): Add REG_TYPE_RNB for banked registers.
	(reg_entry): Allow registers to be larger than a byte.
	(reg_alias): Fix type warning.
	(parse_operands): Parse banked registers when appropriate.
	(do_mrs): Add support for Virtualization Extensions.
	(do_hvc): New function.
	(do_t_mrs): Add support for Virtualization Extensions.
	(do_t_msr): Likewise.
	(do_t_hvc): New function.
	(SPLRBANK): New define.
	(reg_names): Add banked registers.
	(insns): Add support for Virtualization Extensions.
	(md_apply_fixup): Likewise.
	(arm_cpus): -mcpu=cortex-a15 implies the Virtualization Extensions.
	(arm_extensions): Add 'virt' extension.
	(aeabi_set_public_attributes): Add support for Virtualization
	Extensions.
	* gas/doc/c-arm.texi: Document 'virt' extension.
	* gas/testsuite/gas/arm/armv7-a+virt.d: New test.
	* gas/testsuite/gas/arm/armv7-a+virt.s: Likewise.
	* gas/testsuite/gas/arm/attr-march-all.d: Update for Virtualization Extensions.
	* gas/testsuite/gas/arm/attr-march-armv7-a+sec+virt.d: New test.
	* gas/testsuite/gas/arm/attr-march-armv7-a+virt.d: Likewise.
	* include/opcode/arm.h (ARM_EXT_VIRT): New define.
	(ARM_ARCH_V7A_IDIV_MP_SEC): Rename...
	(ARM_ARCH_V7A_IDIV_MP_SEC_VIRT): ...to this and include Virtualization
	Extensions.
	* opcodes/arm-dis.c (arm_opcodes): Add Virtualiztion Extensions support.
	(thumb32_opcodes): Likewise.
	(banked_regname): New function.
	(print_insn_arm): Add Virtualization Extensions support.
	(print_insn_thumb32): Likewise.
@
text
@d481 2
d869 6
@


1.80
log
@	* gas/config/tc-arm.c (arm_ext_adiv): New variable.
	(do_div): New function.
	(insns): Accept UDIV and SDIV in ARM state.
	(arm_cpus): The cortex-a15 option has all current v7-A extensions.
	(arm_extensions): Add 'idiv' extension.
	(aeabi_set_public_attributes): Update Tag_DIV_use values for the
	Integer Divide extension.
	* gas/doc/c-arm.texi: Document the idiv extension.
	* gas/testsuite/gas/arm/armv7-a+idiv.d: New test.
	* gas/testsuite/gas/arm/armv7-a+idiv.s: Likewise.
	* gas/testsuite/gas/arm/attr-march-all.d: Update for Integer divide extension.
	* gas/testsuite/gas/arm/attr-march-armv7-a+idiv.d: New test.
	* include/opcode/arm.h (ARM_AEXT_ADIV): New define.
	(ARM_ARCH_V7A_IDIV_MP_SEC): Likewise.
	* opcodes/arm-dis.c (arm_opcodes): Support disassembly of UDIV and SDIV in
	ARM state.
@
text
@d159 2
@


1.79
log
@	* config/tc-arm.c (arm_ext_v6m): New variable.
	(arm_ext_m): Add support for OS extension.
	(arm_ext_os): New variable.
	(do_t_swi): In v6-M ensure we have the OS extension.
	(arm_cpus): The cortex-m1 and cortex-m0 options have the OS
	extension by default.
	(arm_archs): Add armv6s-m.
	(arm_extensions): Add 'os' extension.
	(cpu_arch_ver): Add support for v6S-M.
	* gas/doc/c-arm.texi: Document the OS Extension, and v6-m and v6s-m
	architecture options.
	* gas/testsuite/gas/arm/archv6s-m-bad.d: New test.
	* gas/testsuite/gas/arm/archv6s-m-bad.l: Likewise.
	* gas/testsuite/gas/arm/archv6s-m.d: Likewise.
	* gas/testsuite/gas/arm/archv6s-m.s: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv6-m+os.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv6s-m.d: Likewise.
	* include/opcode/arm.h (ARM_EXT_OS): New define.
	(ARM_AEXT_V6SM): Likewise.
	(ARM_ARCH_V6SM): Likewise.
@
text
@d151 2
a152 1
The following extensions are currently supported: 
@


1.78
log
@	* gas/config/tc-arm.c (arm_ext_v6z): Remove.
	(arm_ext_sec): New variable.
	(do_t_smc): In Thumb state SMC requires v7-A.
	(insns): Make SMC depend on Security Extensions.
	(arm_cpus): All -mcpu=cortex-a* options have the Security Extensions.
	(arm_extensions): Add 'sec' extension.
	(cpu_arch_ver): Reorder.
	(aeabi_set_public_attributes): Emit Tag_Virtualization_use as
	appropriate.
	* gas/doc/c-arm.texi: Document Security Extensions.
	* gas/testsuite/gas/arm/attr-march-all.d: Update for Security Extensions..
	* gas/testsuite/gas/arm/attr-march-armv6k+sec.d: New test.
	* gas/testsuite/gas/arm/attr-march-armv6z.d: Update for Security Extensions.
	* gas/testsuite/gas/arm/attr-march-armv6zk.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv6zkt2.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv6zt2.d: Likewise.
	* gas/testsuite/gas/arm/attr-march-armv7-a+sec.d: New test.
	* gas/testsuite/gas/arm/attr-mcpu.d: Update for Security Extensions.
	* gas/testsuite/gas/arm/thumb32.d: Likewise.
	* gas/testsuite/gas/arm/thumb32.s: Likewise.
	* include/opcode/arm.h (ARM_EXT_V6Z): Remove.
	(ARM_EXT_SEC): New define.
	(ARM_AEXT_V6Z): Use Security Extensions.
	(ARM_AEXT_V6ZK): Likeiwse.
	(ARM_AEXT_V6ZT2): Likewise.
	(ARM_AEXT_V6ZKT2): Likewise.
	(ARM_AEXT_V7_ARM): Base v7 does not have Security Extensions.
	(ARM_ARCH_V7A_SEC): New define.
	(ARM_ARCH_V7A_MP): Rename...
	(ARM_ARCH_V7A_MP_SEC): ...to this and add Security Extensions.
	* ld/testsuite/ld-arm/attr-merge-6.attr: Update for Security Extensions.
	* ld/testsuite/ld-arm/attr-merge-7.attr: Likewise.
	* opcodes/arm-dis.c (arm_opcodes): SMC implies Security Extensions.
	(thumb32_opcodes): Likewise.
@
text
@d156 1
d187 2
@


1.77
log
@	* gas/config/tc-arm.c (arm_ext_mp): Add.
	(do_pld): Update comment.
	(insns): Add support for pldw.
	(arm_cpus): Update cortex-a5, cortex-a9, and cortex-a15 to support
	MP extension.
	(arm_extensions): Add 'mp' extension.
	(aeabi_set_public_attributes): Emit correct build attribute when
	MP extension is enabled.
	* gas/doc/c-arm.texi: Update for MP extensions.
	* gas/testsuite/gas/arm/arch7a-mp.d: Add.
	* gas/testsuite/gas/arm/arch7ar-mp.s: Likewise.
	* gas/testsuite/gas/arm/arch7r-mp.d: Likewise.
	* gas/testsuite/gas/arm/armv2-mp-bad.d: Likewise.
	* gas/testsuite/gas/arm/armv2-mp-bad.l: Likewise.
	* gas/testsuite/gas/arm/attr-march-all.d: Update for MP extension.
	* gas/testsuite/gas/arm/attr-march-armv7-a+mp.d: Add.
	* gas/testsuite/gas/arm/attr-march-armv7-r+mp.d: Likewise.
	* include/opcode/arm.h (ARM_EXT_MP): Add.
	(ARM_ARCH_V7A_MP): Likewise.
	* opcodes/arm-dis.c (arm_opcodes): Add support for pldw.
	(thumb32_opcodes): Likewise.
@
text
@d156 1
@


1.76
log
@	* gas/config/tc-arm.c (md_pseduo_table): Add .arch_extension directive.
	(arm_option_extension_value_table): Add.
	(arm_extensions): Change type.
	(arm_option_cpu_table): Rename...
	(arm_option_fpu_table): ...to this.
	(arm_fpus): Change type.
	(arm_parse_extension): Enforce alphabetical order.  Allow
	extensions to be removed.
	(arm_parse_arch): Allow extensions to be specified with -march.
	(s_arm_arch_extension): Add.
	(s_arm_fpu): Update for type changes.
	* gas/doc/c-arm.texi: Document changes to infrastructure.
@
text
@d141 3
d155 1
@


1.75
log
@	* doc/c-arm.texi: Document -mcpu=cortex-m4.
@
text
@d136 16
a151 4
is equivalent to specifying @@code{-mcpu=ep9312}.  The following extensions
are currently supported: 
@@code{+maverick}
@@code{+iwmmxt}
d153 1
a153 1
@@code{+xscale}.
d518 12
d564 3
@


1.74
log
@	* gas/config/tc-arm.c (arm_cpus): Add cortex-a15 entry.
	* gas/doc/c-arm.texi: Document -mcpu=cortex-a15.
@
text
@d121 1
@


1.73
log
@	* doc/c-arm.texi (ARM Options): Document -mfpu=fp4-sp-d16.
@
text
@d118 1
@


1.72
log
@* doc/as.texinfo (Overview): Use @@itemx for grouped @@table
items.
* doc/c-alpha.texi (Alpha Options): Likewise.
* doc/c-arm.texi (ARM Directives): Likewise.
* doc/c-bfin.texi (Blackfin Options): Likewise.
* doc/c-d10v.texi (D10V-Opts): Likewise.
* doc/c-i386.texi (i386-Options): Likewise.
* doc/c-ia64.texi (IA-64 Options): Likewise.
* doc/c-m68k.texi (M68K-Opts): Likewise.
* doc/c-tic54x.texi (TIC54X-Directives): Likewise.
* doc/internals.texi (Symbols): Likewise.
@
text
@d213 1
@


1.71
log
@	* ld/testsuite/ld-arm/attr-merge-2.attr: Update for changes in attribute output.
	* ld/testsuite/ld-arm/attr-merge-3.attr: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-1.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-1r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-2.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-2r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-3.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-3r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-4.d: Likeiwse.
	* ld/testsuite/ld-arm/attr-merge-vfp-4r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-5.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-vfp-5r.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-00-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-00.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-02-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-02.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-04-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-04.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-20-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-20.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-22-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-22.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-24-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-40-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-40.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-42-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-44-nowarn.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge-wchar-44.d: Likewise.
	* ld/testsuite/ld-arm/attr-merge.attr: Likewise.
	* binutils/readelf.c (arm_attr_tag_FP_arch): Rename from arm_attr_tag_VFP_arch.
	(arm_attr_tag_ABI_align8_needed): Remove.
	(arm_attr_tag_ABI_align8_preserved): Remove.
	(arm_attr_tag_ABI_HardFP_use): Update text strings.
	(arm_attr_public_tags): Add strings for ABI v2.08 attribute tags.
	(display_arm_attribute): Add decoding of ABI v2.08 attributes.
	* include/elf/arm.h (Tag_FP_arch, Tag_ABI_align_needed, Tag_ABI_align_preserved,
	Tag_FP_HP_extension): Add new ABI attribute tags.
	* gas/config/tc-arm.c (arm_convert_symbolic_attribute): Add support for
	new tag names in v2.08 of ARM ABI.
	* gas/doc/c-arm.texi: Document new tag names in ABI.
	* gas/testsuite/gas/arm/attr-mcpu.d: Update for new attribute tag names.
	* gas/testsuite/gas/arm/attr-mfpu-arm1020e.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-arm1020t.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-arm1136jf-s.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-arm1136jfs.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-neon-fp16.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-neon.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-softvfp+vfp.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfp.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfp10-r0.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfp10.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfp3.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfp9.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv2.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv3-d16.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv3.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv4-d16.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpv4.d: Likewise.
	* gas/testsuite/gas/arm/attr-mfpu-vfpxd.d: Likewise.
	* gas/testsuite/gas/arm/attr-names.d: Add test to make sure all attribute names
	are recognised.
	* gas/testsuite/gas/arm/attr-names.s: Likewise.
@
text
@d541 1
a541 1
@@item @@var{name} .qn @@var{register name} [@@var{.type}] [[@@var{index}]]
d658 2
a659 2
@@item .inst.n @@var{opcode} [ , @@dots{} ]
@@item .inst.w @@var{opcode} [ , @@dots{} ]
@


1.70
log
@	* doc/c-arm.texi (.setfp): Correct example.
@
text
@d578 1
a578 1
@@code{Tag_THUMB_ISA_use}, @@code{Tag_VFP_arch}, @@code{Tag_WMMX_arch},
d585 1
a585 1
@@code{Tag_ABI_align8_needed}, @@code{Tag_ABI_align8_preserved},
d590 1
a590 1
@@code{Tag_VFP_HP_extension}, @@code{Tag_ABI_FP_16bit_format},
d599 4
@


1.69
log
@bfd/
2010-03-15  Wei Guozhi  <carrot@@google.com>

       PR gas/11323
       * bfd-in2.h (enum bfd_reloc_code_real): New BFD_RELOC_GOT_PREL type.
       * elf32-arm.c (elf32_arm_reloc_map): BFD_RELOC_GOT_PREL to
       R_ARM_GOT_PREL map.
       * libbfd.h (bfd_reloc_code_real_names): BFD_RELOC_GOT_PREL name.
       * reloc.c (comments): Document the new relocation.

gas/
2010-03-15  Wei Guozhi  <carrot@@google.com>

       PR gas/11323
       * config/tc-arm.c (reloc_names): New relocation names.
       (md_apply_fix): New case for BFD_RELOC_ARM_GOT_PREL.
       (tc_gen_reloc): New case for BFD_RELOC_ARM_GOT_PREL.
       * doc/c-arm.texi (ARM-Relocations): Document the new relocation.

gas/testsuite
2010-03-15  Wei Guozhi  <carrot@@google.com>

       PR gas/11323
       * gas/arm/got_prel.s: New test case.
       * gas/arm/got_prel.d: Likewise.
@
text
@d773 1
a773 1
The syntax of this directive is the same as the @@code{sub} or @@code{mov}
d782 1
a782 1
sub fp, ip, #4
@


1.68
log
@	* bfd/elf32-arm.c (elf32_arm_merge_eabi_attributes): Add support for
	merging Tag_DIV_use, Tag_MPextension_use, and
	Tag_MPextension_use_legacy tags.
	* binutils/readelf.c (arm_attr_tag_Advanced_SIMD_arch): Add
	description of newly permitted attribute values.
	(arm_attr_tag_Virtualization_use): Likewise.
	(arm_attr_tag_DIV_use): Add description of new attribute.
	(arm_attr_tag_MPextension_use_legacy): Likewise.
	* gas/config/tc-arm.c (arm_convert_symbolic_attribute):
	Add Tag_DIV_use.
	* gas/doc/c-arm.texi: Likewise.
	* gas/testsuite/gas/arm/attr-order.d: Fix test for new names for
	attribute values.
	* include/elf/arm.h (Tag_MPextension_use): Renumber.
	(Tag_DIV_use): Add.
	(Tag_MPextension_use_legacy): Likewise.
	* ld/testsuite/ld-arm/attr-merge-3.attr: Fix test for new attribute
	values.
	* ld/testsuite/ld-arm/attr-merge-3b.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-unknown-1.d: Fix test now that 42
	is a recognised attribute ID.
	* ld/testsuite/ld-arm/attr-merge-unknown-1.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-6.attr: New test.
	* ld/testsuite/ld-arm/attr-merge-6a.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-6b.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-7.attr: Likewise.
	* ld/testsuite/ld-arm/attr-merge-7a.s: Likewise.
	* ld/testsuite/ld-arm/attr-merge-7b.s: Likewise.
	* ld/testsuite/ld-arm/arm-elf.exp: Run the new tests.
@
text
@d455 2
a456 1
@@code{GOTTPOFF}
@


1.67
log
@2009-12-28  Daniel Gutson  <dgutson@@codesourcery.com>

        * doc/c-arm.texi: Document NEON alignment specifiers.
@
text
@d590 1
d593 1
a593 1
@@code{Tag_Virtualization_use}, @@code{Tag_MPextension_use}
@


1.66
log
@2009-11-17  Paul Brook  <paul@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>

	gas/
	* doc/c-arm.texi: Document .arch armv7e-m.
	* config/tc-arm.c (arm_ext_v6_dsp, arm_ext_v7m): New.
	(insns): Put Thumb versions of v5TExP instructions into
	arm_ext_v5exp also.  Move some Thumb variants from
	arm_ext_v6_notm to arm_ext_v6_dsp.
	(arm_archs): Add armv7e-m architecture.
	(aeabi_set_public_attributes): Handle -march=armv7e-m.

	gas/testsuite/
	* gas/arm/attr-march-armv7em.d: New test.
	* gas/arm/arch7em-bad.d: New test.
	* gas/arm/arch7em-bad.l: New test.
	* gas/arm/arch7em.d: New test.
	* gas/arm/arch7em.s: New test.

	include/elf/
	* arm.h (TAG_CPU_ARCH_V7E_M): Define.

	include/opcode/
	* arm.h (ARM_EXT_V6_DSP): Define.
	(ARM_AEXT_V6T2, ARM_AEXT_NOTM): Include ARM_EXT_V6_DSP.
	(ARM_AEXT_V7EM, ARM_ARCH_V7EM): Define.

	binutils/
	* readelf.c (arm_attr_tag_CPU_arch): Add v7E-M.

	bfd/
	* elf32-arm.c (using_thumb_only, arch_has_arm_nop,
	arch_has_thumb2_nop): Handle TAG_CPU_ARCH_V7E_M.
	(tag_cpu_arch_combine): Ditto. Correct MAX_TAG_CPU_ARCH test.
@
text
@d342 1
d410 15
@


1.65
log
@2009-11-02  Paul Brook  <paul@@codesourcery.com>

	ld/testsuite/
	* ld-arm/arm-elf.exp: Add new attr-merge-vfp tests.
	* ld-arm/attr-merge-vfp-1.d: New test.
	* ld-arm/attr-merge-vfp-1r.d: New test.
	* ld-arm/attr-merge-vfp-2.d: New test.
	* ld-arm/attr-merge-vfp-2r.d: New test.
	* ld-arm/attr-merge-vfp-3.d: New test.
	* ld-arm/attr-merge-vfp-3r.d: New test.
	* ld-arm/attr-merge-vfp-4.d: New test.
	* ld-arm/attr-merge-vfp-4r.d: New test.
	* ld-arm/attr-merge-vfp-5.d: New test.
	* ld-arm/attr-merge-vfp-5r.d: New test.
	* ld-arm/attr-merge-vfp-2.s: New test.
	* ld-arm/attr-merge-vfp-3.s: New test.
	* ld-arm/attr-merge-vfp-3-d16.s: New test.
	* ld-arm/attr-merge-vfp-4.s: New test.
	* ld-arm/attr-merge-vfp-4-d16.s: New test.

	gas/
	* doc/c-arm.texi: Document new -mfpu options.
	* config/tc-arm.c (fpu_vfp_ext_v3xd, fpu_vfp_fp16, fpu_neon_ext_fma,
	fpu_vfp_ext_fma): New.
	(NEON_ENC_TAB): Add vfma, vfms, vfnma and vfnms.
	(do_vfp_nsyn_fma_fms, do_neon_fmac): New functions.
	(insns): Move double precision load/store.  Split out double
	precision VFPv3 instrucitons.  Add VFPv4 instructions.
	(arm_fpus): Add VFPv3-FP16, VFPv3xD and VFPv4 variants.
	(aeabi_set_public_attributes): Set VFPv4 variants

	gas/testsuite/
	* gas/arm/attr-mfpu-vfpv4.d: New test.
	* gas/arm/attr-mfpu-vfpv4-d16.d: New test.
	* gas/arm/neon-fma-cov.d: New test.
	* gas/arm/neon-fma-cov.s: New test.
	* gas/arm/vfp-fma-inc.s: New test.
	* gas/arm/vfp-fma-arm.d: New test.
	* gas/arm/vfp-fma-arm.s: New test.
	* gas/arm/vfp-fma-thumb.d: New test.
	* gas/arm/vfp-fma-thumb.s: New test.
	* gas/arm/vfma1.d: New test.
	* gas/arm/vfma1.s: New test.
	* gas/arm/vfpv3xd.d: New test.
	* gas/arm/vfpv3xd.s: New test.

	include/opcode/
	* arm.h (FPU_VFP_EXT_V3xD, FPU_VFP_EXT_FP16, FPU_NEON_EXT_FMA,
	FPU_VFP_EXT_FMA, FPU_VFP_V3xD, FPU_VFP_V4D16, FPU_VFP_V4): Define.
	(FPU_ARCH_VFP_V3D16_FP16, FPU_ARCH_VFP_V3_FP16, FPU_ARCH_VFP_V3xD,
	FPU_ARCH_VFP_V3xD_FP16, FPU_ARCH_VFP_V4, FPU_ARCH_VFP_V4D16,
	FPU_ARCH_NEON_VFP_V4): Define.

	binutils/
	* readelf.c (arm_attr_tag_VFP_arch): Add VFPv4 and VFPv4-D16.

	bfd/
	* elf32-arm.c (elf32_arm_merge_eabi_attributes): Handle VFPv4
	attributes.

	opcodes/
	* arm-dis.c (coprocessor_opcodes): Update to use new feature flags.
	Add VFPv4 instructions.
@
text
@d171 1
@


1.64
log
@2009-10-29  Paul Brook  <paul@@codesourcery.com>

	gas/
	* doc/c-arm.texi: Document ARM -mcpu=cortex-a5.
	* config/arm/tc-arm.c (arm_cpu_option_table): Add cortex-a5.
@
text
@d203 9
a211 3
@@code{vfpv2}
@@code{vfpv3}
@@code{vfpv3-d16}
d215 2
a216 1
@@code{maverick}
d218 1
a218 1
@@code{neon}.
@


1.63
log
@	* doc/c-arm.texi (ARM Options): Correctly name the two mapcs options.
@
text
@d115 1
@


1.62
log
@9-09-07  Daniel Gutson  <dgutson@@codesourcery.com>

        * config/tc-arm.c (arm_cpus): cortex-r4f CPU added.
        * doc/c-arm.texi: cortex-r4f CPU added.
@
text
@d249 5
a253 3
@@cindex @@code{-mapcs} command line option, ARM
@@item -mapcs @@code{[26|32]}
This option specifies that the output generated by the assembler should
@


1.61
log
@update copyright dates
@
text
@d118 1
@


1.60
log
@        * doc/c-arm.texi (ARM-Instruction-Set): New node.  Documents the
        different syntaxes support by the ARM port.
        (ARM Directives): Add entry for .syntax.
@
text
@d1 2
a2 2
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
@@c 2008, 2009  Free Software Foundation, Inc.
@


1.59
log
@        * doc/c-arm.texi (mauto-it): Removed old option.
        (mimplicit-it): Added right option.
@
text
@d326 1
d332 35
d761 5
@


1.58
log
@        * config/tc-arm.c (it_fsm_post_encode): New forward declaration.
        (set_it_insn_type_nonvoid): New macro.
        (emit_thumb32_expr): New function.
        (thumb_insn_size): New function.
        (emit_insn): New function.
        (s_arm_elf_inst): New function.
        (md_pseudo_table): New pseudo-opcode entries added.
        * doc/c-arm.texi: New directive added.

        * gas/arm/inst-po.d: New testcase.
        * gas/arm/inst-po.s: New file.
        * gas/arm/inst-po-2.d: New testcase.
        * gas/arm/inst-po-2.s: New file.
        * gas/arm/inst-po-2.l: New file.
        * gas/arm/inst-po-3.d: New testcase.
        * gas/arm/inst-po-3.s: New file.
        * gas/arm/inst-po-be.d: New testcase.
@
text
@d230 17
a246 4
@@cindex @@code{-mauto-it} command line option, ARM
@@item -mauto-it
This option enables the automatic generation of IT instructions for
conditional instructions not covered by an IT block.
@


1.57
log
@        * config/tc-arm.c (implicit_it_mode): New enum.
        (implicit_it_mode): New global.
        (it_instruction_type): New enum.
        (arm_parse_it_mode): New function.
        (arm_long_opts): New option added.
        (arm_it): New field.
        (it_state): New enum.
        (now_it): New macro.
        (check_it_blocks_finished): New function.
        (insns[]): Use the IT Thumb opcodes for ARM too.
        (arm_cleanup): Call check_it_blocks_finished.
        (now_it_compatible): New function.
        (conditional_insn): New function.
        (set_it_insn_type): New macro.
        (set_it_insn_type_last): New macro.
        (do_it): Call automatic IT machinery functions.
        (do_t_add_sub): Likewise
        (do_t_arit3): Likewise.
        (do_t_arit3c): Likewise.
        (do_t_blx): Likewise.
        (do_t_branch): Likewise.
        (do_t_bkpt): Likewise.
        (do_t_branch23): Likewise.
        (do_t_bx): Likewise.
        (do_t_bxj): Likewise.
        (do_t_cps): Likewise.
        (do_t_cpsi): Likewise.
        (do_t_cbz): Likewise.
        (do_t_it): Likewise.
        (encode_thumb2_ldmstm): Likewise.
        (do_t_ldst): Likewise.
        (do_t_mov_cmp): Likewise.
        (do_t_mvn_tst): Likewise.
        (do_t_mul): Likewise.
        (do_t_neg): Likewise.
        (do_t_setend): Likewise.
        (do_t_shift): Likewise.
        (do_t_tb): Likewise.
        (output_it_inst): New function.
        (new_automatic_it_block): New function.
        (close_automatic_it_block): New function.
        (now_it_add_mask): New function.
        (it_fsm_pre_encode): New function.
        (handle_it_state): New function.
        (it_fsm_post_encode): New function.
        (force_automatic_it_block_close): New function.
        (in_it_block): New function.
        (md_assemble): Call automatic IT block machinery functions.
        (arm_frob_label): Likewise.
        (arm_opts): New element.
        * config/tc-arm.h (it_state): New enum.
        (current_it): New struct.
        (arm_segment_info_type): New member added.
        * doc/c-arm.texi: New option -mimplicit-it documented.

        * gas/arm/arm-it-auto.d: New test.
        * gas/arm/arm-it-auto.s: New file.
        * gas/arm/arm-it-auto-2.d: New test case.
        * gas/arm/arm-it-auto-2.s: New file.
        * gas/arm/arm-it-auto-3.d: New test case.
        * gas/arm/arm-it-auto-3.s: New file.
        * gas/arm/arm-it-bad.d: New test case.
        * gas/arm/arm-it-bad.l: New file.
        * gas/arm/arm-it-bad.s: New file.
        * gas/arm/arm-it-bad-2.d: New test case.
        * gas/arm/arm-it-bad-2.l: New file.
        * gas/arm/arm-it-bad-2.s: New file.
        * gas/arm/arm-it-bad-3.d: New test case.
        * gas/arm/arm-it-bad-3.l: New file.
        * gas/arm/arm-it-bad-3.s: New file.
        * gas/arm/thumb2_it_auto.d: New test.
        * gas/arm/thumb2_it_bad.l: Error message updated.
        * gas/arm/thumb2_it_bad_auto.d: New test.
        * gas/arm/thumb2_it.d: Comment added.
        * gas/arm/thumb2_it_bad.d: Comment added.
@
text
@d572 9
@


1.56
log
@        * config/tc-arm.c (arm_cpus): Add entry for ARM Cortex-M0.
        * doc/c-arm.texi: Added codes for processors ARM Cortex-M0 and
        Cortex-M1.
@
text
@d230 5
@


1.55
log
@	* doc/c-arm.texi (ARM Directives): Alphabetize. Document .2byte,
	.4byte, .8byte, .bss, .even, .extend, .ldouble, .packed, .secrel32
	directives.
@
text
@d1 2
a2 2
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2008
@@c Free Software Foundation, Inc.
d119 2
@


1.54
log
@	* doc/c-arm.texi (): Document -mwarn-deprecated.
	* config/tc-arm.c (WARN_DEPRECATED): Remove.  Replace with ...
	(warn_on_deprecated): ... this.
	(opcode_lookup, md_assemble): Check it before warning.
	(arm_opts): Add m[no-]warn-deprecated.
	(md_parse_option): Replace WARN_DEPRECATED with
	warn_on_deprecated.
@
text
@d396 11
a406 1
@@cindex @@code{align} directive, ARM
d413 23
a435 4
@@cindex @@code{req} directive, ARM
@@item @@var{name} .req @@var{register name}
This creates an alias for @@var{register name} called @@var{name}.  For
example:
d437 4
a440 3
@@smallexample
        foo .req r0
@@end smallexample
d442 4
a445 4
@@cindex @@code{unreq} directive, ARM
@@item .unreq @@var{alias-name}
This undefines a register alias which was previously defined using the
@@code{req}, @@code{dn} or @@code{qn} directives.  For example:
d447 4
a450 4
@@smallexample
        foo .req r0
        .unreq foo
@@end smallexample
d452 1
a452 3
An error occurs if the name is undefined.  Note - this pseudo op can
be used to delete builtin in register name aliases (eg 'r0').  This
should only be done if it is really necessary.
d454 1
a454 1
@@cindex @@code{dn} and @@code{qn} directives, ARM
d484 48
a531 4
@@cindex @@code{code} directive, ARM
@@item .code @@code{[16|32]}
This directive selects the instruction set being generated. The value 16
selects Thumb, with the value 32 selecting ARM.
d533 3
a535 3
@@cindex @@code{thumb} directive, ARM
@@item .thumb
This performs the same action as @@var{.code 16}.
d537 4
a540 3
@@cindex @@code{arm} directive, ARM
@@item .arm
This performs the same action as @@var{.code 32}.
d542 1
a542 1
@@cindex @@code{force_thumb} directive, ARM
d547 16
a562 8
@@cindex @@code{thumb_func} directive, ARM
@@item .thumb_func
This directive specifies that the following symbol is the name of a
Thumb encoded function.  This information is necessary in order to allow
the assembler and linker to generate correct code for interworking
between Arm and Thumb instructions and should be used even if
interworking is not going to be performed.  The presence of this
directive also implies @@code{.thumb}
d564 4
a567 2
This directive is not neccessary when generating EABI objects.  On these
targets the encoding is implicit when generating Thumb code.
d569 2
a570 7
@@cindex @@code{thumb_set} directive, ARM
@@item .thumb_set
This performs the equivalent of a @@code{.set} directive in that it
creates a symbol which is an alias for another symbol (possibly not yet
defined).  This directive also has the added property in that it marks
the aliased symbol as being a thumb function entry point, in the same
way that the @@code{.thumb_func} directive does.
d586 10
a595 3
@@cindex @@code{.pool} directive, ARM
@@item .pool
This is a synonym for .ltorg.
d597 5
a601 4
@@anchor{arm_fnstart}
@@cindex @@code{.fnstart} directive, ARM
@@item .fnstart
Marks the start of a function with an unwind table entry.
d603 1
a603 5
@@anchor{arm_fnend}
@@cindex @@code{.fnend} directive, ARM
@@item .fnend
Marks the end of a function with an unwind table entry.  The unwind index
table entry is created when this directive is processed.
d605 5
a609 3
If no personality routine has been specified then standard personality
routine 0 or 1 will be used, depending on the number of unwind opcodes
required.
d611 5
a615 4
@@cindex @@code{.cantunwind} directive, ARM
@@item .cantunwind
Prevents unwinding through the current function.  No personality routine
or exception table data is required or permitted.
d626 15
a640 5
@@cindex @@code{.handlerdata} directive, ARM
@@item .handlerdata
Marks the end of the current function, and the start of the exception table
entry for that function.  Anything between this directive and the
@@code{.fnend} directive will be added to the exception table entry.
d642 1
a642 2
Must be preceded by a @@code{.personality} or @@code{.personalityindex}
directive.
a671 34
@@cindex @@code{.vsave} directive, ARM
@@item .vsave @@var{vfp-reglist}
Generate unwinder annotations to restore the VFP registers in @@var{vfp-reglist}
using FLDMD.  Also works for VFPv3 registers
that are to be restored using VLDM.
The format of @@var{vfp-reglist} is the same as the corresponding store-multiple
instruction.

@@smallexample
@@exdent @@emph{VFP registers}
  .vsave @@{d8, d9, d10@@}
  fstmdd sp!, @@{d8, d9, d10@@}
@@exdent @@emph{VFPv3 registers}
  .vsave @@{d15, d16, d17@@}
  vstm sp!, @@{d15, d16, d17@@}
@@end smallexample

Since FLDMX and FSTMX are now deprecated, this directive should be
used in favour of @@code{.save} for saving VFP registers for ARMv6 and above.

@@anchor{arm_pad}
@@cindex @@code{.pad} directive, ARM
@@item .pad #@@var{count}
Generate unwinder annotations for a stack adjustment of @@var{count} bytes.
A positive value indicates the function prologue allocated stack space by
decrementing the stack pointer.

@@anchor{arm_movsp}
@@cindex @@code{.movsp} directive, ARM
@@item .movsp @@var{reg} [, #@@var{offset}]
Tell the unwinder that @@var{reg} contains an offset from the current
stack pointer.  If @@var{offset} is not specified then it is assumed to be
zero.

d675 1
a675 1
Make all unwinder annotations relaive to a frame pointer.  Without this
d690 48
d739 1
a739 1
@@item .raw @@var{offset}, @@var{byte1}, @@dots{}
d746 1
a746 4
@@cindex @@code{.cpu} directive, ARM
@@item .cpu @@var{name}
Select the target processor.  Valid values for @@var{name} are the same as
for the @@option{-mcpu} commandline option.
d748 7
a754 4
@@cindex @@code{.arch} directive, ARM
@@item .arch @@var{name}
Select the target architecture.  Valid values for @@var{name} are the same as
for the @@option{-march} commandline option.
d756 8
a763 5
@@cindex @@code{.object_arch} directive, ARM
@@item .object_arch @@var{name}
Override the architecture recorded in the EABI object attribute section.
Valid values for @@var{name} are the same as for the @@code{.arch} directive.
Typically this is useful when code uses runtime detection of CPU features.
d765 2
a766 28
@@cindex @@code{.fpu} directive, ARM
@@item .fpu @@var{name}
Select the floating point unit to assemble for.  Valid values for @@var{name}
are the same as for the @@option{-mfpu} commandline option.

@@cindex @@code{.eabi_attribute} directive, ARM
@@item .eabi_attribute @@var{tag}, @@var{value}
Set the EABI object attribute @@var{tag} to @@var{value}.

The @@var{tag} is either an attribute number, or one of the following:
@@code{Tag_CPU_raw_name}, @@code{Tag_CPU_name}, @@code{Tag_CPU_arch},
@@code{Tag_CPU_arch_profile}, @@code{Tag_ARM_ISA_use},
@@code{Tag_THUMB_ISA_use}, @@code{Tag_VFP_arch}, @@code{Tag_WMMX_arch},
@@code{Tag_Advanced_SIMD_arch}, @@code{Tag_PCS_config},
@@code{Tag_ABI_PCS_R9_use}, @@code{Tag_ABI_PCS_RW_data},
@@code{Tag_ABI_PCS_RO_data}, @@code{Tag_ABI_PCS_GOT_use},
@@code{Tag_ABI_PCS_wchar_t}, @@code{Tag_ABI_FP_rounding},
@@code{Tag_ABI_FP_denormal}, @@code{Tag_ABI_FP_exceptions},
@@code{Tag_ABI_FP_user_exceptions}, @@code{Tag_ABI_FP_number_model},
@@code{Tag_ABI_align8_needed}, @@code{Tag_ABI_align8_preserved},
@@code{Tag_ABI_enum_size}, @@code{Tag_ABI_HardFP_use},
@@code{Tag_ABI_VFP_args}, @@code{Tag_ABI_WMMX_args},
@@code{Tag_ABI_optimization_goals}, @@code{Tag_ABI_FP_optimization_goals},
@@code{Tag_compatibility}, @@code{Tag_CPU_unaligned_access},
@@code{Tag_VFP_HP_extension}, @@code{Tag_ABI_FP_16bit_format},
@@code{Tag_nodefaults}, @@code{Tag_also_compatible_with},
@@code{Tag_conformance}, @@code{Tag_T2EE_use},
@@code{Tag_Virtualization_use}, @@code{Tag_MPextension_use}
d768 4
a771 2
The @@var{value} is either a @@code{number}, @@code{"string"}, or
@@code{number, "string"} depending on the tag.
@


1.53
log
@2009-01-16  Andrew Stubbs  <ams@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_copy_symbol_attributes): New function.
	* config/tc-arm.h (arm_copy_symbol_attributes): New prototype.
	(CONVERT_SYMBOLIC_ATTRIBUTE): New define.
	* read.c (s_vendor_attribute): Add support for symbolic tag names.
	Improve string parser.
	* doc/c-arm.texi (ARM Machine Directives): Document
	.eabi_attribute symbolic tag names.

	gas/testsuite/
	* gas/arm/attr-syntax.d: New file.
	* gas/arm/attr-syntax.s: New file.
@
text
@d294 6
@


1.52
log
@	* c-arm.texi: Add tutorial on ARM unwinding pseudo ops.
@
text
@d655 24
a678 3
Set the EABI object attribute number @@var{tag} to @@var{value}.  The value
is either a @@code{number}, @@code{"string"}, or @@code{number, "string"}
depending on the tag.
@


1.51
log
@        * config/tc-arm.c (arm_cpus): Add Faraday ARMv4 and ARMv5TE
        compatible cores: fa526, fa626, fa626te, fa726te.
        * doc/c-arm.texi (ARM Opts): Add -mcpu={fa526, fa626, fa626te,
        fa726te} options.
@
text
@d26 1
d506 1
d511 1
d544 1
d592 1
d599 1
d606 1
d757 146
@


1.50
log
@* doc/tc-arm.texi: Fix fnstart and fnend directive names.
@
text
@d1 1
a1 1
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d84 2
d104 2
@


1.49
log
@2008-03-09  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_cpu_option_table): Add cortex-a9.
	* doc/c-arm.texi: Add cortex-a9.
@
text
@d502 1
a502 1
@@item .unwind_fnstart
d506 1
a506 1
@@item .unwind_fnend
@


1.48
log
@2008-03-09  Paul Brook  <paul@@codesourcery.com>

	bfd/
	* elf32-arm.c (elf32_arm_merge_eabi_attributes): Handle new
	Tag_VFP_arch values.

	binutils/
	* readelf.c (arm_attr_tag_VFP_arch): Add "VFPv3-D16".

	gas/
	* config/tc-arm.c (fpu_vfp_ext_d32): New vairable.
	(parse_vfp_reg_list, encode_arm_vfp_reg): Use it.
	(arm_option_cpu_value): Add vfpv3-d16, vfpv2 and vfpv3.
	(aeabi_set_public_attributes): Handle Tag_VFP_arch=VFPV3-D16.
	* doc/c-arm.texi: Document new ARM FPU variants.

	gas/testsuite/
	* gas/arm/vfpv3-d16-bad.d: New test.
	* gas/arm/vfpv3-d16-bad.l: New test.

	include/opcode/
	* arm.h (FPU_VFP_EXT_D32, FPU_VFP_V3D16, FPU_ARCH_VFP_V3D16): Define.
@
text
@d111 1
@


1.47
log
@2008-02-20  Paul Brook  <paul@@codesourcery.com>

	ld/
	* emultempl/armelf.em (OPTION_FIX_V4BX_INTERWORKING): Define.
	(PARSE_AND_LIST_LONGOPTS): Add fix-v4bx-interworking.
	(PARSE_AND_LIST_OPTIONS): Ditto.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_FIX_V4BX_INTERWORKING.
	* emulparams/armelf.sh (OTHER_TEXT_SECTIONS): Add .v4_bx.
	* emulparams/armelf_linux.sh (OTHER_TEXT_SECTIONS): Ditto.
	* emulparams/armnto.sh (OTHER_TEXT_SECTIONS): Ditto.
	* ld.texinfo: Document --fix-v4bx-interworking.

	ld/testsuite/
	* ld-arm/armv4-bx.d: New test.
	* ld-arm/armv4-bx.s: New test.
	* ld-arm/arm.ld: Add .v4bx.
	* ld-arm/arm-elf.exp: Add armv4-bx.

	gas/testsuite/
	* gas/arm/thumb.d: Exclude EABI targets.
	* gas/arm/arch4t.d: Exclude EABI targts.
	* gas/arm/v4bx.d: New test.
	* gas/arm/v4bx.s: New test.
	* gas/arm/thumb-eabi.d: New test.
	* gas/arm/arch4t-eabi.d: New test.

	gas/
	* config/tc-arm.c (fix_v4bx): New variable.
	(do_bx): Generate V4BX relocations.
	(md_assemble): Allow bx on v4 codes when fix_v4bx.
	(md_apply_fix): Handle BFD_RELOC_ARM_V4BX.
	(tc_gen_reloc): Ditto.
	(OPTION_FIX_V4BX): Define.
	(md_longopts): Add fix-v4bx.
	(md_parse_option): Handle OPTION_FIX_V4BX.
	(md_show_usage): Document --fix-v4bx.
	* doc/c-arm.texi: Document --fix-v4bx.

	bfd/
	* reloc.c: Add BFD_RELOC_ARM_V4BX.
	* elf32-arm.c (elf32_arm_reloc_map): Add BFD_RELOC_ARM_V4BX.
	(ARM_BX_GLUE_SECTION_NAME, ARM_BX_GLUE_SECTION_NAME): Define.
	(elf32_arm_link_hash_table): Add bx_glue_size and bx_glue_offset.
	Update comment for fix_v4bx.
	(elf32_arm_link_hash_table_create): Zero bx_glue_size and
	bx_glue_offset.
	(ARM_BX_VENEER_SIZE, armbx1_tst_insn, armbx2_moveq_insn,
	armbx3_bx_insn): New.
	(bfd_elf32_arm_allocate_interworking_sections): Allocate BX veneer
	section.
	(bfd_elf32_arm_add_glue_sections_to_bfd): Ditto.
	(bfd_elf32_arm_process_before_allocation): Record BX veneers.
	(record_arm_bx_glue, elf32_arm_bx_glue): New functions.
	(elf32_arm_final_link_relocate): Handle BX veneers.
	(elf32_arm_output_arch_local_syms): Output mapping symbol for .v4_bx.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d193 3
d198 2
a199 1
@@code{arm1136jf-s}
d201 1
a201 1
@@code{maverick}.
@


1.46
log
@	* doc/c-arm.texi (ARM Directives): Move brackets out of @@vars.
@
text
@d279 5
@


1.45
log
@	gas/
	* doc/c-arm.texi: Add documentation for .dn/.qn directives.
@
text
@d406 2
a407 2
@@item @@var{name} .dn @@var{register name} [@@var{.type}] [@@var{[index]}]
@@item @@var{name} .qn @@var{register name} [@@var{.type}] [@@var{[index]}]
@


1.45.2.1
log
@	* doc/c-arm.texi (ARM Directives): Move brackets out of @@vars.
@
text
@d406 2
a407 2
@@item @@var{name} .dn @@var{register name} [@@var{.type}] [[@@var{index}]]
@@item @@var{name} .qn @@var{register name} [@@var{.type}] [[@@var{index}]]
@


1.44
log
@2006-12-13  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_arch_option_table): Add v7-{a,r,m}.
	* doc/c-arm.texi: Fix spelling of ARMv7 profile variants.
@
text
@d394 1
a394 1
@@code{req} directive.  For example:
d405 30
@


1.43
log
@2006-11-29  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_is_eabi): New function.
	* config/tc-arm.h (arm_is_eabi): New prototype.
	(THUMB_IS_FUNC): Use ELF function type for EABI objects.
	* doc/c-arm.texi (.thumb_func): Update documentation.
@
text
@d158 3
a160 3
@@code{armv7a},
@@code{armv7r},
@@code{armv7m},
@


1.42
log
@2006-10-31  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (object_arch): New variable.
	(s_arm_object_arch): New function.
	(md_pseudo_table): Add object_arch.
	(aeabi_set_public_attributes): Obey object_arch.
	* doc/c-arm.texi: Document .object_arch.
@
text
@d432 3
@


1.41
log
@2006-09-16  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (s_arm_unwind_movsp): Add offset argument.
	* doc/c-arm.texi (movsp): Document offset argument.

	gas/testsuite/
	* gas/arm/unwind.s: Test two argument form of .movsp.
	* gas/arm/unwind.d: Update expected output.
	* gas/arm/unwind_vxworks.d: Ditto.
@
text
@d588 6
@


1.40
log
@Fix spelling typos
@
text
@d548 4
a551 2
@@item .movsp @@var{reg}
Tell the unwinder that @@var{reg} contains the current stack pointer.
@


1.39
log
@gas/
	* config/tc-arm.c (s_arm_unwind_save_vfp_armv6): New.  Parse
	a directive saving VFP registers for ARMv6 or later.
	(s_arm_unwind_save): Add parameter arch_v6 and call
	s_arm_unwind_save_vfp or s_arm_unwind_save_vfp_armv6 as
	appropriate.
	(md_pseudo_table): Add entry for new "vsave" directive.
	* doc/c-arm.texi: Correct error in example for "save"
	directive (fstmdf -> fstmdx).  Also document "vsave" directive.
@
text
@d257 1
a257 1
The following values are recognised:
d361 1
a361 1
respectively.  For example to load the 32-bit addresss of foo into r0:
@


1.38
log
@2006-05-11  Paul Brook  <paul@@codesourcery.com>

bfd/
	* elf32-arm.c (elf32_arm_reloc_map): Add MOVW and MOVT relocs.
	(elf32_arm_final_link_relocate): Handle MOVW and MOVT relocs.
	(elf32_arm_gc_sweep_hook, elf32_arm_check_relocs): Ditto.
	* reloc.c: Ditto.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
gas/
	* config/tc-arm.c (parse_half): New function.
	(operand_parse_code): Remove OP_Iffff.  Add OP_HALF.
	(parse_operands): Ditto.
	(do_mov16): Reject invalid relocations.
	(do_t_mov16): Ditto.  Use Thumb reloc numbers.
	(insns): Replace Iffff with HALF.
	(md_apply_fix): Add MOVW and MOVT relocs.
	(tc_gen_reloc): Ditto.
	* doc/c-arm.texi: Document relocation operators
ld/testsuite/
	* ld-arm/arm-elf.exp: Add arm-movwt.
	* ld-arm/arm-movwt.d: New test.
	* ld-arm/arm-movwt.s: New test.
	* ld-arm/arm.ld: Add .far.
@
text
@d509 1
a509 1
  fstmdf sp!, @@{d8, d9, d10@@}
d521 20
@


1.37
log
@2006-03-10  Paul Brook  <paul@@codesourcery.com>

bfd/
	* elf32-arm.c (INTERWORK_FLAG): Handle EABIv5.
	(elf32_arm_print_private_bfd_data): Ditto.
binutils/
	* readelf.c (decode_ARM_machine_flags):  Handle EABIv5.
gas/
	* config/tc-arm.c (md_begin): Handle EABIv5.
	(arm_eabis): Add EF_ARM_EABI_VER5.
	* doc/c-arm.texi: Document -meabi=5.
include/elf/
	* arm.h (EF_ARM_EABI_VER5): Define.
@
text
@d287 1
d327 2
d330 37
@


1.37.2.1
log
@2006-05-03  Paul Brook  <paul@@codesourcery.com>

	* bfd/elf32-arm.c (elf32_arm_reloc_map): Add MOVW and MOVT relocs.
	(elf32_arm_final_link_relocate): Handle MOVW and MOVT relocs.
	(elf32_arm_gc_sweep_hook, elf32_arm_check_relocs): Ditto.
	* bfd/reloc.c: Ditto.
	* bfd/bfd-in2.h: Regenerate.
	* bfd/libbfd.h: Regenerate.
	* bfd/libcoff.h: Regenerate.
	* gas/config/tc-arm.c (parse_half): New function.
	(operand_parse_code): Remove OP_Iffff.  Add OP_HALF.
	(parse_operands): Ditto.
	(do_mov16): Reject invalid relocations.
	(do_t_mov16): Ditto.  Use Thumb reloc numbers.
	(insns): Replace Iffff with HALF.
	(md_apply_fix): Add MOVW and MOVT relocs.
	(tc_gen_reloc): Ditto.
	* gas/doc/c-arm.texi: Document relocation operators
	* ld/testsuite/ld-arm/arm-elf.exp: Add arm-movwt.
	* ld/testsuite/ld-arm/arm-movwt.d: New test.
	* ld/testsuite/ld-arm/arm-movwt.s: New test.
	* ld/testsuite/ld-arm/arm.ld: Add .far.
@
text
@a286 1
* ARM-Relocations::	     Relocations
a325 2
@@node ARM-Relocations
@@subsection ARM relocation generation
a326 37
@@cindex data relocations, ARM
@@cindex ARM data relocations
Specific data relocations can be generated by putting the relocation name
in parentheses after the symbol name.  For example:

@@smallexample
        .word foo(TARGET1)
@@end smallexample

This will generate an @@samp{R_ARM_TARGET1} relocation against the symbol
@@var{foo}.
The following relocations are supported:
@@code{GOT},
@@code{GOTOFF},
@@code{TARGET1},
@@code{TARGET2},
@@code{SBREL},
@@code{TLSGD},
@@code{TLSLDM},
@@code{TLSLDO},
@@code{GOTTPOFF}
and
@@code{TPOFF}.

For compatibility with older toolchains the assembler also accepts
@@code{(PLT)} after branch targets.  This will generate the deprecated
@@samp{R_ARM_PLT32} relocation.

@@cindex MOVW and MOVT relocations, ARM
Relocations for @@samp{MOVW} and @@samp{MOVT} instructions can be generated
by prefixing the value with @@samp{#:lower16:} and @@samp{#:upper16}
respectively.  For example to load the 32-bit addresss of foo into r0:

@@smallexample
        MOVW r0, #:lower16:foo
        MOVT r0, #:upper16:foo
@@end smallexample
@


1.37.2.2
log
@	* gas/doc/c-arm.texi: Add documentation for .dn/.qn directives.
@
text
@d394 1
a394 1
@@code{req}, @@code{dn} or @@code{qn} directives.  For example:
a404 29
@@cindex @@code{dn} and @@code{qn} directives, ARM
@@item @@var{name} .dn @@var{register name} [@@var{.type}] [@@var{[index]}]
@@item @@var{name} .qn @@var{register name} [@@var{.type}] [@@var{[index]}]

The @@code{dn} and @@code{qn} are used to create typed and/or indexed
register aliases for use in Advanced SIMD Extension (Neon) instructions.
The former should be used to create aliases of double-precision registers,
and the latter to create aliases of quad-precision registers.

If these directives are used to create typed aliases, those aliases can
be used in Neon instructions instead of writing types after the mnemonic
or after each operand.  For example:

@@smallexample
        x .dn d2.f32
        y .dn d3.f32
        z .dn d4.f32[1]
        vmul x,y,z
@@end smallexample

This is equivalent to writing the following:

@@smallexample
        vmul.f32 d2,d3,d4[1]
@@end smallexample

Aliases created using @@code{dn} or @@code{qn} can be destroyed using
@@code{unreq}.

@


1.37.2.3
log
@        * config/tc-arm.c (s_arm_unwind_save_vfp_armv6): New.  Parse
        a directive saving VFP registers for ARMv6 or later.
        (s_arm_unwind_save): Add parameter arch_v6 and call
        s_arm_unwind_save_vfp or s_arm_unwind_save_vfp_armv6 as
        appropriate.
        (md_pseudo_table): Add entry for new "vsave" directive.
        * doc/c-arm.texi: Correct error in example for "save"
        directive (fstmdf -> fstmdx).  Also document "vsave" directive.
@
text
@d538 1
a538 1
  fstmdx sp!, @@{d8, d9, d10@@}
a549 20
@@cindex @@code{.vsave} directive, ARM
@@item .vsave @@var{vfp-reglist}
Generate unwinder annotations to restore the VFP registers in @@var{vfp-reglist}
using FLDMD.  Also works for VFPv3 registers
that are to be restored using VLDM.
The format of @@var{vfp-reglist} is the same as the corresponding store-multiple
instruction.

@@smallexample
@@exdent @@emph{VFP registers}
  .vsave @@{d8, d9, d10@@}
  fstmdd sp!, @@{d8, d9, d10@@}
@@exdent @@emph{VFPv3 registers}
  .vsave @@{d15, d16, d17@@}
  vstm sp!, @@{d15, d16, d17@@}
@@end smallexample

Since FLDMX and FSTMX are now deprecated, this directive should be
used in favour of @@code{.save} for saving VFP registers for ARMv6 and above.

@


1.37.2.4
log
@2006-09-08  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (object_arch): New variable.
	(s_arm_object_arch): New function.
	(md_pseudo_table): Add object_arch.
	(aeabi_set_public_attributes): Obey object_arch.
	* doc/c-arm.texi: Document .object_arch.
@
text
@a614 6
@@cindex @@code{.object_arch} directive, ARM
@@item .object_arch @@var{name}
Override the architecture recorded in the EABI object attribute section.
Valid values for @@var{name} are the same as for the @@code{.arch} directive.
Typically this is useful when code uses runtime detection of CPU features.

@


1.37.2.5
log
@2006-09-14  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (s_arm_unwind_movsp): Add offset argument.
	* doc/c-arm.texi (movsp): Document offset argument.
@
text
@d577 2
a578 4
@@item .movsp @@var{reg} [, #@@var{offset}]
Tell the unwinder that @@var{reg} contains an offset from the current
stack pointer.  If @@var{offset} is not specified then it is assumed to be
zero.
@


1.37.2.6
log
@2006-10-26  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_is_eabi): New function.
	* config/tc-arm.h (arm_is_eabi): New prototype.
	(THUMB_IS_FUNC): Use ELF function type for EABI objects.
	* doc/c-arm.texi (.thumb_func): Update documentation.
@
text
@a460 3
This directive is not neccessary when generating EABI objects.  On these
targets the encoding is implicit when generating Thumb code.

@


1.37.2.7
log
@2006-12-13  Paul Brook  <paul@@codesourcery.com>

	Backport from mainline.
	gas/
	* config/tc-arm.c (arm_arch_option_table): Add v7-{a,r,m}.
	* doc/c-arm.texi: Fix spelling of ARMv7 profile variants.
@
text
@d158 3
a160 3
@@code{armv7-a},
@@code{armv7-r},
@@code{armv7-m},
@


1.36
log
@2006-02-24  Paul Brook  <paul@@codesourcery.com>

gas/
	* config/arm/tc-arm.c (arm_ext_v6_notm, arm_ext_div, arm_ext_v7,
	arm_ext_v7a, arm_ext_v7r, arm_ext_v7m): New variables.
	(struct asm_barrier_opt): Define.
	(arm_v7m_psr_hsh, arm_barrier_opt_hsh): New variables.
	(parse_psr): Accept V7M psr names.
	(parse_barrier): New function.
	(enum operand_parse_code): Add OP_oBARRIER.
	(parse_operands): Implement OP_oBARRIER.
	(do_barrier): New function.
	(do_dbg, do_pli, do_t_barrier, do_t_dbg, do_t_div): New functions.
	(do_t_cpsi): Add V7M restrictions.
	(do_t_mrs, do_t_msr): Validate V7M variants.
	(md_assemble): Check for NULL variants.
	(v7m_psrs, barrier_opt_names): New tables.
	(insns): Add V7 instructions.  Mark V6 instructions absent from V7M.
	(md_begin): Initialize arm_v7m_psr_hsh and arm_barrier_opt_hsh.
	(arm_cpu_option_table): Add Cortex-M3, R4 and A8.
	(arm_arch_option_table): Add armv7, armv7a, armv7r and armv7m.
	(struct cpu_arch_ver_table): Define.
	(cpu_arch_ver): New.
	(aeabi_set_public_attributes): Use cpu_arch_ver.  Set
	Tag_CPU_arch_profile.
	* doc/c-arm.texi: Document new cpu and arch options.
gas/testsuite/
	* gas/arm/thumb32.d: Fix expected msr and mrs output.
	* gas/arm/arch7.d: New test.
	* gas/arm/arch7.s: New test.
	* gas/arm/arch7m-bad.l: New test.
	* gas/arm/arch7m-bad.d: New test.
	* gas/arm/arch7m-bad.s: New test.
include/opcode/
	* arm.h: Add V7 feature bits.
opcodes/
	* arm-dis.c (arm_opcodes): Add V7 instructions.
	(thumb32_opcodes): Ditto.  Handle V7M MSR/MRS variants.
	(print_arm_address): New function.
	(print_insn_arm): Use it.  Add 'P' and 'U' cases.
	(psr_name): New function.
	(print_insn_thumb32): Add 'U', 'C' and 'D' cases.
@
text
@d258 2
a259 1
@@code{gnu}
d261 1
a261 1
@@code{4}.
@


1.35
log
@2005-10-08  Paul Brook  <paul@@codesourcery.com>

bfd/
	* elf32-arm.c: Move #include "elf/arm.h" after libbfd.h.
	(NUM_KNOWN_ATTRIBUTES): Define.
	(aeabi_attribute, aeabi_attribute_list): Define.
	(elf32_arm_obj_tdata): Add known_eabi_attributes and
	other_eabi_attributes.
	(uleb128_size, is_default_attr, eabi_attr_size,
	elf32_arm_eabi_attr_size, write_uleb128, write_eabi_attribute,
	elf32_arm_set_eabi_attr_contents, elf32_arm_bfd_final_link,
	elf32_arm_new_eabi_attr, attr_strdup, elf32_arm_add_eabi_attr_int,
	elf32_arm_add_eabi_attr_compat, copy_eabi_attributes,
	elf32_arm_merge_eabi_attributes): New functions.
	(elf32_arm_copy_private_bfd_data): Copy EABI object attributes.
	(elf32_arm_fake_sections): Handle .ARM.attributes.
	(elf32_arm_parse_attributes): New function.
	(elf32_arm_section_from_shdr): Use it.
	(bfd_elf32_bfd_final_link): Define.
gas/
	* config/tc-arm.c: Don't provide fallback default for CPU_DEFAULT.
	(arm_arch_used, thumb_arch_used, selected_cpu, selected_cpu_name):
	New variables.
	(arm_cpu_option_table): Add canonical_name.
	(arm_cpus): Populate canonical_name field.
	(s_arm_eabi_attribute, s_arm_arch, s_arm_cpu, s_arm_fpu,
	aeabi_set_public_attributes, arm_md_end): New functions.
	(md_pseudo_table): Add "cpu", "arch", "fpu" and "eabi_attribute".
	(md_assemble): Set thumb_arch_used and arm_arch_used.
	(md_begin): Set defaut cpu if CPU_DEFAULT not defined.
	* config/tc-arm.h (md_end): Define.
	* doc/c-arm.texi: Document .cpu, .arch, .fpu and .eabi_attribute.
gas/testsuite/
	* gas/arm/eabi_attr_1.s: New test.
	* gas/arm/eabi_attr_1.d: New test.
	* gas/arm/arm7t.d: Only disassemble code sections.
	* gas/arm/bignum1.d: Ignore Arm object attribute sections.
	* gas/arm/mapping.d: Ditto.
	* gas/arm/unwind.d: Ditto.
	* gas/elf/section0.d: Ditto.
	* gas/elf/section1.d: Ditto.
	* gas/elf/elf.exp: Set target_machine for Arm EABI based targets.
	* gas/elf/section2.e-armeabi: New file.
include/elf/
	* arm.h: Add prototypes for BFD object attribute routines.
ld/testsuite/
	* ld-arm/arm-rel31.d: Ignore Arm object attribute sections.
	* ld-arm/arm-target1-abs.d: Ditto.
	* ld-arm/arm-target1-rel.d: Ditto.
	* ld-arm/arm-target2-abs.d: Ditto.
	* ld-arm/arm-target2-got-rel.d: Ditto.
	* ld-arm/arm-target2-rel.d: Ditto.
@
text
@d110 3
d157 4
@


1.34
log
@2005-09-27  Paul Brook  <paul@@codesourcery.com>

	* config/arm.c (arm_cpus): Add more cpu names.
	* doc/c-arm.texi: Document them.
@
text
@d508 21
@


1.33
log
@update copyright dates
@
text
@d89 1
d92 2
d95 1
d100 1
d104 2
@


1.32
log
@./
	* configure.in (arm-*-oabi*, thumb-*-oabi*): Remove.
	* configure: Regenerated.
bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace
	elfarm-nabi with elf32-arm.  Remove elfarm-oabi.
	(elf32-arm.lo): Replace elfarm-nabi.lo rule.  Remove elf32-arm.h
	dependency.
	* config.bfd: Move arm-*-oabi* and thumb-*-oabi* from obsolete list
	to a new removed list.  Remove normal configuration stanzas.
	* configure.in: (bfd_elf32_bigarm_vec, bfd_elf32_bigarm_symbian_vec)
	(bfd_elf32_littlearm_symbian_vec, bfd_elf32_littlearm_vec): Replace
	elfarm-nabi.lo with elf32-arm.lo.
	(bfd_elf32_bigarm_oabi_vec, bfd_elf32_littlearm_oabi_vec): Remove.
	* elf32-arm.c: Renamed from elfarm-nabi.c.  Inline elf32-arm.h.
	* elf32-arm.h: Remove.
	* elfarm-oabi.c: Remove.
	* targets.c (_bfd_target_vector): Remove bfd_elf32_bigarm_oabi_vec
	and bfd_elf32_littlearm_oabi_vec.
	* aclocal.m4, Makefile.in, configure, doc/Makefile.in: Regenerated.
gas/
	* configure.in: Remove arm-*-oabi and thumb-*-oabi.
	* config/tc-arm.c (target_oabi): Delete.
	(md_apply_fix3, elf32_arm_target_format): Remove target_oabi checks.
	(arm_opts): Remove moabi.
	* doc/as.texinfo (Overview): Remove documentation of -moabi.
	* doc/c-arm.texi (ARM Options): Likewise.
	* configure: Regenerated.
ld/
	* Makefile.am (ALL_EMULATIONS): Remove earmelf_oabi.o.
	(earmelf_oabi.c): Remove rule.
	* configure.tgt: Remove arm-*-oabi and thumb-*-oabi.
	* emulparams/armelf_oabi.sh, emultempl/armelf_oabi.em: Delete files.
	* Makefile.in: Regenerated.
@
text
@d1 1
a1 1
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004
@


1.31
log
@2004-10-12  Paul Brook  <paul@@codesourcery.com>

bfd/
	* elf32-arm.h: Support EABI version 4 objects.
binutils/
	* readelf.c (decode_ARM_machine_flags): Support EABI version 4.
gas/
	* config/tc-arm.c (md_begin): Change EF_ARM_EABI_VER3 to
	EF_ARM_EABI_VER4.
	(arm_eabis): Ditto.
	* doc/c-arm.texi: Document that we actually support -meabi=4, not
	-meabi=3.
include/
	* elf/arm.h (EF_ARM_EABI_VER4): Define.
@
text
@a263 7
@@cindex @@code{-moabi} command line option, ARM
@@item -moabi
This indicates that the code should be assembled using the old ARM ELF
conventions, based on a beta release release of the ARM-ELF
specifications, rather than the default conventions which are based on
the final release of the ARM-ELF specifications.

@


1.30
log
@Add support for generating ARM unwind tables.
@
text
@d246 1
a246 1
@@code{3}.
@


1.29
log
@Apply Paul Brook's patch to implement armv6k instructions
@
text
@d410 98
@


1.28
log
@* doc/c-arm.texi (ARM Options): Document canonical names of CPUs.
@
text
@d1 1
a1 1
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2003
d99 4
d144 3
@


1.27
log
@	* bfd/elf32-arm.h (arm_print_private_bfd_data): Add EABI v3.
	* binutils/readelf.c (decode_ARM_machine_flags): Add EABI v3.
	* gas/config/tc-arm.c (meabi_flags): New variable.
	(arm_parse_eabi): New function.
	(md_begin): Set flags for EABI v3.
	(arm_eabis): Add.
	(arm_long_opts): Add meabi.
	* include/elf/arm.h (EF_ERM_BE8, EF_ARM_LE8, EF_ARM_EABI_VER3): Add.
	* doc/as.texinf <ARM>: Document -meabi.
	* doc/c-arm.texi: Ditto.
@
text
@d70 1
d86 1
a86 1
@@code{arm926ejs},
d96 3
a98 3
@@code{arm1026ejs},
@@code{arm1136js},
@@code{arm1136jfs},
d174 1
a174 1
@@code{arm1136jfs}
@


1.26
log
@	* gas/config/tc-arm.c (arm_cpus): Add 926ejs and 1026ejs.
	* gas/doc/c-arm.texi: Document them.
@
text
@d231 9
@


1.25
log
@	* doc/c-arm.texi: Document -march=armv6.
@
text
@d84 2
d94 2
a95 1
@@code{arm1020e}, 
@


1.24
log
@	* config/tc-arm.c (arm_archs): Change "armv6" to "armv6j".
	* doc/c-arm.texi (ARM Options): Likewise.
@
text
@d134 1
@


1.23
log
@	* config/tc-arm.c (FPU_MAVERICK): Define.
	(FPU_ARCH_MAVERICK): Define.
	(arm_float_abi): Define.
	(mfloat_abi_opt): New variable.
	(md_begin): Use them.
	(arm_opts): Add msoft-float and mhard-float.
	(arm_cpus): Use FPU_ARCH_MAVERICK.
	(arm_fpus): Add maverick.
	(arm_float_abis): Add.
	(arm_parse_float_abi): New function.
	(arm_long_options): Add mfloat-abi.
	* doc/as.texinfo: Document -mfloat-abi=.
	* doc/c-arm.text: Ditto. Menution -fpu=maverick.
@
text
@d134 1
a134 1
@@code{armv6},
@


1.22
log
@	* gas/arm/arm.exp: Add archv6 and thumbv6.
	* gas/arm/archv6.d: New file.
	* gas/arm/archv6.s: Likewise.
	* gas/arm/thumbv6.d: Likewise.
	* gas/arm/thumbv6.s: Likewise.

	Add V6 support.
	* config/tc-arm.c (ARM_EXT_V6): New macro.
	(ARM_ARCH_V6): Likewise.
	(SHIFT_IMMEDIATE): Likewise.
	(SHIFT_LSL_OR_ASR_IMMEDIATE): Likewise.
	(SHIFT_ASR_IMMEDIATE): Likewise.
	(SHIFT_LSL_IMMMEDIATE): Likewise.
	(do_cps): New function.
	(do_cpsi): Likewise.
	(do_ldrex): Likewise.
	(do_pkhbt): Likewise.
	(do_pkhtb): Likewise.
	(do_qadd16): Likewise.
	(do_rev): Likewise.
	(do_rfe): Likewise.
	(do_sxtah): Likewise.
	(do_sxth): Likewise.
	(do_setend): Likewise.
	(do_smlad): Likewise.
	(do_smlald): Likewise.
	(do_smmul): Likewise.
	(do_ssat): Likewise.
	(do_usat): Likewise.
	(do_srs): Likewise.
	(do_ssat16): Likewise.
	(do_usat16): Likewise.
	(do_strex): Likewise.
	(do_umaal): Likewise.
	(do_cps_mode): Likewise.
	(do_cps_flags): Likewise.
	(do_endian_specifier): Likewise.
	(do_pkh_core): Likewise.
	(do_sat): Likewise.
	(do_sat16): Likewise.
	(insns): Add V6 instructions.
	(do_t_cps): New function.
	(do_t_cpy): Likewise.
	(do_t_setend): Likewise.
	(THUMB_CPY): New macro.
	(tinsns): Add V6 instructions.
	(decode_shift): Handle V6 restricted-shift options.
	(thumb_mov_compare): Support CPY.
	(arm_cores): Add arm1136js and arm1136jfs.
	(arm_archs): Add armv6.
	(arm_fpus): Add arm1136jfs.
	* doc/c-arm.texi (ARM Options): Mention arm1136js, arm1136jfs, and
	armv6 options.

	* gas/arm/arm.exp: Add archv6 and thumbv6.
	* gas/arm/archv6.d: New file.
	* gas/arm/archv6.s: Likewise.
	* gas/arm/thumbv6.d: Likewise.
	* gas/arm/thumbv6.s: Likewise.

	* arm-dis.c (print_arm_insn): Add 'W' macro.
	* arm-opc.h (arm_opcodes): Add V6 instructions.
	(thumb_opcodes): Likewise.
@
text
@d169 1
d171 1
a171 1
@@code{arm1136jfs}.
d216 10
@


1.21
log
@Add support for ARM ELF Mapping symbols
@
text
@d93 2
d133 2
a134 1
@@code{armv5texp}
d167 2
a168 1
@@code{arm1020t}
d170 1
a170 1
@@code{arm1020e}.
@


1.20
log
@* config/tc-arm.texi (struct reg_entry): Add new field 'builtin'.
  (rn_table, iwmmxt_table, cp_table, cn_table, fn_table, sn_table,
  dn_table, mav_mvf_table, mac_mvd_table, mav_mvfx_table,
  mav_mvax_table, mav_dspc_table): Initialise new field.
  (insert_reg_alias): Initialise new field.
  (md_pseudo_table): Add "unreq" entry.
  (s_unreq): New function: Undo the effects of a previous .req.
* doc/c-arm.texi: Document new pseudo op.
* NEWS: Mention new feature.
* testsuite/gas/arm/req.s: New test file.  Check .req and .unreq psuedo ops.
* testsuite/gas/arm/req.l: Expected error output from req.s test.
* testsuite/gas/arm/copro.d: Set target architecture for objdump so that the
  test will work on architectures which cannot encode higher arm architecture
  types in their file headers.
* testsuite/gas/arm/arm.exp: Run new req.s test.
  Skip thumb instruction test for PE targets which do not support
  thumb relocations.
* testsuite/gas/elf/elf.exp: Skip special handling of section2 test for XScale
  targets - it is no longer needed.
@
text
@d25 1
d442 29
@


1.19
log
@Fix 'the the' typo
@
text
@d1 1
a1 1
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001
d305 14
@


1.18
log
@Add iWMMXt support
@
text
@d202 1
a202 1
This indicates the the floating point variant of the APCS should be
@


1.17
log
@	* doc/c-alpha.texi: Fix typos.
	* doc/c-arm.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i960.texi: Likewise.
	* doc/c-ia64.texi: Likewise.
	* doc/c-mmix.texi: Likewise.
	* doc/c-ns32k.texi: Likewise.
	* doc/c-pdp11.texi: Likewise.
	* doc/c-pj.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-sparc.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-vax.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@d94 1
d106 1
d131 1
@


1.16
log
@Add per-section and per-sub-section literal pools.
@
text
@d292 1
a292 1
boundary).  This is for compatability with ARM's own assembler.
@


1.15
log
@	* doc/as.texinfo (Overview) <Target ARM options>: Add missing {}
	to @@dots call.
	<Detailed description, ARM options>: Ditto.
	* doc/c-arm.texi (ARM Options): Ditto.
@
text
@d343 8
@


1.14
log
@* doc/c-arm.texi: Add new fpe options to list of supported flags.
@
text
@d35 1
a35 1
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots]
d109 1
a109 1
@@item -march=@@var{architecture}[+@@var{extension}@@dots]
@


1.13
log
@* NEWS: Mention new ARM command-line options and VFP support.

* config/tc-arm.c (ARM_CEXT_XSCALE): Replaces ARM_EXT_XSCALE.  All
uses changed.
(ARM_CEXT_MAVERICK): Similarly.
(ARM_ANY): Now means any core instruction.
(CPU_DEFAULT): Default to ARM_ANY.
(uses_apcs_26, atcps, support_interwork, uses_apcs_float)
(pic_code): Declare for all object types.  Make type int.
(legacy_cpu, legacy_fpu, mcpu_cpu_opt, mcpu_fpu_opt, march_cpu_opt)
(march_fpu_opt, mfpu_opt): Declare.
(md_longopts): Tidy up conditional definitions.
(arm_opts, arm_cpus, arm_archs, arm_fpus, arm_extensions)
(arm_long_opts): New tables.
(arm_parse_cpu, arm_parse_arch, arm_parse_fpu): New functions.
(arm_parse_extension): New function.
(md_parse_option): Rewrite using new table-driven system.
(md_show_usage): Use new table-driven system.
(md_begin): Calculate cpu_variant from command line option data.
* doc/as.texinfo (ARM ISA options): Docuement new ARM-specific
command-line options.
* doc/c-arm.texi: Likewise.

Testsuite:
* gas/arm/vfp1.d: Use new command-line options.
* gas/arm/vfp1xD.d: Likewise.
* gas/arm/arm.exp (vfp-bad): Likewise.
* gas/arm/maverick.d: Likewise.
@
text
@d147 2
@


1.12
log
@2001-10-08  Aldy Hernandez  <aldyh@@redhat.com>

	* gas/doc/arm/c-arm.texi (ARM Options): Add arm9e documentation.
@
text
@d34 2
a35 4
@@cindex @@code{-marm} command line option, ARM
@@item -marm@@code{[2|250|3|6|60|600|610|620|7|7m|7d|7dm|7di|7dmi|70|700|700i|710|710c|7100|7500|7500fe|7tdmi|8|810|9|9tdmi|920|strongarm|strongarm110|strongarm1100]}
@@itemx -mxscale
@@itemx -marm9e
d38 69
a106 1
will not execute on the target processor.
d108 2
a109 5
The option @@code{-marm9e} specifies that the target processor is the
Cirrus ARM processor with the Maverick DSP co-processor.

@@cindex @@code{-marmv} command line option, ARM
@@item -marmv@@code{[2|2a|3|3m|4|4t|5|5t|5te]}
d112 57
a168 3
will not execute on the target architecture.
The option @@code{-marmv5te} specifies that v5t architecture should be
used with the El Segundo extensions enabled.
d172 3
a174 18
This option specifies that only Thumb instructions should be assembled.

@@cindex @@code{-mall} command line option, ARM
@@item -mall
This option specifies that any Arm or Thumb instruction should be assembled.

@@cindex @@code{-mfpa} command line option, ARM
@@item -mfpa @@code{[10|11]}
This option specifies the floating point architecture in use on the
target processor. 

@@cindex @@code{-mfpe-old} command line option, ARM
@@item -mfpe-old
Do not allow the assembly of floating point multiple instructions.

@@cindex @@code{-mno-fpu} command line option, ARM
@@item -mno-fpu
Do not allow the assembly of any floating point instructions.
@


1.11
log
@Fix copyright notices
@
text
@d37 1
d41 3
@


1.10
log
@2001-01-13  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: Fix spelling and cross-references.

	* doc/c-arm.texi: Fix typos.  Say that `;' is a line separator
	character for all systems, not just GNU/Linux.  Make it explicit
	that `-k' doesn't affect code generation, just ELF flags.
@
text
@d1 2
a2 1
@@c Copyright (C) 1996, 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.10.2.1
log
@Update copyright notices.
@
text
@d1 1
a1 2
@@c Copyright 1996, 1997, 1998, 1999, 2000, 2001
@@c Free Software Foundation, Inc.
@


1.9
log
@Add ARM v5t, v5te and XScale support
@
text
@d63 1
a63 1
Do not allow the assemble of floating point multiple instructions.
d112 2
a113 1
This option enables the generation of PIC (position independent code).
d144 2
a145 2
On ARM systems running the GNU/Linux operating system, @@samp{;} can be
used instead of a newline to separate statements.
d293 1
a293 1
register.  The instruction will evaluate to one or two a PC relative ADD
@


1.8
log
@* doc/c-arm.texi (ARM Directives): Fix warnings from makeinfo.
@
text
@d35 1
d41 1
a41 1
@@item -marmv@@code{[2|2a|3|3m|4|4t|5|5t]}
d45 2
d79 8
@


1.7
log
@Fix spelling typos.
Remove use of DEFUN().
@
text
@d54 1
a54 1
@@item -mfpa @@var{[10|11]}
d72 1
a72 1
@@item -mapcs @@var{[26|32]}
d183 1
a183 1
@@item .code @@var{[16|32]}
@


1.6
log
@Document behaviour of .align 0 for ARM targets.
Remove incomplete v5e code from tc-arm.c
@
text
@d206 2
a207 1
interworking is not going to be performed.
@


1.5
log
@fixup ARM documentation
@
text
@d1 1
a1 1
@@c Copyright (C) 1996, 1998, 1999 Free Software Foundation, Inc.
d30 1
d32 1
d34 1
a34 1
@@item -marm [@@var{2}|@@var{250}|@@var{3}|@@var{6}|@@var{60}|@@var{600}|@@var{610}|@@var{620}|@@var{7}|@@var{7m}|@@var{7d}|@@var{7dm}|@@var{7di}|@@var{7dmi}|@@var{70}|@@var{700}|@@var{700i}|@@var{710}|@@var{710c}|@@var{7100}|@@var{7500}|@@var{7500fe}|@@var{7tdmi}|@@var{8}|@@var{810}|@@var{9}|@@var{9tdmi}|@@var{920}|@@var{strongarm}|@@var{strongarm110}|@@var{strongarm1100}]
d38 1
d40 1
a40 1
@@item -marmv [@@var{2}|@@var{2a}|@@var{3}|@@var{3m}|@@var{4}|@@var{4t}|@@var{5}|@@var{5t}]
d44 1
d48 1
d52 1
d54 1
a54 1
@@item -mfpa [@@var{10}|@@var{11}]
d57 1
d61 1
d65 1
d70 1
d72 1
a72 1
@@item -mapcs [@@var{26}|@@var{32}]
d76 2
d82 2
d87 1
d92 1
d97 1
d102 2
d109 1
d166 7
d183 1
a183 1
@@item .code [@@var{16}|@@var{32}]
@


1.5.2.1
log
@2000-04-24  Nick Clifton  <nickc@@cygnus.com>

	* doc/c-arm.texi (ARM Directives): Document behaviour of .align 0.
	* doc/as.texinfo (Align): Include arm and strongarm in list of
	targets that have the second form of the behaviour of the .align
	directive.

2000-05-29  Philip Blundell  <philb@@gnu.org>

	* doc/as.texinfo: (Local Labels): Delete misplaced mention of ARM.
@
text
@d1 1
a1 1
@@c Copyright (C) 1996, 1998, 1999, 2000 Free Software Foundation, Inc.
a29 1

a30 1

d32 1
a32 1
@@item -marm@@code{[2|250|3|6|60|600|610|620|7|7m|7d|7dm|7di|7dmi|70|700|700i|710|710c|7100|7500|7500fe|7tdmi|8|810|9|9tdmi|920|strongarm|strongarm110|strongarm1100]}
a35 1

d37 1
a37 1
@@item -marmv@@code{[2|2a|3|3m|4|4t|5|5t]}
a40 1

a43 1

a46 1

d48 1
a48 1
@@item -mfpa @@var{[10|11]}
a50 1

a53 1

a56 1

a60 1

d62 1
a62 1
@@item -mapcs @@var{[26|32]}
a65 2

@@cindex @@code{-mapcs-float} command line option, ARM
a69 2

@@cindex @@code{-mapcs-reentrant} command line option, ARM
a72 1

a76 1

a80 1

a84 2

@@cindex @@code{-moabi} command line option, ARM
a89 1

a145 7
@@cindex @@code{align} directive, ARM
@@item .align @@var{expression} [, @@var{expression}]
This is the generic @@var{.align} directive.  For the ARM however if the
first argument is zero (ie no alignment is needed) the assembler will
behave as if the argument had been 2 (ie pad to the next four byte
boundary).  This is for compatability with ARM's own assembler.

d156 1
a156 1
@@item .code @@var{[16|32]}
@


1.4
log
@	* doc/c-arm.texi: Fix arguments of @@var to not contain
	punctuation.
@
text
@d69 1
a69 1
registers ratehr than integer registers.
d105 13
a117 2
The presence of a @@samp{#} and @@samp{@@@@} on a line indicates the start of
a comment that extends to the end of the current line.
@


1.3
log
@Document .thumb_set directive.
@
text
@d32 1
a32 1
@@item -marm @@var{[2|250|3|6|60|600|610|620|7|7m|7d|7dm|7di|7dmi|70|700|700i|710|710c|7100|7500|7500fe|7tdmi|8|810|9|9tdmi|920||strongarm|strongarm110|strongarm1100]}
d37 1
a37 1
@@item -marmv @@var{[2|2a|3|3m|4|4t|5|5t]}
d48 1
a48 1
@@item -mfpa @@var{[10|11]}
d62 1
a62 1
@@item -mapcs @@var{[26|32]}
d145 1
a145 1
@@item .code @@var{[16|32]}
@


1.2
log
@Add support for armv5 architecture
Add ADRL pseudo op.
@
text
@d170 8
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
@@item -marm @@var{[2|250|3|6|60|600|610|620|7|7m|7d|7dm|7di|7dmi|70|700|700i|710|710c|7100|7500|7500fe|7tdmi|8|810|9|9tdmistrongarm|strongarm110|strongarm1100]}
d37 1
a37 1
@@item -marmv @@var{[2|2a|3|3m|4|4t]}
d187 3
a189 1
@@code{@@value{AS}} implements all the standard ARM opcodes.
d191 7
a197 1
*TODO* Document the pseudo-ops (adr, nop)
d199 2
a200 2
GAS for the ARM supports a synthetic register load instruction whoes
syntax is: 
d202 2
d213 31
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

