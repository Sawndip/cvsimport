head	1.9;
access;
symbols
	binutils-2_24-branch:1.9.0.2
	binutils-2_24-branchpoint:1.9
	binutils-2_21_1:1.6
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.2
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.7.0.4
	binutils-2_22:1.7
	binutils-2_22-branch:1.7.0.2
	binutils-2_22-branchpoint:1.7
	binutils-2_21:1.6
	binutils-2_21-branch:1.6.0.4
	binutils-2_21-branchpoint:1.6
	binutils-2_20_1:1.6
	binutils-2_20:1.6
	binutils-arc-20081103-branch:1.5.0.10
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.6.0.2
	binutils-2_20-branchpoint:1.6
	dje-cgen-play1-branch:1.5.0.8
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.5.0.6
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.4
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.5
	binutils-2_18-branch:1.5.0.2
	binutils-2_18-branchpoint:1.5
	binutils-csl-coldfire-4_1-32:1.4
	binutils-csl-sourcerygxx-4_1-32:1.4
	binutils-csl-innovasic-fido-3_4_4-33:1.4
	binutils-csl-sourcerygxx-3_4_4-32:1.4
	binutils-csl-coldfire-4_1-30:1.4
	binutils-csl-sourcerygxx-4_1-30:1.4
	binutils-csl-coldfire-4_1-28:1.4
	binutils-csl-sourcerygxx-4_1-29:1.4
	binutils-csl-sourcerygxx-4_1-28:1.4
	binutils-csl-arm-2006q3-27:1.4
	binutils-csl-sourcerygxx-4_1-27:1.4
	binutils-csl-arm-2006q3-26:1.4
	binutils-csl-sourcerygxx-4_1-26:1.4
	binutils-csl-sourcerygxx-4_1-25:1.4
	binutils-csl-sourcerygxx-4_1-24:1.4
	binutils-csl-sourcerygxx-4_1-23:1.4
	binutils-csl-sourcerygxx-4_1-21:1.4
	binutils-csl-arm-2006q3-21:1.4
	binutils-csl-sourcerygxx-4_1-22:1.4
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.4
	binutils-csl-sourcerygxx-4_1-20:1.4
	binutils-csl-arm-2006q3-19:1.4
	binutils-csl-sourcerygxx-4_1-19:1.4
	binutils-csl-sourcerygxx-4_1-18:1.4
	binutils-csl-renesas-4_1-9:1.4
	binutils-csl-sourcerygxx-3_4_4-25:1.4
	binutils-csl-renesas-4_1-8:1.4
	binutils-csl-renesas-4_1-7:1.4
	binutils-csl-renesas-4_1-6:1.4
	binutils-csl-sourcerygxx-4_1-17:1.4
	binutils-csl-sourcerygxx-4_1-14:1.4
	binutils-csl-sourcerygxx-4_1-15:1.4
	binutils-csl-sourcerygxx-4_1-13:1.4
	binutils-2_17:1.4
	binutils-csl-sourcerygxx-4_1-12:1.4
	binutils-csl-sourcerygxx-3_4_4-21:1.4
	binutils-csl-wrs-linux-3_4_4-24:1.4
	binutils-csl-wrs-linux-3_4_4-23:1.4
	binutils-csl-sourcerygxx-4_1-9:1.4
	binutils-csl-sourcerygxx-4_1-8:1.4
	binutils-csl-sourcerygxx-4_1-7:1.4
	binutils-csl-arm-2006q1-6:1.4
	binutils-csl-sourcerygxx-4_1-6:1.4
	binutils-csl-wrs-linux-3_4_4-22:1.4
	binutils-csl-coldfire-4_1-11:1.4
	binutils-csl-sourcerygxx-3_4_4-19:1.4
	binutils-csl-coldfire-4_1-10:1.4
	binutils-csl-sourcerygxx-4_1-5:1.4
	binutils-csl-sourcerygxx-4_1-4:1.4
	binutils-csl-wrs-linux-3_4_4-21:1.4
	binutils-csl-morpho-4_1-4:1.4
	binutils-csl-sourcerygxx-3_4_4-17:1.4
	binutils-csl-wrs-linux-3_4_4-20:1.4
	binutils-2_17-branch:1.4.0.10
	binutils-2_17-branchpoint:1.4
	binutils-csl-2_17-branch:1.4.0.8
	binutils-csl-2_17-branchpoint:1.4
	binutils-csl-gxxpro-3_4-branch:1.4.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.4
	binutils-2_16_1:1.4
	binutils-csl-arm-2005q1b:1.4
	binutils-2_16:1.4
	binutils-csl-arm-2005q1a:1.4
	binutils-csl-arm-2005q1-branch:1.4.0.4
	binutils-csl-arm-2005q1-branchpoint:1.4
	binutils-2_16-branch:1.4.0.2
	binutils-2_16-branchpoint:1.4
	csl-arm-2004-q3d:1.3
	csl-arm-2004-q3:1.3
	binutils-2_15:1.3
	binutils-2_15-branchpoint:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	binutils-2_15-branch:1.3.0.8
	cagney_bfdfile-20040213-branch:1.3.0.6
	cagney_bfdfile-20040213-branchpoint:1.3
	cagney_bigcore-20040122-branch:1.3.0.4
	cagney_bigcore-20040122-branchpoint:1.3
	csl-arm-2003-q4:1.3
	binutils-2_14:1.3
	binutils-2_14-branch:1.3.0.2
	binutils-2_14-branchpoint:1.3
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.4
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.2
	binutils-2_12-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	binutils-2_11_2:1.1.2.1
	binutils-2_11_1:1.1.2.1
	binutils-2_11:1.1
	x86_64versiong3:1.1
	binutils-2_11-branch:1.1.0.2
	binutils_latest_snapshot:1.9;
locks; strict;
comment	@# @;


1.9
date	2013.01.10.19.51.55;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.15.12.55.39;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.18.13.37.39;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.02.07.24.21;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.06.10.34.02;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.03.01.29.54;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.09.21.48.39;	author ciceron;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.08.23.24.26;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.19.01.22.40;	author nickc;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.06.07.03.15.36;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove trailing white spaces on gas

	* app.c: Remove trailing white spaces.
	* as.c: Likewise.
	* as.h: Likewise.
	* cond.c: Likewise.
	* dw2gencfi.c: Likewise.
	* dwarf2dbg.h: Likewise.
	* ecoff.c: Likewise.
	* input-file.c: Likewise.
	* itbl-lex.h: Likewise.
	* output-file.c: Likewise.
	* read.c: Likewise.
	* sb.c: Likewise.
	* subsegs.c: Likewise.
	* symbols.c: Likewise.
	* write.c: Likewise.
	* config/tc-i386.c: Likewise.
	* doc/Makefile.am: Likewise.
	* doc/Makefile.in: Likewise.
	* doc/c-aarch64.texi: Likewise.
	* doc/c-alpha.texi: Likewise.
	* doc/c-arc.texi: Likewise.
	* doc/c-arm.texi: Likewise.
	* doc/c-avr.texi: Likewise.
	* doc/c-bfin.texi: Likewise.
	* doc/c-cr16.texi: Likewise.
	* doc/c-d10v.texi: Likewise.
	* doc/c-d30v.texi: Likewise.
	* doc/c-h8300.texi: Likewise.
	* doc/c-hppa.texi: Likewise.
	* doc/c-i370.texi: Likewise.
	* doc/c-i386.texi: Likewise.
	* doc/c-i860.texi: Likewise.
	* doc/c-m32c.texi: Likewise.
	* doc/c-m32r.texi: Likewise.
	* doc/c-m68hc11.texi: Likewise.
	* doc/c-m68k.texi: Likewise.
	* doc/c-microblaze.texi: Likewise.
	* doc/c-mips.texi: Likewise.
	* doc/c-msp430.texi: Likewise.
	* doc/c-mt.texi: Likewise.
	* doc/c-s390.texi: Likewise.
	* doc/c-score.texi: Likewise.
	* doc/c-sh.texi: Likewise.
	* doc/c-sh64.texi: Likewise.
	* doc/c-tic54x.texi: Likewise.
	* doc/c-tic6x.texi: Likewise.
	* doc/c-v850.texi: Likewise.
	* doc/c-xc16x.texi: Likewise.
	* doc/c-xgate.texi: Likewise.
	* doc/c-xtensa.texi: Likewise.
	* doc/c-z80.texi: Likewise.
	* doc/internals.texi: Likewise.
@
text
@@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003,
@@c 2006, 2011, 2012
@@c Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@ifset GENERIC
@@page
@@node M68HC11-Dependent
@@chapter M68HC11 and M68HC12 Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter M68HC11 and M68HC12 Dependent Features
@@end ifclear

@@cindex M68HC11 and M68HC12 support
@@menu
* M68HC11-Opts::                   M68HC11 and M68HC12 Options
* M68HC11-Syntax::                 Syntax
* M68HC11-Modifiers::              Symbolic Operand Modifiers
* M68HC11-Directives::             Assembler Directives
* M68HC11-Float::                  Floating Point
* M68HC11-opcodes::                Opcodes
@@end menu

@@node M68HC11-Opts
@@section M68HC11 and M68HC12 Options

@@cindex options, M68HC11
@@cindex M68HC11 options
The Motorola 68HC11 and 68HC12 version of @@code{@@value{AS}} have a few machine
dependent options.

@@table @@code

@@cindex @@samp{-m68hc11}
@@item -m68hc11
This option switches the assembler into the M68HC11 mode. In this mode,
the assembler only accepts 68HC11 operands and mnemonics. It produces
code for the 68HC11.

@@cindex @@samp{-m68hc12}
@@item -m68hc12
This option switches the assembler into the M68HC12 mode. In this mode,
the assembler also accepts 68HC12 operands and mnemonics. It produces
code for the 68HC12. A few 68HC11 instructions are replaced by
some 68HC12 instructions as recommended by Motorola specifications.

@@cindex @@samp{-m68hcs12}
@@item -m68hcs12
This option switches the assembler into the M68HCS12 mode.  This mode is
similar to @@samp{-m68hc12} but specifies to assemble for the 68HCS12
series.  The only difference is on the assembling of the @@samp{movb}
and @@samp{movw} instruction when a PC-relative operand is used.

@@cindex @@samp{-mm9s12x}
@@item -mm9s12x
This option switches the assembler into the M9S12X mode.  This mode is
similar to @@samp{-m68hc12} but specifies to assemble for the S12X
series which is a superset of the HCS12.

@@cindex @@samp{-mm9s12xg}
@@item -mm9s12xg
This option switches the assembler into the XGATE mode for the RISC
co-processor featured on some S12X-family chips.

@@cindex @@samp{--xgate-ramoffset}
@@item --xgate-ramoffset
This option instructs the linker to offset RAM addresses from S12X address
space into XGATE address space.

@@cindex @@samp{-mshort}
@@item -mshort
This option controls the ABI and indicates to use a 16-bit integer ABI.
It has no effect on the assembled instructions.
This is the default.

@@cindex @@samp{-mlong}
@@item -mlong
This option controls the ABI and indicates to use a 32-bit integer ABI.

@@cindex @@samp{-mshort-double}
@@item -mshort-double
This option controls the ABI and indicates to use a 32-bit float ABI.
This is the default.

@@cindex @@samp{-mlong-double}
@@item -mlong-double
This option controls the ABI and indicates to use a 64-bit float ABI.

@@cindex @@samp{--strict-direct-mode}
@@item --strict-direct-mode
You can use the @@samp{--strict-direct-mode} option to disable
the automatic translation of direct page mode addressing into
extended mode when the instruction does not support direct mode.
For example, the @@samp{clr} instruction does not support direct page
mode addressing. When it is used with the direct page mode,
@@code{@@value{AS}} will ignore it and generate an absolute addressing.
This option prevents @@code{@@value{AS}} from doing this, and the wrong
usage of the direct page mode will raise an error.

@@cindex @@samp{--short-branches}
@@item --short-branches
The @@samp{--short-branches} option turns off the translation of
relative branches into absolute branches when the branch offset is
out of range. By default @@code{@@value{AS}} transforms the relative
branch (@@samp{bsr}, @@samp{bgt}, @@samp{bge}, @@samp{beq}, @@samp{bne},
@@samp{ble}, @@samp{blt}, @@samp{bhi}, @@samp{bcc}, @@samp{bls},
@@samp{bcs}, @@samp{bmi}, @@samp{bvs}, @@samp{bvs}, @@samp{bra}) into
an absolute branch when the offset is out of the -128 .. 127 range.
In that case, the @@samp{bsr} instruction is translated into a
@@samp{jsr}, the @@samp{bra} instruction is translated into a
@@samp{jmp} and the conditional branches instructions are inverted and
followed by a @@samp{jmp}. This option disables these translations
and @@code{@@value{AS}} will generate an error if a relative branch
is out of range. This option does not affect the optimization
associated to the @@samp{jbra}, @@samp{jbsr} and @@samp{jbXX} pseudo opcodes.

@@cindex @@samp{--force-long-branches}
@@item --force-long-branches
The @@samp{--force-long-branches} option forces the translation of
relative branches into absolute branches. This option does not affect
the optimization associated to the @@samp{jbra}, @@samp{jbsr} and
@@samp{jbXX} pseudo opcodes.

@@cindex @@samp{--print-insn-syntax}
@@item --print-insn-syntax
You can use the @@samp{--print-insn-syntax} option to obtain the
syntax description of the instruction when an error is detected.

@@cindex @@samp{--print-opcodes}
@@item --print-opcodes
The @@samp{--print-opcodes} option prints the list of all the
instructions with their syntax. The first item of each line
represents the instruction name and the rest of the line indicates
the possible operands for that instruction. The list is printed
in alphabetical order. Once the list is printed @@code{@@value{AS}}
exits.

@@cindex @@samp{--generate-example}
@@item --generate-example
The @@samp{--generate-example} option is similar to @@samp{--print-opcodes}
but it generates an example for each instruction instead.
@@end table

@@node M68HC11-Syntax
@@section Syntax

@@cindex M68HC11 syntax
@@cindex syntax, M68HC11

In the M68HC11 syntax, the instruction name comes first and it may
be followed by one or several operands (up to three). Operands are
separated by comma (@@samp{,}). In the normal mode,
@@code{@@value{AS}} will complain if too many operands are specified for
a given instruction. In the MRI mode (turned on with @@samp{-M} option),
it will treat them as comments. Example:

@@smallexample
inx
lda  #23
bset 2,x #4
brclr *bot #8 foo
@@end smallexample

@@cindex line comment character, M68HC11
@@cindex M68HC11 line comment character
The presence of a @@samp{;} character or a @@samp{!} character anywhere
on a line indicates the start of a comment that extends to the end of
that line.

A @@samp{*} or a @@samp{#} character at the start of a line also
introduces a line comment, but these characters do not work elsewhere
on the line.  If the first character of the line is a @@samp{#} then as
well as starting a comment, the line could also be logical line number
directive (@@pxref{Comments}) or a preprocessor control command
(@@pxref{Preprocessing}).

@@cindex line separator, M68HC11
@@cindex statement separator, M68HC11
@@cindex M68HC11 line separator
The M68HC11 assembler does not currently support a line separator
character.

@@cindex M68HC11 addressing modes
@@cindex addressing modes, M68HC11
The following addressing modes are understood for 68HC11 and 68HC12:
@@table @@dfn
@@item Immediate
@@samp{#@@var{number}}

@@item Address Register
@@samp{@@var{number},X}, @@samp{@@var{number},Y}

The @@var{number} may be omitted in which case 0 is assumed.

@@item Direct Addressing mode
@@samp{*@@var{symbol}}, or @@samp{*@@var{digits}}

@@item Absolute
@@samp{@@var{symbol}}, or @@samp{@@var{digits}}
@@end table

The M68HC12 has other more complex addressing modes. All of them
are supported and they are represented below:

@@table @@dfn
@@item Constant Offset Indexed Addressing Mode
@@samp{@@var{number},@@var{reg}}

The @@var{number} may be omitted in which case 0 is assumed.
The register can be either @@samp{X}, @@samp{Y}, @@samp{SP} or
@@samp{PC}.  The assembler will use the smaller post-byte definition
according to the constant value (5-bit constant offset, 9-bit constant
offset or 16-bit constant offset).  If the constant is not known by
the assembler it will use the 16-bit constant offset post-byte and the value
will be resolved at link time.

@@item Offset Indexed Indirect
@@samp{[@@var{number},@@var{reg}]}

The register can be either @@samp{X}, @@samp{Y}, @@samp{SP} or @@samp{PC}.

@@item Auto Pre-Increment/Pre-Decrement/Post-Increment/Post-Decrement
@@samp{@@var{number},-@@var{reg}}
@@samp{@@var{number},+@@var{reg}}
@@samp{@@var{number},@@var{reg}-}
@@samp{@@var{number},@@var{reg}+}

The number must be in the range @@samp{-8}..@@samp{+8} and must not be 0.
The register can be either @@samp{X}, @@samp{Y}, @@samp{SP} or @@samp{PC}.

@@item Accumulator Offset
@@samp{@@var{acc},@@var{reg}}

The accumulator register can be either @@samp{A}, @@samp{B} or @@samp{D}.
The register can be either @@samp{X}, @@samp{Y}, @@samp{SP} or @@samp{PC}.

@@item Accumulator D offset indexed-indirect
@@samp{[D,@@var{reg}]}

The register can be either @@samp{X}, @@samp{Y}, @@samp{SP} or @@samp{PC}.

@@end table

For example:

@@smallexample
ldab 1024,sp
ldd [10,x]
orab 3,+x
stab -2,y-
ldx a,pc
sty [d,sp]
@@end smallexample


@@node M68HC11-Modifiers
@@section Symbolic Operand Modifiers

@@cindex M68HC11 modifiers
@@cindex syntax, M68HC11

The assembler supports several modifiers when using symbol addresses
in 68HC11 and 68HC12 instruction operands.  The general syntax is
the following:

@@smallexample
%modifier(symbol)
@@end smallexample

@@table @@code
@@cindex symbol modifiers
@@item %addr
This modifier indicates to the assembler and linker to use
the 16-bit physical address corresponding to the symbol.  This is intended
to be used on memory window systems to map a symbol in the memory bank window.
If the symbol is in a memory expansion part, the physical address
corresponds to the symbol address within the memory bank window.
If the symbol is not in a memory expansion part, this is the symbol address
(using or not using the %addr modifier has no effect in that case).

@@item %page
This modifier indicates to use the memory page number corresponding
to the symbol.  If the symbol is in a memory expansion part, its page
number is computed by the linker as a number used to map the page containing
the symbol in the memory bank window.  If the symbol is not in a memory
expansion part, the page number is 0.

@@item %hi
This modifier indicates to use the 8-bit high part of the physical
address of the symbol.

@@item %lo
This modifier indicates to use the 8-bit low part of the physical
address of the symbol.

@@end table

For example a 68HC12 call to a function @@samp{foo_example} stored in memory
expansion part could be written as follows:

@@smallexample
call %addr(foo_example),%page(foo_example)
@@end smallexample

and this is equivalent to

@@smallexample
call foo_example
@@end smallexample

And for 68HC11 it could be written as follows:

@@smallexample
ldab #%page(foo_example)
stab _page_switch
jsr  %addr(foo_example)
@@end smallexample

@@node M68HC11-Directives
@@section Assembler Directives

@@cindex assembler directives, M68HC11
@@cindex assembler directives, M68HC12
@@cindex M68HC11 assembler directives
@@cindex M68HC12 assembler directives

The 68HC11 and 68HC12 version of @@code{@@value{AS}} have the following
specific assembler directives:

@@table @@code
@@item .relax
@@cindex assembler directive .relax, M68HC11
@@cindex M68HC11 assembler directive .relax
The relax directive is used by the @@samp{GNU Compiler} to emit a specific
relocation to mark a group of instructions for linker relaxation.
The sequence of instructions within the group must be known to the linker
so that relaxation can be performed.

@@item .mode [mshort|mlong|mshort-double|mlong-double]
@@cindex assembler directive .mode, M68HC11
@@cindex M68HC11 assembler directive .mode
This directive specifies the ABI.  It overrides the @@samp{-mshort},
@@samp{-mlong}, @@samp{-mshort-double} and @@samp{-mlong-double} options.

@@item .far @@var{symbol}
@@cindex assembler directive .far, M68HC11
@@cindex M68HC11 assembler directive .far
This directive marks the symbol as a @@samp{far} symbol meaning that it
uses a @@samp{call/rtc} calling convention as opposed to @@samp{jsr/rts}.
During a final link, the linker will identify references to the @@samp{far}
symbol and will verify the proper calling convention.

@@item .interrupt @@var{symbol}
@@cindex assembler directive .interrupt, M68HC11
@@cindex M68HC11 assembler directive .interrupt
This directive marks the symbol as an interrupt entry point.
This information is then used by the debugger to correctly unwind the
frame across interrupts.

@@item .xrefb @@var{symbol}
@@cindex assembler directive .xrefb, M68HC11
@@cindex M68HC11 assembler directive .xrefb
This directive is defined for compatibility with the
@@samp{Specification for Motorola 8 and 16-Bit Assembly Language Input
Standard} and is ignored.

@@end table

@@node M68HC11-Float
@@section Floating Point

@@cindex floating point, M68HC11
@@cindex M68HC11 floating point
Packed decimal (P) format floating literals are not supported.
Feel free to add the code!

The floating point formats generated by directives are these.

@@table @@code
@@cindex @@code{float} directive, M68HC11
@@item .float
@@code{Single} precision floating point constants.

@@cindex @@code{double} directive, M68HC11
@@item .double
@@code{Double} precision floating point constants.

@@cindex @@code{extend} directive M68HC11
@@cindex @@code{ldouble} directive M68HC11
@@item .extend
@@itemx .ldouble
@@code{Extended} precision (@@code{long double}) floating point constants.
@@end table

@@need 2000
@@node M68HC11-opcodes
@@section Opcodes

@@cindex M68HC11 opcodes
@@cindex opcodes, M68HC11
@@cindex instruction set, M68HC11

@@menu
* M68HC11-Branch::                 Branch Improvement
@@end menu

@@node M68HC11-Branch
@@subsection Branch Improvement

@@cindex pseudo-opcodes, M68HC11
@@cindex M68HC11 pseudo-opcodes
@@cindex branch improvement, M68HC11
@@cindex M68HC11 branch improvement

Certain pseudo opcodes are permitted for branch instructions.
They expand to the shortest branch instruction that reach the
target. Generally these mnemonics are made by prepending @@samp{j} to
the start of Motorola mnemonic. These pseudo opcodes are not affected
by the @@samp{--short-branches} or @@samp{--force-long-branches} options.

The following table summarizes the pseudo-operations.

@@smallexample
                        Displacement Width
     +-------------------------------------------------------------+
     |                     Options                                 |
     |    --short-branches           --force-long-branches         |
     +--------------------------+----------------------------------+
  Op |BYTE             WORD     | BYTE          WORD               |
     +--------------------------+----------------------------------+
 bsr | bsr <pc-rel>    <error>  |               jsr <abs>          |
 bra | bra <pc-rel>    <error>  |               jmp <abs>          |
jbsr | bsr <pc-rel>   jsr <abs> | bsr <pc-rel>  jsr <abs>          |
jbra | bra <pc-rel>   jmp <abs> | bra <pc-rel>  jmp <abs>          |
 bXX | bXX <pc-rel>    <error>  |               bNX +3; jmp <abs>  |
jbXX | bXX <pc-rel>   bNX +3;   | bXX <pc-rel>  bNX +3; jmp <abs>  |
     |                jmp <abs> |                                  |
     +--------------------------+----------------------------------+
XX: condition
NX: negative of condition XX

@@end smallexample

@@table @@code
@@item jbsr
@@itemx jbra
These are the simplest jump pseudo-operations; they always map to one
particular machine instruction, depending on the displacement to the
branch target.

@@item jb@@var{XX}
Here, @@samp{jb@@var{XX}} stands for an entire family of pseudo-operations,
where @@var{XX} is a conditional branch or condition-code test.  The full
list of pseudo-ops in this family is:
@@smallexample
 jbcc   jbeq   jbge   jbgt   jbhi   jbvs   jbpl  jblo
 jbcs   jbne   jblt   jble   jbls   jbvc   jbmi
@@end smallexample

For the cases of non-PC relative displacements and long displacements,
@@code{@@value{AS}} issues a longer code fragment in terms of
@@var{NX}, the opposite condition to @@var{XX}.  For example, for the
non-PC relative case:
@@smallexample
    jb@@var{XX} foo
@@end smallexample
gives
@@smallexample
     b@@var{NX}s oof
     jmp foo
 oof:
@@end smallexample

@@end table


@


1.8
log
@	* config/tc-m68hc11.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Tweak target flags to match other tools. (i.e. -m m68hc11).
	* doc/as.texinfo: Mention new options.
	* doc/c-m68hc11.texi: Document new options.
	* NEWS: Mention new support.

	* archures.c: Add bfd_arch_m9s12x and bfd_arch_m9s12xg.
	* config.bfd: Likewise.
	* cpu-m9s12x.c: New.
	* cpu-m9s12xg.c: New.
	* elf32-m68hc12.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Fix carry bug in IMM16 (IMM8 low/high) relocate.
	* Makefile.am (ALL_MACHINES): Add cpu-m9s12x and cpu-m9s12xg.
	(ALL_MACHINES_CFILES): Likewise.
	* reloc.c: Add S12X relocs.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* gas/m68hc11/insns9s12x.s: New
	* gas/m68hc11/insns9s12x.d: New
	* gas/m68hc11/hexprefix.s: New
	* gas/m68hc11/hexprefix.d: New
	* gas/m68hc11/9s12x-exg-sex-tfr.s: New
	* gas/m68hc11/9s12x-exg-sex-tfr.d: New
	* gas/m68hc11/insns9s12xg.s: New
	* gas/m68hc11/insns9s12xg.d: New
	* gas/m68hc11/9s12x-mov.s: New
	* gas/m68hc11/9s12x-mov.d: New
	* gas/m68hc11/m68hc11.exp: Updated
	* gas/m68hc11/*.d: Brought in line with changed objdump output.
	* gas/all/gas.exp: XFAIL all hc11/12 targets for redef2,3.
	* gas/elf/elf.exp: XFAIL all hc11/12 targets for redef.
	* gas/elf/dwarf2-1.d: Skip for hc11/12 targets.
	* gas/elf/dwarf2-2.d: Likewise.

	* ld-m68hc11/xgate-link.s: New.
	* ld-m68hc11/xgate-link.d: New.
	* ld-m68hc11/xgate-offset.s: New.
	* ld-m68hc11/xgate-offset.d: New.
	* ld-m68hc11/xgate1.s: New.
	* ld-m68hc11/xgate1.d: New.
	* ld-m68hc11/xgate2.s: New.
	* ld-m68hc11/m68hc11.exp: Updated.
	* ld-m68hc11/*.d: Brought in line with changed objdump output.
	* ld-gc/gc.exp: Update CFLAGS for m68hc11.
	* ld-plugin/plugin.exp: Likewise.
	* ld-srec/srec.exp: XFAIL for m68hc11 and m68hc12.

	* configure.in: Add S12X and XGATE co-processor support to m68hc11
	target.
	* disassemble.c: Likewise.
	* configure: Regenerate.
	* m68hc11-dis.c: Make objdump output more consistent, use hex
	instead of decimal and use 0x prefix for hex.
	* m68hc11-opc.c: Add S12X and XGATE opcodes.
	* dis-asm.h (print_insn_m9s12x): Prototype.
	(print_insn_m9s12xg): Prototype.

	* m68hc11.h (R_M68HC12_16B, R_M68HC12_PCREL_9, R_M68HC12_PCREL_10)
	R_M68HC12_HI8XG, R_M68HC12_LO8XG): New relocations.
	(E_M68HC11_XGATE_RAMOFFSET): Define.

	* m68hc11.h: Add XGate definitions.
	(struct m68hc11_opcode): Add xg_mask field.
@
text
@d124 1
a124 1
@@samp{jbXX} pseudo opcodes. 
d437 1
a437 1
 bXX | bXX <pc-rel>    <error>  |               bNX +3; jmp <abs>  | 
@


1.7
log
@	PR gas/12390
	* doc/all.texi: Add NS32K
	* doc/as.texinfo: Remove target specific details of which
	characters act as comment initiators and statement separators into
	individual target specific files.
	* doc/c-alpha.texi (Alpha-Chars): Document special behaviour of
	the hash character at the start of a line.
	* doc/c-arm.texi (ARM-Chars): Likewise.
	* doc/c-avr.texi (AVR-Chars): Likewise.
	* doc/c-d10v.texi (D10V-Chars): Likewise.
	* doc/c-d30v.texi (D30V-Chars):	Likewise.
	* doc/c-mmix.texi (MMIX-Chars): Likewise.
	* doc/c-s390.texi (s390 characters): Likewise.
	* doc/c-sh.texi (SH-Chars): Likewise.
	* doc/c-sh64.texi (SH64-Chars): Likewise.
	* doc/c-sparc.texi (SPARC-Chars): Likewise.
	* doc/c-tic6x.texi (TIC6X Syntax): Likewise.
	* doc/c-xtensa.texi (Xtensa Syntax): Likewise.
	* doc/c-z80.texi (Z80-Chars): Likewise.
	* doc/c-z8k.texi (Z8000-Chars): Likewise.
	* doc/c-pdp11.texi (PDP11-Syntax): Document line separator character.
	* doc/c-arc.texi (ARC-Chars): Fill in this subsection.
	* doc/c-bfin.texi (Blackfin Syntax): Document line comment and
	line separator characters.
	* doc/c-cr16.texi (CR16 Syntax): Likewise.
	* doc/c-i386.texi (i386-Chars): Likewise.
	* doc/c-i860.texi (i860-Chars):	Likewise.
	* doc/c-i960.texi (i960-Chars):	Likewise.
	* doc/c-ip2k.texi (IP2K-Chars):	Likewise.
	* doc/c-lm32.texi (LM32-Chars):	likewise.
	* doc/c-m32c.texi (M32C-Chars): Likewise.
	* doc/c-m68hc11.texi (M68HC11-syntax): Likewise.
	* doc/c-m68k.texi (M68K-Chars): Likewise.
	* doc/c-microblaze.texi (MicroBlaze-Chars): Likewise.
	* doc/c-msp430.texi (MSP430-Chars): Likewise.
	* doc/c-mt.texi (MT-Chars): Likewise.
	* doc/c-ns32k.texi (NS32K-Chars): Likewise.
	* doc/c-pj.texi (PJ-Chars): Likewise.
	* doc/c-ppc.texi (PowerPC-Chars): Likewise.
	* doc/c-rx.texi (RX-Chars): Likewise.
	* doc/c-score.texi (SCORE-Chars): Likewise.
	* doc/c-tic54x.texi (TIC54X-Chars): Likewise.
	* doc/c-v850.texi (V850-Chars): Likewise.
	* doc/c-vax.texi (VAX-Chars): Likewise.
	* doc/c-xc16x.texi (xc16x-Chars): Likewise.
@
text
@d2 1
a2 1
@@c 2006, 2011
d38 1
a38 1
This option switches the assembler in the M68HC11 mode. In this mode,
d44 1
a44 1
This option switches the assembler in the M68HC12 mode. In this mode,
d51 1
a51 1
This option switches the assembler in the M68HCS12 mode.  This mode is
d56 16
@


1.6
log
@update copyright dates
@
text
@d1 2
a2 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003, 2006
d150 19
@


1.5
log
@PR binutils/2877
* doc/as.texi: Fix spelling typo: branchs => branches.
* doc/c-m68hc11.texi: Likewise.
* config/tc-m68hc11.c: Likewise.
  Support old spelling of command line switch for backwards compatibility.
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003
@


1.4
log
@update copyright dates
@
text
@d85 3
a87 3
@@cindex @@samp{--short-branchs}
@@item --short-branchs
The @@samp{--short-branchs} option turns off the translation of
d96 1
a96 1
@@samp{jmp} and the conditional branchs instructions are inverted and
d102 3
a104 3
@@cindex @@samp{--force-long-branchs}
@@item --force-long-branchs
The @@samp{--force-long-branchs} option forces the translation of
d385 1
a385 1
by the @@samp{--short-branchs} or @@samp{--force-long-branchs} options.
d393 1
a393 1
     |    --short-branchs            --force-long-branchs          |
@


1.3
log
@	* doc/c-m68hc11.texi (M68HC11-Opts): Document -m68hcs12, -mshort,
	-mlong, -mshort-double and -mlong-double options; use table @@code.
	(M68HC11-Syntax): Update to document 68HC12 operands.
	(M68HC11-Modifiers): New section for operand modifiers.
	(M68HC11-Directives): New section for specific assembler directives.
	(M68HC11-Branch): Fix Overfull hbox error.
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000
@


1.2
log
@Fix copyright notices
@
text
@d19 2
d30 1
a30 1
The Motorola 68HC11 and 68HC12 version of @@code{@@value{AS}} has a few machine
d33 2
d36 1
d42 1
d45 1
a45 1
code for the 68HC12. A fiew 68HC11 instructions are replaced by
d48 26
d75 1
d86 1
d103 1
d110 1
d115 1
d124 1
d127 1
d151 1
a151 1
The following addressing modes are understood:
d168 167
d390 15
a404 15
                              Displacement Width
          +-------------------------------------------------------------+
          |                     Options                                 |
          |    --short-branchs            --force-long-branchs          |
          +--------------------------+----------------------------------+
Pseudo-Op |BYTE             WORD     | BYTE          WORD               |
          +--------------------------+----------------------------------+
      bsr | bsr <pc-rel>    <error>  |               jsr <abs>          |
      bra | bra <pc-rel>    <error>  |               jmp <abs>          |
     jbsr | bsr <pc-rel>   jsr <abs> | bsr <pc-rel>  jsr <abs>          |
     jbra | bra <pc-rel>   jmp <abs> | bra <pc-rel>  jmp <abs>          |
      bXX | bXX <pc-rel>    <error>  |               bNX +3; jmp <abs>  | 
     jbXX | bXX <pc-rel>   bNX +3;   | bXX <pc-rel>  bNX +3; jmp <abs>  |
          |                jmp <abs> |                                  |
          +--------------------------+----------------------------------+
@


1.1
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d1 2
a2 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
@


1.1.2.1
log
@Update copyright notices.
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000
@@c Free Software Foundation, Inc.
@


