head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.4
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.2
	binutils-2_23-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.01.03.10.54.01;	author iains;	state Exp;
branches;
next	;


desc
@@


1.1
log
@add dysymtab write support to bfd/mach-o.

bfd:

	* mach-o.c (bfd_mach_o_write_symtab): Fill in the string table index
	as the value of an indirect symbol.  Keep the string table index in
	non-indirect syms for reference.
	(bfd_mach_o_write_dysymtab): New.
	(bfd_mach_o_primary_symbol_sort_key): New.
	(bfd_mach_o_cf_symbols): New.
	(bfd_mach_o_sort_symbol_table): New.
	(bfd_mach_o_mangle_symbols): Return early if no symbols.  Sort symbols.
	If we are emitting a dysymtab, process indirect symbols and count the
	number of each other kind.
	(bfd_mach_o_mangle_sections): New.
	(bfd_mach_o_write_contents): Split out some pre-requisite code into
	the command builder. Write dysymtab if the command is present.
	(bfd_mach_o_count_sections_for_seg): New.
	(bfd_mach_o_build_seg_command): New.
	(bfd_mach_o_build_dysymtab_command): New.
	(bfd_mach_o_build_commands): Reorganize to support the fact that some
	commands are optional and should not be emitted if there are no
	sections or symbols.
	(bfd_mach_o_set_section_contents): Amend comment.
	* mach-o.h: Amend and add to comments.
	(mach_o_data_struct): Add fields for dysymtab symbols counts and a
	pointer to the indirects, when present.
	(bfd_mach_o_should_emit_dysymtab): New macro.
	(IS_MACHO_INDIRECT): Likewise.

gas/testsuite:

	* gas/mach-o/dysymtab-1-64.d: New.
	* gas/mach-o/dysymtab-1.d: New.
	* gas/mach-o/symbols-1-64.d: New.
	* gas/mach-o/symbols-1.d: New.
	* gas/mach-o/symbols-base-64.s: New.
	* gas/mach-o/symbols-base.s: New.
@
text
@# baseline symbols in sections.
Lzt0:	.space 1
	.globl ztg0
ztg0:	.space 1
Lmt0:	.space 1
	.globl mtg0
mtg0:	.space 1
Lat0:	.space 1
	.globl atg0
atg0:	.space 1

	.quad	_zut0
	.quad	_mut0
	.quad	_aut0

	.comm zcommon0, 10, 3
	.comm mcommon0, 10, 3
	.comm acommon0, 10, 3

	.data
Lzd0:	.space 1
	.globl zdg0
zdg0:	.space 1
Lmd0:	.space 1
	.globl mdg0
mdg0:	.space 1
adg0:	.space 1
	.globl adg0
Lad0:	.space 1

	.quad	_zud0
	.quad	_mud0
	.quad	_aud0

	.lcomm zlcomm0, 5, 1
	.lcomm mlcomm0, 5, 1
	.lcomm alcomm0, 5, 1

	.section __HERE,__there
Lzs0:	.space 1
	.globl zsg0
zsg0:	.space 1
Lms0:	.space 1
	.globl msg0
msg0:	.space 1
Las0:	.space 1
asg0:	.space 1
	.globl asg0

	.quad	_zus0
	.quad	_mus0
	.quad	_aus0

	.text
Lzt1:	.space 1
	.globl ztg1
ztg1:	.space 1
	.globl mtg1
mtg1:	.space 1
Lmt1:	.space 1
atg1:	.space 1
	.globl atg1
Lat1:	.space 1

	.comm zcommon1, 10, 3
	.comm mcommon1, 10, 3
	.comm acommon1, 10, 3

	.data
Lzd1:	.space 1
	.globl zdg1, mdg1, adg1
zdg1:	.space 1
Lmd1:	.space 1
mdg1:	.space 1
adg1:	.space 1
Lad1:	.space 1

	.quad	_zud1
	.quad	_mud1
	.quad	_aud1

	.lcomm zlcomm1, 5, 1
	.lcomm mlcomm1, 5, 1
	.lcomm alcomm1, 5, 1

	.section __HERE,__there
	.quad	_zus1
Lzs1:	.space 1
zsg1:	.space 1
	.quad	_mus1
msg1:	.space 1
asg1:	.space 1
	.globl zsg1, msg1, asg1
Lms1:	.space 1
Las1:	.space 1

	.quad	_aus1
@
