head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.8
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.1
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.6
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.4
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.2
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.2
	binutils-2_21-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2011.05.20.10.09.59;	author bernds;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.21.12.29;	author jsm28;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	ld/testsuite/
	* ld-tic6x/pcr-reloc.d: New test.
	* ld-tic6x/pcr-reloc.s: New test.

	gas/testsuite/
	* gas/tic6x/pcr-relocs.d: New test.
	* gas/tic6x/pcr-relocs.s: New test.
	* gas/tic6x/pcr-relocs-undef.d: New test.
	* gas/tic6x/pcr-relocs-undef.s: New test.
	* gas/tic6x/reloc-bad-2.s: Update for pcr_offset.
	* gas/tic6x/reloc-bad-2.l: Update for pcr_offset.

	bfd/
	* elf32-tic6x.c (elf32_tic6x_howto_table): Add entries for
	R_C6000_PCR_H16 and R_C6000_PCR_L16.
	(elf32_tic6x_relocate_section): Handle them.

	gas/
	* config/tc-tic6x.c (tic6x_operators): Add "pcr_offset".
	(tic6x_parse_name): Handle it.
	(tic6x_fix_new_exp): Handle O_pcr_offset.
	(tic6x_fix_adjustable): Return 0 for the new relocs.
	(md_apply_fix): Handle them.
	(tc_gen_reloc): Likewise.
	* config/tc-tic6x.h (tic6x_fix_info): Add a fix_subsy member.
@
text
@# Test expressions not representable by relocations.
.globl a
.globl b
.data
d:
	.word $DSBT_INDEX(__c6xabi_DSBT_BASE)
	.word $got(b)
	.word $dpr_got(a)
	.word $dpr_byte(b)
	.word $dpr_hword(a)
	.word $dpr_word(b)
	.word $pcr_offset(b,f)
.text
.nocmp
.globl f
f:
	addab .D1X b14,$dsbt_index(__c6xabi_DSBT_BASE),a5
	addab .D1X b14,$GOT(b),a5
	addab .D1X b14,$DPR_GOT(b),a5
	addab .D1X b14,$DPR_BYTE(b),a5
	addab .D1X b14,$DPR_HWORD(b),a5
	addab .D1X b14,$DPR_WORD(b),a5
	addab .D1X b14,$PCR_OFFSET(b,f),a5
	addah .D1X b14,$dsbt_index(__c6xabi_DSBT_BASE),a5
	addah .D1X b14,$GOT(b),a5
	addah .D1X b14,$DPR_GOT(b),a5
	addah .D1X b14,$DPR_BYTE(b),a5
	addah .D1X b14,$DPR_HWORD(b),a5
	addah .D1X b14,$DPR_WORD(b),a5
	addah .D1X b14,$PCR_OFFSET(b,f),a5
	addaw .D1X b14,$DPR_GOT(b),a5
	addaw .D1X b14,$DPR_BYTE(b),a5
	addaw .D1X b14,$DPR_HWORD(b),a5
	addaw .D1X b14,$DPR_WORD(b),a5
	addaw .D1X b14,$PCR_OFFSET(b,f),a5
	addk .S1 $dsbt_index(__c6xabi_DSBT_BASE),a7
	addk .S1 $got(b),a7
	addk .S1 $dpr_got(b),a7
	addk .S1 $dpr_hword(b),a7
	addk .S1 $dpr_word(b),a7
	addk .S1 $pcr_offset(b,f),a7
	mvk .S1 $dsbt_index(__c6xabi_DSBT_BASE),a7
	mvk .S1 $got(b),a7
	mvk .S1 $dpr_got(b),a7
	mvk .S1 $dpr_hword(b),a7
	mvk .S1 $dpr_word(b),a7
	mvkh .S1 $dsbt_index(__c6xabi_DSBT_BASE),a7
	mvkh .S1 $got(b),a7
	mvklh .S1 $dsbt_index(__c6xabi_DSBT_BASE),a7
	mvklh .S1 $got(b),a7
	mvkl .S1 $dsbt_index(__c6xabi_DSBT_BASE),a7
	mvkl .S1 $got(b),a7
	addkpc .S2 $dsbt_index(__c6xabi_DSBT_BASE),b3,0
	addkpc .S2 $GOT(b),b3,0
	addkpc .S2 $DPR_GOT(b),b3,0
	addkpc .S2 $DPR_BYTE(b),b3,0
	addkpc .S2 $DPR_HWORD(b),b3,0
	addkpc .S2 $DPR_WORD(b),b3,0
	addkpc .S2 $PCR_OFFSET(b,f),b3,0
	b .S1 $dsbt_index(__c6xabi_DSBT_BASE)
	b .S1 $GOT(b)
	b .S1 $DPR_GOT(b)
	b .S1 $DPR_BYTE(b)
	b .S1 $DPR_HWORD(b)
	b .S1 $DPR_WORD(b)
	b .S1 $PCR_OFFSET(b,f)
	call .S1 $dsbt_index(__c6xabi_DSBT_BASE)
	call .S1 $GOT(b)
	call .S1 $DPR_GOT(b)
	call .S1 $DPR_BYTE(b)
	call .S1 $DPR_HWORD(b)
	call .S1 $DPR_WORD(b)
	call .S1 $PCR_OFFSET(b,f)
	bdec .S1 $dsbt_index(__c6xabi_DSBT_BASE),a1
	bdec .S1 $GOT(b),a1
	bdec .S1 $DPR_GOT(b),a1
	bdec .S1 $DPR_BYTE(b),a1
	bdec .S1 $DPR_HWORD(b),a1
	bdec .S1 $DPR_WORD(b),a1
	bdec .S1 $PCR_OFFSET(b,f),a1
	bpos .S2 $dsbt_index(__c6xabi_DSBT_BASE),b1
	bpos .S2 $GOT(b),b1
	bpos .S2 $DPR_GOT(b),b1
	bpos .S2 $DPR_BYTE(b),b1
	bpos .S2 $DPR_HWORD(b),b1
	bpos .S2 $DPR_WORD(b),b1
	bpos .S2 $PCR_OFFSET(b,f),b1
	bnop .S1 $dsbt_index(__c6xabi_DSBT_BASE),1
	bnop .S1 $GOT(b),1
	bnop .S1 $DPR_GOT(b),1
	bnop .S1 $DPR_BYTE(b),1
	bnop .S1 $DPR_HWORD(b),1
	bnop .S1 $DPR_WORD(b),1
	bnop .S1 $PCR_OFFSET(b,f),1
	callnop $dsbt_index(__c6xabi_DSBT_BASE),1
	callnop $GOT(b),1
	callnop $DPR_GOT(b),1
	callnop $DPR_BYTE(b),1
	callnop $DPR_HWORD(b),1
	callnop $DPR_WORD(b),1
	callnop $PCR_OFFSET(b,f),1
	callp .S1 $dsbt_index(__c6xabi_DSBT_BASE),a3
	callp .S1 $GOT(b),a3
	callp .S1 $DPR_GOT(b),a3
	callp .S1 $DPR_BYTE(b),a3
	callp .S1 $DPR_HWORD(b),a3
	callp .S1 $DPR_WORD(b),a3
	callp .S1 $PCR_OFFSET(b,f),a3
	callret .S1 $dsbt_index(__c6xabi_DSBT_BASE)
	callret .S1 $GOT(b)
	callret .S1 $DPR_GOT(b)
	callret .S1 $DPR_BYTE(b)
	callret .S1 $DPR_HWORD(b)
	callret .S1 $DPR_WORD(b)
	callret .S1 $PCR_OFFSET(b,f)
	ret .S1 $dsbt_index(__c6xabi_DSBT_BASE)
	ret .S1 $GOT(b)
	ret .S1 $DPR_GOT(b)
	ret .S1 $DPR_BYTE(b)
	ret .S1 $DPR_HWORD(b)
	ret .S1 $DPR_WORD(b)
	ret .S1 $PCR_OFFSET(b,f)
	retp .S1 $dsbt_index(__c6xabi_DSBT_BASE),a3
	retp .S1 $GOT(b),a3
	retp .S1 $DPR_GOT(b),a3
	retp .S1 $DPR_BYTE(b),a3
	retp .S1 $DPR_HWORD(b),a3
	retp .S1 $DPR_WORD(b),a3
	retp .S1 $PCR_OFFSET(b,f),a3
	ldb .D2T2 *+b14($dsbt_index(__c6xabi_DSBT_BASE)),b1
	ldb .D2T2 *+b14($GOT(b)),b1
	ldb .D2T2 *+b14($DPR_GOT(b)),b1
	ldb .D2T2 *+b14($DPR_BYTE(b)),b1
	ldb .D2T2 *+b14($DPR_HWORD(b)),b1
	ldb .D2T2 *+b14($DPR_WORD(b)),b1
	ldb .D2T2 *+b14($PCR_OFFSET(b,f)),b1
	ldbu .D2T2 *+b14($dsbt_index(__c6xabi_DSBT_BASE)),b1
	ldbu .D2T2 *+b14($GOT(b)),b1
	ldbu .D2T2 *+b14($DPR_GOT(b)),b1
	ldbu .D2T2 *+b14($DPR_BYTE(b)),b1
	ldbu .D2T2 *+b14($DPR_HWORD(b)),b1
	ldbu .D2T2 *+b14($DPR_WORD(b)),b1
	ldbu .D2T2 *+b14($PCR_OFFSET(b,f)),b1
	ldh .D2T2 *+b14($dsbt_index(__c6xabi_DSBT_BASE)),b1
	ldh .D2T2 *+b14($GOT(b)),b1
	ldh .D2T2 *+b14($DPR_GOT(b)),b1
	ldh .D2T2 *+b14($DPR_BYTE(b)),b1
	ldh .D2T2 *+b14($DPR_HWORD(b)),b1
	ldh .D2T2 *+b14($DPR_WORD(b)),b1
	ldh .D2T2 *+b14($PCR_OFFSET(b,f)),b1
	ldhu .D2T2 *+b14($dsbt_index(__c6xabi_DSBT_BASE)),b1
	ldhu .D2T2 *+b14($GOT(b)),b1
	ldhu .D2T2 *+b14($DPR_GOT(b)),b1
	ldhu .D2T2 *+b14($DPR_BYTE(b)),b1
	ldhu .D2T2 *+b14($DPR_HWORD(b)),b1
	ldhu .D2T2 *+b14($DPR_WORD(b)),b1
	ldhu .D2T2 *+b14($PCR_OFFSET(b,f)),b1
	ldw .D2T2 *+b14($DPR_GOT(b)),b1
	ldw .D2T2 *+b14($DPR_BYTE(b)),b1
	ldw .D2T2 *+b14($DPR_HWORD(b)),b1
	ldw .D2T2 *+b14($DPR_WORD(b)),b1
	ldw .D2T2 *+b14($PCR_OFFSET(b,f)),b1
	stb .D2T2 b1,*+b14($dsbt_index(__c6xabi_DSBT_BASE))
	stb .D2T2 b1,*+b14($GOT(b))
	stb .D2T2 b1,*+b14($DPR_GOT(b))
	stb .D2T2 b1,*+b14($DPR_BYTE(b))
	stb .D2T2 b1,*+b14($DPR_HWORD(b))
	stb .D2T2 b1,*+b14($DPR_WORD(b))
	stb .D2T2 b1,*+b14($PCR_OFFSET(b,f))
	sth .D2T2 b1,*+b14($dsbt_index(__c6xabi_DSBT_BASE))
	sth .D2T2 b1,*+b14($GOT(b))
	sth .D2T2 b1,*+b14($DPR_GOT(b))
	sth .D2T2 b1,*+b14($DPR_BYTE(b))
	sth .D2T2 b1,*+b14($DPR_HWORD(b))
	sth .D2T2 b1,*+b14($DPR_WORD(b))
	sth .D2T2 b1,*+b14($PCR_OFFSET(b,f))
	stw .D2T2 b1,*+b14($DPR_GOT(b))
	stw .D2T2 b1,*+b14($DPR_BYTE(b))
	stw .D2T2 b1,*+b14($DPR_HWORD(b))
	stw .D2T2 b1,*+b14($DPR_WORD(b))
	stw .D2T2 b1,*+b14($PCR_OFFSET(b,f))
@


1.1
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-tic6x.lo.
	(ALL_MACHINES_CFILES): Add cpu-tic6x.c.
	(BFD32_BACKENDS): Add elf32-tic6x.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-tic6x.c.
	* Makefile.in: Regenerate.
	* archures.c (bfd_arch_tic6x, bfd_tic6x_arch): New.
	(bfd_archures_list): Update.
	* config.bfd (tic6x-*-elf): New.
	* configure.in (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec):
	New.
	* configure: Regenerate.
	* cpu-tic6x.c, elf32-tic6x.c: New.
	* reloc.c (BFD_RELOC_C6000_PCR_S21, BFD_RELOC_C6000_PCR_S12,
	BFD_RELOC_C6000_PCR_S10, BFD_RELOC_C6000_PCR_S7,
	BFD_RELOC_C6000_ABS_S16, BFD_RELOC_C6000_ABS_L16,
	BFD_RELOC_C6000_ABS_H16, BFD_RELOC_C6000_SBR_U15_B,
	BFD_RELOC_C6000_SBR_U15_H, BFD_RELOC_C6000_SBR_U15_W,
	BFD_RELOC_C6000_SBR_S16, BFD_RELOC_C6000_SBR_L16_B,
	BFD_RELOC_C6000_SBR_L16_H, BFD_RELOC_C6000_SBR_L16_W,
	BFD_RELOC_C6000_SBR_H16_B, BFD_RELOC_C6000_SBR_H16_H,
	BFD_RELOC_C6000_SBR_H16_W, BFD_RELOC_C6000_SBR_GOT_U15_W,
	BFD_RELOC_C6000_SBR_GOT_L16_W, BFD_RELOC_C6000_SBR_GOT_H16_W,
	BFD_RELOC_C6000_DSBT_INDEX, BFD_RELOC_C6000_PREL31,
	BFD_RELOC_C6000_COPY, BFD_RELOC_C6000_ALIGN,
	BFD_RELOC_C6000_FPHEAD, BFD_RELOC_C6000_NOCMP): New.
	* targets.c (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec): New.
	(_bfd_target_vector): Update.
	* bfd-in2.h, libbfd.h: Regenerate.

binutils:
	* MAINTAINERS: Add self as TI C6X maintainer.
	* NEWS: Add news entry for TI C6X support.
	* readelf.c: Include elf/tic6x.h.
	(guess_is_rela): Handle EM_TI_C6000.
	(dump_relocations): Likewise.
	(get_tic6x_dynamic_type): New.
	(get_dynamic_type): Call it.
	(get_machine_flags): Handle EF_C6000_REL.
	(get_osabi_name): Handle machine-specific values only for relevant
	machines.  Handle C6X values.
	(get_tic6x_segment_type): New.
	(get_segment_type): Call it.
	(get_tic6x_section_type_name): New.
	(get_section_type_name): Call it.
	(is_32bit_abs_reloc, is_16bit_abs_reloc, is_none_reloc): Handle
	EM_TI_C6000.

gas:
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tic6x.c.
	(TARGET_CPU_HFILES): Add config/tc-tic6x.h.
	* Makefile.in: Regenerate.
	* NEWS: Add news entry for TI C6X support.
	* app.c (do_scrub_chars): Handle "||^" for TI C6X.  Handle
	TC_PREDICATE_START_CHAR and TC_PREDICATE_END_CHAR.  Keep spaces in
	operands if TC_KEEP_OPERAND_SPACES.
	* configure.tgt (tic6x-*-*): New.
	* config/tc-ia64.h (TC_PREDICATE_START_CHAR,
	TC_PREDICATE_END_CHAR): Define.
	* config/tc-tic6x.c, config/tc-tic6x.h: New.
	* doc/Makefile.am (CPU_DOCS): Add c-tic6x.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TIC6X): Define.
	* doc/as.texinfo: Add TI C6X documentation.  Include c-tic6x.texi.
	* doc/c-tic6x.texi: New.

gas/testsuite:
	* gas/tic6x: New directory and testcases.

include:
	* dis-asm.h (print_insn_tic6x): Declare.

include/elf:
	* common.h (ELFOSABI_C6000_ELFABI, ELFOSABI_C6000_LINUX): Define.
	* tic6x.h: New.

include/opcode:
	* tic6x-control-registers.h, tic6x-insn-formats.h,
	tic6x-opcode-table.h, tic6x.h: New.

ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_tic6x_be.o and
	eelf32_tic6x_le.o.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): New.
	* NEWS: Add news entry for TI C6X support.
	* configure.tgt (tic6x-*-*): New.
	* emulparams/elf32_tic6x_be.sh, emulparams/elf32_tic6x_le.sh: New.

ld/testsuite:
	* ld-elf/flags1.d, ld-elf/merge.d: XFAIL for tic6x-*-*.
	* ld-elf/sec-to-seg.exp: Set B_test_same_seg to 0 for tic6x-*-*.
	* ld-tic6x: New directory and testcases.

opcodes:
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tic6x-dis.c.
	* Makefile.in: Regenerate.
	* configure.in (bfd_tic6x_arch): New.
	* configure: Regenerate.
	* disassemble.c (ARCH_tic6x): Define if ARCH_all.
	(disassembler): Handle TI C6X.
	* tic6x-dis.c: New.
@
text
@d12 1
d23 1
d30 1
d35 1
d41 1
d59 1
d66 1
d73 1
d80 1
d87 1
d94 1
d101 1
d108 1
d115 1
d122 1
d129 1
d136 1
d143 1
d150 1
d157 1
d162 1
d169 1
d176 1
d181 1
@

