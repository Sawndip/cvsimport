head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.10
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.8
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.6
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.4
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.2
	binutils-2_21-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.03.25.21.12.29;	author jsm28;	state Exp;
branches;
next	;


desc
@@


1.1
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-tic6x.lo.
	(ALL_MACHINES_CFILES): Add cpu-tic6x.c.
	(BFD32_BACKENDS): Add elf32-tic6x.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-tic6x.c.
	* Makefile.in: Regenerate.
	* archures.c (bfd_arch_tic6x, bfd_tic6x_arch): New.
	(bfd_archures_list): Update.
	* config.bfd (tic6x-*-elf): New.
	* configure.in (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec):
	New.
	* configure: Regenerate.
	* cpu-tic6x.c, elf32-tic6x.c: New.
	* reloc.c (BFD_RELOC_C6000_PCR_S21, BFD_RELOC_C6000_PCR_S12,
	BFD_RELOC_C6000_PCR_S10, BFD_RELOC_C6000_PCR_S7,
	BFD_RELOC_C6000_ABS_S16, BFD_RELOC_C6000_ABS_L16,
	BFD_RELOC_C6000_ABS_H16, BFD_RELOC_C6000_SBR_U15_B,
	BFD_RELOC_C6000_SBR_U15_H, BFD_RELOC_C6000_SBR_U15_W,
	BFD_RELOC_C6000_SBR_S16, BFD_RELOC_C6000_SBR_L16_B,
	BFD_RELOC_C6000_SBR_L16_H, BFD_RELOC_C6000_SBR_L16_W,
	BFD_RELOC_C6000_SBR_H16_B, BFD_RELOC_C6000_SBR_H16_H,
	BFD_RELOC_C6000_SBR_H16_W, BFD_RELOC_C6000_SBR_GOT_U15_W,
	BFD_RELOC_C6000_SBR_GOT_L16_W, BFD_RELOC_C6000_SBR_GOT_H16_W,
	BFD_RELOC_C6000_DSBT_INDEX, BFD_RELOC_C6000_PREL31,
	BFD_RELOC_C6000_COPY, BFD_RELOC_C6000_ALIGN,
	BFD_RELOC_C6000_FPHEAD, BFD_RELOC_C6000_NOCMP): New.
	* targets.c (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec): New.
	(_bfd_target_vector): Update.
	* bfd-in2.h, libbfd.h: Regenerate.

binutils:
	* MAINTAINERS: Add self as TI C6X maintainer.
	* NEWS: Add news entry for TI C6X support.
	* readelf.c: Include elf/tic6x.h.
	(guess_is_rela): Handle EM_TI_C6000.
	(dump_relocations): Likewise.
	(get_tic6x_dynamic_type): New.
	(get_dynamic_type): Call it.
	(get_machine_flags): Handle EF_C6000_REL.
	(get_osabi_name): Handle machine-specific values only for relevant
	machines.  Handle C6X values.
	(get_tic6x_segment_type): New.
	(get_segment_type): Call it.
	(get_tic6x_section_type_name): New.
	(get_section_type_name): Call it.
	(is_32bit_abs_reloc, is_16bit_abs_reloc, is_none_reloc): Handle
	EM_TI_C6000.

gas:
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tic6x.c.
	(TARGET_CPU_HFILES): Add config/tc-tic6x.h.
	* Makefile.in: Regenerate.
	* NEWS: Add news entry for TI C6X support.
	* app.c (do_scrub_chars): Handle "||^" for TI C6X.  Handle
	TC_PREDICATE_START_CHAR and TC_PREDICATE_END_CHAR.  Keep spaces in
	operands if TC_KEEP_OPERAND_SPACES.
	* configure.tgt (tic6x-*-*): New.
	* config/tc-ia64.h (TC_PREDICATE_START_CHAR,
	TC_PREDICATE_END_CHAR): Define.
	* config/tc-tic6x.c, config/tc-tic6x.h: New.
	* doc/Makefile.am (CPU_DOCS): Add c-tic6x.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TIC6X): Define.
	* doc/as.texinfo: Add TI C6X documentation.  Include c-tic6x.texi.
	* doc/c-tic6x.texi: New.

gas/testsuite:
	* gas/tic6x: New directory and testcases.

include:
	* dis-asm.h (print_insn_tic6x): Declare.

include/elf:
	* common.h (ELFOSABI_C6000_ELFABI, ELFOSABI_C6000_LINUX): Define.
	* tic6x.h: New.

include/opcode:
	* tic6x-control-registers.h, tic6x-insn-formats.h,
	tic6x-opcode-table.h, tic6x.h: New.

ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_tic6x_be.o and
	eelf32_tic6x_le.o.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): New.
	* NEWS: Add news entry for TI C6X support.
	* configure.tgt (tic6x-*-*): New.
	* emulparams/elf32_tic6x_be.sh, emulparams/elf32_tic6x_le.sh: New.

ld/testsuite:
	* ld-elf/flags1.d, ld-elf/merge.d: XFAIL for tic6x-*-*.
	* ld-elf/sec-to-seg.exp: Set B_test_same_seg to 0 for tic6x-*-*.
	* ld-tic6x: New directory and testcases.

opcodes:
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tic6x-dis.c.
	* Makefile.in: Regenerate.
	* configure.in (bfd_tic6x_arch): New.
	* configure: Regenerate.
	* disassemble.c (ARCH_tic6x): Define if ARCH_all.
	(disassembler): Handle TI C6X.
	* tic6x-dis.c: New.
@
text
@# Test C674x instructions generating relocations.
.data
w1:
	.word 1
w2:
	.word 2
.text
.nocmp
.globl ext1
.globl ext2
.globl ext3
.globl a1
.globl b1
.globl f
f:
	addab .D1X b14,ext1,a5
	addab .D2 b15,(ext2+7),b7
	addab .D1X b14,(a1),a20
	addab .D2 b14,(b1),b30
	addab .D1X b14,w2-w1,a15
	addab .D2 b14,w4-w3,b16
	addah .D1X b14,ext1,a5
	addah .D2 b15,(ext2+6),b7
	addah .D1X b14,(a1),a20
	addah .D2 b14,(b1),b30
	addah .D1X b14,w2-w1,a15
	addah .D2 b14,w4-w3,b16
	addaw .D1X b14,ext1,a5
	addaw .D2 b15,(ext2+8),b7
	addaw .D1X b14,(a1),a20
	addaw .D2 b14,(b1),b30
	addaw .D1X b14,w2-w1,a15
	addaw .D2 b14,w4-w3,b16
	addaw .D1X b14,$DSBT_INDEX(__c6xabi_DSBT_BASE),a5
	addaw .D2 b15,$GOT(ext2)+8,b7
	addk .S1 ext1+3,a1
	addk .S2 $dpr_byte(ext2)+5,b3
	addk .S1 w2-w1,a4
	addk .S2 w3-w4,b5
	mvk .S1 ext1+3,a1
	mvk .S2 $dpr_byte(ext2)+5,b3
	mvk .S1 w2-w1,a4
	mvk .S2 w3-w4,b5
	mvkh .S1 ext3+1,a1
	mvkh .S2 $DPR_GOT(ext2)+2,b2
	mvkh .S1 $DPR_BYTE(ext1)+3,a3
	mvkh .S2 $DPR_HWORD(ext3)+4,b4
	mvkh .S1 $DPR_WORD(ext2)+5,a5
	mvkh .S2 s1-s0,b6
	mvklh .S1 ext3+1,a1
	mvklh .S2 $DPR_GOT(ext2)+2,b2
	mvklh .S1 $DPR_BYTE(ext1)+3,a3
	mvklh .S2 $DPR_HWORD(ext3)+4,b4
	mvklh .S1 $DPR_WORD(ext2)+5,a5
	mvklh .S2 s1-s0,b6
	mvkl .S1 ext3+1,a1
	mvkl .S2 $DPR_GOT(ext2)+2,b2
	mvkl .S1 $DPR_BYTE(ext1)+3,a3
	mvkl .S2 $DPR_HWORD(ext3)+4,b4
	mvkl .S1 $DPR_WORD(ext2)+5,a5
	mvkl .S2 s1-s0,b6
	ldb .D2T2 *+b14(ext1),b1
	ldb .D2T1 *+b15(ext2+7),a1
	ldb .D2T2 *+b15(b1),b1
	ldb .D2T1 *+b14(a1),a1
	ldb .D2T2 *+b14(w2-w1),b1
	ldb .D2T1 *+b14(w4-w3),a1
	ldbu .D2T2 *+b14(ext1),b1
	ldbu .D2T1 *+b15(ext2+7),a1
	ldbu .D2T2 *+b15(b1),b1
	ldbu .D2T1 *+b14(a1),a1
	ldbu .D2T2 *+b14(w2-w1),b1
	ldbu .D2T1 *+b14(w4-w3),a1
	ldh .D2T2 *+b14(ext1),b1
	ldh .D2T1 *+b15(ext2+6),a1
	ldh .D2T2 *+b15(b1),b1
	ldh .D2T1 *+b14(a1),a1
	ldh .D2T2 *+b14(w2-w1),b1
	ldh .D2T1 *+b14(w4-w3),a1
	ldhu .D2T2 *+b14(ext1),b1
	ldhu .D2T1 *+b15(ext2+6),a1
	ldhu .D2T2 *+b15(b1),b1
	ldhu .D2T1 *+b14(a1),a1
	ldhu .D2T2 *+b14(w2-w1),b1
	ldhu .D2T1 *+b14(w4-w3),a1
	ldw .D2T2 *+b14(ext1),b1
	ldw .D2T1 *+b15(ext2+4),a1
	ldw .D2T2 *+b15(b1),b1
	ldw .D2T1 *+b14(a1),a1
	ldw .D2T2 *+b14(w2-w1),b1
	ldw .D2T1 *+b14(w4-w3),a1
	ldw .D2T2 *+b14($DSBT_INDEX(__c6xabi_DSBT_BASE)),b1
	ldw .D2T1 *+b14($GOT(ext2)+4),a1
	stb .D2T2 b1,*+b14(ext1)
	stb .D2T1 a1,*+b15(ext2+7)
	stb .D2T2 b1,*+b15(b1)
	stb .D2T1 a1,*+b14(a1)
	stb .D2T2 b1,*+b14(w2-w1)
	stb .D2T1 a1,*+b14(w4-w3)
	sth .D2T2 b1,*+b14(ext1)
	sth .D2T1 a1,*+b15(ext2+6)
	sth .D2T2 b1,*+b15(b1)
	sth .D2T1 a1,*+b14(a1)
	sth .D2T2 b1,*+b14(w2-w1)
	sth .D2T1 a1,*+b14(w4-w3)
	stw .D2T2 b1,*+b14(ext1)
	stw .D2T1 a1,*+b15(ext2+4)
	stw .D2T2 b1,*+b15(b1)
	stw .D2T1 a1,*+b14(a1)
	stw .D2T2 b1,*+b14(w2-w1)
	stw .D2T1 a1,*+b14(w4-w3)
	stw .D2T2 b1,*+b14($DSBT_INDEX(__c6xabi_DSBT_BASE))
	stw .D2T1 a1,*+b14($GOT(ext2)+4)
.data
w3:
	.word 3
w4:
	.word 4
s0:
	.space 131073
s1:
	.word 5
@
