head	1.87;
access;
symbols
	binutils-2_24-branch:1.87.0.2
	binutils-2_24-branchpoint:1.87
	binutils-2_21_1:1.69.2.2
	binutils-2_23_2:1.85
	binutils-2_23_1:1.85
	binutils-2_23:1.85
	binutils-2_23-branch:1.85.0.2
	binutils-2_23-branchpoint:1.85
	binutils-2_22_branch:1.78.0.4
	binutils-2_22:1.78
	binutils-2_22-branch:1.78.0.2
	binutils-2_22-branchpoint:1.78
	binutils-2_21:1.69
	binutils-2_21-branch:1.69.0.2
	binutils-2_21-branchpoint:1.69
	binutils-2_20_1:1.53
	binutils-2_20:1.53
	binutils-arc-20081103-branch:1.47.0.4
	binutils-arc-20081103-branchpoint:1.47
	binutils-2_20-branch:1.53.0.2
	binutils-2_20-branchpoint:1.53
	dje-cgen-play1-branch:1.51.0.2
	dje-cgen-play1-branchpoint:1.51
	arc-20081103-branch:1.47.0.2
	arc-20081103-branchpoint:1.47
	binutils-2_19_1:1.46.2.1
	binutils-2_19:1.46.2.1
	binutils-2_19-branch:1.46.0.2
	binutils-2_19-branchpoint:1.46
	binutils-2_18:1.39
	binutils-2_18-branch:1.39.0.2
	binutils-2_18-branchpoint:1.39
	binutils-csl-coldfire-4_1-32:1.31
	binutils-csl-sourcerygxx-4_1-32:1.31
	binutils-csl-innovasic-fido-3_4_4-33:1.31
	binutils-csl-sourcerygxx-3_4_4-32:1.28
	binutils-csl-coldfire-4_1-30:1.31
	binutils-csl-sourcerygxx-4_1-30:1.31
	binutils-csl-coldfire-4_1-28:1.31
	binutils-csl-sourcerygxx-4_1-29:1.31
	binutils-csl-sourcerygxx-4_1-28:1.31
	binutils-csl-arm-2006q3-27:1.31
	binutils-csl-sourcerygxx-4_1-27:1.31
	binutils-csl-arm-2006q3-26:1.31
	binutils-csl-sourcerygxx-4_1-26:1.31
	binutils-csl-sourcerygxx-4_1-25:1.31
	binutils-csl-sourcerygxx-4_1-24:1.31
	binutils-csl-sourcerygxx-4_1-23:1.31
	binutils-csl-sourcerygxx-4_1-21:1.31
	binutils-csl-arm-2006q3-21:1.31
	binutils-csl-sourcerygxx-4_1-22:1.31
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.31
	binutils-csl-sourcerygxx-4_1-20:1.31
	binutils-csl-arm-2006q3-19:1.31
	binutils-csl-sourcerygxx-4_1-19:1.31
	binutils-csl-sourcerygxx-4_1-18:1.31
	binutils-csl-renesas-4_1-9:1.31
	binutils-csl-sourcerygxx-3_4_4-25:1.28
	binutils-csl-renesas-4_1-8:1.31
	binutils-csl-renesas-4_1-7:1.31
	binutils-csl-renesas-4_1-6:1.31
	binutils-csl-sourcerygxx-4_1-17:1.31
	binutils-csl-sourcerygxx-4_1-14:1.31
	binutils-csl-sourcerygxx-4_1-15:1.31
	binutils-csl-sourcerygxx-4_1-13:1.31
	binutils-2_17:1.31
	binutils-csl-sourcerygxx-4_1-12:1.31
	binutils-csl-sourcerygxx-3_4_4-21:1.31
	binutils-csl-wrs-linux-3_4_4-24:1.28
	binutils-csl-wrs-linux-3_4_4-23:1.28
	binutils-csl-sourcerygxx-4_1-9:1.31
	binutils-csl-sourcerygxx-4_1-8:1.31
	binutils-csl-sourcerygxx-4_1-7:1.31
	binutils-csl-arm-2006q1-6:1.31
	binutils-csl-sourcerygxx-4_1-6:1.31
	binutils-csl-wrs-linux-3_4_4-22:1.28
	binutils-csl-coldfire-4_1-11:1.31
	binutils-csl-sourcerygxx-3_4_4-19:1.31
	binutils-csl-coldfire-4_1-10:1.31
	binutils-csl-sourcerygxx-4_1-5:1.31
	binutils-csl-sourcerygxx-4_1-4:1.31
	binutils-csl-wrs-linux-3_4_4-21:1.28
	binutils-csl-morpho-4_1-4:1.31
	binutils-csl-sourcerygxx-3_4_4-17:1.31
	binutils-csl-wrs-linux-3_4_4-20:1.28
	binutils-2_17-branch:1.31.0.4
	binutils-2_17-branchpoint:1.31
	binutils-csl-2_17-branch:1.31.0.2
	binutils-csl-2_17-branchpoint:1.31
	binutils-csl-gxxpro-3_4-branch:1.28.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.28
	binutils-2_16_1:1.28
	binutils-csl-arm-2005q1b:1.28
	binutils-2_16:1.28
	binutils-csl-arm-2005q1a:1.28
	binutils-csl-arm-2005q1-branch:1.28.0.4
	binutils-csl-arm-2005q1-branchpoint:1.28
	binutils-2_16-branch:1.28.0.2
	binutils-2_16-branchpoint:1.28
	csl-arm-2004-q3d:1.25
	csl-arm-2004-q3:1.25
	binutils-2_15:1.20
	binutils-2_15-branchpoint:1.20
	csl-arm-2004-q1a:1.22
	csl-arm-2004-q1:1.20
	binutils-2_15-branch:1.20.0.6
	cagney_bfdfile-20040213-branch:1.20.0.4
	cagney_bfdfile-20040213-branchpoint:1.20
	cagney_bigcore-20040122-branch:1.20.0.2
	cagney_bigcore-20040122-branchpoint:1.20
	csl-arm-2003-q4:1.20
	binutils-2_14:1.15.2.1
	binutils-2_14-branch:1.15.0.2
	binutils-2_14-branchpoint:1.15
	binutils-2_13_2_1:1.13
	binutils-2_13_2:1.13
	binutils-2_13_1:1.13
	binutils-2_13:1.13
	binutils-2_13-branchpoint:1.13
	binutils-2_13-branch:1.13.0.4
	binutils-2_12_1:1.13
	binutils-2_12:1.13
	binutils-2_12-branch:1.13.0.2
	binutils-2_12-branchpoint:1.13
	cygnus_cvs_20020108_pre:1.10
	binutils-2_11_2:1.6.2.2
	binutils-2_11_1:1.6.2.2
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	binutils-2_10_1:1.5
	binutils-2_10:1.5
	binutils-2_10-branch:1.5.0.2
	binutils-2_10-branchpoint:1.5
	binutils_latest_snapshot:1.87
	repo-unification-2000-02-06:1.5
	binu_ss_19990721:1.3;
locks; strict;
comment	@# @;


1.87
date	2013.05.02.21.06.14;	author nickc;	state Exp;
branches;
next	1.86;

1.86
date	2012.12.17.16.55.51;	author nickc;	state Exp;
branches;
next	1.85;

1.85
date	2012.06.30.12.35.52;	author hjl;	state Exp;
branches;
next	1.84;

1.84
date	2012.05.28.14.20.15;	author nickc;	state Exp;
branches;
next	1.83;

1.83
date	2012.05.15.12.55.37;	author nickc;	state Exp;
branches;
next	1.82;

1.82
date	2012.04.12.13.01.15;	author nickc;	state Exp;
branches;
next	1.81;

1.81
date	2012.02.14.01.01.29;	author amodra;	state Exp;
branches;
next	1.80;

1.80
date	2012.02.13.04.10.56;	author amodra;	state Exp;
branches;
next	1.79;

1.79
date	2012.02.13.02.31.18;	author amodra;	state Exp;
branches;
next	1.78;

1.78
date	2011.08.04.20.20.11;	author hjl;	state Exp;
branches;
next	1.77;

1.77
date	2011.07.28.16.35.48;	author nickc;	state Exp;
branches;
next	1.76;

1.76
date	2011.04.06.17.09.52;	author jsm28;	state Exp;
branches;
next	1.75;

1.75
date	2011.02.25.17.00.30;	author hjl;	state Exp;
branches;
next	1.74;

1.74
date	2011.01.31.16.43.15;	author nickc;	state Exp;
branches;
next	1.73;

1.73
date	2011.01.18.18.55.59;	author hjl;	state Exp;
branches;
next	1.72;

1.72
date	2010.12.12.14.49.25;	author hjl;	state Exp;
branches;
next	1.71;

1.71
date	2010.11.20.15.36.32;	author rsandifo;	state Exp;
branches;
next	1.70;

1.70
date	2010.11.08.06.43.35;	author tschwinge;	state Exp;
branches;
next	1.69;

1.69
date	2010.10.28.06.12.16;	author amodra;	state Exp;
branches
	1.69.2.1;
next	1.68;

1.68
date	2010.10.23.18.05.09;	author mmitchel;	state Exp;
branches;
next	1.67;

1.67
date	2010.09.20.16.07.27;	author rth;	state Exp;
branches;
next	1.66;

1.66
date	2010.09.16.23.55.10;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2010.08.17.20.03.41;	author roland;	state Exp;
branches;
next	1.64;

1.64
date	2010.08.03.10.30.52;	author amodra;	state Exp;
branches;
next	1.63;

1.63
date	2010.08.02.22.05.23;	author hjl;	state Exp;
branches;
next	1.62;

1.62
date	2010.08.02.20.10.45;	author hjl;	state Exp;
branches;
next	1.61;

1.61
date	2010.08.02.08.48.56;	author gingold;	state Exp;
branches;
next	1.60;

1.60
date	2010.07.15.14.34.42;	author nathan;	state Exp;
branches;
next	1.59;

1.59
date	2010.07.05.15.07.20;	author hjl;	state Exp;
branches;
next	1.58;

1.58
date	2010.06.16.00.36.03;	author jsm28;	state Exp;
branches;
next	1.57;

1.57
date	2010.05.18.03.31.04;	author hjl;	state Exp;
branches;
next	1.56;

1.56
date	2010.01.13.14.08.53;	author nickc;	state Exp;
branches;
next	1.55;

1.55
date	2009.09.29.14.17.09;	author nickc;	state Exp;
branches;
next	1.54;

1.54
date	2009.09.23.03.12.24;	author amodra;	state Exp;
branches;
next	1.53;

1.53
date	2009.07.27.10.04.25;	author jbeulich;	state Exp;
branches;
next	1.52;

1.52
date	2009.07.24.10.16.01;	author nickc;	state Exp;
branches;
next	1.51;

1.51
date	2009.05.22.18.11.59;	author hjl;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.30.15.47.12;	author nickc;	state Exp;
branches;
next	1.49;

1.49
date	2009.02.05.21.58.41;	author jsm28;	state Exp;
branches;
next	1.48;

1.48
date	2008.12.03.14.50.59;	author nickc;	state Exp;
branches;
next	1.47;

1.47
date	2008.09.15.13.53.47;	author amodra;	state Exp;
branches;
next	1.46;

1.46
date	2008.02.01.17.58.48;	author bwilson;	state Exp;
branches
	1.46.2.1;
next	1.45;

1.45
date	2007.11.30.23.47.55;	author bwilson;	state Exp;
branches;
next	1.44;

1.44
date	2007.11.07.14.32.54;	author nickc;	state Exp;
branches;
next	1.43;

1.43
date	2007.11.06.17.15.10;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2007.10.27.17.45.53;	author hjl;	state Exp;
branches;
next	1.41;

1.41
date	2007.10.11.20.20.55;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	2007.08.28.13.21.54;	author jsm28;	state Exp;
branches;
next	1.39;

1.39
date	2007.07.19.16.47.40;	author nickc;	state Exp;
branches;
next	1.38;

1.38
date	2007.07.03.11.17.32;	author nickc;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.05.17.00.32;	author nickc;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.06.15.13.26;	author nickc;	state Exp;
branches;
next	1.35;

1.35
date	2006.11.27.20.14.52;	author bwilson;	state Exp;
branches;
next	1.34;

1.34
date	2006.11.22.17.45.56;	author drow;	state Exp;
branches;
next	1.33;

1.33
date	2006.11.15.15.59.26;	author jbeulich;	state Exp;
branches;
next	1.32;

1.32
date	2006.09.16.23.51.50;	author nickc;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.07.08.04.56;	author jbeulich;	state Exp;
branches;
next	1.30;

1.30
date	2005.10.08.17.07.16;	author pbrook;	state Exp;
branches;
next	1.29;

1.29
date	2005.04.15.11.38.59;	author jbeulich;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.05.13.38.39;	author ebotcazou;	state Exp;
branches;
next	1.27;

1.27
date	2004.12.30.22.41.31;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.16.13.23.22;	author jbeulich;	state Exp;
branches;
next	1.25;

1.25
date	2004.09.19.22.51.04;	author pbrook;	state Exp;
branches;
next	1.24;

1.24
date	2004.08.01.19.59.51;	author ciceron;	state Exp;
branches;
next	1.23;

1.23
date	2004.05.11.15.53.47;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.30.16.47.46;	author hjl;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.27.03.59.09;	author hjl;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.06.15.30.05;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.29.02.03.33;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.03.18.51.21;	author hjl;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.02.03.00.49;	author hjl;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.29.11.52.37;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.25.20.55.59;	author nickc;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2002.10.09.19.40.41;	author sclarke;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.01.16.29.21;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.15.12.56.32;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.14.17.40.49;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.08.15.27.25;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.08.01.08.05;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.06.21.07.14;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.14.22.37.31;	author rth;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.21.18.06.40;	author hp;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.10.11.03.40.17;	author geoffk;	state Exp;
branches;
next	1.4;

1.4
date	99.08.17.07.59.00;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	99.06.12.10.43.40;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	99.06.10.21.14.58;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.06.05.23.14.42;	author rth;	state Exp;
branches;
next	;

1.69.2.1
date	2011.02.10.03.41.06;	author amodra;	state Exp;
branches;
next	1.69.2.2;

1.69.2.2
date	2011.04.27.07.17.42;	author amodra;	state Exp;
branches;
next	;

1.46.2.1
date	2008.09.15.13.57.00;	author amodra;	state Exp;
branches;
next	;

1.15.2.1
date	2003.04.29.11.57.08;	author nickc;	state Exp;
branches;
next	;

1.6.2.1
date	2001.05.14.22.57.58;	author rth;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.06.11.10.04.57;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.87
log
@	* archures.c: Add some more MSP430 machine numbers.
	* config.bfd (msp430): Define targ_selvecs.
	* configure.in: Add bfd_elf32_msp430_ti_vec.
	* cpu-msp430.c: Add some more MSP430 machine numbers.
	* elf32-msp430.c Add support for MSP430X relocations.
	Add support for TI compiler generated relocations.
	Add support for sym_diff relocations.
	Add support for relaxing out of range short branches into long
	branches.
	Add support for MSP430 attribute section.
	* reloc.c: Add MSP430X relocations.
	* targets.c: Add bfd_elf32_msp430_ti_vec.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.

	* readelf.c: Add support for MSP430X architecture.

	* readelf.exp: Expect -wi test to fail for the MSP430.

	* config/tc-msp430.c: Add support for the MSP430X architecture.
	Add code to insert a NOP instruction after any instruction that
	might change the interrupt state.
	Add support for the LARGE memory model.
	Add code to initialise the .MSP430.attributes section.
	* config/tc-msp430.h: Add support for the MSP430X architecture.
	* doc/c-msp430.texi: Document the new -mL and -mN command line
	options.
	* NEWS: Mention support for the MSP430X architecture.

	* gas/all/gas.exp: Skip the DIFF1 test for the MSP430.
	Expect the FORWARD test to pass for the MSP430.
	Skip the REDEF tests for the MSP430.
	Expect the 930509A test to fail for the MSP430.
	* gas/all/sleb128-4.d: Skip for the MSP430.
	* gas/elf/elf.exp: Set target_machine to msp430 for the MSP430.
	Skip the EHOPT0 test for the MSP430.
	Skip the REDEF and EQU-RELOC tests for the MSP430.
	* gas/elf/section2.e-msp430: New file.
	* gas/lns/lns-big-delta.d: Remove expectation of 20-bit
	addresses.
	* gas/lns/lns.exp: Use alternate LNS COMMON test for the MSP430.
	* gas/msp430/msp430x.s: New test.
	* gas/msp430/msp430x.d: Expected disassembly.
	* gas/msp430/msp430.exp: Run new test.
	* gas/msp430/opcode.d: Update expected disassembly.

	* msp430.h: Add MSP430X relocs.
	Add some more MSP430 machine numbers.
	Add values used by .MSP430.attributes section.

	* msp430.h: Add patterns for MSP430X instructions.

	* Makefile.am: Add emsp430X.c
	* Makefine.in: Regenerate.
	* configure.tgt (msp430): Add msp430X emulation.
	* ldmain.c (multiple_definition): Only disable relaxation if it
	was enabled by the user.
	* ldmain.h (RELAXATION_ENABLED_BY_USER): New macro.
	* emulparams/msp430all.sh: Add support for MSP430X.
	* emultempl/generic.em: (before_parse): Enable relaxation for the
	MSP430.
	* scripttempl/msp430.sc: Reorganize sections.  Add .rodata
	section.
	* scripttempl/msp430_3.sc: Likewise.
	* NEWS: Mention support for MSP430X.

	* ld-elf/flags1.d: Expect this test to pass on the MSP430.
	* ld-elf/init-fini-arrays.d: Expect this test to fail on the
	MSP430.
	* ld-elf/merge.d: Expect this test to pass on the MSP430.
	* ld-elf/sec64k.exp: Skip these tests for the MSP430.
	* ld-gc/pr13683.d: Expect this test to fail on the MSP430.
	* ld-srec/srec.exp: Expect these tests to fail on the MSP430.
	* ld-undefined/undefined.exp: Expect the UNDEFINED LINE test to
	fail on the MSP430.

	* msp430-dis.c: Add support for MSP430X instructions.
@
text
@# Copyright 2012-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  

#
# elf tests
#

proc run_elf_list_test { name suffix opts readelf_opts readelf_pipe } {
    global READELF
    global srcdir subdir
    set testname "elf $name list"
    set file $srcdir/$subdir/$name
    gas_run ${name}.s "$opts -o dump.o" ">&dump.out"
    if { ![string match "" $opts]
	  && [regexp_diff "dump.out" "${file}.l"] } then {
	fail $testname
	verbose "output is [file_contents "dump.out"]" 2
	return
    }
    send_log "$READELF $readelf_opts dump.o $readelf_pipe > dump.out\n"
    set status [gas_host_run "$READELF $readelf_opts dump.o" ">readelf.out"]
    if { [lindex $status 0] != 0 || ![string match "" [lindex $status 1]] } then {
	send_log "[lindex $status 1]\n"
	fail $testname
	return
    }
    catch "exec cat readelf.out $readelf_pipe > dump.out\n" comp_output
    if ![string match "" $comp_output] then {
	send_log "$comp_output\n"
	fail $testname
	return
    }
    verbose_eval {[file_contents "dump.out"]} 3
    if { [regexp_diff "dump.out" "${file}.e${suffix}"] } then {
	fail $testname
	verbose "output is [file_contents "dump.out"]" 2
	return
    }
    pass $testname
}

# We're testing bits in obj-elf -- don't run on anything else.
if { [is_elf_format] } then {
    set target_machine ""
    if {[istarget "mips*-*-*"]} then {
	set target_machine -mips
    }
    if {[istarget m32r*-*-*]} then {
	set target_machine -m32r
    }
    if {[istarget "msp430-*-*"]} then {
	set target_machine -msp430
    }
    if {[istarget "score-*-*"]} then {
	set target_machine -score
    }
    if {[istarget "tic6x-*-*"]} then {
	set target_machine -tic6x
    }
    if {[istarget "xtensa*-*-*"]} then {
	set target_machine -xtensa
    }
    if {[istarget "rx-*-*"]} then {
	set target_machine -rx
    }
    if {[istarget "arm*-*-*"]} {

	if { ([istarget "*-*-*eabi"]
	      || [istarget "*-*-linux-*"]
	      || [istarget "*-*-nacl*"]
	      || [istarget "*-*-symbianelf"])} then {
	    set target_machine -armeabi
	} else {
	    set target_machine -armelf
	}
    }

    # The MN10300 and Xtensa ports disable the assembler's call frame
    # optimization because it interfers with link-time relaxation of
    # function prologues.
    if {![istarget "mn10300-*-*"]
	&& ![istarget "xtensa*-*-*"]
	&& ![istarget "msp430*-*-*"]
	&& ![istarget "am3*-*-*"]} then {
      run_dump_test "ehopt0"
    }
    case $target_triplet in {
	{ m68k-*-* m68[03]??-*-* } {
	    run_dump_test "file" { { as "--defsym m68k=1" } }
	}
	{ mmix-*-* } {
	    run_dump_test "file" { { as "--defsym mmix=1" } }
	}
	{ xtensa*-*-* } {
	    run_dump_test "file" { { as "--rename-section file.s=file.c" } }
	}
	default {
	    run_dump_test "file"
	}
    }
    run_dump_test "group0a"
    run_dump_test "group0b"
    run_dump_test "group0c"
    run_dump_test "group1a"
    run_dump_test "group1b"
    case $target_triplet in {
	{ hppa64*-*-hpux* } { }
	default {
	    run_dump_test "groupautoa"
	}
    }
    case $target_triplet in {
	{ hppa64*-*-hpux* } { }
	{ xtensa*-*-* } { }
	default {
	    run_dump_test "groupautob"
	}
    }
    case $target_triplet in {
	{ alpha*-*-* } { }
	{ cr16*-*-* } { }
	{ crx*-*-* } { }
	{ h8300-*-* } { }
	{ hppa*-*-* } { }
	{ iq2000*-*-* } { }
	{ mips*-*-* } { }
	{ mn10200-*-* } { }
	{ mn10300-*-* } { }
	{ msp43*-*-* } { }
	{ *c54x*-*-* } { }
	{ rx-*-* } { }
	default {
	    # The next test can fail if the target does not convert fixups
	    # against ordinary symbols into relocations against section symbols.
	    # This is usually revealed by the error message:
	    #  symbol `sym' required but not present
    	setup_xfail "m681*-*-*" "m68hc*-*-*"
	    run_dump_test redef
	    run_dump_test equ-reloc
	}
    }
    run_dump_test "pseudo"
    run_dump_test "section0"
    run_dump_test "section1"
    if {! [istarget "h8300-*-*"]} then {
	# The h8300 port issues a warning message for
	# new sections created without atrributes.
	run_elf_list_test "section2" "$target_machine" "-al" "-s" ""
    }
    run_dump_test "section3"
    run_dump_test "section4"
    if {! [istarget "h8300-*-*"] && ! [istarget "rx-*-*"]} then {
	# The h8300 port issues a warning message for
	# new sections created without atrributes.
	# The RX port does not complain about changing the attributes of the
	# .data and .bss sections since it does not use those names.
	run_elf_list_test "section5" "" "-al" "-SW" "| grep \" \\\\.test\\\[0-9\\\]\""
    }
    run_dump_test "struct"
    if { ![istarget "alpha*-*-*"] } then {
	# The alpha port uses .set for state, e.g. nomacro.
	run_dump_test "symtab"
    }
    run_dump_test "symver"

    # No indirect functions on non-GNU targets.
    # The MSP port sets the ELF header's OSABI field to ELFOSABI_STANDALONE.
    # The non-eabi ARM ports sets it to ELFOSABI_ARM.
    # So for these targets we cannot include an IFUNC symbol type
    # in the symbol type test.
    if { [istarget "*-*-hpux*"]
	 || [istarget "msp*-*-*"]
	 || [istarget "arm*-*-*"]} then {
	# hppa64 has a non-standard common directive
	if { ![istarget "hppa64*-*-hpux*"] } then {
	    run_elf_list_test "type-noifunc" "" "" "-s" "| grep \"1 *\\\[FONTC\\\]\""
	}
    } else {
	run_dump_test ifunc-1
	run_elf_list_test "type" "" "" "-s" "| grep \"1 *\\\[FIONTCU\\\]\""
    }

    run_dump_test "section6"
    run_dump_test "section7"
    run_dump_test "section8"
    run_dump_test "section9"
    run_dump_test "dwarf2-1"
    run_dump_test "dwarf2-2"
    run_dump_test "dwarf2-3"
    run_dump_test "dwarf2-4"
    run_dump_test "bad-section-flag"
    run_dump_test "bad-size"
    run_dump_test "bad-group"

    run_dump_test "syms"
    
    run_dump_test "common1"
    run_dump_test "common2"

load_lib gas-dg.exp
dg-init
dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/err-*.s $srcdir/$subdir/warn-*.s]] "" ""
dg-finish
    
}
@


1.86
log
@Add copyright notices
@
text
@d1 1
a1 2
# Copyright 2012
# Free Software Foundation, Inc.
d64 3
d96 1
d142 1
@


1.85
log
@Add testcases for PR gas/14315

	PR gas/14315
	* gas/elf/common1.d: New file.
	* gas/elf/common1.l: Likewise.
	* gas/elf/common1.s: Likewise.
	* gas/elf/common2.d: Likewise.
	* gas/elf/common2.l: Likewise.
	* gas/elf/common2.s: Likewise.

	* gas/elf/elf.exp: Run common1 and common2.
@
text
@d1 17
@


1.84
log
@	* read.c (read_symbol_name): New function.  Reads a symbol names.
	Allows escape codes in names.
	(s_comm_internal): Use read_symbol_name.
	(s_globl, s_lsym, s_set, s_weakref): Likewise.
	* doc/as.texinfo: Document support for multibyte characters in
	symbol names.

	* gas/elf/syms.s: New test - checks the generation of multibyte
	symbol names.
	* gas/elf/syms.d: New file - expected readelf output.
	* gas/elf/elf.exp: Add syms.

	* readelf.c (print_symbol): Display multibyte characters in symbol
	names.
	(process_section_headers): Use print_symbol.

	* ld-ifunc/ifunc-13a-i386.s: Fix use of .global directive.
	* ld-ifunc/ifunc-15a-i385.s: Likewise.
@
text
@d189 3
@


1.83
log
@	* config/tc-m68hc11.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Tweak target flags to match other tools. (i.e. -m m68hc11).
	* doc/as.texinfo: Mention new options.
	* doc/c-m68hc11.texi: Document new options.
	* NEWS: Mention new support.

	* archures.c: Add bfd_arch_m9s12x and bfd_arch_m9s12xg.
	* config.bfd: Likewise.
	* cpu-m9s12x.c: New.
	* cpu-m9s12xg.c: New.
	* elf32-m68hc12.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Fix carry bug in IMM16 (IMM8 low/high) relocate.
	* Makefile.am (ALL_MACHINES): Add cpu-m9s12x and cpu-m9s12xg.
	(ALL_MACHINES_CFILES): Likewise.
	* reloc.c: Add S12X relocs.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* gas/m68hc11/insns9s12x.s: New
	* gas/m68hc11/insns9s12x.d: New
	* gas/m68hc11/hexprefix.s: New
	* gas/m68hc11/hexprefix.d: New
	* gas/m68hc11/9s12x-exg-sex-tfr.s: New
	* gas/m68hc11/9s12x-exg-sex-tfr.d: New
	* gas/m68hc11/insns9s12xg.s: New
	* gas/m68hc11/insns9s12xg.d: New
	* gas/m68hc11/9s12x-mov.s: New
	* gas/m68hc11/9s12x-mov.d: New
	* gas/m68hc11/m68hc11.exp: Updated
	* gas/m68hc11/*.d: Brought in line with changed objdump output.
	* gas/all/gas.exp: XFAIL all hc11/12 targets for redef2,3.
	* gas/elf/elf.exp: XFAIL all hc11/12 targets for redef.
	* gas/elf/dwarf2-1.d: Skip for hc11/12 targets.
	* gas/elf/dwarf2-2.d: Likewise.

	* ld-m68hc11/xgate-link.s: New.
	* ld-m68hc11/xgate-link.d: New.
	* ld-m68hc11/xgate-offset.s: New.
	* ld-m68hc11/xgate-offset.d: New.
	* ld-m68hc11/xgate1.s: New.
	* ld-m68hc11/xgate1.d: New.
	* ld-m68hc11/xgate2.s: New.
	* ld-m68hc11/m68hc11.exp: Updated.
	* ld-m68hc11/*.d: Brought in line with changed objdump output.
	* ld-gc/gc.exp: Update CFLAGS for m68hc11.
	* ld-plugin/plugin.exp: Likewise.
	* ld-srec/srec.exp: XFAIL for m68hc11 and m68hc12.

	* configure.in: Add S12X and XGATE co-processor support to m68hc11
	target.
	* disassemble.c: Likewise.
	* configure: Regenerate.
	* m68hc11-dis.c: Make objdump output more consistent, use hex
	instead of decimal and use 0x prefix for hex.
	* m68hc11-opc.c: Add S12X and XGATE opcodes.
	* dis-asm.h (print_insn_m9s12x): Prototype.
	(print_insn_m9s12xg): Prototype.

	* m68hc11.h (R_M68HC12_16B, R_M68HC12_PCREL_9, R_M68HC12_PCREL_10)
	R_M68HC12_HI8XG, R_M68HC12_LO8XG): New relocations.
	(E_M68HC11_XGATE_RAMOFFSET): Define.

	* m68hc11.h: Add XGate definitions.
	(struct m68hc11_opcode): Add xg_mask field.
@
text
@d187 2
@


1.82
log
@	* elf32-arm.c (elf32_arm_nacl_plt0_entry, elf32_arm_nacl_plt_entry):
	New variables.
	(struct elf32_arm_link_hash_table): New member `nacl_p'.
	(elf32_arm_link_hash_table_create): Initialize it.
	(elf32_arm_nacl_link_hash_table_create): New function.
	(arm_movw_immediate, arm_movt_immediate): New functions.
	(elf32_arm_populate_plt_entry): Test HTAB->nacl_p.
	(elf32_arm_finish_dynamic_sections): Likewise.
	(elf32_arm_output_plt_map_1): Likewise.
	(bfd_elf32_littlearm_nacl_vec, bfd_elf32_bigarm_nacl_vec):
	New backend vector stanza.
	(elf32_arm_nacl_modify_segment_map): New function.
	* config.bfd: Handle arm-*-nacl*, armeb-*-nacl*.
	* targets.c: Support bfd_elf32_{big,little}_nacl_vec.
	* configure.in: Likewise.
	(bfd_elf32_bigarm_nacl_vec): Add elf-nacl.lo here.
	(bfd_elf32_littlearm_nacl_vec): Likewise.
	(bfd_elf32_bigarm_vec, bfd_elf32_littlearm_vec): Likewise.
	(bfd_elf32_bigarm_symbian_vec): Likewise.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	(bfd_elf32_bigarm_vxworks_vec): Likewise.
	(bfd_elf32_littlearm_vxworks_vec): Likewise.
	* configure: Regenerated.

	* configure.tgt (arm-*-nacl*): Match it.
	* config/te-nacl.h (FPU_DEFAULT, EABI_DEFAULT): Define.
	(LOCAL_LABELS_DOLLAR): Define.
	* config/tc-arm.c (elf32_arm_target_format) [TE_NACL]:
	Use nacl format variants.

	* gas/elf/elf.exp (run_elf_list_test): Treat arm-*-nacl* targets
	as -armeabi.

	* gas/arm/any-idiv.d: Match *-*-nacl* targets too.
	* gas/arm/arch4t.d: Likewise.
	* gas/arm/arch4t-eabi.d: Likewise.
	* gas/arm/attr-any-armv4t.d: Likewise.
	* gas/arm/attr-any-thumbv6.d: Likewise.
	* gas/arm/attr-cpu-directive.d: Likewise.
	* gas/arm/attr-default.d: Likewise.
	* gas/arm/attr-march-all.d: Likewise.
	* gas/arm/attr-march-armv1.d: Likewise.
	* gas/arm/attr-march-armv2a.d: Likewise.
	* gas/arm/attr-march-armv2.d: Likewise.
	* gas/arm/attr-march-armv2s.d: Likewise.
	* gas/arm/attr-march-armv3.d: Likewise.
	* gas/arm/attr-march-armv3m.d: Likewise.
	* gas/arm/attr-march-armv4.d: Likewise.
	* gas/arm/attr-march-armv4t.d: Likewise.
	* gas/arm/attr-march-armv4txm.d: Likewise.
	* gas/arm/attr-march-armv4xm.d: Likewise.
	* gas/arm/attr-march-armv5.d: Likewise.
	* gas/arm/attr-march-armv5t.d: Likewise.
	* gas/arm/attr-march-armv5te.d: Likewise.
	* gas/arm/attr-march-armv5tej.d: Likewise.
	* gas/arm/attr-march-armv5texp.d: Likewise.
	* gas/arm/attr-march-armv5txm.d: Likewise.
	* gas/arm/attr-march-armv6.d: Likewise.
	* gas/arm/attr-march-armv6j.d: Likewise.
	* gas/arm/attr-march-armv6k.d: Likewise.
	* gas/arm/attr-march-armv6k+sec.d: Likewise.
	* gas/arm/attr-march-armv6kt2.d: Likewise.
	* gas/arm/attr-march-armv6-m.d: Likewise.
	* gas/arm/attr-march-armv6-m+os.d: Likewise.
	* gas/arm/attr-march-armv6s-m.d: Likewise.
	* gas/arm/attr-march-armv6t2.d: Likewise.
	* gas/arm/attr-march-armv6z.d: Likewise.
	* gas/arm/attr-march-armv6zk.d: Likewise.
	* gas/arm/attr-march-armv6zkt2.d: Likewise.
	* gas/arm/attr-march-armv6zt2.d: Likewise.
	* gas/arm/attr-march-armv7-a.d: Likewise.
	* gas/arm/attr-march-armv7a.d: Likewise.
	* gas/arm/attr-march-armv7-a+idiv.d: Likewise.
	* gas/arm/attr-march-armv7-a+mp.d: Likewise.
	* gas/arm/attr-march-armv7-a+sec.d: Likewise.
	* gas/arm/attr-march-armv7-a+sec+virt.d: Likewise.
	* gas/arm/attr-march-armv7-a+virt.d: Likewise.
	* gas/arm/attr-march-armv7.d: Likewise.
	* gas/arm/attr-march-armv7em.d: Likewise.
	* gas/arm/attr-march-armv7-m.d: Likewise.
	* gas/arm/attr-march-armv7m.d: Likewise.
	* gas/arm/attr-march-armv7-r.d: Likewise.
	* gas/arm/attr-march-armv7r.d: Likewise.
	* gas/arm/attr-march-armv7-r+mp.d: Likewise.
	* gas/arm/attr-march-iwmmxt2.d: Likewise.
	* gas/arm/attr-march-iwmmxt.d: Likewise.
	* gas/arm/attr-march-xscale.d: Likewise.
	* gas/arm/attr-mcpu.d: Likewise.
	* gas/arm/attr-mfpu-arm1020e.d: Likewise.
	* gas/arm/attr-mfpu-arm1020t.d: Likewise.
	* gas/arm/attr-mfpu-arm1136jf-s.d: Likewise.
	* gas/arm/attr-mfpu-arm1136jfs.d: Likewise.
	* gas/arm/attr-mfpu-arm7500fe.d: Likewise.
	* gas/arm/attr-mfpu-fpa10.d: Likewise.
	* gas/arm/attr-mfpu-fpa11.d: Likewise.
	* gas/arm/attr-mfpu-fpa.d: Likewise.
	* gas/arm/attr-mfpu-fpe2.d: Likewise.
	* gas/arm/attr-mfpu-fpe3.d: Likewise.
	* gas/arm/attr-mfpu-fpe.d: Likewise.
	* gas/arm/attr-mfpu-maverick.d: Likewise.
	* gas/arm/attr-mfpu-neon.d: Likewise.
	* gas/arm/attr-mfpu-neon-fp16.d: Likewise.
	* gas/arm/attr-mfpu-softfpa.d: Likewise.
	* gas/arm/attr-mfpu-softvfp.d: Likewise.
	* gas/arm/attr-mfpu-softvfp+vfp.d: Likewise.
	* gas/arm/attr-mfpu-vfp10.d: Likewise.
	* gas/arm/attr-mfpu-vfp10-r0.d: Likewise.
	* gas/arm/attr-mfpu-vfp3.d: Likewise.
	* gas/arm/attr-mfpu-vfp9.d: Likewise.
	* gas/arm/attr-mfpu-vfp.d: Likewise.
	* gas/arm/attr-mfpu-vfpv2.d: Likewise.
	* gas/arm/attr-mfpu-vfpv3-d16.d: Likewise.
	* gas/arm/attr-mfpu-vfpv3.d: Likewise.
	* gas/arm/attr-mfpu-vfpv4-d16.d: Likewise.
	* gas/arm/attr-mfpu-vfpv4.d: Likewise.
	* gas/arm/attr-mfpu-vfpxd.d: Likewise.
	* gas/arm/attr-names.d: Likewise.
	* gas/arm/attr-order.d: Likewise.
	* gas/arm/attr-override-cpu-directive.d: Likewise.
	* gas/arm/attr-override-mcpu.d: Likewise.
	* gas/arm/got_prel.d: Likewise.
	* gas/arm/mapdir.d: Likewise.
	* gas/arm/mapmisc.d: Likewise.
	* gas/arm/mapsecs.d: Likewise.
	* gas/arm/mapshort-eabi.d: Likewise.
	* gas/arm/mapshort-elf.d: Likewise.
	* gas/arm/mov-highregs-any.d: Likewise.
	* gas/arm/mov-lowregs-any.d: Likewise.
	* gas/arm/pr12198-1.d: Likewise.
	* gas/arm/pr12198-2.d: Likewise.
	* gas/arm/thumb.d: Likewise.
	* gas/arm/thumb-eabi.d: Likewise.
	* gas/arm/thumbrel.d: Likewise.

	* configure.tgt (arm*-*-nacl*, arm*b-*-nacl*): Handle them.
	* emulparams/armelf_nacl.sh: New file.
	* emulparams/armelfb_nacl.sh: New file.
	* Makefile.am (ALL_EMULATION_SOURCES): Add earmelf_nacl.c
	and earmelfb_nacl.c here.
	(earmelf_nacl.c, earmelfb_nacl.c): New targets.
	* Makefile.in: Regenerated.

	* ld-arm/arm-elf.exp (armelftests): Split out into ...
	(armelftests_common, armelftests_nonacl): ... these two.
	(armeabitests): Split out into ...
	(armeabitests_common, armeabitests_nonacl): ... these two.
	Omit _nonacl sets for arm*-*-nacl* targets.

	* ld-arm/farcall-mix.d: Don't match exact addresses, only symbolic ones.
	* ld-arm/farcall-mix2.d: Likewise.
	* ld-arm/farcall-group.d: Likewise.

	* ld-arm/tls-gdesc-got.d: Match variant file formats too.
	Accept some variation in exact addresses.

	* ld-arm/thumb2-b-interwork.d: Match variant file formats too.
	Fix regexps not to care about exact addresses where not relevant.

	* ld-arm/thumb2-bl-undefweak.d: Match any hex strings, not any
	strings of particular exact lengths.
	* ld-arm/thumb2-bl-undefweak1.d: Likewise.

	* ld-arm/arm-app.r: Match variant file formats too.
	* ld-arm/arm-app-abs32.r: Likewise.
	* ld-arm/arm-lib.d: Likewise.
	* ld-arm/arm-lib.r: Likewise.
	* ld-arm/arm-static-app.r: Likewise.
	* ld-arm/armv4-bx.d: Likewise.
	* ld-arm/data-only-map.d: Likewise.
	* ld-arm/group-relocs.d: Likewise.
	* ld-arm/jump19.d: Likewise.
	* ld-arm/reloc-boundaries.d: Likewise.
	* ld-arm/thumb1-bl.d: Likewise.
	* ld-arm/thumb2-bl.d: Likewise.
	* ld-arm/tls-app.d: Likewise.
	* ld-arm/tls-app.r: Likewise.
	* ld-arm/tls-gdierelax.d: Likewise.
	* ld-arm/tls-gdierelax2.d: Likewise.
	* ld-arm/tls-gdlerelax.d: Likewise.
	* ld-arm/tls-lib.d: Likewise.
	* ld-arm/tls-lib.r: Likewise.
	* ld-arm/tls-mixed.r: Likewise.
	* ld-arm/vfp11-fix-none.d: Likewise.
	* ld-arm/vfp11-fix-scalar.d: Likewise.
	* ld-arm/vfp11-fix-vector.d: Likewise.
	* ld-arm/arm-static-app.d: Likewise.
	Fix regexps not to care about exact number of leading spaces.
	* ld-arm/arm-app-abs32.d: Likewise.
	* ld-arm/fix-arm1176-off.d: Likewise.
	* ld-arm/fix-arm1176-on.d: Likewise.

	* ld-arm/arm-elf.exp: Treat nacl targets like eabi targets.
@
text
@d129 1
@


1.81
log
@	* gas/elf/bad-group.s: Add section attributes.
	* gas/elf/elf.exp (groupautoa, groupautob): Don't run for hppa64-hpux.
	(ifunc-1, type): Don't run for hpux.
	* gas/elf/type-noifunc.e: Accept ANSI_COM.
	* gas/elf/section7.s: Always have whitespace before directives.
	* gas/elf/warn-2.s: Likewise.
	* gas/i386/ifunc-3.s: Move .size directive.
@
text
@d64 1
@


1.80
log
@revert premature delta
@
text
@a97 1
    run_dump_test "groupautoa"
d99 7
d156 1
d161 5
a165 2
    if {   [istarget "msp*-*-*"]
	|| [istarget "arm*-*-*"]} then {
d167 1
d169 2
a170 2
    	    run_dump_test ifunc-1
	    run_elf_list_test "type" "" "" "-s" "| grep \"1 *\\\[FIONTCU\\\]\""
@


1.79
log
@	* gas/all/gas.exp (redef2): xfail m6811 and m6812.
	* gas/elf/elf.exp: Use is_elf_format.
	* gas/symver/symver.exp: Likewise.
	* gas/m68hc11/m68hc11.exp: Simplify target test.
	Add -m68hc11 to error tests that pass for hc12.
@
text
@d98 1
a99 6
	{ hppa64*-*-hpux* } { }
	default {
	    run_dump_test "groupautoa"
	}
    case $target_triplet in {
	{ hppa64*-*-hpux* } { }
d150 7
a156 2
    if { [istarget "hppa*-*-hpux*"] } then {
	# No indirect functions on non-GNU targets.
a157 8
	# The MSP port sets the ELF header's OSABI field to ELFOSABI_STANDALONE.
	# The non-eabi ARM ports sets it to ELFOSABI_ARM.
	# So for these targets we cannot include an IFUNC symbol type
	# in the symbol type test.
	if { [istarget "msp*-*-*"]
	     || [istarget "arm*-*-*"]} then {
	    run_elf_list_test "type-noifunc" "" "" "-s" "| grep \"1 *\\\[FONTC\\\]\""
	} else {
a159 1
	}
@


1.78
log
@Add a testcase for group error.

2011-08-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/bad-group.d: New.
	* gas/elf/bad-group.err: Likewise.
	* gas/elf/bad-group.s: Likewise.

	* gas/elf/elf.exp: Run bad-group.
@
text
@d40 1
a40 13
if { ([istarget "*-*-*elf*"]
      || [istarget "*-*-linux*"]
      || [istarget "*-*-gnu*"]
      || [istarget "m6811-*"]
      || [istarget "m6812-*"]
      || [istarget "sparc*-*-solaris*"]
      || [istarget "mips*-*-irix6*"]
      || [istarget "arm*-*-eabi"])
     && ![istarget *-*-linux*aout*]
     && ![istarget *-*-linux*coff*]
     && ![istarget *-*-linux*oldld*]
     && ![istarget sh64*-*-linux*]
} then {
a97 1
    run_dump_test "groupautoa"
d99 6
d155 9
a163 6
    # The MSP port sets the ELF header's OSABI field to ELFOSABI_STANDALONE.
    # The non-eabi ARM ports sets it to ELFOSABI_ARM.
    # So for these targets we cannot include an IFUNC symbol type
    # in the symbol type test.
    if {   [istarget "msp*-*-*"]
	|| [istarget "arm*-*-*"]} then {
d165 1
a165 1
    } else {
d168 1
@


1.77
log
@	* dwarf2dbg.c (out_debug_line): Ignore non-normal segments, with a
	warning.
	* doc/as.texinfo (Offset): Document .offset directive.

	testsuite/
	* gas/elf/warn-2.s: New.
@
text
@d184 1
@


1.76
log
@bfd:
	* config.bfd (thumb-*-oabi): Don't handle in list of obsolete
	targets.
	(strongarm*, thumb*, xscale*): Remove architectures.
	(strongarm-*-kaos*, thumb-*-coff, thumb-*-elf, thumb-epoc-pe*,
	thumb-*-pe*, strongarm-*-elf, strongarm-*-coff, xscale-*-elf,
	xscale-*-coff): Remove targets.

binutils:
	* configure.in (thumb-*-pe*): Remove.
	* configure: Regenerate.

binutils/testsuite:
	* binutils-all/objcopy.exp (*arm*-*-coff): Change to arm*-*-coff.
	(xscale-*-coff, thumb*-*-coff, thumb*-*-pe): Don't handle.

gas:
	* configure.tgt (strongarm*be, strongarm*b, strongarm*,
	xscale*be|xscale*b, xscale*): Remove architectures.
	(thumb-*-coff, thumb-*-rtems*, thumb-*-elf, thumb-epoc-pe,
	thumb-*-pe, xscale-*-coff, xscale-*-elf): Remove targets.

gas/testsuite:
	* gas/all/gas.exp (*arm*-*-coff): Change to arm*-*-coff.
	(thumb*-*-coff, thumb*-*-pe*): Don;t handle.
	* gas/arm/arm.exp (*arm*-*-*): Change to arm*-*-*.
	(*xscale*-*-*): Don't handle.
	* gas/cfi/cfi.exp (xscale*-*): Don't handle.
	* gas/elf/elf.exp (*arm*-*-*): Change to arm*-*-*.
	(xscale*-*-*): Don't handle.

ld:
	* configure.tgt (thumb-*-linux-* | thumb-*-uclinux*,
	strongarm-*-coff, strongarm-*-elf, strongarm-*-kaos*,
	thumb-*-coff, thumb-*-elf, thumb-epoc-pe, thumb-*-pe,
	xscale-*-coff, xscale-*-elf): Remove targets.

ld/testsuite:
	* ld-selective/selective.exp (xscale-*-*): Don't handle.
	* ld-srec/srec.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
	(*arm*-*-*): Change to arm*-*-*.
	(strongarm*-*-coff, xscale*-*-coff, thumb-*-coff*, thumb-*-pe*,
	thumb-*-elf*, strongarm*-*-*, thumb-*-*): Remove xfails.
	* ld-undefined/undefined.exp (thumb*-*-pe*, thumb*-*-pe*): Remove
	commented-out xfails.
	(thumb-elf): Remove reference in comment.
	* lib/ld-lib.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
@
text
@d184 6
@


1.75
log
@Add a testcase for PR gas/12519.

2011-02-25  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/12519
	* gas/elf/bad-size.d: New.
	* gas/elf/bad-size.err: Likewise.
	* gas/elf/bad-size.s: Likewise.

	* gas/elf/elf.exp: Run bad-size.
@
text
@d72 1
a72 2
    if { ([istarget "*arm*-*-*"]
	  || [istarget "xscale*-*-*"]) } {
d167 1
a167 2
	|| [istarget "arm*-*-*"]
	|| [istarget "xscale*-*-*"]} then {
@


1.74
log
@	* write.c (write_contents): Include output file name and bfd error
	value when reporting the inability to write to the output file.
	* config/tc-rx.c (rx_handle_align): Do not insert NOPs into align
	frag that has a non-zero fill value.

	* gas/all/align.d: Skip for the RX.
	* gas/elf/group1a.d: Likewise.
	* gas/elf/groupautoa.d: Likewise.
	* gas/elf/elf.exp: Do not run section5 test for the RX port.
	* gas/elf/section4.d: Likewise.
	* gas/elf/section7.d: Likewise.
	* gas/macros/semi.s: Fill with a non-zero pattern.
	* gas/macros/semi.d: Expect non-zero fill value.
	* gas/rx/bcnd.d: Update expected disassembly.
	* gas/rx/bra.d: Likewise.
	* gas/rx/macros.inc: Add reg1 macro.
	* gas/rx/max.sm: Use reg1 macro to avoid generating illegal NOP
	instruction.
	* gas/rx/mov.sm: Likewise.
	* gas/rx/max.d: Update expected disassembly.
	* gas/rx/mov.d: Likewise.
	* gas/rx/rx-asm-good.s: Use Renesas section names.
	* gas/rx/rx-asm-good.d: Update expected disassembly.
@
text
@d185 1
@


1.73
log
@Don't compress empty debug sections.

gas/

2011-01-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/12409
	* write.c (compress_debug): Return if section size is 0.

gas/testsuite/

2011-01-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/12409
	* gas/elf/dwarf2-4.d: New.
	* gas/elf/dwarf2-4.s: Likewise.
@
text
@d149 1
a149 1
    if {! [istarget "h8300-*-*"]} then {
d152 2
@


1.72
log
@Mark .gnu.lto_* sections with SHF_EXCLUDE.

bfd/

2010-12-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf.c (special_sections_g): Add ".gnu.lto_".

gas/testsuite/

2010-12-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/elf.exp: Run section9.

	* gas/elf/section9.d: New.
	* gas/elf/section9.s: Likewise.
@
text
@d181 1
@


1.71
log
@binutils/testsuite/
	* lib/binutils-common.exp (regexp_diff): New procedure.
	* lib/utils-lib.exp (regexp_diff): Delete.

gas/testsuite/
	* lib/gas-defs.exp (regexp_diff): Delete.
	(run_dump_test): Remove final "" argument in call to regexp_diff.
	(run_list_test): Likewise.
	(run_list_test_stdin): Likewise.
	* gas/all/gas.exp (test_cond): Likewise.
	* gas/elf/elf.exp (run_elf_list_test): Likewise.
	* gas/m68k/all.exp: Likewise.
	* gas/mep/complex-relocs.exp (regexp_test): Likewise.
	* gas/mt/relocs.exp (regexp_test): Likewise.
	* gas/symver/symver.exp (run_error_test): Likewise.

ld/testsuite/
	* lib/ld-lib.exp (regexp_diff, simple_diff): Delete.
@
text
@d177 1
@


1.70
log
@Improve binutils testsuite coverage for GNU/Hurd.

binutils/testsuite/

	* lib/utils-lib.exp (is_elf_format): Consider for *-*-gnu*, too.
	* binutils-all/elfedit-2.d (target): Likewise.
	* binutils-all/elfedit-3.d (target): Likewise.
	* binutils-all/i386/i386.exp: Likewise.
	* binutils-all/objcopy.exp: Likewise.
	* binutils-all/strip-3.d (target): Likewise.

gas/testsuite/

	* lib/gas-defs.exp (is_elf_format): Consider for *-*-gnu*, too.
	* gas/elf/elf.exp: Likewise.
	* gas/symver/symver.exp: Likewise.

ld/

	* configure.host: Add stanza for *-*-gnu*.

ld/testsuite/

	* lib/ld-lib.exp (is_elf_format): Consider for *-*-gnu*, too.
	* ld-discard/discard.exp: Likewise.
	* ld-elf/binutils.exp: Likewise.
	* ld-elf/commonpage1.d (target): Likewise.
	* ld-elf/compress1c.d (target): Likewise.
	* ld-elf/discard1.d (target): Likewise.
	* ld-elf/discard2.d (target): Likewise.
	* ld-elf/discard3.d (target): Likewise.
	* ld-elf/dynsym1.d (target): Likewise.
	* ld-elf/eh6.d (target): Likewise.
	* ld-elf/elf.exp: Likewise.
	(array_tests): Move -static tests to...
	(array_tests_static): ... here, and handle it accordingly.
	* ld-elf/hash.d (target): Likewise.
	* ld-elf/header.d (target): Likewise.
	* ld-elf/loadaddr1.d (target): Likewise.
	* ld-elf/loadaddr2.d (target): Likewise.
	* ld-elf/loadaddr3a.d (target): Likewise.
	* ld-elf/loadaddr3b.d (target): Likewise.
	* ld-elf/local1.d (target): Likewise.
	* ld-elf/maxpage1.d (target): Likewise.
	* ld-elf/maxpage2.d (target): Likewise.
	* ld-elf/maxpage3a.d (target): Likewise.
	* ld-elf/multibss1.d (target): Likewise.
	* ld-elf/noload-2.d (target): Likewise.
	* ld-elf/seg.d (target): Likewise.
	* ld-elf/textaddr1.d (target): Likewise.
	* ld-elf/textaddr2.d (target): Likewise.
	* ld-elf/textaddr3.d (target): Likewise.
	* ld-elf/textaddr4.d (target): Likewise.
	* ld-elf/textaddr5.d (target): Likewise.
	* ld-elf/textaddr6.d (target): Likewise.
	* ld-elf/textaddr7.d (target): Likewise.
	* ld-elf/tls_common.exp: Likewise.
	* ld-elf/unknown2.d (target): Likewise.
	* ld-elfvers/vers.exp: Likewise.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfweak/elfweak.exp: Likewise.
	(setup_xfail_gnu_hurd): New function.  Use it where appropriate.
	* ld-gc/abi-note.d (target): Likewise.
	* ld-gc/gc.exp: Likewise.
	* ld-gc/pr11218.d (target): Likewise.
	* ld-gc/start.d (target): Likewise.
	* ld-i386/i386.exp: Likewise.
	* ld-ifunc/binutils.exp: Likewise.
	* ld-ifunc/ifunc.exp: Likewise.
	* ld-linkonce/linkonce.exp: Likewise.
	* ld-linkonce/zeroehl32.d (target): Likewise.
	* ld-pie/pie.exp: Likewise.
	* ld-scripts/phdrs2.exp: Likewise.
	* ld-scripts/rgn-at5.d (target): Likewise.
	* ld-shared/shared.exp: Likewise.
	* ld-undefined/entry-3.d (target): Likewise.
	* ld-undefined/entry-4.d (target): Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
@
text
@d12 1
a12 1
	  && [regexp_diff "dump.out" "${file}.l" ""] } then {
d31 1
a31 1
    if { [regexp_diff "dump.out" "${file}.e${suffix}" ""] } then {
@


1.69
log
@	* gas/elf/elf.exp (groupautob): Don't run on xtensa.
	* gas/elf/groupautoa.d: Change test name.
	* gas/elf/groupautob.d: Change test name.
@
text
@d42 1
@


1.69.2.1
log
@apply mainline testsuite fixes and tweaks
@
text
@d12 1
a12 1
	  && [regexp_diff "dump.out" "${file}.l"] } then {
d31 1
a31 1
    if { [regexp_diff "dump.out" "${file}.e${suffix}"] } then {
a41 1
      || [istarget "*-*-gnu*"]
@


1.69.2.2
log
@	PR ld/12696
	PR ld/12672
	PR ld/12507
	PR ld/12365
	PR 10549
Backport fixes for these PRs.
@
text
@a176 1
    run_dump_test "section9"
@


1.68
log
@2010-10-23  Mark Mitchell  <mark@@codesourcery.com>

	* config/obj-elf.c (elf_adjust_symtab): New.  Move group section
	processing here from elf_frob_file.  Ensure that group signature
	symbols have the name of the group.
	(elf_frob_file): Move group section processing to
	elf_adjust_symtab.
	* config/obj-elf.h (elf_adjust_symtab): Declare.
	(obj_adjust_symtab): Define.
	* config/tc-arm.c (arm_adjust_symtab): Call elf_adjust_symtab.

2010-10-23  Mark Mitchell  <mark@@codesourcery.com>

	* gas/elf/elf.exp: Add group0c test.
	* gas/elf/group0c.d: New.
	* gas/elf/group0a.d: Expect ".group" for the name of group
	sections.
	* gas/elf/group0b.d: Likewise.
	* gas/elf/group1a.d: Likewise.
	* gas/elf/group1b.d: Likewise.
	* gas/elf/groupautoa.d: Likewise.
	* gas/elf/groupautob.d: Likewise.
	* gas/elf/section4.d: Likewise.
	* gas/ia64/group-1.d: Likewise.  Adjust hard-coded constants.

2010-10-22  Mark Mitchell  <mark@@codesourcery.com>

	* binutils-all/group-5.d: Expect ".group" for the name of group
	sections.
	* binutils-all/strip-2.d: Likewise.

2010-10-23  Mark Mitchell  <mark@@codesourcery.com>

	* ld-elf/group10.d: Expect ".group" for the name of group
	sections.
	* ld-elf/group2.d: Likewise.
	* ld-elf/group7.d: Likewise.
@
text
@d111 6
a116 1
    run_dump_test "groupautob"
@


1.67
log
@	* gas/elf/elf.exp: Disable symtab test for alpha.
@
text
@d107 1
@


1.66
log
@	PR gas/12011
	* config/obj-elf.c (obj_elf_parse_section_letters): Correct test
	for error return from md_elf_section_letter.
	* config/tc-alpha.c (alpha_elf_section_letter): Correct error message.
	* config/tc-i386.c (x86_64_section_letter): Likewise.
	* config/tc-ia64.c (ia64_elf_section_letter): Likewise.
	* config/tc-mep.c (mep_elf_section_letter): Likewise.
	* gas/elf/bad-section-flag.d, * gas/elf/bad-section-flag.err,
	* gas/elf/bad-section-flag.s: New test.
	* gas/elf/elf.exp: Run it.
@
text
@d148 4
a151 1
    run_dump_test "symtab"
@


1.65
log
@Add "?" pseudo-flag to ELF .section/.pushsection directives.
@
text
@d170 1
@


1.64
log
@	* gas/all/octa.s, * gas/all/octa.d: New test.
	* gas/all/gas.exp: Run octa.
	* gas/elf/data-1.s, * gas/elf/data-1.d: Delete.
	* gas/elf/elf.exp: Don't run data-1.
@
text
@d40 1
a40 1
if { ([istarget "*-*-*elf*"]		
d73 1
a73 1
	
d88 1
a88 1
	&& ![istarget "am3*-*-*"]} then {    
d105 6
a110 4
    run_dump_test "group0a" 
    run_dump_test "group0b" 
    run_dump_test "group1a" 
    run_dump_test "group1b" 
d133 2
a134 2
    run_dump_test "section0" 
    run_dump_test "section1" 
d140 1
a140 1
    run_dump_test "section3" 
d147 1
a147 1
    run_dump_test "struct" 
d164 6
a169 6
    run_dump_test "section6" 
    run_dump_test "section7" 
    run_dump_test "section8" 
    run_dump_test "dwarf2-1" 
    run_dump_test "dwarf2-2" 
    run_dump_test "dwarf2-3" 
@


1.63
log
@Run data-1 only for i*86, x86_64 and ia64.

2010-08-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/elf.exp: Run data-1 only for i*86, x86_64 and ia64.
@
text
@a129 6
    if {[istarget "i*86-*-*"]
	||  [istarget "x86_64-*-*"]
	|| [istarget "ia64-*-*"]} then {
	# This is a little endian test. 
	run_dump_test "data-1"
    }
@


1.62
log
@Add a testcase for PR gas/11867.

2010-08-02  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11867
	* gas/elf/data-1.d: New.
	* gas/elf/data-1.s: Likewise.

	* elf/elf.exp: Run data-1.
@
text
@d130 6
a135 1
    run_dump_test "data-1"
@


1.61
log
@2010-08-02  Tristan Gingold  <gingold@@adacore.com>

	* lib/gas-defs.exp (get_standard_section_names): New function.
	(run_dump_tests): Document the new behavior for objdump,
	document to new section-subst option.  Automatically perform
	substitutions for objdump.
	(objdump_finish): Add REF_SUBST argument.
	(run_list_test): Adjust call of regexp_diff.
	(run_list_test_stdin): Ditto.
	* gas/all/gas.exp (test_cond): Adjust call of regexp_diff.
	* gas/symver/symver.exp (run_error_test): Ditto.
	* gas/mt/relocs.exp (regexp_test): Ditto.
	* gas/mep/complex-relocs.exp (regexp_test): Ditto.
	* gas/m68k/all.exp: Ditto.
	* gas/elf/elf.exp (run_elf_list_test): Ditto.
	* gas/rx/rx-asm-good.d: Set section-subst to no.
@
text
@d130 1
@


1.60
log
@	* config/obj-elf.c (get_sym_from_input_line_and_check): New
	function to catch missing pseudo-op arguments.
	(obj_elf_local): Call new function.
	(obj_elf_weak): Likewise.
	(obj_elf_visibility): Likewise.
	(obj_elf_vtable_entry): Likewise.
	(obj_elf_type): Likewise.

	testsuite/
	* gas/elf/pseudo.s: New.
	* gas/elf/pseudo.l: New.
	* gas/elf/pseudo.d: New.
	* gas/elf/elf.exp: Run the new test.
@
text
@d12 1
a12 1
	  && [regexp_diff "dump.out" "${file}.l"] } then {
d31 1
a31 1
    if { [regexp_diff "dump.out" "${file}.e${suffix}"] } then {
@


1.59
log
@Don't generate .debug_line section if it isn't empty.

binutils/testsuite/

2010-07-05  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10531
	PR gas/11789
	* binutils-all/objdump.W: Remove bogus line debug info.

gas/

2010-07-05  Jim Wilson  <wilson@@codesourcery.com>

	PR gas/10531
	PR gas/11789
	* dwarf2dbg.c (dwarf2_finish): Don't generate .debug_line section
	if it isn't empty.

gas/testsuite/

2010-07-05  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10531
	PR gas/11789
	* gas/i386/dw2-compress-1.d: Remove bogus line debug info.

	* gas/elf/dwarf2-1.d: New.
	* gas/elf/dwarf2-1.s: Likewise.
	* gas/elf/dwarf2-2.d: Likewise.
	* gas/elf/dwarf2-2.s: Likewise.
	* gas/elf/dwarf2-3.d: Likewise.
	* gas/elf/dwarf2-3.s: Likewise.
	* gas/i386/debug1.d: Likewise.
	* gas/i386/debug1.s: Likewise.

	* gas/elf/elf.exp: Run dwarf2-1, dwarf2-2 and dwarf2-3.

	* gas/i386/i386.exp: Run debug1 for both 32bit and 64bit.
@
text
@d130 1
@


1.58
log
@bfd:
	* elf-bfd.h (LEAST_KNOWN_OBJ_ATTRIBUTE): Decrease to 2.
	* elf32-tic6x.c (elf32_tic6x_obj_attrs_arg_type,
	elf32_tic6x_merge_arch_attributes, elf32_tic6x_merge_attributes,
	elf32_tic6x_merge_private_bfd_data): New.
	(bfd_elf32_bfd_merge_private_bfd_data,
	elf_backend_obj_attrs_arg_type, elf_backend_obj_attrs_section,
	elf_backend_obj_attrs_section_type, elf_backend_obj_attrs_vendor):
	Define.
	* elf32-tic6x.h (elf32_tic6x_merge_arch_attributes): Declare.

binutils:
	* readelf.c (display_tic6x_attribute, process_tic6x_specific):
	New.
	(process_arch_specific): Call process_tic6x_specific for
	EM_TI_C6000.

gas:
	* config/tc-tic6x.c: Include elf/tic6x.h.
	(tic6x_arch_attribute, tic6x_seen_insns): New.
	(tic6x_arch_table, tic6x_arches): Add attribute values.
	(tic6x_use_arch): Handle attribute settings.
	(tic6x_attributes_set_explicitly, s_tic6x_c6xabi_attribute,
	tic6x_attribute_table, tic6x_attributes,
	tic6x_convert_symbolic_attribute): New.
	(md_pseudo_table): Add c6xabi_attribute.
	(md_assemble): Set tic6x_seen_insns and tic6x_arch_attribute.
	(tic6x_set_attribute_int, tic6x_set_attributes): New.
	(tic6x_end): Call tic6x_set_attributes.
	* config/tc-tic6x.h (CONVERT_SYMBOLIC_ATTRIBUTE): Define.
	(tic6x_convert_symbolic_attribute): Declare.

gas/testsuite:
	* gas/elf/elf.exp: Set target_machine for tic6x-*-*.
	* gas/elf/section2.e-tic6x, gas/tic6x/attr-arch-directive-1.d,
	gas/tic6x/attr-arch-directive-1.s,
	gas/tic6x/attr-arch-directive-2.d,
	gas/tic6x/attr-arch-directive-2.s,
	gas/tic6x/attr-arch-directive-3.d,
	gas/tic6x/attr-arch-directive-3.s,
	gas/tic6x/attr-arch-directive-4.d,
	gas/tic6x/attr-arch-directive-4.s,
	gas/tic6x/attr-arch-directive-5.d,
	gas/tic6x/attr-arch-directive-5.s,
	gas/tic6x/attr-arch-opts-c62x.d, gas/tic6x/attr-arch-opts-c64x+.d,
	gas/tic6x/attr-arch-opts-c64x.d, gas/tic6x/attr-arch-opts-c674x.d,
	gas/tic6x/attr-arch-opts-c67x+.d, gas/tic6x/attr-arch-opts-c67x.d,
	gas/tic6x/attr-arch-opts-none-1.d,
	gas/tic6x/attr-arch-opts-none-2.d,
	gas/tic6x/attr-arch-opts-override-1.d,
	gas/tic6x/attr-arch-opts-override-2.d, gas/tic6x/empty.s: New.

include/elf:
	* tic6x-attrs.h: New.
	* tic6x.h: Include elf/tic6x-attrs.h for attribute table.
	(C6XABI_Tag_CPU_arch_none, C6XABI_Tag_CPU_arch_C62X,
	C6XABI_Tag_CPU_arch_C67X, C6XABI_Tag_CPU_arch_C67XP,
	C6XABI_Tag_CPU_arch_C64X, C6XABI_Tag_CPU_arch_C64XP,
	C6XABI_Tag_CPU_arch_C674X): Define.

ld:
	* emulparams/elf32_tic6x_le.sh (ATTRS_SECTIONS): Define.

ld/testsuite:
	* ld-elf/orphan3.d: Allow section names starting '_'.
	* ld-tic6x/attr-arch-c62x-c62x.d, ld-tic6x/attr-arch-c62x-c64x+.d,
	ld-tic6x/attr-arch-c62x-c64x.d, ld-tic6x/attr-arch-c62x-c674x.d,
	ld-tic6x/attr-arch-c62x-c67x+.d, ld-tic6x/attr-arch-c62x-c67x.d,
	ld-tic6x/attr-arch-c62x.s, ld-tic6x/attr-arch-c64x+-c62x.d,
	ld-tic6x/attr-arch-c64x+-c64x+.d, ld-tic6x/attr-arch-c64x+-c64x.d,
	ld-tic6x/attr-arch-c64x+-c674x.d,
	ld-tic6x/attr-arch-c64x+-c67x+.d, ld-tic6x/attr-arch-c64x+-c67x.d,
	ld-tic6x/attr-arch-c64x+.s, ld-tic6x/attr-arch-c64x-c62x.d,
	ld-tic6x/attr-arch-c64x-c64x+.d, ld-tic6x/attr-arch-c64x-c64x.d,
	ld-tic6x/attr-arch-c64x-c674x.d, ld-tic6x/attr-arch-c64x-c67x+.d,
	ld-tic6x/attr-arch-c64x-c67x.d, ld-tic6x/attr-arch-c64x.s,
	ld-tic6x/attr-arch-c674x-c62x.d, ld-tic6x/attr-arch-c674x-c64x+.d,
	ld-tic6x/attr-arch-c674x-c64x.d, ld-tic6x/attr-arch-c674x-c674x.d,
	ld-tic6x/attr-arch-c674x-c67x+.d, ld-tic6x/attr-arch-c674x-c67x.d,
	ld-tic6x/attr-arch-c674x.s, ld-tic6x/attr-arch-c67x+-c62x.d,
	ld-tic6x/attr-arch-c67x+-c64x+.d, ld-tic6x/attr-arch-c67x+-c64x.d,
	ld-tic6x/attr-arch-c67x+-c674x.d,
	ld-tic6x/attr-arch-c67x+-c67x+.d, ld-tic6x/attr-arch-c67x+-c67x.d,
	ld-tic6x/attr-arch-c67x+.s, ld-tic6x/attr-arch-c67x-c62x.d,
	ld-tic6x/attr-arch-c67x-c64x+.d, ld-tic6x/attr-arch-c67x-c64x.d,
	ld-tic6x/attr-arch-c67x-c674x.d, ld-tic6x/attr-arch-c67x-c67x+.d,
	ld-tic6x/attr-arch-c67x-c67x.d, ld-tic6x/attr-arch-c67x.s: New.
@
text
@d164 3
@


1.57
log
@Implement generic SHF_EXCLUDE.

bfd/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* elf.c (_bfd_elf_make_section_from_shdr): Handle SHF_EXCLUDE
	(elf_fake_sections): Likewise.

	* elf32-i370.c (i370_elf_section_from_shdr): Don't handle
	SHF_EXCLUDE here.
	* elf32-ppc.c (ppc_elf_fake_sections): Likewise.

binutils/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* readelf.c (get_elf_section_flags): Treat SHF_EXCLUDE as a
	generic flag.

binutils/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* binutils-all/objcopy.exp: Run exclude-1a and exclude-1b for
	ELF targets.

	* binutils-all/exclude-1.s: New.
	* binutils-all/exclude-1a.d: Likewise.
	* binutils-all/exclude-1b.d: Likewise.

gas/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* obj-elf.c (obj_elf_change_section): Handle SHF_EXCLUDE.
	(obj_elf_parse_section_letters): Likewise.
	(obj_elf_section_word): Likewise.

	* config/tc-ppc.c (ppc_section_letter): Removed.
	(ppc_section_word): Likewise.
	* config/tc-ppc.h (ppc_section_letter): Likewise.
	(ppc_section_word): Likewise.
	(md_elf_section_letter): Likewise.
	(md_elf_section_word): Likewise.

	* doc/as.texinfo: Document `e' and `#exclude'.

gas/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* gas/elf/elf.exp: Run section8.

	* gas/elf/section8.d: New.
	* gas/elf/section8.s: Likewise.

include/elf/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* common.h (SHF_EXCLUDE): New.

	* i370.h (SHF_EXCLUDE): Removed.
	* or32.h (SHF_EXCLUDE): Likewise.
	* ppc.h (SHF_EXCLUDE): Likewise.
	* sparc.h (SHF_EXCLUDE): Likewise.

ld/testsuite/

2010-05-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11600
	* ld-elf/exclude3.s: New.
	* ld-elf/exclude3a.d: Likewise.
	* ld-elf/exclude3b.d: Likewise.
	* ld-elf/exclude3c.d: Likewise.
@
text
@d62 3
@


1.56
log
@        * config/tc-h8300.c (h8300_elf_section): New function - issue a
        warning message if a new section is created without setting any
        attributes for it.
        (md_pseudo_table): Intercept section creation pseudos.
        (md_pcrel_from): Replace abort with an error message.
        * config/obj-elf.c (obj_elf_section_name): Export this function.
        * config/obj-elf.h (obj_elf_section_name): Prototype.

        * gas/elf/section0.d: Skip this test for the h8300.
        * gas/elf/section1.d: Likewise.
        * gas/elf/section6.d: Likewise.
        * gas/elf/elf.exp: Skip section2 and section5 tests when the
        target is the h8300.

        * ld-scrips/sort.exp: Skip these tests when the target is the
        h8300.
@
text
@d160 1
@


1.55
log
@bfd
        * Makefile.am (ALL_MACHINES): Add cpu-rx.lo.
        (ALL_MACHINES_CFILES): Add cpu-rx.c.
        (BFD32_BACKENDS): Add elf32-rx.lo.
        (BFD32_BACKENDS_CFILES): Add elf32-rx.c.
        * archures.c (bfd_architecture): Add bfd_arch_rx and bfd_mach_rx.
        Export bfd_rx_arch.
        (bfd_archures_list): Add bfd_rx_arch.
        * config.bfd: Add entry for rx-*-elf.
        * configure.in: Add entries for bfd_elf32_rx_le_vec and
        bfd_elf32_rx_be_vec.
        * reloc.c: Add RX relocations.
        * targets.c: Add RX target vectors.
        * Makefile.in: Regenerate.
        * bfd-in2.h: Regenerate.
        * configure: Regenerate.
        * libbfd.h: Regenerate.
        * cpu-rx.c: New file.
        * elf32-rx.c: New file.

binutils
        * readelf.c: Add support for RX target.
        * MAINTAINERS: Add DJ and NickC as maintainers for RX.

gas
        * Makefile.am: Add RX target.
        * configure.in: Likewise.
        * configure.tgt: Likewise.
        * read.c (do_repeat_with_expander): New function.
        * read.h: Provide a prototype for do_repeat_with_expander.
        * doc/Makefile.am: Add RX target documentation.
        * doc/all.texi: Likewise.
        * doc/as.texinfo: Likewise.
        * Makefile.in: Regenerate.
        * NEWS: Mention support for RX architecture.
        * configure: Regenerate.
        * doc/Makefile.in: Regenerate.
        * config/rx-defs.h: New file.
        * config/rx-parse.y: New file.
        * config/tc-rx.h: New file.
        * config/tc-rx.c: New file.
        * doc/c-rx.texi: New file.

gas/testsuite
        * gas/rx: New directory.
        * gas/rx/*: New set of test cases.
        * gas/elf/section2.e-rx: New expected output file.
        * gas/all/gas.exp: Add support for RX target.
        * gas/elf/elf.exp: Likewise.
        * gas/lns/lns.exp: Likewise.
        * gas/macros/macros.exp: Likewise.

include
        * dis-asm.h: Add prototype for print_insn_rx.

include/elf
        * rx.h: New file.

include/opcode
        * rx.h: New file.

ld
        * Makefile.am: Add rules to build RX emulation.
        * configure.tgt: Likewise.
        * NEWS: Mention support for RX architecture.
        * Makefile.in: Regenerate.
        * emulparams/elf32rx.sh: New file.
        * emultempl/rxelf.em: New file.

opcodes
        * Makefile.am: Add RX files.
        * configure.in: Add support for RX target.
        * disassemble.c: Likewise.
        * Makefile.in: Regenerate.
        * configure: Regenerate.
        * opc2c.c: New file.
        * rx-decode.c: New file.
        * rx-decode.opc: New file.
        * rx-dis.c: New file.
@
text
@d129 5
a133 1
    run_elf_list_test "section2" "$target_machine" "-al" "-s" ""
d136 5
a140 1
    run_elf_list_test "section5" "" "-al" "-SW" "| grep \" \\\\.test\\\[0-9\\\]\""
@


1.54
log
@Tolerate some whitespace differences in readelf output.
@
text
@d65 3
d117 1
@


1.53
log
@gas/
2009-07-27  Jan Beulich  <jbeulich@@novell.com>

	* obj-elf.c (elf_file_symbol): Replace symbol name set up by
	symbol_new() with the passed in, unmodified one.

gas/testsuite/
2009-07-27  Jan Beulich  <jbeulich@@novell.com>

	* gas/elf/file.[ds]: New.
	* gas/elf/elf.exp: Run new test.
@
text
@d140 1
a140 1
	    run_elf_list_test "type-noifunc" "" "" "-s" "| grep \"1 \\\[FONTC\\\]\""
d143 1
a143 1
	    run_elf_list_test "type" "" "" "-s" "| grep \"1 \\\[FIONTCU\\\]\""
@


1.52
log
@Commit missing part of previous delta to add GNU_UNIQUE_FUNCTION support.
@
text
@d85 14
@


1.51
log
@gas/

2009-05-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* symbols.c (COPIED_SYMFLAGS): Add BSF_GNU_INDIRECT_FUNCTION.

gas/testsuite/gas/

2009-05-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/ifunc-1.d: New.
	* gas/elf/ifunc-1.s: Likewise.

	* gas/elf/elf.exp: Run ifunc-1.
@
text
@d129 1
a129 1
	    run_elf_list_test "type" "" "" "-s" "| grep \"1 \\\[FIONTC\\\]\""
@


1.50
log
@include/elf
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * common.h (STT_GNU_IFUNC): Define.

elfcpp
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * (enum STT): Add STT_GNU_IFUNC.

gas
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * config/obj-elf.c (obj_elf_type): Add support for a
        gnu_indirect_function type.
        * config/tc-i386.c (tc_i386_fix_adjustable): Do not adjust fixups
        against indirect function symbols.
        * doc/as.texinfo (.type): Document the support for the
        gnu_indirect_function symbol type.
        * NEWS: Mention the new feature.

gas/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * gas/elf/elf.exp: Extend type test to include an ifunc symbol.
        Provide an alternative test for targets which do not support ifunc
        symbols.
        (type.s): Add entry for an ifunc symbol.
        (type.e): Add ifunc entry to expected symbol dump.
        (section2.e-armelf): Add  entry for ifunc symbol.
        (type-noifunc.s): New file.
        (type-noifunc.e): New file.

bfd/
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs
        section pointer.
        (struct elf_obj_data): Add has_ifunc_symbols boolean.
        * elf.c (swap_out_syms): Convert BSF_GNU_INDIRECT_FUNCTION flags
        into a STT_GNU_IFUNC symbol type.
        (_bfd_elf_is_function_type): Accept STT_GNU_IFUNC as a function
        type.
        (_bfd_elf_set_osabi): Set the osasbi field to ELFOSABI_LINUX if
        the binary contains ifunc symbols.
        * elfcode.h (elf_slurp_symbol_table): Translate the STT_GNU_IFUNC
        symbol type into a BSF_GNU_INDIRECT_FUNCTION flag.
        * elf32-i386.c (is_indirect_function): New function.
        (elf_i386_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf_i386_relocate_section): Emit a reloc against an ifunc symbol
        if necessary.
        (elf_i386_add_symbol_hook): New function. Set the
        has_ifunc_symbols field of the elf_obj_data structure if an ifunc
        symbol is encountered.
        (elf_backend_post_process_headers): Define.
        (elf_backend_add_symbol_hook): Define.
        (elf_i386_post_process_headers): Rename to
        elf_i388_fbsd_post_process_headers.
        * elf64-x86_64.c (IS_X86_64_PCREL_TYPE): New macro.
        (is_indirect_function): New function.
        (elf64_x86_64_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf64_x86_64_relocate_section): Emit a reloc against an ifunc
        symbol if necessary.
        (elf_i386_add_symbol_hook): Set the has_ifunc_symbols field of the
        elf_obj_data structure if an ifunc symbol is encountered.
        (elf_backend_post_process_headers): Define.
        * elflink.c (_bfd_elf_adjust_dynamic_symbol): Always create a PLT
        if we have ifunc symbols to handle.
        (get_ifunc_reloc_section_name): New function.  Computes the name
        for an ifunc section.
        (_bfd_elf_make_ifunc_reloc_section): New function.  Creates a
        section to hold ifunc relocs.
        * syms.c (BSF_GNU_INDIRECT_FUNCTION): Define.
        (bfd_print_symbol_vandf): Handle ifunc symbols.
        (bfd_decode_symclass): Likewise.
        * bfd-in2.h: Regenerate.

binutils
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * readelf.c (dump_relocations): Display a relocation against an
        ifunc symbol as if it were a function invocation.
        (get_symbol_type): Handle STT_GNU_IFUNC.

ld
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * NEWS: Mention support for IFUNC symbols.

ld/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * ld-ifunc: New directory.
        * ld-ifunc/ifunc.exp: New file: Run the IFUNC tests.
        * ld-ifunc/prog.c: New file.
        * ld-ifunc/lib.c: New file.
@
text
@d128 1
@


1.49
log
@2009-02-05  Catherine Moore  <clm@@codesourcery.com>

	* gas/elf/elf.exp: Really run the symtab test.
@
text
@d117 14
a130 2
    run_dump_test "symver" 
    run_elf_list_test "type" "" "" "-s" "| grep \"1 \\\[FIONTC\\\]\""
@


1.48
log
@include/elf/
            * common.h (STT_IFUNC): Define.
elfcpp/
            * elfcpp.h (enum STT): Add STT_IFUNC.
bfd/
            * syms.c (struct bfd_symbol): Add new flag BSF_INDIRECT_FUNCTION.
            Remove redundant flag BFD_FORT_COMM_DEFAULT_VALUE.  Renumber flags
            to remove gaps.
            (bfd_print_symbol_vandf): Return 'i' for BSF_INDIRECT_FUNCTION.
            (bfd_decode_symclass): Likewise.
            * elf.c (swap_out_syms): Translate BSF_INDIRECT_FUNCTION into
            STT_IFUNC.
            (elf_find_function): Treat STT_IFUNC in the same way as STT_FUNC.
            (_bfd_elf_is_function_type): Likewise.
            * elf32-arm.c (arm_elf_find_function): Likewise.
            (elf32_arm_adjust_dynamic_symbol): Likewise.
            (elf32_arm_swap_symbol_in): Likewise.
            (elf32_arm_additional_program_headers): Likewise.
            * elf32-i386.c (is_indirect_symbol): New function.
            (elf_i386_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf_i386_relocate_section): Likewise.
            * elf64-x86-64.c (is_indirect_symbol): New function.
            (elf64_x86_64_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf64_x86_64_relocate_section): Likewise.
            * elfcode.h (elf_slurp_symbol_table): Translate STT_IFUNC into
            BSF_INDIRECT_FUNCTION.
            * elflink.c (_bfd_elf_adjust_dynamic_reloc_section): Add support
            for STT_IFUNC symbols.
            (get_ifunc_reloc_section_name): New function.
            (_bfd_elf_make_ifunc_reloc_section): New function.
            * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs field.
            * bfd-in2.h: Regenerate.
gas/
            * config/obj-elf.c (obj_elf_type): Add support for STT_IFUNC type.
            * doc/as.texinfo: Document new feature.
            * NEWS: Mention new feature.
gas/testsuite/
            * gas/elf/type.s: Add test of STT_IFUNC symbol type.
            * gas/elf/type.e: Update expected disassembly.
            * gas/elf/elf.exp: Update grep of symbol types.
ld/
            * NEWS: Mention new feature.
            * pe-dll.c (process_def_file): Replace use of redundant
            BFD_FORT_COMM_DEFAULT_VALUE with 0.
            * scripttempl/elf.sc: Add .rel.ifunc.dyn and .rela.ifunc.dyn
            sections.
ld/testsuite/
            * ld-mips-elf/reloc-1-n32.d: Updated expected output for reloc
            descriptions.
            * ld-mips-elf/reloc-1-n64.d: Likewise.
            * ld-i386/ifunc.d: New test.
            * ld-i386/ifunc.s: Source file for the new test.
            * ld-i386/i386.exp: Run the new test.
@
text
@d116 1
@


1.47
log
@	* gas/all/gas.exp: Don't run redef tests on a bunch of targets.
	* gas/elf/elf.exp: Likewise.
@
text
@d117 1
a117 1
    run_elf_list_test "type" "" "" "-s" "| grep \"1 \\\[FONTC\\\]\""
@


1.46
log
@2008-01-31  Marc Gauthier  <marc@@tensilica.com>
bfd/
	* config.bfd (xtensa*-*-*): Recognize processor variants.
gas/
	* configure.tgt (xtensa*-*-*): Recognize processor variants.
gas/testsuite/
	* gas/all/gas.exp: Recognize Xtensa processor variants.
	* gas/elf/elf.exp: Likewise.
	* gas/lns/lns.exp: Likewise.
ld/
	* configure.tgt (xtensa*-*-*): Recognize processor variants.
ld/testsuite/
	* ld-elf/merge.d: Recognize Xtensa processor variants.
	* ld-xtensa/coalesce.exp: Likewise.
	* ld-xtensa/lcall.exp: Likewise.
@
text
@d91 3
d97 2
a104 1
	    setup_xfail "cr16-*-*" "h8300-*-*" "mn10300-*-*"
@


1.46.2.1
log
@	* gas/all/gas.exp: Don't run redef tests on a bunch of targets.
	* gas/elf/elf.exp: Likewise.
@
text
@a90 3
	{ cr16*-*-* } { }
	{ crx*-*-* } { }
	{ h8300-*-* } { }
a93 2
	{ mn10200-*-* } { }
	{ mn10300-*-* } { }
d100 1
@


1.45
log
@gas/
	* config/tc-xtensa.h (md_allow_eh_opt): Define.
gas/testsuite/
	* gas/elf/elf.exp: Disable ehopt test for Xtensa.
@
text
@d62 1
a62 1
    if {[istarget "xtensa-*-*"]} then {
@


1.44
log
@* gas/elf/elf.exp (run_elf_list_test): Fix typo.
@
text
@d77 6
a82 3
    # The MN10300 port disables the assembler's call frame optimization
    # because it interfers with link time relaxation of function prologues.
    if {![istarget "mn10300-*-*"] && ![istarget "am3*-*-*"]} then {    
@


1.43
log
@* ehopt.c (check_eh_frame): If md_allow_eh_opt is defined, invoke it to see if the optimizations should be applied.
* config/tc-mn10300.h (md_allow_eh_opt): Define.  Only allow call frame optimization if linker relaxation is not enabled.
* gas/elf/elf.exp: Disable ehopt test for mn10300.
@
text
@d79 1
a79 1
    if (![istarget "mn10300-*-*"] && ![istarget "am3*-*-*"]} then {    
@


1.42
log
@gas/

2007-10-27  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5221
	* config/obj-elf.c (obj_elf_section): Handle optional
	parameters for .pushsection.

	* doc/as.texinfo: Document optional parameters for
	.pushsection.

gas/testsuite/

2007-10-27  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5221
	* gas/elf/elf.exp: Run section7.

	* gas/elf/section7.d: New.
	* gas/elf/section7.s: Likewise.
@
text
@d76 6
a81 1
    run_dump_test "ehopt0"
@


1.41
log
@* config/obj-elf.c (obj_elf_section): When pushing a section, if there is a
  comma then the following argument must be a subsection number.
* testsuite/gas/elf/elf.exp (run_elf_list_test): Run section6 test.
* testsuite/gas/elf/section6.s: New file: Check behaviour of .pushsection with a subsection argument.
* testsuite/gas/elf/section6.d: New file: Expected disassembly.
@
text
@d107 1
@


1.40
log
@bfd:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* elf32-arm.c (elf32_arm_compare_mapping): Compare first on vma,
	then on type.

binutils/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* binutils-all/ar.exp (long_filenames): Delete temporary files on
	the host.
	* binutils-all/arm/objdump.exp: Only check "which $OBJDUMP" if
	host is local.
	* binutils-all/objcopy.exp: Use ${srecfile} to get the name of the
	srec file to be passed to binutils_run.
	(objcopy_test_readelf): Use remote_exec.
	* binutils-all/readelf.exp (readelf_find_size): Use remote_exec.
	(readelf_test): Likewise.
	(readelf_wi_test): Likewise.
	* lib/utils-lib.exp (run_dump_test): Only check "which $binary" if
	host is local.  Use remote_exec.  Use $tempfile not
	tmpdir/bintest.o.

gas:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* as.c (main): Flush stderr before printing listings to ensure
	consistent output order across platforms.

gas/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* lib/gas-defs.exp (gas_version): Use remote_* functions instead
	of exec.
	(gas_host_run): New.
	(gas_run): Use gas_host_run.
	(gas_start): Likewise.
	(run_dump_test): Likewise.
	(objdump): Use gas_host_run.
	(objdump_start_no_subdir): Likewise.
	* lib/gas-dg.exp (gas-dg-test): Use "remote_file host delete".
	* lib/run: Remove.
	* gas/macros/macros.exp: Download app4b.s to host.
	* gas/i386/i386.exp (gas_64_check): Use gas_host_run.
	(gas_32_check): Likewise.
	* gas/maxq10/maxq10.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/maxq20/maxq20.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/sparc/sparc.exp (gas_64_check): Likewise.
	* gas/cfi/cfi.exp: Likewise.
	* gas/elf/elf.exp (run_list_test): Likewise.  Use temporary file
	for readelf output in place of pipe.
	* gas/all/gas.exp: Download incbin.dat to host.
	(do_comment): Allow \r\r\n.

ld:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ldlang.c (sort_sections_by_lma): Sort by internal id after lma
	for stable sort.

ld/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ld-elfcomm/elfcomm.exp: Use run_host_cmd.  Only check "which
	$CC" if host is local.
	* ld-checks/checks.exp: Use run_host_cmd.
	* ld-elf/exclude.exp: Likewise.
	* ld-elf/elf.exp: Download merge.ld if host is remote.
	* ld-elf/binutils.exp (binutils_test): Use remote_exec.
	* ld-elf/tls_common.exp: Use run_host_cmd.
	* lib/ld-lib.exp (ld_version): Only check "which $ld" if host is
	local.  Use remote_exec.
	(run_host_cmd): New.
	(run_host_cmd_yesno): New.
	(default_ld_relocate): Use run_host_cmd_yesno.
	(default_ld_link): Likewise.
	(default_ld_simple_link): Use run_host_cmd.
	(default_ld_compile): Only check "which $ccprog" if host is local.
	Use remote_file and remote_exec.
	(default_ld_assemble): Only check "which $as" if host is local.
	Use run_host_cmd.
	(default_ld_nm): Use remote_exec, remote_upload and remote_file.
	(run_dump_test): Use remote_exec, remote_upload and remote_file.
	Only check "which $binary" if host is local.
	(run_ld_link_tests): Use remote_exec, remote_upload and
	remote_file.
	* ld-selective/selective.exp: Only check "which $CXX" if host is
	local.  Use remote_exec.
	* ld-scripts/phdrs.exp: Only check "which $objdump" if host is
	local.  Use run_host_cmd.
	* ld-scripts/phdrs2.exp: Likewise.
	* ld-scripts/weak.exp: Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
	* ld-scripts/crossref.exp: Only check "which $CC" if host is local.
	Use run_host_cmd.
	* ld-scripts/map-address.exp: Upload map_address.map if host is
	remote.
	* ld-srec/srec.exp (run_srec_tests): Use run_host_cmd.  Only check
	"which $CC" and "which $CXX" if host is local.
	* ld-undefined/undefined.exp: Only check "which $CC" if host is
	local.  Use remote_file and run_host_cmd.
	* config/default.exp: Use remote_exec to create tmpdir.
@
text
@d105 2
a106 1
    run_elf_list_test "type" "" "" "-s" "| grep \"1 \\\[FONT\\\]\""
@


1.39
log
@PR gas/4804
* gas/elf/elf.exp (target_machine): Treat the arm-linux-gnu target in the same way as the arm-eabi target.
* gas/arm/mapshort-eabi.d: Use this file for the arm-linux-gnu target.
* gas/arm/mapshort-elf.d: Do not use this file for the arm-linux-gnu target.
@
text
@d18 7
a24 1
    catch "exec $READELF $readelf_opts dump.o $readelf_pipe > dump.out\n" comp_output
@


1.38
log
@Add expected failures for CR16 tests
@
text
@d63 1
@


1.37
log
@Patch for PR4587 + move proc run_list_test into gas-defs.exp
@
text
@d85 1
a85 1
	    setup_xfail "h8300-*-*" "mn10300-*-*"
@


1.36
log
@PR gas/3810 gas/3800
* gas/elf/elf.exp: Expect the redef test to fail on targets which do not
  convert fixups against ordinary symbols into relocs against section symbols.
* gas/all/gas.exp: Likewise.
@
text
@d5 1
a5 1
proc run_list_test { name suffix opts readelf_opts readelf_pipe } {
d92 1
a92 1
    run_list_test "section2" "$target_machine" "-al" "-s" ""
d95 1
a95 1
    run_list_test "section5" "" "-al" "-SW" "| grep \" \\\\.test\\\[0-9\\\]\""
d98 1
a98 1
    run_list_test "type" "" "" "-s" "| grep \"1 \\\[FONT\\\]\""
@


1.35
log
@bfd/
	* elf32-xtensa.c (elf_xtensa_special_sections): Add .xtensa.info.
gas/
	* config/tc-xtensa.c (XSHAL_ABI): Add default definition.
	(directive_state): Disable scheduling by default.
	(xtensa_add_config_info): New.
	(xtensa_end): Call xtensa_add_config_info.
gas/testsuite/
	* gas/elf/section2.e-xtensa: New file.
	* gas/elf/elf.exp: Use it.
include/
	* xtensa-config.h (XSHAL_ABI): New.
	(XTHAL_ABI_WINDOWED, XTHAL_ABI_CALL0): New.
ld/
	* emultempl/xtensaelf.em (XSHAL_ABI): Add default definition.
	(replace_insn_sec_with_prop_sec): Use bfd_make_section_with_flags.
	Delete redundant code to set sections flags and alignment.
	(xt_config_info_unpack_and_check, check_xtensa_info): New.
	(elf_xtensa_after_open): Iterate over input statements instead of
	link_info.input_bfds.
	(elf_xtensa_before_allocation): Likewise.  Call check_xtensa_info for
	each input, and write a new .xtensa.info section in the output.
@
text
@d81 5
@


1.34
log
@opcodes/
	* arm-dis.c (last_is_thumb): Delete.
	(enum map_type, last_type): New.
	(print_insn_data): New.
	(get_sym_code_type): Take MAP_TYPE argument.  Check the type of
	the right symbol.  Handle $d.
	(print_insn): Check for mapping symbols even without a normal
	symbol.  Adjust searching.  If $d is found see how much data
	to print.  Handle data.
gas/
	* config/tc-arm.h (md_cons_align): Define.
	(mapping_state): New prototype.
	* config/tc-arm.c (mapping_state): Make global.
gas/testsuite/
	* gas/arm/arm7t.d, gas/arm/neon-ldst-rm.d, gas/arm/thumb2_pool.d,
	gas/arm/tls.d: Update for $d support.
	* gas/arm/mapshort.d, gas/arm/mapshort.s: New test.
	* gas/elf/section2.e-armeabi: Update.
	* gas/elf/section2.e-armelf: New file.
	* gas/elf/elf.exp: Use it.
ld/testsuite/
	* ld-arm/mixed-app.d, ld-arm/tls-app.d, ld-arm/tls-lib.d: Update
	for $d support.
@
text
@d56 3
@


1.33
log
@gas/
2006-11-15  Jan Beulich  <jbeulich@@novell.com>

	PR/3469
	* symbols.c (symbol_clone): Mark symbol ending up not on symbol
	chain by linking it to itself.
	(resolve_symbol_value): Also check symbol_shadow_p().
	(symbol_shadow_p): New.
	* symbols.h (symbol_shadow_p): Declare.

gas/testsuite/
2006-11-15  Jan Beulich  <jbeulich@@novell.com>

	* gas/elf/equ-reloc.[sd]: New.
	* gas/elf/elf.exp: Run new test.
@
text
@d57 8
a64 4
	  || [istarget "xscale*-*-*"])
	&& ([istarget "*-*-*eabi"]
	    || [istarget "*-*-symbianelf"])} then {
	set target_machine -armeabi
@


1.32
log
@Add support for Score target.
@
text
@d75 1
@


1.31
log
@gas/testsuite/
2005-11-07  Jan Beulich  <jbeulich@@novell.com>

	* gas/all/redef2.[sd]: New.
	* gas/all/gas.exp: Run new test.
	* gas/elf/redef.d: New.
	* gas/elf/elf.exp: Run new test.
@
text
@d53 3
@


1.30
log
@2005-10-08  Paul Brook  <paul@@codesourcery.com>

bfd/
	* elf32-arm.c: Move #include "elf/arm.h" after libbfd.h.
	(NUM_KNOWN_ATTRIBUTES): Define.
	(aeabi_attribute, aeabi_attribute_list): Define.
	(elf32_arm_obj_tdata): Add known_eabi_attributes and
	other_eabi_attributes.
	(uleb128_size, is_default_attr, eabi_attr_size,
	elf32_arm_eabi_attr_size, write_uleb128, write_eabi_attribute,
	elf32_arm_set_eabi_attr_contents, elf32_arm_bfd_final_link,
	elf32_arm_new_eabi_attr, attr_strdup, elf32_arm_add_eabi_attr_int,
	elf32_arm_add_eabi_attr_compat, copy_eabi_attributes,
	elf32_arm_merge_eabi_attributes): New functions.
	(elf32_arm_copy_private_bfd_data): Copy EABI object attributes.
	(elf32_arm_fake_sections): Handle .ARM.attributes.
	(elf32_arm_parse_attributes): New function.
	(elf32_arm_section_from_shdr): Use it.
	(bfd_elf32_bfd_final_link): Define.
gas/
	* config/tc-arm.c: Don't provide fallback default for CPU_DEFAULT.
	(arm_arch_used, thumb_arch_used, selected_cpu, selected_cpu_name):
	New variables.
	(arm_cpu_option_table): Add canonical_name.
	(arm_cpus): Populate canonical_name field.
	(s_arm_eabi_attribute, s_arm_arch, s_arm_cpu, s_arm_fpu,
	aeabi_set_public_attributes, arm_md_end): New functions.
	(md_pseudo_table): Add "cpu", "arch", "fpu" and "eabi_attribute".
	(md_assemble): Set thumb_arch_used and arm_arch_used.
	(md_begin): Set defaut cpu if CPU_DEFAULT not defined.
	* config/tc-arm.h (md_end): Define.
	* doc/c-arm.texi: Document .cpu, .arch, .fpu and .eabi_attribute.
gas/testsuite/
	* gas/arm/eabi_attr_1.s: New test.
	* gas/arm/eabi_attr_1.d: New test.
	* gas/arm/arm7t.d: Only disassemble code sections.
	* gas/arm/bignum1.d: Ignore Arm object attribute sections.
	* gas/arm/mapping.d: Ditto.
	* gas/arm/unwind.d: Ditto.
	* gas/elf/section0.d: Ditto.
	* gas/elf/section1.d: Ditto.
	* gas/elf/elf.exp: Set target_machine for Arm EABI based targets.
	* gas/elf/section2.e-armeabi: New file.
include/elf/
	* arm.h: Add prototypes for BFD object attribute routines.
ld/testsuite/
	* ld-arm/arm-rel31.d: Ignore Arm object attribute sections.
	* ld-arm/arm-target1-abs.d: Ditto.
	* ld-arm/arm-target1-rel.d: Ditto.
	* ld-arm/arm-target2-abs.d: Ditto.
	* ld-arm/arm-target2-got-rel.d: Ditto.
	* ld-arm/arm-target2-rel.d: Ditto.
@
text
@d64 10
@


1.29
log
@gas/
2005-04-15  Jan Beulich  <jbeulich@@novell.com>

	* config/obj-elf.c (obj_elf_struct): New.
	(elf_pseudo_table). Use it for .offset and .struct.

gas/testsuite/
2005-04-15  Jan Beulich  <jbeulich@@novell.com>

	* gas/elf/struct.[sd]: New.
	* gas/elf/elf.exp: Run new test.
@
text
@d53 6
@


1.28
log
@	* gas/elf/elf.exp (section5): Use 0-9 instead of [:digit:].
@
text
@d64 1
@


1.27
log
@	* gas/elf/elf.exp: Don't list reloc sections.
	* gas/elf/section5.e: Remove reloc sections.
@
text
@d63 1
a63 1
    run_list_test "section5" "" "-al" "-SW" "| grep \" \\\\.test\\\[\\\[:digit:\\\]\\\]\""
@


1.26
log
@gas/
2004-12-15 Jan Beulich  <jbeulich@@novell.com>

	* config/obj-elf.c (obj_elf_change_section): Only set type and
	attributes on new sections. Emit warning when type of re-declared
	section doesn't match.

gas/testsuite/
2004-12-15 Jan Beulich  <jbeulich@@novell.com>

	* gas/elf/section5.[els]: New.
@
text
@d63 1
a63 1
    run_list_test "section5" "" "-al" "-SW" "| grep \"\\\\.test\\\[\\\[:digit:\\\]\\\]\""
@


1.25
log
@	* gas/elf/elf.exp: Recognise additional arm elf targets.
@
text
@d5 1
a5 1
proc run_list_test { name suffix opts readelf_pipe } {
d17 2
a18 2
    send_log "$READELF -s dump.o > dump.out\n"
    catch "exec $READELF -s dump.o $readelf_pipe > dump.out\n" comp_output
d60 2
a61 2
    run_list_test "section2" "$target_machine" "-al" ""
    run_dump_test "section3"
d63 1
d65 1
a65 1
    run_list_test "type" "" "" "| grep \"1 \\\[FONT\\\]\""
@


1.24
log
@	* gas/m68hc11/m68hc11.exp: Fix tests for 2.15
	* gas/elf/elf.exp: Test obj-elf for m6811-* and m6812-*
	* gas/symver/symver.exp: Likewise for symver tests.
@
text
@d34 1
a34 1
if { ([istarget "*-*-elf*"]		
d39 2
a40 1
      || [istarget "mips*-*-irix6*"])
@


1.23
log
@Apply H.J.'s patch to fix label arithmetic when multiple same-name sections are involved
@
text
@d36 2
@


1.22
log
@gas/

2004-04-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-elf.c (get_section): New function.
	(obj_elf_change_section): Support multiple sections with same
	name.

gas/testsuite/

2004-04-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/elf.exp: Remove group1, add group1a and group1b for
	section group.

	* gas/elf/group1a.d: New file.
	* gas/elf/group1b.d: Likewise.

	* gas/elf/group1.e: Removed.
@
text
@d58 2
a59 1
    run_dump_test "section3" 
@


1.21
log
@binutils/

2004-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	* readelf.c (do_section_groups): New.
	(options): Add --section-groups/-g.
	(usage): Mention --section-groups/-g.
	(parse_args): Support --section-groups/-g.
	(get_group_flags): New.
	(process_section_groups): New.
	(process_object): Call process_section_groups.

gas/

2004-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-elf.c (obj_elf_change_section): Check if the old
	group name is NULL before comparison.

gas/testsuite/

2004-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/elf.exp: Add group0a, group0b and group1 for section
	group.

	* gas/elf/group0.s: New file.
	* gas/elf/group0a.d: Likewise.
	* gas/elf/group0b.d: Likewise.
	* gas/elf/group1.e: Likewise.
	* gas/elf/group1.s: Likewise.
@
text
@d53 2
a54 1
    run_list_test "group1" "" "" ""
@


1.20
log
@* config/tc-arm.texi (struct reg_entry): Add new field 'builtin'.
  (rn_table, iwmmxt_table, cp_table, cn_table, fn_table, sn_table,
  dn_table, mav_mvf_table, mac_mvd_table, mav_mvfx_table,
  mav_mvax_table, mav_dspc_table): Initialise new field.
  (insert_reg_alias): Initialise new field.
  (md_pseudo_table): Add "unreq" entry.
  (s_unreq): New function: Undo the effects of a previous .req.
* doc/c-arm.texi: Document new pseudo op.
* NEWS: Mention new feature.
* testsuite/gas/arm/req.s: New test file.  Check .req and .unreq psuedo ops.
* testsuite/gas/arm/req.l: Expected error output from req.s test.
* testsuite/gas/arm/copro.d: Set target architecture for objdump so that the
  test will work on architectures which cannot encode higher arm architecture
  types in their file headers.
* testsuite/gas/arm/arm.exp: Run new req.s test.
  Skip thumb instruction test for PE targets which do not support
  thumb relocations.
* testsuite/gas/elf/elf.exp: Skip special handling of section2 test for XScale
  targets - it is no longer needed.
@
text
@d51 3
@


1.19
log
@gas/

2003-07-28  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-elf.c (obj_elf_section_type): Also accept "note".

gas/testsuite/

2003-07-28  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/elf/elf.exp: Add section3 for note section.

	* gas/elf/section3.d: New file.
	* gas/elf/section3.s: Likewise.
@
text
@a49 3
    if {[istarget xscale*-*-elf]} then {
	set target_machine -miwmmxt
    }
@


1.18
log
@2003-05-03  H.J. Lu <hjl@@gnu.org>

	* gas/elf/elf.exp (run_list_test): Support pipe for readelf.

	* gas/elf/type.e-m32r: Removed.
	* gas/elf/type.e-mips: Likewise.
	* gas/elf/type.e-miwmmxt: Likewise.

	* gas/elf/type.e: Updated.
@
text
@d57 1
@


1.17
log
@2003-05-01  H.J. Lu <hjl@@gnu.org>

	* gas/elf/elf.exp (run_list_test): Accept empty $opts.
	Add type test.

	* gas/elf/type.e: New file.
	* gas/elf/type.s: Likewise.
	* gas/elf/type.e-m32r: Likewise.
	* gas/elf/type.e-mips: Likewise.
	* gas/elf/type.e-miwmmxt: Likewise.
@
text
@d5 1
a5 1
proc run_list_test { name suffix opts } {
d18 1
a18 1
    catch "exec $READELF -s dump.o > dump.out\n" comp_output
d56 1
a56 1
    run_list_test "section2" "$target_machine" "-al"
d58 1
a58 1
    run_list_test "type" "$target_machine" ""
@


1.16
log
@Fix problem parsing symbol version strings when they are preceeded by whitespace.
Add test to catch this problem in the future.
@
text
@d11 2
a12 1
    if { [regexp_diff "dump.out" "${file}.l"] } then {
d58 1
@


1.15
log
@Add iWMMXt support
@
text
@d56 1
@


1.15.2.1
log
@Skip whitespace before a symbol version string.
Add a test for this bug.
@
text
@a55 1
    run_dump_test "symver" 
@


1.14
log
@* gas/elf.exp: Don't run for sh64*-*-linux*, because it sets the
lsb in SHmedia code addresses.
* gas/sh/basic.exp: Force SHcompact for sh64*-*-linux* to enable
recognition of SH-1/2/3/4 instructions.
(proc do_fp): Do not run dsp tests for sh64*-*-linux*.
* gas/sh/sh64/abi-32.d: Adjust expected output to include
sh64*-*-linux* formats too.
* gas/sh/sh64/abi-64.d, gas/sh/sh64/basic-1.d,
gas/sh/sh64/case-1.d, gas/sh/sh64/case-noexp-1.d,
gas/sh/sh64/crange1-1.d, gas/sh/sh64/crange1-2.d,
gas/sh/sh64/crange2-1.d, gas/sh/sh64/crange2-2.d,
sh/sh64/crange2-noexp-1.d, gas/sh/sh64/crange3-1.d,
gas/sh/sh64/crange4-1.d, gas/sh/sh64/crange5-1.d,
gas/sh/sh64/creg-1.d, gas/sh/sh64/creg-2.d, gas/sh/sh64/datal-2.d,
gas/sh/sh64/datal32-1.d, gas/sh/sh64/datal32-3.d,
gas/sh/sh64/datal64-1.d, gas/sh/sh64/datal64-3.d,
gas/sh/sh64/endian-1.d, gas/sh/sh64/endian-2.d,
gas/sh/sh64/err-noexp-cmd1.s, gas/sh/sh64/immexpr32-1.d,
gas/sh/sh64/immexpr32-2.d, gas/sh/sh64/immexpr64-1.d,
gas/sh/sh64/immexpr64-2.d, gas/sh/sh64/lineno.d,
gas/sh/sh64/localcom-1.d, gas/sh/sh64/mix-1.d,
gas/sh/sh64/mix-noexp-1.d, gas/sh/sh64/movi-3.d,
gas/sh/sh64/movi32-1.d, gas/sh/sh64/movi32-2.d,
gas/sh/sh64/movi32-noexp-2.d, gas/sh/sh64/movi64-1.d,
gas/sh/sh64/movi64-2.d, gas/sh/sh64/movi64-3.d,
gas/sh/sh64/movi64-noexp-2.d, gas/sh/sh64/pt-1.d,
gas/sh/sh64/pt-noexp-1.d, gas/sh/sh64/pt32-1.d,
gas/sh/sh64/pt32-noexp-2.d, gas/sh/sh64/pt64-1.d,
gas/sh/sh64/pt64-32-1.d, gas/sh/sh64/pt64-32-2.d,
gas/sh/sh64/pt64-noexp-2.d, gas/sh/sh64/ptc32-1.d,
gas/sh/sh64/ptc32-noexp-1.d, gas/sh/sh64/ptc64-1.d,
gas/sh/sh64/ptc64-32-1.d, gas/sh/sh64/ptc64-noexp-1.d,
gas/sh/sh64/ptext32-1.d, gas/sh/sh64/ptext32-noexp-1.d,
gas/sh/sh64/ptext64-1.d, gas/sh/sh64/ptext64-32-1.d,
gas/sh/sh64/ptext64-noexp-1.d, gas/sh/sh64/rel32-1.d,
gas/sh/sh64/rel32-2.d, gas/sh/sh64/rel32-3.d,
gas/sh/sh64/rel32-4.d, gas/sh/sh64/rel32-5.d,
gas/sh/sh64/rel64-1.d, gas/sh/sh64/rel64-2.d,
gas/sh/sh64/rel64-3.d, gas/sh/sh64/rel64-4.d,
gas/sh/sh64/rel64-5.d, gas/sh/sh64/relax-1.d,
gas/sh/sh64/relax-2.d, gas/sh/sh64/relax-3.d,
gas/sh/sh64/shift32-1.d, gas/sh/sh64/shift32-3.d,
gas/sh/sh64/shift32-noexp-3.d, gas/sh/sh64/shift64-1.d,
gas/sh/sh64/shift64-2.d, gas/sh/sh64/shift64-3.d,
gas/sh/sh64/shift64-noexp-3.d, gas/sh/sh64/syntax-1.d,
gas/sh/sh64/syntax-2.d, gas/sh/sh64/ua32-1.d,
gas/sh/sh64/ua64-1.d: Likewise.
@
text
@d49 3
@


1.13
log
@	* config/tc-v850.c: Add missing prototypes amd use old-style
	function definitions.
	(AREA_ZDA, AREA_SDA, AREA_TDA): Delete.
	(sdata_section tdata_section, zdata_section, sbss_section,
	tbss_section, zbss_section, rosdata_section, rozdata_section,
	scommon_section, tcommon_section, zcommon_section,
	call_table_data_section, call_table_text_section): Delete.
	(v850_sdata, v850_tdata, v850_zdata, v850_sbss, v850_tbss,
	v850_zbss, v850_bss, v850_rosdata, v850_rozdata,
	v850_call_table_data, v850_call_table_text): Delete.
	(struct v850_seg_entry): New.
	(v850_seg_table): New.
	(SDATA_SECTION TDATA_SECTION, ZDATA_SECTION, SBSS_SECTION,
	TBSS_SECTION, ZBSS_SECTION, BSS_SECTION, ROSDATA_SECTION,
	ROZDATA_SECTION, SCOMMON_SECTION, TCOMMON_SECTION, ZCOMMON_SECTION,
	CALL_TABLE_DATA_SECTION, CALL_TABLE_TEXT_SECTION): Define.
	(do_v850_seg): New.
	(v850_seg): New.
	(v850_comm): Use do_v850_seg and v850_seg_table.  Simplify
	recording of alignment.
	(md_pseudo_table): Use v850_seg.
	(md_begin): Don't init .call_table_data and .call_table_text here.
	Set v850_seg_table bss entry.
	* config/tc-v850.h (v850_pcrel_from_section): Prototype.

	* gas/elf/elf.exp: Don't special case v850.
@
text
@d40 1
@


1.12
log
@Special case handlign for m32r port
@
text
@d42 1
a42 1
    if {[istarget "mips*-*-*"] || [istarget v850-*-*]} then {
@


1.11
log
@Use section2.e-mips script for v850-elf toolchain.
@
text
@d45 3
@


1.10
log
@	* gas/elf/elf.exp (run_list_test): Undo $readelf change in 2001-06-07.
@
text
@d42 1
a42 1
    if [istarget "mips*-*-*"] then {
@


1.9
log
@2001-06-07  H.J. Lu  <hjl@@gnu.org>

	* gas/elf/section2.e-mips: New file.

	* gas/elf/elf.exp (run_list_test): Add suffix.
	Pass -mips as suffix to run_list_test for mips.
@
text
@d9 1
a9 1
    set file $srcdir/$subdir/$readelf
@


1.8
log
@2001-06-06  H.J. Lu  <hjl@@gnu.org>

	* gas/elf/elf.exp (run_list_test): New.
	Run section2 with run_list_test.

	* gas/elf/section2.e: New file.
	* gas/elf/section2.l: Likewise.
	* gas/elf/section2.s: Likewise.
@
text
@d5 1
a5 1
proc run_list_test { name opts } {
d9 1
a9 1
    set file $srcdir/$subdir/$name
d24 1
a24 1
    if { [regexp_diff "dump.out" "${file}.e"] } then {
d41 4
d48 1
a48 1
    run_list_test "section2" "-al"
@


1.7
log
@        * gas/elf/ehopt0.s: New.
        * gas/elf/ehopt0.d: New.
        * gas/elf/elf.exp: Run it.
@
text
@d5 27
d44 1
@


1.6
log
@	* gas/elf/elf.exp: Exclude *-*-linux*coff* as non-elf.
@
text
@d14 1
@


1.6.2.1
log
@        * gas/elf/ehopt0.s: New.
        * gas/elf/ehopt0.d: New.
        * gas/elf/elf.exp: Run it.
@
text
@a13 1
    run_dump_test "ehopt0"
@


1.6.2.2
log
@Merge from mainline.
@
text
@a4 27
proc run_list_test { name suffix opts } {
    global READELF
    global srcdir subdir
    set testname "elf $name list"
    set file $srcdir/$subdir/$name
    gas_run ${name}.s "$opts -o dump.o" ">&dump.out"
    if { [regexp_diff "dump.out" "${file}.l"] } then {
	fail $testname
	verbose "output is [file_contents "dump.out"]" 2
	return
    }
    send_log "$READELF -s dump.o > dump.out\n"
    catch "exec $READELF -s dump.o > dump.out\n" comp_output
    if ![string match "" $comp_output] then {
	send_log "$comp_output\n"
	fail $testname
	return
    }
    verbose_eval {[file_contents "dump.out"]} 3
    if { [regexp_diff "dump.out" "${file}.e${suffix}"] } then {
	fail $testname
	verbose "output is [file_contents "dump.out"]" 2
	return
    }
    pass $testname
}

a13 4
    set target_machine ""
    if [istarget "mips*-*-*"] then {
	set target_machine -mips
    }
a16 1
    run_list_test "section2" "$target_machine" "-al"
@


1.5
log
@* lib/gas-defs.exp (regexp_diff): Allow '#...' to mean "some
indeterminate number of extra lines here".

* gas/elf/elf.exp: Remove XFAILs.
* gas/elf/section0.d: Make pass on MIPS (and hopefully alpha).
* gas/elf/section1.d: Likewise.
@
text
@d11 1
@


1.4
log
@1999-08-17  H.J. Lu  <hjl@@gnu.org>

	* gas/elf/elf.exp: Expected to fail on alpha*-*-*.
@
text
@a12 5

    # FIXME: This doesn't work for MIPS and alpha targets because of
    # the .reginfo and .mdebug sections.
    setup_xfail mips*-*-*
    setup_xfail alpha*-*-*
a13 3

    setup_xfail mips*-*-*
    setup_xfail alpha*-*-*
@


1.3
log
@	* gas/elf/elf.exp: Don't run tests on "*-*-linux*aout*" or
	"*-*-linux*oldld*".
	* gas/vtable/vtable.exp: Likewise.
	* gas/i386/reloc.d: Modify expected reloc names to accept a.out
	names.
@
text
@d14 2
a15 2
    # FIXME: This doesn't work for MIPS targets because of the .reginfo
    # and .mdebug sections.
d17 1
d21 1
@


1.2
log
@	* gas/mips/sync.d: Pass -mips2 to the assembler.
	* gas/mips/elf_e_flags.s: Tweak code so that the tests pass for
	mips-elf target as well as mips64-elf target.
	* gas/mips/elf_e_flags1.d: Corresponding changes.
	* gas/mips/elf_e_flags2.d: Likewise.
	* gas/mips/elf_e_flags3.d: Likewise.
	* gas/mips/elf_e_flags4.d: Likewise.
	* gas/elf/elf.exp: Add setup_xfail for mips*-*-*.
	* gas/all/itbl-test.c (main): Update itbl_get_reg_val call for new
	parameter.
@
text
@d6 7
a12 4
if { [istarget "*-elf*"]		
     || [istarget "*-linux*"]
     || [istarget "sparc*-*-solaris*"]
     || [istarget "mips*-*-irix6*"] } then {
@


1.1
log
@        * gas/elf/elf.exp: New directory.
        * gas/elf/section0.[sd]: New test.
        * gas/elf/section1.[sd]: New test.
@
text
@d11 3
d15 2
a17 1

@

