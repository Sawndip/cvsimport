head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.10
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.8
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.8.0.6
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.4
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.2
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.7
	binutils-2_20:1.7
	binutils-arc-20081103-branch:1.3.0.6
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.7.0.2
	binutils-2_20-branchpoint:1.7
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.18
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.2.0.16
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.14
	binutils-csl-2_17-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.2.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.10
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.8
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.6
	cagney_bfdfile-20040213-branch:1.2.0.4
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.2
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils_latest_snapshot:1.8;
locks; strict;
comment	@# @;


1.8
date	2009.09.23.03.12.24;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.23.13.00.29;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.30.15.47.12;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.23.09.01.49;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.03.14.50.59;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.16.14.42.15;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.03.18.51.21;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.02.03.00.49;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Tolerate some whitespace differences in readelf output.
@
text
@ +.: 0+0 +1 +FUNC +LOCAL +DEFAULT +. function
 +.: 0+1 +1 +IFUNC +LOCAL +DEFAULT +. indirect_function
 +.: 0+0 +1 +OBJECT +LOCAL +DEFAULT +. object
 +.: 0+1 +1 +TLS +LOCAL +DEFAULT +. tls_object
 +..: 0+2 +1 +NOTYPE +LOCAL +DEFAULT +. notype
 +..: 0+3 +1 +OBJECT +UNIQUE +DEFAULT +. unique_global
 +..: 0+1 +1 +(COMMON|OBJECT) +GLOBAL +DEFAULT +COM common
@


1.7
log
@        * config/obj-elf.c (obj_elf_type): Add code to support a type of
        gnu_unique_object.
        * doc/as.texinfo: Document new feature of .type directive.
        * NEWS: Mention support for gnu_unique_object symbol type.

        * common.h (STB_GNU_UNIQUE): Define.

        * NEWS: Mention the linker's support for symbols with a binding of
        STB_GNU_UNIQUE.

        * gas/elf/type.s: Add unique global symbol definition.
        * gas/elf/type.e: Add expected readelf output for global unique
        symbol.

        * elfcpp.h (enum STB): Add STB_GNU_UNIQUE.

        * readelf.c (get_symbol_binding): For Linux targeted files return
        UNIQUE for symbols with the STB_GNU_UNIQUE binding.
        * doc/binutils.texi: Document the meaning of the 'u' symbol
        binding in the output of nm and objdump --syms.

        * elf-bfd.h (struct elf_link_hash_entry): Add unique_global field.
        * elf.c (swap_out_syms): Set binding to STB_GNU_UNIQUE for symbols
        with the BSF_GNU_UNIQUE flag bit set.
        * elfcode.h (elf_slurp_symbol_table): Set the BSF_GNU_UNIQUE flag
        for symbols with STB_GNU_UNIQUE binding.
        * elflink.c (_bfd_elf_merge_symbol): Set unique_global for symbols
        with the STB_GNU_UNIQUE binding.
        (elf_link_add_object_symbols): Set the BSF_GNU_UNIQUE flag for
        symbols with STB_GNU_UNIQUE binding.  Set STB_GNU_UNIQUE for
        symbols with the unique_global field set.
        (elf_link_output_extsym): Set unique_global field for symbols with
        the STB_GNU_UNIQUE binding.
        * syms.c (struct bfd_symbol): Define BSF_GNU_UNIQUE flag bit.
        (bfd_print_symbol_vandf): Print a 'u' character for BSF_GNU_UNIQUE
        symbols.
        (bfd_decode_symclass): Return a 'u' character for BSF_GNU_UNIQUE
        symbols.
        * bfd-in2.h: Regenerate.
@
text
@d1 7
a7 7
     .: 0+0     1 FUNC    LOCAL  DEFAULT    . function
     .: 0+1     1 IFUNC   LOCAL  DEFAULT    . indirect_function
     .: 0+0     1 OBJECT  LOCAL  DEFAULT    . object
     .: 0+1     1 TLS     LOCAL  DEFAULT    . tls_object
    ..: 0+2     1 NOTYPE  LOCAL  DEFAULT    . notype
    ..: 0+3     1 OBJECT  UNIQUE DEFAULT    . unique_global
    ..: 0+1     1 (COMMON|OBJECT)  GLOBAL DEFAULT  COM common
@


1.6
log
@include/elf
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * common.h (STT_GNU_IFUNC): Define.

elfcpp
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * (enum STT): Add STT_GNU_IFUNC.

gas
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * config/obj-elf.c (obj_elf_type): Add support for a
        gnu_indirect_function type.
        * config/tc-i386.c (tc_i386_fix_adjustable): Do not adjust fixups
        against indirect function symbols.
        * doc/as.texinfo (.type): Document the support for the
        gnu_indirect_function symbol type.
        * NEWS: Mention the new feature.

gas/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * gas/elf/elf.exp: Extend type test to include an ifunc symbol.
        Provide an alternative test for targets which do not support ifunc
        symbols.
        (type.s): Add entry for an ifunc symbol.
        (type.e): Add ifunc entry to expected symbol dump.
        (section2.e-armelf): Add  entry for ifunc symbol.
        (type-noifunc.s): New file.
        (type-noifunc.e): New file.

bfd/
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs
        section pointer.
        (struct elf_obj_data): Add has_ifunc_symbols boolean.
        * elf.c (swap_out_syms): Convert BSF_GNU_INDIRECT_FUNCTION flags
        into a STT_GNU_IFUNC symbol type.
        (_bfd_elf_is_function_type): Accept STT_GNU_IFUNC as a function
        type.
        (_bfd_elf_set_osabi): Set the osasbi field to ELFOSABI_LINUX if
        the binary contains ifunc symbols.
        * elfcode.h (elf_slurp_symbol_table): Translate the STT_GNU_IFUNC
        symbol type into a BSF_GNU_INDIRECT_FUNCTION flag.
        * elf32-i386.c (is_indirect_function): New function.
        (elf_i386_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf_i386_relocate_section): Emit a reloc against an ifunc symbol
        if necessary.
        (elf_i386_add_symbol_hook): New function. Set the
        has_ifunc_symbols field of the elf_obj_data structure if an ifunc
        symbol is encountered.
        (elf_backend_post_process_headers): Define.
        (elf_backend_add_symbol_hook): Define.
        (elf_i386_post_process_headers): Rename to
        elf_i388_fbsd_post_process_headers.
        * elf64-x86_64.c (IS_X86_64_PCREL_TYPE): New macro.
        (is_indirect_function): New function.
        (elf64_x86_64_check_relocs): Create an ifunc output section.
        (allocate_dynrelocs): Create dynamic relocs in the ifunc output
        section if necessary.
        (elf64_x86_64_relocate_section): Emit a reloc against an ifunc
        symbol if necessary.
        (elf_i386_add_symbol_hook): Set the has_ifunc_symbols field of the
        elf_obj_data structure if an ifunc symbol is encountered.
        (elf_backend_post_process_headers): Define.
        * elflink.c (_bfd_elf_adjust_dynamic_symbol): Always create a PLT
        if we have ifunc symbols to handle.
        (get_ifunc_reloc_section_name): New function.  Computes the name
        for an ifunc section.
        (_bfd_elf_make_ifunc_reloc_section): New function.  Creates a
        section to hold ifunc relocs.
        * syms.c (BSF_GNU_INDIRECT_FUNCTION): Define.
        (bfd_print_symbol_vandf): Handle ifunc symbols.
        (bfd_decode_symclass): Likewise.
        * bfd-in2.h: Regenerate.

binutils
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * readelf.c (dump_relocations): Display a relocation against an
        ifunc symbol as if it were a function invocation.
        (get_symbol_type): Handle STT_GNU_IFUNC.

ld
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * NEWS: Mention support for IFUNC symbols.

ld/testsuite
2009-04-30  Nick Clifton  <nickc@@redhat.com>

        * ld-ifunc: New directory.
        * ld-ifunc/ifunc.exp: New file: Run the IFUNC tests.
        * ld-ifunc/prog.c: New file.
        * ld-ifunc/lib.c: New file.
@
text
@d6 1
@


1.5
log
@Remove STT_IFUNC support.
@
text
@d2 1
d5 1
a5 1
     .: 0+2     1 NOTYPE  LOCAL  DEFAULT    . notype
@


1.4
log
@include/elf/
            * common.h (STT_IFUNC): Define.
elfcpp/
            * elfcpp.h (enum STT): Add STT_IFUNC.
bfd/
            * syms.c (struct bfd_symbol): Add new flag BSF_INDIRECT_FUNCTION.
            Remove redundant flag BFD_FORT_COMM_DEFAULT_VALUE.  Renumber flags
            to remove gaps.
            (bfd_print_symbol_vandf): Return 'i' for BSF_INDIRECT_FUNCTION.
            (bfd_decode_symclass): Likewise.
            * elf.c (swap_out_syms): Translate BSF_INDIRECT_FUNCTION into
            STT_IFUNC.
            (elf_find_function): Treat STT_IFUNC in the same way as STT_FUNC.
            (_bfd_elf_is_function_type): Likewise.
            * elf32-arm.c (arm_elf_find_function): Likewise.
            (elf32_arm_adjust_dynamic_symbol): Likewise.
            (elf32_arm_swap_symbol_in): Likewise.
            (elf32_arm_additional_program_headers): Likewise.
            * elf32-i386.c (is_indirect_symbol): New function.
            (elf_i386_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf_i386_relocate_section): Likewise.
            * elf64-x86-64.c (is_indirect_symbol): New function.
            (elf64_x86_64_check_relocs): Also generate dynamic relocs for
            relocations against STT_IFUNC symbols.
            (allocate_dynrelocs): Likewise.
            (elf64_x86_64_relocate_section): Likewise.
            * elfcode.h (elf_slurp_symbol_table): Translate STT_IFUNC into
            BSF_INDIRECT_FUNCTION.
            * elflink.c (_bfd_elf_adjust_dynamic_reloc_section): Add support
            for STT_IFUNC symbols.
            (get_ifunc_reloc_section_name): New function.
            (_bfd_elf_make_ifunc_reloc_section): New function.
            * elf-bfd.h (struct bfd_elf_section_data): Add indirect_relocs field.
            * bfd-in2.h: Regenerate.
gas/
            * config/obj-elf.c (obj_elf_type): Add support for STT_IFUNC type.
            * doc/as.texinfo: Document new feature.
            * NEWS: Mention new feature.
gas/testsuite/
            * gas/elf/type.s: Add test of STT_IFUNC symbol type.
            * gas/elf/type.e: Update expected disassembly.
            * gas/elf/elf.exp: Update grep of symbol types.
ld/
            * NEWS: Mention new feature.
            * pe-dll.c (process_def_file): Replace use of redundant
            BFD_FORT_COMM_DEFAULT_VALUE with 0.
            * scripttempl/elf.sc: Add .rel.ifunc.dyn and .rela.ifunc.dyn
            sections.
ld/testsuite/
            * ld-mips-elf/reloc-1-n32.d: Updated expected output for reloc
            descriptions.
            * ld-mips-elf/reloc-1-n64.d: Likewise.
            * ld-i386/ifunc.d: New test.
            * ld-i386/ifunc.s: Source file for the new test.
            * ld-i386/i386.exp: Run the new test.
@
text
@a1 1
     .: 0+1     1 IFUNC   LOCAL  DEFAULT    . indirect_function
@


1.3
log
@Support the use of the STT_COMMON type.  (In source and object files only at the moment)
@
text
@d2 1
@


1.2
log
@2003-05-03  H.J. Lu <hjl@@gnu.org>

	* gas/elf/elf.exp (run_list_test): Support pipe for readelf.

	* gas/elf/type.e-m32r: Removed.
	* gas/elf/type.e-mips: Likewise.
	* gas/elf/type.e-miwmmxt: Likewise.

	* gas/elf/type.e: Updated.
@
text
@d5 1
@


1.1
log
@2003-05-01  H.J. Lu <hjl@@gnu.org>

	* gas/elf/elf.exp (run_list_test): Accept empty $opts.
	Add type test.

	* gas/elf/type.e: New file.
	* gas/elf/type.s: Likewise.
	* gas/elf/type.e-m32r: Likewise.
	* gas/elf/type.e-mips: Likewise.
	* gas/elf/type.e-miwmmxt: Likewise.
@
text
@d1 4
a4 11

Symbol table '.symtab' contains 8 entries:
   Num:    Value[ 	]* Size Type    Bind   Vis      Ndx Name
     0: 0+0     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0+0     0 SECTION LOCAL  DEFAULT    1 
     2: 0+0     0 SECTION LOCAL  DEFAULT    2 
     3: 0+0     0 SECTION LOCAL  DEFAULT    3 
     4: 0+0     1 FUNC    LOCAL  DEFAULT    . function
     5: 0+0     1 OBJECT  LOCAL  DEFAULT    . object
     6: 0+1     1 TLS     LOCAL  DEFAULT    . tls_object
     7: 0+2     1 NOTYPE  LOCAL  DEFAULT    . notype
@

