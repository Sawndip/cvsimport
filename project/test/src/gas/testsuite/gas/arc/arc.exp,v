head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.2
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.30
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.28
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.26
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.24
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.3
	binutils-2_20:1.3
	binutils-arc-20081103-branch:1.3.0.22
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.3.0.20
	binutils-2_20-branchpoint:1.3
	dje-cgen-play1-branch:1.3.0.18
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.16
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.14
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.12
	binutils-2_18-branchpoint:1.3
	binutils-csl-coldfire-4_1-32:1.3
	binutils-csl-sourcerygxx-4_1-32:1.3
	binutils-csl-innovasic-fido-3_4_4-33:1.3
	binutils-csl-sourcerygxx-3_4_4-32:1.3
	binutils-csl-coldfire-4_1-30:1.3
	binutils-csl-sourcerygxx-4_1-30:1.3
	binutils-csl-coldfire-4_1-28:1.3
	binutils-csl-sourcerygxx-4_1-29:1.3
	binutils-csl-sourcerygxx-4_1-28:1.3
	binutils-csl-arm-2006q3-27:1.3
	binutils-csl-sourcerygxx-4_1-27:1.3
	binutils-csl-arm-2006q3-26:1.3
	binutils-csl-sourcerygxx-4_1-26:1.3
	binutils-csl-sourcerygxx-4_1-25:1.3
	binutils-csl-sourcerygxx-4_1-24:1.3
	binutils-csl-sourcerygxx-4_1-23:1.3
	binutils-csl-sourcerygxx-4_1-21:1.3
	binutils-csl-arm-2006q3-21:1.3
	binutils-csl-sourcerygxx-4_1-22:1.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.3
	binutils-csl-sourcerygxx-4_1-20:1.3
	binutils-csl-arm-2006q3-19:1.3
	binutils-csl-sourcerygxx-4_1-19:1.3
	binutils-csl-sourcerygxx-4_1-18:1.3
	binutils-csl-renesas-4_1-9:1.3
	binutils-csl-sourcerygxx-3_4_4-25:1.3
	binutils-csl-renesas-4_1-8:1.3
	binutils-csl-renesas-4_1-7:1.3
	binutils-csl-renesas-4_1-6:1.3
	binutils-csl-sourcerygxx-4_1-17:1.3
	binutils-csl-sourcerygxx-4_1-14:1.3
	binutils-csl-sourcerygxx-4_1-15:1.3
	binutils-csl-sourcerygxx-4_1-13:1.3
	binutils-2_17:1.3
	binutils-csl-sourcerygxx-4_1-12:1.3
	binutils-csl-sourcerygxx-3_4_4-21:1.3
	binutils-csl-wrs-linux-3_4_4-24:1.3
	binutils-csl-wrs-linux-3_4_4-23:1.3
	binutils-csl-sourcerygxx-4_1-9:1.3
	binutils-csl-sourcerygxx-4_1-8:1.3
	binutils-csl-sourcerygxx-4_1-7:1.3
	binutils-csl-arm-2006q1-6:1.3
	binutils-csl-sourcerygxx-4_1-6:1.3
	binutils-csl-wrs-linux-3_4_4-22:1.3
	binutils-csl-coldfire-4_1-11:1.3
	binutils-csl-sourcerygxx-3_4_4-19:1.3
	binutils-csl-coldfire-4_1-10:1.3
	binutils-csl-sourcerygxx-4_1-5:1.3
	binutils-csl-sourcerygxx-4_1-4:1.3
	binutils-csl-wrs-linux-3_4_4-21:1.3
	binutils-csl-morpho-4_1-4:1.3
	binutils-csl-sourcerygxx-3_4_4-17:1.3
	binutils-csl-wrs-linux-3_4_4-20:1.3
	binutils-2_17-branch:1.3.0.10
	binutils-2_17-branchpoint:1.3
	binutils-csl-2_17-branch:1.3.0.8
	binutils-csl-2_17-branchpoint:1.3
	binutils-csl-gxxpro-3_4-branch:1.3.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.3
	binutils-2_16_1:1.3
	binutils-csl-arm-2005q1b:1.3
	binutils-2_16:1.3
	binutils-csl-arm-2005q1a:1.3
	binutils-csl-arm-2005q1-branch:1.3.0.4
	binutils-csl-arm-2005q1-branchpoint:1.3
	binutils-2_16-branch:1.3.0.2
	binutils-2_16-branchpoint:1.3
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.14
	cagney_bfdfile-20040213-branch:1.2.0.12
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.10
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.8
	binutils-2_14-branchpoint:1.2
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.6
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.4
	binutils-2_12-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	binutils-2_11_2:1.2
	binutils-2_11_1:1.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.4
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.12.17.16.55.49;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.03.12.13.23;	author ramana;	state Exp;
branches
	1.3.22.1;
next	1.2;

1.2
date	2001.01.11.21.20.18;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.48;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.3.22.1
date	2009.09.10.15.09.38;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.48;	author rth;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add copyright notices
@
text
@# Copyright 2012
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  

# ARC base instruction set (to arc8)
if [istarget arc*-*-*] then {
    run_dump_test ld
    run_dump_test ld2
    run_dump_test st

    # Specially encoded/single operand instructions
    run_dump_test flag
    run_dump_test brk
    run_dump_test sleep
    run_dump_test swi
    run_dump_test asr
    run_dump_test lsr
    run_dump_test ror
    run_dump_test rrc
    run_dump_test sexb
    run_dump_test sexw
    run_dump_test extb
    run_dump_test extw

    run_dump_test b
    run_dump_test bl
    run_dump_test lp
    run_dump_test j
    run_dump_test jl
    run_dump_test add
    run_dump_test asl
    # FIXME: ??? `lsl' gets dumped as `asl'
    # run_dump_test lsl
    run_dump_test adc
    run_dump_test rlc
    run_dump_test sub
    run_dump_test sbc
    run_dump_test and
    run_dump_test mov
    run_dump_test or
    run_dump_test bic
    run_dump_test xor
    run_dump_test nop
    run_dump_test extensions
}

# ARC library extensions
if [istarget arc*-*-*] then {
    # *TODO*
}
@


1.3
log
@2005-03-03  Ramana Radhakrishnan  <ramana.radhakrishnan@@codito.com>

	* gas/arc/extensions.s: Add tests for extcoreregister
	* gas/arc/extensions.d: Likewise.
	* gas/arc/warn.s: Warnings for readonly core registers
	accessed .
	* gas/arc/warn.d:Likewise.
	* testsuite/gas/arc/arc.exp:Run extensions testcase.
@
text
@d1 17
@


1.3.22.1
log
@Commit patches for ARCompact support to binutils-arc-20081103-branch .
@
text
@d5 1
a5 3
    
    # FIXME: ??? somehow unmeaningful diffs with st.d fails the testcase, commenting out for now - needs fixing eventually.  
    # run_dump_test st
d25 1
a25 2
    # FIXME: ??? somehow unmeaningful diffs with jl.d fails the testcase, commenting out for now - needs fixing eventually.  
    #run_dump_test jl
d29 12
a40 14
    #run_dump_test lsl
    #run_dump_test adc
    #run_dump_test rlc
    #run_dump_test sub
    #run_dump_test sbc
    #run_dump_test and
    #run_dump_test mov
    #run_dump_test or
    #run_dump_test bic
    #run_dump_test xor
    #run_dump_test nop
    #run_dump_test extensions

    #run_dump_test lsl_s
@


1.2
log
@Updated ARC assembler from arccores.com
@
text
@d40 1
@


1.1
log
@Initial revision
@
text
@d1 39
a39 70
# ARC gas testsuite

# Test an insn from a template .s/.d.
# The best way to create the .d file is to run the tests without it, let
# dejagnu crash, run as.new on the just built .s file, run objdump -dr on
# the result of that, copy the result into the .d file, and edit in the
# necessary patterns (@@OC@@, etc.).  Sounds complicated but it's easy.  The
# catch is that we assume a working assembler is used to build it.  That's
# obviously not entirely kosher, but once the .d file is created one can
# verify it's contents over time.
#
# Template patterns:
# @@OC@@ - placeholder for the opcode
# @@IC+?@@ - place holder for the insn code
# @@I3+??@@ - place holder for the operation code of code 3 insns.

proc test_template_insn { cpu tmpl opcode icode } {
    global srcdir subdir objdir

    # Change @@OC@@ in the template file to $opcode

    set in_fd [open $srcdir/$subdir/$tmpl.s r]
    set out_fd [open $objdir/$opcode.s w]
    # FIXME: check return codes

    puts $out_fd "\t.cpu $cpu\n"
    while { [gets $in_fd line] >= 0 } {
	regsub "@@OC@@" $line $opcode line
	puts $out_fd $line
    }

    close $in_fd
    close $out_fd

    # Create output template.

    set in_fd [open $srcdir/$subdir/$tmpl.d r]
    set out_fd [open $objdir/$opcode.d w]
    # FIXME: check return codes

    while { [gets $in_fd line] >= 0 } {
	regsub "@@OC@@" $line $opcode line
	#send_user "$line\n"
	if [string match "*@@IC+?@@*" $line] {
	    # Insert the opcode.  It occupies the top 5 bits.
	    regexp "^(.*)@@IC\\+(.)@@(.*)$" $line junk leftpart n rightpart
	    set n [expr ($icode << 3) + $n]
	    set n [format "%02x" $n]
	    puts $out_fd "$leftpart$n$rightpart"
	} elseif [string match "*@@I3+??@@*" $line] {
	    # Insert insn 3 code (register C field)
	    # b15=8/0, b8=1/0 (their respective hex values in the objdump)
	    regexp "^(.*)@@I3\\+(.)(.)@@(.*)$" $line junk leftpart b15 b8 rightpart
	    set n [expr ($icode << 1) + ($b15 << 4) + ($b8 << 0)]
	    set n [format "%02x" $n]
	    puts $out_fd "$leftpart$n$rightpart"
	} else {
	    puts $out_fd $line
	}
    }

    close $in_fd
    close $out_fd

    # Finally, run the test.

    run_dump_test $objdir/$opcode

    # "make clean" won't delete these, so for now we must.
    catch "exec rm -f $objdir/$opcode.s $objdir/$opcode.d"
d42 1
a42 2
# Run the tests.

d44 1
a44 38

    test_template_insn base math adc 9
    test_template_insn base math add 8
    test_template_insn base math and 12
    test_template_insn base math bic 14
    test_template_insn base math or 13
    test_template_insn base math sbc 11
    test_template_insn base math sub 10
    test_template_insn base math xor 15

    test_template_insn base alias mov 12
    test_template_insn base alias rlc 9
    test_template_insn base alias asl 8
# `lsl' gets dumped as `asl' so this must be tested elsewhere.
#   test_template_insn base alias lsl 8

    test_template_insn base sshift asr 1
    test_template_insn base sshift lsr 2
    test_template_insn base sshift ror 3
    test_template_insn base sshift rrc 4

    test_template_insn base branch b 4
    test_template_insn base branch bl 5
    test_template_insn base branch lp 6

    run_dump_test "j"

    test_template_insn base insn3 sexb 5
    test_template_insn base insn3 sexw 6
    test_template_insn base insn3 extb 7
    test_template_insn base insn3 extw 8

    run_dump_test "flag"
#    run_dump_test "nop"

    run_dump_test "ld"
    run_dump_test "st"

@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

