head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.2
	binutils-2_24-branchpoint:1.5
	binutils_latest_snapshot:1.5;
locks; strict;
comment	@# @;


1.5
date	2012.11.21.17.54.10;	author eager;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.21.17.34.13;	author eager;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.14.17.05.23;	author eager;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.14.16.45.01;	author eager;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.14.16.19.29;	author eager;	state Exp;
branches;
next	;


desc
@@


1.5
log
@

Add swap byte (swapb) and swap halfword (swaph) opcodes.

binutils/opcodes
          * microblaze-opc.h (op_code_struct): Add swapb, swaph Increase MAX_OPCODES.
          * microblaze-opcm.h (microblaze_instr): Likewise
binutils/gas/testsuite
          * gas/microblaze/allinsn.s: Add swapb, swaph
          * gas/microblaze/allinsn.d: Likewise
@
text
@#as:
#objdump: -d

.*: +file format .*

Disassembly of section .text:

00000000 <lbur>:
   0:	c0000200 	lbur	r0, r0, r0

00000004 <lhur>:
   4:	c4000200 	lhur	r0, r0, r0

00000008 <lwr>:
   8:	c8000200 	lwr	r0, r0, r0

0000000c <sbr>:
   c:	d0000200 	sbr	r0, r0, r0

00000010 <shr>:
  10:	d4000200 	shr	r0, r0, r0

00000014 <swr>:
  14:	d8000200 	swr	r0, r0, r0

00000018 <clz>:
  18:	900000e0 	clz	r0, r0

0000001c <mbar>:
  1c:	b8420004 	mbar	2

00000020 <sleep>:
  20:	ba020004 	sleep

00000024 <regslr>:
  24:	b0000000 	imm	0
  28:	31600000 	addik	r11, r0, 0
  2c:	940bc800 	mts	rslr, r11

00000030 <regshr>:
  30:	b0000000 	imm	0
  34:	31600000 	addik	r11, r0, 0
  38:	940bc802 	mts	rshr, r11

0000003c <swapb>:
  3c:	900001e0 	swapb	r0, r0

00000040 <swaph>:
  40:	900001e2 	swaph	r0, r0
@


1.4
log
@
Add stack high register and stack low register for MicroBlaze
hardware assisted stack protection, stores stack low / stack high limits
for detecting stack overflow / underflow

binutils/opcodes
          * microblaze-opcm.h: Add REG_SLR_MASK, REG_SHR_MASK, REG_SHR and REG_SLR
          * microblaze-dis.c (get_field_special): Handle REG_SLR_MASK and REG_SHR_MASK
binutils/gas
          * config/tc-microblaze.c (parse_reg): Parse REG_SLR, REG_SHR
binutils/gas
          * gas/microblaze/allinsn.s: Test use of SHR, SLR
          * gas/microblaze/allinsn.d: Likewise
@
text
@d44 6
@


1.3
log
@opcodes/
	* microblaze-opc.h: Define new instruction type INST_TYPE_IMM5,
	update OPCODE_MASK_H13S, add OPCODE_MASK_HN, define MIN_IMM5 / MAX_IMM5,
	and increase MAX_OPCODES.
	(op_code_struct):  add mbar and sleep
	* microblaze-opcm.h (microblaze_instr): add mbar
	Define IMM_MBAR and IMM5_MBAR_MASK
	* microblaze-dis.c: Add get_field_imm5_mbar
	(print_insn_microblaze): Add support for INST_TYPE_IMM5 and INST_TYPE_NONE

gas/
	* config/tc-microblaze.c (md_assemble): Add support for INST_TYPE_IMM5

gas/testsuite/
	* gas/microblaze/allinsn.s: Add mbar and sleep
	* gas/microblaze/allinsn.d: Likewise
@
text
@d34 10
@


1.2
log
@Add clz opcode.

opcodes/
	* microblaze-opc.h: Increase MAX_OPCODES (op_code_struct):  add clz insn
	* microblaze-opcm.h (microblaze_instr): add clz

gas/testsuite/
	* gas/microblaze/allinsn.s: Add clz insn
	* gas/microblaze/allinsn.d: Likewise
@
text
@d28 6
@


1.1
log
@Add the endian reversing versions of load/store instructions;

2012-11-14  Edgar E. Iglesias <edgar.iglesias@@gmail.com>

	* microblaze-opc.h: Increase MAX_OPCODES (op_code_struct):  add lbur,
	lhur, lwr, sbr, shr, swr
	* microblaze-opcm.h (microblaze_instr): add lbur, lhur, lwr, sbr, shr,
	swr

2012-11-14  David Holsgrove  <david.holsgrove@@xilinx.com>

	* gas/microblaze/allinsn.exp: New file - test newly added opcodes
	* gas/microblaze/allinsn.s: Likewise
	* gas/microblaze/allinsn.d: Likewise
@
text
@d25 3
@

