head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.12
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.5
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.10
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.8
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.6
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.4
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.4.0.10
	binutils-arc-20081103-branchpoint:1.4
	binutils-2_20-branch:1.5.0.2
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.4.0.8
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.4.0.6
	arc-20081103-branchpoint:1.4
	binutils-2_19_1:1.4
	binutils-2_19:1.4
	binutils-2_19-branch:1.4.0.4
	binutils-2_19-branchpoint:1.4
	binutils-2_18:1.4
	binutils-2_18-branch:1.4.0.2
	binutils-2_18-branchpoint:1.4
	binutils-csl-coldfire-4_1-32:1.1.2.1
	binutils-csl-sourcerygxx-4_1-32:1.1.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.1
	binutils-csl-coldfire-4_1-30:1.1.2.1
	binutils-csl-sourcerygxx-4_1-30:1.1.2.1
	binutils-csl-coldfire-4_1-28:1.1.2.1
	binutils-csl-sourcerygxx-4_1-29:1.1.2.1
	binutils-csl-sourcerygxx-4_1-28:1.1.2.1
	binutils-csl-arm-2006q3-27:1.1.2.1
	binutils-csl-sourcerygxx-4_1-27:1.1.2.1
	binutils-csl-arm-2006q3-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-25:1.1.2.1
	binutils-csl-sourcerygxx-4_1-24:1.1.2.1
	binutils-csl-sourcerygxx-4_1-23:1.1.2.1
	binutils-csl-sourcerygxx-4_1-21:1.1.2.1
	binutils-csl-arm-2006q3-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-22:1.1.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.1
	binutils-csl-sourcerygxx-4_1-20:1.1.2.1
	binutils-csl-arm-2006q3-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-18:1.1.2.1
	binutils-csl-renesas-4_1-9:1.1.2.1
	binutils-csl-renesas-4_1-8:1.1.2.1
	binutils-csl-renesas-4_1-7:1.1.2.1
	binutils-csl-renesas-4_1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-17:1.1.2.1
	binutils-csl-sourcerygxx-4_1-14:1.1.2.1
	binutils-csl-sourcerygxx-4_1-15:1.1.2.1
	binutils-csl-sourcerygxx-4_1-13:1.1.2.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-9:1.1.2.1
	binutils-csl-sourcerygxx-4_1-8:1.1.2.1
	binutils-csl-sourcerygxx-4_1-7:1.1.2.1
	binutils-csl-arm-2006q1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-6:1.1.2.1
	binutils-csl-coldfire-4_1-11:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.1
	binutils-csl-coldfire-4_1-10:1.1.2.1
	binutils-csl-sourcerygxx-4_1-5:1.1.2.1
	binutils-csl-sourcerygxx-4_1-4:1.1.2.1
	binutils-csl-morpho-4_1-4:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.2.1
	binutils_latest_snapshot:1.5
	binutils-csl-2_17-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.28.14.39.15;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.22.17.45.56;	author drow;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.03.00.03.34;	author jules;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	;


desc
@@


1.5
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@# name: Neon single and multiple register loads and stores
# as: -mfpu=neon
# objdump: -dr --prefix-addresses --show-raw-insn

.*: +file format .*arm.*

Disassembly of section \.text:
0[0-9a-f]+ <[^>]+> ec922b02 	vldmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec922b04 	vldmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec924b08 	vldmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecd28b10 	vldmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec923b20 	vldmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ec922b02 	vldmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec922b04 	vldmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec924b08 	vldmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecd28b10 	vldmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec923b20 	vldmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ecb22b02 	vldmia	r2!, {d2}
0[0-9a-f]+ <[^>]+> ecb22b04 	vldmia	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ecb24b08 	vldmia	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ecf28b10 	vldmia	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ecb23b20 	vldmia	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ed322b02 	vldmdb	r2!, {d2}
0[0-9a-f]+ <[^>]+> ed322b04 	vldmdb	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ed324b08 	vldmdb	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ed728b10 	vldmdb	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ed323b20 	vldmdb	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ec822b02 	vstmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec822b04 	vstmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec824b08 	vstmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecc28b10 	vstmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec823b20 	vstmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ec822b02 	vstmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec822b04 	vstmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec824b08 	vstmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecc28b10 	vstmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec823b20 	vstmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> eca22b02 	vstmia	r2!, {d2}
0[0-9a-f]+ <[^>]+> eca22b04 	vstmia	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> eca24b08 	vstmia	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ece28b10 	vstmia	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> eca23b20 	vstmia	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ed222b02 	vstmdb	r2!, {d2}
0[0-9a-f]+ <[^>]+> ed222b04 	vstmdb	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ed224b08 	vstmdb	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ed628b10 	vstmdb	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ed223b20 	vstmdb	r2!, {d3-d18}
0[0-9a-f]+ <backward> 000001f4 	.*
0[0-9a-f]+ <[^>]+> eddf6b0b 	vldr	d22, \[pc, #44\]	; 0[0-9a-f]+ <forward>
0[0-9a-f]+ <[^>]+> ed935b00 	vldr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed135b01 	vldr	d5, \[r3, #-4\]
0[0-9a-f]+ <[^>]+> ed935b01 	vldr	d5, \[r3, #4\]
0[0-9a-f]+ <[^>]+> ed835b00 	vstr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed035b01 	vstr	d5, \[r3, #-4\]
0[0-9a-f]+ <[^>]+> ed835b01 	vstr	d5, \[r3, #4\]
0[0-9a-f]+ <[^>]+> ed935b00 	vldr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed135b40 	vldr	d5, \[r3, #-256\].*
0[0-9a-f]+ <[^>]+> ed935b40 	vldr	d5, \[r3, #256\].*
0[0-9a-f]+ <[^>]+> ed835b00 	vstr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed035b40 	vstr	d5, \[r3, #-256\].*
0[0-9a-f]+ <[^>]+> ed835b40 	vstr	d5, \[r3, #256\].*
0[0-9a-f]+ <forward> 000002bc 	.*
0[0-9a-f]+ <[^>]+> ed1f7b11 	vldr	d7, \[pc, #-68\]	; 0[0-9a-f]+ <backward>
@


1.4
log
@PR 3729: Fix unexpected failures in ARM GAS testsuite results.
@
text
@d57 2
a58 2
0[0-9a-f]+ <[^>]+> ed135b40 	vldr	d5, \[r3, #-256\]
0[0-9a-f]+ <[^>]+> ed935b40 	vldr	d5, \[r3, #256\]
d60 2
a61 2
0[0-9a-f]+ <[^>]+> ed035b40 	vstr	d5, \[r3, #-256\]
0[0-9a-f]+ <[^>]+> ed835b40 	vstr	d5, \[r3, #256\]
@


1.3
log
@opcodes/
	* arm-dis.c (last_is_thumb): Delete.
	(enum map_type, last_type): New.
	(print_insn_data): New.
	(get_sym_code_type): Take MAP_TYPE argument.  Check the type of
	the right symbol.  Handle $d.
	(print_insn): Check for mapping symbols even without a normal
	symbol.  Adjust searching.  If $d is found see how much data
	to print.  Handle data.
gas/
	* config/tc-arm.h (md_cons_align): Define.
	(mapping_state): New prototype.
	* config/tc-arm.c (mapping_state): Make global.
gas/testsuite/
	* gas/arm/arm7t.d, gas/arm/neon-ldst-rm.d, gas/arm/thumb2_pool.d,
	gas/arm/tls.d: Update for $d support.
	* gas/arm/mapshort.d, gas/arm/mapshort.s: New test.
	* gas/elf/section2.e-armeabi: Update.
	* gas/elf/section2.e-armelf: New file.
	* gas/elf/elf.exp: Use it.
ld/testsuite/
	* ld-arm/mixed-app.d, ld-arm/tls-app.d, ld-arm/tls-lib.d: Update
	for $d support.
@
text
@d48 1
a48 1
0[0-9a-f]+ <backward> 000001f4 	.word	0x000001f4
d62 1
a62 1
0[0-9a-f]+ <forward> 000002bc 	.word	0x000002bc
@


1.2
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@d48 1
a48 1
0[0-9a-f]+ <backward> 000001f4 	streqd	r0, \[r0\], -r4
d62 1
a62 1
0[0-9a-f]+ <forward> 000002bc 	streqh	r0, \[r0\], -ip
@


1.1
log
@file neon-ldst-rm.d was initially added on branch binutils-csl-2_17-branch.
@
text
@d1 63
@


1.1.2.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@a0 63
# name: Neon single and multiple register loads and stores
# as: -mfpu=neon
# objdump: -dr --prefix-addresses --show-raw-insn

.*: +file format .*arm.*

Disassembly of section \.text:
0[0-9a-f]+ <[^>]+> ec922b02 	vldmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec922b04 	vldmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec924b08 	vldmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecd28b10 	vldmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec923b20 	vldmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ec922b02 	vldmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec922b04 	vldmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec924b08 	vldmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecd28b10 	vldmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec923b20 	vldmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ecb22b02 	vldmia	r2!, {d2}
0[0-9a-f]+ <[^>]+> ecb22b04 	vldmia	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ecb24b08 	vldmia	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ecf28b10 	vldmia	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ecb23b20 	vldmia	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ed322b02 	vldmdb	r2!, {d2}
0[0-9a-f]+ <[^>]+> ed322b04 	vldmdb	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ed324b08 	vldmdb	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ed728b10 	vldmdb	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ed323b20 	vldmdb	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ec822b02 	vstmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec822b04 	vstmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec824b08 	vstmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecc28b10 	vstmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec823b20 	vstmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> ec822b02 	vstmia	r2, {d2}
0[0-9a-f]+ <[^>]+> ec822b04 	vstmia	r2, {d2-d3}
0[0-9a-f]+ <[^>]+> ec824b08 	vstmia	r2, {d4-d7}
0[0-9a-f]+ <[^>]+> ecc28b10 	vstmia	r2, {d24-d31}
0[0-9a-f]+ <[^>]+> ec823b20 	vstmia	r2, {d3-d18}
0[0-9a-f]+ <[^>]+> eca22b02 	vstmia	r2!, {d2}
0[0-9a-f]+ <[^>]+> eca22b04 	vstmia	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> eca24b08 	vstmia	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ece28b10 	vstmia	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> eca23b20 	vstmia	r2!, {d3-d18}
0[0-9a-f]+ <[^>]+> ed222b02 	vstmdb	r2!, {d2}
0[0-9a-f]+ <[^>]+> ed222b04 	vstmdb	r2!, {d2-d3}
0[0-9a-f]+ <[^>]+> ed224b08 	vstmdb	r2!, {d4-d7}
0[0-9a-f]+ <[^>]+> ed628b10 	vstmdb	r2!, {d24-d31}
0[0-9a-f]+ <[^>]+> ed223b20 	vstmdb	r2!, {d3-d18}
0[0-9a-f]+ <backward> 000001f4 	streqd	r0, \[r0\], -r4
0[0-9a-f]+ <[^>]+> eddf6b0b 	vldr	d22, \[pc, #44\]	; 0[0-9a-f]+ <forward>
0[0-9a-f]+ <[^>]+> ed935b00 	vldr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed135b01 	vldr	d5, \[r3, #-4\]
0[0-9a-f]+ <[^>]+> ed935b01 	vldr	d5, \[r3, #4\]
0[0-9a-f]+ <[^>]+> ed835b00 	vstr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed035b01 	vstr	d5, \[r3, #-4\]
0[0-9a-f]+ <[^>]+> ed835b01 	vstr	d5, \[r3, #4\]
0[0-9a-f]+ <[^>]+> ed935b00 	vldr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed135b40 	vldr	d5, \[r3, #-256\]
0[0-9a-f]+ <[^>]+> ed935b40 	vldr	d5, \[r3, #256\]
0[0-9a-f]+ <[^>]+> ed835b00 	vstr	d5, \[r3\]
0[0-9a-f]+ <[^>]+> ed035b40 	vstr	d5, \[r3, #-256\]
0[0-9a-f]+ <[^>]+> ed835b40 	vstr	d5, \[r3, #256\]
0[0-9a-f]+ <forward> 000002bc 	streqh	r0, \[r0\], -ip
0[0-9a-f]+ <[^>]+> ed1f7b11 	vldr	d7, \[pc, #-68\]	; 0[0-9a-f]+ <backward>
@

