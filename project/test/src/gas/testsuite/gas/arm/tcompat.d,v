head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.12
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.5
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.10
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.8
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.6
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.4
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.5.0.2
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.4.0.2
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.3.0.6
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.4
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.1.2.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.2.1
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.1.2.1
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.1.2.1
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.1.2.1
	binutils-2_17-branch:1.2.0.4
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.2
	binutils-csl-2_17-branchpoint:1.2
	binutils_latest_snapshot:1.5
	binutils-csl-arm-2005q1b:1.1.2.1
	binutils-csl-arm-2005q1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.29.11.52.26;	author jsm28;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.21.19.45.05;	author rearnsha;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.18.05.40.10;	author zack;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.26.05.31.42;	author zack;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.04.26.05.31.42;	author zack;	state Exp;
branches;
next	;


desc
@@


1.5
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@#name: ARM Thumb-compat pseudos
#objdump: -dr --prefix-addresses --show-raw-insn
#as:

# Test the ARM pseudo instructions that exist for Thumb source compatibility

.*: +file format .*arm.*

Disassembly of section .text:

0+00 <[^>]*> 91a00000 ?	movls	r0, r0
0+04 <[^>]*> e1a09000 ?	mov	r9, r0
0+08 <[^>]*> e1a00009 ?	mov	r0, r9
0+0c <[^>]*> e1a0c00e ?	mov	ip, lr
0+10 <[^>]*> 91b09019 ?	lslsls	r9, r9, r0
0+14 <[^>]*> 91a00910 ?	lslls	r0, r0, r9
0+18 <[^>]*> e1b00880 ?	lsls	r0, r0, #17
0+1c <[^>]*> e1a00889 ?	lsl	r0, r9, #17
0+20 <[^>]*> 91b09039 ?	lsrsls	r9, r9, r0
0+24 <[^>]*> 91a00930 ?	lsrls	r0, r0, r9
0+28 <[^>]*> e1b008a0 ?	lsrs	r0, r0, #17
0+2c <[^>]*> e1a008a9 ?	lsr	r0, r9, #17
0+30 <[^>]*> 91b09059 ?	asrsls	r9, r9, r0
0+34 <[^>]*> 91a00950 ?	asrls	r0, r0, r9
0+38 <[^>]*> e1b008c0 ?	asrs	r0, r0, #17
0+3c <[^>]*> e1a008c9 ?	asr	r0, r9, #17
0+40 <[^>]*> 91b09079 ?	rorsls	r9, r9, r0
0+44 <[^>]*> 91a00970 ?	rorls	r0, r0, r9
0+48 <[^>]*> e1b008e0 ?	rors	r0, r0, #17
0+4c <[^>]*> e1a008e9 ?	ror	r0, r9, #17
0+50 <[^>]*> e2690000 ?	rsb	r0, r9, #0
0+54 <[^>]*> e2709000 ?	rsbs	r9, r0, #0
0+58 <[^>]*> 92600000 ?	rsbls	r0, r0, #0
0+5c <[^>]*> 92799000 ?	rsbsls	r9, r9, #0
0+60 <[^>]*> e92d000e ?	push	{r1, r2, r3}
0+64 <[^>]*> 992d8154 ?	pushls	{r2, r4, r6, r8, pc}
0+68 <[^>]*> e8bd000e ?	pop	{r1, r2, r3}
0+6c <[^>]*> 98bd8154 ?	popls	{r2, r4, r6, r8, pc}
0+70 <[^>]*> e0000001 ?	and	r0, r0, r1
0+74 <[^>]*> e0200001 ?	eor	r0, r0, r1
0+78 <[^>]*> e0400001 ?	sub	r0, r0, r1
0+7c <[^>]*> e0600001 ?	rsb	r0, r0, r1
0+80 <[^>]*> e0800001 ?	add	r0, r0, r1
0+84 <[^>]*> e0a00001 ?	adc	r0, r0, r1
0+88 <[^>]*> e0c00001 ?	sbc	r0, r0, r1
0+8c <[^>]*> e0e00001 ?	rsc	r0, r0, r1
0+90 <[^>]*> e1800001 ?	orr	r0, r0, r1
0+94 <[^>]*> e1c00001 ?	bic	r0, r0, r1
0+98 <[^>]*> e0000091 ?	mul	r0, r1, r0
0+9c <[^>]*> e1a00000 ?	nop			; \(mov r0, r0\)
0+a0 <[^>]*> e1a00069 ?	rrx	r0, r9
0+a4 <[^>]*> e1b09060 ?	rrxs	r9, r0
0+a8 <[^>]*> e1a00000 ?	nop			; \(mov r0, r0\)
0+ac <[^>]*> e1a00000 ?	nop			; \(mov r0, r0\)
@


1.4
log
@gas:
2009-01-29  Mark Mitchell  <mark@@codesourcery.com>

	* config/tc-arm.c (do_t_orn): New function.
	(do_t_rrx): Likewise.
	(insns): Add orn and rrx.

gas/testsuite:
2009-01-29  Mark Mitchell  <mark@@codesourcery.com>

	* gas/arm/thumb32.s: Add tests for orn and rrx.
	* gas/arm/thumb32.d: Adjust accordingly.
	* gas/arm/thumb32.l: Likewise.
	* gas/arm/thumb2_invert.s: Add tests for orn and orr.
	* gas/arm/thumb2_invert.d: Adjust accordingly.
	* gas/arm/tcompat.s: Add tests for rrx.
	* gas/arm/tcompat.d: Adjust accordingly.
@
text
@d31 4
a34 4
0+50 <[^>]*> e2690000 ?	rsb	r0, r9, #0	; 0x0
0+54 <[^>]*> e2709000 ?	rsbs	r9, r0, #0	; 0x0
0+58 <[^>]*> 92600000 ?	rsbls	r0, r0, #0	; 0x0
0+5c <[^>]*> 92799000 ?	rsbsls	r9, r9, #0	; 0x0
d50 1
a50 1
0+9c <[^>]*> e1a00000 ?	nop			\(mov r0,r0\)
d53 2
a54 2
0+a8 <[^>]*> e1a00000 ?	nop			\(mov r0,r0\)
0+ac <[^>]*> e1a00000 ?	nop			\(mov r0,r0\)
@


1.3
log
@	* gas/arm/arch4t.d: Convert to unified syntax.
	* gas/arm/archv6.d: Likewise.
	* gas/arm/archv6t2.d: Likewise.
	* gas/arm/arch3.d: Likewise.
	* gas/arm/arch7dm.d: Likewise.
	* gas/arm/arch7t.d: Likewise.
	* gas/arm/archv1.d: Likewise.
	* gas/arm/copro.d: Likewise.
	* gas/arm/inst.d: Likewise.
	* gas/arm/macro1.d: Likewise.
	* gas/arm/tcompat.d: Likewise.
	* gas/arm/wince_inst.d: Likewise.
	* gas/arm/xscale.d: Likewise.

	* gas/arm/thumb.d: White space cleanup.
	* gas/arm/thumb2_relax.d: Likewise.
	* gas/arm/thumb32.d: Likewise.
@
text
@d51 4
@


1.2
log
@include/elf:
	* arm.h: Import complete list of official relocation names
	and numbers from AAELF.  Define FAKE_RELOCs for old names.
	Remove a few old names no longer used anywhere.

bfd:
	* elf32-arm.c: Wherever possible, use official reloc names
	from AAELF.
	(elf32_arm_howto_table, elf32_arm_tls_gd32_howto)
	(elf32_arm_tls_ldo32_howto, elf32_arm_tls_ldm32_howto)
	(elf32_arm_tls_le32_howto, elf32_arm_tls_ie32_howto)
	(elf32_arm_vtinherit_howto, elf32_arm_vtentry_howto)
	(elf32_arm_pc11_howto, elf32_arm_thm_pc9_howto, elf32_arm_got_prel)
	(elf32_arm_r_howto): Replace with elf32_arm_howto_table_1,
	elf32_arm_howto_table_2, and elf32_arm_howto_table_3.
	Add many new relocations from AAELF.
	(elf32_arm_howto_from_type): Update to match.
	(elf32_arm_reloc_map): Add entries for R_ARM_THM_JUMP24,
	R_ARM_THM_JUMP11, R_ARM_THM_JUMP19, R_ARM_THM_JUMP8,
	R_ARM_THM_JUMP6, R_ARM_GNU_VTINHERIT, and R_ARM_GNU_VTENTRY.
	(elf32_arm_reloc_type_lookup): Use elf32_arm_howto_from_type.
	(elf32_arm_final_link_relocate): Add support for
	R_ARM_THM_JUMP24, R_ARM_THM_JUMP19, R_ARM_THM_JUMP6.  Remove
	case entries redundant with default.

	* reloc.c: Reorganize ARM relocations.  Add Thumb
	assembler-internal relocations BFD_RELOC_ARM_T32_OFFSET_U8,
	BFD_RELOC_ARM_T32_OFFSET_IMM, BFD_RELOC_ARM_T32_IMMEDIATE.
	Add visible relocations BFD_RELOC_THUMB_PCREL_BRANCH7,
	BFD_RELOC_THUMB_BRANCH20, BFD_RELOC_THUMB_BRANCH25.
	Delete unused relocations BFD_RELOC_ARM_GOT12, BFD_RELOC_ARM_COPY.
	* bfd-in2.h, libbfd.h: Regenerate.

opcodes:
	* arm-dis.c (thumb_opcodes): Add disassembly for V6T2 16-bit
	instructions.  Adjust disassembly of some opcodes to match
	unified syntax.
	(thumb32_opcodes): New table.
	(print_insn_thumb): Rename print_insn_thumb16; don't handle
	two-halfword branches here.
	(print_insn_thumb32): New function.
	(print_insn): Choose among print_insn_arm, print_insn_thumb16,
	and print_insn_thumb32.  Be consistent about order of
	halfwords when printing 32-bit instructions.

gas:
	* hash.c (hash_lookup): Add len parameter.  All callers changed.
	(hash_find_n): New interface.
	* hash.h: Prototype hash_find_n.
	* sb.c: Include as.h.
	(scrub_from_sb, sb_to_scrub, scrub_position): New statics.
	(sb_scrub_and_add_sb): New interface.
	* sb.h: Prototype sb_scrub_and_add_sb.
	* input-scrub.c (input_scrub_include_sb): Use sb_scrub_and_add_sb.

	* config/tc-arm.h (TC_FORCE_RELOCATION_LOCAL): Remove
	reference to BFD_RELOC_ARM_GOT12 which is never generated.
	* config/tc-arm.c: Rewrite, adding Thumb-2 support.

gas/testsuite:
	* gas/arm/arm.exp: Convert all existing "gas_test" tests to
	"run_dump_test" tests.  Run more tests unconditionally.  Run new tests.
	* gas/arm/arch4t.s, gas/arm/arch6zk.s, gas/arm/arm3.s, gas/arm/arm6.s
	* gas/arm/arm7dm.s, gas/arm/bignum1.s, gas/arm/float.s
	* gas/arm/immed.s, gas/arm/iwmmxt.s, gas/arm/offset.s, gas/arm/thumb.s:
	Adjust to work as a dump test.
	* gas/arm/arch4t.d, gas/arm/arch6zk.d, gas/arm/arm3.d, gas/arm/arm6.d
	* gas/arm/arm7dm.d, gas/arm/bignum1.d, gas/arm/float.d
	* gas/arm/immed.d, gas/arm/iwmmxt.d, gas/arm/offset.d, gas/arm/thumb.d:
	New files.

	* gas/arm/armv1-bad.l, gas/arm/armv1-bad.s: Remove tests for
	diagnostics that don't happen in the first pass anymore.

	* gas/arm/iwmmxt-bad.l, gas/arm/r15-bad.l, gas/arm/req.l
	* gas/arm/vfp-bad.l:
	Update expected diagnostics.
	* gas/arm/pic.d: Update expected reloc name.
	* gas/arm/thumbv6.d: CPY no longer appears in disassembly.
	* gas/arm/r15-bad.s: Avoid two-argument mul.
	* gas/arm/req.s: Adjust comments.
	* gas/arm/maverick.d, gas/arm/maverick.s: Avoid inappropriate
	use of PC.

	* gas/arm/macro-1.d, gas/arm/macro1.s
	* gas/arm/t16-bad.l, gas/arm/t16-bad.s
	* gas/arm/tcompat.d, gas/arm/tcompat.s
	* gas/arm/tcompat2.d, gas/arm/tcompat2.s
	* gas/arm/thumb32.d, gas/arm/thumb32.s
	New test pair.

ld/testsuite:
	* ld-arm/mixed-app.d: Adjust expected disassembly a little.
@
text
@d15 16
a30 16
0+10 <[^>]*> 91b09019 ?	movlss	r9, r9, lsl r0
0+14 <[^>]*> 91a00910 ?	movls	r0, r0, lsl r9
0+18 <[^>]*> e1b00880 ?	movs	r0, r0, lsl #17
0+1c <[^>]*> e1a00889 ?	mov	r0, r9, lsl #17
0+20 <[^>]*> 91b09039 ?	movlss	r9, r9, lsr r0
0+24 <[^>]*> 91a00930 ?	movls	r0, r0, lsr r9
0+28 <[^>]*> e1b008a0 ?	movs	r0, r0, lsr #17
0+2c <[^>]*> e1a008a9 ?	mov	r0, r9, lsr #17
0+30 <[^>]*> 91b09059 ?	movlss	r9, r9, asr r0
0+34 <[^>]*> 91a00950 ?	movls	r0, r0, asr r9
0+38 <[^>]*> e1b008c0 ?	movs	r0, r0, asr #17
0+3c <[^>]*> e1a008c9 ?	mov	r0, r9, asr #17
0+40 <[^>]*> 91b09079 ?	movlss	r9, r9, ror r0
0+44 <[^>]*> 91a00970 ?	movls	r0, r0, ror r9
0+48 <[^>]*> e1b008e0 ?	movs	r0, r0, ror #17
0+4c <[^>]*> e1a008e9 ?	mov	r0, r9, ror #17
d34 5
a38 5
0+5c <[^>]*> 92799000 ?	rsblss	r9, r9, #0	; 0x0
0+60 <[^>]*> e92d000e ?	stmdb	sp!, {r1, r2, r3}
0+64 <[^>]*> 992d8154 ?	stmlsdb	sp!, {r2, r4, r6, r8, pc}
0+68 <[^>]*> e8bd000e ?	ldmia	sp!, {r1, r2, r3}
0+6c <[^>]*> 98bd8154 ?	ldmlsia	sp!, {r2, r4, r6, r8, pc}
@


1.1
log
@file tcompat.d was initially added on branch binutils-csl-arm-2005q1-branch.
@
text
@d1 50
@


1.1.2.1
log
@	Thumb32 assembler.

	* include/elf/arm.h: Import full set of relocation names from
	latest AAELF.  Make the primary name of all relocations be the one
	AAELF specifies.  Provide aliases under the traditional names.
	Kill FIRST_INVALID_RELOC_* and LAST_INVALID_RELOC_*.
	* bfd/reloc.c: Reorganize ARM relocations.  Remove ARM relocations
	that are never generated.  Document more of the relocations.  Add
	relocations for Thumb32.
	* bfd/libbfd.h, bfd/bfd-in2.h: Regenerate.
	* bfd/elf32-arm.c: Reorganize howto tables.  Implement Thumb32
	relocations.
	* ld/testsuite/ld-arm/mixed-app.d: Adjust expectations for
	renamed relocations.

	* gas/hash.c (hash_find_n): New interface.
	* gas/hash.h: Prototype it.

	* gas/config/tc-arm.c: Rewrite and reorganize.  Implement 32-bit
	Thumb instructions.
	* gas/testsuite/gas/arm: Convert all "gas_test" style tests to
	"run_dump_test" style tests, for more thorough testing.  Make
	adjustments to expectations where necessary.
	* gas/testsuite/gas/arm/t16-bad.s, gas/testsuite/gas/arm/tcompat.s
	* gas/testsuite/gas/arm/tcompat2.s, gas/testsuite/gas/arm/thumb32.s:
	New test cases.

	* opcodes/arm-dis.c: Add support for Thumb32 instructions and
	16-bit V6T2 instructions.
@
text
@a0 50
#name: ARM Thumb-compat pseudos
#objdump: -dr --prefix-addresses --show-raw-insn
#as:

# Test the ARM pseudo instructions that exist for Thumb source compatibility

.*: +file format .*arm.*

Disassembly of section .text:

0+00 <[^>]*> 91a00000 ?	movls	r0, r0
0+04 <[^>]*> e1a09000 ?	mov	r9, r0
0+08 <[^>]*> e1a00009 ?	mov	r0, r9
0+0c <[^>]*> e1a0c00e ?	mov	ip, lr
0+10 <[^>]*> 91b09019 ?	movlss	r9, r9, lsl r0
0+14 <[^>]*> 91a00910 ?	movls	r0, r0, lsl r9
0+18 <[^>]*> e1b00880 ?	movs	r0, r0, lsl #17
0+1c <[^>]*> e1a00889 ?	mov	r0, r9, lsl #17
0+20 <[^>]*> 91b09039 ?	movlss	r9, r9, lsr r0
0+24 <[^>]*> 91a00930 ?	movls	r0, r0, lsr r9
0+28 <[^>]*> e1b008a0 ?	movs	r0, r0, lsr #17
0+2c <[^>]*> e1a008a9 ?	mov	r0, r9, lsr #17
0+30 <[^>]*> 91b09059 ?	movlss	r9, r9, asr r0
0+34 <[^>]*> 91a00950 ?	movls	r0, r0, asr r9
0+38 <[^>]*> e1b008c0 ?	movs	r0, r0, asr #17
0+3c <[^>]*> e1a008c9 ?	mov	r0, r9, asr #17
0+40 <[^>]*> 91b09079 ?	movlss	r9, r9, ror r0
0+44 <[^>]*> 91a00970 ?	movls	r0, r0, ror r9
0+48 <[^>]*> e1b008e0 ?	movs	r0, r0, ror #17
0+4c <[^>]*> e1a008e9 ?	mov	r0, r9, ror #17
0+50 <[^>]*> e2690000 ?	rsb	r0, r9, #0	; 0x0
0+54 <[^>]*> e2709000 ?	rsbs	r9, r0, #0	; 0x0
0+58 <[^>]*> 92600000 ?	rsbls	r0, r0, #0	; 0x0
0+5c <[^>]*> 92799000 ?	rsblss	r9, r9, #0	; 0x0
0+60 <[^>]*> e92d000e ?	stmdb	sp!, {r1, r2, r3}
0+64 <[^>]*> 992d8154 ?	stmlsdb	sp!, {r2, r4, r6, r8, pc}
0+68 <[^>]*> e8bd000e ?	ldmia	sp!, {r1, r2, r3}
0+6c <[^>]*> 98bd8154 ?	ldmlsia	sp!, {r2, r4, r6, r8, pc}
0+70 <[^>]*> e0000001 ?	and	r0, r0, r1
0+74 <[^>]*> e0200001 ?	eor	r0, r0, r1
0+78 <[^>]*> e0400001 ?	sub	r0, r0, r1
0+7c <[^>]*> e0600001 ?	rsb	r0, r0, r1
0+80 <[^>]*> e0800001 ?	add	r0, r0, r1
0+84 <[^>]*> e0a00001 ?	adc	r0, r0, r1
0+88 <[^>]*> e0c00001 ?	sbc	r0, r0, r1
0+8c <[^>]*> e0e00001 ?	rsc	r0, r0, r1
0+90 <[^>]*> e1800001 ?	orr	r0, r0, r1
0+94 <[^>]*> e1c00001 ?	bic	r0, r0, r1
0+98 <[^>]*> e0000091 ?	mul	r0, r1, r0
0+9c <[^>]*> e1a00000 ?	nop			\(mov r0,r0\)
@

