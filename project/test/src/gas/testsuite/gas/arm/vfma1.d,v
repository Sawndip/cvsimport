head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.10
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.8
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.6
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.4
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.2
	binutils-2_21-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2009.11.17.17.20.25;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.02.13.44.04;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.2
log
@        * gas/arm/vfma1.d: Only run on ELF based targets.

        PR binutils/10924
        * gas/arm/arch4t-eabi.d: Update expected disassembly.
        * gas/arm/arch4t.d: Likewise.
        * gas/arm/archv6t2.d: Likewise.
        * gas/arm/arm7t.d: Likewise.
        * gas/arm/inst.d: Likewise.
        * gas/arm/xscale.d: Likewise.

        PR binutils/10924
        * arm-dis.c (arm_opcodes): Add patterns to match undefined LDRB
        instruction variants.  Add pattern for MRS variant that was being
        confused with CMP.
        (arm_decode_shift): Place error message in a comment.
        (print_insn_arm): Note that writing back to the PC is
        unpredictable.
        Only print 'p' variants of cmp/cmn/teq/tst instructions if
        decoding for pre-V6 architectures.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#name: VFMA decoding
#as: -mcpu=arm7m
# This test is only valid on ELF based ports.
#not-target: *-*-*coff *-*-pe *-*-wince *-*-*aout* *-*-netbsd *-*-riscix*

# Test VFMA instruction disassembly

.*: *file format .*arm.*


Disassembly of section .text:
00000000 <[^>]*> ee000a00 	vmla.f32	s0, s0, s0
00000004 <[^>]*> ee000b00 	vmla.f64	d0, d0, d0
00000008 <[^>]*> f2000d10 	vmla.f32	d0, d0, d0
0000000c <[^>]*> f2000d50 	vmla.f32	q0, q0, q0
00000010 <[^>]*> eea00a00 	vfma.f32	s0, s0, s0
00000014 <[^>]*> eea00b00 	vfma.f64	d0, d0, d0
00000018 <[^>]*> f2000c10 	vfma.f32	d0, d0, d0
0000001c <[^>]*> f2000c50 	vfma.f32	q0, q0, q0
00000020 <[^>]*> ee000a40 	vmls.f32	s0, s0, s0
00000024 <[^>]*> ee000b40 	vmls.f64	d0, d0, d0
00000028 <[^>]*> f2200d10 	vmls.f32	d0, d0, d0
0000002c <[^>]*> f2200d50 	vmls.f32	q0, q0, q0
00000030 <[^>]*> eea00a40 	vfms.f32	s0, s0, s0
00000034 <[^>]*> eea00b40 	vfms.f64	d0, d0, d0
00000038 <[^>]*> f2200c10 	vfms.f32	d0, d0, d0
0000003c <[^>]*> f2200c50 	vfms.f32	q0, q0, q0
00000040 <[^>]*> ee100a40 	vnmla.f32	s0, s0, s0
00000044 <[^>]*> ee100b40 	vnmla.f64	d0, d0, d0
00000048 <[^>]*> ee900a40 	vfnma.f32	s0, s0, s0
0000004c <[^>]*> ee900b40 	vfnma.f64	d0, d0, d0
00000050 <[^>]*> ee100a00 	vnmls.f32	s0, s0, s0
00000054 <[^>]*> ee100b00 	vnmls.f64	d0, d0, d0
00000058 <[^>]*> ee900a00 	vfnms.f32	s0, s0, s0
0000005c <[^>]*> ee900b00 	vfnms.f64	d0, d0, d0
@


1.1
log
@2009-11-02  Paul Brook  <paul@@codesourcery.com>

	ld/testsuite/
	* ld-arm/arm-elf.exp: Add new attr-merge-vfp tests.
	* ld-arm/attr-merge-vfp-1.d: New test.
	* ld-arm/attr-merge-vfp-1r.d: New test.
	* ld-arm/attr-merge-vfp-2.d: New test.
	* ld-arm/attr-merge-vfp-2r.d: New test.
	* ld-arm/attr-merge-vfp-3.d: New test.
	* ld-arm/attr-merge-vfp-3r.d: New test.
	* ld-arm/attr-merge-vfp-4.d: New test.
	* ld-arm/attr-merge-vfp-4r.d: New test.
	* ld-arm/attr-merge-vfp-5.d: New test.
	* ld-arm/attr-merge-vfp-5r.d: New test.
	* ld-arm/attr-merge-vfp-2.s: New test.
	* ld-arm/attr-merge-vfp-3.s: New test.
	* ld-arm/attr-merge-vfp-3-d16.s: New test.
	* ld-arm/attr-merge-vfp-4.s: New test.
	* ld-arm/attr-merge-vfp-4-d16.s: New test.

	gas/
	* doc/c-arm.texi: Document new -mfpu options.
	* config/tc-arm.c (fpu_vfp_ext_v3xd, fpu_vfp_fp16, fpu_neon_ext_fma,
	fpu_vfp_ext_fma): New.
	(NEON_ENC_TAB): Add vfma, vfms, vfnma and vfnms.
	(do_vfp_nsyn_fma_fms, do_neon_fmac): New functions.
	(insns): Move double precision load/store.  Split out double
	precision VFPv3 instrucitons.  Add VFPv4 instructions.
	(arm_fpus): Add VFPv3-FP16, VFPv3xD and VFPv4 variants.
	(aeabi_set_public_attributes): Set VFPv4 variants

	gas/testsuite/
	* gas/arm/attr-mfpu-vfpv4.d: New test.
	* gas/arm/attr-mfpu-vfpv4-d16.d: New test.
	* gas/arm/neon-fma-cov.d: New test.
	* gas/arm/neon-fma-cov.s: New test.
	* gas/arm/vfp-fma-inc.s: New test.
	* gas/arm/vfp-fma-arm.d: New test.
	* gas/arm/vfp-fma-arm.s: New test.
	* gas/arm/vfp-fma-thumb.d: New test.
	* gas/arm/vfp-fma-thumb.s: New test.
	* gas/arm/vfma1.d: New test.
	* gas/arm/vfma1.s: New test.
	* gas/arm/vfpv3xd.d: New test.
	* gas/arm/vfpv3xd.s: New test.

	include/opcode/
	* arm.h (FPU_VFP_EXT_V3xD, FPU_VFP_EXT_FP16, FPU_NEON_EXT_FMA,
	FPU_VFP_EXT_FMA, FPU_VFP_V3xD, FPU_VFP_V4D16, FPU_VFP_V4): Define.
	(FPU_ARCH_VFP_V3D16_FP16, FPU_ARCH_VFP_V3_FP16, FPU_ARCH_VFP_V3xD,
	FPU_ARCH_VFP_V3xD_FP16, FPU_ARCH_VFP_V4, FPU_ARCH_VFP_V4D16,
	FPU_ARCH_NEON_VFP_V4): Define.

	binutils/
	* readelf.c (arm_attr_tag_VFP_arch): Add VFPv4 and VFPv4-D16.

	bfd/
	* elf32-arm.c (elf32_arm_merge_eabi_attributes): Handle VFPv4
	attributes.

	opcodes/
	* arm-dis.c (coprocessor_opcodes): Update to use new feature flags.
	Add VFPv4 instructions.
@
text
@d4 2
@

