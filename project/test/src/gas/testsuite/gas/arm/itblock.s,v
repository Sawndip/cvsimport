head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.22
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.20
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.18
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.16
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.14
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.12
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.10
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.8
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.6
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.4
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.2
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.1.2.1
	binutils-csl-sourcerygxx-4_1-32:1.1.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.1
	binutils-csl-coldfire-4_1-30:1.1.2.1
	binutils-csl-sourcerygxx-4_1-30:1.1.2.1
	binutils-csl-coldfire-4_1-28:1.1.2.1
	binutils-csl-sourcerygxx-4_1-29:1.1.2.1
	binutils-csl-sourcerygxx-4_1-28:1.1.2.1
	binutils-csl-arm-2006q3-27:1.1.2.1
	binutils-csl-sourcerygxx-4_1-27:1.1.2.1
	binutils-csl-arm-2006q3-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-25:1.1.2.1
	binutils-csl-sourcerygxx-4_1-24:1.1.2.1
	binutils-csl-sourcerygxx-4_1-23:1.1.2.1
	binutils-csl-sourcerygxx-4_1-21:1.1.2.1
	binutils-csl-arm-2006q3-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-22:1.1.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.1
	binutils-csl-sourcerygxx-4_1-20:1.1.2.1
	binutils-csl-arm-2006q3-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-18:1.1.2.1
	binutils-csl-renesas-4_1-9:1.1.2.1
	binutils-csl-renesas-4_1-8:1.1.2.1
	binutils-csl-renesas-4_1-7:1.1.2.1
	binutils-csl-renesas-4_1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-17:1.1.2.1
	binutils-csl-sourcerygxx-4_1-14:1.1.2.1
	binutils-csl-sourcerygxx-4_1-15:1.1.2.1
	binutils-csl-sourcerygxx-4_1-13:1.1.2.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-9:1.1.2.1
	binutils-csl-sourcerygxx-4_1-8:1.1.2.1
	binutils-csl-sourcerygxx-4_1-7:1.1.2.1
	binutils_latest_snapshot:1.2
	binutils-csl-arm-2006q1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-6:1.1.2.1
	binutils-csl-coldfire-4_1-11:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.1
	binutils-csl-coldfire-4_1-10:1.1.2.1
	binutils-csl-sourcerygxx-4_1-5:1.1.2.1
	binutils-csl-2_17-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2006.06.07.14.31.51;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.05.18.31.29;	author jules;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.05.05.18.31.29;	author jules;	state Exp;
branches;
next	;


desc
@@


1.2
log
@    * gas/arm/itblock.s: New file. Helper macro for making all-true IT
    blocks.
    * gas/arm/neon-cond-bad-inc.s: New test. Make sure unconditional
    Neon instructions are rejected...
    * gas/arm/neon-cond-bad.s: In ARM mode, and...
    * gas/arm/neon-cond-bad_t2.s: Accepted in Thumb mode (with IT).
    * gas/arm/neon-cond-bad.l: Expected error output in ARM mode.
    * gas/arm/neon-cond-bad.d: Control ARM mode test.
    * gas/arm/neon-cond-bad_t2.d: Expected output in Thumb mode.
    * gas/arm/vfp-neon-syntax-inc.s: Test VFP Neon-style syntax.
    * gas/arm/vfp-neon-syntax.s: ...in ARM mode.
    * gas/arm/vfp-neon-syntax_t2.s: ...and Thumb mode.
    * gas/arm/vfp-neon-syntax.d: Expected output in ARM mode.
    * gas/arm/vfp-neon-syntax_t2.d: Expected output in Thumb mode.
@
text
@# All-true IT block macro.

	.macro itblock num cond=""
	.if x\cond != x
	.if \num == 4
	itttt \cond
	.else
	.if \num == 3
	ittt \cond
	.else
	.if \num == 2
	itt \cond
	.else
	.if \num == 1
	.it \cond
	.endif
	.endif
	.endif
	.endif
	.endif
	.endm
@


1.1
log
@file itblock.s was initially added on branch binutils-csl-2_17-branch.
@
text
@d1 21
@


1.1.2.1
log
@	* gas/config/tc-arm.c (stdarg.h): include.
	(arm_it): Add uncond_value field. Add isvec and issingle to operand
	array.
	(arm_reg_type): Add REG_TYPE_VFSD (single or double VFP reg) and
	REG_TYPE_NSDQ (single, double or quad vector reg).
	(reg_expected_msgs): Update.
	(BAD_FPU): Add macro for unsupported FPU instruction error.
	(parse_neon_type): Support 'd' as an alias for .f64.
	(parse_typed_reg_or_scalar): Support REG_TYPE_VFSD, REG_TYPE_NSDQ
	sets of registers.
	(parse_vfp_reg_list): Don't update first arg on error.
	(parse_neon_mov): Support extra syntax for VFP moves.
	(operand_parse_code): Add OP_RVSD, OP_RNSDQ, OP_VRSDLST, OP_RVSD_IO,
	OP_RNSDQ_RNSC, OP_RVC_PSR, OP_APSR_RR, OP_oRNSDQ.
	(parse_operands): Support isvec, issingle operands fields, new parse
	codes above.
	(do_vfp_nsyn_mrs, do_vfp_nsyn_msr): New functions. Support VFP mrs,
	msr variants.
	(do_mrs, do_msr, do_t_mrs, do_t_msr): Add support for above.
	(NEON_ENC_TAB): Add vnmul, vnmla, vnmls, vcmp, vcmpz, vcmpe, vcmpez.
	(NEON_ENC_SINGLE, NEON_ENC_DOUBLE): Define macros.
	(NEON_SHAPE_DEF): New macro. Define table of possible instruction
	shapes.
	(neon_shape): Redefine in terms of above.
	(neon_shape_class): New enumeration, table of shape classes.
	(neon_shape_el): New enumeration. One element of a shape.
	(neon_shape_el_size): Register widths of above, where appropriate.
	(neon_shape_info): New struct. Info for shape table.
	(neon_shape_tab): New array.
	(neon_type_mask): Add N_F64, N_VFP. Update N_MAX_NONSPECIAL.
	(neon_check_shape): Rewrite as...
	(neon_select_shape): New function to classify instruction shapes,
	driven by new table neon_shape_tab array.
	(neon_quad): New function. Return 1 if shape should set Q flag in
	instructions (or equivalent), 0 otherwise.
	(type_chk_of_el_type): Support F64.
	(el_type_of_type_chk): Likewise.
	(neon_check_type): Add support for VFP type checking (VFP data
	elements fill their containing registers).
	(do_vfp_cond_or_thumb): Fill in condition field in ARM mode, or 0xE
	in thumb mode for VFP instructions.
	(do_vfp_nsyn_opcode): New function. Look up the opcode in argument,
	and encode the current instruction as if it were that opcode.
	(try_vfp_nsyn): New. If this looks like a VFP instruction with ARGS
	arguments, call function in PFN.
	(do_vfp_nsyn_add_sub, do_vfp_nsyn_mla_mls, do_vfp_nsyn_mul)
	(do_vfp_nsyn_abs_neg, do_vfp_nsyn_ldm_stm, do_vfp_nsyn_ldr_str)
	(do_vfp_nsyn_sqrt, do_vfp_nsyn_div, do_vfp_nsyn_nmul)
	(do_vfp_nsyn_cmp, nsyn_insert_sp, do_vfp_nsyn_push)
	(do_vfp_nsyn_pop, do_vfp_nsyn_cvt, do_vfp_nsyn_cvtz): New functions.
	Redirect Neon-syntax VFP instructions to VFP instruction handlers.
	(do_neon_dyadic_i_su, do_neon_dyadic_i64_su, do_neon_shl_imm)
	(do_neon_qshl_imm, do_neon_logic, do_neon_bitfield)
	(neon_dyadic_misc, neon_compare, do_neon_tst, do_neon_qdmulh)
	(do_neon_fcmp_absolute, do_neon_step, do_neon_sli, do_neon_sri)
	(do_neon_qshlu_imm, neon_move_immediate, do_neon_mvn, do_neon_ext)
	(do_neon_rev, do_neon_dup, do_neon_rshift_round_imm, do_neon_trn)
	(do_neon_zip_uzp, do_neon_sat_abs_neg, do_neon_pair_long)
	(do_neon_recip_est, do_neon_cls, do_neon_clz, do_neon_cnt)
	(do_neon_swp): Use neon_select_shape not neon_check_shape. Use
	neon_quad.
	(vfp_or_neon_is_neon): New function. Call if a mnemonic shared
	between VFP and Neon turns out to belong to Neon. Perform
	architecture check and fill in condition field if appropriate.
	(do_neon_addsub_if_i, do_neon_mac_maybe_scalar, do_neon_abs_neg)
	(do_neon_cvt): Add support for VFP variants of instructions.
	(neon_cvt_flavour): Extend to cover VFP conversions.
	(do_neon_mov): Rewrite to use neon_select_shape. Add support for VFP
	vmov variants.
	(do_neon_ldr_str): Handle single-precision VFP load/store.
	(do_neon_ld_st_interleave, do_neon_ld_st_lane, do_neon_ld_dup): Use
	NS_NULL not NS_IGNORE.
	(opcode_tag): Add OT_csuffixF for operands which either take a
	conditional suffix, or have 0xF in the condition field.
	(md_assemble): Add support for OT_csuffixF.
	(NCE): Replace macro with...
	(NCE_tag, NCE, NCEF): New macros.
	(nCE): Replace macro with...
	(nCE_tag, nCE, nCEF): New macros.
	(insns): Add support for VFP insns or VFP versions of insns msr, mrs,
	vsqrt, vdiv, vnmul, vnmla, vnmls, vcmp, vcmpe, vpush, vpop, vcvtz,
	vmul, vmla, vmls, vadd, vsub, vabs, vneg, vldm, vldmia, vldbdb, vstm,
	vstmia, vstmdb, vldr, vstr, vcvt, vmov. Group shared VFP/Neon insns
	together.

	* gas/testsuite/gas/arm/itblock.s: New file. Helper macro for making
	all-true IT blocks.
	* gas/testsuite/gas/arm/neon-cond-bad-inc.s: New test. Make sure
	unconditional Neon instructions are rejected...
	* gas/testsuite/gas/arm/neon-cond-bad.s: In ARM mode, and...
	* gas/testsuite/gas/arm/neon-cond-bad_t2.s: Accepted in Thumb mode
	(with IT).
	* gas/testsuite/gas/arm/neon-cond-bad.l: Expected error output in ARM
	mode.
	* gas/testsuite/gas/arm/neon-cond-bad.d: Control ARM mode test.
	* gas/testsuite/gas/arm/neon-cond-bad_t2.d: Expected output in Thumb
	mode.
	* gas/testsuite/gas/arm/vfp-neon-syntax-inc.s: Test VFP Neon-style
	syntax.
	* gas/testsuite/gas/arm/vfp-neon-syntax.s: ...in ARM mode.
	* gas/testsuite/gas/arm/vfp-neon-syntax_t2.s: ...and Thumb mode.
	* gas/testsuite/gas/arm/vfp-neon-syntax.d: Expected output in ARM mode.
	* gas/testsuite/gas/arm/vfp-neon-syntax_t2.d: Expected output in Thumb
	mode.
@
text
@a0 21
# All-true IT block macro.

	.macro itblock num cond=""
	.if x\cond != x
	.if \num == 4
	itttt \cond
	.else
	.if \num == 3
	ittt \cond
	.else
	.if \num == 2
	itt \cond
	.else
	.if \num == 1
	.it \cond
	.endif
	.endif
	.endif
	.endif
	.endif
	.endm
@

