head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.10
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.8
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.8.0.6
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.4
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.2
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.7
	binutils-2_20:1.7
	binutils-arc-20081103-branch:1.5.0.8
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.7.0.2
	binutils-2_20-branchpoint:1.7
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	arc-20081103-branch:1.5.0.6
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.4
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.5
	binutils-2_18-branch:1.5.0.2
	binutils-2_18-branchpoint:1.5
	binutils-csl-coldfire-4_1-32:1.1.2.3
	binutils-csl-sourcerygxx-4_1-32:1.1.2.3
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.3
	binutils-csl-coldfire-4_1-30:1.1.2.3
	binutils-csl-sourcerygxx-4_1-30:1.1.2.3
	binutils-csl-coldfire-4_1-28:1.1.2.3
	binutils-csl-sourcerygxx-4_1-29:1.1.2.3
	binutils-csl-sourcerygxx-4_1-28:1.1.2.3
	binutils-csl-arm-2006q3-27:1.1.2.3
	binutils-csl-sourcerygxx-4_1-27:1.1.2.3
	binutils-csl-arm-2006q3-26:1.1.2.3
	binutils-csl-sourcerygxx-4_1-26:1.1.2.3
	binutils-csl-sourcerygxx-4_1-25:1.1.2.3
	binutils-csl-sourcerygxx-4_1-24:1.1.2.3
	binutils-csl-sourcerygxx-4_1-23:1.1.2.3
	binutils-csl-sourcerygxx-4_1-21:1.1.2.3
	binutils-csl-arm-2006q3-21:1.1.2.3
	binutils-csl-sourcerygxx-4_1-22:1.1.2.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.3
	binutils-csl-sourcerygxx-4_1-20:1.1.2.3
	binutils-csl-arm-2006q3-19:1.1.2.3
	binutils-csl-sourcerygxx-4_1-19:1.1.2.3
	binutils-csl-sourcerygxx-4_1-18:1.1.2.3
	binutils-csl-renesas-4_1-9:1.1.2.3
	binutils-csl-renesas-4_1-8:1.1.2.3
	binutils-csl-renesas-4_1-7:1.1.2.3
	binutils-csl-renesas-4_1-6:1.1.2.3
	binutils-csl-sourcerygxx-4_1-17:1.1.2.3
	binutils-csl-sourcerygxx-4_1-14:1.1.2.3
	binutils-csl-sourcerygxx-4_1-15:1.1.2.3
	binutils-csl-sourcerygxx-4_1-13:1.1.2.3
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.3
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.3
	binutils-csl-sourcerygxx-4_1-9:1.1.2.3
	binutils-csl-sourcerygxx-4_1-8:1.1.2.3
	binutils-csl-sourcerygxx-4_1-7:1.1.2.3
	binutils-csl-arm-2006q1-6:1.1.2.3
	binutils-csl-sourcerygxx-4_1-6:1.1.2.3
	binutils-csl-coldfire-4_1-11:1.1.2.3
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.3
	binutils-csl-coldfire-4_1-10:1.1.2.3
	binutils-csl-sourcerygxx-4_1-5:1.1.2.3
	binutils-csl-sourcerygxx-4_1-4:1.1.2.3
	binutils-csl-morpho-4_1-4:1.1.2.2
	binutils-csl-sourcerygxx-3_4_4-17:1.1.2.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.8;
locks; strict;
comment	@# @;


1.8
date	2010.01.13.19.01.09;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.29.08.08.15;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.15.17.24.12;	author rearnsha;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.26.21.36.37;	author pbrook;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.07.14.08.18;	author pbrook;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.05.18.53.09;	author jules;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.02.13.12.42;	author pbrook;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.04.26.16.30.48;	author jules;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.04.29.17.54.31;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	gas/
	* config/tc-arm.c (do_t_nop): Correct check for Thumb-2 NOP.

	gas/testsuite/
	* gas/arm/thumb-nop.d, gas/arm/thumb-nop.s: New test.
	* gas/arm/relax_branch_align.d: Expect a default NOP instruction.
	* gas/arm/vfp1_t2.d, gas/arm/vfp1xD_t2.d: Specify a CPU with
	Thumb-2.

	ld/testsuite/
	* ld-arm/arm-elf.exp (armelftests): Assemble Cortex-A8 tests with
	-mcpu=cortex-a8.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#name: Thumb-2 VFP Single-precision instructions
#as: -mfpu=vfpxd -mcpu=arm1156t2f-s

# Test the ARM VFP Single Precision instructions

.*: +file format .*arm.*

Disassembly of section .text:
0+000 <[^>]*> eef1 fa10 	(vmrs	APSR_nzcv, fpscr|fmstat)
0+004 <[^>]*> eeb4 0ac0 	(vcmpe\.f32|fcmpes)	s0, s0
0+008 <[^>]*> eeb5 0ac0 	(vcmpe\.f32	s0, #0.0|fcmpezs	s0)
0+00c <[^>]*> eeb4 0a40 	(vcmp\.f32|fcmps)	s0, s0
0+010 <[^>]*> eeb5 0a40 	(vcmp\.f32	s0, #0.0|fcmpzs	s0)
0+014 <[^>]*> eeb0 0ac0 	(vabs\.f32|fabss)	s0, s0
0+018 <[^>]*> eeb0 0a40 	(vmov\.f32|fcpys)	s0, s0
0+01c <[^>]*> eeb1 0a40 	(vneg\.f32|fnegs)	s0, s0
0+020 <[^>]*> eeb1 0ac0 	(vsqrt\.f32|fsqrts)	s0, s0
0+024 <[^>]*> ee30 0a00 	(vadd\.f32|fadds)	s0, s0, s0
0+028 <[^>]*> ee80 0a00 	(vdiv\.f32|fdivs)	s0, s0, s0
0+02c <[^>]*> ee00 0a00 	(vmla\.f32|fmacs)	s0, s0, s0
0+030 <[^>]*> ee10 0a00 	(vnmls\.f32|fmscs)	s0, s0, s0
0+034 <[^>]*> ee20 0a00 	(vmul\.f32|fmuls)	s0, s0, s0
0+038 <[^>]*> ee00 0a40 	(vmls\.f32|fnmacs)	s0, s0, s0
0+03c <[^>]*> ee10 0a40 	(vnmla\.f32|fnmscs)	s0, s0, s0
0+040 <[^>]*> ee20 0a40 	(vnmul\.f32|fnmuls)	s0, s0, s0
0+044 <[^>]*> ee30 0a40 	(vsub\.f32|fsubs)	s0, s0, s0
0+048 <[^>]*> ed90 0a00 	(vldr|flds)	s0, \[r0\]
0+04c <[^>]*> ed80 0a00 	(vstr|fsts)	s0, \[r0\]
0+050 <[^>]*> ec90 0a01 	(vldmia|fldmias)	r0, {s0}
0+054 <[^>]*> ec90 0a01 	(vldmia|fldmias)	r0, {s0}
0+058 <[^>]*> ecb0 0a01 	(vldmia|fldmias)	r0!, {s0}
0+05c <[^>]*> ecb0 0a01 	(vldmia|fldmias)	r0!, {s0}
0+060 <[^>]*> ed30 0a01 	(vldmdb|fldmdbs)	r0!, {s0}
0+064 <[^>]*> ed30 0a01 	(vldmdb|fldmdbs)	r0!, {s0}
0+068 <[^>]*> ec90 0b03 	fldmiax	r0, {d0}(	;@@ Deprecated|)
0+06c <[^>]*> ec90 0b03 	fldmiax	r0, {d0}(	;@@ Deprecated|)
0+070 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}(	;@@ Deprecated|)
0+074 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}(	;@@ Deprecated|)
0+078 <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}(	;@@ Deprecated|)
0+07c <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}(	;@@ Deprecated|)
0+080 <[^>]*> ec80 0a01 	(vstmia|fstmias)	r0, {s0}
0+084 <[^>]*> ec80 0a01 	(vstmia|fstmias)	r0, {s0}
0+088 <[^>]*> eca0 0a01 	(vstmia|fstmias)	r0!, {s0}
0+08c <[^>]*> eca0 0a01 	(vstmia|fstmias)	r0!, {s0}
0+090 <[^>]*> ed20 0a01 	(vstmdb|fstmdbs)	r0!, {s0}
0+094 <[^>]*> ed20 0a01 	(vstmdb|fstmdbs)	r0!, {s0}
0+098 <[^>]*> ec80 0b03 	fstmiax	r0, {d0}(	;@@ Deprecated|)
0+09c <[^>]*> ec80 0b03 	fstmiax	r0, {d0}(	;@@ Deprecated|)
0+0a0 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}(	;@@ Deprecated|)
0+0a4 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}(	;@@ Deprecated|)
0+0a8 <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}(	;@@ Deprecated|)
0+0ac <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}(	;@@ Deprecated|)
0+0b0 <[^>]*> eeb8 0ac0 	(vcvt\.f32\.s32|fsitos)	s0, s0
0+0b4 <[^>]*> eeb8 0a40 	(vcvt\.f32\.u32|fuitos)	s0, s0
0+0b8 <[^>]*> eebd 0a40 	(vcvtr\.s32\.f32|ftosis)	s0, s0
0+0bc <[^>]*> eebd 0ac0 	(vcvt\.s32\.f32|ftosizs)	s0, s0
0+0c0 <[^>]*> eebc 0a40 	(vcvtr\.u32\.f32|ftouis)	s0, s0
0+0c4 <[^>]*> eebc 0ac0 	(vcvt\.u32\.f32|ftouizs)	s0, s0
0+0c8 <[^>]*> ee10 0a10 	(vmov|fmrs)	r0, s0
0+0cc <[^>]*> eef0 0a10 	(vmrs|fmrx)	r0, fpsid
0+0d0 <[^>]*> eef1 0a10 	(vmrs|fmrx)	r0, fpscr
0+0d4 <[^>]*> eef8 0a10 	(vmrs|fmrx)	r0, fpexc
0+0d8 <[^>]*> ee00 0a10 	(vmov|fmsr)	s0, r0
0+0dc <[^>]*> eee0 0a10 	(vmsr|fmxr)	fpsid, r0
0+0e0 <[^>]*> eee1 0a10 	(vmsr|fmxr)	fpscr, r0
0+0e4 <[^>]*> eee8 0a10 	(vmsr|fmxr)	fpexc, r0
0+0e8 <[^>]*> eef5 0a40 	(vcmp\.f32	s1, #0.0|fcmpzs	s1)
0+0ec <[^>]*> eeb5 1a40 	(vcmp\.f32	s2, #0.0|fcmpzs	s2)
0+0f0 <[^>]*> eef5 fa40 	(vcmp\.f32	s31, #0.0|fcmpzs	s31)
0+0f4 <[^>]*> eeb4 0a60 	(vcmp\.f32|fcmps)	s0, s1
0+0f8 <[^>]*> eeb4 0a41 	(vcmp\.f32|fcmps)	s0, s2
0+0fc <[^>]*> eeb4 0a6f 	(vcmp\.f32|fcmps)	s0, s31
0+100 <[^>]*> eef4 0a40 	(vcmp\.f32|fcmps)	s1, s0
0+104 <[^>]*> eeb4 1a40 	(vcmp\.f32|fcmps)	s2, s0
0+108 <[^>]*> eef4 fa40 	(vcmp\.f32|fcmps)	s31, s0
0+10c <[^>]*> eef4 aa46 	(vcmp\.f32|fcmps)	s21, s12
0+110 <[^>]*> eeb1 0a60 	(vneg\.f32|fnegs)	s0, s1
0+114 <[^>]*> eeb1 0a41 	(vneg\.f32|fnegs)	s0, s2
0+118 <[^>]*> eeb1 0a6f 	(vneg\.f32|fnegs)	s0, s31
0+11c <[^>]*> eef1 0a40 	(vneg\.f32|fnegs)	s1, s0
0+120 <[^>]*> eeb1 1a40 	(vneg\.f32|fnegs)	s2, s0
0+124 <[^>]*> eef1 fa40 	(vneg\.f32|fnegs)	s31, s0
0+128 <[^>]*> eeb1 6a6a 	(vneg\.f32|fnegs)	s12, s21
0+12c <[^>]*> ee30 0a20 	(vadd\.f32|fadds)	s0, s0, s1
0+130 <[^>]*> ee30 0a01 	(vadd\.f32|fadds)	s0, s0, s2
0+134 <[^>]*> ee30 0a2f 	(vadd\.f32|fadds)	s0, s0, s31
0+138 <[^>]*> ee30 0a80 	(vadd\.f32|fadds)	s0, s1, s0
0+13c <[^>]*> ee31 0a00 	(vadd\.f32|fadds)	s0, s2, s0
0+140 <[^>]*> ee3f 0a80 	(vadd\.f32|fadds)	s0, s31, s0
0+144 <[^>]*> ee70 0a00 	(vadd\.f32|fadds)	s1, s0, s0
0+148 <[^>]*> ee30 1a00 	(vadd\.f32|fadds)	s2, s0, s0
0+14c <[^>]*> ee70 fa00 	(vadd\.f32|fadds)	s31, s0, s0
0+150 <[^>]*> ee3a 6aa2 	(vadd\.f32|fadds)	s12, s21, s5
0+154 <[^>]*> eeb8 0ae0 	(vcvt\.f32\.s32|fsitos)	s0, s1
0+158 <[^>]*> eeb8 0ac1 	(vcvt\.f32\.s32|fsitos)	s0, s2
0+15c <[^>]*> eeb8 0aef 	(vcvt\.f32\.s32|fsitos)	s0, s31
0+160 <[^>]*> eef8 0ac0 	(vcvt\.f32\.s32|fsitos)	s1, s0
0+164 <[^>]*> eeb8 1ac0 	(vcvt\.f32\.s32|fsitos)	s2, s0
0+168 <[^>]*> eef8 fac0 	(vcvt\.f32\.s32|fsitos)	s31, s0
0+16c <[^>]*> eebd 0a60 	(vcvtr\.s32\.f32|ftosis)	s0, s1
0+170 <[^>]*> eebd 0a41 	(vcvtr\.s32\.f32|ftosis)	s0, s2
0+174 <[^>]*> eebd 0a6f 	(vcvtr\.s32\.f32|ftosis)	s0, s31
0+178 <[^>]*> eefd 0a40 	(vcvtr\.s32\.f32|ftosis)	s1, s0
0+17c <[^>]*> eebd 1a40 	(vcvtr\.s32\.f32|ftosis)	s2, s0
0+180 <[^>]*> eefd fa40 	(vcvtr\.s32\.f32|ftosis)	s31, s0
0+184 <[^>]*> ee00 1a10 	(vmov|fmsr)	s0, r1
0+188 <[^>]*> ee00 7a10 	(vmov|fmsr)	s0, r7
0+18c <[^>]*> ee00 ea10 	(vmov|fmsr)	s0, lr
0+190 <[^>]*> ee00 0a90 	(vmov|fmsr)	s1, r0
0+194 <[^>]*> ee01 0a10 	(vmov|fmsr)	s2, r0
0+198 <[^>]*> ee0f 0a90 	(vmov|fmsr)	s31, r0
0+19c <[^>]*> ee0a 7a90 	(vmov|fmsr)	s21, r7
0+1a0 <[^>]*> eee0 1a10 	(vmsr|fmxr)	fpsid, r1
0+1a4 <[^>]*> eee0 ea10 	(vmsr|fmxr)	fpsid, lr
0+1a8 <[^>]*> ee10 0a90 	(vmov|fmrs)	r0, s1
0+1ac <[^>]*> ee11 0a10 	(vmov|fmrs)	r0, s2
0+1b0 <[^>]*> ee1f 0a90 	(vmov|fmrs)	r0, s31
0+1b4 <[^>]*> ee10 1a10 	(vmov|fmrs)	r1, s0
0+1b8 <[^>]*> ee10 7a10 	(vmov|fmrs)	r7, s0
0+1bc <[^>]*> ee10 ea10 	(vmov|fmrs)	lr, s0
0+1c0 <[^>]*> ee15 9a90 	(vmov|fmrs)	r9, s11
0+1c4 <[^>]*> eef0 1a10 	(vmrs|fmrx)	r1, fpsid
0+1c8 <[^>]*> eef0 ea10 	(vmrs|fmrx)	lr, fpsid
0+1cc <[^>]*> ed91 0a00 	(vldr|flds)	s0, \[r1\]
0+1d0 <[^>]*> ed9e 0a00 	(vldr|flds)	s0, \[lr\]
0+1d4 <[^>]*> ed90 0a00 	(vldr|flds)	s0, \[r0\]
0+1d8 <[^>]*> ed90 0aff 	(vldr|flds)	s0, \[r0, #1020\].*
0+1dc <[^>]*> ed10 0aff 	(vldr|flds)	s0, \[r0, #-1020\].*
0+1e0 <[^>]*> edd0 0a00 	(vldr|flds)	s1, \[r0\]
0+1e4 <[^>]*> ed90 1a00 	(vldr|flds)	s2, \[r0\]
0+1e8 <[^>]*> edd0 fa00 	(vldr|flds)	s31, \[r0\]
0+1ec <[^>]*> edcc aac9 	(vstr|fsts)	s21, \[ip, #804\].*
0+1f0 <[^>]*> ecd0 0a01 	(vldmia|fldmias)	r0, {s1}
0+1f4 <[^>]*> ec90 1a01 	(vldmia|fldmias)	r0, {s2}
0+1f8 <[^>]*> ecd0 fa01 	(vldmia|fldmias)	r0, {s31}
0+1fc <[^>]*> ec90 0a02 	(vldmia|fldmias)	r0, {s0-s1}
0+200 <[^>]*> ec90 0a03 	(vldmia|fldmias)	r0, {s0-s2}
0+204 <[^>]*> ec90 0a20 	(vldmia|fldmias)	r0, {s0-s31}
0+208 <[^>]*> ecd0 0a1f 	(vldmia|fldmias)	r0, {s1-s31}
0+20c <[^>]*> ec90 1a1e 	(vldmia|fldmias)	r0, {s2-s31}
0+210 <[^>]*> ec90 fa02 	(vldmia|fldmias)	r0, {s30-s31}
0+214 <[^>]*> ec91 0a01 	(vldmia|fldmias)	r1, {s0}
0+218 <[^>]*> ec9e 0a01 	(vldmia|fldmias)	lr, {s0}
0+21c <[^>]*> ec80 1b03 	fstmiax	r0, {d1}(	;@@ Deprecated|)
0+220 <[^>]*> ec80 2b03 	fstmiax	r0, {d2}(	;@@ Deprecated|)
0+224 <[^>]*> ec80 fb03 	fstmiax	r0, {d15}(	;@@ Deprecated|)
0+228 <[^>]*> ec80 0b05 	fstmiax	r0, {d0-d1}(	;@@ Deprecated|)
0+22c <[^>]*> ec80 0b07 	fstmiax	r0, {d0-d2}(	;@@ Deprecated|)
0+230 <[^>]*> ec80 0b21 	fstmiax	r0, {d0-d15}(	;@@ Deprecated|)
0+234 <[^>]*> ec80 1b1f 	fstmiax	r0, {d1-d15}(	;@@ Deprecated|)
0+238 <[^>]*> ec80 2b1d 	fstmiax	r0, {d2-d15}(	;@@ Deprecated|)
0+23c <[^>]*> ec80 eb05 	fstmiax	r0, {d14-d15}(	;@@ Deprecated|)
0+240 <[^>]*> ec81 0b03 	fstmiax	r1, {d0}(	;@@ Deprecated|)
0+244 <[^>]*> ec8e 0b03 	fstmiax	lr, {d0}(	;@@ Deprecated|)
0+248 <[^>]*> eeb5 0a40 	(vcmp\.f32	s0, #0.0|fcmpzs	s0)
0+24c <[^>]*> eef5 0a40 	(vcmp\.f32	s1, #0.0|fcmpzs	s1)
0+250 <[^>]*> eeb5 1a40 	(vcmp\.f32	s2, #0.0|fcmpzs	s2)
0+254 <[^>]*> eef5 1a40 	(vcmp\.f32	s3, #0.0|fcmpzs	s3)
0+258 <[^>]*> eeb5 2a40 	(vcmp\.f32	s4, #0.0|fcmpzs	s4)
0+25c <[^>]*> eef5 2a40 	(vcmp\.f32	s5, #0.0|fcmpzs	s5)
0+260 <[^>]*> eeb5 3a40 	(vcmp\.f32	s6, #0.0|fcmpzs	s6)
0+264 <[^>]*> eef5 3a40 	(vcmp\.f32	s7, #0.0|fcmpzs	s7)
0+268 <[^>]*> eeb5 4a40 	(vcmp\.f32	s8, #0.0|fcmpzs	s8)
0+26c <[^>]*> eef5 4a40 	(vcmp\.f32	s9, #0.0|fcmpzs	s9)
0+270 <[^>]*> eeb5 5a40 	(vcmp\.f32	s10, #0.0|fcmpzs	s10)
0+274 <[^>]*> eef5 5a40 	(vcmp\.f32	s11, #0.0|fcmpzs	s11)
0+278 <[^>]*> eeb5 6a40 	(vcmp\.f32	s12, #0.0|fcmpzs	s12)
0+27c <[^>]*> eef5 6a40 	(vcmp\.f32	s13, #0.0|fcmpzs	s13)
0+280 <[^>]*> eeb5 7a40 	(vcmp\.f32	s14, #0.0|fcmpzs	s14)
0+284 <[^>]*> eef5 7a40 	(vcmp\.f32	s15, #0.0|fcmpzs	s15)
0+288 <[^>]*> eeb5 8a40 	(vcmp\.f32	s16, #0.0|fcmpzs	s16)
0+28c <[^>]*> eef5 8a40 	(vcmp\.f32	s17, #0.0|fcmpzs	s17)
0+290 <[^>]*> eeb5 9a40 	(vcmp\.f32	s18, #0.0|fcmpzs	s18)
0+294 <[^>]*> eef5 9a40 	(vcmp\.f32	s19, #0.0|fcmpzs	s19)
0+298 <[^>]*> eeb5 aa40 	(vcmp\.f32	s20, #0.0|fcmpzs	s20)
0+29c <[^>]*> eef5 aa40 	(vcmp\.f32	s21, #0.0|fcmpzs	s21)
0+2a0 <[^>]*> eeb5 ba40 	(vcmp\.f32	s22, #0.0|fcmpzs	s22)
0+2a4 <[^>]*> eef5 ba40 	(vcmp\.f32	s23, #0.0|fcmpzs	s23)
0+2a8 <[^>]*> eeb5 ca40 	(vcmp\.f32	s24, #0.0|fcmpzs	s24)
0+2ac <[^>]*> eef5 ca40 	(vcmp\.f32	s25, #0.0|fcmpzs	s25)
0+2b0 <[^>]*> eeb5 da40 	(vcmp\.f32	s26, #0.0|fcmpzs	s26)
0+2b4 <[^>]*> eef5 da40 	(vcmp\.f32	s27, #0.0|fcmpzs	s27)
0+2b8 <[^>]*> eeb5 ea40 	(vcmp\.f32	s28, #0.0|fcmpzs	s28)
0+2bc <[^>]*> eef5 ea40 	(vcmp\.f32	s29, #0.0|fcmpzs	s29)
0+2c0 <[^>]*> eeb5 fa40 	(vcmp\.f32	s30, #0.0|fcmpzs	s30)
0+2c4 <[^>]*> eef5 fa40 	(vcmp\.f32	s31, #0.0|fcmpzs	s31)
0+2c8 <[^>]*> bf01      	itttt	eq
0+2ca <[^>]*> eef1 fa10 	(vmrseq	APSR_nzcv, fpscr|fmstateq)
0+2ce <[^>]*> eef4 1ae3 	(vcmpeeq\.f32|fcmpeseq)	s3, s7
0+2d2 <[^>]*> eef5 2ac0 	(vcmpeeq\.f32	s5, #0.0|fcmpezseq	s5)
0+2d6 <[^>]*> eef4 0a41 	(vcmpeq\.f32|fcmpseq)	s1, s2
0+2da <[^>]*> bf01      	itttt	eq
0+2dc <[^>]*> eef5 0a40 	(vcmpeq\.f32	s1, #0.0|fcmpzseq	s1)
0+2e0 <[^>]*> eef0 0ae1 	(vabseq\.f32|fabsseq)	s1, s3
0+2e4 <[^>]*> eef0 fa69 	(vmoveq\.f32|fcpyseq)	s31, s19
0+2e8 <[^>]*> eeb1 aa44 	(vnegeq\.f32|fnegseq)	s20, s8
0+2ec <[^>]*> bf01      	itttt	eq
0+2ee <[^>]*> eef1 2ae3 	(vsqrteq\.f32|fsqrtseq)	s5, s7
0+2f2 <[^>]*> ee32 3a82 	(vaddeq\.f32|faddseq)	s6, s5, s4
0+2f6 <[^>]*> eec1 1a20 	(vdiveq\.f32|fdivseq)	s3, s2, s1
0+2fa <[^>]*> ee4f fa2e 	(vmlaeq\.f32|fmacseq)	s31, s30, s29
0+2fe <[^>]*> bf01      	itttt	eq
0+300 <[^>]*> ee1d ea8d 	(vnmlseq\.f32|fmscseq)	s28, s27, s26
0+304 <[^>]*> ee6c ca2b 	(vmuleq\.f32|fmulseq)	s25, s24, s23
0+308 <[^>]*> ee0a baca 	(vmlseq\.f32|fnmacseq)	s22, s21, s20
0+30c <[^>]*> ee59 9a68 	(vnmlaeq\.f32|fnmscseq)	s19, s18, s17
0+310 <[^>]*> bf01      	itttt	eq
0+312 <[^>]*> ee27 8ac7 	(vnmuleq\.f32|fnmulseq)	s16, s15, s14
0+316 <[^>]*> ee76 6a65 	(vsubeq\.f32|fsubseq)	s13, s12, s11
0+31a <[^>]*> ed98 5a00 	(vldreq|fldseq)	s10, \[r8\]
0+31e <[^>]*> edc7 4a00 	(vstreq|fstseq)	s9, \[r7\]
0+322 <[^>]*> bf01      	itttt	eq
0+324 <[^>]*> ec91 4a01 	(vldmiaeq|fldmiaseq)	r1, {s8}
0+328 <[^>]*> ecd2 3a01 	(vldmiaeq|fldmiaseq)	r2, {s7}
0+32c <[^>]*> ecb3 3a01 	(vldmiaeq|fldmiaseq)	r3!, {s6}
0+330 <[^>]*> ecf4 2a01 	(vldmiaeq|fldmiaseq)	r4!, {s5}
0+334 <[^>]*> bf01      	itttt	eq
0+336 <[^>]*> ed35 2a01 	(vldmdbeq|fldmdbseq)	r5!, {s4}
0+33a <[^>]*> ed76 1a01 	(vldmdbeq|fldmdbseq)	r6!, {s3}
0+33e <[^>]*> ec97 1b03 	fldmiaxeq	r7, {d1}(	;@@ Deprecated|)
0+342 <[^>]*> ec98 2b03 	fldmiaxeq	r8, {d2}(	;@@ Deprecated|)
0+346 <[^>]*> bf01      	itttt	eq
0+348 <[^>]*> ecb9 3b03 	fldmiaxeq	r9!, {d3}(	;@@ Deprecated|)
0+34c <[^>]*> ecba 4b03 	fldmiaxeq	sl!, {d4}(	;@@ Deprecated|)
0+350 <[^>]*> ed3b 5b03 	fldmdbxeq	fp!, {d5}(	;@@ Deprecated|)
0+354 <[^>]*> ed3c 6b03 	fldmdbxeq	ip!, {d6}(	;@@ Deprecated|)
0+358 <[^>]*> bf01      	itttt	eq
0+35a <[^>]*> ec8d 1a01 	(vstmiaeq|fstmiaseq)	sp, {s2}
0+35e <[^>]*> ecce 0a01 	(vstmiaeq|fstmiaseq)	lr, {s1}
0+362 <[^>]*> ece1 fa01 	(vstmiaeq|fstmiaseq)	r1!, {s31}
0+366 <[^>]*> eca2 fa01 	(vstmiaeq|fstmiaseq)	r2!, {s30}
0+36a <[^>]*> bf01      	itttt	eq
0+36c <[^>]*> ed63 ea01 	(vstmdbeq|fstmdbseq)	r3!, {s29}
0+370 <[^>]*> ed24 ea01 	(vstmdbeq|fstmdbseq)	r4!, {s28}
0+374 <[^>]*> ec85 7b03 	fstmiaxeq	r5, {d7}(	;@@ Deprecated|)
0+378 <[^>]*> ec86 8b03 	fstmiaxeq	r6, {d8}(	;@@ Deprecated|)
0+37c <[^>]*> bf01      	itttt	eq
0+37e <[^>]*> eca7 9b03 	fstmiaxeq	r7!, {d9}(	;@@ Deprecated|)
0+382 <[^>]*> eca8 ab03 	fstmiaxeq	r8!, {d10}(	;@@ Deprecated|)
0+386 <[^>]*> ed29 bb03 	fstmdbxeq	r9!, {d11}(	;@@ Deprecated|)
0+38a <[^>]*> ed2a cb03 	fstmdbxeq	sl!, {d12}(	;@@ Deprecated|)
0+38e <[^>]*> bf01      	itttt	eq
0+390 <[^>]*> eef8 dac3 	(vcvteq\.f32\.s32|fsitoseq)	s27, s6
0+394 <[^>]*> eefd ca62 	(vcvtreq\.s32\.f32|ftosiseq)	s25, s5
0+398 <[^>]*> eefd bac2 	(vcvteq\.s32\.f32|ftosizseq)	s23, s4
0+39c <[^>]*> eefc aa61 	(vcvtreq\.u32\.f32|ftouiseq)	s21, s3
0+3a0 <[^>]*> bf01      	itttt	eq
0+3a2 <[^>]*> eefc 9ac1 	(vcvteq\.u32\.f32|ftouizseq)	s19, s2
0+3a6 <[^>]*> eef8 8a60 	(vcvteq\.f32\.u32|fuitoseq)	s17, s1
0+3aa <[^>]*> ee11 ba90 	(vmoveq|fmrseq)	fp, s3
0+3ae <[^>]*> eef0 9a10 	(vmrseq|fmrxeq)	r9, fpsid
0+3b2 <[^>]*> bf04      	itt	eq
0+3b4 <[^>]*> ee01 9a90 	(vmoveq|fmsreq)	s3, r9
0+3b8 <[^>]*> eee0 8a10 	(vmsreq|fmxreq)	fpsid, r8
0+3bc <[^>]*> eef9 0a10 	(vmrs|fmrx)	r0, fpinst	@@ Impl def
0+3c0 <[^>]*> eefa 0a10 	(vmrs|fmrx)	r0, fpinst2	@@ Impl def
0+3c4 <[^>]*> eef7 0a10 	(vmrs|fmrx)	r0, mvfr0
0+3c8 <[^>]*> eef6 0a10 	(vmrs|fmrx)	r0, mvfr1
0+3cc <[^>]*> eefc 0a10 	(vmrs|fmrx)	r0, <impl def 0xc>
0+3d0 <[^>]*> eee9 0a10 	(vmsr|fmxr)	fpinst, r0	@@ Impl def
0+3d4 <[^>]*> eeea 0a10 	(vmsr|fmxr)	fpinst2, r0	@@ Impl def
0+3d8 <[^>]*> eee7 0a10 	(vmsr|fmxr)	mvfr0, r0
0+3dc <[^>]*> eee6 0a10 	(vmsr|fmxr)	mvfr1, r0
0+3e0 <[^>]*> eeec 0a10 	(vmsr|fmxr)	<impl def 0xc>, r0
0+3e4 <[^>]*> bf00      	nop
0+3e6 <[^>]*> bf00      	nop
0+3e8 <[^>]*> bf00      	nop
0+3ea <[^>]*> bf00      	nop
0+3ec <[^>]*> bf00      	nop
0+3ee <[^>]*> bf00      	nop
@


1.7
log
@        PR 10288
        * arm-dis.c (enum opcode_sentinels): New:  Used to mark the
        boundary between variaant and generic coprocessor instuctions.
        (coprocessor): Use it.
        Fix architecture version of MCRR and MRRC instructions.
        (arm_opcdes): Fix patterns for STRB and STRH instructions.
        (print_insn_coprocessor): Check architecture and extension masks.
        Print a hexadecimal version of any decimal constant that is
        outside of the range of -16 to +32.
        (print_arm_address): Add a return value of the offset used in the
        adress, if it is worth printing a hexadecimal version of it.
        (print_insn_neon): Print a hexadecimal version of any decimal
        constant that is outside of the range of -16 to +32.
        (print_insn_arm): Likewise.
        (print_insn_thumb16): Likewise.
        (print_insn_thumb32): Likewise.

        PR 10297
        * arm-dis.c (UNDEFINED_INSTRUCTION): New macro for a description
        of an undefined instruction.
        (arm_opcodes): Use it.
        (thumb_opcod): Use it.
        (thumb32_opc): Use it.

        Update expected disassembly regrexps in GAS and LD testsuites.
@
text
@d3 1
a3 1
#as: -mfpu=vfpxd
@


1.6
log
@opcodes:
	* arm-dis.c (coprocessor_opcodes): Disassemble VFP instructions using
	unified syntax.
gas/testsuite:
	* gas/arm/group-reloc-ldc.d: Disassembly of VFP instructions now uses
	unified syntax.
	* gas/arm/vfp-non-overlap.d: Likewise.
	* gas/arm/vfp-neon-syntax.d: Likewise.
	* gas/arm/vfp-neon-syntax_t2.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
	* gas/arm/vfpv3-const-conv.d: Likewise.
ld/testsuite:
	* ld-arm/vfp11-fix-scalar.d: Disassembly of VFP instructions now uses
	unified syntax.
	* ld-arm/vfp11-fix-vector.d: Likewise.
@
text
@d128 2
a129 2
0+1d8 <[^>]*> ed90 0aff 	(vldr|flds)	s0, \[r0, #1020\]
0+1dc <[^>]*> ed10 0aff 	(vldr|flds)	s0, \[r0, #-1020\]
d133 1
a133 1
0+1ec <[^>]*> edcc aac9 	(vstr|fsts)	s21, \[ip, #804\]
@


1.5
log
@2007-06-26  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (parse_operands): Accept generic coprocessor regs
	for OP_RVC.
	(reg_names): Add fpinst, pfinst2, mvfr0 and mvfr1.

	gas/testsuite/
	* gas/arm/vfp1xD.d: Add new fmrx/fmxr tests.
	* gas/arm/vfp1xD.s: Ditto.
	* gas/arm/vfp1xD_t2.d: Ditto.
	* gas/arm/vfp1xD_t2.s: Ditto.

	opcodes/
	* arm-dis.c (coprocessor_opcodes): Add fmxr/fmrx mvfr0/mvfr1.
@
text
@d10 178
a187 178
0+000 <[^>]*> eef1 fa10 	fmstat
0+004 <[^>]*> eeb4 0ac0 	fcmpes	s0, s0
0+008 <[^>]*> eeb5 0ac0 	fcmpezs	s0
0+00c <[^>]*> eeb4 0a40 	fcmps	s0, s0
0+010 <[^>]*> eeb5 0a40 	fcmpzs	s0
0+014 <[^>]*> eeb0 0ac0 	fabss	s0, s0
0+018 <[^>]*> eeb0 0a40 	fcpys	s0, s0
0+01c <[^>]*> eeb1 0a40 	fnegs	s0, s0
0+020 <[^>]*> eeb1 0ac0 	fsqrts	s0, s0
0+024 <[^>]*> ee30 0a00 	fadds	s0, s0, s0
0+028 <[^>]*> ee80 0a00 	fdivs	s0, s0, s0
0+02c <[^>]*> ee00 0a00 	fmacs	s0, s0, s0
0+030 <[^>]*> ee10 0a00 	fmscs	s0, s0, s0
0+034 <[^>]*> ee20 0a00 	fmuls	s0, s0, s0
0+038 <[^>]*> ee00 0a40 	fnmacs	s0, s0, s0
0+03c <[^>]*> ee10 0a40 	fnmscs	s0, s0, s0
0+040 <[^>]*> ee20 0a40 	fnmuls	s0, s0, s0
0+044 <[^>]*> ee30 0a40 	fsubs	s0, s0, s0
0+048 <[^>]*> ed90 0a00 	flds	s0, \[r0\]
0+04c <[^>]*> ed80 0a00 	fsts	s0, \[r0\]
0+050 <[^>]*> ec90 0a01 	fldmias	r0, {s0}
0+054 <[^>]*> ec90 0a01 	fldmias	r0, {s0}
0+058 <[^>]*> ecb0 0a01 	fldmias	r0!, {s0}
0+05c <[^>]*> ecb0 0a01 	fldmias	r0!, {s0}
0+060 <[^>]*> ed30 0a01 	fldmdbs	r0!, {s0}
0+064 <[^>]*> ed30 0a01 	fldmdbs	r0!, {s0}
0+068 <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
0+080 <[^>]*> ec80 0a01 	fstmias	r0, {s0}
0+084 <[^>]*> ec80 0a01 	fstmias	r0, {s0}
0+088 <[^>]*> eca0 0a01 	fstmias	r0!, {s0}
0+08c <[^>]*> eca0 0a01 	fstmias	r0!, {s0}
0+090 <[^>]*> ed20 0a01 	fstmdbs	r0!, {s0}
0+094 <[^>]*> ed20 0a01 	fstmdbs	r0!, {s0}
0+098 <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
0+0b0 <[^>]*> eeb8 0ac0 	fsitos	s0, s0
0+0b4 <[^>]*> eeb8 0a40 	fuitos	s0, s0
0+0b8 <[^>]*> eebd 0a40 	ftosis	s0, s0
0+0bc <[^>]*> eebd 0ac0 	ftosizs	s0, s0
0+0c0 <[^>]*> eebc 0a40 	ftouis	s0, s0
0+0c4 <[^>]*> eebc 0ac0 	ftouizs	s0, s0
0+0c8 <[^>]*> ee10 0a10 	fmrs	r0, s0
0+0cc <[^>]*> eef0 0a10 	fmrx	r0, fpsid
0+0d0 <[^>]*> eef1 0a10 	fmrx	r0, fpscr
0+0d4 <[^>]*> eef8 0a10 	fmrx	r0, fpexc
0+0d8 <[^>]*> ee00 0a10 	fmsr	s0, r0
0+0dc <[^>]*> eee0 0a10 	fmxr	fpsid, r0
0+0e0 <[^>]*> eee1 0a10 	fmxr	fpscr, r0
0+0e4 <[^>]*> eee8 0a10 	fmxr	fpexc, r0
0+0e8 <[^>]*> eef5 0a40 	fcmpzs	s1
0+0ec <[^>]*> eeb5 1a40 	fcmpzs	s2
0+0f0 <[^>]*> eef5 fa40 	fcmpzs	s31
0+0f4 <[^>]*> eeb4 0a60 	fcmps	s0, s1
0+0f8 <[^>]*> eeb4 0a41 	fcmps	s0, s2
0+0fc <[^>]*> eeb4 0a6f 	fcmps	s0, s31
0+100 <[^>]*> eef4 0a40 	fcmps	s1, s0
0+104 <[^>]*> eeb4 1a40 	fcmps	s2, s0
0+108 <[^>]*> eef4 fa40 	fcmps	s31, s0
0+10c <[^>]*> eef4 aa46 	fcmps	s21, s12
0+110 <[^>]*> eeb1 0a60 	fnegs	s0, s1
0+114 <[^>]*> eeb1 0a41 	fnegs	s0, s2
0+118 <[^>]*> eeb1 0a6f 	fnegs	s0, s31
0+11c <[^>]*> eef1 0a40 	fnegs	s1, s0
0+120 <[^>]*> eeb1 1a40 	fnegs	s2, s0
0+124 <[^>]*> eef1 fa40 	fnegs	s31, s0
0+128 <[^>]*> eeb1 6a6a 	fnegs	s12, s21
0+12c <[^>]*> ee30 0a20 	fadds	s0, s0, s1
0+130 <[^>]*> ee30 0a01 	fadds	s0, s0, s2
0+134 <[^>]*> ee30 0a2f 	fadds	s0, s0, s31
0+138 <[^>]*> ee30 0a80 	fadds	s0, s1, s0
0+13c <[^>]*> ee31 0a00 	fadds	s0, s2, s0
0+140 <[^>]*> ee3f 0a80 	fadds	s0, s31, s0
0+144 <[^>]*> ee70 0a00 	fadds	s1, s0, s0
0+148 <[^>]*> ee30 1a00 	fadds	s2, s0, s0
0+14c <[^>]*> ee70 fa00 	fadds	s31, s0, s0
0+150 <[^>]*> ee3a 6aa2 	fadds	s12, s21, s5
0+154 <[^>]*> eeb8 0ae0 	fsitos	s0, s1
0+158 <[^>]*> eeb8 0ac1 	fsitos	s0, s2
0+15c <[^>]*> eeb8 0aef 	fsitos	s0, s31
0+160 <[^>]*> eef8 0ac0 	fsitos	s1, s0
0+164 <[^>]*> eeb8 1ac0 	fsitos	s2, s0
0+168 <[^>]*> eef8 fac0 	fsitos	s31, s0
0+16c <[^>]*> eebd 0a60 	ftosis	s0, s1
0+170 <[^>]*> eebd 0a41 	ftosis	s0, s2
0+174 <[^>]*> eebd 0a6f 	ftosis	s0, s31
0+178 <[^>]*> eefd 0a40 	ftosis	s1, s0
0+17c <[^>]*> eebd 1a40 	ftosis	s2, s0
0+180 <[^>]*> eefd fa40 	ftosis	s31, s0
0+184 <[^>]*> ee00 1a10 	fmsr	s0, r1
0+188 <[^>]*> ee00 7a10 	fmsr	s0, r7
0+18c <[^>]*> ee00 ea10 	fmsr	s0, lr
0+190 <[^>]*> ee00 0a90 	fmsr	s1, r0
0+194 <[^>]*> ee01 0a10 	fmsr	s2, r0
0+198 <[^>]*> ee0f 0a90 	fmsr	s31, r0
0+19c <[^>]*> ee0a 7a90 	fmsr	s21, r7
0+1a0 <[^>]*> eee0 1a10 	fmxr	fpsid, r1
0+1a4 <[^>]*> eee0 ea10 	fmxr	fpsid, lr
0+1a8 <[^>]*> ee10 0a90 	fmrs	r0, s1
0+1ac <[^>]*> ee11 0a10 	fmrs	r0, s2
0+1b0 <[^>]*> ee1f 0a90 	fmrs	r0, s31
0+1b4 <[^>]*> ee10 1a10 	fmrs	r1, s0
0+1b8 <[^>]*> ee10 7a10 	fmrs	r7, s0
0+1bc <[^>]*> ee10 ea10 	fmrs	lr, s0
0+1c0 <[^>]*> ee15 9a90 	fmrs	r9, s11
0+1c4 <[^>]*> eef0 1a10 	fmrx	r1, fpsid
0+1c8 <[^>]*> eef0 ea10 	fmrx	lr, fpsid
0+1cc <[^>]*> ed91 0a00 	flds	s0, \[r1\]
0+1d0 <[^>]*> ed9e 0a00 	flds	s0, \[lr\]
0+1d4 <[^>]*> ed90 0a00 	flds	s0, \[r0\]
0+1d8 <[^>]*> ed90 0aff 	flds	s0, \[r0, #1020\]
0+1dc <[^>]*> ed10 0aff 	flds	s0, \[r0, #-1020\]
0+1e0 <[^>]*> edd0 0a00 	flds	s1, \[r0\]
0+1e4 <[^>]*> ed90 1a00 	flds	s2, \[r0\]
0+1e8 <[^>]*> edd0 fa00 	flds	s31, \[r0\]
0+1ec <[^>]*> edcc aac9 	fsts	s21, \[ip, #804\]
0+1f0 <[^>]*> ecd0 0a01 	fldmias	r0, {s1}
0+1f4 <[^>]*> ec90 1a01 	fldmias	r0, {s2}
0+1f8 <[^>]*> ecd0 fa01 	fldmias	r0, {s31}
0+1fc <[^>]*> ec90 0a02 	fldmias	r0, {s0-s1}
0+200 <[^>]*> ec90 0a03 	fldmias	r0, {s0-s2}
0+204 <[^>]*> ec90 0a20 	fldmias	r0, {s0-s31}
0+208 <[^>]*> ecd0 0a1f 	fldmias	r0, {s1-s31}
0+20c <[^>]*> ec90 1a1e 	fldmias	r0, {s2-s31}
0+210 <[^>]*> ec90 fa02 	fldmias	r0, {s30-s31}
0+214 <[^>]*> ec91 0a01 	fldmias	r1, {s0}
0+218 <[^>]*> ec9e 0a01 	fldmias	lr, {s0}
0+21c <[^>]*> ec80 1b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec80 2b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80 fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec80 0b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec80 0b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec80 0b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec80 1b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec80 2b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80 eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec81 0b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e 0b03 	fstmiax	lr, {d0}
0+248 <[^>]*> eeb5 0a40 	fcmpzs	s0
0+24c <[^>]*> eef5 0a40 	fcmpzs	s1
0+250 <[^>]*> eeb5 1a40 	fcmpzs	s2
0+254 <[^>]*> eef5 1a40 	fcmpzs	s3
0+258 <[^>]*> eeb5 2a40 	fcmpzs	s4
0+25c <[^>]*> eef5 2a40 	fcmpzs	s5
0+260 <[^>]*> eeb5 3a40 	fcmpzs	s6
0+264 <[^>]*> eef5 3a40 	fcmpzs	s7
0+268 <[^>]*> eeb5 4a40 	fcmpzs	s8
0+26c <[^>]*> eef5 4a40 	fcmpzs	s9
0+270 <[^>]*> eeb5 5a40 	fcmpzs	s10
0+274 <[^>]*> eef5 5a40 	fcmpzs	s11
0+278 <[^>]*> eeb5 6a40 	fcmpzs	s12
0+27c <[^>]*> eef5 6a40 	fcmpzs	s13
0+280 <[^>]*> eeb5 7a40 	fcmpzs	s14
0+284 <[^>]*> eef5 7a40 	fcmpzs	s15
0+288 <[^>]*> eeb5 8a40 	fcmpzs	s16
0+28c <[^>]*> eef5 8a40 	fcmpzs	s17
0+290 <[^>]*> eeb5 9a40 	fcmpzs	s18
0+294 <[^>]*> eef5 9a40 	fcmpzs	s19
0+298 <[^>]*> eeb5 aa40 	fcmpzs	s20
0+29c <[^>]*> eef5 aa40 	fcmpzs	s21
0+2a0 <[^>]*> eeb5 ba40 	fcmpzs	s22
0+2a4 <[^>]*> eef5 ba40 	fcmpzs	s23
0+2a8 <[^>]*> eeb5 ca40 	fcmpzs	s24
0+2ac <[^>]*> eef5 ca40 	fcmpzs	s25
0+2b0 <[^>]*> eeb5 da40 	fcmpzs	s26
0+2b4 <[^>]*> eef5 da40 	fcmpzs	s27
0+2b8 <[^>]*> eeb5 ea40 	fcmpzs	s28
0+2bc <[^>]*> eef5 ea40 	fcmpzs	s29
0+2c0 <[^>]*> eeb5 fa40 	fcmpzs	s30
0+2c4 <[^>]*> eef5 fa40 	fcmpzs	s31
d189 4
a192 4
0+2ca <[^>]*> eef1 fa10 	fmstateq
0+2ce <[^>]*> eef4 1ae3 	fcmpeseq	s3, s7
0+2d2 <[^>]*> eef5 2ac0 	fcmpezseq	s5
0+2d6 <[^>]*> eef4 0a41 	fcmpseq	s1, s2
d194 4
a197 4
0+2dc <[^>]*> eef5 0a40 	fcmpzseq	s1
0+2e0 <[^>]*> eef0 0ae1 	fabsseq	s1, s3
0+2e4 <[^>]*> eef0 fa69 	fcpyseq	s31, s19
0+2e8 <[^>]*> eeb1 aa44 	fnegseq	s20, s8
d199 4
a202 4
0+2ee <[^>]*> eef1 2ae3 	fsqrtseq	s5, s7
0+2f2 <[^>]*> ee32 3a82 	faddseq	s6, s5, s4
0+2f6 <[^>]*> eec1 1a20 	fdivseq	s3, s2, s1
0+2fa <[^>]*> ee4f fa2e 	fmacseq	s31, s30, s29
d204 4
a207 4
0+300 <[^>]*> ee1d ea8d 	fmscseq	s28, s27, s26
0+304 <[^>]*> ee6c ca2b 	fmulseq	s25, s24, s23
0+308 <[^>]*> ee0a baca 	fnmacseq	s22, s21, s20
0+30c <[^>]*> ee59 9a68 	fnmscseq	s19, s18, s17
d209 4
a212 4
0+312 <[^>]*> ee27 8ac7 	fnmulseq	s16, s15, s14
0+316 <[^>]*> ee76 6a65 	fsubseq	s13, s12, s11
0+31a <[^>]*> ed98 5a00 	fldseq	s10, \[r8\]
0+31e <[^>]*> edc7 4a00 	fstseq	s9, \[r7\]
d214 4
a217 4
0+324 <[^>]*> ec91 4a01 	fldmiaseq	r1, {s8}
0+328 <[^>]*> ecd2 3a01 	fldmiaseq	r2, {s7}
0+32c <[^>]*> ecb3 3a01 	fldmiaseq	r3!, {s6}
0+330 <[^>]*> ecf4 2a01 	fldmiaseq	r4!, {s5}
d219 4
a222 4
0+336 <[^>]*> ed35 2a01 	fldmdbseq	r5!, {s4}
0+33a <[^>]*> ed76 1a01 	fldmdbseq	r6!, {s3}
0+33e <[^>]*> ec97 1b03 	fldmiaxeq	r7, {d1}
0+342 <[^>]*> ec98 2b03 	fldmiaxeq	r8, {d2}
d224 4
a227 4
0+348 <[^>]*> ecb9 3b03 	fldmiaxeq	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	fldmiaxeq	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	fldmdbxeq	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	fldmdbxeq	ip!, {d6}
d229 4
a232 4
0+35a <[^>]*> ec8d 1a01 	fstmiaseq	sp, {s2}
0+35e <[^>]*> ecce 0a01 	fstmiaseq	lr, {s1}
0+362 <[^>]*> ece1 fa01 	fstmiaseq	r1!, {s31}
0+366 <[^>]*> eca2 fa01 	fstmiaseq	r2!, {s30}
d234 4
a237 4
0+36c <[^>]*> ed63 ea01 	fstmdbseq	r3!, {s29}
0+370 <[^>]*> ed24 ea01 	fstmdbseq	r4!, {s28}
0+374 <[^>]*> ec85 7b03 	fstmiaxeq	r5, {d7}
0+378 <[^>]*> ec86 8b03 	fstmiaxeq	r6, {d8}
d239 4
a242 4
0+37e <[^>]*> eca7 9b03 	fstmiaxeq	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	fstmiaxeq	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	fstmdbxeq	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	fstmdbxeq	sl!, {d12}
d244 4
a247 4
0+390 <[^>]*> eef8 dac3 	fsitoseq	s27, s6
0+394 <[^>]*> eefd ca62 	ftosiseq	s25, s5
0+398 <[^>]*> eefd bac2 	ftosizseq	s23, s4
0+39c <[^>]*> eefc aa61 	ftouiseq	s21, s3
d249 4
a252 4
0+3a2 <[^>]*> eefc 9ac1 	ftouizseq	s19, s2
0+3a6 <[^>]*> eef8 8a60 	fuitoseq	s17, s1
0+3aa <[^>]*> ee11 ba90 	fmrseq	fp, s3
0+3ae <[^>]*> eef0 9a10 	fmrxeq	r9, fpsid
d254 12
a265 12
0+3b4 <[^>]*> ee01 9a90 	fmsreq	s3, r9
0+3b8 <[^>]*> eee0 8a10 	fmxreq	fpsid, r8
0+3bc <[^>]*> eef9 0a10 	fmrx	r0, fpinst	@@ Impl def
0+3c0 <[^>]*> eefa 0a10 	fmrx	r0, fpinst2	@@ Impl def
0+3c4 <[^>]*> eef7 0a10 	fmrx	r0, mvfr0
0+3c8 <[^>]*> eef6 0a10 	fmrx	r0, mvfr1
0+3cc <[^>]*> eefc 0a10 	fmrx	r0, <impl def 0xc>
0+3d0 <[^>]*> eee9 0a10 	fmxr	fpinst, r0	@@ Impl def
0+3d4 <[^>]*> eeea 0a10 	fmxr	fpinst2, r0	@@ Impl def
0+3d8 <[^>]*> eee7 0a10 	fmxr	mvfr0, r0
0+3dc <[^>]*> eee6 0a10 	fmxr	mvfr1, r0
0+3e0 <[^>]*> eeec 0a10 	fmxr	<impl def 0xc>, r0
@


1.4
log
@2006-06-06  Paul Brook  <paul@@codesourcery.com>

opcodes/
	* arm-dis.c (coprocessor_opcodes): Add %c to unconditional arm
	instructions.
	(neon_opcodes): Add conditional execution specifiers.
	(thumb_opcodes): Ditto.
	(thumb32_opcodes): Ditto.
	(arm_conditional): Change 0xe to "al" and add "" to end.
	(ifthen_state, ifthen_next_state, ifthen_address): New.
	(IFTHEN_COND): Define.
	(print_insn_coprocessor, print_insn_neon): Print thumb conditions.
	(print_insn_arm): Change %c to use new values of arm_conditional.
	(print_insn_thumb16): Print thumb conditions.  Add %I.
	(print_insn_thumb32): Print thumb conditions.
	(find_ifthen_state): New function.
	(print_insn): Track IT block state.
gas/testsuite/
	* gas/arm/thumb2_bcond.d: Update expected output.
	* gas/arm/thumb32.d: Ditto.
	* gas/arm/vfp1_t2.d: Ditto.
	* gas/arm/vfp1xD_t2.d: Ditto.
binutils/testsuite/
	* binutils-all/arm/objdump.exp: New file.
	* binutils-all/arm/thumb2-cond.s: New test.
@
text
@d256 16
a271 2
0+3bc <[^>]*> bf00      	nop
0+3be <[^>]*> bf00      	nop
@


1.3
log
@	* gas/arm/vfp-neon-overlap.s: New test. Overlapping VFP/Neon
	instructions.
	* gas/arm/vfp-neon-overlap.d: Expected output of above.
	* gas/arm/vfp1xD.d: Test for fldmx/fstmx.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
@
text
@a187 1
# The "(eq|)" should be replaces by "eq" once the disassembler is fixed.
d189 4
a192 4
0+2ca <[^>]*> eef1 fa10 	fmstat(eq|)
0+2ce <[^>]*> eef4 1ae3 	fcmpes(eq|)	s3, s7
0+2d2 <[^>]*> eef5 2ac0 	fcmpezs(eq|)	s5
0+2d6 <[^>]*> eef4 0a41 	fcmps(eq|)	s1, s2
d194 4
a197 4
0+2dc <[^>]*> eef5 0a40 	fcmpzs(eq|)	s1
0+2e0 <[^>]*> eef0 0ae1 	fabss(eq|)	s1, s3
0+2e4 <[^>]*> eef0 fa69 	fcpys(eq|)	s31, s19
0+2e8 <[^>]*> eeb1 aa44 	fnegs(eq|)	s20, s8
d199 4
a202 4
0+2ee <[^>]*> eef1 2ae3 	fsqrts(eq|)	s5, s7
0+2f2 <[^>]*> ee32 3a82 	fadds(eq|)	s6, s5, s4
0+2f6 <[^>]*> eec1 1a20 	fdivs(eq|)	s3, s2, s1
0+2fa <[^>]*> ee4f fa2e 	fmacs(eq|)	s31, s30, s29
d204 4
a207 4
0+300 <[^>]*> ee1d ea8d 	fmscs(eq|)	s28, s27, s26
0+304 <[^>]*> ee6c ca2b 	fmuls(eq|)	s25, s24, s23
0+308 <[^>]*> ee0a baca 	fnmacs(eq|)	s22, s21, s20
0+30c <[^>]*> ee59 9a68 	fnmscs(eq|)	s19, s18, s17
d209 4
a212 4
0+312 <[^>]*> ee27 8ac7 	fnmuls(eq|)	s16, s15, s14
0+316 <[^>]*> ee76 6a65 	fsubs(eq|)	s13, s12, s11
0+31a <[^>]*> ed98 5a00 	flds(eq|)	s10, \[r8\]
0+31e <[^>]*> edc7 4a00 	fsts(eq|)	s9, \[r7\]
d214 4
a217 4
0+324 <[^>]*> ec91 4a01 	fldmias(eq|)	r1, {s8}
0+328 <[^>]*> ecd2 3a01 	fldmias(eq|)	r2, {s7}
0+32c <[^>]*> ecb3 3a01 	fldmias(eq|)	r3!, {s6}
0+330 <[^>]*> ecf4 2a01 	fldmias(eq|)	r4!, {s5}
d219 4
a222 4
0+336 <[^>]*> ed35 2a01 	fldmdbs(eq|)	r5!, {s4}
0+33a <[^>]*> ed76 1a01 	fldmdbs(eq|)	r6!, {s3}
0+33e <[^>]*> ec97 1b03 	fldmiax(eq|)	r7, {d1}
0+342 <[^>]*> ec98 2b03 	fldmiax(eq|)	r8, {d2}
d224 4
a227 4
0+348 <[^>]*> ecb9 3b03 	fldmiax(eq|)	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	fldmiax(eq|)	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	fldmdbx(eq|)	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	fldmdbx(eq|)	ip!, {d6}
d229 4
a232 4
0+35a <[^>]*> ec8d 1a01 	fstmias(eq|)	sp, {s2}
0+35e <[^>]*> ecce 0a01 	fstmias(eq|)	lr, {s1}
0+362 <[^>]*> ece1 fa01 	fstmias(eq|)	r1!, {s31}
0+366 <[^>]*> eca2 fa01 	fstmias(eq|)	r2!, {s30}
d234 4
a237 4
0+36c <[^>]*> ed63 ea01 	fstmdbs(eq|)	r3!, {s29}
0+370 <[^>]*> ed24 ea01 	fstmdbs(eq|)	r4!, {s28}
0+374 <[^>]*> ec85 7b03 	fstmiax(eq|)	r5, {d7}
0+378 <[^>]*> ec86 8b03 	fstmiax(eq|)	r6, {d8}
d239 4
a242 4
0+37e <[^>]*> eca7 9b03 	fstmiax(eq|)	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	fstmiax(eq|)	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	fstmdbx(eq|)	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	fstmdbx(eq|)	sl!, {d12}
d244 4
a247 4
0+390 <[^>]*> eef8 dac3 	fsitos(eq|)	s27, s6
0+394 <[^>]*> eefd ca62 	ftosis(eq|)	s25, s5
0+398 <[^>]*> eefd bac2 	ftosizs(eq|)	s23, s4
0+39c <[^>]*> eefc aa61 	ftouis(eq|)	s21, s3
d249 4
a252 4
0+3a2 <[^>]*> eefc 9ac1 	ftouizs(eq|)	s19, s2
0+3a6 <[^>]*> eef8 8a60 	fuitos(eq|)	s17, s1
0+3aa <[^>]*> ee11 ba90 	fmrs(eq|)	fp, s3
0+3ae <[^>]*> eef0 9a10 	fmrx(eq|)	r9, fpsid
d254 2
a255 2
0+3b4 <[^>]*> ee01 9a90 	fmsr(eq|)	s3, r9
0+3b8 <[^>]*> eee0 8a10 	fmxr(eq|)	fpsid, r8
@


1.2
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec90 0b03 	vldmia	r0, {d0}
0+06c <[^>]*> ec90 0b03 	vldmia	r0, {d0}
0+070 <[^>]*> ecb0 0b03 	vldmia	r0!, {d0}
0+074 <[^>]*> ecb0 0b03 	vldmia	r0!, {d0}
0+078 <[^>]*> ed30 0b03 	vldmdb	r0!, {d0}
0+07c <[^>]*> ed30 0b03 	vldmdb	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec80 0b03 	vstmia	r0, {d0}
0+09c <[^>]*> ec80 0b03 	vstmia	r0, {d0}
0+0a0 <[^>]*> eca0 0b03 	vstmia	r0!, {d0}
0+0a4 <[^>]*> eca0 0b03 	vstmia	r0!, {d0}
0+0a8 <[^>]*> ed20 0b03 	vstmdb	r0!, {d0}
0+0ac <[^>]*> ed20 0b03 	vstmdb	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec80 1b03 	vstmia	r0, {d1}
0+220 <[^>]*> ec80 2b03 	vstmia	r0, {d2}
0+224 <[^>]*> ec80 fb03 	vstmia	r0, {d15}
0+228 <[^>]*> ec80 0b05 	vstmia	r0, {d0-d1}
0+22c <[^>]*> ec80 0b07 	vstmia	r0, {d0-d2}
0+230 <[^>]*> ec80 0b21 	vstmia	r0, {d0-d15}
0+234 <[^>]*> ec80 1b1f 	vstmia	r0, {d1-d15}
0+238 <[^>]*> ec80 2b1d 	vstmia	r0, {d2-d15}
0+23c <[^>]*> ec80 eb05 	vstmia	r0, {d14-d15}
0+240 <[^>]*> ec81 0b03 	vstmia	r1, {d0}
0+244 <[^>]*> ec8e 0b03 	vstmia	lr, {d0}
d222 2
a223 2
0+33e <[^>]*> ec97 1b03 	vldmia(eq|)	r7, {d1}
0+342 <[^>]*> ec98 2b03 	vldmia(eq|)	r8, {d2}
d225 4
a228 4
0+348 <[^>]*> ecb9 3b03 	vldmia(eq|)	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	vldmia(eq|)	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	vldmdb(eq|)	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	vldmdb(eq|)	ip!, {d6}
d237 2
a238 2
0+374 <[^>]*> ec85 7b03 	vstmia(eq|)	r5, {d7}
0+378 <[^>]*> ec86 8b03 	vstmia(eq|)	r6, {d8}
d240 4
a243 4
0+37e <[^>]*> eca7 9b03 	vstmia(eq|)	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	vstmia(eq|)	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	vstmdb(eq|)	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	vstmdb(eq|)	sl!, {d12}
@


1.1
log
@2005-09-02  Paul Brook  <paul@@codesourcery.com>

bfd/
	* libbdf.h: Regenerate.
	* bfd-in2.h: Regenerate.
	* reloc.c: Add BFD_RELOC_ARM_T32_CP_OFF_IMM and
	BFD_RELOC_ARM_T32_CP_OFF_IMM_S2.
gas/
	* config/tc-arm.c (encode_arm_cp_address): Use
	BFD_RELOC_ARM_T32_CP_OFF_IMM in thumb mode.
	(do_iwmmxt_wldstbh): Use BFD_RELOC_ARM_T32_CP_OFF_IMM_S2 in thumb
	mode.
	(md_assemble): Only allow coprocessor instructions when Thumb-2 is
	available.
	(cCE, cC3): Define.
	(insns): Use them for coprocessor instructions.
	(md_pcrel_from_section): Handle BFD_RELOC_ARM_T32_CP_OFF_IMM.
	(get_thumb32_insn): New function.
	(put_thumb32_insn): New function.
	(md_apply_fix): Handle BFD_RELOC_ARM_T32_CP_OFF_IMM and
	BFD_RELOC_ARM_T32_CP_OFF_IMM_S2.
gas/testsuite/
	* gas/arm/vfp-bad_t2.d, gas/arm/vfp-bad_t2.l, arm/vfp-bad_t2.s,
	gas/arm/vfp1_t2.d, gas/arm/vfp1_t2.s, gas/arm/vfp1xD_t2.d,
	gas/arm/vfp1xD_t2.s, gas/arm/vfp2_t2.d, gas/arm/vfp2_t2.s): New files.
opcodes/
	* arm-dis.c (coprocessor_opcodes): New.
	(arm_opcodes, thumb32_opcodes): Remove coprocessor insns.
	(print_insn_coprocessor): New function.
	(print_insn_arm): Use print_insn_coprocessor.  Remove coprocessor
	format characters.
	(print_insn_thumb32): Use print_insn_coprocessor.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec80 1b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec80 2b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80 fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec80 0b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec80 0b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec80 0b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec80 1b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec80 2b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80 eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec81 0b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e 0b03 	fstmiax	lr, {d0}
d222 2
a223 2
0+33e <[^>]*> ec97 1b03 	fldmiax(eq|)	r7, {d1}
0+342 <[^>]*> ec98 2b03 	fldmiax(eq|)	r8, {d2}
d225 4
a228 4
0+348 <[^>]*> ecb9 3b03 	fldmiax(eq|)	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	fldmiax(eq|)	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	fldmdbx(eq|)	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	fldmdbx(eq|)	ip!, {d6}
d237 2
a238 2
0+374 <[^>]*> ec85 7b03 	fstmiax(eq|)	r5, {d7}
0+378 <[^>]*> ec86 8b03 	fstmiax(eq|)	r6, {d8}
d240 4
a243 4
0+37e <[^>]*> eca7 9b03 	fstmiax(eq|)	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	fstmiax(eq|)	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	fstmdbx(eq|)	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	fstmdbx(eq|)	sl!, {d12}
@


1.1.2.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec90 0b03 	vldmia	r0, {d0}
0+06c <[^>]*> ec90 0b03 	vldmia	r0, {d0}
0+070 <[^>]*> ecb0 0b03 	vldmia	r0!, {d0}
0+074 <[^>]*> ecb0 0b03 	vldmia	r0!, {d0}
0+078 <[^>]*> ed30 0b03 	vldmdb	r0!, {d0}
0+07c <[^>]*> ed30 0b03 	vldmdb	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec80 0b03 	vstmia	r0, {d0}
0+09c <[^>]*> ec80 0b03 	vstmia	r0, {d0}
0+0a0 <[^>]*> eca0 0b03 	vstmia	r0!, {d0}
0+0a4 <[^>]*> eca0 0b03 	vstmia	r0!, {d0}
0+0a8 <[^>]*> ed20 0b03 	vstmdb	r0!, {d0}
0+0ac <[^>]*> ed20 0b03 	vstmdb	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec80 1b03 	vstmia	r0, {d1}
0+220 <[^>]*> ec80 2b03 	vstmia	r0, {d2}
0+224 <[^>]*> ec80 fb03 	vstmia	r0, {d15}
0+228 <[^>]*> ec80 0b05 	vstmia	r0, {d0-d1}
0+22c <[^>]*> ec80 0b07 	vstmia	r0, {d0-d2}
0+230 <[^>]*> ec80 0b21 	vstmia	r0, {d0-d15}
0+234 <[^>]*> ec80 1b1f 	vstmia	r0, {d1-d15}
0+238 <[^>]*> ec80 2b1d 	vstmia	r0, {d2-d15}
0+23c <[^>]*> ec80 eb05 	vstmia	r0, {d14-d15}
0+240 <[^>]*> ec81 0b03 	vstmia	r1, {d0}
0+244 <[^>]*> ec8e 0b03 	vstmia	lr, {d0}
d222 2
a223 2
0+33e <[^>]*> ec97 1b03 	vldmia(eq|)	r7, {d1}
0+342 <[^>]*> ec98 2b03 	vldmia(eq|)	r8, {d2}
d225 4
a228 4
0+348 <[^>]*> ecb9 3b03 	vldmia(eq|)	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	vldmia(eq|)	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	vldmdb(eq|)	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	vldmdb(eq|)	ip!, {d6}
d237 2
a238 2
0+374 <[^>]*> ec85 7b03 	vstmia(eq|)	r5, {d7}
0+378 <[^>]*> ec86 8b03 	vstmia(eq|)	r6, {d8}
d240 4
a243 4
0+37e <[^>]*> eca7 9b03 	vstmia(eq|)	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	vstmia(eq|)	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	vstmdb(eq|)	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	vstmdb(eq|)	sl!, {d12}
@


1.1.2.2
log
@	* gas/config/tc-arm.c (parse_vfp_reg_list): Improve register bounds
	checking.
	(do_neon_mov): Enable several VMOV variants for VFP. Add suitable
	architecture version checks.
	(insns): Allow overlapping instructions to be used in VFP mode.

   	* gas/testsuite/gas/arm/vfp-neon-overlap.s: New test. Overlapping
	VFP/Neon instructions.
	* gas/testsuite/gas/arm/vfp-neon-overlap.d: Expected output of above.
	* gas/testsuite/gas/arm/vfp1xD.d: Test for fldmx/fstmx.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfpv3-32drs.d: Likewise.

   	* opcodes/arm-dis.c (coprocessor_opcodes): Don't interpret fldmx/fstmx
	as vldm/vstm.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec90 0b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb0 0b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed30 0b03 	fldmdbx	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec80 0b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca0 0b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed20 0b03 	fstmdbx	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec80 1b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec80 2b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80 fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec80 0b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec80 0b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec80 0b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec80 1b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec80 2b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80 eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec81 0b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e 0b03 	fstmiax	lr, {d0}
d222 2
a223 2
0+33e <[^>]*> ec97 1b03 	fldmiax(eq|)	r7, {d1}
0+342 <[^>]*> ec98 2b03 	fldmiax(eq|)	r8, {d2}
d225 4
a228 4
0+348 <[^>]*> ecb9 3b03 	fldmiax(eq|)	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	fldmiax(eq|)	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	fldmdbx(eq|)	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	fldmdbx(eq|)	ip!, {d6}
d237 2
a238 2
0+374 <[^>]*> ec85 7b03 	fstmiax(eq|)	r5, {d7}
0+378 <[^>]*> ec86 8b03 	fstmiax(eq|)	r6, {d8}
d240 4
a243 4
0+37e <[^>]*> eca7 9b03 	fstmiax(eq|)	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	fstmiax(eq|)	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	fstmdbx(eq|)	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	fstmdbx(eq|)	sl!, {d12}
@


1.1.2.3
log
@2006-04-29  Paul Brook  <paul@@codesourcery.com>

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %c to unconditional
	arm instructions.
	(neon_opcodes): Add conditional execution specifiers.
	(thumb_opcodes): Ditto.
	(thumb32_opcodes): Ditto.
	(arm_conditional): Change 0xe to "al" and add "" to end.
	(ifthen_state, ifthen_next_state, ifthen_address): New.
	(IFTHEN_COND): Define.
	(print_insn_coprocessor, print_insn_neon): Print thumb conditions.
	(print_insn_arm): Change %c to use new values of arm_conditional.
	(print_insn_thumb16): Print thumb conditions.  Add %I.
	(print_insn_thumb32): Print thumb conditions.
	(find_ifthen_state): New function.
	(print_insn): Track IT block state.
	* gas/testsuite/gas/arm/thumb2_bcond.d: Update expected output.
	* gas/testsuite/gas/arm/thumb32.d: Ditto.
	* gas/testsuite/gas/arm/vfp1_t2.d: Ditto.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Ditto.
	* binutils/testsuite/binutils-all/arm/objdump.exp: New file.
	* binutils/testsuite/binutils-all/arm/thumb2-cond.s: New test.
@
text
@d188 1
d190 4
a193 4
0+2ca <[^>]*> eef1 fa10 	fmstateq
0+2ce <[^>]*> eef4 1ae3 	fcmpeseq	s3, s7
0+2d2 <[^>]*> eef5 2ac0 	fcmpezseq	s5
0+2d6 <[^>]*> eef4 0a41 	fcmpseq	s1, s2
d195 4
a198 4
0+2dc <[^>]*> eef5 0a40 	fcmpzseq	s1
0+2e0 <[^>]*> eef0 0ae1 	fabsseq	s1, s3
0+2e4 <[^>]*> eef0 fa69 	fcpyseq	s31, s19
0+2e8 <[^>]*> eeb1 aa44 	fnegseq	s20, s8
d200 4
a203 4
0+2ee <[^>]*> eef1 2ae3 	fsqrtseq	s5, s7
0+2f2 <[^>]*> ee32 3a82 	faddseq	s6, s5, s4
0+2f6 <[^>]*> eec1 1a20 	fdivseq	s3, s2, s1
0+2fa <[^>]*> ee4f fa2e 	fmacseq	s31, s30, s29
d205 4
a208 4
0+300 <[^>]*> ee1d ea8d 	fmscseq	s28, s27, s26
0+304 <[^>]*> ee6c ca2b 	fmulseq	s25, s24, s23
0+308 <[^>]*> ee0a baca 	fnmacseq	s22, s21, s20
0+30c <[^>]*> ee59 9a68 	fnmscseq	s19, s18, s17
d210 4
a213 4
0+312 <[^>]*> ee27 8ac7 	fnmulseq	s16, s15, s14
0+316 <[^>]*> ee76 6a65 	fsubseq	s13, s12, s11
0+31a <[^>]*> ed98 5a00 	fldseq	s10, \[r8\]
0+31e <[^>]*> edc7 4a00 	fstseq	s9, \[r7\]
d215 4
a218 4
0+324 <[^>]*> ec91 4a01 	fldmiaseq	r1, {s8}
0+328 <[^>]*> ecd2 3a01 	fldmiaseq	r2, {s7}
0+32c <[^>]*> ecb3 3a01 	fldmiaseq	r3!, {s6}
0+330 <[^>]*> ecf4 2a01 	fldmiaseq	r4!, {s5}
d220 4
a223 4
0+336 <[^>]*> ed35 2a01 	fldmdbseq	r5!, {s4}
0+33a <[^>]*> ed76 1a01 	fldmdbseq	r6!, {s3}
0+33e <[^>]*> ec97 1b03 	fldmiaxeq	r7, {d1}
0+342 <[^>]*> ec98 2b03 	fldmiaxeq	r8, {d2}
d225 4
a228 4
0+348 <[^>]*> ecb9 3b03 	fldmiaxeq	r9!, {d3}
0+34c <[^>]*> ecba 4b03 	fldmiaxeq	sl!, {d4}
0+350 <[^>]*> ed3b 5b03 	fldmdbxeq	fp!, {d5}
0+354 <[^>]*> ed3c 6b03 	fldmdbxeq	ip!, {d6}
d230 4
a233 4
0+35a <[^>]*> ec8d 1a01 	fstmiaseq	sp, {s2}
0+35e <[^>]*> ecce 0a01 	fstmiaseq	lr, {s1}
0+362 <[^>]*> ece1 fa01 	fstmiaseq	r1!, {s31}
0+366 <[^>]*> eca2 fa01 	fstmiaseq	r2!, {s30}
d235 4
a238 4
0+36c <[^>]*> ed63 ea01 	fstmdbseq	r3!, {s29}
0+370 <[^>]*> ed24 ea01 	fstmdbseq	r4!, {s28}
0+374 <[^>]*> ec85 7b03 	fstmiaxeq	r5, {d7}
0+378 <[^>]*> ec86 8b03 	fstmiaxeq	r6, {d8}
d240 4
a243 4
0+37e <[^>]*> eca7 9b03 	fstmiaxeq	r7!, {d9}
0+382 <[^>]*> eca8 ab03 	fstmiaxeq	r8!, {d10}
0+386 <[^>]*> ed29 bb03 	fstmdbxeq	r9!, {d11}
0+38a <[^>]*> ed2a cb03 	fstmdbxeq	sl!, {d12}
d245 4
a248 4
0+390 <[^>]*> eef8 dac3 	fsitoseq	s27, s6
0+394 <[^>]*> eefd ca62 	ftosiseq	s25, s5
0+398 <[^>]*> eefd bac2 	ftosizseq	s23, s4
0+39c <[^>]*> eefc aa61 	ftouiseq	s21, s3
d250 4
a253 4
0+3a2 <[^>]*> eefc 9ac1 	ftouizseq	s19, s2
0+3a6 <[^>]*> eef8 8a60 	fuitoseq	s17, s1
0+3aa <[^>]*> ee11 ba90 	fmrseq	fp, s3
0+3ae <[^>]*> eef0 9a10 	fmrxeq	r9, fpsid
d255 2
a256 2
0+3b4 <[^>]*> ee01 9a90 	fmsreq	s3, r9
0+3b8 <[^>]*> eee0 8a10 	fmxreq	fpsid, r8
@


