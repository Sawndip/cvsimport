head	1.43;
access;
symbols
	binutils-2_24-branch:1.43.0.2
	binutils-2_24-branchpoint:1.43
	binutils-2_21_1:1.41
	binutils-2_23_2:1.42
	binutils-2_23_1:1.42
	binutils-2_23:1.42
	binutils-2_23-branch:1.42.0.6
	binutils-2_23-branchpoint:1.42
	binutils-2_22_branch:1.42.0.4
	binutils-2_22:1.42
	binutils-2_22-branch:1.42.0.2
	binutils-2_22-branchpoint:1.42
	binutils-2_21:1.41
	binutils-2_21-branch:1.41.0.18
	binutils-2_21-branchpoint:1.41
	binutils-2_20_1:1.41
	binutils-2_20:1.41
	binutils-arc-20081103-branch:1.41.0.16
	binutils-arc-20081103-branchpoint:1.41
	binutils-2_20-branch:1.41.0.14
	binutils-2_20-branchpoint:1.41
	dje-cgen-play1-branch:1.41.0.12
	dje-cgen-play1-branchpoint:1.41
	arc-20081103-branch:1.41.0.10
	arc-20081103-branchpoint:1.41
	binutils-2_19_1:1.41
	binutils-2_19:1.41
	binutils-2_19-branch:1.41.0.8
	binutils-2_19-branchpoint:1.41
	binutils-2_18:1.41
	binutils-2_18-branch:1.41.0.6
	binutils-2_18-branchpoint:1.41
	binutils-csl-coldfire-4_1-32:1.41
	binutils-csl-sourcerygxx-4_1-32:1.41
	binutils-csl-innovasic-fido-3_4_4-33:1.41
	binutils-csl-sourcerygxx-3_4_4-32:1.35
	binutils-csl-coldfire-4_1-30:1.41
	binutils-csl-sourcerygxx-4_1-30:1.41
	binutils-csl-coldfire-4_1-28:1.41
	binutils-csl-sourcerygxx-4_1-29:1.41
	binutils-csl-sourcerygxx-4_1-28:1.41
	binutils-csl-arm-2006q3-27:1.41
	binutils-csl-sourcerygxx-4_1-27:1.41
	binutils-csl-arm-2006q3-26:1.41
	binutils-csl-sourcerygxx-4_1-26:1.41
	binutils-csl-sourcerygxx-4_1-25:1.41
	binutils-csl-sourcerygxx-4_1-24:1.41
	binutils-csl-sourcerygxx-4_1-23:1.41
	binutils-csl-sourcerygxx-4_1-21:1.41
	binutils-csl-arm-2006q3-21:1.41
	binutils-csl-sourcerygxx-4_1-22:1.41
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.41
	binutils-csl-sourcerygxx-4_1-20:1.41
	binutils-csl-arm-2006q3-19:1.41
	binutils-csl-sourcerygxx-4_1-19:1.41
	binutils-csl-sourcerygxx-4_1-18:1.41
	binutils-csl-renesas-4_1-9:1.41
	binutils-csl-sourcerygxx-3_4_4-25:1.35
	binutils-csl-renesas-4_1-8:1.41
	binutils-csl-renesas-4_1-7:1.41
	binutils-csl-renesas-4_1-6:1.41
	binutils-csl-sourcerygxx-4_1-17:1.41
	binutils-csl-sourcerygxx-4_1-14:1.41
	binutils-csl-sourcerygxx-4_1-15:1.41
	binutils-csl-sourcerygxx-4_1-13:1.41
	binutils-2_17:1.41
	binutils-csl-sourcerygxx-4_1-12:1.41
	binutils-csl-sourcerygxx-3_4_4-21:1.41
	binutils-csl-wrs-linux-3_4_4-24:1.35.4.5
	binutils-csl-wrs-linux-3_4_4-23:1.35.4.5
	binutils-csl-sourcerygxx-4_1-9:1.41
	binutils-csl-sourcerygxx-4_1-8:1.41
	binutils-csl-sourcerygxx-4_1-7:1.41
	binutils-csl-arm-2006q1-6:1.41
	binutils-csl-sourcerygxx-4_1-6:1.41
	binutils-csl-wrs-linux-3_4_4-22:1.35.4.5
	binutils-csl-coldfire-4_1-11:1.41
	binutils-csl-sourcerygxx-3_4_4-19:1.41
	binutils-csl-coldfire-4_1-10:1.41
	binutils-csl-sourcerygxx-4_1-5:1.41
	binutils-csl-sourcerygxx-4_1-4:1.41
	binutils-csl-wrs-linux-3_4_4-21:1.35.4.5
	binutils-csl-morpho-4_1-4:1.41
	binutils-csl-sourcerygxx-3_4_4-17:1.41
	binutils-csl-wrs-linux-3_4_4-20:1.35.4.4
	binutils-2_17-branch:1.41.0.4
	binutils-2_17-branchpoint:1.41
	binutils-csl-2_17-branch:1.41.0.2
	binutils-csl-2_17-branchpoint:1.41
	binutils-csl-gxxpro-3_4-branch:1.35.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.35
	binutils-2_16_1:1.35
	binutils-csl-arm-2005q1b:1.35.4.4
	binutils-2_16:1.35
	binutils-csl-arm-2005q1a:1.35.4.2
	binutils-csl-arm-2005q1-branch:1.35.0.4
	binutils-csl-arm-2005q1-branchpoint:1.35
	binutils-2_16-branch:1.35.0.2
	binutils-2_16-branchpoint:1.35
	csl-arm-2004-q3d:1.33
	csl-arm-2004-q3:1.32
	binutils-2_15:1.28
	binutils-2_15-branchpoint:1.28
	csl-arm-2004-q1a:1.29
	csl-arm-2004-q1:1.28
	binutils-2_15-branch:1.28.0.4
	cagney_bfdfile-20040213-branch:1.28.0.2
	cagney_bfdfile-20040213-branchpoint:1.28
	cagney_bigcore-20040122-branch:1.27.0.2
	cagney_bigcore-20040122-branchpoint:1.27
	csl-arm-2003-q4:1.26
	binutils-2_14:1.18
	binutils-2_14-branch:1.18.0.2
	binutils-2_14-branchpoint:1.18
	binutils-2_13_2_1:1.14
	binutils-2_13_2:1.14
	binutils-2_13_1:1.14
	binutils-2_13:1.14
	binutils-2_13-branchpoint:1.14
	binutils-2_13-branch:1.14.0.2
	binutils-2_12_1:1.13
	binutils-2_12:1.13
	binutils-2_12-branch:1.13.0.2
	binutils-2_12-branchpoint:1.13
	cygnus_cvs_20020108_pre:1.7
	binutils-2_11_2:1.5.2.1
	binutils-2_11_1:1.5.2.1
	binutils-2_11:1.5
	x86_64versiong3:1.5
	binutils-2_11-branch:1.5.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.43
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.43
date	2012.12.17.16.55.49;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2011.04.06.17.09.51;	author jsm28;	state Exp;
branches;
next	1.41;

1.41
date	2005.07.04.14.55.52;	author pbrook;	state Exp;
branches;
next	1.40;

1.40
date	2005.06.30.18.33.17;	author zack;	state Exp;
branches;
next	1.39;

1.39
date	2005.05.18.05.40.09;	author zack;	state Exp;
branches;
next	1.38;

1.38
date	2005.03.29.16.54.21;	author drow;	state Exp;
branches;
next	1.37;

1.37
date	2005.03.15.20.38.00;	author zack;	state Exp;
branches;
next	1.36;

1.36
date	2005.03.12.18.25.47;	author zack;	state Exp;
branches;
next	1.35;

1.35
date	2005.03.04.15.28.36;	author nickc;	state Exp;
branches
	1.35.4.1;
next	1.34;

1.34
date	2005.03.01.15.39.59;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2004.10.05.13.51.39;	author nickc;	state Exp;
branches;
next	1.32;

1.32
date	2004.09.30.16.21.46;	author nickc;	state Exp;
branches;
next	1.31;

1.31
date	2004.08.16.08.15.50;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	2004.08.11.02.11.58;	author mmitchel;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.30.10.51.13;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.23.16.28.15;	author drow;	state Exp;
branches;
next	1.27;

1.27
date	2004.01.09.11.53.16;	author pbrook;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.16.17.44.36;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.10.12.50.26;	author pbrook;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.06.01.25.29;	author mmitchel;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.13.14.19.00;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2003.11.06.15.30.05;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.17.22.45.29;	author ian;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.19.13.05.42;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.13.16.45.55;	author rearnsha;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.03.00.25.02;	author pb;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2003.03.25.20.55.59;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.21.19.05.02;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2002.08.22.16.10.04;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.20.17.05.35;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.19.14.25.48;	author rearnsha;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.18.17.01.55;	author rearnsha;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.15.16.05.34;	author rearnsha;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.14.17.39.01;	author rearnsha;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.14.15.00.18;	author rearnsha;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.11.18.00.17;	author rearnsha;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.08.18.59.16;	author aldyh;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.21.19.46.54;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.02.19.39.15;	author nickc;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.01.01.13.43.06;	author pb;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.25.00.21.39;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.13.21.23.27;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.48;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.35.4.1
date	2005.03.28.15.30.08;	author drow;	state Exp;
branches;
next	1.35.4.2;

1.35.4.2
date	2005.03.28.15.39.05;	author drow;	state Exp;
branches;
next	1.35.4.3;

1.35.4.3
date	2005.04.26.05.31.42;	author zack;	state Exp;
branches;
next	1.35.4.4;

1.35.4.4
date	2005.04.29.17.46.04;	author zack;	state Exp;
branches;
next	1.35.4.5;

1.35.4.5
date	2006.04.28.19.10.41;	author jsm28;	state Exp;
branches;
next	;

1.18.2.1
date	2003.06.13.16.46.51;	author rearnsha;	state Exp;
branches;
next	;

1.5.2.1
date	2001.06.18.19.22.39;	author pb;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.48;	author rth;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Add copyright notices
@
text
@# Copyright 2012
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  

#
# Some ARM tests
#

if {[istarget arm*-*-*]} {
    run_dump_tests [lsort [glob -nocomplain $srcdir/$subdir/*.d]]
}
@


1.42
log
@bfd:
	* config.bfd (thumb-*-oabi): Don't handle in list of obsolete
	targets.
	(strongarm*, thumb*, xscale*): Remove architectures.
	(strongarm-*-kaos*, thumb-*-coff, thumb-*-elf, thumb-epoc-pe*,
	thumb-*-pe*, strongarm-*-elf, strongarm-*-coff, xscale-*-elf,
	xscale-*-coff): Remove targets.

binutils:
	* configure.in (thumb-*-pe*): Remove.
	* configure: Regenerate.

binutils/testsuite:
	* binutils-all/objcopy.exp (*arm*-*-coff): Change to arm*-*-coff.
	(xscale-*-coff, thumb*-*-coff, thumb*-*-pe): Don't handle.

gas:
	* configure.tgt (strongarm*be, strongarm*b, strongarm*,
	xscale*be|xscale*b, xscale*): Remove architectures.
	(thumb-*-coff, thumb-*-rtems*, thumb-*-elf, thumb-epoc-pe,
	thumb-*-pe, xscale-*-coff, xscale-*-elf): Remove targets.

gas/testsuite:
	* gas/all/gas.exp (*arm*-*-coff): Change to arm*-*-coff.
	(thumb*-*-coff, thumb*-*-pe*): Don;t handle.
	* gas/arm/arm.exp (*arm*-*-*): Change to arm*-*-*.
	(*xscale*-*-*): Don't handle.
	* gas/cfi/cfi.exp (xscale*-*): Don't handle.
	* gas/elf/elf.exp (*arm*-*-*): Change to arm*-*-*.
	(xscale*-*-*): Don't handle.

ld:
	* configure.tgt (thumb-*-linux-* | thumb-*-uclinux*,
	strongarm-*-coff, strongarm-*-elf, strongarm-*-kaos*,
	thumb-*-coff, thumb-*-elf, thumb-epoc-pe, thumb-*-pe,
	xscale-*-coff, xscale-*-elf): Remove targets.

ld/testsuite:
	* ld-selective/selective.exp (xscale-*-*): Don't handle.
	* ld-srec/srec.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
	(*arm*-*-*): Change to arm*-*-*.
	(strongarm*-*-coff, xscale*-*-coff, thumb-*-coff*, thumb-*-pe*,
	thumb-*-elf*, strongarm*-*-*, thumb-*-*): Remove xfails.
	* ld-undefined/undefined.exp (thumb*-*-pe*, thumb*-*-pe*): Remove
	commented-out xfails.
	(thumb-elf): Remove reference in comment.
	* lib/ld-lib.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
@
text
@d1 17
@


1.41
log
@2005-07-04  Zack Weinberg  <zack@@codesourcery.com>

	* lib/gas-defs.exp (run_dump_tests): New proc.
	(run_dump_test): Add support for new options: target, not-target,
	skip, not-skip, error-output.  Document stderr.  Tidy a
	little.
	(slurp_options): If a line doesn't match the option regexp, but
	does begin with #, ignore it; don't stop parsing options.
	* gas/arm/arm.exp: Remove most code.  Use run_dump_tests.

	* gas/arm/archv6t2-bad.d, gas/arm/armv1.d, gas/arm/iwmmxt-bad.d
	* gas/arm/r15-bad.d, gas/arm/req.d, gas/arm/t16-bad.d
	* gas/arm/undefined.d, gas/arm/undefined_coff.d, gas/arm/vfp-bad.d:
	New files.
	* gas/arm/bignum1.d, gas/arm/mapping.d, gas/arm/pic.d:
	Only run on ELF targets.
	* gas/arm/tls.d, gas/arm/unwind.d: Only run on ELF targets.
	Skip on VxWorks.
	* gas/arm/tls_vxworks.d, gas/arm/unwind_vxworks.d: New files.
	* gas/arm/thumb.d, gas/arm/thumb32.d: Don't run on aout or pe.
	* gas/arm/le-fpconst.d: Only run on *-*-pe.
	* gas/arm/inst.d: Skip on WinCE.
	* gas/arm/wince_inst.d: Skip unless WinCE.
	* gas/arm/el_segundo.d: Mark up for actual use; adjust
	expectations.
	* gas/arm/el_segundo.s: Remove irrelevant junk.  Add padding
	for a.out's sake.
@
text
@d5 1
a5 1
if {[istarget *arm*-*-*] || [istarget *xscale*-*-*]} {
@


1.40
log
@gas:
	* config/tc-arm.c (T_OPCODE_BRANCH, encode_arm_addr_mode_2)
	(encode_arm_addr_mode_3, encode_arm_cp_address, do_blx, do_t_blx)
	(do_t_branch, insns [b, bl]): Don't encode pipeline offset.
	(s_arm_elf_cons): Disallow use of (plt) suffix.
	(do_adrl): Adjust X_add_number unconditionally.
	(md_pcrel_from): Rename md_pcrel_from_section, add second segT
	argument.  Handle all adjustment for pipeline offset here.
	(md_apply_fix): No need to undo work of md_pcrel_from.  No
	need to extract pre-encoded pipeline adjustments from various
	branch instructions.  Generally, assume instructions are already
	all-bits-zero in the field being fixed up.  Remove all OBJ_ELF
	special cases.  Handle BFD_RELOC_ARM_PLT32 like
	BFD_RELOC_ARM_PCREL_BRANCH.
	(tc_gen_reloc): Remove OBJ_ELF special case.
	* config/tc-arm.c: Define MD_PCREL_FROM_SECTION.

gas/testsuite:
	* gas/arm/arm.exp: Don't special case ldconst, arm7t, or copro
	for *-wince-*.
	* gas/arm/wince_arm7t.d, gas/arm/wince_copro.d
	* gas/arm/wince_ldconst.d: Delete.
@
text
@a3 81
proc run_errors_test { name opts tname} {
    global srcdir subdir
    set testname "$tname"
    set file $srcdir/$subdir/$name
    gas_run ${name}.s $opts ">&${name}.out"
    if { [regexp_diff "${name}.out" "${file}.l"] } then {
        fail $testname
        verbose "output is [file_contents "${name}.out"]" 2
        return
    }
    pass $testname
}

if {[istarget *arm*-*-*] || [istarget "xscale-*-*"]} then {

    if {[istarget *-wince-*]} then {
	run_dump_test "wince_inst"
    } else {
	run_dump_test "inst"
    }

    run_dump_test "ldconst"
    run_dump_test "arm7t"
    run_dump_test "copro"
    run_dump_test "arm3"
    run_dump_test "arm6"
    run_dump_test "arm7dm"
    run_dump_test "arch4t"
    run_dump_test "immed"
    run_dump_test "float"
    run_dump_test "offset"
    run_dump_test "armv1"
    run_dump_test "arch5tej"
    run_dump_test "fpa-monadic"
    run_dump_test "fpa-dyadic"
    run_dump_test "fpa-mem"
    run_dump_test "vfp1xD"
    run_dump_test "vfp1"
    run_dump_test "vfp2"
    run_dump_test "xscale"
    run_dump_test "adrl"
    run_dump_test "reg-alias"
    run_dump_test "maverick"    
    run_dump_test "archv6"
    run_dump_test "archv6t2"
    run_dump_test "thumbv6"
    run_dump_test "thumbv6k"
    run_dump_test "arch6zk"
    run_dump_test "tcompat"
    run_dump_test "tcompat2"
    run_dump_test "iwmmxt"
    run_dump_test "macro1"
    
    run_errors_test "vfp-bad" "-mfpu=vfp" "VFP errors"
    run_errors_test "req" "-mcpu=arm7m" ".req errors"
    run_errors_test "armv1-bad" "-mcpu=arm7m" "ARM v1 errors"
    run_errors_test "r15-bad" "" "Invalid use of r15 errors"
    run_errors_test "archv6t2-bad" "-march=armv6t2" "Invalid V6T2 instructions"
    run_errors_test "t16-bad" "-march=armv6k" "Valid ARM, invalid Thumb"
    run_errors_test "iwmmxt-bad" "-mcpu=iwmmxt" "iWMMXt errors"

    if {[istarget *-*-*coff] || [istarget *-*-pe] || [istarget *-*-wince] ||
        [istarget *-*-*aout*] || [istarget *-*-netbsd] || [istarget *-*-riscix*]} then {
	# COFF and aout based ports use a different naming convention for local labels.
       run_errors_test "undefined_coff" "" "Undefined local label error"
   } else {
       # For ELF based ports we can run some additional tests as well.
        run_errors_test "undefined" "" "Undefined local label error"
       
	run_dump_test "pic"
	run_dump_test "mapping"
	run_dump_test "bignum1"
	run_dump_test "unwind"
	run_dump_test "tls"
    }

    # The arm-aout port does not support Thumb branch relocations.
    if {! [istarget arm*-*-aout] && ![istarget arm-*-pe]} then {
	run_dump_test "thumb"
	run_dump_test "thumb32"
    }
d5 2
a6 5
    # Not all arm targets are bi-endian, so only run this test on ones
    # we know that are.  FIXME: We should probably also key off armeb/armel.
    if [istarget *-*-pe] {
	run_dump_test "le-fpconst"
    }
@


1.39
log
@include/elf:
	* arm.h: Import complete list of official relocation names
	and numbers from AAELF.  Define FAKE_RELOCs for old names.
	Remove a few old names no longer used anywhere.

bfd:
	* elf32-arm.c: Wherever possible, use official reloc names
	from AAELF.
	(elf32_arm_howto_table, elf32_arm_tls_gd32_howto)
	(elf32_arm_tls_ldo32_howto, elf32_arm_tls_ldm32_howto)
	(elf32_arm_tls_le32_howto, elf32_arm_tls_ie32_howto)
	(elf32_arm_vtinherit_howto, elf32_arm_vtentry_howto)
	(elf32_arm_pc11_howto, elf32_arm_thm_pc9_howto, elf32_arm_got_prel)
	(elf32_arm_r_howto): Replace with elf32_arm_howto_table_1,
	elf32_arm_howto_table_2, and elf32_arm_howto_table_3.
	Add many new relocations from AAELF.
	(elf32_arm_howto_from_type): Update to match.
	(elf32_arm_reloc_map): Add entries for R_ARM_THM_JUMP24,
	R_ARM_THM_JUMP11, R_ARM_THM_JUMP19, R_ARM_THM_JUMP8,
	R_ARM_THM_JUMP6, R_ARM_GNU_VTINHERIT, and R_ARM_GNU_VTENTRY.
	(elf32_arm_reloc_type_lookup): Use elf32_arm_howto_from_type.
	(elf32_arm_final_link_relocate): Add support for
	R_ARM_THM_JUMP24, R_ARM_THM_JUMP19, R_ARM_THM_JUMP6.  Remove
	case entries redundant with default.

	* reloc.c: Reorganize ARM relocations.  Add Thumb
	assembler-internal relocations BFD_RELOC_ARM_T32_OFFSET_U8,
	BFD_RELOC_ARM_T32_OFFSET_IMM, BFD_RELOC_ARM_T32_IMMEDIATE.
	Add visible relocations BFD_RELOC_THUMB_PCREL_BRANCH7,
	BFD_RELOC_THUMB_BRANCH20, BFD_RELOC_THUMB_BRANCH25.
	Delete unused relocations BFD_RELOC_ARM_GOT12, BFD_RELOC_ARM_COPY.
	* bfd-in2.h, libbfd.h: Regenerate.

opcodes:
	* arm-dis.c (thumb_opcodes): Add disassembly for V6T2 16-bit
	instructions.  Adjust disassembly of some opcodes to match
	unified syntax.
	(thumb32_opcodes): New table.
	(print_insn_thumb): Rename print_insn_thumb16; don't handle
	two-halfword branches here.
	(print_insn_thumb32): New function.
	(print_insn): Choose among print_insn_arm, print_insn_thumb16,
	and print_insn_thumb32.  Be consistent about order of
	halfwords when printing 32-bit instructions.

gas:
	* hash.c (hash_lookup): Add len parameter.  All callers changed.
	(hash_find_n): New interface.
	* hash.h: Prototype hash_find_n.
	* sb.c: Include as.h.
	(scrub_from_sb, sb_to_scrub, scrub_position): New statics.
	(sb_scrub_and_add_sb): New interface.
	* sb.h: Prototype sb_scrub_and_add_sb.
	* input-scrub.c (input_scrub_include_sb): Use sb_scrub_and_add_sb.

	* config/tc-arm.h (TC_FORCE_RELOCATION_LOCAL): Remove
	reference to BFD_RELOC_ARM_GOT12 which is never generated.
	* config/tc-arm.c: Rewrite, adding Thumb-2 support.

gas/testsuite:
	* gas/arm/arm.exp: Convert all existing "gas_test" tests to
	"run_dump_test" tests.  Run more tests unconditionally.  Run new tests.
	* gas/arm/arch4t.s, gas/arm/arch6zk.s, gas/arm/arm3.s, gas/arm/arm6.s
	* gas/arm/arm7dm.s, gas/arm/bignum1.s, gas/arm/float.s
	* gas/arm/immed.s, gas/arm/iwmmxt.s, gas/arm/offset.s, gas/arm/thumb.s:
	Adjust to work as a dump test.
	* gas/arm/arch4t.d, gas/arm/arch6zk.d, gas/arm/arm3.d, gas/arm/arm6.d
	* gas/arm/arm7dm.d, gas/arm/bignum1.d, gas/arm/float.d
	* gas/arm/immed.d, gas/arm/iwmmxt.d, gas/arm/offset.d, gas/arm/thumb.d:
	New files.

	* gas/arm/armv1-bad.l, gas/arm/armv1-bad.s: Remove tests for
	diagnostics that don't happen in the first pass anymore.

	* gas/arm/iwmmxt-bad.l, gas/arm/r15-bad.l, gas/arm/req.l
	* gas/arm/vfp-bad.l:
	Update expected diagnostics.
	* gas/arm/pic.d: Update expected reloc name.
	* gas/arm/thumbv6.d: CPY no longer appears in disassembly.
	* gas/arm/r15-bad.s: Avoid two-argument mul.
	* gas/arm/req.s: Adjust comments.
	* gas/arm/maverick.d, gas/arm/maverick.s: Avoid inappropriate
	use of PC.

	* gas/arm/macro-1.d, gas/arm/macro1.s
	* gas/arm/t16-bad.l, gas/arm/t16-bad.s
	* gas/arm/tcompat.d, gas/arm/tcompat.s
	* gas/arm/tcompat2.d, gas/arm/tcompat2.s
	* gas/arm/thumb32.d, gas/arm/thumb32.s
	New test pair.

ld/testsuite:
	* ld-arm/mixed-app.d: Adjust expected disassembly a little.
@
text
@a20 3
	run_dump_test "wince_ldconst"
	run_dump_test "wince_arm7t"
	run_dump_test "wince_copro"
a22 3
	run_dump_test "ldconst"
	run_dump_test "arm7t"
	run_dump_test "copro"
d25 3
@


1.38
log
@bfd/
	* bfd-in2.h, libbfd.h: Regenerated.
	* reloc.c: Add ARM TLS relocations.
	* elf32-arm.c (elf32_arm_howto_table): Add dynamic TLS
	relocations.
	(elf32_arm_tls_gd32_howto, elf32_arm_tls_ldo32_howto)
	(elf32_arm_tls_ldm32_howto, elf32_arm_tls_le32_howto)
	(elf32_arm_tls_ie32_howto): New.
	(elf32_arm_howto_from_type): Support TLS relocations.
	(elf32_arm_reloc_map): Likewise.
	(elf32_arm_reloc_type_lookup): Likewise.
	(TCB_SIZE): Define.
	(struct elf32_arm_obj_tdata): New.
	(elf32_arm_tdata, elf32_arm_local_got_tls_type): Define.
	(elf32_arm_mkobject): New function.
	(struct elf32_arm_relocs_copied): Add pc_count.
	(elf32_arm_hash_entry, GOT_UNKNOWN, GOT_NORMAL, GOT_TLS_GD)
	(GOT_TLS_IE): Define.
	(struct elf32_arm_link_hash_table): Add tls_ldm_got.
	(elf32_arm_link_hash_newfunc): Initialize tls_type.
	(elf32_arm_copy_indirect_symbol): Copy pc_count and tls_type.
	(elf32_arm_link_hash_table_create): Initialize tls_ldm_got.
	(dtpoff_base, tpoff): New functions.
	(elf32_arm_final_link_relocate): Handle TLS relocations.
	(IS_ARM_TLS_RELOC): Define.
	(elf32_arm_relocate_section): Warn about TLS mismatches.
	(elf32_arm_gc_sweep_hook): Handle TLS relocations and pc_count.
	(elf32_arm_check_relocs): Detect invalid symbol indexes.  Handle
	TLS relocations and pc_count.
	(elf32_arm_adjust_dynamic_symbol): Check non_got_ref.
	(allocate_dynrelocs): Handle TLS.  Bind REL32 relocs to local
	calls.
	(elf32_arm_size_dynamic_sections): Handle TLS.
	(elf32_arm_finish_dynamic_symbol): Likewise.
	(bfd_elf32_mkobject): Define.
gas/
	* config/tc-arm.c (arm_parse_reloc): Add TLS relocations.
	(md_apply_fix3): Mark TLS symbols.
	(tc_gen_reloc): Handle TLS relocations.
	(arm_fix_adjustable): Ignore TLS relocations.
	(s_arm_elf_cons): Support expressions after decorated symbols.
gas/testuite/
	* gas/arm/tls.s, gas/arm/tls.d: New files.
	* gas/arm/arm.exp: Run TLS test.
include/elf/
	* arm.h: Add TLS relocations.
ld/testsuite/
	* ld-arm/tls-lib.s, ld-arm/tls-lib.d, ld-arm/tls-lib.r,
	ld-arm/tls-app.s, ld-arm/tls-app.d, ld-arm/tls-app.r: New files.
	* ld-arm/arm-lib.ld, ld-arm/arm-dyn.ld: Increase data segment
	alignment.
	* ld-arm/arm-elf.exp: Run TLS tests.
@
text
@d31 7
a37 8
    gas_test "arm3.s" "-mcpu=arm3" $stdoptlist "Arm 3 instructions"
    gas_test "arm6.s" "-mcpu=arm6" $stdoptlist "Arm 6 instructions"
    gas_test "arm7dm.s" "-mcpu=arm7dm" $stdoptlist "Arm 7DM instructions"
    gas_test "arch4t.s" "-march=armv4t" $stdoptlist "Arm architecture 4t instructions"
    gas_test "immed.s" "" $stdoptlist "immediate expressions"
    gas_test "float.s" "-mcpu=arm7tdmi -mfpu=fpa" $stdoptlist "Core floating point instructions"
    gas_test "offset.s" "" $stdoptlist "OFFSET_IMM regression"

d55 4
d65 2
d78 1
a78 1
	gas_test "bignum1.s" "" $stdoptlist "bignums"
a79 1

d83 1
d85 2
a86 2
	# The arm-aout port does not support Thumb mode.
	gas_test "thumb.s" "-mcpu=arm7t" $stdoptlist "Thumb instructions"
a87 1
}
d89 5
a93 13
# Not all arm targets are bi-endian, so only run this test on ones
# we know that are.  FIXME: We should probably also key off armeb/armel.

if [istarget arm-*-pe] {
    run_dump_test "le-fpconst"

    # Since big-endian numbers have the normal format, this doesn't exist.
    #run_dump_test "be-fpconst"
}

if [istarget xscale-*] {
    run_dump_test "iwmmxt"
    run_errors_test "iwmmxt-bad" "-mcpu=iwmmxt" "iWMMXt errors"
@


1.37
log
@	* config/tc-arm.c (do_mla): Rename to do_mlas, take second
	is_mls parameter; do not diagnose Rm==Rd when is_mls.
	(do_mla, do_mls, five_bit_unsigned_immediate, bfci_lsb_and_width)
	(do_bfc, do_bfi, do_bfx, do_rbit, do_mov16, do_ldsttv4): New functions.
	(insns): Add ARMv6T2 instructions:
	bfc bfi mls movw movt rbit sbfx ubfx ldrht ldrsht ldrsbt strht.
	(arm_archs): Add V6T2 variants.
testsuite:
	* gas/arm/archv6t2.d, gas/arm/archv6t2.s: New dump test.
	* gas/arm/archv6t2-bad.l, gas/arm/archv6t2-bad.l: New errors test.
	* gas/arm/arm.exp: Run them.
@
text
@d75 2
@


1.36
log
@gas:
	* config/tc-arm.c (tinsns): Add ARMv6K instructions sev, wfe,
	wfi, yield.
opcodes:
	* arm-dis.c (thumb_opcodes): Add ARMv6K instructions nop, sev,
	wfe, wfi, yield.
gas/testsuite:
	* gas/arm/thumbv6k.d, gas/arm/thumbv6k.s: New dump test.
	* gas/arm/arm.exp: Run it.
@
text
@d52 1
d61 1
@


1.35
log
@Fix unexpected failrues for arm toolchains
@
text
@d53 1
@


1.35.4.1
log
@Backport ARM patches from HEAD to binutils-csl-arm-2005q1-branch.
@
text
@a51 1
    run_dump_test "archv6t2"
a52 1
    run_dump_test "thumbv6k"
a58 1
    run_errors_test "archv6t2-bad" "-march=armv6t2" "Invalid V6T2 instructions"
@


1.35.4.2
log
@	* bfd/bfd-in2.h, libbfd.h: Regenerated.
	* bfd/reloc.c: Add ARM TLS relocations.
	* bfd/elf32-arm.c (elf32_arm_howto_table): Add dynamic TLS
	relocations.
	(elf32_arm_tls_gd32_howto, elf32_arm_tls_ldo32_howto)
	(elf32_arm_tls_ldm32_howto, elf32_arm_tls_le32_howto)
	(elf32_arm_tls_ie32_howto): New.
	(elf32_arm_howto_from_type): Support TLS relocations.
	(elf32_arm_reloc_map): Likewise.
	(elf32_arm_reloc_type_lookup): Likewise.
	(TCB_SIZE): Define.
	(struct elf32_arm_obj_tdata): New.
	(elf32_arm_tdata, elf32_arm_local_got_tls_type): Define.
	(elf32_arm_mkobject): New function.
	(struct elf32_arm_relocs_copied): Add pc_count.
	(elf32_arm_hash_entry, GOT_UNKNOWN, GOT_NORMAL, GOT_TLS_GD)
	(GOT_TLS_IE): Define.
	(struct elf32_arm_link_hash_table): Add tls_ldm_got.
	(elf32_arm_link_hash_newfunc): Initialize tls_type.
	(elf32_arm_copy_indirect_symbol): Copy pc_count and tls_type.
	(elf32_arm_link_hash_table_create): Initialize tls_ldm_got.
	(dtpoff_base, tpoff): New functions.
	(elf32_arm_final_link_relocate): Handle TLS relocations.
	(IS_ARM_TLS_RELOC): Define.
	(elf32_arm_relocate_section): Warn about TLS mismatches.
	(elf32_arm_gc_sweep_hook): Handle TLS relocations and pc_count.
	(elf32_arm_check_relocs): Detect invalid symbol indexes.  Handle
	TLS relocations and pc_count.
	(elf32_arm_adjust_dynamic_symbol): Check non_got_ref.
	(allocate_dynrelocs): Handle TLS.  Bind REL32 relocs to local
	calls.
	(elf32_arm_size_dynamic_sections): Handle TLS.
	(elf32_arm_finish_dynamic_symbol): Likewise.
	(bfd_elf32_mkobject): Define.

	* gas/config/tc-arm.c (arm_parse_reloc): Add TLS relocations.
	(md_apply_fix3): Mark TLS symbols.
	(tc_gen_reloc): Handle TLS relocations.
	(arm_fix_adjustable): Ignore TLS relocations.
	(s_arm_elf_cons): Support expressions after decorated symbols.

	* gas/testsuite/gas/arm/tls.s, gas/testsuite/gas/arm/tls.d: New files.
	* gas/testsuite/gas/arm/arm.exp: Run TLS test.

	* include/elf/arm.h: Add TLS relocations.

	* ld/testsuite/ld-arm/tls-lib.s, ld/testsuite/ld-arm/tls-lib.d,
	ld/testsuite/ld-arm/tls-lib.r, ld/testsuite/ld-arm/tls-app.s,
	ld/testsuite/ld-arm/tls-app.d, ld/testsuite/ld-arm/tls-app.r: New files.
	* ld/testsuite/ld-arm/arm-lib.ld, ld/testsuite/ld-arm/arm-dyn.ld:
	Increase data segment alignment.
	* ld/testsuite/ld-arm/arm-elf.exp: Run TLS tests.
@
text
@a74 2

	run_dump_test "tls"
@


1.35.4.3
log
@	Thumb32 assembler.

	* include/elf/arm.h: Import full set of relocation names from
	latest AAELF.  Make the primary name of all relocations be the one
	AAELF specifies.  Provide aliases under the traditional names.
	Kill FIRST_INVALID_RELOC_* and LAST_INVALID_RELOC_*.
	* bfd/reloc.c: Reorganize ARM relocations.  Remove ARM relocations
	that are never generated.  Document more of the relocations.  Add
	relocations for Thumb32.
	* bfd/libbfd.h, bfd/bfd-in2.h: Regenerate.
	* bfd/elf32-arm.c: Reorganize howto tables.  Implement Thumb32
	relocations.
	* ld/testsuite/ld-arm/mixed-app.d: Adjust expectations for
	renamed relocations.

	* gas/hash.c (hash_find_n): New interface.
	* gas/hash.h: Prototype it.

	* gas/config/tc-arm.c: Rewrite and reorganize.  Implement 32-bit
	Thumb instructions.
	* gas/testsuite/gas/arm: Convert all "gas_test" style tests to
	"run_dump_test" style tests, for more thorough testing.  Make
	adjustments to expectations where necessary.
	* gas/testsuite/gas/arm/t16-bad.s, gas/testsuite/gas/arm/tcompat.s
	* gas/testsuite/gas/arm/tcompat2.s, gas/testsuite/gas/arm/thumb32.s:
	New test cases.

	* opcodes/arm-dis.c: Add support for Thumb32 instructions and
	16-bit V6T2 instructions.
@
text
@d31 8
a38 7
    run_dump_test "arm3"
    run_dump_test "arm6"
    run_dump_test "arm7dm"
    run_dump_test "arch4t"
    run_dump_test "immed"
    run_dump_test "float"
    run_dump_test "offset"
a55 3
    run_dump_test "tcompat"
    run_dump_test "tcompat2"
    run_dump_test "iwmmxt"
a61 2
    run_errors_test "t16-bad" "-march=armv6k" "Valid ARM, invalid Thumb"
    run_errors_test "iwmmxt-bad" "-mcpu=iwmmxt" "iWMMXt errors"
d73 1
a73 1
	run_dump_test "bignum1"
d75 1
a78 1
    # The arm-aout port does not support Thumb branch relocations.
d80 2
a81 2
	run_dump_test "thumb"
	run_dump_test "thumb32"
d83 4
d88 10
a97 5
    # Not all arm targets are bi-endian, so only run this test on ones
    # we know that are.  FIXME: We should probably also key off armeb/armel.
    if [istarget *-*-pe] {
	run_dump_test "le-fpconst"
    }
@


1.35.4.4
log
@	* gas/sb.c: Include as.h.
	(sb_to_scrub, scrub_position, scrub_from_sb): New statics.
	(sb_scrub_and_add_sb): New interface.
	* gas/sb.h: Declare sb_scrub_and_add_sb.
	* gas/input-scrub.c (input_scrub_include_sb): Use it.

	* gas/config/tc-arm.c (do_t_arit3c): Correct typo in expression.
	(do_t_mul): Allow dest to equal either source1 or source2 in
	16-bit form; do not complain about dest == source1 in any
	case.

	* gas/testsuite/gas/arm/tcompat2.s: Test both dest==source1 and
	dest==source2 for commutative arithmetic instructions.
	* gas/testsuite/gas/arm/tcompat2.d: Update to match.
	* gas/testsuite/gas/arm/t16-bad.l: Adjust expected diagnostic.
	* gas/testsuite/gas/arm/macro1.s, gas/arm/macro1.d: New test pair.
	* gas/testsuite/gas/arm/arm.exp: Run it.
@
text
@a57 1
    run_dump_test "macro1"
@


1.35.4.5
log
@	* gas/config/tc-arm.c (do_iwmmxt_wldstbh): Don't multiply offset
	by 4 here.
	(md_apply_fix3): Multiply offset by 4 here for
	BFD_RELOC_ARM_CP_OFF_IMM_S2.
	* gas/testsuite/gas/arm/arm.exp: Run iwmmxt-bad2.
	* gas/testsuite/gas/arm/iwmmxt.s: Increase offsets for wstrb and
	wstrh.
	* gas/testsuite/gas/arm/iwmmxt.d: Update expected results.
	* gas/testsuite/gas/arm/iwmmxt-bad2.s: Test wstrb, wstrh, wldrb
	and wldrh.
	* gas/testsuite/gas/arm/iwmmxt-bad2.l: Update expected error
	messages.
@
text
@a66 1
    run_errors_test "iwmmxt-bad2" "-mcpu=iwmmxt" "iWMMXt errors"
@


1.34
log
@Fix undefined local label test for COFF based ARM ports
@
text
@d60 6
a65 1
    if {[istarget *-*-*elf*] || [istarget *-*-linux*] || [istarget *-*-*eabi]} then {
d67 1
a71 3
    } else {
	# COFF based ports use a different naming convention for local labels.
       run_errors_test "undefined_coff" "" "Undefined local label error"
@


1.33
log
@Add support for generating ARM unwind tables.
@
text
@a58 1
    run_errors_test "undefined" "" "Undefined local label error"
d61 1
d66 3
@


1.32
log
@Apply Paul Brook's patch to implement armv6k instructions
@
text
@d61 1
a61 1
    if {[istarget *-*-elf*] || [istarget *-*-linux*]} then {
d65 1
@


1.31
log
@altmacro.d: Allow for rest of frag being padded to an alignment boundary.
arm.exp: Run bignum test for ELF based targets only.
@
text
@d53 1
@


1.30
log
@	* expr.c (operand): Handle the "~", "-", and "!" operators applied
	to bignums.

	* gas/arm/bignum1.s: New test.
	* gas/arm/arm.exp: Run it.
@
text
@a37 1
    gas_test "bignum1.s" "" $stdoptlist "bignums"
d63 1
@


1.29
log
@Fix handling of case sensitive register aliases and add a test for the bug
@
text
@d38 1
@


1.28
log
@	* gas/arm/arm.exp: Add "undefined" test.
	* gas/arm/undefined.s, gas/arm/undefined.l: New files.
@
text
@a30 4
    run_dump_test "armv1"

    run_errors_test "armv1-bad" "-mcpu=arm7m" "ARM v1 errors"

a31 1

a32 1

a33 6

    if {! [istarget arm*-*-aout] && ![istarget arm-*-pe]} then {
	# The arm-aout port does not support Thumb mode.
	gas_test "thumb.s" "-mcpu=arm7t" $stdoptlist "Thumb instructions"
    }

a34 3

    run_dump_test "arch5tej"

a35 1

d37 1
d39 2
a41 1

a42 1

a43 1

a44 1

a45 1

a46 3

    run_errors_test "vfp-bad" "-mfpu=vfp" "VFP errors"

a47 1

d49 4
d54 1
d56 1
a56 7

    run_dump_test "maverick"
    
    run_dump_test "archv6"

    run_dump_test "thumbv6"

d58 1
a61 1

d65 4
a68 3
    gas_test "offset.s" "" $stdoptlist "OFFSET_IMM regression"

    run_errors_test "undefined" "" "Undefined local label error"
@


1.27
log
@	* gas/config/tc-arm.c (do_vfp_reg2_from_sp2): Rename from
	do_vfp_sp_reg2.
	(do_vfp_sp2_from_reg2): New function.
	(insns): Use them.
	(do_vfp_dp_from_reg2): Check return values properly.
	* opcodes/arm-opc.h (arm_opcodes): Move generic mcrr after known
	specific opcodes.
	* gas/testsuite/gas/arm/vfp2.s, gas/arm/vfp2.d: New test.
	* gas/testsuite/gas/arm/arm.exp: Add them.
@
text
@d89 2
@


1.26
log
@Remove -8 bias on PC-relative load instructions for arm-wince-pe target
@
text
@d64 2
@


1.25
log
@	* gas/arm/arm.exp: Add r15-bad.
	* gas/arm/r15-bad.s: New file.
	* gas/arm/r15-bad.l: New file.
@
text
@a17 1
    run_dump_test "inst"
d19 11
a29 1
    run_dump_test "ldconst"
a40 2
    run_dump_test "arm7t"

a48 2

    run_dump_test "copro"
@


1.24
log
@	* gas/arm/arm.exp: Add archv6 and thumbv6.
	* gas/arm/archv6.d: New file.
	* gas/arm/archv6.s: Likewise.
	* gas/arm/thumbv6.d: Likewise.
	* gas/arm/thumbv6.s: Likewise.

	Add V6 support.
	* config/tc-arm.c (ARM_EXT_V6): New macro.
	(ARM_ARCH_V6): Likewise.
	(SHIFT_IMMEDIATE): Likewise.
	(SHIFT_LSL_OR_ASR_IMMEDIATE): Likewise.
	(SHIFT_ASR_IMMEDIATE): Likewise.
	(SHIFT_LSL_IMMMEDIATE): Likewise.
	(do_cps): New function.
	(do_cpsi): Likewise.
	(do_ldrex): Likewise.
	(do_pkhbt): Likewise.
	(do_pkhtb): Likewise.
	(do_qadd16): Likewise.
	(do_rev): Likewise.
	(do_rfe): Likewise.
	(do_sxtah): Likewise.
	(do_sxth): Likewise.
	(do_setend): Likewise.
	(do_smlad): Likewise.
	(do_smlald): Likewise.
	(do_smmul): Likewise.
	(do_ssat): Likewise.
	(do_usat): Likewise.
	(do_srs): Likewise.
	(do_ssat16): Likewise.
	(do_usat16): Likewise.
	(do_strex): Likewise.
	(do_umaal): Likewise.
	(do_cps_mode): Likewise.
	(do_cps_flags): Likewise.
	(do_endian_specifier): Likewise.
	(do_pkh_core): Likewise.
	(do_sat): Likewise.
	(do_sat16): Likewise.
	(insns): Add V6 instructions.
	(do_t_cps): New function.
	(do_t_cpy): Likewise.
	(do_t_setend): Likewise.
	(THUMB_CPY): New macro.
	(tinsns): Add V6 instructions.
	(decode_shift): Handle V6 restricted-shift options.
	(thumb_mov_compare): Support CPY.
	(arm_cores): Add arm1136js and arm1136jfs.
	(arm_archs): Add armv6.
	(arm_fpus): Add arm1136jfs.
	* doc/c-arm.texi (ARM Options): Mention arm1136js, arm1136jfs, and
	armv6 options.

	* gas/arm/arm.exp: Add archv6 and thumbv6.
	* gas/arm/archv6.d: New file.
	* gas/arm/archv6.s: Likewise.
	* gas/arm/thumbv6.d: Likewise.
	* gas/arm/thumbv6.s: Likewise.

	* arm-dis.c (print_arm_insn): Add 'W' macro.
	* arm-opc.h (arm_opcodes): Add V6 instructions.
	(thumb_opcodes): Likewise.
@
text
@d73 2
@


1.23
log
@Add support for ARM ELF Mapping symbols
@
text
@d69 4
@


1.22
log
@* config/tc-arm.texi (struct reg_entry): Add new field 'builtin'.
  (rn_table, iwmmxt_table, cp_table, cn_table, fn_table, sn_table,
  dn_table, mav_mvf_table, mac_mvd_table, mav_mvfx_table,
  mav_mvax_table, mav_dspc_table): Initialise new field.
  (insert_reg_alias): Initialise new field.
  (md_pseudo_table): Add "unreq" entry.
  (s_unreq): New function: Undo the effects of a previous .req.
* doc/c-arm.texi: Document new pseudo op.
* NEWS: Mention new feature.
* testsuite/gas/arm/req.s: New test file.  Check .req and .unreq psuedo ops.
* testsuite/gas/arm/req.l: Expected error output from req.s test.
* testsuite/gas/arm/copro.d: Set target architecture for objdump so that the
  test will work on architectures which cannot encode higher arm architecture
  types in their file headers.
* testsuite/gas/arm/arm.exp: Run new req.s test.
  Skip thumb instruction test for PE targets which do not support
  thumb relocations.
* testsuite/gas/elf/elf.exp: Skip special handling of section2 test for XScale
  targets - it is no longer needed.
@
text
@d71 2
@


1.21
log
@	* gas/arm/iwmmxt-bad.s: New file.
	* gas/arm/iwmmxt-bad.l: New file.
	* gas/arm/arm.exp: Run new test.
@
text
@d34 1
a34 1
    if {! [istarget arm*-*-aout]} then {
d64 2
@


1.20
log
@Add support for unindexed form of Addressing Mode 5
@
text
@d86 1
@


1.19
log
@* gas/arm/arm.exp: Pass -mfpu=fpa option to the FPA instruction test.
@
text
@d43 1
a43 1
    gas_test "copro.s" "" $stdoptlist "Co processor instructions"
@


1.18
log
@2003-04-03  Philip Blundell  <philb@@gnu.org>

	* gas/arm/offset.s: New test.
	* gas/arm/arm.exp (run_errors_test): Run it.
@
text
@d47 1
a47 1
    gas_test "float.s" "-mcpu=arm7tdmi" $stdoptlist "Core floating point instructions"
@


1.18.2.1
log
@* gas/arm/arm.exp: Pass -mfpu=fpa option to the FPA instruction test.
@
text
@d47 1
a47 1
    gas_test "float.s" "-mcpu=arm7tdmi -mfpu=fpa" $stdoptlist "Core floating point instructions"
@


1.17
log
@Add iWMMXt support
@
text
@d70 2
@


1.16
log
@Update Maverick tests.
Contribute test generator.
@
text
@d47 1
a47 1
    gas_test "float.s" "" $stdoptlist "Core floating point instructions"
d82 3
@


1.15
log
@Fix arm-aout failures
@
text
@d65 2
a81 3
if [istarget arm9e-*] {
    run_dump_test "maverick"
}
@


1.14
log
@Replace deprecated command line switches with their modern equivalents.
@
text
@d34 4
a37 1
    gas_test "thumb.s" "-mcpu=arm7t" $stdoptlist "Thumb instructions"
@


1.13
log
@2002-01-18  Richard Earnshaw  <rearnsha@@arm.com>
	    Keith Walker  <keith.walker@@arm.com>
* tc-arm.c (ARM_EXT_V5J, ARM_ARCH_V5TEJ): Define.
(insns): Add pattern for bxj instruction.
(do_bxj): New function.
(arm_cpus): Add arm926ej.
(arm_archs): Add armv5tej.

Testsuite:
2002-01-18  Richard Earnshaw  <rearnsha@@arm.com>
	    Keith Walker  <keith.walker@@arm.com>
* gas/arm/arch5tej.s gas/arm/arch5tej.d: New files.
* gas/arm/arm.exp (arch5tej): New dump test.
@
text
@d24 1
a24 1
    run_errors_test "armv1-bad" "-marm1" "ARM v1 errors"
d26 1
a26 1
    gas_test "arm3.s" "-marm3" $stdoptlist "Arm 3 instructions"
d28 1
a28 1
    gas_test "arm6.s" "-marm6" $stdoptlist "Arm 6 instructions"
d30 1
a30 1
    gas_test "arm7dm.s" "-marm7dm" $stdoptlist "Arm 7DM instructions"
d34 1
a34 1
    gas_test "thumb.s" "-marm7t" $stdoptlist "Thumb instructions"
d36 1
a36 1
    gas_test "arch4t.s" "-marmv4t" $stdoptlist "Arm architecture 4t instructions"
@


1.12
log
@* NEWS: Mention new ARM command-line options and VFP support.

* config/tc-arm.c (ARM_CEXT_XSCALE): Replaces ARM_EXT_XSCALE.  All
uses changed.
(ARM_CEXT_MAVERICK): Similarly.
(ARM_ANY): Now means any core instruction.
(CPU_DEFAULT): Default to ARM_ANY.
(uses_apcs_26, atcps, support_interwork, uses_apcs_float)
(pic_code): Declare for all object types.  Make type int.
(legacy_cpu, legacy_fpu, mcpu_cpu_opt, mcpu_fpu_opt, march_cpu_opt)
(march_fpu_opt, mfpu_opt): Declare.
(md_longopts): Tidy up conditional definitions.
(arm_opts, arm_cpus, arm_archs, arm_fpus, arm_extensions)
(arm_long_opts): New tables.
(arm_parse_cpu, arm_parse_arch, arm_parse_fpu): New functions.
(arm_parse_extension): New function.
(md_parse_option): Rewrite using new table-driven system.
(md_show_usage): Use new table-driven system.
(md_begin): Calculate cpu_variant from command line option data.
* doc/as.texinfo (ARM ISA options): Docuement new ARM-specific
command-line options.
* doc/c-arm.texi: Likewise.

Testsuite:
* gas/arm/vfp1.d: Use new command-line options.
* gas/arm/vfp1xD.d: Likewise.
* gas/arm/arm.exp (vfp-bad): Likewise.
* gas/arm/maverick.d: Likewise.
@
text
@d38 2
@


1.11
log
@Support for VFP instructions
* tc-arm.c (CP_WB_OK, CP_NO_WB): New defines.
(cp_address_required_here): New argument wb_ok.  When false, do not
accept write-back forms of addressing.  Change all callers.
(FPU_VFP_EXT_NONE, FPU_VFP_EXT_V1xD, FPU_VFP_VFP_V1)
(FPU_VFP_EXT_V2): Define.
(FPU_ARCH_VFP, FPU_ARCH_VFP_V1xD, FPU_ARCH_VFP_V1, FPU_ARCH_VFP_V2):
Define in terms of above.
(vfp_dp_reg_pos, vfp_sp_reg_pos, vfp_ldstm_type): New enums.
(vfp_reg): New struct.
(vfp_regs): New array of registers.
(insns): Add VFP instructions.
(sn_table): New array of VFP single-precision register names.
(dn_table): New array of VFP double-precision register names.
(all_reg_maps): Add the new register tables.
(arm_reg_type): Add new values for above.  Increase RET_TYPE_MAX.
(vfp_sp_reg_required_here, vfp_dp_reg_required_here, do_vfp_sp_monadic)
(do_vfp_dp_monadic, do_vfp_sp_dyadic, do_vfp_dp_dyadic)
(do_vfp_reg_from_sp, do_vfp_sp_reg2, do_vfp_sp_from_reg)
(do_vfp_reg_from_dp, do_vfp_reg2_from_dp, do_vfp_dp_from_reg)
(do_vfp_dp_from_reg2, vfp_psr_parse, vfp_psr_required_here)
(do_vfp_reg_from_ctrl, do_vfp_ctrl_from_reg, do_vfp_sp_ldst)
(do_vfp_dp_ldst, vfp_sp_reg_list, vfp_dp_reg_list, vfp_sp_ldstm)
(vfp_dp_ldstm, do_vfp_sp_ldstmia, do_vfp_sp_ldstmdb, do_vfp_ldstmia)
(do_vfp_dp_ldstmdb, do_vfp_xp_ldstmia, do_vfp_xp_ldstmdb)
(do_vfp_sp_compare_z, do_vfp_dp_compare_z, do_vfp_dp_sp_cvt)
(do_vfp_sp_dp_cvt): New functions.
(md_begin): Set soft-float flag for appropriate VFP work.
(md_atof): Handle VFP-format doubles.
(md_parse_option): Handle VFP command-line options.
(md_show_usage): Display VFP command-line options.

* testsuite/gas/arm/vfp1.s gas/arm/vf1.d: New files.
* testsuite/gas/arm/vfp1xD.s gas/arm/vf1xD.d: New files.
* testsuite/gas/arm/vfp-bad.s gas/arm/vfp-bad.l: New files.
* testsuite/gas/arm/arm.exp: Run new VFP tests.
@
text
@d54 1
a54 1
    run_errors_test "vfp-bad" "-mvfp" "VFP errors"
d74 1
@


1.10
log
@* gas/arm/armv1.s, arm/armv1.d, arm/fpa-mem.s, arm/fpa-mem.d
arm/fpa-monadic.s, arm/fpa-monadic.d, arm/fpa-dyadic.s,
arm/fpa-dyadic.d: New tests.
* gas/arm/le-fpconst.d (objdump): pass --section=.text
* gas/arm/arm.exp: Add new tests.  Run le-fpconst test on elf targets.
@
text
@d50 6
@


1.9
log
@* gas/arm/armv1-bad.s gas/arm/armv1-bad.l: New files.
* gas/arm/arm.exp (run_error_test): New proc.
(armv1-bad): New error test.
@
text
@d22 2
d43 6
@


1.8
log
@* tc-arm.c ((do_ldst): Fix handling an immediate expression pseudo
op that can be translated into a mvn instruction.

* gas/arm/ldconst.s gas/arm/ldconst.d: New files.  Test ldr with
immediate pseudo-operations.
* gas/arm/arm.exp: Run it.
@
text
@d4 13
d21 2
@


1.7
log
@	* gas/testsuite/gas/arm/arm.exp: Run arm9e tests.

	* gas/testsuite/gas/arm/maverick.c: New.

	* gas/testsuite/gas/arm/maverick.d: New.

	* gas/testsuite/gas/arm/maverick.s: New.
@
text
@d7 2
@


1.6
log
@Allow adrCCl.  [Patch from Phillip BLundel]
Updated ARM tests.
@
text
@d43 3
@


1.5
log
@Fix msr-bsd test
@
text
@d7 1
a7 1
    gas_test "arm3.s" "" $stdoptlist "Arm 3 instructions"
d9 1
a9 2
    gas_test "arm6.s" "" $stdoptlist "Arm 6 instructions"
    gas_test_error "msr-bad.s" "-marmv3" "immediate value cannot be used to set this field"
d11 1
a11 1
    gas_test "arm7dm.s" "" $stdoptlist "Arm 7DM instructions"
d15 1
a15 1
    gas_test "thumb.s" "" $stdoptlist "Thumb instructions"
d17 1
a17 1
    gas_test "arch4t.s" "" $stdoptlist "Arm architecture 4t instructions"
@


1.5.2.1
log
@2001-06-18  Philip Blundell  <philb@@gnu.org>

	* gas/arm/arm.exp (msr_bad): Deleted.
	* gas/arm/msr-bad.s: Likewise.
@
text
@d10 1
@


1.4
log
@2001-01-01  Philip Blundell  <philb@@gnu.org>

	* gas/arm/adrl.s, gas/arm/pic.s, gas/arm/msr-bad.s: New tests.
	* gas/arm/arm.exp: Run them.
	* gas/arm/adrl.d, gas/arm/pic.d: Expected results for above.
	* gas/arm/arm6.s: Also test uppercase `CPSR' and `SPSR'.
@
text
@d10 1
a10 1
    gas_test_error "msr-bad.s" "" "MSR with bad immediate operand"
@


1.3
log
@Add ARM v5t, v5te and XScale support
@
text
@d10 1
d27 6
@


1.2
log
@Add test of macro expansion of string arguments.
@
text
@d4 1
a4 1
if [istarget *arm*-*-*] then {
d24 2
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
if [istarget arm-*-*] then {
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

