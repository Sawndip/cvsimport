head	1.13;
access;
symbols
	binutils-2_24-branch:1.13.0.2
	binutils-2_24-branchpoint:1.13
	binutils-2_21_1:1.11
	binutils-2_23_2:1.12
	binutils-2_23_1:1.12
	binutils-2_23:1.12
	binutils-2_23-branch:1.12.0.2
	binutils-2_23-branchpoint:1.12
	binutils-2_22_branch:1.11.0.6
	binutils-2_22:1.11
	binutils-2_22-branch:1.11.0.4
	binutils-2_22-branchpoint:1.11
	binutils-2_21:1.11
	binutils-2_21-branch:1.11.0.2
	binutils-2_21-branchpoint:1.11
	binutils-2_20_1:1.10
	binutils-2_20:1.10
	binutils-arc-20081103-branch:1.7.0.8
	binutils-arc-20081103-branchpoint:1.7
	binutils-2_20-branch:1.10.0.2
	binutils-2_20-branchpoint:1.10
	dje-cgen-play1-branch:1.8.0.2
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.7.0.6
	arc-20081103-branchpoint:1.7
	binutils-2_19_1:1.7
	binutils-2_19:1.7
	binutils-2_19-branch:1.7.0.4
	binutils-2_19-branchpoint:1.7
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.2
	binutils-2_18-branchpoint:1.7
	binutils-csl-coldfire-4_1-32:1.4.2.2
	binutils-csl-sourcerygxx-4_1-32:1.4.2.2
	binutils-csl-innovasic-fido-3_4_4-33:1.4.2.2
	binutils-csl-sourcerygxx-3_4_4-32:1.3
	binutils-csl-coldfire-4_1-30:1.4.2.2
	binutils-csl-sourcerygxx-4_1-30:1.4.2.2
	binutils-csl-coldfire-4_1-28:1.4.2.2
	binutils-csl-sourcerygxx-4_1-29:1.4.2.2
	binutils-csl-sourcerygxx-4_1-28:1.4.2.2
	binutils-csl-arm-2006q3-27:1.4.2.2
	binutils-csl-sourcerygxx-4_1-27:1.4.2.2
	binutils-csl-arm-2006q3-26:1.4.2.2
	binutils-csl-sourcerygxx-4_1-26:1.4.2.2
	binutils-csl-sourcerygxx-4_1-25:1.4.2.2
	binutils-csl-sourcerygxx-4_1-24:1.4.2.2
	binutils-csl-sourcerygxx-4_1-23:1.4.2.2
	binutils-csl-sourcerygxx-4_1-21:1.4.2.2
	binutils-csl-arm-2006q3-21:1.4.2.2
	binutils-csl-sourcerygxx-4_1-22:1.4.2.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.4.2.2
	binutils-csl-sourcerygxx-4_1-20:1.4.2.2
	binutils-csl-arm-2006q3-19:1.4.2.2
	binutils-csl-sourcerygxx-4_1-19:1.4.2.2
	binutils-csl-sourcerygxx-4_1-18:1.4.2.2
	binutils-csl-renesas-4_1-9:1.4.2.2
	binutils-csl-sourcerygxx-3_4_4-25:1.3
	binutils-csl-renesas-4_1-8:1.4.2.2
	binutils-csl-renesas-4_1-7:1.4.2.2
	binutils-csl-renesas-4_1-6:1.4.2.2
	binutils-csl-sourcerygxx-4_1-17:1.4.2.2
	binutils-csl-sourcerygxx-4_1-14:1.4.2.2
	binutils-csl-sourcerygxx-4_1-15:1.4.2.2
	binutils-csl-sourcerygxx-4_1-13:1.4.2.2
	binutils-2_17:1.4
	binutils-csl-sourcerygxx-4_1-12:1.4.2.2
	binutils-csl-sourcerygxx-3_4_4-21:1.4.2.2
	binutils-csl-wrs-linux-3_4_4-24:1.3
	binutils-csl-wrs-linux-3_4_4-23:1.3
	binutils-csl-sourcerygxx-4_1-9:1.4.2.2
	binutils-csl-sourcerygxx-4_1-8:1.4.2.2
	binutils-csl-sourcerygxx-4_1-7:1.4.2.2
	binutils-csl-arm-2006q1-6:1.4.2.2
	binutils-csl-sourcerygxx-4_1-6:1.4.2.2
	binutils-csl-wrs-linux-3_4_4-22:1.3
	binutils-csl-coldfire-4_1-11:1.4.2.2
	binutils-csl-sourcerygxx-3_4_4-19:1.4.2.2
	binutils-csl-coldfire-4_1-10:1.4.2.2
	binutils-csl-sourcerygxx-4_1-5:1.4.2.2
	binutils-csl-sourcerygxx-4_1-4:1.4.2.2
	binutils-csl-wrs-linux-3_4_4-21:1.3
	binutils-csl-morpho-4_1-4:1.4.2.2
	binutils-csl-sourcerygxx-3_4_4-17:1.4.2.1
	binutils-csl-wrs-linux-3_4_4-20:1.3
	binutils-2_17-branch:1.4.0.4
	binutils-2_17-branchpoint:1.4
	binutils-csl-2_17-branch:1.4.0.2
	binutils-csl-2_17-branchpoint:1.4
	binutils-csl-gxxpro-3_4-branch:1.3.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.3
	binutils-2_16_1:1.3
	binutils-csl-arm-2005q1b:1.3
	binutils-2_16:1.3
	binutils-csl-arm-2005q1a:1.3
	binutils-csl-arm-2005q1-branch:1.3.0.10
	binutils-csl-arm-2005q1-branchpoint:1.3
	binutils-2_16-branch:1.3.0.8
	binutils-2_16-branchpoint:1.3
	csl-arm-2004-q3d:1.3
	csl-arm-2004-q3:1.3
	binutils-2_15:1.3
	binutils-2_15-branchpoint:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	binutils-2_15-branch:1.3.0.6
	cagney_bfdfile-20040213-branch:1.3.0.4
	cagney_bfdfile-20040213-branchpoint:1.3
	cagney_bigcore-20040122-branch:1.3.0.2
	cagney_bigcore-20040122-branchpoint:1.3
	csl-arm-2003-q4:1.3
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.6
	binutils-2_14-branchpoint:1.2
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.4
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.2
	binutils-2_12-branchpoint:1.2
	binutils_latest_snapshot:1.13;
locks; strict;
comment	@# @;


1.13
date	2013.04.09.11.07.06;	author jbeulich;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.20.11.55.06;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.16.11.47.36;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.29.08.08.15;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.15.17.24.12;	author rearnsha;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.26.21.36.37;	author pbrook;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.05.18.53.09;	author jules;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.07.11.37.10;	author nickc;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.11.03.14.47.37;	author drow;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.18.17.01.55;	author rearnsha;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.15.16.05.34;	author rearnsha;	state Exp;
branches;
next	;

1.4.2.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.04.26.16.30.48;	author jules;	state Exp;
branches;
next	;


desc
@@


1.13
log
@gas/
2013-04-09  Jan Beulich <jbeulich@@suse.com>

	* gas/config/tc-arm.c (do_vmrs): Accept all control registers.
	Use local variable Rt in more places.
	(do_vmsr): Accept all control registers.

gas/testsuite/
2013-04-09  Jan Beulich <jbeulich@@suse.com>

	* gas/arm/vfp1xD.s: Add VMRS/VMSR tests with FPINST, FPINST2,
	and C15.
	* gas/arm/vfp1xD.d: Update accordingly.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#name: VFP Single-precision instructions
#as: -mfpu=vfpxd

# Test the ARM VFP Single Precision instructions

.*: +file format .*arm.*

Disassembly of section .text:
0+000 <[^>]*> eef1fa10 	(vmrs	APSR_nzcv, fpscr|fmstat)
0+004 <[^>]*> eeb40ac0 	(vcmpe\.f32|fcmpes)	s0, s0
0+008 <[^>]*> eeb50ac0 	(vcmpe\.f32	s0, #0.0|fcmpezs	s0)
0+00c <[^>]*> eeb40a40 	(vcmp\.f32|fcmps)	s0, s0
0+010 <[^>]*> eeb50a40 	(vcmp\.f32	s0, #0.0|fcmpzs	s0)
0+014 <[^>]*> eeb00ac0 	(vabs\.f32|fabss)	s0, s0
0+018 <[^>]*> eeb00a40 	(vmov\.f32|fcpys)	s0, s0
0+01c <[^>]*> eeb10a40 	(vneg\.f32|fnegs)	s0, s0
0+020 <[^>]*> eeb10ac0 	(vsqrt\.f32|fsqrts)	s0, s0
0+024 <[^>]*> ee300a00 	(vadd\.f32|fadds)	s0, s0, s0
0+028 <[^>]*> ee800a00 	(vdiv\.f32|fdivs)	s0, s0, s0
0+02c <[^>]*> ee000a00 	(vmla\.f32|fmacs)	s0, s0, s0
0+030 <[^>]*> ee100a00 	(vnmls\.f32|fmscs)	s0, s0, s0
0+034 <[^>]*> ee200a00 	(vmul\.f32|fmuls)	s0, s0, s0
0+038 <[^>]*> ee000a40 	(vmls\.f32|fnmacs)	s0, s0, s0
0+03c <[^>]*> ee100a40 	(vnmla\.f32|fnmscs)	s0, s0, s0
0+040 <[^>]*> ee200a40 	(vnmul\.f32|fnmuls)	s0, s0, s0
0+044 <[^>]*> ee300a40 	(vsub\.f32|fsubs)	s0, s0, s0
0+048 <[^>]*> ed900a00 	(vldr|flds)	s0, \[r0\]
0+04c <[^>]*> ed800a00 	(vstr|fsts)	s0, \[r0\]
0+050 <[^>]*> ec900a01 	(vldmia|fldmias)	r0, {s0}
0+054 <[^>]*> ec900a01 	(vldmia|fldmias)	r0, {s0}
0+058 <[^>]*> ecb00a01 	(vldmia|fldmias)	r0!, {s0}
0+05c <[^>]*> ecb00a01 	(vldmia|fldmias)	r0!, {s0}
0+060 <[^>]*> ed300a01 	(vldmdb|fldmdbs)	r0!, {s0}
0+064 <[^>]*> ed300a01 	(vldmdb|fldmdbs)	r0!, {s0}
0+068 <[^>]*> ec900b03 	fldmiax	r0, {d0}(	;@@ Deprecated|)
0+06c <[^>]*> ec900b03 	fldmiax	r0, {d0}(	;@@ Deprecated|)
0+070 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}(	;@@ Deprecated|)
0+074 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}(	;@@ Deprecated|)
0+078 <[^>]*> ed300b03 	fldmdbx	r0!, {d0}(	;@@ Deprecated|)
0+07c <[^>]*> ed300b03 	fldmdbx	r0!, {d0}(	;@@ Deprecated|)
0+080 <[^>]*> ec800a01 	(vstmia|fstmias)	r0, {s0}
0+084 <[^>]*> ec800a01 	(vstmia|fstmias)	r0, {s0}
0+088 <[^>]*> eca00a01 	(vstmia|fstmias)	r0!, {s0}
0+08c <[^>]*> eca00a01 	(vstmia|fstmias)	r0!, {s0}
0+090 <[^>]*> ed200a01 	(vstmdb|fstmdbs)	r0!, {s0}
0+094 <[^>]*> ed200a01 	(vstmdb|fstmdbs)	r0!, {s0}
0+098 <[^>]*> ec800b03 	fstmiax	r0, {d0}(	;@@ Deprecated|)
0+09c <[^>]*> ec800b03 	fstmiax	r0, {d0}(	;@@ Deprecated|)
0+0a0 <[^>]*> eca00b03 	fstmiax	r0!, {d0}(	;@@ Deprecated|)
0+0a4 <[^>]*> eca00b03 	fstmiax	r0!, {d0}(	;@@ Deprecated|)
0+0a8 <[^>]*> ed200b03 	fstmdbx	r0!, {d0}(	;@@ Deprecated|)
0+0ac <[^>]*> ed200b03 	fstmdbx	r0!, {d0}(	;@@ Deprecated|)
0+0b0 <[^>]*> eeb80ac0 	(vcvt\.f32\.s32|fsitos)	s0, s0
0+0b4 <[^>]*> eeb80a40 	(vcvt\.f32\.u32|fuitos)	s0, s0
0+0b8 <[^>]*> eebd0a40 	(vcvtr\.s32\.f32|ftosis)	s0, s0
0+0bc <[^>]*> eebd0ac0 	(vcvt\.s32\.f32|ftosizs)	s0, s0
0+0c0 <[^>]*> eebc0a40 	(vcvtr\.u32\.f32|ftouis)	s0, s0
0+0c4 <[^>]*> eebc0ac0 	(vcvt\.u32\.f32|ftouizs)	s0, s0
0+0c8 <[^>]*> ee100a10 	(vmov|fmrs)	r0, s0
0+0cc <[^>]*> eef00a10 	(vmrs|fmrx)	r0, fpsid
0+0d0 <[^>]*> eef10a10 	(vmrs|fmrx)	r0, fpscr
0+0d4 <[^>]*> eef80a10 	(vmrs|fmrx)	r0, fpexc
0+0d8 <[^>]*> ee000a10 	(vmov|fmsr)	s0, r0
0+0dc <[^>]*> eee00a10 	(vmsr|fmxr)	fpsid, r0
0+0e0 <[^>]*> eee10a10 	(vmsr|fmxr)	fpscr, r0
0+0e4 <[^>]*> eee80a10 	(vmsr|fmxr)	fpexc, r0
0+0e8 <[^>]*> eef50a40 	(vcmp\.f32	s1, #0.0|fcmpzs	s1)
0+0ec <[^>]*> eeb51a40 	(vcmp\.f32	s2, #0.0|fcmpzs	s2)
0+0f0 <[^>]*> eef5fa40 	(vcmp\.f32	s31, #0.0|fcmpzs	s31)
0+0f4 <[^>]*> eeb40a60 	(vcmp\.f32|fcmps)	s0, s1
0+0f8 <[^>]*> eeb40a41 	(vcmp\.f32|fcmps)	s0, s2
0+0fc <[^>]*> eeb40a6f 	(vcmp\.f32|fcmps)	s0, s31
0+100 <[^>]*> eef40a40 	(vcmp\.f32|fcmps)	s1, s0
0+104 <[^>]*> eeb41a40 	(vcmp\.f32|fcmps)	s2, s0
0+108 <[^>]*> eef4fa40 	(vcmp\.f32|fcmps)	s31, s0
0+10c <[^>]*> eef4aa46 	(vcmp\.f32|fcmps)	s21, s12
0+110 <[^>]*> eeb10a60 	(vneg\.f32|fnegs)	s0, s1
0+114 <[^>]*> eeb10a41 	(vneg\.f32|fnegs)	s0, s2
0+118 <[^>]*> eeb10a6f 	(vneg\.f32|fnegs)	s0, s31
0+11c <[^>]*> eef10a40 	(vneg\.f32|fnegs)	s1, s0
0+120 <[^>]*> eeb11a40 	(vneg\.f32|fnegs)	s2, s0
0+124 <[^>]*> eef1fa40 	(vneg\.f32|fnegs)	s31, s0
0+128 <[^>]*> eeb16a6a 	(vneg\.f32|fnegs)	s12, s21
0+12c <[^>]*> ee300a20 	(vadd\.f32|fadds)	s0, s0, s1
0+130 <[^>]*> ee300a01 	(vadd\.f32|fadds)	s0, s0, s2
0+134 <[^>]*> ee300a2f 	(vadd\.f32|fadds)	s0, s0, s31
0+138 <[^>]*> ee300a80 	(vadd\.f32|fadds)	s0, s1, s0
0+13c <[^>]*> ee310a00 	(vadd\.f32|fadds)	s0, s2, s0
0+140 <[^>]*> ee3f0a80 	(vadd\.f32|fadds)	s0, s31, s0
0+144 <[^>]*> ee700a00 	(vadd\.f32|fadds)	s1, s0, s0
0+148 <[^>]*> ee301a00 	(vadd\.f32|fadds)	s2, s0, s0
0+14c <[^>]*> ee70fa00 	(vadd\.f32|fadds)	s31, s0, s0
0+150 <[^>]*> ee3a6aa2 	(vadd\.f32|fadds)	s12, s21, s5
0+154 <[^>]*> eeb80ae0 	(vcvt\.f32\.s32|fsitos)	s0, s1
0+158 <[^>]*> eeb80ac1 	(vcvt\.f32\.s32|fsitos)	s0, s2
0+15c <[^>]*> eeb80aef 	(vcvt\.f32\.s32|fsitos)	s0, s31
0+160 <[^>]*> eef80ac0 	(vcvt\.f32\.s32|fsitos)	s1, s0
0+164 <[^>]*> eeb81ac0 	(vcvt\.f32\.s32|fsitos)	s2, s0
0+168 <[^>]*> eef8fac0 	(vcvt\.f32\.s32|fsitos)	s31, s0
0+16c <[^>]*> eebd0a60 	(vcvtr\.s32\.f32|ftosis)	s0, s1
0+170 <[^>]*> eebd0a41 	(vcvtr\.s32\.f32|ftosis)	s0, s2
0+174 <[^>]*> eebd0a6f 	(vcvtr\.s32\.f32|ftosis)	s0, s31
0+178 <[^>]*> eefd0a40 	(vcvtr\.s32\.f32|ftosis)	s1, s0
0+17c <[^>]*> eebd1a40 	(vcvtr\.s32\.f32|ftosis)	s2, s0
0+180 <[^>]*> eefdfa40 	(vcvtr\.s32\.f32|ftosis)	s31, s0
0+184 <[^>]*> ee001a10 	(vmov|fmsr)	s0, r1
0+188 <[^>]*> ee007a10 	(vmov|fmsr)	s0, r7
0+18c <[^>]*> ee00ea10 	(vmov|fmsr)	s0, lr
0+190 <[^>]*> ee000a90 	(vmov|fmsr)	s1, r0
0+194 <[^>]*> ee010a10 	(vmov|fmsr)	s2, r0
0+198 <[^>]*> ee0f0a90 	(vmov|fmsr)	s31, r0
0+19c <[^>]*> ee0a7a90 	(vmov|fmsr)	s21, r7
0+1a0 <[^>]*> eee01a10 	(vmsr|fmxr)	fpsid, r1
0+1a4 <[^>]*> eee0ea10 	(vmsr|fmxr)	fpsid, lr
0+1a8 <[^>]*> ee100a90 	(vmov|fmrs)	r0, s1
0+1ac <[^>]*> ee110a10 	(vmov|fmrs)	r0, s2
0+1b0 <[^>]*> ee1f0a90 	(vmov|fmrs)	r0, s31
0+1b4 <[^>]*> ee101a10 	(vmov|fmrs)	r1, s0
0+1b8 <[^>]*> ee107a10 	(vmov|fmrs)	r7, s0
0+1bc <[^>]*> ee10ea10 	(vmov|fmrs)	lr, s0
0+1c0 <[^>]*> ee159a90 	(vmov|fmrs)	r9, s11
0+1c4 <[^>]*> eef01a10 	(vmrs|fmrx)	r1, fpsid
0+1c8 <[^>]*> eef0ea10 	(vmrs|fmrx)	lr, fpsid
0+1cc <[^>]*> ed910a00 	(vldr|flds)	s0, \[r1\]
0+1d0 <[^>]*> ed9e0a00 	(vldr|flds)	s0, \[lr\]
0+1d4 <[^>]*> ed900a00 	(vldr|flds)	s0, \[r0\]
0+1d8 <[^>]*> ed900aff 	(vldr|flds)	s0, \[r0, #1020\].*
0+1dc <[^>]*> ed100aff 	(vldr|flds)	s0, \[r0, #-1020\].*
0+1e0 <[^>]*> edd00a00 	(vldr|flds)	s1, \[r0\]
0+1e4 <[^>]*> ed901a00 	(vldr|flds)	s2, \[r0\]
0+1e8 <[^>]*> edd0fa00 	(vldr|flds)	s31, \[r0\]
0+1ec <[^>]*> edccaac9 	(vstr|fsts)	s21, \[ip, #804\].*
0+1f0 <[^>]*> ecd00a01 	(vldmia|fldmias)	r0, {s1}
0+1f4 <[^>]*> ec901a01 	(vldmia|fldmias)	r0, {s2}
0+1f8 <[^>]*> ecd0fa01 	(vldmia|fldmias)	r0, {s31}
0+1fc <[^>]*> ec900a02 	(vldmia|fldmias)	r0, {s0-s1}
0+200 <[^>]*> ec900a03 	(vldmia|fldmias)	r0, {s0-s2}
0+204 <[^>]*> ec900a20 	(vldmia|fldmias)	r0, {s0-s31}
0+208 <[^>]*> ecd00a1f 	(vldmia|fldmias)	r0, {s1-s31}
0+20c <[^>]*> ec901a1e 	(vldmia|fldmias)	r0, {s2-s31}
0+210 <[^>]*> ec90fa02 	(vldmia|fldmias)	r0, {s30-s31}
0+214 <[^>]*> ec910a01 	(vldmia|fldmias)	r1, {s0}
0+218 <[^>]*> ec9e0a01 	(vldmia|fldmias)	lr, {s0}
0+21c <[^>]*> ec801b03 	fstmiax	r0, {d1}(	;@@ Deprecated|)
0+220 <[^>]*> ec802b03 	fstmiax	r0, {d2}(	;@@ Deprecated|)
0+224 <[^>]*> ec80fb03 	fstmiax	r0, {d15}(	;@@ Deprecated|)
0+228 <[^>]*> ec800b05 	fstmiax	r0, {d0-d1}(	;@@ Deprecated|)
0+22c <[^>]*> ec800b07 	fstmiax	r0, {d0-d2}(	;@@ Deprecated|)
0+230 <[^>]*> ec800b21 	fstmiax	r0, {d0-d15}(	;@@ Deprecated|)
0+234 <[^>]*> ec801b1f 	fstmiax	r0, {d1-d15}(	;@@ Deprecated|)
0+238 <[^>]*> ec802b1d 	fstmiax	r0, {d2-d15}(	;@@ Deprecated|)
0+23c <[^>]*> ec80eb05 	fstmiax	r0, {d14-d15}(	;@@ Deprecated|)
0+240 <[^>]*> ec810b03 	fstmiax	r1, {d0}(	;@@ Deprecated|)
0+244 <[^>]*> ec8e0b03 	fstmiax	lr, {d0}(	;@@ Deprecated|)
0+248 <[^>]*> eeb50a40 	(vcmp\.f32	s0, #0.0|fcmpzs	s0)
0+24c <[^>]*> eef50a40 	(vcmp\.f32	s1, #0.0|fcmpzs	s1)
0+250 <[^>]*> eeb51a40 	(vcmp\.f32	s2, #0.0|fcmpzs	s2)
0+254 <[^>]*> eef51a40 	(vcmp\.f32	s3, #0.0|fcmpzs	s3)
0+258 <[^>]*> eeb52a40 	(vcmp\.f32	s4, #0.0|fcmpzs	s4)
0+25c <[^>]*> eef52a40 	(vcmp\.f32	s5, #0.0|fcmpzs	s5)
0+260 <[^>]*> eeb53a40 	(vcmp\.f32	s6, #0.0|fcmpzs	s6)
0+264 <[^>]*> eef53a40 	(vcmp\.f32	s7, #0.0|fcmpzs	s7)
0+268 <[^>]*> eeb54a40 	(vcmp\.f32	s8, #0.0|fcmpzs	s8)
0+26c <[^>]*> eef54a40 	(vcmp\.f32	s9, #0.0|fcmpzs	s9)
0+270 <[^>]*> eeb55a40 	(vcmp\.f32	s10, #0.0|fcmpzs	s10)
0+274 <[^>]*> eef55a40 	(vcmp\.f32	s11, #0.0|fcmpzs	s11)
0+278 <[^>]*> eeb56a40 	(vcmp\.f32	s12, #0.0|fcmpzs	s12)
0+27c <[^>]*> eef56a40 	(vcmp\.f32	s13, #0.0|fcmpzs	s13)
0+280 <[^>]*> eeb57a40 	(vcmp\.f32	s14, #0.0|fcmpzs	s14)
0+284 <[^>]*> eef57a40 	(vcmp\.f32	s15, #0.0|fcmpzs	s15)
0+288 <[^>]*> eeb58a40 	(vcmp\.f32	s16, #0.0|fcmpzs	s16)
0+28c <[^>]*> eef58a40 	(vcmp\.f32	s17, #0.0|fcmpzs	s17)
0+290 <[^>]*> eeb59a40 	(vcmp\.f32	s18, #0.0|fcmpzs	s18)
0+294 <[^>]*> eef59a40 	(vcmp\.f32	s19, #0.0|fcmpzs	s19)
0+298 <[^>]*> eeb5aa40 	(vcmp\.f32	s20, #0.0|fcmpzs	s20)
0+29c <[^>]*> eef5aa40 	(vcmp\.f32	s21, #0.0|fcmpzs	s21)
0+2a0 <[^>]*> eeb5ba40 	(vcmp\.f32	s22, #0.0|fcmpzs	s22)
0+2a4 <[^>]*> eef5ba40 	(vcmp\.f32	s23, #0.0|fcmpzs	s23)
0+2a8 <[^>]*> eeb5ca40 	(vcmp\.f32	s24, #0.0|fcmpzs	s24)
0+2ac <[^>]*> eef5ca40 	(vcmp\.f32	s25, #0.0|fcmpzs	s25)
0+2b0 <[^>]*> eeb5da40 	(vcmp\.f32	s26, #0.0|fcmpzs	s26)
0+2b4 <[^>]*> eef5da40 	(vcmp\.f32	s27, #0.0|fcmpzs	s27)
0+2b8 <[^>]*> eeb5ea40 	(vcmp\.f32	s28, #0.0|fcmpzs	s28)
0+2bc <[^>]*> eef5ea40 	(vcmp\.f32	s29, #0.0|fcmpzs	s29)
0+2c0 <[^>]*> eeb5fa40 	(vcmp\.f32	s30, #0.0|fcmpzs	s30)
0+2c4 <[^>]*> eef5fa40 	(vcmp\.f32	s31, #0.0|fcmpzs	s31)
0+2c8 <[^>]*> 0ef1fa10 	(vmrseq	APSR_nzcv, fpscr|fmstateq)
0+2cc <[^>]*> 0ef41ae3 	(vcmpeeq\.f32|fcmpeseq)	s3, s7
0+2d0 <[^>]*> 0ef52ac0 	(vcmpeeq\.f32	s5, #0.0|fcmpezseq	s5)
0+2d4 <[^>]*> 0ef40a41 	(vcmpeq\.f32|fcmpseq)	s1, s2
0+2d8 <[^>]*> 0ef50a40 	(vcmpeq\.f32	s1, #0.0|fcmpzseq	s1)
0+2dc <[^>]*> 0ef00ae1 	(vabseq\.f32|fabsseq)	s1, s3
0+2e0 <[^>]*> 0ef0fa69 	(vmoveq\.f32|fcpyseq)	s31, s19
0+2e4 <[^>]*> 0eb1aa44 	(vnegeq\.f32|fnegseq)	s20, s8
0+2e8 <[^>]*> 0ef12ae3 	(vsqrteq\.f32|fsqrtseq)	s5, s7
0+2ec <[^>]*> 0e323a82 	(vaddeq\.f32|faddseq)	s6, s5, s4
0+2f0 <[^>]*> 0ec11a20 	(vdiveq\.f32|fdivseq)	s3, s2, s1
0+2f4 <[^>]*> 0e4ffa2e 	(vmlaeq\.f32|fmacseq)	s31, s30, s29
0+2f8 <[^>]*> 0e1dea8d 	(vnmlseq\.f32|fmscseq)	s28, s27, s26
0+2fc <[^>]*> 0e6cca2b 	(vmuleq\.f32|fmulseq)	s25, s24, s23
0+300 <[^>]*> 0e0abaca 	(vmlseq\.f32|fnmacseq)	s22, s21, s20
0+304 <[^>]*> 0e599a68 	(vnmlaeq\.f32|fnmscseq)	s19, s18, s17
0+308 <[^>]*> 0e278ac7 	(vnmuleq\.f32|fnmulseq)	s16, s15, s14
0+30c <[^>]*> 0e766a65 	(vsubeq\.f32|fsubseq)	s13, s12, s11
0+310 <[^>]*> 0d985a00 	(vldreq|fldseq)	s10, \[r8\]
0+314 <[^>]*> 0dc74a00 	(vstreq|fstseq)	s9, \[r7\]
0+318 <[^>]*> 0c914a01 	(vldmiaeq|fldmiaseq)	r1, {s8}
0+31c <[^>]*> 0cd23a01 	(vldmiaeq|fldmiaseq)	r2, {s7}
0+320 <[^>]*> 0cb33a01 	(vldmiaeq|fldmiaseq)	r3!, {s6}
0+324 <[^>]*> 0cf42a01 	(vldmiaeq|fldmiaseq)	r4!, {s5}
0+328 <[^>]*> 0d352a01 	(vldmdbeq|fldmdbseq)	r5!, {s4}
0+32c <[^>]*> 0d761a01 	(vldmdbeq|fldmdbseq)	r6!, {s3}
0+330 <[^>]*> 0c971b03 	fldmiaxeq	r7, {d1}(	;@@ Deprecated|)
0+334 <[^>]*> 0c982b03 	fldmiaxeq	r8, {d2}(	;@@ Deprecated|)
0+338 <[^>]*> 0cb93b03 	fldmiaxeq	r9!, {d3}(	;@@ Deprecated|)
0+33c <[^>]*> 0cba4b03 	fldmiaxeq	sl!, {d4}(	;@@ Deprecated|)
0+340 <[^>]*> 0d3b5b03 	fldmdbxeq	fp!, {d5}(	;@@ Deprecated|)
0+344 <[^>]*> 0d3c6b03 	fldmdbxeq	ip!, {d6}(	;@@ Deprecated|)
0+348 <[^>]*> 0c8d1a01 	(vstmiaeq|fstmiaseq)	sp, {s2}
0+34c <[^>]*> 0cce0a01 	(vstmiaeq|fstmiaseq)	lr, {s1}
0+350 <[^>]*> 0ce1fa01 	(vstmiaeq|fstmiaseq)	r1!, {s31}
0+354 <[^>]*> 0ca2fa01 	(vstmiaeq|fstmiaseq)	r2!, {s30}
0+358 <[^>]*> 0d63ea01 	(vstmdbeq|fstmdbseq)	r3!, {s29}
0+35c <[^>]*> 0d24ea01 	(vstmdbeq|fstmdbseq)	r4!, {s28}
0+360 <[^>]*> 0c857b03 	fstmiaxeq	r5, {d7}(	;@@ Deprecated|)
0+364 <[^>]*> 0c868b03 	fstmiaxeq	r6, {d8}(	;@@ Deprecated|)
0+368 <[^>]*> 0ca79b03 	fstmiaxeq	r7!, {d9}(	;@@ Deprecated|)
0+36c <[^>]*> 0ca8ab03 	fstmiaxeq	r8!, {d10}(	;@@ Deprecated|)
0+370 <[^>]*> 0d29bb03 	fstmdbxeq	r9!, {d11}(	;@@ Deprecated|)
0+374 <[^>]*> 0d2acb03 	fstmdbxeq	sl!, {d12}(	;@@ Deprecated|)
0+378 <[^>]*> 0ef8dac3 	(vcvteq\.f32\.s32|fsitoseq)	s27, s6
0+37c <[^>]*> 0efdca62 	(vcvtreq\.s32\.f32|ftosiseq)	s25, s5
0+380 <[^>]*> 0efdbac2 	(vcvteq\.s32\.f32|ftosizseq)	s23, s4
0+384 <[^>]*> 0efcaa61 	(vcvtreq\.u32\.f32|ftouiseq)	s21, s3
0+388 <[^>]*> 0efc9ac1 	(vcvteq\.u32\.f32|ftouizseq)	s19, s2
0+38c <[^>]*> 0ef88a60 	(vcvteq\.f32\.u32|fuitoseq)	s17, s1
0+390 <[^>]*> 0e11ba90 	(vmoveq|fmrseq)	fp, s3
0+394 <[^>]*> 0ef09a10 	(vmrseq|fmrxeq)	r9, fpsid
0+398 <[^>]*> 0e019a90 	(vmoveq|fmsreq)	s3, r9
0+39c <[^>]*> 0ee08a10 	(vmsreq|fmxreq)	fpsid, r8
0+3a0 <[^>]*> eef90a10 	(vmrs|fmrx)	r0, fpinst	@@ Impl def
0+3a4 <[^>]*> eefa0a10 	(vmrs|fmrx)	r0, fpinst2	@@ Impl def
0+3a8 <[^>]*> eef70a10 	(vmrs|fmrx)	r0, mvfr0
0+3ac <[^>]*> eef60a10 	(vmrs|fmrx)	r0, mvfr1
0+3b0 <[^>]*> eefc0a10 	(vmrs|fmrx)	r0, <impl def 0xc>
0+3b4 <[^>]*> eee90a10 	(vmsr|fmxr)	fpinst, r0	@@ Impl def
0+3b8 <[^>]*> eeea0a10 	(vmsr|fmxr)	fpinst2, r0	@@ Impl def
0+3bc <[^>]*> eee70a10 	(vmsr|fmxr)	mvfr0, r0
0+3c0 <[^>]*> eee60a10 	(vmsr|fmxr)	mvfr1, r0
0+3c4 <[^>]*> eeec0a10 	(vmsr|fmxr)	<impl def 0xc>, r0
0+3c8 <[^>]*> eef10a10 	vmrs	r0, fpscr
0+3cc <[^>]*> eef11a10 	vmrs	r1, fpscr
0+3d0 <[^>]*> eef12a10 	vmrs	r2, fpscr
0+3d4 <[^>]*> eef13a10 	vmrs	r3, fpscr
0+3d8 <[^>]*> eef14a10 	vmrs	r4, fpscr
0+3dc <[^>]*> eef15a10 	vmrs	r5, fpscr
0+3e0 <[^>]*> eef16a10 	vmrs	r6, fpscr
0+3e4 <[^>]*> eef17a10 	vmrs	r7, fpscr
0+3e8 <[^>]*> eef18a10 	vmrs	r8, fpscr
0+3ec <[^>]*> eef19a10 	vmrs	r9, fpscr
0+3f0 <[^>]*> eef1aa10 	vmrs	sl, fpscr
0+3f4 <[^>]*> eef1ba10 	vmrs	fp, fpscr
0+3f8 <[^>]*> eef1ca10 	vmrs	ip, fpscr
0+3fc <[^>]*> eef1ea10 	vmrs	lr, fpscr
0+400 <[^>]*> eef1fa10 	vmrs	APSR_nzcv, fpscr
0+404 <[^>]*> eee10a10 	vmsr	fpscr, r0
0+408 <[^>]*> eee11a10 	vmsr	fpscr, r1
0+40c <[^>]*> eee12a10 	vmsr	fpscr, r2
0+410 <[^>]*> eee13a10 	vmsr	fpscr, r3
0+414 <[^>]*> eee14a10 	vmsr	fpscr, r4
0+418 <[^>]*> eee15a10 	vmsr	fpscr, r5
0+41c <[^>]*> eee16a10 	vmsr	fpscr, r6
0+420 <[^>]*> eee17a10 	vmsr	fpscr, r7
0+424 <[^>]*> eee18a10 	vmsr	fpscr, r8
0+428 <[^>]*> eee19a10 	vmsr	fpscr, r9
0+42c <[^>]*> eee1aa10 	vmsr	fpscr, sl
0+430 <[^>]*> eee1ba10 	vmsr	fpscr, fp
0+434 <[^>]*> eee1ca10 	vmsr	fpscr, ip
0+438 <[^>]*> eee1ea10 	vmsr	fpscr, lr
0+43c <[^>]*> eee01a10 	vmsr	fpsid, r1
0+440 <[^>]*> eee82a10 	vmsr	fpexc, r2
0+444 <[^>]*> eee93a10 	vmsr	fpinst, r3	@@ Impl def
0+448 <[^>]*> eeea4a10 	vmsr	fpinst2, r4	@@ Impl def
0+44c <[^>]*> eeef5a10 	vmsr	(c15|<impl def 0xf>), r5
0+450 <[^>]*> eef03a10 	vmrs	r3, fpsid
0+454 <[^>]*> eef64a10 	vmrs	r4, mvfr1
0+458 <[^>]*> eef75a10 	vmrs	r5, mvfr0
0+45c <[^>]*> eef86a10 	vmrs	r6, fpexc
0+460 <[^>]*> eef97a10 	vmrs	r7, fpinst	@@ Impl def
0+464 <[^>]*> eefa8a10 	vmrs	r8, fpinst2	@@ Impl def
0+468 <[^>]*> eeff9a10 	vmrs	r9, (c15|<impl def 0xf>)
0+46c <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
0+470 <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
0+474 <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
@


1.12
log
@	* config/tc-arm.c (do_vmrs): Accept priviledged mode VFP system
	registers.
	(do_vmsr): Likewise.
	(arm_opcode_insns): Do not default to using the FPSCR register in
	the VMRS and VMSR registers.

	* gas/arm/vfp1xD.s: Add tests of the VMSR ad VMRS instructions in
	priviledged modes.
	* gas/arm/vfp1xD.d: Update expected output.
@
text
@d283 13
a295 7
0+444 <[^>]*> eef03a10 	vmrs	r3, fpsid
0+448 <[^>]*> eef64a10 	vmrs	r4, mvfr1
0+44c <[^>]*> eef75a10 	vmrs	r5, mvfr0
0+450 <[^>]*> eef86a10 	vmrs	r6, fpexc
0+454 <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
0+458 <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
0+45c <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
@


1.11
log
@        * config/tc-arm.c (parse_operands): Encode APSR_nzcv as r15.
        (do_vmrs): New function.
        (do_vmsr): New function.
        (insns): Add vmrs and vmsr.

        * gas/arm/vfp1xD.s: Add vmrs and vmsr instructions.
        * gas/arm/vfp1xD.d: Update expected disassembly.
@
text
@d281 9
a289 2
0+43c <[^>]*> e1a00000 	nop			; \(mov r0, r0\)

@


1.10
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@d252 31
a282 2
0+3c8 <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
0+3cc <[^>]*> e1a00000 	nop			; \(mov r0, r0\)
@


1.9
log
@        PR 10288
        * arm-dis.c (enum opcode_sentinels): New:  Used to mark the
        boundary between variaant and generic coprocessor instuctions.
        (coprocessor): Use it.
        Fix architecture version of MCRR and MRRC instructions.
        (arm_opcdes): Fix patterns for STRB and STRH instructions.
        (print_insn_coprocessor): Check architecture and extension masks.
        Print a hexadecimal version of any decimal constant that is
        outside of the range of -16 to +32.
        (print_arm_address): Add a return value of the offset used in the
        adress, if it is worth printing a hexadecimal version of it.
        (print_insn_neon): Print a hexadecimal version of any decimal
        constant that is outside of the range of -16 to +32.
        (print_insn_arm): Likewise.
        (print_insn_thumb16): Likewise.
        (print_insn_thumb32): Likewise.

        PR 10297
        * arm-dis.c (UNDEFINED_INSTRUCTION): New macro for a description
        of an undefined instruction.
        (arm_opcodes): Use it.
        (thumb_opcod): Use it.
        (thumb32_opc): Use it.

        Update expected disassembly regrexps in GAS and LD testsuites.
@
text
@d252 2
a253 2
0+3c8 <[^>]*> e1a00000 	nop			\(mov r0,r0\)
0+3cc <[^>]*> e1a00000 	nop			\(mov r0,r0\)
@


1.8
log
@opcodes:
	* arm-dis.c (coprocessor_opcodes): Disassemble VFP instructions using
	unified syntax.
gas/testsuite:
	* gas/arm/group-reloc-ldc.d: Disassembly of VFP instructions now uses
	unified syntax.
	* gas/arm/vfp-non-overlap.d: Likewise.
	* gas/arm/vfp-neon-syntax.d: Likewise.
	* gas/arm/vfp-neon-syntax_t2.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
	* gas/arm/vfpv3-const-conv.d: Likewise.
ld/testsuite:
	* ld-arm/vfp11-fix-scalar.d: Disassembly of VFP instructions now uses
	unified syntax.
	* ld-arm/vfp11-fix-vector.d: Likewise.
@
text
@d128 2
a129 2
0+1d8 <[^>]*> ed900aff 	(vldr|flds)	s0, \[r0, #1020\]
0+1dc <[^>]*> ed100aff 	(vldr|flds)	s0, \[r0, #-1020\]
d133 1
a133 1
0+1ec <[^>]*> edccaac9 	(vstr|fsts)	s21, \[ip, #804\]
@


1.7
log
@2007-06-26  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (parse_operands): Accept generic coprocessor regs
	for OP_RVC.
	(reg_names): Add fpinst, pfinst2, mvfr0 and mvfr1.

	gas/testsuite/
	* gas/arm/vfp1xD.d: Add new fmrx/fmxr tests.
	* gas/arm/vfp1xD.s: Ditto.
	* gas/arm/vfp1xD_t2.d: Ditto.
	* gas/arm/vfp1xD_t2.s: Ditto.

	opcodes/
	* arm-dis.c (coprocessor_opcodes): Add fmxr/fmrx mvfr0/mvfr1.
@
text
@d10 242
a251 242
0+000 <[^>]*> eef1fa10 	fmstat
0+004 <[^>]*> eeb40ac0 	fcmpes	s0, s0
0+008 <[^>]*> eeb50ac0 	fcmpezs	s0
0+00c <[^>]*> eeb40a40 	fcmps	s0, s0
0+010 <[^>]*> eeb50a40 	fcmpzs	s0
0+014 <[^>]*> eeb00ac0 	fabss	s0, s0
0+018 <[^>]*> eeb00a40 	fcpys	s0, s0
0+01c <[^>]*> eeb10a40 	fnegs	s0, s0
0+020 <[^>]*> eeb10ac0 	fsqrts	s0, s0
0+024 <[^>]*> ee300a00 	fadds	s0, s0, s0
0+028 <[^>]*> ee800a00 	fdivs	s0, s0, s0
0+02c <[^>]*> ee000a00 	fmacs	s0, s0, s0
0+030 <[^>]*> ee100a00 	fmscs	s0, s0, s0
0+034 <[^>]*> ee200a00 	fmuls	s0, s0, s0
0+038 <[^>]*> ee000a40 	fnmacs	s0, s0, s0
0+03c <[^>]*> ee100a40 	fnmscs	s0, s0, s0
0+040 <[^>]*> ee200a40 	fnmuls	s0, s0, s0
0+044 <[^>]*> ee300a40 	fsubs	s0, s0, s0
0+048 <[^>]*> ed900a00 	flds	s0, \[r0\]
0+04c <[^>]*> ed800a00 	fsts	s0, \[r0\]
0+050 <[^>]*> ec900a01 	fldmias	r0, {s0}
0+054 <[^>]*> ec900a01 	fldmias	r0, {s0}
0+058 <[^>]*> ecb00a01 	fldmias	r0!, {s0}
0+05c <[^>]*> ecb00a01 	fldmias	r0!, {s0}
0+060 <[^>]*> ed300a01 	fldmdbs	r0!, {s0}
0+064 <[^>]*> ed300a01 	fldmdbs	r0!, {s0}
0+068 <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
0+080 <[^>]*> ec800a01 	fstmias	r0, {s0}
0+084 <[^>]*> ec800a01 	fstmias	r0, {s0}
0+088 <[^>]*> eca00a01 	fstmias	r0!, {s0}
0+08c <[^>]*> eca00a01 	fstmias	r0!, {s0}
0+090 <[^>]*> ed200a01 	fstmdbs	r0!, {s0}
0+094 <[^>]*> ed200a01 	fstmdbs	r0!, {s0}
0+098 <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
0+0b0 <[^>]*> eeb80ac0 	fsitos	s0, s0
0+0b4 <[^>]*> eeb80a40 	fuitos	s0, s0
0+0b8 <[^>]*> eebd0a40 	ftosis	s0, s0
0+0bc <[^>]*> eebd0ac0 	ftosizs	s0, s0
0+0c0 <[^>]*> eebc0a40 	ftouis	s0, s0
0+0c4 <[^>]*> eebc0ac0 	ftouizs	s0, s0
0+0c8 <[^>]*> ee100a10 	fmrs	r0, s0
0+0cc <[^>]*> eef00a10 	fmrx	r0, fpsid
0+0d0 <[^>]*> eef10a10 	fmrx	r0, fpscr
0+0d4 <[^>]*> eef80a10 	fmrx	r0, fpexc
0+0d8 <[^>]*> ee000a10 	fmsr	s0, r0
0+0dc <[^>]*> eee00a10 	fmxr	fpsid, r0
0+0e0 <[^>]*> eee10a10 	fmxr	fpscr, r0
0+0e4 <[^>]*> eee80a10 	fmxr	fpexc, r0
0+0e8 <[^>]*> eef50a40 	fcmpzs	s1
0+0ec <[^>]*> eeb51a40 	fcmpzs	s2
0+0f0 <[^>]*> eef5fa40 	fcmpzs	s31
0+0f4 <[^>]*> eeb40a60 	fcmps	s0, s1
0+0f8 <[^>]*> eeb40a41 	fcmps	s0, s2
0+0fc <[^>]*> eeb40a6f 	fcmps	s0, s31
0+100 <[^>]*> eef40a40 	fcmps	s1, s0
0+104 <[^>]*> eeb41a40 	fcmps	s2, s0
0+108 <[^>]*> eef4fa40 	fcmps	s31, s0
0+10c <[^>]*> eef4aa46 	fcmps	s21, s12
0+110 <[^>]*> eeb10a60 	fnegs	s0, s1
0+114 <[^>]*> eeb10a41 	fnegs	s0, s2
0+118 <[^>]*> eeb10a6f 	fnegs	s0, s31
0+11c <[^>]*> eef10a40 	fnegs	s1, s0
0+120 <[^>]*> eeb11a40 	fnegs	s2, s0
0+124 <[^>]*> eef1fa40 	fnegs	s31, s0
0+128 <[^>]*> eeb16a6a 	fnegs	s12, s21
0+12c <[^>]*> ee300a20 	fadds	s0, s0, s1
0+130 <[^>]*> ee300a01 	fadds	s0, s0, s2
0+134 <[^>]*> ee300a2f 	fadds	s0, s0, s31
0+138 <[^>]*> ee300a80 	fadds	s0, s1, s0
0+13c <[^>]*> ee310a00 	fadds	s0, s2, s0
0+140 <[^>]*> ee3f0a80 	fadds	s0, s31, s0
0+144 <[^>]*> ee700a00 	fadds	s1, s0, s0
0+148 <[^>]*> ee301a00 	fadds	s2, s0, s0
0+14c <[^>]*> ee70fa00 	fadds	s31, s0, s0
0+150 <[^>]*> ee3a6aa2 	fadds	s12, s21, s5
0+154 <[^>]*> eeb80ae0 	fsitos	s0, s1
0+158 <[^>]*> eeb80ac1 	fsitos	s0, s2
0+15c <[^>]*> eeb80aef 	fsitos	s0, s31
0+160 <[^>]*> eef80ac0 	fsitos	s1, s0
0+164 <[^>]*> eeb81ac0 	fsitos	s2, s0
0+168 <[^>]*> eef8fac0 	fsitos	s31, s0
0+16c <[^>]*> eebd0a60 	ftosis	s0, s1
0+170 <[^>]*> eebd0a41 	ftosis	s0, s2
0+174 <[^>]*> eebd0a6f 	ftosis	s0, s31
0+178 <[^>]*> eefd0a40 	ftosis	s1, s0
0+17c <[^>]*> eebd1a40 	ftosis	s2, s0
0+180 <[^>]*> eefdfa40 	ftosis	s31, s0
0+184 <[^>]*> ee001a10 	fmsr	s0, r1
0+188 <[^>]*> ee007a10 	fmsr	s0, r7
0+18c <[^>]*> ee00ea10 	fmsr	s0, lr
0+190 <[^>]*> ee000a90 	fmsr	s1, r0
0+194 <[^>]*> ee010a10 	fmsr	s2, r0
0+198 <[^>]*> ee0f0a90 	fmsr	s31, r0
0+19c <[^>]*> ee0a7a90 	fmsr	s21, r7
0+1a0 <[^>]*> eee01a10 	fmxr	fpsid, r1
0+1a4 <[^>]*> eee0ea10 	fmxr	fpsid, lr
0+1a8 <[^>]*> ee100a90 	fmrs	r0, s1
0+1ac <[^>]*> ee110a10 	fmrs	r0, s2
0+1b0 <[^>]*> ee1f0a90 	fmrs	r0, s31
0+1b4 <[^>]*> ee101a10 	fmrs	r1, s0
0+1b8 <[^>]*> ee107a10 	fmrs	r7, s0
0+1bc <[^>]*> ee10ea10 	fmrs	lr, s0
0+1c0 <[^>]*> ee159a90 	fmrs	r9, s11
0+1c4 <[^>]*> eef01a10 	fmrx	r1, fpsid
0+1c8 <[^>]*> eef0ea10 	fmrx	lr, fpsid
0+1cc <[^>]*> ed910a00 	flds	s0, \[r1\]
0+1d0 <[^>]*> ed9e0a00 	flds	s0, \[lr\]
0+1d4 <[^>]*> ed900a00 	flds	s0, \[r0\]
0+1d8 <[^>]*> ed900aff 	flds	s0, \[r0, #1020\]
0+1dc <[^>]*> ed100aff 	flds	s0, \[r0, #-1020\]
0+1e0 <[^>]*> edd00a00 	flds	s1, \[r0\]
0+1e4 <[^>]*> ed901a00 	flds	s2, \[r0\]
0+1e8 <[^>]*> edd0fa00 	flds	s31, \[r0\]
0+1ec <[^>]*> edccaac9 	fsts	s21, \[ip, #804\]
0+1f0 <[^>]*> ecd00a01 	fldmias	r0, {s1}
0+1f4 <[^>]*> ec901a01 	fldmias	r0, {s2}
0+1f8 <[^>]*> ecd0fa01 	fldmias	r0, {s31}
0+1fc <[^>]*> ec900a02 	fldmias	r0, {s0-s1}
0+200 <[^>]*> ec900a03 	fldmias	r0, {s0-s2}
0+204 <[^>]*> ec900a20 	fldmias	r0, {s0-s31}
0+208 <[^>]*> ecd00a1f 	fldmias	r0, {s1-s31}
0+20c <[^>]*> ec901a1e 	fldmias	r0, {s2-s31}
0+210 <[^>]*> ec90fa02 	fldmias	r0, {s30-s31}
0+214 <[^>]*> ec910a01 	fldmias	r1, {s0}
0+218 <[^>]*> ec9e0a01 	fldmias	lr, {s0}
0+21c <[^>]*> ec801b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec802b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec800b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec800b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec800b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec801b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec802b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec810b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e0b03 	fstmiax	lr, {d0}
0+248 <[^>]*> eeb50a40 	fcmpzs	s0
0+24c <[^>]*> eef50a40 	fcmpzs	s1
0+250 <[^>]*> eeb51a40 	fcmpzs	s2
0+254 <[^>]*> eef51a40 	fcmpzs	s3
0+258 <[^>]*> eeb52a40 	fcmpzs	s4
0+25c <[^>]*> eef52a40 	fcmpzs	s5
0+260 <[^>]*> eeb53a40 	fcmpzs	s6
0+264 <[^>]*> eef53a40 	fcmpzs	s7
0+268 <[^>]*> eeb54a40 	fcmpzs	s8
0+26c <[^>]*> eef54a40 	fcmpzs	s9
0+270 <[^>]*> eeb55a40 	fcmpzs	s10
0+274 <[^>]*> eef55a40 	fcmpzs	s11
0+278 <[^>]*> eeb56a40 	fcmpzs	s12
0+27c <[^>]*> eef56a40 	fcmpzs	s13
0+280 <[^>]*> eeb57a40 	fcmpzs	s14
0+284 <[^>]*> eef57a40 	fcmpzs	s15
0+288 <[^>]*> eeb58a40 	fcmpzs	s16
0+28c <[^>]*> eef58a40 	fcmpzs	s17
0+290 <[^>]*> eeb59a40 	fcmpzs	s18
0+294 <[^>]*> eef59a40 	fcmpzs	s19
0+298 <[^>]*> eeb5aa40 	fcmpzs	s20
0+29c <[^>]*> eef5aa40 	fcmpzs	s21
0+2a0 <[^>]*> eeb5ba40 	fcmpzs	s22
0+2a4 <[^>]*> eef5ba40 	fcmpzs	s23
0+2a8 <[^>]*> eeb5ca40 	fcmpzs	s24
0+2ac <[^>]*> eef5ca40 	fcmpzs	s25
0+2b0 <[^>]*> eeb5da40 	fcmpzs	s26
0+2b4 <[^>]*> eef5da40 	fcmpzs	s27
0+2b8 <[^>]*> eeb5ea40 	fcmpzs	s28
0+2bc <[^>]*> eef5ea40 	fcmpzs	s29
0+2c0 <[^>]*> eeb5fa40 	fcmpzs	s30
0+2c4 <[^>]*> eef5fa40 	fcmpzs	s31
0+2c8 <[^>]*> 0ef1fa10 	fmstateq
0+2cc <[^>]*> 0ef41ae3 	fcmpeseq	s3, s7
0+2d0 <[^>]*> 0ef52ac0 	fcmpezseq	s5
0+2d4 <[^>]*> 0ef40a41 	fcmpseq	s1, s2
0+2d8 <[^>]*> 0ef50a40 	fcmpzseq	s1
0+2dc <[^>]*> 0ef00ae1 	fabsseq	s1, s3
0+2e0 <[^>]*> 0ef0fa69 	fcpyseq	s31, s19
0+2e4 <[^>]*> 0eb1aa44 	fnegseq	s20, s8
0+2e8 <[^>]*> 0ef12ae3 	fsqrtseq	s5, s7
0+2ec <[^>]*> 0e323a82 	faddseq	s6, s5, s4
0+2f0 <[^>]*> 0ec11a20 	fdivseq	s3, s2, s1
0+2f4 <[^>]*> 0e4ffa2e 	fmacseq	s31, s30, s29
0+2f8 <[^>]*> 0e1dea8d 	fmscseq	s28, s27, s26
0+2fc <[^>]*> 0e6cca2b 	fmulseq	s25, s24, s23
0+300 <[^>]*> 0e0abaca 	fnmacseq	s22, s21, s20
0+304 <[^>]*> 0e599a68 	fnmscseq	s19, s18, s17
0+308 <[^>]*> 0e278ac7 	fnmulseq	s16, s15, s14
0+30c <[^>]*> 0e766a65 	fsubseq	s13, s12, s11
0+310 <[^>]*> 0d985a00 	fldseq	s10, \[r8\]
0+314 <[^>]*> 0dc74a00 	fstseq	s9, \[r7\]
0+318 <[^>]*> 0c914a01 	fldmiaseq	r1, {s8}
0+31c <[^>]*> 0cd23a01 	fldmiaseq	r2, {s7}
0+320 <[^>]*> 0cb33a01 	fldmiaseq	r3!, {s6}
0+324 <[^>]*> 0cf42a01 	fldmiaseq	r4!, {s5}
0+328 <[^>]*> 0d352a01 	fldmdbseq	r5!, {s4}
0+32c <[^>]*> 0d761a01 	fldmdbseq	r6!, {s3}
0+330 <[^>]*> 0c971b03 	fldmiaxeq	r7, {d1}
0+334 <[^>]*> 0c982b03 	fldmiaxeq	r8, {d2}
0+338 <[^>]*> 0cb93b03 	fldmiaxeq	r9!, {d3}
0+33c <[^>]*> 0cba4b03 	fldmiaxeq	sl!, {d4}
0+340 <[^>]*> 0d3b5b03 	fldmdbxeq	fp!, {d5}
0+344 <[^>]*> 0d3c6b03 	fldmdbxeq	ip!, {d6}
0+348 <[^>]*> 0c8d1a01 	fstmiaseq	sp, {s2}
0+34c <[^>]*> 0cce0a01 	fstmiaseq	lr, {s1}
0+350 <[^>]*> 0ce1fa01 	fstmiaseq	r1!, {s31}
0+354 <[^>]*> 0ca2fa01 	fstmiaseq	r2!, {s30}
0+358 <[^>]*> 0d63ea01 	fstmdbseq	r3!, {s29}
0+35c <[^>]*> 0d24ea01 	fstmdbseq	r4!, {s28}
0+360 <[^>]*> 0c857b03 	fstmiaxeq	r5, {d7}
0+364 <[^>]*> 0c868b03 	fstmiaxeq	r6, {d8}
0+368 <[^>]*> 0ca79b03 	fstmiaxeq	r7!, {d9}
0+36c <[^>]*> 0ca8ab03 	fstmiaxeq	r8!, {d10}
0+370 <[^>]*> 0d29bb03 	fstmdbxeq	r9!, {d11}
0+374 <[^>]*> 0d2acb03 	fstmdbxeq	sl!, {d12}
0+378 <[^>]*> 0ef8dac3 	fsitoseq	s27, s6
0+37c <[^>]*> 0efdca62 	ftosiseq	s25, s5
0+380 <[^>]*> 0efdbac2 	ftosizseq	s23, s4
0+384 <[^>]*> 0efcaa61 	ftouiseq	s21, s3
0+388 <[^>]*> 0efc9ac1 	ftouizseq	s19, s2
0+38c <[^>]*> 0ef88a60 	fuitoseq	s17, s1
0+390 <[^>]*> 0e11ba90 	fmrseq	fp, s3
0+394 <[^>]*> 0ef09a10 	fmrxeq	r9, fpsid
0+398 <[^>]*> 0e019a90 	fmsreq	s3, r9
0+39c <[^>]*> 0ee08a10 	fmxreq	fpsid, r8
0+3a0 <[^>]*> eef90a10 	fmrx	r0, fpinst	@@ Impl def
0+3a4 <[^>]*> eefa0a10 	fmrx	r0, fpinst2	@@ Impl def
0+3a8 <[^>]*> eef70a10 	fmrx	r0, mvfr0
0+3ac <[^>]*> eef60a10 	fmrx	r0, mvfr1
0+3b0 <[^>]*> eefc0a10 	fmrx	r0, <impl def 0xc>
0+3b4 <[^>]*> eee90a10 	fmxr	fpinst, r0	@@ Impl def
0+3b8 <[^>]*> eeea0a10 	fmxr	fpinst2, r0	@@ Impl def
0+3bc <[^>]*> eee70a10 	fmxr	mvfr0, r0
0+3c0 <[^>]*> eee60a10 	fmxr	mvfr1, r0
0+3c4 <[^>]*> eeec0a10 	fmxr	<impl def 0xc>, r0
@


1.6
log
@	* gas/arm/vfp-neon-overlap.s: New test. Overlapping VFP/Neon
	instructions.
	* gas/arm/vfp-neon-overlap.d: Expected output of above.
	* gas/arm/vfp1xD.d: Test for fldmx/fstmx.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
@
text
@d242 12
@


1.5
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec900b03 	vldmia	r0, {d0}
0+06c <[^>]*> ec900b03 	vldmia	r0, {d0}
0+070 <[^>]*> ecb00b03 	vldmia	r0!, {d0}
0+074 <[^>]*> ecb00b03 	vldmia	r0!, {d0}
0+078 <[^>]*> ed300b03 	vldmdb	r0!, {d0}
0+07c <[^>]*> ed300b03 	vldmdb	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec800b03 	vstmia	r0, {d0}
0+09c <[^>]*> ec800b03 	vstmia	r0, {d0}
0+0a0 <[^>]*> eca00b03 	vstmia	r0!, {d0}
0+0a4 <[^>]*> eca00b03 	vstmia	r0!, {d0}
0+0a8 <[^>]*> ed200b03 	vstmdb	r0!, {d0}
0+0ac <[^>]*> ed200b03 	vstmdb	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec801b03 	vstmia	r0, {d1}
0+220 <[^>]*> ec802b03 	vstmia	r0, {d2}
0+224 <[^>]*> ec80fb03 	vstmia	r0, {d15}
0+228 <[^>]*> ec800b05 	vstmia	r0, {d0-d1}
0+22c <[^>]*> ec800b07 	vstmia	r0, {d0-d2}
0+230 <[^>]*> ec800b21 	vstmia	r0, {d0-d15}
0+234 <[^>]*> ec801b1f 	vstmia	r0, {d1-d15}
0+238 <[^>]*> ec802b1d 	vstmia	r0, {d2-d15}
0+23c <[^>]*> ec80eb05 	vstmia	r0, {d14-d15}
0+240 <[^>]*> ec810b03 	vstmia	r1, {d0}
0+244 <[^>]*> ec8e0b03 	vstmia	lr, {d0}
d214 6
a219 6
0+330 <[^>]*> 0c971b03 	vldmiaeq	r7, {d1}
0+334 <[^>]*> 0c982b03 	vldmiaeq	r8, {d2}
0+338 <[^>]*> 0cb93b03 	vldmiaeq	r9!, {d3}
0+33c <[^>]*> 0cba4b03 	vldmiaeq	sl!, {d4}
0+340 <[^>]*> 0d3b5b03 	vldmdbeq	fp!, {d5}
0+344 <[^>]*> 0d3c6b03 	vldmdbeq	ip!, {d6}
d226 6
a231 6
0+360 <[^>]*> 0c857b03 	vstmiaeq	r5, {d7}
0+364 <[^>]*> 0c868b03 	vstmiaeq	r6, {d8}
0+368 <[^>]*> 0ca79b03 	vstmiaeq	r7!, {d9}
0+36c <[^>]*> 0ca8ab03 	vstmiaeq	r8!, {d10}
0+370 <[^>]*> 0d29bb03 	vstmdbeq	r9!, {d11}
0+374 <[^>]*> 0d2acb03 	vstmdbeq	sl!, {d12}
@


1.4
log
@arm-dis.c (opcode32 arm_opcodes): Fix ARM VFP fadds instruction disassembly
  pattern.
vfp1xD.d: Adjust expected fadds disassemblies now that the dissassembler has
  been fixed.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec801b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec802b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec800b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec800b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec800b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec801b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec802b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec810b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e0b03 	fstmiax	lr, {d0}
d214 6
a219 6
0+330 <[^>]*> 0c971b03 	fldmiaxeq	r7, {d1}
0+334 <[^>]*> 0c982b03 	fldmiaxeq	r8, {d2}
0+338 <[^>]*> 0cb93b03 	fldmiaxeq	r9!, {d3}
0+33c <[^>]*> 0cba4b03 	fldmiaxeq	sl!, {d4}
0+340 <[^>]*> 0d3b5b03 	fldmdbxeq	fp!, {d5}
0+344 <[^>]*> 0d3c6b03 	fldmdbxeq	ip!, {d6}
d226 6
a231 6
0+360 <[^>]*> 0c857b03 	fstmiaxeq	r5, {d7}
0+364 <[^>]*> 0c868b03 	fstmiaxeq	r6, {d8}
0+368 <[^>]*> 0ca79b03 	fstmiaxeq	r7!, {d9}
0+36c <[^>]*> 0ca8ab03 	fstmiaxeq	r8!, {d10}
0+370 <[^>]*> 0d29bb03 	fstmdbxeq	r9!, {d11}
0+374 <[^>]*> 0d2acb03 	fstmdbxeq	sl!, {d12}
@


1.4.2.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec900b03 	vldmia	r0, {d0}
0+06c <[^>]*> ec900b03 	vldmia	r0, {d0}
0+070 <[^>]*> ecb00b03 	vldmia	r0!, {d0}
0+074 <[^>]*> ecb00b03 	vldmia	r0!, {d0}
0+078 <[^>]*> ed300b03 	vldmdb	r0!, {d0}
0+07c <[^>]*> ed300b03 	vldmdb	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec800b03 	vstmia	r0, {d0}
0+09c <[^>]*> ec800b03 	vstmia	r0, {d0}
0+0a0 <[^>]*> eca00b03 	vstmia	r0!, {d0}
0+0a4 <[^>]*> eca00b03 	vstmia	r0!, {d0}
0+0a8 <[^>]*> ed200b03 	vstmdb	r0!, {d0}
0+0ac <[^>]*> ed200b03 	vstmdb	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec801b03 	vstmia	r0, {d1}
0+220 <[^>]*> ec802b03 	vstmia	r0, {d2}
0+224 <[^>]*> ec80fb03 	vstmia	r0, {d15}
0+228 <[^>]*> ec800b05 	vstmia	r0, {d0-d1}
0+22c <[^>]*> ec800b07 	vstmia	r0, {d0-d2}
0+230 <[^>]*> ec800b21 	vstmia	r0, {d0-d15}
0+234 <[^>]*> ec801b1f 	vstmia	r0, {d1-d15}
0+238 <[^>]*> ec802b1d 	vstmia	r0, {d2-d15}
0+23c <[^>]*> ec80eb05 	vstmia	r0, {d14-d15}
0+240 <[^>]*> ec810b03 	vstmia	r1, {d0}
0+244 <[^>]*> ec8e0b03 	vstmia	lr, {d0}
d214 6
a219 6
0+330 <[^>]*> 0c971b03 	vldmiaeq	r7, {d1}
0+334 <[^>]*> 0c982b03 	vldmiaeq	r8, {d2}
0+338 <[^>]*> 0cb93b03 	vldmiaeq	r9!, {d3}
0+33c <[^>]*> 0cba4b03 	vldmiaeq	sl!, {d4}
0+340 <[^>]*> 0d3b5b03 	vldmdbeq	fp!, {d5}
0+344 <[^>]*> 0d3c6b03 	vldmdbeq	ip!, {d6}
d226 6
a231 6
0+360 <[^>]*> 0c857b03 	vstmiaeq	r5, {d7}
0+364 <[^>]*> 0c868b03 	vstmiaeq	r6, {d8}
0+368 <[^>]*> 0ca79b03 	vstmiaeq	r7!, {d9}
0+36c <[^>]*> 0ca8ab03 	vstmiaeq	r8!, {d10}
0+370 <[^>]*> 0d29bb03 	vstmdbeq	r9!, {d11}
0+374 <[^>]*> 0d2acb03 	vstmdbeq	sl!, {d12}
@


1.4.2.2
log
@	* gas/config/tc-arm.c (parse_vfp_reg_list): Improve register bounds
	checking.
	(do_neon_mov): Enable several VMOV variants for VFP. Add suitable
	architecture version checks.
	(insns): Allow overlapping instructions to be used in VFP mode.

   	* gas/testsuite/gas/arm/vfp-neon-overlap.s: New test. Overlapping
	VFP/Neon instructions.
	* gas/testsuite/gas/arm/vfp-neon-overlap.d: Expected output of above.
	* gas/testsuite/gas/arm/vfp1xD.d: Test for fldmx/fstmx.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfpv3-32drs.d: Likewise.

   	* opcodes/arm-dis.c (coprocessor_opcodes): Don't interpret fldmx/fstmx
	as vldm/vstm.
@
text
@d36 6
a41 6
0+068 <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+06c <[^>]*> ec900b03 	fldmiax	r0, {d0}
0+070 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+074 <[^>]*> ecb00b03 	fldmiax	r0!, {d0}
0+078 <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
0+07c <[^>]*> ed300b03 	fldmdbx	r0!, {d0}
d48 6
a53 6
0+098 <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+09c <[^>]*> ec800b03 	fstmiax	r0, {d0}
0+0a0 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a4 <[^>]*> eca00b03 	fstmiax	r0!, {d0}
0+0a8 <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
0+0ac <[^>]*> ed200b03 	fstmdbx	r0!, {d0}
d145 11
a155 11
0+21c <[^>]*> ec801b03 	fstmiax	r0, {d1}
0+220 <[^>]*> ec802b03 	fstmiax	r0, {d2}
0+224 <[^>]*> ec80fb03 	fstmiax	r0, {d15}
0+228 <[^>]*> ec800b05 	fstmiax	r0, {d0-d1}
0+22c <[^>]*> ec800b07 	fstmiax	r0, {d0-d2}
0+230 <[^>]*> ec800b21 	fstmiax	r0, {d0-d15}
0+234 <[^>]*> ec801b1f 	fstmiax	r0, {d1-d15}
0+238 <[^>]*> ec802b1d 	fstmiax	r0, {d2-d15}
0+23c <[^>]*> ec80eb05 	fstmiax	r0, {d14-d15}
0+240 <[^>]*> ec810b03 	fstmiax	r1, {d0}
0+244 <[^>]*> ec8e0b03 	fstmiax	lr, {d0}
d214 6
a219 6
0+330 <[^>]*> 0c971b03 	fldmiaxeq	r7, {d1}
0+334 <[^>]*> 0c982b03 	fldmiaxeq	r8, {d2}
0+338 <[^>]*> 0cb93b03 	fldmiaxeq	r9!, {d3}
0+33c <[^>]*> 0cba4b03 	fldmiaxeq	sl!, {d4}
0+340 <[^>]*> 0d3b5b03 	fldmdbxeq	fp!, {d5}
0+344 <[^>]*> 0d3c6b03 	fldmdbxeq	ip!, {d6}
d226 6
a231 6
0+360 <[^>]*> 0c857b03 	fstmiaxeq	r5, {d7}
0+364 <[^>]*> 0c868b03 	fstmiaxeq	r6, {d8}
0+368 <[^>]*> 0ca79b03 	fstmiaxeq	r7!, {d9}
0+36c <[^>]*> 0ca8ab03 	fstmiaxeq	r8!, {d10}
0+370 <[^>]*> 0d29bb03 	fstmdbxeq	r9!, {d11}
0+374 <[^>]*> 0d2acb03 	fstmdbxeq	sl!, {d12}
@


1.3
log
@	* gas/arm/arm7t.d: Replace '-#' with '#-'.
	* gas/arm/copro.d: Likewise.
	* gas/arm/fpa-mem.d: Likewise.
	* gas/arm/maverick.c: Likewise.
	* gas/arm/maverick.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/xscale.d: Likewise.
@
text
@d85 3
a87 3
0+12c <[^>]*> ee300a20 	fadds	s0, s0, s0
0+130 <[^>]*> ee300a01 	fadds	s0, s0, s0
0+134 <[^>]*> ee300a2f 	fadds	s0, s0, s0
d91 4
a94 4
0+144 <[^>]*> ee700a00 	fadds	s1, s0, s1
0+148 <[^>]*> ee301a00 	fadds	s2, s0, s2
0+14c <[^>]*> ee70fa00 	fadds	s31, s0, s31
0+150 <[^>]*> ee3a6aa2 	fadds	s12, s21, s12
d197 1
a197 1
0+2ec <[^>]*> 0e323a82 	faddseq	s6, s5, s6
@


1.2
log
@* NEWS: Mention new ARM command-line options and VFP support.

* config/tc-arm.c (ARM_CEXT_XSCALE): Replaces ARM_EXT_XSCALE.  All
uses changed.
(ARM_CEXT_MAVERICK): Similarly.
(ARM_ANY): Now means any core instruction.
(CPU_DEFAULT): Default to ARM_ANY.
(uses_apcs_26, atcps, support_interwork, uses_apcs_float)
(pic_code): Declare for all object types.  Make type int.
(legacy_cpu, legacy_fpu, mcpu_cpu_opt, mcpu_fpu_opt, march_cpu_opt)
(march_fpu_opt, mfpu_opt): Declare.
(md_longopts): Tidy up conditional definitions.
(arm_opts, arm_cpus, arm_archs, arm_fpus, arm_extensions)
(arm_long_opts): New tables.
(arm_parse_cpu, arm_parse_arch, arm_parse_fpu): New functions.
(arm_parse_extension): New function.
(md_parse_option): Rewrite using new table-driven system.
(md_show_usage): Use new table-driven system.
(md_begin): Calculate cpu_variant from command line option data.
* doc/as.texinfo (ARM ISA options): Docuement new ARM-specific
command-line options.
* doc/c-arm.texi: Likewise.

Testsuite:
* gas/arm/vfp1.d: Use new command-line options.
* gas/arm/vfp1xD.d: Likewise.
* gas/arm/arm.exp (vfp-bad): Likewise.
* gas/arm/maverick.d: Likewise.
@
text
@d129 1
a129 1
0+1dc <[^>]*> ed100aff 	flds	s0, \[r0, -#1020\]
@


1.1
log
@Support for VFP instructions
* tc-arm.c (CP_WB_OK, CP_NO_WB): New defines.
(cp_address_required_here): New argument wb_ok.  When false, do not
accept write-back forms of addressing.  Change all callers.
(FPU_VFP_EXT_NONE, FPU_VFP_EXT_V1xD, FPU_VFP_VFP_V1)
(FPU_VFP_EXT_V2): Define.
(FPU_ARCH_VFP, FPU_ARCH_VFP_V1xD, FPU_ARCH_VFP_V1, FPU_ARCH_VFP_V2):
Define in terms of above.
(vfp_dp_reg_pos, vfp_sp_reg_pos, vfp_ldstm_type): New enums.
(vfp_reg): New struct.
(vfp_regs): New array of registers.
(insns): Add VFP instructions.
(sn_table): New array of VFP single-precision register names.
(dn_table): New array of VFP double-precision register names.
(all_reg_maps): Add the new register tables.
(arm_reg_type): Add new values for above.  Increase RET_TYPE_MAX.
(vfp_sp_reg_required_here, vfp_dp_reg_required_here, do_vfp_sp_monadic)
(do_vfp_dp_monadic, do_vfp_sp_dyadic, do_vfp_dp_dyadic)
(do_vfp_reg_from_sp, do_vfp_sp_reg2, do_vfp_sp_from_reg)
(do_vfp_reg_from_dp, do_vfp_reg2_from_dp, do_vfp_dp_from_reg)
(do_vfp_dp_from_reg2, vfp_psr_parse, vfp_psr_required_here)
(do_vfp_reg_from_ctrl, do_vfp_ctrl_from_reg, do_vfp_sp_ldst)
(do_vfp_dp_ldst, vfp_sp_reg_list, vfp_dp_reg_list, vfp_sp_ldstm)
(vfp_dp_ldstm, do_vfp_sp_ldstmia, do_vfp_sp_ldstmdb, do_vfp_ldstmia)
(do_vfp_dp_ldstmdb, do_vfp_xp_ldstmia, do_vfp_xp_ldstmdb)
(do_vfp_sp_compare_z, do_vfp_dp_compare_z, do_vfp_dp_sp_cvt)
(do_vfp_sp_dp_cvt): New functions.
(md_begin): Set soft-float flag for appropriate VFP work.
(md_atof): Handle VFP-format doubles.
(md_parse_option): Handle VFP command-line options.
(md_show_usage): Display VFP command-line options.

* testsuite/gas/arm/vfp1.s gas/arm/vf1.d: New files.
* testsuite/gas/arm/vfp1xD.s gas/arm/vf1xD.d: New files.
* testsuite/gas/arm/vfp-bad.s gas/arm/vfp-bad.l: New files.
* testsuite/gas/arm/arm.exp: Run new VFP tests.
@
text
@d3 1
a3 1
#as: -mvfpxd
@

