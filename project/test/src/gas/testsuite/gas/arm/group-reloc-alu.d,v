head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.12
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.10
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.8
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.6
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.4
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.4.0.2
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.3.0.6
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.2
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.1.2.1
	binutils-csl-sourcerygxx-4_1-32:1.1.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.1
	binutils-csl-coldfire-4_1-30:1.1.2.1
	binutils-csl-sourcerygxx-4_1-30:1.1.2.1
	binutils-csl-coldfire-4_1-28:1.1.2.1
	binutils-csl-sourcerygxx-4_1-29:1.1.2.1
	binutils-csl-sourcerygxx-4_1-28:1.1.2.1
	binutils-csl-arm-2006q3-27:1.1.2.1
	binutils-csl-sourcerygxx-4_1-27:1.1.2.1
	binutils-csl-arm-2006q3-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-25:1.1.2.1
	binutils-csl-sourcerygxx-4_1-24:1.1.2.1
	binutils-csl-sourcerygxx-4_1-23:1.1.2.1
	binutils-csl-sourcerygxx-4_1-21:1.1.2.1
	binutils-csl-arm-2006q3-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-22:1.1.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.1
	binutils-csl-sourcerygxx-4_1-20:1.1.2.1
	binutils-csl-arm-2006q3-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-18:1.1.2.1
	binutils-csl-renesas-4_1-9:1.1.2.1
	binutils-csl-renesas-4_1-8:1.1.2.1
	binutils-csl-renesas-4_1-7:1.1.2.1
	binutils-csl-renesas-4_1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-17:1.1.2.1
	binutils-csl-sourcerygxx-4_1-14:1.1.2.1
	binutils-csl-sourcerygxx-4_1-15:1.1.2.1
	binutils-csl-sourcerygxx-4_1-13:1.1.2.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.1
	binutils_latest_snapshot:1.4
	binutils-csl-2_17-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.05.11.24.30;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.18.10.05.27;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.15.11.03.01;	author shinwell;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.06.15.15.53.11;	author shinwell;	state Exp;
branches;
next	;


desc
@@


1.4
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#skip: *-*-*coff *-*-pe *-*-wince *-*-*aout* *-*-netbsd *-*-riscix* *-*-vxworks
#name: Group relocation tests (alu)

.*: +file format .*arm.*

Disassembly of section .text:
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			0: R_ARM_ALU_PC_G0	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			4: R_ARM_ALU_PC_G1	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			8: R_ARM_ALU_PC_G2	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			c: R_ARM_ALU_PC_G0_NC	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			10: R_ARM_ALU_PC_G1_NC	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			14: R_ARM_ALU_SB_G0	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			18: R_ARM_ALU_SB_G1	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			1c: R_ARM_ALU_SB_G2	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			20: R_ARM_ALU_SB_G0_NC	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			24: R_ARM_ALU_SB_G1_NC	f
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			28: R_ARM_ALU_PC_G0	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			2c: R_ARM_ALU_PC_G1	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			30: R_ARM_ALU_PC_G2	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			34: R_ARM_ALU_PC_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			38: R_ARM_ALU_PC_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			3c: R_ARM_ALU_SB_G0	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			40: R_ARM_ALU_SB_G1	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			44: R_ARM_ALU_SB_G2	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			48: R_ARM_ALU_SB_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2800c01 	add	r0, r0, #256	; 0x100
			4c: R_ARM_ALU_SB_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			50: R_ARM_ALU_PC_G0	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			54: R_ARM_ALU_PC_G1	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			58: R_ARM_ALU_PC_G2	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			5c: R_ARM_ALU_PC_G0_NC	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			60: R_ARM_ALU_PC_G1_NC	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			64: R_ARM_ALU_SB_G0	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			68: R_ARM_ALU_SB_G1	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			6c: R_ARM_ALU_SB_G2	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			70: R_ARM_ALU_SB_G0_NC	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			74: R_ARM_ALU_SB_G1_NC	f
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			78: R_ARM_ALU_PC_G0	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			7c: R_ARM_ALU_PC_G1	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			80: R_ARM_ALU_PC_G2	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			84: R_ARM_ALU_PC_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			88: R_ARM_ALU_PC_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			8c: R_ARM_ALU_SB_G0	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			90: R_ARM_ALU_SB_G1	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			94: R_ARM_ALU_SB_G2	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			98: R_ARM_ALU_SB_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2900c01 	adds	r0, r0, #256	; 0x100
			9c: R_ARM_ALU_SB_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			a0: R_ARM_ALU_PC_G0	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			a4: R_ARM_ALU_PC_G1	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			a8: R_ARM_ALU_PC_G2	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			ac: R_ARM_ALU_PC_G0_NC	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			b0: R_ARM_ALU_PC_G1_NC	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			b4: R_ARM_ALU_SB_G0	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			b8: R_ARM_ALU_SB_G1	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			bc: R_ARM_ALU_SB_G2	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			c0: R_ARM_ALU_SB_G0_NC	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			c4: R_ARM_ALU_SB_G1_NC	f
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			c8: R_ARM_ALU_PC_G0	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			cc: R_ARM_ALU_PC_G1	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			d0: R_ARM_ALU_PC_G2	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			d4: R_ARM_ALU_PC_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			d8: R_ARM_ALU_PC_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			dc: R_ARM_ALU_SB_G0	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			e0: R_ARM_ALU_SB_G1	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			e4: R_ARM_ALU_SB_G2	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			e8: R_ARM_ALU_SB_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2400c01 	sub	r0, r0, #256	; 0x100
			ec: R_ARM_ALU_SB_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			f0: R_ARM_ALU_PC_G0	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			f4: R_ARM_ALU_PC_G1	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			f8: R_ARM_ALU_PC_G2	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			fc: R_ARM_ALU_PC_G0_NC	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			100: R_ARM_ALU_PC_G1_NC	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			104: R_ARM_ALU_SB_G0	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			108: R_ARM_ALU_SB_G1	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			10c: R_ARM_ALU_SB_G2	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			110: R_ARM_ALU_SB_G0_NC	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			114: R_ARM_ALU_SB_G1_NC	f
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			118: R_ARM_ALU_PC_G0	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			11c: R_ARM_ALU_PC_G1	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			120: R_ARM_ALU_PC_G2	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			124: R_ARM_ALU_PC_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			128: R_ARM_ALU_PC_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			12c: R_ARM_ALU_SB_G0	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			130: R_ARM_ALU_SB_G1	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			134: R_ARM_ALU_SB_G2	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			138: R_ARM_ALU_SB_G0_NC	localsym
0[0-9a-f]+ <[^>]+> e2500c01 	subs	r0, r0, #256	; 0x100
			13c: R_ARM_ALU_SB_G1_NC	localsym
0[0-9a-f]+ <[^>]+> e3a00000 	mov	r0, #0
@


1.3
log
@        * gas/arm/abs12.d: Update expected disassembly.
        * gas/arm/tls_vxworks.d: Likewise.
        * gas/arm/unwind_vxworks.d: Likewise.
        * gas/arm/group-reloc-alu-encoding-bad.d: Skip for vxworks
        targets.
        * gas/arm/group-reloc-alu.d: Likewise.
        * gas/arm/group-reloc-ldc-encoding-bad.d: Likewise.
        * gas/arm/group-reloc-ldc.d: Likewise.
        * gas/arm/group-reloc-ldr-encoding-bad.d: Likewise.
        * gas/arm/group-reloc-ldr.d: Likewise.
        * gas/arm/group-reloc-ldrs-encoding-bad.d: Likewise.
        * gas/arm/group-reloc-ldrs.d: Likewise.
        * gas/arm/local_function.d: Likewise.
        * gas/arm/mapshort-elf.d: Likewise.
        * gas/arm/undefined.d: Likewise.
@
text
@d168 1
a168 1
0[0-9a-f]+ <[^>]+> e3a00000 	mov	r0, #0	; 0x0
@


1.2
log
@Skip for non-ELF targets.
@
text
@d2 1
a2 1
#skip: *-*-*coff *-*-pe *-*-wince *-*-*aout* *-*-netbsd *-*-riscix*
@


1.1
log
@	* include/elf/arm.h: Correct names of R_ARM_LDC_G{0,1,2}
	to R_ARM_LDC_SB_G{0,1,2} respectively.

bfd/
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (R_ARM_ALU_PC_G0_NC, R_ARM_ALU_PC_G0,
	R_ARM_ALU_PC_G1_NC, R_ARM_ALU_PC_G1, R_ARM_ALU_PC_G2,
	R_ARM_LDR_PC_G1, R_ARM_LDR_PC_G2, R_ARM_LDRS_PC_G0,
	R_ARM_LDRS_PC_G1, R_ARM_LDRS_PC_G2, R_ARM_LDC_PC_G0,
	R_ARM_LDC_PC_G1, R_ARM_LDC_PC_G2, R_ARM_ALU_SB_G0_NC,
	R_ARM_ALU_SB_G0, R_ARM_ALU_SB_G1_NC, R_ARM_ALU_SB_G1,
	R_ARM_ALU_SB_G2, R_ARM_LDR_SB_G0, R_ARM_LDR_SB_G1,
	R_ARM_LDR_SB_G2, R_ARM_LDRS_SB_G0, R_ARM_LDRS_SB_G1,
	R_ARM_LDRS_SB_G2, R_ARM_LDC_SB_G0, R_ARM_LDC_SB_G1,
	R_ARM_LDC_SB_G2): New relocation types.
	(R_ARM_PC13): Rename to AAELF name R_ARM_LDR_PC_G0 and
	adjust HOWTO entry to be consistent with R_ARM_LDR_PC_G1
	and friends.
	(elf32_arm_howto_table_3): Delete; contents merged into
	elf32_arm_howto_table_2.
	(elf32_arm_howto_from_type): Adjust correspondingly.
	(elf32_arm_reloc_map): Extend with the above relocations.
	(calculate_group_reloc_mask): New function.
	(identify_add_or_sub): New function.
	(elf32_arm_final_link_relocate): Support for the above
	relocations.
	* reloc.c: Add enumeration entries for BFD_RELOC_ARM_...
	codes to correspond to the above relocations.

gas/
	* config/tc-arm.c (enum parse_operand_result): New.
	(struct group_reloc_table_entry): New.
	(enum group_reloc_type): New.
	(group_reloc_table): New array.
	(find_group_reloc_table_entry): New function.
	(parse_shifter_operand_group_reloc): New function.
	(parse_address_main): New function, incorporating code
	from the old parse_address function.  To be used via...
	(parse_address): wrapper for parse_address_main; and
	(parse_address_group_reloc): new function, likewise.
	(enum operand_parse_code): New codes OP_SHG, OP_ADDRGLDR,
	OP_ADDRGLDRS, OP_ADDRGLDC.
	(parse_operands): Support for these new operand codes.
	New macro po_misc_or_fail_no_backtrack.
	(encode_arm_cp_address): Preserve group relocations.
	(insns): Modify to use the above operand codes where group
	relocations are permitted.
	(md_apply_fix): Handle the group relocations
	ALU_PC_G0_NC through LDC_SB_G2.
	(tc_gen_reloc): Likewise.
	(arm_force_relocation): Leave group relocations for the linker.
	(arm_fix_adjustable): Likewise.

gas/testsuite/
	* gas/arm/group-reloc-alu.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.l: New test.
	* gas/arm/group-reloc-alu-encoding-bad.s: New test.
	* gas/arm/group-reloc-alu-parsing-bad.d: New test.
	* gas/arm/group-reloc-alu-parsing-bad.l: New test.
	* gas/arm/group-reloc-alu-parsing-bad.s: New test.
	* gas/arm/group-reloc-alu.s: New test.
	* gas/arm/group-reloc-ldc.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldc.s: New test.
	* gas/arm/group-reloc-ldr.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldr.s: New test.
	* gas/arm/group-reloc-ldrs.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldrs.s: New test.

ld/testsuite/
	* ld-arm/group-relocs-alu-bad.d: New test.
	* ld-arm/group-relocs-alu-bad.s: New test.
	* ld-arm/group-relocs.d: New test.
	* ld-arm/group-relocs-ldc-bad.d: New test.
	* ld-arm/group-relocs-ldc-bad.s: New test.
	* ld-arm/group-relocs-ldr-bad.d: New test.
	* ld-arm/group-relocs-ldr-bad.s: New test.
	* ld-arm/group-relocs-ldrs-bad.d: New test.
	* ld-arm/group-relocs-ldrs-bad.s: New test.
	* ld-arm/group-relocs.s: New test.
	* ld-arm/arm-elf.exp: Wire in new tests.
@
text
@d2 1
@


1.1.2.1
log
@Support for ARM "group relocations" numbers 4, and 57 through 83.

	* include/elf/arm.h: Correct names of R_ARM_LDC_G{0,1,2}
	to R_ARM_LDC_SB_G{0,1,2} respectively.

	bfd/
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (R_ARM_ALU_PC_G0_NC, R_ARM_ALU_PC_G0,
	R_ARM_ALU_PC_G1_NC, R_ARM_ALU_PC_G1, R_ARM_ALU_PC_G2,
	R_ARM_LDR_PC_G1, R_ARM_LDR_PC_G2, R_ARM_LDRS_PC_G0,
	R_ARM_LDRS_PC_G1, R_ARM_LDRS_PC_G2, R_ARM_LDC_PC_G0,
	R_ARM_LDC_PC_G1, R_ARM_LDC_PC_G2, R_ARM_ALU_SB_G0_NC,
	R_ARM_ALU_SB_G0, R_ARM_ALU_SB_G1_NC, R_ARM_ALU_SB_G1,
	R_ARM_ALU_SB_G2, R_ARM_LDR_SB_G0, R_ARM_LDR_SB_G1,
	R_ARM_LDR_SB_G2, R_ARM_LDRS_SB_G0, R_ARM_LDRS_SB_G1,
	R_ARM_LDRS_SB_G2, R_ARM_LDC_SB_G0, R_ARM_LDC_SB_G1,
	R_ARM_LDC_SB_G2): New relocation types.
	(R_ARM_PC13): Rename to AAELF name R_ARM_LDR_PC_G0 and
	adjust HOWTO entry to be consistent with R_ARM_LDR_PC_G1
	and friends.
	(elf32_arm_howto_table_3): Delete; contents merged into
	elf32_arm_howto_table_2.
	(elf32_arm_howto_from_type): Adjust correspondingly.
	(elf32_arm_reloc_map): Extend with the above relocations.
	(calculate_group_reloc_mask): New function.
	(identify_add_or_sub): New function.
	(elf32_arm_final_link_relocate): Support for the above
	relocations.
	* reloc.c: Add enumeration entries for BFD_RELOC_ARM_...
	codes to correspond to the above relocations.

	gas/
	* config/tc-arm.c (enum parse_operand_result): New.
	(struct group_reloc_table_entry): New.
	(enum group_reloc_type): New.
	(group_reloc_table): New array.
	(find_group_reloc_table_entry): New function.
	(parse_shifter_operand_group_reloc): New function.
	(parse_address_main): New function, incorporating code
	from the old parse_address function.  To be used via...
	(parse_address): wrapper for parse_address_main; and
	(parse_address_group_reloc): new function, likewise.
	(enum operand_parse_code): New codes OP_SHG, OP_ADDRGLDR,
	OP_ADDRGLDRS, OP_ADDRGLDC.
	(parse_operands): Support for these new operand codes.
	New macro po_misc_or_fail_no_backtrack.
	(encode_arm_cp_address): Preserve group relocations.
	(insns): Modify to use the above operand codes where group
	relocations are permitted.
	(md_apply_fix): Handle the group relocations
	ALU_PC_G0_NC through LDC_SB_G2.
	(tc_gen_reloc): Likewise.
	(arm_force_relocation): Leave group relocations for the linker.
	(arm_fix_adjustable): Likewise.

	gas/testsuite/
	* gas/arm/group-reloc-alu.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.l: New test.
	* gas/arm/group-reloc-alu-encoding-bad.s: New test.
	* gas/arm/group-reloc-alu-parsing-bad.d: New test.
	* gas/arm/group-reloc-alu-parsing-bad.l: New test.
	* gas/arm/group-reloc-alu-parsing-bad.s: New test.
	* gas/arm/group-reloc-alu.s: New test.
	* gas/arm/group-reloc-ldc.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldc.s: New test.
	* gas/arm/group-reloc-ldr.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldr.s: New test.
	* gas/arm/group-reloc-ldrs.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldrs.s: New test.

	ld/testsuite/
	* ld-arm/group-relocs-alu-bad.d: New test.
	* ld-arm/group-relocs-alu-bad.s: New test.
	* ld-arm/group-relocs.d: New test.
	* ld-arm/group-relocs-ldc-bad.d: New test.
	* ld-arm/group-relocs-ldc-bad.s: New test.
	* ld-arm/group-relocs-ldr-bad.d: New test.
	* ld-arm/group-relocs-ldr-bad.s: New test.
	* ld-arm/group-relocs-ldrs-bad.d: New test.
	* ld-arm/group-relocs-ldrs-bad.s: New test.
	* ld-arm/group-relocs.s: New test.
	* ld-arm/arm-elf.exp: Wire in new tests.
@
text
@@

