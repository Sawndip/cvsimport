head	1.7;
access;
symbols
	binutils-2_24-branch:1.7.0.12
	binutils-2_24-branchpoint:1.7
	binutils-2_21_1:1.7
	binutils-2_23_2:1.7
	binutils-2_23_1:1.7
	binutils-2_23:1.7
	binutils-2_23-branch:1.7.0.10
	binutils-2_23-branchpoint:1.7
	binutils-2_22_branch:1.7.0.8
	binutils-2_22:1.7
	binutils-2_22-branch:1.7.0.6
	binutils-2_22-branchpoint:1.7
	binutils-2_21:1.7
	binutils-2_21-branch:1.7.0.4
	binutils-2_21-branchpoint:1.7
	binutils-2_20_1:1.7
	binutils-2_20:1.7
	binutils-arc-20081103-branch:1.5.0.8
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.7.0.2
	binutils-2_20-branchpoint:1.7
	dje-cgen-play1-branch:1.6.0.2
	dje-cgen-play1-branchpoint:1.6
	arc-20081103-branch:1.5.0.6
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.4
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.5
	binutils-2_18-branch:1.5.0.2
	binutils-2_18-branchpoint:1.5
	binutils-csl-coldfire-4_1-32:1.4.14.1
	binutils-csl-sourcerygxx-4_1-32:1.4.14.1
	binutils-csl-innovasic-fido-3_4_4-33:1.4.14.1
	binutils-csl-sourcerygxx-3_4_4-32:1.4
	binutils-csl-coldfire-4_1-30:1.4.14.1
	binutils-csl-sourcerygxx-4_1-30:1.4.14.1
	binutils-csl-coldfire-4_1-28:1.4.14.1
	binutils-csl-sourcerygxx-4_1-29:1.4.14.1
	binutils-csl-sourcerygxx-4_1-28:1.4.14.1
	binutils-csl-arm-2006q3-27:1.4.14.1
	binutils-csl-sourcerygxx-4_1-27:1.4.14.1
	binutils-csl-arm-2006q3-26:1.4.14.1
	binutils-csl-sourcerygxx-4_1-26:1.4.14.1
	binutils-csl-sourcerygxx-4_1-25:1.4.14.1
	binutils-csl-sourcerygxx-4_1-24:1.4.14.1
	binutils-csl-sourcerygxx-4_1-23:1.4.14.1
	binutils-csl-sourcerygxx-4_1-21:1.4.14.1
	binutils-csl-arm-2006q3-21:1.4.14.1
	binutils-csl-sourcerygxx-4_1-22:1.4.14.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.4.14.1
	binutils-csl-sourcerygxx-4_1-20:1.4.14.1
	binutils-csl-arm-2006q3-19:1.4.14.1
	binutils-csl-sourcerygxx-4_1-19:1.4.14.1
	binutils-csl-sourcerygxx-4_1-18:1.4.14.1
	binutils-csl-renesas-4_1-9:1.4.14.1
	binutils-csl-sourcerygxx-3_4_4-25:1.4
	binutils-csl-renesas-4_1-8:1.4.14.1
	binutils-csl-renesas-4_1-7:1.4.14.1
	binutils-csl-renesas-4_1-6:1.4.14.1
	binutils-csl-sourcerygxx-4_1-17:1.4.14.1
	binutils-csl-sourcerygxx-4_1-14:1.4.14.1
	binutils-csl-sourcerygxx-4_1-15:1.4.14.1
	binutils-csl-sourcerygxx-4_1-13:1.4.14.1
	binutils-2_17:1.4
	binutils-csl-sourcerygxx-4_1-12:1.4.14.1
	binutils-csl-sourcerygxx-3_4_4-21:1.4.14.1
	binutils-csl-wrs-linux-3_4_4-24:1.4
	binutils-csl-wrs-linux-3_4_4-23:1.4
	binutils-csl-sourcerygxx-4_1-9:1.4.14.1
	binutils-csl-sourcerygxx-4_1-8:1.4.14.1
	binutils-csl-sourcerygxx-4_1-7:1.4.14.1
	binutils-csl-arm-2006q1-6:1.4.14.1
	binutils-csl-sourcerygxx-4_1-6:1.4.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.4
	binutils-csl-coldfire-4_1-11:1.4.14.1
	binutils-csl-sourcerygxx-3_4_4-19:1.4.14.1
	binutils-csl-coldfire-4_1-10:1.4.14.1
	binutils-csl-sourcerygxx-4_1-5:1.4.14.1
	binutils-csl-sourcerygxx-4_1-4:1.4.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.4
	binutils-csl-morpho-4_1-4:1.4.14.1
	binutils-csl-sourcerygxx-3_4_4-17:1.4.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.4
	binutils-2_17-branch:1.4.0.16
	binutils-2_17-branchpoint:1.4
	binutils-csl-2_17-branch:1.4.0.14
	binutils-csl-2_17-branchpoint:1.4
	binutils-csl-gxxpro-3_4-branch:1.4.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.4
	binutils-2_16_1:1.4
	binutils-csl-arm-2005q1b:1.4
	binutils-2_16:1.4
	binutils-csl-arm-2005q1a:1.4
	binutils-csl-arm-2005q1-branch:1.4.0.10
	binutils-csl-arm-2005q1-branchpoint:1.4
	binutils-2_16-branch:1.4.0.8
	binutils-2_16-branchpoint:1.4
	csl-arm-2004-q3d:1.4
	csl-arm-2004-q3:1.4
	binutils-2_15:1.4
	binutils-2_15-branchpoint:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	binutils-2_15-branch:1.4.0.6
	cagney_bfdfile-20040213-branch:1.4.0.4
	cagney_bfdfile-20040213-branchpoint:1.4
	cagney_bigcore-20040122-branch:1.4.0.2
	cagney_bigcore-20040122-branchpoint:1.4
	csl-arm-2003-q4:1.4
	binutils-2_14:1.3
	binutils-2_14-branch:1.3.0.2
	binutils-2_14-branchpoint:1.3
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.4
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.2
	binutils-2_12-branchpoint:1.2
	binutils_latest_snapshot:1.7;
locks; strict;
comment	@# @;


1.7
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.15.17.24.12;	author rearnsha;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.03.14.47.37;	author drow;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	2002.08.22.16.10.04;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.18.17.01.55;	author rearnsha;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.15.16.05.34;	author rearnsha;	state Exp;
branches;
next	;

1.4.14.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	;


desc
@@


1.7
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#name: VFP Double-precision instructions
#as: -mfpu=vfp

# Test the ARM VFP Double Precision instructions

.*: +file format .*arm.*

Disassembly of section .text:
0+000 <[^>]*> eeb40bc0 	(vcmpe\.f64|fcmped)	d0, d0
0+004 <[^>]*> eeb50bc0 	(vcmpe\.f64	d0, #0.0|fcmpezd	d0)
0+008 <[^>]*> eeb40b40 	(vcmp\.f64|fcmpd)	d0, d0
0+00c <[^>]*> eeb50b40 	(vcmp\.f64	d0, #0.0|fcmpzd	d0)
0+010 <[^>]*> eeb00bc0 	(vabs\.f64|fabsd)	d0, d0
0+014 <[^>]*> eeb00b40 	(vmov\.f64|fcpyd)	d0, d0
0+018 <[^>]*> eeb10b40 	(vneg\.f64|fnegd)	d0, d0
0+01c <[^>]*> eeb10bc0 	(vsqrt\.f64|fsqrtd)	d0, d0
0+020 <[^>]*> ee300b00 	(vadd\.f64|faddd)	d0, d0, d0
0+024 <[^>]*> ee800b00 	(vdiv\.f64|fdivd)	d0, d0, d0
0+028 <[^>]*> ee000b00 	(vmla\.f64|fmacd)	d0, d0, d0
0+02c <[^>]*> ee100b00 	(vnmls\.f64|fmscd)	d0, d0, d0
0+030 <[^>]*> ee200b00 	(vmul\.f64|fmuld)	d0, d0, d0
0+034 <[^>]*> ee000b40 	(vmls\.f64|fnmacd)	d0, d0, d0
0+038 <[^>]*> ee100b40 	(vnmla\.f64|fnmscd)	d0, d0, d0
0+03c <[^>]*> ee200b40 	(vnmul\.f64|fnmuld)	d0, d0, d0
0+040 <[^>]*> ee300b40 	(vsub\.f64|fsubd)	d0, d0, d0
0+044 <[^>]*> ed900b00 	vldr	d0, \[r0\]
0+048 <[^>]*> ed800b00 	vstr	d0, \[r0\]
0+04c <[^>]*> ec900b02 	vldmia	r0, {d0}
0+050 <[^>]*> ec900b02 	vldmia	r0, {d0}
0+054 <[^>]*> ecb00b02 	vldmia	r0!, {d0}
0+058 <[^>]*> ecb00b02 	vldmia	r0!, {d0}
0+05c <[^>]*> ed300b02 	vldmdb	r0!, {d0}
0+060 <[^>]*> ed300b02 	vldmdb	r0!, {d0}
0+064 <[^>]*> ec800b02 	vstmia	r0, {d0}
0+068 <[^>]*> ec800b02 	vstmia	r0, {d0}
0+06c <[^>]*> eca00b02 	vstmia	r0!, {d0}
0+070 <[^>]*> eca00b02 	vstmia	r0!, {d0}
0+074 <[^>]*> ed200b02 	vstmdb	r0!, {d0}
0+078 <[^>]*> ed200b02 	vstmdb	r0!, {d0}
0+07c <[^>]*> eeb80bc0 	(vcvt\.f64\.s32|fsitod)	d0, s0
0+080 <[^>]*> eeb80b40 	(vcvt\.f64\.u32|fuitod)	d0, s0
0+084 <[^>]*> eebd0b40 	(vcvtr\.s32\.f64|ftosid)	s0, d0
0+088 <[^>]*> eebd0bc0 	(vcvt\.s32\.f64|ftosizd)	s0, d0
0+08c <[^>]*> eebc0b40 	(vcvtr\.u32\.f64|ftouid)	s0, d0
0+090 <[^>]*> eebc0bc0 	(vcvt\.u32\.f64|ftouizd)	s0, d0
0+094 <[^>]*> eeb70ac0 	(vcvt\.f64\.f32|fcvtds)	d0, s0
0+098 <[^>]*> eeb70bc0 	(vcvt\.f32\.f64|fcvtsd)	s0, d0
0+09c <[^>]*> ee300b10 	vmov\.32	r0, d0\[1\]
0+0a0 <[^>]*> ee100b10 	vmov\.32	r0, d0\[0\]
0+0a4 <[^>]*> ee200b10 	vmov\.32	d0\[1\], r0
0+0a8 <[^>]*> ee000b10 	vmov\.32	d0\[0\], r0
0+0ac <[^>]*> eeb51b40 	(vcmp\.f64	d1, #0.0|fcmpzd	d1)
0+0b0 <[^>]*> eeb52b40 	(vcmp\.f64	d2, #0.0|fcmpzd	d2)
0+0b4 <[^>]*> eeb5fb40 	(vcmp\.f64	d15, #0.0|fcmpzd	d15)
0+0b8 <[^>]*> eeb40b41 	(vcmp\.f64|fcmpd)	d0, d1
0+0bc <[^>]*> eeb40b42 	(vcmp\.f64|fcmpd)	d0, d2
0+0c0 <[^>]*> eeb40b4f 	(vcmp\.f64|fcmpd)	d0, d15
0+0c4 <[^>]*> eeb41b40 	(vcmp\.f64|fcmpd)	d1, d0
0+0c8 <[^>]*> eeb42b40 	(vcmp\.f64|fcmpd)	d2, d0
0+0cc <[^>]*> eeb4fb40 	(vcmp\.f64|fcmpd)	d15, d0
0+0d0 <[^>]*> eeb45b4c 	(vcmp\.f64|fcmpd)	d5, d12
0+0d4 <[^>]*> eeb10b41 	(vneg\.f64|fnegd)	d0, d1
0+0d8 <[^>]*> eeb10b42 	(vneg\.f64|fnegd)	d0, d2
0+0dc <[^>]*> eeb10b4f 	(vneg\.f64|fnegd)	d0, d15
0+0e0 <[^>]*> eeb11b40 	(vneg\.f64|fnegd)	d1, d0
0+0e4 <[^>]*> eeb12b40 	(vneg\.f64|fnegd)	d2, d0
0+0e8 <[^>]*> eeb1fb40 	(vneg\.f64|fnegd)	d15, d0
0+0ec <[^>]*> eeb1cb45 	(vneg\.f64|fnegd)	d12, d5
0+0f0 <[^>]*> ee300b01 	(vadd\.f64|faddd)	d0, d0, d1
0+0f4 <[^>]*> ee300b02 	(vadd\.f64|faddd)	d0, d0, d2
0+0f8 <[^>]*> ee300b0f 	(vadd\.f64|faddd)	d0, d0, d15
0+0fc <[^>]*> ee310b00 	(vadd\.f64|faddd)	d0, d1, d0
0+100 <[^>]*> ee320b00 	(vadd\.f64|faddd)	d0, d2, d0
0+104 <[^>]*> ee3f0b00 	(vadd\.f64|faddd)	d0, d15, d0
0+108 <[^>]*> ee301b00 	(vadd\.f64|faddd)	d1, d0, d0
0+10c <[^>]*> ee302b00 	(vadd\.f64|faddd)	d2, d0, d0
0+110 <[^>]*> ee30fb00 	(vadd\.f64|faddd)	d15, d0, d0
0+114 <[^>]*> ee39cb05 	(vadd\.f64|faddd)	d12, d9, d5
0+118 <[^>]*> eeb70ae0 	(vcvt\.f64\.f32|fcvtds)	d0, s1
0+11c <[^>]*> eeb70ac1 	(vcvt\.f64\.f32|fcvtds)	d0, s2
0+120 <[^>]*> eeb70aef 	(vcvt\.f64\.f32|fcvtds)	d0, s31
0+124 <[^>]*> eeb71ac0 	(vcvt\.f64\.f32|fcvtds)	d1, s0
0+128 <[^>]*> eeb72ac0 	(vcvt\.f64\.f32|fcvtds)	d2, s0
0+12c <[^>]*> eeb7fac0 	(vcvt\.f64\.f32|fcvtds)	d15, s0
0+130 <[^>]*> eef70bc0 	(vcvt\.f32\.f64|fcvtsd)	s1, d0
0+134 <[^>]*> eeb71bc0 	(vcvt\.f32\.f64|fcvtsd)	s2, d0
0+138 <[^>]*> eef7fbc0 	(vcvt\.f32\.f64|fcvtsd)	s31, d0
0+13c <[^>]*> eeb70bc1 	(vcvt\.f32\.f64|fcvtsd)	s0, d1
0+140 <[^>]*> eeb70bc2 	(vcvt\.f32\.f64|fcvtsd)	s0, d2
0+144 <[^>]*> eeb70bcf 	(vcvt\.f32\.f64|fcvtsd)	s0, d15
0+148 <[^>]*> ee301b10 	vmov\.32	r1, d0\[1\]
0+14c <[^>]*> ee30eb10 	vmov\.32	lr, d0\[1\]
0+150 <[^>]*> ee310b10 	vmov\.32	r0, d1\[1\]
0+154 <[^>]*> ee320b10 	vmov\.32	r0, d2\[1\]
0+158 <[^>]*> ee3f0b10 	vmov\.32	r0, d15\[1\]
0+15c <[^>]*> ee101b10 	vmov\.32	r1, d0\[0\]
0+160 <[^>]*> ee10eb10 	vmov\.32	lr, d0\[0\]
0+164 <[^>]*> ee110b10 	vmov\.32	r0, d1\[0\]
0+168 <[^>]*> ee120b10 	vmov\.32	r0, d2\[0\]
0+16c <[^>]*> ee1f0b10 	vmov\.32	r0, d15\[0\]
0+170 <[^>]*> ee201b10 	vmov\.32	d0\[1\], r1
0+174 <[^>]*> ee20eb10 	vmov\.32	d0\[1\], lr
0+178 <[^>]*> ee210b10 	vmov\.32	d1\[1\], r0
0+17c <[^>]*> ee220b10 	vmov\.32	d2\[1\], r0
0+180 <[^>]*> ee2f0b10 	vmov\.32	d15\[1\], r0
0+184 <[^>]*> ee001b10 	vmov\.32	d0\[0\], r1
0+188 <[^>]*> ee00eb10 	vmov\.32	d0\[0\], lr
0+18c <[^>]*> ee010b10 	vmov\.32	d1\[0\], r0
0+190 <[^>]*> ee020b10 	vmov\.32	d2\[0\], r0
0+194 <[^>]*> ee0f0b10 	vmov\.32	d15\[0\], r0
0+198 <[^>]*> ed910b00 	vldr	d0, \[r1\]
0+19c <[^>]*> ed9e0b00 	vldr	d0, \[lr\]
0+1a0 <[^>]*> ed900b00 	vldr	d0, \[r0\]
0+1a4 <[^>]*> ed900bff 	vldr	d0, \[r0, #1020\].*
0+1a8 <[^>]*> ed100bff 	vldr	d0, \[r0, #-1020\].*
0+1ac <[^>]*> ed901b00 	vldr	d1, \[r0\]
0+1b0 <[^>]*> ed902b00 	vldr	d2, \[r0\]
0+1b4 <[^>]*> ed90fb00 	vldr	d15, \[r0\]
0+1b8 <[^>]*> ed8ccbc9 	vstr	d12, \[ip, #804\].*
0+1bc <[^>]*> ec901b02 	vldmia	r0, {d1}
0+1c0 <[^>]*> ec902b02 	vldmia	r0, {d2}
0+1c4 <[^>]*> ec90fb02 	vldmia	r0, {d15}
0+1c8 <[^>]*> ec900b04 	vldmia	r0, {d0-d1}
0+1cc <[^>]*> ec900b06 	vldmia	r0, {d0-d2}
0+1d0 <[^>]*> ec900b20 	vldmia	r0, {d0-d15}
0+1d4 <[^>]*> ec901b1e 	vldmia	r0, {d1-d15}
0+1d8 <[^>]*> ec902b1c 	vldmia	r0, {d2-d15}
0+1dc <[^>]*> ec90eb04 	vldmia	r0, {d14-d15}
0+1e0 <[^>]*> ec910b02 	vldmia	r1, {d0}
0+1e4 <[^>]*> ec9e0b02 	vldmia	lr, {d0}
0+1e8 <[^>]*> eeb50b40 	(vcmp\.f64	d0, #0.0|fcmpzd	d0)
0+1ec <[^>]*> eeb51b40 	(vcmp\.f64	d1, #0.0|fcmpzd	d1)
0+1f0 <[^>]*> eeb52b40 	(vcmp\.f64	d2, #0.0|fcmpzd	d2)
0+1f4 <[^>]*> eeb53b40 	(vcmp\.f64	d3, #0.0|fcmpzd	d3)
0+1f8 <[^>]*> eeb54b40 	(vcmp\.f64	d4, #0.0|fcmpzd	d4)
0+1fc <[^>]*> eeb55b40 	(vcmp\.f64	d5, #0.0|fcmpzd	d5)
0+200 <[^>]*> eeb56b40 	(vcmp\.f64	d6, #0.0|fcmpzd	d6)
0+204 <[^>]*> eeb57b40 	(vcmp\.f64	d7, #0.0|fcmpzd	d7)
0+208 <[^>]*> eeb58b40 	(vcmp\.f64	d8, #0.0|fcmpzd	d8)
0+20c <[^>]*> eeb59b40 	(vcmp\.f64	d9, #0.0|fcmpzd	d9)
0+210 <[^>]*> eeb5ab40 	(vcmp\.f64	d10, #0.0|fcmpzd	d10)
0+214 <[^>]*> eeb5bb40 	(vcmp\.f64	d11, #0.0|fcmpzd	d11)
0+218 <[^>]*> eeb5cb40 	(vcmp\.f64	d12, #0.0|fcmpzd	d12)
0+21c <[^>]*> eeb5db40 	(vcmp\.f64	d13, #0.0|fcmpzd	d13)
0+220 <[^>]*> eeb5eb40 	(vcmp\.f64	d14, #0.0|fcmpzd	d14)
0+224 <[^>]*> eeb5fb40 	(vcmp\.f64	d15, #0.0|fcmpzd	d15)
0+228 <[^>]*> 0eb41bcf 	(vcmpeeq\.f64|fcmpedeq)	d1, d15
0+22c <[^>]*> 0eb52bc0 	(vcmpeeq\.f64	d2, #0.0|fcmpezdeq	d2)
0+230 <[^>]*> 0eb43b4e 	(vcmpeq\.f64|fcmpdeq)	d3, d14
0+234 <[^>]*> 0eb54b40 	(vcmpeq\.f64	d4, #0.0|fcmpzdeq	d4)
0+238 <[^>]*> 0eb05bcd 	(vabseq\.f64|fabsdeq)	d5, d13
0+23c <[^>]*> 0eb06b4c 	(vmoveq\.f64|fcpydeq)	d6, d12
0+240 <[^>]*> 0eb17b4b 	(vnegeq\.f64|fnegdeq)	d7, d11
0+244 <[^>]*> 0eb18bca 	(vsqrteq\.f64|fsqrtdeq)	d8, d10
0+248 <[^>]*> 0e319b0f 	(vaddeq\.f64|fadddeq)	d9, d1, d15
0+24c <[^>]*> 0e832b0e 	(vdiveq\.f64|fdivdeq)	d2, d3, d14
0+250 <[^>]*> 0e0d4b0c 	(vmlaeq\.f64|fmacdeq)	d4, d13, d12
0+254 <[^>]*> 0e165b0b 	(vnmlseq\.f64|fmscdeq)	d5, d6, d11
0+258 <[^>]*> 0e2a7b09 	(vmuleq\.f64|fmuldeq)	d7, d10, d9
0+25c <[^>]*> 0e098b4a 	(vmlseq\.f64|fnmacdeq)	d8, d9, d10
0+260 <[^>]*> 0e167b4b 	(vnmlaeq\.f64|fnmscdeq)	d7, d6, d11
0+264 <[^>]*> 0e245b4c 	(vnmuleq\.f64|fnmuldeq)	d5, d4, d12
0+268 <[^>]*> 0e3d3b4e 	(vsubeq\.f64|fsubdeq)	d3, d13, d14
0+26c <[^>]*> 0d952b00 	vldreq	d2, \[r5\]
0+270 <[^>]*> 0d8c1b00 	vstreq	d1, \[ip\]
0+274 <[^>]*> 0c911b02 	vldmiaeq	r1, {d1}
0+278 <[^>]*> 0c922b02 	vldmiaeq	r2, {d2}
0+27c <[^>]*> 0cb33b02 	vldmiaeq	r3!, {d3}
0+280 <[^>]*> 0cb44b02 	vldmiaeq	r4!, {d4}
0+284 <[^>]*> 0d355b02 	vldmdbeq	r5!, {d5}
0+288 <[^>]*> 0d366b02 	vldmdbeq	r6!, {d6}
0+28c <[^>]*> 0c87fb02 	vstmiaeq	r7, {d15}
0+290 <[^>]*> 0c88eb02 	vstmiaeq	r8, {d14}
0+294 <[^>]*> 0ca9db02 	vstmiaeq	r9!, {d13}
0+298 <[^>]*> 0caacb02 	vstmiaeq	sl!, {d12}
0+29c <[^>]*> 0d2bbb02 	vstmdbeq	fp!, {d11}
0+2a0 <[^>]*> 0d2cab02 	vstmdbeq	ip!, {d10}
0+2a4 <[^>]*> 0eb8fbe0 	(vcvteq\.f64\.s32|fsitodeq)	d15, s1
0+2a8 <[^>]*> 0eb81b6f 	(vcvteq\.f64\.u32|fuitodeq)	d1, s31
0+2ac <[^>]*> 0efd0b4f 	(vcvtreq\.s32\.f64|ftosideq)	s1, d15
0+2b0 <[^>]*> 0efdfbc2 	(vcvteq\.s32\.f64|ftosizdeq)	s31, d2
0+2b4 <[^>]*> 0efc7b42 	(vcvtreq\.u32\.f64|ftouideq)	s15, d2
0+2b8 <[^>]*> 0efc5bc3 	(vcvteq\.u32\.f64|ftouizdeq)	s11, d3
0+2bc <[^>]*> 0eb71ac5 	(vcvteq\.f64\.f32|fcvtdseq)	d1, s10
0+2c0 <[^>]*> 0ef75bc1 	(vcvteq\.f32\.f64|fcvtsdeq)	s11, d1
0+2c4 <[^>]*> 0e318b10 	vmoveq\.32	r8, d1\[1\]
0+2c8 <[^>]*> 0e1f7b10 	vmoveq\.32	r7, d15\[0\]
0+2cc <[^>]*> 0e21fb10 	vmoveq\.32	d1\[1\], pc
0+2d0 <[^>]*> 0e0f1b10 	vmoveq\.32	d15\[0\], r1
0+2d4 <[^>]*> e1a00000 ?	nop[ 	]+; \(mov r0, r0\)
0+2d8 <[^>]*> e1a00000 ?	nop[ 	]+; \(mov r0, r0\)
0+2dc <[^>]*> e1a00000 ?	nop[ 	]+; \(mov r0, r0\)
@


1.6
log
@opcodes:
	* arm-dis.c (coprocessor_opcodes): Disassemble VFP instructions using
	unified syntax.
gas/testsuite:
	* gas/arm/group-reloc-ldc.d: Disassembly of VFP instructions now uses
	unified syntax.
	* gas/arm/vfp-non-overlap.d: Likewise.
	* gas/arm/vfp-neon-syntax.d: Likewise.
	* gas/arm/vfp-neon-syntax_t2.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
	* gas/arm/vfpv3-const-conv.d: Likewise.
ld/testsuite:
	* ld-arm/vfp11-fix-scalar.d: Disassembly of VFP instructions now uses
	unified syntax.
	* ld-arm/vfp11-fix-vector.d: Likewise.
@
text
@d115 2
a116 2
0+1a4 <[^>]*> ed900bff 	vldr	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed100bff 	vldr	d0, \[r0, #-1020\]
d120 1
a120 1
0+1b8 <[^>]*> ed8ccbc9 	vstr	d12, \[ip, #804\]
d191 3
a193 3
0+2d4 <[^>]*> e1a00000 ?	nop[ 	]+\(mov r0,r0\)
0+2d8 <[^>]*> e1a00000 ?	nop[ 	]+\(mov r0,r0\)
0+2dc <[^>]*> e1a00000 ?	nop[ 	]+\(mov r0,r0\)
@


1.5
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@d10 17
a26 17
0+000 <[^>]*> eeb40bc0 	fcmped	d0, d0
0+004 <[^>]*> eeb50bc0 	fcmpezd	d0
0+008 <[^>]*> eeb40b40 	fcmpd	d0, d0
0+00c <[^>]*> eeb50b40 	fcmpzd	d0
0+010 <[^>]*> eeb00bc0 	fabsd	d0, d0
0+014 <[^>]*> eeb00b40 	fcpyd	d0, d0
0+018 <[^>]*> eeb10b40 	fnegd	d0, d0
0+01c <[^>]*> eeb10bc0 	fsqrtd	d0, d0
0+020 <[^>]*> ee300b00 	faddd	d0, d0, d0
0+024 <[^>]*> ee800b00 	fdivd	d0, d0, d0
0+028 <[^>]*> ee000b00 	fmacd	d0, d0, d0
0+02c <[^>]*> ee100b00 	fmscd	d0, d0, d0
0+030 <[^>]*> ee200b00 	fmuld	d0, d0, d0
0+034 <[^>]*> ee000b40 	fnmacd	d0, d0, d0
0+038 <[^>]*> ee100b40 	fnmscd	d0, d0, d0
0+03c <[^>]*> ee200b40 	fnmuld	d0, d0, d0
0+040 <[^>]*> ee300b40 	fsubd	d0, d0, d0
d41 8
a48 8
0+07c <[^>]*> eeb80bc0 	fsitod	d0, s0
0+080 <[^>]*> eeb80b40 	fuitod	d0, s0
0+084 <[^>]*> eebd0b40 	ftosid	s0, d0
0+088 <[^>]*> eebd0bc0 	ftosizd	s0, d0
0+08c <[^>]*> eebc0b40 	ftouid	s0, d0
0+090 <[^>]*> eebc0bc0 	ftouizd	s0, d0
0+094 <[^>]*> eeb70ac0 	fcvtds	d0, s0
0+098 <[^>]*> eeb70bc0 	fcvtsd	s0, d0
d53 39
a91 39
0+0ac <[^>]*> eeb51b40 	fcmpzd	d1
0+0b0 <[^>]*> eeb52b40 	fcmpzd	d2
0+0b4 <[^>]*> eeb5fb40 	fcmpzd	d15
0+0b8 <[^>]*> eeb40b41 	fcmpd	d0, d1
0+0bc <[^>]*> eeb40b42 	fcmpd	d0, d2
0+0c0 <[^>]*> eeb40b4f 	fcmpd	d0, d15
0+0c4 <[^>]*> eeb41b40 	fcmpd	d1, d0
0+0c8 <[^>]*> eeb42b40 	fcmpd	d2, d0
0+0cc <[^>]*> eeb4fb40 	fcmpd	d15, d0
0+0d0 <[^>]*> eeb45b4c 	fcmpd	d5, d12
0+0d4 <[^>]*> eeb10b41 	fnegd	d0, d1
0+0d8 <[^>]*> eeb10b42 	fnegd	d0, d2
0+0dc <[^>]*> eeb10b4f 	fnegd	d0, d15
0+0e0 <[^>]*> eeb11b40 	fnegd	d1, d0
0+0e4 <[^>]*> eeb12b40 	fnegd	d2, d0
0+0e8 <[^>]*> eeb1fb40 	fnegd	d15, d0
0+0ec <[^>]*> eeb1cb45 	fnegd	d12, d5
0+0f0 <[^>]*> ee300b01 	faddd	d0, d0, d1
0+0f4 <[^>]*> ee300b02 	faddd	d0, d0, d2
0+0f8 <[^>]*> ee300b0f 	faddd	d0, d0, d15
0+0fc <[^>]*> ee310b00 	faddd	d0, d1, d0
0+100 <[^>]*> ee320b00 	faddd	d0, d2, d0
0+104 <[^>]*> ee3f0b00 	faddd	d0, d15, d0
0+108 <[^>]*> ee301b00 	faddd	d1, d0, d0
0+10c <[^>]*> ee302b00 	faddd	d2, d0, d0
0+110 <[^>]*> ee30fb00 	faddd	d15, d0, d0
0+114 <[^>]*> ee39cb05 	faddd	d12, d9, d5
0+118 <[^>]*> eeb70ae0 	fcvtds	d0, s1
0+11c <[^>]*> eeb70ac1 	fcvtds	d0, s2
0+120 <[^>]*> eeb70aef 	fcvtds	d0, s31
0+124 <[^>]*> eeb71ac0 	fcvtds	d1, s0
0+128 <[^>]*> eeb72ac0 	fcvtds	d2, s0
0+12c <[^>]*> eeb7fac0 	fcvtds	d15, s0
0+130 <[^>]*> eef70bc0 	fcvtsd	s1, d0
0+134 <[^>]*> eeb71bc0 	fcvtsd	s2, d0
0+138 <[^>]*> eef7fbc0 	fcvtsd	s31, d0
0+13c <[^>]*> eeb70bc1 	fcvtsd	s0, d1
0+140 <[^>]*> eeb70bc2 	fcvtsd	s0, d2
0+144 <[^>]*> eeb70bcf 	fcvtsd	s0, d15
d132 33
a164 33
0+1e8 <[^>]*> eeb50b40 	fcmpzd	d0
0+1ec <[^>]*> eeb51b40 	fcmpzd	d1
0+1f0 <[^>]*> eeb52b40 	fcmpzd	d2
0+1f4 <[^>]*> eeb53b40 	fcmpzd	d3
0+1f8 <[^>]*> eeb54b40 	fcmpzd	d4
0+1fc <[^>]*> eeb55b40 	fcmpzd	d5
0+200 <[^>]*> eeb56b40 	fcmpzd	d6
0+204 <[^>]*> eeb57b40 	fcmpzd	d7
0+208 <[^>]*> eeb58b40 	fcmpzd	d8
0+20c <[^>]*> eeb59b40 	fcmpzd	d9
0+210 <[^>]*> eeb5ab40 	fcmpzd	d10
0+214 <[^>]*> eeb5bb40 	fcmpzd	d11
0+218 <[^>]*> eeb5cb40 	fcmpzd	d12
0+21c <[^>]*> eeb5db40 	fcmpzd	d13
0+220 <[^>]*> eeb5eb40 	fcmpzd	d14
0+224 <[^>]*> eeb5fb40 	fcmpzd	d15
0+228 <[^>]*> 0eb41bcf 	fcmpedeq	d1, d15
0+22c <[^>]*> 0eb52bc0 	fcmpezdeq	d2
0+230 <[^>]*> 0eb43b4e 	fcmpdeq	d3, d14
0+234 <[^>]*> 0eb54b40 	fcmpzdeq	d4
0+238 <[^>]*> 0eb05bcd 	fabsdeq	d5, d13
0+23c <[^>]*> 0eb06b4c 	fcpydeq	d6, d12
0+240 <[^>]*> 0eb17b4b 	fnegdeq	d7, d11
0+244 <[^>]*> 0eb18bca 	fsqrtdeq	d8, d10
0+248 <[^>]*> 0e319b0f 	fadddeq	d9, d1, d15
0+24c <[^>]*> 0e832b0e 	fdivdeq	d2, d3, d14
0+250 <[^>]*> 0e0d4b0c 	fmacdeq	d4, d13, d12
0+254 <[^>]*> 0e165b0b 	fmscdeq	d5, d6, d11
0+258 <[^>]*> 0e2a7b09 	fmuldeq	d7, d10, d9
0+25c <[^>]*> 0e098b4a 	fnmacdeq	d8, d9, d10
0+260 <[^>]*> 0e167b4b 	fnmscdeq	d7, d6, d11
0+264 <[^>]*> 0e245b4c 	fnmuldeq	d5, d4, d12
0+268 <[^>]*> 0e3d3b4e 	fsubdeq	d3, d13, d14
d179 8
a186 8
0+2a4 <[^>]*> 0eb8fbe0 	fsitodeq	d15, s1
0+2a8 <[^>]*> 0eb81b6f 	fuitodeq	d1, s31
0+2ac <[^>]*> 0efd0b4f 	ftosideq	s1, d15
0+2b0 <[^>]*> 0efdfbc2 	ftosizdeq	s31, d2
0+2b4 <[^>]*> 0efc7b42 	ftouideq	s15, d2
0+2b8 <[^>]*> 0efc5bc3 	ftouizdeq	s11, d3
0+2bc <[^>]*> 0eb71ac5 	fcvtdseq	d1, s10
0+2c0 <[^>]*> 0ef75bc1 	fcvtsdeq	s11, d1
@


1.4
log
@	* gas/arm/arm7t.d: Replace '-#' with '#-'.
	* gas/arm/copro.d: Likewise.
	* gas/arm/fpa-mem.d: Likewise.
	* gas/arm/maverick.c: Likewise.
	* gas/arm/maverick.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/xscale.d: Likewise.
@
text
@d27 14
a40 14
0+044 <[^>]*> ed900b00 	fldd	d0, \[r0\]
0+048 <[^>]*> ed800b00 	fstd	d0, \[r0\]
0+04c <[^>]*> ec900b02 	fldmiad	r0, {d0}
0+050 <[^>]*> ec900b02 	fldmiad	r0, {d0}
0+054 <[^>]*> ecb00b02 	fldmiad	r0!, {d0}
0+058 <[^>]*> ecb00b02 	fldmiad	r0!, {d0}
0+05c <[^>]*> ed300b02 	fldmdbd	r0!, {d0}
0+060 <[^>]*> ed300b02 	fldmdbd	r0!, {d0}
0+064 <[^>]*> ec800b02 	fstmiad	r0, {d0}
0+068 <[^>]*> ec800b02 	fstmiad	r0, {d0}
0+06c <[^>]*> eca00b02 	fstmiad	r0!, {d0}
0+070 <[^>]*> eca00b02 	fstmiad	r0!, {d0}
0+074 <[^>]*> ed200b02 	fstmdbd	r0!, {d0}
0+078 <[^>]*> ed200b02 	fstmdbd	r0!, {d0}
d49 4
a52 4
0+09c <[^>]*> ee300b10 	fmrdh	r0, d0
0+0a0 <[^>]*> ee100b10 	fmrdl	r0, d0
0+0a4 <[^>]*> ee200b10 	fmdhr	d0, r0
0+0a8 <[^>]*> ee000b10 	fmdlr	d0, r0
d92 40
a131 40
0+148 <[^>]*> ee301b10 	fmrdh	r1, d0
0+14c <[^>]*> ee30eb10 	fmrdh	lr, d0
0+150 <[^>]*> ee310b10 	fmrdh	r0, d1
0+154 <[^>]*> ee320b10 	fmrdh	r0, d2
0+158 <[^>]*> ee3f0b10 	fmrdh	r0, d15
0+15c <[^>]*> ee101b10 	fmrdl	r1, d0
0+160 <[^>]*> ee10eb10 	fmrdl	lr, d0
0+164 <[^>]*> ee110b10 	fmrdl	r0, d1
0+168 <[^>]*> ee120b10 	fmrdl	r0, d2
0+16c <[^>]*> ee1f0b10 	fmrdl	r0, d15
0+170 <[^>]*> ee201b10 	fmdhr	d0, r1
0+174 <[^>]*> ee20eb10 	fmdhr	d0, lr
0+178 <[^>]*> ee210b10 	fmdhr	d1, r0
0+17c <[^>]*> ee220b10 	fmdhr	d2, r0
0+180 <[^>]*> ee2f0b10 	fmdhr	d15, r0
0+184 <[^>]*> ee001b10 	fmdlr	d0, r1
0+188 <[^>]*> ee00eb10 	fmdlr	d0, lr
0+18c <[^>]*> ee010b10 	fmdlr	d1, r0
0+190 <[^>]*> ee020b10 	fmdlr	d2, r0
0+194 <[^>]*> ee0f0b10 	fmdlr	d15, r0
0+198 <[^>]*> ed910b00 	fldd	d0, \[r1\]
0+19c <[^>]*> ed9e0b00 	fldd	d0, \[lr\]
0+1a0 <[^>]*> ed900b00 	fldd	d0, \[r0\]
0+1a4 <[^>]*> ed900bff 	fldd	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed100bff 	fldd	d0, \[r0, #-1020\]
0+1ac <[^>]*> ed901b00 	fldd	d1, \[r0\]
0+1b0 <[^>]*> ed902b00 	fldd	d2, \[r0\]
0+1b4 <[^>]*> ed90fb00 	fldd	d15, \[r0\]
0+1b8 <[^>]*> ed8ccbc9 	fstd	d12, \[ip, #804\]
0+1bc <[^>]*> ec901b02 	fldmiad	r0, {d1}
0+1c0 <[^>]*> ec902b02 	fldmiad	r0, {d2}
0+1c4 <[^>]*> ec90fb02 	fldmiad	r0, {d15}
0+1c8 <[^>]*> ec900b04 	fldmiad	r0, {d0-d1}
0+1cc <[^>]*> ec900b06 	fldmiad	r0, {d0-d2}
0+1d0 <[^>]*> ec900b20 	fldmiad	r0, {d0-d15}
0+1d4 <[^>]*> ec901b1e 	fldmiad	r0, {d1-d15}
0+1d8 <[^>]*> ec902b1c 	fldmiad	r0, {d2-d15}
0+1dc <[^>]*> ec90eb04 	fldmiad	r0, {d14-d15}
0+1e0 <[^>]*> ec910b02 	fldmiad	r1, {d0}
0+1e4 <[^>]*> ec9e0b02 	fldmiad	lr, {d0}
d165 14
a178 14
0+26c <[^>]*> 0d952b00 	flddeq	d2, \[r5\]
0+270 <[^>]*> 0d8c1b00 	fstdeq	d1, \[ip\]
0+274 <[^>]*> 0c911b02 	fldmiadeq	r1, {d1}
0+278 <[^>]*> 0c922b02 	fldmiadeq	r2, {d2}
0+27c <[^>]*> 0cb33b02 	fldmiadeq	r3!, {d3}
0+280 <[^>]*> 0cb44b02 	fldmiadeq	r4!, {d4}
0+284 <[^>]*> 0d355b02 	fldmdbdeq	r5!, {d5}
0+288 <[^>]*> 0d366b02 	fldmdbdeq	r6!, {d6}
0+28c <[^>]*> 0c87fb02 	fstmiadeq	r7, {d15}
0+290 <[^>]*> 0c88eb02 	fstmiadeq	r8, {d14}
0+294 <[^>]*> 0ca9db02 	fstmiadeq	r9!, {d13}
0+298 <[^>]*> 0caacb02 	fstmiadeq	sl!, {d12}
0+29c <[^>]*> 0d2bbb02 	fstmdbdeq	fp!, {d11}
0+2a0 <[^>]*> 0d2cab02 	fstmdbdeq	ip!, {d10}
d187 4
a190 4
0+2c4 <[^>]*> 0e318b10 	fmrdheq	r8, d1
0+2c8 <[^>]*> 0e1f7b10 	fmrdleq	r7, d15
0+2cc <[^>]*> 0e21fb10 	fmdhreq	d1, pc
0+2d0 <[^>]*> 0e0f1b10 	fmdlreq	d15, r1
@


1.4.14.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@d27 14
a40 14
0+044 <[^>]*> ed900b00 	vldr	d0, \[r0\]
0+048 <[^>]*> ed800b00 	vstr	d0, \[r0\]
0+04c <[^>]*> ec900b02 	vldmia	r0, {d0}
0+050 <[^>]*> ec900b02 	vldmia	r0, {d0}
0+054 <[^>]*> ecb00b02 	vldmia	r0!, {d0}
0+058 <[^>]*> ecb00b02 	vldmia	r0!, {d0}
0+05c <[^>]*> ed300b02 	vldmdb	r0!, {d0}
0+060 <[^>]*> ed300b02 	vldmdb	r0!, {d0}
0+064 <[^>]*> ec800b02 	vstmia	r0, {d0}
0+068 <[^>]*> ec800b02 	vstmia	r0, {d0}
0+06c <[^>]*> eca00b02 	vstmia	r0!, {d0}
0+070 <[^>]*> eca00b02 	vstmia	r0!, {d0}
0+074 <[^>]*> ed200b02 	vstmdb	r0!, {d0}
0+078 <[^>]*> ed200b02 	vstmdb	r0!, {d0}
d49 4
a52 4
0+09c <[^>]*> ee300b10 	vmov\.32	r0, d0\[1\]
0+0a0 <[^>]*> ee100b10 	vmov\.32	r0, d0\[0\]
0+0a4 <[^>]*> ee200b10 	vmov\.32	d0\[1\], r0
0+0a8 <[^>]*> ee000b10 	vmov\.32	d0\[0\], r0
d92 40
a131 40
0+148 <[^>]*> ee301b10 	vmov\.32	r1, d0\[1\]
0+14c <[^>]*> ee30eb10 	vmov\.32	lr, d0\[1\]
0+150 <[^>]*> ee310b10 	vmov\.32	r0, d1\[1\]
0+154 <[^>]*> ee320b10 	vmov\.32	r0, d2\[1\]
0+158 <[^>]*> ee3f0b10 	vmov\.32	r0, d15\[1\]
0+15c <[^>]*> ee101b10 	vmov\.32	r1, d0\[0\]
0+160 <[^>]*> ee10eb10 	vmov\.32	lr, d0\[0\]
0+164 <[^>]*> ee110b10 	vmov\.32	r0, d1\[0\]
0+168 <[^>]*> ee120b10 	vmov\.32	r0, d2\[0\]
0+16c <[^>]*> ee1f0b10 	vmov\.32	r0, d15\[0\]
0+170 <[^>]*> ee201b10 	vmov\.32	d0\[1\], r1
0+174 <[^>]*> ee20eb10 	vmov\.32	d0\[1\], lr
0+178 <[^>]*> ee210b10 	vmov\.32	d1\[1\], r0
0+17c <[^>]*> ee220b10 	vmov\.32	d2\[1\], r0
0+180 <[^>]*> ee2f0b10 	vmov\.32	d15\[1\], r0
0+184 <[^>]*> ee001b10 	vmov\.32	d0\[0\], r1
0+188 <[^>]*> ee00eb10 	vmov\.32	d0\[0\], lr
0+18c <[^>]*> ee010b10 	vmov\.32	d1\[0\], r0
0+190 <[^>]*> ee020b10 	vmov\.32	d2\[0\], r0
0+194 <[^>]*> ee0f0b10 	vmov\.32	d15\[0\], r0
0+198 <[^>]*> ed910b00 	vldr	d0, \[r1\]
0+19c <[^>]*> ed9e0b00 	vldr	d0, \[lr\]
0+1a0 <[^>]*> ed900b00 	vldr	d0, \[r0\]
0+1a4 <[^>]*> ed900bff 	vldr	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed100bff 	vldr	d0, \[r0, #-1020\]
0+1ac <[^>]*> ed901b00 	vldr	d1, \[r0\]
0+1b0 <[^>]*> ed902b00 	vldr	d2, \[r0\]
0+1b4 <[^>]*> ed90fb00 	vldr	d15, \[r0\]
0+1b8 <[^>]*> ed8ccbc9 	vstr	d12, \[ip, #804\]
0+1bc <[^>]*> ec901b02 	vldmia	r0, {d1}
0+1c0 <[^>]*> ec902b02 	vldmia	r0, {d2}
0+1c4 <[^>]*> ec90fb02 	vldmia	r0, {d15}
0+1c8 <[^>]*> ec900b04 	vldmia	r0, {d0-d1}
0+1cc <[^>]*> ec900b06 	vldmia	r0, {d0-d2}
0+1d0 <[^>]*> ec900b20 	vldmia	r0, {d0-d15}
0+1d4 <[^>]*> ec901b1e 	vldmia	r0, {d1-d15}
0+1d8 <[^>]*> ec902b1c 	vldmia	r0, {d2-d15}
0+1dc <[^>]*> ec90eb04 	vldmia	r0, {d14-d15}
0+1e0 <[^>]*> ec910b02 	vldmia	r1, {d0}
0+1e4 <[^>]*> ec9e0b02 	vldmia	lr, {d0}
d165 14
a178 14
0+26c <[^>]*> 0d952b00 	vldreq	d2, \[r5\]
0+270 <[^>]*> 0d8c1b00 	vstreq	d1, \[ip\]
0+274 <[^>]*> 0c911b02 	vldmiaeq	r1, {d1}
0+278 <[^>]*> 0c922b02 	vldmiaeq	r2, {d2}
0+27c <[^>]*> 0cb33b02 	vldmiaeq	r3!, {d3}
0+280 <[^>]*> 0cb44b02 	vldmiaeq	r4!, {d4}
0+284 <[^>]*> 0d355b02 	vldmdbeq	r5!, {d5}
0+288 <[^>]*> 0d366b02 	vldmdbeq	r6!, {d6}
0+28c <[^>]*> 0c87fb02 	vstmiaeq	r7, {d15}
0+290 <[^>]*> 0c88eb02 	vstmiaeq	r8, {d14}
0+294 <[^>]*> 0ca9db02 	vstmiaeq	r9!, {d13}
0+298 <[^>]*> 0caacb02 	vstmiaeq	sl!, {d12}
0+29c <[^>]*> 0d2bbb02 	vstmdbeq	fp!, {d11}
0+2a0 <[^>]*> 0d2cab02 	vstmdbeq	ip!, {d10}
d187 4
a190 4
0+2c4 <[^>]*> 0e318b10 	vmoveq\.32	r8, d1\[1\]
0+2c8 <[^>]*> 0e1f7b10 	vmoveq\.32	r7, d15\[0\]
0+2cc <[^>]*> 0e21fb10 	vmoveq\.32	d1\[1\], pc
0+2d0 <[^>]*> 0e0f1b10 	vmoveq\.32	d15\[0\], r1
@


1.3
log
@Fix arm-aout failures
@
text
@d116 1
a116 1
0+1a8 <[^>]*> ed100bff 	fldd	d0, \[r0, -#1020\]
@


1.2
log
@* NEWS: Mention new ARM command-line options and VFP support.

* config/tc-arm.c (ARM_CEXT_XSCALE): Replaces ARM_EXT_XSCALE.  All
uses changed.
(ARM_CEXT_MAVERICK): Similarly.
(ARM_ANY): Now means any core instruction.
(CPU_DEFAULT): Default to ARM_ANY.
(uses_apcs_26, atcps, support_interwork, uses_apcs_float)
(pic_code): Declare for all object types.  Make type int.
(legacy_cpu, legacy_fpu, mcpu_cpu_opt, mcpu_fpu_opt, march_cpu_opt)
(march_fpu_opt, mfpu_opt): Declare.
(md_longopts): Tidy up conditional definitions.
(arm_opts, arm_cpus, arm_archs, arm_fpus, arm_extensions)
(arm_long_opts): New tables.
(arm_parse_cpu, arm_parse_arch, arm_parse_fpu): New functions.
(arm_parse_extension): New function.
(md_parse_option): Rewrite using new table-driven system.
(md_show_usage): Use new table-driven system.
(md_begin): Calculate cpu_variant from command line option data.
* doc/as.texinfo (ARM ISA options): Docuement new ARM-specific
command-line options.
* doc/c-arm.texi: Likewise.

Testsuite:
* gas/arm/vfp1.d: Use new command-line options.
* gas/arm/vfp1xD.d: Likewise.
* gas/arm/arm.exp (vfp-bad): Likewise.
* gas/arm/maverick.d: Likewise.
@
text
@d191 3
@


1.1
log
@Support for VFP instructions
* tc-arm.c (CP_WB_OK, CP_NO_WB): New defines.
(cp_address_required_here): New argument wb_ok.  When false, do not
accept write-back forms of addressing.  Change all callers.
(FPU_VFP_EXT_NONE, FPU_VFP_EXT_V1xD, FPU_VFP_VFP_V1)
(FPU_VFP_EXT_V2): Define.
(FPU_ARCH_VFP, FPU_ARCH_VFP_V1xD, FPU_ARCH_VFP_V1, FPU_ARCH_VFP_V2):
Define in terms of above.
(vfp_dp_reg_pos, vfp_sp_reg_pos, vfp_ldstm_type): New enums.
(vfp_reg): New struct.
(vfp_regs): New array of registers.
(insns): Add VFP instructions.
(sn_table): New array of VFP single-precision register names.
(dn_table): New array of VFP double-precision register names.
(all_reg_maps): Add the new register tables.
(arm_reg_type): Add new values for above.  Increase RET_TYPE_MAX.
(vfp_sp_reg_required_here, vfp_dp_reg_required_here, do_vfp_sp_monadic)
(do_vfp_dp_monadic, do_vfp_sp_dyadic, do_vfp_dp_dyadic)
(do_vfp_reg_from_sp, do_vfp_sp_reg2, do_vfp_sp_from_reg)
(do_vfp_reg_from_dp, do_vfp_reg2_from_dp, do_vfp_dp_from_reg)
(do_vfp_dp_from_reg2, vfp_psr_parse, vfp_psr_required_here)
(do_vfp_reg_from_ctrl, do_vfp_ctrl_from_reg, do_vfp_sp_ldst)
(do_vfp_dp_ldst, vfp_sp_reg_list, vfp_dp_reg_list, vfp_sp_ldstm)
(vfp_dp_ldstm, do_vfp_sp_ldstmia, do_vfp_sp_ldstmdb, do_vfp_ldstmia)
(do_vfp_dp_ldstmdb, do_vfp_xp_ldstmia, do_vfp_xp_ldstmdb)
(do_vfp_sp_compare_z, do_vfp_dp_compare_z, do_vfp_dp_sp_cvt)
(do_vfp_sp_dp_cvt): New functions.
(md_begin): Set soft-float flag for appropriate VFP work.
(md_atof): Handle VFP-format doubles.
(md_parse_option): Handle VFP command-line options.
(md_show_usage): Display VFP command-line options.

* testsuite/gas/arm/vfp1.s gas/arm/vf1.d: New files.
* testsuite/gas/arm/vfp1xD.s gas/arm/vf1xD.d: New files.
* testsuite/gas/arm/vfp-bad.s gas/arm/vfp-bad.l: New files.
* testsuite/gas/arm/arm.exp: Run new VFP tests.
@
text
@d3 1
a3 1
#as: -mvfp
@

