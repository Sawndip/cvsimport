head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.4
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.2
	binutils-2_23-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.03.13.16.59.57;	author roland;	state Exp;
branches;
next	;


desc
@@


1.1
log
@gas/
2012-03-12  Roland McGrath  <mcgrathr@@google.com>

	* config/tc-arm.c (arm_frag_max_var): New function.
	* config/tc-arm.h: Declare it.
	(md_frag_max_var): New macro.

	* config/tc-i386.c (i386_frag_max_var): New function.
	* config/tc-i386.h: Declare it.
	(md_frag_max_var): New macro.

	* doc/as.texinfo (Bundle directives): New node.
	(Pseudo Ops): Add it to the menu.
	* NEWS: Mention new feature.
	* read.c [md_frag_max_var] (HANDLE_BUNDLE): New macro.
	[HANDLE_BUNDLE] (bundle_align_p2): New variable.
	[HANDLE_BUNDLE] (bundle_lock_frchain, bundle_lock_frag): New variables.
	[HANDLE_BUNDLE] (start_bundle, pending_bundle_size, finish_bundle):
	New functions.
	(assemble_one): New function if [HANDLE_BUNDLE], #define directly
	to md_assembly if not.
	(read_a_source_file): Call assemble_one in place of md_assemble.
	(read_a_source_file) [HANDLE_BUNDLE]: Check for unterminated
	.bundle_lock at end of processing.
	[HANDLE_BUNDLE] (s_bundle_align_mode, s_bundle_lock, s_bundle_unlock):
	New functions.
	[HANDLE_BUNDLE] (potable): Add their entries.
	* read.h: Declare new functions.

gas/testsuite/
2012-03-12  Roland McGrath  <mcgrathr@@google.com>

	* gas/i386/bundle-bad.s: New file.
	* gas/i386/bundle-bad.d: New file.
	* gas/i386/bundle-bad.l: New file.
	* gas/i386/i386.exp: Run it.

	* gas/arm/bundle.s: New file.
	* gas/arm/bundle.d: New file.
	* gas/arm/bundle-lock.s: New file.
	* gas/arm/bundle-lock.d: New file.

	* gas/i386/bundle.s: New file.
	* gas/i386/bundle.d: New file.
	* gas/i386/x86-64-bundle.s: New file.
	* gas/i386/x86-64-bundle.d: New file.
	* gas/i386/bundle-lock.s: New file.
	* gas/i386/bundle-lock.d: New file.
	* gas/i386/i386.exp: Run them.
@
text
@	.syntax unified
	.bundle_align_mode 4

# We use these macros to test each pattern at every offset from
# bundle alignment, i.e. [0,16) by 2 or 4.

	size_arm = 4
	size_thumb = 2

.macro offset_sequence which, size, offset
	.p2align 4
\which\()_sequence_\size\()_offset_\offset\():
	.rept \offset / size_\which
	bkpt
	.endr
	test_sequence \size
.endm

.macro test_offsets_arm size
	.arm
	offset_sequence arm, \size, 0
	offset_sequence arm, \size, 4
	offset_sequence arm, \size, 8
	offset_sequence arm, \size, 12
.endm

.macro test_offsets_thumb size
	.thumb
	offset_sequence thumb, \size, 0
	offset_sequence thumb, \size, 2
	offset_sequence thumb, \size, 4
	offset_sequence thumb, \size, 6
	offset_sequence thumb, \size, 8
	offset_sequence thumb, \size, 10
	offset_sequence thumb, \size, 12
	offset_sequence thumb, \size, 14
.endm

.macro test_sequence size
	.bundle_lock
	adds r0, r1
	.rept \size - 1
	subs r0, r1
	.endr
	.bundle_unlock
.endm

	test_offsets_arm 1
	test_offsets_arm 2
	test_offsets_arm 3
	test_offsets_arm 4

	test_offsets_thumb 1
	test_offsets_thumb 2
	test_offsets_thumb 3
	test_offsets_thumb 4
	test_offsets_thumb 5
	test_offsets_thumb 6
	test_offsets_thumb 7
	test_offsets_thumb 8

	.arm
.p2align 4
	bkpt
@
