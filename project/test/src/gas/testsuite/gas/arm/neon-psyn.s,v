head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.22
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.20
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.18
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.16
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.14
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.12
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.10
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.8
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.6
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.4
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.2
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.1.2.1
	binutils-csl-sourcerygxx-4_1-32:1.1.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.1
	binutils-csl-coldfire-4_1-30:1.1.2.1
	binutils-csl-sourcerygxx-4_1-30:1.1.2.1
	binutils-csl-coldfire-4_1-28:1.1.2.1
	binutils-csl-sourcerygxx-4_1-29:1.1.2.1
	binutils-csl-sourcerygxx-4_1-28:1.1.2.1
	binutils-csl-arm-2006q3-27:1.1.2.1
	binutils-csl-sourcerygxx-4_1-27:1.1.2.1
	binutils-csl-arm-2006q3-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-26:1.1.2.1
	binutils-csl-sourcerygxx-4_1-25:1.1.2.1
	binutils-csl-sourcerygxx-4_1-24:1.1.2.1
	binutils-csl-sourcerygxx-4_1-23:1.1.2.1
	binutils-csl-sourcerygxx-4_1-21:1.1.2.1
	binutils-csl-arm-2006q3-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-22:1.1.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.1
	binutils-csl-sourcerygxx-4_1-20:1.1.2.1
	binutils-csl-arm-2006q3-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-19:1.1.2.1
	binutils-csl-sourcerygxx-4_1-18:1.1.2.1
	binutils-csl-renesas-4_1-9:1.1.2.1
	binutils-csl-renesas-4_1-8:1.1.2.1
	binutils-csl-renesas-4_1-7:1.1.2.1
	binutils-csl-renesas-4_1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-17:1.1.2.1
	binutils-csl-sourcerygxx-4_1-14:1.1.2.1
	binutils-csl-sourcerygxx-4_1-15:1.1.2.1
	binutils-csl-sourcerygxx-4_1-13:1.1.2.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-9:1.1.2.1
	binutils-csl-sourcerygxx-4_1-8:1.1.2.1
	binutils-csl-sourcerygxx-4_1-7:1.1.2.1
	binutils-csl-arm-2006q1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-6:1.1.2.1
	binutils-csl-coldfire-4_1-11:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.1
	binutils-csl-coldfire-4_1-10:1.1.2.1
	binutils-csl-sourcerygxx-4_1-5:1.1.2.1
	binutils-csl-sourcerygxx-4_1-4:1.1.2.1
	binutils-csl-morpho-4_1-4:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.2.1
	binutils_latest_snapshot:1.2
	binutils-csl-2_17-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2006.04.26.15.55.17;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.07.15.46.21;	author jules;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.07.15.46.21;	author jules;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* gas/arm/neon-psyn.s: Basic test of programmers syntax.
	* gas/arm/neon-psyn.d: Expected output of above.
@
text
@	.arm
	.syntax unified

fish	.qn	q2
cow	.dn	d2[1]
chips	.dn	d2
banana	.dn	d3

	vmul fish.s16, fish.s16, fish.s16

	vmul banana, banana, cow.s32
	vmul d3.s32, d3.s32, d2.s32
	vadd d2.s32, d3.s32
	vmull fish.u32, chips.u16, chips.u16[1]

X	.dn D0.S16
Y	.dn D1.S16
Z 	.dn Y[2]

	VMLA X, Y, Z
	VMLA X, Y, Y[2]

foo	.dn d5
bar	.dn d7
foos	.dn foo[1]

	vadd foo, foo, foo.u32

	vmov foo, bar
	vmov d2.s16[1], r1
	vmov d5.s32[1], r1
	vmov foo, r2, r3
	vmov r4, foos.s8
	vmov r5, r6, foo

baa	.qn	q5
moo	.dn	d6
sheep	.dn	d7
chicken	.dn	d8

	vabal baa, moo.u16, sheep.u16

	vcvt q1.s32, q2.f32
	vcvt d4.f, d5.u32, #5

	vdup bar, foos.32
	vtbl d1, {baa}, d4.8

el1	.dn	d4.16[1]
el2	.dn	d6.16[1]
el3	.dn	d8.16[1]
el4	.dn	d10.16[1]

	vld2 {moo.32[1], sheep.32[1]}, [r10]
	vld4 {el1, el2, el3, el4}, [r10]
	vld3 {moo.16[], sheep.16[], chicken.16[]}, [r10]

	vmov r0,d0.s16[0]

el5	.qn	q3.16
el6	.qn	q4.16

	vld4 {el5,el6}, [r10]

	vld3 {d2.s16[1], d4.s16[1], d6.s16[1]}, [r10]

chicken8	.dn	chicken.8

	vtbl d7.8, {d4, d5}, chicken8

	vbsl q1.8, q2.16, q3.8

	vcge d2.32, d3.f, d4.f
	vcge d2.16, d3.s16, #0

dupme	.dn	d2.s16

	vdup dupme, r3
@


1.1
log
@file neon-psyn.s was initially added on branch binutils-csl-2_17-branch.
@
text
@d1 78
@


1.1.2.1
log
@
	* gas/config/tc-arm.c (neon_el_type): Make NT_invtype be the zero (so
	zero-initialising structures containing it will lead to invalid
	types).
	(arm_it): Add vectype to each operand.
	(NTA_HASTYPE, NTA_HASINDEX): Constants used in neon_typed_alias
	defined field.
	(neon_typed_alias): New structure. Extra information for typed
	register aliases.
	(reg_entry): Add neon type info field.
	(arm_reg_parse): Remove RTYPE argument (revert to previous arguments).
	Break out alternative syntax for coprocessor registers, etc. into...
	(arm_reg_alt_syntax): New function. Alternate syntax handling broken
	out from arm_reg_parse.
	(parse_neon_type): Move. Return SUCCESS/FAIL.
	(first_error): New function. Call to ensure first error which occurs
	is reported.
	(parse_neon_operand_type): Parse exactly one type.
	(NEON_ALL_LANES, NEON_INTERLEAVE_LANES): Move.
	(parse_typed_reg_or_scalar): New function. Handle core of both
	arm_typed_reg_parse and parse_scalar.
	(arm_typed_reg_parse): Parse a register with an optional type.
	(NEON_SCALAR_REG, NEON_SCALAR_INDEX): Extract parts of parse_scalar
	result.
	(parse_scalar): Parse a Neon scalar with optional type.
	(parse_reg_list): Use first_error.
	(parse_vfp_reg_list): Use arm_typed_reg_parse instead of arm_reg_parse.
	(neon_alias_types_same): New function. Return true if two (alias) types
	are the same.
	(parse_neon_el_struct_list): Use parse_typed_reg_or_scalar. Return type
	of elements.
	(insert_reg_alias): Return new reg_entry not void.
	(insert_neon_reg_alias): New function. Insert type/index information as
	well as register for alias.
	(create_neon_reg_alias): New function. Parse .dn/.qn directives and
	make typed register aliases accordingly.
	(s_dn, s_qn): New functions. Handle incorrectly used .dn/.qn at start
	of line.
	(s_unreq): Delete type information if present.
	(s_arm_unwind_save_mmxwr): Remove arg 3 from arm_reg_parse calls.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_shift): Likewise.
	(parse_shifter_operand): Likewise.
	(parse_address): Likewise.
	(parse_tb): Likewise.
	(tc_arm_regname_to_dw2regnum): Likewise.
	(md_pseudo_table): Add dn, qn.
	(parse_neon_mov): Handle typed operands.
	(parse_operands): Likewise.
	(neon_type_mask): Add N_SIZ.
	(N_ALLMODS): New macro.
	(neon_check_shape): Fix typo in NS_DDD_QQQ case. Use first_error.
	(el_type_of_type_chk): Add some safeguards.
	(modify_types_allowed): Fix logic bug.
	(neon_check_type): Handle operands with types.
	(neon_three_same): Remove redundant optional arg handling.
	(do_neon_dyadic_i64_su, do_neon_shl_imm, do_neon_qshl_imm)
	(do_neon_logic, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_step): Adjust accordingly.
	(neon_cmode_for_logic_imm): Use first_error.
	(do_neon_bitfield): Call neon_check_type.
	(neon_dyadic): Rename to...
	(neon_dyadic_misc): ...this. New name for neon_dyadic. Add bitfield to
	allow modification of type of the destination.
	(do_neon_dyadic_if_su, do_neon_dyadic_if_i, do_neon_dyadic_if_i_d)
	(do_neon_addsub_if_i, do_neon_mul): Adjust accordingly.
	(do_neon_compare): Make destination be an untyped bitfield.
	(neon_scalar_for_mul): Use NEON_SCALAR_REG, NEON_SCALAR_INDEX.
	(neon_mul_mac): Return early in case of errors.
	(neon_move_immediate): Use first_error.
	(neon_mac_reg_scalar_long): Fix type to include scalar.
	(do_neon_dup): Likewise.
	(do_neon_mov): Likewise (in several places).
	(do_neon_tbl_tbx): Fix type.
	(do_neon_ld_st_interleave, neon_alignment_bit, do_neon_ld_st_lane)
	(do_neon_ld_dup): Exit early in case of errors and/or use first_error.
	(opcode_lookup): Update for parse_neon_type returning SUCCESS/FAIL.
	Handle .dn/.qn directives.
	(REGDEF): Add zero for reg_entry neon field.

	* gas/testsuite/gas/arm/neon-psyn.s: Basic test of programmers syntax.
	* gas/testsuite/gas/arm/neon-psyn.d: Expected output of above.
@
text
@a0 78
	.arm
	.syntax unified

fish	.qn	q2
cow	.dn	d2[1]
chips	.dn	d2
banana	.dn	d3

	vmul fish.s16, fish.s16, fish.s16

	vmul banana, banana, cow.s32
	vmul d3.s32, d3.s32, d2.s32
	vadd d2.s32, d3.s32
	vmull fish.u32, chips.u16, chips.u16[1]

X	.dn D0.S16
Y	.dn D1.S16
Z 	.dn Y[2]

	VMLA X, Y, Z
	VMLA X, Y, Y[2]

foo	.dn d5
bar	.dn d7
foos	.dn foo[1]

	vadd foo, foo, foo.u32

	vmov foo, bar
	vmov d2.s16[1], r1
	vmov d5.s32[1], r1
	vmov foo, r2, r3
	vmov r4, foos.s8
	vmov r5, r6, foo

baa	.qn	q5
moo	.dn	d6
sheep	.dn	d7
chicken	.dn	d8

	vabal baa, moo.u16, sheep.u16

	vcvt q1.s32, q2.f32
	vcvt d4.f, d5.u32, #5

	vdup bar, foos.32
	vtbl d1, {baa}, d4.8

el1	.dn	d4.16[1]
el2	.dn	d6.16[1]
el3	.dn	d8.16[1]
el4	.dn	d10.16[1]

	vld2 {moo.32[1], sheep.32[1]}, [r10]
	vld4 {el1, el2, el3, el4}, [r10]
	vld3 {moo.16[], sheep.16[], chicken.16[]}, [r10]

	vmov r0,d0.s16[0]

el5	.qn	q3.16
el6	.qn	q4.16

	vld4 {el5,el6}, [r10]

	vld3 {d2.s16[1], d4.s16[1], d6.s16[1]}, [r10]

chicken8	.dn	chicken.8

	vtbl d7.8, {d4, d5}, chicken8

	vbsl q1.8, q2.16, q3.8

	vcge d2.32, d3.f, d4.f
	vcge d2.16, d3.s16, #0

dupme	.dn	d2.s16

	vdup dupme, r3
@

