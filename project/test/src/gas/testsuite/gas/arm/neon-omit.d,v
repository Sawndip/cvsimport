head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.2
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.7
	binutils-2_23_2:1.7
	binutils-2_23_1:1.7
	binutils-2_23:1.7
	binutils-2_23-branch:1.7.0.8
	binutils-2_23-branchpoint:1.7
	binutils-2_22_branch:1.7.0.6
	binutils-2_22:1.7
	binutils-2_22-branch:1.7.0.4
	binutils-2_22-branchpoint:1.7
	binutils-2_21:1.7
	binutils-2_21-branch:1.7.0.2
	binutils-2_21-branchpoint:1.7
	binutils-2_20_1:1.6
	binutils-2_20:1.6
	binutils-arc-20081103-branch:1.5.0.10
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.6.0.2
	binutils-2_20-branchpoint:1.6
	dje-cgen-play1-branch:1.5.0.8
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.5.0.6
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.4
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.5
	binutils-2_18-branch:1.5.0.2
	binutils-2_18-branchpoint:1.5
	binutils-csl-coldfire-4_1-32:1.1.2.3
	binutils-csl-sourcerygxx-4_1-32:1.1.2.3
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.3
	binutils-csl-coldfire-4_1-30:1.1.2.3
	binutils-csl-sourcerygxx-4_1-30:1.1.2.3
	binutils-csl-coldfire-4_1-28:1.1.2.3
	binutils-csl-sourcerygxx-4_1-29:1.1.2.3
	binutils-csl-sourcerygxx-4_1-28:1.1.2.3
	binutils-csl-arm-2006q3-27:1.1.2.3
	binutils-csl-sourcerygxx-4_1-27:1.1.2.3
	binutils-csl-arm-2006q3-26:1.1.2.3
	binutils-csl-sourcerygxx-4_1-26:1.1.2.3
	binutils-csl-sourcerygxx-4_1-25:1.1.2.3
	binutils-csl-sourcerygxx-4_1-24:1.1.2.3
	binutils-csl-sourcerygxx-4_1-23:1.1.2.3
	binutils-csl-sourcerygxx-4_1-21:1.1.2.3
	binutils-csl-arm-2006q3-21:1.1.2.3
	binutils-csl-sourcerygxx-4_1-22:1.1.2.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.3
	binutils-csl-sourcerygxx-4_1-20:1.1.2.3
	binutils-csl-arm-2006q3-19:1.1.2.3
	binutils-csl-sourcerygxx-4_1-19:1.1.2.3
	binutils-csl-sourcerygxx-4_1-18:1.1.2.3
	binutils-csl-renesas-4_1-9:1.1.2.1
	binutils-csl-renesas-4_1-8:1.1.2.1
	binutils-csl-renesas-4_1-7:1.1.2.1
	binutils-csl-renesas-4_1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-17:1.1.2.1
	binutils-csl-sourcerygxx-4_1-14:1.1.2.1
	binutils-csl-sourcerygxx-4_1-15:1.1.2.1
	binutils-csl-sourcerygxx-4_1-13:1.1.2.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.1
	binutils-csl-sourcerygxx-4_1-9:1.1.2.1
	binutils-csl-sourcerygxx-4_1-8:1.1.2.1
	binutils-csl-sourcerygxx-4_1-7:1.1.2.1
	binutils-csl-arm-2006q1-6:1.1.2.1
	binutils-csl-sourcerygxx-4_1-6:1.1.2.1
	binutils-csl-coldfire-4_1-11:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.1
	binutils-csl-coldfire-4_1-10:1.1.2.1
	binutils-csl-sourcerygxx-4_1-5:1.1.2.1
	binutils-csl-sourcerygxx-4_1-4:1.1.2.1
	binutils-csl-morpho-4_1-4:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.2.1
	binutils_latest_snapshot:1.8
	binutils-csl-2_17-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.8
date	2013.04.09.11.05.45;	author jbeulich;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.29.16.02.41;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.29.08.08.15;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.04.15.32.26;	author jules;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.04.04.39.53;	author pbrook;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.07.17.54.15;	author pbrook;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.03.00.03.34;	author jules;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.09.05.18.17.59;	author pbrook;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.09.06.16.35.22;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gas/
2013-04-09  Jan Beulich <jbeulich@@suse.com>

	* gas/config/tc-arm.c (do_neon_mov): Fake an instruction suffix
	if there was none specified for moves between scalar and core
	register.

gas/testsuite/
2013-04-09  Jan Beulich <jbeulich@@suse.com>

	* gas/arm/neon-omit.s: Add tests for suffix less VMOV.
	* gas/arm/neon-omit.d: Update accordingly.
@
text
@# name: Neon optional register operands
# as: -mfpu=neon
# objdump: -dr --prefix-addresses --show-raw-insn

.*: +file format .*arm.*

Disassembly of section .text:
0[0-9a-f]+ <[^>]+> f3022746 	vabd\.u8	q1, q1, q3
0[0-9a-f]+ <[^>]+> f26cc0c6 	vhadd\.s32	q14, q14, q3
0[0-9a-f]+ <[^>]+> f2222144 	vrhadd\.s32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f22aa24e 	vhsub\.s32	q5, q5, q7
0[0-9a-f]+ <[^>]+> f3186446 	vshl\.u16	q3, q3, q4
0[0-9a-f]+ <[^>]+> f32ca45a 	vqshl\.u32	q5, q5, q6
0[0-9a-f]+ <[^>]+> f20ee170 	vand	q7, q7, q8
0[0-9a-f]+ <[^>]+> f30ee170 	veor	q7, q7, q8
0[0-9a-f]+ <[^>]+> f3b5a14a 	vceq\.i16	q5, q5, #0
0[0-9a-f]+ <[^>]+> f31aa85a 	vceq\.i16	q5, q5, q5
0[0-9a-f]+ <[^>]+> f3b5a24a 	vclt\.s16	q5, q5, #0
0[0-9a-f]+ <[^>]+> f3b5a34c 	vabs\.s16	q5, q6
0[0-9a-f]+ <[^>]+> f3b57388 	vneg\.s16	d7, d8
0[0-9a-f]+ <[^>]+> f3b97708 	vabs\.f32	d7, d8
0[0-9a-f]+ <[^>]+> f3f927e4 	vneg\.f32	q9, q10
0[0-9a-f]+ <[^>]+> f2211a03 	vpmax\.s32	d1, d1, d3
0[0-9a-f]+ <[^>]+> f2255a17 	vpmin\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f3011f03 	vpmax\.f32	d1, d1, d3
0[0-9a-f]+ <[^>]+> f3255f07 	vpmin\.f32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f2122b46 	vqdmulh\.s16	q1, q1, q3
0[0-9a-f]+ <[^>]+> f3255b07 	vqrdmulh\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f3922c6d 	vqdmulh\.s16	q1, q1, d5\[3\]
0[0-9a-f]+ <[^>]+> f2122056 	vqadd\.s16	q1, q1, q3
0[0-9a-f]+ <[^>]+> f2255017 	vqadd\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f2222944 	vmla\.i32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f2133b14 	vpadd\.i16	d3, d3, d4
0[0-9a-f]+ <[^>]+> f3266948 	vmls\.i32	q3, q3, q4
0[0-9a-f]+ <[^>]+> f3022e54 	vacge\.f32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f3266e58 	vacgt\.f32	q3, q3, q4
0[0-9a-f]+ <[^>]+> f30cae5a 	vacge\.f32	q5, q6, q5
0[0-9a-f]+ <[^>]+> f320eede 	vacgt\.f32	q7, q8, q7
0[0-9a-f]+ <[^>]+> f32ee370 	vcge\.u32	q7, q7, q8
0[0-9a-f]+ <[^>]+> f32ee360 	vcgt\.u32	q7, q7, q8
0[0-9a-f]+ <[^>]+> f320e3de 	vcge\.u32	q7, q8, q7
0[0-9a-f]+ <[^>]+> f320e3ce 	vcgt\.u32	q7, q8, q7
0[0-9a-f]+ <[^>]+> f3a22102 	vaddw\.u32	q1, q1, d2
0[0-9a-f]+ <[^>]+> f2a66304 	vsubw\.s32	q3, q3, d4
0[0-9a-f]+ <[^>]+> f2244856 	vtst\.32	q2, q2, q3
0[0-9a-f]+ <[^>]+> f2011f12 	vrecps\.f32	d1, d1, d2
0[0-9a-f]+ <[^>]+> f29c2052 	vshr\.s16	q1, q1, #4
0[0-9a-f]+ <[^>]+> f28b4254 	vrshr\.s8	q2, q2, #5
0[0-9a-f]+ <[^>]+> f39a6156 	vsra\.u16	q3, q3, #6
0[0-9a-f]+ <[^>]+> f39a8358 	vrsra\.u16	q4, q4, #6
0[0-9a-f]+ <[^>]+> f3954554 	vsli\.16	q2, q2, #5
0[0-9a-f]+ <[^>]+> f3bff69f 	vqshlu\.s64	d15, d15, #63.*
0[0-9a-f]+ <[^>]+> f2b55306 	vext\.8	d5, d5, d6, #3
0[0-9a-f]+ <[^>]+> f3042746 	vabd\.u8	q1, q2, q3
0[0-9a-f]+ <[^>]+> f262c0c6 	vhadd\.s32	q14, q9, q3
0[0-9a-f]+ <[^>]+> f22a2144 	vrhadd\.s32	q1, q5, q2
0[0-9a-f]+ <[^>]+> f220a2ce 	vhsub\.s32	q5, q8, q7
0[0-9a-f]+ <[^>]+> f31a6448 	vshl\.u16	q3, q4, q5
0[0-9a-f]+ <[^>]+> f322a45c 	vqshl\.u32	q5, q6, q1
0[0-9a-f]+ <[^>]+> f200e1dc 	vand	q7, q8, q6
0[0-9a-f]+ <[^>]+> f300e1dc 	veor	q7, q8, q6
0[0-9a-f]+ <[^>]+> f3b5a146 	vceq\.i16	q5, q3, #0
0[0-9a-f]+ <[^>]+> f316a85a 	vceq\.i16	q5, q3, q5
0[0-9a-f]+ <[^>]+> f3b5a246 	vclt\.s16	q5, q3, #0
0[0-9a-f]+ <[^>]+> f2231a20 	vpmax\.s32	d1, d3, d16
0[0-9a-f]+ <[^>]+> f2275a34 	vpmin\.s32	d5, d7, d20
0[0-9a-f]+ <[^>]+> f3031f07 	vpmax\.f32	d1, d3, d7
0[0-9a-f]+ <[^>]+> f32c5f07 	vpmin\.f32	d5, d12, d7
0[0-9a-f]+ <[^>]+> f2162b60 	vqdmulh\.s16	q1, q3, q8
0[0-9a-f]+ <[^>]+> f3275b09 	vqrdmulh\.s32	d5, d7, d9
0[0-9a-f]+ <[^>]+> f39c2c6d 	vqdmulh\.s16	q1, q6, d5\[3\]
0[0-9a-f]+ <[^>]+> f21620d6 	vqadd\.s16	q1, q11, q3
0[0-9a-f]+ <[^>]+> f227503f 	vqadd\.s32	d5, d7, d31
0[0-9a-f]+ <[^>]+> f2242962 	vmla\.i32	q1, q2, q9
0[0-9a-f]+ <[^>]+> f21a3b94 	vpadd\.i16	d3, d26, d4
0[0-9a-f]+ <[^>]+> f328694a 	vmls\.i32	q3, q4, q5
0[0-9a-f]+ <[^>]+> f3082e54 	vacge\.f32	q1, q4, q2
0[0-9a-f]+ <[^>]+> f3226e58 	vacgt\.f32	q3, q1, q4
0[0-9a-f]+ <[^>]+> f30cae72 	vacge\.f32	q5, q6, q9
0[0-9a-f]+ <[^>]+> f320eed2 	vacgt\.f32	q7, q8, q1
0[0-9a-f]+ <[^>]+> f320e3d6 	vcge\.u32	q7, q8, q3
0[0-9a-f]+ <[^>]+> f320e3c6 	vcgt\.u32	q7, q8, q3
0[0-9a-f]+ <[^>]+> f326e370 	vcge\.u32	q7, q3, q8
0[0-9a-f]+ <[^>]+> f326e360 	vcgt\.u32	q7, q3, q8
0[0-9a-f]+ <[^>]+> f3aa2102 	vaddw\.u32	q1, q5, d2
0[0-9a-f]+ <[^>]+> f2a26304 	vsubw\.s32	q3, q1, d4
0[0-9a-f]+ <[^>]+> f22648d6 	vtst\.32	q2, q11, q3
0[0-9a-f]+ <[^>]+> f20e1f92 	vrecps\.f32	d1, d30, d2
0[0-9a-f]+ <[^>]+> f29c207a 	vshr\.s16	q1, q13, #4
0[0-9a-f]+ <[^>]+> f28b4272 	vrshr\.s8	q2, q9, #5
0[0-9a-f]+ <[^>]+> f39a6152 	vsra\.u16	q3, q1, #6
0[0-9a-f]+ <[^>]+> f3dae358 	vrsra\.u16	q15, q4, #6
0[0-9a-f]+ <[^>]+> f3954556 	vsli\.16	q2, q3, #5
0[0-9a-f]+ <[^>]+> f3bff6b7 	vqshlu\.s64	d15, d23, #63.*
0[0-9a-f]+ <[^>]+> f2b25386 	vext\.8	d5, d18, d6, #3
0[0-9a-f]+ <[^>]+> ee000b10 	vmov(\.32)?	d0\[0\], r0
0[0-9a-f]+ <[^>]+> ee100b10 	vmov(\.32)?	r0, d0\[0\]
0[0-9a-f]+ <[^>]+> f3020d54 	vmul\.f32	q0, q1, q2
@


1.7
log
@        PR 11136
        * config/tc-arm.c (neon_check_type): Handle a neon_shape value of
        NS_NULL.
        * gas/arm/neon-omit.s: Add instruction that causes crash.
        * gas/arm/neon-omit.d: Add expected disassembly.
@
text
@d96 2
@


1.6
log
@        PR 10288
        * arm-dis.c (enum opcode_sentinels): New:  Used to mark the
        boundary between variaant and generic coprocessor instuctions.
        (coprocessor): Use it.
        Fix architecture version of MCRR and MRRC instructions.
        (arm_opcdes): Fix patterns for STRB and STRH instructions.
        (print_insn_coprocessor): Check architecture and extension masks.
        Print a hexadecimal version of any decimal constant that is
        outside of the range of -16 to +32.
        (print_arm_address): Add a return value of the offset used in the
        adress, if it is worth printing a hexadecimal version of it.
        (print_insn_neon): Print a hexadecimal version of any decimal
        constant that is outside of the range of -16 to +32.
        (print_insn_arm): Likewise.
        (print_insn_thumb16): Likewise.
        (print_insn_thumb32): Likewise.

        PR 10297
        * arm-dis.c (UNDEFINED_INSTRUCTION): New macro for a description
        of an undefined instruction.
        (arm_opcodes): Use it.
        (thumb_opcod): Use it.
        (thumb32_opc): Use it.

        Update expected disassembly regrexps in GAS and LD testsuites.
@
text
@d96 1
@


1.5
log
@	* gas/arm/neon-omit.d: Fix expected encodings for vshl, vqshl.
@
text
@d52 1
a52 1
0[0-9a-f]+ <[^>]+> f3bff69f 	vqshlu\.s64	d15, d15, #63
d94 1
a94 1
0[0-9a-f]+ <[^>]+> f3bff6b7 	vqshlu\.s64	d15, d23, #63
@


1.4
log
@2007-01-04  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (NEON_ENC_TAB): Fix encoding of vclt, vcle, vaclt
	and vacle.

	gas/testsuite/
	* gas/arm/neon-cov.d: Adjust expected output.
	* gas/arm/neon-omit.s: Add tests for vcgt and vcle.  Reorder vacle
	and vacle.
	* gas/arm/neon-omit.d: Adjust expected output.
@
text
@d12 2
a13 2
0[0-9a-f]+ <[^>]+> f3166448 	vshl\.u16	q3, q3, q4
0[0-9a-f]+ <[^>]+> f32aa45c 	vqshl\.u32	q5, q5, q6
d58 2
a59 2
0[0-9a-f]+ <[^>]+> f318644a 	vshl\.u16	q3, q4, q5
0[0-9a-f]+ <[^>]+> f32ca452 	vqshl\.u32	q5, q6, q1
@


1.3
log
@2006-09-07  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (parse_operands): Mark operand as present.

	gas/testsuite/
	* gas/arm/neon-omit.s: Test three-argument variants.
	* gas/arm/neon-omit.d: Update expected output.
@
text
@d40 1
d42 1
@


1.2
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@d52 42
@


1.1
log
@file neon-omit.d was initially added on branch binutils-csl-2_17-branch.
@
text
@d1 51
@


1.1.2.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@a0 51
# name: Neon optional register operands
# as: -mfpu=neon
# objdump: -dr --prefix-addresses --show-raw-insn

.*: +file format .*arm.*

Disassembly of section .text:
0[0-9a-f]+ <[^>]+> f3022746 	vabd\.u8	q1, q1, q3
0[0-9a-f]+ <[^>]+> f26cc0c6 	vhadd\.s32	q14, q14, q3
0[0-9a-f]+ <[^>]+> f2222144 	vrhadd\.s32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f22aa24e 	vhsub\.s32	q5, q5, q7
0[0-9a-f]+ <[^>]+> f3166448 	vshl\.u16	q3, q3, q4
0[0-9a-f]+ <[^>]+> f32aa45c 	vqshl\.u32	q5, q5, q6
0[0-9a-f]+ <[^>]+> f20ee170 	vand	q7, q7, q8
0[0-9a-f]+ <[^>]+> f30ee170 	veor	q7, q7, q8
0[0-9a-f]+ <[^>]+> f3b5a14a 	vceq\.i16	q5, q5, #0
0[0-9a-f]+ <[^>]+> f31aa85a 	vceq\.i16	q5, q5, q5
0[0-9a-f]+ <[^>]+> f3b5a24a 	vclt\.s16	q5, q5, #0
0[0-9a-f]+ <[^>]+> f3b5a34c 	vabs\.s16	q5, q6
0[0-9a-f]+ <[^>]+> f3b57388 	vneg\.s16	d7, d8
0[0-9a-f]+ <[^>]+> f3b97708 	vabs\.f32	d7, d8
0[0-9a-f]+ <[^>]+> f3f927e4 	vneg\.f32	q9, q10
0[0-9a-f]+ <[^>]+> f2211a03 	vpmax\.s32	d1, d1, d3
0[0-9a-f]+ <[^>]+> f2255a17 	vpmin\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f3011f03 	vpmax\.f32	d1, d1, d3
0[0-9a-f]+ <[^>]+> f3255f07 	vpmin\.f32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f2122b46 	vqdmulh\.s16	q1, q1, q3
0[0-9a-f]+ <[^>]+> f3255b07 	vqrdmulh\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f3922c6d 	vqdmulh\.s16	q1, q1, d5\[3\]
0[0-9a-f]+ <[^>]+> f2122056 	vqadd\.s16	q1, q1, q3
0[0-9a-f]+ <[^>]+> f2255017 	vqadd\.s32	d5, d5, d7
0[0-9a-f]+ <[^>]+> f2222944 	vmla\.i32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f2133b14 	vpadd\.i16	d3, d3, d4
0[0-9a-f]+ <[^>]+> f3266948 	vmls\.i32	q3, q3, q4
0[0-9a-f]+ <[^>]+> f3022e54 	vacge\.f32	q1, q1, q2
0[0-9a-f]+ <[^>]+> f3266e58 	vacgt\.f32	q3, q3, q4
0[0-9a-f]+ <[^>]+> f30cae5a 	vacge\.f32	q5, q6, q5
0[0-9a-f]+ <[^>]+> f320eede 	vacgt\.f32	q7, q8, q7
0[0-9a-f]+ <[^>]+> f32ee370 	vcge\.u32	q7, q7, q8
0[0-9a-f]+ <[^>]+> f320e3de 	vcge\.u32	q7, q8, q7
0[0-9a-f]+ <[^>]+> f3a22102 	vaddw\.u32	q1, q1, d2
0[0-9a-f]+ <[^>]+> f2a66304 	vsubw\.s32	q3, q3, d4
0[0-9a-f]+ <[^>]+> f2244856 	vtst\.32	q2, q2, q3
0[0-9a-f]+ <[^>]+> f2011f12 	vrecps\.f32	d1, d1, d2
0[0-9a-f]+ <[^>]+> f29c2052 	vshr\.s16	q1, q1, #4
0[0-9a-f]+ <[^>]+> f28b4254 	vrshr\.s8	q2, q2, #5
0[0-9a-f]+ <[^>]+> f39a6156 	vsra\.u16	q3, q3, #6
0[0-9a-f]+ <[^>]+> f39a8358 	vrsra\.u16	q4, q4, #6
0[0-9a-f]+ <[^>]+> f3954554 	vsli\.16	q2, q2, #5
0[0-9a-f]+ <[^>]+> f3bff69f 	vqshlu\.s64	d15, d15, #63
0[0-9a-f]+ <[^>]+> f2b55306 	vext\.8	d5, d5, d6, #3
@


1.1.2.2
log
@2006-09-05  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (NEON_ENC_TAB): Fix encoding of vclt, vcle, vaclt
	and vacle.

	gas/testsuite/
	* gas/arm/neon-cov.d: Adjust expected output.
	* gas/arm/neon-omit.s: Add tests for vcgt and vcle.  Reorder vacle
	and vacle.
	* gas/arm/neon-omit.d: Adjust expected output.
@
text
@a39 1
0[0-9a-f]+ <[^>]+> f32ee360 	vcgt\.u32	q7, q7, q8
a40 1
0[0-9a-f]+ <[^>]+> f320e3ce 	vcgt\.u32	q7, q8, q7
@


1.1.2.3
log
@2006-09-06  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (parse_operands): Mark operand as present.

	gas/testsuite/
	* gas/arm/neon-omit.s: Test three-argument variants.
	* gas/arm/neon-omit.d: Update expected output.
@
text
@a53 42
0[0-9a-f]+ <[^>]+> f3042746 	vabd\.u8	q1, q2, q3
0[0-9a-f]+ <[^>]+> f262c0c6 	vhadd\.s32	q14, q9, q3
0[0-9a-f]+ <[^>]+> f22a2144 	vrhadd\.s32	q1, q5, q2
0[0-9a-f]+ <[^>]+> f220a2ce 	vhsub\.s32	q5, q8, q7
0[0-9a-f]+ <[^>]+> f318644a 	vshl\.u16	q3, q4, q5
0[0-9a-f]+ <[^>]+> f32ca452 	vqshl\.u32	q5, q6, q1
0[0-9a-f]+ <[^>]+> f200e1dc 	vand	q7, q8, q6
0[0-9a-f]+ <[^>]+> f300e1dc 	veor	q7, q8, q6
0[0-9a-f]+ <[^>]+> f3b5a146 	vceq\.i16	q5, q3, #0
0[0-9a-f]+ <[^>]+> f316a85a 	vceq\.i16	q5, q3, q5
0[0-9a-f]+ <[^>]+> f3b5a246 	vclt\.s16	q5, q3, #0
0[0-9a-f]+ <[^>]+> f2231a20 	vpmax\.s32	d1, d3, d16
0[0-9a-f]+ <[^>]+> f2275a34 	vpmin\.s32	d5, d7, d20
0[0-9a-f]+ <[^>]+> f3031f07 	vpmax\.f32	d1, d3, d7
0[0-9a-f]+ <[^>]+> f32c5f07 	vpmin\.f32	d5, d12, d7
0[0-9a-f]+ <[^>]+> f2162b60 	vqdmulh\.s16	q1, q3, q8
0[0-9a-f]+ <[^>]+> f3275b09 	vqrdmulh\.s32	d5, d7, d9
0[0-9a-f]+ <[^>]+> f39c2c6d 	vqdmulh\.s16	q1, q6, d5\[3\]
0[0-9a-f]+ <[^>]+> f21620d6 	vqadd\.s16	q1, q11, q3
0[0-9a-f]+ <[^>]+> f227503f 	vqadd\.s32	d5, d7, d31
0[0-9a-f]+ <[^>]+> f2242962 	vmla\.i32	q1, q2, q9
0[0-9a-f]+ <[^>]+> f21a3b94 	vpadd\.i16	d3, d26, d4
0[0-9a-f]+ <[^>]+> f328694a 	vmls\.i32	q3, q4, q5
0[0-9a-f]+ <[^>]+> f3082e54 	vacge\.f32	q1, q4, q2
0[0-9a-f]+ <[^>]+> f3226e58 	vacgt\.f32	q3, q1, q4
0[0-9a-f]+ <[^>]+> f30cae72 	vacge\.f32	q5, q6, q9
0[0-9a-f]+ <[^>]+> f320eed2 	vacgt\.f32	q7, q8, q1
0[0-9a-f]+ <[^>]+> f320e3d6 	vcge\.u32	q7, q8, q3
0[0-9a-f]+ <[^>]+> f320e3c6 	vcgt\.u32	q7, q8, q3
0[0-9a-f]+ <[^>]+> f326e370 	vcge\.u32	q7, q3, q8
0[0-9a-f]+ <[^>]+> f326e360 	vcgt\.u32	q7, q3, q8
0[0-9a-f]+ <[^>]+> f3aa2102 	vaddw\.u32	q1, q5, d2
0[0-9a-f]+ <[^>]+> f2a26304 	vsubw\.s32	q3, q1, d4
0[0-9a-f]+ <[^>]+> f22648d6 	vtst\.32	q2, q11, q3
0[0-9a-f]+ <[^>]+> f20e1f92 	vrecps\.f32	d1, d30, d2
0[0-9a-f]+ <[^>]+> f29c207a 	vshr\.s16	q1, q13, #4
0[0-9a-f]+ <[^>]+> f28b4272 	vrshr\.s8	q2, q9, #5
0[0-9a-f]+ <[^>]+> f39a6152 	vsra\.u16	q3, q1, #6
0[0-9a-f]+ <[^>]+> f3dae358 	vrsra\.u16	q15, q4, #6
0[0-9a-f]+ <[^>]+> f3954556 	vsli\.16	q2, q3, #5
0[0-9a-f]+ <[^>]+> f3bff6b7 	vqshlu\.s64	d15, d23, #63
0[0-9a-f]+ <[^>]+> f2b25386 	vext\.8	d5, d18, d6, #3
@


