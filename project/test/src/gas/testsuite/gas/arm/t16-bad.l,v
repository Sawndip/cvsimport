head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.10
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.6
	binutils-2_23_2:1.6
	binutils-2_23_1:1.6
	binutils-2_23:1.6
	binutils-2_23-branch:1.6.0.8
	binutils-2_23-branchpoint:1.6
	binutils-2_22_branch:1.6.0.6
	binutils-2_22:1.6
	binutils-2_22-branch:1.6.0.4
	binutils-2_22-branchpoint:1.6
	binutils-2_21:1.6
	binutils-2_21-branch:1.6.0.2
	binutils-2_21-branchpoint:1.6
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.3.0.6
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.5.0.2
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.4.0.2
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.6
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.1.2.2
	binutils-csl-wrs-linux-3_4_4-23:1.1.2.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.1.2.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.1.2.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.1.2.2
	binutils-2_17-branch:1.2.0.4
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.2
	binutils-csl-2_17-branchpoint:1.2
	binutils_latest_snapshot:1.6
	binutils-csl-arm-2005q1b:1.1.2.2
	binutils-csl-arm-2005q1-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2010.05.27.10.40.36;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.11.09.53.40;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.29.11.46.02;	author jsm28;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.05.01.31.26;	author pbrook;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.18.05.40.10;	author zack;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.26.05.31.42;	author zack;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.04.26.05.31.42;	author zack;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.04.29.17.46.04;	author zack;	state Exp;
branches;
next	;


desc
@@


1.6
log
@        * config/tc-arm.c (encode_thumb2_ldmstm): Make warning about
        writeback when base register is in register list an error, and
        correct check.
        (do_t_ldmstm): Change warnings.

        * gas/arm/thumb2_ldmstm.d: Add new testcases.
        * gas/arm/thumb2_ldmstm.s: Likeiwse.
        * gas/arm/thumb2_ldmstm_bad.d: Add testcases to check for
        UNPREDICTABLE ldm/stm.
        * gas/arm/thumb2_ldmstm_bad.l: Likewise.
        * gas/arm/thumb2_ldmstm_bad.s: Likewise.
@
text
@[^:]*: Assembler messages:
[^:]*:36: Error: lo register required -- `tst r8,r0'
[^:]*:36: Error: lo register required -- `tst r0,r8'
[^:]*:36: Error: unshifted register required -- `tst r0,#12'
[^:]*:36: Error: unshifted register required -- `tst r0,r1,lsl#2'
[^:]*:36: Error: unshifted register required -- `tst r0,r1,lsl r3'
[^:]*:37: Error: lo register required -- `cmn r8,r0'
[^:]*:37: Error: lo register required -- `cmn r0,r8'
[^:]*:37: Error: unshifted register required -- `cmn r0,#12'
[^:]*:37: Error: unshifted register required -- `cmn r0,r1,lsl#2'
[^:]*:37: Error: unshifted register required -- `cmn r0,r1,lsl r3'
[^:]*:38: Error: lo register required -- `mvn r8,r0'
[^:]*:38: Error: lo register required -- `mvn r0,r8'
[^:]*:38: Error: unshifted register required -- `mvn r0,#12'
[^:]*:38: Error: unshifted register required -- `mvn r0,r1,lsl#2'
[^:]*:38: Error: unshifted register required -- `mvn r0,r1,lsl r3'
[^:]*:39: Error: lo register required -- `neg r8,r0'
[^:]*:39: Error: lo register required -- `neg r0,r8'
[^:]*:40: Error: lo register required -- `rev r8,r0'
[^:]*:40: Error: lo register required -- `rev r0,r8'
[^:]*:41: Error: lo register required -- `rev16 r8,r0'
[^:]*:41: Error: lo register required -- `rev16 r0,r8'
[^:]*:42: Error: lo register required -- `revsh r8,r0'
[^:]*:42: Error: lo register required -- `revsh r0,r8'
[^:]*:43: Error: lo register required -- `sxtb r8,r0'
[^:]*:43: Error: lo register required -- `sxtb r0,r8'
[^:]*:43: Error: Thumb encoding does not support rotation -- `sxtb r0,r1,ror#8'
[^:]*:44: Error: lo register required -- `sxth r8,r0'
[^:]*:44: Error: lo register required -- `sxth r0,r8'
[^:]*:44: Error: Thumb encoding does not support rotation -- `sxth r0,r1,ror#8'
[^:]*:45: Error: lo register required -- `uxtb r8,r0'
[^:]*:45: Error: lo register required -- `uxtb r0,r8'
[^:]*:45: Error: Thumb encoding does not support rotation -- `uxtb r0,r1,ror#8'
[^:]*:46: Error: lo register required -- `uxth r8,r0'
[^:]*:46: Error: lo register required -- `uxth r0,r8'
[^:]*:46: Error: Thumb encoding does not support rotation -- `uxth r0,r1,ror#8'
[^:]*:48: Error: dest must overlap one source register -- `adc r1,r2,r3'
[^:]*:48: Error: lo register required -- `adc r8,r0'
[^:]*:48: Error: lo register required -- `adc r0,r8'
[^:]*:48: Error: unshifted register required -- `adc r0,#12'
[^:]*:48: Error: unshifted register required -- `adc r0,r1,lsl#2'
[^:]*:48: Error: unshifted register required -- `adc r0,r1,lsl r3'
[^:]*:49: Error: dest must overlap one source register -- `and r1,r2,r3'
[^:]*:49: Error: lo register required -- `and r8,r0'
[^:]*:49: Error: lo register required -- `and r0,r8'
[^:]*:49: Error: unshifted register required -- `and r0,#12'
[^:]*:49: Error: unshifted register required -- `and r0,r1,lsl#2'
[^:]*:49: Error: unshifted register required -- `and r0,r1,lsl r3'
[^:]*:50: Error: dest and source1 must be the same register -- `bic r1,r2,r3'
[^:]*:50: Error: lo register required -- `bic r8,r0'
[^:]*:50: Error: lo register required -- `bic r0,r8'
[^:]*:50: Error: unshifted register required -- `bic r0,#12'
[^:]*:50: Error: unshifted register required -- `bic r0,r1,lsl#2'
[^:]*:50: Error: unshifted register required -- `bic r0,r1,lsl r3'
[^:]*:51: Error: dest must overlap one source register -- `eor r1,r2,r3'
[^:]*:51: Error: lo register required -- `eor r8,r0'
[^:]*:51: Error: lo register required -- `eor r0,r8'
[^:]*:51: Error: unshifted register required -- `eor r0,#12'
[^:]*:51: Error: unshifted register required -- `eor r0,r1,lsl#2'
[^:]*:51: Error: unshifted register required -- `eor r0,r1,lsl r3'
[^:]*:52: Error: dest must overlap one source register -- `orr r1,r2,r3'
[^:]*:52: Error: lo register required -- `orr r8,r0'
[^:]*:52: Error: lo register required -- `orr r0,r8'
[^:]*:52: Error: unshifted register required -- `orr r0,#12'
[^:]*:52: Error: unshifted register required -- `orr r0,r1,lsl#2'
[^:]*:52: Error: unshifted register required -- `orr r0,r1,lsl r3'
[^:]*:53: Error: dest and source1 must be the same register -- `sbc r1,r2,r3'
[^:]*:53: Error: lo register required -- `sbc r8,r0'
[^:]*:53: Error: lo register required -- `sbc r0,r8'
[^:]*:53: Error: unshifted register required -- `sbc r0,#12'
[^:]*:53: Error: unshifted register required -- `sbc r0,r1,lsl#2'
[^:]*:53: Error: unshifted register required -- `sbc r0,r1,lsl r3'
[^:]*:54: Error: dest must overlap one source register -- `mul r1,r2,r3'
[^:]*:54: Error: lo register required -- `mul r8,r0'
[^:]*:54: Error: lo register required -- `mul r0,r8'
[^:]*:62: Error: lo register required -- `asr r8,r0,#12'
[^:]*:62: Error: lo register required -- `asr r0,r8,#12'
[^:]*:62: Error: lo register required -- `asr r8,r0'
[^:]*:62: Error: lo register required -- `asr r0,r8'
[^:]*:63: Error: lo register required -- `lsl r8,r0,#12'
[^:]*:63: Error: lo register required -- `lsl r0,r8,#12'
[^:]*:63: Error: lo register required -- `lsl r8,r0'
[^:]*:63: Error: lo register required -- `lsl r0,r8'
[^:]*:64: Error: lo register required -- `lsr r8,r0,#12'
[^:]*:64: Error: lo register required -- `lsr r0,r8,#12'
[^:]*:64: Error: lo register required -- `lsr r8,r0'
[^:]*:64: Error: lo register required -- `lsr r0,r8'
[^:]*:65: Error: lo register required -- `ror r8,r0,#12'
[^:]*:65: Error: lo register required -- `ror r0,r8,#12'
[^:]*:65: Error: lo register required -- `ror r8,r0'
[^:]*:65: Error: lo register required -- `ror r0,r8'
[^:]*:66: Error: ror #imm not supported -- `ror r0,r1,#12'
[^:]*:69: Error: unshifted register required -- `add r0,r1,lsl#2'
[^:]*:70: Error: unshifted register required -- `add r0,r1,lsl r3'
[^:]*:71: Error: lo register required -- `add r8,r0,#1'
[^:]*:72: Error: lo register required -- `add r0,r8,#1'
[^:]*:73: Error: lo register required -- `add r8,#10'
[^:]*:74: Error: dest must overlap one source register -- `add r8,r1,r2'
[^:]*:75: Error: dest must overlap one source register -- `add r1,r8,r2'
[^:]*:76: Error: dest must overlap one source register -- `add r1,r2,r8'
[^:]*:77: Error: lo register required -- `add r8,pc,#4'
[^:]*:78: Error: lo register required -- `add r8,sp,#4'
[^:]*:80: Error: lo register required -- `sub r8,r0'
[^:]*:80: Error: lo register required -- `sub r0,r8'
[^:]*:80: Error: unshifted register required -- `sub r0,r1,lsl#2'
[^:]*:80: Error: unshifted register required -- `sub r0,r1,lsl r3'
[^:]*:81: Error: lo register required -- `sub r8,r0,#1'
[^:]*:82: Error: lo register required -- `sub r0,r8,#1'
[^:]*:83: Error: lo register required -- `sub r8,#10'
[^:]*:84: Error: lo register required -- `sub r8,r1,r2'
[^:]*:85: Error: lo register required -- `sub r1,r8,r2'
[^:]*:86: Error: lo register required -- `sub r1,r2,r8'
[^:]*:88: Error: shifts in CMP/MOV instructions are only supported in unified syntax -- `cmp r0,r1,lsl#2'
[^:]*:89: Error: shifts in CMP/MOV instructions are only supported in unified syntax -- `cmp r0,r1,lsl r3'
[^:]*:90: Error: only lo regs allowed with immediate -- `cmp r8,#255'
[^:]*:92: Error: shifts in CMP/MOV instructions are only supported in unified syntax -- `mov r0,r1,lsl#2'
[^:]*:93: Error: shifts in CMP/MOV instructions are only supported in unified syntax -- `mov r0,r1,lsl r3'
[^:]*:94: Error: only lo regs allowed with immediate -- `mov r8,#255'
[^:]*:106: Error: lo register required -- `ldr r8,\[r0\]'
[^:]*:106: Error: lo register required -- `ldr r0,\[r8\]'
[^:]*:106: Error: lo register required -- `ldr r0,\[r0,r8\]'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,#4\]!'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1\],#4'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,-r2\]'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1\],r2'
[^:]*:107: Error: lo register required -- `ldrb r8,\[r0\]'
[^:]*:107: Error: lo register required -- `ldrb r0,\[r8\]'
[^:]*:107: Error: lo register required -- `ldrb r0,\[r0,r8\]'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1,#4\]!'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1\],#4'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1,-r2\]'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1\],r2'
[^:]*:108: Error: lo register required -- `ldrh r8,\[r0\]'
[^:]*:108: Error: lo register required -- `ldrh r0,\[r8\]'
[^:]*:108: Error: lo register required -- `ldrh r0,\[r0,r8\]'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1,#4\]!'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1\],#4'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1,-r2\]'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1\],r2'
[^:]*:109: Error: lo register required -- `ldrsb r8,\[r0\]'
[^:]*:109: Error: lo register required -- `ldrsb r0,\[r8\]'
[^:]*:109: Error: lo register required -- `ldrsb r0,\[r0,r8\]'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1,#4\]!'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1\],#4'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1,-r2\]'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1\],r2'
[^:]*:110: Error: lo register required -- `ldrsh r8,\[r0\]'
[^:]*:110: Error: lo register required -- `ldrsh r0,\[r8\]'
[^:]*:110: Error: lo register required -- `ldrsh r0,\[r0,r8\]'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1,#4\]!'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1\],#4'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1,-r2\]'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1\],r2'
[^:]*:111: Error: lo register required -- `str r8,\[r0\]'
[^:]*:111: Error: lo register required -- `str r0,\[r8\]'
[^:]*:111: Error: lo register required -- `str r0,\[r0,r8\]'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1,#4\]!'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1\],#4'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1,-r2\]'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1\],r2'
[^:]*:112: Error: lo register required -- `strb r8,\[r0\]'
[^:]*:112: Error: lo register required -- `strb r0,\[r8\]'
[^:]*:112: Error: lo register required -- `strb r0,\[r0,r8\]'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1,#4\]!'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1\],#4'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1,-r2\]'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1\],r2'
[^:]*:113: Error: lo register required -- `strh r8,\[r0\]'
[^:]*:113: Error: lo register required -- `strh r0,\[r8\]'
[^:]*:113: Error: lo register required -- `strh r0,\[r0,r8\]'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1,#4\]!'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1\],#4'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1,-r2\]'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1\],r2'
[^:]*:115: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,r2,lsl#1\]'
[^:]*:116: Error: Thumb does not support this addressing mode -- `str r0,\[r1,r2,lsl#1\]'
[^:]*:119: Error: lo register required -- `ldmia r8!,{r1,r2}'
[^:]*:120: Error: lo register required -- `ldmia r7!,{r8}'
[^:]*:121: Warning: this instruction will write back the base register
[^:]*:122: Warning: this instruction will not write back the base register
[^:]*:124: Error: lo register required -- `stmia r8!,{r1,r2}'
[^:]*:125: Error: lo register required -- `stmia r7!,{r8}'
[^:]*:126: Warning: this instruction will write back the base register
[^:]*:127: Warning: value stored for r7 is UNKNOWN
[^:]*:129: Error: invalid register list to push/pop instruction -- `push {r8,r9}'
[^:]*:130: Error: invalid register list to push/pop instruction -- `pop {r8,r9}'
[^:]*:133: Error: immediate value out of range -- `bkpt #257'
[^:]*:134: Error: Thumb does not support the 2-argument form of this instruction -- `cpsie ai,#5'
[^:]*:135: Error: Thumb does not support the 2-argument form of this instruction -- `cpsid ai,#5'
[^:]*:138: Error: Thumb does not support conditional execution
[^:]*:141: Error: cannot honor width suffix -- `add r0,r1'
[^:]*:145: Error: lo register required -- `mul r0,r0,r8'
[^:]*:146: Error: lo register required -- `mul r0,r8,r0'
[^:]*:147: Error: dest must overlap one source register -- `mul r8,r0,r0'
@


1.5
log
@        PR 10443
        * config/tc-arm.c (do_t_mov_cmp): Do not silently ignore shifted
        operands.
        * gas/arm/t16-bad.l: Update expected messages for moves with
        shifted operands.
@
text
@d184 1
a184 1
[^:]*:127: Warning: value stored for r7 is UNPREDICTABLE
@


1.4
log
@gas:
2009-01-29  Paul Brook  <paul@@codesourcery.com>
            Mark Mitchell  <mark@@codesourcery.com>

	* config/tc-arm.c (do_t_mul): In Thumb-2 mode, use 16-bit encoding
	of MUL when possible.

gas/testsuite:
2009-01-29  Paul Brook  <paul@@codesourcery.com>
            Mark Mitchell  <mark@@codesourcery.com>

	* gas/arm/thumb2_mul.s: New file.
	* gas/arm/thumb2_mul.d: Likewise.
	* gas/arm/thumb2_mul-bad.s: Likewise.
	* gas/arm/thumb2_mul-bad.d: Likewise.
	* gas/arm/thumb2_mul-bad.l: Likewise.
	* gas/arm/t16-bad.s: Add tests for"mul" with high registers.
	* gas/arm/t16-bad.l: Update accordingly.
@
text
@d113 2
d116 2
@


1.3
log
@2008-03-04  Paul Brook  <paul@@codesourcery.com>

	gas/
	* config/tc-arm.c (arm_ext_barrier, arm_ext_msr): New.
	(arm_ext_v7m): Rename...
	(arm_ext_m): ... to this.  Include v6-M.
	(do_t_add_sub): Allow narrow low-reg non flag setting adds.
	(do_t_mrs, do_t_msr, aeabi_set_public_attributes): Use arm_ext_m.
	(md_assemble): Allow wide msr instructions.
	(insns): Add classifications for v6-m instructions.
	(arm_cpu_option_table): Add cortex-m1.
	(arm_arch_option_table): Add armv6-m.
	(cpu_arch): Add ARM_ARCH_V6M.  Fix numbering of other v6 variants.

	gas/testsuite/
	* gas/arm/archv6m.d: New test.
	* gas/arm/archv6m.s: New test.
	* gas/arm/t16-bad.s: Test low register non flag setting add.
	* gas/arm/t16-bad.l: Update expected output.

	include/opcode/
	* arm.h (ARM_EXT_V6M, ARM_EXT_BARRIER, ARM_EXT_THUMB_MSR): Define.
	(ARM_AEXT_V6T2, ARM_AEXT_V7_ARM, ARM_AEXT_V7M): Use new flags.
	(ARM_AEXT_V6M, ARM_ARCH_V6M): Define.
@
text
@d188 3
@


1.2
log
@include/elf:
	* arm.h: Import complete list of official relocation names
	and numbers from AAELF.  Define FAKE_RELOCs for old names.
	Remove a few old names no longer used anywhere.

bfd:
	* elf32-arm.c: Wherever possible, use official reloc names
	from AAELF.
	(elf32_arm_howto_table, elf32_arm_tls_gd32_howto)
	(elf32_arm_tls_ldo32_howto, elf32_arm_tls_ldm32_howto)
	(elf32_arm_tls_le32_howto, elf32_arm_tls_ie32_howto)
	(elf32_arm_vtinherit_howto, elf32_arm_vtentry_howto)
	(elf32_arm_pc11_howto, elf32_arm_thm_pc9_howto, elf32_arm_got_prel)
	(elf32_arm_r_howto): Replace with elf32_arm_howto_table_1,
	elf32_arm_howto_table_2, and elf32_arm_howto_table_3.
	Add many new relocations from AAELF.
	(elf32_arm_howto_from_type): Update to match.
	(elf32_arm_reloc_map): Add entries for R_ARM_THM_JUMP24,
	R_ARM_THM_JUMP11, R_ARM_THM_JUMP19, R_ARM_THM_JUMP8,
	R_ARM_THM_JUMP6, R_ARM_GNU_VTINHERIT, and R_ARM_GNU_VTENTRY.
	(elf32_arm_reloc_type_lookup): Use elf32_arm_howto_from_type.
	(elf32_arm_final_link_relocate): Add support for
	R_ARM_THM_JUMP24, R_ARM_THM_JUMP19, R_ARM_THM_JUMP6.  Remove
	case entries redundant with default.

	* reloc.c: Reorganize ARM relocations.  Add Thumb
	assembler-internal relocations BFD_RELOC_ARM_T32_OFFSET_U8,
	BFD_RELOC_ARM_T32_OFFSET_IMM, BFD_RELOC_ARM_T32_IMMEDIATE.
	Add visible relocations BFD_RELOC_THUMB_PCREL_BRANCH7,
	BFD_RELOC_THUMB_BRANCH20, BFD_RELOC_THUMB_BRANCH25.
	Delete unused relocations BFD_RELOC_ARM_GOT12, BFD_RELOC_ARM_COPY.
	* bfd-in2.h, libbfd.h: Regenerate.

opcodes:
	* arm-dis.c (thumb_opcodes): Add disassembly for V6T2 16-bit
	instructions.  Adjust disassembly of some opcodes to match
	unified syntax.
	(thumb32_opcodes): New table.
	(print_insn_thumb): Rename print_insn_thumb16; don't handle
	two-halfword branches here.
	(print_insn_thumb32): New function.
	(print_insn): Choose among print_insn_arm, print_insn_thumb16,
	and print_insn_thumb32.  Be consistent about order of
	halfwords when printing 32-bit instructions.

gas:
	* hash.c (hash_lookup): Add len parameter.  All callers changed.
	(hash_find_n): New interface.
	* hash.h: Prototype hash_find_n.
	* sb.c: Include as.h.
	(scrub_from_sb, sb_to_scrub, scrub_position): New statics.
	(sb_scrub_and_add_sb): New interface.
	* sb.h: Prototype sb_scrub_and_add_sb.
	* input-scrub.c (input_scrub_include_sb): Use sb_scrub_and_add_sb.

	* config/tc-arm.h (TC_FORCE_RELOCATION_LOCAL): Remove
	reference to BFD_RELOC_ARM_GOT12 which is never generated.
	* config/tc-arm.c: Rewrite, adding Thumb-2 support.

gas/testsuite:
	* gas/arm/arm.exp: Convert all existing "gas_test" tests to
	"run_dump_test" tests.  Run more tests unconditionally.  Run new tests.
	* gas/arm/arch4t.s, gas/arm/arch6zk.s, gas/arm/arm3.s, gas/arm/arm6.s
	* gas/arm/arm7dm.s, gas/arm/bignum1.s, gas/arm/float.s
	* gas/arm/immed.s, gas/arm/iwmmxt.s, gas/arm/offset.s, gas/arm/thumb.s:
	Adjust to work as a dump test.
	* gas/arm/arch4t.d, gas/arm/arch6zk.d, gas/arm/arm3.d, gas/arm/arm6.d
	* gas/arm/arm7dm.d, gas/arm/bignum1.d, gas/arm/float.d
	* gas/arm/immed.d, gas/arm/iwmmxt.d, gas/arm/offset.d, gas/arm/thumb.d:
	New files.

	* gas/arm/armv1-bad.l, gas/arm/armv1-bad.s: Remove tests for
	diagnostics that don't happen in the first pass anymore.

	* gas/arm/iwmmxt-bad.l, gas/arm/r15-bad.l, gas/arm/req.l
	* gas/arm/vfp-bad.l:
	Update expected diagnostics.
	* gas/arm/pic.d: Update expected reloc name.
	* gas/arm/thumbv6.d: CPY no longer appears in disassembly.
	* gas/arm/r15-bad.s: Avoid two-argument mul.
	* gas/arm/req.s: Adjust comments.
	* gas/arm/maverick.d, gas/arm/maverick.s: Avoid inappropriate
	use of PC.

	* gas/arm/macro-1.d, gas/arm/macro1.s
	* gas/arm/t16-bad.l, gas/arm/t16-bad.s
	* gas/arm/tcompat.d, gas/arm/tcompat.s
	* gas/arm/tcompat2.d, gas/arm/tcompat2.s
	* gas/arm/thumb32.d, gas/arm/thumb32.s
	New test pair.

ld/testsuite:
	* ld-arm/mixed-app.d: Adjust expected disassembly a little.
@
text
@d187 1
@


1.1
log
@file t16-bad.l was initially added on branch binutils-csl-arm-2005q1-branch.
@
text
@d1 186
@


1.1.2.1
log
@	Thumb32 assembler.

	* include/elf/arm.h: Import full set of relocation names from
	latest AAELF.  Make the primary name of all relocations be the one
	AAELF specifies.  Provide aliases under the traditional names.
	Kill FIRST_INVALID_RELOC_* and LAST_INVALID_RELOC_*.
	* bfd/reloc.c: Reorganize ARM relocations.  Remove ARM relocations
	that are never generated.  Document more of the relocations.  Add
	relocations for Thumb32.
	* bfd/libbfd.h, bfd/bfd-in2.h: Regenerate.
	* bfd/elf32-arm.c: Reorganize howto tables.  Implement Thumb32
	relocations.
	* ld/testsuite/ld-arm/mixed-app.d: Adjust expectations for
	renamed relocations.

	* gas/hash.c (hash_find_n): New interface.
	* gas/hash.h: Prototype it.

	* gas/config/tc-arm.c: Rewrite and reorganize.  Implement 32-bit
	Thumb instructions.
	* gas/testsuite/gas/arm: Convert all "gas_test" style tests to
	"run_dump_test" style tests, for more thorough testing.  Make
	adjustments to expectations where necessary.
	* gas/testsuite/gas/arm/t16-bad.s, gas/testsuite/gas/arm/tcompat.s
	* gas/testsuite/gas/arm/tcompat2.s, gas/testsuite/gas/arm/thumb32.s:
	New test cases.

	* opcodes/arm-dis.c: Add support for Thumb32 instructions and
	16-bit V6T2 instructions.
@
text
@a0 185
[^:]*: Assembler messages:
[^:]*:36: Error: lo register required -- `tst r8,r0'
[^:]*:36: Error: lo register required -- `tst r0,r8'
[^:]*:36: Error: unshifted register required -- `tst r0,#12'
[^:]*:36: Error: unshifted register required -- `tst r0,r1,lsl#2'
[^:]*:36: Error: unshifted register required -- `tst r0,r1,lsl r3'
[^:]*:37: Error: lo register required -- `cmn r8,r0'
[^:]*:37: Error: lo register required -- `cmn r0,r8'
[^:]*:37: Error: unshifted register required -- `cmn r0,#12'
[^:]*:37: Error: unshifted register required -- `cmn r0,r1,lsl#2'
[^:]*:37: Error: unshifted register required -- `cmn r0,r1,lsl r3'
[^:]*:38: Error: lo register required -- `mvn r8,r0'
[^:]*:38: Error: lo register required -- `mvn r0,r8'
[^:]*:38: Error: unshifted register required -- `mvn r0,#12'
[^:]*:38: Error: unshifted register required -- `mvn r0,r1,lsl#2'
[^:]*:38: Error: unshifted register required -- `mvn r0,r1,lsl r3'
[^:]*:39: Error: lo register required -- `neg r8,r0'
[^:]*:39: Error: lo register required -- `neg r0,r8'
[^:]*:40: Error: lo register required -- `rev r8,r0'
[^:]*:40: Error: lo register required -- `rev r0,r8'
[^:]*:41: Error: lo register required -- `rev16 r8,r0'
[^:]*:41: Error: lo register required -- `rev16 r0,r8'
[^:]*:42: Error: lo register required -- `revsh r8,r0'
[^:]*:42: Error: lo register required -- `revsh r0,r8'
[^:]*:43: Error: lo register required -- `sxtb r8,r0'
[^:]*:43: Error: lo register required -- `sxtb r0,r8'
[^:]*:43: Error: Thumb encoding does not support rotation -- `sxtb r0,r1,ror#8'
[^:]*:44: Error: lo register required -- `sxth r8,r0'
[^:]*:44: Error: lo register required -- `sxth r0,r8'
[^:]*:44: Error: Thumb encoding does not support rotation -- `sxth r0,r1,ror#8'
[^:]*:45: Error: lo register required -- `uxtb r8,r0'
[^:]*:45: Error: lo register required -- `uxtb r0,r8'
[^:]*:45: Error: Thumb encoding does not support rotation -- `uxtb r0,r1,ror#8'
[^:]*:46: Error: lo register required -- `uxth r8,r0'
[^:]*:46: Error: lo register required -- `uxth r0,r8'
[^:]*:46: Error: Thumb encoding does not support rotation -- `uxth r0,r1,ror#8'
[^:]*:48: Error: dest must overlap one source register -- `adc r1,r2,r3'
[^:]*:48: Error: lo register required -- `adc r8,r0'
[^:]*:48: Error: lo register required -- `adc r0,r8'
[^:]*:48: Error: unshifted register required -- `adc r0,#12'
[^:]*:48: Error: unshifted register required -- `adc r0,r1,lsl#2'
[^:]*:48: Error: unshifted register required -- `adc r0,r1,lsl r3'
[^:]*:49: Error: dest must overlap one source register -- `and r1,r2,r3'
[^:]*:49: Error: lo register required -- `and r8,r0'
[^:]*:49: Error: lo register required -- `and r0,r8'
[^:]*:49: Error: unshifted register required -- `and r0,#12'
[^:]*:49: Error: unshifted register required -- `and r0,r1,lsl#2'
[^:]*:49: Error: unshifted register required -- `and r0,r1,lsl r3'
[^:]*:50: Error: dest and source1 must be the same register -- `bic r1,r2,r3'
[^:]*:50: Error: lo register required -- `bic r8,r0'
[^:]*:50: Error: lo register required -- `bic r0,r8'
[^:]*:50: Error: unshifted register required -- `bic r0,#12'
[^:]*:50: Error: unshifted register required -- `bic r0,r1,lsl#2'
[^:]*:50: Error: unshifted register required -- `bic r0,r1,lsl r3'
[^:]*:51: Error: dest must overlap one source register -- `eor r1,r2,r3'
[^:]*:51: Error: lo register required -- `eor r8,r0'
[^:]*:51: Error: lo register required -- `eor r0,r8'
[^:]*:51: Error: unshifted register required -- `eor r0,#12'
[^:]*:51: Error: unshifted register required -- `eor r0,r1,lsl#2'
[^:]*:51: Error: unshifted register required -- `eor r0,r1,lsl r3'
[^:]*:52: Error: dest must overlap one source register -- `orr r1,r2,r3'
[^:]*:52: Error: lo register required -- `orr r8,r0'
[^:]*:52: Error: lo register required -- `orr r0,r8'
[^:]*:52: Error: unshifted register required -- `orr r0,#12'
[^:]*:52: Error: unshifted register required -- `orr r0,r1,lsl#2'
[^:]*:52: Error: unshifted register required -- `orr r0,r1,lsl r3'
[^:]*:53: Error: dest and source1 must be the same register -- `sbc r1,r2,r3'
[^:]*:53: Error: lo register required -- `sbc r8,r0'
[^:]*:53: Error: lo register required -- `sbc r0,r8'
[^:]*:53: Error: unshifted register required -- `sbc r0,#12'
[^:]*:53: Error: unshifted register required -- `sbc r0,r1,lsl#2'
[^:]*:53: Error: unshifted register required -- `sbc r0,r1,lsl r3'
[^:]*:54: Error: dest and source2 must be the same register -- `mul r1,r2,r3'
[^:]*:54: Error: lo register required -- `mul r8,r0'
[^:]*:54: Error: lo register required -- `mul r0,r8'
[^:]*:62: Error: lo register required -- `asr r8,r0,#12'
[^:]*:62: Error: lo register required -- `asr r0,r8,#12'
[^:]*:62: Error: lo register required -- `asr r8,r0'
[^:]*:62: Error: lo register required -- `asr r0,r8'
[^:]*:63: Error: lo register required -- `lsl r8,r0,#12'
[^:]*:63: Error: lo register required -- `lsl r0,r8,#12'
[^:]*:63: Error: lo register required -- `lsl r8,r0'
[^:]*:63: Error: lo register required -- `lsl r0,r8'
[^:]*:64: Error: lo register required -- `lsr r8,r0,#12'
[^:]*:64: Error: lo register required -- `lsr r0,r8,#12'
[^:]*:64: Error: lo register required -- `lsr r8,r0'
[^:]*:64: Error: lo register required -- `lsr r0,r8'
[^:]*:65: Error: lo register required -- `ror r8,r0,#12'
[^:]*:65: Error: lo register required -- `ror r0,r8,#12'
[^:]*:65: Error: lo register required -- `ror r8,r0'
[^:]*:65: Error: lo register required -- `ror r0,r8'
[^:]*:66: Error: ror #imm not supported -- `ror r0,r1,#12'
[^:]*:69: Error: unshifted register required -- `add r0,r1,lsl#2'
[^:]*:70: Error: unshifted register required -- `add r0,r1,lsl r3'
[^:]*:71: Error: lo register required -- `add r8,r0,#1'
[^:]*:72: Error: lo register required -- `add r0,r8,#1'
[^:]*:73: Error: lo register required -- `add r8,#10'
[^:]*:74: Error: dest must overlap one source register -- `add r8,r1,r2'
[^:]*:75: Error: dest must overlap one source register -- `add r1,r8,r2'
[^:]*:76: Error: dest must overlap one source register -- `add r1,r2,r8'
[^:]*:77: Error: lo register required -- `add r8,pc,#4'
[^:]*:78: Error: lo register required -- `add r8,sp,#4'
[^:]*:80: Error: lo register required -- `sub r8,r0'
[^:]*:80: Error: lo register required -- `sub r0,r8'
[^:]*:80: Error: unshifted register required -- `sub r0,r1,lsl#2'
[^:]*:80: Error: unshifted register required -- `sub r0,r1,lsl r3'
[^:]*:81: Error: lo register required -- `sub r8,r0,#1'
[^:]*:82: Error: lo register required -- `sub r0,r8,#1'
[^:]*:83: Error: lo register required -- `sub r8,#10'
[^:]*:84: Error: lo register required -- `sub r8,r1,r2'
[^:]*:85: Error: lo register required -- `sub r1,r8,r2'
[^:]*:86: Error: lo register required -- `sub r1,r2,r8'
[^:]*:90: Error: only lo regs allowed with immediate -- `cmp r8,#255'
[^:]*:94: Error: only lo regs allowed with immediate -- `mov r8,#255'
[^:]*:106: Error: lo register required -- `ldr r8,\[r0\]'
[^:]*:106: Error: lo register required -- `ldr r0,\[r8\]'
[^:]*:106: Error: lo register required -- `ldr r0,\[r0,r8\]'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,#4\]!'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1\],#4'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,-r2\]'
[^:]*:106: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1\],r2'
[^:]*:107: Error: lo register required -- `ldrb r8,\[r0\]'
[^:]*:107: Error: lo register required -- `ldrb r0,\[r8\]'
[^:]*:107: Error: lo register required -- `ldrb r0,\[r0,r8\]'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1,#4\]!'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1\],#4'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1,-r2\]'
[^:]*:107: Error: Thumb does not support this addressing mode -- `ldrb r0,\[r1\],r2'
[^:]*:108: Error: lo register required -- `ldrh r8,\[r0\]'
[^:]*:108: Error: lo register required -- `ldrh r0,\[r8\]'
[^:]*:108: Error: lo register required -- `ldrh r0,\[r0,r8\]'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1,#4\]!'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1\],#4'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1,-r2\]'
[^:]*:108: Error: Thumb does not support this addressing mode -- `ldrh r0,\[r1\],r2'
[^:]*:109: Error: lo register required -- `ldrsb r8,\[r0\]'
[^:]*:109: Error: lo register required -- `ldrsb r0,\[r8\]'
[^:]*:109: Error: lo register required -- `ldrsb r0,\[r0,r8\]'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1,#4\]!'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1\],#4'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1,-r2\]'
[^:]*:109: Error: Thumb does not support this addressing mode -- `ldrsb r0,\[r1\],r2'
[^:]*:110: Error: lo register required -- `ldrsh r8,\[r0\]'
[^:]*:110: Error: lo register required -- `ldrsh r0,\[r8\]'
[^:]*:110: Error: lo register required -- `ldrsh r0,\[r0,r8\]'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1,#4\]!'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1\],#4'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1,-r2\]'
[^:]*:110: Error: Thumb does not support this addressing mode -- `ldrsh r0,\[r1\],r2'
[^:]*:111: Error: lo register required -- `str r8,\[r0\]'
[^:]*:111: Error: lo register required -- `str r0,\[r8\]'
[^:]*:111: Error: lo register required -- `str r0,\[r0,r8\]'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1,#4\]!'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1\],#4'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1,-r2\]'
[^:]*:111: Error: Thumb does not support this addressing mode -- `str r0,\[r1\],r2'
[^:]*:112: Error: lo register required -- `strb r8,\[r0\]'
[^:]*:112: Error: lo register required -- `strb r0,\[r8\]'
[^:]*:112: Error: lo register required -- `strb r0,\[r0,r8\]'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1,#4\]!'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1\],#4'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1,-r2\]'
[^:]*:112: Error: Thumb does not support this addressing mode -- `strb r0,\[r1\],r2'
[^:]*:113: Error: lo register required -- `strh r8,\[r0\]'
[^:]*:113: Error: lo register required -- `strh r0,\[r8\]'
[^:]*:113: Error: lo register required -- `strh r0,\[r0,r8\]'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1,#4\]!'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1\],#4'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1,-r2\]'
[^:]*:113: Error: Thumb does not support this addressing mode -- `strh r0,\[r1\],r2'
[^:]*:115: Error: Thumb does not support this addressing mode -- `ldr r0,\[r1,r2,lsl#1\]'
[^:]*:116: Error: Thumb does not support this addressing mode -- `str r0,\[r1,r2,lsl#1\]'
[^:]*:119: Error: lo register required -- `ldmia r8!,{r1,r2}'
[^:]*:120: Error: lo register required -- `ldmia r7!,{r8}'
[^:]*:121: Warning: this instruction will write back the base register
[^:]*:122: Warning: this instruction will not write back the base register
[^:]*:124: Error: lo register required -- `stmia r8!,{r1,r2}'
[^:]*:125: Error: lo register required -- `stmia r7!,{r8}'
[^:]*:126: Warning: this instruction will write back the base register
[^:]*:127: Warning: value stored for r7 is UNPREDICTABLE
[^:]*:129: Error: invalid register list to push/pop instruction -- `push {r8,r9}'
[^:]*:130: Error: invalid register list to push/pop instruction -- `pop {r8,r9}'
[^:]*:133: Error: immediate value out of range -- `bkpt #257'
[^:]*:134: Error: Thumb does not support the 2-argument form of this instruction -- `cpsie ai,#5'
[^:]*:135: Error: Thumb does not support the 2-argument form of this instruction -- `cpsid ai,#5'
@


1.1.2.2
log
@	* gas/sb.c: Include as.h.
	(sb_to_scrub, scrub_position, scrub_from_sb): New statics.
	(sb_scrub_and_add_sb): New interface.
	* gas/sb.h: Declare sb_scrub_and_add_sb.
	* gas/input-scrub.c (input_scrub_include_sb): Use it.

	* gas/config/tc-arm.c (do_t_arit3c): Correct typo in expression.
	(do_t_mul): Allow dest to equal either source1 or source2 in
	16-bit form; do not complain about dest == source1 in any
	case.

	* gas/testsuite/gas/arm/tcompat2.s: Test both dest==source1 and
	dest==source2 for commutative arithmetic instructions.
	* gas/testsuite/gas/arm/tcompat2.d: Update to match.
	* gas/testsuite/gas/arm/t16-bad.l: Adjust expected diagnostic.
	* gas/testsuite/gas/arm/macro1.s, gas/arm/macro1.d: New test pair.
	* gas/testsuite/gas/arm/arm.exp: Run it.
@
text
@d73 1
a73 1
[^:]*:54: Error: dest must overlap one source register -- `mul r1,r2,r3'
@


